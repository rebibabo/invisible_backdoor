<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8734.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:13">TCGReg</name></type> <name pos:start="1:15" pos:end="1:30">tcg_out_tlb_read</name><parameter_list pos:start="1:31" pos:end="5:59">(<parameter pos:start="1:32" pos:end="1:44"><decl pos:start="1:32" pos:end="1:44"><type pos:start="1:32" pos:end="1:44"><name pos:start="1:32" pos:end="1:41">TCGContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:61"><decl pos:start="1:47" pos:end="1:61"><type pos:start="1:47" pos:end="1:61"><name pos:start="1:47" pos:end="1:54">TCGMemOp</name></type> <name pos:start="1:56" pos:end="1:61">s_bits</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:44"><decl pos:start="3:32" pos:end="3:44"><type pos:start="3:32" pos:end="3:44"><name pos:start="3:32" pos:end="3:37">TCGReg</name></type> <name pos:start="3:39" pos:end="3:44">addrlo</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:59"><decl pos:start="3:47" pos:end="3:59"><type pos:start="3:47" pos:end="3:59"><name pos:start="3:47" pos:end="3:52">TCGReg</name></type> <name pos:start="3:54" pos:end="3:59">addrhi</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:44"><decl pos:start="5:32" pos:end="5:44"><type pos:start="5:32" pos:end="5:44"><name pos:start="5:32" pos:end="5:34">int</name></type> <name pos:start="5:36" pos:end="5:44">mem_index</name></decl></parameter>, <parameter pos:start="5:47" pos:end="5:58"><decl pos:start="5:47" pos:end="5:58"><type pos:start="5:47" pos:end="5:58"><name pos:start="5:47" pos:end="5:50">bool</name></type> <name pos:start="5:52" pos:end="5:58">is_read</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="171:1">{<block_content pos:start="9:5" pos:end="169:18">

    <decl_stmt pos:start="9:5" pos:end="15:73"><decl pos:start="9:5" pos:end="15:72"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">cmp_off</name>

        <init pos:start="11:9" pos:end="15:72">= <expr pos:start="11:11" pos:end="15:72"><operator pos:start="11:11" pos:end="11:11">(</operator><ternary pos:start="11:12" pos:end="15:71"><condition pos:start="11:12" pos:end="13:12"><expr pos:start="11:12" pos:end="11:18"><name pos:start="11:12" pos:end="11:18">is_read</name></expr>

           ?</condition><then pos:start="13:14" pos:end="13:70"> <expr pos:start="13:14" pos:end="13:70"><call pos:start="13:14" pos:end="13:70"><name pos:start="13:14" pos:end="13:21">offsetof</name><argument_list pos:start="13:22" pos:end="13:70">(<argument pos:start="13:23" pos:end="13:34"><expr pos:start="13:23" pos:end="13:34"><name pos:start="13:23" pos:end="13:34">CPUArchState</name></expr></argument>, <argument pos:start="13:37" pos:end="13:69"><expr pos:start="13:37" pos:end="13:69"><name pos:start="13:37" pos:end="13:59"><name pos:start="13:37" pos:end="13:45">tlb_table</name><index pos:start="13:46" pos:end="13:56">[<expr pos:start="13:47" pos:end="13:55"><name pos:start="13:47" pos:end="13:55">mem_index</name></expr>]</index><index pos:start="13:57" pos:end="13:59">[<expr pos:start="13:58" pos:end="13:58"><literal type="number" pos:start="13:58" pos:end="13:58">0</literal></expr>]</index></name><operator pos:start="13:60" pos:end="13:60">.</operator><name pos:start="13:61" pos:end="13:69">addr_read</name></expr></argument>)</argument_list></call></expr>

           </then><else pos:start="15:12" pos:end="15:71">: <expr pos:start="15:14" pos:end="15:71"><call pos:start="15:14" pos:end="15:71"><name pos:start="15:14" pos:end="15:21">offsetof</name><argument_list pos:start="15:22" pos:end="15:71">(<argument pos:start="15:23" pos:end="15:34"><expr pos:start="15:23" pos:end="15:34"><name pos:start="15:23" pos:end="15:34">CPUArchState</name></expr></argument>, <argument pos:start="15:37" pos:end="15:70"><expr pos:start="15:37" pos:end="15:70"><name pos:start="15:37" pos:end="15:59"><name pos:start="15:37" pos:end="15:45">tlb_table</name><index pos:start="15:46" pos:end="15:56">[<expr pos:start="15:47" pos:end="15:55"><name pos:start="15:47" pos:end="15:55">mem_index</name></expr>]</index><index pos:start="15:57" pos:end="15:59">[<expr pos:start="15:58" pos:end="15:58"><literal type="number" pos:start="15:58" pos:end="15:58">0</literal></expr>]</index></name><operator pos:start="15:60" pos:end="15:60">.</operator><name pos:start="15:61" pos:end="15:70">addr_write</name></expr></argument>)</argument_list></call></expr></else></ternary><operator pos:start="15:72" pos:end="15:72">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:73"><decl pos:start="17:5" pos:end="17:72"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:15">add_off</name> <init pos:start="17:17" pos:end="17:72">= <expr pos:start="17:19" pos:end="17:72"><call pos:start="17:19" pos:end="17:72"><name pos:start="17:19" pos:end="17:26">offsetof</name><argument_list pos:start="17:27" pos:end="17:72">(<argument pos:start="17:28" pos:end="17:39"><expr pos:start="17:28" pos:end="17:39"><name pos:start="17:28" pos:end="17:39">CPUArchState</name></expr></argument>, <argument pos:start="17:42" pos:end="17:71"><expr pos:start="17:42" pos:end="17:71"><name pos:start="17:42" pos:end="17:64"><name pos:start="17:42" pos:end="17:50">tlb_table</name><index pos:start="17:51" pos:end="17:61">[<expr pos:start="17:52" pos:end="17:60"><name pos:start="17:52" pos:end="17:60">mem_index</name></expr>]</index><index pos:start="17:62" pos:end="17:64">[<expr pos:start="17:63" pos:end="17:63"><literal type="number" pos:start="17:63" pos:end="17:63">0</literal></expr>]</index></name><operator pos:start="17:65" pos:end="17:65">.</operator><name pos:start="17:66" pos:end="17:71">addend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">TCGReg</name></type> <name pos:start="19:12" pos:end="19:15">base</name> <init pos:start="19:17" pos:end="19:27">= <expr pos:start="19:19" pos:end="19:27"><name pos:start="19:19" pos:end="19:27">TCG_AREG0</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:68">/* Extract the page index, shifted into place for tlb index.  */</comment>

    <if_stmt pos:start="25:5" pos:end="43:5"><if pos:start="25:5" pos:end="43:5">if <condition pos:start="25:8" pos:end="25:34">(<expr pos:start="25:9" pos:end="25:33"><name pos:start="25:9" pos:end="25:27">TCG_TARGET_REG_BITS</name> <operator pos:start="25:29" pos:end="25:30">==</operator> <literal type="number" pos:start="25:32" pos:end="25:33">64</literal></expr>)</condition> <block pos:start="25:36" pos:end="43:5">{<block_content pos:start="27:9" pos:end="41:9">

        <if_stmt pos:start="27:9" pos:end="41:9"><if pos:start="27:9" pos:end="35:9">if <condition pos:start="27:12" pos:end="27:35">(<expr pos:start="27:13" pos:end="27:34"><name pos:start="27:13" pos:end="27:28">TARGET_LONG_BITS</name> <operator pos:start="27:30" pos:end="27:31">==</operator> <literal type="number" pos:start="27:33" pos:end="27:34">32</literal></expr>)</condition> <block pos:start="27:37" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:32">

            <comment type="block" pos:start="29:13" pos:end="29:79">/* Zero-extend the address into a place helpful for further use. */</comment>

            <expr_stmt pos:start="31:13" pos:end="31:50"><expr pos:start="31:13" pos:end="31:49"><call pos:start="31:13" pos:end="31:49"><name pos:start="31:13" pos:end="31:26">tcg_out_ext32u</name><argument_list pos:start="31:27" pos:end="31:49">(<argument pos:start="31:28" pos:end="31:28"><expr pos:start="31:28" pos:end="31:28"><name pos:start="31:28" pos:end="31:28">s</name></expr></argument>, <argument pos:start="31:31" pos:end="31:40"><expr pos:start="31:31" pos:end="31:40"><name pos:start="31:31" pos:end="31:40">TCG_REG_R4</name></expr></argument>, <argument pos:start="31:43" pos:end="31:48"><expr pos:start="31:43" pos:end="31:48"><name pos:start="31:43" pos:end="31:48">addrlo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:32"><expr pos:start="33:13" pos:end="33:31"><name pos:start="33:13" pos:end="33:18">addrlo</name> <operator pos:start="33:20" pos:end="33:20">=</operator> <name pos:start="33:22" pos:end="33:31">TCG_REG_R4</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="35:11" pos:end="41:9">else <block pos:start="35:16" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:66">

            <expr_stmt pos:start="37:13" pos:end="39:66"><expr pos:start="37:13" pos:end="39:65"><call pos:start="37:13" pos:end="39:65"><name pos:start="37:13" pos:end="37:23">tcg_out_rld</name><argument_list pos:start="37:24" pos:end="39:65">(<argument pos:start="37:25" pos:end="37:25"><expr pos:start="37:25" pos:end="37:25"><name pos:start="37:25" pos:end="37:25">s</name></expr></argument>, <argument pos:start="37:28" pos:end="37:33"><expr pos:start="37:28" pos:end="37:33"><name pos:start="37:28" pos:end="37:33">RLDICL</name></expr></argument>, <argument pos:start="37:36" pos:end="37:45"><expr pos:start="37:36" pos:end="37:45"><name pos:start="37:36" pos:end="37:45">TCG_REG_R3</name></expr></argument>, <argument pos:start="37:48" pos:end="37:53"><expr pos:start="37:48" pos:end="37:53"><name pos:start="37:48" pos:end="37:53">addrlo</name></expr></argument>,

                        <argument pos:start="39:25" pos:end="39:45"><expr pos:start="39:25" pos:end="39:45"><literal type="number" pos:start="39:25" pos:end="39:28">64</literal> <operator pos:start="39:28" pos:end="39:28">-</operator> <name pos:start="39:30" pos:end="39:45">TARGET_PAGE_BITS</name></expr></argument>, <argument pos:start="39:48" pos:end="39:64"><expr pos:start="39:48" pos:end="39:64"><literal type="number" pos:start="39:48" pos:end="39:51">64</literal> <operator pos:start="39:51" pos:end="39:51">-</operator> <name pos:start="39:53" pos:end="39:64">CPU_TLB_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:45">/* Compensate for very large offsets.  */</comment>

    <if_stmt pos:start="49:5" pos:end="71:5"><if pos:start="49:5" pos:end="71:5">if <condition pos:start="49:8" pos:end="49:26">(<expr pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:15">add_off</name> <operator pos:start="49:17" pos:end="49:18">&gt;=</operator> <literal type="number" pos:start="49:20" pos:end="49:25">0x8000</literal></expr>)</condition> <block pos:start="49:28" pos:end="71:5">{<block_content pos:start="57:9" pos:end="69:26">

        <comment type="block" pos:start="51:9" pos:end="55:61">/* Most target env are smaller than 32k; none are larger than 64k.

           Simplify the logic here merely to offset by 0x7ff0, giving us a

           range just shy of 64k.  Check this assumption.  */</comment>

        <expr_stmt pos:start="57:9" pos:end="61:45"><expr pos:start="57:9" pos:end="61:44"><call pos:start="57:9" pos:end="61:44"><name pos:start="57:9" pos:end="57:25">QEMU_BUILD_BUG_ON</name><argument_list pos:start="57:26" pos:end="61:44">(<argument pos:start="57:27" pos:end="61:43"><expr pos:start="57:27" pos:end="61:43"><call pos:start="57:27" pos:end="59:66"><name pos:start="57:27" pos:end="57:34">offsetof</name><argument_list pos:start="57:35" pos:end="59:66">(<argument pos:start="57:36" pos:end="57:47"><expr pos:start="57:36" pos:end="57:47"><name pos:start="57:36" pos:end="57:47">CPUArchState</name></expr></argument>,

                                   <argument pos:start="59:36" pos:end="59:65"><expr pos:start="59:36" pos:end="59:65"><name pos:start="59:36" pos:end="59:65"><name pos:start="59:36" pos:end="59:44">tlb_table</name><index pos:start="59:45" pos:end="59:62">[<expr pos:start="59:46" pos:end="59:61"><name pos:start="59:46" pos:end="59:57">NB_MMU_MODES</name> <operator pos:start="59:59" pos:end="59:59">-</operator> <literal type="number" pos:start="59:61" pos:end="59:61">1</literal></expr>]</index><index pos:start="59:63" pos:end="59:65">[<expr pos:start="59:64" pos:end="59:64"><literal type="number" pos:start="59:64" pos:end="59:64">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                          <operator pos:start="61:27" pos:end="61:27">&gt;</operator> <literal type="number" pos:start="61:29" pos:end="61:36">0x7ff0</literal> <operator pos:start="61:36" pos:end="61:36">+</operator> <literal type="number" pos:start="61:38" pos:end="61:43">0x7fff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:61"><expr pos:start="63:9" pos:end="63:60"><call pos:start="63:9" pos:end="63:60"><name pos:start="63:9" pos:end="63:17">tcg_out32</name><argument_list pos:start="63:18" pos:end="63:60">(<argument pos:start="63:19" pos:end="63:19"><expr pos:start="63:19" pos:end="63:19"><name pos:start="63:19" pos:end="63:19">s</name></expr></argument>, <argument pos:start="63:22" pos:end="63:59"><expr pos:start="63:22" pos:end="63:59"><name pos:start="63:22" pos:end="63:25">ADDI</name> <operator pos:start="63:27" pos:end="63:27">|</operator> <call pos:start="63:29" pos:end="63:59"><name pos:start="63:29" pos:end="63:31">TAI</name><argument_list pos:start="63:32" pos:end="63:59">(<argument pos:start="63:33" pos:end="63:44"><expr pos:start="63:33" pos:end="63:44"><name pos:start="63:33" pos:end="63:44">TCG_REG_TMP1</name></expr></argument>, <argument pos:start="63:47" pos:end="63:50"><expr pos:start="63:47" pos:end="63:50"><name pos:start="63:47" pos:end="63:50">base</name></expr></argument>, <argument pos:start="63:53" pos:end="63:58"><expr pos:start="63:53" pos:end="63:58"><literal type="number" pos:start="63:53" pos:end="63:58">0x7ff0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:28"><expr pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:12">base</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <name pos:start="65:16" pos:end="65:27">TCG_REG_TMP1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:26"><expr pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:15">cmp_off</name> <operator pos:start="67:17" pos:end="67:18">-=</operator> <literal type="number" pos:start="67:20" pos:end="67:25">0x7ff0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:26"><expr pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:15">add_off</name> <operator pos:start="69:17" pos:end="69:18">-=</operator> <literal type="number" pos:start="69:20" pos:end="69:25">0x7ff0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:43">/* Extraction and shifting, part 2.  */</comment>

    <if_stmt pos:start="77:5" pos:end="91:5"><if pos:start="77:5" pos:end="87:5">if <condition pos:start="77:8" pos:end="77:60">(<expr pos:start="77:9" pos:end="77:59"><name pos:start="77:9" pos:end="77:27">TCG_TARGET_REG_BITS</name> <operator pos:start="77:29" pos:end="77:30">==</operator> <literal type="number" pos:start="77:32" pos:end="77:33">32</literal> <operator pos:start="77:35" pos:end="77:36">||</operator> <name pos:start="77:38" pos:end="77:53">TARGET_LONG_BITS</name> <operator pos:start="77:55" pos:end="77:56">==</operator> <literal type="number" pos:start="77:58" pos:end="77:59">32</literal></expr>)</condition> <block pos:start="77:62" pos:end="87:5">{<block_content pos:start="79:9" pos:end="85:45">

        <expr_stmt pos:start="79:9" pos:end="85:45"><expr pos:start="79:9" pos:end="85:44"><call pos:start="79:9" pos:end="85:44"><name pos:start="79:9" pos:end="79:19">tcg_out_rlw</name><argument_list pos:start="79:20" pos:end="85:44">(<argument pos:start="79:21" pos:end="79:21"><expr pos:start="79:21" pos:end="79:21"><name pos:start="79:21" pos:end="79:21">s</name></expr></argument>, <argument pos:start="79:24" pos:end="79:29"><expr pos:start="79:24" pos:end="79:29"><name pos:start="79:24" pos:end="79:29">RLWINM</name></expr></argument>, <argument pos:start="79:32" pos:end="79:41"><expr pos:start="79:32" pos:end="79:41"><name pos:start="79:32" pos:end="79:41">TCG_REG_R3</name></expr></argument>, <argument pos:start="79:44" pos:end="79:49"><expr pos:start="79:44" pos:end="79:49"><name pos:start="79:44" pos:end="79:49">addrlo</name></expr></argument>,

                    <argument pos:start="81:21" pos:end="81:64"><expr pos:start="81:21" pos:end="81:64"><literal type="number" pos:start="81:21" pos:end="81:24">32</literal> <operator pos:start="81:24" pos:end="81:24">-</operator> <operator pos:start="81:26" pos:end="81:26">(</operator><name pos:start="81:27" pos:end="81:42">TARGET_PAGE_BITS</name> <operator pos:start="81:44" pos:end="81:44">-</operator> <name pos:start="81:46" pos:end="81:63">CPU_TLB_ENTRY_BITS</name><operator pos:start="81:64" pos:end="81:64">)</operator></expr></argument>,

                    <argument pos:start="83:21" pos:end="83:60"><expr pos:start="83:21" pos:end="83:60"><literal type="number" pos:start="83:21" pos:end="83:24">32</literal> <operator pos:start="83:24" pos:end="83:24">-</operator> <operator pos:start="83:26" pos:end="83:26">(</operator><name pos:start="83:27" pos:end="83:38">CPU_TLB_BITS</name> <operator pos:start="83:40" pos:end="83:40">+</operator> <name pos:start="83:42" pos:end="83:59">CPU_TLB_ENTRY_BITS</name><operator pos:start="83:60" pos:end="83:60">)</operator></expr></argument>,

                    <argument pos:start="85:21" pos:end="85:43"><expr pos:start="85:21" pos:end="85:43"><literal type="number" pos:start="85:21" pos:end="85:24">31</literal> <operator pos:start="85:24" pos:end="85:24">-</operator> <name pos:start="85:26" pos:end="85:43">CPU_TLB_ENTRY_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="87:7" pos:end="91:5">else <block pos:start="87:12" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:70">

        <expr_stmt pos:start="89:9" pos:end="89:70"><expr pos:start="89:9" pos:end="89:69"><call pos:start="89:9" pos:end="89:69"><name pos:start="89:9" pos:end="89:22">tcg_out_shli64</name><argument_list pos:start="89:23" pos:end="89:69">(<argument pos:start="89:24" pos:end="89:24"><expr pos:start="89:24" pos:end="89:24"><name pos:start="89:24" pos:end="89:24">s</name></expr></argument>, <argument pos:start="89:27" pos:end="89:36"><expr pos:start="89:27" pos:end="89:36"><name pos:start="89:27" pos:end="89:36">TCG_REG_R3</name></expr></argument>, <argument pos:start="89:39" pos:end="89:48"><expr pos:start="89:39" pos:end="89:48"><name pos:start="89:39" pos:end="89:48">TCG_REG_R3</name></expr></argument>, <argument pos:start="89:51" pos:end="89:68"><expr pos:start="89:51" pos:end="89:68"><name pos:start="89:51" pos:end="89:68">CPU_TLB_ENTRY_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:58"><expr pos:start="95:5" pos:end="95:57"><call pos:start="95:5" pos:end="95:57"><name pos:start="95:5" pos:end="95:13">tcg_out32</name><argument_list pos:start="95:14" pos:end="95:57">(<argument pos:start="95:15" pos:end="95:15"><expr pos:start="95:15" pos:end="95:15"><name pos:start="95:15" pos:end="95:15">s</name></expr></argument>, <argument pos:start="95:18" pos:end="95:56"><expr pos:start="95:18" pos:end="95:56"><name pos:start="95:18" pos:end="95:20">ADD</name> <operator pos:start="95:22" pos:end="95:22">|</operator> <call pos:start="95:24" pos:end="95:56"><name pos:start="95:24" pos:end="95:26">TAB</name><argument_list pos:start="95:27" pos:end="95:56">(<argument pos:start="95:28" pos:end="95:37"><expr pos:start="95:28" pos:end="95:37"><name pos:start="95:28" pos:end="95:37">TCG_REG_R3</name></expr></argument>, <argument pos:start="95:40" pos:end="95:49"><expr pos:start="95:40" pos:end="95:49"><name pos:start="95:40" pos:end="95:49">TCG_REG_R3</name></expr></argument>, <argument pos:start="95:52" pos:end="95:55"><expr pos:start="95:52" pos:end="95:55"><name pos:start="95:52" pos:end="95:55">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:35">/* Load the tlb comparator.  */</comment>

    <if_stmt pos:start="101:5" pos:end="111:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:47">(<expr pos:start="101:9" pos:end="101:46"><name pos:start="101:9" pos:end="101:27">TCG_TARGET_REG_BITS</name> <operator pos:start="101:29" pos:end="101:29">&lt;</operator> <name pos:start="101:31" pos:end="101:46">TARGET_LONG_BITS</name></expr>)</condition> <block pos:start="101:49" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:75">

        <expr_stmt pos:start="103:9" pos:end="103:69"><expr pos:start="103:9" pos:end="103:68"><call pos:start="103:9" pos:end="103:68"><name pos:start="103:9" pos:end="103:18">tcg_out_ld</name><argument_list pos:start="103:19" pos:end="103:68">(<argument pos:start="103:20" pos:end="103:20"><expr pos:start="103:20" pos:end="103:20"><name pos:start="103:20" pos:end="103:20">s</name></expr></argument>, <argument pos:start="103:23" pos:end="103:34"><expr pos:start="103:23" pos:end="103:34"><name pos:start="103:23" pos:end="103:34">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="103:37" pos:end="103:46"><expr pos:start="103:37" pos:end="103:46"><name pos:start="103:37" pos:end="103:46">TCG_REG_R4</name></expr></argument>, <argument pos:start="103:49" pos:end="103:58"><expr pos:start="103:49" pos:end="103:58"><name pos:start="103:49" pos:end="103:58">TCG_REG_R3</name></expr></argument>, <argument pos:start="103:61" pos:end="103:67"><expr pos:start="103:61" pos:end="103:67"><name pos:start="103:61" pos:end="103:67">cmp_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:75"><expr pos:start="105:9" pos:end="105:74"><call pos:start="105:9" pos:end="105:74"><name pos:start="105:9" pos:end="105:18">tcg_out_ld</name><argument_list pos:start="105:19" pos:end="105:74">(<argument pos:start="105:20" pos:end="105:20"><expr pos:start="105:20" pos:end="105:20"><name pos:start="105:20" pos:end="105:20">s</name></expr></argument>, <argument pos:start="105:23" pos:end="105:34"><expr pos:start="105:23" pos:end="105:34"><name pos:start="105:23" pos:end="105:34">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="105:37" pos:end="105:48"><expr pos:start="105:37" pos:end="105:48"><name pos:start="105:37" pos:end="105:48">TCG_REG_TMP1</name></expr></argument>, <argument pos:start="105:51" pos:end="105:60"><expr pos:start="105:51" pos:end="105:60"><name pos:start="105:51" pos:end="105:60">TCG_REG_R3</name></expr></argument>, <argument pos:start="105:63" pos:end="105:73"><expr pos:start="105:63" pos:end="105:73"><name pos:start="105:63" pos:end="105:69">cmp_off</name> <operator pos:start="105:71" pos:end="105:71">+</operator> <literal type="number" pos:start="105:73" pos:end="105:73">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="107:7" pos:end="111:5">else <block pos:start="107:12" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:70">

        <expr_stmt pos:start="109:9" pos:end="109:70"><expr pos:start="109:9" pos:end="109:69"><call pos:start="109:9" pos:end="109:69"><name pos:start="109:9" pos:end="109:18">tcg_out_ld</name><argument_list pos:start="109:19" pos:end="109:69">(<argument pos:start="109:20" pos:end="109:20"><expr pos:start="109:20" pos:end="109:20"><name pos:start="109:20" pos:end="109:20">s</name></expr></argument>, <argument pos:start="109:23" pos:end="109:33"><expr pos:start="109:23" pos:end="109:33"><name pos:start="109:23" pos:end="109:33">TCG_TYPE_TL</name></expr></argument>, <argument pos:start="109:36" pos:end="109:47"><expr pos:start="109:36" pos:end="109:47"><name pos:start="109:36" pos:end="109:47">TCG_REG_TMP1</name></expr></argument>, <argument pos:start="109:50" pos:end="109:59"><expr pos:start="109:50" pos:end="109:59"><name pos:start="109:50" pos:end="109:59">TCG_REG_R3</name></expr></argument>, <argument pos:start="109:62" pos:end="109:68"><expr pos:start="109:62" pos:end="109:68"><name pos:start="109:62" pos:end="109:68">cmp_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="115:5" pos:end="117:42">/* Load the TLB addend for use on the fast path.  Do this asap

       to minimize any load use delay.  */</comment>

    <expr_stmt pos:start="119:5" pos:end="119:65"><expr pos:start="119:5" pos:end="119:64"><call pos:start="119:5" pos:end="119:64"><name pos:start="119:5" pos:end="119:14">tcg_out_ld</name><argument_list pos:start="119:15" pos:end="119:64">(<argument pos:start="119:16" pos:end="119:16"><expr pos:start="119:16" pos:end="119:16"><name pos:start="119:16" pos:end="119:16">s</name></expr></argument>, <argument pos:start="119:19" pos:end="119:30"><expr pos:start="119:19" pos:end="119:30"><name pos:start="119:19" pos:end="119:30">TCG_TYPE_PTR</name></expr></argument>, <argument pos:start="119:33" pos:end="119:42"><expr pos:start="119:33" pos:end="119:42"><name pos:start="119:33" pos:end="119:42">TCG_REG_R3</name></expr></argument>, <argument pos:start="119:45" pos:end="119:54"><expr pos:start="119:45" pos:end="119:54"><name pos:start="119:45" pos:end="119:54">TCG_REG_R3</name></expr></argument>, <argument pos:start="119:57" pos:end="119:63"><expr pos:start="119:57" pos:end="119:63"><name pos:start="119:57" pos:end="119:63">add_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:67">/* Clear the non-page, non-alignment bits from the address.  */</comment>

    <if_stmt pos:start="125:5" pos:end="145:5"><if pos:start="125:5" pos:end="131:5">if <condition pos:start="125:8" pos:end="125:60">(<expr pos:start="125:9" pos:end="125:59"><name pos:start="125:9" pos:end="125:27">TCG_TARGET_REG_BITS</name> <operator pos:start="125:29" pos:end="125:30">==</operator> <literal type="number" pos:start="125:32" pos:end="125:33">32</literal> <operator pos:start="125:35" pos:end="125:36">||</operator> <name pos:start="125:38" pos:end="125:53">TARGET_LONG_BITS</name> <operator pos:start="125:55" pos:end="125:56">==</operator> <literal type="number" pos:start="125:58" pos:end="125:59">32</literal></expr>)</condition> <block pos:start="125:62" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:63">

        <expr_stmt pos:start="127:9" pos:end="129:63"><expr pos:start="127:9" pos:end="129:62"><call pos:start="127:9" pos:end="129:62"><name pos:start="127:9" pos:end="127:19">tcg_out_rlw</name><argument_list pos:start="127:20" pos:end="129:62">(<argument pos:start="127:21" pos:end="127:21"><expr pos:start="127:21" pos:end="127:21"><name pos:start="127:21" pos:end="127:21">s</name></expr></argument>, <argument pos:start="127:24" pos:end="127:29"><expr pos:start="127:24" pos:end="127:29"><name pos:start="127:24" pos:end="127:29">RLWINM</name></expr></argument>, <argument pos:start="127:32" pos:end="127:41"><expr pos:start="127:32" pos:end="127:41"><name pos:start="127:32" pos:end="127:41">TCG_REG_R0</name></expr></argument>, <argument pos:start="127:44" pos:end="127:49"><expr pos:start="127:44" pos:end="127:49"><name pos:start="127:44" pos:end="127:49">addrlo</name></expr></argument>, <argument pos:start="127:52" pos:end="127:52"><expr pos:start="127:52" pos:end="127:52"><literal type="number" pos:start="127:52" pos:end="127:52">0</literal></expr></argument>,

                    <argument pos:start="129:21" pos:end="129:38"><expr pos:start="129:21" pos:end="129:38"><operator pos:start="129:21" pos:end="129:21">(</operator><literal type="number" pos:start="129:22" pos:end="129:25">32</literal> <operator pos:start="129:25" pos:end="129:25">-</operator> <name pos:start="129:27" pos:end="129:32">s_bits</name><operator pos:start="129:33" pos:end="129:33">)</operator> <operator pos:start="129:35" pos:end="129:35">&amp;</operator> <literal type="number" pos:start="129:37" pos:end="129:38">31</literal></expr></argument>, <argument pos:start="129:41" pos:end="129:61"><expr pos:start="129:41" pos:end="129:61"><literal type="number" pos:start="129:41" pos:end="129:44">31</literal> <operator pos:start="129:44" pos:end="129:44">-</operator> <name pos:start="129:46" pos:end="129:61">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="131:7" pos:end="137:5">else if <condition pos:start="131:15" pos:end="131:23">(<expr pos:start="131:16" pos:end="131:22"><operator pos:start="131:16" pos:end="131:16">!</operator><name pos:start="131:17" pos:end="131:22">s_bits</name></expr>)</condition> <block pos:start="131:25" pos:end="137:5">{<block_content pos:start="133:9" pos:end="135:46">

        <expr_stmt pos:start="133:9" pos:end="135:46"><expr pos:start="133:9" pos:end="135:45"><call pos:start="133:9" pos:end="135:45"><name pos:start="133:9" pos:end="133:19">tcg_out_rld</name><argument_list pos:start="133:20" pos:end="135:45">(<argument pos:start="133:21" pos:end="133:21"><expr pos:start="133:21" pos:end="133:21"><name pos:start="133:21" pos:end="133:21">s</name></expr></argument>, <argument pos:start="133:24" pos:end="133:29"><expr pos:start="133:24" pos:end="133:29"><name pos:start="133:24" pos:end="133:29">RLDICR</name></expr></argument>, <argument pos:start="133:32" pos:end="133:41"><expr pos:start="133:32" pos:end="133:41"><name pos:start="133:32" pos:end="133:41">TCG_REG_R0</name></expr></argument>, <argument pos:start="133:44" pos:end="133:49"><expr pos:start="133:44" pos:end="133:49"><name pos:start="133:44" pos:end="133:49">addrlo</name></expr></argument>,

                    <argument pos:start="135:21" pos:end="135:21"><expr pos:start="135:21" pos:end="135:21"><literal type="number" pos:start="135:21" pos:end="135:21">0</literal></expr></argument>, <argument pos:start="135:24" pos:end="135:44"><expr pos:start="135:24" pos:end="135:44"><literal type="number" pos:start="135:24" pos:end="135:27">63</literal> <operator pos:start="135:27" pos:end="135:27">-</operator> <name pos:start="135:29" pos:end="135:44">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="137:7" pos:end="145:5">else <block pos:start="137:12" pos:end="145:5">{<block_content pos:start="139:9" pos:end="143:76">

        <expr_stmt pos:start="139:9" pos:end="141:70"><expr pos:start="139:9" pos:end="141:69"><call pos:start="139:9" pos:end="141:69"><name pos:start="139:9" pos:end="139:19">tcg_out_rld</name><argument_list pos:start="139:20" pos:end="141:69">(<argument pos:start="139:21" pos:end="139:21"><expr pos:start="139:21" pos:end="139:21"><name pos:start="139:21" pos:end="139:21">s</name></expr></argument>, <argument pos:start="139:24" pos:end="139:29"><expr pos:start="139:24" pos:end="139:29"><name pos:start="139:24" pos:end="139:29">RLDICL</name></expr></argument>, <argument pos:start="139:32" pos:end="139:41"><expr pos:start="139:32" pos:end="139:41"><name pos:start="139:32" pos:end="139:41">TCG_REG_R0</name></expr></argument>, <argument pos:start="139:44" pos:end="139:49"><expr pos:start="139:44" pos:end="139:49"><name pos:start="139:44" pos:end="139:49">addrlo</name></expr></argument>,

                    <argument pos:start="141:21" pos:end="141:41"><expr pos:start="141:21" pos:end="141:41"><literal type="number" pos:start="141:21" pos:end="141:24">64</literal> <operator pos:start="141:24" pos:end="141:24">-</operator> <name pos:start="141:26" pos:end="141:41">TARGET_PAGE_BITS</name></expr></argument>, <argument pos:start="141:44" pos:end="141:68"><expr pos:start="141:44" pos:end="141:68"><name pos:start="141:44" pos:end="141:59">TARGET_PAGE_BITS</name> <operator pos:start="141:61" pos:end="141:61">-</operator> <name pos:start="141:63" pos:end="141:68">s_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:76"><expr pos:start="143:9" pos:end="143:75"><call pos:start="143:9" pos:end="143:75"><name pos:start="143:9" pos:end="143:19">tcg_out_rld</name><argument_list pos:start="143:20" pos:end="143:75">(<argument pos:start="143:21" pos:end="143:21"><expr pos:start="143:21" pos:end="143:21"><name pos:start="143:21" pos:end="143:21">s</name></expr></argument>, <argument pos:start="143:24" pos:end="143:29"><expr pos:start="143:24" pos:end="143:29"><name pos:start="143:24" pos:end="143:29">RLDICL</name></expr></argument>, <argument pos:start="143:32" pos:end="143:41"><expr pos:start="143:32" pos:end="143:41"><name pos:start="143:32" pos:end="143:41">TCG_REG_R0</name></expr></argument>, <argument pos:start="143:44" pos:end="143:53"><expr pos:start="143:44" pos:end="143:53"><name pos:start="143:44" pos:end="143:53">TCG_REG_R0</name></expr></argument>, <argument pos:start="143:56" pos:end="143:71"><expr pos:start="143:56" pos:end="143:71"><name pos:start="143:56" pos:end="143:71">TARGET_PAGE_BITS</name></expr></argument>, <argument pos:start="143:74" pos:end="143:74"><expr pos:start="143:74" pos:end="143:74"><literal type="number" pos:start="143:74" pos:end="143:74">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="149:5" pos:end="165:5"><if pos:start="149:5" pos:end="159:5">if <condition pos:start="149:8" pos:end="149:47">(<expr pos:start="149:9" pos:end="149:46"><name pos:start="149:9" pos:end="149:27">TCG_TARGET_REG_BITS</name> <operator pos:start="149:29" pos:end="149:29">&lt;</operator> <name pos:start="149:31" pos:end="149:46">TARGET_LONG_BITS</name></expr>)</condition> <block pos:start="149:49" pos:end="159:5">{<block_content pos:start="151:9" pos:end="157:73">

        <expr_stmt pos:start="151:9" pos:end="153:40"><expr pos:start="151:9" pos:end="153:39"><call pos:start="151:9" pos:end="153:39"><name pos:start="151:9" pos:end="151:19">tcg_out_cmp</name><argument_list pos:start="151:20" pos:end="153:39">(<argument pos:start="151:21" pos:end="151:21"><expr pos:start="151:21" pos:end="151:21"><name pos:start="151:21" pos:end="151:21">s</name></expr></argument>, <argument pos:start="151:24" pos:end="151:34"><expr pos:start="151:24" pos:end="151:34"><name pos:start="151:24" pos:end="151:34">TCG_COND_EQ</name></expr></argument>, <argument pos:start="151:37" pos:end="151:46"><expr pos:start="151:37" pos:end="151:46"><name pos:start="151:37" pos:end="151:46">TCG_REG_R0</name></expr></argument>, <argument pos:start="151:49" pos:end="151:60"><expr pos:start="151:49" pos:end="151:60"><name pos:start="151:49" pos:end="151:60">TCG_REG_TMP1</name></expr></argument>,

                    <argument pos:start="153:21" pos:end="153:21"><expr pos:start="153:21" pos:end="153:21"><literal type="number" pos:start="153:21" pos:end="153:21">0</literal></expr></argument>, <argument pos:start="153:24" pos:end="153:24"><expr pos:start="153:24" pos:end="153:24"><literal type="number" pos:start="153:24" pos:end="153:24">7</literal></expr></argument>, <argument pos:start="153:27" pos:end="153:38"><expr pos:start="153:27" pos:end="153:38"><name pos:start="153:27" pos:end="153:38">TCG_TYPE_I32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:76"><expr pos:start="155:9" pos:end="155:75"><call pos:start="155:9" pos:end="155:75"><name pos:start="155:9" pos:end="155:19">tcg_out_cmp</name><argument_list pos:start="155:20" pos:end="155:75">(<argument pos:start="155:21" pos:end="155:21"><expr pos:start="155:21" pos:end="155:21"><name pos:start="155:21" pos:end="155:21">s</name></expr></argument>, <argument pos:start="155:24" pos:end="155:34"><expr pos:start="155:24" pos:end="155:34"><name pos:start="155:24" pos:end="155:34">TCG_COND_EQ</name></expr></argument>, <argument pos:start="155:37" pos:end="155:42"><expr pos:start="155:37" pos:end="155:42"><name pos:start="155:37" pos:end="155:42">addrhi</name></expr></argument>, <argument pos:start="155:45" pos:end="155:54"><expr pos:start="155:45" pos:end="155:54"><name pos:start="155:45" pos:end="155:54">TCG_REG_R4</name></expr></argument>, <argument pos:start="155:57" pos:end="155:57"><expr pos:start="155:57" pos:end="155:57"><literal type="number" pos:start="155:57" pos:end="155:57">0</literal></expr></argument>, <argument pos:start="155:60" pos:end="155:60"><expr pos:start="155:60" pos:end="155:60"><literal type="number" pos:start="155:60" pos:end="155:60">6</literal></expr></argument>, <argument pos:start="155:63" pos:end="155:74"><expr pos:start="155:63" pos:end="155:74"><name pos:start="155:63" pos:end="155:74">TCG_TYPE_I32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:73"><expr pos:start="157:9" pos:end="157:72"><call pos:start="157:9" pos:end="157:72"><name pos:start="157:9" pos:end="157:17">tcg_out32</name><argument_list pos:start="157:18" pos:end="157:72">(<argument pos:start="157:19" pos:end="157:19"><expr pos:start="157:19" pos:end="157:19"><name pos:start="157:19" pos:end="157:19">s</name></expr></argument>, <argument pos:start="157:22" pos:end="157:71"><expr pos:start="157:22" pos:end="157:71"><name pos:start="157:22" pos:end="157:26">CRAND</name> <operator pos:start="157:28" pos:end="157:28">|</operator> <call pos:start="157:30" pos:end="157:41"><name pos:start="157:30" pos:end="157:31">BT</name><argument_list pos:start="157:32" pos:end="157:41">(<argument pos:start="157:33" pos:end="157:33"><expr pos:start="157:33" pos:end="157:33"><literal type="number" pos:start="157:33" pos:end="157:33">7</literal></expr></argument>, <argument pos:start="157:36" pos:end="157:40"><expr pos:start="157:36" pos:end="157:40"><name pos:start="157:36" pos:end="157:40">CR_EQ</name></expr></argument>)</argument_list></call> <operator pos:start="157:43" pos:end="157:43">|</operator> <call pos:start="157:45" pos:end="157:56"><name pos:start="157:45" pos:end="157:46">BA</name><argument_list pos:start="157:47" pos:end="157:56">(<argument pos:start="157:48" pos:end="157:48"><expr pos:start="157:48" pos:end="157:48"><literal type="number" pos:start="157:48" pos:end="157:48">6</literal></expr></argument>, <argument pos:start="157:51" pos:end="157:55"><expr pos:start="157:51" pos:end="157:55"><name pos:start="157:51" pos:end="157:55">CR_EQ</name></expr></argument>)</argument_list></call> <operator pos:start="157:58" pos:end="157:58">|</operator> <call pos:start="157:60" pos:end="157:71"><name pos:start="157:60" pos:end="157:61">BB</name><argument_list pos:start="157:62" pos:end="157:71">(<argument pos:start="157:63" pos:end="157:63"><expr pos:start="157:63" pos:end="157:63"><literal type="number" pos:start="157:63" pos:end="157:63">7</literal></expr></argument>, <argument pos:start="157:66" pos:end="157:70"><expr pos:start="157:66" pos:end="157:70"><name pos:start="157:66" pos:end="157:70">CR_EQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="159:7" pos:end="165:5">else <block pos:start="159:12" pos:end="165:5">{<block_content pos:start="161:9" pos:end="163:39">

        <expr_stmt pos:start="161:9" pos:end="163:39"><expr pos:start="161:9" pos:end="163:38"><call pos:start="161:9" pos:end="163:38"><name pos:start="161:9" pos:end="161:19">tcg_out_cmp</name><argument_list pos:start="161:20" pos:end="163:38">(<argument pos:start="161:21" pos:end="161:21"><expr pos:start="161:21" pos:end="161:21"><name pos:start="161:21" pos:end="161:21">s</name></expr></argument>, <argument pos:start="161:24" pos:end="161:34"><expr pos:start="161:24" pos:end="161:34"><name pos:start="161:24" pos:end="161:34">TCG_COND_EQ</name></expr></argument>, <argument pos:start="161:37" pos:end="161:46"><expr pos:start="161:37" pos:end="161:46"><name pos:start="161:37" pos:end="161:46">TCG_REG_R0</name></expr></argument>, <argument pos:start="161:49" pos:end="161:60"><expr pos:start="161:49" pos:end="161:60"><name pos:start="161:49" pos:end="161:60">TCG_REG_TMP1</name></expr></argument>,

                    <argument pos:start="163:21" pos:end="163:21"><expr pos:start="163:21" pos:end="163:21"><literal type="number" pos:start="163:21" pos:end="163:21">0</literal></expr></argument>, <argument pos:start="163:24" pos:end="163:24"><expr pos:start="163:24" pos:end="163:24"><literal type="number" pos:start="163:24" pos:end="163:24">7</literal></expr></argument>, <argument pos:start="163:27" pos:end="163:37"><expr pos:start="163:27" pos:end="163:37"><name pos:start="163:27" pos:end="163:37">TCG_TYPE_TL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="169:5" pos:end="169:18">return <expr pos:start="169:12" pos:end="169:17"><name pos:start="169:12" pos:end="169:17">addrlo</name></expr>;</return>

</block_content>}</block></function>
</unit>
