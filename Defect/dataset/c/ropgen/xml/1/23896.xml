<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23896.c" pos:tabs="8"><function pos:start="1:1" pos:end="86:15"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">tlb_set_page_exec</name><parameter_list pos:start="1:22" pos:end="3:50">(<parameter pos:start="1:23" pos:end="1:35"><decl pos:start="1:23" pos:end="1:35"><type pos:start="1:23" pos:end="1:35"><name pos:start="1:23" pos:end="1:30">CPUState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">env</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><name pos:start="1:38" pos:end="1:49">target_ulong</name></type> <name pos:start="1:51" pos:end="1:55">vaddr</name></decl></parameter>, 
                      <parameter pos:start="2:23" pos:end="2:46"><decl pos:start="2:23" pos:end="2:46"><type pos:start="2:23" pos:end="2:46"><name pos:start="2:23" pos:end="2:40">target_phys_addr_t</name></type> <name pos:start="2:42" pos:end="2:46">paddr</name></decl></parameter>, <parameter pos:start="2:49" pos:end="2:56"><decl pos:start="2:49" pos:end="2:56"><type pos:start="2:49" pos:end="2:56"><name pos:start="2:49" pos:end="2:51">int</name></type> <name pos:start="2:53" pos:end="2:56">prot</name></decl></parameter>, 
                      <parameter pos:start="3:23" pos:end="3:33"><decl pos:start="3:23" pos:end="3:33"><type pos:start="3:23" pos:end="3:33"><name pos:start="3:23" pos:end="3:25">int</name></type> <name pos:start="3:27" pos:end="3:33">is_user</name></decl></parameter>, <parameter pos:start="3:36" pos:end="3:49"><decl pos:start="3:36" pos:end="3:49"><type pos:start="3:36" pos:end="3:49"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:49">is_softmmu</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="86:15">{<block_content pos:start="5:5" pos:end="86:15">
    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">PhysPageDesc</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">p</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:21"><decl pos:start="6:5" pos:end="6:20"><type pos:start="6:5" pos:end="6:17"><name pos:start="6:5" pos:end="6:12">unsigned</name> <name pos:start="6:14" pos:end="6:17">long</name></type> <name pos:start="6:19" pos:end="6:20">pd</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:22">index</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:25"><decl pos:start="8:5" pos:end="8:24"><type pos:start="8:5" pos:end="8:16"><name pos:start="8:5" pos:end="8:16">target_ulong</name></type> <name pos:start="8:18" pos:end="8:24">address</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22">target_phys_addr_t</name></type> <name pos:start="9:24" pos:end="9:29">addend</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:12"><decl pos:start="10:5" pos:end="10:11"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">CPUTLBEntry</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:19">te</name></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:10"><decl pos:start="12:5" pos:end="12:9"><type pos:start="12:5" pos:end="12:7"><name pos:start="12:5" pos:end="12:7">int</name></type> <name pos:start="12:9" pos:end="12:9">i</name></decl>;</decl_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:50"><expr pos:start="13:5" pos:end="13:49"><name pos:start="13:5" pos:end="13:5">p</name> <operator pos:start="13:7" pos:end="13:7">=</operator> <call pos:start="13:9" pos:end="13:49"><name pos:start="13:9" pos:end="13:22">phys_page_find</name><argument_list pos:start="13:23" pos:end="13:49">(<argument pos:start="13:24" pos:end="13:48"><expr pos:start="13:24" pos:end="13:48"><name pos:start="13:24" pos:end="13:28">paddr</name> <operator pos:start="13:30" pos:end="13:31">&gt;&gt;</operator> <name pos:start="13:33" pos:end="13:48">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="14:5" pos:end="86:15"><if pos:start="14:5" pos:end="86:15">if <condition pos:start="14:8" pos:end="14:11">(<expr pos:start="14:9" pos:end="14:10"><operator pos:start="14:9" pos:end="14:9">!</operator><name pos:start="14:10" pos:end="14:10">p</name></expr>)</condition> <block pos:start="14:13" pos:end="86:15">{<block_content pos:start="15:9" pos:end="86:15">
        <expr_stmt pos:start="15:9" pos:end="15:31"><expr pos:start="15:9" pos:end="15:30"><name pos:start="15:9" pos:end="15:10">pd</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <name pos:start="15:14" pos:end="15:30">IO_MEM_UNASSIGNED</name></expr>;</expr_stmt>
        <expr_stmt pos:start="16:9" pos:end="18:0"><expr pos:start="16:9" pos:end="16:27"><name pos:start="16:9" pos:end="16:10">pd</name> <operator pos:start="16:12" pos:end="16:12">=</operator> <name pos:start="16:14" pos:end="16:27"><name pos:start="16:14" pos:end="16:14">p</name><operator pos:start="16:15" pos:end="16:16">-&gt;</operator><name pos:start="16:17" pos:end="16:27">phys_offset</name></name></expr>;</expr_stmt>
<cpp:if pos:start="17:1" pos:end="17:22">#<cpp:directive pos:start="17:2" pos:end="17:3">if</cpp:directive> <expr pos:start="17:5" pos:end="17:22"><call pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:11">defined</name><argument_list pos:start="17:12" pos:end="17:22">(<argument pos:start="17:13" pos:end="17:21"><expr pos:start="17:13" pos:end="17:21"><name pos:start="17:13" pos:end="17:21">DEBUG_TLB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt pos:start="18:5" pos:end="21:0"><expr pos:start="18:5" pos:end="19:60"><call pos:start="18:5" pos:end="19:60"><name pos:start="18:5" pos:end="18:10">printf</name><argument_list pos:start="18:11" pos:end="19:60">(<argument pos:start="18:12" pos:end="18:97"><expr pos:start="18:12" pos:end="18:97"><literal type="string" pos:start="18:12" pos:end="18:33">"tlb_set_page: vaddr="</literal> <name pos:start="18:35" pos:end="18:47">TARGET_FMT_lx</name> <literal type="string" pos:start="18:49" pos:end="18:97">" paddr=0x%08x prot=%x u=%d smmu=%d pd=0x%08lx\n"</literal></expr></argument>,
           <argument pos:start="19:12" pos:end="19:16"><expr pos:start="19:12" pos:end="19:16"><name pos:start="19:12" pos:end="19:16">vaddr</name></expr></argument>, <argument pos:start="19:19" pos:end="19:28"><expr pos:start="19:19" pos:end="19:28"><operator pos:start="19:19" pos:end="19:19">(</operator><name pos:start="19:20" pos:end="19:22">int</name><operator pos:start="19:23" pos:end="19:23">)</operator><name pos:start="19:24" pos:end="19:28">paddr</name></expr></argument>, <argument pos:start="19:31" pos:end="19:34"><expr pos:start="19:31" pos:end="19:34"><name pos:start="19:31" pos:end="19:34">prot</name></expr></argument>, <argument pos:start="19:37" pos:end="19:43"><expr pos:start="19:37" pos:end="19:43"><name pos:start="19:37" pos:end="19:43">is_user</name></expr></argument>, <argument pos:start="19:46" pos:end="19:55"><expr pos:start="19:46" pos:end="19:55"><name pos:start="19:46" pos:end="19:55">is_softmmu</name></expr></argument>, <argument pos:start="19:58" pos:end="19:59"><expr pos:start="19:58" pos:end="19:59"><name pos:start="19:58" pos:end="19:59">pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="20:1" pos:end="20:6">#<cpp:directive pos:start="20:2" pos:end="20:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="21:5" pos:end="23:0"><expr pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:7">ret</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <literal type="number" pos:start="21:11" pos:end="21:11">0</literal></expr>;</expr_stmt>
<cpp:if pos:start="22:1" pos:end="22:28">#<cpp:directive pos:start="22:2" pos:end="22:3">if</cpp:directive> <expr pos:start="22:5" pos:end="22:28"><operator pos:start="22:5" pos:end="22:5">!</operator><call pos:start="22:6" pos:end="22:28"><name pos:start="22:6" pos:end="22:12">defined</name><argument_list pos:start="22:13" pos:end="22:28">(<argument pos:start="22:14" pos:end="22:27"><expr pos:start="22:14" pos:end="22:27"><name pos:start="22:14" pos:end="22:27">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt pos:start="23:5" pos:end="86:15"><if pos:start="23:5" pos:end="86:15">if <condition pos:start="23:8" pos:end="25:0">(<expr pos:start="23:9" pos:end="23:18"><name pos:start="23:9" pos:end="23:18">is_softmmu</name></expr>)</condition> 
<cpp:endif pos:start="24:1" pos:end="24:6">#<cpp:directive pos:start="24:2" pos:end="24:6">endif</cpp:directive></cpp:endif>
    <block pos:start="25:5" pos:end="86:15">{<block_content pos:start="26:9" pos:end="86:15">
        <if_stmt pos:start="26:9" pos:end="86:15"><if pos:start="26:9" pos:end="86:15">if <condition pos:start="26:12" pos:end="26:73">(<expr pos:start="26:13" pos:end="26:72"><operator pos:start="26:13" pos:end="26:13">(</operator><name pos:start="26:14" pos:end="26:15">pd</name> <operator pos:start="26:17" pos:end="26:17">&amp;</operator> <operator pos:start="26:19" pos:end="26:19">~</operator><name pos:start="26:20" pos:end="26:35">TARGET_PAGE_MASK</name><operator pos:start="26:36" pos:end="26:36">)</operator> <operator pos:start="26:38" pos:end="26:38">&gt;</operator> <name pos:start="26:40" pos:end="26:49">IO_MEM_ROM</name> <operator pos:start="26:51" pos:end="26:52">&amp;&amp;</operator> <operator pos:start="26:54" pos:end="26:54">!</operator><operator pos:start="26:55" pos:end="26:55">(</operator><name pos:start="26:56" pos:end="26:57">pd</name> <operator pos:start="26:59" pos:end="26:59">&amp;</operator> <name pos:start="26:61" pos:end="26:71">IO_MEM_ROMD</name><operator pos:start="26:72" pos:end="26:72">)</operator></expr>)</condition> <block pos:start="26:75" pos:end="86:15">{<block_content pos:start="28:13" pos:end="86:15">
            <comment type="block" pos:start="27:13" pos:end="27:32">/* IO memory case */</comment>
            <expr_stmt pos:start="28:13" pos:end="28:33"><expr pos:start="28:13" pos:end="28:32"><name pos:start="28:13" pos:end="28:19">address</name> <operator pos:start="28:21" pos:end="28:21">=</operator> <name pos:start="28:23" pos:end="28:27">vaddr</name> <operator pos:start="28:29" pos:end="28:29">|</operator> <name pos:start="28:31" pos:end="28:32">pd</name></expr>;</expr_stmt>
            <expr_stmt pos:start="29:13" pos:end="29:27"><expr pos:start="29:13" pos:end="29:26"><name pos:start="29:13" pos:end="29:18">addend</name> <operator pos:start="29:20" pos:end="29:20">=</operator> <name pos:start="29:22" pos:end="29:26">paddr</name></expr>;</expr_stmt>
            <comment type="block" pos:start="30:13" pos:end="30:33">/* standard memory */</comment>
            <expr_stmt pos:start="31:13" pos:end="31:28"><expr pos:start="31:13" pos:end="31:27"><name pos:start="31:13" pos:end="31:19">address</name> <operator pos:start="31:21" pos:end="31:21">=</operator> <name pos:start="31:23" pos:end="31:27">vaddr</name></expr>;</expr_stmt>
            <expr_stmt pos:start="32:13" pos:end="32:76"><expr pos:start="32:13" pos:end="32:75"><name pos:start="32:13" pos:end="32:18">addend</name> <operator pos:start="32:20" pos:end="32:20">=</operator> <operator pos:start="32:22" pos:end="32:22">(</operator><name pos:start="32:23" pos:end="32:30">unsigned</name> <name pos:start="32:32" pos:end="32:35">long</name><operator pos:start="32:36" pos:end="32:36">)</operator><name pos:start="32:37" pos:end="32:49">phys_ram_base</name> <operator pos:start="32:51" pos:end="32:51">+</operator> <operator pos:start="32:53" pos:end="32:53">(</operator><name pos:start="32:54" pos:end="32:55">pd</name> <operator pos:start="32:57" pos:end="32:57">&amp;</operator> <name pos:start="32:59" pos:end="32:74">TARGET_PAGE_MASK</name><operator pos:start="32:75" pos:end="32:75">)</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="33:9" pos:end="33:65"><expr pos:start="33:9" pos:end="33:64"><name pos:start="33:9" pos:end="33:13">index</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <operator pos:start="33:17" pos:end="33:17">(</operator><name pos:start="33:18" pos:end="33:22">vaddr</name> <operator pos:start="33:24" pos:end="33:25">&gt;&gt;</operator> <name pos:start="33:27" pos:end="33:42">TARGET_PAGE_BITS</name><operator pos:start="33:43" pos:end="33:43">)</operator> <operator pos:start="33:45" pos:end="33:45">&amp;</operator> <operator pos:start="33:47" pos:end="33:47">(</operator><name pos:start="33:48" pos:end="33:59">CPU_TLB_SIZE</name> <operator pos:start="33:61" pos:end="33:61">-</operator> <literal type="number" pos:start="33:63" pos:end="33:63">1</literal><operator pos:start="33:64" pos:end="33:64">)</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="34:9" pos:end="34:24"><expr pos:start="34:9" pos:end="34:23"><name pos:start="34:9" pos:end="34:14">addend</name> <operator pos:start="34:16" pos:end="34:17">-=</operator> <name pos:start="34:19" pos:end="34:23">vaddr</name></expr>;</expr_stmt>
        <expr_stmt pos:start="35:9" pos:end="35:45"><expr pos:start="35:9" pos:end="35:44"><name pos:start="35:9" pos:end="35:10">te</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <operator pos:start="35:14" pos:end="35:14">&amp;</operator><name pos:start="35:15" pos:end="35:44"><name pos:start="35:15" pos:end="35:17">env</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:28">tlb_table</name><index pos:start="35:29" pos:end="35:37">[<expr pos:start="35:30" pos:end="35:36"><name pos:start="35:30" pos:end="35:36">is_user</name></expr>]</index><index pos:start="35:38" pos:end="35:44">[<expr pos:start="35:39" pos:end="35:43"><name pos:start="35:39" pos:end="35:43">index</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="36:9" pos:end="36:28"><expr pos:start="36:9" pos:end="36:27"><name pos:start="36:9" pos:end="36:18"><name pos:start="36:9" pos:end="36:10">te</name><operator pos:start="36:11" pos:end="36:12">-&gt;</operator><name pos:start="36:13" pos:end="36:18">addend</name></name> <operator pos:start="36:20" pos:end="36:20">=</operator> <name pos:start="36:22" pos:end="36:27">addend</name></expr>;</expr_stmt>
        <if_stmt pos:start="37:9" pos:end="86:15"><if pos:start="37:9" pos:end="86:15">if <condition pos:start="37:12" pos:end="37:29">(<expr pos:start="37:13" pos:end="37:28"><name pos:start="37:13" pos:end="37:16">prot</name> <operator pos:start="37:18" pos:end="37:18">&amp;</operator> <name pos:start="37:20" pos:end="37:28">PAGE_READ</name></expr>)</condition> <block pos:start="37:31" pos:end="86:15">{<block_content pos:start="38:13" pos:end="86:15">
            <expr_stmt pos:start="38:13" pos:end="38:36"><expr pos:start="38:13" pos:end="38:35"><name pos:start="38:13" pos:end="38:25"><name pos:start="38:13" pos:end="38:14">te</name><operator pos:start="38:15" pos:end="38:16">-&gt;</operator><name pos:start="38:17" pos:end="38:25">addr_read</name></name> <operator pos:start="38:27" pos:end="38:27">=</operator> <name pos:start="38:29" pos:end="38:35">address</name></expr>;</expr_stmt>
            <expr_stmt pos:start="39:13" pos:end="39:31"><expr pos:start="39:13" pos:end="39:30"><name pos:start="39:13" pos:end="39:25"><name pos:start="39:13" pos:end="39:14">te</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:25">addr_read</name></name> <operator pos:start="39:27" pos:end="39:27">=</operator> <operator pos:start="39:29" pos:end="39:29">-</operator><literal type="number" pos:start="39:30" pos:end="39:30">1</literal></expr>;</expr_stmt>
        <if_stmt pos:start="40:9" pos:end="86:15"><if pos:start="40:9" pos:end="86:15">if <condition pos:start="40:12" pos:end="40:29">(<expr pos:start="40:13" pos:end="40:28"><name pos:start="40:13" pos:end="40:16">prot</name> <operator pos:start="40:18" pos:end="40:18">&amp;</operator> <name pos:start="40:20" pos:end="40:28">PAGE_EXEC</name></expr>)</condition> <block pos:start="40:31" pos:end="86:15">{<block_content pos:start="41:13" pos:end="86:15">
            <expr_stmt pos:start="41:13" pos:end="41:36"><expr pos:start="41:13" pos:end="41:35"><name pos:start="41:13" pos:end="41:25"><name pos:start="41:13" pos:end="41:14">te</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:25">addr_code</name></name> <operator pos:start="41:27" pos:end="41:27">=</operator> <name pos:start="41:29" pos:end="41:35">address</name></expr>;</expr_stmt>
            <expr_stmt pos:start="42:13" pos:end="42:31"><expr pos:start="42:13" pos:end="42:30"><name pos:start="42:13" pos:end="42:25"><name pos:start="42:13" pos:end="42:14">te</name><operator pos:start="42:15" pos:end="42:16">-&gt;</operator><name pos:start="42:17" pos:end="42:25">addr_code</name></name> <operator pos:start="42:27" pos:end="42:27">=</operator> <operator pos:start="42:29" pos:end="42:29">-</operator><literal type="number" pos:start="42:30" pos:end="42:30">1</literal></expr>;</expr_stmt>
        <if_stmt pos:start="43:9" pos:end="86:15"><if pos:start="43:9" pos:end="86:15">if <condition pos:start="43:12" pos:end="43:30">(<expr pos:start="43:13" pos:end="43:29"><name pos:start="43:13" pos:end="43:16">prot</name> <operator pos:start="43:18" pos:end="43:18">&amp;</operator> <name pos:start="43:20" pos:end="43:29">PAGE_WRITE</name></expr>)</condition> <block pos:start="43:32" pos:end="86:15">{<block_content pos:start="44:13" pos:end="86:15">
            <if_stmt pos:start="44:13" pos:end="86:15"><if pos:start="44:13" pos:end="49:13">if <condition pos:start="44:16" pos:end="45:35">(<expr pos:start="44:17" pos:end="45:34"><operator pos:start="44:17" pos:end="44:17">(</operator><name pos:start="44:18" pos:end="44:19">pd</name> <operator pos:start="44:21" pos:end="44:21">&amp;</operator> <operator pos:start="44:23" pos:end="44:23">~</operator><name pos:start="44:24" pos:end="44:39">TARGET_PAGE_MASK</name><operator pos:start="44:40" pos:end="44:40">)</operator> <operator pos:start="44:42" pos:end="44:43">==</operator> <name pos:start="44:45" pos:end="44:54">IO_MEM_ROM</name> <operator pos:start="44:56" pos:end="44:57">||</operator> 
                <operator pos:start="45:17" pos:end="45:17">(</operator><name pos:start="45:18" pos:end="45:19">pd</name> <operator pos:start="45:21" pos:end="45:21">&amp;</operator> <name pos:start="45:23" pos:end="45:33">IO_MEM_ROMD</name><operator pos:start="45:34" pos:end="45:34">)</operator></expr>)</condition> <block pos:start="45:37" pos:end="49:13">{<block_content pos:start="47:17" pos:end="48:61">
                <comment type="block" pos:start="46:17" pos:end="46:57">/* write access calls the I/O callback */</comment>
                <expr_stmt pos:start="47:17" pos:end="48:61"><expr pos:start="47:17" pos:end="48:60"><name pos:start="47:17" pos:end="47:30"><name pos:start="47:17" pos:end="47:18">te</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:30">addr_write</name></name> <operator pos:start="47:32" pos:end="47:32">=</operator> <name pos:start="47:34" pos:end="47:38">vaddr</name> <operator pos:start="47:40" pos:end="47:40">|</operator> 
                    <operator pos:start="48:21" pos:end="48:21">(</operator><name pos:start="48:22" pos:end="48:23">pd</name> <operator pos:start="48:25" pos:end="48:25">&amp;</operator> <operator pos:start="48:27" pos:end="48:27">~</operator><operator pos:start="48:28" pos:end="48:28">(</operator><name pos:start="48:29" pos:end="48:44">TARGET_PAGE_MASK</name> <operator pos:start="48:46" pos:end="48:46">|</operator> <name pos:start="48:48" pos:end="48:58">IO_MEM_ROMD</name><operator pos:start="48:59" pos:end="48:59">)</operator><operator pos:start="48:60" pos:end="48:60">)</operator></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif" pos:start="49:15" pos:end="86:15">else if <condition pos:start="49:23" pos:end="50:57">(<expr pos:start="49:24" pos:end="50:56"><operator pos:start="49:24" pos:end="49:24">(</operator><name pos:start="49:25" pos:end="49:26">pd</name> <operator pos:start="49:28" pos:end="49:28">&amp;</operator> <operator pos:start="49:30" pos:end="49:30">~</operator><name pos:start="49:31" pos:end="49:46">TARGET_PAGE_MASK</name><operator pos:start="49:47" pos:end="49:47">)</operator> <operator pos:start="49:49" pos:end="49:50">==</operator> <name pos:start="49:52" pos:end="49:61">IO_MEM_RAM</name> <operator pos:start="49:63" pos:end="49:64">&amp;&amp;</operator> 
                       <operator pos:start="50:24" pos:end="50:24">!</operator><call pos:start="50:25" pos:end="50:56"><name pos:start="50:25" pos:end="50:52">cpu_physical_memory_is_dirty</name><argument_list pos:start="50:53" pos:end="50:56">(<argument pos:start="50:54" pos:end="50:55"><expr pos:start="50:54" pos:end="50:55"><name pos:start="50:54" pos:end="50:55">pd</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="50:59" pos:end="86:15">{<block_content pos:start="51:17" pos:end="86:15">
                <expr_stmt pos:start="51:17" pos:end="51:57"><expr pos:start="51:17" pos:end="51:56"><name pos:start="51:17" pos:end="51:30"><name pos:start="51:17" pos:end="51:18">te</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:30">addr_write</name></name> <operator pos:start="51:32" pos:end="51:32">=</operator> <name pos:start="51:34" pos:end="51:38">vaddr</name> <operator pos:start="51:40" pos:end="51:40">|</operator> <name pos:start="51:42" pos:end="51:56">IO_MEM_NOTDIRTY</name></expr>;</expr_stmt>
                <expr_stmt pos:start="52:17" pos:end="52:41"><expr pos:start="52:17" pos:end="52:40"><name pos:start="52:17" pos:end="52:30"><name pos:start="52:17" pos:end="52:18">te</name><operator pos:start="52:19" pos:end="52:20">-&gt;</operator><name pos:start="52:21" pos:end="52:30">addr_write</name></name> <operator pos:start="52:32" pos:end="52:32">=</operator> <name pos:start="52:34" pos:end="52:40">address</name></expr>;</expr_stmt>
            <expr_stmt pos:start="53:13" pos:end="55:0"><expr pos:start="53:13" pos:end="53:31"><name pos:start="53:13" pos:end="53:26"><name pos:start="53:13" pos:end="53:14">te</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:26">addr_write</name></name> <operator pos:start="53:28" pos:end="53:28">=</operator> <operator pos:start="53:30" pos:end="53:30">-</operator><literal type="number" pos:start="53:31" pos:end="53:31">1</literal></expr>;</expr_stmt>
<cpp:if pos:start="54:1" pos:end="54:28">#<cpp:directive pos:start="54:2" pos:end="54:3">if</cpp:directive> <expr pos:start="54:5" pos:end="54:28"><operator pos:start="54:5" pos:end="54:5">!</operator><call pos:start="54:6" pos:end="54:28"><name pos:start="54:6" pos:end="54:12">defined</name><argument_list pos:start="54:13" pos:end="54:28">(<argument pos:start="54:14" pos:end="54:27"><expr pos:start="54:14" pos:end="54:27"><name pos:start="54:14" pos:end="54:27">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt pos:start="55:5" pos:end="86:15"><else pos:start="55:5" pos:end="86:15">else <block pos:start="55:10" pos:end="86:15">{<block_content pos:start="56:9" pos:end="86:15">
        <if_stmt pos:start="56:9" pos:end="86:15"><if pos:start="56:9" pos:end="86:15">if <condition pos:start="56:12" pos:end="56:50">(<expr pos:start="56:13" pos:end="56:49"><operator pos:start="56:13" pos:end="56:13">(</operator><name pos:start="56:14" pos:end="56:15">pd</name> <operator pos:start="56:17" pos:end="56:17">&amp;</operator> <operator pos:start="56:19" pos:end="56:19">~</operator><name pos:start="56:20" pos:end="56:35">TARGET_PAGE_MASK</name><operator pos:start="56:36" pos:end="56:36">)</operator> <operator pos:start="56:38" pos:end="56:38">&gt;</operator> <name pos:start="56:40" pos:end="56:49">IO_MEM_ROM</name></expr>)</condition> <block pos:start="56:52" pos:end="86:15">{<block_content pos:start="59:13" pos:end="86:15">
            <comment type="block" pos:start="57:13" pos:end="58:26">/* IO access: no mapping is done as it will be handled by the
               soft MMU */</comment>
            <if_stmt pos:start="59:13" pos:end="60:24"><if pos:start="59:13" pos:end="60:24">if <condition pos:start="59:16" pos:end="59:49">(<expr pos:start="59:17" pos:end="59:48"><operator pos:start="59:17" pos:end="59:17">!</operator><operator pos:start="59:18" pos:end="59:18">(</operator><name pos:start="59:19" pos:end="59:29"><name pos:start="59:19" pos:end="59:21">env</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:29">hflags</name></name> <operator pos:start="59:31" pos:end="59:31">&amp;</operator> <name pos:start="59:33" pos:end="59:47">HF_SOFTMMU_MASK</name><operator pos:start="59:48" pos:end="59:48">)</operator></expr>)</condition><block type="pseudo" pos:start="60:17" pos:end="60:24"><block_content pos:start="60:17" pos:end="60:24">
                <expr_stmt pos:start="60:17" pos:end="60:24"><expr pos:start="60:17" pos:end="60:23"><name pos:start="60:17" pos:end="60:19">ret</name> <operator pos:start="60:21" pos:end="60:21">=</operator> <literal type="number" pos:start="60:23" pos:end="60:23">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <decl_stmt pos:start="61:13" pos:end="61:27"><decl pos:start="61:13" pos:end="61:26"><type pos:start="61:13" pos:end="61:18"><name pos:start="61:13" pos:end="61:16">void</name> <modifier pos:start="61:18" pos:end="61:18">*</modifier></type><name pos:start="61:19" pos:end="61:26">map_addr</name></decl>;</decl_stmt>
            <if_stmt pos:start="62:13" pos:end="86:15"><if pos:start="62:13" pos:end="86:15">if <condition pos:start="62:16" pos:end="62:39">(<expr pos:start="62:17" pos:end="62:38"><name pos:start="62:17" pos:end="62:21">vaddr</name> <operator pos:start="62:23" pos:end="62:24">&gt;=</operator> <name pos:start="62:26" pos:end="62:38">MMAP_AREA_END</name></expr>)</condition> <block pos:start="62:41" pos:end="86:15">{<block_content pos:start="63:17" pos:end="86:15">
                <expr_stmt pos:start="63:17" pos:end="63:24"><expr pos:start="63:17" pos:end="63:23"><name pos:start="63:17" pos:end="63:19">ret</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <literal type="number" pos:start="63:23" pos:end="63:23">2</literal></expr>;</expr_stmt>
                <if_stmt pos:start="64:17" pos:end="86:15"><if pos:start="64:17" pos:end="86:15">if <condition pos:start="64:20" pos:end="64:38">(<expr pos:start="64:21" pos:end="64:37"><name pos:start="64:21" pos:end="64:24">prot</name> <operator pos:start="64:26" pos:end="64:26">&amp;</operator> <name pos:start="64:28" pos:end="64:37">PROT_WRITE</name></expr>)</condition> <block pos:start="64:40" pos:end="86:15">{<block_content pos:start="65:21" pos:end="86:15">
                    <if_stmt pos:start="65:21" pos:end="86:15"><if pos:start="65:21" pos:end="86:15">if <condition pos:start="65:24" pos:end="70:60">(<expr pos:start="65:25" pos:end="70:59"><operator pos:start="65:25" pos:end="65:25">(</operator><name pos:start="65:26" pos:end="65:27">pd</name> <operator pos:start="65:29" pos:end="65:29">&amp;</operator> <operator pos:start="65:31" pos:end="65:31">~</operator><name pos:start="65:32" pos:end="65:47">TARGET_PAGE_MASK</name><operator pos:start="65:48" pos:end="65:48">)</operator> <operator pos:start="65:50" pos:end="65:51">==</operator> <name pos:start="65:53" pos:end="65:62">IO_MEM_ROM</name> <operator pos:start="65:64" pos:end="67:0">||</operator> 
<cpp:if pos:start="66:1" pos:end="66:32">#<cpp:directive pos:start="66:2" pos:end="66:3">if</cpp:directive> <expr pos:start="66:5" pos:end="66:32"><call pos:start="66:5" pos:end="66:27"><name pos:start="66:5" pos:end="66:11">defined</name><argument_list pos:start="66:12" pos:end="66:27">(<argument pos:start="66:13" pos:end="66:26"><expr pos:start="66:13" pos:end="66:26"><name pos:start="66:13" pos:end="66:26">TARGET_HAS_SMC</name></expr></argument>)</argument_list></call> <operator pos:start="66:29" pos:end="66:30">||</operator> <literal type="number" pos:start="66:32" pos:end="66:32">1</literal></expr></cpp:if>
                        <name pos:start="67:25" pos:end="67:32">first_tb</name> <operator pos:start="67:34" pos:end="69:0">||</operator>
<cpp:endif pos:start="68:1" pos:end="68:6">#<cpp:directive pos:start="68:2" pos:end="68:6">endif</cpp:directive></cpp:endif>
                        <operator pos:start="69:25" pos:end="69:25">(</operator><operator pos:start="69:26" pos:end="69:26">(</operator><name pos:start="69:27" pos:end="69:28">pd</name> <operator pos:start="69:30" pos:end="69:30">&amp;</operator> <operator pos:start="69:32" pos:end="69:32">~</operator><name pos:start="69:33" pos:end="69:48">TARGET_PAGE_MASK</name><operator pos:start="69:49" pos:end="69:49">)</operator> <operator pos:start="69:51" pos:end="69:52">==</operator> <name pos:start="69:54" pos:end="69:63">IO_MEM_RAM</name> <operator pos:start="69:65" pos:end="69:66">&amp;&amp;</operator> 
                         <operator pos:start="70:26" pos:end="70:26">!</operator><call pos:start="70:27" pos:end="70:58"><name pos:start="70:27" pos:end="70:54">cpu_physical_memory_is_dirty</name><argument_list pos:start="70:55" pos:end="70:58">(<argument pos:start="70:56" pos:end="70:57"><expr pos:start="70:56" pos:end="70:57"><name pos:start="70:56" pos:end="70:57">pd</name></expr></argument>)</argument_list></call><operator pos:start="70:59" pos:end="70:59">)</operator></expr>)</condition> <block pos:start="70:62" pos:end="86:15">{<block_content pos:start="74:25" pos:end="86:15">
                        <comment type="block" pos:start="71:25" pos:end="71:62">/* ROM: we do as if code was inside */</comment>
                        <comment type="block" pos:start="72:25" pos:end="73:46">/* if code is present, we only map as read only and save the
                           original mapping */</comment>
                        <decl_stmt pos:start="74:25" pos:end="74:41"><decl pos:start="74:25" pos:end="74:40"><type pos:start="74:25" pos:end="74:38"><name pos:start="74:25" pos:end="74:36">VirtPageDesc</name> <modifier pos:start="74:38" pos:end="74:38">*</modifier></type><name pos:start="74:39" pos:end="74:40">vp</name></decl>;</decl_stmt>
                        <expr_stmt pos:start="75:25" pos:end="75:80"><expr pos:start="75:25" pos:end="75:79"><name pos:start="75:25" pos:end="75:26">vp</name> <operator pos:start="75:28" pos:end="75:28">=</operator> <call pos:start="75:30" pos:end="75:79"><name pos:start="75:30" pos:end="75:49">virt_page_find_alloc</name><argument_list pos:start="75:50" pos:end="75:79">(<argument pos:start="75:51" pos:end="75:75"><expr pos:start="75:51" pos:end="75:75"><name pos:start="75:51" pos:end="75:55">vaddr</name> <operator pos:start="75:57" pos:end="75:58">&gt;&gt;</operator> <name pos:start="75:60" pos:end="75:75">TARGET_PAGE_BITS</name></expr></argument>, <argument pos:start="75:78" pos:end="75:78"><expr pos:start="75:78" pos:end="75:78"><literal type="number" pos:start="75:78" pos:end="75:78">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="76:25" pos:end="76:43"><expr pos:start="76:25" pos:end="76:42"><name pos:start="76:25" pos:end="76:37"><name pos:start="76:25" pos:end="76:26">vp</name><operator pos:start="76:27" pos:end="76:28">-&gt;</operator><name pos:start="76:29" pos:end="76:37">phys_addr</name></name> <operator pos:start="76:39" pos:end="76:39">=</operator> <name pos:start="76:41" pos:end="76:42">pd</name></expr>;</expr_stmt>
                        <expr_stmt pos:start="77:25" pos:end="77:40"><expr pos:start="77:25" pos:end="77:39"><name pos:start="77:25" pos:end="77:32"><name pos:start="77:25" pos:end="77:26">vp</name><operator pos:start="77:27" pos:end="77:28">-&gt;</operator><name pos:start="77:29" pos:end="77:32">prot</name></name> <operator pos:start="77:34" pos:end="77:34">=</operator> <name pos:start="77:36" pos:end="77:39">prot</name></expr>;</expr_stmt>
                        <expr_stmt pos:start="78:25" pos:end="78:55"><expr pos:start="78:25" pos:end="78:54"><name pos:start="78:25" pos:end="78:37"><name pos:start="78:25" pos:end="78:26">vp</name><operator pos:start="78:27" pos:end="78:28">-&gt;</operator><name pos:start="78:29" pos:end="78:37">valid_tag</name></name> <operator pos:start="78:39" pos:end="78:39">=</operator> <name pos:start="78:41" pos:end="78:54">virt_valid_tag</name></expr>;</expr_stmt>
                        <expr_stmt pos:start="79:25" pos:end="79:44"><expr pos:start="79:25" pos:end="79:43"><name pos:start="79:25" pos:end="79:28">prot</name> <operator pos:start="79:30" pos:end="79:31">&amp;=</operator> <operator pos:start="79:33" pos:end="79:33">~</operator><name pos:start="79:34" pos:end="79:43">PAGE_WRITE</name></expr>;</expr_stmt>
                <expr_stmt pos:start="80:17" pos:end="81:94"><expr pos:start="80:17" pos:end="81:93"><name pos:start="80:17" pos:end="80:24">map_addr</name> <operator pos:start="80:26" pos:end="80:26">=</operator> <call pos:start="80:28" pos:end="81:93"><name pos:start="80:28" pos:end="80:31">mmap</name><argument_list pos:start="80:32" pos:end="81:93">(<argument pos:start="80:33" pos:end="80:45"><expr pos:start="80:33" pos:end="80:45"><operator pos:start="80:33" pos:end="80:33">(</operator><name pos:start="80:34" pos:end="80:37">void</name> <operator pos:start="80:39" pos:end="80:39">*</operator><operator pos:start="80:40" pos:end="80:40">)</operator><name pos:start="80:41" pos:end="80:45">vaddr</name></expr></argument>, <argument pos:start="80:48" pos:end="80:63"><expr pos:start="80:48" pos:end="80:63"><name pos:start="80:48" pos:end="80:63">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="80:66" pos:end="80:69"><expr pos:start="80:66" pos:end="80:69"><name pos:start="80:66" pos:end="80:69">prot</name></expr></argument>, 
                                <argument pos:start="81:33" pos:end="81:54"><expr pos:start="81:33" pos:end="81:54"><name pos:start="81:33" pos:end="81:42">MAP_SHARED</name> <operator pos:start="81:44" pos:end="81:44">|</operator> <name pos:start="81:46" pos:end="81:54">MAP_FIXED</name></expr></argument>, <argument pos:start="81:57" pos:end="81:67"><expr pos:start="81:57" pos:end="81:67"><name pos:start="81:57" pos:end="81:67">phys_ram_fd</name></expr></argument>, <argument pos:start="81:70" pos:end="81:92"><expr pos:start="81:70" pos:end="81:92"><operator pos:start="81:70" pos:end="81:70">(</operator><name pos:start="81:71" pos:end="81:72">pd</name> <operator pos:start="81:74" pos:end="81:74">&amp;</operator> <name pos:start="81:76" pos:end="81:91">TARGET_PAGE_MASK</name><operator pos:start="81:92" pos:end="81:92">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="82:17" pos:end="86:15"><if pos:start="82:17" pos:end="86:15">if <condition pos:start="82:20" pos:end="82:43">(<expr pos:start="82:21" pos:end="82:42"><name pos:start="82:21" pos:end="82:28">map_addr</name> <operator pos:start="82:30" pos:end="82:31">==</operator> <name pos:start="82:33" pos:end="82:42">MAP_FAILED</name></expr>)</condition> <block pos:start="82:45" pos:end="86:15">{<block_content pos:start="83:21" pos:end="86:15">
                    <expr_stmt pos:start="83:21" pos:end="86:0"><expr pos:start="83:21" pos:end="84:43"><call pos:start="83:21" pos:end="84:43"><name pos:start="83:21" pos:end="83:29">cpu_abort</name><argument_list pos:start="83:30" pos:end="84:43">(<argument pos:start="83:31" pos:end="83:33"><expr pos:start="83:31" pos:end="83:33"><name pos:start="83:31" pos:end="83:33">env</name></expr></argument>, <argument pos:start="83:36" pos:end="83:112"><expr pos:start="83:36" pos:end="83:112"><literal type="string" pos:start="83:36" pos:end="83:112">"mmap failed when mapped physical address 0x%08x to virtual address 0x%08x\n"</literal></expr></argument>,
                              <argument pos:start="84:31" pos:end="84:35"><expr pos:start="84:31" pos:end="84:35"><name pos:start="84:31" pos:end="84:35">paddr</name></expr></argument>, <argument pos:start="84:38" pos:end="84:42"><expr pos:start="84:38" pos:end="84:42"><name pos:start="84:38" pos:end="84:42">vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="85:1" pos:end="85:6">#<cpp:directive pos:start="85:2" pos:end="85:6">endif</cpp:directive></cpp:endif>
    <return pos:start="86:5" pos:end="86:15">return <expr pos:start="86:12" pos:end="86:14"><name pos:start="86:12" pos:end="86:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
