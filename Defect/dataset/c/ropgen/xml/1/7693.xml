<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7693.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">rtmp_handshake</name><parameter_list pos:start="1:26" pos:end="1:57">(<parameter pos:start="1:27" pos:end="1:39"><decl pos:start="1:27" pos:end="1:39"><type pos:start="1:27" pos:end="1:39"><name pos:start="1:27" pos:end="1:36">URLContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">s</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:56"><decl pos:start="1:42" pos:end="1:56"><type pos:start="1:42" pos:end="1:56"><name pos:start="1:42" pos:end="1:52">RTMPContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:56">rt</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="115:13">{<block_content pos:start="3:5" pos:end="115:13">
    <decl_stmt pos:start="3:5" pos:end="3:14"><decl pos:start="3:5" pos:end="3:13"><type pos:start="3:5" pos:end="3:9"><name pos:start="3:5" pos:end="3:9">AVLFG</name></type> <name pos:start="3:11" pos:end="3:13">rnd</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="11:6"><decl pos:start="4:5" pos:end="11:5"><type pos:start="4:5" pos:end="4:11"><name pos:start="4:5" pos:end="4:11">uint8_t</name></type> <name pos:start="4:13" pos:end="4:52"><name pos:start="4:13" pos:end="4:18">tosend</name>    <index pos:start="4:23" pos:end="4:52">[<expr pos:start="4:24" pos:end="4:51"><name pos:start="4:24" pos:end="4:49">RTMP_HANDSHAKE_PACKET_SIZE</name><operator pos:start="4:50" pos:end="4:50">+</operator><literal type="number" pos:start="4:51" pos:end="4:51">1</literal></expr>]</index></name> <init pos:start="4:54" pos:end="11:5">= <expr pos:start="4:56" pos:end="11:5"><block pos:start="4:56" pos:end="11:5">{
        <expr pos:start="5:9" pos:end="5:9"><literal type="number" pos:start="5:9" pos:end="5:9">3</literal></expr>,                <comment type="line" pos:start="5:27" pos:end="5:45">// unencrypted data</comment>
        <expr pos:start="6:9" pos:end="6:9"><literal type="number" pos:start="6:9" pos:end="6:9">0</literal></expr>, <expr pos:start="6:12" pos:end="6:12"><literal type="number" pos:start="6:12" pos:end="6:12">0</literal></expr>, <expr pos:start="6:15" pos:end="6:15"><literal type="number" pos:start="6:15" pos:end="6:15">0</literal></expr>, <expr pos:start="6:18" pos:end="6:18"><literal type="number" pos:start="6:18" pos:end="6:18">0</literal></expr>,       <comment type="line" pos:start="6:27" pos:end="6:42">// client uptime</comment>
        <expr pos:start="7:9" pos:end="7:24"><name pos:start="7:9" pos:end="7:24">RTMP_CLIENT_VER1</name></expr>,
        <expr pos:start="8:9" pos:end="8:24"><name pos:start="8:9" pos:end="8:24">RTMP_CLIENT_VER2</name></expr>,
        <expr pos:start="9:9" pos:end="9:24"><name pos:start="9:9" pos:end="9:24">RTMP_CLIENT_VER3</name></expr>,
        <expr pos:start="10:9" pos:end="10:24"><name pos:start="10:9" pos:end="10:24">RTMP_CLIENT_VER4</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:51"><decl pos:start="12:5" pos:end="12:50"><type pos:start="12:5" pos:end="12:11"><name pos:start="12:5" pos:end="12:11">uint8_t</name></type> <name pos:start="12:13" pos:end="12:50"><name pos:start="12:13" pos:end="12:22">clientdata</name><index pos:start="12:23" pos:end="12:50">[<expr pos:start="12:24" pos:end="12:49"><name pos:start="12:24" pos:end="12:49">RTMP_HANDSHAKE_PACKET_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:53"><decl pos:start="13:5" pos:end="13:52"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:52"><name pos:start="13:13" pos:end="13:22">serverdata</name><index pos:start="13:23" pos:end="13:52">[<expr pos:start="13:24" pos:end="13:51"><name pos:start="13:24" pos:end="13:49">RTMP_HANDSHAKE_PACKET_SIZE</name><operator pos:start="13:50" pos:end="13:50">+</operator><literal type="number" pos:start="13:51" pos:end="13:51">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="14:5" pos:end="14:10"><decl pos:start="14:5" pos:end="14:9"><type pos:start="14:5" pos:end="14:7"><name pos:start="14:5" pos:end="14:7">int</name></type> <name pos:start="14:9" pos:end="14:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">server_pos</name></decl>, <decl pos:start="15:21" pos:end="15:30"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:21" pos:end="15:30">client_pos</name></decl>;</decl_stmt>
    <decl_stmt pos:start="16:5" pos:end="16:38"><decl pos:start="16:5" pos:end="16:22"><type pos:start="16:5" pos:end="16:11"><name pos:start="16:5" pos:end="16:11">uint8_t</name></type> <name pos:start="16:13" pos:end="16:22"><name pos:start="16:13" pos:end="16:18">digest</name><index pos:start="16:19" pos:end="16:22">[<expr pos:start="16:20" pos:end="16:21"><literal type="number" pos:start="16:20" pos:end="16:21">32</literal></expr>]</index></name></decl>, <decl pos:start="16:25" pos:end="16:37"><type ref="prev" pos:start="16:5" pos:end="16:11"/><name pos:start="16:25" pos:end="16:37"><name pos:start="16:25" pos:end="16:33">signature</name><index pos:start="16:34" pos:end="16:37">[<expr pos:start="16:35" pos:end="16:36"><literal type="number" pos:start="16:35" pos:end="16:36">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>, <decl pos:start="17:14" pos:end="17:21"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:14" pos:end="17:17">type</name> <init pos:start="17:19" pos:end="17:21">= <expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:48"><expr pos:start="18:5" pos:end="18:47"><call pos:start="18:5" pos:end="18:47"><name pos:start="18:5" pos:end="18:10">av_log</name><argument_list pos:start="18:11" pos:end="18:47">(<argument pos:start="18:12" pos:end="18:12"><expr pos:start="18:12" pos:end="18:12"><name pos:start="18:12" pos:end="18:12">s</name></expr></argument>, <argument pos:start="18:15" pos:end="18:26"><expr pos:start="18:15" pos:end="18:26"><name pos:start="18:15" pos:end="18:26">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="18:29" pos:end="18:46"><expr pos:start="18:29" pos:end="18:46"><literal type="string" pos:start="18:29" pos:end="18:46">"Handshaking...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:34"><expr pos:start="19:5" pos:end="19:33"><call pos:start="19:5" pos:end="19:33"><name pos:start="19:5" pos:end="19:15">av_lfg_init</name><argument_list pos:start="19:16" pos:end="19:33">(<argument pos:start="19:17" pos:end="19:20"><expr pos:start="19:17" pos:end="19:20"><operator pos:start="19:17" pos:end="19:17">&amp;</operator><name pos:start="19:18" pos:end="19:20">rnd</name></expr></argument>, <argument pos:start="19:23" pos:end="19:32"><expr pos:start="19:23" pos:end="19:32"><literal type="number" pos:start="19:23" pos:end="19:32">0xDEADC0DE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:start="20:5" pos:end="20:66">// generate handshake packet - 1536 bytes of pseudorandom data</comment>
    <for pos:start="21:5" pos:end="22:43">for <control pos:start="21:9" pos:end="21:53">(<init pos:start="21:10" pos:end="21:15"><expr pos:start="21:10" pos:end="21:14"><name pos:start="21:10" pos:end="21:10">i</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">9</literal></expr>;</init> <condition pos:start="21:17" pos:end="21:48"><expr pos:start="21:17" pos:end="21:47"><name pos:start="21:17" pos:end="21:17">i</name> <operator pos:start="21:19" pos:end="21:20">&lt;=</operator> <name pos:start="21:22" pos:end="21:47">RTMP_HANDSHAKE_PACKET_SIZE</name></expr>;</condition> <incr pos:start="21:50" pos:end="21:52"><expr pos:start="21:50" pos:end="21:52"><name pos:start="21:50" pos:end="21:50">i</name><operator pos:start="21:51" pos:end="21:52">++</operator></expr></incr>)</control><block type="pseudo" pos:start="22:9" pos:end="22:43"><block_content pos:start="22:9" pos:end="22:43">
        <expr_stmt pos:start="22:9" pos:end="22:43"><expr pos:start="22:9" pos:end="22:42"><name pos:start="22:9" pos:end="22:17"><name pos:start="22:9" pos:end="22:14">tosend</name><index pos:start="22:15" pos:end="22:17">[<expr pos:start="22:16" pos:end="22:16"><name pos:start="22:16" pos:end="22:16">i</name></expr>]</index></name> <operator pos:start="22:19" pos:end="22:19">=</operator> <call pos:start="22:21" pos:end="22:36"><name pos:start="22:21" pos:end="22:30">av_lfg_get</name><argument_list pos:start="22:31" pos:end="22:36">(<argument pos:start="22:32" pos:end="22:35"><expr pos:start="22:32" pos:end="22:35"><operator pos:start="22:32" pos:end="22:32">&amp;</operator><name pos:start="22:33" pos:end="22:35">rnd</name></expr></argument>)</argument_list></call> <operator pos:start="22:38" pos:end="22:39">&gt;&gt;</operator> <literal type="number" pos:start="22:41" pos:end="22:42">24</literal></expr>;</expr_stmt></block_content></block></for>
    <if_stmt pos:start="23:5" pos:end="115:13"><if pos:start="23:5" pos:end="115:13">if <condition pos:start="23:8" pos:end="23:53">(<expr pos:start="23:9" pos:end="23:52"><name pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:10">rt</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:21">encrypted</name></name> <operator pos:start="23:23" pos:end="23:24">&amp;&amp;</operator> <name pos:start="23:26" pos:end="23:52">CONFIG_FFRTMPCRYPT_PROTOCOL</name></expr>)</condition> <block pos:start="23:55" pos:end="115:13">{<block_content pos:start="27:9" pos:end="115:13">
        <comment type="block" pos:start="24:9" pos:end="26:54">/* When the client wants to use RTMPE, we have to change the command
         * byte to 0x06 which means to use encrypted data and we have to set
         * the flash version to at least 9.0.115.0. */</comment>
        <expr_stmt pos:start="27:9" pos:end="27:22"><expr pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:14">tosend</name><index pos:start="27:15" pos:end="27:17">[<expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">0</literal></expr>]</index></name> <operator pos:start="27:19" pos:end="27:19">=</operator> <literal type="number" pos:start="27:21" pos:end="27:21">6</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="28:9" pos:end="28:24"><expr pos:start="28:9" pos:end="28:23"><name pos:start="28:9" pos:end="28:17"><name pos:start="28:9" pos:end="28:14">tosend</name><index pos:start="28:15" pos:end="28:17">[<expr pos:start="28:16" pos:end="28:16"><literal type="number" pos:start="28:16" pos:end="28:16">5</literal></expr>]</index></name> <operator pos:start="28:19" pos:end="28:19">=</operator> <literal type="number" pos:start="28:21" pos:end="28:23">128</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="29:9" pos:end="29:22"><expr pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:14">tosend</name><index pos:start="29:15" pos:end="29:17">[<expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">6</literal></expr>]</index></name> <operator pos:start="29:19" pos:end="29:19">=</operator> <literal type="number" pos:start="29:21" pos:end="29:21">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:22"><expr pos:start="30:9" pos:end="30:21"><name pos:start="30:9" pos:end="30:17"><name pos:start="30:9" pos:end="30:14">tosend</name><index pos:start="30:15" pos:end="30:17">[<expr pos:start="30:16" pos:end="30:16"><literal type="number" pos:start="30:16" pos:end="30:16">7</literal></expr>]</index></name> <operator pos:start="30:19" pos:end="30:19">=</operator> <literal type="number" pos:start="30:21" pos:end="30:21">3</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="31:9" pos:end="31:22"><expr pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:14">tosend</name><index pos:start="31:15" pos:end="31:17">[<expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">8</literal></expr>]</index></name> <operator pos:start="31:19" pos:end="31:19">=</operator> <literal type="number" pos:start="31:21" pos:end="31:21">2</literal></expr>;</expr_stmt>
        <comment type="block" pos:start="32:9" pos:end="33:36">/* Initialize the Diffie-Hellmann context and generate the public key
         * to send to the server. */</comment>
        <if_stmt pos:start="34:9" pos:end="35:79"><if pos:start="34:9" pos:end="35:79">if <condition pos:start="34:12" pos:end="34:69">(<expr pos:start="34:13" pos:end="34:68"><operator pos:start="34:13" pos:end="34:13">(</operator><name pos:start="34:14" pos:end="34:16">ret</name> <operator pos:start="34:18" pos:end="34:18">=</operator> <call pos:start="34:20" pos:end="34:63"><name pos:start="34:20" pos:end="34:39">ff_rtmpe_gen_pub_key</name><argument_list pos:start="34:40" pos:end="34:63">(<argument pos:start="34:41" pos:end="34:50"><expr pos:start="34:41" pos:end="34:50"><name pos:start="34:41" pos:end="34:50"><name pos:start="34:41" pos:end="34:42">rt</name><operator pos:start="34:43" pos:end="34:44">-&gt;</operator><name pos:start="34:45" pos:end="34:50">stream</name></name></expr></argument>, <argument pos:start="34:53" pos:end="34:62"><expr pos:start="34:53" pos:end="34:62"><name pos:start="34:53" pos:end="34:58">tosend</name> <operator pos:start="34:60" pos:end="34:60">+</operator> <literal type="number" pos:start="34:62" pos:end="34:62">1</literal></expr></argument>)</argument_list></call><operator pos:start="34:64" pos:end="34:64">)</operator> <operator pos:start="34:66" pos:end="34:66">&lt;</operator> <literal type="number" pos:start="34:68" pos:end="34:68">0</literal></expr>)</condition><block type="pseudo" pos:start="35:5" pos:end="35:79"><block_content pos:start="35:5" pos:end="35:79">
    <expr_stmt pos:start="35:5" pos:end="35:79"><expr pos:start="35:5" pos:end="35:78"><name pos:start="35:5" pos:end="35:14">client_pos</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <call pos:start="35:18" pos:end="35:78"><name pos:start="35:18" pos:end="35:51">rtmp_handshake_imprint_with_digest</name><argument_list pos:start="35:52" pos:end="35:78">(<argument pos:start="35:53" pos:end="35:62"><expr pos:start="35:53" pos:end="35:62"><name pos:start="35:53" pos:end="35:58">tosend</name> <operator pos:start="35:60" pos:end="35:60">+</operator> <literal type="number" pos:start="35:62" pos:end="35:62">1</literal></expr></argument>, <argument pos:start="35:65" pos:end="35:77"><expr pos:start="35:65" pos:end="35:77"><name pos:start="35:65" pos:end="35:77"><name pos:start="35:65" pos:end="35:66">rt</name><operator pos:start="35:67" pos:end="35:68">-&gt;</operator><name pos:start="35:69" pos:end="35:77">encrypted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="36:5" pos:end="37:26"><if pos:start="36:5" pos:end="37:26">if <condition pos:start="36:8" pos:end="36:23">(<expr pos:start="36:9" pos:end="36:22"><name pos:start="36:9" pos:end="36:18">client_pos</name> <operator pos:start="36:20" pos:end="36:20">&lt;</operator> <literal type="number" pos:start="36:22" pos:end="36:22">0</literal></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:26"><block_content pos:start="37:9" pos:end="37:26">
        <return pos:start="37:9" pos:end="37:26">return <expr pos:start="37:16" pos:end="37:25"><name pos:start="37:16" pos:end="37:25">client_pos</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="38:5" pos:end="115:13"><if pos:start="38:5" pos:end="115:13">if <condition pos:start="38:8" pos:end="39:64">(<expr pos:start="38:9" pos:end="39:63"><operator pos:start="38:9" pos:end="38:9">(</operator><name pos:start="38:10" pos:end="38:12">ret</name> <operator pos:start="38:14" pos:end="38:14">=</operator> <call pos:start="38:16" pos:end="39:58"><name pos:start="38:16" pos:end="38:26">ffurl_write</name><argument_list pos:start="38:27" pos:end="39:58">(<argument pos:start="38:28" pos:end="38:37"><expr pos:start="38:28" pos:end="38:37"><name pos:start="38:28" pos:end="38:37"><name pos:start="38:28" pos:end="38:29">rt</name><operator pos:start="38:30" pos:end="38:31">-&gt;</operator><name pos:start="38:32" pos:end="38:37">stream</name></name></expr></argument>, <argument pos:start="38:40" pos:end="38:45"><expr pos:start="38:40" pos:end="38:45"><name pos:start="38:40" pos:end="38:45">tosend</name></expr></argument>,
                           <argument pos:start="39:28" pos:end="39:57"><expr pos:start="39:28" pos:end="39:57"><name pos:start="39:28" pos:end="39:53">RTMP_HANDSHAKE_PACKET_SIZE</name> <operator pos:start="39:55" pos:end="39:55">+</operator> <literal type="number" pos:start="39:57" pos:end="39:57">1</literal></expr></argument>)</argument_list></call><operator pos:start="39:59" pos:end="39:59">)</operator> <operator pos:start="39:61" pos:end="39:61">&lt;</operator> <literal type="number" pos:start="39:63" pos:end="39:63">0</literal></expr>)</condition> <block pos:start="39:66" pos:end="115:13">{<block_content pos:start="40:9" pos:end="115:13">
        <expr_stmt pos:start="40:9" pos:end="40:73"><expr pos:start="40:9" pos:end="40:72"><call pos:start="40:9" pos:end="40:72"><name pos:start="40:9" pos:end="40:14">av_log</name><argument_list pos:start="40:15" pos:end="40:72">(<argument pos:start="40:16" pos:end="40:16"><expr pos:start="40:16" pos:end="40:16"><name pos:start="40:16" pos:end="40:16">s</name></expr></argument>, <argument pos:start="40:19" pos:end="40:30"><expr pos:start="40:19" pos:end="40:30"><name pos:start="40:19" pos:end="40:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="40:33" pos:end="40:71"><expr pos:start="40:33" pos:end="40:71"><literal type="string" pos:start="40:33" pos:end="40:71">"Cannot write RTMP handshake request\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="41:5" pos:end="115:13"><if pos:start="41:5" pos:end="115:13">if <condition pos:start="41:8" pos:end="42:72">(<expr pos:start="41:9" pos:end="42:71"><operator pos:start="41:9" pos:end="41:9">(</operator><name pos:start="41:10" pos:end="41:12">ret</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <call pos:start="41:16" pos:end="42:66"><name pos:start="41:16" pos:end="41:34">ffurl_read_complete</name><argument_list pos:start="41:35" pos:end="42:66">(<argument pos:start="41:36" pos:end="41:45"><expr pos:start="41:36" pos:end="41:45"><name pos:start="41:36" pos:end="41:45"><name pos:start="41:36" pos:end="41:37">rt</name><operator pos:start="41:38" pos:end="41:39">-&gt;</operator><name pos:start="41:40" pos:end="41:45">stream</name></name></expr></argument>, <argument pos:start="41:48" pos:end="41:57"><expr pos:start="41:48" pos:end="41:57"><name pos:start="41:48" pos:end="41:57">serverdata</name></expr></argument>,
                                   <argument pos:start="42:36" pos:end="42:65"><expr pos:start="42:36" pos:end="42:65"><name pos:start="42:36" pos:end="42:61">RTMP_HANDSHAKE_PACKET_SIZE</name> <operator pos:start="42:63" pos:end="42:63">+</operator> <literal type="number" pos:start="42:65" pos:end="42:65">1</literal></expr></argument>)</argument_list></call><operator pos:start="42:67" pos:end="42:67">)</operator> <operator pos:start="42:69" pos:end="42:69">&lt;</operator> <literal type="number" pos:start="42:71" pos:end="42:71">0</literal></expr>)</condition> <block pos:start="42:74" pos:end="115:13">{<block_content pos:start="43:9" pos:end="115:13">
        <expr_stmt pos:start="43:9" pos:end="43:73"><expr pos:start="43:9" pos:end="43:72"><call pos:start="43:9" pos:end="43:72"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:72">(<argument pos:start="43:16" pos:end="43:16"><expr pos:start="43:16" pos:end="43:16"><name pos:start="43:16" pos:end="43:16">s</name></expr></argument>, <argument pos:start="43:19" pos:end="43:30"><expr pos:start="43:19" pos:end="43:30"><name pos:start="43:19" pos:end="43:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:33" pos:end="43:71"><expr pos:start="43:33" pos:end="43:71"><literal type="string" pos:start="43:33" pos:end="43:71">"Cannot read RTMP handshake response\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="44:5" pos:end="115:13"><if pos:start="44:5" pos:end="115:13">if <condition pos:start="44:8" pos:end="45:68">(<expr pos:start="44:9" pos:end="45:67"><operator pos:start="44:9" pos:end="44:9">(</operator><name pos:start="44:10" pos:end="44:12">ret</name> <operator pos:start="44:14" pos:end="44:14">=</operator> <call pos:start="44:16" pos:end="45:62"><name pos:start="44:16" pos:end="44:34">ffurl_read_complete</name><argument_list pos:start="44:35" pos:end="45:62">(<argument pos:start="44:36" pos:end="44:45"><expr pos:start="44:36" pos:end="44:45"><name pos:start="44:36" pos:end="44:45"><name pos:start="44:36" pos:end="44:37">rt</name><operator pos:start="44:38" pos:end="44:39">-&gt;</operator><name pos:start="44:40" pos:end="44:45">stream</name></name></expr></argument>, <argument pos:start="44:48" pos:end="44:57"><expr pos:start="44:48" pos:end="44:57"><name pos:start="44:48" pos:end="44:57">clientdata</name></expr></argument>,
                                   <argument pos:start="45:36" pos:end="45:61"><expr pos:start="45:36" pos:end="45:61"><name pos:start="45:36" pos:end="45:61">RTMP_HANDSHAKE_PACKET_SIZE</name></expr></argument>)</argument_list></call><operator pos:start="45:63" pos:end="45:63">)</operator> <operator pos:start="45:65" pos:end="45:65">&lt;</operator> <literal type="number" pos:start="45:67" pos:end="45:67">0</literal></expr>)</condition> <block pos:start="45:70" pos:end="115:13">{<block_content pos:start="46:9" pos:end="115:13">
        <expr_stmt pos:start="46:9" pos:end="46:73"><expr pos:start="46:9" pos:end="46:72"><call pos:start="46:9" pos:end="46:72"><name pos:start="46:9" pos:end="46:14">av_log</name><argument_list pos:start="46:15" pos:end="46:72">(<argument pos:start="46:16" pos:end="46:16"><expr pos:start="46:16" pos:end="46:16"><name pos:start="46:16" pos:end="46:16">s</name></expr></argument>, <argument pos:start="46:19" pos:end="46:30"><expr pos:start="46:19" pos:end="46:30"><name pos:start="46:19" pos:end="46:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="46:33" pos:end="46:71"><expr pos:start="46:33" pos:end="46:71"><literal type="string" pos:start="46:33" pos:end="46:71">"Cannot read RTMP handshake response\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="47:5" pos:end="47:63"><expr pos:start="47:5" pos:end="47:62"><call pos:start="47:5" pos:end="47:62"><name pos:start="47:5" pos:end="47:10">av_log</name><argument_list pos:start="47:11" pos:end="47:62">(<argument pos:start="47:12" pos:end="47:12"><expr pos:start="47:12" pos:end="47:12"><name pos:start="47:12" pos:end="47:12">s</name></expr></argument>, <argument pos:start="47:15" pos:end="47:26"><expr pos:start="47:15" pos:end="47:26"><name pos:start="47:15" pos:end="47:26">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="47:29" pos:end="47:46"><expr pos:start="47:29" pos:end="47:46"><literal type="string" pos:start="47:29" pos:end="47:46">"Type answer %d\n"</literal></expr></argument>, <argument pos:start="47:49" pos:end="47:61"><expr pos:start="47:49" pos:end="47:61"><name pos:start="47:49" pos:end="47:61"><name pos:start="47:49" pos:end="47:58">serverdata</name><index pos:start="47:59" pos:end="47:61">[<expr pos:start="47:60" pos:end="47:60"><literal type="number" pos:start="47:60" pos:end="47:60">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="48:5" pos:end="49:71"><expr pos:start="48:5" pos:end="49:70"><call pos:start="48:5" pos:end="49:70"><name pos:start="48:5" pos:end="48:10">av_log</name><argument_list pos:start="48:11" pos:end="49:70">(<argument pos:start="48:12" pos:end="48:12"><expr pos:start="48:12" pos:end="48:12"><name pos:start="48:12" pos:end="48:12">s</name></expr></argument>, <argument pos:start="48:15" pos:end="48:26"><expr pos:start="48:15" pos:end="48:26"><name pos:start="48:15" pos:end="48:26">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="48:29" pos:end="48:58"><expr pos:start="48:29" pos:end="48:58"><literal type="string" pos:start="48:29" pos:end="48:58">"Server version %d.%d.%d.%d\n"</literal></expr></argument>,
           <argument pos:start="49:12" pos:end="49:24"><expr pos:start="49:12" pos:end="49:24"><name pos:start="49:12" pos:end="49:24"><name pos:start="49:12" pos:end="49:21">serverdata</name><index pos:start="49:22" pos:end="49:24">[<expr pos:start="49:23" pos:end="49:23"><literal type="number" pos:start="49:23" pos:end="49:23">5</literal></expr>]</index></name></expr></argument>, <argument pos:start="49:27" pos:end="49:39"><expr pos:start="49:27" pos:end="49:39"><name pos:start="49:27" pos:end="49:39"><name pos:start="49:27" pos:end="49:36">serverdata</name><index pos:start="49:37" pos:end="49:39">[<expr pos:start="49:38" pos:end="49:38"><literal type="number" pos:start="49:38" pos:end="49:38">6</literal></expr>]</index></name></expr></argument>, <argument pos:start="49:42" pos:end="49:54"><expr pos:start="49:42" pos:end="49:54"><name pos:start="49:42" pos:end="49:54"><name pos:start="49:42" pos:end="49:51">serverdata</name><index pos:start="49:52" pos:end="49:54">[<expr pos:start="49:53" pos:end="49:53"><literal type="number" pos:start="49:53" pos:end="49:53">7</literal></expr>]</index></name></expr></argument>, <argument pos:start="49:57" pos:end="49:69"><expr pos:start="49:57" pos:end="49:69"><name pos:start="49:57" pos:end="49:69"><name pos:start="49:57" pos:end="49:66">serverdata</name><index pos:start="49:67" pos:end="49:69">[<expr pos:start="49:68" pos:end="49:68"><literal type="number" pos:start="49:68" pos:end="49:68">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="50:5" pos:end="115:13"><if pos:start="50:5" pos:end="115:13">if <condition pos:start="50:8" pos:end="50:43">(<expr pos:start="50:9" pos:end="50:42"><name pos:start="50:9" pos:end="50:20"><name pos:start="50:9" pos:end="50:10">rt</name><operator pos:start="50:11" pos:end="50:12">-&gt;</operator><name pos:start="50:13" pos:end="50:20">is_input</name></name> <operator pos:start="50:22" pos:end="50:23">&amp;&amp;</operator> <name pos:start="50:25" pos:end="50:37"><name pos:start="50:25" pos:end="50:34">serverdata</name><index pos:start="50:35" pos:end="50:37">[<expr pos:start="50:36" pos:end="50:36"><literal type="number" pos:start="50:36" pos:end="50:36">5</literal></expr>]</index></name> <operator pos:start="50:39" pos:end="50:40">&gt;=</operator> <literal type="number" pos:start="50:42" pos:end="50:42">3</literal></expr>)</condition> <block pos:start="50:45" pos:end="115:13">{<block_content pos:start="51:9" pos:end="115:13">
        <expr_stmt pos:start="51:9" pos:end="51:63"><expr pos:start="51:9" pos:end="51:62"><name pos:start="51:9" pos:end="51:18">server_pos</name> <operator pos:start="51:20" pos:end="51:20">=</operator> <call pos:start="51:22" pos:end="51:62"><name pos:start="51:22" pos:end="51:41">rtmp_validate_digest</name><argument_list pos:start="51:42" pos:end="51:62">(<argument pos:start="51:43" pos:end="51:56"><expr pos:start="51:43" pos:end="51:56"><name pos:start="51:43" pos:end="51:52">serverdata</name> <operator pos:start="51:54" pos:end="51:54">+</operator> <literal type="number" pos:start="51:56" pos:end="51:56">1</literal></expr></argument>, <argument pos:start="51:59" pos:end="51:61"><expr pos:start="51:59" pos:end="51:61"><literal type="number" pos:start="51:59" pos:end="51:61">772</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="52:9" pos:end="53:30"><if pos:start="52:9" pos:end="53:30">if <condition pos:start="52:12" pos:end="52:27">(<expr pos:start="52:13" pos:end="52:26"><name pos:start="52:13" pos:end="52:22">server_pos</name> <operator pos:start="52:24" pos:end="52:24">&lt;</operator> <literal type="number" pos:start="52:26" pos:end="52:26">0</literal></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:30"><block_content pos:start="53:13" pos:end="53:30">
            <return pos:start="53:13" pos:end="53:30">return <expr pos:start="53:20" pos:end="53:29"><name pos:start="53:20" pos:end="53:29">server_pos</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt pos:start="54:9" pos:end="115:13"><if pos:start="54:9" pos:end="115:13">if <condition pos:start="54:12" pos:end="54:24">(<expr pos:start="54:13" pos:end="54:23"><operator pos:start="54:13" pos:end="54:13">!</operator><name pos:start="54:14" pos:end="54:23">server_pos</name></expr>)</condition> <block pos:start="54:26" pos:end="115:13">{<block_content pos:start="55:13" pos:end="115:13">
            <expr_stmt pos:start="55:13" pos:end="55:21"><expr pos:start="55:13" pos:end="55:20"><name pos:start="55:13" pos:end="55:16">type</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <literal type="number" pos:start="55:20" pos:end="55:20">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="56:13" pos:end="56:65"><expr pos:start="56:13" pos:end="56:64"><name pos:start="56:13" pos:end="56:22">server_pos</name> <operator pos:start="56:24" pos:end="56:24">=</operator> <call pos:start="56:26" pos:end="56:64"><name pos:start="56:26" pos:end="56:45">rtmp_validate_digest</name><argument_list pos:start="56:46" pos:end="56:64">(<argument pos:start="56:47" pos:end="56:60"><expr pos:start="56:47" pos:end="56:60"><name pos:start="56:47" pos:end="56:56">serverdata</name> <operator pos:start="56:58" pos:end="56:58">+</operator> <literal type="number" pos:start="56:60" pos:end="56:60">1</literal></expr></argument>, <argument pos:start="56:63" pos:end="56:63"><expr pos:start="56:63" pos:end="56:63"><literal type="number" pos:start="56:63" pos:end="56:63">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="57:13" pos:end="58:34"><if pos:start="57:13" pos:end="58:34">if <condition pos:start="57:16" pos:end="57:31">(<expr pos:start="57:17" pos:end="57:30"><name pos:start="57:17" pos:end="57:26">server_pos</name> <operator pos:start="57:28" pos:end="57:28">&lt;</operator> <literal type="number" pos:start="57:30" pos:end="57:30">0</literal></expr>)</condition><block type="pseudo" pos:start="58:17" pos:end="58:34"><block_content pos:start="58:17" pos:end="58:34">
                <return pos:start="58:17" pos:end="58:34">return <expr pos:start="58:24" pos:end="58:33"><name pos:start="58:24" pos:end="58:33">server_pos</name></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt pos:start="59:13" pos:end="115:13"><if pos:start="59:13" pos:end="115:13">if <condition pos:start="59:16" pos:end="59:28">(<expr pos:start="59:17" pos:end="59:27"><operator pos:start="59:17" pos:end="59:17">!</operator><name pos:start="59:18" pos:end="59:27">server_pos</name></expr>)</condition> <block pos:start="59:30" pos:end="115:13">{<block_content pos:start="60:17" pos:end="115:13">
                <expr_stmt pos:start="60:17" pos:end="60:79"><expr pos:start="60:17" pos:end="60:78"><call pos:start="60:17" pos:end="60:78"><name pos:start="60:17" pos:end="60:22">av_log</name><argument_list pos:start="60:23" pos:end="60:78">(<argument pos:start="60:24" pos:end="60:24"><expr pos:start="60:24" pos:end="60:24"><name pos:start="60:24" pos:end="60:24">s</name></expr></argument>, <argument pos:start="60:27" pos:end="60:38"><expr pos:start="60:27" pos:end="60:38"><name pos:start="60:27" pos:end="60:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="60:41" pos:end="60:77"><expr pos:start="60:41" pos:end="60:77"><literal type="string" pos:start="60:41" pos:end="60:77">"Server response validating failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="61:17" pos:end="61:36">return <expr pos:start="61:24" pos:end="61:35"><call pos:start="61:24" pos:end="61:35"><name pos:start="61:24" pos:end="61:30">AVERROR</name><argument_list pos:start="61:31" pos:end="61:35">(<argument pos:start="61:32" pos:end="61:34"><expr pos:start="61:32" pos:end="61:34"><name pos:start="61:32" pos:end="61:34">EIO</name></expr></argument>)</argument_list></call></expr>;</return>
        <expr_stmt pos:start="62:9" pos:end="64:42"><expr pos:start="62:9" pos:end="64:41"><name pos:start="62:9" pos:end="62:11">ret</name> <operator pos:start="62:13" pos:end="62:13">=</operator> <call pos:start="62:15" pos:end="64:41"><name pos:start="62:15" pos:end="62:33">ff_rtmp_calc_digest</name><argument_list pos:start="62:34" pos:end="64:41">(<argument pos:start="62:35" pos:end="62:57"><expr pos:start="62:35" pos:end="62:57"><name pos:start="62:35" pos:end="62:40">tosend</name> <operator pos:start="62:42" pos:end="62:42">+</operator> <literal type="number" pos:start="62:44" pos:end="62:46">1</literal> <operator pos:start="62:46" pos:end="62:46">+</operator> <name pos:start="62:48" pos:end="62:57">client_pos</name></expr></argument>, <argument pos:start="62:60" pos:end="62:61"><expr pos:start="62:60" pos:end="62:61"><literal type="number" pos:start="62:60" pos:end="62:61">32</literal></expr></argument>, <argument pos:start="62:64" pos:end="62:64"><expr pos:start="62:64" pos:end="62:64"><literal type="number" pos:start="62:64" pos:end="62:64">0</literal></expr></argument>,
                                  <argument pos:start="63:35" pos:end="63:49"><expr pos:start="63:35" pos:end="63:49"><name pos:start="63:35" pos:end="63:49">rtmp_server_key</name></expr></argument>, <argument pos:start="63:52" pos:end="63:74"><expr pos:start="63:52" pos:end="63:74"><sizeof pos:start="63:52" pos:end="63:74">sizeof<argument_list pos:start="63:58" pos:end="63:74">(<argument pos:start="63:59" pos:end="63:73"><expr pos:start="63:59" pos:end="63:73"><name pos:start="63:59" pos:end="63:73">rtmp_server_key</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                  <argument pos:start="64:35" pos:end="64:40"><expr pos:start="64:35" pos:end="64:40"><name pos:start="64:35" pos:end="64:40">digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="65:9" pos:end="67:60"><if pos:start="65:9" pos:end="67:60">if <condition pos:start="65:12" pos:end="65:20">(<expr pos:start="65:13" pos:end="65:19"><name pos:start="65:13" pos:end="65:15">ret</name> <operator pos:start="65:17" pos:end="65:17">&lt;</operator> <literal type="number" pos:start="65:19" pos:end="65:19">0</literal></expr>)</condition><block type="pseudo" pos:start="66:9" pos:end="67:60"><block_content pos:start="66:9" pos:end="67:60">
        <expr_stmt pos:start="66:9" pos:end="67:60"><expr pos:start="66:9" pos:end="67:59"><name pos:start="66:9" pos:end="66:11">ret</name> <operator pos:start="66:13" pos:end="66:13">=</operator> <call pos:start="66:15" pos:end="67:59"><name pos:start="66:15" pos:end="66:33">ff_rtmp_calc_digest</name><argument_list pos:start="66:34" pos:end="67:59">(<argument pos:start="66:35" pos:end="66:44"><expr pos:start="66:35" pos:end="66:44"><name pos:start="66:35" pos:end="66:44">clientdata</name></expr></argument>, <argument pos:start="66:47" pos:end="66:77"><expr pos:start="66:47" pos:end="66:77"><name pos:start="66:47" pos:end="66:72">RTMP_HANDSHAKE_PACKET_SIZE</name> <operator pos:start="66:74" pos:end="66:74">-</operator> <literal type="number" pos:start="66:76" pos:end="66:77">32</literal></expr></argument>,
                                  <argument pos:start="67:35" pos:end="67:35"><expr pos:start="67:35" pos:end="67:35"><literal type="number" pos:start="67:35" pos:end="67:35">0</literal></expr></argument>, <argument pos:start="67:38" pos:end="67:43"><expr pos:start="67:38" pos:end="67:43"><name pos:start="67:38" pos:end="67:43">digest</name></expr></argument>, <argument pos:start="67:46" pos:end="67:47"><expr pos:start="67:46" pos:end="67:47"><literal type="number" pos:start="67:46" pos:end="67:47">32</literal></expr></argument>, <argument pos:start="67:50" pos:end="67:58"><expr pos:start="67:50" pos:end="67:58"><name pos:start="67:50" pos:end="67:58">signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="68:9" pos:end="115:13"><if pos:start="68:9" pos:end="115:13">if <condition pos:start="68:12" pos:end="68:20">(<expr pos:start="68:13" pos:end="68:19"><name pos:start="68:13" pos:end="68:15">ret</name> <operator pos:start="68:17" pos:end="68:17">&lt;</operator> <literal type="number" pos:start="68:19" pos:end="68:19">0</literal></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="115:13"><block_content pos:start="69:9" pos:end="115:13">
        <if_stmt pos:start="69:9" pos:end="115:13"><if pos:start="69:9" pos:end="115:13">if <condition pos:start="69:12" pos:end="69:57">(<expr pos:start="69:13" pos:end="69:56"><name pos:start="69:13" pos:end="69:25"><name pos:start="69:13" pos:end="69:14">rt</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:25">encrypted</name></name> <operator pos:start="69:27" pos:end="69:28">&amp;&amp;</operator> <name pos:start="69:30" pos:end="69:56">CONFIG_FFRTMPCRYPT_PROTOCOL</name></expr>)</condition> <block pos:start="69:59" pos:end="115:13">{<block_content pos:start="72:13" pos:end="115:13">
            <comment type="block" pos:start="70:13" pos:end="71:37">/* Compute the shared secret key sent by the server and initialize
             * the RC4 encryption. */</comment>
            <if_stmt pos:start="72:13" pos:end="75:79"><if pos:start="72:13" pos:end="75:79">if <condition pos:start="72:16" pos:end="73:74">(<expr pos:start="72:17" pos:end="73:73"><operator pos:start="72:17" pos:end="72:17">(</operator><name pos:start="72:18" pos:end="72:20">ret</name> <operator pos:start="72:22" pos:end="72:22">=</operator> <call pos:start="72:24" pos:end="73:68"><name pos:start="72:24" pos:end="72:50">ff_rtmpe_compute_secret_key</name><argument_list pos:start="72:51" pos:end="73:68">(<argument pos:start="72:52" pos:end="72:61"><expr pos:start="72:52" pos:end="72:61"><name pos:start="72:52" pos:end="72:61"><name pos:start="72:52" pos:end="72:53">rt</name><operator pos:start="72:54" pos:end="72:55">-&gt;</operator><name pos:start="72:56" pos:end="72:61">stream</name></name></expr></argument>, <argument pos:start="72:64" pos:end="72:77"><expr pos:start="72:64" pos:end="72:77"><name pos:start="72:64" pos:end="72:73">serverdata</name> <operator pos:start="72:75" pos:end="72:75">+</operator> <literal type="number" pos:start="72:77" pos:end="72:77">1</literal></expr></argument>,
                                                   <argument pos:start="73:52" pos:end="73:61"><expr pos:start="73:52" pos:end="73:61"><name pos:start="73:52" pos:end="73:57">tosend</name> <operator pos:start="73:59" pos:end="73:59">+</operator> <literal type="number" pos:start="73:61" pos:end="73:61">1</literal></expr></argument>, <argument pos:start="73:64" pos:end="73:67"><expr pos:start="73:64" pos:end="73:67"><name pos:start="73:64" pos:end="73:67">type</name></expr></argument>)</argument_list></call><operator pos:start="73:69" pos:end="73:69">)</operator> <operator pos:start="73:71" pos:end="73:71">&lt;</operator> <literal type="number" pos:start="73:73" pos:end="73:73">0</literal></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:79"><block_content pos:start="75:13" pos:end="75:79">
            <comment type="block" pos:start="74:13" pos:end="74:63">/* Encrypt the signature received by the server. */</comment>
            <expr_stmt pos:start="75:13" pos:end="75:79"><expr pos:start="75:13" pos:end="75:78"><call pos:start="75:13" pos:end="75:78"><name pos:start="75:13" pos:end="75:32">ff_rtmpe_encrypt_sig</name><argument_list pos:start="75:33" pos:end="75:78">(<argument pos:start="75:34" pos:end="75:43"><expr pos:start="75:34" pos:end="75:43"><name pos:start="75:34" pos:end="75:43"><name pos:start="75:34" pos:end="75:35">rt</name><operator pos:start="75:36" pos:end="75:37">-&gt;</operator><name pos:start="75:38" pos:end="75:43">stream</name></name></expr></argument>, <argument pos:start="75:46" pos:end="75:54"><expr pos:start="75:46" pos:end="75:54"><name pos:start="75:46" pos:end="75:54">signature</name></expr></argument>, <argument pos:start="75:57" pos:end="75:62"><expr pos:start="75:57" pos:end="75:62"><name pos:start="75:57" pos:end="75:62">digest</name></expr></argument>, <argument pos:start="75:65" pos:end="75:77"><expr pos:start="75:65" pos:end="75:77"><name pos:start="75:65" pos:end="75:77"><name pos:start="75:65" pos:end="75:74">serverdata</name><index pos:start="75:75" pos:end="75:77">[<expr pos:start="75:76" pos:end="75:76"><literal type="number" pos:start="75:76" pos:end="75:76">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="76:9" pos:end="115:13"><if pos:start="76:9" pos:end="115:13">if <condition pos:start="76:12" pos:end="76:80">(<expr pos:start="76:13" pos:end="76:79"><call pos:start="76:13" pos:end="76:79"><name pos:start="76:13" pos:end="76:18">memcmp</name><argument_list pos:start="76:19" pos:end="76:79">(<argument pos:start="76:20" pos:end="76:28"><expr pos:start="76:20" pos:end="76:28"><name pos:start="76:20" pos:end="76:28">signature</name></expr></argument>, <argument pos:start="76:31" pos:end="76:74"><expr pos:start="76:31" pos:end="76:74"><name pos:start="76:31" pos:end="76:40">clientdata</name> <operator pos:start="76:42" pos:end="76:42">+</operator> <name pos:start="76:44" pos:end="76:69">RTMP_HANDSHAKE_PACKET_SIZE</name> <operator pos:start="76:71" pos:end="76:71">-</operator> <literal type="number" pos:start="76:73" pos:end="76:74">32</literal></expr></argument>, <argument pos:start="76:77" pos:end="76:78"><expr pos:start="76:77" pos:end="76:78"><literal type="number" pos:start="76:77" pos:end="76:78">32</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="76:82" pos:end="115:13">{<block_content pos:start="77:13" pos:end="115:13">
            <expr_stmt pos:start="77:13" pos:end="77:60"><expr pos:start="77:13" pos:end="77:59"><call pos:start="77:13" pos:end="77:59"><name pos:start="77:13" pos:end="77:18">av_log</name><argument_list pos:start="77:19" pos:end="77:59">(<argument pos:start="77:20" pos:end="77:20"><expr pos:start="77:20" pos:end="77:20"><name pos:start="77:20" pos:end="77:20">s</name></expr></argument>, <argument pos:start="77:23" pos:end="77:34"><expr pos:start="77:23" pos:end="77:34"><name pos:start="77:23" pos:end="77:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:37" pos:end="77:58"><expr pos:start="77:37" pos:end="77:58"><literal type="string" pos:start="77:37" pos:end="77:58">"Signature mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="78:13" pos:end="78:32">return <expr pos:start="78:20" pos:end="78:31"><call pos:start="78:20" pos:end="78:31"><name pos:start="78:20" pos:end="78:26">AVERROR</name><argument_list pos:start="78:27" pos:end="78:31">(<argument pos:start="78:28" pos:end="78:30"><expr pos:start="78:28" pos:end="78:30"><name pos:start="78:28" pos:end="78:30">EIO</name></expr></argument>)</argument_list></call></expr>;</return>
        <for pos:start="79:9" pos:end="80:47">for <control pos:start="79:13" pos:end="79:56">(<init pos:start="79:14" pos:end="79:19"><expr pos:start="79:14" pos:end="79:18"><name pos:start="79:14" pos:end="79:14">i</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <literal type="number" pos:start="79:18" pos:end="79:18">0</literal></expr>;</init> <condition pos:start="79:21" pos:end="79:51"><expr pos:start="79:21" pos:end="79:50"><name pos:start="79:21" pos:end="79:21">i</name> <operator pos:start="79:23" pos:end="79:23">&lt;</operator> <name pos:start="79:25" pos:end="79:50">RTMP_HANDSHAKE_PACKET_SIZE</name></expr>;</condition> <incr pos:start="79:53" pos:end="79:55"><expr pos:start="79:53" pos:end="79:55"><name pos:start="79:53" pos:end="79:53">i</name><operator pos:start="79:54" pos:end="79:55">++</operator></expr></incr>)</control><block type="pseudo" pos:start="80:13" pos:end="80:47"><block_content pos:start="80:13" pos:end="80:47">
            <expr_stmt pos:start="80:13" pos:end="80:47"><expr pos:start="80:13" pos:end="80:46"><name pos:start="80:13" pos:end="80:21"><name pos:start="80:13" pos:end="80:18">tosend</name><index pos:start="80:19" pos:end="80:21">[<expr pos:start="80:20" pos:end="80:20"><name pos:start="80:20" pos:end="80:20">i</name></expr>]</index></name> <operator pos:start="80:23" pos:end="80:23">=</operator> <call pos:start="80:25" pos:end="80:40"><name pos:start="80:25" pos:end="80:34">av_lfg_get</name><argument_list pos:start="80:35" pos:end="80:40">(<argument pos:start="80:36" pos:end="80:39"><expr pos:start="80:36" pos:end="80:39"><operator pos:start="80:36" pos:end="80:36">&amp;</operator><name pos:start="80:37" pos:end="80:39">rnd</name></expr></argument>)</argument_list></call> <operator pos:start="80:42" pos:end="80:43">&gt;&gt;</operator> <literal type="number" pos:start="80:45" pos:end="80:46">24</literal></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt pos:start="81:9" pos:end="83:42"><expr pos:start="81:9" pos:end="83:41"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="83:41"><name pos:start="81:15" pos:end="81:33">ff_rtmp_calc_digest</name><argument_list pos:start="81:34" pos:end="83:41">(<argument pos:start="81:35" pos:end="81:61"><expr pos:start="81:35" pos:end="81:61"><name pos:start="81:35" pos:end="81:44">serverdata</name> <operator pos:start="81:46" pos:end="81:46">+</operator> <literal type="number" pos:start="81:48" pos:end="81:50">1</literal> <operator pos:start="81:50" pos:end="81:50">+</operator> <name pos:start="81:52" pos:end="81:61">server_pos</name></expr></argument>, <argument pos:start="81:64" pos:end="81:65"><expr pos:start="81:64" pos:end="81:65"><literal type="number" pos:start="81:64" pos:end="81:65">32</literal></expr></argument>, <argument pos:start="81:68" pos:end="81:68"><expr pos:start="81:68" pos:end="81:68"><literal type="number" pos:start="81:68" pos:end="81:68">0</literal></expr></argument>,
                                  <argument pos:start="82:35" pos:end="82:49"><expr pos:start="82:35" pos:end="82:49"><name pos:start="82:35" pos:end="82:49">rtmp_player_key</name></expr></argument>, <argument pos:start="82:52" pos:end="82:74"><expr pos:start="82:52" pos:end="82:74"><sizeof pos:start="82:52" pos:end="82:74">sizeof<argument_list pos:start="82:58" pos:end="82:74">(<argument pos:start="82:59" pos:end="82:73"><expr pos:start="82:59" pos:end="82:73"><name pos:start="82:59" pos:end="82:73">rtmp_player_key</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                  <argument pos:start="83:35" pos:end="83:40"><expr pos:start="83:35" pos:end="83:40"><name pos:start="83:35" pos:end="83:40">digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="84:9" pos:end="87:76"><if pos:start="84:9" pos:end="87:76">if <condition pos:start="84:12" pos:end="84:20">(<expr pos:start="84:13" pos:end="84:19"><name pos:start="84:13" pos:end="84:15">ret</name> <operator pos:start="84:17" pos:end="84:17">&lt;</operator> <literal type="number" pos:start="84:19" pos:end="84:19">0</literal></expr>)</condition><block type="pseudo" pos:start="85:9" pos:end="87:76"><block_content pos:start="85:9" pos:end="87:76">
        <expr_stmt pos:start="85:9" pos:end="87:76"><expr pos:start="85:9" pos:end="87:75"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="87:75"><name pos:start="85:15" pos:end="85:33">ff_rtmp_calc_digest</name><argument_list pos:start="85:34" pos:end="87:75">(<argument pos:start="85:35" pos:end="85:40"><expr pos:start="85:35" pos:end="85:40"><name pos:start="85:35" pos:end="85:40">tosend</name></expr></argument>, <argument pos:start="85:43" pos:end="85:73"><expr pos:start="85:43" pos:end="85:73"><name pos:start="85:43" pos:end="85:68">RTMP_HANDSHAKE_PACKET_SIZE</name> <operator pos:start="85:70" pos:end="85:70">-</operator> <literal type="number" pos:start="85:72" pos:end="85:73">32</literal></expr></argument>, <argument pos:start="85:76" pos:end="85:76"><expr pos:start="85:76" pos:end="85:76"><literal type="number" pos:start="85:76" pos:end="85:76">0</literal></expr></argument>,
                                  <argument pos:start="86:35" pos:end="86:40"><expr pos:start="86:35" pos:end="86:40"><name pos:start="86:35" pos:end="86:40">digest</name></expr></argument>, <argument pos:start="86:43" pos:end="86:44"><expr pos:start="86:43" pos:end="86:44"><literal type="number" pos:start="86:43" pos:end="86:44">32</literal></expr></argument>,
                                  <argument pos:start="87:35" pos:end="87:74"><expr pos:start="87:35" pos:end="87:74"><name pos:start="87:35" pos:end="87:40">tosend</name> <operator pos:start="87:42" pos:end="87:42">+</operator> <name pos:start="87:44" pos:end="87:69">RTMP_HANDSHAKE_PACKET_SIZE</name> <operator pos:start="87:71" pos:end="87:71">-</operator> <literal type="number" pos:start="87:73" pos:end="87:74">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="88:9" pos:end="115:13"><if pos:start="88:9" pos:end="115:13">if <condition pos:start="88:12" pos:end="88:20">(<expr pos:start="88:13" pos:end="88:19"><name pos:start="88:13" pos:end="88:15">ret</name> <operator pos:start="88:17" pos:end="88:17">&lt;</operator> <literal type="number" pos:start="88:19" pos:end="88:19">0</literal></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="115:13"><block_content pos:start="89:9" pos:end="115:13">
        <if_stmt pos:start="89:9" pos:end="115:13"><if pos:start="89:9" pos:end="115:13">if <condition pos:start="89:12" pos:end="89:57">(<expr pos:start="89:13" pos:end="89:56"><name pos:start="89:13" pos:end="89:25"><name pos:start="89:13" pos:end="89:14">rt</name><operator pos:start="89:15" pos:end="89:16">-&gt;</operator><name pos:start="89:17" pos:end="89:25">encrypted</name></name> <operator pos:start="89:27" pos:end="89:28">&amp;&amp;</operator> <name pos:start="89:30" pos:end="89:56">CONFIG_FFRTMPCRYPT_PROTOCOL</name></expr>)</condition> <block pos:start="89:59" pos:end="115:13">{<block_content pos:start="91:13" pos:end="115:13">
            <comment type="block" pos:start="90:13" pos:end="90:65">/* Encrypt the signature to be send to the server. */</comment>
            <expr_stmt pos:start="91:13" pos:end="93:48"><expr pos:start="91:13" pos:end="93:47"><call pos:start="91:13" pos:end="93:47"><name pos:start="91:13" pos:end="91:32">ff_rtmpe_encrypt_sig</name><argument_list pos:start="91:33" pos:end="93:47">(<argument pos:start="91:34" pos:end="91:43"><expr pos:start="91:34" pos:end="91:43"><name pos:start="91:34" pos:end="91:43"><name pos:start="91:34" pos:end="91:35">rt</name><operator pos:start="91:36" pos:end="91:37">-&gt;</operator><name pos:start="91:38" pos:end="91:43">stream</name></name></expr></argument>, <argument pos:start="91:46" pos:end="92:64"><expr pos:start="91:46" pos:end="92:64"><name pos:start="91:46" pos:end="91:51">tosend</name> <operator pos:start="91:53" pos:end="91:53">+</operator>
                                 <name pos:start="92:34" pos:end="92:59">RTMP_HANDSHAKE_PACKET_SIZE</name> <operator pos:start="92:61" pos:end="92:61">-</operator> <literal type="number" pos:start="92:63" pos:end="92:64">32</literal></expr></argument>, <argument pos:start="92:67" pos:end="92:72"><expr pos:start="92:67" pos:end="92:72"><name pos:start="92:67" pos:end="92:72">digest</name></expr></argument>,
                                 <argument pos:start="93:34" pos:end="93:46"><expr pos:start="93:34" pos:end="93:46"><name pos:start="93:34" pos:end="93:46"><name pos:start="93:34" pos:end="93:43">serverdata</name><index pos:start="93:44" pos:end="93:46">[<expr pos:start="93:45" pos:end="93:45"><literal type="number" pos:start="93:45" pos:end="93:45">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:start="94:9" pos:end="94:41">// write reply back to the server</comment>
        <if_stmt pos:start="95:9" pos:end="115:13"><if pos:start="95:9" pos:end="115:13">if <condition pos:start="95:12" pos:end="96:64">(<expr pos:start="95:13" pos:end="96:63"><operator pos:start="95:13" pos:end="95:13">(</operator><name pos:start="95:14" pos:end="95:16">ret</name> <operator pos:start="95:18" pos:end="95:18">=</operator> <call pos:start="95:20" pos:end="96:58"><name pos:start="95:20" pos:end="95:30">ffurl_write</name><argument_list pos:start="95:31" pos:end="96:58">(<argument pos:start="95:32" pos:end="95:41"><expr pos:start="95:32" pos:end="95:41"><name pos:start="95:32" pos:end="95:41"><name pos:start="95:32" pos:end="95:33">rt</name><operator pos:start="95:34" pos:end="95:35">-&gt;</operator><name pos:start="95:36" pos:end="95:41">stream</name></name></expr></argument>, <argument pos:start="95:44" pos:end="95:49"><expr pos:start="95:44" pos:end="95:49"><name pos:start="95:44" pos:end="95:49">tosend</name></expr></argument>,
                               <argument pos:start="96:32" pos:end="96:57"><expr pos:start="96:32" pos:end="96:57"><name pos:start="96:32" pos:end="96:57">RTMP_HANDSHAKE_PACKET_SIZE</name></expr></argument>)</argument_list></call><operator pos:start="96:59" pos:end="96:59">)</operator> <operator pos:start="96:61" pos:end="96:61">&lt;</operator> <literal type="number" pos:start="96:63" pos:end="96:63">0</literal></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="115:13"><block_content pos:start="97:9" pos:end="115:13">
        <if_stmt pos:start="97:9" pos:end="115:13"><if pos:start="97:9" pos:end="100:5">if <condition pos:start="97:12" pos:end="97:57">(<expr pos:start="97:13" pos:end="97:56"><name pos:start="97:13" pos:end="97:25"><name pos:start="97:13" pos:end="97:14">rt</name><operator pos:start="97:15" pos:end="97:16">-&gt;</operator><name pos:start="97:17" pos:end="97:25">encrypted</name></name> <operator pos:start="97:27" pos:end="97:28">&amp;&amp;</operator> <name pos:start="97:30" pos:end="97:56">CONFIG_FFRTMPCRYPT_PROTOCOL</name></expr>)</condition> <block pos:start="97:59" pos:end="100:5">{<block_content pos:start="99:13" pos:end="99:66">
            <comment type="block" pos:start="98:13" pos:end="98:72">/* Set RC4 keys for encryption and update the keystreams. */</comment>
            <if_stmt pos:start="99:13" pos:end="99:66"><if pos:start="99:13" pos:end="99:66">if <condition pos:start="99:16" pos:end="99:66">(<expr pos:start="99:17" pos:end="99:65"><operator pos:start="99:17" pos:end="99:17">(</operator><name pos:start="99:18" pos:end="99:20">ret</name> <operator pos:start="99:22" pos:end="99:22">=</operator> <call pos:start="99:24" pos:end="99:60"><name pos:start="99:24" pos:end="99:48">ff_rtmpe_update_keystream</name><argument_list pos:start="99:49" pos:end="99:60">(<argument pos:start="99:50" pos:end="99:59"><expr pos:start="99:50" pos:end="99:59"><name pos:start="99:50" pos:end="99:59"><name pos:start="99:50" pos:end="99:51">rt</name><operator pos:start="99:52" pos:end="99:53">-&gt;</operator><name pos:start="99:54" pos:end="99:59">stream</name></name></expr></argument>)</argument_list></call><operator pos:start="99:61" pos:end="99:61">)</operator> <operator pos:start="99:63" pos:end="99:63">&lt;</operator> <literal type="number" pos:start="99:65" pos:end="99:65">0</literal></expr>)</condition><block type="pseudo"><block_content/></block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="100:7" pos:end="115:13">else <block pos:start="100:12" pos:end="115:13">{<block_content pos:start="101:9" pos:end="115:13">
        <if_stmt pos:start="101:9" pos:end="115:13"><if pos:start="101:9" pos:end="115:13">if <condition pos:start="101:12" pos:end="101:57">(<expr pos:start="101:13" pos:end="101:56"><name pos:start="101:13" pos:end="101:25"><name pos:start="101:13" pos:end="101:14">rt</name><operator pos:start="101:15" pos:end="101:16">-&gt;</operator><name pos:start="101:17" pos:end="101:25">encrypted</name></name> <operator pos:start="101:27" pos:end="101:28">&amp;&amp;</operator> <name pos:start="101:30" pos:end="101:56">CONFIG_FFRTMPCRYPT_PROTOCOL</name></expr>)</condition> <block pos:start="101:59" pos:end="115:13">{<block_content pos:start="104:13" pos:end="115:13">
            <comment type="block" pos:start="102:13" pos:end="103:37">/* Compute the shared secret key sent by the server and initialize
             * the RC4 encryption. */</comment>
            <if_stmt pos:start="104:13" pos:end="115:13"><if pos:start="104:13" pos:end="115:13">if <condition pos:start="104:16" pos:end="105:48">(<expr pos:start="104:17" pos:end="105:47"><operator pos:start="104:17" pos:end="104:17">(</operator><name pos:start="104:18" pos:end="104:20">ret</name> <operator pos:start="104:22" pos:end="104:22">=</operator> <call pos:start="104:24" pos:end="105:42"><name pos:start="104:24" pos:end="104:50">ff_rtmpe_compute_secret_key</name><argument_list pos:start="104:51" pos:end="105:42">(<argument pos:start="104:52" pos:end="104:61"><expr pos:start="104:52" pos:end="104:61"><name pos:start="104:52" pos:end="104:61"><name pos:start="104:52" pos:end="104:53">rt</name><operator pos:start="104:54" pos:end="104:55">-&gt;</operator><name pos:start="104:56" pos:end="104:61">stream</name></name></expr></argument>, <argument pos:start="104:64" pos:end="104:77"><expr pos:start="104:64" pos:end="104:77"><name pos:start="104:64" pos:end="104:73">serverdata</name> <operator pos:start="104:75" pos:end="104:75">+</operator> <literal type="number" pos:start="104:77" pos:end="104:77">1</literal></expr></argument>,
                            <argument pos:start="105:29" pos:end="105:38"><expr pos:start="105:29" pos:end="105:38"><name pos:start="105:29" pos:end="105:34">tosend</name> <operator pos:start="105:36" pos:end="105:36">+</operator> <literal type="number" pos:start="105:38" pos:end="105:38">1</literal></expr></argument>, <argument pos:start="105:41" pos:end="105:41"><expr pos:start="105:41" pos:end="105:41"><literal type="number" pos:start="105:41" pos:end="105:41">1</literal></expr></argument>)</argument_list></call><operator pos:start="105:43" pos:end="105:43">)</operator> <operator pos:start="105:45" pos:end="105:45">&lt;</operator> <literal type="number" pos:start="105:47" pos:end="105:47">0</literal></expr>)</condition><block type="pseudo" pos:start="106:13" pos:end="115:13"><block_content pos:start="106:13" pos:end="115:13">
            <if_stmt pos:start="106:13" pos:end="115:13"><if pos:start="106:13" pos:end="115:13">if <condition pos:start="106:16" pos:end="106:35">(<expr pos:start="106:17" pos:end="106:34"><name pos:start="106:17" pos:end="106:29"><name pos:start="106:17" pos:end="106:26">serverdata</name><index pos:start="106:27" pos:end="106:29">[<expr pos:start="106:28" pos:end="106:28"><literal type="number" pos:start="106:28" pos:end="106:28">0</literal></expr>]</index></name> <operator pos:start="106:31" pos:end="106:32">==</operator> <literal type="number" pos:start="106:34" pos:end="106:34">9</literal></expr>)</condition> <block pos:start="106:37" pos:end="115:13">{<block_content pos:start="108:17" pos:end="115:13">
                <comment type="block" pos:start="107:17" pos:end="107:67">/* Encrypt the signature received by the server. */</comment>
                <expr_stmt pos:start="108:17" pos:end="109:52"><expr pos:start="108:17" pos:end="109:51"><call pos:start="108:17" pos:end="109:51"><name pos:start="108:17" pos:end="108:36">ff_rtmpe_encrypt_sig</name><argument_list pos:start="108:37" pos:end="109:51">(<argument pos:start="108:38" pos:end="108:47"><expr pos:start="108:38" pos:end="108:47"><name pos:start="108:38" pos:end="108:47"><name pos:start="108:38" pos:end="108:39">rt</name><operator pos:start="108:40" pos:end="108:41">-&gt;</operator><name pos:start="108:42" pos:end="108:47">stream</name></name></expr></argument>, <argument pos:start="108:50" pos:end="108:58"><expr pos:start="108:50" pos:end="108:58"><name pos:start="108:50" pos:end="108:58">signature</name></expr></argument>, <argument pos:start="108:61" pos:end="108:66"><expr pos:start="108:61" pos:end="108:66"><name pos:start="108:61" pos:end="108:66">digest</name></expr></argument>,
                                     <argument pos:start="109:38" pos:end="109:50"><expr pos:start="109:38" pos:end="109:50"><name pos:start="109:38" pos:end="109:50"><name pos:start="109:38" pos:end="109:47">serverdata</name><index pos:start="109:48" pos:end="109:50">[<expr pos:start="109:49" pos:end="109:49"><literal type="number" pos:start="109:49" pos:end="109:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="110:9" pos:end="115:13"><if pos:start="110:9" pos:end="115:13">if <condition pos:start="110:12" pos:end="111:64">(<expr pos:start="110:13" pos:end="111:63"><operator pos:start="110:13" pos:end="110:13">(</operator><name pos:start="110:14" pos:end="110:16">ret</name> <operator pos:start="110:18" pos:end="110:18">=</operator> <call pos:start="110:20" pos:end="111:58"><name pos:start="110:20" pos:end="110:30">ffurl_write</name><argument_list pos:start="110:31" pos:end="111:58">(<argument pos:start="110:32" pos:end="110:41"><expr pos:start="110:32" pos:end="110:41"><name pos:start="110:32" pos:end="110:41"><name pos:start="110:32" pos:end="110:33">rt</name><operator pos:start="110:34" pos:end="110:35">-&gt;</operator><name pos:start="110:36" pos:end="110:41">stream</name></name></expr></argument>, <argument pos:start="110:44" pos:end="110:57"><expr pos:start="110:44" pos:end="110:57"><name pos:start="110:44" pos:end="110:53">serverdata</name> <operator pos:start="110:55" pos:end="110:55">+</operator> <literal type="number" pos:start="110:57" pos:end="110:57">1</literal></expr></argument>,
                               <argument pos:start="111:32" pos:end="111:57"><expr pos:start="111:32" pos:end="111:57"><name pos:start="111:32" pos:end="111:57">RTMP_HANDSHAKE_PACKET_SIZE</name></expr></argument>)</argument_list></call><operator pos:start="111:59" pos:end="111:59">)</operator> <operator pos:start="111:61" pos:end="111:61">&lt;</operator> <literal type="number" pos:start="111:63" pos:end="111:63">0</literal></expr>)</condition><block type="pseudo" pos:start="112:9" pos:end="115:13"><block_content pos:start="112:9" pos:end="115:13">
        <if_stmt pos:start="112:9" pos:end="115:13"><if pos:start="112:9" pos:end="115:13">if <condition pos:start="112:12" pos:end="112:57">(<expr pos:start="112:13" pos:end="112:56"><name pos:start="112:13" pos:end="112:25"><name pos:start="112:13" pos:end="112:14">rt</name><operator pos:start="112:15" pos:end="112:16">-&gt;</operator><name pos:start="112:17" pos:end="112:25">encrypted</name></name> <operator pos:start="112:27" pos:end="112:28">&amp;&amp;</operator> <name pos:start="112:30" pos:end="112:56">CONFIG_FFRTMPCRYPT_PROTOCOL</name></expr>)</condition> <block pos:start="112:59" pos:end="115:13">{<block_content pos:start="114:13" pos:end="115:13">
            <comment type="block" pos:start="113:13" pos:end="113:72">/* Set RC4 keys for encryption and update the keystreams. */</comment>
            <if_stmt pos:start="114:13" pos:end="115:13"><if pos:start="114:13" pos:end="115:13">if <condition pos:start="114:16" pos:end="114:66">(<expr pos:start="114:17" pos:end="114:65"><operator pos:start="114:17" pos:end="114:17">(</operator><name pos:start="114:18" pos:end="114:20">ret</name> <operator pos:start="114:22" pos:end="114:22">=</operator> <call pos:start="114:24" pos:end="114:60"><name pos:start="114:24" pos:end="114:48">ff_rtmpe_update_keystream</name><argument_list pos:start="114:49" pos:end="114:60">(<argument pos:start="114:50" pos:end="114:59"><expr pos:start="114:50" pos:end="114:59"><name pos:start="114:50" pos:end="114:59"><name pos:start="114:50" pos:end="114:51">rt</name><operator pos:start="114:52" pos:end="114:53">-&gt;</operator><name pos:start="114:54" pos:end="114:59">stream</name></name></expr></argument>)</argument_list></call><operator pos:start="114:61" pos:end="114:61">)</operator> <operator pos:start="114:63" pos:end="114:63">&lt;</operator> <literal type="number" pos:start="114:65" pos:end="114:65">0</literal></expr>)</condition><block type="pseudo" pos:start="115:5" pos:end="115:13"><block_content pos:start="115:5" pos:end="115:13">
    <return pos:start="115:5" pos:end="115:13">return <expr pos:start="115:12" pos:end="115:12"><literal type="number" pos:start="115:12" pos:end="115:12">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
