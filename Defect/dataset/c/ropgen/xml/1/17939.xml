<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17939.c" pos:tabs="8"><function pos:start="1:1" pos:end="295:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">taihu_405ep_init</name><parameter_list pos:start="1:29" pos:end="1:51">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:43"><name pos:start="1:30" pos:end="1:41">MachineState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:50">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="295:1">{<block_content pos:start="5:5" pos:end="294:0">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:31">kernel_filename</name> <init pos:start="7:33" pos:end="7:58">= <expr pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:41">machine</name><operator pos:start="7:42" pos:end="7:43">-&gt;</operator><name pos:start="7:44" pos:end="7:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">initrd_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">qemu_irq</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:17">pic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:46"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:24">sysmem</name> <init pos:start="15:26" pos:end="15:46">= <expr pos:start="15:28" pos:end="15:46"><call pos:start="15:28" pos:end="15:46"><name pos:start="15:28" pos:end="15:44">get_system_memory</name><argument_list pos:start="15:45" pos:end="15:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:22">bios</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:69"><decl pos:start="19:5" pos:end="19:68"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:30">ram_memories</name> <init pos:start="19:32" pos:end="19:68">= <expr pos:start="19:34" pos:end="19:68"><call pos:start="19:34" pos:end="19:68"><name pos:start="19:34" pos:end="19:41">g_malloc</name><argument_list pos:start="19:42" pos:end="19:68">(<argument pos:start="19:43" pos:end="19:67"><expr pos:start="19:43" pos:end="19:67"><literal type="number" pos:start="19:43" pos:end="19:43">2</literal> <operator pos:start="19:45" pos:end="19:45">*</operator> <sizeof pos:start="19:47" pos:end="19:67">sizeof<argument_list pos:start="19:53" pos:end="19:67">(<argument pos:start="19:54" pos:end="19:66"><expr pos:start="19:54" pos:end="19:66"><operator pos:start="19:54" pos:end="19:54">*</operator><name pos:start="19:55" pos:end="19:66">ram_memories</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:38"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">hwaddr</name></type> <name pos:start="21:12" pos:end="21:23"><name pos:start="21:12" pos:end="21:20">ram_bases</name><index pos:start="21:21" pos:end="21:23">[<expr pos:start="21:22" pos:end="21:22"><literal type="number" pos:start="21:22" pos:end="21:22">2</literal></expr>]</index></name></decl>, <decl pos:start="21:26" pos:end="21:37"><type ref="prev" pos:start="21:5" pos:end="21:10"/><name pos:start="21:26" pos:end="21:37"><name pos:start="21:26" pos:end="21:34">ram_sizes</name><index pos:start="21:35" pos:end="21:37">[<expr pos:start="21:36" pos:end="21:36"><literal type="number" pos:start="21:36" pos:end="21:36">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">long</name></type> <name pos:start="23:10" pos:end="23:18">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:42"><decl pos:start="25:5" pos:end="25:28"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:16">target_ulong</name></type> <name pos:start="25:18" pos:end="25:28">kernel_base</name></decl>, <decl pos:start="25:31" pos:end="25:41"><type ref="prev" pos:start="25:5" pos:end="25:16"/><name pos:start="25:31" pos:end="25:41">initrd_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:34"><decl pos:start="27:5" pos:end="27:20"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">long</name></type> <name pos:start="27:10" pos:end="27:20">kernel_size</name></decl>, <decl pos:start="27:23" pos:end="27:33"><type ref="prev" pos:start="27:5" pos:end="27:8"/><name pos:start="27:23" pos:end="27:33">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:19"><decl pos:start="29:5" pos:end="29:18"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:18">linux_boot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:27"><decl pos:start="31:5" pos:end="31:14"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:14">fl_idx</name></decl>, <decl pos:start="31:17" pos:end="31:26"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:17" pos:end="31:26">fl_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:21"><decl pos:start="33:5" pos:end="33:20"><type pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:13">DriveInfo</name> <modifier pos:start="33:15" pos:end="33:15">*</modifier></type><name pos:start="33:16" pos:end="33:20">dinfo</name></decl>;</decl_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:68">/* RAM is soldered to the board so the size cannot be changed */</comment>

    <expr_stmt pos:start="39:5" pos:end="41:60"><expr pos:start="39:5" pos:end="41:59"><call pos:start="39:5" pos:end="41:59"><name pos:start="39:5" pos:end="39:40">memory_region_allocate_system_memory</name><argument_list pos:start="39:41" pos:end="41:59">(<argument pos:start="39:42" pos:end="39:57"><expr pos:start="39:42" pos:end="39:57"><operator pos:start="39:42" pos:end="39:42">&amp;</operator><name pos:start="39:43" pos:end="39:57"><name pos:start="39:43" pos:end="39:54">ram_memories</name><index pos:start="39:55" pos:end="39:57">[<expr pos:start="39:56" pos:end="39:56"><literal type="number" pos:start="39:56" pos:end="39:56">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="39:60" pos:end="39:63"><expr pos:start="39:60" pos:end="39:63"><name pos:start="39:60" pos:end="39:63">NULL</name></expr></argument>,

                           <argument pos:start="41:28" pos:end="41:46"><expr pos:start="41:28" pos:end="41:46"><literal type="string" pos:start="41:28" pos:end="41:46">"taihu_405ep.ram-0"</literal></expr></argument>, <argument pos:start="41:49" pos:end="41:58"><expr pos:start="41:49" pos:end="41:58"><literal type="number" pos:start="41:49" pos:end="41:58">0x04000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:21"><expr pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:13">ram_bases</name><index pos:start="43:14" pos:end="43:16">[<expr pos:start="43:15" pos:end="43:15"><literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>]</index></name> <operator pos:start="43:18" pos:end="43:18">=</operator> <literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:30"><expr pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:13">ram_sizes</name><index pos:start="45:14" pos:end="45:16">[<expr pos:start="45:15" pos:end="45:15"><literal type="number" pos:start="45:15" pos:end="45:15">0</literal></expr>]</index></name> <operator pos:start="45:18" pos:end="45:18">=</operator> <literal type="number" pos:start="45:20" pos:end="45:29">0x04000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="49:60"><expr pos:start="47:5" pos:end="49:59"><call pos:start="47:5" pos:end="49:59"><name pos:start="47:5" pos:end="47:40">memory_region_allocate_system_memory</name><argument_list pos:start="47:41" pos:end="49:59">(<argument pos:start="47:42" pos:end="47:57"><expr pos:start="47:42" pos:end="47:57"><operator pos:start="47:42" pos:end="47:42">&amp;</operator><name pos:start="47:43" pos:end="47:57"><name pos:start="47:43" pos:end="47:54">ram_memories</name><index pos:start="47:55" pos:end="47:57">[<expr pos:start="47:56" pos:end="47:56"><literal type="number" pos:start="47:56" pos:end="47:56">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="47:60" pos:end="47:63"><expr pos:start="47:60" pos:end="47:63"><name pos:start="47:60" pos:end="47:63">NULL</name></expr></argument>,

                           <argument pos:start="49:28" pos:end="49:46"><expr pos:start="49:28" pos:end="49:46"><literal type="string" pos:start="49:28" pos:end="49:46">"taihu_405ep.ram-1"</literal></expr></argument>, <argument pos:start="49:49" pos:end="49:58"><expr pos:start="49:49" pos:end="49:58"><literal type="number" pos:start="49:49" pos:end="49:58">0x04000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:30"><expr pos:start="51:5" pos:end="51:29"><name pos:start="51:5" pos:end="51:16"><name pos:start="51:5" pos:end="51:13">ram_bases</name><index pos:start="51:14" pos:end="51:16">[<expr pos:start="51:15" pos:end="51:15"><literal type="number" pos:start="51:15" pos:end="51:15">1</literal></expr>]</index></name> <operator pos:start="51:18" pos:end="51:18">=</operator> <literal type="number" pos:start="51:20" pos:end="51:29">0x04000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:30"><expr pos:start="53:5" pos:end="53:29"><name pos:start="53:5" pos:end="53:16"><name pos:start="53:5" pos:end="53:13">ram_sizes</name><index pos:start="53:14" pos:end="53:16">[<expr pos:start="53:15" pos:end="53:15"><literal type="number" pos:start="53:15" pos:end="53:15">1</literal></expr>]</index></name> <operator pos:start="53:18" pos:end="53:18">=</operator> <literal type="number" pos:start="53:20" pos:end="53:29">0x04000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="58:0"><expr pos:start="55:5" pos:end="55:25"><name pos:start="55:5" pos:end="55:12">ram_size</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <literal type="number" pos:start="55:16" pos:end="55:25">0x08000000</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="57:1" pos:end="57:23">#<cpp:directive pos:start="57:2" pos:end="57:6">ifdef</cpp:directive> <name pos:start="57:8" pos:end="57:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="59:5" pos:end="62:0"><expr pos:start="59:5" pos:end="59:42"><call pos:start="59:5" pos:end="59:42"><name pos:start="59:5" pos:end="59:10">printf</name><argument_list pos:start="59:11" pos:end="59:42">(<argument pos:start="59:12" pos:end="59:31"><expr pos:start="59:12" pos:end="59:31"><literal type="string" pos:start="59:12" pos:end="59:31">"%s: register cpu\n"</literal></expr></argument>, <argument pos:start="59:34" pos:end="59:41"><expr pos:start="59:34" pos:end="59:41"><name pos:start="59:34" pos:end="59:41">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="63:5" pos:end="70:0"><expr pos:start="63:5" pos:end="65:66"><call pos:start="63:5" pos:end="65:66"><name pos:start="63:5" pos:end="63:17">ppc405ep_init</name><argument_list pos:start="63:18" pos:end="65:66">(<argument pos:start="63:19" pos:end="63:24"><expr pos:start="63:19" pos:end="63:24"><name pos:start="63:19" pos:end="63:24">sysmem</name></expr></argument>, <argument pos:start="63:27" pos:end="63:38"><expr pos:start="63:27" pos:end="63:38"><name pos:start="63:27" pos:end="63:38">ram_memories</name></expr></argument>, <argument pos:start="63:41" pos:end="63:49"><expr pos:start="63:41" pos:end="63:49"><name pos:start="63:41" pos:end="63:49">ram_bases</name></expr></argument>, <argument pos:start="63:52" pos:end="63:60"><expr pos:start="63:52" pos:end="63:60"><name pos:start="63:52" pos:end="63:60">ram_sizes</name></expr></argument>,

                  <argument pos:start="65:19" pos:end="65:26"><expr pos:start="65:19" pos:end="65:26"><literal type="number" pos:start="65:19" pos:end="65:26">33333333</literal></expr></argument>, <argument pos:start="65:29" pos:end="65:32"><expr pos:start="65:29" pos:end="65:32"><operator pos:start="65:29" pos:end="65:29">&amp;</operator><name pos:start="65:30" pos:end="65:32">pic</name></expr></argument>, <argument pos:start="65:35" pos:end="65:65"><expr pos:start="65:35" pos:end="65:65"><ternary pos:start="65:35" pos:end="65:65"><condition pos:start="65:35" pos:end="65:59"><expr pos:start="65:35" pos:end="65:57"><name pos:start="65:35" pos:end="65:49">kernel_filename</name> <operator pos:start="65:51" pos:end="65:52">==</operator> <name pos:start="65:54" pos:end="65:57">NULL</name></expr> ?</condition><then pos:start="65:61" pos:end="65:61"> <expr pos:start="65:61" pos:end="65:61"><literal type="number" pos:start="65:61" pos:end="65:61">0</literal></expr> </then><else pos:start="65:63" pos:end="65:65">: <expr pos:start="65:65" pos:end="65:65"><literal type="number" pos:start="65:65" pos:end="65:65">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="67:5" pos:end="67:32">/* allocate and load BIOS */</comment>

<cpp:ifdef pos:start="69:1" pos:end="69:23">#<cpp:directive pos:start="69:2" pos:end="69:6">ifdef</cpp:directive> <name pos:start="69:8" pos:end="69:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="71:5" pos:end="74:0"><expr pos:start="71:5" pos:end="71:43"><call pos:start="71:5" pos:end="71:43"><name pos:start="71:5" pos:end="71:10">printf</name><argument_list pos:start="71:11" pos:end="71:43">(<argument pos:start="71:12" pos:end="71:32"><expr pos:start="71:12" pos:end="71:32"><literal type="string" pos:start="71:12" pos:end="71:32">"%s: register BIOS\n"</literal></expr></argument>, <argument pos:start="71:35" pos:end="71:42"><expr pos:start="71:35" pos:end="71:42"><name pos:start="71:35" pos:end="71:42">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="75:5" pos:end="78:0"><expr pos:start="75:5" pos:end="75:14"><name pos:start="75:5" pos:end="75:10">fl_idx</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <literal type="number" pos:start="75:14" pos:end="75:14">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="77:1" pos:end="77:27">#<cpp:directive pos:start="77:2" pos:end="77:3">if</cpp:directive> <expr pos:start="77:5" pos:end="77:27"><call pos:start="77:5" pos:end="77:27"><name pos:start="77:5" pos:end="77:11">defined</name><argument_list pos:start="77:12" pos:end="77:27">(<argument pos:start="77:13" pos:end="77:26"><expr pos:start="77:13" pos:end="77:26"><name pos:start="77:13" pos:end="77:26">USE_FLASH_BIOS</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="79:5" pos:end="79:44"><expr pos:start="79:5" pos:end="79:43"><name pos:start="79:5" pos:end="79:9">dinfo</name> <operator pos:start="79:11" pos:end="79:11">=</operator> <call pos:start="79:13" pos:end="79:43"><name pos:start="79:13" pos:end="79:21">drive_get</name><argument_list pos:start="79:22" pos:end="79:43">(<argument pos:start="79:23" pos:end="79:31"><expr pos:start="79:23" pos:end="79:31"><name pos:start="79:23" pos:end="79:31">IF_PFLASH</name></expr></argument>, <argument pos:start="79:34" pos:end="79:34"><expr pos:start="79:34" pos:end="79:34"><literal type="number" pos:start="79:34" pos:end="79:34">0</literal></expr></argument>, <argument pos:start="79:37" pos:end="79:42"><expr pos:start="79:37" pos:end="79:42"><name pos:start="79:37" pos:end="79:42">fl_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="167:5"><if pos:start="81:5" pos:end="115:5">if <condition pos:start="81:8" pos:end="81:14">(<expr pos:start="81:9" pos:end="81:13"><name pos:start="81:9" pos:end="81:13">dinfo</name></expr>)</condition> <block pos:start="81:16" pos:end="115:5">{<block_content pos:start="83:9" pos:end="113:17">

        <expr_stmt pos:start="83:9" pos:end="83:48"><expr pos:start="83:9" pos:end="83:47"><name pos:start="83:9" pos:end="83:17">bios_size</name> <operator pos:start="83:19" pos:end="83:19">=</operator> <call pos:start="83:21" pos:end="83:47"><name pos:start="83:21" pos:end="83:34">bdrv_getlength</name><argument_list pos:start="83:35" pos:end="83:47">(<argument pos:start="83:36" pos:end="83:46"><expr pos:start="83:36" pos:end="83:46"><name pos:start="83:36" pos:end="83:46"><name pos:start="83:36" pos:end="83:40">dinfo</name><operator pos:start="83:41" pos:end="83:42">-&gt;</operator><name pos:start="83:43" pos:end="83:46">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="85:9" pos:end="85:48">/* XXX: should check that size is 2MB */</comment>

        <comment type="line" pos:start="87:9" pos:end="87:46">//        bios_size = 2 * 1024 * 1024;</comment>

        <expr_stmt pos:start="89:9" pos:end="92:0"><expr pos:start="89:9" pos:end="89:46"><name pos:start="89:9" pos:end="89:18">fl_sectors</name> <operator pos:start="89:20" pos:end="89:20">=</operator> <operator pos:start="89:22" pos:end="89:22">(</operator><name pos:start="89:23" pos:end="89:31">bios_size</name> <operator pos:start="89:33" pos:end="89:33">+</operator> <literal type="number" pos:start="89:35" pos:end="89:39">65535</literal><operator pos:start="89:40" pos:end="89:40">)</operator> <operator pos:start="89:42" pos:end="89:43">&gt;&gt;</operator> <literal type="number" pos:start="89:45" pos:end="89:46">16</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="91:1" pos:end="91:23">#<cpp:directive pos:start="91:2" pos:end="91:6">ifdef</cpp:directive> <name pos:start="91:8" pos:end="91:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="93:9" pos:end="102:0"><expr pos:start="93:9" pos:end="99:61"><call pos:start="93:9" pos:end="99:61"><name pos:start="93:9" pos:end="93:14">printf</name><argument_list pos:start="93:15" pos:end="99:61">(<argument pos:start="93:16" pos:end="95:39"><expr pos:start="93:16" pos:end="95:39"><literal type="string" pos:start="93:16" pos:end="93:52">"Register parallel flash %d size %lx"</literal>

               <literal type="string" pos:start="95:16" pos:end="95:39">" at addr %lx '%s' %d\n"</literal></expr></argument>,

               <argument pos:start="97:16" pos:end="97:21"><expr pos:start="97:16" pos:end="97:21"><name pos:start="97:16" pos:end="97:21">fl_idx</name></expr></argument>, <argument pos:start="97:24" pos:end="97:32"><expr pos:start="97:24" pos:end="97:32"><name pos:start="97:24" pos:end="97:32">bios_size</name></expr></argument>, <argument pos:start="97:35" pos:end="97:44"><expr pos:start="97:35" pos:end="97:44"><operator pos:start="97:35" pos:end="97:35">-</operator><name pos:start="97:36" pos:end="97:44">bios_size</name></expr></argument>,

               <argument pos:start="99:16" pos:end="99:48"><expr pos:start="99:16" pos:end="99:48"><call pos:start="99:16" pos:end="99:48"><name pos:start="99:16" pos:end="99:35">bdrv_get_device_name</name><argument_list pos:start="99:36" pos:end="99:48">(<argument pos:start="99:37" pos:end="99:47"><expr pos:start="99:37" pos:end="99:47"><name pos:start="99:37" pos:end="99:47"><name pos:start="99:37" pos:end="99:41">dinfo</name><operator pos:start="99:42" pos:end="99:43">-&gt;</operator><name pos:start="99:44" pos:end="99:47">bdrv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="99:51" pos:end="99:60"><expr pos:start="99:51" pos:end="99:60"><name pos:start="99:51" pos:end="99:60">fl_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="101:1" pos:end="101:6">#<cpp:directive pos:start="101:2" pos:end="101:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="103:9" pos:end="111:33"><expr pos:start="103:9" pos:end="111:32"><call pos:start="103:9" pos:end="111:32"><name pos:start="103:9" pos:end="103:29">pflash_cfi02_register</name><argument_list pos:start="103:30" pos:end="111:32">(<argument pos:start="103:31" pos:end="103:52"><expr pos:start="103:31" pos:end="103:52"><operator pos:start="103:31" pos:end="103:31">(</operator><name pos:start="103:32" pos:end="103:39">uint32_t</name><operator pos:start="103:40" pos:end="103:40">)</operator><operator pos:start="103:41" pos:end="103:41">(</operator><operator pos:start="103:42" pos:end="103:42">-</operator><name pos:start="103:43" pos:end="103:51">bios_size</name><operator pos:start="103:52" pos:end="103:52">)</operator></expr></argument>,

                              <argument pos:start="105:31" pos:end="105:34"><expr pos:start="105:31" pos:end="105:34"><name pos:start="105:31" pos:end="105:34">NULL</name></expr></argument>, <argument pos:start="105:37" pos:end="105:54"><expr pos:start="105:37" pos:end="105:54"><literal type="string" pos:start="105:37" pos:end="105:54">"taihu_405ep.bios"</literal></expr></argument>, <argument pos:start="105:57" pos:end="105:65"><expr pos:start="105:57" pos:end="105:65"><name pos:start="105:57" pos:end="105:65">bios_size</name></expr></argument>,

                              <argument pos:start="107:31" pos:end="107:41"><expr pos:start="107:31" pos:end="107:41"><name pos:start="107:31" pos:end="107:41"><name pos:start="107:31" pos:end="107:35">dinfo</name><operator pos:start="107:36" pos:end="107:37">-&gt;</operator><name pos:start="107:38" pos:end="107:41">bdrv</name></name></expr></argument>, <argument pos:start="107:44" pos:end="107:48"><expr pos:start="107:44" pos:end="107:48"><literal type="number" pos:start="107:44" pos:end="107:48">65536</literal></expr></argument>, <argument pos:start="107:51" pos:end="107:60"><expr pos:start="107:51" pos:end="107:60"><name pos:start="107:51" pos:end="107:60">fl_sectors</name></expr></argument>, <argument pos:start="107:63" pos:end="107:63"><expr pos:start="107:63" pos:end="107:63"><literal type="number" pos:start="107:63" pos:end="107:63">1</literal></expr></argument>,

                              <argument pos:start="109:31" pos:end="109:31"><expr pos:start="109:31" pos:end="109:31"><literal type="number" pos:start="109:31" pos:end="109:31">4</literal></expr></argument>, <argument pos:start="109:34" pos:end="109:39"><expr pos:start="109:34" pos:end="109:39"><literal type="number" pos:start="109:34" pos:end="109:39">0x0001</literal></expr></argument>, <argument pos:start="109:42" pos:end="109:47"><expr pos:start="109:42" pos:end="109:47"><literal type="number" pos:start="109:42" pos:end="109:47">0x22DA</literal></expr></argument>, <argument pos:start="109:50" pos:end="109:55"><expr pos:start="109:50" pos:end="109:55"><literal type="number" pos:start="109:50" pos:end="109:55">0x0000</literal></expr></argument>, <argument pos:start="109:58" pos:end="109:63"><expr pos:start="109:58" pos:end="109:63"><literal type="number" pos:start="109:58" pos:end="109:63">0x0000</literal></expr></argument>, <argument pos:start="109:66" pos:end="109:70"><expr pos:start="109:66" pos:end="109:70"><literal type="number" pos:start="109:66" pos:end="109:70">0x555</literal></expr></argument>, <argument pos:start="109:73" pos:end="109:77"><expr pos:start="109:73" pos:end="109:77"><literal type="number" pos:start="109:73" pos:end="109:77">0x2AA</literal></expr></argument>,

                              <argument pos:start="111:31" pos:end="111:31"><expr pos:start="111:31" pos:end="111:31"><literal type="number" pos:start="111:31" pos:end="111:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:17"><expr pos:start="113:9" pos:end="113:16"><name pos:start="113:9" pos:end="113:14">fl_idx</name><operator pos:start="113:15" pos:end="113:16">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="115:7" pos:end="167:5">else

<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif>

    <block pos:start="119:5" pos:end="167:5">{<block_content pos:start="123:9" pos:end="165:47">

<cpp:ifdef pos:start="121:1" pos:end="121:23">#<cpp:directive pos:start="121:2" pos:end="121:6">ifdef</cpp:directive> <name pos:start="121:8" pos:end="121:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="123:9" pos:end="126:0"><expr pos:start="123:9" pos:end="123:39"><call pos:start="123:9" pos:end="123:39"><name pos:start="123:9" pos:end="123:14">printf</name><argument_list pos:start="123:15" pos:end="123:39">(<argument pos:start="123:16" pos:end="123:38"><expr pos:start="123:16" pos:end="123:38"><literal type="string" pos:start="123:16" pos:end="123:38">"Load BIOS from file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="125:1" pos:end="125:6">#<cpp:directive pos:start="125:2" pos:end="125:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="127:9" pos:end="129:38"><if pos:start="127:9" pos:end="129:38">if <condition pos:start="127:12" pos:end="127:30">(<expr pos:start="127:13" pos:end="127:29"><name pos:start="127:13" pos:end="127:21">bios_name</name> <operator pos:start="127:23" pos:end="127:24">==</operator> <name pos:start="127:26" pos:end="127:29">NULL</name></expr>)</condition><block type="pseudo" pos:start="129:13" pos:end="129:38"><block_content pos:start="129:13" pos:end="129:38">

            <expr_stmt pos:start="129:13" pos:end="129:38"><expr pos:start="129:13" pos:end="129:37"><name pos:start="129:13" pos:end="129:21">bios_name</name> <operator pos:start="129:23" pos:end="129:23">=</operator> <name pos:start="129:25" pos:end="129:37">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:38"><expr pos:start="131:9" pos:end="131:37"><name pos:start="131:9" pos:end="131:12">bios</name> <operator pos:start="131:14" pos:end="131:14">=</operator> <call pos:start="131:16" pos:end="131:37"><name pos:start="131:16" pos:end="131:20">g_new</name><argument_list pos:start="131:21" pos:end="131:37">(<argument pos:start="131:22" pos:end="131:33"><expr pos:start="131:22" pos:end="131:33"><name pos:start="131:22" pos:end="131:33">MemoryRegion</name></expr></argument>, <argument pos:start="131:36" pos:end="131:36"><expr pos:start="131:36" pos:end="131:36"><literal type="number" pos:start="131:36" pos:end="131:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="135:56"><expr pos:start="133:9" pos:end="135:55"><call pos:start="133:9" pos:end="135:55"><name pos:start="133:9" pos:end="133:44">memory_region_allocate_system_memory</name><argument_list pos:start="133:45" pos:end="135:55">(<argument pos:start="133:46" pos:end="133:49"><expr pos:start="133:46" pos:end="133:49"><name pos:start="133:46" pos:end="133:49">bios</name></expr></argument>, <argument pos:start="133:52" pos:end="133:55"><expr pos:start="133:52" pos:end="133:55"><name pos:start="133:52" pos:end="133:55">NULL</name></expr></argument>, <argument pos:start="133:58" pos:end="133:75"><expr pos:start="133:58" pos:end="133:75"><literal type="string" pos:start="133:58" pos:end="133:75">"taihu_405ep.bios"</literal></expr></argument>,

                                             <argument pos:start="135:46" pos:end="135:54"><expr pos:start="135:46" pos:end="135:54"><name pos:start="135:46" pos:end="135:54">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:66"><expr pos:start="137:9" pos:end="137:65"><name pos:start="137:9" pos:end="137:16">filename</name> <operator pos:start="137:18" pos:end="137:18">=</operator> <call pos:start="137:20" pos:end="137:65"><name pos:start="137:20" pos:end="137:33">qemu_find_file</name><argument_list pos:start="137:34" pos:end="137:65">(<argument pos:start="137:35" pos:end="137:53"><expr pos:start="137:35" pos:end="137:53"><name pos:start="137:35" pos:end="137:53">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="137:56" pos:end="137:64"><expr pos:start="137:56" pos:end="137:64"><name pos:start="137:56" pos:end="137:64">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="139:9" pos:end="163:9"><if pos:start="139:9" pos:end="157:9">if <condition pos:start="139:12" pos:end="139:21">(<expr pos:start="139:13" pos:end="139:20"><name pos:start="139:13" pos:end="139:20">filename</name></expr>)</condition> <block pos:start="139:23" pos:end="157:9">{<block_content pos:start="141:13" pos:end="155:78">

            <expr_stmt pos:start="141:13" pos:end="141:78"><expr pos:start="141:13" pos:end="141:77"><name pos:start="141:13" pos:end="141:21">bios_size</name> <operator pos:start="141:23" pos:end="141:23">=</operator> <call pos:start="141:25" pos:end="141:77"><name pos:start="141:25" pos:end="141:34">load_image</name><argument_list pos:start="141:35" pos:end="141:77">(<argument pos:start="141:36" pos:end="141:43"><expr pos:start="141:36" pos:end="141:43"><name pos:start="141:36" pos:end="141:43">filename</name></expr></argument>, <argument pos:start="141:46" pos:end="141:76"><expr pos:start="141:46" pos:end="141:76"><call pos:start="141:46" pos:end="141:76"><name pos:start="141:46" pos:end="141:70">memory_region_get_ram_ptr</name><argument_list pos:start="141:71" pos:end="141:76">(<argument pos:start="141:72" pos:end="141:75"><expr pos:start="141:72" pos:end="141:75"><name pos:start="141:72" pos:end="141:75">bios</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:29"><expr pos:start="143:13" pos:end="143:28"><call pos:start="143:13" pos:end="143:28"><name pos:start="143:13" pos:end="143:18">g_free</name><argument_list pos:start="143:19" pos:end="143:28">(<argument pos:start="143:20" pos:end="143:27"><expr pos:start="143:20" pos:end="143:27"><name pos:start="143:20" pos:end="143:27">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="145:13" pos:end="151:13"><if pos:start="145:13" pos:end="151:13">if <condition pos:start="145:16" pos:end="145:55">(<expr pos:start="145:17" pos:end="145:54"><name pos:start="145:17" pos:end="145:44"><name pos:start="145:17" pos:end="145:25">bios_size</name> <argument_list type="generic" pos:start="145:27" pos:end="145:44">&lt; <argument pos:start="145:29" pos:end="145:42"><expr pos:start="145:29" pos:end="145:42"><literal type="number" pos:start="145:29" pos:end="145:29">0</literal> <operator pos:start="145:31" pos:end="145:32">||</operator> <name pos:start="145:34" pos:end="145:42">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="145:46" pos:end="145:54">BIOS_SIZE</name></expr>)</condition> <block pos:start="145:57" pos:end="151:13">{<block_content pos:start="147:17" pos:end="149:24">

                <expr_stmt pos:start="147:17" pos:end="147:76"><expr pos:start="147:17" pos:end="147:75"><call pos:start="147:17" pos:end="147:75"><name pos:start="147:17" pos:end="147:28">error_report</name><argument_list pos:start="147:29" pos:end="147:75">(<argument pos:start="147:30" pos:end="147:63"><expr pos:start="147:30" pos:end="147:63"><literal type="string" pos:start="147:30" pos:end="147:63">"Could not load PowerPC BIOS '%s'"</literal></expr></argument>, <argument pos:start="147:66" pos:end="147:74"><expr pos:start="147:66" pos:end="147:74"><name pos:start="147:66" pos:end="147:74">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:24"><expr pos:start="149:17" pos:end="149:23"><call pos:start="149:17" pos:end="149:23"><name pos:start="149:17" pos:end="149:20">exit</name><argument_list pos:start="149:21" pos:end="149:23">(<argument pos:start="149:22" pos:end="149:22"><expr pos:start="149:22" pos:end="149:22"><literal type="number" pos:start="149:22" pos:end="149:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:53"><expr pos:start="153:13" pos:end="153:52"><name pos:start="153:13" pos:end="153:21">bios_size</name> <operator pos:start="153:23" pos:end="153:23">=</operator> <operator pos:start="153:25" pos:end="153:25">(</operator><name pos:start="153:26" pos:end="153:34">bios_size</name> <operator pos:start="153:36" pos:end="153:36">+</operator> <literal type="number" pos:start="153:38" pos:end="153:42">0xfff</literal><operator pos:start="153:43" pos:end="153:43">)</operator> <operator pos:start="153:45" pos:end="153:45">&amp;</operator> <operator pos:start="153:47" pos:end="153:47">~</operator><literal type="number" pos:start="153:48" pos:end="153:52">0xfff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:78"><expr pos:start="155:13" pos:end="155:77"><call pos:start="155:13" pos:end="155:77"><name pos:start="155:13" pos:end="155:39">memory_region_add_subregion</name><argument_list pos:start="155:40" pos:end="155:77">(<argument pos:start="155:41" pos:end="155:46"><expr pos:start="155:41" pos:end="155:46"><name pos:start="155:41" pos:end="155:46">sysmem</name></expr></argument>, <argument pos:start="155:49" pos:end="155:70"><expr pos:start="155:49" pos:end="155:70"><operator pos:start="155:49" pos:end="155:49">(</operator><name pos:start="155:50" pos:end="155:57">uint32_t</name><operator pos:start="155:58" pos:end="155:58">)</operator><operator pos:start="155:59" pos:end="155:59">(</operator><operator pos:start="155:60" pos:end="155:60">-</operator><name pos:start="155:61" pos:end="155:69">bios_size</name><operator pos:start="155:70" pos:end="155:70">)</operator></expr></argument>, <argument pos:start="155:73" pos:end="155:76"><expr pos:start="155:73" pos:end="155:76"><name pos:start="155:73" pos:end="155:76">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="157:11" pos:end="163:9">else if <condition pos:start="157:19" pos:end="157:36">(<expr pos:start="157:20" pos:end="157:35"><operator pos:start="157:20" pos:end="157:20">!</operator><call pos:start="157:21" pos:end="157:35"><name pos:start="157:21" pos:end="157:33">qtest_enabled</name><argument_list pos:start="157:34" pos:end="157:35">()</argument_list></call></expr>)</condition> <block pos:start="157:38" pos:end="163:9">{<block_content pos:start="159:13" pos:end="161:20">

            <expr_stmt pos:start="159:13" pos:end="159:72"><expr pos:start="159:13" pos:end="159:71"><call pos:start="159:13" pos:end="159:71"><name pos:start="159:13" pos:end="159:24">error_report</name><argument_list pos:start="159:25" pos:end="159:71">(<argument pos:start="159:26" pos:end="159:59"><expr pos:start="159:26" pos:end="159:59"><literal type="string" pos:start="159:26" pos:end="159:59">"Could not load PowerPC BIOS '%s'"</literal></expr></argument>, <argument pos:start="159:62" pos:end="159:70"><expr pos:start="159:62" pos:end="159:70"><name pos:start="159:62" pos:end="159:70">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:20"><expr pos:start="161:13" pos:end="161:19"><call pos:start="161:13" pos:end="161:19"><name pos:start="161:13" pos:end="161:16">exit</name><argument_list pos:start="161:17" pos:end="161:19">(<argument pos:start="161:18" pos:end="161:18"><expr pos:start="161:18" pos:end="161:18"><literal type="number" pos:start="161:18" pos:end="161:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:47"><expr pos:start="165:9" pos:end="165:46"><call pos:start="165:9" pos:end="165:46"><name pos:start="165:9" pos:end="165:34">memory_region_set_readonly</name><argument_list pos:start="165:35" pos:end="165:46">(<argument pos:start="165:36" pos:end="165:39"><expr pos:start="165:36" pos:end="165:39"><name pos:start="165:36" pos:end="165:39">bios</name></expr></argument>, <argument pos:start="165:42" pos:end="165:45"><expr pos:start="165:42" pos:end="165:45"><name pos:start="165:42" pos:end="165:45">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="169:5" pos:end="169:30">/* Register Linux flash */</comment>

    <expr_stmt pos:start="171:5" pos:end="171:44"><expr pos:start="171:5" pos:end="171:43"><name pos:start="171:5" pos:end="171:9">dinfo</name> <operator pos:start="171:11" pos:end="171:11">=</operator> <call pos:start="171:13" pos:end="171:43"><name pos:start="171:13" pos:end="171:21">drive_get</name><argument_list pos:start="171:22" pos:end="171:43">(<argument pos:start="171:23" pos:end="171:31"><expr pos:start="171:23" pos:end="171:31"><name pos:start="171:23" pos:end="171:31">IF_PFLASH</name></expr></argument>, <argument pos:start="171:34" pos:end="171:34"><expr pos:start="171:34" pos:end="171:34"><literal type="number" pos:start="171:34" pos:end="171:34">0</literal></expr></argument>, <argument pos:start="171:37" pos:end="171:42"><expr pos:start="171:37" pos:end="171:42"><name pos:start="171:37" pos:end="171:42">fl_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="173:5" pos:end="210:0"><if pos:start="173:5" pos:end="210:0">if <condition pos:start="173:8" pos:end="173:14">(<expr pos:start="173:9" pos:end="173:13"><name pos:start="173:9" pos:end="173:13">dinfo</name></expr>)</condition> <block pos:start="173:16" pos:end="210:0">{<block_content pos:start="175:9" pos:end="203:17">

        <expr_stmt pos:start="175:9" pos:end="175:48"><expr pos:start="175:9" pos:end="175:47"><name pos:start="175:9" pos:end="175:17">bios_size</name> <operator pos:start="175:19" pos:end="175:19">=</operator> <call pos:start="175:21" pos:end="175:47"><name pos:start="175:21" pos:end="175:34">bdrv_getlength</name><argument_list pos:start="175:35" pos:end="175:47">(<argument pos:start="175:36" pos:end="175:46"><expr pos:start="175:36" pos:end="175:46"><name pos:start="175:36" pos:end="175:46"><name pos:start="175:36" pos:end="175:40">dinfo</name><operator pos:start="175:41" pos:end="175:42">-&gt;</operator><name pos:start="175:43" pos:end="175:46">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="177:9" pos:end="177:49">/* XXX: should check that size is 32MB */</comment>

        <expr_stmt pos:start="179:9" pos:end="179:37"><expr pos:start="179:9" pos:end="179:36"><name pos:start="179:9" pos:end="179:17">bios_size</name> <operator pos:start="179:19" pos:end="179:19">=</operator> <literal type="number" pos:start="179:21" pos:end="179:22">32</literal> <operator pos:start="179:24" pos:end="179:24">*</operator> <literal type="number" pos:start="179:26" pos:end="179:29">1024</literal> <operator pos:start="179:31" pos:end="179:31">*</operator> <literal type="number" pos:start="179:33" pos:end="179:36">1024</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="184:0"><expr pos:start="181:9" pos:end="181:46"><name pos:start="181:9" pos:end="181:18">fl_sectors</name> <operator pos:start="181:20" pos:end="181:20">=</operator> <operator pos:start="181:22" pos:end="181:22">(</operator><name pos:start="181:23" pos:end="181:31">bios_size</name> <operator pos:start="181:33" pos:end="181:33">+</operator> <literal type="number" pos:start="181:35" pos:end="181:39">65535</literal><operator pos:start="181:40" pos:end="181:40">)</operator> <operator pos:start="181:42" pos:end="181:43">&gt;&gt;</operator> <literal type="number" pos:start="181:45" pos:end="181:46">16</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="183:1" pos:end="183:23">#<cpp:directive pos:start="183:2" pos:end="183:6">ifdef</cpp:directive> <name pos:start="183:8" pos:end="183:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="185:9" pos:end="194:0"><expr pos:start="185:9" pos:end="191:49"><call pos:start="185:9" pos:end="191:49"><name pos:start="185:9" pos:end="185:14">printf</name><argument_list pos:start="185:15" pos:end="191:49">(<argument pos:start="185:16" pos:end="187:50"><expr pos:start="185:16" pos:end="187:50"><literal type="string" pos:start="185:16" pos:end="185:52">"Register parallel flash %d size %lx"</literal>

               <literal type="string" pos:start="187:16" pos:end="187:26">" at addr "</literal> <name pos:start="187:28" pos:end="187:40">TARGET_FMT_lx</name> <literal type="string" pos:start="187:42" pos:end="187:50">" '%s'\n"</literal></expr></argument>,

               <argument pos:start="189:16" pos:end="189:21"><expr pos:start="189:16" pos:end="189:21"><name pos:start="189:16" pos:end="189:21">fl_idx</name></expr></argument>, <argument pos:start="189:24" pos:end="189:32"><expr pos:start="189:24" pos:end="189:32"><name pos:start="189:24" pos:end="189:32">bios_size</name></expr></argument>, <argument pos:start="189:35" pos:end="189:58"><expr pos:start="189:35" pos:end="189:58"><operator pos:start="189:35" pos:end="189:35">(</operator><name pos:start="189:36" pos:end="189:47">target_ulong</name><operator pos:start="189:48" pos:end="189:48">)</operator><literal type="number" pos:start="189:49" pos:end="189:58">0xfc000000</literal></expr></argument>,

               <argument pos:start="191:16" pos:end="191:48"><expr pos:start="191:16" pos:end="191:48"><call pos:start="191:16" pos:end="191:48"><name pos:start="191:16" pos:end="191:35">bdrv_get_device_name</name><argument_list pos:start="191:36" pos:end="191:48">(<argument pos:start="191:37" pos:end="191:47"><expr pos:start="191:37" pos:end="191:47"><name pos:start="191:37" pos:end="191:47"><name pos:start="191:37" pos:end="191:41">dinfo</name><operator pos:start="191:42" pos:end="191:43">-&gt;</operator><name pos:start="191:44" pos:end="191:47">bdrv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="193:1" pos:end="193:6">#<cpp:directive pos:start="193:2" pos:end="193:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="195:9" pos:end="201:33"><expr pos:start="195:9" pos:end="201:32"><call pos:start="195:9" pos:end="201:32"><name pos:start="195:9" pos:end="195:29">pflash_cfi02_register</name><argument_list pos:start="195:30" pos:end="201:32">(<argument pos:start="195:31" pos:end="195:40"><expr pos:start="195:31" pos:end="195:40"><literal type="number" pos:start="195:31" pos:end="195:40">0xfc000000</literal></expr></argument>, <argument pos:start="195:43" pos:end="195:46"><expr pos:start="195:43" pos:end="195:46"><name pos:start="195:43" pos:end="195:46">NULL</name></expr></argument>, <argument pos:start="195:49" pos:end="195:67"><expr pos:start="195:49" pos:end="195:67"><literal type="string" pos:start="195:49" pos:end="195:67">"taihu_405ep.flash"</literal></expr></argument>, <argument pos:start="195:70" pos:end="195:78"><expr pos:start="195:70" pos:end="195:78"><name pos:start="195:70" pos:end="195:78">bios_size</name></expr></argument>,

                              <argument pos:start="197:31" pos:end="197:41"><expr pos:start="197:31" pos:end="197:41"><name pos:start="197:31" pos:end="197:41"><name pos:start="197:31" pos:end="197:35">dinfo</name><operator pos:start="197:36" pos:end="197:37">-&gt;</operator><name pos:start="197:38" pos:end="197:41">bdrv</name></name></expr></argument>, <argument pos:start="197:44" pos:end="197:48"><expr pos:start="197:44" pos:end="197:48"><literal type="number" pos:start="197:44" pos:end="197:48">65536</literal></expr></argument>, <argument pos:start="197:51" pos:end="197:60"><expr pos:start="197:51" pos:end="197:60"><name pos:start="197:51" pos:end="197:60">fl_sectors</name></expr></argument>, <argument pos:start="197:63" pos:end="197:63"><expr pos:start="197:63" pos:end="197:63"><literal type="number" pos:start="197:63" pos:end="197:63">1</literal></expr></argument>,

                              <argument pos:start="199:31" pos:end="199:31"><expr pos:start="199:31" pos:end="199:31"><literal type="number" pos:start="199:31" pos:end="199:31">4</literal></expr></argument>, <argument pos:start="199:34" pos:end="199:39"><expr pos:start="199:34" pos:end="199:39"><literal type="number" pos:start="199:34" pos:end="199:39">0x0001</literal></expr></argument>, <argument pos:start="199:42" pos:end="199:47"><expr pos:start="199:42" pos:end="199:47"><literal type="number" pos:start="199:42" pos:end="199:47">0x22DA</literal></expr></argument>, <argument pos:start="199:50" pos:end="199:55"><expr pos:start="199:50" pos:end="199:55"><literal type="number" pos:start="199:50" pos:end="199:55">0x0000</literal></expr></argument>, <argument pos:start="199:58" pos:end="199:63"><expr pos:start="199:58" pos:end="199:63"><literal type="number" pos:start="199:58" pos:end="199:63">0x0000</literal></expr></argument>, <argument pos:start="199:66" pos:end="199:70"><expr pos:start="199:66" pos:end="199:70"><literal type="number" pos:start="199:66" pos:end="199:70">0x555</literal></expr></argument>, <argument pos:start="199:73" pos:end="199:77"><expr pos:start="199:73" pos:end="199:77"><literal type="number" pos:start="199:73" pos:end="199:77">0x2AA</literal></expr></argument>,

                              <argument pos:start="201:31" pos:end="201:31"><expr pos:start="201:31" pos:end="201:31"><literal type="number" pos:start="201:31" pos:end="201:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:17"><expr pos:start="203:9" pos:end="203:16"><name pos:start="203:9" pos:end="203:14">fl_idx</name><operator pos:start="203:15" pos:end="203:16">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="207:5" pos:end="207:37">/* Register CLPD &amp; LCD display */</comment>

<cpp:ifdef pos:start="209:1" pos:end="209:23">#<cpp:directive pos:start="209:2" pos:end="209:6">ifdef</cpp:directive> <name pos:start="209:8" pos:end="209:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="211:5" pos:end="214:0"><expr pos:start="211:5" pos:end="211:43"><call pos:start="211:5" pos:end="211:43"><name pos:start="211:5" pos:end="211:10">printf</name><argument_list pos:start="211:11" pos:end="211:43">(<argument pos:start="211:12" pos:end="211:32"><expr pos:start="211:12" pos:end="211:32"><literal type="string" pos:start="211:12" pos:end="211:32">"%s: register CPLD\n"</literal></expr></argument>, <argument pos:start="211:35" pos:end="211:42"><expr pos:start="211:35" pos:end="211:42"><name pos:start="211:35" pos:end="211:42">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="213:1" pos:end="213:6">#<cpp:directive pos:start="213:2" pos:end="213:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="215:5" pos:end="215:40"><expr pos:start="215:5" pos:end="215:39"><call pos:start="215:5" pos:end="215:39"><name pos:start="215:5" pos:end="215:19">taihu_cpld_init</name><argument_list pos:start="215:20" pos:end="215:39">(<argument pos:start="215:21" pos:end="215:26"><expr pos:start="215:21" pos:end="215:26"><name pos:start="215:21" pos:end="215:26">sysmem</name></expr></argument>, <argument pos:start="215:29" pos:end="215:38"><expr pos:start="215:29" pos:end="215:38"><literal type="number" pos:start="215:29" pos:end="215:38">0x50100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="217:5" pos:end="217:21">/* Load kernel */</comment>

    <expr_stmt pos:start="219:5" pos:end="219:43"><expr pos:start="219:5" pos:end="219:42"><name pos:start="219:5" pos:end="219:14">linux_boot</name> <operator pos:start="219:16" pos:end="219:16">=</operator> <operator pos:start="219:18" pos:end="219:18">(</operator><name pos:start="219:19" pos:end="219:33">kernel_filename</name> <operator pos:start="219:35" pos:end="219:36">!=</operator> <name pos:start="219:38" pos:end="219:41">NULL</name><operator pos:start="219:42" pos:end="219:42">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="221:5" pos:end="290:0"><if pos:start="221:5" pos:end="277:5">if <condition pos:start="221:8" pos:end="221:19">(<expr pos:start="221:9" pos:end="221:18"><name pos:start="221:9" pos:end="221:18">linux_boot</name></expr>)</condition> <block pos:start="221:21" pos:end="277:5">{<block_content pos:start="225:9" pos:end="275:9">

<cpp:ifdef pos:start="223:1" pos:end="223:23">#<cpp:directive pos:start="223:2" pos:end="223:6">ifdef</cpp:directive> <name pos:start="223:8" pos:end="223:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="225:9" pos:end="228:0"><expr pos:start="225:9" pos:end="225:45"><call pos:start="225:9" pos:end="225:45"><name pos:start="225:9" pos:end="225:14">printf</name><argument_list pos:start="225:15" pos:end="225:45">(<argument pos:start="225:16" pos:end="225:34"><expr pos:start="225:16" pos:end="225:34"><literal type="string" pos:start="225:16" pos:end="225:34">"%s: load kernel\n"</literal></expr></argument>, <argument pos:start="225:37" pos:end="225:44"><expr pos:start="225:37" pos:end="225:44"><name pos:start="225:37" pos:end="225:44">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="227:1" pos:end="227:6">#<cpp:directive pos:start="227:2" pos:end="227:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="229:9" pos:end="229:39"><expr pos:start="229:9" pos:end="229:38"><name pos:start="229:9" pos:end="229:19">kernel_base</name> <operator pos:start="229:21" pos:end="229:21">=</operator> <name pos:start="229:23" pos:end="229:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <comment type="block" pos:start="231:9" pos:end="231:40">/* now we can load the kernel */</comment>

        <expr_stmt pos:start="233:9" pos:end="235:66"><expr pos:start="233:9" pos:end="235:65"><name pos:start="233:9" pos:end="233:19">kernel_size</name> <operator pos:start="233:21" pos:end="233:21">=</operator> <call pos:start="233:23" pos:end="235:65"><name pos:start="233:23" pos:end="233:41">load_image_targphys</name><argument_list pos:start="233:42" pos:end="235:65">(<argument pos:start="233:43" pos:end="233:57"><expr pos:start="233:43" pos:end="233:57"><name pos:start="233:43" pos:end="233:57">kernel_filename</name></expr></argument>, <argument pos:start="233:60" pos:end="233:70"><expr pos:start="233:60" pos:end="233:70"><name pos:start="233:60" pos:end="233:70">kernel_base</name></expr></argument>,

                                          <argument pos:start="235:43" pos:end="235:64"><expr pos:start="235:43" pos:end="235:64"><name pos:start="235:43" pos:end="235:50">ram_size</name> <operator pos:start="235:52" pos:end="235:52">-</operator> <name pos:start="235:54" pos:end="235:64">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="237:9" pos:end="245:9"><if pos:start="237:9" pos:end="245:9">if <condition pos:start="237:12" pos:end="237:28">(<expr pos:start="237:13" pos:end="237:27"><name pos:start="237:13" pos:end="237:23">kernel_size</name> <operator pos:start="237:25" pos:end="237:25">&lt;</operator> <literal type="number" pos:start="237:27" pos:end="237:27">0</literal></expr>)</condition> <block pos:start="237:30" pos:end="245:9">{<block_content pos:start="239:13" pos:end="243:20">

            <expr_stmt pos:start="239:13" pos:end="241:37"><expr pos:start="239:13" pos:end="241:36"><call pos:start="239:13" pos:end="241:36"><name pos:start="239:13" pos:end="239:19">fprintf</name><argument_list pos:start="239:20" pos:end="241:36">(<argument pos:start="239:21" pos:end="239:26"><expr pos:start="239:21" pos:end="239:26"><name pos:start="239:21" pos:end="239:26">stderr</name></expr></argument>, <argument pos:start="239:29" pos:end="239:64"><expr pos:start="239:29" pos:end="239:64"><literal type="string" pos:start="239:29" pos:end="239:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="241:21" pos:end="241:35"><expr pos:start="241:21" pos:end="241:35"><name pos:start="241:21" pos:end="241:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:20"><expr pos:start="243:13" pos:end="243:19"><call pos:start="243:13" pos:end="243:19"><name pos:start="243:13" pos:end="243:16">exit</name><argument_list pos:start="243:17" pos:end="243:19">(<argument pos:start="243:18" pos:end="243:18"><expr pos:start="243:18" pos:end="243:18"><literal type="number" pos:start="243:18" pos:end="243:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="247:9" pos:end="247:25">/* load initrd */</comment>

        <if_stmt pos:start="249:9" pos:end="275:9"><if pos:start="249:9" pos:end="269:9">if <condition pos:start="249:12" pos:end="249:28">(<expr pos:start="249:13" pos:end="249:27"><name pos:start="249:13" pos:end="249:27">initrd_filename</name></expr>)</condition> <block pos:start="249:30" pos:end="269:9">{<block_content pos:start="251:13" pos:end="267:13">

            <expr_stmt pos:start="251:13" pos:end="251:43"><expr pos:start="251:13" pos:end="251:42"><name pos:start="251:13" pos:end="251:23">initrd_base</name> <operator pos:start="251:25" pos:end="251:25">=</operator> <name pos:start="251:27" pos:end="251:42">INITRD_LOAD_ADDR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="255:70"><expr pos:start="253:13" pos:end="255:69"><name pos:start="253:13" pos:end="253:23">initrd_size</name> <operator pos:start="253:25" pos:end="253:25">=</operator> <call pos:start="253:27" pos:end="255:69"><name pos:start="253:27" pos:end="253:45">load_image_targphys</name><argument_list pos:start="253:46" pos:end="255:69">(<argument pos:start="253:47" pos:end="253:61"><expr pos:start="253:47" pos:end="253:61"><name pos:start="253:47" pos:end="253:61">initrd_filename</name></expr></argument>, <argument pos:start="253:64" pos:end="253:74"><expr pos:start="253:64" pos:end="253:74"><name pos:start="253:64" pos:end="253:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="255:47" pos:end="255:68"><expr pos:start="255:47" pos:end="255:68"><name pos:start="255:47" pos:end="255:54">ram_size</name> <operator pos:start="255:56" pos:end="255:56">-</operator> <name pos:start="255:58" pos:end="255:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="257:13" pos:end="267:13"><if pos:start="257:13" pos:end="267:13">if <condition pos:start="257:16" pos:end="257:32">(<expr pos:start="257:17" pos:end="257:31"><name pos:start="257:17" pos:end="257:27">initrd_size</name> <operator pos:start="257:29" pos:end="257:29">&lt;</operator> <literal type="number" pos:start="257:31" pos:end="257:31">0</literal></expr>)</condition> <block pos:start="257:34" pos:end="267:13">{<block_content pos:start="259:17" pos:end="265:24">

                <expr_stmt pos:start="259:17" pos:end="263:41"><expr pos:start="259:17" pos:end="263:40"><call pos:start="259:17" pos:end="263:40"><name pos:start="259:17" pos:end="259:23">fprintf</name><argument_list pos:start="259:24" pos:end="263:40">(<argument pos:start="259:25" pos:end="259:30"><expr pos:start="259:25" pos:end="259:30"><name pos:start="259:25" pos:end="259:30">stderr</name></expr></argument>,

                        <argument pos:start="261:25" pos:end="261:70"><expr pos:start="261:25" pos:end="261:70"><literal type="string" pos:start="261:25" pos:end="261:70">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                        <argument pos:start="263:25" pos:end="263:39"><expr pos:start="263:25" pos:end="263:39"><name pos:start="263:25" pos:end="263:39">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="265:17" pos:end="265:24"><expr pos:start="265:17" pos:end="265:23"><call pos:start="265:17" pos:end="265:23"><name pos:start="265:17" pos:end="265:20">exit</name><argument_list pos:start="265:21" pos:end="265:23">(<argument pos:start="265:22" pos:end="265:22"><expr pos:start="265:22" pos:end="265:22"><literal type="number" pos:start="265:22" pos:end="265:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="269:11" pos:end="275:9">else <block pos:start="269:16" pos:end="275:9">{<block_content pos:start="271:13" pos:end="273:28">

            <expr_stmt pos:start="271:13" pos:end="271:28"><expr pos:start="271:13" pos:end="271:27"><name pos:start="271:13" pos:end="271:23">initrd_base</name> <operator pos:start="271:25" pos:end="271:25">=</operator> <literal type="number" pos:start="271:27" pos:end="271:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:28"><expr pos:start="273:13" pos:end="273:27"><name pos:start="273:13" pos:end="273:23">initrd_size</name> <operator pos:start="273:25" pos:end="273:25">=</operator> <literal type="number" pos:start="273:27" pos:end="273:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="277:7" pos:end="290:0">else <block pos:start="277:12" pos:end="290:0">{<block_content pos:start="279:9" pos:end="285:24">

        <expr_stmt pos:start="279:9" pos:end="279:24"><expr pos:start="279:9" pos:end="279:23"><name pos:start="279:9" pos:end="279:19">kernel_base</name> <operator pos:start="279:21" pos:end="279:21">=</operator> <literal type="number" pos:start="279:23" pos:end="279:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:24"><expr pos:start="281:9" pos:end="281:23"><name pos:start="281:9" pos:end="281:19">kernel_size</name> <operator pos:start="281:21" pos:end="281:21">=</operator> <literal type="number" pos:start="281:23" pos:end="281:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="283:9" pos:end="283:24"><expr pos:start="283:9" pos:end="283:23"><name pos:start="283:9" pos:end="283:19">initrd_base</name> <operator pos:start="283:21" pos:end="283:21">=</operator> <literal type="number" pos:start="283:23" pos:end="283:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:24"><expr pos:start="285:9" pos:end="285:23"><name pos:start="285:9" pos:end="285:19">initrd_size</name> <operator pos:start="285:21" pos:end="285:21">=</operator> <literal type="number" pos:start="285:23" pos:end="285:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="289:1" pos:end="289:23">#<cpp:directive pos:start="289:2" pos:end="289:6">ifdef</cpp:directive> <name pos:start="289:8" pos:end="289:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="291:5" pos:end="294:0"><expr pos:start="291:5" pos:end="291:34"><call pos:start="291:5" pos:end="291:34"><name pos:start="291:5" pos:end="291:10">printf</name><argument_list pos:start="291:11" pos:end="291:34">(<argument pos:start="291:12" pos:end="291:23"><expr pos:start="291:12" pos:end="291:23"><literal type="string" pos:start="291:12" pos:end="291:23">"%s: Done\n"</literal></expr></argument>, <argument pos:start="291:26" pos:end="291:33"><expr pos:start="291:26" pos:end="291:33"><name pos:start="291:26" pos:end="291:33">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="293:1" pos:end="293:6">#<cpp:directive pos:start="293:2" pos:end="293:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
