<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11062.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">smacker_decode_bigtree</name><parameter_list pos:start="1:34" pos:end="3:45">(<parameter pos:start="1:35" pos:end="1:54"><decl pos:start="1:35" pos:end="1:54"><type pos:start="1:35" pos:end="1:54"><name pos:start="1:35" pos:end="1:50">BitstreamContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:54">bc</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:71"><decl pos:start="1:57" pos:end="1:71"><type pos:start="1:57" pos:end="1:71"><name pos:start="1:57" pos:end="1:67">HuffContext</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:71">hc</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:44"><decl pos:start="3:35" pos:end="3:44"><type pos:start="3:35" pos:end="3:44"><name pos:start="3:35" pos:end="3:39">DBCtx</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:44">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="83:1">{<block_content pos:start="7:5" pos:end="81:5">

    <if_stmt pos:start="7:5" pos:end="13:5"><if pos:start="7:5" pos:end="13:5">if <condition pos:start="7:8" pos:end="7:38">(<expr pos:start="7:9" pos:end="7:37"><name pos:start="7:9" pos:end="7:19"><name pos:start="7:9" pos:end="7:10">hc</name><operator pos:start="7:11" pos:end="7:12">-&gt;</operator><name pos:start="7:13" pos:end="7:19">current</name></name> <operator pos:start="7:21" pos:end="7:21">+</operator> <literal type="number" pos:start="7:23" pos:end="7:23">1</literal> <operator pos:start="7:25" pos:end="7:26">&gt;=</operator> <name pos:start="7:28" pos:end="7:37"><name pos:start="7:28" pos:end="7:29">hc</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:37">length</name></name></expr>)</condition> <block pos:start="7:40" pos:end="13:5">{<block_content pos:start="9:9" pos:end="11:35">

        <expr_stmt pos:start="9:9" pos:end="9:60"><expr pos:start="9:9" pos:end="9:59"><call pos:start="9:9" pos:end="9:59"><name pos:start="9:9" pos:end="9:14">av_log</name><argument_list pos:start="9:15" pos:end="9:59">(<argument pos:start="9:16" pos:end="9:19"><expr pos:start="9:16" pos:end="9:19"><name pos:start="9:16" pos:end="9:19">NULL</name></expr></argument>, <argument pos:start="9:22" pos:end="9:33"><expr pos:start="9:22" pos:end="9:33"><name pos:start="9:22" pos:end="9:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="9:36" pos:end="9:58"><expr pos:start="9:36" pos:end="9:58"><literal type="string" pos:start="9:36" pos:end="9:58">"Tree size exceeded!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="11:9" pos:end="11:35">return <expr pos:start="11:16" pos:end="11:34"><name pos:start="11:16" pos:end="11:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="15:5" pos:end="81:5"><if pos:start="15:5" pos:end="55:5">if <condition pos:start="15:8" pos:end="15:32">(<expr pos:start="15:9" pos:end="15:31"><operator pos:start="15:9" pos:end="15:9">!</operator><call pos:start="15:10" pos:end="15:31"><name pos:start="15:10" pos:end="15:27">bitstream_read_bit</name><argument_list pos:start="15:28" pos:end="15:31">(<argument pos:start="15:29" pos:end="15:30"><expr pos:start="15:29" pos:end="15:30"><name pos:start="15:29" pos:end="15:30">bc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:34" pos:end="55:5">{<block_content pos:start="17:9" pos:end="53:17"> <comment type="line" pos:start="15:36" pos:end="15:42">// Leaf</comment>

        <decl_stmt pos:start="17:9" pos:end="17:24"><decl pos:start="17:9" pos:end="17:15"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:15">val</name></decl>, <decl pos:start="17:18" pos:end="17:19"><type ref="prev" pos:start="17:9" pos:end="17:11"/><name pos:start="17:18" pos:end="17:19">i1</name></decl>, <decl pos:start="17:22" pos:end="17:23"><type ref="prev" pos:start="17:9" pos:end="17:11"/><name pos:start="17:22" pos:end="17:23">i2</name></decl>;</decl_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:90"><expr pos:start="19:9" pos:end="19:89"><name pos:start="19:9" pos:end="19:10">i1</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <ternary pos:start="19:14" pos:end="19:89"><condition pos:start="19:14" pos:end="19:29"><expr pos:start="19:14" pos:end="19:27"><name pos:start="19:14" pos:end="19:27"><name pos:start="19:14" pos:end="19:16">ctx</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:20">v1</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:27">table</name></name></expr> ?</condition><then pos:start="19:31" pos:end="19:85"> <expr pos:start="19:31" pos:end="19:85"><call pos:start="19:31" pos:end="19:85"><name pos:start="19:31" pos:end="19:48">bitstream_read_vlc</name><argument_list pos:start="19:49" pos:end="19:85">(<argument pos:start="19:50" pos:end="19:51"><expr pos:start="19:50" pos:end="19:51"><name pos:start="19:50" pos:end="19:51">bc</name></expr></argument>, <argument pos:start="19:54" pos:end="19:67"><expr pos:start="19:54" pos:end="19:67"><name pos:start="19:54" pos:end="19:67"><name pos:start="19:54" pos:end="19:56">ctx</name><operator pos:start="19:57" pos:end="19:58">-&gt;</operator><name pos:start="19:59" pos:end="19:60">v1</name><operator pos:start="19:61" pos:end="19:62">-&gt;</operator><name pos:start="19:63" pos:end="19:67">table</name></name></expr></argument>, <argument pos:start="19:70" pos:end="19:81"><expr pos:start="19:70" pos:end="19:81"><name pos:start="19:70" pos:end="19:81">SMKTREE_BITS</name></expr></argument>, <argument pos:start="19:84" pos:end="19:84"><expr pos:start="19:84" pos:end="19:84"><literal type="number" pos:start="19:84" pos:end="19:84">3</literal></expr></argument>)</argument_list></call></expr> </then><else pos:start="19:87" pos:end="19:89">: <expr pos:start="19:89" pos:end="19:89"><literal type="number" pos:start="19:89" pos:end="19:89">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:90"><expr pos:start="21:9" pos:end="21:89"><name pos:start="21:9" pos:end="21:10">i2</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <ternary pos:start="21:14" pos:end="21:89"><condition pos:start="21:14" pos:end="21:29"><expr pos:start="21:14" pos:end="21:27"><name pos:start="21:14" pos:end="21:27"><name pos:start="21:14" pos:end="21:16">ctx</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:20">v2</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:27">table</name></name></expr> ?</condition><then pos:start="21:31" pos:end="21:85"> <expr pos:start="21:31" pos:end="21:85"><call pos:start="21:31" pos:end="21:85"><name pos:start="21:31" pos:end="21:48">bitstream_read_vlc</name><argument_list pos:start="21:49" pos:end="21:85">(<argument pos:start="21:50" pos:end="21:51"><expr pos:start="21:50" pos:end="21:51"><name pos:start="21:50" pos:end="21:51">bc</name></expr></argument>, <argument pos:start="21:54" pos:end="21:67"><expr pos:start="21:54" pos:end="21:67"><name pos:start="21:54" pos:end="21:67"><name pos:start="21:54" pos:end="21:56">ctx</name><operator pos:start="21:57" pos:end="21:58">-&gt;</operator><name pos:start="21:59" pos:end="21:60">v2</name><operator pos:start="21:61" pos:end="21:62">-&gt;</operator><name pos:start="21:63" pos:end="21:67">table</name></name></expr></argument>, <argument pos:start="21:70" pos:end="21:81"><expr pos:start="21:70" pos:end="21:81"><name pos:start="21:70" pos:end="21:81">SMKTREE_BITS</name></expr></argument>, <argument pos:start="21:84" pos:end="21:84"><expr pos:start="21:84" pos:end="21:84"><literal type="number" pos:start="21:84" pos:end="21:84">3</literal></expr></argument>)</argument_list></call></expr> </then><else pos:start="21:87" pos:end="21:89">: <expr pos:start="21:89" pos:end="21:89"><literal type="number" pos:start="21:89" pos:end="21:89">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="25:39"><if pos:start="23:9" pos:end="25:39">if <condition pos:start="23:12" pos:end="23:29">(<expr pos:start="23:13" pos:end="23:28"><name pos:start="23:13" pos:end="23:14">i1</name> <operator pos:start="23:16" pos:end="23:16">&lt;</operator> <literal type="number" pos:start="23:18" pos:end="23:18">0</literal> <operator pos:start="23:20" pos:end="23:21">||</operator> <name pos:start="23:23" pos:end="23:24">i2</name> <operator pos:start="23:26" pos:end="23:26">&lt;</operator> <literal type="number" pos:start="23:28" pos:end="23:28">0</literal></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:39"><block_content pos:start="25:13" pos:end="25:39">

            <return pos:start="25:13" pos:end="25:39">return <expr pos:start="25:20" pos:end="25:38"><name pos:start="25:20" pos:end="25:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:57"><expr pos:start="27:9" pos:end="27:56"><name pos:start="27:9" pos:end="27:11">val</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <name pos:start="27:15" pos:end="27:30"><name pos:start="27:15" pos:end="27:17">ctx</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:26">recode1</name><index pos:start="27:27" pos:end="27:30">[<expr pos:start="27:28" pos:end="27:29"><name pos:start="27:28" pos:end="27:29">i1</name></expr>]</index></name> <operator pos:start="27:32" pos:end="27:32">|</operator> <operator pos:start="27:34" pos:end="27:34">(</operator><name pos:start="27:35" pos:end="27:50"><name pos:start="27:35" pos:end="27:37">ctx</name><operator pos:start="27:38" pos:end="27:39">-&gt;</operator><name pos:start="27:40" pos:end="27:46">recode2</name><index pos:start="27:47" pos:end="27:50">[<expr pos:start="27:48" pos:end="27:49"><name pos:start="27:48" pos:end="27:49">i2</name></expr>]</index></name> <operator pos:start="27:52" pos:end="27:53">&lt;&lt;</operator> <literal type="number" pos:start="27:55" pos:end="27:55">8</literal><operator pos:start="27:56" pos:end="27:56">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="47:9"><if pos:start="29:9" pos:end="35:9">if<condition pos:start="29:11" pos:end="29:34">(<expr pos:start="29:12" pos:end="29:33"><name pos:start="29:12" pos:end="29:14">val</name> <operator pos:start="29:16" pos:end="29:17">==</operator> <name pos:start="29:19" pos:end="29:33"><name pos:start="29:19" pos:end="29:21">ctx</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:30">escapes</name><index pos:start="29:31" pos:end="29:33">[<expr pos:start="29:32" pos:end="29:32"><literal type="number" pos:start="29:32" pos:end="29:32">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="29:36" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:20">

            <expr_stmt pos:start="31:13" pos:end="31:39"><expr pos:start="31:13" pos:end="31:38"><name pos:start="31:13" pos:end="31:24"><name pos:start="31:13" pos:end="31:15">ctx</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:21">last</name><index pos:start="31:22" pos:end="31:24">[<expr pos:start="31:23" pos:end="31:23"><literal type="number" pos:start="31:23" pos:end="31:23">0</literal></expr>]</index></name> <operator pos:start="31:26" pos:end="31:26">=</operator> <name pos:start="31:28" pos:end="31:38"><name pos:start="31:28" pos:end="31:29">hc</name><operator pos:start="31:30" pos:end="31:31">-&gt;</operator><name pos:start="31:32" pos:end="31:38">current</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:20"><expr pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:15">val</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <literal type="number" pos:start="33:19" pos:end="33:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="35:11" pos:end="41:9">else if<condition pos:start="35:18" pos:end="35:41">(<expr pos:start="35:19" pos:end="35:40"><name pos:start="35:19" pos:end="35:21">val</name> <operator pos:start="35:23" pos:end="35:24">==</operator> <name pos:start="35:26" pos:end="35:40"><name pos:start="35:26" pos:end="35:28">ctx</name><operator pos:start="35:29" pos:end="35:30">-&gt;</operator><name pos:start="35:31" pos:end="35:37">escapes</name><index pos:start="35:38" pos:end="35:40">[<expr pos:start="35:39" pos:end="35:39"><literal type="number" pos:start="35:39" pos:end="35:39">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="35:43" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:20">

            <expr_stmt pos:start="37:13" pos:end="37:39"><expr pos:start="37:13" pos:end="37:38"><name pos:start="37:13" pos:end="37:24"><name pos:start="37:13" pos:end="37:15">ctx</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:21">last</name><index pos:start="37:22" pos:end="37:24">[<expr pos:start="37:23" pos:end="37:23"><literal type="number" pos:start="37:23" pos:end="37:23">1</literal></expr>]</index></name> <operator pos:start="37:26" pos:end="37:26">=</operator> <name pos:start="37:28" pos:end="37:38"><name pos:start="37:28" pos:end="37:29">hc</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:38">current</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:20"><expr pos:start="39:13" pos:end="39:19"><name pos:start="39:13" pos:end="39:15">val</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <literal type="number" pos:start="39:19" pos:end="39:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="41:11" pos:end="47:9">else if<condition pos:start="41:18" pos:end="41:41">(<expr pos:start="41:19" pos:end="41:40"><name pos:start="41:19" pos:end="41:21">val</name> <operator pos:start="41:23" pos:end="41:24">==</operator> <name pos:start="41:26" pos:end="41:40"><name pos:start="41:26" pos:end="41:28">ctx</name><operator pos:start="41:29" pos:end="41:30">-&gt;</operator><name pos:start="41:31" pos:end="41:37">escapes</name><index pos:start="41:38" pos:end="41:40">[<expr pos:start="41:39" pos:end="41:39"><literal type="number" pos:start="41:39" pos:end="41:39">2</literal></expr>]</index></name></expr>)</condition> <block pos:start="41:43" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:20">

            <expr_stmt pos:start="43:13" pos:end="43:39"><expr pos:start="43:13" pos:end="43:38"><name pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:15">ctx</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:21">last</name><index pos:start="43:22" pos:end="43:24">[<expr pos:start="43:23" pos:end="43:23"><literal type="number" pos:start="43:23" pos:end="43:23">2</literal></expr>]</index></name> <operator pos:start="43:26" pos:end="43:26">=</operator> <name pos:start="43:28" pos:end="43:38"><name pos:start="43:28" pos:end="43:29">hc</name><operator pos:start="43:30" pos:end="43:31">-&gt;</operator><name pos:start="43:32" pos:end="43:38">current</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:20"><expr pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:15">val</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:40"><expr pos:start="51:9" pos:end="51:39"><name pos:start="51:9" pos:end="51:33"><name pos:start="51:9" pos:end="51:10">hc</name><operator pos:start="51:11" pos:end="51:12">-&gt;</operator><name pos:start="51:13" pos:end="51:18">values</name><index pos:start="51:19" pos:end="51:33">[<expr pos:start="51:20" pos:end="51:32"><name pos:start="51:20" pos:end="51:30"><name pos:start="51:20" pos:end="51:21">hc</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:30">current</name></name><operator pos:start="51:31" pos:end="51:32">++</operator></expr>]</index></name> <operator pos:start="51:35" pos:end="51:35">=</operator> <name pos:start="51:37" pos:end="51:39">val</name></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:17">return <expr pos:start="53:16" pos:end="53:16"><literal type="number" pos:start="53:16" pos:end="53:16">1</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="81:5">else <block pos:start="55:12" pos:end="81:5">{<block_content pos:start="57:9" pos:end="79:25"> <comment type="line" pos:start="55:14" pos:end="55:19">//Node</comment>

        <decl_stmt pos:start="57:9" pos:end="57:28"><decl pos:start="57:9" pos:end="57:17"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:13">r</name> <init pos:start="57:15" pos:end="57:17">= <expr pos:start="57:17" pos:end="57:17"><literal type="number" pos:start="57:17" pos:end="57:17">0</literal></expr></init></decl>, <decl pos:start="57:20" pos:end="57:24"><type ref="prev" pos:start="57:9" pos:end="57:11"/><name pos:start="57:20" pos:end="57:24">r_new</name></decl>, <decl pos:start="57:27" pos:end="57:27"><type ref="prev" pos:start="57:9" pos:end="57:11"/><name pos:start="57:27" pos:end="57:27">t</name></decl>;</decl_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:26"><expr pos:start="61:9" pos:end="61:25"><name pos:start="61:9" pos:end="61:9">t</name> <operator pos:start="61:11" pos:end="61:11">=</operator> <name pos:start="61:13" pos:end="61:23"><name pos:start="61:13" pos:end="61:14">hc</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:23">current</name></name><operator pos:start="61:24" pos:end="61:25">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:48"><expr pos:start="63:9" pos:end="63:47"><name pos:start="63:9" pos:end="63:9">r</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:47"><name pos:start="63:13" pos:end="63:34">smacker_decode_bigtree</name><argument_list pos:start="63:35" pos:end="63:47">(<argument pos:start="63:36" pos:end="63:37"><expr pos:start="63:36" pos:end="63:37"><name pos:start="63:36" pos:end="63:37">bc</name></expr></argument>, <argument pos:start="63:40" pos:end="63:41"><expr pos:start="63:40" pos:end="63:41"><name pos:start="63:40" pos:end="63:41">hc</name></expr></argument>, <argument pos:start="63:44" pos:end="63:46"><expr pos:start="63:44" pos:end="63:46"><name pos:start="63:44" pos:end="63:46">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="67:21"><if pos:start="65:9" pos:end="67:21">if<condition pos:start="65:11" pos:end="65:17">(<expr pos:start="65:12" pos:end="65:16"><name pos:start="65:12" pos:end="65:12">r</name> <operator pos:start="65:14" pos:end="65:14">&lt;</operator> <literal type="number" pos:start="65:16" pos:end="65:16">0</literal></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:21"><block_content pos:start="67:13" pos:end="67:21">

            <return pos:start="67:13" pos:end="67:21">return <expr pos:start="67:20" pos:end="67:20"><name pos:start="67:20" pos:end="67:20">r</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:37"><expr pos:start="69:9" pos:end="69:36"><name pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:10">hc</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:18">values</name><index pos:start="69:19" pos:end="69:21">[<expr pos:start="69:20" pos:end="69:20"><name pos:start="69:20" pos:end="69:20">t</name></expr>]</index></name> <operator pos:start="69:23" pos:end="69:23">=</operator> <name pos:start="69:25" pos:end="69:32">SMK_NODE</name> <operator pos:start="69:34" pos:end="69:34">|</operator> <name pos:start="69:36" pos:end="69:36">r</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:12"><expr pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:9">r</name><operator pos:start="71:10" pos:end="71:11">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:52"><expr pos:start="73:9" pos:end="73:51"><name pos:start="73:9" pos:end="73:13">r_new</name> <operator pos:start="73:15" pos:end="73:15">=</operator> <call pos:start="73:17" pos:end="73:51"><name pos:start="73:17" pos:end="73:38">smacker_decode_bigtree</name><argument_list pos:start="73:39" pos:end="73:51">(<argument pos:start="73:40" pos:end="73:41"><expr pos:start="73:40" pos:end="73:41"><name pos:start="73:40" pos:end="73:41">bc</name></expr></argument>, <argument pos:start="73:44" pos:end="73:45"><expr pos:start="73:44" pos:end="73:45"><name pos:start="73:44" pos:end="73:45">hc</name></expr></argument>, <argument pos:start="73:48" pos:end="73:50"><expr pos:start="73:48" pos:end="73:50"><name pos:start="73:48" pos:end="73:50">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="77:25"><if pos:start="75:9" pos:end="77:25">if <condition pos:start="75:12" pos:end="75:22">(<expr pos:start="75:13" pos:end="75:21"><name pos:start="75:13" pos:end="75:17">r_new</name> <operator pos:start="75:19" pos:end="75:19">&lt;</operator> <literal type="number" pos:start="75:21" pos:end="75:21">0</literal></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:25"><block_content pos:start="77:13" pos:end="77:25">

            <return pos:start="77:13" pos:end="77:25">return <expr pos:start="77:20" pos:end="77:24"><name pos:start="77:20" pos:end="77:24">r_new</name></expr>;</return></block_content></block></if></if_stmt>

        <return pos:start="79:9" pos:end="79:25">return <expr pos:start="79:16" pos:end="79:24"><name pos:start="79:16" pos:end="79:16">r</name> <operator pos:start="79:18" pos:end="79:18">+</operator> <name pos:start="79:20" pos:end="79:24">r_new</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
