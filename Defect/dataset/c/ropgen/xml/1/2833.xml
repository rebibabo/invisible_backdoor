<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2833.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_slice_thread_init</name><parameter_list pos:start="1:25" pos:end="1:47">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:41"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="131:1">{<block_content pos:start="5:5" pos:end="129:13">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">SliceThreadContext</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:25">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="14:0"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:20">thread_count</name> <init pos:start="9:22" pos:end="9:42">= <expr pos:start="9:24" pos:end="9:42"><name pos:start="9:24" pos:end="9:42"><name pos:start="9:24" pos:end="9:28">avctx</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:42">thread_count</name></name></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="13:1" pos:end="13:19">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:19">HAVE_W32THREADS</name></expr></cpp:if>

    <expr_stmt pos:start="15:5" pos:end="18:0"><expr pos:start="15:5" pos:end="15:20"><call pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:18">w32thread_init</name><argument_list pos:start="15:19" pos:end="15:20">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>



    <comment type="line" pos:start="21:5" pos:end="21:78">// We cannot do this in the encoder init as the threads are created before</comment>

    <if_stmt pos:start="23:5" pos:end="29:47"><if pos:start="23:5" pos:end="29:47">if <condition pos:start="23:8" pos:end="27:29">(<expr pos:start="23:9" pos:end="27:28"><call pos:start="23:9" pos:end="23:41"><name pos:start="23:9" pos:end="23:27">av_codec_is_encoder</name><argument_list pos:start="23:28" pos:end="23:41">(<argument pos:start="23:29" pos:end="23:40"><expr pos:start="23:29" pos:end="23:40"><name pos:start="23:29" pos:end="23:40"><name pos:start="23:29" pos:end="23:33">avctx</name><operator pos:start="23:34" pos:end="23:35">-&gt;</operator><name pos:start="23:36" pos:end="23:40">codec</name></name></expr></argument>)</argument_list></call> <operator pos:start="23:43" pos:end="23:44">&amp;&amp;</operator>

        <name pos:start="25:9" pos:end="25:23"><name pos:start="25:9" pos:end="25:13">avctx</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:23">codec_id</name></name> <operator pos:start="25:25" pos:end="25:26">==</operator> <name pos:start="25:28" pos:end="25:49">AV_CODEC_ID_MPEG1VIDEO</name> <operator pos:start="25:51" pos:end="25:52">&amp;&amp;</operator>

        <name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:13">avctx</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:21">height</name></name> <operator pos:start="27:23" pos:end="27:23">&gt;</operator> <literal type="number" pos:start="27:25" pos:end="27:28">2800</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:47"><block_content pos:start="29:9" pos:end="29:47">

        <expr_stmt pos:start="29:9" pos:end="29:47"><expr pos:start="29:9" pos:end="29:46"><name pos:start="29:9" pos:end="29:20">thread_count</name> <operator pos:start="29:22" pos:end="29:22">=</operator> <name pos:start="29:24" pos:end="29:42"><name pos:start="29:24" pos:end="29:28">avctx</name><operator pos:start="29:29" pos:end="29:30">-&gt;</operator><name pos:start="29:31" pos:end="29:42">thread_count</name></name> <operator pos:start="29:44" pos:end="29:44">=</operator> <literal type="number" pos:start="29:46" pos:end="29:46">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="51:5"><if pos:start="33:5" pos:end="51:5">if <condition pos:start="33:8" pos:end="33:22">(<expr pos:start="33:9" pos:end="33:21"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:21">thread_count</name></expr>)</condition> <block pos:start="33:24" pos:end="51:5">{<block_content pos:start="35:9" pos:end="49:51">

        <decl_stmt pos:start="35:9" pos:end="35:37"><decl pos:start="35:9" pos:end="35:36"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:19">nb_cpus</name> <init pos:start="35:21" pos:end="35:36">= <expr pos:start="35:23" pos:end="35:36"><call pos:start="35:23" pos:end="35:36"><name pos:start="35:23" pos:end="35:34">av_cpu_count</name><argument_list pos:start="35:35" pos:end="35:36">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="37:9" pos:end="39:60"><if pos:start="37:9" pos:end="39:60">if  <condition pos:start="37:13" pos:end="37:27">(<expr pos:start="37:14" pos:end="37:26"><name pos:start="37:14" pos:end="37:26"><name pos:start="37:14" pos:end="37:18">avctx</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:26">height</name></name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:60"><block_content pos:start="39:13" pos:end="39:60">

            <expr_stmt pos:start="39:13" pos:end="39:60"><expr pos:start="39:13" pos:end="39:59"><name pos:start="39:13" pos:end="39:19">nb_cpus</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <call pos:start="39:23" pos:end="39:59"><name pos:start="39:23" pos:end="39:27">FFMIN</name><argument_list pos:start="39:28" pos:end="39:59">(<argument pos:start="39:29" pos:end="39:35"><expr pos:start="39:29" pos:end="39:35"><name pos:start="39:29" pos:end="39:35">nb_cpus</name></expr></argument>, <argument pos:start="39:38" pos:end="39:58"><expr pos:start="39:38" pos:end="39:58"><operator pos:start="39:38" pos:end="39:38">(</operator><name pos:start="39:39" pos:end="39:51"><name pos:start="39:39" pos:end="39:43">avctx</name><operator pos:start="39:44" pos:end="39:45">-&gt;</operator><name pos:start="39:46" pos:end="39:51">height</name></name><operator pos:start="39:52" pos:end="39:52">+</operator><literal type="number" pos:start="39:53" pos:end="39:54">15</literal><operator pos:start="39:55" pos:end="39:55">)</operator><operator pos:start="39:56" pos:end="39:56">/</operator><literal type="number" pos:start="39:57" pos:end="39:58">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line" pos:start="41:9" pos:end="41:76">// use number of cores + 1 as thread count if there is more than one</comment>

        <if_stmt pos:start="43:9" pos:end="49:51"><if pos:start="43:9" pos:end="45:86">if <condition pos:start="43:12" pos:end="43:24">(<expr pos:start="43:13" pos:end="43:23"><name pos:start="43:13" pos:end="43:19">nb_cpus</name> <operator pos:start="43:21" pos:end="43:21">&gt;</operator> <literal type="number" pos:start="43:23" pos:end="43:23">1</literal></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:86"><block_content pos:start="45:13" pos:end="45:86">

            <expr_stmt pos:start="45:13" pos:end="45:86"><expr pos:start="45:13" pos:end="45:85"><name pos:start="45:13" pos:end="45:24">thread_count</name> <operator pos:start="45:26" pos:end="45:26">=</operator> <name pos:start="45:28" pos:end="45:46"><name pos:start="45:28" pos:end="45:32">avctx</name><operator pos:start="45:33" pos:end="45:34">-&gt;</operator><name pos:start="45:35" pos:end="45:46">thread_count</name></name> <operator pos:start="45:48" pos:end="45:48">=</operator> <call pos:start="45:50" pos:end="45:85"><name pos:start="45:50" pos:end="45:54">FFMIN</name><argument_list pos:start="45:55" pos:end="45:85">(<argument pos:start="45:56" pos:end="45:66"><expr pos:start="45:56" pos:end="45:66"><name pos:start="45:56" pos:end="45:62">nb_cpus</name> <operator pos:start="45:64" pos:end="45:64">+</operator> <literal type="number" pos:start="45:66" pos:end="45:66">1</literal></expr></argument>, <argument pos:start="45:69" pos:end="45:84"><expr pos:start="45:69" pos:end="45:84"><name pos:start="45:69" pos:end="45:84">MAX_AUTO_THREADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="47:9" pos:end="49:51">else<block type="pseudo" pos:start="49:13" pos:end="49:51"><block_content pos:start="49:13" pos:end="49:51">

            <expr_stmt pos:start="49:13" pos:end="49:51"><expr pos:start="49:13" pos:end="49:50"><name pos:start="49:13" pos:end="49:24">thread_count</name> <operator pos:start="49:26" pos:end="49:26">=</operator> <name pos:start="49:28" pos:end="49:46"><name pos:start="49:28" pos:end="49:32">avctx</name><operator pos:start="49:33" pos:end="49:34">-&gt;</operator><name pos:start="49:35" pos:end="49:46">thread_count</name></name> <operator pos:start="49:48" pos:end="49:48">=</operator> <literal type="number" pos:start="49:50" pos:end="49:50">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:26">(<expr pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:20">thread_count</name> <operator pos:start="55:22" pos:end="55:23">&lt;=</operator> <literal type="number" pos:start="55:25" pos:end="55:25">1</literal></expr>)</condition> <block pos:start="55:28" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:17">

        <expr_stmt pos:start="57:9" pos:end="57:38"><expr pos:start="57:9" pos:end="57:37"><name pos:start="57:9" pos:end="57:33"><name pos:start="57:9" pos:end="57:13">avctx</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:33">active_thread_type</name></name> <operator pos:start="57:35" pos:end="57:35">=</operator> <literal type="number" pos:start="57:37" pos:end="57:37">0</literal></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:17">return <expr pos:start="59:16" pos:end="59:16"><literal type="number" pos:start="59:16" pos:end="59:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:47"><expr pos:start="65:5" pos:end="65:46"><name pos:start="65:5" pos:end="65:5">c</name> <operator pos:start="65:7" pos:end="65:7">=</operator> <call pos:start="65:9" pos:end="65:46"><name pos:start="65:9" pos:end="65:18">av_mallocz</name><argument_list pos:start="65:19" pos:end="65:46">(<argument pos:start="65:20" pos:end="65:45"><expr pos:start="65:20" pos:end="65:45"><sizeof pos:start="65:20" pos:end="65:45">sizeof<argument_list pos:start="65:26" pos:end="65:45">(<argument pos:start="65:27" pos:end="65:44"><expr pos:start="65:27" pos:end="65:44"><name pos:start="65:27" pos:end="65:44">SliceThreadContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="69:18"><if pos:start="67:5" pos:end="69:18">if <condition pos:start="67:8" pos:end="67:11">(<expr pos:start="67:9" pos:end="67:10"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:10">c</name></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:18"><block_content pos:start="69:9" pos:end="69:18">

        <return pos:start="69:9" pos:end="69:18">return <expr pos:start="69:16" pos:end="69:17"><operator pos:start="69:16" pos:end="69:16">-</operator><literal type="number" pos:start="69:17" pos:end="69:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:67"><expr pos:start="73:5" pos:end="73:66"><name pos:start="73:5" pos:end="73:14"><name pos:start="73:5" pos:end="73:5">c</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:14">workers</name></name> <operator pos:start="73:16" pos:end="73:16">=</operator> <call pos:start="73:18" pos:end="73:66"><name pos:start="73:18" pos:end="73:33">av_mallocz_array</name><argument_list pos:start="73:34" pos:end="73:66">(<argument pos:start="73:35" pos:end="73:46"><expr pos:start="73:35" pos:end="73:46"><name pos:start="73:35" pos:end="73:46">thread_count</name></expr></argument>, <argument pos:start="73:49" pos:end="73:65"><expr pos:start="73:49" pos:end="73:65"><sizeof pos:start="73:49" pos:end="73:65">sizeof<argument_list pos:start="73:55" pos:end="73:65">(<argument pos:start="73:56" pos:end="73:64"><expr pos:start="73:56" pos:end="73:64"><name pos:start="73:56" pos:end="73:64">pthread_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:20">(<expr pos:start="75:9" pos:end="75:19"><operator pos:start="75:9" pos:end="75:9">!</operator><name pos:start="75:10" pos:end="75:19"><name pos:start="75:10" pos:end="75:10">c</name><operator pos:start="75:11" pos:end="75:12">-&gt;</operator><name pos:start="75:13" pos:end="75:19">workers</name></name></expr>)</condition> <block pos:start="75:22" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:18">

        <expr_stmt pos:start="77:9" pos:end="77:19"><expr pos:start="77:9" pos:end="77:18"><call pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:15">av_free</name><argument_list pos:start="77:16" pos:end="77:18">(<argument pos:start="77:17" pos:end="77:17"><expr pos:start="77:17" pos:end="77:17"><name pos:start="77:17" pos:end="77:17">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:18">return <expr pos:start="79:16" pos:end="79:17"><operator pos:start="79:16" pos:end="79:16">-</operator><literal type="number" pos:start="79:17" pos:end="79:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:36"><expr pos:start="85:5" pos:end="85:35"><name pos:start="85:5" pos:end="85:31"><name pos:start="85:5" pos:end="85:9">avctx</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:19">internal</name><operator pos:start="85:20" pos:end="85:21">-&gt;</operator><name pos:start="85:22" pos:end="85:31">thread_ctx</name></name> <operator pos:start="85:33" pos:end="85:33">=</operator> <name pos:start="85:35" pos:end="85:35">c</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:23"><expr pos:start="87:5" pos:end="87:22"><name pos:start="87:5" pos:end="87:18"><name pos:start="87:5" pos:end="87:5">c</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:18">current_job</name></name> <operator pos:start="87:20" pos:end="87:20">=</operator> <literal type="number" pos:start="87:22" pos:end="87:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:21"><expr pos:start="89:5" pos:end="89:20"><name pos:start="89:5" pos:end="89:16"><name pos:start="89:5" pos:end="89:5">c</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:16">job_count</name></name> <operator pos:start="89:18" pos:end="89:18">=</operator> <literal type="number" pos:start="89:20" pos:end="89:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:20"><expr pos:start="91:5" pos:end="91:19"><name pos:start="91:5" pos:end="91:15"><name pos:start="91:5" pos:end="91:5">c</name><operator pos:start="91:6" pos:end="91:7">-&gt;</operator><name pos:start="91:8" pos:end="91:15">job_size</name></name> <operator pos:start="91:17" pos:end="91:17">=</operator> <literal type="number" pos:start="91:19" pos:end="91:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:16"><expr pos:start="93:5" pos:end="93:15"><name pos:start="93:5" pos:end="93:11"><name pos:start="93:5" pos:end="93:5">c</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:11">done</name></name> <operator pos:start="93:13" pos:end="93:13">=</operator> <literal type="number" pos:start="93:15" pos:end="93:15">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:50"><expr pos:start="95:5" pos:end="95:49"><call pos:start="95:5" pos:end="95:49"><name pos:start="95:5" pos:end="95:21">pthread_cond_init</name><argument_list pos:start="95:22" pos:end="95:49">(<argument pos:start="95:23" pos:end="95:42"><expr pos:start="95:23" pos:end="95:42"><operator pos:start="95:23" pos:end="95:23">&amp;</operator><name pos:start="95:24" pos:end="95:42"><name pos:start="95:24" pos:end="95:24">c</name><operator pos:start="95:25" pos:end="95:26">-&gt;</operator><name pos:start="95:27" pos:end="95:42">current_job_cond</name></name></expr></argument>, <argument pos:start="95:45" pos:end="95:48"><expr pos:start="95:45" pos:end="95:48"><name pos:start="95:45" pos:end="95:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:47"><expr pos:start="97:5" pos:end="97:46"><call pos:start="97:5" pos:end="97:46"><name pos:start="97:5" pos:end="97:21">pthread_cond_init</name><argument_list pos:start="97:22" pos:end="97:46">(<argument pos:start="97:23" pos:end="97:39"><expr pos:start="97:23" pos:end="97:39"><operator pos:start="97:23" pos:end="97:23">&amp;</operator><name pos:start="97:24" pos:end="97:39"><name pos:start="97:24" pos:end="97:24">c</name><operator pos:start="97:25" pos:end="97:26">-&gt;</operator><name pos:start="97:27" pos:end="97:39">last_job_cond</name></name></expr></argument>, <argument pos:start="97:42" pos:end="97:45"><expr pos:start="97:42" pos:end="97:45"><name pos:start="97:42" pos:end="97:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:51"><expr pos:start="99:5" pos:end="99:50"><call pos:start="99:5" pos:end="99:50"><name pos:start="99:5" pos:end="99:22">pthread_mutex_init</name><argument_list pos:start="99:23" pos:end="99:50">(<argument pos:start="99:24" pos:end="99:43"><expr pos:start="99:24" pos:end="99:43"><operator pos:start="99:24" pos:end="99:24">&amp;</operator><name pos:start="99:25" pos:end="99:43"><name pos:start="99:25" pos:end="99:25">c</name><operator pos:start="99:26" pos:end="99:27">-&gt;</operator><name pos:start="99:28" pos:end="99:43">current_job_lock</name></name></expr></argument>, <argument pos:start="99:46" pos:end="99:49"><expr pos:start="99:46" pos:end="99:49"><name pos:start="99:46" pos:end="99:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:45"><expr pos:start="101:5" pos:end="101:44"><call pos:start="101:5" pos:end="101:44"><name pos:start="101:5" pos:end="101:22">pthread_mutex_lock</name><argument_list pos:start="101:23" pos:end="101:44">(<argument pos:start="101:24" pos:end="101:43"><expr pos:start="101:24" pos:end="101:43"><operator pos:start="101:24" pos:end="101:24">&amp;</operator><name pos:start="101:25" pos:end="101:43"><name pos:start="101:25" pos:end="101:25">c</name><operator pos:start="101:26" pos:end="101:27">-&gt;</operator><name pos:start="101:28" pos:end="101:43">current_job_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="103:5" pos:end="117:5">for <control pos:start="103:9" pos:end="103:34">(<init pos:start="103:10" pos:end="103:13"><expr pos:start="103:10" pos:end="103:12"><name pos:start="103:10" pos:end="103:10">i</name><operator pos:start="103:11" pos:end="103:11">=</operator><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</init> <condition pos:start="103:15" pos:end="103:29"><expr pos:start="103:15" pos:end="103:28"><name pos:start="103:15" pos:end="103:15">i</name><operator pos:start="103:16" pos:end="103:16">&lt;</operator><name pos:start="103:17" pos:end="103:28">thread_count</name></expr>;</condition> <incr pos:start="103:31" pos:end="103:33"><expr pos:start="103:31" pos:end="103:33"><name pos:start="103:31" pos:end="103:31">i</name><operator pos:start="103:32" pos:end="103:33">++</operator></expr></incr>)</control> <block pos:start="103:36" pos:end="117:5">{<block_content pos:start="105:9" pos:end="115:9">

        <if_stmt pos:start="105:9" pos:end="115:9"><if pos:start="105:9" pos:end="115:9">if<condition pos:start="105:11" pos:end="105:63">(<expr pos:start="105:12" pos:end="105:62"><call pos:start="105:12" pos:end="105:62"><name pos:start="105:12" pos:end="105:25">pthread_create</name><argument_list pos:start="105:26" pos:end="105:62">(<argument pos:start="105:27" pos:end="105:40"><expr pos:start="105:27" pos:end="105:40"><operator pos:start="105:27" pos:end="105:27">&amp;</operator><name pos:start="105:28" pos:end="105:40"><name pos:start="105:28" pos:end="105:28">c</name><operator pos:start="105:29" pos:end="105:30">-&gt;</operator><name pos:start="105:31" pos:end="105:37">workers</name><index pos:start="105:38" pos:end="105:40">[<expr pos:start="105:39" pos:end="105:39"><name pos:start="105:39" pos:end="105:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="105:43" pos:end="105:46"><expr pos:start="105:43" pos:end="105:46"><name pos:start="105:43" pos:end="105:46">NULL</name></expr></argument>, <argument pos:start="105:49" pos:end="105:54"><expr pos:start="105:49" pos:end="105:54"><name pos:start="105:49" pos:end="105:54">worker</name></expr></argument>, <argument pos:start="105:57" pos:end="105:61"><expr pos:start="105:57" pos:end="105:61"><name pos:start="105:57" pos:end="105:61">avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:65" pos:end="115:9">{<block_content pos:start="107:12" pos:end="113:21">

           <expr_stmt pos:start="107:12" pos:end="107:35"><expr pos:start="107:12" pos:end="107:34"><name pos:start="107:12" pos:end="107:30"><name pos:start="107:12" pos:end="107:16">avctx</name><operator pos:start="107:17" pos:end="107:18">-&gt;</operator><name pos:start="107:19" pos:end="107:30">thread_count</name></name> <operator pos:start="107:32" pos:end="107:32">=</operator> <name pos:start="107:34" pos:end="107:34">i</name></expr>;</expr_stmt>

           <expr_stmt pos:start="109:12" pos:end="109:54"><expr pos:start="109:12" pos:end="109:53"><call pos:start="109:12" pos:end="109:53"><name pos:start="109:12" pos:end="109:31">pthread_mutex_unlock</name><argument_list pos:start="109:32" pos:end="109:53">(<argument pos:start="109:33" pos:end="109:52"><expr pos:start="109:33" pos:end="109:52"><operator pos:start="109:33" pos:end="109:33">&amp;</operator><name pos:start="109:34" pos:end="109:52"><name pos:start="109:34" pos:end="109:34">c</name><operator pos:start="109:35" pos:end="109:36">-&gt;</operator><name pos:start="109:37" pos:end="109:52">current_job_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="111:12" pos:end="111:33"><expr pos:start="111:12" pos:end="111:32"><call pos:start="111:12" pos:end="111:32"><name pos:start="111:12" pos:end="111:25">ff_thread_free</name><argument_list pos:start="111:26" pos:end="111:32">(<argument pos:start="111:27" pos:end="111:31"><expr pos:start="111:27" pos:end="111:31"><name pos:start="111:27" pos:end="111:31">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="113:12" pos:end="113:21">return <expr pos:start="113:19" pos:end="113:20"><operator pos:start="113:19" pos:end="113:19">-</operator><literal type="number" pos:start="113:20" pos:end="113:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="121:5" pos:end="121:41"><expr pos:start="121:5" pos:end="121:40"><call pos:start="121:5" pos:end="121:40"><name pos:start="121:5" pos:end="121:23">thread_park_workers</name><argument_list pos:start="121:24" pos:end="121:40">(<argument pos:start="121:25" pos:end="121:25"><expr pos:start="121:25" pos:end="121:25"><name pos:start="121:25" pos:end="121:25">c</name></expr></argument>, <argument pos:start="121:28" pos:end="121:39"><expr pos:start="121:28" pos:end="121:39"><name pos:start="121:28" pos:end="121:39">thread_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:36"><expr pos:start="125:5" pos:end="125:35"><name pos:start="125:5" pos:end="125:18"><name pos:start="125:5" pos:end="125:9">avctx</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:18">execute</name></name> <operator pos:start="125:20" pos:end="125:20">=</operator> <name pos:start="125:22" pos:end="125:35">thread_execute</name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:38"><expr pos:start="127:5" pos:end="127:37"><name pos:start="127:5" pos:end="127:19"><name pos:start="127:5" pos:end="127:9">avctx</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:19">execute2</name></name> <operator pos:start="127:21" pos:end="127:21">=</operator> <name pos:start="127:23" pos:end="127:37">thread_execute2</name></expr>;</expr_stmt>

    <return pos:start="129:5" pos:end="129:13">return <expr pos:start="129:12" pos:end="129:12"><literal type="number" pos:start="129:12" pos:end="129:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
