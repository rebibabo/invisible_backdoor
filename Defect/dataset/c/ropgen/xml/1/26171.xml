<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26171.c" pos:tabs="8"><function pos:start="1:1" pos:end="287:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">img_check</name><parameter_list pos:start="1:21" pos:end="1:43">(<parameter pos:start="1:22" pos:end="1:29"><decl pos:start="1:22" pos:end="1:29"><type pos:start="1:22" pos:end="1:29"><name pos:start="1:22" pos:end="1:24">int</name></type> <name pos:start="1:26" pos:end="1:29">argc</name></decl></parameter>, <parameter pos:start="1:32" pos:end="1:42"><decl pos:start="1:32" pos:end="1:42"><type pos:start="1:32" pos:end="1:42"><name pos:start="1:32" pos:end="1:35">char</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier><modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="287:1">{<block_content pos:start="5:5" pos:end="285:15">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">c</name></decl>, <decl pos:start="5:12" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">OutputFormat</name></type> <name pos:start="7:18" pos:end="7:30">output_format</name> <init pos:start="7:32" pos:end="7:46">= <expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">OFORMAT_HUMAN</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:48"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:24">filename</name></decl>, <decl pos:start="9:27" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:27" pos:end="9:27">*</modifier></type><name pos:start="9:28" pos:end="9:30">fmt</name></decl>, <decl pos:start="9:33" pos:end="9:39"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:33" pos:end="9:33">*</modifier></type><name pos:start="9:34" pos:end="9:39">output</name></decl>, <decl pos:start="9:42" pos:end="9:47"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:42" pos:end="9:42">*</modifier></type><name pos:start="9:43" pos:end="9:47">cache</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">BlockBackend</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">BlockDriverState</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">fix</name> <init pos:start="15:13" pos:end="15:15">= <expr pos:start="15:15" pos:end="15:15"><literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:44"><decl pos:start="17:5" pos:end="17:43"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">flags</name> <init pos:start="17:15" pos:end="17:43">= <expr pos:start="17:17" pos:end="17:43"><name pos:start="17:17" pos:end="17:28">BDRV_O_FLAGS</name> <operator pos:start="17:30" pos:end="17:30">|</operator> <name pos:start="17:32" pos:end="17:43">BDRV_O_CHECK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:14">ImageCheck</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:21">check</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:14">quiet</name> <init pos:start="21:16" pos:end="21:22">= <expr pos:start="21:18" pos:end="21:22"><name pos:start="21:18" pos:end="21:22">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:15"><expr pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:7">fmt</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <name pos:start="25:11" pos:end="25:14">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:18"><expr pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:10">output</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <name pos:start="27:14" pos:end="27:17">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:9">cache</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <name pos:start="29:13" pos:end="29:30">BDRV_DEFAULT_CACHE</name></expr>;</expr_stmt>

    <for pos:start="31:5" pos:end="119:5">for<control pos:start="31:8" pos:end="31:11">(<init pos:start="31:9" pos:end="31:9">;</init><condition pos:start="31:10" pos:end="31:10">;</condition><incr/>)</control> <block pos:start="31:13" pos:end="119:5">{<block_content pos:start="33:9" pos:end="117:9">

        <decl_stmt pos:start="33:9" pos:end="33:29"><decl pos:start="33:9" pos:end="33:28"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:24">option_index</name> <init pos:start="33:26" pos:end="33:28">= <expr pos:start="33:28" pos:end="33:28"><literal type="number" pos:start="33:28" pos:end="33:28">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="47:10"><decl pos:start="35:9" pos:end="47:9"><type pos:start="35:9" pos:end="35:34"><specifier pos:start="35:9" pos:end="35:14">static</specifier> <specifier pos:start="35:16" pos:end="35:20">const</specifier> <name pos:start="35:22" pos:end="35:34"><name pos:start="35:22" pos:end="35:27">struct</name> <name pos:start="35:29" pos:end="35:34">option</name></name></type> <name pos:start="35:36" pos:end="35:49"><name pos:start="35:36" pos:end="35:47">long_options</name><index pos:start="35:48" pos:end="35:49">[]</index></name> <init pos:start="35:51" pos:end="47:9">= <expr pos:start="35:53" pos:end="47:9"><block pos:start="35:53" pos:end="47:9">{

            <expr pos:start="37:13" pos:end="37:41"><block pos:start="37:13" pos:end="37:41">{<expr pos:start="37:14" pos:end="37:19"><literal type="string" pos:start="37:14" pos:end="37:19">"help"</literal></expr>, <expr pos:start="37:22" pos:end="37:32"><name pos:start="37:22" pos:end="37:32">no_argument</name></expr>, <expr pos:start="37:35" pos:end="37:35"><literal type="number" pos:start="37:35" pos:end="37:35">0</literal></expr>, <expr pos:start="37:38" pos:end="37:40"><literal type="char" pos:start="37:38" pos:end="37:40">'h'</literal></expr>}</block></expr>,

            <expr pos:start="39:13" pos:end="39:49"><block pos:start="39:13" pos:end="39:49">{<expr pos:start="39:14" pos:end="39:21"><literal type="string" pos:start="39:14" pos:end="39:21">"format"</literal></expr>, <expr pos:start="39:24" pos:end="39:40"><name pos:start="39:24" pos:end="39:40">required_argument</name></expr>, <expr pos:start="39:43" pos:end="39:43"><literal type="number" pos:start="39:43" pos:end="39:43">0</literal></expr>, <expr pos:start="39:46" pos:end="39:48"><literal type="char" pos:start="39:46" pos:end="39:48">'f'</literal></expr>}</block></expr>,

            <expr pos:start="41:13" pos:end="41:49"><block pos:start="41:13" pos:end="41:49">{<expr pos:start="41:14" pos:end="41:21"><literal type="string" pos:start="41:14" pos:end="41:21">"repair"</literal></expr>, <expr pos:start="41:24" pos:end="41:40"><name pos:start="41:24" pos:end="41:40">required_argument</name></expr>, <expr pos:start="41:43" pos:end="41:43"><literal type="number" pos:start="41:43" pos:end="41:43">0</literal></expr>, <expr pos:start="41:46" pos:end="41:48"><literal type="char" pos:start="41:46" pos:end="41:48">'r'</literal></expr>}</block></expr>,

            <expr pos:start="43:13" pos:end="43:59"><block pos:start="43:13" pos:end="43:59">{<expr pos:start="43:14" pos:end="43:21"><literal type="string" pos:start="43:14" pos:end="43:21">"output"</literal></expr>, <expr pos:start="43:24" pos:end="43:40"><name pos:start="43:24" pos:end="43:40">required_argument</name></expr>, <expr pos:start="43:43" pos:end="43:43"><literal type="number" pos:start="43:43" pos:end="43:43">0</literal></expr>, <expr pos:start="43:46" pos:end="43:58"><name pos:start="43:46" pos:end="43:58">OPTION_OUTPUT</name></expr>}</block></expr>,

            <expr pos:start="45:13" pos:end="45:24"><block pos:start="45:13" pos:end="45:24">{<expr pos:start="45:14" pos:end="45:14"><literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>, <expr pos:start="45:17" pos:end="45:17"><literal type="number" pos:start="45:17" pos:end="45:17">0</literal></expr>, <expr pos:start="45:20" pos:end="45:20"><literal type="number" pos:start="45:20" pos:end="45:20">0</literal></expr>, <expr pos:start="45:23" pos:end="45:23"><literal type="number" pos:start="45:23" pos:end="45:23">0</literal></expr>}</block></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="49:9" pos:end="51:53"><expr pos:start="49:9" pos:end="51:52"><name pos:start="49:9" pos:end="49:9">c</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <call pos:start="49:13" pos:end="51:52"><name pos:start="49:13" pos:end="49:23">getopt_long</name><argument_list pos:start="49:24" pos:end="51:52">(<argument pos:start="49:25" pos:end="49:28"><expr pos:start="49:25" pos:end="49:28"><name pos:start="49:25" pos:end="49:28">argc</name></expr></argument>, <argument pos:start="49:31" pos:end="49:34"><expr pos:start="49:31" pos:end="49:34"><name pos:start="49:31" pos:end="49:34">argv</name></expr></argument>, <argument pos:start="49:37" pos:end="49:46"><expr pos:start="49:37" pos:end="49:46"><literal type="string" pos:start="49:37" pos:end="49:46">"hf:r:T:q"</literal></expr></argument>,

                        <argument pos:start="51:25" pos:end="51:36"><expr pos:start="51:25" pos:end="51:36"><name pos:start="51:25" pos:end="51:36">long_options</name></expr></argument>, <argument pos:start="51:39" pos:end="51:51"><expr pos:start="51:39" pos:end="51:51"><operator pos:start="51:39" pos:end="51:39">&amp;</operator><name pos:start="51:40" pos:end="51:51">option_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:20">(<expr pos:start="53:13" pos:end="53:19"><name pos:start="53:13" pos:end="53:13">c</name> <operator pos:start="53:15" pos:end="53:16">==</operator> <operator pos:start="53:18" pos:end="53:18">-</operator><literal type="number" pos:start="53:19" pos:end="53:19">1</literal></expr>)</condition> <block pos:start="53:22" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:18">

            <break pos:start="55:13" pos:end="55:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="59:9" pos:end="117:9">switch<condition pos:start="59:15" pos:end="59:17">(<expr pos:start="59:16" pos:end="59:16"><name pos:start="59:16" pos:end="59:16">c</name></expr>)</condition> <block pos:start="59:19" pos:end="117:9">{<block_content pos:start="61:9" pos:end="115:18">

        <case pos:start="61:9" pos:end="61:17">case <expr pos:start="61:14" pos:end="61:16"><literal type="char" pos:start="61:14" pos:end="61:16">'?'</literal></expr>:</case>

        <case pos:start="63:9" pos:end="63:17">case <expr pos:start="63:14" pos:end="63:16"><literal type="char" pos:start="63:14" pos:end="63:16">'h'</literal></expr>:</case>

            <expr_stmt pos:start="65:13" pos:end="65:19"><expr pos:start="65:13" pos:end="65:18"><call pos:start="65:13" pos:end="65:18"><name pos:start="65:13" pos:end="65:16">help</name><argument_list pos:start="65:17" pos:end="65:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        <case pos:start="69:9" pos:end="69:17">case <expr pos:start="69:14" pos:end="69:16"><literal type="char" pos:start="69:14" pos:end="69:16">'f'</literal></expr>:</case>

            <expr_stmt pos:start="71:13" pos:end="71:25"><expr pos:start="71:13" pos:end="71:24"><name pos:start="71:13" pos:end="71:15">fmt</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <name pos:start="71:19" pos:end="71:24">optarg</name></expr>;</expr_stmt>

            <break pos:start="73:13" pos:end="73:18">break;</break>

        <case pos:start="75:9" pos:end="75:17">case <expr pos:start="75:14" pos:end="75:16"><literal type="char" pos:start="75:14" pos:end="75:16">'r'</literal></expr>:</case>

            <expr_stmt pos:start="77:13" pos:end="77:33"><expr pos:start="77:13" pos:end="77:32"><name pos:start="77:13" pos:end="77:17">flags</name> <operator pos:start="77:19" pos:end="77:20">|=</operator> <name pos:start="77:22" pos:end="77:32">BDRV_O_RDWR</name></expr>;</expr_stmt>



            <if_stmt pos:start="81:13" pos:end="95:13"><if pos:start="81:13" pos:end="85:13">if <condition pos:start="81:16" pos:end="81:41">(<expr pos:start="81:17" pos:end="81:40"><operator pos:start="81:17" pos:end="81:17">!</operator><call pos:start="81:18" pos:end="81:40"><name pos:start="81:18" pos:end="81:23">strcmp</name><argument_list pos:start="81:24" pos:end="81:40">(<argument pos:start="81:25" pos:end="81:30"><expr pos:start="81:25" pos:end="81:30"><name pos:start="81:25" pos:end="81:30">optarg</name></expr></argument>, <argument pos:start="81:33" pos:end="81:39"><expr pos:start="81:33" pos:end="81:39"><literal type="string" pos:start="81:33" pos:end="81:39">"leaks"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:43" pos:end="85:13">{<block_content pos:start="83:17" pos:end="83:37">

                <expr_stmt pos:start="83:17" pos:end="83:37"><expr pos:start="83:17" pos:end="83:36"><name pos:start="83:17" pos:end="83:19">fix</name> <operator pos:start="83:21" pos:end="83:21">=</operator> <name pos:start="83:23" pos:end="83:36">BDRV_FIX_LEAKS</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="85:15" pos:end="89:13">else if <condition pos:start="85:23" pos:end="85:46">(<expr pos:start="85:24" pos:end="85:45"><operator pos:start="85:24" pos:end="85:24">!</operator><call pos:start="85:25" pos:end="85:45"><name pos:start="85:25" pos:end="85:30">strcmp</name><argument_list pos:start="85:31" pos:end="85:45">(<argument pos:start="85:32" pos:end="85:37"><expr pos:start="85:32" pos:end="85:37"><name pos:start="85:32" pos:end="85:37">optarg</name></expr></argument>, <argument pos:start="85:40" pos:end="85:44"><expr pos:start="85:40" pos:end="85:44"><literal type="string" pos:start="85:40" pos:end="85:44">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:48" pos:end="89:13">{<block_content pos:start="87:17" pos:end="87:55">

                <expr_stmt pos:start="87:17" pos:end="87:55"><expr pos:start="87:17" pos:end="87:54"><name pos:start="87:17" pos:end="87:19">fix</name> <operator pos:start="87:21" pos:end="87:21">=</operator> <name pos:start="87:23" pos:end="87:36">BDRV_FIX_LEAKS</name> <operator pos:start="87:38" pos:end="87:38">|</operator> <name pos:start="87:40" pos:end="87:54">BDRV_FIX_ERRORS</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="89:15" pos:end="95:13">else <block pos:start="89:20" pos:end="95:13">{<block_content pos:start="91:17" pos:end="93:71">

                <expr_stmt pos:start="91:17" pos:end="93:71"><expr pos:start="91:17" pos:end="93:70"><call pos:start="91:17" pos:end="93:70"><name pos:start="91:17" pos:end="91:26">error_exit</name><argument_list pos:start="91:27" pos:end="93:70">(<argument pos:start="91:28" pos:end="93:61"><expr pos:start="91:28" pos:end="93:61"><literal type="string" pos:start="91:28" pos:end="91:57">"Unknown option value for -r "</literal>

                           <literal type="string" pos:start="93:28" pos:end="93:61">"(expecting 'leaks' or 'all'): %s"</literal></expr></argument>, <argument pos:start="93:64" pos:end="93:69"><expr pos:start="93:64" pos:end="93:69"><name pos:start="93:64" pos:end="93:69">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="97:13" pos:end="97:18">break;</break>

        <case pos:start="99:9" pos:end="99:27">case <expr pos:start="99:14" pos:end="99:26"><name pos:start="99:14" pos:end="99:26">OPTION_OUTPUT</name></expr>:</case>

            <expr_stmt pos:start="101:13" pos:end="101:28"><expr pos:start="101:13" pos:end="101:27"><name pos:start="101:13" pos:end="101:18">output</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <name pos:start="101:22" pos:end="101:27">optarg</name></expr>;</expr_stmt>

            <break pos:start="103:13" pos:end="103:18">break;</break>

        <case pos:start="105:9" pos:end="105:17">case <expr pos:start="105:14" pos:end="105:16"><literal type="char" pos:start="105:14" pos:end="105:16">'T'</literal></expr>:</case>

            <expr_stmt pos:start="107:13" pos:end="107:27"><expr pos:start="107:13" pos:end="107:26"><name pos:start="107:13" pos:end="107:17">cache</name> <operator pos:start="107:19" pos:end="107:19">=</operator> <name pos:start="107:21" pos:end="107:26">optarg</name></expr>;</expr_stmt>

            <break pos:start="109:13" pos:end="109:18">break;</break>

        <case pos:start="111:9" pos:end="111:17">case <expr pos:start="111:14" pos:end="111:16"><literal type="char" pos:start="111:14" pos:end="111:16">'q'</literal></expr>:</case>

            <expr_stmt pos:start="113:13" pos:end="113:25"><expr pos:start="113:13" pos:end="113:24"><name pos:start="113:13" pos:end="113:17">quiet</name> <operator pos:start="113:19" pos:end="113:19">=</operator> <name pos:start="113:21" pos:end="113:24">true</name></expr>;</expr_stmt>

            <break pos:start="115:13" pos:end="115:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>

    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:27">(<expr pos:start="121:9" pos:end="121:26"><name pos:start="121:9" pos:end="121:14">optind</name> <operator pos:start="121:16" pos:end="121:17">!=</operator> <name pos:start="121:19" pos:end="121:22">argc</name> <operator pos:start="121:24" pos:end="121:24">-</operator> <literal type="number" pos:start="121:26" pos:end="121:26">1</literal></expr>)</condition> <block pos:start="121:29" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:52">

        <expr_stmt pos:start="123:9" pos:end="123:52"><expr pos:start="123:9" pos:end="123:51"><call pos:start="123:9" pos:end="123:51"><name pos:start="123:9" pos:end="123:18">error_exit</name><argument_list pos:start="123:19" pos:end="123:51">(<argument pos:start="123:20" pos:end="123:50"><expr pos:start="123:20" pos:end="123:50"><literal type="string" pos:start="123:20" pos:end="123:50">"Expecting one image file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:30"><expr pos:start="127:5" pos:end="127:29"><name pos:start="127:5" pos:end="127:12">filename</name> <operator pos:start="127:14" pos:end="127:14">=</operator> <name pos:start="127:16" pos:end="127:29"><name pos:start="127:16" pos:end="127:19">argv</name><index pos:start="127:20" pos:end="127:29">[<expr pos:start="127:21" pos:end="127:28"><name pos:start="127:21" pos:end="127:26">optind</name><operator pos:start="127:27" pos:end="127:28">++</operator></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="131:5" pos:end="145:5"><if pos:start="131:5" pos:end="135:5">if <condition pos:start="131:8" pos:end="131:42">(<expr pos:start="131:9" pos:end="131:41"><name pos:start="131:9" pos:end="131:14">output</name> <operator pos:start="131:16" pos:end="131:17">&amp;&amp;</operator> <operator pos:start="131:19" pos:end="131:19">!</operator><call pos:start="131:20" pos:end="131:41"><name pos:start="131:20" pos:end="131:25">strcmp</name><argument_list pos:start="131:26" pos:end="131:41">(<argument pos:start="131:27" pos:end="131:32"><expr pos:start="131:27" pos:end="131:32"><name pos:start="131:27" pos:end="131:32">output</name></expr></argument>, <argument pos:start="131:35" pos:end="131:40"><expr pos:start="131:35" pos:end="131:40"><literal type="string" pos:start="131:35" pos:end="131:40">"json"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="131:44" pos:end="135:5">{<block_content pos:start="133:9" pos:end="133:37">

        <expr_stmt pos:start="133:9" pos:end="133:37"><expr pos:start="133:9" pos:end="133:36"><name pos:start="133:9" pos:end="133:21">output_format</name> <operator pos:start="133:23" pos:end="133:23">=</operator> <name pos:start="133:25" pos:end="133:36">OFORMAT_JSON</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="135:7" pos:end="139:5">else if <condition pos:start="135:15" pos:end="135:50">(<expr pos:start="135:16" pos:end="135:49"><name pos:start="135:16" pos:end="135:21">output</name> <operator pos:start="135:23" pos:end="135:24">&amp;&amp;</operator> <operator pos:start="135:26" pos:end="135:26">!</operator><call pos:start="135:27" pos:end="135:49"><name pos:start="135:27" pos:end="135:32">strcmp</name><argument_list pos:start="135:33" pos:end="135:49">(<argument pos:start="135:34" pos:end="135:39"><expr pos:start="135:34" pos:end="135:39"><name pos:start="135:34" pos:end="135:39">output</name></expr></argument>, <argument pos:start="135:42" pos:end="135:48"><expr pos:start="135:42" pos:end="135:48"><literal type="string" pos:start="135:42" pos:end="135:48">"human"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:52" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:38">

        <expr_stmt pos:start="137:9" pos:end="137:38"><expr pos:start="137:9" pos:end="137:37"><name pos:start="137:9" pos:end="137:21">output_format</name> <operator pos:start="137:23" pos:end="137:23">=</operator> <name pos:start="137:25" pos:end="137:37">OFORMAT_HUMAN</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="139:7" pos:end="145:5">else if <condition pos:start="139:15" pos:end="139:22">(<expr pos:start="139:16" pos:end="139:21"><name pos:start="139:16" pos:end="139:21">output</name></expr>)</condition> <block pos:start="139:24" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:17">

        <expr_stmt pos:start="141:9" pos:end="141:78"><expr pos:start="141:9" pos:end="141:77"><call pos:start="141:9" pos:end="141:77"><name pos:start="141:9" pos:end="141:20">error_report</name><argument_list pos:start="141:21" pos:end="141:77">(<argument pos:start="141:22" pos:end="141:76"><expr pos:start="141:22" pos:end="141:76"><literal type="string" pos:start="141:22" pos:end="141:76">"--output must be used with human or json as argument."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:17">return <expr pos:start="143:16" pos:end="143:16"><literal type="number" pos:start="143:16" pos:end="143:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:48"><expr pos:start="149:5" pos:end="149:47"><name pos:start="149:5" pos:end="149:7">ret</name> <operator pos:start="149:9" pos:end="149:9">=</operator> <call pos:start="149:11" pos:end="149:47"><name pos:start="149:11" pos:end="149:32">bdrv_parse_cache_flags</name><argument_list pos:start="149:33" pos:end="149:47">(<argument pos:start="149:34" pos:end="149:38"><expr pos:start="149:34" pos:end="149:38"><name pos:start="149:34" pos:end="149:38">cache</name></expr></argument>, <argument pos:start="149:41" pos:end="149:46"><expr pos:start="149:41" pos:end="149:46"><operator pos:start="149:41" pos:end="149:41">&amp;</operator><name pos:start="149:42" pos:end="149:46">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="157:5"><if pos:start="151:5" pos:end="157:5">if <condition pos:start="151:8" pos:end="151:16">(<expr pos:start="151:9" pos:end="151:15"><name pos:start="151:9" pos:end="151:11">ret</name> <operator pos:start="151:13" pos:end="151:13">&lt;</operator> <literal type="number" pos:start="151:15" pos:end="151:15">0</literal></expr>)</condition> <block pos:start="151:18" pos:end="157:5">{<block_content pos:start="153:9" pos:end="155:17">

        <expr_stmt pos:start="153:9" pos:end="153:63"><expr pos:start="153:9" pos:end="153:62"><call pos:start="153:9" pos:end="153:62"><name pos:start="153:9" pos:end="153:20">error_report</name><argument_list pos:start="153:21" pos:end="153:62">(<argument pos:start="153:22" pos:end="153:54"><expr pos:start="153:22" pos:end="153:54"><literal type="string" pos:start="153:22" pos:end="153:54">"Invalid source cache option: %s"</literal></expr></argument>, <argument pos:start="153:57" pos:end="153:61"><expr pos:start="153:57" pos:end="153:61"><name pos:start="153:57" pos:end="153:61">cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="155:9" pos:end="155:17">return <expr pos:start="155:16" pos:end="155:16"><literal type="number" pos:start="155:16" pos:end="155:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:63"><expr pos:start="161:5" pos:end="161:62"><name pos:start="161:5" pos:end="161:7">blk</name> <operator pos:start="161:9" pos:end="161:9">=</operator> <call pos:start="161:11" pos:end="161:62"><name pos:start="161:11" pos:end="161:18">img_open</name><argument_list pos:start="161:19" pos:end="161:62">(<argument pos:start="161:20" pos:end="161:26"><expr pos:start="161:20" pos:end="161:26"><literal type="string" pos:start="161:20" pos:end="161:26">"image"</literal></expr></argument>, <argument pos:start="161:29" pos:end="161:36"><expr pos:start="161:29" pos:end="161:36"><name pos:start="161:29" pos:end="161:36">filename</name></expr></argument>, <argument pos:start="161:39" pos:end="161:41"><expr pos:start="161:39" pos:end="161:41"><name pos:start="161:39" pos:end="161:41">fmt</name></expr></argument>, <argument pos:start="161:44" pos:end="161:48"><expr pos:start="161:44" pos:end="161:48"><name pos:start="161:44" pos:end="161:48">flags</name></expr></argument>, <argument pos:start="161:51" pos:end="161:54"><expr pos:start="161:51" pos:end="161:54"><name pos:start="161:51" pos:end="161:54">true</name></expr></argument>, <argument pos:start="161:57" pos:end="161:61"><expr pos:start="161:57" pos:end="161:61"><name pos:start="161:57" pos:end="161:61">quiet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="163:5" pos:end="167:5"><if pos:start="163:5" pos:end="167:5">if <condition pos:start="163:8" pos:end="163:13">(<expr pos:start="163:9" pos:end="163:12"><operator pos:start="163:9" pos:end="163:9">!</operator><name pos:start="163:10" pos:end="163:12">blk</name></expr>)</condition> <block pos:start="163:15" pos:end="167:5">{<block_content pos:start="165:9" pos:end="165:17">

        <return pos:start="165:9" pos:end="165:17">return <expr pos:start="165:16" pos:end="165:16"><literal type="number" pos:start="165:16" pos:end="165:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:21"><expr pos:start="169:5" pos:end="169:20"><name pos:start="169:5" pos:end="169:6">bs</name> <operator pos:start="169:8" pos:end="169:8">=</operator> <call pos:start="169:10" pos:end="169:20"><name pos:start="169:10" pos:end="169:15">blk_bs</name><argument_list pos:start="169:16" pos:end="169:20">(<argument pos:start="169:17" pos:end="169:19"><expr pos:start="169:17" pos:end="169:19"><name pos:start="169:17" pos:end="169:19">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:34"><expr pos:start="173:5" pos:end="173:33"><name pos:start="173:5" pos:end="173:9">check</name> <operator pos:start="173:11" pos:end="173:11">=</operator> <call pos:start="173:13" pos:end="173:33"><name pos:start="173:13" pos:end="173:18">g_new0</name><argument_list pos:start="173:19" pos:end="173:33">(<argument pos:start="173:20" pos:end="173:29"><expr pos:start="173:20" pos:end="173:29"><name pos:start="173:20" pos:end="173:29">ImageCheck</name></expr></argument>, <argument pos:start="173:32" pos:end="173:32"><expr pos:start="173:32" pos:end="173:32"><literal type="number" pos:start="173:32" pos:end="173:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:61"><expr pos:start="175:5" pos:end="175:60"><name pos:start="175:5" pos:end="175:7">ret</name> <operator pos:start="175:9" pos:end="175:9">=</operator> <call pos:start="175:11" pos:end="175:60"><name pos:start="175:11" pos:end="175:29">collect_image_check</name><argument_list pos:start="175:30" pos:end="175:60">(<argument pos:start="175:31" pos:end="175:32"><expr pos:start="175:31" pos:end="175:32"><name pos:start="175:31" pos:end="175:32">bs</name></expr></argument>, <argument pos:start="175:35" pos:end="175:39"><expr pos:start="175:35" pos:end="175:39"><name pos:start="175:35" pos:end="175:39">check</name></expr></argument>, <argument pos:start="175:42" pos:end="175:49"><expr pos:start="175:42" pos:end="175:49"><name pos:start="175:42" pos:end="175:49">filename</name></expr></argument>, <argument pos:start="175:52" pos:end="175:54"><expr pos:start="175:52" pos:end="175:54"><name pos:start="175:52" pos:end="175:54">fmt</name></expr></argument>, <argument pos:start="175:57" pos:end="175:59"><expr pos:start="175:57" pos:end="175:59"><name pos:start="175:57" pos:end="175:59">fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="179:5" pos:end="187:5"><if pos:start="179:5" pos:end="187:5">if <condition pos:start="179:8" pos:end="179:24">(<expr pos:start="179:9" pos:end="179:23"><name pos:start="179:9" pos:end="179:11">ret</name> <operator pos:start="179:13" pos:end="179:14">==</operator> <operator pos:start="179:16" pos:end="179:16">-</operator><name pos:start="179:17" pos:end="179:23">ENOTSUP</name></expr>)</condition> <block pos:start="179:26" pos:end="187:5">{<block_content pos:start="181:9" pos:end="185:18">

        <expr_stmt pos:start="181:9" pos:end="181:66"><expr pos:start="181:9" pos:end="181:65"><call pos:start="181:9" pos:end="181:65"><name pos:start="181:9" pos:end="181:20">error_report</name><argument_list pos:start="181:21" pos:end="181:65">(<argument pos:start="181:22" pos:end="181:64"><expr pos:start="181:22" pos:end="181:64"><literal type="string" pos:start="181:22" pos:end="181:64">"This image format does not support checks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:17"><expr pos:start="183:9" pos:end="183:16"><name pos:start="183:9" pos:end="183:11">ret</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <literal type="number" pos:start="183:15" pos:end="183:16">63</literal></expr>;</expr_stmt>

        <goto pos:start="185:9" pos:end="185:18">goto <name pos:start="185:14" pos:end="185:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="191:5" pos:end="231:5"><if pos:start="191:5" pos:end="231:5">if <condition pos:start="191:8" pos:end="191:55">(<expr pos:start="191:9" pos:end="191:54"><name pos:start="191:9" pos:end="191:32"><name pos:start="191:9" pos:end="191:13">check</name><operator pos:start="191:14" pos:end="191:15">-&gt;</operator><name pos:start="191:16" pos:end="191:32">corruptions_fixed</name></name> <operator pos:start="191:34" pos:end="191:35">||</operator> <name pos:start="191:37" pos:end="191:54"><name pos:start="191:37" pos:end="191:41">check</name><operator pos:start="191:42" pos:end="191:43">-&gt;</operator><name pos:start="191:44" pos:end="191:54">leaks_fixed</name></name></expr>)</condition> <block pos:start="191:57" pos:end="231:5">{<block_content pos:start="193:9" pos:end="229:56">

        <decl_stmt pos:start="193:9" pos:end="193:43"><decl pos:start="193:9" pos:end="193:29"><type pos:start="193:9" pos:end="193:11"><name pos:start="193:9" pos:end="193:11">int</name></type> <name pos:start="193:13" pos:end="193:29">corruptions_fixed</name></decl>, <decl pos:start="193:32" pos:end="193:42"><type ref="prev" pos:start="193:9" pos:end="193:11"/><name pos:start="193:32" pos:end="193:42">leaks_fixed</name></decl>;</decl_stmt>



        <expr_stmt pos:start="197:9" pos:end="197:49"><expr pos:start="197:9" pos:end="197:48"><name pos:start="197:9" pos:end="197:19">leaks_fixed</name>         <operator pos:start="197:29" pos:end="197:29">=</operator> <name pos:start="197:31" pos:end="197:48"><name pos:start="197:31" pos:end="197:35">check</name><operator pos:start="197:36" pos:end="197:37">-&gt;</operator><name pos:start="197:38" pos:end="197:48">leaks_fixed</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:55"><expr pos:start="199:9" pos:end="199:54"><name pos:start="199:9" pos:end="199:25">corruptions_fixed</name>   <operator pos:start="199:29" pos:end="199:29">=</operator> <name pos:start="199:31" pos:end="199:54"><name pos:start="199:31" pos:end="199:35">check</name><operator pos:start="199:36" pos:end="199:37">-&gt;</operator><name pos:start="199:38" pos:end="199:54">corruptions_fixed</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="203:9" pos:end="219:9"><if pos:start="203:9" pos:end="219:9">if <condition pos:start="203:12" pos:end="203:43">(<expr pos:start="203:13" pos:end="203:42"><name pos:start="203:13" pos:end="203:25">output_format</name> <operator pos:start="203:27" pos:end="203:28">==</operator> <name pos:start="203:30" pos:end="203:42">OFORMAT_HUMAN</name></expr>)</condition> <block pos:start="203:45" pos:end="219:9">{<block_content pos:start="205:13" pos:end="217:46">

            <expr_stmt pos:start="205:13" pos:end="217:46"><expr pos:start="205:13" pos:end="217:45"><call pos:start="205:13" pos:end="217:45"><name pos:start="205:13" pos:end="205:19">qprintf</name><argument_list pos:start="205:20" pos:end="217:45">(<argument pos:start="205:21" pos:end="205:25"><expr pos:start="205:21" pos:end="205:25"><name pos:start="205:21" pos:end="205:25">quiet</name></expr></argument>,

                    <argument pos:start="207:21" pos:end="213:62"><expr pos:start="207:21" pos:end="213:62"><literal type="string" pos:start="207:21" pos:end="207:80">"The following inconsistencies were found and repaired:\n\n"</literal>

                    <literal type="string" pos:start="209:21" pos:end="209:27">"    %"</literal> <name pos:start="209:29" pos:end="209:34">PRId64</name> <literal type="string" pos:start="209:36" pos:end="209:55">" leaked clusters\n"</literal>

                    <literal type="string" pos:start="211:21" pos:end="211:27">"    %"</literal> <name pos:start="211:29" pos:end="211:34">PRId64</name> <literal type="string" pos:start="211:36" pos:end="211:53">" corruptions\n\n"</literal>

                    <literal type="string" pos:start="213:21" pos:end="213:62">"Double checking the fixed image now...\n"</literal></expr></argument>,

                    <argument pos:start="215:21" pos:end="215:38"><expr pos:start="215:21" pos:end="215:38"><name pos:start="215:21" pos:end="215:38"><name pos:start="215:21" pos:end="215:25">check</name><operator pos:start="215:26" pos:end="215:27">-&gt;</operator><name pos:start="215:28" pos:end="215:38">leaks_fixed</name></name></expr></argument>,

                    <argument pos:start="217:21" pos:end="217:44"><expr pos:start="217:21" pos:end="217:44"><name pos:start="217:21" pos:end="217:44"><name pos:start="217:21" pos:end="217:25">check</name><operator pos:start="217:26" pos:end="217:27">-&gt;</operator><name pos:start="217:28" pos:end="217:44">corruptions_fixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="223:9" pos:end="223:63"><expr pos:start="223:9" pos:end="223:62"><name pos:start="223:9" pos:end="223:11">ret</name> <operator pos:start="223:13" pos:end="223:13">=</operator> <call pos:start="223:15" pos:end="223:62"><name pos:start="223:15" pos:end="223:33">collect_image_check</name><argument_list pos:start="223:34" pos:end="223:62">(<argument pos:start="223:35" pos:end="223:36"><expr pos:start="223:35" pos:end="223:36"><name pos:start="223:35" pos:end="223:36">bs</name></expr></argument>, <argument pos:start="223:39" pos:end="223:43"><expr pos:start="223:39" pos:end="223:43"><name pos:start="223:39" pos:end="223:43">check</name></expr></argument>, <argument pos:start="223:46" pos:end="223:53"><expr pos:start="223:46" pos:end="223:53"><name pos:start="223:46" pos:end="223:53">filename</name></expr></argument>, <argument pos:start="223:56" pos:end="223:58"><expr pos:start="223:56" pos:end="223:58"><name pos:start="223:56" pos:end="223:58">fmt</name></expr></argument>, <argument pos:start="223:61" pos:end="223:61"><expr pos:start="223:61" pos:end="223:61"><literal type="number" pos:start="223:61" pos:end="223:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="227:9" pos:end="227:50"><expr pos:start="227:9" pos:end="227:49"><name pos:start="227:9" pos:end="227:26"><name pos:start="227:9" pos:end="227:13">check</name><operator pos:start="227:14" pos:end="227:15">-&gt;</operator><name pos:start="227:16" pos:end="227:26">leaks_fixed</name></name>          <operator pos:start="227:37" pos:end="227:37">=</operator> <name pos:start="227:39" pos:end="227:49">leaks_fixed</name></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:56"><expr pos:start="229:9" pos:end="229:55"><name pos:start="229:9" pos:end="229:32"><name pos:start="229:9" pos:end="229:13">check</name><operator pos:start="229:14" pos:end="229:15">-&gt;</operator><name pos:start="229:16" pos:end="229:32">corruptions_fixed</name></name>    <operator pos:start="229:37" pos:end="229:37">=</operator> <name pos:start="229:39" pos:end="229:55">corruptions_fixed</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="235:5" pos:end="249:5">switch <condition pos:start="235:12" pos:end="235:26">(<expr pos:start="235:13" pos:end="235:25"><name pos:start="235:13" pos:end="235:25">output_format</name></expr>)</condition> <block pos:start="235:28" pos:end="249:5">{<block_content pos:start="237:5" pos:end="247:14">

    <case pos:start="237:5" pos:end="237:23">case <expr pos:start="237:10" pos:end="237:22"><name pos:start="237:10" pos:end="237:22">OFORMAT_HUMAN</name></expr>:</case>

        <expr_stmt pos:start="239:9" pos:end="239:45"><expr pos:start="239:9" pos:end="239:44"><call pos:start="239:9" pos:end="239:44"><name pos:start="239:9" pos:end="239:30">dump_human_image_check</name><argument_list pos:start="239:31" pos:end="239:44">(<argument pos:start="239:32" pos:end="239:36"><expr pos:start="239:32" pos:end="239:36"><name pos:start="239:32" pos:end="239:36">check</name></expr></argument>, <argument pos:start="239:39" pos:end="239:43"><expr pos:start="239:39" pos:end="239:43"><name pos:start="239:39" pos:end="239:43">quiet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="241:9" pos:end="241:14">break;</break>

    <case pos:start="243:5" pos:end="243:22">case <expr pos:start="243:10" pos:end="243:21"><name pos:start="243:10" pos:end="243:21">OFORMAT_JSON</name></expr>:</case>

        <expr_stmt pos:start="245:9" pos:end="245:44"><expr pos:start="245:9" pos:end="245:43"><call pos:start="245:9" pos:end="245:43"><name pos:start="245:9" pos:end="245:29">dump_json_image_check</name><argument_list pos:start="245:30" pos:end="245:43">(<argument pos:start="245:31" pos:end="245:35"><expr pos:start="245:31" pos:end="245:35"><name pos:start="245:31" pos:end="245:35">check</name></expr></argument>, <argument pos:start="245:38" pos:end="245:42"><expr pos:start="245:38" pos:end="245:42"><name pos:start="245:38" pos:end="245:42">quiet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="247:9" pos:end="247:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="253:5" pos:end="259:5"><if pos:start="253:5" pos:end="259:5">if <condition pos:start="253:8" pos:end="253:35">(<expr pos:start="253:9" pos:end="253:34"><name pos:start="253:9" pos:end="253:11">ret</name> <operator pos:start="253:13" pos:end="253:14">||</operator> <name pos:start="253:16" pos:end="253:34"><name pos:start="253:16" pos:end="253:20">check</name><operator pos:start="253:21" pos:end="253:22">-&gt;</operator><name pos:start="253:23" pos:end="253:34">check_errors</name></name></expr>)</condition> <block pos:start="253:37" pos:end="259:5">{<block_content pos:start="255:9" pos:end="257:18">

        <expr_stmt pos:start="255:9" pos:end="255:16"><expr pos:start="255:9" pos:end="255:15"><name pos:start="255:9" pos:end="255:11">ret</name> <operator pos:start="255:13" pos:end="255:13">=</operator> <literal type="number" pos:start="255:15" pos:end="255:15">1</literal></expr>;</expr_stmt>

        <goto pos:start="257:9" pos:end="257:18">goto <name pos:start="257:14" pos:end="257:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="263:5" pos:end="275:5"><if pos:start="263:5" pos:end="267:5">if <condition pos:start="263:8" pos:end="263:27">(<expr pos:start="263:9" pos:end="263:26"><name pos:start="263:9" pos:end="263:26"><name pos:start="263:9" pos:end="263:13">check</name><operator pos:start="263:14" pos:end="263:15">-&gt;</operator><name pos:start="263:16" pos:end="263:26">corruptions</name></name></expr>)</condition> <block pos:start="263:29" pos:end="267:5">{<block_content pos:start="265:9" pos:end="265:16">

        <expr_stmt pos:start="265:9" pos:end="265:16"><expr pos:start="265:9" pos:end="265:15"><name pos:start="265:9" pos:end="265:11">ret</name> <operator pos:start="265:13" pos:end="265:13">=</operator> <literal type="number" pos:start="265:15" pos:end="265:15">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="267:7" pos:end="271:5">else if <condition pos:start="267:15" pos:end="267:28">(<expr pos:start="267:16" pos:end="267:27"><name pos:start="267:16" pos:end="267:27"><name pos:start="267:16" pos:end="267:20">check</name><operator pos:start="267:21" pos:end="267:22">-&gt;</operator><name pos:start="267:23" pos:end="267:27">leaks</name></name></expr>)</condition> <block pos:start="267:30" pos:end="271:5">{<block_content pos:start="269:9" pos:end="269:16">

        <expr_stmt pos:start="269:9" pos:end="269:16"><expr pos:start="269:9" pos:end="269:15"><name pos:start="269:9" pos:end="269:11">ret</name> <operator pos:start="269:13" pos:end="269:13">=</operator> <literal type="number" pos:start="269:15" pos:end="269:15">3</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="271:7" pos:end="275:5">else <block pos:start="271:12" pos:end="275:5">{<block_content pos:start="273:9" pos:end="273:16">

        <expr_stmt pos:start="273:9" pos:end="273:16"><expr pos:start="273:9" pos:end="273:15"><name pos:start="273:9" pos:end="273:11">ret</name> <operator pos:start="273:13" pos:end="273:13">=</operator> <literal type="number" pos:start="273:15" pos:end="273:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<label pos:start="279:1" pos:end="279:5"><name pos:start="279:1" pos:end="279:4">fail</name>:</label>

    <expr_stmt pos:start="281:5" pos:end="281:32"><expr pos:start="281:5" pos:end="281:31"><call pos:start="281:5" pos:end="281:31"><name pos:start="281:5" pos:end="281:24">qapi_free_ImageCheck</name><argument_list pos:start="281:25" pos:end="281:31">(<argument pos:start="281:26" pos:end="281:30"><expr pos:start="281:26" pos:end="281:30"><name pos:start="281:26" pos:end="281:30">check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="283:5" pos:end="283:19"><expr pos:start="283:5" pos:end="283:18"><call pos:start="283:5" pos:end="283:18"><name pos:start="283:5" pos:end="283:13">blk_unref</name><argument_list pos:start="283:14" pos:end="283:18">(<argument pos:start="283:15" pos:end="283:17"><expr pos:start="283:15" pos:end="283:17"><name pos:start="283:15" pos:end="283:17">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="285:5" pos:end="285:15">return <expr pos:start="285:12" pos:end="285:14"><name pos:start="285:12" pos:end="285:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
