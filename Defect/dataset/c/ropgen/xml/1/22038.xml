<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22038.c" pos:tabs="8"><function pos:start="1:1" pos:end="245:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:19">axisdev88_init</name> <parameter_list pos:start="1:21" pos:end="7:72">(<parameter pos:start="1:22" pos:end="1:40"><decl pos:start="1:22" pos:end="1:40"><type pos:start="1:22" pos:end="1:40"><name pos:start="1:22" pos:end="1:31">ram_addr_t</name></type> <name pos:start="1:33" pos:end="1:40">ram_size</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:44"><decl pos:start="3:22" pos:end="3:44"><type pos:start="3:22" pos:end="3:44"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:31">char</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:44">boot_device</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:48"><decl pos:start="5:22" pos:end="5:48"><type pos:start="5:22" pos:end="5:48"><specifier pos:start="5:22" pos:end="5:26">const</specifier> <name pos:start="5:28" pos:end="5:31">char</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:48">kernel_filename</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:76"><decl pos:start="5:51" pos:end="5:76"><type pos:start="5:51" pos:end="5:76"><specifier pos:start="5:51" pos:end="5:55">const</specifier> <name pos:start="5:57" pos:end="5:60">char</name> <modifier pos:start="5:62" pos:end="5:62">*</modifier></type><name pos:start="5:63" pos:end="5:76">kernel_cmdline</name></decl></parameter>,

                     <parameter pos:start="7:22" pos:end="7:48"><decl pos:start="7:22" pos:end="7:48"><type pos:start="7:22" pos:end="7:48"><specifier pos:start="7:22" pos:end="7:26">const</specifier> <name pos:start="7:28" pos:end="7:31">char</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:48">initrd_filename</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:71"><decl pos:start="7:51" pos:end="7:71"><type pos:start="7:51" pos:end="7:71"><specifier pos:start="7:51" pos:end="7:55">const</specifier> <name pos:start="7:57" pos:end="7:60">char</name> <modifier pos:start="7:62" pos:end="7:62">*</modifier></type><name pos:start="7:63" pos:end="7:71">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="245:1">{<block_content pos:start="11:5" pos:end="243:41">

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">DeviceState</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">SysBusDevice</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:19">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:39"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">qemu_irq</name></type> <name pos:start="17:14" pos:end="17:20"><name pos:start="17:14" pos:end="17:16">irq</name><index pos:start="17:17" pos:end="17:20">[<expr pos:start="17:18" pos:end="17:19"><literal type="number" pos:start="17:18" pos:end="17:19">30</literal></expr>]</index></name></decl>, <decl pos:start="17:23" pos:end="17:28"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:23" pos:end="17:28"><name pos:start="17:23" pos:end="17:25">nmi</name><index pos:start="17:26" pos:end="17:28">[<expr pos:start="17:27" pos:end="17:27"><literal type="number" pos:start="17:27" pos:end="17:27">2</literal></expr>]</index></name></decl>, <decl pos:start="17:31" pos:end="17:38"><type ref="prev" pos:start="17:5" pos:end="17:12"><modifier pos:start="17:31" pos:end="17:31">*</modifier></type><name pos:start="17:32" pos:end="17:38">cpu_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">void</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:22">etraxfs_dmac</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:53"><decl pos:start="21:5" pos:end="21:52"><type pos:start="21:5" pos:end="21:31"><name pos:start="21:5" pos:end="21:29"><name pos:start="21:5" pos:end="21:10">struct</name> <name pos:start="21:12" pos:end="21:29">etraxfs_dma_client</name></name> <modifier pos:start="21:31" pos:end="21:31">*</modifier></type><name pos:start="21:32" pos:end="21:37"><name pos:start="21:32" pos:end="21:34">eth</name><index pos:start="21:35" pos:end="21:37">[<expr pos:start="21:36" pos:end="21:36"><literal type="number" pos:start="21:36" pos:end="21:36">2</literal></expr>]</index></name> <init pos:start="21:39" pos:end="21:52">= <expr pos:start="21:41" pos:end="21:52"><block pos:start="21:41" pos:end="21:52">{<expr pos:start="21:42" pos:end="21:45"><name pos:start="21:42" pos:end="21:45">NULL</name></expr>, <expr pos:start="21:48" pos:end="21:51"><name pos:start="21:48" pos:end="21:51">NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:19">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:18"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:17">nand_regs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:18"><decl pos:start="29:5" pos:end="29:17"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:17">gpio_regs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:24"><decl pos:start="31:5" pos:end="31:23"><type pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:14">ram_addr_t</name></type> <name pos:start="31:16" pos:end="31:23">phys_ram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:27"><decl pos:start="33:5" pos:end="33:26"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:14">ram_addr_t</name></type> <name pos:start="33:16" pos:end="33:26">phys_intmem</name></decl>;</decl_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:19">/* init CPUs */</comment>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:26">(<expr pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:17">cpu_model</name> <operator pos:start="39:19" pos:end="39:20">==</operator> <name pos:start="39:22" pos:end="39:25">NULL</name></expr>)</condition> <block pos:start="39:28" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:30">

        <expr_stmt pos:start="41:9" pos:end="41:30"><expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:17">cpu_model</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <literal type="string" pos:start="41:21" pos:end="41:29">"crisv32"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:30"><expr pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:7">env</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:29"><name pos:start="45:11" pos:end="45:18">cpu_init</name><argument_list pos:start="45:19" pos:end="45:29">(<argument pos:start="45:20" pos:end="45:28"><expr pos:start="45:20" pos:end="45:28"><name pos:start="45:20" pos:end="45:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:45"><expr pos:start="47:5" pos:end="47:44"><call pos:start="47:5" pos:end="47:44"><name pos:start="47:5" pos:end="47:23">qemu_register_reset</name><argument_list pos:start="47:24" pos:end="47:44">(<argument pos:start="47:25" pos:end="47:38"><expr pos:start="47:25" pos:end="47:38"><name pos:start="47:25" pos:end="47:38">main_cpu_reset</name></expr></argument>, <argument pos:start="47:41" pos:end="47:43"><expr pos:start="47:41" pos:end="47:43"><name pos:start="47:41" pos:end="47:43">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:40"><expr pos:start="53:5" pos:end="53:39"><name pos:start="53:5" pos:end="53:12">phys_ram</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <call pos:start="53:16" pos:end="53:39"><name pos:start="53:16" pos:end="53:29">qemu_ram_alloc</name><argument_list pos:start="53:30" pos:end="53:39">(<argument pos:start="53:31" pos:end="53:38"><expr pos:start="53:31" pos:end="53:38"><name pos:start="53:31" pos:end="53:38">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:78"><expr pos:start="55:5" pos:end="55:77"><call pos:start="55:5" pos:end="55:77"><name pos:start="55:5" pos:end="55:32">cpu_register_physical_memory</name><argument_list pos:start="55:33" pos:end="55:77">(<argument pos:start="55:34" pos:end="55:43"><expr pos:start="55:34" pos:end="55:43"><literal type="number" pos:start="55:34" pos:end="55:43">0x40000000</literal></expr></argument>, <argument pos:start="55:46" pos:end="55:53"><expr pos:start="55:46" pos:end="55:53"><name pos:start="55:46" pos:end="55:53">ram_size</name></expr></argument>, <argument pos:start="55:56" pos:end="55:76"><expr pos:start="55:56" pos:end="55:76"><name pos:start="55:56" pos:end="55:63">phys_ram</name> <operator pos:start="55:65" pos:end="55:65">|</operator> <name pos:start="55:67" pos:end="55:76">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="59:5" pos:end="61:27">/* The ETRAX-FS has 128Kb on chip ram, the docs refer to it as the 

       internal memory.  */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:46"><expr pos:start="63:5" pos:end="63:45"><name pos:start="63:5" pos:end="63:15">phys_intmem</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <call pos:start="63:19" pos:end="63:45"><name pos:start="63:19" pos:end="63:32">qemu_ram_alloc</name><argument_list pos:start="63:33" pos:end="63:45">(<argument pos:start="63:34" pos:end="63:44"><expr pos:start="63:34" pos:end="63:44"><name pos:start="63:34" pos:end="63:44">INTMEM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="67:59"><expr pos:start="65:5" pos:end="67:58"><call pos:start="65:5" pos:end="67:58"><name pos:start="65:5" pos:end="65:32">cpu_register_physical_memory</name><argument_list pos:start="65:33" pos:end="67:58">(<argument pos:start="65:34" pos:end="65:43"><expr pos:start="65:34" pos:end="65:43"><literal type="number" pos:start="65:34" pos:end="65:43">0x38000000</literal></expr></argument>, <argument pos:start="65:46" pos:end="65:56"><expr pos:start="65:46" pos:end="65:56"><name pos:start="65:46" pos:end="65:56">INTMEM_SIZE</name></expr></argument>,

                                 <argument pos:start="67:34" pos:end="67:57"><expr pos:start="67:34" pos:end="67:57"><name pos:start="67:34" pos:end="67:44">phys_intmem</name> <operator pos:start="67:46" pos:end="67:46">|</operator> <name pos:start="67:48" pos:end="67:57">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





      <comment type="block" pos:start="73:7" pos:end="73:40">/* Attach a NAND flash to CS1.  */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:56"><expr pos:start="75:5" pos:end="75:55"><name pos:start="75:5" pos:end="75:19"><name pos:start="75:5" pos:end="75:14">nand_state</name><operator pos:start="75:15" pos:end="75:15">.</operator><name pos:start="75:16" pos:end="75:19">nand</name></name> <operator pos:start="75:21" pos:end="75:21">=</operator> <call pos:start="75:23" pos:end="75:55"><name pos:start="75:23" pos:end="75:31">nand_init</name><argument_list pos:start="75:32" pos:end="75:55">(<argument pos:start="75:33" pos:end="75:48"><expr pos:start="75:33" pos:end="75:48"><name pos:start="75:33" pos:end="75:48">NAND_MFR_STMICRO</name></expr></argument>, <argument pos:start="75:51" pos:end="75:54"><expr pos:start="75:51" pos:end="75:54"><literal type="number" pos:start="75:51" pos:end="75:54">0x39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:75"><expr pos:start="77:5" pos:end="77:74"><name pos:start="77:5" pos:end="77:13">nand_regs</name> <operator pos:start="77:15" pos:end="77:15">=</operator> <call pos:start="77:17" pos:end="77:74"><name pos:start="77:17" pos:end="77:38">cpu_register_io_memory</name><argument_list pos:start="77:39" pos:end="77:74">(<argument pos:start="77:40" pos:end="77:48"><expr pos:start="77:40" pos:end="77:48"><name pos:start="77:40" pos:end="77:48">nand_read</name></expr></argument>, <argument pos:start="77:51" pos:end="77:60"><expr pos:start="77:51" pos:end="77:60"><name pos:start="77:51" pos:end="77:60">nand_write</name></expr></argument>, <argument pos:start="77:63" pos:end="77:73"><expr pos:start="77:63" pos:end="77:73"><operator pos:start="77:63" pos:end="77:63">&amp;</operator><name pos:start="77:64" pos:end="77:73">nand_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:68"><expr pos:start="79:5" pos:end="79:67"><call pos:start="79:5" pos:end="79:67"><name pos:start="79:5" pos:end="79:32">cpu_register_physical_memory</name><argument_list pos:start="79:33" pos:end="79:67">(<argument pos:start="79:34" pos:end="79:43"><expr pos:start="79:34" pos:end="79:43"><literal type="number" pos:start="79:34" pos:end="79:43">0x10000000</literal></expr></argument>, <argument pos:start="79:46" pos:end="79:55"><expr pos:start="79:46" pos:end="79:55"><literal type="number" pos:start="79:46" pos:end="79:55">0x05000000</literal></expr></argument>, <argument pos:start="79:58" pos:end="79:66"><expr pos:start="79:58" pos:end="79:66"><name pos:start="79:58" pos:end="79:66">nand_regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:34"><expr pos:start="83:5" pos:end="83:33"><name pos:start="83:5" pos:end="83:19"><name pos:start="83:5" pos:end="83:14">gpio_state</name><operator pos:start="83:15" pos:end="83:15">.</operator><name pos:start="83:16" pos:end="83:19">nand</name></name> <operator pos:start="83:21" pos:end="83:21">=</operator> <operator pos:start="83:23" pos:end="83:23">&amp;</operator><name pos:start="83:24" pos:end="83:33">nand_state</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:75"><expr pos:start="85:5" pos:end="85:74"><name pos:start="85:5" pos:end="85:13">gpio_regs</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <call pos:start="85:17" pos:end="85:74"><name pos:start="85:17" pos:end="85:38">cpu_register_io_memory</name><argument_list pos:start="85:39" pos:end="85:74">(<argument pos:start="85:40" pos:end="85:48"><expr pos:start="85:40" pos:end="85:48"><name pos:start="85:40" pos:end="85:48">gpio_read</name></expr></argument>, <argument pos:start="85:51" pos:end="85:60"><expr pos:start="85:51" pos:end="85:60"><name pos:start="85:51" pos:end="85:60">gpio_write</name></expr></argument>, <argument pos:start="85:63" pos:end="85:73"><expr pos:start="85:63" pos:end="85:73"><operator pos:start="85:63" pos:end="85:63">&amp;</operator><name pos:start="85:64" pos:end="85:73">gpio_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:62"><expr pos:start="87:5" pos:end="87:61"><call pos:start="87:5" pos:end="87:61"><name pos:start="87:5" pos:end="87:32">cpu_register_physical_memory</name><argument_list pos:start="87:33" pos:end="87:61">(<argument pos:start="87:34" pos:end="87:43"><expr pos:start="87:34" pos:end="87:43"><literal type="number" pos:start="87:34" pos:end="87:43">0x3001a000</literal></expr></argument>, <argument pos:start="87:46" pos:end="87:49"><expr pos:start="87:46" pos:end="87:49"><literal type="number" pos:start="87:46" pos:end="87:49">0x5c</literal></expr></argument>, <argument pos:start="87:52" pos:end="87:60"><expr pos:start="87:52" pos:end="87:60"><name pos:start="87:52" pos:end="87:60">gpio_regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="93:5" pos:end="93:37"><expr pos:start="93:5" pos:end="93:36"><name pos:start="93:5" pos:end="93:11">cpu_irq</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <call pos:start="93:15" pos:end="93:36"><name pos:start="93:15" pos:end="93:31">cris_pic_init_cpu</name><argument_list pos:start="93:32" pos:end="93:36">(<argument pos:start="93:33" pos:end="93:35"><expr pos:start="93:33" pos:end="93:35"><name pos:start="93:33" pos:end="93:35">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:43"><expr pos:start="95:5" pos:end="95:42"><name pos:start="95:5" pos:end="95:7">dev</name> <operator pos:start="95:9" pos:end="95:9">=</operator> <call pos:start="95:11" pos:end="95:42"><name pos:start="95:11" pos:end="95:21">qdev_create</name><argument_list pos:start="95:22" pos:end="95:42">(<argument pos:start="95:23" pos:end="95:26"><expr pos:start="95:23" pos:end="95:26"><name pos:start="95:23" pos:end="95:26">NULL</name></expr></argument>, <argument pos:start="95:29" pos:end="95:41"><expr pos:start="95:29" pos:end="95:41"><literal type="string" pos:start="95:29" pos:end="95:41">"etraxfs,pic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="97:5" pos:end="97:74">/* FIXME: Is there a proper way to signal vectors to the CPU core?  */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:71"><expr pos:start="99:5" pos:end="99:70"><call pos:start="99:5" pos:end="99:70"><name pos:start="99:5" pos:end="99:21">qdev_prop_set_ptr</name><argument_list pos:start="99:22" pos:end="99:70">(<argument pos:start="99:23" pos:end="99:25"><expr pos:start="99:23" pos:end="99:25"><name pos:start="99:23" pos:end="99:25">dev</name></expr></argument>, <argument pos:start="99:28" pos:end="99:45"><expr pos:start="99:28" pos:end="99:45"><literal type="string" pos:start="99:28" pos:end="99:45">"interrupt_vector"</literal></expr></argument>, <argument pos:start="99:48" pos:end="99:69"><expr pos:start="99:48" pos:end="99:69"><operator pos:start="99:48" pos:end="99:48">&amp;</operator><name pos:start="99:49" pos:end="99:69"><name pos:start="99:49" pos:end="99:51">env</name><operator pos:start="99:52" pos:end="99:53">-&gt;</operator><name pos:start="99:54" pos:end="99:69">interrupt_vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:19"><expr pos:start="101:5" pos:end="101:18"><call pos:start="101:5" pos:end="101:18"><name pos:start="101:5" pos:end="101:13">qdev_init</name><argument_list pos:start="101:14" pos:end="101:18">(<argument pos:start="101:15" pos:end="101:17"><expr pos:start="101:15" pos:end="101:17"><name pos:start="101:15" pos:end="101:17">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:30"><expr pos:start="103:5" pos:end="103:29"><name pos:start="103:5" pos:end="103:5">s</name> <operator pos:start="103:7" pos:end="103:7">=</operator> <call pos:start="103:9" pos:end="103:29"><name pos:start="103:9" pos:end="103:24">sysbus_from_qdev</name><argument_list pos:start="103:25" pos:end="103:29">(<argument pos:start="103:26" pos:end="103:28"><expr pos:start="103:26" pos:end="103:28"><name pos:start="103:26" pos:end="103:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:38"><expr pos:start="105:5" pos:end="105:37"><call pos:start="105:5" pos:end="105:37"><name pos:start="105:5" pos:end="105:19">sysbus_mmio_map</name><argument_list pos:start="105:20" pos:end="105:37">(<argument pos:start="105:21" pos:end="105:21"><expr pos:start="105:21" pos:end="105:21"><name pos:start="105:21" pos:end="105:21">s</name></expr></argument>, <argument pos:start="105:24" pos:end="105:24"><expr pos:start="105:24" pos:end="105:24"><literal type="number" pos:start="105:24" pos:end="105:24">0</literal></expr></argument>, <argument pos:start="105:27" pos:end="105:36"><expr pos:start="105:27" pos:end="105:36"><literal type="number" pos:start="105:27" pos:end="105:36">0x3001c000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:41"><expr pos:start="107:5" pos:end="107:40"><call pos:start="107:5" pos:end="107:40"><name pos:start="107:5" pos:end="107:22">sysbus_connect_irq</name><argument_list pos:start="107:23" pos:end="107:40">(<argument pos:start="107:24" pos:end="107:24"><expr pos:start="107:24" pos:end="107:24"><name pos:start="107:24" pos:end="107:24">s</name></expr></argument>, <argument pos:start="107:27" pos:end="107:27"><expr pos:start="107:27" pos:end="107:27"><literal type="number" pos:start="107:27" pos:end="107:27">0</literal></expr></argument>, <argument pos:start="107:30" pos:end="107:39"><expr pos:start="107:30" pos:end="107:39"><name pos:start="107:30" pos:end="107:39"><name pos:start="107:30" pos:end="107:36">cpu_irq</name><index pos:start="107:37" pos:end="107:39">[<expr pos:start="107:38" pos:end="107:38"><literal type="number" pos:start="107:38" pos:end="107:38">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:41"><expr pos:start="109:5" pos:end="109:40"><call pos:start="109:5" pos:end="109:40"><name pos:start="109:5" pos:end="109:22">sysbus_connect_irq</name><argument_list pos:start="109:23" pos:end="109:40">(<argument pos:start="109:24" pos:end="109:24"><expr pos:start="109:24" pos:end="109:24"><name pos:start="109:24" pos:end="109:24">s</name></expr></argument>, <argument pos:start="109:27" pos:end="109:27"><expr pos:start="109:27" pos:end="109:27"><literal type="number" pos:start="109:27" pos:end="109:27">1</literal></expr></argument>, <argument pos:start="109:30" pos:end="109:39"><expr pos:start="109:30" pos:end="109:39"><name pos:start="109:30" pos:end="109:39"><name pos:start="109:30" pos:end="109:36">cpu_irq</name><index pos:start="109:37" pos:end="109:39">[<expr pos:start="109:38" pos:end="109:38"><literal type="number" pos:start="109:38" pos:end="109:38">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="111:5" pos:end="115:5">for <control pos:start="111:9" pos:end="111:28">(<init pos:start="111:10" pos:end="111:15"><expr pos:start="111:10" pos:end="111:14"><name pos:start="111:10" pos:end="111:10">i</name> <operator pos:start="111:12" pos:end="111:12">=</operator> <literal type="number" pos:start="111:14" pos:end="111:14">0</literal></expr>;</init> <condition pos:start="111:17" pos:end="111:23"><expr pos:start="111:17" pos:end="111:22"><name pos:start="111:17" pos:end="111:17">i</name> <operator pos:start="111:19" pos:end="111:19">&lt;</operator> <literal type="number" pos:start="111:21" pos:end="111:22">30</literal></expr>;</condition> <incr pos:start="111:25" pos:end="111:27"><expr pos:start="111:25" pos:end="111:27"><name pos:start="111:25" pos:end="111:25">i</name><operator pos:start="111:26" pos:end="111:27">++</operator></expr></incr>)</control> <block pos:start="111:30" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:42">

        <expr_stmt pos:start="113:9" pos:end="113:42"><expr pos:start="113:9" pos:end="113:41"><name pos:start="113:9" pos:end="113:14"><name pos:start="113:9" pos:end="113:11">irq</name><index pos:start="113:12" pos:end="113:14">[<expr pos:start="113:13" pos:end="113:13"><name pos:start="113:13" pos:end="113:13">i</name></expr>]</index></name> <operator pos:start="113:16" pos:end="113:16">=</operator> <call pos:start="113:18" pos:end="113:41"><name pos:start="113:18" pos:end="113:33">qdev_get_gpio_in</name><argument_list pos:start="113:34" pos:end="113:41">(<argument pos:start="113:35" pos:end="113:37"><expr pos:start="113:35" pos:end="113:37"><name pos:start="113:35" pos:end="113:37">dev</name></expr></argument>, <argument pos:start="113:40" pos:end="113:40"><expr pos:start="113:40" pos:end="113:40"><name pos:start="113:40" pos:end="113:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="117:5" pos:end="117:39"><expr pos:start="117:5" pos:end="117:38"><name pos:start="117:5" pos:end="117:10"><name pos:start="117:5" pos:end="117:7">nmi</name><index pos:start="117:8" pos:end="117:10">[<expr pos:start="117:9" pos:end="117:9"><literal type="number" pos:start="117:9" pos:end="117:9">0</literal></expr>]</index></name> <operator pos:start="117:12" pos:end="117:12">=</operator> <call pos:start="117:14" pos:end="117:38"><name pos:start="117:14" pos:end="117:29">qdev_get_gpio_in</name><argument_list pos:start="117:30" pos:end="117:38">(<argument pos:start="117:31" pos:end="117:33"><expr pos:start="117:31" pos:end="117:33"><name pos:start="117:31" pos:end="117:33">dev</name></expr></argument>, <argument pos:start="117:36" pos:end="117:37"><expr pos:start="117:36" pos:end="117:37"><literal type="number" pos:start="117:36" pos:end="117:37">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:39"><expr pos:start="119:5" pos:end="119:38"><name pos:start="119:5" pos:end="119:10"><name pos:start="119:5" pos:end="119:7">nmi</name><index pos:start="119:8" pos:end="119:10">[<expr pos:start="119:9" pos:end="119:9"><literal type="number" pos:start="119:9" pos:end="119:9">1</literal></expr>]</index></name> <operator pos:start="119:12" pos:end="119:12">=</operator> <call pos:start="119:14" pos:end="119:38"><name pos:start="119:14" pos:end="119:29">qdev_get_gpio_in</name><argument_list pos:start="119:30" pos:end="119:38">(<argument pos:start="119:31" pos:end="119:33"><expr pos:start="119:31" pos:end="119:33"><name pos:start="119:31" pos:end="119:33">dev</name></expr></argument>, <argument pos:start="119:36" pos:end="119:37"><expr pos:start="119:36" pos:end="119:37"><literal type="number" pos:start="119:36" pos:end="119:37">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:53"><expr pos:start="123:5" pos:end="123:52"><name pos:start="123:5" pos:end="123:16">etraxfs_dmac</name> <operator pos:start="123:18" pos:end="123:18">=</operator> <call pos:start="123:20" pos:end="123:52"><name pos:start="123:20" pos:end="123:36">etraxfs_dmac_init</name><argument_list pos:start="123:37" pos:end="123:52">(<argument pos:start="123:38" pos:end="123:47"><expr pos:start="123:38" pos:end="123:47"><literal type="number" pos:start="123:38" pos:end="123:47">0x30000000</literal></expr></argument>, <argument pos:start="123:50" pos:end="123:51"><expr pos:start="123:50" pos:end="123:51"><literal type="number" pos:start="123:50" pos:end="123:51">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="125:5" pos:end="131:5">for <control pos:start="125:9" pos:end="125:28">(<init pos:start="125:10" pos:end="125:15"><expr pos:start="125:10" pos:end="125:14"><name pos:start="125:10" pos:end="125:10">i</name> <operator pos:start="125:12" pos:end="125:12">=</operator> <literal type="number" pos:start="125:14" pos:end="125:14">0</literal></expr>;</init> <condition pos:start="125:17" pos:end="125:23"><expr pos:start="125:17" pos:end="125:22"><name pos:start="125:17" pos:end="125:17">i</name> <operator pos:start="125:19" pos:end="125:19">&lt;</operator> <literal type="number" pos:start="125:21" pos:end="125:22">10</literal></expr>;</condition> <incr pos:start="125:25" pos:end="125:27"><expr pos:start="125:25" pos:end="125:27"><name pos:start="125:25" pos:end="125:25">i</name><operator pos:start="125:26" pos:end="125:27">++</operator></expr></incr>)</control> <block pos:start="125:30" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:66">

        <comment type="block" pos:start="127:9" pos:end="127:58">/* On ETRAX, odd numbered channels are inputs.  */</comment>

        <expr_stmt pos:start="129:9" pos:end="129:66"><expr pos:start="129:9" pos:end="129:65"><call pos:start="129:9" pos:end="129:65"><name pos:start="129:9" pos:end="129:28">etraxfs_dmac_connect</name><argument_list pos:start="129:29" pos:end="129:65">(<argument pos:start="129:30" pos:end="129:41"><expr pos:start="129:30" pos:end="129:41"><name pos:start="129:30" pos:end="129:41">etraxfs_dmac</name></expr></argument>, <argument pos:start="129:44" pos:end="129:44"><expr pos:start="129:44" pos:end="129:44"><name pos:start="129:44" pos:end="129:44">i</name></expr></argument>, <argument pos:start="129:47" pos:end="129:57"><expr pos:start="129:47" pos:end="129:57"><name pos:start="129:47" pos:end="129:49">irq</name> <operator pos:start="129:51" pos:end="129:51">+</operator> <literal type="number" pos:start="129:53" pos:end="129:55">7</literal> <operator pos:start="129:55" pos:end="129:55">+</operator> <name pos:start="129:57" pos:end="129:57">i</name></expr></argument>, <argument pos:start="129:60" pos:end="129:64"><expr pos:start="129:60" pos:end="129:64"><name pos:start="129:60" pos:end="129:60">i</name> <operator pos:start="129:62" pos:end="129:62">&amp;</operator> <literal type="number" pos:start="129:64" pos:end="129:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="135:5" pos:end="135:39">/* Add the two ethernet blocks.  */</comment>

    <expr_stmt pos:start="137:5" pos:end="137:59"><expr pos:start="137:5" pos:end="137:58"><name pos:start="137:5" pos:end="137:10"><name pos:start="137:5" pos:end="137:7">eth</name><index pos:start="137:8" pos:end="137:10">[<expr pos:start="137:9" pos:end="137:9"><literal type="number" pos:start="137:9" pos:end="137:9">0</literal></expr>]</index></name> <operator pos:start="137:12" pos:end="137:12">=</operator> <call pos:start="137:14" pos:end="137:58"><name pos:start="137:14" pos:end="137:29">etraxfs_eth_init</name><argument_list pos:start="137:30" pos:end="137:58">(<argument pos:start="137:31" pos:end="137:42"><expr pos:start="137:31" pos:end="137:42"><operator pos:start="137:31" pos:end="137:31">&amp;</operator><name pos:start="137:32" pos:end="137:42"><name pos:start="137:32" pos:end="137:39">nd_table</name><index pos:start="137:40" pos:end="137:42">[<expr pos:start="137:41" pos:end="137:41"><literal type="number" pos:start="137:41" pos:end="137:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="137:45" pos:end="137:54"><expr pos:start="137:45" pos:end="137:54"><literal type="number" pos:start="137:45" pos:end="137:54">0x30034000</literal></expr></argument>, <argument pos:start="137:57" pos:end="137:57"><expr pos:start="137:57" pos:end="137:57"><literal type="number" pos:start="137:57" pos:end="137:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="141:63"><if pos:start="139:5" pos:end="141:63">if <condition pos:start="139:8" pos:end="139:20">(<expr pos:start="139:9" pos:end="139:19"><name pos:start="139:9" pos:end="139:15">nb_nics</name> <operator pos:start="139:17" pos:end="139:17">&gt;</operator> <literal type="number" pos:start="139:19" pos:end="139:19">1</literal></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="141:63"><block_content pos:start="141:9" pos:end="141:63">

        <expr_stmt pos:start="141:9" pos:end="141:63"><expr pos:start="141:9" pos:end="141:62"><name pos:start="141:9" pos:end="141:14"><name pos:start="141:9" pos:end="141:11">eth</name><index pos:start="141:12" pos:end="141:14">[<expr pos:start="141:13" pos:end="141:13"><literal type="number" pos:start="141:13" pos:end="141:13">1</literal></expr>]</index></name> <operator pos:start="141:16" pos:end="141:16">=</operator> <call pos:start="141:18" pos:end="141:62"><name pos:start="141:18" pos:end="141:33">etraxfs_eth_init</name><argument_list pos:start="141:34" pos:end="141:62">(<argument pos:start="141:35" pos:end="141:46"><expr pos:start="141:35" pos:end="141:46"><operator pos:start="141:35" pos:end="141:35">&amp;</operator><name pos:start="141:36" pos:end="141:46"><name pos:start="141:36" pos:end="141:43">nd_table</name><index pos:start="141:44" pos:end="141:46">[<expr pos:start="141:45" pos:end="141:45"><literal type="number" pos:start="141:45" pos:end="141:45">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="141:49" pos:end="141:58"><expr pos:start="141:49" pos:end="141:58"><literal type="number" pos:start="141:49" pos:end="141:58">0x30036000</literal></expr></argument>, <argument pos:start="141:61" pos:end="141:61"><expr pos:start="141:61" pos:end="141:61"><literal type="number" pos:start="141:61" pos:end="141:61">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="145:5" pos:end="145:71">/* The DMA Connector block is missing, hardwire things for now.  */</comment>

    <expr_stmt pos:start="147:5" pos:end="147:57"><expr pos:start="147:5" pos:end="147:56"><call pos:start="147:5" pos:end="147:56"><name pos:start="147:5" pos:end="147:31">etraxfs_dmac_connect_client</name><argument_list pos:start="147:32" pos:end="147:56">(<argument pos:start="147:33" pos:end="147:44"><expr pos:start="147:33" pos:end="147:44"><name pos:start="147:33" pos:end="147:44">etraxfs_dmac</name></expr></argument>, <argument pos:start="147:47" pos:end="147:47"><expr pos:start="147:47" pos:end="147:47"><literal type="number" pos:start="147:47" pos:end="147:47">0</literal></expr></argument>, <argument pos:start="147:50" pos:end="147:55"><expr pos:start="147:50" pos:end="147:55"><name pos:start="147:50" pos:end="147:55"><name pos:start="147:50" pos:end="147:52">eth</name><index pos:start="147:53" pos:end="147:55">[<expr pos:start="147:54" pos:end="147:54"><literal type="number" pos:start="147:54" pos:end="147:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:61"><expr pos:start="149:5" pos:end="149:60"><call pos:start="149:5" pos:end="149:60"><name pos:start="149:5" pos:end="149:31">etraxfs_dmac_connect_client</name><argument_list pos:start="149:32" pos:end="149:60">(<argument pos:start="149:33" pos:end="149:44"><expr pos:start="149:33" pos:end="149:44"><name pos:start="149:33" pos:end="149:44">etraxfs_dmac</name></expr></argument>, <argument pos:start="149:47" pos:end="149:47"><expr pos:start="149:47" pos:end="149:47"><literal type="number" pos:start="149:47" pos:end="149:47">1</literal></expr></argument>, <argument pos:start="149:50" pos:end="149:59"><expr pos:start="149:50" pos:end="149:59"><name pos:start="149:50" pos:end="149:55"><name pos:start="149:50" pos:end="149:52">eth</name><index pos:start="149:53" pos:end="149:55">[<expr pos:start="149:54" pos:end="149:54"><literal type="number" pos:start="149:54" pos:end="149:54">0</literal></expr>]</index></name> <operator pos:start="149:57" pos:end="149:57">+</operator> <literal type="number" pos:start="149:59" pos:end="149:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="157:5"><if pos:start="151:5" pos:end="157:5">if <condition pos:start="151:8" pos:end="151:15">(<expr pos:start="151:9" pos:end="151:14"><name pos:start="151:9" pos:end="151:14"><name pos:start="151:9" pos:end="151:11">eth</name><index pos:start="151:12" pos:end="151:14">[<expr pos:start="151:13" pos:end="151:13"><literal type="number" pos:start="151:13" pos:end="151:13">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="151:17" pos:end="157:5">{<block_content pos:start="153:9" pos:end="155:65">

        <expr_stmt pos:start="153:9" pos:end="153:61"><expr pos:start="153:9" pos:end="153:60"><call pos:start="153:9" pos:end="153:60"><name pos:start="153:9" pos:end="153:35">etraxfs_dmac_connect_client</name><argument_list pos:start="153:36" pos:end="153:60">(<argument pos:start="153:37" pos:end="153:48"><expr pos:start="153:37" pos:end="153:48"><name pos:start="153:37" pos:end="153:48">etraxfs_dmac</name></expr></argument>, <argument pos:start="153:51" pos:end="153:51"><expr pos:start="153:51" pos:end="153:51"><literal type="number" pos:start="153:51" pos:end="153:51">6</literal></expr></argument>, <argument pos:start="153:54" pos:end="153:59"><expr pos:start="153:54" pos:end="153:59"><name pos:start="153:54" pos:end="153:59"><name pos:start="153:54" pos:end="153:56">eth</name><index pos:start="153:57" pos:end="153:59">[<expr pos:start="153:58" pos:end="153:58"><literal type="number" pos:start="153:58" pos:end="153:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:65"><expr pos:start="155:9" pos:end="155:64"><call pos:start="155:9" pos:end="155:64"><name pos:start="155:9" pos:end="155:35">etraxfs_dmac_connect_client</name><argument_list pos:start="155:36" pos:end="155:64">(<argument pos:start="155:37" pos:end="155:48"><expr pos:start="155:37" pos:end="155:48"><name pos:start="155:37" pos:end="155:48">etraxfs_dmac</name></expr></argument>, <argument pos:start="155:51" pos:end="155:51"><expr pos:start="155:51" pos:end="155:51"><literal type="number" pos:start="155:51" pos:end="155:51">7</literal></expr></argument>, <argument pos:start="155:54" pos:end="155:63"><expr pos:start="155:54" pos:end="155:63"><name pos:start="155:54" pos:end="155:59"><name pos:start="155:54" pos:end="155:56">eth</name><index pos:start="155:57" pos:end="155:59">[<expr pos:start="155:58" pos:end="155:58"><literal type="number" pos:start="155:58" pos:end="155:58">1</literal></expr>]</index></name> <operator pos:start="155:61" pos:end="155:61">+</operator> <literal type="number" pos:start="155:63" pos:end="155:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="161:5" pos:end="161:20">/* 2 timers.  */</comment>

    <expr_stmt pos:start="163:5" pos:end="163:80"><expr pos:start="163:5" pos:end="163:79"><call pos:start="163:5" pos:end="163:79"><name pos:start="163:5" pos:end="163:25">sysbus_create_varargs</name><argument_list pos:start="163:26" pos:end="163:79">(<argument pos:start="163:27" pos:end="163:41"><expr pos:start="163:27" pos:end="163:41"><literal type="string" pos:start="163:27" pos:end="163:41">"etraxfs,timer"</literal></expr></argument>, <argument pos:start="163:44" pos:end="163:53"><expr pos:start="163:44" pos:end="163:53"><literal type="number" pos:start="163:44" pos:end="163:53">0x3001e000</literal></expr></argument>, <argument pos:start="163:56" pos:end="163:64"><expr pos:start="163:56" pos:end="163:64"><name pos:start="163:56" pos:end="163:64"><name pos:start="163:56" pos:end="163:58">irq</name><index pos:start="163:59" pos:end="163:64">[<expr pos:start="163:60" pos:end="163:63"><literal type="number" pos:start="163:60" pos:end="163:63">0x1b</literal></expr>]</index></name></expr></argument>, <argument pos:start="163:67" pos:end="163:72"><expr pos:start="163:67" pos:end="163:72"><name pos:start="163:67" pos:end="163:72"><name pos:start="163:67" pos:end="163:69">nmi</name><index pos:start="163:70" pos:end="163:72">[<expr pos:start="163:71" pos:end="163:71"><literal type="number" pos:start="163:71" pos:end="163:71">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="163:75" pos:end="163:78"><expr pos:start="163:75" pos:end="163:78"><name pos:start="163:75" pos:end="163:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:80"><expr pos:start="165:5" pos:end="165:79"><call pos:start="165:5" pos:end="165:79"><name pos:start="165:5" pos:end="165:25">sysbus_create_varargs</name><argument_list pos:start="165:26" pos:end="165:79">(<argument pos:start="165:27" pos:end="165:41"><expr pos:start="165:27" pos:end="165:41"><literal type="string" pos:start="165:27" pos:end="165:41">"etraxfs,timer"</literal></expr></argument>, <argument pos:start="165:44" pos:end="165:53"><expr pos:start="165:44" pos:end="165:53"><literal type="number" pos:start="165:44" pos:end="165:53">0x3005e000</literal></expr></argument>, <argument pos:start="165:56" pos:end="165:64"><expr pos:start="165:56" pos:end="165:64"><name pos:start="165:56" pos:end="165:64"><name pos:start="165:56" pos:end="165:58">irq</name><index pos:start="165:59" pos:end="165:64">[<expr pos:start="165:60" pos:end="165:63"><literal type="number" pos:start="165:60" pos:end="165:63">0x1b</literal></expr>]</index></name></expr></argument>, <argument pos:start="165:67" pos:end="165:72"><expr pos:start="165:67" pos:end="165:72"><name pos:start="165:67" pos:end="165:72"><name pos:start="165:67" pos:end="165:69">nmi</name><index pos:start="165:70" pos:end="165:72">[<expr pos:start="165:71" pos:end="165:71"><literal type="number" pos:start="165:71" pos:end="165:71">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="165:75" pos:end="165:78"><expr pos:start="165:75" pos:end="165:78"><name pos:start="165:75" pos:end="165:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="169:5" pos:end="175:5">for <control pos:start="169:9" pos:end="169:27">(<init pos:start="169:10" pos:end="169:15"><expr pos:start="169:10" pos:end="169:14"><name pos:start="169:10" pos:end="169:10">i</name> <operator pos:start="169:12" pos:end="169:12">=</operator> <literal type="number" pos:start="169:14" pos:end="169:14">0</literal></expr>;</init> <condition pos:start="169:17" pos:end="169:22"><expr pos:start="169:17" pos:end="169:21"><name pos:start="169:17" pos:end="169:17">i</name> <operator pos:start="169:19" pos:end="169:19">&lt;</operator> <literal type="number" pos:start="169:21" pos:end="169:21">4</literal></expr>;</condition> <incr pos:start="169:24" pos:end="169:26"><expr pos:start="169:24" pos:end="169:26"><name pos:start="169:24" pos:end="169:24">i</name><operator pos:start="169:25" pos:end="169:26">++</operator></expr></incr>)</control> <block pos:start="169:29" pos:end="175:5">{<block_content pos:start="171:9" pos:end="173:44">

        <expr_stmt pos:start="171:9" pos:end="173:44"><expr pos:start="171:9" pos:end="173:43"><call pos:start="171:9" pos:end="173:43"><name pos:start="171:9" pos:end="171:28">sysbus_create_simple</name><argument_list pos:start="171:29" pos:end="173:43">(<argument pos:start="171:30" pos:end="171:45"><expr pos:start="171:30" pos:end="171:45"><literal type="string" pos:start="171:30" pos:end="171:45">"etraxfs,serial"</literal></expr></argument>, <argument pos:start="171:48" pos:end="171:70"><expr pos:start="171:48" pos:end="171:70"><literal type="number" pos:start="171:48" pos:end="171:59">0x30026000</literal> <operator pos:start="171:59" pos:end="171:59">+</operator> <name pos:start="171:61" pos:end="171:61">i</name> <operator pos:start="171:63" pos:end="171:63">*</operator> <literal type="number" pos:start="171:65" pos:end="171:70">0x2000</literal></expr></argument>,

                             <argument pos:start="173:30" pos:end="173:42"><expr pos:start="173:30" pos:end="173:42"><name pos:start="173:30" pos:end="173:42"><name pos:start="173:30" pos:end="173:32">irq</name><index pos:start="173:33" pos:end="173:42">[<expr pos:start="173:34" pos:end="173:41"><literal type="number" pos:start="173:34" pos:end="173:39">0x14</literal> <operator pos:start="173:39" pos:end="173:39">+</operator> <name pos:start="173:41" pos:end="173:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="179:5" pos:end="235:5"><if pos:start="179:5" pos:end="235:5">if <condition pos:start="179:8" pos:end="179:24">(<expr pos:start="179:9" pos:end="179:23"><name pos:start="179:9" pos:end="179:23">kernel_filename</name></expr>)</condition> <block pos:start="179:26" pos:end="235:5">{<block_content pos:start="181:9" pos:end="233:9">

        <decl_stmt pos:start="181:9" pos:end="181:29"><decl pos:start="181:9" pos:end="181:22"><type pos:start="181:9" pos:end="181:16"><name pos:start="181:9" pos:end="181:16">uint64_t</name></type> <name pos:start="181:18" pos:end="181:22">entry</name></decl>, <decl pos:start="181:25" pos:end="181:28"><type ref="prev" pos:start="181:9" pos:end="181:16"/><name pos:start="181:25" pos:end="181:28">high</name></decl>;</decl_stmt>

        <decl_stmt pos:start="183:9" pos:end="183:25"><decl pos:start="183:9" pos:end="183:24"><type pos:start="183:9" pos:end="183:11"><name pos:start="183:9" pos:end="183:11">int</name></type> <name pos:start="183:13" pos:end="183:24">kcmdline_len</name></decl>;</decl_stmt>



        <comment type="block" pos:start="187:9" pos:end="189:28">/* Boots a kernel elf binary, os/linux-2.6/vmlinux from the axis 

           devboard SDK.  */</comment>

        <expr_stmt pos:start="191:9" pos:end="193:71"><expr pos:start="191:9" pos:end="193:70"><name pos:start="191:9" pos:end="191:19">kernel_size</name> <operator pos:start="191:21" pos:end="191:21">=</operator> <call pos:start="191:23" pos:end="193:70"><name pos:start="191:23" pos:end="191:30">load_elf</name><argument_list pos:start="191:31" pos:end="193:70">(<argument pos:start="191:32" pos:end="191:46"><expr pos:start="191:32" pos:end="191:46"><name pos:start="191:32" pos:end="191:46">kernel_filename</name></expr></argument>, <argument pos:start="191:49" pos:end="191:61"><expr pos:start="191:49" pos:end="191:61"><operator pos:start="191:49" pos:end="191:49">-</operator><literal type="number" pos:start="191:50" pos:end="191:61">0x80000000LL</literal></expr></argument>,

                               <argument pos:start="193:32" pos:end="193:37"><expr pos:start="193:32" pos:end="193:37"><operator pos:start="193:32" pos:end="193:32">&amp;</operator><name pos:start="193:33" pos:end="193:37">entry</name></expr></argument>, <argument pos:start="193:40" pos:end="193:43"><expr pos:start="193:40" pos:end="193:43"><name pos:start="193:40" pos:end="193:43">NULL</name></expr></argument>, <argument pos:start="193:46" pos:end="193:50"><expr pos:start="193:46" pos:end="193:50"><operator pos:start="193:46" pos:end="193:46">&amp;</operator><name pos:start="193:47" pos:end="193:50">high</name></expr></argument>, <argument pos:start="193:53" pos:end="193:53"><expr pos:start="193:53" pos:end="193:53"><literal type="number" pos:start="193:53" pos:end="193:53">0</literal></expr></argument>, <argument pos:start="193:56" pos:end="193:66"><expr pos:start="193:56" pos:end="193:66"><name pos:start="193:56" pos:end="193:66">ELF_MACHINE</name></expr></argument>, <argument pos:start="193:69" pos:end="193:69"><expr pos:start="193:69" pos:end="193:69"><literal type="number" pos:start="193:69" pos:end="193:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:29"><expr pos:start="195:9" pos:end="195:28"><name pos:start="195:9" pos:end="195:20">bootstrap_pc</name> <operator pos:start="195:22" pos:end="195:22">=</operator> <name pos:start="195:24" pos:end="195:28">entry</name></expr>;</expr_stmt>

        <if_stmt pos:start="197:9" pos:end="209:9"><if pos:start="197:9" pos:end="209:9">if <condition pos:start="197:12" pos:end="197:28">(<expr pos:start="197:13" pos:end="197:27"><name pos:start="197:13" pos:end="197:23">kernel_size</name> <operator pos:start="197:25" pos:end="197:25">&lt;</operator> <literal type="number" pos:start="197:27" pos:end="197:27">0</literal></expr>)</condition> <block pos:start="197:30" pos:end="209:9">{<block_content pos:start="201:13" pos:end="207:52">

            <comment type="block" pos:start="199:13" pos:end="199:61">/* Takes a kimage from the axis devboard SDK.  */</comment>

            <expr_stmt pos:start="201:13" pos:end="203:56"><expr pos:start="201:13" pos:end="203:55"><name pos:start="201:13" pos:end="201:23">kernel_size</name> <operator pos:start="201:25" pos:end="201:25">=</operator> <call pos:start="201:27" pos:end="203:55"><name pos:start="201:27" pos:end="201:45">load_image_targphys</name><argument_list pos:start="201:46" pos:end="203:55">(<argument pos:start="201:47" pos:end="201:61"><expr pos:start="201:47" pos:end="201:61"><name pos:start="201:47" pos:end="201:61">kernel_filename</name></expr></argument>, <argument pos:start="201:64" pos:end="201:73"><expr pos:start="201:64" pos:end="201:73"><literal type="number" pos:start="201:64" pos:end="201:73">0x40004000</literal></expr></argument>,

                                              <argument pos:start="203:47" pos:end="203:54"><expr pos:start="203:47" pos:end="203:54"><name pos:start="203:47" pos:end="203:54">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:38"><expr pos:start="205:13" pos:end="205:37"><name pos:start="205:13" pos:end="205:24">bootstrap_pc</name> <operator pos:start="205:26" pos:end="205:26">=</operator> <literal type="number" pos:start="205:28" pos:end="205:37">0x40004000</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:52"><expr pos:start="207:13" pos:end="207:51"><name pos:start="207:13" pos:end="207:24"><name pos:start="207:13" pos:end="207:15">env</name><operator pos:start="207:16" pos:end="207:17">-&gt;</operator><name pos:start="207:18" pos:end="207:21">regs</name><index pos:start="207:22" pos:end="207:24">[<expr pos:start="207:23" pos:end="207:23"><literal type="number" pos:start="207:23" pos:end="207:23">9</literal></expr>]</index></name> <operator pos:start="207:26" pos:end="207:26">=</operator> <literal type="number" pos:start="207:28" pos:end="207:39">0x40004000</literal> <operator pos:start="207:39" pos:end="207:39">+</operator> <name pos:start="207:41" pos:end="207:51">kernel_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:34"><expr pos:start="211:9" pos:end="211:33"><name pos:start="211:9" pos:end="211:20"><name pos:start="211:9" pos:end="211:11">env</name><operator pos:start="211:12" pos:end="211:13">-&gt;</operator><name pos:start="211:14" pos:end="211:17">regs</name><index pos:start="211:18" pos:end="211:20">[<expr pos:start="211:19" pos:end="211:19"><literal type="number" pos:start="211:19" pos:end="211:19">8</literal></expr>]</index></name> <operator pos:start="211:22" pos:end="211:22">=</operator> <literal type="number" pos:start="211:24" pos:end="211:33">0x56902387</literal></expr>;</expr_stmt> <comment type="block" pos:start="211:36" pos:end="211:57">/* RAM init magic.  */</comment>



        <if_stmt pos:start="215:9" pos:end="233:9"><if pos:start="215:9" pos:end="233:9">if <condition pos:start="215:12" pos:end="215:70">(<expr pos:start="215:13" pos:end="215:69"><name pos:start="215:13" pos:end="215:26">kernel_cmdline</name> <operator pos:start="215:28" pos:end="215:29">&amp;&amp;</operator> <operator pos:start="215:31" pos:end="215:31">(</operator><name pos:start="215:32" pos:end="215:43">kcmdline_len</name> <operator pos:start="215:45" pos:end="215:45">=</operator> <call pos:start="215:47" pos:end="215:68"><name pos:start="215:47" pos:end="215:52">strlen</name><argument_list pos:start="215:53" pos:end="215:68">(<argument pos:start="215:54" pos:end="215:67"><expr pos:start="215:54" pos:end="215:67"><name pos:start="215:54" pos:end="215:67">kernel_cmdline</name></expr></argument>)</argument_list></call><operator pos:start="215:69" pos:end="215:69">)</operator></expr>)</condition> <block pos:start="215:72" pos:end="233:9">{<block_content pos:start="217:13" pos:end="231:65">

            <if_stmt pos:start="217:13" pos:end="223:13"><if pos:start="217:13" pos:end="223:13">if <condition pos:start="217:16" pos:end="217:35">(<expr pos:start="217:17" pos:end="217:34"><name pos:start="217:17" pos:end="217:28">kcmdline_len</name> <operator pos:start="217:30" pos:end="217:30">&gt;</operator> <literal type="number" pos:start="217:32" pos:end="217:34">256</literal></expr>)</condition> <block pos:start="217:37" pos:end="223:13">{<block_content pos:start="219:17" pos:end="221:24">

                <expr_stmt pos:start="219:17" pos:end="219:76"><expr pos:start="219:17" pos:end="219:75"><call pos:start="219:17" pos:end="219:75"><name pos:start="219:17" pos:end="219:23">fprintf</name><argument_list pos:start="219:24" pos:end="219:75">(<argument pos:start="219:25" pos:end="219:30"><expr pos:start="219:25" pos:end="219:30"><name pos:start="219:25" pos:end="219:30">stderr</name></expr></argument>, <argument pos:start="219:33" pos:end="219:74"><expr pos:start="219:33" pos:end="219:74"><literal type="string" pos:start="219:33" pos:end="219:74">"Too long CRIS kernel cmdline (max 256)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="221:17" pos:end="221:24"><expr pos:start="221:17" pos:end="221:23"><call pos:start="221:17" pos:end="221:23"><name pos:start="221:17" pos:end="221:20">exit</name><argument_list pos:start="221:21" pos:end="221:23">(<argument pos:start="221:22" pos:end="221:22"><expr pos:start="221:22" pos:end="221:22"><literal type="number" pos:start="221:22" pos:end="221:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="225:13" pos:end="225:68">/* Let the kernel know we are modifying the cmdline.  */</comment>

            <expr_stmt pos:start="227:13" pos:end="227:39"><expr pos:start="227:13" pos:end="227:38"><name pos:start="227:13" pos:end="227:25"><name pos:start="227:13" pos:end="227:15">env</name><operator pos:start="227:16" pos:end="227:17">-&gt;</operator><name pos:start="227:18" pos:end="227:21">regs</name><index pos:start="227:22" pos:end="227:25">[<expr pos:start="227:23" pos:end="227:24"><literal type="number" pos:start="227:23" pos:end="227:24">10</literal></expr>]</index></name> <operator pos:start="227:27" pos:end="227:27">=</operator> <literal type="number" pos:start="227:29" pos:end="227:38">0x87109563</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:39"><expr pos:start="229:13" pos:end="229:38"><name pos:start="229:13" pos:end="229:25"><name pos:start="229:13" pos:end="229:15">env</name><operator pos:start="229:16" pos:end="229:17">-&gt;</operator><name pos:start="229:18" pos:end="229:21">regs</name><index pos:start="229:22" pos:end="229:25">[<expr pos:start="229:23" pos:end="229:24"><literal type="number" pos:start="229:23" pos:end="229:24">11</literal></expr>]</index></name> <operator pos:start="229:27" pos:end="229:27">=</operator> <literal type="number" pos:start="229:29" pos:end="229:38">0x40000000</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:65"><expr pos:start="231:13" pos:end="231:64"><call pos:start="231:13" pos:end="231:64"><name pos:start="231:13" pos:end="231:28">pstrcpy_targphys</name><argument_list pos:start="231:29" pos:end="231:64">(<argument pos:start="231:30" pos:end="231:42"><expr pos:start="231:30" pos:end="231:42"><name pos:start="231:30" pos:end="231:42"><name pos:start="231:30" pos:end="231:32">env</name><operator pos:start="231:33" pos:end="231:34">-&gt;</operator><name pos:start="231:35" pos:end="231:38">regs</name><index pos:start="231:39" pos:end="231:42">[<expr pos:start="231:40" pos:end="231:41"><literal type="number" pos:start="231:40" pos:end="231:41">11</literal></expr>]</index></name></expr></argument>, <argument pos:start="231:45" pos:end="231:47"><expr pos:start="231:45" pos:end="231:47"><literal type="number" pos:start="231:45" pos:end="231:47">256</literal></expr></argument>, <argument pos:start="231:50" pos:end="231:63"><expr pos:start="231:50" pos:end="231:63"><name pos:start="231:50" pos:end="231:63">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:27"><expr pos:start="237:5" pos:end="237:26"><name pos:start="237:5" pos:end="237:11"><name pos:start="237:5" pos:end="237:7">env</name><operator pos:start="237:8" pos:end="237:9">-&gt;</operator><name pos:start="237:10" pos:end="237:11">pc</name></name> <operator pos:start="237:13" pos:end="237:13">=</operator> <name pos:start="237:15" pos:end="237:26">bootstrap_pc</name></expr>;</expr_stmt>



    <expr_stmt pos:start="241:5" pos:end="241:33"><expr pos:start="241:5" pos:end="241:32"><call pos:start="241:5" pos:end="241:32"><name pos:start="241:5" pos:end="241:10">printf</name> <argument_list pos:start="241:12" pos:end="241:32">(<argument pos:start="241:13" pos:end="241:22"><expr pos:start="241:13" pos:end="241:22"><literal type="string" pos:start="241:13" pos:end="241:22">"pc =%x\n"</literal></expr></argument>, <argument pos:start="241:25" pos:end="241:31"><expr pos:start="241:25" pos:end="241:31"><name pos:start="241:25" pos:end="241:31"><name pos:start="241:25" pos:end="241:27">env</name><operator pos:start="241:28" pos:end="241:29">-&gt;</operator><name pos:start="241:30" pos:end="241:31">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:41"><expr pos:start="243:5" pos:end="243:40"><call pos:start="243:5" pos:end="243:40"><name pos:start="243:5" pos:end="243:10">printf</name> <argument_list pos:start="243:12" pos:end="243:40">(<argument pos:start="243:13" pos:end="243:29"><expr pos:start="243:13" pos:end="243:29"><literal type="string" pos:start="243:13" pos:end="243:29">"ram size =%ld\n"</literal></expr></argument>, <argument pos:start="243:32" pos:end="243:39"><expr pos:start="243:32" pos:end="243:39"><name pos:start="243:32" pos:end="243:39">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
