<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1454.c" pos:tabs="8"><function pos:start="1:1" pos:end="14:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">test_visitor_in_fail_list</name><parameter_list pos:start="1:38" pos:end="2:57">(<parameter pos:start="1:39" pos:end="1:64"><decl pos:start="1:39" pos:end="1:64"><type pos:start="1:39" pos:end="1:64"><name pos:start="1:39" pos:end="1:58">TestInputVisitorData</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">data</name></decl></parameter>,
                                      <parameter pos:start="2:39" pos:end="2:56"><decl pos:start="2:39" pos:end="2:56"><type pos:start="2:39" pos:end="2:56"><specifier pos:start="2:39" pos:end="2:43">const</specifier> <name pos:start="2:45" pos:end="2:48">void</name> <modifier pos:start="2:50" pos:end="2:50">*</modifier></type><name pos:start="2:51" pos:end="2:56">unused</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="14:1">{<block_content pos:start="4:5" pos:end="13:30">
    <decl_stmt pos:start="4:5" pos:end="4:21"><decl pos:start="4:5" pos:end="4:20"><type pos:start="4:5" pos:end="4:11"><name pos:start="4:5" pos:end="4:11">int64_t</name></type> <name pos:start="4:13" pos:end="4:15">i64</name> <init pos:start="4:17" pos:end="4:20">= <expr pos:start="4:19" pos:end="4:20"><operator pos:start="4:19" pos:end="4:19">-</operator><literal type="number" pos:start="4:20" pos:end="4:20">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Error</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:14">err</name> <init pos:start="5:16" pos:end="5:21">= <expr pos:start="5:18" pos:end="5:21"><name pos:start="5:18" pos:end="5:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:15"><decl pos:start="6:5" pos:end="6:14"><type pos:start="6:5" pos:end="6:13"><name pos:start="6:5" pos:end="6:11">Visitor</name> <modifier pos:start="6:13" pos:end="6:13">*</modifier></type><name pos:start="6:14" pos:end="6:14">v</name></decl>;</decl_stmt>
    <comment type="block" pos:start="7:5" pos:end="7:29">/* Unvisited list tail */</comment>
    <expr_stmt pos:start="8:5" pos:end="8:53"><expr pos:start="8:5" pos:end="8:52"><name pos:start="8:5" pos:end="8:5">v</name> <operator pos:start="8:7" pos:end="8:7">=</operator> <call pos:start="8:9" pos:end="8:52"><name pos:start="8:9" pos:end="8:31">visitor_input_test_init</name><argument_list pos:start="8:32" pos:end="8:52">(<argument pos:start="8:33" pos:end="8:36"><expr pos:start="8:33" pos:end="8:36"><name pos:start="8:33" pos:end="8:36">data</name></expr></argument>, <argument pos:start="8:39" pos:end="8:51"><expr pos:start="8:39" pos:end="8:51"><literal type="string" pos:start="8:39" pos:end="8:51">"[ 1, 2, 3 ]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:48"><expr pos:start="9:5" pos:end="9:47"><call pos:start="9:5" pos:end="9:47"><name pos:start="9:5" pos:end="9:18">visit_type_int</name><argument_list pos:start="9:19" pos:end="9:47">(<argument pos:start="9:20" pos:end="9:20"><expr pos:start="9:20" pos:end="9:20"><name pos:start="9:20" pos:end="9:20">v</name></expr></argument>, <argument pos:start="9:23" pos:end="9:26"><expr pos:start="9:23" pos:end="9:26"><name pos:start="9:23" pos:end="9:26">NULL</name></expr></argument>, <argument pos:start="9:29" pos:end="9:32"><expr pos:start="9:29" pos:end="9:32"><operator pos:start="9:29" pos:end="9:29">&amp;</operator><name pos:start="9:30" pos:end="9:32">i64</name></expr></argument>, <argument pos:start="9:35" pos:end="9:46"><expr pos:start="9:35" pos:end="9:46"><operator pos:start="9:35" pos:end="9:35">&amp;</operator><name pos:start="9:36" pos:end="9:46">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:32"><expr pos:start="10:5" pos:end="10:31"><call pos:start="10:5" pos:end="10:31"><name pos:start="10:5" pos:end="10:19">g_assert_cmpint</name><argument_list pos:start="10:20" pos:end="10:31">(<argument pos:start="10:21" pos:end="10:23"><expr pos:start="10:21" pos:end="10:23"><name pos:start="10:21" pos:end="10:23">i64</name></expr></argument>, <argument pos:start="10:26" pos:end="10:27"><expr pos:start="10:26" pos:end="10:27"><operator pos:start="10:26" pos:end="10:27">==</operator></expr></argument>, <argument pos:start="10:30" pos:end="10:30"><expr pos:start="10:30" pos:end="10:30"><literal type="number" pos:start="10:30" pos:end="10:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:48"><expr pos:start="11:5" pos:end="11:47"><call pos:start="11:5" pos:end="11:47"><name pos:start="11:5" pos:end="11:18">visit_type_int</name><argument_list pos:start="11:19" pos:end="11:47">(<argument pos:start="11:20" pos:end="11:20"><expr pos:start="11:20" pos:end="11:20"><name pos:start="11:20" pos:end="11:20">v</name></expr></argument>, <argument pos:start="11:23" pos:end="11:26"><expr pos:start="11:23" pos:end="11:26"><name pos:start="11:23" pos:end="11:26">NULL</name></expr></argument>, <argument pos:start="11:29" pos:end="11:32"><expr pos:start="11:29" pos:end="11:32"><operator pos:start="11:29" pos:end="11:29">&amp;</operator><name pos:start="11:30" pos:end="11:32">i64</name></expr></argument>, <argument pos:start="11:35" pos:end="11:46"><expr pos:start="11:35" pos:end="11:46"><operator pos:start="11:35" pos:end="11:35">&amp;</operator><name pos:start="11:36" pos:end="11:46">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:32"><expr pos:start="12:5" pos:end="12:31"><call pos:start="12:5" pos:end="12:31"><name pos:start="12:5" pos:end="12:19">g_assert_cmpint</name><argument_list pos:start="12:20" pos:end="12:31">(<argument pos:start="12:21" pos:end="12:23"><expr pos:start="12:21" pos:end="12:23"><name pos:start="12:21" pos:end="12:23">i64</name></expr></argument>, <argument pos:start="12:26" pos:end="12:27"><expr pos:start="12:26" pos:end="12:27"><operator pos:start="12:26" pos:end="12:27">==</operator></expr></argument>, <argument pos:start="12:30" pos:end="12:30"><expr pos:start="12:30" pos:end="12:30"><literal type="number" pos:start="12:30" pos:end="12:30">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:30"><expr pos:start="13:5" pos:end="13:29"><call pos:start="13:5" pos:end="13:29"><name pos:start="13:5" pos:end="13:20">visit_check_list</name><argument_list pos:start="13:21" pos:end="13:29">(<argument pos:start="13:22" pos:end="13:22"><expr pos:start="13:22" pos:end="13:22"><name pos:start="13:22" pos:end="13:22">v</name></expr></argument>, <argument pos:start="13:25" pos:end="13:28"><expr pos:start="13:25" pos:end="13:28"><operator pos:start="13:25" pos:end="13:25">&amp;</operator><name pos:start="13:26" pos:end="13:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
