<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17055.c" pos:tabs="8"><function pos:start="1:1" pos:end="229:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">xen_hvm_init</name><parameter_list pos:start="1:17" pos:end="3:43">(<parameter pos:start="1:18" pos:end="1:46"><decl pos:start="1:18" pos:end="1:46"><type pos:start="1:18" pos:end="1:46"><name pos:start="1:18" pos:end="1:27">ram_addr_t</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:46">below_4g_mem_size</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:77"><decl pos:start="1:49" pos:end="1:77"><type pos:start="1:49" pos:end="1:77"><name pos:start="1:49" pos:end="1:58">ram_addr_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:77">above_4g_mem_size</name></decl></parameter>,

                 <parameter pos:start="3:18" pos:end="3:42"><decl pos:start="3:18" pos:end="3:42"><type pos:start="3:18" pos:end="3:42"><name pos:start="3:18" pos:end="3:29">MemoryRegion</name> <modifier pos:start="3:31" pos:end="3:31">*</modifier><modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:42">ram_memory</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="229:1">{<block_content pos:start="7:5" pos:end="227:13">

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:13"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:13">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">long</name></type> <name pos:start="9:19" pos:end="9:27">ioreq_pfn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">long</name></type> <name pos:start="11:19" pos:end="11:33">bufioreq_evtchn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">XenIOState</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:21">state</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:43"><expr pos:start="17:5" pos:end="17:42"><name pos:start="17:5" pos:end="17:9">state</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <call pos:start="17:13" pos:end="17:42"><name pos:start="17:13" pos:end="17:21">g_malloc0</name><argument_list pos:start="17:22" pos:end="17:42">(<argument pos:start="17:23" pos:end="17:41"><expr pos:start="17:23" pos:end="17:41"><sizeof pos:start="17:23" pos:end="17:41">sizeof <argument_list pos:start="17:30" pos:end="17:41">(<argument pos:start="17:31" pos:end="17:40"><expr pos:start="17:31" pos:end="17:40"><name pos:start="17:31" pos:end="17:40">XenIOState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:52"><expr pos:start="21:5" pos:end="21:51"><name pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:9">state</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:21">xce_handle</name></name> <operator pos:start="21:23" pos:end="21:23">=</operator> <call pos:start="21:25" pos:end="21:51"><name pos:start="21:25" pos:end="21:42">xen_xc_evtchn_open</name><argument_list pos:start="21:43" pos:end="21:51">(<argument pos:start="21:44" pos:end="21:47"><expr pos:start="21:44" pos:end="21:47"><name pos:start="21:44" pos:end="21:47">NULL</name></expr></argument>, <argument pos:start="21:50" pos:end="21:50"><expr pos:start="21:50" pos:end="21:50"><literal type="number" pos:start="21:50" pos:end="21:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:54">(<expr pos:start="23:9" pos:end="23:53"><name pos:start="23:9" pos:end="23:25"><name pos:start="23:9" pos:end="23:13">state</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:25">xce_handle</name></name> <operator pos:start="23:27" pos:end="23:28">==</operator> <name pos:start="23:30" pos:end="23:53">XC_HANDLER_INITIAL_VALUE</name></expr>)</condition> <block pos:start="23:56" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:18">

        <expr_stmt pos:start="25:9" pos:end="25:42"><expr pos:start="25:9" pos:end="25:41"><call pos:start="25:9" pos:end="25:41"><name pos:start="25:9" pos:end="25:14">perror</name><argument_list pos:start="25:15" pos:end="25:41">(<argument pos:start="25:16" pos:end="25:40"><expr pos:start="25:16" pos:end="25:40"><literal type="string" pos:start="25:16" pos:end="25:40">"xen: event channel open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:39"><expr pos:start="33:5" pos:end="33:38"><name pos:start="33:5" pos:end="33:19"><name pos:start="33:5" pos:end="33:9">state</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:19">xenstore</name></name> <operator pos:start="33:21" pos:end="33:21">=</operator> <call pos:start="33:23" pos:end="33:38"><name pos:start="33:23" pos:end="33:36">xs_daemon_open</name><argument_list pos:start="33:37" pos:end="33:38">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:32">(<expr pos:start="35:9" pos:end="35:31"><name pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:13">state</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:23">xenstore</name></name> <operator pos:start="35:25" pos:end="35:26">==</operator> <name pos:start="35:28" pos:end="35:31">NULL</name></expr>)</condition> <block pos:start="35:34" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:37"><expr pos:start="37:9" pos:end="37:36"><call pos:start="37:9" pos:end="37:36"><name pos:start="37:9" pos:end="37:14">perror</name><argument_list pos:start="37:15" pos:end="37:36">(<argument pos:start="37:16" pos:end="37:35"><expr pos:start="37:16" pos:end="37:35"><literal type="string" pos:start="37:16" pos:end="37:35">"xen: xenstore open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:43"><expr pos:start="45:5" pos:end="45:42"><name pos:start="45:5" pos:end="45:22"><name pos:start="45:5" pos:end="45:9">state</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:15">exit</name><operator pos:start="45:16" pos:end="45:16">.</operator><name pos:start="45:17" pos:end="45:22">notify</name></name> <operator pos:start="45:24" pos:end="45:24">=</operator> <name pos:start="45:26" pos:end="45:42">xen_exit_notifier</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:41"><expr pos:start="47:5" pos:end="47:40"><call pos:start="47:5" pos:end="47:40"><name pos:start="47:5" pos:end="47:26">qemu_add_exit_notifier</name><argument_list pos:start="47:27" pos:end="47:40">(<argument pos:start="47:28" pos:end="47:39"><expr pos:start="47:28" pos:end="47:39"><operator pos:start="47:28" pos:end="47:28">&amp;</operator><name pos:start="47:29" pos:end="47:39"><name pos:start="47:29" pos:end="47:33">state</name><operator pos:start="47:34" pos:end="47:35">-&gt;</operator><name pos:start="47:36" pos:end="47:39">exit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:49"><expr pos:start="51:5" pos:end="51:48"><name pos:start="51:5" pos:end="51:25"><name pos:start="51:5" pos:end="51:9">state</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:18">suspend</name><operator pos:start="51:19" pos:end="51:19">.</operator><name pos:start="51:20" pos:end="51:25">notify</name></name> <operator pos:start="51:27" pos:end="51:27">=</operator> <name pos:start="51:29" pos:end="51:48">xen_suspend_notifier</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:52"><expr pos:start="53:5" pos:end="53:51"><call pos:start="53:5" pos:end="53:51"><name pos:start="53:5" pos:end="53:34">qemu_register_suspend_notifier</name><argument_list pos:start="53:35" pos:end="53:51">(<argument pos:start="53:36" pos:end="53:50"><expr pos:start="53:36" pos:end="53:50"><operator pos:start="53:36" pos:end="53:36">&amp;</operator><name pos:start="53:37" pos:end="53:50"><name pos:start="53:37" pos:end="53:41">state</name><operator pos:start="53:42" pos:end="53:43">-&gt;</operator><name pos:start="53:44" pos:end="53:50">suspend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:47"><expr pos:start="57:5" pos:end="57:46"><name pos:start="57:5" pos:end="57:24"><name pos:start="57:5" pos:end="57:9">state</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:17">wakeup</name><operator pos:start="57:18" pos:end="57:18">.</operator><name pos:start="57:19" pos:end="57:24">notify</name></name> <operator pos:start="57:26" pos:end="57:26">=</operator> <name pos:start="57:28" pos:end="57:46">xen_wakeup_notifier</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:50"><expr pos:start="59:5" pos:end="59:49"><call pos:start="59:5" pos:end="59:49"><name pos:start="59:5" pos:end="59:33">qemu_register_wakeup_notifier</name><argument_list pos:start="59:34" pos:end="59:49">(<argument pos:start="59:35" pos:end="59:48"><expr pos:start="59:35" pos:end="59:48"><operator pos:start="59:35" pos:end="59:35">&amp;</operator><name pos:start="59:36" pos:end="59:48"><name pos:start="59:36" pos:end="59:40">state</name><operator pos:start="59:41" pos:end="59:42">-&gt;</operator><name pos:start="59:43" pos:end="59:48">wakeup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:73"><expr pos:start="63:5" pos:end="63:72"><call pos:start="63:5" pos:end="63:72"><name pos:start="63:5" pos:end="63:20">xc_get_hvm_param</name><argument_list pos:start="63:21" pos:end="63:72">(<argument pos:start="63:22" pos:end="63:27"><expr pos:start="63:22" pos:end="63:27"><name pos:start="63:22" pos:end="63:27">xen_xc</name></expr></argument>, <argument pos:start="63:30" pos:end="63:38"><expr pos:start="63:30" pos:end="63:38"><name pos:start="63:30" pos:end="63:38">xen_domid</name></expr></argument>, <argument pos:start="63:41" pos:end="63:59"><expr pos:start="63:41" pos:end="63:59"><name pos:start="63:41" pos:end="63:59">HVM_PARAM_IOREQ_PFN</name></expr></argument>, <argument pos:start="63:62" pos:end="63:71"><expr pos:start="63:62" pos:end="63:71"><operator pos:start="63:62" pos:end="63:62">&amp;</operator><name pos:start="63:63" pos:end="63:71">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:51"><expr pos:start="65:5" pos:end="65:50"><call pos:start="65:5" pos:end="65:50"><name pos:start="65:5" pos:end="65:11">DPRINTF</name><argument_list pos:start="65:12" pos:end="65:50">(<argument pos:start="65:13" pos:end="65:38"><expr pos:start="65:13" pos:end="65:38"><literal type="string" pos:start="65:13" pos:end="65:38">"shared page at pfn %lx\n"</literal></expr></argument>, <argument pos:start="65:41" pos:end="65:49"><expr pos:start="65:41" pos:end="65:49"><name pos:start="65:41" pos:end="65:49">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="69:79"><expr pos:start="67:5" pos:end="69:78"><name pos:start="67:5" pos:end="67:22"><name pos:start="67:5" pos:end="67:9">state</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:22">shared_page</name></name> <operator pos:start="67:24" pos:end="67:24">=</operator> <call pos:start="67:26" pos:end="69:78"><name pos:start="67:26" pos:end="67:45">xc_map_foreign_range</name><argument_list pos:start="67:46" pos:end="69:78">(<argument pos:start="67:47" pos:end="67:52"><expr pos:start="67:47" pos:end="67:52"><name pos:start="67:47" pos:end="67:52">xen_xc</name></expr></argument>, <argument pos:start="67:55" pos:end="67:63"><expr pos:start="67:55" pos:end="67:63"><name pos:start="67:55" pos:end="67:63">xen_domid</name></expr></argument>, <argument pos:start="67:66" pos:end="67:77"><expr pos:start="67:66" pos:end="67:77"><name pos:start="67:66" pos:end="67:77">XC_PAGE_SIZE</name></expr></argument>,

                                              <argument pos:start="69:47" pos:end="69:66"><expr pos:start="69:47" pos:end="69:66"><name pos:start="69:47" pos:end="69:55">PROT_READ</name><operator pos:start="69:56" pos:end="69:56">|</operator><name pos:start="69:57" pos:end="69:66">PROT_WRITE</name></expr></argument>, <argument pos:start="69:69" pos:end="69:77"><expr pos:start="69:69" pos:end="69:77"><name pos:start="69:69" pos:end="69:77">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="77:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:35">(<expr pos:start="71:9" pos:end="71:34"><name pos:start="71:9" pos:end="71:26"><name pos:start="71:9" pos:end="71:13">state</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:26">shared_page</name></name> <operator pos:start="71:28" pos:end="71:29">==</operator> <name pos:start="71:31" pos:end="71:34">NULL</name></expr>)</condition> <block pos:start="71:37" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:32">

        <expr_stmt pos:start="73:9" pos:end="75:32"><expr pos:start="73:9" pos:end="75:31"><call pos:start="73:9" pos:end="75:31"><name pos:start="73:9" pos:end="73:16">hw_error</name><argument_list pos:start="73:17" pos:end="75:31">(<argument pos:start="73:18" pos:end="73:80"><expr pos:start="73:18" pos:end="73:80"><literal type="string" pos:start="73:18" pos:end="73:63">"map shared IO page returned error %d handle="</literal> <name pos:start="73:65" pos:end="73:80">XC_INTERFACE_FMT</name></expr></argument>,

                 <argument pos:start="75:18" pos:end="75:22"><expr pos:start="75:18" pos:end="75:22"><name pos:start="75:18" pos:end="75:22">errno</name></expr></argument>, <argument pos:start="75:25" pos:end="75:30"><expr pos:start="75:25" pos:end="75:30"><name pos:start="75:25" pos:end="75:30">xen_xc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:64"><expr pos:start="81:5" pos:end="81:63"><name pos:start="81:5" pos:end="81:6">rc</name> <operator pos:start="81:8" pos:end="81:8">=</operator> <call pos:start="81:10" pos:end="81:63"><name pos:start="81:10" pos:end="81:32">xen_get_vmport_regs_pfn</name><argument_list pos:start="81:33" pos:end="81:63">(<argument pos:start="81:34" pos:end="81:39"><expr pos:start="81:34" pos:end="81:39"><name pos:start="81:34" pos:end="81:39">xen_xc</name></expr></argument>, <argument pos:start="81:42" pos:end="81:50"><expr pos:start="81:42" pos:end="81:50"><name pos:start="81:42" pos:end="81:50">xen_domid</name></expr></argument>, <argument pos:start="81:53" pos:end="81:62"><expr pos:start="81:53" pos:end="81:62"><operator pos:start="81:53" pos:end="81:53">&amp;</operator><name pos:start="81:54" pos:end="81:62">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="105:5"><if pos:start="83:5" pos:end="101:5">if <condition pos:start="83:8" pos:end="83:12">(<expr pos:start="83:9" pos:end="83:11"><operator pos:start="83:9" pos:end="83:9">!</operator><name pos:start="83:10" pos:end="83:11">rc</name></expr>)</condition> <block pos:start="83:14" pos:end="101:5">{<block_content pos:start="85:9" pos:end="99:9">

        <expr_stmt pos:start="85:9" pos:end="85:62"><expr pos:start="85:9" pos:end="85:61"><call pos:start="85:9" pos:end="85:61"><name pos:start="85:9" pos:end="85:15">DPRINTF</name><argument_list pos:start="85:16" pos:end="85:61">(<argument pos:start="85:17" pos:end="85:49"><expr pos:start="85:17" pos:end="85:49"><literal type="string" pos:start="85:17" pos:end="85:49">"shared vmport page at pfn %lx\n"</literal></expr></argument>, <argument pos:start="85:52" pos:end="85:60"><expr pos:start="85:52" pos:end="85:60"><name pos:start="85:52" pos:end="85:60">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="91:66"><expr pos:start="87:9" pos:end="91:65"><name pos:start="87:9" pos:end="87:33"><name pos:start="87:9" pos:end="87:13">state</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:33">shared_vmport_page</name></name> <operator pos:start="87:35" pos:end="87:35">=</operator>

            <call pos:start="89:13" pos:end="91:65"><name pos:start="89:13" pos:end="89:32">xc_map_foreign_range</name><argument_list pos:start="89:33" pos:end="91:65">(<argument pos:start="89:34" pos:end="89:39"><expr pos:start="89:34" pos:end="89:39"><name pos:start="89:34" pos:end="89:39">xen_xc</name></expr></argument>, <argument pos:start="89:42" pos:end="89:50"><expr pos:start="89:42" pos:end="89:50"><name pos:start="89:42" pos:end="89:50">xen_domid</name></expr></argument>, <argument pos:start="89:53" pos:end="89:64"><expr pos:start="89:53" pos:end="89:64"><name pos:start="89:53" pos:end="89:64">XC_PAGE_SIZE</name></expr></argument>,

                                 <argument pos:start="91:34" pos:end="91:53"><expr pos:start="91:34" pos:end="91:53"><name pos:start="91:34" pos:end="91:42">PROT_READ</name><operator pos:start="91:43" pos:end="91:43">|</operator><name pos:start="91:44" pos:end="91:53">PROT_WRITE</name></expr></argument>, <argument pos:start="91:56" pos:end="91:64"><expr pos:start="91:56" pos:end="91:64"><name pos:start="91:56" pos:end="91:64">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="99:9"><if pos:start="93:9" pos:end="99:9">if <condition pos:start="93:12" pos:end="93:46">(<expr pos:start="93:13" pos:end="93:45"><name pos:start="93:13" pos:end="93:37"><name pos:start="93:13" pos:end="93:17">state</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:37">shared_vmport_page</name></name> <operator pos:start="93:39" pos:end="93:40">==</operator> <name pos:start="93:42" pos:end="93:45">NULL</name></expr>)</condition> <block pos:start="93:48" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:54">

            <expr_stmt pos:start="95:13" pos:end="97:54"><expr pos:start="95:13" pos:end="97:53"><call pos:start="95:13" pos:end="97:53"><name pos:start="95:13" pos:end="95:20">hw_error</name><argument_list pos:start="95:21" pos:end="97:53">(<argument pos:start="95:22" pos:end="97:37"><expr pos:start="95:22" pos:end="97:37"><literal type="string" pos:start="95:22" pos:end="95:74">"map shared vmport IO page returned error %d handle="</literal>

                     <name pos:start="97:22" pos:end="97:37">XC_INTERFACE_FMT</name></expr></argument>, <argument pos:start="97:40" pos:end="97:44"><expr pos:start="97:40" pos:end="97:44"><name pos:start="97:40" pos:end="97:44">errno</name></expr></argument>, <argument pos:start="97:47" pos:end="97:52"><expr pos:start="97:47" pos:end="97:52"><name pos:start="97:47" pos:end="97:52">xen_xc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="101:7" pos:end="105:5">else if <condition pos:start="101:15" pos:end="101:29">(<expr pos:start="101:16" pos:end="101:28"><name pos:start="101:16" pos:end="101:17">rc</name> <operator pos:start="101:19" pos:end="101:20">!=</operator> <operator pos:start="101:22" pos:end="101:22">-</operator><name pos:start="101:23" pos:end="101:28">ENOSYS</name></expr>)</condition> <block pos:start="101:31" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:76">

        <expr_stmt pos:start="103:9" pos:end="103:76"><expr pos:start="103:9" pos:end="103:75"><call pos:start="103:9" pos:end="103:75"><name pos:start="103:9" pos:end="103:16">hw_error</name><argument_list pos:start="103:17" pos:end="103:75">(<argument pos:start="103:18" pos:end="103:63"><expr pos:start="103:18" pos:end="103:63"><literal type="string" pos:start="103:18" pos:end="103:63">"get vmport regs pfn returned error %d, rc=%d"</literal></expr></argument>, <argument pos:start="103:66" pos:end="103:70"><expr pos:start="103:66" pos:end="103:70"><name pos:start="103:66" pos:end="103:70">errno</name></expr></argument>, <argument pos:start="103:73" pos:end="103:74"><expr pos:start="103:73" pos:end="103:74"><name pos:start="103:73" pos:end="103:74">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:76"><expr pos:start="109:5" pos:end="109:75"><call pos:start="109:5" pos:end="109:75"><name pos:start="109:5" pos:end="109:20">xc_get_hvm_param</name><argument_list pos:start="109:21" pos:end="109:75">(<argument pos:start="109:22" pos:end="109:27"><expr pos:start="109:22" pos:end="109:27"><name pos:start="109:22" pos:end="109:27">xen_xc</name></expr></argument>, <argument pos:start="109:30" pos:end="109:38"><expr pos:start="109:30" pos:end="109:38"><name pos:start="109:30" pos:end="109:38">xen_domid</name></expr></argument>, <argument pos:start="109:41" pos:end="109:62"><expr pos:start="109:41" pos:end="109:62"><name pos:start="109:41" pos:end="109:62">HVM_PARAM_BUFIOREQ_PFN</name></expr></argument>, <argument pos:start="109:65" pos:end="109:74"><expr pos:start="109:65" pos:end="109:74"><operator pos:start="109:65" pos:end="109:65">&amp;</operator><name pos:start="109:66" pos:end="109:74">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:56"><expr pos:start="111:5" pos:end="111:55"><call pos:start="111:5" pos:end="111:55"><name pos:start="111:5" pos:end="111:11">DPRINTF</name><argument_list pos:start="111:12" pos:end="111:55">(<argument pos:start="111:13" pos:end="111:43"><expr pos:start="111:13" pos:end="111:43"><literal type="string" pos:start="111:13" pos:end="111:43">"buffered io page at pfn %lx\n"</literal></expr></argument>, <argument pos:start="111:46" pos:end="111:54"><expr pos:start="111:46" pos:end="111:54"><name pos:start="111:46" pos:end="111:54">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="115:84"><expr pos:start="113:5" pos:end="115:83"><name pos:start="113:5" pos:end="113:27"><name pos:start="113:5" pos:end="113:9">state</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:27">buffered_io_page</name></name> <operator pos:start="113:29" pos:end="113:29">=</operator> <call pos:start="113:31" pos:end="115:83"><name pos:start="113:31" pos:end="113:50">xc_map_foreign_range</name><argument_list pos:start="113:51" pos:end="115:83">(<argument pos:start="113:52" pos:end="113:57"><expr pos:start="113:52" pos:end="113:57"><name pos:start="113:52" pos:end="113:57">xen_xc</name></expr></argument>, <argument pos:start="113:60" pos:end="113:68"><expr pos:start="113:60" pos:end="113:68"><name pos:start="113:60" pos:end="113:68">xen_domid</name></expr></argument>, <argument pos:start="113:71" pos:end="113:82"><expr pos:start="113:71" pos:end="113:82"><name pos:start="113:71" pos:end="113:82">XC_PAGE_SIZE</name></expr></argument>,

                                                   <argument pos:start="115:52" pos:end="115:71"><expr pos:start="115:52" pos:end="115:71"><name pos:start="115:52" pos:end="115:60">PROT_READ</name><operator pos:start="115:61" pos:end="115:61">|</operator><name pos:start="115:62" pos:end="115:71">PROT_WRITE</name></expr></argument>, <argument pos:start="115:74" pos:end="115:82"><expr pos:start="115:74" pos:end="115:82"><name pos:start="115:74" pos:end="115:82">ioreq_pfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="121:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:40">(<expr pos:start="117:9" pos:end="117:39"><name pos:start="117:9" pos:end="117:31"><name pos:start="117:9" pos:end="117:13">state</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:31">buffered_io_page</name></name> <operator pos:start="117:33" pos:end="117:34">==</operator> <name pos:start="117:36" pos:end="117:39">NULL</name></expr>)</condition> <block pos:start="117:42" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:66">

        <expr_stmt pos:start="119:9" pos:end="119:66"><expr pos:start="119:9" pos:end="119:65"><call pos:start="119:9" pos:end="119:65"><name pos:start="119:9" pos:end="119:16">hw_error</name><argument_list pos:start="119:17" pos:end="119:65">(<argument pos:start="119:18" pos:end="119:57"><expr pos:start="119:18" pos:end="119:57"><literal type="string" pos:start="119:18" pos:end="119:57">"map buffered IO page returned error %d"</literal></expr></argument>, <argument pos:start="119:60" pos:end="119:64"><expr pos:start="119:60" pos:end="119:64"><name pos:start="119:60" pos:end="119:64">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:51">/* Note: cpus is empty at this point in init */</comment>

    <expr_stmt pos:start="127:5" pos:end="127:69"><expr pos:start="127:5" pos:end="127:68"><name pos:start="127:5" pos:end="127:25"><name pos:start="127:5" pos:end="127:9">state</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:25">cpu_by_vcpu_id</name></name> <operator pos:start="127:27" pos:end="127:27">=</operator> <call pos:start="127:29" pos:end="127:68"><name pos:start="127:29" pos:end="127:37">g_malloc0</name><argument_list pos:start="127:38" pos:end="127:68">(<argument pos:start="127:39" pos:end="127:67"><expr pos:start="127:39" pos:end="127:67"><name pos:start="127:39" pos:end="127:46">max_cpus</name> <operator pos:start="127:48" pos:end="127:48">*</operator> <sizeof pos:start="127:50" pos:end="127:67">sizeof<argument_list pos:start="127:56" pos:end="127:67">(<argument pos:start="127:57" pos:end="127:66"><expr pos:start="127:57" pos:end="127:66"><name pos:start="127:57" pos:end="127:64">CPUState</name> <operator pos:start="127:66" pos:end="127:66">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:75"><expr pos:start="131:5" pos:end="131:74"><name pos:start="131:5" pos:end="131:27"><name pos:start="131:5" pos:end="131:9">state</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:27">ioreq_local_port</name></name> <operator pos:start="131:29" pos:end="131:29">=</operator> <call pos:start="131:31" pos:end="131:74"><name pos:start="131:31" pos:end="131:39">g_malloc0</name><argument_list pos:start="131:40" pos:end="131:74">(<argument pos:start="131:41" pos:end="131:73"><expr pos:start="131:41" pos:end="131:73"><name pos:start="131:41" pos:end="131:48">max_cpus</name> <operator pos:start="131:50" pos:end="131:50">*</operator> <sizeof pos:start="131:52" pos:end="131:73">sizeof <argument_list pos:start="131:59" pos:end="131:73">(<argument pos:start="131:60" pos:end="131:72"><expr pos:start="131:60" pos:end="131:72"><name pos:start="131:60" pos:end="131:72">evtchn_port_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="135:5" pos:end="135:56">/* FIXME: how about if we overflow the page here? */</comment>

    <for pos:start="137:5" pos:end="153:5">for <control pos:start="137:9" pos:end="137:34">(<init pos:start="137:10" pos:end="137:15"><expr pos:start="137:10" pos:end="137:14"><name pos:start="137:10" pos:end="137:10">i</name> <operator pos:start="137:12" pos:end="137:12">=</operator> <literal type="number" pos:start="137:14" pos:end="137:14">0</literal></expr>;</init> <condition pos:start="137:17" pos:end="137:29"><expr pos:start="137:17" pos:end="137:28"><name pos:start="137:17" pos:end="137:17">i</name> <operator pos:start="137:19" pos:end="137:19">&lt;</operator> <name pos:start="137:21" pos:end="137:28">max_cpus</name></expr>;</condition> <incr pos:start="137:31" pos:end="137:33"><expr pos:start="137:31" pos:end="137:33"><name pos:start="137:31" pos:end="137:31">i</name><operator pos:start="137:32" pos:end="137:33">++</operator></expr></incr>)</control> <block pos:start="137:36" pos:end="153:5">{<block_content pos:start="139:9" pos:end="151:40">

        <expr_stmt pos:start="139:9" pos:end="141:79"><expr pos:start="139:9" pos:end="141:78"><name pos:start="139:9" pos:end="139:10">rc</name> <operator pos:start="139:12" pos:end="139:12">=</operator> <call pos:start="139:14" pos:end="141:78"><name pos:start="139:14" pos:end="139:39">xc_evtchn_bind_interdomain</name><argument_list pos:start="139:40" pos:end="141:78">(<argument pos:start="139:41" pos:end="139:57"><expr pos:start="139:41" pos:end="139:57"><name pos:start="139:41" pos:end="139:57"><name pos:start="139:41" pos:end="139:45">state</name><operator pos:start="139:46" pos:end="139:47">-&gt;</operator><name pos:start="139:48" pos:end="139:57">xce_handle</name></name></expr></argument>, <argument pos:start="139:60" pos:end="139:68"><expr pos:start="139:60" pos:end="139:68"><name pos:start="139:60" pos:end="139:68">xen_domid</name></expr></argument>,

                                        <argument pos:start="141:41" pos:end="141:77"><expr pos:start="141:41" pos:end="141:77"><call pos:start="141:41" pos:end="141:77"><name pos:start="141:41" pos:end="141:54">xen_vcpu_eport</name><argument_list pos:start="141:55" pos:end="141:77">(<argument pos:start="141:56" pos:end="141:73"><expr pos:start="141:56" pos:end="141:73"><name pos:start="141:56" pos:end="141:73"><name pos:start="141:56" pos:end="141:60">state</name><operator pos:start="141:61" pos:end="141:62">-&gt;</operator><name pos:start="141:63" pos:end="141:73">shared_page</name></name></expr></argument>, <argument pos:start="141:76" pos:end="141:76"><expr pos:start="141:76" pos:end="141:76"><name pos:start="141:76" pos:end="141:76">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="143:9" pos:end="149:9"><if pos:start="143:9" pos:end="149:9">if <condition pos:start="143:12" pos:end="143:21">(<expr pos:start="143:13" pos:end="143:20"><name pos:start="143:13" pos:end="143:14">rc</name> <operator pos:start="143:16" pos:end="143:17">==</operator> <operator pos:start="143:19" pos:end="143:19">-</operator><literal type="number" pos:start="143:20" pos:end="143:20">1</literal></expr>)</condition> <block pos:start="143:23" pos:end="149:9">{<block_content pos:start="145:13" pos:end="147:22">

            <expr_stmt pos:start="145:13" pos:end="145:72"><expr pos:start="145:13" pos:end="145:71"><call pos:start="145:13" pos:end="145:71"><name pos:start="145:13" pos:end="145:19">fprintf</name><argument_list pos:start="145:20" pos:end="145:71">(<argument pos:start="145:21" pos:end="145:26"><expr pos:start="145:21" pos:end="145:26"><name pos:start="145:21" pos:end="145:26">stderr</name></expr></argument>, <argument pos:start="145:29" pos:end="145:63"><expr pos:start="145:29" pos:end="145:63"><literal type="string" pos:start="145:29" pos:end="145:63">"bind interdomain ioctl error %d\n"</literal></expr></argument>, <argument pos:start="145:66" pos:end="145:70"><expr pos:start="145:66" pos:end="145:70"><name pos:start="145:66" pos:end="145:70">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="147:13" pos:end="147:22">return <expr pos:start="147:20" pos:end="147:21"><operator pos:start="147:20" pos:end="147:20">-</operator><literal type="number" pos:start="147:21" pos:end="147:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:40"><expr pos:start="151:9" pos:end="151:39"><name pos:start="151:9" pos:end="151:34"><name pos:start="151:9" pos:end="151:13">state</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:31">ioreq_local_port</name><index pos:start="151:32" pos:end="151:34">[<expr pos:start="151:33" pos:end="151:33"><name pos:start="151:33" pos:end="151:33">i</name></expr>]</index></name> <operator pos:start="151:36" pos:end="151:36">=</operator> <name pos:start="151:38" pos:end="151:39">rc</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="157:5" pos:end="159:30"><expr pos:start="157:5" pos:end="159:29"><name pos:start="157:5" pos:end="157:6">rc</name> <operator pos:start="157:8" pos:end="157:8">=</operator> <call pos:start="157:10" pos:end="159:29"><name pos:start="157:10" pos:end="157:25">xc_get_hvm_param</name><argument_list pos:start="157:26" pos:end="159:29">(<argument pos:start="157:27" pos:end="157:32"><expr pos:start="157:27" pos:end="157:32"><name pos:start="157:27" pos:end="157:32">xen_xc</name></expr></argument>, <argument pos:start="157:35" pos:end="157:43"><expr pos:start="157:35" pos:end="157:43"><name pos:start="157:35" pos:end="157:43">xen_domid</name></expr></argument>, <argument pos:start="157:46" pos:end="157:70"><expr pos:start="157:46" pos:end="157:70"><name pos:start="157:46" pos:end="157:70">HVM_PARAM_BUFIOREQ_EVTCHN</name></expr></argument>,

            <argument pos:start="159:13" pos:end="159:28"><expr pos:start="159:13" pos:end="159:28"><operator pos:start="159:13" pos:end="159:13">&amp;</operator><name pos:start="159:14" pos:end="159:28">bufioreq_evtchn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="161:5" pos:end="167:5"><if pos:start="161:5" pos:end="167:5">if <condition pos:start="161:8" pos:end="161:15">(<expr pos:start="161:9" pos:end="161:14"><name pos:start="161:9" pos:end="161:10">rc</name> <operator pos:start="161:12" pos:end="161:12">&lt;</operator> <literal type="number" pos:start="161:14" pos:end="161:14">0</literal></expr>)</condition> <block pos:start="161:17" pos:end="167:5">{<block_content pos:start="163:9" pos:end="165:18">

        <expr_stmt pos:start="163:9" pos:end="163:69"><expr pos:start="163:9" pos:end="163:68"><call pos:start="163:9" pos:end="163:68"><name pos:start="163:9" pos:end="163:15">fprintf</name><argument_list pos:start="163:16" pos:end="163:68">(<argument pos:start="163:17" pos:end="163:22"><expr pos:start="163:17" pos:end="163:22"><name pos:start="163:17" pos:end="163:22">stderr</name></expr></argument>, <argument pos:start="163:25" pos:end="163:67"><expr pos:start="163:25" pos:end="163:67"><literal type="string" pos:start="163:25" pos:end="163:67">"failed to get HVM_PARAM_BUFIOREQ_EVTCHN\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="165:9" pos:end="165:18">return <expr pos:start="165:16" pos:end="165:17"><operator pos:start="165:16" pos:end="165:16">-</operator><literal type="number" pos:start="165:17" pos:end="165:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="169:5" pos:end="171:39"><expr pos:start="169:5" pos:end="171:38"><name pos:start="169:5" pos:end="169:6">rc</name> <operator pos:start="169:8" pos:end="169:8">=</operator> <call pos:start="169:10" pos:end="171:38"><name pos:start="169:10" pos:end="169:35">xc_evtchn_bind_interdomain</name><argument_list pos:start="169:36" pos:end="171:38">(<argument pos:start="169:37" pos:end="169:53"><expr pos:start="169:37" pos:end="169:53"><name pos:start="169:37" pos:end="169:53"><name pos:start="169:37" pos:end="169:41">state</name><operator pos:start="169:42" pos:end="169:43">-&gt;</operator><name pos:start="169:44" pos:end="169:53">xce_handle</name></name></expr></argument>, <argument pos:start="169:56" pos:end="169:64"><expr pos:start="169:56" pos:end="169:64"><name pos:start="169:56" pos:end="169:64">xen_domid</name></expr></argument>,

            <argument pos:start="171:13" pos:end="171:37"><expr pos:start="171:13" pos:end="171:37"><operator pos:start="171:13" pos:end="171:13">(</operator><name pos:start="171:14" pos:end="171:21">uint32_t</name><operator pos:start="171:22" pos:end="171:22">)</operator><name pos:start="171:23" pos:end="171:37">bufioreq_evtchn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="173:5" pos:end="179:5"><if pos:start="173:5" pos:end="179:5">if <condition pos:start="173:8" pos:end="173:17">(<expr pos:start="173:9" pos:end="173:16"><name pos:start="173:9" pos:end="173:10">rc</name> <operator pos:start="173:12" pos:end="173:13">==</operator> <operator pos:start="173:15" pos:end="173:15">-</operator><literal type="number" pos:start="173:16" pos:end="173:16">1</literal></expr>)</condition> <block pos:start="173:19" pos:end="179:5">{<block_content pos:start="175:9" pos:end="177:18">

        <expr_stmt pos:start="175:9" pos:end="175:68"><expr pos:start="175:9" pos:end="175:67"><call pos:start="175:9" pos:end="175:67"><name pos:start="175:9" pos:end="175:15">fprintf</name><argument_list pos:start="175:16" pos:end="175:67">(<argument pos:start="175:17" pos:end="175:22"><expr pos:start="175:17" pos:end="175:22"><name pos:start="175:17" pos:end="175:22">stderr</name></expr></argument>, <argument pos:start="175:25" pos:end="175:59"><expr pos:start="175:25" pos:end="175:59"><literal type="string" pos:start="175:25" pos:end="175:59">"bind interdomain ioctl error %d\n"</literal></expr></argument>, <argument pos:start="175:62" pos:end="175:66"><expr pos:start="175:62" pos:end="175:66"><name pos:start="175:62" pos:end="175:66">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="177:9" pos:end="177:18">return <expr pos:start="177:16" pos:end="177:17"><operator pos:start="177:16" pos:end="177:16">-</operator><literal type="number" pos:start="177:17" pos:end="177:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:36"><expr pos:start="181:5" pos:end="181:35"><name pos:start="181:5" pos:end="181:30"><name pos:start="181:5" pos:end="181:9">state</name><operator pos:start="181:10" pos:end="181:11">-&gt;</operator><name pos:start="181:12" pos:end="181:30">bufioreq_local_port</name></name> <operator pos:start="181:32" pos:end="181:32">=</operator> <name pos:start="181:34" pos:end="181:35">rc</name></expr>;</expr_stmt>



    <comment type="block" pos:start="185:5" pos:end="185:29">/* Init RAM management */</comment>

    <expr_stmt pos:start="187:5" pos:end="187:56"><expr pos:start="187:5" pos:end="187:55"><call pos:start="187:5" pos:end="187:55"><name pos:start="187:5" pos:end="187:22">xen_map_cache_init</name><argument_list pos:start="187:23" pos:end="187:55">(<argument pos:start="187:24" pos:end="187:47"><expr pos:start="187:24" pos:end="187:47"><name pos:start="187:24" pos:end="187:47">xen_phys_offset_to_gaddr</name></expr></argument>, <argument pos:start="187:50" pos:end="187:54"><expr pos:start="187:50" pos:end="187:54"><name pos:start="187:50" pos:end="187:54">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:77"><expr pos:start="189:5" pos:end="189:76"><call pos:start="189:5" pos:end="189:76"><name pos:start="189:5" pos:end="189:16">xen_ram_init</name><argument_list pos:start="189:17" pos:end="189:76">(<argument pos:start="189:18" pos:end="189:34"><expr pos:start="189:18" pos:end="189:34"><name pos:start="189:18" pos:end="189:34">below_4g_mem_size</name></expr></argument>, <argument pos:start="189:37" pos:end="189:53"><expr pos:start="189:37" pos:end="189:53"><name pos:start="189:37" pos:end="189:53">above_4g_mem_size</name></expr></argument>, <argument pos:start="189:56" pos:end="189:63"><expr pos:start="189:56" pos:end="189:63"><name pos:start="189:56" pos:end="189:63">ram_size</name></expr></argument>, <argument pos:start="189:66" pos:end="189:75"><expr pos:start="189:66" pos:end="189:75"><name pos:start="189:66" pos:end="189:75">ram_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:74"><expr pos:start="193:5" pos:end="193:73"><call pos:start="193:5" pos:end="193:73"><name pos:start="193:5" pos:end="193:36">qemu_add_vm_change_state_handler</name><argument_list pos:start="193:37" pos:end="193:73">(<argument pos:start="193:38" pos:end="193:65"><expr pos:start="193:38" pos:end="193:65"><name pos:start="193:38" pos:end="193:65">xen_hvm_change_state_handler</name></expr></argument>, <argument pos:start="193:68" pos:end="193:72"><expr pos:start="193:68" pos:end="193:72"><name pos:start="193:68" pos:end="193:72">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:49"><expr pos:start="197:5" pos:end="197:48"><name pos:start="197:5" pos:end="197:26"><name pos:start="197:5" pos:end="197:9">state</name><operator pos:start="197:10" pos:end="197:11">-&gt;</operator><name pos:start="197:12" pos:end="197:26">memory_listener</name></name> <operator pos:start="197:28" pos:end="197:28">=</operator> <name pos:start="197:30" pos:end="197:48">xen_memory_listener</name></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:32"><expr pos:start="199:5" pos:end="199:31"><call pos:start="199:5" pos:end="199:31"><name pos:start="199:5" pos:end="199:14">QLIST_INIT</name><argument_list pos:start="199:15" pos:end="199:31">(<argument pos:start="199:16" pos:end="199:30"><expr pos:start="199:16" pos:end="199:30"><operator pos:start="199:16" pos:end="199:16">&amp;</operator><name pos:start="199:17" pos:end="199:30"><name pos:start="199:17" pos:end="199:21">state</name><operator pos:start="199:22" pos:end="199:23">-&gt;</operator><name pos:start="199:24" pos:end="199:30">physmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:77"><expr pos:start="201:5" pos:end="201:76"><call pos:start="201:5" pos:end="201:76"><name pos:start="201:5" pos:end="201:28">memory_listener_register</name><argument_list pos:start="201:29" pos:end="201:76">(<argument pos:start="201:30" pos:end="201:52"><expr pos:start="201:30" pos:end="201:52"><operator pos:start="201:30" pos:end="201:30">&amp;</operator><name pos:start="201:31" pos:end="201:52"><name pos:start="201:31" pos:end="201:35">state</name><operator pos:start="201:36" pos:end="201:37">-&gt;</operator><name pos:start="201:38" pos:end="201:52">memory_listener</name></name></expr></argument>, <argument pos:start="201:55" pos:end="201:75"><expr pos:start="201:55" pos:end="201:75"><operator pos:start="201:55" pos:end="201:55">&amp;</operator><name pos:start="201:56" pos:end="201:75">address_space_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:35"><expr pos:start="203:5" pos:end="203:34"><name pos:start="203:5" pos:end="203:27"><name pos:start="203:5" pos:end="203:9">state</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:27">log_for_dirtybit</name></name> <operator pos:start="203:29" pos:end="203:29">=</operator> <name pos:start="203:31" pos:end="203:34">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="207:5" pos:end="207:43">/* Initialize backend core &amp; drivers */</comment>

    <if_stmt pos:start="209:5" pos:end="215:5"><if pos:start="209:5" pos:end="215:5">if <condition pos:start="209:8" pos:end="209:27">(<expr pos:start="209:9" pos:end="209:26"><call pos:start="209:9" pos:end="209:21"><name pos:start="209:9" pos:end="209:19">xen_be_init</name><argument_list pos:start="209:20" pos:end="209:21">()</argument_list></call> <operator pos:start="209:23" pos:end="209:24">!=</operator> <literal type="number" pos:start="209:26" pos:end="209:26">0</literal></expr>)</condition> <block pos:start="209:29" pos:end="215:5">{<block_content pos:start="211:9" pos:end="213:18">

        <expr_stmt pos:start="211:9" pos:end="211:77"><expr pos:start="211:9" pos:end="211:76"><call pos:start="211:9" pos:end="211:76"><name pos:start="211:9" pos:end="211:15">fprintf</name><argument_list pos:start="211:16" pos:end="211:76">(<argument pos:start="211:17" pos:end="211:22"><expr pos:start="211:17" pos:end="211:22"><name pos:start="211:17" pos:end="211:22">stderr</name></expr></argument>, <argument pos:start="211:25" pos:end="211:61"><expr pos:start="211:25" pos:end="211:61"><literal type="string" pos:start="211:25" pos:end="211:61">"%s: xen backend core setup failed\n"</literal></expr></argument>, <argument pos:start="211:64" pos:end="211:75"><expr pos:start="211:64" pos:end="211:75"><name pos:start="211:64" pos:end="211:75">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="213:9" pos:end="213:18">return <expr pos:start="213:16" pos:end="213:17"><operator pos:start="213:16" pos:end="213:16">-</operator><literal type="number" pos:start="213:17" pos:end="213:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:49"><expr pos:start="217:5" pos:end="217:48"><call pos:start="217:5" pos:end="217:48"><name pos:start="217:5" pos:end="217:19">xen_be_register</name><argument_list pos:start="217:20" pos:end="217:48">(<argument pos:start="217:21" pos:end="217:29"><expr pos:start="217:21" pos:end="217:29"><literal type="string" pos:start="217:21" pos:end="217:29">"console"</literal></expr></argument>, <argument pos:start="217:32" pos:end="217:47"><expr pos:start="217:32" pos:end="217:47"><operator pos:start="217:32" pos:end="217:32">&amp;</operator><name pos:start="217:33" pos:end="217:47">xen_console_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:47"><expr pos:start="219:5" pos:end="219:46"><call pos:start="219:5" pos:end="219:46"><name pos:start="219:5" pos:end="219:19">xen_be_register</name><argument_list pos:start="219:20" pos:end="219:46">(<argument pos:start="219:21" pos:end="219:26"><expr pos:start="219:21" pos:end="219:26"><literal type="string" pos:start="219:21" pos:end="219:26">"vkbd"</literal></expr></argument>, <argument pos:start="219:29" pos:end="219:45"><expr pos:start="219:29" pos:end="219:45"><operator pos:start="219:29" pos:end="219:29">&amp;</operator><name pos:start="219:30" pos:end="219:45">xen_kbdmouse_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:46"><expr pos:start="221:5" pos:end="221:45"><call pos:start="221:5" pos:end="221:45"><name pos:start="221:5" pos:end="221:19">xen_be_register</name><argument_list pos:start="221:20" pos:end="221:45">(<argument pos:start="221:21" pos:end="221:27"><expr pos:start="221:21" pos:end="221:27"><literal type="string" pos:start="221:21" pos:end="221:27">"qdisk"</literal></expr></argument>, <argument pos:start="221:30" pos:end="221:44"><expr pos:start="221:30" pos:end="221:44"><operator pos:start="221:30" pos:end="221:30">&amp;</operator><name pos:start="221:31" pos:end="221:44">xen_blkdev_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:28"><expr pos:start="223:5" pos:end="223:27"><call pos:start="223:5" pos:end="223:27"><name pos:start="223:5" pos:end="223:20">xen_read_physmap</name><argument_list pos:start="223:21" pos:end="223:27">(<argument pos:start="223:22" pos:end="223:26"><expr pos:start="223:22" pos:end="223:26"><name pos:start="223:22" pos:end="223:26">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="227:5" pos:end="227:13">return <expr pos:start="227:12" pos:end="227:12"><literal type="number" pos:start="227:12" pos:end="227:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
