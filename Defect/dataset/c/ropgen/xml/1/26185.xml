<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26185.c" pos:tabs="8"><function pos:start="1:1" pos:end="204:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">alloc_refcount_block</name><parameter_list pos:start="1:32" pos:end="2:53">(<parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:48">BlockDriverState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">bs</name></decl></parameter>,
    <parameter pos:start="2:5" pos:end="2:25"><decl pos:start="2:5" pos:end="2:25"><type pos:start="2:5" pos:end="2:25"><name pos:start="2:5" pos:end="2:11">int64_t</name></type> <name pos:start="2:13" pos:end="2:25">cluster_index</name></decl></parameter>, <parameter pos:start="2:28" pos:end="2:52"><decl pos:start="2:28" pos:end="2:52"><type pos:start="2:28" pos:end="2:52"><name pos:start="2:28" pos:end="2:35">uint16_t</name> <modifier pos:start="2:37" pos:end="2:37">*</modifier><modifier pos:start="2:38" pos:end="2:38">*</modifier></type><name pos:start="2:39" pos:end="2:52">refcount_block</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="204:15">{<block_content pos:start="4:5" pos:end="204:15">
    <decl_stmt pos:start="4:5" pos:end="4:34"><decl pos:start="4:5" pos:end="4:33"><type pos:start="4:5" pos:end="4:19"><name pos:start="4:5" pos:end="4:17">BDRVQcowState</name> <modifier pos:start="4:19" pos:end="4:19">*</modifier></type><name pos:start="4:20" pos:end="4:20">s</name> <init pos:start="4:22" pos:end="4:33">= <expr pos:start="4:24" pos:end="4:33"><name pos:start="4:24" pos:end="4:33"><name pos:start="4:24" pos:end="4:25">bs</name><operator pos:start="4:26" pos:end="4:27">-&gt;</operator><name pos:start="4:28" pos:end="4:33">opaque</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:37">refcount_table_index</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:12"><decl pos:start="6:5" pos:end="6:11"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:11">ret</name></decl>;</decl_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:50"><expr pos:start="7:5" pos:end="7:49"><call pos:start="7:5" pos:end="7:49"><name pos:start="7:5" pos:end="7:16">BLKDBG_EVENT</name><argument_list pos:start="7:17" pos:end="7:49">(<argument pos:start="7:18" pos:end="7:25"><expr pos:start="7:18" pos:end="7:25"><name pos:start="7:18" pos:end="7:25"><name pos:start="7:18" pos:end="7:19">bs</name><operator pos:start="7:20" pos:end="7:21">-&gt;</operator><name pos:start="7:22" pos:end="7:25">file</name></name></expr></argument>, <argument pos:start="7:28" pos:end="7:48"><expr pos:start="7:28" pos:end="7:48"><name pos:start="7:28" pos:end="7:48">BLKDBG_REFBLOCK_ALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="8:5" pos:end="8:55">/* Find the refcount block for the given cluster */</comment>
    <expr_stmt pos:start="9:5" pos:end="9:79"><expr pos:start="9:5" pos:end="9:78"><name pos:start="9:5" pos:end="9:24">refcount_table_index</name> <operator pos:start="9:26" pos:end="9:26">=</operator> <name pos:start="9:28" pos:end="9:40">cluster_index</name> <operator pos:start="9:42" pos:end="9:43">&gt;&gt;</operator> <operator pos:start="9:45" pos:end="9:45">(</operator><name pos:start="9:46" pos:end="9:60"><name pos:start="9:46" pos:end="9:46">s</name><operator pos:start="9:47" pos:end="9:48">-&gt;</operator><name pos:start="9:49" pos:end="9:60">cluster_bits</name></name> <operator pos:start="9:62" pos:end="9:62">-</operator> <name pos:start="9:64" pos:end="9:77">REFCOUNT_SHIFT</name><operator pos:start="9:78" pos:end="9:78">)</operator></expr>;</expr_stmt>
    <if_stmt pos:start="10:5" pos:end="204:15"><if pos:start="10:5" pos:end="204:15">if <condition pos:start="10:8" pos:end="10:54">(<expr pos:start="10:9" pos:end="10:53"><name pos:start="10:9" pos:end="10:28">refcount_table_index</name> <operator pos:start="10:30" pos:end="10:30">&lt;</operator> <name pos:start="10:32" pos:end="10:53"><name pos:start="10:32" pos:end="10:32">s</name><operator pos:start="10:33" pos:end="10:34">-&gt;</operator><name pos:start="10:35" pos:end="10:53">refcount_table_size</name></name></expr>)</condition> <block pos:start="10:56" pos:end="204:15">{<block_content pos:start="11:9" pos:end="204:15">
        <decl_stmt pos:start="11:9" pos:end="12:71"><decl pos:start="11:9" pos:end="12:70"><type pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:16">uint64_t</name></type> <name pos:start="11:18" pos:end="11:38">refcount_block_offset</name> <init pos:start="11:40" pos:end="12:70">=
            <expr pos:start="12:13" pos:end="12:70"><name pos:start="12:13" pos:end="12:51"><name pos:start="12:13" pos:end="12:13">s</name><operator pos:start="12:14" pos:end="12:15">-&gt;</operator><name pos:start="12:16" pos:end="12:29">refcount_table</name><index pos:start="12:30" pos:end="12:51">[<expr pos:start="12:31" pos:end="12:50"><name pos:start="12:31" pos:end="12:50">refcount_table_index</name></expr>]</index></name> <operator pos:start="12:53" pos:end="12:53">&amp;</operator> <name pos:start="12:55" pos:end="12:70">REFT_OFFSET_MASK</name></expr></init></decl>;</decl_stmt>
        <comment type="block" pos:start="13:9" pos:end="13:47">/* If it's already there, we're done */</comment>
        <if_stmt pos:start="14:9" pos:end="204:15"><if pos:start="14:9" pos:end="204:15">if <condition pos:start="14:12" pos:end="14:34">(<expr pos:start="14:13" pos:end="14:33"><name pos:start="14:13" pos:end="14:33">refcount_block_offset</name></expr>)</condition> <block pos:start="14:36" pos:end="204:15">{<block_content pos:start="15:14" pos:end="204:15">
             <return pos:start="15:14" pos:end="16:42">return <expr pos:start="15:21" pos:end="16:41"><call pos:start="15:21" pos:end="16:41"><name pos:start="15:21" pos:end="15:39">load_refcount_block</name><argument_list pos:start="15:40" pos:end="16:41">(<argument pos:start="15:41" pos:end="15:42"><expr pos:start="15:41" pos:end="15:42"><name pos:start="15:41" pos:end="15:42">bs</name></expr></argument>, <argument pos:start="15:45" pos:end="15:65"><expr pos:start="15:45" pos:end="15:65"><name pos:start="15:45" pos:end="15:65">refcount_block_offset</name></expr></argument>,
                 <argument pos:start="16:18" pos:end="16:40"><expr pos:start="16:18" pos:end="16:40"><operator pos:start="16:18" pos:end="16:18">(</operator><name pos:start="16:19" pos:end="16:22">void</name><operator pos:start="16:23" pos:end="16:23">*</operator><operator pos:start="16:24" pos:end="16:24">*</operator><operator pos:start="16:25" pos:end="16:25">)</operator> <name pos:start="16:27" pos:end="16:40">refcount_block</name></expr></argument>)</argument_list></call></expr>;</return>
    <comment type="block" pos:start="17:5" pos:end="38:7">/*
     * If we came here, we need to allocate something. Something is at least
     * a cluster for the new refcount block. It may also include a new refcount
     * table if the old refcount table is too small.
     *
     * Note that allocating clusters here needs some special care:
     *
     * - We can't use the normal qcow2_alloc_clusters(), it would try to
     *   increase the refcount and very likely we would end up with an endless
     *   recursion. Instead we must place the refcount blocks in a way that
     *   they can describe them themselves.
     *
     * - We need to consider that at this point we are inside update_refcounts
     *   and potentially doing an initial refcount increase. This means that
     *   some clusters have already been allocated by the caller, but their
     *   refcount isn't accurate yet. If we allocate clusters for metadata, we
     *   need to return -EAGAIN to signal the caller that it needs to restart
     *   the search for free clusters.
     *
     * - alloc_clusters_noref and qcow2_free_clusters may load a different
     *   refcount block into the cache
     */</comment>
    <expr_stmt pos:start="39:5" pos:end="39:27"><expr pos:start="39:5" pos:end="39:26"><operator pos:start="39:5" pos:end="39:5">*</operator><name pos:start="39:6" pos:end="39:19">refcount_block</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:26">NULL</name></expr>;</expr_stmt>
    <comment type="block" pos:start="40:5" pos:end="40:73">/* We write to the refcount table, so we might depend on L2 tables */</comment>
    <expr_stmt pos:start="41:5" pos:end="41:51"><expr pos:start="41:5" pos:end="41:50"><name pos:start="41:5" pos:end="41:7">ret</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:50"><name pos:start="41:11" pos:end="41:27">qcow2_cache_flush</name><argument_list pos:start="41:28" pos:end="41:50">(<argument pos:start="41:29" pos:end="41:30"><expr pos:start="41:29" pos:end="41:30"><name pos:start="41:29" pos:end="41:30">bs</name></expr></argument>, <argument pos:start="41:33" pos:end="41:49"><expr pos:start="41:33" pos:end="41:49"><name pos:start="41:33" pos:end="41:49"><name pos:start="41:33" pos:end="41:33">s</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:49">l2_table_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="42:5" pos:end="204:15"><if pos:start="42:5" pos:end="204:15">if <condition pos:start="42:8" pos:end="42:16">(<expr pos:start="42:9" pos:end="42:15"><name pos:start="42:9" pos:end="42:11">ret</name> <operator pos:start="42:13" pos:end="42:13">&lt;</operator> <literal type="number" pos:start="42:15" pos:end="42:15">0</literal></expr>)</condition> <block pos:start="42:18" pos:end="204:15">{<block_content pos:start="43:9" pos:end="204:15">
        <return pos:start="43:9" pos:end="43:19">return <expr pos:start="43:16" pos:end="43:18"><name pos:start="43:16" pos:end="43:18">ret</name></expr>;</return>
    <comment type="block" pos:start="44:5" pos:end="44:64">/* Allocate the refcount block itself and mark it as used */</comment>
    <decl_stmt pos:start="45:5" pos:end="45:66"><decl pos:start="45:5" pos:end="45:65"><type pos:start="45:5" pos:end="45:11"><name pos:start="45:5" pos:end="45:11">int64_t</name></type> <name pos:start="45:13" pos:end="45:21">new_block</name> <init pos:start="45:23" pos:end="45:65">= <expr pos:start="45:25" pos:end="45:65"><call pos:start="45:25" pos:end="45:65"><name pos:start="45:25" pos:end="45:44">alloc_clusters_noref</name><argument_list pos:start="45:45" pos:end="45:65">(<argument pos:start="45:46" pos:end="45:47"><expr pos:start="45:46" pos:end="45:47"><name pos:start="45:46" pos:end="45:47">bs</name></expr></argument>, <argument pos:start="45:50" pos:end="45:64"><expr pos:start="45:50" pos:end="45:64"><name pos:start="45:50" pos:end="45:64"><name pos:start="45:50" pos:end="45:50">s</name><operator pos:start="45:51" pos:end="45:52">-&gt;</operator><name pos:start="45:53" pos:end="45:64">cluster_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="46:5" pos:end="204:15"><if pos:start="46:5" pos:end="204:15">if <condition pos:start="46:8" pos:end="46:22">(<expr pos:start="46:9" pos:end="46:21"><name pos:start="46:9" pos:end="46:17">new_block</name> <operator pos:start="46:19" pos:end="46:19">&lt;</operator> <literal type="number" pos:start="46:21" pos:end="46:21">0</literal></expr>)</condition> <block pos:start="46:24" pos:end="204:15">{<block_content pos:start="47:9" pos:end="204:15">
        <return pos:start="47:9" pos:end="49:0">return <expr pos:start="47:16" pos:end="47:24"><name pos:start="47:16" pos:end="47:24">new_block</name></expr>;</return>
<cpp:ifdef pos:start="48:1" pos:end="48:19">#<cpp:directive pos:start="48:2" pos:end="48:6">ifdef</cpp:directive> <name pos:start="48:8" pos:end="48:19">DEBUG_ALLOC2</name></cpp:ifdef>
    <expr_stmt pos:start="49:5" pos:end="53:0"><expr pos:start="49:5" pos:end="51:74"><call pos:start="49:5" pos:end="51:74"><name pos:start="49:5" pos:end="49:11">fprintf</name><argument_list pos:start="49:12" pos:end="51:74">(<argument pos:start="49:13" pos:end="49:18"><expr pos:start="49:13" pos:end="49:18"><name pos:start="49:13" pos:end="49:18">stderr</name></expr></argument>, <argument pos:start="49:21" pos:end="50:27"><expr pos:start="49:21" pos:end="50:27"><literal type="string" pos:start="49:21" pos:end="49:61">"qcow2: Allocate refcount block %d for %"</literal> <name pos:start="49:63" pos:end="49:68">PRIx64</name>
        <literal type="string" pos:start="50:9" pos:end="50:15">" at %"</literal> <name pos:start="50:17" pos:end="50:22">PRIx64</name> <literal type="string" pos:start="50:24" pos:end="50:27">"\n"</literal></expr></argument>,
        <argument pos:start="51:9" pos:end="51:28"><expr pos:start="51:9" pos:end="51:28"><name pos:start="51:9" pos:end="51:28">refcount_table_index</name></expr></argument>, <argument pos:start="51:31" pos:end="51:62"><expr pos:start="51:31" pos:end="51:62"><name pos:start="51:31" pos:end="51:43">cluster_index</name> <operator pos:start="51:45" pos:end="51:46">&lt;&lt;</operator> <name pos:start="51:48" pos:end="51:62"><name pos:start="51:48" pos:end="51:48">s</name><operator pos:start="51:49" pos:end="51:50">-&gt;</operator><name pos:start="51:51" pos:end="51:62">cluster_bits</name></name></expr></argument>, <argument pos:start="51:65" pos:end="51:73"><expr pos:start="51:65" pos:end="51:73"><name pos:start="51:65" pos:end="51:73">new_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="52:1" pos:end="52:6">#<cpp:directive pos:start="52:2" pos:end="52:6">endif</cpp:directive></cpp:endif>
    <if_stmt pos:start="53:5" pos:end="204:15"><if pos:start="53:5" pos:end="204:15">if <condition pos:start="53:8" pos:end="53:79">(<expr pos:start="53:9" pos:end="53:78"><call pos:start="53:9" pos:end="53:78"><name pos:start="53:9" pos:end="53:30">in_same_refcount_block</name><argument_list pos:start="53:31" pos:end="53:78">(<argument pos:start="53:32" pos:end="53:32"><expr pos:start="53:32" pos:end="53:32"><name pos:start="53:32" pos:end="53:32">s</name></expr></argument>, <argument pos:start="53:35" pos:end="53:43"><expr pos:start="53:35" pos:end="53:43"><name pos:start="53:35" pos:end="53:43">new_block</name></expr></argument>, <argument pos:start="53:46" pos:end="53:77"><expr pos:start="53:46" pos:end="53:77"><name pos:start="53:46" pos:end="53:58">cluster_index</name> <operator pos:start="53:60" pos:end="53:61">&lt;&lt;</operator> <name pos:start="53:63" pos:end="53:77"><name pos:start="53:63" pos:end="53:63">s</name><operator pos:start="53:64" pos:end="53:65">-&gt;</operator><name pos:start="53:66" pos:end="53:77">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:81" pos:end="204:15">{<block_content pos:start="55:9" pos:end="204:15">
        <comment type="block" pos:start="54:9" pos:end="54:60">/* Zero the new refcount block before updating it */</comment>
        <expr_stmt pos:start="55:9" pos:end="56:37"><expr pos:start="55:9" pos:end="56:36"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="56:36"><name pos:start="55:15" pos:end="55:35">qcow2_cache_get_empty</name><argument_list pos:start="55:36" pos:end="56:36">(<argument pos:start="55:37" pos:end="55:38"><expr pos:start="55:37" pos:end="55:38"><name pos:start="55:37" pos:end="55:38">bs</name></expr></argument>, <argument pos:start="55:41" pos:end="55:63"><expr pos:start="55:41" pos:end="55:63"><name pos:start="55:41" pos:end="55:63"><name pos:start="55:41" pos:end="55:41">s</name><operator pos:start="55:42" pos:end="55:43">-&gt;</operator><name pos:start="55:44" pos:end="55:63">refcount_block_cache</name></name></expr></argument>, <argument pos:start="55:66" pos:end="55:74"><expr pos:start="55:66" pos:end="55:74"><name pos:start="55:66" pos:end="55:74">new_block</name></expr></argument>,
            <argument pos:start="56:13" pos:end="56:35"><expr pos:start="56:13" pos:end="56:35"><operator pos:start="56:13" pos:end="56:13">(</operator><name pos:start="56:14" pos:end="56:17">void</name><operator pos:start="56:18" pos:end="56:18">*</operator><operator pos:start="56:19" pos:end="56:19">*</operator><operator pos:start="56:20" pos:end="56:20">)</operator> <name pos:start="56:22" pos:end="56:35">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="57:9" pos:end="204:15"><if pos:start="57:9" pos:end="64:5">if <condition pos:start="57:12" pos:end="57:20">(<expr pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:15">ret</name> <operator pos:start="57:17" pos:end="57:17">&lt;</operator> <literal type="number" pos:start="57:19" pos:end="57:19">0</literal></expr>)</condition> <block pos:start="57:22" pos:end="64:5">{<block_content pos:start="58:13" pos:end="63:56">
            <goto pos:start="58:13" pos:end="58:28">goto <name pos:start="58:18" pos:end="58:27">fail_block</name>;</goto>
        <expr_stmt pos:start="59:9" pos:end="59:52"><expr pos:start="59:9" pos:end="59:51"><call pos:start="59:9" pos:end="59:51"><name pos:start="59:9" pos:end="59:14">memset</name><argument_list pos:start="59:15" pos:end="59:51">(<argument pos:start="59:16" pos:end="59:30"><expr pos:start="59:16" pos:end="59:30"><operator pos:start="59:16" pos:end="59:16">*</operator><name pos:start="59:17" pos:end="59:30">refcount_block</name></expr></argument>, <argument pos:start="59:33" pos:end="59:33"><expr pos:start="59:33" pos:end="59:33"><literal type="number" pos:start="59:33" pos:end="59:33">0</literal></expr></argument>, <argument pos:start="59:36" pos:end="59:50"><expr pos:start="59:36" pos:end="59:50"><name pos:start="59:36" pos:end="59:50"><name pos:start="59:36" pos:end="59:36">s</name><operator pos:start="59:37" pos:end="59:38">-&gt;</operator><name pos:start="59:39" pos:end="59:50">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="60:9" pos:end="60:66">/* The block describes itself, need to update the cache */</comment>
        <decl_stmt pos:start="61:9" pos:end="62:60"><decl pos:start="61:9" pos:end="62:59"><type pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">int</name></type> <name pos:start="61:13" pos:end="61:23">block_index</name> <init pos:start="61:25" pos:end="62:59">= <expr pos:start="61:27" pos:end="62:59"><operator pos:start="61:27" pos:end="61:27">(</operator><name pos:start="61:28" pos:end="61:36">new_block</name> <operator pos:start="61:38" pos:end="61:39">&gt;&gt;</operator> <name pos:start="61:41" pos:end="61:55"><name pos:start="61:41" pos:end="61:41">s</name><operator pos:start="61:42" pos:end="61:43">-&gt;</operator><name pos:start="61:44" pos:end="61:55">cluster_bits</name></name><operator pos:start="61:56" pos:end="61:56">)</operator> <operator pos:start="61:58" pos:end="61:58">&amp;</operator>
            <operator pos:start="62:13" pos:end="62:13">(</operator><operator pos:start="62:14" pos:end="62:14">(</operator><literal type="number" pos:start="62:15" pos:end="62:15">1</literal> <operator pos:start="62:17" pos:end="62:18">&lt;&lt;</operator> <operator pos:start="62:20" pos:end="62:20">(</operator><name pos:start="62:21" pos:end="62:35"><name pos:start="62:21" pos:end="62:21">s</name><operator pos:start="62:22" pos:end="62:23">-&gt;</operator><name pos:start="62:24" pos:end="62:35">cluster_bits</name></name> <operator pos:start="62:37" pos:end="62:37">-</operator> <name pos:start="62:39" pos:end="62:52">REFCOUNT_SHIFT</name><operator pos:start="62:53" pos:end="62:53">)</operator><operator pos:start="62:54" pos:end="62:54">)</operator> <operator pos:start="62:56" pos:end="62:56">-</operator> <literal type="number" pos:start="62:58" pos:end="62:58">1</literal><operator pos:start="62:59" pos:end="62:59">)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="63:9" pos:end="63:56"><expr pos:start="63:9" pos:end="63:55"><operator pos:start="63:9" pos:end="63:9">(</operator><operator pos:start="63:10" pos:end="63:10">*</operator><name pos:start="63:11" pos:end="63:24">refcount_block</name><operator pos:start="63:25" pos:end="63:25">)</operator><index pos:start="63:26" pos:end="63:38">[<expr pos:start="63:27" pos:end="63:37"><name pos:start="63:27" pos:end="63:37">block_index</name></expr>]</index> <operator pos:start="63:40" pos:end="63:40">=</operator> <call pos:start="63:42" pos:end="63:55"><name pos:start="63:42" pos:end="63:52">cpu_to_be16</name><argument_list pos:start="63:53" pos:end="63:55">(<argument pos:start="63:54" pos:end="63:54"><expr pos:start="63:54" pos:end="63:54"><literal type="number" pos:start="63:54" pos:end="63:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="64:7" pos:end="204:15">else <block pos:start="64:12" pos:end="204:15">{<block_content pos:start="67:9" pos:end="204:15">
        <comment type="block" pos:start="65:9" pos:end="66:54">/* Described somewhere else. This can recurse at most twice before we
         * arrive at a block that describes itself. */</comment>
        <expr_stmt pos:start="67:9" pos:end="68:51"><expr pos:start="67:9" pos:end="68:50"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="68:50"><name pos:start="67:15" pos:end="67:29">update_refcount</name><argument_list pos:start="67:30" pos:end="68:50">(<argument pos:start="67:31" pos:end="67:32"><expr pos:start="67:31" pos:end="67:32"><name pos:start="67:31" pos:end="67:32">bs</name></expr></argument>, <argument pos:start="67:35" pos:end="67:43"><expr pos:start="67:35" pos:end="67:43"><name pos:start="67:35" pos:end="67:43">new_block</name></expr></argument>, <argument pos:start="67:46" pos:end="67:60"><expr pos:start="67:46" pos:end="67:60"><name pos:start="67:46" pos:end="67:60"><name pos:start="67:46" pos:end="67:46">s</name><operator pos:start="67:47" pos:end="67:48">-&gt;</operator><name pos:start="67:49" pos:end="67:60">cluster_size</name></name></expr></argument>, <argument pos:start="67:63" pos:end="67:63"><expr pos:start="67:63" pos:end="67:63"><literal type="number" pos:start="67:63" pos:end="67:63">1</literal></expr></argument>,
                              <argument pos:start="68:31" pos:end="68:49"><expr pos:start="68:31" pos:end="68:49"><name pos:start="68:31" pos:end="68:49">QCOW2_DISCARD_NEVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="69:9" pos:end="204:15"><if pos:start="69:9" pos:end="204:15">if <condition pos:start="69:12" pos:end="69:20">(<expr pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:17">&lt;</operator> <literal type="number" pos:start="69:19" pos:end="69:19">0</literal></expr>)</condition> <block pos:start="69:22" pos:end="204:15">{<block_content pos:start="70:13" pos:end="204:15">
            <goto pos:start="70:13" pos:end="70:28">goto <name pos:start="70:18" pos:end="70:27">fail_block</name>;</goto>
        <expr_stmt pos:start="71:9" pos:end="71:61"><expr pos:start="71:9" pos:end="71:60"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:60"><name pos:start="71:15" pos:end="71:31">qcow2_cache_flush</name><argument_list pos:start="71:32" pos:end="71:60">(<argument pos:start="71:33" pos:end="71:34"><expr pos:start="71:33" pos:end="71:34"><name pos:start="71:33" pos:end="71:34">bs</name></expr></argument>, <argument pos:start="71:37" pos:end="71:59"><expr pos:start="71:37" pos:end="71:59"><name pos:start="71:37" pos:end="71:59"><name pos:start="71:37" pos:end="71:37">s</name><operator pos:start="71:38" pos:end="71:39">-&gt;</operator><name pos:start="71:40" pos:end="71:59">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="72:9" pos:end="204:15"><if pos:start="72:9" pos:end="204:15">if <condition pos:start="72:12" pos:end="72:20">(<expr pos:start="72:13" pos:end="72:19"><name pos:start="72:13" pos:end="72:15">ret</name> <operator pos:start="72:17" pos:end="72:17">&lt;</operator> <literal type="number" pos:start="72:19" pos:end="72:19">0</literal></expr>)</condition> <block pos:start="72:22" pos:end="204:15">{<block_content pos:start="73:13" pos:end="204:15">
            <goto pos:start="73:13" pos:end="73:28">goto <name pos:start="73:18" pos:end="73:27">fail_block</name>;</goto>
        <comment type="block" pos:start="74:9" pos:end="75:60">/* Initialize the new refcount block only after updating its refcount,
         * update_refcount uses the refcount cache itself */</comment>
        <expr_stmt pos:start="76:9" pos:end="77:37"><expr pos:start="76:9" pos:end="77:36"><name pos:start="76:9" pos:end="76:11">ret</name> <operator pos:start="76:13" pos:end="76:13">=</operator> <call pos:start="76:15" pos:end="77:36"><name pos:start="76:15" pos:end="76:35">qcow2_cache_get_empty</name><argument_list pos:start="76:36" pos:end="77:36">(<argument pos:start="76:37" pos:end="76:38"><expr pos:start="76:37" pos:end="76:38"><name pos:start="76:37" pos:end="76:38">bs</name></expr></argument>, <argument pos:start="76:41" pos:end="76:63"><expr pos:start="76:41" pos:end="76:63"><name pos:start="76:41" pos:end="76:63"><name pos:start="76:41" pos:end="76:41">s</name><operator pos:start="76:42" pos:end="76:43">-&gt;</operator><name pos:start="76:44" pos:end="76:63">refcount_block_cache</name></name></expr></argument>, <argument pos:start="76:66" pos:end="76:74"><expr pos:start="76:66" pos:end="76:74"><name pos:start="76:66" pos:end="76:74">new_block</name></expr></argument>,
            <argument pos:start="77:13" pos:end="77:35"><expr pos:start="77:13" pos:end="77:35"><operator pos:start="77:13" pos:end="77:13">(</operator><name pos:start="77:14" pos:end="77:17">void</name><operator pos:start="77:18" pos:end="77:18">*</operator><operator pos:start="77:19" pos:end="77:19">*</operator><operator pos:start="77:20" pos:end="77:20">)</operator> <name pos:start="77:22" pos:end="77:35">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="78:9" pos:end="204:15"><if pos:start="78:9" pos:end="204:15">if <condition pos:start="78:12" pos:end="78:20">(<expr pos:start="78:13" pos:end="78:19"><name pos:start="78:13" pos:end="78:15">ret</name> <operator pos:start="78:17" pos:end="78:17">&lt;</operator> <literal type="number" pos:start="78:19" pos:end="78:19">0</literal></expr>)</condition> <block pos:start="78:22" pos:end="204:15">{<block_content pos:start="79:13" pos:end="204:15">
            <goto pos:start="79:13" pos:end="79:28">goto <name pos:start="79:18" pos:end="79:27">fail_block</name>;</goto>
        <expr_stmt pos:start="80:9" pos:end="80:52"><expr pos:start="80:9" pos:end="80:51"><call pos:start="80:9" pos:end="80:51"><name pos:start="80:9" pos:end="80:14">memset</name><argument_list pos:start="80:15" pos:end="80:51">(<argument pos:start="80:16" pos:end="80:30"><expr pos:start="80:16" pos:end="80:30"><operator pos:start="80:16" pos:end="80:16">*</operator><name pos:start="80:17" pos:end="80:30">refcount_block</name></expr></argument>, <argument pos:start="80:33" pos:end="80:33"><expr pos:start="80:33" pos:end="80:33"><literal type="number" pos:start="80:33" pos:end="80:33">0</literal></expr></argument>, <argument pos:start="80:36" pos:end="80:50"><expr pos:start="80:36" pos:end="80:50"><name pos:start="80:36" pos:end="80:50"><name pos:start="80:36" pos:end="80:36">s</name><operator pos:start="80:37" pos:end="80:38">-&gt;</operator><name pos:start="80:39" pos:end="80:50">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="81:5" pos:end="81:64">/* Now the new refcount block needs to be written to disk */</comment>
    <expr_stmt pos:start="82:5" pos:end="82:56"><expr pos:start="82:5" pos:end="82:55"><call pos:start="82:5" pos:end="82:55"><name pos:start="82:5" pos:end="82:16">BLKDBG_EVENT</name><argument_list pos:start="82:17" pos:end="82:55">(<argument pos:start="82:18" pos:end="82:25"><expr pos:start="82:18" pos:end="82:25"><name pos:start="82:18" pos:end="82:25"><name pos:start="82:18" pos:end="82:19">bs</name><operator pos:start="82:20" pos:end="82:21">-&gt;</operator><name pos:start="82:22" pos:end="82:25">file</name></name></expr></argument>, <argument pos:start="82:28" pos:end="82:54"><expr pos:start="82:28" pos:end="82:54"><name pos:start="82:28" pos:end="82:54">BLKDBG_REFBLOCK_ALLOC_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="83:5" pos:end="83:75"><expr pos:start="83:5" pos:end="83:74"><call pos:start="83:5" pos:end="83:74"><name pos:start="83:5" pos:end="83:32">qcow2_cache_entry_mark_dirty</name><argument_list pos:start="83:33" pos:end="83:74">(<argument pos:start="83:34" pos:end="83:56"><expr pos:start="83:34" pos:end="83:56"><name pos:start="83:34" pos:end="83:56"><name pos:start="83:34" pos:end="83:34">s</name><operator pos:start="83:35" pos:end="83:36">-&gt;</operator><name pos:start="83:37" pos:end="83:56">refcount_block_cache</name></name></expr></argument>, <argument pos:start="83:59" pos:end="83:73"><expr pos:start="83:59" pos:end="83:73"><operator pos:start="83:59" pos:end="83:59">*</operator><name pos:start="83:60" pos:end="83:73">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="84:5" pos:end="84:57"><expr pos:start="84:5" pos:end="84:56"><name pos:start="84:5" pos:end="84:7">ret</name> <operator pos:start="84:9" pos:end="84:9">=</operator> <call pos:start="84:11" pos:end="84:56"><name pos:start="84:11" pos:end="84:27">qcow2_cache_flush</name><argument_list pos:start="84:28" pos:end="84:56">(<argument pos:start="84:29" pos:end="84:30"><expr pos:start="84:29" pos:end="84:30"><name pos:start="84:29" pos:end="84:30">bs</name></expr></argument>, <argument pos:start="84:33" pos:end="84:55"><expr pos:start="84:33" pos:end="84:55"><name pos:start="84:33" pos:end="84:55"><name pos:start="84:33" pos:end="84:33">s</name><operator pos:start="84:34" pos:end="84:35">-&gt;</operator><name pos:start="84:36" pos:end="84:55">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="85:5" pos:end="204:15"><if pos:start="85:5" pos:end="204:15">if <condition pos:start="85:8" pos:end="85:16">(<expr pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">&lt;</operator> <literal type="number" pos:start="85:15" pos:end="85:15">0</literal></expr>)</condition> <block pos:start="85:18" pos:end="204:15">{<block_content pos:start="86:9" pos:end="204:15">
        <goto pos:start="86:9" pos:end="86:24">goto <name pos:start="86:14" pos:end="86:23">fail_block</name>;</goto>
    <comment type="block" pos:start="87:5" pos:end="87:75">/* If the refcount table is big enough, just hook the block up there */</comment>
    <if_stmt pos:start="88:5" pos:end="204:15"><if pos:start="88:5" pos:end="204:15">if <condition pos:start="88:8" pos:end="88:54">(<expr pos:start="88:9" pos:end="88:53"><name pos:start="88:9" pos:end="88:28">refcount_table_index</name> <operator pos:start="88:30" pos:end="88:30">&lt;</operator> <name pos:start="88:32" pos:end="88:53"><name pos:start="88:32" pos:end="88:32">s</name><operator pos:start="88:33" pos:end="88:34">-&gt;</operator><name pos:start="88:35" pos:end="88:53">refcount_table_size</name></name></expr>)</condition> <block pos:start="88:56" pos:end="204:15">{<block_content pos:start="89:9" pos:end="204:15">
        <decl_stmt pos:start="89:9" pos:end="89:49"><decl pos:start="89:9" pos:end="89:48"><type pos:start="89:9" pos:end="89:16"><name pos:start="89:9" pos:end="89:16">uint64_t</name></type> <name pos:start="89:18" pos:end="89:23">data64</name> <init pos:start="89:25" pos:end="89:48">= <expr pos:start="89:27" pos:end="89:48"><call pos:start="89:27" pos:end="89:48"><name pos:start="89:27" pos:end="89:37">cpu_to_be64</name><argument_list pos:start="89:38" pos:end="89:48">(<argument pos:start="89:39" pos:end="89:47"><expr pos:start="89:39" pos:end="89:47"><name pos:start="89:39" pos:end="89:47">new_block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="90:9" pos:end="90:61"><expr pos:start="90:9" pos:end="90:60"><call pos:start="90:9" pos:end="90:60"><name pos:start="90:9" pos:end="90:20">BLKDBG_EVENT</name><argument_list pos:start="90:21" pos:end="90:60">(<argument pos:start="90:22" pos:end="90:29"><expr pos:start="90:22" pos:end="90:29"><name pos:start="90:22" pos:end="90:29"><name pos:start="90:22" pos:end="90:23">bs</name><operator pos:start="90:24" pos:end="90:25">-&gt;</operator><name pos:start="90:26" pos:end="90:29">file</name></name></expr></argument>, <argument pos:start="90:32" pos:end="90:59"><expr pos:start="90:32" pos:end="90:59"><name pos:start="90:32" pos:end="90:59">BLKDBG_REFBLOCK_ALLOC_HOOKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="91:9" pos:end="93:37"><expr pos:start="91:9" pos:end="93:36"><name pos:start="91:9" pos:end="91:11">ret</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <call pos:start="91:15" pos:end="93:36"><name pos:start="91:15" pos:end="91:30">bdrv_pwrite_sync</name><argument_list pos:start="91:31" pos:end="93:36">(<argument pos:start="91:32" pos:end="91:39"><expr pos:start="91:32" pos:end="91:39"><name pos:start="91:32" pos:end="91:39"><name pos:start="91:32" pos:end="91:33">bs</name><operator pos:start="91:34" pos:end="91:35">-&gt;</operator><name pos:start="91:36" pos:end="91:39">file</name></name></expr></argument>,
            <argument pos:start="92:13" pos:end="92:78"><expr pos:start="92:13" pos:end="92:78"><name pos:start="92:13" pos:end="92:36"><name pos:start="92:13" pos:end="92:13">s</name><operator pos:start="92:14" pos:end="92:15">-&gt;</operator><name pos:start="92:16" pos:end="92:36">refcount_table_offset</name></name> <operator pos:start="92:38" pos:end="92:38">+</operator> <name pos:start="92:40" pos:end="92:59">refcount_table_index</name> <operator pos:start="92:61" pos:end="92:61">*</operator> <sizeof pos:start="92:63" pos:end="92:78">sizeof<argument_list pos:start="92:69" pos:end="92:78">(<argument pos:start="92:70" pos:end="92:77"><expr pos:start="92:70" pos:end="92:77"><name pos:start="92:70" pos:end="92:77">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
            <argument pos:start="93:13" pos:end="93:19"><expr pos:start="93:13" pos:end="93:19"><operator pos:start="93:13" pos:end="93:13">&amp;</operator><name pos:start="93:14" pos:end="93:19">data64</name></expr></argument>, <argument pos:start="93:22" pos:end="93:35"><expr pos:start="93:22" pos:end="93:35"><sizeof pos:start="93:22" pos:end="93:35">sizeof<argument_list pos:start="93:28" pos:end="93:35">(<argument pos:start="93:29" pos:end="93:34"><expr pos:start="93:29" pos:end="93:34"><name pos:start="93:29" pos:end="93:34">data64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="94:9" pos:end="204:15"><if pos:start="94:9" pos:end="204:15">if <condition pos:start="94:12" pos:end="94:20">(<expr pos:start="94:13" pos:end="94:19"><name pos:start="94:13" pos:end="94:15">ret</name> <operator pos:start="94:17" pos:end="94:17">&lt;</operator> <literal type="number" pos:start="94:19" pos:end="94:19">0</literal></expr>)</condition> <block pos:start="94:22" pos:end="204:15">{<block_content pos:start="95:13" pos:end="204:15">
            <goto pos:start="95:13" pos:end="95:28">goto <name pos:start="95:18" pos:end="95:27">fail_block</name>;</goto>
        <expr_stmt pos:start="96:9" pos:end="96:60"><expr pos:start="96:9" pos:end="96:59"><name pos:start="96:9" pos:end="96:47"><name pos:start="96:9" pos:end="96:9">s</name><operator pos:start="96:10" pos:end="96:11">-&gt;</operator><name pos:start="96:12" pos:end="96:25">refcount_table</name><index pos:start="96:26" pos:end="96:47">[<expr pos:start="96:27" pos:end="96:46"><name pos:start="96:27" pos:end="96:46">refcount_table_index</name></expr>]</index></name> <operator pos:start="96:49" pos:end="96:49">=</operator> <name pos:start="96:51" pos:end="96:59">new_block</name></expr>;</expr_stmt>
        <comment type="block" pos:start="97:9" pos:end="98:49">/* The new refcount block may be where the caller intended to put its
         * data, so let it restart the search. */</comment>
        <return pos:start="99:9" pos:end="99:23">return <expr pos:start="99:16" pos:end="99:22"><operator pos:start="99:16" pos:end="99:16">-</operator><name pos:start="99:17" pos:end="99:22">EAGAIN</name></expr>;</return>
    <expr_stmt pos:start="100:5" pos:end="100:80"><expr pos:start="100:5" pos:end="100:79"><name pos:start="100:5" pos:end="100:7">ret</name> <operator pos:start="100:9" pos:end="100:9">=</operator> <call pos:start="100:11" pos:end="100:79"><name pos:start="100:11" pos:end="100:25">qcow2_cache_put</name><argument_list pos:start="100:26" pos:end="100:79">(<argument pos:start="100:27" pos:end="100:28"><expr pos:start="100:27" pos:end="100:28"><name pos:start="100:27" pos:end="100:28">bs</name></expr></argument>, <argument pos:start="100:31" pos:end="100:53"><expr pos:start="100:31" pos:end="100:53"><name pos:start="100:31" pos:end="100:53"><name pos:start="100:31" pos:end="100:31">s</name><operator pos:start="100:32" pos:end="100:33">-&gt;</operator><name pos:start="100:34" pos:end="100:53">refcount_block_cache</name></name></expr></argument>, <argument pos:start="100:56" pos:end="100:78"><expr pos:start="100:56" pos:end="100:78"><operator pos:start="100:56" pos:end="100:56">(</operator><name pos:start="100:57" pos:end="100:60">void</name><operator pos:start="100:61" pos:end="100:61">*</operator><operator pos:start="100:62" pos:end="100:62">*</operator><operator pos:start="100:63" pos:end="100:63">)</operator> <name pos:start="100:65" pos:end="100:78">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="101:5" pos:end="204:15"><if pos:start="101:5" pos:end="204:15">if <condition pos:start="101:8" pos:end="101:16">(<expr pos:start="101:9" pos:end="101:15"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">&lt;</operator> <literal type="number" pos:start="101:15" pos:end="101:15">0</literal></expr>)</condition> <block pos:start="101:18" pos:end="204:15">{<block_content pos:start="102:9" pos:end="204:15">
        <goto pos:start="102:9" pos:end="102:24">goto <name pos:start="102:14" pos:end="102:23">fail_block</name>;</goto>
    <comment type="block" pos:start="103:5" pos:end="113:7">/*
     * If we come here, we need to grow the refcount table. Again, a new
     * refcount table needs some space and we can't simply allocate to avoid
     * endless recursion.
     *
     * Therefore let's grab new refcount blocks at the end of the image, which
     * will describe themselves and the new refcount table. This way we can
     * reference them only in the new table and do the switch to the new
     * refcount table at once without producing an inconsistent state in
     * between.
     */</comment>
    <expr_stmt pos:start="114:5" pos:end="114:49"><expr pos:start="114:5" pos:end="114:48"><call pos:start="114:5" pos:end="114:48"><name pos:start="114:5" pos:end="114:16">BLKDBG_EVENT</name><argument_list pos:start="114:17" pos:end="114:48">(<argument pos:start="114:18" pos:end="114:25"><expr pos:start="114:18" pos:end="114:25"><name pos:start="114:18" pos:end="114:25"><name pos:start="114:18" pos:end="114:19">bs</name><operator pos:start="114:20" pos:end="114:21">-&gt;</operator><name pos:start="114:22" pos:end="114:25">file</name></name></expr></argument>, <argument pos:start="114:28" pos:end="114:47"><expr pos:start="114:28" pos:end="114:47"><name pos:start="114:28" pos:end="114:47">BLKDBG_REFTABLE_GROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="115:5" pos:end="115:63">/* Calculate the number of refcount blocks needed so far */</comment>
    <decl_stmt pos:start="116:5" pos:end="116:79"><decl pos:start="116:5" pos:end="116:78"><type pos:start="116:5" pos:end="116:12"><name pos:start="116:5" pos:end="116:12">uint64_t</name></type> <name pos:start="116:14" pos:end="116:36">refcount_block_clusters</name> <init pos:start="116:38" pos:end="116:78">= <expr pos:start="116:40" pos:end="116:78"><literal type="number" pos:start="116:40" pos:end="116:40">1</literal> <operator pos:start="116:42" pos:end="116:43">&lt;&lt;</operator> <operator pos:start="116:45" pos:end="116:45">(</operator><name pos:start="116:46" pos:end="116:60"><name pos:start="116:46" pos:end="116:46">s</name><operator pos:start="116:47" pos:end="116:48">-&gt;</operator><name pos:start="116:49" pos:end="116:60">cluster_bits</name></name> <operator pos:start="116:62" pos:end="116:62">-</operator> <name pos:start="116:64" pos:end="116:77">REFCOUNT_SHIFT</name><operator pos:start="116:78" pos:end="116:78">)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="117:5" pos:end="117:80"><decl pos:start="117:5" pos:end="117:79"><type pos:start="117:5" pos:end="117:12"><name pos:start="117:5" pos:end="117:12">uint64_t</name></type> <name pos:start="117:14" pos:end="117:24">blocks_used</name> <init pos:start="117:26" pos:end="117:79">= <expr pos:start="117:28" pos:end="117:79"><call pos:start="117:28" pos:end="117:79"><name pos:start="117:28" pos:end="117:39">DIV_ROUND_UP</name><argument_list pos:start="117:40" pos:end="117:79">(<argument pos:start="117:41" pos:end="117:53"><expr pos:start="117:41" pos:end="117:53"><name pos:start="117:41" pos:end="117:53">cluster_index</name></expr></argument>, <argument pos:start="117:56" pos:end="117:78"><expr pos:start="117:56" pos:end="117:78"><name pos:start="117:56" pos:end="117:78">refcount_block_clusters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block" pos:start="118:5" pos:end="118:70">/* And now we need at least one block more for the new metadata */</comment>
    <decl_stmt pos:start="119:5" pos:end="119:71"><decl pos:start="119:5" pos:end="119:70"><type pos:start="119:5" pos:end="119:12"><name pos:start="119:5" pos:end="119:12">uint64_t</name></type> <name pos:start="119:14" pos:end="119:23">table_size</name> <init pos:start="119:25" pos:end="119:70">= <expr pos:start="119:27" pos:end="119:70"><call pos:start="119:27" pos:end="119:70"><name pos:start="119:27" pos:end="119:50">next_refcount_table_size</name><argument_list pos:start="119:51" pos:end="119:70">(<argument pos:start="119:52" pos:end="119:52"><expr pos:start="119:52" pos:end="119:52"><name pos:start="119:52" pos:end="119:52">s</name></expr></argument>, <argument pos:start="119:55" pos:end="119:69"><expr pos:start="119:55" pos:end="119:69"><name pos:start="119:55" pos:end="119:65">blocks_used</name> <operator pos:start="119:67" pos:end="119:67">+</operator> <literal type="number" pos:start="119:69" pos:end="119:69">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="120:5" pos:end="120:29"><decl pos:start="120:5" pos:end="120:28"><type pos:start="120:5" pos:end="120:12"><name pos:start="120:5" pos:end="120:12">uint64_t</name></type> <name pos:start="120:14" pos:end="120:28">last_table_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="121:5" pos:end="121:29"><decl pos:start="121:5" pos:end="121:28"><type pos:start="121:5" pos:end="121:12"><name pos:start="121:5" pos:end="121:12">uint64_t</name></type> <name pos:start="121:14" pos:end="121:28">blocks_clusters</name></decl>;</decl_stmt>
    <do pos:start="122:5" pos:end="135:0">do <block pos:start="122:8" pos:end="133:5">{<block_content pos:start="123:9" pos:end="132:40">
        <decl_stmt pos:start="123:9" pos:end="124:63"><decl pos:start="123:9" pos:end="124:62"><type pos:start="123:9" pos:end="123:16"><name pos:start="123:9" pos:end="123:16">uint64_t</name></type> <name pos:start="123:18" pos:end="123:31">table_clusters</name> <init pos:start="123:33" pos:end="124:62">=
            <expr pos:start="124:13" pos:end="124:62"><call pos:start="124:13" pos:end="124:62"><name pos:start="124:13" pos:end="124:28">size_to_clusters</name><argument_list pos:start="124:29" pos:end="124:62">(<argument pos:start="124:30" pos:end="124:30"><expr pos:start="124:30" pos:end="124:30"><name pos:start="124:30" pos:end="124:30">s</name></expr></argument>, <argument pos:start="124:33" pos:end="124:61"><expr pos:start="124:33" pos:end="124:61"><name pos:start="124:33" pos:end="124:42">table_size</name> <operator pos:start="124:44" pos:end="124:44">*</operator> <sizeof pos:start="124:46" pos:end="124:61">sizeof<argument_list pos:start="124:52" pos:end="124:61">(<argument pos:start="124:53" pos:end="124:60"><expr pos:start="124:53" pos:end="124:60"><name pos:start="124:53" pos:end="124:60">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="125:9" pos:end="127:39"><expr pos:start="125:9" pos:end="127:38"><name pos:start="125:9" pos:end="125:23">blocks_clusters</name> <operator pos:start="125:25" pos:end="125:25">=</operator> <literal type="number" pos:start="125:27" pos:end="125:29">1</literal> <operator pos:start="125:29" pos:end="125:29">+</operator>
            <operator pos:start="126:13" pos:end="126:13">(</operator><operator pos:start="126:14" pos:end="126:14">(</operator><name pos:start="126:15" pos:end="126:28">table_clusters</name> <operator pos:start="126:30" pos:end="126:30">+</operator> <name pos:start="126:32" pos:end="126:54">refcount_block_clusters</name> <operator pos:start="126:56" pos:end="126:56">-</operator> <literal type="number" pos:start="126:58" pos:end="126:58">1</literal><operator pos:start="126:59" pos:end="126:59">)</operator>
            <operator pos:start="127:13" pos:end="127:13">/</operator> <name pos:start="127:15" pos:end="127:37">refcount_block_clusters</name><operator pos:start="127:38" pos:end="127:38">)</operator></expr>;</expr_stmt>
        <decl_stmt pos:start="128:9" pos:end="128:66"><decl pos:start="128:9" pos:end="128:65"><type pos:start="128:9" pos:end="128:16"><name pos:start="128:9" pos:end="128:16">uint64_t</name></type> <name pos:start="128:18" pos:end="128:30">meta_clusters</name> <init pos:start="128:32" pos:end="128:65">= <expr pos:start="128:34" pos:end="128:65"><name pos:start="128:34" pos:end="128:47">table_clusters</name> <operator pos:start="128:49" pos:end="128:49">+</operator> <name pos:start="128:51" pos:end="128:65">blocks_clusters</name></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="129:9" pos:end="129:37"><expr pos:start="129:9" pos:end="129:36"><name pos:start="129:9" pos:end="129:23">last_table_size</name> <operator pos:start="129:25" pos:end="129:25">=</operator> <name pos:start="129:27" pos:end="129:36">table_size</name></expr>;</expr_stmt>
        <expr_stmt pos:start="130:9" pos:end="132:40"><expr pos:start="130:9" pos:end="132:39"><name pos:start="130:9" pos:end="130:18">table_size</name> <operator pos:start="130:20" pos:end="130:20">=</operator> <call pos:start="130:22" pos:end="132:39"><name pos:start="130:22" pos:end="130:45">next_refcount_table_size</name><argument_list pos:start="130:46" pos:end="132:39">(<argument pos:start="130:47" pos:end="130:47"><expr pos:start="130:47" pos:end="130:47"><name pos:start="130:47" pos:end="130:47">s</name></expr></argument>, <argument pos:start="130:50" pos:end="132:38"><expr pos:start="130:50" pos:end="132:38"><name pos:start="130:50" pos:end="130:60">blocks_used</name> <operator pos:start="130:62" pos:end="130:62">+</operator>
            <operator pos:start="131:13" pos:end="131:13">(</operator><operator pos:start="131:14" pos:end="131:14">(</operator><name pos:start="131:15" pos:end="131:27">meta_clusters</name> <operator pos:start="131:29" pos:end="131:29">+</operator> <name pos:start="131:31" pos:end="131:53">refcount_block_clusters</name> <operator pos:start="131:55" pos:end="131:55">-</operator> <literal type="number" pos:start="131:57" pos:end="131:57">1</literal><operator pos:start="131:58" pos:end="131:58">)</operator>
            <operator pos:start="132:13" pos:end="132:13">/</operator> <name pos:start="132:15" pos:end="132:37">refcount_block_clusters</name><operator pos:start="132:38" pos:end="132:38">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition pos:start="133:13" pos:end="133:43">(<expr pos:start="133:14" pos:end="133:42"><name pos:start="133:14" pos:end="133:28">last_table_size</name> <operator pos:start="133:30" pos:end="133:31">!=</operator> <name pos:start="133:33" pos:end="133:42">table_size</name></expr>)</condition>;</do>
<cpp:ifdef pos:start="134:1" pos:end="134:19">#<cpp:directive pos:start="134:2" pos:end="134:6">ifdef</cpp:directive> <name pos:start="134:8" pos:end="134:19">DEBUG_ALLOC2</name></cpp:ifdef>
    <expr_stmt pos:start="135:5" pos:end="138:0"><expr pos:start="135:5" pos:end="136:43"><call pos:start="135:5" pos:end="136:43"><name pos:start="135:5" pos:end="135:11">fprintf</name><argument_list pos:start="135:12" pos:end="136:43">(<argument pos:start="135:13" pos:end="135:18"><expr pos:start="135:13" pos:end="135:18"><name pos:start="135:13" pos:end="135:18">stderr</name></expr></argument>, <argument pos:start="135:21" pos:end="135:77"><expr pos:start="135:21" pos:end="135:77"><literal type="string" pos:start="135:21" pos:end="135:50">"qcow2: Grow refcount table %"</literal> <name pos:start="135:52" pos:end="135:57">PRId32</name> <literal type="string" pos:start="135:59" pos:end="135:65">" =&gt; %"</literal> <name pos:start="135:67" pos:end="135:72">PRId64</name> <literal type="string" pos:start="135:74" pos:end="135:77">"\n"</literal></expr></argument>,
        <argument pos:start="136:9" pos:end="136:30"><expr pos:start="136:9" pos:end="136:30"><name pos:start="136:9" pos:end="136:30"><name pos:start="136:9" pos:end="136:9">s</name><operator pos:start="136:10" pos:end="136:11">-&gt;</operator><name pos:start="136:12" pos:end="136:30">refcount_table_size</name></name></expr></argument>, <argument pos:start="136:33" pos:end="136:42"><expr pos:start="136:33" pos:end="136:42"><name pos:start="136:33" pos:end="136:42">table_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="137:1" pos:end="137:6">#<cpp:directive pos:start="137:2" pos:end="137:6">endif</cpp:directive></cpp:endif>
    <comment type="block" pos:start="138:5" pos:end="138:50">/* Create the new refcount table and blocks */</comment>
    <decl_stmt pos:start="139:5" pos:end="140:24"><decl pos:start="139:5" pos:end="140:23"><type pos:start="139:5" pos:end="139:12"><name pos:start="139:5" pos:end="139:12">uint64_t</name></type> <name pos:start="139:14" pos:end="139:24">meta_offset</name> <init pos:start="139:26" pos:end="140:23">= <expr pos:start="139:28" pos:end="140:23"><operator pos:start="139:28" pos:end="139:28">(</operator><name pos:start="139:29" pos:end="139:39">blocks_used</name> <operator pos:start="139:41" pos:end="139:41">*</operator> <name pos:start="139:43" pos:end="139:65">refcount_block_clusters</name><operator pos:start="139:66" pos:end="139:66">)</operator> <operator pos:start="139:68" pos:end="139:68">*</operator>
        <name pos:start="140:9" pos:end="140:23"><name pos:start="140:9" pos:end="140:9">s</name><operator pos:start="140:10" pos:end="140:11">-&gt;</operator><name pos:start="140:12" pos:end="140:23">cluster_size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="141:5" pos:end="141:76"><decl pos:start="141:5" pos:end="141:75"><type pos:start="141:5" pos:end="141:12"><name pos:start="141:5" pos:end="141:12">uint64_t</name></type> <name pos:start="141:14" pos:end="141:25">table_offset</name> <init pos:start="141:27" pos:end="141:75">= <expr pos:start="141:29" pos:end="141:75"><name pos:start="141:29" pos:end="141:39">meta_offset</name> <operator pos:start="141:41" pos:end="141:41">+</operator> <name pos:start="141:43" pos:end="141:57">blocks_clusters</name> <operator pos:start="141:59" pos:end="141:59">*</operator> <name pos:start="141:61" pos:end="141:75"><name pos:start="141:61" pos:end="141:61">s</name><operator pos:start="141:62" pos:end="141:63">-&gt;</operator><name pos:start="141:64" pos:end="141:75">cluster_size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="142:5" pos:end="142:72"><decl pos:start="142:5" pos:end="142:71"><type pos:start="142:5" pos:end="142:14"><name pos:start="142:5" pos:end="142:12">uint16_t</name> <modifier pos:start="142:14" pos:end="142:14">*</modifier></type><name pos:start="142:15" pos:end="142:24">new_blocks</name> <init pos:start="142:26" pos:end="142:71">= <expr pos:start="142:28" pos:end="142:71"><call pos:start="142:28" pos:end="142:71"><name pos:start="142:28" pos:end="142:36">g_malloc0</name><argument_list pos:start="142:37" pos:end="142:71">(<argument pos:start="142:38" pos:end="142:70"><expr pos:start="142:38" pos:end="142:70"><name pos:start="142:38" pos:end="142:52">blocks_clusters</name> <operator pos:start="142:54" pos:end="142:54">*</operator> <name pos:start="142:56" pos:end="142:70"><name pos:start="142:56" pos:end="142:56">s</name><operator pos:start="142:57" pos:end="142:58">-&gt;</operator><name pos:start="142:59" pos:end="142:70">cluster_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="143:5" pos:end="143:67"><decl pos:start="143:5" pos:end="143:66"><type pos:start="143:5" pos:end="143:14"><name pos:start="143:5" pos:end="143:12">uint64_t</name> <modifier pos:start="143:14" pos:end="143:14">*</modifier></type><name pos:start="143:15" pos:end="143:23">new_table</name> <init pos:start="143:25" pos:end="143:66">= <expr pos:start="143:27" pos:end="143:66"><call pos:start="143:27" pos:end="143:66"><name pos:start="143:27" pos:end="143:35">g_malloc0</name><argument_list pos:start="143:36" pos:end="143:66">(<argument pos:start="143:37" pos:end="143:65"><expr pos:start="143:37" pos:end="143:65"><name pos:start="143:37" pos:end="143:46">table_size</name> <operator pos:start="143:48" pos:end="143:48">*</operator> <sizeof pos:start="143:50" pos:end="143:65">sizeof<argument_list pos:start="143:56" pos:end="143:65">(<argument pos:start="143:57" pos:end="143:64"><expr pos:start="143:57" pos:end="143:64"><name pos:start="143:57" pos:end="143:64">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block" pos:start="144:5" pos:end="144:37">/* Fill the new refcount table */</comment>
    <expr_stmt pos:start="145:5" pos:end="146:51"><expr pos:start="145:5" pos:end="146:50"><call pos:start="145:5" pos:end="146:50"><name pos:start="145:5" pos:end="145:10">memcpy</name><argument_list pos:start="145:11" pos:end="146:50">(<argument pos:start="145:12" pos:end="145:20"><expr pos:start="145:12" pos:end="145:20"><name pos:start="145:12" pos:end="145:20">new_table</name></expr></argument>, <argument pos:start="145:23" pos:end="145:39"><expr pos:start="145:23" pos:end="145:39"><name pos:start="145:23" pos:end="145:39"><name pos:start="145:23" pos:end="145:23">s</name><operator pos:start="145:24" pos:end="145:25">-&gt;</operator><name pos:start="145:26" pos:end="145:39">refcount_table</name></name></expr></argument>,
        <argument pos:start="146:9" pos:end="146:49"><expr pos:start="146:9" pos:end="146:49"><name pos:start="146:9" pos:end="146:30"><name pos:start="146:9" pos:end="146:9">s</name><operator pos:start="146:10" pos:end="146:11">-&gt;</operator><name pos:start="146:12" pos:end="146:30">refcount_table_size</name></name> <operator pos:start="146:32" pos:end="146:32">*</operator> <sizeof pos:start="146:34" pos:end="146:49">sizeof<argument_list pos:start="146:40" pos:end="146:49">(<argument pos:start="146:41" pos:end="146:48"><expr pos:start="146:41" pos:end="146:48"><name pos:start="146:41" pos:end="146:48">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="147:5" pos:end="147:48"><expr pos:start="147:5" pos:end="147:47"><name pos:start="147:5" pos:end="147:35"><name pos:start="147:5" pos:end="147:13">new_table</name><index pos:start="147:14" pos:end="147:35">[<expr pos:start="147:15" pos:end="147:34"><name pos:start="147:15" pos:end="147:34">refcount_table_index</name></expr>]</index></name> <operator pos:start="147:37" pos:end="147:37">=</operator> <name pos:start="147:39" pos:end="147:47">new_block</name></expr>;</expr_stmt>
    <decl_stmt pos:start="148:5" pos:end="148:10"><decl pos:start="148:5" pos:end="148:9"><type pos:start="148:5" pos:end="148:7"><name pos:start="148:5" pos:end="148:7">int</name></type> <name pos:start="148:9" pos:end="148:9">i</name></decl>;</decl_stmt>
    <for pos:start="149:5" pos:end="204:15">for <control pos:start="149:9" pos:end="149:41">(<init pos:start="149:10" pos:end="149:15"><expr pos:start="149:10" pos:end="149:14"><name pos:start="149:10" pos:end="149:10">i</name> <operator pos:start="149:12" pos:end="149:12">=</operator> <literal type="number" pos:start="149:14" pos:end="149:14">0</literal></expr>;</init> <condition pos:start="149:17" pos:end="149:36"><expr pos:start="149:17" pos:end="149:35"><name pos:start="149:17" pos:end="149:17">i</name> <operator pos:start="149:19" pos:end="149:19">&lt;</operator> <name pos:start="149:21" pos:end="149:35">blocks_clusters</name></expr>;</condition> <incr pos:start="149:38" pos:end="149:40"><expr pos:start="149:38" pos:end="149:40"><name pos:start="149:38" pos:end="149:38">i</name><operator pos:start="149:39" pos:end="149:40">++</operator></expr></incr>)</control> <block pos:start="149:43" pos:end="204:15">{<block_content pos:start="150:9" pos:end="204:15">
        <expr_stmt pos:start="150:9" pos:end="150:73"><expr pos:start="150:9" pos:end="150:72"><name pos:start="150:9" pos:end="150:34"><name pos:start="150:9" pos:end="150:17">new_table</name><index pos:start="150:18" pos:end="150:34">[<expr pos:start="150:19" pos:end="150:33"><name pos:start="150:19" pos:end="150:29">blocks_used</name> <operator pos:start="150:31" pos:end="150:31">+</operator> <name pos:start="150:33" pos:end="150:33">i</name></expr>]</index></name> <operator pos:start="150:36" pos:end="150:36">=</operator> <name pos:start="150:38" pos:end="150:48">meta_offset</name> <operator pos:start="150:50" pos:end="150:50">+</operator> <operator pos:start="150:52" pos:end="150:52">(</operator><name pos:start="150:53" pos:end="150:53">i</name> <operator pos:start="150:55" pos:end="150:55">*</operator> <name pos:start="150:57" pos:end="150:71"><name pos:start="150:57" pos:end="150:57">s</name><operator pos:start="150:58" pos:end="150:59">-&gt;</operator><name pos:start="150:60" pos:end="150:71">cluster_size</name></name><operator pos:start="150:72" pos:end="150:72">)</operator></expr>;</expr_stmt>
    <comment type="block" pos:start="151:5" pos:end="151:34">/* Fill the refcount blocks */</comment>
    <decl_stmt pos:start="152:5" pos:end="152:81"><decl pos:start="152:5" pos:end="152:80"><type pos:start="152:5" pos:end="152:12"><name pos:start="152:5" pos:end="152:12">uint64_t</name></type> <name pos:start="152:14" pos:end="152:27">table_clusters</name> <init pos:start="152:29" pos:end="152:80">= <expr pos:start="152:31" pos:end="152:80"><call pos:start="152:31" pos:end="152:80"><name pos:start="152:31" pos:end="152:46">size_to_clusters</name><argument_list pos:start="152:47" pos:end="152:80">(<argument pos:start="152:48" pos:end="152:48"><expr pos:start="152:48" pos:end="152:48"><name pos:start="152:48" pos:end="152:48">s</name></expr></argument>, <argument pos:start="152:51" pos:end="152:79"><expr pos:start="152:51" pos:end="152:79"><name pos:start="152:51" pos:end="152:60">table_size</name> <operator pos:start="152:62" pos:end="152:62">*</operator> <sizeof pos:start="152:64" pos:end="152:79">sizeof<argument_list pos:start="152:70" pos:end="152:79">(<argument pos:start="152:71" pos:end="152:78"><expr pos:start="152:71" pos:end="152:78"><name pos:start="152:71" pos:end="152:78">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="153:5" pos:end="153:18"><decl pos:start="153:5" pos:end="153:17"><type pos:start="153:5" pos:end="153:7"><name pos:start="153:5" pos:end="153:7">int</name></type> <name pos:start="153:9" pos:end="153:13">block</name> <init pos:start="153:15" pos:end="153:17">= <expr pos:start="153:17" pos:end="153:17"><literal type="number" pos:start="153:17" pos:end="153:17">0</literal></expr></init></decl>;</decl_stmt>
    <for pos:start="154:5" pos:end="204:15">for <control pos:start="154:9" pos:end="154:58">(<init pos:start="154:10" pos:end="154:15"><expr pos:start="154:10" pos:end="154:14"><name pos:start="154:10" pos:end="154:10">i</name> <operator pos:start="154:12" pos:end="154:12">=</operator> <literal type="number" pos:start="154:14" pos:end="154:14">0</literal></expr>;</init> <condition pos:start="154:17" pos:end="154:53"><expr pos:start="154:17" pos:end="154:52"><name pos:start="154:17" pos:end="154:17">i</name> <operator pos:start="154:19" pos:end="154:19">&lt;</operator> <name pos:start="154:21" pos:end="154:34">table_clusters</name> <operator pos:start="154:36" pos:end="154:36">+</operator> <name pos:start="154:38" pos:end="154:52">blocks_clusters</name></expr>;</condition> <incr pos:start="154:55" pos:end="154:57"><expr pos:start="154:55" pos:end="154:57"><name pos:start="154:55" pos:end="154:55">i</name><operator pos:start="154:56" pos:end="154:57">++</operator></expr></incr>)</control> <block pos:start="154:60" pos:end="204:15">{<block_content pos:start="155:9" pos:end="204:15">
        <expr_stmt pos:start="155:9" pos:end="155:45"><expr pos:start="155:9" pos:end="155:44"><name pos:start="155:9" pos:end="155:27"><name pos:start="155:9" pos:end="155:18">new_blocks</name><index pos:start="155:19" pos:end="155:27">[<expr pos:start="155:20" pos:end="155:26"><name pos:start="155:20" pos:end="155:24">block</name><operator pos:start="155:25" pos:end="155:26">++</operator></expr>]</index></name> <operator pos:start="155:29" pos:end="155:29">=</operator> <call pos:start="155:31" pos:end="155:44"><name pos:start="155:31" pos:end="155:41">cpu_to_be16</name><argument_list pos:start="155:42" pos:end="155:44">(<argument pos:start="155:43" pos:end="155:43"><expr pos:start="155:43" pos:end="155:43"><literal type="number" pos:start="155:43" pos:end="155:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="156:5" pos:end="156:39">/* Write refcount blocks to disk */</comment>
    <expr_stmt pos:start="157:5" pos:end="157:63"><expr pos:start="157:5" pos:end="157:62"><call pos:start="157:5" pos:end="157:62"><name pos:start="157:5" pos:end="157:16">BLKDBG_EVENT</name><argument_list pos:start="157:17" pos:end="157:62">(<argument pos:start="157:18" pos:end="157:25"><expr pos:start="157:18" pos:end="157:25"><name pos:start="157:18" pos:end="157:25"><name pos:start="157:18" pos:end="157:19">bs</name><operator pos:start="157:20" pos:end="157:21">-&gt;</operator><name pos:start="157:22" pos:end="157:25">file</name></name></expr></argument>, <argument pos:start="157:28" pos:end="157:61"><expr pos:start="157:28" pos:end="157:61"><name pos:start="157:28" pos:end="157:61">BLKDBG_REFBLOCK_ALLOC_WRITE_BLOCKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="158:5" pos:end="159:43"><expr pos:start="158:5" pos:end="159:42"><name pos:start="158:5" pos:end="158:7">ret</name> <operator pos:start="158:9" pos:end="158:9">=</operator> <call pos:start="158:11" pos:end="159:42"><name pos:start="158:11" pos:end="158:26">bdrv_pwrite_sync</name><argument_list pos:start="158:27" pos:end="159:42">(<argument pos:start="158:28" pos:end="158:35"><expr pos:start="158:28" pos:end="158:35"><name pos:start="158:28" pos:end="158:35"><name pos:start="158:28" pos:end="158:29">bs</name><operator pos:start="158:30" pos:end="158:31">-&gt;</operator><name pos:start="158:32" pos:end="158:35">file</name></name></expr></argument>, <argument pos:start="158:38" pos:end="158:48"><expr pos:start="158:38" pos:end="158:48"><name pos:start="158:38" pos:end="158:48">meta_offset</name></expr></argument>, <argument pos:start="158:51" pos:end="158:60"><expr pos:start="158:51" pos:end="158:60"><name pos:start="158:51" pos:end="158:60">new_blocks</name></expr></argument>,
        <argument pos:start="159:9" pos:end="159:41"><expr pos:start="159:9" pos:end="159:41"><name pos:start="159:9" pos:end="159:23">blocks_clusters</name> <operator pos:start="159:25" pos:end="159:25">*</operator> <name pos:start="159:27" pos:end="159:41"><name pos:start="159:27" pos:end="159:27">s</name><operator pos:start="159:28" pos:end="159:29">-&gt;</operator><name pos:start="159:30" pos:end="159:41">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="160:5" pos:end="160:23"><expr pos:start="160:5" pos:end="160:22"><call pos:start="160:5" pos:end="160:22"><name pos:start="160:5" pos:end="160:10">g_free</name><argument_list pos:start="160:11" pos:end="160:22">(<argument pos:start="160:12" pos:end="160:21"><expr pos:start="160:12" pos:end="160:21"><name pos:start="160:12" pos:end="160:21">new_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="161:5" pos:end="204:15"><if pos:start="161:5" pos:end="204:15">if <condition pos:start="161:8" pos:end="161:16">(<expr pos:start="161:9" pos:end="161:15"><name pos:start="161:9" pos:end="161:11">ret</name> <operator pos:start="161:13" pos:end="161:13">&lt;</operator> <literal type="number" pos:start="161:15" pos:end="161:15">0</literal></expr>)</condition> <block pos:start="161:18" pos:end="204:15">{<block_content pos:start="162:9" pos:end="204:15">
        <goto pos:start="162:9" pos:end="162:24">goto <name pos:start="162:14" pos:end="162:23">fail_table</name>;</goto>
    <comment type="block" pos:start="163:5" pos:end="163:38">/* Write refcount table to disk */</comment>
    <for pos:start="164:5" pos:end="204:15">for<control pos:start="164:8" pos:end="164:35">(<init pos:start="164:9" pos:end="164:14"><expr pos:start="164:9" pos:end="164:13"><name pos:start="164:9" pos:end="164:9">i</name> <operator pos:start="164:11" pos:end="164:11">=</operator> <literal type="number" pos:start="164:13" pos:end="164:13">0</literal></expr>;</init> <condition pos:start="164:16" pos:end="164:30"><expr pos:start="164:16" pos:end="164:29"><name pos:start="164:16" pos:end="164:16">i</name> <operator pos:start="164:18" pos:end="164:18">&lt;</operator> <name pos:start="164:20" pos:end="164:29">table_size</name></expr>;</condition> <incr pos:start="164:32" pos:end="164:34"><expr pos:start="164:32" pos:end="164:34"><name pos:start="164:32" pos:end="164:32">i</name><operator pos:start="164:33" pos:end="164:34">++</operator></expr></incr>)</control> <block pos:start="164:37" pos:end="204:15">{<block_content pos:start="165:9" pos:end="204:15">
        <expr_stmt pos:start="165:9" pos:end="165:36"><expr pos:start="165:9" pos:end="165:35"><call pos:start="165:9" pos:end="165:35"><name pos:start="165:9" pos:end="165:20">cpu_to_be64s</name><argument_list pos:start="165:21" pos:end="165:35">(<argument pos:start="165:22" pos:end="165:34"><expr pos:start="165:22" pos:end="165:34"><operator pos:start="165:22" pos:end="165:22">&amp;</operator><name pos:start="165:23" pos:end="165:34"><name pos:start="165:23" pos:end="165:31">new_table</name><index pos:start="165:32" pos:end="165:34">[<expr pos:start="165:33" pos:end="165:33"><name pos:start="165:33" pos:end="165:33">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="166:5" pos:end="166:62"><expr pos:start="166:5" pos:end="166:61"><call pos:start="166:5" pos:end="166:61"><name pos:start="166:5" pos:end="166:16">BLKDBG_EVENT</name><argument_list pos:start="166:17" pos:end="166:61">(<argument pos:start="166:18" pos:end="166:25"><expr pos:start="166:18" pos:end="166:25"><name pos:start="166:18" pos:end="166:25"><name pos:start="166:18" pos:end="166:19">bs</name><operator pos:start="166:20" pos:end="166:21">-&gt;</operator><name pos:start="166:22" pos:end="166:25">file</name></name></expr></argument>, <argument pos:start="166:28" pos:end="166:60"><expr pos:start="166:28" pos:end="166:60"><name pos:start="166:28" pos:end="166:60">BLKDBG_REFBLOCK_ALLOC_WRITE_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="167:5" pos:end="168:39"><expr pos:start="167:5" pos:end="168:38"><name pos:start="167:5" pos:end="167:7">ret</name> <operator pos:start="167:9" pos:end="167:9">=</operator> <call pos:start="167:11" pos:end="168:38"><name pos:start="167:11" pos:end="167:26">bdrv_pwrite_sync</name><argument_list pos:start="167:27" pos:end="168:38">(<argument pos:start="167:28" pos:end="167:35"><expr pos:start="167:28" pos:end="167:35"><name pos:start="167:28" pos:end="167:35"><name pos:start="167:28" pos:end="167:29">bs</name><operator pos:start="167:30" pos:end="167:31">-&gt;</operator><name pos:start="167:32" pos:end="167:35">file</name></name></expr></argument>, <argument pos:start="167:38" pos:end="167:49"><expr pos:start="167:38" pos:end="167:49"><name pos:start="167:38" pos:end="167:49">table_offset</name></expr></argument>, <argument pos:start="167:52" pos:end="167:60"><expr pos:start="167:52" pos:end="167:60"><name pos:start="167:52" pos:end="167:60">new_table</name></expr></argument>,
        <argument pos:start="168:9" pos:end="168:37"><expr pos:start="168:9" pos:end="168:37"><name pos:start="168:9" pos:end="168:18">table_size</name> <operator pos:start="168:20" pos:end="168:20">*</operator> <sizeof pos:start="168:22" pos:end="168:37">sizeof<argument_list pos:start="168:28" pos:end="168:37">(<argument pos:start="168:29" pos:end="168:36"><expr pos:start="168:29" pos:end="168:36"><name pos:start="168:29" pos:end="168:36">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="169:5" pos:end="204:15"><if pos:start="169:5" pos:end="204:15">if <condition pos:start="169:8" pos:end="169:16">(<expr pos:start="169:9" pos:end="169:15"><name pos:start="169:9" pos:end="169:11">ret</name> <operator pos:start="169:13" pos:end="169:13">&lt;</operator> <literal type="number" pos:start="169:15" pos:end="169:15">0</literal></expr>)</condition> <block pos:start="169:18" pos:end="204:15">{<block_content pos:start="170:9" pos:end="204:15">
        <goto pos:start="170:9" pos:end="170:24">goto <name pos:start="170:14" pos:end="170:23">fail_table</name>;</goto>
    <for pos:start="171:5" pos:end="204:15">for<control pos:start="171:8" pos:end="171:35">(<init pos:start="171:9" pos:end="171:14"><expr pos:start="171:9" pos:end="171:13"><name pos:start="171:9" pos:end="171:9">i</name> <operator pos:start="171:11" pos:end="171:11">=</operator> <literal type="number" pos:start="171:13" pos:end="171:13">0</literal></expr>;</init> <condition pos:start="171:16" pos:end="171:30"><expr pos:start="171:16" pos:end="171:29"><name pos:start="171:16" pos:end="171:16">i</name> <operator pos:start="171:18" pos:end="171:18">&lt;</operator> <name pos:start="171:20" pos:end="171:29">table_size</name></expr>;</condition> <incr pos:start="171:32" pos:end="171:34"><expr pos:start="171:32" pos:end="171:34"><name pos:start="171:32" pos:end="171:32">i</name><operator pos:start="171:33" pos:end="171:34">++</operator></expr></incr>)</control> <block pos:start="171:37" pos:end="204:15">{<block_content pos:start="172:9" pos:end="204:15">
        <expr_stmt pos:start="172:9" pos:end="172:36"><expr pos:start="172:9" pos:end="172:35"><call pos:start="172:9" pos:end="172:35"><name pos:start="172:9" pos:end="172:20">be64_to_cpus</name><argument_list pos:start="172:21" pos:end="172:35">(<argument pos:start="172:22" pos:end="172:34"><expr pos:start="172:22" pos:end="172:34"><operator pos:start="172:22" pos:end="172:22">&amp;</operator><name pos:start="172:23" pos:end="172:34"><name pos:start="172:23" pos:end="172:31">new_table</name><index pos:start="172:32" pos:end="172:34">[<expr pos:start="172:33" pos:end="172:33"><name pos:start="172:33" pos:end="172:33">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="173:5" pos:end="173:60">/* Hook up the new refcount table in the qcow2 header */</comment>
    <decl_stmt pos:start="174:5" pos:end="174:21"><decl pos:start="174:5" pos:end="174:20"><type pos:start="174:5" pos:end="174:11"><name pos:start="174:5" pos:end="174:11">uint8_t</name></type> <name pos:start="174:13" pos:end="174:20"><name pos:start="174:13" pos:end="174:16">data</name><index pos:start="174:17" pos:end="174:20">[<expr pos:start="174:18" pos:end="174:19"><literal type="number" pos:start="174:18" pos:end="174:19">12</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt pos:start="175:5" pos:end="175:48"><expr pos:start="175:5" pos:end="175:47"><call pos:start="175:5" pos:end="175:47"><name pos:start="175:5" pos:end="175:16">cpu_to_be64w</name><argument_list pos:start="175:17" pos:end="175:47">(<argument pos:start="175:18" pos:end="175:32"><expr pos:start="175:18" pos:end="175:32"><operator pos:start="175:18" pos:end="175:18">(</operator><name pos:start="175:19" pos:end="175:26">uint64_t</name><operator pos:start="175:27" pos:end="175:27">*</operator><operator pos:start="175:28" pos:end="175:28">)</operator><name pos:start="175:29" pos:end="175:32">data</name></expr></argument>, <argument pos:start="175:35" pos:end="175:46"><expr pos:start="175:35" pos:end="175:46"><name pos:start="175:35" pos:end="175:46">table_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="176:5" pos:end="176:56"><expr pos:start="176:5" pos:end="176:55"><call pos:start="176:5" pos:end="176:55"><name pos:start="176:5" pos:end="176:16">cpu_to_be32w</name><argument_list pos:start="176:17" pos:end="176:55">(<argument pos:start="176:18" pos:end="176:38"><expr pos:start="176:18" pos:end="176:38"><operator pos:start="176:18" pos:end="176:18">(</operator><name pos:start="176:19" pos:end="176:26">uint32_t</name><operator pos:start="176:27" pos:end="176:27">*</operator><operator pos:start="176:28" pos:end="176:28">)</operator><operator pos:start="176:29" pos:end="176:29">(</operator><name pos:start="176:30" pos:end="176:33">data</name> <operator pos:start="176:35" pos:end="176:35">+</operator> <literal type="number" pos:start="176:37" pos:end="176:37">8</literal><operator pos:start="176:38" pos:end="176:38">)</operator></expr></argument>, <argument pos:start="176:41" pos:end="176:54"><expr pos:start="176:41" pos:end="176:54"><name pos:start="176:41" pos:end="176:54">table_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="177:5" pos:end="177:63"><expr pos:start="177:5" pos:end="177:62"><call pos:start="177:5" pos:end="177:62"><name pos:start="177:5" pos:end="177:16">BLKDBG_EVENT</name><argument_list pos:start="177:17" pos:end="177:62">(<argument pos:start="177:18" pos:end="177:25"><expr pos:start="177:18" pos:end="177:25"><name pos:start="177:18" pos:end="177:25"><name pos:start="177:18" pos:end="177:19">bs</name><operator pos:start="177:20" pos:end="177:21">-&gt;</operator><name pos:start="177:22" pos:end="177:25">file</name></name></expr></argument>, <argument pos:start="177:28" pos:end="177:61"><expr pos:start="177:28" pos:end="177:61"><name pos:start="177:28" pos:end="177:61">BLKDBG_REFBLOCK_ALLOC_SWITCH_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="178:5" pos:end="179:28"><expr pos:start="178:5" pos:end="179:27"><name pos:start="178:5" pos:end="178:7">ret</name> <operator pos:start="178:9" pos:end="178:9">=</operator> <call pos:start="178:11" pos:end="179:27"><name pos:start="178:11" pos:end="178:26">bdrv_pwrite_sync</name><argument_list pos:start="178:27" pos:end="179:27">(<argument pos:start="178:28" pos:end="178:35"><expr pos:start="178:28" pos:end="178:35"><name pos:start="178:28" pos:end="178:35"><name pos:start="178:28" pos:end="178:29">bs</name><operator pos:start="178:30" pos:end="178:31">-&gt;</operator><name pos:start="178:32" pos:end="178:35">file</name></name></expr></argument>, <argument pos:start="178:38" pos:end="178:80"><expr pos:start="178:38" pos:end="178:80"><call pos:start="178:38" pos:end="178:80"><name pos:start="178:38" pos:end="178:45">offsetof</name><argument_list pos:start="178:46" pos:end="178:80">(<argument pos:start="178:47" pos:end="178:56"><expr pos:start="178:47" pos:end="178:56"><name pos:start="178:47" pos:end="178:56">QCowHeader</name></expr></argument>, <argument pos:start="178:59" pos:end="178:79"><expr pos:start="178:59" pos:end="178:79"><name pos:start="178:59" pos:end="178:79">refcount_table_offset</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument pos:start="179:9" pos:end="179:12"><expr pos:start="179:9" pos:end="179:12"><name pos:start="179:9" pos:end="179:12">data</name></expr></argument>, <argument pos:start="179:15" pos:end="179:26"><expr pos:start="179:15" pos:end="179:26"><sizeof pos:start="179:15" pos:end="179:26">sizeof<argument_list pos:start="179:21" pos:end="179:26">(<argument pos:start="179:22" pos:end="179:25"><expr pos:start="179:22" pos:end="179:25"><name pos:start="179:22" pos:end="179:25">data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="180:5" pos:end="204:15"><if pos:start="180:5" pos:end="204:15">if <condition pos:start="180:8" pos:end="180:16">(<expr pos:start="180:9" pos:end="180:15"><name pos:start="180:9" pos:end="180:11">ret</name> <operator pos:start="180:13" pos:end="180:13">&lt;</operator> <literal type="number" pos:start="180:15" pos:end="180:15">0</literal></expr>)</condition> <block pos:start="180:18" pos:end="204:15">{<block_content pos:start="181:9" pos:end="204:15">
        <goto pos:start="181:9" pos:end="181:24">goto <name pos:start="181:14" pos:end="181:23">fail_table</name>;</goto>
    <comment type="block" pos:start="182:5" pos:end="182:33">/* And switch it in memory */</comment>
    <decl_stmt pos:start="183:5" pos:end="183:57"><decl pos:start="183:5" pos:end="183:56"><type pos:start="183:5" pos:end="183:12"><name pos:start="183:5" pos:end="183:12">uint64_t</name></type> <name pos:start="183:14" pos:end="183:29">old_table_offset</name> <init pos:start="183:31" pos:end="183:56">= <expr pos:start="183:33" pos:end="183:56"><name pos:start="183:33" pos:end="183:56"><name pos:start="183:33" pos:end="183:33">s</name><operator pos:start="183:34" pos:end="183:35">-&gt;</operator><name pos:start="183:36" pos:end="183:56">refcount_table_offset</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="184:5" pos:end="184:53"><decl pos:start="184:5" pos:end="184:52"><type pos:start="184:5" pos:end="184:12"><name pos:start="184:5" pos:end="184:12">uint64_t</name></type> <name pos:start="184:14" pos:end="184:27">old_table_size</name> <init pos:start="184:29" pos:end="184:52">= <expr pos:start="184:31" pos:end="184:52"><name pos:start="184:31" pos:end="184:52"><name pos:start="184:31" pos:end="184:31">s</name><operator pos:start="184:32" pos:end="184:33">-&gt;</operator><name pos:start="184:34" pos:end="184:52">refcount_table_size</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="185:5" pos:end="185:30"><expr pos:start="185:5" pos:end="185:29"><call pos:start="185:5" pos:end="185:29"><name pos:start="185:5" pos:end="185:10">g_free</name><argument_list pos:start="185:11" pos:end="185:29">(<argument pos:start="185:12" pos:end="185:28"><expr pos:start="185:12" pos:end="185:28"><name pos:start="185:12" pos:end="185:28"><name pos:start="185:12" pos:end="185:12">s</name><operator pos:start="185:13" pos:end="185:14">-&gt;</operator><name pos:start="185:15" pos:end="185:28">refcount_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="186:5" pos:end="186:34"><expr pos:start="186:5" pos:end="186:33"><name pos:start="186:5" pos:end="186:21"><name pos:start="186:5" pos:end="186:5">s</name><operator pos:start="186:6" pos:end="186:7">-&gt;</operator><name pos:start="186:8" pos:end="186:21">refcount_table</name></name> <operator pos:start="186:23" pos:end="186:23">=</operator> <name pos:start="186:25" pos:end="186:33">new_table</name></expr>;</expr_stmt>
    <expr_stmt pos:start="187:5" pos:end="187:40"><expr pos:start="187:5" pos:end="187:39"><name pos:start="187:5" pos:end="187:26"><name pos:start="187:5" pos:end="187:5">s</name><operator pos:start="187:6" pos:end="187:7">-&gt;</operator><name pos:start="187:8" pos:end="187:26">refcount_table_size</name></name> <operator pos:start="187:28" pos:end="187:28">=</operator> <name pos:start="187:30" pos:end="187:39">table_size</name></expr>;</expr_stmt>
    <expr_stmt pos:start="188:5" pos:end="188:44"><expr pos:start="188:5" pos:end="188:43"><name pos:start="188:5" pos:end="188:28"><name pos:start="188:5" pos:end="188:5">s</name><operator pos:start="188:6" pos:end="188:7">-&gt;</operator><name pos:start="188:8" pos:end="188:28">refcount_table_offset</name></name> <operator pos:start="188:30" pos:end="188:30">=</operator> <name pos:start="188:32" pos:end="188:43">table_offset</name></expr>;</expr_stmt>
    <comment type="block" pos:start="189:5" pos:end="189:25">/* Free old table. */</comment>
    <expr_stmt pos:start="190:5" pos:end="191:45"><expr pos:start="190:5" pos:end="191:44"><call pos:start="190:5" pos:end="191:44"><name pos:start="190:5" pos:end="190:23">qcow2_free_clusters</name><argument_list pos:start="190:24" pos:end="191:44">(<argument pos:start="190:25" pos:end="190:26"><expr pos:start="190:25" pos:end="190:26"><name pos:start="190:25" pos:end="190:26">bs</name></expr></argument>, <argument pos:start="190:29" pos:end="190:44"><expr pos:start="190:29" pos:end="190:44"><name pos:start="190:29" pos:end="190:44">old_table_offset</name></expr></argument>, <argument pos:start="190:47" pos:end="190:79"><expr pos:start="190:47" pos:end="190:79"><name pos:start="190:47" pos:end="190:60">old_table_size</name> <operator pos:start="190:62" pos:end="190:62">*</operator> <sizeof pos:start="190:64" pos:end="190:79">sizeof<argument_list pos:start="190:70" pos:end="190:79">(<argument pos:start="190:71" pos:end="190:78"><expr pos:start="190:71" pos:end="190:78"><name pos:start="190:71" pos:end="190:78">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                        <argument pos:start="191:25" pos:end="191:43"><expr pos:start="191:25" pos:end="191:43"><name pos:start="191:25" pos:end="191:43">QCOW2_DISCARD_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="192:5" pos:end="192:70"><expr pos:start="192:5" pos:end="192:69"><name pos:start="192:5" pos:end="192:7">ret</name> <operator pos:start="192:9" pos:end="192:9">=</operator> <call pos:start="192:11" pos:end="192:69"><name pos:start="192:11" pos:end="192:29">load_refcount_block</name><argument_list pos:start="192:30" pos:end="192:69">(<argument pos:start="192:31" pos:end="192:32"><expr pos:start="192:31" pos:end="192:32"><name pos:start="192:31" pos:end="192:32">bs</name></expr></argument>, <argument pos:start="192:35" pos:end="192:43"><expr pos:start="192:35" pos:end="192:43"><name pos:start="192:35" pos:end="192:43">new_block</name></expr></argument>, <argument pos:start="192:46" pos:end="192:68"><expr pos:start="192:46" pos:end="192:68"><operator pos:start="192:46" pos:end="192:46">(</operator><name pos:start="192:47" pos:end="192:50">void</name><operator pos:start="192:51" pos:end="192:51">*</operator><operator pos:start="192:52" pos:end="192:52">*</operator><operator pos:start="192:53" pos:end="192:53">)</operator> <name pos:start="192:55" pos:end="192:68">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="193:5" pos:end="204:15"><if pos:start="193:5" pos:end="204:15">if <condition pos:start="193:8" pos:end="193:16">(<expr pos:start="193:9" pos:end="193:15"><name pos:start="193:9" pos:end="193:11">ret</name> <operator pos:start="193:13" pos:end="193:13">&lt;</operator> <literal type="number" pos:start="193:15" pos:end="193:15">0</literal></expr>)</condition> <block pos:start="193:18" pos:end="204:15">{<block_content pos:start="194:9" pos:end="204:15">
        <return pos:start="194:9" pos:end="194:19">return <expr pos:start="194:16" pos:end="194:18"><name pos:start="194:16" pos:end="194:18">ret</name></expr>;</return>
    <comment type="block" pos:start="195:5" pos:end="197:68">/* If we were trying to do the initial refcount update for some cluster
     * allocation, we might have used the same clusters to store newly
     * allocated metadata. Make the caller search some new space. */</comment>
    <return pos:start="198:5" pos:end="198:19">return <expr pos:start="198:12" pos:end="198:18"><operator pos:start="198:12" pos:end="198:12">-</operator><name pos:start="198:13" pos:end="198:18">EAGAIN</name></expr>;</return>
<label pos:start="199:1" pos:end="199:11"><name pos:start="199:1" pos:end="199:10">fail_table</name>:</label>
    <expr_stmt pos:start="200:5" pos:end="200:22"><expr pos:start="200:5" pos:end="200:21"><call pos:start="200:5" pos:end="200:21"><name pos:start="200:5" pos:end="200:10">g_free</name><argument_list pos:start="200:11" pos:end="200:21">(<argument pos:start="200:12" pos:end="200:20"><expr pos:start="200:12" pos:end="200:20"><name pos:start="200:12" pos:end="200:20">new_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label pos:start="201:1" pos:end="201:11"><name pos:start="201:1" pos:end="201:10">fail_block</name>:</label>
    <if_stmt pos:start="202:5" pos:end="204:15"><if pos:start="202:5" pos:end="204:15">if <condition pos:start="202:8" pos:end="202:32">(<expr pos:start="202:9" pos:end="202:31"><operator pos:start="202:9" pos:end="202:9">*</operator><name pos:start="202:10" pos:end="202:23">refcount_block</name> <operator pos:start="202:25" pos:end="202:26">!=</operator> <name pos:start="202:28" pos:end="202:31">NULL</name></expr>)</condition> <block pos:start="202:34" pos:end="204:15">{<block_content pos:start="203:9" pos:end="204:15">
        <expr_stmt pos:start="203:9" pos:end="203:78"><expr pos:start="203:9" pos:end="203:77"><call pos:start="203:9" pos:end="203:77"><name pos:start="203:9" pos:end="203:23">qcow2_cache_put</name><argument_list pos:start="203:24" pos:end="203:77">(<argument pos:start="203:25" pos:end="203:26"><expr pos:start="203:25" pos:end="203:26"><name pos:start="203:25" pos:end="203:26">bs</name></expr></argument>, <argument pos:start="203:29" pos:end="203:51"><expr pos:start="203:29" pos:end="203:51"><name pos:start="203:29" pos:end="203:51"><name pos:start="203:29" pos:end="203:29">s</name><operator pos:start="203:30" pos:end="203:31">-&gt;</operator><name pos:start="203:32" pos:end="203:51">refcount_block_cache</name></name></expr></argument>, <argument pos:start="203:54" pos:end="203:76"><expr pos:start="203:54" pos:end="203:76"><operator pos:start="203:54" pos:end="203:54">(</operator><name pos:start="203:55" pos:end="203:58">void</name><operator pos:start="203:59" pos:end="203:59">*</operator><operator pos:start="203:60" pos:end="203:60">*</operator><operator pos:start="203:61" pos:end="203:61">)</operator> <name pos:start="203:63" pos:end="203:76">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="204:5" pos:end="204:15">return <expr pos:start="204:12" pos:end="204:14"><name pos:start="204:12" pos:end="204:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
