<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23808.c" pos:tabs="8"><function pos:start="1:1" pos:end="86:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">char</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:22">qmp_memchar_read</name><parameter_list pos:start="1:23" pos:end="5:36">(<parameter pos:start="1:24" pos:end="1:41"><decl pos:start="1:24" pos:end="1:41"><type pos:start="1:24" pos:end="1:41"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">device</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:50">int64_t</name></type> <name pos:start="1:52" pos:end="1:55">size</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:38"><decl pos:start="3:24" pos:end="3:38"><type pos:start="3:24" pos:end="3:38"><name pos:start="3:24" pos:end="3:27">bool</name></type> <name pos:start="3:29" pos:end="3:38">has_format</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:62"><decl pos:start="3:41" pos:end="3:62"><type pos:start="3:41" pos:end="3:62"><name pos:start="3:41" pos:end="3:55"><name pos:start="3:41" pos:end="3:44">enum</name> <name pos:start="3:46" pos:end="3:55">DataFormat</name></name></type> <name pos:start="3:57" pos:end="3:62">format</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:35"><decl pos:start="5:24" pos:end="5:35"><type pos:start="5:24" pos:end="5:35"><name pos:start="5:24" pos:end="5:28">Error</name> <modifier pos:start="5:30" pos:end="5:30">*</modifier><modifier pos:start="5:31" pos:end="5:31">*</modifier></type><name pos:start="5:32" pos:end="5:35">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="86:1">{<block_content pos:start="9:5" pos:end="84:16">

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:19">CharDriverState</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:24">chr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:22">read_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">size_t</name></type> <name pos:start="13:12" pos:end="13:16">count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:14">data</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:32"><expr pos:start="19:5" pos:end="19:31"><name pos:start="19:5" pos:end="19:7">chr</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:31"><name pos:start="19:11" pos:end="19:23">qemu_chr_find</name><argument_list pos:start="19:24" pos:end="19:31">(<argument pos:start="19:25" pos:end="19:30"><expr pos:start="19:25" pos:end="19:30"><name pos:start="19:25" pos:end="19:30">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:13">(<expr pos:start="21:9" pos:end="21:12"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:12">chr</name></expr>)</condition> <block pos:start="21:15" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:20">

        <expr_stmt pos:start="23:9" pos:end="23:58"><expr pos:start="23:9" pos:end="23:57"><call pos:start="23:9" pos:end="23:57"><name pos:start="23:9" pos:end="23:18">error_setg</name><argument_list pos:start="23:19" pos:end="23:57">(<argument pos:start="23:20" pos:end="23:23"><expr pos:start="23:20" pos:end="23:23"><name pos:start="23:20" pos:end="23:23">errp</name></expr></argument>, <argument pos:start="23:26" pos:end="23:48"><expr pos:start="23:26" pos:end="23:48"><literal type="string" pos:start="23:26" pos:end="23:48">"Device '%s' not found"</literal></expr></argument>, <argument pos:start="23:51" pos:end="23:56"><expr pos:start="23:51" pos:end="23:56"><name pos:start="23:51" pos:end="23:56">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:20">return <expr pos:start="25:16" pos:end="25:19"><name pos:start="25:16" pos:end="25:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:35">(<expr pos:start="31:9" pos:end="31:34"><call pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:19">qemu_is_chr</name><argument_list pos:start="31:20" pos:end="31:34">(<argument pos:start="31:21" pos:end="31:23"><expr pos:start="31:21" pos:end="31:23"><name pos:start="31:21" pos:end="31:23">chr</name></expr></argument>, <argument pos:start="31:26" pos:end="31:33"><expr pos:start="31:26" pos:end="31:33"><literal type="string" pos:start="31:26" pos:end="31:33">"memory"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:37" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:20">

        <expr_stmt pos:start="33:9" pos:end="33:64"><expr pos:start="33:9" pos:end="33:63"><call pos:start="33:9" pos:end="33:63"><name pos:start="33:9" pos:end="33:18">error_setg</name><argument_list pos:start="33:19" pos:end="33:63">(<argument pos:start="33:20" pos:end="33:23"><expr pos:start="33:20" pos:end="33:23"><name pos:start="33:20" pos:end="33:23">errp</name></expr></argument>,<argument pos:start="33:25" pos:end="33:54"><expr pos:start="33:25" pos:end="33:54"><literal type="string" pos:start="33:25" pos:end="33:54">"%s is not memory char device"</literal></expr></argument>, <argument pos:start="33:57" pos:end="33:62"><expr pos:start="33:57" pos:end="33:62"><name pos:start="33:57" pos:end="33:62">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:20">return <expr pos:start="35:16" pos:end="35:19"><name pos:start="35:16" pos:end="35:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:18">(<expr pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:12">size</name> <operator pos:start="41:14" pos:end="41:15">&lt;=</operator> <literal type="number" pos:start="41:17" pos:end="41:17">0</literal></expr>)</condition> <block pos:start="41:20" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:20">

        <expr_stmt pos:start="43:9" pos:end="43:59"><expr pos:start="43:9" pos:end="43:58"><call pos:start="43:9" pos:end="43:58"><name pos:start="43:9" pos:end="43:18">error_setg</name><argument_list pos:start="43:19" pos:end="43:58">(<argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">errp</name></expr></argument>, <argument pos:start="43:26" pos:end="43:57"><expr pos:start="43:26" pos:end="43:57"><literal type="string" pos:start="43:26" pos:end="43:57">"size must be greater than zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:20">return <expr pos:start="45:16" pos:end="45:19"><name pos:start="45:16" pos:end="45:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:39"><expr pos:start="51:5" pos:end="51:38"><name pos:start="51:5" pos:end="51:9">count</name> <operator pos:start="51:11" pos:end="51:11">=</operator> <call pos:start="51:13" pos:end="51:38"><name pos:start="51:13" pos:end="51:33">qemu_chr_cirmem_count</name><argument_list pos:start="51:34" pos:end="51:38">(<argument pos:start="51:35" pos:end="51:37"><expr pos:start="51:35" pos:end="51:37"><name pos:start="51:35" pos:end="51:37">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:19">(<expr pos:start="53:9" pos:end="53:18"><name pos:start="53:9" pos:end="53:13">count</name> <operator pos:start="53:15" pos:end="53:16">==</operator> <literal type="number" pos:start="53:18" pos:end="53:18">0</literal></expr>)</condition> <block pos:start="53:21" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:28">

        <return pos:start="55:9" pos:end="55:28">return <expr pos:start="55:16" pos:end="55:27"><call pos:start="55:16" pos:end="55:27"><name pos:start="55:16" pos:end="55:23">g_strdup</name><argument_list pos:start="55:24" pos:end="55:27">(<argument pos:start="55:25" pos:end="55:26"><expr pos:start="55:25" pos:end="55:26"><literal type="string" pos:start="55:25" pos:end="55:26">""</literal></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:39"><expr pos:start="61:5" pos:end="61:38"><name pos:start="61:5" pos:end="61:8">size</name> <operator pos:start="61:10" pos:end="61:10">=</operator> <ternary pos:start="61:12" pos:end="61:38"><condition pos:start="61:12" pos:end="61:25"><expr pos:start="61:12" pos:end="61:23"><name pos:start="61:12" pos:end="61:15">size</name> <operator pos:start="61:17" pos:end="61:17">&gt;</operator> <name pos:start="61:19" pos:end="61:23">count</name></expr> ?</condition><then pos:start="61:27" pos:end="61:31"> <expr pos:start="61:27" pos:end="61:31"><name pos:start="61:27" pos:end="61:31">count</name></expr> </then><else pos:start="61:33" pos:end="61:38">: <expr pos:start="61:35" pos:end="61:38"><name pos:start="61:35" pos:end="61:38">size</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:36"><expr pos:start="63:5" pos:end="63:35"><name pos:start="63:5" pos:end="63:13">read_data</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <call pos:start="63:17" pos:end="63:35"><name pos:start="63:17" pos:end="63:25">g_malloc0</name><argument_list pos:start="63:26" pos:end="63:35">(<argument pos:start="63:27" pos:end="63:34"><expr pos:start="63:27" pos:end="63:34"><name pos:start="63:27" pos:end="63:30">size</name> <operator pos:start="63:32" pos:end="63:32">+</operator> <literal type="number" pos:start="63:34" pos:end="63:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:42"><expr pos:start="67:5" pos:end="67:41"><call pos:start="67:5" pos:end="67:41"><name pos:start="67:5" pos:end="67:19">cirmem_chr_read</name><argument_list pos:start="67:20" pos:end="67:41">(<argument pos:start="67:21" pos:end="67:23"><expr pos:start="67:21" pos:end="67:23"><name pos:start="67:21" pos:end="67:23">chr</name></expr></argument>, <argument pos:start="67:26" pos:end="67:34"><expr pos:start="67:26" pos:end="67:34"><name pos:start="67:26" pos:end="67:34">read_data</name></expr></argument>, <argument pos:start="67:37" pos:end="67:40"><expr pos:start="67:37" pos:end="67:40"><name pos:start="67:37" pos:end="67:40">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="71:5" pos:end="80:5"><if pos:start="71:5" pos:end="76:5">if <condition pos:start="71:8" pos:end="71:53">(<expr pos:start="71:9" pos:end="71:52"><name pos:start="71:9" pos:end="71:18">has_format</name> <operator pos:start="71:20" pos:end="71:21">&amp;&amp;</operator> <operator pos:start="71:23" pos:end="71:23">(</operator><name pos:start="71:24" pos:end="71:29">format</name> <operator pos:start="71:31" pos:end="71:32">==</operator> <name pos:start="71:34" pos:end="71:51">DATA_FORMAT_BASE64</name><operator pos:start="71:52" pos:end="71:52">)</operator></expr>)</condition> <block pos:start="71:55" pos:end="76:5">{<block_content pos:start="73:9" pos:end="73:48">

        <expr_stmt pos:start="73:9" pos:end="73:48"><expr pos:start="73:9" pos:end="73:47"><name pos:start="73:9" pos:end="73:12">data</name> <operator pos:start="73:14" pos:end="73:14">=</operator> <call pos:start="73:16" pos:end="73:47"><name pos:start="73:16" pos:end="73:30">g_base64_encode</name><argument_list pos:start="73:31" pos:end="73:47">(<argument pos:start="73:32" pos:end="73:40"><expr pos:start="73:32" pos:end="73:40"><name pos:start="73:32" pos:end="73:40">read_data</name></expr></argument>, <argument pos:start="73:43" pos:end="73:46"><expr pos:start="73:43" pos:end="73:46"><name pos:start="73:43" pos:end="73:46">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></if> <else pos:start="76:7" pos:end="80:5">else <block pos:start="76:12" pos:end="80:5">{<block_content pos:start="78:9" pos:end="78:33">

        <expr_stmt pos:start="78:9" pos:end="78:33"><expr pos:start="78:9" pos:end="78:32"><name pos:start="78:9" pos:end="78:12">data</name> <operator pos:start="78:14" pos:end="78:14">=</operator> <operator pos:start="78:16" pos:end="78:16">(</operator><name pos:start="78:17" pos:end="78:20">char</name> <operator pos:start="78:22" pos:end="78:22">*</operator><operator pos:start="78:23" pos:end="78:23">)</operator><name pos:start="78:24" pos:end="78:32">read_data</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="84:5" pos:end="84:16">return <expr pos:start="84:12" pos:end="84:15"><name pos:start="84:12" pos:end="84:15">data</name></expr>;</return>

</block_content>}</block></function></unit>
