<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11102.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">nbd_receive_reply</name><parameter_list pos:start="1:22" pos:end="1:57">(<parameter pos:start="1:23" pos:end="1:31"><decl pos:start="1:23" pos:end="1:31"><type pos:start="1:23" pos:end="1:31"><name pos:start="1:23" pos:end="1:25">int</name></type> <name pos:start="1:27" pos:end="1:31">csock</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:56"><decl pos:start="1:34" pos:end="1:56"><type pos:start="1:34" pos:end="1:56"><name pos:start="1:34" pos:end="1:49"><name pos:start="1:34" pos:end="1:39">struct</name> <name pos:start="1:41" pos:end="1:49">nbd_reply</name></name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:56">reply</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:13">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:31"><name pos:start="5:13" pos:end="5:15">buf</name><index pos:start="5:16" pos:end="5:31">[<expr pos:start="5:17" pos:end="5:30"><name pos:start="5:17" pos:end="5:30">NBD_REPLY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:18">magic</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:35"><expr pos:start="11:5" pos:end="11:34"><call pos:start="11:5" pos:end="11:34"><name pos:start="11:5" pos:end="11:10">memset</name><argument_list pos:start="11:11" pos:end="11:34">(<argument pos:start="11:12" pos:end="11:14"><expr pos:start="11:12" pos:end="11:14"><name pos:start="11:12" pos:end="11:14">buf</name></expr></argument>, <argument pos:start="11:17" pos:end="11:20"><expr pos:start="11:17" pos:end="11:20"><literal type="number" pos:start="11:17" pos:end="11:20">0xAA</literal></expr></argument>, <argument pos:start="11:23" pos:end="11:33"><expr pos:start="11:23" pos:end="11:33"><sizeof pos:start="11:23" pos:end="11:33">sizeof<argument_list pos:start="11:29" pos:end="11:33">(<argument pos:start="11:30" pos:end="11:32"><expr pos:start="11:30" pos:end="11:32"><name pos:start="11:30" pos:end="11:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:58">(<expr pos:start="15:9" pos:end="15:57"><call pos:start="15:9" pos:end="15:42"><name pos:start="15:9" pos:end="15:17">read_sync</name><argument_list pos:start="15:18" pos:end="15:42">(<argument pos:start="15:19" pos:end="15:23"><expr pos:start="15:19" pos:end="15:23"><name pos:start="15:19" pos:end="15:23">csock</name></expr></argument>, <argument pos:start="15:26" pos:end="15:28"><expr pos:start="15:26" pos:end="15:28"><name pos:start="15:26" pos:end="15:28">buf</name></expr></argument>, <argument pos:start="15:31" pos:end="15:41"><expr pos:start="15:31" pos:end="15:41"><sizeof pos:start="15:31" pos:end="15:41">sizeof<argument_list pos:start="15:37" pos:end="15:41">(<argument pos:start="15:38" pos:end="15:40"><expr pos:start="15:38" pos:end="15:40"><name pos:start="15:38" pos:end="15:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="15:44" pos:end="15:45">!=</operator> <sizeof pos:start="15:47" pos:end="15:57">sizeof<argument_list pos:start="15:53" pos:end="15:57">(<argument pos:start="15:54" pos:end="15:56"><expr pos:start="15:54" pos:end="15:56"><name pos:start="15:54" pos:end="15:56">buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="15:60" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:18">

        <expr_stmt pos:start="17:9" pos:end="17:27"><expr pos:start="17:9" pos:end="17:26"><call pos:start="17:9" pos:end="17:26"><name pos:start="17:9" pos:end="17:11">LOG</name><argument_list pos:start="17:12" pos:end="17:26">(<argument pos:start="17:13" pos:end="17:25"><expr pos:start="17:13" pos:end="17:25"><literal type="string" pos:start="17:13" pos:end="17:25">"read failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:23"><expr pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:13">errno</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <name pos:start="19:17" pos:end="19:22">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="35:7">/* Reply

       [ 0 ..  3]    magic   (NBD_REPLY_MAGIC)

       [ 4 ..  7]    error   (0 == no error)

       [ 7 .. 15]    handle

     */</comment>



    <expr_stmt pos:start="39:5" pos:end="39:41"><expr pos:start="39:5" pos:end="39:40"><name pos:start="39:5" pos:end="39:9">magic</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <call pos:start="39:13" pos:end="39:40"><name pos:start="39:13" pos:end="39:24">be32_to_cpup</name><argument_list pos:start="39:25" pos:end="39:40">(<argument pos:start="39:26" pos:end="39:39"><expr pos:start="39:26" pos:end="39:39"><operator pos:start="39:26" pos:end="39:26">(</operator><name pos:start="39:27" pos:end="39:34">uint32_t</name><operator pos:start="39:35" pos:end="39:35">*</operator><operator pos:start="39:36" pos:end="39:36">)</operator><name pos:start="39:37" pos:end="39:39">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:55"><expr pos:start="41:5" pos:end="41:54"><name pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:9">reply</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:16">error</name></name>  <operator pos:start="41:19" pos:end="41:19">=</operator> <call pos:start="41:21" pos:end="41:54"><name pos:start="41:21" pos:end="41:32">be32_to_cpup</name><argument_list pos:start="41:33" pos:end="41:54">(<argument pos:start="41:34" pos:end="41:53"><expr pos:start="41:34" pos:end="41:53"><operator pos:start="41:34" pos:end="41:34">(</operator><name pos:start="41:35" pos:end="41:42">uint32_t</name><operator pos:start="41:43" pos:end="41:43">*</operator><operator pos:start="41:44" pos:end="41:44">)</operator><operator pos:start="41:45" pos:end="41:45">(</operator><name pos:start="41:46" pos:end="41:48">buf</name> <operator pos:start="41:50" pos:end="41:50">+</operator> <literal type="number" pos:start="41:52" pos:end="41:52">4</literal><operator pos:start="41:53" pos:end="41:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:55"><expr pos:start="43:5" pos:end="43:54"><name pos:start="43:5" pos:end="43:17"><name pos:start="43:5" pos:end="43:9">reply</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:17">handle</name></name> <operator pos:start="43:19" pos:end="43:19">=</operator> <call pos:start="43:21" pos:end="43:54"><name pos:start="43:21" pos:end="43:32">be64_to_cpup</name><argument_list pos:start="43:33" pos:end="43:54">(<argument pos:start="43:34" pos:end="43:53"><expr pos:start="43:34" pos:end="43:53"><operator pos:start="43:34" pos:end="43:34">(</operator><name pos:start="43:35" pos:end="43:42">uint64_t</name><operator pos:start="43:43" pos:end="43:43">*</operator><operator pos:start="43:44" pos:end="43:44">)</operator><operator pos:start="43:45" pos:end="43:45">(</operator><name pos:start="43:46" pos:end="43:48">buf</name> <operator pos:start="43:50" pos:end="43:50">+</operator> <literal type="number" pos:start="43:52" pos:end="43:52">8</literal><operator pos:start="43:53" pos:end="43:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="51:46"><expr pos:start="47:5" pos:end="51:45"><call pos:start="47:5" pos:end="51:45"><name pos:start="47:5" pos:end="47:9">TRACE</name><argument_list pos:start="47:10" pos:end="51:45">(<argument pos:start="47:11" pos:end="49:62"><expr pos:start="47:11" pos:end="49:62"><literal type="string" pos:start="47:11" pos:end="47:23">"Got reply: "</literal>

          <literal type="string" pos:start="49:11" pos:end="49:51">"{ magic = 0x%x, .error = %d, handle = %"</literal> <name pos:start="49:53" pos:end="49:58">PRIu64</name><literal type="string" pos:start="49:59" pos:end="49:62">" }"</literal></expr></argument>,

          <argument pos:start="51:11" pos:end="51:15"><expr pos:start="51:11" pos:end="51:15"><name pos:start="51:11" pos:end="51:15">magic</name></expr></argument>, <argument pos:start="51:18" pos:end="51:29"><expr pos:start="51:18" pos:end="51:29"><name pos:start="51:18" pos:end="51:29"><name pos:start="51:18" pos:end="51:22">reply</name><operator pos:start="51:23" pos:end="51:24">-&gt;</operator><name pos:start="51:25" pos:end="51:29">error</name></name></expr></argument>, <argument pos:start="51:32" pos:end="51:44"><expr pos:start="51:32" pos:end="51:44"><name pos:start="51:32" pos:end="51:44"><name pos:start="51:32" pos:end="51:36">reply</name><operator pos:start="51:37" pos:end="51:38">-&gt;</operator><name pos:start="51:39" pos:end="51:44">handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:33">(<expr pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:13">magic</name> <operator pos:start="55:15" pos:end="55:16">!=</operator> <name pos:start="55:18" pos:end="55:32">NBD_REPLY_MAGIC</name></expr>)</condition> <block pos:start="55:35" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:18">

        <expr_stmt pos:start="57:9" pos:end="57:47"><expr pos:start="57:9" pos:end="57:46"><call pos:start="57:9" pos:end="57:46"><name pos:start="57:9" pos:end="57:11">LOG</name><argument_list pos:start="57:12" pos:end="57:46">(<argument pos:start="57:13" pos:end="57:38"><expr pos:start="57:13" pos:end="57:38"><literal type="string" pos:start="57:13" pos:end="57:38">"invalid magic (got 0x%x)"</literal></expr></argument>, <argument pos:start="57:41" pos:end="57:45"><expr pos:start="57:41" pos:end="57:45"><name pos:start="57:41" pos:end="57:45">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:23"><expr pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:13">errno</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <name pos:start="59:17" pos:end="59:22">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:18">return <expr pos:start="61:16" pos:end="61:17"><operator pos:start="61:16" pos:end="61:16">-</operator><literal type="number" pos:start="61:17" pos:end="61:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="65:5" pos:end="65:13">return <expr pos:start="65:12" pos:end="65:12"><literal type="number" pos:start="65:12" pos:end="65:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
