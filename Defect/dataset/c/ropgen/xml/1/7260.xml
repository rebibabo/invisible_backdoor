<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7260.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">parse_playlist</name><parameter_list pos:start="1:26" pos:end="1:57">(<parameter pos:start="1:27" pos:end="1:39"><decl pos:start="1:27" pos:end="1:39"><type pos:start="1:27" pos:end="1:39"><name pos:start="1:27" pos:end="1:36">URLContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">h</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:56"><decl pos:start="1:42" pos:end="1:56"><type pos:start="1:42" pos:end="1:56"><specifier pos:start="1:42" pos:end="1:46">const</specifier> <name pos:start="1:48" pos:end="1:51">char</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">url</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="135:1">{<block_content pos:start="5:5" pos:end="133:15">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">HLSContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:32">= <expr pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:21">h</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">AVIOContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">in</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:63"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>, <decl pos:start="9:18" pos:end="9:31"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:27">is_segment</name> <init pos:start="9:29" pos:end="9:31">= <expr pos:start="9:31" pos:end="9:31"><literal type="number" pos:start="9:31" pos:end="9:31">0</literal></expr></init></decl>, <decl pos:start="9:34" pos:end="9:47"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:34" pos:end="9:43">is_variant</name> <init pos:start="9:45" pos:end="9:47">= <expr pos:start="9:47" pos:end="9:47"><literal type="number" pos:start="9:47" pos:end="9:47">0</literal></expr></init></decl>, <decl pos:start="9:50" pos:end="9:62"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:50" pos:end="9:58">bandwidth</name> <init pos:start="9:60" pos:end="9:62">= <expr pos:start="9:62" pos:end="9:62"><literal type="number" pos:start="9:62" pos:end="9:62">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:20">duration</name> <init pos:start="11:22" pos:end="11:24">= <expr pos:start="11:24" pos:end="11:24"><literal type="number" pos:start="11:24" pos:end="11:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:19"><name pos:start="13:10" pos:end="13:13">line</name><index pos:start="13:14" pos:end="13:19">[<expr pos:start="13:15" pos:end="13:18"><literal type="number" pos:start="13:15" pos:end="13:18">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:19">ptr</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:19"><if pos:start="19:5" pos:end="23:19">if <condition pos:start="19:8" pos:end="21:61">(<expr pos:start="19:9" pos:end="21:60"><operator pos:start="19:9" pos:end="19:9">(</operator><name pos:start="19:10" pos:end="19:12">ret</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <call pos:start="19:16" pos:end="21:55"><name pos:start="19:16" pos:end="19:25">avio_open2</name><argument_list pos:start="19:26" pos:end="21:55">(<argument pos:start="19:27" pos:end="19:29"><expr pos:start="19:27" pos:end="19:29"><operator pos:start="19:27" pos:end="19:27">&amp;</operator><name pos:start="19:28" pos:end="19:29">in</name></expr></argument>, <argument pos:start="19:32" pos:end="19:34"><expr pos:start="19:32" pos:end="19:34"><name pos:start="19:32" pos:end="19:34">url</name></expr></argument>, <argument pos:start="19:37" pos:end="19:50"><expr pos:start="19:37" pos:end="19:50"><name pos:start="19:37" pos:end="19:50">AVIO_FLAG_READ</name></expr></argument>,

                          <argument pos:start="21:27" pos:end="21:48"><expr pos:start="21:27" pos:end="21:48"><operator pos:start="21:27" pos:end="21:27">&amp;</operator><name pos:start="21:28" pos:end="21:48"><name pos:start="21:28" pos:end="21:28">h</name><operator pos:start="21:29" pos:end="21:30">-&gt;</operator><name pos:start="21:31" pos:end="21:48">interrupt_callback</name></name></expr></argument>, <argument pos:start="21:51" pos:end="21:54"><expr pos:start="21:51" pos:end="21:54"><name pos:start="21:51" pos:end="21:54">NULL</name></expr></argument>)</argument_list></call><operator pos:start="21:56" pos:end="21:56">)</operator> <operator pos:start="21:58" pos:end="21:58">&lt;</operator> <literal type="number" pos:start="21:60" pos:end="21:60">0</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:19"><block_content pos:start="23:9" pos:end="23:19">

        <return pos:start="23:9" pos:end="23:19">return <expr pos:start="23:16" pos:end="23:18"><name pos:start="23:16" pos:end="23:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:44"><expr pos:start="27:5" pos:end="27:43"><call pos:start="27:5" pos:end="27:43"><name pos:start="27:5" pos:end="27:19">read_chomp_line</name><argument_list pos:start="27:20" pos:end="27:43">(<argument pos:start="27:21" pos:end="27:22"><expr pos:start="27:21" pos:end="27:22"><name pos:start="27:21" pos:end="27:22">in</name></expr></argument>, <argument pos:start="27:25" pos:end="27:28"><expr pos:start="27:25" pos:end="27:28"><name pos:start="27:25" pos:end="27:28">line</name></expr></argument>, <argument pos:start="27:31" pos:end="27:42"><expr pos:start="27:31" pos:end="27:42"><sizeof pos:start="27:31" pos:end="27:42">sizeof<argument_list pos:start="27:37" pos:end="27:42">(<argument pos:start="27:38" pos:end="27:41"><expr pos:start="27:38" pos:end="27:41"><name pos:start="27:38" pos:end="27:41">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="31:35"><if pos:start="29:5" pos:end="31:35">if <condition pos:start="29:8" pos:end="29:32">(<expr pos:start="29:9" pos:end="29:31"><call pos:start="29:9" pos:end="29:31"><name pos:start="29:9" pos:end="29:14">strcmp</name><argument_list pos:start="29:15" pos:end="29:31">(<argument pos:start="29:16" pos:end="29:19"><expr pos:start="29:16" pos:end="29:19"><name pos:start="29:16" pos:end="29:19">line</name></expr></argument>, <argument pos:start="29:22" pos:end="29:30"><expr pos:start="29:22" pos:end="29:30"><literal type="string" pos:start="29:22" pos:end="29:30">"#EXTM3U"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:35"><block_content pos:start="31:9" pos:end="31:35">

        <return pos:start="31:9" pos:end="31:35">return <expr pos:start="31:16" pos:end="31:34"><name pos:start="31:16" pos:end="31:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:25"><expr pos:start="35:5" pos:end="35:24"><call pos:start="35:5" pos:end="35:24"><name pos:start="35:5" pos:end="35:21">free_segment_list</name><argument_list pos:start="35:22" pos:end="35:24">(<argument pos:start="35:23" pos:end="35:23"><expr pos:start="35:23" pos:end="35:23"><name pos:start="35:23" pos:end="35:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:20"><expr pos:start="37:5" pos:end="37:19"><name pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:15">finished</name></name> <operator pos:start="37:17" pos:end="37:17">=</operator> <literal type="number" pos:start="37:19" pos:end="37:19">0</literal></expr>;</expr_stmt>

    <while pos:start="39:5" pos:end="123:5">while <condition pos:start="39:11" pos:end="39:28">(<expr pos:start="39:12" pos:end="39:27"><operator pos:start="39:12" pos:end="39:12">!</operator><name pos:start="39:13" pos:end="39:27"><name pos:start="39:13" pos:end="39:14">in</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:27">eof_reached</name></name></expr>)</condition> <block pos:start="39:30" pos:end="123:5">{<block_content pos:start="41:9" pos:end="121:9">

        <expr_stmt pos:start="41:9" pos:end="41:48"><expr pos:start="41:9" pos:end="41:47"><call pos:start="41:9" pos:end="41:47"><name pos:start="41:9" pos:end="41:23">read_chomp_line</name><argument_list pos:start="41:24" pos:end="41:47">(<argument pos:start="41:25" pos:end="41:26"><expr pos:start="41:25" pos:end="41:26"><name pos:start="41:25" pos:end="41:26">in</name></expr></argument>, <argument pos:start="41:29" pos:end="41:32"><expr pos:start="41:29" pos:end="41:32"><name pos:start="41:29" pos:end="41:32">line</name></expr></argument>, <argument pos:start="41:35" pos:end="41:46"><expr pos:start="41:35" pos:end="41:46"><sizeof pos:start="41:35" pos:end="41:46">sizeof<argument_list pos:start="41:41" pos:end="41:46">(<argument pos:start="41:42" pos:end="41:45"><expr pos:start="41:42" pos:end="41:45"><name pos:start="41:42" pos:end="41:45">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="121:9"><if pos:start="43:9" pos:end="55:9">if <condition pos:start="43:12" pos:end="43:58">(<expr pos:start="43:13" pos:end="43:57"><call pos:start="43:13" pos:end="43:57"><name pos:start="43:13" pos:end="43:23">av_strstart</name><argument_list pos:start="43:24" pos:end="43:57">(<argument pos:start="43:25" pos:end="43:28"><expr pos:start="43:25" pos:end="43:28"><name pos:start="43:25" pos:end="43:28">line</name></expr></argument>, <argument pos:start="43:31" pos:end="43:50"><expr pos:start="43:31" pos:end="43:50"><literal type="string" pos:start="43:31" pos:end="43:50">"#EXT-X-STREAM-INF:"</literal></expr></argument>, <argument pos:start="43:53" pos:end="43:56"><expr pos:start="43:53" pos:end="43:56"><operator pos:start="43:53" pos:end="43:53">&amp;</operator><name pos:start="43:54" pos:end="43:56">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:60" pos:end="55:9">{<block_content pos:start="45:13" pos:end="53:45">

            <decl_stmt pos:start="45:13" pos:end="45:45"><decl pos:start="45:13" pos:end="45:44"><type pos:start="45:13" pos:end="45:31"><name pos:start="45:13" pos:end="45:31"><name pos:start="45:13" pos:end="45:18">struct</name> <name pos:start="45:20" pos:end="45:31">variant_info</name></name></type> <name pos:start="45:33" pos:end="45:36">info</name> <init pos:start="45:38" pos:end="45:44">= <expr pos:start="45:40" pos:end="45:44"><block pos:start="45:40" pos:end="45:44">{<expr pos:start="45:41" pos:end="45:43"><block pos:start="45:41" pos:end="45:43">{<expr pos:start="45:42" pos:end="45:42"><literal type="number" pos:start="45:42" pos:end="45:42">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:27"><expr pos:start="47:13" pos:end="47:26"><name pos:start="47:13" pos:end="47:22">is_variant</name> <operator pos:start="47:24" pos:end="47:24">=</operator> <literal type="number" pos:start="47:26" pos:end="47:26">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="51:38"><expr pos:start="49:13" pos:end="51:37"><call pos:start="49:13" pos:end="51:37"><name pos:start="49:13" pos:end="49:30">ff_parse_key_value</name><argument_list pos:start="49:31" pos:end="51:37">(<argument pos:start="49:32" pos:end="49:34"><expr pos:start="49:32" pos:end="49:34"><name pos:start="49:32" pos:end="49:34">ptr</name></expr></argument>, <argument pos:start="49:37" pos:end="49:77"><expr pos:start="49:37" pos:end="49:77"><operator pos:start="49:37" pos:end="49:37">(</operator><name pos:start="49:38" pos:end="49:56">ff_parse_key_val_cb</name><operator pos:start="49:57" pos:end="49:57">)</operator> <name pos:start="49:59" pos:end="49:77">handle_variant_args</name></expr></argument>,

                               <argument pos:start="51:32" pos:end="51:36"><expr pos:start="51:32" pos:end="51:36"><operator pos:start="51:32" pos:end="51:32">&amp;</operator><name pos:start="51:33" pos:end="51:36">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:45"><expr pos:start="53:13" pos:end="53:44"><name pos:start="53:13" pos:end="53:21">bandwidth</name> <operator pos:start="53:23" pos:end="53:23">=</operator> <call pos:start="53:25" pos:end="53:44"><name pos:start="53:25" pos:end="53:28">atoi</name><argument_list pos:start="53:29" pos:end="53:44">(<argument pos:start="53:30" pos:end="53:43"><expr pos:start="53:30" pos:end="53:43"><name pos:start="53:30" pos:end="53:43"><name pos:start="53:30" pos:end="53:33">info</name><operator pos:start="53:34" pos:end="53:34">.</operator><name pos:start="53:35" pos:end="53:43">bandwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="55:11" pos:end="59:9">else if <condition pos:start="55:19" pos:end="55:69">(<expr pos:start="55:20" pos:end="55:68"><call pos:start="55:20" pos:end="55:68"><name pos:start="55:20" pos:end="55:30">av_strstart</name><argument_list pos:start="55:31" pos:end="55:68">(<argument pos:start="55:32" pos:end="55:35"><expr pos:start="55:32" pos:end="55:35"><name pos:start="55:32" pos:end="55:35">line</name></expr></argument>, <argument pos:start="55:38" pos:end="55:61"><expr pos:start="55:38" pos:end="55:61"><literal type="string" pos:start="55:38" pos:end="55:61">"#EXT-X-TARGETDURATION:"</literal></expr></argument>, <argument pos:start="55:64" pos:end="55:67"><expr pos:start="55:64" pos:end="55:67"><operator pos:start="55:64" pos:end="55:64">&amp;</operator><name pos:start="55:65" pos:end="55:67">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:71" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:58">

            <expr_stmt pos:start="57:13" pos:end="57:58"><expr pos:start="57:13" pos:end="57:57"><name pos:start="57:13" pos:end="57:30"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:30">target_duration</name></name> <operator pos:start="57:32" pos:end="57:32">=</operator> <call pos:start="57:34" pos:end="57:42"><name pos:start="57:34" pos:end="57:37">atoi</name><argument_list pos:start="57:38" pos:end="57:42">(<argument pos:start="57:39" pos:end="57:41"><expr pos:start="57:39" pos:end="57:41"><name pos:start="57:39" pos:end="57:41">ptr</name></expr></argument>)</argument_list></call> <operator pos:start="57:44" pos:end="57:44">*</operator> <name pos:start="57:46" pos:end="57:57">AV_TIME_BASE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="59:11" pos:end="63:9">else if <condition pos:start="59:19" pos:end="59:69">(<expr pos:start="59:20" pos:end="59:68"><call pos:start="59:20" pos:end="59:68"><name pos:start="59:20" pos:end="59:30">av_strstart</name><argument_list pos:start="59:31" pos:end="59:68">(<argument pos:start="59:32" pos:end="59:35"><expr pos:start="59:32" pos:end="59:35"><name pos:start="59:32" pos:end="59:35">line</name></expr></argument>, <argument pos:start="59:38" pos:end="59:61"><expr pos:start="59:38" pos:end="59:61"><literal type="string" pos:start="59:38" pos:end="59:61">"#EXT-X-MEDIA-SEQUENCE:"</literal></expr></argument>, <argument pos:start="59:64" pos:end="59:67"><expr pos:start="59:64" pos:end="59:67"><operator pos:start="59:64" pos:end="59:64">&amp;</operator><name pos:start="59:65" pos:end="59:67">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:71" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:40">

            <expr_stmt pos:start="61:13" pos:end="61:40"><expr pos:start="61:13" pos:end="61:39"><name pos:start="61:13" pos:end="61:27"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:27">start_seq_no</name></name> <operator pos:start="61:29" pos:end="61:29">=</operator> <call pos:start="61:31" pos:end="61:39"><name pos:start="61:31" pos:end="61:34">atoi</name><argument_list pos:start="61:35" pos:end="61:39">(<argument pos:start="61:36" pos:end="61:38"><expr pos:start="61:36" pos:end="61:38"><name pos:start="61:36" pos:end="61:38">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="63:11" pos:end="67:9">else if <condition pos:start="63:19" pos:end="63:61">(<expr pos:start="63:20" pos:end="63:60"><call pos:start="63:20" pos:end="63:60"><name pos:start="63:20" pos:end="63:30">av_strstart</name><argument_list pos:start="63:31" pos:end="63:60">(<argument pos:start="63:32" pos:end="63:35"><expr pos:start="63:32" pos:end="63:35"><name pos:start="63:32" pos:end="63:35">line</name></expr></argument>, <argument pos:start="63:38" pos:end="63:53"><expr pos:start="63:38" pos:end="63:53"><literal type="string" pos:start="63:38" pos:end="63:53">"#EXT-X-ENDLIST"</literal></expr></argument>, <argument pos:start="63:56" pos:end="63:59"><expr pos:start="63:56" pos:end="63:59"><operator pos:start="63:56" pos:end="63:56">&amp;</operator><name pos:start="63:57" pos:end="63:59">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:63" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:28">

            <expr_stmt pos:start="65:13" pos:end="65:28"><expr pos:start="65:13" pos:end="65:27"><name pos:start="65:13" pos:end="65:23"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:23">finished</name></name> <operator pos:start="65:25" pos:end="65:25">=</operator> <literal type="number" pos:start="65:27" pos:end="65:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="67:11" pos:end="73:9">else if <condition pos:start="67:19" pos:end="67:55">(<expr pos:start="67:20" pos:end="67:54"><call pos:start="67:20" pos:end="67:54"><name pos:start="67:20" pos:end="67:30">av_strstart</name><argument_list pos:start="67:31" pos:end="67:54">(<argument pos:start="67:32" pos:end="67:35"><expr pos:start="67:32" pos:end="67:35"><name pos:start="67:32" pos:end="67:35">line</name></expr></argument>, <argument pos:start="67:38" pos:end="67:47"><expr pos:start="67:38" pos:end="67:47"><literal type="string" pos:start="67:38" pos:end="67:47">"#EXTINF:"</literal></expr></argument>, <argument pos:start="67:50" pos:end="67:53"><expr pos:start="67:50" pos:end="67:53"><operator pos:start="67:50" pos:end="67:50">&amp;</operator><name pos:start="67:51" pos:end="67:53">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:57" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:48">

            <expr_stmt pos:start="69:13" pos:end="69:27"><expr pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:22">is_segment</name> <operator pos:start="69:24" pos:end="69:24">=</operator> <literal type="number" pos:start="69:26" pos:end="69:26">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:48"><expr pos:start="71:13" pos:end="71:47"><name pos:start="71:13" pos:end="71:20">duration</name> <operator pos:start="71:22" pos:end="71:22">=</operator> <call pos:start="71:24" pos:end="71:32"><name pos:start="71:24" pos:end="71:27">atof</name><argument_list pos:start="71:28" pos:end="71:32">(<argument pos:start="71:29" pos:end="71:31"><expr pos:start="71:29" pos:end="71:31"><name pos:start="71:29" pos:end="71:31">ptr</name></expr></argument>)</argument_list></call> <operator pos:start="71:34" pos:end="71:34">*</operator> <name pos:start="71:36" pos:end="71:47">AV_TIME_BASE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="73:11" pos:end="77:9">else if <condition pos:start="73:19" pos:end="73:48">(<expr pos:start="73:20" pos:end="73:47"><call pos:start="73:20" pos:end="73:47"><name pos:start="73:20" pos:end="73:30">av_strstart</name><argument_list pos:start="73:31" pos:end="73:47">(<argument pos:start="73:32" pos:end="73:35"><expr pos:start="73:32" pos:end="73:35"><name pos:start="73:32" pos:end="73:35">line</name></expr></argument>, <argument pos:start="73:38" pos:end="73:40"><expr pos:start="73:38" pos:end="73:40"><literal type="string" pos:start="73:38" pos:end="73:40">"#"</literal></expr></argument>, <argument pos:start="73:43" pos:end="73:46"><expr pos:start="73:43" pos:end="73:46"><name pos:start="73:43" pos:end="73:46">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:50" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:21">

            <continue pos:start="75:13" pos:end="75:21">continue;</continue>

        </block_content>}</block></if> <if type="elseif" pos:start="77:11" pos:end="121:9">else if <condition pos:start="77:19" pos:end="77:27">(<expr pos:start="77:20" pos:end="77:26"><name pos:start="77:20" pos:end="77:26"><name pos:start="77:20" pos:end="77:23">line</name><index pos:start="77:24" pos:end="77:26">[<expr pos:start="77:25" pos:end="77:25"><literal type="number" pos:start="77:25" pos:end="77:25">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="77:29" pos:end="121:9">{<block_content pos:start="79:13" pos:end="119:13">

            <if_stmt pos:start="79:13" pos:end="119:13"><if pos:start="79:13" pos:end="99:13">if <condition pos:start="79:16" pos:end="79:27">(<expr pos:start="79:17" pos:end="79:26"><name pos:start="79:17" pos:end="79:26">is_segment</name></expr>)</condition> <block pos:start="79:29" pos:end="99:13">{<block_content pos:start="81:17" pos:end="97:31">

                <decl_stmt pos:start="81:17" pos:end="81:72"><decl pos:start="81:17" pos:end="81:71"><type pos:start="81:17" pos:end="81:32"><name pos:start="81:17" pos:end="81:30"><name pos:start="81:17" pos:end="81:22">struct</name> <name pos:start="81:24" pos:end="81:30">segment</name></name> <modifier pos:start="81:32" pos:end="81:32">*</modifier></type><name pos:start="81:33" pos:end="81:35">seg</name> <init pos:start="81:37" pos:end="81:71">= <expr pos:start="81:39" pos:end="81:71"><call pos:start="81:39" pos:end="81:71"><name pos:start="81:39" pos:end="81:47">av_malloc</name><argument_list pos:start="81:48" pos:end="81:71">(<argument pos:start="81:49" pos:end="81:70"><expr pos:start="81:49" pos:end="81:70"><sizeof pos:start="81:49" pos:end="81:70">sizeof<argument_list pos:start="81:55" pos:end="81:70">(<argument pos:start="81:56" pos:end="81:69"><expr pos:start="81:56" pos:end="81:69">struct <name pos:start="81:63" pos:end="81:69">segment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="83:17" pos:end="89:17"><if pos:start="83:17" pos:end="89:17">if <condition pos:start="83:20" pos:end="83:25">(<expr pos:start="83:21" pos:end="83:24"><operator pos:start="83:21" pos:end="83:21">!</operator><name pos:start="83:22" pos:end="83:24">seg</name></expr>)</condition> <block pos:start="83:27" pos:end="89:17">{<block_content pos:start="85:21" pos:end="87:30">

                    <expr_stmt pos:start="85:21" pos:end="85:42"><expr pos:start="85:21" pos:end="85:41"><name pos:start="85:21" pos:end="85:23">ret</name> <operator pos:start="85:25" pos:end="85:25">=</operator> <call pos:start="85:27" pos:end="85:41"><name pos:start="85:27" pos:end="85:33">AVERROR</name><argument_list pos:start="85:34" pos:end="85:41">(<argument pos:start="85:35" pos:end="85:40"><expr pos:start="85:35" pos:end="85:40"><name pos:start="85:35" pos:end="85:40">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="87:21" pos:end="87:30">goto <name pos:start="87:26" pos:end="87:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:41"><expr pos:start="91:17" pos:end="91:40"><name pos:start="91:17" pos:end="91:29"><name pos:start="91:17" pos:end="91:19">seg</name><operator pos:start="91:20" pos:end="91:21">-&gt;</operator><name pos:start="91:22" pos:end="91:29">duration</name></name> <operator pos:start="91:31" pos:end="91:31">=</operator> <name pos:start="91:33" pos:end="91:40">duration</name></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:76"><expr pos:start="93:17" pos:end="93:75"><call pos:start="93:17" pos:end="93:75"><name pos:start="93:17" pos:end="93:36">ff_make_absolute_url</name><argument_list pos:start="93:37" pos:end="93:75">(<argument pos:start="93:38" pos:end="93:45"><expr pos:start="93:38" pos:end="93:45"><name pos:start="93:38" pos:end="93:45"><name pos:start="93:38" pos:end="93:40">seg</name><operator pos:start="93:41" pos:end="93:42">-&gt;</operator><name pos:start="93:43" pos:end="93:45">url</name></name></expr></argument>, <argument pos:start="93:48" pos:end="93:63"><expr pos:start="93:48" pos:end="93:63"><sizeof pos:start="93:48" pos:end="93:63">sizeof<argument_list pos:start="93:54" pos:end="93:63">(<argument pos:start="93:55" pos:end="93:62"><expr pos:start="93:55" pos:end="93:62"><name pos:start="93:55" pos:end="93:62"><name pos:start="93:55" pos:end="93:57">seg</name><operator pos:start="93:58" pos:end="93:59">-&gt;</operator><name pos:start="93:60" pos:end="93:62">url</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="93:66" pos:end="93:68"><expr pos:start="93:66" pos:end="93:68"><name pos:start="93:66" pos:end="93:68">url</name></expr></argument>, <argument pos:start="93:71" pos:end="93:74"><expr pos:start="93:71" pos:end="93:74"><name pos:start="93:71" pos:end="93:74">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:64"><expr pos:start="95:17" pos:end="95:63"><call pos:start="95:17" pos:end="95:63"><name pos:start="95:17" pos:end="95:28">dynarray_add</name><argument_list pos:start="95:29" pos:end="95:63">(<argument pos:start="95:30" pos:end="95:41"><expr pos:start="95:30" pos:end="95:41"><operator pos:start="95:30" pos:end="95:30">&amp;</operator><name pos:start="95:31" pos:end="95:41"><name pos:start="95:31" pos:end="95:31">s</name><operator pos:start="95:32" pos:end="95:33">-&gt;</operator><name pos:start="95:34" pos:end="95:41">segments</name></name></expr></argument>, <argument pos:start="95:44" pos:end="95:57"><expr pos:start="95:44" pos:end="95:57"><operator pos:start="95:44" pos:end="95:44">&amp;</operator><name pos:start="95:45" pos:end="95:57"><name pos:start="95:45" pos:end="95:45">s</name><operator pos:start="95:46" pos:end="95:47">-&gt;</operator><name pos:start="95:48" pos:end="95:57">n_segments</name></name></expr></argument>, <argument pos:start="95:60" pos:end="95:62"><expr pos:start="95:60" pos:end="95:62"><name pos:start="95:60" pos:end="95:62">seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:31"><expr pos:start="97:17" pos:end="97:30"><name pos:start="97:17" pos:end="97:26">is_segment</name> <operator pos:start="97:28" pos:end="97:28">=</operator> <literal type="number" pos:start="97:30" pos:end="97:30">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="99:15" pos:end="119:13">else if <condition pos:start="99:23" pos:end="99:34">(<expr pos:start="99:24" pos:end="99:33"><name pos:start="99:24" pos:end="99:33">is_variant</name></expr>)</condition> <block pos:start="99:36" pos:end="119:13">{<block_content pos:start="101:17" pos:end="117:31">

                <decl_stmt pos:start="101:17" pos:end="101:72"><decl pos:start="101:17" pos:end="101:71"><type pos:start="101:17" pos:end="101:32"><name pos:start="101:17" pos:end="101:30"><name pos:start="101:17" pos:end="101:22">struct</name> <name pos:start="101:24" pos:end="101:30">variant</name></name> <modifier pos:start="101:32" pos:end="101:32">*</modifier></type><name pos:start="101:33" pos:end="101:35">var</name> <init pos:start="101:37" pos:end="101:71">= <expr pos:start="101:39" pos:end="101:71"><call pos:start="101:39" pos:end="101:71"><name pos:start="101:39" pos:end="101:47">av_malloc</name><argument_list pos:start="101:48" pos:end="101:71">(<argument pos:start="101:49" pos:end="101:70"><expr pos:start="101:49" pos:end="101:70"><sizeof pos:start="101:49" pos:end="101:70">sizeof<argument_list pos:start="101:55" pos:end="101:70">(<argument pos:start="101:56" pos:end="101:69"><expr pos:start="101:56" pos:end="101:69">struct <name pos:start="101:63" pos:end="101:69">variant</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="103:17" pos:end="109:17"><if pos:start="103:17" pos:end="109:17">if <condition pos:start="103:20" pos:end="103:25">(<expr pos:start="103:21" pos:end="103:24"><operator pos:start="103:21" pos:end="103:21">!</operator><name pos:start="103:22" pos:end="103:24">var</name></expr>)</condition> <block pos:start="103:27" pos:end="109:17">{<block_content pos:start="105:21" pos:end="107:30">

                    <expr_stmt pos:start="105:21" pos:end="105:42"><expr pos:start="105:21" pos:end="105:41"><name pos:start="105:21" pos:end="105:23">ret</name> <operator pos:start="105:25" pos:end="105:25">=</operator> <call pos:start="105:27" pos:end="105:41"><name pos:start="105:27" pos:end="105:33">AVERROR</name><argument_list pos:start="105:34" pos:end="105:41">(<argument pos:start="105:35" pos:end="105:40"><expr pos:start="105:35" pos:end="105:40"><name pos:start="105:35" pos:end="105:40">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="107:21" pos:end="107:30">goto <name pos:start="107:26" pos:end="107:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:43"><expr pos:start="111:17" pos:end="111:42"><name pos:start="111:17" pos:end="111:30"><name pos:start="111:17" pos:end="111:19">var</name><operator pos:start="111:20" pos:end="111:21">-&gt;</operator><name pos:start="111:22" pos:end="111:30">bandwidth</name></name> <operator pos:start="111:32" pos:end="111:32">=</operator> <name pos:start="111:34" pos:end="111:42">bandwidth</name></expr>;</expr_stmt>

                <expr_stmt pos:start="113:17" pos:end="113:76"><expr pos:start="113:17" pos:end="113:75"><call pos:start="113:17" pos:end="113:75"><name pos:start="113:17" pos:end="113:36">ff_make_absolute_url</name><argument_list pos:start="113:37" pos:end="113:75">(<argument pos:start="113:38" pos:end="113:45"><expr pos:start="113:38" pos:end="113:45"><name pos:start="113:38" pos:end="113:45"><name pos:start="113:38" pos:end="113:40">var</name><operator pos:start="113:41" pos:end="113:42">-&gt;</operator><name pos:start="113:43" pos:end="113:45">url</name></name></expr></argument>, <argument pos:start="113:48" pos:end="113:63"><expr pos:start="113:48" pos:end="113:63"><sizeof pos:start="113:48" pos:end="113:63">sizeof<argument_list pos:start="113:54" pos:end="113:63">(<argument pos:start="113:55" pos:end="113:62"><expr pos:start="113:55" pos:end="113:62"><name pos:start="113:55" pos:end="113:62"><name pos:start="113:55" pos:end="113:57">var</name><operator pos:start="113:58" pos:end="113:59">-&gt;</operator><name pos:start="113:60" pos:end="113:62">url</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="113:66" pos:end="113:68"><expr pos:start="113:66" pos:end="113:68"><name pos:start="113:66" pos:end="113:68">url</name></expr></argument>, <argument pos:start="113:71" pos:end="113:74"><expr pos:start="113:71" pos:end="113:74"><name pos:start="113:71" pos:end="113:74">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:64"><expr pos:start="115:17" pos:end="115:63"><call pos:start="115:17" pos:end="115:63"><name pos:start="115:17" pos:end="115:28">dynarray_add</name><argument_list pos:start="115:29" pos:end="115:63">(<argument pos:start="115:30" pos:end="115:41"><expr pos:start="115:30" pos:end="115:41"><operator pos:start="115:30" pos:end="115:30">&amp;</operator><name pos:start="115:31" pos:end="115:41"><name pos:start="115:31" pos:end="115:31">s</name><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:41">variants</name></name></expr></argument>, <argument pos:start="115:44" pos:end="115:57"><expr pos:start="115:44" pos:end="115:57"><operator pos:start="115:44" pos:end="115:44">&amp;</operator><name pos:start="115:45" pos:end="115:57"><name pos:start="115:45" pos:end="115:45">s</name><operator pos:start="115:46" pos:end="115:47">-&gt;</operator><name pos:start="115:48" pos:end="115:57">n_variants</name></name></expr></argument>, <argument pos:start="115:60" pos:end="115:62"><expr pos:start="115:60" pos:end="115:62"><name pos:start="115:60" pos:end="115:62">var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:31"><expr pos:start="117:17" pos:end="117:30"><name pos:start="117:17" pos:end="117:26">is_variant</name> <operator pos:start="117:28" pos:end="117:28">=</operator> <literal type="number" pos:start="117:30" pos:end="117:30">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="125:5" pos:end="125:46"><expr pos:start="125:5" pos:end="125:45"><name pos:start="125:5" pos:end="125:21"><name pos:start="125:5" pos:end="125:5">s</name><operator pos:start="125:6" pos:end="125:7">-&gt;</operator><name pos:start="125:8" pos:end="125:21">last_load_time</name></name> <operator pos:start="125:23" pos:end="125:23">=</operator> <call pos:start="125:25" pos:end="125:45"><name pos:start="125:25" pos:end="125:43">av_gettime_relative</name><argument_list pos:start="125:44" pos:end="125:45">()</argument_list></call></expr>;</expr_stmt>



<label pos:start="129:1" pos:end="129:5"><name pos:start="129:1" pos:end="129:4">fail</name>:</label>

    <expr_stmt pos:start="131:5" pos:end="131:19"><expr pos:start="131:5" pos:end="131:18"><call pos:start="131:5" pos:end="131:18"><name pos:start="131:5" pos:end="131:14">avio_close</name><argument_list pos:start="131:15" pos:end="131:18">(<argument pos:start="131:16" pos:end="131:17"><expr pos:start="131:16" pos:end="131:17"><name pos:start="131:16" pos:end="131:17">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="133:5" pos:end="133:15">return <expr pos:start="133:12" pos:end="133:14"><name pos:start="133:12" pos:end="133:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
