<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5907.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:23"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">brpix_decode_frame</name><parameter_list pos:start="1:30" pos:end="3:46">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>,
                              <parameter pos:start="2:31" pos:end="2:40"><decl pos:start="2:31" pos:end="2:40"><type pos:start="2:31" pos:end="2:40"><name pos:start="2:31" pos:end="2:34">void</name> <modifier pos:start="2:36" pos:end="2:36">*</modifier></type><name pos:start="2:37" pos:end="2:40">data</name></decl></parameter>, <parameter pos:start="2:43" pos:end="2:56"><decl pos:start="2:43" pos:end="2:56"><type pos:start="2:43" pos:end="2:56"><name pos:start="2:43" pos:end="2:45">int</name> <modifier pos:start="2:47" pos:end="2:47">*</modifier></type><name pos:start="2:48" pos:end="2:56">got_frame</name></decl></parameter>,
                              <parameter pos:start="3:31" pos:end="3:45"><decl pos:start="3:31" pos:end="3:45"><type pos:start="3:31" pos:end="3:45"><name pos:start="3:31" pos:end="3:38">AVPacket</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:45">avpkt</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="111:23">{<block_content pos:start="5:5" pos:end="111:23">
    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">BRPixContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:38">= <expr pos:start="5:23" pos:end="5:38"><name pos:start="5:23" pos:end="5:38"><name pos:start="5:23" pos:end="5:27">avctx</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:38">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:30"><decl pos:start="6:5" pos:end="6:29"><type pos:start="6:5" pos:end="6:13"><name pos:start="6:5" pos:end="6:11">AVFrame</name> <modifier pos:start="6:13" pos:end="6:13">*</modifier></type><name pos:start="6:14" pos:end="6:22">frame_out</name> <init pos:start="6:24" pos:end="6:29">= <expr pos:start="6:26" pos:end="6:29"><name pos:start="6:26" pos:end="6:29">data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:22"><decl pos:start="8:5" pos:end="8:21"><type pos:start="8:5" pos:end="8:18"><name pos:start="8:5" pos:end="8:18">GetByteContext</name></type> <name pos:start="8:20" pos:end="8:21">gb</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:25">bytes_pp</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:26"><decl pos:start="10:5" pos:end="10:25"><type pos:start="10:5" pos:end="10:16"><name pos:start="10:5" pos:end="10:12">unsigned</name> <name pos:start="10:14" pos:end="10:16">int</name></type> <name pos:start="10:18" pos:end="10:25"><name pos:start="10:18" pos:end="10:22">magic</name><index pos:start="10:23" pos:end="10:25">[<expr pos:start="10:24" pos:end="10:24"><literal type="number" pos:start="10:24" pos:end="10:24">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:27">chunk_type</name></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:26"><decl pos:start="12:5" pos:end="12:25"><type pos:start="12:5" pos:end="12:16"><name pos:start="12:5" pos:end="12:12">unsigned</name> <name pos:start="12:14" pos:end="12:16">int</name></type> <name pos:start="12:18" pos:end="12:25">data_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:15">BRPixHeader</name></type> <name pos:start="13:17" pos:end="13:19">hdr</name></decl>;</decl_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:52"><expr pos:start="14:5" pos:end="14:51"><call pos:start="14:5" pos:end="14:51"><name pos:start="14:5" pos:end="14:20">bytestream2_init</name><argument_list pos:start="14:21" pos:end="14:51">(<argument pos:start="14:22" pos:end="14:24"><expr pos:start="14:22" pos:end="14:24"><operator pos:start="14:22" pos:end="14:22">&amp;</operator><name pos:start="14:23" pos:end="14:24">gb</name></expr></argument>, <argument pos:start="14:27" pos:end="14:37"><expr pos:start="14:27" pos:end="14:37"><name pos:start="14:27" pos:end="14:37"><name pos:start="14:27" pos:end="14:31">avpkt</name><operator pos:start="14:32" pos:end="14:33">-&gt;</operator><name pos:start="14:34" pos:end="14:37">data</name></name></expr></argument>, <argument pos:start="14:40" pos:end="14:50"><expr pos:start="14:40" pos:end="14:50"><name pos:start="14:40" pos:end="14:50"><name pos:start="14:40" pos:end="14:44">avpkt</name><operator pos:start="14:45" pos:end="14:46">-&gt;</operator><name pos:start="14:47" pos:end="14:50">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:41"><expr pos:start="15:5" pos:end="15:40"><name pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:9">magic</name><index pos:start="15:10" pos:end="15:12">[<expr pos:start="15:11" pos:end="15:11"><literal type="number" pos:start="15:11" pos:end="15:11">0</literal></expr>]</index></name> <operator pos:start="15:14" pos:end="15:14">=</operator> <call pos:start="15:16" pos:end="15:40"><name pos:start="15:16" pos:end="15:35">bytestream2_get_be32</name><argument_list pos:start="15:36" pos:end="15:40">(<argument pos:start="15:37" pos:end="15:39"><expr pos:start="15:37" pos:end="15:39"><operator pos:start="15:37" pos:end="15:37">&amp;</operator><name pos:start="15:38" pos:end="15:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:41"><expr pos:start="16:5" pos:end="16:40"><name pos:start="16:5" pos:end="16:12"><name pos:start="16:5" pos:end="16:9">magic</name><index pos:start="16:10" pos:end="16:12">[<expr pos:start="16:11" pos:end="16:11"><literal type="number" pos:start="16:11" pos:end="16:11">1</literal></expr>]</index></name> <operator pos:start="16:14" pos:end="16:14">=</operator> <call pos:start="16:16" pos:end="16:40"><name pos:start="16:16" pos:end="16:35">bytestream2_get_be32</name><argument_list pos:start="16:36" pos:end="16:40">(<argument pos:start="16:37" pos:end="16:39"><expr pos:start="16:37" pos:end="16:39"><operator pos:start="16:37" pos:end="16:37">&amp;</operator><name pos:start="16:38" pos:end="16:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:41"><expr pos:start="17:5" pos:end="17:40"><name pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:9">magic</name><index pos:start="17:10" pos:end="17:12">[<expr pos:start="17:11" pos:end="17:11"><literal type="number" pos:start="17:11" pos:end="17:11">2</literal></expr>]</index></name> <operator pos:start="17:14" pos:end="17:14">=</operator> <call pos:start="17:16" pos:end="17:40"><name pos:start="17:16" pos:end="17:35">bytestream2_get_be32</name><argument_list pos:start="17:36" pos:end="17:40">(<argument pos:start="17:37" pos:end="17:39"><expr pos:start="17:37" pos:end="17:39"><operator pos:start="17:37" pos:end="17:37">&amp;</operator><name pos:start="17:38" pos:end="17:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:41"><expr pos:start="18:5" pos:end="18:40"><name pos:start="18:5" pos:end="18:12"><name pos:start="18:5" pos:end="18:9">magic</name><index pos:start="18:10" pos:end="18:12">[<expr pos:start="18:11" pos:end="18:11"><literal type="number" pos:start="18:11" pos:end="18:11">3</literal></expr>]</index></name> <operator pos:start="18:14" pos:end="18:14">=</operator> <call pos:start="18:16" pos:end="18:40"><name pos:start="18:16" pos:end="18:35">bytestream2_get_be32</name><argument_list pos:start="18:36" pos:end="18:40">(<argument pos:start="18:37" pos:end="18:39"><expr pos:start="18:37" pos:end="18:39"><operator pos:start="18:37" pos:end="18:37">&amp;</operator><name pos:start="18:38" pos:end="18:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="19:5" pos:end="111:23"><if pos:start="19:5" pos:end="111:23">if <condition pos:start="19:8" pos:end="22:24">(<expr pos:start="19:9" pos:end="22:23"><name pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:13">magic</name><index pos:start="19:14" pos:end="19:16">[<expr pos:start="19:15" pos:end="19:15"><literal type="number" pos:start="19:15" pos:end="19:15">0</literal></expr>]</index></name> <operator pos:start="19:18" pos:end="19:19">!=</operator> <literal type="number" pos:start="19:21" pos:end="19:24">0x12</literal> <operator pos:start="19:26" pos:end="19:27">||</operator>
        <name pos:start="20:9" pos:end="20:16"><name pos:start="20:9" pos:end="20:13">magic</name><index pos:start="20:14" pos:end="20:16">[<expr pos:start="20:15" pos:end="20:15"><literal type="number" pos:start="20:15" pos:end="20:15">1</literal></expr>]</index></name> <operator pos:start="20:18" pos:end="20:19">!=</operator> <literal type="number" pos:start="20:21" pos:end="20:23">0x8</literal> <operator pos:start="20:25" pos:end="20:26">||</operator>
        <name pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:13">magic</name><index pos:start="21:14" pos:end="21:16">[<expr pos:start="21:15" pos:end="21:15"><literal type="number" pos:start="21:15" pos:end="21:15">2</literal></expr>]</index></name> <operator pos:start="21:18" pos:end="21:19">!=</operator> <literal type="number" pos:start="21:21" pos:end="21:23">0x2</literal> <operator pos:start="21:25" pos:end="21:26">||</operator>
        <name pos:start="22:9" pos:end="22:16"><name pos:start="22:9" pos:end="22:13">magic</name><index pos:start="22:14" pos:end="22:16">[<expr pos:start="22:15" pos:end="22:15"><literal type="number" pos:start="22:15" pos:end="22:15">3</literal></expr>]</index></name> <operator pos:start="22:18" pos:end="22:19">!=</operator> <literal type="number" pos:start="22:21" pos:end="22:23">0x2</literal></expr>)</condition> <block pos:start="22:26" pos:end="111:23">{<block_content pos:start="23:9" pos:end="111:23">
        <expr_stmt pos:start="23:9" pos:end="23:64"><expr pos:start="23:9" pos:end="23:63"><call pos:start="23:9" pos:end="23:63"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="23:63">(<argument pos:start="23:16" pos:end="23:20"><expr pos:start="23:16" pos:end="23:20"><name pos:start="23:16" pos:end="23:20">avctx</name></expr></argument>, <argument pos:start="23:23" pos:end="23:34"><expr pos:start="23:23" pos:end="23:34"><name pos:start="23:23" pos:end="23:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="23:37" pos:end="23:62"><expr pos:start="23:37" pos:end="23:62"><literal type="string" pos:start="23:37" pos:end="23:62">"Not a BRender PIX file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="24:9" pos:end="24:35">return <expr pos:start="24:16" pos:end="24:34"><name pos:start="24:16" pos:end="24:34">AVERROR_INVALIDDATA</name></expr>;</return>
    <expr_stmt pos:start="25:5" pos:end="25:43"><expr pos:start="25:5" pos:end="25:42"><name pos:start="25:5" pos:end="25:14">chunk_type</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <call pos:start="25:18" pos:end="25:42"><name pos:start="25:18" pos:end="25:37">bytestream2_get_be32</name><argument_list pos:start="25:38" pos:end="25:42">(<argument pos:start="25:39" pos:end="25:41"><expr pos:start="25:39" pos:end="25:41"><operator pos:start="25:39" pos:end="25:39">&amp;</operator><name pos:start="25:40" pos:end="25:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="26:5" pos:end="111:23"><if pos:start="26:5" pos:end="111:23">if <condition pos:start="26:8" pos:end="26:48">(<expr pos:start="26:9" pos:end="26:47"><name pos:start="26:9" pos:end="26:18">chunk_type</name> <operator pos:start="26:20" pos:end="26:21">!=</operator> <literal type="number" pos:start="26:23" pos:end="26:25">0x3</literal> <operator pos:start="26:27" pos:end="26:28">&amp;&amp;</operator> <name pos:start="26:30" pos:end="26:39">chunk_type</name> <operator pos:start="26:41" pos:end="26:42">!=</operator> <literal type="number" pos:start="26:44" pos:end="26:47">0x3d</literal></expr>)</condition> <block pos:start="26:50" pos:end="111:23">{<block_content pos:start="27:9" pos:end="111:23">
        <expr_stmt pos:start="27:9" pos:end="27:75"><expr pos:start="27:9" pos:end="27:74"><call pos:start="27:9" pos:end="27:74"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:74">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:37" pos:end="27:61"><expr pos:start="27:37" pos:end="27:61"><literal type="string" pos:start="27:37" pos:end="27:61">"Invalid chunk type %d\n"</literal></expr></argument>, <argument pos:start="27:64" pos:end="27:73"><expr pos:start="27:64" pos:end="27:73"><name pos:start="27:64" pos:end="27:73">chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="28:9" pos:end="28:35">return <expr pos:start="28:16" pos:end="28:34"><name pos:start="28:16" pos:end="28:34">AVERROR_INVALIDDATA</name></expr>;</return>
    <expr_stmt pos:start="29:5" pos:end="29:41"><expr pos:start="29:5" pos:end="29:40"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:40"><name pos:start="29:11" pos:end="29:29">brpix_decode_header</name><argument_list pos:start="29:30" pos:end="29:40">(<argument pos:start="29:31" pos:end="29:34"><expr pos:start="29:31" pos:end="29:34"><operator pos:start="29:31" pos:end="29:31">&amp;</operator><name pos:start="29:32" pos:end="29:34">hdr</name></expr></argument>, <argument pos:start="29:37" pos:end="29:39"><expr pos:start="29:37" pos:end="29:39"><operator pos:start="29:37" pos:end="29:37">&amp;</operator><name pos:start="29:38" pos:end="29:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="30:5" pos:end="111:23"><if pos:start="30:5" pos:end="111:23">if <condition pos:start="30:8" pos:end="30:13">(<expr pos:start="30:9" pos:end="30:12"><operator pos:start="30:9" pos:end="30:9">!</operator><name pos:start="30:10" pos:end="30:12">ret</name></expr>)</condition> <block pos:start="30:15" pos:end="111:23">{<block_content pos:start="31:9" pos:end="111:23">
        <expr_stmt pos:start="31:9" pos:end="31:63"><expr pos:start="31:9" pos:end="31:62"><call pos:start="31:9" pos:end="31:62"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:62">(<argument pos:start="31:16" pos:end="31:20"><expr pos:start="31:16" pos:end="31:20"><name pos:start="31:16" pos:end="31:20">avctx</name></expr></argument>, <argument pos:start="31:23" pos:end="31:34"><expr pos:start="31:23" pos:end="31:34"><name pos:start="31:23" pos:end="31:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:37" pos:end="31:61"><expr pos:start="31:37" pos:end="31:61"><literal type="string" pos:start="31:37" pos:end="31:61">"Invalid header length\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="32:9" pos:end="32:35">return <expr pos:start="32:16" pos:end="32:34"><name pos:start="32:16" pos:end="32:34">AVERROR_INVALIDDATA</name></expr>;</return>
    <switch pos:start="33:5" pos:end="111:23">switch <condition pos:start="33:12" pos:end="33:23">(<expr pos:start="33:13" pos:end="33:22"><name pos:start="33:13" pos:end="33:22"><name pos:start="33:13" pos:end="33:15">hdr</name><operator pos:start="33:16" pos:end="33:16">.</operator><name pos:start="33:17" pos:end="33:22">format</name></name></expr>)</condition> <block pos:start="33:25" pos:end="111:23">{<block_content pos:start="34:5" pos:end="111:23">
    <case pos:start="34:5" pos:end="34:11">case <expr pos:start="34:10" pos:end="34:10"><literal type="number" pos:start="34:10" pos:end="34:10">3</literal></expr>:</case>
        <expr_stmt pos:start="35:9" pos:end="35:41"><expr pos:start="35:9" pos:end="35:40"><name pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:13">avctx</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:22">pix_fmt</name></name> <operator pos:start="35:24" pos:end="35:24">=</operator> <name pos:start="35:26" pos:end="35:40">AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>
        <expr_stmt pos:start="36:9" pos:end="36:21"><expr pos:start="36:9" pos:end="36:20"><name pos:start="36:9" pos:end="36:16">bytes_pp</name> <operator pos:start="36:18" pos:end="36:18">=</operator> <literal type="number" pos:start="36:20" pos:end="36:20">1</literal></expr>;</expr_stmt>
        <break pos:start="37:9" pos:end="37:14">break;</break>
    <case pos:start="38:5" pos:end="38:11">case <expr pos:start="38:10" pos:end="38:10"><literal type="number" pos:start="38:10" pos:end="38:10">4</literal></expr>:</case>
        <expr_stmt pos:start="39:9" pos:end="39:45"><expr pos:start="39:9" pos:end="39:44"><name pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:13">avctx</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:22">pix_fmt</name></name> <operator pos:start="39:24" pos:end="39:24">=</operator> <name pos:start="39:26" pos:end="39:44">AV_PIX_FMT_RGB555BE</name></expr>;</expr_stmt>
        <expr_stmt pos:start="40:9" pos:end="40:21"><expr pos:start="40:9" pos:end="40:20"><name pos:start="40:9" pos:end="40:16">bytes_pp</name> <operator pos:start="40:18" pos:end="40:18">=</operator> <literal type="number" pos:start="40:20" pos:end="40:20">2</literal></expr>;</expr_stmt>
        <break pos:start="41:9" pos:end="41:14">break;</break>
    <case pos:start="42:5" pos:end="42:11">case <expr pos:start="42:10" pos:end="42:10"><literal type="number" pos:start="42:10" pos:end="42:10">5</literal></expr>:</case>
        <expr_stmt pos:start="43:9" pos:end="43:45"><expr pos:start="43:9" pos:end="43:44"><name pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:13">avctx</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:22">pix_fmt</name></name> <operator pos:start="43:24" pos:end="43:24">=</operator> <name pos:start="43:26" pos:end="43:44">AV_PIX_FMT_RGB565BE</name></expr>;</expr_stmt>
        <expr_stmt pos:start="44:9" pos:end="44:21"><expr pos:start="44:9" pos:end="44:20"><name pos:start="44:9" pos:end="44:16">bytes_pp</name> <operator pos:start="44:18" pos:end="44:18">=</operator> <literal type="number" pos:start="44:20" pos:end="44:20">2</literal></expr>;</expr_stmt>
        <break pos:start="45:9" pos:end="45:14">break;</break>
    <case pos:start="46:5" pos:end="46:11">case <expr pos:start="46:10" pos:end="46:10"><literal type="number" pos:start="46:10" pos:end="46:10">6</literal></expr>:</case>
        <expr_stmt pos:start="47:9" pos:end="47:42"><expr pos:start="47:9" pos:end="47:41"><name pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:13">avctx</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:22">pix_fmt</name></name> <operator pos:start="47:24" pos:end="47:24">=</operator> <name pos:start="47:26" pos:end="47:41">AV_PIX_FMT_RGB24</name></expr>;</expr_stmt>
        <expr_stmt pos:start="48:9" pos:end="48:21"><expr pos:start="48:9" pos:end="48:20"><name pos:start="48:9" pos:end="48:16">bytes_pp</name> <operator pos:start="48:18" pos:end="48:18">=</operator> <literal type="number" pos:start="48:20" pos:end="48:20">3</literal></expr>;</expr_stmt>
        <break pos:start="49:9" pos:end="49:14">break;</break>
    <case pos:start="50:5" pos:end="50:11">case <expr pos:start="50:10" pos:end="50:10"><literal type="number" pos:start="50:10" pos:end="50:10">7</literal></expr>:</case>
        <expr_stmt pos:start="51:9" pos:end="51:41"><expr pos:start="51:9" pos:end="51:40"><name pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:13">avctx</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:22">pix_fmt</name></name> <operator pos:start="51:24" pos:end="51:24">=</operator> <name pos:start="51:26" pos:end="51:40">AV_PIX_FMT_0RGB</name></expr>;</expr_stmt>
        <expr_stmt pos:start="52:9" pos:end="52:21"><expr pos:start="52:9" pos:end="52:20"><name pos:start="52:9" pos:end="52:16">bytes_pp</name> <operator pos:start="52:18" pos:end="52:18">=</operator> <literal type="number" pos:start="52:20" pos:end="52:20">4</literal></expr>;</expr_stmt>
        <break pos:start="53:9" pos:end="53:14">break;</break>
    <case pos:start="54:5" pos:end="54:12">case <expr pos:start="54:10" pos:end="54:11"><literal type="number" pos:start="54:10" pos:end="54:11">18</literal></expr>:</case>
        <expr_stmt pos:start="55:9" pos:end="55:43"><expr pos:start="55:9" pos:end="55:42"><name pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:13">avctx</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:22">pix_fmt</name></name> <operator pos:start="55:24" pos:end="55:24">=</operator> <name pos:start="55:26" pos:end="55:42">AV_PIX_FMT_GRAY8A</name></expr>;</expr_stmt>
        <expr_stmt pos:start="56:9" pos:end="56:21"><expr pos:start="56:9" pos:end="56:20"><name pos:start="56:9" pos:end="56:16">bytes_pp</name> <operator pos:start="56:18" pos:end="56:18">=</operator> <literal type="number" pos:start="56:20" pos:end="56:20">2</literal></expr>;</expr_stmt>
        <break pos:start="57:9" pos:end="57:14">break;</break>
    <default pos:start="58:5" pos:end="58:12">default:</default>
        <expr_stmt pos:start="59:9" pos:end="60:48"><expr pos:start="59:9" pos:end="60:47"><call pos:start="59:9" pos:end="60:47"><name pos:start="59:9" pos:end="59:14">av_log</name><argument_list pos:start="59:15" pos:end="60:47">(<argument pos:start="59:16" pos:end="59:20"><expr pos:start="59:16" pos:end="59:20"><name pos:start="59:16" pos:end="59:20">avctx</name></expr></argument>, <argument pos:start="59:23" pos:end="59:34"><expr pos:start="59:23" pos:end="59:34"><name pos:start="59:23" pos:end="59:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:37" pos:end="59:66"><expr pos:start="59:37" pos:end="59:66"><literal type="string" pos:start="59:37" pos:end="59:66">"Format %d is not supported\n"</literal></expr></argument>,
                                    <argument pos:start="60:37" pos:end="60:46"><expr pos:start="60:37" pos:end="60:46"><name pos:start="60:37" pos:end="60:46"><name pos:start="60:37" pos:end="60:39">hdr</name><operator pos:start="60:40" pos:end="60:40">.</operator><name pos:start="60:41" pos:end="60:46">format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="61:9" pos:end="61:36">return <expr pos:start="61:16" pos:end="61:35"><name pos:start="61:16" pos:end="61:35">AVERROR_PATCHWELCOME</name></expr>;</return>
    <if_stmt pos:start="62:5" pos:end="63:48"><if pos:start="62:5" pos:end="63:48">if <condition pos:start="62:8" pos:end="62:25">(<expr pos:start="62:9" pos:end="62:24"><name pos:start="62:9" pos:end="62:24"><name pos:start="62:9" pos:end="62:9">s</name><operator pos:start="62:10" pos:end="62:11">-&gt;</operator><name pos:start="62:12" pos:end="62:16">frame</name><operator pos:start="62:17" pos:end="62:17">.</operator><name pos:start="62:18" pos:end="62:21">data</name><index pos:start="62:22" pos:end="62:24">[<expr pos:start="62:23" pos:end="62:23"><literal type="number" pos:start="62:23" pos:end="62:23">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:48"><block_content pos:start="63:9" pos:end="63:48">
        <expr_stmt pos:start="63:9" pos:end="63:48"><expr pos:start="63:9" pos:end="63:47"><call pos:start="63:9" pos:end="63:47"><name pos:start="63:9" pos:end="63:29"><name pos:start="63:9" pos:end="63:13">avctx</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:29">release_buffer</name></name><argument_list pos:start="63:30" pos:end="63:47">(<argument pos:start="63:31" pos:end="63:35"><expr pos:start="63:31" pos:end="63:35"><name pos:start="63:31" pos:end="63:35">avctx</name></expr></argument>, <argument pos:start="63:38" pos:end="63:46"><expr pos:start="63:38" pos:end="63:46"><operator pos:start="63:38" pos:end="63:38">&amp;</operator><name pos:start="63:39" pos:end="63:46"><name pos:start="63:39" pos:end="63:39">s</name><operator pos:start="63:40" pos:end="63:41">-&gt;</operator><name pos:start="63:42" pos:end="63:46">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="64:5" pos:end="65:35"><if pos:start="64:5" pos:end="65:35">if <condition pos:start="64:8" pos:end="64:65">(<expr pos:start="64:9" pos:end="64:64"><call pos:start="64:9" pos:end="64:60"><name pos:start="64:9" pos:end="64:27">av_image_check_size</name><argument_list pos:start="64:28" pos:end="64:60">(<argument pos:start="64:29" pos:end="64:37"><expr pos:start="64:29" pos:end="64:37"><name pos:start="64:29" pos:end="64:37"><name pos:start="64:29" pos:end="64:31">hdr</name><operator pos:start="64:32" pos:end="64:32">.</operator><name pos:start="64:33" pos:end="64:37">width</name></name></expr></argument>, <argument pos:start="64:40" pos:end="64:49"><expr pos:start="64:40" pos:end="64:49"><name pos:start="64:40" pos:end="64:49"><name pos:start="64:40" pos:end="64:42">hdr</name><operator pos:start="64:43" pos:end="64:43">.</operator><name pos:start="64:44" pos:end="64:49">height</name></name></expr></argument>, <argument pos:start="64:52" pos:end="64:52"><expr pos:start="64:52" pos:end="64:52"><literal type="number" pos:start="64:52" pos:end="64:52">0</literal></expr></argument>, <argument pos:start="64:55" pos:end="64:59"><expr pos:start="64:55" pos:end="64:59"><name pos:start="64:55" pos:end="64:59">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="64:62" pos:end="64:62">&lt;</operator> <literal type="number" pos:start="64:64" pos:end="64:64">0</literal></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:35"><block_content pos:start="65:9" pos:end="65:35">
        <return pos:start="65:9" pos:end="65:35">return <expr pos:start="65:16" pos:end="65:34"><name pos:start="65:16" pos:end="65:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="66:5" pos:end="67:61"><if pos:start="66:5" pos:end="67:61">if <condition pos:start="66:8" pos:end="66:65">(<expr pos:start="66:9" pos:end="66:64"><name pos:start="66:9" pos:end="66:17"><name pos:start="66:9" pos:end="66:11">hdr</name><operator pos:start="66:12" pos:end="66:12">.</operator><name pos:start="66:13" pos:end="66:17">width</name></name> <operator pos:start="66:19" pos:end="66:20">!=</operator> <name pos:start="66:22" pos:end="66:33"><name pos:start="66:22" pos:end="66:26">avctx</name><operator pos:start="66:27" pos:end="66:28">-&gt;</operator><name pos:start="66:29" pos:end="66:33">width</name></name> <operator pos:start="66:35" pos:end="66:36">||</operator> <name pos:start="66:38" pos:end="66:47"><name pos:start="66:38" pos:end="66:40">hdr</name><operator pos:start="66:41" pos:end="66:41">.</operator><name pos:start="66:42" pos:end="66:47">height</name></name> <operator pos:start="66:49" pos:end="66:50">!=</operator> <name pos:start="66:52" pos:end="66:64"><name pos:start="66:52" pos:end="66:56">avctx</name><operator pos:start="66:57" pos:end="66:58">-&gt;</operator><name pos:start="66:59" pos:end="66:64">height</name></name></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:61"><block_content pos:start="67:9" pos:end="67:61">
        <expr_stmt pos:start="67:9" pos:end="67:61"><expr pos:start="67:9" pos:end="67:60"><call pos:start="67:9" pos:end="67:60"><name pos:start="67:9" pos:end="67:30">avcodec_set_dimensions</name><argument_list pos:start="67:31" pos:end="67:60">(<argument pos:start="67:32" pos:end="67:36"><expr pos:start="67:32" pos:end="67:36"><name pos:start="67:32" pos:end="67:36">avctx</name></expr></argument>, <argument pos:start="67:39" pos:end="67:47"><expr pos:start="67:39" pos:end="67:47"><name pos:start="67:39" pos:end="67:47"><name pos:start="67:39" pos:end="67:41">hdr</name><operator pos:start="67:42" pos:end="67:42">.</operator><name pos:start="67:43" pos:end="67:47">width</name></name></expr></argument>, <argument pos:start="67:50" pos:end="67:59"><expr pos:start="67:50" pos:end="67:59"><name pos:start="67:50" pos:end="67:59"><name pos:start="67:50" pos:end="67:52">hdr</name><operator pos:start="67:53" pos:end="67:53">.</operator><name pos:start="67:54" pos:end="67:59">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="68:5" pos:end="111:23"><if pos:start="68:5" pos:end="111:23">if <condition pos:start="68:8" pos:end="68:52">(<expr pos:start="68:9" pos:end="68:51"><operator pos:start="68:9" pos:end="68:9">(</operator><name pos:start="68:10" pos:end="68:12">ret</name> <operator pos:start="68:14" pos:end="68:14">=</operator> <call pos:start="68:16" pos:end="68:46"><name pos:start="68:16" pos:end="68:28">ff_get_buffer</name><argument_list pos:start="68:29" pos:end="68:46">(<argument pos:start="68:30" pos:end="68:34"><expr pos:start="68:30" pos:end="68:34"><name pos:start="68:30" pos:end="68:34">avctx</name></expr></argument>, <argument pos:start="68:37" pos:end="68:45"><expr pos:start="68:37" pos:end="68:45"><operator pos:start="68:37" pos:end="68:37">&amp;</operator><name pos:start="68:38" pos:end="68:45"><name pos:start="68:38" pos:end="68:38">s</name><operator pos:start="68:39" pos:end="68:40">-&gt;</operator><name pos:start="68:41" pos:end="68:45">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="68:47" pos:end="68:47">)</operator> <operator pos:start="68:49" pos:end="68:49">&lt;</operator> <literal type="number" pos:start="68:51" pos:end="68:51">0</literal></expr>)</condition> <block pos:start="68:54" pos:end="111:23">{<block_content pos:start="69:9" pos:end="111:23">
        <expr_stmt pos:start="69:9" pos:end="69:61"><expr pos:start="69:9" pos:end="69:60"><call pos:start="69:9" pos:end="69:60"><name pos:start="69:9" pos:end="69:14">av_log</name><argument_list pos:start="69:15" pos:end="69:60">(<argument pos:start="69:16" pos:end="69:20"><expr pos:start="69:16" pos:end="69:20"><name pos:start="69:16" pos:end="69:20">avctx</name></expr></argument>, <argument pos:start="69:23" pos:end="69:34"><expr pos:start="69:23" pos:end="69:34"><name pos:start="69:23" pos:end="69:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:37" pos:end="69:59"><expr pos:start="69:37" pos:end="69:59"><literal type="string" pos:start="69:37" pos:end="69:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="70:9" pos:end="70:19">return <expr pos:start="70:16" pos:end="70:18"><name pos:start="70:16" pos:end="70:18">ret</name></expr>;</return>
    <expr_stmt pos:start="71:5" pos:end="71:43"><expr pos:start="71:5" pos:end="71:42"><name pos:start="71:5" pos:end="71:14">chunk_type</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <call pos:start="71:18" pos:end="71:42"><name pos:start="71:18" pos:end="71:37">bytestream2_get_be32</name><argument_list pos:start="71:38" pos:end="71:42">(<argument pos:start="71:39" pos:end="71:41"><expr pos:start="71:39" pos:end="71:41"><operator pos:start="71:39" pos:end="71:39">&amp;</operator><name pos:start="71:40" pos:end="71:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="72:5" pos:end="111:23"><if pos:start="72:5" pos:end="111:23">if <condition pos:start="72:8" pos:end="73:50">(<expr pos:start="72:9" pos:end="73:49"><name pos:start="72:9" pos:end="72:22"><name pos:start="72:9" pos:end="72:13">avctx</name><operator pos:start="72:14" pos:end="72:15">-&gt;</operator><name pos:start="72:16" pos:end="72:22">pix_fmt</name></name> <operator pos:start="72:24" pos:end="72:25">==</operator> <name pos:start="72:27" pos:end="72:41">AV_PIX_FMT_PAL8</name> <operator pos:start="72:43" pos:end="72:44">&amp;&amp;</operator>
        <operator pos:start="73:9" pos:end="73:9">(</operator><name pos:start="73:10" pos:end="73:19">chunk_type</name> <operator pos:start="73:21" pos:end="73:22">==</operator> <literal type="number" pos:start="73:24" pos:end="73:26">0x3</literal> <operator pos:start="73:28" pos:end="73:29">||</operator> <name pos:start="73:31" pos:end="73:40">chunk_type</name> <operator pos:start="73:42" pos:end="73:43">==</operator> <literal type="number" pos:start="73:45" pos:end="73:48">0x3d</literal><operator pos:start="73:49" pos:end="73:49">)</operator></expr>)</condition> <block pos:start="73:52" pos:end="111:23">{<block_content pos:start="74:9" pos:end="111:23">
        <decl_stmt pos:start="74:9" pos:end="74:27"><decl pos:start="74:9" pos:end="74:26"><type pos:start="74:9" pos:end="74:19"><name pos:start="74:9" pos:end="74:19">BRPixHeader</name></type> <name pos:start="74:21" pos:end="74:26">palhdr</name></decl>;</decl_stmt>
        <expr_stmt pos:start="75:9" pos:end="75:48"><expr pos:start="75:9" pos:end="75:47"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:47"><name pos:start="75:15" pos:end="75:33">brpix_decode_header</name><argument_list pos:start="75:34" pos:end="75:47">(<argument pos:start="75:35" pos:end="75:41"><expr pos:start="75:35" pos:end="75:41"><operator pos:start="75:35" pos:end="75:35">&amp;</operator><name pos:start="75:36" pos:end="75:41">palhdr</name></expr></argument>, <argument pos:start="75:44" pos:end="75:46"><expr pos:start="75:44" pos:end="75:46"><operator pos:start="75:44" pos:end="75:44">&amp;</operator><name pos:start="75:45" pos:end="75:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="76:9" pos:end="111:23"><if pos:start="76:9" pos:end="111:23">if <condition pos:start="76:12" pos:end="76:17">(<expr pos:start="76:13" pos:end="76:16"><operator pos:start="76:13" pos:end="76:13">!</operator><name pos:start="76:14" pos:end="76:16">ret</name></expr>)</condition> <block pos:start="76:19" pos:end="111:23">{<block_content pos:start="77:13" pos:end="111:23">
            <expr_stmt pos:start="77:13" pos:end="77:75"><expr pos:start="77:13" pos:end="77:74"><call pos:start="77:13" pos:end="77:74"><name pos:start="77:13" pos:end="77:18">av_log</name><argument_list pos:start="77:19" pos:end="77:74">(<argument pos:start="77:20" pos:end="77:24"><expr pos:start="77:20" pos:end="77:24"><name pos:start="77:20" pos:end="77:24">avctx</name></expr></argument>, <argument pos:start="77:27" pos:end="77:38"><expr pos:start="77:27" pos:end="77:38"><name pos:start="77:27" pos:end="77:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:41" pos:end="77:73"><expr pos:start="77:41" pos:end="77:73"><literal type="string" pos:start="77:41" pos:end="77:73">"Invalid palette header length\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="78:13" pos:end="78:39">return <expr pos:start="78:20" pos:end="78:38"><name pos:start="78:20" pos:end="78:38">AVERROR_INVALIDDATA</name></expr>;</return>
        <if_stmt pos:start="79:9" pos:end="111:23"><if pos:start="79:9" pos:end="111:23">if <condition pos:start="79:12" pos:end="79:31">(<expr pos:start="79:13" pos:end="79:30"><name pos:start="79:13" pos:end="79:25"><name pos:start="79:13" pos:end="79:18">palhdr</name><operator pos:start="79:19" pos:end="79:19">.</operator><name pos:start="79:20" pos:end="79:25">format</name></name> <operator pos:start="79:27" pos:end="79:28">!=</operator> <literal type="number" pos:start="79:30" pos:end="79:30">7</literal></expr>)</condition> <block pos:start="79:33" pos:end="111:23">{<block_content pos:start="80:13" pos:end="111:23">
            <expr_stmt pos:start="80:13" pos:end="80:75"><expr pos:start="80:13" pos:end="80:74"><call pos:start="80:13" pos:end="80:74"><name pos:start="80:13" pos:end="80:18">av_log</name><argument_list pos:start="80:19" pos:end="80:74">(<argument pos:start="80:20" pos:end="80:24"><expr pos:start="80:20" pos:end="80:24"><name pos:start="80:20" pos:end="80:24">avctx</name></expr></argument>, <argument pos:start="80:27" pos:end="80:38"><expr pos:start="80:27" pos:end="80:38"><name pos:start="80:27" pos:end="80:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="80:41" pos:end="80:73"><expr pos:start="80:41" pos:end="80:73"><literal type="string" pos:start="80:41" pos:end="80:73">"Palette is not in 0RGB format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="81:13" pos:end="81:39">return <expr pos:start="81:20" pos:end="81:38"><name pos:start="81:20" pos:end="81:38">AVERROR_INVALIDDATA</name></expr>;</return>
        <expr_stmt pos:start="82:9" pos:end="82:47"><expr pos:start="82:9" pos:end="82:46"><name pos:start="82:9" pos:end="82:18">chunk_type</name> <operator pos:start="82:20" pos:end="82:20">=</operator> <call pos:start="82:22" pos:end="82:46"><name pos:start="82:22" pos:end="82:41">bytestream2_get_be32</name><argument_list pos:start="82:42" pos:end="82:46">(<argument pos:start="82:43" pos:end="82:45"><expr pos:start="82:43" pos:end="82:45"><operator pos:start="82:43" pos:end="82:43">&amp;</operator><name pos:start="82:44" pos:end="82:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="83:9" pos:end="83:45"><expr pos:start="83:9" pos:end="83:44"><name pos:start="83:9" pos:end="83:16">data_len</name> <operator pos:start="83:18" pos:end="83:18">=</operator> <call pos:start="83:20" pos:end="83:44"><name pos:start="83:20" pos:end="83:39">bytestream2_get_be32</name><argument_list pos:start="83:40" pos:end="83:44">(<argument pos:start="83:41" pos:end="83:43"><expr pos:start="83:41" pos:end="83:43"><operator pos:start="83:41" pos:end="83:41">&amp;</operator><name pos:start="83:42" pos:end="83:43">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="84:9" pos:end="84:33"><expr pos:start="84:9" pos:end="84:32"><call pos:start="84:9" pos:end="84:32"><name pos:start="84:9" pos:end="84:24">bytestream2_skip</name><argument_list pos:start="84:25" pos:end="84:32">(<argument pos:start="84:26" pos:end="84:28"><expr pos:start="84:26" pos:end="84:28"><operator pos:start="84:26" pos:end="84:26">&amp;</operator><name pos:start="84:27" pos:end="84:28">gb</name></expr></argument>, <argument pos:start="84:31" pos:end="84:31"><expr pos:start="84:31" pos:end="84:31"><literal type="number" pos:start="84:31" pos:end="84:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="85:9" pos:end="111:23"><if pos:start="85:9" pos:end="111:23">if <condition pos:start="85:12" pos:end="86:51">(<expr pos:start="85:13" pos:end="86:50"><name pos:start="85:13" pos:end="85:22">chunk_type</name> <operator pos:start="85:24" pos:end="85:25">!=</operator> <literal type="number" pos:start="85:27" pos:end="85:30">0x21</literal> <operator pos:start="85:32" pos:end="85:33">||</operator> <name pos:start="85:35" pos:end="85:42">data_len</name> <operator pos:start="85:44" pos:end="85:45">!=</operator> <literal type="number" pos:start="85:47" pos:end="85:50">1032</literal> <operator pos:start="85:52" pos:end="85:53">||</operator>
            <call pos:start="86:13" pos:end="86:43"><name pos:start="86:13" pos:end="86:38">bytestream2_get_bytes_left</name><argument_list pos:start="86:39" pos:end="86:43">(<argument pos:start="86:40" pos:end="86:42"><expr pos:start="86:40" pos:end="86:42"><operator pos:start="86:40" pos:end="86:40">&amp;</operator><name pos:start="86:41" pos:end="86:42">gb</name></expr></argument>)</argument_list></call> <operator pos:start="86:45" pos:end="86:45">&lt;</operator> <literal type="number" pos:start="86:47" pos:end="86:50">1032</literal></expr>)</condition> <block pos:start="86:53" pos:end="111:23">{<block_content pos:start="87:13" pos:end="111:23">
            <expr_stmt pos:start="87:13" pos:end="87:66"><expr pos:start="87:13" pos:end="87:65"><call pos:start="87:13" pos:end="87:65"><name pos:start="87:13" pos:end="87:18">av_log</name><argument_list pos:start="87:19" pos:end="87:65">(<argument pos:start="87:20" pos:end="87:24"><expr pos:start="87:20" pos:end="87:24"><name pos:start="87:20" pos:end="87:24">avctx</name></expr></argument>, <argument pos:start="87:27" pos:end="87:38"><expr pos:start="87:27" pos:end="87:38"><name pos:start="87:27" pos:end="87:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:41" pos:end="87:64"><expr pos:start="87:41" pos:end="87:64"><literal type="string" pos:start="87:41" pos:end="87:64">"Invalid palette data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="88:13" pos:end="88:39">return <expr pos:start="88:20" pos:end="88:38"><name pos:start="88:20" pos:end="88:38">AVERROR_INVALIDDATA</name></expr>;</return>
        <comment type="line" pos:start="89:9" pos:end="89:57">// convert 0RGB to machine endian format (ARGB32)</comment>
            <expr_stmt pos:start="90:13" pos:end="90:38"><expr pos:start="90:13" pos:end="90:37"><call pos:start="90:13" pos:end="90:37"><name pos:start="90:13" pos:end="90:29">bytestream2_skipu</name><argument_list pos:start="90:30" pos:end="90:37">(<argument pos:start="90:31" pos:end="90:33"><expr pos:start="90:31" pos:end="90:33"><operator pos:start="90:31" pos:end="90:31">&amp;</operator><name pos:start="90:32" pos:end="90:33">gb</name></expr></argument>, <argument pos:start="90:36" pos:end="90:36"><expr pos:start="90:36" pos:end="90:36"><literal type="number" pos:start="90:36" pos:end="90:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="91:13" pos:end="91:68"><expr pos:start="91:13" pos:end="91:67"><operator pos:start="91:13" pos:end="91:13">*</operator><name pos:start="91:14" pos:end="91:20">pal_out</name><operator pos:start="91:21" pos:end="91:22">++</operator> <operator pos:start="91:24" pos:end="91:24">=</operator> <operator pos:start="91:26" pos:end="91:26">(</operator><literal type="number" pos:start="91:27" pos:end="91:31">0xFFU</literal> <operator pos:start="91:33" pos:end="91:34">&lt;&lt;</operator> <literal type="number" pos:start="91:36" pos:end="91:37">24</literal><operator pos:start="91:38" pos:end="91:38">)</operator> <operator pos:start="91:40" pos:end="91:40">|</operator> <call pos:start="91:42" pos:end="91:67"><name pos:start="91:42" pos:end="91:62">bytestream2_get_be24u</name><argument_list pos:start="91:63" pos:end="91:67">(<argument pos:start="91:64" pos:end="91:66"><expr pos:start="91:64" pos:end="91:66"><operator pos:start="91:64" pos:end="91:64">&amp;</operator><name pos:start="91:65" pos:end="91:66">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="92:9" pos:end="92:33"><expr pos:start="92:9" pos:end="92:32"><call pos:start="92:9" pos:end="92:32"><name pos:start="92:9" pos:end="92:24">bytestream2_skip</name><argument_list pos:start="92:25" pos:end="92:32">(<argument pos:start="92:26" pos:end="92:28"><expr pos:start="92:26" pos:end="92:28"><operator pos:start="92:26" pos:end="92:26">&amp;</operator><name pos:start="92:27" pos:end="92:28">gb</name></expr></argument>, <argument pos:start="92:31" pos:end="92:31"><expr pos:start="92:31" pos:end="92:31"><literal type="number" pos:start="92:31" pos:end="92:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="93:9" pos:end="93:47"><expr pos:start="93:9" pos:end="93:46"><name pos:start="93:9" pos:end="93:18">chunk_type</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <call pos:start="93:22" pos:end="93:46"><name pos:start="93:22" pos:end="93:41">bytestream2_get_be32</name><argument_list pos:start="93:42" pos:end="93:46">(<argument pos:start="93:43" pos:end="93:45"><expr pos:start="93:43" pos:end="93:45"><operator pos:start="93:43" pos:end="93:43">&amp;</operator><name pos:start="93:44" pos:end="93:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="94:5" pos:end="94:41"><expr pos:start="94:5" pos:end="94:40"><name pos:start="94:5" pos:end="94:12">data_len</name> <operator pos:start="94:14" pos:end="94:14">=</operator> <call pos:start="94:16" pos:end="94:40"><name pos:start="94:16" pos:end="94:35">bytestream2_get_be32</name><argument_list pos:start="94:36" pos:end="94:40">(<argument pos:start="94:37" pos:end="94:39"><expr pos:start="94:37" pos:end="94:39"><operator pos:start="94:37" pos:end="94:37">&amp;</operator><name pos:start="94:38" pos:end="94:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="95:5" pos:end="95:29"><expr pos:start="95:5" pos:end="95:28"><call pos:start="95:5" pos:end="95:28"><name pos:start="95:5" pos:end="95:20">bytestream2_skip</name><argument_list pos:start="95:21" pos:end="95:28">(<argument pos:start="95:22" pos:end="95:24"><expr pos:start="95:22" pos:end="95:24"><operator pos:start="95:22" pos:end="95:22">&amp;</operator><name pos:start="95:23" pos:end="95:24">gb</name></expr></argument>, <argument pos:start="95:27" pos:end="95:27"><expr pos:start="95:27" pos:end="95:27"><literal type="number" pos:start="95:27" pos:end="95:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:start="96:5" pos:end="96:40">// read the image data to the buffer</comment>
    <block pos:start="97:5" pos:end="111:23">{<block_content pos:start="98:9" pos:end="111:23">
        <decl_stmt pos:start="98:9" pos:end="98:63"><decl pos:start="98:9" pos:end="98:62"><type pos:start="98:9" pos:end="98:20"><name pos:start="98:9" pos:end="98:16">unsigned</name> <name pos:start="98:18" pos:end="98:20">int</name></type> <name pos:start="98:22" pos:end="98:39">bytes_per_scanline</name> <init pos:start="98:41" pos:end="98:62">= <expr pos:start="98:43" pos:end="98:62"><name pos:start="98:43" pos:end="98:50">bytes_pp</name> <operator pos:start="98:52" pos:end="98:52">*</operator> <name pos:start="98:54" pos:end="98:62"><name pos:start="98:54" pos:end="98:56">hdr</name><operator pos:start="98:57" pos:end="98:57">.</operator><name pos:start="98:58" pos:end="98:62">width</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="99:9" pos:end="99:66"><decl pos:start="99:9" pos:end="99:65"><type pos:start="99:9" pos:end="99:20"><name pos:start="99:9" pos:end="99:16">unsigned</name> <name pos:start="99:18" pos:end="99:20">int</name></type> <name pos:start="99:22" pos:end="99:31">bytes_left</name> <init pos:start="99:33" pos:end="99:65">= <expr pos:start="99:35" pos:end="99:65"><call pos:start="99:35" pos:end="99:65"><name pos:start="99:35" pos:end="99:60">bytestream2_get_bytes_left</name><argument_list pos:start="99:61" pos:end="99:65">(<argument pos:start="99:62" pos:end="99:64"><expr pos:start="99:62" pos:end="99:64"><operator pos:start="99:62" pos:end="99:62">&amp;</operator><name pos:start="99:63" pos:end="99:64">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="100:9" pos:end="111:23"><if pos:start="100:9" pos:end="111:23">if <condition pos:start="100:12" pos:end="101:57">(<expr pos:start="100:13" pos:end="101:56"><name pos:start="100:13" pos:end="100:22">chunk_type</name> <operator pos:start="100:24" pos:end="100:25">!=</operator> <literal type="number" pos:start="100:27" pos:end="100:30">0x21</literal> <operator pos:start="100:32" pos:end="100:33">||</operator> <name pos:start="100:35" pos:end="100:42">data_len</name> <operator pos:start="100:44" pos:end="100:45">!=</operator> <name pos:start="100:47" pos:end="100:56">bytes_left</name> <operator pos:start="100:58" pos:end="100:59">||</operator>
            <name pos:start="101:13" pos:end="101:22">bytes_left</name> <operator pos:start="101:24" pos:end="101:24">/</operator> <name pos:start="101:26" pos:end="101:43">bytes_per_scanline</name> <operator pos:start="101:45" pos:end="101:45">&lt;</operator> <name pos:start="101:47" pos:end="101:56"><name pos:start="101:47" pos:end="101:49">hdr</name><operator pos:start="101:50" pos:end="101:50">.</operator><name pos:start="101:51" pos:end="101:56">height</name></name></expr>)</condition>
        <block pos:start="102:9" pos:end="111:23">{<block_content pos:start="103:13" pos:end="111:23">
            <expr_stmt pos:start="103:13" pos:end="103:64"><expr pos:start="103:13" pos:end="103:63"><call pos:start="103:13" pos:end="103:63"><name pos:start="103:13" pos:end="103:18">av_log</name><argument_list pos:start="103:19" pos:end="103:63">(<argument pos:start="103:20" pos:end="103:24"><expr pos:start="103:20" pos:end="103:24"><name pos:start="103:20" pos:end="103:24">avctx</name></expr></argument>, <argument pos:start="103:27" pos:end="103:38"><expr pos:start="103:27" pos:end="103:38"><name pos:start="103:27" pos:end="103:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:41" pos:end="103:62"><expr pos:start="103:41" pos:end="103:62"><literal type="string" pos:start="103:41" pos:end="103:62">"Invalid image data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="104:13" pos:end="104:39">return <expr pos:start="104:20" pos:end="104:38"><name pos:start="104:20" pos:end="104:38">AVERROR_INVALIDDATA</name></expr>;</return>
        <expr_stmt pos:start="105:9" pos:end="108:60"><expr pos:start="105:9" pos:end="108:59"><call pos:start="105:9" pos:end="108:59"><name pos:start="105:9" pos:end="105:27">av_image_copy_plane</name><argument_list pos:start="105:28" pos:end="108:59">(<argument pos:start="105:29" pos:end="105:44"><expr pos:start="105:29" pos:end="105:44"><name pos:start="105:29" pos:end="105:44"><name pos:start="105:29" pos:end="105:29">s</name><operator pos:start="105:30" pos:end="105:31">-&gt;</operator><name pos:start="105:32" pos:end="105:36">frame</name><operator pos:start="105:37" pos:end="105:37">.</operator><name pos:start="105:38" pos:end="105:41">data</name><index pos:start="105:42" pos:end="105:44">[<expr pos:start="105:43" pos:end="105:43"><literal type="number" pos:start="105:43" pos:end="105:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="105:47" pos:end="105:66"><expr pos:start="105:47" pos:end="105:66"><name pos:start="105:47" pos:end="105:66"><name pos:start="105:47" pos:end="105:47">s</name><operator pos:start="105:48" pos:end="105:49">-&gt;</operator><name pos:start="105:50" pos:end="105:54">frame</name><operator pos:start="105:55" pos:end="105:55">.</operator><name pos:start="105:56" pos:end="105:63">linesize</name><index pos:start="105:64" pos:end="105:66">[<expr pos:start="105:65" pos:end="105:65"><literal type="number" pos:start="105:65" pos:end="105:65">0</literal></expr>]</index></name></expr></argument>,
                            <argument pos:start="106:29" pos:end="106:63"><expr pos:start="106:29" pos:end="106:63"><name pos:start="106:29" pos:end="106:39"><name pos:start="106:29" pos:end="106:33">avpkt</name><operator pos:start="106:34" pos:end="106:35">-&gt;</operator><name pos:start="106:36" pos:end="106:39">data</name></name> <operator pos:start="106:41" pos:end="106:41">+</operator> <call pos:start="106:43" pos:end="106:63"><name pos:start="106:43" pos:end="106:58">bytestream2_tell</name><argument_list pos:start="106:59" pos:end="106:63">(<argument pos:start="106:60" pos:end="106:62"><expr pos:start="106:60" pos:end="106:62"><operator pos:start="106:60" pos:end="106:60">&amp;</operator><name pos:start="106:61" pos:end="106:62">gb</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument pos:start="107:29" pos:end="107:46"><expr pos:start="107:29" pos:end="107:46"><name pos:start="107:29" pos:end="107:46">bytes_per_scanline</name></expr></argument>,
                            <argument pos:start="108:29" pos:end="108:46"><expr pos:start="108:29" pos:end="108:46"><name pos:start="108:29" pos:end="108:46">bytes_per_scanline</name></expr></argument>, <argument pos:start="108:49" pos:end="108:58"><expr pos:start="108:49" pos:end="108:58"><name pos:start="108:49" pos:end="108:58"><name pos:start="108:49" pos:end="108:51">hdr</name><operator pos:start="108:52" pos:end="108:52">.</operator><name pos:start="108:53" pos:end="108:58">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="109:5" pos:end="109:26"><expr pos:start="109:5" pos:end="109:25"><operator pos:start="109:5" pos:end="109:5">*</operator><name pos:start="109:6" pos:end="109:14">frame_out</name> <operator pos:start="109:16" pos:end="109:16">=</operator> <name pos:start="109:18" pos:end="109:25"><name pos:start="109:18" pos:end="109:18">s</name><operator pos:start="109:19" pos:end="109:20">-&gt;</operator><name pos:start="109:21" pos:end="109:25">frame</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="110:5" pos:end="110:19"><expr pos:start="110:5" pos:end="110:18"><operator pos:start="110:5" pos:end="110:5">*</operator><name pos:start="110:6" pos:end="110:14">got_frame</name> <operator pos:start="110:16" pos:end="110:16">=</operator> <literal type="number" pos:start="110:18" pos:end="110:18">1</literal></expr>;</expr_stmt>
    <return pos:start="111:5" pos:end="111:23">return <expr pos:start="111:12" pos:end="111:22"><name pos:start="111:12" pos:end="111:22"><name pos:start="111:12" pos:end="111:16">avpkt</name><operator pos:start="111:17" pos:end="111:18">-&gt;</operator><name pos:start="111:19" pos:end="111:22">size</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
