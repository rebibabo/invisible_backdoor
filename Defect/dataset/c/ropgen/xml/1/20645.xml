<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20645.c" pos:tabs="8"><function pos:start="1:1" pos:end="341:5"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:7">av_cold</name> <name pos:start="1:9" pos:end="1:12">void</name></type> <name pos:start="1:14" pos:end="1:30">ff_h264_pred_init</name><parameter_list pos:start="1:31" pos:end="5:59">(<parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:49"><name pos:start="1:32" pos:end="1:46">H264PredContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">h</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:63">codec_id</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:50"><decl pos:start="3:32" pos:end="3:50"><type pos:start="3:32" pos:end="3:50"><specifier pos:start="3:32" pos:end="3:36">const</specifier> <name pos:start="3:38" pos:end="3:40">int</name></type> <name pos:start="3:42" pos:end="3:50">bit_depth</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:58"><decl pos:start="5:32" pos:end="5:58"><type pos:start="5:32" pos:end="5:58"><specifier pos:start="5:32" pos:end="5:36">const</specifier> <name pos:start="5:38" pos:end="5:40">int</name></type> <name pos:start="5:42" pos:end="5:58">chroma_format_idc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="341:5">{<block_content pos:start="323:9" pos:end="339:18">

<cpp:undef pos:start="9:1" pos:end="9:11">#<cpp:directive pos:start="9:2" pos:end="9:6">undef</cpp:directive> <name pos:start="9:8" pos:end="9:11">FUNC</name></cpp:undef>

<cpp:undef pos:start="11:1" pos:end="11:12">#<cpp:directive pos:start="11:2" pos:end="11:6">undef</cpp:directive> <name pos:start="11:8" pos:end="11:12">FUNCC</name></cpp:undef>

<cpp:define pos:start="13:1" pos:end="13:38">#<cpp:directive pos:start="13:2" pos:end="13:7">define</cpp:directive> <cpp:macro pos:start="13:9" pos:end="13:22"><name pos:start="13:9" pos:end="13:12">FUNC</name><parameter_list pos:start="13:13" pos:end="13:22">(<parameter pos:start="13:14" pos:end="13:14"><type pos:start="13:14" pos:end="13:14"><name pos:start="13:14" pos:end="13:14">a</name></type></parameter>, <parameter pos:start="13:17" pos:end="13:21"><type pos:start="13:17" pos:end="13:21"><name pos:start="13:17" pos:end="13:21">depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="13:24" pos:end="13:38">a ## _ ## depth</cpp:value></cpp:define>

<cpp:define pos:start="15:1" pos:end="15:45">#<cpp:directive pos:start="15:2" pos:end="15:7">define</cpp:directive> <cpp:macro pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:13">FUNCC</name><parameter_list pos:start="15:14" pos:end="15:23">(<parameter pos:start="15:15" pos:end="15:15"><type pos:start="15:15" pos:end="15:15"><name pos:start="15:15" pos:end="15:15">a</name></type></parameter>, <parameter pos:start="15:18" pos:end="15:22"><type pos:start="15:18" pos:end="15:22"><name pos:start="15:18" pos:end="15:22">depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="15:25" pos:end="15:45">a ## _ ## depth ## _c</cpp:value></cpp:define>

<cpp:define pos:start="17:1" pos:end="17:24">#<cpp:directive pos:start="17:2" pos:end="17:7">define</cpp:directive> <cpp:macro pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:13">FUNCD</name><parameter_list pos:start="17:14" pos:end="17:16">(<parameter pos:start="17:15" pos:end="17:15"><type pos:start="17:15" pos:end="17:15"><name pos:start="17:15" pos:end="17:15">a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="17:18" pos:end="17:24">a ## _c</cpp:value></cpp:define>



<cpp:define pos:start="21:1" pos:end="321:24">#<cpp:directive pos:start="21:2" pos:end="21:7">define</cpp:directive> <cpp:macro pos:start="21:9" pos:end="21:24"><name pos:start="21:9" pos:end="21:17">H264_PRED</name><parameter_list pos:start="21:18" pos:end="21:24">(<parameter pos:start="21:19" pos:end="21:23"><type pos:start="21:19" pos:end="21:23"><name pos:start="21:19" pos:end="21:23">depth</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="23:5" pos:end="321:24">if(codec_id != AV_CODEC_ID_RV40){\

        if(codec_id == AV_CODEC_ID_VP8) {\

            h-&gt;pred4x4[VERT_PRED       ]= FUNCD(pred4x4_vertical_vp8);\

            h-&gt;pred4x4[HOR_PRED        ]= FUNCD(pred4x4_horizontal_vp8);\

        } else {\

            h-&gt;pred4x4[VERT_PRED       ]= FUNCC(pred4x4_vertical          , depth);\

            h-&gt;pred4x4[HOR_PRED        ]= FUNCC(pred4x4_horizontal        , depth);\

        }\

        h-&gt;pred4x4[DC_PRED             ]= FUNCC(pred4x4_dc                , depth);\

        if(codec_id == AV_CODEC_ID_SVQ3)\

            h-&gt;pred4x4[DIAG_DOWN_LEFT_PRED ]= FUNCD(pred4x4_down_left_svq3);\

        else\

            h-&gt;pred4x4[DIAG_DOWN_LEFT_PRED ]= FUNCC(pred4x4_down_left     , depth);\

        h-&gt;pred4x4[DIAG_DOWN_RIGHT_PRED]= FUNCC(pred4x4_down_right        , depth);\

        h-&gt;pred4x4[VERT_RIGHT_PRED     ]= FUNCC(pred4x4_vertical_right    , depth);\

        h-&gt;pred4x4[HOR_DOWN_PRED       ]= FUNCC(pred4x4_horizontal_down   , depth);\

        if (codec_id == AV_CODEC_ID_VP8) {\

            h-&gt;pred4x4[VERT_LEFT_PRED  ]= FUNCD(pred4x4_vertical_left_vp8);\

        } else\

            h-&gt;pred4x4[VERT_LEFT_PRED  ]= FUNCC(pred4x4_vertical_left     , depth);\

        h-&gt;pred4x4[HOR_UP_PRED         ]= FUNCC(pred4x4_horizontal_up     , depth);\

        if(codec_id != AV_CODEC_ID_VP8) {\

            h-&gt;pred4x4[LEFT_DC_PRED    ]= FUNCC(pred4x4_left_dc           , depth);\

            h-&gt;pred4x4[TOP_DC_PRED     ]= FUNCC(pred4x4_top_dc            , depth);\

            h-&gt;pred4x4[DC_128_PRED     ]= FUNCC(pred4x4_128_dc            , depth);\

        } else {\

            h-&gt;pred4x4[TM_VP8_PRED     ]= FUNCD(pred4x4_tm_vp8);\

            h-&gt;pred4x4[DC_127_PRED     ]= FUNCC(pred4x4_127_dc            , depth);\

            h-&gt;pred4x4[DC_129_PRED     ]= FUNCC(pred4x4_129_dc            , depth);\

            h-&gt;pred4x4[VERT_VP8_PRED   ]= FUNCC(pred4x4_vertical          , depth);\

            h-&gt;pred4x4[HOR_VP8_PRED    ]= FUNCC(pred4x4_horizontal        , depth);\

        }\

    }else{\

        h-&gt;pred4x4[VERT_PRED           ]= FUNCC(pred4x4_vertical          , depth);\

        h-&gt;pred4x4[HOR_PRED            ]= FUNCC(pred4x4_horizontal        , depth);\

        h-&gt;pred4x4[DC_PRED             ]= FUNCC(pred4x4_dc                , depth);\

        h-&gt;pred4x4[DIAG_DOWN_LEFT_PRED ]= FUNCD(pred4x4_down_left_rv40);\

        h-&gt;pred4x4[DIAG_DOWN_RIGHT_PRED]= FUNCC(pred4x4_down_right        , depth);\

        h-&gt;pred4x4[VERT_RIGHT_PRED     ]= FUNCC(pred4x4_vertical_right    , depth);\

        h-&gt;pred4x4[HOR_DOWN_PRED       ]= FUNCC(pred4x4_horizontal_down   , depth);\

        h-&gt;pred4x4[VERT_LEFT_PRED      ]= FUNCD(pred4x4_vertical_left_rv40);\

        h-&gt;pred4x4[HOR_UP_PRED         ]= FUNCD(pred4x4_horizontal_up_rv40);\

        h-&gt;pred4x4[LEFT_DC_PRED        ]= FUNCC(pred4x4_left_dc           , depth);\

        h-&gt;pred4x4[TOP_DC_PRED         ]= FUNCC(pred4x4_top_dc            , depth);\

        h-&gt;pred4x4[DC_128_PRED         ]= FUNCC(pred4x4_128_dc            , depth);\

        h-&gt;pred4x4[DIAG_DOWN_LEFT_PRED_RV40_NODOWN]= FUNCD(pred4x4_down_left_rv40_nodown);\

        h-&gt;pred4x4[HOR_UP_PRED_RV40_NODOWN]= FUNCD(pred4x4_horizontal_up_rv40_nodown);\

        h-&gt;pred4x4[VERT_LEFT_PRED_RV40_NODOWN]= FUNCD(pred4x4_vertical_left_rv40_nodown);\

    }\

\

    h-&gt;pred8x8l[VERT_PRED           ]= FUNCC(pred8x8l_vertical            , depth);\

    h-&gt;pred8x8l[HOR_PRED            ]= FUNCC(pred8x8l_horizontal          , depth);\

    h-&gt;pred8x8l[DC_PRED             ]= FUNCC(pred8x8l_dc                  , depth);\

    h-&gt;pred8x8l[DIAG_DOWN_LEFT_PRED ]= FUNCC(pred8x8l_down_left           , depth);\

    h-&gt;pred8x8l[DIAG_DOWN_RIGHT_PRED]= FUNCC(pred8x8l_down_right          , depth);\

    h-&gt;pred8x8l[VERT_RIGHT_PRED     ]= FUNCC(pred8x8l_vertical_right      , depth);\

    h-&gt;pred8x8l[HOR_DOWN_PRED       ]= FUNCC(pred8x8l_horizontal_down     , depth);\

    h-&gt;pred8x8l[VERT_LEFT_PRED      ]= FUNCC(pred8x8l_vertical_left       , depth);\

    h-&gt;pred8x8l[HOR_UP_PRED         ]= FUNCC(pred8x8l_horizontal_up       , depth);\

    h-&gt;pred8x8l[LEFT_DC_PRED        ]= FUNCC(pred8x8l_left_dc             , depth);\

    h-&gt;pred8x8l[TOP_DC_PRED         ]= FUNCC(pred8x8l_top_dc              , depth);\

    h-&gt;pred8x8l[DC_128_PRED         ]= FUNCC(pred8x8l_128_dc              , depth);\

\

    if (chroma_format_idc &lt;= 1) {\

        h-&gt;pred8x8[VERT_PRED8x8   ]= FUNCC(pred8x8_vertical               , depth);\

        h-&gt;pred8x8[HOR_PRED8x8    ]= FUNCC(pred8x8_horizontal             , depth);\

    } else {\

        h-&gt;pred8x8[VERT_PRED8x8   ]= FUNCC(pred8x16_vertical              , depth);\

        h-&gt;pred8x8[HOR_PRED8x8    ]= FUNCC(pred8x16_horizontal            , depth);\

    }\

    if (codec_id != AV_CODEC_ID_VP8) {\

        if (chroma_format_idc &lt;= 1) {\

            h-&gt;pred8x8[PLANE_PRED8x8]= FUNCC(pred8x8_plane                , depth);\

        } else {\

            h-&gt;pred8x8[PLANE_PRED8x8]= FUNCC(pred8x16_plane               , depth);\

        }\

    } else\

        h-&gt;pred8x8[PLANE_PRED8x8]= FUNCD(pred8x8_tm_vp8);\

    if(codec_id != AV_CODEC_ID_RV40 &amp;&amp; codec_id != AV_CODEC_ID_VP8){\

        if (chroma_format_idc &lt;= 1) {\

            h-&gt;pred8x8[DC_PRED8x8     ]= FUNCC(pred8x8_dc                     , depth);\

            h-&gt;pred8x8[LEFT_DC_PRED8x8]= FUNCC(pred8x8_left_dc                , depth);\

            h-&gt;pred8x8[TOP_DC_PRED8x8 ]= FUNCC(pred8x8_top_dc                 , depth);\

            h-&gt;pred8x8[ALZHEIMER_DC_L0T_PRED8x8 ]= FUNC(pred8x8_mad_cow_dc_l0t, depth);\

            h-&gt;pred8x8[ALZHEIMER_DC_0LT_PRED8x8 ]= FUNC(pred8x8_mad_cow_dc_0lt, depth);\

            h-&gt;pred8x8[ALZHEIMER_DC_L00_PRED8x8 ]= FUNC(pred8x8_mad_cow_dc_l00, depth);\

            h-&gt;pred8x8[ALZHEIMER_DC_0L0_PRED8x8 ]= FUNC(pred8x8_mad_cow_dc_0l0, depth);\

        } else {\

            h-&gt;pred8x8[DC_PRED8x8     ]= FUNCC(pred8x16_dc                    , depth);\

            h-&gt;pred8x8[LEFT_DC_PRED8x8]= FUNCC(pred8x16_left_dc               , depth);\

            h-&gt;pred8x8[TOP_DC_PRED8x8 ]= FUNCC(pred8x16_top_dc                , depth);\

            h-&gt;pred8x8[ALZHEIMER_DC_L0T_PRED8x8 ]= FUNC(pred8x16_mad_cow_dc_l0t, depth);\

            h-&gt;pred8x8[ALZHEIMER_DC_0LT_PRED8x8 ]= FUNC(pred8x16_mad_cow_dc_0lt, depth);\

            h-&gt;pred8x8[ALZHEIMER_DC_L00_PRED8x8 ]= FUNC(pred8x16_mad_cow_dc_l00, depth);\

            h-&gt;pred8x8[ALZHEIMER_DC_0L0_PRED8x8 ]= FUNC(pred8x16_mad_cow_dc_0l0, depth);\

        }\

    }else{\

        h-&gt;pred8x8[DC_PRED8x8     ]= FUNCD(pred8x8_dc_rv40);\

        h-&gt;pred8x8[LEFT_DC_PRED8x8]= FUNCD(pred8x8_left_dc_rv40);\

        h-&gt;pred8x8[TOP_DC_PRED8x8 ]= FUNCD(pred8x8_top_dc_rv40);\

        if (codec_id == AV_CODEC_ID_VP8) {\

            h-&gt;pred8x8[DC_127_PRED8x8]= FUNCC(pred8x8_127_dc              , depth);\

            h-&gt;pred8x8[DC_129_PRED8x8]= FUNCC(pred8x8_129_dc              , depth);\

        }\

    }\

    if (chroma_format_idc &lt;= 1) {\

        h-&gt;pred8x8[DC_128_PRED8x8 ]= FUNCC(pred8x8_128_dc                 , depth);\

    } else {\

        h-&gt;pred8x8[DC_128_PRED8x8 ]= FUNCC(pred8x16_128_dc                , depth);\

    }\

\

    h-&gt;pred16x16[DC_PRED8x8     ]= FUNCC(pred16x16_dc                     , depth);\

    h-&gt;pred16x16[VERT_PRED8x8   ]= FUNCC(pred16x16_vertical               , depth);\

    h-&gt;pred16x16[HOR_PRED8x8    ]= FUNCC(pred16x16_horizontal             , depth);\

    switch(codec_id){\

    case AV_CODEC_ID_SVQ3:\

       h-&gt;pred16x16[PLANE_PRED8x8  ]= FUNCD(pred16x16_plane_svq3);\

       break;\

    case AV_CODEC_ID_RV40:\

       h-&gt;pred16x16[PLANE_PRED8x8  ]= FUNCD(pred16x16_plane_rv40);\

       break;\

    case AV_CODEC_ID_VP8:\

       h-&gt;pred16x16[PLANE_PRED8x8  ]= FUNCD(pred16x16_tm_vp8);\

       h-&gt;pred16x16[DC_127_PRED8x8]= FUNCC(pred16x16_127_dc               , depth);\

       h-&gt;pred16x16[DC_129_PRED8x8]= FUNCC(pred16x16_129_dc               , depth);\

       break;\

    default:\

       h-&gt;pred16x16[PLANE_PRED8x8  ]= FUNCC(pred16x16_plane               , depth);\

       break;\

    }\

    h-&gt;pred16x16[LEFT_DC_PRED8x8]= FUNCC(pred16x16_left_dc                , depth);\

    h-&gt;pred16x16[TOP_DC_PRED8x8 ]= FUNCC(pred16x16_top_dc                 , depth);\

    h-&gt;pred16x16[DC_128_PRED8x8 ]= FUNCC(pred16x16_128_dc                 , depth);\

\

    <comment type="block" pos:start="291:5" pos:end="291:50">/* special lossless h/v prediction for h264 */</comment> \

    h-&gt;pred4x4_add  [VERT_PRED   ]= FUNCC(pred4x4_vertical_add            , depth);\

    h-&gt;pred4x4_add  [ HOR_PRED   ]= FUNCC(pred4x4_horizontal_add          , depth);\

    h-&gt;pred8x8l_add [VERT_PRED   ]= FUNCC(pred8x8l_vertical_add           , depth);\

    h-&gt;pred8x8l_add [ HOR_PRED   ]= FUNCC(pred8x8l_horizontal_add         , depth);\

    if (chroma_format_idc &lt;= 1) {\

    h-&gt;pred8x8_add  [VERT_PRED8x8]= FUNCC(pred8x8_vertical_add            , depth);\

    h-&gt;pred8x8_add  [ HOR_PRED8x8]= FUNCC(pred8x8_horizontal_add          , depth);\

    } else {\

        h-&gt;pred8x8_add  [VERT_PRED8x8]= FUNCC(pred8x16_vertical_add            , depth);\

        h-&gt;pred8x8_add  [ HOR_PRED8x8]= FUNCC(pred8x16_horizontal_add          , depth);\

    }\

    h-&gt;pred16x16_add[VERT_PRED8x8]= FUNCC(pred16x16_vertical_add          , depth);\

    h-&gt;pred16x16_add[ HOR_PRED8x8]= FUNCC(pred16x16_horizontal_add        , depth);\



    switch (bit_depth) {</cpp:value></cpp:define>

        <case pos:start="323:9" pos:end="323:15">case <expr pos:start="323:14" pos:end="323:14"><literal type="number" pos:start="323:14" pos:end="323:14">9</literal></expr>:</case>

            <macro pos:start="325:13" pos:end="325:24"><name pos:start="325:13" pos:end="325:21">H264_PRED</name><argument_list pos:start="325:22" pos:end="325:24">(<argument pos:start="325:23" pos:end="325:23"><literal type="number" pos:start="325:23" pos:end="325:23">9</literal></argument>)</argument_list></macro>

            <break pos:start="327:13" pos:end="327:18">break;</break>

        <case pos:start="329:9" pos:end="329:16">case <expr pos:start="329:14" pos:end="329:15"><literal type="number" pos:start="329:14" pos:end="329:15">10</literal></expr>:</case>

            <macro pos:start="331:13" pos:end="331:25"><name pos:start="331:13" pos:end="331:21">H264_PRED</name><argument_list pos:start="331:22" pos:end="331:25">(<argument pos:start="331:23" pos:end="331:24"><literal type="number" pos:start="331:23" pos:end="331:24">10</literal></argument>)</argument_list></macro>

            <break pos:start="333:13" pos:end="333:18">break;</break>

        <default pos:start="335:9" pos:end="335:16">default:</default>

            <macro pos:start="337:13" pos:end="337:24"><name pos:start="337:13" pos:end="337:21">H264_PRED</name><argument_list pos:start="337:22" pos:end="337:24">(<argument pos:start="337:23" pos:end="337:23"><literal type="number" pos:start="337:23" pos:end="337:23">8</literal></argument>)</argument_list></macro>

            <break pos:start="339:13" pos:end="339:18">break;</break>

    </block_content>}</block></function>



    <if_stmt pos:start="345:5" pos:end="345:83"><if pos:start="345:5" pos:end="345:83">if <condition pos:start="345:8" pos:end="345:17">(<expr pos:start="345:9" pos:end="345:16"><name pos:start="345:9" pos:end="345:16">ARCH_ARM</name></expr>)</condition><block type="pseudo" pos:start="345:19" pos:end="345:83"><block_content pos:start="345:19" pos:end="345:83"> <expr_stmt pos:start="345:19" pos:end="345:83"><expr pos:start="345:19" pos:end="345:82"><call pos:start="345:19" pos:end="345:82"><name pos:start="345:19" pos:end="345:39">ff_h264_pred_init_arm</name><argument_list pos:start="345:40" pos:end="345:82">(<argument pos:start="345:41" pos:end="345:41"><expr pos:start="345:41" pos:end="345:41"><name pos:start="345:41" pos:end="345:41">h</name></expr></argument>, <argument pos:start="345:44" pos:end="345:51"><expr pos:start="345:44" pos:end="345:51"><name pos:start="345:44" pos:end="345:51">codec_id</name></expr></argument>, <argument pos:start="345:54" pos:end="345:62"><expr pos:start="345:54" pos:end="345:62"><name pos:start="345:54" pos:end="345:62">bit_depth</name></expr></argument>, <argument pos:start="345:65" pos:end="345:81"><expr pos:start="345:65" pos:end="345:81"><name pos:start="345:65" pos:end="345:81">chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="347:5" pos:end="347:83"><if pos:start="347:5" pos:end="347:83">if <condition pos:start="347:8" pos:end="347:17">(<expr pos:start="347:9" pos:end="347:16"><name pos:start="347:9" pos:end="347:16">ARCH_X86</name></expr>)</condition><block type="pseudo" pos:start="347:19" pos:end="347:83"><block_content pos:start="347:19" pos:end="347:83"> <expr_stmt pos:start="347:19" pos:end="347:83"><expr pos:start="347:19" pos:end="347:82"><call pos:start="347:19" pos:end="347:82"><name pos:start="347:19" pos:end="347:39">ff_h264_pred_init_x86</name><argument_list pos:start="347:40" pos:end="347:82">(<argument pos:start="347:41" pos:end="347:41"><expr pos:start="347:41" pos:end="347:41"><name pos:start="347:41" pos:end="347:41">h</name></expr></argument>, <argument pos:start="347:44" pos:end="347:51"><expr pos:start="347:44" pos:end="347:51"><name pos:start="347:44" pos:end="347:51">codec_id</name></expr></argument>, <argument pos:start="347:54" pos:end="347:62"><expr pos:start="347:54" pos:end="347:62"><name pos:start="347:54" pos:end="347:62">bit_depth</name></expr></argument>, <argument pos:start="347:65" pos:end="347:81"><expr pos:start="347:65" pos:end="347:81"><name pos:start="347:65" pos:end="347:81">chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

}
</unit>
