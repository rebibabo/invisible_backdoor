<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22592.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:40">win32_aio_process_completion</name><parameter_list pos:start="1:41" pos:end="3:40">(<parameter pos:start="1:42" pos:end="1:61"><decl pos:start="1:42" pos:end="1:61"><type pos:start="1:42" pos:end="1:61"><name pos:start="1:42" pos:end="1:58">QEMUWin32AIOState</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">s</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:26"><decl pos:start="3:5" pos:end="3:26"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">QEMUWin32AIOCB</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier></type><name pos:start="3:21" pos:end="3:26">waiocb</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:39"><decl pos:start="3:29" pos:end="3:39"><type pos:start="3:29" pos:end="3:39"><name pos:start="3:29" pos:end="3:33">DWORD</name></type> <name pos:start="3:35" pos:end="3:39">count</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="77:1">{<block_content pos:start="7:5" pos:end="75:29">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:15"><expr pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:5">s</name><operator pos:start="9:6" pos:end="9:7">-&gt;</operator><name pos:start="9:8" pos:end="9:12">count</name></name><operator pos:start="9:13" pos:end="9:14">--</operator></expr>;</expr_stmt>



    <if_stmt pos:start="13:5" pos:end="39:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:33">(<expr pos:start="13:9" pos:end="13:32"><name pos:start="13:9" pos:end="13:27"><name pos:start="13:9" pos:end="13:14">waiocb</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:18">ov</name><operator pos:start="13:19" pos:end="13:19">.</operator><name pos:start="13:20" pos:end="13:27">Internal</name></name> <operator pos:start="13:29" pos:end="13:30">!=</operator> <literal type="number" pos:start="13:32" pos:end="13:32">0</literal></expr>)</condition> <block pos:start="13:35" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:19">

        <expr_stmt pos:start="15:9" pos:end="15:19"><expr pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <operator pos:start="15:15" pos:end="15:15">-</operator><name pos:start="15:16" pos:end="15:18">EIO</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="17:7" pos:end="39:5">else <block pos:start="17:12" pos:end="39:5">{<block_content pos:start="19:9" pos:end="37:8">

        <expr_stmt pos:start="19:9" pos:end="19:16"><expr pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <literal type="number" pos:start="19:15" pos:end="19:15">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="37:8"><if pos:start="21:9" pos:end="37:8">if <condition pos:start="21:12" pos:end="21:35">(<expr pos:start="21:13" pos:end="21:34"><name pos:start="21:13" pos:end="21:17">count</name> <operator pos:start="21:19" pos:end="21:19">&lt;</operator> <name pos:start="21:21" pos:end="21:34"><name pos:start="21:21" pos:end="21:26">waiocb</name><operator pos:start="21:27" pos:end="21:28">-&gt;</operator><name pos:start="21:29" pos:end="21:34">nbytes</name></name></expr>)</condition> <block pos:start="21:37" pos:end="37:8">{<block_content pos:start="25:13" pos:end="35:13">

            <comment type="block" pos:start="23:13" pos:end="23:55">/* Short reads mean EOF, pad with zeros. */</comment>

            <if_stmt pos:start="25:13" pos:end="35:13"><if pos:start="25:13" pos:end="31:13">if <condition pos:start="25:16" pos:end="25:32">(<expr pos:start="25:17" pos:end="25:31"><name pos:start="25:17" pos:end="25:31"><name pos:start="25:17" pos:end="25:22">waiocb</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:31">is_read</name></name></expr>)</condition> <block pos:start="25:34" pos:end="31:13">{<block_content pos:start="27:17" pos:end="29:48">

                <expr_stmt pos:start="27:17" pos:end="29:48"><expr pos:start="27:17" pos:end="29:47"><call pos:start="27:17" pos:end="29:47"><name pos:start="27:17" pos:end="27:33">qemu_iovec_memset</name><argument_list pos:start="27:34" pos:end="29:47">(<argument pos:start="27:35" pos:end="27:46"><expr pos:start="27:35" pos:end="27:46"><name pos:start="27:35" pos:end="27:46"><name pos:start="27:35" pos:end="27:40">waiocb</name><operator pos:start="27:41" pos:end="27:42">-&gt;</operator><name pos:start="27:43" pos:end="27:46">qiov</name></name></expr></argument>, <argument pos:start="27:49" pos:end="27:53"><expr pos:start="27:49" pos:end="27:53"><name pos:start="27:49" pos:end="27:53">count</name></expr></argument>, <argument pos:start="27:56" pos:end="27:56"><expr pos:start="27:56" pos:end="27:56"><literal type="number" pos:start="27:56" pos:end="27:56">0</literal></expr></argument>,

                    <argument pos:start="29:21" pos:end="29:46"><expr pos:start="29:21" pos:end="29:46"><name pos:start="29:21" pos:end="29:38"><name pos:start="29:21" pos:end="29:26">waiocb</name><operator pos:start="29:27" pos:end="29:28">-&gt;</operator><name pos:start="29:29" pos:end="29:32">qiov</name><operator pos:start="29:33" pos:end="29:34">-&gt;</operator><name pos:start="29:35" pos:end="29:38">size</name></name> <operator pos:start="29:40" pos:end="29:40">-</operator> <name pos:start="29:42" pos:end="29:46">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="31:15" pos:end="35:13">else <block pos:start="31:20" pos:end="35:13">{<block_content pos:start="33:17" pos:end="33:30">

                <expr_stmt pos:start="33:17" pos:end="33:30"><expr pos:start="33:17" pos:end="33:29"><name pos:start="33:17" pos:end="33:19">ret</name> <operator pos:start="33:21" pos:end="33:21">=</operator> <operator pos:start="33:23" pos:end="33:23">-</operator><name pos:start="33:24" pos:end="33:29">EINVAL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

       </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="43:5" pos:end="67:5"><if pos:start="43:5" pos:end="67:5">if <condition pos:start="43:8" pos:end="43:27">(<expr pos:start="43:9" pos:end="43:26"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:26"><name pos:start="43:10" pos:end="43:15">waiocb</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:26">is_linear</name></name></expr>)</condition> <block pos:start="43:29" pos:end="67:5">{<block_content pos:start="45:9" pos:end="65:9">

        <if_stmt pos:start="45:9" pos:end="65:9"><if pos:start="45:9" pos:end="65:9">if <condition pos:start="45:12" pos:end="45:40">(<expr pos:start="45:13" pos:end="45:39"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:18">==</operator> <literal type="number" pos:start="45:20" pos:end="45:20">0</literal> <operator pos:start="45:22" pos:end="45:23">&amp;&amp;</operator> <name pos:start="45:25" pos:end="45:39"><name pos:start="45:25" pos:end="45:30">waiocb</name><operator pos:start="45:31" pos:end="45:32">-&gt;</operator><name pos:start="45:33" pos:end="45:39">is_read</name></name></expr>)</condition> <block pos:start="45:42" pos:end="65:9">{<block_content pos:start="47:13" pos:end="63:36">

            <decl_stmt pos:start="47:13" pos:end="47:46"><decl pos:start="47:13" pos:end="47:45"><type pos:start="47:13" pos:end="47:26"><name pos:start="47:13" pos:end="47:24">QEMUIOVector</name> <modifier pos:start="47:26" pos:end="47:26">*</modifier></type><name pos:start="47:27" pos:end="47:30">qiov</name> <init pos:start="47:32" pos:end="47:45">= <expr pos:start="47:34" pos:end="47:45"><name pos:start="47:34" pos:end="47:45"><name pos:start="47:34" pos:end="47:39">waiocb</name><operator pos:start="47:40" pos:end="47:41">-&gt;</operator><name pos:start="47:42" pos:end="47:45">qiov</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="49:13" pos:end="49:34"><decl pos:start="49:13" pos:end="49:33"><type pos:start="49:13" pos:end="49:18"><name pos:start="49:13" pos:end="49:16">char</name> <modifier pos:start="49:18" pos:end="49:18">*</modifier></type><name pos:start="49:19" pos:end="49:19">p</name> <init pos:start="49:21" pos:end="49:33">= <expr pos:start="49:23" pos:end="49:33"><name pos:start="49:23" pos:end="49:33"><name pos:start="49:23" pos:end="49:28">waiocb</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:33">buf</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="51:13" pos:end="51:18"><decl pos:start="51:13" pos:end="51:17"><type pos:start="51:13" pos:end="51:15"><name pos:start="51:13" pos:end="51:15">int</name></type> <name pos:start="51:17" pos:end="51:17">i</name></decl>;</decl_stmt>



            <for pos:start="55:13" pos:end="61:13">for <control pos:start="55:17" pos:end="55:44">(<init pos:start="55:18" pos:end="55:23"><expr pos:start="55:18" pos:end="55:22"><name pos:start="55:18" pos:end="55:18">i</name> <operator pos:start="55:20" pos:end="55:20">=</operator> <literal type="number" pos:start="55:22" pos:end="55:22">0</literal></expr>;</init> <condition pos:start="55:25" pos:end="55:39"><expr pos:start="55:25" pos:end="55:38"><name pos:start="55:25" pos:end="55:25">i</name> <operator pos:start="55:27" pos:end="55:27">&lt;</operator> <name pos:start="55:29" pos:end="55:38"><name pos:start="55:29" pos:end="55:32">qiov</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:38">niov</name></name></expr>;</condition> <incr pos:start="55:41" pos:end="55:43"><expr pos:start="55:41" pos:end="55:43"><operator pos:start="55:41" pos:end="55:42">++</operator><name pos:start="55:43" pos:end="55:43">i</name></expr></incr>)</control> <block pos:start="55:46" pos:end="61:13">{<block_content pos:start="57:17" pos:end="59:42">

                <expr_stmt pos:start="57:17" pos:end="57:71"><expr pos:start="57:17" pos:end="57:70"><call pos:start="57:17" pos:end="57:70"><name pos:start="57:17" pos:end="57:22">memcpy</name><argument_list pos:start="57:23" pos:end="57:70">(<argument pos:start="57:24" pos:end="57:44"><expr pos:start="57:24" pos:end="57:44"><name pos:start="57:24" pos:end="57:35"><name pos:start="57:24" pos:end="57:27">qiov</name><operator pos:start="57:28" pos:end="57:29">-&gt;</operator><name pos:start="57:30" pos:end="57:32">iov</name><index pos:start="57:33" pos:end="57:35">[<expr pos:start="57:34" pos:end="57:34"><name pos:start="57:34" pos:end="57:34">i</name></expr>]</index></name><operator pos:start="57:36" pos:end="57:36">.</operator><name pos:start="57:37" pos:end="57:44">iov_base</name></expr></argument>, <argument pos:start="57:47" pos:end="57:47"><expr pos:start="57:47" pos:end="57:47"><name pos:start="57:47" pos:end="57:47">p</name></expr></argument>, <argument pos:start="57:50" pos:end="57:69"><expr pos:start="57:50" pos:end="57:69"><name pos:start="57:50" pos:end="57:61"><name pos:start="57:50" pos:end="57:53">qiov</name><operator pos:start="57:54" pos:end="57:55">-&gt;</operator><name pos:start="57:56" pos:end="57:58">iov</name><index pos:start="57:59" pos:end="57:61">[<expr pos:start="57:60" pos:end="57:60"><name pos:start="57:60" pos:end="57:60">i</name></expr>]</index></name><operator pos:start="57:62" pos:end="57:62">.</operator><name pos:start="57:63" pos:end="57:69">iov_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:42"><expr pos:start="59:17" pos:end="59:41"><name pos:start="59:17" pos:end="59:17">p</name> <operator pos:start="59:19" pos:end="59:20">+=</operator> <name pos:start="59:22" pos:end="59:33"><name pos:start="59:22" pos:end="59:25">qiov</name><operator pos:start="59:26" pos:end="59:27">-&gt;</operator><name pos:start="59:28" pos:end="59:30">iov</name><index pos:start="59:31" pos:end="59:33">[<expr pos:start="59:32" pos:end="59:32"><name pos:start="59:32" pos:end="59:32">i</name></expr>]</index></name><operator pos:start="59:34" pos:end="59:34">.</operator><name pos:start="59:35" pos:end="59:41">iov_len</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="63:13" pos:end="63:36"><expr pos:start="63:13" pos:end="63:35"><call pos:start="63:13" pos:end="63:35"><name pos:start="63:13" pos:end="63:22">qemu_vfree</name><argument_list pos:start="63:23" pos:end="63:35">(<argument pos:start="63:24" pos:end="63:34"><expr pos:start="63:24" pos:end="63:34"><name pos:start="63:24" pos:end="63:34"><name pos:start="63:24" pos:end="63:29">waiocb</name><operator pos:start="63:30" pos:end="63:31">-&gt;</operator><name pos:start="63:32" pos:end="63:34">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>





    <expr_stmt pos:start="73:5" pos:end="73:50"><expr pos:start="73:5" pos:end="73:49"><call pos:start="73:5" pos:end="73:49"><name pos:start="73:5" pos:end="73:21"><name pos:start="73:5" pos:end="73:10">waiocb</name><operator pos:start="73:11" pos:end="73:12">-&gt;</operator><name pos:start="73:13" pos:end="73:18">common</name><operator pos:start="73:19" pos:end="73:19">.</operator><name pos:start="73:20" pos:end="73:21">cb</name></name><argument_list pos:start="73:22" pos:end="73:49">(<argument pos:start="73:23" pos:end="73:43"><expr pos:start="73:23" pos:end="73:43"><name pos:start="73:23" pos:end="73:43"><name pos:start="73:23" pos:end="73:28">waiocb</name><operator pos:start="73:29" pos:end="73:30">-&gt;</operator><name pos:start="73:31" pos:end="73:36">common</name><operator pos:start="73:37" pos:end="73:37">.</operator><name pos:start="73:38" pos:end="73:43">opaque</name></name></expr></argument>, <argument pos:start="73:46" pos:end="73:48"><expr pos:start="73:46" pos:end="73:48"><name pos:start="73:46" pos:end="73:48">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:29"><expr pos:start="75:5" pos:end="75:28"><call pos:start="75:5" pos:end="75:28"><name pos:start="75:5" pos:end="75:20">qemu_aio_release</name><argument_list pos:start="75:21" pos:end="75:28">(<argument pos:start="75:22" pos:end="75:27"><expr pos:start="75:22" pos:end="75:27"><name pos:start="75:22" pos:end="75:27">waiocb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
