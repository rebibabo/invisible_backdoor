<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14617.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:52"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">spapr_add_lmbs</name><parameter_list pos:start="1:27" pos:end="5:40">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:43"><name pos:start="1:28" pos:end="1:38">DeviceState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">dev</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:64"><decl pos:start="1:46" pos:end="1:64"><type pos:start="1:46" pos:end="1:64"><name pos:start="1:46" pos:end="1:53">uint64_t</name></type> <name pos:start="1:55" pos:end="1:64">addr_start</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:79"><decl pos:start="1:67" pos:end="1:79"><type pos:start="1:67" pos:end="1:79"><name pos:start="1:67" pos:end="1:74">uint64_t</name></type> <name pos:start="1:76" pos:end="1:79">size</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:40"><decl pos:start="3:28" pos:end="3:40"><type pos:start="3:28" pos:end="3:40"><name pos:start="3:28" pos:end="3:35">uint32_t</name></type> <name pos:start="3:37" pos:end="3:40">node</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:72"><decl pos:start="3:43" pos:end="3:72"><type pos:start="3:43" pos:end="3:72"><name pos:start="3:43" pos:end="3:46">bool</name></type> <name pos:start="3:48" pos:end="3:72">dedicated_hp_event_source</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:39"><decl pos:start="5:28" pos:end="5:39"><type pos:start="5:28" pos:end="5:39"><name pos:start="5:28" pos:end="5:32">Error</name> <modifier pos:start="5:34" pos:end="5:34">*</modifier><modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:39">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="79:52">{<block_content pos:start="9:5" pos:end="79:52">

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">sPAPRDRConnector</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:25">drc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:27"><name pos:start="11:5" pos:end="11:25">sPAPRDRConnectorClass</name> <modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:31">drck</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:52"><decl pos:start="13:5" pos:end="13:51"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:20">nr_lmbs</name> <init pos:start="13:22" pos:end="13:51">= <expr pos:start="13:24" pos:end="13:51"><name pos:start="13:24" pos:end="13:27">size</name><operator pos:start="13:28" pos:end="13:28">/</operator><name pos:start="13:29" pos:end="13:51">SPAPR_MEMORY_BLOCK_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:21"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:21">fdt_offset</name></decl>, <decl pos:start="15:24" pos:end="15:31"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:24" pos:end="15:31">fdt_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">void</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:13">fdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:17">addr</name> <init pos:start="19:19" pos:end="19:30">= <expr pos:start="19:21" pos:end="19:30"><name pos:start="19:21" pos:end="19:30">addr_start</name></expr></init></decl>;</decl_stmt>



    <for pos:start="23:5" pos:end="79:52">for <control pos:start="23:9" pos:end="23:33">(<init pos:start="23:10" pos:end="23:15"><expr pos:start="23:10" pos:end="23:14"><name pos:start="23:10" pos:end="23:10">i</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</init> <condition pos:start="23:17" pos:end="23:28"><expr pos:start="23:17" pos:end="23:27"><name pos:start="23:17" pos:end="23:17">i</name> <operator pos:start="23:19" pos:end="23:19">&lt;</operator> <name pos:start="23:21" pos:end="23:27">nr_lmbs</name></expr>;</condition> <incr pos:start="23:30" pos:end="23:32"><expr pos:start="23:30" pos:end="23:32"><name pos:start="23:30" pos:end="23:30">i</name><operator pos:start="23:31" pos:end="23:32">++</operator></expr></incr>)</control> <block pos:start="23:35" pos:end="79:52">{<block_content pos:start="25:9" pos:end="79:52">

        <expr_stmt pos:start="25:9" pos:end="27:46"><expr pos:start="25:9" pos:end="27:45"><name pos:start="25:9" pos:end="25:11">drc</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="27:45"><name pos:start="25:15" pos:end="25:38">spapr_dr_connector_by_id</name><argument_list pos:start="25:39" pos:end="27:45">(<argument pos:start="25:40" pos:end="25:66"><expr pos:start="25:40" pos:end="25:66"><name pos:start="25:40" pos:end="25:66">SPAPR_DR_CONNECTOR_TYPE_LMB</name></expr></argument>,

                <argument pos:start="27:17" pos:end="27:44"><expr pos:start="27:17" pos:end="27:44"><name pos:start="27:17" pos:end="27:20">addr</name><operator pos:start="27:21" pos:end="27:21">/</operator><name pos:start="27:22" pos:end="27:44">SPAPR_MEMORY_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:22"><expr pos:start="29:9" pos:end="29:21"><call pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:16">g_assert</name><argument_list pos:start="29:17" pos:end="29:21">(<argument pos:start="29:18" pos:end="29:20"><expr pos:start="29:18" pos:end="29:20"><name pos:start="29:18" pos:end="29:20">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:44"><expr pos:start="33:9" pos:end="33:43"><name pos:start="33:9" pos:end="33:11">fdt</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:43"><name pos:start="33:15" pos:end="33:32">create_device_tree</name><argument_list pos:start="33:33" pos:end="33:43">(<argument pos:start="33:34" pos:end="33:42"><expr pos:start="33:34" pos:end="33:42"><operator pos:start="33:34" pos:end="33:34">&amp;</operator><name pos:start="33:35" pos:end="33:42">fdt_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="37:73"><expr pos:start="35:9" pos:end="37:72"><name pos:start="35:9" pos:end="35:18">fdt_offset</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <call pos:start="35:22" pos:end="37:72"><name pos:start="35:22" pos:end="35:47">spapr_populate_memory_node</name><argument_list pos:start="35:48" pos:end="37:72">(<argument pos:start="35:49" pos:end="35:51"><expr pos:start="35:49" pos:end="35:51"><name pos:start="35:49" pos:end="35:51">fdt</name></expr></argument>, <argument pos:start="35:54" pos:end="35:57"><expr pos:start="35:54" pos:end="35:57"><name pos:start="35:54" pos:end="35:57">node</name></expr></argument>, <argument pos:start="35:60" pos:end="35:63"><expr pos:start="35:60" pos:end="35:63"><name pos:start="35:60" pos:end="35:63">addr</name></expr></argument>,

                                                <argument pos:start="37:49" pos:end="37:71"><expr pos:start="37:49" pos:end="37:71"><name pos:start="37:49" pos:end="37:71">SPAPR_MEMORY_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:49"><expr pos:start="41:9" pos:end="41:48"><name pos:start="41:9" pos:end="41:12">drck</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <call pos:start="41:16" pos:end="41:48"><name pos:start="41:16" pos:end="41:43">SPAPR_DR_CONNECTOR_GET_CLASS</name><argument_list pos:start="41:44" pos:end="41:48">(<argument pos:start="41:45" pos:end="41:47"><expr pos:start="41:45" pos:end="41:47"><name pos:start="41:45" pos:end="41:47">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:72"><expr pos:start="43:9" pos:end="43:71"><call pos:start="43:9" pos:end="43:71"><name pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:12">drck</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:20">attach</name></name><argument_list pos:start="43:21" pos:end="43:71">(<argument pos:start="43:22" pos:end="43:24"><expr pos:start="43:22" pos:end="43:24"><name pos:start="43:22" pos:end="43:24">drc</name></expr></argument>, <argument pos:start="43:27" pos:end="43:29"><expr pos:start="43:27" pos:end="43:29"><name pos:start="43:27" pos:end="43:29">dev</name></expr></argument>, <argument pos:start="43:32" pos:end="43:34"><expr pos:start="43:32" pos:end="43:34"><name pos:start="43:32" pos:end="43:34">fdt</name></expr></argument>, <argument pos:start="43:37" pos:end="43:46"><expr pos:start="43:37" pos:end="43:46"><name pos:start="43:37" pos:end="43:46">fdt_offset</name></expr></argument>, <argument pos:start="43:49" pos:end="43:64"><expr pos:start="43:49" pos:end="43:64"><operator pos:start="43:49" pos:end="43:49">!</operator><name pos:start="43:50" pos:end="43:64"><name pos:start="43:50" pos:end="43:52">dev</name><operator pos:start="43:53" pos:end="43:54">-&gt;</operator><name pos:start="43:55" pos:end="43:64">hotplugged</name></name></expr></argument>, <argument pos:start="43:67" pos:end="43:70"><expr pos:start="43:67" pos:end="43:70"><name pos:start="43:67" pos:end="43:70">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:40"><expr pos:start="45:9" pos:end="45:39"><name pos:start="45:9" pos:end="45:12">addr</name> <operator pos:start="45:14" pos:end="45:15">+=</operator> <name pos:start="45:17" pos:end="45:39">SPAPR_MEMORY_BLOCK_SIZE</name></expr>;</expr_stmt>







    <comment type="block" pos:start="53:5" pos:end="57:7">/* send hotplug notification to the

     * guest only in case of hotplugged memory

     */</comment>

    <if_stmt pos:start="59:5" pos:end="79:52"><if pos:start="59:5" pos:end="79:52">if <condition pos:start="59:8" pos:end="59:24">(<expr pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:11">dev</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:23">hotplugged</name></name></expr>)</condition> <block pos:start="59:26" pos:end="79:52">{<block_content pos:start="61:9" pos:end="79:52">

        <if_stmt pos:start="61:9" pos:end="79:52"><if pos:start="61:9" pos:end="75:9">if <condition pos:start="61:12" pos:end="61:38">(<expr pos:start="61:13" pos:end="61:37"><name pos:start="61:13" pos:end="61:37">dedicated_hp_event_source</name></expr>)</condition> <block pos:start="61:40" pos:end="75:9">{<block_content pos:start="63:13" pos:end="73:73">

            <expr_stmt pos:start="63:13" pos:end="65:58"><expr pos:start="63:13" pos:end="65:57"><name pos:start="63:13" pos:end="63:15">drc</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <call pos:start="63:19" pos:end="65:57"><name pos:start="63:19" pos:end="63:42">spapr_dr_connector_by_id</name><argument_list pos:start="63:43" pos:end="65:57">(<argument pos:start="63:44" pos:end="63:70"><expr pos:start="63:44" pos:end="63:70"><name pos:start="63:44" pos:end="63:70">SPAPR_DR_CONNECTOR_TYPE_LMB</name></expr></argument>,

                    <argument pos:start="65:21" pos:end="65:56"><expr pos:start="65:21" pos:end="65:56"><name pos:start="65:21" pos:end="65:30">addr_start</name> <operator pos:start="65:32" pos:end="65:32">/</operator> <name pos:start="65:34" pos:end="65:56">SPAPR_MEMORY_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:53"><expr pos:start="67:13" pos:end="67:52"><name pos:start="67:13" pos:end="67:16">drck</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <call pos:start="67:20" pos:end="67:52"><name pos:start="67:20" pos:end="67:47">SPAPR_DR_CONNECTOR_GET_CLASS</name><argument_list pos:start="67:48" pos:end="67:52">(<argument pos:start="67:49" pos:end="67:51"><expr pos:start="67:49" pos:end="67:51"><name pos:start="67:49" pos:end="67:51">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="73:73"><expr pos:start="69:13" pos:end="73:72"><call pos:start="69:13" pos:end="73:72"><name pos:start="69:13" pos:end="69:50">spapr_hotplug_req_add_by_count_indexed</name><argument_list pos:start="69:51" pos:end="73:72">(<argument pos:start="69:52" pos:end="69:78"><expr pos:start="69:52" pos:end="69:78"><name pos:start="69:52" pos:end="69:78">SPAPR_DR_CONNECTOR_TYPE_LMB</name></expr></argument>,

                                                   <argument pos:start="71:52" pos:end="71:58"><expr pos:start="71:52" pos:end="71:58"><name pos:start="71:52" pos:end="71:58">nr_lmbs</name></expr></argument>,

                                                   <argument pos:start="73:52" pos:end="73:71"><expr pos:start="73:52" pos:end="73:71"><call pos:start="73:52" pos:end="73:71"><name pos:start="73:52" pos:end="73:66"><name pos:start="73:52" pos:end="73:55">drck</name><operator pos:start="73:56" pos:end="73:57">-&gt;</operator><name pos:start="73:58" pos:end="73:66">get_index</name></name><argument_list pos:start="73:67" pos:end="73:71">(<argument pos:start="73:68" pos:end="73:70"><expr pos:start="73:68" pos:end="73:70"><name pos:start="73:68" pos:end="73:70">drc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="75:11" pos:end="79:52">else <block pos:start="75:16" pos:end="79:52">{<block_content pos:start="77:13" pos:end="79:52">

            <expr_stmt pos:start="77:13" pos:end="79:52"><expr pos:start="77:13" pos:end="79:51"><call pos:start="77:13" pos:end="79:51"><name pos:start="77:13" pos:end="77:42">spapr_hotplug_req_add_by_count</name><argument_list pos:start="77:43" pos:end="79:51">(<argument pos:start="77:44" pos:end="77:70"><expr pos:start="77:44" pos:end="77:70"><name pos:start="77:44" pos:end="77:70">SPAPR_DR_CONNECTOR_TYPE_LMB</name></expr></argument>,

                                           <argument pos:start="79:44" pos:end="79:50"><expr pos:start="79:44" pos:end="79:50"><name pos:start="79:44" pos:end="79:50">nr_lmbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></function>


</unit>
