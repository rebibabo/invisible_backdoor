<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15757.c" pos:tabs="8"><function pos:start="1:1" pos:end="303:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">h264_handle_packet</name><parameter_list pos:start="1:30" pos:end="13:49">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:45">AVFormatContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">ctx</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:50"><decl pos:start="3:31" pos:end="3:50"><type pos:start="3:31" pos:end="3:50"><name pos:start="3:31" pos:end="3:44">PayloadContext</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:50">data</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:42"><decl pos:start="5:31" pos:end="5:42"><type pos:start="5:31" pos:end="5:42"><name pos:start="5:31" pos:end="5:38">AVStream</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:42">st</name></decl></parameter>,

                              <parameter pos:start="7:31" pos:end="7:44"><decl pos:start="7:31" pos:end="7:44"><type pos:start="7:31" pos:end="7:44"><name pos:start="7:31" pos:end="7:38">AVPacket</name> <modifier pos:start="7:40" pos:end="7:40">*</modifier></type> <name pos:start="7:42" pos:end="7:44">pkt</name></decl></parameter>,

                              <parameter pos:start="9:31" pos:end="9:50"><decl pos:start="9:31" pos:end="9:50"><type pos:start="9:31" pos:end="9:50"><name pos:start="9:31" pos:end="9:38">uint32_t</name> <modifier pos:start="9:40" pos:end="9:40">*</modifier></type> <name pos:start="9:42" pos:end="9:50">timestamp</name></decl></parameter>,

                              <parameter pos:start="11:31" pos:end="11:49"><decl pos:start="11:31" pos:end="11:49"><type pos:start="11:31" pos:end="11:49"><specifier pos:start="11:31" pos:end="11:35">const</specifier> <name pos:start="11:37" pos:end="11:43">uint8_t</name> <modifier pos:start="11:45" pos:end="11:45">*</modifier></type> <name pos:start="11:47" pos:end="11:49">buf</name></decl></parameter>,

                              <parameter pos:start="13:31" pos:end="13:37"><decl pos:start="13:31" pos:end="13:37"><type pos:start="13:31" pos:end="13:37"><name pos:start="13:31" pos:end="13:33">int</name></type> <name pos:start="13:35" pos:end="13:37">len</name></decl></parameter>, <parameter pos:start="13:40" pos:end="13:48"><decl pos:start="13:40" pos:end="13:48"><type pos:start="13:40" pos:end="13:48"><name pos:start="13:40" pos:end="13:42">int</name></type> <name pos:start="13:44" pos:end="13:48">flags</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="303:1">{<block_content pos:start="17:5" pos:end="301:18">

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:15">nal</name> <init pos:start="17:17" pos:end="17:24">= <expr pos:start="17:19" pos:end="17:24"><name pos:start="17:19" pos:end="17:24"><name pos:start="17:19" pos:end="17:21">buf</name><index pos:start="17:22" pos:end="17:24">[<expr pos:start="17:23" pos:end="17:23"><literal type="number" pos:start="17:23" pos:end="17:23">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:32"><decl pos:start="19:5" pos:end="19:31"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:16">type</name> <init pos:start="19:18" pos:end="19:31">= <expr pos:start="19:20" pos:end="19:31"><operator pos:start="19:20" pos:end="19:20">(</operator><name pos:start="19:21" pos:end="19:23">nal</name> <operator pos:start="19:25" pos:end="19:25">&amp;</operator> <literal type="number" pos:start="19:27" pos:end="19:30">0x1f</literal><operator pos:start="19:31" pos:end="19:31">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:14">result</name><init pos:start="21:15" pos:end="21:17">= <expr pos:start="21:17" pos:end="21:17"><literal type="number" pos:start="21:17" pos:end="21:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="28:0"><decl pos:start="23:5" pos:end="23:45"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">uint8_t</name></type> <name pos:start="23:13" pos:end="23:28"><name pos:start="23:13" pos:end="23:26">start_sequence</name><index pos:start="23:27" pos:end="23:28">[]</index></name> <init pos:start="23:30" pos:end="23:45">= <expr pos:start="23:32" pos:end="23:45"><block pos:start="23:32" pos:end="23:45">{ <expr pos:start="23:34" pos:end="23:34"><literal type="number" pos:start="23:34" pos:end="23:34">0</literal></expr>, <expr pos:start="23:37" pos:end="23:37"><literal type="number" pos:start="23:37" pos:end="23:37">0</literal></expr>, <expr pos:start="23:40" pos:end="23:40"><literal type="number" pos:start="23:40" pos:end="23:40">0</literal></expr>, <expr pos:start="23:43" pos:end="23:43"><literal type="number" pos:start="23:43" pos:end="23:43">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>



<cpp:ifdef pos:start="27:1" pos:end="27:12">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="29:5" pos:end="29:17"><expr pos:start="29:5" pos:end="29:16"><call pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:10">assert</name><argument_list pos:start="29:11" pos:end="29:16">(<argument pos:start="29:12" pos:end="29:15"><expr pos:start="29:12" pos:end="29:15"><name pos:start="29:12" pos:end="29:15">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="34:0"><expr pos:start="31:5" pos:end="31:40"><call pos:start="31:5" pos:end="31:40"><name pos:start="31:5" pos:end="31:10">assert</name><argument_list pos:start="31:11" pos:end="31:40">(<argument pos:start="31:12" pos:end="31:39"><expr pos:start="31:12" pos:end="31:39"><name pos:start="31:12" pos:end="31:23"><name pos:start="31:12" pos:end="31:15">data</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:23">cookie</name></name> <operator pos:start="31:25" pos:end="31:26">==</operator> <name pos:start="31:28" pos:end="31:39">MAGIC_COOKIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="35:5" pos:end="35:16"><expr pos:start="35:5" pos:end="35:15"><call pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:10">assert</name><argument_list pos:start="35:11" pos:end="35:15">(<argument pos:start="35:12" pos:end="35:14"><expr pos:start="35:12" pos:end="35:14"><name pos:start="35:12" pos:end="35:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="41:17"><if pos:start="39:5" pos:end="41:17">if <condition pos:start="39:8" pos:end="39:32">(<expr pos:start="39:9" pos:end="39:31"><name pos:start="39:9" pos:end="39:12">type</name> <operator pos:start="39:14" pos:end="39:15">&gt;=</operator> <literal type="number" pos:start="39:17" pos:end="39:17">1</literal> <operator pos:start="39:19" pos:end="39:20">&amp;&amp;</operator> <name pos:start="39:22" pos:end="39:25">type</name> <operator pos:start="39:27" pos:end="39:28">&lt;=</operator> <literal type="number" pos:start="39:30" pos:end="39:31">23</literal></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:17"><block_content pos:start="41:9" pos:end="41:17">

        <expr_stmt pos:start="41:9" pos:end="41:17"><expr pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:12">type</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <literal type="number" pos:start="41:16" pos:end="41:16">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>              <comment type="line" pos:start="41:32" pos:end="41:116">// simplify the case. (these are all the nal types used internally by the h264 codec)</comment>

    <switch pos:start="43:5" pos:end="293:5">switch <condition pos:start="43:12" pos:end="43:17">(<expr pos:start="43:13" pos:end="43:16"><name pos:start="43:13" pos:end="43:16">type</name></expr>)</condition> <block pos:start="43:19" pos:end="293:5">{<block_content pos:start="45:5" pos:end="291:14">

    <case pos:start="45:5" pos:end="45:11">case <expr pos:start="45:10" pos:end="45:10"><literal type="number" pos:start="45:10" pos:end="45:10">0</literal></expr>:</case>                    <comment type="line" pos:start="45:32" pos:end="45:66">// undefined, but pass them through</comment>

    <case pos:start="47:5" pos:end="47:11">case <expr pos:start="47:10" pos:end="47:10"><literal type="number" pos:start="47:10" pos:end="47:10">1</literal></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="49:55"><expr pos:start="49:9" pos:end="49:54"><call pos:start="49:9" pos:end="49:54"><name pos:start="49:9" pos:end="49:21">av_new_packet</name><argument_list pos:start="49:22" pos:end="49:54">(<argument pos:start="49:23" pos:end="49:25"><expr pos:start="49:23" pos:end="49:25"><name pos:start="49:23" pos:end="49:25">pkt</name></expr></argument>, <argument pos:start="49:28" pos:end="49:53"><expr pos:start="49:28" pos:end="49:53"><name pos:start="49:28" pos:end="49:30">len</name><operator pos:start="49:31" pos:end="49:31">+</operator><sizeof pos:start="49:32" pos:end="49:53">sizeof<argument_list pos:start="49:38" pos:end="49:53">(<argument pos:start="49:39" pos:end="49:52"><expr pos:start="49:39" pos:end="49:52"><name pos:start="49:39" pos:end="49:52">start_sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:66"><expr pos:start="51:9" pos:end="51:65"><call pos:start="51:9" pos:end="51:65"><name pos:start="51:9" pos:end="51:14">memcpy</name><argument_list pos:start="51:15" pos:end="51:65">(<argument pos:start="51:16" pos:end="51:24"><expr pos:start="51:16" pos:end="51:24"><name pos:start="51:16" pos:end="51:24"><name pos:start="51:16" pos:end="51:18">pkt</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:24">data</name></name></expr></argument>, <argument pos:start="51:27" pos:end="51:40"><expr pos:start="51:27" pos:end="51:40"><name pos:start="51:27" pos:end="51:40">start_sequence</name></expr></argument>, <argument pos:start="51:43" pos:end="51:64"><expr pos:start="51:43" pos:end="51:64"><sizeof pos:start="51:43" pos:end="51:64">sizeof<argument_list pos:start="51:49" pos:end="51:64">(<argument pos:start="51:50" pos:end="51:63"><expr pos:start="51:50" pos:end="51:63"><name pos:start="51:50" pos:end="51:63">start_sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="56:0"><expr pos:start="53:9" pos:end="53:58"><call pos:start="53:9" pos:end="53:58"><name pos:start="53:9" pos:end="53:14">memcpy</name><argument_list pos:start="53:15" pos:end="53:58">(<argument pos:start="53:16" pos:end="53:47"><expr pos:start="53:16" pos:end="53:47"><name pos:start="53:16" pos:end="53:24"><name pos:start="53:16" pos:end="53:18">pkt</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:24">data</name></name><operator pos:start="53:25" pos:end="53:25">+</operator><sizeof pos:start="53:26" pos:end="53:47">sizeof<argument_list pos:start="53:32" pos:end="53:47">(<argument pos:start="53:33" pos:end="53:46"><expr pos:start="53:33" pos:end="53:46"><name pos:start="53:33" pos:end="53:46">start_sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="53:50" pos:end="53:52"><expr pos:start="53:50" pos:end="53:52"><name pos:start="53:50" pos:end="53:52">buf</name></expr></argument>, <argument pos:start="53:55" pos:end="53:57"><expr pos:start="53:55" pos:end="53:57"><name pos:start="53:55" pos:end="53:57">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="55:1" pos:end="55:12">#<cpp:directive pos:start="55:2" pos:end="55:6">ifdef</cpp:directive> <name pos:start="55:8" pos:end="55:12">DEBUG</name></cpp:ifdef>

        <expr_stmt pos:start="57:9" pos:end="60:0"><expr pos:start="57:9" pos:end="57:49"><name pos:start="57:9" pos:end="57:47"><name pos:start="57:9" pos:end="57:12">data</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:35">packet_types_received</name><index pos:start="57:36" pos:end="57:47">[<expr pos:start="57:37" pos:end="57:46"><name pos:start="57:37" pos:end="57:39">nal</name> <operator pos:start="57:41" pos:end="57:41">&amp;</operator> <literal type="number" pos:start="57:43" pos:end="57:46">0x1f</literal></expr>]</index></name><operator pos:start="57:48" pos:end="57:49">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

        <break pos:start="61:9" pos:end="61:14">break;</break>



    <case pos:start="65:5" pos:end="65:12">case <expr pos:start="65:10" pos:end="65:11"><literal type="number" pos:start="65:10" pos:end="65:11">24</literal></expr>:</case>                   <comment type="line" pos:start="65:32" pos:end="65:68">// STAP-A (one packet, multiple nals)</comment>

        <comment type="line" pos:start="67:9" pos:end="67:33">// consume the STAP-A NAL</comment>

        <expr_stmt pos:start="69:9" pos:end="69:14"><expr pos:start="69:9" pos:end="69:13"><name pos:start="69:9" pos:end="69:11">buf</name><operator pos:start="69:12" pos:end="69:13">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:14"><expr pos:start="71:9" pos:end="71:13"><name pos:start="71:9" pos:end="71:11">len</name><operator pos:start="71:12" pos:end="71:13">--</operator></expr>;</expr_stmt>

        <comment type="line" pos:start="73:9" pos:end="73:62">// first we are going to figure out the total size....</comment>

        <block pos:start="75:9" pos:end="181:9">{<block_content pos:start="77:13" pos:end="179:13">

            <decl_stmt pos:start="77:13" pos:end="77:24"><decl pos:start="77:13" pos:end="77:23"><type pos:start="77:13" pos:end="77:15"><name pos:start="77:13" pos:end="77:15">int</name></type> <name pos:start="77:17" pos:end="77:20">pass</name><init pos:start="77:21" pos:end="77:23">= <expr pos:start="77:23" pos:end="77:23"><literal type="number" pos:start="77:23" pos:end="77:23">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="79:13" pos:end="79:32"><decl pos:start="79:13" pos:end="79:31"><type pos:start="79:13" pos:end="79:15"><name pos:start="79:13" pos:end="79:15">int</name></type> <name pos:start="79:17" pos:end="79:28">total_length</name><init pos:start="79:29" pos:end="79:31">= <expr pos:start="79:31" pos:end="79:31"><literal type="number" pos:start="79:31" pos:end="79:31">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="81:13" pos:end="81:31"><decl pos:start="81:13" pos:end="81:30"><type pos:start="81:13" pos:end="81:21"><name pos:start="81:13" pos:end="81:19">uint8_t</name> <modifier pos:start="81:21" pos:end="81:21">*</modifier></type><name pos:start="81:22" pos:end="81:24">dst</name><init pos:start="81:25" pos:end="81:30">= <expr pos:start="81:27" pos:end="81:30"><name pos:start="81:27" pos:end="81:30">NULL</name></expr></init></decl>;</decl_stmt>



            <for pos:start="85:13" pos:end="179:13">for<control pos:start="85:16" pos:end="85:40">(<init pos:start="85:17" pos:end="85:24"><expr pos:start="85:17" pos:end="85:23"><name pos:start="85:17" pos:end="85:20">pass</name><operator pos:start="85:21" pos:end="85:21">=</operator> <literal type="number" pos:start="85:23" pos:end="85:23">0</literal></expr>;</init> <condition pos:start="85:26" pos:end="85:32"><expr pos:start="85:26" pos:end="85:31"><name pos:start="85:26" pos:end="85:29">pass</name><operator pos:start="85:30" pos:end="85:30">&lt;</operator><literal type="number" pos:start="85:31" pos:end="85:31">2</literal></expr>;</condition> <incr pos:start="85:34" pos:end="85:39"><expr pos:start="85:34" pos:end="85:39"><name pos:start="85:34" pos:end="85:37">pass</name><operator pos:start="85:38" pos:end="85:39">++</operator></expr></incr>)</control> <block pos:start="85:42" pos:end="179:13">{<block_content pos:start="87:17" pos:end="177:17">

                <decl_stmt pos:start="87:17" pos:end="87:40"><decl pos:start="87:17" pos:end="87:39"><type pos:start="87:17" pos:end="87:31"><specifier pos:start="87:17" pos:end="87:21">const</specifier> <name pos:start="87:23" pos:end="87:29">uint8_t</name> <modifier pos:start="87:31" pos:end="87:31">*</modifier></type><name pos:start="87:32" pos:end="87:34">src</name><init pos:start="87:35" pos:end="87:39">= <expr pos:start="87:37" pos:end="87:39"><name pos:start="87:37" pos:end="87:39">buf</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="89:17" pos:end="89:33"><decl pos:start="89:17" pos:end="89:32"><type pos:start="89:17" pos:end="89:19"><name pos:start="89:17" pos:end="89:19">int</name></type> <name pos:start="89:21" pos:end="89:27">src_len</name><init pos:start="89:28" pos:end="89:32">= <expr pos:start="89:30" pos:end="89:32"><name pos:start="89:30" pos:end="89:32">len</name></expr></init></decl>;</decl_stmt>



                <do pos:start="93:17" pos:end="161:38">do <block pos:start="93:20" pos:end="161:17">{<block_content pos:start="95:21" pos:end="159:83">

                    <decl_stmt pos:start="95:21" pos:end="95:53"><decl pos:start="95:21" pos:end="95:52"><type pos:start="95:21" pos:end="95:28"><name pos:start="95:21" pos:end="95:28">uint16_t</name></type> <name pos:start="95:30" pos:end="95:37">nal_size</name> <init pos:start="95:39" pos:end="95:52">= <expr pos:start="95:41" pos:end="95:52"><call pos:start="95:41" pos:end="95:52"><name pos:start="95:41" pos:end="95:47">AV_RB16</name><argument_list pos:start="95:48" pos:end="95:52">(<argument pos:start="95:49" pos:end="95:51"><expr pos:start="95:49" pos:end="95:51"><name pos:start="95:49" pos:end="95:51">src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="95:55" pos:end="95:109">// this going to be a problem if unaligned (can it be?)</comment>



                    <comment type="line" pos:start="99:21" pos:end="99:61">// consume the length of the aggregate...</comment>

                    <expr_stmt pos:start="101:21" pos:end="101:29"><expr pos:start="101:21" pos:end="101:28"><name pos:start="101:21" pos:end="101:23">src</name> <operator pos:start="101:25" pos:end="101:26">+=</operator> <literal type="number" pos:start="101:28" pos:end="101:28">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="103:21" pos:end="103:33"><expr pos:start="103:21" pos:end="103:32"><name pos:start="103:21" pos:end="103:27">src_len</name> <operator pos:start="103:29" pos:end="103:30">-=</operator> <literal type="number" pos:start="103:32" pos:end="103:32">2</literal></expr>;</expr_stmt>



                    <if_stmt pos:start="107:21" pos:end="143:21"><if pos:start="107:21" pos:end="137:21">if <condition pos:start="107:24" pos:end="107:44">(<expr pos:start="107:25" pos:end="107:43"><name pos:start="107:25" pos:end="107:32">nal_size</name> <operator pos:start="107:34" pos:end="107:35">&lt;=</operator> <name pos:start="107:37" pos:end="107:43">src_len</name></expr>)</condition> <block pos:start="107:46" pos:end="137:21">{<block_content pos:start="109:25" pos:end="135:25">

                        <if_stmt pos:start="109:25" pos:end="135:25"><if pos:start="109:25" pos:end="115:25">if<condition pos:start="109:27" pos:end="109:35">(<expr pos:start="109:28" pos:end="109:34"><name pos:start="109:28" pos:end="109:31">pass</name><operator pos:start="109:32" pos:end="109:33">==</operator><literal type="number" pos:start="109:34" pos:end="109:34">0</literal></expr>)</condition> <block pos:start="109:37" pos:end="115:25">{<block_content pos:start="113:29" pos:end="113:75">

                            <comment type="line" pos:start="111:29" pos:end="111:42">// counting...</comment>

                            <expr_stmt pos:start="113:29" pos:end="113:75"><expr pos:start="113:29" pos:end="113:74"><name pos:start="113:29" pos:end="113:40">total_length</name><operator pos:start="113:41" pos:end="113:42">+=</operator> <sizeof pos:start="113:44" pos:end="113:65">sizeof<argument_list pos:start="113:50" pos:end="113:65">(<argument pos:start="113:51" pos:end="113:64"><expr pos:start="113:51" pos:end="113:64"><name pos:start="113:51" pos:end="113:64">start_sequence</name></expr></argument>)</argument_list></sizeof><operator pos:start="113:66" pos:end="113:66">+</operator><name pos:start="113:67" pos:end="113:74">nal_size</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="115:27" pos:end="135:25">else <block pos:start="115:32" pos:end="135:25">{<block_content pos:start="119:29" pos:end="133:43">

                            <comment type="line" pos:start="117:29" pos:end="117:38">// copying</comment>

                            <expr_stmt pos:start="119:29" pos:end="119:40"><expr pos:start="119:29" pos:end="119:39"><call pos:start="119:29" pos:end="119:39"><name pos:start="119:29" pos:end="119:34">assert</name><argument_list pos:start="119:35" pos:end="119:39">(<argument pos:start="119:36" pos:end="119:38"><expr pos:start="119:36" pos:end="119:38"><name pos:start="119:36" pos:end="119:38">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="121:29" pos:end="121:80"><expr pos:start="121:29" pos:end="121:79"><call pos:start="121:29" pos:end="121:79"><name pos:start="121:29" pos:end="121:34">memcpy</name><argument_list pos:start="121:35" pos:end="121:79">(<argument pos:start="121:36" pos:end="121:38"><expr pos:start="121:36" pos:end="121:38"><name pos:start="121:36" pos:end="121:38">dst</name></expr></argument>, <argument pos:start="121:41" pos:end="121:54"><expr pos:start="121:41" pos:end="121:54"><name pos:start="121:41" pos:end="121:54">start_sequence</name></expr></argument>, <argument pos:start="121:57" pos:end="121:78"><expr pos:start="121:57" pos:end="121:78"><sizeof pos:start="121:57" pos:end="121:78">sizeof<argument_list pos:start="121:63" pos:end="121:78">(<argument pos:start="121:64" pos:end="121:77"><expr pos:start="121:64" pos:end="121:77"><name pos:start="121:64" pos:end="121:77">start_sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="123:29" pos:end="123:57"><expr pos:start="123:29" pos:end="123:56"><name pos:start="123:29" pos:end="123:31">dst</name><operator pos:start="123:32" pos:end="123:33">+=</operator> <sizeof pos:start="123:35" pos:end="123:56">sizeof<argument_list pos:start="123:41" pos:end="123:56">(<argument pos:start="123:42" pos:end="123:55"><expr pos:start="123:42" pos:end="123:55"><name pos:start="123:42" pos:end="123:55">start_sequence</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

                            <expr_stmt pos:start="125:29" pos:end="128:0"><expr pos:start="125:29" pos:end="125:54"><call pos:start="125:29" pos:end="125:54"><name pos:start="125:29" pos:end="125:34">memcpy</name><argument_list pos:start="125:35" pos:end="125:54">(<argument pos:start="125:36" pos:end="125:38"><expr pos:start="125:36" pos:end="125:38"><name pos:start="125:36" pos:end="125:38">dst</name></expr></argument>, <argument pos:start="125:41" pos:end="125:43"><expr pos:start="125:41" pos:end="125:43"><name pos:start="125:41" pos:end="125:43">src</name></expr></argument>, <argument pos:start="125:46" pos:end="125:53"><expr pos:start="125:46" pos:end="125:53"><name pos:start="125:46" pos:end="125:53">nal_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="127:1" pos:end="127:12">#<cpp:directive pos:start="127:2" pos:end="127:6">ifdef</cpp:directive> <name pos:start="127:8" pos:end="127:12">DEBUG</name></cpp:ifdef>

                            <expr_stmt pos:start="129:29" pos:end="132:0"><expr pos:start="129:29" pos:end="129:70"><name pos:start="129:29" pos:end="129:68"><name pos:start="129:29" pos:end="129:32">data</name><operator pos:start="129:33" pos:end="129:34">-&gt;</operator><name pos:start="129:35" pos:end="129:55">packet_types_received</name><index pos:start="129:56" pos:end="129:68">[<expr pos:start="129:57" pos:end="129:67"><operator pos:start="129:57" pos:end="129:57">*</operator><name pos:start="129:58" pos:end="129:60">src</name> <operator pos:start="129:62" pos:end="129:62">&amp;</operator> <literal type="number" pos:start="129:64" pos:end="129:67">0x1f</literal></expr>]</index></name><operator pos:start="129:69" pos:end="129:70">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="131:1" pos:end="131:6">#<cpp:directive pos:start="131:2" pos:end="131:6">endif</cpp:directive></cpp:endif>

                            <expr_stmt pos:start="133:29" pos:end="133:43"><expr pos:start="133:29" pos:end="133:42"><name pos:start="133:29" pos:end="133:31">dst</name><operator pos:start="133:32" pos:end="133:33">+=</operator> <name pos:start="133:35" pos:end="133:42">nal_size</name></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="137:23" pos:end="143:21">else <block pos:start="137:28" pos:end="143:21">{<block_content pos:start="139:25" pos:end="141:86">

                        <expr_stmt pos:start="139:25" pos:end="141:86"><expr pos:start="139:25" pos:end="141:85"><call pos:start="139:25" pos:end="141:85"><name pos:start="139:25" pos:end="139:30">av_log</name><argument_list pos:start="139:31" pos:end="141:85">(<argument pos:start="139:32" pos:end="139:34"><expr pos:start="139:32" pos:end="139:34"><name pos:start="139:32" pos:end="139:34">ctx</name></expr></argument>, <argument pos:start="139:37" pos:end="139:48"><expr pos:start="139:37" pos:end="139:48"><name pos:start="139:37" pos:end="139:48">AV_LOG_ERROR</name></expr></argument>,

                               <argument pos:start="141:32" pos:end="141:65"><expr pos:start="141:32" pos:end="141:65"><literal type="string" pos:start="141:32" pos:end="141:65">"nal size exceeds length: %d %d\n"</literal></expr></argument>, <argument pos:start="141:68" pos:end="141:75"><expr pos:start="141:68" pos:end="141:75"><name pos:start="141:68" pos:end="141:75">nal_size</name></expr></argument>, <argument pos:start="141:78" pos:end="141:84"><expr pos:start="141:78" pos:end="141:84"><name pos:start="141:78" pos:end="141:84">src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>



                    <comment type="line" pos:start="147:21" pos:end="147:45">// eat what we handled...</comment>

                    <expr_stmt pos:start="149:21" pos:end="149:36"><expr pos:start="149:21" pos:end="149:35"><name pos:start="149:21" pos:end="149:23">src</name> <operator pos:start="149:25" pos:end="149:26">+=</operator> <name pos:start="149:28" pos:end="149:35">nal_size</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="151:21" pos:end="151:40"><expr pos:start="151:21" pos:end="151:39"><name pos:start="151:21" pos:end="151:27">src_len</name> <operator pos:start="151:29" pos:end="151:30">-=</operator> <name pos:start="151:32" pos:end="151:39">nal_size</name></expr>;</expr_stmt>



                    <if_stmt pos:start="155:21" pos:end="159:83"><if pos:start="155:21" pos:end="159:83">if <condition pos:start="155:24" pos:end="155:36">(<expr pos:start="155:25" pos:end="155:35"><name pos:start="155:25" pos:end="155:31">src_len</name> <operator pos:start="155:33" pos:end="155:33">&lt;</operator> <literal type="number" pos:start="155:35" pos:end="155:35">0</literal></expr>)</condition><block type="pseudo" pos:start="157:25" pos:end="159:83"><block_content pos:start="157:25" pos:end="159:83">

                        <expr_stmt pos:start="157:25" pos:end="159:83"><expr pos:start="157:25" pos:end="159:82"><call pos:start="157:25" pos:end="159:82"><name pos:start="157:25" pos:end="157:30">av_log</name><argument_list pos:start="157:31" pos:end="159:82">(<argument pos:start="157:32" pos:end="157:34"><expr pos:start="157:32" pos:end="157:34"><name pos:start="157:32" pos:end="157:34">ctx</name></expr></argument>, <argument pos:start="157:37" pos:end="157:48"><expr pos:start="157:37" pos:end="157:48"><name pos:start="157:37" pos:end="157:48">AV_LOG_ERROR</name></expr></argument>,

                               <argument pos:start="159:32" pos:end="159:72"><expr pos:start="159:32" pos:end="159:72"><literal type="string" pos:start="159:32" pos:end="159:72">"Consumed more bytes than we got! (%d)\n"</literal></expr></argument>, <argument pos:start="159:75" pos:end="159:81"><expr pos:start="159:75" pos:end="159:81"><name pos:start="159:75" pos:end="159:81">src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block> while <condition pos:start="161:25" pos:end="161:37">(<expr pos:start="161:26" pos:end="161:36"><name pos:start="161:26" pos:end="161:32">src_len</name> <operator pos:start="161:34" pos:end="161:34">&gt;</operator> <literal type="number" pos:start="161:36" pos:end="161:36">2</literal></expr>)</condition>;</do>      <comment type="line" pos:start="161:45" pos:end="161:83">// because there could be rtp padding..</comment>



                <if_stmt pos:start="165:17" pos:end="177:17"><if pos:start="165:17" pos:end="173:17">if<condition pos:start="165:19" pos:end="165:27">(<expr pos:start="165:20" pos:end="165:26"><name pos:start="165:20" pos:end="165:23">pass</name><operator pos:start="165:24" pos:end="165:25">==</operator><literal type="number" pos:start="165:26" pos:end="165:26">0</literal></expr>)</condition> <block pos:start="165:29" pos:end="173:17">{<block_content pos:start="169:21" pos:end="171:35">

                    <comment type="line" pos:start="167:21" pos:end="167:96">// now we know the total size of the packet (with the start sequences added)</comment>

                    <expr_stmt pos:start="169:21" pos:end="169:53"><expr pos:start="169:21" pos:end="169:52"><call pos:start="169:21" pos:end="169:52"><name pos:start="169:21" pos:end="169:33">av_new_packet</name><argument_list pos:start="169:34" pos:end="169:52">(<argument pos:start="169:35" pos:end="169:37"><expr pos:start="169:35" pos:end="169:37"><name pos:start="169:35" pos:end="169:37">pkt</name></expr></argument>, <argument pos:start="169:40" pos:end="169:51"><expr pos:start="169:40" pos:end="169:51"><name pos:start="169:40" pos:end="169:51">total_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="171:21" pos:end="171:35"><expr pos:start="171:21" pos:end="171:34"><name pos:start="171:21" pos:end="171:23">dst</name><operator pos:start="171:24" pos:end="171:24">=</operator> <name pos:start="171:26" pos:end="171:34"><name pos:start="171:26" pos:end="171:28">pkt</name><operator pos:start="171:29" pos:end="171:30">-&gt;</operator><name pos:start="171:31" pos:end="171:34">data</name></name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="173:19" pos:end="177:17">else <block pos:start="173:24" pos:end="177:17">{<block_content pos:start="175:21" pos:end="175:56">

                    <expr_stmt pos:start="175:21" pos:end="175:56"><expr pos:start="175:21" pos:end="175:55"><call pos:start="175:21" pos:end="175:55"><name pos:start="175:21" pos:end="175:26">assert</name><argument_list pos:start="175:27" pos:end="175:55">(<argument pos:start="175:28" pos:end="175:54"><expr pos:start="175:28" pos:end="175:54"><name pos:start="175:28" pos:end="175:30">dst</name><operator pos:start="175:31" pos:end="175:31">-</operator><name pos:start="175:32" pos:end="175:40"><name pos:start="175:32" pos:end="175:34">pkt</name><operator pos:start="175:35" pos:end="175:36">-&gt;</operator><name pos:start="175:37" pos:end="175:40">data</name></name><operator pos:start="175:41" pos:end="175:42">==</operator><name pos:start="175:43" pos:end="175:54">total_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block>

        <break pos:start="183:9" pos:end="183:14">break;</break>



    <case pos:start="187:5" pos:end="187:12">case <expr pos:start="187:10" pos:end="187:11"><literal type="number" pos:start="187:10" pos:end="187:11">25</literal></expr>:</case>                   <comment type="line" pos:start="187:32" pos:end="187:40">// STAP-B</comment>

    <case pos:start="189:5" pos:end="189:12">case <expr pos:start="189:10" pos:end="189:11"><literal type="number" pos:start="189:10" pos:end="189:11">26</literal></expr>:</case>                   <comment type="line" pos:start="189:32" pos:end="189:41">// MTAP-16</comment>

    <case pos:start="191:5" pos:end="191:12">case <expr pos:start="191:10" pos:end="191:11"><literal type="number" pos:start="191:10" pos:end="191:11">27</literal></expr>:</case>                   <comment type="line" pos:start="191:32" pos:end="191:41">// MTAP-24</comment>

    <case pos:start="193:5" pos:end="193:12">case <expr pos:start="193:10" pos:end="193:11"><literal type="number" pos:start="193:10" pos:end="193:11">29</literal></expr>:</case>                   <comment type="line" pos:start="193:32" pos:end="193:38">// FU-B</comment>

        <expr_stmt pos:start="195:9" pos:end="199:21"><expr pos:start="195:9" pos:end="199:20"><call pos:start="195:9" pos:end="199:20"><name pos:start="195:9" pos:end="195:14">av_log</name><argument_list pos:start="195:15" pos:end="199:20">(<argument pos:start="195:16" pos:end="195:18"><expr pos:start="195:16" pos:end="195:18"><name pos:start="195:16" pos:end="195:18">ctx</name></expr></argument>, <argument pos:start="195:21" pos:end="195:32"><expr pos:start="195:21" pos:end="195:32"><name pos:start="195:21" pos:end="195:32">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="197:16" pos:end="197:74"><expr pos:start="197:16" pos:end="197:74"><literal type="string" pos:start="197:16" pos:end="197:74">"Unhandled type (%d) (See RFC for implementation details\n"</literal></expr></argument>,

               <argument pos:start="199:16" pos:end="199:19"><expr pos:start="199:16" pos:end="199:19"><name pos:start="199:16" pos:end="199:19">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:19"><expr pos:start="201:9" pos:end="201:18"><name pos:start="201:9" pos:end="201:14">result</name><operator pos:start="201:15" pos:end="201:15">=</operator> <operator pos:start="201:17" pos:end="201:17">-</operator><literal type="number" pos:start="201:18" pos:end="201:18">1</literal></expr>;</expr_stmt>

        <break pos:start="203:9" pos:end="203:14">break;</break>



    <case pos:start="207:5" pos:end="207:12">case <expr pos:start="207:10" pos:end="207:11"><literal type="number" pos:start="207:10" pos:end="207:11">28</literal></expr>:</case>                   <comment type="line" pos:start="207:32" pos:end="207:55">// FU-A (fragmented nal)</comment>

        <expr_stmt pos:start="209:9" pos:end="209:14"><expr pos:start="209:9" pos:end="209:13"><name pos:start="209:9" pos:end="209:11">buf</name><operator pos:start="209:12" pos:end="209:13">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:14"><expr pos:start="211:9" pos:end="211:13"><name pos:start="211:9" pos:end="211:11">len</name><operator pos:start="211:12" pos:end="211:13">--</operator></expr>;</expr_stmt>                  <comment type="line" pos:start="211:33" pos:end="211:56">// skip the fu_indicator</comment>

        <block pos:start="213:9" pos:end="275:9">{<block_content pos:start="217:13" pos:end="273:13">

            <comment type="line" pos:start="215:13" pos:end="215:81">// these are the same as above, we just redo them here for clarity...</comment>

            <decl_stmt pos:start="217:13" pos:end="217:39"><decl pos:start="217:13" pos:end="217:38"><type pos:start="217:13" pos:end="217:19"><name pos:start="217:13" pos:end="217:19">uint8_t</name></type> <name pos:start="217:21" pos:end="217:32">fu_indicator</name> <init pos:start="217:34" pos:end="217:38">= <expr pos:start="217:36" pos:end="217:38"><name pos:start="217:36" pos:end="217:38">nal</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="219:13" pos:end="219:37"><decl pos:start="219:13" pos:end="219:36"><type pos:start="219:13" pos:end="219:19"><name pos:start="219:13" pos:end="219:19">uint8_t</name></type> <name pos:start="219:21" pos:end="219:29">fu_header</name> <init pos:start="219:31" pos:end="219:36">= <expr pos:start="219:33" pos:end="219:36"><operator pos:start="219:33" pos:end="219:33">*</operator><name pos:start="219:34" pos:end="219:36">buf</name></expr></init></decl>;</decl_stmt>   <comment type="line" pos:start="219:41" pos:end="219:62">// read the fu_header.</comment>

            <decl_stmt pos:start="221:13" pos:end="221:47"><decl pos:start="221:13" pos:end="221:46"><type pos:start="221:13" pos:end="221:19"><name pos:start="221:13" pos:end="221:19">uint8_t</name></type> <name pos:start="221:21" pos:end="221:29">start_bit</name> <init pos:start="221:31" pos:end="221:46">= <expr pos:start="221:33" pos:end="221:46"><name pos:start="221:33" pos:end="221:41">fu_header</name> <operator pos:start="221:43" pos:end="221:44">&gt;&gt;</operator> <literal type="number" pos:start="221:46" pos:end="221:46">7</literal></expr></init></decl>;</decl_stmt>

<comment type="line" pos:start="223:1" pos:end="223:56">//            uint8_t end_bit = (fu_header &amp; 0x40) &gt;&gt; 6;</comment>

            <decl_stmt pos:start="225:13" pos:end="225:50"><decl pos:start="225:13" pos:end="225:49"><type pos:start="225:13" pos:end="225:19"><name pos:start="225:13" pos:end="225:19">uint8_t</name></type> <name pos:start="225:21" pos:end="225:28">nal_type</name> <init pos:start="225:30" pos:end="225:49">= <expr pos:start="225:32" pos:end="225:49"><operator pos:start="225:32" pos:end="225:32">(</operator><name pos:start="225:33" pos:end="225:41">fu_header</name> <operator pos:start="225:43" pos:end="225:43">&amp;</operator> <literal type="number" pos:start="225:45" pos:end="225:48">0x1f</literal><operator pos:start="225:49" pos:end="225:49">)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="227:13" pos:end="227:38"><decl pos:start="227:13" pos:end="227:37"><type pos:start="227:13" pos:end="227:19"><name pos:start="227:13" pos:end="227:19">uint8_t</name></type> <name pos:start="227:21" pos:end="227:37">reconstructed_nal</name></decl>;</decl_stmt>



            <comment type="line" pos:start="231:13" pos:end="231:74">// reconstruct this packet's true nal; only the data follows..</comment>

            <expr_stmt pos:start="233:13" pos:end="233:54"><expr pos:start="233:13" pos:end="233:53"><name pos:start="233:13" pos:end="233:29">reconstructed_nal</name> <operator pos:start="233:31" pos:end="233:31">=</operator> <name pos:start="233:33" pos:end="233:44">fu_indicator</name> <operator pos:start="233:46" pos:end="233:46">&amp;</operator> <operator pos:start="233:48" pos:end="233:48">(</operator><literal type="number" pos:start="233:49" pos:end="233:52">0xe0</literal><operator pos:start="233:53" pos:end="233:53">)</operator></expr>;</expr_stmt>  <comment type="line" pos:start="233:57" pos:end="233:130">// the original nal forbidden bit and NRI are stored in this packet's nal;</comment>

            <expr_stmt pos:start="235:13" pos:end="235:42"><expr pos:start="235:13" pos:end="235:41"><name pos:start="235:13" pos:end="235:29">reconstructed_nal</name> <operator pos:start="235:31" pos:end="235:32">|=</operator> <name pos:start="235:34" pos:end="235:41">nal_type</name></expr>;</expr_stmt>



            <comment type="line" pos:start="239:13" pos:end="239:36">// skip the fu_header...</comment>

            <expr_stmt pos:start="241:13" pos:end="241:18"><expr pos:start="241:13" pos:end="241:17"><name pos:start="241:13" pos:end="241:15">buf</name><operator pos:start="241:16" pos:end="241:17">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="248:0"><expr pos:start="243:13" pos:end="243:17"><name pos:start="243:13" pos:end="243:15">len</name><operator pos:start="243:16" pos:end="243:17">--</operator></expr>;</expr_stmt>



<cpp:ifdef pos:start="247:1" pos:end="247:12">#<cpp:directive pos:start="247:2" pos:end="247:6">ifdef</cpp:directive> <name pos:start="247:8" pos:end="247:12">DEBUG</name></cpp:ifdef>

            <if_stmt pos:start="249:13" pos:end="254:0"><if pos:start="249:13" pos:end="254:0">if <condition pos:start="249:16" pos:end="249:26">(<expr pos:start="249:17" pos:end="249:25"><name pos:start="249:17" pos:end="249:25">start_bit</name></expr>)</condition><block type="pseudo" pos:start="251:17" pos:end="254:0"><block_content pos:start="251:17" pos:end="254:0">

                <expr_stmt pos:start="251:17" pos:end="254:0"><expr pos:start="251:17" pos:end="251:55"><name pos:start="251:17" pos:end="251:53"><name pos:start="251:17" pos:end="251:20">data</name><operator pos:start="251:21" pos:end="251:22">-&gt;</operator><name pos:start="251:23" pos:end="251:43">packet_types_received</name><index pos:start="251:44" pos:end="251:53">[<expr pos:start="251:45" pos:end="251:52"><name pos:start="251:45" pos:end="251:52">nal_type</name></expr>]</index></name><operator pos:start="251:54" pos:end="251:55">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="253:1" pos:end="253:6">#<cpp:directive pos:start="253:2" pos:end="253:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="255:13" pos:end="273:13"><if pos:start="255:13" pos:end="267:13">if<condition pos:start="255:15" pos:end="255:25">(<expr pos:start="255:16" pos:end="255:24"><name pos:start="255:16" pos:end="255:24">start_bit</name></expr>)</condition> <block pos:start="255:27" pos:end="267:13">{<block_content pos:start="259:17" pos:end="265:79">

                <comment type="line" pos:start="257:17" pos:end="257:76">// copy in the start sequence, and the reconstructed nal....</comment>

                <expr_stmt pos:start="259:17" pos:end="259:75"><expr pos:start="259:17" pos:end="259:74"><call pos:start="259:17" pos:end="259:74"><name pos:start="259:17" pos:end="259:29">av_new_packet</name><argument_list pos:start="259:30" pos:end="259:74">(<argument pos:start="259:31" pos:end="259:33"><expr pos:start="259:31" pos:end="259:33"><name pos:start="259:31" pos:end="259:33">pkt</name></expr></argument>, <argument pos:start="259:36" pos:end="259:73"><expr pos:start="259:36" pos:end="259:73"><sizeof pos:start="259:36" pos:end="259:57">sizeof<argument_list pos:start="259:42" pos:end="259:57">(<argument pos:start="259:43" pos:end="259:56"><expr pos:start="259:43" pos:end="259:56"><name pos:start="259:43" pos:end="259:56">start_sequence</name></expr></argument>)</argument_list></sizeof><operator pos:start="259:58" pos:end="259:58">+</operator><sizeof pos:start="259:59" pos:end="259:69">sizeof<argument_list pos:start="259:65" pos:end="259:69">(<argument pos:start="259:66" pos:end="259:68"><expr pos:start="259:66" pos:end="259:68"><name pos:start="259:66" pos:end="259:68">nal</name></expr></argument>)</argument_list></sizeof><operator pos:start="259:70" pos:end="259:70">+</operator><name pos:start="259:71" pos:end="259:73">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="261:17" pos:end="261:74"><expr pos:start="261:17" pos:end="261:73"><call pos:start="261:17" pos:end="261:73"><name pos:start="261:17" pos:end="261:22">memcpy</name><argument_list pos:start="261:23" pos:end="261:73">(<argument pos:start="261:24" pos:end="261:32"><expr pos:start="261:24" pos:end="261:32"><name pos:start="261:24" pos:end="261:32"><name pos:start="261:24" pos:end="261:26">pkt</name><operator pos:start="261:27" pos:end="261:28">-&gt;</operator><name pos:start="261:29" pos:end="261:32">data</name></name></expr></argument>, <argument pos:start="261:35" pos:end="261:48"><expr pos:start="261:35" pos:end="261:48"><name pos:start="261:35" pos:end="261:48">start_sequence</name></expr></argument>, <argument pos:start="261:51" pos:end="261:72"><expr pos:start="261:51" pos:end="261:72"><sizeof pos:start="261:51" pos:end="261:72">sizeof<argument_list pos:start="261:57" pos:end="261:72">(<argument pos:start="261:58" pos:end="261:71"><expr pos:start="261:58" pos:end="261:71"><name pos:start="261:58" pos:end="261:71">start_sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="263:17" pos:end="263:69"><expr pos:start="263:17" pos:end="263:68"><name pos:start="263:17" pos:end="263:49"><name pos:start="263:17" pos:end="263:19">pkt</name><operator pos:start="263:20" pos:end="263:21">-&gt;</operator><name pos:start="263:22" pos:end="263:25">data</name><index pos:start="263:26" pos:end="263:49">[<expr pos:start="263:27" pos:end="263:48"><sizeof pos:start="263:27" pos:end="263:48">sizeof<argument_list pos:start="263:33" pos:end="263:48">(<argument pos:start="263:34" pos:end="263:47"><expr pos:start="263:34" pos:end="263:47"><name pos:start="263:34" pos:end="263:47">start_sequence</name></expr></argument>)</argument_list></sizeof></expr>]</index></name><operator pos:start="263:50" pos:end="263:50">=</operator> <name pos:start="263:52" pos:end="263:68">reconstructed_nal</name></expr>;</expr_stmt>

                <expr_stmt pos:start="265:17" pos:end="265:79"><expr pos:start="265:17" pos:end="265:78"><call pos:start="265:17" pos:end="265:78"><name pos:start="265:17" pos:end="265:22">memcpy</name><argument_list pos:start="265:23" pos:end="265:78">(<argument pos:start="265:24" pos:end="265:67"><expr pos:start="265:24" pos:end="265:67"><name pos:start="265:24" pos:end="265:32"><name pos:start="265:24" pos:end="265:26">pkt</name><operator pos:start="265:27" pos:end="265:28">-&gt;</operator><name pos:start="265:29" pos:end="265:32">data</name></name><operator pos:start="265:33" pos:end="265:33">+</operator><sizeof pos:start="265:34" pos:end="265:55">sizeof<argument_list pos:start="265:40" pos:end="265:55">(<argument pos:start="265:41" pos:end="265:54"><expr pos:start="265:41" pos:end="265:54"><name pos:start="265:41" pos:end="265:54">start_sequence</name></expr></argument>)</argument_list></sizeof><operator pos:start="265:56" pos:end="265:56">+</operator><sizeof pos:start="265:57" pos:end="265:67">sizeof<argument_list pos:start="265:63" pos:end="265:67">(<argument pos:start="265:64" pos:end="265:66"><expr pos:start="265:64" pos:end="265:66"><name pos:start="265:64" pos:end="265:66">nal</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="265:70" pos:end="265:72"><expr pos:start="265:70" pos:end="265:72"><name pos:start="265:70" pos:end="265:72">buf</name></expr></argument>, <argument pos:start="265:75" pos:end="265:77"><expr pos:start="265:75" pos:end="265:77"><name pos:start="265:75" pos:end="265:77">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="267:15" pos:end="273:13">else <block pos:start="267:20" pos:end="273:13">{<block_content pos:start="269:17" pos:end="271:44">

                <expr_stmt pos:start="269:17" pos:end="269:40"><expr pos:start="269:17" pos:end="269:39"><call pos:start="269:17" pos:end="269:39"><name pos:start="269:17" pos:end="269:29">av_new_packet</name><argument_list pos:start="269:30" pos:end="269:39">(<argument pos:start="269:31" pos:end="269:33"><expr pos:start="269:31" pos:end="269:33"><name pos:start="269:31" pos:end="269:33">pkt</name></expr></argument>, <argument pos:start="269:36" pos:end="269:38"><expr pos:start="269:36" pos:end="269:38"><name pos:start="269:36" pos:end="269:38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="271:17" pos:end="271:44"><expr pos:start="271:17" pos:end="271:43"><call pos:start="271:17" pos:end="271:43"><name pos:start="271:17" pos:end="271:22">memcpy</name><argument_list pos:start="271:23" pos:end="271:43">(<argument pos:start="271:24" pos:end="271:32"><expr pos:start="271:24" pos:end="271:32"><name pos:start="271:24" pos:end="271:32"><name pos:start="271:24" pos:end="271:26">pkt</name><operator pos:start="271:27" pos:end="271:28">-&gt;</operator><name pos:start="271:29" pos:end="271:32">data</name></name></expr></argument>, <argument pos:start="271:35" pos:end="271:37"><expr pos:start="271:35" pos:end="271:37"><name pos:start="271:35" pos:end="271:37">buf</name></expr></argument>, <argument pos:start="271:40" pos:end="271:42"><expr pos:start="271:40" pos:end="271:42"><name pos:start="271:40" pos:end="271:42">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="277:9" pos:end="277:14">break;</break>



    <case pos:start="281:5" pos:end="281:12">case <expr pos:start="281:10" pos:end="281:11"><literal type="number" pos:start="281:10" pos:end="281:11">30</literal></expr>:</case>                   <comment type="line" pos:start="281:32" pos:end="281:43">// undefined</comment>

    <case pos:start="283:5" pos:end="283:12">case <expr pos:start="283:10" pos:end="283:11"><literal type="number" pos:start="283:10" pos:end="283:11">31</literal></expr>:</case>                   <comment type="line" pos:start="283:32" pos:end="283:43">// undefined</comment>

    <default pos:start="285:5" pos:end="285:12">default:</default>

        <expr_stmt pos:start="287:9" pos:end="287:63"><expr pos:start="287:9" pos:end="287:62"><call pos:start="287:9" pos:end="287:62"><name pos:start="287:9" pos:end="287:14">av_log</name><argument_list pos:start="287:15" pos:end="287:62">(<argument pos:start="287:16" pos:end="287:18"><expr pos:start="287:16" pos:end="287:18"><name pos:start="287:16" pos:end="287:18">ctx</name></expr></argument>, <argument pos:start="287:21" pos:end="287:32"><expr pos:start="287:21" pos:end="287:32"><name pos:start="287:21" pos:end="287:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="287:35" pos:end="287:55"><expr pos:start="287:35" pos:end="287:55"><literal type="string" pos:start="287:35" pos:end="287:55">"Undefined type (%d)"</literal></expr></argument>, <argument pos:start="287:58" pos:end="287:61"><expr pos:start="287:58" pos:end="287:61"><name pos:start="287:58" pos:end="287:61">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:19"><expr pos:start="289:9" pos:end="289:18"><name pos:start="289:9" pos:end="289:14">result</name><operator pos:start="289:15" pos:end="289:15">=</operator> <operator pos:start="289:17" pos:end="289:17">-</operator><literal type="number" pos:start="289:18" pos:end="289:18">1</literal></expr>;</expr_stmt>

        <break pos:start="291:9" pos:end="291:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="297:5" pos:end="297:34"><expr pos:start="297:5" pos:end="297:33"><name pos:start="297:5" pos:end="297:21"><name pos:start="297:5" pos:end="297:7">pkt</name><operator pos:start="297:8" pos:end="297:9">-&gt;</operator><name pos:start="297:10" pos:end="297:21">stream_index</name></name> <operator pos:start="297:23" pos:end="297:23">=</operator> <name pos:start="297:25" pos:end="297:33"><name pos:start="297:25" pos:end="297:26">st</name><operator pos:start="297:27" pos:end="297:28">-&gt;</operator><name pos:start="297:29" pos:end="297:33">index</name></name></expr>;</expr_stmt>



    <return pos:start="301:5" pos:end="301:18">return <expr pos:start="301:12" pos:end="301:17"><name pos:start="301:12" pos:end="301:17">result</name></expr>;</return>

</block_content>}</block></function>
</unit>
