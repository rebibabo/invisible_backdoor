<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8772.c" pos:tabs="8"><function pos:start="1:1" pos:end="102:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:17">kvm_arch_init</name><parameter_list pos:start="1:18" pos:end="1:30">(<parameter pos:start="1:19" pos:end="1:29"><decl pos:start="1:19" pos:end="1:29"><type pos:start="1:19" pos:end="1:28"><name pos:start="1:19" pos:end="1:26">KVMState</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:29">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="102:1">{<block_content pos:start="5:5" pos:end="100:13">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint64_t</name></type> <name pos:start="5:14" pos:end="5:26">identity_base</name> <init pos:start="5:28" pos:end="5:39">= <expr pos:start="5:30" pos:end="5:39"><literal type="number" pos:start="5:30" pos:end="5:39">0xfffbc000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:18">utsname</name></name></type> <name pos:start="9:20" pos:end="9:26">utsname</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:36"><expr pos:start="13:5" pos:end="13:35"><name pos:start="13:5" pos:end="13:7">ret</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:35"><name pos:start="13:11" pos:end="13:32">kvm_get_supported_msrs</name><argument_list pos:start="13:33" pos:end="13:35">(<argument pos:start="13:34" pos:end="13:34"><expr pos:start="13:34" pos:end="13:34"><name pos:start="13:34" pos:end="13:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:16">(<expr pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:13">&lt;</operator> <literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr>)</condition> <block pos:start="15:18" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:19">

        <return pos:start="17:9" pos:end="17:19">return <expr pos:start="17:16" pos:end="17:18"><name pos:start="17:16" pos:end="17:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:20"><expr pos:start="23:5" pos:end="23:19"><call pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:9">uname</name><argument_list pos:start="23:10" pos:end="23:19">(<argument pos:start="23:11" pos:end="23:18"><expr pos:start="23:11" pos:end="23:18"><operator pos:start="23:11" pos:end="23:11">&amp;</operator><name pos:start="23:12" pos:end="23:18">utsname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="52:0"><expr pos:start="25:5" pos:end="25:62"><name pos:start="25:5" pos:end="25:21">lm_capable_kernel</name> <operator pos:start="25:23" pos:end="25:23">=</operator> <call pos:start="25:25" pos:end="25:57"><name pos:start="25:25" pos:end="25:30">strcmp</name><argument_list pos:start="25:31" pos:end="25:57">(<argument pos:start="25:32" pos:end="25:46"><expr pos:start="25:32" pos:end="25:46"><name pos:start="25:32" pos:end="25:46"><name pos:start="25:32" pos:end="25:38">utsname</name><operator pos:start="25:39" pos:end="25:39">.</operator><name pos:start="25:40" pos:end="25:46">machine</name></name></expr></argument>, <argument pos:start="25:49" pos:end="25:56"><expr pos:start="25:49" pos:end="25:56"><literal type="string" pos:start="25:49" pos:end="25:56">"x86_64"</literal></expr></argument>)</argument_list></call> <operator pos:start="25:59" pos:end="25:60">==</operator> <literal type="number" pos:start="25:62" pos:end="25:62">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="49:7">/*

     * On older Intel CPUs, KVM uses vm86 mode to emulate 16-bit code directly.

     * In order to use vm86 mode, an EPT identity map and a TSS  are needed.

     * Since these must be part of guest physical memory, we need to allocate

     * them, both by setting their start addresses in the kernel and by

     * creating a corresponding e820 entry. We need 4 pages before the BIOS.

     *

     * Older KVM versions may not support setting the identity map base. In

     * that case we need to stick with the default, i.e. a 256K maximum BIOS

     * size.

     */</comment>

<cpp:ifdef pos:start="51:1" pos:end="51:36">#<cpp:directive pos:start="51:2" pos:end="51:6">ifdef</cpp:directive> <name pos:start="51:8" pos:end="51:36">KVM_CAP_SET_IDENTITY_MAP_ADDR</name></cpp:ifdef>

    <if_stmt pos:start="53:5" pos:end="72:0"><if pos:start="53:5" pos:end="72:0">if <condition pos:start="53:8" pos:end="53:62">(<expr pos:start="53:9" pos:end="53:61"><call pos:start="53:9" pos:end="53:61"><name pos:start="53:9" pos:end="53:27">kvm_check_extension</name><argument_list pos:start="53:28" pos:end="53:61">(<argument pos:start="53:29" pos:end="53:29"><expr pos:start="53:29" pos:end="53:29"><name pos:start="53:29" pos:end="53:29">s</name></expr></argument>, <argument pos:start="53:32" pos:end="53:60"><expr pos:start="53:32" pos:end="53:60"><name pos:start="53:32" pos:end="53:60">KVM_CAP_SET_IDENTITY_MAP_ADDR</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:64" pos:end="72:0">{<block_content pos:start="57:9" pos:end="67:9">

        <comment type="block" pos:start="55:9" pos:end="55:38">/* Allows up to 16M BIOSes. */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:35"><expr pos:start="57:9" pos:end="57:34"><name pos:start="57:9" pos:end="57:21">identity_base</name> <operator pos:start="57:23" pos:end="57:23">=</operator> <literal type="number" pos:start="57:25" pos:end="57:34">0xfeffc000</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:73"><expr pos:start="61:9" pos:end="61:72"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:72"><name pos:start="61:15" pos:end="61:26">kvm_vm_ioctl</name><argument_list pos:start="61:27" pos:end="61:72">(<argument pos:start="61:28" pos:end="61:28"><expr pos:start="61:28" pos:end="61:28"><name pos:start="61:28" pos:end="61:28">s</name></expr></argument>, <argument pos:start="61:31" pos:end="61:55"><expr pos:start="61:31" pos:end="61:55"><name pos:start="61:31" pos:end="61:55">KVM_SET_IDENTITY_MAP_ADDR</name></expr></argument>, <argument pos:start="61:58" pos:end="61:71"><expr pos:start="61:58" pos:end="61:71"><operator pos:start="61:58" pos:end="61:58">&amp;</operator><name pos:start="61:59" pos:end="61:71">identity_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:20">(<expr pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:17">&lt;</operator> <literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr>)</condition> <block pos:start="63:22" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:23">

            <return pos:start="65:13" pos:end="65:23">return <expr pos:start="65:20" pos:end="65:22"><name pos:start="65:20" pos:end="65:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="73:5" pos:end="73:55">/* Set TSS base one page after EPT identity map. */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:68"><expr pos:start="75:5" pos:end="75:67"><name pos:start="75:5" pos:end="75:7">ret</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="75:67"><name pos:start="75:11" pos:end="75:22">kvm_vm_ioctl</name><argument_list pos:start="75:23" pos:end="75:67">(<argument pos:start="75:24" pos:end="75:24"><expr pos:start="75:24" pos:end="75:24"><name pos:start="75:24" pos:end="75:24">s</name></expr></argument>, <argument pos:start="75:27" pos:end="75:42"><expr pos:start="75:27" pos:end="75:42"><name pos:start="75:27" pos:end="75:42">KVM_SET_TSS_ADDR</name></expr></argument>, <argument pos:start="75:45" pos:end="75:66"><expr pos:start="75:45" pos:end="75:66"><name pos:start="75:45" pos:end="75:57">identity_base</name> <operator pos:start="75:59" pos:end="75:59">+</operator> <literal type="number" pos:start="75:61" pos:end="75:66">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:16">(<expr pos:start="77:9" pos:end="77:15"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:13">&lt;</operator> <literal type="number" pos:start="77:15" pos:end="77:15">0</literal></expr>)</condition> <block pos:start="77:18" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:19">

        <return pos:start="79:9" pos:end="79:19">return <expr pos:start="79:16" pos:end="79:18"><name pos:start="79:16" pos:end="79:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:62">/* Tell fw_cfg to notify the BIOS to reserve the range. */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:63"><expr pos:start="87:5" pos:end="87:62"><name pos:start="87:5" pos:end="87:7">ret</name> <operator pos:start="87:9" pos:end="87:9">=</operator> <call pos:start="87:11" pos:end="87:62"><name pos:start="87:11" pos:end="87:24">e820_add_entry</name><argument_list pos:start="87:25" pos:end="87:62">(<argument pos:start="87:26" pos:end="87:38"><expr pos:start="87:26" pos:end="87:38"><name pos:start="87:26" pos:end="87:38">identity_base</name></expr></argument>, <argument pos:start="87:41" pos:end="87:46"><expr pos:start="87:41" pos:end="87:46"><literal type="number" pos:start="87:41" pos:end="87:46">0x4000</literal></expr></argument>, <argument pos:start="87:49" pos:end="87:61"><expr pos:start="87:49" pos:end="87:61"><name pos:start="87:49" pos:end="87:61">E820_RESERVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:16">(<expr pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">&lt;</operator> <literal type="number" pos:start="89:15" pos:end="89:15">0</literal></expr>)</condition> <block pos:start="89:18" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:19">

        <expr_stmt pos:start="91:9" pos:end="91:60"><expr pos:start="91:9" pos:end="91:59"><call pos:start="91:9" pos:end="91:59"><name pos:start="91:9" pos:end="91:15">fprintf</name><argument_list pos:start="91:16" pos:end="91:59">(<argument pos:start="91:17" pos:end="91:22"><expr pos:start="91:17" pos:end="91:22"><name pos:start="91:17" pos:end="91:22">stderr</name></expr></argument>, <argument pos:start="91:25" pos:end="91:58"><expr pos:start="91:25" pos:end="91:58"><literal type="string" pos:start="91:25" pos:end="91:58">"e820_add_entry() table is full\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:19">return <expr pos:start="93:16" pos:end="93:18"><name pos:start="93:16" pos:end="93:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>




    <return pos:start="100:5" pos:end="100:13">return <expr pos:start="100:12" pos:end="100:12"><literal type="number" pos:start="100:12" pos:end="100:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
