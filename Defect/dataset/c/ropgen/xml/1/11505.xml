<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11505.c" pos:tabs="8"><function pos:start="1:1" pos:end="333:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">external_snapshot_prepare</name><parameter_list pos:start="1:38" pos:end="3:51">(<parameter pos:start="1:39" pos:end="1:60"><decl pos:start="1:39" pos:end="1:60"><type pos:start="1:39" pos:end="1:60"><name pos:start="1:39" pos:end="1:52">BlkActionState</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:60">common</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:50"><decl pos:start="3:39" pos:end="3:50"><type pos:start="3:39" pos:end="3:50"><name pos:start="3:39" pos:end="3:43">Error</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier><modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:50">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="333:1">{<block_content pos:start="7:5" pos:end="331:35">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">flags</name> <init pos:start="7:15" pos:end="7:17">= <expr pos:start="7:17" pos:end="7:17"><literal type="number" pos:start="7:17" pos:end="7:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">QDict</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:18">options</name> <init pos:start="9:20" pos:end="9:25">= <expr pos:start="9:22" pos:end="9:25"><name pos:start="9:22" pos:end="9:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="13:5" pos:end="13:73">/* Device and node name of the image to generate the snapshot from */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:22">device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:25">node_name</name></decl>;</decl_stmt>

    <comment type="block" pos:start="19:5" pos:end="19:62">/* Reference to the new image (for 'blockdev-snapshot') */</comment>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:28">snapshot_ref</name></decl>;</decl_stmt>

    <comment type="block" pos:start="23:5" pos:end="23:67">/* File name of the new image (for 'blockdev-snapshot-sync') */</comment>

    <decl_stmt pos:start="25:5" pos:end="25:31"><decl pos:start="25:5" pos:end="25:30"><type pos:start="25:5" pos:end="25:16"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:14">char</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:30">new_image_file</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="29:78"><decl pos:start="27:5" pos:end="29:77"><type pos:start="27:5" pos:end="27:27"><name pos:start="27:5" pos:end="27:25">ExternalSnapshotState</name> <modifier pos:start="27:27" pos:end="27:27">*</modifier></type><name pos:start="27:28" pos:end="27:32">state</name> <init pos:start="27:34" pos:end="29:77">=

                             <expr pos:start="29:30" pos:end="29:77"><call pos:start="29:30" pos:end="29:77"><name pos:start="29:30" pos:end="29:38">DO_UPCAST</name><argument_list pos:start="29:39" pos:end="29:77">(<argument pos:start="29:40" pos:end="29:60"><expr pos:start="29:40" pos:end="29:60"><name pos:start="29:40" pos:end="29:60">ExternalSnapshotState</name></expr></argument>, <argument pos:start="29:63" pos:end="29:68"><expr pos:start="29:63" pos:end="29:68"><name pos:start="29:63" pos:end="29:68">common</name></expr></argument>, <argument pos:start="29:71" pos:end="29:76"><expr pos:start="29:71" pos:end="29:76"><name pos:start="29:71" pos:end="29:76">common</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:47"><decl pos:start="31:5" pos:end="31:46"><type pos:start="31:5" pos:end="31:23"><name pos:start="31:5" pos:end="31:21">TransactionAction</name> <modifier pos:start="31:23" pos:end="31:23">*</modifier></type><name pos:start="31:24" pos:end="31:29">action</name> <init pos:start="31:31" pos:end="31:46">= <expr pos:start="31:33" pos:end="31:46"><name pos:start="31:33" pos:end="31:46"><name pos:start="31:33" pos:end="31:38">common</name><operator pos:start="31:39" pos:end="31:40">-&gt;</operator><name pos:start="31:41" pos:end="31:46">action</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="35:5" pos:end="37:51">/* 'blockdev-snapshot' and 'blockdev-snapshot-sync' have similar

     * purpose but a different set of parameters */</comment>

    <switch pos:start="39:5" pos:end="81:5">switch <condition pos:start="39:12" pos:end="39:25">(<expr pos:start="39:13" pos:end="39:24"><name pos:start="39:13" pos:end="39:24"><name pos:start="39:13" pos:end="39:18">action</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:24">type</name></name></expr>)</condition> <block pos:start="39:27" pos:end="81:5">{<block_content pos:start="41:5" pos:end="79:31">

    <case pos:start="41:5" pos:end="41:51">case <expr pos:start="41:10" pos:end="41:50"><name pos:start="41:10" pos:end="41:50">TRANSACTION_ACTION_KIND_BLOCKDEV_SNAPSHOT</name></expr>:</case>

        <block pos:start="43:9" pos:end="55:9">{<block_content pos:start="45:13" pos:end="53:38">

            <decl_stmt pos:start="45:13" pos:end="45:67"><decl pos:start="45:13" pos:end="45:66"><type pos:start="45:13" pos:end="45:30"><name pos:start="45:13" pos:end="45:28">BlockdevSnapshot</name> <modifier pos:start="45:30" pos:end="45:30">*</modifier></type><name pos:start="45:31" pos:end="45:31">s</name> <init pos:start="45:33" pos:end="45:66">= <expr pos:start="45:35" pos:end="45:66"><name pos:start="45:35" pos:end="45:66"><name pos:start="45:35" pos:end="45:40">action</name><operator pos:start="45:41" pos:end="45:42">-&gt;</operator><name pos:start="45:43" pos:end="45:43">u</name><operator pos:start="45:44" pos:end="45:44">.</operator><name pos:start="45:45" pos:end="45:61">blockdev_snapshot</name><operator pos:start="45:62" pos:end="45:62">.</operator><name pos:start="45:63" pos:end="45:66">data</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:29"><expr pos:start="47:13" pos:end="47:28"><name pos:start="47:13" pos:end="47:18">device</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <name pos:start="47:22" pos:end="47:28"><name pos:start="47:22" pos:end="47:22">s</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:28">node</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:32"><expr pos:start="49:13" pos:end="49:31"><name pos:start="49:13" pos:end="49:21">node_name</name> <operator pos:start="49:23" pos:end="49:23">=</operator> <name pos:start="49:25" pos:end="49:31"><name pos:start="49:25" pos:end="49:25">s</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:31">node</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:34"><expr pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:26">new_image_file</name> <operator pos:start="51:28" pos:end="51:28">=</operator> <name pos:start="51:30" pos:end="51:33">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:38"><expr pos:start="53:13" pos:end="53:37"><name pos:start="53:13" pos:end="53:24">snapshot_ref</name> <operator pos:start="53:26" pos:end="53:26">=</operator> <name pos:start="53:28" pos:end="53:37"><name pos:start="53:28" pos:end="53:28">s</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:37">overlay</name></name></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:56">case <expr pos:start="59:10" pos:end="59:55"><name pos:start="59:10" pos:end="59:55">TRANSACTION_ACTION_KIND_BLOCKDEV_SNAPSHOT_SYNC</name></expr>:</case>

        <block pos:start="61:9" pos:end="73:9">{<block_content pos:start="63:13" pos:end="71:32">

            <decl_stmt pos:start="63:13" pos:end="63:76"><decl pos:start="63:13" pos:end="63:75"><type pos:start="63:13" pos:end="63:34"><name pos:start="63:13" pos:end="63:32">BlockdevSnapshotSync</name> <modifier pos:start="63:34" pos:end="63:34">*</modifier></type><name pos:start="63:35" pos:end="63:35">s</name> <init pos:start="63:37" pos:end="63:75">= <expr pos:start="63:39" pos:end="63:75"><name pos:start="63:39" pos:end="63:75"><name pos:start="63:39" pos:end="63:44">action</name><operator pos:start="63:45" pos:end="63:46">-&gt;</operator><name pos:start="63:47" pos:end="63:47">u</name><operator pos:start="63:48" pos:end="63:48">.</operator><name pos:start="63:49" pos:end="63:70">blockdev_snapshot_sync</name><operator pos:start="63:71" pos:end="63:71">.</operator><name pos:start="63:72" pos:end="63:75">data</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:54"><expr pos:start="65:13" pos:end="65:53"><name pos:start="65:13" pos:end="65:18">device</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <ternary pos:start="65:22" pos:end="65:53"><condition pos:start="65:22" pos:end="65:36"><expr pos:start="65:22" pos:end="65:34"><name pos:start="65:22" pos:end="65:34"><name pos:start="65:22" pos:end="65:22">s</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:34">has_device</name></name></expr> ?</condition><then pos:start="65:38" pos:end="65:46"> <expr pos:start="65:38" pos:end="65:46"><name pos:start="65:38" pos:end="65:46"><name pos:start="65:38" pos:end="65:38">s</name><operator pos:start="65:39" pos:end="65:40">-&gt;</operator><name pos:start="65:41" pos:end="65:46">device</name></name></expr> </then><else pos:start="65:48" pos:end="65:53">: <expr pos:start="65:50" pos:end="65:53"><name pos:start="65:50" pos:end="65:53">NULL</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:63"><expr pos:start="67:13" pos:end="67:62"><name pos:start="67:13" pos:end="67:21">node_name</name> <operator pos:start="67:23" pos:end="67:23">=</operator> <ternary pos:start="67:25" pos:end="67:62"><condition pos:start="67:25" pos:end="67:42"><expr pos:start="67:25" pos:end="67:40"><name pos:start="67:25" pos:end="67:40"><name pos:start="67:25" pos:end="67:25">s</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:40">has_node_name</name></name></expr> ?</condition><then pos:start="67:44" pos:end="67:55"> <expr pos:start="67:44" pos:end="67:55"><name pos:start="67:44" pos:end="67:55"><name pos:start="67:44" pos:end="67:44">s</name><operator pos:start="67:45" pos:end="67:46">-&gt;</operator><name pos:start="67:47" pos:end="67:55">node_name</name></name></expr> </then><else pos:start="67:57" pos:end="67:62">: <expr pos:start="67:59" pos:end="67:62"><name pos:start="67:59" pos:end="67:62">NULL</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:46"><expr pos:start="69:13" pos:end="69:45"><name pos:start="69:13" pos:end="69:26">new_image_file</name> <operator pos:start="69:28" pos:end="69:28">=</operator> <name pos:start="69:30" pos:end="69:45"><name pos:start="69:30" pos:end="69:30">s</name><operator pos:start="69:31" pos:end="69:32">-&gt;</operator><name pos:start="69:33" pos:end="69:45">snapshot_file</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:32"><expr pos:start="71:13" pos:end="71:31"><name pos:start="71:13" pos:end="71:24">snapshot_ref</name> <operator pos:start="71:26" pos:end="71:26">=</operator> <name pos:start="71:28" pos:end="71:31">NULL</name></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <default pos:start="77:5" pos:end="77:12">default:</default>

        <expr_stmt pos:start="79:9" pos:end="79:31"><expr pos:start="79:9" pos:end="79:30"><call pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:28">g_assert_not_reached</name><argument_list pos:start="79:29" pos:end="79:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <comment type="block" pos:start="85:5" pos:end="85:26">/* start processing */</comment>

    <if_stmt pos:start="87:5" pos:end="91:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:55">(<expr pos:start="87:9" pos:end="87:54"><call pos:start="87:9" pos:end="87:50"><name pos:start="87:9" pos:end="87:36">action_check_completion_mode</name><argument_list pos:start="87:37" pos:end="87:50">(<argument pos:start="87:38" pos:end="87:43"><expr pos:start="87:38" pos:end="87:43"><name pos:start="87:38" pos:end="87:43">common</name></expr></argument>, <argument pos:start="87:46" pos:end="87:49"><expr pos:start="87:46" pos:end="87:49"><name pos:start="87:46" pos:end="87:49">errp</name></expr></argument>)</argument_list></call> <operator pos:start="87:52" pos:end="87:52">&lt;</operator> <literal type="number" pos:start="87:54" pos:end="87:54">0</literal></expr>)</condition> <block pos:start="87:57" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:15">

        <return pos:start="89:9" pos:end="89:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:60"><expr pos:start="95:5" pos:end="95:59"><name pos:start="95:5" pos:end="95:17"><name pos:start="95:5" pos:end="95:9">state</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:17">old_bs</name></name> <operator pos:start="95:19" pos:end="95:19">=</operator> <call pos:start="95:21" pos:end="95:59"><name pos:start="95:21" pos:end="95:34">bdrv_lookup_bs</name><argument_list pos:start="95:35" pos:end="95:59">(<argument pos:start="95:36" pos:end="95:41"><expr pos:start="95:36" pos:end="95:41"><name pos:start="95:36" pos:end="95:41">device</name></expr></argument>, <argument pos:start="95:44" pos:end="95:52"><expr pos:start="95:44" pos:end="95:52"><name pos:start="95:44" pos:end="95:52">node_name</name></expr></argument>, <argument pos:start="95:55" pos:end="95:58"><expr pos:start="95:55" pos:end="95:58"><name pos:start="95:55" pos:end="95:58">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:23">(<expr pos:start="97:9" pos:end="97:22"><operator pos:start="97:9" pos:end="97:9">!</operator><name pos:start="97:10" pos:end="97:22"><name pos:start="97:10" pos:end="97:14">state</name><operator pos:start="97:15" pos:end="97:16">-&gt;</operator><name pos:start="97:17" pos:end="97:22">old_bs</name></name></expr>)</condition> <block pos:start="97:25" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:15">

        <return pos:start="99:9" pos:end="99:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:72">/* Acquire AioContext now so any threads operating on old_bs stop */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:61"><expr pos:start="107:5" pos:end="107:60"><name pos:start="107:5" pos:end="107:22"><name pos:start="107:5" pos:end="107:9">state</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:22">aio_context</name></name> <operator pos:start="107:24" pos:end="107:24">=</operator> <call pos:start="107:26" pos:end="107:60"><name pos:start="107:26" pos:end="107:45">bdrv_get_aio_context</name><argument_list pos:start="107:46" pos:end="107:60">(<argument pos:start="107:47" pos:end="107:59"><expr pos:start="107:47" pos:end="107:59"><name pos:start="107:47" pos:end="107:59"><name pos:start="107:47" pos:end="107:51">state</name><operator pos:start="107:52" pos:end="107:53">-&gt;</operator><name pos:start="107:54" pos:end="107:59">old_bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:44"><expr pos:start="109:5" pos:end="109:43"><call pos:start="109:5" pos:end="109:43"><name pos:start="109:5" pos:end="109:23">aio_context_acquire</name><argument_list pos:start="109:24" pos:end="109:43">(<argument pos:start="109:25" pos:end="109:42"><expr pos:start="109:25" pos:end="109:42"><name pos:start="109:25" pos:end="109:42"><name pos:start="109:25" pos:end="109:29">state</name><operator pos:start="109:30" pos:end="109:31">-&gt;</operator><name pos:start="109:32" pos:end="109:42">aio_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:38"><expr pos:start="111:5" pos:end="111:37"><call pos:start="111:5" pos:end="111:37"><name pos:start="111:5" pos:end="111:22">bdrv_drained_begin</name><argument_list pos:start="111:23" pos:end="111:37">(<argument pos:start="111:24" pos:end="111:36"><expr pos:start="111:24" pos:end="111:36"><name pos:start="111:24" pos:end="111:36"><name pos:start="111:24" pos:end="111:28">state</name><operator pos:start="111:29" pos:end="111:30">-&gt;</operator><name pos:start="111:31" pos:end="111:36">old_bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="115:5" pos:end="121:5"><if pos:start="115:5" pos:end="121:5">if <condition pos:start="115:8" pos:end="115:41">(<expr pos:start="115:9" pos:end="115:40"><operator pos:start="115:9" pos:end="115:9">!</operator><call pos:start="115:10" pos:end="115:40"><name pos:start="115:10" pos:end="115:25">bdrv_is_inserted</name><argument_list pos:start="115:26" pos:end="115:40">(<argument pos:start="115:27" pos:end="115:39"><expr pos:start="115:27" pos:end="115:39"><name pos:start="115:27" pos:end="115:39"><name pos:start="115:27" pos:end="115:31">state</name><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:39">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:43" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:15">

        <expr_stmt pos:start="117:9" pos:end="117:60"><expr pos:start="117:9" pos:end="117:59"><call pos:start="117:9" pos:end="117:59"><name pos:start="117:9" pos:end="117:18">error_setg</name><argument_list pos:start="117:19" pos:end="117:59">(<argument pos:start="117:20" pos:end="117:23"><expr pos:start="117:20" pos:end="117:23"><name pos:start="117:20" pos:end="117:23">errp</name></expr></argument>, <argument pos:start="117:26" pos:end="117:50"><expr pos:start="117:26" pos:end="117:50"><name pos:start="117:26" pos:end="117:50">QERR_DEVICE_HAS_NO_MEDIUM</name></expr></argument>, <argument pos:start="117:53" pos:end="117:58"><expr pos:start="117:53" pos:end="117:58"><name pos:start="117:53" pos:end="117:58">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="119:9" pos:end="119:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="125:5" pos:end="131:5"><if pos:start="125:5" pos:end="131:5">if <condition pos:start="125:8" pos:end="127:66">(<expr pos:start="125:9" pos:end="127:65"><call pos:start="125:9" pos:end="127:65"><name pos:start="125:9" pos:end="125:26">bdrv_op_is_blocked</name><argument_list pos:start="125:27" pos:end="127:65">(<argument pos:start="125:28" pos:end="125:40"><expr pos:start="125:28" pos:end="125:40"><name pos:start="125:28" pos:end="125:40"><name pos:start="125:28" pos:end="125:32">state</name><operator pos:start="125:33" pos:end="125:34">-&gt;</operator><name pos:start="125:35" pos:end="125:40">old_bs</name></name></expr></argument>,

                           <argument pos:start="127:28" pos:end="127:58"><expr pos:start="127:28" pos:end="127:58"><name pos:start="127:28" pos:end="127:58">BLOCK_OP_TYPE_EXTERNAL_SNAPSHOT</name></expr></argument>, <argument pos:start="127:61" pos:end="127:64"><expr pos:start="127:61" pos:end="127:64"><name pos:start="127:61" pos:end="127:64">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:68" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:15">

        <return pos:start="129:9" pos:end="129:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="135:5" pos:end="145:5"><if pos:start="135:5" pos:end="145:5">if <condition pos:start="135:8" pos:end="135:42">(<expr pos:start="135:9" pos:end="135:41"><operator pos:start="135:9" pos:end="135:9">!</operator><call pos:start="135:10" pos:end="135:41"><name pos:start="135:10" pos:end="135:26">bdrv_is_read_only</name><argument_list pos:start="135:27" pos:end="135:41">(<argument pos:start="135:28" pos:end="135:40"><expr pos:start="135:28" pos:end="135:40"><name pos:start="135:28" pos:end="135:40"><name pos:start="135:28" pos:end="135:32">state</name><operator pos:start="135:33" pos:end="135:34">-&gt;</operator><name pos:start="135:35" pos:end="135:40">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:44" pos:end="145:5">{<block_content pos:start="137:9" pos:end="143:9">

        <if_stmt pos:start="137:9" pos:end="143:9"><if pos:start="137:9" pos:end="143:9">if <condition pos:start="137:12" pos:end="137:38">(<expr pos:start="137:13" pos:end="137:37"><call pos:start="137:13" pos:end="137:37"><name pos:start="137:13" pos:end="137:22">bdrv_flush</name><argument_list pos:start="137:23" pos:end="137:37">(<argument pos:start="137:24" pos:end="137:36"><expr pos:start="137:24" pos:end="137:36"><name pos:start="137:24" pos:end="137:36"><name pos:start="137:24" pos:end="137:28">state</name><operator pos:start="137:29" pos:end="137:30">-&gt;</operator><name pos:start="137:31" pos:end="137:36">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:40" pos:end="143:9">{<block_content pos:start="139:13" pos:end="141:19">

            <expr_stmt pos:start="139:13" pos:end="139:44"><expr pos:start="139:13" pos:end="139:43"><call pos:start="139:13" pos:end="139:43"><name pos:start="139:13" pos:end="139:22">error_setg</name><argument_list pos:start="139:23" pos:end="139:43">(<argument pos:start="139:24" pos:end="139:27"><expr pos:start="139:24" pos:end="139:27"><name pos:start="139:24" pos:end="139:27">errp</name></expr></argument>, <argument pos:start="139:30" pos:end="139:42"><expr pos:start="139:30" pos:end="139:42"><name pos:start="139:30" pos:end="139:42">QERR_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="141:13" pos:end="141:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="149:5" pos:end="155:5"><if pos:start="149:5" pos:end="155:5">if <condition pos:start="149:8" pos:end="149:49">(<expr pos:start="149:9" pos:end="149:48"><operator pos:start="149:9" pos:end="149:9">!</operator><call pos:start="149:10" pos:end="149:48"><name pos:start="149:10" pos:end="149:33">bdrv_is_first_non_filter</name><argument_list pos:start="149:34" pos:end="149:48">(<argument pos:start="149:35" pos:end="149:47"><expr pos:start="149:35" pos:end="149:47"><name pos:start="149:35" pos:end="149:47"><name pos:start="149:35" pos:end="149:39">state</name><operator pos:start="149:40" pos:end="149:41">-&gt;</operator><name pos:start="149:42" pos:end="149:47">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="149:51" pos:end="155:5">{<block_content pos:start="151:9" pos:end="153:15">

        <expr_stmt pos:start="151:9" pos:end="151:60"><expr pos:start="151:9" pos:end="151:59"><call pos:start="151:9" pos:end="151:59"><name pos:start="151:9" pos:end="151:18">error_setg</name><argument_list pos:start="151:19" pos:end="151:59">(<argument pos:start="151:20" pos:end="151:23"><expr pos:start="151:20" pos:end="151:23"><name pos:start="151:20" pos:end="151:23">errp</name></expr></argument>, <argument pos:start="151:26" pos:end="151:46"><expr pos:start="151:26" pos:end="151:46"><name pos:start="151:26" pos:end="151:46">QERR_FEATURE_DISABLED</name></expr></argument>, <argument pos:start="151:49" pos:end="151:58"><expr pos:start="151:49" pos:end="151:58"><literal type="string" pos:start="151:49" pos:end="151:58">"snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="153:9" pos:end="153:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="159:5" pos:end="251:5"><if pos:start="159:5" pos:end="251:5">if <condition pos:start="159:8" pos:end="159:71">(<expr pos:start="159:9" pos:end="159:70"><name pos:start="159:9" pos:end="159:20"><name pos:start="159:9" pos:end="159:14">action</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:20">type</name></name> <operator pos:start="159:22" pos:end="159:23">==</operator> <name pos:start="159:25" pos:end="159:70">TRANSACTION_ACTION_KIND_BLOCKDEV_SNAPSHOT_SYNC</name></expr>)</condition> <block pos:start="159:73" pos:end="251:5">{<block_content pos:start="161:9" pos:end="249:35">

        <decl_stmt pos:start="161:9" pos:end="161:72"><decl pos:start="161:9" pos:end="161:71"><type pos:start="161:9" pos:end="161:30"><name pos:start="161:9" pos:end="161:28">BlockdevSnapshotSync</name> <modifier pos:start="161:30" pos:end="161:30">*</modifier></type><name pos:start="161:31" pos:end="161:31">s</name> <init pos:start="161:33" pos:end="161:71">= <expr pos:start="161:35" pos:end="161:71"><name pos:start="161:35" pos:end="161:71"><name pos:start="161:35" pos:end="161:40">action</name><operator pos:start="161:41" pos:end="161:42">-&gt;</operator><name pos:start="161:43" pos:end="161:43">u</name><operator pos:start="161:44" pos:end="161:44">.</operator><name pos:start="161:45" pos:end="161:66">blockdev_snapshot_sync</name><operator pos:start="161:67" pos:end="161:67">.</operator><name pos:start="161:68" pos:end="161:71">data</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="163:9" pos:end="163:65"><decl pos:start="163:9" pos:end="163:64"><type pos:start="163:9" pos:end="163:20"><specifier pos:start="163:9" pos:end="163:13">const</specifier> <name pos:start="163:15" pos:end="163:18">char</name> <modifier pos:start="163:20" pos:end="163:20">*</modifier></type><name pos:start="163:21" pos:end="163:26">format</name> <init pos:start="163:28" pos:end="163:64">= <expr pos:start="163:30" pos:end="163:64"><ternary pos:start="163:30" pos:end="163:64"><condition pos:start="163:30" pos:end="163:44"><expr pos:start="163:30" pos:end="163:42"><name pos:start="163:30" pos:end="163:42"><name pos:start="163:30" pos:end="163:30">s</name><operator pos:start="163:31" pos:end="163:32">-&gt;</operator><name pos:start="163:33" pos:end="163:42">has_format</name></name></expr> ?</condition><then pos:start="163:46" pos:end="163:54"> <expr pos:start="163:46" pos:end="163:54"><name pos:start="163:46" pos:end="163:54"><name pos:start="163:46" pos:end="163:46">s</name><operator pos:start="163:47" pos:end="163:48">-&gt;</operator><name pos:start="163:49" pos:end="163:54">format</name></name></expr> </then><else pos:start="163:56" pos:end="163:64">: <expr pos:start="163:58" pos:end="163:64"><literal type="string" pos:start="163:58" pos:end="163:64">"qcow2"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="165:9" pos:end="165:31"><decl pos:start="165:9" pos:end="165:30"><type pos:start="165:9" pos:end="165:25"><name pos:start="165:9" pos:end="165:25"><name pos:start="165:9" pos:end="165:12">enum</name> <name pos:start="165:14" pos:end="165:25">NewImageMode</name></name></type> <name pos:start="165:27" pos:end="165:30">mode</name></decl>;</decl_stmt>

        <decl_stmt pos:start="167:9" pos:end="169:69"><decl pos:start="167:9" pos:end="169:68"><type pos:start="167:9" pos:end="167:20"><specifier pos:start="167:9" pos:end="167:13">const</specifier> <name pos:start="167:15" pos:end="167:18">char</name> <modifier pos:start="167:20" pos:end="167:20">*</modifier></type><name pos:start="167:21" pos:end="167:38">snapshot_node_name</name> <init pos:start="167:40" pos:end="169:68">=

            <expr pos:start="169:13" pos:end="169:68"><ternary pos:start="169:13" pos:end="169:68"><condition pos:start="169:13" pos:end="169:39"><expr pos:start="169:13" pos:end="169:37"><name pos:start="169:13" pos:end="169:37"><name pos:start="169:13" pos:end="169:13">s</name><operator pos:start="169:14" pos:end="169:15">-&gt;</operator><name pos:start="169:16" pos:end="169:37">has_snapshot_node_name</name></name></expr> ?</condition><then pos:start="169:41" pos:end="169:61"> <expr pos:start="169:41" pos:end="169:61"><name pos:start="169:41" pos:end="169:61"><name pos:start="169:41" pos:end="169:41">s</name><operator pos:start="169:42" pos:end="169:43">-&gt;</operator><name pos:start="169:44" pos:end="169:61">snapshot_node_name</name></name></expr> </then><else pos:start="169:63" pos:end="169:68">: <expr pos:start="169:65" pos:end="169:68"><name pos:start="169:65" pos:end="169:68">NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="173:9" pos:end="179:9"><if pos:start="173:9" pos:end="179:9">if <condition pos:start="173:12" pos:end="173:45">(<expr pos:start="173:13" pos:end="173:44"><name pos:start="173:13" pos:end="173:21">node_name</name> <operator pos:start="173:23" pos:end="173:24">&amp;&amp;</operator> <operator pos:start="173:26" pos:end="173:26">!</operator><name pos:start="173:27" pos:end="173:44">snapshot_node_name</name></expr>)</condition> <block pos:start="173:47" pos:end="179:9">{<block_content pos:start="175:13" pos:end="177:19">

            <expr_stmt pos:start="175:13" pos:end="175:63"><expr pos:start="175:13" pos:end="175:62"><call pos:start="175:13" pos:end="175:62"><name pos:start="175:13" pos:end="175:22">error_setg</name><argument_list pos:start="175:23" pos:end="175:62">(<argument pos:start="175:24" pos:end="175:27"><expr pos:start="175:24" pos:end="175:27"><name pos:start="175:24" pos:end="175:27">errp</name></expr></argument>, <argument pos:start="175:30" pos:end="175:61"><expr pos:start="175:30" pos:end="175:61"><literal type="string" pos:start="175:30" pos:end="175:61">"New snapshot node name missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="177:13" pos:end="177:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="183:9" pos:end="191:9"><if pos:start="183:9" pos:end="191:9">if <condition pos:start="183:12" pos:end="185:73">(<expr pos:start="183:13" pos:end="185:72"><name pos:start="183:13" pos:end="183:30">snapshot_node_name</name> <operator pos:start="183:32" pos:end="183:33">&amp;&amp;</operator>

            <call pos:start="185:13" pos:end="185:72"><name pos:start="185:13" pos:end="185:26">bdrv_lookup_bs</name><argument_list pos:start="185:27" pos:end="185:72">(<argument pos:start="185:28" pos:end="185:45"><expr pos:start="185:28" pos:end="185:45"><name pos:start="185:28" pos:end="185:45">snapshot_node_name</name></expr></argument>, <argument pos:start="185:48" pos:end="185:65"><expr pos:start="185:48" pos:end="185:65"><name pos:start="185:48" pos:end="185:65">snapshot_node_name</name></expr></argument>, <argument pos:start="185:68" pos:end="185:71"><expr pos:start="185:68" pos:end="185:71"><name pos:start="185:68" pos:end="185:71">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="185:75" pos:end="191:9">{<block_content pos:start="187:13" pos:end="189:19">

            <expr_stmt pos:start="187:13" pos:end="187:70"><expr pos:start="187:13" pos:end="187:69"><call pos:start="187:13" pos:end="187:69"><name pos:start="187:13" pos:end="187:22">error_setg</name><argument_list pos:start="187:23" pos:end="187:69">(<argument pos:start="187:24" pos:end="187:27"><expr pos:start="187:24" pos:end="187:27"><name pos:start="187:24" pos:end="187:27">errp</name></expr></argument>, <argument pos:start="187:30" pos:end="187:68"><expr pos:start="187:30" pos:end="187:68"><literal type="string" pos:start="187:30" pos:end="187:68">"New snapshot node name already in use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="189:13" pos:end="189:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="195:9" pos:end="195:42"><expr pos:start="195:9" pos:end="195:41"><name pos:start="195:9" pos:end="195:13">flags</name> <operator pos:start="195:15" pos:end="195:15">=</operator> <name pos:start="195:17" pos:end="195:41"><name pos:start="195:17" pos:end="195:21">state</name><operator pos:start="195:22" pos:end="195:23">-&gt;</operator><name pos:start="195:24" pos:end="195:29">old_bs</name><operator pos:start="195:30" pos:end="195:31">-&gt;</operator><name pos:start="195:32" pos:end="195:41">open_flags</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:78"><expr pos:start="197:9" pos:end="197:77"><name pos:start="197:9" pos:end="197:13">flags</name> <operator pos:start="197:15" pos:end="197:16">&amp;=</operator> <operator pos:start="197:18" pos:end="197:18">~</operator><operator pos:start="197:19" pos:end="197:19">(</operator><name pos:start="197:20" pos:end="197:34">BDRV_O_SNAPSHOT</name> <operator pos:start="197:36" pos:end="197:36">|</operator> <name pos:start="197:38" pos:end="197:54">BDRV_O_NO_BACKING</name> <operator pos:start="197:56" pos:end="197:56">|</operator> <name pos:start="197:58" pos:end="197:76">BDRV_O_COPY_ON_READ</name><operator pos:start="197:77" pos:end="197:77">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="201:9" pos:end="201:45">/* create new image w/backing file */</comment>

        <expr_stmt pos:start="203:9" pos:end="203:69"><expr pos:start="203:9" pos:end="203:68"><name pos:start="203:9" pos:end="203:12">mode</name> <operator pos:start="203:14" pos:end="203:14">=</operator> <ternary pos:start="203:16" pos:end="203:68"><condition pos:start="203:16" pos:end="203:28"><expr pos:start="203:16" pos:end="203:26"><name pos:start="203:16" pos:end="203:26"><name pos:start="203:16" pos:end="203:16">s</name><operator pos:start="203:17" pos:end="203:18">-&gt;</operator><name pos:start="203:19" pos:end="203:26">has_mode</name></name></expr> ?</condition><then pos:start="203:30" pos:end="203:36"> <expr pos:start="203:30" pos:end="203:36"><name pos:start="203:30" pos:end="203:36"><name pos:start="203:30" pos:end="203:30">s</name><operator pos:start="203:31" pos:end="203:32">-&gt;</operator><name pos:start="203:33" pos:end="203:36">mode</name></name></expr> </then><else pos:start="203:38" pos:end="203:68">: <expr pos:start="203:40" pos:end="203:68"><name pos:start="203:40" pos:end="203:68">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="205:9" pos:end="233:9"><if pos:start="205:9" pos:end="233:9">if <condition pos:start="205:12" pos:end="205:44">(<expr pos:start="205:13" pos:end="205:43"><name pos:start="205:13" pos:end="205:16">mode</name> <operator pos:start="205:18" pos:end="205:19">!=</operator> <name pos:start="205:21" pos:end="205:43">NEW_IMAGE_MODE_EXISTING</name></expr>)</condition> <block pos:start="205:46" pos:end="233:9">{<block_content pos:start="207:13" pos:end="231:13">

            <decl_stmt pos:start="207:13" pos:end="207:57"><decl pos:start="207:13" pos:end="207:56"><type pos:start="207:13" pos:end="207:19"><name pos:start="207:13" pos:end="207:19">int64_t</name></type> <name pos:start="207:21" pos:end="207:24">size</name> <init pos:start="207:26" pos:end="207:56">= <expr pos:start="207:28" pos:end="207:56"><call pos:start="207:28" pos:end="207:56"><name pos:start="207:28" pos:end="207:41">bdrv_getlength</name><argument_list pos:start="207:42" pos:end="207:56">(<argument pos:start="207:43" pos:end="207:55"><expr pos:start="207:43" pos:end="207:55"><name pos:start="207:43" pos:end="207:55"><name pos:start="207:43" pos:end="207:47">state</name><operator pos:start="207:48" pos:end="207:49">-&gt;</operator><name pos:start="207:50" pos:end="207:55">old_bs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="209:13" pos:end="215:13"><if pos:start="209:13" pos:end="215:13">if <condition pos:start="209:16" pos:end="209:25">(<expr pos:start="209:17" pos:end="209:24"><name pos:start="209:17" pos:end="209:20">size</name> <operator pos:start="209:22" pos:end="209:22">&lt;</operator> <literal type="number" pos:start="209:24" pos:end="209:24">0</literal></expr>)</condition> <block pos:start="209:27" pos:end="215:13">{<block_content pos:start="211:17" pos:end="213:23">

                <expr_stmt pos:start="211:17" pos:end="211:71"><expr pos:start="211:17" pos:end="211:70"><call pos:start="211:17" pos:end="211:70"><name pos:start="211:17" pos:end="211:32">error_setg_errno</name><argument_list pos:start="211:33" pos:end="211:70">(<argument pos:start="211:34" pos:end="211:37"><expr pos:start="211:34" pos:end="211:37"><name pos:start="211:34" pos:end="211:37">errp</name></expr></argument>, <argument pos:start="211:40" pos:end="211:44"><expr pos:start="211:40" pos:end="211:44"><operator pos:start="211:40" pos:end="211:40">-</operator><name pos:start="211:41" pos:end="211:44">size</name></expr></argument>, <argument pos:start="211:47" pos:end="211:69"><expr pos:start="211:47" pos:end="211:69"><literal type="string" pos:start="211:47" pos:end="211:69">"bdrv_getlength failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="213:17" pos:end="213:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="217:13" pos:end="223:66"><expr pos:start="217:13" pos:end="223:65"><call pos:start="217:13" pos:end="223:65"><name pos:start="217:13" pos:end="217:27">bdrv_img_create</name><argument_list pos:start="217:28" pos:end="223:65">(<argument pos:start="217:29" pos:end="217:42"><expr pos:start="217:29" pos:end="217:42"><name pos:start="217:29" pos:end="217:42">new_image_file</name></expr></argument>, <argument pos:start="217:45" pos:end="217:50"><expr pos:start="217:45" pos:end="217:50"><name pos:start="217:45" pos:end="217:50">format</name></expr></argument>,

                            <argument pos:start="219:29" pos:end="219:51"><expr pos:start="219:29" pos:end="219:51"><name pos:start="219:29" pos:end="219:51"><name pos:start="219:29" pos:end="219:33">state</name><operator pos:start="219:34" pos:end="219:35">-&gt;</operator><name pos:start="219:36" pos:end="219:41">old_bs</name><operator pos:start="219:42" pos:end="219:43">-&gt;</operator><name pos:start="219:44" pos:end="219:51">filename</name></name></expr></argument>,

                            <argument pos:start="221:29" pos:end="221:59"><expr pos:start="221:29" pos:end="221:59"><name pos:start="221:29" pos:end="221:59"><name pos:start="221:29" pos:end="221:33">state</name><operator pos:start="221:34" pos:end="221:35">-&gt;</operator><name pos:start="221:36" pos:end="221:41">old_bs</name><operator pos:start="221:42" pos:end="221:43">-&gt;</operator><name pos:start="221:44" pos:end="221:46">drv</name><operator pos:start="221:47" pos:end="221:48">-&gt;</operator><name pos:start="221:49" pos:end="221:59">format_name</name></name></expr></argument>,

                            <argument pos:start="223:29" pos:end="223:32"><expr pos:start="223:29" pos:end="223:32"><name pos:start="223:29" pos:end="223:32">NULL</name></expr></argument>, <argument pos:start="223:35" pos:end="223:38"><expr pos:start="223:35" pos:end="223:38"><name pos:start="223:35" pos:end="223:38">size</name></expr></argument>, <argument pos:start="223:41" pos:end="223:45"><expr pos:start="223:41" pos:end="223:45"><name pos:start="223:41" pos:end="223:45">flags</name></expr></argument>, <argument pos:start="223:48" pos:end="223:52"><expr pos:start="223:48" pos:end="223:52"><name pos:start="223:48" pos:end="223:52">false</name></expr></argument>, <argument pos:start="223:55" pos:end="223:64"><expr pos:start="223:55" pos:end="223:64"><operator pos:start="223:55" pos:end="223:55">&amp;</operator><name pos:start="223:56" pos:end="223:64">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="225:13" pos:end="231:13"><if pos:start="225:13" pos:end="231:13">if <condition pos:start="225:16" pos:end="225:26">(<expr pos:start="225:17" pos:end="225:25"><name pos:start="225:17" pos:end="225:25">local_err</name></expr>)</condition> <block pos:start="225:28" pos:end="231:13">{<block_content pos:start="227:17" pos:end="229:23">

                <expr_stmt pos:start="227:17" pos:end="227:49"><expr pos:start="227:17" pos:end="227:48"><call pos:start="227:17" pos:end="227:48"><name pos:start="227:17" pos:end="227:31">error_propagate</name><argument_list pos:start="227:32" pos:end="227:48">(<argument pos:start="227:33" pos:end="227:36"><expr pos:start="227:33" pos:end="227:36"><name pos:start="227:33" pos:end="227:36">errp</name></expr></argument>, <argument pos:start="227:39" pos:end="227:47"><expr pos:start="227:39" pos:end="227:47"><name pos:start="227:39" pos:end="227:47">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="229:17" pos:end="229:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="237:9" pos:end="237:30"><expr pos:start="237:9" pos:end="237:29"><name pos:start="237:9" pos:end="237:15">options</name> <operator pos:start="237:17" pos:end="237:17">=</operator> <call pos:start="237:19" pos:end="237:29"><name pos:start="237:19" pos:end="237:27">qdict_new</name><argument_list pos:start="237:28" pos:end="237:29">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="239:9" pos:end="243:9"><if pos:start="239:9" pos:end="243:9">if <condition pos:start="239:12" pos:end="239:38">(<expr pos:start="239:13" pos:end="239:37"><name pos:start="239:13" pos:end="239:37"><name pos:start="239:13" pos:end="239:13">s</name><operator pos:start="239:14" pos:end="239:15">-&gt;</operator><name pos:start="239:16" pos:end="239:37">has_snapshot_node_name</name></name></expr>)</condition> <block pos:start="239:40" pos:end="243:9">{<block_content pos:start="241:13" pos:end="241:68">

            <expr_stmt pos:start="241:13" pos:end="241:68"><expr pos:start="241:13" pos:end="241:67"><call pos:start="241:13" pos:end="241:67"><name pos:start="241:13" pos:end="241:25">qdict_put_str</name><argument_list pos:start="241:26" pos:end="241:67">(<argument pos:start="241:27" pos:end="241:33"><expr pos:start="241:27" pos:end="241:33"><name pos:start="241:27" pos:end="241:33">options</name></expr></argument>, <argument pos:start="241:36" pos:end="241:46"><expr pos:start="241:36" pos:end="241:46"><literal type="string" pos:start="241:36" pos:end="241:46">"node-name"</literal></expr></argument>, <argument pos:start="241:49" pos:end="241:66"><expr pos:start="241:49" pos:end="241:66"><name pos:start="241:49" pos:end="241:66">snapshot_node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:49"><expr pos:start="245:9" pos:end="245:48"><call pos:start="245:9" pos:end="245:48"><name pos:start="245:9" pos:end="245:21">qdict_put_str</name><argument_list pos:start="245:22" pos:end="245:48">(<argument pos:start="245:23" pos:end="245:29"><expr pos:start="245:23" pos:end="245:29"><name pos:start="245:23" pos:end="245:29">options</name></expr></argument>, <argument pos:start="245:32" pos:end="245:39"><expr pos:start="245:32" pos:end="245:39"><literal type="string" pos:start="245:32" pos:end="245:39">"driver"</literal></expr></argument>, <argument pos:start="245:42" pos:end="245:47"><expr pos:start="245:42" pos:end="245:47"><name pos:start="245:42" pos:end="245:47">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="249:9" pos:end="249:35"><expr pos:start="249:9" pos:end="249:34"><name pos:start="249:9" pos:end="249:13">flags</name> <operator pos:start="249:15" pos:end="249:16">|=</operator> <name pos:start="249:18" pos:end="249:34">BDRV_O_NO_BACKING</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="255:5" pos:end="257:36"><expr pos:start="255:5" pos:end="257:35"><name pos:start="255:5" pos:end="255:17"><name pos:start="255:5" pos:end="255:9">state</name><operator pos:start="255:10" pos:end="255:11">-&gt;</operator><name pos:start="255:12" pos:end="255:17">new_bs</name></name> <operator pos:start="255:19" pos:end="255:19">=</operator> <call pos:start="255:21" pos:end="257:35"><name pos:start="255:21" pos:end="255:29">bdrv_open</name><argument_list pos:start="255:30" pos:end="257:35">(<argument pos:start="255:31" pos:end="255:44"><expr pos:start="255:31" pos:end="255:44"><name pos:start="255:31" pos:end="255:44">new_image_file</name></expr></argument>, <argument pos:start="255:47" pos:end="255:58"><expr pos:start="255:47" pos:end="255:58"><name pos:start="255:47" pos:end="255:58">snapshot_ref</name></expr></argument>, <argument pos:start="255:61" pos:end="255:67"><expr pos:start="255:61" pos:end="255:67"><name pos:start="255:61" pos:end="255:67">options</name></expr></argument>, <argument pos:start="255:70" pos:end="255:74"><expr pos:start="255:70" pos:end="255:74"><name pos:start="255:70" pos:end="255:74">flags</name></expr></argument>,

                              <argument pos:start="257:31" pos:end="257:34"><expr pos:start="257:31" pos:end="257:34"><name pos:start="257:31" pos:end="257:34">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="259:5" pos:end="259:67">/* We will manually add the backing_hd field to the bs later */</comment>

    <if_stmt pos:start="261:5" pos:end="265:5"><if pos:start="261:5" pos:end="265:5">if <condition pos:start="261:8" pos:end="261:23">(<expr pos:start="261:9" pos:end="261:22"><operator pos:start="261:9" pos:end="261:9">!</operator><name pos:start="261:10" pos:end="261:22"><name pos:start="261:10" pos:end="261:14">state</name><operator pos:start="261:15" pos:end="261:16">-&gt;</operator><name pos:start="261:17" pos:end="261:22">new_bs</name></name></expr>)</condition> <block pos:start="261:25" pos:end="265:5">{<block_content pos:start="263:9" pos:end="263:15">

        <return pos:start="263:9" pos:end="263:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="269:5" pos:end="275:5"><if pos:start="269:5" pos:end="275:5">if <condition pos:start="269:8" pos:end="269:36">(<expr pos:start="269:9" pos:end="269:35"><call pos:start="269:9" pos:end="269:35"><name pos:start="269:9" pos:end="269:20">bdrv_has_blk</name><argument_list pos:start="269:21" pos:end="269:35">(<argument pos:start="269:22" pos:end="269:34"><expr pos:start="269:22" pos:end="269:34"><name pos:start="269:22" pos:end="269:34"><name pos:start="269:22" pos:end="269:26">state</name><operator pos:start="269:27" pos:end="269:28">-&gt;</operator><name pos:start="269:29" pos:end="269:34">new_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="269:38" pos:end="275:5">{<block_content pos:start="271:9" pos:end="273:15">

        <expr_stmt pos:start="271:9" pos:end="271:59"><expr pos:start="271:9" pos:end="271:58"><call pos:start="271:9" pos:end="271:58"><name pos:start="271:9" pos:end="271:18">error_setg</name><argument_list pos:start="271:19" pos:end="271:58">(<argument pos:start="271:20" pos:end="271:23"><expr pos:start="271:20" pos:end="271:23"><name pos:start="271:20" pos:end="271:23">errp</name></expr></argument>, <argument pos:start="271:26" pos:end="271:57"><expr pos:start="271:26" pos:end="271:57"><literal type="string" pos:start="271:26" pos:end="271:57">"The snapshot is already in use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="273:9" pos:end="273:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="279:5" pos:end="285:5"><if pos:start="279:5" pos:end="285:5">if <condition pos:start="279:8" pos:end="281:33">(<expr pos:start="279:9" pos:end="281:32"><call pos:start="279:9" pos:end="281:32"><name pos:start="279:9" pos:end="279:26">bdrv_op_is_blocked</name><argument_list pos:start="279:27" pos:end="281:32">(<argument pos:start="279:28" pos:end="279:40"><expr pos:start="279:28" pos:end="279:40"><name pos:start="279:28" pos:end="279:40"><name pos:start="279:28" pos:end="279:32">state</name><operator pos:start="279:33" pos:end="279:34">-&gt;</operator><name pos:start="279:35" pos:end="279:40">new_bs</name></name></expr></argument>, <argument pos:start="279:43" pos:end="279:73"><expr pos:start="279:43" pos:end="279:73"><name pos:start="279:43" pos:end="279:73">BLOCK_OP_TYPE_EXTERNAL_SNAPSHOT</name></expr></argument>,

                           <argument pos:start="281:28" pos:end="281:31"><expr pos:start="281:28" pos:end="281:31"><name pos:start="281:28" pos:end="281:31">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="281:35" pos:end="285:5">{<block_content pos:start="283:9" pos:end="283:15">

        <return pos:start="283:9" pos:end="283:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="289:5" pos:end="295:5"><if pos:start="289:5" pos:end="295:5">if <condition pos:start="289:8" pos:end="289:39">(<expr pos:start="289:9" pos:end="289:38"><name pos:start="289:9" pos:end="289:30"><name pos:start="289:9" pos:end="289:13">state</name><operator pos:start="289:14" pos:end="289:15">-&gt;</operator><name pos:start="289:16" pos:end="289:21">new_bs</name><operator pos:start="289:22" pos:end="289:23">-&gt;</operator><name pos:start="289:24" pos:end="289:30">backing</name></name> <operator pos:start="289:32" pos:end="289:33">!=</operator> <name pos:start="289:35" pos:end="289:38">NULL</name></expr>)</condition> <block pos:start="289:41" pos:end="295:5">{<block_content pos:start="291:9" pos:end="293:15">

        <expr_stmt pos:start="291:9" pos:end="291:69"><expr pos:start="291:9" pos:end="291:68"><call pos:start="291:9" pos:end="291:68"><name pos:start="291:9" pos:end="291:18">error_setg</name><argument_list pos:start="291:19" pos:end="291:68">(<argument pos:start="291:20" pos:end="291:23"><expr pos:start="291:20" pos:end="291:23"><name pos:start="291:20" pos:end="291:23">errp</name></expr></argument>, <argument pos:start="291:26" pos:end="291:67"><expr pos:start="291:26" pos:end="291:67"><literal type="string" pos:start="291:26" pos:end="291:67">"The snapshot already has a backing image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="293:9" pos:end="293:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="299:5" pos:end="305:5"><if pos:start="299:5" pos:end="305:5">if <condition pos:start="299:8" pos:end="299:46">(<expr pos:start="299:9" pos:end="299:45"><operator pos:start="299:9" pos:end="299:9">!</operator><name pos:start="299:10" pos:end="299:45"><name pos:start="299:10" pos:end="299:14">state</name><operator pos:start="299:15" pos:end="299:16">-&gt;</operator><name pos:start="299:17" pos:end="299:22">new_bs</name><operator pos:start="299:23" pos:end="299:24">-&gt;</operator><name pos:start="299:25" pos:end="299:27">drv</name><operator pos:start="299:28" pos:end="299:29">-&gt;</operator><name pos:start="299:30" pos:end="299:45">supports_backing</name></name></expr>)</condition> <block pos:start="299:48" pos:end="305:5">{<block_content pos:start="301:9" pos:end="303:15">

        <expr_stmt pos:start="301:9" pos:end="301:73"><expr pos:start="301:9" pos:end="301:72"><call pos:start="301:9" pos:end="301:72"><name pos:start="301:9" pos:end="301:18">error_setg</name><argument_list pos:start="301:19" pos:end="301:72">(<argument pos:start="301:20" pos:end="301:23"><expr pos:start="301:20" pos:end="301:23"><name pos:start="301:20" pos:end="301:23">errp</name></expr></argument>, <argument pos:start="301:26" pos:end="301:71"><expr pos:start="301:26" pos:end="301:71"><literal type="string" pos:start="301:26" pos:end="301:71">"The snapshot does not support backing images"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="303:9" pos:end="303:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="309:5" pos:end="309:60"><expr pos:start="309:5" pos:end="309:59"><call pos:start="309:5" pos:end="309:59"><name pos:start="309:5" pos:end="309:24">bdrv_set_aio_context</name><argument_list pos:start="309:25" pos:end="309:59">(<argument pos:start="309:26" pos:end="309:38"><expr pos:start="309:26" pos:end="309:38"><name pos:start="309:26" pos:end="309:38"><name pos:start="309:26" pos:end="309:30">state</name><operator pos:start="309:31" pos:end="309:32">-&gt;</operator><name pos:start="309:33" pos:end="309:38">new_bs</name></name></expr></argument>, <argument pos:start="309:41" pos:end="309:58"><expr pos:start="309:41" pos:end="309:58"><name pos:start="309:41" pos:end="309:58"><name pos:start="309:41" pos:end="309:45">state</name><operator pos:start="309:46" pos:end="309:47">-&gt;</operator><name pos:start="309:48" pos:end="309:58">aio_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="313:5" pos:end="317:26">/* This removes our old bs and adds the new bs. This is an operation that

     * can fail, so we need to do it in .prepare; undoing it for abort is

     * always possible. */</comment>

    <expr_stmt pos:start="319:5" pos:end="319:28"><expr pos:start="319:5" pos:end="319:27"><call pos:start="319:5" pos:end="319:27"><name pos:start="319:5" pos:end="319:12">bdrv_ref</name><argument_list pos:start="319:13" pos:end="319:27">(<argument pos:start="319:14" pos:end="319:26"><expr pos:start="319:14" pos:end="319:26"><name pos:start="319:14" pos:end="319:26"><name pos:start="319:14" pos:end="319:18">state</name><operator pos:start="319:19" pos:end="319:20">-&gt;</operator><name pos:start="319:21" pos:end="319:26">new_bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="321:5" pos:end="321:58"><expr pos:start="321:5" pos:end="321:57"><call pos:start="321:5" pos:end="321:57"><name pos:start="321:5" pos:end="321:15">bdrv_append</name><argument_list pos:start="321:16" pos:end="321:57">(<argument pos:start="321:17" pos:end="321:29"><expr pos:start="321:17" pos:end="321:29"><name pos:start="321:17" pos:end="321:29"><name pos:start="321:17" pos:end="321:21">state</name><operator pos:start="321:22" pos:end="321:23">-&gt;</operator><name pos:start="321:24" pos:end="321:29">new_bs</name></name></expr></argument>, <argument pos:start="321:32" pos:end="321:44"><expr pos:start="321:32" pos:end="321:44"><name pos:start="321:32" pos:end="321:44"><name pos:start="321:32" pos:end="321:36">state</name><operator pos:start="321:37" pos:end="321:38">-&gt;</operator><name pos:start="321:39" pos:end="321:44">old_bs</name></name></expr></argument>, <argument pos:start="321:47" pos:end="321:56"><expr pos:start="321:47" pos:end="321:56"><operator pos:start="321:47" pos:end="321:47">&amp;</operator><name pos:start="321:48" pos:end="321:56">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="323:5" pos:end="329:5"><if pos:start="323:5" pos:end="329:5">if <condition pos:start="323:8" pos:end="323:18">(<expr pos:start="323:9" pos:end="323:17"><name pos:start="323:9" pos:end="323:17">local_err</name></expr>)</condition> <block pos:start="323:20" pos:end="329:5">{<block_content pos:start="325:9" pos:end="327:15">

        <expr_stmt pos:start="325:9" pos:end="325:41"><expr pos:start="325:9" pos:end="325:40"><call pos:start="325:9" pos:end="325:40"><name pos:start="325:9" pos:end="325:23">error_propagate</name><argument_list pos:start="325:24" pos:end="325:40">(<argument pos:start="325:25" pos:end="325:28"><expr pos:start="325:25" pos:end="325:28"><name pos:start="325:25" pos:end="325:28">errp</name></expr></argument>, <argument pos:start="325:31" pos:end="325:39"><expr pos:start="325:31" pos:end="325:39"><name pos:start="325:31" pos:end="325:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="327:9" pos:end="327:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="331:5" pos:end="331:35"><expr pos:start="331:5" pos:end="331:34"><name pos:start="331:5" pos:end="331:27"><name pos:start="331:5" pos:end="331:9">state</name><operator pos:start="331:10" pos:end="331:11">-&gt;</operator><name pos:start="331:12" pos:end="331:27">overlay_appended</name></name> <operator pos:start="331:29" pos:end="331:29">=</operator> <name pos:start="331:31" pos:end="331:34">true</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
