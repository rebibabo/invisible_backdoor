<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6453.c" pos:tabs="8"><function pos:start="1:1" pos:end="226:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">mjpegb_decode_frame</name><parameter_list pos:start="1:31" pos:end="5:46">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:52"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:40"><decl pos:start="3:31" pos:end="3:40"><type pos:start="3:31" pos:end="3:40"><name pos:start="3:31" pos:end="3:34">void</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:40">data</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:56"><decl pos:start="3:43" pos:end="3:56"><type pos:start="3:43" pos:end="3:56"><name pos:start="3:43" pos:end="3:45">int</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:56">data_size</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:45"><decl pos:start="5:31" pos:end="5:45"><type pos:start="5:31" pos:end="5:45"><name pos:start="5:31" pos:end="5:38">AVPacket</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:45">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="226:1">{<block_content pos:start="9:5" pos:end="224:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:44"><type pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:22">MJpegDecodeContext</name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:25">s</name> <init pos:start="13:27" pos:end="13:44">= <expr pos:start="13:29" pos:end="13:44"><name pos:start="13:29" pos:end="13:44"><name pos:start="13:29" pos:end="13:33">avctx</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:26">buf_end</name></decl>, <decl pos:start="15:29" pos:end="15:36"><type ref="prev" pos:start="15:5" pos:end="15:19"><modifier pos:start="15:29" pos:end="15:29">*</modifier></type><name pos:start="15:30" pos:end="15:36">buf_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">AVFrame</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:20">picture</name> <init pos:start="17:22" pos:end="17:27">= <expr pos:start="17:24" pos:end="17:27"><name pos:start="17:24" pos:end="17:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:17">GetBitContext</name></type> <name pos:start="19:19" pos:end="19:21">hgb</name></decl>;</decl_stmt> <comment type="block" pos:start="19:24" pos:end="19:43">/* for the header */</comment>

    <decl_stmt pos:start="21:5" pos:end="21:71"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:21">dqt_offs</name></decl>, <decl pos:start="21:24" pos:end="21:31"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:24" pos:end="21:31">dht_offs</name></decl>, <decl pos:start="21:34" pos:end="21:41"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:34" pos:end="21:41">sof_offs</name></decl>, <decl pos:start="21:44" pos:end="21:51"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:44" pos:end="21:51">sos_offs</name></decl>, <decl pos:start="21:54" pos:end="21:70"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:54" pos:end="21:70">second_field_offs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:34"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint32_t</name></type> <name pos:start="23:14" pos:end="23:23">field_size</name></decl>, <decl pos:start="23:26" pos:end="23:33"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:26" pos:end="23:33">sod_offs</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:18"><expr pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:11">buf_ptr</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <name pos:start="27:15" pos:end="27:17">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:29"><expr pos:start="29:5" pos:end="29:28"><name pos:start="29:5" pos:end="29:11">buf_end</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <name pos:start="29:15" pos:end="29:17">buf</name> <operator pos:start="29:19" pos:end="29:19">+</operator> <name pos:start="29:21" pos:end="29:28">buf_size</name></expr>;</expr_stmt>




<label pos:start="34:1" pos:end="34:12"><name pos:start="34:1" pos:end="34:11">read_header</name>:</label>

    <comment type="block" pos:start="36:5" pos:end="36:28">/* reset on every SOI */</comment>

    <expr_stmt pos:start="38:5" pos:end="38:28"><expr pos:start="38:5" pos:end="38:27"><name pos:start="38:5" pos:end="38:23"><name pos:start="38:5" pos:end="38:5">s</name><operator pos:start="38:6" pos:end="38:7">-&gt;</operator><name pos:start="38:8" pos:end="38:23">restart_interval</name></name> <operator pos:start="38:25" pos:end="38:25">=</operator> <literal type="number" pos:start="38:27" pos:end="38:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="40:5" pos:end="40:25"><expr pos:start="40:5" pos:end="40:24"><name pos:start="40:5" pos:end="40:20"><name pos:start="40:5" pos:end="40:5">s</name><operator pos:start="40:6" pos:end="40:7">-&gt;</operator><name pos:start="40:8" pos:end="40:20">restart_count</name></name> <operator pos:start="40:22" pos:end="40:22">=</operator> <literal type="number" pos:start="40:24" pos:end="40:24">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="42:5" pos:end="42:26"><expr pos:start="42:5" pos:end="42:25"><name pos:start="42:5" pos:end="42:21"><name pos:start="42:5" pos:end="42:5">s</name><operator pos:start="42:6" pos:end="42:7">-&gt;</operator><name pos:start="42:8" pos:end="42:21">mjpb_skiptosod</name></name> <operator pos:start="42:23" pos:end="42:23">=</operator> <literal type="number" pos:start="42:25" pos:end="42:25">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="46:5" pos:end="48:35"><if pos:start="46:5" pos:end="48:35">if <condition pos:start="46:8" pos:end="46:37">(<expr pos:start="46:9" pos:end="46:36"><name pos:start="46:9" pos:end="46:15">buf_end</name> <operator pos:start="46:17" pos:end="46:17">-</operator> <name pos:start="46:19" pos:end="46:25">buf_ptr</name> <operator pos:start="46:27" pos:end="46:28">&gt;=</operator> <literal type="number" pos:start="46:30" pos:end="46:30">1</literal> <operator pos:start="46:32" pos:end="46:33">&lt;&lt;</operator> <literal type="number" pos:start="46:35" pos:end="46:36">28</literal></expr>)</condition><block type="pseudo" pos:start="48:9" pos:end="48:35"><block_content pos:start="48:9" pos:end="48:35">

        <return pos:start="48:9" pos:end="48:35">return <expr pos:start="48:16" pos:end="48:34"><name pos:start="48:16" pos:end="48:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="52:5" pos:end="52:68"><expr pos:start="52:5" pos:end="52:67"><call pos:start="52:5" pos:end="52:67"><name pos:start="52:5" pos:end="52:17">init_get_bits</name><argument_list pos:start="52:18" pos:end="52:67">(<argument pos:start="52:19" pos:end="52:22"><expr pos:start="52:19" pos:end="52:22"><operator pos:start="52:19" pos:end="52:19">&amp;</operator><name pos:start="52:20" pos:end="52:22">hgb</name></expr></argument>, <argument pos:start="52:25" pos:end="52:31"><expr pos:start="52:25" pos:end="52:31"><name pos:start="52:25" pos:end="52:31">buf_ptr</name></expr></argument>, <comment type="block" pos:start="52:34" pos:end="52:45">/*buf_size*/</comment><argument pos:start="52:46" pos:end="52:66"><expr pos:start="52:46" pos:end="52:66"><operator pos:start="52:46" pos:end="52:46">(</operator><name pos:start="52:47" pos:end="52:53">buf_end</name> <operator pos:start="52:55" pos:end="52:55">-</operator> <name pos:start="52:57" pos:end="52:63">buf_ptr</name><operator pos:start="52:64" pos:end="52:64">)</operator><operator pos:start="52:65" pos:end="52:65">*</operator><literal type="number" pos:start="52:66" pos:end="52:66">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="56:5" pos:end="56:24"><expr pos:start="56:5" pos:end="56:23"><call pos:start="56:5" pos:end="56:23"><name pos:start="56:5" pos:end="56:13">skip_bits</name><argument_list pos:start="56:14" pos:end="56:23">(<argument pos:start="56:15" pos:end="56:18"><expr pos:start="56:15" pos:end="56:18"><operator pos:start="56:15" pos:end="56:15">&amp;</operator><name pos:start="56:16" pos:end="56:18">hgb</name></expr></argument>, <argument pos:start="56:21" pos:end="56:22"><expr pos:start="56:21" pos:end="56:22"><literal type="number" pos:start="56:21" pos:end="56:22">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="56:26" pos:end="56:45">/* reserved zeros */</comment>



    <if_stmt pos:start="60:5" pos:end="68:5"><if pos:start="60:5" pos:end="68:5">if <condition pos:start="60:8" pos:end="60:60">(<expr pos:start="60:9" pos:end="60:59"><call pos:start="60:9" pos:end="60:31"><name pos:start="60:9" pos:end="60:21">get_bits_long</name><argument_list pos:start="60:22" pos:end="60:31">(<argument pos:start="60:23" pos:end="60:26"><expr pos:start="60:23" pos:end="60:26"><operator pos:start="60:23" pos:end="60:23">&amp;</operator><name pos:start="60:24" pos:end="60:26">hgb</name></expr></argument>, <argument pos:start="60:29" pos:end="60:30"><expr pos:start="60:29" pos:end="60:30"><literal type="number" pos:start="60:29" pos:end="60:30">32</literal></expr></argument>)</argument_list></call> <operator pos:start="60:33" pos:end="60:34">!=</operator> <call pos:start="60:36" pos:end="60:59"><name pos:start="60:36" pos:end="60:42">MKBETAG</name><argument_list pos:start="60:43" pos:end="60:59">(<argument pos:start="60:44" pos:end="60:46"><expr pos:start="60:44" pos:end="60:46"><literal type="char" pos:start="60:44" pos:end="60:46">'m'</literal></expr></argument>,<argument pos:start="60:48" pos:end="60:50"><expr pos:start="60:48" pos:end="60:50"><literal type="char" pos:start="60:48" pos:end="60:50">'j'</literal></expr></argument>,<argument pos:start="60:52" pos:end="60:54"><expr pos:start="60:52" pos:end="60:54"><literal type="char" pos:start="60:52" pos:end="60:54">'p'</literal></expr></argument>,<argument pos:start="60:56" pos:end="60:58"><expr pos:start="60:56" pos:end="60:58"><literal type="char" pos:start="60:56" pos:end="60:58">'g'</literal></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="62:5" pos:end="68:5">{<block_content pos:start="64:9" pos:end="66:35">

        <expr_stmt pos:start="64:9" pos:end="64:68"><expr pos:start="64:9" pos:end="64:67"><call pos:start="64:9" pos:end="64:67"><name pos:start="64:9" pos:end="64:14">av_log</name><argument_list pos:start="64:15" pos:end="64:67">(<argument pos:start="64:16" pos:end="64:20"><expr pos:start="64:16" pos:end="64:20"><name pos:start="64:16" pos:end="64:20">avctx</name></expr></argument>, <argument pos:start="64:23" pos:end="64:36"><expr pos:start="64:23" pos:end="64:36"><name pos:start="64:23" pos:end="64:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="64:39" pos:end="64:66"><expr pos:start="64:39" pos:end="64:66"><literal type="string" pos:start="64:39" pos:end="64:66">"not mjpeg-b (bad fourcc)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="66:9" pos:end="66:35">return <expr pos:start="66:16" pos:end="66:34"><name pos:start="66:16" pos:end="66:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="72:5" pos:end="72:41"><expr pos:start="72:5" pos:end="72:40"><name pos:start="72:5" pos:end="72:14">field_size</name> <operator pos:start="72:16" pos:end="72:16">=</operator> <call pos:start="72:18" pos:end="72:40"><name pos:start="72:18" pos:end="72:30">get_bits_long</name><argument_list pos:start="72:31" pos:end="72:40">(<argument pos:start="72:32" pos:end="72:35"><expr pos:start="72:32" pos:end="72:35"><operator pos:start="72:32" pos:end="72:32">&amp;</operator><name pos:start="72:33" pos:end="72:35">hgb</name></expr></argument>, <argument pos:start="72:38" pos:end="72:39"><expr pos:start="72:38" pos:end="72:39"><literal type="number" pos:start="72:38" pos:end="72:39">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="72:43" pos:end="72:58">/* field size */</comment>

    <expr_stmt pos:start="74:5" pos:end="74:66"><expr pos:start="74:5" pos:end="74:65"><call pos:start="74:5" pos:end="74:65"><name pos:start="74:5" pos:end="74:10">av_log</name><argument_list pos:start="74:11" pos:end="74:65">(<argument pos:start="74:12" pos:end="74:16"><expr pos:start="74:12" pos:end="74:16"><name pos:start="74:12" pos:end="74:16">avctx</name></expr></argument>, <argument pos:start="74:19" pos:end="74:30"><expr pos:start="74:19" pos:end="74:30"><name pos:start="74:19" pos:end="74:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="74:33" pos:end="74:52"><expr pos:start="74:33" pos:end="74:52"><literal type="string" pos:start="74:33" pos:end="74:52">"field size: 0x%x\n"</literal></expr></argument>, <argument pos:start="74:55" pos:end="74:64"><expr pos:start="74:55" pos:end="74:64"><name pos:start="74:55" pos:end="74:64">field_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="76:5" pos:end="76:24"><expr pos:start="76:5" pos:end="76:23"><call pos:start="76:5" pos:end="76:23"><name pos:start="76:5" pos:end="76:13">skip_bits</name><argument_list pos:start="76:14" pos:end="76:23">(<argument pos:start="76:15" pos:end="76:18"><expr pos:start="76:15" pos:end="76:18"><operator pos:start="76:15" pos:end="76:15">&amp;</operator><name pos:start="76:16" pos:end="76:18">hgb</name></expr></argument>, <argument pos:start="76:21" pos:end="76:22"><expr pos:start="76:21" pos:end="76:22"><literal type="number" pos:start="76:21" pos:end="76:22">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="76:26" pos:end="76:48">/* padded field size */</comment>

    <expr_stmt pos:start="78:5" pos:end="78:110"><expr pos:start="78:5" pos:end="78:109"><name pos:start="78:5" pos:end="78:21">second_field_offs</name> <operator pos:start="78:23" pos:end="78:23">=</operator> <call pos:start="78:25" pos:end="78:109"><name pos:start="78:25" pos:end="78:33">read_offs</name><argument_list pos:start="78:34" pos:end="78:109">(<argument pos:start="78:35" pos:end="78:39"><expr pos:start="78:35" pos:end="78:39"><name pos:start="78:35" pos:end="78:39">avctx</name></expr></argument>, <argument pos:start="78:42" pos:end="78:45"><expr pos:start="78:42" pos:end="78:45"><operator pos:start="78:42" pos:end="78:42">&amp;</operator><name pos:start="78:43" pos:end="78:45">hgb</name></expr></argument>, <argument pos:start="78:48" pos:end="78:64"><expr pos:start="78:48" pos:end="78:64"><name pos:start="78:48" pos:end="78:54">buf_end</name> <operator pos:start="78:56" pos:end="78:56">-</operator> <name pos:start="78:58" pos:end="78:64">buf_ptr</name></expr></argument>, <argument pos:start="78:67" pos:end="78:108"><expr pos:start="78:67" pos:end="78:108"><literal type="string" pos:start="78:67" pos:end="78:108">"second_field_offs is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="80:5" pos:end="80:80"><expr pos:start="80:5" pos:end="80:79"><call pos:start="80:5" pos:end="80:79"><name pos:start="80:5" pos:end="80:10">av_log</name><argument_list pos:start="80:11" pos:end="80:79">(<argument pos:start="80:12" pos:end="80:16"><expr pos:start="80:12" pos:end="80:16"><name pos:start="80:12" pos:end="80:16">avctx</name></expr></argument>, <argument pos:start="80:19" pos:end="80:30"><expr pos:start="80:19" pos:end="80:30"><name pos:start="80:19" pos:end="80:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="80:33" pos:end="80:59"><expr pos:start="80:33" pos:end="80:59"><literal type="string" pos:start="80:33" pos:end="80:59">"second field offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="80:62" pos:end="80:78"><expr pos:start="80:62" pos:end="80:78"><name pos:start="80:62" pos:end="80:78">second_field_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="84:5" pos:end="84:87"><expr pos:start="84:5" pos:end="84:86"><name pos:start="84:5" pos:end="84:12">dqt_offs</name> <operator pos:start="84:14" pos:end="84:14">=</operator> <call pos:start="84:16" pos:end="84:86"><name pos:start="84:16" pos:end="84:24">read_offs</name><argument_list pos:start="84:25" pos:end="84:86">(<argument pos:start="84:26" pos:end="84:30"><expr pos:start="84:26" pos:end="84:30"><name pos:start="84:26" pos:end="84:30">avctx</name></expr></argument>, <argument pos:start="84:33" pos:end="84:36"><expr pos:start="84:33" pos:end="84:36"><operator pos:start="84:33" pos:end="84:33">&amp;</operator><name pos:start="84:34" pos:end="84:36">hgb</name></expr></argument>, <argument pos:start="84:39" pos:end="84:55"><expr pos:start="84:39" pos:end="84:55"><name pos:start="84:39" pos:end="84:45">buf_end</name> <operator pos:start="84:47" pos:end="84:47">-</operator> <name pos:start="84:49" pos:end="84:55">buf_ptr</name></expr></argument>, <argument pos:start="84:58" pos:end="84:85"><expr pos:start="84:58" pos:end="84:85"><literal type="string" pos:start="84:58" pos:end="84:85">"dqt is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="86:5" pos:end="86:62"><expr pos:start="86:5" pos:end="86:61"><call pos:start="86:5" pos:end="86:61"><name pos:start="86:5" pos:end="86:10">av_log</name><argument_list pos:start="86:11" pos:end="86:61">(<argument pos:start="86:12" pos:end="86:16"><expr pos:start="86:12" pos:end="86:16"><name pos:start="86:12" pos:end="86:16">avctx</name></expr></argument>, <argument pos:start="86:19" pos:end="86:30"><expr pos:start="86:19" pos:end="86:30"><name pos:start="86:19" pos:end="86:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="86:33" pos:end="86:50"><expr pos:start="86:33" pos:end="86:50"><literal type="string" pos:start="86:33" pos:end="86:50">"dqt offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="86:53" pos:end="86:60"><expr pos:start="86:53" pos:end="86:60"><name pos:start="86:53" pos:end="86:60">dqt_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="88:5" pos:end="102:5"><if pos:start="88:5" pos:end="102:5">if <condition pos:start="88:8" pos:end="88:17">(<expr pos:start="88:9" pos:end="88:16"><name pos:start="88:9" pos:end="88:16">dqt_offs</name></expr>)</condition>

    <block pos:start="90:5" pos:end="102:5">{<block_content pos:start="92:9" pos:end="100:37">

        <expr_stmt pos:start="92:9" pos:end="92:82"><expr pos:start="92:9" pos:end="92:81"><call pos:start="92:9" pos:end="92:81"><name pos:start="92:9" pos:end="92:21">init_get_bits</name><argument_list pos:start="92:22" pos:end="92:81">(<argument pos:start="92:23" pos:end="92:28"><expr pos:start="92:23" pos:end="92:28"><operator pos:start="92:23" pos:end="92:23">&amp;</operator><name pos:start="92:24" pos:end="92:28"><name pos:start="92:24" pos:end="92:24">s</name><operator pos:start="92:25" pos:end="92:26">-&gt;</operator><name pos:start="92:27" pos:end="92:28">gb</name></name></expr></argument>, <argument pos:start="92:31" pos:end="92:46"><expr pos:start="92:31" pos:end="92:46"><name pos:start="92:31" pos:end="92:37">buf_ptr</name><operator pos:start="92:38" pos:end="92:38">+</operator><name pos:start="92:39" pos:end="92:46">dqt_offs</name></expr></argument>, <argument pos:start="92:49" pos:end="92:80"><expr pos:start="92:49" pos:end="92:80"><operator pos:start="92:49" pos:end="92:49">(</operator><name pos:start="92:50" pos:end="92:56">buf_end</name> <operator pos:start="92:58" pos:end="92:58">-</operator> <operator pos:start="92:60" pos:end="92:60">(</operator><name pos:start="92:61" pos:end="92:67">buf_ptr</name><operator pos:start="92:68" pos:end="92:68">+</operator><name pos:start="92:69" pos:end="92:76">dqt_offs</name><operator pos:start="92:77" pos:end="92:77">)</operator><operator pos:start="92:78" pos:end="92:78">)</operator><operator pos:start="92:79" pos:end="92:79">*</operator><literal type="number" pos:start="92:80" pos:end="92:80">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="94:9" pos:end="94:28"><expr pos:start="94:9" pos:end="94:27"><name pos:start="94:9" pos:end="94:21"><name pos:start="94:9" pos:end="94:9">s</name><operator pos:start="94:10" pos:end="94:11">-&gt;</operator><name pos:start="94:12" pos:end="94:21">start_code</name></name> <operator pos:start="94:23" pos:end="94:23">=</operator> <name pos:start="94:25" pos:end="94:27">DQT</name></expr>;</expr_stmt>

        <if_stmt pos:start="96:9" pos:end="100:37"><if pos:start="96:9" pos:end="100:37">if <condition pos:start="96:12" pos:end="98:53">(<expr pos:start="96:13" pos:end="98:52"><call pos:start="96:13" pos:end="96:34"><name pos:start="96:13" pos:end="96:31">ff_mjpeg_decode_dqt</name><argument_list pos:start="96:32" pos:end="96:34">(<argument pos:start="96:33" pos:end="96:33"><expr pos:start="96:33" pos:end="96:33"><name pos:start="96:33" pos:end="96:33">s</name></expr></argument>)</argument_list></call> <operator pos:start="96:36" pos:end="96:36">&lt;</operator> <literal type="number" pos:start="96:38" pos:end="96:38">0</literal> <operator pos:start="96:40" pos:end="96:41">&amp;&amp;</operator>

            <operator pos:start="98:13" pos:end="98:13">(</operator><name pos:start="98:14" pos:end="98:35"><name pos:start="98:14" pos:end="98:18">avctx</name><operator pos:start="98:19" pos:end="98:20">-&gt;</operator><name pos:start="98:21" pos:end="98:35">err_recognition</name></name> <operator pos:start="98:37" pos:end="98:37">&amp;</operator> <name pos:start="98:39" pos:end="98:51">AV_EF_EXPLODE</name><operator pos:start="98:52" pos:end="98:52">)</operator></expr>)</condition><block type="pseudo" pos:start="100:11" pos:end="100:37"><block_content pos:start="100:11" pos:end="100:37">

          <return pos:start="100:11" pos:end="100:37">return <expr pos:start="100:18" pos:end="100:36"><name pos:start="100:18" pos:end="100:36">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="106:5" pos:end="106:87"><expr pos:start="106:5" pos:end="106:86"><name pos:start="106:5" pos:end="106:12">dht_offs</name> <operator pos:start="106:14" pos:end="106:14">=</operator> <call pos:start="106:16" pos:end="106:86"><name pos:start="106:16" pos:end="106:24">read_offs</name><argument_list pos:start="106:25" pos:end="106:86">(<argument pos:start="106:26" pos:end="106:30"><expr pos:start="106:26" pos:end="106:30"><name pos:start="106:26" pos:end="106:30">avctx</name></expr></argument>, <argument pos:start="106:33" pos:end="106:36"><expr pos:start="106:33" pos:end="106:36"><operator pos:start="106:33" pos:end="106:33">&amp;</operator><name pos:start="106:34" pos:end="106:36">hgb</name></expr></argument>, <argument pos:start="106:39" pos:end="106:55"><expr pos:start="106:39" pos:end="106:55"><name pos:start="106:39" pos:end="106:45">buf_end</name> <operator pos:start="106:47" pos:end="106:47">-</operator> <name pos:start="106:49" pos:end="106:55">buf_ptr</name></expr></argument>, <argument pos:start="106:58" pos:end="106:85"><expr pos:start="106:58" pos:end="106:85"><literal type="string" pos:start="106:58" pos:end="106:85">"dht is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="108:5" pos:end="108:62"><expr pos:start="108:5" pos:end="108:61"><call pos:start="108:5" pos:end="108:61"><name pos:start="108:5" pos:end="108:10">av_log</name><argument_list pos:start="108:11" pos:end="108:61">(<argument pos:start="108:12" pos:end="108:16"><expr pos:start="108:12" pos:end="108:16"><name pos:start="108:12" pos:end="108:16">avctx</name></expr></argument>, <argument pos:start="108:19" pos:end="108:30"><expr pos:start="108:19" pos:end="108:30"><name pos:start="108:19" pos:end="108:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="108:33" pos:end="108:50"><expr pos:start="108:33" pos:end="108:50"><literal type="string" pos:start="108:33" pos:end="108:50">"dht offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="108:53" pos:end="108:60"><expr pos:start="108:53" pos:end="108:60"><name pos:start="108:53" pos:end="108:60">dht_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="110:5" pos:end="120:5"><if pos:start="110:5" pos:end="120:5">if <condition pos:start="110:8" pos:end="110:17">(<expr pos:start="110:9" pos:end="110:16"><name pos:start="110:9" pos:end="110:16">dht_offs</name></expr>)</condition>

    <block pos:start="112:5" pos:end="120:5">{<block_content pos:start="114:9" pos:end="118:31">

        <expr_stmt pos:start="114:9" pos:end="114:82"><expr pos:start="114:9" pos:end="114:81"><call pos:start="114:9" pos:end="114:81"><name pos:start="114:9" pos:end="114:21">init_get_bits</name><argument_list pos:start="114:22" pos:end="114:81">(<argument pos:start="114:23" pos:end="114:28"><expr pos:start="114:23" pos:end="114:28"><operator pos:start="114:23" pos:end="114:23">&amp;</operator><name pos:start="114:24" pos:end="114:28"><name pos:start="114:24" pos:end="114:24">s</name><operator pos:start="114:25" pos:end="114:26">-&gt;</operator><name pos:start="114:27" pos:end="114:28">gb</name></name></expr></argument>, <argument pos:start="114:31" pos:end="114:46"><expr pos:start="114:31" pos:end="114:46"><name pos:start="114:31" pos:end="114:37">buf_ptr</name><operator pos:start="114:38" pos:end="114:38">+</operator><name pos:start="114:39" pos:end="114:46">dht_offs</name></expr></argument>, <argument pos:start="114:49" pos:end="114:80"><expr pos:start="114:49" pos:end="114:80"><operator pos:start="114:49" pos:end="114:49">(</operator><name pos:start="114:50" pos:end="114:56">buf_end</name> <operator pos:start="114:58" pos:end="114:58">-</operator> <operator pos:start="114:60" pos:end="114:60">(</operator><name pos:start="114:61" pos:end="114:67">buf_ptr</name><operator pos:start="114:68" pos:end="114:68">+</operator><name pos:start="114:69" pos:end="114:76">dht_offs</name><operator pos:start="114:77" pos:end="114:77">)</operator><operator pos:start="114:78" pos:end="114:78">)</operator><operator pos:start="114:79" pos:end="114:79">*</operator><literal type="number" pos:start="114:80" pos:end="114:80">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="116:9" pos:end="116:28"><expr pos:start="116:9" pos:end="116:27"><name pos:start="116:9" pos:end="116:21"><name pos:start="116:9" pos:end="116:9">s</name><operator pos:start="116:10" pos:end="116:11">-&gt;</operator><name pos:start="116:12" pos:end="116:21">start_code</name></name> <operator pos:start="116:23" pos:end="116:23">=</operator> <name pos:start="116:25" pos:end="116:27">DHT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="118:9" pos:end="118:31"><expr pos:start="118:9" pos:end="118:30"><call pos:start="118:9" pos:end="118:30"><name pos:start="118:9" pos:end="118:27">ff_mjpeg_decode_dht</name><argument_list pos:start="118:28" pos:end="118:30">(<argument pos:start="118:29" pos:end="118:29"><expr pos:start="118:29" pos:end="118:29"><name pos:start="118:29" pos:end="118:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="124:5" pos:end="124:87"><expr pos:start="124:5" pos:end="124:86"><name pos:start="124:5" pos:end="124:12">sof_offs</name> <operator pos:start="124:14" pos:end="124:14">=</operator> <call pos:start="124:16" pos:end="124:86"><name pos:start="124:16" pos:end="124:24">read_offs</name><argument_list pos:start="124:25" pos:end="124:86">(<argument pos:start="124:26" pos:end="124:30"><expr pos:start="124:26" pos:end="124:30"><name pos:start="124:26" pos:end="124:30">avctx</name></expr></argument>, <argument pos:start="124:33" pos:end="124:36"><expr pos:start="124:33" pos:end="124:36"><operator pos:start="124:33" pos:end="124:33">&amp;</operator><name pos:start="124:34" pos:end="124:36">hgb</name></expr></argument>, <argument pos:start="124:39" pos:end="124:55"><expr pos:start="124:39" pos:end="124:55"><name pos:start="124:39" pos:end="124:45">buf_end</name> <operator pos:start="124:47" pos:end="124:47">-</operator> <name pos:start="124:49" pos:end="124:55">buf_ptr</name></expr></argument>, <argument pos:start="124:58" pos:end="124:85"><expr pos:start="124:58" pos:end="124:85"><literal type="string" pos:start="124:58" pos:end="124:85">"sof is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="126:5" pos:end="126:62"><expr pos:start="126:5" pos:end="126:61"><call pos:start="126:5" pos:end="126:61"><name pos:start="126:5" pos:end="126:10">av_log</name><argument_list pos:start="126:11" pos:end="126:61">(<argument pos:start="126:12" pos:end="126:16"><expr pos:start="126:12" pos:end="126:16"><name pos:start="126:12" pos:end="126:16">avctx</name></expr></argument>, <argument pos:start="126:19" pos:end="126:30"><expr pos:start="126:19" pos:end="126:30"><name pos:start="126:19" pos:end="126:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="126:33" pos:end="126:50"><expr pos:start="126:33" pos:end="126:50"><literal type="string" pos:start="126:33" pos:end="126:50">"sof offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="126:53" pos:end="126:60"><expr pos:start="126:53" pos:end="126:60"><name pos:start="126:53" pos:end="126:60">sof_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="128:5" pos:end="140:5"><if pos:start="128:5" pos:end="140:5">if <condition pos:start="128:8" pos:end="128:17">(<expr pos:start="128:9" pos:end="128:16"><name pos:start="128:9" pos:end="128:16">sof_offs</name></expr>)</condition>

    <block pos:start="130:5" pos:end="140:5">{<block_content pos:start="132:9" pos:end="138:22">

        <expr_stmt pos:start="132:9" pos:end="132:82"><expr pos:start="132:9" pos:end="132:81"><call pos:start="132:9" pos:end="132:81"><name pos:start="132:9" pos:end="132:21">init_get_bits</name><argument_list pos:start="132:22" pos:end="132:81">(<argument pos:start="132:23" pos:end="132:28"><expr pos:start="132:23" pos:end="132:28"><operator pos:start="132:23" pos:end="132:23">&amp;</operator><name pos:start="132:24" pos:end="132:28"><name pos:start="132:24" pos:end="132:24">s</name><operator pos:start="132:25" pos:end="132:26">-&gt;</operator><name pos:start="132:27" pos:end="132:28">gb</name></name></expr></argument>, <argument pos:start="132:31" pos:end="132:46"><expr pos:start="132:31" pos:end="132:46"><name pos:start="132:31" pos:end="132:37">buf_ptr</name><operator pos:start="132:38" pos:end="132:38">+</operator><name pos:start="132:39" pos:end="132:46">sof_offs</name></expr></argument>, <argument pos:start="132:49" pos:end="132:80"><expr pos:start="132:49" pos:end="132:80"><operator pos:start="132:49" pos:end="132:49">(</operator><name pos:start="132:50" pos:end="132:56">buf_end</name> <operator pos:start="132:58" pos:end="132:58">-</operator> <operator pos:start="132:60" pos:end="132:60">(</operator><name pos:start="132:61" pos:end="132:67">buf_ptr</name><operator pos:start="132:68" pos:end="132:68">+</operator><name pos:start="132:69" pos:end="132:76">sof_offs</name><operator pos:start="132:77" pos:end="132:77">)</operator><operator pos:start="132:78" pos:end="132:78">)</operator><operator pos:start="132:79" pos:end="132:79">*</operator><literal type="number" pos:start="132:80" pos:end="132:80">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="134:9" pos:end="134:29"><expr pos:start="134:9" pos:end="134:28"><name pos:start="134:9" pos:end="134:21"><name pos:start="134:9" pos:end="134:9">s</name><operator pos:start="134:10" pos:end="134:11">-&gt;</operator><name pos:start="134:12" pos:end="134:21">start_code</name></name> <operator pos:start="134:23" pos:end="134:23">=</operator> <name pos:start="134:25" pos:end="134:28">SOF0</name></expr>;</expr_stmt>

        <if_stmt pos:start="136:9" pos:end="138:22"><if pos:start="136:9" pos:end="138:22">if <condition pos:start="136:12" pos:end="136:39">(<expr pos:start="136:13" pos:end="136:38"><call pos:start="136:13" pos:end="136:34"><name pos:start="136:13" pos:end="136:31">ff_mjpeg_decode_sof</name><argument_list pos:start="136:32" pos:end="136:34">(<argument pos:start="136:33" pos:end="136:33"><expr pos:start="136:33" pos:end="136:33"><name pos:start="136:33" pos:end="136:33">s</name></expr></argument>)</argument_list></call> <operator pos:start="136:36" pos:end="136:36">&lt;</operator> <literal type="number" pos:start="136:38" pos:end="136:38">0</literal></expr>)</condition><block type="pseudo" pos:start="138:13" pos:end="138:22"><block_content pos:start="138:13" pos:end="138:22">

            <return pos:start="138:13" pos:end="138:22">return <expr pos:start="138:20" pos:end="138:21"><operator pos:start="138:20" pos:end="138:20">-</operator><literal type="number" pos:start="138:21" pos:end="138:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="144:5" pos:end="144:87"><expr pos:start="144:5" pos:end="144:86"><name pos:start="144:5" pos:end="144:12">sos_offs</name> <operator pos:start="144:14" pos:end="144:14">=</operator> <call pos:start="144:16" pos:end="144:86"><name pos:start="144:16" pos:end="144:24">read_offs</name><argument_list pos:start="144:25" pos:end="144:86">(<argument pos:start="144:26" pos:end="144:30"><expr pos:start="144:26" pos:end="144:30"><name pos:start="144:26" pos:end="144:30">avctx</name></expr></argument>, <argument pos:start="144:33" pos:end="144:36"><expr pos:start="144:33" pos:end="144:36"><operator pos:start="144:33" pos:end="144:33">&amp;</operator><name pos:start="144:34" pos:end="144:36">hgb</name></expr></argument>, <argument pos:start="144:39" pos:end="144:55"><expr pos:start="144:39" pos:end="144:55"><name pos:start="144:39" pos:end="144:45">buf_end</name> <operator pos:start="144:47" pos:end="144:47">-</operator> <name pos:start="144:49" pos:end="144:55">buf_ptr</name></expr></argument>, <argument pos:start="144:58" pos:end="144:85"><expr pos:start="144:58" pos:end="144:85"><literal type="string" pos:start="144:58" pos:end="144:85">"sos is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="146:5" pos:end="146:62"><expr pos:start="146:5" pos:end="146:61"><call pos:start="146:5" pos:end="146:61"><name pos:start="146:5" pos:end="146:10">av_log</name><argument_list pos:start="146:11" pos:end="146:61">(<argument pos:start="146:12" pos:end="146:16"><expr pos:start="146:12" pos:end="146:16"><name pos:start="146:12" pos:end="146:16">avctx</name></expr></argument>, <argument pos:start="146:19" pos:end="146:30"><expr pos:start="146:19" pos:end="146:30"><name pos:start="146:19" pos:end="146:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="146:33" pos:end="146:50"><expr pos:start="146:33" pos:end="146:50"><literal type="string" pos:start="146:33" pos:end="146:50">"sos offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="146:53" pos:end="146:60"><expr pos:start="146:53" pos:end="146:60"><name pos:start="146:53" pos:end="146:60">sos_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="148:5" pos:end="148:87"><expr pos:start="148:5" pos:end="148:86"><name pos:start="148:5" pos:end="148:12">sod_offs</name> <operator pos:start="148:14" pos:end="148:14">=</operator> <call pos:start="148:16" pos:end="148:86"><name pos:start="148:16" pos:end="148:24">read_offs</name><argument_list pos:start="148:25" pos:end="148:86">(<argument pos:start="148:26" pos:end="148:30"><expr pos:start="148:26" pos:end="148:30"><name pos:start="148:26" pos:end="148:30">avctx</name></expr></argument>, <argument pos:start="148:33" pos:end="148:36"><expr pos:start="148:33" pos:end="148:36"><operator pos:start="148:33" pos:end="148:33">&amp;</operator><name pos:start="148:34" pos:end="148:36">hgb</name></expr></argument>, <argument pos:start="148:39" pos:end="148:55"><expr pos:start="148:39" pos:end="148:55"><name pos:start="148:39" pos:end="148:45">buf_end</name> <operator pos:start="148:47" pos:end="148:47">-</operator> <name pos:start="148:49" pos:end="148:55">buf_ptr</name></expr></argument>, <argument pos:start="148:58" pos:end="148:85"><expr pos:start="148:58" pos:end="148:85"><literal type="string" pos:start="148:58" pos:end="148:85">"sof is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="150:5" pos:end="150:62"><expr pos:start="150:5" pos:end="150:61"><call pos:start="150:5" pos:end="150:61"><name pos:start="150:5" pos:end="150:10">av_log</name><argument_list pos:start="150:11" pos:end="150:61">(<argument pos:start="150:12" pos:end="150:16"><expr pos:start="150:12" pos:end="150:16"><name pos:start="150:12" pos:end="150:16">avctx</name></expr></argument>, <argument pos:start="150:19" pos:end="150:30"><expr pos:start="150:19" pos:end="150:30"><name pos:start="150:19" pos:end="150:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="150:33" pos:end="150:50"><expr pos:start="150:33" pos:end="150:50"><literal type="string" pos:start="150:33" pos:end="150:50">"sod offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="150:53" pos:end="150:60"><expr pos:start="150:53" pos:end="150:60"><name pos:start="150:53" pos:end="150:60">sod_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="152:5" pos:end="170:5"><if pos:start="152:5" pos:end="170:5">if <condition pos:start="152:8" pos:end="152:17">(<expr pos:start="152:9" pos:end="152:16"><name pos:start="152:9" pos:end="152:16">sos_offs</name></expr>)</condition>

    <block pos:start="154:5" pos:end="170:5">{<block_content pos:start="156:9" pos:end="168:37">

        <expr_stmt pos:start="156:9" pos:end="158:75"><expr pos:start="156:9" pos:end="158:74"><call pos:start="156:9" pos:end="158:74"><name pos:start="156:9" pos:end="156:21">init_get_bits</name><argument_list pos:start="156:22" pos:end="158:74">(<argument pos:start="156:23" pos:end="156:28"><expr pos:start="156:23" pos:end="156:28"><operator pos:start="156:23" pos:end="156:23">&amp;</operator><name pos:start="156:24" pos:end="156:28"><name pos:start="156:24" pos:end="156:24">s</name><operator pos:start="156:25" pos:end="156:26">-&gt;</operator><name pos:start="156:27" pos:end="156:28">gb</name></name></expr></argument>, <argument pos:start="156:31" pos:end="156:48"><expr pos:start="156:31" pos:end="156:48"><name pos:start="156:31" pos:end="156:37">buf_ptr</name> <operator pos:start="156:39" pos:end="156:39">+</operator> <name pos:start="156:41" pos:end="156:48">sos_offs</name></expr></argument>,

                      <argument pos:start="158:23" pos:end="158:73"><expr pos:start="158:23" pos:end="158:73"><literal type="number" pos:start="158:23" pos:end="158:23">8</literal> <operator pos:start="158:25" pos:end="158:25">*</operator> <call pos:start="158:27" pos:end="158:73"><name pos:start="158:27" pos:end="158:31">FFMIN</name><argument_list pos:start="158:32" pos:end="158:73">(<argument pos:start="158:33" pos:end="158:42"><expr pos:start="158:33" pos:end="158:42"><name pos:start="158:33" pos:end="158:42">field_size</name></expr></argument>, <argument pos:start="158:45" pos:end="158:72"><expr pos:start="158:45" pos:end="158:72"><name pos:start="158:45" pos:end="158:51">buf_end</name> <operator pos:start="158:53" pos:end="158:53">-</operator> <name pos:start="158:55" pos:end="158:61">buf_ptr</name> <operator pos:start="158:63" pos:end="158:63">-</operator> <name pos:start="158:65" pos:end="158:72">sos_offs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="160:9" pos:end="160:74"><expr pos:start="160:9" pos:end="160:73"><name pos:start="160:9" pos:end="160:25"><name pos:start="160:9" pos:end="160:9">s</name><operator pos:start="160:10" pos:end="160:11">-&gt;</operator><name pos:start="160:12" pos:end="160:25">mjpb_skiptosod</name></name> <operator pos:start="160:27" pos:end="160:27">=</operator> <operator pos:start="160:29" pos:end="160:29">(</operator><name pos:start="160:30" pos:end="160:37">sod_offs</name> <operator pos:start="160:39" pos:end="160:39">-</operator> <name pos:start="160:41" pos:end="160:48">sos_offs</name> <operator pos:start="160:50" pos:end="160:50">-</operator> <call pos:start="160:52" pos:end="160:72"><name pos:start="160:52" pos:end="160:60">show_bits</name><argument_list pos:start="160:61" pos:end="160:72">(<argument pos:start="160:62" pos:end="160:67"><expr pos:start="160:62" pos:end="160:67"><operator pos:start="160:62" pos:end="160:62">&amp;</operator><name pos:start="160:63" pos:end="160:67"><name pos:start="160:63" pos:end="160:63">s</name><operator pos:start="160:64" pos:end="160:65">-&gt;</operator><name pos:start="160:66" pos:end="160:67">gb</name></name></expr></argument>, <argument pos:start="160:70" pos:end="160:71"><expr pos:start="160:70" pos:end="160:71"><literal type="number" pos:start="160:70" pos:end="160:71">16</literal></expr></argument>)</argument_list></call><operator pos:start="160:73" pos:end="160:73">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="162:9" pos:end="162:28"><expr pos:start="162:9" pos:end="162:27"><name pos:start="162:9" pos:end="162:21"><name pos:start="162:9" pos:end="162:9">s</name><operator pos:start="162:10" pos:end="162:11">-&gt;</operator><name pos:start="162:12" pos:end="162:21">start_code</name></name> <operator pos:start="162:23" pos:end="162:23">=</operator> <name pos:start="162:25" pos:end="162:27">SOS</name></expr>;</expr_stmt>

        <if_stmt pos:start="164:9" pos:end="168:37"><if pos:start="164:9" pos:end="168:37">if <condition pos:start="164:12" pos:end="166:53">(<expr pos:start="164:13" pos:end="166:52"><call pos:start="164:13" pos:end="164:46"><name pos:start="164:13" pos:end="164:31">ff_mjpeg_decode_sos</name><argument_list pos:start="164:32" pos:end="164:46">(<argument pos:start="164:33" pos:end="164:33"><expr pos:start="164:33" pos:end="164:33"><name pos:start="164:33" pos:end="164:33">s</name></expr></argument>, <argument pos:start="164:36" pos:end="164:39"><expr pos:start="164:36" pos:end="164:39"><name pos:start="164:36" pos:end="164:39">NULL</name></expr></argument>, <argument pos:start="164:42" pos:end="164:45"><expr pos:start="164:42" pos:end="164:45"><name pos:start="164:42" pos:end="164:45">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="164:48" pos:end="164:48">&lt;</operator> <literal type="number" pos:start="164:50" pos:end="164:50">0</literal> <operator pos:start="164:52" pos:end="164:53">&amp;&amp;</operator>

            <operator pos:start="166:13" pos:end="166:13">(</operator><name pos:start="166:14" pos:end="166:35"><name pos:start="166:14" pos:end="166:18">avctx</name><operator pos:start="166:19" pos:end="166:20">-&gt;</operator><name pos:start="166:21" pos:end="166:35">err_recognition</name></name> <operator pos:start="166:37" pos:end="166:37">&amp;</operator> <name pos:start="166:39" pos:end="166:51">AV_EF_EXPLODE</name><operator pos:start="166:52" pos:end="166:52">)</operator></expr>)</condition><block type="pseudo" pos:start="168:11" pos:end="168:37"><block_content pos:start="168:11" pos:end="168:37">

          <return pos:start="168:11" pos:end="168:37">return <expr pos:start="168:18" pos:end="168:36"><name pos:start="168:18" pos:end="168:36">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="174:5" pos:end="190:5"><if pos:start="174:5" pos:end="190:5">if <condition pos:start="174:8" pos:end="174:22">(<expr pos:start="174:9" pos:end="174:21"><name pos:start="174:9" pos:end="174:21"><name pos:start="174:9" pos:end="174:9">s</name><operator pos:start="174:10" pos:end="174:11">-&gt;</operator><name pos:start="174:12" pos:end="174:21">interlaced</name></name></expr>)</condition> <block pos:start="174:24" pos:end="190:5">{<block_content pos:start="176:9" pos:end="188:13">

        <expr_stmt pos:start="176:9" pos:end="176:29"><expr pos:start="176:9" pos:end="176:28"><name pos:start="176:9" pos:end="176:23"><name pos:start="176:9" pos:end="176:9">s</name><operator pos:start="176:10" pos:end="176:11">-&gt;</operator><name pos:start="176:12" pos:end="176:23">bottom_field</name></name> <operator pos:start="176:25" pos:end="176:26">^=</operator> <literal type="number" pos:start="176:28" pos:end="176:28">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="178:9" pos:end="178:58">/* if not bottom field, do not output image yet */</comment>

        <if_stmt pos:start="180:9" pos:end="188:13"><if pos:start="180:9" pos:end="188:13">if <condition pos:start="180:12" pos:end="180:74">(<expr pos:start="180:13" pos:end="180:73"><name pos:start="180:13" pos:end="180:27"><name pos:start="180:13" pos:end="180:13">s</name><operator pos:start="180:14" pos:end="180:15">-&gt;</operator><name pos:start="180:16" pos:end="180:27">bottom_field</name></name> <operator pos:start="180:29" pos:end="180:30">!=</operator> <name pos:start="180:32" pos:end="180:52"><name pos:start="180:32" pos:end="180:32">s</name><operator pos:start="180:33" pos:end="180:34">-&gt;</operator><name pos:start="180:35" pos:end="180:52">interlace_polarity</name></name> <operator pos:start="180:54" pos:end="180:55">&amp;&amp;</operator> <name pos:start="180:57" pos:end="180:73">second_field_offs</name></expr>)</condition>

        <block pos:start="182:9" pos:end="188:13">{<block_content pos:start="184:13" pos:end="186:29">

            <expr_stmt pos:start="184:13" pos:end="184:46"><expr pos:start="184:13" pos:end="184:45"><name pos:start="184:13" pos:end="184:19">buf_ptr</name> <operator pos:start="184:21" pos:end="184:21">=</operator> <name pos:start="184:23" pos:end="184:25">buf</name> <operator pos:start="184:27" pos:end="184:27">+</operator> <name pos:start="184:29" pos:end="184:45">second_field_offs</name></expr>;</expr_stmt>

            <goto pos:start="186:13" pos:end="186:29">goto <name pos:start="186:18" pos:end="186:28">read_header</name>;</goto>

            </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="194:5" pos:end="194:66">//XXX FIXME factorize, this looks very similar to the EOI code</comment>



    <expr_stmt pos:start="198:5" pos:end="198:30"><expr pos:start="198:5" pos:end="198:29"><operator pos:start="198:5" pos:end="198:5">*</operator><name pos:start="198:6" pos:end="198:12">picture</name><operator pos:start="198:13" pos:end="198:13">=</operator> <operator pos:start="198:15" pos:end="198:15">*</operator><name pos:start="198:16" pos:end="198:29"><name pos:start="198:16" pos:end="198:16">s</name><operator pos:start="198:17" pos:end="198:18">-&gt;</operator><name pos:start="198:19" pos:end="198:29">picture_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="200:5" pos:end="200:33"><expr pos:start="200:5" pos:end="200:32"><operator pos:start="200:5" pos:end="200:5">*</operator><name pos:start="200:6" pos:end="200:14">data_size</name> <operator pos:start="200:16" pos:end="200:16">=</operator> <sizeof pos:start="200:18" pos:end="200:32">sizeof<argument_list pos:start="200:24" pos:end="200:32">(<argument pos:start="200:25" pos:end="200:31"><expr pos:start="200:25" pos:end="200:31"><name pos:start="200:25" pos:end="200:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <if_stmt pos:start="204:5" pos:end="220:5"><if pos:start="204:5" pos:end="220:5">if<condition pos:start="204:7" pos:end="204:20">(<expr pos:start="204:8" pos:end="204:19"><operator pos:start="204:8" pos:end="204:8">!</operator><name pos:start="204:9" pos:end="204:19"><name pos:start="204:9" pos:end="204:9">s</name><operator pos:start="204:10" pos:end="204:11">-&gt;</operator><name pos:start="204:12" pos:end="204:19">lossless</name></name></expr>)</condition><block pos:start="204:21" pos:end="220:5">{<block_content pos:start="206:9" pos:end="218:40">

        <expr_stmt pos:start="206:9" pos:end="206:75"><expr pos:start="206:9" pos:end="206:74"><name pos:start="206:9" pos:end="206:24"><name pos:start="206:9" pos:end="206:15">picture</name><operator pos:start="206:16" pos:end="206:17">-&gt;</operator><name pos:start="206:18" pos:end="206:24">quality</name></name><operator pos:start="206:25" pos:end="206:25">=</operator> <call pos:start="206:27" pos:end="206:74"><name pos:start="206:27" pos:end="206:32">FFMAX3</name><argument_list pos:start="206:33" pos:end="206:74">(<argument pos:start="206:34" pos:end="206:45"><expr pos:start="206:34" pos:end="206:45"><name pos:start="206:34" pos:end="206:45"><name pos:start="206:34" pos:end="206:34">s</name><operator pos:start="206:35" pos:end="206:36">-&gt;</operator><name pos:start="206:37" pos:end="206:42">qscale</name><index pos:start="206:43" pos:end="206:45">[<expr pos:start="206:44" pos:end="206:44"><literal type="number" pos:start="206:44" pos:end="206:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="206:48" pos:end="206:59"><expr pos:start="206:48" pos:end="206:59"><name pos:start="206:48" pos:end="206:59"><name pos:start="206:48" pos:end="206:48">s</name><operator pos:start="206:49" pos:end="206:50">-&gt;</operator><name pos:start="206:51" pos:end="206:56">qscale</name><index pos:start="206:57" pos:end="206:59">[<expr pos:start="206:58" pos:end="206:58"><literal type="number" pos:start="206:58" pos:end="206:58">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="206:62" pos:end="206:73"><expr pos:start="206:62" pos:end="206:73"><name pos:start="206:62" pos:end="206:73"><name pos:start="206:62" pos:end="206:62">s</name><operator pos:start="206:63" pos:end="206:64">-&gt;</operator><name pos:start="206:65" pos:end="206:70">qscale</name><index pos:start="206:71" pos:end="206:73">[<expr pos:start="206:72" pos:end="206:72"><literal type="number" pos:start="206:72" pos:end="206:72">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="208:9" pos:end="208:28"><expr pos:start="208:9" pos:end="208:27"><name pos:start="208:9" pos:end="208:24"><name pos:start="208:9" pos:end="208:15">picture</name><operator pos:start="208:16" pos:end="208:17">-&gt;</operator><name pos:start="208:18" pos:end="208:24">qstride</name></name><operator pos:start="208:25" pos:end="208:25">=</operator> <literal type="number" pos:start="208:27" pos:end="208:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="210:9" pos:end="210:47"><expr pos:start="210:9" pos:end="210:46"><name pos:start="210:9" pos:end="210:29"><name pos:start="210:9" pos:end="210:15">picture</name><operator pos:start="210:16" pos:end="210:17">-&gt;</operator><name pos:start="210:18" pos:end="210:29">qscale_table</name></name><operator pos:start="210:30" pos:end="210:30">=</operator> <name pos:start="210:32" pos:end="210:46"><name pos:start="210:32" pos:end="210:32">s</name><operator pos:start="210:33" pos:end="210:34">-&gt;</operator><name pos:start="210:35" pos:end="210:46">qscale_table</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="212:9" pos:end="212:74"><expr pos:start="212:9" pos:end="212:73"><call pos:start="212:9" pos:end="212:73"><name pos:start="212:9" pos:end="212:14">memset</name><argument_list pos:start="212:15" pos:end="212:73">(<argument pos:start="212:16" pos:end="212:36"><expr pos:start="212:16" pos:end="212:36"><name pos:start="212:16" pos:end="212:36"><name pos:start="212:16" pos:end="212:22">picture</name><operator pos:start="212:23" pos:end="212:24">-&gt;</operator><name pos:start="212:25" pos:end="212:36">qscale_table</name></name></expr></argument>, <argument pos:start="212:39" pos:end="212:54"><expr pos:start="212:39" pos:end="212:54"><name pos:start="212:39" pos:end="212:54"><name pos:start="212:39" pos:end="212:45">picture</name><operator pos:start="212:46" pos:end="212:47">-&gt;</operator><name pos:start="212:48" pos:end="212:54">quality</name></name></expr></argument>, <argument pos:start="212:57" pos:end="212:72"><expr pos:start="212:57" pos:end="212:72"><operator pos:start="212:57" pos:end="212:57">(</operator><name pos:start="212:58" pos:end="212:65"><name pos:start="212:58" pos:end="212:58">s</name><operator pos:start="212:59" pos:end="212:60">-&gt;</operator><name pos:start="212:61" pos:end="212:65">width</name></name><operator pos:start="212:66" pos:end="212:66">+</operator><literal type="number" pos:start="212:67" pos:end="212:68">15</literal><operator pos:start="212:69" pos:end="212:69">)</operator><operator pos:start="212:70" pos:end="212:70">/</operator><literal type="number" pos:start="212:71" pos:end="212:72">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="214:9" pos:end="216:70"><if pos:start="214:9" pos:end="216:70">if<condition pos:start="214:11" pos:end="214:38">(<expr pos:start="214:12" pos:end="214:37"><name pos:start="214:12" pos:end="214:23"><name pos:start="214:12" pos:end="214:16">avctx</name><operator pos:start="214:17" pos:end="214:18">-&gt;</operator><name pos:start="214:19" pos:end="214:23">debug</name></name> <operator pos:start="214:25" pos:end="214:25">&amp;</operator> <name pos:start="214:27" pos:end="214:37">FF_DEBUG_QP</name></expr>)</condition><block type="pseudo" pos:start="216:13" pos:end="216:70"><block_content pos:start="216:13" pos:end="216:70">

            <expr_stmt pos:start="216:13" pos:end="216:70"><expr pos:start="216:13" pos:end="216:69"><call pos:start="216:13" pos:end="216:69"><name pos:start="216:13" pos:end="216:18">av_log</name><argument_list pos:start="216:19" pos:end="216:69">(<argument pos:start="216:20" pos:end="216:24"><expr pos:start="216:20" pos:end="216:24"><name pos:start="216:20" pos:end="216:24">avctx</name></expr></argument>, <argument pos:start="216:27" pos:end="216:38"><expr pos:start="216:27" pos:end="216:38"><name pos:start="216:27" pos:end="216:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="216:41" pos:end="216:50"><expr pos:start="216:41" pos:end="216:50"><literal type="string" pos:start="216:41" pos:end="216:50">"QP: %d\n"</literal></expr></argument>, <argument pos:start="216:53" pos:end="216:68"><expr pos:start="216:53" pos:end="216:68"><name pos:start="216:53" pos:end="216:68"><name pos:start="216:53" pos:end="216:59">picture</name><operator pos:start="216:60" pos:end="216:61">-&gt;</operator><name pos:start="216:62" pos:end="216:68">quality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="218:9" pos:end="218:40"><expr pos:start="218:9" pos:end="218:39"><name pos:start="218:9" pos:end="218:24"><name pos:start="218:9" pos:end="218:15">picture</name><operator pos:start="218:16" pos:end="218:17">-&gt;</operator><name pos:start="218:18" pos:end="218:24">quality</name></name><operator pos:start="218:25" pos:end="218:26">*=</operator> <name pos:start="218:28" pos:end="218:39">FF_QP2LAMBDA</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="224:5" pos:end="224:20">return <expr pos:start="224:12" pos:end="224:19"><name pos:start="224:12" pos:end="224:19">buf_size</name></expr>;</return>

</block_content>}</block></function></unit>
