<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4073.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">mxf_read_sequence</name><parameter_list pos:start="1:29" pos:end="1:84">(<parameter pos:start="1:30" pos:end="1:38"><decl pos:start="1:30" pos:end="1:38"><type pos:start="1:30" pos:end="1:38"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">arg</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:55"><name pos:start="1:41" pos:end="1:51">AVIOContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">pb</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:64"><decl pos:start="1:58" pos:end="1:64"><type pos:start="1:58" pos:end="1:64"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:64">tag</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:74"><decl pos:start="1:67" pos:end="1:74"><type pos:start="1:67" pos:end="1:74"><name pos:start="1:67" pos:end="1:69">int</name></type> <name pos:start="1:71" pos:end="1:74">size</name></decl></parameter>, <parameter pos:start="1:77" pos:end="1:83"><decl pos:start="1:77" pos:end="1:83"><type pos:start="1:77" pos:end="1:83"><name pos:start="1:77" pos:end="1:79">UID</name></type> <name pos:start="1:81" pos:end="1:83">uid</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="5:5" pos:end="43:13">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">MXFSequence</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:25">sequence</name> <init pos:start="5:27" pos:end="5:31">= <expr pos:start="5:29" pos:end="5:31"><name pos:start="5:29" pos:end="5:31">arg</name></expr></init></decl>;</decl_stmt>

    <switch pos:start="7:5" pos:end="41:5">switch<condition pos:start="7:11" pos:end="7:15">(<expr pos:start="7:12" pos:end="7:14"><name pos:start="7:12" pos:end="7:14">tag</name></expr>)</condition> <block pos:start="7:17" pos:end="41:5">{<block_content pos:start="9:5" pos:end="39:14">

    <case pos:start="9:5" pos:end="9:16">case <expr pos:start="9:10" pos:end="9:15"><literal type="number" pos:start="9:10" pos:end="9:15">0x0202</literal></expr>:</case>

        <expr_stmt pos:start="11:9" pos:end="11:43"><expr pos:start="11:9" pos:end="11:42"><name pos:start="11:9" pos:end="11:26"><name pos:start="11:9" pos:end="11:16">sequence</name><operator pos:start="11:17" pos:end="11:18">-&gt;</operator><name pos:start="11:19" pos:end="11:26">duration</name></name> <operator pos:start="11:28" pos:end="11:28">=</operator> <call pos:start="11:30" pos:end="11:42"><name pos:start="11:30" pos:end="11:38">avio_rb64</name><argument_list pos:start="11:39" pos:end="11:42">(<argument pos:start="11:40" pos:end="11:41"><expr pos:start="11:40" pos:end="11:41"><name pos:start="11:40" pos:end="11:41">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="13:9" pos:end="13:14">break;</break>

    <case pos:start="15:5" pos:end="15:16">case <expr pos:start="15:10" pos:end="15:15"><literal type="number" pos:start="15:10" pos:end="15:15">0x0201</literal></expr>:</case>

        <expr_stmt pos:start="17:9" pos:end="17:56"><expr pos:start="17:9" pos:end="17:55"><call pos:start="17:9" pos:end="17:55"><name pos:start="17:9" pos:end="17:17">avio_read</name><argument_list pos:start="17:18" pos:end="17:55">(<argument pos:start="17:19" pos:end="17:20"><expr pos:start="17:19" pos:end="17:20"><name pos:start="17:19" pos:end="17:20">pb</name></expr></argument>, <argument pos:start="17:23" pos:end="17:50"><expr pos:start="17:23" pos:end="17:50"><name pos:start="17:23" pos:end="17:50"><name pos:start="17:23" pos:end="17:30">sequence</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:50">data_definition_ul</name></name></expr></argument>, <argument pos:start="17:53" pos:end="17:54"><expr pos:start="17:53" pos:end="17:54"><literal type="number" pos:start="17:53" pos:end="17:54">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="19:9" pos:end="19:14">break;</break>

    <case pos:start="21:5" pos:end="21:16">case <expr pos:start="21:10" pos:end="21:15"><literal type="number" pos:start="21:10" pos:end="21:15">0x1001</literal></expr>:</case>

        <expr_stmt pos:start="23:9" pos:end="23:62"><expr pos:start="23:9" pos:end="23:61"><name pos:start="23:9" pos:end="23:45"><name pos:start="23:9" pos:end="23:16">sequence</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:45">structural_components_count</name></name> <operator pos:start="23:47" pos:end="23:47">=</operator> <call pos:start="23:49" pos:end="23:61"><name pos:start="23:49" pos:end="23:57">avio_rb32</name><argument_list pos:start="23:58" pos:end="23:61">(<argument pos:start="23:59" pos:end="23:60"><expr pos:start="23:59" pos:end="23:60"><name pos:start="23:59" pos:end="23:60">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="27:22"><if pos:start="25:9" pos:end="27:22">if <condition pos:start="25:12" pos:end="25:76">(<expr pos:start="25:13" pos:end="25:75"><name pos:start="25:13" pos:end="25:49"><name pos:start="25:13" pos:end="25:20">sequence</name><operator pos:start="25:21" pos:end="25:22">-&gt;</operator><name pos:start="25:23" pos:end="25:49">structural_components_count</name></name> <operator pos:start="25:51" pos:end="25:52">&gt;=</operator> <name pos:start="25:54" pos:end="25:61">UINT_MAX</name> <operator pos:start="25:63" pos:end="25:63">/</operator> <sizeof pos:start="25:65" pos:end="25:75">sizeof<argument_list pos:start="25:71" pos:end="25:75">(<argument pos:start="25:72" pos:end="25:74"><expr pos:start="25:72" pos:end="25:74"><name pos:start="25:72" pos:end="25:74">UID</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:22"><block_content pos:start="27:13" pos:end="27:22">

            <return pos:start="27:13" pos:end="27:22">return <expr pos:start="27:20" pos:end="27:21"><operator pos:start="27:20" pos:end="27:20">-</operator><literal type="number" pos:start="27:21" pos:end="27:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:110"><expr pos:start="29:9" pos:end="29:109"><name pos:start="29:9" pos:end="29:44"><name pos:start="29:9" pos:end="29:16">sequence</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:44">structural_components_refs</name></name> <operator pos:start="29:46" pos:end="29:46">=</operator> <call pos:start="29:48" pos:end="29:109"><name pos:start="29:48" pos:end="29:56">av_malloc</name><argument_list pos:start="29:57" pos:end="29:109">(<argument pos:start="29:58" pos:end="29:108"><expr pos:start="29:58" pos:end="29:108"><name pos:start="29:58" pos:end="29:94"><name pos:start="29:58" pos:end="29:65">sequence</name><operator pos:start="29:66" pos:end="29:67">-&gt;</operator><name pos:start="29:68" pos:end="29:94">structural_components_count</name></name> <operator pos:start="29:96" pos:end="29:96">*</operator> <sizeof pos:start="29:98" pos:end="29:108">sizeof<argument_list pos:start="29:104" pos:end="29:108">(<argument pos:start="29:105" pos:end="29:107"><expr pos:start="29:105" pos:end="29:107"><name pos:start="29:105" pos:end="29:107">UID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="33:22"><if pos:start="31:9" pos:end="33:22">if <condition pos:start="31:12" pos:end="31:50">(<expr pos:start="31:13" pos:end="31:49"><operator pos:start="31:13" pos:end="31:13">!</operator><name pos:start="31:14" pos:end="31:49"><name pos:start="31:14" pos:end="31:21">sequence</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:49">structural_components_refs</name></name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:22"><block_content pos:start="33:13" pos:end="33:22">

            <return pos:start="33:13" pos:end="33:22">return <expr pos:start="33:20" pos:end="33:21"><operator pos:start="33:20" pos:end="33:20">-</operator><literal type="number" pos:start="33:21" pos:end="33:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:25"><expr pos:start="35:9" pos:end="35:24"><call pos:start="35:9" pos:end="35:24"><name pos:start="35:9" pos:end="35:17">avio_skip</name><argument_list pos:start="35:18" pos:end="35:24">(<argument pos:start="35:19" pos:end="35:20"><expr pos:start="35:19" pos:end="35:20"><name pos:start="35:19" pos:end="35:20">pb</name></expr></argument>, <argument pos:start="35:23" pos:end="35:23"><expr pos:start="35:23" pos:end="35:23"><literal type="number" pos:start="35:23" pos:end="35:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="35:27" pos:end="35:85">/* useless size of objects, always 16 according to specs */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:124"><expr pos:start="37:9" pos:end="37:123"><call pos:start="37:9" pos:end="37:123"><name pos:start="37:9" pos:end="37:17">avio_read</name><argument_list pos:start="37:18" pos:end="37:123">(<argument pos:start="37:19" pos:end="37:20"><expr pos:start="37:19" pos:end="37:20"><name pos:start="37:19" pos:end="37:20">pb</name></expr></argument>, <argument pos:start="37:23" pos:end="37:69"><expr pos:start="37:23" pos:end="37:69"><operator pos:start="37:23" pos:end="37:23">(</operator><name pos:start="37:24" pos:end="37:30">uint8_t</name> <operator pos:start="37:32" pos:end="37:32">*</operator><operator pos:start="37:33" pos:end="37:33">)</operator><name pos:start="37:34" pos:end="37:69"><name pos:start="37:34" pos:end="37:41">sequence</name><operator pos:start="37:42" pos:end="37:43">-&gt;</operator><name pos:start="37:44" pos:end="37:69">structural_components_refs</name></name></expr></argument>, <argument pos:start="37:72" pos:end="37:122"><expr pos:start="37:72" pos:end="37:122"><name pos:start="37:72" pos:end="37:108"><name pos:start="37:72" pos:end="37:79">sequence</name><operator pos:start="37:80" pos:end="37:81">-&gt;</operator><name pos:start="37:82" pos:end="37:108">structural_components_count</name></name> <operator pos:start="37:110" pos:end="37:110">*</operator> <sizeof pos:start="37:112" pos:end="37:122">sizeof<argument_list pos:start="37:118" pos:end="37:122">(<argument pos:start="37:119" pos:end="37:121"><expr pos:start="37:119" pos:end="37:121"><name pos:start="37:119" pos:end="37:121">UID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="43:5" pos:end="43:13">return <expr pos:start="43:12" pos:end="43:12"><literal type="number" pos:start="43:12" pos:end="43:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
