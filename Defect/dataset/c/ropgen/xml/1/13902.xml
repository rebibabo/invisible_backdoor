<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13902.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">helper_divl_EAX_T0</name><parameter_list pos:start="1:24" pos:end="1:29">(<parameter pos:start="1:25" pos:end="1:28"><decl pos:start="1:25" pos:end="1:28"><type pos:start="1:25" pos:end="1:28"><name pos:start="1:25" pos:end="1:28">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="37:1">{<block_content pos:start="5:5" pos:end="35:22">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:20">den</name></decl>, <decl pos:start="5:23" pos:end="5:23"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:23" pos:end="5:23">q</name></decl>, <decl pos:start="5:26" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:26" pos:end="5:26">r</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:16">num</name></decl>;</decl_stmt>

    

    <expr_stmt pos:start="11:5" pos:end="11:62"><expr pos:start="11:5" pos:end="11:61"><name pos:start="11:5" pos:end="11:7">num</name> <operator pos:start="11:9" pos:end="11:9">=</operator> <operator pos:start="11:11" pos:end="11:11">(</operator><operator pos:start="11:12" pos:end="11:12">(</operator><name pos:start="11:13" pos:end="11:20">uint32_t</name><operator pos:start="11:21" pos:end="11:21">)</operator><name pos:start="11:22" pos:end="11:24">EAX</name><operator pos:start="11:25" pos:end="11:25">)</operator> <operator pos:start="11:27" pos:end="11:27">|</operator> <operator pos:start="11:29" pos:end="11:29">(</operator><operator pos:start="11:30" pos:end="11:30">(</operator><name pos:start="11:31" pos:end="11:38">uint64_t</name><operator pos:start="11:39" pos:end="11:39">)</operator><operator pos:start="11:40" pos:end="11:40">(</operator><operator pos:start="11:41" pos:end="11:41">(</operator><name pos:start="11:42" pos:end="11:49">uint32_t</name><operator pos:start="11:50" pos:end="11:50">)</operator><name pos:start="11:51" pos:end="11:53">EDX</name><operator pos:start="11:54" pos:end="11:54">)</operator> <operator pos:start="11:56" pos:end="11:57">&lt;&lt;</operator> <literal type="number" pos:start="11:59" pos:end="11:60">32</literal><operator pos:start="11:61" pos:end="11:61">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:13"><expr pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:7">den</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <name pos:start="13:11" pos:end="13:12">T0</name></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="22:0"><if pos:start="15:5" pos:end="22:0">if <condition pos:start="15:8" pos:end="15:17">(<expr pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:11">den</name> <operator pos:start="15:13" pos:end="15:14">==</operator> <literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>)</condition> <block pos:start="15:19" pos:end="22:0">{<block_content pos:start="17:9" pos:end="17:37">

        <expr_stmt pos:start="17:9" pos:end="17:37"><expr pos:start="17:9" pos:end="17:36"><call pos:start="17:9" pos:end="17:36"><name pos:start="17:9" pos:end="17:23">raise_exception</name><argument_list pos:start="17:24" pos:end="17:36">(<argument pos:start="17:25" pos:end="17:35"><expr pos:start="17:25" pos:end="17:35"><name pos:start="17:25" pos:end="17:35">EXCP00_DIVZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="21:1" pos:end="21:22">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:22">BUGGY_GCC_DIV64</name></cpp:ifdef>

    <expr_stmt pos:start="23:5" pos:end="26:0"><expr pos:start="23:5" pos:end="23:27"><name pos:start="23:5" pos:end="23:5">r</name> <operator pos:start="23:7" pos:end="23:7">=</operator> <call pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:13">div32</name><argument_list pos:start="23:14" pos:end="23:27">(<argument pos:start="23:15" pos:end="23:16"><expr pos:start="23:15" pos:end="23:16"><operator pos:start="23:15" pos:end="23:15">&amp;</operator><name pos:start="23:16" pos:end="23:16">q</name></expr></argument>, <argument pos:start="23:19" pos:end="23:21"><expr pos:start="23:19" pos:end="23:21"><name pos:start="23:19" pos:end="23:21">num</name></expr></argument>, <argument pos:start="23:24" pos:end="23:26"><expr pos:start="23:24" pos:end="23:26"><name pos:start="23:24" pos:end="23:26">den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="25:1" pos:end="25:5">#<cpp:directive pos:start="25:2" pos:end="25:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="27:5" pos:end="27:20"><expr pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:5">q</name> <operator pos:start="27:7" pos:end="27:7">=</operator> <operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:12">num</name> <operator pos:start="27:14" pos:end="27:14">/</operator> <name pos:start="27:16" pos:end="27:18">den</name><operator pos:start="27:19" pos:end="27:19">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="32:0"><expr pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:5">r</name> <operator pos:start="29:7" pos:end="29:7">=</operator> <operator pos:start="29:9" pos:end="29:9">(</operator><name pos:start="29:10" pos:end="29:12">num</name> <operator pos:start="29:14" pos:end="29:14">%</operator> <name pos:start="29:16" pos:end="29:18">den</name><operator pos:start="29:19" pos:end="29:19">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="33:5" pos:end="33:22"><expr pos:start="33:5" pos:end="33:21"><name pos:start="33:5" pos:end="33:7">EAX</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <operator pos:start="33:11" pos:end="33:11">(</operator><name pos:start="33:12" pos:end="33:19">uint32_t</name><operator pos:start="33:20" pos:end="33:20">)</operator><name pos:start="33:21" pos:end="33:21">q</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:22"><expr pos:start="35:5" pos:end="35:21"><name pos:start="35:5" pos:end="35:7">EDX</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <operator pos:start="35:11" pos:end="35:11">(</operator><name pos:start="35:12" pos:end="35:19">uint32_t</name><operator pos:start="35:20" pos:end="35:20">)</operator><name pos:start="35:21" pos:end="35:21">r</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
