<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4537.c" pos:tabs="8"><decl_stmt pos:start="1:1" pos:end="335:1"><decl pos:start="1:1" pos:end="335:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">encode_block</name><argument_list pos:start="1:24" pos:end="1:95">(<argument pos:start="1:25" pos:end="1:42"><expr pos:start="1:25" pos:end="1:42"><name pos:start="1:25" pos:end="1:39">WMACodecContext</name> <operator pos:start="1:41" pos:end="1:41">*</operator><name pos:start="1:42" pos:end="1:42">s</name></expr></argument>, <argument pos:start="1:45" pos:end="1:78"><expr pos:start="1:45" pos:end="1:78"><call pos:start="1:45" pos:end="1:62"><name pos:start="1:45" pos:end="1:49">float</name> <argument_list pos:start="1:51" pos:end="1:62">(<argument pos:start="1:52" pos:end="1:61"><expr pos:start="1:52" pos:end="1:61"><operator pos:start="1:52" pos:end="1:52">*</operator><name pos:start="1:53" pos:end="1:61">src_coefs</name></expr></argument>)</argument_list></call><index pos:start="1:63" pos:end="1:78">[<expr pos:start="1:64" pos:end="1:77"><name pos:start="1:64" pos:end="1:77">BLOCK_MAX_SIZE</name></expr>]</index></expr></argument>, <argument pos:start="1:81" pos:end="1:94"><expr pos:start="1:81" pos:end="1:94"><name pos:start="1:81" pos:end="1:83">int</name> <name pos:start="1:85" pos:end="1:94">total_gain</name></expr></argument>)</argument_list><block pos:start="1:96" pos:end="335:1">{<block_content pos:start="3:5" pos:end="333:13">

    <decl_stmt pos:start="3:5" pos:end="3:52"><decl pos:start="3:5" pos:end="3:9"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:9">v</name></decl>, <decl pos:start="3:12" pos:end="3:16"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:12" pos:end="3:16">bsize</name></decl>, <decl pos:start="3:19" pos:end="3:20"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:19" pos:end="3:20">ch</name></decl>, <decl pos:start="3:23" pos:end="3:34"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:23" pos:end="3:34">coef_nb_bits</name></decl>, <decl pos:start="3:37" pos:end="3:51"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:37" pos:end="3:51">parse_exponents</name></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:9"><name pos:start="5:5" pos:end="5:9">float</name></type> <name pos:start="5:11" pos:end="5:19">mdct_norm</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:30"><name pos:start="7:9" pos:end="7:16">nb_coefs</name><index pos:start="7:17" pos:end="7:30">[<expr pos:start="7:18" pos:end="7:29"><name pos:start="7:18" pos:end="7:29">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:112"><decl pos:start="9:5" pos:end="9:111"><type pos:start="9:5" pos:end="9:20"><specifier pos:start="9:5" pos:end="9:10">static</specifier> <specifier pos:start="9:12" pos:end="9:16">const</specifier> <name pos:start="9:18" pos:end="9:20">int</name></type> <name pos:start="9:22" pos:end="9:34"><name pos:start="9:22" pos:end="9:30">fixed_exp</name><index pos:start="9:31" pos:end="9:34">[<expr pos:start="9:32" pos:end="9:33"><literal type="number" pos:start="9:32" pos:end="9:33">25</literal></expr>]</index></name><init pos:start="9:35" pos:end="9:111">=<expr pos:start="9:36" pos:end="9:111"><block pos:start="9:36" pos:end="9:111">{<expr pos:start="9:37" pos:end="9:38"><literal type="number" pos:start="9:37" pos:end="9:38">20</literal></expr>,<expr pos:start="9:40" pos:end="9:41"><literal type="number" pos:start="9:40" pos:end="9:41">20</literal></expr>,<expr pos:start="9:43" pos:end="9:44"><literal type="number" pos:start="9:43" pos:end="9:44">20</literal></expr>,<expr pos:start="9:46" pos:end="9:47"><literal type="number" pos:start="9:46" pos:end="9:47">20</literal></expr>,<expr pos:start="9:49" pos:end="9:50"><literal type="number" pos:start="9:49" pos:end="9:50">20</literal></expr>,<expr pos:start="9:52" pos:end="9:53"><literal type="number" pos:start="9:52" pos:end="9:53">20</literal></expr>,<expr pos:start="9:55" pos:end="9:56"><literal type="number" pos:start="9:55" pos:end="9:56">20</literal></expr>,<expr pos:start="9:58" pos:end="9:59"><literal type="number" pos:start="9:58" pos:end="9:59">20</literal></expr>,<expr pos:start="9:61" pos:end="9:62"><literal type="number" pos:start="9:61" pos:end="9:62">20</literal></expr>,<expr pos:start="9:64" pos:end="9:65"><literal type="number" pos:start="9:64" pos:end="9:65">20</literal></expr>,<expr pos:start="9:67" pos:end="9:68"><literal type="number" pos:start="9:67" pos:end="9:68">20</literal></expr>,<expr pos:start="9:70" pos:end="9:71"><literal type="number" pos:start="9:70" pos:end="9:71">20</literal></expr>,<expr pos:start="9:73" pos:end="9:74"><literal type="number" pos:start="9:73" pos:end="9:74">20</literal></expr>,<expr pos:start="9:76" pos:end="9:77"><literal type="number" pos:start="9:76" pos:end="9:77">20</literal></expr>,<expr pos:start="9:79" pos:end="9:80"><literal type="number" pos:start="9:79" pos:end="9:80">20</literal></expr>,<expr pos:start="9:82" pos:end="9:83"><literal type="number" pos:start="9:82" pos:end="9:83">20</literal></expr>,<expr pos:start="9:85" pos:end="9:86"><literal type="number" pos:start="9:85" pos:end="9:86">20</literal></expr>,<expr pos:start="9:88" pos:end="9:89"><literal type="number" pos:start="9:88" pos:end="9:89">20</literal></expr>,<expr pos:start="9:91" pos:end="9:92"><literal type="number" pos:start="9:91" pos:end="9:92">20</literal></expr>,<expr pos:start="9:94" pos:end="9:95"><literal type="number" pos:start="9:94" pos:end="9:95">20</literal></expr>,<expr pos:start="9:97" pos:end="9:98"><literal type="number" pos:start="9:97" pos:end="9:98">20</literal></expr>,<expr pos:start="9:100" pos:end="9:101"><literal type="number" pos:start="9:100" pos:end="9:101">20</literal></expr>,<expr pos:start="9:103" pos:end="9:104"><literal type="number" pos:start="9:103" pos:end="9:104">20</literal></expr>,<expr pos:start="9:106" pos:end="9:107"><literal type="number" pos:start="9:106" pos:end="9:107">20</literal></expr>,<expr pos:start="9:109" pos:end="9:110"><literal type="number" pos:start="9:109" pos:end="9:110">20</literal></expr>}</block></expr></init></decl>;</decl_stmt>



    <comment type="line" pos:start="13:5" pos:end="13:50">//FIXME remove duplication relative to decoder</comment>

    <if_stmt pos:start="15:5" pos:end="29:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:34">(<expr pos:start="15:9" pos:end="15:33"><name pos:start="15:9" pos:end="15:33"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:33">use_variable_block_len</name></name></expr>)</condition> <block pos:start="15:36" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:18">

        <expr_stmt pos:start="17:9" pos:end="17:18"><expr pos:start="17:9" pos:end="17:17"><call pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:14">assert</name><argument_list pos:start="17:15" pos:end="17:17">(<argument pos:start="17:16" pos:end="17:16"><expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="17:20" pos:end="17:42">//FIXME not implemented</comment>

    </block_content>}</block></if><else pos:start="19:6" pos:end="29:5">else<block pos:start="19:10" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:46">

        <comment type="block" pos:start="21:9" pos:end="21:29">/* fixed block len */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:51"><expr pos:start="23:9" pos:end="23:50"><name pos:start="23:9" pos:end="23:30"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:30">next_block_len_bits</name></name> <operator pos:start="23:32" pos:end="23:32">=</operator> <name pos:start="23:34" pos:end="23:50"><name pos:start="23:34" pos:end="23:34">s</name><operator pos:start="23:35" pos:end="23:36">-&gt;</operator><name pos:start="23:37" pos:end="23:50">frame_len_bits</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:51"><expr pos:start="25:9" pos:end="25:50"><name pos:start="25:9" pos:end="25:30"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:30">prev_block_len_bits</name></name> <operator pos:start="25:32" pos:end="25:32">=</operator> <name pos:start="25:34" pos:end="25:50"><name pos:start="25:34" pos:end="25:34">s</name><operator pos:start="25:35" pos:end="25:36">-&gt;</operator><name pos:start="25:37" pos:end="25:50">frame_len_bits</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:46"><expr pos:start="27:9" pos:end="27:45"><name pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:25">block_len_bits</name></name> <operator pos:start="27:27" pos:end="27:27">=</operator> <name pos:start="27:29" pos:end="27:45"><name pos:start="27:29" pos:end="27:29">s</name><operator pos:start="27:30" pos:end="27:31">-&gt;</operator><name pos:start="27:32" pos:end="27:45">frame_len_bits</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:42"><expr pos:start="33:5" pos:end="33:41"><name pos:start="33:5" pos:end="33:16"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:16">block_len</name></name> <operator pos:start="33:18" pos:end="33:18">=</operator> <literal type="number" pos:start="33:20" pos:end="33:20">1</literal> <operator pos:start="33:22" pos:end="33:23">&lt;&lt;</operator> <name pos:start="33:25" pos:end="33:41"><name pos:start="33:25" pos:end="33:25">s</name><operator pos:start="33:26" pos:end="33:27">-&gt;</operator><name pos:start="33:28" pos:end="33:41">block_len_bits</name></name></expr>;</expr_stmt>

<comment type="line" pos:start="35:1" pos:end="35:61">//     assert((s-&gt;block_pos + s-&gt;block_len) &lt;= s-&gt;frame_len);</comment>

    <expr_stmt pos:start="37:5" pos:end="37:50"><expr pos:start="37:5" pos:end="37:49"><name pos:start="37:5" pos:end="37:9">bsize</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <name pos:start="37:13" pos:end="37:29"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:29">frame_len_bits</name></name> <operator pos:start="37:31" pos:end="37:31">-</operator> <name pos:start="37:33" pos:end="37:49"><name pos:start="37:33" pos:end="37:33">s</name><operator pos:start="37:34" pos:end="37:35">-&gt;</operator><name pos:start="37:36" pos:end="37:49">block_len_bits</name></name></expr>;</expr_stmt>



    <comment type="line" pos:start="41:5" pos:end="41:18">//FIXME factor</comment>

    <expr_stmt pos:start="43:5" pos:end="43:45"><expr pos:start="43:5" pos:end="43:44"><name pos:start="43:5" pos:end="43:5">v</name> <operator pos:start="43:7" pos:end="43:7">=</operator> <name pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:20">coefs_end</name><index pos:start="43:21" pos:end="43:27">[<expr pos:start="43:22" pos:end="43:26"><name pos:start="43:22" pos:end="43:26">bsize</name></expr>]</index></name> <operator pos:start="43:29" pos:end="43:29">-</operator> <name pos:start="43:31" pos:end="43:44"><name pos:start="43:31" pos:end="43:31">s</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:44">coefs_start</name></name></expr>;</expr_stmt>

    <for pos:start="45:5" pos:end="47:25">for<control pos:start="45:8" pos:end="45:42">(<init pos:start="45:9" pos:end="45:15"><expr pos:start="45:9" pos:end="45:14"><name pos:start="45:9" pos:end="45:10">ch</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>;</init> <condition pos:start="45:17" pos:end="45:36"><expr pos:start="45:17" pos:end="45:35"><name pos:start="45:17" pos:end="45:18">ch</name> <operator pos:start="45:20" pos:end="45:20">&lt;</operator> <name pos:start="45:22" pos:end="45:35"><name pos:start="45:22" pos:end="45:22">s</name><operator pos:start="45:23" pos:end="45:24">-&gt;</operator><name pos:start="45:25" pos:end="45:35">nb_channels</name></name></expr>;</condition> <incr pos:start="45:38" pos:end="45:41"><expr pos:start="45:38" pos:end="45:41"><name pos:start="45:38" pos:end="45:39">ch</name><operator pos:start="45:40" pos:end="45:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="47:9" pos:end="47:25"><block_content pos:start="47:9" pos:end="47:25">

        <expr_stmt pos:start="47:9" pos:end="47:25"><expr pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:16">nb_coefs</name><index pos:start="47:17" pos:end="47:20">[<expr pos:start="47:18" pos:end="47:19"><name pos:start="47:18" pos:end="47:19">ch</name></expr>]</index></name> <operator pos:start="47:22" pos:end="47:22">=</operator> <name pos:start="47:24" pos:end="47:24">v</name></expr>;</expr_stmt></block_content></block></for>

    <block pos:start="49:5" pos:end="61:5">{<block_content pos:start="51:9" pos:end="59:9">

        <decl_stmt pos:start="51:9" pos:end="51:34"><decl pos:start="51:9" pos:end="51:33"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:14">n4</name> <init pos:start="51:16" pos:end="51:33">= <expr pos:start="51:18" pos:end="51:33"><name pos:start="51:18" pos:end="51:29"><name pos:start="51:18" pos:end="51:18">s</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:29">block_len</name></name> <operator pos:start="51:31" pos:end="51:31">/</operator> <literal type="number" pos:start="51:33" pos:end="51:33">2</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:36"><expr pos:start="53:9" pos:end="53:35"><name pos:start="53:9" pos:end="53:17">mdct_norm</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <literal type="number" pos:start="53:21" pos:end="53:23">1.0</literal> <operator pos:start="53:25" pos:end="53:25">/</operator> <operator pos:start="53:27" pos:end="53:27">(</operator><name pos:start="53:28" pos:end="53:32">float</name><operator pos:start="53:33" pos:end="53:33">)</operator><name pos:start="53:34" pos:end="53:35">n4</name></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:28">(<expr pos:start="55:13" pos:end="55:27"><name pos:start="55:13" pos:end="55:22"><name pos:start="55:13" pos:end="55:13">s</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:22">version</name></name> <operator pos:start="55:24" pos:end="55:25">==</operator> <literal type="number" pos:start="55:27" pos:end="55:27">1</literal></expr>)</condition> <block pos:start="55:30" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:34">

            <expr_stmt pos:start="57:13" pos:end="57:34"><expr pos:start="57:13" pos:end="57:33"><name pos:start="57:13" pos:end="57:21">mdct_norm</name> <operator pos:start="57:23" pos:end="57:24">*=</operator> <call pos:start="57:26" pos:end="57:33"><name pos:start="57:26" pos:end="57:29">sqrt</name><argument_list pos:start="57:30" pos:end="57:33">(<argument pos:start="57:31" pos:end="57:32"><expr pos:start="57:31" pos:end="57:32"><name pos:start="57:31" pos:end="57:32">n4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:28">(<expr pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:22">nb_channels</name></name> <operator pos:start="65:24" pos:end="65:25">==</operator> <literal type="number" pos:start="65:27" pos:end="65:27">2</literal></expr>)</condition> <block pos:start="65:30" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:44">

        <expr_stmt pos:start="67:9" pos:end="67:44"><expr pos:start="67:9" pos:end="67:43"><call pos:start="67:9" pos:end="67:43"><name pos:start="67:9" pos:end="67:16">put_bits</name><argument_list pos:start="67:17" pos:end="67:43">(<argument pos:start="67:18" pos:end="67:23"><expr pos:start="67:18" pos:end="67:23"><operator pos:start="67:18" pos:end="67:18">&amp;</operator><name pos:start="67:19" pos:end="67:23"><name pos:start="67:19" pos:end="67:19">s</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:23">pb</name></name></expr></argument>, <argument pos:start="67:26" pos:end="67:26"><expr pos:start="67:26" pos:end="67:26"><literal type="number" pos:start="67:26" pos:end="67:26">1</literal></expr></argument>, <argument pos:start="67:29" pos:end="67:42"><expr pos:start="67:29" pos:end="67:42"><operator pos:start="67:29" pos:end="67:29">!</operator><operator pos:start="67:30" pos:end="67:30">!</operator><name pos:start="67:31" pos:end="67:42"><name pos:start="67:31" pos:end="67:31">s</name><operator pos:start="67:32" pos:end="67:33">-&gt;</operator><name pos:start="67:34" pos:end="67:42">ms_stereo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="73:5" pos:end="83:5">for<control pos:start="73:8" pos:end="73:42">(<init pos:start="73:9" pos:end="73:15"><expr pos:start="73:9" pos:end="73:14"><name pos:start="73:9" pos:end="73:10">ch</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <literal type="number" pos:start="73:14" pos:end="73:14">0</literal></expr>;</init> <condition pos:start="73:17" pos:end="73:36"><expr pos:start="73:17" pos:end="73:35"><name pos:start="73:17" pos:end="73:18">ch</name> <operator pos:start="73:20" pos:end="73:20">&lt;</operator> <name pos:start="73:22" pos:end="73:35"><name pos:start="73:22" pos:end="73:22">s</name><operator pos:start="73:23" pos:end="73:24">-&gt;</operator><name pos:start="73:25" pos:end="73:35">nb_channels</name></name></expr>;</condition> <incr pos:start="73:38" pos:end="73:41"><expr pos:start="73:38" pos:end="73:41"><name pos:start="73:38" pos:end="73:39">ch</name><operator pos:start="73:40" pos:end="73:41">++</operator></expr></incr>)</control> <block pos:start="73:44" pos:end="83:5">{<block_content pos:start="75:9" pos:end="81:9">

        <expr_stmt pos:start="75:9" pos:end="75:33"><expr pos:start="75:9" pos:end="75:32"><name pos:start="75:9" pos:end="75:28"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:24">channel_coded</name><index pos:start="75:25" pos:end="75:28">[<expr pos:start="75:26" pos:end="75:27"><name pos:start="75:26" pos:end="75:27">ch</name></expr>]</index></name> <operator pos:start="75:30" pos:end="75:30">=</operator> <literal type="number" pos:start="75:32" pos:end="75:32">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="75:35" pos:end="75:95">//FIXME only set channel_coded when needed, instead of always</comment>

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:33">(<expr pos:start="77:13" pos:end="77:32"><name pos:start="77:13" pos:end="77:32"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:28">channel_coded</name><index pos:start="77:29" pos:end="77:32">[<expr pos:start="77:30" pos:end="77:31"><name pos:start="77:30" pos:end="77:31">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="77:35" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:39">

            <expr_stmt pos:start="79:13" pos:end="79:39"><expr pos:start="79:13" pos:end="79:38"><call pos:start="79:13" pos:end="79:38"><name pos:start="79:13" pos:end="79:20">init_exp</name><argument_list pos:start="79:21" pos:end="79:38">(<argument pos:start="79:22" pos:end="79:22"><expr pos:start="79:22" pos:end="79:22"><name pos:start="79:22" pos:end="79:22">s</name></expr></argument>, <argument pos:start="79:25" pos:end="79:26"><expr pos:start="79:25" pos:end="79:26"><name pos:start="79:25" pos:end="79:26">ch</name></expr></argument>, <argument pos:start="79:29" pos:end="79:37"><expr pos:start="79:29" pos:end="79:37"><name pos:start="79:29" pos:end="79:37">fixed_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="87:5" pos:end="137:5">for<control pos:start="87:8" pos:end="87:42">(<init pos:start="87:9" pos:end="87:15"><expr pos:start="87:9" pos:end="87:14"><name pos:start="87:9" pos:end="87:10">ch</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <literal type="number" pos:start="87:14" pos:end="87:14">0</literal></expr>;</init> <condition pos:start="87:17" pos:end="87:36"><expr pos:start="87:17" pos:end="87:35"><name pos:start="87:17" pos:end="87:18">ch</name> <operator pos:start="87:20" pos:end="87:20">&lt;</operator> <name pos:start="87:22" pos:end="87:35"><name pos:start="87:22" pos:end="87:22">s</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:35">nb_channels</name></name></expr>;</condition> <incr pos:start="87:38" pos:end="87:41"><expr pos:start="87:38" pos:end="87:41"><name pos:start="87:38" pos:end="87:39">ch</name><operator pos:start="87:40" pos:end="87:41">++</operator></expr></incr>)</control> <block pos:start="87:44" pos:end="137:5">{<block_content pos:start="89:9" pos:end="135:9">

        <if_stmt pos:start="89:9" pos:end="135:9"><if pos:start="89:9" pos:end="135:9">if <condition pos:start="89:12" pos:end="89:33">(<expr pos:start="89:13" pos:end="89:32"><name pos:start="89:13" pos:end="89:32"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:28">channel_coded</name><index pos:start="89:29" pos:end="89:32">[<expr pos:start="89:30" pos:end="89:31"><name pos:start="89:30" pos:end="89:31">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="89:35" pos:end="135:9">{<block_content pos:start="91:13" pos:end="133:13">

            <decl_stmt pos:start="91:13" pos:end="91:28"><decl pos:start="91:13" pos:end="91:27"><type pos:start="91:13" pos:end="91:21"><name pos:start="91:13" pos:end="91:19">WMACoef</name> <modifier pos:start="91:21" pos:end="91:21">*</modifier></type><name pos:start="91:22" pos:end="91:27">coefs1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="93:13" pos:end="93:43"><decl pos:start="93:13" pos:end="93:24"><type pos:start="93:13" pos:end="93:19"><name pos:start="93:13" pos:end="93:17">float</name> <modifier pos:start="93:19" pos:end="93:19">*</modifier></type><name pos:start="93:20" pos:end="93:24">coefs</name></decl>, <decl pos:start="93:27" pos:end="93:36"><type ref="prev" pos:start="93:13" pos:end="93:19"><modifier pos:start="93:27" pos:end="93:27">*</modifier></type><name pos:start="93:28" pos:end="93:36">exponents</name></decl>, <decl pos:start="93:39" pos:end="93:42"><type ref="prev" pos:start="93:13" pos:end="93:19"/><name pos:start="93:39" pos:end="93:42">mult</name></decl>;</decl_stmt>

            <decl_stmt pos:start="95:13" pos:end="95:21"><decl pos:start="95:13" pos:end="95:17"><type pos:start="95:13" pos:end="95:15"><name pos:start="95:13" pos:end="95:15">int</name></type> <name pos:start="95:17" pos:end="95:17">i</name></decl>, <decl pos:start="95:20" pos:end="95:20"><type ref="prev" pos:start="95:13" pos:end="95:15"/><name pos:start="95:20" pos:end="95:20">n</name></decl>;</decl_stmt>



            <expr_stmt pos:start="99:13" pos:end="99:35"><expr pos:start="99:13" pos:end="99:34"><name pos:start="99:13" pos:end="99:18">coefs1</name> <operator pos:start="99:20" pos:end="99:20">=</operator> <name pos:start="99:22" pos:end="99:34"><name pos:start="99:22" pos:end="99:22">s</name><operator pos:start="99:23" pos:end="99:24">-&gt;</operator><name pos:start="99:25" pos:end="99:30">coefs1</name><index pos:start="99:31" pos:end="99:34">[<expr pos:start="99:32" pos:end="99:33"><name pos:start="99:32" pos:end="99:33">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:41"><expr pos:start="101:13" pos:end="101:40"><name pos:start="101:13" pos:end="101:21">exponents</name> <operator pos:start="101:23" pos:end="101:23">=</operator> <name pos:start="101:25" pos:end="101:40"><name pos:start="101:25" pos:end="101:25">s</name><operator pos:start="101:26" pos:end="101:27">-&gt;</operator><name pos:start="101:28" pos:end="101:36">exponents</name><index pos:start="101:37" pos:end="101:40">[<expr pos:start="101:38" pos:end="101:39"><name pos:start="101:38" pos:end="101:39">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:68"><expr pos:start="103:13" pos:end="103:67"><name pos:start="103:13" pos:end="103:16">mult</name> <operator pos:start="103:18" pos:end="103:18">=</operator> <call pos:start="103:20" pos:end="103:45"><name pos:start="103:20" pos:end="103:22">pow</name><argument_list pos:start="103:23" pos:end="103:45">(<argument pos:start="103:24" pos:end="103:25"><expr pos:start="103:24" pos:end="103:25"><literal type="number" pos:start="103:24" pos:end="103:25">10</literal></expr></argument>, <argument pos:start="103:28" pos:end="103:44"><expr pos:start="103:28" pos:end="103:44"><name pos:start="103:28" pos:end="103:37">total_gain</name> <operator pos:start="103:39" pos:end="103:39">*</operator> <literal type="number" pos:start="103:41" pos:end="103:44">0.05</literal></expr></argument>)</argument_list></call> <operator pos:start="103:47" pos:end="103:47">/</operator> <name pos:start="103:49" pos:end="103:67"><name pos:start="103:49" pos:end="103:49">s</name><operator pos:start="103:50" pos:end="103:51">-&gt;</operator><name pos:start="103:52" pos:end="103:63">max_exponent</name><index pos:start="103:64" pos:end="103:67">[<expr pos:start="103:65" pos:end="103:66"><name pos:start="103:65" pos:end="103:66">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:30"><expr pos:start="105:13" pos:end="105:29"><name pos:start="105:13" pos:end="105:16">mult</name> <operator pos:start="105:18" pos:end="105:19">*=</operator> <name pos:start="105:21" pos:end="105:29">mdct_norm</name></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:34"><expr pos:start="107:13" pos:end="107:33"><name pos:start="107:13" pos:end="107:17">coefs</name> <operator pos:start="107:19" pos:end="107:19">=</operator> <name pos:start="107:21" pos:end="107:33"><name pos:start="107:21" pos:end="107:29">src_coefs</name><index pos:start="107:30" pos:end="107:33">[<expr pos:start="107:31" pos:end="107:32"><name pos:start="107:31" pos:end="107:32">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="109:13" pos:end="133:13"><if pos:start="109:13" pos:end="113:13">if <condition pos:start="109:16" pos:end="109:41">(<expr pos:start="109:17" pos:end="109:40"><name pos:start="109:17" pos:end="109:35"><name pos:start="109:17" pos:end="109:17">s</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:35">use_noise_coding</name></name> <operator pos:start="109:37" pos:end="109:38">&amp;&amp;</operator> <literal type="number" pos:start="109:40" pos:end="109:40">0</literal></expr>)</condition> <block pos:start="109:43" pos:end="113:13">{<block_content pos:start="111:17" pos:end="111:26">

                <expr_stmt pos:start="111:17" pos:end="111:26"><expr pos:start="111:17" pos:end="111:25"><call pos:start="111:17" pos:end="111:25"><name pos:start="111:17" pos:end="111:22">assert</name><argument_list pos:start="111:23" pos:end="111:25">(<argument pos:start="111:24" pos:end="111:24"><expr pos:start="111:24" pos:end="111:24"><literal type="number" pos:start="111:24" pos:end="111:24">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="111:28" pos:end="111:50">//FIXME not implemented</comment>

            </block_content>}</block></if> <else pos:start="113:15" pos:end="133:13">else <block pos:start="113:20" pos:end="133:13">{<block_content pos:start="115:17" pos:end="131:17">

                <expr_stmt pos:start="115:17" pos:end="115:40"><expr pos:start="115:17" pos:end="115:39"><name pos:start="115:17" pos:end="115:21">coefs</name> <operator pos:start="115:23" pos:end="115:24">+=</operator> <name pos:start="115:26" pos:end="115:39"><name pos:start="115:26" pos:end="115:26">s</name><operator pos:start="115:27" pos:end="115:28">-&gt;</operator><name pos:start="115:29" pos:end="115:39">coefs_start</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:33"><expr pos:start="117:17" pos:end="117:32"><name pos:start="117:17" pos:end="117:17">n</name> <operator pos:start="117:19" pos:end="117:19">=</operator> <name pos:start="117:21" pos:end="117:32"><name pos:start="117:21" pos:end="117:28">nb_coefs</name><index pos:start="117:29" pos:end="117:32">[<expr pos:start="117:30" pos:end="117:31"><name pos:start="117:30" pos:end="117:31">ch</name></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="119:17" pos:end="131:17">for<control pos:start="119:20" pos:end="119:37">(<init pos:start="119:21" pos:end="119:26"><expr pos:start="119:21" pos:end="119:25"><name pos:start="119:21" pos:end="119:21">i</name> <operator pos:start="119:23" pos:end="119:23">=</operator> <literal type="number" pos:start="119:25" pos:end="119:25">0</literal></expr>;</init><condition pos:start="119:27" pos:end="119:32"><expr pos:start="119:27" pos:end="119:31"><name pos:start="119:27" pos:end="119:27">i</name> <operator pos:start="119:29" pos:end="119:29">&lt;</operator> <name pos:start="119:31" pos:end="119:31">n</name></expr>;</condition> <incr pos:start="119:34" pos:end="119:36"><expr pos:start="119:34" pos:end="119:36"><name pos:start="119:34" pos:end="119:34">i</name><operator pos:start="119:35" pos:end="119:36">++</operator></expr></incr>)</control><block pos:start="119:38" pos:end="131:17">{<block_content pos:start="121:21" pos:end="129:41">

                    <decl_stmt pos:start="121:21" pos:end="121:63"><decl pos:start="121:21" pos:end="121:62"><type pos:start="121:21" pos:end="121:26"><name pos:start="121:21" pos:end="121:26">double</name></type> <name pos:start="121:28" pos:end="121:28">t</name><init pos:start="121:29" pos:end="121:62">= <expr pos:start="121:31" pos:end="121:62"><operator pos:start="121:31" pos:end="121:31">*</operator><name pos:start="121:32" pos:end="121:36">coefs</name><operator pos:start="121:37" pos:end="121:38">++</operator> <operator pos:start="121:40" pos:end="121:40">/</operator> <operator pos:start="121:42" pos:end="121:42">(</operator><name pos:start="121:43" pos:end="121:54"><name pos:start="121:43" pos:end="121:51">exponents</name><index pos:start="121:52" pos:end="121:54">[<expr pos:start="121:53" pos:end="121:53"><name pos:start="121:53" pos:end="121:53">i</name></expr>]</index></name> <operator pos:start="121:56" pos:end="121:56">*</operator> <name pos:start="121:58" pos:end="121:61">mult</name><operator pos:start="121:62" pos:end="121:62">)</operator></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="123:21" pos:end="125:34"><if pos:start="123:21" pos:end="125:34">if<condition pos:start="123:23" pos:end="123:43">(<expr pos:start="123:24" pos:end="123:42"><name pos:start="123:24" pos:end="123:37"><name pos:start="123:24" pos:end="123:24">t</name><argument_list type="generic" pos:start="123:25" pos:end="123:37">&lt;<argument pos:start="123:26" pos:end="123:36"><expr pos:start="123:26" pos:end="123:36"><operator pos:start="123:26" pos:end="123:26">-</operator><literal type="number" pos:start="123:27" pos:end="123:31">32768</literal> <operator pos:start="123:33" pos:end="123:34">||</operator> <name pos:start="123:36" pos:end="123:36">t</name></expr></argument>&gt;</argument_list></name><literal type="number" pos:start="123:38" pos:end="123:42">32767</literal></expr>)</condition><block type="pseudo" pos:start="125:25" pos:end="125:34"><block_content pos:start="125:25" pos:end="125:34">

                        <return pos:start="125:25" pos:end="125:34">return <expr pos:start="125:32" pos:end="125:33"><operator pos:start="125:32" pos:end="125:32">-</operator><literal type="number" pos:start="125:33" pos:end="125:33">1</literal></expr>;</return></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="129:21" pos:end="129:41"><expr pos:start="129:21" pos:end="129:40"><name pos:start="129:21" pos:end="129:29"><name pos:start="129:21" pos:end="129:26">coefs1</name><index pos:start="129:27" pos:end="129:29">[<expr pos:start="129:28" pos:end="129:28"><name pos:start="129:28" pos:end="129:28">i</name></expr>]</index></name> <operator pos:start="129:31" pos:end="129:31">=</operator> <call pos:start="129:33" pos:end="129:40"><name pos:start="129:33" pos:end="129:37">lrint</name><argument_list pos:start="129:38" pos:end="129:40">(<argument pos:start="129:39" pos:end="129:39"><expr pos:start="129:39" pos:end="129:39"><name pos:start="129:39" pos:end="129:39">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="141:5" pos:end="141:10"><expr pos:start="141:5" pos:end="141:9"><name pos:start="141:5" pos:end="141:5">v</name> <operator pos:start="141:7" pos:end="141:7">=</operator> <literal type="number" pos:start="141:9" pos:end="141:9">0</literal></expr>;</expr_stmt>

    <for pos:start="143:5" pos:end="151:5">for<control pos:start="143:8" pos:end="143:42">(<init pos:start="143:9" pos:end="143:15"><expr pos:start="143:9" pos:end="143:14"><name pos:start="143:9" pos:end="143:10">ch</name> <operator pos:start="143:12" pos:end="143:12">=</operator> <literal type="number" pos:start="143:14" pos:end="143:14">0</literal></expr>;</init> <condition pos:start="143:17" pos:end="143:36"><expr pos:start="143:17" pos:end="143:35"><name pos:start="143:17" pos:end="143:18">ch</name> <operator pos:start="143:20" pos:end="143:20">&lt;</operator> <name pos:start="143:22" pos:end="143:35"><name pos:start="143:22" pos:end="143:22">s</name><operator pos:start="143:23" pos:end="143:24">-&gt;</operator><name pos:start="143:25" pos:end="143:35">nb_channels</name></name></expr>;</condition> <incr pos:start="143:38" pos:end="143:41"><expr pos:start="143:38" pos:end="143:41"><name pos:start="143:38" pos:end="143:39">ch</name><operator pos:start="143:40" pos:end="143:41">++</operator></expr></incr>)</control> <block pos:start="143:44" pos:end="151:5">{<block_content pos:start="145:9" pos:end="149:15">

        <decl_stmt pos:start="145:9" pos:end="145:37"><decl pos:start="145:9" pos:end="145:36"><type pos:start="145:9" pos:end="145:11"><name pos:start="145:9" pos:end="145:11">int</name></type> <name pos:start="145:13" pos:end="145:13">a</name> <init pos:start="145:15" pos:end="145:36">= <expr pos:start="145:17" pos:end="145:36"><name pos:start="145:17" pos:end="145:36"><name pos:start="145:17" pos:end="145:17">s</name><operator pos:start="145:18" pos:end="145:19">-&gt;</operator><name pos:start="145:20" pos:end="145:32">channel_coded</name><index pos:start="145:33" pos:end="145:36">[<expr pos:start="145:34" pos:end="145:35"><name pos:start="145:34" pos:end="145:35">ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:31"><expr pos:start="147:9" pos:end="147:30"><call pos:start="147:9" pos:end="147:30"><name pos:start="147:9" pos:end="147:16">put_bits</name><argument_list pos:start="147:17" pos:end="147:30">(<argument pos:start="147:18" pos:end="147:23"><expr pos:start="147:18" pos:end="147:23"><operator pos:start="147:18" pos:end="147:18">&amp;</operator><name pos:start="147:19" pos:end="147:23"><name pos:start="147:19" pos:end="147:19">s</name><operator pos:start="147:20" pos:end="147:21">-&gt;</operator><name pos:start="147:22" pos:end="147:23">pb</name></name></expr></argument>, <argument pos:start="147:26" pos:end="147:26"><expr pos:start="147:26" pos:end="147:26"><literal type="number" pos:start="147:26" pos:end="147:26">1</literal></expr></argument>, <argument pos:start="147:29" pos:end="147:29"><expr pos:start="147:29" pos:end="147:29"><name pos:start="147:29" pos:end="147:29">a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:15"><expr pos:start="149:9" pos:end="149:14"><name pos:start="149:9" pos:end="149:9">v</name> <operator pos:start="149:11" pos:end="149:12">|=</operator> <name pos:start="149:14" pos:end="149:14">a</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="155:5" pos:end="157:17"><if pos:start="155:5" pos:end="157:17">if <condition pos:start="155:8" pos:end="155:11">(<expr pos:start="155:9" pos:end="155:10"><operator pos:start="155:9" pos:end="155:9">!</operator><name pos:start="155:10" pos:end="155:10">v</name></expr>)</condition><block type="pseudo" pos:start="157:9" pos:end="157:17"><block_content pos:start="157:9" pos:end="157:17">

        <return pos:start="157:9" pos:end="157:17">return <expr pos:start="157:16" pos:end="157:16"><literal type="number" pos:start="157:16" pos:end="157:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="161:5" pos:end="163:33">for<control pos:start="161:8" pos:end="161:41">(<init pos:start="161:9" pos:end="161:24"><expr pos:start="161:9" pos:end="161:23"><name pos:start="161:9" pos:end="161:9">v</name><operator pos:start="161:10" pos:end="161:10">=</operator> <name pos:start="161:12" pos:end="161:21">total_gain</name><operator pos:start="161:22" pos:end="161:22">-</operator><literal type="number" pos:start="161:23" pos:end="161:23">1</literal></expr>;</init> <condition pos:start="161:26" pos:end="161:32"><expr pos:start="161:26" pos:end="161:31"><name pos:start="161:26" pos:end="161:26">v</name><operator pos:start="161:27" pos:end="161:28">&gt;=</operator><literal type="number" pos:start="161:29" pos:end="161:31">127</literal></expr>;</condition> <incr pos:start="161:34" pos:end="161:40"><expr pos:start="161:34" pos:end="161:40"><name pos:start="161:34" pos:end="161:34">v</name><operator pos:start="161:35" pos:end="161:36">-=</operator> <literal type="number" pos:start="161:38" pos:end="161:40">127</literal></expr></incr>)</control><block type="pseudo" pos:start="163:9" pos:end="163:33"><block_content pos:start="163:9" pos:end="163:33">

        <expr_stmt pos:start="163:9" pos:end="163:33"><expr pos:start="163:9" pos:end="163:32"><call pos:start="163:9" pos:end="163:32"><name pos:start="163:9" pos:end="163:16">put_bits</name><argument_list pos:start="163:17" pos:end="163:32">(<argument pos:start="163:18" pos:end="163:23"><expr pos:start="163:18" pos:end="163:23"><operator pos:start="163:18" pos:end="163:18">&amp;</operator><name pos:start="163:19" pos:end="163:23"><name pos:start="163:19" pos:end="163:19">s</name><operator pos:start="163:20" pos:end="163:21">-&gt;</operator><name pos:start="163:22" pos:end="163:23">pb</name></name></expr></argument>, <argument pos:start="163:26" pos:end="163:26"><expr pos:start="163:26" pos:end="163:26"><literal type="number" pos:start="163:26" pos:end="163:26">7</literal></expr></argument>, <argument pos:start="163:29" pos:end="163:31"><expr pos:start="163:29" pos:end="163:31"><literal type="number" pos:start="163:29" pos:end="163:31">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="165:5" pos:end="165:27"><expr pos:start="165:5" pos:end="165:26"><call pos:start="165:5" pos:end="165:26"><name pos:start="165:5" pos:end="165:12">put_bits</name><argument_list pos:start="165:13" pos:end="165:26">(<argument pos:start="165:14" pos:end="165:19"><expr pos:start="165:14" pos:end="165:19"><operator pos:start="165:14" pos:end="165:14">&amp;</operator><name pos:start="165:15" pos:end="165:19"><name pos:start="165:15" pos:end="165:15">s</name><operator pos:start="165:16" pos:end="165:17">-&gt;</operator><name pos:start="165:18" pos:end="165:19">pb</name></name></expr></argument>, <argument pos:start="165:22" pos:end="165:22"><expr pos:start="165:22" pos:end="165:22"><literal type="number" pos:start="165:22" pos:end="165:22">7</literal></expr></argument>, <argument pos:start="165:25" pos:end="165:25"><expr pos:start="165:25" pos:end="165:25"><name pos:start="165:25" pos:end="165:25">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:56"><expr pos:start="169:5" pos:end="169:55"><name pos:start="169:5" pos:end="169:16">coef_nb_bits</name><operator pos:start="169:17" pos:end="169:17">=</operator> <call pos:start="169:19" pos:end="169:55"><name pos:start="169:19" pos:end="169:43">ff_wma_total_gain_to_bits</name><argument_list pos:start="169:44" pos:end="169:55">(<argument pos:start="169:45" pos:end="169:54"><expr pos:start="169:45" pos:end="169:54"><name pos:start="169:45" pos:end="169:54">total_gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="173:5" pos:end="197:5"><if pos:start="173:5" pos:end="197:5">if <condition pos:start="173:8" pos:end="173:28">(<expr pos:start="173:9" pos:end="173:27"><name pos:start="173:9" pos:end="173:27"><name pos:start="173:9" pos:end="173:9">s</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:27">use_noise_coding</name></name></expr>)</condition> <block pos:start="173:30" pos:end="197:5">{<block_content pos:start="175:9" pos:end="195:9">

        <for pos:start="175:9" pos:end="195:9">for<control pos:start="175:12" pos:end="175:46">(<init pos:start="175:13" pos:end="175:19"><expr pos:start="175:13" pos:end="175:18"><name pos:start="175:13" pos:end="175:14">ch</name> <operator pos:start="175:16" pos:end="175:16">=</operator> <literal type="number" pos:start="175:18" pos:end="175:18">0</literal></expr>;</init> <condition pos:start="175:21" pos:end="175:40"><expr pos:start="175:21" pos:end="175:39"><name pos:start="175:21" pos:end="175:22">ch</name> <operator pos:start="175:24" pos:end="175:24">&lt;</operator> <name pos:start="175:26" pos:end="175:39"><name pos:start="175:26" pos:end="175:26">s</name><operator pos:start="175:27" pos:end="175:28">-&gt;</operator><name pos:start="175:29" pos:end="175:39">nb_channels</name></name></expr>;</condition> <incr pos:start="175:42" pos:end="175:45"><expr pos:start="175:42" pos:end="175:45"><name pos:start="175:42" pos:end="175:43">ch</name><operator pos:start="175:44" pos:end="175:45">++</operator></expr></incr>)</control> <block pos:start="175:48" pos:end="195:9">{<block_content pos:start="177:13" pos:end="193:13">

            <if_stmt pos:start="177:13" pos:end="193:13"><if pos:start="177:13" pos:end="193:13">if <condition pos:start="177:16" pos:end="177:37">(<expr pos:start="177:17" pos:end="177:36"><name pos:start="177:17" pos:end="177:36"><name pos:start="177:17" pos:end="177:17">s</name><operator pos:start="177:18" pos:end="177:19">-&gt;</operator><name pos:start="177:20" pos:end="177:32">channel_coded</name><index pos:start="177:33" pos:end="177:36">[<expr pos:start="177:34" pos:end="177:35"><name pos:start="177:34" pos:end="177:35">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="177:39" pos:end="193:13">{<block_content pos:start="179:17" pos:end="191:17">

                <decl_stmt pos:start="179:17" pos:end="179:25"><decl pos:start="179:17" pos:end="179:21"><type pos:start="179:17" pos:end="179:19"><name pos:start="179:17" pos:end="179:19">int</name></type> <name pos:start="179:21" pos:end="179:21">i</name></decl>, <decl pos:start="179:24" pos:end="179:24"><type ref="prev" pos:start="179:17" pos:end="179:19"/><name pos:start="179:24" pos:end="179:24">n</name></decl>;</decl_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:50"><expr pos:start="181:17" pos:end="181:49"><name pos:start="181:17" pos:end="181:17">n</name> <operator pos:start="181:19" pos:end="181:19">=</operator> <name pos:start="181:21" pos:end="181:49"><name pos:start="181:21" pos:end="181:21">s</name><operator pos:start="181:22" pos:end="181:23">-&gt;</operator><name pos:start="181:24" pos:end="181:42">exponent_high_sizes</name><index pos:start="181:43" pos:end="181:49">[<expr pos:start="181:44" pos:end="181:48"><name pos:start="181:44" pos:end="181:48">bsize</name></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="183:17" pos:end="191:17">for<control pos:start="183:20" pos:end="183:32">(<init pos:start="183:21" pos:end="183:24"><expr pos:start="183:21" pos:end="183:23"><name pos:start="183:21" pos:end="183:21">i</name><operator pos:start="183:22" pos:end="183:22">=</operator><literal type="number" pos:start="183:23" pos:end="183:23">0</literal></expr>;</init><condition pos:start="183:25" pos:end="183:28"><expr pos:start="183:25" pos:end="183:27"><name pos:start="183:25" pos:end="183:25">i</name><operator pos:start="183:26" pos:end="183:26">&lt;</operator><name pos:start="183:27" pos:end="183:27">n</name></expr>;</condition><incr pos:start="183:29" pos:end="183:31"><expr pos:start="183:29" pos:end="183:31"><name pos:start="183:29" pos:end="183:29">i</name><operator pos:start="183:30" pos:end="183:31">++</operator></expr></incr>)</control> <block pos:start="183:34" pos:end="191:17">{<block_content pos:start="185:21" pos:end="189:73">

                    <expr_stmt pos:start="185:21" pos:end="185:70"><expr pos:start="185:21" pos:end="185:69"><call pos:start="185:21" pos:end="185:69"><name pos:start="185:21" pos:end="185:28">put_bits</name><argument_list pos:start="185:29" pos:end="185:69">(<argument pos:start="185:30" pos:end="185:35"><expr pos:start="185:30" pos:end="185:35"><operator pos:start="185:30" pos:end="185:30">&amp;</operator><name pos:start="185:31" pos:end="185:35"><name pos:start="185:31" pos:end="185:31">s</name><operator pos:start="185:32" pos:end="185:33">-&gt;</operator><name pos:start="185:34" pos:end="185:35">pb</name></name></expr></argument>, <argument pos:start="185:38" pos:end="185:38"><expr pos:start="185:38" pos:end="185:38"><literal type="number" pos:start="185:38" pos:end="185:38">1</literal></expr></argument>, <argument pos:start="185:41" pos:end="185:68"><expr pos:start="185:41" pos:end="185:68"><name pos:start="185:41" pos:end="185:65"><name pos:start="185:41" pos:end="185:41">s</name><operator pos:start="185:42" pos:end="185:43">-&gt;</operator><name pos:start="185:44" pos:end="185:58">high_band_coded</name><index pos:start="185:59" pos:end="185:62">[<expr pos:start="185:60" pos:end="185:61"><name pos:start="185:60" pos:end="185:61">ch</name></expr>]</index><index pos:start="185:63" pos:end="185:65">[<expr pos:start="185:64" pos:end="185:64"><name pos:start="185:64" pos:end="185:64">i</name></expr>]</index></name><operator pos:start="185:66" pos:end="185:66">=</operator> <literal type="number" pos:start="185:68" pos:end="185:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="187:21" pos:end="189:73"><if pos:start="187:21" pos:end="189:73">if <condition pos:start="187:24" pos:end="187:26">(<expr pos:start="187:25" pos:end="187:25"><literal type="number" pos:start="187:25" pos:end="187:25">0</literal></expr>)</condition><block type="pseudo" pos:start="189:25" pos:end="189:73"><block_content pos:start="189:25" pos:end="189:73">

                        <expr_stmt pos:start="189:25" pos:end="189:73"><expr pos:start="189:25" pos:end="189:72"><name pos:start="189:25" pos:end="189:36"><name pos:start="189:25" pos:end="189:32">nb_coefs</name><index pos:start="189:33" pos:end="189:36">[<expr pos:start="189:34" pos:end="189:35"><name pos:start="189:34" pos:end="189:35">ch</name></expr>]</index></name> <operator pos:start="189:38" pos:end="189:39">-=</operator> <name pos:start="189:41" pos:end="189:72"><name pos:start="189:41" pos:end="189:41">s</name><operator pos:start="189:42" pos:end="189:43">-&gt;</operator><name pos:start="189:44" pos:end="189:62">exponent_high_bands</name><index pos:start="189:63" pos:end="189:69">[<expr pos:start="189:64" pos:end="189:68"><name pos:start="189:64" pos:end="189:68">bsize</name></expr>]</index><index pos:start="189:70" pos:end="189:72">[<expr pos:start="189:71" pos:end="189:71"><name pos:start="189:71" pos:end="189:71">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="201:5" pos:end="201:24"><expr pos:start="201:5" pos:end="201:23"><name pos:start="201:5" pos:end="201:19">parse_exponents</name> <operator pos:start="201:21" pos:end="201:21">=</operator> <literal type="number" pos:start="201:23" pos:end="201:23">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="203:5" pos:end="207:5"><if pos:start="203:5" pos:end="207:5">if <condition pos:start="203:8" pos:end="203:47">(<expr pos:start="203:9" pos:end="203:46"><name pos:start="203:9" pos:end="203:25"><name pos:start="203:9" pos:end="203:9">s</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:25">block_len_bits</name></name> <operator pos:start="203:27" pos:end="203:28">!=</operator> <name pos:start="203:30" pos:end="203:46"><name pos:start="203:30" pos:end="203:30">s</name><operator pos:start="203:31" pos:end="203:32">-&gt;</operator><name pos:start="203:33" pos:end="203:46">frame_len_bits</name></name></expr>)</condition> <block pos:start="203:49" pos:end="207:5">{<block_content pos:start="205:9" pos:end="205:45">

        <expr_stmt pos:start="205:9" pos:end="205:45"><expr pos:start="205:9" pos:end="205:44"><call pos:start="205:9" pos:end="205:44"><name pos:start="205:9" pos:end="205:16">put_bits</name><argument_list pos:start="205:17" pos:end="205:44">(<argument pos:start="205:18" pos:end="205:23"><expr pos:start="205:18" pos:end="205:23"><operator pos:start="205:18" pos:end="205:18">&amp;</operator><name pos:start="205:19" pos:end="205:23"><name pos:start="205:19" pos:end="205:19">s</name><operator pos:start="205:20" pos:end="205:21">-&gt;</operator><name pos:start="205:22" pos:end="205:23">pb</name></name></expr></argument>, <argument pos:start="205:26" pos:end="205:26"><expr pos:start="205:26" pos:end="205:26"><literal type="number" pos:start="205:26" pos:end="205:26">1</literal></expr></argument>, <argument pos:start="205:29" pos:end="205:43"><expr pos:start="205:29" pos:end="205:43"><name pos:start="205:29" pos:end="205:43">parse_exponents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="211:5" pos:end="237:5"><if pos:start="211:5" pos:end="233:5">if <condition pos:start="211:8" pos:end="211:24">(<expr pos:start="211:9" pos:end="211:23"><name pos:start="211:9" pos:end="211:23">parse_exponents</name></expr>)</condition> <block pos:start="211:26" pos:end="233:5">{<block_content pos:start="213:9" pos:end="231:9">

        <for pos:start="213:9" pos:end="231:9">for<control pos:start="213:12" pos:end="213:46">(<init pos:start="213:13" pos:end="213:19"><expr pos:start="213:13" pos:end="213:18"><name pos:start="213:13" pos:end="213:14">ch</name> <operator pos:start="213:16" pos:end="213:16">=</operator> <literal type="number" pos:start="213:18" pos:end="213:18">0</literal></expr>;</init> <condition pos:start="213:21" pos:end="213:40"><expr pos:start="213:21" pos:end="213:39"><name pos:start="213:21" pos:end="213:22">ch</name> <operator pos:start="213:24" pos:end="213:24">&lt;</operator> <name pos:start="213:26" pos:end="213:39"><name pos:start="213:26" pos:end="213:26">s</name><operator pos:start="213:27" pos:end="213:28">-&gt;</operator><name pos:start="213:29" pos:end="213:39">nb_channels</name></name></expr>;</condition> <incr pos:start="213:42" pos:end="213:45"><expr pos:start="213:42" pos:end="213:45"><name pos:start="213:42" pos:end="213:43">ch</name><operator pos:start="213:44" pos:end="213:45">++</operator></expr></incr>)</control> <block pos:start="213:48" pos:end="231:9">{<block_content pos:start="215:13" pos:end="229:13">

            <if_stmt pos:start="215:13" pos:end="229:13"><if pos:start="215:13" pos:end="229:13">if <condition pos:start="215:16" pos:end="215:37">(<expr pos:start="215:17" pos:end="215:36"><name pos:start="215:17" pos:end="215:36"><name pos:start="215:17" pos:end="215:17">s</name><operator pos:start="215:18" pos:end="215:19">-&gt;</operator><name pos:start="215:20" pos:end="215:32">channel_coded</name><index pos:start="215:33" pos:end="215:36">[<expr pos:start="215:34" pos:end="215:35"><name pos:start="215:34" pos:end="215:35">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="215:39" pos:end="229:13">{<block_content pos:start="217:17" pos:end="227:17">

                <if_stmt pos:start="217:17" pos:end="227:17"><if pos:start="217:17" pos:end="221:17">if <condition pos:start="217:20" pos:end="217:35">(<expr pos:start="217:21" pos:end="217:34"><name pos:start="217:21" pos:end="217:34"><name pos:start="217:21" pos:end="217:21">s</name><operator pos:start="217:22" pos:end="217:23">-&gt;</operator><name pos:start="217:24" pos:end="217:34">use_exp_vlc</name></name></expr>)</condition> <block pos:start="217:37" pos:end="221:17">{<block_content pos:start="219:21" pos:end="219:53">

                    <expr_stmt pos:start="219:21" pos:end="219:53"><expr pos:start="219:21" pos:end="219:52"><call pos:start="219:21" pos:end="219:52"><name pos:start="219:21" pos:end="219:34">encode_exp_vlc</name><argument_list pos:start="219:35" pos:end="219:52">(<argument pos:start="219:36" pos:end="219:36"><expr pos:start="219:36" pos:end="219:36"><name pos:start="219:36" pos:end="219:36">s</name></expr></argument>, <argument pos:start="219:39" pos:end="219:40"><expr pos:start="219:39" pos:end="219:40"><name pos:start="219:39" pos:end="219:40">ch</name></expr></argument>, <argument pos:start="219:43" pos:end="219:51"><expr pos:start="219:43" pos:end="219:51"><name pos:start="219:43" pos:end="219:51">fixed_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="221:19" pos:end="227:17">else <block pos:start="221:24" pos:end="227:17">{<block_content pos:start="223:21" pos:end="223:30">

                    <expr_stmt pos:start="223:21" pos:end="223:30"><expr pos:start="223:21" pos:end="223:29"><call pos:start="223:21" pos:end="223:29"><name pos:start="223:21" pos:end="223:26">assert</name><argument_list pos:start="223:27" pos:end="223:29">(<argument pos:start="223:28" pos:end="223:28"><expr pos:start="223:28" pos:end="223:28"><literal type="number" pos:start="223:28" pos:end="223:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="223:32" pos:end="223:54">//FIXME not implemented</comment>

<comment type="line" pos:start="225:1" pos:end="225:44">//                    encode_exp_lsp(s, ch);</comment>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="233:7" pos:end="237:5">else <block pos:start="233:12" pos:end="237:5">{<block_content pos:start="235:9" pos:end="235:18">

        <expr_stmt pos:start="235:9" pos:end="235:18"><expr pos:start="235:9" pos:end="235:17"><call pos:start="235:9" pos:end="235:17"><name pos:start="235:9" pos:end="235:14">assert</name><argument_list pos:start="235:15" pos:end="235:17">(<argument pos:start="235:16" pos:end="235:16"><expr pos:start="235:16" pos:end="235:16"><literal type="number" pos:start="235:16" pos:end="235:16">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="235:20" pos:end="235:42">//FIXME not implemented</comment>

    </block_content>}</block></else></if_stmt>



    <for pos:start="241:5" pos:end="331:5">for<control pos:start="241:8" pos:end="241:42">(<init pos:start="241:9" pos:end="241:15"><expr pos:start="241:9" pos:end="241:14"><name pos:start="241:9" pos:end="241:10">ch</name> <operator pos:start="241:12" pos:end="241:12">=</operator> <literal type="number" pos:start="241:14" pos:end="241:14">0</literal></expr>;</init> <condition pos:start="241:17" pos:end="241:36"><expr pos:start="241:17" pos:end="241:35"><name pos:start="241:17" pos:end="241:18">ch</name> <operator pos:start="241:20" pos:end="241:20">&lt;</operator> <name pos:start="241:22" pos:end="241:35"><name pos:start="241:22" pos:end="241:22">s</name><operator pos:start="241:23" pos:end="241:24">-&gt;</operator><name pos:start="241:25" pos:end="241:35">nb_channels</name></name></expr>;</condition> <incr pos:start="241:38" pos:end="241:41"><expr pos:start="241:38" pos:end="241:41"><name pos:start="241:38" pos:end="241:39">ch</name><operator pos:start="241:40" pos:end="241:41">++</operator></expr></incr>)</control> <block pos:start="241:44" pos:end="331:5">{<block_content pos:start="243:9" pos:end="329:9">

        <if_stmt pos:start="243:9" pos:end="323:9"><if pos:start="243:9" pos:end="323:9">if <condition pos:start="243:12" pos:end="243:33">(<expr pos:start="243:13" pos:end="243:32"><name pos:start="243:13" pos:end="243:32"><name pos:start="243:13" pos:end="243:13">s</name><operator pos:start="243:14" pos:end="243:15">-&gt;</operator><name pos:start="243:16" pos:end="243:28">channel_coded</name><index pos:start="243:29" pos:end="243:32">[<expr pos:start="243:30" pos:end="243:31"><name pos:start="243:30" pos:end="243:31">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="243:35" pos:end="323:9">{<block_content pos:start="245:13" pos:end="321:104">

            <decl_stmt pos:start="245:13" pos:end="245:28"><decl pos:start="245:13" pos:end="245:19"><type pos:start="245:13" pos:end="245:15"><name pos:start="245:13" pos:end="245:15">int</name></type> <name pos:start="245:17" pos:end="245:19">run</name></decl>, <decl pos:start="245:22" pos:end="245:27"><type ref="prev" pos:start="245:13" pos:end="245:15"/><name pos:start="245:22" pos:end="245:27">tindex</name></decl>;</decl_stmt>

            <decl_stmt pos:start="247:13" pos:end="247:32"><decl pos:start="247:13" pos:end="247:24"><type pos:start="247:13" pos:end="247:21"><name pos:start="247:13" pos:end="247:19">WMACoef</name> <modifier pos:start="247:21" pos:end="247:21">*</modifier></type><name pos:start="247:22" pos:end="247:24">ptr</name></decl>, <decl pos:start="247:27" pos:end="247:31"><type ref="prev" pos:start="247:13" pos:end="247:21"><modifier pos:start="247:27" pos:end="247:27">*</modifier></type><name pos:start="247:28" pos:end="247:31">eptr</name></decl>;</decl_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:47"><expr pos:start="249:13" pos:end="249:46"><name pos:start="249:13" pos:end="249:18">tindex</name> <operator pos:start="249:20" pos:end="249:20">=</operator> <operator pos:start="249:22" pos:end="249:22">(</operator><name pos:start="249:23" pos:end="249:24">ch</name> <operator pos:start="249:26" pos:end="249:27">==</operator> <literal type="number" pos:start="249:29" pos:end="249:29">1</literal> <operator pos:start="249:31" pos:end="249:32">&amp;&amp;</operator> <name pos:start="249:34" pos:end="249:45"><name pos:start="249:34" pos:end="249:34">s</name><operator pos:start="249:35" pos:end="249:36">-&gt;</operator><name pos:start="249:37" pos:end="249:45">ms_stereo</name></name><operator pos:start="249:46" pos:end="249:46">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:36"><expr pos:start="251:13" pos:end="251:35"><name pos:start="251:13" pos:end="251:15">ptr</name> <operator pos:start="251:17" pos:end="251:17">=</operator> <operator pos:start="251:19" pos:end="251:19">&amp;</operator><name pos:start="251:20" pos:end="251:35"><name pos:start="251:20" pos:end="251:20">s</name><operator pos:start="251:21" pos:end="251:22">-&gt;</operator><name pos:start="251:23" pos:end="251:28">coefs1</name><index pos:start="251:29" pos:end="251:32">[<expr pos:start="251:30" pos:end="251:31"><name pos:start="251:30" pos:end="251:31">ch</name></expr>]</index><index pos:start="251:33" pos:end="251:35">[<expr pos:start="251:34" pos:end="251:34"><literal type="number" pos:start="251:34" pos:end="251:34">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:38"><expr pos:start="253:13" pos:end="253:37"><name pos:start="253:13" pos:end="253:16">eptr</name> <operator pos:start="253:18" pos:end="253:18">=</operator> <name pos:start="253:20" pos:end="253:22">ptr</name> <operator pos:start="253:24" pos:end="253:24">+</operator> <name pos:start="253:26" pos:end="253:37"><name pos:start="253:26" pos:end="253:33">nb_coefs</name><index pos:start="253:34" pos:end="253:37">[<expr pos:start="253:35" pos:end="253:36"><name pos:start="253:35" pos:end="253:36">ch</name></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="257:13" pos:end="257:18"><expr pos:start="257:13" pos:end="257:17"><name pos:start="257:13" pos:end="257:15">run</name><operator pos:start="257:16" pos:end="257:16">=</operator><literal type="number" pos:start="257:17" pos:end="257:17">0</literal></expr>;</expr_stmt>

            <for pos:start="259:13" pos:end="317:13">for<control pos:start="259:16" pos:end="259:35">(<init pos:start="259:17" pos:end="259:17">;</init><condition pos:start="259:18" pos:end="259:28"><expr pos:start="259:18" pos:end="259:27"><name pos:start="259:18" pos:end="259:20">ptr</name> <operator pos:start="259:22" pos:end="259:22">&lt;</operator> <name pos:start="259:24" pos:end="259:27">eptr</name></expr>;</condition> <incr pos:start="259:30" pos:end="259:34"><expr pos:start="259:30" pos:end="259:34"><name pos:start="259:30" pos:end="259:32">ptr</name><operator pos:start="259:33" pos:end="259:34">++</operator></expr></incr>)</control><block pos:start="259:36" pos:end="317:13">{<block_content pos:start="261:17" pos:end="315:17">

                <if_stmt pos:start="261:17" pos:end="315:17"><if pos:start="261:17" pos:end="311:17">if<condition pos:start="261:19" pos:end="261:24">(<expr pos:start="261:20" pos:end="261:23"><operator pos:start="261:20" pos:end="261:20">*</operator><name pos:start="261:21" pos:end="261:23">ptr</name></expr>)</condition><block pos:start="261:25" pos:end="311:17">{<block_content pos:start="263:21" pos:end="309:26">

                    <decl_stmt pos:start="263:21" pos:end="263:36"><decl pos:start="263:21" pos:end="263:35"><type pos:start="263:21" pos:end="263:23"><name pos:start="263:21" pos:end="263:23">int</name></type> <name pos:start="263:25" pos:end="263:29">level</name><init pos:start="263:30" pos:end="263:35">= <expr pos:start="263:32" pos:end="263:35"><operator pos:start="263:32" pos:end="263:32">*</operator><name pos:start="263:33" pos:end="263:35">ptr</name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="265:21" pos:end="265:48"><decl pos:start="265:21" pos:end="265:47"><type pos:start="265:21" pos:end="265:23"><name pos:start="265:21" pos:end="265:23">int</name></type> <name pos:start="265:25" pos:end="265:33">abs_level</name><init pos:start="265:34" pos:end="265:47">= <expr pos:start="265:36" pos:end="265:47"><call pos:start="265:36" pos:end="265:47"><name pos:start="265:36" pos:end="265:40">FFABS</name><argument_list pos:start="265:41" pos:end="265:47">(<argument pos:start="265:42" pos:end="265:46"><expr pos:start="265:42" pos:end="265:46"><name pos:start="265:42" pos:end="265:46">level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="267:21" pos:end="267:32"><decl pos:start="267:21" pos:end="267:31"><type pos:start="267:21" pos:end="267:23"><name pos:start="267:21" pos:end="267:23">int</name></type> <name pos:start="267:25" pos:end="267:28">code</name><init pos:start="267:29" pos:end="267:31">= <expr pos:start="267:31" pos:end="267:31"><literal type="number" pos:start="267:31" pos:end="267:31">0</literal></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="269:21" pos:end="275:21"><if pos:start="269:21" pos:end="275:21">if<condition pos:start="269:23" pos:end="269:68">(<expr pos:start="269:24" pos:end="269:67"><name pos:start="269:24" pos:end="269:32">abs_level</name> <operator pos:start="269:34" pos:end="269:35">&lt;=</operator> <name pos:start="269:37" pos:end="269:56"><name pos:start="269:37" pos:end="269:37">s</name><operator pos:start="269:38" pos:end="269:39">-&gt;</operator><name pos:start="269:40" pos:end="269:48">coef_vlcs</name><index pos:start="269:49" pos:end="269:56">[<expr pos:start="269:50" pos:end="269:55"><name pos:start="269:50" pos:end="269:55">tindex</name></expr>]</index></name><operator pos:start="269:57" pos:end="269:58">-&gt;</operator><name pos:start="269:59" pos:end="269:67">max_level</name></expr>)</condition><block pos:start="269:69" pos:end="275:21">{<block_content pos:start="271:25" pos:end="273:74">

                        <if_stmt pos:start="271:25" pos:end="273:74"><if pos:start="271:25" pos:end="273:74">if<condition pos:start="271:27" pos:end="271:75">(<expr pos:start="271:28" pos:end="271:74"><name pos:start="271:28" pos:end="271:30">run</name> <operator pos:start="271:32" pos:end="271:32">&lt;</operator> <name pos:start="271:34" pos:end="271:53"><name pos:start="271:34" pos:end="271:34">s</name><operator pos:start="271:35" pos:end="271:36">-&gt;</operator><name pos:start="271:37" pos:end="271:45">coef_vlcs</name><index pos:start="271:46" pos:end="271:53">[<expr pos:start="271:47" pos:end="271:52"><name pos:start="271:47" pos:end="271:52">tindex</name></expr>]</index></name><operator pos:start="271:54" pos:end="271:55">-&gt;</operator><name pos:start="271:56" pos:end="271:74"><name pos:start="271:56" pos:end="271:61">levels</name><index pos:start="271:62" pos:end="271:74">[<expr pos:start="271:63" pos:end="271:73"><name pos:start="271:63" pos:end="271:71">abs_level</name><operator pos:start="271:72" pos:end="271:72">-</operator><literal type="number" pos:start="271:73" pos:end="271:73">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="273:29" pos:end="273:74"><block_content pos:start="273:29" pos:end="273:74">

                            <expr_stmt pos:start="273:29" pos:end="273:74"><expr pos:start="273:29" pos:end="273:73"><name pos:start="273:29" pos:end="273:32">code</name><operator pos:start="273:33" pos:end="273:33">=</operator> <name pos:start="273:35" pos:end="273:37">run</name> <operator pos:start="273:39" pos:end="273:39">+</operator> <name pos:start="273:41" pos:end="273:73"><name pos:start="273:41" pos:end="273:41">s</name><operator pos:start="273:42" pos:end="273:43">-&gt;</operator><name pos:start="273:44" pos:end="273:52">int_table</name><index pos:start="273:53" pos:end="273:60">[<expr pos:start="273:54" pos:end="273:59"><name pos:start="273:54" pos:end="273:59">tindex</name></expr>]</index><index pos:start="273:61" pos:end="273:73">[<expr pos:start="273:62" pos:end="273:72"><name pos:start="273:62" pos:end="273:70">abs_level</name><operator pos:start="273:71" pos:end="273:71">-</operator><literal type="number" pos:start="273:72" pos:end="273:72">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>



                    <expr_stmt pos:start="279:21" pos:end="279:59"><expr pos:start="279:21" pos:end="279:58"><call pos:start="279:21" pos:end="279:58"><name pos:start="279:21" pos:end="279:26">assert</name><argument_list pos:start="279:27" pos:end="279:58">(<argument pos:start="279:28" pos:end="279:57"><expr pos:start="279:28" pos:end="279:57"><name pos:start="279:28" pos:end="279:31">code</name> <operator pos:start="279:33" pos:end="279:33">&lt;</operator> <name pos:start="279:35" pos:end="279:54"><name pos:start="279:35" pos:end="279:35">s</name><operator pos:start="279:36" pos:end="279:37">-&gt;</operator><name pos:start="279:38" pos:end="279:46">coef_vlcs</name><index pos:start="279:47" pos:end="279:54">[<expr pos:start="279:48" pos:end="279:53"><name pos:start="279:48" pos:end="279:53">tindex</name></expr>]</index></name><operator pos:start="279:55" pos:end="279:56">-&gt;</operator><name pos:start="279:57" pos:end="279:57">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="281:21" pos:end="281:114"><expr pos:start="281:21" pos:end="281:113"><call pos:start="281:21" pos:end="281:113"><name pos:start="281:21" pos:end="281:28">put_bits</name><argument_list pos:start="281:29" pos:end="281:113">(<argument pos:start="281:30" pos:end="281:35"><expr pos:start="281:30" pos:end="281:35"><operator pos:start="281:30" pos:end="281:30">&amp;</operator><name pos:start="281:31" pos:end="281:35"><name pos:start="281:31" pos:end="281:31">s</name><operator pos:start="281:32" pos:end="281:33">-&gt;</operator><name pos:start="281:34" pos:end="281:35">pb</name></name></expr></argument>, <argument pos:start="281:38" pos:end="281:73"><expr pos:start="281:38" pos:end="281:73"><name pos:start="281:38" pos:end="281:57"><name pos:start="281:38" pos:end="281:38">s</name><operator pos:start="281:39" pos:end="281:40">-&gt;</operator><name pos:start="281:41" pos:end="281:49">coef_vlcs</name><index pos:start="281:50" pos:end="281:57">[<expr pos:start="281:51" pos:end="281:56"><name pos:start="281:51" pos:end="281:56">tindex</name></expr>]</index></name><operator pos:start="281:58" pos:end="281:59">-&gt;</operator><name pos:start="281:60" pos:end="281:73"><name pos:start="281:60" pos:end="281:67">huffbits</name><index pos:start="281:68" pos:end="281:73">[<expr pos:start="281:69" pos:end="281:72"><name pos:start="281:69" pos:end="281:72">code</name></expr>]</index></name></expr></argument>, <argument pos:start="281:76" pos:end="281:112"><expr pos:start="281:76" pos:end="281:112"><name pos:start="281:76" pos:end="281:95"><name pos:start="281:76" pos:end="281:76">s</name><operator pos:start="281:77" pos:end="281:78">-&gt;</operator><name pos:start="281:79" pos:end="281:87">coef_vlcs</name><index pos:start="281:88" pos:end="281:95">[<expr pos:start="281:89" pos:end="281:94"><name pos:start="281:89" pos:end="281:94">tindex</name></expr>]</index></name><operator pos:start="281:96" pos:end="281:97">-&gt;</operator><name pos:start="281:98" pos:end="281:112"><name pos:start="281:98" pos:end="281:106">huffcodes</name><index pos:start="281:107" pos:end="281:112">[<expr pos:start="281:108" pos:end="281:111"><name pos:start="281:108" pos:end="281:111">code</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <if_stmt pos:start="285:21" pos:end="305:21"><if pos:start="285:21" pos:end="305:21">if<condition pos:start="285:23" pos:end="285:33">(<expr pos:start="285:24" pos:end="285:32"><name pos:start="285:24" pos:end="285:27">code</name> <operator pos:start="285:29" pos:end="285:30">==</operator> <literal type="number" pos:start="285:32" pos:end="285:32">0</literal></expr>)</condition><block pos:start="285:34" pos:end="305:21">{<block_content pos:start="287:25" pos:end="303:65">

                        <if_stmt pos:start="287:25" pos:end="289:38"><if pos:start="287:25" pos:end="289:38">if<condition pos:start="287:27" pos:end="287:56">(<expr pos:start="287:28" pos:end="287:55"><literal type="number" pos:start="287:28" pos:end="287:28">1</literal><operator pos:start="287:29" pos:end="287:30">&lt;&lt;</operator><name pos:start="287:31" pos:end="287:42">coef_nb_bits</name> <operator pos:start="287:44" pos:end="287:45">&lt;=</operator> <name pos:start="287:47" pos:end="287:55">abs_level</name></expr>)</condition><block type="pseudo" pos:start="289:29" pos:end="289:38"><block_content pos:start="289:29" pos:end="289:38">

                            <return pos:start="289:29" pos:end="289:38">return <expr pos:start="289:36" pos:end="289:37"><operator pos:start="289:36" pos:end="289:36">-</operator><literal type="number" pos:start="289:37" pos:end="289:37">1</literal></expr>;</return></block_content></block></if></if_stmt>





                        <comment type="line" pos:start="295:25" pos:end="295:170">//Workaround minor rounding differences for the regression tests, FIXME we should find and replace the problematic float by fixpoint for reg tests</comment>

                        <if_stmt pos:start="297:25" pos:end="297:106"><if pos:start="297:25" pos:end="297:106">if<condition pos:start="297:27" pos:end="297:89">(<expr pos:start="297:28" pos:end="297:88"><name pos:start="297:28" pos:end="297:36">abs_level</name> <operator pos:start="297:38" pos:end="297:39">==</operator> <literal type="number" pos:start="297:41" pos:end="297:45">0x71B</literal> <operator pos:start="297:47" pos:end="297:48">&amp;&amp;</operator> <operator pos:start="297:50" pos:end="297:50">(</operator><name pos:start="297:51" pos:end="297:65"><name pos:start="297:51" pos:end="297:51">s</name><operator pos:start="297:52" pos:end="297:53">-&gt;</operator><name pos:start="297:54" pos:end="297:58">avctx</name><operator pos:start="297:59" pos:end="297:60">-&gt;</operator><name pos:start="297:61" pos:end="297:65">flags</name></name> <operator pos:start="297:67" pos:end="297:67">&amp;</operator> <name pos:start="297:69" pos:end="297:87">CODEC_FLAG_BITEXACT</name><operator pos:start="297:88" pos:end="297:88">)</operator></expr>)</condition><block type="pseudo" pos:start="297:91" pos:end="297:106"><block_content pos:start="297:91" pos:end="297:106"> <expr_stmt pos:start="297:91" pos:end="297:106"><expr pos:start="297:91" pos:end="297:105"><name pos:start="297:91" pos:end="297:99">abs_level</name><operator pos:start="297:100" pos:end="297:100">=</operator><literal type="number" pos:start="297:101" pos:end="297:105">0x71A</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



                        <expr_stmt pos:start="301:25" pos:end="301:66"><expr pos:start="301:25" pos:end="301:65"><call pos:start="301:25" pos:end="301:65"><name pos:start="301:25" pos:end="301:32">put_bits</name><argument_list pos:start="301:33" pos:end="301:65">(<argument pos:start="301:34" pos:end="301:39"><expr pos:start="301:34" pos:end="301:39"><operator pos:start="301:34" pos:end="301:34">&amp;</operator><name pos:start="301:35" pos:end="301:39"><name pos:start="301:35" pos:end="301:35">s</name><operator pos:start="301:36" pos:end="301:37">-&gt;</operator><name pos:start="301:38" pos:end="301:39">pb</name></name></expr></argument>, <argument pos:start="301:42" pos:end="301:53"><expr pos:start="301:42" pos:end="301:53"><name pos:start="301:42" pos:end="301:53">coef_nb_bits</name></expr></argument>, <argument pos:start="301:56" pos:end="301:64"><expr pos:start="301:56" pos:end="301:64"><name pos:start="301:56" pos:end="301:64">abs_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="303:25" pos:end="303:65"><expr pos:start="303:25" pos:end="303:64"><call pos:start="303:25" pos:end="303:64"><name pos:start="303:25" pos:end="303:32">put_bits</name><argument_list pos:start="303:33" pos:end="303:64">(<argument pos:start="303:34" pos:end="303:39"><expr pos:start="303:34" pos:end="303:39"><operator pos:start="303:34" pos:end="303:34">&amp;</operator><name pos:start="303:35" pos:end="303:39"><name pos:start="303:35" pos:end="303:35">s</name><operator pos:start="303:36" pos:end="303:37">-&gt;</operator><name pos:start="303:38" pos:end="303:39">pb</name></name></expr></argument>, <argument pos:start="303:42" pos:end="303:58"><expr pos:start="303:42" pos:end="303:58"><name pos:start="303:42" pos:end="303:58"><name pos:start="303:42" pos:end="303:42">s</name><operator pos:start="303:43" pos:end="303:44">-&gt;</operator><name pos:start="303:45" pos:end="303:58">frame_len_bits</name></name></expr></argument>, <argument pos:start="303:61" pos:end="303:63"><expr pos:start="303:61" pos:end="303:63"><name pos:start="303:61" pos:end="303:63">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="307:21" pos:end="307:51"><expr pos:start="307:21" pos:end="307:50"><call pos:start="307:21" pos:end="307:50"><name pos:start="307:21" pos:end="307:28">put_bits</name><argument_list pos:start="307:29" pos:end="307:50">(<argument pos:start="307:30" pos:end="307:35"><expr pos:start="307:30" pos:end="307:35"><operator pos:start="307:30" pos:end="307:30">&amp;</operator><name pos:start="307:31" pos:end="307:35"><name pos:start="307:31" pos:end="307:31">s</name><operator pos:start="307:32" pos:end="307:33">-&gt;</operator><name pos:start="307:34" pos:end="307:35">pb</name></name></expr></argument>, <argument pos:start="307:38" pos:end="307:38"><expr pos:start="307:38" pos:end="307:38"><literal type="number" pos:start="307:38" pos:end="307:38">1</literal></expr></argument>, <argument pos:start="307:41" pos:end="307:49"><expr pos:start="307:41" pos:end="307:49"><name pos:start="307:41" pos:end="307:45">level</name> <operator pos:start="307:47" pos:end="307:47">&lt;</operator> <literal type="number" pos:start="307:49" pos:end="307:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="307:53" pos:end="307:88">//FIXME the sign is fliped somewhere</comment>

                    <expr_stmt pos:start="309:21" pos:end="309:26"><expr pos:start="309:21" pos:end="309:25"><name pos:start="309:21" pos:end="309:23">run</name><operator pos:start="309:24" pos:end="309:24">=</operator><literal type="number" pos:start="309:25" pos:end="309:25">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="311:18" pos:end="315:17">else<block pos:start="311:22" pos:end="315:17">{<block_content pos:start="313:21" pos:end="313:26">

                    <expr_stmt pos:start="313:21" pos:end="313:26"><expr pos:start="313:21" pos:end="313:25"><name pos:start="313:21" pos:end="313:23">run</name><operator pos:start="313:24" pos:end="313:25">++</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="319:13" pos:end="321:104"><if pos:start="319:13" pos:end="321:104">if<condition pos:start="319:15" pos:end="319:19">(<expr pos:start="319:16" pos:end="319:18"><name pos:start="319:16" pos:end="319:18">run</name></expr>)</condition><block type="pseudo" pos:start="321:17" pos:end="321:104"><block_content pos:start="321:17" pos:end="321:104">

                <expr_stmt pos:start="321:17" pos:end="321:104"><expr pos:start="321:17" pos:end="321:103"><call pos:start="321:17" pos:end="321:103"><name pos:start="321:17" pos:end="321:24">put_bits</name><argument_list pos:start="321:25" pos:end="321:103">(<argument pos:start="321:26" pos:end="321:31"><expr pos:start="321:26" pos:end="321:31"><operator pos:start="321:26" pos:end="321:26">&amp;</operator><name pos:start="321:27" pos:end="321:31"><name pos:start="321:27" pos:end="321:27">s</name><operator pos:start="321:28" pos:end="321:29">-&gt;</operator><name pos:start="321:30" pos:end="321:31">pb</name></name></expr></argument>, <argument pos:start="321:34" pos:end="321:66"><expr pos:start="321:34" pos:end="321:66"><name pos:start="321:34" pos:end="321:53"><name pos:start="321:34" pos:end="321:34">s</name><operator pos:start="321:35" pos:end="321:36">-&gt;</operator><name pos:start="321:37" pos:end="321:45">coef_vlcs</name><index pos:start="321:46" pos:end="321:53">[<expr pos:start="321:47" pos:end="321:52"><name pos:start="321:47" pos:end="321:52">tindex</name></expr>]</index></name><operator pos:start="321:54" pos:end="321:55">-&gt;</operator><name pos:start="321:56" pos:end="321:66"><name pos:start="321:56" pos:end="321:63">huffbits</name><index pos:start="321:64" pos:end="321:66">[<expr pos:start="321:65" pos:end="321:65"><literal type="number" pos:start="321:65" pos:end="321:65">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="321:69" pos:end="321:102"><expr pos:start="321:69" pos:end="321:102"><name pos:start="321:69" pos:end="321:88"><name pos:start="321:69" pos:end="321:69">s</name><operator pos:start="321:70" pos:end="321:71">-&gt;</operator><name pos:start="321:72" pos:end="321:80">coef_vlcs</name><index pos:start="321:81" pos:end="321:88">[<expr pos:start="321:82" pos:end="321:87"><name pos:start="321:82" pos:end="321:87">tindex</name></expr>]</index></name><operator pos:start="321:89" pos:end="321:90">-&gt;</operator><name pos:start="321:91" pos:end="321:102"><name pos:start="321:91" pos:end="321:99">huffcodes</name><index pos:start="321:100" pos:end="321:102">[<expr pos:start="321:101" pos:end="321:101"><literal type="number" pos:start="321:101" pos:end="321:101">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="325:9" pos:end="329:9"><if pos:start="325:9" pos:end="329:9">if <condition pos:start="325:12" pos:end="325:51">(<expr pos:start="325:13" pos:end="325:50"><name pos:start="325:13" pos:end="325:22"><name pos:start="325:13" pos:end="325:13">s</name><operator pos:start="325:14" pos:end="325:15">-&gt;</operator><name pos:start="325:16" pos:end="325:22">version</name></name> <operator pos:start="325:24" pos:end="325:25">==</operator> <literal type="number" pos:start="325:27" pos:end="325:27">1</literal> <operator pos:start="325:29" pos:end="325:30">&amp;&amp;</operator> <name pos:start="325:32" pos:end="325:45"><name pos:start="325:32" pos:end="325:32">s</name><operator pos:start="325:33" pos:end="325:34">-&gt;</operator><name pos:start="325:35" pos:end="325:45">nb_channels</name></name> <operator pos:start="325:47" pos:end="325:48">&gt;=</operator> <literal type="number" pos:start="325:50" pos:end="325:50">2</literal></expr>)</condition> <block pos:start="325:53" pos:end="329:9">{<block_content pos:start="327:13" pos:end="327:42">

            <expr_stmt pos:start="327:13" pos:end="327:42"><expr pos:start="327:13" pos:end="327:41"><call pos:start="327:13" pos:end="327:41"><name pos:start="327:13" pos:end="327:33">avpriv_align_put_bits</name><argument_list pos:start="327:34" pos:end="327:41">(<argument pos:start="327:35" pos:end="327:40"><expr pos:start="327:35" pos:end="327:40"><operator pos:start="327:35" pos:end="327:35">&amp;</operator><name pos:start="327:36" pos:end="327:40"><name pos:start="327:36" pos:end="327:36">s</name><operator pos:start="327:37" pos:end="327:38">-&gt;</operator><name pos:start="327:39" pos:end="327:40">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="333:5" pos:end="333:13">return <expr pos:start="333:12" pos:end="333:12"><literal type="number" pos:start="333:12" pos:end="333:12">0</literal></expr>;</return>

</block_content>}</block></decl></decl_stmt>
</unit>
