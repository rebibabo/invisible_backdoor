<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12213.c" pos:tabs="8"><function pos:start="1:1" pos:end="1873:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:19">gen_sse</name><parameter_list pos:start="1:20" pos:end="1:77">(<parameter pos:start="1:21" pos:end="1:35"><decl pos:start="1:21" pos:end="1:35"><type pos:start="1:21" pos:end="1:35"><name pos:start="1:21" pos:end="1:32">DisasContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:35">s</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:42"><decl pos:start="1:38" pos:end="1:42"><type pos:start="1:38" pos:end="1:42"><name pos:start="1:38" pos:end="1:40">int</name></type> <name pos:start="1:42" pos:end="1:42">b</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:65"><decl pos:start="1:45" pos:end="1:65"><type pos:start="1:45" pos:end="1:65"><name pos:start="1:45" pos:end="1:56">target_ulong</name></type> <name pos:start="1:58" pos:end="1:65">pc_start</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:76"><decl pos:start="1:68" pos:end="1:76"><type pos:start="1:68" pos:end="1:76"><name pos:start="1:68" pos:end="1:70">int</name></type> <name pos:start="1:72" pos:end="1:76">rex_r</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1873:1">{<block_content pos:start="5:5" pos:end="1871:5">

    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">b1</name></decl>, <decl pos:start="5:13" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:13" pos:end="5:22">op1_offset</name></decl>, <decl pos:start="5:25" pos:end="5:34"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:25" pos:end="5:34">op2_offset</name></decl>, <decl pos:start="5:37" pos:end="5:42"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:37" pos:end="5:42">is_xmm</name></decl>, <decl pos:start="5:45" pos:end="5:47"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:45" pos:end="5:47">val</name></decl>, <decl pos:start="5:50" pos:end="5:51"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:50" pos:end="5:51">ot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:51"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">modrm</name></decl>, <decl pos:start="7:16" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:18">mod</name></decl>, <decl pos:start="7:21" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:21" pos:end="7:22">rm</name></decl>, <decl pos:start="7:25" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:25" pos:end="7:27">reg</name></decl>, <decl pos:start="7:30" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:30" pos:end="7:37">reg_addr</name></decl>, <decl pos:start="7:40" pos:end="7:50"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:40" pos:end="7:50">offset_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">void</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:17">sse_op2</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:14"><expr pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:5">b</name> <operator pos:start="13:7" pos:end="13:8">&amp;=</operator> <literal type="number" pos:start="13:10" pos:end="13:13">0xff</literal></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="29:15"><if pos:start="15:5" pos:end="17:15">if <condition pos:start="15:8" pos:end="15:32">(<expr pos:start="15:9" pos:end="15:31"><name pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:17">prefix</name></name> <operator pos:start="15:19" pos:end="15:19">&amp;</operator> <name pos:start="15:21" pos:end="15:31">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:15"><block_content pos:start="17:9" pos:end="17:15">

        <expr_stmt pos:start="17:9" pos:end="17:15"><expr pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:10">b1</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">1</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="19:5" pos:end="21:15">else if <condition pos:start="19:13" pos:end="19:37">(<expr pos:start="19:14" pos:end="19:36"><name pos:start="19:14" pos:end="19:22"><name pos:start="19:14" pos:end="19:14">s</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:22">prefix</name></name> <operator pos:start="19:24" pos:end="19:24">&amp;</operator> <name pos:start="19:26" pos:end="19:36">PREFIX_REPZ</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:15"><block_content pos:start="21:9" pos:end="21:15">

        <expr_stmt pos:start="21:9" pos:end="21:15"><expr pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:10">b1</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">2</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="23:5" pos:end="25:15">else if <condition pos:start="23:13" pos:end="23:38">(<expr pos:start="23:14" pos:end="23:37"><name pos:start="23:14" pos:end="23:22"><name pos:start="23:14" pos:end="23:14">s</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:22">prefix</name></name> <operator pos:start="23:24" pos:end="23:24">&amp;</operator> <name pos:start="23:26" pos:end="23:37">PREFIX_REPNZ</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:15"><block_content pos:start="25:9" pos:end="25:15">

        <expr_stmt pos:start="25:9" pos:end="25:15"><expr pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:10">b1</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <literal type="number" pos:start="25:14" pos:end="25:14">3</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="27:5" pos:end="29:15">else<block type="pseudo" pos:start="29:9" pos:end="29:15"><block_content pos:start="29:9" pos:end="29:15">

        <expr_stmt pos:start="29:9" pos:end="29:15"><expr pos:start="29:9" pos:end="29:14"><name pos:start="29:9" pos:end="29:10">b1</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:35"><expr pos:start="31:5" pos:end="31:34"><name pos:start="31:5" pos:end="31:11">sse_op2</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:34"><name pos:start="31:15" pos:end="31:27">sse_op_table1</name><index pos:start="31:28" pos:end="31:30">[<expr pos:start="31:29" pos:end="31:29"><name pos:start="31:29" pos:end="31:29">b</name></expr>]</index><index pos:start="31:31" pos:end="31:34">[<expr pos:start="31:32" pos:end="31:33"><name pos:start="31:32" pos:end="31:33">b1</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="35:24"><if pos:start="33:5" pos:end="35:24">if <condition pos:start="33:8" pos:end="33:17">(<expr pos:start="33:9" pos:end="33:16"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:16">sse_op2</name></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:24"><block_content pos:start="35:9" pos:end="35:24">

        <goto pos:start="35:9" pos:end="35:24">goto <name pos:start="35:14" pos:end="35:23">illegal_op</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="55:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:59">(<expr pos:start="37:9" pos:end="37:58"><operator pos:start="37:9" pos:end="37:9">(</operator><name pos:start="37:10" pos:end="37:10">b</name> <operator pos:start="37:12" pos:end="37:13">&lt;=</operator> <literal type="number" pos:start="37:15" pos:end="37:18">0x5f</literal> <operator pos:start="37:20" pos:end="37:21">&amp;&amp;</operator> <name pos:start="37:23" pos:end="37:23">b</name> <operator pos:start="37:25" pos:end="37:26">&gt;=</operator> <literal type="number" pos:start="37:28" pos:end="37:31">0x10</literal><operator pos:start="37:32" pos:end="37:32">)</operator> <operator pos:start="37:34" pos:end="37:35">||</operator> <name pos:start="37:37" pos:end="37:37">b</name> <operator pos:start="37:39" pos:end="37:40">==</operator> <literal type="number" pos:start="37:42" pos:end="37:45">0xc6</literal> <operator pos:start="37:47" pos:end="37:48">||</operator> <name pos:start="37:50" pos:end="37:50">b</name> <operator pos:start="37:52" pos:end="37:53">==</operator> <literal type="number" pos:start="37:55" pos:end="37:58">0xc2</literal></expr>)</condition> <block pos:start="37:61" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:19">

        <expr_stmt pos:start="39:9" pos:end="39:19"><expr pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:14">is_xmm</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <literal type="number" pos:start="39:18" pos:end="39:18">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="55:5">else <block pos:start="41:12" pos:end="55:5">{<block_content pos:start="43:9" pos:end="53:9">

        <if_stmt pos:start="43:9" pos:end="53:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:20">(<expr pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:14">b1</name> <operator pos:start="43:16" pos:end="43:17">==</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>)</condition> <block pos:start="43:22" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:23">

            <comment type="block" pos:start="45:13" pos:end="45:26">/* MMX case */</comment>

            <expr_stmt pos:start="47:13" pos:end="47:23"><expr pos:start="47:13" pos:end="47:22"><name pos:start="47:13" pos:end="47:18">is_xmm</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <literal type="number" pos:start="47:22" pos:end="47:22">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="49:11" pos:end="53:9">else <block pos:start="49:16" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:23">

            <expr_stmt pos:start="51:13" pos:end="51:23"><expr pos:start="51:13" pos:end="51:22"><name pos:start="51:13" pos:end="51:18">is_xmm</name> <operator pos:start="51:20" pos:end="51:20">=</operator> <literal type="number" pos:start="51:22" pos:end="51:22">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="57:5" pos:end="57:34">/* simple MMX/SSE operation */</comment>

    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:30">(<expr pos:start="59:9" pos:end="59:29"><name pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:16">flags</name></name> <operator pos:start="59:18" pos:end="59:18">&amp;</operator> <name pos:start="59:20" pos:end="59:29">HF_TS_MASK</name></expr>)</condition> <block pos:start="59:32" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:15">

        <expr_stmt pos:start="61:9" pos:end="61:61"><expr pos:start="61:9" pos:end="61:60"><call pos:start="61:9" pos:end="61:60"><name pos:start="61:9" pos:end="61:21">gen_exception</name><argument_list pos:start="61:22" pos:end="61:60">(<argument pos:start="61:23" pos:end="61:23"><expr pos:start="61:23" pos:end="61:23"><name pos:start="61:23" pos:end="61:23">s</name></expr></argument>, <argument pos:start="61:26" pos:end="61:36"><expr pos:start="61:26" pos:end="61:36"><name pos:start="61:26" pos:end="61:36">EXCP07_PREX</name></expr></argument>, <argument pos:start="61:39" pos:end="61:59"><expr pos:start="61:39" pos:end="61:59"><name pos:start="61:39" pos:end="61:46">pc_start</name> <operator pos:start="61:48" pos:end="61:48">-</operator> <name pos:start="61:50" pos:end="61:59"><name pos:start="61:50" pos:end="61:50">s</name><operator pos:start="61:51" pos:end="61:52">-&gt;</operator><name pos:start="61:53" pos:end="61:59">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="75:5">if <condition pos:start="67:8" pos:end="67:30">(<expr pos:start="67:9" pos:end="67:29"><name pos:start="67:9" pos:end="67:16"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:16">flags</name></name> <operator pos:start="67:18" pos:end="67:18">&amp;</operator> <name pos:start="67:20" pos:end="67:29">HF_EM_MASK</name></expr>)</condition> <block pos:start="67:32" pos:end="75:5">{<block_content pos:start="69:5" pos:end="73:15">

    <label pos:start="69:5" pos:end="69:15"><name pos:start="69:5" pos:end="69:14">illegal_op</name>:</label>

        <expr_stmt pos:start="71:9" pos:end="71:62"><expr pos:start="71:9" pos:end="71:61"><call pos:start="71:9" pos:end="71:61"><name pos:start="71:9" pos:end="71:21">gen_exception</name><argument_list pos:start="71:22" pos:end="71:61">(<argument pos:start="71:23" pos:end="71:23"><expr pos:start="71:23" pos:end="71:23"><name pos:start="71:23" pos:end="71:23">s</name></expr></argument>, <argument pos:start="71:26" pos:end="71:37"><expr pos:start="71:26" pos:end="71:37"><name pos:start="71:26" pos:end="71:37">EXCP06_ILLOP</name></expr></argument>, <argument pos:start="71:40" pos:end="71:60"><expr pos:start="71:40" pos:end="71:60"><name pos:start="71:40" pos:end="71:47">pc_start</name> <operator pos:start="71:49" pos:end="71:49">-</operator> <name pos:start="71:51" pos:end="71:60"><name pos:start="71:51" pos:end="71:51">s</name><operator pos:start="71:52" pos:end="71:53">-&gt;</operator><name pos:start="71:54" pos:end="71:60">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="77:5" pos:end="81:28"><if pos:start="77:5" pos:end="81:28">if <condition pos:start="77:8" pos:end="77:47">(<expr pos:start="77:9" pos:end="77:46"><name pos:start="77:9" pos:end="77:14">is_xmm</name> <operator pos:start="77:16" pos:end="77:17">&amp;&amp;</operator> <operator pos:start="77:19" pos:end="77:19">!</operator><operator pos:start="77:20" pos:end="77:20">(</operator><name pos:start="77:21" pos:end="77:28"><name pos:start="77:21" pos:end="77:21">s</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:28">flags</name></name> <operator pos:start="77:30" pos:end="77:30">&amp;</operator> <name pos:start="77:32" pos:end="77:45">HF_OSFXSR_MASK</name><operator pos:start="77:46" pos:end="77:46">)</operator></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="81:28"><block_content pos:start="79:9" pos:end="81:28">

        <if_stmt pos:start="79:9" pos:end="81:28"><if pos:start="79:9" pos:end="81:28">if <condition pos:start="79:12" pos:end="79:66">(<expr pos:start="79:13" pos:end="79:65"><operator pos:start="79:13" pos:end="79:13">(</operator><name pos:start="79:14" pos:end="79:14">b</name> <operator pos:start="79:16" pos:end="79:17">!=</operator> <literal type="number" pos:start="79:19" pos:end="79:22">0x38</literal> <operator pos:start="79:24" pos:end="79:25">&amp;&amp;</operator> <name pos:start="79:27" pos:end="79:27">b</name> <operator pos:start="79:29" pos:end="79:30">!=</operator> <literal type="number" pos:start="79:32" pos:end="79:35">0x3a</literal><operator pos:start="79:36" pos:end="79:36">)</operator> <operator pos:start="79:38" pos:end="79:39">||</operator> <operator pos:start="79:41" pos:end="79:41">(</operator><name pos:start="79:42" pos:end="79:50"><name pos:start="79:42" pos:end="79:42">s</name><operator pos:start="79:43" pos:end="79:44">-&gt;</operator><name pos:start="79:45" pos:end="79:50">prefix</name></name> <operator pos:start="79:52" pos:end="79:52">&amp;</operator> <name pos:start="79:54" pos:end="79:64">PREFIX_DATA</name><operator pos:start="79:65" pos:end="79:65">)</operator></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:28"><block_content pos:start="81:13" pos:end="81:28">

            <goto pos:start="81:13" pos:end="81:28">goto <name pos:start="81:18" pos:end="81:27">illegal_op</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="83:5" pos:end="95:5"><if pos:start="83:5" pos:end="95:5">if <condition pos:start="83:8" pos:end="83:18">(<expr pos:start="83:9" pos:end="83:17"><name pos:start="83:9" pos:end="83:9">b</name> <operator pos:start="83:11" pos:end="83:12">==</operator> <literal type="number" pos:start="83:14" pos:end="83:17">0x0e</literal></expr>)</condition> <block pos:start="83:20" pos:end="95:5">{<block_content pos:start="85:9" pos:end="93:15">

        <if_stmt pos:start="85:9" pos:end="87:28"><if pos:start="85:9" pos:end="87:28">if <condition pos:start="85:12" pos:end="85:57">(<expr pos:start="85:13" pos:end="85:56"><operator pos:start="85:13" pos:end="85:13">!</operator><operator pos:start="85:14" pos:end="85:14">(</operator><name pos:start="85:15" pos:end="85:36"><name pos:start="85:15" pos:end="85:15">s</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:36">cpuid_ext2_features</name></name> <operator pos:start="85:38" pos:end="85:38">&amp;</operator> <name pos:start="85:40" pos:end="85:55">CPUID_EXT2_3DNOW</name><operator pos:start="85:56" pos:end="85:56">)</operator></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:28"><block_content pos:start="87:13" pos:end="87:28">

            <goto pos:start="87:13" pos:end="87:28">goto <name pos:start="87:18" pos:end="87:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block" pos:start="89:9" pos:end="89:19">/* femms */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:40"><expr pos:start="91:9" pos:end="91:39"><call pos:start="91:9" pos:end="91:39"><name pos:start="91:9" pos:end="91:26">tcg_gen_helper_0_0</name><argument_list pos:start="91:27" pos:end="91:39">(<argument pos:start="91:28" pos:end="91:38"><expr pos:start="91:28" pos:end="91:38"><name pos:start="91:28" pos:end="91:38">helper_emms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="97:5" pos:end="105:5"><if pos:start="97:5" pos:end="105:5">if <condition pos:start="97:8" pos:end="97:18">(<expr pos:start="97:9" pos:end="97:17"><name pos:start="97:9" pos:end="97:9">b</name> <operator pos:start="97:11" pos:end="97:12">==</operator> <literal type="number" pos:start="97:14" pos:end="97:17">0x77</literal></expr>)</condition> <block pos:start="97:20" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:15">

        <comment type="block" pos:start="99:9" pos:end="99:18">/* emms */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:40"><expr pos:start="101:9" pos:end="101:39"><call pos:start="101:9" pos:end="101:39"><name pos:start="101:9" pos:end="101:26">tcg_gen_helper_0_0</name><argument_list pos:start="101:27" pos:end="101:39">(<argument pos:start="101:28" pos:end="101:38"><expr pos:start="101:28" pos:end="101:38"><name pos:start="101:28" pos:end="101:38">helper_emms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="107:5" pos:end="109:31">/* prepare MMX state (XXX: optimize by storing fptt and fptags in

       the static cpu state) */</comment>

    <if_stmt pos:start="111:5" pos:end="115:5"><if pos:start="111:5" pos:end="115:5">if <condition pos:start="111:8" pos:end="111:16">(<expr pos:start="111:9" pos:end="111:15"><operator pos:start="111:9" pos:end="111:9">!</operator><name pos:start="111:10" pos:end="111:15">is_xmm</name></expr>)</condition> <block pos:start="111:18" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:45">

        <expr_stmt pos:start="113:9" pos:end="113:45"><expr pos:start="113:9" pos:end="113:44"><call pos:start="113:9" pos:end="113:44"><name pos:start="113:9" pos:end="113:26">tcg_gen_helper_0_0</name><argument_list pos:start="113:27" pos:end="113:44">(<argument pos:start="113:28" pos:end="113:43"><expr pos:start="113:28" pos:end="113:43"><name pos:start="113:28" pos:end="113:43">helper_enter_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:31"><expr pos:start="119:5" pos:end="119:30"><name pos:start="119:5" pos:end="119:9">modrm</name> <operator pos:start="119:11" pos:end="119:11">=</operator> <call pos:start="119:13" pos:end="119:30"><name pos:start="119:13" pos:end="119:21">ldub_code</name><argument_list pos:start="119:22" pos:end="119:30">(<argument pos:start="119:23" pos:end="119:29"><expr pos:start="119:23" pos:end="119:29"><name pos:start="119:23" pos:end="119:27"><name pos:start="119:23" pos:end="119:23">s</name><operator pos:start="119:24" pos:end="119:25">-&gt;</operator><name pos:start="119:26" pos:end="119:27">pc</name></name><operator pos:start="119:28" pos:end="119:29">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:29"><expr pos:start="121:5" pos:end="121:28"><name pos:start="121:5" pos:end="121:7">reg</name> <operator pos:start="121:9" pos:end="121:9">=</operator> <operator pos:start="121:11" pos:end="121:11">(</operator><operator pos:start="121:12" pos:end="121:12">(</operator><name pos:start="121:13" pos:end="121:17">modrm</name> <operator pos:start="121:19" pos:end="121:20">&gt;&gt;</operator> <literal type="number" pos:start="121:22" pos:end="121:22">3</literal><operator pos:start="121:23" pos:end="121:23">)</operator> <operator pos:start="121:25" pos:end="121:25">&amp;</operator> <literal type="number" pos:start="121:27" pos:end="121:27">7</literal><operator pos:start="121:28" pos:end="121:28">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="125:21"><if pos:start="123:5" pos:end="125:21">if <condition pos:start="123:8" pos:end="123:15">(<expr pos:start="123:9" pos:end="123:14"><name pos:start="123:9" pos:end="123:14">is_xmm</name></expr>)</condition><block type="pseudo" pos:start="125:9" pos:end="125:21"><block_content pos:start="125:9" pos:end="125:21">

        <expr_stmt pos:start="125:9" pos:end="125:21"><expr pos:start="125:9" pos:end="125:20"><name pos:start="125:9" pos:end="125:11">reg</name> <operator pos:start="125:13" pos:end="125:14">|=</operator> <name pos:start="125:16" pos:end="125:20">rex_r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:27"><expr pos:start="127:5" pos:end="127:26"><name pos:start="127:5" pos:end="127:7">mod</name> <operator pos:start="127:9" pos:end="127:9">=</operator> <operator pos:start="127:11" pos:end="127:11">(</operator><name pos:start="127:12" pos:end="127:16">modrm</name> <operator pos:start="127:18" pos:end="127:19">&gt;&gt;</operator> <literal type="number" pos:start="127:21" pos:end="127:21">6</literal><operator pos:start="127:22" pos:end="127:22">)</operator> <operator pos:start="127:24" pos:end="127:24">&amp;</operator> <literal type="number" pos:start="127:26" pos:end="127:26">3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="129:5" pos:end="1871:5"><if pos:start="129:5" pos:end="1665:5">if <condition pos:start="129:8" pos:end="129:31">(<expr pos:start="129:9" pos:end="129:30"><name pos:start="129:9" pos:end="129:15">sse_op2</name> <operator pos:start="129:17" pos:end="129:18">==</operator> <name pos:start="129:20" pos:end="129:30">SSE_SPECIAL</name></expr>)</condition> <block pos:start="129:33" pos:end="1665:5">{<block_content pos:start="131:9" pos:end="1663:9">

        <expr_stmt pos:start="131:9" pos:end="131:23"><expr pos:start="131:9" pos:end="131:22"><name pos:start="131:9" pos:end="131:9">b</name> <operator pos:start="131:11" pos:end="131:12">|=</operator> <operator pos:start="131:14" pos:end="131:14">(</operator><name pos:start="131:15" pos:end="131:16">b1</name> <operator pos:start="131:18" pos:end="131:19">&lt;&lt;</operator> <literal type="number" pos:start="131:21" pos:end="131:21">8</literal><operator pos:start="131:22" pos:end="131:22">)</operator></expr>;</expr_stmt>

        <switch pos:start="133:9" pos:end="1663:9">switch<condition pos:start="133:15" pos:end="133:17">(<expr pos:start="133:16" pos:end="133:16"><name pos:start="133:16" pos:end="133:16">b</name></expr>)</condition> <block pos:start="133:19" pos:end="1663:9">{<block_content pos:start="135:9" pos:end="1661:28">

        <case pos:start="135:9" pos:end="135:19">case <expr pos:start="135:14" pos:end="135:18"><literal type="number" pos:start="135:14" pos:end="135:18">0x0e7</literal></expr>:</case> <comment type="block" pos:start="135:21" pos:end="135:32">/* movntq */</comment>

            <if_stmt pos:start="137:13" pos:end="139:32"><if pos:start="137:13" pos:end="139:32">if <condition pos:start="137:16" pos:end="137:25">(<expr pos:start="137:17" pos:end="137:24"><name pos:start="137:17" pos:end="137:19">mod</name> <operator pos:start="137:21" pos:end="137:22">==</operator> <literal type="number" pos:start="137:24" pos:end="137:24">3</literal></expr>)</condition><block type="pseudo" pos:start="139:17" pos:end="139:32"><block_content pos:start="139:17" pos:end="139:32">

                <goto pos:start="139:17" pos:end="139:32">goto <name pos:start="139:22" pos:end="139:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:61"><expr pos:start="141:13" pos:end="141:60"><call pos:start="141:13" pos:end="141:60"><name pos:start="141:13" pos:end="141:25">gen_lea_modrm</name><argument_list pos:start="141:26" pos:end="141:60">(<argument pos:start="141:27" pos:end="141:27"><expr pos:start="141:27" pos:end="141:27"><name pos:start="141:27" pos:end="141:27">s</name></expr></argument>, <argument pos:start="141:30" pos:end="141:34"><expr pos:start="141:30" pos:end="141:34"><name pos:start="141:30" pos:end="141:34">modrm</name></expr></argument>, <argument pos:start="141:37" pos:end="141:45"><expr pos:start="141:37" pos:end="141:45"><operator pos:start="141:37" pos:end="141:37">&amp;</operator><name pos:start="141:38" pos:end="141:45">reg_addr</name></expr></argument>, <argument pos:start="141:48" pos:end="141:59"><expr pos:start="141:48" pos:end="141:59"><operator pos:start="141:48" pos:end="141:48">&amp;</operator><name pos:start="141:49" pos:end="141:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:80"><expr pos:start="143:13" pos:end="143:79"><call pos:start="143:13" pos:end="143:79"><name pos:start="143:13" pos:end="143:26">gen_stq_env_A0</name><argument_list pos:start="143:27" pos:end="143:79">(<argument pos:start="143:28" pos:end="143:39"><expr pos:start="143:28" pos:end="143:39"><name pos:start="143:28" pos:end="143:39"><name pos:start="143:28" pos:end="143:28">s</name><operator pos:start="143:29" pos:end="143:30">-&gt;</operator><name pos:start="143:31" pos:end="143:39">mem_index</name></name></expr></argument>, <argument pos:start="143:42" pos:end="143:78"><expr pos:start="143:42" pos:end="143:78"><call pos:start="143:42" pos:end="143:78"><name pos:start="143:42" pos:end="143:49">offsetof</name><argument_list pos:start="143:50" pos:end="143:78">(<argument pos:start="143:51" pos:end="143:61"><expr pos:start="143:51" pos:end="143:61"><name pos:start="143:51" pos:end="143:61">CPUX86State</name></expr></argument>,<argument pos:start="143:63" pos:end="143:77"><expr pos:start="143:63" pos:end="143:77"><name pos:start="143:63" pos:end="143:73"><name pos:start="143:63" pos:end="143:68">fpregs</name><index pos:start="143:69" pos:end="143:73">[<expr pos:start="143:70" pos:end="143:72"><name pos:start="143:70" pos:end="143:72">reg</name></expr>]</index></name><operator pos:start="143:74" pos:end="143:74">.</operator><name pos:start="143:75" pos:end="143:77">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="145:13" pos:end="145:18">break;</break>

        <case pos:start="147:9" pos:end="147:19">case <expr pos:start="147:14" pos:end="147:18"><literal type="number" pos:start="147:14" pos:end="147:18">0x1e7</literal></expr>:</case> <comment type="block" pos:start="147:21" pos:end="147:33">/* movntdq */</comment>

        <case pos:start="149:9" pos:end="149:19">case <expr pos:start="149:14" pos:end="149:18"><literal type="number" pos:start="149:14" pos:end="149:18">0x02b</literal></expr>:</case> <comment type="block" pos:start="149:21" pos:end="149:33">/* movntps */</comment>

        <case pos:start="151:9" pos:end="151:19">case <expr pos:start="151:14" pos:end="151:18"><literal type="number" pos:start="151:14" pos:end="151:18">0x12b</literal></expr>:</case> <comment type="block" pos:start="151:21" pos:end="151:33">/* movntps */</comment>

        <case pos:start="153:9" pos:end="153:19">case <expr pos:start="153:14" pos:end="153:18"><literal type="number" pos:start="153:14" pos:end="153:18">0x3f0</literal></expr>:</case> <comment type="block" pos:start="153:21" pos:end="153:31">/* lddqu */</comment>

            <if_stmt pos:start="155:13" pos:end="157:32"><if pos:start="155:13" pos:end="157:32">if <condition pos:start="155:16" pos:end="155:25">(<expr pos:start="155:17" pos:end="155:24"><name pos:start="155:17" pos:end="155:19">mod</name> <operator pos:start="155:21" pos:end="155:22">==</operator> <literal type="number" pos:start="155:24" pos:end="155:24">3</literal></expr>)</condition><block type="pseudo" pos:start="157:17" pos:end="157:32"><block_content pos:start="157:17" pos:end="157:32">

                <goto pos:start="157:17" pos:end="157:32">goto <name pos:start="157:22" pos:end="157:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:61"><expr pos:start="159:13" pos:end="159:60"><call pos:start="159:13" pos:end="159:60"><name pos:start="159:13" pos:end="159:25">gen_lea_modrm</name><argument_list pos:start="159:26" pos:end="159:60">(<argument pos:start="159:27" pos:end="159:27"><expr pos:start="159:27" pos:end="159:27"><name pos:start="159:27" pos:end="159:27">s</name></expr></argument>, <argument pos:start="159:30" pos:end="159:34"><expr pos:start="159:30" pos:end="159:34"><name pos:start="159:30" pos:end="159:34">modrm</name></expr></argument>, <argument pos:start="159:37" pos:end="159:45"><expr pos:start="159:37" pos:end="159:45"><operator pos:start="159:37" pos:end="159:37">&amp;</operator><name pos:start="159:38" pos:end="159:45">reg_addr</name></expr></argument>, <argument pos:start="159:48" pos:end="159:59"><expr pos:start="159:48" pos:end="159:59"><operator pos:start="159:48" pos:end="159:48">&amp;</operator><name pos:start="159:49" pos:end="159:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:78"><expr pos:start="161:13" pos:end="161:77"><call pos:start="161:13" pos:end="161:77"><name pos:start="161:13" pos:end="161:26">gen_sto_env_A0</name><argument_list pos:start="161:27" pos:end="161:77">(<argument pos:start="161:28" pos:end="161:39"><expr pos:start="161:28" pos:end="161:39"><name pos:start="161:28" pos:end="161:39"><name pos:start="161:28" pos:end="161:28">s</name><operator pos:start="161:29" pos:end="161:30">-&gt;</operator><name pos:start="161:31" pos:end="161:39">mem_index</name></name></expr></argument>, <argument pos:start="161:42" pos:end="161:76"><expr pos:start="161:42" pos:end="161:76"><call pos:start="161:42" pos:end="161:76"><name pos:start="161:42" pos:end="161:49">offsetof</name><argument_list pos:start="161:50" pos:end="161:76">(<argument pos:start="161:51" pos:end="161:61"><expr pos:start="161:51" pos:end="161:61"><name pos:start="161:51" pos:end="161:61">CPUX86State</name></expr></argument>,<argument pos:start="161:63" pos:end="161:75"><expr pos:start="161:63" pos:end="161:75"><name pos:start="161:63" pos:end="161:75"><name pos:start="161:63" pos:end="161:70">xmm_regs</name><index pos:start="161:71" pos:end="161:75">[<expr pos:start="161:72" pos:end="161:74"><name pos:start="161:72" pos:end="161:74">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="163:13" pos:end="163:18">break;</break>

        <case pos:start="165:9" pos:end="168:0">case <expr pos:start="165:14" pos:end="165:17"><literal type="number" pos:start="165:14" pos:end="165:17">0x6e</literal></expr>:</case> <comment type="block" pos:start="165:20" pos:end="165:36">/* movd mm, ea */</comment>

<cpp:ifdef pos:start="167:1" pos:end="167:20">#<cpp:directive pos:start="167:2" pos:end="167:6">ifdef</cpp:directive> <name pos:start="167:8" pos:end="167:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="169:13" pos:end="189:13"><if pos:start="169:13" pos:end="175:13">if <condition pos:start="169:16" pos:end="169:30">(<expr pos:start="169:17" pos:end="169:29"><name pos:start="169:17" pos:end="169:24"><name pos:start="169:17" pos:end="169:17">s</name><operator pos:start="169:18" pos:end="169:19">-&gt;</operator><name pos:start="169:20" pos:end="169:24">dflag</name></name> <operator pos:start="169:26" pos:end="169:27">==</operator> <literal type="number" pos:start="169:29" pos:end="169:29">2</literal></expr>)</condition> <block pos:start="169:32" pos:end="175:13">{<block_content pos:start="171:17" pos:end="173:88">

                <expr_stmt pos:start="171:17" pos:end="171:62"><expr pos:start="171:17" pos:end="171:61"><call pos:start="171:17" pos:end="171:61"><name pos:start="171:17" pos:end="171:30">gen_ldst_modrm</name><argument_list pos:start="171:31" pos:end="171:61">(<argument pos:start="171:32" pos:end="171:32"><expr pos:start="171:32" pos:end="171:32"><name pos:start="171:32" pos:end="171:32">s</name></expr></argument>, <argument pos:start="171:35" pos:end="171:39"><expr pos:start="171:35" pos:end="171:39"><name pos:start="171:35" pos:end="171:39">modrm</name></expr></argument>, <argument pos:start="171:42" pos:end="171:48"><expr pos:start="171:42" pos:end="171:48"><name pos:start="171:42" pos:end="171:48">OT_QUAD</name></expr></argument>, <argument pos:start="171:51" pos:end="171:57"><expr pos:start="171:51" pos:end="171:57"><name pos:start="171:51" pos:end="171:57">OR_TMP0</name></expr></argument>, <argument pos:start="171:60" pos:end="171:60"><expr pos:start="171:60" pos:end="171:60"><literal type="number" pos:start="171:60" pos:end="171:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="173:17" pos:end="173:88"><expr pos:start="173:17" pos:end="173:87"><call pos:start="173:17" pos:end="173:87"><name pos:start="173:17" pos:end="173:29">tcg_gen_st_tl</name><argument_list pos:start="173:30" pos:end="173:87">(<argument pos:start="173:31" pos:end="173:38"><expr pos:start="173:31" pos:end="173:38"><name pos:start="173:31" pos:end="173:38"><name pos:start="173:31" pos:end="173:35">cpu_T</name><index pos:start="173:36" pos:end="173:38">[<expr pos:start="173:37" pos:end="173:37"><literal type="number" pos:start="173:37" pos:end="173:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="173:41" pos:end="173:47"><expr pos:start="173:41" pos:end="173:47"><name pos:start="173:41" pos:end="173:47">cpu_env</name></expr></argument>, <argument pos:start="173:50" pos:end="173:86"><expr pos:start="173:50" pos:end="173:86"><call pos:start="173:50" pos:end="173:86"><name pos:start="173:50" pos:end="173:57">offsetof</name><argument_list pos:start="173:58" pos:end="173:86">(<argument pos:start="173:59" pos:end="173:69"><expr pos:start="173:59" pos:end="173:69"><name pos:start="173:59" pos:end="173:69">CPUX86State</name></expr></argument>,<argument pos:start="173:71" pos:end="173:85"><expr pos:start="173:71" pos:end="173:85"><name pos:start="173:71" pos:end="173:81"><name pos:start="173:71" pos:end="173:76">fpregs</name><index pos:start="173:77" pos:end="173:81">[<expr pos:start="173:78" pos:end="173:80"><name pos:start="173:78" pos:end="173:80">reg</name></expr>]</index></name><operator pos:start="173:82" pos:end="173:82">.</operator><name pos:start="173:83" pos:end="173:85">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="175:15" pos:end="189:13">else

<cpp:endif pos:start="177:1" pos:end="177:6">#<cpp:directive pos:start="177:2" pos:end="177:6">endif</cpp:directive></cpp:endif>

            <block pos:start="179:13" pos:end="189:13">{<block_content pos:start="181:17" pos:end="187:78">

                <expr_stmt pos:start="181:17" pos:end="181:62"><expr pos:start="181:17" pos:end="181:61"><call pos:start="181:17" pos:end="181:61"><name pos:start="181:17" pos:end="181:30">gen_ldst_modrm</name><argument_list pos:start="181:31" pos:end="181:61">(<argument pos:start="181:32" pos:end="181:32"><expr pos:start="181:32" pos:end="181:32"><name pos:start="181:32" pos:end="181:32">s</name></expr></argument>, <argument pos:start="181:35" pos:end="181:39"><expr pos:start="181:35" pos:end="181:39"><name pos:start="181:35" pos:end="181:39">modrm</name></expr></argument>, <argument pos:start="181:42" pos:end="181:48"><expr pos:start="181:42" pos:end="181:48"><name pos:start="181:42" pos:end="181:48">OT_LONG</name></expr></argument>, <argument pos:start="181:51" pos:end="181:57"><expr pos:start="181:51" pos:end="181:57"><name pos:start="181:51" pos:end="181:57">OR_TMP0</name></expr></argument>, <argument pos:start="181:60" pos:end="181:60"><expr pos:start="181:60" pos:end="181:60"><literal type="number" pos:start="181:60" pos:end="181:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="183:17" pos:end="185:72"><expr pos:start="183:17" pos:end="185:71"><call pos:start="183:17" pos:end="185:71"><name pos:start="183:17" pos:end="183:32">tcg_gen_addi_ptr</name><argument_list pos:start="183:33" pos:end="185:71">(<argument pos:start="183:34" pos:end="183:41"><expr pos:start="183:34" pos:end="183:41"><name pos:start="183:34" pos:end="183:41">cpu_ptr0</name></expr></argument>, <argument pos:start="183:44" pos:end="183:50"><expr pos:start="183:44" pos:end="183:50"><name pos:start="183:44" pos:end="183:50">cpu_env</name></expr></argument>, 

                                 <argument pos:start="185:34" pos:end="185:70"><expr pos:start="185:34" pos:end="185:70"><call pos:start="185:34" pos:end="185:70"><name pos:start="185:34" pos:end="185:41">offsetof</name><argument_list pos:start="185:42" pos:end="185:70">(<argument pos:start="185:43" pos:end="185:53"><expr pos:start="185:43" pos:end="185:53"><name pos:start="185:43" pos:end="185:53">CPUX86State</name></expr></argument>,<argument pos:start="185:55" pos:end="185:69"><expr pos:start="185:55" pos:end="185:69"><name pos:start="185:55" pos:end="185:65"><name pos:start="185:55" pos:end="185:60">fpregs</name><index pos:start="185:61" pos:end="185:65">[<expr pos:start="185:62" pos:end="185:64"><name pos:start="185:62" pos:end="185:64">reg</name></expr>]</index></name><operator pos:start="185:66" pos:end="185:66">.</operator><name pos:start="185:67" pos:end="185:69">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="187:17" pos:end="187:78"><expr pos:start="187:17" pos:end="187:77"><call pos:start="187:17" pos:end="187:77"><name pos:start="187:17" pos:end="187:34">tcg_gen_helper_0_2</name><argument_list pos:start="187:35" pos:end="187:77">(<argument pos:start="187:36" pos:end="187:56"><expr pos:start="187:36" pos:end="187:56"><name pos:start="187:36" pos:end="187:56">helper_movl_mm_T0_mmx</name></expr></argument>, <argument pos:start="187:59" pos:end="187:66"><expr pos:start="187:59" pos:end="187:66"><name pos:start="187:59" pos:end="187:66">cpu_ptr0</name></expr></argument>, <argument pos:start="187:69" pos:end="187:76"><expr pos:start="187:69" pos:end="187:76"><name pos:start="187:69" pos:end="187:76"><name pos:start="187:69" pos:end="187:73">cpu_T</name><index pos:start="187:74" pos:end="187:76">[<expr pos:start="187:75" pos:end="187:75"><literal type="number" pos:start="187:75" pos:end="187:75">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="191:13" pos:end="191:18">break;</break>

        <case pos:start="193:9" pos:end="196:0">case <expr pos:start="193:14" pos:end="193:18"><literal type="number" pos:start="193:14" pos:end="193:18">0x16e</literal></expr>:</case> <comment type="block" pos:start="193:21" pos:end="193:38">/* movd xmm, ea */</comment>

<cpp:ifdef pos:start="195:1" pos:end="195:20">#<cpp:directive pos:start="195:2" pos:end="195:6">ifdef</cpp:directive> <name pos:start="195:8" pos:end="195:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="197:13" pos:end="223:13"><if pos:start="197:13" pos:end="207:13">if <condition pos:start="197:16" pos:end="197:30">(<expr pos:start="197:17" pos:end="197:29"><name pos:start="197:17" pos:end="197:24"><name pos:start="197:17" pos:end="197:17">s</name><operator pos:start="197:18" pos:end="197:19">-&gt;</operator><name pos:start="197:20" pos:end="197:24">dflag</name></name> <operator pos:start="197:26" pos:end="197:27">==</operator> <literal type="number" pos:start="197:29" pos:end="197:29">2</literal></expr>)</condition> <block pos:start="197:32" pos:end="207:13">{<block_content pos:start="199:17" pos:end="205:78">

                <expr_stmt pos:start="199:17" pos:end="199:62"><expr pos:start="199:17" pos:end="199:61"><call pos:start="199:17" pos:end="199:61"><name pos:start="199:17" pos:end="199:30">gen_ldst_modrm</name><argument_list pos:start="199:31" pos:end="199:61">(<argument pos:start="199:32" pos:end="199:32"><expr pos:start="199:32" pos:end="199:32"><name pos:start="199:32" pos:end="199:32">s</name></expr></argument>, <argument pos:start="199:35" pos:end="199:39"><expr pos:start="199:35" pos:end="199:39"><name pos:start="199:35" pos:end="199:39">modrm</name></expr></argument>, <argument pos:start="199:42" pos:end="199:48"><expr pos:start="199:42" pos:end="199:48"><name pos:start="199:42" pos:end="199:48">OT_QUAD</name></expr></argument>, <argument pos:start="199:51" pos:end="199:57"><expr pos:start="199:51" pos:end="199:57"><name pos:start="199:51" pos:end="199:57">OR_TMP0</name></expr></argument>, <argument pos:start="199:60" pos:end="199:60"><expr pos:start="199:60" pos:end="199:60"><literal type="number" pos:start="199:60" pos:end="199:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="201:17" pos:end="203:70"><expr pos:start="201:17" pos:end="203:69"><call pos:start="201:17" pos:end="203:69"><name pos:start="201:17" pos:end="201:32">tcg_gen_addi_ptr</name><argument_list pos:start="201:33" pos:end="203:69">(<argument pos:start="201:34" pos:end="201:41"><expr pos:start="201:34" pos:end="201:41"><name pos:start="201:34" pos:end="201:41">cpu_ptr0</name></expr></argument>, <argument pos:start="201:44" pos:end="201:50"><expr pos:start="201:44" pos:end="201:50"><name pos:start="201:44" pos:end="201:50">cpu_env</name></expr></argument>, 

                                 <argument pos:start="203:34" pos:end="203:68"><expr pos:start="203:34" pos:end="203:68"><call pos:start="203:34" pos:end="203:68"><name pos:start="203:34" pos:end="203:41">offsetof</name><argument_list pos:start="203:42" pos:end="203:68">(<argument pos:start="203:43" pos:end="203:53"><expr pos:start="203:43" pos:end="203:53"><name pos:start="203:43" pos:end="203:53">CPUX86State</name></expr></argument>,<argument pos:start="203:55" pos:end="203:67"><expr pos:start="203:55" pos:end="203:67"><name pos:start="203:55" pos:end="203:67"><name pos:start="203:55" pos:end="203:62">xmm_regs</name><index pos:start="203:63" pos:end="203:67">[<expr pos:start="203:64" pos:end="203:66"><name pos:start="203:64" pos:end="203:66">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:78"><expr pos:start="205:17" pos:end="205:77"><call pos:start="205:17" pos:end="205:77"><name pos:start="205:17" pos:end="205:34">tcg_gen_helper_0_2</name><argument_list pos:start="205:35" pos:end="205:77">(<argument pos:start="205:36" pos:end="205:56"><expr pos:start="205:36" pos:end="205:56"><name pos:start="205:36" pos:end="205:56">helper_movq_mm_T0_xmm</name></expr></argument>, <argument pos:start="205:59" pos:end="205:66"><expr pos:start="205:59" pos:end="205:66"><name pos:start="205:59" pos:end="205:66">cpu_ptr0</name></expr></argument>, <argument pos:start="205:69" pos:end="205:76"><expr pos:start="205:69" pos:end="205:76"><name pos:start="205:69" pos:end="205:76"><name pos:start="205:69" pos:end="205:73">cpu_T</name><index pos:start="205:74" pos:end="205:76">[<expr pos:start="205:75" pos:end="205:75"><literal type="number" pos:start="205:75" pos:end="205:75">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="207:15" pos:end="223:13">else

<cpp:endif pos:start="209:1" pos:end="209:6">#<cpp:directive pos:start="209:2" pos:end="209:6">endif</cpp:directive></cpp:endif>

            <block pos:start="211:13" pos:end="223:13">{<block_content pos:start="213:17" pos:end="221:82">

                <expr_stmt pos:start="213:17" pos:end="213:62"><expr pos:start="213:17" pos:end="213:61"><call pos:start="213:17" pos:end="213:61"><name pos:start="213:17" pos:end="213:30">gen_ldst_modrm</name><argument_list pos:start="213:31" pos:end="213:61">(<argument pos:start="213:32" pos:end="213:32"><expr pos:start="213:32" pos:end="213:32"><name pos:start="213:32" pos:end="213:32">s</name></expr></argument>, <argument pos:start="213:35" pos:end="213:39"><expr pos:start="213:35" pos:end="213:39"><name pos:start="213:35" pos:end="213:39">modrm</name></expr></argument>, <argument pos:start="213:42" pos:end="213:48"><expr pos:start="213:42" pos:end="213:48"><name pos:start="213:42" pos:end="213:48">OT_LONG</name></expr></argument>, <argument pos:start="213:51" pos:end="213:57"><expr pos:start="213:51" pos:end="213:57"><name pos:start="213:51" pos:end="213:57">OR_TMP0</name></expr></argument>, <argument pos:start="213:60" pos:end="213:60"><expr pos:start="213:60" pos:end="213:60"><literal type="number" pos:start="213:60" pos:end="213:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="215:17" pos:end="217:70"><expr pos:start="215:17" pos:end="217:69"><call pos:start="215:17" pos:end="217:69"><name pos:start="215:17" pos:end="215:32">tcg_gen_addi_ptr</name><argument_list pos:start="215:33" pos:end="217:69">(<argument pos:start="215:34" pos:end="215:41"><expr pos:start="215:34" pos:end="215:41"><name pos:start="215:34" pos:end="215:41">cpu_ptr0</name></expr></argument>, <argument pos:start="215:44" pos:end="215:50"><expr pos:start="215:44" pos:end="215:50"><name pos:start="215:44" pos:end="215:50">cpu_env</name></expr></argument>, 

                                 <argument pos:start="217:34" pos:end="217:68"><expr pos:start="217:34" pos:end="217:68"><call pos:start="217:34" pos:end="217:68"><name pos:start="217:34" pos:end="217:41">offsetof</name><argument_list pos:start="217:42" pos:end="217:68">(<argument pos:start="217:43" pos:end="217:53"><expr pos:start="217:43" pos:end="217:53"><name pos:start="217:43" pos:end="217:53">CPUX86State</name></expr></argument>,<argument pos:start="217:55" pos:end="217:67"><expr pos:start="217:55" pos:end="217:67"><name pos:start="217:55" pos:end="217:67"><name pos:start="217:55" pos:end="217:62">xmm_regs</name><index pos:start="217:63" pos:end="217:67">[<expr pos:start="217:64" pos:end="217:66"><name pos:start="217:64" pos:end="217:66">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="219:17" pos:end="219:61"><expr pos:start="219:17" pos:end="219:60"><call pos:start="219:17" pos:end="219:60"><name pos:start="219:17" pos:end="219:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="219:37" pos:end="219:60">(<argument pos:start="219:38" pos:end="219:49"><expr pos:start="219:38" pos:end="219:49"><name pos:start="219:38" pos:end="219:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="219:52" pos:end="219:59"><expr pos:start="219:52" pos:end="219:59"><name pos:start="219:52" pos:end="219:59"><name pos:start="219:52" pos:end="219:56">cpu_T</name><index pos:start="219:57" pos:end="219:59">[<expr pos:start="219:58" pos:end="219:58"><literal type="number" pos:start="219:58" pos:end="219:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="221:17" pos:end="221:82"><expr pos:start="221:17" pos:end="221:81"><call pos:start="221:17" pos:end="221:81"><name pos:start="221:17" pos:end="221:34">tcg_gen_helper_0_2</name><argument_list pos:start="221:35" pos:end="221:81">(<argument pos:start="221:36" pos:end="221:56"><expr pos:start="221:36" pos:end="221:56"><name pos:start="221:36" pos:end="221:56">helper_movl_mm_T0_xmm</name></expr></argument>, <argument pos:start="221:59" pos:end="221:66"><expr pos:start="221:59" pos:end="221:66"><name pos:start="221:59" pos:end="221:66">cpu_ptr0</name></expr></argument>, <argument pos:start="221:69" pos:end="221:80"><expr pos:start="221:69" pos:end="221:80"><name pos:start="221:69" pos:end="221:80">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="225:13" pos:end="225:18">break;</break>

        <case pos:start="227:9" pos:end="227:18">case <expr pos:start="227:14" pos:end="227:17"><literal type="number" pos:start="227:14" pos:end="227:17">0x6f</literal></expr>:</case> <comment type="block" pos:start="227:20" pos:end="227:36">/* movq mm, ea */</comment>

            <if_stmt pos:start="229:13" pos:end="247:13"><if pos:start="229:13" pos:end="235:13">if <condition pos:start="229:16" pos:end="229:25">(<expr pos:start="229:17" pos:end="229:24"><name pos:start="229:17" pos:end="229:19">mod</name> <operator pos:start="229:21" pos:end="229:22">!=</operator> <literal type="number" pos:start="229:24" pos:end="229:24">3</literal></expr>)</condition> <block pos:start="229:27" pos:end="235:13">{<block_content pos:start="231:17" pos:end="233:84">

                <expr_stmt pos:start="231:17" pos:end="231:65"><expr pos:start="231:17" pos:end="231:64"><call pos:start="231:17" pos:end="231:64"><name pos:start="231:17" pos:end="231:29">gen_lea_modrm</name><argument_list pos:start="231:30" pos:end="231:64">(<argument pos:start="231:31" pos:end="231:31"><expr pos:start="231:31" pos:end="231:31"><name pos:start="231:31" pos:end="231:31">s</name></expr></argument>, <argument pos:start="231:34" pos:end="231:38"><expr pos:start="231:34" pos:end="231:38"><name pos:start="231:34" pos:end="231:38">modrm</name></expr></argument>, <argument pos:start="231:41" pos:end="231:49"><expr pos:start="231:41" pos:end="231:49"><operator pos:start="231:41" pos:end="231:41">&amp;</operator><name pos:start="231:42" pos:end="231:49">reg_addr</name></expr></argument>, <argument pos:start="231:52" pos:end="231:63"><expr pos:start="231:52" pos:end="231:63"><operator pos:start="231:52" pos:end="231:52">&amp;</operator><name pos:start="231:53" pos:end="231:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="233:17" pos:end="233:84"><expr pos:start="233:17" pos:end="233:83"><call pos:start="233:17" pos:end="233:83"><name pos:start="233:17" pos:end="233:30">gen_ldq_env_A0</name><argument_list pos:start="233:31" pos:end="233:83">(<argument pos:start="233:32" pos:end="233:43"><expr pos:start="233:32" pos:end="233:43"><name pos:start="233:32" pos:end="233:43"><name pos:start="233:32" pos:end="233:32">s</name><operator pos:start="233:33" pos:end="233:34">-&gt;</operator><name pos:start="233:35" pos:end="233:43">mem_index</name></name></expr></argument>, <argument pos:start="233:46" pos:end="233:82"><expr pos:start="233:46" pos:end="233:82"><call pos:start="233:46" pos:end="233:82"><name pos:start="233:46" pos:end="233:53">offsetof</name><argument_list pos:start="233:54" pos:end="233:82">(<argument pos:start="233:55" pos:end="233:65"><expr pos:start="233:55" pos:end="233:65"><name pos:start="233:55" pos:end="233:65">CPUX86State</name></expr></argument>,<argument pos:start="233:67" pos:end="233:81"><expr pos:start="233:67" pos:end="233:81"><name pos:start="233:67" pos:end="233:77"><name pos:start="233:67" pos:end="233:72">fpregs</name><index pos:start="233:73" pos:end="233:77">[<expr pos:start="233:74" pos:end="233:76"><name pos:start="233:74" pos:end="233:76">reg</name></expr>]</index></name><operator pos:start="233:78" pos:end="233:78">.</operator><name pos:start="233:79" pos:end="233:81">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="235:15" pos:end="247:13">else <block pos:start="235:20" pos:end="247:13">{<block_content pos:start="237:17" pos:end="245:70">

                <expr_stmt pos:start="237:17" pos:end="237:33"><expr pos:start="237:17" pos:end="237:32"><name pos:start="237:17" pos:end="237:18">rm</name> <operator pos:start="237:20" pos:end="237:20">=</operator> <operator pos:start="237:22" pos:end="237:22">(</operator><name pos:start="237:23" pos:end="237:27">modrm</name> <operator pos:start="237:29" pos:end="237:29">&amp;</operator> <literal type="number" pos:start="237:31" pos:end="237:31">7</literal><operator pos:start="237:32" pos:end="237:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="239:17" pos:end="241:69"><expr pos:start="239:17" pos:end="241:68"><call pos:start="239:17" pos:end="241:68"><name pos:start="239:17" pos:end="239:30">tcg_gen_ld_i64</name><argument_list pos:start="239:31" pos:end="241:68">(<argument pos:start="239:32" pos:end="239:43"><expr pos:start="239:32" pos:end="239:43"><name pos:start="239:32" pos:end="239:43">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="239:46" pos:end="239:52"><expr pos:start="239:46" pos:end="239:52"><name pos:start="239:46" pos:end="239:52">cpu_env</name></expr></argument>,

                               <argument pos:start="241:32" pos:end="241:67"><expr pos:start="241:32" pos:end="241:67"><call pos:start="241:32" pos:end="241:67"><name pos:start="241:32" pos:end="241:39">offsetof</name><argument_list pos:start="241:40" pos:end="241:67">(<argument pos:start="241:41" pos:end="241:51"><expr pos:start="241:41" pos:end="241:51"><name pos:start="241:41" pos:end="241:51">CPUX86State</name></expr></argument>,<argument pos:start="241:53" pos:end="241:66"><expr pos:start="241:53" pos:end="241:66"><name pos:start="241:53" pos:end="241:62"><name pos:start="241:53" pos:end="241:58">fpregs</name><index pos:start="241:59" pos:end="241:62">[<expr pos:start="241:60" pos:end="241:61"><name pos:start="241:60" pos:end="241:61">rm</name></expr>]</index></name><operator pos:start="241:63" pos:end="241:63">.</operator><name pos:start="241:64" pos:end="241:66">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="243:17" pos:end="245:70"><expr pos:start="243:17" pos:end="245:69"><call pos:start="243:17" pos:end="245:69"><name pos:start="243:17" pos:end="243:30">tcg_gen_st_i64</name><argument_list pos:start="243:31" pos:end="245:69">(<argument pos:start="243:32" pos:end="243:43"><expr pos:start="243:32" pos:end="243:43"><name pos:start="243:32" pos:end="243:43">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="243:46" pos:end="243:52"><expr pos:start="243:46" pos:end="243:52"><name pos:start="243:46" pos:end="243:52">cpu_env</name></expr></argument>,

                               <argument pos:start="245:32" pos:end="245:68"><expr pos:start="245:32" pos:end="245:68"><call pos:start="245:32" pos:end="245:68"><name pos:start="245:32" pos:end="245:39">offsetof</name><argument_list pos:start="245:40" pos:end="245:68">(<argument pos:start="245:41" pos:end="245:51"><expr pos:start="245:41" pos:end="245:51"><name pos:start="245:41" pos:end="245:51">CPUX86State</name></expr></argument>,<argument pos:start="245:53" pos:end="245:67"><expr pos:start="245:53" pos:end="245:67"><name pos:start="245:53" pos:end="245:63"><name pos:start="245:53" pos:end="245:58">fpregs</name><index pos:start="245:59" pos:end="245:63">[<expr pos:start="245:60" pos:end="245:62"><name pos:start="245:60" pos:end="245:62">reg</name></expr>]</index></name><operator pos:start="245:64" pos:end="245:64">.</operator><name pos:start="245:65" pos:end="245:67">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="249:13" pos:end="249:18">break;</break>

        <case pos:start="251:9" pos:end="251:19">case <expr pos:start="251:14" pos:end="251:18"><literal type="number" pos:start="251:14" pos:end="251:18">0x010</literal></expr>:</case> <comment type="block" pos:start="251:21" pos:end="251:32">/* movups */</comment>

        <case pos:start="253:9" pos:end="253:19">case <expr pos:start="253:14" pos:end="253:18"><literal type="number" pos:start="253:14" pos:end="253:18">0x110</literal></expr>:</case> <comment type="block" pos:start="253:21" pos:end="253:32">/* movupd */</comment>

        <case pos:start="255:9" pos:end="255:19">case <expr pos:start="255:14" pos:end="255:18"><literal type="number" pos:start="255:14" pos:end="255:18">0x028</literal></expr>:</case> <comment type="block" pos:start="255:21" pos:end="255:32">/* movaps */</comment>

        <case pos:start="257:9" pos:end="257:19">case <expr pos:start="257:14" pos:end="257:18"><literal type="number" pos:start="257:14" pos:end="257:18">0x128</literal></expr>:</case> <comment type="block" pos:start="257:21" pos:end="257:32">/* movapd */</comment>

        <case pos:start="259:9" pos:end="259:19">case <expr pos:start="259:14" pos:end="259:18"><literal type="number" pos:start="259:14" pos:end="259:18">0x16f</literal></expr>:</case> <comment type="block" pos:start="259:21" pos:end="259:40">/* movdqa xmm, ea */</comment>

        <case pos:start="261:9" pos:end="261:19">case <expr pos:start="261:14" pos:end="261:18"><literal type="number" pos:start="261:14" pos:end="261:18">0x26f</literal></expr>:</case> <comment type="block" pos:start="261:21" pos:end="261:40">/* movdqu xmm, ea */</comment>

            <if_stmt pos:start="263:13" pos:end="277:13"><if pos:start="263:13" pos:end="269:13">if <condition pos:start="263:16" pos:end="263:25">(<expr pos:start="263:17" pos:end="263:24"><name pos:start="263:17" pos:end="263:19">mod</name> <operator pos:start="263:21" pos:end="263:22">!=</operator> <literal type="number" pos:start="263:24" pos:end="263:24">3</literal></expr>)</condition> <block pos:start="263:27" pos:end="269:13">{<block_content pos:start="265:17" pos:end="267:82">

                <expr_stmt pos:start="265:17" pos:end="265:65"><expr pos:start="265:17" pos:end="265:64"><call pos:start="265:17" pos:end="265:64"><name pos:start="265:17" pos:end="265:29">gen_lea_modrm</name><argument_list pos:start="265:30" pos:end="265:64">(<argument pos:start="265:31" pos:end="265:31"><expr pos:start="265:31" pos:end="265:31"><name pos:start="265:31" pos:end="265:31">s</name></expr></argument>, <argument pos:start="265:34" pos:end="265:38"><expr pos:start="265:34" pos:end="265:38"><name pos:start="265:34" pos:end="265:38">modrm</name></expr></argument>, <argument pos:start="265:41" pos:end="265:49"><expr pos:start="265:41" pos:end="265:49"><operator pos:start="265:41" pos:end="265:41">&amp;</operator><name pos:start="265:42" pos:end="265:49">reg_addr</name></expr></argument>, <argument pos:start="265:52" pos:end="265:63"><expr pos:start="265:52" pos:end="265:63"><operator pos:start="265:52" pos:end="265:52">&amp;</operator><name pos:start="265:53" pos:end="265:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:82"><expr pos:start="267:17" pos:end="267:81"><call pos:start="267:17" pos:end="267:81"><name pos:start="267:17" pos:end="267:30">gen_ldo_env_A0</name><argument_list pos:start="267:31" pos:end="267:81">(<argument pos:start="267:32" pos:end="267:43"><expr pos:start="267:32" pos:end="267:43"><name pos:start="267:32" pos:end="267:43"><name pos:start="267:32" pos:end="267:32">s</name><operator pos:start="267:33" pos:end="267:34">-&gt;</operator><name pos:start="267:35" pos:end="267:43">mem_index</name></name></expr></argument>, <argument pos:start="267:46" pos:end="267:80"><expr pos:start="267:46" pos:end="267:80"><call pos:start="267:46" pos:end="267:80"><name pos:start="267:46" pos:end="267:53">offsetof</name><argument_list pos:start="267:54" pos:end="267:80">(<argument pos:start="267:55" pos:end="267:65"><expr pos:start="267:55" pos:end="267:65"><name pos:start="267:55" pos:end="267:65">CPUX86State</name></expr></argument>,<argument pos:start="267:67" pos:end="267:79"><expr pos:start="267:67" pos:end="267:79"><name pos:start="267:67" pos:end="267:79"><name pos:start="267:67" pos:end="267:74">xmm_regs</name><index pos:start="267:75" pos:end="267:79">[<expr pos:start="267:76" pos:end="267:78"><name pos:start="267:76" pos:end="267:78">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="269:15" pos:end="277:13">else <block pos:start="269:20" pos:end="277:13">{<block_content pos:start="271:17" pos:end="275:64">

                <expr_stmt pos:start="271:17" pos:end="271:44"><expr pos:start="271:17" pos:end="271:43"><name pos:start="271:17" pos:end="271:18">rm</name> <operator pos:start="271:20" pos:end="271:20">=</operator> <operator pos:start="271:22" pos:end="271:22">(</operator><name pos:start="271:23" pos:end="271:27">modrm</name> <operator pos:start="271:29" pos:end="271:29">&amp;</operator> <literal type="number" pos:start="271:31" pos:end="271:31">7</literal><operator pos:start="271:32" pos:end="271:32">)</operator> <operator pos:start="271:34" pos:end="271:34">|</operator> <call pos:start="271:36" pos:end="271:43"><name pos:start="271:36" pos:end="271:40">REX_B</name><argument_list pos:start="271:41" pos:end="271:43">(<argument pos:start="271:42" pos:end="271:42"><expr pos:start="271:42" pos:end="271:42"><name pos:start="271:42" pos:end="271:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="273:17" pos:end="275:64"><expr pos:start="273:17" pos:end="275:63"><call pos:start="273:17" pos:end="275:63"><name pos:start="273:17" pos:end="273:27">gen_op_movo</name><argument_list pos:start="273:28" pos:end="275:63">(<argument pos:start="273:29" pos:end="273:63"><expr pos:start="273:29" pos:end="273:63"><call pos:start="273:29" pos:end="273:63"><name pos:start="273:29" pos:end="273:36">offsetof</name><argument_list pos:start="273:37" pos:end="273:63">(<argument pos:start="273:38" pos:end="273:48"><expr pos:start="273:38" pos:end="273:48"><name pos:start="273:38" pos:end="273:48">CPUX86State</name></expr></argument>,<argument pos:start="273:50" pos:end="273:62"><expr pos:start="273:50" pos:end="273:62"><name pos:start="273:50" pos:end="273:62"><name pos:start="273:50" pos:end="273:57">xmm_regs</name><index pos:start="273:58" pos:end="273:62">[<expr pos:start="273:59" pos:end="273:61"><name pos:start="273:59" pos:end="273:61">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="275:29" pos:end="275:62"><expr pos:start="275:29" pos:end="275:62"><call pos:start="275:29" pos:end="275:62"><name pos:start="275:29" pos:end="275:36">offsetof</name><argument_list pos:start="275:37" pos:end="275:62">(<argument pos:start="275:38" pos:end="275:48"><expr pos:start="275:38" pos:end="275:48"><name pos:start="275:38" pos:end="275:48">CPUX86State</name></expr></argument>,<argument pos:start="275:50" pos:end="275:61"><expr pos:start="275:50" pos:end="275:61"><name pos:start="275:50" pos:end="275:61"><name pos:start="275:50" pos:end="275:57">xmm_regs</name><index pos:start="275:58" pos:end="275:61">[<expr pos:start="275:59" pos:end="275:60"><name pos:start="275:59" pos:end="275:60">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="279:13" pos:end="279:18">break;</break>

        <case pos:start="281:9" pos:end="281:19">case <expr pos:start="281:14" pos:end="281:18"><literal type="number" pos:start="281:14" pos:end="281:18">0x210</literal></expr>:</case> <comment type="block" pos:start="281:21" pos:end="281:39">/* movss xmm, ea */</comment>

            <if_stmt pos:start="283:13" pos:end="307:13"><if pos:start="283:13" pos:end="299:13">if <condition pos:start="283:16" pos:end="283:25">(<expr pos:start="283:17" pos:end="283:24"><name pos:start="283:17" pos:end="283:19">mod</name> <operator pos:start="283:21" pos:end="283:22">!=</operator> <literal type="number" pos:start="283:24" pos:end="283:24">3</literal></expr>)</condition> <block pos:start="283:27" pos:end="299:13">{<block_content pos:start="285:17" pos:end="297:97">

                <expr_stmt pos:start="285:17" pos:end="285:65"><expr pos:start="285:17" pos:end="285:64"><call pos:start="285:17" pos:end="285:64"><name pos:start="285:17" pos:end="285:29">gen_lea_modrm</name><argument_list pos:start="285:30" pos:end="285:64">(<argument pos:start="285:31" pos:end="285:31"><expr pos:start="285:31" pos:end="285:31"><name pos:start="285:31" pos:end="285:31">s</name></expr></argument>, <argument pos:start="285:34" pos:end="285:38"><expr pos:start="285:34" pos:end="285:38"><name pos:start="285:34" pos:end="285:38">modrm</name></expr></argument>, <argument pos:start="285:41" pos:end="285:49"><expr pos:start="285:41" pos:end="285:49"><operator pos:start="285:41" pos:end="285:41">&amp;</operator><name pos:start="285:42" pos:end="285:49">reg_addr</name></expr></argument>, <argument pos:start="285:52" pos:end="285:63"><expr pos:start="285:52" pos:end="285:63"><operator pos:start="285:52" pos:end="285:52">&amp;</operator><name pos:start="285:53" pos:end="285:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="287:17" pos:end="287:56"><expr pos:start="287:17" pos:end="287:55"><call pos:start="287:17" pos:end="287:55"><name pos:start="287:17" pos:end="287:31">gen_op_ld_T0_A0</name><argument_list pos:start="287:32" pos:end="287:55">(<argument pos:start="287:33" pos:end="287:54"><expr pos:start="287:33" pos:end="287:54"><name pos:start="287:33" pos:end="287:39">OT_LONG</name> <operator pos:start="287:41" pos:end="287:41">+</operator> <name pos:start="287:43" pos:end="287:54"><name pos:start="287:43" pos:end="287:43">s</name><operator pos:start="287:44" pos:end="287:45">-&gt;</operator><name pos:start="287:46" pos:end="287:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="289:17" pos:end="289:97"><expr pos:start="289:17" pos:end="289:96"><call pos:start="289:17" pos:end="289:96"><name pos:start="289:17" pos:end="289:31">tcg_gen_st32_tl</name><argument_list pos:start="289:32" pos:end="289:96">(<argument pos:start="289:33" pos:end="289:40"><expr pos:start="289:33" pos:end="289:40"><name pos:start="289:33" pos:end="289:40"><name pos:start="289:33" pos:end="289:37">cpu_T</name><index pos:start="289:38" pos:end="289:40">[<expr pos:start="289:39" pos:end="289:39"><literal type="number" pos:start="289:39" pos:end="289:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="289:43" pos:end="289:49"><expr pos:start="289:43" pos:end="289:49"><name pos:start="289:43" pos:end="289:49">cpu_env</name></expr></argument>, <argument pos:start="289:52" pos:end="289:95"><expr pos:start="289:52" pos:end="289:95"><call pos:start="289:52" pos:end="289:95"><name pos:start="289:52" pos:end="289:59">offsetof</name><argument_list pos:start="289:60" pos:end="289:95">(<argument pos:start="289:61" pos:end="289:71"><expr pos:start="289:61" pos:end="289:71"><name pos:start="289:61" pos:end="289:71">CPUX86State</name></expr></argument>,<argument pos:start="289:73" pos:end="289:94"><expr pos:start="289:73" pos:end="289:94"><name pos:start="289:73" pos:end="289:85"><name pos:start="289:73" pos:end="289:80">xmm_regs</name><index pos:start="289:81" pos:end="289:85">[<expr pos:start="289:82" pos:end="289:84"><name pos:start="289:82" pos:end="289:84">reg</name></expr>]</index></name><operator pos:start="289:86" pos:end="289:86">.</operator><call pos:start="289:87" pos:end="289:94"><name pos:start="289:87" pos:end="289:91">XMM_L</name><argument_list pos:start="289:92" pos:end="289:94">(<argument pos:start="289:93" pos:end="289:93"><expr pos:start="289:93" pos:end="289:93"><literal type="number" pos:start="289:93" pos:end="289:93">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="291:17" pos:end="291:35"><expr pos:start="291:17" pos:end="291:34"><call pos:start="291:17" pos:end="291:34"><name pos:start="291:17" pos:end="291:32">gen_op_movl_T0_0</name><argument_list pos:start="291:33" pos:end="291:34">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="293:17" pos:end="293:97"><expr pos:start="293:17" pos:end="293:96"><call pos:start="293:17" pos:end="293:96"><name pos:start="293:17" pos:end="293:31">tcg_gen_st32_tl</name><argument_list pos:start="293:32" pos:end="293:96">(<argument pos:start="293:33" pos:end="293:40"><expr pos:start="293:33" pos:end="293:40"><name pos:start="293:33" pos:end="293:40"><name pos:start="293:33" pos:end="293:37">cpu_T</name><index pos:start="293:38" pos:end="293:40">[<expr pos:start="293:39" pos:end="293:39"><literal type="number" pos:start="293:39" pos:end="293:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="293:43" pos:end="293:49"><expr pos:start="293:43" pos:end="293:49"><name pos:start="293:43" pos:end="293:49">cpu_env</name></expr></argument>, <argument pos:start="293:52" pos:end="293:95"><expr pos:start="293:52" pos:end="293:95"><call pos:start="293:52" pos:end="293:95"><name pos:start="293:52" pos:end="293:59">offsetof</name><argument_list pos:start="293:60" pos:end="293:95">(<argument pos:start="293:61" pos:end="293:71"><expr pos:start="293:61" pos:end="293:71"><name pos:start="293:61" pos:end="293:71">CPUX86State</name></expr></argument>,<argument pos:start="293:73" pos:end="293:94"><expr pos:start="293:73" pos:end="293:94"><name pos:start="293:73" pos:end="293:85"><name pos:start="293:73" pos:end="293:80">xmm_regs</name><index pos:start="293:81" pos:end="293:85">[<expr pos:start="293:82" pos:end="293:84"><name pos:start="293:82" pos:end="293:84">reg</name></expr>]</index></name><operator pos:start="293:86" pos:end="293:86">.</operator><call pos:start="293:87" pos:end="293:94"><name pos:start="293:87" pos:end="293:91">XMM_L</name><argument_list pos:start="293:92" pos:end="293:94">(<argument pos:start="293:93" pos:end="293:93"><expr pos:start="293:93" pos:end="293:93"><literal type="number" pos:start="293:93" pos:end="293:93">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="295:17" pos:end="295:97"><expr pos:start="295:17" pos:end="295:96"><call pos:start="295:17" pos:end="295:96"><name pos:start="295:17" pos:end="295:31">tcg_gen_st32_tl</name><argument_list pos:start="295:32" pos:end="295:96">(<argument pos:start="295:33" pos:end="295:40"><expr pos:start="295:33" pos:end="295:40"><name pos:start="295:33" pos:end="295:40"><name pos:start="295:33" pos:end="295:37">cpu_T</name><index pos:start="295:38" pos:end="295:40">[<expr pos:start="295:39" pos:end="295:39"><literal type="number" pos:start="295:39" pos:end="295:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="295:43" pos:end="295:49"><expr pos:start="295:43" pos:end="295:49"><name pos:start="295:43" pos:end="295:49">cpu_env</name></expr></argument>, <argument pos:start="295:52" pos:end="295:95"><expr pos:start="295:52" pos:end="295:95"><call pos:start="295:52" pos:end="295:95"><name pos:start="295:52" pos:end="295:59">offsetof</name><argument_list pos:start="295:60" pos:end="295:95">(<argument pos:start="295:61" pos:end="295:71"><expr pos:start="295:61" pos:end="295:71"><name pos:start="295:61" pos:end="295:71">CPUX86State</name></expr></argument>,<argument pos:start="295:73" pos:end="295:94"><expr pos:start="295:73" pos:end="295:94"><name pos:start="295:73" pos:end="295:85"><name pos:start="295:73" pos:end="295:80">xmm_regs</name><index pos:start="295:81" pos:end="295:85">[<expr pos:start="295:82" pos:end="295:84"><name pos:start="295:82" pos:end="295:84">reg</name></expr>]</index></name><operator pos:start="295:86" pos:end="295:86">.</operator><call pos:start="295:87" pos:end="295:94"><name pos:start="295:87" pos:end="295:91">XMM_L</name><argument_list pos:start="295:92" pos:end="295:94">(<argument pos:start="295:93" pos:end="295:93"><expr pos:start="295:93" pos:end="295:93"><literal type="number" pos:start="295:93" pos:end="295:93">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="297:17" pos:end="297:97"><expr pos:start="297:17" pos:end="297:96"><call pos:start="297:17" pos:end="297:96"><name pos:start="297:17" pos:end="297:31">tcg_gen_st32_tl</name><argument_list pos:start="297:32" pos:end="297:96">(<argument pos:start="297:33" pos:end="297:40"><expr pos:start="297:33" pos:end="297:40"><name pos:start="297:33" pos:end="297:40"><name pos:start="297:33" pos:end="297:37">cpu_T</name><index pos:start="297:38" pos:end="297:40">[<expr pos:start="297:39" pos:end="297:39"><literal type="number" pos:start="297:39" pos:end="297:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="297:43" pos:end="297:49"><expr pos:start="297:43" pos:end="297:49"><name pos:start="297:43" pos:end="297:49">cpu_env</name></expr></argument>, <argument pos:start="297:52" pos:end="297:95"><expr pos:start="297:52" pos:end="297:95"><call pos:start="297:52" pos:end="297:95"><name pos:start="297:52" pos:end="297:59">offsetof</name><argument_list pos:start="297:60" pos:end="297:95">(<argument pos:start="297:61" pos:end="297:71"><expr pos:start="297:61" pos:end="297:71"><name pos:start="297:61" pos:end="297:71">CPUX86State</name></expr></argument>,<argument pos:start="297:73" pos:end="297:94"><expr pos:start="297:73" pos:end="297:94"><name pos:start="297:73" pos:end="297:85"><name pos:start="297:73" pos:end="297:80">xmm_regs</name><index pos:start="297:81" pos:end="297:85">[<expr pos:start="297:82" pos:end="297:84"><name pos:start="297:82" pos:end="297:84">reg</name></expr>]</index></name><operator pos:start="297:86" pos:end="297:86">.</operator><call pos:start="297:87" pos:end="297:94"><name pos:start="297:87" pos:end="297:91">XMM_L</name><argument_list pos:start="297:92" pos:end="297:94">(<argument pos:start="297:93" pos:end="297:93"><expr pos:start="297:93" pos:end="297:93"><literal type="number" pos:start="297:93" pos:end="297:93">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="299:15" pos:end="307:13">else <block pos:start="299:20" pos:end="307:13">{<block_content pos:start="301:17" pos:end="305:73">

                <expr_stmt pos:start="301:17" pos:end="301:44"><expr pos:start="301:17" pos:end="301:43"><name pos:start="301:17" pos:end="301:18">rm</name> <operator pos:start="301:20" pos:end="301:20">=</operator> <operator pos:start="301:22" pos:end="301:22">(</operator><name pos:start="301:23" pos:end="301:27">modrm</name> <operator pos:start="301:29" pos:end="301:29">&amp;</operator> <literal type="number" pos:start="301:31" pos:end="301:31">7</literal><operator pos:start="301:32" pos:end="301:32">)</operator> <operator pos:start="301:34" pos:end="301:34">|</operator> <call pos:start="301:36" pos:end="301:43"><name pos:start="301:36" pos:end="301:40">REX_B</name><argument_list pos:start="301:41" pos:end="301:43">(<argument pos:start="301:42" pos:end="301:42"><expr pos:start="301:42" pos:end="301:42"><name pos:start="301:42" pos:end="301:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="303:17" pos:end="305:73"><expr pos:start="303:17" pos:end="305:72"><call pos:start="303:17" pos:end="305:72"><name pos:start="303:17" pos:end="303:27">gen_op_movl</name><argument_list pos:start="303:28" pos:end="305:72">(<argument pos:start="303:29" pos:end="303:72"><expr pos:start="303:29" pos:end="303:72"><call pos:start="303:29" pos:end="303:72"><name pos:start="303:29" pos:end="303:36">offsetof</name><argument_list pos:start="303:37" pos:end="303:72">(<argument pos:start="303:38" pos:end="303:48"><expr pos:start="303:38" pos:end="303:48"><name pos:start="303:38" pos:end="303:48">CPUX86State</name></expr></argument>,<argument pos:start="303:50" pos:end="303:71"><expr pos:start="303:50" pos:end="303:71"><name pos:start="303:50" pos:end="303:62"><name pos:start="303:50" pos:end="303:57">xmm_regs</name><index pos:start="303:58" pos:end="303:62">[<expr pos:start="303:59" pos:end="303:61"><name pos:start="303:59" pos:end="303:61">reg</name></expr>]</index></name><operator pos:start="303:63" pos:end="303:63">.</operator><call pos:start="303:64" pos:end="303:71"><name pos:start="303:64" pos:end="303:68">XMM_L</name><argument_list pos:start="303:69" pos:end="303:71">(<argument pos:start="303:70" pos:end="303:70"><expr pos:start="303:70" pos:end="303:70"><literal type="number" pos:start="303:70" pos:end="303:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="305:29" pos:end="305:71"><expr pos:start="305:29" pos:end="305:71"><call pos:start="305:29" pos:end="305:71"><name pos:start="305:29" pos:end="305:36">offsetof</name><argument_list pos:start="305:37" pos:end="305:71">(<argument pos:start="305:38" pos:end="305:48"><expr pos:start="305:38" pos:end="305:48"><name pos:start="305:38" pos:end="305:48">CPUX86State</name></expr></argument>,<argument pos:start="305:50" pos:end="305:70"><expr pos:start="305:50" pos:end="305:70"><name pos:start="305:50" pos:end="305:61"><name pos:start="305:50" pos:end="305:57">xmm_regs</name><index pos:start="305:58" pos:end="305:61">[<expr pos:start="305:59" pos:end="305:60"><name pos:start="305:59" pos:end="305:60">rm</name></expr>]</index></name><operator pos:start="305:62" pos:end="305:62">.</operator><call pos:start="305:63" pos:end="305:70"><name pos:start="305:63" pos:end="305:67">XMM_L</name><argument_list pos:start="305:68" pos:end="305:70">(<argument pos:start="305:69" pos:end="305:69"><expr pos:start="305:69" pos:end="305:69"><literal type="number" pos:start="305:69" pos:end="305:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="309:13" pos:end="309:18">break;</break>

        <case pos:start="311:9" pos:end="311:19">case <expr pos:start="311:14" pos:end="311:18"><literal type="number" pos:start="311:14" pos:end="311:18">0x310</literal></expr>:</case> <comment type="block" pos:start="311:21" pos:end="311:39">/* movsd xmm, ea */</comment>

            <if_stmt pos:start="313:13" pos:end="333:13"><if pos:start="313:13" pos:end="325:13">if <condition pos:start="313:16" pos:end="313:25">(<expr pos:start="313:17" pos:end="313:24"><name pos:start="313:17" pos:end="313:19">mod</name> <operator pos:start="313:21" pos:end="313:22">!=</operator> <literal type="number" pos:start="313:24" pos:end="313:24">3</literal></expr>)</condition> <block pos:start="313:27" pos:end="325:13">{<block_content pos:start="315:17" pos:end="323:97">

                <expr_stmt pos:start="315:17" pos:end="315:65"><expr pos:start="315:17" pos:end="315:64"><call pos:start="315:17" pos:end="315:64"><name pos:start="315:17" pos:end="315:29">gen_lea_modrm</name><argument_list pos:start="315:30" pos:end="315:64">(<argument pos:start="315:31" pos:end="315:31"><expr pos:start="315:31" pos:end="315:31"><name pos:start="315:31" pos:end="315:31">s</name></expr></argument>, <argument pos:start="315:34" pos:end="315:38"><expr pos:start="315:34" pos:end="315:38"><name pos:start="315:34" pos:end="315:38">modrm</name></expr></argument>, <argument pos:start="315:41" pos:end="315:49"><expr pos:start="315:41" pos:end="315:49"><operator pos:start="315:41" pos:end="315:41">&amp;</operator><name pos:start="315:42" pos:end="315:49">reg_addr</name></expr></argument>, <argument pos:start="315:52" pos:end="315:63"><expr pos:start="315:52" pos:end="315:63"><operator pos:start="315:52" pos:end="315:52">&amp;</operator><name pos:start="315:53" pos:end="315:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="317:17" pos:end="317:91"><expr pos:start="317:17" pos:end="317:90"><call pos:start="317:17" pos:end="317:90"><name pos:start="317:17" pos:end="317:30">gen_ldq_env_A0</name><argument_list pos:start="317:31" pos:end="317:90">(<argument pos:start="317:32" pos:end="317:43"><expr pos:start="317:32" pos:end="317:43"><name pos:start="317:32" pos:end="317:43"><name pos:start="317:32" pos:end="317:32">s</name><operator pos:start="317:33" pos:end="317:34">-&gt;</operator><name pos:start="317:35" pos:end="317:43">mem_index</name></name></expr></argument>, <argument pos:start="317:46" pos:end="317:89"><expr pos:start="317:46" pos:end="317:89"><call pos:start="317:46" pos:end="317:89"><name pos:start="317:46" pos:end="317:53">offsetof</name><argument_list pos:start="317:54" pos:end="317:89">(<argument pos:start="317:55" pos:end="317:65"><expr pos:start="317:55" pos:end="317:65"><name pos:start="317:55" pos:end="317:65">CPUX86State</name></expr></argument>,<argument pos:start="317:67" pos:end="317:88"><expr pos:start="317:67" pos:end="317:88"><name pos:start="317:67" pos:end="317:79"><name pos:start="317:67" pos:end="317:74">xmm_regs</name><index pos:start="317:75" pos:end="317:79">[<expr pos:start="317:76" pos:end="317:78"><name pos:start="317:76" pos:end="317:78">reg</name></expr>]</index></name><operator pos:start="317:80" pos:end="317:80">.</operator><call pos:start="317:81" pos:end="317:88"><name pos:start="317:81" pos:end="317:85">XMM_Q</name><argument_list pos:start="317:86" pos:end="317:88">(<argument pos:start="317:87" pos:end="317:87"><expr pos:start="317:87" pos:end="317:87"><literal type="number" pos:start="317:87" pos:end="317:87">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="319:17" pos:end="319:35"><expr pos:start="319:17" pos:end="319:34"><call pos:start="319:17" pos:end="319:34"><name pos:start="319:17" pos:end="319:32">gen_op_movl_T0_0</name><argument_list pos:start="319:33" pos:end="319:34">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="321:17" pos:end="321:97"><expr pos:start="321:17" pos:end="321:96"><call pos:start="321:17" pos:end="321:96"><name pos:start="321:17" pos:end="321:31">tcg_gen_st32_tl</name><argument_list pos:start="321:32" pos:end="321:96">(<argument pos:start="321:33" pos:end="321:40"><expr pos:start="321:33" pos:end="321:40"><name pos:start="321:33" pos:end="321:40"><name pos:start="321:33" pos:end="321:37">cpu_T</name><index pos:start="321:38" pos:end="321:40">[<expr pos:start="321:39" pos:end="321:39"><literal type="number" pos:start="321:39" pos:end="321:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="321:43" pos:end="321:49"><expr pos:start="321:43" pos:end="321:49"><name pos:start="321:43" pos:end="321:49">cpu_env</name></expr></argument>, <argument pos:start="321:52" pos:end="321:95"><expr pos:start="321:52" pos:end="321:95"><call pos:start="321:52" pos:end="321:95"><name pos:start="321:52" pos:end="321:59">offsetof</name><argument_list pos:start="321:60" pos:end="321:95">(<argument pos:start="321:61" pos:end="321:71"><expr pos:start="321:61" pos:end="321:71"><name pos:start="321:61" pos:end="321:71">CPUX86State</name></expr></argument>,<argument pos:start="321:73" pos:end="321:94"><expr pos:start="321:73" pos:end="321:94"><name pos:start="321:73" pos:end="321:85"><name pos:start="321:73" pos:end="321:80">xmm_regs</name><index pos:start="321:81" pos:end="321:85">[<expr pos:start="321:82" pos:end="321:84"><name pos:start="321:82" pos:end="321:84">reg</name></expr>]</index></name><operator pos:start="321:86" pos:end="321:86">.</operator><call pos:start="321:87" pos:end="321:94"><name pos:start="321:87" pos:end="321:91">XMM_L</name><argument_list pos:start="321:92" pos:end="321:94">(<argument pos:start="321:93" pos:end="321:93"><expr pos:start="321:93" pos:end="321:93"><literal type="number" pos:start="321:93" pos:end="321:93">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="323:17" pos:end="323:97"><expr pos:start="323:17" pos:end="323:96"><call pos:start="323:17" pos:end="323:96"><name pos:start="323:17" pos:end="323:31">tcg_gen_st32_tl</name><argument_list pos:start="323:32" pos:end="323:96">(<argument pos:start="323:33" pos:end="323:40"><expr pos:start="323:33" pos:end="323:40"><name pos:start="323:33" pos:end="323:40"><name pos:start="323:33" pos:end="323:37">cpu_T</name><index pos:start="323:38" pos:end="323:40">[<expr pos:start="323:39" pos:end="323:39"><literal type="number" pos:start="323:39" pos:end="323:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="323:43" pos:end="323:49"><expr pos:start="323:43" pos:end="323:49"><name pos:start="323:43" pos:end="323:49">cpu_env</name></expr></argument>, <argument pos:start="323:52" pos:end="323:95"><expr pos:start="323:52" pos:end="323:95"><call pos:start="323:52" pos:end="323:95"><name pos:start="323:52" pos:end="323:59">offsetof</name><argument_list pos:start="323:60" pos:end="323:95">(<argument pos:start="323:61" pos:end="323:71"><expr pos:start="323:61" pos:end="323:71"><name pos:start="323:61" pos:end="323:71">CPUX86State</name></expr></argument>,<argument pos:start="323:73" pos:end="323:94"><expr pos:start="323:73" pos:end="323:94"><name pos:start="323:73" pos:end="323:85"><name pos:start="323:73" pos:end="323:80">xmm_regs</name><index pos:start="323:81" pos:end="323:85">[<expr pos:start="323:82" pos:end="323:84"><name pos:start="323:82" pos:end="323:84">reg</name></expr>]</index></name><operator pos:start="323:86" pos:end="323:86">.</operator><call pos:start="323:87" pos:end="323:94"><name pos:start="323:87" pos:end="323:91">XMM_L</name><argument_list pos:start="323:92" pos:end="323:94">(<argument pos:start="323:93" pos:end="323:93"><expr pos:start="323:93" pos:end="323:93"><literal type="number" pos:start="323:93" pos:end="323:93">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="325:15" pos:end="333:13">else <block pos:start="325:20" pos:end="333:13">{<block_content pos:start="327:17" pos:end="331:73">

                <expr_stmt pos:start="327:17" pos:end="327:44"><expr pos:start="327:17" pos:end="327:43"><name pos:start="327:17" pos:end="327:18">rm</name> <operator pos:start="327:20" pos:end="327:20">=</operator> <operator pos:start="327:22" pos:end="327:22">(</operator><name pos:start="327:23" pos:end="327:27">modrm</name> <operator pos:start="327:29" pos:end="327:29">&amp;</operator> <literal type="number" pos:start="327:31" pos:end="327:31">7</literal><operator pos:start="327:32" pos:end="327:32">)</operator> <operator pos:start="327:34" pos:end="327:34">|</operator> <call pos:start="327:36" pos:end="327:43"><name pos:start="327:36" pos:end="327:40">REX_B</name><argument_list pos:start="327:41" pos:end="327:43">(<argument pos:start="327:42" pos:end="327:42"><expr pos:start="327:42" pos:end="327:42"><name pos:start="327:42" pos:end="327:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="329:17" pos:end="331:73"><expr pos:start="329:17" pos:end="331:72"><call pos:start="329:17" pos:end="331:72"><name pos:start="329:17" pos:end="329:27">gen_op_movq</name><argument_list pos:start="329:28" pos:end="331:72">(<argument pos:start="329:29" pos:end="329:72"><expr pos:start="329:29" pos:end="329:72"><call pos:start="329:29" pos:end="329:72"><name pos:start="329:29" pos:end="329:36">offsetof</name><argument_list pos:start="329:37" pos:end="329:72">(<argument pos:start="329:38" pos:end="329:48"><expr pos:start="329:38" pos:end="329:48"><name pos:start="329:38" pos:end="329:48">CPUX86State</name></expr></argument>,<argument pos:start="329:50" pos:end="329:71"><expr pos:start="329:50" pos:end="329:71"><name pos:start="329:50" pos:end="329:62"><name pos:start="329:50" pos:end="329:57">xmm_regs</name><index pos:start="329:58" pos:end="329:62">[<expr pos:start="329:59" pos:end="329:61"><name pos:start="329:59" pos:end="329:61">reg</name></expr>]</index></name><operator pos:start="329:63" pos:end="329:63">.</operator><call pos:start="329:64" pos:end="329:71"><name pos:start="329:64" pos:end="329:68">XMM_Q</name><argument_list pos:start="329:69" pos:end="329:71">(<argument pos:start="329:70" pos:end="329:70"><expr pos:start="329:70" pos:end="329:70"><literal type="number" pos:start="329:70" pos:end="329:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="331:29" pos:end="331:71"><expr pos:start="331:29" pos:end="331:71"><call pos:start="331:29" pos:end="331:71"><name pos:start="331:29" pos:end="331:36">offsetof</name><argument_list pos:start="331:37" pos:end="331:71">(<argument pos:start="331:38" pos:end="331:48"><expr pos:start="331:38" pos:end="331:48"><name pos:start="331:38" pos:end="331:48">CPUX86State</name></expr></argument>,<argument pos:start="331:50" pos:end="331:70"><expr pos:start="331:50" pos:end="331:70"><name pos:start="331:50" pos:end="331:61"><name pos:start="331:50" pos:end="331:57">xmm_regs</name><index pos:start="331:58" pos:end="331:61">[<expr pos:start="331:59" pos:end="331:60"><name pos:start="331:59" pos:end="331:60">rm</name></expr>]</index></name><operator pos:start="331:62" pos:end="331:62">.</operator><call pos:start="331:63" pos:end="331:70"><name pos:start="331:63" pos:end="331:67">XMM_Q</name><argument_list pos:start="331:68" pos:end="331:70">(<argument pos:start="331:69" pos:end="331:69"><expr pos:start="331:69" pos:end="331:69"><literal type="number" pos:start="331:69" pos:end="331:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="335:13" pos:end="335:18">break;</break>

        <case pos:start="337:9" pos:end="337:19">case <expr pos:start="337:14" pos:end="337:18"><literal type="number" pos:start="337:14" pos:end="337:18">0x012</literal></expr>:</case> <comment type="block" pos:start="337:21" pos:end="337:32">/* movlps */</comment>

        <case pos:start="339:9" pos:end="339:19">case <expr pos:start="339:14" pos:end="339:18"><literal type="number" pos:start="339:14" pos:end="339:18">0x112</literal></expr>:</case> <comment type="block" pos:start="339:21" pos:end="339:32">/* movlpd */</comment>

            <if_stmt pos:start="341:13" pos:end="357:13"><if pos:start="341:13" pos:end="347:13">if <condition pos:start="341:16" pos:end="341:25">(<expr pos:start="341:17" pos:end="341:24"><name pos:start="341:17" pos:end="341:19">mod</name> <operator pos:start="341:21" pos:end="341:22">!=</operator> <literal type="number" pos:start="341:24" pos:end="341:24">3</literal></expr>)</condition> <block pos:start="341:27" pos:end="347:13">{<block_content pos:start="343:17" pos:end="345:91">

                <expr_stmt pos:start="343:17" pos:end="343:65"><expr pos:start="343:17" pos:end="343:64"><call pos:start="343:17" pos:end="343:64"><name pos:start="343:17" pos:end="343:29">gen_lea_modrm</name><argument_list pos:start="343:30" pos:end="343:64">(<argument pos:start="343:31" pos:end="343:31"><expr pos:start="343:31" pos:end="343:31"><name pos:start="343:31" pos:end="343:31">s</name></expr></argument>, <argument pos:start="343:34" pos:end="343:38"><expr pos:start="343:34" pos:end="343:38"><name pos:start="343:34" pos:end="343:38">modrm</name></expr></argument>, <argument pos:start="343:41" pos:end="343:49"><expr pos:start="343:41" pos:end="343:49"><operator pos:start="343:41" pos:end="343:41">&amp;</operator><name pos:start="343:42" pos:end="343:49">reg_addr</name></expr></argument>, <argument pos:start="343:52" pos:end="343:63"><expr pos:start="343:52" pos:end="343:63"><operator pos:start="343:52" pos:end="343:52">&amp;</operator><name pos:start="343:53" pos:end="343:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="345:17" pos:end="345:91"><expr pos:start="345:17" pos:end="345:90"><call pos:start="345:17" pos:end="345:90"><name pos:start="345:17" pos:end="345:30">gen_ldq_env_A0</name><argument_list pos:start="345:31" pos:end="345:90">(<argument pos:start="345:32" pos:end="345:43"><expr pos:start="345:32" pos:end="345:43"><name pos:start="345:32" pos:end="345:43"><name pos:start="345:32" pos:end="345:32">s</name><operator pos:start="345:33" pos:end="345:34">-&gt;</operator><name pos:start="345:35" pos:end="345:43">mem_index</name></name></expr></argument>, <argument pos:start="345:46" pos:end="345:89"><expr pos:start="345:46" pos:end="345:89"><call pos:start="345:46" pos:end="345:89"><name pos:start="345:46" pos:end="345:53">offsetof</name><argument_list pos:start="345:54" pos:end="345:89">(<argument pos:start="345:55" pos:end="345:65"><expr pos:start="345:55" pos:end="345:65"><name pos:start="345:55" pos:end="345:65">CPUX86State</name></expr></argument>,<argument pos:start="345:67" pos:end="345:88"><expr pos:start="345:67" pos:end="345:88"><name pos:start="345:67" pos:end="345:79"><name pos:start="345:67" pos:end="345:74">xmm_regs</name><index pos:start="345:75" pos:end="345:79">[<expr pos:start="345:76" pos:end="345:78"><name pos:start="345:76" pos:end="345:78">reg</name></expr>]</index></name><operator pos:start="345:80" pos:end="345:80">.</operator><call pos:start="345:81" pos:end="345:88"><name pos:start="345:81" pos:end="345:85">XMM_Q</name><argument_list pos:start="345:86" pos:end="345:88">(<argument pos:start="345:87" pos:end="345:87"><expr pos:start="345:87" pos:end="345:87"><literal type="number" pos:start="345:87" pos:end="345:87">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="347:15" pos:end="357:13">else <block pos:start="347:20" pos:end="357:13">{<block_content pos:start="351:17" pos:end="355:73">

                <comment type="block" pos:start="349:17" pos:end="349:29">/* movhlps */</comment>

                <expr_stmt pos:start="351:17" pos:end="351:44"><expr pos:start="351:17" pos:end="351:43"><name pos:start="351:17" pos:end="351:18">rm</name> <operator pos:start="351:20" pos:end="351:20">=</operator> <operator pos:start="351:22" pos:end="351:22">(</operator><name pos:start="351:23" pos:end="351:27">modrm</name> <operator pos:start="351:29" pos:end="351:29">&amp;</operator> <literal type="number" pos:start="351:31" pos:end="351:31">7</literal><operator pos:start="351:32" pos:end="351:32">)</operator> <operator pos:start="351:34" pos:end="351:34">|</operator> <call pos:start="351:36" pos:end="351:43"><name pos:start="351:36" pos:end="351:40">REX_B</name><argument_list pos:start="351:41" pos:end="351:43">(<argument pos:start="351:42" pos:end="351:42"><expr pos:start="351:42" pos:end="351:42"><name pos:start="351:42" pos:end="351:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="353:17" pos:end="355:73"><expr pos:start="353:17" pos:end="355:72"><call pos:start="353:17" pos:end="355:72"><name pos:start="353:17" pos:end="353:27">gen_op_movq</name><argument_list pos:start="353:28" pos:end="355:72">(<argument pos:start="353:29" pos:end="353:72"><expr pos:start="353:29" pos:end="353:72"><call pos:start="353:29" pos:end="353:72"><name pos:start="353:29" pos:end="353:36">offsetof</name><argument_list pos:start="353:37" pos:end="353:72">(<argument pos:start="353:38" pos:end="353:48"><expr pos:start="353:38" pos:end="353:48"><name pos:start="353:38" pos:end="353:48">CPUX86State</name></expr></argument>,<argument pos:start="353:50" pos:end="353:71"><expr pos:start="353:50" pos:end="353:71"><name pos:start="353:50" pos:end="353:62"><name pos:start="353:50" pos:end="353:57">xmm_regs</name><index pos:start="353:58" pos:end="353:62">[<expr pos:start="353:59" pos:end="353:61"><name pos:start="353:59" pos:end="353:61">reg</name></expr>]</index></name><operator pos:start="353:63" pos:end="353:63">.</operator><call pos:start="353:64" pos:end="353:71"><name pos:start="353:64" pos:end="353:68">XMM_Q</name><argument_list pos:start="353:69" pos:end="353:71">(<argument pos:start="353:70" pos:end="353:70"><expr pos:start="353:70" pos:end="353:70"><literal type="number" pos:start="353:70" pos:end="353:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="355:29" pos:end="355:71"><expr pos:start="355:29" pos:end="355:71"><call pos:start="355:29" pos:end="355:71"><name pos:start="355:29" pos:end="355:36">offsetof</name><argument_list pos:start="355:37" pos:end="355:71">(<argument pos:start="355:38" pos:end="355:48"><expr pos:start="355:38" pos:end="355:48"><name pos:start="355:38" pos:end="355:48">CPUX86State</name></expr></argument>,<argument pos:start="355:50" pos:end="355:70"><expr pos:start="355:50" pos:end="355:70"><name pos:start="355:50" pos:end="355:61"><name pos:start="355:50" pos:end="355:57">xmm_regs</name><index pos:start="355:58" pos:end="355:61">[<expr pos:start="355:59" pos:end="355:60"><name pos:start="355:59" pos:end="355:60">rm</name></expr>]</index></name><operator pos:start="355:62" pos:end="355:62">.</operator><call pos:start="355:63" pos:end="355:70"><name pos:start="355:63" pos:end="355:67">XMM_Q</name><argument_list pos:start="355:68" pos:end="355:70">(<argument pos:start="355:69" pos:end="355:69"><expr pos:start="355:69" pos:end="355:69"><literal type="number" pos:start="355:69" pos:end="355:69">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="359:13" pos:end="359:18">break;</break>

        <case pos:start="361:9" pos:end="361:19">case <expr pos:start="361:14" pos:end="361:18"><literal type="number" pos:start="361:14" pos:end="361:18">0x212</literal></expr>:</case> <comment type="block" pos:start="361:21" pos:end="361:34">/* movsldup */</comment>

            <if_stmt pos:start="363:13" pos:end="381:13"><if pos:start="363:13" pos:end="369:13">if <condition pos:start="363:16" pos:end="363:25">(<expr pos:start="363:17" pos:end="363:24"><name pos:start="363:17" pos:end="363:19">mod</name> <operator pos:start="363:21" pos:end="363:22">!=</operator> <literal type="number" pos:start="363:24" pos:end="363:24">3</literal></expr>)</condition> <block pos:start="363:27" pos:end="369:13">{<block_content pos:start="365:17" pos:end="367:82">

                <expr_stmt pos:start="365:17" pos:end="365:65"><expr pos:start="365:17" pos:end="365:64"><call pos:start="365:17" pos:end="365:64"><name pos:start="365:17" pos:end="365:29">gen_lea_modrm</name><argument_list pos:start="365:30" pos:end="365:64">(<argument pos:start="365:31" pos:end="365:31"><expr pos:start="365:31" pos:end="365:31"><name pos:start="365:31" pos:end="365:31">s</name></expr></argument>, <argument pos:start="365:34" pos:end="365:38"><expr pos:start="365:34" pos:end="365:38"><name pos:start="365:34" pos:end="365:38">modrm</name></expr></argument>, <argument pos:start="365:41" pos:end="365:49"><expr pos:start="365:41" pos:end="365:49"><operator pos:start="365:41" pos:end="365:41">&amp;</operator><name pos:start="365:42" pos:end="365:49">reg_addr</name></expr></argument>, <argument pos:start="365:52" pos:end="365:63"><expr pos:start="365:52" pos:end="365:63"><operator pos:start="365:52" pos:end="365:52">&amp;</operator><name pos:start="365:53" pos:end="365:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="367:17" pos:end="367:82"><expr pos:start="367:17" pos:end="367:81"><call pos:start="367:17" pos:end="367:81"><name pos:start="367:17" pos:end="367:30">gen_ldo_env_A0</name><argument_list pos:start="367:31" pos:end="367:81">(<argument pos:start="367:32" pos:end="367:43"><expr pos:start="367:32" pos:end="367:43"><name pos:start="367:32" pos:end="367:43"><name pos:start="367:32" pos:end="367:32">s</name><operator pos:start="367:33" pos:end="367:34">-&gt;</operator><name pos:start="367:35" pos:end="367:43">mem_index</name></name></expr></argument>, <argument pos:start="367:46" pos:end="367:80"><expr pos:start="367:46" pos:end="367:80"><call pos:start="367:46" pos:end="367:80"><name pos:start="367:46" pos:end="367:53">offsetof</name><argument_list pos:start="367:54" pos:end="367:80">(<argument pos:start="367:55" pos:end="367:65"><expr pos:start="367:55" pos:end="367:65"><name pos:start="367:55" pos:end="367:65">CPUX86State</name></expr></argument>,<argument pos:start="367:67" pos:end="367:79"><expr pos:start="367:67" pos:end="367:79"><name pos:start="367:67" pos:end="367:79"><name pos:start="367:67" pos:end="367:74">xmm_regs</name><index pos:start="367:75" pos:end="367:79">[<expr pos:start="367:76" pos:end="367:78"><name pos:start="367:76" pos:end="367:78">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="369:15" pos:end="381:13">else <block pos:start="369:20" pos:end="381:13">{<block_content pos:start="371:17" pos:end="379:73">

                <expr_stmt pos:start="371:17" pos:end="371:44"><expr pos:start="371:17" pos:end="371:43"><name pos:start="371:17" pos:end="371:18">rm</name> <operator pos:start="371:20" pos:end="371:20">=</operator> <operator pos:start="371:22" pos:end="371:22">(</operator><name pos:start="371:23" pos:end="371:27">modrm</name> <operator pos:start="371:29" pos:end="371:29">&amp;</operator> <literal type="number" pos:start="371:31" pos:end="371:31">7</literal><operator pos:start="371:32" pos:end="371:32">)</operator> <operator pos:start="371:34" pos:end="371:34">|</operator> <call pos:start="371:36" pos:end="371:43"><name pos:start="371:36" pos:end="371:40">REX_B</name><argument_list pos:start="371:41" pos:end="371:43">(<argument pos:start="371:42" pos:end="371:42"><expr pos:start="371:42" pos:end="371:42"><name pos:start="371:42" pos:end="371:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="373:17" pos:end="375:73"><expr pos:start="373:17" pos:end="375:72"><call pos:start="373:17" pos:end="375:72"><name pos:start="373:17" pos:end="373:27">gen_op_movl</name><argument_list pos:start="373:28" pos:end="375:72">(<argument pos:start="373:29" pos:end="373:72"><expr pos:start="373:29" pos:end="373:72"><call pos:start="373:29" pos:end="373:72"><name pos:start="373:29" pos:end="373:36">offsetof</name><argument_list pos:start="373:37" pos:end="373:72">(<argument pos:start="373:38" pos:end="373:48"><expr pos:start="373:38" pos:end="373:48"><name pos:start="373:38" pos:end="373:48">CPUX86State</name></expr></argument>,<argument pos:start="373:50" pos:end="373:71"><expr pos:start="373:50" pos:end="373:71"><name pos:start="373:50" pos:end="373:62"><name pos:start="373:50" pos:end="373:57">xmm_regs</name><index pos:start="373:58" pos:end="373:62">[<expr pos:start="373:59" pos:end="373:61"><name pos:start="373:59" pos:end="373:61">reg</name></expr>]</index></name><operator pos:start="373:63" pos:end="373:63">.</operator><call pos:start="373:64" pos:end="373:71"><name pos:start="373:64" pos:end="373:68">XMM_L</name><argument_list pos:start="373:69" pos:end="373:71">(<argument pos:start="373:70" pos:end="373:70"><expr pos:start="373:70" pos:end="373:70"><literal type="number" pos:start="373:70" pos:end="373:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="375:29" pos:end="375:71"><expr pos:start="375:29" pos:end="375:71"><call pos:start="375:29" pos:end="375:71"><name pos:start="375:29" pos:end="375:36">offsetof</name><argument_list pos:start="375:37" pos:end="375:71">(<argument pos:start="375:38" pos:end="375:48"><expr pos:start="375:38" pos:end="375:48"><name pos:start="375:38" pos:end="375:48">CPUX86State</name></expr></argument>,<argument pos:start="375:50" pos:end="375:70"><expr pos:start="375:50" pos:end="375:70"><name pos:start="375:50" pos:end="375:61"><name pos:start="375:50" pos:end="375:57">xmm_regs</name><index pos:start="375:58" pos:end="375:61">[<expr pos:start="375:59" pos:end="375:60"><name pos:start="375:59" pos:end="375:60">rm</name></expr>]</index></name><operator pos:start="375:62" pos:end="375:62">.</operator><call pos:start="375:63" pos:end="375:70"><name pos:start="375:63" pos:end="375:67">XMM_L</name><argument_list pos:start="375:68" pos:end="375:70">(<argument pos:start="375:69" pos:end="375:69"><expr pos:start="375:69" pos:end="375:69"><literal type="number" pos:start="375:69" pos:end="375:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="377:17" pos:end="379:73"><expr pos:start="377:17" pos:end="379:72"><call pos:start="377:17" pos:end="379:72"><name pos:start="377:17" pos:end="377:27">gen_op_movl</name><argument_list pos:start="377:28" pos:end="379:72">(<argument pos:start="377:29" pos:end="377:72"><expr pos:start="377:29" pos:end="377:72"><call pos:start="377:29" pos:end="377:72"><name pos:start="377:29" pos:end="377:36">offsetof</name><argument_list pos:start="377:37" pos:end="377:72">(<argument pos:start="377:38" pos:end="377:48"><expr pos:start="377:38" pos:end="377:48"><name pos:start="377:38" pos:end="377:48">CPUX86State</name></expr></argument>,<argument pos:start="377:50" pos:end="377:71"><expr pos:start="377:50" pos:end="377:71"><name pos:start="377:50" pos:end="377:62"><name pos:start="377:50" pos:end="377:57">xmm_regs</name><index pos:start="377:58" pos:end="377:62">[<expr pos:start="377:59" pos:end="377:61"><name pos:start="377:59" pos:end="377:61">reg</name></expr>]</index></name><operator pos:start="377:63" pos:end="377:63">.</operator><call pos:start="377:64" pos:end="377:71"><name pos:start="377:64" pos:end="377:68">XMM_L</name><argument_list pos:start="377:69" pos:end="377:71">(<argument pos:start="377:70" pos:end="377:70"><expr pos:start="377:70" pos:end="377:70"><literal type="number" pos:start="377:70" pos:end="377:70">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="379:29" pos:end="379:71"><expr pos:start="379:29" pos:end="379:71"><call pos:start="379:29" pos:end="379:71"><name pos:start="379:29" pos:end="379:36">offsetof</name><argument_list pos:start="379:37" pos:end="379:71">(<argument pos:start="379:38" pos:end="379:48"><expr pos:start="379:38" pos:end="379:48"><name pos:start="379:38" pos:end="379:48">CPUX86State</name></expr></argument>,<argument pos:start="379:50" pos:end="379:70"><expr pos:start="379:50" pos:end="379:70"><name pos:start="379:50" pos:end="379:61"><name pos:start="379:50" pos:end="379:57">xmm_regs</name><index pos:start="379:58" pos:end="379:61">[<expr pos:start="379:59" pos:end="379:60"><name pos:start="379:59" pos:end="379:60">rm</name></expr>]</index></name><operator pos:start="379:62" pos:end="379:62">.</operator><call pos:start="379:63" pos:end="379:70"><name pos:start="379:63" pos:end="379:67">XMM_L</name><argument_list pos:start="379:68" pos:end="379:70">(<argument pos:start="379:69" pos:end="379:69"><expr pos:start="379:69" pos:end="379:69"><literal type="number" pos:start="379:69" pos:end="379:69">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="383:13" pos:end="385:70"><expr pos:start="383:13" pos:end="385:69"><call pos:start="383:13" pos:end="385:69"><name pos:start="383:13" pos:end="383:23">gen_op_movl</name><argument_list pos:start="383:24" pos:end="385:69">(<argument pos:start="383:25" pos:end="383:68"><expr pos:start="383:25" pos:end="383:68"><call pos:start="383:25" pos:end="383:68"><name pos:start="383:25" pos:end="383:32">offsetof</name><argument_list pos:start="383:33" pos:end="383:68">(<argument pos:start="383:34" pos:end="383:44"><expr pos:start="383:34" pos:end="383:44"><name pos:start="383:34" pos:end="383:44">CPUX86State</name></expr></argument>,<argument pos:start="383:46" pos:end="383:67"><expr pos:start="383:46" pos:end="383:67"><name pos:start="383:46" pos:end="383:58"><name pos:start="383:46" pos:end="383:53">xmm_regs</name><index pos:start="383:54" pos:end="383:58">[<expr pos:start="383:55" pos:end="383:57"><name pos:start="383:55" pos:end="383:57">reg</name></expr>]</index></name><operator pos:start="383:59" pos:end="383:59">.</operator><call pos:start="383:60" pos:end="383:67"><name pos:start="383:60" pos:end="383:64">XMM_L</name><argument_list pos:start="383:65" pos:end="383:67">(<argument pos:start="383:66" pos:end="383:66"><expr pos:start="383:66" pos:end="383:66"><literal type="number" pos:start="383:66" pos:end="383:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="385:25" pos:end="385:68"><expr pos:start="385:25" pos:end="385:68"><call pos:start="385:25" pos:end="385:68"><name pos:start="385:25" pos:end="385:32">offsetof</name><argument_list pos:start="385:33" pos:end="385:68">(<argument pos:start="385:34" pos:end="385:44"><expr pos:start="385:34" pos:end="385:44"><name pos:start="385:34" pos:end="385:44">CPUX86State</name></expr></argument>,<argument pos:start="385:46" pos:end="385:67"><expr pos:start="385:46" pos:end="385:67"><name pos:start="385:46" pos:end="385:58"><name pos:start="385:46" pos:end="385:53">xmm_regs</name><index pos:start="385:54" pos:end="385:58">[<expr pos:start="385:55" pos:end="385:57"><name pos:start="385:55" pos:end="385:57">reg</name></expr>]</index></name><operator pos:start="385:59" pos:end="385:59">.</operator><call pos:start="385:60" pos:end="385:67"><name pos:start="385:60" pos:end="385:64">XMM_L</name><argument_list pos:start="385:65" pos:end="385:67">(<argument pos:start="385:66" pos:end="385:66"><expr pos:start="385:66" pos:end="385:66"><literal type="number" pos:start="385:66" pos:end="385:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="387:13" pos:end="389:70"><expr pos:start="387:13" pos:end="389:69"><call pos:start="387:13" pos:end="389:69"><name pos:start="387:13" pos:end="387:23">gen_op_movl</name><argument_list pos:start="387:24" pos:end="389:69">(<argument pos:start="387:25" pos:end="387:68"><expr pos:start="387:25" pos:end="387:68"><call pos:start="387:25" pos:end="387:68"><name pos:start="387:25" pos:end="387:32">offsetof</name><argument_list pos:start="387:33" pos:end="387:68">(<argument pos:start="387:34" pos:end="387:44"><expr pos:start="387:34" pos:end="387:44"><name pos:start="387:34" pos:end="387:44">CPUX86State</name></expr></argument>,<argument pos:start="387:46" pos:end="387:67"><expr pos:start="387:46" pos:end="387:67"><name pos:start="387:46" pos:end="387:58"><name pos:start="387:46" pos:end="387:53">xmm_regs</name><index pos:start="387:54" pos:end="387:58">[<expr pos:start="387:55" pos:end="387:57"><name pos:start="387:55" pos:end="387:57">reg</name></expr>]</index></name><operator pos:start="387:59" pos:end="387:59">.</operator><call pos:start="387:60" pos:end="387:67"><name pos:start="387:60" pos:end="387:64">XMM_L</name><argument_list pos:start="387:65" pos:end="387:67">(<argument pos:start="387:66" pos:end="387:66"><expr pos:start="387:66" pos:end="387:66"><literal type="number" pos:start="387:66" pos:end="387:66">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="389:25" pos:end="389:68"><expr pos:start="389:25" pos:end="389:68"><call pos:start="389:25" pos:end="389:68"><name pos:start="389:25" pos:end="389:32">offsetof</name><argument_list pos:start="389:33" pos:end="389:68">(<argument pos:start="389:34" pos:end="389:44"><expr pos:start="389:34" pos:end="389:44"><name pos:start="389:34" pos:end="389:44">CPUX86State</name></expr></argument>,<argument pos:start="389:46" pos:end="389:67"><expr pos:start="389:46" pos:end="389:67"><name pos:start="389:46" pos:end="389:58"><name pos:start="389:46" pos:end="389:53">xmm_regs</name><index pos:start="389:54" pos:end="389:58">[<expr pos:start="389:55" pos:end="389:57"><name pos:start="389:55" pos:end="389:57">reg</name></expr>]</index></name><operator pos:start="389:59" pos:end="389:59">.</operator><call pos:start="389:60" pos:end="389:67"><name pos:start="389:60" pos:end="389:64">XMM_L</name><argument_list pos:start="389:65" pos:end="389:67">(<argument pos:start="389:66" pos:end="389:66"><expr pos:start="389:66" pos:end="389:66"><literal type="number" pos:start="389:66" pos:end="389:66">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="391:13" pos:end="391:18">break;</break>

        <case pos:start="393:9" pos:end="393:19">case <expr pos:start="393:14" pos:end="393:18"><literal type="number" pos:start="393:14" pos:end="393:18">0x312</literal></expr>:</case> <comment type="block" pos:start="393:21" pos:end="393:33">/* movddup */</comment>

            <if_stmt pos:start="395:13" pos:end="409:13"><if pos:start="395:13" pos:end="401:13">if <condition pos:start="395:16" pos:end="395:25">(<expr pos:start="395:17" pos:end="395:24"><name pos:start="395:17" pos:end="395:19">mod</name> <operator pos:start="395:21" pos:end="395:22">!=</operator> <literal type="number" pos:start="395:24" pos:end="395:24">3</literal></expr>)</condition> <block pos:start="395:27" pos:end="401:13">{<block_content pos:start="397:17" pos:end="399:91">

                <expr_stmt pos:start="397:17" pos:end="397:65"><expr pos:start="397:17" pos:end="397:64"><call pos:start="397:17" pos:end="397:64"><name pos:start="397:17" pos:end="397:29">gen_lea_modrm</name><argument_list pos:start="397:30" pos:end="397:64">(<argument pos:start="397:31" pos:end="397:31"><expr pos:start="397:31" pos:end="397:31"><name pos:start="397:31" pos:end="397:31">s</name></expr></argument>, <argument pos:start="397:34" pos:end="397:38"><expr pos:start="397:34" pos:end="397:38"><name pos:start="397:34" pos:end="397:38">modrm</name></expr></argument>, <argument pos:start="397:41" pos:end="397:49"><expr pos:start="397:41" pos:end="397:49"><operator pos:start="397:41" pos:end="397:41">&amp;</operator><name pos:start="397:42" pos:end="397:49">reg_addr</name></expr></argument>, <argument pos:start="397:52" pos:end="397:63"><expr pos:start="397:52" pos:end="397:63"><operator pos:start="397:52" pos:end="397:52">&amp;</operator><name pos:start="397:53" pos:end="397:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="399:17" pos:end="399:91"><expr pos:start="399:17" pos:end="399:90"><call pos:start="399:17" pos:end="399:90"><name pos:start="399:17" pos:end="399:30">gen_ldq_env_A0</name><argument_list pos:start="399:31" pos:end="399:90">(<argument pos:start="399:32" pos:end="399:43"><expr pos:start="399:32" pos:end="399:43"><name pos:start="399:32" pos:end="399:43"><name pos:start="399:32" pos:end="399:32">s</name><operator pos:start="399:33" pos:end="399:34">-&gt;</operator><name pos:start="399:35" pos:end="399:43">mem_index</name></name></expr></argument>, <argument pos:start="399:46" pos:end="399:89"><expr pos:start="399:46" pos:end="399:89"><call pos:start="399:46" pos:end="399:89"><name pos:start="399:46" pos:end="399:53">offsetof</name><argument_list pos:start="399:54" pos:end="399:89">(<argument pos:start="399:55" pos:end="399:65"><expr pos:start="399:55" pos:end="399:65"><name pos:start="399:55" pos:end="399:65">CPUX86State</name></expr></argument>,<argument pos:start="399:67" pos:end="399:88"><expr pos:start="399:67" pos:end="399:88"><name pos:start="399:67" pos:end="399:79"><name pos:start="399:67" pos:end="399:74">xmm_regs</name><index pos:start="399:75" pos:end="399:79">[<expr pos:start="399:76" pos:end="399:78"><name pos:start="399:76" pos:end="399:78">reg</name></expr>]</index></name><operator pos:start="399:80" pos:end="399:80">.</operator><call pos:start="399:81" pos:end="399:88"><name pos:start="399:81" pos:end="399:85">XMM_Q</name><argument_list pos:start="399:86" pos:end="399:88">(<argument pos:start="399:87" pos:end="399:87"><expr pos:start="399:87" pos:end="399:87"><literal type="number" pos:start="399:87" pos:end="399:87">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="401:15" pos:end="409:13">else <block pos:start="401:20" pos:end="409:13">{<block_content pos:start="403:17" pos:end="407:73">

                <expr_stmt pos:start="403:17" pos:end="403:44"><expr pos:start="403:17" pos:end="403:43"><name pos:start="403:17" pos:end="403:18">rm</name> <operator pos:start="403:20" pos:end="403:20">=</operator> <operator pos:start="403:22" pos:end="403:22">(</operator><name pos:start="403:23" pos:end="403:27">modrm</name> <operator pos:start="403:29" pos:end="403:29">&amp;</operator> <literal type="number" pos:start="403:31" pos:end="403:31">7</literal><operator pos:start="403:32" pos:end="403:32">)</operator> <operator pos:start="403:34" pos:end="403:34">|</operator> <call pos:start="403:36" pos:end="403:43"><name pos:start="403:36" pos:end="403:40">REX_B</name><argument_list pos:start="403:41" pos:end="403:43">(<argument pos:start="403:42" pos:end="403:42"><expr pos:start="403:42" pos:end="403:42"><name pos:start="403:42" pos:end="403:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="405:17" pos:end="407:73"><expr pos:start="405:17" pos:end="407:72"><call pos:start="405:17" pos:end="407:72"><name pos:start="405:17" pos:end="405:27">gen_op_movq</name><argument_list pos:start="405:28" pos:end="407:72">(<argument pos:start="405:29" pos:end="405:72"><expr pos:start="405:29" pos:end="405:72"><call pos:start="405:29" pos:end="405:72"><name pos:start="405:29" pos:end="405:36">offsetof</name><argument_list pos:start="405:37" pos:end="405:72">(<argument pos:start="405:38" pos:end="405:48"><expr pos:start="405:38" pos:end="405:48"><name pos:start="405:38" pos:end="405:48">CPUX86State</name></expr></argument>,<argument pos:start="405:50" pos:end="405:71"><expr pos:start="405:50" pos:end="405:71"><name pos:start="405:50" pos:end="405:62"><name pos:start="405:50" pos:end="405:57">xmm_regs</name><index pos:start="405:58" pos:end="405:62">[<expr pos:start="405:59" pos:end="405:61"><name pos:start="405:59" pos:end="405:61">reg</name></expr>]</index></name><operator pos:start="405:63" pos:end="405:63">.</operator><call pos:start="405:64" pos:end="405:71"><name pos:start="405:64" pos:end="405:68">XMM_Q</name><argument_list pos:start="405:69" pos:end="405:71">(<argument pos:start="405:70" pos:end="405:70"><expr pos:start="405:70" pos:end="405:70"><literal type="number" pos:start="405:70" pos:end="405:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="407:29" pos:end="407:71"><expr pos:start="407:29" pos:end="407:71"><call pos:start="407:29" pos:end="407:71"><name pos:start="407:29" pos:end="407:36">offsetof</name><argument_list pos:start="407:37" pos:end="407:71">(<argument pos:start="407:38" pos:end="407:48"><expr pos:start="407:38" pos:end="407:48"><name pos:start="407:38" pos:end="407:48">CPUX86State</name></expr></argument>,<argument pos:start="407:50" pos:end="407:70"><expr pos:start="407:50" pos:end="407:70"><name pos:start="407:50" pos:end="407:61"><name pos:start="407:50" pos:end="407:57">xmm_regs</name><index pos:start="407:58" pos:end="407:61">[<expr pos:start="407:59" pos:end="407:60"><name pos:start="407:59" pos:end="407:60">rm</name></expr>]</index></name><operator pos:start="407:62" pos:end="407:62">.</operator><call pos:start="407:63" pos:end="407:70"><name pos:start="407:63" pos:end="407:67">XMM_Q</name><argument_list pos:start="407:68" pos:end="407:70">(<argument pos:start="407:69" pos:end="407:69"><expr pos:start="407:69" pos:end="407:69"><literal type="number" pos:start="407:69" pos:end="407:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="411:13" pos:end="413:70"><expr pos:start="411:13" pos:end="413:69"><call pos:start="411:13" pos:end="413:69"><name pos:start="411:13" pos:end="411:23">gen_op_movq</name><argument_list pos:start="411:24" pos:end="413:69">(<argument pos:start="411:25" pos:end="411:68"><expr pos:start="411:25" pos:end="411:68"><call pos:start="411:25" pos:end="411:68"><name pos:start="411:25" pos:end="411:32">offsetof</name><argument_list pos:start="411:33" pos:end="411:68">(<argument pos:start="411:34" pos:end="411:44"><expr pos:start="411:34" pos:end="411:44"><name pos:start="411:34" pos:end="411:44">CPUX86State</name></expr></argument>,<argument pos:start="411:46" pos:end="411:67"><expr pos:start="411:46" pos:end="411:67"><name pos:start="411:46" pos:end="411:58"><name pos:start="411:46" pos:end="411:53">xmm_regs</name><index pos:start="411:54" pos:end="411:58">[<expr pos:start="411:55" pos:end="411:57"><name pos:start="411:55" pos:end="411:57">reg</name></expr>]</index></name><operator pos:start="411:59" pos:end="411:59">.</operator><call pos:start="411:60" pos:end="411:67"><name pos:start="411:60" pos:end="411:64">XMM_Q</name><argument_list pos:start="411:65" pos:end="411:67">(<argument pos:start="411:66" pos:end="411:66"><expr pos:start="411:66" pos:end="411:66"><literal type="number" pos:start="411:66" pos:end="411:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="413:25" pos:end="413:68"><expr pos:start="413:25" pos:end="413:68"><call pos:start="413:25" pos:end="413:68"><name pos:start="413:25" pos:end="413:32">offsetof</name><argument_list pos:start="413:33" pos:end="413:68">(<argument pos:start="413:34" pos:end="413:44"><expr pos:start="413:34" pos:end="413:44"><name pos:start="413:34" pos:end="413:44">CPUX86State</name></expr></argument>,<argument pos:start="413:46" pos:end="413:67"><expr pos:start="413:46" pos:end="413:67"><name pos:start="413:46" pos:end="413:58"><name pos:start="413:46" pos:end="413:53">xmm_regs</name><index pos:start="413:54" pos:end="413:58">[<expr pos:start="413:55" pos:end="413:57"><name pos:start="413:55" pos:end="413:57">reg</name></expr>]</index></name><operator pos:start="413:59" pos:end="413:59">.</operator><call pos:start="413:60" pos:end="413:67"><name pos:start="413:60" pos:end="413:64">XMM_Q</name><argument_list pos:start="413:65" pos:end="413:67">(<argument pos:start="413:66" pos:end="413:66"><expr pos:start="413:66" pos:end="413:66"><literal type="number" pos:start="413:66" pos:end="413:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="415:13" pos:end="415:18">break;</break>

        <case pos:start="417:9" pos:end="417:19">case <expr pos:start="417:14" pos:end="417:18"><literal type="number" pos:start="417:14" pos:end="417:18">0x016</literal></expr>:</case> <comment type="block" pos:start="417:21" pos:end="417:32">/* movhps */</comment>

        <case pos:start="419:9" pos:end="419:19">case <expr pos:start="419:14" pos:end="419:18"><literal type="number" pos:start="419:14" pos:end="419:18">0x116</literal></expr>:</case> <comment type="block" pos:start="419:21" pos:end="419:32">/* movhpd */</comment>

            <if_stmt pos:start="421:13" pos:end="437:13"><if pos:start="421:13" pos:end="427:13">if <condition pos:start="421:16" pos:end="421:25">(<expr pos:start="421:17" pos:end="421:24"><name pos:start="421:17" pos:end="421:19">mod</name> <operator pos:start="421:21" pos:end="421:22">!=</operator> <literal type="number" pos:start="421:24" pos:end="421:24">3</literal></expr>)</condition> <block pos:start="421:27" pos:end="427:13">{<block_content pos:start="423:17" pos:end="425:91">

                <expr_stmt pos:start="423:17" pos:end="423:65"><expr pos:start="423:17" pos:end="423:64"><call pos:start="423:17" pos:end="423:64"><name pos:start="423:17" pos:end="423:29">gen_lea_modrm</name><argument_list pos:start="423:30" pos:end="423:64">(<argument pos:start="423:31" pos:end="423:31"><expr pos:start="423:31" pos:end="423:31"><name pos:start="423:31" pos:end="423:31">s</name></expr></argument>, <argument pos:start="423:34" pos:end="423:38"><expr pos:start="423:34" pos:end="423:38"><name pos:start="423:34" pos:end="423:38">modrm</name></expr></argument>, <argument pos:start="423:41" pos:end="423:49"><expr pos:start="423:41" pos:end="423:49"><operator pos:start="423:41" pos:end="423:41">&amp;</operator><name pos:start="423:42" pos:end="423:49">reg_addr</name></expr></argument>, <argument pos:start="423:52" pos:end="423:63"><expr pos:start="423:52" pos:end="423:63"><operator pos:start="423:52" pos:end="423:52">&amp;</operator><name pos:start="423:53" pos:end="423:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="425:17" pos:end="425:91"><expr pos:start="425:17" pos:end="425:90"><call pos:start="425:17" pos:end="425:90"><name pos:start="425:17" pos:end="425:30">gen_ldq_env_A0</name><argument_list pos:start="425:31" pos:end="425:90">(<argument pos:start="425:32" pos:end="425:43"><expr pos:start="425:32" pos:end="425:43"><name pos:start="425:32" pos:end="425:43"><name pos:start="425:32" pos:end="425:32">s</name><operator pos:start="425:33" pos:end="425:34">-&gt;</operator><name pos:start="425:35" pos:end="425:43">mem_index</name></name></expr></argument>, <argument pos:start="425:46" pos:end="425:89"><expr pos:start="425:46" pos:end="425:89"><call pos:start="425:46" pos:end="425:89"><name pos:start="425:46" pos:end="425:53">offsetof</name><argument_list pos:start="425:54" pos:end="425:89">(<argument pos:start="425:55" pos:end="425:65"><expr pos:start="425:55" pos:end="425:65"><name pos:start="425:55" pos:end="425:65">CPUX86State</name></expr></argument>,<argument pos:start="425:67" pos:end="425:88"><expr pos:start="425:67" pos:end="425:88"><name pos:start="425:67" pos:end="425:79"><name pos:start="425:67" pos:end="425:74">xmm_regs</name><index pos:start="425:75" pos:end="425:79">[<expr pos:start="425:76" pos:end="425:78"><name pos:start="425:76" pos:end="425:78">reg</name></expr>]</index></name><operator pos:start="425:80" pos:end="425:80">.</operator><call pos:start="425:81" pos:end="425:88"><name pos:start="425:81" pos:end="425:85">XMM_Q</name><argument_list pos:start="425:86" pos:end="425:88">(<argument pos:start="425:87" pos:end="425:87"><expr pos:start="425:87" pos:end="425:87"><literal type="number" pos:start="425:87" pos:end="425:87">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="427:15" pos:end="437:13">else <block pos:start="427:20" pos:end="437:13">{<block_content pos:start="431:17" pos:end="435:73">

                <comment type="block" pos:start="429:17" pos:end="429:29">/* movlhps */</comment>

                <expr_stmt pos:start="431:17" pos:end="431:44"><expr pos:start="431:17" pos:end="431:43"><name pos:start="431:17" pos:end="431:18">rm</name> <operator pos:start="431:20" pos:end="431:20">=</operator> <operator pos:start="431:22" pos:end="431:22">(</operator><name pos:start="431:23" pos:end="431:27">modrm</name> <operator pos:start="431:29" pos:end="431:29">&amp;</operator> <literal type="number" pos:start="431:31" pos:end="431:31">7</literal><operator pos:start="431:32" pos:end="431:32">)</operator> <operator pos:start="431:34" pos:end="431:34">|</operator> <call pos:start="431:36" pos:end="431:43"><name pos:start="431:36" pos:end="431:40">REX_B</name><argument_list pos:start="431:41" pos:end="431:43">(<argument pos:start="431:42" pos:end="431:42"><expr pos:start="431:42" pos:end="431:42"><name pos:start="431:42" pos:end="431:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="433:17" pos:end="435:73"><expr pos:start="433:17" pos:end="435:72"><call pos:start="433:17" pos:end="435:72"><name pos:start="433:17" pos:end="433:27">gen_op_movq</name><argument_list pos:start="433:28" pos:end="435:72">(<argument pos:start="433:29" pos:end="433:72"><expr pos:start="433:29" pos:end="433:72"><call pos:start="433:29" pos:end="433:72"><name pos:start="433:29" pos:end="433:36">offsetof</name><argument_list pos:start="433:37" pos:end="433:72">(<argument pos:start="433:38" pos:end="433:48"><expr pos:start="433:38" pos:end="433:48"><name pos:start="433:38" pos:end="433:48">CPUX86State</name></expr></argument>,<argument pos:start="433:50" pos:end="433:71"><expr pos:start="433:50" pos:end="433:71"><name pos:start="433:50" pos:end="433:62"><name pos:start="433:50" pos:end="433:57">xmm_regs</name><index pos:start="433:58" pos:end="433:62">[<expr pos:start="433:59" pos:end="433:61"><name pos:start="433:59" pos:end="433:61">reg</name></expr>]</index></name><operator pos:start="433:63" pos:end="433:63">.</operator><call pos:start="433:64" pos:end="433:71"><name pos:start="433:64" pos:end="433:68">XMM_Q</name><argument_list pos:start="433:69" pos:end="433:71">(<argument pos:start="433:70" pos:end="433:70"><expr pos:start="433:70" pos:end="433:70"><literal type="number" pos:start="433:70" pos:end="433:70">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="435:29" pos:end="435:71"><expr pos:start="435:29" pos:end="435:71"><call pos:start="435:29" pos:end="435:71"><name pos:start="435:29" pos:end="435:36">offsetof</name><argument_list pos:start="435:37" pos:end="435:71">(<argument pos:start="435:38" pos:end="435:48"><expr pos:start="435:38" pos:end="435:48"><name pos:start="435:38" pos:end="435:48">CPUX86State</name></expr></argument>,<argument pos:start="435:50" pos:end="435:70"><expr pos:start="435:50" pos:end="435:70"><name pos:start="435:50" pos:end="435:61"><name pos:start="435:50" pos:end="435:57">xmm_regs</name><index pos:start="435:58" pos:end="435:61">[<expr pos:start="435:59" pos:end="435:60"><name pos:start="435:59" pos:end="435:60">rm</name></expr>]</index></name><operator pos:start="435:62" pos:end="435:62">.</operator><call pos:start="435:63" pos:end="435:70"><name pos:start="435:63" pos:end="435:67">XMM_Q</name><argument_list pos:start="435:68" pos:end="435:70">(<argument pos:start="435:69" pos:end="435:69"><expr pos:start="435:69" pos:end="435:69"><literal type="number" pos:start="435:69" pos:end="435:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="439:13" pos:end="439:18">break;</break>

        <case pos:start="441:9" pos:end="441:19">case <expr pos:start="441:14" pos:end="441:18"><literal type="number" pos:start="441:14" pos:end="441:18">0x216</literal></expr>:</case> <comment type="block" pos:start="441:21" pos:end="441:34">/* movshdup */</comment>

            <if_stmt pos:start="443:13" pos:end="461:13"><if pos:start="443:13" pos:end="449:13">if <condition pos:start="443:16" pos:end="443:25">(<expr pos:start="443:17" pos:end="443:24"><name pos:start="443:17" pos:end="443:19">mod</name> <operator pos:start="443:21" pos:end="443:22">!=</operator> <literal type="number" pos:start="443:24" pos:end="443:24">3</literal></expr>)</condition> <block pos:start="443:27" pos:end="449:13">{<block_content pos:start="445:17" pos:end="447:82">

                <expr_stmt pos:start="445:17" pos:end="445:65"><expr pos:start="445:17" pos:end="445:64"><call pos:start="445:17" pos:end="445:64"><name pos:start="445:17" pos:end="445:29">gen_lea_modrm</name><argument_list pos:start="445:30" pos:end="445:64">(<argument pos:start="445:31" pos:end="445:31"><expr pos:start="445:31" pos:end="445:31"><name pos:start="445:31" pos:end="445:31">s</name></expr></argument>, <argument pos:start="445:34" pos:end="445:38"><expr pos:start="445:34" pos:end="445:38"><name pos:start="445:34" pos:end="445:38">modrm</name></expr></argument>, <argument pos:start="445:41" pos:end="445:49"><expr pos:start="445:41" pos:end="445:49"><operator pos:start="445:41" pos:end="445:41">&amp;</operator><name pos:start="445:42" pos:end="445:49">reg_addr</name></expr></argument>, <argument pos:start="445:52" pos:end="445:63"><expr pos:start="445:52" pos:end="445:63"><operator pos:start="445:52" pos:end="445:52">&amp;</operator><name pos:start="445:53" pos:end="445:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="447:17" pos:end="447:82"><expr pos:start="447:17" pos:end="447:81"><call pos:start="447:17" pos:end="447:81"><name pos:start="447:17" pos:end="447:30">gen_ldo_env_A0</name><argument_list pos:start="447:31" pos:end="447:81">(<argument pos:start="447:32" pos:end="447:43"><expr pos:start="447:32" pos:end="447:43"><name pos:start="447:32" pos:end="447:43"><name pos:start="447:32" pos:end="447:32">s</name><operator pos:start="447:33" pos:end="447:34">-&gt;</operator><name pos:start="447:35" pos:end="447:43">mem_index</name></name></expr></argument>, <argument pos:start="447:46" pos:end="447:80"><expr pos:start="447:46" pos:end="447:80"><call pos:start="447:46" pos:end="447:80"><name pos:start="447:46" pos:end="447:53">offsetof</name><argument_list pos:start="447:54" pos:end="447:80">(<argument pos:start="447:55" pos:end="447:65"><expr pos:start="447:55" pos:end="447:65"><name pos:start="447:55" pos:end="447:65">CPUX86State</name></expr></argument>,<argument pos:start="447:67" pos:end="447:79"><expr pos:start="447:67" pos:end="447:79"><name pos:start="447:67" pos:end="447:79"><name pos:start="447:67" pos:end="447:74">xmm_regs</name><index pos:start="447:75" pos:end="447:79">[<expr pos:start="447:76" pos:end="447:78"><name pos:start="447:76" pos:end="447:78">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="449:15" pos:end="461:13">else <block pos:start="449:20" pos:end="461:13">{<block_content pos:start="451:17" pos:end="459:73">

                <expr_stmt pos:start="451:17" pos:end="451:44"><expr pos:start="451:17" pos:end="451:43"><name pos:start="451:17" pos:end="451:18">rm</name> <operator pos:start="451:20" pos:end="451:20">=</operator> <operator pos:start="451:22" pos:end="451:22">(</operator><name pos:start="451:23" pos:end="451:27">modrm</name> <operator pos:start="451:29" pos:end="451:29">&amp;</operator> <literal type="number" pos:start="451:31" pos:end="451:31">7</literal><operator pos:start="451:32" pos:end="451:32">)</operator> <operator pos:start="451:34" pos:end="451:34">|</operator> <call pos:start="451:36" pos:end="451:43"><name pos:start="451:36" pos:end="451:40">REX_B</name><argument_list pos:start="451:41" pos:end="451:43">(<argument pos:start="451:42" pos:end="451:42"><expr pos:start="451:42" pos:end="451:42"><name pos:start="451:42" pos:end="451:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="453:17" pos:end="455:73"><expr pos:start="453:17" pos:end="455:72"><call pos:start="453:17" pos:end="455:72"><name pos:start="453:17" pos:end="453:27">gen_op_movl</name><argument_list pos:start="453:28" pos:end="455:72">(<argument pos:start="453:29" pos:end="453:72"><expr pos:start="453:29" pos:end="453:72"><call pos:start="453:29" pos:end="453:72"><name pos:start="453:29" pos:end="453:36">offsetof</name><argument_list pos:start="453:37" pos:end="453:72">(<argument pos:start="453:38" pos:end="453:48"><expr pos:start="453:38" pos:end="453:48"><name pos:start="453:38" pos:end="453:48">CPUX86State</name></expr></argument>,<argument pos:start="453:50" pos:end="453:71"><expr pos:start="453:50" pos:end="453:71"><name pos:start="453:50" pos:end="453:62"><name pos:start="453:50" pos:end="453:57">xmm_regs</name><index pos:start="453:58" pos:end="453:62">[<expr pos:start="453:59" pos:end="453:61"><name pos:start="453:59" pos:end="453:61">reg</name></expr>]</index></name><operator pos:start="453:63" pos:end="453:63">.</operator><call pos:start="453:64" pos:end="453:71"><name pos:start="453:64" pos:end="453:68">XMM_L</name><argument_list pos:start="453:69" pos:end="453:71">(<argument pos:start="453:70" pos:end="453:70"><expr pos:start="453:70" pos:end="453:70"><literal type="number" pos:start="453:70" pos:end="453:70">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="455:29" pos:end="455:71"><expr pos:start="455:29" pos:end="455:71"><call pos:start="455:29" pos:end="455:71"><name pos:start="455:29" pos:end="455:36">offsetof</name><argument_list pos:start="455:37" pos:end="455:71">(<argument pos:start="455:38" pos:end="455:48"><expr pos:start="455:38" pos:end="455:48"><name pos:start="455:38" pos:end="455:48">CPUX86State</name></expr></argument>,<argument pos:start="455:50" pos:end="455:70"><expr pos:start="455:50" pos:end="455:70"><name pos:start="455:50" pos:end="455:61"><name pos:start="455:50" pos:end="455:57">xmm_regs</name><index pos:start="455:58" pos:end="455:61">[<expr pos:start="455:59" pos:end="455:60"><name pos:start="455:59" pos:end="455:60">rm</name></expr>]</index></name><operator pos:start="455:62" pos:end="455:62">.</operator><call pos:start="455:63" pos:end="455:70"><name pos:start="455:63" pos:end="455:67">XMM_L</name><argument_list pos:start="455:68" pos:end="455:70">(<argument pos:start="455:69" pos:end="455:69"><expr pos:start="455:69" pos:end="455:69"><literal type="number" pos:start="455:69" pos:end="455:69">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="457:17" pos:end="459:73"><expr pos:start="457:17" pos:end="459:72"><call pos:start="457:17" pos:end="459:72"><name pos:start="457:17" pos:end="457:27">gen_op_movl</name><argument_list pos:start="457:28" pos:end="459:72">(<argument pos:start="457:29" pos:end="457:72"><expr pos:start="457:29" pos:end="457:72"><call pos:start="457:29" pos:end="457:72"><name pos:start="457:29" pos:end="457:36">offsetof</name><argument_list pos:start="457:37" pos:end="457:72">(<argument pos:start="457:38" pos:end="457:48"><expr pos:start="457:38" pos:end="457:48"><name pos:start="457:38" pos:end="457:48">CPUX86State</name></expr></argument>,<argument pos:start="457:50" pos:end="457:71"><expr pos:start="457:50" pos:end="457:71"><name pos:start="457:50" pos:end="457:62"><name pos:start="457:50" pos:end="457:57">xmm_regs</name><index pos:start="457:58" pos:end="457:62">[<expr pos:start="457:59" pos:end="457:61"><name pos:start="457:59" pos:end="457:61">reg</name></expr>]</index></name><operator pos:start="457:63" pos:end="457:63">.</operator><call pos:start="457:64" pos:end="457:71"><name pos:start="457:64" pos:end="457:68">XMM_L</name><argument_list pos:start="457:69" pos:end="457:71">(<argument pos:start="457:70" pos:end="457:70"><expr pos:start="457:70" pos:end="457:70"><literal type="number" pos:start="457:70" pos:end="457:70">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="459:29" pos:end="459:71"><expr pos:start="459:29" pos:end="459:71"><call pos:start="459:29" pos:end="459:71"><name pos:start="459:29" pos:end="459:36">offsetof</name><argument_list pos:start="459:37" pos:end="459:71">(<argument pos:start="459:38" pos:end="459:48"><expr pos:start="459:38" pos:end="459:48"><name pos:start="459:38" pos:end="459:48">CPUX86State</name></expr></argument>,<argument pos:start="459:50" pos:end="459:70"><expr pos:start="459:50" pos:end="459:70"><name pos:start="459:50" pos:end="459:61"><name pos:start="459:50" pos:end="459:57">xmm_regs</name><index pos:start="459:58" pos:end="459:61">[<expr pos:start="459:59" pos:end="459:60"><name pos:start="459:59" pos:end="459:60">rm</name></expr>]</index></name><operator pos:start="459:62" pos:end="459:62">.</operator><call pos:start="459:63" pos:end="459:70"><name pos:start="459:63" pos:end="459:67">XMM_L</name><argument_list pos:start="459:68" pos:end="459:70">(<argument pos:start="459:69" pos:end="459:69"><expr pos:start="459:69" pos:end="459:69"><literal type="number" pos:start="459:69" pos:end="459:69">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="463:13" pos:end="465:70"><expr pos:start="463:13" pos:end="465:69"><call pos:start="463:13" pos:end="465:69"><name pos:start="463:13" pos:end="463:23">gen_op_movl</name><argument_list pos:start="463:24" pos:end="465:69">(<argument pos:start="463:25" pos:end="463:68"><expr pos:start="463:25" pos:end="463:68"><call pos:start="463:25" pos:end="463:68"><name pos:start="463:25" pos:end="463:32">offsetof</name><argument_list pos:start="463:33" pos:end="463:68">(<argument pos:start="463:34" pos:end="463:44"><expr pos:start="463:34" pos:end="463:44"><name pos:start="463:34" pos:end="463:44">CPUX86State</name></expr></argument>,<argument pos:start="463:46" pos:end="463:67"><expr pos:start="463:46" pos:end="463:67"><name pos:start="463:46" pos:end="463:58"><name pos:start="463:46" pos:end="463:53">xmm_regs</name><index pos:start="463:54" pos:end="463:58">[<expr pos:start="463:55" pos:end="463:57"><name pos:start="463:55" pos:end="463:57">reg</name></expr>]</index></name><operator pos:start="463:59" pos:end="463:59">.</operator><call pos:start="463:60" pos:end="463:67"><name pos:start="463:60" pos:end="463:64">XMM_L</name><argument_list pos:start="463:65" pos:end="463:67">(<argument pos:start="463:66" pos:end="463:66"><expr pos:start="463:66" pos:end="463:66"><literal type="number" pos:start="463:66" pos:end="463:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="465:25" pos:end="465:68"><expr pos:start="465:25" pos:end="465:68"><call pos:start="465:25" pos:end="465:68"><name pos:start="465:25" pos:end="465:32">offsetof</name><argument_list pos:start="465:33" pos:end="465:68">(<argument pos:start="465:34" pos:end="465:44"><expr pos:start="465:34" pos:end="465:44"><name pos:start="465:34" pos:end="465:44">CPUX86State</name></expr></argument>,<argument pos:start="465:46" pos:end="465:67"><expr pos:start="465:46" pos:end="465:67"><name pos:start="465:46" pos:end="465:58"><name pos:start="465:46" pos:end="465:53">xmm_regs</name><index pos:start="465:54" pos:end="465:58">[<expr pos:start="465:55" pos:end="465:57"><name pos:start="465:55" pos:end="465:57">reg</name></expr>]</index></name><operator pos:start="465:59" pos:end="465:59">.</operator><call pos:start="465:60" pos:end="465:67"><name pos:start="465:60" pos:end="465:64">XMM_L</name><argument_list pos:start="465:65" pos:end="465:67">(<argument pos:start="465:66" pos:end="465:66"><expr pos:start="465:66" pos:end="465:66"><literal type="number" pos:start="465:66" pos:end="465:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="467:13" pos:end="469:70"><expr pos:start="467:13" pos:end="469:69"><call pos:start="467:13" pos:end="469:69"><name pos:start="467:13" pos:end="467:23">gen_op_movl</name><argument_list pos:start="467:24" pos:end="469:69">(<argument pos:start="467:25" pos:end="467:68"><expr pos:start="467:25" pos:end="467:68"><call pos:start="467:25" pos:end="467:68"><name pos:start="467:25" pos:end="467:32">offsetof</name><argument_list pos:start="467:33" pos:end="467:68">(<argument pos:start="467:34" pos:end="467:44"><expr pos:start="467:34" pos:end="467:44"><name pos:start="467:34" pos:end="467:44">CPUX86State</name></expr></argument>,<argument pos:start="467:46" pos:end="467:67"><expr pos:start="467:46" pos:end="467:67"><name pos:start="467:46" pos:end="467:58"><name pos:start="467:46" pos:end="467:53">xmm_regs</name><index pos:start="467:54" pos:end="467:58">[<expr pos:start="467:55" pos:end="467:57"><name pos:start="467:55" pos:end="467:57">reg</name></expr>]</index></name><operator pos:start="467:59" pos:end="467:59">.</operator><call pos:start="467:60" pos:end="467:67"><name pos:start="467:60" pos:end="467:64">XMM_L</name><argument_list pos:start="467:65" pos:end="467:67">(<argument pos:start="467:66" pos:end="467:66"><expr pos:start="467:66" pos:end="467:66"><literal type="number" pos:start="467:66" pos:end="467:66">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="469:25" pos:end="469:68"><expr pos:start="469:25" pos:end="469:68"><call pos:start="469:25" pos:end="469:68"><name pos:start="469:25" pos:end="469:32">offsetof</name><argument_list pos:start="469:33" pos:end="469:68">(<argument pos:start="469:34" pos:end="469:44"><expr pos:start="469:34" pos:end="469:44"><name pos:start="469:34" pos:end="469:44">CPUX86State</name></expr></argument>,<argument pos:start="469:46" pos:end="469:67"><expr pos:start="469:46" pos:end="469:67"><name pos:start="469:46" pos:end="469:58"><name pos:start="469:46" pos:end="469:53">xmm_regs</name><index pos:start="469:54" pos:end="469:58">[<expr pos:start="469:55" pos:end="469:57"><name pos:start="469:55" pos:end="469:57">reg</name></expr>]</index></name><operator pos:start="469:59" pos:end="469:59">.</operator><call pos:start="469:60" pos:end="469:67"><name pos:start="469:60" pos:end="469:64">XMM_L</name><argument_list pos:start="469:65" pos:end="469:67">(<argument pos:start="469:66" pos:end="469:66"><expr pos:start="469:66" pos:end="469:66"><literal type="number" pos:start="469:66" pos:end="469:66">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="471:13" pos:end="471:18">break;</break>

        <case pos:start="473:9" pos:end="476:0">case <expr pos:start="473:14" pos:end="473:17"><literal type="number" pos:start="473:14" pos:end="473:17">0x7e</literal></expr>:</case> <comment type="block" pos:start="473:20" pos:end="473:36">/* movd ea, mm */</comment>

<cpp:ifdef pos:start="475:1" pos:end="475:20">#<cpp:directive pos:start="475:2" pos:end="475:6">ifdef</cpp:directive> <name pos:start="475:8" pos:end="475:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="477:13" pos:end="497:13"><if pos:start="477:13" pos:end="485:13">if <condition pos:start="477:16" pos:end="477:30">(<expr pos:start="477:17" pos:end="477:29"><name pos:start="477:17" pos:end="477:24"><name pos:start="477:17" pos:end="477:17">s</name><operator pos:start="477:18" pos:end="477:19">-&gt;</operator><name pos:start="477:20" pos:end="477:24">dflag</name></name> <operator pos:start="477:26" pos:end="477:27">==</operator> <literal type="number" pos:start="477:29" pos:end="477:29">2</literal></expr>)</condition> <block pos:start="477:32" pos:end="485:13">{<block_content pos:start="479:17" pos:end="483:62">

                <expr_stmt pos:start="479:17" pos:end="481:70"><expr pos:start="479:17" pos:end="481:69"><call pos:start="479:17" pos:end="481:69"><name pos:start="479:17" pos:end="479:30">tcg_gen_ld_i64</name><argument_list pos:start="479:31" pos:end="481:69">(<argument pos:start="479:32" pos:end="479:39"><expr pos:start="479:32" pos:end="479:39"><name pos:start="479:32" pos:end="479:39"><name pos:start="479:32" pos:end="479:36">cpu_T</name><index pos:start="479:37" pos:end="479:39">[<expr pos:start="479:38" pos:end="479:38"><literal type="number" pos:start="479:38" pos:end="479:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="479:42" pos:end="479:48"><expr pos:start="479:42" pos:end="479:48"><name pos:start="479:42" pos:end="479:48">cpu_env</name></expr></argument>, 

                               <argument pos:start="481:32" pos:end="481:68"><expr pos:start="481:32" pos:end="481:68"><call pos:start="481:32" pos:end="481:68"><name pos:start="481:32" pos:end="481:39">offsetof</name><argument_list pos:start="481:40" pos:end="481:68">(<argument pos:start="481:41" pos:end="481:51"><expr pos:start="481:41" pos:end="481:51"><name pos:start="481:41" pos:end="481:51">CPUX86State</name></expr></argument>,<argument pos:start="481:53" pos:end="481:67"><expr pos:start="481:53" pos:end="481:67"><name pos:start="481:53" pos:end="481:63"><name pos:start="481:53" pos:end="481:58">fpregs</name><index pos:start="481:59" pos:end="481:63">[<expr pos:start="481:60" pos:end="481:62"><name pos:start="481:60" pos:end="481:62">reg</name></expr>]</index></name><operator pos:start="481:64" pos:end="481:64">.</operator><name pos:start="481:65" pos:end="481:67">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="483:17" pos:end="483:62"><expr pos:start="483:17" pos:end="483:61"><call pos:start="483:17" pos:end="483:61"><name pos:start="483:17" pos:end="483:30">gen_ldst_modrm</name><argument_list pos:start="483:31" pos:end="483:61">(<argument pos:start="483:32" pos:end="483:32"><expr pos:start="483:32" pos:end="483:32"><name pos:start="483:32" pos:end="483:32">s</name></expr></argument>, <argument pos:start="483:35" pos:end="483:39"><expr pos:start="483:35" pos:end="483:39"><name pos:start="483:35" pos:end="483:39">modrm</name></expr></argument>, <argument pos:start="483:42" pos:end="483:48"><expr pos:start="483:42" pos:end="483:48"><name pos:start="483:42" pos:end="483:48">OT_QUAD</name></expr></argument>, <argument pos:start="483:51" pos:end="483:57"><expr pos:start="483:51" pos:end="483:57"><name pos:start="483:51" pos:end="483:57">OR_TMP0</name></expr></argument>, <argument pos:start="483:60" pos:end="483:60"><expr pos:start="483:60" pos:end="483:60"><literal type="number" pos:start="483:60" pos:end="483:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="485:15" pos:end="497:13">else

<cpp:endif pos:start="487:1" pos:end="487:6">#<cpp:directive pos:start="487:2" pos:end="487:6">endif</cpp:directive></cpp:endif>

            <block pos:start="489:13" pos:end="497:13">{<block_content pos:start="491:17" pos:end="495:62">

                <expr_stmt pos:start="491:17" pos:end="493:81"><expr pos:start="491:17" pos:end="493:80"><call pos:start="491:17" pos:end="493:80"><name pos:start="491:17" pos:end="491:32">tcg_gen_ld32u_tl</name><argument_list pos:start="491:33" pos:end="493:80">(<argument pos:start="491:34" pos:end="491:41"><expr pos:start="491:34" pos:end="491:41"><name pos:start="491:34" pos:end="491:41"><name pos:start="491:34" pos:end="491:38">cpu_T</name><index pos:start="491:39" pos:end="491:41">[<expr pos:start="491:40" pos:end="491:40"><literal type="number" pos:start="491:40" pos:end="491:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="491:44" pos:end="491:50"><expr pos:start="491:44" pos:end="491:50"><name pos:start="491:44" pos:end="491:50">cpu_env</name></expr></argument>, 

                                 <argument pos:start="493:34" pos:end="493:79"><expr pos:start="493:34" pos:end="493:79"><call pos:start="493:34" pos:end="493:79"><name pos:start="493:34" pos:end="493:41">offsetof</name><argument_list pos:start="493:42" pos:end="493:79">(<argument pos:start="493:43" pos:end="493:53"><expr pos:start="493:43" pos:end="493:53"><name pos:start="493:43" pos:end="493:53">CPUX86State</name></expr></argument>,<argument pos:start="493:55" pos:end="493:78"><expr pos:start="493:55" pos:end="493:78"><name pos:start="493:55" pos:end="493:65"><name pos:start="493:55" pos:end="493:60">fpregs</name><index pos:start="493:61" pos:end="493:65">[<expr pos:start="493:62" pos:end="493:64"><name pos:start="493:62" pos:end="493:64">reg</name></expr>]</index></name><operator pos:start="493:66" pos:end="493:66">.</operator><call pos:start="493:67" pos:end="493:78"><name pos:start="493:67" pos:end="493:75"><name pos:start="493:67" pos:end="493:69">mmx</name><operator pos:start="493:70" pos:end="493:70">.</operator><name pos:start="493:71" pos:end="493:75">MMX_L</name></name><argument_list pos:start="493:76" pos:end="493:78">(<argument pos:start="493:77" pos:end="493:77"><expr pos:start="493:77" pos:end="493:77"><literal type="number" pos:start="493:77" pos:end="493:77">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="495:17" pos:end="495:62"><expr pos:start="495:17" pos:end="495:61"><call pos:start="495:17" pos:end="495:61"><name pos:start="495:17" pos:end="495:30">gen_ldst_modrm</name><argument_list pos:start="495:31" pos:end="495:61">(<argument pos:start="495:32" pos:end="495:32"><expr pos:start="495:32" pos:end="495:32"><name pos:start="495:32" pos:end="495:32">s</name></expr></argument>, <argument pos:start="495:35" pos:end="495:39"><expr pos:start="495:35" pos:end="495:39"><name pos:start="495:35" pos:end="495:39">modrm</name></expr></argument>, <argument pos:start="495:42" pos:end="495:48"><expr pos:start="495:42" pos:end="495:48"><name pos:start="495:42" pos:end="495:48">OT_LONG</name></expr></argument>, <argument pos:start="495:51" pos:end="495:57"><expr pos:start="495:51" pos:end="495:57"><name pos:start="495:51" pos:end="495:57">OR_TMP0</name></expr></argument>, <argument pos:start="495:60" pos:end="495:60"><expr pos:start="495:60" pos:end="495:60"><literal type="number" pos:start="495:60" pos:end="495:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="499:13" pos:end="499:18">break;</break>

        <case pos:start="501:9" pos:end="504:0">case <expr pos:start="501:14" pos:end="501:18"><literal type="number" pos:start="501:14" pos:end="501:18">0x17e</literal></expr>:</case> <comment type="block" pos:start="501:21" pos:end="501:38">/* movd ea, xmm */</comment>

<cpp:ifdef pos:start="503:1" pos:end="503:20">#<cpp:directive pos:start="503:2" pos:end="503:6">ifdef</cpp:directive> <name pos:start="503:8" pos:end="503:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="505:13" pos:end="525:13"><if pos:start="505:13" pos:end="513:13">if <condition pos:start="505:16" pos:end="505:30">(<expr pos:start="505:17" pos:end="505:29"><name pos:start="505:17" pos:end="505:24"><name pos:start="505:17" pos:end="505:17">s</name><operator pos:start="505:18" pos:end="505:19">-&gt;</operator><name pos:start="505:20" pos:end="505:24">dflag</name></name> <operator pos:start="505:26" pos:end="505:27">==</operator> <literal type="number" pos:start="505:29" pos:end="505:29">2</literal></expr>)</condition> <block pos:start="505:32" pos:end="513:13">{<block_content pos:start="507:17" pos:end="511:62">

                <expr_stmt pos:start="507:17" pos:end="509:77"><expr pos:start="507:17" pos:end="509:76"><call pos:start="507:17" pos:end="509:76"><name pos:start="507:17" pos:end="507:30">tcg_gen_ld_i64</name><argument_list pos:start="507:31" pos:end="509:76">(<argument pos:start="507:32" pos:end="507:39"><expr pos:start="507:32" pos:end="507:39"><name pos:start="507:32" pos:end="507:39"><name pos:start="507:32" pos:end="507:36">cpu_T</name><index pos:start="507:37" pos:end="507:39">[<expr pos:start="507:38" pos:end="507:38"><literal type="number" pos:start="507:38" pos:end="507:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="507:42" pos:end="507:48"><expr pos:start="507:42" pos:end="507:48"><name pos:start="507:42" pos:end="507:48">cpu_env</name></expr></argument>, 

                               <argument pos:start="509:32" pos:end="509:75"><expr pos:start="509:32" pos:end="509:75"><call pos:start="509:32" pos:end="509:75"><name pos:start="509:32" pos:end="509:39">offsetof</name><argument_list pos:start="509:40" pos:end="509:75">(<argument pos:start="509:41" pos:end="509:51"><expr pos:start="509:41" pos:end="509:51"><name pos:start="509:41" pos:end="509:51">CPUX86State</name></expr></argument>,<argument pos:start="509:53" pos:end="509:74"><expr pos:start="509:53" pos:end="509:74"><name pos:start="509:53" pos:end="509:65"><name pos:start="509:53" pos:end="509:60">xmm_regs</name><index pos:start="509:61" pos:end="509:65">[<expr pos:start="509:62" pos:end="509:64"><name pos:start="509:62" pos:end="509:64">reg</name></expr>]</index></name><operator pos:start="509:66" pos:end="509:66">.</operator><call pos:start="509:67" pos:end="509:74"><name pos:start="509:67" pos:end="509:71">XMM_Q</name><argument_list pos:start="509:72" pos:end="509:74">(<argument pos:start="509:73" pos:end="509:73"><expr pos:start="509:73" pos:end="509:73"><literal type="number" pos:start="509:73" pos:end="509:73">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="511:17" pos:end="511:62"><expr pos:start="511:17" pos:end="511:61"><call pos:start="511:17" pos:end="511:61"><name pos:start="511:17" pos:end="511:30">gen_ldst_modrm</name><argument_list pos:start="511:31" pos:end="511:61">(<argument pos:start="511:32" pos:end="511:32"><expr pos:start="511:32" pos:end="511:32"><name pos:start="511:32" pos:end="511:32">s</name></expr></argument>, <argument pos:start="511:35" pos:end="511:39"><expr pos:start="511:35" pos:end="511:39"><name pos:start="511:35" pos:end="511:39">modrm</name></expr></argument>, <argument pos:start="511:42" pos:end="511:48"><expr pos:start="511:42" pos:end="511:48"><name pos:start="511:42" pos:end="511:48">OT_QUAD</name></expr></argument>, <argument pos:start="511:51" pos:end="511:57"><expr pos:start="511:51" pos:end="511:57"><name pos:start="511:51" pos:end="511:57">OR_TMP0</name></expr></argument>, <argument pos:start="511:60" pos:end="511:60"><expr pos:start="511:60" pos:end="511:60"><literal type="number" pos:start="511:60" pos:end="511:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="513:15" pos:end="525:13">else

<cpp:endif pos:start="515:1" pos:end="515:6">#<cpp:directive pos:start="515:2" pos:end="515:6">endif</cpp:directive></cpp:endif>

            <block pos:start="517:13" pos:end="525:13">{<block_content pos:start="519:17" pos:end="523:62">

                <expr_stmt pos:start="519:17" pos:end="521:79"><expr pos:start="519:17" pos:end="521:78"><call pos:start="519:17" pos:end="521:78"><name pos:start="519:17" pos:end="519:32">tcg_gen_ld32u_tl</name><argument_list pos:start="519:33" pos:end="521:78">(<argument pos:start="519:34" pos:end="519:41"><expr pos:start="519:34" pos:end="519:41"><name pos:start="519:34" pos:end="519:41"><name pos:start="519:34" pos:end="519:38">cpu_T</name><index pos:start="519:39" pos:end="519:41">[<expr pos:start="519:40" pos:end="519:40"><literal type="number" pos:start="519:40" pos:end="519:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="519:44" pos:end="519:50"><expr pos:start="519:44" pos:end="519:50"><name pos:start="519:44" pos:end="519:50">cpu_env</name></expr></argument>, 

                                 <argument pos:start="521:34" pos:end="521:77"><expr pos:start="521:34" pos:end="521:77"><call pos:start="521:34" pos:end="521:77"><name pos:start="521:34" pos:end="521:41">offsetof</name><argument_list pos:start="521:42" pos:end="521:77">(<argument pos:start="521:43" pos:end="521:53"><expr pos:start="521:43" pos:end="521:53"><name pos:start="521:43" pos:end="521:53">CPUX86State</name></expr></argument>,<argument pos:start="521:55" pos:end="521:76"><expr pos:start="521:55" pos:end="521:76"><name pos:start="521:55" pos:end="521:67"><name pos:start="521:55" pos:end="521:62">xmm_regs</name><index pos:start="521:63" pos:end="521:67">[<expr pos:start="521:64" pos:end="521:66"><name pos:start="521:64" pos:end="521:66">reg</name></expr>]</index></name><operator pos:start="521:68" pos:end="521:68">.</operator><call pos:start="521:69" pos:end="521:76"><name pos:start="521:69" pos:end="521:73">XMM_L</name><argument_list pos:start="521:74" pos:end="521:76">(<argument pos:start="521:75" pos:end="521:75"><expr pos:start="521:75" pos:end="521:75"><literal type="number" pos:start="521:75" pos:end="521:75">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="523:17" pos:end="523:62"><expr pos:start="523:17" pos:end="523:61"><call pos:start="523:17" pos:end="523:61"><name pos:start="523:17" pos:end="523:30">gen_ldst_modrm</name><argument_list pos:start="523:31" pos:end="523:61">(<argument pos:start="523:32" pos:end="523:32"><expr pos:start="523:32" pos:end="523:32"><name pos:start="523:32" pos:end="523:32">s</name></expr></argument>, <argument pos:start="523:35" pos:end="523:39"><expr pos:start="523:35" pos:end="523:39"><name pos:start="523:35" pos:end="523:39">modrm</name></expr></argument>, <argument pos:start="523:42" pos:end="523:48"><expr pos:start="523:42" pos:end="523:48"><name pos:start="523:42" pos:end="523:48">OT_LONG</name></expr></argument>, <argument pos:start="523:51" pos:end="523:57"><expr pos:start="523:51" pos:end="523:57"><name pos:start="523:51" pos:end="523:57">OR_TMP0</name></expr></argument>, <argument pos:start="523:60" pos:end="523:60"><expr pos:start="523:60" pos:end="523:60"><literal type="number" pos:start="523:60" pos:end="523:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="527:13" pos:end="527:18">break;</break>

        <case pos:start="529:9" pos:end="529:19">case <expr pos:start="529:14" pos:end="529:18"><literal type="number" pos:start="529:14" pos:end="529:18">0x27e</literal></expr>:</case> <comment type="block" pos:start="529:21" pos:end="529:38">/* movq xmm, ea */</comment>

            <if_stmt pos:start="531:13" pos:end="545:13"><if pos:start="531:13" pos:end="537:13">if <condition pos:start="531:16" pos:end="531:25">(<expr pos:start="531:17" pos:end="531:24"><name pos:start="531:17" pos:end="531:19">mod</name> <operator pos:start="531:21" pos:end="531:22">!=</operator> <literal type="number" pos:start="531:24" pos:end="531:24">3</literal></expr>)</condition> <block pos:start="531:27" pos:end="537:13">{<block_content pos:start="533:17" pos:end="535:91">

                <expr_stmt pos:start="533:17" pos:end="533:65"><expr pos:start="533:17" pos:end="533:64"><call pos:start="533:17" pos:end="533:64"><name pos:start="533:17" pos:end="533:29">gen_lea_modrm</name><argument_list pos:start="533:30" pos:end="533:64">(<argument pos:start="533:31" pos:end="533:31"><expr pos:start="533:31" pos:end="533:31"><name pos:start="533:31" pos:end="533:31">s</name></expr></argument>, <argument pos:start="533:34" pos:end="533:38"><expr pos:start="533:34" pos:end="533:38"><name pos:start="533:34" pos:end="533:38">modrm</name></expr></argument>, <argument pos:start="533:41" pos:end="533:49"><expr pos:start="533:41" pos:end="533:49"><operator pos:start="533:41" pos:end="533:41">&amp;</operator><name pos:start="533:42" pos:end="533:49">reg_addr</name></expr></argument>, <argument pos:start="533:52" pos:end="533:63"><expr pos:start="533:52" pos:end="533:63"><operator pos:start="533:52" pos:end="533:52">&amp;</operator><name pos:start="533:53" pos:end="533:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="535:17" pos:end="535:91"><expr pos:start="535:17" pos:end="535:90"><call pos:start="535:17" pos:end="535:90"><name pos:start="535:17" pos:end="535:30">gen_ldq_env_A0</name><argument_list pos:start="535:31" pos:end="535:90">(<argument pos:start="535:32" pos:end="535:43"><expr pos:start="535:32" pos:end="535:43"><name pos:start="535:32" pos:end="535:43"><name pos:start="535:32" pos:end="535:32">s</name><operator pos:start="535:33" pos:end="535:34">-&gt;</operator><name pos:start="535:35" pos:end="535:43">mem_index</name></name></expr></argument>, <argument pos:start="535:46" pos:end="535:89"><expr pos:start="535:46" pos:end="535:89"><call pos:start="535:46" pos:end="535:89"><name pos:start="535:46" pos:end="535:53">offsetof</name><argument_list pos:start="535:54" pos:end="535:89">(<argument pos:start="535:55" pos:end="535:65"><expr pos:start="535:55" pos:end="535:65"><name pos:start="535:55" pos:end="535:65">CPUX86State</name></expr></argument>,<argument pos:start="535:67" pos:end="535:88"><expr pos:start="535:67" pos:end="535:88"><name pos:start="535:67" pos:end="535:79"><name pos:start="535:67" pos:end="535:74">xmm_regs</name><index pos:start="535:75" pos:end="535:79">[<expr pos:start="535:76" pos:end="535:78"><name pos:start="535:76" pos:end="535:78">reg</name></expr>]</index></name><operator pos:start="535:80" pos:end="535:80">.</operator><call pos:start="535:81" pos:end="535:88"><name pos:start="535:81" pos:end="535:85">XMM_Q</name><argument_list pos:start="535:86" pos:end="535:88">(<argument pos:start="535:87" pos:end="535:87"><expr pos:start="535:87" pos:end="535:87"><literal type="number" pos:start="535:87" pos:end="535:87">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="537:15" pos:end="545:13">else <block pos:start="537:20" pos:end="545:13">{<block_content pos:start="539:17" pos:end="543:73">

                <expr_stmt pos:start="539:17" pos:end="539:44"><expr pos:start="539:17" pos:end="539:43"><name pos:start="539:17" pos:end="539:18">rm</name> <operator pos:start="539:20" pos:end="539:20">=</operator> <operator pos:start="539:22" pos:end="539:22">(</operator><name pos:start="539:23" pos:end="539:27">modrm</name> <operator pos:start="539:29" pos:end="539:29">&amp;</operator> <literal type="number" pos:start="539:31" pos:end="539:31">7</literal><operator pos:start="539:32" pos:end="539:32">)</operator> <operator pos:start="539:34" pos:end="539:34">|</operator> <call pos:start="539:36" pos:end="539:43"><name pos:start="539:36" pos:end="539:40">REX_B</name><argument_list pos:start="539:41" pos:end="539:43">(<argument pos:start="539:42" pos:end="539:42"><expr pos:start="539:42" pos:end="539:42"><name pos:start="539:42" pos:end="539:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="541:17" pos:end="543:73"><expr pos:start="541:17" pos:end="543:72"><call pos:start="541:17" pos:end="543:72"><name pos:start="541:17" pos:end="541:27">gen_op_movq</name><argument_list pos:start="541:28" pos:end="543:72">(<argument pos:start="541:29" pos:end="541:72"><expr pos:start="541:29" pos:end="541:72"><call pos:start="541:29" pos:end="541:72"><name pos:start="541:29" pos:end="541:36">offsetof</name><argument_list pos:start="541:37" pos:end="541:72">(<argument pos:start="541:38" pos:end="541:48"><expr pos:start="541:38" pos:end="541:48"><name pos:start="541:38" pos:end="541:48">CPUX86State</name></expr></argument>,<argument pos:start="541:50" pos:end="541:71"><expr pos:start="541:50" pos:end="541:71"><name pos:start="541:50" pos:end="541:62"><name pos:start="541:50" pos:end="541:57">xmm_regs</name><index pos:start="541:58" pos:end="541:62">[<expr pos:start="541:59" pos:end="541:61"><name pos:start="541:59" pos:end="541:61">reg</name></expr>]</index></name><operator pos:start="541:63" pos:end="541:63">.</operator><call pos:start="541:64" pos:end="541:71"><name pos:start="541:64" pos:end="541:68">XMM_Q</name><argument_list pos:start="541:69" pos:end="541:71">(<argument pos:start="541:70" pos:end="541:70"><expr pos:start="541:70" pos:end="541:70"><literal type="number" pos:start="541:70" pos:end="541:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="543:29" pos:end="543:71"><expr pos:start="543:29" pos:end="543:71"><call pos:start="543:29" pos:end="543:71"><name pos:start="543:29" pos:end="543:36">offsetof</name><argument_list pos:start="543:37" pos:end="543:71">(<argument pos:start="543:38" pos:end="543:48"><expr pos:start="543:38" pos:end="543:48"><name pos:start="543:38" pos:end="543:48">CPUX86State</name></expr></argument>,<argument pos:start="543:50" pos:end="543:70"><expr pos:start="543:50" pos:end="543:70"><name pos:start="543:50" pos:end="543:61"><name pos:start="543:50" pos:end="543:57">xmm_regs</name><index pos:start="543:58" pos:end="543:61">[<expr pos:start="543:59" pos:end="543:60"><name pos:start="543:59" pos:end="543:60">rm</name></expr>]</index></name><operator pos:start="543:62" pos:end="543:62">.</operator><call pos:start="543:63" pos:end="543:70"><name pos:start="543:63" pos:end="543:67">XMM_Q</name><argument_list pos:start="543:68" pos:end="543:70">(<argument pos:start="543:69" pos:end="543:69"><expr pos:start="543:69" pos:end="543:69"><literal type="number" pos:start="543:69" pos:end="543:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="547:13" pos:end="547:76"><expr pos:start="547:13" pos:end="547:75"><call pos:start="547:13" pos:end="547:75"><name pos:start="547:13" pos:end="547:29">gen_op_movq_env_0</name><argument_list pos:start="547:30" pos:end="547:75">(<argument pos:start="547:31" pos:end="547:74"><expr pos:start="547:31" pos:end="547:74"><call pos:start="547:31" pos:end="547:74"><name pos:start="547:31" pos:end="547:38">offsetof</name><argument_list pos:start="547:39" pos:end="547:74">(<argument pos:start="547:40" pos:end="547:50"><expr pos:start="547:40" pos:end="547:50"><name pos:start="547:40" pos:end="547:50">CPUX86State</name></expr></argument>,<argument pos:start="547:52" pos:end="547:73"><expr pos:start="547:52" pos:end="547:73"><name pos:start="547:52" pos:end="547:64"><name pos:start="547:52" pos:end="547:59">xmm_regs</name><index pos:start="547:60" pos:end="547:64">[<expr pos:start="547:61" pos:end="547:63"><name pos:start="547:61" pos:end="547:63">reg</name></expr>]</index></name><operator pos:start="547:65" pos:end="547:65">.</operator><call pos:start="547:66" pos:end="547:73"><name pos:start="547:66" pos:end="547:70">XMM_Q</name><argument_list pos:start="547:71" pos:end="547:73">(<argument pos:start="547:72" pos:end="547:72"><expr pos:start="547:72" pos:end="547:72"><literal type="number" pos:start="547:72" pos:end="547:72">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="549:13" pos:end="549:18">break;</break>

        <case pos:start="551:9" pos:end="551:18">case <expr pos:start="551:14" pos:end="551:17"><literal type="number" pos:start="551:14" pos:end="551:17">0x7f</literal></expr>:</case> <comment type="block" pos:start="551:20" pos:end="551:36">/* movq ea, mm */</comment>

            <if_stmt pos:start="553:13" pos:end="567:13"><if pos:start="553:13" pos:end="559:13">if <condition pos:start="553:16" pos:end="553:25">(<expr pos:start="553:17" pos:end="553:24"><name pos:start="553:17" pos:end="553:19">mod</name> <operator pos:start="553:21" pos:end="553:22">!=</operator> <literal type="number" pos:start="553:24" pos:end="553:24">3</literal></expr>)</condition> <block pos:start="553:27" pos:end="559:13">{<block_content pos:start="555:17" pos:end="557:84">

                <expr_stmt pos:start="555:17" pos:end="555:65"><expr pos:start="555:17" pos:end="555:64"><call pos:start="555:17" pos:end="555:64"><name pos:start="555:17" pos:end="555:29">gen_lea_modrm</name><argument_list pos:start="555:30" pos:end="555:64">(<argument pos:start="555:31" pos:end="555:31"><expr pos:start="555:31" pos:end="555:31"><name pos:start="555:31" pos:end="555:31">s</name></expr></argument>, <argument pos:start="555:34" pos:end="555:38"><expr pos:start="555:34" pos:end="555:38"><name pos:start="555:34" pos:end="555:38">modrm</name></expr></argument>, <argument pos:start="555:41" pos:end="555:49"><expr pos:start="555:41" pos:end="555:49"><operator pos:start="555:41" pos:end="555:41">&amp;</operator><name pos:start="555:42" pos:end="555:49">reg_addr</name></expr></argument>, <argument pos:start="555:52" pos:end="555:63"><expr pos:start="555:52" pos:end="555:63"><operator pos:start="555:52" pos:end="555:52">&amp;</operator><name pos:start="555:53" pos:end="555:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="557:17" pos:end="557:84"><expr pos:start="557:17" pos:end="557:83"><call pos:start="557:17" pos:end="557:83"><name pos:start="557:17" pos:end="557:30">gen_stq_env_A0</name><argument_list pos:start="557:31" pos:end="557:83">(<argument pos:start="557:32" pos:end="557:43"><expr pos:start="557:32" pos:end="557:43"><name pos:start="557:32" pos:end="557:43"><name pos:start="557:32" pos:end="557:32">s</name><operator pos:start="557:33" pos:end="557:34">-&gt;</operator><name pos:start="557:35" pos:end="557:43">mem_index</name></name></expr></argument>, <argument pos:start="557:46" pos:end="557:82"><expr pos:start="557:46" pos:end="557:82"><call pos:start="557:46" pos:end="557:82"><name pos:start="557:46" pos:end="557:53">offsetof</name><argument_list pos:start="557:54" pos:end="557:82">(<argument pos:start="557:55" pos:end="557:65"><expr pos:start="557:55" pos:end="557:65"><name pos:start="557:55" pos:end="557:65">CPUX86State</name></expr></argument>,<argument pos:start="557:67" pos:end="557:81"><expr pos:start="557:67" pos:end="557:81"><name pos:start="557:67" pos:end="557:77"><name pos:start="557:67" pos:end="557:72">fpregs</name><index pos:start="557:73" pos:end="557:77">[<expr pos:start="557:74" pos:end="557:76"><name pos:start="557:74" pos:end="557:76">reg</name></expr>]</index></name><operator pos:start="557:78" pos:end="557:78">.</operator><name pos:start="557:79" pos:end="557:81">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="559:15" pos:end="567:13">else <block pos:start="559:20" pos:end="567:13">{<block_content pos:start="561:17" pos:end="565:67">

                <expr_stmt pos:start="561:17" pos:end="561:33"><expr pos:start="561:17" pos:end="561:32"><name pos:start="561:17" pos:end="561:18">rm</name> <operator pos:start="561:20" pos:end="561:20">=</operator> <operator pos:start="561:22" pos:end="561:22">(</operator><name pos:start="561:23" pos:end="561:27">modrm</name> <operator pos:start="561:29" pos:end="561:29">&amp;</operator> <literal type="number" pos:start="561:31" pos:end="561:31">7</literal><operator pos:start="561:32" pos:end="561:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="563:17" pos:end="565:67"><expr pos:start="563:17" pos:end="565:66"><call pos:start="563:17" pos:end="565:66"><name pos:start="563:17" pos:end="563:27">gen_op_movq</name><argument_list pos:start="563:28" pos:end="565:66">(<argument pos:start="563:29" pos:end="563:64"><expr pos:start="563:29" pos:end="563:64"><call pos:start="563:29" pos:end="563:64"><name pos:start="563:29" pos:end="563:36">offsetof</name><argument_list pos:start="563:37" pos:end="563:64">(<argument pos:start="563:38" pos:end="563:48"><expr pos:start="563:38" pos:end="563:48"><name pos:start="563:38" pos:end="563:48">CPUX86State</name></expr></argument>,<argument pos:start="563:50" pos:end="563:63"><expr pos:start="563:50" pos:end="563:63"><name pos:start="563:50" pos:end="563:59"><name pos:start="563:50" pos:end="563:55">fpregs</name><index pos:start="563:56" pos:end="563:59">[<expr pos:start="563:57" pos:end="563:58"><name pos:start="563:57" pos:end="563:58">rm</name></expr>]</index></name><operator pos:start="563:60" pos:end="563:60">.</operator><name pos:start="563:61" pos:end="563:63">mmx</name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="565:29" pos:end="565:65"><expr pos:start="565:29" pos:end="565:65"><call pos:start="565:29" pos:end="565:65"><name pos:start="565:29" pos:end="565:36">offsetof</name><argument_list pos:start="565:37" pos:end="565:65">(<argument pos:start="565:38" pos:end="565:48"><expr pos:start="565:38" pos:end="565:48"><name pos:start="565:38" pos:end="565:48">CPUX86State</name></expr></argument>,<argument pos:start="565:50" pos:end="565:64"><expr pos:start="565:50" pos:end="565:64"><name pos:start="565:50" pos:end="565:60"><name pos:start="565:50" pos:end="565:55">fpregs</name><index pos:start="565:56" pos:end="565:60">[<expr pos:start="565:57" pos:end="565:59"><name pos:start="565:57" pos:end="565:59">reg</name></expr>]</index></name><operator pos:start="565:61" pos:end="565:61">.</operator><name pos:start="565:62" pos:end="565:64">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="569:13" pos:end="569:18">break;</break>

        <case pos:start="571:9" pos:end="571:19">case <expr pos:start="571:14" pos:end="571:18"><literal type="number" pos:start="571:14" pos:end="571:18">0x011</literal></expr>:</case> <comment type="block" pos:start="571:21" pos:end="571:32">/* movups */</comment>

        <case pos:start="573:9" pos:end="573:19">case <expr pos:start="573:14" pos:end="573:18"><literal type="number" pos:start="573:14" pos:end="573:18">0x111</literal></expr>:</case> <comment type="block" pos:start="573:21" pos:end="573:32">/* movupd */</comment>

        <case pos:start="575:9" pos:end="575:19">case <expr pos:start="575:14" pos:end="575:18"><literal type="number" pos:start="575:14" pos:end="575:18">0x029</literal></expr>:</case> <comment type="block" pos:start="575:21" pos:end="575:32">/* movaps */</comment>

        <case pos:start="577:9" pos:end="577:19">case <expr pos:start="577:14" pos:end="577:18"><literal type="number" pos:start="577:14" pos:end="577:18">0x129</literal></expr>:</case> <comment type="block" pos:start="577:21" pos:end="577:32">/* movapd */</comment>

        <case pos:start="579:9" pos:end="579:19">case <expr pos:start="579:14" pos:end="579:18"><literal type="number" pos:start="579:14" pos:end="579:18">0x17f</literal></expr>:</case> <comment type="block" pos:start="579:21" pos:end="579:40">/* movdqa ea, xmm */</comment>

        <case pos:start="581:9" pos:end="581:19">case <expr pos:start="581:14" pos:end="581:18"><literal type="number" pos:start="581:14" pos:end="581:18">0x27f</literal></expr>:</case> <comment type="block" pos:start="581:21" pos:end="581:40">/* movdqu ea, xmm */</comment>

            <if_stmt pos:start="583:13" pos:end="597:13"><if pos:start="583:13" pos:end="589:13">if <condition pos:start="583:16" pos:end="583:25">(<expr pos:start="583:17" pos:end="583:24"><name pos:start="583:17" pos:end="583:19">mod</name> <operator pos:start="583:21" pos:end="583:22">!=</operator> <literal type="number" pos:start="583:24" pos:end="583:24">3</literal></expr>)</condition> <block pos:start="583:27" pos:end="589:13">{<block_content pos:start="585:17" pos:end="587:82">

                <expr_stmt pos:start="585:17" pos:end="585:65"><expr pos:start="585:17" pos:end="585:64"><call pos:start="585:17" pos:end="585:64"><name pos:start="585:17" pos:end="585:29">gen_lea_modrm</name><argument_list pos:start="585:30" pos:end="585:64">(<argument pos:start="585:31" pos:end="585:31"><expr pos:start="585:31" pos:end="585:31"><name pos:start="585:31" pos:end="585:31">s</name></expr></argument>, <argument pos:start="585:34" pos:end="585:38"><expr pos:start="585:34" pos:end="585:38"><name pos:start="585:34" pos:end="585:38">modrm</name></expr></argument>, <argument pos:start="585:41" pos:end="585:49"><expr pos:start="585:41" pos:end="585:49"><operator pos:start="585:41" pos:end="585:41">&amp;</operator><name pos:start="585:42" pos:end="585:49">reg_addr</name></expr></argument>, <argument pos:start="585:52" pos:end="585:63"><expr pos:start="585:52" pos:end="585:63"><operator pos:start="585:52" pos:end="585:52">&amp;</operator><name pos:start="585:53" pos:end="585:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="587:17" pos:end="587:82"><expr pos:start="587:17" pos:end="587:81"><call pos:start="587:17" pos:end="587:81"><name pos:start="587:17" pos:end="587:30">gen_sto_env_A0</name><argument_list pos:start="587:31" pos:end="587:81">(<argument pos:start="587:32" pos:end="587:43"><expr pos:start="587:32" pos:end="587:43"><name pos:start="587:32" pos:end="587:43"><name pos:start="587:32" pos:end="587:32">s</name><operator pos:start="587:33" pos:end="587:34">-&gt;</operator><name pos:start="587:35" pos:end="587:43">mem_index</name></name></expr></argument>, <argument pos:start="587:46" pos:end="587:80"><expr pos:start="587:46" pos:end="587:80"><call pos:start="587:46" pos:end="587:80"><name pos:start="587:46" pos:end="587:53">offsetof</name><argument_list pos:start="587:54" pos:end="587:80">(<argument pos:start="587:55" pos:end="587:65"><expr pos:start="587:55" pos:end="587:65"><name pos:start="587:55" pos:end="587:65">CPUX86State</name></expr></argument>,<argument pos:start="587:67" pos:end="587:79"><expr pos:start="587:67" pos:end="587:79"><name pos:start="587:67" pos:end="587:79"><name pos:start="587:67" pos:end="587:74">xmm_regs</name><index pos:start="587:75" pos:end="587:79">[<expr pos:start="587:76" pos:end="587:78"><name pos:start="587:76" pos:end="587:78">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="589:15" pos:end="597:13">else <block pos:start="589:20" pos:end="597:13">{<block_content pos:start="591:17" pos:end="595:65">

                <expr_stmt pos:start="591:17" pos:end="591:44"><expr pos:start="591:17" pos:end="591:43"><name pos:start="591:17" pos:end="591:18">rm</name> <operator pos:start="591:20" pos:end="591:20">=</operator> <operator pos:start="591:22" pos:end="591:22">(</operator><name pos:start="591:23" pos:end="591:27">modrm</name> <operator pos:start="591:29" pos:end="591:29">&amp;</operator> <literal type="number" pos:start="591:31" pos:end="591:31">7</literal><operator pos:start="591:32" pos:end="591:32">)</operator> <operator pos:start="591:34" pos:end="591:34">|</operator> <call pos:start="591:36" pos:end="591:43"><name pos:start="591:36" pos:end="591:40">REX_B</name><argument_list pos:start="591:41" pos:end="591:43">(<argument pos:start="591:42" pos:end="591:42"><expr pos:start="591:42" pos:end="591:42"><name pos:start="591:42" pos:end="591:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="593:17" pos:end="595:65"><expr pos:start="593:17" pos:end="595:64"><call pos:start="593:17" pos:end="595:64"><name pos:start="593:17" pos:end="593:27">gen_op_movo</name><argument_list pos:start="593:28" pos:end="595:64">(<argument pos:start="593:29" pos:end="593:62"><expr pos:start="593:29" pos:end="593:62"><call pos:start="593:29" pos:end="593:62"><name pos:start="593:29" pos:end="593:36">offsetof</name><argument_list pos:start="593:37" pos:end="593:62">(<argument pos:start="593:38" pos:end="593:48"><expr pos:start="593:38" pos:end="593:48"><name pos:start="593:38" pos:end="593:48">CPUX86State</name></expr></argument>,<argument pos:start="593:50" pos:end="593:61"><expr pos:start="593:50" pos:end="593:61"><name pos:start="593:50" pos:end="593:61"><name pos:start="593:50" pos:end="593:57">xmm_regs</name><index pos:start="593:58" pos:end="593:61">[<expr pos:start="593:59" pos:end="593:60"><name pos:start="593:59" pos:end="593:60">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="595:29" pos:end="595:63"><expr pos:start="595:29" pos:end="595:63"><call pos:start="595:29" pos:end="595:63"><name pos:start="595:29" pos:end="595:36">offsetof</name><argument_list pos:start="595:37" pos:end="595:63">(<argument pos:start="595:38" pos:end="595:48"><expr pos:start="595:38" pos:end="595:48"><name pos:start="595:38" pos:end="595:48">CPUX86State</name></expr></argument>,<argument pos:start="595:50" pos:end="595:62"><expr pos:start="595:50" pos:end="595:62"><name pos:start="595:50" pos:end="595:62"><name pos:start="595:50" pos:end="595:57">xmm_regs</name><index pos:start="595:58" pos:end="595:62">[<expr pos:start="595:59" pos:end="595:61"><name pos:start="595:59" pos:end="595:61">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="599:13" pos:end="599:18">break;</break>

        <case pos:start="601:9" pos:end="601:19">case <expr pos:start="601:14" pos:end="601:18"><literal type="number" pos:start="601:14" pos:end="601:18">0x211</literal></expr>:</case> <comment type="block" pos:start="601:21" pos:end="601:39">/* movss ea, xmm */</comment>

            <if_stmt pos:start="603:13" pos:end="619:13"><if pos:start="603:13" pos:end="611:13">if <condition pos:start="603:16" pos:end="603:25">(<expr pos:start="603:17" pos:end="603:24"><name pos:start="603:17" pos:end="603:19">mod</name> <operator pos:start="603:21" pos:end="603:22">!=</operator> <literal type="number" pos:start="603:24" pos:end="603:24">3</literal></expr>)</condition> <block pos:start="603:27" pos:end="611:13">{<block_content pos:start="605:17" pos:end="609:56">

                <expr_stmt pos:start="605:17" pos:end="605:65"><expr pos:start="605:17" pos:end="605:64"><call pos:start="605:17" pos:end="605:64"><name pos:start="605:17" pos:end="605:29">gen_lea_modrm</name><argument_list pos:start="605:30" pos:end="605:64">(<argument pos:start="605:31" pos:end="605:31"><expr pos:start="605:31" pos:end="605:31"><name pos:start="605:31" pos:end="605:31">s</name></expr></argument>, <argument pos:start="605:34" pos:end="605:38"><expr pos:start="605:34" pos:end="605:38"><name pos:start="605:34" pos:end="605:38">modrm</name></expr></argument>, <argument pos:start="605:41" pos:end="605:49"><expr pos:start="605:41" pos:end="605:49"><operator pos:start="605:41" pos:end="605:41">&amp;</operator><name pos:start="605:42" pos:end="605:49">reg_addr</name></expr></argument>, <argument pos:start="605:52" pos:end="605:63"><expr pos:start="605:52" pos:end="605:63"><operator pos:start="605:52" pos:end="605:52">&amp;</operator><name pos:start="605:53" pos:end="605:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="607:17" pos:end="607:98"><expr pos:start="607:17" pos:end="607:97"><call pos:start="607:17" pos:end="607:97"><name pos:start="607:17" pos:end="607:32">tcg_gen_ld32u_tl</name><argument_list pos:start="607:33" pos:end="607:97">(<argument pos:start="607:34" pos:end="607:41"><expr pos:start="607:34" pos:end="607:41"><name pos:start="607:34" pos:end="607:41"><name pos:start="607:34" pos:end="607:38">cpu_T</name><index pos:start="607:39" pos:end="607:41">[<expr pos:start="607:40" pos:end="607:40"><literal type="number" pos:start="607:40" pos:end="607:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="607:44" pos:end="607:50"><expr pos:start="607:44" pos:end="607:50"><name pos:start="607:44" pos:end="607:50">cpu_env</name></expr></argument>, <argument pos:start="607:53" pos:end="607:96"><expr pos:start="607:53" pos:end="607:96"><call pos:start="607:53" pos:end="607:96"><name pos:start="607:53" pos:end="607:60">offsetof</name><argument_list pos:start="607:61" pos:end="607:96">(<argument pos:start="607:62" pos:end="607:72"><expr pos:start="607:62" pos:end="607:72"><name pos:start="607:62" pos:end="607:72">CPUX86State</name></expr></argument>,<argument pos:start="607:74" pos:end="607:95"><expr pos:start="607:74" pos:end="607:95"><name pos:start="607:74" pos:end="607:86"><name pos:start="607:74" pos:end="607:81">xmm_regs</name><index pos:start="607:82" pos:end="607:86">[<expr pos:start="607:83" pos:end="607:85"><name pos:start="607:83" pos:end="607:85">reg</name></expr>]</index></name><operator pos:start="607:87" pos:end="607:87">.</operator><call pos:start="607:88" pos:end="607:95"><name pos:start="607:88" pos:end="607:92">XMM_L</name><argument_list pos:start="607:93" pos:end="607:95">(<argument pos:start="607:94" pos:end="607:94"><expr pos:start="607:94" pos:end="607:94"><literal type="number" pos:start="607:94" pos:end="607:94">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="609:17" pos:end="609:56"><expr pos:start="609:17" pos:end="609:55"><call pos:start="609:17" pos:end="609:55"><name pos:start="609:17" pos:end="609:31">gen_op_st_T0_A0</name><argument_list pos:start="609:32" pos:end="609:55">(<argument pos:start="609:33" pos:end="609:54"><expr pos:start="609:33" pos:end="609:54"><name pos:start="609:33" pos:end="609:39">OT_LONG</name> <operator pos:start="609:41" pos:end="609:41">+</operator> <name pos:start="609:43" pos:end="609:54"><name pos:start="609:43" pos:end="609:43">s</name><operator pos:start="609:44" pos:end="609:45">-&gt;</operator><name pos:start="609:46" pos:end="609:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="611:15" pos:end="619:13">else <block pos:start="611:20" pos:end="619:13">{<block_content pos:start="613:17" pos:end="617:74">

                <expr_stmt pos:start="613:17" pos:end="613:44"><expr pos:start="613:17" pos:end="613:43"><name pos:start="613:17" pos:end="613:18">rm</name> <operator pos:start="613:20" pos:end="613:20">=</operator> <operator pos:start="613:22" pos:end="613:22">(</operator><name pos:start="613:23" pos:end="613:27">modrm</name> <operator pos:start="613:29" pos:end="613:29">&amp;</operator> <literal type="number" pos:start="613:31" pos:end="613:31">7</literal><operator pos:start="613:32" pos:end="613:32">)</operator> <operator pos:start="613:34" pos:end="613:34">|</operator> <call pos:start="613:36" pos:end="613:43"><name pos:start="613:36" pos:end="613:40">REX_B</name><argument_list pos:start="613:41" pos:end="613:43">(<argument pos:start="613:42" pos:end="613:42"><expr pos:start="613:42" pos:end="613:42"><name pos:start="613:42" pos:end="613:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="615:17" pos:end="617:74"><expr pos:start="615:17" pos:end="617:73"><call pos:start="615:17" pos:end="617:73"><name pos:start="615:17" pos:end="615:27">gen_op_movl</name><argument_list pos:start="615:28" pos:end="617:73">(<argument pos:start="615:29" pos:end="615:71"><expr pos:start="615:29" pos:end="615:71"><call pos:start="615:29" pos:end="615:71"><name pos:start="615:29" pos:end="615:36">offsetof</name><argument_list pos:start="615:37" pos:end="615:71">(<argument pos:start="615:38" pos:end="615:48"><expr pos:start="615:38" pos:end="615:48"><name pos:start="615:38" pos:end="615:48">CPUX86State</name></expr></argument>,<argument pos:start="615:50" pos:end="615:70"><expr pos:start="615:50" pos:end="615:70"><name pos:start="615:50" pos:end="615:61"><name pos:start="615:50" pos:end="615:57">xmm_regs</name><index pos:start="615:58" pos:end="615:61">[<expr pos:start="615:59" pos:end="615:60"><name pos:start="615:59" pos:end="615:60">rm</name></expr>]</index></name><operator pos:start="615:62" pos:end="615:62">.</operator><call pos:start="615:63" pos:end="615:70"><name pos:start="615:63" pos:end="615:67">XMM_L</name><argument_list pos:start="615:68" pos:end="615:70">(<argument pos:start="615:69" pos:end="615:69"><expr pos:start="615:69" pos:end="615:69"><literal type="number" pos:start="615:69" pos:end="615:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="617:29" pos:end="617:72"><expr pos:start="617:29" pos:end="617:72"><call pos:start="617:29" pos:end="617:72"><name pos:start="617:29" pos:end="617:36">offsetof</name><argument_list pos:start="617:37" pos:end="617:72">(<argument pos:start="617:38" pos:end="617:48"><expr pos:start="617:38" pos:end="617:48"><name pos:start="617:38" pos:end="617:48">CPUX86State</name></expr></argument>,<argument pos:start="617:50" pos:end="617:71"><expr pos:start="617:50" pos:end="617:71"><name pos:start="617:50" pos:end="617:62"><name pos:start="617:50" pos:end="617:57">xmm_regs</name><index pos:start="617:58" pos:end="617:62">[<expr pos:start="617:59" pos:end="617:61"><name pos:start="617:59" pos:end="617:61">reg</name></expr>]</index></name><operator pos:start="617:63" pos:end="617:63">.</operator><call pos:start="617:64" pos:end="617:71"><name pos:start="617:64" pos:end="617:68">XMM_L</name><argument_list pos:start="617:69" pos:end="617:71">(<argument pos:start="617:70" pos:end="617:70"><expr pos:start="617:70" pos:end="617:70"><literal type="number" pos:start="617:70" pos:end="617:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="621:13" pos:end="621:18">break;</break>

        <case pos:start="623:9" pos:end="623:19">case <expr pos:start="623:14" pos:end="623:18"><literal type="number" pos:start="623:14" pos:end="623:18">0x311</literal></expr>:</case> <comment type="block" pos:start="623:21" pos:end="623:39">/* movsd ea, xmm */</comment>

            <if_stmt pos:start="625:13" pos:end="639:13"><if pos:start="625:13" pos:end="631:13">if <condition pos:start="625:16" pos:end="625:25">(<expr pos:start="625:17" pos:end="625:24"><name pos:start="625:17" pos:end="625:19">mod</name> <operator pos:start="625:21" pos:end="625:22">!=</operator> <literal type="number" pos:start="625:24" pos:end="625:24">3</literal></expr>)</condition> <block pos:start="625:27" pos:end="631:13">{<block_content pos:start="627:17" pos:end="629:91">

                <expr_stmt pos:start="627:17" pos:end="627:65"><expr pos:start="627:17" pos:end="627:64"><call pos:start="627:17" pos:end="627:64"><name pos:start="627:17" pos:end="627:29">gen_lea_modrm</name><argument_list pos:start="627:30" pos:end="627:64">(<argument pos:start="627:31" pos:end="627:31"><expr pos:start="627:31" pos:end="627:31"><name pos:start="627:31" pos:end="627:31">s</name></expr></argument>, <argument pos:start="627:34" pos:end="627:38"><expr pos:start="627:34" pos:end="627:38"><name pos:start="627:34" pos:end="627:38">modrm</name></expr></argument>, <argument pos:start="627:41" pos:end="627:49"><expr pos:start="627:41" pos:end="627:49"><operator pos:start="627:41" pos:end="627:41">&amp;</operator><name pos:start="627:42" pos:end="627:49">reg_addr</name></expr></argument>, <argument pos:start="627:52" pos:end="627:63"><expr pos:start="627:52" pos:end="627:63"><operator pos:start="627:52" pos:end="627:52">&amp;</operator><name pos:start="627:53" pos:end="627:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="629:17" pos:end="629:91"><expr pos:start="629:17" pos:end="629:90"><call pos:start="629:17" pos:end="629:90"><name pos:start="629:17" pos:end="629:30">gen_stq_env_A0</name><argument_list pos:start="629:31" pos:end="629:90">(<argument pos:start="629:32" pos:end="629:43"><expr pos:start="629:32" pos:end="629:43"><name pos:start="629:32" pos:end="629:43"><name pos:start="629:32" pos:end="629:32">s</name><operator pos:start="629:33" pos:end="629:34">-&gt;</operator><name pos:start="629:35" pos:end="629:43">mem_index</name></name></expr></argument>, <argument pos:start="629:46" pos:end="629:89"><expr pos:start="629:46" pos:end="629:89"><call pos:start="629:46" pos:end="629:89"><name pos:start="629:46" pos:end="629:53">offsetof</name><argument_list pos:start="629:54" pos:end="629:89">(<argument pos:start="629:55" pos:end="629:65"><expr pos:start="629:55" pos:end="629:65"><name pos:start="629:55" pos:end="629:65">CPUX86State</name></expr></argument>,<argument pos:start="629:67" pos:end="629:88"><expr pos:start="629:67" pos:end="629:88"><name pos:start="629:67" pos:end="629:79"><name pos:start="629:67" pos:end="629:74">xmm_regs</name><index pos:start="629:75" pos:end="629:79">[<expr pos:start="629:76" pos:end="629:78"><name pos:start="629:76" pos:end="629:78">reg</name></expr>]</index></name><operator pos:start="629:80" pos:end="629:80">.</operator><call pos:start="629:81" pos:end="629:88"><name pos:start="629:81" pos:end="629:85">XMM_Q</name><argument_list pos:start="629:86" pos:end="629:88">(<argument pos:start="629:87" pos:end="629:87"><expr pos:start="629:87" pos:end="629:87"><literal type="number" pos:start="629:87" pos:end="629:87">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="631:15" pos:end="639:13">else <block pos:start="631:20" pos:end="639:13">{<block_content pos:start="633:17" pos:end="637:74">

                <expr_stmt pos:start="633:17" pos:end="633:44"><expr pos:start="633:17" pos:end="633:43"><name pos:start="633:17" pos:end="633:18">rm</name> <operator pos:start="633:20" pos:end="633:20">=</operator> <operator pos:start="633:22" pos:end="633:22">(</operator><name pos:start="633:23" pos:end="633:27">modrm</name> <operator pos:start="633:29" pos:end="633:29">&amp;</operator> <literal type="number" pos:start="633:31" pos:end="633:31">7</literal><operator pos:start="633:32" pos:end="633:32">)</operator> <operator pos:start="633:34" pos:end="633:34">|</operator> <call pos:start="633:36" pos:end="633:43"><name pos:start="633:36" pos:end="633:40">REX_B</name><argument_list pos:start="633:41" pos:end="633:43">(<argument pos:start="633:42" pos:end="633:42"><expr pos:start="633:42" pos:end="633:42"><name pos:start="633:42" pos:end="633:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="635:17" pos:end="637:74"><expr pos:start="635:17" pos:end="637:73"><call pos:start="635:17" pos:end="637:73"><name pos:start="635:17" pos:end="635:27">gen_op_movq</name><argument_list pos:start="635:28" pos:end="637:73">(<argument pos:start="635:29" pos:end="635:71"><expr pos:start="635:29" pos:end="635:71"><call pos:start="635:29" pos:end="635:71"><name pos:start="635:29" pos:end="635:36">offsetof</name><argument_list pos:start="635:37" pos:end="635:71">(<argument pos:start="635:38" pos:end="635:48"><expr pos:start="635:38" pos:end="635:48"><name pos:start="635:38" pos:end="635:48">CPUX86State</name></expr></argument>,<argument pos:start="635:50" pos:end="635:70"><expr pos:start="635:50" pos:end="635:70"><name pos:start="635:50" pos:end="635:61"><name pos:start="635:50" pos:end="635:57">xmm_regs</name><index pos:start="635:58" pos:end="635:61">[<expr pos:start="635:59" pos:end="635:60"><name pos:start="635:59" pos:end="635:60">rm</name></expr>]</index></name><operator pos:start="635:62" pos:end="635:62">.</operator><call pos:start="635:63" pos:end="635:70"><name pos:start="635:63" pos:end="635:67">XMM_Q</name><argument_list pos:start="635:68" pos:end="635:70">(<argument pos:start="635:69" pos:end="635:69"><expr pos:start="635:69" pos:end="635:69"><literal type="number" pos:start="635:69" pos:end="635:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="637:29" pos:end="637:72"><expr pos:start="637:29" pos:end="637:72"><call pos:start="637:29" pos:end="637:72"><name pos:start="637:29" pos:end="637:36">offsetof</name><argument_list pos:start="637:37" pos:end="637:72">(<argument pos:start="637:38" pos:end="637:48"><expr pos:start="637:38" pos:end="637:48"><name pos:start="637:38" pos:end="637:48">CPUX86State</name></expr></argument>,<argument pos:start="637:50" pos:end="637:71"><expr pos:start="637:50" pos:end="637:71"><name pos:start="637:50" pos:end="637:62"><name pos:start="637:50" pos:end="637:57">xmm_regs</name><index pos:start="637:58" pos:end="637:62">[<expr pos:start="637:59" pos:end="637:61"><name pos:start="637:59" pos:end="637:61">reg</name></expr>]</index></name><operator pos:start="637:63" pos:end="637:63">.</operator><call pos:start="637:64" pos:end="637:71"><name pos:start="637:64" pos:end="637:68">XMM_Q</name><argument_list pos:start="637:69" pos:end="637:71">(<argument pos:start="637:70" pos:end="637:70"><expr pos:start="637:70" pos:end="637:70"><literal type="number" pos:start="637:70" pos:end="637:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="641:13" pos:end="641:18">break;</break>

        <case pos:start="643:9" pos:end="643:19">case <expr pos:start="643:14" pos:end="643:18"><literal type="number" pos:start="643:14" pos:end="643:18">0x013</literal></expr>:</case> <comment type="block" pos:start="643:21" pos:end="643:32">/* movlps */</comment>

        <case pos:start="645:9" pos:end="645:19">case <expr pos:start="645:14" pos:end="645:18"><literal type="number" pos:start="645:14" pos:end="645:18">0x113</literal></expr>:</case> <comment type="block" pos:start="645:21" pos:end="645:32">/* movlpd */</comment>

            <if_stmt pos:start="647:13" pos:end="657:13"><if pos:start="647:13" pos:end="653:13">if <condition pos:start="647:16" pos:end="647:25">(<expr pos:start="647:17" pos:end="647:24"><name pos:start="647:17" pos:end="647:19">mod</name> <operator pos:start="647:21" pos:end="647:22">!=</operator> <literal type="number" pos:start="647:24" pos:end="647:24">3</literal></expr>)</condition> <block pos:start="647:27" pos:end="653:13">{<block_content pos:start="649:17" pos:end="651:91">

                <expr_stmt pos:start="649:17" pos:end="649:65"><expr pos:start="649:17" pos:end="649:64"><call pos:start="649:17" pos:end="649:64"><name pos:start="649:17" pos:end="649:29">gen_lea_modrm</name><argument_list pos:start="649:30" pos:end="649:64">(<argument pos:start="649:31" pos:end="649:31"><expr pos:start="649:31" pos:end="649:31"><name pos:start="649:31" pos:end="649:31">s</name></expr></argument>, <argument pos:start="649:34" pos:end="649:38"><expr pos:start="649:34" pos:end="649:38"><name pos:start="649:34" pos:end="649:38">modrm</name></expr></argument>, <argument pos:start="649:41" pos:end="649:49"><expr pos:start="649:41" pos:end="649:49"><operator pos:start="649:41" pos:end="649:41">&amp;</operator><name pos:start="649:42" pos:end="649:49">reg_addr</name></expr></argument>, <argument pos:start="649:52" pos:end="649:63"><expr pos:start="649:52" pos:end="649:63"><operator pos:start="649:52" pos:end="649:52">&amp;</operator><name pos:start="649:53" pos:end="649:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="651:17" pos:end="651:91"><expr pos:start="651:17" pos:end="651:90"><call pos:start="651:17" pos:end="651:90"><name pos:start="651:17" pos:end="651:30">gen_stq_env_A0</name><argument_list pos:start="651:31" pos:end="651:90">(<argument pos:start="651:32" pos:end="651:43"><expr pos:start="651:32" pos:end="651:43"><name pos:start="651:32" pos:end="651:43"><name pos:start="651:32" pos:end="651:32">s</name><operator pos:start="651:33" pos:end="651:34">-&gt;</operator><name pos:start="651:35" pos:end="651:43">mem_index</name></name></expr></argument>, <argument pos:start="651:46" pos:end="651:89"><expr pos:start="651:46" pos:end="651:89"><call pos:start="651:46" pos:end="651:89"><name pos:start="651:46" pos:end="651:53">offsetof</name><argument_list pos:start="651:54" pos:end="651:89">(<argument pos:start="651:55" pos:end="651:65"><expr pos:start="651:55" pos:end="651:65"><name pos:start="651:55" pos:end="651:65">CPUX86State</name></expr></argument>,<argument pos:start="651:67" pos:end="651:88"><expr pos:start="651:67" pos:end="651:88"><name pos:start="651:67" pos:end="651:79"><name pos:start="651:67" pos:end="651:74">xmm_regs</name><index pos:start="651:75" pos:end="651:79">[<expr pos:start="651:76" pos:end="651:78"><name pos:start="651:76" pos:end="651:78">reg</name></expr>]</index></name><operator pos:start="651:80" pos:end="651:80">.</operator><call pos:start="651:81" pos:end="651:88"><name pos:start="651:81" pos:end="651:85">XMM_Q</name><argument_list pos:start="651:86" pos:end="651:88">(<argument pos:start="651:87" pos:end="651:87"><expr pos:start="651:87" pos:end="651:87"><literal type="number" pos:start="651:87" pos:end="651:87">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="653:15" pos:end="657:13">else <block pos:start="653:20" pos:end="657:13">{<block_content pos:start="655:17" pos:end="655:32">

                <goto pos:start="655:17" pos:end="655:32">goto <name pos:start="655:22" pos:end="655:31">illegal_op</name>;</goto>

            </block_content>}</block></else></if_stmt>

            <break pos:start="659:13" pos:end="659:18">break;</break>

        <case pos:start="661:9" pos:end="661:19">case <expr pos:start="661:14" pos:end="661:18"><literal type="number" pos:start="661:14" pos:end="661:18">0x017</literal></expr>:</case> <comment type="block" pos:start="661:21" pos:end="661:32">/* movhps */</comment>

        <case pos:start="663:9" pos:end="663:19">case <expr pos:start="663:14" pos:end="663:18"><literal type="number" pos:start="663:14" pos:end="663:18">0x117</literal></expr>:</case> <comment type="block" pos:start="663:21" pos:end="663:32">/* movhpd */</comment>

            <if_stmt pos:start="665:13" pos:end="675:13"><if pos:start="665:13" pos:end="671:13">if <condition pos:start="665:16" pos:end="665:25">(<expr pos:start="665:17" pos:end="665:24"><name pos:start="665:17" pos:end="665:19">mod</name> <operator pos:start="665:21" pos:end="665:22">!=</operator> <literal type="number" pos:start="665:24" pos:end="665:24">3</literal></expr>)</condition> <block pos:start="665:27" pos:end="671:13">{<block_content pos:start="667:17" pos:end="669:91">

                <expr_stmt pos:start="667:17" pos:end="667:65"><expr pos:start="667:17" pos:end="667:64"><call pos:start="667:17" pos:end="667:64"><name pos:start="667:17" pos:end="667:29">gen_lea_modrm</name><argument_list pos:start="667:30" pos:end="667:64">(<argument pos:start="667:31" pos:end="667:31"><expr pos:start="667:31" pos:end="667:31"><name pos:start="667:31" pos:end="667:31">s</name></expr></argument>, <argument pos:start="667:34" pos:end="667:38"><expr pos:start="667:34" pos:end="667:38"><name pos:start="667:34" pos:end="667:38">modrm</name></expr></argument>, <argument pos:start="667:41" pos:end="667:49"><expr pos:start="667:41" pos:end="667:49"><operator pos:start="667:41" pos:end="667:41">&amp;</operator><name pos:start="667:42" pos:end="667:49">reg_addr</name></expr></argument>, <argument pos:start="667:52" pos:end="667:63"><expr pos:start="667:52" pos:end="667:63"><operator pos:start="667:52" pos:end="667:52">&amp;</operator><name pos:start="667:53" pos:end="667:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="669:17" pos:end="669:91"><expr pos:start="669:17" pos:end="669:90"><call pos:start="669:17" pos:end="669:90"><name pos:start="669:17" pos:end="669:30">gen_stq_env_A0</name><argument_list pos:start="669:31" pos:end="669:90">(<argument pos:start="669:32" pos:end="669:43"><expr pos:start="669:32" pos:end="669:43"><name pos:start="669:32" pos:end="669:43"><name pos:start="669:32" pos:end="669:32">s</name><operator pos:start="669:33" pos:end="669:34">-&gt;</operator><name pos:start="669:35" pos:end="669:43">mem_index</name></name></expr></argument>, <argument pos:start="669:46" pos:end="669:89"><expr pos:start="669:46" pos:end="669:89"><call pos:start="669:46" pos:end="669:89"><name pos:start="669:46" pos:end="669:53">offsetof</name><argument_list pos:start="669:54" pos:end="669:89">(<argument pos:start="669:55" pos:end="669:65"><expr pos:start="669:55" pos:end="669:65"><name pos:start="669:55" pos:end="669:65">CPUX86State</name></expr></argument>,<argument pos:start="669:67" pos:end="669:88"><expr pos:start="669:67" pos:end="669:88"><name pos:start="669:67" pos:end="669:79"><name pos:start="669:67" pos:end="669:74">xmm_regs</name><index pos:start="669:75" pos:end="669:79">[<expr pos:start="669:76" pos:end="669:78"><name pos:start="669:76" pos:end="669:78">reg</name></expr>]</index></name><operator pos:start="669:80" pos:end="669:80">.</operator><call pos:start="669:81" pos:end="669:88"><name pos:start="669:81" pos:end="669:85">XMM_Q</name><argument_list pos:start="669:86" pos:end="669:88">(<argument pos:start="669:87" pos:end="669:87"><expr pos:start="669:87" pos:end="669:87"><literal type="number" pos:start="669:87" pos:end="669:87">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="671:15" pos:end="675:13">else <block pos:start="671:20" pos:end="675:13">{<block_content pos:start="673:17" pos:end="673:32">

                <goto pos:start="673:17" pos:end="673:32">goto <name pos:start="673:22" pos:end="673:31">illegal_op</name>;</goto>

            </block_content>}</block></else></if_stmt>

            <break pos:start="677:13" pos:end="677:18">break;</break>

        <case pos:start="679:9" pos:end="679:18">case <expr pos:start="679:14" pos:end="679:17"><literal type="number" pos:start="679:14" pos:end="679:17">0x71</literal></expr>:</case> <comment type="block" pos:start="679:20" pos:end="679:37">/* shift mm, im */</comment>

        <case pos:start="681:9" pos:end="681:18">case <expr pos:start="681:14" pos:end="681:17"><literal type="number" pos:start="681:14" pos:end="681:17">0x72</literal></expr>:</case>

        <case pos:start="683:9" pos:end="683:18">case <expr pos:start="683:14" pos:end="683:17"><literal type="number" pos:start="683:14" pos:end="683:17">0x73</literal></expr>:</case>

        <case pos:start="685:9" pos:end="685:19">case <expr pos:start="685:14" pos:end="685:18"><literal type="number" pos:start="685:14" pos:end="685:18">0x171</literal></expr>:</case> <comment type="block" pos:start="685:21" pos:end="685:39">/* shift xmm, im */</comment>

        <case pos:start="687:9" pos:end="687:19">case <expr pos:start="687:14" pos:end="687:18"><literal type="number" pos:start="687:14" pos:end="687:18">0x172</literal></expr>:</case>

        <case pos:start="689:9" pos:end="689:19">case <expr pos:start="689:14" pos:end="689:18"><literal type="number" pos:start="689:14" pos:end="689:18">0x173</literal></expr>:</case>

            <expr_stmt pos:start="691:13" pos:end="691:37"><expr pos:start="691:13" pos:end="691:36"><name pos:start="691:13" pos:end="691:15">val</name> <operator pos:start="691:17" pos:end="691:17">=</operator> <call pos:start="691:19" pos:end="691:36"><name pos:start="691:19" pos:end="691:27">ldub_code</name><argument_list pos:start="691:28" pos:end="691:36">(<argument pos:start="691:29" pos:end="691:35"><expr pos:start="691:29" pos:end="691:35"><name pos:start="691:29" pos:end="691:33"><name pos:start="691:29" pos:end="691:29">s</name><operator pos:start="691:30" pos:end="691:31">-&gt;</operator><name pos:start="691:32" pos:end="691:33">pc</name></name><operator pos:start="691:34" pos:end="691:35">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="693:13" pos:end="717:13"><if pos:start="693:13" pos:end="705:13">if <condition pos:start="693:16" pos:end="693:23">(<expr pos:start="693:17" pos:end="693:22"><name pos:start="693:17" pos:end="693:22">is_xmm</name></expr>)</condition> <block pos:start="693:25" pos:end="705:13">{<block_content pos:start="695:17" pos:end="703:58">

                <expr_stmt pos:start="695:17" pos:end="695:39"><expr pos:start="695:17" pos:end="695:38"><call pos:start="695:17" pos:end="695:38"><name pos:start="695:17" pos:end="695:33">gen_op_movl_T0_im</name><argument_list pos:start="695:34" pos:end="695:38">(<argument pos:start="695:35" pos:end="695:37"><expr pos:start="695:35" pos:end="695:37"><name pos:start="695:35" pos:end="695:37">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="697:17" pos:end="697:90"><expr pos:start="697:17" pos:end="697:89"><call pos:start="697:17" pos:end="697:89"><name pos:start="697:17" pos:end="697:31">tcg_gen_st32_tl</name><argument_list pos:start="697:32" pos:end="697:89">(<argument pos:start="697:33" pos:end="697:40"><expr pos:start="697:33" pos:end="697:40"><name pos:start="697:33" pos:end="697:40"><name pos:start="697:33" pos:end="697:37">cpu_T</name><index pos:start="697:38" pos:end="697:40">[<expr pos:start="697:39" pos:end="697:39"><literal type="number" pos:start="697:39" pos:end="697:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="697:43" pos:end="697:49"><expr pos:start="697:43" pos:end="697:49"><name pos:start="697:43" pos:end="697:49">cpu_env</name></expr></argument>, <argument pos:start="697:52" pos:end="697:88"><expr pos:start="697:52" pos:end="697:88"><call pos:start="697:52" pos:end="697:88"><name pos:start="697:52" pos:end="697:59">offsetof</name><argument_list pos:start="697:60" pos:end="697:88">(<argument pos:start="697:61" pos:end="697:71"><expr pos:start="697:61" pos:end="697:71"><name pos:start="697:61" pos:end="697:71">CPUX86State</name></expr></argument>,<argument pos:start="697:73" pos:end="697:87"><expr pos:start="697:73" pos:end="697:87"><call pos:start="697:73" pos:end="697:87"><name pos:start="697:73" pos:end="697:84"><name pos:start="697:73" pos:end="697:78">xmm_t0</name><operator pos:start="697:79" pos:end="697:79">.</operator><name pos:start="697:80" pos:end="697:84">XMM_L</name></name><argument_list pos:start="697:85" pos:end="697:87">(<argument pos:start="697:86" pos:end="697:86"><expr pos:start="697:86" pos:end="697:86"><literal type="number" pos:start="697:86" pos:end="697:86">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="699:17" pos:end="699:35"><expr pos:start="699:17" pos:end="699:34"><call pos:start="699:17" pos:end="699:34"><name pos:start="699:17" pos:end="699:32">gen_op_movl_T0_0</name><argument_list pos:start="699:33" pos:end="699:34">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="701:17" pos:end="701:90"><expr pos:start="701:17" pos:end="701:89"><call pos:start="701:17" pos:end="701:89"><name pos:start="701:17" pos:end="701:31">tcg_gen_st32_tl</name><argument_list pos:start="701:32" pos:end="701:89">(<argument pos:start="701:33" pos:end="701:40"><expr pos:start="701:33" pos:end="701:40"><name pos:start="701:33" pos:end="701:40"><name pos:start="701:33" pos:end="701:37">cpu_T</name><index pos:start="701:38" pos:end="701:40">[<expr pos:start="701:39" pos:end="701:39"><literal type="number" pos:start="701:39" pos:end="701:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="701:43" pos:end="701:49"><expr pos:start="701:43" pos:end="701:49"><name pos:start="701:43" pos:end="701:49">cpu_env</name></expr></argument>, <argument pos:start="701:52" pos:end="701:88"><expr pos:start="701:52" pos:end="701:88"><call pos:start="701:52" pos:end="701:88"><name pos:start="701:52" pos:end="701:59">offsetof</name><argument_list pos:start="701:60" pos:end="701:88">(<argument pos:start="701:61" pos:end="701:71"><expr pos:start="701:61" pos:end="701:71"><name pos:start="701:61" pos:end="701:71">CPUX86State</name></expr></argument>,<argument pos:start="701:73" pos:end="701:87"><expr pos:start="701:73" pos:end="701:87"><call pos:start="701:73" pos:end="701:87"><name pos:start="701:73" pos:end="701:84"><name pos:start="701:73" pos:end="701:78">xmm_t0</name><operator pos:start="701:79" pos:end="701:79">.</operator><name pos:start="701:80" pos:end="701:84">XMM_L</name></name><argument_list pos:start="701:85" pos:end="701:87">(<argument pos:start="701:86" pos:end="701:86"><expr pos:start="701:86" pos:end="701:86"><literal type="number" pos:start="701:86" pos:end="701:86">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="703:17" pos:end="703:58"><expr pos:start="703:17" pos:end="703:57"><name pos:start="703:17" pos:end="703:26">op1_offset</name> <operator pos:start="703:28" pos:end="703:28">=</operator> <call pos:start="703:30" pos:end="703:57"><name pos:start="703:30" pos:end="703:37">offsetof</name><argument_list pos:start="703:38" pos:end="703:57">(<argument pos:start="703:39" pos:end="703:49"><expr pos:start="703:39" pos:end="703:49"><name pos:start="703:39" pos:end="703:49">CPUX86State</name></expr></argument>,<argument pos:start="703:51" pos:end="703:56"><expr pos:start="703:51" pos:end="703:56"><name pos:start="703:51" pos:end="703:56">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="705:15" pos:end="717:13">else <block pos:start="705:20" pos:end="717:13">{<block_content pos:start="707:17" pos:end="715:58">

                <expr_stmt pos:start="707:17" pos:end="707:39"><expr pos:start="707:17" pos:end="707:38"><call pos:start="707:17" pos:end="707:38"><name pos:start="707:17" pos:end="707:33">gen_op_movl_T0_im</name><argument_list pos:start="707:34" pos:end="707:38">(<argument pos:start="707:35" pos:end="707:37"><expr pos:start="707:35" pos:end="707:37"><name pos:start="707:35" pos:end="707:37">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="709:17" pos:end="709:90"><expr pos:start="709:17" pos:end="709:89"><call pos:start="709:17" pos:end="709:89"><name pos:start="709:17" pos:end="709:31">tcg_gen_st32_tl</name><argument_list pos:start="709:32" pos:end="709:89">(<argument pos:start="709:33" pos:end="709:40"><expr pos:start="709:33" pos:end="709:40"><name pos:start="709:33" pos:end="709:40"><name pos:start="709:33" pos:end="709:37">cpu_T</name><index pos:start="709:38" pos:end="709:40">[<expr pos:start="709:39" pos:end="709:39"><literal type="number" pos:start="709:39" pos:end="709:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="709:43" pos:end="709:49"><expr pos:start="709:43" pos:end="709:49"><name pos:start="709:43" pos:end="709:49">cpu_env</name></expr></argument>, <argument pos:start="709:52" pos:end="709:88"><expr pos:start="709:52" pos:end="709:88"><call pos:start="709:52" pos:end="709:88"><name pos:start="709:52" pos:end="709:59">offsetof</name><argument_list pos:start="709:60" pos:end="709:88">(<argument pos:start="709:61" pos:end="709:71"><expr pos:start="709:61" pos:end="709:71"><name pos:start="709:61" pos:end="709:71">CPUX86State</name></expr></argument>,<argument pos:start="709:73" pos:end="709:87"><expr pos:start="709:73" pos:end="709:87"><call pos:start="709:73" pos:end="709:87"><name pos:start="709:73" pos:end="709:84"><name pos:start="709:73" pos:end="709:78">mmx_t0</name><operator pos:start="709:79" pos:end="709:79">.</operator><name pos:start="709:80" pos:end="709:84">MMX_L</name></name><argument_list pos:start="709:85" pos:end="709:87">(<argument pos:start="709:86" pos:end="709:86"><expr pos:start="709:86" pos:end="709:86"><literal type="number" pos:start="709:86" pos:end="709:86">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="711:17" pos:end="711:35"><expr pos:start="711:17" pos:end="711:34"><call pos:start="711:17" pos:end="711:34"><name pos:start="711:17" pos:end="711:32">gen_op_movl_T0_0</name><argument_list pos:start="711:33" pos:end="711:34">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="713:17" pos:end="713:90"><expr pos:start="713:17" pos:end="713:89"><call pos:start="713:17" pos:end="713:89"><name pos:start="713:17" pos:end="713:31">tcg_gen_st32_tl</name><argument_list pos:start="713:32" pos:end="713:89">(<argument pos:start="713:33" pos:end="713:40"><expr pos:start="713:33" pos:end="713:40"><name pos:start="713:33" pos:end="713:40"><name pos:start="713:33" pos:end="713:37">cpu_T</name><index pos:start="713:38" pos:end="713:40">[<expr pos:start="713:39" pos:end="713:39"><literal type="number" pos:start="713:39" pos:end="713:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="713:43" pos:end="713:49"><expr pos:start="713:43" pos:end="713:49"><name pos:start="713:43" pos:end="713:49">cpu_env</name></expr></argument>, <argument pos:start="713:52" pos:end="713:88"><expr pos:start="713:52" pos:end="713:88"><call pos:start="713:52" pos:end="713:88"><name pos:start="713:52" pos:end="713:59">offsetof</name><argument_list pos:start="713:60" pos:end="713:88">(<argument pos:start="713:61" pos:end="713:71"><expr pos:start="713:61" pos:end="713:71"><name pos:start="713:61" pos:end="713:71">CPUX86State</name></expr></argument>,<argument pos:start="713:73" pos:end="713:87"><expr pos:start="713:73" pos:end="713:87"><call pos:start="713:73" pos:end="713:87"><name pos:start="713:73" pos:end="713:84"><name pos:start="713:73" pos:end="713:78">mmx_t0</name><operator pos:start="713:79" pos:end="713:79">.</operator><name pos:start="713:80" pos:end="713:84">MMX_L</name></name><argument_list pos:start="713:85" pos:end="713:87">(<argument pos:start="713:86" pos:end="713:86"><expr pos:start="713:86" pos:end="713:86"><literal type="number" pos:start="713:86" pos:end="713:86">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="715:17" pos:end="715:58"><expr pos:start="715:17" pos:end="715:57"><name pos:start="715:17" pos:end="715:26">op1_offset</name> <operator pos:start="715:28" pos:end="715:28">=</operator> <call pos:start="715:30" pos:end="715:57"><name pos:start="715:30" pos:end="715:37">offsetof</name><argument_list pos:start="715:38" pos:end="715:57">(<argument pos:start="715:39" pos:end="715:49"><expr pos:start="715:39" pos:end="715:49"><name pos:start="715:39" pos:end="715:49">CPUX86State</name></expr></argument>,<argument pos:start="715:51" pos:end="715:56"><expr pos:start="715:51" pos:end="715:56"><name pos:start="715:51" pos:end="715:56">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="719:13" pos:end="719:82"><expr pos:start="719:13" pos:end="719:81"><name pos:start="719:13" pos:end="719:19">sse_op2</name> <operator pos:start="719:21" pos:end="719:21">=</operator> <name pos:start="719:23" pos:end="719:81"><name pos:start="719:23" pos:end="719:35">sse_op_table2</name><index pos:start="719:36" pos:end="719:77">[<expr pos:start="719:37" pos:end="719:76"><operator pos:start="719:37" pos:end="719:37">(</operator><operator pos:start="719:38" pos:end="719:38">(</operator><name pos:start="719:39" pos:end="719:39">b</name> <operator pos:start="719:41" pos:end="719:41">-</operator> <literal type="number" pos:start="719:43" pos:end="719:43">1</literal><operator pos:start="719:44" pos:end="719:44">)</operator> <operator pos:start="719:46" pos:end="719:46">&amp;</operator> <literal type="number" pos:start="719:48" pos:end="719:48">3</literal><operator pos:start="719:49" pos:end="719:49">)</operator> <operator pos:start="719:51" pos:end="719:51">*</operator> <literal type="number" pos:start="719:53" pos:end="719:55">8</literal> <operator pos:start="719:55" pos:end="719:55">+</operator> <operator pos:start="719:57" pos:end="719:57">(</operator><operator pos:start="719:58" pos:end="719:58">(</operator><operator pos:start="719:59" pos:end="719:59">(</operator><name pos:start="719:60" pos:end="719:64">modrm</name> <operator pos:start="719:66" pos:end="719:67">&gt;&gt;</operator> <literal type="number" pos:start="719:69" pos:end="719:69">3</literal><operator pos:start="719:70" pos:end="719:70">)</operator><operator pos:start="719:71" pos:end="719:71">)</operator> <operator pos:start="719:73" pos:end="719:73">&amp;</operator> <literal type="number" pos:start="719:75" pos:end="719:75">7</literal><operator pos:start="719:76" pos:end="719:76">)</operator></expr>]</index><index pos:start="719:78" pos:end="719:81">[<expr pos:start="719:79" pos:end="719:80"><name pos:start="719:79" pos:end="719:80">b1</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="721:13" pos:end="723:32"><if pos:start="721:13" pos:end="723:32">if <condition pos:start="721:16" pos:end="721:25">(<expr pos:start="721:17" pos:end="721:24"><operator pos:start="721:17" pos:end="721:17">!</operator><name pos:start="721:18" pos:end="721:24">sse_op2</name></expr>)</condition><block type="pseudo" pos:start="723:17" pos:end="723:32"><block_content pos:start="723:17" pos:end="723:32">

                <goto pos:start="723:17" pos:end="723:32">goto <name pos:start="723:22" pos:end="723:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="725:13" pos:end="737:13"><if pos:start="725:13" pos:end="731:13">if <condition pos:start="725:16" pos:end="725:23">(<expr pos:start="725:17" pos:end="725:22"><name pos:start="725:17" pos:end="725:22">is_xmm</name></expr>)</condition> <block pos:start="725:25" pos:end="731:13">{<block_content pos:start="727:17" pos:end="729:64">

                <expr_stmt pos:start="727:17" pos:end="727:44"><expr pos:start="727:17" pos:end="727:43"><name pos:start="727:17" pos:end="727:18">rm</name> <operator pos:start="727:20" pos:end="727:20">=</operator> <operator pos:start="727:22" pos:end="727:22">(</operator><name pos:start="727:23" pos:end="727:27">modrm</name> <operator pos:start="727:29" pos:end="727:29">&amp;</operator> <literal type="number" pos:start="727:31" pos:end="727:31">7</literal><operator pos:start="727:32" pos:end="727:32">)</operator> <operator pos:start="727:34" pos:end="727:34">|</operator> <call pos:start="727:36" pos:end="727:43"><name pos:start="727:36" pos:end="727:40">REX_B</name><argument_list pos:start="727:41" pos:end="727:43">(<argument pos:start="727:42" pos:end="727:42"><expr pos:start="727:42" pos:end="727:42"><name pos:start="727:42" pos:end="727:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="729:17" pos:end="729:64"><expr pos:start="729:17" pos:end="729:63"><name pos:start="729:17" pos:end="729:26">op2_offset</name> <operator pos:start="729:28" pos:end="729:28">=</operator> <call pos:start="729:30" pos:end="729:63"><name pos:start="729:30" pos:end="729:37">offsetof</name><argument_list pos:start="729:38" pos:end="729:63">(<argument pos:start="729:39" pos:end="729:49"><expr pos:start="729:39" pos:end="729:49"><name pos:start="729:39" pos:end="729:49">CPUX86State</name></expr></argument>,<argument pos:start="729:51" pos:end="729:62"><expr pos:start="729:51" pos:end="729:62"><name pos:start="729:51" pos:end="729:62"><name pos:start="729:51" pos:end="729:58">xmm_regs</name><index pos:start="729:59" pos:end="729:62">[<expr pos:start="729:60" pos:end="729:61"><name pos:start="729:60" pos:end="729:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="731:15" pos:end="737:13">else <block pos:start="731:20" pos:end="737:13">{<block_content pos:start="733:17" pos:end="735:66">

                <expr_stmt pos:start="733:17" pos:end="733:33"><expr pos:start="733:17" pos:end="733:32"><name pos:start="733:17" pos:end="733:18">rm</name> <operator pos:start="733:20" pos:end="733:20">=</operator> <operator pos:start="733:22" pos:end="733:22">(</operator><name pos:start="733:23" pos:end="733:27">modrm</name> <operator pos:start="733:29" pos:end="733:29">&amp;</operator> <literal type="number" pos:start="733:31" pos:end="733:31">7</literal><operator pos:start="733:32" pos:end="733:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="735:17" pos:end="735:66"><expr pos:start="735:17" pos:end="735:65"><name pos:start="735:17" pos:end="735:26">op2_offset</name> <operator pos:start="735:28" pos:end="735:28">=</operator> <call pos:start="735:30" pos:end="735:65"><name pos:start="735:30" pos:end="735:37">offsetof</name><argument_list pos:start="735:38" pos:end="735:65">(<argument pos:start="735:39" pos:end="735:49"><expr pos:start="735:39" pos:end="735:49"><name pos:start="735:39" pos:end="735:49">CPUX86State</name></expr></argument>,<argument pos:start="735:51" pos:end="735:64"><expr pos:start="735:51" pos:end="735:64"><name pos:start="735:51" pos:end="735:60"><name pos:start="735:51" pos:end="735:56">fpregs</name><index pos:start="735:57" pos:end="735:60">[<expr pos:start="735:58" pos:end="735:59"><name pos:start="735:58" pos:end="735:59">rm</name></expr>]</index></name><operator pos:start="735:61" pos:end="735:61">.</operator><name pos:start="735:62" pos:end="735:64">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="739:13" pos:end="739:60"><expr pos:start="739:13" pos:end="739:59"><call pos:start="739:13" pos:end="739:59"><name pos:start="739:13" pos:end="739:28">tcg_gen_addi_ptr</name><argument_list pos:start="739:29" pos:end="739:59">(<argument pos:start="739:30" pos:end="739:37"><expr pos:start="739:30" pos:end="739:37"><name pos:start="739:30" pos:end="739:37">cpu_ptr0</name></expr></argument>, <argument pos:start="739:40" pos:end="739:46"><expr pos:start="739:40" pos:end="739:46"><name pos:start="739:40" pos:end="739:46">cpu_env</name></expr></argument>, <argument pos:start="739:49" pos:end="739:58"><expr pos:start="739:49" pos:end="739:58"><name pos:start="739:49" pos:end="739:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="741:13" pos:end="741:60"><expr pos:start="741:13" pos:end="741:59"><call pos:start="741:13" pos:end="741:59"><name pos:start="741:13" pos:end="741:28">tcg_gen_addi_ptr</name><argument_list pos:start="741:29" pos:end="741:59">(<argument pos:start="741:30" pos:end="741:37"><expr pos:start="741:30" pos:end="741:37"><name pos:start="741:30" pos:end="741:37">cpu_ptr1</name></expr></argument>, <argument pos:start="741:40" pos:end="741:46"><expr pos:start="741:40" pos:end="741:46"><name pos:start="741:40" pos:end="741:46">cpu_env</name></expr></argument>, <argument pos:start="741:49" pos:end="741:58"><expr pos:start="741:49" pos:end="741:58"><name pos:start="741:49" pos:end="741:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="743:13" pos:end="743:60"><expr pos:start="743:13" pos:end="743:59"><call pos:start="743:13" pos:end="743:59"><name pos:start="743:13" pos:end="743:30">tcg_gen_helper_0_2</name><argument_list pos:start="743:31" pos:end="743:59">(<argument pos:start="743:32" pos:end="743:38"><expr pos:start="743:32" pos:end="743:38"><name pos:start="743:32" pos:end="743:38">sse_op2</name></expr></argument>, <argument pos:start="743:41" pos:end="743:48"><expr pos:start="743:41" pos:end="743:48"><name pos:start="743:41" pos:end="743:48">cpu_ptr0</name></expr></argument>, <argument pos:start="743:51" pos:end="743:58"><expr pos:start="743:51" pos:end="743:58"><name pos:start="743:51" pos:end="743:58">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="745:13" pos:end="745:18">break;</break>

        <case pos:start="747:9" pos:end="747:19">case <expr pos:start="747:14" pos:end="747:18"><literal type="number" pos:start="747:14" pos:end="747:18">0x050</literal></expr>:</case> <comment type="block" pos:start="747:21" pos:end="747:34">/* movmskps */</comment>

            <expr_stmt pos:start="749:13" pos:end="749:40"><expr pos:start="749:13" pos:end="749:39"><name pos:start="749:13" pos:end="749:14">rm</name> <operator pos:start="749:16" pos:end="749:16">=</operator> <operator pos:start="749:18" pos:end="749:18">(</operator><name pos:start="749:19" pos:end="749:23">modrm</name> <operator pos:start="749:25" pos:end="749:25">&amp;</operator> <literal type="number" pos:start="749:27" pos:end="749:27">7</literal><operator pos:start="749:28" pos:end="749:28">)</operator> <operator pos:start="749:30" pos:end="749:30">|</operator> <call pos:start="749:32" pos:end="749:39"><name pos:start="749:32" pos:end="749:36">REX_B</name><argument_list pos:start="749:37" pos:end="749:39">(<argument pos:start="749:38" pos:end="749:38"><expr pos:start="749:38" pos:end="749:38"><name pos:start="749:38" pos:end="749:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="751:13" pos:end="753:65"><expr pos:start="751:13" pos:end="753:64"><call pos:start="751:13" pos:end="753:64"><name pos:start="751:13" pos:end="751:28">tcg_gen_addi_ptr</name><argument_list pos:start="751:29" pos:end="753:64">(<argument pos:start="751:30" pos:end="751:37"><expr pos:start="751:30" pos:end="751:37"><name pos:start="751:30" pos:end="751:37">cpu_ptr0</name></expr></argument>, <argument pos:start="751:40" pos:end="751:46"><expr pos:start="751:40" pos:end="751:46"><name pos:start="751:40" pos:end="751:46">cpu_env</name></expr></argument>, 

                             <argument pos:start="753:30" pos:end="753:63"><expr pos:start="753:30" pos:end="753:63"><call pos:start="753:30" pos:end="753:63"><name pos:start="753:30" pos:end="753:37">offsetof</name><argument_list pos:start="753:38" pos:end="753:63">(<argument pos:start="753:39" pos:end="753:49"><expr pos:start="753:39" pos:end="753:49"><name pos:start="753:39" pos:end="753:49">CPUX86State</name></expr></argument>,<argument pos:start="753:51" pos:end="753:62"><expr pos:start="753:51" pos:end="753:62"><name pos:start="753:51" pos:end="753:62"><name pos:start="753:51" pos:end="753:58">xmm_regs</name><index pos:start="753:59" pos:end="753:62">[<expr pos:start="753:60" pos:end="753:61"><name pos:start="753:60" pos:end="753:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="755:13" pos:end="755:72"><expr pos:start="755:13" pos:end="755:71"><call pos:start="755:13" pos:end="755:71"><name pos:start="755:13" pos:end="755:30">tcg_gen_helper_1_1</name><argument_list pos:start="755:31" pos:end="755:71">(<argument pos:start="755:32" pos:end="755:46"><expr pos:start="755:32" pos:end="755:46"><name pos:start="755:32" pos:end="755:46">helper_movmskps</name></expr></argument>, <argument pos:start="755:49" pos:end="755:60"><expr pos:start="755:49" pos:end="755:60"><name pos:start="755:49" pos:end="755:60">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="755:63" pos:end="755:70"><expr pos:start="755:63" pos:end="755:70"><name pos:start="755:63" pos:end="755:70">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="757:13" pos:end="757:56"><expr pos:start="757:13" pos:end="757:55"><call pos:start="757:13" pos:end="757:55"><name pos:start="757:13" pos:end="757:31">tcg_gen_extu_i32_tl</name><argument_list pos:start="757:32" pos:end="757:55">(<argument pos:start="757:33" pos:end="757:40"><expr pos:start="757:33" pos:end="757:40"><name pos:start="757:33" pos:end="757:40"><name pos:start="757:33" pos:end="757:37">cpu_T</name><index pos:start="757:38" pos:end="757:40">[<expr pos:start="757:39" pos:end="757:39"><literal type="number" pos:start="757:39" pos:end="757:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="757:43" pos:end="757:54"><expr pos:start="757:43" pos:end="757:54"><name pos:start="757:43" pos:end="757:54">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="759:13" pos:end="759:44"><expr pos:start="759:13" pos:end="759:43"><call pos:start="759:13" pos:end="759:43"><name pos:start="759:13" pos:end="759:29">gen_op_mov_reg_T0</name><argument_list pos:start="759:30" pos:end="759:43">(<argument pos:start="759:31" pos:end="759:37"><expr pos:start="759:31" pos:end="759:37"><name pos:start="759:31" pos:end="759:37">OT_LONG</name></expr></argument>, <argument pos:start="759:40" pos:end="759:42"><expr pos:start="759:40" pos:end="759:42"><name pos:start="759:40" pos:end="759:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="761:13" pos:end="761:18">break;</break>

        <case pos:start="763:9" pos:end="763:19">case <expr pos:start="763:14" pos:end="763:18"><literal type="number" pos:start="763:14" pos:end="763:18">0x150</literal></expr>:</case> <comment type="block" pos:start="763:21" pos:end="763:34">/* movmskpd */</comment>

            <expr_stmt pos:start="765:13" pos:end="765:40"><expr pos:start="765:13" pos:end="765:39"><name pos:start="765:13" pos:end="765:14">rm</name> <operator pos:start="765:16" pos:end="765:16">=</operator> <operator pos:start="765:18" pos:end="765:18">(</operator><name pos:start="765:19" pos:end="765:23">modrm</name> <operator pos:start="765:25" pos:end="765:25">&amp;</operator> <literal type="number" pos:start="765:27" pos:end="765:27">7</literal><operator pos:start="765:28" pos:end="765:28">)</operator> <operator pos:start="765:30" pos:end="765:30">|</operator> <call pos:start="765:32" pos:end="765:39"><name pos:start="765:32" pos:end="765:36">REX_B</name><argument_list pos:start="765:37" pos:end="765:39">(<argument pos:start="765:38" pos:end="765:38"><expr pos:start="765:38" pos:end="765:38"><name pos:start="765:38" pos:end="765:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="767:13" pos:end="769:65"><expr pos:start="767:13" pos:end="769:64"><call pos:start="767:13" pos:end="769:64"><name pos:start="767:13" pos:end="767:28">tcg_gen_addi_ptr</name><argument_list pos:start="767:29" pos:end="769:64">(<argument pos:start="767:30" pos:end="767:37"><expr pos:start="767:30" pos:end="767:37"><name pos:start="767:30" pos:end="767:37">cpu_ptr0</name></expr></argument>, <argument pos:start="767:40" pos:end="767:46"><expr pos:start="767:40" pos:end="767:46"><name pos:start="767:40" pos:end="767:46">cpu_env</name></expr></argument>, 

                             <argument pos:start="769:30" pos:end="769:63"><expr pos:start="769:30" pos:end="769:63"><call pos:start="769:30" pos:end="769:63"><name pos:start="769:30" pos:end="769:37">offsetof</name><argument_list pos:start="769:38" pos:end="769:63">(<argument pos:start="769:39" pos:end="769:49"><expr pos:start="769:39" pos:end="769:49"><name pos:start="769:39" pos:end="769:49">CPUX86State</name></expr></argument>,<argument pos:start="769:51" pos:end="769:62"><expr pos:start="769:51" pos:end="769:62"><name pos:start="769:51" pos:end="769:62"><name pos:start="769:51" pos:end="769:58">xmm_regs</name><index pos:start="769:59" pos:end="769:62">[<expr pos:start="769:60" pos:end="769:61"><name pos:start="769:60" pos:end="769:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="771:13" pos:end="771:72"><expr pos:start="771:13" pos:end="771:71"><call pos:start="771:13" pos:end="771:71"><name pos:start="771:13" pos:end="771:30">tcg_gen_helper_1_1</name><argument_list pos:start="771:31" pos:end="771:71">(<argument pos:start="771:32" pos:end="771:46"><expr pos:start="771:32" pos:end="771:46"><name pos:start="771:32" pos:end="771:46">helper_movmskpd</name></expr></argument>, <argument pos:start="771:49" pos:end="771:60"><expr pos:start="771:49" pos:end="771:60"><name pos:start="771:49" pos:end="771:60">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="771:63" pos:end="771:70"><expr pos:start="771:63" pos:end="771:70"><name pos:start="771:63" pos:end="771:70">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="773:13" pos:end="773:56"><expr pos:start="773:13" pos:end="773:55"><call pos:start="773:13" pos:end="773:55"><name pos:start="773:13" pos:end="773:31">tcg_gen_extu_i32_tl</name><argument_list pos:start="773:32" pos:end="773:55">(<argument pos:start="773:33" pos:end="773:40"><expr pos:start="773:33" pos:end="773:40"><name pos:start="773:33" pos:end="773:40"><name pos:start="773:33" pos:end="773:37">cpu_T</name><index pos:start="773:38" pos:end="773:40">[<expr pos:start="773:39" pos:end="773:39"><literal type="number" pos:start="773:39" pos:end="773:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="773:43" pos:end="773:54"><expr pos:start="773:43" pos:end="773:54"><name pos:start="773:43" pos:end="773:54">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="775:13" pos:end="775:44"><expr pos:start="775:13" pos:end="775:43"><call pos:start="775:13" pos:end="775:43"><name pos:start="775:13" pos:end="775:29">gen_op_mov_reg_T0</name><argument_list pos:start="775:30" pos:end="775:43">(<argument pos:start="775:31" pos:end="775:37"><expr pos:start="775:31" pos:end="775:37"><name pos:start="775:31" pos:end="775:37">OT_LONG</name></expr></argument>, <argument pos:start="775:40" pos:end="775:42"><expr pos:start="775:40" pos:end="775:42"><name pos:start="775:40" pos:end="775:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="777:13" pos:end="777:18">break;</break>

        <case pos:start="779:9" pos:end="779:19">case <expr pos:start="779:14" pos:end="779:18"><literal type="number" pos:start="779:14" pos:end="779:18">0x02a</literal></expr>:</case> <comment type="block" pos:start="779:21" pos:end="779:34">/* cvtpi2ps */</comment>

        <case pos:start="781:9" pos:end="781:19">case <expr pos:start="781:14" pos:end="781:18"><literal type="number" pos:start="781:14" pos:end="781:18">0x12a</literal></expr>:</case> <comment type="block" pos:start="781:21" pos:end="781:34">/* cvtpi2pd */</comment>

            <expr_stmt pos:start="783:13" pos:end="783:49"><expr pos:start="783:13" pos:end="783:48"><call pos:start="783:13" pos:end="783:48"><name pos:start="783:13" pos:end="783:30">tcg_gen_helper_0_0</name><argument_list pos:start="783:31" pos:end="783:48">(<argument pos:start="783:32" pos:end="783:47"><expr pos:start="783:32" pos:end="783:47"><name pos:start="783:32" pos:end="783:47">helper_enter_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="785:13" pos:end="799:13"><if pos:start="785:13" pos:end="793:13">if <condition pos:start="785:16" pos:end="785:25">(<expr pos:start="785:17" pos:end="785:24"><name pos:start="785:17" pos:end="785:19">mod</name> <operator pos:start="785:21" pos:end="785:22">!=</operator> <literal type="number" pos:start="785:24" pos:end="785:24">3</literal></expr>)</condition> <block pos:start="785:27" pos:end="793:13">{<block_content pos:start="787:17" pos:end="791:57">

                <expr_stmt pos:start="787:17" pos:end="787:65"><expr pos:start="787:17" pos:end="787:64"><call pos:start="787:17" pos:end="787:64"><name pos:start="787:17" pos:end="787:29">gen_lea_modrm</name><argument_list pos:start="787:30" pos:end="787:64">(<argument pos:start="787:31" pos:end="787:31"><expr pos:start="787:31" pos:end="787:31"><name pos:start="787:31" pos:end="787:31">s</name></expr></argument>, <argument pos:start="787:34" pos:end="787:38"><expr pos:start="787:34" pos:end="787:38"><name pos:start="787:34" pos:end="787:38">modrm</name></expr></argument>, <argument pos:start="787:41" pos:end="787:49"><expr pos:start="787:41" pos:end="787:49"><operator pos:start="787:41" pos:end="787:41">&amp;</operator><name pos:start="787:42" pos:end="787:49">reg_addr</name></expr></argument>, <argument pos:start="787:52" pos:end="787:63"><expr pos:start="787:52" pos:end="787:63"><operator pos:start="787:52" pos:end="787:52">&amp;</operator><name pos:start="787:53" pos:end="787:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="789:17" pos:end="789:58"><expr pos:start="789:17" pos:end="789:57"><name pos:start="789:17" pos:end="789:26">op2_offset</name> <operator pos:start="789:28" pos:end="789:28">=</operator> <call pos:start="789:30" pos:end="789:57"><name pos:start="789:30" pos:end="789:37">offsetof</name><argument_list pos:start="789:38" pos:end="789:57">(<argument pos:start="789:39" pos:end="789:49"><expr pos:start="789:39" pos:end="789:49"><name pos:start="789:39" pos:end="789:49">CPUX86State</name></expr></argument>,<argument pos:start="789:51" pos:end="789:56"><expr pos:start="789:51" pos:end="789:56"><name pos:start="789:51" pos:end="789:56">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="791:17" pos:end="791:57"><expr pos:start="791:17" pos:end="791:56"><call pos:start="791:17" pos:end="791:56"><name pos:start="791:17" pos:end="791:30">gen_ldq_env_A0</name><argument_list pos:start="791:31" pos:end="791:56">(<argument pos:start="791:32" pos:end="791:43"><expr pos:start="791:32" pos:end="791:43"><name pos:start="791:32" pos:end="791:43"><name pos:start="791:32" pos:end="791:32">s</name><operator pos:start="791:33" pos:end="791:34">-&gt;</operator><name pos:start="791:35" pos:end="791:43">mem_index</name></name></expr></argument>, <argument pos:start="791:46" pos:end="791:55"><expr pos:start="791:46" pos:end="791:55"><name pos:start="791:46" pos:end="791:55">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="793:15" pos:end="799:13">else <block pos:start="793:20" pos:end="799:13">{<block_content pos:start="795:17" pos:end="797:66">

                <expr_stmt pos:start="795:17" pos:end="795:33"><expr pos:start="795:17" pos:end="795:32"><name pos:start="795:17" pos:end="795:18">rm</name> <operator pos:start="795:20" pos:end="795:20">=</operator> <operator pos:start="795:22" pos:end="795:22">(</operator><name pos:start="795:23" pos:end="795:27">modrm</name> <operator pos:start="795:29" pos:end="795:29">&amp;</operator> <literal type="number" pos:start="795:31" pos:end="795:31">7</literal><operator pos:start="795:32" pos:end="795:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="797:17" pos:end="797:66"><expr pos:start="797:17" pos:end="797:65"><name pos:start="797:17" pos:end="797:26">op2_offset</name> <operator pos:start="797:28" pos:end="797:28">=</operator> <call pos:start="797:30" pos:end="797:65"><name pos:start="797:30" pos:end="797:37">offsetof</name><argument_list pos:start="797:38" pos:end="797:65">(<argument pos:start="797:39" pos:end="797:49"><expr pos:start="797:39" pos:end="797:49"><name pos:start="797:39" pos:end="797:49">CPUX86State</name></expr></argument>,<argument pos:start="797:51" pos:end="797:64"><expr pos:start="797:51" pos:end="797:64"><name pos:start="797:51" pos:end="797:60"><name pos:start="797:51" pos:end="797:56">fpregs</name><index pos:start="797:57" pos:end="797:60">[<expr pos:start="797:58" pos:end="797:59"><name pos:start="797:58" pos:end="797:59">rm</name></expr>]</index></name><operator pos:start="797:61" pos:end="797:61">.</operator><name pos:start="797:62" pos:end="797:64">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="801:13" pos:end="801:61"><expr pos:start="801:13" pos:end="801:60"><name pos:start="801:13" pos:end="801:22">op1_offset</name> <operator pos:start="801:24" pos:end="801:24">=</operator> <call pos:start="801:26" pos:end="801:60"><name pos:start="801:26" pos:end="801:33">offsetof</name><argument_list pos:start="801:34" pos:end="801:60">(<argument pos:start="801:35" pos:end="801:45"><expr pos:start="801:35" pos:end="801:45"><name pos:start="801:35" pos:end="801:45">CPUX86State</name></expr></argument>,<argument pos:start="801:47" pos:end="801:59"><expr pos:start="801:47" pos:end="801:59"><name pos:start="801:47" pos:end="801:59"><name pos:start="801:47" pos:end="801:54">xmm_regs</name><index pos:start="801:55" pos:end="801:59">[<expr pos:start="801:56" pos:end="801:58"><name pos:start="801:56" pos:end="801:58">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="803:13" pos:end="803:60"><expr pos:start="803:13" pos:end="803:59"><call pos:start="803:13" pos:end="803:59"><name pos:start="803:13" pos:end="803:28">tcg_gen_addi_ptr</name><argument_list pos:start="803:29" pos:end="803:59">(<argument pos:start="803:30" pos:end="803:37"><expr pos:start="803:30" pos:end="803:37"><name pos:start="803:30" pos:end="803:37">cpu_ptr0</name></expr></argument>, <argument pos:start="803:40" pos:end="803:46"><expr pos:start="803:40" pos:end="803:46"><name pos:start="803:40" pos:end="803:46">cpu_env</name></expr></argument>, <argument pos:start="803:49" pos:end="803:58"><expr pos:start="803:49" pos:end="803:58"><name pos:start="803:49" pos:end="803:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="805:13" pos:end="805:60"><expr pos:start="805:13" pos:end="805:59"><call pos:start="805:13" pos:end="805:59"><name pos:start="805:13" pos:end="805:28">tcg_gen_addi_ptr</name><argument_list pos:start="805:29" pos:end="805:59">(<argument pos:start="805:30" pos:end="805:37"><expr pos:start="805:30" pos:end="805:37"><name pos:start="805:30" pos:end="805:37">cpu_ptr1</name></expr></argument>, <argument pos:start="805:40" pos:end="805:46"><expr pos:start="805:40" pos:end="805:46"><name pos:start="805:40" pos:end="805:46">cpu_env</name></expr></argument>, <argument pos:start="805:49" pos:end="805:58"><expr pos:start="805:49" pos:end="805:58"><name pos:start="805:49" pos:end="805:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="807:13" pos:end="823:13">switch<condition pos:start="807:19" pos:end="807:26">(<expr pos:start="807:20" pos:end="807:25"><name pos:start="807:20" pos:end="807:20">b</name> <operator pos:start="807:22" pos:end="807:23">&gt;&gt;</operator> <literal type="number" pos:start="807:25" pos:end="807:25">8</literal></expr>)</condition> <block pos:start="807:28" pos:end="823:13">{<block_content pos:start="809:13" pos:end="821:22">

            <case pos:start="809:13" pos:end="809:21">case <expr pos:start="809:18" pos:end="809:20"><literal type="number" pos:start="809:18" pos:end="809:20">0x0</literal></expr>:</case>

                <expr_stmt pos:start="811:17" pos:end="811:72"><expr pos:start="811:17" pos:end="811:71"><call pos:start="811:17" pos:end="811:71"><name pos:start="811:17" pos:end="811:34">tcg_gen_helper_0_2</name><argument_list pos:start="811:35" pos:end="811:71">(<argument pos:start="811:36" pos:end="811:50"><expr pos:start="811:36" pos:end="811:50"><name pos:start="811:36" pos:end="811:50">helper_cvtpi2ps</name></expr></argument>, <argument pos:start="811:53" pos:end="811:60"><expr pos:start="811:53" pos:end="811:60"><name pos:start="811:53" pos:end="811:60">cpu_ptr0</name></expr></argument>, <argument pos:start="811:63" pos:end="811:70"><expr pos:start="811:63" pos:end="811:70"><name pos:start="811:63" pos:end="811:70">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="813:17" pos:end="813:22">break;</break>

            <default pos:start="815:13" pos:end="815:20">default:</default>

            <case pos:start="817:13" pos:end="817:21">case <expr pos:start="817:18" pos:end="817:20"><literal type="number" pos:start="817:18" pos:end="817:20">0x1</literal></expr>:</case>

                <expr_stmt pos:start="819:17" pos:end="819:72"><expr pos:start="819:17" pos:end="819:71"><call pos:start="819:17" pos:end="819:71"><name pos:start="819:17" pos:end="819:34">tcg_gen_helper_0_2</name><argument_list pos:start="819:35" pos:end="819:71">(<argument pos:start="819:36" pos:end="819:50"><expr pos:start="819:36" pos:end="819:50"><name pos:start="819:36" pos:end="819:50">helper_cvtpi2pd</name></expr></argument>, <argument pos:start="819:53" pos:end="819:60"><expr pos:start="819:53" pos:end="819:60"><name pos:start="819:53" pos:end="819:60">cpu_ptr0</name></expr></argument>, <argument pos:start="819:63" pos:end="819:70"><expr pos:start="819:63" pos:end="819:70"><name pos:start="819:63" pos:end="819:70">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="821:17" pos:end="821:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="825:13" pos:end="825:18">break;</break>

        <case pos:start="827:9" pos:end="827:19">case <expr pos:start="827:14" pos:end="827:18"><literal type="number" pos:start="827:14" pos:end="827:18">0x22a</literal></expr>:</case> <comment type="block" pos:start="827:21" pos:end="827:34">/* cvtsi2ss */</comment>

        <case pos:start="829:9" pos:end="829:19">case <expr pos:start="829:14" pos:end="829:18"><literal type="number" pos:start="829:14" pos:end="829:18">0x32a</literal></expr>:</case> <comment type="block" pos:start="829:21" pos:end="829:34">/* cvtsi2sd */</comment>

            <expr_stmt pos:start="831:13" pos:end="831:53"><expr pos:start="831:13" pos:end="831:52"><name pos:start="831:13" pos:end="831:14">ot</name> <operator pos:start="831:16" pos:end="831:16">=</operator> <ternary pos:start="831:18" pos:end="831:52"><condition pos:start="831:18" pos:end="831:34"><expr pos:start="831:18" pos:end="831:32"><operator pos:start="831:18" pos:end="831:18">(</operator><name pos:start="831:19" pos:end="831:26"><name pos:start="831:19" pos:end="831:19">s</name><operator pos:start="831:20" pos:end="831:21">-&gt;</operator><name pos:start="831:22" pos:end="831:26">dflag</name></name> <operator pos:start="831:28" pos:end="831:29">==</operator> <literal type="number" pos:start="831:31" pos:end="831:31">2</literal><operator pos:start="831:32" pos:end="831:32">)</operator></expr> ?</condition><then pos:start="831:36" pos:end="831:42"> <expr pos:start="831:36" pos:end="831:42"><name pos:start="831:36" pos:end="831:42">OT_QUAD</name></expr> </then><else pos:start="831:44" pos:end="831:52">: <expr pos:start="831:46" pos:end="831:52"><name pos:start="831:46" pos:end="831:52">OT_LONG</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="833:13" pos:end="833:53"><expr pos:start="833:13" pos:end="833:52"><call pos:start="833:13" pos:end="833:52"><name pos:start="833:13" pos:end="833:26">gen_ldst_modrm</name><argument_list pos:start="833:27" pos:end="833:52">(<argument pos:start="833:28" pos:end="833:28"><expr pos:start="833:28" pos:end="833:28"><name pos:start="833:28" pos:end="833:28">s</name></expr></argument>, <argument pos:start="833:31" pos:end="833:35"><expr pos:start="833:31" pos:end="833:35"><name pos:start="833:31" pos:end="833:35">modrm</name></expr></argument>, <argument pos:start="833:38" pos:end="833:39"><expr pos:start="833:38" pos:end="833:39"><name pos:start="833:38" pos:end="833:39">ot</name></expr></argument>, <argument pos:start="833:42" pos:end="833:48"><expr pos:start="833:42" pos:end="833:48"><name pos:start="833:42" pos:end="833:48">OR_TMP0</name></expr></argument>, <argument pos:start="833:51" pos:end="833:51"><expr pos:start="833:51" pos:end="833:51"><literal type="number" pos:start="833:51" pos:end="833:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="835:13" pos:end="835:61"><expr pos:start="835:13" pos:end="835:60"><name pos:start="835:13" pos:end="835:22">op1_offset</name> <operator pos:start="835:24" pos:end="835:24">=</operator> <call pos:start="835:26" pos:end="835:60"><name pos:start="835:26" pos:end="835:33">offsetof</name><argument_list pos:start="835:34" pos:end="835:60">(<argument pos:start="835:35" pos:end="835:45"><expr pos:start="835:35" pos:end="835:45"><name pos:start="835:35" pos:end="835:45">CPUX86State</name></expr></argument>,<argument pos:start="835:47" pos:end="835:59"><expr pos:start="835:47" pos:end="835:59"><name pos:start="835:47" pos:end="835:59"><name pos:start="835:47" pos:end="835:54">xmm_regs</name><index pos:start="835:55" pos:end="835:59">[<expr pos:start="835:56" pos:end="835:58"><name pos:start="835:56" pos:end="835:58">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="837:13" pos:end="837:60"><expr pos:start="837:13" pos:end="837:59"><call pos:start="837:13" pos:end="837:59"><name pos:start="837:13" pos:end="837:28">tcg_gen_addi_ptr</name><argument_list pos:start="837:29" pos:end="837:59">(<argument pos:start="837:30" pos:end="837:37"><expr pos:start="837:30" pos:end="837:37"><name pos:start="837:30" pos:end="837:37">cpu_ptr0</name></expr></argument>, <argument pos:start="837:40" pos:end="837:46"><expr pos:start="837:40" pos:end="837:46"><name pos:start="837:40" pos:end="837:46">cpu_env</name></expr></argument>, <argument pos:start="837:49" pos:end="837:58"><expr pos:start="837:49" pos:end="837:58"><name pos:start="837:49" pos:end="837:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="839:13" pos:end="839:74"><expr pos:start="839:13" pos:end="839:73"><name pos:start="839:13" pos:end="839:19">sse_op2</name> <operator pos:start="839:21" pos:end="839:21">=</operator> <name pos:start="839:23" pos:end="839:73"><name pos:start="839:23" pos:end="839:35">sse_op_table3</name><index pos:start="839:36" pos:end="839:73">[<expr pos:start="839:37" pos:end="839:72"><operator pos:start="839:37" pos:end="839:37">(</operator><name pos:start="839:38" pos:end="839:45"><name pos:start="839:38" pos:end="839:38">s</name><operator pos:start="839:39" pos:end="839:40">-&gt;</operator><name pos:start="839:41" pos:end="839:45">dflag</name></name> <operator pos:start="839:47" pos:end="839:48">==</operator> <literal type="number" pos:start="839:50" pos:end="839:50">2</literal><operator pos:start="839:51" pos:end="839:51">)</operator> <operator pos:start="839:53" pos:end="839:53">*</operator> <literal type="number" pos:start="839:55" pos:end="839:57">2</literal> <operator pos:start="839:57" pos:end="839:57">+</operator> <operator pos:start="839:59" pos:end="839:59">(</operator><operator pos:start="839:60" pos:end="839:60">(</operator><name pos:start="839:61" pos:end="839:61">b</name> <operator pos:start="839:63" pos:end="839:64">&gt;&gt;</operator> <literal type="number" pos:start="839:66" pos:end="839:66">8</literal><operator pos:start="839:67" pos:end="839:67">)</operator> <operator pos:start="839:69" pos:end="839:69">-</operator> <literal type="number" pos:start="839:71" pos:end="839:71">2</literal><operator pos:start="839:72" pos:end="839:72">)</operator></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="841:13" pos:end="851:13"><if pos:start="841:13" pos:end="847:13">if <condition pos:start="841:16" pos:end="841:30">(<expr pos:start="841:17" pos:end="841:29"><name pos:start="841:17" pos:end="841:18">ot</name> <operator pos:start="841:20" pos:end="841:21">==</operator> <name pos:start="841:23" pos:end="841:29">OT_LONG</name></expr>)</condition> <block pos:start="841:32" pos:end="847:13">{<block_content pos:start="843:17" pos:end="845:68">

                <expr_stmt pos:start="843:17" pos:end="843:61"><expr pos:start="843:17" pos:end="843:60"><call pos:start="843:17" pos:end="843:60"><name pos:start="843:17" pos:end="843:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="843:37" pos:end="843:60">(<argument pos:start="843:38" pos:end="843:49"><expr pos:start="843:38" pos:end="843:49"><name pos:start="843:38" pos:end="843:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="843:52" pos:end="843:59"><expr pos:start="843:52" pos:end="843:59"><name pos:start="843:52" pos:end="843:59"><name pos:start="843:52" pos:end="843:56">cpu_T</name><index pos:start="843:57" pos:end="843:59">[<expr pos:start="843:58" pos:end="843:58"><literal type="number" pos:start="843:58" pos:end="843:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="845:17" pos:end="845:68"><expr pos:start="845:17" pos:end="845:67"><call pos:start="845:17" pos:end="845:67"><name pos:start="845:17" pos:end="845:34">tcg_gen_helper_0_2</name><argument_list pos:start="845:35" pos:end="845:67">(<argument pos:start="845:36" pos:end="845:42"><expr pos:start="845:36" pos:end="845:42"><name pos:start="845:36" pos:end="845:42">sse_op2</name></expr></argument>, <argument pos:start="845:45" pos:end="845:52"><expr pos:start="845:45" pos:end="845:52"><name pos:start="845:45" pos:end="845:52">cpu_ptr0</name></expr></argument>, <argument pos:start="845:55" pos:end="845:66"><expr pos:start="845:55" pos:end="845:66"><name pos:start="845:55" pos:end="845:66">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="847:15" pos:end="851:13">else <block pos:start="847:20" pos:end="851:13">{<block_content pos:start="849:17" pos:end="849:64">

                <expr_stmt pos:start="849:17" pos:end="849:64"><expr pos:start="849:17" pos:end="849:63"><call pos:start="849:17" pos:end="849:63"><name pos:start="849:17" pos:end="849:34">tcg_gen_helper_0_2</name><argument_list pos:start="849:35" pos:end="849:63">(<argument pos:start="849:36" pos:end="849:42"><expr pos:start="849:36" pos:end="849:42"><name pos:start="849:36" pos:end="849:42">sse_op2</name></expr></argument>, <argument pos:start="849:45" pos:end="849:52"><expr pos:start="849:45" pos:end="849:52"><name pos:start="849:45" pos:end="849:52">cpu_ptr0</name></expr></argument>, <argument pos:start="849:55" pos:end="849:62"><expr pos:start="849:55" pos:end="849:62"><name pos:start="849:55" pos:end="849:62"><name pos:start="849:55" pos:end="849:59">cpu_T</name><index pos:start="849:60" pos:end="849:62">[<expr pos:start="849:61" pos:end="849:61"><literal type="number" pos:start="849:61" pos:end="849:61">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="853:13" pos:end="853:18">break;</break>

        <case pos:start="855:9" pos:end="855:19">case <expr pos:start="855:14" pos:end="855:18"><literal type="number" pos:start="855:14" pos:end="855:18">0x02c</literal></expr>:</case> <comment type="block" pos:start="855:21" pos:end="855:35">/* cvttps2pi */</comment>

        <case pos:start="857:9" pos:end="857:19">case <expr pos:start="857:14" pos:end="857:18"><literal type="number" pos:start="857:14" pos:end="857:18">0x12c</literal></expr>:</case> <comment type="block" pos:start="857:21" pos:end="857:35">/* cvttpd2pi */</comment>

        <case pos:start="859:9" pos:end="859:19">case <expr pos:start="859:14" pos:end="859:18"><literal type="number" pos:start="859:14" pos:end="859:18">0x02d</literal></expr>:</case> <comment type="block" pos:start="859:21" pos:end="859:34">/* cvtps2pi */</comment>

        <case pos:start="861:9" pos:end="861:19">case <expr pos:start="861:14" pos:end="861:18"><literal type="number" pos:start="861:14" pos:end="861:18">0x12d</literal></expr>:</case> <comment type="block" pos:start="861:21" pos:end="861:34">/* cvtpd2pi */</comment>

            <expr_stmt pos:start="863:13" pos:end="863:49"><expr pos:start="863:13" pos:end="863:48"><call pos:start="863:13" pos:end="863:48"><name pos:start="863:13" pos:end="863:30">tcg_gen_helper_0_0</name><argument_list pos:start="863:31" pos:end="863:48">(<argument pos:start="863:32" pos:end="863:47"><expr pos:start="863:32" pos:end="863:47"><name pos:start="863:32" pos:end="863:47">helper_enter_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="865:13" pos:end="879:13"><if pos:start="865:13" pos:end="873:13">if <condition pos:start="865:16" pos:end="865:25">(<expr pos:start="865:17" pos:end="865:24"><name pos:start="865:17" pos:end="865:19">mod</name> <operator pos:start="865:21" pos:end="865:22">!=</operator> <literal type="number" pos:start="865:24" pos:end="865:24">3</literal></expr>)</condition> <block pos:start="865:27" pos:end="873:13">{<block_content pos:start="867:17" pos:end="871:57">

                <expr_stmt pos:start="867:17" pos:end="867:65"><expr pos:start="867:17" pos:end="867:64"><call pos:start="867:17" pos:end="867:64"><name pos:start="867:17" pos:end="867:29">gen_lea_modrm</name><argument_list pos:start="867:30" pos:end="867:64">(<argument pos:start="867:31" pos:end="867:31"><expr pos:start="867:31" pos:end="867:31"><name pos:start="867:31" pos:end="867:31">s</name></expr></argument>, <argument pos:start="867:34" pos:end="867:38"><expr pos:start="867:34" pos:end="867:38"><name pos:start="867:34" pos:end="867:38">modrm</name></expr></argument>, <argument pos:start="867:41" pos:end="867:49"><expr pos:start="867:41" pos:end="867:49"><operator pos:start="867:41" pos:end="867:41">&amp;</operator><name pos:start="867:42" pos:end="867:49">reg_addr</name></expr></argument>, <argument pos:start="867:52" pos:end="867:63"><expr pos:start="867:52" pos:end="867:63"><operator pos:start="867:52" pos:end="867:52">&amp;</operator><name pos:start="867:53" pos:end="867:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="869:17" pos:end="869:58"><expr pos:start="869:17" pos:end="869:57"><name pos:start="869:17" pos:end="869:26">op2_offset</name> <operator pos:start="869:28" pos:end="869:28">=</operator> <call pos:start="869:30" pos:end="869:57"><name pos:start="869:30" pos:end="869:37">offsetof</name><argument_list pos:start="869:38" pos:end="869:57">(<argument pos:start="869:39" pos:end="869:49"><expr pos:start="869:39" pos:end="869:49"><name pos:start="869:39" pos:end="869:49">CPUX86State</name></expr></argument>,<argument pos:start="869:51" pos:end="869:56"><expr pos:start="869:51" pos:end="869:56"><name pos:start="869:51" pos:end="869:56">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="871:17" pos:end="871:57"><expr pos:start="871:17" pos:end="871:56"><call pos:start="871:17" pos:end="871:56"><name pos:start="871:17" pos:end="871:30">gen_ldo_env_A0</name><argument_list pos:start="871:31" pos:end="871:56">(<argument pos:start="871:32" pos:end="871:43"><expr pos:start="871:32" pos:end="871:43"><name pos:start="871:32" pos:end="871:43"><name pos:start="871:32" pos:end="871:32">s</name><operator pos:start="871:33" pos:end="871:34">-&gt;</operator><name pos:start="871:35" pos:end="871:43">mem_index</name></name></expr></argument>, <argument pos:start="871:46" pos:end="871:55"><expr pos:start="871:46" pos:end="871:55"><name pos:start="871:46" pos:end="871:55">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="873:15" pos:end="879:13">else <block pos:start="873:20" pos:end="879:13">{<block_content pos:start="875:17" pos:end="877:64">

                <expr_stmt pos:start="875:17" pos:end="875:44"><expr pos:start="875:17" pos:end="875:43"><name pos:start="875:17" pos:end="875:18">rm</name> <operator pos:start="875:20" pos:end="875:20">=</operator> <operator pos:start="875:22" pos:end="875:22">(</operator><name pos:start="875:23" pos:end="875:27">modrm</name> <operator pos:start="875:29" pos:end="875:29">&amp;</operator> <literal type="number" pos:start="875:31" pos:end="875:31">7</literal><operator pos:start="875:32" pos:end="875:32">)</operator> <operator pos:start="875:34" pos:end="875:34">|</operator> <call pos:start="875:36" pos:end="875:43"><name pos:start="875:36" pos:end="875:40">REX_B</name><argument_list pos:start="875:41" pos:end="875:43">(<argument pos:start="875:42" pos:end="875:42"><expr pos:start="875:42" pos:end="875:42"><name pos:start="875:42" pos:end="875:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="877:17" pos:end="877:64"><expr pos:start="877:17" pos:end="877:63"><name pos:start="877:17" pos:end="877:26">op2_offset</name> <operator pos:start="877:28" pos:end="877:28">=</operator> <call pos:start="877:30" pos:end="877:63"><name pos:start="877:30" pos:end="877:37">offsetof</name><argument_list pos:start="877:38" pos:end="877:63">(<argument pos:start="877:39" pos:end="877:49"><expr pos:start="877:39" pos:end="877:49"><name pos:start="877:39" pos:end="877:49">CPUX86State</name></expr></argument>,<argument pos:start="877:51" pos:end="877:62"><expr pos:start="877:51" pos:end="877:62"><name pos:start="877:51" pos:end="877:62"><name pos:start="877:51" pos:end="877:58">xmm_regs</name><index pos:start="877:59" pos:end="877:62">[<expr pos:start="877:60" pos:end="877:61"><name pos:start="877:60" pos:end="877:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="881:13" pos:end="881:67"><expr pos:start="881:13" pos:end="881:66"><name pos:start="881:13" pos:end="881:22">op1_offset</name> <operator pos:start="881:24" pos:end="881:24">=</operator> <call pos:start="881:26" pos:end="881:66"><name pos:start="881:26" pos:end="881:33">offsetof</name><argument_list pos:start="881:34" pos:end="881:66">(<argument pos:start="881:35" pos:end="881:45"><expr pos:start="881:35" pos:end="881:45"><name pos:start="881:35" pos:end="881:45">CPUX86State</name></expr></argument>,<argument pos:start="881:47" pos:end="881:65"><expr pos:start="881:47" pos:end="881:65"><name pos:start="881:47" pos:end="881:61"><name pos:start="881:47" pos:end="881:52">fpregs</name><index pos:start="881:53" pos:end="881:61">[<expr pos:start="881:54" pos:end="881:60"><name pos:start="881:54" pos:end="881:56">reg</name> <operator pos:start="881:58" pos:end="881:58">&amp;</operator> <literal type="number" pos:start="881:60" pos:end="881:60">7</literal></expr>]</index></name><operator pos:start="881:62" pos:end="881:62">.</operator><name pos:start="881:63" pos:end="881:65">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="883:13" pos:end="883:60"><expr pos:start="883:13" pos:end="883:59"><call pos:start="883:13" pos:end="883:59"><name pos:start="883:13" pos:end="883:28">tcg_gen_addi_ptr</name><argument_list pos:start="883:29" pos:end="883:59">(<argument pos:start="883:30" pos:end="883:37"><expr pos:start="883:30" pos:end="883:37"><name pos:start="883:30" pos:end="883:37">cpu_ptr0</name></expr></argument>, <argument pos:start="883:40" pos:end="883:46"><expr pos:start="883:40" pos:end="883:46"><name pos:start="883:40" pos:end="883:46">cpu_env</name></expr></argument>, <argument pos:start="883:49" pos:end="883:58"><expr pos:start="883:49" pos:end="883:58"><name pos:start="883:49" pos:end="883:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="885:13" pos:end="885:60"><expr pos:start="885:13" pos:end="885:59"><call pos:start="885:13" pos:end="885:59"><name pos:start="885:13" pos:end="885:28">tcg_gen_addi_ptr</name><argument_list pos:start="885:29" pos:end="885:59">(<argument pos:start="885:30" pos:end="885:37"><expr pos:start="885:30" pos:end="885:37"><name pos:start="885:30" pos:end="885:37">cpu_ptr1</name></expr></argument>, <argument pos:start="885:40" pos:end="885:46"><expr pos:start="885:40" pos:end="885:46"><name pos:start="885:40" pos:end="885:46">cpu_env</name></expr></argument>, <argument pos:start="885:49" pos:end="885:58"><expr pos:start="885:49" pos:end="885:58"><name pos:start="885:49" pos:end="885:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="887:13" pos:end="913:13">switch<condition pos:start="887:19" pos:end="887:21">(<expr pos:start="887:20" pos:end="887:20"><name pos:start="887:20" pos:end="887:20">b</name></expr>)</condition> <block pos:start="887:23" pos:end="913:13">{<block_content pos:start="889:13" pos:end="911:22">

            <case pos:start="889:13" pos:end="889:23">case <expr pos:start="889:18" pos:end="889:22"><literal type="number" pos:start="889:18" pos:end="889:22">0x02c</literal></expr>:</case>

                <expr_stmt pos:start="891:17" pos:end="891:73"><expr pos:start="891:17" pos:end="891:72"><call pos:start="891:17" pos:end="891:72"><name pos:start="891:17" pos:end="891:34">tcg_gen_helper_0_2</name><argument_list pos:start="891:35" pos:end="891:72">(<argument pos:start="891:36" pos:end="891:51"><expr pos:start="891:36" pos:end="891:51"><name pos:start="891:36" pos:end="891:51">helper_cvttps2pi</name></expr></argument>, <argument pos:start="891:54" pos:end="891:61"><expr pos:start="891:54" pos:end="891:61"><name pos:start="891:54" pos:end="891:61">cpu_ptr0</name></expr></argument>, <argument pos:start="891:64" pos:end="891:71"><expr pos:start="891:64" pos:end="891:71"><name pos:start="891:64" pos:end="891:71">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="893:17" pos:end="893:22">break;</break>

            <case pos:start="895:13" pos:end="895:23">case <expr pos:start="895:18" pos:end="895:22"><literal type="number" pos:start="895:18" pos:end="895:22">0x12c</literal></expr>:</case>

                <expr_stmt pos:start="897:17" pos:end="897:73"><expr pos:start="897:17" pos:end="897:72"><call pos:start="897:17" pos:end="897:72"><name pos:start="897:17" pos:end="897:34">tcg_gen_helper_0_2</name><argument_list pos:start="897:35" pos:end="897:72">(<argument pos:start="897:36" pos:end="897:51"><expr pos:start="897:36" pos:end="897:51"><name pos:start="897:36" pos:end="897:51">helper_cvttpd2pi</name></expr></argument>, <argument pos:start="897:54" pos:end="897:61"><expr pos:start="897:54" pos:end="897:61"><name pos:start="897:54" pos:end="897:61">cpu_ptr0</name></expr></argument>, <argument pos:start="897:64" pos:end="897:71"><expr pos:start="897:64" pos:end="897:71"><name pos:start="897:64" pos:end="897:71">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="899:17" pos:end="899:22">break;</break>

            <case pos:start="901:13" pos:end="901:23">case <expr pos:start="901:18" pos:end="901:22"><literal type="number" pos:start="901:18" pos:end="901:22">0x02d</literal></expr>:</case>

                <expr_stmt pos:start="903:17" pos:end="903:72"><expr pos:start="903:17" pos:end="903:71"><call pos:start="903:17" pos:end="903:71"><name pos:start="903:17" pos:end="903:34">tcg_gen_helper_0_2</name><argument_list pos:start="903:35" pos:end="903:71">(<argument pos:start="903:36" pos:end="903:50"><expr pos:start="903:36" pos:end="903:50"><name pos:start="903:36" pos:end="903:50">helper_cvtps2pi</name></expr></argument>, <argument pos:start="903:53" pos:end="903:60"><expr pos:start="903:53" pos:end="903:60"><name pos:start="903:53" pos:end="903:60">cpu_ptr0</name></expr></argument>, <argument pos:start="903:63" pos:end="903:70"><expr pos:start="903:63" pos:end="903:70"><name pos:start="903:63" pos:end="903:70">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="905:17" pos:end="905:22">break;</break>

            <case pos:start="907:13" pos:end="907:23">case <expr pos:start="907:18" pos:end="907:22"><literal type="number" pos:start="907:18" pos:end="907:22">0x12d</literal></expr>:</case>

                <expr_stmt pos:start="909:17" pos:end="909:72"><expr pos:start="909:17" pos:end="909:71"><call pos:start="909:17" pos:end="909:71"><name pos:start="909:17" pos:end="909:34">tcg_gen_helper_0_2</name><argument_list pos:start="909:35" pos:end="909:71">(<argument pos:start="909:36" pos:end="909:50"><expr pos:start="909:36" pos:end="909:50"><name pos:start="909:36" pos:end="909:50">helper_cvtpd2pi</name></expr></argument>, <argument pos:start="909:53" pos:end="909:60"><expr pos:start="909:53" pos:end="909:60"><name pos:start="909:53" pos:end="909:60">cpu_ptr0</name></expr></argument>, <argument pos:start="909:63" pos:end="909:70"><expr pos:start="909:63" pos:end="909:70"><name pos:start="909:63" pos:end="909:70">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="911:17" pos:end="911:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="915:13" pos:end="915:18">break;</break>

        <case pos:start="917:9" pos:end="917:19">case <expr pos:start="917:14" pos:end="917:18"><literal type="number" pos:start="917:14" pos:end="917:18">0x22c</literal></expr>:</case> <comment type="block" pos:start="917:21" pos:end="917:35">/* cvttss2si */</comment>

        <case pos:start="919:9" pos:end="919:19">case <expr pos:start="919:14" pos:end="919:18"><literal type="number" pos:start="919:14" pos:end="919:18">0x32c</literal></expr>:</case> <comment type="block" pos:start="919:21" pos:end="919:35">/* cvttsd2si */</comment>

        <case pos:start="921:9" pos:end="921:19">case <expr pos:start="921:14" pos:end="921:18"><literal type="number" pos:start="921:14" pos:end="921:18">0x22d</literal></expr>:</case> <comment type="block" pos:start="921:21" pos:end="921:34">/* cvtss2si */</comment>

        <case pos:start="923:9" pos:end="923:19">case <expr pos:start="923:14" pos:end="923:18"><literal type="number" pos:start="923:14" pos:end="923:18">0x32d</literal></expr>:</case> <comment type="block" pos:start="923:21" pos:end="923:34">/* cvtsd2si */</comment>

            <expr_stmt pos:start="925:13" pos:end="925:53"><expr pos:start="925:13" pos:end="925:52"><name pos:start="925:13" pos:end="925:14">ot</name> <operator pos:start="925:16" pos:end="925:16">=</operator> <ternary pos:start="925:18" pos:end="925:52"><condition pos:start="925:18" pos:end="925:34"><expr pos:start="925:18" pos:end="925:32"><operator pos:start="925:18" pos:end="925:18">(</operator><name pos:start="925:19" pos:end="925:26"><name pos:start="925:19" pos:end="925:19">s</name><operator pos:start="925:20" pos:end="925:21">-&gt;</operator><name pos:start="925:22" pos:end="925:26">dflag</name></name> <operator pos:start="925:28" pos:end="925:29">==</operator> <literal type="number" pos:start="925:31" pos:end="925:31">2</literal><operator pos:start="925:32" pos:end="925:32">)</operator></expr> ?</condition><then pos:start="925:36" pos:end="925:42"> <expr pos:start="925:36" pos:end="925:42"><name pos:start="925:36" pos:end="925:42">OT_QUAD</name></expr> </then><else pos:start="925:44" pos:end="925:52">: <expr pos:start="925:46" pos:end="925:52"><name pos:start="925:46" pos:end="925:52">OT_LONG</name></expr></else></ternary></expr>;</expr_stmt>

            <if_stmt pos:start="927:13" pos:end="951:13"><if pos:start="927:13" pos:end="945:13">if <condition pos:start="927:16" pos:end="927:25">(<expr pos:start="927:17" pos:end="927:24"><name pos:start="927:17" pos:end="927:19">mod</name> <operator pos:start="927:21" pos:end="927:22">!=</operator> <literal type="number" pos:start="927:24" pos:end="927:24">3</literal></expr>)</condition> <block pos:start="927:27" pos:end="945:13">{<block_content pos:start="929:17" pos:end="943:58">

                <expr_stmt pos:start="929:17" pos:end="929:65"><expr pos:start="929:17" pos:end="929:64"><call pos:start="929:17" pos:end="929:64"><name pos:start="929:17" pos:end="929:29">gen_lea_modrm</name><argument_list pos:start="929:30" pos:end="929:64">(<argument pos:start="929:31" pos:end="929:31"><expr pos:start="929:31" pos:end="929:31"><name pos:start="929:31" pos:end="929:31">s</name></expr></argument>, <argument pos:start="929:34" pos:end="929:38"><expr pos:start="929:34" pos:end="929:38"><name pos:start="929:34" pos:end="929:38">modrm</name></expr></argument>, <argument pos:start="929:41" pos:end="929:49"><expr pos:start="929:41" pos:end="929:49"><operator pos:start="929:41" pos:end="929:41">&amp;</operator><name pos:start="929:42" pos:end="929:49">reg_addr</name></expr></argument>, <argument pos:start="929:52" pos:end="929:63"><expr pos:start="929:52" pos:end="929:63"><operator pos:start="929:52" pos:end="929:52">&amp;</operator><name pos:start="929:53" pos:end="929:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="931:17" pos:end="941:17"><if pos:start="931:17" pos:end="935:17">if <condition pos:start="931:20" pos:end="931:33">(<expr pos:start="931:21" pos:end="931:32"><operator pos:start="931:21" pos:end="931:21">(</operator><name pos:start="931:22" pos:end="931:22">b</name> <operator pos:start="931:24" pos:end="931:25">&gt;&gt;</operator> <literal type="number" pos:start="931:27" pos:end="931:27">8</literal><operator pos:start="931:28" pos:end="931:28">)</operator> <operator pos:start="931:30" pos:end="931:30">&amp;</operator> <literal type="number" pos:start="931:32" pos:end="931:32">1</literal></expr>)</condition> <block pos:start="931:35" pos:end="935:17">{<block_content pos:start="933:21" pos:end="933:88">

                    <expr_stmt pos:start="933:21" pos:end="933:88"><expr pos:start="933:21" pos:end="933:87"><call pos:start="933:21" pos:end="933:87"><name pos:start="933:21" pos:end="933:34">gen_ldq_env_A0</name><argument_list pos:start="933:35" pos:end="933:87">(<argument pos:start="933:36" pos:end="933:47"><expr pos:start="933:36" pos:end="933:47"><name pos:start="933:36" pos:end="933:47"><name pos:start="933:36" pos:end="933:36">s</name><operator pos:start="933:37" pos:end="933:38">-&gt;</operator><name pos:start="933:39" pos:end="933:47">mem_index</name></name></expr></argument>, <argument pos:start="933:50" pos:end="933:86"><expr pos:start="933:50" pos:end="933:86"><call pos:start="933:50" pos:end="933:86"><name pos:start="933:50" pos:end="933:57">offsetof</name><argument_list pos:start="933:58" pos:end="933:86">(<argument pos:start="933:59" pos:end="933:69"><expr pos:start="933:59" pos:end="933:69"><name pos:start="933:59" pos:end="933:69">CPUX86State</name></expr></argument>,<argument pos:start="933:71" pos:end="933:85"><expr pos:start="933:71" pos:end="933:85"><call pos:start="933:71" pos:end="933:85"><name pos:start="933:71" pos:end="933:82"><name pos:start="933:71" pos:end="933:76">xmm_t0</name><operator pos:start="933:77" pos:end="933:77">.</operator><name pos:start="933:78" pos:end="933:82">XMM_Q</name></name><argument_list pos:start="933:83" pos:end="933:85">(<argument pos:start="933:84" pos:end="933:84"><expr pos:start="933:84" pos:end="933:84"><literal type="number" pos:start="933:84" pos:end="933:84">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="935:19" pos:end="941:17">else <block pos:start="935:24" pos:end="941:17">{<block_content pos:start="937:21" pos:end="939:94">

                    <expr_stmt pos:start="937:21" pos:end="937:60"><expr pos:start="937:21" pos:end="937:59"><call pos:start="937:21" pos:end="937:59"><name pos:start="937:21" pos:end="937:35">gen_op_ld_T0_A0</name><argument_list pos:start="937:36" pos:end="937:59">(<argument pos:start="937:37" pos:end="937:58"><expr pos:start="937:37" pos:end="937:58"><name pos:start="937:37" pos:end="937:43">OT_LONG</name> <operator pos:start="937:45" pos:end="937:45">+</operator> <name pos:start="937:47" pos:end="937:58"><name pos:start="937:47" pos:end="937:47">s</name><operator pos:start="937:48" pos:end="937:49">-&gt;</operator><name pos:start="937:50" pos:end="937:58">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="939:21" pos:end="939:94"><expr pos:start="939:21" pos:end="939:93"><call pos:start="939:21" pos:end="939:93"><name pos:start="939:21" pos:end="939:35">tcg_gen_st32_tl</name><argument_list pos:start="939:36" pos:end="939:93">(<argument pos:start="939:37" pos:end="939:44"><expr pos:start="939:37" pos:end="939:44"><name pos:start="939:37" pos:end="939:44"><name pos:start="939:37" pos:end="939:41">cpu_T</name><index pos:start="939:42" pos:end="939:44">[<expr pos:start="939:43" pos:end="939:43"><literal type="number" pos:start="939:43" pos:end="939:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="939:47" pos:end="939:53"><expr pos:start="939:47" pos:end="939:53"><name pos:start="939:47" pos:end="939:53">cpu_env</name></expr></argument>, <argument pos:start="939:56" pos:end="939:92"><expr pos:start="939:56" pos:end="939:92"><call pos:start="939:56" pos:end="939:92"><name pos:start="939:56" pos:end="939:63">offsetof</name><argument_list pos:start="939:64" pos:end="939:92">(<argument pos:start="939:65" pos:end="939:75"><expr pos:start="939:65" pos:end="939:75"><name pos:start="939:65" pos:end="939:75">CPUX86State</name></expr></argument>,<argument pos:start="939:77" pos:end="939:91"><expr pos:start="939:77" pos:end="939:91"><call pos:start="939:77" pos:end="939:91"><name pos:start="939:77" pos:end="939:88"><name pos:start="939:77" pos:end="939:82">xmm_t0</name><operator pos:start="939:83" pos:end="939:83">.</operator><name pos:start="939:84" pos:end="939:88">XMM_L</name></name><argument_list pos:start="939:89" pos:end="939:91">(<argument pos:start="939:90" pos:end="939:90"><expr pos:start="939:90" pos:end="939:90"><literal type="number" pos:start="939:90" pos:end="939:90">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="943:17" pos:end="943:58"><expr pos:start="943:17" pos:end="943:57"><name pos:start="943:17" pos:end="943:26">op2_offset</name> <operator pos:start="943:28" pos:end="943:28">=</operator> <call pos:start="943:30" pos:end="943:57"><name pos:start="943:30" pos:end="943:37">offsetof</name><argument_list pos:start="943:38" pos:end="943:57">(<argument pos:start="943:39" pos:end="943:49"><expr pos:start="943:39" pos:end="943:49"><name pos:start="943:39" pos:end="943:49">CPUX86State</name></expr></argument>,<argument pos:start="943:51" pos:end="943:56"><expr pos:start="943:51" pos:end="943:56"><name pos:start="943:51" pos:end="943:56">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="945:15" pos:end="951:13">else <block pos:start="945:20" pos:end="951:13">{<block_content pos:start="947:17" pos:end="949:64">

                <expr_stmt pos:start="947:17" pos:end="947:44"><expr pos:start="947:17" pos:end="947:43"><name pos:start="947:17" pos:end="947:18">rm</name> <operator pos:start="947:20" pos:end="947:20">=</operator> <operator pos:start="947:22" pos:end="947:22">(</operator><name pos:start="947:23" pos:end="947:27">modrm</name> <operator pos:start="947:29" pos:end="947:29">&amp;</operator> <literal type="number" pos:start="947:31" pos:end="947:31">7</literal><operator pos:start="947:32" pos:end="947:32">)</operator> <operator pos:start="947:34" pos:end="947:34">|</operator> <call pos:start="947:36" pos:end="947:43"><name pos:start="947:36" pos:end="947:40">REX_B</name><argument_list pos:start="947:41" pos:end="947:43">(<argument pos:start="947:42" pos:end="947:42"><expr pos:start="947:42" pos:end="947:42"><name pos:start="947:42" pos:end="947:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="949:17" pos:end="949:64"><expr pos:start="949:17" pos:end="949:63"><name pos:start="949:17" pos:end="949:26">op2_offset</name> <operator pos:start="949:28" pos:end="949:28">=</operator> <call pos:start="949:30" pos:end="949:63"><name pos:start="949:30" pos:end="949:37">offsetof</name><argument_list pos:start="949:38" pos:end="949:63">(<argument pos:start="949:39" pos:end="949:49"><expr pos:start="949:39" pos:end="949:49"><name pos:start="949:39" pos:end="949:49">CPUX86State</name></expr></argument>,<argument pos:start="949:51" pos:end="949:62"><expr pos:start="949:51" pos:end="949:62"><name pos:start="949:51" pos:end="949:62"><name pos:start="949:51" pos:end="949:58">xmm_regs</name><index pos:start="949:59" pos:end="949:62">[<expr pos:start="949:60" pos:end="949:61"><name pos:start="949:60" pos:end="949:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="953:13" pos:end="955:49"><expr pos:start="953:13" pos:end="955:48"><name pos:start="953:13" pos:end="953:19">sse_op2</name> <operator pos:start="953:21" pos:end="953:21">=</operator> <name pos:start="953:23" pos:end="955:48"><name pos:start="953:23" pos:end="953:35">sse_op_table3</name><index pos:start="953:36" pos:end="955:48">[<expr pos:start="953:37" pos:end="955:47"><operator pos:start="953:37" pos:end="953:37">(</operator><name pos:start="953:38" pos:end="953:45"><name pos:start="953:38" pos:end="953:38">s</name><operator pos:start="953:39" pos:end="953:40">-&gt;</operator><name pos:start="953:41" pos:end="953:45">dflag</name></name> <operator pos:start="953:47" pos:end="953:48">==</operator> <literal type="number" pos:start="953:50" pos:end="953:50">2</literal><operator pos:start="953:51" pos:end="953:51">)</operator> <operator pos:start="953:53" pos:end="953:53">*</operator> <literal type="number" pos:start="953:55" pos:end="953:57">2</literal> <operator pos:start="953:57" pos:end="953:57">+</operator> <operator pos:start="953:59" pos:end="953:59">(</operator><operator pos:start="953:60" pos:end="953:60">(</operator><name pos:start="953:61" pos:end="953:61">b</name> <operator pos:start="953:63" pos:end="953:64">&gt;&gt;</operator> <literal type="number" pos:start="953:66" pos:end="953:66">8</literal><operator pos:start="953:67" pos:end="953:67">)</operator> <operator pos:start="953:69" pos:end="953:69">-</operator> <literal type="number" pos:start="953:71" pos:end="953:71">2</literal><operator pos:start="953:72" pos:end="953:72">)</operator> <operator pos:start="953:74" pos:end="953:74">+</operator> <literal type="number" pos:start="953:76" pos:end="953:78">4</literal> <operator pos:start="953:78" pos:end="953:78">+</operator>

                                    <operator pos:start="955:37" pos:end="955:37">(</operator><name pos:start="955:38" pos:end="955:38">b</name> <operator pos:start="955:40" pos:end="955:40">&amp;</operator> <literal type="number" pos:start="955:42" pos:end="955:42">1</literal><operator pos:start="955:43" pos:end="955:43">)</operator> <operator pos:start="955:45" pos:end="955:45">*</operator> <literal type="number" pos:start="955:47" pos:end="955:47">4</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="957:13" pos:end="957:60"><expr pos:start="957:13" pos:end="957:59"><call pos:start="957:13" pos:end="957:59"><name pos:start="957:13" pos:end="957:28">tcg_gen_addi_ptr</name><argument_list pos:start="957:29" pos:end="957:59">(<argument pos:start="957:30" pos:end="957:37"><expr pos:start="957:30" pos:end="957:37"><name pos:start="957:30" pos:end="957:37">cpu_ptr0</name></expr></argument>, <argument pos:start="957:40" pos:end="957:46"><expr pos:start="957:40" pos:end="957:46"><name pos:start="957:40" pos:end="957:46">cpu_env</name></expr></argument>, <argument pos:start="957:49" pos:end="957:58"><expr pos:start="957:49" pos:end="957:58"><name pos:start="957:49" pos:end="957:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="959:13" pos:end="969:13"><if pos:start="959:13" pos:end="965:13">if <condition pos:start="959:16" pos:end="959:30">(<expr pos:start="959:17" pos:end="959:29"><name pos:start="959:17" pos:end="959:18">ot</name> <operator pos:start="959:20" pos:end="959:21">==</operator> <name pos:start="959:23" pos:end="959:29">OT_LONG</name></expr>)</condition> <block pos:start="959:32" pos:end="965:13">{<block_content pos:start="961:17" pos:end="963:60">

                <expr_stmt pos:start="961:17" pos:end="961:68"><expr pos:start="961:17" pos:end="961:67"><call pos:start="961:17" pos:end="961:67"><name pos:start="961:17" pos:end="961:34">tcg_gen_helper_1_1</name><argument_list pos:start="961:35" pos:end="961:67">(<argument pos:start="961:36" pos:end="961:42"><expr pos:start="961:36" pos:end="961:42"><name pos:start="961:36" pos:end="961:42">sse_op2</name></expr></argument>, <argument pos:start="961:45" pos:end="961:56"><expr pos:start="961:45" pos:end="961:56"><name pos:start="961:45" pos:end="961:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="961:59" pos:end="961:66"><expr pos:start="961:59" pos:end="961:66"><name pos:start="961:59" pos:end="961:66">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="963:17" pos:end="963:60"><expr pos:start="963:17" pos:end="963:59"><call pos:start="963:17" pos:end="963:59"><name pos:start="963:17" pos:end="963:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="963:36" pos:end="963:59">(<argument pos:start="963:37" pos:end="963:44"><expr pos:start="963:37" pos:end="963:44"><name pos:start="963:37" pos:end="963:44"><name pos:start="963:37" pos:end="963:41">cpu_T</name><index pos:start="963:42" pos:end="963:44">[<expr pos:start="963:43" pos:end="963:43"><literal type="number" pos:start="963:43" pos:end="963:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="963:47" pos:end="963:58"><expr pos:start="963:47" pos:end="963:58"><name pos:start="963:47" pos:end="963:58">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="965:15" pos:end="969:13">else <block pos:start="965:20" pos:end="969:13">{<block_content pos:start="967:17" pos:end="967:64">

                <expr_stmt pos:start="967:17" pos:end="967:64"><expr pos:start="967:17" pos:end="967:63"><call pos:start="967:17" pos:end="967:63"><name pos:start="967:17" pos:end="967:34">tcg_gen_helper_1_1</name><argument_list pos:start="967:35" pos:end="967:63">(<argument pos:start="967:36" pos:end="967:42"><expr pos:start="967:36" pos:end="967:42"><name pos:start="967:36" pos:end="967:42">sse_op2</name></expr></argument>, <argument pos:start="967:45" pos:end="967:52"><expr pos:start="967:45" pos:end="967:52"><name pos:start="967:45" pos:end="967:52"><name pos:start="967:45" pos:end="967:49">cpu_T</name><index pos:start="967:50" pos:end="967:52">[<expr pos:start="967:51" pos:end="967:51"><literal type="number" pos:start="967:51" pos:end="967:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="967:55" pos:end="967:62"><expr pos:start="967:55" pos:end="967:62"><name pos:start="967:55" pos:end="967:62">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="971:13" pos:end="971:39"><expr pos:start="971:13" pos:end="971:38"><call pos:start="971:13" pos:end="971:38"><name pos:start="971:13" pos:end="971:29">gen_op_mov_reg_T0</name><argument_list pos:start="971:30" pos:end="971:38">(<argument pos:start="971:31" pos:end="971:32"><expr pos:start="971:31" pos:end="971:32"><name pos:start="971:31" pos:end="971:32">ot</name></expr></argument>, <argument pos:start="971:35" pos:end="971:37"><expr pos:start="971:35" pos:end="971:37"><name pos:start="971:35" pos:end="971:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="973:13" pos:end="973:18">break;</break>

        <case pos:start="975:9" pos:end="975:18">case <expr pos:start="975:14" pos:end="975:17"><literal type="number" pos:start="975:14" pos:end="975:17">0xc4</literal></expr>:</case> <comment type="block" pos:start="975:20" pos:end="975:31">/* pinsrw */</comment>

        <case pos:start="977:9" pos:end="977:19">case <expr pos:start="977:14" pos:end="977:18"><literal type="number" pos:start="977:14" pos:end="977:18">0x1c4</literal></expr>:</case>

            <expr_stmt pos:start="979:13" pos:end="979:30"><expr pos:start="979:13" pos:end="979:29"><name pos:start="979:13" pos:end="979:25"><name pos:start="979:13" pos:end="979:13">s</name><operator pos:start="979:14" pos:end="979:15">-&gt;</operator><name pos:start="979:16" pos:end="979:25">rip_offset</name></name> <operator pos:start="979:27" pos:end="979:27">=</operator> <literal type="number" pos:start="979:29" pos:end="979:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="981:13" pos:end="981:58"><expr pos:start="981:13" pos:end="981:57"><call pos:start="981:13" pos:end="981:57"><name pos:start="981:13" pos:end="981:26">gen_ldst_modrm</name><argument_list pos:start="981:27" pos:end="981:57">(<argument pos:start="981:28" pos:end="981:28"><expr pos:start="981:28" pos:end="981:28"><name pos:start="981:28" pos:end="981:28">s</name></expr></argument>, <argument pos:start="981:31" pos:end="981:35"><expr pos:start="981:31" pos:end="981:35"><name pos:start="981:31" pos:end="981:35">modrm</name></expr></argument>, <argument pos:start="981:38" pos:end="981:44"><expr pos:start="981:38" pos:end="981:44"><name pos:start="981:38" pos:end="981:44">OT_WORD</name></expr></argument>, <argument pos:start="981:47" pos:end="981:53"><expr pos:start="981:47" pos:end="981:53"><name pos:start="981:47" pos:end="981:53">OR_TMP0</name></expr></argument>, <argument pos:start="981:56" pos:end="981:56"><expr pos:start="981:56" pos:end="981:56"><literal type="number" pos:start="981:56" pos:end="981:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="983:13" pos:end="983:37"><expr pos:start="983:13" pos:end="983:36"><name pos:start="983:13" pos:end="983:15">val</name> <operator pos:start="983:17" pos:end="983:17">=</operator> <call pos:start="983:19" pos:end="983:36"><name pos:start="983:19" pos:end="983:27">ldub_code</name><argument_list pos:start="983:28" pos:end="983:36">(<argument pos:start="983:29" pos:end="983:35"><expr pos:start="983:29" pos:end="983:35"><name pos:start="983:29" pos:end="983:33"><name pos:start="983:29" pos:end="983:29">s</name><operator pos:start="983:30" pos:end="983:31">-&gt;</operator><name pos:start="983:32" pos:end="983:33">pc</name></name><operator pos:start="983:34" pos:end="983:35">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="985:13" pos:end="1001:13"><if pos:start="985:13" pos:end="993:13">if <condition pos:start="985:16" pos:end="985:19">(<expr pos:start="985:17" pos:end="985:18"><name pos:start="985:17" pos:end="985:18">b1</name></expr>)</condition> <block pos:start="985:21" pos:end="993:13">{<block_content pos:start="987:17" pos:end="991:80">

                <expr_stmt pos:start="987:17" pos:end="987:25"><expr pos:start="987:17" pos:end="987:24"><name pos:start="987:17" pos:end="987:19">val</name> <operator pos:start="987:21" pos:end="987:22">&amp;=</operator> <literal type="number" pos:start="987:24" pos:end="987:24">7</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="989:17" pos:end="991:80"><expr pos:start="989:17" pos:end="991:79"><call pos:start="989:17" pos:end="991:79"><name pos:start="989:17" pos:end="989:31">tcg_gen_st16_tl</name><argument_list pos:start="989:32" pos:end="991:79">(<argument pos:start="989:33" pos:end="989:40"><expr pos:start="989:33" pos:end="989:40"><name pos:start="989:33" pos:end="989:40"><name pos:start="989:33" pos:end="989:37">cpu_T</name><index pos:start="989:38" pos:end="989:40">[<expr pos:start="989:39" pos:end="989:39"><literal type="number" pos:start="989:39" pos:end="989:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="989:43" pos:end="989:49"><expr pos:start="989:43" pos:end="989:49"><name pos:start="989:43" pos:end="989:49">cpu_env</name></expr></argument>,

                                <argument pos:start="991:33" pos:end="991:78"><expr pos:start="991:33" pos:end="991:78"><call pos:start="991:33" pos:end="991:78"><name pos:start="991:33" pos:end="991:40">offsetof</name><argument_list pos:start="991:41" pos:end="991:78">(<argument pos:start="991:42" pos:end="991:52"><expr pos:start="991:42" pos:end="991:52"><name pos:start="991:42" pos:end="991:52">CPUX86State</name></expr></argument>,<argument pos:start="991:54" pos:end="991:77"><expr pos:start="991:54" pos:end="991:77"><name pos:start="991:54" pos:end="991:66"><name pos:start="991:54" pos:end="991:61">xmm_regs</name><index pos:start="991:62" pos:end="991:66">[<expr pos:start="991:63" pos:end="991:65"><name pos:start="991:63" pos:end="991:65">reg</name></expr>]</index></name><operator pos:start="991:67" pos:end="991:67">.</operator><call pos:start="991:68" pos:end="991:77"><name pos:start="991:68" pos:end="991:72">XMM_W</name><argument_list pos:start="991:73" pos:end="991:77">(<argument pos:start="991:74" pos:end="991:76"><expr pos:start="991:74" pos:end="991:76"><name pos:start="991:74" pos:end="991:76">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="993:15" pos:end="1001:13">else <block pos:start="993:20" pos:end="1001:13">{<block_content pos:start="995:17" pos:end="999:82">

                <expr_stmt pos:start="995:17" pos:end="995:25"><expr pos:start="995:17" pos:end="995:24"><name pos:start="995:17" pos:end="995:19">val</name> <operator pos:start="995:21" pos:end="995:22">&amp;=</operator> <literal type="number" pos:start="995:24" pos:end="995:24">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="997:17" pos:end="999:82"><expr pos:start="997:17" pos:end="999:81"><call pos:start="997:17" pos:end="999:81"><name pos:start="997:17" pos:end="997:31">tcg_gen_st16_tl</name><argument_list pos:start="997:32" pos:end="999:81">(<argument pos:start="997:33" pos:end="997:40"><expr pos:start="997:33" pos:end="997:40"><name pos:start="997:33" pos:end="997:40"><name pos:start="997:33" pos:end="997:37">cpu_T</name><index pos:start="997:38" pos:end="997:40">[<expr pos:start="997:39" pos:end="997:39"><literal type="number" pos:start="997:39" pos:end="997:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="997:43" pos:end="997:49"><expr pos:start="997:43" pos:end="997:49"><name pos:start="997:43" pos:end="997:49">cpu_env</name></expr></argument>,

                                <argument pos:start="999:33" pos:end="999:80"><expr pos:start="999:33" pos:end="999:80"><call pos:start="999:33" pos:end="999:80"><name pos:start="999:33" pos:end="999:40">offsetof</name><argument_list pos:start="999:41" pos:end="999:80">(<argument pos:start="999:42" pos:end="999:52"><expr pos:start="999:42" pos:end="999:52"><name pos:start="999:42" pos:end="999:52">CPUX86State</name></expr></argument>,<argument pos:start="999:54" pos:end="999:79"><expr pos:start="999:54" pos:end="999:79"><name pos:start="999:54" pos:end="999:64"><name pos:start="999:54" pos:end="999:59">fpregs</name><index pos:start="999:60" pos:end="999:64">[<expr pos:start="999:61" pos:end="999:63"><name pos:start="999:61" pos:end="999:63">reg</name></expr>]</index></name><operator pos:start="999:65" pos:end="999:65">.</operator><call pos:start="999:66" pos:end="999:79"><name pos:start="999:66" pos:end="999:74"><name pos:start="999:66" pos:end="999:68">mmx</name><operator pos:start="999:69" pos:end="999:69">.</operator><name pos:start="999:70" pos:end="999:74">MMX_W</name></name><argument_list pos:start="999:75" pos:end="999:79">(<argument pos:start="999:76" pos:end="999:78"><expr pos:start="999:76" pos:end="999:78"><name pos:start="999:76" pos:end="999:78">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="1003:13" pos:end="1003:18">break;</break>

        <case pos:start="1005:9" pos:end="1005:18">case <expr pos:start="1005:14" pos:end="1005:17"><literal type="number" pos:start="1005:14" pos:end="1005:17">0xc5</literal></expr>:</case> <comment type="block" pos:start="1005:20" pos:end="1005:31">/* pextrw */</comment>

        <case pos:start="1007:9" pos:end="1007:19">case <expr pos:start="1007:14" pos:end="1007:18"><literal type="number" pos:start="1007:14" pos:end="1007:18">0x1c5</literal></expr>:</case>

            <if_stmt pos:start="1009:13" pos:end="1011:32"><if pos:start="1009:13" pos:end="1011:32">if <condition pos:start="1009:16" pos:end="1009:25">(<expr pos:start="1009:17" pos:end="1009:24"><name pos:start="1009:17" pos:end="1009:19">mod</name> <operator pos:start="1009:21" pos:end="1009:22">!=</operator> <literal type="number" pos:start="1009:24" pos:end="1009:24">3</literal></expr>)</condition><block type="pseudo" pos:start="1011:17" pos:end="1011:32"><block_content pos:start="1011:17" pos:end="1011:32">

                <goto pos:start="1011:17" pos:end="1011:32">goto <name pos:start="1011:22" pos:end="1011:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1013:13" pos:end="1013:53"><expr pos:start="1013:13" pos:end="1013:52"><name pos:start="1013:13" pos:end="1013:14">ot</name> <operator pos:start="1013:16" pos:end="1013:16">=</operator> <ternary pos:start="1013:18" pos:end="1013:52"><condition pos:start="1013:18" pos:end="1013:34"><expr pos:start="1013:18" pos:end="1013:32"><operator pos:start="1013:18" pos:end="1013:18">(</operator><name pos:start="1013:19" pos:end="1013:26"><name pos:start="1013:19" pos:end="1013:19">s</name><operator pos:start="1013:20" pos:end="1013:21">-&gt;</operator><name pos:start="1013:22" pos:end="1013:26">dflag</name></name> <operator pos:start="1013:28" pos:end="1013:29">==</operator> <literal type="number" pos:start="1013:31" pos:end="1013:31">2</literal><operator pos:start="1013:32" pos:end="1013:32">)</operator></expr> ?</condition><then pos:start="1013:36" pos:end="1013:42"> <expr pos:start="1013:36" pos:end="1013:42"><name pos:start="1013:36" pos:end="1013:42">OT_QUAD</name></expr> </then><else pos:start="1013:44" pos:end="1013:52">: <expr pos:start="1013:46" pos:end="1013:52"><name pos:start="1013:46" pos:end="1013:52">OT_LONG</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="1015:13" pos:end="1015:37"><expr pos:start="1015:13" pos:end="1015:36"><name pos:start="1015:13" pos:end="1015:15">val</name> <operator pos:start="1015:17" pos:end="1015:17">=</operator> <call pos:start="1015:19" pos:end="1015:36"><name pos:start="1015:19" pos:end="1015:27">ldub_code</name><argument_list pos:start="1015:28" pos:end="1015:36">(<argument pos:start="1015:29" pos:end="1015:35"><expr pos:start="1015:29" pos:end="1015:35"><name pos:start="1015:29" pos:end="1015:33"><name pos:start="1015:29" pos:end="1015:29">s</name><operator pos:start="1015:30" pos:end="1015:31">-&gt;</operator><name pos:start="1015:32" pos:end="1015:33">pc</name></name><operator pos:start="1015:34" pos:end="1015:35">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1017:13" pos:end="1037:13"><if pos:start="1017:13" pos:end="1027:13">if <condition pos:start="1017:16" pos:end="1017:19">(<expr pos:start="1017:17" pos:end="1017:18"><name pos:start="1017:17" pos:end="1017:18">b1</name></expr>)</condition> <block pos:start="1017:21" pos:end="1027:13">{<block_content pos:start="1019:17" pos:end="1025:80">

                <expr_stmt pos:start="1019:17" pos:end="1019:25"><expr pos:start="1019:17" pos:end="1019:24"><name pos:start="1019:17" pos:end="1019:19">val</name> <operator pos:start="1019:21" pos:end="1019:22">&amp;=</operator> <literal type="number" pos:start="1019:24" pos:end="1019:24">7</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1021:17" pos:end="1021:44"><expr pos:start="1021:17" pos:end="1021:43"><name pos:start="1021:17" pos:end="1021:18">rm</name> <operator pos:start="1021:20" pos:end="1021:20">=</operator> <operator pos:start="1021:22" pos:end="1021:22">(</operator><name pos:start="1021:23" pos:end="1021:27">modrm</name> <operator pos:start="1021:29" pos:end="1021:29">&amp;</operator> <literal type="number" pos:start="1021:31" pos:end="1021:31">7</literal><operator pos:start="1021:32" pos:end="1021:32">)</operator> <operator pos:start="1021:34" pos:end="1021:34">|</operator> <call pos:start="1021:36" pos:end="1021:43"><name pos:start="1021:36" pos:end="1021:40">REX_B</name><argument_list pos:start="1021:41" pos:end="1021:43">(<argument pos:start="1021:42" pos:end="1021:42"><expr pos:start="1021:42" pos:end="1021:42"><name pos:start="1021:42" pos:end="1021:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1023:17" pos:end="1025:80"><expr pos:start="1023:17" pos:end="1025:79"><call pos:start="1023:17" pos:end="1025:79"><name pos:start="1023:17" pos:end="1023:32">tcg_gen_ld16u_tl</name><argument_list pos:start="1023:33" pos:end="1025:79">(<argument pos:start="1023:34" pos:end="1023:41"><expr pos:start="1023:34" pos:end="1023:41"><name pos:start="1023:34" pos:end="1023:41"><name pos:start="1023:34" pos:end="1023:38">cpu_T</name><index pos:start="1023:39" pos:end="1023:41">[<expr pos:start="1023:40" pos:end="1023:40"><literal type="number" pos:start="1023:40" pos:end="1023:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1023:44" pos:end="1023:50"><expr pos:start="1023:44" pos:end="1023:50"><name pos:start="1023:44" pos:end="1023:50">cpu_env</name></expr></argument>,

                                 <argument pos:start="1025:34" pos:end="1025:78"><expr pos:start="1025:34" pos:end="1025:78"><call pos:start="1025:34" pos:end="1025:78"><name pos:start="1025:34" pos:end="1025:41">offsetof</name><argument_list pos:start="1025:42" pos:end="1025:78">(<argument pos:start="1025:43" pos:end="1025:53"><expr pos:start="1025:43" pos:end="1025:53"><name pos:start="1025:43" pos:end="1025:53">CPUX86State</name></expr></argument>,<argument pos:start="1025:55" pos:end="1025:77"><expr pos:start="1025:55" pos:end="1025:77"><name pos:start="1025:55" pos:end="1025:66"><name pos:start="1025:55" pos:end="1025:62">xmm_regs</name><index pos:start="1025:63" pos:end="1025:66">[<expr pos:start="1025:64" pos:end="1025:65"><name pos:start="1025:64" pos:end="1025:65">rm</name></expr>]</index></name><operator pos:start="1025:67" pos:end="1025:67">.</operator><call pos:start="1025:68" pos:end="1025:77"><name pos:start="1025:68" pos:end="1025:72">XMM_W</name><argument_list pos:start="1025:73" pos:end="1025:77">(<argument pos:start="1025:74" pos:end="1025:76"><expr pos:start="1025:74" pos:end="1025:76"><name pos:start="1025:74" pos:end="1025:76">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1027:15" pos:end="1037:13">else <block pos:start="1027:20" pos:end="1037:13">{<block_content pos:start="1029:17" pos:end="1035:81">

                <expr_stmt pos:start="1029:17" pos:end="1029:25"><expr pos:start="1029:17" pos:end="1029:24"><name pos:start="1029:17" pos:end="1029:19">val</name> <operator pos:start="1029:21" pos:end="1029:22">&amp;=</operator> <literal type="number" pos:start="1029:24" pos:end="1029:24">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1031:17" pos:end="1031:33"><expr pos:start="1031:17" pos:end="1031:32"><name pos:start="1031:17" pos:end="1031:18">rm</name> <operator pos:start="1031:20" pos:end="1031:20">=</operator> <operator pos:start="1031:22" pos:end="1031:22">(</operator><name pos:start="1031:23" pos:end="1031:27">modrm</name> <operator pos:start="1031:29" pos:end="1031:29">&amp;</operator> <literal type="number" pos:start="1031:31" pos:end="1031:31">7</literal><operator pos:start="1031:32" pos:end="1031:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1033:17" pos:end="1035:81"><expr pos:start="1033:17" pos:end="1035:80"><call pos:start="1033:17" pos:end="1035:80"><name pos:start="1033:17" pos:end="1033:32">tcg_gen_ld16u_tl</name><argument_list pos:start="1033:33" pos:end="1035:80">(<argument pos:start="1033:34" pos:end="1033:41"><expr pos:start="1033:34" pos:end="1033:41"><name pos:start="1033:34" pos:end="1033:41"><name pos:start="1033:34" pos:end="1033:38">cpu_T</name><index pos:start="1033:39" pos:end="1033:41">[<expr pos:start="1033:40" pos:end="1033:40"><literal type="number" pos:start="1033:40" pos:end="1033:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1033:44" pos:end="1033:50"><expr pos:start="1033:44" pos:end="1033:50"><name pos:start="1033:44" pos:end="1033:50">cpu_env</name></expr></argument>,

                                <argument pos:start="1035:33" pos:end="1035:79"><expr pos:start="1035:33" pos:end="1035:79"><call pos:start="1035:33" pos:end="1035:79"><name pos:start="1035:33" pos:end="1035:40">offsetof</name><argument_list pos:start="1035:41" pos:end="1035:79">(<argument pos:start="1035:42" pos:end="1035:52"><expr pos:start="1035:42" pos:end="1035:52"><name pos:start="1035:42" pos:end="1035:52">CPUX86State</name></expr></argument>,<argument pos:start="1035:54" pos:end="1035:78"><expr pos:start="1035:54" pos:end="1035:78"><name pos:start="1035:54" pos:end="1035:63"><name pos:start="1035:54" pos:end="1035:59">fpregs</name><index pos:start="1035:60" pos:end="1035:63">[<expr pos:start="1035:61" pos:end="1035:62"><name pos:start="1035:61" pos:end="1035:62">rm</name></expr>]</index></name><operator pos:start="1035:64" pos:end="1035:64">.</operator><call pos:start="1035:65" pos:end="1035:78"><name pos:start="1035:65" pos:end="1035:73"><name pos:start="1035:65" pos:end="1035:67">mmx</name><operator pos:start="1035:68" pos:end="1035:68">.</operator><name pos:start="1035:69" pos:end="1035:73">MMX_W</name></name><argument_list pos:start="1035:74" pos:end="1035:78">(<argument pos:start="1035:75" pos:end="1035:77"><expr pos:start="1035:75" pos:end="1035:77"><name pos:start="1035:75" pos:end="1035:77">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1039:13" pos:end="1039:45"><expr pos:start="1039:13" pos:end="1039:44"><name pos:start="1039:13" pos:end="1039:15">reg</name> <operator pos:start="1039:17" pos:end="1039:17">=</operator> <operator pos:start="1039:19" pos:end="1039:19">(</operator><operator pos:start="1039:20" pos:end="1039:20">(</operator><name pos:start="1039:21" pos:end="1039:25">modrm</name> <operator pos:start="1039:27" pos:end="1039:28">&gt;&gt;</operator> <literal type="number" pos:start="1039:30" pos:end="1039:30">3</literal><operator pos:start="1039:31" pos:end="1039:31">)</operator> <operator pos:start="1039:33" pos:end="1039:33">&amp;</operator> <literal type="number" pos:start="1039:35" pos:end="1039:35">7</literal><operator pos:start="1039:36" pos:end="1039:36">)</operator> <operator pos:start="1039:38" pos:end="1039:38">|</operator> <name pos:start="1039:40" pos:end="1039:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1041:13" pos:end="1041:39"><expr pos:start="1041:13" pos:end="1041:38"><call pos:start="1041:13" pos:end="1041:38"><name pos:start="1041:13" pos:end="1041:29">gen_op_mov_reg_T0</name><argument_list pos:start="1041:30" pos:end="1041:38">(<argument pos:start="1041:31" pos:end="1041:32"><expr pos:start="1041:31" pos:end="1041:32"><name pos:start="1041:31" pos:end="1041:32">ot</name></expr></argument>, <argument pos:start="1041:35" pos:end="1041:37"><expr pos:start="1041:35" pos:end="1041:37"><name pos:start="1041:35" pos:end="1041:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1043:13" pos:end="1043:18">break;</break>

        <case pos:start="1045:9" pos:end="1045:19">case <expr pos:start="1045:14" pos:end="1045:18"><literal type="number" pos:start="1045:14" pos:end="1045:18">0x1d6</literal></expr>:</case> <comment type="block" pos:start="1045:21" pos:end="1045:38">/* movq ea, xmm */</comment>

            <if_stmt pos:start="1047:13" pos:end="1063:13"><if pos:start="1047:13" pos:end="1053:13">if <condition pos:start="1047:16" pos:end="1047:25">(<expr pos:start="1047:17" pos:end="1047:24"><name pos:start="1047:17" pos:end="1047:19">mod</name> <operator pos:start="1047:21" pos:end="1047:22">!=</operator> <literal type="number" pos:start="1047:24" pos:end="1047:24">3</literal></expr>)</condition> <block pos:start="1047:27" pos:end="1053:13">{<block_content pos:start="1049:17" pos:end="1051:91">

                <expr_stmt pos:start="1049:17" pos:end="1049:65"><expr pos:start="1049:17" pos:end="1049:64"><call pos:start="1049:17" pos:end="1049:64"><name pos:start="1049:17" pos:end="1049:29">gen_lea_modrm</name><argument_list pos:start="1049:30" pos:end="1049:64">(<argument pos:start="1049:31" pos:end="1049:31"><expr pos:start="1049:31" pos:end="1049:31"><name pos:start="1049:31" pos:end="1049:31">s</name></expr></argument>, <argument pos:start="1049:34" pos:end="1049:38"><expr pos:start="1049:34" pos:end="1049:38"><name pos:start="1049:34" pos:end="1049:38">modrm</name></expr></argument>, <argument pos:start="1049:41" pos:end="1049:49"><expr pos:start="1049:41" pos:end="1049:49"><operator pos:start="1049:41" pos:end="1049:41">&amp;</operator><name pos:start="1049:42" pos:end="1049:49">reg_addr</name></expr></argument>, <argument pos:start="1049:52" pos:end="1049:63"><expr pos:start="1049:52" pos:end="1049:63"><operator pos:start="1049:52" pos:end="1049:52">&amp;</operator><name pos:start="1049:53" pos:end="1049:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1051:17" pos:end="1051:91"><expr pos:start="1051:17" pos:end="1051:90"><call pos:start="1051:17" pos:end="1051:90"><name pos:start="1051:17" pos:end="1051:30">gen_stq_env_A0</name><argument_list pos:start="1051:31" pos:end="1051:90">(<argument pos:start="1051:32" pos:end="1051:43"><expr pos:start="1051:32" pos:end="1051:43"><name pos:start="1051:32" pos:end="1051:43"><name pos:start="1051:32" pos:end="1051:32">s</name><operator pos:start="1051:33" pos:end="1051:34">-&gt;</operator><name pos:start="1051:35" pos:end="1051:43">mem_index</name></name></expr></argument>, <argument pos:start="1051:46" pos:end="1051:89"><expr pos:start="1051:46" pos:end="1051:89"><call pos:start="1051:46" pos:end="1051:89"><name pos:start="1051:46" pos:end="1051:53">offsetof</name><argument_list pos:start="1051:54" pos:end="1051:89">(<argument pos:start="1051:55" pos:end="1051:65"><expr pos:start="1051:55" pos:end="1051:65"><name pos:start="1051:55" pos:end="1051:65">CPUX86State</name></expr></argument>,<argument pos:start="1051:67" pos:end="1051:88"><expr pos:start="1051:67" pos:end="1051:88"><name pos:start="1051:67" pos:end="1051:79"><name pos:start="1051:67" pos:end="1051:74">xmm_regs</name><index pos:start="1051:75" pos:end="1051:79">[<expr pos:start="1051:76" pos:end="1051:78"><name pos:start="1051:76" pos:end="1051:78">reg</name></expr>]</index></name><operator pos:start="1051:80" pos:end="1051:80">.</operator><call pos:start="1051:81" pos:end="1051:88"><name pos:start="1051:81" pos:end="1051:85">XMM_Q</name><argument_list pos:start="1051:86" pos:end="1051:88">(<argument pos:start="1051:87" pos:end="1051:87"><expr pos:start="1051:87" pos:end="1051:87"><literal type="number" pos:start="1051:87" pos:end="1051:87">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1053:15" pos:end="1063:13">else <block pos:start="1053:20" pos:end="1063:13">{<block_content pos:start="1055:17" pos:end="1061:79">

                <expr_stmt pos:start="1055:17" pos:end="1055:44"><expr pos:start="1055:17" pos:end="1055:43"><name pos:start="1055:17" pos:end="1055:18">rm</name> <operator pos:start="1055:20" pos:end="1055:20">=</operator> <operator pos:start="1055:22" pos:end="1055:22">(</operator><name pos:start="1055:23" pos:end="1055:27">modrm</name> <operator pos:start="1055:29" pos:end="1055:29">&amp;</operator> <literal type="number" pos:start="1055:31" pos:end="1055:31">7</literal><operator pos:start="1055:32" pos:end="1055:32">)</operator> <operator pos:start="1055:34" pos:end="1055:34">|</operator> <call pos:start="1055:36" pos:end="1055:43"><name pos:start="1055:36" pos:end="1055:40">REX_B</name><argument_list pos:start="1055:41" pos:end="1055:43">(<argument pos:start="1055:42" pos:end="1055:42"><expr pos:start="1055:42" pos:end="1055:42"><name pos:start="1055:42" pos:end="1055:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1057:17" pos:end="1059:74"><expr pos:start="1057:17" pos:end="1059:73"><call pos:start="1057:17" pos:end="1059:73"><name pos:start="1057:17" pos:end="1057:27">gen_op_movq</name><argument_list pos:start="1057:28" pos:end="1059:73">(<argument pos:start="1057:29" pos:end="1057:71"><expr pos:start="1057:29" pos:end="1057:71"><call pos:start="1057:29" pos:end="1057:71"><name pos:start="1057:29" pos:end="1057:36">offsetof</name><argument_list pos:start="1057:37" pos:end="1057:71">(<argument pos:start="1057:38" pos:end="1057:48"><expr pos:start="1057:38" pos:end="1057:48"><name pos:start="1057:38" pos:end="1057:48">CPUX86State</name></expr></argument>,<argument pos:start="1057:50" pos:end="1057:70"><expr pos:start="1057:50" pos:end="1057:70"><name pos:start="1057:50" pos:end="1057:61"><name pos:start="1057:50" pos:end="1057:57">xmm_regs</name><index pos:start="1057:58" pos:end="1057:61">[<expr pos:start="1057:59" pos:end="1057:60"><name pos:start="1057:59" pos:end="1057:60">rm</name></expr>]</index></name><operator pos:start="1057:62" pos:end="1057:62">.</operator><call pos:start="1057:63" pos:end="1057:70"><name pos:start="1057:63" pos:end="1057:67">XMM_Q</name><argument_list pos:start="1057:68" pos:end="1057:70">(<argument pos:start="1057:69" pos:end="1057:69"><expr pos:start="1057:69" pos:end="1057:69"><literal type="number" pos:start="1057:69" pos:end="1057:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="1059:29" pos:end="1059:72"><expr pos:start="1059:29" pos:end="1059:72"><call pos:start="1059:29" pos:end="1059:72"><name pos:start="1059:29" pos:end="1059:36">offsetof</name><argument_list pos:start="1059:37" pos:end="1059:72">(<argument pos:start="1059:38" pos:end="1059:48"><expr pos:start="1059:38" pos:end="1059:48"><name pos:start="1059:38" pos:end="1059:48">CPUX86State</name></expr></argument>,<argument pos:start="1059:50" pos:end="1059:71"><expr pos:start="1059:50" pos:end="1059:71"><name pos:start="1059:50" pos:end="1059:62"><name pos:start="1059:50" pos:end="1059:57">xmm_regs</name><index pos:start="1059:58" pos:end="1059:62">[<expr pos:start="1059:59" pos:end="1059:61"><name pos:start="1059:59" pos:end="1059:61">reg</name></expr>]</index></name><operator pos:start="1059:63" pos:end="1059:63">.</operator><call pos:start="1059:64" pos:end="1059:71"><name pos:start="1059:64" pos:end="1059:68">XMM_Q</name><argument_list pos:start="1059:69" pos:end="1059:71">(<argument pos:start="1059:70" pos:end="1059:70"><expr pos:start="1059:70" pos:end="1059:70"><literal type="number" pos:start="1059:70" pos:end="1059:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1061:17" pos:end="1061:79"><expr pos:start="1061:17" pos:end="1061:78"><call pos:start="1061:17" pos:end="1061:78"><name pos:start="1061:17" pos:end="1061:33">gen_op_movq_env_0</name><argument_list pos:start="1061:34" pos:end="1061:78">(<argument pos:start="1061:35" pos:end="1061:77"><expr pos:start="1061:35" pos:end="1061:77"><call pos:start="1061:35" pos:end="1061:77"><name pos:start="1061:35" pos:end="1061:42">offsetof</name><argument_list pos:start="1061:43" pos:end="1061:77">(<argument pos:start="1061:44" pos:end="1061:54"><expr pos:start="1061:44" pos:end="1061:54"><name pos:start="1061:44" pos:end="1061:54">CPUX86State</name></expr></argument>,<argument pos:start="1061:56" pos:end="1061:76"><expr pos:start="1061:56" pos:end="1061:76"><name pos:start="1061:56" pos:end="1061:67"><name pos:start="1061:56" pos:end="1061:63">xmm_regs</name><index pos:start="1061:64" pos:end="1061:67">[<expr pos:start="1061:65" pos:end="1061:66"><name pos:start="1061:65" pos:end="1061:66">rm</name></expr>]</index></name><operator pos:start="1061:68" pos:end="1061:68">.</operator><call pos:start="1061:69" pos:end="1061:76"><name pos:start="1061:69" pos:end="1061:73">XMM_Q</name><argument_list pos:start="1061:74" pos:end="1061:76">(<argument pos:start="1061:75" pos:end="1061:75"><expr pos:start="1061:75" pos:end="1061:75"><literal type="number" pos:start="1061:75" pos:end="1061:75">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="1065:13" pos:end="1065:18">break;</break>

        <case pos:start="1067:9" pos:end="1067:19">case <expr pos:start="1067:14" pos:end="1067:18"><literal type="number" pos:start="1067:14" pos:end="1067:18">0x2d6</literal></expr>:</case> <comment type="block" pos:start="1067:21" pos:end="1067:33">/* movq2dq */</comment>

            <expr_stmt pos:start="1069:13" pos:end="1069:49"><expr pos:start="1069:13" pos:end="1069:48"><call pos:start="1069:13" pos:end="1069:48"><name pos:start="1069:13" pos:end="1069:30">tcg_gen_helper_0_0</name><argument_list pos:start="1069:31" pos:end="1069:48">(<argument pos:start="1069:32" pos:end="1069:47"><expr pos:start="1069:32" pos:end="1069:47"><name pos:start="1069:32" pos:end="1069:47">helper_enter_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1071:13" pos:end="1071:29"><expr pos:start="1071:13" pos:end="1071:28"><name pos:start="1071:13" pos:end="1071:14">rm</name> <operator pos:start="1071:16" pos:end="1071:16">=</operator> <operator pos:start="1071:18" pos:end="1071:18">(</operator><name pos:start="1071:19" pos:end="1071:23">modrm</name> <operator pos:start="1071:25" pos:end="1071:25">&amp;</operator> <literal type="number" pos:start="1071:27" pos:end="1071:27">7</literal><operator pos:start="1071:28" pos:end="1071:28">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1073:13" pos:end="1075:62"><expr pos:start="1073:13" pos:end="1075:61"><call pos:start="1073:13" pos:end="1075:61"><name pos:start="1073:13" pos:end="1073:23">gen_op_movq</name><argument_list pos:start="1073:24" pos:end="1075:61">(<argument pos:start="1073:25" pos:end="1073:68"><expr pos:start="1073:25" pos:end="1073:68"><call pos:start="1073:25" pos:end="1073:68"><name pos:start="1073:25" pos:end="1073:32">offsetof</name><argument_list pos:start="1073:33" pos:end="1073:68">(<argument pos:start="1073:34" pos:end="1073:44"><expr pos:start="1073:34" pos:end="1073:44"><name pos:start="1073:34" pos:end="1073:44">CPUX86State</name></expr></argument>,<argument pos:start="1073:46" pos:end="1073:67"><expr pos:start="1073:46" pos:end="1073:67"><name pos:start="1073:46" pos:end="1073:58"><name pos:start="1073:46" pos:end="1073:53">xmm_regs</name><index pos:start="1073:54" pos:end="1073:58">[<expr pos:start="1073:55" pos:end="1073:57"><name pos:start="1073:55" pos:end="1073:57">reg</name></expr>]</index></name><operator pos:start="1073:59" pos:end="1073:59">.</operator><call pos:start="1073:60" pos:end="1073:67"><name pos:start="1073:60" pos:end="1073:64">XMM_Q</name><argument_list pos:start="1073:65" pos:end="1073:67">(<argument pos:start="1073:66" pos:end="1073:66"><expr pos:start="1073:66" pos:end="1073:66"><literal type="number" pos:start="1073:66" pos:end="1073:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="1075:25" pos:end="1075:60"><expr pos:start="1075:25" pos:end="1075:60"><call pos:start="1075:25" pos:end="1075:60"><name pos:start="1075:25" pos:end="1075:32">offsetof</name><argument_list pos:start="1075:33" pos:end="1075:60">(<argument pos:start="1075:34" pos:end="1075:44"><expr pos:start="1075:34" pos:end="1075:44"><name pos:start="1075:34" pos:end="1075:44">CPUX86State</name></expr></argument>,<argument pos:start="1075:46" pos:end="1075:59"><expr pos:start="1075:46" pos:end="1075:59"><name pos:start="1075:46" pos:end="1075:55"><name pos:start="1075:46" pos:end="1075:51">fpregs</name><index pos:start="1075:52" pos:end="1075:55">[<expr pos:start="1075:53" pos:end="1075:54"><name pos:start="1075:53" pos:end="1075:54">rm</name></expr>]</index></name><operator pos:start="1075:56" pos:end="1075:56">.</operator><name pos:start="1075:57" pos:end="1075:59">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1077:13" pos:end="1077:76"><expr pos:start="1077:13" pos:end="1077:75"><call pos:start="1077:13" pos:end="1077:75"><name pos:start="1077:13" pos:end="1077:29">gen_op_movq_env_0</name><argument_list pos:start="1077:30" pos:end="1077:75">(<argument pos:start="1077:31" pos:end="1077:74"><expr pos:start="1077:31" pos:end="1077:74"><call pos:start="1077:31" pos:end="1077:74"><name pos:start="1077:31" pos:end="1077:38">offsetof</name><argument_list pos:start="1077:39" pos:end="1077:74">(<argument pos:start="1077:40" pos:end="1077:50"><expr pos:start="1077:40" pos:end="1077:50"><name pos:start="1077:40" pos:end="1077:50">CPUX86State</name></expr></argument>,<argument pos:start="1077:52" pos:end="1077:73"><expr pos:start="1077:52" pos:end="1077:73"><name pos:start="1077:52" pos:end="1077:64"><name pos:start="1077:52" pos:end="1077:59">xmm_regs</name><index pos:start="1077:60" pos:end="1077:64">[<expr pos:start="1077:61" pos:end="1077:63"><name pos:start="1077:61" pos:end="1077:63">reg</name></expr>]</index></name><operator pos:start="1077:65" pos:end="1077:65">.</operator><call pos:start="1077:66" pos:end="1077:73"><name pos:start="1077:66" pos:end="1077:70">XMM_Q</name><argument_list pos:start="1077:71" pos:end="1077:73">(<argument pos:start="1077:72" pos:end="1077:72"><expr pos:start="1077:72" pos:end="1077:72"><literal type="number" pos:start="1077:72" pos:end="1077:72">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1079:13" pos:end="1079:18">break;</break>

        <case pos:start="1081:9" pos:end="1081:19">case <expr pos:start="1081:14" pos:end="1081:18"><literal type="number" pos:start="1081:14" pos:end="1081:18">0x3d6</literal></expr>:</case> <comment type="block" pos:start="1081:21" pos:end="1081:33">/* movdq2q */</comment>

            <expr_stmt pos:start="1083:13" pos:end="1083:49"><expr pos:start="1083:13" pos:end="1083:48"><call pos:start="1083:13" pos:end="1083:48"><name pos:start="1083:13" pos:end="1083:30">tcg_gen_helper_0_0</name><argument_list pos:start="1083:31" pos:end="1083:48">(<argument pos:start="1083:32" pos:end="1083:47"><expr pos:start="1083:32" pos:end="1083:47"><name pos:start="1083:32" pos:end="1083:47">helper_enter_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1085:13" pos:end="1085:40"><expr pos:start="1085:13" pos:end="1085:39"><name pos:start="1085:13" pos:end="1085:14">rm</name> <operator pos:start="1085:16" pos:end="1085:16">=</operator> <operator pos:start="1085:18" pos:end="1085:18">(</operator><name pos:start="1085:19" pos:end="1085:23">modrm</name> <operator pos:start="1085:25" pos:end="1085:25">&amp;</operator> <literal type="number" pos:start="1085:27" pos:end="1085:27">7</literal><operator pos:start="1085:28" pos:end="1085:28">)</operator> <operator pos:start="1085:30" pos:end="1085:30">|</operator> <call pos:start="1085:32" pos:end="1085:39"><name pos:start="1085:32" pos:end="1085:36">REX_B</name><argument_list pos:start="1085:37" pos:end="1085:39">(<argument pos:start="1085:38" pos:end="1085:38"><expr pos:start="1085:38" pos:end="1085:38"><name pos:start="1085:38" pos:end="1085:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1087:13" pos:end="1089:69"><expr pos:start="1087:13" pos:end="1089:68"><call pos:start="1087:13" pos:end="1089:68"><name pos:start="1087:13" pos:end="1087:23">gen_op_movq</name><argument_list pos:start="1087:24" pos:end="1089:68">(<argument pos:start="1087:25" pos:end="1087:65"><expr pos:start="1087:25" pos:end="1087:65"><call pos:start="1087:25" pos:end="1087:65"><name pos:start="1087:25" pos:end="1087:32">offsetof</name><argument_list pos:start="1087:33" pos:end="1087:65">(<argument pos:start="1087:34" pos:end="1087:44"><expr pos:start="1087:34" pos:end="1087:44"><name pos:start="1087:34" pos:end="1087:44">CPUX86State</name></expr></argument>,<argument pos:start="1087:46" pos:end="1087:64"><expr pos:start="1087:46" pos:end="1087:64"><name pos:start="1087:46" pos:end="1087:60"><name pos:start="1087:46" pos:end="1087:51">fpregs</name><index pos:start="1087:52" pos:end="1087:60">[<expr pos:start="1087:53" pos:end="1087:59"><name pos:start="1087:53" pos:end="1087:55">reg</name> <operator pos:start="1087:57" pos:end="1087:57">&amp;</operator> <literal type="number" pos:start="1087:59" pos:end="1087:59">7</literal></expr>]</index></name><operator pos:start="1087:61" pos:end="1087:61">.</operator><name pos:start="1087:62" pos:end="1087:64">mmx</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="1089:25" pos:end="1089:67"><expr pos:start="1089:25" pos:end="1089:67"><call pos:start="1089:25" pos:end="1089:67"><name pos:start="1089:25" pos:end="1089:32">offsetof</name><argument_list pos:start="1089:33" pos:end="1089:67">(<argument pos:start="1089:34" pos:end="1089:44"><expr pos:start="1089:34" pos:end="1089:44"><name pos:start="1089:34" pos:end="1089:44">CPUX86State</name></expr></argument>,<argument pos:start="1089:46" pos:end="1089:66"><expr pos:start="1089:46" pos:end="1089:66"><name pos:start="1089:46" pos:end="1089:57"><name pos:start="1089:46" pos:end="1089:53">xmm_regs</name><index pos:start="1089:54" pos:end="1089:57">[<expr pos:start="1089:55" pos:end="1089:56"><name pos:start="1089:55" pos:end="1089:56">rm</name></expr>]</index></name><operator pos:start="1089:58" pos:end="1089:58">.</operator><call pos:start="1089:59" pos:end="1089:66"><name pos:start="1089:59" pos:end="1089:63">XMM_Q</name><argument_list pos:start="1089:64" pos:end="1089:66">(<argument pos:start="1089:65" pos:end="1089:65"><expr pos:start="1089:65" pos:end="1089:65"><literal type="number" pos:start="1089:65" pos:end="1089:65">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1091:13" pos:end="1091:18">break;</break>

        <case pos:start="1093:9" pos:end="1093:18">case <expr pos:start="1093:14" pos:end="1093:17"><literal type="number" pos:start="1093:14" pos:end="1093:17">0xd7</literal></expr>:</case> <comment type="block" pos:start="1093:20" pos:end="1093:33">/* pmovmskb */</comment>

        <case pos:start="1095:9" pos:end="1095:19">case <expr pos:start="1095:14" pos:end="1095:18"><literal type="number" pos:start="1095:14" pos:end="1095:18">0x1d7</literal></expr>:</case>

            <if_stmt pos:start="1097:13" pos:end="1099:32"><if pos:start="1097:13" pos:end="1099:32">if <condition pos:start="1097:16" pos:end="1097:25">(<expr pos:start="1097:17" pos:end="1097:24"><name pos:start="1097:17" pos:end="1097:19">mod</name> <operator pos:start="1097:21" pos:end="1097:22">!=</operator> <literal type="number" pos:start="1097:24" pos:end="1097:24">3</literal></expr>)</condition><block type="pseudo" pos:start="1099:17" pos:end="1099:32"><block_content pos:start="1099:17" pos:end="1099:32">

                <goto pos:start="1099:17" pos:end="1099:32">goto <name pos:start="1099:22" pos:end="1099:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="1101:13" pos:end="1117:13"><if pos:start="1101:13" pos:end="1109:13">if <condition pos:start="1101:16" pos:end="1101:19">(<expr pos:start="1101:17" pos:end="1101:18"><name pos:start="1101:17" pos:end="1101:18">b1</name></expr>)</condition> <block pos:start="1101:21" pos:end="1109:13">{<block_content pos:start="1103:17" pos:end="1107:80">

                <expr_stmt pos:start="1103:17" pos:end="1103:44"><expr pos:start="1103:17" pos:end="1103:43"><name pos:start="1103:17" pos:end="1103:18">rm</name> <operator pos:start="1103:20" pos:end="1103:20">=</operator> <operator pos:start="1103:22" pos:end="1103:22">(</operator><name pos:start="1103:23" pos:end="1103:27">modrm</name> <operator pos:start="1103:29" pos:end="1103:29">&amp;</operator> <literal type="number" pos:start="1103:31" pos:end="1103:31">7</literal><operator pos:start="1103:32" pos:end="1103:32">)</operator> <operator pos:start="1103:34" pos:end="1103:34">|</operator> <call pos:start="1103:36" pos:end="1103:43"><name pos:start="1103:36" pos:end="1103:40">REX_B</name><argument_list pos:start="1103:41" pos:end="1103:43">(<argument pos:start="1103:42" pos:end="1103:42"><expr pos:start="1103:42" pos:end="1103:42"><name pos:start="1103:42" pos:end="1103:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1105:17" pos:end="1105:88"><expr pos:start="1105:17" pos:end="1105:87"><call pos:start="1105:17" pos:end="1105:87"><name pos:start="1105:17" pos:end="1105:32">tcg_gen_addi_ptr</name><argument_list pos:start="1105:33" pos:end="1105:87">(<argument pos:start="1105:34" pos:end="1105:41"><expr pos:start="1105:34" pos:end="1105:41"><name pos:start="1105:34" pos:end="1105:41">cpu_ptr0</name></expr></argument>, <argument pos:start="1105:44" pos:end="1105:50"><expr pos:start="1105:44" pos:end="1105:50"><name pos:start="1105:44" pos:end="1105:50">cpu_env</name></expr></argument>, <argument pos:start="1105:53" pos:end="1105:86"><expr pos:start="1105:53" pos:end="1105:86"><call pos:start="1105:53" pos:end="1105:86"><name pos:start="1105:53" pos:end="1105:60">offsetof</name><argument_list pos:start="1105:61" pos:end="1105:86">(<argument pos:start="1105:62" pos:end="1105:72"><expr pos:start="1105:62" pos:end="1105:72"><name pos:start="1105:62" pos:end="1105:72">CPUX86State</name></expr></argument>,<argument pos:start="1105:74" pos:end="1105:85"><expr pos:start="1105:74" pos:end="1105:85"><name pos:start="1105:74" pos:end="1105:85"><name pos:start="1105:74" pos:end="1105:81">xmm_regs</name><index pos:start="1105:82" pos:end="1105:85">[<expr pos:start="1105:83" pos:end="1105:84"><name pos:start="1105:83" pos:end="1105:84">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1107:17" pos:end="1107:80"><expr pos:start="1107:17" pos:end="1107:79"><call pos:start="1107:17" pos:end="1107:79"><name pos:start="1107:17" pos:end="1107:34">tcg_gen_helper_1_1</name><argument_list pos:start="1107:35" pos:end="1107:79">(<argument pos:start="1107:36" pos:end="1107:54"><expr pos:start="1107:36" pos:end="1107:54"><name pos:start="1107:36" pos:end="1107:54">helper_pmovmskb_xmm</name></expr></argument>, <argument pos:start="1107:57" pos:end="1107:68"><expr pos:start="1107:57" pos:end="1107:68"><name pos:start="1107:57" pos:end="1107:68">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1107:71" pos:end="1107:78"><expr pos:start="1107:71" pos:end="1107:78"><name pos:start="1107:71" pos:end="1107:78">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1109:15" pos:end="1117:13">else <block pos:start="1109:20" pos:end="1117:13">{<block_content pos:start="1111:17" pos:end="1115:80">

                <expr_stmt pos:start="1111:17" pos:end="1111:33"><expr pos:start="1111:17" pos:end="1111:32"><name pos:start="1111:17" pos:end="1111:18">rm</name> <operator pos:start="1111:20" pos:end="1111:20">=</operator> <operator pos:start="1111:22" pos:end="1111:22">(</operator><name pos:start="1111:23" pos:end="1111:27">modrm</name> <operator pos:start="1111:29" pos:end="1111:29">&amp;</operator> <literal type="number" pos:start="1111:31" pos:end="1111:31">7</literal><operator pos:start="1111:32" pos:end="1111:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1113:17" pos:end="1113:90"><expr pos:start="1113:17" pos:end="1113:89"><call pos:start="1113:17" pos:end="1113:89"><name pos:start="1113:17" pos:end="1113:32">tcg_gen_addi_ptr</name><argument_list pos:start="1113:33" pos:end="1113:89">(<argument pos:start="1113:34" pos:end="1113:41"><expr pos:start="1113:34" pos:end="1113:41"><name pos:start="1113:34" pos:end="1113:41">cpu_ptr0</name></expr></argument>, <argument pos:start="1113:44" pos:end="1113:50"><expr pos:start="1113:44" pos:end="1113:50"><name pos:start="1113:44" pos:end="1113:50">cpu_env</name></expr></argument>, <argument pos:start="1113:53" pos:end="1113:88"><expr pos:start="1113:53" pos:end="1113:88"><call pos:start="1113:53" pos:end="1113:88"><name pos:start="1113:53" pos:end="1113:60">offsetof</name><argument_list pos:start="1113:61" pos:end="1113:88">(<argument pos:start="1113:62" pos:end="1113:72"><expr pos:start="1113:62" pos:end="1113:72"><name pos:start="1113:62" pos:end="1113:72">CPUX86State</name></expr></argument>,<argument pos:start="1113:74" pos:end="1113:87"><expr pos:start="1113:74" pos:end="1113:87"><name pos:start="1113:74" pos:end="1113:83"><name pos:start="1113:74" pos:end="1113:79">fpregs</name><index pos:start="1113:80" pos:end="1113:83">[<expr pos:start="1113:81" pos:end="1113:82"><name pos:start="1113:81" pos:end="1113:82">rm</name></expr>]</index></name><operator pos:start="1113:84" pos:end="1113:84">.</operator><name pos:start="1113:85" pos:end="1113:87">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1115:17" pos:end="1115:80"><expr pos:start="1115:17" pos:end="1115:79"><call pos:start="1115:17" pos:end="1115:79"><name pos:start="1115:17" pos:end="1115:34">tcg_gen_helper_1_1</name><argument_list pos:start="1115:35" pos:end="1115:79">(<argument pos:start="1115:36" pos:end="1115:54"><expr pos:start="1115:36" pos:end="1115:54"><name pos:start="1115:36" pos:end="1115:54">helper_pmovmskb_mmx</name></expr></argument>, <argument pos:start="1115:57" pos:end="1115:68"><expr pos:start="1115:57" pos:end="1115:68"><name pos:start="1115:57" pos:end="1115:68">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1115:71" pos:end="1115:78"><expr pos:start="1115:71" pos:end="1115:78"><name pos:start="1115:71" pos:end="1115:78">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1119:13" pos:end="1119:56"><expr pos:start="1119:13" pos:end="1119:55"><call pos:start="1119:13" pos:end="1119:55"><name pos:start="1119:13" pos:end="1119:31">tcg_gen_extu_i32_tl</name><argument_list pos:start="1119:32" pos:end="1119:55">(<argument pos:start="1119:33" pos:end="1119:40"><expr pos:start="1119:33" pos:end="1119:40"><name pos:start="1119:33" pos:end="1119:40"><name pos:start="1119:33" pos:end="1119:37">cpu_T</name><index pos:start="1119:38" pos:end="1119:40">[<expr pos:start="1119:39" pos:end="1119:39"><literal type="number" pos:start="1119:39" pos:end="1119:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1119:43" pos:end="1119:54"><expr pos:start="1119:43" pos:end="1119:54"><name pos:start="1119:43" pos:end="1119:54">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1121:13" pos:end="1121:45"><expr pos:start="1121:13" pos:end="1121:44"><name pos:start="1121:13" pos:end="1121:15">reg</name> <operator pos:start="1121:17" pos:end="1121:17">=</operator> <operator pos:start="1121:19" pos:end="1121:19">(</operator><operator pos:start="1121:20" pos:end="1121:20">(</operator><name pos:start="1121:21" pos:end="1121:25">modrm</name> <operator pos:start="1121:27" pos:end="1121:28">&gt;&gt;</operator> <literal type="number" pos:start="1121:30" pos:end="1121:30">3</literal><operator pos:start="1121:31" pos:end="1121:31">)</operator> <operator pos:start="1121:33" pos:end="1121:33">&amp;</operator> <literal type="number" pos:start="1121:35" pos:end="1121:35">7</literal><operator pos:start="1121:36" pos:end="1121:36">)</operator> <operator pos:start="1121:38" pos:end="1121:38">|</operator> <name pos:start="1121:40" pos:end="1121:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1123:13" pos:end="1123:44"><expr pos:start="1123:13" pos:end="1123:43"><call pos:start="1123:13" pos:end="1123:43"><name pos:start="1123:13" pos:end="1123:29">gen_op_mov_reg_T0</name><argument_list pos:start="1123:30" pos:end="1123:43">(<argument pos:start="1123:31" pos:end="1123:37"><expr pos:start="1123:31" pos:end="1123:37"><name pos:start="1123:31" pos:end="1123:37">OT_LONG</name></expr></argument>, <argument pos:start="1123:40" pos:end="1123:42"><expr pos:start="1123:40" pos:end="1123:42"><name pos:start="1123:40" pos:end="1123:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1125:13" pos:end="1125:18">break;</break>

        <case pos:start="1127:9" pos:end="1127:19">case <expr pos:start="1127:14" pos:end="1127:18"><literal type="number" pos:start="1127:14" pos:end="1127:18">0x038</literal></expr>:</case>

        <case pos:start="1129:9" pos:end="1129:19">case <expr pos:start="1129:14" pos:end="1129:18"><literal type="number" pos:start="1129:14" pos:end="1129:18">0x138</literal></expr>:</case>

            <expr_stmt pos:start="1131:13" pos:end="1131:22"><expr pos:start="1131:13" pos:end="1131:21"><name pos:start="1131:13" pos:end="1131:13">b</name> <operator pos:start="1131:15" pos:end="1131:15">=</operator> <name pos:start="1131:17" pos:end="1131:21">modrm</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1133:13" pos:end="1133:39"><expr pos:start="1133:13" pos:end="1133:38"><name pos:start="1133:13" pos:end="1133:17">modrm</name> <operator pos:start="1133:19" pos:end="1133:19">=</operator> <call pos:start="1133:21" pos:end="1133:38"><name pos:start="1133:21" pos:end="1133:29">ldub_code</name><argument_list pos:start="1133:30" pos:end="1133:38">(<argument pos:start="1133:31" pos:end="1133:37"><expr pos:start="1133:31" pos:end="1133:37"><name pos:start="1133:31" pos:end="1133:35"><name pos:start="1133:31" pos:end="1133:31">s</name><operator pos:start="1133:32" pos:end="1133:33">-&gt;</operator><name pos:start="1133:34" pos:end="1133:35">pc</name></name><operator pos:start="1133:36" pos:end="1133:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1135:13" pos:end="1135:27"><expr pos:start="1135:13" pos:end="1135:26"><name pos:start="1135:13" pos:end="1135:14">rm</name> <operator pos:start="1135:16" pos:end="1135:16">=</operator> <name pos:start="1135:18" pos:end="1135:22">modrm</name> <operator pos:start="1135:24" pos:end="1135:24">&amp;</operator> <literal type="number" pos:start="1135:26" pos:end="1135:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1137:13" pos:end="1137:45"><expr pos:start="1137:13" pos:end="1137:44"><name pos:start="1137:13" pos:end="1137:15">reg</name> <operator pos:start="1137:17" pos:end="1137:17">=</operator> <operator pos:start="1137:19" pos:end="1137:19">(</operator><operator pos:start="1137:20" pos:end="1137:20">(</operator><name pos:start="1137:21" pos:end="1137:25">modrm</name> <operator pos:start="1137:27" pos:end="1137:28">&gt;&gt;</operator> <literal type="number" pos:start="1137:30" pos:end="1137:30">3</literal><operator pos:start="1137:31" pos:end="1137:31">)</operator> <operator pos:start="1137:33" pos:end="1137:33">&amp;</operator> <literal type="number" pos:start="1137:35" pos:end="1137:35">7</literal><operator pos:start="1137:36" pos:end="1137:36">)</operator> <operator pos:start="1137:38" pos:end="1137:38">|</operator> <name pos:start="1137:40" pos:end="1137:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1139:13" pos:end="1139:35"><expr pos:start="1139:13" pos:end="1139:34"><name pos:start="1139:13" pos:end="1139:15">mod</name> <operator pos:start="1139:17" pos:end="1139:17">=</operator> <operator pos:start="1139:19" pos:end="1139:19">(</operator><name pos:start="1139:20" pos:end="1139:24">modrm</name> <operator pos:start="1139:26" pos:end="1139:27">&gt;&gt;</operator> <literal type="number" pos:start="1139:29" pos:end="1139:29">6</literal><operator pos:start="1139:30" pos:end="1139:30">)</operator> <operator pos:start="1139:32" pos:end="1139:32">&amp;</operator> <literal type="number" pos:start="1139:34" pos:end="1139:34">3</literal></expr>;</expr_stmt>



            <if_stmt pos:start="1143:13" pos:end="1145:27"><if pos:start="1143:13" pos:end="1145:27">if <condition pos:start="1143:16" pos:end="1143:41">(<expr pos:start="1143:17" pos:end="1143:40"><name pos:start="1143:17" pos:end="1143:25"><name pos:start="1143:17" pos:end="1143:17">s</name><operator pos:start="1143:18" pos:end="1143:19">-&gt;</operator><name pos:start="1143:20" pos:end="1143:25">prefix</name></name> <operator pos:start="1143:27" pos:end="1143:27">&amp;</operator> <name pos:start="1143:29" pos:end="1143:40">PREFIX_REPNZ</name></expr>)</condition><block type="pseudo" pos:start="1145:17" pos:end="1145:27"><block_content pos:start="1145:17" pos:end="1145:27">

                <goto pos:start="1145:17" pos:end="1145:27">goto <name pos:start="1145:22" pos:end="1145:26">crc32</name>;</goto></block_content></block></if></if_stmt>



            <expr_stmt pos:start="1149:13" pos:end="1149:46"><expr pos:start="1149:13" pos:end="1149:45"><name pos:start="1149:13" pos:end="1149:19">sse_op2</name> <operator pos:start="1149:21" pos:end="1149:21">=</operator> <name pos:start="1149:23" pos:end="1149:38"><name pos:start="1149:23" pos:end="1149:35">sse_op_table6</name><index pos:start="1149:36" pos:end="1149:38">[<expr pos:start="1149:37" pos:end="1149:37"><name pos:start="1149:37" pos:end="1149:37">b</name></expr>]</index></name><operator pos:start="1149:39" pos:end="1149:39">.</operator><name pos:start="1149:40" pos:end="1149:45"><name pos:start="1149:40" pos:end="1149:41">op</name><index pos:start="1149:42" pos:end="1149:45">[<expr pos:start="1149:43" pos:end="1149:44"><name pos:start="1149:43" pos:end="1149:44">b1</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="1151:13" pos:end="1153:32"><if pos:start="1151:13" pos:end="1153:32">if <condition pos:start="1151:16" pos:end="1151:25">(<expr pos:start="1151:17" pos:end="1151:24"><operator pos:start="1151:17" pos:end="1151:17">!</operator><name pos:start="1151:18" pos:end="1151:24">sse_op2</name></expr>)</condition><block type="pseudo" pos:start="1153:17" pos:end="1153:32"><block_content pos:start="1153:17" pos:end="1153:32">

                <goto pos:start="1153:17" pos:end="1153:32">goto <name pos:start="1153:22" pos:end="1153:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="1155:13" pos:end="1157:32"><if pos:start="1155:13" pos:end="1157:32">if <condition pos:start="1155:16" pos:end="1155:69">(<expr pos:start="1155:17" pos:end="1155:68"><operator pos:start="1155:17" pos:end="1155:17">!</operator><operator pos:start="1155:18" pos:end="1155:18">(</operator><name pos:start="1155:19" pos:end="1155:39"><name pos:start="1155:19" pos:end="1155:19">s</name><operator pos:start="1155:20" pos:end="1155:21">-&gt;</operator><name pos:start="1155:22" pos:end="1155:39">cpuid_ext_features</name></name> <operator pos:start="1155:41" pos:end="1155:41">&amp;</operator> <name pos:start="1155:43" pos:end="1155:58"><name pos:start="1155:43" pos:end="1155:55">sse_op_table6</name><index pos:start="1155:56" pos:end="1155:58">[<expr pos:start="1155:57" pos:end="1155:57"><name pos:start="1155:57" pos:end="1155:57">b</name></expr>]</index></name><operator pos:start="1155:59" pos:end="1155:59">.</operator><name pos:start="1155:60" pos:end="1155:67">ext_mask</name><operator pos:start="1155:68" pos:end="1155:68">)</operator></expr>)</condition><block type="pseudo" pos:start="1157:17" pos:end="1157:32"><block_content pos:start="1157:17" pos:end="1157:32">

                <goto pos:start="1157:17" pos:end="1157:32">goto <name pos:start="1157:22" pos:end="1157:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>



            <if_stmt pos:start="1161:13" pos:end="1247:13"><if pos:start="1161:13" pos:end="1229:13">if <condition pos:start="1161:16" pos:end="1161:19">(<expr pos:start="1161:17" pos:end="1161:18"><name pos:start="1161:17" pos:end="1161:18">b1</name></expr>)</condition> <block pos:start="1161:21" pos:end="1229:13">{<block_content pos:start="1163:17" pos:end="1227:17">

                <expr_stmt pos:start="1163:17" pos:end="1163:65"><expr pos:start="1163:17" pos:end="1163:64"><name pos:start="1163:17" pos:end="1163:26">op1_offset</name> <operator pos:start="1163:28" pos:end="1163:28">=</operator> <call pos:start="1163:30" pos:end="1163:64"><name pos:start="1163:30" pos:end="1163:37">offsetof</name><argument_list pos:start="1163:38" pos:end="1163:64">(<argument pos:start="1163:39" pos:end="1163:49"><expr pos:start="1163:39" pos:end="1163:49"><name pos:start="1163:39" pos:end="1163:49">CPUX86State</name></expr></argument>,<argument pos:start="1163:51" pos:end="1163:63"><expr pos:start="1163:51" pos:end="1163:63"><name pos:start="1163:51" pos:end="1163:63"><name pos:start="1163:51" pos:end="1163:58">xmm_regs</name><index pos:start="1163:59" pos:end="1163:63">[<expr pos:start="1163:60" pos:end="1163:62"><name pos:start="1163:60" pos:end="1163:62">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1165:17" pos:end="1227:17"><if pos:start="1165:17" pos:end="1169:17">if <condition pos:start="1165:20" pos:end="1165:29">(<expr pos:start="1165:21" pos:end="1165:28"><name pos:start="1165:21" pos:end="1165:23">mod</name> <operator pos:start="1165:25" pos:end="1165:26">==</operator> <literal type="number" pos:start="1165:28" pos:end="1165:28">3</literal></expr>)</condition> <block pos:start="1165:31" pos:end="1169:17">{<block_content pos:start="1167:21" pos:end="1167:79">

                    <expr_stmt pos:start="1167:21" pos:end="1167:79"><expr pos:start="1167:21" pos:end="1167:78"><name pos:start="1167:21" pos:end="1167:30">op2_offset</name> <operator pos:start="1167:32" pos:end="1167:32">=</operator> <call pos:start="1167:34" pos:end="1167:78"><name pos:start="1167:34" pos:end="1167:41">offsetof</name><argument_list pos:start="1167:42" pos:end="1167:78">(<argument pos:start="1167:43" pos:end="1167:53"><expr pos:start="1167:43" pos:end="1167:53"><name pos:start="1167:43" pos:end="1167:53">CPUX86State</name></expr></argument>,<argument pos:start="1167:55" pos:end="1167:77"><expr pos:start="1167:55" pos:end="1167:77"><name pos:start="1167:55" pos:end="1167:77"><name pos:start="1167:55" pos:end="1167:62">xmm_regs</name><index pos:start="1167:63" pos:end="1167:77">[<expr pos:start="1167:64" pos:end="1167:76"><name pos:start="1167:64" pos:end="1167:65">rm</name> <operator pos:start="1167:67" pos:end="1167:67">|</operator> <call pos:start="1167:69" pos:end="1167:76"><name pos:start="1167:69" pos:end="1167:73">REX_B</name><argument_list pos:start="1167:74" pos:end="1167:76">(<argument pos:start="1167:75" pos:end="1167:75"><expr pos:start="1167:75" pos:end="1167:75"><name pos:start="1167:75" pos:end="1167:75">s</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1169:19" pos:end="1227:17">else <block pos:start="1169:24" pos:end="1227:17">{<block_content pos:start="1171:21" pos:end="1225:21">

                    <expr_stmt pos:start="1171:21" pos:end="1171:62"><expr pos:start="1171:21" pos:end="1171:61"><name pos:start="1171:21" pos:end="1171:30">op2_offset</name> <operator pos:start="1171:32" pos:end="1171:32">=</operator> <call pos:start="1171:34" pos:end="1171:61"><name pos:start="1171:34" pos:end="1171:41">offsetof</name><argument_list pos:start="1171:42" pos:end="1171:61">(<argument pos:start="1171:43" pos:end="1171:53"><expr pos:start="1171:43" pos:end="1171:53"><name pos:start="1171:43" pos:end="1171:53">CPUX86State</name></expr></argument>,<argument pos:start="1171:55" pos:end="1171:60"><expr pos:start="1171:55" pos:end="1171:60"><name pos:start="1171:55" pos:end="1171:60">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1173:21" pos:end="1173:69"><expr pos:start="1173:21" pos:end="1173:68"><call pos:start="1173:21" pos:end="1173:68"><name pos:start="1173:21" pos:end="1173:33">gen_lea_modrm</name><argument_list pos:start="1173:34" pos:end="1173:68">(<argument pos:start="1173:35" pos:end="1173:35"><expr pos:start="1173:35" pos:end="1173:35"><name pos:start="1173:35" pos:end="1173:35">s</name></expr></argument>, <argument pos:start="1173:38" pos:end="1173:42"><expr pos:start="1173:38" pos:end="1173:42"><name pos:start="1173:38" pos:end="1173:42">modrm</name></expr></argument>, <argument pos:start="1173:45" pos:end="1173:53"><expr pos:start="1173:45" pos:end="1173:53"><operator pos:start="1173:45" pos:end="1173:45">&amp;</operator><name pos:start="1173:46" pos:end="1173:53">reg_addr</name></expr></argument>, <argument pos:start="1173:56" pos:end="1173:67"><expr pos:start="1173:56" pos:end="1173:67"><operator pos:start="1173:56" pos:end="1173:56">&amp;</operator><name pos:start="1173:57" pos:end="1173:67">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <switch pos:start="1175:21" pos:end="1225:21">switch <condition pos:start="1175:28" pos:end="1175:30">(<expr pos:start="1175:29" pos:end="1175:29"><name pos:start="1175:29" pos:end="1175:29">b</name></expr>)</condition> <block pos:start="1175:32" pos:end="1225:21">{<block_content pos:start="1177:21" pos:end="1223:65">

                    <case pos:start="1177:21" pos:end="1177:30">case <expr pos:start="1177:26" pos:end="1177:29"><literal type="number" pos:start="1177:26" pos:end="1177:29">0x20</literal></expr>:</case> <case pos:start="1177:32" pos:end="1177:41">case <expr pos:start="1177:37" pos:end="1177:40"><literal type="number" pos:start="1177:37" pos:end="1177:40">0x30</literal></expr>:</case> <comment type="block" pos:start="1177:43" pos:end="1177:66">/* pmovsxbw, pmovzxbw */</comment>

                    <case pos:start="1179:21" pos:end="1179:30">case <expr pos:start="1179:26" pos:end="1179:29"><literal type="number" pos:start="1179:26" pos:end="1179:29">0x23</literal></expr>:</case> <case pos:start="1179:32" pos:end="1179:41">case <expr pos:start="1179:37" pos:end="1179:40"><literal type="number" pos:start="1179:37" pos:end="1179:40">0x33</literal></expr>:</case> <comment type="block" pos:start="1179:43" pos:end="1179:66">/* pmovsxwd, pmovzxwd */</comment>

                    <case pos:start="1181:21" pos:end="1181:30">case <expr pos:start="1181:26" pos:end="1181:29"><literal type="number" pos:start="1181:26" pos:end="1181:29">0x25</literal></expr>:</case> <case pos:start="1181:32" pos:end="1181:41">case <expr pos:start="1181:37" pos:end="1181:40"><literal type="number" pos:start="1181:37" pos:end="1181:40">0x35</literal></expr>:</case> <comment type="block" pos:start="1181:43" pos:end="1181:66">/* pmovsxdq, pmovzxdq */</comment>

                        <expr_stmt pos:start="1183:25" pos:end="1185:68"><expr pos:start="1183:25" pos:end="1185:67"><call pos:start="1183:25" pos:end="1185:67"><name pos:start="1183:25" pos:end="1183:38">gen_ldq_env_A0</name><argument_list pos:start="1183:39" pos:end="1185:67">(<argument pos:start="1183:40" pos:end="1183:51"><expr pos:start="1183:40" pos:end="1183:51"><name pos:start="1183:40" pos:end="1183:51"><name pos:start="1183:40" pos:end="1183:40">s</name><operator pos:start="1183:41" pos:end="1183:42">-&gt;</operator><name pos:start="1183:43" pos:end="1183:51">mem_index</name></name></expr></argument>, <argument pos:start="1183:54" pos:end="1185:66"><expr pos:start="1183:54" pos:end="1185:66"><name pos:start="1183:54" pos:end="1183:63">op2_offset</name> <operator pos:start="1183:65" pos:end="1183:65">+</operator>

                                        <call pos:start="1185:41" pos:end="1185:66"><name pos:start="1185:41" pos:end="1185:48">offsetof</name><argument_list pos:start="1185:49" pos:end="1185:66">(<argument pos:start="1185:50" pos:end="1185:55"><expr pos:start="1185:50" pos:end="1185:55"><name pos:start="1185:50" pos:end="1185:55">XMMReg</name></expr></argument>, <argument pos:start="1185:58" pos:end="1185:65"><expr pos:start="1185:58" pos:end="1185:65"><call pos:start="1185:58" pos:end="1185:65"><name pos:start="1185:58" pos:end="1185:62">XMM_Q</name><argument_list pos:start="1185:63" pos:end="1185:65">(<argument pos:start="1185:64" pos:end="1185:64"><expr pos:start="1185:64" pos:end="1185:64"><literal type="number" pos:start="1185:64" pos:end="1185:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1187:25" pos:end="1187:30">break;</break>

                    <case pos:start="1189:21" pos:end="1189:30">case <expr pos:start="1189:26" pos:end="1189:29"><literal type="number" pos:start="1189:26" pos:end="1189:29">0x21</literal></expr>:</case> <case pos:start="1189:32" pos:end="1189:41">case <expr pos:start="1189:37" pos:end="1189:40"><literal type="number" pos:start="1189:37" pos:end="1189:40">0x31</literal></expr>:</case> <comment type="block" pos:start="1189:43" pos:end="1189:66">/* pmovsxbd, pmovzxbd */</comment>

                    <case pos:start="1191:21" pos:end="1191:30">case <expr pos:start="1191:26" pos:end="1191:29"><literal type="number" pos:start="1191:26" pos:end="1191:29">0x24</literal></expr>:</case> <case pos:start="1191:32" pos:end="1191:41">case <expr pos:start="1191:37" pos:end="1191:40"><literal type="number" pos:start="1191:37" pos:end="1191:40">0x34</literal></expr>:</case> <comment type="block" pos:start="1191:43" pos:end="1191:66">/* pmovsxwq, pmovzxwq */</comment>

                        <expr_stmt pos:start="1193:25" pos:end="1195:67"><expr pos:start="1193:25" pos:end="1195:66"><call pos:start="1193:25" pos:end="1195:66"><name pos:start="1193:25" pos:end="1193:42">tcg_gen_qemu_ld32u</name><argument_list pos:start="1193:43" pos:end="1195:66">(<argument pos:start="1193:44" pos:end="1193:55"><expr pos:start="1193:44" pos:end="1193:55"><name pos:start="1193:44" pos:end="1193:55">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1193:58" pos:end="1193:63"><expr pos:start="1193:58" pos:end="1193:63"><name pos:start="1193:58" pos:end="1193:63">cpu_A0</name></expr></argument>,

                                          <argument pos:start="1195:43" pos:end="1195:65"><expr pos:start="1195:43" pos:end="1195:65"><operator pos:start="1195:43" pos:end="1195:43">(</operator><name pos:start="1195:44" pos:end="1195:55"><name pos:start="1195:44" pos:end="1195:44">s</name><operator pos:start="1195:45" pos:end="1195:46">-&gt;</operator><name pos:start="1195:47" pos:end="1195:55">mem_index</name></name> <operator pos:start="1195:57" pos:end="1195:58">&gt;&gt;</operator> <literal type="number" pos:start="1195:60" pos:end="1195:60">2</literal><operator pos:start="1195:61" pos:end="1195:61">)</operator> <operator pos:start="1195:63" pos:end="1195:63">-</operator> <literal type="number" pos:start="1195:65" pos:end="1195:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1197:25" pos:end="1199:68"><expr pos:start="1197:25" pos:end="1199:67"><call pos:start="1197:25" pos:end="1199:67"><name pos:start="1197:25" pos:end="1197:38">tcg_gen_st_i32</name><argument_list pos:start="1197:39" pos:end="1199:67">(<argument pos:start="1197:40" pos:end="1197:51"><expr pos:start="1197:40" pos:end="1197:51"><name pos:start="1197:40" pos:end="1197:51">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1197:54" pos:end="1197:60"><expr pos:start="1197:54" pos:end="1197:60"><name pos:start="1197:54" pos:end="1197:60">cpu_env</name></expr></argument>, <argument pos:start="1197:63" pos:end="1199:66"><expr pos:start="1197:63" pos:end="1199:66"><name pos:start="1197:63" pos:end="1197:72">op2_offset</name> <operator pos:start="1197:74" pos:end="1197:74">+</operator>

                                        <call pos:start="1199:41" pos:end="1199:66"><name pos:start="1199:41" pos:end="1199:48">offsetof</name><argument_list pos:start="1199:49" pos:end="1199:66">(<argument pos:start="1199:50" pos:end="1199:55"><expr pos:start="1199:50" pos:end="1199:55"><name pos:start="1199:50" pos:end="1199:55">XMMReg</name></expr></argument>, <argument pos:start="1199:58" pos:end="1199:65"><expr pos:start="1199:58" pos:end="1199:65"><call pos:start="1199:58" pos:end="1199:65"><name pos:start="1199:58" pos:end="1199:62">XMM_L</name><argument_list pos:start="1199:63" pos:end="1199:65">(<argument pos:start="1199:64" pos:end="1199:64"><expr pos:start="1199:64" pos:end="1199:64"><literal type="number" pos:start="1199:64" pos:end="1199:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1201:25" pos:end="1201:30">break;</break>

                    <case pos:start="1203:21" pos:end="1203:30">case <expr pos:start="1203:26" pos:end="1203:29"><literal type="number" pos:start="1203:26" pos:end="1203:29">0x22</literal></expr>:</case> <case pos:start="1203:32" pos:end="1203:41">case <expr pos:start="1203:37" pos:end="1203:40"><literal type="number" pos:start="1203:37" pos:end="1203:40">0x32</literal></expr>:</case> <comment type="block" pos:start="1203:43" pos:end="1203:66">/* pmovsxbq, pmovzxbq */</comment>

                        <expr_stmt pos:start="1205:25" pos:end="1207:67"><expr pos:start="1205:25" pos:end="1207:66"><call pos:start="1205:25" pos:end="1207:66"><name pos:start="1205:25" pos:end="1205:42">tcg_gen_qemu_ld16u</name><argument_list pos:start="1205:43" pos:end="1207:66">(<argument pos:start="1205:44" pos:end="1205:51"><expr pos:start="1205:44" pos:end="1205:51"><name pos:start="1205:44" pos:end="1205:51">cpu_tmp0</name></expr></argument>, <argument pos:start="1205:54" pos:end="1205:59"><expr pos:start="1205:54" pos:end="1205:59"><name pos:start="1205:54" pos:end="1205:59">cpu_A0</name></expr></argument>,

                                          <argument pos:start="1207:43" pos:end="1207:65"><expr pos:start="1207:43" pos:end="1207:65"><operator pos:start="1207:43" pos:end="1207:43">(</operator><name pos:start="1207:44" pos:end="1207:55"><name pos:start="1207:44" pos:end="1207:44">s</name><operator pos:start="1207:45" pos:end="1207:46">-&gt;</operator><name pos:start="1207:47" pos:end="1207:55">mem_index</name></name> <operator pos:start="1207:57" pos:end="1207:58">&gt;&gt;</operator> <literal type="number" pos:start="1207:60" pos:end="1207:60">2</literal><operator pos:start="1207:61" pos:end="1207:61">)</operator> <operator pos:start="1207:63" pos:end="1207:63">-</operator> <literal type="number" pos:start="1207:65" pos:end="1207:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1209:25" pos:end="1211:68"><expr pos:start="1209:25" pos:end="1211:67"><call pos:start="1209:25" pos:end="1211:67"><name pos:start="1209:25" pos:end="1209:39">tcg_gen_st16_tl</name><argument_list pos:start="1209:40" pos:end="1211:67">(<argument pos:start="1209:41" pos:end="1209:48"><expr pos:start="1209:41" pos:end="1209:48"><name pos:start="1209:41" pos:end="1209:48">cpu_tmp0</name></expr></argument>, <argument pos:start="1209:51" pos:end="1209:57"><expr pos:start="1209:51" pos:end="1209:57"><name pos:start="1209:51" pos:end="1209:57">cpu_env</name></expr></argument>, <argument pos:start="1209:60" pos:end="1211:66"><expr pos:start="1209:60" pos:end="1211:66"><name pos:start="1209:60" pos:end="1209:69">op2_offset</name> <operator pos:start="1209:71" pos:end="1209:71">+</operator>

                                        <call pos:start="1211:41" pos:end="1211:66"><name pos:start="1211:41" pos:end="1211:48">offsetof</name><argument_list pos:start="1211:49" pos:end="1211:66">(<argument pos:start="1211:50" pos:end="1211:55"><expr pos:start="1211:50" pos:end="1211:55"><name pos:start="1211:50" pos:end="1211:55">XMMReg</name></expr></argument>, <argument pos:start="1211:58" pos:end="1211:65"><expr pos:start="1211:58" pos:end="1211:65"><call pos:start="1211:58" pos:end="1211:65"><name pos:start="1211:58" pos:end="1211:62">XMM_W</name><argument_list pos:start="1211:63" pos:end="1211:65">(<argument pos:start="1211:64" pos:end="1211:64"><expr pos:start="1211:64" pos:end="1211:64"><literal type="number" pos:start="1211:64" pos:end="1211:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1213:25" pos:end="1213:30">break;</break>

                    <case pos:start="1215:21" pos:end="1215:30">case <expr pos:start="1215:26" pos:end="1215:29"><literal type="number" pos:start="1215:26" pos:end="1215:29">0x2a</literal></expr>:</case>            <comment type="block" pos:start="1215:43" pos:end="1215:56">/* movntqda */</comment>

                        <expr_stmt pos:start="1217:25" pos:end="1217:65"><expr pos:start="1217:25" pos:end="1217:64"><call pos:start="1217:25" pos:end="1217:64"><name pos:start="1217:25" pos:end="1217:38">gen_ldo_env_A0</name><argument_list pos:start="1217:39" pos:end="1217:64">(<argument pos:start="1217:40" pos:end="1217:51"><expr pos:start="1217:40" pos:end="1217:51"><name pos:start="1217:40" pos:end="1217:51"><name pos:start="1217:40" pos:end="1217:40">s</name><operator pos:start="1217:41" pos:end="1217:42">-&gt;</operator><name pos:start="1217:43" pos:end="1217:51">mem_index</name></name></expr></argument>, <argument pos:start="1217:54" pos:end="1217:63"><expr pos:start="1217:54" pos:end="1217:63"><name pos:start="1217:54" pos:end="1217:63">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="1219:25" pos:end="1219:31">return;</return>

                    <default pos:start="1221:21" pos:end="1221:28">default:</default>

                        <expr_stmt pos:start="1223:25" pos:end="1223:65"><expr pos:start="1223:25" pos:end="1223:64"><call pos:start="1223:25" pos:end="1223:64"><name pos:start="1223:25" pos:end="1223:38">gen_ldo_env_A0</name><argument_list pos:start="1223:39" pos:end="1223:64">(<argument pos:start="1223:40" pos:end="1223:51"><expr pos:start="1223:40" pos:end="1223:51"><name pos:start="1223:40" pos:end="1223:51"><name pos:start="1223:40" pos:end="1223:40">s</name><operator pos:start="1223:41" pos:end="1223:42">-&gt;</operator><name pos:start="1223:43" pos:end="1223:51">mem_index</name></name></expr></argument>, <argument pos:start="1223:54" pos:end="1223:63"><expr pos:start="1223:54" pos:end="1223:63"><name pos:start="1223:54" pos:end="1223:63">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></switch>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="1229:15" pos:end="1247:13">else <block pos:start="1229:20" pos:end="1247:13">{<block_content pos:start="1231:17" pos:end="1245:17">

                <expr_stmt pos:start="1231:17" pos:end="1231:67"><expr pos:start="1231:17" pos:end="1231:66"><name pos:start="1231:17" pos:end="1231:26">op1_offset</name> <operator pos:start="1231:28" pos:end="1231:28">=</operator> <call pos:start="1231:30" pos:end="1231:66"><name pos:start="1231:30" pos:end="1231:37">offsetof</name><argument_list pos:start="1231:38" pos:end="1231:66">(<argument pos:start="1231:39" pos:end="1231:49"><expr pos:start="1231:39" pos:end="1231:49"><name pos:start="1231:39" pos:end="1231:49">CPUX86State</name></expr></argument>,<argument pos:start="1231:51" pos:end="1231:65"><expr pos:start="1231:51" pos:end="1231:65"><name pos:start="1231:51" pos:end="1231:61"><name pos:start="1231:51" pos:end="1231:56">fpregs</name><index pos:start="1231:57" pos:end="1231:61">[<expr pos:start="1231:58" pos:end="1231:60"><name pos:start="1231:58" pos:end="1231:60">reg</name></expr>]</index></name><operator pos:start="1231:62" pos:end="1231:62">.</operator><name pos:start="1231:63" pos:end="1231:65">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1233:17" pos:end="1245:17"><if pos:start="1233:17" pos:end="1237:17">if <condition pos:start="1233:20" pos:end="1233:29">(<expr pos:start="1233:21" pos:end="1233:28"><name pos:start="1233:21" pos:end="1233:23">mod</name> <operator pos:start="1233:25" pos:end="1233:26">==</operator> <literal type="number" pos:start="1233:28" pos:end="1233:28">3</literal></expr>)</condition> <block pos:start="1233:31" pos:end="1237:17">{<block_content pos:start="1235:21" pos:end="1235:70">

                    <expr_stmt pos:start="1235:21" pos:end="1235:70"><expr pos:start="1235:21" pos:end="1235:69"><name pos:start="1235:21" pos:end="1235:30">op2_offset</name> <operator pos:start="1235:32" pos:end="1235:32">=</operator> <call pos:start="1235:34" pos:end="1235:69"><name pos:start="1235:34" pos:end="1235:41">offsetof</name><argument_list pos:start="1235:42" pos:end="1235:69">(<argument pos:start="1235:43" pos:end="1235:53"><expr pos:start="1235:43" pos:end="1235:53"><name pos:start="1235:43" pos:end="1235:53">CPUX86State</name></expr></argument>,<argument pos:start="1235:55" pos:end="1235:68"><expr pos:start="1235:55" pos:end="1235:68"><name pos:start="1235:55" pos:end="1235:64"><name pos:start="1235:55" pos:end="1235:60">fpregs</name><index pos:start="1235:61" pos:end="1235:64">[<expr pos:start="1235:62" pos:end="1235:63"><name pos:start="1235:62" pos:end="1235:63">rm</name></expr>]</index></name><operator pos:start="1235:65" pos:end="1235:65">.</operator><name pos:start="1235:66" pos:end="1235:68">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1237:19" pos:end="1245:17">else <block pos:start="1237:24" pos:end="1245:17">{<block_content pos:start="1239:21" pos:end="1243:61">

                    <expr_stmt pos:start="1239:21" pos:end="1239:62"><expr pos:start="1239:21" pos:end="1239:61"><name pos:start="1239:21" pos:end="1239:30">op2_offset</name> <operator pos:start="1239:32" pos:end="1239:32">=</operator> <call pos:start="1239:34" pos:end="1239:61"><name pos:start="1239:34" pos:end="1239:41">offsetof</name><argument_list pos:start="1239:42" pos:end="1239:61">(<argument pos:start="1239:43" pos:end="1239:53"><expr pos:start="1239:43" pos:end="1239:53"><name pos:start="1239:43" pos:end="1239:53">CPUX86State</name></expr></argument>,<argument pos:start="1239:55" pos:end="1239:60"><expr pos:start="1239:55" pos:end="1239:60"><name pos:start="1239:55" pos:end="1239:60">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1241:21" pos:end="1241:69"><expr pos:start="1241:21" pos:end="1241:68"><call pos:start="1241:21" pos:end="1241:68"><name pos:start="1241:21" pos:end="1241:33">gen_lea_modrm</name><argument_list pos:start="1241:34" pos:end="1241:68">(<argument pos:start="1241:35" pos:end="1241:35"><expr pos:start="1241:35" pos:end="1241:35"><name pos:start="1241:35" pos:end="1241:35">s</name></expr></argument>, <argument pos:start="1241:38" pos:end="1241:42"><expr pos:start="1241:38" pos:end="1241:42"><name pos:start="1241:38" pos:end="1241:42">modrm</name></expr></argument>, <argument pos:start="1241:45" pos:end="1241:53"><expr pos:start="1241:45" pos:end="1241:53"><operator pos:start="1241:45" pos:end="1241:45">&amp;</operator><name pos:start="1241:46" pos:end="1241:53">reg_addr</name></expr></argument>, <argument pos:start="1241:56" pos:end="1241:67"><expr pos:start="1241:56" pos:end="1241:67"><operator pos:start="1241:56" pos:end="1241:56">&amp;</operator><name pos:start="1241:57" pos:end="1241:67">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1243:21" pos:end="1243:61"><expr pos:start="1243:21" pos:end="1243:60"><call pos:start="1243:21" pos:end="1243:60"><name pos:start="1243:21" pos:end="1243:34">gen_ldq_env_A0</name><argument_list pos:start="1243:35" pos:end="1243:60">(<argument pos:start="1243:36" pos:end="1243:47"><expr pos:start="1243:36" pos:end="1243:47"><name pos:start="1243:36" pos:end="1243:47"><name pos:start="1243:36" pos:end="1243:36">s</name><operator pos:start="1243:37" pos:end="1243:38">-&gt;</operator><name pos:start="1243:39" pos:end="1243:47">mem_index</name></name></expr></argument>, <argument pos:start="1243:50" pos:end="1243:59"><expr pos:start="1243:50" pos:end="1243:59"><name pos:start="1243:50" pos:end="1243:59">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="1249:13" pos:end="1251:32"><if pos:start="1249:13" pos:end="1251:32">if <condition pos:start="1249:16" pos:end="1249:39">(<expr pos:start="1249:17" pos:end="1249:38"><name pos:start="1249:17" pos:end="1249:23">sse_op2</name> <operator pos:start="1249:25" pos:end="1249:26">==</operator> <name pos:start="1249:28" pos:end="1249:38">SSE_SPECIAL</name></expr>)</condition><block type="pseudo" pos:start="1251:17" pos:end="1251:32"><block_content pos:start="1251:17" pos:end="1251:32">

                <goto pos:start="1251:17" pos:end="1251:32">goto <name pos:start="1251:22" pos:end="1251:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>



            <expr_stmt pos:start="1255:13" pos:end="1255:60"><expr pos:start="1255:13" pos:end="1255:59"><call pos:start="1255:13" pos:end="1255:59"><name pos:start="1255:13" pos:end="1255:28">tcg_gen_addi_ptr</name><argument_list pos:start="1255:29" pos:end="1255:59">(<argument pos:start="1255:30" pos:end="1255:37"><expr pos:start="1255:30" pos:end="1255:37"><name pos:start="1255:30" pos:end="1255:37">cpu_ptr0</name></expr></argument>, <argument pos:start="1255:40" pos:end="1255:46"><expr pos:start="1255:40" pos:end="1255:46"><name pos:start="1255:40" pos:end="1255:46">cpu_env</name></expr></argument>, <argument pos:start="1255:49" pos:end="1255:58"><expr pos:start="1255:49" pos:end="1255:58"><name pos:start="1255:49" pos:end="1255:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1257:13" pos:end="1257:60"><expr pos:start="1257:13" pos:end="1257:59"><call pos:start="1257:13" pos:end="1257:59"><name pos:start="1257:13" pos:end="1257:28">tcg_gen_addi_ptr</name><argument_list pos:start="1257:29" pos:end="1257:59">(<argument pos:start="1257:30" pos:end="1257:37"><expr pos:start="1257:30" pos:end="1257:37"><name pos:start="1257:30" pos:end="1257:37">cpu_ptr1</name></expr></argument>, <argument pos:start="1257:40" pos:end="1257:46"><expr pos:start="1257:40" pos:end="1257:46"><name pos:start="1257:40" pos:end="1257:46">cpu_env</name></expr></argument>, <argument pos:start="1257:49" pos:end="1257:58"><expr pos:start="1257:49" pos:end="1257:58"><name pos:start="1257:49" pos:end="1257:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1259:13" pos:end="1259:60"><expr pos:start="1259:13" pos:end="1259:59"><call pos:start="1259:13" pos:end="1259:59"><name pos:start="1259:13" pos:end="1259:30">tcg_gen_helper_0_2</name><argument_list pos:start="1259:31" pos:end="1259:59">(<argument pos:start="1259:32" pos:end="1259:38"><expr pos:start="1259:32" pos:end="1259:38"><name pos:start="1259:32" pos:end="1259:38">sse_op2</name></expr></argument>, <argument pos:start="1259:41" pos:end="1259:48"><expr pos:start="1259:41" pos:end="1259:48"><name pos:start="1259:41" pos:end="1259:48">cpu_ptr0</name></expr></argument>, <argument pos:start="1259:51" pos:end="1259:58"><expr pos:start="1259:51" pos:end="1259:58"><name pos:start="1259:51" pos:end="1259:58">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="1263:13" pos:end="1265:40"><if pos:start="1263:13" pos:end="1265:40">if <condition pos:start="1263:16" pos:end="1263:26">(<expr pos:start="1263:17" pos:end="1263:25"><name pos:start="1263:17" pos:end="1263:17">b</name> <operator pos:start="1263:19" pos:end="1263:20">==</operator> <literal type="number" pos:start="1263:22" pos:end="1263:25">0x17</literal></expr>)</condition><block type="pseudo" pos:start="1265:17" pos:end="1265:40"><block_content pos:start="1265:17" pos:end="1265:40">

                <expr_stmt pos:start="1265:17" pos:end="1265:40"><expr pos:start="1265:17" pos:end="1265:39"><name pos:start="1265:17" pos:end="1265:24"><name pos:start="1265:17" pos:end="1265:17">s</name><operator pos:start="1265:18" pos:end="1265:19">-&gt;</operator><name pos:start="1265:20" pos:end="1265:24">cc_op</name></name> <operator pos:start="1265:26" pos:end="1265:26">=</operator> <name pos:start="1265:28" pos:end="1265:39">CC_OP_EFLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="1267:13" pos:end="1267:18">break;</break>

        <case pos:start="1269:9" pos:end="1269:19">case <expr pos:start="1269:14" pos:end="1269:18"><literal type="number" pos:start="1269:14" pos:end="1269:18">0x338</literal></expr>:</case> <comment type="block" pos:start="1269:21" pos:end="1269:31">/* crc32 */</comment>

        <label pos:start="1271:9" pos:end="1271:14"><name pos:start="1271:9" pos:end="1271:13">crc32</name>:</label>

            <expr_stmt pos:start="1273:13" pos:end="1273:22"><expr pos:start="1273:13" pos:end="1273:21"><name pos:start="1273:13" pos:end="1273:13">b</name> <operator pos:start="1273:15" pos:end="1273:15">=</operator> <name pos:start="1273:17" pos:end="1273:21">modrm</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1275:13" pos:end="1275:39"><expr pos:start="1275:13" pos:end="1275:38"><name pos:start="1275:13" pos:end="1275:17">modrm</name> <operator pos:start="1275:19" pos:end="1275:19">=</operator> <call pos:start="1275:21" pos:end="1275:38"><name pos:start="1275:21" pos:end="1275:29">ldub_code</name><argument_list pos:start="1275:30" pos:end="1275:38">(<argument pos:start="1275:31" pos:end="1275:37"><expr pos:start="1275:31" pos:end="1275:37"><name pos:start="1275:31" pos:end="1275:35"><name pos:start="1275:31" pos:end="1275:31">s</name><operator pos:start="1275:32" pos:end="1275:33">-&gt;</operator><name pos:start="1275:34" pos:end="1275:35">pc</name></name><operator pos:start="1275:36" pos:end="1275:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1277:13" pos:end="1277:45"><expr pos:start="1277:13" pos:end="1277:44"><name pos:start="1277:13" pos:end="1277:15">reg</name> <operator pos:start="1277:17" pos:end="1277:17">=</operator> <operator pos:start="1277:19" pos:end="1277:19">(</operator><operator pos:start="1277:20" pos:end="1277:20">(</operator><name pos:start="1277:21" pos:end="1277:25">modrm</name> <operator pos:start="1277:27" pos:end="1277:28">&gt;&gt;</operator> <literal type="number" pos:start="1277:30" pos:end="1277:30">3</literal><operator pos:start="1277:31" pos:end="1277:31">)</operator> <operator pos:start="1277:33" pos:end="1277:33">&amp;</operator> <literal type="number" pos:start="1277:35" pos:end="1277:35">7</literal><operator pos:start="1277:36" pos:end="1277:36">)</operator> <operator pos:start="1277:38" pos:end="1277:38">|</operator> <name pos:start="1277:40" pos:end="1277:44">rex_r</name></expr>;</expr_stmt>



            <if_stmt pos:start="1281:13" pos:end="1283:32"><if pos:start="1281:13" pos:end="1283:32">if <condition pos:start="1281:16" pos:end="1281:39">(<expr pos:start="1281:17" pos:end="1281:38"><name pos:start="1281:17" pos:end="1281:17">b</name> <operator pos:start="1281:19" pos:end="1281:20">!=</operator> <literal type="number" pos:start="1281:22" pos:end="1281:25">0xf0</literal> <operator pos:start="1281:27" pos:end="1281:28">&amp;&amp;</operator> <name pos:start="1281:30" pos:end="1281:30">b</name> <operator pos:start="1281:32" pos:end="1281:33">!=</operator> <literal type="number" pos:start="1281:35" pos:end="1281:38">0xf1</literal></expr>)</condition><block type="pseudo" pos:start="1283:17" pos:end="1283:32"><block_content pos:start="1283:17" pos:end="1283:32">

                <goto pos:start="1283:17" pos:end="1283:32">goto <name pos:start="1283:22" pos:end="1283:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="1285:13" pos:end="1287:32"><if pos:start="1285:13" pos:end="1287:32">if <condition pos:start="1285:16" pos:end="1285:59">(<expr pos:start="1285:17" pos:end="1285:58"><operator pos:start="1285:17" pos:end="1285:17">!</operator><operator pos:start="1285:18" pos:end="1285:18">(</operator><name pos:start="1285:19" pos:end="1285:39"><name pos:start="1285:19" pos:end="1285:19">s</name><operator pos:start="1285:20" pos:end="1285:21">-&gt;</operator><name pos:start="1285:22" pos:end="1285:39">cpuid_ext_features</name></name> <operator pos:start="1285:41" pos:end="1285:41">&amp;</operator> <name pos:start="1285:43" pos:end="1285:57">CPUID_EXT_SSE42</name><operator pos:start="1285:58" pos:end="1285:58">)</operator></expr>)</condition><block type="pseudo" pos:start="1287:17" pos:end="1287:32"><block_content pos:start="1287:17" pos:end="1287:32">

                <goto pos:start="1287:17" pos:end="1287:32">goto <name pos:start="1287:22" pos:end="1287:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>



            <if_stmt pos:start="1291:13" pos:end="1307:29"><if pos:start="1291:13" pos:end="1293:29">if <condition pos:start="1291:16" pos:end="1291:26">(<expr pos:start="1291:17" pos:end="1291:25"><name pos:start="1291:17" pos:end="1291:17">b</name> <operator pos:start="1291:19" pos:end="1291:20">==</operator> <literal type="number" pos:start="1291:22" pos:end="1291:25">0xf0</literal></expr>)</condition><block type="pseudo" pos:start="1293:17" pos:end="1293:29"><block_content pos:start="1293:17" pos:end="1293:29">

                <expr_stmt pos:start="1293:17" pos:end="1293:29"><expr pos:start="1293:17" pos:end="1293:28"><name pos:start="1293:17" pos:end="1293:18">ot</name> <operator pos:start="1293:20" pos:end="1293:20">=</operator> <name pos:start="1293:22" pos:end="1293:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="1295:13" pos:end="1303:33">else if <condition pos:start="1295:21" pos:end="1295:48">(<expr pos:start="1295:22" pos:end="1295:47"><name pos:start="1295:22" pos:end="1295:22">b</name> <operator pos:start="1295:24" pos:end="1295:25">==</operator> <literal type="number" pos:start="1295:27" pos:end="1295:30">0xf1</literal> <operator pos:start="1295:32" pos:end="1295:33">&amp;&amp;</operator> <name pos:start="1295:35" pos:end="1295:42"><name pos:start="1295:35" pos:end="1295:35">s</name><operator pos:start="1295:36" pos:end="1295:37">-&gt;</operator><name pos:start="1295:38" pos:end="1295:42">dflag</name></name> <operator pos:start="1295:44" pos:end="1295:45">!=</operator> <literal type="number" pos:start="1295:47" pos:end="1295:47">2</literal></expr>)</condition><block type="pseudo" pos:start="1297:17" pos:end="1303:33"><block_content pos:start="1297:17" pos:end="1303:33">

                <if_stmt pos:start="1297:17" pos:end="1303:33"><if pos:start="1297:17" pos:end="1299:33">if <condition pos:start="1297:20" pos:end="1297:44">(<expr pos:start="1297:21" pos:end="1297:43"><name pos:start="1297:21" pos:end="1297:29"><name pos:start="1297:21" pos:end="1297:21">s</name><operator pos:start="1297:22" pos:end="1297:23">-&gt;</operator><name pos:start="1297:24" pos:end="1297:29">prefix</name></name> <operator pos:start="1297:31" pos:end="1297:31">&amp;</operator> <name pos:start="1297:33" pos:end="1297:43">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="1299:21" pos:end="1299:33"><block_content pos:start="1299:21" pos:end="1299:33">

                    <expr_stmt pos:start="1299:21" pos:end="1299:33"><expr pos:start="1299:21" pos:end="1299:32"><name pos:start="1299:21" pos:end="1299:22">ot</name> <operator pos:start="1299:24" pos:end="1299:24">=</operator> <name pos:start="1299:26" pos:end="1299:32">OT_WORD</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1301:17" pos:end="1303:33">else<block type="pseudo" pos:start="1303:21" pos:end="1303:33"><block_content pos:start="1303:21" pos:end="1303:33">

                    <expr_stmt pos:start="1303:21" pos:end="1303:33"><expr pos:start="1303:21" pos:end="1303:32"><name pos:start="1303:21" pos:end="1303:22">ot</name> <operator pos:start="1303:24" pos:end="1303:24">=</operator> <name pos:start="1303:26" pos:end="1303:32">OT_LONG</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if>

            <else pos:start="1305:13" pos:end="1307:29">else<block type="pseudo" pos:start="1307:17" pos:end="1307:29"><block_content pos:start="1307:17" pos:end="1307:29">

                <expr_stmt pos:start="1307:17" pos:end="1307:29"><expr pos:start="1307:17" pos:end="1307:28"><name pos:start="1307:17" pos:end="1307:18">ot</name> <operator pos:start="1307:20" pos:end="1307:20">=</operator> <name pos:start="1307:22" pos:end="1307:28">OT_QUAD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="1311:13" pos:end="1311:47"><expr pos:start="1311:13" pos:end="1311:46"><call pos:start="1311:13" pos:end="1311:46"><name pos:start="1311:13" pos:end="1311:29">gen_op_mov_TN_reg</name><argument_list pos:start="1311:30" pos:end="1311:46">(<argument pos:start="1311:31" pos:end="1311:37"><expr pos:start="1311:31" pos:end="1311:37"><name pos:start="1311:31" pos:end="1311:37">OT_LONG</name></expr></argument>, <argument pos:start="1311:40" pos:end="1311:40"><expr pos:start="1311:40" pos:end="1311:40"><literal type="number" pos:start="1311:40" pos:end="1311:40">0</literal></expr></argument>, <argument pos:start="1311:43" pos:end="1311:45"><expr pos:start="1311:43" pos:end="1311:45"><name pos:start="1311:43" pos:end="1311:45">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1313:13" pos:end="1313:57"><expr pos:start="1313:13" pos:end="1313:56"><call pos:start="1313:13" pos:end="1313:56"><name pos:start="1313:13" pos:end="1313:32">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1313:33" pos:end="1313:56">(<argument pos:start="1313:34" pos:end="1313:45"><expr pos:start="1313:34" pos:end="1313:45"><name pos:start="1313:34" pos:end="1313:45">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1313:48" pos:end="1313:55"><expr pos:start="1313:48" pos:end="1313:55"><name pos:start="1313:48" pos:end="1313:55"><name pos:start="1313:48" pos:end="1313:52">cpu_T</name><index pos:start="1313:53" pos:end="1313:55">[<expr pos:start="1313:54" pos:end="1313:54"><literal type="number" pos:start="1313:54" pos:end="1313:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1315:13" pos:end="1315:53"><expr pos:start="1315:13" pos:end="1315:52"><call pos:start="1315:13" pos:end="1315:52"><name pos:start="1315:13" pos:end="1315:26">gen_ldst_modrm</name><argument_list pos:start="1315:27" pos:end="1315:52">(<argument pos:start="1315:28" pos:end="1315:28"><expr pos:start="1315:28" pos:end="1315:28"><name pos:start="1315:28" pos:end="1315:28">s</name></expr></argument>, <argument pos:start="1315:31" pos:end="1315:35"><expr pos:start="1315:31" pos:end="1315:35"><name pos:start="1315:31" pos:end="1315:35">modrm</name></expr></argument>, <argument pos:start="1315:38" pos:end="1315:39"><expr pos:start="1315:38" pos:end="1315:39"><name pos:start="1315:38" pos:end="1315:39">ot</name></expr></argument>, <argument pos:start="1315:42" pos:end="1315:48"><expr pos:start="1315:42" pos:end="1315:48"><name pos:start="1315:42" pos:end="1315:48">OR_TMP0</name></expr></argument>, <argument pos:start="1315:51" pos:end="1315:51"><expr pos:start="1315:51" pos:end="1315:51"><literal type="number" pos:start="1315:51" pos:end="1315:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1317:13" pos:end="1319:62"><expr pos:start="1317:13" pos:end="1319:61"><call pos:start="1317:13" pos:end="1319:61"><name pos:start="1317:13" pos:end="1317:30">tcg_gen_helper_1_3</name><argument_list pos:start="1317:31" pos:end="1319:61">(<argument pos:start="1317:32" pos:end="1317:43"><expr pos:start="1317:32" pos:end="1317:43"><name pos:start="1317:32" pos:end="1317:43">helper_crc32</name></expr></argument>, <argument pos:start="1317:46" pos:end="1317:53"><expr pos:start="1317:46" pos:end="1317:53"><name pos:start="1317:46" pos:end="1317:53"><name pos:start="1317:46" pos:end="1317:50">cpu_T</name><index pos:start="1317:51" pos:end="1317:53">[<expr pos:start="1317:52" pos:end="1317:52"><literal type="number" pos:start="1317:52" pos:end="1317:52">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1317:56" pos:end="1317:67"><expr pos:start="1317:56" pos:end="1317:67"><name pos:start="1317:56" pos:end="1317:67">cpu_tmp2_i32</name></expr></argument>,

                            <argument pos:start="1319:29" pos:end="1319:36"><expr pos:start="1319:29" pos:end="1319:36"><name pos:start="1319:29" pos:end="1319:36"><name pos:start="1319:29" pos:end="1319:33">cpu_T</name><index pos:start="1319:34" pos:end="1319:36">[<expr pos:start="1319:35" pos:end="1319:35"><literal type="number" pos:start="1319:35" pos:end="1319:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1319:39" pos:end="1319:60"><expr pos:start="1319:39" pos:end="1319:60"><call pos:start="1319:39" pos:end="1319:60"><name pos:start="1319:39" pos:end="1319:51">tcg_const_i32</name><argument_list pos:start="1319:52" pos:end="1319:60">(<argument pos:start="1319:53" pos:end="1319:59"><expr pos:start="1319:53" pos:end="1319:59"><literal type="number" pos:start="1319:53" pos:end="1319:53">8</literal> <operator pos:start="1319:55" pos:end="1319:56">&lt;&lt;</operator> <name pos:start="1319:58" pos:end="1319:59">ot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="1323:13" pos:end="1323:53"><expr pos:start="1323:13" pos:end="1323:52"><name pos:start="1323:13" pos:end="1323:14">ot</name> <operator pos:start="1323:16" pos:end="1323:16">=</operator> <ternary pos:start="1323:18" pos:end="1323:52"><condition pos:start="1323:18" pos:end="1323:34"><expr pos:start="1323:18" pos:end="1323:32"><operator pos:start="1323:18" pos:end="1323:18">(</operator><name pos:start="1323:19" pos:end="1323:26"><name pos:start="1323:19" pos:end="1323:19">s</name><operator pos:start="1323:20" pos:end="1323:21">-&gt;</operator><name pos:start="1323:22" pos:end="1323:26">dflag</name></name> <operator pos:start="1323:28" pos:end="1323:29">==</operator> <literal type="number" pos:start="1323:31" pos:end="1323:31">2</literal><operator pos:start="1323:32" pos:end="1323:32">)</operator></expr> ?</condition><then pos:start="1323:36" pos:end="1323:42"> <expr pos:start="1323:36" pos:end="1323:42"><name pos:start="1323:36" pos:end="1323:42">OT_QUAD</name></expr> </then><else pos:start="1323:44" pos:end="1323:52">: <expr pos:start="1323:46" pos:end="1323:52"><name pos:start="1323:46" pos:end="1323:52">OT_LONG</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="1325:13" pos:end="1325:39"><expr pos:start="1325:13" pos:end="1325:38"><call pos:start="1325:13" pos:end="1325:38"><name pos:start="1325:13" pos:end="1325:29">gen_op_mov_reg_T0</name><argument_list pos:start="1325:30" pos:end="1325:38">(<argument pos:start="1325:31" pos:end="1325:32"><expr pos:start="1325:31" pos:end="1325:32"><name pos:start="1325:31" pos:end="1325:32">ot</name></expr></argument>, <argument pos:start="1325:35" pos:end="1325:37"><expr pos:start="1325:35" pos:end="1325:37"><name pos:start="1325:35" pos:end="1325:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1327:13" pos:end="1327:18">break;</break>

        <case pos:start="1329:9" pos:end="1329:19">case <expr pos:start="1329:14" pos:end="1329:18"><literal type="number" pos:start="1329:14" pos:end="1329:18">0x03a</literal></expr>:</case>

        <case pos:start="1331:9" pos:end="1331:19">case <expr pos:start="1331:14" pos:end="1331:18"><literal type="number" pos:start="1331:14" pos:end="1331:18">0x13a</literal></expr>:</case>

            <expr_stmt pos:start="1333:13" pos:end="1333:22"><expr pos:start="1333:13" pos:end="1333:21"><name pos:start="1333:13" pos:end="1333:13">b</name> <operator pos:start="1333:15" pos:end="1333:15">=</operator> <name pos:start="1333:17" pos:end="1333:21">modrm</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1335:13" pos:end="1335:39"><expr pos:start="1335:13" pos:end="1335:38"><name pos:start="1335:13" pos:end="1335:17">modrm</name> <operator pos:start="1335:19" pos:end="1335:19">=</operator> <call pos:start="1335:21" pos:end="1335:38"><name pos:start="1335:21" pos:end="1335:29">ldub_code</name><argument_list pos:start="1335:30" pos:end="1335:38">(<argument pos:start="1335:31" pos:end="1335:37"><expr pos:start="1335:31" pos:end="1335:37"><name pos:start="1335:31" pos:end="1335:35"><name pos:start="1335:31" pos:end="1335:31">s</name><operator pos:start="1335:32" pos:end="1335:33">-&gt;</operator><name pos:start="1335:34" pos:end="1335:35">pc</name></name><operator pos:start="1335:36" pos:end="1335:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1337:13" pos:end="1337:27"><expr pos:start="1337:13" pos:end="1337:26"><name pos:start="1337:13" pos:end="1337:14">rm</name> <operator pos:start="1337:16" pos:end="1337:16">=</operator> <name pos:start="1337:18" pos:end="1337:22">modrm</name> <operator pos:start="1337:24" pos:end="1337:24">&amp;</operator> <literal type="number" pos:start="1337:26" pos:end="1337:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1339:13" pos:end="1339:45"><expr pos:start="1339:13" pos:end="1339:44"><name pos:start="1339:13" pos:end="1339:15">reg</name> <operator pos:start="1339:17" pos:end="1339:17">=</operator> <operator pos:start="1339:19" pos:end="1339:19">(</operator><operator pos:start="1339:20" pos:end="1339:20">(</operator><name pos:start="1339:21" pos:end="1339:25">modrm</name> <operator pos:start="1339:27" pos:end="1339:28">&gt;&gt;</operator> <literal type="number" pos:start="1339:30" pos:end="1339:30">3</literal><operator pos:start="1339:31" pos:end="1339:31">)</operator> <operator pos:start="1339:33" pos:end="1339:33">&amp;</operator> <literal type="number" pos:start="1339:35" pos:end="1339:35">7</literal><operator pos:start="1339:36" pos:end="1339:36">)</operator> <operator pos:start="1339:38" pos:end="1339:38">|</operator> <name pos:start="1339:40" pos:end="1339:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1341:13" pos:end="1341:35"><expr pos:start="1341:13" pos:end="1341:34"><name pos:start="1341:13" pos:end="1341:15">mod</name> <operator pos:start="1341:17" pos:end="1341:17">=</operator> <operator pos:start="1341:19" pos:end="1341:19">(</operator><name pos:start="1341:20" pos:end="1341:24">modrm</name> <operator pos:start="1341:26" pos:end="1341:27">&gt;&gt;</operator> <literal type="number" pos:start="1341:29" pos:end="1341:29">6</literal><operator pos:start="1341:30" pos:end="1341:30">)</operator> <operator pos:start="1341:32" pos:end="1341:32">&amp;</operator> <literal type="number" pos:start="1341:34" pos:end="1341:34">3</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="1345:13" pos:end="1345:46"><expr pos:start="1345:13" pos:end="1345:45"><name pos:start="1345:13" pos:end="1345:19">sse_op2</name> <operator pos:start="1345:21" pos:end="1345:21">=</operator> <name pos:start="1345:23" pos:end="1345:38"><name pos:start="1345:23" pos:end="1345:35">sse_op_table7</name><index pos:start="1345:36" pos:end="1345:38">[<expr pos:start="1345:37" pos:end="1345:37"><name pos:start="1345:37" pos:end="1345:37">b</name></expr>]</index></name><operator pos:start="1345:39" pos:end="1345:39">.</operator><name pos:start="1345:40" pos:end="1345:45"><name pos:start="1345:40" pos:end="1345:41">op</name><index pos:start="1345:42" pos:end="1345:45">[<expr pos:start="1345:43" pos:end="1345:44"><name pos:start="1345:43" pos:end="1345:44">b1</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="1347:13" pos:end="1349:32"><if pos:start="1347:13" pos:end="1349:32">if <condition pos:start="1347:16" pos:end="1347:25">(<expr pos:start="1347:17" pos:end="1347:24"><operator pos:start="1347:17" pos:end="1347:17">!</operator><name pos:start="1347:18" pos:end="1347:24">sse_op2</name></expr>)</condition><block type="pseudo" pos:start="1349:17" pos:end="1349:32"><block_content pos:start="1349:17" pos:end="1349:32">

                <goto pos:start="1349:17" pos:end="1349:32">goto <name pos:start="1349:22" pos:end="1349:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="1351:13" pos:end="1353:32"><if pos:start="1351:13" pos:end="1353:32">if <condition pos:start="1351:16" pos:end="1351:69">(<expr pos:start="1351:17" pos:end="1351:68"><operator pos:start="1351:17" pos:end="1351:17">!</operator><operator pos:start="1351:18" pos:end="1351:18">(</operator><name pos:start="1351:19" pos:end="1351:39"><name pos:start="1351:19" pos:end="1351:19">s</name><operator pos:start="1351:20" pos:end="1351:21">-&gt;</operator><name pos:start="1351:22" pos:end="1351:39">cpuid_ext_features</name></name> <operator pos:start="1351:41" pos:end="1351:41">&amp;</operator> <name pos:start="1351:43" pos:end="1351:58"><name pos:start="1351:43" pos:end="1351:55">sse_op_table7</name><index pos:start="1351:56" pos:end="1351:58">[<expr pos:start="1351:57" pos:end="1351:57"><name pos:start="1351:57" pos:end="1351:57">b</name></expr>]</index></name><operator pos:start="1351:59" pos:end="1351:59">.</operator><name pos:start="1351:60" pos:end="1351:67">ext_mask</name><operator pos:start="1351:68" pos:end="1351:68">)</operator></expr>)</condition><block type="pseudo" pos:start="1353:17" pos:end="1353:32"><block_content pos:start="1353:17" pos:end="1353:32">

                <goto pos:start="1353:17" pos:end="1353:32">goto <name pos:start="1353:22" pos:end="1353:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>



            <if_stmt pos:start="1357:13" pos:end="1589:13"><if pos:start="1357:13" pos:end="1589:13">if <condition pos:start="1357:16" pos:end="1357:39">(<expr pos:start="1357:17" pos:end="1357:38"><name pos:start="1357:17" pos:end="1357:23">sse_op2</name> <operator pos:start="1357:25" pos:end="1357:26">==</operator> <name pos:start="1357:28" pos:end="1357:38">SSE_SPECIAL</name></expr>)</condition> <block pos:start="1357:41" pos:end="1589:13">{<block_content pos:start="1359:17" pos:end="1587:23">

                <expr_stmt pos:start="1359:17" pos:end="1359:57"><expr pos:start="1359:17" pos:end="1359:56"><name pos:start="1359:17" pos:end="1359:18">ot</name> <operator pos:start="1359:20" pos:end="1359:20">=</operator> <ternary pos:start="1359:22" pos:end="1359:56"><condition pos:start="1359:22" pos:end="1359:38"><expr pos:start="1359:22" pos:end="1359:36"><operator pos:start="1359:22" pos:end="1359:22">(</operator><name pos:start="1359:23" pos:end="1359:30"><name pos:start="1359:23" pos:end="1359:23">s</name><operator pos:start="1359:24" pos:end="1359:25">-&gt;</operator><name pos:start="1359:26" pos:end="1359:30">dflag</name></name> <operator pos:start="1359:32" pos:end="1359:33">==</operator> <literal type="number" pos:start="1359:35" pos:end="1359:35">2</literal><operator pos:start="1359:36" pos:end="1359:36">)</operator></expr> ?</condition><then pos:start="1359:40" pos:end="1359:46"> <expr pos:start="1359:40" pos:end="1359:46"><name pos:start="1359:40" pos:end="1359:46">OT_QUAD</name></expr> </then><else pos:start="1359:48" pos:end="1359:56">: <expr pos:start="1359:50" pos:end="1359:56"><name pos:start="1359:50" pos:end="1359:56">OT_LONG</name></expr></else></ternary></expr>;</expr_stmt>

                <expr_stmt pos:start="1361:17" pos:end="1361:44"><expr pos:start="1361:17" pos:end="1361:43"><name pos:start="1361:17" pos:end="1361:18">rm</name> <operator pos:start="1361:20" pos:end="1361:20">=</operator> <operator pos:start="1361:22" pos:end="1361:22">(</operator><name pos:start="1361:23" pos:end="1361:27">modrm</name> <operator pos:start="1361:29" pos:end="1361:29">&amp;</operator> <literal type="number" pos:start="1361:31" pos:end="1361:31">7</literal><operator pos:start="1361:32" pos:end="1361:32">)</operator> <operator pos:start="1361:34" pos:end="1361:34">|</operator> <call pos:start="1361:36" pos:end="1361:43"><name pos:start="1361:36" pos:end="1361:40">REX_B</name><argument_list pos:start="1361:41" pos:end="1361:43">(<argument pos:start="1361:42" pos:end="1361:42"><expr pos:start="1361:42" pos:end="1361:42"><name pos:start="1361:42" pos:end="1361:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1363:17" pos:end="1365:69"><if pos:start="1363:17" pos:end="1365:69">if <condition pos:start="1363:20" pos:end="1363:29">(<expr pos:start="1363:21" pos:end="1363:28"><name pos:start="1363:21" pos:end="1363:23">mod</name> <operator pos:start="1363:25" pos:end="1363:26">!=</operator> <literal type="number" pos:start="1363:28" pos:end="1363:28">3</literal></expr>)</condition><block type="pseudo" pos:start="1365:21" pos:end="1365:69"><block_content pos:start="1365:21" pos:end="1365:69">

                    <expr_stmt pos:start="1365:21" pos:end="1365:69"><expr pos:start="1365:21" pos:end="1365:68"><call pos:start="1365:21" pos:end="1365:68"><name pos:start="1365:21" pos:end="1365:33">gen_lea_modrm</name><argument_list pos:start="1365:34" pos:end="1365:68">(<argument pos:start="1365:35" pos:end="1365:35"><expr pos:start="1365:35" pos:end="1365:35"><name pos:start="1365:35" pos:end="1365:35">s</name></expr></argument>, <argument pos:start="1365:38" pos:end="1365:42"><expr pos:start="1365:38" pos:end="1365:42"><name pos:start="1365:38" pos:end="1365:42">modrm</name></expr></argument>, <argument pos:start="1365:45" pos:end="1365:53"><expr pos:start="1365:45" pos:end="1365:53"><operator pos:start="1365:45" pos:end="1365:45">&amp;</operator><name pos:start="1365:46" pos:end="1365:53">reg_addr</name></expr></argument>, <argument pos:start="1365:56" pos:end="1365:67"><expr pos:start="1365:56" pos:end="1365:67"><operator pos:start="1365:56" pos:end="1365:56">&amp;</operator><name pos:start="1365:57" pos:end="1365:67">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1367:17" pos:end="1367:49"><expr pos:start="1367:17" pos:end="1367:48"><name pos:start="1367:17" pos:end="1367:19">reg</name> <operator pos:start="1367:21" pos:end="1367:21">=</operator> <operator pos:start="1367:23" pos:end="1367:23">(</operator><operator pos:start="1367:24" pos:end="1367:24">(</operator><name pos:start="1367:25" pos:end="1367:29">modrm</name> <operator pos:start="1367:31" pos:end="1367:32">&gt;&gt;</operator> <literal type="number" pos:start="1367:34" pos:end="1367:34">3</literal><operator pos:start="1367:35" pos:end="1367:35">)</operator> <operator pos:start="1367:37" pos:end="1367:37">&amp;</operator> <literal type="number" pos:start="1367:39" pos:end="1367:39">7</literal><operator pos:start="1367:40" pos:end="1367:40">)</operator> <operator pos:start="1367:42" pos:end="1367:42">|</operator> <name pos:start="1367:44" pos:end="1367:48">rex_r</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1369:17" pos:end="1369:41"><expr pos:start="1369:17" pos:end="1369:40"><name pos:start="1369:17" pos:end="1369:19">val</name> <operator pos:start="1369:21" pos:end="1369:21">=</operator> <call pos:start="1369:23" pos:end="1369:40"><name pos:start="1369:23" pos:end="1369:31">ldub_code</name><argument_list pos:start="1369:32" pos:end="1369:40">(<argument pos:start="1369:33" pos:end="1369:39"><expr pos:start="1369:33" pos:end="1369:39"><name pos:start="1369:33" pos:end="1369:37"><name pos:start="1369:33" pos:end="1369:33">s</name><operator pos:start="1369:34" pos:end="1369:35">-&gt;</operator><name pos:start="1369:36" pos:end="1369:37">pc</name></name><operator pos:start="1369:38" pos:end="1369:39">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="1371:17" pos:end="1585:17">switch <condition pos:start="1371:24" pos:end="1371:26">(<expr pos:start="1371:25" pos:end="1371:25"><name pos:start="1371:25" pos:end="1371:25">b</name></expr>)</condition> <block pos:start="1371:28" pos:end="1585:17">{<block_content pos:start="1373:17" pos:end="1583:26">

                <case pos:start="1373:17" pos:end="1373:26">case <expr pos:start="1373:22" pos:end="1373:25"><literal type="number" pos:start="1373:22" pos:end="1373:25">0x14</literal></expr>:</case> <comment type="block" pos:start="1373:28" pos:end="1373:39">/* pextrb */</comment>

                    <expr_stmt pos:start="1375:21" pos:end="1377:76"><expr pos:start="1375:21" pos:end="1377:75"><call pos:start="1375:21" pos:end="1377:75"><name pos:start="1375:21" pos:end="1375:35">tcg_gen_ld8u_tl</name><argument_list pos:start="1375:36" pos:end="1377:75">(<argument pos:start="1375:37" pos:end="1375:44"><expr pos:start="1375:37" pos:end="1375:44"><name pos:start="1375:37" pos:end="1375:44"><name pos:start="1375:37" pos:end="1375:41">cpu_T</name><index pos:start="1375:42" pos:end="1375:44">[<expr pos:start="1375:43" pos:end="1375:43"><literal type="number" pos:start="1375:43" pos:end="1375:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1375:47" pos:end="1375:53"><expr pos:start="1375:47" pos:end="1375:53"><name pos:start="1375:47" pos:end="1375:53">cpu_env</name></expr></argument>, <argument pos:start="1375:56" pos:end="1377:74"><expr pos:start="1375:56" pos:end="1377:74"><call pos:start="1375:56" pos:end="1377:74"><name pos:start="1375:56" pos:end="1375:63">offsetof</name><argument_list pos:start="1375:64" pos:end="1377:74">(<argument pos:start="1375:65" pos:end="1375:75"><expr pos:start="1375:65" pos:end="1375:75"><name pos:start="1375:65" pos:end="1375:75">CPUX86State</name></expr></argument>,

                                            <argument pos:start="1377:45" pos:end="1377:73"><expr pos:start="1377:45" pos:end="1377:73"><name pos:start="1377:45" pos:end="1377:57"><name pos:start="1377:45" pos:end="1377:52">xmm_regs</name><index pos:start="1377:53" pos:end="1377:57">[<expr pos:start="1377:54" pos:end="1377:56"><name pos:start="1377:54" pos:end="1377:56">reg</name></expr>]</index></name><operator pos:start="1377:58" pos:end="1377:58">.</operator><call pos:start="1377:59" pos:end="1377:73"><name pos:start="1377:59" pos:end="1377:63">XMM_B</name><argument_list pos:start="1377:64" pos:end="1377:73">(<argument pos:start="1377:65" pos:end="1377:72"><expr pos:start="1377:65" pos:end="1377:72"><name pos:start="1377:65" pos:end="1377:67">val</name> <operator pos:start="1377:69" pos:end="1377:69">&amp;</operator> <literal type="number" pos:start="1377:71" pos:end="1377:72">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1379:21" pos:end="1387:65"><if pos:start="1379:21" pos:end="1381:50">if <condition pos:start="1379:24" pos:end="1379:33">(<expr pos:start="1379:25" pos:end="1379:32"><name pos:start="1379:25" pos:end="1379:27">mod</name> <operator pos:start="1379:29" pos:end="1379:30">==</operator> <literal type="number" pos:start="1379:32" pos:end="1379:32">3</literal></expr>)</condition><block type="pseudo" pos:start="1381:25" pos:end="1381:50"><block_content pos:start="1381:25" pos:end="1381:50">

                        <expr_stmt pos:start="1381:25" pos:end="1381:50"><expr pos:start="1381:25" pos:end="1381:49"><call pos:start="1381:25" pos:end="1381:49"><name pos:start="1381:25" pos:end="1381:41">gen_op_mov_reg_T0</name><argument_list pos:start="1381:42" pos:end="1381:49">(<argument pos:start="1381:43" pos:end="1381:44"><expr pos:start="1381:43" pos:end="1381:44"><name pos:start="1381:43" pos:end="1381:44">ot</name></expr></argument>, <argument pos:start="1381:47" pos:end="1381:48"><expr pos:start="1381:47" pos:end="1381:48"><name pos:start="1381:47" pos:end="1381:48">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1383:21" pos:end="1387:65">else<block type="pseudo" pos:start="1385:25" pos:end="1387:65"><block_content pos:start="1385:25" pos:end="1387:65">

                        <expr_stmt pos:start="1385:25" pos:end="1387:65"><expr pos:start="1385:25" pos:end="1387:64"><call pos:start="1385:25" pos:end="1387:64"><name pos:start="1385:25" pos:end="1385:40">tcg_gen_qemu_st8</name><argument_list pos:start="1385:41" pos:end="1387:64">(<argument pos:start="1385:42" pos:end="1385:49"><expr pos:start="1385:42" pos:end="1385:49"><name pos:start="1385:42" pos:end="1385:49"><name pos:start="1385:42" pos:end="1385:46">cpu_T</name><index pos:start="1385:47" pos:end="1385:49">[<expr pos:start="1385:48" pos:end="1385:48"><literal type="number" pos:start="1385:48" pos:end="1385:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1385:52" pos:end="1385:57"><expr pos:start="1385:52" pos:end="1385:57"><name pos:start="1385:52" pos:end="1385:57">cpu_A0</name></expr></argument>,

                                        <argument pos:start="1387:41" pos:end="1387:63"><expr pos:start="1387:41" pos:end="1387:63"><operator pos:start="1387:41" pos:end="1387:41">(</operator><name pos:start="1387:42" pos:end="1387:53"><name pos:start="1387:42" pos:end="1387:42">s</name><operator pos:start="1387:43" pos:end="1387:44">-&gt;</operator><name pos:start="1387:45" pos:end="1387:53">mem_index</name></name> <operator pos:start="1387:55" pos:end="1387:56">&gt;&gt;</operator> <literal type="number" pos:start="1387:58" pos:end="1387:58">2</literal><operator pos:start="1387:59" pos:end="1387:59">)</operator> <operator pos:start="1387:61" pos:end="1387:61">-</operator> <literal type="number" pos:start="1387:63" pos:end="1387:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <break pos:start="1389:21" pos:end="1389:26">break;</break>

                <case pos:start="1391:17" pos:end="1391:26">case <expr pos:start="1391:22" pos:end="1391:25"><literal type="number" pos:start="1391:22" pos:end="1391:25">0x15</literal></expr>:</case> <comment type="block" pos:start="1391:28" pos:end="1391:39">/* pextrw */</comment>

                    <expr_stmt pos:start="1393:21" pos:end="1395:75"><expr pos:start="1393:21" pos:end="1395:74"><call pos:start="1393:21" pos:end="1395:74"><name pos:start="1393:21" pos:end="1393:36">tcg_gen_ld16u_tl</name><argument_list pos:start="1393:37" pos:end="1395:74">(<argument pos:start="1393:38" pos:end="1393:45"><expr pos:start="1393:38" pos:end="1393:45"><name pos:start="1393:38" pos:end="1393:45"><name pos:start="1393:38" pos:end="1393:42">cpu_T</name><index pos:start="1393:43" pos:end="1393:45">[<expr pos:start="1393:44" pos:end="1393:44"><literal type="number" pos:start="1393:44" pos:end="1393:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1393:48" pos:end="1393:54"><expr pos:start="1393:48" pos:end="1393:54"><name pos:start="1393:48" pos:end="1393:54">cpu_env</name></expr></argument>, <argument pos:start="1393:57" pos:end="1395:73"><expr pos:start="1393:57" pos:end="1395:73"><call pos:start="1393:57" pos:end="1395:73"><name pos:start="1393:57" pos:end="1393:64">offsetof</name><argument_list pos:start="1393:65" pos:end="1395:73">(<argument pos:start="1393:66" pos:end="1393:76"><expr pos:start="1393:66" pos:end="1393:76"><name pos:start="1393:66" pos:end="1393:76">CPUX86State</name></expr></argument>,

                                            <argument pos:start="1395:45" pos:end="1395:72"><expr pos:start="1395:45" pos:end="1395:72"><name pos:start="1395:45" pos:end="1395:57"><name pos:start="1395:45" pos:end="1395:52">xmm_regs</name><index pos:start="1395:53" pos:end="1395:57">[<expr pos:start="1395:54" pos:end="1395:56"><name pos:start="1395:54" pos:end="1395:56">reg</name></expr>]</index></name><operator pos:start="1395:58" pos:end="1395:58">.</operator><call pos:start="1395:59" pos:end="1395:72"><name pos:start="1395:59" pos:end="1395:63">XMM_W</name><argument_list pos:start="1395:64" pos:end="1395:72">(<argument pos:start="1395:65" pos:end="1395:71"><expr pos:start="1395:65" pos:end="1395:71"><name pos:start="1395:65" pos:end="1395:67">val</name> <operator pos:start="1395:69" pos:end="1395:69">&amp;</operator> <literal type="number" pos:start="1395:71" pos:end="1395:71">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1397:21" pos:end="1405:65"><if pos:start="1397:21" pos:end="1399:50">if <condition pos:start="1397:24" pos:end="1397:33">(<expr pos:start="1397:25" pos:end="1397:32"><name pos:start="1397:25" pos:end="1397:27">mod</name> <operator pos:start="1397:29" pos:end="1397:30">==</operator> <literal type="number" pos:start="1397:32" pos:end="1397:32">3</literal></expr>)</condition><block type="pseudo" pos:start="1399:25" pos:end="1399:50"><block_content pos:start="1399:25" pos:end="1399:50">

                        <expr_stmt pos:start="1399:25" pos:end="1399:50"><expr pos:start="1399:25" pos:end="1399:49"><call pos:start="1399:25" pos:end="1399:49"><name pos:start="1399:25" pos:end="1399:41">gen_op_mov_reg_T0</name><argument_list pos:start="1399:42" pos:end="1399:49">(<argument pos:start="1399:43" pos:end="1399:44"><expr pos:start="1399:43" pos:end="1399:44"><name pos:start="1399:43" pos:end="1399:44">ot</name></expr></argument>, <argument pos:start="1399:47" pos:end="1399:48"><expr pos:start="1399:47" pos:end="1399:48"><name pos:start="1399:47" pos:end="1399:48">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1401:21" pos:end="1405:65">else<block type="pseudo" pos:start="1403:25" pos:end="1405:65"><block_content pos:start="1403:25" pos:end="1405:65">

                        <expr_stmt pos:start="1403:25" pos:end="1405:65"><expr pos:start="1403:25" pos:end="1405:64"><call pos:start="1403:25" pos:end="1405:64"><name pos:start="1403:25" pos:end="1403:41">tcg_gen_qemu_st16</name><argument_list pos:start="1403:42" pos:end="1405:64">(<argument pos:start="1403:43" pos:end="1403:50"><expr pos:start="1403:43" pos:end="1403:50"><name pos:start="1403:43" pos:end="1403:50"><name pos:start="1403:43" pos:end="1403:47">cpu_T</name><index pos:start="1403:48" pos:end="1403:50">[<expr pos:start="1403:49" pos:end="1403:49"><literal type="number" pos:start="1403:49" pos:end="1403:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1403:53" pos:end="1403:58"><expr pos:start="1403:53" pos:end="1403:58"><name pos:start="1403:53" pos:end="1403:58">cpu_A0</name></expr></argument>,

                                        <argument pos:start="1405:41" pos:end="1405:63"><expr pos:start="1405:41" pos:end="1405:63"><operator pos:start="1405:41" pos:end="1405:41">(</operator><name pos:start="1405:42" pos:end="1405:53"><name pos:start="1405:42" pos:end="1405:42">s</name><operator pos:start="1405:43" pos:end="1405:44">-&gt;</operator><name pos:start="1405:45" pos:end="1405:53">mem_index</name></name> <operator pos:start="1405:55" pos:end="1405:56">&gt;&gt;</operator> <literal type="number" pos:start="1405:58" pos:end="1405:58">2</literal><operator pos:start="1405:59" pos:end="1405:59">)</operator> <operator pos:start="1405:61" pos:end="1405:61">-</operator> <literal type="number" pos:start="1405:63" pos:end="1405:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <break pos:start="1407:21" pos:end="1407:26">break;</break>

                <case pos:start="1409:17" pos:end="1409:26">case <expr pos:start="1409:22" pos:end="1409:25"><literal type="number" pos:start="1409:22" pos:end="1409:25">0x16</literal></expr>:</case>

                    <if_stmt pos:start="1411:21" pos:end="1447:21"><if pos:start="1411:21" pos:end="1429:21">if <condition pos:start="1411:24" pos:end="1411:38">(<expr pos:start="1411:25" pos:end="1411:37"><name pos:start="1411:25" pos:end="1411:26">ot</name> <operator pos:start="1411:28" pos:end="1411:29">==</operator> <name pos:start="1411:31" pos:end="1411:37">OT_LONG</name></expr>)</condition> <block pos:start="1411:40" pos:end="1429:21">{<block_content pos:start="1413:25" pos:end="1427:69"> <comment type="block" pos:start="1411:42" pos:end="1411:53">/* pextrd */</comment>

                        <expr_stmt pos:start="1413:25" pos:end="1417:79"><expr pos:start="1413:25" pos:end="1417:78"><call pos:start="1413:25" pos:end="1417:78"><name pos:start="1413:25" pos:end="1413:38">tcg_gen_ld_i32</name><argument_list pos:start="1413:39" pos:end="1417:78">(<argument pos:start="1413:40" pos:end="1413:51"><expr pos:start="1413:40" pos:end="1413:51"><name pos:start="1413:40" pos:end="1413:51">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1413:54" pos:end="1413:60"><expr pos:start="1413:54" pos:end="1413:60"><name pos:start="1413:54" pos:end="1413:60">cpu_env</name></expr></argument>,

                                        <argument pos:start="1415:41" pos:end="1417:77"><expr pos:start="1415:41" pos:end="1417:77"><call pos:start="1415:41" pos:end="1417:77"><name pos:start="1415:41" pos:end="1415:48">offsetof</name><argument_list pos:start="1415:49" pos:end="1417:77">(<argument pos:start="1415:50" pos:end="1415:60"><expr pos:start="1415:50" pos:end="1415:60"><name pos:start="1415:50" pos:end="1415:60">CPUX86State</name></expr></argument>,

                                                <argument pos:start="1417:49" pos:end="1417:76"><expr pos:start="1417:49" pos:end="1417:76"><name pos:start="1417:49" pos:end="1417:61"><name pos:start="1417:49" pos:end="1417:56">xmm_regs</name><index pos:start="1417:57" pos:end="1417:61">[<expr pos:start="1417:58" pos:end="1417:60"><name pos:start="1417:58" pos:end="1417:60">reg</name></expr>]</index></name><operator pos:start="1417:62" pos:end="1417:62">.</operator><call pos:start="1417:63" pos:end="1417:76"><name pos:start="1417:63" pos:end="1417:67">XMM_L</name><argument_list pos:start="1417:68" pos:end="1417:76">(<argument pos:start="1417:69" pos:end="1417:75"><expr pos:start="1417:69" pos:end="1417:75"><name pos:start="1417:69" pos:end="1417:71">val</name> <operator pos:start="1417:73" pos:end="1417:73">&amp;</operator> <literal type="number" pos:start="1417:75" pos:end="1417:75">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1419:25" pos:end="1427:69"><if pos:start="1419:25" pos:end="1421:67">if <condition pos:start="1419:28" pos:end="1419:37">(<expr pos:start="1419:29" pos:end="1419:36"><name pos:start="1419:29" pos:end="1419:31">mod</name> <operator pos:start="1419:33" pos:end="1419:34">==</operator> <literal type="number" pos:start="1419:36" pos:end="1419:36">3</literal></expr>)</condition><block type="pseudo" pos:start="1421:29" pos:end="1421:67"><block_content pos:start="1421:29" pos:end="1421:67">

                            <expr_stmt pos:start="1421:29" pos:end="1421:67"><expr pos:start="1421:29" pos:end="1421:66"><call pos:start="1421:29" pos:end="1421:66"><name pos:start="1421:29" pos:end="1421:44">gen_op_mov_reg_v</name><argument_list pos:start="1421:45" pos:end="1421:66">(<argument pos:start="1421:46" pos:end="1421:47"><expr pos:start="1421:46" pos:end="1421:47"><name pos:start="1421:46" pos:end="1421:47">ot</name></expr></argument>, <argument pos:start="1421:50" pos:end="1421:51"><expr pos:start="1421:50" pos:end="1421:51"><name pos:start="1421:50" pos:end="1421:51">rm</name></expr></argument>, <argument pos:start="1421:54" pos:end="1421:65"><expr pos:start="1421:54" pos:end="1421:65"><name pos:start="1421:54" pos:end="1421:65">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="1423:25" pos:end="1427:69">else<block type="pseudo" pos:start="1425:29" pos:end="1427:69"><block_content pos:start="1425:29" pos:end="1427:69">

                            <expr_stmt pos:start="1425:29" pos:end="1427:69"><expr pos:start="1425:29" pos:end="1427:68"><call pos:start="1425:29" pos:end="1427:68"><name pos:start="1425:29" pos:end="1425:45">tcg_gen_qemu_st32</name><argument_list pos:start="1425:46" pos:end="1427:68">(<argument pos:start="1425:47" pos:end="1425:58"><expr pos:start="1425:47" pos:end="1425:58"><name pos:start="1425:47" pos:end="1425:58">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1425:61" pos:end="1425:66"><expr pos:start="1425:61" pos:end="1425:66"><name pos:start="1425:61" pos:end="1425:66">cpu_A0</name></expr></argument>,

                                            <argument pos:start="1427:45" pos:end="1427:67"><expr pos:start="1427:45" pos:end="1427:67"><operator pos:start="1427:45" pos:end="1427:45">(</operator><name pos:start="1427:46" pos:end="1427:57"><name pos:start="1427:46" pos:end="1427:46">s</name><operator pos:start="1427:47" pos:end="1427:48">-&gt;</operator><name pos:start="1427:49" pos:end="1427:57">mem_index</name></name> <operator pos:start="1427:59" pos:end="1427:60">&gt;&gt;</operator> <literal type="number" pos:start="1427:62" pos:end="1427:62">2</literal><operator pos:start="1427:63" pos:end="1427:63">)</operator> <operator pos:start="1427:65" pos:end="1427:65">-</operator> <literal type="number" pos:start="1427:67" pos:end="1427:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="1429:23" pos:end="1447:21">else <block pos:start="1429:28" pos:end="1447:21">{<block_content pos:start="1431:25" pos:end="1445:69"> <comment type="block" pos:start="1429:30" pos:end="1429:41">/* pextrq */</comment>

                        <expr_stmt pos:start="1431:25" pos:end="1435:79"><expr pos:start="1431:25" pos:end="1435:78"><call pos:start="1431:25" pos:end="1435:78"><name pos:start="1431:25" pos:end="1431:38">tcg_gen_ld_i64</name><argument_list pos:start="1431:39" pos:end="1435:78">(<argument pos:start="1431:40" pos:end="1431:51"><expr pos:start="1431:40" pos:end="1431:51"><name pos:start="1431:40" pos:end="1431:51">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="1431:54" pos:end="1431:60"><expr pos:start="1431:54" pos:end="1431:60"><name pos:start="1431:54" pos:end="1431:60">cpu_env</name></expr></argument>,

                                        <argument pos:start="1433:41" pos:end="1435:77"><expr pos:start="1433:41" pos:end="1435:77"><call pos:start="1433:41" pos:end="1435:77"><name pos:start="1433:41" pos:end="1433:48">offsetof</name><argument_list pos:start="1433:49" pos:end="1435:77">(<argument pos:start="1433:50" pos:end="1433:60"><expr pos:start="1433:50" pos:end="1433:60"><name pos:start="1433:50" pos:end="1433:60">CPUX86State</name></expr></argument>,

                                                <argument pos:start="1435:49" pos:end="1435:76"><expr pos:start="1435:49" pos:end="1435:76"><name pos:start="1435:49" pos:end="1435:61"><name pos:start="1435:49" pos:end="1435:56">xmm_regs</name><index pos:start="1435:57" pos:end="1435:61">[<expr pos:start="1435:58" pos:end="1435:60"><name pos:start="1435:58" pos:end="1435:60">reg</name></expr>]</index></name><operator pos:start="1435:62" pos:end="1435:62">.</operator><call pos:start="1435:63" pos:end="1435:76"><name pos:start="1435:63" pos:end="1435:67">XMM_Q</name><argument_list pos:start="1435:68" pos:end="1435:76">(<argument pos:start="1435:69" pos:end="1435:75"><expr pos:start="1435:69" pos:end="1435:75"><name pos:start="1435:69" pos:end="1435:71">val</name> <operator pos:start="1435:73" pos:end="1435:73">&amp;</operator> <literal type="number" pos:start="1435:75" pos:end="1435:75">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1437:25" pos:end="1445:69"><if pos:start="1437:25" pos:end="1439:67">if <condition pos:start="1437:28" pos:end="1437:37">(<expr pos:start="1437:29" pos:end="1437:36"><name pos:start="1437:29" pos:end="1437:31">mod</name> <operator pos:start="1437:33" pos:end="1437:34">==</operator> <literal type="number" pos:start="1437:36" pos:end="1437:36">3</literal></expr>)</condition><block type="pseudo" pos:start="1439:29" pos:end="1439:67"><block_content pos:start="1439:29" pos:end="1439:67">

                            <expr_stmt pos:start="1439:29" pos:end="1439:67"><expr pos:start="1439:29" pos:end="1439:66"><call pos:start="1439:29" pos:end="1439:66"><name pos:start="1439:29" pos:end="1439:44">gen_op_mov_reg_v</name><argument_list pos:start="1439:45" pos:end="1439:66">(<argument pos:start="1439:46" pos:end="1439:47"><expr pos:start="1439:46" pos:end="1439:47"><name pos:start="1439:46" pos:end="1439:47">ot</name></expr></argument>, <argument pos:start="1439:50" pos:end="1439:51"><expr pos:start="1439:50" pos:end="1439:51"><name pos:start="1439:50" pos:end="1439:51">rm</name></expr></argument>, <argument pos:start="1439:54" pos:end="1439:65"><expr pos:start="1439:54" pos:end="1439:65"><name pos:start="1439:54" pos:end="1439:65">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="1441:25" pos:end="1445:69">else<block type="pseudo" pos:start="1443:29" pos:end="1445:69"><block_content pos:start="1443:29" pos:end="1445:69">

                            <expr_stmt pos:start="1443:29" pos:end="1445:69"><expr pos:start="1443:29" pos:end="1445:68"><call pos:start="1443:29" pos:end="1445:68"><name pos:start="1443:29" pos:end="1443:45">tcg_gen_qemu_st64</name><argument_list pos:start="1443:46" pos:end="1445:68">(<argument pos:start="1443:47" pos:end="1443:58"><expr pos:start="1443:47" pos:end="1443:58"><name pos:start="1443:47" pos:end="1443:58">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="1443:61" pos:end="1443:66"><expr pos:start="1443:61" pos:end="1443:66"><name pos:start="1443:61" pos:end="1443:66">cpu_A0</name></expr></argument>,

                                            <argument pos:start="1445:45" pos:end="1445:67"><expr pos:start="1445:45" pos:end="1445:67"><operator pos:start="1445:45" pos:end="1445:45">(</operator><name pos:start="1445:46" pos:end="1445:57"><name pos:start="1445:46" pos:end="1445:46">s</name><operator pos:start="1445:47" pos:end="1445:48">-&gt;</operator><name pos:start="1445:49" pos:end="1445:57">mem_index</name></name> <operator pos:start="1445:59" pos:end="1445:60">&gt;&gt;</operator> <literal type="number" pos:start="1445:62" pos:end="1445:62">2</literal><operator pos:start="1445:63" pos:end="1445:63">)</operator> <operator pos:start="1445:65" pos:end="1445:65">-</operator> <literal type="number" pos:start="1445:67" pos:end="1445:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="1449:21" pos:end="1449:26">break;</break>

                <case pos:start="1451:17" pos:end="1451:26">case <expr pos:start="1451:22" pos:end="1451:25"><literal type="number" pos:start="1451:22" pos:end="1451:25">0x17</literal></expr>:</case> <comment type="block" pos:start="1451:28" pos:end="1451:42">/* extractps */</comment>

                    <expr_stmt pos:start="1453:21" pos:end="1455:75"><expr pos:start="1453:21" pos:end="1455:74"><call pos:start="1453:21" pos:end="1455:74"><name pos:start="1453:21" pos:end="1453:36">tcg_gen_ld32u_tl</name><argument_list pos:start="1453:37" pos:end="1455:74">(<argument pos:start="1453:38" pos:end="1453:45"><expr pos:start="1453:38" pos:end="1453:45"><name pos:start="1453:38" pos:end="1453:45"><name pos:start="1453:38" pos:end="1453:42">cpu_T</name><index pos:start="1453:43" pos:end="1453:45">[<expr pos:start="1453:44" pos:end="1453:44"><literal type="number" pos:start="1453:44" pos:end="1453:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1453:48" pos:end="1453:54"><expr pos:start="1453:48" pos:end="1453:54"><name pos:start="1453:48" pos:end="1453:54">cpu_env</name></expr></argument>, <argument pos:start="1453:57" pos:end="1455:73"><expr pos:start="1453:57" pos:end="1455:73"><call pos:start="1453:57" pos:end="1455:73"><name pos:start="1453:57" pos:end="1453:64">offsetof</name><argument_list pos:start="1453:65" pos:end="1455:73">(<argument pos:start="1453:66" pos:end="1453:76"><expr pos:start="1453:66" pos:end="1453:76"><name pos:start="1453:66" pos:end="1453:76">CPUX86State</name></expr></argument>,

                                            <argument pos:start="1455:45" pos:end="1455:72"><expr pos:start="1455:45" pos:end="1455:72"><name pos:start="1455:45" pos:end="1455:57"><name pos:start="1455:45" pos:end="1455:52">xmm_regs</name><index pos:start="1455:53" pos:end="1455:57">[<expr pos:start="1455:54" pos:end="1455:56"><name pos:start="1455:54" pos:end="1455:56">reg</name></expr>]</index></name><operator pos:start="1455:58" pos:end="1455:58">.</operator><call pos:start="1455:59" pos:end="1455:72"><name pos:start="1455:59" pos:end="1455:63">XMM_L</name><argument_list pos:start="1455:64" pos:end="1455:72">(<argument pos:start="1455:65" pos:end="1455:71"><expr pos:start="1455:65" pos:end="1455:71"><name pos:start="1455:65" pos:end="1455:67">val</name> <operator pos:start="1455:69" pos:end="1455:69">&amp;</operator> <literal type="number" pos:start="1455:71" pos:end="1455:71">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1457:21" pos:end="1465:65"><if pos:start="1457:21" pos:end="1459:50">if <condition pos:start="1457:24" pos:end="1457:33">(<expr pos:start="1457:25" pos:end="1457:32"><name pos:start="1457:25" pos:end="1457:27">mod</name> <operator pos:start="1457:29" pos:end="1457:30">==</operator> <literal type="number" pos:start="1457:32" pos:end="1457:32">3</literal></expr>)</condition><block type="pseudo" pos:start="1459:25" pos:end="1459:50"><block_content pos:start="1459:25" pos:end="1459:50">

                        <expr_stmt pos:start="1459:25" pos:end="1459:50"><expr pos:start="1459:25" pos:end="1459:49"><call pos:start="1459:25" pos:end="1459:49"><name pos:start="1459:25" pos:end="1459:41">gen_op_mov_reg_T0</name><argument_list pos:start="1459:42" pos:end="1459:49">(<argument pos:start="1459:43" pos:end="1459:44"><expr pos:start="1459:43" pos:end="1459:44"><name pos:start="1459:43" pos:end="1459:44">ot</name></expr></argument>, <argument pos:start="1459:47" pos:end="1459:48"><expr pos:start="1459:47" pos:end="1459:48"><name pos:start="1459:47" pos:end="1459:48">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1461:21" pos:end="1465:65">else<block type="pseudo" pos:start="1463:25" pos:end="1465:65"><block_content pos:start="1463:25" pos:end="1465:65">

                        <expr_stmt pos:start="1463:25" pos:end="1465:65"><expr pos:start="1463:25" pos:end="1465:64"><call pos:start="1463:25" pos:end="1465:64"><name pos:start="1463:25" pos:end="1463:41">tcg_gen_qemu_st32</name><argument_list pos:start="1463:42" pos:end="1465:64">(<argument pos:start="1463:43" pos:end="1463:50"><expr pos:start="1463:43" pos:end="1463:50"><name pos:start="1463:43" pos:end="1463:50"><name pos:start="1463:43" pos:end="1463:47">cpu_T</name><index pos:start="1463:48" pos:end="1463:50">[<expr pos:start="1463:49" pos:end="1463:49"><literal type="number" pos:start="1463:49" pos:end="1463:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1463:53" pos:end="1463:58"><expr pos:start="1463:53" pos:end="1463:58"><name pos:start="1463:53" pos:end="1463:58">cpu_A0</name></expr></argument>,

                                        <argument pos:start="1465:41" pos:end="1465:63"><expr pos:start="1465:41" pos:end="1465:63"><operator pos:start="1465:41" pos:end="1465:41">(</operator><name pos:start="1465:42" pos:end="1465:53"><name pos:start="1465:42" pos:end="1465:42">s</name><operator pos:start="1465:43" pos:end="1465:44">-&gt;</operator><name pos:start="1465:45" pos:end="1465:53">mem_index</name></name> <operator pos:start="1465:55" pos:end="1465:56">&gt;&gt;</operator> <literal type="number" pos:start="1465:58" pos:end="1465:58">2</literal><operator pos:start="1465:59" pos:end="1465:59">)</operator> <operator pos:start="1465:61" pos:end="1465:61">-</operator> <literal type="number" pos:start="1465:63" pos:end="1465:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <break pos:start="1467:21" pos:end="1467:26">break;</break>

                <case pos:start="1469:17" pos:end="1469:26">case <expr pos:start="1469:22" pos:end="1469:25"><literal type="number" pos:start="1469:22" pos:end="1469:25">0x20</literal></expr>:</case> <comment type="block" pos:start="1469:28" pos:end="1469:39">/* pinsrb */</comment>

                    <if_stmt pos:start="1471:21" pos:end="1479:65"><if pos:start="1471:21" pos:end="1473:58">if <condition pos:start="1471:24" pos:end="1471:33">(<expr pos:start="1471:25" pos:end="1471:32"><name pos:start="1471:25" pos:end="1471:27">mod</name> <operator pos:start="1471:29" pos:end="1471:30">==</operator> <literal type="number" pos:start="1471:32" pos:end="1471:32">3</literal></expr>)</condition><block type="pseudo" pos:start="1473:25" pos:end="1473:58"><block_content pos:start="1473:25" pos:end="1473:58">

                        <expr_stmt pos:start="1473:25" pos:end="1473:58"><expr pos:start="1473:25" pos:end="1473:57"><call pos:start="1473:25" pos:end="1473:57"><name pos:start="1473:25" pos:end="1473:41">gen_op_mov_TN_reg</name><argument_list pos:start="1473:42" pos:end="1473:57">(<argument pos:start="1473:43" pos:end="1473:49"><expr pos:start="1473:43" pos:end="1473:49"><name pos:start="1473:43" pos:end="1473:49">OT_LONG</name></expr></argument>, <argument pos:start="1473:52" pos:end="1473:52"><expr pos:start="1473:52" pos:end="1473:52"><literal type="number" pos:start="1473:52" pos:end="1473:52">0</literal></expr></argument>, <argument pos:start="1473:55" pos:end="1473:56"><expr pos:start="1473:55" pos:end="1473:56"><name pos:start="1473:55" pos:end="1473:56">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1475:21" pos:end="1479:65">else<block type="pseudo" pos:start="1477:25" pos:end="1479:65"><block_content pos:start="1477:25" pos:end="1479:65">

                        <expr_stmt pos:start="1477:25" pos:end="1479:65"><expr pos:start="1477:25" pos:end="1479:64"><call pos:start="1477:25" pos:end="1479:64"><name pos:start="1477:25" pos:end="1477:41">tcg_gen_qemu_ld8u</name><argument_list pos:start="1477:42" pos:end="1479:64">(<argument pos:start="1477:43" pos:end="1477:50"><expr pos:start="1477:43" pos:end="1477:50"><name pos:start="1477:43" pos:end="1477:50"><name pos:start="1477:43" pos:end="1477:47">cpu_T</name><index pos:start="1477:48" pos:end="1477:50">[<expr pos:start="1477:49" pos:end="1477:49"><literal type="number" pos:start="1477:49" pos:end="1477:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1477:53" pos:end="1477:58"><expr pos:start="1477:53" pos:end="1477:58"><name pos:start="1477:53" pos:end="1477:58">cpu_A0</name></expr></argument>,

                                        <argument pos:start="1479:41" pos:end="1479:63"><expr pos:start="1479:41" pos:end="1479:63"><operator pos:start="1479:41" pos:end="1479:41">(</operator><name pos:start="1479:42" pos:end="1479:53"><name pos:start="1479:42" pos:end="1479:42">s</name><operator pos:start="1479:43" pos:end="1479:44">-&gt;</operator><name pos:start="1479:45" pos:end="1479:53">mem_index</name></name> <operator pos:start="1479:55" pos:end="1479:56">&gt;&gt;</operator> <literal type="number" pos:start="1479:58" pos:end="1479:58">2</literal><operator pos:start="1479:59" pos:end="1479:59">)</operator> <operator pos:start="1479:61" pos:end="1479:61">-</operator> <literal type="number" pos:start="1479:63" pos:end="1479:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="1481:21" pos:end="1483:76"><expr pos:start="1481:21" pos:end="1483:75"><call pos:start="1481:21" pos:end="1483:75"><name pos:start="1481:21" pos:end="1481:34">tcg_gen_st8_tl</name><argument_list pos:start="1481:35" pos:end="1483:75">(<argument pos:start="1481:36" pos:end="1481:43"><expr pos:start="1481:36" pos:end="1481:43"><name pos:start="1481:36" pos:end="1481:43"><name pos:start="1481:36" pos:end="1481:40">cpu_T</name><index pos:start="1481:41" pos:end="1481:43">[<expr pos:start="1481:42" pos:end="1481:42"><literal type="number" pos:start="1481:42" pos:end="1481:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1481:46" pos:end="1481:52"><expr pos:start="1481:46" pos:end="1481:52"><name pos:start="1481:46" pos:end="1481:52">cpu_env</name></expr></argument>, <argument pos:start="1481:55" pos:end="1483:74"><expr pos:start="1481:55" pos:end="1483:74"><call pos:start="1481:55" pos:end="1483:74"><name pos:start="1481:55" pos:end="1481:62">offsetof</name><argument_list pos:start="1481:63" pos:end="1483:74">(<argument pos:start="1481:64" pos:end="1481:74"><expr pos:start="1481:64" pos:end="1481:74"><name pos:start="1481:64" pos:end="1481:74">CPUX86State</name></expr></argument>,

                                            <argument pos:start="1483:45" pos:end="1483:73"><expr pos:start="1483:45" pos:end="1483:73"><name pos:start="1483:45" pos:end="1483:57"><name pos:start="1483:45" pos:end="1483:52">xmm_regs</name><index pos:start="1483:53" pos:end="1483:57">[<expr pos:start="1483:54" pos:end="1483:56"><name pos:start="1483:54" pos:end="1483:56">reg</name></expr>]</index></name><operator pos:start="1483:58" pos:end="1483:58">.</operator><call pos:start="1483:59" pos:end="1483:73"><name pos:start="1483:59" pos:end="1483:63">XMM_B</name><argument_list pos:start="1483:64" pos:end="1483:73">(<argument pos:start="1483:65" pos:end="1483:72"><expr pos:start="1483:65" pos:end="1483:72"><name pos:start="1483:65" pos:end="1483:67">val</name> <operator pos:start="1483:69" pos:end="1483:69">&amp;</operator> <literal type="number" pos:start="1483:71" pos:end="1483:72">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1485:21" pos:end="1485:26">break;</break>

                <case pos:start="1487:17" pos:end="1487:26">case <expr pos:start="1487:22" pos:end="1487:25"><literal type="number" pos:start="1487:22" pos:end="1487:25">0x21</literal></expr>:</case> <comment type="block" pos:start="1487:28" pos:end="1487:41">/* insertps */</comment>

                    <if_stmt pos:start="1489:21" pos:end="1501:65"><if pos:start="1489:21" pos:end="1495:73">if <condition pos:start="1489:24" pos:end="1489:33">(<expr pos:start="1489:25" pos:end="1489:32"><name pos:start="1489:25" pos:end="1489:27">mod</name> <operator pos:start="1489:29" pos:end="1489:30">==</operator> <literal type="number" pos:start="1489:32" pos:end="1489:32">3</literal></expr>)</condition><block type="pseudo" pos:start="1491:25" pos:end="1495:73"><block_content pos:start="1491:25" pos:end="1495:73">

                        <expr_stmt pos:start="1491:25" pos:end="1495:73"><expr pos:start="1491:25" pos:end="1495:72"><call pos:start="1491:25" pos:end="1495:72"><name pos:start="1491:25" pos:end="1491:38">tcg_gen_ld_i32</name><argument_list pos:start="1491:39" pos:end="1495:72">(<argument pos:start="1491:40" pos:end="1491:51"><expr pos:start="1491:40" pos:end="1491:51"><name pos:start="1491:40" pos:end="1491:51">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1491:54" pos:end="1491:60"><expr pos:start="1491:54" pos:end="1491:60"><name pos:start="1491:54" pos:end="1491:60">cpu_env</name></expr></argument>,

                                        <argument pos:start="1493:41" pos:end="1495:71"><expr pos:start="1493:41" pos:end="1495:71"><call pos:start="1493:41" pos:end="1495:71"><name pos:start="1493:41" pos:end="1493:48">offsetof</name><argument_list pos:start="1493:49" pos:end="1495:71">(<argument pos:start="1493:50" pos:end="1493:60"><expr pos:start="1493:50" pos:end="1493:60"><name pos:start="1493:50" pos:end="1493:60">CPUX86State</name></expr></argument>,<argument pos:start="1493:62" pos:end="1495:70"><expr pos:start="1493:62" pos:end="1495:70"><name pos:start="1493:62" pos:end="1493:73"><name pos:start="1493:62" pos:end="1493:69">xmm_regs</name><index pos:start="1493:70" pos:end="1493:73">[<expr pos:start="1493:71" pos:end="1493:72"><name pos:start="1493:71" pos:end="1493:72">rm</name></expr>]</index></name>

                                                <operator pos:start="1495:49" pos:end="1495:49">.</operator><call pos:start="1495:50" pos:end="1495:70"><name pos:start="1495:50" pos:end="1495:54">XMM_L</name><argument_list pos:start="1495:55" pos:end="1495:70">(<argument pos:start="1495:56" pos:end="1495:69"><expr pos:start="1495:56" pos:end="1495:69"><operator pos:start="1495:56" pos:end="1495:56">(</operator><name pos:start="1495:57" pos:end="1495:59">val</name> <operator pos:start="1495:61" pos:end="1495:62">&gt;&gt;</operator> <literal type="number" pos:start="1495:64" pos:end="1495:64">6</literal><operator pos:start="1495:65" pos:end="1495:65">)</operator> <operator pos:start="1495:67" pos:end="1495:67">&amp;</operator> <literal type="number" pos:start="1495:69" pos:end="1495:69">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1497:21" pos:end="1501:65">else<block type="pseudo" pos:start="1499:25" pos:end="1501:65"><block_content pos:start="1499:25" pos:end="1501:65">

                        <expr_stmt pos:start="1499:25" pos:end="1501:65"><expr pos:start="1499:25" pos:end="1501:64"><call pos:start="1499:25" pos:end="1501:64"><name pos:start="1499:25" pos:end="1499:42">tcg_gen_qemu_ld32u</name><argument_list pos:start="1499:43" pos:end="1501:64">(<argument pos:start="1499:44" pos:end="1499:55"><expr pos:start="1499:44" pos:end="1499:55"><name pos:start="1499:44" pos:end="1499:55">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1499:58" pos:end="1499:63"><expr pos:start="1499:58" pos:end="1499:63"><name pos:start="1499:58" pos:end="1499:63">cpu_A0</name></expr></argument>,

                                        <argument pos:start="1501:41" pos:end="1501:63"><expr pos:start="1501:41" pos:end="1501:63"><operator pos:start="1501:41" pos:end="1501:41">(</operator><name pos:start="1501:42" pos:end="1501:53"><name pos:start="1501:42" pos:end="1501:42">s</name><operator pos:start="1501:43" pos:end="1501:44">-&gt;</operator><name pos:start="1501:45" pos:end="1501:53">mem_index</name></name> <operator pos:start="1501:55" pos:end="1501:56">&gt;&gt;</operator> <literal type="number" pos:start="1501:58" pos:end="1501:58">2</literal><operator pos:start="1501:59" pos:end="1501:59">)</operator> <operator pos:start="1501:61" pos:end="1501:61">-</operator> <literal type="number" pos:start="1501:63" pos:end="1501:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="1503:21" pos:end="1507:69"><expr pos:start="1503:21" pos:end="1507:68"><call pos:start="1503:21" pos:end="1507:68"><name pos:start="1503:21" pos:end="1503:34">tcg_gen_st_i32</name><argument_list pos:start="1503:35" pos:end="1507:68">(<argument pos:start="1503:36" pos:end="1503:47"><expr pos:start="1503:36" pos:end="1503:47"><name pos:start="1503:36" pos:end="1503:47">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1503:50" pos:end="1503:56"><expr pos:start="1503:50" pos:end="1503:56"><name pos:start="1503:50" pos:end="1503:56">cpu_env</name></expr></argument>,

                                    <argument pos:start="1505:37" pos:end="1507:67"><expr pos:start="1505:37" pos:end="1507:67"><call pos:start="1505:37" pos:end="1507:67"><name pos:start="1505:37" pos:end="1505:44">offsetof</name><argument_list pos:start="1505:45" pos:end="1507:67">(<argument pos:start="1505:46" pos:end="1505:56"><expr pos:start="1505:46" pos:end="1505:56"><name pos:start="1505:46" pos:end="1505:56">CPUX86State</name></expr></argument>,<argument pos:start="1505:58" pos:end="1507:66"><expr pos:start="1505:58" pos:end="1507:66"><name pos:start="1505:58" pos:end="1505:70"><name pos:start="1505:58" pos:end="1505:65">xmm_regs</name><index pos:start="1505:66" pos:end="1505:70">[<expr pos:start="1505:67" pos:end="1505:69"><name pos:start="1505:67" pos:end="1505:69">reg</name></expr>]</index></name>

                                            <operator pos:start="1507:45" pos:end="1507:45">.</operator><call pos:start="1507:46" pos:end="1507:66"><name pos:start="1507:46" pos:end="1507:50">XMM_L</name><argument_list pos:start="1507:51" pos:end="1507:66">(<argument pos:start="1507:52" pos:end="1507:65"><expr pos:start="1507:52" pos:end="1507:65"><operator pos:start="1507:52" pos:end="1507:52">(</operator><name pos:start="1507:53" pos:end="1507:55">val</name> <operator pos:start="1507:57" pos:end="1507:58">&gt;&gt;</operator> <literal type="number" pos:start="1507:60" pos:end="1507:60">4</literal><operator pos:start="1507:61" pos:end="1507:61">)</operator> <operator pos:start="1507:63" pos:end="1507:63">&amp;</operator> <literal type="number" pos:start="1507:65" pos:end="1507:65">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1509:21" pos:end="1515:73"><if pos:start="1509:21" pos:end="1515:73">if <condition pos:start="1509:24" pos:end="1509:39">(<expr pos:start="1509:25" pos:end="1509:38"><operator pos:start="1509:25" pos:end="1509:25">(</operator><name pos:start="1509:26" pos:end="1509:28">val</name> <operator pos:start="1509:30" pos:end="1509:31">&gt;&gt;</operator> <literal type="number" pos:start="1509:33" pos:end="1509:33">0</literal><operator pos:start="1509:34" pos:end="1509:34">)</operator> <operator pos:start="1509:36" pos:end="1509:36">&amp;</operator> <literal type="number" pos:start="1509:38" pos:end="1509:38">1</literal></expr>)</condition><block type="pseudo" pos:start="1511:25" pos:end="1515:73"><block_content pos:start="1511:25" pos:end="1515:73">

                        <expr_stmt pos:start="1511:25" pos:end="1515:73"><expr pos:start="1511:25" pos:end="1515:72"><call pos:start="1511:25" pos:end="1515:72"><name pos:start="1511:25" pos:end="1511:38">tcg_gen_st_i32</name><argument_list pos:start="1511:39" pos:end="1515:72">(<argument pos:start="1511:40" pos:end="1511:72"><expr pos:start="1511:40" pos:end="1511:72"><call pos:start="1511:40" pos:end="1511:72"><name pos:start="1511:40" pos:end="1511:52">tcg_const_i32</name><argument_list pos:start="1511:53" pos:end="1511:72">(<argument pos:start="1511:54" pos:end="1511:54"><expr pos:start="1511:54" pos:end="1511:54"><literal type="number" pos:start="1511:54" pos:end="1511:54">0</literal></expr></argument> <comment type="block" pos:start="1511:56" pos:end="1511:71">/*float32_zero*/</comment>)</argument_list></call></expr></argument>,

                                        <argument pos:start="1513:41" pos:end="1513:47"><expr pos:start="1513:41" pos:end="1513:47"><name pos:start="1513:41" pos:end="1513:47">cpu_env</name></expr></argument>, <argument pos:start="1513:50" pos:end="1515:71"><expr pos:start="1513:50" pos:end="1515:71"><call pos:start="1513:50" pos:end="1515:71"><name pos:start="1513:50" pos:end="1513:57">offsetof</name><argument_list pos:start="1513:58" pos:end="1515:71">(<argument pos:start="1513:59" pos:end="1513:69"><expr pos:start="1513:59" pos:end="1513:69"><name pos:start="1513:59" pos:end="1513:69">CPUX86State</name></expr></argument>,

                                                <argument pos:start="1515:49" pos:end="1515:70"><expr pos:start="1515:49" pos:end="1515:70"><name pos:start="1515:49" pos:end="1515:61"><name pos:start="1515:49" pos:end="1515:56">xmm_regs</name><index pos:start="1515:57" pos:end="1515:61">[<expr pos:start="1515:58" pos:end="1515:60"><name pos:start="1515:58" pos:end="1515:60">reg</name></expr>]</index></name><operator pos:start="1515:62" pos:end="1515:62">.</operator><call pos:start="1515:63" pos:end="1515:70"><name pos:start="1515:63" pos:end="1515:67">XMM_L</name><argument_list pos:start="1515:68" pos:end="1515:70">(<argument pos:start="1515:69" pos:end="1515:69"><expr pos:start="1515:69" pos:end="1515:69"><literal type="number" pos:start="1515:69" pos:end="1515:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="1517:21" pos:end="1523:73"><if pos:start="1517:21" pos:end="1523:73">if <condition pos:start="1517:24" pos:end="1517:39">(<expr pos:start="1517:25" pos:end="1517:38"><operator pos:start="1517:25" pos:end="1517:25">(</operator><name pos:start="1517:26" pos:end="1517:28">val</name> <operator pos:start="1517:30" pos:end="1517:31">&gt;&gt;</operator> <literal type="number" pos:start="1517:33" pos:end="1517:33">1</literal><operator pos:start="1517:34" pos:end="1517:34">)</operator> <operator pos:start="1517:36" pos:end="1517:36">&amp;</operator> <literal type="number" pos:start="1517:38" pos:end="1517:38">1</literal></expr>)</condition><block type="pseudo" pos:start="1519:25" pos:end="1523:73"><block_content pos:start="1519:25" pos:end="1523:73">

                        <expr_stmt pos:start="1519:25" pos:end="1523:73"><expr pos:start="1519:25" pos:end="1523:72"><call pos:start="1519:25" pos:end="1523:72"><name pos:start="1519:25" pos:end="1519:38">tcg_gen_st_i32</name><argument_list pos:start="1519:39" pos:end="1523:72">(<argument pos:start="1519:40" pos:end="1519:72"><expr pos:start="1519:40" pos:end="1519:72"><call pos:start="1519:40" pos:end="1519:72"><name pos:start="1519:40" pos:end="1519:52">tcg_const_i32</name><argument_list pos:start="1519:53" pos:end="1519:72">(<argument pos:start="1519:54" pos:end="1519:54"><expr pos:start="1519:54" pos:end="1519:54"><literal type="number" pos:start="1519:54" pos:end="1519:54">0</literal></expr></argument> <comment type="block" pos:start="1519:56" pos:end="1519:71">/*float32_zero*/</comment>)</argument_list></call></expr></argument>,

                                        <argument pos:start="1521:41" pos:end="1521:47"><expr pos:start="1521:41" pos:end="1521:47"><name pos:start="1521:41" pos:end="1521:47">cpu_env</name></expr></argument>, <argument pos:start="1521:50" pos:end="1523:71"><expr pos:start="1521:50" pos:end="1523:71"><call pos:start="1521:50" pos:end="1523:71"><name pos:start="1521:50" pos:end="1521:57">offsetof</name><argument_list pos:start="1521:58" pos:end="1523:71">(<argument pos:start="1521:59" pos:end="1521:69"><expr pos:start="1521:59" pos:end="1521:69"><name pos:start="1521:59" pos:end="1521:69">CPUX86State</name></expr></argument>,

                                                <argument pos:start="1523:49" pos:end="1523:70"><expr pos:start="1523:49" pos:end="1523:70"><name pos:start="1523:49" pos:end="1523:61"><name pos:start="1523:49" pos:end="1523:56">xmm_regs</name><index pos:start="1523:57" pos:end="1523:61">[<expr pos:start="1523:58" pos:end="1523:60"><name pos:start="1523:58" pos:end="1523:60">reg</name></expr>]</index></name><operator pos:start="1523:62" pos:end="1523:62">.</operator><call pos:start="1523:63" pos:end="1523:70"><name pos:start="1523:63" pos:end="1523:67">XMM_L</name><argument_list pos:start="1523:68" pos:end="1523:70">(<argument pos:start="1523:69" pos:end="1523:69"><expr pos:start="1523:69" pos:end="1523:69"><literal type="number" pos:start="1523:69" pos:end="1523:69">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="1525:21" pos:end="1531:73"><if pos:start="1525:21" pos:end="1531:73">if <condition pos:start="1525:24" pos:end="1525:39">(<expr pos:start="1525:25" pos:end="1525:38"><operator pos:start="1525:25" pos:end="1525:25">(</operator><name pos:start="1525:26" pos:end="1525:28">val</name> <operator pos:start="1525:30" pos:end="1525:31">&gt;&gt;</operator> <literal type="number" pos:start="1525:33" pos:end="1525:33">2</literal><operator pos:start="1525:34" pos:end="1525:34">)</operator> <operator pos:start="1525:36" pos:end="1525:36">&amp;</operator> <literal type="number" pos:start="1525:38" pos:end="1525:38">1</literal></expr>)</condition><block type="pseudo" pos:start="1527:25" pos:end="1531:73"><block_content pos:start="1527:25" pos:end="1531:73">

                        <expr_stmt pos:start="1527:25" pos:end="1531:73"><expr pos:start="1527:25" pos:end="1531:72"><call pos:start="1527:25" pos:end="1531:72"><name pos:start="1527:25" pos:end="1527:38">tcg_gen_st_i32</name><argument_list pos:start="1527:39" pos:end="1531:72">(<argument pos:start="1527:40" pos:end="1527:72"><expr pos:start="1527:40" pos:end="1527:72"><call pos:start="1527:40" pos:end="1527:72"><name pos:start="1527:40" pos:end="1527:52">tcg_const_i32</name><argument_list pos:start="1527:53" pos:end="1527:72">(<argument pos:start="1527:54" pos:end="1527:54"><expr pos:start="1527:54" pos:end="1527:54"><literal type="number" pos:start="1527:54" pos:end="1527:54">0</literal></expr></argument> <comment type="block" pos:start="1527:56" pos:end="1527:71">/*float32_zero*/</comment>)</argument_list></call></expr></argument>,

                                        <argument pos:start="1529:41" pos:end="1529:47"><expr pos:start="1529:41" pos:end="1529:47"><name pos:start="1529:41" pos:end="1529:47">cpu_env</name></expr></argument>, <argument pos:start="1529:50" pos:end="1531:71"><expr pos:start="1529:50" pos:end="1531:71"><call pos:start="1529:50" pos:end="1531:71"><name pos:start="1529:50" pos:end="1529:57">offsetof</name><argument_list pos:start="1529:58" pos:end="1531:71">(<argument pos:start="1529:59" pos:end="1529:69"><expr pos:start="1529:59" pos:end="1529:69"><name pos:start="1529:59" pos:end="1529:69">CPUX86State</name></expr></argument>,

                                                <argument pos:start="1531:49" pos:end="1531:70"><expr pos:start="1531:49" pos:end="1531:70"><name pos:start="1531:49" pos:end="1531:61"><name pos:start="1531:49" pos:end="1531:56">xmm_regs</name><index pos:start="1531:57" pos:end="1531:61">[<expr pos:start="1531:58" pos:end="1531:60"><name pos:start="1531:58" pos:end="1531:60">reg</name></expr>]</index></name><operator pos:start="1531:62" pos:end="1531:62">.</operator><call pos:start="1531:63" pos:end="1531:70"><name pos:start="1531:63" pos:end="1531:67">XMM_L</name><argument_list pos:start="1531:68" pos:end="1531:70">(<argument pos:start="1531:69" pos:end="1531:69"><expr pos:start="1531:69" pos:end="1531:69"><literal type="number" pos:start="1531:69" pos:end="1531:69">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="1533:21" pos:end="1539:73"><if pos:start="1533:21" pos:end="1539:73">if <condition pos:start="1533:24" pos:end="1533:39">(<expr pos:start="1533:25" pos:end="1533:38"><operator pos:start="1533:25" pos:end="1533:25">(</operator><name pos:start="1533:26" pos:end="1533:28">val</name> <operator pos:start="1533:30" pos:end="1533:31">&gt;&gt;</operator> <literal type="number" pos:start="1533:33" pos:end="1533:33">3</literal><operator pos:start="1533:34" pos:end="1533:34">)</operator> <operator pos:start="1533:36" pos:end="1533:36">&amp;</operator> <literal type="number" pos:start="1533:38" pos:end="1533:38">1</literal></expr>)</condition><block type="pseudo" pos:start="1535:25" pos:end="1539:73"><block_content pos:start="1535:25" pos:end="1539:73">

                        <expr_stmt pos:start="1535:25" pos:end="1539:73"><expr pos:start="1535:25" pos:end="1539:72"><call pos:start="1535:25" pos:end="1539:72"><name pos:start="1535:25" pos:end="1535:38">tcg_gen_st_i32</name><argument_list pos:start="1535:39" pos:end="1539:72">(<argument pos:start="1535:40" pos:end="1535:72"><expr pos:start="1535:40" pos:end="1535:72"><call pos:start="1535:40" pos:end="1535:72"><name pos:start="1535:40" pos:end="1535:52">tcg_const_i32</name><argument_list pos:start="1535:53" pos:end="1535:72">(<argument pos:start="1535:54" pos:end="1535:54"><expr pos:start="1535:54" pos:end="1535:54"><literal type="number" pos:start="1535:54" pos:end="1535:54">0</literal></expr></argument> <comment type="block" pos:start="1535:56" pos:end="1535:71">/*float32_zero*/</comment>)</argument_list></call></expr></argument>,

                                        <argument pos:start="1537:41" pos:end="1537:47"><expr pos:start="1537:41" pos:end="1537:47"><name pos:start="1537:41" pos:end="1537:47">cpu_env</name></expr></argument>, <argument pos:start="1537:50" pos:end="1539:71"><expr pos:start="1537:50" pos:end="1539:71"><call pos:start="1537:50" pos:end="1539:71"><name pos:start="1537:50" pos:end="1537:57">offsetof</name><argument_list pos:start="1537:58" pos:end="1539:71">(<argument pos:start="1537:59" pos:end="1537:69"><expr pos:start="1537:59" pos:end="1537:69"><name pos:start="1537:59" pos:end="1537:69">CPUX86State</name></expr></argument>,

                                                <argument pos:start="1539:49" pos:end="1539:70"><expr pos:start="1539:49" pos:end="1539:70"><name pos:start="1539:49" pos:end="1539:61"><name pos:start="1539:49" pos:end="1539:56">xmm_regs</name><index pos:start="1539:57" pos:end="1539:61">[<expr pos:start="1539:58" pos:end="1539:60"><name pos:start="1539:58" pos:end="1539:60">reg</name></expr>]</index></name><operator pos:start="1539:62" pos:end="1539:62">.</operator><call pos:start="1539:63" pos:end="1539:70"><name pos:start="1539:63" pos:end="1539:67">XMM_L</name><argument_list pos:start="1539:68" pos:end="1539:70">(<argument pos:start="1539:69" pos:end="1539:69"><expr pos:start="1539:69" pos:end="1539:69"><literal type="number" pos:start="1539:69" pos:end="1539:69">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break pos:start="1541:21" pos:end="1541:26">break;</break>

                <case pos:start="1543:17" pos:end="1543:26">case <expr pos:start="1543:22" pos:end="1543:25"><literal type="number" pos:start="1543:22" pos:end="1543:25">0x22</literal></expr>:</case>

                    <if_stmt pos:start="1545:21" pos:end="1581:21"><if pos:start="1545:21" pos:end="1563:21">if <condition pos:start="1545:24" pos:end="1545:38">(<expr pos:start="1545:25" pos:end="1545:37"><name pos:start="1545:25" pos:end="1545:26">ot</name> <operator pos:start="1545:28" pos:end="1545:29">==</operator> <name pos:start="1545:31" pos:end="1545:37">OT_LONG</name></expr>)</condition> <block pos:start="1545:40" pos:end="1563:21">{<block_content pos:start="1547:25" pos:end="1561:79"> <comment type="block" pos:start="1545:42" pos:end="1545:53">/* pinsrd */</comment>

                        <if_stmt pos:start="1547:25" pos:end="1555:69"><if pos:start="1547:25" pos:end="1549:67">if <condition pos:start="1547:28" pos:end="1547:37">(<expr pos:start="1547:29" pos:end="1547:36"><name pos:start="1547:29" pos:end="1547:31">mod</name> <operator pos:start="1547:33" pos:end="1547:34">==</operator> <literal type="number" pos:start="1547:36" pos:end="1547:36">3</literal></expr>)</condition><block type="pseudo" pos:start="1549:29" pos:end="1549:67"><block_content pos:start="1549:29" pos:end="1549:67">

                            <expr_stmt pos:start="1549:29" pos:end="1549:67"><expr pos:start="1549:29" pos:end="1549:66"><call pos:start="1549:29" pos:end="1549:66"><name pos:start="1549:29" pos:end="1549:44">gen_op_mov_v_reg</name><argument_list pos:start="1549:45" pos:end="1549:66">(<argument pos:start="1549:46" pos:end="1549:47"><expr pos:start="1549:46" pos:end="1549:47"><name pos:start="1549:46" pos:end="1549:47">ot</name></expr></argument>, <argument pos:start="1549:50" pos:end="1549:61"><expr pos:start="1549:50" pos:end="1549:61"><name pos:start="1549:50" pos:end="1549:61">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1549:64" pos:end="1549:65"><expr pos:start="1549:64" pos:end="1549:65"><name pos:start="1549:64" pos:end="1549:65">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="1551:25" pos:end="1555:69">else<block type="pseudo" pos:start="1553:29" pos:end="1555:69"><block_content pos:start="1553:29" pos:end="1555:69">

                            <expr_stmt pos:start="1553:29" pos:end="1555:69"><expr pos:start="1553:29" pos:end="1555:68"><call pos:start="1553:29" pos:end="1555:68"><name pos:start="1553:29" pos:end="1553:46">tcg_gen_qemu_ld32u</name><argument_list pos:start="1553:47" pos:end="1555:68">(<argument pos:start="1553:48" pos:end="1553:59"><expr pos:start="1553:48" pos:end="1553:59"><name pos:start="1553:48" pos:end="1553:59">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1553:62" pos:end="1553:67"><expr pos:start="1553:62" pos:end="1553:67"><name pos:start="1553:62" pos:end="1553:67">cpu_A0</name></expr></argument>,

                                            <argument pos:start="1555:45" pos:end="1555:67"><expr pos:start="1555:45" pos:end="1555:67"><operator pos:start="1555:45" pos:end="1555:45">(</operator><name pos:start="1555:46" pos:end="1555:57"><name pos:start="1555:46" pos:end="1555:46">s</name><operator pos:start="1555:47" pos:end="1555:48">-&gt;</operator><name pos:start="1555:49" pos:end="1555:57">mem_index</name></name> <operator pos:start="1555:59" pos:end="1555:60">&gt;&gt;</operator> <literal type="number" pos:start="1555:62" pos:end="1555:62">2</literal><operator pos:start="1555:63" pos:end="1555:63">)</operator> <operator pos:start="1555:65" pos:end="1555:65">-</operator> <literal type="number" pos:start="1555:67" pos:end="1555:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="1557:25" pos:end="1561:79"><expr pos:start="1557:25" pos:end="1561:78"><call pos:start="1557:25" pos:end="1561:78"><name pos:start="1557:25" pos:end="1557:38">tcg_gen_st_i32</name><argument_list pos:start="1557:39" pos:end="1561:78">(<argument pos:start="1557:40" pos:end="1557:51"><expr pos:start="1557:40" pos:end="1557:51"><name pos:start="1557:40" pos:end="1557:51">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1557:54" pos:end="1557:60"><expr pos:start="1557:54" pos:end="1557:60"><name pos:start="1557:54" pos:end="1557:60">cpu_env</name></expr></argument>,

                                        <argument pos:start="1559:41" pos:end="1561:77"><expr pos:start="1559:41" pos:end="1561:77"><call pos:start="1559:41" pos:end="1561:77"><name pos:start="1559:41" pos:end="1559:48">offsetof</name><argument_list pos:start="1559:49" pos:end="1561:77">(<argument pos:start="1559:50" pos:end="1559:60"><expr pos:start="1559:50" pos:end="1559:60"><name pos:start="1559:50" pos:end="1559:60">CPUX86State</name></expr></argument>,

                                                <argument pos:start="1561:49" pos:end="1561:76"><expr pos:start="1561:49" pos:end="1561:76"><name pos:start="1561:49" pos:end="1561:61"><name pos:start="1561:49" pos:end="1561:56">xmm_regs</name><index pos:start="1561:57" pos:end="1561:61">[<expr pos:start="1561:58" pos:end="1561:60"><name pos:start="1561:58" pos:end="1561:60">reg</name></expr>]</index></name><operator pos:start="1561:62" pos:end="1561:62">.</operator><call pos:start="1561:63" pos:end="1561:76"><name pos:start="1561:63" pos:end="1561:67">XMM_L</name><argument_list pos:start="1561:68" pos:end="1561:76">(<argument pos:start="1561:69" pos:end="1561:75"><expr pos:start="1561:69" pos:end="1561:75"><name pos:start="1561:69" pos:end="1561:71">val</name> <operator pos:start="1561:73" pos:end="1561:73">&amp;</operator> <literal type="number" pos:start="1561:75" pos:end="1561:75">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1563:23" pos:end="1581:21">else <block pos:start="1563:28" pos:end="1581:21">{<block_content pos:start="1565:25" pos:end="1579:79"> <comment type="block" pos:start="1563:30" pos:end="1563:41">/* pinsrq */</comment>

                        <if_stmt pos:start="1565:25" pos:end="1573:69"><if pos:start="1565:25" pos:end="1567:67">if <condition pos:start="1565:28" pos:end="1565:37">(<expr pos:start="1565:29" pos:end="1565:36"><name pos:start="1565:29" pos:end="1565:31">mod</name> <operator pos:start="1565:33" pos:end="1565:34">==</operator> <literal type="number" pos:start="1565:36" pos:end="1565:36">3</literal></expr>)</condition><block type="pseudo" pos:start="1567:29" pos:end="1567:67"><block_content pos:start="1567:29" pos:end="1567:67">

                            <expr_stmt pos:start="1567:29" pos:end="1567:67"><expr pos:start="1567:29" pos:end="1567:66"><call pos:start="1567:29" pos:end="1567:66"><name pos:start="1567:29" pos:end="1567:44">gen_op_mov_v_reg</name><argument_list pos:start="1567:45" pos:end="1567:66">(<argument pos:start="1567:46" pos:end="1567:47"><expr pos:start="1567:46" pos:end="1567:47"><name pos:start="1567:46" pos:end="1567:47">ot</name></expr></argument>, <argument pos:start="1567:50" pos:end="1567:61"><expr pos:start="1567:50" pos:end="1567:61"><name pos:start="1567:50" pos:end="1567:61">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="1567:64" pos:end="1567:65"><expr pos:start="1567:64" pos:end="1567:65"><name pos:start="1567:64" pos:end="1567:65">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="1569:25" pos:end="1573:69">else<block type="pseudo" pos:start="1571:29" pos:end="1573:69"><block_content pos:start="1571:29" pos:end="1573:69">

                            <expr_stmt pos:start="1571:29" pos:end="1573:69"><expr pos:start="1571:29" pos:end="1573:68"><call pos:start="1571:29" pos:end="1573:68"><name pos:start="1571:29" pos:end="1571:45">tcg_gen_qemu_ld64</name><argument_list pos:start="1571:46" pos:end="1573:68">(<argument pos:start="1571:47" pos:end="1571:58"><expr pos:start="1571:47" pos:end="1571:58"><name pos:start="1571:47" pos:end="1571:58">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="1571:61" pos:end="1571:66"><expr pos:start="1571:61" pos:end="1571:66"><name pos:start="1571:61" pos:end="1571:66">cpu_A0</name></expr></argument>,

                                            <argument pos:start="1573:45" pos:end="1573:67"><expr pos:start="1573:45" pos:end="1573:67"><operator pos:start="1573:45" pos:end="1573:45">(</operator><name pos:start="1573:46" pos:end="1573:57"><name pos:start="1573:46" pos:end="1573:46">s</name><operator pos:start="1573:47" pos:end="1573:48">-&gt;</operator><name pos:start="1573:49" pos:end="1573:57">mem_index</name></name> <operator pos:start="1573:59" pos:end="1573:60">&gt;&gt;</operator> <literal type="number" pos:start="1573:62" pos:end="1573:62">2</literal><operator pos:start="1573:63" pos:end="1573:63">)</operator> <operator pos:start="1573:65" pos:end="1573:65">-</operator> <literal type="number" pos:start="1573:67" pos:end="1573:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="1575:25" pos:end="1579:79"><expr pos:start="1575:25" pos:end="1579:78"><call pos:start="1575:25" pos:end="1579:78"><name pos:start="1575:25" pos:end="1575:38">tcg_gen_st_i64</name><argument_list pos:start="1575:39" pos:end="1579:78">(<argument pos:start="1575:40" pos:end="1575:51"><expr pos:start="1575:40" pos:end="1575:51"><name pos:start="1575:40" pos:end="1575:51">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="1575:54" pos:end="1575:60"><expr pos:start="1575:54" pos:end="1575:60"><name pos:start="1575:54" pos:end="1575:60">cpu_env</name></expr></argument>,

                                        <argument pos:start="1577:41" pos:end="1579:77"><expr pos:start="1577:41" pos:end="1579:77"><call pos:start="1577:41" pos:end="1579:77"><name pos:start="1577:41" pos:end="1577:48">offsetof</name><argument_list pos:start="1577:49" pos:end="1579:77">(<argument pos:start="1577:50" pos:end="1577:60"><expr pos:start="1577:50" pos:end="1577:60"><name pos:start="1577:50" pos:end="1577:60">CPUX86State</name></expr></argument>,

                                                <argument pos:start="1579:49" pos:end="1579:76"><expr pos:start="1579:49" pos:end="1579:76"><name pos:start="1579:49" pos:end="1579:61"><name pos:start="1579:49" pos:end="1579:56">xmm_regs</name><index pos:start="1579:57" pos:end="1579:61">[<expr pos:start="1579:58" pos:end="1579:60"><name pos:start="1579:58" pos:end="1579:60">reg</name></expr>]</index></name><operator pos:start="1579:62" pos:end="1579:62">.</operator><call pos:start="1579:63" pos:end="1579:76"><name pos:start="1579:63" pos:end="1579:67">XMM_Q</name><argument_list pos:start="1579:68" pos:end="1579:76">(<argument pos:start="1579:69" pos:end="1579:75"><expr pos:start="1579:69" pos:end="1579:75"><name pos:start="1579:69" pos:end="1579:71">val</name> <operator pos:start="1579:73" pos:end="1579:73">&amp;</operator> <literal type="number" pos:start="1579:75" pos:end="1579:75">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="1583:21" pos:end="1583:26">break;</break>

                </block_content>}</block></switch>

                <return pos:start="1587:17" pos:end="1587:23">return;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="1593:13" pos:end="1629:13"><if pos:start="1593:13" pos:end="1611:13">if <condition pos:start="1593:16" pos:end="1593:19">(<expr pos:start="1593:17" pos:end="1593:18"><name pos:start="1593:17" pos:end="1593:18">b1</name></expr>)</condition> <block pos:start="1593:21" pos:end="1611:13">{<block_content pos:start="1595:17" pos:end="1609:17">

                <expr_stmt pos:start="1595:17" pos:end="1595:65"><expr pos:start="1595:17" pos:end="1595:64"><name pos:start="1595:17" pos:end="1595:26">op1_offset</name> <operator pos:start="1595:28" pos:end="1595:28">=</operator> <call pos:start="1595:30" pos:end="1595:64"><name pos:start="1595:30" pos:end="1595:37">offsetof</name><argument_list pos:start="1595:38" pos:end="1595:64">(<argument pos:start="1595:39" pos:end="1595:49"><expr pos:start="1595:39" pos:end="1595:49"><name pos:start="1595:39" pos:end="1595:49">CPUX86State</name></expr></argument>,<argument pos:start="1595:51" pos:end="1595:63"><expr pos:start="1595:51" pos:end="1595:63"><name pos:start="1595:51" pos:end="1595:63"><name pos:start="1595:51" pos:end="1595:58">xmm_regs</name><index pos:start="1595:59" pos:end="1595:63">[<expr pos:start="1595:60" pos:end="1595:62"><name pos:start="1595:60" pos:end="1595:62">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1597:17" pos:end="1609:17"><if pos:start="1597:17" pos:end="1601:17">if <condition pos:start="1597:20" pos:end="1597:29">(<expr pos:start="1597:21" pos:end="1597:28"><name pos:start="1597:21" pos:end="1597:23">mod</name> <operator pos:start="1597:25" pos:end="1597:26">==</operator> <literal type="number" pos:start="1597:28" pos:end="1597:28">3</literal></expr>)</condition> <block pos:start="1597:31" pos:end="1601:17">{<block_content pos:start="1599:21" pos:end="1599:79">

                    <expr_stmt pos:start="1599:21" pos:end="1599:79"><expr pos:start="1599:21" pos:end="1599:78"><name pos:start="1599:21" pos:end="1599:30">op2_offset</name> <operator pos:start="1599:32" pos:end="1599:32">=</operator> <call pos:start="1599:34" pos:end="1599:78"><name pos:start="1599:34" pos:end="1599:41">offsetof</name><argument_list pos:start="1599:42" pos:end="1599:78">(<argument pos:start="1599:43" pos:end="1599:53"><expr pos:start="1599:43" pos:end="1599:53"><name pos:start="1599:43" pos:end="1599:53">CPUX86State</name></expr></argument>,<argument pos:start="1599:55" pos:end="1599:77"><expr pos:start="1599:55" pos:end="1599:77"><name pos:start="1599:55" pos:end="1599:77"><name pos:start="1599:55" pos:end="1599:62">xmm_regs</name><index pos:start="1599:63" pos:end="1599:77">[<expr pos:start="1599:64" pos:end="1599:76"><name pos:start="1599:64" pos:end="1599:65">rm</name> <operator pos:start="1599:67" pos:end="1599:67">|</operator> <call pos:start="1599:69" pos:end="1599:76"><name pos:start="1599:69" pos:end="1599:73">REX_B</name><argument_list pos:start="1599:74" pos:end="1599:76">(<argument pos:start="1599:75" pos:end="1599:75"><expr pos:start="1599:75" pos:end="1599:75"><name pos:start="1599:75" pos:end="1599:75">s</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1601:19" pos:end="1609:17">else <block pos:start="1601:24" pos:end="1609:17">{<block_content pos:start="1603:21" pos:end="1607:61">

                    <expr_stmt pos:start="1603:21" pos:end="1603:62"><expr pos:start="1603:21" pos:end="1603:61"><name pos:start="1603:21" pos:end="1603:30">op2_offset</name> <operator pos:start="1603:32" pos:end="1603:32">=</operator> <call pos:start="1603:34" pos:end="1603:61"><name pos:start="1603:34" pos:end="1603:41">offsetof</name><argument_list pos:start="1603:42" pos:end="1603:61">(<argument pos:start="1603:43" pos:end="1603:53"><expr pos:start="1603:43" pos:end="1603:53"><name pos:start="1603:43" pos:end="1603:53">CPUX86State</name></expr></argument>,<argument pos:start="1603:55" pos:end="1603:60"><expr pos:start="1603:55" pos:end="1603:60"><name pos:start="1603:55" pos:end="1603:60">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1605:21" pos:end="1605:69"><expr pos:start="1605:21" pos:end="1605:68"><call pos:start="1605:21" pos:end="1605:68"><name pos:start="1605:21" pos:end="1605:33">gen_lea_modrm</name><argument_list pos:start="1605:34" pos:end="1605:68">(<argument pos:start="1605:35" pos:end="1605:35"><expr pos:start="1605:35" pos:end="1605:35"><name pos:start="1605:35" pos:end="1605:35">s</name></expr></argument>, <argument pos:start="1605:38" pos:end="1605:42"><expr pos:start="1605:38" pos:end="1605:42"><name pos:start="1605:38" pos:end="1605:42">modrm</name></expr></argument>, <argument pos:start="1605:45" pos:end="1605:53"><expr pos:start="1605:45" pos:end="1605:53"><operator pos:start="1605:45" pos:end="1605:45">&amp;</operator><name pos:start="1605:46" pos:end="1605:53">reg_addr</name></expr></argument>, <argument pos:start="1605:56" pos:end="1605:67"><expr pos:start="1605:56" pos:end="1605:67"><operator pos:start="1605:56" pos:end="1605:56">&amp;</operator><name pos:start="1605:57" pos:end="1605:67">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1607:21" pos:end="1607:61"><expr pos:start="1607:21" pos:end="1607:60"><call pos:start="1607:21" pos:end="1607:60"><name pos:start="1607:21" pos:end="1607:34">gen_ldo_env_A0</name><argument_list pos:start="1607:35" pos:end="1607:60">(<argument pos:start="1607:36" pos:end="1607:47"><expr pos:start="1607:36" pos:end="1607:47"><name pos:start="1607:36" pos:end="1607:47"><name pos:start="1607:36" pos:end="1607:36">s</name><operator pos:start="1607:37" pos:end="1607:38">-&gt;</operator><name pos:start="1607:39" pos:end="1607:47">mem_index</name></name></expr></argument>, <argument pos:start="1607:50" pos:end="1607:59"><expr pos:start="1607:50" pos:end="1607:59"><name pos:start="1607:50" pos:end="1607:59">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="1611:15" pos:end="1629:13">else <block pos:start="1611:20" pos:end="1629:13">{<block_content pos:start="1613:17" pos:end="1627:17">

                <expr_stmt pos:start="1613:17" pos:end="1613:67"><expr pos:start="1613:17" pos:end="1613:66"><name pos:start="1613:17" pos:end="1613:26">op1_offset</name> <operator pos:start="1613:28" pos:end="1613:28">=</operator> <call pos:start="1613:30" pos:end="1613:66"><name pos:start="1613:30" pos:end="1613:37">offsetof</name><argument_list pos:start="1613:38" pos:end="1613:66">(<argument pos:start="1613:39" pos:end="1613:49"><expr pos:start="1613:39" pos:end="1613:49"><name pos:start="1613:39" pos:end="1613:49">CPUX86State</name></expr></argument>,<argument pos:start="1613:51" pos:end="1613:65"><expr pos:start="1613:51" pos:end="1613:65"><name pos:start="1613:51" pos:end="1613:61"><name pos:start="1613:51" pos:end="1613:56">fpregs</name><index pos:start="1613:57" pos:end="1613:61">[<expr pos:start="1613:58" pos:end="1613:60"><name pos:start="1613:58" pos:end="1613:60">reg</name></expr>]</index></name><operator pos:start="1613:62" pos:end="1613:62">.</operator><name pos:start="1613:63" pos:end="1613:65">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1615:17" pos:end="1627:17"><if pos:start="1615:17" pos:end="1619:17">if <condition pos:start="1615:20" pos:end="1615:29">(<expr pos:start="1615:21" pos:end="1615:28"><name pos:start="1615:21" pos:end="1615:23">mod</name> <operator pos:start="1615:25" pos:end="1615:26">==</operator> <literal type="number" pos:start="1615:28" pos:end="1615:28">3</literal></expr>)</condition> <block pos:start="1615:31" pos:end="1619:17">{<block_content pos:start="1617:21" pos:end="1617:70">

                    <expr_stmt pos:start="1617:21" pos:end="1617:70"><expr pos:start="1617:21" pos:end="1617:69"><name pos:start="1617:21" pos:end="1617:30">op2_offset</name> <operator pos:start="1617:32" pos:end="1617:32">=</operator> <call pos:start="1617:34" pos:end="1617:69"><name pos:start="1617:34" pos:end="1617:41">offsetof</name><argument_list pos:start="1617:42" pos:end="1617:69">(<argument pos:start="1617:43" pos:end="1617:53"><expr pos:start="1617:43" pos:end="1617:53"><name pos:start="1617:43" pos:end="1617:53">CPUX86State</name></expr></argument>,<argument pos:start="1617:55" pos:end="1617:68"><expr pos:start="1617:55" pos:end="1617:68"><name pos:start="1617:55" pos:end="1617:64"><name pos:start="1617:55" pos:end="1617:60">fpregs</name><index pos:start="1617:61" pos:end="1617:64">[<expr pos:start="1617:62" pos:end="1617:63"><name pos:start="1617:62" pos:end="1617:63">rm</name></expr>]</index></name><operator pos:start="1617:65" pos:end="1617:65">.</operator><name pos:start="1617:66" pos:end="1617:68">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1619:19" pos:end="1627:17">else <block pos:start="1619:24" pos:end="1627:17">{<block_content pos:start="1621:21" pos:end="1625:61">

                    <expr_stmt pos:start="1621:21" pos:end="1621:62"><expr pos:start="1621:21" pos:end="1621:61"><name pos:start="1621:21" pos:end="1621:30">op2_offset</name> <operator pos:start="1621:32" pos:end="1621:32">=</operator> <call pos:start="1621:34" pos:end="1621:61"><name pos:start="1621:34" pos:end="1621:41">offsetof</name><argument_list pos:start="1621:42" pos:end="1621:61">(<argument pos:start="1621:43" pos:end="1621:53"><expr pos:start="1621:43" pos:end="1621:53"><name pos:start="1621:43" pos:end="1621:53">CPUX86State</name></expr></argument>,<argument pos:start="1621:55" pos:end="1621:60"><expr pos:start="1621:55" pos:end="1621:60"><name pos:start="1621:55" pos:end="1621:60">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1623:21" pos:end="1623:69"><expr pos:start="1623:21" pos:end="1623:68"><call pos:start="1623:21" pos:end="1623:68"><name pos:start="1623:21" pos:end="1623:33">gen_lea_modrm</name><argument_list pos:start="1623:34" pos:end="1623:68">(<argument pos:start="1623:35" pos:end="1623:35"><expr pos:start="1623:35" pos:end="1623:35"><name pos:start="1623:35" pos:end="1623:35">s</name></expr></argument>, <argument pos:start="1623:38" pos:end="1623:42"><expr pos:start="1623:38" pos:end="1623:42"><name pos:start="1623:38" pos:end="1623:42">modrm</name></expr></argument>, <argument pos:start="1623:45" pos:end="1623:53"><expr pos:start="1623:45" pos:end="1623:53"><operator pos:start="1623:45" pos:end="1623:45">&amp;</operator><name pos:start="1623:46" pos:end="1623:53">reg_addr</name></expr></argument>, <argument pos:start="1623:56" pos:end="1623:67"><expr pos:start="1623:56" pos:end="1623:67"><operator pos:start="1623:56" pos:end="1623:56">&amp;</operator><name pos:start="1623:57" pos:end="1623:67">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1625:21" pos:end="1625:61"><expr pos:start="1625:21" pos:end="1625:60"><call pos:start="1625:21" pos:end="1625:60"><name pos:start="1625:21" pos:end="1625:34">gen_ldq_env_A0</name><argument_list pos:start="1625:35" pos:end="1625:60">(<argument pos:start="1625:36" pos:end="1625:47"><expr pos:start="1625:36" pos:end="1625:47"><name pos:start="1625:36" pos:end="1625:47"><name pos:start="1625:36" pos:end="1625:36">s</name><operator pos:start="1625:37" pos:end="1625:38">-&gt;</operator><name pos:start="1625:39" pos:end="1625:47">mem_index</name></name></expr></argument>, <argument pos:start="1625:50" pos:end="1625:59"><expr pos:start="1625:50" pos:end="1625:59"><name pos:start="1625:50" pos:end="1625:59">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1631:13" pos:end="1631:37"><expr pos:start="1631:13" pos:end="1631:36"><name pos:start="1631:13" pos:end="1631:15">val</name> <operator pos:start="1631:17" pos:end="1631:17">=</operator> <call pos:start="1631:19" pos:end="1631:36"><name pos:start="1631:19" pos:end="1631:27">ldub_code</name><argument_list pos:start="1631:28" pos:end="1631:36">(<argument pos:start="1631:29" pos:end="1631:35"><expr pos:start="1631:29" pos:end="1631:35"><name pos:start="1631:29" pos:end="1631:33"><name pos:start="1631:29" pos:end="1631:29">s</name><operator pos:start="1631:30" pos:end="1631:31">-&gt;</operator><name pos:start="1631:32" pos:end="1631:33">pc</name></name><operator pos:start="1631:34" pos:end="1631:35">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="1635:13" pos:end="1647:13"><if pos:start="1635:13" pos:end="1647:13">if <condition pos:start="1635:16" pos:end="1635:35">(<expr pos:start="1635:17" pos:end="1635:34"><operator pos:start="1635:17" pos:end="1635:17">(</operator><name pos:start="1635:18" pos:end="1635:18">b</name> <operator pos:start="1635:20" pos:end="1635:20">&amp;</operator> <literal type="number" pos:start="1635:22" pos:end="1635:25">0xfc</literal><operator pos:start="1635:26" pos:end="1635:26">)</operator> <operator pos:start="1635:28" pos:end="1635:29">==</operator> <literal type="number" pos:start="1635:31" pos:end="1635:34">0x60</literal></expr>)</condition> <block pos:start="1635:37" pos:end="1647:13">{<block_content pos:start="1637:17" pos:end="1645:34"> <comment type="block" pos:start="1635:39" pos:end="1635:53">/* pcmpXstrX */</comment>

                <expr_stmt pos:start="1637:17" pos:end="1637:40"><expr pos:start="1637:17" pos:end="1637:39"><name pos:start="1637:17" pos:end="1637:24"><name pos:start="1637:17" pos:end="1637:17">s</name><operator pos:start="1637:18" pos:end="1637:19">-&gt;</operator><name pos:start="1637:20" pos:end="1637:24">cc_op</name></name> <operator pos:start="1637:26" pos:end="1637:26">=</operator> <name pos:start="1637:28" pos:end="1637:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>



                <if_stmt pos:start="1641:17" pos:end="1645:34"><if pos:start="1641:17" pos:end="1645:34">if <condition pos:start="1641:20" pos:end="1641:34">(<expr pos:start="1641:21" pos:end="1641:33"><name pos:start="1641:21" pos:end="1641:28"><name pos:start="1641:21" pos:end="1641:21">s</name><operator pos:start="1641:22" pos:end="1641:23">-&gt;</operator><name pos:start="1641:24" pos:end="1641:28">dflag</name></name> <operator pos:start="1641:30" pos:end="1641:31">==</operator> <literal type="number" pos:start="1641:33" pos:end="1641:33">2</literal></expr>)</condition><block type="pseudo" pos:start="1645:21" pos:end="1645:34"><block_content pos:start="1645:21" pos:end="1645:34">

                    <comment type="block" pos:start="1643:21" pos:end="1643:72">/* The helper must use entire 64-bit gp registers */</comment>

                    <expr_stmt pos:start="1645:21" pos:end="1645:34"><expr pos:start="1645:21" pos:end="1645:33"><name pos:start="1645:21" pos:end="1645:23">val</name> <operator pos:start="1645:25" pos:end="1645:26">|=</operator> <literal type="number" pos:start="1645:28" pos:end="1645:28">1</literal> <operator pos:start="1645:30" pos:end="1645:31">&lt;&lt;</operator> <literal type="number" pos:start="1645:33" pos:end="1645:33">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="1651:13" pos:end="1651:60"><expr pos:start="1651:13" pos:end="1651:59"><call pos:start="1651:13" pos:end="1651:59"><name pos:start="1651:13" pos:end="1651:28">tcg_gen_addi_ptr</name><argument_list pos:start="1651:29" pos:end="1651:59">(<argument pos:start="1651:30" pos:end="1651:37"><expr pos:start="1651:30" pos:end="1651:37"><name pos:start="1651:30" pos:end="1651:37">cpu_ptr0</name></expr></argument>, <argument pos:start="1651:40" pos:end="1651:46"><expr pos:start="1651:40" pos:end="1651:46"><name pos:start="1651:40" pos:end="1651:46">cpu_env</name></expr></argument>, <argument pos:start="1651:49" pos:end="1651:58"><expr pos:start="1651:49" pos:end="1651:58"><name pos:start="1651:49" pos:end="1651:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1653:13" pos:end="1653:60"><expr pos:start="1653:13" pos:end="1653:59"><call pos:start="1653:13" pos:end="1653:59"><name pos:start="1653:13" pos:end="1653:28">tcg_gen_addi_ptr</name><argument_list pos:start="1653:29" pos:end="1653:59">(<argument pos:start="1653:30" pos:end="1653:37"><expr pos:start="1653:30" pos:end="1653:37"><name pos:start="1653:30" pos:end="1653:37">cpu_ptr1</name></expr></argument>, <argument pos:start="1653:40" pos:end="1653:46"><expr pos:start="1653:40" pos:end="1653:46"><name pos:start="1653:40" pos:end="1653:46">cpu_env</name></expr></argument>, <argument pos:start="1653:49" pos:end="1653:58"><expr pos:start="1653:49" pos:end="1653:58"><name pos:start="1653:49" pos:end="1653:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1655:13" pos:end="1655:80"><expr pos:start="1655:13" pos:end="1655:79"><call pos:start="1655:13" pos:end="1655:79"><name pos:start="1655:13" pos:end="1655:30">tcg_gen_helper_0_3</name><argument_list pos:start="1655:31" pos:end="1655:79">(<argument pos:start="1655:32" pos:end="1655:38"><expr pos:start="1655:32" pos:end="1655:38"><name pos:start="1655:32" pos:end="1655:38">sse_op2</name></expr></argument>, <argument pos:start="1655:41" pos:end="1655:48"><expr pos:start="1655:41" pos:end="1655:48"><name pos:start="1655:41" pos:end="1655:48">cpu_ptr0</name></expr></argument>, <argument pos:start="1655:51" pos:end="1655:58"><expr pos:start="1655:51" pos:end="1655:58"><name pos:start="1655:51" pos:end="1655:58">cpu_ptr1</name></expr></argument>, <argument pos:start="1655:61" pos:end="1655:78"><expr pos:start="1655:61" pos:end="1655:78"><call pos:start="1655:61" pos:end="1655:78"><name pos:start="1655:61" pos:end="1655:73">tcg_const_i32</name><argument_list pos:start="1655:74" pos:end="1655:78">(<argument pos:start="1655:75" pos:end="1655:77"><expr pos:start="1655:75" pos:end="1655:77"><name pos:start="1655:75" pos:end="1655:77">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1657:13" pos:end="1657:18">break;</break>

        <default pos:start="1659:9" pos:end="1659:16">default:</default>

            <goto pos:start="1661:13" pos:end="1661:28">goto <name pos:start="1661:18" pos:end="1661:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

    </block_content>}</block></if> <else pos:start="1665:7" pos:end="1871:5">else <block pos:start="1665:12" pos:end="1871:5">{<block_content pos:start="1669:9" pos:end="1869:9">

        <comment type="block" pos:start="1667:9" pos:end="1667:42">/* generic MMX or SSE operation */</comment>

        <switch pos:start="1669:9" pos:end="1685:9">switch<condition pos:start="1669:15" pos:end="1669:17">(<expr pos:start="1669:16" pos:end="1669:16"><name pos:start="1669:16" pos:end="1669:16">b</name></expr>)</condition> <block pos:start="1669:19" pos:end="1685:9">{<block_content pos:start="1671:9" pos:end="1683:18">

        <case pos:start="1671:9" pos:end="1671:18">case <expr pos:start="1671:14" pos:end="1671:17"><literal type="number" pos:start="1671:14" pos:end="1671:17">0x70</literal></expr>:</case> <comment type="block" pos:start="1671:20" pos:end="1671:36">/* pshufx insn */</comment>

        <case pos:start="1673:9" pos:end="1673:18">case <expr pos:start="1673:14" pos:end="1673:17"><literal type="number" pos:start="1673:14" pos:end="1673:17">0xc6</literal></expr>:</case> <comment type="block" pos:start="1673:20" pos:end="1673:36">/* pshufx insn */</comment>

        <case pos:start="1675:9" pos:end="1675:18">case <expr pos:start="1675:14" pos:end="1675:17"><literal type="number" pos:start="1675:14" pos:end="1675:17">0xc2</literal></expr>:</case> <comment type="block" pos:start="1675:20" pos:end="1675:38">/* compare insns */</comment>

            <expr_stmt pos:start="1677:13" pos:end="1677:30"><expr pos:start="1677:13" pos:end="1677:29"><name pos:start="1677:13" pos:end="1677:25"><name pos:start="1677:13" pos:end="1677:13">s</name><operator pos:start="1677:14" pos:end="1677:15">-&gt;</operator><name pos:start="1677:16" pos:end="1677:25">rip_offset</name></name> <operator pos:start="1677:27" pos:end="1677:27">=</operator> <literal type="number" pos:start="1677:29" pos:end="1677:29">1</literal></expr>;</expr_stmt>

            <break pos:start="1679:13" pos:end="1679:18">break;</break>

        <default pos:start="1681:9" pos:end="1681:16">default:</default>

            <break pos:start="1683:13" pos:end="1683:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="1687:9" pos:end="1753:9"><if pos:start="1687:9" pos:end="1733:9">if <condition pos:start="1687:12" pos:end="1687:19">(<expr pos:start="1687:13" pos:end="1687:18"><name pos:start="1687:13" pos:end="1687:18">is_xmm</name></expr>)</condition> <block pos:start="1687:21" pos:end="1733:9">{<block_content pos:start="1689:13" pos:end="1731:13">

            <expr_stmt pos:start="1689:13" pos:end="1689:61"><expr pos:start="1689:13" pos:end="1689:60"><name pos:start="1689:13" pos:end="1689:22">op1_offset</name> <operator pos:start="1689:24" pos:end="1689:24">=</operator> <call pos:start="1689:26" pos:end="1689:60"><name pos:start="1689:26" pos:end="1689:33">offsetof</name><argument_list pos:start="1689:34" pos:end="1689:60">(<argument pos:start="1689:35" pos:end="1689:45"><expr pos:start="1689:35" pos:end="1689:45"><name pos:start="1689:35" pos:end="1689:45">CPUX86State</name></expr></argument>,<argument pos:start="1689:47" pos:end="1689:59"><expr pos:start="1689:47" pos:end="1689:59"><name pos:start="1689:47" pos:end="1689:59"><name pos:start="1689:47" pos:end="1689:54">xmm_regs</name><index pos:start="1689:55" pos:end="1689:59">[<expr pos:start="1689:56" pos:end="1689:58"><name pos:start="1689:56" pos:end="1689:58">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1691:13" pos:end="1731:13"><if pos:start="1691:13" pos:end="1725:13">if <condition pos:start="1691:16" pos:end="1691:25">(<expr pos:start="1691:17" pos:end="1691:24"><name pos:start="1691:17" pos:end="1691:19">mod</name> <operator pos:start="1691:21" pos:end="1691:22">!=</operator> <literal type="number" pos:start="1691:24" pos:end="1691:24">3</literal></expr>)</condition> <block pos:start="1691:27" pos:end="1725:13">{<block_content pos:start="1693:17" pos:end="1723:17">

                <expr_stmt pos:start="1693:17" pos:end="1693:65"><expr pos:start="1693:17" pos:end="1693:64"><call pos:start="1693:17" pos:end="1693:64"><name pos:start="1693:17" pos:end="1693:29">gen_lea_modrm</name><argument_list pos:start="1693:30" pos:end="1693:64">(<argument pos:start="1693:31" pos:end="1693:31"><expr pos:start="1693:31" pos:end="1693:31"><name pos:start="1693:31" pos:end="1693:31">s</name></expr></argument>, <argument pos:start="1693:34" pos:end="1693:38"><expr pos:start="1693:34" pos:end="1693:38"><name pos:start="1693:34" pos:end="1693:38">modrm</name></expr></argument>, <argument pos:start="1693:41" pos:end="1693:49"><expr pos:start="1693:41" pos:end="1693:49"><operator pos:start="1693:41" pos:end="1693:41">&amp;</operator><name pos:start="1693:42" pos:end="1693:49">reg_addr</name></expr></argument>, <argument pos:start="1693:52" pos:end="1693:63"><expr pos:start="1693:52" pos:end="1693:63"><operator pos:start="1693:52" pos:end="1693:52">&amp;</operator><name pos:start="1693:53" pos:end="1693:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1695:17" pos:end="1695:58"><expr pos:start="1695:17" pos:end="1695:57"><name pos:start="1695:17" pos:end="1695:26">op2_offset</name> <operator pos:start="1695:28" pos:end="1695:28">=</operator> <call pos:start="1695:30" pos:end="1695:57"><name pos:start="1695:30" pos:end="1695:37">offsetof</name><argument_list pos:start="1695:38" pos:end="1695:57">(<argument pos:start="1695:39" pos:end="1695:49"><expr pos:start="1695:39" pos:end="1695:49"><name pos:start="1695:39" pos:end="1695:49">CPUX86State</name></expr></argument>,<argument pos:start="1695:51" pos:end="1695:56"><expr pos:start="1695:51" pos:end="1695:56"><name pos:start="1695:51" pos:end="1695:56">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1697:17" pos:end="1723:17"><if pos:start="1697:17" pos:end="1719:17">if <condition pos:start="1697:20" pos:end="1699:43">(<expr pos:start="1697:21" pos:end="1699:42"><name pos:start="1697:21" pos:end="1697:22">b1</name> <operator pos:start="1697:24" pos:end="1697:25">&gt;=</operator> <literal type="number" pos:start="1697:27" pos:end="1697:27">2</literal> <operator pos:start="1697:29" pos:end="1697:30">&amp;&amp;</operator> <operator pos:start="1697:32" pos:end="1697:32">(</operator><operator pos:start="1697:33" pos:end="1697:33">(</operator><name pos:start="1697:34" pos:end="1697:34">b</name> <operator pos:start="1697:36" pos:end="1697:37">&gt;=</operator> <literal type="number" pos:start="1697:39" pos:end="1697:42">0x50</literal> <operator pos:start="1697:44" pos:end="1697:45">&amp;&amp;</operator> <name pos:start="1697:47" pos:end="1697:47">b</name> <operator pos:start="1697:49" pos:end="1697:50">&lt;=</operator> <literal type="number" pos:start="1697:52" pos:end="1697:55">0x5f</literal> <operator pos:start="1697:57" pos:end="1697:58">&amp;&amp;</operator> <name pos:start="1697:60" pos:end="1697:60">b</name> <operator pos:start="1697:62" pos:end="1697:63">!=</operator> <literal type="number" pos:start="1697:65" pos:end="1697:68">0x5b</literal><operator pos:start="1697:69" pos:end="1697:69">)</operator> <operator pos:start="1697:71" pos:end="1697:72">||</operator>

                                <name pos:start="1699:33" pos:end="1699:33">b</name> <operator pos:start="1699:35" pos:end="1699:36">==</operator> <literal type="number" pos:start="1699:38" pos:end="1699:41">0xc2</literal><operator pos:start="1699:42" pos:end="1699:42">)</operator></expr>)</condition> <block pos:start="1699:45" pos:end="1719:17">{<block_content pos:start="1703:21" pos:end="1717:21">

                    <comment type="block" pos:start="1701:21" pos:end="1701:67">/* specific case for SSE single instructions */</comment>

                    <if_stmt pos:start="1703:21" pos:end="1717:21"><if pos:start="1703:21" pos:end="1711:21">if <condition pos:start="1703:24" pos:end="1703:32">(<expr pos:start="1703:25" pos:end="1703:31"><name pos:start="1703:25" pos:end="1703:26">b1</name> <operator pos:start="1703:28" pos:end="1703:29">==</operator> <literal type="number" pos:start="1703:31" pos:end="1703:31">2</literal></expr>)</condition> <block pos:start="1703:34" pos:end="1711:21">{<block_content pos:start="1707:25" pos:end="1709:98">

                        <comment type="block" pos:start="1705:25" pos:end="1705:43">/* 32 bit access */</comment>

                        <expr_stmt pos:start="1707:25" pos:end="1707:64"><expr pos:start="1707:25" pos:end="1707:63"><call pos:start="1707:25" pos:end="1707:63"><name pos:start="1707:25" pos:end="1707:39">gen_op_ld_T0_A0</name><argument_list pos:start="1707:40" pos:end="1707:63">(<argument pos:start="1707:41" pos:end="1707:62"><expr pos:start="1707:41" pos:end="1707:62"><name pos:start="1707:41" pos:end="1707:47">OT_LONG</name> <operator pos:start="1707:49" pos:end="1707:49">+</operator> <name pos:start="1707:51" pos:end="1707:62"><name pos:start="1707:51" pos:end="1707:51">s</name><operator pos:start="1707:52" pos:end="1707:53">-&gt;</operator><name pos:start="1707:54" pos:end="1707:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1709:25" pos:end="1709:98"><expr pos:start="1709:25" pos:end="1709:97"><call pos:start="1709:25" pos:end="1709:97"><name pos:start="1709:25" pos:end="1709:39">tcg_gen_st32_tl</name><argument_list pos:start="1709:40" pos:end="1709:97">(<argument pos:start="1709:41" pos:end="1709:48"><expr pos:start="1709:41" pos:end="1709:48"><name pos:start="1709:41" pos:end="1709:48"><name pos:start="1709:41" pos:end="1709:45">cpu_T</name><index pos:start="1709:46" pos:end="1709:48">[<expr pos:start="1709:47" pos:end="1709:47"><literal type="number" pos:start="1709:47" pos:end="1709:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1709:51" pos:end="1709:57"><expr pos:start="1709:51" pos:end="1709:57"><name pos:start="1709:51" pos:end="1709:57">cpu_env</name></expr></argument>, <argument pos:start="1709:60" pos:end="1709:96"><expr pos:start="1709:60" pos:end="1709:96"><call pos:start="1709:60" pos:end="1709:96"><name pos:start="1709:60" pos:end="1709:67">offsetof</name><argument_list pos:start="1709:68" pos:end="1709:96">(<argument pos:start="1709:69" pos:end="1709:79"><expr pos:start="1709:69" pos:end="1709:79"><name pos:start="1709:69" pos:end="1709:79">CPUX86State</name></expr></argument>,<argument pos:start="1709:81" pos:end="1709:95"><expr pos:start="1709:81" pos:end="1709:95"><call pos:start="1709:81" pos:end="1709:95"><name pos:start="1709:81" pos:end="1709:92"><name pos:start="1709:81" pos:end="1709:86">xmm_t0</name><operator pos:start="1709:87" pos:end="1709:87">.</operator><name pos:start="1709:88" pos:end="1709:92">XMM_L</name></name><argument_list pos:start="1709:93" pos:end="1709:95">(<argument pos:start="1709:94" pos:end="1709:94"><expr pos:start="1709:94" pos:end="1709:94"><literal type="number" pos:start="1709:94" pos:end="1709:94">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1711:23" pos:end="1717:21">else <block pos:start="1711:28" pos:end="1717:21">{<block_content pos:start="1715:25" pos:end="1715:92">

                        <comment type="block" pos:start="1713:25" pos:end="1713:43">/* 64 bit access */</comment>

                        <expr_stmt pos:start="1715:25" pos:end="1715:92"><expr pos:start="1715:25" pos:end="1715:91"><call pos:start="1715:25" pos:end="1715:91"><name pos:start="1715:25" pos:end="1715:38">gen_ldq_env_A0</name><argument_list pos:start="1715:39" pos:end="1715:91">(<argument pos:start="1715:40" pos:end="1715:51"><expr pos:start="1715:40" pos:end="1715:51"><name pos:start="1715:40" pos:end="1715:51"><name pos:start="1715:40" pos:end="1715:40">s</name><operator pos:start="1715:41" pos:end="1715:42">-&gt;</operator><name pos:start="1715:43" pos:end="1715:51">mem_index</name></name></expr></argument>, <argument pos:start="1715:54" pos:end="1715:90"><expr pos:start="1715:54" pos:end="1715:90"><call pos:start="1715:54" pos:end="1715:90"><name pos:start="1715:54" pos:end="1715:61">offsetof</name><argument_list pos:start="1715:62" pos:end="1715:90">(<argument pos:start="1715:63" pos:end="1715:73"><expr pos:start="1715:63" pos:end="1715:73"><name pos:start="1715:63" pos:end="1715:73">CPUX86State</name></expr></argument>,<argument pos:start="1715:75" pos:end="1715:89"><expr pos:start="1715:75" pos:end="1715:89"><call pos:start="1715:75" pos:end="1715:89"><name pos:start="1715:75" pos:end="1715:86"><name pos:start="1715:75" pos:end="1715:80">xmm_t0</name><operator pos:start="1715:81" pos:end="1715:81">.</operator><name pos:start="1715:82" pos:end="1715:86">XMM_D</name></name><argument_list pos:start="1715:87" pos:end="1715:89">(<argument pos:start="1715:88" pos:end="1715:88"><expr pos:start="1715:88" pos:end="1715:88"><literal type="number" pos:start="1715:88" pos:end="1715:88">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1719:19" pos:end="1723:17">else <block pos:start="1719:24" pos:end="1723:17">{<block_content pos:start="1721:21" pos:end="1721:61">

                    <expr_stmt pos:start="1721:21" pos:end="1721:61"><expr pos:start="1721:21" pos:end="1721:60"><call pos:start="1721:21" pos:end="1721:60"><name pos:start="1721:21" pos:end="1721:34">gen_ldo_env_A0</name><argument_list pos:start="1721:35" pos:end="1721:60">(<argument pos:start="1721:36" pos:end="1721:47"><expr pos:start="1721:36" pos:end="1721:47"><name pos:start="1721:36" pos:end="1721:47"><name pos:start="1721:36" pos:end="1721:36">s</name><operator pos:start="1721:37" pos:end="1721:38">-&gt;</operator><name pos:start="1721:39" pos:end="1721:47">mem_index</name></name></expr></argument>, <argument pos:start="1721:50" pos:end="1721:59"><expr pos:start="1721:50" pos:end="1721:59"><name pos:start="1721:50" pos:end="1721:59">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="1725:15" pos:end="1731:13">else <block pos:start="1725:20" pos:end="1731:13">{<block_content pos:start="1727:17" pos:end="1729:64">

                <expr_stmt pos:start="1727:17" pos:end="1727:44"><expr pos:start="1727:17" pos:end="1727:43"><name pos:start="1727:17" pos:end="1727:18">rm</name> <operator pos:start="1727:20" pos:end="1727:20">=</operator> <operator pos:start="1727:22" pos:end="1727:22">(</operator><name pos:start="1727:23" pos:end="1727:27">modrm</name> <operator pos:start="1727:29" pos:end="1727:29">&amp;</operator> <literal type="number" pos:start="1727:31" pos:end="1727:31">7</literal><operator pos:start="1727:32" pos:end="1727:32">)</operator> <operator pos:start="1727:34" pos:end="1727:34">|</operator> <call pos:start="1727:36" pos:end="1727:43"><name pos:start="1727:36" pos:end="1727:40">REX_B</name><argument_list pos:start="1727:41" pos:end="1727:43">(<argument pos:start="1727:42" pos:end="1727:42"><expr pos:start="1727:42" pos:end="1727:42"><name pos:start="1727:42" pos:end="1727:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1729:17" pos:end="1729:64"><expr pos:start="1729:17" pos:end="1729:63"><name pos:start="1729:17" pos:end="1729:26">op2_offset</name> <operator pos:start="1729:28" pos:end="1729:28">=</operator> <call pos:start="1729:30" pos:end="1729:63"><name pos:start="1729:30" pos:end="1729:37">offsetof</name><argument_list pos:start="1729:38" pos:end="1729:63">(<argument pos:start="1729:39" pos:end="1729:49"><expr pos:start="1729:39" pos:end="1729:49"><name pos:start="1729:39" pos:end="1729:49">CPUX86State</name></expr></argument>,<argument pos:start="1729:51" pos:end="1729:62"><expr pos:start="1729:51" pos:end="1729:62"><name pos:start="1729:51" pos:end="1729:62"><name pos:start="1729:51" pos:end="1729:58">xmm_regs</name><index pos:start="1729:59" pos:end="1729:62">[<expr pos:start="1729:60" pos:end="1729:61"><name pos:start="1729:60" pos:end="1729:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="1733:11" pos:end="1753:9">else <block pos:start="1733:16" pos:end="1753:9">{<block_content pos:start="1735:13" pos:end="1751:13">

            <expr_stmt pos:start="1735:13" pos:end="1735:63"><expr pos:start="1735:13" pos:end="1735:62"><name pos:start="1735:13" pos:end="1735:22">op1_offset</name> <operator pos:start="1735:24" pos:end="1735:24">=</operator> <call pos:start="1735:26" pos:end="1735:62"><name pos:start="1735:26" pos:end="1735:33">offsetof</name><argument_list pos:start="1735:34" pos:end="1735:62">(<argument pos:start="1735:35" pos:end="1735:45"><expr pos:start="1735:35" pos:end="1735:45"><name pos:start="1735:35" pos:end="1735:45">CPUX86State</name></expr></argument>,<argument pos:start="1735:47" pos:end="1735:61"><expr pos:start="1735:47" pos:end="1735:61"><name pos:start="1735:47" pos:end="1735:57"><name pos:start="1735:47" pos:end="1735:52">fpregs</name><index pos:start="1735:53" pos:end="1735:57">[<expr pos:start="1735:54" pos:end="1735:56"><name pos:start="1735:54" pos:end="1735:56">reg</name></expr>]</index></name><operator pos:start="1735:58" pos:end="1735:58">.</operator><name pos:start="1735:59" pos:end="1735:61">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1737:13" pos:end="1751:13"><if pos:start="1737:13" pos:end="1745:13">if <condition pos:start="1737:16" pos:end="1737:25">(<expr pos:start="1737:17" pos:end="1737:24"><name pos:start="1737:17" pos:end="1737:19">mod</name> <operator pos:start="1737:21" pos:end="1737:22">!=</operator> <literal type="number" pos:start="1737:24" pos:end="1737:24">3</literal></expr>)</condition> <block pos:start="1737:27" pos:end="1745:13">{<block_content pos:start="1739:17" pos:end="1743:57">

                <expr_stmt pos:start="1739:17" pos:end="1739:65"><expr pos:start="1739:17" pos:end="1739:64"><call pos:start="1739:17" pos:end="1739:64"><name pos:start="1739:17" pos:end="1739:29">gen_lea_modrm</name><argument_list pos:start="1739:30" pos:end="1739:64">(<argument pos:start="1739:31" pos:end="1739:31"><expr pos:start="1739:31" pos:end="1739:31"><name pos:start="1739:31" pos:end="1739:31">s</name></expr></argument>, <argument pos:start="1739:34" pos:end="1739:38"><expr pos:start="1739:34" pos:end="1739:38"><name pos:start="1739:34" pos:end="1739:38">modrm</name></expr></argument>, <argument pos:start="1739:41" pos:end="1739:49"><expr pos:start="1739:41" pos:end="1739:49"><operator pos:start="1739:41" pos:end="1739:41">&amp;</operator><name pos:start="1739:42" pos:end="1739:49">reg_addr</name></expr></argument>, <argument pos:start="1739:52" pos:end="1739:63"><expr pos:start="1739:52" pos:end="1739:63"><operator pos:start="1739:52" pos:end="1739:52">&amp;</operator><name pos:start="1739:53" pos:end="1739:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1741:17" pos:end="1741:58"><expr pos:start="1741:17" pos:end="1741:57"><name pos:start="1741:17" pos:end="1741:26">op2_offset</name> <operator pos:start="1741:28" pos:end="1741:28">=</operator> <call pos:start="1741:30" pos:end="1741:57"><name pos:start="1741:30" pos:end="1741:37">offsetof</name><argument_list pos:start="1741:38" pos:end="1741:57">(<argument pos:start="1741:39" pos:end="1741:49"><expr pos:start="1741:39" pos:end="1741:49"><name pos:start="1741:39" pos:end="1741:49">CPUX86State</name></expr></argument>,<argument pos:start="1741:51" pos:end="1741:56"><expr pos:start="1741:51" pos:end="1741:56"><name pos:start="1741:51" pos:end="1741:56">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1743:17" pos:end="1743:57"><expr pos:start="1743:17" pos:end="1743:56"><call pos:start="1743:17" pos:end="1743:56"><name pos:start="1743:17" pos:end="1743:30">gen_ldq_env_A0</name><argument_list pos:start="1743:31" pos:end="1743:56">(<argument pos:start="1743:32" pos:end="1743:43"><expr pos:start="1743:32" pos:end="1743:43"><name pos:start="1743:32" pos:end="1743:43"><name pos:start="1743:32" pos:end="1743:32">s</name><operator pos:start="1743:33" pos:end="1743:34">-&gt;</operator><name pos:start="1743:35" pos:end="1743:43">mem_index</name></name></expr></argument>, <argument pos:start="1743:46" pos:end="1743:55"><expr pos:start="1743:46" pos:end="1743:55"><name pos:start="1743:46" pos:end="1743:55">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1745:15" pos:end="1751:13">else <block pos:start="1745:20" pos:end="1751:13">{<block_content pos:start="1747:17" pos:end="1749:66">

                <expr_stmt pos:start="1747:17" pos:end="1747:33"><expr pos:start="1747:17" pos:end="1747:32"><name pos:start="1747:17" pos:end="1747:18">rm</name> <operator pos:start="1747:20" pos:end="1747:20">=</operator> <operator pos:start="1747:22" pos:end="1747:22">(</operator><name pos:start="1747:23" pos:end="1747:27">modrm</name> <operator pos:start="1747:29" pos:end="1747:29">&amp;</operator> <literal type="number" pos:start="1747:31" pos:end="1747:31">7</literal><operator pos:start="1747:32" pos:end="1747:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1749:17" pos:end="1749:66"><expr pos:start="1749:17" pos:end="1749:65"><name pos:start="1749:17" pos:end="1749:26">op2_offset</name> <operator pos:start="1749:28" pos:end="1749:28">=</operator> <call pos:start="1749:30" pos:end="1749:65"><name pos:start="1749:30" pos:end="1749:37">offsetof</name><argument_list pos:start="1749:38" pos:end="1749:65">(<argument pos:start="1749:39" pos:end="1749:49"><expr pos:start="1749:39" pos:end="1749:49"><name pos:start="1749:39" pos:end="1749:49">CPUX86State</name></expr></argument>,<argument pos:start="1749:51" pos:end="1749:64"><expr pos:start="1749:51" pos:end="1749:64"><name pos:start="1749:51" pos:end="1749:60"><name pos:start="1749:51" pos:end="1749:56">fpregs</name><index pos:start="1749:57" pos:end="1749:60">[<expr pos:start="1749:58" pos:end="1749:59"><name pos:start="1749:58" pos:end="1749:59">rm</name></expr>]</index></name><operator pos:start="1749:61" pos:end="1749:61">.</operator><name pos:start="1749:62" pos:end="1749:64">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <switch pos:start="1755:9" pos:end="1863:9">switch<condition pos:start="1755:15" pos:end="1755:17">(<expr pos:start="1755:16" pos:end="1755:16"><name pos:start="1755:16" pos:end="1755:16">b</name></expr>)</condition> <block pos:start="1755:19" pos:end="1863:9">{<block_content pos:start="1757:9" pos:end="1861:18">

        <case pos:start="1757:9" pos:end="1757:18">case <expr pos:start="1757:14" pos:end="1757:17"><literal type="number" pos:start="1757:14" pos:end="1757:17">0x0f</literal></expr>:</case> <comment type="block" pos:start="1757:20" pos:end="1757:42">/* 3DNow! data insns */</comment>

            <if_stmt pos:start="1759:13" pos:end="1761:32"><if pos:start="1759:13" pos:end="1761:32">if <condition pos:start="1759:16" pos:end="1759:61">(<expr pos:start="1759:17" pos:end="1759:60"><operator pos:start="1759:17" pos:end="1759:17">!</operator><operator pos:start="1759:18" pos:end="1759:18">(</operator><name pos:start="1759:19" pos:end="1759:40"><name pos:start="1759:19" pos:end="1759:19">s</name><operator pos:start="1759:20" pos:end="1759:21">-&gt;</operator><name pos:start="1759:22" pos:end="1759:40">cpuid_ext2_features</name></name> <operator pos:start="1759:42" pos:end="1759:42">&amp;</operator> <name pos:start="1759:44" pos:end="1759:59">CPUID_EXT2_3DNOW</name><operator pos:start="1759:60" pos:end="1759:60">)</operator></expr>)</condition><block type="pseudo" pos:start="1761:17" pos:end="1761:32"><block_content pos:start="1761:17" pos:end="1761:32">

                <goto pos:start="1761:17" pos:end="1761:32">goto <name pos:start="1761:22" pos:end="1761:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1763:13" pos:end="1763:37"><expr pos:start="1763:13" pos:end="1763:36"><name pos:start="1763:13" pos:end="1763:15">val</name> <operator pos:start="1763:17" pos:end="1763:17">=</operator> <call pos:start="1763:19" pos:end="1763:36"><name pos:start="1763:19" pos:end="1763:27">ldub_code</name><argument_list pos:start="1763:28" pos:end="1763:36">(<argument pos:start="1763:29" pos:end="1763:35"><expr pos:start="1763:29" pos:end="1763:35"><name pos:start="1763:29" pos:end="1763:33"><name pos:start="1763:29" pos:end="1763:29">s</name><operator pos:start="1763:30" pos:end="1763:31">-&gt;</operator><name pos:start="1763:32" pos:end="1763:33">pc</name></name><operator pos:start="1763:34" pos:end="1763:35">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1765:13" pos:end="1765:41"><expr pos:start="1765:13" pos:end="1765:40"><name pos:start="1765:13" pos:end="1765:19">sse_op2</name> <operator pos:start="1765:21" pos:end="1765:21">=</operator> <name pos:start="1765:23" pos:end="1765:40"><name pos:start="1765:23" pos:end="1765:35">sse_op_table5</name><index pos:start="1765:36" pos:end="1765:40">[<expr pos:start="1765:37" pos:end="1765:39"><name pos:start="1765:37" pos:end="1765:39">val</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="1767:13" pos:end="1769:32"><if pos:start="1767:13" pos:end="1769:32">if <condition pos:start="1767:16" pos:end="1767:25">(<expr pos:start="1767:17" pos:end="1767:24"><operator pos:start="1767:17" pos:end="1767:17">!</operator><name pos:start="1767:18" pos:end="1767:24">sse_op2</name></expr>)</condition><block type="pseudo" pos:start="1769:17" pos:end="1769:32"><block_content pos:start="1769:17" pos:end="1769:32">

                <goto pos:start="1769:17" pos:end="1769:32">goto <name pos:start="1769:22" pos:end="1769:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1771:13" pos:end="1771:60"><expr pos:start="1771:13" pos:end="1771:59"><call pos:start="1771:13" pos:end="1771:59"><name pos:start="1771:13" pos:end="1771:28">tcg_gen_addi_ptr</name><argument_list pos:start="1771:29" pos:end="1771:59">(<argument pos:start="1771:30" pos:end="1771:37"><expr pos:start="1771:30" pos:end="1771:37"><name pos:start="1771:30" pos:end="1771:37">cpu_ptr0</name></expr></argument>, <argument pos:start="1771:40" pos:end="1771:46"><expr pos:start="1771:40" pos:end="1771:46"><name pos:start="1771:40" pos:end="1771:46">cpu_env</name></expr></argument>, <argument pos:start="1771:49" pos:end="1771:58"><expr pos:start="1771:49" pos:end="1771:58"><name pos:start="1771:49" pos:end="1771:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1773:13" pos:end="1773:60"><expr pos:start="1773:13" pos:end="1773:59"><call pos:start="1773:13" pos:end="1773:59"><name pos:start="1773:13" pos:end="1773:28">tcg_gen_addi_ptr</name><argument_list pos:start="1773:29" pos:end="1773:59">(<argument pos:start="1773:30" pos:end="1773:37"><expr pos:start="1773:30" pos:end="1773:37"><name pos:start="1773:30" pos:end="1773:37">cpu_ptr1</name></expr></argument>, <argument pos:start="1773:40" pos:end="1773:46"><expr pos:start="1773:40" pos:end="1773:46"><name pos:start="1773:40" pos:end="1773:46">cpu_env</name></expr></argument>, <argument pos:start="1773:49" pos:end="1773:58"><expr pos:start="1773:49" pos:end="1773:58"><name pos:start="1773:49" pos:end="1773:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1775:13" pos:end="1775:60"><expr pos:start="1775:13" pos:end="1775:59"><call pos:start="1775:13" pos:end="1775:59"><name pos:start="1775:13" pos:end="1775:30">tcg_gen_helper_0_2</name><argument_list pos:start="1775:31" pos:end="1775:59">(<argument pos:start="1775:32" pos:end="1775:38"><expr pos:start="1775:32" pos:end="1775:38"><name pos:start="1775:32" pos:end="1775:38">sse_op2</name></expr></argument>, <argument pos:start="1775:41" pos:end="1775:48"><expr pos:start="1775:41" pos:end="1775:48"><name pos:start="1775:41" pos:end="1775:48">cpu_ptr0</name></expr></argument>, <argument pos:start="1775:51" pos:end="1775:58"><expr pos:start="1775:51" pos:end="1775:58"><name pos:start="1775:51" pos:end="1775:58">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1777:13" pos:end="1777:18">break;</break>

        <case pos:start="1779:9" pos:end="1779:18">case <expr pos:start="1779:14" pos:end="1779:17"><literal type="number" pos:start="1779:14" pos:end="1779:17">0x70</literal></expr>:</case> <comment type="block" pos:start="1779:20" pos:end="1779:36">/* pshufx insn */</comment>

        <case pos:start="1781:9" pos:end="1781:18">case <expr pos:start="1781:14" pos:end="1781:17"><literal type="number" pos:start="1781:14" pos:end="1781:17">0xc6</literal></expr>:</case> <comment type="block" pos:start="1781:20" pos:end="1781:36">/* pshufx insn */</comment>

            <expr_stmt pos:start="1783:13" pos:end="1783:37"><expr pos:start="1783:13" pos:end="1783:36"><name pos:start="1783:13" pos:end="1783:15">val</name> <operator pos:start="1783:17" pos:end="1783:17">=</operator> <call pos:start="1783:19" pos:end="1783:36"><name pos:start="1783:19" pos:end="1783:27">ldub_code</name><argument_list pos:start="1783:28" pos:end="1783:36">(<argument pos:start="1783:29" pos:end="1783:35"><expr pos:start="1783:29" pos:end="1783:35"><name pos:start="1783:29" pos:end="1783:33"><name pos:start="1783:29" pos:end="1783:29">s</name><operator pos:start="1783:30" pos:end="1783:31">-&gt;</operator><name pos:start="1783:32" pos:end="1783:33">pc</name></name><operator pos:start="1783:34" pos:end="1783:35">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1785:13" pos:end="1785:60"><expr pos:start="1785:13" pos:end="1785:59"><call pos:start="1785:13" pos:end="1785:59"><name pos:start="1785:13" pos:end="1785:28">tcg_gen_addi_ptr</name><argument_list pos:start="1785:29" pos:end="1785:59">(<argument pos:start="1785:30" pos:end="1785:37"><expr pos:start="1785:30" pos:end="1785:37"><name pos:start="1785:30" pos:end="1785:37">cpu_ptr0</name></expr></argument>, <argument pos:start="1785:40" pos:end="1785:46"><expr pos:start="1785:40" pos:end="1785:46"><name pos:start="1785:40" pos:end="1785:46">cpu_env</name></expr></argument>, <argument pos:start="1785:49" pos:end="1785:58"><expr pos:start="1785:49" pos:end="1785:58"><name pos:start="1785:49" pos:end="1785:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1787:13" pos:end="1787:60"><expr pos:start="1787:13" pos:end="1787:59"><call pos:start="1787:13" pos:end="1787:59"><name pos:start="1787:13" pos:end="1787:28">tcg_gen_addi_ptr</name><argument_list pos:start="1787:29" pos:end="1787:59">(<argument pos:start="1787:30" pos:end="1787:37"><expr pos:start="1787:30" pos:end="1787:37"><name pos:start="1787:30" pos:end="1787:37">cpu_ptr1</name></expr></argument>, <argument pos:start="1787:40" pos:end="1787:46"><expr pos:start="1787:40" pos:end="1787:46"><name pos:start="1787:40" pos:end="1787:46">cpu_env</name></expr></argument>, <argument pos:start="1787:49" pos:end="1787:58"><expr pos:start="1787:49" pos:end="1787:58"><name pos:start="1787:49" pos:end="1787:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1789:13" pos:end="1789:80"><expr pos:start="1789:13" pos:end="1789:79"><call pos:start="1789:13" pos:end="1789:79"><name pos:start="1789:13" pos:end="1789:30">tcg_gen_helper_0_3</name><argument_list pos:start="1789:31" pos:end="1789:79">(<argument pos:start="1789:32" pos:end="1789:38"><expr pos:start="1789:32" pos:end="1789:38"><name pos:start="1789:32" pos:end="1789:38">sse_op2</name></expr></argument>, <argument pos:start="1789:41" pos:end="1789:48"><expr pos:start="1789:41" pos:end="1789:48"><name pos:start="1789:41" pos:end="1789:48">cpu_ptr0</name></expr></argument>, <argument pos:start="1789:51" pos:end="1789:58"><expr pos:start="1789:51" pos:end="1789:58"><name pos:start="1789:51" pos:end="1789:58">cpu_ptr1</name></expr></argument>, <argument pos:start="1789:61" pos:end="1789:78"><expr pos:start="1789:61" pos:end="1789:78"><call pos:start="1789:61" pos:end="1789:78"><name pos:start="1789:61" pos:end="1789:73">tcg_const_i32</name><argument_list pos:start="1789:74" pos:end="1789:78">(<argument pos:start="1789:75" pos:end="1789:77"><expr pos:start="1789:75" pos:end="1789:77"><name pos:start="1789:75" pos:end="1789:77">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1791:13" pos:end="1791:18">break;</break>

        <case pos:start="1793:9" pos:end="1793:18">case <expr pos:start="1793:14" pos:end="1793:17"><literal type="number" pos:start="1793:14" pos:end="1793:17">0xc2</literal></expr>:</case>

            <comment type="block" pos:start="1795:13" pos:end="1795:31">/* compare insns */</comment>

            <expr_stmt pos:start="1797:13" pos:end="1797:37"><expr pos:start="1797:13" pos:end="1797:36"><name pos:start="1797:13" pos:end="1797:15">val</name> <operator pos:start="1797:17" pos:end="1797:17">=</operator> <call pos:start="1797:19" pos:end="1797:36"><name pos:start="1797:19" pos:end="1797:27">ldub_code</name><argument_list pos:start="1797:28" pos:end="1797:36">(<argument pos:start="1797:29" pos:end="1797:35"><expr pos:start="1797:29" pos:end="1797:35"><name pos:start="1797:29" pos:end="1797:33"><name pos:start="1797:29" pos:end="1797:29">s</name><operator pos:start="1797:30" pos:end="1797:31">-&gt;</operator><name pos:start="1797:32" pos:end="1797:33">pc</name></name><operator pos:start="1797:34" pos:end="1797:35">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1799:13" pos:end="1801:32"><if pos:start="1799:13" pos:end="1801:32">if <condition pos:start="1799:16" pos:end="1799:25">(<expr pos:start="1799:17" pos:end="1799:24"><name pos:start="1799:17" pos:end="1799:19">val</name> <operator pos:start="1799:21" pos:end="1799:22">&gt;=</operator> <literal type="number" pos:start="1799:24" pos:end="1799:24">8</literal></expr>)</condition><block type="pseudo" pos:start="1801:17" pos:end="1801:32"><block_content pos:start="1801:17" pos:end="1801:32">

                <goto pos:start="1801:17" pos:end="1801:32">goto <name pos:start="1801:22" pos:end="1801:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1803:13" pos:end="1803:45"><expr pos:start="1803:13" pos:end="1803:44"><name pos:start="1803:13" pos:end="1803:19">sse_op2</name> <operator pos:start="1803:21" pos:end="1803:21">=</operator> <name pos:start="1803:23" pos:end="1803:44"><name pos:start="1803:23" pos:end="1803:35">sse_op_table4</name><index pos:start="1803:36" pos:end="1803:40">[<expr pos:start="1803:37" pos:end="1803:39"><name pos:start="1803:37" pos:end="1803:39">val</name></expr>]</index><index pos:start="1803:41" pos:end="1803:44">[<expr pos:start="1803:42" pos:end="1803:43"><name pos:start="1803:42" pos:end="1803:43">b1</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="1805:13" pos:end="1805:60"><expr pos:start="1805:13" pos:end="1805:59"><call pos:start="1805:13" pos:end="1805:59"><name pos:start="1805:13" pos:end="1805:28">tcg_gen_addi_ptr</name><argument_list pos:start="1805:29" pos:end="1805:59">(<argument pos:start="1805:30" pos:end="1805:37"><expr pos:start="1805:30" pos:end="1805:37"><name pos:start="1805:30" pos:end="1805:37">cpu_ptr0</name></expr></argument>, <argument pos:start="1805:40" pos:end="1805:46"><expr pos:start="1805:40" pos:end="1805:46"><name pos:start="1805:40" pos:end="1805:46">cpu_env</name></expr></argument>, <argument pos:start="1805:49" pos:end="1805:58"><expr pos:start="1805:49" pos:end="1805:58"><name pos:start="1805:49" pos:end="1805:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1807:13" pos:end="1807:60"><expr pos:start="1807:13" pos:end="1807:59"><call pos:start="1807:13" pos:end="1807:59"><name pos:start="1807:13" pos:end="1807:28">tcg_gen_addi_ptr</name><argument_list pos:start="1807:29" pos:end="1807:59">(<argument pos:start="1807:30" pos:end="1807:37"><expr pos:start="1807:30" pos:end="1807:37"><name pos:start="1807:30" pos:end="1807:37">cpu_ptr1</name></expr></argument>, <argument pos:start="1807:40" pos:end="1807:46"><expr pos:start="1807:40" pos:end="1807:46"><name pos:start="1807:40" pos:end="1807:46">cpu_env</name></expr></argument>, <argument pos:start="1807:49" pos:end="1807:58"><expr pos:start="1807:49" pos:end="1807:58"><name pos:start="1807:49" pos:end="1807:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1809:13" pos:end="1809:60"><expr pos:start="1809:13" pos:end="1809:59"><call pos:start="1809:13" pos:end="1809:59"><name pos:start="1809:13" pos:end="1809:30">tcg_gen_helper_0_2</name><argument_list pos:start="1809:31" pos:end="1809:59">(<argument pos:start="1809:32" pos:end="1809:38"><expr pos:start="1809:32" pos:end="1809:38"><name pos:start="1809:32" pos:end="1809:38">sse_op2</name></expr></argument>, <argument pos:start="1809:41" pos:end="1809:48"><expr pos:start="1809:41" pos:end="1809:48"><name pos:start="1809:41" pos:end="1809:48">cpu_ptr0</name></expr></argument>, <argument pos:start="1809:51" pos:end="1809:58"><expr pos:start="1809:51" pos:end="1809:58"><name pos:start="1809:51" pos:end="1809:58">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1811:13" pos:end="1811:18">break;</break>

        <case pos:start="1813:9" pos:end="1813:18">case <expr pos:start="1813:14" pos:end="1813:17"><literal type="number" pos:start="1813:14" pos:end="1813:17">0xf7</literal></expr>:</case>

            <comment type="block" pos:start="1815:13" pos:end="1815:46">/* maskmov : we must prepare A0 */</comment>

            <if_stmt pos:start="1817:13" pos:end="1822:0"><if pos:start="1817:13" pos:end="1822:0">if <condition pos:start="1817:16" pos:end="1817:25">(<expr pos:start="1817:17" pos:end="1817:24"><name pos:start="1817:17" pos:end="1817:19">mod</name> <operator pos:start="1817:21" pos:end="1817:22">!=</operator> <literal type="number" pos:start="1817:24" pos:end="1817:24">3</literal></expr>)</condition><block type="pseudo" pos:start="1819:17" pos:end="1822:0"><block_content pos:start="1819:17" pos:end="1822:0">

                <goto pos:start="1819:17" pos:end="1822:0">goto <name pos:start="1819:22" pos:end="1819:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="1821:1" pos:end="1821:20">#<cpp:directive pos:start="1821:2" pos:end="1821:6">ifdef</cpp:directive> <name pos:start="1821:8" pos:end="1821:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="1823:13" pos:end="1839:13"><if pos:start="1823:13" pos:end="1827:13">if <condition pos:start="1823:16" pos:end="1823:30">(<expr pos:start="1823:17" pos:end="1823:29"><name pos:start="1823:17" pos:end="1823:24"><name pos:start="1823:17" pos:end="1823:17">s</name><operator pos:start="1823:18" pos:end="1823:19">-&gt;</operator><name pos:start="1823:20" pos:end="1823:24">aflag</name></name> <operator pos:start="1823:26" pos:end="1823:27">==</operator> <literal type="number" pos:start="1823:29" pos:end="1823:29">2</literal></expr>)</condition> <block pos:start="1823:32" pos:end="1827:13">{<block_content pos:start="1825:17" pos:end="1825:42">

                <expr_stmt pos:start="1825:17" pos:end="1825:42"><expr pos:start="1825:17" pos:end="1825:41"><call pos:start="1825:17" pos:end="1825:41"><name pos:start="1825:17" pos:end="1825:34">gen_op_movq_A0_reg</name><argument_list pos:start="1825:35" pos:end="1825:41">(<argument pos:start="1825:36" pos:end="1825:40"><expr pos:start="1825:36" pos:end="1825:40"><name pos:start="1825:36" pos:end="1825:40">R_EDI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1827:15" pos:end="1839:13">else

<cpp:endif pos:start="1829:1" pos:end="1829:6">#<cpp:directive pos:start="1829:2" pos:end="1829:6">endif</cpp:directive></cpp:endif>

            <block pos:start="1831:13" pos:end="1839:13">{<block_content pos:start="1833:17" pos:end="1837:42">

                <expr_stmt pos:start="1833:17" pos:end="1833:42"><expr pos:start="1833:17" pos:end="1833:41"><call pos:start="1833:17" pos:end="1833:41"><name pos:start="1833:17" pos:end="1833:34">gen_op_movl_A0_reg</name><argument_list pos:start="1833:35" pos:end="1833:41">(<argument pos:start="1833:36" pos:end="1833:40"><expr pos:start="1833:36" pos:end="1833:40"><name pos:start="1833:36" pos:end="1833:40">R_EDI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1835:17" pos:end="1837:42"><if pos:start="1835:17" pos:end="1837:42">if <condition pos:start="1835:20" pos:end="1835:34">(<expr pos:start="1835:21" pos:end="1835:33"><name pos:start="1835:21" pos:end="1835:28"><name pos:start="1835:21" pos:end="1835:21">s</name><operator pos:start="1835:22" pos:end="1835:23">-&gt;</operator><name pos:start="1835:24" pos:end="1835:28">aflag</name></name> <operator pos:start="1835:30" pos:end="1835:31">==</operator> <literal type="number" pos:start="1835:33" pos:end="1835:33">0</literal></expr>)</condition><block type="pseudo" pos:start="1837:21" pos:end="1837:42"><block_content pos:start="1837:21" pos:end="1837:42">

                    <expr_stmt pos:start="1837:21" pos:end="1837:42"><expr pos:start="1837:21" pos:end="1837:41"><call pos:start="1837:21" pos:end="1837:41"><name pos:start="1837:21" pos:end="1837:39">gen_op_andl_A0_ffff</name><argument_list pos:start="1837:40" pos:end="1837:41">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1841:13" pos:end="1841:33"><expr pos:start="1841:13" pos:end="1841:32"><call pos:start="1841:13" pos:end="1841:32"><name pos:start="1841:13" pos:end="1841:29">gen_add_A0_ds_seg</name><argument_list pos:start="1841:30" pos:end="1841:32">(<argument pos:start="1841:31" pos:end="1841:31"><expr pos:start="1841:31" pos:end="1841:31"><name pos:start="1841:31" pos:end="1841:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="1845:13" pos:end="1845:60"><expr pos:start="1845:13" pos:end="1845:59"><call pos:start="1845:13" pos:end="1845:59"><name pos:start="1845:13" pos:end="1845:28">tcg_gen_addi_ptr</name><argument_list pos:start="1845:29" pos:end="1845:59">(<argument pos:start="1845:30" pos:end="1845:37"><expr pos:start="1845:30" pos:end="1845:37"><name pos:start="1845:30" pos:end="1845:37">cpu_ptr0</name></expr></argument>, <argument pos:start="1845:40" pos:end="1845:46"><expr pos:start="1845:40" pos:end="1845:46"><name pos:start="1845:40" pos:end="1845:46">cpu_env</name></expr></argument>, <argument pos:start="1845:49" pos:end="1845:58"><expr pos:start="1845:49" pos:end="1845:58"><name pos:start="1845:49" pos:end="1845:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1847:13" pos:end="1847:60"><expr pos:start="1847:13" pos:end="1847:59"><call pos:start="1847:13" pos:end="1847:59"><name pos:start="1847:13" pos:end="1847:28">tcg_gen_addi_ptr</name><argument_list pos:start="1847:29" pos:end="1847:59">(<argument pos:start="1847:30" pos:end="1847:37"><expr pos:start="1847:30" pos:end="1847:37"><name pos:start="1847:30" pos:end="1847:37">cpu_ptr1</name></expr></argument>, <argument pos:start="1847:40" pos:end="1847:46"><expr pos:start="1847:40" pos:end="1847:46"><name pos:start="1847:40" pos:end="1847:46">cpu_env</name></expr></argument>, <argument pos:start="1847:49" pos:end="1847:58"><expr pos:start="1847:49" pos:end="1847:58"><name pos:start="1847:49" pos:end="1847:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1849:13" pos:end="1849:68"><expr pos:start="1849:13" pos:end="1849:67"><call pos:start="1849:13" pos:end="1849:67"><name pos:start="1849:13" pos:end="1849:30">tcg_gen_helper_0_3</name><argument_list pos:start="1849:31" pos:end="1849:67">(<argument pos:start="1849:32" pos:end="1849:38"><expr pos:start="1849:32" pos:end="1849:38"><name pos:start="1849:32" pos:end="1849:38">sse_op2</name></expr></argument>, <argument pos:start="1849:41" pos:end="1849:48"><expr pos:start="1849:41" pos:end="1849:48"><name pos:start="1849:41" pos:end="1849:48">cpu_ptr0</name></expr></argument>, <argument pos:start="1849:51" pos:end="1849:58"><expr pos:start="1849:51" pos:end="1849:58"><name pos:start="1849:51" pos:end="1849:58">cpu_ptr1</name></expr></argument>, <argument pos:start="1849:61" pos:end="1849:66"><expr pos:start="1849:61" pos:end="1849:66"><name pos:start="1849:61" pos:end="1849:66">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1851:13" pos:end="1851:18">break;</break>

        <default pos:start="1853:9" pos:end="1853:16">default:</default>

            <expr_stmt pos:start="1855:13" pos:end="1855:60"><expr pos:start="1855:13" pos:end="1855:59"><call pos:start="1855:13" pos:end="1855:59"><name pos:start="1855:13" pos:end="1855:28">tcg_gen_addi_ptr</name><argument_list pos:start="1855:29" pos:end="1855:59">(<argument pos:start="1855:30" pos:end="1855:37"><expr pos:start="1855:30" pos:end="1855:37"><name pos:start="1855:30" pos:end="1855:37">cpu_ptr0</name></expr></argument>, <argument pos:start="1855:40" pos:end="1855:46"><expr pos:start="1855:40" pos:end="1855:46"><name pos:start="1855:40" pos:end="1855:46">cpu_env</name></expr></argument>, <argument pos:start="1855:49" pos:end="1855:58"><expr pos:start="1855:49" pos:end="1855:58"><name pos:start="1855:49" pos:end="1855:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1857:13" pos:end="1857:60"><expr pos:start="1857:13" pos:end="1857:59"><call pos:start="1857:13" pos:end="1857:59"><name pos:start="1857:13" pos:end="1857:28">tcg_gen_addi_ptr</name><argument_list pos:start="1857:29" pos:end="1857:59">(<argument pos:start="1857:30" pos:end="1857:37"><expr pos:start="1857:30" pos:end="1857:37"><name pos:start="1857:30" pos:end="1857:37">cpu_ptr1</name></expr></argument>, <argument pos:start="1857:40" pos:end="1857:46"><expr pos:start="1857:40" pos:end="1857:46"><name pos:start="1857:40" pos:end="1857:46">cpu_env</name></expr></argument>, <argument pos:start="1857:49" pos:end="1857:58"><expr pos:start="1857:49" pos:end="1857:58"><name pos:start="1857:49" pos:end="1857:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1859:13" pos:end="1859:60"><expr pos:start="1859:13" pos:end="1859:59"><call pos:start="1859:13" pos:end="1859:59"><name pos:start="1859:13" pos:end="1859:30">tcg_gen_helper_0_2</name><argument_list pos:start="1859:31" pos:end="1859:59">(<argument pos:start="1859:32" pos:end="1859:38"><expr pos:start="1859:32" pos:end="1859:38"><name pos:start="1859:32" pos:end="1859:38">sse_op2</name></expr></argument>, <argument pos:start="1859:41" pos:end="1859:48"><expr pos:start="1859:41" pos:end="1859:48"><name pos:start="1859:41" pos:end="1859:48">cpu_ptr0</name></expr></argument>, <argument pos:start="1859:51" pos:end="1859:58"><expr pos:start="1859:51" pos:end="1859:58"><name pos:start="1859:51" pos:end="1859:58">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1861:13" pos:end="1861:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="1865:9" pos:end="1869:9"><if pos:start="1865:9" pos:end="1869:9">if <condition pos:start="1865:12" pos:end="1865:35">(<expr pos:start="1865:13" pos:end="1865:34"><name pos:start="1865:13" pos:end="1865:13">b</name> <operator pos:start="1865:15" pos:end="1865:16">==</operator> <literal type="number" pos:start="1865:18" pos:end="1865:21">0x2e</literal> <operator pos:start="1865:23" pos:end="1865:24">||</operator> <name pos:start="1865:26" pos:end="1865:26">b</name> <operator pos:start="1865:28" pos:end="1865:29">==</operator> <literal type="number" pos:start="1865:31" pos:end="1865:34">0x2f</literal></expr>)</condition> <block pos:start="1865:37" pos:end="1869:9">{<block_content pos:start="1867:13" pos:end="1867:36">

            <expr_stmt pos:start="1867:13" pos:end="1867:36"><expr pos:start="1867:13" pos:end="1867:35"><name pos:start="1867:13" pos:end="1867:20"><name pos:start="1867:13" pos:end="1867:13">s</name><operator pos:start="1867:14" pos:end="1867:15">-&gt;</operator><name pos:start="1867:16" pos:end="1867:20">cc_op</name></name> <operator pos:start="1867:22" pos:end="1867:22">=</operator> <name pos:start="1867:24" pos:end="1867:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
