<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15758.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">wiener_denoise</name><parameter_list pos:start="1:27" pos:end="5:45">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:42">WMAVoiceContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:59">fcb_type</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:42"><decl pos:start="3:28" pos:end="3:42"><type pos:start="3:28" pos:end="3:42"><name pos:start="3:28" pos:end="3:32">float</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:42">synth_pf</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:52"><decl pos:start="3:45" pos:end="3:52"><type pos:start="3:45" pos:end="3:52"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:52">size</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:44"><decl pos:start="5:28" pos:end="5:44"><type pos:start="5:28" pos:end="5:44"><specifier pos:start="5:28" pos:end="5:32">const</specifier> <name pos:start="5:34" pos:end="5:38">float</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:44">lpcs</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="121:1">{<block_content pos:start="9:5" pos:end="119:5">

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">remainder</name></decl>, <decl pos:start="9:20" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:22">lim</name></decl>, <decl pos:start="9:25" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:25" pos:end="9:25">n</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="75:5"><if pos:start="13:5" pos:end="75:5">if <condition pos:start="13:8" pos:end="13:37">(<expr pos:start="13:9" pos:end="13:36"><name pos:start="13:9" pos:end="13:16">fcb_type</name> <operator pos:start="13:18" pos:end="13:19">!=</operator> <name pos:start="13:21" pos:end="13:36">FCB_TYPE_SILENCE</name></expr>)</condition> <block pos:start="13:39" pos:end="75:5">{<block_content pos:start="15:9" pos:end="73:42">

        <decl_stmt pos:start="15:9" pos:end="17:59"><decl pos:start="15:9" pos:end="15:46"><type pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:13">float</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:26">tilted_lpcs</name> <init pos:start="15:28" pos:end="15:46">= <expr pos:start="15:30" pos:end="15:46"><name pos:start="15:30" pos:end="15:46"><name pos:start="15:30" pos:end="15:30">s</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:46">tilted_lpcs_pf</name></name></expr></init></decl>,

              <decl pos:start="17:15" pos:end="17:44"><type ref="prev" pos:start="15:9" pos:end="15:15"><modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:21">coeffs</name> <init pos:start="17:23" pos:end="17:44">= <expr pos:start="17:25" pos:end="17:44"><name pos:start="17:25" pos:end="17:44"><name pos:start="17:25" pos:end="17:25">s</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:44">denoise_coeffs_pf</name></name></expr></init></decl>, <decl pos:start="17:47" pos:end="17:58"><type ref="prev" pos:start="15:9" pos:end="15:15"/><name pos:start="17:47" pos:end="17:54">tilt_mem</name> <init pos:start="17:56" pos:end="17:58">= <expr pos:start="17:58" pos:end="17:58"><literal type="number" pos:start="17:58" pos:end="17:58">0</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="21:9" pos:end="21:39"><expr pos:start="21:9" pos:end="21:38"><name pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:19">tilted_lpcs</name><index pos:start="21:20" pos:end="21:22">[<expr pos:start="21:21" pos:end="21:21"><literal type="number" pos:start="21:21" pos:end="21:21">0</literal></expr>]</index></name>           <operator pos:start="21:34" pos:end="21:34">=</operator> <literal type="number" pos:start="21:36" pos:end="21:38">1.0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:65"><expr pos:start="23:9" pos:end="23:64"><call pos:start="23:9" pos:end="23:64"><name pos:start="23:9" pos:end="23:14">memcpy</name><argument_list pos:start="23:15" pos:end="23:64">(<argument pos:start="23:16" pos:end="23:30"><expr pos:start="23:16" pos:end="23:30"><operator pos:start="23:16" pos:end="23:16">&amp;</operator><name pos:start="23:17" pos:end="23:30"><name pos:start="23:17" pos:end="23:27">tilted_lpcs</name><index pos:start="23:28" pos:end="23:30">[<expr pos:start="23:29" pos:end="23:29"><literal type="number" pos:start="23:29" pos:end="23:29">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="23:33" pos:end="23:36"><expr pos:start="23:33" pos:end="23:36"><name pos:start="23:33" pos:end="23:36">lpcs</name></expr></argument>, <argument pos:start="23:39" pos:end="23:63"><expr pos:start="23:39" pos:end="23:63"><sizeof pos:start="23:39" pos:end="23:53">sizeof<argument_list pos:start="23:45" pos:end="23:53">(<argument pos:start="23:46" pos:end="23:52"><expr pos:start="23:46" pos:end="23:52"><name pos:start="23:46" pos:end="23:52"><name pos:start="23:46" pos:end="23:49">lpcs</name><index pos:start="23:50" pos:end="23:52">[<expr pos:start="23:51" pos:end="23:51"><literal type="number" pos:start="23:51" pos:end="23:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator pos:start="23:55" pos:end="23:55">*</operator> <name pos:start="23:57" pos:end="23:63"><name pos:start="23:57" pos:end="23:57">s</name><operator pos:start="23:58" pos:end="23:59">-&gt;</operator><name pos:start="23:60" pos:end="23:63">lsps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="27:61"><expr pos:start="25:9" pos:end="27:60"><call pos:start="25:9" pos:end="27:60"><name pos:start="25:9" pos:end="25:14">memset</name><argument_list pos:start="25:15" pos:end="27:60">(<argument pos:start="25:16" pos:end="25:40"><expr pos:start="25:16" pos:end="25:40"><operator pos:start="25:16" pos:end="25:16">&amp;</operator><name pos:start="25:17" pos:end="25:40"><name pos:start="25:17" pos:end="25:27">tilted_lpcs</name><index pos:start="25:28" pos:end="25:40">[<expr pos:start="25:29" pos:end="25:39"><name pos:start="25:29" pos:end="25:35"><name pos:start="25:29" pos:end="25:29">s</name><operator pos:start="25:30" pos:end="25:31">-&gt;</operator><name pos:start="25:32" pos:end="25:35">lsps</name></name> <operator pos:start="25:37" pos:end="25:37">+</operator> <literal type="number" pos:start="25:39" pos:end="25:39">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="25:43" pos:end="25:43"><expr pos:start="25:43" pos:end="25:43"><literal type="number" pos:start="25:43" pos:end="25:43">0</literal></expr></argument>,

               <argument pos:start="27:16" pos:end="27:59"><expr pos:start="27:16" pos:end="27:59"><sizeof pos:start="27:16" pos:end="27:37">sizeof<argument_list pos:start="27:22" pos:end="27:37">(<argument pos:start="27:23" pos:end="27:36"><expr pos:start="27:23" pos:end="27:36"><name pos:start="27:23" pos:end="27:36"><name pos:start="27:23" pos:end="27:33">tilted_lpcs</name><index pos:start="27:34" pos:end="27:36">[<expr pos:start="27:35" pos:end="27:35"><literal type="number" pos:start="27:35" pos:end="27:35">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator pos:start="27:39" pos:end="27:39">*</operator> <operator pos:start="27:41" pos:end="27:41">(</operator><literal type="number" pos:start="27:42" pos:end="27:46">128</literal> <operator pos:start="27:46" pos:end="27:46">-</operator> <name pos:start="27:48" pos:end="27:54"><name pos:start="27:48" pos:end="27:48">s</name><operator pos:start="27:49" pos:end="27:50">-&gt;</operator><name pos:start="27:51" pos:end="27:54">lsps</name></name> <operator pos:start="27:56" pos:end="27:56">-</operator> <literal type="number" pos:start="27:58" pos:end="27:58">1</literal><operator pos:start="27:59" pos:end="27:59">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="31:55"><expr pos:start="29:9" pos:end="31:54"><call pos:start="29:9" pos:end="31:54"><name pos:start="29:9" pos:end="29:28">ff_tilt_compensation</name><argument_list pos:start="29:29" pos:end="31:54">(<argument pos:start="29:30" pos:end="29:38"><expr pos:start="29:30" pos:end="29:38"><operator pos:start="29:30" pos:end="29:30">&amp;</operator><name pos:start="29:31" pos:end="29:38">tilt_mem</name></expr></argument>, <argument pos:start="29:41" pos:end="29:72"><expr pos:start="29:41" pos:end="29:72"><literal type="number" pos:start="29:41" pos:end="29:43">0.7</literal> <operator pos:start="29:45" pos:end="29:45">*</operator> <call pos:start="29:47" pos:end="29:72"><name pos:start="29:47" pos:end="29:57">tilt_factor</name><argument_list pos:start="29:58" pos:end="29:72">(<argument pos:start="29:59" pos:end="29:62"><expr pos:start="29:59" pos:end="29:62"><name pos:start="29:59" pos:end="29:62">lpcs</name></expr></argument>, <argument pos:start="29:65" pos:end="29:71"><expr pos:start="29:65" pos:end="29:71"><name pos:start="29:65" pos:end="29:71"><name pos:start="29:65" pos:end="29:65">s</name><operator pos:start="29:66" pos:end="29:67">-&gt;</operator><name pos:start="29:68" pos:end="29:71">lsps</name></name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="31:30" pos:end="31:40"><expr pos:start="31:30" pos:end="31:40"><name pos:start="31:30" pos:end="31:40">tilted_lpcs</name></expr></argument>, <argument pos:start="31:43" pos:end="31:53"><expr pos:start="31:43" pos:end="31:53"><name pos:start="31:43" pos:end="31:49"><name pos:start="31:43" pos:end="31:43">s</name><operator pos:start="31:44" pos:end="31:45">-&gt;</operator><name pos:start="31:46" pos:end="31:49">lsps</name></name> <operator pos:start="31:51" pos:end="31:51">+</operator> <literal type="number" pos:start="31:53" pos:end="31:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="35:9" pos:end="41:76">/* The IRDFT output (127 samples for 7-bit filter) beyond the frame

         * size is applied to the next frame. All input beyond this is zero,

         * and thus all output beyond this will go towards zero, hence we can

         * limit to min(size-1, 127-size) as a performance consideration. */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:48"><expr pos:start="43:9" pos:end="43:47"><name pos:start="43:9" pos:end="43:17">remainder</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <call pos:start="43:21" pos:end="43:47"><name pos:start="43:21" pos:end="43:25">FFMIN</name><argument_list pos:start="43:26" pos:end="43:47">(<argument pos:start="43:27" pos:end="43:36"><expr pos:start="43:27" pos:end="43:36"><literal type="number" pos:start="43:27" pos:end="43:31">127</literal> <operator pos:start="43:31" pos:end="43:31">-</operator> <name pos:start="43:33" pos:end="43:36">size</name></expr></argument>, <argument pos:start="43:39" pos:end="43:46"><expr pos:start="43:39" pos:end="43:46"><name pos:start="43:39" pos:end="43:42">size</name> <operator pos:start="43:44" pos:end="43:44">-</operator> <literal type="number" pos:start="43:46" pos:end="43:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:73"><expr pos:start="45:9" pos:end="45:72"><call pos:start="45:9" pos:end="45:72"><name pos:start="45:9" pos:end="45:27">calc_input_response</name><argument_list pos:start="45:28" pos:end="45:72">(<argument pos:start="45:29" pos:end="45:29"><expr pos:start="45:29" pos:end="45:29"><name pos:start="45:29" pos:end="45:29">s</name></expr></argument>, <argument pos:start="45:32" pos:end="45:42"><expr pos:start="45:32" pos:end="45:42"><name pos:start="45:32" pos:end="45:42">tilted_lpcs</name></expr></argument>, <argument pos:start="45:45" pos:end="45:52"><expr pos:start="45:45" pos:end="45:52"><name pos:start="45:45" pos:end="45:52">fcb_type</name></expr></argument>, <argument pos:start="45:55" pos:end="45:60"><expr pos:start="45:55" pos:end="45:60"><name pos:start="45:55" pos:end="45:60">coeffs</name></expr></argument>, <argument pos:start="45:63" pos:end="45:71"><expr pos:start="45:63" pos:end="45:71"><name pos:start="45:63" pos:end="45:71">remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="49:9" pos:end="51:35">/* apply coefficients (in frequency spectrum domain), i.e. complex

         * number multiplication */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:71"><expr pos:start="53:9" pos:end="53:70"><call pos:start="53:9" pos:end="53:70"><name pos:start="53:9" pos:end="53:14">memset</name><argument_list pos:start="53:15" pos:end="53:70">(<argument pos:start="53:16" pos:end="53:30"><expr pos:start="53:16" pos:end="53:30"><operator pos:start="53:16" pos:end="53:16">&amp;</operator><name pos:start="53:17" pos:end="53:30"><name pos:start="53:17" pos:end="53:24">synth_pf</name><index pos:start="53:25" pos:end="53:30">[<expr pos:start="53:26" pos:end="53:29"><name pos:start="53:26" pos:end="53:29">size</name></expr>]</index></name></expr></argument>, <argument pos:start="53:33" pos:end="53:33"><expr pos:start="53:33" pos:end="53:33"><literal type="number" pos:start="53:33" pos:end="53:33">0</literal></expr></argument>, <argument pos:start="53:36" pos:end="53:69"><expr pos:start="53:36" pos:end="53:69"><sizeof pos:start="53:36" pos:end="53:54">sizeof<argument_list pos:start="53:42" pos:end="53:54">(<argument pos:start="53:43" pos:end="53:53"><expr pos:start="53:43" pos:end="53:53"><name pos:start="53:43" pos:end="53:53"><name pos:start="53:43" pos:end="53:50">synth_pf</name><index pos:start="53:51" pos:end="53:53">[<expr pos:start="53:52" pos:end="53:52"><literal type="number" pos:start="53:52" pos:end="53:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator pos:start="53:56" pos:end="53:56">*</operator> <operator pos:start="53:58" pos:end="53:58">(</operator><literal type="number" pos:start="53:59" pos:end="53:63">128</literal> <operator pos:start="53:63" pos:end="53:63">-</operator> <name pos:start="53:65" pos:end="53:68">size</name><operator pos:start="53:69" pos:end="53:69">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:41"><expr pos:start="55:9" pos:end="55:40"><call pos:start="55:9" pos:end="55:40"><name pos:start="55:9" pos:end="55:20">ff_rdft_calc</name><argument_list pos:start="55:21" pos:end="55:40">(<argument pos:start="55:22" pos:end="55:29"><expr pos:start="55:22" pos:end="55:29"><operator pos:start="55:22" pos:end="55:22">&amp;</operator><name pos:start="55:23" pos:end="55:29"><name pos:start="55:23" pos:end="55:23">s</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:29">rdft</name></name></expr></argument>, <argument pos:start="55:32" pos:end="55:39"><expr pos:start="55:32" pos:end="55:39"><name pos:start="55:32" pos:end="55:39">synth_pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:39"><expr pos:start="57:9" pos:end="57:38"><call pos:start="57:9" pos:end="57:38"><name pos:start="57:9" pos:end="57:20">ff_rdft_calc</name><argument_list pos:start="57:21" pos:end="57:38">(<argument pos:start="57:22" pos:end="57:29"><expr pos:start="57:22" pos:end="57:29"><operator pos:start="57:22" pos:end="57:22">&amp;</operator><name pos:start="57:23" pos:end="57:29"><name pos:start="57:23" pos:end="57:23">s</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:29">rdft</name></name></expr></argument>, <argument pos:start="57:32" pos:end="57:37"><expr pos:start="57:32" pos:end="57:37"><name pos:start="57:32" pos:end="57:37">coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:33"><expr pos:start="59:9" pos:end="59:32"><name pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:16">synth_pf</name><index pos:start="59:17" pos:end="59:19">[<expr pos:start="59:18" pos:end="59:18"><literal type="number" pos:start="59:18" pos:end="59:18">0</literal></expr>]</index></name> <operator pos:start="59:21" pos:end="59:22">*=</operator> <name pos:start="59:24" pos:end="59:32"><name pos:start="59:24" pos:end="59:29">coeffs</name><index pos:start="59:30" pos:end="59:32">[<expr pos:start="59:31" pos:end="59:31"><literal type="number" pos:start="59:31" pos:end="59:31">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:33"><expr pos:start="61:9" pos:end="61:32"><name pos:start="61:9" pos:end="61:19"><name pos:start="61:9" pos:end="61:16">synth_pf</name><index pos:start="61:17" pos:end="61:19">[<expr pos:start="61:18" pos:end="61:18"><literal type="number" pos:start="61:18" pos:end="61:18">1</literal></expr>]</index></name> <operator pos:start="61:21" pos:end="61:22">*=</operator> <name pos:start="61:24" pos:end="61:32"><name pos:start="61:24" pos:end="61:29">coeffs</name><index pos:start="61:30" pos:end="61:32">[<expr pos:start="61:31" pos:end="61:31"><literal type="number" pos:start="61:31" pos:end="61:31">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="63:9" pos:end="71:9">for <control pos:start="63:13" pos:end="63:33">(<init pos:start="63:14" pos:end="63:19"><expr pos:start="63:14" pos:end="63:18"><name pos:start="63:14" pos:end="63:14">n</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <literal type="number" pos:start="63:18" pos:end="63:18">1</literal></expr>;</init> <condition pos:start="63:21" pos:end="63:28"><expr pos:start="63:21" pos:end="63:27"><name pos:start="63:21" pos:end="63:21">n</name> <operator pos:start="63:23" pos:end="63:23">&lt;</operator> <literal type="number" pos:start="63:25" pos:end="63:27">128</literal></expr>;</condition> <incr pos:start="63:30" pos:end="63:32"><expr pos:start="63:30" pos:end="63:32"><name pos:start="63:30" pos:end="63:30">n</name><operator pos:start="63:31" pos:end="63:32">++</operator></expr></incr>)</control> <block pos:start="63:35" pos:end="71:9">{<block_content pos:start="65:13" pos:end="69:78">

            <decl_stmt pos:start="65:13" pos:end="65:65"><decl pos:start="65:13" pos:end="65:38"><type pos:start="65:13" pos:end="65:17"><name pos:start="65:13" pos:end="65:17">float</name></type> <name pos:start="65:19" pos:end="65:20">v1</name> <init pos:start="65:22" pos:end="65:38">= <expr pos:start="65:24" pos:end="65:38"><name pos:start="65:24" pos:end="65:38"><name pos:start="65:24" pos:end="65:31">synth_pf</name><index pos:start="65:32" pos:end="65:38">[<expr pos:start="65:33" pos:end="65:37"><name pos:start="65:33" pos:end="65:33">n</name> <operator pos:start="65:35" pos:end="65:35">*</operator> <literal type="number" pos:start="65:37" pos:end="65:37">2</literal></expr>]</index></name></expr></init></decl>, <decl pos:start="65:41" pos:end="65:64"><type ref="prev" pos:start="65:13" pos:end="65:17"/><name pos:start="65:41" pos:end="65:42">v2</name> <init pos:start="65:44" pos:end="65:64">= <expr pos:start="65:46" pos:end="65:64"><name pos:start="65:46" pos:end="65:64"><name pos:start="65:46" pos:end="65:53">synth_pf</name><index pos:start="65:54" pos:end="65:64">[<expr pos:start="65:55" pos:end="65:63"><name pos:start="65:55" pos:end="65:55">n</name> <operator pos:start="65:57" pos:end="65:57">*</operator> <literal type="number" pos:start="65:59" pos:end="65:61">2</literal> <operator pos:start="65:61" pos:end="65:61">+</operator> <literal type="number" pos:start="65:63" pos:end="65:63">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:78"><expr pos:start="67:13" pos:end="67:77"><name pos:start="67:13" pos:end="67:27"><name pos:start="67:13" pos:end="67:20">synth_pf</name><index pos:start="67:21" pos:end="67:27">[<expr pos:start="67:22" pos:end="67:26"><name pos:start="67:22" pos:end="67:22">n</name> <operator pos:start="67:24" pos:end="67:24">*</operator> <literal type="number" pos:start="67:26" pos:end="67:26">2</literal></expr>]</index></name>     <operator pos:start="67:33" pos:end="67:33">=</operator> <name pos:start="67:35" pos:end="67:36">v1</name> <operator pos:start="67:38" pos:end="67:38">*</operator> <name pos:start="67:40" pos:end="67:52"><name pos:start="67:40" pos:end="67:45">coeffs</name><index pos:start="67:46" pos:end="67:52">[<expr pos:start="67:47" pos:end="67:51"><name pos:start="67:47" pos:end="67:47">n</name> <operator pos:start="67:49" pos:end="67:49">*</operator> <literal type="number" pos:start="67:51" pos:end="67:51">2</literal></expr>]</index></name> <operator pos:start="67:54" pos:end="67:54">-</operator> <name pos:start="67:56" pos:end="67:57">v2</name> <operator pos:start="67:59" pos:end="67:59">*</operator> <name pos:start="67:61" pos:end="67:77"><name pos:start="67:61" pos:end="67:66">coeffs</name><index pos:start="67:67" pos:end="67:77">[<expr pos:start="67:68" pos:end="67:76"><name pos:start="67:68" pos:end="67:68">n</name> <operator pos:start="67:70" pos:end="67:70">*</operator> <literal type="number" pos:start="67:72" pos:end="67:74">2</literal> <operator pos:start="67:74" pos:end="67:74">+</operator> <literal type="number" pos:start="67:76" pos:end="67:76">1</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:78"><expr pos:start="69:13" pos:end="69:77"><name pos:start="69:13" pos:end="69:31"><name pos:start="69:13" pos:end="69:20">synth_pf</name><index pos:start="69:21" pos:end="69:31">[<expr pos:start="69:22" pos:end="69:30"><name pos:start="69:22" pos:end="69:22">n</name> <operator pos:start="69:24" pos:end="69:24">*</operator> <literal type="number" pos:start="69:26" pos:end="69:26">2</literal> <operator pos:start="69:28" pos:end="69:28">+</operator> <literal type="number" pos:start="69:30" pos:end="69:30">1</literal></expr>]</index></name> <operator pos:start="69:33" pos:end="69:33">=</operator> <name pos:start="69:35" pos:end="69:36">v2</name> <operator pos:start="69:38" pos:end="69:38">*</operator> <name pos:start="69:40" pos:end="69:52"><name pos:start="69:40" pos:end="69:45">coeffs</name><index pos:start="69:46" pos:end="69:52">[<expr pos:start="69:47" pos:end="69:51"><name pos:start="69:47" pos:end="69:47">n</name> <operator pos:start="69:49" pos:end="69:49">*</operator> <literal type="number" pos:start="69:51" pos:end="69:51">2</literal></expr>]</index></name> <operator pos:start="69:54" pos:end="69:54">+</operator> <name pos:start="69:56" pos:end="69:57">v1</name> <operator pos:start="69:59" pos:end="69:59">*</operator> <name pos:start="69:61" pos:end="69:77"><name pos:start="69:61" pos:end="69:66">coeffs</name><index pos:start="69:67" pos:end="69:77">[<expr pos:start="69:68" pos:end="69:76"><name pos:start="69:68" pos:end="69:68">n</name> <operator pos:start="69:70" pos:end="69:70">*</operator> <literal type="number" pos:start="69:72" pos:end="69:74">2</literal> <operator pos:start="69:74" pos:end="69:74">+</operator> <literal type="number" pos:start="69:76" pos:end="69:76">1</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="73:9" pos:end="73:42"><expr pos:start="73:9" pos:end="73:41"><call pos:start="73:9" pos:end="73:41"><name pos:start="73:9" pos:end="73:20">ff_rdft_calc</name><argument_list pos:start="73:21" pos:end="73:41">(<argument pos:start="73:22" pos:end="73:30"><expr pos:start="73:22" pos:end="73:30"><operator pos:start="73:22" pos:end="73:22">&amp;</operator><name pos:start="73:23" pos:end="73:30"><name pos:start="73:23" pos:end="73:23">s</name><operator pos:start="73:24" pos:end="73:25">-&gt;</operator><name pos:start="73:26" pos:end="73:30">irdft</name></name></expr></argument>, <argument pos:start="73:33" pos:end="73:40"><expr pos:start="73:33" pos:end="73:40"><name pos:start="73:33" pos:end="73:40">synth_pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:63">/* merge filter output with the history of previous runs */</comment>

    <if_stmt pos:start="81:5" pos:end="95:5"><if pos:start="81:5" pos:end="95:5">if <condition pos:start="81:8" pos:end="81:37">(<expr pos:start="81:9" pos:end="81:36"><name pos:start="81:9" pos:end="81:36"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:36">denoise_filter_cache_size</name></name></expr>)</condition> <block pos:start="81:39" pos:end="95:5">{<block_content pos:start="83:9" pos:end="93:83">

        <expr_stmt pos:start="83:9" pos:end="83:56"><expr pos:start="83:9" pos:end="83:55"><name pos:start="83:9" pos:end="83:11">lim</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:55"><name pos:start="83:15" pos:end="83:19">FFMIN</name><argument_list pos:start="83:20" pos:end="83:55">(<argument pos:start="83:21" pos:end="83:48"><expr pos:start="83:21" pos:end="83:48"><name pos:start="83:21" pos:end="83:48"><name pos:start="83:21" pos:end="83:21">s</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:48">denoise_filter_cache_size</name></name></expr></argument>, <argument pos:start="83:51" pos:end="83:54"><expr pos:start="83:51" pos:end="83:54"><name pos:start="83:51" pos:end="83:54">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="85:9" pos:end="87:54">for <control pos:start="85:13" pos:end="85:33">(<init pos:start="85:14" pos:end="85:19"><expr pos:start="85:14" pos:end="85:18"><name pos:start="85:14" pos:end="85:14">n</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <literal type="number" pos:start="85:18" pos:end="85:18">0</literal></expr>;</init> <condition pos:start="85:21" pos:end="85:28"><expr pos:start="85:21" pos:end="85:27"><name pos:start="85:21" pos:end="85:21">n</name> <operator pos:start="85:23" pos:end="85:23">&lt;</operator> <name pos:start="85:25" pos:end="85:27">lim</name></expr>;</condition> <incr pos:start="85:30" pos:end="85:32"><expr pos:start="85:30" pos:end="85:32"><name pos:start="85:30" pos:end="85:30">n</name><operator pos:start="85:31" pos:end="85:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="87:13" pos:end="87:54"><block_content pos:start="87:13" pos:end="87:54">

            <expr_stmt pos:start="87:13" pos:end="87:54"><expr pos:start="87:13" pos:end="87:53"><name pos:start="87:13" pos:end="87:23"><name pos:start="87:13" pos:end="87:20">synth_pf</name><index pos:start="87:21" pos:end="87:23">[<expr pos:start="87:22" pos:end="87:22"><name pos:start="87:22" pos:end="87:22">n</name></expr>]</index></name> <operator pos:start="87:25" pos:end="87:26">+=</operator> <name pos:start="87:28" pos:end="87:53"><name pos:start="87:28" pos:end="87:28">s</name><operator pos:start="87:29" pos:end="87:30">-&gt;</operator><name pos:start="87:31" pos:end="87:50">denoise_filter_cache</name><index pos:start="87:51" pos:end="87:53">[<expr pos:start="87:52" pos:end="87:52"><name pos:start="87:52" pos:end="87:52">n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="89:9" pos:end="89:44"><expr pos:start="89:9" pos:end="89:43"><name pos:start="89:9" pos:end="89:36"><name pos:start="89:9" pos:end="89:9">s</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:36">denoise_filter_cache_size</name></name> <operator pos:start="89:38" pos:end="89:39">-=</operator> <name pos:start="89:41" pos:end="89:43">lim</name></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="93:83"><expr pos:start="91:9" pos:end="93:82"><call pos:start="91:9" pos:end="93:82"><name pos:start="91:9" pos:end="91:15">memmove</name><argument_list pos:start="91:16" pos:end="93:82">(<argument pos:start="91:17" pos:end="91:39"><expr pos:start="91:17" pos:end="91:39"><name pos:start="91:17" pos:end="91:39"><name pos:start="91:17" pos:end="91:17">s</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:39">denoise_filter_cache</name></name></expr></argument>, <argument pos:start="91:42" pos:end="91:71"><expr pos:start="91:42" pos:end="91:71"><operator pos:start="91:42" pos:end="91:42">&amp;</operator><name pos:start="91:43" pos:end="91:71"><name pos:start="91:43" pos:end="91:43">s</name><operator pos:start="91:44" pos:end="91:45">-&gt;</operator><name pos:start="91:46" pos:end="91:65">denoise_filter_cache</name><index pos:start="91:66" pos:end="91:71">[<expr pos:start="91:67" pos:end="91:70"><name pos:start="91:67" pos:end="91:70">size</name></expr>]</index></name></expr></argument>,

                <argument pos:start="93:17" pos:end="93:81"><expr pos:start="93:17" pos:end="93:81"><sizeof pos:start="93:17" pos:end="93:50">sizeof<argument_list pos:start="93:23" pos:end="93:50">(<argument pos:start="93:24" pos:end="93:49"><expr pos:start="93:24" pos:end="93:49"><name pos:start="93:24" pos:end="93:49"><name pos:start="93:24" pos:end="93:24">s</name><operator pos:start="93:25" pos:end="93:26">-&gt;</operator><name pos:start="93:27" pos:end="93:46">denoise_filter_cache</name><index pos:start="93:47" pos:end="93:49">[<expr pos:start="93:48" pos:end="93:48"><literal type="number" pos:start="93:48" pos:end="93:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator pos:start="93:52" pos:end="93:52">*</operator> <name pos:start="93:54" pos:end="93:81"><name pos:start="93:54" pos:end="93:54">s</name><operator pos:start="93:55" pos:end="93:56">-&gt;</operator><name pos:start="93:57" pos:end="93:81">denoise_filter_cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:70">/* move remainder of filter output into a cache for future runs */</comment>

    <if_stmt pos:start="101:5" pos:end="119:5"><if pos:start="101:5" pos:end="119:5">if <condition pos:start="101:8" pos:end="101:37">(<expr pos:start="101:9" pos:end="101:36"><name pos:start="101:9" pos:end="101:16">fcb_type</name> <operator pos:start="101:18" pos:end="101:19">!=</operator> <name pos:start="101:21" pos:end="101:36">FCB_TYPE_SILENCE</name></expr>)</condition> <block pos:start="101:39" pos:end="119:5">{<block_content pos:start="103:9" pos:end="117:9">

        <expr_stmt pos:start="103:9" pos:end="103:61"><expr pos:start="103:9" pos:end="103:60"><name pos:start="103:9" pos:end="103:11">lim</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="103:60"><name pos:start="103:15" pos:end="103:19">FFMIN</name><argument_list pos:start="103:20" pos:end="103:60">(<argument pos:start="103:21" pos:end="103:29"><expr pos:start="103:21" pos:end="103:29"><name pos:start="103:21" pos:end="103:29">remainder</name></expr></argument>, <argument pos:start="103:32" pos:end="103:59"><expr pos:start="103:32" pos:end="103:59"><name pos:start="103:32" pos:end="103:59"><name pos:start="103:32" pos:end="103:32">s</name><operator pos:start="103:33" pos:end="103:34">-&gt;</operator><name pos:start="103:35" pos:end="103:59">denoise_filter_cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="105:9" pos:end="107:61">for <control pos:start="105:13" pos:end="105:33">(<init pos:start="105:14" pos:end="105:19"><expr pos:start="105:14" pos:end="105:18"><name pos:start="105:14" pos:end="105:14">n</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <literal type="number" pos:start="105:18" pos:end="105:18">0</literal></expr>;</init> <condition pos:start="105:21" pos:end="105:28"><expr pos:start="105:21" pos:end="105:27"><name pos:start="105:21" pos:end="105:21">n</name> <operator pos:start="105:23" pos:end="105:23">&lt;</operator> <name pos:start="105:25" pos:end="105:27">lim</name></expr>;</condition> <incr pos:start="105:30" pos:end="105:32"><expr pos:start="105:30" pos:end="105:32"><name pos:start="105:30" pos:end="105:30">n</name><operator pos:start="105:31" pos:end="105:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="107:13" pos:end="107:61"><block_content pos:start="107:13" pos:end="107:61">

            <expr_stmt pos:start="107:13" pos:end="107:61"><expr pos:start="107:13" pos:end="107:60"><name pos:start="107:13" pos:end="107:38"><name pos:start="107:13" pos:end="107:13">s</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:35">denoise_filter_cache</name><index pos:start="107:36" pos:end="107:38">[<expr pos:start="107:37" pos:end="107:37"><name pos:start="107:37" pos:end="107:37">n</name></expr>]</index></name> <operator pos:start="107:40" pos:end="107:41">+=</operator> <name pos:start="107:43" pos:end="107:60"><name pos:start="107:43" pos:end="107:50">synth_pf</name><index pos:start="107:51" pos:end="107:60">[<expr pos:start="107:52" pos:end="107:59"><name pos:start="107:52" pos:end="107:55">size</name> <operator pos:start="107:57" pos:end="107:57">+</operator> <name pos:start="107:59" pos:end="107:59">n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <if_stmt pos:start="109:9" pos:end="117:9"><if pos:start="109:9" pos:end="117:9">if <condition pos:start="109:12" pos:end="109:28">(<expr pos:start="109:13" pos:end="109:27"><name pos:start="109:13" pos:end="109:15">lim</name> <operator pos:start="109:17" pos:end="109:17">&lt;</operator> <name pos:start="109:19" pos:end="109:27">remainder</name></expr>)</condition> <block pos:start="109:30" pos:end="117:9">{<block_content pos:start="111:13" pos:end="115:53">

            <expr_stmt pos:start="111:13" pos:end="113:75"><expr pos:start="111:13" pos:end="113:74"><call pos:start="111:13" pos:end="113:74"><name pos:start="111:13" pos:end="111:18">memcpy</name><argument_list pos:start="111:19" pos:end="113:74">(<argument pos:start="111:20" pos:end="111:48"><expr pos:start="111:20" pos:end="111:48"><operator pos:start="111:20" pos:end="111:20">&amp;</operator><name pos:start="111:21" pos:end="111:48"><name pos:start="111:21" pos:end="111:21">s</name><operator pos:start="111:22" pos:end="111:23">-&gt;</operator><name pos:start="111:24" pos:end="111:43">denoise_filter_cache</name><index pos:start="111:44" pos:end="111:48">[<expr pos:start="111:45" pos:end="111:47"><name pos:start="111:45" pos:end="111:47">lim</name></expr>]</index></name></expr></argument>, <argument pos:start="111:51" pos:end="111:71"><expr pos:start="111:51" pos:end="111:71"><operator pos:start="111:51" pos:end="111:51">&amp;</operator><name pos:start="111:52" pos:end="111:71"><name pos:start="111:52" pos:end="111:59">synth_pf</name><index pos:start="111:60" pos:end="111:71">[<expr pos:start="111:61" pos:end="111:70"><name pos:start="111:61" pos:end="111:64">size</name> <operator pos:start="111:66" pos:end="111:66">+</operator> <name pos:start="111:68" pos:end="111:70">lim</name></expr>]</index></name></expr></argument>,

                   <argument pos:start="113:20" pos:end="113:73"><expr pos:start="113:20" pos:end="113:73"><sizeof pos:start="113:20" pos:end="113:53">sizeof<argument_list pos:start="113:26" pos:end="113:53">(<argument pos:start="113:27" pos:end="113:52"><expr pos:start="113:27" pos:end="113:52"><name pos:start="113:27" pos:end="113:52"><name pos:start="113:27" pos:end="113:27">s</name><operator pos:start="113:28" pos:end="113:29">-&gt;</operator><name pos:start="113:30" pos:end="113:49">denoise_filter_cache</name><index pos:start="113:50" pos:end="113:52">[<expr pos:start="113:51" pos:end="113:51"><literal type="number" pos:start="113:51" pos:end="113:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator pos:start="113:55" pos:end="113:55">*</operator> <operator pos:start="113:57" pos:end="113:57">(</operator><name pos:start="113:58" pos:end="113:66">remainder</name> <operator pos:start="113:68" pos:end="113:68">-</operator> <name pos:start="113:70" pos:end="113:72">lim</name><operator pos:start="113:73" pos:end="113:73">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:53"><expr pos:start="115:13" pos:end="115:52"><name pos:start="115:13" pos:end="115:40"><name pos:start="115:13" pos:end="115:13">s</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:40">denoise_filter_cache_size</name></name> <operator pos:start="115:42" pos:end="115:42">=</operator> <name pos:start="115:44" pos:end="115:52">remainder</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
