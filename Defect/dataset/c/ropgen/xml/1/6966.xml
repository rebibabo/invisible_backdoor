<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6966.c" pos:tabs="8"><function pos:start="1:1" pos:end="577:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:31">mpeg4_decode_picture_header</name><parameter_list pos:start="1:32" pos:end="1:51">(<parameter pos:start="1:33" pos:end="1:50"><decl pos:start="1:33" pos:end="1:50"><type pos:start="1:33" pos:end="1:48"><name pos:start="1:33" pos:end="1:46">MpegEncContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type> <name pos:start="1:50" pos:end="1:50">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="577:1">{<block_content pos:start="5:5" pos:end="575:14">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:17">time_incr</name></decl>, <decl pos:start="5:20" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:20" pos:end="5:28">startcode</name></decl>, <decl pos:start="5:31" pos:end="5:35"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:31" pos:end="5:35">state</name></decl>, <decl pos:start="5:38" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:38" pos:end="5:38">v</name></decl>;</decl_stmt>



 <label pos:start="9:2" pos:end="9:6"><name pos:start="9:2" pos:end="9:5">redo</name>:</label>

    <comment type="block" pos:start="11:5" pos:end="11:32">/* search next start code */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:27"><expr pos:start="13:5" pos:end="13:26"><call pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:18">align_get_bits</name><argument_list pos:start="13:19" pos:end="13:26">(<argument pos:start="13:20" pos:end="13:25"><expr pos:start="13:20" pos:end="13:25"><operator pos:start="13:20" pos:end="13:20">&amp;</operator><name pos:start="13:21" pos:end="13:25"><name pos:start="13:21" pos:end="13:21">s</name><operator pos:start="13:22" pos:end="13:23">-&gt;</operator><name pos:start="13:24" pos:end="13:25">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:17"><expr pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:9">state</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <literal type="number" pos:start="15:13" pos:end="15:16">0xff</literal></expr>;</expr_stmt>

    <for pos:start="17:5" pos:end="41:5">for<control pos:start="17:8" pos:end="17:11">(<init pos:start="17:9" pos:end="17:9">;</init><condition pos:start="17:10" pos:end="17:10">;</condition><incr/>)</control> <block pos:start="17:13" pos:end="41:5">{<block_content pos:start="19:9" pos:end="39:9">

        <expr_stmt pos:start="19:9" pos:end="19:32"><expr pos:start="19:9" pos:end="19:31"><name pos:start="19:9" pos:end="19:9">v</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <call pos:start="19:13" pos:end="19:31"><name pos:start="19:13" pos:end="19:20">get_bits</name><argument_list pos:start="19:21" pos:end="19:31">(<argument pos:start="19:22" pos:end="19:27"><expr pos:start="19:22" pos:end="19:27"><operator pos:start="19:22" pos:end="19:22">&amp;</operator><name pos:start="19:23" pos:end="19:27"><name pos:start="19:23" pos:end="19:23">s</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:27">gb</name></name></expr></argument>, <argument pos:start="19:30" pos:end="19:30"><expr pos:start="19:30" pos:end="19:30"><literal type="number" pos:start="19:30" pos:end="19:30">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="29:9"><if pos:start="21:9" pos:end="29:9">if <condition pos:start="21:12" pos:end="21:30">(<expr pos:start="21:13" pos:end="21:29"><name pos:start="21:13" pos:end="21:17">state</name> <operator pos:start="21:19" pos:end="21:20">==</operator> <literal type="number" pos:start="21:22" pos:end="21:29">0x000001</literal></expr>)</condition> <block pos:start="21:32" pos:end="29:9">{<block_content pos:start="23:13" pos:end="27:18">

            <expr_stmt pos:start="23:13" pos:end="23:50"><expr pos:start="23:13" pos:end="23:49"><name pos:start="23:13" pos:end="23:17">state</name> <operator pos:start="23:19" pos:end="23:19">=</operator> <operator pos:start="23:21" pos:end="23:21">(</operator><operator pos:start="23:22" pos:end="23:22">(</operator><name pos:start="23:23" pos:end="23:27">state</name> <operator pos:start="23:29" pos:end="23:30">&lt;&lt;</operator> <literal type="number" pos:start="23:32" pos:end="23:32">8</literal><operator pos:start="23:33" pos:end="23:33">)</operator> <operator pos:start="23:35" pos:end="23:35">|</operator> <name pos:start="23:37" pos:end="23:37">v</name><operator pos:start="23:38" pos:end="23:38">)</operator> <operator pos:start="23:40" pos:end="23:40">&amp;</operator> <literal type="number" pos:start="23:42" pos:end="23:49">0xffffff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:30"><expr pos:start="25:13" pos:end="25:29"><name pos:start="25:13" pos:end="25:21">startcode</name> <operator pos:start="25:23" pos:end="25:23">=</operator> <name pos:start="25:25" pos:end="25:29">state</name></expr>;</expr_stmt>

            <break pos:start="27:13" pos:end="27:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:46"><expr pos:start="31:9" pos:end="31:45"><name pos:start="31:9" pos:end="31:13">state</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <operator pos:start="31:17" pos:end="31:17">(</operator><operator pos:start="31:18" pos:end="31:18">(</operator><name pos:start="31:19" pos:end="31:23">state</name> <operator pos:start="31:25" pos:end="31:26">&lt;&lt;</operator> <literal type="number" pos:start="31:28" pos:end="31:28">8</literal><operator pos:start="31:29" pos:end="31:29">)</operator> <operator pos:start="31:31" pos:end="31:31">|</operator> <name pos:start="31:33" pos:end="31:33">v</name><operator pos:start="31:34" pos:end="31:34">)</operator> <operator pos:start="31:36" pos:end="31:36">&amp;</operator> <literal type="number" pos:start="31:38" pos:end="31:45">0xffffff</literal></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if<condition pos:start="33:11" pos:end="33:53">( <expr pos:start="33:13" pos:end="33:52"><call pos:start="33:13" pos:end="33:34"><name pos:start="33:13" pos:end="33:26">get_bits_count</name><argument_list pos:start="33:27" pos:end="33:34">(<argument pos:start="33:28" pos:end="33:33"><expr pos:start="33:28" pos:end="33:33"><operator pos:start="33:28" pos:end="33:28">&amp;</operator><name pos:start="33:29" pos:end="33:33"><name pos:start="33:29" pos:end="33:29">s</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:33">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="33:36" pos:end="33:36">&gt;</operator> <name pos:start="33:38" pos:end="33:47"><name pos:start="33:38" pos:end="33:38">s</name><operator pos:start="33:39" pos:end="33:40">-&gt;</operator><name pos:start="33:41" pos:end="33:42">gb</name><operator pos:start="33:43" pos:end="33:43">.</operator><name pos:start="33:44" pos:end="33:47">size</name></name><operator pos:start="33:48" pos:end="33:48">*</operator><literal type="number" pos:start="33:49" pos:end="33:50">8</literal><operator pos:start="33:50" pos:end="33:50">-</operator><literal type="number" pos:start="33:51" pos:end="33:52">32</literal></expr>)</condition><block pos:start="33:54" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:22">

            <expr_stmt pos:start="35:13" pos:end="35:47"><expr pos:start="35:13" pos:end="35:46"><call pos:start="35:13" pos:end="35:46"><name pos:start="35:13" pos:end="35:18">printf</name><argument_list pos:start="35:19" pos:end="35:46">(<argument pos:start="35:20" pos:end="35:45"><expr pos:start="35:20" pos:end="35:45"><literal type="string" pos:start="35:20" pos:end="35:45">"no VOP startcode found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="37:13" pos:end="37:22">return <expr pos:start="37:20" pos:end="37:21"><operator pos:start="37:20" pos:end="37:20">-</operator><literal type="number" pos:start="37:21" pos:end="37:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

<comment type="line" pos:start="43:1" pos:end="43:65">//printf("startcode %X %d\n", startcode, get_bits_count(&amp;s-&gt;gb));</comment>

    <if_stmt pos:start="45:5" pos:end="369:5"><if pos:start="45:5" pos:end="305:5">if <condition pos:start="45:8" pos:end="45:27">(<expr pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:17">startcode</name> <operator pos:start="45:19" pos:end="45:20">==</operator> <literal type="number" pos:start="45:22" pos:end="45:26">0x120</literal></expr>)</condition> <block pos:start="45:29" pos:end="305:5">{<block_content pos:start="47:9" pos:end="303:18"> <comment type="line" pos:start="45:31" pos:end="45:51">// Video Object Layer</comment>

        <decl_stmt pos:start="47:9" pos:end="47:37"><decl pos:start="47:9" pos:end="47:17"><type pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">int</name></type> <name pos:start="47:13" pos:end="47:17">width</name></decl>, <decl pos:start="47:20" pos:end="47:25"><type ref="prev" pos:start="47:9" pos:end="47:11"/><name pos:start="47:20" pos:end="47:25">height</name></decl>, <decl pos:start="47:28" pos:end="47:36"><type ref="prev" pos:start="47:9" pos:end="47:11"/><name pos:start="47:28" pos:end="47:36">vo_ver_id</name></decl>;</decl_stmt>



        <comment type="block" pos:start="51:9" pos:end="51:24">/* vol header */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:29"><expr pos:start="53:9" pos:end="53:28"><call pos:start="53:9" pos:end="53:28"><name pos:start="53:9" pos:end="53:17">skip_bits</name><argument_list pos:start="53:18" pos:end="53:28">(<argument pos:start="53:19" pos:end="53:24"><expr pos:start="53:19" pos:end="53:24"><operator pos:start="53:19" pos:end="53:19">&amp;</operator><name pos:start="53:20" pos:end="53:24"><name pos:start="53:20" pos:end="53:20">s</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:24">gb</name></name></expr></argument>, <argument pos:start="53:27" pos:end="53:27"><expr pos:start="53:27" pos:end="53:27"><literal type="number" pos:start="53:27" pos:end="53:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="53:31" pos:end="53:49">/* random access */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:29"><expr pos:start="55:9" pos:end="55:28"><call pos:start="55:9" pos:end="55:28"><name pos:start="55:9" pos:end="55:17">skip_bits</name><argument_list pos:start="55:18" pos:end="55:28">(<argument pos:start="55:19" pos:end="55:24"><expr pos:start="55:19" pos:end="55:24"><operator pos:start="55:19" pos:end="55:19">&amp;</operator><name pos:start="55:20" pos:end="55:24"><name pos:start="55:20" pos:end="55:20">s</name><operator pos:start="55:21" pos:end="55:22">-&gt;</operator><name pos:start="55:23" pos:end="55:24">gb</name></name></expr></argument>, <argument pos:start="55:27" pos:end="55:27"><expr pos:start="55:27" pos:end="55:27"><literal type="number" pos:start="55:27" pos:end="55:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="55:31" pos:end="55:43">/* vo_type */</comment>

        <if_stmt pos:start="57:9" pos:end="67:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:35">(<expr pos:start="57:13" pos:end="57:34"><call pos:start="57:13" pos:end="57:29"><name pos:start="57:13" pos:end="57:21">get_bits1</name><argument_list pos:start="57:22" pos:end="57:29">(<argument pos:start="57:23" pos:end="57:28"><expr pos:start="57:23" pos:end="57:28"><operator pos:start="57:23" pos:end="57:23">&amp;</operator><name pos:start="57:24" pos:end="57:28"><name pos:start="57:24" pos:end="57:24">s</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:28">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="57:31" pos:end="57:32">!=</operator> <literal type="number" pos:start="57:34" pos:end="57:34">0</literal></expr>)</condition> <block pos:start="57:37" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:33"> <comment type="block" pos:start="57:39" pos:end="57:52">/* is_ol_id */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:44"><expr pos:start="59:13" pos:end="59:43"><name pos:start="59:13" pos:end="59:21">vo_ver_id</name> <operator pos:start="59:23" pos:end="59:23">=</operator> <call pos:start="59:25" pos:end="59:43"><name pos:start="59:25" pos:end="59:32">get_bits</name><argument_list pos:start="59:33" pos:end="59:43">(<argument pos:start="59:34" pos:end="59:39"><expr pos:start="59:34" pos:end="59:39"><operator pos:start="59:34" pos:end="59:34">&amp;</operator><name pos:start="59:35" pos:end="59:39"><name pos:start="59:35" pos:end="59:35">s</name><operator pos:start="59:36" pos:end="59:37">-&gt;</operator><name pos:start="59:38" pos:end="59:39">gb</name></name></expr></argument>, <argument pos:start="59:42" pos:end="59:42"><expr pos:start="59:42" pos:end="59:42"><literal type="number" pos:start="59:42" pos:end="59:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="59:46" pos:end="59:60">/* vo_ver_id */</comment>

            <expr_stmt pos:start="61:13" pos:end="61:33"><expr pos:start="61:13" pos:end="61:32"><call pos:start="61:13" pos:end="61:32"><name pos:start="61:13" pos:end="61:21">skip_bits</name><argument_list pos:start="61:22" pos:end="61:32">(<argument pos:start="61:23" pos:end="61:28"><expr pos:start="61:23" pos:end="61:28"><operator pos:start="61:23" pos:end="61:23">&amp;</operator><name pos:start="61:24" pos:end="61:28"><name pos:start="61:24" pos:end="61:24">s</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:28">gb</name></name></expr></argument>, <argument pos:start="61:31" pos:end="61:31"><expr pos:start="61:31" pos:end="61:31"><literal type="number" pos:start="61:31" pos:end="61:31">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="61:35" pos:end="61:51">/* vo_priority */</comment>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="67:9">else <block pos:start="63:16" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:26">

            <expr_stmt pos:start="65:13" pos:end="65:26"><expr pos:start="65:13" pos:end="65:25"><name pos:start="65:13" pos:end="65:21">vo_ver_id</name> <operator pos:start="65:23" pos:end="65:23">=</operator> <literal type="number" pos:start="65:25" pos:end="65:25">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        

        <expr_stmt pos:start="71:9" pos:end="71:50"><expr pos:start="71:9" pos:end="71:49"><name pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:28">aspect_ratio_info</name></name><operator pos:start="71:29" pos:end="71:29">=</operator> <call pos:start="71:31" pos:end="71:49"><name pos:start="71:31" pos:end="71:38">get_bits</name><argument_list pos:start="71:39" pos:end="71:49">(<argument pos:start="71:40" pos:end="71:45"><expr pos:start="71:40" pos:end="71:45"><operator pos:start="71:40" pos:end="71:40">&amp;</operator><name pos:start="71:41" pos:end="71:45"><name pos:start="71:41" pos:end="71:41">s</name><operator pos:start="71:42" pos:end="71:43">-&gt;</operator><name pos:start="71:44" pos:end="71:45">gb</name></name></expr></argument>, <argument pos:start="71:48" pos:end="71:48"><expr pos:start="71:48" pos:end="71:48"><literal type="number" pos:start="71:48" pos:end="71:48">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="73:9" pos:end="79:9"><if pos:start="73:9" pos:end="79:9">if<condition pos:start="73:11" pos:end="73:48">(<expr pos:start="73:12" pos:end="73:47"><name pos:start="73:12" pos:end="73:31"><name pos:start="73:12" pos:end="73:12">s</name><operator pos:start="73:13" pos:end="73:14">-&gt;</operator><name pos:start="73:15" pos:end="73:31">aspect_ratio_info</name></name> <operator pos:start="73:33" pos:end="73:34">==</operator> <name pos:start="73:36" pos:end="73:47">EXTENDET_PAR</name></expr>)</condition><block pos:start="73:49" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:33">

            <expr_stmt pos:start="75:13" pos:end="75:33"><expr pos:start="75:13" pos:end="75:32"><call pos:start="75:13" pos:end="75:32"><name pos:start="75:13" pos:end="75:21">skip_bits</name><argument_list pos:start="75:22" pos:end="75:32">(<argument pos:start="75:23" pos:end="75:28"><expr pos:start="75:23" pos:end="75:28"><operator pos:start="75:23" pos:end="75:23">&amp;</operator><name pos:start="75:24" pos:end="75:28"><name pos:start="75:24" pos:end="75:24">s</name><operator pos:start="75:25" pos:end="75:26">-&gt;</operator><name pos:start="75:27" pos:end="75:28">gb</name></name></expr></argument>, <argument pos:start="75:31" pos:end="75:31"><expr pos:start="75:31" pos:end="75:31"><literal type="number" pos:start="75:31" pos:end="75:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="75:35" pos:end="75:45">//par_width</comment>

            <expr_stmt pos:start="77:13" pos:end="77:33"><expr pos:start="77:13" pos:end="77:32"><call pos:start="77:13" pos:end="77:32"><name pos:start="77:13" pos:end="77:21">skip_bits</name><argument_list pos:start="77:22" pos:end="77:32">(<argument pos:start="77:23" pos:end="77:28"><expr pos:start="77:23" pos:end="77:28"><operator pos:start="77:23" pos:end="77:23">&amp;</operator><name pos:start="77:24" pos:end="77:28"><name pos:start="77:24" pos:end="77:24">s</name><operator pos:start="77:25" pos:end="77:26">-&gt;</operator><name pos:start="77:27" pos:end="77:28">gb</name></name></expr></argument>, <argument pos:start="77:31" pos:end="77:31"><expr pos:start="77:31" pos:end="77:31"><literal type="number" pos:start="77:31" pos:end="77:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="77:35" pos:end="77:47">// par_height</comment>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="81:9" pos:end="87:9"><if pos:start="81:9" pos:end="87:9">if<condition pos:start="81:11" pos:end="81:29">(<expr pos:start="81:12" pos:end="81:28"><call pos:start="81:12" pos:end="81:28"><name pos:start="81:12" pos:end="81:20">get_bits1</name><argument_list pos:start="81:21" pos:end="81:28">(<argument pos:start="81:22" pos:end="81:27"><expr pos:start="81:22" pos:end="81:27"><operator pos:start="81:22" pos:end="81:22">&amp;</operator><name pos:start="81:23" pos:end="81:27"><name pos:start="81:23" pos:end="81:23">s</name><operator pos:start="81:24" pos:end="81:25">-&gt;</operator><name pos:start="81:26" pos:end="81:27">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="81:30" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:22"> <comment type="block" pos:start="81:32" pos:end="81:58">/* vol control parameter */</comment>

            <expr_stmt pos:start="83:13" pos:end="83:60"><expr pos:start="83:13" pos:end="83:59"><call pos:start="83:13" pos:end="83:59"><name pos:start="83:13" pos:end="83:18">printf</name><argument_list pos:start="83:19" pos:end="83:59">(<argument pos:start="83:20" pos:end="83:58"><expr pos:start="83:20" pos:end="83:58"><literal type="string" pos:start="83:20" pos:end="83:58">"vol control parameter not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="85:13" pos:end="85:22">return <expr pos:start="85:20" pos:end="85:21"><operator pos:start="85:20" pos:end="85:20">-</operator><literal type="number" pos:start="85:21" pos:end="85:21">1</literal></expr>;</return>   

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:39"><expr pos:start="89:9" pos:end="89:38"><name pos:start="89:9" pos:end="89:16"><name pos:start="89:9" pos:end="89:9">s</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:16">shape</name></name> <operator pos:start="89:18" pos:end="89:18">=</operator> <call pos:start="89:20" pos:end="89:38"><name pos:start="89:20" pos:end="89:27">get_bits</name><argument_list pos:start="89:28" pos:end="89:38">(<argument pos:start="89:29" pos:end="89:34"><expr pos:start="89:29" pos:end="89:34"><operator pos:start="89:29" pos:end="89:29">&amp;</operator><name pos:start="89:30" pos:end="89:34"><name pos:start="89:30" pos:end="89:30">s</name><operator pos:start="89:31" pos:end="89:32">-&gt;</operator><name pos:start="89:33" pos:end="89:34">gb</name></name></expr></argument>, <argument pos:start="89:37" pos:end="89:37"><expr pos:start="89:37" pos:end="89:37"><literal type="number" pos:start="89:37" pos:end="89:37">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="89:41" pos:end="89:55">/* vol shape */</comment>

        <if_stmt pos:start="91:9" pos:end="91:78"><if pos:start="91:9" pos:end="91:78">if<condition pos:start="91:11" pos:end="91:34">(<expr pos:start="91:12" pos:end="91:33"><name pos:start="91:12" pos:end="91:19"><name pos:start="91:12" pos:end="91:12">s</name><operator pos:start="91:13" pos:end="91:14">-&gt;</operator><name pos:start="91:15" pos:end="91:19">shape</name></name> <operator pos:start="91:21" pos:end="91:22">!=</operator> <name pos:start="91:24" pos:end="91:33">RECT_SHAPE</name></expr>)</condition><block type="pseudo" pos:start="91:36" pos:end="91:78"><block_content pos:start="91:36" pos:end="91:78"> <expr_stmt pos:start="91:36" pos:end="91:78"><expr pos:start="91:36" pos:end="91:77"><call pos:start="91:36" pos:end="91:77"><name pos:start="91:36" pos:end="91:41">printf</name><argument_list pos:start="91:42" pos:end="91:77">(<argument pos:start="91:43" pos:end="91:76"><expr pos:start="91:43" pos:end="91:76"><literal type="string" pos:start="91:43" pos:end="91:76">"only rectangular vol supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="93:9" pos:end="99:9"><if pos:start="93:9" pos:end="99:9">if<condition pos:start="93:11" pos:end="93:52">(<expr pos:start="93:12" pos:end="93:51"><name pos:start="93:12" pos:end="93:19"><name pos:start="93:12" pos:end="93:12">s</name><operator pos:start="93:13" pos:end="93:14">-&gt;</operator><name pos:start="93:15" pos:end="93:19">shape</name></name> <operator pos:start="93:21" pos:end="93:22">==</operator> <name pos:start="93:24" pos:end="93:33">GRAY_SHAPE</name> <operator pos:start="93:35" pos:end="93:36">&amp;&amp;</operator> <name pos:start="93:38" pos:end="93:46">vo_ver_id</name> <operator pos:start="93:48" pos:end="93:49">!=</operator> <literal type="number" pos:start="93:51" pos:end="93:51">1</literal></expr>)</condition><block pos:start="93:53" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:33">

            <expr_stmt pos:start="95:13" pos:end="95:49"><expr pos:start="95:13" pos:end="95:48"><call pos:start="95:13" pos:end="95:48"><name pos:start="95:13" pos:end="95:18">printf</name><argument_list pos:start="95:19" pos:end="95:48">(<argument pos:start="95:20" pos:end="95:47"><expr pos:start="95:20" pos:end="95:47"><literal type="string" pos:start="95:20" pos:end="95:47">"Gray shape not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:33"><expr pos:start="97:13" pos:end="97:32"><call pos:start="97:13" pos:end="97:32"><name pos:start="97:13" pos:end="97:21">skip_bits</name><argument_list pos:start="97:22" pos:end="97:32">(<argument pos:start="97:23" pos:end="97:28"><expr pos:start="97:23" pos:end="97:28"><operator pos:start="97:23" pos:end="97:23">&amp;</operator><name pos:start="97:24" pos:end="97:28"><name pos:start="97:24" pos:end="97:24">s</name><operator pos:start="97:25" pos:end="97:26">-&gt;</operator><name pos:start="97:27" pos:end="97:28">gb</name></name></expr></argument>, <argument pos:start="97:31" pos:end="97:31"><expr pos:start="97:31" pos:end="97:31"><literal type="number" pos:start="97:31" pos:end="97:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="97:36" pos:end="97:71">//video_object_layer_shape_extension</comment>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:27"><expr pos:start="103:9" pos:end="103:26"><call pos:start="103:9" pos:end="103:26"><name pos:start="103:9" pos:end="103:18">skip_bits1</name><argument_list pos:start="103:19" pos:end="103:26">(<argument pos:start="103:20" pos:end="103:25"><expr pos:start="103:20" pos:end="103:25"><operator pos:start="103:20" pos:end="103:20">&amp;</operator><name pos:start="103:21" pos:end="103:25"><name pos:start="103:21" pos:end="103:21">s</name><operator pos:start="103:22" pos:end="103:23">-&gt;</operator><name pos:start="103:24" pos:end="103:25">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="103:31" pos:end="103:42">/* marker */</comment>

        

        <expr_stmt pos:start="107:9" pos:end="107:60"><expr pos:start="107:9" pos:end="107:59"><name pos:start="107:9" pos:end="107:36"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:36">time_increment_resolution</name></name> <operator pos:start="107:38" pos:end="107:38">=</operator> <call pos:start="107:40" pos:end="107:59"><name pos:start="107:40" pos:end="107:47">get_bits</name><argument_list pos:start="107:48" pos:end="107:59">(<argument pos:start="107:49" pos:end="107:54"><expr pos:start="107:49" pos:end="107:54"><operator pos:start="107:49" pos:end="107:49">&amp;</operator><name pos:start="107:50" pos:end="107:54"><name pos:start="107:50" pos:end="107:50">s</name><operator pos:start="107:51" pos:end="107:52">-&gt;</operator><name pos:start="107:53" pos:end="107:54">gb</name></name></expr></argument>, <argument pos:start="107:57" pos:end="107:58"><expr pos:start="107:57" pos:end="107:58"><literal type="number" pos:start="107:57" pos:end="107:58">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:79"><expr pos:start="109:9" pos:end="109:78"><name pos:start="109:9" pos:end="109:30"><name pos:start="109:9" pos:end="109:9">s</name><operator pos:start="109:10" pos:end="109:11">-&gt;</operator><name pos:start="109:12" pos:end="109:30">time_increment_bits</name></name> <operator pos:start="109:32" pos:end="109:32">=</operator> <call pos:start="109:34" pos:end="109:74"><name pos:start="109:34" pos:end="109:40">av_log2</name><argument_list pos:start="109:41" pos:end="109:74">(<argument pos:start="109:42" pos:end="109:73"><expr pos:start="109:42" pos:end="109:73"><name pos:start="109:42" pos:end="109:69"><name pos:start="109:42" pos:end="109:42">s</name><operator pos:start="109:43" pos:end="109:44">-&gt;</operator><name pos:start="109:45" pos:end="109:69">time_increment_resolution</name></name> <operator pos:start="109:71" pos:end="109:71">-</operator> <literal type="number" pos:start="109:73" pos:end="109:73">1</literal></expr></argument>)</argument_list></call> <operator pos:start="109:76" pos:end="109:76">+</operator> <literal type="number" pos:start="109:78" pos:end="109:78">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="113:39"><if pos:start="111:9" pos:end="113:39">if <condition pos:start="111:12" pos:end="111:39">(<expr pos:start="111:13" pos:end="111:38"><name pos:start="111:13" pos:end="111:34"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:34">time_increment_bits</name></name> <operator pos:start="111:36" pos:end="111:36">&lt;</operator> <literal type="number" pos:start="111:38" pos:end="111:38">1</literal></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:39"><block_content pos:start="113:13" pos:end="113:39">

            <expr_stmt pos:start="113:13" pos:end="113:39"><expr pos:start="113:13" pos:end="113:38"><name pos:start="113:13" pos:end="113:34"><name pos:start="113:13" pos:end="113:13">s</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:34">time_increment_bits</name></name> <operator pos:start="113:36" pos:end="113:36">=</operator> <literal type="number" pos:start="113:38" pos:end="113:38">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:27"><expr pos:start="115:9" pos:end="115:26"><call pos:start="115:9" pos:end="115:26"><name pos:start="115:9" pos:end="115:18">skip_bits1</name><argument_list pos:start="115:19" pos:end="115:26">(<argument pos:start="115:20" pos:end="115:25"><expr pos:start="115:20" pos:end="115:25"><operator pos:start="115:20" pos:end="115:20">&amp;</operator><name pos:start="115:21" pos:end="115:25"><name pos:start="115:21" pos:end="115:21">s</name><operator pos:start="115:22" pos:end="115:23">-&gt;</operator><name pos:start="115:24" pos:end="115:25">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="115:31" pos:end="115:42">/* marker */</comment>



        <if_stmt pos:start="119:9" pos:end="123:9"><if pos:start="119:9" pos:end="123:9">if <condition pos:start="119:12" pos:end="119:35">(<expr pos:start="119:13" pos:end="119:34"><call pos:start="119:13" pos:end="119:29"><name pos:start="119:13" pos:end="119:21">get_bits1</name><argument_list pos:start="119:22" pos:end="119:29">(<argument pos:start="119:23" pos:end="119:28"><expr pos:start="119:23" pos:end="119:28"><operator pos:start="119:23" pos:end="119:23">&amp;</operator><name pos:start="119:24" pos:end="119:28"><name pos:start="119:24" pos:end="119:24">s</name><operator pos:start="119:25" pos:end="119:26">-&gt;</operator><name pos:start="119:27" pos:end="119:28">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="119:31" pos:end="119:32">!=</operator> <literal type="number" pos:start="119:34" pos:end="119:34">0</literal></expr>)</condition> <block pos:start="119:37" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:54">   <comment type="block" pos:start="119:41" pos:end="119:61">/* fixed_vop_rate  */</comment>

            <expr_stmt pos:start="121:13" pos:end="121:54"><expr pos:start="121:13" pos:end="121:53"><call pos:start="121:13" pos:end="121:53"><name pos:start="121:13" pos:end="121:21">skip_bits</name><argument_list pos:start="121:22" pos:end="121:53">(<argument pos:start="121:23" pos:end="121:28"><expr pos:start="121:23" pos:end="121:28"><operator pos:start="121:23" pos:end="121:23">&amp;</operator><name pos:start="121:24" pos:end="121:28"><name pos:start="121:24" pos:end="121:24">s</name><operator pos:start="121:25" pos:end="121:26">-&gt;</operator><name pos:start="121:27" pos:end="121:28">gb</name></name></expr></argument>, <argument pos:start="121:31" pos:end="121:52"><expr pos:start="121:31" pos:end="121:52"><name pos:start="121:31" pos:end="121:52"><name pos:start="121:31" pos:end="121:31">s</name><operator pos:start="121:32" pos:end="121:33">-&gt;</operator><name pos:start="121:34" pos:end="121:52">time_increment_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="127:9" pos:end="299:9"><if pos:start="127:9" pos:end="299:9">if <condition pos:start="127:12" pos:end="127:39">(<expr pos:start="127:13" pos:end="127:38"><name pos:start="127:13" pos:end="127:20"><name pos:start="127:13" pos:end="127:13">s</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:20">shape</name></name> <operator pos:start="127:22" pos:end="127:23">!=</operator> <name pos:start="127:25" pos:end="127:38">BIN_ONLY_SHAPE</name></expr>)</condition> <block pos:start="127:41" pos:end="299:9">{<block_content pos:start="129:13" pos:end="297:13">

            <if_stmt pos:start="129:13" pos:end="151:13"><if pos:start="129:13" pos:end="151:13">if <condition pos:start="129:16" pos:end="129:39">(<expr pos:start="129:17" pos:end="129:38"><name pos:start="129:17" pos:end="129:24"><name pos:start="129:17" pos:end="129:17">s</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:24">shape</name></name> <operator pos:start="129:26" pos:end="129:27">==</operator> <name pos:start="129:29" pos:end="129:38">RECT_SHAPE</name></expr>)</condition> <block pos:start="129:41" pos:end="151:13">{<block_content pos:start="131:17" pos:end="149:17">

                <expr_stmt pos:start="131:17" pos:end="131:35"><expr pos:start="131:17" pos:end="131:34"><call pos:start="131:17" pos:end="131:34"><name pos:start="131:17" pos:end="131:26">skip_bits1</name><argument_list pos:start="131:27" pos:end="131:34">(<argument pos:start="131:28" pos:end="131:33"><expr pos:start="131:28" pos:end="131:33"><operator pos:start="131:28" pos:end="131:28">&amp;</operator><name pos:start="131:29" pos:end="131:33"><name pos:start="131:29" pos:end="131:29">s</name><operator pos:start="131:30" pos:end="131:31">-&gt;</operator><name pos:start="131:32" pos:end="131:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="131:39" pos:end="131:50">/* marker */</comment>

                <expr_stmt pos:start="133:17" pos:end="133:45"><expr pos:start="133:17" pos:end="133:44"><name pos:start="133:17" pos:end="133:21">width</name> <operator pos:start="133:23" pos:end="133:23">=</operator> <call pos:start="133:25" pos:end="133:44"><name pos:start="133:25" pos:end="133:32">get_bits</name><argument_list pos:start="133:33" pos:end="133:44">(<argument pos:start="133:34" pos:end="133:39"><expr pos:start="133:34" pos:end="133:39"><operator pos:start="133:34" pos:end="133:34">&amp;</operator><name pos:start="133:35" pos:end="133:39"><name pos:start="133:35" pos:end="133:35">s</name><operator pos:start="133:36" pos:end="133:37">-&gt;</operator><name pos:start="133:38" pos:end="133:39">gb</name></name></expr></argument>, <argument pos:start="133:42" pos:end="133:43"><expr pos:start="133:42" pos:end="133:43"><literal type="number" pos:start="133:42" pos:end="133:43">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:35"><expr pos:start="135:17" pos:end="135:34"><call pos:start="135:17" pos:end="135:34"><name pos:start="135:17" pos:end="135:26">skip_bits1</name><argument_list pos:start="135:27" pos:end="135:34">(<argument pos:start="135:28" pos:end="135:33"><expr pos:start="135:28" pos:end="135:33"><operator pos:start="135:28" pos:end="135:28">&amp;</operator><name pos:start="135:29" pos:end="135:33"><name pos:start="135:29" pos:end="135:29">s</name><operator pos:start="135:30" pos:end="135:31">-&gt;</operator><name pos:start="135:32" pos:end="135:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="135:39" pos:end="135:50">/* marker */</comment>

                <expr_stmt pos:start="137:17" pos:end="137:46"><expr pos:start="137:17" pos:end="137:45"><name pos:start="137:17" pos:end="137:22">height</name> <operator pos:start="137:24" pos:end="137:24">=</operator> <call pos:start="137:26" pos:end="137:45"><name pos:start="137:26" pos:end="137:33">get_bits</name><argument_list pos:start="137:34" pos:end="137:45">(<argument pos:start="137:35" pos:end="137:40"><expr pos:start="137:35" pos:end="137:40"><operator pos:start="137:35" pos:end="137:35">&amp;</operator><name pos:start="137:36" pos:end="137:40"><name pos:start="137:36" pos:end="137:36">s</name><operator pos:start="137:37" pos:end="137:38">-&gt;</operator><name pos:start="137:39" pos:end="137:40">gb</name></name></expr></argument>, <argument pos:start="137:43" pos:end="137:44"><expr pos:start="137:43" pos:end="137:44"><literal type="number" pos:start="137:43" pos:end="137:44">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="139:17" pos:end="139:35"><expr pos:start="139:17" pos:end="139:34"><call pos:start="139:17" pos:end="139:34"><name pos:start="139:17" pos:end="139:26">skip_bits1</name><argument_list pos:start="139:27" pos:end="139:34">(<argument pos:start="139:28" pos:end="139:33"><expr pos:start="139:28" pos:end="139:33"><operator pos:start="139:28" pos:end="139:28">&amp;</operator><name pos:start="139:29" pos:end="139:33"><name pos:start="139:29" pos:end="139:29">s</name><operator pos:start="139:30" pos:end="139:31">-&gt;</operator><name pos:start="139:32" pos:end="139:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="139:39" pos:end="139:50">/* marker */</comment>

                <if_stmt pos:start="141:17" pos:end="149:17"><if pos:start="141:17" pos:end="149:17">if<condition pos:start="141:19" pos:end="141:35">(<expr pos:start="141:20" pos:end="141:34"><name pos:start="141:20" pos:end="141:24">width</name> <operator pos:start="141:26" pos:end="141:27">&amp;&amp;</operator> <name pos:start="141:29" pos:end="141:34">height</name></expr>)</condition><block pos:start="141:36" pos:end="149:17">{<block_content pos:start="143:21" pos:end="145:39"> <comment type="block" pos:start="141:38" pos:end="141:84">/* they should be non zero but who knows ... */</comment>

                    <expr_stmt pos:start="143:21" pos:end="143:37"><expr pos:start="143:21" pos:end="143:36"><name pos:start="143:21" pos:end="143:28"><name pos:start="143:21" pos:end="143:21">s</name><operator pos:start="143:22" pos:end="143:23">-&gt;</operator><name pos:start="143:24" pos:end="143:28">width</name></name> <operator pos:start="143:30" pos:end="143:30">=</operator> <name pos:start="143:32" pos:end="143:36">width</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="145:21" pos:end="145:39"><expr pos:start="145:21" pos:end="145:38"><name pos:start="145:21" pos:end="145:29"><name pos:start="145:21" pos:end="145:21">s</name><operator pos:start="145:22" pos:end="145:23">-&gt;</operator><name pos:start="145:24" pos:end="145:29">height</name></name> <operator pos:start="145:31" pos:end="145:31">=</operator> <name pos:start="145:33" pos:end="145:38">height</name></expr>;</expr_stmt>

<comment type="line" pos:start="147:1" pos:end="147:55">//                    printf("%d %d\n", width, height);</comment>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            

            <if_stmt pos:start="155:13" pos:end="155:71"><if pos:start="155:13" pos:end="155:71">if<condition pos:start="155:15" pos:end="155:33">(<expr pos:start="155:16" pos:end="155:32"><call pos:start="155:16" pos:end="155:32"><name pos:start="155:16" pos:end="155:24">get_bits1</name><argument_list pos:start="155:25" pos:end="155:32">(<argument pos:start="155:26" pos:end="155:31"><expr pos:start="155:26" pos:end="155:31"><operator pos:start="155:26" pos:end="155:26">&amp;</operator><name pos:start="155:27" pos:end="155:31"><name pos:start="155:27" pos:end="155:27">s</name><operator pos:start="155:28" pos:end="155:29">-&gt;</operator><name pos:start="155:30" pos:end="155:31">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="155:35" pos:end="155:71"><block_content pos:start="155:35" pos:end="155:71"> <expr_stmt pos:start="155:35" pos:end="155:71"><expr pos:start="155:35" pos:end="155:70"><call pos:start="155:35" pos:end="155:70"><name pos:start="155:35" pos:end="155:40">printf</name><argument_list pos:start="155:41" pos:end="155:70">(<argument pos:start="155:42" pos:end="155:69"><expr pos:start="155:42" pos:end="155:69"><literal type="string" pos:start="155:42" pos:end="155:69">"interlaced not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>   <comment type="block" pos:start="155:75" pos:end="155:90">/* interlaced */</comment>

            <if_stmt pos:start="157:13" pos:end="157:66"><if pos:start="157:13" pos:end="157:66">if<condition pos:start="157:15" pos:end="157:34">(<expr pos:start="157:16" pos:end="157:33"><operator pos:start="157:16" pos:end="157:16">!</operator><call pos:start="157:17" pos:end="157:33"><name pos:start="157:17" pos:end="157:25">get_bits1</name><argument_list pos:start="157:26" pos:end="157:33">(<argument pos:start="157:27" pos:end="157:32"><expr pos:start="157:27" pos:end="157:32"><operator pos:start="157:27" pos:end="157:27">&amp;</operator><name pos:start="157:28" pos:end="157:32"><name pos:start="157:28" pos:end="157:28">s</name><operator pos:start="157:29" pos:end="157:30">-&gt;</operator><name pos:start="157:31" pos:end="157:32">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="157:36" pos:end="157:66"><block_content pos:start="157:36" pos:end="157:66"> <expr_stmt pos:start="157:36" pos:end="157:66"><expr pos:start="157:36" pos:end="157:65"><call pos:start="157:36" pos:end="157:65"><name pos:start="157:36" pos:end="157:41">printf</name><argument_list pos:start="157:42" pos:end="157:65">(<argument pos:start="157:43" pos:end="157:64"><expr pos:start="157:43" pos:end="157:64"><literal type="string" pos:start="157:43" pos:end="157:64">"OBMC not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>   <comment type="block" pos:start="157:70" pos:end="157:87">/* OBMC Disable */</comment>

            <if_stmt pos:start="159:13" pos:end="167:13"><if pos:start="159:13" pos:end="163:13">if <condition pos:start="159:16" pos:end="159:31">(<expr pos:start="159:17" pos:end="159:30"><name pos:start="159:17" pos:end="159:25">vo_ver_id</name> <operator pos:start="159:27" pos:end="159:28">==</operator> <literal type="number" pos:start="159:30" pos:end="159:30">1</literal></expr>)</condition> <block pos:start="159:33" pos:end="163:13">{<block_content pos:start="161:17" pos:end="161:56">

                <expr_stmt pos:start="161:17" pos:end="161:56"><expr pos:start="161:17" pos:end="161:55"><name pos:start="161:17" pos:end="161:35"><name pos:start="161:17" pos:end="161:17">s</name><operator pos:start="161:18" pos:end="161:19">-&gt;</operator><name pos:start="161:20" pos:end="161:35">vol_sprite_usage</name></name> <operator pos:start="161:37" pos:end="161:37">=</operator> <call pos:start="161:39" pos:end="161:55"><name pos:start="161:39" pos:end="161:47">get_bits1</name><argument_list pos:start="161:48" pos:end="161:55">(<argument pos:start="161:49" pos:end="161:54"><expr pos:start="161:49" pos:end="161:54"><operator pos:start="161:49" pos:end="161:49">&amp;</operator><name pos:start="161:50" pos:end="161:54"><name pos:start="161:50" pos:end="161:50">s</name><operator pos:start="161:51" pos:end="161:52">-&gt;</operator><name pos:start="161:53" pos:end="161:54">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="161:58" pos:end="161:79">/* vol_sprite_usage */</comment>

            </block_content>}</block></if> <else pos:start="163:15" pos:end="167:13">else <block pos:start="163:20" pos:end="167:13">{<block_content pos:start="165:17" pos:end="165:58">

                <expr_stmt pos:start="165:17" pos:end="165:58"><expr pos:start="165:17" pos:end="165:57"><name pos:start="165:17" pos:end="165:35"><name pos:start="165:17" pos:end="165:17">s</name><operator pos:start="165:18" pos:end="165:19">-&gt;</operator><name pos:start="165:20" pos:end="165:35">vol_sprite_usage</name></name> <operator pos:start="165:37" pos:end="165:37">=</operator> <call pos:start="165:39" pos:end="165:57"><name pos:start="165:39" pos:end="165:46">get_bits</name><argument_list pos:start="165:47" pos:end="165:57">(<argument pos:start="165:48" pos:end="165:53"><expr pos:start="165:48" pos:end="165:53"><operator pos:start="165:48" pos:end="165:48">&amp;</operator><name pos:start="165:49" pos:end="165:53"><name pos:start="165:49" pos:end="165:49">s</name><operator pos:start="165:50" pos:end="165:51">-&gt;</operator><name pos:start="165:52" pos:end="165:53">gb</name></name></expr></argument>, <argument pos:start="165:56" pos:end="165:56"><expr pos:start="165:56" pos:end="165:56"><literal type="number" pos:start="165:56" pos:end="165:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="165:60" pos:end="165:81">/* vol_sprite_usage */</comment>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="169:13" pos:end="169:92"><if pos:start="169:13" pos:end="169:92">if<condition pos:start="169:15" pos:end="169:50">(<expr pos:start="169:16" pos:end="169:49"><name pos:start="169:16" pos:end="169:34"><name pos:start="169:16" pos:end="169:16">s</name><operator pos:start="169:17" pos:end="169:18">-&gt;</operator><name pos:start="169:19" pos:end="169:34">vol_sprite_usage</name></name><operator pos:start="169:35" pos:end="169:36">==</operator><name pos:start="169:37" pos:end="169:49">STATIC_SPRITE</name></expr>)</condition><block type="pseudo" pos:start="169:52" pos:end="169:92"><block_content pos:start="169:52" pos:end="169:92"> <expr_stmt pos:start="169:52" pos:end="169:92"><expr pos:start="169:52" pos:end="169:91"><call pos:start="169:52" pos:end="169:91"><name pos:start="169:52" pos:end="169:57">printf</name><argument_list pos:start="169:58" pos:end="169:91">(<argument pos:start="169:59" pos:end="169:90"><expr pos:start="169:59" pos:end="169:90"><literal type="string" pos:start="169:59" pos:end="169:90">"Static Sprites not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="171:13" pos:end="203:13"><if pos:start="171:13" pos:end="203:13">if<condition pos:start="171:15" pos:end="171:85">(<expr pos:start="171:16" pos:end="171:84"><name pos:start="171:16" pos:end="171:34"><name pos:start="171:16" pos:end="171:16">s</name><operator pos:start="171:17" pos:end="171:18">-&gt;</operator><name pos:start="171:19" pos:end="171:34">vol_sprite_usage</name></name><operator pos:start="171:35" pos:end="171:36">==</operator><name pos:start="171:37" pos:end="171:49">STATIC_SPRITE</name> <operator pos:start="171:51" pos:end="171:52">||</operator> <name pos:start="171:54" pos:end="171:72"><name pos:start="171:54" pos:end="171:54">s</name><operator pos:start="171:55" pos:end="171:56">-&gt;</operator><name pos:start="171:57" pos:end="171:72">vol_sprite_usage</name></name><operator pos:start="171:73" pos:end="171:74">==</operator><name pos:start="171:75" pos:end="171:84">GMC_SPRITE</name></expr>)</condition><block pos:start="171:86" pos:end="203:13">{<block_content pos:start="173:17" pos:end="201:61">

                <if_stmt pos:start="173:17" pos:end="191:17"><if pos:start="173:17" pos:end="191:17">if<condition pos:start="173:19" pos:end="173:54">(<expr pos:start="173:20" pos:end="173:53"><name pos:start="173:20" pos:end="173:38"><name pos:start="173:20" pos:end="173:20">s</name><operator pos:start="173:21" pos:end="173:22">-&gt;</operator><name pos:start="173:23" pos:end="173:38">vol_sprite_usage</name></name><operator pos:start="173:39" pos:end="173:40">==</operator><name pos:start="173:41" pos:end="173:53">STATIC_SPRITE</name></expr>)</condition><block pos:start="173:55" pos:end="191:17">{<block_content pos:start="175:21" pos:end="189:39">

                    <expr_stmt pos:start="175:21" pos:end="175:59"><expr pos:start="175:21" pos:end="175:58"><name pos:start="175:21" pos:end="175:35"><name pos:start="175:21" pos:end="175:21">s</name><operator pos:start="175:22" pos:end="175:23">-&gt;</operator><name pos:start="175:24" pos:end="175:35">sprite_width</name></name> <operator pos:start="175:37" pos:end="175:37">=</operator> <call pos:start="175:39" pos:end="175:58"><name pos:start="175:39" pos:end="175:46">get_bits</name><argument_list pos:start="175:47" pos:end="175:58">(<argument pos:start="175:48" pos:end="175:53"><expr pos:start="175:48" pos:end="175:53"><operator pos:start="175:48" pos:end="175:48">&amp;</operator><name pos:start="175:49" pos:end="175:53"><name pos:start="175:49" pos:end="175:49">s</name><operator pos:start="175:50" pos:end="175:51">-&gt;</operator><name pos:start="175:52" pos:end="175:53">gb</name></name></expr></argument>, <argument pos:start="175:56" pos:end="175:57"><expr pos:start="175:56" pos:end="175:57"><literal type="number" pos:start="175:56" pos:end="175:57">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="177:21" pos:end="177:39"><expr pos:start="177:21" pos:end="177:38"><call pos:start="177:21" pos:end="177:38"><name pos:start="177:21" pos:end="177:30">skip_bits1</name><argument_list pos:start="177:31" pos:end="177:38">(<argument pos:start="177:32" pos:end="177:37"><expr pos:start="177:32" pos:end="177:37"><operator pos:start="177:32" pos:end="177:32">&amp;</operator><name pos:start="177:33" pos:end="177:37"><name pos:start="177:33" pos:end="177:33">s</name><operator pos:start="177:34" pos:end="177:35">-&gt;</operator><name pos:start="177:36" pos:end="177:37">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="177:41" pos:end="177:52">/* marker */</comment>

                    <expr_stmt pos:start="179:21" pos:end="179:59"><expr pos:start="179:21" pos:end="179:58"><name pos:start="179:21" pos:end="179:36"><name pos:start="179:21" pos:end="179:21">s</name><operator pos:start="179:22" pos:end="179:23">-&gt;</operator><name pos:start="179:24" pos:end="179:36">sprite_height</name></name><operator pos:start="179:37" pos:end="179:37">=</operator> <call pos:start="179:39" pos:end="179:58"><name pos:start="179:39" pos:end="179:46">get_bits</name><argument_list pos:start="179:47" pos:end="179:58">(<argument pos:start="179:48" pos:end="179:53"><expr pos:start="179:48" pos:end="179:53"><operator pos:start="179:48" pos:end="179:48">&amp;</operator><name pos:start="179:49" pos:end="179:53"><name pos:start="179:49" pos:end="179:49">s</name><operator pos:start="179:50" pos:end="179:51">-&gt;</operator><name pos:start="179:52" pos:end="179:53">gb</name></name></expr></argument>, <argument pos:start="179:56" pos:end="179:57"><expr pos:start="179:56" pos:end="179:57"><literal type="number" pos:start="179:56" pos:end="179:57">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="181:21" pos:end="181:39"><expr pos:start="181:21" pos:end="181:38"><call pos:start="181:21" pos:end="181:38"><name pos:start="181:21" pos:end="181:30">skip_bits1</name><argument_list pos:start="181:31" pos:end="181:38">(<argument pos:start="181:32" pos:end="181:37"><expr pos:start="181:32" pos:end="181:37"><operator pos:start="181:32" pos:end="181:32">&amp;</operator><name pos:start="181:33" pos:end="181:37"><name pos:start="181:33" pos:end="181:33">s</name><operator pos:start="181:34" pos:end="181:35">-&gt;</operator><name pos:start="181:36" pos:end="181:37">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="181:41" pos:end="181:52">/* marker */</comment>

                    <expr_stmt pos:start="183:21" pos:end="183:59"><expr pos:start="183:21" pos:end="183:58"><name pos:start="183:21" pos:end="183:34"><name pos:start="183:21" pos:end="183:21">s</name><operator pos:start="183:22" pos:end="183:23">-&gt;</operator><name pos:start="183:24" pos:end="183:34">sprite_left</name></name>  <operator pos:start="183:37" pos:end="183:37">=</operator> <call pos:start="183:39" pos:end="183:58"><name pos:start="183:39" pos:end="183:46">get_bits</name><argument_list pos:start="183:47" pos:end="183:58">(<argument pos:start="183:48" pos:end="183:53"><expr pos:start="183:48" pos:end="183:53"><operator pos:start="183:48" pos:end="183:48">&amp;</operator><name pos:start="183:49" pos:end="183:53"><name pos:start="183:49" pos:end="183:49">s</name><operator pos:start="183:50" pos:end="183:51">-&gt;</operator><name pos:start="183:52" pos:end="183:53">gb</name></name></expr></argument>, <argument pos:start="183:56" pos:end="183:57"><expr pos:start="183:56" pos:end="183:57"><literal type="number" pos:start="183:56" pos:end="183:57">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="185:21" pos:end="185:39"><expr pos:start="185:21" pos:end="185:38"><call pos:start="185:21" pos:end="185:38"><name pos:start="185:21" pos:end="185:30">skip_bits1</name><argument_list pos:start="185:31" pos:end="185:38">(<argument pos:start="185:32" pos:end="185:37"><expr pos:start="185:32" pos:end="185:37"><operator pos:start="185:32" pos:end="185:32">&amp;</operator><name pos:start="185:33" pos:end="185:37"><name pos:start="185:33" pos:end="185:33">s</name><operator pos:start="185:34" pos:end="185:35">-&gt;</operator><name pos:start="185:36" pos:end="185:37">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="185:41" pos:end="185:52">/* marker */</comment>

                    <expr_stmt pos:start="187:21" pos:end="187:59"><expr pos:start="187:21" pos:end="187:58"><name pos:start="187:21" pos:end="187:33"><name pos:start="187:21" pos:end="187:21">s</name><operator pos:start="187:22" pos:end="187:23">-&gt;</operator><name pos:start="187:24" pos:end="187:33">sprite_top</name></name>   <operator pos:start="187:37" pos:end="187:37">=</operator> <call pos:start="187:39" pos:end="187:58"><name pos:start="187:39" pos:end="187:46">get_bits</name><argument_list pos:start="187:47" pos:end="187:58">(<argument pos:start="187:48" pos:end="187:53"><expr pos:start="187:48" pos:end="187:53"><operator pos:start="187:48" pos:end="187:48">&amp;</operator><name pos:start="187:49" pos:end="187:53"><name pos:start="187:49" pos:end="187:49">s</name><operator pos:start="187:50" pos:end="187:51">-&gt;</operator><name pos:start="187:52" pos:end="187:53">gb</name></name></expr></argument>, <argument pos:start="187:56" pos:end="187:57"><expr pos:start="187:56" pos:end="187:57"><literal type="number" pos:start="187:56" pos:end="187:57">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="189:21" pos:end="189:39"><expr pos:start="189:21" pos:end="189:38"><call pos:start="189:21" pos:end="189:38"><name pos:start="189:21" pos:end="189:30">skip_bits1</name><argument_list pos:start="189:31" pos:end="189:38">(<argument pos:start="189:32" pos:end="189:37"><expr pos:start="189:32" pos:end="189:37"><operator pos:start="189:32" pos:end="189:32">&amp;</operator><name pos:start="189:33" pos:end="189:37"><name pos:start="189:33" pos:end="189:33">s</name><operator pos:start="189:34" pos:end="189:35">-&gt;</operator><name pos:start="189:36" pos:end="189:37">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="189:41" pos:end="189:52">/* marker */</comment>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:66"><expr pos:start="193:17" pos:end="193:65"><name pos:start="193:17" pos:end="193:44"><name pos:start="193:17" pos:end="193:17">s</name><operator pos:start="193:18" pos:end="193:19">-&gt;</operator><name pos:start="193:20" pos:end="193:44">num_sprite_warping_points</name></name><operator pos:start="193:45" pos:end="193:45">=</operator> <call pos:start="193:47" pos:end="193:65"><name pos:start="193:47" pos:end="193:54">get_bits</name><argument_list pos:start="193:55" pos:end="193:65">(<argument pos:start="193:56" pos:end="193:61"><expr pos:start="193:56" pos:end="193:61"><operator pos:start="193:56" pos:end="193:56">&amp;</operator><name pos:start="193:57" pos:end="193:61"><name pos:start="193:57" pos:end="193:57">s</name><operator pos:start="193:58" pos:end="193:59">-&gt;</operator><name pos:start="193:60" pos:end="193:61">gb</name></name></expr></argument>, <argument pos:start="193:64" pos:end="193:64"><expr pos:start="193:64" pos:end="193:64"><literal type="number" pos:start="193:64" pos:end="193:64">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="195:17" pos:end="195:65"><expr pos:start="195:17" pos:end="195:64"><name pos:start="195:17" pos:end="195:42"><name pos:start="195:17" pos:end="195:17">s</name><operator pos:start="195:18" pos:end="195:19">-&gt;</operator><name pos:start="195:20" pos:end="195:42">sprite_warping_accuracy</name></name> <operator pos:start="195:44" pos:end="195:44">=</operator> <call pos:start="195:46" pos:end="195:64"><name pos:start="195:46" pos:end="195:53">get_bits</name><argument_list pos:start="195:54" pos:end="195:64">(<argument pos:start="195:55" pos:end="195:60"><expr pos:start="195:55" pos:end="195:60"><operator pos:start="195:55" pos:end="195:55">&amp;</operator><name pos:start="195:56" pos:end="195:60"><name pos:start="195:56" pos:end="195:56">s</name><operator pos:start="195:57" pos:end="195:58">-&gt;</operator><name pos:start="195:59" pos:end="195:60">gb</name></name></expr></argument>, <argument pos:start="195:63" pos:end="195:63"><expr pos:start="195:63" pos:end="195:63"><literal type="number" pos:start="195:63" pos:end="195:63">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="197:17" pos:end="197:63"><expr pos:start="197:17" pos:end="197:62"><name pos:start="197:17" pos:end="197:43"><name pos:start="197:17" pos:end="197:17">s</name><operator pos:start="197:18" pos:end="197:19">-&gt;</operator><name pos:start="197:20" pos:end="197:43">sprite_brightness_change</name></name><operator pos:start="197:44" pos:end="197:44">=</operator> <call pos:start="197:46" pos:end="197:62"><name pos:start="197:46" pos:end="197:54">get_bits1</name><argument_list pos:start="197:55" pos:end="197:62">(<argument pos:start="197:56" pos:end="197:61"><expr pos:start="197:56" pos:end="197:61"><operator pos:start="197:56" pos:end="197:56">&amp;</operator><name pos:start="197:57" pos:end="197:61"><name pos:start="197:57" pos:end="197:57">s</name><operator pos:start="197:58" pos:end="197:59">-&gt;</operator><name pos:start="197:60" pos:end="197:61">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="199:17" pos:end="201:61"><if pos:start="199:17" pos:end="201:61">if<condition pos:start="199:19" pos:end="199:54">(<expr pos:start="199:20" pos:end="199:53"><name pos:start="199:20" pos:end="199:38"><name pos:start="199:20" pos:end="199:20">s</name><operator pos:start="199:21" pos:end="199:22">-&gt;</operator><name pos:start="199:23" pos:end="199:38">vol_sprite_usage</name></name><operator pos:start="199:39" pos:end="199:40">==</operator><name pos:start="199:41" pos:end="199:53">STATIC_SPRITE</name></expr>)</condition><block type="pseudo" pos:start="201:21" pos:end="201:61"><block_content pos:start="201:21" pos:end="201:61">

                    <expr_stmt pos:start="201:21" pos:end="201:61"><expr pos:start="201:21" pos:end="201:60"><name pos:start="201:21" pos:end="201:41"><name pos:start="201:21" pos:end="201:21">s</name><operator pos:start="201:22" pos:end="201:23">-&gt;</operator><name pos:start="201:24" pos:end="201:41">low_latency_sprite</name></name><operator pos:start="201:42" pos:end="201:42">=</operator> <call pos:start="201:44" pos:end="201:60"><name pos:start="201:44" pos:end="201:52">get_bits1</name><argument_list pos:start="201:53" pos:end="201:60">(<argument pos:start="201:54" pos:end="201:59"><expr pos:start="201:54" pos:end="201:59"><operator pos:start="201:54" pos:end="201:54">&amp;</operator><name pos:start="201:55" pos:end="201:59"><name pos:start="201:55" pos:end="201:55">s</name><operator pos:start="201:56" pos:end="201:57">-&gt;</operator><name pos:start="201:58" pos:end="201:59">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>            

            </block_content>}</block></if></if_stmt>

            <comment type="line" pos:start="205:13" pos:end="205:68">// FIXME sadct disable bit if verid!=1 &amp;&amp; shape not rect</comment>

            

            <if_stmt pos:start="209:13" pos:end="219:13"><if pos:start="209:13" pos:end="215:13">if <condition pos:start="209:16" pos:end="209:39">(<expr pos:start="209:17" pos:end="209:38"><call pos:start="209:17" pos:end="209:33"><name pos:start="209:17" pos:end="209:25">get_bits1</name><argument_list pos:start="209:26" pos:end="209:33">(<argument pos:start="209:27" pos:end="209:32"><expr pos:start="209:27" pos:end="209:32"><operator pos:start="209:27" pos:end="209:27">&amp;</operator><name pos:start="209:28" pos:end="209:32"><name pos:start="209:28" pos:end="209:28">s</name><operator pos:start="209:29" pos:end="209:30">-&gt;</operator><name pos:start="209:31" pos:end="209:32">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="209:35" pos:end="209:36">==</operator> <literal type="number" pos:start="209:38" pos:end="209:38">1</literal></expr>)</condition> <block pos:start="209:41" pos:end="215:13">{<block_content pos:start="211:17" pos:end="213:75">   <comment type="block" pos:start="209:45" pos:end="209:59">/* not_8_bit */</comment>

                <expr_stmt pos:start="211:17" pos:end="211:57"><expr pos:start="211:17" pos:end="211:56"><name pos:start="211:17" pos:end="211:34"><name pos:start="211:17" pos:end="211:17">s</name><operator pos:start="211:18" pos:end="211:19">-&gt;</operator><name pos:start="211:20" pos:end="211:34">quant_precision</name></name> <operator pos:start="211:36" pos:end="211:36">=</operator> <call pos:start="211:38" pos:end="211:56"><name pos:start="211:38" pos:end="211:45">get_bits</name><argument_list pos:start="211:46" pos:end="211:56">(<argument pos:start="211:47" pos:end="211:52"><expr pos:start="211:47" pos:end="211:52"><operator pos:start="211:47" pos:end="211:47">&amp;</operator><name pos:start="211:48" pos:end="211:52"><name pos:start="211:48" pos:end="211:48">s</name><operator pos:start="211:49" pos:end="211:50">-&gt;</operator><name pos:start="211:51" pos:end="211:52">gb</name></name></expr></argument>, <argument pos:start="211:55" pos:end="211:55"><expr pos:start="211:55" pos:end="211:55"><literal type="number" pos:start="211:55" pos:end="211:55">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="211:59" pos:end="211:79">/* quant_precision */</comment>

                <if_stmt pos:start="213:17" pos:end="213:75"><if pos:start="213:17" pos:end="213:75">if<condition pos:start="213:19" pos:end="213:42">(<expr pos:start="213:20" pos:end="213:41"><call pos:start="213:20" pos:end="213:38"><name pos:start="213:20" pos:end="213:27">get_bits</name><argument_list pos:start="213:28" pos:end="213:38">(<argument pos:start="213:29" pos:end="213:34"><expr pos:start="213:29" pos:end="213:34"><operator pos:start="213:29" pos:end="213:29">&amp;</operator><name pos:start="213:30" pos:end="213:34"><name pos:start="213:30" pos:end="213:30">s</name><operator pos:start="213:31" pos:end="213:32">-&gt;</operator><name pos:start="213:33" pos:end="213:34">gb</name></name></expr></argument>, <argument pos:start="213:37" pos:end="213:37"><expr pos:start="213:37" pos:end="213:37"><literal type="number" pos:start="213:37" pos:end="213:37">4</literal></expr></argument>)</argument_list></call><operator pos:start="213:39" pos:end="213:40">!=</operator><literal type="number" pos:start="213:41" pos:end="213:41">8</literal></expr>)</condition><block type="pseudo" pos:start="213:44" pos:end="213:75"><block_content pos:start="213:44" pos:end="213:75"> <expr_stmt pos:start="213:44" pos:end="213:75"><expr pos:start="213:44" pos:end="213:74"><call pos:start="213:44" pos:end="213:74"><name pos:start="213:44" pos:end="213:49">printf</name><argument_list pos:start="213:50" pos:end="213:74">(<argument pos:start="213:51" pos:end="213:73"><expr pos:start="213:51" pos:end="213:73"><literal type="string" pos:start="213:51" pos:end="213:73">"N-bit not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="213:77" pos:end="213:96">/* bits_per_pixel */</comment>

            </block_content>}</block></if> <else pos:start="215:15" pos:end="219:13">else <block pos:start="215:20" pos:end="219:13">{<block_content pos:start="217:17" pos:end="217:39">

                <expr_stmt pos:start="217:17" pos:end="217:39"><expr pos:start="217:17" pos:end="217:38"><name pos:start="217:17" pos:end="217:34"><name pos:start="217:17" pos:end="217:17">s</name><operator pos:start="217:18" pos:end="217:19">-&gt;</operator><name pos:start="217:20" pos:end="217:34">quant_precision</name></name> <operator pos:start="217:36" pos:end="217:36">=</operator> <literal type="number" pos:start="217:38" pos:end="217:38">5</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            

            <comment type="line" pos:start="223:13" pos:end="223:54">// FIXME a bunch of grayscale shape things</comment>

            <if_stmt pos:start="225:13" pos:end="225:71"><if pos:start="225:13" pos:end="225:71">if<condition pos:start="225:15" pos:end="225:33">(<expr pos:start="225:16" pos:end="225:32"><call pos:start="225:16" pos:end="225:32"><name pos:start="225:16" pos:end="225:24">get_bits1</name><argument_list pos:start="225:25" pos:end="225:32">(<argument pos:start="225:26" pos:end="225:31"><expr pos:start="225:26" pos:end="225:31"><operator pos:start="225:26" pos:end="225:26">&amp;</operator><name pos:start="225:27" pos:end="225:31"><name pos:start="225:27" pos:end="225:27">s</name><operator pos:start="225:28" pos:end="225:29">-&gt;</operator><name pos:start="225:30" pos:end="225:31">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="225:35" pos:end="225:71"><block_content pos:start="225:35" pos:end="225:71"> <expr_stmt pos:start="225:35" pos:end="225:71"><expr pos:start="225:35" pos:end="225:70"><call pos:start="225:35" pos:end="225:70"><name pos:start="225:35" pos:end="225:40">printf</name><argument_list pos:start="225:41" pos:end="225:70">(<argument pos:start="225:42" pos:end="225:69"><expr pos:start="225:42" pos:end="225:69"><literal type="string" pos:start="225:42" pos:end="225:69">"Quant-Type not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block" pos:start="225:74" pos:end="225:93">/* vol_quant_type */</comment> <comment type="line" pos:start="225:95" pos:end="225:101">//FIXME</comment>

            <if_stmt pos:start="227:13" pos:end="231:37"><if pos:start="227:13" pos:end="229:54">if<condition pos:start="227:15" pos:end="227:30">(<expr pos:start="227:16" pos:end="227:29"><name pos:start="227:16" pos:end="227:24">vo_ver_id</name> <operator pos:start="227:26" pos:end="227:27">!=</operator> <literal type="number" pos:start="227:29" pos:end="227:29">1</literal></expr>)</condition><block type="pseudo" pos:start="229:18" pos:end="229:54"><block_content pos:start="229:18" pos:end="229:54">

                 <expr_stmt pos:start="229:18" pos:end="229:54"><expr pos:start="229:18" pos:end="229:53"><name pos:start="229:18" pos:end="229:34"><name pos:start="229:18" pos:end="229:18">s</name><operator pos:start="229:19" pos:end="229:20">-&gt;</operator><name pos:start="229:21" pos:end="229:34">quarter_sample</name></name><operator pos:start="229:35" pos:end="229:35">=</operator> <call pos:start="229:37" pos:end="229:53"><name pos:start="229:37" pos:end="229:45">get_bits1</name><argument_list pos:start="229:46" pos:end="229:53">(<argument pos:start="229:47" pos:end="229:52"><expr pos:start="229:47" pos:end="229:52"><operator pos:start="229:47" pos:end="229:47">&amp;</operator><name pos:start="229:48" pos:end="229:52"><name pos:start="229:48" pos:end="229:48">s</name><operator pos:start="229:49" pos:end="229:50">-&gt;</operator><name pos:start="229:51" pos:end="229:52">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="231:13" pos:end="231:37">else<block type="pseudo" pos:start="231:18" pos:end="231:37"><block_content pos:start="231:18" pos:end="231:37"> <expr_stmt pos:start="231:18" pos:end="231:37"><expr pos:start="231:18" pos:end="231:36"><name pos:start="231:18" pos:end="231:34"><name pos:start="231:18" pos:end="231:18">s</name><operator pos:start="231:19" pos:end="231:20">-&gt;</operator><name pos:start="231:21" pos:end="231:34">quarter_sample</name></name><operator pos:start="231:35" pos:end="231:35">=</operator><literal type="number" pos:start="231:36" pos:end="231:36">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <if_stmt pos:start="235:13" pos:end="242:0"><if pos:start="235:13" pos:end="242:0">if<condition pos:start="235:15" pos:end="235:34">(<expr pos:start="235:16" pos:end="235:33"><operator pos:start="235:16" pos:end="235:16">!</operator><call pos:start="235:17" pos:end="235:33"><name pos:start="235:17" pos:end="235:25">get_bits1</name><argument_list pos:start="235:26" pos:end="235:33">(<argument pos:start="235:27" pos:end="235:32"><expr pos:start="235:27" pos:end="235:32"><operator pos:start="235:27" pos:end="235:27">&amp;</operator><name pos:start="235:28" pos:end="235:32"><name pos:start="235:28" pos:end="235:28">s</name><operator pos:start="235:29" pos:end="235:30">-&gt;</operator><name pos:start="235:31" pos:end="235:32">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="235:36" pos:end="242:0"><block_content pos:start="235:36" pos:end="242:0"> <expr_stmt pos:start="235:36" pos:end="242:0"><expr pos:start="235:36" pos:end="235:82"><call pos:start="235:36" pos:end="235:82"><name pos:start="235:36" pos:end="235:41">printf</name><argument_list pos:start="235:42" pos:end="235:82">(<argument pos:start="235:43" pos:end="235:81"><expr pos:start="235:43" pos:end="235:81"><literal type="string" pos:start="235:43" pos:end="235:81">"Complexity estimation not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="237:1" pos:end="237:5">#<cpp:directive pos:start="237:2" pos:end="237:3">if</cpp:directive> <expr pos:start="237:5" pos:end="237:5"><literal type="number" pos:start="237:5" pos:end="237:5">0</literal></expr></cpp:if>

            if(get_bits1(&amp;s-&gt;gb)) printf("resync disable\n");

<cpp:else pos:start="241:1" pos:end="241:5">#<cpp:directive pos:start="241:2" pos:end="241:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="243:13" pos:end="246:0"><expr pos:start="243:13" pos:end="243:30"><call pos:start="243:13" pos:end="243:30"><name pos:start="243:13" pos:end="243:22">skip_bits1</name><argument_list pos:start="243:23" pos:end="243:30">(<argument pos:start="243:24" pos:end="243:29"><expr pos:start="243:24" pos:end="243:29"><operator pos:start="243:24" pos:end="243:24">&amp;</operator><name pos:start="243:25" pos:end="243:29"><name pos:start="243:25" pos:end="243:25">s</name><operator pos:start="243:26" pos:end="243:27">-&gt;</operator><name pos:start="243:28" pos:end="243:29">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="243:35" pos:end="243:62">/* resync_marker_disabled */</comment>

<cpp:endif pos:start="245:1" pos:end="245:6">#<cpp:directive pos:start="245:2" pos:end="245:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="247:13" pos:end="247:50"><expr pos:start="247:13" pos:end="247:49"><name pos:start="247:13" pos:end="247:30"><name pos:start="247:13" pos:end="247:13">s</name><operator pos:start="247:14" pos:end="247:15">-&gt;</operator><name pos:start="247:16" pos:end="247:30">data_partioning</name></name><operator pos:start="247:31" pos:end="247:31">=</operator> <call pos:start="247:33" pos:end="247:49"><name pos:start="247:33" pos:end="247:41">get_bits1</name><argument_list pos:start="247:42" pos:end="247:49">(<argument pos:start="247:43" pos:end="247:48"><expr pos:start="247:43" pos:end="247:48"><operator pos:start="247:43" pos:end="247:43">&amp;</operator><name pos:start="247:44" pos:end="247:48"><name pos:start="247:44" pos:end="247:44">s</name><operator pos:start="247:45" pos:end="247:46">-&gt;</operator><name pos:start="247:47" pos:end="247:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="249:13" pos:end="255:13"><if pos:start="249:13" pos:end="255:13">if<condition pos:start="249:15" pos:end="249:34">(<expr pos:start="249:16" pos:end="249:33"><name pos:start="249:16" pos:end="249:33"><name pos:start="249:16" pos:end="249:16">s</name><operator pos:start="249:17" pos:end="249:18">-&gt;</operator><name pos:start="249:19" pos:end="249:33">data_partioning</name></name></expr>)</condition><block pos:start="249:35" pos:end="255:13">{<block_content pos:start="251:17" pos:end="253:35">

                <expr_stmt pos:start="251:17" pos:end="251:60"><expr pos:start="251:17" pos:end="251:59"><call pos:start="251:17" pos:end="251:59"><name pos:start="251:17" pos:end="251:22">printf</name><argument_list pos:start="251:23" pos:end="251:59">(<argument pos:start="251:24" pos:end="251:58"><expr pos:start="251:24" pos:end="251:58"><literal type="string" pos:start="251:24" pos:end="251:58">"data partitioning not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:35"><expr pos:start="253:17" pos:end="253:34"><call pos:start="253:17" pos:end="253:34"><name pos:start="253:17" pos:end="253:26">skip_bits1</name><argument_list pos:start="253:27" pos:end="253:34">(<argument pos:start="253:28" pos:end="253:33"><expr pos:start="253:28" pos:end="253:33"><operator pos:start="253:28" pos:end="253:28">&amp;</operator><name pos:start="253:29" pos:end="253:33"><name pos:start="253:29" pos:end="253:29">s</name><operator pos:start="253:30" pos:end="253:31">-&gt;</operator><name pos:start="253:32" pos:end="253:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="253:37" pos:end="253:53">// reversible vlc</comment>

            </block_content>}</block></if></if_stmt>

            

            <if_stmt pos:start="259:13" pos:end="285:13"><if pos:start="259:13" pos:end="277:13">if<condition pos:start="259:15" pos:end="259:30">(<expr pos:start="259:16" pos:end="259:29"><name pos:start="259:16" pos:end="259:24">vo_ver_id</name> <operator pos:start="259:26" pos:end="259:27">!=</operator> <literal type="number" pos:start="259:29" pos:end="259:29">1</literal></expr>)</condition> <block pos:start="259:32" pos:end="277:13">{<block_content pos:start="261:17" pos:end="275:88">

                <expr_stmt pos:start="261:17" pos:end="261:47"><expr pos:start="261:17" pos:end="261:46"><name pos:start="261:17" pos:end="261:27"><name pos:start="261:17" pos:end="261:17">s</name><operator pos:start="261:18" pos:end="261:19">-&gt;</operator><name pos:start="261:20" pos:end="261:27">new_pred</name></name><operator pos:start="261:28" pos:end="261:28">=</operator> <call pos:start="261:30" pos:end="261:46"><name pos:start="261:30" pos:end="261:38">get_bits1</name><argument_list pos:start="261:39" pos:end="261:46">(<argument pos:start="261:40" pos:end="261:45"><expr pos:start="261:40" pos:end="261:45"><operator pos:start="261:40" pos:end="261:40">&amp;</operator><name pos:start="261:41" pos:end="261:45"><name pos:start="261:41" pos:end="261:41">s</name><operator pos:start="261:42" pos:end="261:43">-&gt;</operator><name pos:start="261:44" pos:end="261:45">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="263:17" pos:end="271:17"><if pos:start="263:17" pos:end="271:17">if<condition pos:start="263:19" pos:end="263:31">(<expr pos:start="263:20" pos:end="263:30"><name pos:start="263:20" pos:end="263:30"><name pos:start="263:20" pos:end="263:20">s</name><operator pos:start="263:21" pos:end="263:22">-&gt;</operator><name pos:start="263:23" pos:end="263:30">new_pred</name></name></expr>)</condition><block pos:start="263:32" pos:end="271:17">{<block_content pos:start="265:21" pos:end="269:39">

                    <expr_stmt pos:start="265:21" pos:end="265:55"><expr pos:start="265:21" pos:end="265:54"><call pos:start="265:21" pos:end="265:54"><name pos:start="265:21" pos:end="265:26">printf</name><argument_list pos:start="265:27" pos:end="265:54">(<argument pos:start="265:28" pos:end="265:53"><expr pos:start="265:28" pos:end="265:53"><literal type="string" pos:start="265:28" pos:end="265:53">"new pred not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="267:21" pos:end="267:41"><expr pos:start="267:21" pos:end="267:40"><call pos:start="267:21" pos:end="267:40"><name pos:start="267:21" pos:end="267:29">skip_bits</name><argument_list pos:start="267:30" pos:end="267:40">(<argument pos:start="267:31" pos:end="267:36"><expr pos:start="267:31" pos:end="267:36"><operator pos:start="267:31" pos:end="267:31">&amp;</operator><name pos:start="267:32" pos:end="267:36"><name pos:start="267:32" pos:end="267:32">s</name><operator pos:start="267:33" pos:end="267:34">-&gt;</operator><name pos:start="267:35" pos:end="267:36">gb</name></name></expr></argument>, <argument pos:start="267:39" pos:end="267:39"><expr pos:start="267:39" pos:end="267:39"><literal type="number" pos:start="267:39" pos:end="267:39">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="267:43" pos:end="267:79">/* requested upstream message type */</comment>

                    <expr_stmt pos:start="269:21" pos:end="269:39"><expr pos:start="269:21" pos:end="269:38"><call pos:start="269:21" pos:end="269:38"><name pos:start="269:21" pos:end="269:30">skip_bits1</name><argument_list pos:start="269:31" pos:end="269:38">(<argument pos:start="269:32" pos:end="269:37"><expr pos:start="269:32" pos:end="269:37"><operator pos:start="269:32" pos:end="269:32">&amp;</operator><name pos:start="269:33" pos:end="269:37"><name pos:start="269:33" pos:end="269:33">s</name><operator pos:start="269:34" pos:end="269:35">-&gt;</operator><name pos:start="269:36" pos:end="269:37">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="269:41" pos:end="269:66">/* newpred segment type */</comment>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="273:17" pos:end="273:54"><expr pos:start="273:17" pos:end="273:53"><name pos:start="273:17" pos:end="273:34"><name pos:start="273:17" pos:end="273:17">s</name><operator pos:start="273:18" pos:end="273:19">-&gt;</operator><name pos:start="273:20" pos:end="273:34">reduced_res_vop</name></name><operator pos:start="273:35" pos:end="273:35">=</operator> <call pos:start="273:37" pos:end="273:53"><name pos:start="273:37" pos:end="273:45">get_bits1</name><argument_list pos:start="273:46" pos:end="273:53">(<argument pos:start="273:47" pos:end="273:52"><expr pos:start="273:47" pos:end="273:52"><operator pos:start="273:47" pos:end="273:47">&amp;</operator><name pos:start="273:48" pos:end="273:52"><name pos:start="273:48" pos:end="273:48">s</name><operator pos:start="273:49" pos:end="273:50">-&gt;</operator><name pos:start="273:51" pos:end="273:52">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="275:17" pos:end="275:88"><if pos:start="275:17" pos:end="275:88">if<condition pos:start="275:19" pos:end="275:38">(<expr pos:start="275:20" pos:end="275:37"><name pos:start="275:20" pos:end="275:37"><name pos:start="275:20" pos:end="275:20">s</name><operator pos:start="275:21" pos:end="275:22">-&gt;</operator><name pos:start="275:23" pos:end="275:37">reduced_res_vop</name></name></expr>)</condition><block type="pseudo" pos:start="275:40" pos:end="275:88"><block_content pos:start="275:40" pos:end="275:88"> <expr_stmt pos:start="275:40" pos:end="275:88"><expr pos:start="275:40" pos:end="275:87"><call pos:start="275:40" pos:end="275:87"><name pos:start="275:40" pos:end="275:45">printf</name><argument_list pos:start="275:46" pos:end="275:87">(<argument pos:start="275:47" pos:end="275:86"><expr pos:start="275:47" pos:end="275:86"><literal type="string" pos:start="275:47" pos:end="275:86">"reduced resolution VOP not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if>

            <else pos:start="279:13" pos:end="285:13">else<block pos:start="279:17" pos:end="285:13">{<block_content pos:start="281:17" pos:end="283:38">

                <expr_stmt pos:start="281:17" pos:end="281:30"><expr pos:start="281:17" pos:end="281:29"><name pos:start="281:17" pos:end="281:27"><name pos:start="281:17" pos:end="281:17">s</name><operator pos:start="281:18" pos:end="281:19">-&gt;</operator><name pos:start="281:20" pos:end="281:27">new_pred</name></name><operator pos:start="281:28" pos:end="281:28">=</operator><literal type="number" pos:start="281:29" pos:end="281:29">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="283:17" pos:end="283:38"><expr pos:start="283:17" pos:end="283:37"><name pos:start="283:17" pos:end="283:34"><name pos:start="283:17" pos:end="283:17">s</name><operator pos:start="283:18" pos:end="283:19">-&gt;</operator><name pos:start="283:20" pos:end="283:34">reduced_res_vop</name></name><operator pos:start="283:35" pos:end="283:35">=</operator> <literal type="number" pos:start="283:37" pos:end="283:37">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="289:13" pos:end="289:46"><expr pos:start="289:13" pos:end="289:45"><name pos:start="289:13" pos:end="289:26"><name pos:start="289:13" pos:end="289:13">s</name><operator pos:start="289:14" pos:end="289:15">-&gt;</operator><name pos:start="289:16" pos:end="289:26">scalability</name></name><operator pos:start="289:27" pos:end="289:27">=</operator> <call pos:start="289:29" pos:end="289:45"><name pos:start="289:29" pos:end="289:37">get_bits1</name><argument_list pos:start="289:38" pos:end="289:45">(<argument pos:start="289:39" pos:end="289:44"><expr pos:start="289:39" pos:end="289:44"><operator pos:start="289:39" pos:end="289:39">&amp;</operator><name pos:start="289:40" pos:end="289:44"><name pos:start="289:40" pos:end="289:40">s</name><operator pos:start="289:41" pos:end="289:42">-&gt;</operator><name pos:start="289:43" pos:end="289:44">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="291:13" pos:end="297:13"><if pos:start="291:13" pos:end="297:13">if <condition pos:start="291:16" pos:end="291:31">(<expr pos:start="291:17" pos:end="291:30"><name pos:start="291:17" pos:end="291:30"><name pos:start="291:17" pos:end="291:17">s</name><operator pos:start="291:18" pos:end="291:19">-&gt;</operator><name pos:start="291:20" pos:end="291:30">scalability</name></name></expr>)</condition> <block pos:start="291:33" pos:end="297:13">{<block_content pos:start="293:17" pos:end="295:26">

                <expr_stmt pos:start="293:17" pos:end="293:47"><expr pos:start="293:17" pos:end="293:46"><call pos:start="293:17" pos:end="293:46"><name pos:start="293:17" pos:end="293:22">printf</name><argument_list pos:start="293:23" pos:end="293:46">(<argument pos:start="293:24" pos:end="293:45"><expr pos:start="293:24" pos:end="293:45"><literal type="string" pos:start="293:24" pos:end="293:45">"bad scalability!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="295:17" pos:end="295:26">return <expr pos:start="295:24" pos:end="295:25"><operator pos:start="295:24" pos:end="295:24">-</operator><literal type="number" pos:start="295:25" pos:end="295:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

<comment type="line" pos:start="301:1" pos:end="301:80">//printf("end Data %X %d\n", show_bits(&amp;s-&gt;gb, 32), get_bits_count(&amp;s-&gt;gb)&amp;0x7);</comment>

        <goto pos:start="303:9" pos:end="303:18">goto <name pos:start="303:14" pos:end="303:17">redo</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="305:7" pos:end="365:5">else if <condition pos:start="305:15" pos:end="305:34">(<expr pos:start="305:16" pos:end="305:33"><name pos:start="305:16" pos:end="305:24">startcode</name> <operator pos:start="305:26" pos:end="305:27">==</operator> <literal type="number" pos:start="305:29" pos:end="305:33">0x1b2</literal></expr>)</condition> <block pos:start="305:36" pos:end="365:5">{<block_content pos:start="307:9" pos:end="363:18"> <comment type="line" pos:start="305:38" pos:end="305:47">//userdata</comment>

        <decl_stmt pos:start="307:9" pos:end="307:22"><decl pos:start="307:9" pos:end="307:21"><type pos:start="307:9" pos:end="307:12"><name pos:start="307:9" pos:end="307:12">char</name></type> <name pos:start="307:14" pos:end="307:21"><name pos:start="307:14" pos:end="307:16">buf</name><index pos:start="307:17" pos:end="307:21">[<expr pos:start="307:18" pos:end="307:20"><literal type="number" pos:start="307:18" pos:end="307:20">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="309:9" pos:end="309:14"><decl pos:start="309:9" pos:end="309:13"><type pos:start="309:9" pos:end="309:11"><name pos:start="309:9" pos:end="309:11">int</name></type> <name pos:start="309:13" pos:end="309:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="311:9" pos:end="311:14"><decl pos:start="311:9" pos:end="311:13"><type pos:start="311:9" pos:end="311:11"><name pos:start="311:9" pos:end="311:11">int</name></type> <name pos:start="311:13" pos:end="311:13">e</name></decl>;</decl_stmt>

        <decl_stmt pos:start="313:9" pos:end="313:23"><decl pos:start="313:9" pos:end="313:15"><type pos:start="313:9" pos:end="313:11"><name pos:start="313:9" pos:end="313:11">int</name></type> <name pos:start="313:13" pos:end="313:15">ver</name></decl>, <decl pos:start="313:18" pos:end="313:22"><type ref="prev" pos:start="313:9" pos:end="313:11"/><name pos:start="313:18" pos:end="313:22">build</name></decl>;</decl_stmt>



<comment type="line" pos:start="317:1" pos:end="317:50">//printf("user Data %X\n", show_bits(&amp;s-&gt;gb, 32));</comment>

        <expr_stmt pos:start="319:9" pos:end="319:37"><expr pos:start="319:9" pos:end="319:36"><name pos:start="319:9" pos:end="319:14"><name pos:start="319:9" pos:end="319:11">buf</name><index pos:start="319:12" pos:end="319:14">[<expr pos:start="319:13" pos:end="319:13"><literal type="number" pos:start="319:13" pos:end="319:13">0</literal></expr>]</index></name><operator pos:start="319:15" pos:end="319:15">=</operator> <call pos:start="319:17" pos:end="319:36"><name pos:start="319:17" pos:end="319:25">show_bits</name><argument_list pos:start="319:26" pos:end="319:36">(<argument pos:start="319:27" pos:end="319:32"><expr pos:start="319:27" pos:end="319:32"><operator pos:start="319:27" pos:end="319:27">&amp;</operator><name pos:start="319:28" pos:end="319:32"><name pos:start="319:28" pos:end="319:28">s</name><operator pos:start="319:29" pos:end="319:30">-&gt;</operator><name pos:start="319:31" pos:end="319:32">gb</name></name></expr></argument>, <argument pos:start="319:35" pos:end="319:35"><expr pos:start="319:35" pos:end="319:35"><literal type="number" pos:start="319:35" pos:end="319:35">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="321:9" pos:end="329:9">for<control pos:start="321:12" pos:end="321:28">(<init pos:start="321:13" pos:end="321:16"><expr pos:start="321:13" pos:end="321:15"><name pos:start="321:13" pos:end="321:13">i</name><operator pos:start="321:14" pos:end="321:14">=</operator><literal type="number" pos:start="321:15" pos:end="321:15">1</literal></expr>;</init> <condition pos:start="321:18" pos:end="321:23"><expr pos:start="321:18" pos:end="321:22"><name pos:start="321:18" pos:end="321:18">i</name><operator pos:start="321:19" pos:end="321:19">&lt;</operator><literal type="number" pos:start="321:20" pos:end="321:22">256</literal></expr>;</condition> <incr pos:start="321:25" pos:end="321:27"><expr pos:start="321:25" pos:end="321:27"><name pos:start="321:25" pos:end="321:25">i</name><operator pos:start="321:26" pos:end="321:27">++</operator></expr></incr>)</control><block pos:start="321:29" pos:end="329:9">{<block_content pos:start="323:13" pos:end="327:33">

            <expr_stmt pos:start="323:13" pos:end="323:47"><expr pos:start="323:13" pos:end="323:46"><name pos:start="323:13" pos:end="323:18"><name pos:start="323:13" pos:end="323:15">buf</name><index pos:start="323:16" pos:end="323:18">[<expr pos:start="323:17" pos:end="323:17"><name pos:start="323:17" pos:end="323:17">i</name></expr>]</index></name><operator pos:start="323:19" pos:end="323:19">=</operator> <call pos:start="323:21" pos:end="323:41"><name pos:start="323:21" pos:end="323:29">show_bits</name><argument_list pos:start="323:30" pos:end="323:41">(<argument pos:start="323:31" pos:end="323:36"><expr pos:start="323:31" pos:end="323:36"><operator pos:start="323:31" pos:end="323:31">&amp;</operator><name pos:start="323:32" pos:end="323:36"><name pos:start="323:32" pos:end="323:32">s</name><operator pos:start="323:33" pos:end="323:34">-&gt;</operator><name pos:start="323:35" pos:end="323:36">gb</name></name></expr></argument>, <argument pos:start="323:39" pos:end="323:40"><expr pos:start="323:39" pos:end="323:40"><literal type="number" pos:start="323:39" pos:end="323:40">16</literal></expr></argument>)</argument_list></call><operator pos:start="323:42" pos:end="323:42">&amp;</operator><literal type="number" pos:start="323:43" pos:end="323:46">0xFF</literal></expr>;</expr_stmt>

            <if_stmt pos:start="325:13" pos:end="325:32"><if pos:start="325:13" pos:end="325:32">if<condition pos:start="325:15" pos:end="325:25">(<expr pos:start="325:16" pos:end="325:24"><name pos:start="325:16" pos:end="325:21"><name pos:start="325:16" pos:end="325:18">buf</name><index pos:start="325:19" pos:end="325:21">[<expr pos:start="325:20" pos:end="325:20"><name pos:start="325:20" pos:end="325:20">i</name></expr>]</index></name><operator pos:start="325:22" pos:end="325:23">==</operator><literal type="number" pos:start="325:24" pos:end="325:24">0</literal></expr>)</condition><block type="pseudo" pos:start="325:27" pos:end="325:32"><block_content pos:start="325:27" pos:end="325:32"> <break pos:start="325:27" pos:end="325:32">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="327:13" pos:end="327:33"><expr pos:start="327:13" pos:end="327:32"><call pos:start="327:13" pos:end="327:32"><name pos:start="327:13" pos:end="327:21">skip_bits</name><argument_list pos:start="327:22" pos:end="327:32">(<argument pos:start="327:23" pos:end="327:28"><expr pos:start="327:23" pos:end="327:28"><operator pos:start="327:23" pos:end="327:23">&amp;</operator><name pos:start="327:24" pos:end="327:28"><name pos:start="327:24" pos:end="327:24">s</name><operator pos:start="327:25" pos:end="327:26">-&gt;</operator><name pos:start="327:27" pos:end="327:28">gb</name></name></expr></argument>, <argument pos:start="327:31" pos:end="327:31"><expr pos:start="327:31" pos:end="327:31"><literal type="number" pos:start="327:31" pos:end="327:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="331:9" pos:end="331:19"><expr pos:start="331:9" pos:end="331:18"><name pos:start="331:9" pos:end="331:16"><name pos:start="331:9" pos:end="331:11">buf</name><index pos:start="331:12" pos:end="331:16">[<expr pos:start="331:13" pos:end="331:15"><literal type="number" pos:start="331:13" pos:end="331:15">255</literal></expr>]</index></name><operator pos:start="331:17" pos:end="331:17">=</operator><literal type="number" pos:start="331:18" pos:end="331:18">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:53"><expr pos:start="333:9" pos:end="333:52"><name pos:start="333:9" pos:end="333:9">e</name><operator pos:start="333:10" pos:end="333:10">=</operator><call pos:start="333:11" pos:end="333:52"><name pos:start="333:11" pos:end="333:16">sscanf</name><argument_list pos:start="333:17" pos:end="333:52">(<argument pos:start="333:18" pos:end="333:20"><expr pos:start="333:18" pos:end="333:20"><name pos:start="333:18" pos:end="333:20">buf</name></expr></argument>, <argument pos:start="333:23" pos:end="333:37"><expr pos:start="333:23" pos:end="333:37"><literal type="string" pos:start="333:23" pos:end="333:37">"DivX%dBuild%d"</literal></expr></argument>, <argument pos:start="333:40" pos:end="333:43"><expr pos:start="333:40" pos:end="333:43"><operator pos:start="333:40" pos:end="333:40">&amp;</operator><name pos:start="333:41" pos:end="333:43">ver</name></expr></argument>, <argument pos:start="333:46" pos:end="333:51"><expr pos:start="333:46" pos:end="333:51"><operator pos:start="333:46" pos:end="333:46">&amp;</operator><name pos:start="333:47" pos:end="333:51">build</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="335:9" pos:end="359:9"><if pos:start="335:9" pos:end="359:9">if<condition pos:start="335:11" pos:end="335:16">(<expr pos:start="335:12" pos:end="335:15"><name pos:start="335:12" pos:end="335:12">e</name><operator pos:start="335:13" pos:end="335:14">==</operator><literal type="number" pos:start="335:15" pos:end="335:15">2</literal></expr>)</condition><block pos:start="335:17" pos:end="359:9">{<block_content pos:start="337:13" pos:end="357:13">

            <expr_stmt pos:start="337:13" pos:end="337:33"><expr pos:start="337:13" pos:end="337:32"><name pos:start="337:13" pos:end="337:27"><name pos:start="337:13" pos:end="337:13">s</name><operator pos:start="337:14" pos:end="337:15">-&gt;</operator><name pos:start="337:16" pos:end="337:27">divx_version</name></name><operator pos:start="337:28" pos:end="337:28">=</operator> <name pos:start="337:30" pos:end="337:32">ver</name></expr>;</expr_stmt>

            <expr_stmt pos:start="339:13" pos:end="339:33"><expr pos:start="339:13" pos:end="339:32"><name pos:start="339:13" pos:end="339:25"><name pos:start="339:13" pos:end="339:13">s</name><operator pos:start="339:14" pos:end="339:15">-&gt;</operator><name pos:start="339:16" pos:end="339:25">divx_build</name></name><operator pos:start="339:26" pos:end="339:26">=</operator> <name pos:start="339:28" pos:end="339:32">build</name></expr>;</expr_stmt>

            <if_stmt pos:start="341:13" pos:end="357:13"><if pos:start="341:13" pos:end="357:13">if<condition pos:start="341:15" pos:end="341:36">(<expr pos:start="341:16" pos:end="341:35"><name pos:start="341:16" pos:end="341:32"><name pos:start="341:16" pos:end="341:16">s</name><operator pos:start="341:17" pos:end="341:18">-&gt;</operator><name pos:start="341:19" pos:end="341:32">picture_number</name></name><operator pos:start="341:33" pos:end="341:34">==</operator><literal type="number" pos:start="341:35" pos:end="341:35">0</literal></expr>)</condition><block pos:start="341:37" pos:end="357:13">{<block_content pos:start="343:17" pos:end="355:17">

                <expr_stmt pos:start="343:17" pos:end="343:82"><expr pos:start="343:17" pos:end="343:81"><call pos:start="343:17" pos:end="343:81"><name pos:start="343:17" pos:end="343:22">printf</name><argument_list pos:start="343:23" pos:end="343:81">(<argument pos:start="343:24" pos:end="343:68"><expr pos:start="343:24" pos:end="343:68"><literal type="string" pos:start="343:24" pos:end="343:68">"This file was encoded with DivX%d Build%d\n"</literal></expr></argument>, <argument pos:start="343:71" pos:end="343:73"><expr pos:start="343:71" pos:end="343:73"><name pos:start="343:71" pos:end="343:73">ver</name></expr></argument>, <argument pos:start="343:76" pos:end="343:80"><expr pos:start="343:76" pos:end="343:80"><name pos:start="343:76" pos:end="343:80">build</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="345:17" pos:end="355:17"><if pos:start="345:17" pos:end="349:17">if<condition pos:start="345:19" pos:end="345:42">(<expr pos:start="345:20" pos:end="345:41"><name pos:start="345:20" pos:end="345:22">ver</name><operator pos:start="345:23" pos:end="345:24">==</operator><literal type="number" pos:start="345:25" pos:end="345:27">500</literal> <operator pos:start="345:29" pos:end="345:30">&amp;&amp;</operator> <name pos:start="345:32" pos:end="345:36">build</name><operator pos:start="345:37" pos:end="345:38">==</operator><literal type="number" pos:start="345:39" pos:end="345:41">413</literal></expr>)</condition><block pos:start="345:43" pos:end="349:17">{<block_content pos:start="347:21" pos:end="347:122"> <comment type="line" pos:start="345:45" pos:end="345:119">//most likely all version are indeed totally buggy but i dunno for sure ...</comment>

                    <expr_stmt pos:start="347:21" pos:end="347:122"><expr pos:start="347:21" pos:end="347:121"><call pos:start="347:21" pos:end="347:121"><name pos:start="347:21" pos:end="347:26">printf</name><argument_list pos:start="347:27" pos:end="347:121">(<argument pos:start="347:28" pos:end="347:120"><expr pos:start="347:28" pos:end="347:120"><literal type="string" pos:start="347:28" pos:end="347:120">"WARNING: this version of DivX is not MPEG4 compatible, trying to workaround these bugs...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="349:18" pos:end="355:17">else<block pos:start="349:22" pos:end="355:17">{<block_content pos:start="351:21" pos:end="353:100">

                    <expr_stmt pos:start="351:21" pos:end="353:100"><expr pos:start="351:21" pos:end="353:99"><call pos:start="351:21" pos:end="353:99"><name pos:start="351:21" pos:end="351:26">printf</name><argument_list pos:start="351:27" pos:end="353:99">(<argument pos:start="351:28" pos:end="353:98"><expr pos:start="351:28" pos:end="353:98"><literal type="string" pos:start="351:28" pos:end="351:112">"hmm, i havnt seen that version of divx yet, lets assume they fixed these bugs ...\n"</literal>

                           <literal type="string" pos:start="353:28" pos:end="353:98">"using mpeg4 decoder, if it fails contact the developers (of ffmpeg)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

<comment type="line" pos:start="361:1" pos:end="361:33">//printf("User Data: %s\n", buf);</comment>

        <goto pos:start="363:9" pos:end="363:18">goto <name pos:start="363:14" pos:end="363:17">redo</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="365:7" pos:end="369:5">else if <condition pos:start="365:15" pos:end="365:34">(<expr pos:start="365:16" pos:end="365:33"><name pos:start="365:16" pos:end="365:24">startcode</name> <operator pos:start="365:26" pos:end="365:27">!=</operator> <literal type="number" pos:start="365:29" pos:end="365:33">0x1b6</literal></expr>)</condition> <block pos:start="365:36" pos:end="369:5">{<block_content pos:start="367:9" pos:end="367:18"> <comment type="line" pos:start="365:38" pos:end="365:42">//VOP</comment>

        <goto pos:start="367:9" pos:end="367:18">goto <name pos:start="367:14" pos:end="367:17">redo</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="373:5" pos:end="373:43"><expr pos:start="373:5" pos:end="373:42"><name pos:start="373:5" pos:end="373:16"><name pos:start="373:5" pos:end="373:5">s</name><operator pos:start="373:6" pos:end="373:7">-&gt;</operator><name pos:start="373:8" pos:end="373:16">pict_type</name></name> <operator pos:start="373:18" pos:end="373:18">=</operator> <call pos:start="373:20" pos:end="373:38"><name pos:start="373:20" pos:end="373:27">get_bits</name><argument_list pos:start="373:28" pos:end="373:38">(<argument pos:start="373:29" pos:end="373:34"><expr pos:start="373:29" pos:end="373:34"><operator pos:start="373:29" pos:end="373:29">&amp;</operator><name pos:start="373:30" pos:end="373:34"><name pos:start="373:30" pos:end="373:30">s</name><operator pos:start="373:31" pos:end="373:32">-&gt;</operator><name pos:start="373:33" pos:end="373:34">gb</name></name></expr></argument>, <argument pos:start="373:37" pos:end="373:37"><expr pos:start="373:37" pos:end="373:37"><literal type="number" pos:start="373:37" pos:end="373:37">2</literal></expr></argument>)</argument_list></call> <operator pos:start="373:40" pos:end="373:40">+</operator> <literal type="number" pos:start="373:42" pos:end="373:42">1</literal></expr>;</expr_stmt>	<comment type="block" pos:start="373:49" pos:end="373:78">/* pict type: I = 0 , P = 1 */</comment>

<comment type="line" pos:start="375:1" pos:end="375:37">//printf("pic: %d\n", s-&gt;pict_type); </comment>

    <expr_stmt pos:start="377:5" pos:end="377:16"><expr pos:start="377:5" pos:end="377:15"><name pos:start="377:5" pos:end="377:13">time_incr</name><operator pos:start="377:14" pos:end="377:14">=</operator><literal type="number" pos:start="377:15" pos:end="377:15">0</literal></expr>;</expr_stmt>

    <while pos:start="379:5" pos:end="381:20">while <condition pos:start="379:11" pos:end="379:34">(<expr pos:start="379:12" pos:end="379:33"><call pos:start="379:12" pos:end="379:28"><name pos:start="379:12" pos:end="379:20">get_bits1</name><argument_list pos:start="379:21" pos:end="379:28">(<argument pos:start="379:22" pos:end="379:27"><expr pos:start="379:22" pos:end="379:27"><operator pos:start="379:22" pos:end="379:22">&amp;</operator><name pos:start="379:23" pos:end="379:27"><name pos:start="379:23" pos:end="379:23">s</name><operator pos:start="379:24" pos:end="379:25">-&gt;</operator><name pos:start="379:26" pos:end="379:27">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="379:30" pos:end="379:31">!=</operator> <literal type="number" pos:start="379:33" pos:end="379:33">0</literal></expr>)</condition><block type="pseudo" pos:start="381:9" pos:end="381:20"><block_content pos:start="381:9" pos:end="381:20"> 

        <expr_stmt pos:start="381:9" pos:end="381:20"><expr pos:start="381:9" pos:end="381:19"><name pos:start="381:9" pos:end="381:17">time_incr</name><operator pos:start="381:18" pos:end="381:19">++</operator></expr>;</expr_stmt></block_content></block></while>



    <expr_stmt pos:start="385:5" pos:end="385:50"><expr pos:start="385:5" pos:end="385:49"><call pos:start="385:5" pos:end="385:49"><name pos:start="385:5" pos:end="385:16">check_marker</name><argument_list pos:start="385:17" pos:end="385:49">(<argument pos:start="385:18" pos:end="385:23"><expr pos:start="385:18" pos:end="385:23"><operator pos:start="385:18" pos:end="385:18">&amp;</operator><name pos:start="385:19" pos:end="385:23"><name pos:start="385:19" pos:end="385:19">s</name><operator pos:start="385:20" pos:end="385:21">-&gt;</operator><name pos:start="385:22" pos:end="385:23">gb</name></name></expr></argument>, <argument pos:start="385:26" pos:end="385:48"><expr pos:start="385:26" pos:end="385:48"><literal type="string" pos:start="385:26" pos:end="385:48">"before time_increment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="387:5" pos:end="387:64"><expr pos:start="387:5" pos:end="387:63"><name pos:start="387:5" pos:end="387:21"><name pos:start="387:5" pos:end="387:5">s</name><operator pos:start="387:6" pos:end="387:7">-&gt;</operator><name pos:start="387:8" pos:end="387:21">time_increment</name></name><operator pos:start="387:22" pos:end="387:22">=</operator> <call pos:start="387:24" pos:end="387:63"><name pos:start="387:24" pos:end="387:31">get_bits</name><argument_list pos:start="387:32" pos:end="387:63">(<argument pos:start="387:33" pos:end="387:38"><expr pos:start="387:33" pos:end="387:38"><operator pos:start="387:33" pos:end="387:33">&amp;</operator><name pos:start="387:34" pos:end="387:38"><name pos:start="387:34" pos:end="387:34">s</name><operator pos:start="387:35" pos:end="387:36">-&gt;</operator><name pos:start="387:37" pos:end="387:38">gb</name></name></expr></argument>, <argument pos:start="387:41" pos:end="387:62"><expr pos:start="387:41" pos:end="387:62"><name pos:start="387:41" pos:end="387:62"><name pos:start="387:41" pos:end="387:41">s</name><operator pos:start="387:42" pos:end="387:43">-&gt;</operator><name pos:start="387:44" pos:end="387:62">time_increment_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="389:5" pos:end="403:5"><if pos:start="389:5" pos:end="397:5">if<condition pos:start="389:7" pos:end="389:28">(<expr pos:start="389:8" pos:end="389:27"><name pos:start="389:8" pos:end="389:19"><name pos:start="389:8" pos:end="389:8">s</name><operator pos:start="389:9" pos:end="389:10">-&gt;</operator><name pos:start="389:11" pos:end="389:19">pict_type</name></name><operator pos:start="389:20" pos:end="389:21">!=</operator><name pos:start="389:22" pos:end="389:27">B_TYPE</name></expr>)</condition><block pos:start="389:29" pos:end="397:5">{<block_content pos:start="391:9" pos:end="395:93">

        <expr_stmt pos:start="391:9" pos:end="391:33"><expr pos:start="391:9" pos:end="391:32"><name pos:start="391:9" pos:end="391:20"><name pos:start="391:9" pos:end="391:9">s</name><operator pos:start="391:10" pos:end="391:11">-&gt;</operator><name pos:start="391:12" pos:end="391:20">time_base</name></name><operator pos:start="391:21" pos:end="391:22">+=</operator> <name pos:start="391:24" pos:end="391:32">time_incr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="393:9" pos:end="393:53"><expr pos:start="393:9" pos:end="393:52"><name pos:start="393:9" pos:end="393:29"><name pos:start="393:9" pos:end="393:9">s</name><operator pos:start="393:10" pos:end="393:11">-&gt;</operator><name pos:start="393:12" pos:end="393:26">last_non_b_time</name><index pos:start="393:27" pos:end="393:29">[<expr pos:start="393:28" pos:end="393:28"><literal type="number" pos:start="393:28" pos:end="393:28">1</literal></expr>]</index></name><operator pos:start="393:30" pos:end="393:30">=</operator> <name pos:start="393:32" pos:end="393:52"><name pos:start="393:32" pos:end="393:32">s</name><operator pos:start="393:33" pos:end="393:34">-&gt;</operator><name pos:start="393:35" pos:end="393:49">last_non_b_time</name><index pos:start="393:50" pos:end="393:52">[<expr pos:start="393:51" pos:end="393:51"><literal type="number" pos:start="393:51" pos:end="393:51">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="395:9" pos:end="395:93"><expr pos:start="395:9" pos:end="395:92"><name pos:start="395:9" pos:end="395:29"><name pos:start="395:9" pos:end="395:9">s</name><operator pos:start="395:10" pos:end="395:11">-&gt;</operator><name pos:start="395:12" pos:end="395:26">last_non_b_time</name><index pos:start="395:27" pos:end="395:29">[<expr pos:start="395:28" pos:end="395:28"><literal type="number" pos:start="395:28" pos:end="395:28">0</literal></expr>]</index></name><operator pos:start="395:30" pos:end="395:30">=</operator> <name pos:start="395:32" pos:end="395:43"><name pos:start="395:32" pos:end="395:32">s</name><operator pos:start="395:33" pos:end="395:34">-&gt;</operator><name pos:start="395:35" pos:end="395:43">time_base</name></name><operator pos:start="395:44" pos:end="395:44">*</operator><name pos:start="395:45" pos:end="395:72"><name pos:start="395:45" pos:end="395:45">s</name><operator pos:start="395:46" pos:end="395:47">-&gt;</operator><name pos:start="395:48" pos:end="395:72">time_increment_resolution</name></name> <operator pos:start="395:74" pos:end="395:74">+</operator> <name pos:start="395:76" pos:end="395:92"><name pos:start="395:76" pos:end="395:76">s</name><operator pos:start="395:77" pos:end="395:78">-&gt;</operator><name pos:start="395:79" pos:end="395:92">time_increment</name></name></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="397:6" pos:end="403:5">else<block pos:start="397:10" pos:end="403:5">{<block_content pos:start="399:9" pos:end="401:36">

        <expr_stmt pos:start="399:9" pos:end="399:111"><expr pos:start="399:9" pos:end="399:110"><name pos:start="399:9" pos:end="399:15"><name pos:start="399:9" pos:end="399:9">s</name><operator pos:start="399:10" pos:end="399:11">-&gt;</operator><name pos:start="399:12" pos:end="399:15">time</name></name><operator pos:start="399:16" pos:end="399:16">=</operator> <operator pos:start="399:18" pos:end="399:18">(</operator><name pos:start="399:19" pos:end="399:39"><name pos:start="399:19" pos:end="399:19">s</name><operator pos:start="399:20" pos:end="399:21">-&gt;</operator><name pos:start="399:22" pos:end="399:36">last_non_b_time</name><index pos:start="399:37" pos:end="399:39">[<expr pos:start="399:38" pos:end="399:38"><literal type="number" pos:start="399:38" pos:end="399:38">1</literal></expr>]</index></name><operator pos:start="399:40" pos:end="399:40">/</operator><name pos:start="399:41" pos:end="399:68"><name pos:start="399:41" pos:end="399:41">s</name><operator pos:start="399:42" pos:end="399:43">-&gt;</operator><name pos:start="399:44" pos:end="399:68">time_increment_resolution</name></name> <operator pos:start="399:70" pos:end="399:70">+</operator> <name pos:start="399:72" pos:end="399:80">time_incr</name><operator pos:start="399:81" pos:end="399:81">)</operator><operator pos:start="399:82" pos:end="399:82">*</operator><name pos:start="399:83" pos:end="399:110"><name pos:start="399:83" pos:end="399:83">s</name><operator pos:start="399:84" pos:end="399:85">-&gt;</operator><name pos:start="399:86" pos:end="399:110">time_increment_resolution</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="401:9" pos:end="401:36"><expr pos:start="401:9" pos:end="401:35"><name pos:start="401:9" pos:end="401:15"><name pos:start="401:9" pos:end="401:9">s</name><operator pos:start="401:10" pos:end="401:11">-&gt;</operator><name pos:start="401:12" pos:end="401:15">time</name></name><operator pos:start="401:16" pos:end="401:17">+=</operator> <name pos:start="401:19" pos:end="401:35"><name pos:start="401:19" pos:end="401:19">s</name><operator pos:start="401:20" pos:end="401:21">-&gt;</operator><name pos:start="401:22" pos:end="401:35">time_increment</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="407:5" pos:end="419:5"><if pos:start="407:5" pos:end="419:5">if<condition pos:start="407:7" pos:end="407:75">(<expr pos:start="407:8" pos:end="407:74"><call pos:start="407:8" pos:end="407:47"><name pos:start="407:8" pos:end="407:19">check_marker</name><argument_list pos:start="407:20" pos:end="407:47">(<argument pos:start="407:21" pos:end="407:26"><expr pos:start="407:21" pos:end="407:26"><operator pos:start="407:21" pos:end="407:21">&amp;</operator><name pos:start="407:22" pos:end="407:26"><name pos:start="407:22" pos:end="407:22">s</name><operator pos:start="407:23" pos:end="407:24">-&gt;</operator><name pos:start="407:25" pos:end="407:26">gb</name></name></expr></argument>, <argument pos:start="407:29" pos:end="407:46"><expr pos:start="407:29" pos:end="407:46"><literal type="string" pos:start="407:29" pos:end="407:46">"before vop_coded"</literal></expr></argument>)</argument_list></call><operator pos:start="407:48" pos:end="407:49">==</operator><literal type="number" pos:start="407:50" pos:end="407:50">0</literal> <operator pos:start="407:52" pos:end="407:53">&amp;&amp;</operator> <name pos:start="407:55" pos:end="407:71"><name pos:start="407:55" pos:end="407:55">s</name><operator pos:start="407:56" pos:end="407:57">-&gt;</operator><name pos:start="407:58" pos:end="407:71">picture_number</name></name><operator pos:start="407:72" pos:end="407:73">==</operator><literal type="number" pos:start="407:74" pos:end="407:74">0</literal></expr>)</condition><block pos:start="407:76" pos:end="419:5">{<block_content pos:start="409:9" pos:end="417:66">

        <expr_stmt pos:start="409:9" pos:end="409:94"><expr pos:start="409:9" pos:end="409:93"><call pos:start="409:9" pos:end="409:93"><name pos:start="409:9" pos:end="409:14">printf</name><argument_list pos:start="409:15" pos:end="409:93">(<argument pos:start="409:16" pos:end="409:92"><expr pos:start="409:16" pos:end="409:92"><literal type="string" pos:start="409:16" pos:end="409:92">"hmm, seems the headers arnt complete, trying to guess time_increment_bits\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="411:9" pos:end="415:9">for<control pos:start="411:12" pos:end="411:90">(<init pos:start="411:13" pos:end="411:38"><expr pos:start="411:13" pos:end="411:36"><name pos:start="411:13" pos:end="411:34"><name pos:start="411:13" pos:end="411:13">s</name><operator pos:start="411:14" pos:end="411:15">-&gt;</operator><name pos:start="411:16" pos:end="411:34">time_increment_bits</name></name><operator pos:start="411:35" pos:end="411:36">++</operator></expr> ;</init><condition pos:start="411:39" pos:end="411:64"><expr pos:start="411:39" pos:end="411:63"><name pos:start="411:39" pos:end="411:60"><name pos:start="411:39" pos:end="411:39">s</name><operator pos:start="411:40" pos:end="411:41">-&gt;</operator><name pos:start="411:42" pos:end="411:60">time_increment_bits</name></name><operator pos:start="411:61" pos:end="411:61">&lt;</operator><literal type="number" pos:start="411:62" pos:end="411:63">16</literal></expr>;</condition> <incr pos:start="411:66" pos:end="411:89"><expr pos:start="411:66" pos:end="411:89"><name pos:start="411:66" pos:end="411:87"><name pos:start="411:66" pos:end="411:66">s</name><operator pos:start="411:67" pos:end="411:68">-&gt;</operator><name pos:start="411:69" pos:end="411:87">time_increment_bits</name></name><operator pos:start="411:88" pos:end="411:89">++</operator></expr></incr>)</control><block pos:start="411:91" pos:end="415:9">{<block_content pos:start="413:13" pos:end="413:40">

            <if_stmt pos:start="413:13" pos:end="413:40"><if pos:start="413:13" pos:end="413:40">if<condition pos:start="413:15" pos:end="413:33">(<expr pos:start="413:16" pos:end="413:32"><call pos:start="413:16" pos:end="413:32"><name pos:start="413:16" pos:end="413:24">get_bits1</name><argument_list pos:start="413:25" pos:end="413:32">(<argument pos:start="413:26" pos:end="413:31"><expr pos:start="413:26" pos:end="413:31"><operator pos:start="413:26" pos:end="413:26">&amp;</operator><name pos:start="413:27" pos:end="413:31"><name pos:start="413:27" pos:end="413:27">s</name><operator pos:start="413:28" pos:end="413:29">-&gt;</operator><name pos:start="413:30" pos:end="413:31">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="413:35" pos:end="413:40"><block_content pos:start="413:35" pos:end="413:40"> <break pos:start="413:35" pos:end="413:40">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="417:9" pos:end="417:66"><expr pos:start="417:9" pos:end="417:65"><call pos:start="417:9" pos:end="417:65"><name pos:start="417:9" pos:end="417:14">printf</name><argument_list pos:start="417:15" pos:end="417:65">(<argument pos:start="417:16" pos:end="417:41"><expr pos:start="417:16" pos:end="417:41"><literal type="string" pos:start="417:16" pos:end="417:41">"my guess is %d bits ;)\n"</literal></expr></argument>,<argument pos:start="417:43" pos:end="417:64"><expr pos:start="417:43" pos:end="417:64"><name pos:start="417:43" pos:end="417:64"><name pos:start="417:43" pos:end="417:43">s</name><operator pos:start="417:44" pos:end="417:45">-&gt;</operator><name pos:start="417:46" pos:end="417:64">time_increment_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="421:5" pos:end="421:19">/* vop coded */</comment>

    <if_stmt pos:start="423:5" pos:end="425:18"><if pos:start="423:5" pos:end="425:18">if <condition pos:start="423:8" pos:end="423:31">(<expr pos:start="423:9" pos:end="423:30"><call pos:start="423:9" pos:end="423:25"><name pos:start="423:9" pos:end="423:17">get_bits1</name><argument_list pos:start="423:18" pos:end="423:25">(<argument pos:start="423:19" pos:end="423:24"><expr pos:start="423:19" pos:end="423:24"><operator pos:start="423:19" pos:end="423:19">&amp;</operator><name pos:start="423:20" pos:end="423:24"><name pos:start="423:20" pos:end="423:20">s</name><operator pos:start="423:21" pos:end="423:22">-&gt;</operator><name pos:start="423:23" pos:end="423:24">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="423:27" pos:end="423:28">!=</operator> <literal type="number" pos:start="423:30" pos:end="423:30">1</literal></expr>)</condition><block type="pseudo" pos:start="425:9" pos:end="425:18"><block_content pos:start="425:9" pos:end="425:18">

        <goto pos:start="425:9" pos:end="425:18">goto <name pos:start="425:14" pos:end="425:17">redo</name>;</goto></block_content></block></if></if_stmt>

<comment type="line" pos:start="427:1" pos:end="427:96">//printf("time %d %d %d || %d %d %d\n", s-&gt;time_increment_bits, s-&gt;time_increment, s-&gt;time_base,</comment>

<comment type="line" pos:start="429:1" pos:end="429:59">//s-&gt;time, s-&gt;last_non_b_time[0], s-&gt;last_non_b_time[1]);  </comment>

    <if_stmt pos:start="431:5" pos:end="443:5"><if pos:start="431:5" pos:end="439:5">if <condition pos:start="431:8" pos:end="433:90">(<expr pos:start="431:9" pos:end="433:89"><name pos:start="431:9" pos:end="431:16"><name pos:start="431:9" pos:end="431:9">s</name><operator pos:start="431:10" pos:end="431:11">-&gt;</operator><name pos:start="431:12" pos:end="431:16">shape</name></name> <operator pos:start="431:18" pos:end="431:19">!=</operator> <name pos:start="431:21" pos:end="431:34">BIN_ONLY_SHAPE</name> <operator pos:start="431:36" pos:end="431:37">&amp;&amp;</operator> <operator pos:start="431:39" pos:end="431:39">(</operator> <name pos:start="431:41" pos:end="431:52"><name pos:start="431:41" pos:end="431:41">s</name><operator pos:start="431:42" pos:end="431:43">-&gt;</operator><name pos:start="431:44" pos:end="431:52">pict_type</name></name> <operator pos:start="431:54" pos:end="431:55">==</operator> <name pos:start="431:57" pos:end="431:62">P_TYPE</name>

                          <operator pos:start="433:27" pos:end="433:28">||</operator> <operator pos:start="433:30" pos:end="433:30">(</operator><name pos:start="433:31" pos:end="433:42"><name pos:start="433:31" pos:end="433:31">s</name><operator pos:start="433:32" pos:end="433:33">-&gt;</operator><name pos:start="433:34" pos:end="433:42">pict_type</name></name> <operator pos:start="433:44" pos:end="433:45">==</operator> <name pos:start="433:47" pos:end="433:52">S_TYPE</name> <operator pos:start="433:54" pos:end="433:55">&amp;&amp;</operator> <name pos:start="433:57" pos:end="433:75"><name pos:start="433:57" pos:end="433:57">s</name><operator pos:start="433:58" pos:end="433:59">-&gt;</operator><name pos:start="433:60" pos:end="433:75">vol_sprite_usage</name></name><operator pos:start="433:76" pos:end="433:77">==</operator><name pos:start="433:78" pos:end="433:87">GMC_SPRITE</name><operator pos:start="433:88" pos:end="433:88">)</operator><operator pos:start="433:89" pos:end="433:89">)</operator></expr>)</condition> <block pos:start="433:92" pos:end="439:5">{<block_content pos:start="437:9" pos:end="437:43">

        <comment type="block" pos:start="435:9" pos:end="435:49">/* rounding type for motion estimation */</comment>

	<expr_stmt pos:start="437:9" pos:end="437:43"><expr pos:start="437:9" pos:end="437:42"><name pos:start="437:9" pos:end="437:22"><name pos:start="437:9" pos:end="437:9">s</name><operator pos:start="437:10" pos:end="437:11">-&gt;</operator><name pos:start="437:12" pos:end="437:22">no_rounding</name></name> <operator pos:start="437:24" pos:end="437:24">=</operator> <call pos:start="437:26" pos:end="437:42"><name pos:start="437:26" pos:end="437:34">get_bits1</name><argument_list pos:start="437:35" pos:end="437:42">(<argument pos:start="437:36" pos:end="437:41"><expr pos:start="437:36" pos:end="437:41"><operator pos:start="437:36" pos:end="437:36">&amp;</operator><name pos:start="437:37" pos:end="437:41"><name pos:start="437:37" pos:end="437:37">s</name><operator pos:start="437:38" pos:end="437:39">-&gt;</operator><name pos:start="437:40" pos:end="437:41">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="439:7" pos:end="443:5">else <block pos:start="439:12" pos:end="443:5">{<block_content pos:start="441:9" pos:end="441:27">

	<expr_stmt pos:start="441:9" pos:end="441:27"><expr pos:start="441:9" pos:end="441:26"><name pos:start="441:9" pos:end="441:22"><name pos:start="441:9" pos:end="441:9">s</name><operator pos:start="441:10" pos:end="441:11">-&gt;</operator><name pos:start="441:12" pos:end="441:22">no_rounding</name></name> <operator pos:start="441:24" pos:end="441:24">=</operator> <literal type="number" pos:start="441:26" pos:end="441:26">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<comment type="line" pos:start="445:1" pos:end="445:25">//FIXME reduced res stuff</comment>



     <if_stmt pos:start="449:6" pos:end="483:6"><if pos:start="449:6" pos:end="483:6">if <condition pos:start="449:9" pos:end="449:32">(<expr pos:start="449:10" pos:end="449:31"><name pos:start="449:10" pos:end="449:17"><name pos:start="449:10" pos:end="449:10">s</name><operator pos:start="449:11" pos:end="449:12">-&gt;</operator><name pos:start="449:13" pos:end="449:17">shape</name></name> <operator pos:start="449:19" pos:end="449:20">!=</operator> <name pos:start="449:22" pos:end="449:31">RECT_SHAPE</name></expr>)</condition> <block pos:start="449:34" pos:end="483:6">{<block_content pos:start="451:10" pos:end="481:10">

         <if_stmt pos:start="451:10" pos:end="471:10"><if pos:start="451:10" pos:end="471:10">if <condition pos:start="451:13" pos:end="451:64">(<expr pos:start="451:14" pos:end="451:63"><name pos:start="451:14" pos:end="451:32"><name pos:start="451:14" pos:end="451:14">s</name><operator pos:start="451:15" pos:end="451:16">-&gt;</operator><name pos:start="451:17" pos:end="451:32">vol_sprite_usage</name></name> <operator pos:start="451:34" pos:end="451:35">!=</operator> <literal type="number" pos:start="451:37" pos:end="451:37">1</literal> <operator pos:start="451:39" pos:end="451:40">||</operator> <name pos:start="451:42" pos:end="451:53"><name pos:start="451:42" pos:end="451:42">s</name><operator pos:start="451:43" pos:end="451:44">-&gt;</operator><name pos:start="451:45" pos:end="451:53">pict_type</name></name> <operator pos:start="451:55" pos:end="451:56">!=</operator> <name pos:start="451:58" pos:end="451:63">I_TYPE</name></expr>)</condition> <block pos:start="451:66" pos:end="471:10">{<block_content pos:start="453:14" pos:end="469:49">

             <decl_stmt pos:start="453:14" pos:end="453:59"><decl pos:start="453:14" pos:end="453:22"><type pos:start="453:14" pos:end="453:16"><name pos:start="453:14" pos:end="453:16">int</name></type> <name pos:start="453:18" pos:end="453:22">width</name></decl>, <decl pos:start="453:25" pos:end="453:30"><type ref="prev" pos:start="453:14" pos:end="453:16"/><name pos:start="453:25" pos:end="453:30">height</name></decl>, <decl pos:start="453:33" pos:end="453:44"><type ref="prev" pos:start="453:14" pos:end="453:16"/><name pos:start="453:33" pos:end="453:44">hor_spat_ref</name></decl>, <decl pos:start="453:47" pos:end="453:58"><type ref="prev" pos:start="453:14" pos:end="453:16"/><name pos:start="453:47" pos:end="453:58">ver_spat_ref</name></decl>;</decl_stmt>

 

             <expr_stmt pos:start="457:14" pos:end="457:42"><expr pos:start="457:14" pos:end="457:41"><name pos:start="457:14" pos:end="457:18">width</name> <operator pos:start="457:20" pos:end="457:20">=</operator> <call pos:start="457:22" pos:end="457:41"><name pos:start="457:22" pos:end="457:29">get_bits</name><argument_list pos:start="457:30" pos:end="457:41">(<argument pos:start="457:31" pos:end="457:36"><expr pos:start="457:31" pos:end="457:36"><operator pos:start="457:31" pos:end="457:31">&amp;</operator><name pos:start="457:32" pos:end="457:36"><name pos:start="457:32" pos:end="457:32">s</name><operator pos:start="457:33" pos:end="457:34">-&gt;</operator><name pos:start="457:35" pos:end="457:36">gb</name></name></expr></argument>, <argument pos:start="457:39" pos:end="457:40"><expr pos:start="457:39" pos:end="457:40"><literal type="number" pos:start="457:39" pos:end="457:40">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

             <expr_stmt pos:start="459:14" pos:end="459:32"><expr pos:start="459:14" pos:end="459:31"><call pos:start="459:14" pos:end="459:31"><name pos:start="459:14" pos:end="459:23">skip_bits1</name><argument_list pos:start="459:24" pos:end="459:31">(<argument pos:start="459:25" pos:end="459:30"><expr pos:start="459:25" pos:end="459:30"><operator pos:start="459:25" pos:end="459:25">&amp;</operator><name pos:start="459:26" pos:end="459:30"><name pos:start="459:26" pos:end="459:26">s</name><operator pos:start="459:27" pos:end="459:28">-&gt;</operator><name pos:start="459:29" pos:end="459:30">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="459:36" pos:end="459:47">/* marker */</comment>

             <expr_stmt pos:start="461:14" pos:end="461:43"><expr pos:start="461:14" pos:end="461:42"><name pos:start="461:14" pos:end="461:19">height</name> <operator pos:start="461:21" pos:end="461:21">=</operator> <call pos:start="461:23" pos:end="461:42"><name pos:start="461:23" pos:end="461:30">get_bits</name><argument_list pos:start="461:31" pos:end="461:42">(<argument pos:start="461:32" pos:end="461:37"><expr pos:start="461:32" pos:end="461:37"><operator pos:start="461:32" pos:end="461:32">&amp;</operator><name pos:start="461:33" pos:end="461:37"><name pos:start="461:33" pos:end="461:33">s</name><operator pos:start="461:34" pos:end="461:35">-&gt;</operator><name pos:start="461:36" pos:end="461:37">gb</name></name></expr></argument>, <argument pos:start="461:40" pos:end="461:41"><expr pos:start="461:40" pos:end="461:41"><literal type="number" pos:start="461:40" pos:end="461:41">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

             <expr_stmt pos:start="463:14" pos:end="463:32"><expr pos:start="463:14" pos:end="463:31"><call pos:start="463:14" pos:end="463:31"><name pos:start="463:14" pos:end="463:23">skip_bits1</name><argument_list pos:start="463:24" pos:end="463:31">(<argument pos:start="463:25" pos:end="463:30"><expr pos:start="463:25" pos:end="463:30"><operator pos:start="463:25" pos:end="463:25">&amp;</operator><name pos:start="463:26" pos:end="463:30"><name pos:start="463:26" pos:end="463:26">s</name><operator pos:start="463:27" pos:end="463:28">-&gt;</operator><name pos:start="463:29" pos:end="463:30">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="463:36" pos:end="463:47">/* marker */</comment>

             <expr_stmt pos:start="465:14" pos:end="465:49"><expr pos:start="465:14" pos:end="465:48"><name pos:start="465:14" pos:end="465:25">hor_spat_ref</name> <operator pos:start="465:27" pos:end="465:27">=</operator> <call pos:start="465:29" pos:end="465:48"><name pos:start="465:29" pos:end="465:36">get_bits</name><argument_list pos:start="465:37" pos:end="465:48">(<argument pos:start="465:38" pos:end="465:43"><expr pos:start="465:38" pos:end="465:43"><operator pos:start="465:38" pos:end="465:38">&amp;</operator><name pos:start="465:39" pos:end="465:43"><name pos:start="465:39" pos:end="465:39">s</name><operator pos:start="465:40" pos:end="465:41">-&gt;</operator><name pos:start="465:42" pos:end="465:43">gb</name></name></expr></argument>, <argument pos:start="465:46" pos:end="465:47"><expr pos:start="465:46" pos:end="465:47"><literal type="number" pos:start="465:46" pos:end="465:47">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="465:51" pos:end="465:68">/* hor_spat_ref */</comment>

             <expr_stmt pos:start="467:14" pos:end="467:32"><expr pos:start="467:14" pos:end="467:31"><call pos:start="467:14" pos:end="467:31"><name pos:start="467:14" pos:end="467:23">skip_bits1</name><argument_list pos:start="467:24" pos:end="467:31">(<argument pos:start="467:25" pos:end="467:30"><expr pos:start="467:25" pos:end="467:30"><operator pos:start="467:25" pos:end="467:25">&amp;</operator><name pos:start="467:26" pos:end="467:30"><name pos:start="467:26" pos:end="467:26">s</name><operator pos:start="467:27" pos:end="467:28">-&gt;</operator><name pos:start="467:29" pos:end="467:30">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="467:36" pos:end="467:47">/* marker */</comment>

             <expr_stmt pos:start="469:14" pos:end="469:49"><expr pos:start="469:14" pos:end="469:48"><name pos:start="469:14" pos:end="469:25">ver_spat_ref</name> <operator pos:start="469:27" pos:end="469:27">=</operator> <call pos:start="469:29" pos:end="469:48"><name pos:start="469:29" pos:end="469:36">get_bits</name><argument_list pos:start="469:37" pos:end="469:48">(<argument pos:start="469:38" pos:end="469:43"><expr pos:start="469:38" pos:end="469:43"><operator pos:start="469:38" pos:end="469:38">&amp;</operator><name pos:start="469:39" pos:end="469:43"><name pos:start="469:39" pos:end="469:39">s</name><operator pos:start="469:40" pos:end="469:41">-&gt;</operator><name pos:start="469:42" pos:end="469:43">gb</name></name></expr></argument>, <argument pos:start="469:46" pos:end="469:47"><expr pos:start="469:46" pos:end="469:47"><literal type="number" pos:start="469:46" pos:end="469:47">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="469:51" pos:end="469:68">/* ver_spat_ref */</comment>

         </block_content>}</block></if></if_stmt>

         <expr_stmt pos:start="473:10" pos:end="473:28"><expr pos:start="473:10" pos:end="473:27"><call pos:start="473:10" pos:end="473:27"><name pos:start="473:10" pos:end="473:19">skip_bits1</name><argument_list pos:start="473:20" pos:end="473:27">(<argument pos:start="473:21" pos:end="473:26"><expr pos:start="473:21" pos:end="473:26"><operator pos:start="473:21" pos:end="473:21">&amp;</operator><name pos:start="473:22" pos:end="473:26"><name pos:start="473:22" pos:end="473:22">s</name><operator pos:start="473:23" pos:end="473:24">-&gt;</operator><name pos:start="473:25" pos:end="473:26">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="473:30" pos:end="473:52">/* change_CR_disable */</comment>

 

         <if_stmt pos:start="477:10" pos:end="481:10"><if pos:start="477:10" pos:end="481:10">if <condition pos:start="477:13" pos:end="477:36">(<expr pos:start="477:14" pos:end="477:35"><call pos:start="477:14" pos:end="477:30"><name pos:start="477:14" pos:end="477:22">get_bits1</name><argument_list pos:start="477:23" pos:end="477:30">(<argument pos:start="477:24" pos:end="477:29"><expr pos:start="477:24" pos:end="477:29"><operator pos:start="477:24" pos:end="477:24">&amp;</operator><name pos:start="477:25" pos:end="477:29"><name pos:start="477:25" pos:end="477:25">s</name><operator pos:start="477:26" pos:end="477:27">-&gt;</operator><name pos:start="477:28" pos:end="477:29">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="477:32" pos:end="477:33">!=</operator> <literal type="number" pos:start="477:35" pos:end="477:35">0</literal></expr>)</condition> <block pos:start="477:38" pos:end="481:10">{<block_content pos:start="479:14" pos:end="479:34">

             <expr_stmt pos:start="479:14" pos:end="479:34"><expr pos:start="479:14" pos:end="479:33"><call pos:start="479:14" pos:end="479:33"><name pos:start="479:14" pos:end="479:22">skip_bits</name><argument_list pos:start="479:23" pos:end="479:33">(<argument pos:start="479:24" pos:end="479:29"><expr pos:start="479:24" pos:end="479:29"><operator pos:start="479:24" pos:end="479:24">&amp;</operator><name pos:start="479:25" pos:end="479:29"><name pos:start="479:25" pos:end="479:25">s</name><operator pos:start="479:26" pos:end="479:27">-&gt;</operator><name pos:start="479:28" pos:end="479:29">gb</name></name></expr></argument>, <argument pos:start="479:32" pos:end="479:32"><expr pos:start="479:32" pos:end="479:32"><literal type="number" pos:start="479:32" pos:end="479:32">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="479:36" pos:end="479:61">/* constant_alpha_value */</comment>

         </block_content>}</block></if></if_stmt>

     </block_content>}</block></if></if_stmt>

<comment type="line" pos:start="485:1" pos:end="485:35">//FIXME complexity estimation stuff</comment>

     

     <if_stmt pos:start="489:6" pos:end="495:6"><if pos:start="489:6" pos:end="495:6">if <condition pos:start="489:9" pos:end="489:36">(<expr pos:start="489:10" pos:end="489:35"><name pos:start="489:10" pos:end="489:17"><name pos:start="489:10" pos:end="489:10">s</name><operator pos:start="489:11" pos:end="489:12">-&gt;</operator><name pos:start="489:13" pos:end="489:17">shape</name></name> <operator pos:start="489:19" pos:end="489:20">!=</operator> <name pos:start="489:22" pos:end="489:35">BIN_ONLY_SHAPE</name></expr>)</condition> <block pos:start="489:38" pos:end="495:6">{<block_content pos:start="491:10" pos:end="491:30">

         <expr_stmt pos:start="491:10" pos:end="491:30"><expr pos:start="491:10" pos:end="491:29"><call pos:start="491:10" pos:end="491:29"><name pos:start="491:10" pos:end="491:18">skip_bits</name><argument_list pos:start="491:19" pos:end="491:29">(<argument pos:start="491:20" pos:end="491:25"><expr pos:start="491:20" pos:end="491:25"><operator pos:start="491:20" pos:end="491:20">&amp;</operator><name pos:start="491:21" pos:end="491:25"><name pos:start="491:21" pos:end="491:21">s</name><operator pos:start="491:22" pos:end="491:23">-&gt;</operator><name pos:start="491:24" pos:end="491:25">gb</name></name></expr></argument>, <argument pos:start="491:28" pos:end="491:28"><expr pos:start="491:28" pos:end="491:28"><literal type="number" pos:start="491:28" pos:end="491:28">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="491:32" pos:end="491:59">/* intra dc VLC threshold */</comment>

         <comment type="line" pos:start="493:10" pos:end="493:41">//FIXME interlaced specific bits</comment>

     </block_content>}</block></if></if_stmt>



     <if_stmt pos:start="499:6" pos:end="511:6"><if pos:start="499:6" pos:end="511:6">if<condition pos:start="499:8" pos:end="499:106">(<expr pos:start="499:9" pos:end="499:105"><name pos:start="499:9" pos:end="499:20"><name pos:start="499:9" pos:end="499:9">s</name><operator pos:start="499:10" pos:end="499:11">-&gt;</operator><name pos:start="499:12" pos:end="499:20">pict_type</name></name> <operator pos:start="499:22" pos:end="499:23">==</operator> <name pos:start="499:25" pos:end="499:30">S_TYPE</name> <operator pos:start="499:32" pos:end="499:33">&amp;&amp;</operator> <operator pos:start="499:35" pos:end="499:35">(</operator><name pos:start="499:36" pos:end="499:54"><name pos:start="499:36" pos:end="499:36">s</name><operator pos:start="499:37" pos:end="499:38">-&gt;</operator><name pos:start="499:39" pos:end="499:54">vol_sprite_usage</name></name><operator pos:start="499:55" pos:end="499:56">==</operator><name pos:start="499:57" pos:end="499:69">STATIC_SPRITE</name> <operator pos:start="499:71" pos:end="499:72">||</operator> <name pos:start="499:74" pos:end="499:92"><name pos:start="499:74" pos:end="499:74">s</name><operator pos:start="499:75" pos:end="499:76">-&gt;</operator><name pos:start="499:77" pos:end="499:92">vol_sprite_usage</name></name><operator pos:start="499:93" pos:end="499:94">==</operator><name pos:start="499:95" pos:end="499:104">GMC_SPRITE</name><operator pos:start="499:105" pos:end="499:105">)</operator></expr>)</condition><block pos:start="499:107" pos:end="511:6">{<block_content pos:start="501:10" pos:end="509:88">

         <if_stmt pos:start="501:10" pos:end="505:10"><if pos:start="501:10" pos:end="505:10">if<condition pos:start="501:12" pos:end="501:41">(<expr pos:start="501:13" pos:end="501:40"><name pos:start="501:13" pos:end="501:40"><name pos:start="501:13" pos:end="501:13">s</name><operator pos:start="501:14" pos:end="501:15">-&gt;</operator><name pos:start="501:16" pos:end="501:40">num_sprite_warping_points</name></name></expr>)</condition><block pos:start="501:42" pos:end="505:10">{<block_content pos:start="503:14" pos:end="503:47">

             <expr_stmt pos:start="503:14" pos:end="503:47"><expr pos:start="503:14" pos:end="503:46"><call pos:start="503:14" pos:end="503:46"><name pos:start="503:14" pos:end="503:43">mpeg4_decode_sprite_trajectory</name><argument_list pos:start="503:44" pos:end="503:46">(<argument pos:start="503:45" pos:end="503:45"><expr pos:start="503:45" pos:end="503:45"><name pos:start="503:45" pos:end="503:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         </block_content>}</block></if></if_stmt>

         <if_stmt pos:start="507:10" pos:end="507:92"><if pos:start="507:10" pos:end="507:92">if<condition pos:start="507:12" pos:end="507:40">(<expr pos:start="507:13" pos:end="507:39"><name pos:start="507:13" pos:end="507:39"><name pos:start="507:13" pos:end="507:13">s</name><operator pos:start="507:14" pos:end="507:15">-&gt;</operator><name pos:start="507:16" pos:end="507:39">sprite_brightness_change</name></name></expr>)</condition><block type="pseudo" pos:start="507:42" pos:end="507:92"><block_content pos:start="507:42" pos:end="507:92"> <expr_stmt pos:start="507:42" pos:end="507:92"><expr pos:start="507:42" pos:end="507:91"><call pos:start="507:42" pos:end="507:91"><name pos:start="507:42" pos:end="507:47">printf</name><argument_list pos:start="507:48" pos:end="507:91">(<argument pos:start="507:49" pos:end="507:90"><expr pos:start="507:49" pos:end="507:90"><literal type="string" pos:start="507:49" pos:end="507:90">"sprite_brightness_change not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

         <if_stmt pos:start="509:10" pos:end="509:88"><if pos:start="509:10" pos:end="509:88">if<condition pos:start="509:12" pos:end="509:47">(<expr pos:start="509:13" pos:end="509:46"><name pos:start="509:13" pos:end="509:31"><name pos:start="509:13" pos:end="509:13">s</name><operator pos:start="509:14" pos:end="509:15">-&gt;</operator><name pos:start="509:16" pos:end="509:31">vol_sprite_usage</name></name><operator pos:start="509:32" pos:end="509:33">==</operator><name pos:start="509:34" pos:end="509:46">STATIC_SPRITE</name></expr>)</condition><block type="pseudo" pos:start="509:49" pos:end="509:88"><block_content pos:start="509:49" pos:end="509:88"> <expr_stmt pos:start="509:49" pos:end="509:88"><expr pos:start="509:49" pos:end="509:87"><call pos:start="509:49" pos:end="509:87"><name pos:start="509:49" pos:end="509:54">printf</name><argument_list pos:start="509:55" pos:end="509:87">(<argument pos:start="509:56" pos:end="509:86"><expr pos:start="509:56" pos:end="509:86"><literal type="string" pos:start="509:56" pos:end="509:86">"static sprite not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

     </block_content>}</block></if></if_stmt>



     <if_stmt pos:start="515:6" pos:end="571:6"><if pos:start="515:6" pos:end="571:6">if <condition pos:start="515:9" pos:end="515:36">(<expr pos:start="515:10" pos:end="515:35"><name pos:start="515:10" pos:end="515:17"><name pos:start="515:10" pos:end="515:10">s</name><operator pos:start="515:11" pos:end="515:12">-&gt;</operator><name pos:start="515:13" pos:end="515:17">shape</name></name> <operator pos:start="515:19" pos:end="515:20">!=</operator> <name pos:start="515:22" pos:end="515:35">BIN_ONLY_SHAPE</name></expr>)</condition> <block pos:start="515:38" pos:end="571:6">{<block_content pos:start="523:10" pos:end="569:10">

         <comment type="block" pos:start="517:10" pos:end="521:21">/* note: we do not use quant_precision to avoid problem if no

            MPEG4 vol header as it is found on some old opendivx

            movies */</comment>

         <expr_stmt pos:start="523:10" pos:end="523:41"><expr pos:start="523:10" pos:end="523:40"><name pos:start="523:10" pos:end="523:18"><name pos:start="523:10" pos:end="523:10">s</name><operator pos:start="523:11" pos:end="523:12">-&gt;</operator><name pos:start="523:13" pos:end="523:18">qscale</name></name> <operator pos:start="523:20" pos:end="523:20">=</operator> <call pos:start="523:22" pos:end="523:40"><name pos:start="523:22" pos:end="523:29">get_bits</name><argument_list pos:start="523:30" pos:end="523:40">(<argument pos:start="523:31" pos:end="523:36"><expr pos:start="523:31" pos:end="523:36"><operator pos:start="523:31" pos:end="523:31">&amp;</operator><name pos:start="523:32" pos:end="523:36"><name pos:start="523:32" pos:end="523:32">s</name><operator pos:start="523:33" pos:end="523:34">-&gt;</operator><name pos:start="523:35" pos:end="523:36">gb</name></name></expr></argument>, <argument pos:start="523:39" pos:end="523:39"><expr pos:start="523:39" pos:end="523:39"><literal type="number" pos:start="523:39" pos:end="523:39">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <if_stmt pos:start="525:10" pos:end="531:10"><if pos:start="525:10" pos:end="531:10">if<condition pos:start="525:12" pos:end="525:25">(<expr pos:start="525:13" pos:end="525:24"><name pos:start="525:13" pos:end="525:21"><name pos:start="525:13" pos:end="525:13">s</name><operator pos:start="525:14" pos:end="525:15">-&gt;</operator><name pos:start="525:16" pos:end="525:21">qscale</name></name><operator pos:start="525:22" pos:end="525:23">==</operator><literal type="number" pos:start="525:24" pos:end="525:24">0</literal></expr>)</condition><block pos:start="525:26" pos:end="531:10">{<block_content pos:start="527:14" pos:end="529:23">

             <expr_stmt pos:start="527:14" pos:end="527:78"><expr pos:start="527:14" pos:end="527:77"><call pos:start="527:14" pos:end="527:77"><name pos:start="527:14" pos:end="527:19">printf</name><argument_list pos:start="527:20" pos:end="527:77">(<argument pos:start="527:21" pos:end="527:76"><expr pos:start="527:21" pos:end="527:76"><literal type="string" pos:start="527:21" pos:end="527:76">"Error, header damaged or not MPEG4 header (qscale=0)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

             <return pos:start="529:14" pos:end="529:23">return <expr pos:start="529:21" pos:end="529:22"><operator pos:start="529:21" pos:end="529:21">-</operator><literal type="number" pos:start="529:22" pos:end="529:22">1</literal></expr>;</return> <comment type="line" pos:start="529:25" pos:end="529:99">// makes no sense to continue, as there is nothing left from the image then</comment>

         </block_content>}</block></if></if_stmt>

  

         <if_stmt pos:start="535:10" pos:end="547:10"><if pos:start="535:10" pos:end="547:10">if <condition pos:start="535:13" pos:end="535:36">(<expr pos:start="535:14" pos:end="535:35"><name pos:start="535:14" pos:end="535:25"><name pos:start="535:14" pos:end="535:14">s</name><operator pos:start="535:15" pos:end="535:16">-&gt;</operator><name pos:start="535:17" pos:end="535:25">pict_type</name></name> <operator pos:start="535:27" pos:end="535:28">!=</operator> <name pos:start="535:30" pos:end="535:35">I_TYPE</name></expr>)</condition> <block pos:start="535:38" pos:end="547:10">{<block_content pos:start="537:14" pos:end="545:14">

             <expr_stmt pos:start="537:14" pos:end="537:45"><expr pos:start="537:14" pos:end="537:44"><name pos:start="537:14" pos:end="537:22"><name pos:start="537:14" pos:end="537:14">s</name><operator pos:start="537:15" pos:end="537:16">-&gt;</operator><name pos:start="537:17" pos:end="537:22">f_code</name></name> <operator pos:start="537:24" pos:end="537:24">=</operator> <call pos:start="537:26" pos:end="537:44"><name pos:start="537:26" pos:end="537:33">get_bits</name><argument_list pos:start="537:34" pos:end="537:44">(<argument pos:start="537:35" pos:end="537:40"><expr pos:start="537:35" pos:end="537:40"><operator pos:start="537:35" pos:end="537:35">&amp;</operator><name pos:start="537:36" pos:end="537:40"><name pos:start="537:36" pos:end="537:36">s</name><operator pos:start="537:37" pos:end="537:38">-&gt;</operator><name pos:start="537:39" pos:end="537:40">gb</name></name></expr></argument>, <argument pos:start="537:43" pos:end="537:43"><expr pos:start="537:43" pos:end="537:43"><literal type="number" pos:start="537:43" pos:end="537:43">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block" pos:start="537:49" pos:end="537:63">/* fcode_for */</comment>

             <if_stmt pos:start="539:14" pos:end="545:14"><if pos:start="539:14" pos:end="545:14">if<condition pos:start="539:16" pos:end="539:29">(<expr pos:start="539:17" pos:end="539:28"><name pos:start="539:17" pos:end="539:25"><name pos:start="539:17" pos:end="539:17">s</name><operator pos:start="539:18" pos:end="539:19">-&gt;</operator><name pos:start="539:20" pos:end="539:25">f_code</name></name><operator pos:start="539:26" pos:end="539:27">==</operator><literal type="number" pos:start="539:28" pos:end="539:28">0</literal></expr>)</condition><block pos:start="539:30" pos:end="545:14">{<block_content pos:start="541:18" pos:end="543:27">

                 <expr_stmt pos:start="541:18" pos:end="541:82"><expr pos:start="541:18" pos:end="541:81"><call pos:start="541:18" pos:end="541:81"><name pos:start="541:18" pos:end="541:23">printf</name><argument_list pos:start="541:24" pos:end="541:81">(<argument pos:start="541:25" pos:end="541:80"><expr pos:start="541:25" pos:end="541:80"><literal type="string" pos:start="541:25" pos:end="541:80">"Error, header damaged or not MPEG4 header (f_code=0)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                 <return pos:start="543:18" pos:end="543:27">return <expr pos:start="543:25" pos:end="543:26"><operator pos:start="543:25" pos:end="543:25">-</operator><literal type="number" pos:start="543:26" pos:end="543:26">1</literal></expr>;</return> <comment type="line" pos:start="543:29" pos:end="543:101">// makes no sense to continue, as the MV decoding will break very quickly</comment>

             </block_content>}</block></if></if_stmt>

         </block_content>}</block></if></if_stmt>

         <if_stmt pos:start="549:10" pos:end="555:10"><if pos:start="549:10" pos:end="555:10">if <condition pos:start="549:13" pos:end="549:36">(<expr pos:start="549:14" pos:end="549:35"><name pos:start="549:14" pos:end="549:25"><name pos:start="549:14" pos:end="549:14">s</name><operator pos:start="549:15" pos:end="549:16">-&gt;</operator><name pos:start="549:17" pos:end="549:25">pict_type</name></name> <operator pos:start="549:27" pos:end="549:28">==</operator> <name pos:start="549:30" pos:end="549:35">B_TYPE</name></expr>)</condition> <block pos:start="549:38" pos:end="555:10">{<block_content pos:start="551:14" pos:end="551:45">

             <expr_stmt pos:start="551:14" pos:end="551:45"><expr pos:start="551:14" pos:end="551:44"><name pos:start="551:14" pos:end="551:22"><name pos:start="551:14" pos:end="551:14">s</name><operator pos:start="551:15" pos:end="551:16">-&gt;</operator><name pos:start="551:17" pos:end="551:22">b_code</name></name> <operator pos:start="551:24" pos:end="551:24">=</operator> <call pos:start="551:26" pos:end="551:44"><name pos:start="551:26" pos:end="551:33">get_bits</name><argument_list pos:start="551:34" pos:end="551:44">(<argument pos:start="551:35" pos:end="551:40"><expr pos:start="551:35" pos:end="551:40"><operator pos:start="551:35" pos:end="551:35">&amp;</operator><name pos:start="551:36" pos:end="551:40"><name pos:start="551:36" pos:end="551:36">s</name><operator pos:start="551:37" pos:end="551:38">-&gt;</operator><name pos:start="551:39" pos:end="551:40">gb</name></name></expr></argument>, <argument pos:start="551:43" pos:end="551:43"><expr pos:start="551:43" pos:end="551:43"><literal type="number" pos:start="551:43" pos:end="551:43">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="553:1" pos:end="553:35">//printf("b-code %d\n", s-&gt;b_code);</comment>

         </block_content>}</block></if></if_stmt>

<comment type="line" pos:start="557:1" pos:end="557:54">//printf("quant:%d fcode:%d\n", s-&gt;qscale, s-&gt;f_code);</comment>



         <if_stmt pos:start="561:10" pos:end="569:10"><if pos:start="561:10" pos:end="569:10">if<condition pos:start="561:12" pos:end="561:28">(<expr pos:start="561:13" pos:end="561:27"><operator pos:start="561:13" pos:end="561:13">!</operator><name pos:start="561:14" pos:end="561:27"><name pos:start="561:14" pos:end="561:14">s</name><operator pos:start="561:15" pos:end="561:16">-&gt;</operator><name pos:start="561:17" pos:end="561:27">scalability</name></name></expr>)</condition><block pos:start="561:29" pos:end="569:10">{<block_content pos:start="563:14" pos:end="567:14">

             <if_stmt pos:start="563:14" pos:end="567:14"><if pos:start="563:14" pos:end="567:14">if <condition pos:start="563:17" pos:end="563:62">(<expr pos:start="563:18" pos:end="563:61"><name pos:start="563:18" pos:end="563:25"><name pos:start="563:18" pos:end="563:18">s</name><operator pos:start="563:19" pos:end="563:20">-&gt;</operator><name pos:start="563:21" pos:end="563:25">shape</name></name><operator pos:start="563:26" pos:end="563:27">!=</operator><name pos:start="563:28" pos:end="563:37">RECT_SHAPE</name> <operator pos:start="563:39" pos:end="563:40">&amp;&amp;</operator> <name pos:start="563:42" pos:end="563:53"><name pos:start="563:42" pos:end="563:42">s</name><operator pos:start="563:43" pos:end="563:44">-&gt;</operator><name pos:start="563:45" pos:end="563:53">pict_type</name></name><operator pos:start="563:54" pos:end="563:55">!=</operator><name pos:start="563:56" pos:end="563:61">I_TYPE</name></expr>)</condition> <block pos:start="563:64" pos:end="567:14">{<block_content pos:start="565:18" pos:end="565:36">

                 <expr_stmt pos:start="565:18" pos:end="565:36"><expr pos:start="565:18" pos:end="565:35"><call pos:start="565:18" pos:end="565:35"><name pos:start="565:18" pos:end="565:27">skip_bits1</name><argument_list pos:start="565:28" pos:end="565:35">(<argument pos:start="565:29" pos:end="565:34"><expr pos:start="565:29" pos:end="565:34"><operator pos:start="565:29" pos:end="565:29">&amp;</operator><name pos:start="565:30" pos:end="565:34"><name pos:start="565:30" pos:end="565:30">s</name><operator pos:start="565:31" pos:end="565:32">-&gt;</operator><name pos:start="565:33" pos:end="565:34">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="565:38" pos:end="565:61">// vop shape coding type</comment>

             </block_content>}</block></if></if_stmt>

         </block_content>}</block></if></if_stmt>

     </block_content>}</block></if></if_stmt>

     <expr_stmt pos:start="573:6" pos:end="573:25"><expr pos:start="573:6" pos:end="573:24"><name pos:start="573:6" pos:end="573:22"><name pos:start="573:6" pos:end="573:6">s</name><operator pos:start="573:7" pos:end="573:8">-&gt;</operator><name pos:start="573:9" pos:end="573:22">picture_number</name></name><operator pos:start="573:23" pos:end="573:24">++</operator></expr>;</expr_stmt> <comment type="line" pos:start="573:27" pos:end="573:65">// better than pic number==0 allways ;)</comment>

     <return pos:start="575:6" pos:end="575:14">return <expr pos:start="575:13" pos:end="575:13"><literal type="number" pos:start="575:13" pos:end="575:13">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
