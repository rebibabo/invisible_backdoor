<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3490.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">coroutine_fn</name> <name pos:start="1:21" pos:end="1:23">int</name></type> <name pos:start="1:25" pos:end="1:45">qcow2_co_write_zeroes</name><parameter_list pos:start="1:46" pos:end="3:63">(<parameter pos:start="1:47" pos:end="1:66"><decl pos:start="1:47" pos:end="1:66"><type pos:start="1:47" pos:end="1:66"><name pos:start="1:47" pos:end="1:62">BlockDriverState</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:66">bs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:22"><decl pos:start="3:5" pos:end="3:22"><type pos:start="3:5" pos:end="3:22"><name pos:start="3:5" pos:end="3:11">int64_t</name></type> <name pos:start="3:13" pos:end="3:22">sector_num</name></decl></parameter>, <parameter pos:start="3:25" pos:end="3:38"><decl pos:start="3:25" pos:end="3:38"><type pos:start="3:25" pos:end="3:38"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:38">nb_sectors</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:62"><decl pos:start="3:41" pos:end="3:62"><type pos:start="3:41" pos:end="3:62"><name pos:start="3:41" pos:end="3:56">BdrvRequestFlags</name></type> <name pos:start="3:58" pos:end="3:62">flags</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="83:1">{<block_content pos:start="7:5" pos:end="81:15">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">BDRVQcow2State</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">s</name> <init pos:start="9:23" pos:end="9:34">= <expr pos:start="9:25" pos:end="9:34"><name pos:start="9:25" pos:end="9:34"><name pos:start="9:25" pos:end="9:26">bs</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:34">opaque</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="13:5" pos:end="13:47"><decl pos:start="13:5" pos:end="13:46"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">head</name> <init pos:start="13:14" pos:end="13:46">= <expr pos:start="13:16" pos:end="13:46"><name pos:start="13:16" pos:end="13:25">sector_num</name> <operator pos:start="13:27" pos:end="13:27">%</operator> <name pos:start="13:29" pos:end="13:46"><name pos:start="13:29" pos:end="13:29">s</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:46">cluster_sectors</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:62"><decl pos:start="15:5" pos:end="15:61"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">tail</name> <init pos:start="15:14" pos:end="15:61">= <expr pos:start="15:16" pos:end="15:61"><operator pos:start="15:16" pos:end="15:16">(</operator><name pos:start="15:17" pos:end="15:26">sector_num</name> <operator pos:start="15:28" pos:end="15:28">+</operator> <name pos:start="15:30" pos:end="15:39">nb_sectors</name><operator pos:start="15:40" pos:end="15:40">)</operator> <operator pos:start="15:42" pos:end="15:42">%</operator> <name pos:start="15:44" pos:end="15:61"><name pos:start="15:44" pos:end="15:44">s</name><operator pos:start="15:45" pos:end="15:46">-&gt;</operator><name pos:start="15:47" pos:end="15:61">cluster_sectors</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:51"><expr pos:start="19:5" pos:end="21:50"><call pos:start="19:5" pos:end="21:50"><name pos:start="19:5" pos:end="19:38">trace_qcow2_write_zeroes_start_req</name><argument_list pos:start="19:39" pos:end="21:50">(<argument pos:start="19:40" pos:end="19:60"><expr pos:start="19:40" pos:end="19:60"><call pos:start="19:40" pos:end="19:60"><name pos:start="19:40" pos:end="19:58">qemu_coroutine_self</name><argument_list pos:start="19:59" pos:end="19:60">()</argument_list></call></expr></argument>, <argument pos:start="19:63" pos:end="19:72"><expr pos:start="19:63" pos:end="19:72"><name pos:start="19:63" pos:end="19:72">sector_num</name></expr></argument>,

                                       <argument pos:start="21:40" pos:end="21:49"><expr pos:start="21:40" pos:end="21:49"><name pos:start="21:40" pos:end="21:49">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="65:5"><if pos:start="25:5" pos:end="61:5">if <condition pos:start="25:8" pos:end="25:31">(<expr pos:start="25:9" pos:end="25:30"><name pos:start="25:9" pos:end="25:12">head</name> <operator pos:start="25:14" pos:end="25:15">!=</operator> <literal type="number" pos:start="25:17" pos:end="25:17">0</literal> <operator pos:start="25:19" pos:end="25:20">||</operator> <name pos:start="25:22" pos:end="25:25">tail</name> <operator pos:start="25:27" pos:end="25:28">!=</operator> <literal type="number" pos:start="25:30" pos:end="25:30">0</literal></expr>)</condition> <block pos:start="25:33" pos:end="61:5">{<block_content pos:start="27:9" pos:end="59:9">

        <decl_stmt pos:start="27:9" pos:end="27:45"><decl pos:start="27:9" pos:end="27:44"><type pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:15">int64_t</name></type> <name pos:start="27:17" pos:end="27:24">cl_start</name> <init pos:start="27:26" pos:end="27:44">= <expr pos:start="27:28" pos:end="27:44"><name pos:start="27:28" pos:end="27:37">sector_num</name> <operator pos:start="27:39" pos:end="27:39">-</operator> <name pos:start="27:41" pos:end="27:44">head</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="31:9" pos:end="31:73"><expr pos:start="31:9" pos:end="31:72"><call pos:start="31:9" pos:end="31:72"><name pos:start="31:9" pos:end="31:14">assert</name><argument_list pos:start="31:15" pos:end="31:72">(<argument pos:start="31:16" pos:end="31:71"><expr pos:start="31:16" pos:end="31:71"><name pos:start="31:16" pos:end="31:23">cl_start</name> <operator pos:start="31:25" pos:end="31:25">+</operator> <name pos:start="31:27" pos:end="31:44"><name pos:start="31:27" pos:end="31:27">s</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:44">cluster_sectors</name></name> <operator pos:start="31:46" pos:end="31:47">&gt;=</operator> <name pos:start="31:49" pos:end="31:58">sector_num</name> <operator pos:start="31:60" pos:end="31:60">+</operator> <name pos:start="31:62" pos:end="31:71">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:30"><expr pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:18">sector_num</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <name pos:start="35:22" pos:end="35:29">cl_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:40"><expr pos:start="37:9" pos:end="37:39"><name pos:start="37:9" pos:end="37:18">nb_sectors</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <name pos:start="37:22" pos:end="37:39"><name pos:start="37:22" pos:end="37:22">s</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:39">cluster_sectors</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="41:9" pos:end="45:9"><if pos:start="41:9" pos:end="45:9">if <condition pos:start="41:12" pos:end="41:45">(<expr pos:start="41:13" pos:end="41:44"><operator pos:start="41:13" pos:end="41:13">!</operator><call pos:start="41:14" pos:end="41:44"><name pos:start="41:14" pos:end="41:28">is_zero_cluster</name><argument_list pos:start="41:29" pos:end="41:44">(<argument pos:start="41:30" pos:end="41:31"><expr pos:start="41:30" pos:end="41:31"><name pos:start="41:30" pos:end="41:31">bs</name></expr></argument>, <argument pos:start="41:34" pos:end="41:43"><expr pos:start="41:34" pos:end="41:43"><name pos:start="41:34" pos:end="41:43">sector_num</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:47" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:28">

            <return pos:start="43:13" pos:end="43:28">return <expr pos:start="43:20" pos:end="43:27"><operator pos:start="43:20" pos:end="43:20">-</operator><name pos:start="43:21" pos:end="43:27">ENOTSUP</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="49:9" pos:end="49:37"><expr pos:start="49:9" pos:end="49:36"><call pos:start="49:9" pos:end="49:36"><name pos:start="49:9" pos:end="49:26">qemu_co_mutex_lock</name><argument_list pos:start="49:27" pos:end="49:36">(<argument pos:start="49:28" pos:end="49:35"><expr pos:start="49:28" pos:end="49:35"><operator pos:start="49:28" pos:end="49:28">&amp;</operator><name pos:start="49:29" pos:end="49:35"><name pos:start="49:29" pos:end="49:29">s</name><operator pos:start="49:30" pos:end="49:31">-&gt;</operator><name pos:start="49:32" pos:end="49:35">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="51:9" pos:end="51:56">/* We can have new write after previous check */</comment>

        <if_stmt pos:start="53:9" pos:end="59:9"><if pos:start="53:9" pos:end="59:9">if <condition pos:start="53:12" pos:end="53:56">(<expr pos:start="53:13" pos:end="53:55"><operator pos:start="53:13" pos:end="53:13">!</operator><call pos:start="53:14" pos:end="53:55"><name pos:start="53:14" pos:end="53:39">is_zero_cluster_top_locked</name><argument_list pos:start="53:40" pos:end="53:55">(<argument pos:start="53:41" pos:end="53:42"><expr pos:start="53:41" pos:end="53:42"><name pos:start="53:41" pos:end="53:42">bs</name></expr></argument>, <argument pos:start="53:45" pos:end="53:54"><expr pos:start="53:45" pos:end="53:54"><name pos:start="53:45" pos:end="53:54">sector_num</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:58" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:28">

            <expr_stmt pos:start="55:13" pos:end="55:43"><expr pos:start="55:13" pos:end="55:42"><call pos:start="55:13" pos:end="55:42"><name pos:start="55:13" pos:end="55:32">qemu_co_mutex_unlock</name><argument_list pos:start="55:33" pos:end="55:42">(<argument pos:start="55:34" pos:end="55:41"><expr pos:start="55:34" pos:end="55:41"><operator pos:start="55:34" pos:end="55:34">&amp;</operator><name pos:start="55:35" pos:end="55:41"><name pos:start="55:35" pos:end="55:35">s</name><operator pos:start="55:36" pos:end="55:37">-&gt;</operator><name pos:start="55:38" pos:end="55:41">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="57:13" pos:end="57:28">return <expr pos:start="57:20" pos:end="57:27"><operator pos:start="57:20" pos:end="57:20">-</operator><name pos:start="57:21" pos:end="57:27">ENOTSUP</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="65:5">else <block pos:start="61:12" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:37">

        <expr_stmt pos:start="63:9" pos:end="63:37"><expr pos:start="63:9" pos:end="63:36"><call pos:start="63:9" pos:end="63:36"><name pos:start="63:9" pos:end="63:26">qemu_co_mutex_lock</name><argument_list pos:start="63:27" pos:end="63:36">(<argument pos:start="63:28" pos:end="63:35"><expr pos:start="63:28" pos:end="63:35"><operator pos:start="63:28" pos:end="63:28">&amp;</operator><name pos:start="63:29" pos:end="63:35"><name pos:start="63:29" pos:end="63:29">s</name><operator pos:start="63:30" pos:end="63:31">-&gt;</operator><name pos:start="63:32" pos:end="63:35">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:76"><expr pos:start="69:5" pos:end="69:75"><call pos:start="69:5" pos:end="69:75"><name pos:start="69:5" pos:end="69:28">trace_qcow2_write_zeroes</name><argument_list pos:start="69:29" pos:end="69:75">(<argument pos:start="69:30" pos:end="69:50"><expr pos:start="69:30" pos:end="69:50"><call pos:start="69:30" pos:end="69:50"><name pos:start="69:30" pos:end="69:48">qemu_coroutine_self</name><argument_list pos:start="69:49" pos:end="69:50">()</argument_list></call></expr></argument>, <argument pos:start="69:53" pos:end="69:62"><expr pos:start="69:53" pos:end="69:62"><name pos:start="69:53" pos:end="69:62">sector_num</name></expr></argument>, <argument pos:start="69:65" pos:end="69:74"><expr pos:start="69:65" pos:end="69:74"><name pos:start="69:65" pos:end="69:74">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:53">/* Whatever is left can use real zero clusters */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:78"><expr pos:start="75:5" pos:end="75:77"><name pos:start="75:5" pos:end="75:7">ret</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="75:77"><name pos:start="75:11" pos:end="75:29">qcow2_zero_clusters</name><argument_list pos:start="75:30" pos:end="75:77">(<argument pos:start="75:31" pos:end="75:32"><expr pos:start="75:31" pos:end="75:32"><name pos:start="75:31" pos:end="75:32">bs</name></expr></argument>, <argument pos:start="75:35" pos:end="75:64"><expr pos:start="75:35" pos:end="75:64"><name pos:start="75:35" pos:end="75:44">sector_num</name> <operator pos:start="75:46" pos:end="75:47">&lt;&lt;</operator> <name pos:start="75:49" pos:end="75:64">BDRV_SECTOR_BITS</name></expr></argument>, <argument pos:start="75:67" pos:end="75:76"><expr pos:start="75:67" pos:end="75:76"><name pos:start="75:67" pos:end="75:76">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:35"><expr pos:start="77:5" pos:end="77:34"><call pos:start="77:5" pos:end="77:34"><name pos:start="77:5" pos:end="77:24">qemu_co_mutex_unlock</name><argument_list pos:start="77:25" pos:end="77:34">(<argument pos:start="77:26" pos:end="77:33"><expr pos:start="77:26" pos:end="77:33"><operator pos:start="77:26" pos:end="77:26">&amp;</operator><name pos:start="77:27" pos:end="77:33"><name pos:start="77:27" pos:end="77:27">s</name><operator pos:start="77:28" pos:end="77:29">-&gt;</operator><name pos:start="77:30" pos:end="77:33">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="81:5" pos:end="81:15">return <expr pos:start="81:12" pos:end="81:14"><name pos:start="81:12" pos:end="81:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
