<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15376.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">vhost_verify_ring_mappings</name><parameter_list pos:start="1:38" pos:end="5:52">(<parameter pos:start="1:39" pos:end="1:59"><decl pos:start="1:39" pos:end="1:59"><type pos:start="1:39" pos:end="1:59"><name pos:start="1:39" pos:end="1:54"><name pos:start="1:39" pos:end="1:44">struct</name> <name pos:start="1:46" pos:end="1:54">vhost_dev</name></name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">dev</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:57"><decl pos:start="3:39" pos:end="3:57"><type pos:start="3:39" pos:end="3:57"><name pos:start="3:39" pos:end="3:46">uint64_t</name></type> <name pos:start="3:48" pos:end="3:57">start_addr</name></decl></parameter>,

                                      <parameter pos:start="5:39" pos:end="5:51"><decl pos:start="5:39" pos:end="5:51"><type pos:start="5:39" pos:end="5:51"><name pos:start="5:39" pos:end="5:46">uint64_t</name></type> <name pos:start="5:48" pos:end="5:51">size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="53:1">{<block_content pos:start="9:5" pos:end="51:13">

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <for pos:start="11:5" pos:end="49:5">for <control pos:start="11:9" pos:end="11:35">(<init pos:start="11:10" pos:end="11:15"><expr pos:start="11:10" pos:end="11:14"><name pos:start="11:10" pos:end="11:10">i</name> <operator pos:start="11:12" pos:end="11:12">=</operator> <literal type="number" pos:start="11:14" pos:end="11:14">0</literal></expr>;</init> <condition pos:start="11:17" pos:end="11:30"><expr pos:start="11:17" pos:end="11:29"><name pos:start="11:17" pos:end="11:17">i</name> <operator pos:start="11:19" pos:end="11:19">&lt;</operator> <name pos:start="11:21" pos:end="11:29"><name pos:start="11:21" pos:end="11:23">dev</name><operator pos:start="11:24" pos:end="11:25">-&gt;</operator><name pos:start="11:26" pos:end="11:29">nvqs</name></name></expr>;</condition> <incr pos:start="11:32" pos:end="11:34"><expr pos:start="11:32" pos:end="11:34"><operator pos:start="11:32" pos:end="11:33">++</operator><name pos:start="11:34" pos:end="11:34">i</name></expr></incr>)</control> <block pos:start="11:37" pos:end="49:5">{<block_content pos:start="13:9" pos:end="47:46">

        <decl_stmt pos:start="13:9" pos:end="13:50"><decl pos:start="13:9" pos:end="13:49"><type pos:start="13:9" pos:end="13:32"><name pos:start="13:9" pos:end="13:30"><name pos:start="13:9" pos:end="13:14">struct</name> <name pos:start="13:16" pos:end="13:30">vhost_virtqueue</name></name> <modifier pos:start="13:32" pos:end="13:32">*</modifier></type><name pos:start="13:33" pos:end="13:34">vq</name> <init pos:start="13:36" pos:end="13:49">= <expr pos:start="13:38" pos:end="13:49"><name pos:start="13:38" pos:end="13:45"><name pos:start="13:38" pos:end="13:40">dev</name><operator pos:start="13:41" pos:end="13:42">-&gt;</operator><name pos:start="13:43" pos:end="13:45">vqs</name></name> <operator pos:start="13:47" pos:end="13:47">+</operator> <name pos:start="13:49" pos:end="13:49">i</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:17"><decl pos:start="15:9" pos:end="15:16"><type pos:start="15:9" pos:end="15:14"><name pos:start="15:9" pos:end="15:14">hwaddr</name></type> <name pos:start="15:16" pos:end="15:16">l</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:16"><decl pos:start="17:9" pos:end="17:15"><type pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:12">void</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:15">p</name></decl>;</decl_stmt>



        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:76">(<expr pos:start="21:13" pos:end="21:75"><operator pos:start="21:13" pos:end="21:13">!</operator><call pos:start="21:14" pos:end="21:75"><name pos:start="21:14" pos:end="21:27">ranges_overlap</name><argument_list pos:start="21:28" pos:end="21:75">(<argument pos:start="21:29" pos:end="21:38"><expr pos:start="21:29" pos:end="21:38"><name pos:start="21:29" pos:end="21:38">start_addr</name></expr></argument>, <argument pos:start="21:41" pos:end="21:44"><expr pos:start="21:41" pos:end="21:44"><name pos:start="21:41" pos:end="21:44">size</name></expr></argument>, <argument pos:start="21:47" pos:end="21:59"><expr pos:start="21:47" pos:end="21:59"><name pos:start="21:47" pos:end="21:59"><name pos:start="21:47" pos:end="21:48">vq</name><operator pos:start="21:49" pos:end="21:50">-&gt;</operator><name pos:start="21:51" pos:end="21:59">ring_phys</name></name></expr></argument>, <argument pos:start="21:62" pos:end="21:74"><expr pos:start="21:62" pos:end="21:74"><name pos:start="21:62" pos:end="21:74"><name pos:start="21:62" pos:end="21:63">vq</name><operator pos:start="21:64" pos:end="21:65">-&gt;</operator><name pos:start="21:66" pos:end="21:74">ring_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:78" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:21">

            <continue pos:start="23:13" pos:end="23:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:26"><expr pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:9">l</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <name pos:start="27:13" pos:end="27:25"><name pos:start="27:13" pos:end="27:14">vq</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:25">ring_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:58"><expr pos:start="29:9" pos:end="29:57"><name pos:start="29:9" pos:end="29:9">p</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <call pos:start="29:13" pos:end="29:57"><name pos:start="29:13" pos:end="29:35">cpu_physical_memory_map</name><argument_list pos:start="29:36" pos:end="29:57">(<argument pos:start="29:37" pos:end="29:49"><expr pos:start="29:37" pos:end="29:49"><name pos:start="29:37" pos:end="29:49"><name pos:start="29:37" pos:end="29:38">vq</name><operator pos:start="29:39" pos:end="29:40">-&gt;</operator><name pos:start="29:41" pos:end="29:49">ring_phys</name></name></expr></argument>, <argument pos:start="29:52" pos:end="29:53"><expr pos:start="29:52" pos:end="29:53"><operator pos:start="29:52" pos:end="29:52">&amp;</operator><name pos:start="29:53" pos:end="29:53">l</name></expr></argument>, <argument pos:start="29:56" pos:end="29:56"><expr pos:start="29:56" pos:end="29:56"><literal type="number" pos:start="29:56" pos:end="29:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:37">(<expr pos:start="31:13" pos:end="31:36"><operator pos:start="31:13" pos:end="31:13">!</operator><name pos:start="31:14" pos:end="31:14">p</name> <operator pos:start="31:16" pos:end="31:17">||</operator> <name pos:start="31:19" pos:end="31:19">l</name> <operator pos:start="31:21" pos:end="31:22">!=</operator> <name pos:start="31:24" pos:end="31:36"><name pos:start="31:24" pos:end="31:25">vq</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:36">ring_size</name></name></expr>)</condition> <block pos:start="31:39" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:27">

            <expr_stmt pos:start="33:13" pos:end="33:74"><expr pos:start="33:13" pos:end="33:73"><call pos:start="33:13" pos:end="33:73"><name pos:start="33:13" pos:end="33:19">fprintf</name><argument_list pos:start="33:20" pos:end="33:73">(<argument pos:start="33:21" pos:end="33:26"><expr pos:start="33:21" pos:end="33:26"><name pos:start="33:21" pos:end="33:26">stderr</name></expr></argument>, <argument pos:start="33:29" pos:end="33:69"><expr pos:start="33:29" pos:end="33:69"><literal type="string" pos:start="33:29" pos:end="33:69">"Unable to map ring buffer for ring %d\n"</literal></expr></argument>, <argument pos:start="33:72" pos:end="33:72"><expr pos:start="33:72" pos:end="33:72"><name pos:start="33:72" pos:end="33:72">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="35:13" pos:end="35:27">return <expr pos:start="35:20" pos:end="35:26"><operator pos:start="35:20" pos:end="35:20">-</operator><name pos:start="35:21" pos:end="35:26">ENOMEM</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:26">(<expr pos:start="39:13" pos:end="39:25"><name pos:start="39:13" pos:end="39:13">p</name> <operator pos:start="39:15" pos:end="39:16">!=</operator> <name pos:start="39:18" pos:end="39:25"><name pos:start="39:18" pos:end="39:19">vq</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:25">ring</name></name></expr>)</condition> <block pos:start="39:28" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:26">

            <expr_stmt pos:start="41:13" pos:end="41:70"><expr pos:start="41:13" pos:end="41:69"><call pos:start="41:13" pos:end="41:69"><name pos:start="41:13" pos:end="41:19">fprintf</name><argument_list pos:start="41:20" pos:end="41:69">(<argument pos:start="41:21" pos:end="41:26"><expr pos:start="41:21" pos:end="41:26"><name pos:start="41:21" pos:end="41:26">stderr</name></expr></argument>, <argument pos:start="41:29" pos:end="41:65"><expr pos:start="41:29" pos:end="41:65"><literal type="string" pos:start="41:29" pos:end="41:65">"Ring buffer relocated for ring %d\n"</literal></expr></argument>, <argument pos:start="41:68" pos:end="41:68"><expr pos:start="41:68" pos:end="41:68"><name pos:start="41:68" pos:end="41:68">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="43:13" pos:end="43:26">return <expr pos:start="43:20" pos:end="43:25"><operator pos:start="43:20" pos:end="43:20">-</operator><name pos:start="43:21" pos:end="43:25">EBUSY</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:46"><expr pos:start="47:9" pos:end="47:45"><call pos:start="47:9" pos:end="47:45"><name pos:start="47:9" pos:end="47:33">cpu_physical_memory_unmap</name><argument_list pos:start="47:34" pos:end="47:45">(<argument pos:start="47:35" pos:end="47:35"><expr pos:start="47:35" pos:end="47:35"><name pos:start="47:35" pos:end="47:35">p</name></expr></argument>, <argument pos:start="47:38" pos:end="47:38"><expr pos:start="47:38" pos:end="47:38"><name pos:start="47:38" pos:end="47:38">l</name></expr></argument>, <argument pos:start="47:41" pos:end="47:41"><expr pos:start="47:41" pos:end="47:41"><literal type="number" pos:start="47:41" pos:end="47:41">0</literal></expr></argument>, <argument pos:start="47:44" pos:end="47:44"><expr pos:start="47:44" pos:end="47:44"><literal type="number" pos:start="47:44" pos:end="47:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="51:5" pos:end="51:13">return <expr pos:start="51:12" pos:end="51:12"><literal type="number" pos:start="51:12" pos:end="51:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
