<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/752.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">translator_loop</name><parameter_list pos:start="1:21" pos:end="3:57">(<parameter pos:start="1:22" pos:end="1:45"><decl pos:start="1:22" pos:end="1:45"><type pos:start="1:22" pos:end="1:45"><specifier pos:start="1:22" pos:end="1:26">const</specifier> <name pos:start="1:28" pos:end="1:40">TranslatorOps</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">ops</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:67"><decl pos:start="1:48" pos:end="1:67"><type pos:start="1:48" pos:end="1:67"><name pos:start="1:48" pos:end="1:63">DisasContextBase</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:67">db</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:34"><decl pos:start="3:22" pos:end="3:34"><type pos:start="3:22" pos:end="3:34"><name pos:start="3:22" pos:end="3:29">CPUState</name> <modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:34">cpu</name></decl></parameter>, <parameter pos:start="3:37" pos:end="3:56"><decl pos:start="3:37" pos:end="3:56"><type pos:start="3:37" pos:end="3:56"><name pos:start="3:37" pos:end="3:52">TranslationBlock</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:56">tb</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="209:1">{<block_content pos:start="7:5" pos:end="208:0">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">max_insns</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:33">/* Initialize DisasContext */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:16"><expr pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:6">db</name><operator pos:start="13:7" pos:end="13:8">-&gt;</operator><name pos:start="13:9" pos:end="13:10">tb</name></name> <operator pos:start="13:12" pos:end="13:12">=</operator> <name pos:start="13:14" pos:end="13:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:26"><expr pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:6">db</name><operator pos:start="15:7" pos:end="15:8">-&gt;</operator><name pos:start="15:9" pos:end="15:16">pc_first</name></name> <operator pos:start="15:18" pos:end="15:18">=</operator> <name pos:start="15:20" pos:end="15:25"><name pos:start="15:20" pos:end="15:21">tb</name><operator pos:start="15:22" pos:end="15:23">-&gt;</operator><name pos:start="15:24" pos:end="15:25">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:31"><expr pos:start="17:5" pos:end="17:30"><name pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:6">db</name><operator pos:start="17:7" pos:end="17:8">-&gt;</operator><name pos:start="17:9" pos:end="17:15">pc_next</name></name> <operator pos:start="17:17" pos:end="17:17">=</operator> <name pos:start="17:19" pos:end="17:30"><name pos:start="17:19" pos:end="17:20">db</name><operator pos:start="17:21" pos:end="17:22">-&gt;</operator><name pos:start="17:23" pos:end="17:30">pc_first</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:28"><expr pos:start="19:5" pos:end="19:27"><name pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:6">db</name><operator pos:start="19:7" pos:end="19:8">-&gt;</operator><name pos:start="19:9" pos:end="19:14">is_jmp</name></name> <operator pos:start="19:16" pos:end="19:16">=</operator> <name pos:start="19:18" pos:end="19:27">DISAS_NEXT</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:6">db</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:17">num_insns</name></name> <operator pos:start="21:19" pos:end="21:19">=</operator> <literal type="number" pos:start="21:21" pos:end="21:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:53"><expr pos:start="23:5" pos:end="23:52"><name pos:start="23:5" pos:end="23:26"><name pos:start="23:5" pos:end="23:6">db</name><operator pos:start="23:7" pos:end="23:8">-&gt;</operator><name pos:start="23:9" pos:end="23:26">singlestep_enabled</name></name> <operator pos:start="23:28" pos:end="23:28">=</operator> <name pos:start="23:30" pos:end="23:52"><name pos:start="23:30" pos:end="23:32">cpu</name><operator pos:start="23:33" pos:end="23:34">-&gt;</operator><name pos:start="23:35" pos:end="23:52">singlestep_enabled</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:30">/* Instruction counting */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:47"><expr pos:start="29:5" pos:end="29:46"><name pos:start="29:5" pos:end="29:13">max_insns</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <name pos:start="29:17" pos:end="29:30"><name pos:start="29:17" pos:end="29:18">db</name><operator pos:start="29:19" pos:end="29:20">-&gt;</operator><name pos:start="29:21" pos:end="29:22">tb</name><operator pos:start="29:23" pos:end="29:24">-&gt;</operator><name pos:start="29:25" pos:end="29:30">cflags</name></name> <operator pos:start="29:32" pos:end="29:32">&amp;</operator> <name pos:start="29:34" pos:end="29:46">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:23">(<expr pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:17">max_insns</name> <operator pos:start="31:19" pos:end="31:20">==</operator> <literal type="number" pos:start="31:22" pos:end="31:22">0</literal></expr>)</condition> <block pos:start="31:25" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:34">

        <expr_stmt pos:start="33:9" pos:end="33:34"><expr pos:start="33:9" pos:end="33:33"><name pos:start="33:9" pos:end="33:17">max_insns</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <name pos:start="33:21" pos:end="33:33">CF_COUNT_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:34">(<expr pos:start="37:9" pos:end="37:33"><name pos:start="37:9" pos:end="37:17">max_insns</name> <operator pos:start="37:19" pos:end="37:19">&gt;</operator> <name pos:start="37:21" pos:end="37:33">TCG_MAX_INSNS</name></expr>)</condition> <block pos:start="37:36" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:34">

        <expr_stmt pos:start="39:9" pos:end="39:34"><expr pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:17">max_insns</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <name pos:start="39:21" pos:end="39:33">TCG_MAX_INSNS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:45">(<expr pos:start="43:9" pos:end="43:44"><name pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:10">db</name><operator pos:start="43:11" pos:end="43:12">-&gt;</operator><name pos:start="43:13" pos:end="43:30">singlestep_enabled</name></name> <operator pos:start="43:32" pos:end="43:33">||</operator> <name pos:start="43:35" pos:end="43:44">singlestep</name></expr>)</condition> <block pos:start="43:47" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:22">

        <expr_stmt pos:start="45:9" pos:end="45:22"><expr pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:17">max_insns</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <literal type="number" pos:start="45:21" pos:end="45:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:60"><expr pos:start="51:5" pos:end="51:59"><name pos:start="51:5" pos:end="51:13">max_insns</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <call pos:start="51:17" pos:end="51:59"><name pos:start="51:17" pos:end="51:39"><name pos:start="51:17" pos:end="51:19">ops</name><operator pos:start="51:20" pos:end="51:21">-&gt;</operator><name pos:start="51:22" pos:end="51:39">init_disas_context</name></name><argument_list pos:start="51:40" pos:end="51:59">(<argument pos:start="51:41" pos:end="51:42"><expr pos:start="51:41" pos:end="51:42"><name pos:start="51:41" pos:end="51:42">db</name></expr></argument>, <argument pos:start="51:45" pos:end="51:47"><expr pos:start="51:45" pos:end="51:47"><name pos:start="51:45" pos:end="51:47">cpu</name></expr></argument>, <argument pos:start="51:50" pos:end="51:58"><expr pos:start="51:50" pos:end="51:58"><name pos:start="51:50" pos:end="51:58">max_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:47"><expr pos:start="53:5" pos:end="53:46"><call pos:start="53:5" pos:end="53:46"><name pos:start="53:5" pos:end="53:20">tcg_debug_assert</name><argument_list pos:start="53:21" pos:end="53:46">(<argument pos:start="53:22" pos:end="53:45"><expr pos:start="53:22" pos:end="53:45"><name pos:start="53:22" pos:end="53:31"><name pos:start="53:22" pos:end="53:23">db</name><operator pos:start="53:24" pos:end="53:25">-&gt;</operator><name pos:start="53:26" pos:end="53:31">is_jmp</name></name> <operator pos:start="53:33" pos:end="53:34">==</operator> <name pos:start="53:36" pos:end="53:45">DISAS_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="53:50" pos:end="53:68">/* no early exit */</comment>



    <comment type="block" pos:start="57:5" pos:end="57:60">/* Reset the temp count so that we can identify leaks */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:27"><expr pos:start="59:5" pos:end="59:26"><call pos:start="59:5" pos:end="59:26"><name pos:start="59:5" pos:end="59:24">tcg_clear_temp_count</name><argument_list pos:start="59:25" pos:end="59:26">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:29">/* Start translating.  */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:25"><expr pos:start="65:5" pos:end="65:24"><call pos:start="65:5" pos:end="65:24"><name pos:start="65:5" pos:end="65:16">gen_tb_start</name><argument_list pos:start="65:17" pos:end="65:24">(<argument pos:start="65:18" pos:end="65:23"><expr pos:start="65:18" pos:end="65:23"><name pos:start="65:18" pos:end="65:23"><name pos:start="65:18" pos:end="65:19">db</name><operator pos:start="65:20" pos:end="65:21">-&gt;</operator><name pos:start="65:22" pos:end="65:23">tb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:27"><expr pos:start="67:5" pos:end="67:26"><call pos:start="67:5" pos:end="67:26"><name pos:start="67:5" pos:end="67:17"><name pos:start="67:5" pos:end="67:7">ops</name><operator pos:start="67:8" pos:end="67:9">-&gt;</operator><name pos:start="67:10" pos:end="67:17">tb_start</name></name><argument_list pos:start="67:18" pos:end="67:26">(<argument pos:start="67:19" pos:end="67:20"><expr pos:start="67:19" pos:end="67:20"><name pos:start="67:19" pos:end="67:20">db</name></expr></argument>, <argument pos:start="67:23" pos:end="67:25"><expr pos:start="67:23" pos:end="67:25"><name pos:start="67:23" pos:end="67:25">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:47"><expr pos:start="69:5" pos:end="69:46"><call pos:start="69:5" pos:end="69:46"><name pos:start="69:5" pos:end="69:20">tcg_debug_assert</name><argument_list pos:start="69:21" pos:end="69:46">(<argument pos:start="69:22" pos:end="69:45"><expr pos:start="69:22" pos:end="69:45"><name pos:start="69:22" pos:end="69:31"><name pos:start="69:22" pos:end="69:23">db</name><operator pos:start="69:24" pos:end="69:25">-&gt;</operator><name pos:start="69:26" pos:end="69:31">is_jmp</name></name> <operator pos:start="69:33" pos:end="69:34">==</operator> <name pos:start="69:36" pos:end="69:45">DISAS_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="69:50" pos:end="69:68">/* no early exit */</comment>



    <while pos:start="73:5" pos:end="169:5">while <condition pos:start="73:11" pos:end="73:16">(<expr pos:start="73:12" pos:end="73:15"><name pos:start="73:12" pos:end="73:15">true</name></expr>)</condition> <block pos:start="73:18" pos:end="169:5">{<block_content pos:start="75:9" pos:end="167:9">

        <expr_stmt pos:start="75:9" pos:end="75:24"><expr pos:start="75:9" pos:end="75:23"><name pos:start="75:9" pos:end="75:21"><name pos:start="75:9" pos:end="75:10">db</name><operator pos:start="75:11" pos:end="75:12">-&gt;</operator><name pos:start="75:13" pos:end="75:21">num_insns</name></name><operator pos:start="75:22" pos:end="75:23">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:33"><expr pos:start="77:9" pos:end="77:32"><call pos:start="77:9" pos:end="77:32"><name pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:11">ops</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:23">insn_start</name></name><argument_list pos:start="77:24" pos:end="77:32">(<argument pos:start="77:25" pos:end="77:26"><expr pos:start="77:25" pos:end="77:26"><name pos:start="77:25" pos:end="77:26">db</name></expr></argument>, <argument pos:start="77:29" pos:end="77:31"><expr pos:start="77:29" pos:end="77:31"><name pos:start="77:29" pos:end="77:31">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:51"><expr pos:start="79:9" pos:end="79:50"><call pos:start="79:9" pos:end="79:50"><name pos:start="79:9" pos:end="79:24">tcg_debug_assert</name><argument_list pos:start="79:25" pos:end="79:50">(<argument pos:start="79:26" pos:end="79:49"><expr pos:start="79:26" pos:end="79:49"><name pos:start="79:26" pos:end="79:35"><name pos:start="79:26" pos:end="79:27">db</name><operator pos:start="79:28" pos:end="79:29">-&gt;</operator><name pos:start="79:30" pos:end="79:35">is_jmp</name></name> <operator pos:start="79:37" pos:end="79:38">==</operator> <name pos:start="79:40" pos:end="79:49">DISAS_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="79:54" pos:end="79:72">/* no early exit */</comment>



        <comment type="block" pos:start="83:9" pos:end="83:67">/* Pass breakpoint hits to target for further processing */</comment>

        <if_stmt pos:start="85:9" pos:end="117:9"><if pos:start="85:9" pos:end="117:9">if <condition pos:start="85:12" pos:end="85:55">(<expr pos:start="85:13" pos:end="85:54"><call pos:start="85:13" pos:end="85:54"><name pos:start="85:13" pos:end="85:20">unlikely</name><argument_list pos:start="85:21" pos:end="85:54">(<argument pos:start="85:22" pos:end="85:53"><expr pos:start="85:22" pos:end="85:53"><operator pos:start="85:22" pos:end="85:22">!</operator><call pos:start="85:23" pos:end="85:53"><name pos:start="85:23" pos:end="85:34">QTAILQ_EMPTY</name><argument_list pos:start="85:35" pos:end="85:53">(<argument pos:start="85:36" pos:end="85:52"><expr pos:start="85:36" pos:end="85:52"><operator pos:start="85:36" pos:end="85:36">&amp;</operator><name pos:start="85:37" pos:end="85:52"><name pos:start="85:37" pos:end="85:39">cpu</name><operator pos:start="85:40" pos:end="85:41">-&gt;</operator><name pos:start="85:42" pos:end="85:52">breakpoints</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:57" pos:end="117:9">{<block_content pos:start="87:13" pos:end="115:13">

            <decl_stmt pos:start="87:13" pos:end="87:30"><decl pos:start="87:13" pos:end="87:29"><type pos:start="87:13" pos:end="87:27"><name pos:start="87:13" pos:end="87:25">CPUBreakpoint</name> <modifier pos:start="87:27" pos:end="87:27">*</modifier></type><name pos:start="87:28" pos:end="87:29">bp</name></decl>;</decl_stmt>

            <macro pos:start="89:13" pos:end="89:56"><name pos:start="89:13" pos:end="89:26">QTAILQ_FOREACH</name><argument_list pos:start="89:27" pos:end="89:56">(<argument pos:start="89:28" pos:end="89:29">bp</argument>, <argument pos:start="89:32" pos:end="89:48">&amp;cpu-&gt;breakpoints</argument>, <argument pos:start="89:51" pos:end="89:55">entry</argument>)</argument_list></macro> <block pos:start="89:58" pos:end="101:13">{<block_content pos:start="91:17" pos:end="99:17">

                <if_stmt pos:start="91:17" pos:end="99:17"><if pos:start="91:17" pos:end="99:17">if <condition pos:start="91:20" pos:end="91:42">(<expr pos:start="91:21" pos:end="91:41"><name pos:start="91:21" pos:end="91:26"><name pos:start="91:21" pos:end="91:22">bp</name><operator pos:start="91:23" pos:end="91:24">-&gt;</operator><name pos:start="91:25" pos:end="91:26">pc</name></name> <operator pos:start="91:28" pos:end="91:29">==</operator> <name pos:start="91:31" pos:end="91:41"><name pos:start="91:31" pos:end="91:32">db</name><operator pos:start="91:33" pos:end="91:34">-&gt;</operator><name pos:start="91:35" pos:end="91:41">pc_next</name></name></expr>)</condition> <block pos:start="91:44" pos:end="99:17">{<block_content pos:start="93:21" pos:end="97:21">

                    <if_stmt pos:start="93:21" pos:end="97:21"><if pos:start="93:21" pos:end="97:21">if <condition pos:start="93:24" pos:end="93:59">(<expr pos:start="93:25" pos:end="93:58"><call pos:start="93:25" pos:end="93:58"><name pos:start="93:25" pos:end="93:45"><name pos:start="93:25" pos:end="93:27">ops</name><operator pos:start="93:28" pos:end="93:29">-&gt;</operator><name pos:start="93:30" pos:end="93:45">breakpoint_check</name></name><argument_list pos:start="93:46" pos:end="93:58">(<argument pos:start="93:47" pos:end="93:48"><expr pos:start="93:47" pos:end="93:48"><name pos:start="93:47" pos:end="93:48">db</name></expr></argument>, <argument pos:start="93:51" pos:end="93:53"><expr pos:start="93:51" pos:end="93:53"><name pos:start="93:51" pos:end="93:53">cpu</name></expr></argument>, <argument pos:start="93:56" pos:end="93:57"><expr pos:start="93:56" pos:end="93:57"><name pos:start="93:56" pos:end="93:57">bp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:61" pos:end="97:21">{<block_content pos:start="95:25" pos:end="95:30">

                        <break pos:start="95:25" pos:end="95:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

            <comment type="block" pos:start="103:13" pos:end="109:73">/* The breakpoint_check hook may use DISAS_TOO_MANY to indicate

               that only one more instruction is to be executed.  Otherwise

               it should use DISAS_NORETURN when generating an exception,

               but may use a DISAS_TARGET_* value for Something Else.  */</comment>

            <if_stmt pos:start="111:13" pos:end="115:13"><if pos:start="111:13" pos:end="115:13">if <condition pos:start="111:16" pos:end="111:44">(<expr pos:start="111:17" pos:end="111:43"><name pos:start="111:17" pos:end="111:26"><name pos:start="111:17" pos:end="111:18">db</name><operator pos:start="111:19" pos:end="111:20">-&gt;</operator><name pos:start="111:21" pos:end="111:26">is_jmp</name></name> <operator pos:start="111:28" pos:end="111:28">&gt;</operator> <name pos:start="111:30" pos:end="111:43">DISAS_TOO_MANY</name></expr>)</condition> <block pos:start="111:46" pos:end="115:13">{<block_content pos:start="113:17" pos:end="113:22">

                <break pos:start="113:17" pos:end="113:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="121:9" pos:end="127:36">/* Disassemble one instruction.  The translate_insn hook should

           update db-&gt;pc_next and db-&gt;is_jmp to indicate what should be

           done next -- either exiting this loop or locate the start of

           the next instruction.  */</comment>

        <if_stmt pos:start="129:9" pos:end="143:9"><if pos:start="129:9" pos:end="139:9">if <condition pos:start="129:12" pos:end="129:72">(<expr pos:start="129:13" pos:end="129:71"><name pos:start="129:13" pos:end="129:25"><name pos:start="129:13" pos:end="129:14">db</name><operator pos:start="129:15" pos:end="129:16">-&gt;</operator><name pos:start="129:17" pos:end="129:25">num_insns</name></name> <operator pos:start="129:27" pos:end="129:28">==</operator> <name pos:start="129:30" pos:end="129:38">max_insns</name> <operator pos:start="129:40" pos:end="129:41">&amp;&amp;</operator> <operator pos:start="129:43" pos:end="129:43">(</operator><name pos:start="129:44" pos:end="129:57"><name pos:start="129:44" pos:end="129:45">db</name><operator pos:start="129:46" pos:end="129:47">-&gt;</operator><name pos:start="129:48" pos:end="129:49">tb</name><operator pos:start="129:50" pos:end="129:51">-&gt;</operator><name pos:start="129:52" pos:end="129:57">cflags</name></name> <operator pos:start="129:59" pos:end="129:59">&amp;</operator> <name pos:start="129:61" pos:end="129:70">CF_LAST_IO</name><operator pos:start="129:71" pos:end="129:71">)</operator></expr>)</condition> <block pos:start="129:74" pos:end="139:9">{<block_content pos:start="133:13" pos:end="137:25">

            <comment type="block" pos:start="131:13" pos:end="131:54">/* Accept I/O on the last instruction.  */</comment>

            <expr_stmt pos:start="133:13" pos:end="133:27"><expr pos:start="133:13" pos:end="133:26"><call pos:start="133:13" pos:end="133:26"><name pos:start="133:13" pos:end="133:24">gen_io_start</name><argument_list pos:start="133:25" pos:end="133:26">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:41"><expr pos:start="135:13" pos:end="135:40"><call pos:start="135:13" pos:end="135:40"><name pos:start="135:13" pos:end="135:31"><name pos:start="135:13" pos:end="135:15">ops</name><operator pos:start="135:16" pos:end="135:17">-&gt;</operator><name pos:start="135:18" pos:end="135:31">translate_insn</name></name><argument_list pos:start="135:32" pos:end="135:40">(<argument pos:start="135:33" pos:end="135:34"><expr pos:start="135:33" pos:end="135:34"><name pos:start="135:33" pos:end="135:34">db</name></expr></argument>, <argument pos:start="135:37" pos:end="135:39"><expr pos:start="135:37" pos:end="135:39"><name pos:start="135:37" pos:end="135:39">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:25"><expr pos:start="137:13" pos:end="137:24"><call pos:start="137:13" pos:end="137:24"><name pos:start="137:13" pos:end="137:22">gen_io_end</name><argument_list pos:start="137:23" pos:end="137:24">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="139:11" pos:end="143:9">else <block pos:start="139:16" pos:end="143:9">{<block_content pos:start="141:13" pos:end="141:41">

            <expr_stmt pos:start="141:13" pos:end="141:41"><expr pos:start="141:13" pos:end="141:40"><call pos:start="141:13" pos:end="141:40"><name pos:start="141:13" pos:end="141:31"><name pos:start="141:13" pos:end="141:15">ops</name><operator pos:start="141:16" pos:end="141:17">-&gt;</operator><name pos:start="141:18" pos:end="141:31">translate_insn</name></name><argument_list pos:start="141:32" pos:end="141:40">(<argument pos:start="141:33" pos:end="141:34"><expr pos:start="141:33" pos:end="141:34"><name pos:start="141:33" pos:end="141:34">db</name></expr></argument>, <argument pos:start="141:37" pos:end="141:39"><expr pos:start="141:37" pos:end="141:39"><name pos:start="141:37" pos:end="141:39">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="147:9" pos:end="147:63">/* Stop translation if translate_insn so indicated.  */</comment>

        <if_stmt pos:start="149:9" pos:end="153:9"><if pos:start="149:9" pos:end="153:9">if <condition pos:start="149:12" pos:end="149:37">(<expr pos:start="149:13" pos:end="149:36"><name pos:start="149:13" pos:end="149:22"><name pos:start="149:13" pos:end="149:14">db</name><operator pos:start="149:15" pos:end="149:16">-&gt;</operator><name pos:start="149:17" pos:end="149:22">is_jmp</name></name> <operator pos:start="149:24" pos:end="149:25">!=</operator> <name pos:start="149:27" pos:end="149:36">DISAS_NEXT</name></expr>)</condition> <block pos:start="149:39" pos:end="153:9">{<block_content pos:start="151:13" pos:end="151:18">

            <break pos:start="151:13" pos:end="151:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="157:9" pos:end="159:67">/* Stop translation if the output buffer is full,

           or we have executed all of the allowed instructions.  */</comment>

        <if_stmt pos:start="161:9" pos:end="167:9"><if pos:start="161:9" pos:end="167:9">if <condition pos:start="161:12" pos:end="161:60">(<expr pos:start="161:13" pos:end="161:59"><call pos:start="161:13" pos:end="161:29"><name pos:start="161:13" pos:end="161:27">tcg_op_buf_full</name><argument_list pos:start="161:28" pos:end="161:29">()</argument_list></call> <operator pos:start="161:31" pos:end="161:32">||</operator> <name pos:start="161:34" pos:end="161:46"><name pos:start="161:34" pos:end="161:35">db</name><operator pos:start="161:36" pos:end="161:37">-&gt;</operator><name pos:start="161:38" pos:end="161:46">num_insns</name></name> <operator pos:start="161:48" pos:end="161:49">&gt;=</operator> <name pos:start="161:51" pos:end="161:59">max_insns</name></expr>)</condition> <block pos:start="161:62" pos:end="167:9">{<block_content pos:start="163:13" pos:end="165:18">

            <expr_stmt pos:start="163:13" pos:end="163:40"><expr pos:start="163:13" pos:end="163:39"><name pos:start="163:13" pos:end="163:22"><name pos:start="163:13" pos:end="163:14">db</name><operator pos:start="163:15" pos:end="163:16">-&gt;</operator><name pos:start="163:17" pos:end="163:22">is_jmp</name></name> <operator pos:start="163:24" pos:end="163:24">=</operator> <name pos:start="163:26" pos:end="163:39">DISAS_TOO_MANY</name></expr>;</expr_stmt>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="173:5" pos:end="173:64">/* Emit code to exit the TB, as indicated by db-&gt;is_jmp.  */</comment>

    <expr_stmt pos:start="175:5" pos:end="175:26"><expr pos:start="175:5" pos:end="175:25"><call pos:start="175:5" pos:end="175:25"><name pos:start="175:5" pos:end="175:16"><name pos:start="175:5" pos:end="175:7">ops</name><operator pos:start="175:8" pos:end="175:9">-&gt;</operator><name pos:start="175:10" pos:end="175:16">tb_stop</name></name><argument_list pos:start="175:17" pos:end="175:25">(<argument pos:start="175:18" pos:end="175:19"><expr pos:start="175:18" pos:end="175:19"><name pos:start="175:18" pos:end="175:19">db</name></expr></argument>, <argument pos:start="175:22" pos:end="175:24"><expr pos:start="175:22" pos:end="175:24"><name pos:start="175:22" pos:end="175:24">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:38"><expr pos:start="177:5" pos:end="177:37"><call pos:start="177:5" pos:end="177:37"><name pos:start="177:5" pos:end="177:14">gen_tb_end</name><argument_list pos:start="177:15" pos:end="177:37">(<argument pos:start="177:16" pos:end="177:21"><expr pos:start="177:16" pos:end="177:21"><name pos:start="177:16" pos:end="177:21"><name pos:start="177:16" pos:end="177:17">db</name><operator pos:start="177:18" pos:end="177:19">-&gt;</operator><name pos:start="177:20" pos:end="177:21">tb</name></name></expr></argument>, <argument pos:start="177:24" pos:end="177:36"><expr pos:start="177:24" pos:end="177:36"><name pos:start="177:24" pos:end="177:36"><name pos:start="177:24" pos:end="177:25">db</name><operator pos:start="177:26" pos:end="177:27">-&gt;</operator><name pos:start="177:28" pos:end="177:36">num_insns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="181:5" pos:end="181:73">/* The disas_log hook may use these values rather than recompute.  */</comment>

    <expr_stmt pos:start="183:5" pos:end="183:46"><expr pos:start="183:5" pos:end="183:45"><name pos:start="183:5" pos:end="183:16"><name pos:start="183:5" pos:end="183:6">db</name><operator pos:start="183:7" pos:end="183:8">-&gt;</operator><name pos:start="183:9" pos:end="183:10">tb</name><operator pos:start="183:11" pos:end="183:12">-&gt;</operator><name pos:start="183:13" pos:end="183:16">size</name></name> <operator pos:start="183:18" pos:end="183:18">=</operator> <name pos:start="183:20" pos:end="183:30"><name pos:start="183:20" pos:end="183:21">db</name><operator pos:start="183:22" pos:end="183:23">-&gt;</operator><name pos:start="183:24" pos:end="183:30">pc_next</name></name> <operator pos:start="183:32" pos:end="183:32">-</operator> <name pos:start="183:34" pos:end="183:45"><name pos:start="183:34" pos:end="183:35">db</name><operator pos:start="183:36" pos:end="183:37">-&gt;</operator><name pos:start="183:38" pos:end="183:45">pc_first</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="190:0"><expr pos:start="185:5" pos:end="185:34"><name pos:start="185:5" pos:end="185:18"><name pos:start="185:5" pos:end="185:6">db</name><operator pos:start="185:7" pos:end="185:8">-&gt;</operator><name pos:start="185:9" pos:end="185:10">tb</name><operator pos:start="185:11" pos:end="185:12">-&gt;</operator><name pos:start="185:13" pos:end="185:18">icount</name></name> <operator pos:start="185:20" pos:end="185:20">=</operator> <name pos:start="185:22" pos:end="185:34"><name pos:start="185:22" pos:end="185:23">db</name><operator pos:start="185:24" pos:end="185:25">-&gt;</operator><name pos:start="185:26" pos:end="185:34">num_insns</name></name></expr>;</expr_stmt>



<cpp:ifdef pos:start="189:1" pos:end="189:18">#<cpp:directive pos:start="189:2" pos:end="189:6">ifdef</cpp:directive> <name pos:start="189:8" pos:end="189:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="191:5" pos:end="208:0"><if pos:start="191:5" pos:end="208:0">if <condition pos:start="191:8" pos:end="193:48">(<expr pos:start="191:9" pos:end="193:47"><call pos:start="191:9" pos:end="191:45"><name pos:start="191:9" pos:end="191:26">qemu_loglevel_mask</name><argument_list pos:start="191:27" pos:end="191:45">(<argument pos:start="191:28" pos:end="191:44"><expr pos:start="191:28" pos:end="191:44"><name pos:start="191:28" pos:end="191:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call>

        <operator pos:start="193:9" pos:end="193:10">&amp;&amp;</operator> <call pos:start="193:12" pos:end="193:47"><name pos:start="193:12" pos:end="193:33">qemu_log_in_addr_range</name><argument_list pos:start="193:34" pos:end="193:47">(<argument pos:start="193:35" pos:end="193:46"><expr pos:start="193:35" pos:end="193:46"><name pos:start="193:35" pos:end="193:46"><name pos:start="193:35" pos:end="193:36">db</name><operator pos:start="193:37" pos:end="193:38">-&gt;</operator><name pos:start="193:39" pos:end="193:46">pc_first</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="193:50" pos:end="208:0">{<block_content pos:start="195:9" pos:end="203:26">

        <expr_stmt pos:start="195:9" pos:end="195:24"><expr pos:start="195:9" pos:end="195:23"><call pos:start="195:9" pos:end="195:23"><name pos:start="195:9" pos:end="195:21">qemu_log_lock</name><argument_list pos:start="195:22" pos:end="195:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:39"><expr pos:start="197:9" pos:end="197:38"><call pos:start="197:9" pos:end="197:38"><name pos:start="197:9" pos:end="197:16">qemu_log</name><argument_list pos:start="197:17" pos:end="197:38">(<argument pos:start="197:18" pos:end="197:37"><expr pos:start="197:18" pos:end="197:37"><literal type="string" pos:start="197:18" pos:end="197:37">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:32"><expr pos:start="199:9" pos:end="199:31"><call pos:start="199:9" pos:end="199:31"><name pos:start="199:9" pos:end="199:22"><name pos:start="199:9" pos:end="199:11">ops</name><operator pos:start="199:12" pos:end="199:13">-&gt;</operator><name pos:start="199:14" pos:end="199:22">disas_log</name></name><argument_list pos:start="199:23" pos:end="199:31">(<argument pos:start="199:24" pos:end="199:25"><expr pos:start="199:24" pos:end="199:25"><name pos:start="199:24" pos:end="199:25">db</name></expr></argument>, <argument pos:start="199:28" pos:end="199:30"><expr pos:start="199:28" pos:end="199:30"><name pos:start="199:28" pos:end="199:30">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:23"><expr pos:start="201:9" pos:end="201:22"><call pos:start="201:9" pos:end="201:22"><name pos:start="201:9" pos:end="201:16">qemu_log</name><argument_list pos:start="201:17" pos:end="201:22">(<argument pos:start="201:18" pos:end="201:21"><expr pos:start="201:18" pos:end="201:21"><literal type="string" pos:start="201:18" pos:end="201:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:26"><expr pos:start="203:9" pos:end="203:25"><call pos:start="203:9" pos:end="203:25"><name pos:start="203:9" pos:end="203:23">qemu_log_unlock</name><argument_list pos:start="203:24" pos:end="203:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="207:1" pos:end="207:6">#<cpp:directive pos:start="207:2" pos:end="207:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
