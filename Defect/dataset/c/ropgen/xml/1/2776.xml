<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2776.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:14"><name pos:start="1:1" pos:end="1:7">float64</name> <name pos:start="1:9" pos:end="1:14">HELPER</name></type>(<name pos:start="1:16" pos:end="1:24">recpe_f64</name>)<parameter_list pos:start="1:26" pos:end="1:53">(<parameter pos:start="1:27" pos:end="1:39"><decl pos:start="1:27" pos:end="1:39"><type pos:start="1:27" pos:end="1:39"><name pos:start="1:27" pos:end="1:33">float64</name></type> <name pos:start="1:35" pos:end="1:39">input</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:52"><decl pos:start="1:42" pos:end="1:52"><type pos:start="1:42" pos:end="1:52"><name pos:start="1:42" pos:end="1:45">void</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">fpstp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:34">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">float_status</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:22">fpst</name> <init pos:start="5:24" pos:end="5:30">= <expr pos:start="5:26" pos:end="5:30"><name pos:start="5:26" pos:end="5:30">fpstp</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:61"><decl pos:start="7:5" pos:end="7:60"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">float64</name></type> <name pos:start="7:13" pos:end="7:15">f64</name> <init pos:start="7:17" pos:end="7:60">= <expr pos:start="7:19" pos:end="7:60"><call pos:start="7:19" pos:end="7:60"><name pos:start="7:19" pos:end="7:47">float64_squash_input_denormal</name><argument_list pos:start="7:48" pos:end="7:60">(<argument pos:start="7:49" pos:end="7:53"><expr pos:start="7:49" pos:end="7:53"><name pos:start="7:49" pos:end="7:53">input</name></expr></argument>, <argument pos:start="7:56" pos:end="7:59"><expr pos:start="7:56" pos:end="7:59"><name pos:start="7:56" pos:end="7:59">fpst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:20">f64_val</name> <init pos:start="9:22" pos:end="9:39">= <expr pos:start="9:24" pos:end="9:39"><call pos:start="9:24" pos:end="9:39"><name pos:start="9:24" pos:end="9:34">float64_val</name><argument_list pos:start="9:35" pos:end="9:39">(<argument pos:start="9:36" pos:end="9:38"><expr pos:start="9:36" pos:end="9:38"><name pos:start="9:36" pos:end="9:38">f64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:56"><decl pos:start="11:5" pos:end="11:55"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:21">f64_sbit</name> <init pos:start="11:23" pos:end="11:55">= <expr pos:start="11:25" pos:end="11:55"><literal type="number" pos:start="11:25" pos:end="11:45">0x8000000000000000ULL</literal> <operator pos:start="11:47" pos:end="11:47">&amp;</operator> <name pos:start="11:49" pos:end="11:55">f64_val</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:49"><decl pos:start="13:5" pos:end="13:48"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:19">f64_exp</name> <init pos:start="13:21" pos:end="13:48">= <expr pos:start="13:23" pos:end="13:48"><call pos:start="13:23" pos:end="13:48"><name pos:start="13:23" pos:end="13:31">extract64</name><argument_list pos:start="13:32" pos:end="13:48">(<argument pos:start="13:33" pos:end="13:39"><expr pos:start="13:33" pos:end="13:39"><name pos:start="13:33" pos:end="13:39">f64_val</name></expr></argument>, <argument pos:start="13:42" pos:end="13:43"><expr pos:start="13:42" pos:end="13:43"><literal type="number" pos:start="13:42" pos:end="13:43">52</literal></expr></argument>, <argument pos:start="13:46" pos:end="13:47"><expr pos:start="13:46" pos:end="13:47"><literal type="number" pos:start="13:46" pos:end="13:47">11</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">float64</name></type> <name pos:start="15:13" pos:end="15:15">r64</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:20">r64_val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:19">r64_exp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:21">r64_frac</name></decl>;</decl_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:37">/* Deal with any special cases */</comment>

    <if_stmt pos:start="27:5" pos:end="79:5"><if pos:start="27:5" pos:end="47:5">if <condition pos:start="27:8" pos:end="27:32">(<expr pos:start="27:9" pos:end="27:31"><call pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:26">float64_is_any_nan</name><argument_list pos:start="27:27" pos:end="27:31">(<argument pos:start="27:28" pos:end="27:30"><expr pos:start="27:28" pos:end="27:30"><name pos:start="27:28" pos:end="27:30">f64</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:34" pos:end="47:5">{<block_content pos:start="29:9" pos:end="45:19">

        <decl_stmt pos:start="29:9" pos:end="29:26"><decl pos:start="29:9" pos:end="29:25"><type pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:15">float64</name></type> <name pos:start="29:17" pos:end="29:19">nan</name> <init pos:start="29:21" pos:end="29:25">= <expr pos:start="29:23" pos:end="29:25"><name pos:start="29:23" pos:end="29:25">f64</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:42">(<expr pos:start="31:13" pos:end="31:41"><call pos:start="31:13" pos:end="31:41"><name pos:start="31:13" pos:end="31:36">float64_is_signaling_nan</name><argument_list pos:start="31:37" pos:end="31:41">(<argument pos:start="31:38" pos:end="31:40"><expr pos:start="31:38" pos:end="31:40"><name pos:start="31:38" pos:end="31:40">f64</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:44" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:49">

            <expr_stmt pos:start="33:13" pos:end="33:50"><expr pos:start="33:13" pos:end="33:49"><call pos:start="33:13" pos:end="33:49"><name pos:start="33:13" pos:end="33:23">float_raise</name><argument_list pos:start="33:24" pos:end="33:49">(<argument pos:start="33:25" pos:end="33:42"><expr pos:start="33:25" pos:end="33:42"><name pos:start="33:25" pos:end="33:42">float_flag_invalid</name></expr></argument>, <argument pos:start="33:45" pos:end="33:48"><expr pos:start="33:45" pos:end="33:48"><name pos:start="33:45" pos:end="33:48">fpst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:49"><expr pos:start="35:13" pos:end="35:48"><name pos:start="35:13" pos:end="35:15">nan</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:48"><name pos:start="35:19" pos:end="35:43">float64_maybe_silence_nan</name><argument_list pos:start="35:44" pos:end="35:48">(<argument pos:start="35:45" pos:end="35:47"><expr pos:start="35:45" pos:end="35:47"><name pos:start="35:45" pos:end="35:47">f64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:35">(<expr pos:start="39:13" pos:end="39:34"><name pos:start="39:13" pos:end="39:34"><name pos:start="39:13" pos:end="39:16">fpst</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:34">default_nan_mode</name></name></expr>)</condition> <block pos:start="39:37" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:39">

            <expr_stmt pos:start="41:13" pos:end="41:39"><expr pos:start="41:13" pos:end="41:38"><name pos:start="41:13" pos:end="41:15">nan</name> <operator pos:start="41:17" pos:end="41:17">=</operator>  <name pos:start="41:20" pos:end="41:38">float64_default_nan</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="45:9" pos:end="45:19">return <expr pos:start="45:16" pos:end="45:18"><name pos:start="45:16" pos:end="45:18">nan</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="47:7" pos:end="51:5">else if <condition pos:start="47:15" pos:end="47:40">(<expr pos:start="47:16" pos:end="47:39"><call pos:start="47:16" pos:end="47:39"><name pos:start="47:16" pos:end="47:34">float64_is_infinity</name><argument_list pos:start="47:35" pos:end="47:39">(<argument pos:start="47:36" pos:end="47:38"><expr pos:start="47:36" pos:end="47:38"><name pos:start="47:36" pos:end="47:38">f64</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:42" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:67">

        <return pos:start="49:9" pos:end="49:67">return <expr pos:start="49:16" pos:end="49:66"><call pos:start="49:16" pos:end="49:66"><name pos:start="49:16" pos:end="49:31">float64_set_sign</name><argument_list pos:start="49:32" pos:end="49:66">(<argument pos:start="49:33" pos:end="49:44"><expr pos:start="49:33" pos:end="49:44"><name pos:start="49:33" pos:end="49:44">float64_zero</name></expr></argument>, <argument pos:start="49:47" pos:end="49:65"><expr pos:start="49:47" pos:end="49:65"><call pos:start="49:47" pos:end="49:65"><name pos:start="49:47" pos:end="49:60">float64_is_neg</name><argument_list pos:start="49:61" pos:end="49:65">(<argument pos:start="49:62" pos:end="49:64"><expr pos:start="49:62" pos:end="49:64"><name pos:start="49:62" pos:end="49:64">f64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="51:7" pos:end="57:5">else if <condition pos:start="51:15" pos:end="51:36">(<expr pos:start="51:16" pos:end="51:35"><call pos:start="51:16" pos:end="51:35"><name pos:start="51:16" pos:end="51:30">float64_is_zero</name><argument_list pos:start="51:31" pos:end="51:35">(<argument pos:start="51:32" pos:end="51:34"><expr pos:start="51:32" pos:end="51:34"><name pos:start="51:32" pos:end="51:34">f64</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:38" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:71">

        <expr_stmt pos:start="53:9" pos:end="53:48"><expr pos:start="53:9" pos:end="53:47"><call pos:start="53:9" pos:end="53:47"><name pos:start="53:9" pos:end="53:19">float_raise</name><argument_list pos:start="53:20" pos:end="53:47">(<argument pos:start="53:21" pos:end="53:40"><expr pos:start="53:21" pos:end="53:40"><name pos:start="53:21" pos:end="53:40">float_flag_divbyzero</name></expr></argument>, <argument pos:start="53:43" pos:end="53:46"><expr pos:start="53:43" pos:end="53:46"><name pos:start="53:43" pos:end="53:46">fpst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:71">return <expr pos:start="55:16" pos:end="55:70"><call pos:start="55:16" pos:end="55:70"><name pos:start="55:16" pos:end="55:31">float64_set_sign</name><argument_list pos:start="55:32" pos:end="55:70">(<argument pos:start="55:33" pos:end="55:48"><expr pos:start="55:33" pos:end="55:48"><name pos:start="55:33" pos:end="55:48">float64_infinity</name></expr></argument>, <argument pos:start="55:51" pos:end="55:69"><expr pos:start="55:51" pos:end="55:69"><call pos:start="55:51" pos:end="55:69"><name pos:start="55:51" pos:end="55:64">float64_is_neg</name><argument_list pos:start="55:65" pos:end="55:69">(<argument pos:start="55:66" pos:end="55:68"><expr pos:start="55:66" pos:end="55:68"><name pos:start="55:66" pos:end="55:68">f64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="57:7" pos:end="73:5">else if <condition pos:start="57:15" pos:end="57:56">(<expr pos:start="57:16" pos:end="57:55"><operator pos:start="57:16" pos:end="57:16">(</operator><name pos:start="57:17" pos:end="57:23">f64_val</name> <operator pos:start="57:25" pos:end="57:25">&amp;</operator> <operator pos:start="57:27" pos:end="57:27">~</operator><operator pos:start="57:28" pos:end="57:28">(</operator><literal type="number" pos:start="57:29" pos:end="57:32">1ULL</literal> <operator pos:start="57:34" pos:end="57:35">&lt;&lt;</operator> <literal type="number" pos:start="57:37" pos:end="57:38">63</literal><operator pos:start="57:39" pos:end="57:39">)</operator><operator pos:start="57:40" pos:end="57:40">)</operator> <operator pos:start="57:42" pos:end="57:42">&lt;</operator> <operator pos:start="57:44" pos:end="57:44">(</operator><literal type="number" pos:start="57:45" pos:end="57:48">1ULL</literal> <operator pos:start="57:50" pos:end="57:51">&lt;&lt;</operator> <literal type="number" pos:start="57:53" pos:end="57:54">50</literal><operator pos:start="57:55" pos:end="57:55">)</operator></expr>)</condition> <block pos:start="57:58" pos:end="73:5">{<block_content pos:start="61:9" pos:end="71:9">

        <comment type="block" pos:start="59:9" pos:end="59:36">/* Abs(value) &lt; 2.0^-1024 */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:68"><expr pos:start="61:9" pos:end="61:67"><call pos:start="61:9" pos:end="61:67"><name pos:start="61:9" pos:end="61:19">float_raise</name><argument_list pos:start="61:20" pos:end="61:67">(<argument pos:start="61:21" pos:end="61:60"><expr pos:start="61:21" pos:end="61:60"><name pos:start="61:21" pos:end="61:39">float_flag_overflow</name> <operator pos:start="61:41" pos:end="61:41">|</operator> <name pos:start="61:43" pos:end="61:60">float_flag_inexact</name></expr></argument>, <argument pos:start="61:63" pos:end="61:66"><expr pos:start="61:63" pos:end="61:66"><name pos:start="61:63" pos:end="61:66">fpst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="71:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:41">(<expr pos:start="63:13" pos:end="63:40"><call pos:start="63:13" pos:end="63:40"><name pos:start="63:13" pos:end="63:24">round_to_inf</name><argument_list pos:start="63:25" pos:end="63:40">(<argument pos:start="63:26" pos:end="63:29"><expr pos:start="63:26" pos:end="63:29"><name pos:start="63:26" pos:end="63:29">fpst</name></expr></argument>, <argument pos:start="63:32" pos:end="63:39"><expr pos:start="63:32" pos:end="63:39"><name pos:start="63:32" pos:end="63:39">f64_sbit</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:43" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:75">

            <return pos:start="65:13" pos:end="65:75">return <expr pos:start="65:20" pos:end="65:74"><call pos:start="65:20" pos:end="65:74"><name pos:start="65:20" pos:end="65:35">float64_set_sign</name><argument_list pos:start="65:36" pos:end="65:74">(<argument pos:start="65:37" pos:end="65:52"><expr pos:start="65:37" pos:end="65:52"><name pos:start="65:37" pos:end="65:52">float64_infinity</name></expr></argument>, <argument pos:start="65:55" pos:end="65:73"><expr pos:start="65:55" pos:end="65:73"><call pos:start="65:55" pos:end="65:73"><name pos:start="65:55" pos:end="65:68">float64_is_neg</name><argument_list pos:start="65:69" pos:end="65:73">(<argument pos:start="65:70" pos:end="65:72"><expr pos:start="65:70" pos:end="65:72"><name pos:start="65:70" pos:end="65:72">f64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if> <else pos:start="67:11" pos:end="71:9">else <block pos:start="67:16" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:74">

            <return pos:start="69:13" pos:end="69:74">return <expr pos:start="69:20" pos:end="69:73"><call pos:start="69:20" pos:end="69:73"><name pos:start="69:20" pos:end="69:35">float64_set_sign</name><argument_list pos:start="69:36" pos:end="69:73">(<argument pos:start="69:37" pos:end="69:51"><expr pos:start="69:37" pos:end="69:51"><name pos:start="69:37" pos:end="69:51">float64_maxnorm</name></expr></argument>, <argument pos:start="69:54" pos:end="69:72"><expr pos:start="69:54" pos:end="69:72"><call pos:start="69:54" pos:end="69:72"><name pos:start="69:54" pos:end="69:67">float64_is_neg</name><argument_list pos:start="69:68" pos:end="69:72">(<argument pos:start="69:69" pos:end="69:71"><expr pos:start="69:69" pos:end="69:71"><name pos:start="69:69" pos:end="69:71">f64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="73:7" pos:end="79:5">else if <condition pos:start="73:15" pos:end="73:54">(<expr pos:start="73:16" pos:end="73:53"><name pos:start="73:16" pos:end="73:22">f64_exp</name> <operator pos:start="73:24" pos:end="73:25">&gt;=</operator> <literal type="number" pos:start="73:27" pos:end="73:30">1023</literal> <operator pos:start="73:32" pos:end="73:33">&amp;&amp;</operator> <name pos:start="73:35" pos:end="73:53"><name pos:start="73:35" pos:end="73:38">fpst</name><operator pos:start="73:39" pos:end="73:40">-&gt;</operator><name pos:start="73:41" pos:end="73:53">flush_to_zero</name></name></expr>)</condition> <block pos:start="73:56" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:67">

        <expr_stmt pos:start="75:9" pos:end="75:48"><expr pos:start="75:9" pos:end="75:47"><call pos:start="75:9" pos:end="75:47"><name pos:start="75:9" pos:end="75:19">float_raise</name><argument_list pos:start="75:20" pos:end="75:47">(<argument pos:start="75:21" pos:end="75:40"><expr pos:start="75:21" pos:end="75:40"><name pos:start="75:21" pos:end="75:40">float_flag_underflow</name></expr></argument>, <argument pos:start="75:43" pos:end="75:46"><expr pos:start="75:43" pos:end="75:46"><name pos:start="75:43" pos:end="75:46">fpst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:67">return <expr pos:start="77:16" pos:end="77:66"><call pos:start="77:16" pos:end="77:66"><name pos:start="77:16" pos:end="77:31">float64_set_sign</name><argument_list pos:start="77:32" pos:end="77:66">(<argument pos:start="77:33" pos:end="77:44"><expr pos:start="77:33" pos:end="77:44"><name pos:start="77:33" pos:end="77:44">float64_zero</name></expr></argument>, <argument pos:start="77:47" pos:end="77:65"><expr pos:start="77:47" pos:end="77:65"><call pos:start="77:47" pos:end="77:65"><name pos:start="77:47" pos:end="77:60">float64_is_neg</name><argument_list pos:start="77:61" pos:end="77:65">(<argument pos:start="77:62" pos:end="77:64"><expr pos:start="77:62" pos:end="77:64"><name pos:start="77:62" pos:end="77:64">f64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:47"><expr pos:start="83:5" pos:end="83:46"><name pos:start="83:5" pos:end="83:7">r64</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <call pos:start="83:11" pos:end="83:46"><name pos:start="83:11" pos:end="83:29">call_recip_estimate</name><argument_list pos:start="83:30" pos:end="83:46">(<argument pos:start="83:31" pos:end="83:33"><expr pos:start="83:31" pos:end="83:33"><name pos:start="83:31" pos:end="83:33">f64</name></expr></argument>, <argument pos:start="83:36" pos:end="83:39"><expr pos:start="83:36" pos:end="83:39"><literal type="number" pos:start="83:36" pos:end="83:39">2045</literal></expr></argument>, <argument pos:start="83:42" pos:end="83:45"><expr pos:start="83:42" pos:end="83:45"><name pos:start="83:42" pos:end="83:45">fpst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:31"><expr pos:start="85:5" pos:end="85:30"><name pos:start="85:5" pos:end="85:11">r64_val</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="85:30"><name pos:start="85:15" pos:end="85:25">float64_val</name><argument_list pos:start="85:26" pos:end="85:30">(<argument pos:start="85:27" pos:end="85:29"><expr pos:start="85:27" pos:end="85:29"><name pos:start="85:27" pos:end="85:29">r64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:41"><expr pos:start="87:5" pos:end="87:40"><name pos:start="87:5" pos:end="87:11">r64_exp</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <call pos:start="87:15" pos:end="87:40"><name pos:start="87:15" pos:end="87:23">extract64</name><argument_list pos:start="87:24" pos:end="87:40">(<argument pos:start="87:25" pos:end="87:31"><expr pos:start="87:25" pos:end="87:31"><name pos:start="87:25" pos:end="87:31">r64_val</name></expr></argument>, <argument pos:start="87:34" pos:end="87:35"><expr pos:start="87:34" pos:end="87:35"><literal type="number" pos:start="87:34" pos:end="87:35">52</literal></expr></argument>, <argument pos:start="87:38" pos:end="87:39"><expr pos:start="87:38" pos:end="87:39"><literal type="number" pos:start="87:38" pos:end="87:39">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:41"><expr pos:start="89:5" pos:end="89:40"><name pos:start="89:5" pos:end="89:12">r64_frac</name> <operator pos:start="89:14" pos:end="89:14">=</operator> <call pos:start="89:16" pos:end="89:40"><name pos:start="89:16" pos:end="89:24">extract64</name><argument_list pos:start="89:25" pos:end="89:40">(<argument pos:start="89:26" pos:end="89:32"><expr pos:start="89:26" pos:end="89:32"><name pos:start="89:26" pos:end="89:32">r64_val</name></expr></argument>, <argument pos:start="89:35" pos:end="89:35"><expr pos:start="89:35" pos:end="89:35"><literal type="number" pos:start="89:35" pos:end="89:35">0</literal></expr></argument>, <argument pos:start="89:38" pos:end="89:39"><expr pos:start="89:38" pos:end="89:39"><literal type="number" pos:start="89:38" pos:end="89:39">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:59">/* result = sign : result_exp&lt;10:0&gt; : fraction&lt;51:0&gt; */</comment>

    <return pos:start="95:5" pos:end="99:34">return <expr pos:start="95:12" pos:end="99:33"><call pos:start="95:12" pos:end="99:33"><name pos:start="95:12" pos:end="95:23">make_float64</name><argument_list pos:start="95:24" pos:end="99:33">(<argument pos:start="95:25" pos:end="99:32"><expr pos:start="95:25" pos:end="99:32"><name pos:start="95:25" pos:end="95:32">f64_sbit</name> <operator pos:start="95:34" pos:end="95:34">|</operator>

                        <operator pos:start="97:25" pos:end="97:25">(</operator><operator pos:start="97:26" pos:end="97:26">(</operator><name pos:start="97:27" pos:end="97:33">r64_exp</name> <operator pos:start="97:35" pos:end="97:35">&amp;</operator> <literal type="number" pos:start="97:37" pos:end="97:41">0x7ff</literal><operator pos:start="97:42" pos:end="97:42">)</operator> <operator pos:start="97:44" pos:end="97:45">&lt;&lt;</operator> <literal type="number" pos:start="97:47" pos:end="97:48">52</literal><operator pos:start="97:49" pos:end="97:49">)</operator> <operator pos:start="97:51" pos:end="97:51">|</operator>

                        <name pos:start="99:25" pos:end="99:32">r64_frac</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
