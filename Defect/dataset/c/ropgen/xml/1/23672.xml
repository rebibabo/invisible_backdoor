<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23672.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:52"><name pos:start="1:1" pos:end="1:19">matroska_add_stream</name> <argument_list pos:start="1:21" pos:end="1:52">(<argument pos:start="1:22" pos:end="1:51">MatroskaDemuxContext *matroska</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="1219:1">{<block_content pos:start="5:5" pos:end="1217:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">res</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:15">id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">MatroskaTrack</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:24">track</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:77"><expr pos:start="13:5" pos:end="13:76"><call pos:start="13:5" pos:end="13:76"><name pos:start="13:5" pos:end="13:10">av_log</name><argument_list pos:start="13:11" pos:end="13:76">(<argument pos:start="13:12" pos:end="13:24"><expr pos:start="13:12" pos:end="13:24"><name pos:start="13:12" pos:end="13:24"><name pos:start="13:12" pos:end="13:19">matroska</name><operator pos:start="13:20" pos:end="13:21">-&gt;</operator><name pos:start="13:22" pos:end="13:24">ctx</name></name></expr></argument>, <argument pos:start="13:27" pos:end="13:38"><expr pos:start="13:27" pos:end="13:38"><name pos:start="13:27" pos:end="13:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="13:41" pos:end="13:75"><expr pos:start="13:41" pos:end="13:75"><literal type="string" pos:start="13:41" pos:end="13:75">"parsing track, adding stream..,\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:78">/* Allocate a generic track. As soon as we know its type we'll realloc. */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:39"><expr pos:start="19:5" pos:end="19:38"><name pos:start="19:5" pos:end="19:9">track</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <call pos:start="19:13" pos:end="19:38"><name pos:start="19:13" pos:end="19:22">av_mallocz</name><argument_list pos:start="19:23" pos:end="19:38">(<argument pos:start="19:24" pos:end="19:37"><expr pos:start="19:24" pos:end="19:37"><name pos:start="19:24" pos:end="19:37">MAX_TRACK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:27"><expr pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:12">matroska</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:24">num_tracks</name></name><operator pos:start="21:25" pos:end="21:26">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:35"><expr pos:start="23:5" pos:end="23:34"><call pos:start="23:5" pos:end="23:34"><name pos:start="23:5" pos:end="23:10">strcpy</name><argument_list pos:start="23:11" pos:end="23:34">(<argument pos:start="23:12" pos:end="23:26"><expr pos:start="23:12" pos:end="23:26"><name pos:start="23:12" pos:end="23:26"><name pos:start="23:12" pos:end="23:16">track</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:26">language</name></name></expr></argument>, <argument pos:start="23:29" pos:end="23:33"><expr pos:start="23:29" pos:end="23:33"><literal type="string" pos:start="23:29" pos:end="23:33">"eng"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:31">/* start with the master */</comment>

    <if_stmt pos:start="29:5" pos:end="31:19"><if pos:start="29:5" pos:end="31:19">if <condition pos:start="29:8" pos:end="29:52">(<expr pos:start="29:9" pos:end="29:51"><operator pos:start="29:9" pos:end="29:9">(</operator><name pos:start="29:10" pos:end="29:12">res</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <call pos:start="29:16" pos:end="29:46"><name pos:start="29:16" pos:end="29:31">ebml_read_master</name><argument_list pos:start="29:32" pos:end="29:46">(<argument pos:start="29:33" pos:end="29:40"><expr pos:start="29:33" pos:end="29:40"><name pos:start="29:33" pos:end="29:40">matroska</name></expr></argument>, <argument pos:start="29:43" pos:end="29:45"><expr pos:start="29:43" pos:end="29:45"><operator pos:start="29:43" pos:end="29:43">&amp;</operator><name pos:start="29:44" pos:end="29:45">id</name></expr></argument>)</argument_list></call><operator pos:start="29:47" pos:end="29:47">)</operator> <operator pos:start="29:49" pos:end="29:49">&lt;</operator> <literal type="number" pos:start="29:51" pos:end="29:51">0</literal></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:19"><block_content pos:start="31:9" pos:end="31:19">

        <return pos:start="31:9" pos:end="31:19">return <expr pos:start="31:16" pos:end="31:18"><name pos:start="31:16" pos:end="31:18">res</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:44">/* try reading the trackentry headers */</comment>

    <while pos:start="37:5" pos:end="1213:5">while <condition pos:start="37:11" pos:end="37:20">(<expr pos:start="37:12" pos:end="37:19"><name pos:start="37:12" pos:end="37:14">res</name> <operator pos:start="37:16" pos:end="37:17">==</operator> <literal type="number" pos:start="37:19" pos:end="37:19">0</literal></expr>)</condition> <block pos:start="37:22" pos:end="1213:5">{<block_content pos:start="39:9" pos:end="1211:9">

        <if_stmt pos:start="39:9" pos:end="51:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:64">(<expr pos:start="39:13" pos:end="39:63"><operator pos:start="39:13" pos:end="39:13">!</operator><operator pos:start="39:14" pos:end="39:14">(</operator><name pos:start="39:15" pos:end="39:16">id</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="39:62"><name pos:start="39:20" pos:end="39:31">ebml_peek_id</name><argument_list pos:start="39:32" pos:end="39:62">(<argument pos:start="39:33" pos:end="39:40"><expr pos:start="39:33" pos:end="39:40"><name pos:start="39:33" pos:end="39:40">matroska</name></expr></argument>, <argument pos:start="39:43" pos:end="39:61"><expr pos:start="39:43" pos:end="39:61"><operator pos:start="39:43" pos:end="39:43">&amp;</operator><name pos:start="39:44" pos:end="39:61"><name pos:start="39:44" pos:end="39:51">matroska</name><operator pos:start="39:52" pos:end="39:53">-&gt;</operator><name pos:start="39:54" pos:end="39:61">level_up</name></name></expr></argument>)</argument_list></call><operator pos:start="39:63" pos:end="39:63">)</operator></expr>)</condition> <block pos:start="39:66" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:18">

            <expr_stmt pos:start="41:13" pos:end="41:31"><expr pos:start="41:13" pos:end="41:30"><name pos:start="41:13" pos:end="41:15">res</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:30"><name pos:start="41:19" pos:end="41:25">AVERROR</name><argument_list pos:start="41:26" pos:end="41:30">(<argument pos:start="41:27" pos:end="41:29"><expr pos:start="41:27" pos:end="41:29"><name pos:start="41:27" pos:end="41:29">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="43:13" pos:end="43:18">break;</break>

        </block_content>}</block></if> <if type="elseif" pos:start="45:11" pos:end="51:9">else if <condition pos:start="45:19" pos:end="45:42">(<expr pos:start="45:20" pos:end="45:41"><name pos:start="45:20" pos:end="45:37"><name pos:start="45:20" pos:end="45:27">matroska</name><operator pos:start="45:28" pos:end="45:29">-&gt;</operator><name pos:start="45:30" pos:end="45:37">level_up</name></name> <operator pos:start="45:39" pos:end="45:39">&gt;</operator> <literal type="number" pos:start="45:41" pos:end="45:41">0</literal></expr>)</condition> <block pos:start="45:44" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:18">

            <expr_stmt pos:start="47:13" pos:end="47:33"><expr pos:start="47:13" pos:end="47:32"><name pos:start="47:13" pos:end="47:30"><name pos:start="47:13" pos:end="47:20">matroska</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:30">level_up</name></name><operator pos:start="47:31" pos:end="47:32">--</operator></expr>;</expr_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="55:9" pos:end="1201:9">switch <condition pos:start="55:16" pos:end="55:19">(<expr pos:start="55:17" pos:end="55:18"><name pos:start="55:17" pos:end="55:18">id</name></expr>)</condition> <block pos:start="55:21" pos:end="1201:9">{<block_content pos:start="59:13" pos:end="1199:22">

            <comment type="block" pos:start="57:13" pos:end="57:49">/* track number (unique stream ID) */</comment>

            <case pos:start="59:13" pos:end="59:41">case <expr pos:start="59:18" pos:end="59:40"><name pos:start="59:18" pos:end="59:40">MATROSKA_ID_TRACKNUMBER</name></expr>:</case> <block pos:start="59:43" pos:end="71:13">{<block_content pos:start="61:17" pos:end="69:22">

                <decl_stmt pos:start="61:17" pos:end="61:29"><decl pos:start="61:17" pos:end="61:28"><type pos:start="61:17" pos:end="61:24"><name pos:start="61:17" pos:end="61:24">uint64_t</name></type> <name pos:start="61:26" pos:end="61:28">num</name></decl>;</decl_stmt>

                <if_stmt pos:start="63:17" pos:end="65:26"><if pos:start="63:17" pos:end="65:26">if <condition pos:start="63:20" pos:end="63:68">(<expr pos:start="63:21" pos:end="63:67"><operator pos:start="63:21" pos:end="63:21">(</operator><name pos:start="63:22" pos:end="63:24">res</name> <operator pos:start="63:26" pos:end="63:26">=</operator> <call pos:start="63:28" pos:end="63:62"><name pos:start="63:28" pos:end="63:41">ebml_read_uint</name><argument_list pos:start="63:42" pos:end="63:62">(<argument pos:start="63:43" pos:end="63:50"><expr pos:start="63:43" pos:end="63:50"><name pos:start="63:43" pos:end="63:50">matroska</name></expr></argument>, <argument pos:start="63:53" pos:end="63:55"><expr pos:start="63:53" pos:end="63:55"><operator pos:start="63:53" pos:end="63:53">&amp;</operator><name pos:start="63:54" pos:end="63:55">id</name></expr></argument>, <argument pos:start="63:58" pos:end="63:61"><expr pos:start="63:58" pos:end="63:61"><operator pos:start="63:58" pos:end="63:58">&amp;</operator><name pos:start="63:59" pos:end="63:61">num</name></expr></argument>)</argument_list></call><operator pos:start="63:63" pos:end="63:63">)</operator> <operator pos:start="63:65" pos:end="63:65">&lt;</operator> <literal type="number" pos:start="63:67" pos:end="63:67">0</literal></expr>)</condition><block type="pseudo" pos:start="65:21" pos:end="65:26"><block_content pos:start="65:21" pos:end="65:26">

                    <break pos:start="65:21" pos:end="65:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:33"><expr pos:start="67:17" pos:end="67:32"><name pos:start="67:17" pos:end="67:26"><name pos:start="67:17" pos:end="67:21">track</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:26">num</name></name> <operator pos:start="67:28" pos:end="67:28">=</operator> <name pos:start="67:30" pos:end="67:32">num</name></expr>;</expr_stmt>

                <break pos:start="69:17" pos:end="69:22">break;</break>

            </block_content>}</block>



            <comment type="block" pos:start="75:13" pos:end="75:47">/* track UID (unique identifier) */</comment>

            <case pos:start="77:13" pos:end="77:38">case <expr pos:start="77:18" pos:end="77:37"><name pos:start="77:18" pos:end="77:37">MATROSKA_ID_TRACKUID</name></expr>:</case> <block pos:start="77:40" pos:end="89:13">{<block_content pos:start="79:17" pos:end="87:22">

                <decl_stmt pos:start="79:17" pos:end="79:29"><decl pos:start="79:17" pos:end="79:28"><type pos:start="79:17" pos:end="79:24"><name pos:start="79:17" pos:end="79:24">uint64_t</name></type> <name pos:start="79:26" pos:end="79:28">num</name></decl>;</decl_stmt>

                <if_stmt pos:start="81:17" pos:end="83:26"><if pos:start="81:17" pos:end="83:26">if <condition pos:start="81:20" pos:end="81:68">(<expr pos:start="81:21" pos:end="81:67"><operator pos:start="81:21" pos:end="81:21">(</operator><name pos:start="81:22" pos:end="81:24">res</name> <operator pos:start="81:26" pos:end="81:26">=</operator> <call pos:start="81:28" pos:end="81:62"><name pos:start="81:28" pos:end="81:41">ebml_read_uint</name><argument_list pos:start="81:42" pos:end="81:62">(<argument pos:start="81:43" pos:end="81:50"><expr pos:start="81:43" pos:end="81:50"><name pos:start="81:43" pos:end="81:50">matroska</name></expr></argument>, <argument pos:start="81:53" pos:end="81:55"><expr pos:start="81:53" pos:end="81:55"><operator pos:start="81:53" pos:end="81:53">&amp;</operator><name pos:start="81:54" pos:end="81:55">id</name></expr></argument>, <argument pos:start="81:58" pos:end="81:61"><expr pos:start="81:58" pos:end="81:61"><operator pos:start="81:58" pos:end="81:58">&amp;</operator><name pos:start="81:59" pos:end="81:61">num</name></expr></argument>)</argument_list></call><operator pos:start="81:63" pos:end="81:63">)</operator> <operator pos:start="81:65" pos:end="81:65">&lt;</operator> <literal type="number" pos:start="81:67" pos:end="81:67">0</literal></expr>)</condition><block type="pseudo" pos:start="83:21" pos:end="83:26"><block_content pos:start="83:21" pos:end="83:26">

                    <break pos:start="83:21" pos:end="83:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:33"><expr pos:start="85:17" pos:end="85:32"><name pos:start="85:17" pos:end="85:26"><name pos:start="85:17" pos:end="85:21">track</name><operator pos:start="85:22" pos:end="85:23">-&gt;</operator><name pos:start="85:24" pos:end="85:26">uid</name></name> <operator pos:start="85:28" pos:end="85:28">=</operator> <name pos:start="85:30" pos:end="85:32">num</name></expr>;</expr_stmt>

                <break pos:start="87:17" pos:end="87:22">break;</break>

            </block_content>}</block>



            <comment type="block" pos:start="93:13" pos:end="93:69">/* track type (video, audio, combined, subtitle, etc.) */</comment>

            <case pos:start="95:13" pos:end="95:39">case <expr pos:start="95:18" pos:end="95:38"><name pos:start="95:18" pos:end="95:38">MATROSKA_ID_TRACKTYPE</name></expr>:</case> <block pos:start="95:41" pos:end="151:13">{<block_content pos:start="97:17" pos:end="149:22">

                <decl_stmt pos:start="97:17" pos:end="97:29"><decl pos:start="97:17" pos:end="97:28"><type pos:start="97:17" pos:end="97:24"><name pos:start="97:17" pos:end="97:24">uint64_t</name></type> <name pos:start="97:26" pos:end="97:28">num</name></decl>;</decl_stmt>

                <if_stmt pos:start="99:17" pos:end="101:26"><if pos:start="99:17" pos:end="101:26">if <condition pos:start="99:20" pos:end="99:68">(<expr pos:start="99:21" pos:end="99:67"><operator pos:start="99:21" pos:end="99:21">(</operator><name pos:start="99:22" pos:end="99:24">res</name> <operator pos:start="99:26" pos:end="99:26">=</operator> <call pos:start="99:28" pos:end="99:62"><name pos:start="99:28" pos:end="99:41">ebml_read_uint</name><argument_list pos:start="99:42" pos:end="99:62">(<argument pos:start="99:43" pos:end="99:50"><expr pos:start="99:43" pos:end="99:50"><name pos:start="99:43" pos:end="99:50">matroska</name></expr></argument>, <argument pos:start="99:53" pos:end="99:55"><expr pos:start="99:53" pos:end="99:55"><operator pos:start="99:53" pos:end="99:53">&amp;</operator><name pos:start="99:54" pos:end="99:55">id</name></expr></argument>, <argument pos:start="99:58" pos:end="99:61"><expr pos:start="99:58" pos:end="99:61"><operator pos:start="99:58" pos:end="99:58">&amp;</operator><name pos:start="99:59" pos:end="99:61">num</name></expr></argument>)</argument_list></call><operator pos:start="99:63" pos:end="99:63">)</operator> <operator pos:start="99:65" pos:end="99:65">&lt;</operator> <literal type="number" pos:start="99:67" pos:end="99:67">0</literal></expr>)</condition><block type="pseudo" pos:start="101:21" pos:end="101:26"><block_content pos:start="101:21" pos:end="101:26">

                    <break pos:start="101:21" pos:end="101:26">break;</break></block_content></block></if></if_stmt>

                <if_stmt pos:start="103:17" pos:end="111:17"><if pos:start="103:17" pos:end="111:17">if <condition pos:start="103:20" pos:end="103:54">(<expr pos:start="103:21" pos:end="103:53"><name pos:start="103:21" pos:end="103:31"><name pos:start="103:21" pos:end="103:25">track</name><operator pos:start="103:26" pos:end="103:27">-&gt;</operator><name pos:start="103:28" pos:end="103:31">type</name></name> <operator pos:start="103:33" pos:end="103:34">&amp;&amp;</operator> <name pos:start="103:36" pos:end="103:46"><name pos:start="103:36" pos:end="103:40">track</name><operator pos:start="103:41" pos:end="103:42">-&gt;</operator><name pos:start="103:43" pos:end="103:46">type</name></name> <operator pos:start="103:48" pos:end="103:49">!=</operator> <name pos:start="103:51" pos:end="103:53">num</name></expr>)</condition> <block pos:start="103:56" pos:end="111:17">{<block_content pos:start="105:21" pos:end="109:26">

                    <expr_stmt pos:start="105:21" pos:end="107:75"><expr pos:start="105:21" pos:end="107:74"><call pos:start="105:21" pos:end="107:74"><name pos:start="105:21" pos:end="105:26">av_log</name><argument_list pos:start="105:27" pos:end="107:74">(<argument pos:start="105:28" pos:end="105:40"><expr pos:start="105:28" pos:end="105:40"><name pos:start="105:28" pos:end="105:40"><name pos:start="105:28" pos:end="105:35">matroska</name><operator pos:start="105:36" pos:end="105:37">-&gt;</operator><name pos:start="105:38" pos:end="105:40">ctx</name></name></expr></argument>, <argument pos:start="105:43" pos:end="105:53"><expr pos:start="105:43" pos:end="105:53"><name pos:start="105:43" pos:end="105:53">AV_LOG_INFO</name></expr></argument>,

                           <argument pos:start="107:28" pos:end="107:73"><expr pos:start="107:28" pos:end="107:73"><literal type="string" pos:start="107:28" pos:end="107:73">"More than one tracktype in an entry - skip\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="109:21" pos:end="109:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="113:17" pos:end="113:34"><expr pos:start="113:17" pos:end="113:33"><name pos:start="113:17" pos:end="113:27"><name pos:start="113:17" pos:end="113:21">track</name><operator pos:start="113:22" pos:end="113:23">-&gt;</operator><name pos:start="113:24" pos:end="113:27">type</name></name> <operator pos:start="113:29" pos:end="113:29">=</operator> <name pos:start="113:31" pos:end="113:33">num</name></expr>;</expr_stmt>



                <switch pos:start="117:17" pos:end="145:17">switch <condition pos:start="117:24" pos:end="117:36">(<expr pos:start="117:25" pos:end="117:35"><name pos:start="117:25" pos:end="117:35"><name pos:start="117:25" pos:end="117:29">track</name><operator pos:start="117:30" pos:end="117:31">-&gt;</operator><name pos:start="117:32" pos:end="117:35">type</name></name></expr>)</condition> <block pos:start="117:38" pos:end="145:17">{<block_content pos:start="119:21" pos:end="143:30">

                    <case pos:start="119:21" pos:end="119:51">case <expr pos:start="119:26" pos:end="119:50"><name pos:start="119:26" pos:end="119:50">MATROSKA_TRACK_TYPE_VIDEO</name></expr>:</case>

                    <case pos:start="121:21" pos:end="121:51">case <expr pos:start="121:26" pos:end="121:50"><name pos:start="121:26" pos:end="121:50">MATROSKA_TRACK_TYPE_AUDIO</name></expr>:</case>

                    <case pos:start="123:21" pos:end="123:54">case <expr pos:start="123:26" pos:end="123:53"><name pos:start="123:26" pos:end="123:53">MATROSKA_TRACK_TYPE_SUBTITLE</name></expr>:</case>

                        <break pos:start="125:25" pos:end="125:30">break;</break>

                    <case pos:start="127:21" pos:end="127:53">case <expr pos:start="127:26" pos:end="127:52"><name pos:start="127:26" pos:end="127:52">MATROSKA_TRACK_TYPE_COMPLEX</name></expr>:</case>

                    <case pos:start="129:21" pos:end="129:50">case <expr pos:start="129:26" pos:end="129:49"><name pos:start="129:26" pos:end="129:49">MATROSKA_TRACK_TYPE_LOGO</name></expr>:</case>

                    <case pos:start="131:21" pos:end="131:53">case <expr pos:start="131:26" pos:end="131:52"><name pos:start="131:26" pos:end="131:52">MATROSKA_TRACK_TYPE_CONTROL</name></expr>:</case>

                    <default pos:start="133:21" pos:end="133:28">default:</default>

                        <expr_stmt pos:start="135:25" pos:end="139:44"><expr pos:start="135:25" pos:end="139:43"><call pos:start="135:25" pos:end="139:43"><name pos:start="135:25" pos:end="135:30">av_log</name><argument_list pos:start="135:31" pos:end="139:43">(<argument pos:start="135:32" pos:end="135:44"><expr pos:start="135:32" pos:end="135:44"><name pos:start="135:32" pos:end="135:44"><name pos:start="135:32" pos:end="135:39">matroska</name><operator pos:start="135:40" pos:end="135:41">-&gt;</operator><name pos:start="135:42" pos:end="135:44">ctx</name></name></expr></argument>, <argument pos:start="135:47" pos:end="135:57"><expr pos:start="135:47" pos:end="135:57"><name pos:start="135:47" pos:end="135:57">AV_LOG_INFO</name></expr></argument>,

                               <argument pos:start="137:32" pos:end="137:73"><expr pos:start="137:32" pos:end="137:73"><literal type="string" pos:start="137:32" pos:end="137:73">"Unknown or unsupported track type 0x%x\n"</literal></expr></argument>,

                               <argument pos:start="139:32" pos:end="139:42"><expr pos:start="139:32" pos:end="139:42"><name pos:start="139:32" pos:end="139:42"><name pos:start="139:32" pos:end="139:36">track</name><operator pos:start="139:37" pos:end="139:38">-&gt;</operator><name pos:start="139:39" pos:end="139:42">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="141:25" pos:end="141:63"><expr pos:start="141:25" pos:end="141:62"><name pos:start="141:25" pos:end="141:35"><name pos:start="141:25" pos:end="141:29">track</name><operator pos:start="141:30" pos:end="141:31">-&gt;</operator><name pos:start="141:32" pos:end="141:35">type</name></name> <operator pos:start="141:37" pos:end="141:37">=</operator> <name pos:start="141:39" pos:end="141:62">MATROSKA_TRACK_TYPE_NONE</name></expr>;</expr_stmt>

                        <break pos:start="143:25" pos:end="143:30">break;</break>

                </block_content>}</block></switch>

                <expr_stmt pos:start="147:17" pos:end="147:67"><expr pos:start="147:17" pos:end="147:66"><name pos:start="147:17" pos:end="147:58"><name pos:start="147:17" pos:end="147:24">matroska</name><operator pos:start="147:25" pos:end="147:26">-&gt;</operator><name pos:start="147:27" pos:end="147:32">tracks</name><index pos:start="147:33" pos:end="147:58">[<expr pos:start="147:34" pos:end="147:57"><name pos:start="147:34" pos:end="147:53"><name pos:start="147:34" pos:end="147:41">matroska</name><operator pos:start="147:42" pos:end="147:43">-&gt;</operator><name pos:start="147:44" pos:end="147:53">num_tracks</name></name> <operator pos:start="147:55" pos:end="147:55">-</operator> <literal type="number" pos:start="147:57" pos:end="147:57">1</literal></expr>]</index></name> <operator pos:start="147:60" pos:end="147:60">=</operator> <name pos:start="147:62" pos:end="147:66">track</name></expr>;</expr_stmt>

                <break pos:start="149:17" pos:end="149:22">break;</break>

            </block_content>}</block>



            <comment type="block" pos:start="155:13" pos:end="155:52">/* tracktype specific stuff for video */</comment>

            <case pos:start="157:13" pos:end="157:40">case <expr pos:start="157:18" pos:end="157:39"><name pos:start="157:18" pos:end="157:39">MATROSKA_ID_TRACKVIDEO</name></expr>:</case> <block pos:start="157:42" pos:end="491:13">{<block_content pos:start="159:17" pos:end="489:22">

                <decl_stmt pos:start="159:17" pos:end="159:47"><decl pos:start="159:17" pos:end="159:46"><type pos:start="159:17" pos:end="159:36"><name pos:start="159:17" pos:end="159:34">MatroskaVideoTrack</name> <modifier pos:start="159:36" pos:end="159:36">*</modifier></type><name pos:start="159:37" pos:end="159:46">videotrack</name></decl>;</decl_stmt>

                <if_stmt pos:start="161:17" pos:end="163:60"><if pos:start="161:17" pos:end="163:60">if <condition pos:start="161:20" pos:end="161:33">(<expr pos:start="161:21" pos:end="161:32"><operator pos:start="161:21" pos:end="161:21">!</operator><name pos:start="161:22" pos:end="161:32"><name pos:start="161:22" pos:end="161:26">track</name><operator pos:start="161:27" pos:end="161:28">-&gt;</operator><name pos:start="161:29" pos:end="161:32">type</name></name></expr>)</condition><block type="pseudo" pos:start="163:21" pos:end="163:60"><block_content pos:start="163:21" pos:end="163:60">

                    <expr_stmt pos:start="163:21" pos:end="163:60"><expr pos:start="163:21" pos:end="163:59"><name pos:start="163:21" pos:end="163:31"><name pos:start="163:21" pos:end="163:25">track</name><operator pos:start="163:26" pos:end="163:27">-&gt;</operator><name pos:start="163:28" pos:end="163:31">type</name></name> <operator pos:start="163:33" pos:end="163:33">=</operator> <name pos:start="163:35" pos:end="163:59">MATROSKA_TRACK_TYPE_VIDEO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="165:17" pos:end="177:26"><if pos:start="165:17" pos:end="175:17">if <condition pos:start="165:20" pos:end="165:61">(<expr pos:start="165:21" pos:end="165:60"><name pos:start="165:21" pos:end="165:31"><name pos:start="165:21" pos:end="165:25">track</name><operator pos:start="165:26" pos:end="165:27">-&gt;</operator><name pos:start="165:28" pos:end="165:31">type</name></name> <operator pos:start="165:33" pos:end="165:34">!=</operator> <name pos:start="165:36" pos:end="165:60">MATROSKA_TRACK_TYPE_VIDEO</name></expr>)</condition> <block pos:start="165:63" pos:end="175:17">{<block_content pos:start="167:21" pos:end="173:26">

                    <expr_stmt pos:start="167:21" pos:end="169:73"><expr pos:start="167:21" pos:end="169:72"><call pos:start="167:21" pos:end="169:72"><name pos:start="167:21" pos:end="167:26">av_log</name><argument_list pos:start="167:27" pos:end="169:72">(<argument pos:start="167:28" pos:end="167:40"><expr pos:start="167:28" pos:end="167:40"><name pos:start="167:28" pos:end="167:40"><name pos:start="167:28" pos:end="167:35">matroska</name><operator pos:start="167:36" pos:end="167:37">-&gt;</operator><name pos:start="167:38" pos:end="167:40">ctx</name></name></expr></argument>, <argument pos:start="167:43" pos:end="167:53"><expr pos:start="167:43" pos:end="167:53"><name pos:start="167:43" pos:end="167:53">AV_LOG_INFO</name></expr></argument>,

                           <argument pos:start="169:28" pos:end="169:71"><expr pos:start="169:28" pos:end="169:71"><literal type="string" pos:start="169:28" pos:end="169:71">"video data in non-video track - ignoring\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="171:21" pos:end="171:46"><expr pos:start="171:21" pos:end="171:45"><name pos:start="171:21" pos:end="171:23">res</name> <operator pos:start="171:25" pos:end="171:25">=</operator> <name pos:start="171:27" pos:end="171:45">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                    <break pos:start="173:21" pos:end="173:26">break;</break>

                </block_content>}</block></if> <if type="elseif" pos:start="175:19" pos:end="177:26">else if <condition pos:start="175:27" pos:end="175:71">(<expr pos:start="175:28" pos:end="175:70"><operator pos:start="175:28" pos:end="175:28">(</operator><name pos:start="175:29" pos:end="175:31">res</name> <operator pos:start="175:33" pos:end="175:33">=</operator> <call pos:start="175:35" pos:end="175:65"><name pos:start="175:35" pos:end="175:50">ebml_read_master</name><argument_list pos:start="175:51" pos:end="175:65">(<argument pos:start="175:52" pos:end="175:59"><expr pos:start="175:52" pos:end="175:59"><name pos:start="175:52" pos:end="175:59">matroska</name></expr></argument>, <argument pos:start="175:62" pos:end="175:64"><expr pos:start="175:62" pos:end="175:64"><operator pos:start="175:62" pos:end="175:62">&amp;</operator><name pos:start="175:63" pos:end="175:64">id</name></expr></argument>)</argument_list></call><operator pos:start="175:66" pos:end="175:66">)</operator> <operator pos:start="175:68" pos:end="175:68">&lt;</operator> <literal type="number" pos:start="175:70" pos:end="175:70">0</literal></expr>)</condition><block type="pseudo" pos:start="177:21" pos:end="177:26"><block_content pos:start="177:21" pos:end="177:26">

                    <break pos:start="177:21" pos:end="177:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:57"><expr pos:start="179:17" pos:end="179:56"><name pos:start="179:17" pos:end="179:26">videotrack</name> <operator pos:start="179:28" pos:end="179:28">=</operator> <operator pos:start="179:30" pos:end="179:30">(</operator><name pos:start="179:31" pos:end="179:48">MatroskaVideoTrack</name> <operator pos:start="179:50" pos:end="179:50">*</operator><operator pos:start="179:51" pos:end="179:51">)</operator><name pos:start="179:52" pos:end="179:56">track</name></expr>;</expr_stmt>



                <while pos:start="183:17" pos:end="487:17">while <condition pos:start="183:23" pos:end="183:32">(<expr pos:start="183:24" pos:end="183:31"><name pos:start="183:24" pos:end="183:26">res</name> <operator pos:start="183:28" pos:end="183:29">==</operator> <literal type="number" pos:start="183:31" pos:end="183:31">0</literal></expr>)</condition> <block pos:start="183:34" pos:end="487:17">{<block_content pos:start="185:21" pos:end="485:21">

                    <if_stmt pos:start="185:21" pos:end="197:21"><if pos:start="185:21" pos:end="191:21">if <condition pos:start="185:24" pos:end="185:76">(<expr pos:start="185:25" pos:end="185:75"><operator pos:start="185:25" pos:end="185:25">!</operator><operator pos:start="185:26" pos:end="185:26">(</operator><name pos:start="185:27" pos:end="185:28">id</name> <operator pos:start="185:30" pos:end="185:30">=</operator> <call pos:start="185:32" pos:end="185:74"><name pos:start="185:32" pos:end="185:43">ebml_peek_id</name><argument_list pos:start="185:44" pos:end="185:74">(<argument pos:start="185:45" pos:end="185:52"><expr pos:start="185:45" pos:end="185:52"><name pos:start="185:45" pos:end="185:52">matroska</name></expr></argument>, <argument pos:start="185:55" pos:end="185:73"><expr pos:start="185:55" pos:end="185:73"><operator pos:start="185:55" pos:end="185:55">&amp;</operator><name pos:start="185:56" pos:end="185:73"><name pos:start="185:56" pos:end="185:63">matroska</name><operator pos:start="185:64" pos:end="185:65">-&gt;</operator><name pos:start="185:66" pos:end="185:73">level_up</name></name></expr></argument>)</argument_list></call><operator pos:start="185:75" pos:end="185:75">)</operator></expr>)</condition> <block pos:start="185:78" pos:end="191:21">{<block_content pos:start="187:25" pos:end="189:30">

                        <expr_stmt pos:start="187:25" pos:end="187:43"><expr pos:start="187:25" pos:end="187:42"><name pos:start="187:25" pos:end="187:27">res</name> <operator pos:start="187:29" pos:end="187:29">=</operator> <call pos:start="187:31" pos:end="187:42"><name pos:start="187:31" pos:end="187:37">AVERROR</name><argument_list pos:start="187:38" pos:end="187:42">(<argument pos:start="187:39" pos:end="187:41"><expr pos:start="187:39" pos:end="187:41"><name pos:start="187:39" pos:end="187:41">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="189:25" pos:end="189:30">break;</break>

                    </block_content>}</block></if> <if type="elseif" pos:start="191:23" pos:end="197:21">else if <condition pos:start="191:31" pos:end="191:54">(<expr pos:start="191:32" pos:end="191:53"><name pos:start="191:32" pos:end="191:49"><name pos:start="191:32" pos:end="191:39">matroska</name><operator pos:start="191:40" pos:end="191:41">-&gt;</operator><name pos:start="191:42" pos:end="191:49">level_up</name></name> <operator pos:start="191:51" pos:end="191:51">&gt;</operator> <literal type="number" pos:start="191:53" pos:end="191:53">0</literal></expr>)</condition> <block pos:start="191:56" pos:end="197:21">{<block_content pos:start="193:25" pos:end="195:30">

                        <expr_stmt pos:start="193:25" pos:end="193:45"><expr pos:start="193:25" pos:end="193:44"><name pos:start="193:25" pos:end="193:42"><name pos:start="193:25" pos:end="193:32">matroska</name><operator pos:start="193:33" pos:end="193:34">-&gt;</operator><name pos:start="193:35" pos:end="193:42">level_up</name></name><operator pos:start="193:43" pos:end="193:44">--</operator></expr>;</expr_stmt>

                        <break pos:start="195:25" pos:end="195:30">break;</break>

                    </block_content>}</block></if></if_stmt>



                    <switch pos:start="201:21" pos:end="475:21">switch <condition pos:start="201:28" pos:end="201:31">(<expr pos:start="201:29" pos:end="201:30"><name pos:start="201:29" pos:end="201:30">id</name></expr>)</condition> <block pos:start="201:33" pos:end="475:21">{<block_content pos:start="205:25" pos:end="473:34">

                        <comment type="block" pos:start="203:25" pos:end="203:77">/* fixme, this should be one-up, but I get it here */</comment>

                        <case pos:start="205:25" pos:end="205:62">case <expr pos:start="205:30" pos:end="205:61"><name pos:start="205:30" pos:end="205:61">MATROSKA_ID_TRACKDEFAULTDURATION</name></expr>:</case> <block pos:start="205:64" pos:end="219:25">{<block_content pos:start="207:29" pos:end="217:34">

                            <decl_stmt pos:start="207:29" pos:end="207:41"><decl pos:start="207:29" pos:end="207:40"><type pos:start="207:29" pos:end="207:36"><name pos:start="207:29" pos:end="207:36">uint64_t</name></type> <name pos:start="207:38" pos:end="207:40">num</name></decl>;</decl_stmt>

                            <if_stmt pos:start="209:29" pos:end="213:38"><if pos:start="209:29" pos:end="213:38">if <condition pos:start="209:32" pos:end="211:66">(<expr pos:start="209:33" pos:end="211:65"><operator pos:start="209:33" pos:end="209:33">(</operator><name pos:start="209:34" pos:end="209:36">res</name> <operator pos:start="209:38" pos:end="209:38">=</operator> <call pos:start="209:40" pos:end="211:60"><name pos:start="209:40" pos:end="209:53">ebml_read_uint</name> <argument_list pos:start="209:55" pos:end="211:60">(<argument pos:start="209:56" pos:end="209:63"><expr pos:start="209:56" pos:end="209:63"><name pos:start="209:56" pos:end="209:63">matroska</name></expr></argument>, <argument pos:start="209:66" pos:end="209:68"><expr pos:start="209:66" pos:end="209:68"><operator pos:start="209:66" pos:end="209:66">&amp;</operator><name pos:start="209:67" pos:end="209:68">id</name></expr></argument>,

                                                       <argument pos:start="211:56" pos:end="211:59"><expr pos:start="211:56" pos:end="211:59"><operator pos:start="211:56" pos:end="211:56">&amp;</operator><name pos:start="211:57" pos:end="211:59">num</name></expr></argument>)</argument_list></call><operator pos:start="211:61" pos:end="211:61">)</operator> <operator pos:start="211:63" pos:end="211:63">&lt;</operator> <literal type="number" pos:start="211:65" pos:end="211:65">0</literal></expr>)</condition><block type="pseudo" pos:start="213:33" pos:end="213:38"><block_content pos:start="213:33" pos:end="213:38">

                                <break pos:start="213:33" pos:end="213:38">break;</break></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="215:29" pos:end="215:58"><expr pos:start="215:29" pos:end="215:57"><name pos:start="215:29" pos:end="215:51"><name pos:start="215:29" pos:end="215:33">track</name><operator pos:start="215:34" pos:end="215:35">-&gt;</operator><name pos:start="215:36" pos:end="215:51">default_duration</name></name> <operator pos:start="215:53" pos:end="215:53">=</operator> <name pos:start="215:55" pos:end="215:57">num</name></expr>;</expr_stmt>

                            <break pos:start="217:29" pos:end="217:34">break;</break>

                        </block_content>}</block>



                        <comment type="block" pos:start="223:25" pos:end="223:45">/* video framerate */</comment>

                        <case pos:start="225:25" pos:end="225:56">case <expr pos:start="225:30" pos:end="225:55"><name pos:start="225:30" pos:end="225:55">MATROSKA_ID_VIDEOFRAMERATE</name></expr>:</case> <block pos:start="225:58" pos:end="241:25">{<block_content pos:start="227:29" pos:end="239:34">

                            <decl_stmt pos:start="227:29" pos:end="227:39"><decl pos:start="227:29" pos:end="227:38"><type pos:start="227:29" pos:end="227:34"><name pos:start="227:29" pos:end="227:34">double</name></type> <name pos:start="227:36" pos:end="227:38">num</name></decl>;</decl_stmt>

                            <if_stmt pos:start="229:29" pos:end="233:38"><if pos:start="229:29" pos:end="233:38">if <condition pos:start="229:32" pos:end="231:66">(<expr pos:start="229:33" pos:end="231:65"><operator pos:start="229:33" pos:end="229:33">(</operator><name pos:start="229:34" pos:end="229:36">res</name> <operator pos:start="229:38" pos:end="229:38">=</operator> <call pos:start="229:40" pos:end="231:60"><name pos:start="229:40" pos:end="229:54">ebml_read_float</name><argument_list pos:start="229:55" pos:end="231:60">(<argument pos:start="229:56" pos:end="229:63"><expr pos:start="229:56" pos:end="229:63"><name pos:start="229:56" pos:end="229:63">matroska</name></expr></argument>, <argument pos:start="229:66" pos:end="229:68"><expr pos:start="229:66" pos:end="229:68"><operator pos:start="229:66" pos:end="229:66">&amp;</operator><name pos:start="229:67" pos:end="229:68">id</name></expr></argument>,

                                                       <argument pos:start="231:56" pos:end="231:59"><expr pos:start="231:56" pos:end="231:59"><operator pos:start="231:56" pos:end="231:56">&amp;</operator><name pos:start="231:57" pos:end="231:59">num</name></expr></argument>)</argument_list></call><operator pos:start="231:61" pos:end="231:61">)</operator> <operator pos:start="231:63" pos:end="231:63">&lt;</operator> <literal type="number" pos:start="231:65" pos:end="231:65">0</literal></expr>)</condition><block type="pseudo" pos:start="233:33" pos:end="233:38"><block_content pos:start="233:33" pos:end="233:38">

                                <break pos:start="233:33" pos:end="233:38">break;</break></block_content></block></if></if_stmt>

                            <if_stmt pos:start="235:29" pos:end="237:73"><if pos:start="235:29" pos:end="237:73">if <condition pos:start="235:32" pos:end="235:57">(<expr pos:start="235:33" pos:end="235:56"><operator pos:start="235:33" pos:end="235:33">!</operator><name pos:start="235:34" pos:end="235:56"><name pos:start="235:34" pos:end="235:38">track</name><operator pos:start="235:39" pos:end="235:40">-&gt;</operator><name pos:start="235:41" pos:end="235:56">default_duration</name></name></expr>)</condition><block type="pseudo" pos:start="237:33" pos:end="237:73"><block_content pos:start="237:33" pos:end="237:73">

                                <expr_stmt pos:start="237:33" pos:end="237:73"><expr pos:start="237:33" pos:end="237:72"><name pos:start="237:33" pos:end="237:55"><name pos:start="237:33" pos:end="237:37">track</name><operator pos:start="237:38" pos:end="237:39">-&gt;</operator><name pos:start="237:40" pos:end="237:55">default_duration</name></name> <operator pos:start="237:57" pos:end="237:57">=</operator> <literal type="number" pos:start="237:59" pos:end="237:68">1000000000</literal><operator pos:start="237:69" pos:end="237:69">/</operator><name pos:start="237:70" pos:end="237:72">num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <break pos:start="239:29" pos:end="239:34">break;</break>

                        </block_content>}</block>



                        <comment type="block" pos:start="245:25" pos:end="245:71">/* width of the size to display the video at */</comment>

                        <case pos:start="247:25" pos:end="247:59">case <expr pos:start="247:30" pos:end="247:58"><name pos:start="247:30" pos:end="247:58">MATROSKA_ID_VIDEODISPLAYWIDTH</name></expr>:</case> <block pos:start="247:61" pos:end="261:25">{<block_content pos:start="249:29" pos:end="259:34">

                            <decl_stmt pos:start="249:29" pos:end="249:41"><decl pos:start="249:29" pos:end="249:40"><type pos:start="249:29" pos:end="249:36"><name pos:start="249:29" pos:end="249:36">uint64_t</name></type> <name pos:start="249:38" pos:end="249:40">num</name></decl>;</decl_stmt>

                            <if_stmt pos:start="251:29" pos:end="255:38"><if pos:start="251:29" pos:end="255:38">if <condition pos:start="251:32" pos:end="253:65">(<expr pos:start="251:33" pos:end="253:64"><operator pos:start="251:33" pos:end="251:33">(</operator><name pos:start="251:34" pos:end="251:36">res</name> <operator pos:start="251:38" pos:end="251:38">=</operator> <call pos:start="251:40" pos:end="253:59"><name pos:start="251:40" pos:end="251:53">ebml_read_uint</name><argument_list pos:start="251:54" pos:end="253:59">(<argument pos:start="251:55" pos:end="251:62"><expr pos:start="251:55" pos:end="251:62"><name pos:start="251:55" pos:end="251:62">matroska</name></expr></argument>, <argument pos:start="251:65" pos:end="251:67"><expr pos:start="251:65" pos:end="251:67"><operator pos:start="251:65" pos:end="251:65">&amp;</operator><name pos:start="251:66" pos:end="251:67">id</name></expr></argument>,

                                                      <argument pos:start="253:55" pos:end="253:58"><expr pos:start="253:55" pos:end="253:58"><operator pos:start="253:55" pos:end="253:55">&amp;</operator><name pos:start="253:56" pos:end="253:58">num</name></expr></argument>)</argument_list></call><operator pos:start="253:60" pos:end="253:60">)</operator> <operator pos:start="253:62" pos:end="253:62">&lt;</operator> <literal type="number" pos:start="253:64" pos:end="253:64">0</literal></expr>)</condition><block type="pseudo" pos:start="255:33" pos:end="255:38"><block_content pos:start="255:33" pos:end="255:38">

                                <break pos:start="255:33" pos:end="255:38">break;</break></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="257:29" pos:end="257:60"><expr pos:start="257:29" pos:end="257:59"><name pos:start="257:29" pos:end="257:53"><name pos:start="257:29" pos:end="257:38">videotrack</name><operator pos:start="257:39" pos:end="257:40">-&gt;</operator><name pos:start="257:41" pos:end="257:53">display_width</name></name> <operator pos:start="257:55" pos:end="257:55">=</operator> <name pos:start="257:57" pos:end="257:59">num</name></expr>;</expr_stmt>

                            <break pos:start="259:29" pos:end="259:34">break;</break>

                        </block_content>}</block>



                        <comment type="block" pos:start="265:25" pos:end="265:72">/* height of the size to display the video at */</comment>

                        <case pos:start="267:25" pos:end="267:60">case <expr pos:start="267:30" pos:end="267:59"><name pos:start="267:30" pos:end="267:59">MATROSKA_ID_VIDEODISPLAYHEIGHT</name></expr>:</case> <block pos:start="267:62" pos:end="281:25">{<block_content pos:start="269:29" pos:end="279:34">

                            <decl_stmt pos:start="269:29" pos:end="269:41"><decl pos:start="269:29" pos:end="269:40"><type pos:start="269:29" pos:end="269:36"><name pos:start="269:29" pos:end="269:36">uint64_t</name></type> <name pos:start="269:38" pos:end="269:40">num</name></decl>;</decl_stmt>

                            <if_stmt pos:start="271:29" pos:end="275:38"><if pos:start="271:29" pos:end="275:38">if <condition pos:start="271:32" pos:end="273:65">(<expr pos:start="271:33" pos:end="273:64"><operator pos:start="271:33" pos:end="271:33">(</operator><name pos:start="271:34" pos:end="271:36">res</name> <operator pos:start="271:38" pos:end="271:38">=</operator> <call pos:start="271:40" pos:end="273:59"><name pos:start="271:40" pos:end="271:53">ebml_read_uint</name><argument_list pos:start="271:54" pos:end="273:59">(<argument pos:start="271:55" pos:end="271:62"><expr pos:start="271:55" pos:end="271:62"><name pos:start="271:55" pos:end="271:62">matroska</name></expr></argument>, <argument pos:start="271:65" pos:end="271:67"><expr pos:start="271:65" pos:end="271:67"><operator pos:start="271:65" pos:end="271:65">&amp;</operator><name pos:start="271:66" pos:end="271:67">id</name></expr></argument>,

                                                      <argument pos:start="273:55" pos:end="273:58"><expr pos:start="273:55" pos:end="273:58"><operator pos:start="273:55" pos:end="273:55">&amp;</operator><name pos:start="273:56" pos:end="273:58">num</name></expr></argument>)</argument_list></call><operator pos:start="273:60" pos:end="273:60">)</operator> <operator pos:start="273:62" pos:end="273:62">&lt;</operator> <literal type="number" pos:start="273:64" pos:end="273:64">0</literal></expr>)</condition><block type="pseudo" pos:start="275:33" pos:end="275:38"><block_content pos:start="275:33" pos:end="275:38">

                                <break pos:start="275:33" pos:end="275:38">break;</break></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="277:29" pos:end="277:61"><expr pos:start="277:29" pos:end="277:60"><name pos:start="277:29" pos:end="277:54"><name pos:start="277:29" pos:end="277:38">videotrack</name><operator pos:start="277:39" pos:end="277:40">-&gt;</operator><name pos:start="277:41" pos:end="277:54">display_height</name></name> <operator pos:start="277:56" pos:end="277:56">=</operator> <name pos:start="277:58" pos:end="277:60">num</name></expr>;</expr_stmt>

                            <break pos:start="279:29" pos:end="279:34">break;</break>

                        </block_content>}</block>



                        <comment type="block" pos:start="285:25" pos:end="285:60">/* width of the video in the file */</comment>

                        <case pos:start="287:25" pos:end="287:57">case <expr pos:start="287:30" pos:end="287:56"><name pos:start="287:30" pos:end="287:56">MATROSKA_ID_VIDEOPIXELWIDTH</name></expr>:</case> <block pos:start="287:59" pos:end="301:25">{<block_content pos:start="289:29" pos:end="299:34">

                            <decl_stmt pos:start="289:29" pos:end="289:41"><decl pos:start="289:29" pos:end="289:40"><type pos:start="289:29" pos:end="289:36"><name pos:start="289:29" pos:end="289:36">uint64_t</name></type> <name pos:start="289:38" pos:end="289:40">num</name></decl>;</decl_stmt>

                            <if_stmt pos:start="291:29" pos:end="295:38"><if pos:start="291:29" pos:end="295:38">if <condition pos:start="291:32" pos:end="293:65">(<expr pos:start="291:33" pos:end="293:64"><operator pos:start="291:33" pos:end="291:33">(</operator><name pos:start="291:34" pos:end="291:36">res</name> <operator pos:start="291:38" pos:end="291:38">=</operator> <call pos:start="291:40" pos:end="293:59"><name pos:start="291:40" pos:end="291:53">ebml_read_uint</name><argument_list pos:start="291:54" pos:end="293:59">(<argument pos:start="291:55" pos:end="291:62"><expr pos:start="291:55" pos:end="291:62"><name pos:start="291:55" pos:end="291:62">matroska</name></expr></argument>, <argument pos:start="291:65" pos:end="291:67"><expr pos:start="291:65" pos:end="291:67"><operator pos:start="291:65" pos:end="291:65">&amp;</operator><name pos:start="291:66" pos:end="291:67">id</name></expr></argument>,

                                                      <argument pos:start="293:55" pos:end="293:58"><expr pos:start="293:55" pos:end="293:58"><operator pos:start="293:55" pos:end="293:55">&amp;</operator><name pos:start="293:56" pos:end="293:58">num</name></expr></argument>)</argument_list></call><operator pos:start="293:60" pos:end="293:60">)</operator> <operator pos:start="293:62" pos:end="293:62">&lt;</operator> <literal type="number" pos:start="293:64" pos:end="293:64">0</literal></expr>)</condition><block type="pseudo" pos:start="295:33" pos:end="295:38"><block_content pos:start="295:33" pos:end="295:38">

                                <break pos:start="295:33" pos:end="295:38">break;</break></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="297:29" pos:end="297:58"><expr pos:start="297:29" pos:end="297:57"><name pos:start="297:29" pos:end="297:51"><name pos:start="297:29" pos:end="297:38">videotrack</name><operator pos:start="297:39" pos:end="297:40">-&gt;</operator><name pos:start="297:41" pos:end="297:51">pixel_width</name></name> <operator pos:start="297:53" pos:end="297:53">=</operator> <name pos:start="297:55" pos:end="297:57">num</name></expr>;</expr_stmt>

                            <break pos:start="299:29" pos:end="299:34">break;</break>

                        </block_content>}</block>



                        <comment type="block" pos:start="305:25" pos:end="305:61">/* height of the video in the file */</comment>

                        <case pos:start="307:25" pos:end="307:58">case <expr pos:start="307:30" pos:end="307:57"><name pos:start="307:30" pos:end="307:57">MATROSKA_ID_VIDEOPIXELHEIGHT</name></expr>:</case> <block pos:start="307:60" pos:end="321:25">{<block_content pos:start="309:29" pos:end="319:34">

                            <decl_stmt pos:start="309:29" pos:end="309:41"><decl pos:start="309:29" pos:end="309:40"><type pos:start="309:29" pos:end="309:36"><name pos:start="309:29" pos:end="309:36">uint64_t</name></type> <name pos:start="309:38" pos:end="309:40">num</name></decl>;</decl_stmt>

                            <if_stmt pos:start="311:29" pos:end="315:38"><if pos:start="311:29" pos:end="315:38">if <condition pos:start="311:32" pos:end="313:65">(<expr pos:start="311:33" pos:end="313:64"><operator pos:start="311:33" pos:end="311:33">(</operator><name pos:start="311:34" pos:end="311:36">res</name> <operator pos:start="311:38" pos:end="311:38">=</operator> <call pos:start="311:40" pos:end="313:59"><name pos:start="311:40" pos:end="311:53">ebml_read_uint</name><argument_list pos:start="311:54" pos:end="313:59">(<argument pos:start="311:55" pos:end="311:62"><expr pos:start="311:55" pos:end="311:62"><name pos:start="311:55" pos:end="311:62">matroska</name></expr></argument>, <argument pos:start="311:65" pos:end="311:67"><expr pos:start="311:65" pos:end="311:67"><operator pos:start="311:65" pos:end="311:65">&amp;</operator><name pos:start="311:66" pos:end="311:67">id</name></expr></argument>,

                                                      <argument pos:start="313:55" pos:end="313:58"><expr pos:start="313:55" pos:end="313:58"><operator pos:start="313:55" pos:end="313:55">&amp;</operator><name pos:start="313:56" pos:end="313:58">num</name></expr></argument>)</argument_list></call><operator pos:start="313:60" pos:end="313:60">)</operator> <operator pos:start="313:62" pos:end="313:62">&lt;</operator> <literal type="number" pos:start="313:64" pos:end="313:64">0</literal></expr>)</condition><block type="pseudo" pos:start="315:33" pos:end="315:38"><block_content pos:start="315:33" pos:end="315:38">

                                <break pos:start="315:33" pos:end="315:38">break;</break></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="317:29" pos:end="317:59"><expr pos:start="317:29" pos:end="317:58"><name pos:start="317:29" pos:end="317:52"><name pos:start="317:29" pos:end="317:38">videotrack</name><operator pos:start="317:39" pos:end="317:40">-&gt;</operator><name pos:start="317:41" pos:end="317:52">pixel_height</name></name> <operator pos:start="317:54" pos:end="317:54">=</operator> <name pos:start="317:56" pos:end="317:58">num</name></expr>;</expr_stmt>

                            <break pos:start="319:29" pos:end="319:34">break;</break>

                        </block_content>}</block>



                        <comment type="block" pos:start="325:25" pos:end="325:61">/* whether the video is interlaced */</comment>

                        <case pos:start="327:25" pos:end="327:61">case <expr pos:start="327:30" pos:end="327:60"><name pos:start="327:30" pos:end="327:60">MATROSKA_ID_VIDEOFLAGINTERLACED</name></expr>:</case> <block pos:start="327:63" pos:end="351:25">{<block_content pos:start="329:29" pos:end="349:34">

                            <decl_stmt pos:start="329:29" pos:end="329:41"><decl pos:start="329:29" pos:end="329:40"><type pos:start="329:29" pos:end="329:36"><name pos:start="329:29" pos:end="329:36">uint64_t</name></type> <name pos:start="329:38" pos:end="329:40">num</name></decl>;</decl_stmt>

                            <if_stmt pos:start="331:29" pos:end="335:38"><if pos:start="331:29" pos:end="335:38">if <condition pos:start="331:32" pos:end="333:65">(<expr pos:start="331:33" pos:end="333:64"><operator pos:start="331:33" pos:end="331:33">(</operator><name pos:start="331:34" pos:end="331:36">res</name> <operator pos:start="331:38" pos:end="331:38">=</operator> <call pos:start="331:40" pos:end="333:59"><name pos:start="331:40" pos:end="331:53">ebml_read_uint</name><argument_list pos:start="331:54" pos:end="333:59">(<argument pos:start="331:55" pos:end="331:62"><expr pos:start="331:55" pos:end="331:62"><name pos:start="331:55" pos:end="331:62">matroska</name></expr></argument>, <argument pos:start="331:65" pos:end="331:67"><expr pos:start="331:65" pos:end="331:67"><operator pos:start="331:65" pos:end="331:65">&amp;</operator><name pos:start="331:66" pos:end="331:67">id</name></expr></argument>,

                                                      <argument pos:start="333:55" pos:end="333:58"><expr pos:start="333:55" pos:end="333:58"><operator pos:start="333:55" pos:end="333:55">&amp;</operator><name pos:start="333:56" pos:end="333:58">num</name></expr></argument>)</argument_list></call><operator pos:start="333:60" pos:end="333:60">)</operator> <operator pos:start="333:62" pos:end="333:62">&lt;</operator> <literal type="number" pos:start="333:64" pos:end="333:64">0</literal></expr>)</condition><block type="pseudo" pos:start="335:33" pos:end="335:38"><block_content pos:start="335:33" pos:end="335:38">

                                <break pos:start="335:33" pos:end="335:38">break;</break></block_content></block></if></if_stmt>

                            <if_stmt pos:start="337:29" pos:end="347:68"><if pos:start="337:29" pos:end="341:67">if <condition pos:start="337:32" pos:end="337:36">(<expr pos:start="337:33" pos:end="337:35"><name pos:start="337:33" pos:end="337:35">num</name></expr>)</condition><block type="pseudo" pos:start="339:33" pos:end="341:67"><block_content pos:start="339:33" pos:end="341:67">

                                <expr_stmt pos:start="339:33" pos:end="341:67"><expr pos:start="339:33" pos:end="341:66"><name pos:start="339:33" pos:end="339:44"><name pos:start="339:33" pos:end="339:37">track</name><operator pos:start="339:38" pos:end="339:39">-&gt;</operator><name pos:start="339:40" pos:end="339:44">flags</name></name> <operator pos:start="339:46" pos:end="339:47">|=</operator>

                                    <name pos:start="341:37" pos:end="341:66">MATROSKA_VIDEOTRACK_INTERLACED</name></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="343:29" pos:end="347:68">else<block type="pseudo" pos:start="345:33" pos:end="347:68"><block_content pos:start="345:33" pos:end="347:68">

                                <expr_stmt pos:start="345:33" pos:end="347:68"><expr pos:start="345:33" pos:end="347:67"><name pos:start="345:33" pos:end="345:44"><name pos:start="345:33" pos:end="345:37">track</name><operator pos:start="345:38" pos:end="345:39">-&gt;</operator><name pos:start="345:40" pos:end="345:44">flags</name></name> <operator pos:start="345:46" pos:end="345:47">&amp;=</operator>

                                    <operator pos:start="347:37" pos:end="347:37">~</operator><name pos:start="347:38" pos:end="347:67">MATROSKA_VIDEOTRACK_INTERLACED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                            <break pos:start="349:29" pos:end="349:34">break;</break>

                        </block_content>}</block>



                        <comment type="block" pos:start="355:25" pos:end="361:37">/* stereo mode (whether the video has two streams,

                         * where one is for the left eye and the other for

                         * the right eye, which creates a 3D-like

                         * effect) */</comment>

                        <case pos:start="363:25" pos:end="363:57">case <expr pos:start="363:30" pos:end="363:56"><name pos:start="363:30" pos:end="363:56">MATROSKA_ID_VIDEOSTEREOMODE</name></expr>:</case> <block pos:start="363:59" pos:end="395:25">{<block_content pos:start="365:29" pos:end="393:34">

                            <decl_stmt pos:start="365:29" pos:end="365:41"><decl pos:start="365:29" pos:end="365:40"><type pos:start="365:29" pos:end="365:36"><name pos:start="365:29" pos:end="365:36">uint64_t</name></type> <name pos:start="365:38" pos:end="365:40">num</name></decl>;</decl_stmt>

                            <if_stmt pos:start="367:29" pos:end="371:38"><if pos:start="367:29" pos:end="371:38">if <condition pos:start="367:32" pos:end="369:65">(<expr pos:start="367:33" pos:end="369:64"><operator pos:start="367:33" pos:end="367:33">(</operator><name pos:start="367:34" pos:end="367:36">res</name> <operator pos:start="367:38" pos:end="367:38">=</operator> <call pos:start="367:40" pos:end="369:59"><name pos:start="367:40" pos:end="367:53">ebml_read_uint</name><argument_list pos:start="367:54" pos:end="369:59">(<argument pos:start="367:55" pos:end="367:62"><expr pos:start="367:55" pos:end="367:62"><name pos:start="367:55" pos:end="367:62">matroska</name></expr></argument>, <argument pos:start="367:65" pos:end="367:67"><expr pos:start="367:65" pos:end="367:67"><operator pos:start="367:65" pos:end="367:65">&amp;</operator><name pos:start="367:66" pos:end="367:67">id</name></expr></argument>,

                                                      <argument pos:start="369:55" pos:end="369:58"><expr pos:start="369:55" pos:end="369:58"><operator pos:start="369:55" pos:end="369:55">&amp;</operator><name pos:start="369:56" pos:end="369:58">num</name></expr></argument>)</argument_list></call><operator pos:start="369:60" pos:end="369:60">)</operator> <operator pos:start="369:62" pos:end="369:62">&lt;</operator> <literal type="number" pos:start="369:64" pos:end="369:64">0</literal></expr>)</condition><block type="pseudo" pos:start="371:33" pos:end="371:38"><block_content pos:start="371:33" pos:end="371:38">

                                <break pos:start="371:33" pos:end="371:38">break;</break></block_content></block></if></if_stmt>

                            <if_stmt pos:start="373:29" pos:end="389:29"><if pos:start="373:29" pos:end="389:29">if <condition pos:start="373:32" pos:end="379:62">(<expr pos:start="373:33" pos:end="379:61"><name pos:start="373:33" pos:end="373:35">num</name> <operator pos:start="373:37" pos:end="373:38">!=</operator> <name pos:start="373:40" pos:end="373:61">MATROSKA_EYE_MODE_MONO</name> <operator pos:start="373:63" pos:end="373:64">&amp;&amp;</operator>

                                <name pos:start="375:33" pos:end="375:35">num</name> <operator pos:start="375:37" pos:end="375:38">!=</operator> <name pos:start="375:40" pos:end="375:61">MATROSKA_EYE_MODE_LEFT</name> <operator pos:start="375:63" pos:end="375:64">&amp;&amp;</operator>

                                <name pos:start="377:33" pos:end="377:35">num</name> <operator pos:start="377:37" pos:end="377:38">!=</operator> <name pos:start="377:40" pos:end="377:62">MATROSKA_EYE_MODE_RIGHT</name> <operator pos:start="377:64" pos:end="377:65">&amp;&amp;</operator>

                                <name pos:start="379:33" pos:end="379:35">num</name> <operator pos:start="379:37" pos:end="379:38">!=</operator> <name pos:start="379:40" pos:end="379:61">MATROSKA_EYE_MODE_BOTH</name></expr>)</condition> <block pos:start="379:64" pos:end="389:29">{<block_content pos:start="381:33" pos:end="387:38">

                                <expr_stmt pos:start="381:33" pos:end="385:55"><expr pos:start="381:33" pos:end="385:54"><call pos:start="381:33" pos:end="385:54"><name pos:start="381:33" pos:end="381:38">av_log</name><argument_list pos:start="381:39" pos:end="385:54">(<argument pos:start="381:40" pos:end="381:52"><expr pos:start="381:40" pos:end="381:52"><name pos:start="381:40" pos:end="381:52"><name pos:start="381:40" pos:end="381:47">matroska</name><operator pos:start="381:48" pos:end="381:49">-&gt;</operator><name pos:start="381:50" pos:end="381:52">ctx</name></name></expr></argument>, <argument pos:start="381:55" pos:end="381:65"><expr pos:start="381:55" pos:end="381:65"><name pos:start="381:55" pos:end="381:65">AV_LOG_INFO</name></expr></argument>,

                                       <argument pos:start="383:40" pos:end="383:73"><expr pos:start="383:40" pos:end="383:73"><literal type="string" pos:start="383:40" pos:end="383:73">"Ignoring unknown eye mode 0x%x\n"</literal></expr></argument>,

                                       <argument pos:start="385:40" pos:end="385:53"><expr pos:start="385:40" pos:end="385:53"><operator pos:start="385:40" pos:end="385:40">(</operator><name pos:start="385:41" pos:end="385:48">uint32_t</name><operator pos:start="385:49" pos:end="385:49">)</operator> <name pos:start="385:51" pos:end="385:53">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="387:33" pos:end="387:38">break;</break>

                            </block_content>}</block></if></if_stmt>

                            <expr_stmt pos:start="391:29" pos:end="391:55"><expr pos:start="391:29" pos:end="391:54"><name pos:start="391:29" pos:end="391:48"><name pos:start="391:29" pos:end="391:38">videotrack</name><operator pos:start="391:39" pos:end="391:40">-&gt;</operator><name pos:start="391:41" pos:end="391:48">eye_mode</name></name> <operator pos:start="391:50" pos:end="391:50">=</operator> <name pos:start="391:52" pos:end="391:54">num</name></expr>;</expr_stmt>

                            <break pos:start="393:29" pos:end="393:34">break;</break>

                        </block_content>}</block>



                        <comment type="block" pos:start="399:25" pos:end="399:52">/* aspect ratio behaviour */</comment>

                        <case pos:start="401:25" pos:end="401:58">case <expr pos:start="401:30" pos:end="401:57"><name pos:start="401:30" pos:end="401:57">MATROSKA_ID_VIDEOASPECTRATIO</name></expr>:</case> <block pos:start="401:60" pos:end="431:25">{<block_content pos:start="403:29" pos:end="429:34">

                            <decl_stmt pos:start="403:29" pos:end="403:41"><decl pos:start="403:29" pos:end="403:40"><type pos:start="403:29" pos:end="403:36"><name pos:start="403:29" pos:end="403:36">uint64_t</name></type> <name pos:start="403:38" pos:end="403:40">num</name></decl>;</decl_stmt>

                            <if_stmt pos:start="405:29" pos:end="409:38"><if pos:start="405:29" pos:end="409:38">if <condition pos:start="405:32" pos:end="407:65">(<expr pos:start="405:33" pos:end="407:64"><operator pos:start="405:33" pos:end="405:33">(</operator><name pos:start="405:34" pos:end="405:36">res</name> <operator pos:start="405:38" pos:end="405:38">=</operator> <call pos:start="405:40" pos:end="407:59"><name pos:start="405:40" pos:end="405:53">ebml_read_uint</name><argument_list pos:start="405:54" pos:end="407:59">(<argument pos:start="405:55" pos:end="405:62"><expr pos:start="405:55" pos:end="405:62"><name pos:start="405:55" pos:end="405:62">matroska</name></expr></argument>, <argument pos:start="405:65" pos:end="405:67"><expr pos:start="405:65" pos:end="405:67"><operator pos:start="405:65" pos:end="405:65">&amp;</operator><name pos:start="405:66" pos:end="405:67">id</name></expr></argument>,

                                                      <argument pos:start="407:55" pos:end="407:58"><expr pos:start="407:55" pos:end="407:58"><operator pos:start="407:55" pos:end="407:55">&amp;</operator><name pos:start="407:56" pos:end="407:58">num</name></expr></argument>)</argument_list></call><operator pos:start="407:60" pos:end="407:60">)</operator> <operator pos:start="407:62" pos:end="407:62">&lt;</operator> <literal type="number" pos:start="407:64" pos:end="407:64">0</literal></expr>)</condition><block type="pseudo" pos:start="409:33" pos:end="409:38"><block_content pos:start="409:33" pos:end="409:38">

                                <break pos:start="409:33" pos:end="409:38">break;</break></block_content></block></if></if_stmt>

                            <if_stmt pos:start="411:29" pos:end="425:29"><if pos:start="411:29" pos:end="425:29">if <condition pos:start="411:32" pos:end="415:72">(<expr pos:start="411:33" pos:end="415:71"><name pos:start="411:33" pos:end="411:35">num</name> <operator pos:start="411:37" pos:end="411:38">!=</operator> <name pos:start="411:40" pos:end="411:70">MATROSKA_ASPECT_RATIO_MODE_FREE</name> <operator pos:start="411:72" pos:end="411:73">&amp;&amp;</operator>

                                <name pos:start="413:33" pos:end="413:35">num</name> <operator pos:start="413:37" pos:end="413:38">!=</operator> <name pos:start="413:40" pos:end="413:70">MATROSKA_ASPECT_RATIO_MODE_KEEP</name> <operator pos:start="413:72" pos:end="413:73">&amp;&amp;</operator>

                                <name pos:start="415:33" pos:end="415:35">num</name> <operator pos:start="415:37" pos:end="415:38">!=</operator> <name pos:start="415:40" pos:end="415:71">MATROSKA_ASPECT_RATIO_MODE_FIXED</name></expr>)</condition> <block pos:start="415:74" pos:end="425:29">{<block_content pos:start="417:33" pos:end="423:38">

                                <expr_stmt pos:start="417:33" pos:end="421:55"><expr pos:start="417:33" pos:end="421:54"><call pos:start="417:33" pos:end="421:54"><name pos:start="417:33" pos:end="417:38">av_log</name><argument_list pos:start="417:39" pos:end="421:54">(<argument pos:start="417:40" pos:end="417:52"><expr pos:start="417:40" pos:end="417:52"><name pos:start="417:40" pos:end="417:52"><name pos:start="417:40" pos:end="417:47">matroska</name><operator pos:start="417:48" pos:end="417:49">-&gt;</operator><name pos:start="417:50" pos:end="417:52">ctx</name></name></expr></argument>, <argument pos:start="417:55" pos:end="417:65"><expr pos:start="417:55" pos:end="417:65"><name pos:start="417:55" pos:end="417:65">AV_LOG_INFO</name></expr></argument>,

                                       <argument pos:start="419:40" pos:end="419:77"><expr pos:start="419:40" pos:end="419:77"><literal type="string" pos:start="419:40" pos:end="419:77">"Ignoring unknown aspect ratio 0x%x\n"</literal></expr></argument>,

                                       <argument pos:start="421:40" pos:end="421:53"><expr pos:start="421:40" pos:end="421:53"><operator pos:start="421:40" pos:end="421:40">(</operator><name pos:start="421:41" pos:end="421:48">uint32_t</name><operator pos:start="421:49" pos:end="421:49">)</operator> <name pos:start="421:51" pos:end="421:53">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="423:33" pos:end="423:38">break;</break>

                            </block_content>}</block></if></if_stmt>

                            <expr_stmt pos:start="427:29" pos:end="427:54"><expr pos:start="427:29" pos:end="427:53"><name pos:start="427:29" pos:end="427:47"><name pos:start="427:29" pos:end="427:38">videotrack</name><operator pos:start="427:39" pos:end="427:40">-&gt;</operator><name pos:start="427:41" pos:end="427:47">ar_mode</name></name> <operator pos:start="427:49" pos:end="427:49">=</operator> <name pos:start="427:51" pos:end="427:53">num</name></expr>;</expr_stmt>

                            <break pos:start="429:29" pos:end="429:34">break;</break>

                        </block_content>}</block>



                        <comment type="block" pos:start="435:25" pos:end="437:36">/* colorspace (only matters for raw video)

                         * fourcc */</comment>

                        <case pos:start="439:25" pos:end="439:57">case <expr pos:start="439:30" pos:end="439:56"><name pos:start="439:30" pos:end="439:56">MATROSKA_ID_VIDEOCOLORSPACE</name></expr>:</case> <block pos:start="439:59" pos:end="453:25">{<block_content pos:start="441:29" pos:end="451:34">

                            <decl_stmt pos:start="441:29" pos:end="441:41"><decl pos:start="441:29" pos:end="441:40"><type pos:start="441:29" pos:end="441:36"><name pos:start="441:29" pos:end="441:36">uint64_t</name></type> <name pos:start="441:38" pos:end="441:40">num</name></decl>;</decl_stmt>

                            <if_stmt pos:start="443:29" pos:end="447:38"><if pos:start="443:29" pos:end="447:38">if <condition pos:start="443:32" pos:end="445:65">(<expr pos:start="443:33" pos:end="445:64"><operator pos:start="443:33" pos:end="443:33">(</operator><name pos:start="443:34" pos:end="443:36">res</name> <operator pos:start="443:38" pos:end="443:38">=</operator> <call pos:start="443:40" pos:end="445:59"><name pos:start="443:40" pos:end="443:53">ebml_read_uint</name><argument_list pos:start="443:54" pos:end="445:59">(<argument pos:start="443:55" pos:end="443:62"><expr pos:start="443:55" pos:end="443:62"><name pos:start="443:55" pos:end="443:62">matroska</name></expr></argument>, <argument pos:start="443:65" pos:end="443:67"><expr pos:start="443:65" pos:end="443:67"><operator pos:start="443:65" pos:end="443:65">&amp;</operator><name pos:start="443:66" pos:end="443:67">id</name></expr></argument>,

                                                      <argument pos:start="445:55" pos:end="445:58"><expr pos:start="445:55" pos:end="445:58"><operator pos:start="445:55" pos:end="445:55">&amp;</operator><name pos:start="445:56" pos:end="445:58">num</name></expr></argument>)</argument_list></call><operator pos:start="445:60" pos:end="445:60">)</operator> <operator pos:start="445:62" pos:end="445:62">&lt;</operator> <literal type="number" pos:start="445:64" pos:end="445:64">0</literal></expr>)</condition><block type="pseudo" pos:start="447:33" pos:end="447:38"><block_content pos:start="447:33" pos:end="447:38">

                                <break pos:start="447:33" pos:end="447:38">break;</break></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="449:29" pos:end="449:53"><expr pos:start="449:29" pos:end="449:52"><name pos:start="449:29" pos:end="449:46"><name pos:start="449:29" pos:end="449:38">videotrack</name><operator pos:start="449:39" pos:end="449:40">-&gt;</operator><name pos:start="449:41" pos:end="449:46">fourcc</name></name> <operator pos:start="449:48" pos:end="449:48">=</operator> <name pos:start="449:50" pos:end="449:52">num</name></expr>;</expr_stmt>

                            <break pos:start="451:29" pos:end="451:34">break;</break>

                        </block_content>}</block>



                        <default pos:start="457:25" pos:end="457:32">default:</default>

                            <expr_stmt pos:start="459:29" pos:end="463:60"><expr pos:start="459:29" pos:end="463:59"><call pos:start="459:29" pos:end="463:59"><name pos:start="459:29" pos:end="459:34">av_log</name><argument_list pos:start="459:35" pos:end="463:59">(<argument pos:start="459:36" pos:end="459:48"><expr pos:start="459:36" pos:end="459:48"><name pos:start="459:36" pos:end="459:48"><name pos:start="459:36" pos:end="459:43">matroska</name><operator pos:start="459:44" pos:end="459:45">-&gt;</operator><name pos:start="459:46" pos:end="459:48">ctx</name></name></expr></argument>, <argument pos:start="459:51" pos:end="459:61"><expr pos:start="459:51" pos:end="459:61"><name pos:start="459:51" pos:end="459:61">AV_LOG_INFO</name></expr></argument>,

                                   <argument pos:start="461:36" pos:end="463:54"><expr pos:start="461:36" pos:end="463:54"><literal type="string" pos:start="461:36" pos:end="461:70">"Unknown video track header entry "</literal>

                                   <literal type="string" pos:start="463:36" pos:end="463:54">"0x%x - ignoring\n"</literal></expr></argument>, <argument pos:start="463:57" pos:end="463:58"><expr pos:start="463:57" pos:end="463:58"><name pos:start="463:57" pos:end="463:58">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <comment type="block" pos:start="465:29" pos:end="465:46">/* pass-through */</comment>



                        <case pos:start="469:25" pos:end="469:42">case <expr pos:start="469:30" pos:end="469:41"><name pos:start="469:30" pos:end="469:41">EBML_ID_VOID</name></expr>:</case>

                            <expr_stmt pos:start="471:29" pos:end="471:59"><expr pos:start="471:29" pos:end="471:58"><name pos:start="471:29" pos:end="471:31">res</name> <operator pos:start="471:33" pos:end="471:33">=</operator> <call pos:start="471:35" pos:end="471:58"><name pos:start="471:35" pos:end="471:48">ebml_read_skip</name><argument_list pos:start="471:49" pos:end="471:58">(<argument pos:start="471:50" pos:end="471:57"><expr pos:start="471:50" pos:end="471:57"><name pos:start="471:50" pos:end="471:57">matroska</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="473:29" pos:end="473:34">break;</break>

                    </block_content>}</block></switch>



                    <if_stmt pos:start="479:21" pos:end="485:21"><if pos:start="479:21" pos:end="485:21">if <condition pos:start="479:24" pos:end="479:43">(<expr pos:start="479:25" pos:end="479:42"><name pos:start="479:25" pos:end="479:42"><name pos:start="479:25" pos:end="479:32">matroska</name><operator pos:start="479:33" pos:end="479:34">-&gt;</operator><name pos:start="479:35" pos:end="479:42">level_up</name></name></expr>)</condition> <block pos:start="479:45" pos:end="485:21">{<block_content pos:start="481:25" pos:end="483:30">

                        <expr_stmt pos:start="481:25" pos:end="481:45"><expr pos:start="481:25" pos:end="481:44"><name pos:start="481:25" pos:end="481:42"><name pos:start="481:25" pos:end="481:32">matroska</name><operator pos:start="481:33" pos:end="481:34">-&gt;</operator><name pos:start="481:35" pos:end="481:42">level_up</name></name><operator pos:start="481:43" pos:end="481:44">--</operator></expr>;</expr_stmt>

                        <break pos:start="483:25" pos:end="483:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></while>

                <break pos:start="489:17" pos:end="489:22">break;</break>

            </block_content>}</block>



            <comment type="block" pos:start="495:13" pos:end="495:52">/* tracktype specific stuff for audio */</comment>

            <case pos:start="497:13" pos:end="497:40">case <expr pos:start="497:18" pos:end="497:39"><name pos:start="497:18" pos:end="497:39">MATROSKA_ID_TRACKAUDIO</name></expr>:</case> <block pos:start="497:42" pos:end="661:13">{<block_content pos:start="499:17" pos:end="659:22">

                <decl_stmt pos:start="499:17" pos:end="499:47"><decl pos:start="499:17" pos:end="499:46"><type pos:start="499:17" pos:end="499:36"><name pos:start="499:17" pos:end="499:34">MatroskaAudioTrack</name> <modifier pos:start="499:36" pos:end="499:36">*</modifier></type><name pos:start="499:37" pos:end="499:46">audiotrack</name></decl>;</decl_stmt>

                <if_stmt pos:start="501:17" pos:end="503:60"><if pos:start="501:17" pos:end="503:60">if <condition pos:start="501:20" pos:end="501:33">(<expr pos:start="501:21" pos:end="501:32"><operator pos:start="501:21" pos:end="501:21">!</operator><name pos:start="501:22" pos:end="501:32"><name pos:start="501:22" pos:end="501:26">track</name><operator pos:start="501:27" pos:end="501:28">-&gt;</operator><name pos:start="501:29" pos:end="501:32">type</name></name></expr>)</condition><block type="pseudo" pos:start="503:21" pos:end="503:60"><block_content pos:start="503:21" pos:end="503:60">

                    <expr_stmt pos:start="503:21" pos:end="503:60"><expr pos:start="503:21" pos:end="503:59"><name pos:start="503:21" pos:end="503:31"><name pos:start="503:21" pos:end="503:25">track</name><operator pos:start="503:26" pos:end="503:27">-&gt;</operator><name pos:start="503:28" pos:end="503:31">type</name></name> <operator pos:start="503:33" pos:end="503:33">=</operator> <name pos:start="503:35" pos:end="503:59">MATROSKA_TRACK_TYPE_AUDIO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="505:17" pos:end="517:26"><if pos:start="505:17" pos:end="515:17">if <condition pos:start="505:20" pos:end="505:61">(<expr pos:start="505:21" pos:end="505:60"><name pos:start="505:21" pos:end="505:31"><name pos:start="505:21" pos:end="505:25">track</name><operator pos:start="505:26" pos:end="505:27">-&gt;</operator><name pos:start="505:28" pos:end="505:31">type</name></name> <operator pos:start="505:33" pos:end="505:34">!=</operator> <name pos:start="505:36" pos:end="505:60">MATROSKA_TRACK_TYPE_AUDIO</name></expr>)</condition> <block pos:start="505:63" pos:end="515:17">{<block_content pos:start="507:21" pos:end="513:26">

                    <expr_stmt pos:start="507:21" pos:end="509:73"><expr pos:start="507:21" pos:end="509:72"><call pos:start="507:21" pos:end="509:72"><name pos:start="507:21" pos:end="507:26">av_log</name><argument_list pos:start="507:27" pos:end="509:72">(<argument pos:start="507:28" pos:end="507:40"><expr pos:start="507:28" pos:end="507:40"><name pos:start="507:28" pos:end="507:40"><name pos:start="507:28" pos:end="507:35">matroska</name><operator pos:start="507:36" pos:end="507:37">-&gt;</operator><name pos:start="507:38" pos:end="507:40">ctx</name></name></expr></argument>, <argument pos:start="507:43" pos:end="507:53"><expr pos:start="507:43" pos:end="507:53"><name pos:start="507:43" pos:end="507:53">AV_LOG_INFO</name></expr></argument>,

                           <argument pos:start="509:28" pos:end="509:71"><expr pos:start="509:28" pos:end="509:71"><literal type="string" pos:start="509:28" pos:end="509:71">"audio data in non-audio track - ignoring\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="511:21" pos:end="511:46"><expr pos:start="511:21" pos:end="511:45"><name pos:start="511:21" pos:end="511:23">res</name> <operator pos:start="511:25" pos:end="511:25">=</operator> <name pos:start="511:27" pos:end="511:45">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                    <break pos:start="513:21" pos:end="513:26">break;</break>

                </block_content>}</block></if> <if type="elseif" pos:start="515:19" pos:end="517:26">else if <condition pos:start="515:27" pos:end="515:71">(<expr pos:start="515:28" pos:end="515:70"><operator pos:start="515:28" pos:end="515:28">(</operator><name pos:start="515:29" pos:end="515:31">res</name> <operator pos:start="515:33" pos:end="515:33">=</operator> <call pos:start="515:35" pos:end="515:65"><name pos:start="515:35" pos:end="515:50">ebml_read_master</name><argument_list pos:start="515:51" pos:end="515:65">(<argument pos:start="515:52" pos:end="515:59"><expr pos:start="515:52" pos:end="515:59"><name pos:start="515:52" pos:end="515:59">matroska</name></expr></argument>, <argument pos:start="515:62" pos:end="515:64"><expr pos:start="515:62" pos:end="515:64"><operator pos:start="515:62" pos:end="515:62">&amp;</operator><name pos:start="515:63" pos:end="515:64">id</name></expr></argument>)</argument_list></call><operator pos:start="515:66" pos:end="515:66">)</operator> <operator pos:start="515:68" pos:end="515:68">&lt;</operator> <literal type="number" pos:start="515:70" pos:end="515:70">0</literal></expr>)</condition><block type="pseudo" pos:start="517:21" pos:end="517:26"><block_content pos:start="517:21" pos:end="517:26">

                    <break pos:start="517:21" pos:end="517:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="519:17" pos:end="519:57"><expr pos:start="519:17" pos:end="519:56"><name pos:start="519:17" pos:end="519:26">audiotrack</name> <operator pos:start="519:28" pos:end="519:28">=</operator> <operator pos:start="519:30" pos:end="519:30">(</operator><name pos:start="519:31" pos:end="519:48">MatroskaAudioTrack</name> <operator pos:start="519:50" pos:end="519:50">*</operator><operator pos:start="519:51" pos:end="519:51">)</operator><name pos:start="519:52" pos:end="519:56">track</name></expr>;</expr_stmt>

                <expr_stmt pos:start="521:17" pos:end="521:41"><expr pos:start="521:17" pos:end="521:40"><name pos:start="521:17" pos:end="521:36"><name pos:start="521:17" pos:end="521:26">audiotrack</name><operator pos:start="521:27" pos:end="521:28">-&gt;</operator><name pos:start="521:29" pos:end="521:36">channels</name></name> <operator pos:start="521:38" pos:end="521:38">=</operator> <literal type="number" pos:start="521:40" pos:end="521:40">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="523:17" pos:end="523:46"><expr pos:start="523:17" pos:end="523:45"><name pos:start="523:17" pos:end="523:38"><name pos:start="523:17" pos:end="523:26">audiotrack</name><operator pos:start="523:27" pos:end="523:28">-&gt;</operator><name pos:start="523:29" pos:end="523:38">samplerate</name></name> <operator pos:start="523:40" pos:end="523:40">=</operator> <literal type="number" pos:start="523:42" pos:end="523:45">8000</literal></expr>;</expr_stmt>



                <while pos:start="527:17" pos:end="657:17">while <condition pos:start="527:23" pos:end="527:32">(<expr pos:start="527:24" pos:end="527:31"><name pos:start="527:24" pos:end="527:26">res</name> <operator pos:start="527:28" pos:end="527:29">==</operator> <literal type="number" pos:start="527:31" pos:end="527:31">0</literal></expr>)</condition> <block pos:start="527:34" pos:end="657:17">{<block_content pos:start="529:21" pos:end="655:21">

                    <if_stmt pos:start="529:21" pos:end="541:21"><if pos:start="529:21" pos:end="535:21">if <condition pos:start="529:24" pos:end="529:76">(<expr pos:start="529:25" pos:end="529:75"><operator pos:start="529:25" pos:end="529:25">!</operator><operator pos:start="529:26" pos:end="529:26">(</operator><name pos:start="529:27" pos:end="529:28">id</name> <operator pos:start="529:30" pos:end="529:30">=</operator> <call pos:start="529:32" pos:end="529:74"><name pos:start="529:32" pos:end="529:43">ebml_peek_id</name><argument_list pos:start="529:44" pos:end="529:74">(<argument pos:start="529:45" pos:end="529:52"><expr pos:start="529:45" pos:end="529:52"><name pos:start="529:45" pos:end="529:52">matroska</name></expr></argument>, <argument pos:start="529:55" pos:end="529:73"><expr pos:start="529:55" pos:end="529:73"><operator pos:start="529:55" pos:end="529:55">&amp;</operator><name pos:start="529:56" pos:end="529:73"><name pos:start="529:56" pos:end="529:63">matroska</name><operator pos:start="529:64" pos:end="529:65">-&gt;</operator><name pos:start="529:66" pos:end="529:73">level_up</name></name></expr></argument>)</argument_list></call><operator pos:start="529:75" pos:end="529:75">)</operator></expr>)</condition> <block pos:start="529:78" pos:end="535:21">{<block_content pos:start="531:25" pos:end="533:30">

                        <expr_stmt pos:start="531:25" pos:end="531:43"><expr pos:start="531:25" pos:end="531:42"><name pos:start="531:25" pos:end="531:27">res</name> <operator pos:start="531:29" pos:end="531:29">=</operator> <call pos:start="531:31" pos:end="531:42"><name pos:start="531:31" pos:end="531:37">AVERROR</name><argument_list pos:start="531:38" pos:end="531:42">(<argument pos:start="531:39" pos:end="531:41"><expr pos:start="531:39" pos:end="531:41"><name pos:start="531:39" pos:end="531:41">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="533:25" pos:end="533:30">break;</break>

                    </block_content>}</block></if> <if type="elseif" pos:start="535:23" pos:end="541:21">else if <condition pos:start="535:31" pos:end="535:54">(<expr pos:start="535:32" pos:end="535:53"><name pos:start="535:32" pos:end="535:49"><name pos:start="535:32" pos:end="535:39">matroska</name><operator pos:start="535:40" pos:end="535:41">-&gt;</operator><name pos:start="535:42" pos:end="535:49">level_up</name></name> <operator pos:start="535:51" pos:end="535:51">&gt;</operator> <literal type="number" pos:start="535:53" pos:end="535:53">0</literal></expr>)</condition> <block pos:start="535:56" pos:end="541:21">{<block_content pos:start="537:25" pos:end="539:30">

                        <expr_stmt pos:start="537:25" pos:end="537:45"><expr pos:start="537:25" pos:end="537:44"><name pos:start="537:25" pos:end="537:42"><name pos:start="537:25" pos:end="537:32">matroska</name><operator pos:start="537:33" pos:end="537:34">-&gt;</operator><name pos:start="537:35" pos:end="537:42">level_up</name></name><operator pos:start="537:43" pos:end="537:44">--</operator></expr>;</expr_stmt>

                        <break pos:start="539:25" pos:end="539:30">break;</break>

                    </block_content>}</block></if></if_stmt>



                    <switch pos:start="545:21" pos:end="645:21">switch <condition pos:start="545:28" pos:end="545:31">(<expr pos:start="545:29" pos:end="545:30"><name pos:start="545:29" pos:end="545:30">id</name></expr>)</condition> <block pos:start="545:33" pos:end="645:21">{<block_content pos:start="549:25" pos:end="643:34">

                        <comment type="block" pos:start="547:25" pos:end="547:40">/* samplerate */</comment>

                        <case pos:start="549:25" pos:end="549:59">case <expr pos:start="549:30" pos:end="549:58"><name pos:start="549:30" pos:end="549:58">MATROSKA_ID_AUDIOSAMPLINGFREQ</name></expr>:</case> <block pos:start="549:61" pos:end="565:25">{<block_content pos:start="551:29" pos:end="563:34">

                            <decl_stmt pos:start="551:29" pos:end="551:39"><decl pos:start="551:29" pos:end="551:38"><type pos:start="551:29" pos:end="551:34"><name pos:start="551:29" pos:end="551:34">double</name></type> <name pos:start="551:36" pos:end="551:38">num</name></decl>;</decl_stmt>

                            <if_stmt pos:start="553:29" pos:end="557:38"><if pos:start="553:29" pos:end="557:38">if <condition pos:start="553:32" pos:end="555:66">(<expr pos:start="553:33" pos:end="555:65"><operator pos:start="553:33" pos:end="553:33">(</operator><name pos:start="553:34" pos:end="553:36">res</name> <operator pos:start="553:38" pos:end="553:38">=</operator> <call pos:start="553:40" pos:end="555:60"><name pos:start="553:40" pos:end="553:54">ebml_read_float</name><argument_list pos:start="553:55" pos:end="555:60">(<argument pos:start="553:56" pos:end="553:63"><expr pos:start="553:56" pos:end="553:63"><name pos:start="553:56" pos:end="553:63">matroska</name></expr></argument>, <argument pos:start="553:66" pos:end="553:68"><expr pos:start="553:66" pos:end="553:68"><operator pos:start="553:66" pos:end="553:66">&amp;</operator><name pos:start="553:67" pos:end="553:68">id</name></expr></argument>,

                                                       <argument pos:start="555:56" pos:end="555:59"><expr pos:start="555:56" pos:end="555:59"><operator pos:start="555:56" pos:end="555:56">&amp;</operator><name pos:start="555:57" pos:end="555:59">num</name></expr></argument>)</argument_list></call><operator pos:start="555:61" pos:end="555:61">)</operator> <operator pos:start="555:63" pos:end="555:63">&lt;</operator> <literal type="number" pos:start="555:65" pos:end="555:65">0</literal></expr>)</condition><block type="pseudo" pos:start="557:33" pos:end="557:38"><block_content pos:start="557:33" pos:end="557:38">

                                <break pos:start="557:33" pos:end="557:38">break;</break></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="559:29" pos:end="561:57"><expr pos:start="559:29" pos:end="561:56"><name pos:start="559:29" pos:end="559:59"><name pos:start="559:29" pos:end="559:38">audiotrack</name><operator pos:start="559:39" pos:end="559:40">-&gt;</operator><name pos:start="559:41" pos:end="559:59">internal_samplerate</name></name> <operator pos:start="559:61" pos:end="559:61">=</operator>

                            <name pos:start="561:29" pos:end="561:50"><name pos:start="561:29" pos:end="561:38">audiotrack</name><operator pos:start="561:39" pos:end="561:40">-&gt;</operator><name pos:start="561:41" pos:end="561:50">samplerate</name></name> <operator pos:start="561:52" pos:end="561:52">=</operator> <name pos:start="561:54" pos:end="561:56">num</name></expr>;</expr_stmt>

                            <break pos:start="563:29" pos:end="563:34">break;</break>

                        </block_content>}</block>



                        <case pos:start="569:25" pos:end="569:62">case <expr pos:start="569:30" pos:end="569:61"><name pos:start="569:30" pos:end="569:61">MATROSKA_ID_AUDIOOUTSAMPLINGFREQ</name></expr>:</case> <block pos:start="569:64" pos:end="583:25">{<block_content pos:start="571:29" pos:end="581:34">

                            <decl_stmt pos:start="571:29" pos:end="571:39"><decl pos:start="571:29" pos:end="571:38"><type pos:start="571:29" pos:end="571:34"><name pos:start="571:29" pos:end="571:34">double</name></type> <name pos:start="571:36" pos:end="571:38">num</name></decl>;</decl_stmt>

                            <if_stmt pos:start="573:29" pos:end="577:38"><if pos:start="573:29" pos:end="577:38">if <condition pos:start="573:32" pos:end="575:66">(<expr pos:start="573:33" pos:end="575:65"><operator pos:start="573:33" pos:end="573:33">(</operator><name pos:start="573:34" pos:end="573:36">res</name> <operator pos:start="573:38" pos:end="573:38">=</operator> <call pos:start="573:40" pos:end="575:60"><name pos:start="573:40" pos:end="573:54">ebml_read_float</name><argument_list pos:start="573:55" pos:end="575:60">(<argument pos:start="573:56" pos:end="573:63"><expr pos:start="573:56" pos:end="573:63"><name pos:start="573:56" pos:end="573:63">matroska</name></expr></argument>, <argument pos:start="573:66" pos:end="573:68"><expr pos:start="573:66" pos:end="573:68"><operator pos:start="573:66" pos:end="573:66">&amp;</operator><name pos:start="573:67" pos:end="573:68">id</name></expr></argument>,

                                                       <argument pos:start="575:56" pos:end="575:59"><expr pos:start="575:56" pos:end="575:59"><operator pos:start="575:56" pos:end="575:56">&amp;</operator><name pos:start="575:57" pos:end="575:59">num</name></expr></argument>)</argument_list></call><operator pos:start="575:61" pos:end="575:61">)</operator> <operator pos:start="575:63" pos:end="575:63">&lt;</operator> <literal type="number" pos:start="575:65" pos:end="575:65">0</literal></expr>)</condition><block type="pseudo" pos:start="577:33" pos:end="577:38"><block_content pos:start="577:33" pos:end="577:38">

                                <break pos:start="577:33" pos:end="577:38">break;</break></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="579:29" pos:end="579:57"><expr pos:start="579:29" pos:end="579:56"><name pos:start="579:29" pos:end="579:50"><name pos:start="579:29" pos:end="579:38">audiotrack</name><operator pos:start="579:39" pos:end="579:40">-&gt;</operator><name pos:start="579:41" pos:end="579:50">samplerate</name></name> <operator pos:start="579:52" pos:end="579:52">=</operator> <name pos:start="579:54" pos:end="579:56">num</name></expr>;</expr_stmt>

                            <break pos:start="581:29" pos:end="581:34">break;</break>

                        </block_content>}</block>



                            <comment type="block" pos:start="587:29" pos:end="587:42">/* bitdepth */</comment>

                        <case pos:start="589:25" pos:end="589:55">case <expr pos:start="589:30" pos:end="589:54"><name pos:start="589:30" pos:end="589:54">MATROSKA_ID_AUDIOBITDEPTH</name></expr>:</case> <block pos:start="589:57" pos:end="603:25">{<block_content pos:start="591:29" pos:end="601:34">

                            <decl_stmt pos:start="591:29" pos:end="591:41"><decl pos:start="591:29" pos:end="591:40"><type pos:start="591:29" pos:end="591:36"><name pos:start="591:29" pos:end="591:36">uint64_t</name></type> <name pos:start="591:38" pos:end="591:40">num</name></decl>;</decl_stmt>

                            <if_stmt pos:start="593:29" pos:end="597:38"><if pos:start="593:29" pos:end="597:38">if <condition pos:start="593:32" pos:end="595:65">(<expr pos:start="593:33" pos:end="595:64"><operator pos:start="593:33" pos:end="593:33">(</operator><name pos:start="593:34" pos:end="593:36">res</name> <operator pos:start="593:38" pos:end="593:38">=</operator> <call pos:start="593:40" pos:end="595:59"><name pos:start="593:40" pos:end="593:53">ebml_read_uint</name><argument_list pos:start="593:54" pos:end="595:59">(<argument pos:start="593:55" pos:end="593:62"><expr pos:start="593:55" pos:end="593:62"><name pos:start="593:55" pos:end="593:62">matroska</name></expr></argument>, <argument pos:start="593:65" pos:end="593:67"><expr pos:start="593:65" pos:end="593:67"><operator pos:start="593:65" pos:end="593:65">&amp;</operator><name pos:start="593:66" pos:end="593:67">id</name></expr></argument>,

                                                      <argument pos:start="595:55" pos:end="595:58"><expr pos:start="595:55" pos:end="595:58"><operator pos:start="595:55" pos:end="595:55">&amp;</operator><name pos:start="595:56" pos:end="595:58">num</name></expr></argument>)</argument_list></call><operator pos:start="595:60" pos:end="595:60">)</operator> <operator pos:start="595:62" pos:end="595:62">&lt;</operator> <literal type="number" pos:start="595:64" pos:end="595:64">0</literal></expr>)</condition><block type="pseudo" pos:start="597:33" pos:end="597:38"><block_content pos:start="597:33" pos:end="597:38">

                                <break pos:start="597:33" pos:end="597:38">break;</break></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="599:29" pos:end="599:55"><expr pos:start="599:29" pos:end="599:54"><name pos:start="599:29" pos:end="599:48"><name pos:start="599:29" pos:end="599:38">audiotrack</name><operator pos:start="599:39" pos:end="599:40">-&gt;</operator><name pos:start="599:41" pos:end="599:48">bitdepth</name></name> <operator pos:start="599:50" pos:end="599:50">=</operator> <name pos:start="599:52" pos:end="599:54">num</name></expr>;</expr_stmt>

                            <break pos:start="601:29" pos:end="601:34">break;</break>

                        </block_content>}</block>



                            <comment type="block" pos:start="607:29" pos:end="607:42">/* channels */</comment>

                        <case pos:start="609:25" pos:end="609:55">case <expr pos:start="609:30" pos:end="609:54"><name pos:start="609:30" pos:end="609:54">MATROSKA_ID_AUDIOCHANNELS</name></expr>:</case> <block pos:start="609:57" pos:end="623:25">{<block_content pos:start="611:29" pos:end="621:34">

                            <decl_stmt pos:start="611:29" pos:end="611:41"><decl pos:start="611:29" pos:end="611:40"><type pos:start="611:29" pos:end="611:36"><name pos:start="611:29" pos:end="611:36">uint64_t</name></type> <name pos:start="611:38" pos:end="611:40">num</name></decl>;</decl_stmt>

                            <if_stmt pos:start="613:29" pos:end="617:38"><if pos:start="613:29" pos:end="617:38">if <condition pos:start="613:32" pos:end="615:65">(<expr pos:start="613:33" pos:end="615:64"><operator pos:start="613:33" pos:end="613:33">(</operator><name pos:start="613:34" pos:end="613:36">res</name> <operator pos:start="613:38" pos:end="613:38">=</operator> <call pos:start="613:40" pos:end="615:59"><name pos:start="613:40" pos:end="613:53">ebml_read_uint</name><argument_list pos:start="613:54" pos:end="615:59">(<argument pos:start="613:55" pos:end="613:62"><expr pos:start="613:55" pos:end="613:62"><name pos:start="613:55" pos:end="613:62">matroska</name></expr></argument>, <argument pos:start="613:65" pos:end="613:67"><expr pos:start="613:65" pos:end="613:67"><operator pos:start="613:65" pos:end="613:65">&amp;</operator><name pos:start="613:66" pos:end="613:67">id</name></expr></argument>,

                                                      <argument pos:start="615:55" pos:end="615:58"><expr pos:start="615:55" pos:end="615:58"><operator pos:start="615:55" pos:end="615:55">&amp;</operator><name pos:start="615:56" pos:end="615:58">num</name></expr></argument>)</argument_list></call><operator pos:start="615:60" pos:end="615:60">)</operator> <operator pos:start="615:62" pos:end="615:62">&lt;</operator> <literal type="number" pos:start="615:64" pos:end="615:64">0</literal></expr>)</condition><block type="pseudo" pos:start="617:33" pos:end="617:38"><block_content pos:start="617:33" pos:end="617:38">

                                <break pos:start="617:33" pos:end="617:38">break;</break></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="619:29" pos:end="619:55"><expr pos:start="619:29" pos:end="619:54"><name pos:start="619:29" pos:end="619:48"><name pos:start="619:29" pos:end="619:38">audiotrack</name><operator pos:start="619:39" pos:end="619:40">-&gt;</operator><name pos:start="619:41" pos:end="619:48">channels</name></name> <operator pos:start="619:50" pos:end="619:50">=</operator> <name pos:start="619:52" pos:end="619:54">num</name></expr>;</expr_stmt>

                            <break pos:start="621:29" pos:end="621:34">break;</break>

                        </block_content>}</block>



                        <default pos:start="627:25" pos:end="627:32">default:</default>

                            <expr_stmt pos:start="629:29" pos:end="633:60"><expr pos:start="629:29" pos:end="633:59"><call pos:start="629:29" pos:end="633:59"><name pos:start="629:29" pos:end="629:34">av_log</name><argument_list pos:start="629:35" pos:end="633:59">(<argument pos:start="629:36" pos:end="629:48"><expr pos:start="629:36" pos:end="629:48"><name pos:start="629:36" pos:end="629:48"><name pos:start="629:36" pos:end="629:43">matroska</name><operator pos:start="629:44" pos:end="629:45">-&gt;</operator><name pos:start="629:46" pos:end="629:48">ctx</name></name></expr></argument>, <argument pos:start="629:51" pos:end="629:61"><expr pos:start="629:51" pos:end="629:61"><name pos:start="629:51" pos:end="629:61">AV_LOG_INFO</name></expr></argument>,

                                   <argument pos:start="631:36" pos:end="633:54"><expr pos:start="631:36" pos:end="633:54"><literal type="string" pos:start="631:36" pos:end="631:70">"Unknown audio track header entry "</literal>

                                   <literal type="string" pos:start="633:36" pos:end="633:54">"0x%x - ignoring\n"</literal></expr></argument>, <argument pos:start="633:57" pos:end="633:58"><expr pos:start="633:57" pos:end="633:58"><name pos:start="633:57" pos:end="633:58">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <comment type="block" pos:start="635:29" pos:end="635:46">/* pass-through */</comment>



                        <case pos:start="639:25" pos:end="639:42">case <expr pos:start="639:30" pos:end="639:41"><name pos:start="639:30" pos:end="639:41">EBML_ID_VOID</name></expr>:</case>

                            <expr_stmt pos:start="641:29" pos:end="641:59"><expr pos:start="641:29" pos:end="641:58"><name pos:start="641:29" pos:end="641:31">res</name> <operator pos:start="641:33" pos:end="641:33">=</operator> <call pos:start="641:35" pos:end="641:58"><name pos:start="641:35" pos:end="641:48">ebml_read_skip</name><argument_list pos:start="641:49" pos:end="641:58">(<argument pos:start="641:50" pos:end="641:57"><expr pos:start="641:50" pos:end="641:57"><name pos:start="641:50" pos:end="641:57">matroska</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="643:29" pos:end="643:34">break;</break>

                    </block_content>}</block></switch>



                    <if_stmt pos:start="649:21" pos:end="655:21"><if pos:start="649:21" pos:end="655:21">if <condition pos:start="649:24" pos:end="649:43">(<expr pos:start="649:25" pos:end="649:42"><name pos:start="649:25" pos:end="649:42"><name pos:start="649:25" pos:end="649:32">matroska</name><operator pos:start="649:33" pos:end="649:34">-&gt;</operator><name pos:start="649:35" pos:end="649:42">level_up</name></name></expr>)</condition> <block pos:start="649:45" pos:end="655:21">{<block_content pos:start="651:25" pos:end="653:30">

                        <expr_stmt pos:start="651:25" pos:end="651:45"><expr pos:start="651:25" pos:end="651:44"><name pos:start="651:25" pos:end="651:42"><name pos:start="651:25" pos:end="651:32">matroska</name><operator pos:start="651:33" pos:end="651:34">-&gt;</operator><name pos:start="651:35" pos:end="651:42">level_up</name></name><operator pos:start="651:43" pos:end="651:44">--</operator></expr>;</expr_stmt>

                        <break pos:start="653:25" pos:end="653:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></while>

                <break pos:start="659:17" pos:end="659:22">break;</break>

            </block_content>}</block>



                <comment type="block" pos:start="665:17" pos:end="665:38">/* codec identifier */</comment>

            <case pos:start="667:13" pos:end="667:37">case <expr pos:start="667:18" pos:end="667:36"><name pos:start="667:18" pos:end="667:36">MATROSKA_ID_CODECID</name></expr>:</case> <block pos:start="667:39" pos:end="679:13">{<block_content pos:start="669:17" pos:end="677:22">

                <decl_stmt pos:start="669:17" pos:end="669:27"><decl pos:start="669:17" pos:end="669:26"><type pos:start="669:17" pos:end="669:22"><name pos:start="669:17" pos:end="669:20">char</name> <modifier pos:start="669:22" pos:end="669:22">*</modifier></type><name pos:start="669:23" pos:end="669:26">text</name></decl>;</decl_stmt>

                <if_stmt pos:start="671:17" pos:end="673:26"><if pos:start="671:17" pos:end="673:26">if <condition pos:start="671:20" pos:end="671:70">(<expr pos:start="671:21" pos:end="671:69"><operator pos:start="671:21" pos:end="671:21">(</operator><name pos:start="671:22" pos:end="671:24">res</name> <operator pos:start="671:26" pos:end="671:26">=</operator> <call pos:start="671:28" pos:end="671:64"><name pos:start="671:28" pos:end="671:42">ebml_read_ascii</name><argument_list pos:start="671:43" pos:end="671:64">(<argument pos:start="671:44" pos:end="671:51"><expr pos:start="671:44" pos:end="671:51"><name pos:start="671:44" pos:end="671:51">matroska</name></expr></argument>, <argument pos:start="671:54" pos:end="671:56"><expr pos:start="671:54" pos:end="671:56"><operator pos:start="671:54" pos:end="671:54">&amp;</operator><name pos:start="671:55" pos:end="671:56">id</name></expr></argument>, <argument pos:start="671:59" pos:end="671:63"><expr pos:start="671:59" pos:end="671:63"><operator pos:start="671:59" pos:end="671:59">&amp;</operator><name pos:start="671:60" pos:end="671:63">text</name></expr></argument>)</argument_list></call><operator pos:start="671:65" pos:end="671:65">)</operator> <operator pos:start="671:67" pos:end="671:67">&lt;</operator> <literal type="number" pos:start="671:69" pos:end="671:69">0</literal></expr>)</condition><block type="pseudo" pos:start="673:21" pos:end="673:26"><block_content pos:start="673:21" pos:end="673:26">

                    <break pos:start="673:21" pos:end="673:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="675:17" pos:end="675:39"><expr pos:start="675:17" pos:end="675:38"><name pos:start="675:17" pos:end="675:31"><name pos:start="675:17" pos:end="675:21">track</name><operator pos:start="675:22" pos:end="675:23">-&gt;</operator><name pos:start="675:24" pos:end="675:31">codec_id</name></name> <operator pos:start="675:33" pos:end="675:33">=</operator> <name pos:start="675:35" pos:end="675:38">text</name></expr>;</expr_stmt>

                <break pos:start="677:17" pos:end="677:22">break;</break>

            </block_content>}</block>



                <comment type="block" pos:start="683:17" pos:end="683:40">/* codec private data */</comment>

            <case pos:start="685:13" pos:end="685:42">case <expr pos:start="685:18" pos:end="685:41"><name pos:start="685:18" pos:end="685:41">MATROSKA_ID_CODECPRIVATE</name></expr>:</case> <block pos:start="685:44" pos:end="701:13">{<block_content pos:start="687:17" pos:end="699:22">

                <decl_stmt pos:start="687:17" pos:end="687:30"><decl pos:start="687:17" pos:end="687:29"><type pos:start="687:17" pos:end="687:25"><name pos:start="687:17" pos:end="687:23">uint8_t</name> <modifier pos:start="687:25" pos:end="687:25">*</modifier></type><name pos:start="687:26" pos:end="687:29">data</name></decl>;</decl_stmt>

                <decl_stmt pos:start="689:17" pos:end="689:25"><decl pos:start="689:17" pos:end="689:24"><type pos:start="689:17" pos:end="689:19"><name pos:start="689:17" pos:end="689:19">int</name></type> <name pos:start="689:21" pos:end="689:24">size</name></decl>;</decl_stmt>

                <if_stmt pos:start="691:17" pos:end="693:26"><if pos:start="691:17" pos:end="693:26">if <condition pos:start="691:20" pos:end="691:78">(<expr pos:start="691:21" pos:end="691:77"><operator pos:start="691:21" pos:end="691:21">(</operator><name pos:start="691:22" pos:end="691:24">res</name> <operator pos:start="691:26" pos:end="691:26">=</operator> <call pos:start="691:28" pos:end="691:72"><name pos:start="691:28" pos:end="691:43">ebml_read_binary</name><argument_list pos:start="691:44" pos:end="691:72">(<argument pos:start="691:45" pos:end="691:52"><expr pos:start="691:45" pos:end="691:52"><name pos:start="691:45" pos:end="691:52">matroska</name></expr></argument>, <argument pos:start="691:55" pos:end="691:57"><expr pos:start="691:55" pos:end="691:57"><operator pos:start="691:55" pos:end="691:55">&amp;</operator><name pos:start="691:56" pos:end="691:57">id</name></expr></argument>, <argument pos:start="691:60" pos:end="691:64"><expr pos:start="691:60" pos:end="691:64"><operator pos:start="691:60" pos:end="691:60">&amp;</operator><name pos:start="691:61" pos:end="691:64">data</name></expr></argument>, <argument pos:start="691:67" pos:end="691:71"><expr pos:start="691:67" pos:end="691:71"><operator pos:start="691:67" pos:end="691:67">&amp;</operator><name pos:start="691:68" pos:end="691:71">size</name></expr></argument>)</argument_list></call> <operator pos:start="691:74" pos:end="691:74">&lt;</operator> <literal type="number" pos:start="691:76" pos:end="691:76">0</literal><operator pos:start="691:77" pos:end="691:77">)</operator></expr>)</condition><block type="pseudo" pos:start="693:21" pos:end="693:26"><block_content pos:start="693:21" pos:end="693:26">

                    <break pos:start="693:21" pos:end="693:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="695:17" pos:end="695:41"><expr pos:start="695:17" pos:end="695:40"><name pos:start="695:17" pos:end="695:33"><name pos:start="695:17" pos:end="695:21">track</name><operator pos:start="695:22" pos:end="695:23">-&gt;</operator><name pos:start="695:24" pos:end="695:33">codec_priv</name></name> <operator pos:start="695:35" pos:end="695:35">=</operator> <name pos:start="695:37" pos:end="695:40">data</name></expr>;</expr_stmt>

                <expr_stmt pos:start="697:17" pos:end="697:46"><expr pos:start="697:17" pos:end="697:45"><name pos:start="697:17" pos:end="697:38"><name pos:start="697:17" pos:end="697:21">track</name><operator pos:start="697:22" pos:end="697:23">-&gt;</operator><name pos:start="697:24" pos:end="697:38">codec_priv_size</name></name> <operator pos:start="697:40" pos:end="697:40">=</operator> <name pos:start="697:42" pos:end="697:45">size</name></expr>;</expr_stmt>

                <break pos:start="699:17" pos:end="699:22">break;</break>

            </block_content>}</block>



                <comment type="block" pos:start="705:17" pos:end="705:39">/* name of the codec */</comment>

            <case pos:start="707:13" pos:end="707:39">case <expr pos:start="707:18" pos:end="707:38"><name pos:start="707:18" pos:end="707:38">MATROSKA_ID_CODECNAME</name></expr>:</case> <block pos:start="707:41" pos:end="719:13">{<block_content pos:start="709:17" pos:end="717:22">

                <decl_stmt pos:start="709:17" pos:end="709:27"><decl pos:start="709:17" pos:end="709:26"><type pos:start="709:17" pos:end="709:22"><name pos:start="709:17" pos:end="709:20">char</name> <modifier pos:start="709:22" pos:end="709:22">*</modifier></type><name pos:start="709:23" pos:end="709:26">text</name></decl>;</decl_stmt>

                <if_stmt pos:start="711:17" pos:end="713:26"><if pos:start="711:17" pos:end="713:26">if <condition pos:start="711:20" pos:end="711:69">(<expr pos:start="711:21" pos:end="711:68"><operator pos:start="711:21" pos:end="711:21">(</operator><name pos:start="711:22" pos:end="711:24">res</name> <operator pos:start="711:26" pos:end="711:26">=</operator> <call pos:start="711:28" pos:end="711:63"><name pos:start="711:28" pos:end="711:41">ebml_read_utf8</name><argument_list pos:start="711:42" pos:end="711:63">(<argument pos:start="711:43" pos:end="711:50"><expr pos:start="711:43" pos:end="711:50"><name pos:start="711:43" pos:end="711:50">matroska</name></expr></argument>, <argument pos:start="711:53" pos:end="711:55"><expr pos:start="711:53" pos:end="711:55"><operator pos:start="711:53" pos:end="711:53">&amp;</operator><name pos:start="711:54" pos:end="711:55">id</name></expr></argument>, <argument pos:start="711:58" pos:end="711:62"><expr pos:start="711:58" pos:end="711:62"><operator pos:start="711:58" pos:end="711:58">&amp;</operator><name pos:start="711:59" pos:end="711:62">text</name></expr></argument>)</argument_list></call><operator pos:start="711:64" pos:end="711:64">)</operator> <operator pos:start="711:66" pos:end="711:66">&lt;</operator> <literal type="number" pos:start="711:68" pos:end="711:68">0</literal></expr>)</condition><block type="pseudo" pos:start="713:21" pos:end="713:26"><block_content pos:start="713:21" pos:end="713:26">

                    <break pos:start="713:21" pos:end="713:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="715:17" pos:end="715:41"><expr pos:start="715:17" pos:end="715:40"><name pos:start="715:17" pos:end="715:33"><name pos:start="715:17" pos:end="715:21">track</name><operator pos:start="715:22" pos:end="715:23">-&gt;</operator><name pos:start="715:24" pos:end="715:33">codec_name</name></name> <operator pos:start="715:35" pos:end="715:35">=</operator> <name pos:start="715:37" pos:end="715:40">text</name></expr>;</expr_stmt>

                <break pos:start="717:17" pos:end="717:22">break;</break>

            </block_content>}</block>



                <comment type="block" pos:start="723:17" pos:end="723:40">/* name of this track */</comment>

            <case pos:start="725:13" pos:end="725:39">case <expr pos:start="725:18" pos:end="725:38"><name pos:start="725:18" pos:end="725:38">MATROSKA_ID_TRACKNAME</name></expr>:</case> <block pos:start="725:41" pos:end="737:13">{<block_content pos:start="727:17" pos:end="735:22">

                <decl_stmt pos:start="727:17" pos:end="727:27"><decl pos:start="727:17" pos:end="727:26"><type pos:start="727:17" pos:end="727:22"><name pos:start="727:17" pos:end="727:20">char</name> <modifier pos:start="727:22" pos:end="727:22">*</modifier></type><name pos:start="727:23" pos:end="727:26">text</name></decl>;</decl_stmt>

                <if_stmt pos:start="729:17" pos:end="731:26"><if pos:start="729:17" pos:end="731:26">if <condition pos:start="729:20" pos:end="729:69">(<expr pos:start="729:21" pos:end="729:68"><operator pos:start="729:21" pos:end="729:21">(</operator><name pos:start="729:22" pos:end="729:24">res</name> <operator pos:start="729:26" pos:end="729:26">=</operator> <call pos:start="729:28" pos:end="729:63"><name pos:start="729:28" pos:end="729:41">ebml_read_utf8</name><argument_list pos:start="729:42" pos:end="729:63">(<argument pos:start="729:43" pos:end="729:50"><expr pos:start="729:43" pos:end="729:50"><name pos:start="729:43" pos:end="729:50">matroska</name></expr></argument>, <argument pos:start="729:53" pos:end="729:55"><expr pos:start="729:53" pos:end="729:55"><operator pos:start="729:53" pos:end="729:53">&amp;</operator><name pos:start="729:54" pos:end="729:55">id</name></expr></argument>, <argument pos:start="729:58" pos:end="729:62"><expr pos:start="729:58" pos:end="729:62"><operator pos:start="729:58" pos:end="729:58">&amp;</operator><name pos:start="729:59" pos:end="729:62">text</name></expr></argument>)</argument_list></call><operator pos:start="729:64" pos:end="729:64">)</operator> <operator pos:start="729:66" pos:end="729:66">&lt;</operator> <literal type="number" pos:start="729:68" pos:end="729:68">0</literal></expr>)</condition><block type="pseudo" pos:start="731:21" pos:end="731:26"><block_content pos:start="731:21" pos:end="731:26">

                    <break pos:start="731:21" pos:end="731:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="733:17" pos:end="733:35"><expr pos:start="733:17" pos:end="733:34"><name pos:start="733:17" pos:end="733:27"><name pos:start="733:17" pos:end="733:21">track</name><operator pos:start="733:22" pos:end="733:23">-&gt;</operator><name pos:start="733:24" pos:end="733:27">name</name></name> <operator pos:start="733:29" pos:end="733:29">=</operator> <name pos:start="733:31" pos:end="733:34">text</name></expr>;</expr_stmt>

                <break pos:start="735:17" pos:end="735:22">break;</break>

            </block_content>}</block>



                <comment type="block" pos:start="741:17" pos:end="741:68">/* language (matters for audio/subtitles, mostly) */</comment>

            <case pos:start="743:13" pos:end="743:43">case <expr pos:start="743:18" pos:end="743:42"><name pos:start="743:18" pos:end="743:42">MATROSKA_ID_TRACKLANGUAGE</name></expr>:</case> <block pos:start="743:45" pos:end="763:13">{<block_content pos:start="745:17" pos:end="761:22">

                <decl_stmt pos:start="745:17" pos:end="745:33"><decl pos:start="745:17" pos:end="745:26"><type pos:start="745:17" pos:end="745:22"><name pos:start="745:17" pos:end="745:20">char</name> <modifier pos:start="745:22" pos:end="745:22">*</modifier></type><name pos:start="745:23" pos:end="745:26">text</name></decl>, <decl pos:start="745:29" pos:end="745:32"><type ref="prev" pos:start="745:17" pos:end="745:22"><modifier pos:start="745:29" pos:end="745:29">*</modifier></type><name pos:start="745:30" pos:end="745:32">end</name></decl>;</decl_stmt>

                <if_stmt pos:start="747:17" pos:end="749:26"><if pos:start="747:17" pos:end="749:26">if <condition pos:start="747:20" pos:end="747:69">(<expr pos:start="747:21" pos:end="747:68"><operator pos:start="747:21" pos:end="747:21">(</operator><name pos:start="747:22" pos:end="747:24">res</name> <operator pos:start="747:26" pos:end="747:26">=</operator> <call pos:start="747:28" pos:end="747:63"><name pos:start="747:28" pos:end="747:41">ebml_read_utf8</name><argument_list pos:start="747:42" pos:end="747:63">(<argument pos:start="747:43" pos:end="747:50"><expr pos:start="747:43" pos:end="747:50"><name pos:start="747:43" pos:end="747:50">matroska</name></expr></argument>, <argument pos:start="747:53" pos:end="747:55"><expr pos:start="747:53" pos:end="747:55"><operator pos:start="747:53" pos:end="747:53">&amp;</operator><name pos:start="747:54" pos:end="747:55">id</name></expr></argument>, <argument pos:start="747:58" pos:end="747:62"><expr pos:start="747:58" pos:end="747:62"><operator pos:start="747:58" pos:end="747:58">&amp;</operator><name pos:start="747:59" pos:end="747:62">text</name></expr></argument>)</argument_list></call><operator pos:start="747:64" pos:end="747:64">)</operator> <operator pos:start="747:66" pos:end="747:66">&lt;</operator> <literal type="number" pos:start="747:68" pos:end="747:68">0</literal></expr>)</condition><block type="pseudo" pos:start="749:21" pos:end="749:26"><block_content pos:start="749:21" pos:end="749:26">

                    <break pos:start="749:21" pos:end="749:26">break;</break></block_content></block></if></if_stmt>

                <if_stmt pos:start="751:17" pos:end="753:32"><if pos:start="751:17" pos:end="753:32">if <condition pos:start="751:20" pos:end="751:46">(<expr pos:start="751:21" pos:end="751:45"><operator pos:start="751:21" pos:end="751:21">(</operator><name pos:start="751:22" pos:end="751:24">end</name> <operator pos:start="751:26" pos:end="751:26">=</operator> <call pos:start="751:28" pos:end="751:44"><name pos:start="751:28" pos:end="751:33">strchr</name><argument_list pos:start="751:34" pos:end="751:44">(<argument pos:start="751:35" pos:end="751:38"><expr pos:start="751:35" pos:end="751:38"><name pos:start="751:35" pos:end="751:38">text</name></expr></argument>, <argument pos:start="751:41" pos:end="751:43"><expr pos:start="751:41" pos:end="751:43"><literal type="char" pos:start="751:41" pos:end="751:43">'-'</literal></expr></argument>)</argument_list></call><operator pos:start="751:45" pos:end="751:45">)</operator></expr>)</condition><block type="pseudo" pos:start="753:21" pos:end="753:32"><block_content pos:start="753:21" pos:end="753:32">

                    <expr_stmt pos:start="753:21" pos:end="753:32"><expr pos:start="753:21" pos:end="753:31"><operator pos:start="753:21" pos:end="753:21">*</operator><name pos:start="753:22" pos:end="753:24">end</name> <operator pos:start="753:26" pos:end="753:26">=</operator> <literal type="char" pos:start="753:28" pos:end="753:31">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="755:17" pos:end="757:50"><if pos:start="755:17" pos:end="757:50">if <condition pos:start="755:20" pos:end="755:38">(<expr pos:start="755:21" pos:end="755:37"><call pos:start="755:21" pos:end="755:32"><name pos:start="755:21" pos:end="755:26">strlen</name><argument_list pos:start="755:27" pos:end="755:32">(<argument pos:start="755:28" pos:end="755:31"><expr pos:start="755:28" pos:end="755:31"><name pos:start="755:28" pos:end="755:31">text</name></expr></argument>)</argument_list></call> <operator pos:start="755:34" pos:end="755:35">==</operator> <literal type="number" pos:start="755:37" pos:end="755:37">3</literal></expr>)</condition><block type="pseudo" pos:start="757:21" pos:end="757:50"><block_content pos:start="757:21" pos:end="757:50">

                    <expr_stmt pos:start="757:21" pos:end="757:50"><expr pos:start="757:21" pos:end="757:49"><call pos:start="757:21" pos:end="757:49"><name pos:start="757:21" pos:end="757:26">strcpy</name><argument_list pos:start="757:27" pos:end="757:49">(<argument pos:start="757:28" pos:end="757:42"><expr pos:start="757:28" pos:end="757:42"><name pos:start="757:28" pos:end="757:42"><name pos:start="757:28" pos:end="757:32">track</name><operator pos:start="757:33" pos:end="757:34">-&gt;</operator><name pos:start="757:35" pos:end="757:42">language</name></name></expr></argument>, <argument pos:start="757:45" pos:end="757:48"><expr pos:start="757:45" pos:end="757:48"><name pos:start="757:45" pos:end="757:48">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="759:17" pos:end="759:30"><expr pos:start="759:17" pos:end="759:29"><call pos:start="759:17" pos:end="759:29"><name pos:start="759:17" pos:end="759:23">av_free</name><argument_list pos:start="759:24" pos:end="759:29">(<argument pos:start="759:25" pos:end="759:28"><expr pos:start="759:25" pos:end="759:28"><name pos:start="759:25" pos:end="759:28">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="761:17" pos:end="761:22">break;</break>

            </block_content>}</block>



                <comment type="block" pos:start="767:17" pos:end="767:51">/* whether this is actually used */</comment>

            <case pos:start="769:13" pos:end="769:46">case <expr pos:start="769:18" pos:end="769:45"><name pos:start="769:18" pos:end="769:45">MATROSKA_ID_TRACKFLAGENABLED</name></expr>:</case> <block pos:start="769:48" pos:end="787:13">{<block_content pos:start="771:17" pos:end="785:22">

                <decl_stmt pos:start="771:17" pos:end="771:29"><decl pos:start="771:17" pos:end="771:28"><type pos:start="771:17" pos:end="771:24"><name pos:start="771:17" pos:end="771:24">uint64_t</name></type> <name pos:start="771:26" pos:end="771:28">num</name></decl>;</decl_stmt>

                <if_stmt pos:start="773:17" pos:end="775:26"><if pos:start="773:17" pos:end="775:26">if <condition pos:start="773:20" pos:end="773:68">(<expr pos:start="773:21" pos:end="773:67"><operator pos:start="773:21" pos:end="773:21">(</operator><name pos:start="773:22" pos:end="773:24">res</name> <operator pos:start="773:26" pos:end="773:26">=</operator> <call pos:start="773:28" pos:end="773:62"><name pos:start="773:28" pos:end="773:41">ebml_read_uint</name><argument_list pos:start="773:42" pos:end="773:62">(<argument pos:start="773:43" pos:end="773:50"><expr pos:start="773:43" pos:end="773:50"><name pos:start="773:43" pos:end="773:50">matroska</name></expr></argument>, <argument pos:start="773:53" pos:end="773:55"><expr pos:start="773:53" pos:end="773:55"><operator pos:start="773:53" pos:end="773:53">&amp;</operator><name pos:start="773:54" pos:end="773:55">id</name></expr></argument>, <argument pos:start="773:58" pos:end="773:61"><expr pos:start="773:58" pos:end="773:61"><operator pos:start="773:58" pos:end="773:58">&amp;</operator><name pos:start="773:59" pos:end="773:61">num</name></expr></argument>)</argument_list></call><operator pos:start="773:63" pos:end="773:63">)</operator> <operator pos:start="773:65" pos:end="773:65">&lt;</operator> <literal type="number" pos:start="773:67" pos:end="773:67">0</literal></expr>)</condition><block type="pseudo" pos:start="775:21" pos:end="775:26"><block_content pos:start="775:21" pos:end="775:26">

                    <break pos:start="775:21" pos:end="775:26">break;</break></block_content></block></if></if_stmt>

                <if_stmt pos:start="777:17" pos:end="783:60"><if pos:start="777:17" pos:end="779:59">if <condition pos:start="777:20" pos:end="777:24">(<expr pos:start="777:21" pos:end="777:23"><name pos:start="777:21" pos:end="777:23">num</name></expr>)</condition><block type="pseudo" pos:start="779:21" pos:end="779:59"><block_content pos:start="779:21" pos:end="779:59">

                    <expr_stmt pos:start="779:21" pos:end="779:59"><expr pos:start="779:21" pos:end="779:58"><name pos:start="779:21" pos:end="779:32"><name pos:start="779:21" pos:end="779:25">track</name><operator pos:start="779:26" pos:end="779:27">-&gt;</operator><name pos:start="779:28" pos:end="779:32">flags</name></name> <operator pos:start="779:34" pos:end="779:35">|=</operator> <name pos:start="779:37" pos:end="779:58">MATROSKA_TRACK_ENABLED</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="781:17" pos:end="783:60">else<block type="pseudo" pos:start="783:21" pos:end="783:60"><block_content pos:start="783:21" pos:end="783:60">

                    <expr_stmt pos:start="783:21" pos:end="783:60"><expr pos:start="783:21" pos:end="783:59"><name pos:start="783:21" pos:end="783:32"><name pos:start="783:21" pos:end="783:25">track</name><operator pos:start="783:26" pos:end="783:27">-&gt;</operator><name pos:start="783:28" pos:end="783:32">flags</name></name> <operator pos:start="783:34" pos:end="783:35">&amp;=</operator> <operator pos:start="783:37" pos:end="783:37">~</operator><name pos:start="783:38" pos:end="783:59">MATROSKA_TRACK_ENABLED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <break pos:start="785:17" pos:end="785:22">break;</break>

            </block_content>}</block>



                <comment type="block" pos:start="791:17" pos:end="791:66">/* whether it's the default for this track type */</comment>

            <case pos:start="793:13" pos:end="793:46">case <expr pos:start="793:18" pos:end="793:45"><name pos:start="793:18" pos:end="793:45">MATROSKA_ID_TRACKFLAGDEFAULT</name></expr>:</case> <block pos:start="793:48" pos:end="811:13">{<block_content pos:start="795:17" pos:end="809:22">

                <decl_stmt pos:start="795:17" pos:end="795:29"><decl pos:start="795:17" pos:end="795:28"><type pos:start="795:17" pos:end="795:24"><name pos:start="795:17" pos:end="795:24">uint64_t</name></type> <name pos:start="795:26" pos:end="795:28">num</name></decl>;</decl_stmt>

                <if_stmt pos:start="797:17" pos:end="799:26"><if pos:start="797:17" pos:end="799:26">if <condition pos:start="797:20" pos:end="797:68">(<expr pos:start="797:21" pos:end="797:67"><operator pos:start="797:21" pos:end="797:21">(</operator><name pos:start="797:22" pos:end="797:24">res</name> <operator pos:start="797:26" pos:end="797:26">=</operator> <call pos:start="797:28" pos:end="797:62"><name pos:start="797:28" pos:end="797:41">ebml_read_uint</name><argument_list pos:start="797:42" pos:end="797:62">(<argument pos:start="797:43" pos:end="797:50"><expr pos:start="797:43" pos:end="797:50"><name pos:start="797:43" pos:end="797:50">matroska</name></expr></argument>, <argument pos:start="797:53" pos:end="797:55"><expr pos:start="797:53" pos:end="797:55"><operator pos:start="797:53" pos:end="797:53">&amp;</operator><name pos:start="797:54" pos:end="797:55">id</name></expr></argument>, <argument pos:start="797:58" pos:end="797:61"><expr pos:start="797:58" pos:end="797:61"><operator pos:start="797:58" pos:end="797:58">&amp;</operator><name pos:start="797:59" pos:end="797:61">num</name></expr></argument>)</argument_list></call><operator pos:start="797:63" pos:end="797:63">)</operator> <operator pos:start="797:65" pos:end="797:65">&lt;</operator> <literal type="number" pos:start="797:67" pos:end="797:67">0</literal></expr>)</condition><block type="pseudo" pos:start="799:21" pos:end="799:26"><block_content pos:start="799:21" pos:end="799:26">

                    <break pos:start="799:21" pos:end="799:26">break;</break></block_content></block></if></if_stmt>

                <if_stmt pos:start="801:17" pos:end="807:60"><if pos:start="801:17" pos:end="803:59">if <condition pos:start="801:20" pos:end="801:24">(<expr pos:start="801:21" pos:end="801:23"><name pos:start="801:21" pos:end="801:23">num</name></expr>)</condition><block type="pseudo" pos:start="803:21" pos:end="803:59"><block_content pos:start="803:21" pos:end="803:59">

                    <expr_stmt pos:start="803:21" pos:end="803:59"><expr pos:start="803:21" pos:end="803:58"><name pos:start="803:21" pos:end="803:32"><name pos:start="803:21" pos:end="803:25">track</name><operator pos:start="803:26" pos:end="803:27">-&gt;</operator><name pos:start="803:28" pos:end="803:32">flags</name></name> <operator pos:start="803:34" pos:end="803:35">|=</operator> <name pos:start="803:37" pos:end="803:58">MATROSKA_TRACK_DEFAULT</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="805:17" pos:end="807:60">else<block type="pseudo" pos:start="807:21" pos:end="807:60"><block_content pos:start="807:21" pos:end="807:60">

                    <expr_stmt pos:start="807:21" pos:end="807:60"><expr pos:start="807:21" pos:end="807:59"><name pos:start="807:21" pos:end="807:32"><name pos:start="807:21" pos:end="807:25">track</name><operator pos:start="807:26" pos:end="807:27">-&gt;</operator><name pos:start="807:28" pos:end="807:32">flags</name></name> <operator pos:start="807:34" pos:end="807:35">&amp;=</operator> <operator pos:start="807:37" pos:end="807:37">~</operator><name pos:start="807:38" pos:end="807:59">MATROSKA_TRACK_DEFAULT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <break pos:start="809:17" pos:end="809:22">break;</break>

            </block_content>}</block>



                <comment type="block" pos:start="815:17" pos:end="817:33">/* lacing (like MPEG, where blocks don't end/start on frame

                 * boundaries) */</comment>

            <case pos:start="819:13" pos:end="819:45">case <expr pos:start="819:18" pos:end="819:44"><name pos:start="819:18" pos:end="819:44">MATROSKA_ID_TRACKFLAGLACING</name></expr>:</case> <block pos:start="819:47" pos:end="837:13">{<block_content pos:start="821:17" pos:end="835:22">

                <decl_stmt pos:start="821:17" pos:end="821:29"><decl pos:start="821:17" pos:end="821:28"><type pos:start="821:17" pos:end="821:24"><name pos:start="821:17" pos:end="821:24">uint64_t</name></type> <name pos:start="821:26" pos:end="821:28">num</name></decl>;</decl_stmt>

                <if_stmt pos:start="823:17" pos:end="825:26"><if pos:start="823:17" pos:end="825:26">if <condition pos:start="823:20" pos:end="823:68">(<expr pos:start="823:21" pos:end="823:67"><operator pos:start="823:21" pos:end="823:21">(</operator><name pos:start="823:22" pos:end="823:24">res</name> <operator pos:start="823:26" pos:end="823:26">=</operator> <call pos:start="823:28" pos:end="823:62"><name pos:start="823:28" pos:end="823:41">ebml_read_uint</name><argument_list pos:start="823:42" pos:end="823:62">(<argument pos:start="823:43" pos:end="823:50"><expr pos:start="823:43" pos:end="823:50"><name pos:start="823:43" pos:end="823:50">matroska</name></expr></argument>, <argument pos:start="823:53" pos:end="823:55"><expr pos:start="823:53" pos:end="823:55"><operator pos:start="823:53" pos:end="823:53">&amp;</operator><name pos:start="823:54" pos:end="823:55">id</name></expr></argument>, <argument pos:start="823:58" pos:end="823:61"><expr pos:start="823:58" pos:end="823:61"><operator pos:start="823:58" pos:end="823:58">&amp;</operator><name pos:start="823:59" pos:end="823:61">num</name></expr></argument>)</argument_list></call><operator pos:start="823:63" pos:end="823:63">)</operator> <operator pos:start="823:65" pos:end="823:65">&lt;</operator> <literal type="number" pos:start="823:67" pos:end="823:67">0</literal></expr>)</condition><block type="pseudo" pos:start="825:21" pos:end="825:26"><block_content pos:start="825:21" pos:end="825:26">

                    <break pos:start="825:21" pos:end="825:26">break;</break></block_content></block></if></if_stmt>

                <if_stmt pos:start="827:17" pos:end="833:59"><if pos:start="827:17" pos:end="829:58">if <condition pos:start="827:20" pos:end="827:24">(<expr pos:start="827:21" pos:end="827:23"><name pos:start="827:21" pos:end="827:23">num</name></expr>)</condition><block type="pseudo" pos:start="829:21" pos:end="829:58"><block_content pos:start="829:21" pos:end="829:58">

                    <expr_stmt pos:start="829:21" pos:end="829:58"><expr pos:start="829:21" pos:end="829:57"><name pos:start="829:21" pos:end="829:32"><name pos:start="829:21" pos:end="829:25">track</name><operator pos:start="829:26" pos:end="829:27">-&gt;</operator><name pos:start="829:28" pos:end="829:32">flags</name></name> <operator pos:start="829:34" pos:end="829:35">|=</operator> <name pos:start="829:37" pos:end="829:57">MATROSKA_TRACK_LACING</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="831:17" pos:end="833:59">else<block type="pseudo" pos:start="833:21" pos:end="833:59"><block_content pos:start="833:21" pos:end="833:59">

                    <expr_stmt pos:start="833:21" pos:end="833:59"><expr pos:start="833:21" pos:end="833:58"><name pos:start="833:21" pos:end="833:32"><name pos:start="833:21" pos:end="833:25">track</name><operator pos:start="833:26" pos:end="833:27">-&gt;</operator><name pos:start="833:28" pos:end="833:32">flags</name></name> <operator pos:start="833:34" pos:end="833:35">&amp;=</operator> <operator pos:start="833:37" pos:end="833:37">~</operator><name pos:start="833:38" pos:end="833:58">MATROSKA_TRACK_LACING</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <break pos:start="835:17" pos:end="835:22">break;</break>

            </block_content>}</block>



                <comment type="block" pos:start="841:17" pos:end="841:78">/* default length (in time) of one data block in this track */</comment>

            <case pos:start="843:13" pos:end="843:50">case <expr pos:start="843:18" pos:end="843:49"><name pos:start="843:18" pos:end="843:49">MATROSKA_ID_TRACKDEFAULTDURATION</name></expr>:</case> <block pos:start="843:52" pos:end="855:13">{<block_content pos:start="845:17" pos:end="853:22">

                <decl_stmt pos:start="845:17" pos:end="845:29"><decl pos:start="845:17" pos:end="845:28"><type pos:start="845:17" pos:end="845:24"><name pos:start="845:17" pos:end="845:24">uint64_t</name></type> <name pos:start="845:26" pos:end="845:28">num</name></decl>;</decl_stmt>

                <if_stmt pos:start="847:17" pos:end="849:26"><if pos:start="847:17" pos:end="849:26">if <condition pos:start="847:20" pos:end="847:68">(<expr pos:start="847:21" pos:end="847:67"><operator pos:start="847:21" pos:end="847:21">(</operator><name pos:start="847:22" pos:end="847:24">res</name> <operator pos:start="847:26" pos:end="847:26">=</operator> <call pos:start="847:28" pos:end="847:62"><name pos:start="847:28" pos:end="847:41">ebml_read_uint</name><argument_list pos:start="847:42" pos:end="847:62">(<argument pos:start="847:43" pos:end="847:50"><expr pos:start="847:43" pos:end="847:50"><name pos:start="847:43" pos:end="847:50">matroska</name></expr></argument>, <argument pos:start="847:53" pos:end="847:55"><expr pos:start="847:53" pos:end="847:55"><operator pos:start="847:53" pos:end="847:53">&amp;</operator><name pos:start="847:54" pos:end="847:55">id</name></expr></argument>, <argument pos:start="847:58" pos:end="847:61"><expr pos:start="847:58" pos:end="847:61"><operator pos:start="847:58" pos:end="847:58">&amp;</operator><name pos:start="847:59" pos:end="847:61">num</name></expr></argument>)</argument_list></call><operator pos:start="847:63" pos:end="847:63">)</operator> <operator pos:start="847:65" pos:end="847:65">&lt;</operator> <literal type="number" pos:start="847:67" pos:end="847:67">0</literal></expr>)</condition><block type="pseudo" pos:start="849:21" pos:end="849:26"><block_content pos:start="849:21" pos:end="849:26">

                    <break pos:start="849:21" pos:end="849:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="851:17" pos:end="851:46"><expr pos:start="851:17" pos:end="851:45"><name pos:start="851:17" pos:end="851:39"><name pos:start="851:17" pos:end="851:21">track</name><operator pos:start="851:22" pos:end="851:23">-&gt;</operator><name pos:start="851:24" pos:end="851:39">default_duration</name></name> <operator pos:start="851:41" pos:end="851:41">=</operator> <name pos:start="851:43" pos:end="851:45">num</name></expr>;</expr_stmt>

                <break pos:start="853:17" pos:end="853:22">break;</break>

            </block_content>}</block>



            <case pos:start="859:13" pos:end="859:51">case <expr pos:start="859:18" pos:end="859:50"><name pos:start="859:18" pos:end="859:50">MATROSKA_ID_TRACKCONTENTENCODINGS</name></expr>:</case> <block pos:start="859:53" pos:end="1151:13">{<block_content pos:start="861:17" pos:end="1149:22">

                <if_stmt pos:start="861:17" pos:end="863:26"><if pos:start="861:17" pos:end="863:26">if <condition pos:start="861:20" pos:end="861:64">(<expr pos:start="861:21" pos:end="861:63"><operator pos:start="861:21" pos:end="861:21">(</operator><name pos:start="861:22" pos:end="861:24">res</name> <operator pos:start="861:26" pos:end="861:26">=</operator> <call pos:start="861:28" pos:end="861:58"><name pos:start="861:28" pos:end="861:43">ebml_read_master</name><argument_list pos:start="861:44" pos:end="861:58">(<argument pos:start="861:45" pos:end="861:52"><expr pos:start="861:45" pos:end="861:52"><name pos:start="861:45" pos:end="861:52">matroska</name></expr></argument>, <argument pos:start="861:55" pos:end="861:57"><expr pos:start="861:55" pos:end="861:57"><operator pos:start="861:55" pos:end="861:55">&amp;</operator><name pos:start="861:56" pos:end="861:57">id</name></expr></argument>)</argument_list></call><operator pos:start="861:59" pos:end="861:59">)</operator> <operator pos:start="861:61" pos:end="861:61">&lt;</operator> <literal type="number" pos:start="861:63" pos:end="861:63">0</literal></expr>)</condition><block type="pseudo" pos:start="863:21" pos:end="863:26"><block_content pos:start="863:21" pos:end="863:26">

                    <break pos:start="863:21" pos:end="863:26">break;</break></block_content></block></if></if_stmt>



                <while pos:start="867:17" pos:end="1147:17">while <condition pos:start="867:23" pos:end="867:32">(<expr pos:start="867:24" pos:end="867:31"><name pos:start="867:24" pos:end="867:26">res</name> <operator pos:start="867:28" pos:end="867:29">==</operator> <literal type="number" pos:start="867:31" pos:end="867:31">0</literal></expr>)</condition> <block pos:start="867:34" pos:end="1147:17">{<block_content pos:start="869:21" pos:end="1145:21">

                    <if_stmt pos:start="869:21" pos:end="881:21"><if pos:start="869:21" pos:end="875:21">if <condition pos:start="869:24" pos:end="869:76">(<expr pos:start="869:25" pos:end="869:75"><operator pos:start="869:25" pos:end="869:25">!</operator><operator pos:start="869:26" pos:end="869:26">(</operator><name pos:start="869:27" pos:end="869:28">id</name> <operator pos:start="869:30" pos:end="869:30">=</operator> <call pos:start="869:32" pos:end="869:74"><name pos:start="869:32" pos:end="869:43">ebml_peek_id</name><argument_list pos:start="869:44" pos:end="869:74">(<argument pos:start="869:45" pos:end="869:52"><expr pos:start="869:45" pos:end="869:52"><name pos:start="869:45" pos:end="869:52">matroska</name></expr></argument>, <argument pos:start="869:55" pos:end="869:73"><expr pos:start="869:55" pos:end="869:73"><operator pos:start="869:55" pos:end="869:55">&amp;</operator><name pos:start="869:56" pos:end="869:73"><name pos:start="869:56" pos:end="869:63">matroska</name><operator pos:start="869:64" pos:end="869:65">-&gt;</operator><name pos:start="869:66" pos:end="869:73">level_up</name></name></expr></argument>)</argument_list></call><operator pos:start="869:75" pos:end="869:75">)</operator></expr>)</condition> <block pos:start="869:78" pos:end="875:21">{<block_content pos:start="871:25" pos:end="873:30">

                        <expr_stmt pos:start="871:25" pos:end="871:43"><expr pos:start="871:25" pos:end="871:42"><name pos:start="871:25" pos:end="871:27">res</name> <operator pos:start="871:29" pos:end="871:29">=</operator> <call pos:start="871:31" pos:end="871:42"><name pos:start="871:31" pos:end="871:37">AVERROR</name><argument_list pos:start="871:38" pos:end="871:42">(<argument pos:start="871:39" pos:end="871:41"><expr pos:start="871:39" pos:end="871:41"><name pos:start="871:39" pos:end="871:41">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="873:25" pos:end="873:30">break;</break>

                    </block_content>}</block></if> <if type="elseif" pos:start="875:23" pos:end="881:21">else if <condition pos:start="875:31" pos:end="875:54">(<expr pos:start="875:32" pos:end="875:53"><name pos:start="875:32" pos:end="875:49"><name pos:start="875:32" pos:end="875:39">matroska</name><operator pos:start="875:40" pos:end="875:41">-&gt;</operator><name pos:start="875:42" pos:end="875:49">level_up</name></name> <operator pos:start="875:51" pos:end="875:51">&gt;</operator> <literal type="number" pos:start="875:53" pos:end="875:53">0</literal></expr>)</condition> <block pos:start="875:56" pos:end="881:21">{<block_content pos:start="877:25" pos:end="879:30">

                        <expr_stmt pos:start="877:25" pos:end="877:45"><expr pos:start="877:25" pos:end="877:44"><name pos:start="877:25" pos:end="877:42"><name pos:start="877:25" pos:end="877:32">matroska</name><operator pos:start="877:33" pos:end="877:34">-&gt;</operator><name pos:start="877:35" pos:end="877:42">level_up</name></name><operator pos:start="877:43" pos:end="877:44">--</operator></expr>;</expr_stmt>

                        <break pos:start="879:25" pos:end="879:30">break;</break>

                    </block_content>}</block></if></if_stmt>



                    <switch pos:start="885:21" pos:end="1135:21">switch <condition pos:start="885:28" pos:end="885:31">(<expr pos:start="885:29" pos:end="885:30"><name pos:start="885:29" pos:end="885:30">id</name></expr>)</condition> <block pos:start="885:33" pos:end="1135:21">{<block_content pos:start="887:25" pos:end="1133:34">

                        <case pos:start="887:25" pos:end="887:62">case <expr pos:start="887:30" pos:end="887:61"><name pos:start="887:30" pos:end="887:61">MATROSKA_ID_TRACKCONTENTENCODING</name></expr>:</case> <block pos:start="887:64" pos:end="1113:25">{<block_content pos:start="889:29" pos:end="1111:34">

                            <decl_stmt pos:start="889:29" pos:end="889:51"><decl pos:start="889:29" pos:end="889:50"><type pos:start="889:29" pos:end="889:31"><name pos:start="889:29" pos:end="889:31">int</name></type> <name pos:start="889:33" pos:end="889:46">encoding_scope</name> <init pos:start="889:48" pos:end="889:50">= <expr pos:start="889:50" pos:end="889:50"><literal type="number" pos:start="889:50" pos:end="889:50">1</literal></expr></init></decl>;</decl_stmt>

                            <if_stmt pos:start="891:29" pos:end="893:38"><if pos:start="891:29" pos:end="893:38">if <condition pos:start="891:32" pos:end="891:76">(<expr pos:start="891:33" pos:end="891:75"><operator pos:start="891:33" pos:end="891:33">(</operator><name pos:start="891:34" pos:end="891:36">res</name> <operator pos:start="891:38" pos:end="891:38">=</operator> <call pos:start="891:40" pos:end="891:70"><name pos:start="891:40" pos:end="891:55">ebml_read_master</name><argument_list pos:start="891:56" pos:end="891:70">(<argument pos:start="891:57" pos:end="891:64"><expr pos:start="891:57" pos:end="891:64"><name pos:start="891:57" pos:end="891:64">matroska</name></expr></argument>, <argument pos:start="891:67" pos:end="891:69"><expr pos:start="891:67" pos:end="891:69"><operator pos:start="891:67" pos:end="891:67">&amp;</operator><name pos:start="891:68" pos:end="891:69">id</name></expr></argument>)</argument_list></call><operator pos:start="891:71" pos:end="891:71">)</operator> <operator pos:start="891:73" pos:end="891:73">&lt;</operator> <literal type="number" pos:start="891:75" pos:end="891:75">0</literal></expr>)</condition><block type="pseudo" pos:start="893:33" pos:end="893:38"><block_content pos:start="893:33" pos:end="893:38">

                                <break pos:start="893:33" pos:end="893:38">break;</break></block_content></block></if></if_stmt>



                            <while pos:start="897:29" pos:end="1105:29">while <condition pos:start="897:35" pos:end="897:44">(<expr pos:start="897:36" pos:end="897:43"><name pos:start="897:36" pos:end="897:38">res</name> <operator pos:start="897:40" pos:end="897:41">==</operator> <literal type="number" pos:start="897:43" pos:end="897:43">0</literal></expr>)</condition> <block pos:start="897:46" pos:end="1105:29">{<block_content pos:start="899:33" pos:end="1103:33">

                                <if_stmt pos:start="899:33" pos:end="911:33"><if pos:start="899:33" pos:end="905:33">if <condition pos:start="899:36" pos:end="899:88">(<expr pos:start="899:37" pos:end="899:87"><operator pos:start="899:37" pos:end="899:37">!</operator><operator pos:start="899:38" pos:end="899:38">(</operator><name pos:start="899:39" pos:end="899:40">id</name> <operator pos:start="899:42" pos:end="899:42">=</operator> <call pos:start="899:44" pos:end="899:86"><name pos:start="899:44" pos:end="899:55">ebml_peek_id</name><argument_list pos:start="899:56" pos:end="899:86">(<argument pos:start="899:57" pos:end="899:64"><expr pos:start="899:57" pos:end="899:64"><name pos:start="899:57" pos:end="899:64">matroska</name></expr></argument>, <argument pos:start="899:67" pos:end="899:85"><expr pos:start="899:67" pos:end="899:85"><operator pos:start="899:67" pos:end="899:67">&amp;</operator><name pos:start="899:68" pos:end="899:85"><name pos:start="899:68" pos:end="899:75">matroska</name><operator pos:start="899:76" pos:end="899:77">-&gt;</operator><name pos:start="899:78" pos:end="899:85">level_up</name></name></expr></argument>)</argument_list></call><operator pos:start="899:87" pos:end="899:87">)</operator></expr>)</condition> <block pos:start="899:90" pos:end="905:33">{<block_content pos:start="901:37" pos:end="903:42">

                                    <expr_stmt pos:start="901:37" pos:end="901:55"><expr pos:start="901:37" pos:end="901:54"><name pos:start="901:37" pos:end="901:39">res</name> <operator pos:start="901:41" pos:end="901:41">=</operator> <call pos:start="901:43" pos:end="901:54"><name pos:start="901:43" pos:end="901:49">AVERROR</name><argument_list pos:start="901:50" pos:end="901:54">(<argument pos:start="901:51" pos:end="901:53"><expr pos:start="901:51" pos:end="901:53"><name pos:start="901:51" pos:end="901:53">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <break pos:start="903:37" pos:end="903:42">break;</break>

                                </block_content>}</block></if> <if type="elseif" pos:start="905:35" pos:end="911:33">else if <condition pos:start="905:43" pos:end="905:66">(<expr pos:start="905:44" pos:end="905:65"><name pos:start="905:44" pos:end="905:61"><name pos:start="905:44" pos:end="905:51">matroska</name><operator pos:start="905:52" pos:end="905:53">-&gt;</operator><name pos:start="905:54" pos:end="905:61">level_up</name></name> <operator pos:start="905:63" pos:end="905:63">&gt;</operator> <literal type="number" pos:start="905:65" pos:end="905:65">0</literal></expr>)</condition> <block pos:start="905:68" pos:end="911:33">{<block_content pos:start="907:37" pos:end="909:42">

                                    <expr_stmt pos:start="907:37" pos:end="907:57"><expr pos:start="907:37" pos:end="907:56"><name pos:start="907:37" pos:end="907:54"><name pos:start="907:37" pos:end="907:44">matroska</name><operator pos:start="907:45" pos:end="907:46">-&gt;</operator><name pos:start="907:47" pos:end="907:54">level_up</name></name><operator pos:start="907:55" pos:end="907:56">--</operator></expr>;</expr_stmt>

                                    <break pos:start="909:37" pos:end="909:42">break;</break>

                                </block_content>}</block></if></if_stmt>



                                <switch pos:start="915:33" pos:end="1093:33">switch <condition pos:start="915:40" pos:end="915:43">(<expr pos:start="915:41" pos:end="915:42"><name pos:start="915:41" pos:end="915:42">id</name></expr>)</condition> <block pos:start="915:45" pos:end="1093:33">{<block_content pos:start="917:37" pos:end="1091:46">

                                    <case pos:start="917:37" pos:end="917:67">case <expr pos:start="917:42" pos:end="917:66"><name pos:start="917:42" pos:end="917:66">MATROSKA_ID_ENCODINGSCOPE</name></expr>:</case> <block pos:start="917:69" pos:end="929:37">{<block_content pos:start="919:41" pos:end="927:46">

                                        <decl_stmt pos:start="919:41" pos:end="919:53"><decl pos:start="919:41" pos:end="919:52"><type pos:start="919:41" pos:end="919:48"><name pos:start="919:41" pos:end="919:48">uint64_t</name></type> <name pos:start="919:50" pos:end="919:52">num</name></decl>;</decl_stmt>

                                        <if_stmt pos:start="921:41" pos:end="923:50"><if pos:start="921:41" pos:end="923:50">if <condition pos:start="921:44" pos:end="921:92">(<expr pos:start="921:45" pos:end="921:91"><operator pos:start="921:45" pos:end="921:45">(</operator><name pos:start="921:46" pos:end="921:48">res</name> <operator pos:start="921:50" pos:end="921:50">=</operator> <call pos:start="921:52" pos:end="921:86"><name pos:start="921:52" pos:end="921:65">ebml_read_uint</name><argument_list pos:start="921:66" pos:end="921:86">(<argument pos:start="921:67" pos:end="921:74"><expr pos:start="921:67" pos:end="921:74"><name pos:start="921:67" pos:end="921:74">matroska</name></expr></argument>, <argument pos:start="921:77" pos:end="921:79"><expr pos:start="921:77" pos:end="921:79"><operator pos:start="921:77" pos:end="921:77">&amp;</operator><name pos:start="921:78" pos:end="921:79">id</name></expr></argument>, <argument pos:start="921:82" pos:end="921:85"><expr pos:start="921:82" pos:end="921:85"><operator pos:start="921:82" pos:end="921:82">&amp;</operator><name pos:start="921:83" pos:end="921:85">num</name></expr></argument>)</argument_list></call><operator pos:start="921:87" pos:end="921:87">)</operator> <operator pos:start="921:89" pos:end="921:89">&lt;</operator> <literal type="number" pos:start="921:91" pos:end="921:91">0</literal></expr>)</condition><block type="pseudo" pos:start="923:45" pos:end="923:50"><block_content pos:start="923:45" pos:end="923:50">

                                            <break pos:start="923:45" pos:end="923:50">break;</break></block_content></block></if></if_stmt>

                                        <expr_stmt pos:start="925:41" pos:end="925:61"><expr pos:start="925:41" pos:end="925:60"><name pos:start="925:41" pos:end="925:54">encoding_scope</name> <operator pos:start="925:56" pos:end="925:56">=</operator> <name pos:start="925:58" pos:end="925:60">num</name></expr>;</expr_stmt>

                                        <break pos:start="927:41" pos:end="927:46">break;</break>

                                    </block_content>}</block>



                                    <case pos:start="933:37" pos:end="933:66">case <expr pos:start="933:42" pos:end="933:65"><name pos:start="933:42" pos:end="933:65">MATROSKA_ID_ENCODINGTYPE</name></expr>:</case> <block pos:start="933:68" pos:end="949:37">{<block_content pos:start="935:41" pos:end="947:46">

                                        <decl_stmt pos:start="935:41" pos:end="935:53"><decl pos:start="935:41" pos:end="935:52"><type pos:start="935:41" pos:end="935:48"><name pos:start="935:41" pos:end="935:48">uint64_t</name></type> <name pos:start="935:50" pos:end="935:52">num</name></decl>;</decl_stmt>

                                        <if_stmt pos:start="937:41" pos:end="939:50"><if pos:start="937:41" pos:end="939:50">if <condition pos:start="937:44" pos:end="937:92">(<expr pos:start="937:45" pos:end="937:91"><operator pos:start="937:45" pos:end="937:45">(</operator><name pos:start="937:46" pos:end="937:48">res</name> <operator pos:start="937:50" pos:end="937:50">=</operator> <call pos:start="937:52" pos:end="937:86"><name pos:start="937:52" pos:end="937:65">ebml_read_uint</name><argument_list pos:start="937:66" pos:end="937:86">(<argument pos:start="937:67" pos:end="937:74"><expr pos:start="937:67" pos:end="937:74"><name pos:start="937:67" pos:end="937:74">matroska</name></expr></argument>, <argument pos:start="937:77" pos:end="937:79"><expr pos:start="937:77" pos:end="937:79"><operator pos:start="937:77" pos:end="937:77">&amp;</operator><name pos:start="937:78" pos:end="937:79">id</name></expr></argument>, <argument pos:start="937:82" pos:end="937:85"><expr pos:start="937:82" pos:end="937:85"><operator pos:start="937:82" pos:end="937:82">&amp;</operator><name pos:start="937:83" pos:end="937:85">num</name></expr></argument>)</argument_list></call><operator pos:start="937:87" pos:end="937:87">)</operator> <operator pos:start="937:89" pos:end="937:89">&lt;</operator> <literal type="number" pos:start="937:91" pos:end="937:91">0</literal></expr>)</condition><block type="pseudo" pos:start="939:45" pos:end="939:50"><block_content pos:start="939:45" pos:end="939:50">

                                            <break pos:start="939:45" pos:end="939:50">break;</break></block_content></block></if></if_stmt>

                                        <if_stmt pos:start="941:41" pos:end="945:80"><if pos:start="941:41" pos:end="945:80">if <condition pos:start="941:44" pos:end="941:48">(<expr pos:start="941:45" pos:end="941:47"><name pos:start="941:45" pos:end="941:47">num</name></expr>)</condition><block type="pseudo" pos:start="943:45" pos:end="945:80"><block_content pos:start="943:45" pos:end="945:80">

                                            <expr_stmt pos:start="943:45" pos:end="945:80"><expr pos:start="943:45" pos:end="945:79"><call pos:start="943:45" pos:end="945:79"><name pos:start="943:45" pos:end="943:50">av_log</name><argument_list pos:start="943:51" pos:end="945:79">(<argument pos:start="943:52" pos:end="943:64"><expr pos:start="943:52" pos:end="943:64"><name pos:start="943:52" pos:end="943:64"><name pos:start="943:52" pos:end="943:59">matroska</name><operator pos:start="943:60" pos:end="943:61">-&gt;</operator><name pos:start="943:62" pos:end="943:64">ctx</name></name></expr></argument>, <argument pos:start="943:67" pos:end="943:78"><expr pos:start="943:67" pos:end="943:78"><name pos:start="943:67" pos:end="943:78">AV_LOG_ERROR</name></expr></argument>,

                                                   <argument pos:start="945:52" pos:end="945:78"><expr pos:start="945:52" pos:end="945:78"><literal type="string" pos:start="945:52" pos:end="945:78">"Unsupported encoding type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                                        <break pos:start="947:41" pos:end="947:46">break;</break>

                                    </block_content>}</block>



                                    <case pos:start="953:37" pos:end="953:73">case <expr pos:start="953:42" pos:end="953:72"><name pos:start="953:42" pos:end="953:72">MATROSKA_ID_ENCODINGCOMPRESSION</name></expr>:</case> <block pos:start="953:75" pos:end="1071:37">{<block_content pos:start="955:41" pos:end="1069:46">

                                        <if_stmt pos:start="955:41" pos:end="957:50"><if pos:start="955:41" pos:end="957:50">if <condition pos:start="955:44" pos:end="955:88">(<expr pos:start="955:45" pos:end="955:87"><operator pos:start="955:45" pos:end="955:45">(</operator><name pos:start="955:46" pos:end="955:48">res</name> <operator pos:start="955:50" pos:end="955:50">=</operator> <call pos:start="955:52" pos:end="955:82"><name pos:start="955:52" pos:end="955:67">ebml_read_master</name><argument_list pos:start="955:68" pos:end="955:82">(<argument pos:start="955:69" pos:end="955:76"><expr pos:start="955:69" pos:end="955:76"><name pos:start="955:69" pos:end="955:76">matroska</name></expr></argument>, <argument pos:start="955:79" pos:end="955:81"><expr pos:start="955:79" pos:end="955:81"><operator pos:start="955:79" pos:end="955:79">&amp;</operator><name pos:start="955:80" pos:end="955:81">id</name></expr></argument>)</argument_list></call><operator pos:start="955:83" pos:end="955:83">)</operator> <operator pos:start="955:85" pos:end="955:85">&lt;</operator> <literal type="number" pos:start="955:87" pos:end="955:87">0</literal></expr>)</condition><block type="pseudo" pos:start="957:45" pos:end="957:50"><block_content pos:start="957:45" pos:end="957:50">

                                            <break pos:start="957:45" pos:end="957:50">break;</break></block_content></block></if></if_stmt>



                                        <while pos:start="961:41" pos:end="1067:41">while <condition pos:start="961:47" pos:end="961:56">(<expr pos:start="961:48" pos:end="961:55"><name pos:start="961:48" pos:end="961:50">res</name> <operator pos:start="961:52" pos:end="961:53">==</operator> <literal type="number" pos:start="961:55" pos:end="961:55">0</literal></expr>)</condition> <block pos:start="961:58" pos:end="1067:41">{<block_content pos:start="963:45" pos:end="1065:45">

                                            <if_stmt pos:start="963:45" pos:end="975:45"><if pos:start="963:45" pos:end="969:45">if <condition pos:start="963:48" pos:end="963:100">(<expr pos:start="963:49" pos:end="963:99"><operator pos:start="963:49" pos:end="963:49">!</operator><operator pos:start="963:50" pos:end="963:50">(</operator><name pos:start="963:51" pos:end="963:52">id</name> <operator pos:start="963:54" pos:end="963:54">=</operator> <call pos:start="963:56" pos:end="963:98"><name pos:start="963:56" pos:end="963:67">ebml_peek_id</name><argument_list pos:start="963:68" pos:end="963:98">(<argument pos:start="963:69" pos:end="963:76"><expr pos:start="963:69" pos:end="963:76"><name pos:start="963:69" pos:end="963:76">matroska</name></expr></argument>, <argument pos:start="963:79" pos:end="963:97"><expr pos:start="963:79" pos:end="963:97"><operator pos:start="963:79" pos:end="963:79">&amp;</operator><name pos:start="963:80" pos:end="963:97"><name pos:start="963:80" pos:end="963:87">matroska</name><operator pos:start="963:88" pos:end="963:89">-&gt;</operator><name pos:start="963:90" pos:end="963:97">level_up</name></name></expr></argument>)</argument_list></call><operator pos:start="963:99" pos:end="963:99">)</operator></expr>)</condition> <block pos:start="963:102" pos:end="969:45">{<block_content pos:start="965:49" pos:end="967:54">

                                                <expr_stmt pos:start="965:49" pos:end="965:67"><expr pos:start="965:49" pos:end="965:66"><name pos:start="965:49" pos:end="965:51">res</name> <operator pos:start="965:53" pos:end="965:53">=</operator> <call pos:start="965:55" pos:end="965:66"><name pos:start="965:55" pos:end="965:61">AVERROR</name><argument_list pos:start="965:62" pos:end="965:66">(<argument pos:start="965:63" pos:end="965:65"><expr pos:start="965:63" pos:end="965:65"><name pos:start="965:63" pos:end="965:65">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                                <break pos:start="967:49" pos:end="967:54">break;</break>

                                            </block_content>}</block></if> <if type="elseif" pos:start="969:47" pos:end="975:45">else if <condition pos:start="969:55" pos:end="969:78">(<expr pos:start="969:56" pos:end="969:77"><name pos:start="969:56" pos:end="969:73"><name pos:start="969:56" pos:end="969:63">matroska</name><operator pos:start="969:64" pos:end="969:65">-&gt;</operator><name pos:start="969:66" pos:end="969:73">level_up</name></name> <operator pos:start="969:75" pos:end="969:75">&gt;</operator> <literal type="number" pos:start="969:77" pos:end="969:77">0</literal></expr>)</condition> <block pos:start="969:80" pos:end="975:45">{<block_content pos:start="971:49" pos:end="973:54">

                                                <expr_stmt pos:start="971:49" pos:end="971:69"><expr pos:start="971:49" pos:end="971:68"><name pos:start="971:49" pos:end="971:66"><name pos:start="971:49" pos:end="971:56">matroska</name><operator pos:start="971:57" pos:end="971:58">-&gt;</operator><name pos:start="971:59" pos:end="971:66">level_up</name></name><operator pos:start="971:67" pos:end="971:68">--</operator></expr>;</expr_stmt>

                                                <break pos:start="973:49" pos:end="973:54">break;</break>

                                            </block_content>}</block></if></if_stmt>



                                            <switch pos:start="979:45" pos:end="1055:45">switch <condition pos:start="979:52" pos:end="979:55">(<expr pos:start="979:53" pos:end="979:54"><name pos:start="979:53" pos:end="979:54">id</name></expr>)</condition> <block pos:start="979:57" pos:end="1055:45">{<block_content pos:start="981:49" pos:end="1053:58">

                                                <case pos:start="981:49" pos:end="981:82">case <expr pos:start="981:54" pos:end="981:81"><name pos:start="981:54" pos:end="981:81">MATROSKA_ID_ENCODINGCOMPALGO</name></expr>:</case> <block pos:start="981:84" pos:end="1013:49">{<block_content pos:start="983:53" pos:end="1011:58">

                                                    <decl_stmt pos:start="983:53" pos:end="983:65"><decl pos:start="983:53" pos:end="983:64"><type pos:start="983:53" pos:end="983:60"><name pos:start="983:53" pos:end="983:60">uint64_t</name></type> <name pos:start="983:62" pos:end="983:64">num</name></decl>;</decl_stmt>

                                                    <if_stmt pos:start="985:53" pos:end="987:62"><if pos:start="985:53" pos:end="987:62">if <condition pos:start="985:56" pos:end="985:104">(<expr pos:start="985:57" pos:end="985:103"><operator pos:start="985:57" pos:end="985:57">(</operator><name pos:start="985:58" pos:end="985:60">res</name> <operator pos:start="985:62" pos:end="985:62">=</operator> <call pos:start="985:64" pos:end="985:98"><name pos:start="985:64" pos:end="985:77">ebml_read_uint</name><argument_list pos:start="985:78" pos:end="985:98">(<argument pos:start="985:79" pos:end="985:86"><expr pos:start="985:79" pos:end="985:86"><name pos:start="985:79" pos:end="985:86">matroska</name></expr></argument>, <argument pos:start="985:89" pos:end="985:91"><expr pos:start="985:89" pos:end="985:91"><operator pos:start="985:89" pos:end="985:89">&amp;</operator><name pos:start="985:90" pos:end="985:91">id</name></expr></argument>, <argument pos:start="985:94" pos:end="985:97"><expr pos:start="985:94" pos:end="985:97"><operator pos:start="985:94" pos:end="985:94">&amp;</operator><name pos:start="985:95" pos:end="985:97">num</name></expr></argument>)</argument_list></call><operator pos:start="985:99" pos:end="985:99">)</operator> <operator pos:start="985:101" pos:end="985:101">&lt;</operator> <literal type="number" pos:start="985:103" pos:end="985:103">0</literal></expr>)</condition><block type="pseudo" pos:start="987:57" pos:end="987:62"><block_content pos:start="987:57" pos:end="987:62">

                                                        <break pos:start="987:57" pos:end="987:62">break;</break></block_content></block></if></if_stmt>

                                                    <if_stmt pos:start="989:53" pos:end="1007:97"><if pos:start="989:53" pos:end="1007:97">if <condition pos:start="989:56" pos:end="1003:96">(<expr pos:start="989:57" pos:end="1003:95"><name pos:start="989:57" pos:end="989:59">num</name> <operator pos:start="989:61" pos:end="989:62">!=</operator> <name pos:start="989:64" pos:end="989:103">MATROSKA_TRACK_ENCODING_COMP_HEADERSTRIP</name> <operator pos:start="989:105" pos:end="992:0">&amp;&amp;</operator>

<cpp:ifdef pos:start="991:1" pos:end="991:18">#<cpp:directive pos:start="991:2" pos:end="991:6">ifdef</cpp:directive> <name pos:start="991:8" pos:end="991:18">CONFIG_ZLIB</name></cpp:ifdef>

                                                        <name pos:start="993:57" pos:end="993:59">num</name> <operator pos:start="993:61" pos:end="993:62">!=</operator> <name pos:start="993:64" pos:end="993:96">MATROSKA_TRACK_ENCODING_COMP_ZLIB</name> <operator pos:start="993:98" pos:end="998:0">&amp;&amp;</operator>

<cpp:endif pos:start="995:1" pos:end="995:6">#<cpp:directive pos:start="995:2" pos:end="995:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="997:1" pos:end="997:19">#<cpp:directive pos:start="997:2" pos:end="997:6">ifdef</cpp:directive> <name pos:start="997:8" pos:end="997:19">CONFIG_BZLIB</name></cpp:ifdef>

                                                        <name pos:start="999:57" pos:end="999:59">num</name> <operator pos:start="999:61" pos:end="999:62">!=</operator> <name pos:start="999:64" pos:end="999:97">MATROSKA_TRACK_ENCODING_COMP_BZLIB</name> <operator pos:start="999:99" pos:end="1002:0">&amp;&amp;</operator>

<cpp:endif pos:start="1001:1" pos:end="1001:6">#<cpp:directive pos:start="1001:2" pos:end="1001:6">endif</cpp:directive></cpp:endif>

                                                        <name pos:start="1003:57" pos:end="1003:59">num</name> <operator pos:start="1003:61" pos:end="1003:62">!=</operator> <name pos:start="1003:64" pos:end="1003:95">MATROSKA_TRACK_ENCODING_COMP_LZO</name></expr>)</condition><block type="pseudo" pos:start="1005:57" pos:end="1007:97"><block_content pos:start="1005:57" pos:end="1007:97">

                                                        <expr_stmt pos:start="1005:57" pos:end="1007:97"><expr pos:start="1005:57" pos:end="1007:96"><call pos:start="1005:57" pos:end="1007:96"><name pos:start="1005:57" pos:end="1005:62">av_log</name><argument_list pos:start="1005:63" pos:end="1007:96">(<argument pos:start="1005:64" pos:end="1005:76"><expr pos:start="1005:64" pos:end="1005:76"><name pos:start="1005:64" pos:end="1005:76"><name pos:start="1005:64" pos:end="1005:71">matroska</name><operator pos:start="1005:72" pos:end="1005:73">-&gt;</operator><name pos:start="1005:74" pos:end="1005:76">ctx</name></name></expr></argument>, <argument pos:start="1005:79" pos:end="1005:90"><expr pos:start="1005:79" pos:end="1005:90"><name pos:start="1005:79" pos:end="1005:90">AV_LOG_ERROR</name></expr></argument>,

                                                               <argument pos:start="1007:64" pos:end="1007:95"><expr pos:start="1007:64" pos:end="1007:95"><literal type="string" pos:start="1007:64" pos:end="1007:95">"Unsupported compression algo\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                                                    <expr_stmt pos:start="1009:53" pos:end="1009:79"><expr pos:start="1009:53" pos:end="1009:78"><name pos:start="1009:53" pos:end="1009:72"><name pos:start="1009:53" pos:end="1009:57">track</name><operator pos:start="1009:58" pos:end="1009:59">-&gt;</operator><name pos:start="1009:60" pos:end="1009:72">encoding_algo</name></name> <operator pos:start="1009:74" pos:end="1009:74">=</operator> <name pos:start="1009:76" pos:end="1009:78">num</name></expr>;</expr_stmt>

                                                    <break pos:start="1011:53" pos:end="1011:58">break;</break>

                                                </block_content>}</block>



                                                <case pos:start="1017:49" pos:end="1017:86">case <expr pos:start="1017:54" pos:end="1017:85"><name pos:start="1017:54" pos:end="1017:85">MATROSKA_ID_ENCODINGCOMPSETTINGS</name></expr>:</case> <block pos:start="1017:88" pos:end="1033:49">{<block_content pos:start="1019:53" pos:end="1031:58">

                                                    <decl_stmt pos:start="1019:53" pos:end="1019:66"><decl pos:start="1019:53" pos:end="1019:65"><type pos:start="1019:53" pos:end="1019:61"><name pos:start="1019:53" pos:end="1019:59">uint8_t</name> <modifier pos:start="1019:61" pos:end="1019:61">*</modifier></type><name pos:start="1019:62" pos:end="1019:65">data</name></decl>;</decl_stmt>

                                                    <decl_stmt pos:start="1021:53" pos:end="1021:61"><decl pos:start="1021:53" pos:end="1021:60"><type pos:start="1021:53" pos:end="1021:55"><name pos:start="1021:53" pos:end="1021:55">int</name></type> <name pos:start="1021:57" pos:end="1021:60">size</name></decl>;</decl_stmt>

                                                    <if_stmt pos:start="1023:53" pos:end="1025:62"><if pos:start="1023:53" pos:end="1025:62">if <condition pos:start="1023:56" pos:end="1023:114">(<expr pos:start="1023:57" pos:end="1023:113"><operator pos:start="1023:57" pos:end="1023:57">(</operator><name pos:start="1023:58" pos:end="1023:60">res</name> <operator pos:start="1023:62" pos:end="1023:62">=</operator> <call pos:start="1023:64" pos:end="1023:108"><name pos:start="1023:64" pos:end="1023:79">ebml_read_binary</name><argument_list pos:start="1023:80" pos:end="1023:108">(<argument pos:start="1023:81" pos:end="1023:88"><expr pos:start="1023:81" pos:end="1023:88"><name pos:start="1023:81" pos:end="1023:88">matroska</name></expr></argument>, <argument pos:start="1023:91" pos:end="1023:93"><expr pos:start="1023:91" pos:end="1023:93"><operator pos:start="1023:91" pos:end="1023:91">&amp;</operator><name pos:start="1023:92" pos:end="1023:93">id</name></expr></argument>, <argument pos:start="1023:96" pos:end="1023:100"><expr pos:start="1023:96" pos:end="1023:100"><operator pos:start="1023:96" pos:end="1023:96">&amp;</operator><name pos:start="1023:97" pos:end="1023:100">data</name></expr></argument>, <argument pos:start="1023:103" pos:end="1023:107"><expr pos:start="1023:103" pos:end="1023:107"><operator pos:start="1023:103" pos:end="1023:103">&amp;</operator><name pos:start="1023:104" pos:end="1023:107">size</name></expr></argument>)</argument_list></call> <operator pos:start="1023:110" pos:end="1023:110">&lt;</operator> <literal type="number" pos:start="1023:112" pos:end="1023:112">0</literal><operator pos:start="1023:113" pos:end="1023:113">)</operator></expr>)</condition><block type="pseudo" pos:start="1025:57" pos:end="1025:62"><block_content pos:start="1025:57" pos:end="1025:62">

                                                        <break pos:start="1025:57" pos:end="1025:62">break;</break></block_content></block></if></if_stmt>

                                                    <expr_stmt pos:start="1027:53" pos:end="1027:84"><expr pos:start="1027:53" pos:end="1027:83"><name pos:start="1027:53" pos:end="1027:76"><name pos:start="1027:53" pos:end="1027:57">track</name><operator pos:start="1027:58" pos:end="1027:59">-&gt;</operator><name pos:start="1027:60" pos:end="1027:76">encoding_settings</name></name> <operator pos:start="1027:78" pos:end="1027:78">=</operator> <name pos:start="1027:80" pos:end="1027:83">data</name></expr>;</expr_stmt>

                                                    <expr_stmt pos:start="1029:53" pos:end="1029:88"><expr pos:start="1029:53" pos:end="1029:87"><name pos:start="1029:53" pos:end="1029:80"><name pos:start="1029:53" pos:end="1029:57">track</name><operator pos:start="1029:58" pos:end="1029:59">-&gt;</operator><name pos:start="1029:60" pos:end="1029:80">encoding_settings_len</name></name> <operator pos:start="1029:82" pos:end="1029:82">=</operator> <name pos:start="1029:84" pos:end="1029:87">size</name></expr>;</expr_stmt>

                                                    <break pos:start="1031:53" pos:end="1031:58">break;</break>

                                                </block_content>}</block>



                                                <default pos:start="1037:49" pos:end="1037:56">default:</default>

                                                    <expr_stmt pos:start="1039:53" pos:end="1043:84"><expr pos:start="1039:53" pos:end="1043:83"><call pos:start="1039:53" pos:end="1043:83"><name pos:start="1039:53" pos:end="1039:58">av_log</name><argument_list pos:start="1039:59" pos:end="1043:83">(<argument pos:start="1039:60" pos:end="1039:72"><expr pos:start="1039:60" pos:end="1039:72"><name pos:start="1039:60" pos:end="1039:72"><name pos:start="1039:60" pos:end="1039:67">matroska</name><operator pos:start="1039:68" pos:end="1039:69">-&gt;</operator><name pos:start="1039:70" pos:end="1039:72">ctx</name></name></expr></argument>, <argument pos:start="1039:75" pos:end="1039:85"><expr pos:start="1039:75" pos:end="1039:85"><name pos:start="1039:75" pos:end="1039:85">AV_LOG_INFO</name></expr></argument>,

                                                           <argument pos:start="1041:60" pos:end="1043:78"><expr pos:start="1041:60" pos:end="1043:78"><literal type="string" pos:start="1041:60" pos:end="1041:94">"Unknown compression header entry "</literal>

                                                           <literal type="string" pos:start="1043:60" pos:end="1043:78">"0x%x - ignoring\n"</literal></expr></argument>, <argument pos:start="1043:81" pos:end="1043:82"><expr pos:start="1043:81" pos:end="1043:82"><name pos:start="1043:81" pos:end="1043:82">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                                    <comment type="block" pos:start="1045:53" pos:end="1045:70">/* pass-through */</comment>



                                                <case pos:start="1049:49" pos:end="1049:66">case <expr pos:start="1049:54" pos:end="1049:65"><name pos:start="1049:54" pos:end="1049:65">EBML_ID_VOID</name></expr>:</case>

                                                    <expr_stmt pos:start="1051:53" pos:end="1051:83"><expr pos:start="1051:53" pos:end="1051:82"><name pos:start="1051:53" pos:end="1051:55">res</name> <operator pos:start="1051:57" pos:end="1051:57">=</operator> <call pos:start="1051:59" pos:end="1051:82"><name pos:start="1051:59" pos:end="1051:72">ebml_read_skip</name><argument_list pos:start="1051:73" pos:end="1051:82">(<argument pos:start="1051:74" pos:end="1051:81"><expr pos:start="1051:74" pos:end="1051:81"><name pos:start="1051:74" pos:end="1051:81">matroska</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                                    <break pos:start="1053:53" pos:end="1053:58">break;</break>

                                            </block_content>}</block></switch>



                                            <if_stmt pos:start="1059:45" pos:end="1065:45"><if pos:start="1059:45" pos:end="1065:45">if <condition pos:start="1059:48" pos:end="1059:67">(<expr pos:start="1059:49" pos:end="1059:66"><name pos:start="1059:49" pos:end="1059:66"><name pos:start="1059:49" pos:end="1059:56">matroska</name><operator pos:start="1059:57" pos:end="1059:58">-&gt;</operator><name pos:start="1059:59" pos:end="1059:66">level_up</name></name></expr>)</condition> <block pos:start="1059:69" pos:end="1065:45">{<block_content pos:start="1061:49" pos:end="1063:54">

                                                <expr_stmt pos:start="1061:49" pos:end="1061:69"><expr pos:start="1061:49" pos:end="1061:68"><name pos:start="1061:49" pos:end="1061:66"><name pos:start="1061:49" pos:end="1061:56">matroska</name><operator pos:start="1061:57" pos:end="1061:58">-&gt;</operator><name pos:start="1061:59" pos:end="1061:66">level_up</name></name><operator pos:start="1061:67" pos:end="1061:68">--</operator></expr>;</expr_stmt>

                                                <break pos:start="1063:49" pos:end="1063:54">break;</break>

                                            </block_content>}</block></if></if_stmt>

                                        </block_content>}</block></while>

                                        <break pos:start="1069:41" pos:end="1069:46">break;</break>

                                    </block_content>}</block>



                                    <default pos:start="1075:37" pos:end="1075:44">default:</default>

                                        <expr_stmt pos:start="1077:41" pos:end="1081:72"><expr pos:start="1077:41" pos:end="1081:71"><call pos:start="1077:41" pos:end="1081:71"><name pos:start="1077:41" pos:end="1077:46">av_log</name><argument_list pos:start="1077:47" pos:end="1081:71">(<argument pos:start="1077:48" pos:end="1077:60"><expr pos:start="1077:48" pos:end="1077:60"><name pos:start="1077:48" pos:end="1077:60"><name pos:start="1077:48" pos:end="1077:55">matroska</name><operator pos:start="1077:56" pos:end="1077:57">-&gt;</operator><name pos:start="1077:58" pos:end="1077:60">ctx</name></name></expr></argument>, <argument pos:start="1077:63" pos:end="1077:73"><expr pos:start="1077:63" pos:end="1077:73"><name pos:start="1077:63" pos:end="1077:73">AV_LOG_INFO</name></expr></argument>,

                                               <argument pos:start="1079:48" pos:end="1081:66"><expr pos:start="1079:48" pos:end="1081:66"><literal type="string" pos:start="1079:48" pos:end="1079:87">"Unknown content encoding header entry "</literal>

                                               <literal type="string" pos:start="1081:48" pos:end="1081:66">"0x%x - ignoring\n"</literal></expr></argument>, <argument pos:start="1081:69" pos:end="1081:70"><expr pos:start="1081:69" pos:end="1081:70"><name pos:start="1081:69" pos:end="1081:70">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                        <comment type="block" pos:start="1083:41" pos:end="1083:58">/* pass-through */</comment>



                                    <case pos:start="1087:37" pos:end="1087:54">case <expr pos:start="1087:42" pos:end="1087:53"><name pos:start="1087:42" pos:end="1087:53">EBML_ID_VOID</name></expr>:</case>

                                        <expr_stmt pos:start="1089:41" pos:end="1089:71"><expr pos:start="1089:41" pos:end="1089:70"><name pos:start="1089:41" pos:end="1089:43">res</name> <operator pos:start="1089:45" pos:end="1089:45">=</operator> <call pos:start="1089:47" pos:end="1089:70"><name pos:start="1089:47" pos:end="1089:60">ebml_read_skip</name><argument_list pos:start="1089:61" pos:end="1089:70">(<argument pos:start="1089:62" pos:end="1089:69"><expr pos:start="1089:62" pos:end="1089:69"><name pos:start="1089:62" pos:end="1089:69">matroska</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                        <break pos:start="1091:41" pos:end="1091:46">break;</break>

                                </block_content>}</block></switch>



                                <if_stmt pos:start="1097:33" pos:end="1103:33"><if pos:start="1097:33" pos:end="1103:33">if <condition pos:start="1097:36" pos:end="1097:55">(<expr pos:start="1097:37" pos:end="1097:54"><name pos:start="1097:37" pos:end="1097:54"><name pos:start="1097:37" pos:end="1097:44">matroska</name><operator pos:start="1097:45" pos:end="1097:46">-&gt;</operator><name pos:start="1097:47" pos:end="1097:54">level_up</name></name></expr>)</condition> <block pos:start="1097:57" pos:end="1103:33">{<block_content pos:start="1099:37" pos:end="1101:42">

                                    <expr_stmt pos:start="1099:37" pos:end="1099:57"><expr pos:start="1099:37" pos:end="1099:56"><name pos:start="1099:37" pos:end="1099:54"><name pos:start="1099:37" pos:end="1099:44">matroska</name><operator pos:start="1099:45" pos:end="1099:46">-&gt;</operator><name pos:start="1099:47" pos:end="1099:54">level_up</name></name><operator pos:start="1099:55" pos:end="1099:56">--</operator></expr>;</expr_stmt>

                                    <break pos:start="1101:37" pos:end="1101:42">break;</break>

                                </block_content>}</block></if></if_stmt>

                            </block_content>}</block></while>



                            <expr_stmt pos:start="1109:29" pos:end="1109:67"><expr pos:start="1109:29" pos:end="1109:66"><name pos:start="1109:29" pos:end="1109:49"><name pos:start="1109:29" pos:end="1109:33">track</name><operator pos:start="1109:34" pos:end="1109:35">-&gt;</operator><name pos:start="1109:36" pos:end="1109:49">encoding_scope</name></name> <operator pos:start="1109:51" pos:end="1109:51">=</operator> <name pos:start="1109:53" pos:end="1109:66">encoding_scope</name></expr>;</expr_stmt>

                            <break pos:start="1111:29" pos:end="1111:34">break;</break>

                        </block_content>}</block>



                        <default pos:start="1117:25" pos:end="1117:32">default:</default>

                            <expr_stmt pos:start="1119:29" pos:end="1123:60"><expr pos:start="1119:29" pos:end="1123:59"><call pos:start="1119:29" pos:end="1123:59"><name pos:start="1119:29" pos:end="1119:34">av_log</name><argument_list pos:start="1119:35" pos:end="1123:59">(<argument pos:start="1119:36" pos:end="1119:48"><expr pos:start="1119:36" pos:end="1119:48"><name pos:start="1119:36" pos:end="1119:48"><name pos:start="1119:36" pos:end="1119:43">matroska</name><operator pos:start="1119:44" pos:end="1119:45">-&gt;</operator><name pos:start="1119:46" pos:end="1119:48">ctx</name></name></expr></argument>, <argument pos:start="1119:51" pos:end="1119:61"><expr pos:start="1119:51" pos:end="1119:61"><name pos:start="1119:51" pos:end="1119:61">AV_LOG_INFO</name></expr></argument>,

                                   <argument pos:start="1121:36" pos:end="1123:54"><expr pos:start="1121:36" pos:end="1123:54"><literal type="string" pos:start="1121:36" pos:end="1121:76">"Unknown content encodings header entry "</literal>

                                   <literal type="string" pos:start="1123:36" pos:end="1123:54">"0x%x - ignoring\n"</literal></expr></argument>, <argument pos:start="1123:57" pos:end="1123:58"><expr pos:start="1123:57" pos:end="1123:58"><name pos:start="1123:57" pos:end="1123:58">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <comment type="block" pos:start="1125:29" pos:end="1125:46">/* pass-through */</comment>



                        <case pos:start="1129:25" pos:end="1129:42">case <expr pos:start="1129:30" pos:end="1129:41"><name pos:start="1129:30" pos:end="1129:41">EBML_ID_VOID</name></expr>:</case>

                            <expr_stmt pos:start="1131:29" pos:end="1131:59"><expr pos:start="1131:29" pos:end="1131:58"><name pos:start="1131:29" pos:end="1131:31">res</name> <operator pos:start="1131:33" pos:end="1131:33">=</operator> <call pos:start="1131:35" pos:end="1131:58"><name pos:start="1131:35" pos:end="1131:48">ebml_read_skip</name><argument_list pos:start="1131:49" pos:end="1131:58">(<argument pos:start="1131:50" pos:end="1131:57"><expr pos:start="1131:50" pos:end="1131:57"><name pos:start="1131:50" pos:end="1131:57">matroska</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1133:29" pos:end="1133:34">break;</break>

                    </block_content>}</block></switch>



                    <if_stmt pos:start="1139:21" pos:end="1145:21"><if pos:start="1139:21" pos:end="1145:21">if <condition pos:start="1139:24" pos:end="1139:43">(<expr pos:start="1139:25" pos:end="1139:42"><name pos:start="1139:25" pos:end="1139:42"><name pos:start="1139:25" pos:end="1139:32">matroska</name><operator pos:start="1139:33" pos:end="1139:34">-&gt;</operator><name pos:start="1139:35" pos:end="1139:42">level_up</name></name></expr>)</condition> <block pos:start="1139:45" pos:end="1145:21">{<block_content pos:start="1141:25" pos:end="1143:30">

                        <expr_stmt pos:start="1141:25" pos:end="1141:45"><expr pos:start="1141:25" pos:end="1141:44"><name pos:start="1141:25" pos:end="1141:42"><name pos:start="1141:25" pos:end="1141:32">matroska</name><operator pos:start="1141:33" pos:end="1141:34">-&gt;</operator><name pos:start="1141:35" pos:end="1141:42">level_up</name></name><operator pos:start="1141:43" pos:end="1141:44">--</operator></expr>;</expr_stmt>

                        <break pos:start="1143:25" pos:end="1143:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></while>

                <break pos:start="1149:17" pos:end="1149:22">break;</break>

            </block_content>}</block>



            <case pos:start="1155:13" pos:end="1155:48">case <expr pos:start="1155:18" pos:end="1155:47"><name pos:start="1155:18" pos:end="1155:47">MATROSKA_ID_TRACKTIMECODESCALE</name></expr>:</case> <block pos:start="1155:50" pos:end="1167:13">{<block_content pos:start="1157:17" pos:end="1165:22">

                <decl_stmt pos:start="1157:17" pos:end="1157:27"><decl pos:start="1157:17" pos:end="1157:26"><type pos:start="1157:17" pos:end="1157:22"><name pos:start="1157:17" pos:end="1157:22">double</name></type> <name pos:start="1157:24" pos:end="1157:26">num</name></decl>;</decl_stmt>

                <if_stmt pos:start="1159:17" pos:end="1161:26"><if pos:start="1159:17" pos:end="1161:26">if <condition pos:start="1159:20" pos:end="1159:69">(<expr pos:start="1159:21" pos:end="1159:68"><operator pos:start="1159:21" pos:end="1159:21">(</operator><name pos:start="1159:22" pos:end="1159:24">res</name> <operator pos:start="1159:26" pos:end="1159:26">=</operator> <call pos:start="1159:28" pos:end="1159:63"><name pos:start="1159:28" pos:end="1159:42">ebml_read_float</name><argument_list pos:start="1159:43" pos:end="1159:63">(<argument pos:start="1159:44" pos:end="1159:51"><expr pos:start="1159:44" pos:end="1159:51"><name pos:start="1159:44" pos:end="1159:51">matroska</name></expr></argument>, <argument pos:start="1159:54" pos:end="1159:56"><expr pos:start="1159:54" pos:end="1159:56"><operator pos:start="1159:54" pos:end="1159:54">&amp;</operator><name pos:start="1159:55" pos:end="1159:56">id</name></expr></argument>, <argument pos:start="1159:59" pos:end="1159:62"><expr pos:start="1159:59" pos:end="1159:62"><operator pos:start="1159:59" pos:end="1159:59">&amp;</operator><name pos:start="1159:60" pos:end="1159:62">num</name></expr></argument>)</argument_list></call><operator pos:start="1159:64" pos:end="1159:64">)</operator> <operator pos:start="1159:66" pos:end="1159:66">&lt;</operator> <literal type="number" pos:start="1159:68" pos:end="1159:68">0</literal></expr>)</condition><block type="pseudo" pos:start="1161:21" pos:end="1161:26"><block_content pos:start="1161:21" pos:end="1161:26">

                    <break pos:start="1161:21" pos:end="1161:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1163:17" pos:end="1163:40"><expr pos:start="1163:17" pos:end="1163:39"><name pos:start="1163:17" pos:end="1163:33"><name pos:start="1163:17" pos:end="1163:21">track</name><operator pos:start="1163:22" pos:end="1163:23">-&gt;</operator><name pos:start="1163:24" pos:end="1163:33">time_scale</name></name> <operator pos:start="1163:35" pos:end="1163:35">=</operator> <name pos:start="1163:37" pos:end="1163:39">num</name></expr>;</expr_stmt>

                <break pos:start="1165:17" pos:end="1165:22">break;</break>

            </block_content>}</block>



            <default pos:start="1171:13" pos:end="1171:20">default:</default>

                <expr_stmt pos:start="1173:17" pos:end="1175:75"><expr pos:start="1173:17" pos:end="1175:74"><call pos:start="1173:17" pos:end="1175:74"><name pos:start="1173:17" pos:end="1173:22">av_log</name><argument_list pos:start="1173:23" pos:end="1175:74">(<argument pos:start="1173:24" pos:end="1173:36"><expr pos:start="1173:24" pos:end="1173:36"><name pos:start="1173:24" pos:end="1173:36"><name pos:start="1173:24" pos:end="1173:31">matroska</name><operator pos:start="1173:32" pos:end="1173:33">-&gt;</operator><name pos:start="1173:34" pos:end="1173:36">ctx</name></name></expr></argument>, <argument pos:start="1173:39" pos:end="1173:49"><expr pos:start="1173:39" pos:end="1173:49"><name pos:start="1173:39" pos:end="1173:49">AV_LOG_INFO</name></expr></argument>,

                       <argument pos:start="1175:24" pos:end="1175:69"><expr pos:start="1175:24" pos:end="1175:69"><literal type="string" pos:start="1175:24" pos:end="1175:69">"Unknown track header entry 0x%x - ignoring\n"</literal></expr></argument>, <argument pos:start="1175:72" pos:end="1175:73"><expr pos:start="1175:72" pos:end="1175:73"><name pos:start="1175:72" pos:end="1175:73">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1177:17" pos:end="1177:34">/* pass-through */</comment>



            <case pos:start="1181:13" pos:end="1181:30">case <expr pos:start="1181:18" pos:end="1181:29"><name pos:start="1181:18" pos:end="1181:29">EBML_ID_VOID</name></expr>:</case>

            <comment type="block" pos:start="1183:13" pos:end="1183:65">/* we ignore these because they're nothing useful. */</comment>

            <case pos:start="1185:13" pos:end="1185:45">case <expr pos:start="1185:18" pos:end="1185:44"><name pos:start="1185:18" pos:end="1185:44">MATROSKA_ID_TRACKFLAGFORCED</name></expr>:</case>

            <case pos:start="1187:13" pos:end="1187:44">case <expr pos:start="1187:18" pos:end="1187:43"><name pos:start="1187:18" pos:end="1187:43">MATROSKA_ID_CODECDECODEALL</name></expr>:</case>

            <case pos:start="1189:13" pos:end="1189:42">case <expr pos:start="1189:18" pos:end="1189:41"><name pos:start="1189:18" pos:end="1189:41">MATROSKA_ID_CODECINFOURL</name></expr>:</case>

            <case pos:start="1191:13" pos:end="1191:46">case <expr pos:start="1191:18" pos:end="1191:45"><name pos:start="1191:18" pos:end="1191:45">MATROSKA_ID_CODECDOWNLOADURL</name></expr>:</case>

            <case pos:start="1193:13" pos:end="1193:43">case <expr pos:start="1193:18" pos:end="1193:42"><name pos:start="1193:18" pos:end="1193:42">MATROSKA_ID_TRACKMINCACHE</name></expr>:</case>

            <case pos:start="1195:13" pos:end="1195:43">case <expr pos:start="1195:18" pos:end="1195:42"><name pos:start="1195:18" pos:end="1195:42">MATROSKA_ID_TRACKMAXCACHE</name></expr>:</case>

                <expr_stmt pos:start="1197:17" pos:end="1197:47"><expr pos:start="1197:17" pos:end="1197:46"><name pos:start="1197:17" pos:end="1197:19">res</name> <operator pos:start="1197:21" pos:end="1197:21">=</operator> <call pos:start="1197:23" pos:end="1197:46"><name pos:start="1197:23" pos:end="1197:36">ebml_read_skip</name><argument_list pos:start="1197:37" pos:end="1197:46">(<argument pos:start="1197:38" pos:end="1197:45"><expr pos:start="1197:38" pos:end="1197:45"><name pos:start="1197:38" pos:end="1197:45">matroska</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1199:17" pos:end="1199:22">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="1205:9" pos:end="1211:9"><if pos:start="1205:9" pos:end="1211:9">if <condition pos:start="1205:12" pos:end="1205:31">(<expr pos:start="1205:13" pos:end="1205:30"><name pos:start="1205:13" pos:end="1205:30"><name pos:start="1205:13" pos:end="1205:20">matroska</name><operator pos:start="1205:21" pos:end="1205:22">-&gt;</operator><name pos:start="1205:23" pos:end="1205:30">level_up</name></name></expr>)</condition> <block pos:start="1205:33" pos:end="1211:9">{<block_content pos:start="1207:13" pos:end="1209:18">

            <expr_stmt pos:start="1207:13" pos:end="1207:33"><expr pos:start="1207:13" pos:end="1207:32"><name pos:start="1207:13" pos:end="1207:30"><name pos:start="1207:13" pos:end="1207:20">matroska</name><operator pos:start="1207:21" pos:end="1207:22">-&gt;</operator><name pos:start="1207:23" pos:end="1207:30">level_up</name></name><operator pos:start="1207:31" pos:end="1207:32">--</operator></expr>;</expr_stmt>

            <break pos:start="1209:13" pos:end="1209:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <return pos:start="1217:5" pos:end="1217:15">return <expr pos:start="1217:12" pos:end="1217:14"><name pos:start="1217:12" pos:end="1217:14">res</name></expr>;</return>

</block_content>}</block>
</unit>
