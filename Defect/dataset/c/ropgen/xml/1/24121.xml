<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24121.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">shix_init</name><parameter_list pos:start="1:22" pos:end="1:44">(<parameter pos:start="1:23" pos:end="1:43"><decl pos:start="1:23" pos:end="1:43"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:34">MachineState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:43">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="85:49">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:25">cpu_model</name> <init pos:start="5:27" pos:end="5:46">= <expr pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:35">machine</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">SuperHCPU</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:18">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:22">SH7750State</name></name> <modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:25">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:47"><decl pos:start="13:5" pos:end="13:46"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:24">sysmem</name> <init pos:start="13:26" pos:end="13:46">= <expr pos:start="13:28" pos:end="13:46"><call pos:start="13:28" pos:end="13:46"><name pos:start="13:28" pos:end="13:44">get_system_memory</name><argument_list pos:start="13:45" pos:end="13:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:46"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:21">rom</name> <init pos:start="15:23" pos:end="15:46">= <expr pos:start="15:25" pos:end="15:46"><call pos:start="15:25" pos:end="15:46"><name pos:start="15:25" pos:end="15:29">g_new</name><argument_list pos:start="15:30" pos:end="15:46">(<argument pos:start="15:31" pos:end="15:42"><expr pos:start="15:31" pos:end="15:42"><name pos:start="15:31" pos:end="15:42">MemoryRegion</name></expr></argument>, <argument pos:start="15:45" pos:end="15:45"><expr pos:start="15:45" pos:end="15:45"><literal type="number" pos:start="15:45" pos:end="15:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:49"><decl pos:start="17:5" pos:end="17:48"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:23">sdram</name> <init pos:start="17:25" pos:end="17:48">= <expr pos:start="17:27" pos:end="17:48"><call pos:start="17:27" pos:end="17:48"><name pos:start="17:27" pos:end="17:31">g_new</name><argument_list pos:start="17:32" pos:end="17:48">(<argument pos:start="17:33" pos:end="17:44"><expr pos:start="17:33" pos:end="17:44"><name pos:start="17:33" pos:end="17:44">MemoryRegion</name></expr></argument>, <argument pos:start="17:47" pos:end="17:47"><expr pos:start="17:47" pos:end="17:47"><literal type="number" pos:start="17:47" pos:end="17:47">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    

    <if_stmt pos:start="21:5" pos:end="23:26"><if pos:start="21:5" pos:end="23:26">if <condition pos:start="21:8" pos:end="21:19">(<expr pos:start="21:9" pos:end="21:18"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:26"><block_content pos:start="23:9" pos:end="23:26">

        <expr_stmt pos:start="23:9" pos:end="23:26"><expr pos:start="23:9" pos:end="23:25"><name pos:start="23:9" pos:end="23:17">cpu_model</name> <operator pos:start="23:19" pos:end="23:19">=</operator> <literal type="string" pos:start="23:21" pos:end="23:25">"any"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:67"><expr pos:start="27:5" pos:end="27:66"><name pos:start="27:5" pos:end="27:7">cpu</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:66"><name pos:start="27:11" pos:end="27:20">SUPERH_CPU</name><argument_list pos:start="27:21" pos:end="27:66">(<argument pos:start="27:22" pos:end="27:65"><expr pos:start="27:22" pos:end="27:65"><call pos:start="27:22" pos:end="27:65"><name pos:start="27:22" pos:end="27:37">cpu_generic_init</name><argument_list pos:start="27:38" pos:end="27:65">(<argument pos:start="27:39" pos:end="27:53"><expr pos:start="27:39" pos:end="27:53"><name pos:start="27:39" pos:end="27:53">TYPE_SUPERH_CPU</name></expr></argument>, <argument pos:start="27:56" pos:end="27:64"><expr pos:start="27:56" pos:end="27:64"><name pos:start="27:56" pos:end="27:64">cpu_model</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:20">(<expr pos:start="29:9" pos:end="29:19"><name pos:start="29:9" pos:end="29:11">cpu</name> <operator pos:start="29:13" pos:end="29:14">==</operator> <name pos:start="29:16" pos:end="29:19">NULL</name></expr>)</condition> <block pos:start="29:22" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:16">

        <expr_stmt pos:start="31:9" pos:end="31:59"><expr pos:start="31:9" pos:end="31:58"><call pos:start="31:9" pos:end="31:58"><name pos:start="31:9" pos:end="31:15">fprintf</name><argument_list pos:start="31:16" pos:end="31:58">(<argument pos:start="31:17" pos:end="31:22"><expr pos:start="31:17" pos:end="31:22"><name pos:start="31:17" pos:end="31:22">stderr</name></expr></argument>, <argument pos:start="31:25" pos:end="31:57"><expr pos:start="31:25" pos:end="31:57"><literal type="string" pos:start="31:25" pos:end="31:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:16"><expr pos:start="33:9" pos:end="33:15"><call pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:12">exit</name><argument_list pos:start="33:13" pos:end="33:15">(<argument pos:start="33:14" pos:end="33:14"><expr pos:start="33:14" pos:end="33:14"><literal type="number" pos:start="33:14" pos:end="33:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:31">/* Allocate memory space */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:72"><expr pos:start="41:5" pos:end="41:71"><call pos:start="41:5" pos:end="41:71"><name pos:start="41:5" pos:end="41:26">memory_region_init_ram</name><argument_list pos:start="41:27" pos:end="41:71">(<argument pos:start="41:28" pos:end="41:30"><expr pos:start="41:28" pos:end="41:30"><name pos:start="41:28" pos:end="41:30">rom</name></expr></argument>, <argument pos:start="41:33" pos:end="41:36"><expr pos:start="41:33" pos:end="41:36"><name pos:start="41:33" pos:end="41:36">NULL</name></expr></argument>, <argument pos:start="41:39" pos:end="41:48"><expr pos:start="41:39" pos:end="41:48"><literal type="string" pos:start="41:39" pos:end="41:48">"shix.rom"</literal></expr></argument>, <argument pos:start="41:51" pos:end="41:56"><expr pos:start="41:51" pos:end="41:56"><literal type="number" pos:start="41:51" pos:end="41:56">0x4000</literal></expr></argument>, <argument pos:start="41:59" pos:end="41:70"><expr pos:start="41:59" pos:end="41:70"><operator pos:start="41:59" pos:end="41:59">&amp;</operator><name pos:start="41:60" pos:end="41:70">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:42"><expr pos:start="43:5" pos:end="43:41"><call pos:start="43:5" pos:end="43:41"><name pos:start="43:5" pos:end="43:30">memory_region_set_readonly</name><argument_list pos:start="43:31" pos:end="43:41">(<argument pos:start="43:32" pos:end="43:34"><expr pos:start="43:32" pos:end="43:34"><name pos:start="43:32" pos:end="43:34">rom</name></expr></argument>, <argument pos:start="43:37" pos:end="43:40"><expr pos:start="43:37" pos:end="43:40"><name pos:start="43:37" pos:end="43:40">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:57"><expr pos:start="45:5" pos:end="45:56"><call pos:start="45:5" pos:end="45:56"><name pos:start="45:5" pos:end="45:31">memory_region_add_subregion</name><argument_list pos:start="45:32" pos:end="45:56">(<argument pos:start="45:33" pos:end="45:38"><expr pos:start="45:33" pos:end="45:38"><name pos:start="45:33" pos:end="45:38">sysmem</name></expr></argument>, <argument pos:start="45:41" pos:end="45:50"><expr pos:start="45:41" pos:end="45:50"><literal type="number" pos:start="45:41" pos:end="45:50">0x00000000</literal></expr></argument>, <argument pos:start="45:53" pos:end="45:55"><expr pos:start="45:53" pos:end="45:55"><name pos:start="45:53" pos:end="45:55">rom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="49:41"><expr pos:start="47:5" pos:end="49:40"><call pos:start="47:5" pos:end="49:40"><name pos:start="47:5" pos:end="47:26">memory_region_init_ram</name><argument_list pos:start="47:27" pos:end="49:40">(<argument pos:start="47:28" pos:end="47:36"><expr pos:start="47:28" pos:end="47:36"><operator pos:start="47:28" pos:end="47:28">&amp;</operator><name pos:start="47:29" pos:end="47:36"><name pos:start="47:29" pos:end="47:33">sdram</name><index pos:start="47:34" pos:end="47:36">[<expr pos:start="47:35" pos:end="47:35"><literal type="number" pos:start="47:35" pos:end="47:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="47:39" pos:end="47:42"><expr pos:start="47:39" pos:end="47:42"><name pos:start="47:39" pos:end="47:42">NULL</name></expr></argument>, <argument pos:start="47:45" pos:end="47:57"><expr pos:start="47:45" pos:end="47:57"><literal type="string" pos:start="47:45" pos:end="47:57">"shix.sdram1"</literal></expr></argument>, <argument pos:start="47:60" pos:end="47:69"><expr pos:start="47:60" pos:end="47:69"><literal type="number" pos:start="47:60" pos:end="47:69">0x01000000</literal></expr></argument>,

                           <argument pos:start="49:28" pos:end="49:39"><expr pos:start="49:28" pos:end="49:39"><operator pos:start="49:28" pos:end="49:28">&amp;</operator><name pos:start="49:29" pos:end="49:39">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:63"><expr pos:start="51:5" pos:end="51:62"><call pos:start="51:5" pos:end="51:62"><name pos:start="51:5" pos:end="51:31">memory_region_add_subregion</name><argument_list pos:start="51:32" pos:end="51:62">(<argument pos:start="51:33" pos:end="51:38"><expr pos:start="51:33" pos:end="51:38"><name pos:start="51:33" pos:end="51:38">sysmem</name></expr></argument>, <argument pos:start="51:41" pos:end="51:50"><expr pos:start="51:41" pos:end="51:50"><literal type="number" pos:start="51:41" pos:end="51:50">0x08000000</literal></expr></argument>, <argument pos:start="51:53" pos:end="51:61"><expr pos:start="51:53" pos:end="51:61"><operator pos:start="51:53" pos:end="51:53">&amp;</operator><name pos:start="51:54" pos:end="51:61"><name pos:start="51:54" pos:end="51:58">sdram</name><index pos:start="51:59" pos:end="51:61">[<expr pos:start="51:60" pos:end="51:60"><literal type="number" pos:start="51:60" pos:end="51:60">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="55:41"><expr pos:start="53:5" pos:end="55:40"><call pos:start="53:5" pos:end="55:40"><name pos:start="53:5" pos:end="53:26">memory_region_init_ram</name><argument_list pos:start="53:27" pos:end="55:40">(<argument pos:start="53:28" pos:end="53:36"><expr pos:start="53:28" pos:end="53:36"><operator pos:start="53:28" pos:end="53:28">&amp;</operator><name pos:start="53:29" pos:end="53:36"><name pos:start="53:29" pos:end="53:33">sdram</name><index pos:start="53:34" pos:end="53:36">[<expr pos:start="53:35" pos:end="53:35"><literal type="number" pos:start="53:35" pos:end="53:35">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="53:39" pos:end="53:42"><expr pos:start="53:39" pos:end="53:42"><name pos:start="53:39" pos:end="53:42">NULL</name></expr></argument>, <argument pos:start="53:45" pos:end="53:57"><expr pos:start="53:45" pos:end="53:57"><literal type="string" pos:start="53:45" pos:end="53:57">"shix.sdram2"</literal></expr></argument>, <argument pos:start="53:60" pos:end="53:69"><expr pos:start="53:60" pos:end="53:69"><literal type="number" pos:start="53:60" pos:end="53:69">0x01000000</literal></expr></argument>,

                           <argument pos:start="55:28" pos:end="55:39"><expr pos:start="55:28" pos:end="55:39"><operator pos:start="55:28" pos:end="55:28">&amp;</operator><name pos:start="55:29" pos:end="55:39">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:63"><expr pos:start="57:5" pos:end="57:62"><call pos:start="57:5" pos:end="57:62"><name pos:start="57:5" pos:end="57:31">memory_region_add_subregion</name><argument_list pos:start="57:32" pos:end="57:62">(<argument pos:start="57:33" pos:end="57:38"><expr pos:start="57:33" pos:end="57:38"><name pos:start="57:33" pos:end="57:38">sysmem</name></expr></argument>, <argument pos:start="57:41" pos:end="57:50"><expr pos:start="57:41" pos:end="57:50"><literal type="number" pos:start="57:41" pos:end="57:50">0x0c000000</literal></expr></argument>, <argument pos:start="57:53" pos:end="57:61"><expr pos:start="57:53" pos:end="57:61"><operator pos:start="57:53" pos:end="57:53">&amp;</operator><name pos:start="57:54" pos:end="57:61"><name pos:start="57:54" pos:end="57:58">sdram</name><index pos:start="57:59" pos:end="57:61">[<expr pos:start="57:60" pos:end="57:60"><literal type="number" pos:start="57:60" pos:end="57:60">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:63">/* Load BIOS in 0 (and access it through P2, 0xA0000000) */</comment>

    <if_stmt pos:start="63:5" pos:end="65:34"><if pos:start="63:5" pos:end="65:34">if <condition pos:start="63:8" pos:end="63:26">(<expr pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:17">bios_name</name> <operator pos:start="63:19" pos:end="63:20">==</operator> <name pos:start="63:22" pos:end="63:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:34"><block_content pos:start="65:9" pos:end="65:34">

        <expr_stmt pos:start="65:9" pos:end="65:34"><expr pos:start="65:9" pos:end="65:33"><name pos:start="65:9" pos:end="65:17">bios_name</name> <operator pos:start="65:19" pos:end="65:19">=</operator> <name pos:start="65:21" pos:end="65:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:52"><expr pos:start="67:5" pos:end="67:51"><name pos:start="67:5" pos:end="67:7">ret</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="67:51"><name pos:start="67:11" pos:end="67:29">load_image_targphys</name><argument_list pos:start="67:30" pos:end="67:51">(<argument pos:start="67:31" pos:end="67:39"><expr pos:start="67:31" pos:end="67:39"><name pos:start="67:31" pos:end="67:39">bios_name</name></expr></argument>, <argument pos:start="67:42" pos:end="67:42"><expr pos:start="67:42" pos:end="67:42"><literal type="number" pos:start="67:42" pos:end="67:42">0</literal></expr></argument>, <argument pos:start="67:45" pos:end="67:50"><expr pos:start="67:45" pos:end="67:50"><literal type="number" pos:start="67:45" pos:end="67:50">0x4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:36">(<expr pos:start="69:9" pos:end="69:35"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">&lt;</operator> <literal type="number" pos:start="69:15" pos:end="69:15">0</literal> <operator pos:start="69:17" pos:end="69:18">&amp;&amp;</operator> <operator pos:start="69:20" pos:end="69:20">!</operator><call pos:start="69:21" pos:end="69:35"><name pos:start="69:21" pos:end="69:33">qtest_enabled</name><argument_list pos:start="69:34" pos:end="69:35">()</argument_list></call></expr>)</condition> <block pos:start="69:38" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:16">

        <expr_stmt pos:start="71:9" pos:end="71:65"><expr pos:start="71:9" pos:end="71:64"><call pos:start="71:9" pos:end="71:64"><name pos:start="71:9" pos:end="71:20">error_report</name><argument_list pos:start="71:21" pos:end="71:64">(<argument pos:start="71:22" pos:end="71:52"><expr pos:start="71:22" pos:end="71:52"><literal type="string" pos:start="71:22" pos:end="71:52">"Could not load SHIX bios '%s'"</literal></expr></argument>, <argument pos:start="71:55" pos:end="71:63"><expr pos:start="71:55" pos:end="71:63"><name pos:start="71:55" pos:end="71:63">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:16"><expr pos:start="73:9" pos:end="73:15"><call pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:12">exit</name><argument_list pos:start="73:13" pos:end="73:15">(<argument pos:start="73:14" pos:end="73:14"><expr pos:start="73:14" pos:end="73:14"><literal type="number" pos:start="73:14" pos:end="73:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:30">/* Register peripherals */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:33"><expr pos:start="81:5" pos:end="81:32"><name pos:start="81:5" pos:end="81:5">s</name> <operator pos:start="81:7" pos:end="81:7">=</operator> <call pos:start="81:9" pos:end="81:32"><name pos:start="81:9" pos:end="81:19">sh7750_init</name><argument_list pos:start="81:20" pos:end="81:32">(<argument pos:start="81:21" pos:end="81:23"><expr pos:start="81:21" pos:end="81:23"><name pos:start="81:21" pos:end="81:23">cpu</name></expr></argument>, <argument pos:start="81:26" pos:end="81:31"><expr pos:start="81:26" pos:end="81:31"><name pos:start="81:26" pos:end="81:31">sysmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="83:5" pos:end="83:29">/* XXXXX Check success */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:49"><expr pos:start="85:5" pos:end="85:48"><call pos:start="85:5" pos:end="85:48"><name pos:start="85:5" pos:end="85:16">tc58128_init</name><argument_list pos:start="85:17" pos:end="85:48">(<argument pos:start="85:18" pos:end="85:18"><expr pos:start="85:18" pos:end="85:18"><name pos:start="85:18" pos:end="85:18">s</name></expr></argument>, <argument pos:start="85:21" pos:end="85:41"><expr pos:start="85:21" pos:end="85:41"><literal type="string" pos:start="85:21" pos:end="85:41">"shix_linux_nand.bin"</literal></expr></argument>, <argument pos:start="85:44" pos:end="85:47"><expr pos:start="85:44" pos:end="85:47"><name pos:start="85:44" pos:end="85:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
