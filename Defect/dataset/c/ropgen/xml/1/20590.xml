<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20590.c" pos:tabs="8"><function pos:start="1:1" pos:end="291:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">serial_ioport_write</name><parameter_list pos:start="1:32" pos:end="3:46">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">opaque</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:57"><decl pos:start="1:47" pos:end="1:57"><type pos:start="1:47" pos:end="1:57"><name pos:start="1:47" pos:end="1:52">hwaddr</name></type> <name pos:start="1:54" pos:end="1:57">addr</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:71"><decl pos:start="1:60" pos:end="1:71"><type pos:start="1:60" pos:end="1:71"><name pos:start="1:60" pos:end="1:67">uint64_t</name></type> <name pos:start="1:69" pos:end="1:71">val</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:45"><decl pos:start="3:33" pos:end="3:45"><type pos:start="3:33" pos:end="3:45"><name pos:start="3:33" pos:end="3:40">unsigned</name></type> <name pos:start="3:42" pos:end="3:45">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="291:1">{<block_content pos:start="7:5" pos:end="289:5">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">SerialState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">s</name> <init pos:start="7:20" pos:end="7:27">= <expr pos:start="7:22" pos:end="7:27"><name pos:start="7:22" pos:end="7:27">opaque</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:14"><expr pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:8">addr</name> <operator pos:start="11:10" pos:end="11:11">&amp;=</operator> <literal type="number" pos:start="11:13" pos:end="11:13">7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:76"><expr pos:start="13:5" pos:end="13:75"><call pos:start="13:5" pos:end="13:75"><name pos:start="13:5" pos:end="13:11">DPRINTF</name><argument_list pos:start="13:12" pos:end="13:75">(<argument pos:start="13:13" pos:end="13:63"><expr pos:start="13:13" pos:end="13:63"><literal type="string" pos:start="13:13" pos:end="13:28">"write addr=0x%"</literal> <name pos:start="13:30" pos:end="13:40">HWADDR_PRIx</name> <literal type="string" pos:start="13:42" pos:end="13:51">" val=0x%"</literal> <name pos:start="13:53" pos:end="13:58">PRIx64</name> <literal type="string" pos:start="13:60" pos:end="13:63">"\n"</literal></expr></argument>, <argument pos:start="13:66" pos:end="13:69"><expr pos:start="13:66" pos:end="13:69"><name pos:start="13:66" pos:end="13:69">addr</name></expr></argument>, <argument pos:start="13:72" pos:end="13:74"><expr pos:start="13:72" pos:end="13:74"><name pos:start="13:72" pos:end="13:74">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="15:5" pos:end="289:5">switch<condition pos:start="15:11" pos:end="15:16">(<expr pos:start="15:12" pos:end="15:15"><name pos:start="15:12" pos:end="15:15">addr</name></expr>)</condition> <block pos:start="15:18" pos:end="289:5">{<block_content pos:start="17:5" pos:end="287:14">

    <default pos:start="17:5" pos:end="17:12">default:</default>

    <case pos:start="19:5" pos:end="19:11">case <expr pos:start="19:10" pos:end="19:10"><literal type="number" pos:start="19:10" pos:end="19:10">0</literal></expr>:</case>

        <if_stmt pos:start="21:9" pos:end="55:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:35">(<expr pos:start="21:13" pos:end="21:34"><name pos:start="21:13" pos:end="21:18"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:18">lcr</name></name> <operator pos:start="21:20" pos:end="21:20">&amp;</operator> <name pos:start="21:22" pos:end="21:34">UART_LCR_DLAB</name></expr>)</condition> <block pos:start="21:37" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:40">

            <expr_stmt pos:start="23:13" pos:end="23:53"><expr pos:start="23:13" pos:end="23:52"><name pos:start="23:13" pos:end="23:22"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:22">divider</name></name> <operator pos:start="23:24" pos:end="23:24">=</operator> <operator pos:start="23:26" pos:end="23:26">(</operator><name pos:start="23:27" pos:end="23:36"><name pos:start="23:27" pos:end="23:27">s</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:36">divider</name></name> <operator pos:start="23:38" pos:end="23:38">&amp;</operator> <literal type="number" pos:start="23:40" pos:end="23:45">0xff00</literal><operator pos:start="23:46" pos:end="23:46">)</operator> <operator pos:start="23:48" pos:end="23:48">|</operator> <name pos:start="23:50" pos:end="23:52">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:40"><expr pos:start="25:13" pos:end="25:39"><call pos:start="25:13" pos:end="25:39"><name pos:start="25:13" pos:end="25:36">serial_update_parameters</name><argument_list pos:start="25:37" pos:end="25:39">(<argument pos:start="25:38" pos:end="25:38"><expr pos:start="25:38" pos:end="25:38"><name pos:start="25:38" pos:end="25:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="27:11" pos:end="55:9">else <block pos:start="27:16" pos:end="55:9">{<block_content pos:start="29:13" pos:end="53:43">

            <expr_stmt pos:start="29:13" pos:end="29:35"><expr pos:start="29:13" pos:end="29:34"><name pos:start="29:13" pos:end="29:18"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:18">thr</name></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <operator pos:start="29:22" pos:end="29:22">(</operator><name pos:start="29:23" pos:end="29:29">uint8_t</name><operator pos:start="29:30" pos:end="29:30">)</operator> <name pos:start="29:32" pos:end="29:34">val</name></expr>;</expr_stmt>

            <if_stmt pos:start="31:13" pos:end="45:13"><if pos:start="31:13" pos:end="45:13">if<condition pos:start="31:15" pos:end="31:36">(<expr pos:start="31:16" pos:end="31:35"><name pos:start="31:16" pos:end="31:21"><name pos:start="31:16" pos:end="31:16">s</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:21">fcr</name></name> <operator pos:start="31:23" pos:end="31:23">&amp;</operator> <name pos:start="31:25" pos:end="31:35">UART_FCR_FE</name></expr>)</condition> <block pos:start="31:38" pos:end="45:13">{<block_content pos:start="35:17" pos:end="43:41">

                <comment type="block" pos:start="33:17" pos:end="33:75">/* xmit overruns overwrite data, so make space if needed */</comment>

                <if_stmt pos:start="35:17" pos:end="39:17"><if pos:start="35:17" pos:end="39:17">if <condition pos:start="35:20" pos:end="35:49">(<expr pos:start="35:21" pos:end="35:48"><call pos:start="35:21" pos:end="35:48"><name pos:start="35:21" pos:end="35:33">fifo8_is_full</name><argument_list pos:start="35:34" pos:end="35:48">(<argument pos:start="35:35" pos:end="35:47"><expr pos:start="35:35" pos:end="35:47"><operator pos:start="35:35" pos:end="35:35">&amp;</operator><name pos:start="35:36" pos:end="35:47"><name pos:start="35:36" pos:end="35:36">s</name><operator pos:start="35:37" pos:end="35:38">-&gt;</operator><name pos:start="35:39" pos:end="35:47">xmit_fifo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:51" pos:end="39:17">{<block_content pos:start="37:21" pos:end="37:45">

                    <expr_stmt pos:start="37:21" pos:end="37:45"><expr pos:start="37:21" pos:end="37:44"><call pos:start="37:21" pos:end="37:44"><name pos:start="37:21" pos:end="37:29">fifo8_pop</name><argument_list pos:start="37:30" pos:end="37:44">(<argument pos:start="37:31" pos:end="37:43"><expr pos:start="37:31" pos:end="37:43"><operator pos:start="37:31" pos:end="37:31">&amp;</operator><name pos:start="37:32" pos:end="37:43"><name pos:start="37:32" pos:end="37:32">s</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:43">xmit_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:50"><expr pos:start="41:17" pos:end="41:49"><call pos:start="41:17" pos:end="41:49"><name pos:start="41:17" pos:end="41:26">fifo8_push</name><argument_list pos:start="41:27" pos:end="41:49">(<argument pos:start="41:28" pos:end="41:40"><expr pos:start="41:28" pos:end="41:40"><operator pos:start="41:28" pos:end="41:28">&amp;</operator><name pos:start="41:29" pos:end="41:40"><name pos:start="41:29" pos:end="41:29">s</name><operator pos:start="41:30" pos:end="41:31">-&gt;</operator><name pos:start="41:32" pos:end="41:40">xmit_fifo</name></name></expr></argument>, <argument pos:start="41:43" pos:end="41:48"><expr pos:start="41:43" pos:end="41:48"><name pos:start="41:43" pos:end="41:48"><name pos:start="41:43" pos:end="41:43">s</name><operator pos:start="41:44" pos:end="41:45">-&gt;</operator><name pos:start="41:46" pos:end="41:48">thr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="43:17" pos:end="43:41"><expr pos:start="43:17" pos:end="43:40"><name pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:17">s</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:22">lsr</name></name> <operator pos:start="43:24" pos:end="43:25">&amp;=</operator> <operator pos:start="43:27" pos:end="43:27">~</operator><name pos:start="43:28" pos:end="43:40">UART_LSR_TEMT</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:32"><expr pos:start="47:13" pos:end="47:31"><name pos:start="47:13" pos:end="47:27"><name pos:start="47:13" pos:end="47:13">s</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:27">thr_ipending</name></name> <operator pos:start="47:29" pos:end="47:29">=</operator> <literal type="number" pos:start="47:31" pos:end="47:31">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:37"><expr pos:start="49:13" pos:end="49:36"><name pos:start="49:13" pos:end="49:18"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:18">lsr</name></name> <operator pos:start="49:20" pos:end="49:21">&amp;=</operator> <operator pos:start="49:23" pos:end="49:23">~</operator><name pos:start="49:24" pos:end="49:36">UART_LSR_THRE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:33"><expr pos:start="51:13" pos:end="51:32"><call pos:start="51:13" pos:end="51:32"><name pos:start="51:13" pos:end="51:29">serial_update_irq</name><argument_list pos:start="51:30" pos:end="51:32">(<argument pos:start="51:31" pos:end="51:31"><expr pos:start="51:31" pos:end="51:31"><name pos:start="51:31" pos:end="51:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:43"><expr pos:start="53:13" pos:end="53:42"><call pos:start="53:13" pos:end="53:42"><name pos:start="53:13" pos:end="53:23">serial_xmit</name><argument_list pos:start="53:24" pos:end="53:42">(<argument pos:start="53:25" pos:end="53:28"><expr pos:start="53:25" pos:end="53:28"><name pos:start="53:25" pos:end="53:28">NULL</name></expr></argument>, <argument pos:start="53:31" pos:end="53:38"><expr pos:start="53:31" pos:end="53:38"><name pos:start="53:31" pos:end="53:38">G_IO_OUT</name></expr></argument>, <argument pos:start="53:41" pos:end="53:41"><expr pos:start="53:41" pos:end="53:41"><name pos:start="53:41" pos:end="53:41">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:11">case <expr pos:start="59:10" pos:end="59:10"><literal type="number" pos:start="59:10" pos:end="59:10">1</literal></expr>:</case>

        <if_stmt pos:start="61:9" pos:end="101:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:35">(<expr pos:start="61:13" pos:end="61:34"><name pos:start="61:13" pos:end="61:18"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:18">lcr</name></name> <operator pos:start="61:20" pos:end="61:20">&amp;</operator> <name pos:start="61:22" pos:end="61:34">UART_LCR_DLAB</name></expr>)</condition> <block pos:start="61:37" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:40">

            <expr_stmt pos:start="63:13" pos:end="63:60"><expr pos:start="63:13" pos:end="63:59"><name pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:22">divider</name></name> <operator pos:start="63:24" pos:end="63:24">=</operator> <operator pos:start="63:26" pos:end="63:26">(</operator><name pos:start="63:27" pos:end="63:36"><name pos:start="63:27" pos:end="63:27">s</name><operator pos:start="63:28" pos:end="63:29">-&gt;</operator><name pos:start="63:30" pos:end="63:36">divider</name></name> <operator pos:start="63:38" pos:end="63:38">&amp;</operator> <literal type="number" pos:start="63:40" pos:end="63:45">0x00ff</literal><operator pos:start="63:46" pos:end="63:46">)</operator> <operator pos:start="63:48" pos:end="63:48">|</operator> <operator pos:start="63:50" pos:end="63:50">(</operator><name pos:start="63:51" pos:end="63:53">val</name> <operator pos:start="63:55" pos:end="63:56">&lt;&lt;</operator> <literal type="number" pos:start="63:58" pos:end="63:58">8</literal><operator pos:start="63:59" pos:end="63:59">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:40"><expr pos:start="65:13" pos:end="65:39"><call pos:start="65:13" pos:end="65:39"><name pos:start="65:13" pos:end="65:36">serial_update_parameters</name><argument_list pos:start="65:37" pos:end="65:39">(<argument pos:start="65:38" pos:end="65:38"><expr pos:start="65:38" pos:end="65:38"><name pos:start="65:38" pos:end="65:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="67:11" pos:end="101:9">else <block pos:start="67:16" pos:end="101:9">{<block_content pos:start="69:13" pos:end="99:13">

            <expr_stmt pos:start="69:13" pos:end="69:32"><expr pos:start="69:13" pos:end="69:31"><name pos:start="69:13" pos:end="69:18"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:18">ier</name></name> <operator pos:start="69:20" pos:end="69:20">=</operator> <name pos:start="69:22" pos:end="69:24">val</name> <operator pos:start="69:26" pos:end="69:26">&amp;</operator> <literal type="number" pos:start="69:28" pos:end="69:31">0x0f</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="71:13" pos:end="73:89">/* If the backend device is a real serial port, turn polling of the modem

               status lines on physical port on or off depending on UART_IER_MSI state */</comment>

            <if_stmt pos:start="75:13" pos:end="91:13"><if pos:start="75:13" pos:end="91:13">if <condition pos:start="75:16" pos:end="75:33">(<expr pos:start="75:17" pos:end="75:32"><name pos:start="75:17" pos:end="75:27"><name pos:start="75:17" pos:end="75:17">s</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:27">poll_msl</name></name> <operator pos:start="75:29" pos:end="75:30">&gt;=</operator> <literal type="number" pos:start="75:32" pos:end="75:32">0</literal></expr>)</condition> <block pos:start="75:35" pos:end="91:13">{<block_content pos:start="77:17" pos:end="89:17">

                <if_stmt pos:start="77:17" pos:end="89:17"><if pos:start="77:17" pos:end="83:17">if <condition pos:start="77:20" pos:end="77:42">(<expr pos:start="77:21" pos:end="77:41"><name pos:start="77:21" pos:end="77:26"><name pos:start="77:21" pos:end="77:21">s</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:26">ier</name></name> <operator pos:start="77:28" pos:end="77:28">&amp;</operator> <name pos:start="77:30" pos:end="77:41">UART_IER_MSI</name></expr>)</condition> <block pos:start="77:44" pos:end="83:17">{<block_content pos:start="79:22" pos:end="81:42">

                     <expr_stmt pos:start="79:22" pos:end="79:37"><expr pos:start="79:22" pos:end="79:36"><name pos:start="79:22" pos:end="79:32"><name pos:start="79:22" pos:end="79:22">s</name><operator pos:start="79:23" pos:end="79:24">-&gt;</operator><name pos:start="79:25" pos:end="79:32">poll_msl</name></name> <operator pos:start="79:34" pos:end="79:34">=</operator> <literal type="number" pos:start="79:36" pos:end="79:36">1</literal></expr>;</expr_stmt>

                     <expr_stmt pos:start="81:22" pos:end="81:42"><expr pos:start="81:22" pos:end="81:41"><call pos:start="81:22" pos:end="81:41"><name pos:start="81:22" pos:end="81:38">serial_update_msl</name><argument_list pos:start="81:39" pos:end="81:41">(<argument pos:start="81:40" pos:end="81:40"><expr pos:start="81:40" pos:end="81:40"><name pos:start="81:40" pos:end="81:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="83:19" pos:end="89:17">else <block pos:start="83:24" pos:end="89:17">{<block_content pos:start="85:22" pos:end="87:37">

                     <expr_stmt pos:start="85:22" pos:end="85:53"><expr pos:start="85:22" pos:end="85:52"><call pos:start="85:22" pos:end="85:52"><name pos:start="85:22" pos:end="85:30">timer_del</name><argument_list pos:start="85:31" pos:end="85:52">(<argument pos:start="85:32" pos:end="85:51"><expr pos:start="85:32" pos:end="85:51"><name pos:start="85:32" pos:end="85:51"><name pos:start="85:32" pos:end="85:32">s</name><operator pos:start="85:33" pos:end="85:34">-&gt;</operator><name pos:start="85:35" pos:end="85:51">modem_status_poll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                     <expr_stmt pos:start="87:22" pos:end="87:37"><expr pos:start="87:22" pos:end="87:36"><name pos:start="87:22" pos:end="87:32"><name pos:start="87:22" pos:end="87:22">s</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:32">poll_msl</name></name> <operator pos:start="87:34" pos:end="87:34">=</operator> <literal type="number" pos:start="87:36" pos:end="87:36">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="93:13" pos:end="99:13"><if pos:start="93:13" pos:end="99:13">if <condition pos:start="93:16" pos:end="93:39">(<expr pos:start="93:17" pos:end="93:38"><name pos:start="93:17" pos:end="93:22"><name pos:start="93:17" pos:end="93:17">s</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:22">lsr</name></name> <operator pos:start="93:24" pos:end="93:24">&amp;</operator> <name pos:start="93:26" pos:end="93:38">UART_LSR_THRE</name></expr>)</condition> <block pos:start="93:41" pos:end="99:13">{<block_content pos:start="95:17" pos:end="97:37">

                <expr_stmt pos:start="95:17" pos:end="95:36"><expr pos:start="95:17" pos:end="95:35"><name pos:start="95:17" pos:end="95:31"><name pos:start="95:17" pos:end="95:17">s</name><operator pos:start="95:18" pos:end="95:19">-&gt;</operator><name pos:start="95:20" pos:end="95:31">thr_ipending</name></name> <operator pos:start="95:33" pos:end="95:33">=</operator> <literal type="number" pos:start="95:35" pos:end="95:35">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:37"><expr pos:start="97:17" pos:end="97:36"><call pos:start="97:17" pos:end="97:36"><name pos:start="97:17" pos:end="97:33">serial_update_irq</name><argument_list pos:start="97:34" pos:end="97:36">(<argument pos:start="97:35" pos:end="97:35"><expr pos:start="97:35" pos:end="97:35"><name pos:start="97:35" pos:end="97:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="103:9" pos:end="103:14">break;</break>

    <case pos:start="105:5" pos:end="105:11">case <expr pos:start="105:10" pos:end="105:10"><literal type="number" pos:start="105:10" pos:end="105:10">2</literal></expr>:</case>

        <expr_stmt pos:start="107:9" pos:end="107:25"><expr pos:start="107:9" pos:end="107:24"><name pos:start="107:9" pos:end="107:11">val</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <name pos:start="107:15" pos:end="107:17">val</name> <operator pos:start="107:19" pos:end="107:19">&amp;</operator> <literal type="number" pos:start="107:21" pos:end="107:24">0xFF</literal></expr>;</expr_stmt>



        <if_stmt pos:start="111:9" pos:end="113:18"><if pos:start="111:9" pos:end="113:18">if <condition pos:start="111:12" pos:end="111:26">(<expr pos:start="111:13" pos:end="111:25"><name pos:start="111:13" pos:end="111:18"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:18">fcr</name></name> <operator pos:start="111:20" pos:end="111:21">==</operator> <name pos:start="111:23" pos:end="111:25">val</name></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:18"><block_content pos:start="113:13" pos:end="113:18">

            <break pos:start="113:13" pos:end="113:18">break;</break></block_content></block></if></if_stmt>



        <comment type="block" pos:start="117:9" pos:end="117:84">/* Did the enable/disable flag change? If so, make sure FIFOs get flushed */</comment>

        <if_stmt pos:start="119:9" pos:end="121:47"><if pos:start="119:9" pos:end="121:47">if <condition pos:start="119:12" pos:end="119:41">(<expr pos:start="119:13" pos:end="119:40"><operator pos:start="119:13" pos:end="119:13">(</operator><name pos:start="119:14" pos:end="119:16">val</name> <operator pos:start="119:18" pos:end="119:18">^</operator> <name pos:start="119:20" pos:end="119:25"><name pos:start="119:20" pos:end="119:20">s</name><operator pos:start="119:21" pos:end="119:22">-&gt;</operator><name pos:start="119:23" pos:end="119:25">fcr</name></name><operator pos:start="119:26" pos:end="119:26">)</operator> <operator pos:start="119:28" pos:end="119:28">&amp;</operator> <name pos:start="119:30" pos:end="119:40">UART_FCR_FE</name></expr>)</condition><block type="pseudo" pos:start="121:13" pos:end="121:47"><block_content pos:start="121:13" pos:end="121:47">

            <expr_stmt pos:start="121:13" pos:end="121:47"><expr pos:start="121:13" pos:end="121:46"><name pos:start="121:13" pos:end="121:15">val</name> <operator pos:start="121:17" pos:end="121:18">|=</operator> <name pos:start="121:20" pos:end="121:31">UART_FCR_XFR</name> <operator pos:start="121:33" pos:end="121:33">|</operator> <name pos:start="121:35" pos:end="121:46">UART_FCR_RFR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="125:9" pos:end="125:24">/* FIFO clear */</comment>



        <if_stmt pos:start="129:9" pos:end="137:9"><if pos:start="129:9" pos:end="137:9">if <condition pos:start="129:12" pos:end="129:31">(<expr pos:start="129:13" pos:end="129:30"><name pos:start="129:13" pos:end="129:15">val</name> <operator pos:start="129:17" pos:end="129:17">&amp;</operator> <name pos:start="129:19" pos:end="129:30">UART_FCR_RFR</name></expr>)</condition> <block pos:start="129:33" pos:end="137:9">{<block_content pos:start="131:13" pos:end="135:39">

            <expr_stmt pos:start="131:13" pos:end="131:45"><expr pos:start="131:13" pos:end="131:44"><call pos:start="131:13" pos:end="131:44"><name pos:start="131:13" pos:end="131:21">timer_del</name><argument_list pos:start="131:22" pos:end="131:44">(<argument pos:start="131:23" pos:end="131:43"><expr pos:start="131:23" pos:end="131:43"><name pos:start="131:23" pos:end="131:43"><name pos:start="131:23" pos:end="131:23">s</name><operator pos:start="131:24" pos:end="131:25">-&gt;</operator><name pos:start="131:26" pos:end="131:43">fifo_timeout_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:34"><expr pos:start="133:13" pos:end="133:33"><name pos:start="133:13" pos:end="133:31"><name pos:start="133:13" pos:end="133:13">s</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:31">timeout_ipending</name></name><operator pos:start="133:32" pos:end="133:32">=</operator><literal type="number" pos:start="133:33" pos:end="133:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:39"><expr pos:start="135:13" pos:end="135:38"><call pos:start="135:13" pos:end="135:38"><name pos:start="135:13" pos:end="135:23">fifo8_reset</name><argument_list pos:start="135:24" pos:end="135:38">(<argument pos:start="135:25" pos:end="135:37"><expr pos:start="135:25" pos:end="135:37"><operator pos:start="135:25" pos:end="135:25">&amp;</operator><name pos:start="135:26" pos:end="135:37"><name pos:start="135:26" pos:end="135:26">s</name><operator pos:start="135:27" pos:end="135:28">-&gt;</operator><name pos:start="135:29" pos:end="135:37">recv_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="141:9" pos:end="145:9"><if pos:start="141:9" pos:end="145:9">if <condition pos:start="141:12" pos:end="141:31">(<expr pos:start="141:13" pos:end="141:30"><name pos:start="141:13" pos:end="141:15">val</name> <operator pos:start="141:17" pos:end="141:17">&amp;</operator> <name pos:start="141:19" pos:end="141:30">UART_FCR_XFR</name></expr>)</condition> <block pos:start="141:33" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:39">

            <expr_stmt pos:start="143:13" pos:end="143:39"><expr pos:start="143:13" pos:end="143:38"><call pos:start="143:13" pos:end="143:38"><name pos:start="143:13" pos:end="143:23">fifo8_reset</name><argument_list pos:start="143:24" pos:end="143:38">(<argument pos:start="143:25" pos:end="143:37"><expr pos:start="143:25" pos:end="143:37"><operator pos:start="143:25" pos:end="143:25">&amp;</operator><name pos:start="143:26" pos:end="143:37"><name pos:start="143:26" pos:end="143:26">s</name><operator pos:start="143:27" pos:end="143:28">-&gt;</operator><name pos:start="143:29" pos:end="143:37">xmit_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="149:9" pos:end="185:35"><if pos:start="149:9" pos:end="183:9">if <condition pos:start="149:12" pos:end="149:30">(<expr pos:start="149:13" pos:end="149:29"><name pos:start="149:13" pos:end="149:15">val</name> <operator pos:start="149:17" pos:end="149:17">&amp;</operator> <name pos:start="149:19" pos:end="149:29">UART_FCR_FE</name></expr>)</condition> <block pos:start="149:32" pos:end="183:9">{<block_content pos:start="151:13" pos:end="181:13">

            <expr_stmt pos:start="151:13" pos:end="151:34"><expr pos:start="151:13" pos:end="151:33"><name pos:start="151:13" pos:end="151:18"><name pos:start="151:13" pos:end="151:13">s</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:18">iir</name></name> <operator pos:start="151:20" pos:end="151:21">|=</operator> <name pos:start="151:23" pos:end="151:33">UART_IIR_FE</name></expr>;</expr_stmt>

            <comment type="block" pos:start="153:13" pos:end="153:45">/* Set recv_fifo trigger Level */</comment>

            <switch pos:start="155:13" pos:end="181:13">switch <condition pos:start="155:20" pos:end="155:31">(<expr pos:start="155:21" pos:end="155:30"><name pos:start="155:21" pos:end="155:23">val</name> <operator pos:start="155:25" pos:end="155:25">&amp;</operator> <literal type="number" pos:start="155:27" pos:end="155:30">0xC0</literal></expr>)</condition> <block pos:start="155:33" pos:end="181:13">{<block_content pos:start="157:13" pos:end="179:22">

            <case pos:start="157:13" pos:end="157:32">case <expr pos:start="157:18" pos:end="157:31"><name pos:start="157:18" pos:end="157:31">UART_FCR_ITL_1</name></expr>:</case>

                <expr_stmt pos:start="159:17" pos:end="159:37"><expr pos:start="159:17" pos:end="159:36"><name pos:start="159:17" pos:end="159:32"><name pos:start="159:17" pos:end="159:17">s</name><operator pos:start="159:18" pos:end="159:19">-&gt;</operator><name pos:start="159:20" pos:end="159:32">recv_fifo_itl</name></name> <operator pos:start="159:34" pos:end="159:34">=</operator> <literal type="number" pos:start="159:36" pos:end="159:36">1</literal></expr>;</expr_stmt>

                <break pos:start="161:17" pos:end="161:22">break;</break>

            <case pos:start="163:13" pos:end="163:32">case <expr pos:start="163:18" pos:end="163:31"><name pos:start="163:18" pos:end="163:31">UART_FCR_ITL_2</name></expr>:</case>

                <expr_stmt pos:start="165:17" pos:end="165:37"><expr pos:start="165:17" pos:end="165:36"><name pos:start="165:17" pos:end="165:32"><name pos:start="165:17" pos:end="165:17">s</name><operator pos:start="165:18" pos:end="165:19">-&gt;</operator><name pos:start="165:20" pos:end="165:32">recv_fifo_itl</name></name> <operator pos:start="165:34" pos:end="165:34">=</operator> <literal type="number" pos:start="165:36" pos:end="165:36">4</literal></expr>;</expr_stmt>

                <break pos:start="167:17" pos:end="167:22">break;</break>

            <case pos:start="169:13" pos:end="169:32">case <expr pos:start="169:18" pos:end="169:31"><name pos:start="169:18" pos:end="169:31">UART_FCR_ITL_3</name></expr>:</case>

                <expr_stmt pos:start="171:17" pos:end="171:37"><expr pos:start="171:17" pos:end="171:36"><name pos:start="171:17" pos:end="171:32"><name pos:start="171:17" pos:end="171:17">s</name><operator pos:start="171:18" pos:end="171:19">-&gt;</operator><name pos:start="171:20" pos:end="171:32">recv_fifo_itl</name></name> <operator pos:start="171:34" pos:end="171:34">=</operator> <literal type="number" pos:start="171:36" pos:end="171:36">8</literal></expr>;</expr_stmt>

                <break pos:start="173:17" pos:end="173:22">break;</break>

            <case pos:start="175:13" pos:end="175:32">case <expr pos:start="175:18" pos:end="175:31"><name pos:start="175:18" pos:end="175:31">UART_FCR_ITL_4</name></expr>:</case>

                <expr_stmt pos:start="177:17" pos:end="177:38"><expr pos:start="177:17" pos:end="177:37"><name pos:start="177:17" pos:end="177:32"><name pos:start="177:17" pos:end="177:17">s</name><operator pos:start="177:18" pos:end="177:19">-&gt;</operator><name pos:start="177:20" pos:end="177:32">recv_fifo_itl</name></name> <operator pos:start="177:34" pos:end="177:34">=</operator> <literal type="number" pos:start="177:36" pos:end="177:37">14</literal></expr>;</expr_stmt>

                <break pos:start="179:17" pos:end="179:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="183:11" pos:end="185:35">else<block type="pseudo" pos:start="185:13" pos:end="185:35"><block_content pos:start="185:13" pos:end="185:35">

            <expr_stmt pos:start="185:13" pos:end="185:35"><expr pos:start="185:13" pos:end="185:34"><name pos:start="185:13" pos:end="185:18"><name pos:start="185:13" pos:end="185:13">s</name><operator pos:start="185:14" pos:end="185:15">-&gt;</operator><name pos:start="185:16" pos:end="185:18">iir</name></name> <operator pos:start="185:20" pos:end="185:21">&amp;=</operator> <operator pos:start="185:23" pos:end="185:23">~</operator><name pos:start="185:24" pos:end="185:34">UART_IIR_FE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <comment type="block" pos:start="189:9" pos:end="189:79">/* Set fcr - or at least the bits in it that are supposed to "stick" */</comment>

        <expr_stmt pos:start="191:9" pos:end="191:28"><expr pos:start="191:9" pos:end="191:27"><name pos:start="191:9" pos:end="191:14"><name pos:start="191:9" pos:end="191:9">s</name><operator pos:start="191:10" pos:end="191:11">-&gt;</operator><name pos:start="191:12" pos:end="191:14">fcr</name></name> <operator pos:start="191:16" pos:end="191:16">=</operator> <name pos:start="191:18" pos:end="191:20">val</name> <operator pos:start="191:22" pos:end="191:22">&amp;</operator> <literal type="number" pos:start="191:24" pos:end="191:27">0xC9</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:29"><expr pos:start="193:9" pos:end="193:28"><call pos:start="193:9" pos:end="193:28"><name pos:start="193:9" pos:end="193:25">serial_update_irq</name><argument_list pos:start="193:26" pos:end="193:28">(<argument pos:start="193:27" pos:end="193:27"><expr pos:start="193:27" pos:end="193:27"><name pos:start="193:27" pos:end="193:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="195:9" pos:end="195:14">break;</break>

    <case pos:start="197:5" pos:end="197:11">case <expr pos:start="197:10" pos:end="197:10"><literal type="number" pos:start="197:10" pos:end="197:10">3</literal></expr>:</case>

        <block pos:start="199:9" pos:end="219:9">{<block_content pos:start="201:13" pos:end="217:13">

            <decl_stmt pos:start="201:13" pos:end="201:29"><decl pos:start="201:13" pos:end="201:28"><type pos:start="201:13" pos:end="201:15"><name pos:start="201:13" pos:end="201:15">int</name></type> <name pos:start="201:17" pos:end="201:28">break_enable</name></decl>;</decl_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:25"><expr pos:start="203:13" pos:end="203:24"><name pos:start="203:13" pos:end="203:18"><name pos:start="203:13" pos:end="203:13">s</name><operator pos:start="203:14" pos:end="203:15">-&gt;</operator><name pos:start="203:16" pos:end="203:18">lcr</name></name> <operator pos:start="203:20" pos:end="203:20">=</operator> <name pos:start="203:22" pos:end="203:24">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:40"><expr pos:start="205:13" pos:end="205:39"><call pos:start="205:13" pos:end="205:39"><name pos:start="205:13" pos:end="205:36">serial_update_parameters</name><argument_list pos:start="205:37" pos:end="205:39">(<argument pos:start="205:38" pos:end="205:38"><expr pos:start="205:38" pos:end="205:38"><name pos:start="205:38" pos:end="205:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:42"><expr pos:start="207:13" pos:end="207:41"><name pos:start="207:13" pos:end="207:24">break_enable</name> <operator pos:start="207:26" pos:end="207:26">=</operator> <operator pos:start="207:28" pos:end="207:28">(</operator><name pos:start="207:29" pos:end="207:31">val</name> <operator pos:start="207:33" pos:end="207:34">&gt;&gt;</operator> <literal type="number" pos:start="207:36" pos:end="207:36">6</literal><operator pos:start="207:37" pos:end="207:37">)</operator> <operator pos:start="207:39" pos:end="207:39">&amp;</operator> <literal type="number" pos:start="207:41" pos:end="207:41">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="209:13" pos:end="217:13"><if pos:start="209:13" pos:end="217:13">if <condition pos:start="209:16" pos:end="209:53">(<expr pos:start="209:17" pos:end="209:52"><name pos:start="209:17" pos:end="209:28">break_enable</name> <operator pos:start="209:30" pos:end="209:31">!=</operator> <name pos:start="209:33" pos:end="209:52"><name pos:start="209:33" pos:end="209:33">s</name><operator pos:start="209:34" pos:end="209:35">-&gt;</operator><name pos:start="209:36" pos:end="209:52">last_break_enable</name></name></expr>)</condition> <block pos:start="209:55" pos:end="217:13">{<block_content pos:start="211:17" pos:end="215:46">

                <expr_stmt pos:start="211:17" pos:end="211:52"><expr pos:start="211:17" pos:end="211:51"><name pos:start="211:17" pos:end="211:36"><name pos:start="211:17" pos:end="211:17">s</name><operator pos:start="211:18" pos:end="211:19">-&gt;</operator><name pos:start="211:20" pos:end="211:36">last_break_enable</name></name> <operator pos:start="211:38" pos:end="211:38">=</operator> <name pos:start="211:40" pos:end="211:51">break_enable</name></expr>;</expr_stmt>

                <expr_stmt pos:start="213:17" pos:end="215:46"><expr pos:start="213:17" pos:end="215:45"><call pos:start="213:17" pos:end="215:45"><name pos:start="213:17" pos:end="213:33">qemu_chr_fe_ioctl</name><argument_list pos:start="213:34" pos:end="215:45">(<argument pos:start="213:35" pos:end="213:40"><expr pos:start="213:35" pos:end="213:40"><name pos:start="213:35" pos:end="213:40"><name pos:start="213:35" pos:end="213:35">s</name><operator pos:start="213:36" pos:end="213:37">-&gt;</operator><name pos:start="213:38" pos:end="213:40">chr</name></name></expr></argument>, <argument pos:start="213:43" pos:end="213:68"><expr pos:start="213:43" pos:end="213:68"><name pos:start="213:43" pos:end="213:68">CHR_IOCTL_SERIAL_SET_BREAK</name></expr></argument>,

                               <argument pos:start="215:32" pos:end="215:44"><expr pos:start="215:32" pos:end="215:44"><operator pos:start="215:32" pos:end="215:32">&amp;</operator><name pos:start="215:33" pos:end="215:44">break_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="221:9" pos:end="221:14">break;</break>

    <case pos:start="223:5" pos:end="223:11">case <expr pos:start="223:10" pos:end="223:10"><literal type="number" pos:start="223:10" pos:end="223:10">4</literal></expr>:</case>

        <block pos:start="225:9" pos:end="271:9">{<block_content pos:start="227:13" pos:end="269:13">

            <decl_stmt pos:start="227:13" pos:end="227:22"><decl pos:start="227:13" pos:end="227:21"><type pos:start="227:13" pos:end="227:15"><name pos:start="227:13" pos:end="227:15">int</name></type> <name pos:start="227:17" pos:end="227:21">flags</name></decl>;</decl_stmt>

            <decl_stmt pos:start="229:13" pos:end="229:33"><decl pos:start="229:13" pos:end="229:32"><type pos:start="229:13" pos:end="229:15"><name pos:start="229:13" pos:end="229:15">int</name></type> <name pos:start="229:17" pos:end="229:23">old_mcr</name> <init pos:start="229:25" pos:end="229:32">= <expr pos:start="229:27" pos:end="229:32"><name pos:start="229:27" pos:end="229:32"><name pos:start="229:27" pos:end="229:27">s</name><operator pos:start="229:28" pos:end="229:29">-&gt;</operator><name pos:start="229:30" pos:end="229:32">mcr</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:32"><expr pos:start="231:13" pos:end="231:31"><name pos:start="231:13" pos:end="231:18"><name pos:start="231:13" pos:end="231:13">s</name><operator pos:start="231:14" pos:end="231:15">-&gt;</operator><name pos:start="231:16" pos:end="231:18">mcr</name></name> <operator pos:start="231:20" pos:end="231:20">=</operator> <name pos:start="231:22" pos:end="231:24">val</name> <operator pos:start="231:26" pos:end="231:26">&amp;</operator> <literal type="number" pos:start="231:28" pos:end="231:31">0x1f</literal></expr>;</expr_stmt>

            <if_stmt pos:start="233:13" pos:end="235:22"><if pos:start="233:13" pos:end="235:22">if <condition pos:start="233:16" pos:end="233:36">(<expr pos:start="233:17" pos:end="233:35"><name pos:start="233:17" pos:end="233:19">val</name> <operator pos:start="233:21" pos:end="233:21">&amp;</operator> <name pos:start="233:23" pos:end="233:35">UART_MCR_LOOP</name></expr>)</condition><block type="pseudo" pos:start="235:17" pos:end="235:22"><block_content pos:start="235:17" pos:end="235:22">

                <break pos:start="235:17" pos:end="235:22">break;</break></block_content></block></if></if_stmt>



            <if_stmt pos:start="239:13" pos:end="269:13"><if pos:start="239:13" pos:end="269:13">if <condition pos:start="239:16" pos:end="239:54">(<expr pos:start="239:17" pos:end="239:53"><name pos:start="239:17" pos:end="239:27"><name pos:start="239:17" pos:end="239:17">s</name><operator pos:start="239:18" pos:end="239:19">-&gt;</operator><name pos:start="239:20" pos:end="239:27">poll_msl</name></name> <operator pos:start="239:29" pos:end="239:30">&gt;=</operator> <literal type="number" pos:start="239:32" pos:end="239:32">0</literal> <operator pos:start="239:34" pos:end="239:35">&amp;&amp;</operator> <name pos:start="239:37" pos:end="239:43">old_mcr</name> <operator pos:start="239:45" pos:end="239:46">!=</operator> <name pos:start="239:48" pos:end="239:53"><name pos:start="239:48" pos:end="239:48">s</name><operator pos:start="239:49" pos:end="239:50">-&gt;</operator><name pos:start="239:51" pos:end="239:53">mcr</name></name></expr>)</condition> <block pos:start="239:56" pos:end="269:13">{<block_content pos:start="243:17" pos:end="267:111">



                <expr_stmt pos:start="243:17" pos:end="243:77"><expr pos:start="243:17" pos:end="243:76"><call pos:start="243:17" pos:end="243:76"><name pos:start="243:17" pos:end="243:33">qemu_chr_fe_ioctl</name><argument_list pos:start="243:34" pos:end="243:76">(<argument pos:start="243:35" pos:end="243:40"><expr pos:start="243:35" pos:end="243:40"><name pos:start="243:35" pos:end="243:40"><name pos:start="243:35" pos:end="243:35">s</name><operator pos:start="243:36" pos:end="243:37">-&gt;</operator><name pos:start="243:38" pos:end="243:40">chr</name></name></expr></argument>,<argument pos:start="243:42" pos:end="243:67"><expr pos:start="243:42" pos:end="243:67"><name pos:start="243:42" pos:end="243:67">CHR_IOCTL_SERIAL_GET_TIOCM</name></expr></argument>, <argument pos:start="243:70" pos:end="243:75"><expr pos:start="243:70" pos:end="243:75"><operator pos:start="243:70" pos:end="243:70">&amp;</operator><name pos:start="243:71" pos:end="243:75">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="247:17" pos:end="247:58"><expr pos:start="247:17" pos:end="247:57"><name pos:start="247:17" pos:end="247:21">flags</name> <operator pos:start="247:23" pos:end="247:24">&amp;=</operator> <operator pos:start="247:26" pos:end="247:26">~</operator><operator pos:start="247:27" pos:end="247:27">(</operator><name pos:start="247:28" pos:end="247:40">CHR_TIOCM_RTS</name> <operator pos:start="247:42" pos:end="247:42">|</operator> <name pos:start="247:44" pos:end="247:56">CHR_TIOCM_DTR</name><operator pos:start="247:57" pos:end="247:57">)</operator></expr>;</expr_stmt>



                <if_stmt pos:start="251:17" pos:end="253:43"><if pos:start="251:17" pos:end="253:43">if <condition pos:start="251:20" pos:end="251:39">(<expr pos:start="251:21" pos:end="251:38"><name pos:start="251:21" pos:end="251:23">val</name> <operator pos:start="251:25" pos:end="251:25">&amp;</operator> <name pos:start="251:27" pos:end="251:38">UART_MCR_RTS</name></expr>)</condition><block type="pseudo" pos:start="253:21" pos:end="253:43"><block_content pos:start="253:21" pos:end="253:43">

                    <expr_stmt pos:start="253:21" pos:end="253:43"><expr pos:start="253:21" pos:end="253:42"><name pos:start="253:21" pos:end="253:25">flags</name> <operator pos:start="253:27" pos:end="253:28">|=</operator> <name pos:start="253:30" pos:end="253:42">CHR_TIOCM_RTS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="255:17" pos:end="257:43"><if pos:start="255:17" pos:end="257:43">if <condition pos:start="255:20" pos:end="255:39">(<expr pos:start="255:21" pos:end="255:38"><name pos:start="255:21" pos:end="255:23">val</name> <operator pos:start="255:25" pos:end="255:25">&amp;</operator> <name pos:start="255:27" pos:end="255:38">UART_MCR_DTR</name></expr>)</condition><block type="pseudo" pos:start="257:21" pos:end="257:43"><block_content pos:start="257:21" pos:end="257:43">

                    <expr_stmt pos:start="257:21" pos:end="257:43"><expr pos:start="257:21" pos:end="257:42"><name pos:start="257:21" pos:end="257:25">flags</name> <operator pos:start="257:27" pos:end="257:28">|=</operator> <name pos:start="257:30" pos:end="257:42">CHR_TIOCM_DTR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <expr_stmt pos:start="261:17" pos:end="261:77"><expr pos:start="261:17" pos:end="261:76"><call pos:start="261:17" pos:end="261:76"><name pos:start="261:17" pos:end="261:33">qemu_chr_fe_ioctl</name><argument_list pos:start="261:34" pos:end="261:76">(<argument pos:start="261:35" pos:end="261:40"><expr pos:start="261:35" pos:end="261:40"><name pos:start="261:35" pos:end="261:40"><name pos:start="261:35" pos:end="261:35">s</name><operator pos:start="261:36" pos:end="261:37">-&gt;</operator><name pos:start="261:38" pos:end="261:40">chr</name></name></expr></argument>,<argument pos:start="261:42" pos:end="261:67"><expr pos:start="261:42" pos:end="261:67"><name pos:start="261:42" pos:end="261:67">CHR_IOCTL_SERIAL_SET_TIOCM</name></expr></argument>, <argument pos:start="261:70" pos:end="261:75"><expr pos:start="261:70" pos:end="261:75"><operator pos:start="261:70" pos:end="261:70">&amp;</operator><name pos:start="261:71" pos:end="261:75">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="263:17" pos:end="265:82">/* Update the modem status after a one-character-send wait-time, since there may be a response

                   from the device/computer at the other end of the serial line */</comment>

                <expr_stmt pos:start="267:17" pos:end="267:111"><expr pos:start="267:17" pos:end="267:110"><call pos:start="267:17" pos:end="267:110"><name pos:start="267:17" pos:end="267:25">timer_mod</name><argument_list pos:start="267:26" pos:end="267:110">(<argument pos:start="267:27" pos:end="267:46"><expr pos:start="267:27" pos:end="267:46"><name pos:start="267:27" pos:end="267:46"><name pos:start="267:27" pos:end="267:27">s</name><operator pos:start="267:28" pos:end="267:29">-&gt;</operator><name pos:start="267:30" pos:end="267:46">modem_status_poll</name></name></expr></argument>, <argument pos:start="267:49" pos:end="267:109"><expr pos:start="267:49" pos:end="267:109"><call pos:start="267:49" pos:end="267:85"><name pos:start="267:49" pos:end="267:65">qemu_clock_get_ns</name><argument_list pos:start="267:66" pos:end="267:85">(<argument pos:start="267:67" pos:end="267:84"><expr pos:start="267:67" pos:end="267:84"><name pos:start="267:67" pos:end="267:84">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call> <operator pos:start="267:87" pos:end="267:87">+</operator> <name pos:start="267:89" pos:end="267:109"><name pos:start="267:89" pos:end="267:89">s</name><operator pos:start="267:90" pos:end="267:91">-&gt;</operator><name pos:start="267:92" pos:end="267:109">char_transmit_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="273:9" pos:end="273:14">break;</break>

    <case pos:start="275:5" pos:end="275:11">case <expr pos:start="275:10" pos:end="275:10"><literal type="number" pos:start="275:10" pos:end="275:10">5</literal></expr>:</case>

        <break pos:start="277:9" pos:end="277:14">break;</break>

    <case pos:start="279:5" pos:end="279:11">case <expr pos:start="279:10" pos:end="279:10"><literal type="number" pos:start="279:10" pos:end="279:10">6</literal></expr>:</case>

        <break pos:start="281:9" pos:end="281:14">break;</break>

    <case pos:start="283:5" pos:end="283:11">case <expr pos:start="283:10" pos:end="283:10"><literal type="number" pos:start="283:10" pos:end="283:10">7</literal></expr>:</case>

        <expr_stmt pos:start="285:9" pos:end="285:21"><expr pos:start="285:9" pos:end="285:20"><name pos:start="285:9" pos:end="285:14"><name pos:start="285:9" pos:end="285:9">s</name><operator pos:start="285:10" pos:end="285:11">-&gt;</operator><name pos:start="285:12" pos:end="285:14">scr</name></name> <operator pos:start="285:16" pos:end="285:16">=</operator> <name pos:start="285:18" pos:end="285:20">val</name></expr>;</expr_stmt>

        <break pos:start="287:9" pos:end="287:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
