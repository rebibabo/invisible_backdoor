<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9201.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">spapr_memory_pre_plug</name><parameter_list pos:start="1:34" pos:end="3:47">(<parameter pos:start="1:35" pos:end="1:61"><decl pos:start="1:35" pos:end="1:61"><type pos:start="1:35" pos:end="1:61"><name pos:start="1:35" pos:end="1:48">HotplugHandler</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:61">hotplug_dev</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:79"><decl pos:start="1:64" pos:end="1:79"><type pos:start="1:64" pos:end="1:79"><name pos:start="1:64" pos:end="1:74">DeviceState</name> <modifier pos:start="1:76" pos:end="1:76">*</modifier></type><name pos:start="1:77" pos:end="1:79">dev</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:46"><decl pos:start="3:35" pos:end="3:46"><type pos:start="3:35" pos:end="3:46"><name pos:start="3:35" pos:end="3:39">Error</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier><modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:46">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="43:1">{<block_content pos:start="7:5" pos:end="41:5">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">PCDIMMDevice</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:22">dimm</name> <init pos:start="7:24" pos:end="7:37">= <expr pos:start="7:26" pos:end="7:37"><call pos:start="7:26" pos:end="7:37"><name pos:start="7:26" pos:end="7:32">PC_DIMM</name><argument_list pos:start="7:33" pos:end="7:37">(<argument pos:start="7:34" pos:end="7:36"><expr pos:start="7:34" pos:end="7:36"><name pos:start="7:34" pos:end="7:36">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:53"><decl pos:start="9:5" pos:end="9:52"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">PCDIMMDeviceClass</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:26">ddc</name> <init pos:start="9:28" pos:end="9:52">= <expr pos:start="9:30" pos:end="9:52"><call pos:start="9:30" pos:end="9:52"><name pos:start="9:30" pos:end="9:46">PC_DIMM_GET_CLASS</name><argument_list pos:start="9:47" pos:end="9:52">(<argument pos:start="9:48" pos:end="9:51"><expr pos:start="9:48" pos:end="9:51"><name pos:start="9:48" pos:end="9:51">dimm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:52"><decl pos:start="11:5" pos:end="11:51"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:20">mr</name> <init pos:start="11:22" pos:end="11:51">= <expr pos:start="11:24" pos:end="11:51"><call pos:start="11:24" pos:end="11:51"><name pos:start="11:24" pos:end="11:45"><name pos:start="11:24" pos:end="11:26">ddc</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:45">get_memory_region</name></name><argument_list pos:start="11:46" pos:end="11:51">(<argument pos:start="11:47" pos:end="11:50"><expr pos:start="11:47" pos:end="11:50"><name pos:start="11:47" pos:end="11:50">dimm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:17">size</name> <init pos:start="13:19" pos:end="13:42">= <expr pos:start="13:21" pos:end="13:42"><call pos:start="13:21" pos:end="13:42"><name pos:start="13:21" pos:end="13:38">memory_region_size</name><argument_list pos:start="13:39" pos:end="13:42">(<argument pos:start="13:40" pos:end="13:41"><expr pos:start="13:40" pos:end="13:41"><name pos:start="13:40" pos:end="13:41">mr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:17">mem_dev</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:39">(<expr pos:start="19:9" pos:end="19:38"><name pos:start="19:9" pos:end="19:12">size</name> <operator pos:start="19:14" pos:end="19:14">%</operator> <name pos:start="19:16" pos:end="19:38">SPAPR_MEMORY_BLOCK_SIZE</name></expr>)</condition> <block pos:start="19:41" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:15">

        <expr_stmt pos:start="21:9" pos:end="23:67"><expr pos:start="21:9" pos:end="23:66"><call pos:start="21:9" pos:end="23:66"><name pos:start="21:9" pos:end="21:18">error_setg</name><argument_list pos:start="21:19" pos:end="23:66">(<argument pos:start="21:20" pos:end="21:23"><expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">errp</name></expr></argument>, <argument pos:start="21:26" pos:end="23:31"><expr pos:start="21:26" pos:end="23:31"><literal type="string" pos:start="21:26" pos:end="21:72">"Hotplugged memory size must be a multiple of "</literal>

                      <literal type="string" pos:start="23:23" pos:end="23:31">"%lld MB"</literal></expr></argument>, <argument pos:start="23:34" pos:end="23:65"><expr pos:start="23:34" pos:end="23:65"><name pos:start="23:34" pos:end="23:56">SPAPR_MEMORY_BLOCK_SIZE</name> <operator pos:start="23:58" pos:end="23:58">/</operator> <name pos:start="23:60" pos:end="23:65">M_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:79"><expr pos:start="31:5" pos:end="31:78"><name pos:start="31:5" pos:end="31:11">mem_dev</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:78"><name pos:start="31:15" pos:end="31:37">object_property_get_str</name><argument_list pos:start="31:38" pos:end="31:78">(<argument pos:start="31:39" pos:end="31:50"><expr pos:start="31:39" pos:end="31:50"><call pos:start="31:39" pos:end="31:50"><name pos:start="31:39" pos:end="31:44">OBJECT</name><argument_list pos:start="31:45" pos:end="31:50">(<argument pos:start="31:46" pos:end="31:49"><expr pos:start="31:46" pos:end="31:49"><name pos:start="31:46" pos:end="31:49">dimm</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="31:53" pos:end="31:71"><expr pos:start="31:53" pos:end="31:71"><name pos:start="31:53" pos:end="31:71">PC_DIMM_MEMDEV_PROP</name></expr></argument>, <argument pos:start="31:74" pos:end="31:77"><expr pos:start="31:74" pos:end="31:77"><name pos:start="31:74" pos:end="31:77">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="41:5">if <condition pos:start="33:8" pos:end="33:64">(<expr pos:start="33:9" pos:end="33:63"><name pos:start="33:9" pos:end="33:15">mem_dev</name> <operator pos:start="33:17" pos:end="33:18">&amp;&amp;</operator> <operator pos:start="33:20" pos:end="33:20">!</operator><call pos:start="33:21" pos:end="33:63"><name pos:start="33:21" pos:end="33:54">kvmppc_is_mem_backend_page_size_ok</name><argument_list pos:start="33:55" pos:end="33:63">(<argument pos:start="33:56" pos:end="33:62"><expr pos:start="33:56" pos:end="33:62"><name pos:start="33:56" pos:end="33:62">mem_dev</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:66" pos:end="41:5">{<block_content pos:start="35:9" pos:end="39:15">

        <expr_stmt pos:start="35:9" pos:end="37:71"><expr pos:start="35:9" pos:end="37:70"><call pos:start="35:9" pos:end="37:70"><name pos:start="35:9" pos:end="35:18">error_setg</name><argument_list pos:start="35:19" pos:end="37:70">(<argument pos:start="35:20" pos:end="35:23"><expr pos:start="35:20" pos:end="35:23"><name pos:start="35:20" pos:end="35:23">errp</name></expr></argument>, <argument pos:start="35:26" pos:end="37:69"><expr pos:start="35:26" pos:end="37:69"><literal type="string" pos:start="35:26" pos:end="35:61">"Memory backend has bad page size. "</literal>

                   <literal type="string" pos:start="37:20" pos:end="37:69">"Use 'memory-backend-file' with correct mem-path."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
