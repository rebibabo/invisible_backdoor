<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10145.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">audio_encode_example</name><parameter_list pos:start="1:26" pos:end="1:47">(<parameter pos:start="1:27" pos:end="1:46"><decl pos:start="1:27" pos:end="1:46"><type pos:start="1:27" pos:end="1:38"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:46">filename</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="127:1">{<block_content pos:start="5:5" pos:end="125:12">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">AVCodec</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:18">codec</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">AVCodecContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">c</name><init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:48"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">frame_size</name></decl>, <decl pos:start="9:21" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:21">i</name></decl>, <decl pos:start="9:24" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:24" pos:end="9:24">j</name></decl>, <decl pos:start="9:27" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:27" pos:end="9:34">out_size</name></decl>, <decl pos:start="9:37" pos:end="9:47"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:37" pos:end="9:47">outbuf_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">FILE</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:11">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">short</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:18">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:9">float</name></type> <name pos:start="15:11" pos:end="15:11">t</name></decl>, <decl pos:start="15:14" pos:end="15:18"><type ref="prev" pos:start="15:5" pos:end="15:9"/><name pos:start="15:14" pos:end="15:18">tincr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:19">outbuf</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:31"><expr pos:start="21:5" pos:end="21:30"><call pos:start="21:5" pos:end="21:30"><name pos:start="21:5" pos:end="21:10">printf</name><argument_list pos:start="21:11" pos:end="21:30">(<argument pos:start="21:12" pos:end="21:29"><expr pos:start="21:12" pos:end="21:29"><literal type="string" pos:start="21:12" pos:end="21:29">"Audio encoding\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:30">/* find the MP2 encoder */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:47"><expr pos:start="27:5" pos:end="27:46"><name pos:start="27:5" pos:end="27:9">codec</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <call pos:start="27:13" pos:end="27:46"><name pos:start="27:13" pos:end="27:32">avcodec_find_encoder</name><argument_list pos:start="27:33" pos:end="27:46">(<argument pos:start="27:34" pos:end="27:45"><expr pos:start="27:34" pos:end="27:45"><name pos:start="27:34" pos:end="27:45">CODEC_ID_MP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:15">(<expr pos:start="29:9" pos:end="29:14"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:14">codec</name></expr>)</condition> <block pos:start="29:17" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:16">

        <expr_stmt pos:start="31:9" pos:end="31:45"><expr pos:start="31:9" pos:end="31:44"><call pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:15">fprintf</name><argument_list pos:start="31:16" pos:end="31:44">(<argument pos:start="31:17" pos:end="31:22"><expr pos:start="31:17" pos:end="31:22"><name pos:start="31:17" pos:end="31:22">stderr</name></expr></argument>, <argument pos:start="31:25" pos:end="31:43"><expr pos:start="31:25" pos:end="31:43"><literal type="string" pos:start="31:25" pos:end="31:43">"codec not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:16"><expr pos:start="33:9" pos:end="33:15"><call pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:12">exit</name><argument_list pos:start="33:13" pos:end="33:15">(<argument pos:start="33:14" pos:end="33:14"><expr pos:start="33:14" pos:end="33:14"><literal type="number" pos:start="33:14" pos:end="33:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:31"><expr pos:start="39:5" pos:end="39:30"><name pos:start="39:5" pos:end="39:5">c</name><operator pos:start="39:6" pos:end="39:6">=</operator> <call pos:start="39:8" pos:end="39:30"><name pos:start="39:8" pos:end="39:28">avcodec_alloc_context</name><argument_list pos:start="39:29" pos:end="39:30">()</argument_list></call></expr>;</expr_stmt>

    

    <comment type="block" pos:start="43:5" pos:end="43:31">/* put sample parameters */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:24"><expr pos:start="45:5" pos:end="45:23"><name pos:start="45:5" pos:end="45:15"><name pos:start="45:5" pos:end="45:5">c</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:15">bit_rate</name></name> <operator pos:start="45:17" pos:end="45:17">=</operator> <literal type="number" pos:start="45:19" pos:end="45:23">64000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:27"><expr pos:start="47:5" pos:end="47:26"><name pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:5">c</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:18">sample_rate</name></name> <operator pos:start="47:20" pos:end="47:20">=</operator> <literal type="number" pos:start="47:22" pos:end="47:26">44100</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:20"><expr pos:start="49:5" pos:end="49:19"><name pos:start="49:5" pos:end="49:15"><name pos:start="49:5" pos:end="49:5">c</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:15">channels</name></name> <operator pos:start="49:17" pos:end="49:17">=</operator> <literal type="number" pos:start="49:19" pos:end="49:19">2</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:17">/* open it */</comment>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:35">(<expr pos:start="55:9" pos:end="55:34"><call pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:20">avcodec_open</name><argument_list pos:start="55:21" pos:end="55:30">(<argument pos:start="55:22" pos:end="55:22"><expr pos:start="55:22" pos:end="55:22"><name pos:start="55:22" pos:end="55:22">c</name></expr></argument>, <argument pos:start="55:25" pos:end="55:29"><expr pos:start="55:25" pos:end="55:29"><name pos:start="55:25" pos:end="55:29">codec</name></expr></argument>)</argument_list></call> <operator pos:start="55:32" pos:end="55:32">&lt;</operator> <literal type="number" pos:start="55:34" pos:end="55:34">0</literal></expr>)</condition> <block pos:start="55:37" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:16">

        <expr_stmt pos:start="57:9" pos:end="57:50"><expr pos:start="57:9" pos:end="57:49"><call pos:start="57:9" pos:end="57:49"><name pos:start="57:9" pos:end="57:15">fprintf</name><argument_list pos:start="57:16" pos:end="57:49">(<argument pos:start="57:17" pos:end="57:22"><expr pos:start="57:17" pos:end="57:22"><name pos:start="57:17" pos:end="57:22">stderr</name></expr></argument>, <argument pos:start="57:25" pos:end="57:48"><expr pos:start="57:25" pos:end="57:48"><literal type="string" pos:start="57:25" pos:end="57:48">"could not open codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:16"><expr pos:start="59:9" pos:end="59:15"><call pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:12">exit</name><argument_list pos:start="59:13" pos:end="59:15">(<argument pos:start="59:14" pos:end="59:14"><expr pos:start="59:14" pos:end="59:14"><literal type="number" pos:start="59:14" pos:end="59:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    

    <comment type="block" pos:start="65:5" pos:end="65:55">/* the codec gives us the frame size, in samples */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:31"><expr pos:start="67:5" pos:end="67:30"><name pos:start="67:5" pos:end="67:14">frame_size</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <name pos:start="67:18" pos:end="67:30"><name pos:start="67:18" pos:end="67:18">c</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:30">frame_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:51"><expr pos:start="69:5" pos:end="69:50"><name pos:start="69:5" pos:end="69:11">samples</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:50"><name pos:start="69:15" pos:end="69:20">malloc</name><argument_list pos:start="69:21" pos:end="69:50">(<argument pos:start="69:22" pos:end="69:49"><expr pos:start="69:22" pos:end="69:49"><name pos:start="69:22" pos:end="69:31">frame_size</name> <operator pos:start="69:33" pos:end="69:33">*</operator> <literal type="number" pos:start="69:35" pos:end="69:35">2</literal> <operator pos:start="69:37" pos:end="69:37">*</operator> <name pos:start="69:39" pos:end="69:49"><name pos:start="69:39" pos:end="69:39">c</name><operator pos:start="69:40" pos:end="69:41">-&gt;</operator><name pos:start="69:42" pos:end="69:49">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:24"><expr pos:start="71:5" pos:end="71:23"><name pos:start="71:5" pos:end="71:15">outbuf_size</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <literal type="number" pos:start="71:19" pos:end="71:23">10000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:33"><expr pos:start="73:5" pos:end="73:32"><name pos:start="73:5" pos:end="73:10">outbuf</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <call pos:start="73:14" pos:end="73:32"><name pos:start="73:14" pos:end="73:19">malloc</name><argument_list pos:start="73:20" pos:end="73:32">(<argument pos:start="73:21" pos:end="73:31"><expr pos:start="73:21" pos:end="73:31"><name pos:start="73:21" pos:end="73:31">outbuf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:29"><expr pos:start="77:5" pos:end="77:28"><name pos:start="77:5" pos:end="77:5">f</name> <operator pos:start="77:7" pos:end="77:7">=</operator> <call pos:start="77:9" pos:end="77:28"><name pos:start="77:9" pos:end="77:13">fopen</name><argument_list pos:start="77:14" pos:end="77:28">(<argument pos:start="77:15" pos:end="77:22"><expr pos:start="77:15" pos:end="77:22"><name pos:start="77:15" pos:end="77:22">filename</name></expr></argument>, <argument pos:start="77:25" pos:end="77:27"><expr pos:start="77:25" pos:end="77:27"><literal type="string" pos:start="77:25" pos:end="77:27">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:11">(<expr pos:start="79:9" pos:end="79:10"><operator pos:start="79:9" pos:end="79:9">!</operator><name pos:start="79:10" pos:end="79:10">f</name></expr>)</condition> <block pos:start="79:13" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:16">

        <expr_stmt pos:start="81:9" pos:end="81:57"><expr pos:start="81:9" pos:end="81:56"><call pos:start="81:9" pos:end="81:56"><name pos:start="81:9" pos:end="81:15">fprintf</name><argument_list pos:start="81:16" pos:end="81:56">(<argument pos:start="81:17" pos:end="81:22"><expr pos:start="81:17" pos:end="81:22"><name pos:start="81:17" pos:end="81:22">stderr</name></expr></argument>, <argument pos:start="81:25" pos:end="81:45"><expr pos:start="81:25" pos:end="81:45"><literal type="string" pos:start="81:25" pos:end="81:45">"could not open %s\n"</literal></expr></argument>, <argument pos:start="81:48" pos:end="81:55"><expr pos:start="81:48" pos:end="81:55"><name pos:start="81:48" pos:end="81:55">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:16"><expr pos:start="83:9" pos:end="83:15"><call pos:start="83:9" pos:end="83:15"><name pos:start="83:9" pos:end="83:12">exit</name><argument_list pos:start="83:13" pos:end="83:15">(<argument pos:start="83:14" pos:end="83:14"><expr pos:start="83:14" pos:end="83:14"><literal type="number" pos:start="83:14" pos:end="83:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

        

    <comment type="block" pos:start="89:5" pos:end="89:36">/* encode a single tone sound */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:10"><expr pos:start="91:5" pos:end="91:9"><name pos:start="91:5" pos:end="91:5">t</name> <operator pos:start="91:7" pos:end="91:7">=</operator> <literal type="number" pos:start="91:9" pos:end="91:9">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:46"><expr pos:start="93:5" pos:end="93:45"><name pos:start="93:5" pos:end="93:9">tincr</name> <operator pos:start="93:11" pos:end="93:11">=</operator> <literal type="number" pos:start="93:13" pos:end="93:13">2</literal> <operator pos:start="93:15" pos:end="93:15">*</operator> <name pos:start="93:17" pos:end="93:20">M_PI</name> <operator pos:start="93:22" pos:end="93:22">*</operator> <literal type="number" pos:start="93:24" pos:end="93:28">440.0</literal> <operator pos:start="93:30" pos:end="93:30">/</operator> <name pos:start="93:32" pos:end="93:45"><name pos:start="93:32" pos:end="93:32">c</name><operator pos:start="93:33" pos:end="93:34">-&gt;</operator><name pos:start="93:35" pos:end="93:45">sample_rate</name></name></expr>;</expr_stmt>

    <for pos:start="95:5" pos:end="113:5">for<control pos:start="95:8" pos:end="95:22">(<init pos:start="95:9" pos:end="95:12"><expr pos:start="95:9" pos:end="95:11"><name pos:start="95:9" pos:end="95:9">i</name><operator pos:start="95:10" pos:end="95:10">=</operator><literal type="number" pos:start="95:11" pos:end="95:11">0</literal></expr>;</init><condition pos:start="95:13" pos:end="95:18"><expr pos:start="95:13" pos:end="95:17"><name pos:start="95:13" pos:end="95:13">i</name><operator pos:start="95:14" pos:end="95:14">&lt;</operator><literal type="number" pos:start="95:15" pos:end="95:17">200</literal></expr>;</condition><incr pos:start="95:19" pos:end="95:21"><expr pos:start="95:19" pos:end="95:21"><name pos:start="95:19" pos:end="95:19">i</name><operator pos:start="95:20" pos:end="95:21">++</operator></expr></incr>)</control> <block pos:start="95:24" pos:end="113:5">{<block_content pos:start="97:9" pos:end="111:39">

        <for pos:start="97:9" pos:end="105:9">for<control pos:start="97:12" pos:end="97:33">(<init pos:start="97:13" pos:end="97:16"><expr pos:start="97:13" pos:end="97:15"><name pos:start="97:13" pos:end="97:13">j</name><operator pos:start="97:14" pos:end="97:14">=</operator><literal type="number" pos:start="97:15" pos:end="97:15">0</literal></expr>;</init><condition pos:start="97:17" pos:end="97:29"><expr pos:start="97:17" pos:end="97:28"><name pos:start="97:17" pos:end="97:17">j</name><operator pos:start="97:18" pos:end="97:18">&lt;</operator><name pos:start="97:19" pos:end="97:28">frame_size</name></expr>;</condition><incr pos:start="97:30" pos:end="97:32"><expr pos:start="97:30" pos:end="97:32"><name pos:start="97:30" pos:end="97:30">j</name><operator pos:start="97:31" pos:end="97:32">++</operator></expr></incr>)</control> <block pos:start="97:35" pos:end="105:9">{<block_content pos:start="99:13" pos:end="103:23">

            <expr_stmt pos:start="99:13" pos:end="99:49"><expr pos:start="99:13" pos:end="99:48"><name pos:start="99:13" pos:end="99:24"><name pos:start="99:13" pos:end="99:19">samples</name><index pos:start="99:20" pos:end="99:24">[<expr pos:start="99:21" pos:end="99:23"><literal type="number" pos:start="99:21" pos:end="99:21">2</literal><operator pos:start="99:22" pos:end="99:22">*</operator><name pos:start="99:23" pos:end="99:23">j</name></expr>]</index></name> <operator pos:start="99:26" pos:end="99:26">=</operator> <operator pos:start="99:28" pos:end="99:28">(</operator><name pos:start="99:29" pos:end="99:31">int</name><operator pos:start="99:32" pos:end="99:32">)</operator><operator pos:start="99:33" pos:end="99:33">(</operator><call pos:start="99:34" pos:end="99:39"><name pos:start="99:34" pos:end="99:36">sin</name><argument_list pos:start="99:37" pos:end="99:39">(<argument pos:start="99:38" pos:end="99:38"><expr pos:start="99:38" pos:end="99:38"><name pos:start="99:38" pos:end="99:38">t</name></expr></argument>)</argument_list></call> <operator pos:start="99:41" pos:end="99:41">*</operator> <literal type="number" pos:start="99:43" pos:end="99:47">10000</literal><operator pos:start="99:48" pos:end="99:48">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:42"><expr pos:start="101:13" pos:end="101:41"><name pos:start="101:13" pos:end="101:26"><name pos:start="101:13" pos:end="101:19">samples</name><index pos:start="101:20" pos:end="101:26">[<expr pos:start="101:21" pos:end="101:25"><literal type="number" pos:start="101:21" pos:end="101:21">2</literal><operator pos:start="101:22" pos:end="101:22">*</operator><name pos:start="101:23" pos:end="101:23">j</name><operator pos:start="101:24" pos:end="101:24">+</operator><literal type="number" pos:start="101:25" pos:end="101:25">1</literal></expr>]</index></name> <operator pos:start="101:28" pos:end="101:28">=</operator> <name pos:start="101:30" pos:end="101:41"><name pos:start="101:30" pos:end="101:36">samples</name><index pos:start="101:37" pos:end="101:41">[<expr pos:start="101:38" pos:end="101:40"><literal type="number" pos:start="101:38" pos:end="101:38">2</literal><operator pos:start="101:39" pos:end="101:39">*</operator><name pos:start="101:40" pos:end="101:40">j</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:23"><expr pos:start="103:13" pos:end="103:22"><name pos:start="103:13" pos:end="103:13">t</name> <operator pos:start="103:15" pos:end="103:16">+=</operator> <name pos:start="103:18" pos:end="103:22">tincr</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="107:9" pos:end="107:32">/* encode the samples */</comment>

        <expr_stmt pos:start="109:9" pos:end="109:73"><expr pos:start="109:9" pos:end="109:72"><name pos:start="109:9" pos:end="109:16">out_size</name> <operator pos:start="109:18" pos:end="109:18">=</operator> <call pos:start="109:20" pos:end="109:72"><name pos:start="109:20" pos:end="109:39">avcodec_encode_audio</name><argument_list pos:start="109:40" pos:end="109:72">(<argument pos:start="109:41" pos:end="109:41"><expr pos:start="109:41" pos:end="109:41"><name pos:start="109:41" pos:end="109:41">c</name></expr></argument>, <argument pos:start="109:44" pos:end="109:49"><expr pos:start="109:44" pos:end="109:49"><name pos:start="109:44" pos:end="109:49">outbuf</name></expr></argument>, <argument pos:start="109:52" pos:end="109:62"><expr pos:start="109:52" pos:end="109:62"><name pos:start="109:52" pos:end="109:62">outbuf_size</name></expr></argument>, <argument pos:start="109:65" pos:end="109:71"><expr pos:start="109:65" pos:end="109:71"><name pos:start="109:65" pos:end="109:71">samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:39"><expr pos:start="111:9" pos:end="111:38"><call pos:start="111:9" pos:end="111:38"><name pos:start="111:9" pos:end="111:14">fwrite</name><argument_list pos:start="111:15" pos:end="111:38">(<argument pos:start="111:16" pos:end="111:21"><expr pos:start="111:16" pos:end="111:21"><name pos:start="111:16" pos:end="111:21">outbuf</name></expr></argument>, <argument pos:start="111:24" pos:end="111:24"><expr pos:start="111:24" pos:end="111:24"><literal type="number" pos:start="111:24" pos:end="111:24">1</literal></expr></argument>, <argument pos:start="111:27" pos:end="111:34"><expr pos:start="111:27" pos:end="111:34"><name pos:start="111:27" pos:end="111:34">out_size</name></expr></argument>, <argument pos:start="111:37" pos:end="111:37"><expr pos:start="111:37" pos:end="111:37"><name pos:start="111:37" pos:end="111:37">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="115:5" pos:end="115:14"><expr pos:start="115:5" pos:end="115:13"><call pos:start="115:5" pos:end="115:13"><name pos:start="115:5" pos:end="115:10">fclose</name><argument_list pos:start="115:11" pos:end="115:13">(<argument pos:start="115:12" pos:end="115:12"><expr pos:start="115:12" pos:end="115:12"><name pos:start="115:12" pos:end="115:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:17"><expr pos:start="117:5" pos:end="117:16"><call pos:start="117:5" pos:end="117:16"><name pos:start="117:5" pos:end="117:8">free</name><argument_list pos:start="117:9" pos:end="117:16">(<argument pos:start="117:10" pos:end="117:15"><expr pos:start="117:10" pos:end="117:15"><name pos:start="117:10" pos:end="117:15">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:18"><expr pos:start="119:5" pos:end="119:17"><call pos:start="119:5" pos:end="119:17"><name pos:start="119:5" pos:end="119:8">free</name><argument_list pos:start="119:9" pos:end="119:17">(<argument pos:start="119:10" pos:end="119:16"><expr pos:start="119:10" pos:end="119:16"><name pos:start="119:10" pos:end="119:16">samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:21"><expr pos:start="123:5" pos:end="123:20"><call pos:start="123:5" pos:end="123:20"><name pos:start="123:5" pos:end="123:17">avcodec_close</name><argument_list pos:start="123:18" pos:end="123:20">(<argument pos:start="123:19" pos:end="123:19"><expr pos:start="123:19" pos:end="123:19"><name pos:start="123:19" pos:end="123:19">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:12"><expr pos:start="125:5" pos:end="125:11"><call pos:start="125:5" pos:end="125:11"><name pos:start="125:5" pos:end="125:8">free</name><argument_list pos:start="125:9" pos:end="125:11">(<argument pos:start="125:10" pos:end="125:10"><expr pos:start="125:10" pos:end="125:10"><name pos:start="125:10" pos:end="125:10">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
