<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5414.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:37">scsi_block_is_passthrough</name><parameter_list pos:start="1:38" pos:end="1:69">(<parameter pos:start="1:39" pos:end="1:54"><decl pos:start="1:39" pos:end="1:54"><type pos:start="1:39" pos:end="1:54"><name pos:start="1:39" pos:end="1:51">SCSIDiskState</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:54">s</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:68"><decl pos:start="1:57" pos:end="1:68"><type pos:start="1:57" pos:end="1:68"><name pos:start="1:57" pos:end="1:63">uint8_t</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">buf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:16">

    <switch pos:start="5:5" pos:end="79:5">switch <condition pos:start="5:12" pos:end="5:19">(<expr pos:start="5:13" pos:end="5:18"><name pos:start="5:13" pos:end="5:18"><name pos:start="5:13" pos:end="5:15">buf</name><index pos:start="5:16" pos:end="5:18">[<expr pos:start="5:17" pos:end="5:17"><literal type="number" pos:start="5:17" pos:end="5:17">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="5:21" pos:end="79:5">{<block_content pos:start="7:5" pos:end="77:14">

    <case pos:start="7:5" pos:end="7:19">case <expr pos:start="7:10" pos:end="7:18"><name pos:start="7:10" pos:end="7:18">VERIFY_10</name></expr>:</case>

    <case pos:start="9:5" pos:end="9:19">case <expr pos:start="9:10" pos:end="9:18"><name pos:start="9:10" pos:end="9:18">VERIFY_12</name></expr>:</case>

    <case pos:start="11:5" pos:end="11:19">case <expr pos:start="11:10" pos:end="11:18"><name pos:start="11:10" pos:end="11:18">VERIFY_16</name></expr>:</case>

        <comment type="block" pos:start="13:9" pos:end="19:11">/* Check if BYTCHK == 0x01 (data-out buffer contains data

         * for the number of logical blocks specified in the length

         * field).  For other modes, do not use scatter/gather operation.

         */</comment>

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:30">(<expr pos:start="21:13" pos:end="21:29"><operator pos:start="21:13" pos:end="21:13">(</operator><name pos:start="21:14" pos:end="21:19"><name pos:start="21:14" pos:end="21:16">buf</name><index pos:start="21:17" pos:end="21:19">[<expr pos:start="21:18" pos:end="21:18"><literal type="number" pos:start="21:18" pos:end="21:18">1</literal></expr>]</index></name> <operator pos:start="21:21" pos:end="21:21">&amp;</operator> <literal type="number" pos:start="21:23" pos:end="21:23">6</literal><operator pos:start="21:24" pos:end="21:24">)</operator> <operator pos:start="21:26" pos:end="21:27">!=</operator> <literal type="number" pos:start="21:29" pos:end="21:29">2</literal></expr>)</condition> <block pos:start="21:32" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:25">

            <return pos:start="23:13" pos:end="23:25">return <expr pos:start="23:20" pos:end="23:24"><name pos:start="23:20" pos:end="23:24">false</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="27:9" pos:end="27:14">break;</break>



    <case pos:start="31:5" pos:end="31:16">case <expr pos:start="31:10" pos:end="31:15"><name pos:start="31:10" pos:end="31:15">READ_6</name></expr>:</case>

    <case pos:start="33:5" pos:end="33:17">case <expr pos:start="33:10" pos:end="33:16"><name pos:start="33:10" pos:end="33:16">READ_10</name></expr>:</case>

    <case pos:start="35:5" pos:end="35:17">case <expr pos:start="35:10" pos:end="35:16"><name pos:start="35:10" pos:end="35:16">READ_12</name></expr>:</case>

    <case pos:start="37:5" pos:end="37:17">case <expr pos:start="37:10" pos:end="37:16"><name pos:start="37:10" pos:end="37:16">READ_16</name></expr>:</case>

    <case pos:start="39:5" pos:end="39:17">case <expr pos:start="39:10" pos:end="39:16"><name pos:start="39:10" pos:end="39:16">WRITE_6</name></expr>:</case>

    <case pos:start="41:5" pos:end="41:18">case <expr pos:start="41:10" pos:end="41:17"><name pos:start="41:10" pos:end="41:17">WRITE_10</name></expr>:</case>

    <case pos:start="43:5" pos:end="43:18">case <expr pos:start="43:10" pos:end="43:17"><name pos:start="43:10" pos:end="43:17">WRITE_12</name></expr>:</case>

    <case pos:start="45:5" pos:end="45:18">case <expr pos:start="45:10" pos:end="45:17"><name pos:start="45:10" pos:end="45:17">WRITE_16</name></expr>:</case>

    <case pos:start="47:5" pos:end="47:25">case <expr pos:start="47:10" pos:end="47:24"><name pos:start="47:10" pos:end="47:24">WRITE_VERIFY_10</name></expr>:</case>

    <case pos:start="49:5" pos:end="49:25">case <expr pos:start="49:10" pos:end="49:24"><name pos:start="49:10" pos:end="49:24">WRITE_VERIFY_12</name></expr>:</case>

    <case pos:start="51:5" pos:end="51:25">case <expr pos:start="51:10" pos:end="51:24"><name pos:start="51:10" pos:end="51:24">WRITE_VERIFY_16</name></expr>:</case>

        <comment type="block" pos:start="53:9" pos:end="63:11">/* MMC writing cannot be done via DMA helpers, because it sometimes

         * involves writing beyond the maximum LBA or to negative LBA (lead-in).

         * We might use scsi_disk_dma_reqops as long as no writing commands are

         * seen, but performance usually isn't paramount on optical media.  So,

         * just make scsi-block operate the same as scsi-generic for them.

         */</comment>

        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:37">(<expr pos:start="65:13" pos:end="65:36"><name pos:start="65:13" pos:end="65:24"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:19">qdev</name><operator pos:start="65:20" pos:end="65:20">.</operator><name pos:start="65:21" pos:end="65:24">type</name></name> <operator pos:start="65:26" pos:end="65:27">!=</operator> <name pos:start="65:29" pos:end="65:36">TYPE_ROM</name></expr>)</condition> <block pos:start="65:39" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:25">

            <return pos:start="67:13" pos:end="67:25">return <expr pos:start="67:20" pos:end="67:24"><name pos:start="67:20" pos:end="67:24">false</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="71:9" pos:end="71:14">break;</break>



    <default pos:start="75:5" pos:end="75:12">default:</default>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="83:5" pos:end="83:16">return <expr pos:start="83:12" pos:end="83:15"><name pos:start="83:12" pos:end="83:15">true</name></expr>;</return>

</block_content>}</block></function>
</unit>
