<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7550.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">float32</name></type> <name pos:start="1:16" pos:end="1:34">roundAndPackFloat32</name><parameter_list pos:start="1:35" pos:end="1:87">( <parameter pos:start="1:37" pos:end="1:46"><decl pos:start="1:37" pos:end="1:46"><type pos:start="1:37" pos:end="1:46"><name pos:start="1:37" pos:end="1:40">flag</name></type> <name pos:start="1:42" pos:end="1:46">zSign</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:58"><decl pos:start="1:49" pos:end="1:58"><type pos:start="1:49" pos:end="1:58"><name pos:start="1:49" pos:end="1:53">int16</name></type> <name pos:start="1:55" pos:end="1:58">zExp</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:86"><decl pos:start="1:61" pos:end="1:86"><type pos:start="1:61" pos:end="1:86"><name pos:start="1:61" pos:end="1:68">uint32_t</name> <name pos:start="1:70" pos:end="1:73">zSig</name></type> <name pos:start="1:75" pos:end="1:86">STATUS_PARAM</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="99:44">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">int8</name></type> <name pos:start="5:10" pos:end="5:21">roundingMode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">flag</name></type> <name pos:start="7:10" pos:end="7:25">roundNearestEven</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">int8</name></type> <name pos:start="9:10" pos:end="9:23">roundIncrement</name></decl>, <decl pos:start="9:26" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:8"/><name pos:start="9:26" pos:end="9:34">roundBits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">flag</name></type> <name pos:start="11:10" pos:end="11:15">isTiny</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:47"><expr pos:start="15:5" pos:end="15:46"><name pos:start="15:5" pos:end="15:16">roundingMode</name> <operator pos:start="15:18" pos:end="15:18">=</operator> <call pos:start="15:20" pos:end="15:46"><name pos:start="15:20" pos:end="15:25">STATUS</name><argument_list pos:start="15:26" pos:end="15:46">(<argument pos:start="15:27" pos:end="15:45"><expr pos:start="15:27" pos:end="15:45"><name pos:start="15:27" pos:end="15:45">float_rounding_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:68"><expr pos:start="17:5" pos:end="17:67"><name pos:start="17:5" pos:end="17:20">roundNearestEven</name> <operator pos:start="17:22" pos:end="17:22">=</operator> <operator pos:start="17:24" pos:end="17:24">(</operator> <name pos:start="17:26" pos:end="17:37">roundingMode</name> <operator pos:start="17:39" pos:end="17:40">==</operator> <name pos:start="17:42" pos:end="17:65">float_round_nearest_even</name> <operator pos:start="17:67" pos:end="17:67">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:26"><expr pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:18">roundIncrement</name> <operator pos:start="19:20" pos:end="19:20">=</operator> <literal type="number" pos:start="19:22" pos:end="19:25">0x40</literal></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="47:5"><if pos:start="21:5" pos:end="47:5">if <condition pos:start="21:8" pos:end="21:29">( <expr pos:start="21:10" pos:end="21:27"><operator pos:start="21:10" pos:end="21:10">!</operator> <name pos:start="21:12" pos:end="21:27">roundNearestEven</name></expr> )</condition> <block pos:start="21:31" pos:end="47:5">{<block_content pos:start="23:9" pos:end="45:9">

        <if_stmt pos:start="23:9" pos:end="45:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:50">( <expr pos:start="23:14" pos:end="23:48"><name pos:start="23:14" pos:end="23:25">roundingMode</name> <operator pos:start="23:27" pos:end="23:28">==</operator> <name pos:start="23:30" pos:end="23:48">float_round_to_zero</name></expr> )</condition> <block pos:start="23:52" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:31">

            <expr_stmt pos:start="25:13" pos:end="25:31"><expr pos:start="25:13" pos:end="25:30"><name pos:start="25:13" pos:end="25:26">roundIncrement</name> <operator pos:start="25:28" pos:end="25:28">=</operator> <literal type="number" pos:start="25:30" pos:end="25:30">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="29:9" pos:end="45:9">else <block pos:start="29:14" pos:end="45:9">{<block_content pos:start="31:13" pos:end="43:13">

            <expr_stmt pos:start="31:13" pos:end="31:34"><expr pos:start="31:13" pos:end="31:33"><name pos:start="31:13" pos:end="31:26">roundIncrement</name> <operator pos:start="31:28" pos:end="31:28">=</operator> <literal type="number" pos:start="31:30" pos:end="31:33">0x7F</literal></expr>;</expr_stmt>

            <if_stmt pos:start="33:13" pos:end="43:13"><if pos:start="33:13" pos:end="37:13">if <condition pos:start="33:16" pos:end="33:24">( <expr pos:start="33:18" pos:end="33:22"><name pos:start="33:18" pos:end="33:22">zSign</name></expr> )</condition> <block pos:start="33:26" pos:end="37:13">{<block_content pos:start="35:17" pos:end="35:73">

                <if_stmt pos:start="35:17" pos:end="35:73"><if pos:start="35:17" pos:end="35:73">if <condition pos:start="35:20" pos:end="35:53">( <expr pos:start="35:22" pos:end="35:51"><name pos:start="35:22" pos:end="35:33">roundingMode</name> <operator pos:start="35:35" pos:end="35:36">==</operator> <name pos:start="35:38" pos:end="35:51">float_round_up</name></expr> )</condition><block type="pseudo" pos:start="35:55" pos:end="35:73"><block_content pos:start="35:55" pos:end="35:73"> <expr_stmt pos:start="35:55" pos:end="35:73"><expr pos:start="35:55" pos:end="35:72"><name pos:start="35:55" pos:end="35:68">roundIncrement</name> <operator pos:start="35:70" pos:end="35:70">=</operator> <literal type="number" pos:start="35:72" pos:end="35:72">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if>

            <else pos:start="39:13" pos:end="43:13">else <block pos:start="39:18" pos:end="43:13">{<block_content pos:start="41:17" pos:end="41:75">

                <if_stmt pos:start="41:17" pos:end="41:75"><if pos:start="41:17" pos:end="41:75">if <condition pos:start="41:20" pos:end="41:55">( <expr pos:start="41:22" pos:end="41:53"><name pos:start="41:22" pos:end="41:33">roundingMode</name> <operator pos:start="41:35" pos:end="41:36">==</operator> <name pos:start="41:38" pos:end="41:53">float_round_down</name></expr> )</condition><block type="pseudo" pos:start="41:57" pos:end="41:75"><block_content pos:start="41:57" pos:end="41:75"> <expr_stmt pos:start="41:57" pos:end="41:75"><expr pos:start="41:57" pos:end="41:74"><name pos:start="41:57" pos:end="41:70">roundIncrement</name> <operator pos:start="41:72" pos:end="41:72">=</operator> <literal type="number" pos:start="41:74" pos:end="41:74">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:28"><expr pos:start="49:5" pos:end="49:27"><name pos:start="49:5" pos:end="49:13">roundBits</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <name pos:start="49:17" pos:end="49:20">zSig</name> <operator pos:start="49:22" pos:end="49:22">&amp;</operator> <literal type="number" pos:start="49:24" pos:end="49:27">0x7F</literal></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="89:5"><if pos:start="51:5" pos:end="89:5">if <condition pos:start="51:8" pos:end="51:34">( <expr pos:start="51:10" pos:end="51:32"><literal type="number" pos:start="51:10" pos:end="51:13">0xFD</literal> <operator pos:start="51:15" pos:end="51:16">&lt;=</operator> <operator pos:start="51:18" pos:end="51:18">(</operator><name pos:start="51:19" pos:end="51:26">uint16_t</name><operator pos:start="51:27" pos:end="51:27">)</operator> <name pos:start="51:29" pos:end="51:32">zExp</name></expr> )</condition> <block pos:start="51:36" pos:end="89:5">{<block_content pos:start="53:9" pos:end="87:9">

        <if_stmt pos:start="53:9" pos:end="65:9"><if pos:start="53:9" pos:end="65:9">if <condition pos:start="53:12" pos:end="59:12">(    <expr pos:start="53:17" pos:end="57:66"><operator pos:start="53:17" pos:end="53:17">(</operator> <literal type="number" pos:start="53:19" pos:end="53:22">0xFD</literal> <operator pos:start="53:24" pos:end="53:24">&lt;</operator> <name pos:start="53:26" pos:end="53:29">zExp</name> <operator pos:start="53:31" pos:end="53:31">)</operator>

             <operator pos:start="55:14" pos:end="55:15">||</operator> <operator pos:start="55:17" pos:end="55:17">(</operator>    <operator pos:start="55:22" pos:end="55:22">(</operator> <name pos:start="55:24" pos:end="55:27">zExp</name> <operator pos:start="55:29" pos:end="55:30">==</operator> <literal type="number" pos:start="55:32" pos:end="55:35">0xFD</literal> <operator pos:start="55:37" pos:end="55:37">)</operator>

                  <operator pos:start="57:19" pos:end="57:20">&amp;&amp;</operator> <operator pos:start="57:22" pos:end="57:22">(</operator> <operator pos:start="57:24" pos:end="57:24">(</operator><name pos:start="57:25" pos:end="57:31">int32_t</name><operator pos:start="57:32" pos:end="57:32">)</operator> <operator pos:start="57:34" pos:end="57:34">(</operator> <name pos:start="57:36" pos:end="57:39">zSig</name> <operator pos:start="57:41" pos:end="57:41">+</operator> <name pos:start="57:43" pos:end="57:56">roundIncrement</name> <operator pos:start="57:58" pos:end="57:58">)</operator> <operator pos:start="57:60" pos:end="57:60">&lt;</operator> <literal type="number" pos:start="57:62" pos:end="57:62">0</literal> <operator pos:start="57:64" pos:end="57:64">)</operator> <operator pos:start="57:66" pos:end="57:66">)</operator></expr>

           )</condition> <block pos:start="59:14" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:72">

            <macro pos:start="61:13" pos:end="61:77"><name pos:start="61:13" pos:end="61:23">float_raise</name><argument_list pos:start="61:24" pos:end="61:77">( <argument pos:start="61:26" pos:end="61:76">float_flag_overflow | float_flag_inexact STATUS_VAR</argument>)</argument_list></macro><empty_stmt pos:start="61:78" pos:end="61:78">;</empty_stmt>

            <return pos:start="63:13" pos:end="63:72">return <expr pos:start="63:20" pos:end="63:71"><call pos:start="63:20" pos:end="63:71"><name pos:start="63:20" pos:end="63:30">packFloat32</name><argument_list pos:start="63:31" pos:end="63:71">( <argument pos:start="63:33" pos:end="63:37"><expr pos:start="63:33" pos:end="63:37"><name pos:start="63:33" pos:end="63:37">zSign</name></expr></argument>, <argument pos:start="63:40" pos:end="63:43"><expr pos:start="63:40" pos:end="63:43"><literal type="number" pos:start="63:40" pos:end="63:43">0xFF</literal></expr></argument>, <argument pos:start="63:46" pos:end="63:70"><expr pos:start="63:46" pos:end="63:70"><operator pos:start="63:46" pos:end="63:46">-</operator> <operator pos:start="63:48" pos:end="63:48">(</operator> <name pos:start="63:50" pos:end="63:63">roundIncrement</name> <operator pos:start="63:65" pos:end="63:66">==</operator> <literal type="number" pos:start="63:68" pos:end="63:68">0</literal> <operator pos:start="63:70" pos:end="63:70">)</operator></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="87:9"><if pos:start="67:9" pos:end="87:9">if <condition pos:start="67:12" pos:end="67:23">( <expr pos:start="67:14" pos:end="67:21"><name pos:start="67:14" pos:end="67:17">zExp</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <literal type="number" pos:start="67:21" pos:end="67:21">0</literal></expr> )</condition> <block pos:start="67:25" pos:end="87:9">{<block_content pos:start="69:13" pos:end="85:85">

            <if_stmt pos:start="69:13" pos:end="69:75"><if pos:start="69:13" pos:end="69:75">if <condition pos:start="69:16" pos:end="69:40">( <expr pos:start="69:18" pos:end="69:38"><call pos:start="69:18" pos:end="69:38"><name pos:start="69:18" pos:end="69:23">STATUS</name><argument_list pos:start="69:24" pos:end="69:38">(<argument pos:start="69:25" pos:end="69:37"><expr pos:start="69:25" pos:end="69:37"><name pos:start="69:25" pos:end="69:37">flush_to_zero</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo" pos:start="69:42" pos:end="69:75"><block_content pos:start="69:42" pos:end="69:75"> <return pos:start="69:42" pos:end="69:75">return <expr pos:start="69:49" pos:end="69:74"><call pos:start="69:49" pos:end="69:74"><name pos:start="69:49" pos:end="69:59">packFloat32</name><argument_list pos:start="69:60" pos:end="69:74">( <argument pos:start="69:62" pos:end="69:66"><expr pos:start="69:62" pos:end="69:66"><name pos:start="69:62" pos:end="69:66">zSign</name></expr></argument>, <argument pos:start="69:69" pos:end="69:69"><expr pos:start="69:69" pos:end="69:69"><literal type="number" pos:start="69:69" pos:end="69:69">0</literal></expr></argument>, <argument pos:start="69:72" pos:end="69:72"><expr pos:start="69:72" pos:end="69:72"><literal type="number" pos:start="69:72" pos:end="69:72">0</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="71:13" pos:end="77:58"><expr pos:start="71:13" pos:end="77:57"><name pos:start="71:13" pos:end="71:18">isTiny</name> <operator pos:start="71:20" pos:end="71:20">=</operator>

                   <operator pos:start="73:20" pos:end="73:20">(</operator> <call pos:start="73:22" pos:end="73:50"><name pos:start="73:22" pos:end="73:27">STATUS</name><argument_list pos:start="73:28" pos:end="73:50">(<argument pos:start="73:29" pos:end="73:49"><expr pos:start="73:29" pos:end="73:49"><name pos:start="73:29" pos:end="73:49">float_detect_tininess</name></expr></argument>)</argument_list></call> <operator pos:start="73:52" pos:end="73:53">==</operator> <name pos:start="73:55" pos:end="73:84">float_tininess_before_rounding</name> <operator pos:start="73:86" pos:end="73:86">)</operator>

                <operator pos:start="75:17" pos:end="75:18">||</operator> <operator pos:start="75:20" pos:end="75:20">(</operator> <name pos:start="75:22" pos:end="75:25">zExp</name> <operator pos:start="75:27" pos:end="75:27">&lt;</operator> <operator pos:start="75:29" pos:end="75:29">-</operator><literal type="number" pos:start="75:30" pos:end="75:30">1</literal> <operator pos:start="75:32" pos:end="75:32">)</operator>

                <operator pos:start="77:17" pos:end="77:18">||</operator> <operator pos:start="77:20" pos:end="77:20">(</operator> <name pos:start="77:22" pos:end="77:25">zSig</name> <operator pos:start="77:27" pos:end="77:27">+</operator> <name pos:start="77:29" pos:end="77:42">roundIncrement</name> <operator pos:start="77:44" pos:end="77:44">&lt;</operator> <literal type="number" pos:start="77:46" pos:end="77:55">0x80000000</literal> <operator pos:start="77:57" pos:end="77:57">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:55"><expr pos:start="79:13" pos:end="79:54"><call pos:start="79:13" pos:end="79:54"><name pos:start="79:13" pos:end="79:31">shift32RightJamming</name><argument_list pos:start="79:32" pos:end="79:54">( <argument pos:start="79:34" pos:end="79:37"><expr pos:start="79:34" pos:end="79:37"><name pos:start="79:34" pos:end="79:37">zSig</name></expr></argument>, <argument pos:start="79:40" pos:end="79:45"><expr pos:start="79:40" pos:end="79:45"><operator pos:start="79:40" pos:end="79:40">-</operator> <name pos:start="79:42" pos:end="79:45">zExp</name></expr></argument>, <argument pos:start="79:48" pos:end="79:52"><expr pos:start="79:48" pos:end="79:52"><operator pos:start="79:48" pos:end="79:48">&amp;</operator><name pos:start="79:49" pos:end="79:52">zSig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:21"><expr pos:start="81:13" pos:end="81:20"><name pos:start="81:13" pos:end="81:16">zExp</name> <operator pos:start="81:18" pos:end="81:18">=</operator> <literal type="number" pos:start="81:20" pos:end="81:20">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:36"><expr pos:start="83:13" pos:end="83:35"><name pos:start="83:13" pos:end="83:21">roundBits</name> <operator pos:start="83:23" pos:end="83:23">=</operator> <name pos:start="83:25" pos:end="83:28">zSig</name> <operator pos:start="83:30" pos:end="83:30">&amp;</operator> <literal type="number" pos:start="83:32" pos:end="83:35">0x7F</literal></expr>;</expr_stmt>

            <if_stmt pos:start="85:13" pos:end="85:85"><if pos:start="85:13" pos:end="85:85">if <condition pos:start="85:16" pos:end="85:38">( <expr pos:start="85:18" pos:end="85:36"><name pos:start="85:18" pos:end="85:23">isTiny</name> <operator pos:start="85:25" pos:end="85:26">&amp;&amp;</operator> <name pos:start="85:28" pos:end="85:36">roundBits</name></expr> )</condition><block type="pseudo" pos:start="85:40" pos:end="85:85"><block_content pos:start="85:40" pos:end="85:85"> <macro pos:start="85:40" pos:end="85:84"><name pos:start="85:40" pos:end="85:50">float_raise</name><argument_list pos:start="85:51" pos:end="85:84">( <argument pos:start="85:53" pos:end="85:83">float_flag_underflow STATUS_VAR</argument>)</argument_list></macro><empty_stmt pos:start="85:85" pos:end="85:85">;</empty_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="91:5" pos:end="91:73"><if pos:start="91:5" pos:end="91:73">if <condition pos:start="91:8" pos:end="91:20">( <expr pos:start="91:10" pos:end="91:18"><name pos:start="91:10" pos:end="91:18">roundBits</name></expr> )</condition><block type="pseudo" pos:start="91:22" pos:end="91:73"><block_content pos:start="91:22" pos:end="91:73"> <expr_stmt pos:start="91:22" pos:end="91:73"><expr pos:start="91:22" pos:end="91:72"><call pos:start="91:22" pos:end="91:50"><name pos:start="91:22" pos:end="91:27">STATUS</name><argument_list pos:start="91:28" pos:end="91:50">(<argument pos:start="91:29" pos:end="91:49"><expr pos:start="91:29" pos:end="91:49"><name pos:start="91:29" pos:end="91:49">float_exception_flags</name></expr></argument>)</argument_list></call> <operator pos:start="91:52" pos:end="91:53">|=</operator> <name pos:start="91:55" pos:end="91:72">float_flag_inexact</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:40"><expr pos:start="93:5" pos:end="93:39"><name pos:start="93:5" pos:end="93:8">zSig</name> <operator pos:start="93:10" pos:end="93:10">=</operator> <operator pos:start="93:12" pos:end="93:12">(</operator> <name pos:start="93:14" pos:end="93:17">zSig</name> <operator pos:start="93:19" pos:end="93:19">+</operator> <name pos:start="93:21" pos:end="93:34">roundIncrement</name> <operator pos:start="93:36" pos:end="93:36">)</operator><operator pos:start="93:37" pos:end="93:38">&gt;&gt;</operator><literal type="number" pos:start="93:39" pos:end="93:39">7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:67"><expr pos:start="95:5" pos:end="95:66"><name pos:start="95:5" pos:end="95:8">zSig</name> <operator pos:start="95:10" pos:end="95:11">&amp;=</operator> <operator pos:start="95:13" pos:end="95:13">~</operator> <operator pos:start="95:15" pos:end="95:15">(</operator> <operator pos:start="95:17" pos:end="95:17">(</operator> <operator pos:start="95:19" pos:end="95:19">(</operator> <name pos:start="95:21" pos:end="95:29">roundBits</name> <operator pos:start="95:31" pos:end="95:31">^</operator> <literal type="number" pos:start="95:33" pos:end="95:36">0x40</literal> <operator pos:start="95:38" pos:end="95:38">)</operator> <operator pos:start="95:40" pos:end="95:41">==</operator> <literal type="number" pos:start="95:43" pos:end="95:43">0</literal> <operator pos:start="95:45" pos:end="95:45">)</operator> <operator pos:start="95:47" pos:end="95:47">&amp;</operator> <name pos:start="95:49" pos:end="95:64">roundNearestEven</name> <operator pos:start="95:66" pos:end="95:66">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="97:30"><if pos:start="97:5" pos:end="97:30">if <condition pos:start="97:8" pos:end="97:20">( <expr pos:start="97:10" pos:end="97:18"><name pos:start="97:10" pos:end="97:13">zSig</name> <operator pos:start="97:15" pos:end="97:16">==</operator> <literal type="number" pos:start="97:18" pos:end="97:18">0</literal></expr> )</condition><block type="pseudo" pos:start="97:22" pos:end="97:30"><block_content pos:start="97:22" pos:end="97:30"> <expr_stmt pos:start="97:22" pos:end="97:30"><expr pos:start="97:22" pos:end="97:29"><name pos:start="97:22" pos:end="97:25">zExp</name> <operator pos:start="97:27" pos:end="97:27">=</operator> <literal type="number" pos:start="97:29" pos:end="97:29">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="99:5" pos:end="99:44">return <expr pos:start="99:12" pos:end="99:43"><call pos:start="99:12" pos:end="99:43"><name pos:start="99:12" pos:end="99:22">packFloat32</name><argument_list pos:start="99:23" pos:end="99:43">( <argument pos:start="99:25" pos:end="99:29"><expr pos:start="99:25" pos:end="99:29"><name pos:start="99:25" pos:end="99:29">zSign</name></expr></argument>, <argument pos:start="99:32" pos:end="99:35"><expr pos:start="99:32" pos:end="99:35"><name pos:start="99:32" pos:end="99:35">zExp</name></expr></argument>, <argument pos:start="99:38" pos:end="99:41"><expr pos:start="99:38" pos:end="99:41"><name pos:start="99:38" pos:end="99:41">zSig</name></expr></argument> )</argument_list></call></expr>;</return>



</block_content>}</block></function>
</unit>
