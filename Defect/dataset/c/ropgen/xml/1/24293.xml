<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24293.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">dump_ppc_insns</name> <parameter_list pos:start="1:27" pos:end="1:44">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:38">CPUPPCState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:5">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:17">opc_handler_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier><modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:25">table</name></decl>, <decl pos:start="5:28" pos:end="5:35"><type ref="prev" pos:start="5:5" pos:end="5:20"><modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:35">handler</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:16">opc1</name></decl>, <decl pos:start="7:19" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:19" pos:end="7:22">opc2</name></decl>, <decl pos:start="7:25" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:25" pos:end="7:28">opc3</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:34"><expr pos:start="11:5" pos:end="11:33"><call pos:start="11:5" pos:end="11:33"><name pos:start="11:5" pos:end="11:10">printf</name><argument_list pos:start="11:11" pos:end="11:33">(<argument pos:start="11:12" pos:end="11:32"><expr pos:start="11:12" pos:end="11:32"><literal type="string" pos:start="11:12" pos:end="11:32">"Instructions set:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="13:5" pos:end="13:29">/* opc1 is 6 bits long */</comment>

    <for pos:start="15:5" pos:end="83:5">for <control pos:start="15:9" pos:end="15:42">(<init pos:start="15:10" pos:end="15:21"><expr pos:start="15:10" pos:end="15:20"><name pos:start="15:10" pos:end="15:13">opc1</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <literal type="number" pos:start="15:17" pos:end="15:20">0x00</literal></expr>;</init> <condition pos:start="15:23" pos:end="15:34"><expr pos:start="15:23" pos:end="15:33"><name pos:start="15:23" pos:end="15:26">opc1</name> <operator pos:start="15:28" pos:end="15:28">&lt;</operator> <literal type="number" pos:start="15:30" pos:end="15:33">0x40</literal></expr>;</condition> <incr pos:start="15:36" pos:end="15:41"><expr pos:start="15:36" pos:end="15:41"><name pos:start="15:36" pos:end="15:39">opc1</name><operator pos:start="15:40" pos:end="15:41">++</operator></expr></incr>)</control> <block pos:start="15:44" pos:end="83:5">{<block_content pos:start="17:9" pos:end="81:9">

        <expr_stmt pos:start="17:9" pos:end="17:29"><expr pos:start="17:9" pos:end="17:28"><name pos:start="17:9" pos:end="17:13">table</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <name pos:start="17:17" pos:end="17:28"><name pos:start="17:17" pos:end="17:19">env</name><operator pos:start="17:20" pos:end="17:21">-&gt;</operator><name pos:start="17:22" pos:end="17:28">opcodes</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:30"><expr pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:15">handler</name> <operator pos:start="19:17" pos:end="19:17">=</operator> <name pos:start="19:19" pos:end="19:29"><name pos:start="19:19" pos:end="19:23">table</name><index pos:start="19:24" pos:end="19:29">[<expr pos:start="19:25" pos:end="19:28"><name pos:start="19:25" pos:end="19:28">opc1</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="81:9"><if pos:start="21:9" pos:end="71:9">if <condition pos:start="21:12" pos:end="21:40">(<expr pos:start="21:13" pos:end="21:39"><call pos:start="21:13" pos:end="21:39"><name pos:start="21:13" pos:end="21:30">is_indirect_opcode</name><argument_list pos:start="21:31" pos:end="21:39">(<argument pos:start="21:32" pos:end="21:38"><expr pos:start="21:32" pos:end="21:38"><name pos:start="21:32" pos:end="21:38">handler</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:42" pos:end="71:9">{<block_content pos:start="25:13" pos:end="69:13">

            <comment type="block" pos:start="23:13" pos:end="23:37">/* opc2 is 5 bits long */</comment>

            <for pos:start="25:13" pos:end="69:13">for <control pos:start="25:17" pos:end="25:47">(<init pos:start="25:18" pos:end="25:26"><expr pos:start="25:18" pos:end="25:25"><name pos:start="25:18" pos:end="25:21">opc2</name> <operator pos:start="25:23" pos:end="25:23">=</operator> <literal type="number" pos:start="25:25" pos:end="25:25">0</literal></expr>;</init> <condition pos:start="25:28" pos:end="25:39"><expr pos:start="25:28" pos:end="25:38"><name pos:start="25:28" pos:end="25:31">opc2</name> <operator pos:start="25:33" pos:end="25:33">&lt;</operator> <literal type="number" pos:start="25:35" pos:end="25:38">0x20</literal></expr>;</condition> <incr pos:start="25:41" pos:end="25:46"><expr pos:start="25:41" pos:end="25:46"><name pos:start="25:41" pos:end="25:44">opc2</name><operator pos:start="25:45" pos:end="25:46">++</operator></expr></incr>)</control> <block pos:start="25:49" pos:end="69:13">{<block_content pos:start="27:17" pos:end="67:17">

                <expr_stmt pos:start="27:17" pos:end="27:37"><expr pos:start="27:17" pos:end="27:36"><name pos:start="27:17" pos:end="27:21">table</name> <operator pos:start="27:23" pos:end="27:23">=</operator> <name pos:start="27:25" pos:end="27:36"><name pos:start="27:25" pos:end="27:27">env</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:36">opcodes</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="29:17" pos:end="29:45"><expr pos:start="29:17" pos:end="29:44"><name pos:start="29:17" pos:end="29:23">handler</name> <operator pos:start="29:25" pos:end="29:25">=</operator> <name pos:start="29:27" pos:end="29:44"><name pos:start="29:27" pos:end="29:29">env</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:38">opcodes</name><index pos:start="29:39" pos:end="29:44">[<expr pos:start="29:40" pos:end="29:43"><name pos:start="29:40" pos:end="29:43">opc1</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="31:17" pos:end="31:43"><expr pos:start="31:17" pos:end="31:42"><name pos:start="31:17" pos:end="31:21">table</name> <operator pos:start="31:23" pos:end="31:23">=</operator> <call pos:start="31:25" pos:end="31:42"><name pos:start="31:25" pos:end="31:33">ind_table</name><argument_list pos:start="31:34" pos:end="31:42">(<argument pos:start="31:35" pos:end="31:41"><expr pos:start="31:35" pos:end="31:41"><name pos:start="31:35" pos:end="31:41">handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="33:17" pos:end="33:38"><expr pos:start="33:17" pos:end="33:37"><name pos:start="33:17" pos:end="33:23">handler</name> <operator pos:start="33:25" pos:end="33:25">=</operator> <name pos:start="33:27" pos:end="33:37"><name pos:start="33:27" pos:end="33:31">table</name><index pos:start="33:32" pos:end="33:37">[<expr pos:start="33:33" pos:end="33:36"><name pos:start="33:33" pos:end="33:36">opc2</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="35:17" pos:end="67:17"><if pos:start="35:17" pos:end="57:17">if <condition pos:start="35:20" pos:end="35:48">(<expr pos:start="35:21" pos:end="35:47"><call pos:start="35:21" pos:end="35:47"><name pos:start="35:21" pos:end="35:38">is_indirect_opcode</name><argument_list pos:start="35:39" pos:end="35:47">(<argument pos:start="35:40" pos:end="35:46"><expr pos:start="35:40" pos:end="35:46"><name pos:start="35:40" pos:end="35:46">handler</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:50" pos:end="57:17">{<block_content pos:start="37:21" pos:end="55:21">

                    <expr_stmt pos:start="37:21" pos:end="37:47"><expr pos:start="37:21" pos:end="37:46"><name pos:start="37:21" pos:end="37:25">table</name> <operator pos:start="37:27" pos:end="37:27">=</operator> <call pos:start="37:29" pos:end="37:46"><name pos:start="37:29" pos:end="37:37">ind_table</name><argument_list pos:start="37:38" pos:end="37:46">(<argument pos:start="37:39" pos:end="37:45"><expr pos:start="37:39" pos:end="37:45"><name pos:start="37:39" pos:end="37:45">handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="39:21" pos:end="39:45">/* opc3 is 5 bits long */</comment>

                    <for pos:start="41:21" pos:end="55:21">for <control pos:start="41:25" pos:end="41:55">(<init pos:start="41:26" pos:end="41:34"><expr pos:start="41:26" pos:end="41:33"><name pos:start="41:26" pos:end="41:29">opc3</name> <operator pos:start="41:31" pos:end="41:31">=</operator> <literal type="number" pos:start="41:33" pos:end="41:33">0</literal></expr>;</init> <condition pos:start="41:36" pos:end="41:47"><expr pos:start="41:36" pos:end="41:46"><name pos:start="41:36" pos:end="41:39">opc3</name> <operator pos:start="41:41" pos:end="41:41">&lt;</operator> <literal type="number" pos:start="41:43" pos:end="41:46">0x20</literal></expr>;</condition> <incr pos:start="41:49" pos:end="41:54"><expr pos:start="41:49" pos:end="41:54"><name pos:start="41:49" pos:end="41:52">opc3</name><operator pos:start="41:53" pos:end="41:54">++</operator></expr></incr>)</control> <block pos:start="41:57" pos:end="55:21">{<block_content pos:start="43:25" pos:end="53:25">

                        <expr_stmt pos:start="43:25" pos:end="43:46"><expr pos:start="43:25" pos:end="43:45"><name pos:start="43:25" pos:end="43:31">handler</name> <operator pos:start="43:33" pos:end="43:33">=</operator> <name pos:start="43:35" pos:end="43:45"><name pos:start="43:35" pos:end="43:39">table</name><index pos:start="43:40" pos:end="43:45">[<expr pos:start="43:41" pos:end="43:44"><name pos:start="43:41" pos:end="43:44">opc3</name></expr>]</index></name></expr>;</expr_stmt>

                        <if_stmt pos:start="45:25" pos:end="53:25"><if pos:start="45:25" pos:end="53:25">if <condition pos:start="45:28" pos:end="45:61">(<expr pos:start="45:29" pos:end="45:60"><name pos:start="45:29" pos:end="45:44"><name pos:start="45:29" pos:end="45:35">handler</name><operator pos:start="45:36" pos:end="45:37">-&gt;</operator><name pos:start="45:38" pos:end="45:44">handler</name></name> <operator pos:start="45:46" pos:end="45:47">!=</operator> <operator pos:start="45:49" pos:end="45:49">&amp;</operator><name pos:start="45:50" pos:end="45:60">gen_invalid</name></expr>)</condition> <block pos:start="45:63" pos:end="53:25">{<block_content pos:start="47:29" pos:end="51:51">

                            <expr_stmt pos:start="47:29" pos:end="51:51"><expr pos:start="47:29" pos:end="51:50"><call pos:start="47:29" pos:end="51:50"><name pos:start="47:29" pos:end="47:34">printf</name><argument_list pos:start="47:35" pos:end="51:50">(<argument pos:start="47:36" pos:end="47:76"><expr pos:start="47:36" pos:end="47:76"><literal type="string" pos:start="47:36" pos:end="47:76">"INSN: %02x %02x %02x (%02d %04d) : %s\n"</literal></expr></argument>,

                                   <argument pos:start="49:36" pos:end="49:39"><expr pos:start="49:36" pos:end="49:39"><name pos:start="49:36" pos:end="49:39">opc1</name></expr></argument>, <argument pos:start="49:42" pos:end="49:45"><expr pos:start="49:42" pos:end="49:45"><name pos:start="49:42" pos:end="49:45">opc2</name></expr></argument>, <argument pos:start="49:48" pos:end="49:51"><expr pos:start="49:48" pos:end="49:51"><name pos:start="49:48" pos:end="49:51">opc3</name></expr></argument>, <argument pos:start="49:54" pos:end="49:57"><expr pos:start="49:54" pos:end="49:57"><name pos:start="49:54" pos:end="49:57">opc1</name></expr></argument>, <argument pos:start="49:60" pos:end="49:77"><expr pos:start="49:60" pos:end="49:77"><operator pos:start="49:60" pos:end="49:60">(</operator><name pos:start="49:61" pos:end="49:64">opc3</name> <operator pos:start="49:66" pos:end="49:67">&lt;&lt;</operator> <literal type="number" pos:start="49:69" pos:end="49:69">5</literal><operator pos:start="49:70" pos:end="49:70">)</operator> <operator pos:start="49:72" pos:end="49:72">|</operator> <name pos:start="49:74" pos:end="49:77">opc2</name></expr></argument>,

                                   <argument pos:start="51:36" pos:end="51:49"><expr pos:start="51:36" pos:end="51:49"><name pos:start="51:36" pos:end="51:49"><name pos:start="51:36" pos:end="51:42">handler</name><operator pos:start="51:43" pos:end="51:44">-&gt;</operator><name pos:start="51:45" pos:end="51:49">oname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if> <else pos:start="57:19" pos:end="67:17">else <block pos:start="57:24" pos:end="67:17">{<block_content pos:start="59:21" pos:end="65:21">

                    <if_stmt pos:start="59:21" pos:end="65:21"><if pos:start="59:21" pos:end="65:21">if <condition pos:start="59:24" pos:end="59:57">(<expr pos:start="59:25" pos:end="59:56"><name pos:start="59:25" pos:end="59:40"><name pos:start="59:25" pos:end="59:31">handler</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:40">handler</name></name> <operator pos:start="59:42" pos:end="59:43">!=</operator> <operator pos:start="59:45" pos:end="59:45">&amp;</operator><name pos:start="59:46" pos:end="59:56">gen_invalid</name></expr>)</condition> <block pos:start="59:59" pos:end="65:21">{<block_content pos:start="61:25" pos:end="63:71">

                        <expr_stmt pos:start="61:25" pos:end="63:71"><expr pos:start="61:25" pos:end="63:70"><call pos:start="61:25" pos:end="63:70"><name pos:start="61:25" pos:end="61:30">printf</name><argument_list pos:start="61:31" pos:end="63:70">(<argument pos:start="61:32" pos:end="61:70"><expr pos:start="61:32" pos:end="61:70"><literal type="string" pos:start="61:32" pos:end="61:70">"INSN: %02x %02x -- (%02d %04d) : %s\n"</literal></expr></argument>,

                               <argument pos:start="63:32" pos:end="63:35"><expr pos:start="63:32" pos:end="63:35"><name pos:start="63:32" pos:end="63:35">opc1</name></expr></argument>, <argument pos:start="63:38" pos:end="63:41"><expr pos:start="63:38" pos:end="63:41"><name pos:start="63:38" pos:end="63:41">opc2</name></expr></argument>, <argument pos:start="63:44" pos:end="63:47"><expr pos:start="63:44" pos:end="63:47"><name pos:start="63:44" pos:end="63:47">opc1</name></expr></argument>, <argument pos:start="63:50" pos:end="63:53"><expr pos:start="63:50" pos:end="63:53"><name pos:start="63:50" pos:end="63:53">opc2</name></expr></argument>, <argument pos:start="63:56" pos:end="63:69"><expr pos:start="63:56" pos:end="63:69"><name pos:start="63:56" pos:end="63:69"><name pos:start="63:56" pos:end="63:62">handler</name><operator pos:start="63:63" pos:end="63:64">-&gt;</operator><name pos:start="63:65" pos:end="63:69">oname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="71:11" pos:end="81:9">else <block pos:start="71:16" pos:end="81:9">{<block_content pos:start="73:13" pos:end="79:13">

            <if_stmt pos:start="73:13" pos:end="79:13"><if pos:start="73:13" pos:end="79:13">if <condition pos:start="73:16" pos:end="73:49">(<expr pos:start="73:17" pos:end="73:48"><name pos:start="73:17" pos:end="73:32"><name pos:start="73:17" pos:end="73:23">handler</name><operator pos:start="73:24" pos:end="73:25">-&gt;</operator><name pos:start="73:26" pos:end="73:32">handler</name></name> <operator pos:start="73:34" pos:end="73:35">!=</operator> <operator pos:start="73:37" pos:end="73:37">&amp;</operator><name pos:start="73:38" pos:end="73:48">gen_invalid</name></expr>)</condition> <block pos:start="73:51" pos:end="79:13">{<block_content pos:start="75:17" pos:end="77:51">

                <expr_stmt pos:start="75:17" pos:end="77:51"><expr pos:start="75:17" pos:end="77:50"><call pos:start="75:17" pos:end="77:50"><name pos:start="75:17" pos:end="75:22">printf</name><argument_list pos:start="75:23" pos:end="77:50">(<argument pos:start="75:24" pos:end="75:60"><expr pos:start="75:24" pos:end="75:60"><literal type="string" pos:start="75:24" pos:end="75:60">"INSN: %02x -- -- (%02d ----) : %s\n"</literal></expr></argument>,

                       <argument pos:start="77:24" pos:end="77:27"><expr pos:start="77:24" pos:end="77:27"><name pos:start="77:24" pos:end="77:27">opc1</name></expr></argument>, <argument pos:start="77:30" pos:end="77:33"><expr pos:start="77:30" pos:end="77:33"><name pos:start="77:30" pos:end="77:33">opc1</name></expr></argument>, <argument pos:start="77:36" pos:end="77:49"><expr pos:start="77:36" pos:end="77:49"><name pos:start="77:36" pos:end="77:49"><name pos:start="77:36" pos:end="77:42">handler</name><operator pos:start="77:43" pos:end="77:44">-&gt;</operator><name pos:start="77:45" pos:end="77:49">oname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
