<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4037.c" pos:tabs="8"><function pos:start="1:1" pos:end="957:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">ff_h264_decode_mb_cavlc</name><parameter_list pos:start="1:28" pos:end="1:71">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:48"><specifier pos:start="1:29" pos:end="1:33">const</specifier> <name pos:start="1:35" pos:end="1:45">H264Context</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">h</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:70"><decl pos:start="1:51" pos:end="1:70"><type pos:start="1:51" pos:end="1:70"><name pos:start="1:51" pos:end="1:66">H264SliceContext</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:70">sl</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="957:1">{<block_content pos:start="5:5" pos:end="955:13">

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">mb_xy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:23">partition_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:24">mb_type</name></decl>, <decl pos:start="9:27" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:27" pos:end="9:29">cbp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:53"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:22">dct8x8_allowed</name><init pos:start="11:23" pos:end="11:53">= <expr pos:start="11:25" pos:end="11:53"><name pos:start="11:25" pos:end="11:53"><name pos:start="11:25" pos:end="11:25">h</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:29">ps</name><operator pos:start="11:30" pos:end="11:30">.</operator><name pos:start="11:31" pos:end="11:33">pps</name><operator pos:start="11:34" pos:end="11:35">-&gt;</operator><name pos:start="11:36" pos:end="11:53">transform_8x8_mode</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:95"><decl pos:start="13:5" pos:end="13:94"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:21">decode_chroma</name> <init pos:start="13:23" pos:end="13:94">= <expr pos:start="13:25" pos:end="13:94"><name pos:start="13:25" pos:end="13:52"><name pos:start="13:25" pos:end="13:25">h</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:29">ps</name><operator pos:start="13:30" pos:end="13:30">.</operator><name pos:start="13:31" pos:end="13:33">sps</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:52">chroma_format_idc</name></name> <operator pos:start="13:54" pos:end="13:55">==</operator> <literal type="number" pos:start="13:57" pos:end="13:57">1</literal> <operator pos:start="13:59" pos:end="13:60">||</operator> <name pos:start="13:62" pos:end="13:89"><name pos:start="13:62" pos:end="13:62">h</name><operator pos:start="13:63" pos:end="13:64">-&gt;</operator><name pos:start="13:65" pos:end="13:66">ps</name><operator pos:start="13:67" pos:end="13:67">.</operator><name pos:start="13:68" pos:end="13:70">sps</name><operator pos:start="13:71" pos:end="13:72">-&gt;</operator><name pos:start="13:73" pos:end="13:89">chroma_format_idc</name></name> <operator pos:start="13:91" pos:end="13:92">==</operator> <literal type="number" pos:start="13:94" pos:end="13:94">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:43"><decl pos:start="15:5" pos:end="15:42"><type pos:start="15:5" pos:end="15:13"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:13">int</name></type> <name pos:start="15:15" pos:end="15:25">pixel_shift</name> <init pos:start="15:27" pos:end="15:42">= <expr pos:start="15:29" pos:end="15:42"><name pos:start="15:29" pos:end="15:42"><name pos:start="15:29" pos:end="15:29">h</name><operator pos:start="15:30" pos:end="15:31">-&gt;</operator><name pos:start="15:32" pos:end="15:42">pixel_shift</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:57"><expr pos:start="19:5" pos:end="19:56"><name pos:start="19:5" pos:end="19:9">mb_xy</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <name pos:start="19:13" pos:end="19:21"><name pos:start="19:13" pos:end="19:14">sl</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:21">mb_xy</name></name> <operator pos:start="19:23" pos:end="19:23">=</operator> <name pos:start="19:25" pos:end="19:32"><name pos:start="19:25" pos:end="19:26">sl</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:32">mb_x</name></name> <operator pos:start="19:34" pos:end="19:34">+</operator> <name pos:start="19:36" pos:end="19:43"><name pos:start="19:36" pos:end="19:37">sl</name><operator pos:start="19:38" pos:end="19:39">-&gt;</operator><name pos:start="19:40" pos:end="19:43">mb_y</name></name><operator pos:start="19:44" pos:end="19:44">*</operator><name pos:start="19:45" pos:end="19:56"><name pos:start="19:45" pos:end="19:45">h</name><operator pos:start="19:46" pos:end="19:47">-&gt;</operator><name pos:start="19:48" pos:end="19:56">mb_stride</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:81"><expr pos:start="23:5" pos:end="23:80"><call pos:start="23:5" pos:end="23:80"><name pos:start="23:5" pos:end="23:11">ff_tlog</name><argument_list pos:start="23:12" pos:end="23:80">(<argument pos:start="23:13" pos:end="23:20"><expr pos:start="23:13" pos:end="23:20"><name pos:start="23:13" pos:end="23:20"><name pos:start="23:13" pos:end="23:13">h</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:20">avctx</name></name></expr></argument>, <argument pos:start="23:23" pos:end="23:41"><expr pos:start="23:23" pos:end="23:41"><literal type="string" pos:start="23:23" pos:end="23:41">"pic:%d mb:%d/%d\n"</literal></expr></argument>, <argument pos:start="23:44" pos:end="23:59"><expr pos:start="23:44" pos:end="23:59"><name pos:start="23:44" pos:end="23:59"><name pos:start="23:44" pos:end="23:44">h</name><operator pos:start="23:45" pos:end="23:46">-&gt;</operator><name pos:start="23:47" pos:end="23:49">poc</name><operator pos:start="23:50" pos:end="23:50">.</operator><name pos:start="23:51" pos:end="23:59">frame_num</name></name></expr></argument>, <argument pos:start="23:62" pos:end="23:69"><expr pos:start="23:62" pos:end="23:69"><name pos:start="23:62" pos:end="23:69"><name pos:start="23:62" pos:end="23:63">sl</name><operator pos:start="23:64" pos:end="23:65">-&gt;</operator><name pos:start="23:66" pos:end="23:69">mb_x</name></name></expr></argument>, <argument pos:start="23:72" pos:end="23:79"><expr pos:start="23:72" pos:end="23:79"><name pos:start="23:72" pos:end="23:79"><name pos:start="23:72" pos:end="23:73">sl</name><operator pos:start="23:74" pos:end="23:75">-&gt;</operator><name pos:start="23:76" pos:end="23:79">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:12"><expr pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:7">cbp</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <literal type="number" pos:start="25:11" pos:end="25:11">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="25:14" pos:end="27:32">/* avoid warning. FIXME: find a solution without slowing

                down the code */</comment>

    <if_stmt pos:start="29:5" pos:end="53:5"><if pos:start="29:5" pos:end="53:5">if <condition pos:start="29:8" pos:end="29:48">(<expr pos:start="29:9" pos:end="29:47"><name pos:start="29:9" pos:end="29:26"><name pos:start="29:9" pos:end="29:10">sl</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:26">slice_type_nos</name></name> <operator pos:start="29:28" pos:end="29:29">!=</operator> <name pos:start="29:31" pos:end="29:47">AV_PICTURE_TYPE_I</name></expr>)</condition> <block pos:start="29:50" pos:end="53:5">{<block_content pos:start="31:9" pos:end="51:9">

        <if_stmt pos:start="31:9" pos:end="33:58"><if pos:start="31:9" pos:end="33:58">if <condition pos:start="31:12" pos:end="31:34">(<expr pos:start="31:13" pos:end="31:33"><name pos:start="31:13" pos:end="31:27"><name pos:start="31:13" pos:end="31:14">sl</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:27">mb_skip_run</name></name> <operator pos:start="31:29" pos:end="31:30">==</operator> <operator pos:start="31:32" pos:end="31:32">-</operator><literal type="number" pos:start="31:33" pos:end="31:33">1</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:58"><block_content pos:start="33:13" pos:end="33:58">

            <expr_stmt pos:start="33:13" pos:end="33:58"><expr pos:start="33:13" pos:end="33:57"><name pos:start="33:13" pos:end="33:27"><name pos:start="33:13" pos:end="33:14">sl</name><operator pos:start="33:15" pos:end="33:16">-&gt;</operator><name pos:start="33:17" pos:end="33:27">mb_skip_run</name></name> <operator pos:start="33:29" pos:end="33:29">=</operator> <call pos:start="33:31" pos:end="33:57"><name pos:start="33:31" pos:end="33:48">get_ue_golomb_long</name><argument_list pos:start="33:49" pos:end="33:57">(<argument pos:start="33:50" pos:end="33:56"><expr pos:start="33:50" pos:end="33:56"><operator pos:start="33:50" pos:end="33:50">&amp;</operator><name pos:start="33:51" pos:end="33:56"><name pos:start="33:51" pos:end="33:52">sl</name><operator pos:start="33:53" pos:end="33:54">-&gt;</operator><name pos:start="33:55" pos:end="33:56">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="37:9" pos:end="51:9"><if pos:start="37:9" pos:end="51:9">if <condition pos:start="37:12" pos:end="37:30">(<expr pos:start="37:13" pos:end="37:29"><name pos:start="37:13" pos:end="37:27"><name pos:start="37:13" pos:end="37:14">sl</name><operator pos:start="37:15" pos:end="37:16">-&gt;</operator><name pos:start="37:17" pos:end="37:27">mb_skip_run</name></name><operator pos:start="37:28" pos:end="37:29">--</operator></expr>)</condition> <block pos:start="37:32" pos:end="51:9">{<block_content pos:start="39:13" pos:end="49:21">

            <if_stmt pos:start="39:13" pos:end="45:13"><if pos:start="39:13" pos:end="45:13">if <condition pos:start="39:16" pos:end="39:54">(<expr pos:start="39:17" pos:end="39:53"><call pos:start="39:17" pos:end="39:30"><name pos:start="39:17" pos:end="39:27">FRAME_MBAFF</name><argument_list pos:start="39:28" pos:end="39:30">(<argument pos:start="39:29" pos:end="39:29"><expr pos:start="39:29" pos:end="39:29"><name pos:start="39:29" pos:end="39:29">h</name></expr></argument>)</argument_list></call> <operator pos:start="39:32" pos:end="39:33">&amp;&amp;</operator> <operator pos:start="39:35" pos:end="39:35">(</operator><name pos:start="39:36" pos:end="39:43"><name pos:start="39:36" pos:end="39:37">sl</name><operator pos:start="39:38" pos:end="39:39">-&gt;</operator><name pos:start="39:40" pos:end="39:43">mb_y</name></name> <operator pos:start="39:45" pos:end="39:45">&amp;</operator> <literal type="number" pos:start="39:47" pos:end="39:47">1</literal><operator pos:start="39:48" pos:end="39:48">)</operator> <operator pos:start="39:50" pos:end="39:51">==</operator> <literal type="number" pos:start="39:53" pos:end="39:53">0</literal></expr>)</condition> <block pos:start="39:56" pos:end="45:13">{<block_content pos:start="41:17" pos:end="43:83">

                <if_stmt pos:start="41:17" pos:end="43:83"><if pos:start="41:17" pos:end="43:83">if <condition pos:start="41:20" pos:end="41:41">(<expr pos:start="41:21" pos:end="41:40"><name pos:start="41:21" pos:end="41:35"><name pos:start="41:21" pos:end="41:22">sl</name><operator pos:start="41:23" pos:end="41:24">-&gt;</operator><name pos:start="41:25" pos:end="41:35">mb_skip_run</name></name> <operator pos:start="41:37" pos:end="41:38">==</operator> <literal type="number" pos:start="41:40" pos:end="41:40">0</literal></expr>)</condition><block type="pseudo" pos:start="43:21" pos:end="43:83"><block_content pos:start="43:21" pos:end="43:83">

                    <expr_stmt pos:start="43:21" pos:end="43:83"><expr pos:start="43:21" pos:end="43:82"><name pos:start="43:21" pos:end="43:32"><name pos:start="43:21" pos:end="43:22">sl</name><operator pos:start="43:23" pos:end="43:24">-&gt;</operator><name pos:start="43:25" pos:end="43:32">mb_mbaff</name></name> <operator pos:start="43:34" pos:end="43:34">=</operator> <name pos:start="43:36" pos:end="43:61"><name pos:start="43:36" pos:end="43:37">sl</name><operator pos:start="43:38" pos:end="43:39">-&gt;</operator><name pos:start="43:40" pos:end="43:61">mb_field_decoding_flag</name></name> <operator pos:start="43:63" pos:end="43:63">=</operator> <call pos:start="43:65" pos:end="43:82"><name pos:start="43:65" pos:end="43:73">get_bits1</name><argument_list pos:start="43:74" pos:end="43:82">(<argument pos:start="43:75" pos:end="43:81"><expr pos:start="43:75" pos:end="43:81"><operator pos:start="43:75" pos:end="43:75">&amp;</operator><name pos:start="43:76" pos:end="43:81"><name pos:start="43:76" pos:end="43:77">sl</name><operator pos:start="43:78" pos:end="43:79">-&gt;</operator><name pos:start="43:80" pos:end="43:81">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:34"><expr pos:start="47:13" pos:end="47:33"><call pos:start="47:13" pos:end="47:33"><name pos:start="47:13" pos:end="47:26">decode_mb_skip</name><argument_list pos:start="47:27" pos:end="47:33">(<argument pos:start="47:28" pos:end="47:28"><expr pos:start="47:28" pos:end="47:28"><name pos:start="47:28" pos:end="47:28">h</name></expr></argument>, <argument pos:start="47:31" pos:end="47:32"><expr pos:start="47:31" pos:end="47:32"><name pos:start="47:31" pos:end="47:32">sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:21">return <expr pos:start="49:20" pos:end="49:20"><literal type="number" pos:start="49:20" pos:end="49:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:23">(<expr pos:start="55:9" pos:end="55:22"><call pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:19">FRAME_MBAFF</name><argument_list pos:start="55:20" pos:end="55:22">(<argument pos:start="55:21" pos:end="55:21"><expr pos:start="55:21" pos:end="55:21"><name pos:start="55:21" pos:end="55:21">h</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:25" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:75">

        <if_stmt pos:start="57:9" pos:end="59:75"><if pos:start="57:9" pos:end="59:75">if <condition pos:start="57:12" pos:end="57:32">(<expr pos:start="57:13" pos:end="57:31"><operator pos:start="57:13" pos:end="57:13">(</operator><name pos:start="57:14" pos:end="57:21"><name pos:start="57:14" pos:end="57:15">sl</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:21">mb_y</name></name> <operator pos:start="57:23" pos:end="57:23">&amp;</operator> <literal type="number" pos:start="57:25" pos:end="57:25">1</literal><operator pos:start="57:26" pos:end="57:26">)</operator> <operator pos:start="57:28" pos:end="57:29">==</operator> <literal type="number" pos:start="57:31" pos:end="57:31">0</literal></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:75"><block_content pos:start="59:13" pos:end="59:75">

            <expr_stmt pos:start="59:13" pos:end="59:75"><expr pos:start="59:13" pos:end="59:74"><name pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:14">sl</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:24">mb_mbaff</name></name> <operator pos:start="59:26" pos:end="59:26">=</operator> <name pos:start="59:28" pos:end="59:53"><name pos:start="59:28" pos:end="59:29">sl</name><operator pos:start="59:30" pos:end="59:31">-&gt;</operator><name pos:start="59:32" pos:end="59:53">mb_field_decoding_flag</name></name> <operator pos:start="59:55" pos:end="59:55">=</operator> <call pos:start="59:57" pos:end="59:74"><name pos:start="59:57" pos:end="59:65">get_bits1</name><argument_list pos:start="59:66" pos:end="59:74">(<argument pos:start="59:67" pos:end="59:73"><expr pos:start="59:67" pos:end="59:73"><operator pos:start="59:67" pos:end="59:67">&amp;</operator><name pos:start="59:68" pos:end="59:73"><name pos:start="59:68" pos:end="59:69">sl</name><operator pos:start="59:70" pos:end="59:71">-&gt;</operator><name pos:start="59:72" pos:end="59:73">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:28"><expr pos:start="65:5" pos:end="65:27"><name pos:start="65:5" pos:end="65:23"><name pos:start="65:5" pos:end="65:6">sl</name><operator pos:start="65:7" pos:end="65:8">-&gt;</operator><name pos:start="65:9" pos:end="65:23">prev_mb_skipped</name></name> <operator pos:start="65:25" pos:end="65:25">=</operator> <literal type="number" pos:start="65:27" pos:end="65:27">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:36"><expr pos:start="69:5" pos:end="69:35"><name pos:start="69:5" pos:end="69:11">mb_type</name><operator pos:start="69:12" pos:end="69:12">=</operator> <call pos:start="69:14" pos:end="69:35"><name pos:start="69:14" pos:end="69:26">get_ue_golomb</name><argument_list pos:start="69:27" pos:end="69:35">(<argument pos:start="69:28" pos:end="69:34"><expr pos:start="69:28" pos:end="69:34"><operator pos:start="69:28" pos:end="69:28">&amp;</operator><name pos:start="69:29" pos:end="69:34"><name pos:start="69:29" pos:end="69:30">sl</name><operator pos:start="69:31" pos:end="69:32">-&gt;</operator><name pos:start="69:33" pos:end="69:34">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="129:5"><if pos:start="71:5" pos:end="87:5">if <condition pos:start="71:8" pos:end="71:48">(<expr pos:start="71:9" pos:end="71:47"><name pos:start="71:9" pos:end="71:26"><name pos:start="71:9" pos:end="71:10">sl</name><operator pos:start="71:11" pos:end="71:12">-&gt;</operator><name pos:start="71:13" pos:end="71:26">slice_type_nos</name></name> <operator pos:start="71:28" pos:end="71:29">==</operator> <name pos:start="71:31" pos:end="71:47">AV_PICTURE_TYPE_B</name></expr>)</condition> <block pos:start="71:50" pos:end="87:5">{<block_content pos:start="73:9" pos:end="85:9">

        <if_stmt pos:start="73:9" pos:end="85:9"><if pos:start="73:9" pos:end="79:9">if<condition pos:start="73:11" pos:end="73:24">(<expr pos:start="73:12" pos:end="73:23"><name pos:start="73:12" pos:end="73:18">mb_type</name> <operator pos:start="73:20" pos:end="73:20">&lt;</operator> <literal type="number" pos:start="73:22" pos:end="73:23">23</literal></expr>)</condition><block pos:start="73:25" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:67">

            <expr_stmt pos:start="75:13" pos:end="75:78"><expr pos:start="75:13" pos:end="75:77"><name pos:start="75:13" pos:end="75:27">partition_count</name> <operator pos:start="75:29" pos:end="75:29">=</operator> <name pos:start="75:31" pos:end="75:61"><name pos:start="75:31" pos:end="75:52">ff_h264_b_mb_type_info</name><index pos:start="75:53" pos:end="75:61">[<expr pos:start="75:54" pos:end="75:60"><name pos:start="75:54" pos:end="75:60">mb_type</name></expr>]</index></name><operator pos:start="75:62" pos:end="75:62">.</operator><name pos:start="75:63" pos:end="75:77">partition_count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:67"><expr pos:start="77:13" pos:end="77:66"><name pos:start="77:13" pos:end="77:19">mb_type</name>         <operator pos:start="77:29" pos:end="77:29">=</operator> <name pos:start="77:31" pos:end="77:61"><name pos:start="77:31" pos:end="77:52">ff_h264_b_mb_type_info</name><index pos:start="77:53" pos:end="77:61">[<expr pos:start="77:54" pos:end="77:60"><name pos:start="77:54" pos:end="77:60">mb_type</name></expr>]</index></name><operator pos:start="77:62" pos:end="77:62">.</operator><name pos:start="77:63" pos:end="77:66">type</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="79:10" pos:end="85:9">else<block pos:start="79:14" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:33">

            <expr_stmt pos:start="81:13" pos:end="81:26"><expr pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:19">mb_type</name> <operator pos:start="81:21" pos:end="81:22">-=</operator> <literal type="number" pos:start="81:24" pos:end="81:25">23</literal></expr>;</expr_stmt>

            <goto pos:start="83:13" pos:end="83:33">goto <name pos:start="83:18" pos:end="83:32">decode_intra_mb</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="87:7" pos:end="103:5">else if <condition pos:start="87:15" pos:end="87:55">(<expr pos:start="87:16" pos:end="87:54"><name pos:start="87:16" pos:end="87:33"><name pos:start="87:16" pos:end="87:17">sl</name><operator pos:start="87:18" pos:end="87:19">-&gt;</operator><name pos:start="87:20" pos:end="87:33">slice_type_nos</name></name> <operator pos:start="87:35" pos:end="87:36">==</operator> <name pos:start="87:38" pos:end="87:54">AV_PICTURE_TYPE_P</name></expr>)</condition> <block pos:start="87:57" pos:end="103:5">{<block_content pos:start="89:9" pos:end="101:9">

        <if_stmt pos:start="89:9" pos:end="101:9"><if pos:start="89:9" pos:end="95:9">if<condition pos:start="89:11" pos:end="89:23">(<expr pos:start="89:12" pos:end="89:22"><name pos:start="89:12" pos:end="89:18">mb_type</name> <operator pos:start="89:20" pos:end="89:20">&lt;</operator> <literal type="number" pos:start="89:22" pos:end="89:22">5</literal></expr>)</condition><block pos:start="89:24" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:67">

            <expr_stmt pos:start="91:13" pos:end="91:78"><expr pos:start="91:13" pos:end="91:77"><name pos:start="91:13" pos:end="91:27">partition_count</name> <operator pos:start="91:29" pos:end="91:29">=</operator> <name pos:start="91:31" pos:end="91:61"><name pos:start="91:31" pos:end="91:52">ff_h264_p_mb_type_info</name><index pos:start="91:53" pos:end="91:61">[<expr pos:start="91:54" pos:end="91:60"><name pos:start="91:54" pos:end="91:60">mb_type</name></expr>]</index></name><operator pos:start="91:62" pos:end="91:62">.</operator><name pos:start="91:63" pos:end="91:77">partition_count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:67"><expr pos:start="93:13" pos:end="93:66"><name pos:start="93:13" pos:end="93:19">mb_type</name>         <operator pos:start="93:29" pos:end="93:29">=</operator> <name pos:start="93:31" pos:end="93:61"><name pos:start="93:31" pos:end="93:52">ff_h264_p_mb_type_info</name><index pos:start="93:53" pos:end="93:61">[<expr pos:start="93:54" pos:end="93:60"><name pos:start="93:54" pos:end="93:60">mb_type</name></expr>]</index></name><operator pos:start="93:62" pos:end="93:62">.</operator><name pos:start="93:63" pos:end="93:66">type</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="95:10" pos:end="101:9">else<block pos:start="95:14" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:33">

            <expr_stmt pos:start="97:13" pos:end="97:25"><expr pos:start="97:13" pos:end="97:24"><name pos:start="97:13" pos:end="97:19">mb_type</name> <operator pos:start="97:21" pos:end="97:22">-=</operator> <literal type="number" pos:start="97:24" pos:end="97:24">5</literal></expr>;</expr_stmt>

            <goto pos:start="99:13" pos:end="99:33">goto <name pos:start="99:18" pos:end="99:32">decode_intra_mb</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if><else pos:start="103:6" pos:end="129:5">else<block pos:start="103:10" pos:end="129:5">{<block_content pos:start="105:8" pos:end="127:72">

       <expr_stmt pos:start="105:8" pos:end="105:59"><expr pos:start="105:8" pos:end="105:58"><call pos:start="105:8" pos:end="105:58"><name pos:start="105:8" pos:end="105:17">av_assert2</name><argument_list pos:start="105:18" pos:end="105:58">(<argument pos:start="105:19" pos:end="105:57"><expr pos:start="105:19" pos:end="105:57"><name pos:start="105:19" pos:end="105:36"><name pos:start="105:19" pos:end="105:20">sl</name><operator pos:start="105:21" pos:end="105:22">-&gt;</operator><name pos:start="105:23" pos:end="105:36">slice_type_nos</name></name> <operator pos:start="105:38" pos:end="105:39">==</operator> <name pos:start="105:41" pos:end="105:57">AV_PICTURE_TYPE_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="109:22"><if pos:start="107:9" pos:end="109:22">if <condition pos:start="107:12" pos:end="107:60">(<expr pos:start="107:13" pos:end="107:59"><name pos:start="107:13" pos:end="107:26"><name pos:start="107:13" pos:end="107:14">sl</name><operator pos:start="107:15" pos:end="107:16">-&gt;</operator><name pos:start="107:17" pos:end="107:26">slice_type</name></name> <operator pos:start="107:28" pos:end="107:29">==</operator> <name pos:start="107:31" pos:end="107:48">AV_PICTURE_TYPE_SI</name> <operator pos:start="107:50" pos:end="107:51">&amp;&amp;</operator> <name pos:start="107:53" pos:end="107:59">mb_type</name></expr>)</condition><block type="pseudo" pos:start="109:13" pos:end="109:22"><block_content pos:start="109:13" pos:end="109:22">

            <expr_stmt pos:start="109:13" pos:end="109:22"><expr pos:start="109:13" pos:end="109:21"><name pos:start="109:13" pos:end="109:19">mb_type</name><operator pos:start="109:20" pos:end="109:21">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label pos:start="111:1" pos:end="111:16"><name pos:start="111:1" pos:end="111:15">decode_intra_mb</name>:</label>

        <if_stmt pos:start="113:9" pos:end="119:9"><if pos:start="113:9" pos:end="119:9">if<condition pos:start="113:11" pos:end="113:24">(<expr pos:start="113:12" pos:end="113:23"><name pos:start="113:12" pos:end="113:18">mb_type</name> <operator pos:start="113:20" pos:end="113:20">&gt;</operator> <literal type="number" pos:start="113:22" pos:end="113:23">25</literal></expr>)</condition><block pos:start="113:25" pos:end="119:9">{<block_content pos:start="115:13" pos:end="117:22">

            <expr_stmt pos:start="115:13" pos:end="115:161"><expr pos:start="115:13" pos:end="115:160"><call pos:start="115:13" pos:end="115:160"><name pos:start="115:13" pos:end="115:18">av_log</name><argument_list pos:start="115:19" pos:end="115:160">(<argument pos:start="115:20" pos:end="115:27"><expr pos:start="115:20" pos:end="115:27"><name pos:start="115:20" pos:end="115:27"><name pos:start="115:20" pos:end="115:20">h</name><operator pos:start="115:21" pos:end="115:22">-&gt;</operator><name pos:start="115:23" pos:end="115:27">avctx</name></name></expr></argument>, <argument pos:start="115:30" pos:end="115:41"><expr pos:start="115:30" pos:end="115:41"><name pos:start="115:30" pos:end="115:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:44" pos:end="115:88"><expr pos:start="115:44" pos:end="115:88"><literal type="string" pos:start="115:44" pos:end="115:88">"mb_type %d in %c slice too large at %d %d\n"</literal></expr></argument>, <argument pos:start="115:91" pos:end="115:97"><expr pos:start="115:91" pos:end="115:97"><name pos:start="115:91" pos:end="115:97">mb_type</name></expr></argument>, <argument pos:start="115:100" pos:end="115:139"><expr pos:start="115:100" pos:end="115:139"><call pos:start="115:100" pos:end="115:139"><name pos:start="115:100" pos:end="115:123">av_get_picture_type_char</name><argument_list pos:start="115:124" pos:end="115:139">(<argument pos:start="115:125" pos:end="115:138"><expr pos:start="115:125" pos:end="115:138"><name pos:start="115:125" pos:end="115:138"><name pos:start="115:125" pos:end="115:126">sl</name><operator pos:start="115:127" pos:end="115:128">-&gt;</operator><name pos:start="115:129" pos:end="115:138">slice_type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="115:142" pos:end="115:149"><expr pos:start="115:142" pos:end="115:149"><name pos:start="115:142" pos:end="115:149"><name pos:start="115:142" pos:end="115:143">sl</name><operator pos:start="115:144" pos:end="115:145">-&gt;</operator><name pos:start="115:146" pos:end="115:149">mb_x</name></name></expr></argument>, <argument pos:start="115:152" pos:end="115:159"><expr pos:start="115:152" pos:end="115:159"><name pos:start="115:152" pos:end="115:159"><name pos:start="115:152" pos:end="115:153">sl</name><operator pos:start="115:154" pos:end="115:155">-&gt;</operator><name pos:start="115:156" pos:end="115:159">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="117:13" pos:end="117:22">return <expr pos:start="117:20" pos:end="117:21"><operator pos:start="117:20" pos:end="117:20">-</operator><literal type="number" pos:start="117:21" pos:end="117:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:26"><expr pos:start="121:9" pos:end="121:25"><name pos:start="121:9" pos:end="121:23">partition_count</name><operator pos:start="121:24" pos:end="121:24">=</operator><literal type="number" pos:start="121:25" pos:end="121:25">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:71"><expr pos:start="123:9" pos:end="123:70"><name pos:start="123:9" pos:end="123:11">cbp</name>                      <operator pos:start="123:34" pos:end="123:34">=</operator> <name pos:start="123:36" pos:end="123:66"><name pos:start="123:36" pos:end="123:57">ff_h264_i_mb_type_info</name><index pos:start="123:58" pos:end="123:66">[<expr pos:start="123:59" pos:end="123:65"><name pos:start="123:59" pos:end="123:65">mb_type</name></expr>]</index></name><operator pos:start="123:67" pos:end="123:67">.</operator><name pos:start="123:68" pos:end="123:70">cbp</name></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:77"><expr pos:start="125:9" pos:end="125:76"><name pos:start="125:9" pos:end="125:32"><name pos:start="125:9" pos:end="125:10">sl</name><operator pos:start="125:11" pos:end="125:12">-&gt;</operator><name pos:start="125:13" pos:end="125:32">intra16x16_pred_mode</name></name> <operator pos:start="125:34" pos:end="125:34">=</operator> <name pos:start="125:36" pos:end="125:66"><name pos:start="125:36" pos:end="125:57">ff_h264_i_mb_type_info</name><index pos:start="125:58" pos:end="125:66">[<expr pos:start="125:59" pos:end="125:65"><name pos:start="125:59" pos:end="125:65">mb_type</name></expr>]</index></name><operator pos:start="125:67" pos:end="125:67">.</operator><name pos:start="125:68" pos:end="125:76">pred_mode</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:72"><expr pos:start="127:9" pos:end="127:71"><name pos:start="127:9" pos:end="127:15">mb_type</name>                  <operator pos:start="127:34" pos:end="127:34">=</operator> <name pos:start="127:36" pos:end="127:66"><name pos:start="127:36" pos:end="127:57">ff_h264_i_mb_type_info</name><index pos:start="127:58" pos:end="127:66">[<expr pos:start="127:59" pos:end="127:65"><name pos:start="127:59" pos:end="127:65">mb_type</name></expr>]</index></name><operator pos:start="127:67" pos:end="127:67">.</operator><name pos:start="127:68" pos:end="127:71">type</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="133:5" pos:end="135:38"><if pos:start="133:5" pos:end="135:38">if <condition pos:start="133:8" pos:end="133:21">(<expr pos:start="133:9" pos:end="133:20"><call pos:start="133:9" pos:end="133:20"><name pos:start="133:9" pos:end="133:16">MB_FIELD</name><argument_list pos:start="133:17" pos:end="133:20">(<argument pos:start="133:18" pos:end="133:19"><expr pos:start="133:18" pos:end="133:19"><name pos:start="133:18" pos:end="133:19">sl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="135:9" pos:end="135:38"><block_content pos:start="135:9" pos:end="135:38">

        <expr_stmt pos:start="135:9" pos:end="135:38"><expr pos:start="135:9" pos:end="135:37"><name pos:start="135:9" pos:end="135:15">mb_type</name> <operator pos:start="135:17" pos:end="135:18">|=</operator> <name pos:start="135:20" pos:end="135:37">MB_TYPE_INTERLACED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:42"><expr pos:start="139:5" pos:end="139:41"><name pos:start="139:5" pos:end="139:25"><name pos:start="139:5" pos:end="139:5">h</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:18">slice_table</name><index pos:start="139:19" pos:end="139:25">[<expr pos:start="139:20" pos:end="139:24"><name pos:start="139:20" pos:end="139:24">mb_xy</name></expr>]</index></name> <operator pos:start="139:27" pos:end="139:27">=</operator> <name pos:start="139:29" pos:end="139:41"><name pos:start="139:29" pos:end="139:30">sl</name><operator pos:start="139:31" pos:end="139:32">-&gt;</operator><name pos:start="139:33" pos:end="139:41">slice_num</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="143:5" pos:end="181:5"><if pos:start="143:5" pos:end="181:5">if<condition pos:start="143:7" pos:end="143:29">(<expr pos:start="143:8" pos:end="143:28"><call pos:start="143:8" pos:end="143:28"><name pos:start="143:8" pos:end="143:19">IS_INTRA_PCM</name><argument_list pos:start="143:20" pos:end="143:28">(<argument pos:start="143:21" pos:end="143:27"><expr pos:start="143:21" pos:end="143:27"><name pos:start="143:21" pos:end="143:27">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="143:30" pos:end="181:5">{<block_content pos:start="145:9" pos:end="179:17">

        <decl_stmt pos:start="145:9" pos:end="147:54"><decl pos:start="145:9" pos:end="147:53"><type pos:start="145:9" pos:end="145:17"><specifier pos:start="145:9" pos:end="145:13">const</specifier> <name pos:start="145:15" pos:end="145:17">int</name></type> <name pos:start="145:19" pos:end="145:25">mb_size</name> <init pos:start="145:27" pos:end="147:53">= <expr pos:start="145:29" pos:end="147:53"><name pos:start="145:29" pos:end="145:74"><name pos:start="145:29" pos:end="145:44">ff_h264_mb_sizes</name><index pos:start="145:45" pos:end="145:74">[<expr pos:start="145:46" pos:end="145:73"><name pos:start="145:46" pos:end="145:73"><name pos:start="145:46" pos:end="145:46">h</name><operator pos:start="145:47" pos:end="145:48">-&gt;</operator><name pos:start="145:49" pos:end="145:50">ps</name><operator pos:start="145:51" pos:end="145:51">.</operator><name pos:start="145:52" pos:end="145:54">sps</name><operator pos:start="145:55" pos:end="145:56">-&gt;</operator><name pos:start="145:57" pos:end="145:73">chroma_format_idc</name></name></expr>]</index></name> <operator pos:start="145:76" pos:end="145:76">*</operator>

                            <name pos:start="147:29" pos:end="147:53"><name pos:start="147:29" pos:end="147:29">h</name><operator pos:start="147:30" pos:end="147:31">-&gt;</operator><name pos:start="147:32" pos:end="147:33">ps</name><operator pos:start="147:34" pos:end="147:34">.</operator><name pos:start="147:35" pos:end="147:37">sps</name><operator pos:start="147:38" pos:end="147:39">-&gt;</operator><name pos:start="147:40" pos:end="147:53">bit_depth_luma</name></name></expr></init></decl>;</decl_stmt>



        <comment type="line" pos:start="151:9" pos:end="151:73">// We assume these blocks are very rare so we do not optimize it.</comment>

        <expr_stmt pos:start="153:9" pos:end="153:52"><expr pos:start="153:9" pos:end="153:51"><name pos:start="153:9" pos:end="153:25"><name pos:start="153:9" pos:end="153:10">sl</name><operator pos:start="153:11" pos:end="153:12">-&gt;</operator><name pos:start="153:13" pos:end="153:25">intra_pcm_ptr</name></name> <operator pos:start="153:27" pos:end="153:27">=</operator> <call pos:start="153:29" pos:end="153:51"><name pos:start="153:29" pos:end="153:42">align_get_bits</name><argument_list pos:start="153:43" pos:end="153:51">(<argument pos:start="153:44" pos:end="153:50"><expr pos:start="153:44" pos:end="153:50"><operator pos:start="153:44" pos:end="153:44">&amp;</operator><name pos:start="153:45" pos:end="153:50"><name pos:start="153:45" pos:end="153:46">sl</name><operator pos:start="153:47" pos:end="153:48">-&gt;</operator><name pos:start="153:49" pos:end="153:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="161:9"><if pos:start="155:9" pos:end="161:9">if <condition pos:start="155:12" pos:end="155:45">(<expr pos:start="155:13" pos:end="155:44"><call pos:start="155:13" pos:end="155:34"><name pos:start="155:13" pos:end="155:25">get_bits_left</name><argument_list pos:start="155:26" pos:end="155:34">(<argument pos:start="155:27" pos:end="155:33"><expr pos:start="155:27" pos:end="155:33"><operator pos:start="155:27" pos:end="155:27">&amp;</operator><name pos:start="155:28" pos:end="155:33"><name pos:start="155:28" pos:end="155:29">sl</name><operator pos:start="155:30" pos:end="155:31">-&gt;</operator><name pos:start="155:32" pos:end="155:33">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="155:36" pos:end="155:36">&lt;</operator> <name pos:start="155:38" pos:end="155:44">mb_size</name></expr>)</condition> <block pos:start="155:47" pos:end="161:9">{<block_content pos:start="157:13" pos:end="159:39">

            <expr_stmt pos:start="157:13" pos:end="157:88"><expr pos:start="157:13" pos:end="157:87"><call pos:start="157:13" pos:end="157:87"><name pos:start="157:13" pos:end="157:18">av_log</name><argument_list pos:start="157:19" pos:end="157:87">(<argument pos:start="157:20" pos:end="157:27"><expr pos:start="157:20" pos:end="157:27"><name pos:start="157:20" pos:end="157:27"><name pos:start="157:20" pos:end="157:20">h</name><operator pos:start="157:21" pos:end="157:22">-&gt;</operator><name pos:start="157:23" pos:end="157:27">avctx</name></name></expr></argument>, <argument pos:start="157:30" pos:end="157:41"><expr pos:start="157:30" pos:end="157:41"><name pos:start="157:30" pos:end="157:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="157:44" pos:end="157:86"><expr pos:start="157:44" pos:end="157:86"><literal type="string" pos:start="157:44" pos:end="157:86">"Not enough data for an intra PCM block.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="159:13" pos:end="159:39">return <expr pos:start="159:20" pos:end="159:38"><name pos:start="159:20" pos:end="159:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:41"><expr pos:start="163:9" pos:end="163:40"><call pos:start="163:9" pos:end="163:40"><name pos:start="163:9" pos:end="163:22">skip_bits_long</name><argument_list pos:start="163:23" pos:end="163:40">(<argument pos:start="163:24" pos:end="163:30"><expr pos:start="163:24" pos:end="163:30"><operator pos:start="163:24" pos:end="163:24">&amp;</operator><name pos:start="163:25" pos:end="163:30"><name pos:start="163:25" pos:end="163:26">sl</name><operator pos:start="163:27" pos:end="163:28">-&gt;</operator><name pos:start="163:29" pos:end="163:30">gb</name></name></expr></argument>, <argument pos:start="163:33" pos:end="163:39"><expr pos:start="163:33" pos:end="163:39"><name pos:start="163:33" pos:end="163:39">mb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="167:9" pos:end="167:44">// In deblocking, the quantizer is 0</comment>

        <expr_stmt pos:start="169:9" pos:end="169:43"><expr pos:start="169:9" pos:end="169:42"><name pos:start="169:9" pos:end="169:38"><name pos:start="169:9" pos:end="169:9">h</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:18">cur_pic</name><operator pos:start="169:19" pos:end="169:19">.</operator><name pos:start="169:20" pos:end="169:31">qscale_table</name><index pos:start="169:32" pos:end="169:38">[<expr pos:start="169:33" pos:end="169:37"><name pos:start="169:33" pos:end="169:37">mb_xy</name></expr>]</index></name> <operator pos:start="169:40" pos:end="169:40">=</operator> <literal type="number" pos:start="169:42" pos:end="169:42">0</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="171:9" pos:end="171:33">// All coeffs are present</comment>

        <expr_stmt pos:start="173:9" pos:end="173:49"><expr pos:start="173:9" pos:end="173:48"><call pos:start="173:9" pos:end="173:48"><name pos:start="173:9" pos:end="173:14">memset</name><argument_list pos:start="173:15" pos:end="173:48">(<argument pos:start="173:16" pos:end="173:39"><expr pos:start="173:16" pos:end="173:39"><name pos:start="173:16" pos:end="173:39"><name pos:start="173:16" pos:end="173:16">h</name><operator pos:start="173:17" pos:end="173:18">-&gt;</operator><name pos:start="173:19" pos:end="173:32">non_zero_count</name><index pos:start="173:33" pos:end="173:39">[<expr pos:start="173:34" pos:end="173:38"><name pos:start="173:34" pos:end="173:38">mb_xy</name></expr>]</index></name></expr></argument>, <argument pos:start="173:42" pos:end="173:43"><expr pos:start="173:42" pos:end="173:43"><literal type="number" pos:start="173:42" pos:end="173:43">16</literal></expr></argument>, <argument pos:start="173:46" pos:end="173:47"><expr pos:start="173:46" pos:end="173:47"><literal type="number" pos:start="173:46" pos:end="173:47">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="177:9" pos:end="177:44"><expr pos:start="177:9" pos:end="177:43"><name pos:start="177:9" pos:end="177:33"><name pos:start="177:9" pos:end="177:9">h</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:18">cur_pic</name><operator pos:start="177:19" pos:end="177:19">.</operator><name pos:start="177:20" pos:end="177:26">mb_type</name><index pos:start="177:27" pos:end="177:33">[<expr pos:start="177:28" pos:end="177:32"><name pos:start="177:28" pos:end="177:32">mb_xy</name></expr>]</index></name> <operator pos:start="177:35" pos:end="177:35">=</operator> <name pos:start="177:37" pos:end="177:43">mb_type</name></expr>;</expr_stmt>

        <return pos:start="179:9" pos:end="179:17">return <expr pos:start="179:16" pos:end="179:16"><literal type="number" pos:start="179:16" pos:end="179:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:42"><expr pos:start="185:5" pos:end="185:41"><call pos:start="185:5" pos:end="185:41"><name pos:start="185:5" pos:end="185:25">fill_decode_neighbors</name><argument_list pos:start="185:26" pos:end="185:41">(<argument pos:start="185:27" pos:end="185:27"><expr pos:start="185:27" pos:end="185:27"><name pos:start="185:27" pos:end="185:27">h</name></expr></argument>, <argument pos:start="185:30" pos:end="185:31"><expr pos:start="185:30" pos:end="185:31"><name pos:start="185:30" pos:end="185:31">sl</name></expr></argument>, <argument pos:start="185:34" pos:end="185:40"><expr pos:start="185:34" pos:end="185:40"><name pos:start="185:34" pos:end="185:40">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:39"><expr pos:start="187:5" pos:end="187:38"><call pos:start="187:5" pos:end="187:38"><name pos:start="187:5" pos:end="187:22">fill_decode_caches</name><argument_list pos:start="187:23" pos:end="187:38">(<argument pos:start="187:24" pos:end="187:24"><expr pos:start="187:24" pos:end="187:24"><name pos:start="187:24" pos:end="187:24">h</name></expr></argument>, <argument pos:start="187:27" pos:end="187:28"><expr pos:start="187:27" pos:end="187:28"><name pos:start="187:27" pos:end="187:28">sl</name></expr></argument>, <argument pos:start="187:31" pos:end="187:37"><expr pos:start="187:31" pos:end="187:37"><name pos:start="187:31" pos:end="187:37">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="191:5" pos:end="191:13">//mb_pred</comment>

    <if_stmt pos:start="193:5" pos:end="713:5"><if pos:start="193:5" pos:end="281:5">if<condition pos:start="193:7" pos:end="193:25">(<expr pos:start="193:8" pos:end="193:24"><call pos:start="193:8" pos:end="193:24"><name pos:start="193:8" pos:end="193:15">IS_INTRA</name><argument_list pos:start="193:16" pos:end="193:24">(<argument pos:start="193:17" pos:end="193:23"><expr pos:start="193:17" pos:end="193:23"><name pos:start="193:17" pos:end="193:23">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="193:26" pos:end="281:5">{<block_content pos:start="195:9" pos:end="279:9">

        <decl_stmt pos:start="195:9" pos:end="195:22"><decl pos:start="195:9" pos:end="195:21"><type pos:start="195:9" pos:end="195:11"><name pos:start="195:9" pos:end="195:11">int</name></type> <name pos:start="195:13" pos:end="195:21">pred_mode</name></decl>;</decl_stmt>

<comment type="line" pos:start="197:1" pos:end="197:44">//            init_top_left_availability(h);</comment>

        <if_stmt pos:start="199:9" pos:end="261:9"><if pos:start="199:9" pos:end="251:9">if<condition pos:start="199:11" pos:end="199:32">(<expr pos:start="199:12" pos:end="199:31"><call pos:start="199:12" pos:end="199:31"><name pos:start="199:12" pos:end="199:22">IS_INTRA4x4</name><argument_list pos:start="199:23" pos:end="199:31">(<argument pos:start="199:24" pos:end="199:30"><expr pos:start="199:24" pos:end="199:30"><name pos:start="199:24" pos:end="199:30">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="199:33" pos:end="251:9">{<block_content pos:start="201:13" pos:end="249:26">

            <decl_stmt pos:start="201:13" pos:end="201:18"><decl pos:start="201:13" pos:end="201:17"><type pos:start="201:13" pos:end="201:15"><name pos:start="201:13" pos:end="201:15">int</name></type> <name pos:start="201:17" pos:end="201:17">i</name></decl>;</decl_stmt>

            <decl_stmt pos:start="203:13" pos:end="203:23"><decl pos:start="203:13" pos:end="203:22"><type pos:start="203:13" pos:end="203:15"><name pos:start="203:13" pos:end="203:15">int</name></type> <name pos:start="203:17" pos:end="203:18">di</name> <init pos:start="203:20" pos:end="203:22">= <expr pos:start="203:22" pos:end="203:22"><literal type="number" pos:start="203:22" pos:end="203:22">1</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="205:13" pos:end="211:13"><if pos:start="205:13" pos:end="211:13">if<condition pos:start="205:15" pos:end="205:52">(<expr pos:start="205:16" pos:end="205:51"><name pos:start="205:16" pos:end="205:29">dct8x8_allowed</name> <operator pos:start="205:31" pos:end="205:32">&amp;&amp;</operator> <call pos:start="205:34" pos:end="205:51"><name pos:start="205:34" pos:end="205:42">get_bits1</name><argument_list pos:start="205:43" pos:end="205:51">(<argument pos:start="205:44" pos:end="205:50"><expr pos:start="205:44" pos:end="205:50"><operator pos:start="205:44" pos:end="205:44">&amp;</operator><name pos:start="205:45" pos:end="205:50"><name pos:start="205:45" pos:end="205:46">sl</name><operator pos:start="205:47" pos:end="205:48">-&gt;</operator><name pos:start="205:49" pos:end="205:50">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="205:53" pos:end="211:13">{<block_content pos:start="207:17" pos:end="209:23">

                <expr_stmt pos:start="207:17" pos:end="207:42"><expr pos:start="207:17" pos:end="207:41"><name pos:start="207:17" pos:end="207:23">mb_type</name> <operator pos:start="207:25" pos:end="207:26">|=</operator> <name pos:start="207:28" pos:end="207:41">MB_TYPE_8x8DCT</name></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:23"><expr pos:start="209:17" pos:end="209:22"><name pos:start="209:17" pos:end="209:18">di</name> <operator pos:start="209:20" pos:end="209:20">=</operator> <literal type="number" pos:start="209:22" pos:end="209:22">4</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



<comment type="line" pos:start="215:1" pos:end="215:46">//                fill_intra4x4_pred_table(h);</comment>

            <for pos:start="217:13" pos:end="241:13">for<control pos:start="217:16" pos:end="217:33">(<init pos:start="217:17" pos:end="217:20"><expr pos:start="217:17" pos:end="217:19"><name pos:start="217:17" pos:end="217:17">i</name><operator pos:start="217:18" pos:end="217:18">=</operator><literal type="number" pos:start="217:19" pos:end="217:19">0</literal></expr>;</init> <condition pos:start="217:22" pos:end="217:26"><expr pos:start="217:22" pos:end="217:25"><name pos:start="217:22" pos:end="217:22">i</name><operator pos:start="217:23" pos:end="217:23">&lt;</operator><literal type="number" pos:start="217:24" pos:end="217:25">16</literal></expr>;</condition> <incr pos:start="217:28" pos:end="217:32"><expr pos:start="217:28" pos:end="217:32"><name pos:start="217:28" pos:end="217:28">i</name><operator pos:start="217:29" pos:end="217:30">+=</operator><name pos:start="217:31" pos:end="217:32">di</name></expr></incr>)</control><block pos:start="217:34" pos:end="241:13">{<block_content pos:start="219:17" pos:end="239:66">

                <decl_stmt pos:start="219:17" pos:end="219:53"><decl pos:start="219:17" pos:end="219:52"><type pos:start="219:17" pos:end="219:19"><name pos:start="219:17" pos:end="219:19">int</name></type> <name pos:start="219:21" pos:end="219:24">mode</name> <init pos:start="219:26" pos:end="219:52">= <expr pos:start="219:28" pos:end="219:52"><call pos:start="219:28" pos:end="219:52"><name pos:start="219:28" pos:end="219:42">pred_intra_mode</name><argument_list pos:start="219:43" pos:end="219:52">(<argument pos:start="219:44" pos:end="219:44"><expr pos:start="219:44" pos:end="219:44"><name pos:start="219:44" pos:end="219:44">h</name></expr></argument>, <argument pos:start="219:47" pos:end="219:48"><expr pos:start="219:47" pos:end="219:48"><name pos:start="219:47" pos:end="219:48">sl</name></expr></argument>, <argument pos:start="219:51" pos:end="219:51"><expr pos:start="219:51" pos:end="219:51"><name pos:start="219:51" pos:end="219:51">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="223:17" pos:end="229:17"><if pos:start="223:17" pos:end="229:17">if<condition pos:start="223:19" pos:end="223:39">(<expr pos:start="223:20" pos:end="223:38"><operator pos:start="223:20" pos:end="223:20">!</operator><call pos:start="223:21" pos:end="223:38"><name pos:start="223:21" pos:end="223:29">get_bits1</name><argument_list pos:start="223:30" pos:end="223:38">(<argument pos:start="223:31" pos:end="223:37"><expr pos:start="223:31" pos:end="223:37"><operator pos:start="223:31" pos:end="223:31">&amp;</operator><name pos:start="223:32" pos:end="223:37"><name pos:start="223:32" pos:end="223:33">sl</name><operator pos:start="223:34" pos:end="223:35">-&gt;</operator><name pos:start="223:36" pos:end="223:37">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="223:40" pos:end="229:17">{<block_content pos:start="225:21" pos:end="227:57">

                    <decl_stmt pos:start="225:21" pos:end="225:61"><decl pos:start="225:21" pos:end="225:60"><type pos:start="225:21" pos:end="225:29"><specifier pos:start="225:21" pos:end="225:25">const</specifier> <name pos:start="225:27" pos:end="225:29">int</name></type> <name pos:start="225:31" pos:end="225:38">rem_mode</name><init pos:start="225:39" pos:end="225:60">= <expr pos:start="225:41" pos:end="225:60"><call pos:start="225:41" pos:end="225:60"><name pos:start="225:41" pos:end="225:48">get_bits</name><argument_list pos:start="225:49" pos:end="225:60">(<argument pos:start="225:50" pos:end="225:56"><expr pos:start="225:50" pos:end="225:56"><operator pos:start="225:50" pos:end="225:50">&amp;</operator><name pos:start="225:51" pos:end="225:56"><name pos:start="225:51" pos:end="225:52">sl</name><operator pos:start="225:53" pos:end="225:54">-&gt;</operator><name pos:start="225:55" pos:end="225:56">gb</name></name></expr></argument>, <argument pos:start="225:59" pos:end="225:59"><expr pos:start="225:59" pos:end="225:59"><literal type="number" pos:start="225:59" pos:end="225:59">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="227:21" pos:end="227:57"><expr pos:start="227:21" pos:end="227:56"><name pos:start="227:21" pos:end="227:24">mode</name> <operator pos:start="227:26" pos:end="227:26">=</operator> <name pos:start="227:28" pos:end="227:35">rem_mode</name> <operator pos:start="227:37" pos:end="227:37">+</operator> <operator pos:start="227:39" pos:end="227:39">(</operator><name pos:start="227:40" pos:end="227:47">rem_mode</name> <operator pos:start="227:49" pos:end="227:50">&gt;=</operator> <name pos:start="227:52" pos:end="227:55">mode</name><operator pos:start="227:56" pos:end="227:56">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="233:17" pos:end="239:66"><if pos:start="233:17" pos:end="235:96">if<condition pos:start="233:19" pos:end="233:25">(<expr pos:start="233:20" pos:end="233:24"><name pos:start="233:20" pos:end="233:21">di</name><operator pos:start="233:22" pos:end="233:23">==</operator><literal type="number" pos:start="233:24" pos:end="233:24">4</literal></expr>)</condition><block type="pseudo" pos:start="235:21" pos:end="235:96"><block_content pos:start="235:21" pos:end="235:96">

                    <expr_stmt pos:start="235:21" pos:end="235:96"><expr pos:start="235:21" pos:end="235:95"><call pos:start="235:21" pos:end="235:95"><name pos:start="235:21" pos:end="235:34">fill_rectangle</name><argument_list pos:start="235:35" pos:end="235:95">(<argument pos:start="235:36" pos:end="235:76"><expr pos:start="235:36" pos:end="235:76"><operator pos:start="235:36" pos:end="235:36">&amp;</operator><name pos:start="235:37" pos:end="235:76"><name pos:start="235:37" pos:end="235:38">sl</name><operator pos:start="235:39" pos:end="235:40">-&gt;</operator><name pos:start="235:41" pos:end="235:64">intra4x4_pred_mode_cache</name><index pos:start="235:65" pos:end="235:76">[ <expr pos:start="235:67" pos:end="235:74"><name pos:start="235:67" pos:end="235:74"><name pos:start="235:67" pos:end="235:71">scan8</name><index pos:start="235:72" pos:end="235:74">[<expr pos:start="235:73" pos:end="235:73"><name pos:start="235:73" pos:end="235:73">i</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="235:79" pos:end="235:79"><expr pos:start="235:79" pos:end="235:79"><literal type="number" pos:start="235:79" pos:end="235:79">2</literal></expr></argument>, <argument pos:start="235:82" pos:end="235:82"><expr pos:start="235:82" pos:end="235:82"><literal type="number" pos:start="235:82" pos:end="235:82">2</literal></expr></argument>, <argument pos:start="235:85" pos:end="235:85"><expr pos:start="235:85" pos:end="235:85"><literal type="number" pos:start="235:85" pos:end="235:85">8</literal></expr></argument>, <argument pos:start="235:88" pos:end="235:91"><expr pos:start="235:88" pos:end="235:91"><name pos:start="235:88" pos:end="235:91">mode</name></expr></argument>, <argument pos:start="235:94" pos:end="235:94"><expr pos:start="235:94" pos:end="235:94"><literal type="number" pos:start="235:94" pos:end="235:94">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="237:17" pos:end="239:66">else<block type="pseudo" pos:start="239:21" pos:end="239:66"><block_content pos:start="239:21" pos:end="239:66">

                    <expr_stmt pos:start="239:21" pos:end="239:66"><expr pos:start="239:21" pos:end="239:65"><name pos:start="239:21" pos:end="239:58"><name pos:start="239:21" pos:end="239:22">sl</name><operator pos:start="239:23" pos:end="239:24">-&gt;</operator><name pos:start="239:25" pos:end="239:48">intra4x4_pred_mode_cache</name><index pos:start="239:49" pos:end="239:58">[<expr pos:start="239:50" pos:end="239:57"><name pos:start="239:50" pos:end="239:57"><name pos:start="239:50" pos:end="239:54">scan8</name><index pos:start="239:55" pos:end="239:57">[<expr pos:start="239:56" pos:end="239:56"><name pos:start="239:56" pos:end="239:56">i</name></expr>]</index></name></expr>]</index></name> <operator pos:start="239:60" pos:end="239:60">=</operator> <name pos:start="239:62" pos:end="239:65">mode</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="243:13" pos:end="243:46"><expr pos:start="243:13" pos:end="243:45"><call pos:start="243:13" pos:end="243:45"><name pos:start="243:13" pos:end="243:38">write_back_intra_pred_mode</name><argument_list pos:start="243:39" pos:end="243:45">(<argument pos:start="243:40" pos:end="243:40"><expr pos:start="243:40" pos:end="243:40"><name pos:start="243:40" pos:end="243:40">h</name></expr></argument>, <argument pos:start="243:43" pos:end="243:44"><expr pos:start="243:43" pos:end="243:44"><name pos:start="243:43" pos:end="243:44">sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="245:13" pos:end="249:26"><if pos:start="245:13" pos:end="249:26">if <condition pos:start="245:16" pos:end="247:108">(<expr pos:start="245:17" pos:end="247:107"><call pos:start="245:17" pos:end="247:103"><name pos:start="245:17" pos:end="245:48">ff_h264_check_intra4x4_pred_mode</name><argument_list pos:start="245:49" pos:end="247:103">(<argument pos:start="245:50" pos:end="245:77"><expr pos:start="245:50" pos:end="245:77"><name pos:start="245:50" pos:end="245:77"><name pos:start="245:50" pos:end="245:51">sl</name><operator pos:start="245:52" pos:end="245:53">-&gt;</operator><name pos:start="245:54" pos:end="245:77">intra4x4_pred_mode_cache</name></name></expr></argument>, <argument pos:start="245:80" pos:end="245:87"><expr pos:start="245:80" pos:end="245:87"><name pos:start="245:80" pos:end="245:87"><name pos:start="245:80" pos:end="245:80">h</name><operator pos:start="245:81" pos:end="245:82">-&gt;</operator><name pos:start="245:83" pos:end="245:87">avctx</name></name></expr></argument>,

                                                 <argument pos:start="247:50" pos:end="247:74"><expr pos:start="247:50" pos:end="247:74"><name pos:start="247:50" pos:end="247:74"><name pos:start="247:50" pos:end="247:51">sl</name><operator pos:start="247:52" pos:end="247:53">-&gt;</operator><name pos:start="247:54" pos:end="247:74">top_samples_available</name></name></expr></argument>, <argument pos:start="247:77" pos:end="247:102"><expr pos:start="247:77" pos:end="247:102"><name pos:start="247:77" pos:end="247:102"><name pos:start="247:77" pos:end="247:78">sl</name><operator pos:start="247:79" pos:end="247:80">-&gt;</operator><name pos:start="247:81" pos:end="247:102">left_samples_available</name></name></expr></argument>)</argument_list></call> <operator pos:start="247:105" pos:end="247:105">&lt;</operator> <literal type="number" pos:start="247:107" pos:end="247:107">0</literal></expr>)</condition><block type="pseudo" pos:start="249:17" pos:end="249:26"><block_content pos:start="249:17" pos:end="249:26">

                <return pos:start="249:17" pos:end="249:26">return <expr pos:start="249:24" pos:end="249:25"><operator pos:start="249:24" pos:end="249:24">-</operator><literal type="number" pos:start="249:25" pos:end="249:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if><else pos:start="251:10" pos:end="261:9">else<block pos:start="251:14" pos:end="261:9">{<block_content pos:start="253:13" pos:end="259:26">

            <expr_stmt pos:start="253:13" pos:end="255:126"><expr pos:start="253:13" pos:end="255:125"><name pos:start="253:13" pos:end="253:36"><name pos:start="253:13" pos:end="253:14">sl</name><operator pos:start="253:15" pos:end="253:16">-&gt;</operator><name pos:start="253:17" pos:end="253:36">intra16x16_pred_mode</name></name> <operator pos:start="253:38" pos:end="253:38">=</operator> <call pos:start="253:40" pos:end="255:125"><name pos:start="253:40" pos:end="253:68">ff_h264_check_intra_pred_mode</name><argument_list pos:start="253:69" pos:end="255:125">(<argument pos:start="253:70" pos:end="253:77"><expr pos:start="253:70" pos:end="253:77"><name pos:start="253:70" pos:end="253:77"><name pos:start="253:70" pos:end="253:70">h</name><operator pos:start="253:71" pos:end="253:72">-&gt;</operator><name pos:start="253:73" pos:end="253:77">avctx</name></name></expr></argument>, <argument pos:start="253:80" pos:end="253:104"><expr pos:start="253:80" pos:end="253:104"><name pos:start="253:80" pos:end="253:104"><name pos:start="253:80" pos:end="253:81">sl</name><operator pos:start="253:82" pos:end="253:83">-&gt;</operator><name pos:start="253:84" pos:end="253:104">top_samples_available</name></name></expr></argument>,

                                                                     <argument pos:start="255:70" pos:end="255:95"><expr pos:start="255:70" pos:end="255:95"><name pos:start="255:70" pos:end="255:95"><name pos:start="255:70" pos:end="255:71">sl</name><operator pos:start="255:72" pos:end="255:73">-&gt;</operator><name pos:start="255:74" pos:end="255:95">left_samples_available</name></name></expr></argument>, <argument pos:start="255:98" pos:end="255:121"><expr pos:start="255:98" pos:end="255:121"><name pos:start="255:98" pos:end="255:121"><name pos:start="255:98" pos:end="255:99">sl</name><operator pos:start="255:100" pos:end="255:101">-&gt;</operator><name pos:start="255:102" pos:end="255:121">intra16x16_pred_mode</name></name></expr></argument>, <argument pos:start="255:124" pos:end="255:124"><expr pos:start="255:124" pos:end="255:124"><literal type="number" pos:start="255:124" pos:end="255:124">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="257:13" pos:end="259:26"><if pos:start="257:13" pos:end="259:26">if <condition pos:start="257:16" pos:end="257:45">(<expr pos:start="257:17" pos:end="257:44"><name pos:start="257:17" pos:end="257:40"><name pos:start="257:17" pos:end="257:18">sl</name><operator pos:start="257:19" pos:end="257:20">-&gt;</operator><name pos:start="257:21" pos:end="257:40">intra16x16_pred_mode</name></name> <operator pos:start="257:42" pos:end="257:42">&lt;</operator> <literal type="number" pos:start="257:44" pos:end="257:44">0</literal></expr>)</condition><block type="pseudo" pos:start="259:17" pos:end="259:26"><block_content pos:start="259:17" pos:end="259:26">

                <return pos:start="259:17" pos:end="259:26">return <expr pos:start="259:24" pos:end="259:25"><operator pos:start="259:24" pos:end="259:24">-</operator><literal type="number" pos:start="259:25" pos:end="259:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="263:9" pos:end="279:9"><if pos:start="263:9" pos:end="275:9">if<condition pos:start="263:11" pos:end="263:25">(<expr pos:start="263:12" pos:end="263:24"><name pos:start="263:12" pos:end="263:24">decode_chroma</name></expr>)</condition><block pos:start="263:26" pos:end="275:9">{<block_content pos:start="265:13" pos:end="273:45">

            <expr_stmt pos:start="265:13" pos:end="267:111"><expr pos:start="265:13" pos:end="267:110"><name pos:start="265:13" pos:end="265:21">pred_mode</name><operator pos:start="265:22" pos:end="265:22">=</operator> <call pos:start="265:24" pos:end="267:110"><name pos:start="265:24" pos:end="265:52">ff_h264_check_intra_pred_mode</name><argument_list pos:start="265:53" pos:end="267:110">(<argument pos:start="265:54" pos:end="265:61"><expr pos:start="265:54" pos:end="265:61"><name pos:start="265:54" pos:end="265:61"><name pos:start="265:54" pos:end="265:54">h</name><operator pos:start="265:55" pos:end="265:56">-&gt;</operator><name pos:start="265:57" pos:end="265:61">avctx</name></name></expr></argument>, <argument pos:start="265:64" pos:end="265:88"><expr pos:start="265:64" pos:end="265:88"><name pos:start="265:64" pos:end="265:88"><name pos:start="265:64" pos:end="265:65">sl</name><operator pos:start="265:66" pos:end="265:67">-&gt;</operator><name pos:start="265:68" pos:end="265:88">top_samples_available</name></name></expr></argument>,

                                                     <argument pos:start="267:54" pos:end="267:79"><expr pos:start="267:54" pos:end="267:79"><name pos:start="267:54" pos:end="267:79"><name pos:start="267:54" pos:end="267:55">sl</name><operator pos:start="267:56" pos:end="267:57">-&gt;</operator><name pos:start="267:58" pos:end="267:79">left_samples_available</name></name></expr></argument>, <argument pos:start="267:82" pos:end="267:106"><expr pos:start="267:82" pos:end="267:106"><call pos:start="267:82" pos:end="267:106"><name pos:start="267:82" pos:end="267:97">get_ue_golomb_31</name><argument_list pos:start="267:98" pos:end="267:106">(<argument pos:start="267:99" pos:end="267:105"><expr pos:start="267:99" pos:end="267:105"><operator pos:start="267:99" pos:end="267:99">&amp;</operator><name pos:start="267:100" pos:end="267:105"><name pos:start="267:100" pos:end="267:101">sl</name><operator pos:start="267:102" pos:end="267:103">-&gt;</operator><name pos:start="267:104" pos:end="267:105">gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="267:109" pos:end="267:109"><expr pos:start="267:109" pos:end="267:109"><literal type="number" pos:start="267:109" pos:end="267:109">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="269:13" pos:end="271:26"><if pos:start="269:13" pos:end="271:26">if<condition pos:start="269:15" pos:end="269:29">(<expr pos:start="269:16" pos:end="269:28"><name pos:start="269:16" pos:end="269:24">pred_mode</name> <operator pos:start="269:26" pos:end="269:26">&lt;</operator> <literal type="number" pos:start="269:28" pos:end="269:28">0</literal></expr>)</condition><block type="pseudo" pos:start="271:17" pos:end="271:26"><block_content pos:start="271:17" pos:end="271:26">

                <return pos:start="271:17" pos:end="271:26">return <expr pos:start="271:24" pos:end="271:25"><operator pos:start="271:24" pos:end="271:24">-</operator><literal type="number" pos:start="271:25" pos:end="271:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:45"><expr pos:start="273:13" pos:end="273:44"><name pos:start="273:13" pos:end="273:32"><name pos:start="273:13" pos:end="273:14">sl</name><operator pos:start="273:15" pos:end="273:16">-&gt;</operator><name pos:start="273:17" pos:end="273:32">chroma_pred_mode</name></name> <operator pos:start="273:34" pos:end="273:34">=</operator> <name pos:start="273:36" pos:end="273:44">pred_mode</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="275:11" pos:end="279:9">else <block pos:start="275:16" pos:end="279:9">{<block_content pos:start="277:13" pos:end="277:50">

            <expr_stmt pos:start="277:13" pos:end="277:50"><expr pos:start="277:13" pos:end="277:49"><name pos:start="277:13" pos:end="277:32"><name pos:start="277:13" pos:end="277:14">sl</name><operator pos:start="277:15" pos:end="277:16">-&gt;</operator><name pos:start="277:17" pos:end="277:32">chroma_pred_mode</name></name> <operator pos:start="277:34" pos:end="277:34">=</operator> <name pos:start="277:36" pos:end="277:49">DC_128_PRED8x8</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if><if type="elseif" pos:start="281:6" pos:end="489:5">else if<condition pos:start="281:13" pos:end="281:32">(<expr pos:start="281:14" pos:end="281:31"><name pos:start="281:14" pos:end="281:28">partition_count</name><operator pos:start="281:29" pos:end="281:30">==</operator><literal type="number" pos:start="281:31" pos:end="281:31">4</literal></expr>)</condition><block pos:start="281:33" pos:end="489:5">{<block_content pos:start="283:9" pos:end="487:9">

        <decl_stmt pos:start="283:9" pos:end="283:58"><decl pos:start="283:9" pos:end="283:13"><type pos:start="283:9" pos:end="283:11"><name pos:start="283:9" pos:end="283:11">int</name></type> <name pos:start="283:13" pos:end="283:13">i</name></decl>, <decl pos:start="283:16" pos:end="283:16"><type ref="prev" pos:start="283:9" pos:end="283:11"/><name pos:start="283:16" pos:end="283:16">j</name></decl>, <decl pos:start="283:19" pos:end="283:40"><type ref="prev" pos:start="283:9" pos:end="283:11"/><name pos:start="283:19" pos:end="283:40"><name pos:start="283:19" pos:end="283:37">sub_partition_count</name><index pos:start="283:38" pos:end="283:40">[<expr pos:start="283:39" pos:end="283:39"><literal type="number" pos:start="283:39" pos:end="283:39">4</literal></expr>]</index></name></decl>, <decl pos:start="283:43" pos:end="283:46"><type ref="prev" pos:start="283:9" pos:end="283:11"/><name pos:start="283:43" pos:end="283:46">list</name></decl>, <decl pos:start="283:49" pos:end="283:57"><type ref="prev" pos:start="283:9" pos:end="283:11"/><name pos:start="283:49" pos:end="283:57"><name pos:start="283:49" pos:end="283:51">ref</name><index pos:start="283:52" pos:end="283:54">[<expr pos:start="283:53" pos:end="283:53"><literal type="number" pos:start="283:53" pos:end="283:53">2</literal></expr>]</index><index pos:start="283:55" pos:end="283:57">[<expr pos:start="283:56" pos:end="283:56"><literal type="number" pos:start="283:56" pos:end="283:56">4</literal></expr>]</index></name></decl>;</decl_stmt>



        <if_stmt pos:start="287:9" pos:end="343:9"><if pos:start="287:9" pos:end="321:9">if <condition pos:start="287:12" pos:end="287:52">(<expr pos:start="287:13" pos:end="287:51"><name pos:start="287:13" pos:end="287:30"><name pos:start="287:13" pos:end="287:14">sl</name><operator pos:start="287:15" pos:end="287:16">-&gt;</operator><name pos:start="287:17" pos:end="287:30">slice_type_nos</name></name> <operator pos:start="287:32" pos:end="287:33">==</operator> <name pos:start="287:35" pos:end="287:51">AV_PICTURE_TYPE_B</name></expr>)</condition> <block pos:start="287:54" pos:end="321:9">{<block_content pos:start="289:13" pos:end="319:13">

            <for pos:start="289:13" pos:end="305:13">for<control pos:start="289:16" pos:end="289:30">(<init pos:start="289:17" pos:end="289:20"><expr pos:start="289:17" pos:end="289:19"><name pos:start="289:17" pos:end="289:17">i</name><operator pos:start="289:18" pos:end="289:18">=</operator><literal type="number" pos:start="289:19" pos:end="289:19">0</literal></expr>;</init> <condition pos:start="289:22" pos:end="289:25"><expr pos:start="289:22" pos:end="289:24"><name pos:start="289:22" pos:end="289:22">i</name><operator pos:start="289:23" pos:end="289:23">&lt;</operator><literal type="number" pos:start="289:24" pos:end="289:24">4</literal></expr>;</condition> <incr pos:start="289:27" pos:end="289:29"><expr pos:start="289:27" pos:end="289:29"><name pos:start="289:27" pos:end="289:27">i</name><operator pos:start="289:28" pos:end="289:29">++</operator></expr></incr>)</control><block pos:start="289:31" pos:end="305:13">{<block_content pos:start="291:17" pos:end="303:93">

                <expr_stmt pos:start="291:17" pos:end="291:62"><expr pos:start="291:17" pos:end="291:61"><name pos:start="291:17" pos:end="291:34"><name pos:start="291:17" pos:end="291:18">sl</name><operator pos:start="291:19" pos:end="291:20">-&gt;</operator><name pos:start="291:21" pos:end="291:31">sub_mb_type</name><index pos:start="291:32" pos:end="291:34">[<expr pos:start="291:33" pos:end="291:33"><name pos:start="291:33" pos:end="291:33">i</name></expr>]</index></name><operator pos:start="291:35" pos:end="291:35">=</operator> <call pos:start="291:37" pos:end="291:61"><name pos:start="291:37" pos:end="291:52">get_ue_golomb_31</name><argument_list pos:start="291:53" pos:end="291:61">(<argument pos:start="291:54" pos:end="291:60"><expr pos:start="291:54" pos:end="291:60"><operator pos:start="291:54" pos:end="291:54">&amp;</operator><name pos:start="291:55" pos:end="291:60"><name pos:start="291:55" pos:end="291:56">sl</name><operator pos:start="291:57" pos:end="291:58">-&gt;</operator><name pos:start="291:59" pos:end="291:60">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="293:17" pos:end="299:17"><if pos:start="293:17" pos:end="299:17">if<condition pos:start="293:19" pos:end="293:43">(<expr pos:start="293:20" pos:end="293:42"><name pos:start="293:20" pos:end="293:37"><name pos:start="293:20" pos:end="293:21">sl</name><operator pos:start="293:22" pos:end="293:23">-&gt;</operator><name pos:start="293:24" pos:end="293:34">sub_mb_type</name><index pos:start="293:35" pos:end="293:37">[<expr pos:start="293:36" pos:end="293:36"><name pos:start="293:36" pos:end="293:36">i</name></expr>]</index></name> <operator pos:start="293:39" pos:end="293:40">&gt;=</operator><literal type="number" pos:start="293:41" pos:end="293:42">13</literal></expr>)</condition><block pos:start="293:44" pos:end="299:17">{<block_content pos:start="295:21" pos:end="297:30">

                    <expr_stmt pos:start="295:21" pos:end="295:135"><expr pos:start="295:21" pos:end="295:134"><call pos:start="295:21" pos:end="295:134"><name pos:start="295:21" pos:end="295:26">av_log</name><argument_list pos:start="295:27" pos:end="295:134">(<argument pos:start="295:28" pos:end="295:35"><expr pos:start="295:28" pos:end="295:35"><name pos:start="295:28" pos:end="295:35"><name pos:start="295:28" pos:end="295:28">h</name><operator pos:start="295:29" pos:end="295:30">-&gt;</operator><name pos:start="295:31" pos:end="295:35">avctx</name></name></expr></argument>, <argument pos:start="295:38" pos:end="295:49"><expr pos:start="295:38" pos:end="295:49"><name pos:start="295:38" pos:end="295:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="295:52" pos:end="295:93"><expr pos:start="295:52" pos:end="295:93"><literal type="string" pos:start="295:52" pos:end="295:93">"B sub_mb_type %u out of range at %d %d\n"</literal></expr></argument>, <argument pos:start="295:96" pos:end="295:113"><expr pos:start="295:96" pos:end="295:113"><name pos:start="295:96" pos:end="295:113"><name pos:start="295:96" pos:end="295:97">sl</name><operator pos:start="295:98" pos:end="295:99">-&gt;</operator><name pos:start="295:100" pos:end="295:110">sub_mb_type</name><index pos:start="295:111" pos:end="295:113">[<expr pos:start="295:112" pos:end="295:112"><name pos:start="295:112" pos:end="295:112">i</name></expr>]</index></name></expr></argument>, <argument pos:start="295:116" pos:end="295:123"><expr pos:start="295:116" pos:end="295:123"><name pos:start="295:116" pos:end="295:123"><name pos:start="295:116" pos:end="295:117">sl</name><operator pos:start="295:118" pos:end="295:119">-&gt;</operator><name pos:start="295:120" pos:end="295:123">mb_x</name></name></expr></argument>, <argument pos:start="295:126" pos:end="295:133"><expr pos:start="295:126" pos:end="295:133"><name pos:start="295:126" pos:end="295:133"><name pos:start="295:126" pos:end="295:127">sl</name><operator pos:start="295:128" pos:end="295:129">-&gt;</operator><name pos:start="295:130" pos:end="295:133">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="297:21" pos:end="297:30">return <expr pos:start="297:28" pos:end="297:29"><operator pos:start="297:28" pos:end="297:28">-</operator><literal type="number" pos:start="297:29" pos:end="297:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="301:17" pos:end="301:104"><expr pos:start="301:17" pos:end="301:103"><name pos:start="301:17" pos:end="301:38"><name pos:start="301:17" pos:end="301:35">sub_partition_count</name><index pos:start="301:36" pos:end="301:38">[<expr pos:start="301:37" pos:end="301:37"><name pos:start="301:37" pos:end="301:37">i</name></expr>]</index></name> <operator pos:start="301:40" pos:end="301:40">=</operator> <name pos:start="301:42" pos:end="301:87"><name pos:start="301:42" pos:end="301:67">ff_h264_b_sub_mb_type_info</name><index pos:start="301:68" pos:end="301:87">[<expr pos:start="301:69" pos:end="301:86"><name pos:start="301:69" pos:end="301:86"><name pos:start="301:69" pos:end="301:70">sl</name><operator pos:start="301:71" pos:end="301:72">-&gt;</operator><name pos:start="301:73" pos:end="301:83">sub_mb_type</name><index pos:start="301:84" pos:end="301:86">[<expr pos:start="301:85" pos:end="301:85"><name pos:start="301:85" pos:end="301:85">i</name></expr>]</index></name></expr>]</index></name><operator pos:start="301:88" pos:end="301:88">.</operator><name pos:start="301:89" pos:end="301:103">partition_count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="303:17" pos:end="303:93"><expr pos:start="303:17" pos:end="303:92"><name pos:start="303:17" pos:end="303:34"><name pos:start="303:17" pos:end="303:18">sl</name><operator pos:start="303:19" pos:end="303:20">-&gt;</operator><name pos:start="303:21" pos:end="303:31">sub_mb_type</name><index pos:start="303:32" pos:end="303:34">[<expr pos:start="303:33" pos:end="303:33"><name pos:start="303:33" pos:end="303:33">i</name></expr>]</index></name>     <operator pos:start="303:40" pos:end="303:40">=</operator> <name pos:start="303:42" pos:end="303:87"><name pos:start="303:42" pos:end="303:67">ff_h264_b_sub_mb_type_info</name><index pos:start="303:68" pos:end="303:87">[<expr pos:start="303:69" pos:end="303:86"><name pos:start="303:69" pos:end="303:86"><name pos:start="303:69" pos:end="303:70">sl</name><operator pos:start="303:71" pos:end="303:72">-&gt;</operator><name pos:start="303:73" pos:end="303:83">sub_mb_type</name><index pos:start="303:84" pos:end="303:86">[<expr pos:start="303:85" pos:end="303:85"><name pos:start="303:85" pos:end="303:85">i</name></expr>]</index></name></expr>]</index></name><operator pos:start="303:88" pos:end="303:88">.</operator><name pos:start="303:89" pos:end="303:92">type</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="307:13" pos:end="319:13"><if pos:start="307:13" pos:end="319:13">if<condition pos:start="307:15" pos:end="307:103">( <expr pos:start="307:17" pos:end="307:102"><call pos:start="307:17" pos:end="307:102"><name pos:start="307:17" pos:end="307:25">IS_DIRECT</name><argument_list pos:start="307:26" pos:end="307:102">(<argument pos:start="307:27" pos:end="307:101"><expr pos:start="307:27" pos:end="307:101"><name pos:start="307:27" pos:end="307:44"><name pos:start="307:27" pos:end="307:28">sl</name><operator pos:start="307:29" pos:end="307:30">-&gt;</operator><name pos:start="307:31" pos:end="307:41">sub_mb_type</name><index pos:start="307:42" pos:end="307:44">[<expr pos:start="307:43" pos:end="307:43"><literal type="number" pos:start="307:43" pos:end="307:43">0</literal></expr>]</index></name><operator pos:start="307:45" pos:end="307:45">|</operator><name pos:start="307:46" pos:end="307:63"><name pos:start="307:46" pos:end="307:47">sl</name><operator pos:start="307:48" pos:end="307:49">-&gt;</operator><name pos:start="307:50" pos:end="307:60">sub_mb_type</name><index pos:start="307:61" pos:end="307:63">[<expr pos:start="307:62" pos:end="307:62"><literal type="number" pos:start="307:62" pos:end="307:62">1</literal></expr>]</index></name><operator pos:start="307:64" pos:end="307:64">|</operator><name pos:start="307:65" pos:end="307:82"><name pos:start="307:65" pos:end="307:66">sl</name><operator pos:start="307:67" pos:end="307:68">-&gt;</operator><name pos:start="307:69" pos:end="307:79">sub_mb_type</name><index pos:start="307:80" pos:end="307:82">[<expr pos:start="307:81" pos:end="307:81"><literal type="number" pos:start="307:81" pos:end="307:81">2</literal></expr>]</index></name><operator pos:start="307:83" pos:end="307:83">|</operator><name pos:start="307:84" pos:end="307:101"><name pos:start="307:84" pos:end="307:85">sl</name><operator pos:start="307:86" pos:end="307:87">-&gt;</operator><name pos:start="307:88" pos:end="307:98">sub_mb_type</name><index pos:start="307:99" pos:end="307:101">[<expr pos:start="307:100" pos:end="307:100"><literal type="number" pos:start="307:100" pos:end="307:100">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="307:105" pos:end="319:13">{<block_content pos:start="309:17" pos:end="317:65">

                <expr_stmt pos:start="309:17" pos:end="309:60"><expr pos:start="309:17" pos:end="309:59"><call pos:start="309:17" pos:end="309:59"><name pos:start="309:17" pos:end="309:42">ff_h264_pred_direct_motion</name><argument_list pos:start="309:43" pos:end="309:59">(<argument pos:start="309:44" pos:end="309:44"><expr pos:start="309:44" pos:end="309:44"><name pos:start="309:44" pos:end="309:44">h</name></expr></argument>, <argument pos:start="309:47" pos:end="309:48"><expr pos:start="309:47" pos:end="309:48"><name pos:start="309:47" pos:end="309:48">sl</name></expr></argument>, <argument pos:start="309:51" pos:end="309:58"><expr pos:start="309:51" pos:end="309:58"><operator pos:start="309:51" pos:end="309:51">&amp;</operator><name pos:start="309:52" pos:end="309:58">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="311:17" pos:end="317:65"><expr pos:start="311:17" pos:end="317:64"><name pos:start="311:17" pos:end="311:42"><name pos:start="311:17" pos:end="311:18">sl</name><operator pos:start="311:19" pos:end="311:20">-&gt;</operator><name pos:start="311:21" pos:end="311:29">ref_cache</name><index pos:start="311:30" pos:end="311:32">[<expr pos:start="311:31" pos:end="311:31"><literal type="number" pos:start="311:31" pos:end="311:31">0</literal></expr>]</index><index pos:start="311:33" pos:end="311:42">[<expr pos:start="311:34" pos:end="311:41"><name pos:start="311:34" pos:end="311:41"><name pos:start="311:34" pos:end="311:38">scan8</name><index pos:start="311:39" pos:end="311:41">[<expr pos:start="311:40" pos:end="311:40"><literal type="number" pos:start="311:40" pos:end="311:40">4</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="311:44" pos:end="311:44">=</operator>

                <name pos:start="313:17" pos:end="313:42"><name pos:start="313:17" pos:end="313:18">sl</name><operator pos:start="313:19" pos:end="313:20">-&gt;</operator><name pos:start="313:21" pos:end="313:29">ref_cache</name><index pos:start="313:30" pos:end="313:32">[<expr pos:start="313:31" pos:end="313:31"><literal type="number" pos:start="313:31" pos:end="313:31">1</literal></expr>]</index><index pos:start="313:33" pos:end="313:42">[<expr pos:start="313:34" pos:end="313:41"><name pos:start="313:34" pos:end="313:41"><name pos:start="313:34" pos:end="313:38">scan8</name><index pos:start="313:39" pos:end="313:41">[<expr pos:start="313:40" pos:end="313:40"><literal type="number" pos:start="313:40" pos:end="313:40">4</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="313:44" pos:end="313:44">=</operator>

                <name pos:start="315:17" pos:end="315:43"><name pos:start="315:17" pos:end="315:18">sl</name><operator pos:start="315:19" pos:end="315:20">-&gt;</operator><name pos:start="315:21" pos:end="315:29">ref_cache</name><index pos:start="315:30" pos:end="315:32">[<expr pos:start="315:31" pos:end="315:31"><literal type="number" pos:start="315:31" pos:end="315:31">0</literal></expr>]</index><index pos:start="315:33" pos:end="315:43">[<expr pos:start="315:34" pos:end="315:42"><name pos:start="315:34" pos:end="315:42"><name pos:start="315:34" pos:end="315:38">scan8</name><index pos:start="315:39" pos:end="315:42">[<expr pos:start="315:40" pos:end="315:41"><literal type="number" pos:start="315:40" pos:end="315:41">12</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="315:45" pos:end="315:45">=</operator>

                <name pos:start="317:17" pos:end="317:43"><name pos:start="317:17" pos:end="317:18">sl</name><operator pos:start="317:19" pos:end="317:20">-&gt;</operator><name pos:start="317:21" pos:end="317:29">ref_cache</name><index pos:start="317:30" pos:end="317:32">[<expr pos:start="317:31" pos:end="317:31"><literal type="number" pos:start="317:31" pos:end="317:31">1</literal></expr>]</index><index pos:start="317:33" pos:end="317:43">[<expr pos:start="317:34" pos:end="317:42"><name pos:start="317:34" pos:end="317:42"><name pos:start="317:34" pos:end="317:38">scan8</name><index pos:start="317:39" pos:end="317:42">[<expr pos:start="317:40" pos:end="317:41"><literal type="number" pos:start="317:40" pos:end="317:41">12</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="317:45" pos:end="317:45">=</operator> <name pos:start="317:47" pos:end="317:64">PART_NOT_AVAILABLE</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if><else pos:start="321:10" pos:end="343:9">else<block pos:start="321:14" pos:end="343:9">{<block_content pos:start="323:13" pos:end="341:13">

            <expr_stmt pos:start="323:13" pos:end="323:64"><expr pos:start="323:13" pos:end="323:63"><call pos:start="323:13" pos:end="323:63"><name pos:start="323:13" pos:end="323:22">av_assert2</name><argument_list pos:start="323:23" pos:end="323:63">(<argument pos:start="323:24" pos:end="323:62"><expr pos:start="323:24" pos:end="323:62"><name pos:start="323:24" pos:end="323:41"><name pos:start="323:24" pos:end="323:25">sl</name><operator pos:start="323:26" pos:end="323:27">-&gt;</operator><name pos:start="323:28" pos:end="323:41">slice_type_nos</name></name> <operator pos:start="323:43" pos:end="323:44">==</operator> <name pos:start="323:46" pos:end="323:62">AV_PICTURE_TYPE_P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="323:66" pos:end="323:85">//FIXME SP correct ?</comment>

            <for pos:start="325:13" pos:end="341:13">for<control pos:start="325:16" pos:end="325:30">(<init pos:start="325:17" pos:end="325:20"><expr pos:start="325:17" pos:end="325:19"><name pos:start="325:17" pos:end="325:17">i</name><operator pos:start="325:18" pos:end="325:18">=</operator><literal type="number" pos:start="325:19" pos:end="325:19">0</literal></expr>;</init> <condition pos:start="325:22" pos:end="325:25"><expr pos:start="325:22" pos:end="325:24"><name pos:start="325:22" pos:end="325:22">i</name><operator pos:start="325:23" pos:end="325:23">&lt;</operator><literal type="number" pos:start="325:24" pos:end="325:24">4</literal></expr>;</condition> <incr pos:start="325:27" pos:end="325:29"><expr pos:start="325:27" pos:end="325:29"><name pos:start="325:27" pos:end="325:27">i</name><operator pos:start="325:28" pos:end="325:29">++</operator></expr></incr>)</control><block pos:start="325:31" pos:end="341:13">{<block_content pos:start="327:17" pos:end="339:93">

                <expr_stmt pos:start="327:17" pos:end="327:62"><expr pos:start="327:17" pos:end="327:61"><name pos:start="327:17" pos:end="327:34"><name pos:start="327:17" pos:end="327:18">sl</name><operator pos:start="327:19" pos:end="327:20">-&gt;</operator><name pos:start="327:21" pos:end="327:31">sub_mb_type</name><index pos:start="327:32" pos:end="327:34">[<expr pos:start="327:33" pos:end="327:33"><name pos:start="327:33" pos:end="327:33">i</name></expr>]</index></name><operator pos:start="327:35" pos:end="327:35">=</operator> <call pos:start="327:37" pos:end="327:61"><name pos:start="327:37" pos:end="327:52">get_ue_golomb_31</name><argument_list pos:start="327:53" pos:end="327:61">(<argument pos:start="327:54" pos:end="327:60"><expr pos:start="327:54" pos:end="327:60"><operator pos:start="327:54" pos:end="327:54">&amp;</operator><name pos:start="327:55" pos:end="327:60"><name pos:start="327:55" pos:end="327:56">sl</name><operator pos:start="327:57" pos:end="327:58">-&gt;</operator><name pos:start="327:59" pos:end="327:60">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="329:17" pos:end="335:17"><if pos:start="329:17" pos:end="335:17">if<condition pos:start="329:19" pos:end="329:42">(<expr pos:start="329:20" pos:end="329:41"><name pos:start="329:20" pos:end="329:37"><name pos:start="329:20" pos:end="329:21">sl</name><operator pos:start="329:22" pos:end="329:23">-&gt;</operator><name pos:start="329:24" pos:end="329:34">sub_mb_type</name><index pos:start="329:35" pos:end="329:37">[<expr pos:start="329:36" pos:end="329:36"><name pos:start="329:36" pos:end="329:36">i</name></expr>]</index></name> <operator pos:start="329:39" pos:end="329:40">&gt;=</operator><literal type="number" pos:start="329:41" pos:end="329:41">4</literal></expr>)</condition><block pos:start="329:43" pos:end="335:17">{<block_content pos:start="331:21" pos:end="333:30">

                    <expr_stmt pos:start="331:21" pos:end="331:135"><expr pos:start="331:21" pos:end="331:134"><call pos:start="331:21" pos:end="331:134"><name pos:start="331:21" pos:end="331:26">av_log</name><argument_list pos:start="331:27" pos:end="331:134">(<argument pos:start="331:28" pos:end="331:35"><expr pos:start="331:28" pos:end="331:35"><name pos:start="331:28" pos:end="331:35"><name pos:start="331:28" pos:end="331:28">h</name><operator pos:start="331:29" pos:end="331:30">-&gt;</operator><name pos:start="331:31" pos:end="331:35">avctx</name></name></expr></argument>, <argument pos:start="331:38" pos:end="331:49"><expr pos:start="331:38" pos:end="331:49"><name pos:start="331:38" pos:end="331:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="331:52" pos:end="331:93"><expr pos:start="331:52" pos:end="331:93"><literal type="string" pos:start="331:52" pos:end="331:93">"P sub_mb_type %u out of range at %d %d\n"</literal></expr></argument>, <argument pos:start="331:96" pos:end="331:113"><expr pos:start="331:96" pos:end="331:113"><name pos:start="331:96" pos:end="331:113"><name pos:start="331:96" pos:end="331:97">sl</name><operator pos:start="331:98" pos:end="331:99">-&gt;</operator><name pos:start="331:100" pos:end="331:110">sub_mb_type</name><index pos:start="331:111" pos:end="331:113">[<expr pos:start="331:112" pos:end="331:112"><name pos:start="331:112" pos:end="331:112">i</name></expr>]</index></name></expr></argument>, <argument pos:start="331:116" pos:end="331:123"><expr pos:start="331:116" pos:end="331:123"><name pos:start="331:116" pos:end="331:123"><name pos:start="331:116" pos:end="331:117">sl</name><operator pos:start="331:118" pos:end="331:119">-&gt;</operator><name pos:start="331:120" pos:end="331:123">mb_x</name></name></expr></argument>, <argument pos:start="331:126" pos:end="331:133"><expr pos:start="331:126" pos:end="331:133"><name pos:start="331:126" pos:end="331:133"><name pos:start="331:126" pos:end="331:127">sl</name><operator pos:start="331:128" pos:end="331:129">-&gt;</operator><name pos:start="331:130" pos:end="331:133">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="333:21" pos:end="333:30">return <expr pos:start="333:28" pos:end="333:29"><operator pos:start="333:28" pos:end="333:28">-</operator><literal type="number" pos:start="333:29" pos:end="333:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="337:17" pos:end="337:104"><expr pos:start="337:17" pos:end="337:103"><name pos:start="337:17" pos:end="337:38"><name pos:start="337:17" pos:end="337:35">sub_partition_count</name><index pos:start="337:36" pos:end="337:38">[<expr pos:start="337:37" pos:end="337:37"><name pos:start="337:37" pos:end="337:37">i</name></expr>]</index></name> <operator pos:start="337:40" pos:end="337:40">=</operator> <name pos:start="337:42" pos:end="337:87"><name pos:start="337:42" pos:end="337:67">ff_h264_p_sub_mb_type_info</name><index pos:start="337:68" pos:end="337:87">[<expr pos:start="337:69" pos:end="337:86"><name pos:start="337:69" pos:end="337:86"><name pos:start="337:69" pos:end="337:70">sl</name><operator pos:start="337:71" pos:end="337:72">-&gt;</operator><name pos:start="337:73" pos:end="337:83">sub_mb_type</name><index pos:start="337:84" pos:end="337:86">[<expr pos:start="337:85" pos:end="337:85"><name pos:start="337:85" pos:end="337:85">i</name></expr>]</index></name></expr>]</index></name><operator pos:start="337:88" pos:end="337:88">.</operator><name pos:start="337:89" pos:end="337:103">partition_count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="339:17" pos:end="339:93"><expr pos:start="339:17" pos:end="339:92"><name pos:start="339:17" pos:end="339:34"><name pos:start="339:17" pos:end="339:18">sl</name><operator pos:start="339:19" pos:end="339:20">-&gt;</operator><name pos:start="339:21" pos:end="339:31">sub_mb_type</name><index pos:start="339:32" pos:end="339:34">[<expr pos:start="339:33" pos:end="339:33"><name pos:start="339:33" pos:end="339:33">i</name></expr>]</index></name>     <operator pos:start="339:40" pos:end="339:40">=</operator> <name pos:start="339:42" pos:end="339:87"><name pos:start="339:42" pos:end="339:67">ff_h264_p_sub_mb_type_info</name><index pos:start="339:68" pos:end="339:87">[<expr pos:start="339:69" pos:end="339:86"><name pos:start="339:69" pos:end="339:86"><name pos:start="339:69" pos:end="339:70">sl</name><operator pos:start="339:71" pos:end="339:72">-&gt;</operator><name pos:start="339:73" pos:end="339:83">sub_mb_type</name><index pos:start="339:84" pos:end="339:86">[<expr pos:start="339:85" pos:end="339:85"><name pos:start="339:85" pos:end="339:85">i</name></expr>]</index></name></expr>]</index></name><operator pos:start="339:88" pos:end="339:88">.</operator><name pos:start="339:89" pos:end="339:92">type</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>



        <for pos:start="347:9" pos:end="393:9">for <control pos:start="347:13" pos:end="347:53">(<init pos:start="347:14" pos:end="347:22"><expr pos:start="347:14" pos:end="347:21"><name pos:start="347:14" pos:end="347:17">list</name> <operator pos:start="347:19" pos:end="347:19">=</operator> <literal type="number" pos:start="347:21" pos:end="347:21">0</literal></expr>;</init> <condition pos:start="347:24" pos:end="347:45"><expr pos:start="347:24" pos:end="347:44"><name pos:start="347:24" pos:end="347:27">list</name> <operator pos:start="347:29" pos:end="347:29">&lt;</operator> <name pos:start="347:31" pos:end="347:44"><name pos:start="347:31" pos:end="347:32">sl</name><operator pos:start="347:33" pos:end="347:34">-&gt;</operator><name pos:start="347:35" pos:end="347:44">list_count</name></name></expr>;</condition> <incr pos:start="347:47" pos:end="347:52"><expr pos:start="347:47" pos:end="347:52"><name pos:start="347:47" pos:end="347:50">list</name><operator pos:start="347:51" pos:end="347:52">++</operator></expr></incr>)</control> <block pos:start="347:55" pos:end="393:9">{<block_content pos:start="349:13" pos:end="391:13">

            <decl_stmt pos:start="349:13" pos:end="349:87"><decl pos:start="349:13" pos:end="349:86"><type pos:start="349:13" pos:end="349:15"><name pos:start="349:13" pos:end="349:15">int</name></type> <name pos:start="349:17" pos:end="349:25">ref_count</name> <init pos:start="349:27" pos:end="349:86">= <expr pos:start="349:29" pos:end="349:86"><ternary pos:start="349:29" pos:end="349:86"><condition pos:start="349:29" pos:end="349:46"><expr pos:start="349:29" pos:end="349:44"><call pos:start="349:29" pos:end="349:44"><name pos:start="349:29" pos:end="349:35">IS_REF0</name><argument_list pos:start="349:36" pos:end="349:44">(<argument pos:start="349:37" pos:end="349:43"><expr pos:start="349:37" pos:end="349:43"><name pos:start="349:37" pos:end="349:43">mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="349:48" pos:end="349:48"> <expr pos:start="349:48" pos:end="349:48"><literal type="number" pos:start="349:48" pos:end="349:48">1</literal></expr> </then><else pos:start="349:50" pos:end="349:86">: <expr pos:start="349:52" pos:end="349:86"><name pos:start="349:52" pos:end="349:70"><name pos:start="349:52" pos:end="349:53">sl</name><operator pos:start="349:54" pos:end="349:55">-&gt;</operator><name pos:start="349:56" pos:end="349:64">ref_count</name><index pos:start="349:65" pos:end="349:70">[<expr pos:start="349:66" pos:end="349:69"><name pos:start="349:66" pos:end="349:69">list</name></expr>]</index></name> <operator pos:start="349:72" pos:end="349:73">&lt;&lt;</operator> <call pos:start="349:75" pos:end="349:86"><name pos:start="349:75" pos:end="349:82">MB_MBAFF</name><argument_list pos:start="349:83" pos:end="349:86">(<argument pos:start="349:84" pos:end="349:85"><expr pos:start="349:84" pos:end="349:85"><name pos:start="349:84" pos:end="349:85">sl</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <for pos:start="351:13" pos:end="391:13">for<control pos:start="351:16" pos:end="351:30">(<init pos:start="351:17" pos:end="351:20"><expr pos:start="351:17" pos:end="351:19"><name pos:start="351:17" pos:end="351:17">i</name><operator pos:start="351:18" pos:end="351:18">=</operator><literal type="number" pos:start="351:19" pos:end="351:19">0</literal></expr>;</init> <condition pos:start="351:22" pos:end="351:25"><expr pos:start="351:22" pos:end="351:24"><name pos:start="351:22" pos:end="351:22">i</name><operator pos:start="351:23" pos:end="351:23">&lt;</operator><literal type="number" pos:start="351:24" pos:end="351:24">4</literal></expr>;</condition> <incr pos:start="351:27" pos:end="351:29"><expr pos:start="351:27" pos:end="351:29"><name pos:start="351:27" pos:end="351:27">i</name><operator pos:start="351:28" pos:end="351:29">++</operator></expr></incr>)</control><block pos:start="351:31" pos:end="391:13">{<block_content pos:start="353:17" pos:end="389:17">

                <if_stmt pos:start="353:17" pos:end="353:59"><if pos:start="353:17" pos:end="353:59">if<condition pos:start="353:19" pos:end="353:49">(<expr pos:start="353:20" pos:end="353:48"><call pos:start="353:20" pos:end="353:48"><name pos:start="353:20" pos:end="353:28">IS_DIRECT</name><argument_list pos:start="353:29" pos:end="353:48">(<argument pos:start="353:30" pos:end="353:47"><expr pos:start="353:30" pos:end="353:47"><name pos:start="353:30" pos:end="353:47"><name pos:start="353:30" pos:end="353:31">sl</name><operator pos:start="353:32" pos:end="353:33">-&gt;</operator><name pos:start="353:34" pos:end="353:44">sub_mb_type</name><index pos:start="353:45" pos:end="353:47">[<expr pos:start="353:46" pos:end="353:46"><name pos:start="353:46" pos:end="353:46">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="353:51" pos:end="353:59"><block_content pos:start="353:51" pos:end="353:59"> <continue pos:start="353:51" pos:end="353:59">continue;</continue></block_content></block></if></if_stmt>

                <if_stmt pos:start="355:17" pos:end="389:17"><if pos:start="355:17" pos:end="383:17">if<condition pos:start="355:19" pos:end="355:55">(<expr pos:start="355:20" pos:end="355:54"><call pos:start="355:20" pos:end="355:54"><name pos:start="355:20" pos:end="355:25">IS_DIR</name><argument_list pos:start="355:26" pos:end="355:54">(<argument pos:start="355:27" pos:end="355:44"><expr pos:start="355:27" pos:end="355:44"><name pos:start="355:27" pos:end="355:44"><name pos:start="355:27" pos:end="355:28">sl</name><operator pos:start="355:29" pos:end="355:30">-&gt;</operator><name pos:start="355:31" pos:end="355:41">sub_mb_type</name><index pos:start="355:42" pos:end="355:44">[<expr pos:start="355:43" pos:end="355:43"><name pos:start="355:43" pos:end="355:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="355:47" pos:end="355:47"><expr pos:start="355:47" pos:end="355:47"><literal type="number" pos:start="355:47" pos:end="355:47">0</literal></expr></argument>, <argument pos:start="355:50" pos:end="355:53"><expr pos:start="355:50" pos:end="355:53"><name pos:start="355:50" pos:end="355:53">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="355:56" pos:end="383:17">{<block_content pos:start="357:21" pos:end="381:38">

                    <decl_stmt pos:start="357:21" pos:end="357:37"><decl pos:start="357:21" pos:end="357:36"><type pos:start="357:21" pos:end="357:32"><name pos:start="357:21" pos:end="357:28">unsigned</name> <name pos:start="357:30" pos:end="357:32">int</name></type> <name pos:start="357:34" pos:end="357:36">tmp</name></decl>;</decl_stmt>

                    <if_stmt pos:start="359:21" pos:end="379:21"><if pos:start="359:21" pos:end="363:21">if<condition pos:start="359:23" pos:end="359:38">(<expr pos:start="359:24" pos:end="359:37"><name pos:start="359:24" pos:end="359:32">ref_count</name> <operator pos:start="359:34" pos:end="359:35">==</operator> <literal type="number" pos:start="359:37" pos:end="359:37">1</literal></expr>)</condition><block pos:start="359:39" pos:end="363:21">{<block_content pos:start="361:25" pos:end="361:31">

                        <expr_stmt pos:start="361:25" pos:end="361:31"><expr pos:start="361:25" pos:end="361:30"><name pos:start="361:25" pos:end="361:27">tmp</name><operator pos:start="361:28" pos:end="361:28">=</operator> <literal type="number" pos:start="361:30" pos:end="361:30">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if><if type="elseif" pos:start="363:22" pos:end="367:21">else if<condition pos:start="363:29" pos:end="363:44">(<expr pos:start="363:30" pos:end="363:43"><name pos:start="363:30" pos:end="363:38">ref_count</name> <operator pos:start="363:40" pos:end="363:41">==</operator> <literal type="number" pos:start="363:43" pos:end="363:43">2</literal></expr>)</condition><block pos:start="363:45" pos:end="367:21">{<block_content pos:start="365:25" pos:end="365:50">

                        <expr_stmt pos:start="365:25" pos:end="365:50"><expr pos:start="365:25" pos:end="365:49"><name pos:start="365:25" pos:end="365:27">tmp</name><operator pos:start="365:28" pos:end="365:28">=</operator> <call pos:start="365:30" pos:end="365:47"><name pos:start="365:30" pos:end="365:38">get_bits1</name><argument_list pos:start="365:39" pos:end="365:47">(<argument pos:start="365:40" pos:end="365:46"><expr pos:start="365:40" pos:end="365:46"><operator pos:start="365:40" pos:end="365:40">&amp;</operator><name pos:start="365:41" pos:end="365:46"><name pos:start="365:41" pos:end="365:42">sl</name><operator pos:start="365:43" pos:end="365:44">-&gt;</operator><name pos:start="365:45" pos:end="365:46">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="365:48" pos:end="365:48">^</operator><literal type="number" pos:start="365:49" pos:end="365:49">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="367:22" pos:end="379:21">else<block pos:start="367:26" pos:end="379:21">{<block_content pos:start="369:25" pos:end="377:25">

                        <expr_stmt pos:start="369:25" pos:end="369:55"><expr pos:start="369:25" pos:end="369:54"><name pos:start="369:25" pos:end="369:27">tmp</name><operator pos:start="369:28" pos:end="369:28">=</operator> <call pos:start="369:30" pos:end="369:54"><name pos:start="369:30" pos:end="369:45">get_ue_golomb_31</name><argument_list pos:start="369:46" pos:end="369:54">(<argument pos:start="369:47" pos:end="369:53"><expr pos:start="369:47" pos:end="369:53"><operator pos:start="369:47" pos:end="369:47">&amp;</operator><name pos:start="369:48" pos:end="369:53"><name pos:start="369:48" pos:end="369:49">sl</name><operator pos:start="369:50" pos:end="369:51">-&gt;</operator><name pos:start="369:52" pos:end="369:53">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="371:25" pos:end="377:25"><if pos:start="371:25" pos:end="377:25">if<condition pos:start="371:27" pos:end="371:42">(<expr pos:start="371:28" pos:end="371:41"><name pos:start="371:28" pos:end="371:30">tmp</name><operator pos:start="371:31" pos:end="371:32">&gt;=</operator><name pos:start="371:33" pos:end="371:41">ref_count</name></expr>)</condition><block pos:start="371:43" pos:end="377:25">{<block_content pos:start="373:29" pos:end="375:38">

                            <expr_stmt pos:start="373:29" pos:end="373:85"><expr pos:start="373:29" pos:end="373:84"><call pos:start="373:29" pos:end="373:84"><name pos:start="373:29" pos:end="373:34">av_log</name><argument_list pos:start="373:35" pos:end="373:84">(<argument pos:start="373:36" pos:end="373:43"><expr pos:start="373:36" pos:end="373:43"><name pos:start="373:36" pos:end="373:43"><name pos:start="373:36" pos:end="373:36">h</name><operator pos:start="373:37" pos:end="373:38">-&gt;</operator><name pos:start="373:39" pos:end="373:43">avctx</name></name></expr></argument>, <argument pos:start="373:46" pos:end="373:57"><expr pos:start="373:46" pos:end="373:57"><name pos:start="373:46" pos:end="373:57">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="373:60" pos:end="373:78"><expr pos:start="373:60" pos:end="373:78"><literal type="string" pos:start="373:60" pos:end="373:78">"ref %u overflow\n"</literal></expr></argument>, <argument pos:start="373:81" pos:end="373:83"><expr pos:start="373:81" pos:end="373:83"><name pos:start="373:81" pos:end="373:83">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <return pos:start="375:29" pos:end="375:38">return <expr pos:start="375:36" pos:end="375:37"><operator pos:start="375:36" pos:end="375:36">-</operator><literal type="number" pos:start="375:37" pos:end="375:37">1</literal></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="381:21" pos:end="381:38"><expr pos:start="381:21" pos:end="381:37"><name pos:start="381:21" pos:end="381:32"><name pos:start="381:21" pos:end="381:23">ref</name><index pos:start="381:24" pos:end="381:29">[<expr pos:start="381:25" pos:end="381:28"><name pos:start="381:25" pos:end="381:28">list</name></expr>]</index><index pos:start="381:30" pos:end="381:32">[<expr pos:start="381:31" pos:end="381:31"><name pos:start="381:31" pos:end="381:31">i</name></expr>]</index></name><operator pos:start="381:33" pos:end="381:33">=</operator> <name pos:start="381:35" pos:end="381:37">tmp</name></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="383:18" pos:end="389:17">else<block pos:start="383:22" pos:end="389:17">{<block_content pos:start="387:21" pos:end="387:38">

                 <comment type="line" pos:start="385:18" pos:end="385:24">//FIXME</comment>

                    <expr_stmt pos:start="387:21" pos:end="387:38"><expr pos:start="387:21" pos:end="387:37"><name pos:start="387:21" pos:end="387:32"><name pos:start="387:21" pos:end="387:23">ref</name><index pos:start="387:24" pos:end="387:29">[<expr pos:start="387:25" pos:end="387:28"><name pos:start="387:25" pos:end="387:28">list</name></expr>]</index><index pos:start="387:30" pos:end="387:32">[<expr pos:start="387:31" pos:end="387:31"><name pos:start="387:31" pos:end="387:31">i</name></expr>]</index></name> <operator pos:start="387:34" pos:end="387:34">=</operator> <operator pos:start="387:36" pos:end="387:36">-</operator><literal type="number" pos:start="387:37" pos:end="387:37">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <if_stmt pos:start="397:9" pos:end="399:55"><if pos:start="397:9" pos:end="399:55">if<condition pos:start="397:11" pos:end="397:26">(<expr pos:start="397:12" pos:end="397:25"><name pos:start="397:12" pos:end="397:25">dct8x8_allowed</name></expr>)</condition><block type="pseudo" pos:start="399:13" pos:end="399:55"><block_content pos:start="399:13" pos:end="399:55">

            <expr_stmt pos:start="399:13" pos:end="399:55"><expr pos:start="399:13" pos:end="399:54"><name pos:start="399:13" pos:end="399:26">dct8x8_allowed</name> <operator pos:start="399:28" pos:end="399:28">=</operator> <call pos:start="399:30" pos:end="399:54"><name pos:start="399:30" pos:end="399:47">get_dct8x8_allowed</name><argument_list pos:start="399:48" pos:end="399:54">(<argument pos:start="399:49" pos:end="399:49"><expr pos:start="399:49" pos:end="399:49"><name pos:start="399:49" pos:end="399:49">h</name></expr></argument>, <argument pos:start="399:52" pos:end="399:53"><expr pos:start="399:52" pos:end="399:53"><name pos:start="399:52" pos:end="399:53">sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <for pos:start="403:9" pos:end="487:9">for <control pos:start="403:13" pos:end="403:53">(<init pos:start="403:14" pos:end="403:22"><expr pos:start="403:14" pos:end="403:21"><name pos:start="403:14" pos:end="403:17">list</name> <operator pos:start="403:19" pos:end="403:19">=</operator> <literal type="number" pos:start="403:21" pos:end="403:21">0</literal></expr>;</init> <condition pos:start="403:24" pos:end="403:45"><expr pos:start="403:24" pos:end="403:44"><name pos:start="403:24" pos:end="403:27">list</name> <operator pos:start="403:29" pos:end="403:29">&lt;</operator> <name pos:start="403:31" pos:end="403:44"><name pos:start="403:31" pos:end="403:32">sl</name><operator pos:start="403:33" pos:end="403:34">-&gt;</operator><name pos:start="403:35" pos:end="403:44">list_count</name></name></expr>;</condition> <incr pos:start="403:47" pos:end="403:52"><expr pos:start="403:47" pos:end="403:52"><name pos:start="403:47" pos:end="403:50">list</name><operator pos:start="403:51" pos:end="403:52">++</operator></expr></incr>)</control> <block pos:start="403:55" pos:end="487:9">{<block_content pos:start="405:13" pos:end="485:13">

            <for pos:start="405:13" pos:end="485:13">for<control pos:start="405:16" pos:end="405:30">(<init pos:start="405:17" pos:end="405:20"><expr pos:start="405:17" pos:end="405:19"><name pos:start="405:17" pos:end="405:17">i</name><operator pos:start="405:18" pos:end="405:18">=</operator><literal type="number" pos:start="405:19" pos:end="405:19">0</literal></expr>;</init> <condition pos:start="405:22" pos:end="405:25"><expr pos:start="405:22" pos:end="405:24"><name pos:start="405:22" pos:end="405:22">i</name><operator pos:start="405:23" pos:end="405:23">&lt;</operator><literal type="number" pos:start="405:24" pos:end="405:24">4</literal></expr>;</condition> <incr pos:start="405:27" pos:end="405:29"><expr pos:start="405:27" pos:end="405:29"><name pos:start="405:27" pos:end="405:27">i</name><operator pos:start="405:28" pos:end="405:29">++</operator></expr></incr>)</control><block pos:start="405:31" pos:end="485:13">{<block_content pos:start="407:17" pos:end="483:17">

                <if_stmt pos:start="407:17" pos:end="413:17"><if pos:start="407:17" pos:end="413:17">if<condition pos:start="407:19" pos:end="407:49">(<expr pos:start="407:20" pos:end="407:48"><call pos:start="407:20" pos:end="407:48"><name pos:start="407:20" pos:end="407:28">IS_DIRECT</name><argument_list pos:start="407:29" pos:end="407:48">(<argument pos:start="407:30" pos:end="407:47"><expr pos:start="407:30" pos:end="407:47"><name pos:start="407:30" pos:end="407:47"><name pos:start="407:30" pos:end="407:31">sl</name><operator pos:start="407:32" pos:end="407:33">-&gt;</operator><name pos:start="407:34" pos:end="407:44">sub_mb_type</name><index pos:start="407:45" pos:end="407:47">[<expr pos:start="407:46" pos:end="407:46"><name pos:start="407:46" pos:end="407:46">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="407:51" pos:end="413:17">{<block_content pos:start="409:21" pos:end="411:29">

                    <expr_stmt pos:start="409:21" pos:end="409:92"><expr pos:start="409:21" pos:end="409:91"><name pos:start="409:21" pos:end="409:53"><name pos:start="409:21" pos:end="409:22">sl</name><operator pos:start="409:23" pos:end="409:24">-&gt;</operator><name pos:start="409:25" pos:end="409:33">ref_cache</name><index pos:start="409:34" pos:end="409:39">[<expr pos:start="409:35" pos:end="409:38"><name pos:start="409:35" pos:end="409:38">list</name></expr>]</index><index pos:start="409:40" pos:end="409:53">[ <expr pos:start="409:42" pos:end="409:51"><name pos:start="409:42" pos:end="409:51"><name pos:start="409:42" pos:end="409:46">scan8</name><index pos:start="409:47" pos:end="409:51">[<expr pos:start="409:48" pos:end="409:50"><literal type="number" pos:start="409:48" pos:end="409:48">4</literal><operator pos:start="409:49" pos:end="409:49">*</operator><name pos:start="409:50" pos:end="409:50">i</name></expr>]</index></name></expr> ]</index></name> <operator pos:start="409:55" pos:end="409:55">=</operator> <name pos:start="409:57" pos:end="409:91"><name pos:start="409:57" pos:end="409:58">sl</name><operator pos:start="409:59" pos:end="409:60">-&gt;</operator><name pos:start="409:61" pos:end="409:69">ref_cache</name><index pos:start="409:70" pos:end="409:75">[<expr pos:start="409:71" pos:end="409:74"><name pos:start="409:71" pos:end="409:74">list</name></expr>]</index><index pos:start="409:76" pos:end="409:91">[ <expr pos:start="409:78" pos:end="409:89"><name pos:start="409:78" pos:end="409:87"><name pos:start="409:78" pos:end="409:82">scan8</name><index pos:start="409:83" pos:end="409:87">[<expr pos:start="409:84" pos:end="409:86"><literal type="number" pos:start="409:84" pos:end="409:84">4</literal><operator pos:start="409:85" pos:end="409:85">*</operator><name pos:start="409:86" pos:end="409:86">i</name></expr>]</index></name><operator pos:start="409:88" pos:end="409:88">+</operator><literal type="number" pos:start="409:89" pos:end="409:89">1</literal></expr> ]</index></name></expr>;</expr_stmt>

                    <continue pos:start="411:21" pos:end="411:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="415:17" pos:end="417:102"><expr pos:start="415:17" pos:end="417:101"><name pos:start="415:17" pos:end="415:51"><name pos:start="415:17" pos:end="415:18">sl</name><operator pos:start="415:19" pos:end="415:20">-&gt;</operator><name pos:start="415:21" pos:end="415:29">ref_cache</name><index pos:start="415:30" pos:end="415:35">[<expr pos:start="415:31" pos:end="415:34"><name pos:start="415:31" pos:end="415:34">list</name></expr>]</index><index pos:start="415:36" pos:end="415:51">[ <expr pos:start="415:38" pos:end="415:47"><name pos:start="415:38" pos:end="415:47"><name pos:start="415:38" pos:end="415:42">scan8</name><index pos:start="415:43" pos:end="415:47">[<expr pos:start="415:44" pos:end="415:46"><literal type="number" pos:start="415:44" pos:end="415:44">4</literal><operator pos:start="415:45" pos:end="415:45">*</operator><name pos:start="415:46" pos:end="415:46">i</name></expr>]</index></name></expr>   ]</index></name><operator pos:start="415:52" pos:end="415:52">=</operator><name pos:start="415:53" pos:end="415:87"><name pos:start="415:53" pos:end="415:54">sl</name><operator pos:start="415:55" pos:end="415:56">-&gt;</operator><name pos:start="415:57" pos:end="415:65">ref_cache</name><index pos:start="415:66" pos:end="415:71">[<expr pos:start="415:67" pos:end="415:70"><name pos:start="415:67" pos:end="415:70">list</name></expr>]</index><index pos:start="415:72" pos:end="415:87">[ <expr pos:start="415:74" pos:end="415:85"><name pos:start="415:74" pos:end="415:83"><name pos:start="415:74" pos:end="415:78">scan8</name><index pos:start="415:79" pos:end="415:83">[<expr pos:start="415:80" pos:end="415:82"><literal type="number" pos:start="415:80" pos:end="415:80">4</literal><operator pos:start="415:81" pos:end="415:81">*</operator><name pos:start="415:82" pos:end="415:82">i</name></expr>]</index></name><operator pos:start="415:84" pos:end="415:84">+</operator><literal type="number" pos:start="415:85" pos:end="415:85">1</literal></expr> ]</index></name><operator pos:start="415:88" pos:end="415:88">=</operator>

                <name pos:start="417:17" pos:end="417:51"><name pos:start="417:17" pos:end="417:18">sl</name><operator pos:start="417:19" pos:end="417:20">-&gt;</operator><name pos:start="417:21" pos:end="417:29">ref_cache</name><index pos:start="417:30" pos:end="417:35">[<expr pos:start="417:31" pos:end="417:34"><name pos:start="417:31" pos:end="417:34">list</name></expr>]</index><index pos:start="417:36" pos:end="417:51">[ <expr pos:start="417:38" pos:end="417:49"><name pos:start="417:38" pos:end="417:47"><name pos:start="417:38" pos:end="417:42">scan8</name><index pos:start="417:43" pos:end="417:47">[<expr pos:start="417:44" pos:end="417:46"><literal type="number" pos:start="417:44" pos:end="417:44">4</literal><operator pos:start="417:45" pos:end="417:45">*</operator><name pos:start="417:46" pos:end="417:46">i</name></expr>]</index></name><operator pos:start="417:48" pos:end="417:48">+</operator><literal type="number" pos:start="417:49" pos:end="417:49">8</literal></expr> ]</index></name><operator pos:start="417:52" pos:end="417:52">=</operator><name pos:start="417:53" pos:end="417:87"><name pos:start="417:53" pos:end="417:54">sl</name><operator pos:start="417:55" pos:end="417:56">-&gt;</operator><name pos:start="417:57" pos:end="417:65">ref_cache</name><index pos:start="417:66" pos:end="417:71">[<expr pos:start="417:67" pos:end="417:70"><name pos:start="417:67" pos:end="417:70">list</name></expr>]</index><index pos:start="417:72" pos:end="417:87">[ <expr pos:start="417:74" pos:end="417:85"><name pos:start="417:74" pos:end="417:83"><name pos:start="417:74" pos:end="417:78">scan8</name><index pos:start="417:79" pos:end="417:83">[<expr pos:start="417:80" pos:end="417:82"><literal type="number" pos:start="417:80" pos:end="417:80">4</literal><operator pos:start="417:81" pos:end="417:81">*</operator><name pos:start="417:82" pos:end="417:82">i</name></expr>]</index></name><operator pos:start="417:84" pos:end="417:84">+</operator><literal type="number" pos:start="417:85" pos:end="417:85">9</literal></expr> ]</index></name><operator pos:start="417:88" pos:end="417:88">=</operator> <name pos:start="417:90" pos:end="417:101"><name pos:start="417:90" pos:end="417:92">ref</name><index pos:start="417:93" pos:end="417:98">[<expr pos:start="417:94" pos:end="417:97"><name pos:start="417:94" pos:end="417:97">list</name></expr>]</index><index pos:start="417:99" pos:end="417:101">[<expr pos:start="417:100" pos:end="417:100"><name pos:start="417:100" pos:end="417:100">i</name></expr>]</index></name></expr>;</expr_stmt>



                <if_stmt pos:start="421:17" pos:end="483:17"><if pos:start="421:17" pos:end="475:17">if<condition pos:start="421:19" pos:end="421:55">(<expr pos:start="421:20" pos:end="421:54"><call pos:start="421:20" pos:end="421:54"><name pos:start="421:20" pos:end="421:25">IS_DIR</name><argument_list pos:start="421:26" pos:end="421:54">(<argument pos:start="421:27" pos:end="421:44"><expr pos:start="421:27" pos:end="421:44"><name pos:start="421:27" pos:end="421:44"><name pos:start="421:27" pos:end="421:28">sl</name><operator pos:start="421:29" pos:end="421:30">-&gt;</operator><name pos:start="421:31" pos:end="421:41">sub_mb_type</name><index pos:start="421:42" pos:end="421:44">[<expr pos:start="421:43" pos:end="421:43"><name pos:start="421:43" pos:end="421:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="421:47" pos:end="421:47"><expr pos:start="421:47" pos:end="421:47"><literal type="number" pos:start="421:47" pos:end="421:47">0</literal></expr></argument>, <argument pos:start="421:50" pos:end="421:53"><expr pos:start="421:50" pos:end="421:53"><name pos:start="421:50" pos:end="421:53">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="421:56" pos:end="475:17">{<block_content pos:start="423:21" pos:end="473:21">

                    <decl_stmt pos:start="423:21" pos:end="423:62"><decl pos:start="423:21" pos:end="423:61"><type pos:start="423:21" pos:end="423:29"><specifier pos:start="423:21" pos:end="423:25">const</specifier> <name pos:start="423:27" pos:end="423:29">int</name></type> <name pos:start="423:31" pos:end="423:41">sub_mb_type</name><init pos:start="423:42" pos:end="423:61">= <expr pos:start="423:44" pos:end="423:61"><name pos:start="423:44" pos:end="423:61"><name pos:start="423:44" pos:end="423:45">sl</name><operator pos:start="423:46" pos:end="423:47">-&gt;</operator><name pos:start="423:48" pos:end="423:58">sub_mb_type</name><index pos:start="423:59" pos:end="423:61">[<expr pos:start="423:60" pos:end="423:60"><name pos:start="423:60" pos:end="423:60">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="425:21" pos:end="425:96"><decl pos:start="425:21" pos:end="425:95"><type pos:start="425:21" pos:end="425:29"><specifier pos:start="425:21" pos:end="425:25">const</specifier> <name pos:start="425:27" pos:end="425:29">int</name></type> <name pos:start="425:31" pos:end="425:41">block_width</name><init pos:start="425:42" pos:end="425:95">= <expr pos:start="425:44" pos:end="425:95"><ternary pos:start="425:44" pos:end="425:95"><condition pos:start="425:44" pos:end="425:89"><expr pos:start="425:44" pos:end="425:87"><operator pos:start="425:44" pos:end="425:44">(</operator><name pos:start="425:45" pos:end="425:55">sub_mb_type</name> <operator pos:start="425:57" pos:end="425:57">&amp;</operator> <operator pos:start="425:59" pos:end="425:59">(</operator><name pos:start="425:60" pos:end="425:72">MB_TYPE_16x16</name><operator pos:start="425:73" pos:end="425:73">|</operator><name pos:start="425:74" pos:end="425:85">MB_TYPE_16x8</name><operator pos:start="425:86" pos:end="425:86">)</operator><operator pos:start="425:87" pos:end="425:87">)</operator></expr> ?</condition><then pos:start="425:91" pos:end="425:91"> <expr pos:start="425:91" pos:end="425:91"><literal type="number" pos:start="425:91" pos:end="425:91">2</literal></expr> </then><else pos:start="425:93" pos:end="425:95">: <expr pos:start="425:95" pos:end="425:95"><literal type="number" pos:start="425:95" pos:end="425:95">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <for pos:start="427:21" pos:end="473:21">for<control pos:start="427:24" pos:end="427:59">(<init pos:start="427:25" pos:end="427:28"><expr pos:start="427:25" pos:end="427:27"><name pos:start="427:25" pos:end="427:25">j</name><operator pos:start="427:26" pos:end="427:26">=</operator><literal type="number" pos:start="427:27" pos:end="427:27">0</literal></expr>;</init> <condition pos:start="427:30" pos:end="427:54"><expr pos:start="427:30" pos:end="427:53"><name pos:start="427:30" pos:end="427:30">j</name><operator pos:start="427:31" pos:end="427:31">&lt;</operator><name pos:start="427:32" pos:end="427:53"><name pos:start="427:32" pos:end="427:50">sub_partition_count</name><index pos:start="427:51" pos:end="427:53">[<expr pos:start="427:52" pos:end="427:52"><name pos:start="427:52" pos:end="427:52">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="427:56" pos:end="427:58"><expr pos:start="427:56" pos:end="427:58"><name pos:start="427:56" pos:end="427:56">j</name><operator pos:start="427:57" pos:end="427:58">++</operator></expr></incr>)</control><block pos:start="427:60" pos:end="473:21">{<block_content pos:start="429:25" pos:end="471:45">

                        <decl_stmt pos:start="429:25" pos:end="429:35"><decl pos:start="429:25" pos:end="429:30"><type pos:start="429:25" pos:end="429:27"><name pos:start="429:25" pos:end="429:27">int</name></type> <name pos:start="429:29" pos:end="429:30">mx</name></decl>, <decl pos:start="429:33" pos:end="429:34"><type ref="prev" pos:start="429:25" pos:end="429:27"/><name pos:start="429:33" pos:end="429:34">my</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="431:25" pos:end="431:61"><decl pos:start="431:25" pos:end="431:60"><type pos:start="431:25" pos:end="431:33"><specifier pos:start="431:25" pos:end="431:29">const</specifier> <name pos:start="431:31" pos:end="431:33">int</name></type> <name pos:start="431:35" pos:end="431:39">index</name><init pos:start="431:40" pos:end="431:60">= <expr pos:start="431:42" pos:end="431:60"><literal type="number" pos:start="431:42" pos:end="431:42">4</literal><operator pos:start="431:43" pos:end="431:43">*</operator><name pos:start="431:44" pos:end="431:44">i</name> <operator pos:start="431:46" pos:end="431:46">+</operator> <name pos:start="431:48" pos:end="431:58">block_width</name><operator pos:start="431:59" pos:end="431:59">*</operator><name pos:start="431:60" pos:end="431:60">j</name></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="433:25" pos:end="433:85"><expr pos:start="433:25" pos:end="433:84"><call pos:start="433:25" pos:end="433:44"><name pos:start="433:25" pos:end="433:31">int16_t</name> <argument_list pos:start="433:33" pos:end="433:44">(<argument pos:start="433:34" pos:end="433:43"><expr pos:start="433:34" pos:end="433:43"><operator pos:start="433:34" pos:end="433:34">*</operator> <name pos:start="433:36" pos:end="433:43">mv_cache</name></expr></argument>)</argument_list></call><index pos:start="433:45" pos:end="433:47">[<expr pos:start="433:46" pos:end="433:46"><literal type="number" pos:start="433:46" pos:end="433:46">2</literal></expr>]</index><operator pos:start="433:48" pos:end="433:48">=</operator> <operator pos:start="433:50" pos:end="433:50">&amp;</operator><name pos:start="433:51" pos:end="433:84"><name pos:start="433:51" pos:end="433:52">sl</name><operator pos:start="433:53" pos:end="433:54">-&gt;</operator><name pos:start="433:55" pos:end="433:62">mv_cache</name><index pos:start="433:63" pos:end="433:68">[<expr pos:start="433:64" pos:end="433:67"><name pos:start="433:64" pos:end="433:67">list</name></expr>]</index><index pos:start="433:69" pos:end="433:84">[ <expr pos:start="433:71" pos:end="433:82"><name pos:start="433:71" pos:end="433:82"><name pos:start="433:71" pos:end="433:75">scan8</name><index pos:start="433:76" pos:end="433:82">[<expr pos:start="433:77" pos:end="433:81"><name pos:start="433:77" pos:end="433:81">index</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="435:25" pos:end="435:116"><expr pos:start="435:25" pos:end="435:115"><call pos:start="435:25" pos:end="435:115"><name pos:start="435:25" pos:end="435:35">pred_motion</name><argument_list pos:start="435:36" pos:end="435:115">(<argument pos:start="435:37" pos:end="435:37"><expr pos:start="435:37" pos:end="435:37"><name pos:start="435:37" pos:end="435:37">h</name></expr></argument>, <argument pos:start="435:40" pos:end="435:41"><expr pos:start="435:40" pos:end="435:41"><name pos:start="435:40" pos:end="435:41">sl</name></expr></argument>, <argument pos:start="435:44" pos:end="435:48"><expr pos:start="435:44" pos:end="435:48"><name pos:start="435:44" pos:end="435:48">index</name></expr></argument>, <argument pos:start="435:51" pos:end="435:61"><expr pos:start="435:51" pos:end="435:61"><name pos:start="435:51" pos:end="435:61">block_width</name></expr></argument>, <argument pos:start="435:64" pos:end="435:67"><expr pos:start="435:64" pos:end="435:67"><name pos:start="435:64" pos:end="435:67">list</name></expr></argument>, <argument pos:start="435:70" pos:end="435:104"><expr pos:start="435:70" pos:end="435:104"><name pos:start="435:70" pos:end="435:104"><name pos:start="435:70" pos:end="435:71">sl</name><operator pos:start="435:72" pos:end="435:73">-&gt;</operator><name pos:start="435:74" pos:end="435:82">ref_cache</name><index pos:start="435:83" pos:end="435:88">[<expr pos:start="435:84" pos:end="435:87"><name pos:start="435:84" pos:end="435:87">list</name></expr>]</index><index pos:start="435:89" pos:end="435:104">[ <expr pos:start="435:91" pos:end="435:102"><name pos:start="435:91" pos:end="435:102"><name pos:start="435:91" pos:end="435:95">scan8</name><index pos:start="435:96" pos:end="435:102">[<expr pos:start="435:97" pos:end="435:101"><name pos:start="435:97" pos:end="435:101">index</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="435:107" pos:end="435:109"><expr pos:start="435:107" pos:end="435:109"><operator pos:start="435:107" pos:end="435:107">&amp;</operator><name pos:start="435:108" pos:end="435:109">mx</name></expr></argument>, <argument pos:start="435:112" pos:end="435:114"><expr pos:start="435:112" pos:end="435:114"><operator pos:start="435:112" pos:end="435:112">&amp;</operator><name pos:start="435:113" pos:end="435:114">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="437:25" pos:end="437:53"><expr pos:start="437:25" pos:end="437:52"><name pos:start="437:25" pos:end="437:26">mx</name> <operator pos:start="437:28" pos:end="437:29">+=</operator> <call pos:start="437:31" pos:end="437:52"><name pos:start="437:31" pos:end="437:43">get_se_golomb</name><argument_list pos:start="437:44" pos:end="437:52">(<argument pos:start="437:45" pos:end="437:51"><expr pos:start="437:45" pos:end="437:51"><operator pos:start="437:45" pos:end="437:45">&amp;</operator><name pos:start="437:46" pos:end="437:51"><name pos:start="437:46" pos:end="437:47">sl</name><operator pos:start="437:48" pos:end="437:49">-&gt;</operator><name pos:start="437:50" pos:end="437:51">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="439:25" pos:end="439:53"><expr pos:start="439:25" pos:end="439:52"><name pos:start="439:25" pos:end="439:26">my</name> <operator pos:start="439:28" pos:end="439:29">+=</operator> <call pos:start="439:31" pos:end="439:52"><name pos:start="439:31" pos:end="439:43">get_se_golomb</name><argument_list pos:start="439:44" pos:end="439:52">(<argument pos:start="439:45" pos:end="439:51"><expr pos:start="439:45" pos:end="439:51"><operator pos:start="439:45" pos:end="439:45">&amp;</operator><name pos:start="439:46" pos:end="439:51"><name pos:start="439:46" pos:end="439:47">sl</name><operator pos:start="439:48" pos:end="439:49">-&gt;</operator><name pos:start="439:50" pos:end="439:51">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="441:25" pos:end="441:70"><expr pos:start="441:25" pos:end="441:69"><call pos:start="441:25" pos:end="441:69"><name pos:start="441:25" pos:end="441:31">ff_tlog</name><argument_list pos:start="441:32" pos:end="441:69">(<argument pos:start="441:33" pos:end="441:40"><expr pos:start="441:33" pos:end="441:40"><name pos:start="441:33" pos:end="441:40"><name pos:start="441:33" pos:end="441:33">h</name><operator pos:start="441:34" pos:end="441:35">-&gt;</operator><name pos:start="441:36" pos:end="441:40">avctx</name></name></expr></argument>, <argument pos:start="441:43" pos:end="441:60"><expr pos:start="441:43" pos:end="441:60"><literal type="string" pos:start="441:43" pos:end="441:60">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="441:63" pos:end="441:64"><expr pos:start="441:63" pos:end="441:64"><name pos:start="441:63" pos:end="441:64">mx</name></expr></argument>, <argument pos:start="441:67" pos:end="441:68"><expr pos:start="441:67" pos:end="441:68"><name pos:start="441:67" pos:end="441:68">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <if_stmt pos:start="445:25" pos:end="467:25"><if pos:start="445:25" pos:end="455:25">if<condition pos:start="445:27" pos:end="445:51">(<expr pos:start="445:28" pos:end="445:50"><call pos:start="445:28" pos:end="445:50"><name pos:start="445:28" pos:end="445:37">IS_SUB_8X8</name><argument_list pos:start="445:38" pos:end="445:50">(<argument pos:start="445:39" pos:end="445:49"><expr pos:start="445:39" pos:end="445:49"><name pos:start="445:39" pos:end="445:49">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="445:52" pos:end="455:25">{<block_content pos:start="447:29" pos:end="453:67">

                            <expr_stmt pos:start="447:29" pos:end="449:67"><expr pos:start="447:29" pos:end="449:66"><name pos:start="447:29" pos:end="447:44"><name pos:start="447:29" pos:end="447:36">mv_cache</name><index pos:start="447:37" pos:end="447:41">[ <expr pos:start="447:39" pos:end="447:39"><literal type="number" pos:start="447:39" pos:end="447:39">1</literal></expr> ]</index><index pos:start="447:42" pos:end="447:44">[<expr pos:start="447:43" pos:end="447:43"><literal type="number" pos:start="447:43" pos:end="447:43">0</literal></expr>]</index></name><operator pos:start="447:45" pos:end="447:45">=</operator>

                            <name pos:start="449:29" pos:end="449:44"><name pos:start="449:29" pos:end="449:36">mv_cache</name><index pos:start="449:37" pos:end="449:41">[ <expr pos:start="449:39" pos:end="449:39"><literal type="number" pos:start="449:39" pos:end="449:39">8</literal></expr> ]</index><index pos:start="449:42" pos:end="449:44">[<expr pos:start="449:43" pos:end="449:43"><literal type="number" pos:start="449:43" pos:end="449:43">0</literal></expr>]</index></name><operator pos:start="449:45" pos:end="449:45">=</operator> <name pos:start="449:47" pos:end="449:62"><name pos:start="449:47" pos:end="449:54">mv_cache</name><index pos:start="449:55" pos:end="449:59">[ <expr pos:start="449:57" pos:end="449:57"><literal type="number" pos:start="449:57" pos:end="449:57">9</literal></expr> ]</index><index pos:start="449:60" pos:end="449:62">[<expr pos:start="449:61" pos:end="449:61"><literal type="number" pos:start="449:61" pos:end="449:61">0</literal></expr>]</index></name><operator pos:start="449:63" pos:end="449:63">=</operator> <name pos:start="449:65" pos:end="449:66">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="451:29" pos:end="453:67"><expr pos:start="451:29" pos:end="453:66"><name pos:start="451:29" pos:end="451:44"><name pos:start="451:29" pos:end="451:36">mv_cache</name><index pos:start="451:37" pos:end="451:41">[ <expr pos:start="451:39" pos:end="451:39"><literal type="number" pos:start="451:39" pos:end="451:39">1</literal></expr> ]</index><index pos:start="451:42" pos:end="451:44">[<expr pos:start="451:43" pos:end="451:43"><literal type="number" pos:start="451:43" pos:end="451:43">1</literal></expr>]</index></name><operator pos:start="451:45" pos:end="451:45">=</operator>

                            <name pos:start="453:29" pos:end="453:44"><name pos:start="453:29" pos:end="453:36">mv_cache</name><index pos:start="453:37" pos:end="453:41">[ <expr pos:start="453:39" pos:end="453:39"><literal type="number" pos:start="453:39" pos:end="453:39">8</literal></expr> ]</index><index pos:start="453:42" pos:end="453:44">[<expr pos:start="453:43" pos:end="453:43"><literal type="number" pos:start="453:43" pos:end="453:43">1</literal></expr>]</index></name><operator pos:start="453:45" pos:end="453:45">=</operator> <name pos:start="453:47" pos:end="453:62"><name pos:start="453:47" pos:end="453:54">mv_cache</name><index pos:start="453:55" pos:end="453:59">[ <expr pos:start="453:57" pos:end="453:57"><literal type="number" pos:start="453:57" pos:end="453:57">9</literal></expr> ]</index><index pos:start="453:60" pos:end="453:62">[<expr pos:start="453:61" pos:end="453:61"><literal type="number" pos:start="453:61" pos:end="453:61">1</literal></expr>]</index></name><operator pos:start="453:63" pos:end="453:63">=</operator> <name pos:start="453:65" pos:end="453:66">my</name></expr>;</expr_stmt>

                        </block_content>}</block></if><if type="elseif" pos:start="455:26" pos:end="461:25">else if<condition pos:start="455:33" pos:end="455:57">(<expr pos:start="455:34" pos:end="455:56"><call pos:start="455:34" pos:end="455:56"><name pos:start="455:34" pos:end="455:43">IS_SUB_8X4</name><argument_list pos:start="455:44" pos:end="455:56">(<argument pos:start="455:45" pos:end="455:55"><expr pos:start="455:45" pos:end="455:55"><name pos:start="455:45" pos:end="455:55">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="455:58" pos:end="461:25">{<block_content pos:start="457:29" pos:end="459:49">

                            <expr_stmt pos:start="457:29" pos:end="457:49"><expr pos:start="457:29" pos:end="457:48"><name pos:start="457:29" pos:end="457:44"><name pos:start="457:29" pos:end="457:36">mv_cache</name><index pos:start="457:37" pos:end="457:41">[ <expr pos:start="457:39" pos:end="457:39"><literal type="number" pos:start="457:39" pos:end="457:39">1</literal></expr> ]</index><index pos:start="457:42" pos:end="457:44">[<expr pos:start="457:43" pos:end="457:43"><literal type="number" pos:start="457:43" pos:end="457:43">0</literal></expr>]</index></name><operator pos:start="457:45" pos:end="457:45">=</operator> <name pos:start="457:47" pos:end="457:48">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="459:29" pos:end="459:49"><expr pos:start="459:29" pos:end="459:48"><name pos:start="459:29" pos:end="459:44"><name pos:start="459:29" pos:end="459:36">mv_cache</name><index pos:start="459:37" pos:end="459:41">[ <expr pos:start="459:39" pos:end="459:39"><literal type="number" pos:start="459:39" pos:end="459:39">1</literal></expr> ]</index><index pos:start="459:42" pos:end="459:44">[<expr pos:start="459:43" pos:end="459:43"><literal type="number" pos:start="459:43" pos:end="459:43">1</literal></expr>]</index></name><operator pos:start="459:45" pos:end="459:45">=</operator> <name pos:start="459:47" pos:end="459:48">my</name></expr>;</expr_stmt>

                        </block_content>}</block></if><if type="elseif" pos:start="461:26" pos:end="467:25">else if<condition pos:start="461:33" pos:end="461:57">(<expr pos:start="461:34" pos:end="461:56"><call pos:start="461:34" pos:end="461:56"><name pos:start="461:34" pos:end="461:43">IS_SUB_4X8</name><argument_list pos:start="461:44" pos:end="461:56">(<argument pos:start="461:45" pos:end="461:55"><expr pos:start="461:45" pos:end="461:55"><name pos:start="461:45" pos:end="461:55">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="461:58" pos:end="467:25">{<block_content pos:start="463:29" pos:end="465:49">

                            <expr_stmt pos:start="463:29" pos:end="463:49"><expr pos:start="463:29" pos:end="463:48"><name pos:start="463:29" pos:end="463:44"><name pos:start="463:29" pos:end="463:36">mv_cache</name><index pos:start="463:37" pos:end="463:41">[ <expr pos:start="463:39" pos:end="463:39"><literal type="number" pos:start="463:39" pos:end="463:39">8</literal></expr> ]</index><index pos:start="463:42" pos:end="463:44">[<expr pos:start="463:43" pos:end="463:43"><literal type="number" pos:start="463:43" pos:end="463:43">0</literal></expr>]</index></name><operator pos:start="463:45" pos:end="463:45">=</operator> <name pos:start="463:47" pos:end="463:48">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="465:29" pos:end="465:49"><expr pos:start="465:29" pos:end="465:48"><name pos:start="465:29" pos:end="465:44"><name pos:start="465:29" pos:end="465:36">mv_cache</name><index pos:start="465:37" pos:end="465:41">[ <expr pos:start="465:39" pos:end="465:39"><literal type="number" pos:start="465:39" pos:end="465:39">8</literal></expr> ]</index><index pos:start="465:42" pos:end="465:44">[<expr pos:start="465:43" pos:end="465:43"><literal type="number" pos:start="465:43" pos:end="465:43">1</literal></expr>]</index></name><operator pos:start="465:45" pos:end="465:45">=</operator> <name pos:start="465:47" pos:end="465:48">my</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="469:25" pos:end="469:45"><expr pos:start="469:25" pos:end="469:44"><name pos:start="469:25" pos:end="469:40"><name pos:start="469:25" pos:end="469:32">mv_cache</name><index pos:start="469:33" pos:end="469:37">[ <expr pos:start="469:35" pos:end="469:35"><literal type="number" pos:start="469:35" pos:end="469:35">0</literal></expr> ]</index><index pos:start="469:38" pos:end="469:40">[<expr pos:start="469:39" pos:end="469:39"><literal type="number" pos:start="469:39" pos:end="469:39">0</literal></expr>]</index></name><operator pos:start="469:41" pos:end="469:41">=</operator> <name pos:start="469:43" pos:end="469:44">mx</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="471:25" pos:end="471:45"><expr pos:start="471:25" pos:end="471:44"><name pos:start="471:25" pos:end="471:40"><name pos:start="471:25" pos:end="471:32">mv_cache</name><index pos:start="471:33" pos:end="471:37">[ <expr pos:start="471:35" pos:end="471:35"><literal type="number" pos:start="471:35" pos:end="471:35">0</literal></expr> ]</index><index pos:start="471:38" pos:end="471:40">[<expr pos:start="471:39" pos:end="471:39"><literal type="number" pos:start="471:39" pos:end="471:39">1</literal></expr>]</index></name><operator pos:start="471:41" pos:end="471:41">=</operator> <name pos:start="471:43" pos:end="471:44">my</name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if><else pos:start="475:18" pos:end="483:17">else<block pos:start="475:22" pos:end="483:17">{<block_content pos:start="477:21" pos:end="481:35">

                    <decl_stmt pos:start="477:21" pos:end="477:82"><decl pos:start="477:21" pos:end="477:81"><type pos:start="477:21" pos:end="477:30"><name pos:start="477:21" pos:end="477:28">uint32_t</name> <modifier pos:start="477:30" pos:end="477:30">*</modifier></type><name pos:start="477:31" pos:end="477:31">p</name><init pos:start="477:32" pos:end="477:81">= <expr pos:start="477:34" pos:end="477:81"><operator pos:start="477:34" pos:end="477:34">(</operator><name pos:start="477:35" pos:end="477:42">uint32_t</name> <operator pos:start="477:44" pos:end="477:44">*</operator><operator pos:start="477:45" pos:end="477:45">)</operator><operator pos:start="477:46" pos:end="477:46">&amp;</operator><name pos:start="477:47" pos:end="477:81"><name pos:start="477:47" pos:end="477:48">sl</name><operator pos:start="477:49" pos:end="477:50">-&gt;</operator><name pos:start="477:51" pos:end="477:58">mv_cache</name><index pos:start="477:59" pos:end="477:64">[<expr pos:start="477:60" pos:end="477:63"><name pos:start="477:60" pos:end="477:63">list</name></expr>]</index><index pos:start="477:65" pos:end="477:78">[ <expr pos:start="477:67" pos:end="477:76"><name pos:start="477:67" pos:end="477:76"><name pos:start="477:67" pos:end="477:71">scan8</name><index pos:start="477:72" pos:end="477:76">[<expr pos:start="477:73" pos:end="477:75"><literal type="number" pos:start="477:73" pos:end="477:73">4</literal><operator pos:start="477:74" pos:end="477:74">*</operator><name pos:start="477:75" pos:end="477:75">i</name></expr>]</index></name></expr> ]</index><index pos:start="477:79" pos:end="477:81">[<expr pos:start="477:80" pos:end="477:80"><literal type="number" pos:start="477:80" pos:end="477:80">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="479:21" pos:end="481:35"><expr pos:start="479:21" pos:end="481:34"><name pos:start="479:21" pos:end="479:24"><name pos:start="479:21" pos:end="479:21">p</name><index pos:start="479:22" pos:end="479:24">[<expr pos:start="479:23" pos:end="479:23"><literal type="number" pos:start="479:23" pos:end="479:23">0</literal></expr>]</index></name> <operator pos:start="479:26" pos:end="479:26">=</operator> <name pos:start="479:28" pos:end="479:31"><name pos:start="479:28" pos:end="479:28">p</name><index pos:start="479:29" pos:end="479:31">[<expr pos:start="479:30" pos:end="479:30"><literal type="number" pos:start="479:30" pos:end="479:30">1</literal></expr>]</index></name><operator pos:start="479:32" pos:end="479:32">=</operator>

                    <name pos:start="481:21" pos:end="481:24"><name pos:start="481:21" pos:end="481:21">p</name><index pos:start="481:22" pos:end="481:24">[<expr pos:start="481:23" pos:end="481:23"><literal type="number" pos:start="481:23" pos:end="481:23">8</literal></expr>]</index></name> <operator pos:start="481:26" pos:end="481:26">=</operator> <name pos:start="481:28" pos:end="481:31"><name pos:start="481:28" pos:end="481:28">p</name><index pos:start="481:29" pos:end="481:31">[<expr pos:start="481:30" pos:end="481:30"><literal type="number" pos:start="481:30" pos:end="481:30">9</literal></expr>]</index></name><operator pos:start="481:32" pos:end="481:32">=</operator> <literal type="number" pos:start="481:34" pos:end="481:34">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if><if type="elseif" pos:start="489:6" pos:end="495:5">else if<condition pos:start="489:13" pos:end="489:32">(<expr pos:start="489:14" pos:end="489:31"><call pos:start="489:14" pos:end="489:31"><name pos:start="489:14" pos:end="489:22">IS_DIRECT</name><argument_list pos:start="489:23" pos:end="489:31">(<argument pos:start="489:24" pos:end="489:30"><expr pos:start="489:24" pos:end="489:30"><name pos:start="489:24" pos:end="489:30">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="489:33" pos:end="495:5">{<block_content pos:start="491:9" pos:end="493:63">

        <expr_stmt pos:start="491:9" pos:end="491:52"><expr pos:start="491:9" pos:end="491:51"><call pos:start="491:9" pos:end="491:51"><name pos:start="491:9" pos:end="491:34">ff_h264_pred_direct_motion</name><argument_list pos:start="491:35" pos:end="491:51">(<argument pos:start="491:36" pos:end="491:36"><expr pos:start="491:36" pos:end="491:36"><name pos:start="491:36" pos:end="491:36">h</name></expr></argument>, <argument pos:start="491:39" pos:end="491:40"><expr pos:start="491:39" pos:end="491:40"><name pos:start="491:39" pos:end="491:40">sl</name></expr></argument>, <argument pos:start="491:43" pos:end="491:50"><expr pos:start="491:43" pos:end="491:50"><operator pos:start="491:43" pos:end="491:43">&amp;</operator><name pos:start="491:44" pos:end="491:50">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="493:9" pos:end="493:63"><expr pos:start="493:9" pos:end="493:62"><name pos:start="493:9" pos:end="493:22">dct8x8_allowed</name> <operator pos:start="493:24" pos:end="493:25">&amp;=</operator> <name pos:start="493:27" pos:end="493:62"><name pos:start="493:27" pos:end="493:27">h</name><operator pos:start="493:28" pos:end="493:29">-&gt;</operator><name pos:start="493:30" pos:end="493:31">ps</name><operator pos:start="493:32" pos:end="493:32">.</operator><name pos:start="493:33" pos:end="493:35">sps</name><operator pos:start="493:36" pos:end="493:37">-&gt;</operator><name pos:start="493:38" pos:end="493:62">direct_8x8_inference_flag</name></name></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="495:6" pos:end="713:5">else<block pos:start="495:10" pos:end="713:5">{<block_content pos:start="497:9" pos:end="711:9">

        <decl_stmt pos:start="497:9" pos:end="497:28"><decl pos:start="497:9" pos:end="497:16"><type pos:start="497:9" pos:end="497:11"><name pos:start="497:9" pos:end="497:11">int</name></type> <name pos:start="497:13" pos:end="497:16">list</name></decl>, <decl pos:start="497:19" pos:end="497:20"><type ref="prev" pos:start="497:9" pos:end="497:11"/><name pos:start="497:19" pos:end="497:20">mx</name></decl>, <decl pos:start="497:23" pos:end="497:24"><type ref="prev" pos:start="497:9" pos:end="497:11"/><name pos:start="497:23" pos:end="497:24">my</name></decl>, <decl pos:start="497:27" pos:end="497:27"><type ref="prev" pos:start="497:9" pos:end="497:11"/><name pos:start="497:27" pos:end="497:27">i</name></decl>;</decl_stmt>

         <comment type="line" pos:start="499:10" pos:end="499:71">//FIXME we should set ref_idx_l? to 0 if we use that later ...</comment>

        <if_stmt pos:start="501:9" pos:end="711:9"><if pos:start="501:9" pos:end="559:9">if<condition pos:start="501:11" pos:end="501:29">(<expr pos:start="501:12" pos:end="501:28"><call pos:start="501:12" pos:end="501:28"><name pos:start="501:12" pos:end="501:19">IS_16X16</name><argument_list pos:start="501:20" pos:end="501:28">(<argument pos:start="501:21" pos:end="501:27"><expr pos:start="501:21" pos:end="501:27"><name pos:start="501:21" pos:end="501:27">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="501:30" pos:end="559:9">{<block_content pos:start="503:13" pos:end="557:13">

            <for pos:start="503:13" pos:end="537:13">for <control pos:start="503:17" pos:end="503:57">(<init pos:start="503:18" pos:end="503:26"><expr pos:start="503:18" pos:end="503:25"><name pos:start="503:18" pos:end="503:21">list</name> <operator pos:start="503:23" pos:end="503:23">=</operator> <literal type="number" pos:start="503:25" pos:end="503:25">0</literal></expr>;</init> <condition pos:start="503:28" pos:end="503:49"><expr pos:start="503:28" pos:end="503:48"><name pos:start="503:28" pos:end="503:31">list</name> <operator pos:start="503:33" pos:end="503:33">&lt;</operator> <name pos:start="503:35" pos:end="503:48"><name pos:start="503:35" pos:end="503:36">sl</name><operator pos:start="503:37" pos:end="503:38">-&gt;</operator><name pos:start="503:39" pos:end="503:48">list_count</name></name></expr>;</condition> <incr pos:start="503:51" pos:end="503:56"><expr pos:start="503:51" pos:end="503:56"><name pos:start="503:51" pos:end="503:54">list</name><operator pos:start="503:55" pos:end="503:56">++</operator></expr></incr>)</control> <block pos:start="503:59" pos:end="537:13">{<block_content pos:start="505:21" pos:end="535:21">

                    <decl_stmt pos:start="505:21" pos:end="505:37"><decl pos:start="505:21" pos:end="505:36"><type pos:start="505:21" pos:end="505:32"><name pos:start="505:21" pos:end="505:28">unsigned</name> <name pos:start="505:30" pos:end="505:32">int</name></type> <name pos:start="505:34" pos:end="505:36">val</name></decl>;</decl_stmt>

                    <if_stmt pos:start="507:21" pos:end="535:21"><if pos:start="507:21" pos:end="535:21">if<condition pos:start="507:23" pos:end="507:48">(<expr pos:start="507:24" pos:end="507:47"><call pos:start="507:24" pos:end="507:47"><name pos:start="507:24" pos:end="507:29">IS_DIR</name><argument_list pos:start="507:30" pos:end="507:47">(<argument pos:start="507:31" pos:end="507:37"><expr pos:start="507:31" pos:end="507:37"><name pos:start="507:31" pos:end="507:37">mb_type</name></expr></argument>, <argument pos:start="507:40" pos:end="507:40"><expr pos:start="507:40" pos:end="507:40"><literal type="number" pos:start="507:40" pos:end="507:40">0</literal></expr></argument>, <argument pos:start="507:43" pos:end="507:46"><expr pos:start="507:43" pos:end="507:46"><name pos:start="507:43" pos:end="507:46">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="507:49" pos:end="535:21">{<block_content pos:start="509:25" pos:end="533:86">

                        <decl_stmt pos:start="509:25" pos:end="509:74"><decl pos:start="509:25" pos:end="509:73"><type pos:start="509:25" pos:end="509:32"><name pos:start="509:25" pos:end="509:32">unsigned</name></type> <name pos:start="509:34" pos:end="509:35">rc</name> <init pos:start="509:37" pos:end="509:73">= <expr pos:start="509:39" pos:end="509:73"><name pos:start="509:39" pos:end="509:57"><name pos:start="509:39" pos:end="509:40">sl</name><operator pos:start="509:41" pos:end="509:42">-&gt;</operator><name pos:start="509:43" pos:end="509:51">ref_count</name><index pos:start="509:52" pos:end="509:57">[<expr pos:start="509:53" pos:end="509:56"><name pos:start="509:53" pos:end="509:56">list</name></expr>]</index></name> <operator pos:start="509:59" pos:end="509:60">&lt;&lt;</operator> <call pos:start="509:62" pos:end="509:73"><name pos:start="509:62" pos:end="509:69">MB_MBAFF</name><argument_list pos:start="509:70" pos:end="509:73">(<argument pos:start="509:71" pos:end="509:72"><expr pos:start="509:71" pos:end="509:72"><name pos:start="509:71" pos:end="509:72">sl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="511:25" pos:end="531:25"><if pos:start="511:25" pos:end="515:25">if <condition pos:start="511:28" pos:end="511:36">(<expr pos:start="511:29" pos:end="511:35"><name pos:start="511:29" pos:end="511:30">rc</name> <operator pos:start="511:32" pos:end="511:33">==</operator> <literal type="number" pos:start="511:35" pos:end="511:35">1</literal></expr>)</condition> <block pos:start="511:38" pos:end="515:25">{<block_content pos:start="513:29" pos:end="513:35">

                            <expr_stmt pos:start="513:29" pos:end="513:35"><expr pos:start="513:29" pos:end="513:34"><name pos:start="513:29" pos:end="513:31">val</name><operator pos:start="513:32" pos:end="513:32">=</operator> <literal type="number" pos:start="513:34" pos:end="513:34">0</literal></expr>;</expr_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="515:27" pos:end="519:25">else if <condition pos:start="515:35" pos:end="515:43">(<expr pos:start="515:36" pos:end="515:42"><name pos:start="515:36" pos:end="515:37">rc</name> <operator pos:start="515:39" pos:end="515:40">==</operator> <literal type="number" pos:start="515:42" pos:end="515:42">2</literal></expr>)</condition> <block pos:start="515:45" pos:end="519:25">{<block_content pos:start="517:29" pos:end="517:54">

                            <expr_stmt pos:start="517:29" pos:end="517:54"><expr pos:start="517:29" pos:end="517:53"><name pos:start="517:29" pos:end="517:31">val</name><operator pos:start="517:32" pos:end="517:32">=</operator> <call pos:start="517:34" pos:end="517:51"><name pos:start="517:34" pos:end="517:42">get_bits1</name><argument_list pos:start="517:43" pos:end="517:51">(<argument pos:start="517:44" pos:end="517:50"><expr pos:start="517:44" pos:end="517:50"><operator pos:start="517:44" pos:end="517:44">&amp;</operator><name pos:start="517:45" pos:end="517:50"><name pos:start="517:45" pos:end="517:46">sl</name><operator pos:start="517:47" pos:end="517:48">-&gt;</operator><name pos:start="517:49" pos:end="517:50">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="517:52" pos:end="517:52">^</operator><literal type="number" pos:start="517:53" pos:end="517:53">1</literal></expr>;</expr_stmt>

                        </block_content>}</block></if><else pos:start="519:26" pos:end="531:25">else<block pos:start="519:30" pos:end="531:25">{<block_content pos:start="521:29" pos:end="529:29">

                            <expr_stmt pos:start="521:29" pos:end="521:59"><expr pos:start="521:29" pos:end="521:58"><name pos:start="521:29" pos:end="521:31">val</name><operator pos:start="521:32" pos:end="521:32">=</operator> <call pos:start="521:34" pos:end="521:58"><name pos:start="521:34" pos:end="521:49">get_ue_golomb_31</name><argument_list pos:start="521:50" pos:end="521:58">(<argument pos:start="521:51" pos:end="521:57"><expr pos:start="521:51" pos:end="521:57"><operator pos:start="521:51" pos:end="521:51">&amp;</operator><name pos:start="521:52" pos:end="521:57"><name pos:start="521:52" pos:end="521:53">sl</name><operator pos:start="521:54" pos:end="521:55">-&gt;</operator><name pos:start="521:56" pos:end="521:57">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="523:29" pos:end="529:29"><if pos:start="523:29" pos:end="529:29">if <condition pos:start="523:32" pos:end="523:42">(<expr pos:start="523:33" pos:end="523:41"><name pos:start="523:33" pos:end="523:35">val</name> <operator pos:start="523:37" pos:end="523:38">&gt;=</operator> <name pos:start="523:40" pos:end="523:41">rc</name></expr>)</condition> <block pos:start="523:44" pos:end="529:29">{<block_content pos:start="525:33" pos:end="527:42">

                                <expr_stmt pos:start="525:33" pos:end="525:89"><expr pos:start="525:33" pos:end="525:88"><call pos:start="525:33" pos:end="525:88"><name pos:start="525:33" pos:end="525:38">av_log</name><argument_list pos:start="525:39" pos:end="525:88">(<argument pos:start="525:40" pos:end="525:47"><expr pos:start="525:40" pos:end="525:47"><name pos:start="525:40" pos:end="525:47"><name pos:start="525:40" pos:end="525:40">h</name><operator pos:start="525:41" pos:end="525:42">-&gt;</operator><name pos:start="525:43" pos:end="525:47">avctx</name></name></expr></argument>, <argument pos:start="525:50" pos:end="525:61"><expr pos:start="525:50" pos:end="525:61"><name pos:start="525:50" pos:end="525:61">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="525:64" pos:end="525:82"><expr pos:start="525:64" pos:end="525:82"><literal type="string" pos:start="525:64" pos:end="525:82">"ref %u overflow\n"</literal></expr></argument>, <argument pos:start="525:85" pos:end="525:87"><expr pos:start="525:85" pos:end="525:87"><name pos:start="525:85" pos:end="525:87">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <return pos:start="527:33" pos:end="527:42">return <expr pos:start="527:40" pos:end="527:41"><operator pos:start="527:40" pos:end="527:40">-</operator><literal type="number" pos:start="527:41" pos:end="527:41">1</literal></expr>;</return>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="533:21" pos:end="533:86"><expr pos:start="533:21" pos:end="533:85"><call pos:start="533:21" pos:end="533:85"><name pos:start="533:21" pos:end="533:34">fill_rectangle</name><argument_list pos:start="533:35" pos:end="533:85">(<argument pos:start="533:36" pos:end="533:67"><expr pos:start="533:36" pos:end="533:67"><operator pos:start="533:36" pos:end="533:36">&amp;</operator><name pos:start="533:37" pos:end="533:67"><name pos:start="533:37" pos:end="533:38">sl</name><operator pos:start="533:39" pos:end="533:40">-&gt;</operator><name pos:start="533:41" pos:end="533:49">ref_cache</name><index pos:start="533:50" pos:end="533:55">[<expr pos:start="533:51" pos:end="533:54"><name pos:start="533:51" pos:end="533:54">list</name></expr>]</index><index pos:start="533:56" pos:end="533:67">[ <expr pos:start="533:58" pos:end="533:65"><name pos:start="533:58" pos:end="533:65"><name pos:start="533:58" pos:end="533:62">scan8</name><index pos:start="533:63" pos:end="533:65">[<expr pos:start="533:64" pos:end="533:64"><literal type="number" pos:start="533:64" pos:end="533:64">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="533:70" pos:end="533:70"><expr pos:start="533:70" pos:end="533:70"><literal type="number" pos:start="533:70" pos:end="533:70">4</literal></expr></argument>, <argument pos:start="533:73" pos:end="533:73"><expr pos:start="533:73" pos:end="533:73"><literal type="number" pos:start="533:73" pos:end="533:73">4</literal></expr></argument>, <argument pos:start="533:76" pos:end="533:76"><expr pos:start="533:76" pos:end="533:76"><literal type="number" pos:start="533:76" pos:end="533:76">8</literal></expr></argument>, <argument pos:start="533:79" pos:end="533:81"><expr pos:start="533:79" pos:end="533:81"><name pos:start="533:79" pos:end="533:81">val</name></expr></argument>, <argument pos:start="533:84" pos:end="533:84"><expr pos:start="533:84" pos:end="533:84"><literal type="number" pos:start="533:84" pos:end="533:84">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <for pos:start="539:13" pos:end="557:13">for <control pos:start="539:17" pos:end="539:57">(<init pos:start="539:18" pos:end="539:26"><expr pos:start="539:18" pos:end="539:25"><name pos:start="539:18" pos:end="539:21">list</name> <operator pos:start="539:23" pos:end="539:23">=</operator> <literal type="number" pos:start="539:25" pos:end="539:25">0</literal></expr>;</init> <condition pos:start="539:28" pos:end="539:49"><expr pos:start="539:28" pos:end="539:48"><name pos:start="539:28" pos:end="539:31">list</name> <operator pos:start="539:33" pos:end="539:33">&lt;</operator> <name pos:start="539:35" pos:end="539:48"><name pos:start="539:35" pos:end="539:36">sl</name><operator pos:start="539:37" pos:end="539:38">-&gt;</operator><name pos:start="539:39" pos:end="539:48">list_count</name></name></expr>;</condition> <incr pos:start="539:51" pos:end="539:56"><expr pos:start="539:51" pos:end="539:56"><name pos:start="539:51" pos:end="539:54">list</name><operator pos:start="539:55" pos:end="539:56">++</operator></expr></incr>)</control> <block pos:start="539:59" pos:end="557:13">{<block_content pos:start="541:17" pos:end="555:17">

                <if_stmt pos:start="541:17" pos:end="555:17"><if pos:start="541:17" pos:end="555:17">if<condition pos:start="541:19" pos:end="541:44">(<expr pos:start="541:20" pos:end="541:43"><call pos:start="541:20" pos:end="541:43"><name pos:start="541:20" pos:end="541:25">IS_DIR</name><argument_list pos:start="541:26" pos:end="541:43">(<argument pos:start="541:27" pos:end="541:33"><expr pos:start="541:27" pos:end="541:33"><name pos:start="541:27" pos:end="541:33">mb_type</name></expr></argument>, <argument pos:start="541:36" pos:end="541:36"><expr pos:start="541:36" pos:end="541:36"><literal type="number" pos:start="541:36" pos:end="541:36">0</literal></expr></argument>, <argument pos:start="541:39" pos:end="541:42"><expr pos:start="541:39" pos:end="541:42"><name pos:start="541:39" pos:end="541:42">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="541:45" pos:end="555:17">{<block_content pos:start="543:21" pos:end="553:98">

                    <expr_stmt pos:start="543:21" pos:end="543:94"><expr pos:start="543:21" pos:end="543:93"><call pos:start="543:21" pos:end="543:93"><name pos:start="543:21" pos:end="543:31">pred_motion</name><argument_list pos:start="543:32" pos:end="543:93">(<argument pos:start="543:33" pos:end="543:33"><expr pos:start="543:33" pos:end="543:33"><name pos:start="543:33" pos:end="543:33">h</name></expr></argument>, <argument pos:start="543:36" pos:end="543:37"><expr pos:start="543:36" pos:end="543:37"><name pos:start="543:36" pos:end="543:37">sl</name></expr></argument>, <argument pos:start="543:40" pos:end="543:40"><expr pos:start="543:40" pos:end="543:40"><literal type="number" pos:start="543:40" pos:end="543:40">0</literal></expr></argument>, <argument pos:start="543:43" pos:end="543:43"><expr pos:start="543:43" pos:end="543:43"><literal type="number" pos:start="543:43" pos:end="543:43">4</literal></expr></argument>, <argument pos:start="543:46" pos:end="543:49"><expr pos:start="543:46" pos:end="543:49"><name pos:start="543:46" pos:end="543:49">list</name></expr></argument>, <argument pos:start="543:52" pos:end="543:82"><expr pos:start="543:52" pos:end="543:82"><name pos:start="543:52" pos:end="543:82"><name pos:start="543:52" pos:end="543:53">sl</name><operator pos:start="543:54" pos:end="543:55">-&gt;</operator><name pos:start="543:56" pos:end="543:64">ref_cache</name><index pos:start="543:65" pos:end="543:70">[<expr pos:start="543:66" pos:end="543:69"><name pos:start="543:66" pos:end="543:69">list</name></expr>]</index><index pos:start="543:71" pos:end="543:82">[ <expr pos:start="543:73" pos:end="543:80"><name pos:start="543:73" pos:end="543:80"><name pos:start="543:73" pos:end="543:77">scan8</name><index pos:start="543:78" pos:end="543:80">[<expr pos:start="543:79" pos:end="543:79"><literal type="number" pos:start="543:79" pos:end="543:79">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="543:85" pos:end="543:87"><expr pos:start="543:85" pos:end="543:87"><operator pos:start="543:85" pos:end="543:85">&amp;</operator><name pos:start="543:86" pos:end="543:87">mx</name></expr></argument>, <argument pos:start="543:90" pos:end="543:92"><expr pos:start="543:90" pos:end="543:92"><operator pos:start="543:90" pos:end="543:90">&amp;</operator><name pos:start="543:91" pos:end="543:92">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="545:21" pos:end="545:49"><expr pos:start="545:21" pos:end="545:48"><name pos:start="545:21" pos:end="545:22">mx</name> <operator pos:start="545:24" pos:end="545:25">+=</operator> <call pos:start="545:27" pos:end="545:48"><name pos:start="545:27" pos:end="545:39">get_se_golomb</name><argument_list pos:start="545:40" pos:end="545:48">(<argument pos:start="545:41" pos:end="545:47"><expr pos:start="545:41" pos:end="545:47"><operator pos:start="545:41" pos:end="545:41">&amp;</operator><name pos:start="545:42" pos:end="545:47"><name pos:start="545:42" pos:end="545:43">sl</name><operator pos:start="545:44" pos:end="545:45">-&gt;</operator><name pos:start="545:46" pos:end="545:47">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="547:21" pos:end="547:49"><expr pos:start="547:21" pos:end="547:48"><name pos:start="547:21" pos:end="547:22">my</name> <operator pos:start="547:24" pos:end="547:25">+=</operator> <call pos:start="547:27" pos:end="547:48"><name pos:start="547:27" pos:end="547:39">get_se_golomb</name><argument_list pos:start="547:40" pos:end="547:48">(<argument pos:start="547:41" pos:end="547:47"><expr pos:start="547:41" pos:end="547:47"><operator pos:start="547:41" pos:end="547:41">&amp;</operator><name pos:start="547:42" pos:end="547:47"><name pos:start="547:42" pos:end="547:43">sl</name><operator pos:start="547:44" pos:end="547:45">-&gt;</operator><name pos:start="547:46" pos:end="547:47">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="549:21" pos:end="549:66"><expr pos:start="549:21" pos:end="549:65"><call pos:start="549:21" pos:end="549:65"><name pos:start="549:21" pos:end="549:27">ff_tlog</name><argument_list pos:start="549:28" pos:end="549:65">(<argument pos:start="549:29" pos:end="549:36"><expr pos:start="549:29" pos:end="549:36"><name pos:start="549:29" pos:end="549:36"><name pos:start="549:29" pos:end="549:29">h</name><operator pos:start="549:30" pos:end="549:31">-&gt;</operator><name pos:start="549:32" pos:end="549:36">avctx</name></name></expr></argument>, <argument pos:start="549:39" pos:end="549:56"><expr pos:start="549:39" pos:end="549:56"><literal type="string" pos:start="549:39" pos:end="549:56">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="549:59" pos:end="549:60"><expr pos:start="549:59" pos:end="549:60"><name pos:start="549:59" pos:end="549:60">mx</name></expr></argument>, <argument pos:start="549:63" pos:end="549:64"><expr pos:start="549:63" pos:end="549:64"><name pos:start="549:63" pos:end="549:64">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="553:21" pos:end="553:98"><expr pos:start="553:21" pos:end="553:97"><call pos:start="553:21" pos:end="553:97"><name pos:start="553:21" pos:end="553:34">fill_rectangle</name><argument_list pos:start="553:35" pos:end="553:97">(<argument pos:start="553:36" pos:end="553:65"><expr pos:start="553:36" pos:end="553:65"><name pos:start="553:36" pos:end="553:65"><name pos:start="553:36" pos:end="553:37">sl</name><operator pos:start="553:38" pos:end="553:39">-&gt;</operator><name pos:start="553:40" pos:end="553:47">mv_cache</name><index pos:start="553:48" pos:end="553:53">[<expr pos:start="553:49" pos:end="553:52"><name pos:start="553:49" pos:end="553:52">list</name></expr>]</index><index pos:start="553:54" pos:end="553:65">[ <expr pos:start="553:56" pos:end="553:63"><name pos:start="553:56" pos:end="553:63"><name pos:start="553:56" pos:end="553:60">scan8</name><index pos:start="553:61" pos:end="553:63">[<expr pos:start="553:62" pos:end="553:62"><literal type="number" pos:start="553:62" pos:end="553:62">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="553:68" pos:end="553:68"><expr pos:start="553:68" pos:end="553:68"><literal type="number" pos:start="553:68" pos:end="553:68">4</literal></expr></argument>, <argument pos:start="553:71" pos:end="553:71"><expr pos:start="553:71" pos:end="553:71"><literal type="number" pos:start="553:71" pos:end="553:71">4</literal></expr></argument>, <argument pos:start="553:74" pos:end="553:74"><expr pos:start="553:74" pos:end="553:74"><literal type="number" pos:start="553:74" pos:end="553:74">8</literal></expr></argument>, <argument pos:start="553:77" pos:end="553:93"><expr pos:start="553:77" pos:end="553:93"><call pos:start="553:77" pos:end="553:93"><name pos:start="553:77" pos:end="553:86">pack16to32</name><argument_list pos:start="553:87" pos:end="553:93">(<argument pos:start="553:88" pos:end="553:89"><expr pos:start="553:88" pos:end="553:89"><name pos:start="553:88" pos:end="553:89">mx</name></expr></argument>,<argument pos:start="553:91" pos:end="553:92"><expr pos:start="553:91" pos:end="553:92"><name pos:start="553:91" pos:end="553:92">my</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="553:96" pos:end="553:96"><expr pos:start="553:96" pos:end="553:96"><literal type="number" pos:start="553:96" pos:end="553:96">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if>

        <if type="elseif" pos:start="561:9" pos:end="635:9">else if<condition pos:start="561:16" pos:end="561:33">(<expr pos:start="561:17" pos:end="561:32"><call pos:start="561:17" pos:end="561:32"><name pos:start="561:17" pos:end="561:23">IS_16X8</name><argument_list pos:start="561:24" pos:end="561:32">(<argument pos:start="561:25" pos:end="561:31"><expr pos:start="561:25" pos:end="561:31"><name pos:start="561:25" pos:end="561:31">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="561:34" pos:end="635:9">{<block_content pos:start="563:13" pos:end="633:13">

            <for pos:start="563:13" pos:end="603:13">for <control pos:start="563:17" pos:end="563:57">(<init pos:start="563:18" pos:end="563:26"><expr pos:start="563:18" pos:end="563:25"><name pos:start="563:18" pos:end="563:21">list</name> <operator pos:start="563:23" pos:end="563:23">=</operator> <literal type="number" pos:start="563:25" pos:end="563:25">0</literal></expr>;</init> <condition pos:start="563:28" pos:end="563:49"><expr pos:start="563:28" pos:end="563:48"><name pos:start="563:28" pos:end="563:31">list</name> <operator pos:start="563:33" pos:end="563:33">&lt;</operator> <name pos:start="563:35" pos:end="563:48"><name pos:start="563:35" pos:end="563:36">sl</name><operator pos:start="563:37" pos:end="563:38">-&gt;</operator><name pos:start="563:39" pos:end="563:48">list_count</name></name></expr>;</condition> <incr pos:start="563:51" pos:end="563:56"><expr pos:start="563:51" pos:end="563:56"><name pos:start="563:51" pos:end="563:54">list</name><operator pos:start="563:55" pos:end="563:56">++</operator></expr></incr>)</control> <block pos:start="563:59" pos:end="603:13">{<block_content pos:start="565:21" pos:end="601:21">

                    <for pos:start="565:21" pos:end="601:21">for<control pos:start="565:24" pos:end="565:38">(<init pos:start="565:25" pos:end="565:28"><expr pos:start="565:25" pos:end="565:27"><name pos:start="565:25" pos:end="565:25">i</name><operator pos:start="565:26" pos:end="565:26">=</operator><literal type="number" pos:start="565:27" pos:end="565:27">0</literal></expr>;</init> <condition pos:start="565:30" pos:end="565:33"><expr pos:start="565:30" pos:end="565:32"><name pos:start="565:30" pos:end="565:30">i</name><operator pos:start="565:31" pos:end="565:31">&lt;</operator><literal type="number" pos:start="565:32" pos:end="565:32">2</literal></expr>;</condition> <incr pos:start="565:35" pos:end="565:37"><expr pos:start="565:35" pos:end="565:37"><name pos:start="565:35" pos:end="565:35">i</name><operator pos:start="565:36" pos:end="565:37">++</operator></expr></incr>)</control><block pos:start="565:39" pos:end="601:21">{<block_content pos:start="567:25" pos:end="599:97">

                        <decl_stmt pos:start="567:25" pos:end="567:41"><decl pos:start="567:25" pos:end="567:40"><type pos:start="567:25" pos:end="567:36"><name pos:start="567:25" pos:end="567:32">unsigned</name> <name pos:start="567:34" pos:end="567:36">int</name></type> <name pos:start="567:38" pos:end="567:40">val</name></decl>;</decl_stmt>

                        <if_stmt pos:start="569:25" pos:end="597:52"><if pos:start="569:25" pos:end="595:25">if<condition pos:start="569:27" pos:end="569:52">(<expr pos:start="569:28" pos:end="569:51"><call pos:start="569:28" pos:end="569:51"><name pos:start="569:28" pos:end="569:33">IS_DIR</name><argument_list pos:start="569:34" pos:end="569:51">(<argument pos:start="569:35" pos:end="569:41"><expr pos:start="569:35" pos:end="569:41"><name pos:start="569:35" pos:end="569:41">mb_type</name></expr></argument>, <argument pos:start="569:44" pos:end="569:44"><expr pos:start="569:44" pos:end="569:44"><name pos:start="569:44" pos:end="569:44">i</name></expr></argument>, <argument pos:start="569:47" pos:end="569:50"><expr pos:start="569:47" pos:end="569:50"><name pos:start="569:47" pos:end="569:50">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="569:53" pos:end="595:25">{<block_content pos:start="571:29" pos:end="593:29">

                            <decl_stmt pos:start="571:29" pos:end="571:78"><decl pos:start="571:29" pos:end="571:77"><type pos:start="571:29" pos:end="571:36"><name pos:start="571:29" pos:end="571:36">unsigned</name></type> <name pos:start="571:38" pos:end="571:39">rc</name> <init pos:start="571:41" pos:end="571:77">= <expr pos:start="571:43" pos:end="571:77"><name pos:start="571:43" pos:end="571:61"><name pos:start="571:43" pos:end="571:44">sl</name><operator pos:start="571:45" pos:end="571:46">-&gt;</operator><name pos:start="571:47" pos:end="571:55">ref_count</name><index pos:start="571:56" pos:end="571:61">[<expr pos:start="571:57" pos:end="571:60"><name pos:start="571:57" pos:end="571:60">list</name></expr>]</index></name> <operator pos:start="571:63" pos:end="571:64">&lt;&lt;</operator> <call pos:start="571:66" pos:end="571:77"><name pos:start="571:66" pos:end="571:73">MB_MBAFF</name><argument_list pos:start="571:74" pos:end="571:77">(<argument pos:start="571:75" pos:end="571:76"><expr pos:start="571:75" pos:end="571:76"><name pos:start="571:75" pos:end="571:76">sl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <if_stmt pos:start="573:29" pos:end="593:29"><if pos:start="573:29" pos:end="577:29">if <condition pos:start="573:32" pos:end="573:40">(<expr pos:start="573:33" pos:end="573:39"><name pos:start="573:33" pos:end="573:34">rc</name> <operator pos:start="573:36" pos:end="573:37">==</operator> <literal type="number" pos:start="573:39" pos:end="573:39">1</literal></expr>)</condition> <block pos:start="573:42" pos:end="577:29">{<block_content pos:start="575:33" pos:end="575:39">

                                <expr_stmt pos:start="575:33" pos:end="575:39"><expr pos:start="575:33" pos:end="575:38"><name pos:start="575:33" pos:end="575:35">val</name><operator pos:start="575:36" pos:end="575:36">=</operator> <literal type="number" pos:start="575:38" pos:end="575:38">0</literal></expr>;</expr_stmt>

                            </block_content>}</block></if> <if type="elseif" pos:start="577:31" pos:end="581:29">else if <condition pos:start="577:39" pos:end="577:47">(<expr pos:start="577:40" pos:end="577:46"><name pos:start="577:40" pos:end="577:41">rc</name> <operator pos:start="577:43" pos:end="577:44">==</operator> <literal type="number" pos:start="577:46" pos:end="577:46">2</literal></expr>)</condition> <block pos:start="577:49" pos:end="581:29">{<block_content pos:start="579:33" pos:end="579:58">

                                <expr_stmt pos:start="579:33" pos:end="579:58"><expr pos:start="579:33" pos:end="579:57"><name pos:start="579:33" pos:end="579:35">val</name><operator pos:start="579:36" pos:end="579:36">=</operator> <call pos:start="579:38" pos:end="579:55"><name pos:start="579:38" pos:end="579:46">get_bits1</name><argument_list pos:start="579:47" pos:end="579:55">(<argument pos:start="579:48" pos:end="579:54"><expr pos:start="579:48" pos:end="579:54"><operator pos:start="579:48" pos:end="579:48">&amp;</operator><name pos:start="579:49" pos:end="579:54"><name pos:start="579:49" pos:end="579:50">sl</name><operator pos:start="579:51" pos:end="579:52">-&gt;</operator><name pos:start="579:53" pos:end="579:54">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="579:56" pos:end="579:56">^</operator><literal type="number" pos:start="579:57" pos:end="579:57">1</literal></expr>;</expr_stmt>

                            </block_content>}</block></if><else pos:start="581:30" pos:end="593:29">else<block pos:start="581:34" pos:end="593:29">{<block_content pos:start="583:33" pos:end="591:33">

                                <expr_stmt pos:start="583:33" pos:end="583:63"><expr pos:start="583:33" pos:end="583:62"><name pos:start="583:33" pos:end="583:35">val</name><operator pos:start="583:36" pos:end="583:36">=</operator> <call pos:start="583:38" pos:end="583:62"><name pos:start="583:38" pos:end="583:53">get_ue_golomb_31</name><argument_list pos:start="583:54" pos:end="583:62">(<argument pos:start="583:55" pos:end="583:61"><expr pos:start="583:55" pos:end="583:61"><operator pos:start="583:55" pos:end="583:55">&amp;</operator><name pos:start="583:56" pos:end="583:61"><name pos:start="583:56" pos:end="583:57">sl</name><operator pos:start="583:58" pos:end="583:59">-&gt;</operator><name pos:start="583:60" pos:end="583:61">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <if_stmt pos:start="585:33" pos:end="591:33"><if pos:start="585:33" pos:end="591:33">if <condition pos:start="585:36" pos:end="585:46">(<expr pos:start="585:37" pos:end="585:45"><name pos:start="585:37" pos:end="585:39">val</name> <operator pos:start="585:41" pos:end="585:42">&gt;=</operator> <name pos:start="585:44" pos:end="585:45">rc</name></expr>)</condition> <block pos:start="585:48" pos:end="591:33">{<block_content pos:start="587:37" pos:end="589:46">

                                    <expr_stmt pos:start="587:37" pos:end="587:93"><expr pos:start="587:37" pos:end="587:92"><call pos:start="587:37" pos:end="587:92"><name pos:start="587:37" pos:end="587:42">av_log</name><argument_list pos:start="587:43" pos:end="587:92">(<argument pos:start="587:44" pos:end="587:51"><expr pos:start="587:44" pos:end="587:51"><name pos:start="587:44" pos:end="587:51"><name pos:start="587:44" pos:end="587:44">h</name><operator pos:start="587:45" pos:end="587:46">-&gt;</operator><name pos:start="587:47" pos:end="587:51">avctx</name></name></expr></argument>, <argument pos:start="587:54" pos:end="587:65"><expr pos:start="587:54" pos:end="587:65"><name pos:start="587:54" pos:end="587:65">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="587:68" pos:end="587:86"><expr pos:start="587:68" pos:end="587:86"><literal type="string" pos:start="587:68" pos:end="587:86">"ref %u overflow\n"</literal></expr></argument>, <argument pos:start="587:89" pos:end="587:91"><expr pos:start="587:89" pos:end="587:91"><name pos:start="587:89" pos:end="587:91">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <return pos:start="589:37" pos:end="589:46">return <expr pos:start="589:44" pos:end="589:45"><operator pos:start="589:44" pos:end="589:44">-</operator><literal type="number" pos:start="589:45" pos:end="589:45">1</literal></expr>;</return>

                                </block_content>}</block></if></if_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if><else pos:start="595:26" pos:end="597:52">else<block type="pseudo" pos:start="597:29" pos:end="597:52"><block_content pos:start="597:29" pos:end="597:52">

                            <expr_stmt pos:start="597:29" pos:end="597:52"><expr pos:start="597:29" pos:end="597:51"><name pos:start="597:29" pos:end="597:31">val</name><operator pos:start="597:32" pos:end="597:32">=</operator> <name pos:start="597:34" pos:end="597:46">LIST_NOT_USED</name><operator pos:start="597:47" pos:end="597:47">&amp;</operator><literal type="number" pos:start="597:48" pos:end="597:51">0xFF</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="599:25" pos:end="599:97"><expr pos:start="599:25" pos:end="599:96"><call pos:start="599:25" pos:end="599:96"><name pos:start="599:25" pos:end="599:38">fill_rectangle</name><argument_list pos:start="599:39" pos:end="599:96">(<argument pos:start="599:40" pos:end="599:78"><expr pos:start="599:40" pos:end="599:78"><operator pos:start="599:40" pos:end="599:40">&amp;</operator><name pos:start="599:41" pos:end="599:78"><name pos:start="599:41" pos:end="599:42">sl</name><operator pos:start="599:43" pos:end="599:44">-&gt;</operator><name pos:start="599:45" pos:end="599:53">ref_cache</name><index pos:start="599:54" pos:end="599:59">[<expr pos:start="599:55" pos:end="599:58"><name pos:start="599:55" pos:end="599:58">list</name></expr>]</index><index pos:start="599:60" pos:end="599:78">[ <expr pos:start="599:62" pos:end="599:76"><name pos:start="599:62" pos:end="599:69"><name pos:start="599:62" pos:end="599:66">scan8</name><index pos:start="599:67" pos:end="599:69">[<expr pos:start="599:68" pos:end="599:68"><literal type="number" pos:start="599:68" pos:end="599:68">0</literal></expr>]</index></name> <operator pos:start="599:71" pos:end="599:71">+</operator> <literal type="number" pos:start="599:73" pos:end="599:74">16</literal><operator pos:start="599:75" pos:end="599:75">*</operator><name pos:start="599:76" pos:end="599:76">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="599:81" pos:end="599:81"><expr pos:start="599:81" pos:end="599:81"><literal type="number" pos:start="599:81" pos:end="599:81">4</literal></expr></argument>, <argument pos:start="599:84" pos:end="599:84"><expr pos:start="599:84" pos:end="599:84"><literal type="number" pos:start="599:84" pos:end="599:84">2</literal></expr></argument>, <argument pos:start="599:87" pos:end="599:87"><expr pos:start="599:87" pos:end="599:87"><literal type="number" pos:start="599:87" pos:end="599:87">8</literal></expr></argument>, <argument pos:start="599:90" pos:end="599:92"><expr pos:start="599:90" pos:end="599:92"><name pos:start="599:90" pos:end="599:92">val</name></expr></argument>, <argument pos:start="599:95" pos:end="599:95"><expr pos:start="599:95" pos:end="599:95"><literal type="number" pos:start="599:95" pos:end="599:95">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

            </block_content>}</block></for>

            <for pos:start="605:13" pos:end="633:13">for <control pos:start="605:17" pos:end="605:57">(<init pos:start="605:18" pos:end="605:26"><expr pos:start="605:18" pos:end="605:25"><name pos:start="605:18" pos:end="605:21">list</name> <operator pos:start="605:23" pos:end="605:23">=</operator> <literal type="number" pos:start="605:25" pos:end="605:25">0</literal></expr>;</init> <condition pos:start="605:28" pos:end="605:49"><expr pos:start="605:28" pos:end="605:48"><name pos:start="605:28" pos:end="605:31">list</name> <operator pos:start="605:33" pos:end="605:33">&lt;</operator> <name pos:start="605:35" pos:end="605:48"><name pos:start="605:35" pos:end="605:36">sl</name><operator pos:start="605:37" pos:end="605:38">-&gt;</operator><name pos:start="605:39" pos:end="605:48">list_count</name></name></expr>;</condition> <incr pos:start="605:51" pos:end="605:56"><expr pos:start="605:51" pos:end="605:56"><name pos:start="605:51" pos:end="605:54">list</name><operator pos:start="605:55" pos:end="605:56">++</operator></expr></incr>)</control> <block pos:start="605:59" pos:end="633:13">{<block_content pos:start="607:17" pos:end="631:17">

                <for pos:start="607:17" pos:end="631:17">for<control pos:start="607:20" pos:end="607:34">(<init pos:start="607:21" pos:end="607:24"><expr pos:start="607:21" pos:end="607:23"><name pos:start="607:21" pos:end="607:21">i</name><operator pos:start="607:22" pos:end="607:22">=</operator><literal type="number" pos:start="607:23" pos:end="607:23">0</literal></expr>;</init> <condition pos:start="607:26" pos:end="607:29"><expr pos:start="607:26" pos:end="607:28"><name pos:start="607:26" pos:end="607:26">i</name><operator pos:start="607:27" pos:end="607:27">&lt;</operator><literal type="number" pos:start="607:28" pos:end="607:28">2</literal></expr>;</condition> <incr pos:start="607:31" pos:end="607:33"><expr pos:start="607:31" pos:end="607:33"><name pos:start="607:31" pos:end="607:31">i</name><operator pos:start="607:32" pos:end="607:33">++</operator></expr></incr>)</control><block pos:start="607:35" pos:end="631:17">{<block_content pos:start="609:21" pos:end="629:91">

                    <decl_stmt pos:start="609:21" pos:end="609:37"><decl pos:start="609:21" pos:end="609:36"><type pos:start="609:21" pos:end="609:32"><name pos:start="609:21" pos:end="609:28">unsigned</name> <name pos:start="609:30" pos:end="609:32">int</name></type> <name pos:start="609:34" pos:end="609:36">val</name></decl>;</decl_stmt>

                    <if_stmt pos:start="611:21" pos:end="627:30"><if pos:start="611:21" pos:end="625:21">if<condition pos:start="611:23" pos:end="611:48">(<expr pos:start="611:24" pos:end="611:47"><call pos:start="611:24" pos:end="611:47"><name pos:start="611:24" pos:end="611:29">IS_DIR</name><argument_list pos:start="611:30" pos:end="611:47">(<argument pos:start="611:31" pos:end="611:37"><expr pos:start="611:31" pos:end="611:37"><name pos:start="611:31" pos:end="611:37">mb_type</name></expr></argument>, <argument pos:start="611:40" pos:end="611:40"><expr pos:start="611:40" pos:end="611:40"><name pos:start="611:40" pos:end="611:40">i</name></expr></argument>, <argument pos:start="611:43" pos:end="611:46"><expr pos:start="611:43" pos:end="611:46"><name pos:start="611:43" pos:end="611:46">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="611:49" pos:end="625:21">{<block_content pos:start="613:25" pos:end="623:47">

                        <expr_stmt pos:start="613:25" pos:end="613:107"><expr pos:start="613:25" pos:end="613:106"><call pos:start="613:25" pos:end="613:106"><name pos:start="613:25" pos:end="613:40">pred_16x8_motion</name><argument_list pos:start="613:41" pos:end="613:106">(<argument pos:start="613:42" pos:end="613:42"><expr pos:start="613:42" pos:end="613:42"><name pos:start="613:42" pos:end="613:42">h</name></expr></argument>, <argument pos:start="613:45" pos:end="613:46"><expr pos:start="613:45" pos:end="613:46"><name pos:start="613:45" pos:end="613:46">sl</name></expr></argument>, <argument pos:start="613:49" pos:end="613:51"><expr pos:start="613:49" pos:end="613:51"><literal type="number" pos:start="613:49" pos:end="613:49">8</literal><operator pos:start="613:50" pos:end="613:50">*</operator><name pos:start="613:51" pos:end="613:51">i</name></expr></argument>, <argument pos:start="613:54" pos:end="613:57"><expr pos:start="613:54" pos:end="613:57"><name pos:start="613:54" pos:end="613:57">list</name></expr></argument>, <argument pos:start="613:60" pos:end="613:95"><expr pos:start="613:60" pos:end="613:95"><name pos:start="613:60" pos:end="613:95"><name pos:start="613:60" pos:end="613:61">sl</name><operator pos:start="613:62" pos:end="613:63">-&gt;</operator><name pos:start="613:64" pos:end="613:72">ref_cache</name><index pos:start="613:73" pos:end="613:78">[<expr pos:start="613:74" pos:end="613:77"><name pos:start="613:74" pos:end="613:77">list</name></expr>]</index><index pos:start="613:79" pos:end="613:95">[<expr pos:start="613:80" pos:end="613:94"><name pos:start="613:80" pos:end="613:87"><name pos:start="613:80" pos:end="613:84">scan8</name><index pos:start="613:85" pos:end="613:87">[<expr pos:start="613:86" pos:end="613:86"><literal type="number" pos:start="613:86" pos:end="613:86">0</literal></expr>]</index></name> <operator pos:start="613:89" pos:end="613:89">+</operator> <literal type="number" pos:start="613:91" pos:end="613:92">16</literal><operator pos:start="613:93" pos:end="613:93">*</operator><name pos:start="613:94" pos:end="613:94">i</name></expr>]</index></name></expr></argument>, <argument pos:start="613:98" pos:end="613:100"><expr pos:start="613:98" pos:end="613:100"><operator pos:start="613:98" pos:end="613:98">&amp;</operator><name pos:start="613:99" pos:end="613:100">mx</name></expr></argument>, <argument pos:start="613:103" pos:end="613:105"><expr pos:start="613:103" pos:end="613:105"><operator pos:start="613:103" pos:end="613:103">&amp;</operator><name pos:start="613:104" pos:end="613:105">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="615:25" pos:end="615:53"><expr pos:start="615:25" pos:end="615:52"><name pos:start="615:25" pos:end="615:26">mx</name> <operator pos:start="615:28" pos:end="615:29">+=</operator> <call pos:start="615:31" pos:end="615:52"><name pos:start="615:31" pos:end="615:43">get_se_golomb</name><argument_list pos:start="615:44" pos:end="615:52">(<argument pos:start="615:45" pos:end="615:51"><expr pos:start="615:45" pos:end="615:51"><operator pos:start="615:45" pos:end="615:45">&amp;</operator><name pos:start="615:46" pos:end="615:51"><name pos:start="615:46" pos:end="615:47">sl</name><operator pos:start="615:48" pos:end="615:49">-&gt;</operator><name pos:start="615:50" pos:end="615:51">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="617:25" pos:end="617:53"><expr pos:start="617:25" pos:end="617:52"><name pos:start="617:25" pos:end="617:26">my</name> <operator pos:start="617:28" pos:end="617:29">+=</operator> <call pos:start="617:31" pos:end="617:52"><name pos:start="617:31" pos:end="617:43">get_se_golomb</name><argument_list pos:start="617:44" pos:end="617:52">(<argument pos:start="617:45" pos:end="617:51"><expr pos:start="617:45" pos:end="617:51"><operator pos:start="617:45" pos:end="617:45">&amp;</operator><name pos:start="617:46" pos:end="617:51"><name pos:start="617:46" pos:end="617:47">sl</name><operator pos:start="617:48" pos:end="617:49">-&gt;</operator><name pos:start="617:50" pos:end="617:51">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="619:25" pos:end="619:70"><expr pos:start="619:25" pos:end="619:69"><call pos:start="619:25" pos:end="619:69"><name pos:start="619:25" pos:end="619:31">ff_tlog</name><argument_list pos:start="619:32" pos:end="619:69">(<argument pos:start="619:33" pos:end="619:40"><expr pos:start="619:33" pos:end="619:40"><name pos:start="619:33" pos:end="619:40"><name pos:start="619:33" pos:end="619:33">h</name><operator pos:start="619:34" pos:end="619:35">-&gt;</operator><name pos:start="619:36" pos:end="619:40">avctx</name></name></expr></argument>, <argument pos:start="619:43" pos:end="619:60"><expr pos:start="619:43" pos:end="619:60"><literal type="string" pos:start="619:43" pos:end="619:60">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="619:63" pos:end="619:64"><expr pos:start="619:63" pos:end="619:64"><name pos:start="619:63" pos:end="619:64">mx</name></expr></argument>, <argument pos:start="619:67" pos:end="619:68"><expr pos:start="619:67" pos:end="619:68"><name pos:start="619:67" pos:end="619:68">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="623:25" pos:end="623:47"><expr pos:start="623:25" pos:end="623:46"><name pos:start="623:25" pos:end="623:27">val</name><operator pos:start="623:28" pos:end="623:28">=</operator> <call pos:start="623:30" pos:end="623:46"><name pos:start="623:30" pos:end="623:39">pack16to32</name><argument_list pos:start="623:40" pos:end="623:46">(<argument pos:start="623:41" pos:end="623:42"><expr pos:start="623:41" pos:end="623:42"><name pos:start="623:41" pos:end="623:42">mx</name></expr></argument>,<argument pos:start="623:44" pos:end="623:45"><expr pos:start="623:44" pos:end="623:45"><name pos:start="623:44" pos:end="623:45">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="625:22" pos:end="627:30">else<block type="pseudo" pos:start="627:25" pos:end="627:30"><block_content pos:start="627:25" pos:end="627:30">

                        <expr_stmt pos:start="627:25" pos:end="627:30"><expr pos:start="627:25" pos:end="627:29"><name pos:start="627:25" pos:end="627:27">val</name><operator pos:start="627:28" pos:end="627:28">=</operator><literal type="number" pos:start="627:29" pos:end="627:29">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="629:21" pos:end="629:91"><expr pos:start="629:21" pos:end="629:90"><call pos:start="629:21" pos:end="629:90"><name pos:start="629:21" pos:end="629:34">fill_rectangle</name><argument_list pos:start="629:35" pos:end="629:90">(<argument pos:start="629:36" pos:end="629:72"><expr pos:start="629:36" pos:end="629:72"><name pos:start="629:36" pos:end="629:72"><name pos:start="629:36" pos:end="629:37">sl</name><operator pos:start="629:38" pos:end="629:39">-&gt;</operator><name pos:start="629:40" pos:end="629:47">mv_cache</name><index pos:start="629:48" pos:end="629:53">[<expr pos:start="629:49" pos:end="629:52"><name pos:start="629:49" pos:end="629:52">list</name></expr>]</index><index pos:start="629:54" pos:end="629:72">[ <expr pos:start="629:56" pos:end="629:70"><name pos:start="629:56" pos:end="629:63"><name pos:start="629:56" pos:end="629:60">scan8</name><index pos:start="629:61" pos:end="629:63">[<expr pos:start="629:62" pos:end="629:62"><literal type="number" pos:start="629:62" pos:end="629:62">0</literal></expr>]</index></name> <operator pos:start="629:65" pos:end="629:65">+</operator> <literal type="number" pos:start="629:67" pos:end="629:68">16</literal><operator pos:start="629:69" pos:end="629:69">*</operator><name pos:start="629:70" pos:end="629:70">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="629:75" pos:end="629:75"><expr pos:start="629:75" pos:end="629:75"><literal type="number" pos:start="629:75" pos:end="629:75">4</literal></expr></argument>, <argument pos:start="629:78" pos:end="629:78"><expr pos:start="629:78" pos:end="629:78"><literal type="number" pos:start="629:78" pos:end="629:78">2</literal></expr></argument>, <argument pos:start="629:81" pos:end="629:81"><expr pos:start="629:81" pos:end="629:81"><literal type="number" pos:start="629:81" pos:end="629:81">8</literal></expr></argument>, <argument pos:start="629:84" pos:end="629:86"><expr pos:start="629:84" pos:end="629:86"><name pos:start="629:84" pos:end="629:86">val</name></expr></argument>, <argument pos:start="629:89" pos:end="629:89"><expr pos:start="629:89" pos:end="629:89"><literal type="number" pos:start="629:89" pos:end="629:89">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></if><else pos:start="635:10" pos:end="711:9">else<block pos:start="635:14" pos:end="711:9">{<block_content pos:start="637:13" pos:end="709:13">

            <expr_stmt pos:start="637:13" pos:end="637:41"><expr pos:start="637:13" pos:end="637:40"><call pos:start="637:13" pos:end="637:40"><name pos:start="637:13" pos:end="637:22">av_assert2</name><argument_list pos:start="637:23" pos:end="637:40">(<argument pos:start="637:24" pos:end="637:39"><expr pos:start="637:24" pos:end="637:39"><call pos:start="637:24" pos:end="637:39"><name pos:start="637:24" pos:end="637:30">IS_8X16</name><argument_list pos:start="637:31" pos:end="637:39">(<argument pos:start="637:32" pos:end="637:38"><expr pos:start="637:32" pos:end="637:38"><name pos:start="637:32" pos:end="637:38">mb_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="639:13" pos:end="679:13">for <control pos:start="639:17" pos:end="639:57">(<init pos:start="639:18" pos:end="639:26"><expr pos:start="639:18" pos:end="639:25"><name pos:start="639:18" pos:end="639:21">list</name> <operator pos:start="639:23" pos:end="639:23">=</operator> <literal type="number" pos:start="639:25" pos:end="639:25">0</literal></expr>;</init> <condition pos:start="639:28" pos:end="639:49"><expr pos:start="639:28" pos:end="639:48"><name pos:start="639:28" pos:end="639:31">list</name> <operator pos:start="639:33" pos:end="639:33">&lt;</operator> <name pos:start="639:35" pos:end="639:48"><name pos:start="639:35" pos:end="639:36">sl</name><operator pos:start="639:37" pos:end="639:38">-&gt;</operator><name pos:start="639:39" pos:end="639:48">list_count</name></name></expr>;</condition> <incr pos:start="639:51" pos:end="639:56"><expr pos:start="639:51" pos:end="639:56"><name pos:start="639:51" pos:end="639:54">list</name><operator pos:start="639:55" pos:end="639:56">++</operator></expr></incr>)</control> <block pos:start="639:59" pos:end="679:13">{<block_content pos:start="641:21" pos:end="677:21">

                    <for pos:start="641:21" pos:end="677:21">for<control pos:start="641:24" pos:end="641:38">(<init pos:start="641:25" pos:end="641:28"><expr pos:start="641:25" pos:end="641:27"><name pos:start="641:25" pos:end="641:25">i</name><operator pos:start="641:26" pos:end="641:26">=</operator><literal type="number" pos:start="641:27" pos:end="641:27">0</literal></expr>;</init> <condition pos:start="641:30" pos:end="641:33"><expr pos:start="641:30" pos:end="641:32"><name pos:start="641:30" pos:end="641:30">i</name><operator pos:start="641:31" pos:end="641:31">&lt;</operator><literal type="number" pos:start="641:32" pos:end="641:32">2</literal></expr>;</condition> <incr pos:start="641:35" pos:end="641:37"><expr pos:start="641:35" pos:end="641:37"><name pos:start="641:35" pos:end="641:35">i</name><operator pos:start="641:36" pos:end="641:37">++</operator></expr></incr>)</control><block pos:start="641:39" pos:end="677:21">{<block_content pos:start="643:25" pos:end="675:96">

                        <decl_stmt pos:start="643:25" pos:end="643:41"><decl pos:start="643:25" pos:end="643:40"><type pos:start="643:25" pos:end="643:36"><name pos:start="643:25" pos:end="643:32">unsigned</name> <name pos:start="643:34" pos:end="643:36">int</name></type> <name pos:start="643:38" pos:end="643:40">val</name></decl>;</decl_stmt>

                        <if_stmt pos:start="645:25" pos:end="673:52"><if pos:start="645:25" pos:end="671:25">if<condition pos:start="645:27" pos:end="645:52">(<expr pos:start="645:28" pos:end="645:51"><call pos:start="645:28" pos:end="645:51"><name pos:start="645:28" pos:end="645:33">IS_DIR</name><argument_list pos:start="645:34" pos:end="645:51">(<argument pos:start="645:35" pos:end="645:41"><expr pos:start="645:35" pos:end="645:41"><name pos:start="645:35" pos:end="645:41">mb_type</name></expr></argument>, <argument pos:start="645:44" pos:end="645:44"><expr pos:start="645:44" pos:end="645:44"><name pos:start="645:44" pos:end="645:44">i</name></expr></argument>, <argument pos:start="645:47" pos:end="645:50"><expr pos:start="645:47" pos:end="645:50"><name pos:start="645:47" pos:end="645:50">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="645:53" pos:end="671:25">{<block_content pos:start="647:29" pos:end="669:29"> <comment type="line" pos:start="645:55" pos:end="645:70">//FIXME optimize</comment>

                            <decl_stmt pos:start="647:29" pos:end="647:78"><decl pos:start="647:29" pos:end="647:77"><type pos:start="647:29" pos:end="647:36"><name pos:start="647:29" pos:end="647:36">unsigned</name></type> <name pos:start="647:38" pos:end="647:39">rc</name> <init pos:start="647:41" pos:end="647:77">= <expr pos:start="647:43" pos:end="647:77"><name pos:start="647:43" pos:end="647:61"><name pos:start="647:43" pos:end="647:44">sl</name><operator pos:start="647:45" pos:end="647:46">-&gt;</operator><name pos:start="647:47" pos:end="647:55">ref_count</name><index pos:start="647:56" pos:end="647:61">[<expr pos:start="647:57" pos:end="647:60"><name pos:start="647:57" pos:end="647:60">list</name></expr>]</index></name> <operator pos:start="647:63" pos:end="647:64">&lt;&lt;</operator> <call pos:start="647:66" pos:end="647:77"><name pos:start="647:66" pos:end="647:73">MB_MBAFF</name><argument_list pos:start="647:74" pos:end="647:77">(<argument pos:start="647:75" pos:end="647:76"><expr pos:start="647:75" pos:end="647:76"><name pos:start="647:75" pos:end="647:76">sl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <if_stmt pos:start="649:29" pos:end="669:29"><if pos:start="649:29" pos:end="653:29">if <condition pos:start="649:32" pos:end="649:40">(<expr pos:start="649:33" pos:end="649:39"><name pos:start="649:33" pos:end="649:34">rc</name> <operator pos:start="649:36" pos:end="649:37">==</operator> <literal type="number" pos:start="649:39" pos:end="649:39">1</literal></expr>)</condition> <block pos:start="649:42" pos:end="653:29">{<block_content pos:start="651:33" pos:end="651:39">

                                <expr_stmt pos:start="651:33" pos:end="651:39"><expr pos:start="651:33" pos:end="651:38"><name pos:start="651:33" pos:end="651:35">val</name><operator pos:start="651:36" pos:end="651:36">=</operator> <literal type="number" pos:start="651:38" pos:end="651:38">0</literal></expr>;</expr_stmt>

                            </block_content>}</block></if> <if type="elseif" pos:start="653:31" pos:end="657:29">else if <condition pos:start="653:39" pos:end="653:47">(<expr pos:start="653:40" pos:end="653:46"><name pos:start="653:40" pos:end="653:41">rc</name> <operator pos:start="653:43" pos:end="653:44">==</operator> <literal type="number" pos:start="653:46" pos:end="653:46">2</literal></expr>)</condition> <block pos:start="653:49" pos:end="657:29">{<block_content pos:start="655:33" pos:end="655:58">

                                <expr_stmt pos:start="655:33" pos:end="655:58"><expr pos:start="655:33" pos:end="655:57"><name pos:start="655:33" pos:end="655:35">val</name><operator pos:start="655:36" pos:end="655:36">=</operator> <call pos:start="655:38" pos:end="655:55"><name pos:start="655:38" pos:end="655:46">get_bits1</name><argument_list pos:start="655:47" pos:end="655:55">(<argument pos:start="655:48" pos:end="655:54"><expr pos:start="655:48" pos:end="655:54"><operator pos:start="655:48" pos:end="655:48">&amp;</operator><name pos:start="655:49" pos:end="655:54"><name pos:start="655:49" pos:end="655:50">sl</name><operator pos:start="655:51" pos:end="655:52">-&gt;</operator><name pos:start="655:53" pos:end="655:54">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="655:56" pos:end="655:56">^</operator><literal type="number" pos:start="655:57" pos:end="655:57">1</literal></expr>;</expr_stmt>

                            </block_content>}</block></if><else pos:start="657:30" pos:end="669:29">else<block pos:start="657:34" pos:end="669:29">{<block_content pos:start="659:33" pos:end="667:33">

                                <expr_stmt pos:start="659:33" pos:end="659:63"><expr pos:start="659:33" pos:end="659:62"><name pos:start="659:33" pos:end="659:35">val</name><operator pos:start="659:36" pos:end="659:36">=</operator> <call pos:start="659:38" pos:end="659:62"><name pos:start="659:38" pos:end="659:53">get_ue_golomb_31</name><argument_list pos:start="659:54" pos:end="659:62">(<argument pos:start="659:55" pos:end="659:61"><expr pos:start="659:55" pos:end="659:61"><operator pos:start="659:55" pos:end="659:55">&amp;</operator><name pos:start="659:56" pos:end="659:61"><name pos:start="659:56" pos:end="659:57">sl</name><operator pos:start="659:58" pos:end="659:59">-&gt;</operator><name pos:start="659:60" pos:end="659:61">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <if_stmt pos:start="661:33" pos:end="667:33"><if pos:start="661:33" pos:end="667:33">if <condition pos:start="661:36" pos:end="661:46">(<expr pos:start="661:37" pos:end="661:45"><name pos:start="661:37" pos:end="661:39">val</name> <operator pos:start="661:41" pos:end="661:42">&gt;=</operator> <name pos:start="661:44" pos:end="661:45">rc</name></expr>)</condition> <block pos:start="661:48" pos:end="667:33">{<block_content pos:start="663:37" pos:end="665:46">

                                    <expr_stmt pos:start="663:37" pos:end="663:93"><expr pos:start="663:37" pos:end="663:92"><call pos:start="663:37" pos:end="663:92"><name pos:start="663:37" pos:end="663:42">av_log</name><argument_list pos:start="663:43" pos:end="663:92">(<argument pos:start="663:44" pos:end="663:51"><expr pos:start="663:44" pos:end="663:51"><name pos:start="663:44" pos:end="663:51"><name pos:start="663:44" pos:end="663:44">h</name><operator pos:start="663:45" pos:end="663:46">-&gt;</operator><name pos:start="663:47" pos:end="663:51">avctx</name></name></expr></argument>, <argument pos:start="663:54" pos:end="663:65"><expr pos:start="663:54" pos:end="663:65"><name pos:start="663:54" pos:end="663:65">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="663:68" pos:end="663:86"><expr pos:start="663:68" pos:end="663:86"><literal type="string" pos:start="663:68" pos:end="663:86">"ref %u overflow\n"</literal></expr></argument>, <argument pos:start="663:89" pos:end="663:91"><expr pos:start="663:89" pos:end="663:91"><name pos:start="663:89" pos:end="663:91">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <return pos:start="665:37" pos:end="665:46">return <expr pos:start="665:44" pos:end="665:45"><operator pos:start="665:44" pos:end="665:44">-</operator><literal type="number" pos:start="665:45" pos:end="665:45">1</literal></expr>;</return>

                                </block_content>}</block></if></if_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if><else pos:start="671:26" pos:end="673:52">else<block type="pseudo" pos:start="673:29" pos:end="673:52"><block_content pos:start="673:29" pos:end="673:52">

                            <expr_stmt pos:start="673:29" pos:end="673:52"><expr pos:start="673:29" pos:end="673:51"><name pos:start="673:29" pos:end="673:31">val</name><operator pos:start="673:32" pos:end="673:32">=</operator> <name pos:start="673:34" pos:end="673:46">LIST_NOT_USED</name><operator pos:start="673:47" pos:end="673:47">&amp;</operator><literal type="number" pos:start="673:48" pos:end="673:51">0xFF</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="675:25" pos:end="675:96"><expr pos:start="675:25" pos:end="675:95"><call pos:start="675:25" pos:end="675:95"><name pos:start="675:25" pos:end="675:38">fill_rectangle</name><argument_list pos:start="675:39" pos:end="675:95">(<argument pos:start="675:40" pos:end="675:77"><expr pos:start="675:40" pos:end="675:77"><operator pos:start="675:40" pos:end="675:40">&amp;</operator><name pos:start="675:41" pos:end="675:77"><name pos:start="675:41" pos:end="675:42">sl</name><operator pos:start="675:43" pos:end="675:44">-&gt;</operator><name pos:start="675:45" pos:end="675:53">ref_cache</name><index pos:start="675:54" pos:end="675:59">[<expr pos:start="675:55" pos:end="675:58"><name pos:start="675:55" pos:end="675:58">list</name></expr>]</index><index pos:start="675:60" pos:end="675:77">[ <expr pos:start="675:62" pos:end="675:75"><name pos:start="675:62" pos:end="675:69"><name pos:start="675:62" pos:end="675:66">scan8</name><index pos:start="675:67" pos:end="675:69">[<expr pos:start="675:68" pos:end="675:68"><literal type="number" pos:start="675:68" pos:end="675:68">0</literal></expr>]</index></name> <operator pos:start="675:71" pos:end="675:71">+</operator> <literal type="number" pos:start="675:73" pos:end="675:73">2</literal><operator pos:start="675:74" pos:end="675:74">*</operator><name pos:start="675:75" pos:end="675:75">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="675:80" pos:end="675:80"><expr pos:start="675:80" pos:end="675:80"><literal type="number" pos:start="675:80" pos:end="675:80">2</literal></expr></argument>, <argument pos:start="675:83" pos:end="675:83"><expr pos:start="675:83" pos:end="675:83"><literal type="number" pos:start="675:83" pos:end="675:83">4</literal></expr></argument>, <argument pos:start="675:86" pos:end="675:86"><expr pos:start="675:86" pos:end="675:86"><literal type="number" pos:start="675:86" pos:end="675:86">8</literal></expr></argument>, <argument pos:start="675:89" pos:end="675:91"><expr pos:start="675:89" pos:end="675:91"><name pos:start="675:89" pos:end="675:91">val</name></expr></argument>, <argument pos:start="675:94" pos:end="675:94"><expr pos:start="675:94" pos:end="675:94"><literal type="number" pos:start="675:94" pos:end="675:94">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

            </block_content>}</block></for>

            <for pos:start="681:13" pos:end="709:13">for <control pos:start="681:17" pos:end="681:57">(<init pos:start="681:18" pos:end="681:26"><expr pos:start="681:18" pos:end="681:25"><name pos:start="681:18" pos:end="681:21">list</name> <operator pos:start="681:23" pos:end="681:23">=</operator> <literal type="number" pos:start="681:25" pos:end="681:25">0</literal></expr>;</init> <condition pos:start="681:28" pos:end="681:49"><expr pos:start="681:28" pos:end="681:48"><name pos:start="681:28" pos:end="681:31">list</name> <operator pos:start="681:33" pos:end="681:33">&lt;</operator> <name pos:start="681:35" pos:end="681:48"><name pos:start="681:35" pos:end="681:36">sl</name><operator pos:start="681:37" pos:end="681:38">-&gt;</operator><name pos:start="681:39" pos:end="681:48">list_count</name></name></expr>;</condition> <incr pos:start="681:51" pos:end="681:56"><expr pos:start="681:51" pos:end="681:56"><name pos:start="681:51" pos:end="681:54">list</name><operator pos:start="681:55" pos:end="681:56">++</operator></expr></incr>)</control> <block pos:start="681:59" pos:end="709:13">{<block_content pos:start="683:17" pos:end="707:17">

                <for pos:start="683:17" pos:end="707:17">for<control pos:start="683:20" pos:end="683:34">(<init pos:start="683:21" pos:end="683:24"><expr pos:start="683:21" pos:end="683:23"><name pos:start="683:21" pos:end="683:21">i</name><operator pos:start="683:22" pos:end="683:22">=</operator><literal type="number" pos:start="683:23" pos:end="683:23">0</literal></expr>;</init> <condition pos:start="683:26" pos:end="683:29"><expr pos:start="683:26" pos:end="683:28"><name pos:start="683:26" pos:end="683:26">i</name><operator pos:start="683:27" pos:end="683:27">&lt;</operator><literal type="number" pos:start="683:28" pos:end="683:28">2</literal></expr>;</condition> <incr pos:start="683:31" pos:end="683:33"><expr pos:start="683:31" pos:end="683:33"><name pos:start="683:31" pos:end="683:31">i</name><operator pos:start="683:32" pos:end="683:33">++</operator></expr></incr>)</control><block pos:start="683:35" pos:end="707:17">{<block_content pos:start="685:21" pos:end="705:90">

                    <decl_stmt pos:start="685:21" pos:end="685:37"><decl pos:start="685:21" pos:end="685:36"><type pos:start="685:21" pos:end="685:32"><name pos:start="685:21" pos:end="685:28">unsigned</name> <name pos:start="685:30" pos:end="685:32">int</name></type> <name pos:start="685:34" pos:end="685:36">val</name></decl>;</decl_stmt>

                    <if_stmt pos:start="687:21" pos:end="703:30"><if pos:start="687:21" pos:end="701:21">if<condition pos:start="687:23" pos:end="687:48">(<expr pos:start="687:24" pos:end="687:47"><call pos:start="687:24" pos:end="687:47"><name pos:start="687:24" pos:end="687:29">IS_DIR</name><argument_list pos:start="687:30" pos:end="687:47">(<argument pos:start="687:31" pos:end="687:37"><expr pos:start="687:31" pos:end="687:37"><name pos:start="687:31" pos:end="687:37">mb_type</name></expr></argument>, <argument pos:start="687:40" pos:end="687:40"><expr pos:start="687:40" pos:end="687:40"><name pos:start="687:40" pos:end="687:40">i</name></expr></argument>, <argument pos:start="687:43" pos:end="687:46"><expr pos:start="687:43" pos:end="687:46"><name pos:start="687:43" pos:end="687:46">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="687:49" pos:end="701:21">{<block_content pos:start="689:25" pos:end="699:47">

                        <expr_stmt pos:start="689:25" pos:end="689:108"><expr pos:start="689:25" pos:end="689:107"><call pos:start="689:25" pos:end="689:107"><name pos:start="689:25" pos:end="689:40">pred_8x16_motion</name><argument_list pos:start="689:41" pos:end="689:107">(<argument pos:start="689:42" pos:end="689:42"><expr pos:start="689:42" pos:end="689:42"><name pos:start="689:42" pos:end="689:42">h</name></expr></argument>, <argument pos:start="689:45" pos:end="689:46"><expr pos:start="689:45" pos:end="689:46"><name pos:start="689:45" pos:end="689:46">sl</name></expr></argument>, <argument pos:start="689:49" pos:end="689:51"><expr pos:start="689:49" pos:end="689:51"><name pos:start="689:49" pos:end="689:49">i</name><operator pos:start="689:50" pos:end="689:50">*</operator><literal type="number" pos:start="689:51" pos:end="689:51">4</literal></expr></argument>, <argument pos:start="689:54" pos:end="689:57"><expr pos:start="689:54" pos:end="689:57"><name pos:start="689:54" pos:end="689:57">list</name></expr></argument>, <argument pos:start="689:60" pos:end="689:96"><expr pos:start="689:60" pos:end="689:96"><name pos:start="689:60" pos:end="689:96"><name pos:start="689:60" pos:end="689:61">sl</name><operator pos:start="689:62" pos:end="689:63">-&gt;</operator><name pos:start="689:64" pos:end="689:72">ref_cache</name><index pos:start="689:73" pos:end="689:78">[<expr pos:start="689:74" pos:end="689:77"><name pos:start="689:74" pos:end="689:77">list</name></expr>]</index><index pos:start="689:79" pos:end="689:96">[ <expr pos:start="689:81" pos:end="689:94"><name pos:start="689:81" pos:end="689:88"><name pos:start="689:81" pos:end="689:85">scan8</name><index pos:start="689:86" pos:end="689:88">[<expr pos:start="689:87" pos:end="689:87"><literal type="number" pos:start="689:87" pos:end="689:87">0</literal></expr>]</index></name> <operator pos:start="689:90" pos:end="689:90">+</operator> <literal type="number" pos:start="689:92" pos:end="689:92">2</literal><operator pos:start="689:93" pos:end="689:93">*</operator><name pos:start="689:94" pos:end="689:94">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="689:99" pos:end="689:101"><expr pos:start="689:99" pos:end="689:101"><operator pos:start="689:99" pos:end="689:99">&amp;</operator><name pos:start="689:100" pos:end="689:101">mx</name></expr></argument>, <argument pos:start="689:104" pos:end="689:106"><expr pos:start="689:104" pos:end="689:106"><operator pos:start="689:104" pos:end="689:104">&amp;</operator><name pos:start="689:105" pos:end="689:106">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="691:25" pos:end="691:53"><expr pos:start="691:25" pos:end="691:52"><name pos:start="691:25" pos:end="691:26">mx</name> <operator pos:start="691:28" pos:end="691:29">+=</operator> <call pos:start="691:31" pos:end="691:52"><name pos:start="691:31" pos:end="691:43">get_se_golomb</name><argument_list pos:start="691:44" pos:end="691:52">(<argument pos:start="691:45" pos:end="691:51"><expr pos:start="691:45" pos:end="691:51"><operator pos:start="691:45" pos:end="691:45">&amp;</operator><name pos:start="691:46" pos:end="691:51"><name pos:start="691:46" pos:end="691:47">sl</name><operator pos:start="691:48" pos:end="691:49">-&gt;</operator><name pos:start="691:50" pos:end="691:51">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="693:25" pos:end="693:53"><expr pos:start="693:25" pos:end="693:52"><name pos:start="693:25" pos:end="693:26">my</name> <operator pos:start="693:28" pos:end="693:29">+=</operator> <call pos:start="693:31" pos:end="693:52"><name pos:start="693:31" pos:end="693:43">get_se_golomb</name><argument_list pos:start="693:44" pos:end="693:52">(<argument pos:start="693:45" pos:end="693:51"><expr pos:start="693:45" pos:end="693:51"><operator pos:start="693:45" pos:end="693:45">&amp;</operator><name pos:start="693:46" pos:end="693:51"><name pos:start="693:46" pos:end="693:47">sl</name><operator pos:start="693:48" pos:end="693:49">-&gt;</operator><name pos:start="693:50" pos:end="693:51">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="695:25" pos:end="695:70"><expr pos:start="695:25" pos:end="695:69"><call pos:start="695:25" pos:end="695:69"><name pos:start="695:25" pos:end="695:31">ff_tlog</name><argument_list pos:start="695:32" pos:end="695:69">(<argument pos:start="695:33" pos:end="695:40"><expr pos:start="695:33" pos:end="695:40"><name pos:start="695:33" pos:end="695:40"><name pos:start="695:33" pos:end="695:33">h</name><operator pos:start="695:34" pos:end="695:35">-&gt;</operator><name pos:start="695:36" pos:end="695:40">avctx</name></name></expr></argument>, <argument pos:start="695:43" pos:end="695:60"><expr pos:start="695:43" pos:end="695:60"><literal type="string" pos:start="695:43" pos:end="695:60">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="695:63" pos:end="695:64"><expr pos:start="695:63" pos:end="695:64"><name pos:start="695:63" pos:end="695:64">mx</name></expr></argument>, <argument pos:start="695:67" pos:end="695:68"><expr pos:start="695:67" pos:end="695:68"><name pos:start="695:67" pos:end="695:68">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="699:25" pos:end="699:47"><expr pos:start="699:25" pos:end="699:46"><name pos:start="699:25" pos:end="699:27">val</name><operator pos:start="699:28" pos:end="699:28">=</operator> <call pos:start="699:30" pos:end="699:46"><name pos:start="699:30" pos:end="699:39">pack16to32</name><argument_list pos:start="699:40" pos:end="699:46">(<argument pos:start="699:41" pos:end="699:42"><expr pos:start="699:41" pos:end="699:42"><name pos:start="699:41" pos:end="699:42">mx</name></expr></argument>,<argument pos:start="699:44" pos:end="699:45"><expr pos:start="699:44" pos:end="699:45"><name pos:start="699:44" pos:end="699:45">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="701:22" pos:end="703:30">else<block type="pseudo" pos:start="703:25" pos:end="703:30"><block_content pos:start="703:25" pos:end="703:30">

                        <expr_stmt pos:start="703:25" pos:end="703:30"><expr pos:start="703:25" pos:end="703:29"><name pos:start="703:25" pos:end="703:27">val</name><operator pos:start="703:28" pos:end="703:28">=</operator><literal type="number" pos:start="703:29" pos:end="703:29">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="705:21" pos:end="705:90"><expr pos:start="705:21" pos:end="705:89"><call pos:start="705:21" pos:end="705:89"><name pos:start="705:21" pos:end="705:34">fill_rectangle</name><argument_list pos:start="705:35" pos:end="705:89">(<argument pos:start="705:36" pos:end="705:71"><expr pos:start="705:36" pos:end="705:71"><name pos:start="705:36" pos:end="705:71"><name pos:start="705:36" pos:end="705:37">sl</name><operator pos:start="705:38" pos:end="705:39">-&gt;</operator><name pos:start="705:40" pos:end="705:47">mv_cache</name><index pos:start="705:48" pos:end="705:53">[<expr pos:start="705:49" pos:end="705:52"><name pos:start="705:49" pos:end="705:52">list</name></expr>]</index><index pos:start="705:54" pos:end="705:71">[ <expr pos:start="705:56" pos:end="705:69"><name pos:start="705:56" pos:end="705:63"><name pos:start="705:56" pos:end="705:60">scan8</name><index pos:start="705:61" pos:end="705:63">[<expr pos:start="705:62" pos:end="705:62"><literal type="number" pos:start="705:62" pos:end="705:62">0</literal></expr>]</index></name> <operator pos:start="705:65" pos:end="705:65">+</operator> <literal type="number" pos:start="705:67" pos:end="705:67">2</literal><operator pos:start="705:68" pos:end="705:68">*</operator><name pos:start="705:69" pos:end="705:69">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="705:74" pos:end="705:74"><expr pos:start="705:74" pos:end="705:74"><literal type="number" pos:start="705:74" pos:end="705:74">2</literal></expr></argument>, <argument pos:start="705:77" pos:end="705:77"><expr pos:start="705:77" pos:end="705:77"><literal type="number" pos:start="705:77" pos:end="705:77">4</literal></expr></argument>, <argument pos:start="705:80" pos:end="705:80"><expr pos:start="705:80" pos:end="705:80"><literal type="number" pos:start="705:80" pos:end="705:80">8</literal></expr></argument>, <argument pos:start="705:83" pos:end="705:85"><expr pos:start="705:83" pos:end="705:85"><name pos:start="705:83" pos:end="705:85">val</name></expr></argument>, <argument pos:start="705:88" pos:end="705:88"><expr pos:start="705:88" pos:end="705:88"><literal type="number" pos:start="705:88" pos:end="705:88">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="717:5" pos:end="719:42"><if pos:start="717:5" pos:end="719:42">if<condition pos:start="717:7" pos:end="717:25">(<expr pos:start="717:8" pos:end="717:24"><call pos:start="717:8" pos:end="717:24"><name pos:start="717:8" pos:end="717:15">IS_INTER</name><argument_list pos:start="717:16" pos:end="717:24">(<argument pos:start="717:17" pos:end="717:23"><expr pos:start="717:17" pos:end="717:23"><name pos:start="717:17" pos:end="717:23">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="719:9" pos:end="719:42"><block_content pos:start="719:9" pos:end="719:42">

        <expr_stmt pos:start="719:9" pos:end="719:42"><expr pos:start="719:9" pos:end="719:41"><call pos:start="719:9" pos:end="719:41"><name pos:start="719:9" pos:end="719:25">write_back_motion</name><argument_list pos:start="719:26" pos:end="719:41">(<argument pos:start="719:27" pos:end="719:27"><expr pos:start="719:27" pos:end="719:27"><name pos:start="719:27" pos:end="719:27">h</name></expr></argument>, <argument pos:start="719:30" pos:end="719:31"><expr pos:start="719:30" pos:end="719:31"><name pos:start="719:30" pos:end="719:31">sl</name></expr></argument>, <argument pos:start="719:34" pos:end="719:40"><expr pos:start="719:34" pos:end="719:40"><name pos:start="719:34" pos:end="719:40">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="723:5" pos:end="773:5"><if pos:start="723:5" pos:end="763:5">if<condition pos:start="723:7" pos:end="723:31">(<expr pos:start="723:8" pos:end="723:30"><operator pos:start="723:8" pos:end="723:8">!</operator><call pos:start="723:9" pos:end="723:30"><name pos:start="723:9" pos:end="723:21">IS_INTRA16x16</name><argument_list pos:start="723:22" pos:end="723:30">(<argument pos:start="723:23" pos:end="723:29"><expr pos:start="723:23" pos:end="723:29"><name pos:start="723:23" pos:end="723:29">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="723:32" pos:end="763:5">{<block_content pos:start="725:9" pos:end="761:9">

        <expr_stmt pos:start="725:9" pos:end="725:36"><expr pos:start="725:9" pos:end="725:35"><name pos:start="725:9" pos:end="725:11">cbp</name><operator pos:start="725:12" pos:end="725:12">=</operator> <call pos:start="725:14" pos:end="725:35"><name pos:start="725:14" pos:end="725:26">get_ue_golomb</name><argument_list pos:start="725:27" pos:end="725:35">(<argument pos:start="725:28" pos:end="725:34"><expr pos:start="725:28" pos:end="725:34"><operator pos:start="725:28" pos:end="725:28">&amp;</operator><name pos:start="725:29" pos:end="725:34"><name pos:start="725:29" pos:end="725:30">sl</name><operator pos:start="725:31" pos:end="725:32">-&gt;</operator><name pos:start="725:33" pos:end="725:34">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="729:9" pos:end="761:9"><if pos:start="729:9" pos:end="747:9">if<condition pos:start="729:11" pos:end="729:25">(<expr pos:start="729:12" pos:end="729:24"><name pos:start="729:12" pos:end="729:24">decode_chroma</name></expr>)</condition><block pos:start="729:26" pos:end="747:9">{<block_content pos:start="731:13" pos:end="745:55">

            <if_stmt pos:start="731:13" pos:end="737:13"><if pos:start="731:13" pos:end="737:13">if<condition pos:start="731:15" pos:end="731:24">(<expr pos:start="731:16" pos:end="731:23"><name pos:start="731:16" pos:end="731:18">cbp</name> <operator pos:start="731:20" pos:end="731:20">&gt;</operator> <literal type="number" pos:start="731:22" pos:end="731:23">47</literal></expr>)</condition><block pos:start="731:25" pos:end="737:13">{<block_content pos:start="733:17" pos:end="735:26">

                <expr_stmt pos:start="733:17" pos:end="733:105"><expr pos:start="733:17" pos:end="733:104"><call pos:start="733:17" pos:end="733:104"><name pos:start="733:17" pos:end="733:22">av_log</name><argument_list pos:start="733:23" pos:end="733:104">(<argument pos:start="733:24" pos:end="733:31"><expr pos:start="733:24" pos:end="733:31"><name pos:start="733:24" pos:end="733:31"><name pos:start="733:24" pos:end="733:24">h</name><operator pos:start="733:25" pos:end="733:26">-&gt;</operator><name pos:start="733:27" pos:end="733:31">avctx</name></name></expr></argument>, <argument pos:start="733:34" pos:end="733:45"><expr pos:start="733:34" pos:end="733:45"><name pos:start="733:34" pos:end="733:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="733:48" pos:end="733:78"><expr pos:start="733:48" pos:end="733:78"><literal type="string" pos:start="733:48" pos:end="733:78">"cbp too large (%u) at %d %d\n"</literal></expr></argument>, <argument pos:start="733:81" pos:end="733:83"><expr pos:start="733:81" pos:end="733:83"><name pos:start="733:81" pos:end="733:83">cbp</name></expr></argument>, <argument pos:start="733:86" pos:end="733:93"><expr pos:start="733:86" pos:end="733:93"><name pos:start="733:86" pos:end="733:93"><name pos:start="733:86" pos:end="733:87">sl</name><operator pos:start="733:88" pos:end="733:89">-&gt;</operator><name pos:start="733:90" pos:end="733:93">mb_x</name></name></expr></argument>, <argument pos:start="733:96" pos:end="733:103"><expr pos:start="733:96" pos:end="733:103"><name pos:start="733:96" pos:end="733:103"><name pos:start="733:96" pos:end="733:97">sl</name><operator pos:start="733:98" pos:end="733:99">-&gt;</operator><name pos:start="733:100" pos:end="733:103">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="735:17" pos:end="735:26">return <expr pos:start="735:24" pos:end="735:25"><operator pos:start="735:24" pos:end="735:24">-</operator><literal type="number" pos:start="735:25" pos:end="735:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="739:13" pos:end="745:55"><if pos:start="739:13" pos:end="741:58">if <condition pos:start="739:16" pos:end="739:37">(<expr pos:start="739:17" pos:end="739:36"><call pos:start="739:17" pos:end="739:36"><name pos:start="739:17" pos:end="739:27">IS_INTRA4x4</name><argument_list pos:start="739:28" pos:end="739:36">(<argument pos:start="739:29" pos:end="739:35"><expr pos:start="739:29" pos:end="739:35"><name pos:start="739:29" pos:end="739:35">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="741:17" pos:end="741:58"><block_content pos:start="741:17" pos:end="741:58">

                <expr_stmt pos:start="741:17" pos:end="741:58"><expr pos:start="741:17" pos:end="741:57"><name pos:start="741:17" pos:end="741:19">cbp</name> <operator pos:start="741:21" pos:end="741:21">=</operator> <name pos:start="741:23" pos:end="741:57"><name pos:start="741:23" pos:end="741:52">ff_h264_golomb_to_intra4x4_cbp</name><index pos:start="741:53" pos:end="741:57">[<expr pos:start="741:54" pos:end="741:56"><name pos:start="741:54" pos:end="741:56">cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="743:13" pos:end="745:55">else<block type="pseudo" pos:start="745:17" pos:end="745:55"><block_content pos:start="745:17" pos:end="745:55">

                <expr_stmt pos:start="745:17" pos:end="745:55"><expr pos:start="745:17" pos:end="745:54"><name pos:start="745:17" pos:end="745:19">cbp</name> <operator pos:start="745:21" pos:end="745:21">=</operator> <name pos:start="745:23" pos:end="745:54"><name pos:start="745:23" pos:end="745:49">ff_h264_golomb_to_inter_cbp</name><index pos:start="745:50" pos:end="745:54">[<expr pos:start="745:51" pos:end="745:53"><name pos:start="745:51" pos:end="745:53">cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if><else pos:start="747:10" pos:end="761:9">else<block pos:start="747:14" pos:end="761:9">{<block_content pos:start="749:13" pos:end="759:72">

            <if_stmt pos:start="749:13" pos:end="755:13"><if pos:start="749:13" pos:end="755:13">if<condition pos:start="749:15" pos:end="749:24">(<expr pos:start="749:16" pos:end="749:23"><name pos:start="749:16" pos:end="749:18">cbp</name> <operator pos:start="749:20" pos:end="749:20">&gt;</operator> <literal type="number" pos:start="749:22" pos:end="749:23">15</literal></expr>)</condition><block pos:start="749:25" pos:end="755:13">{<block_content pos:start="751:17" pos:end="753:26">

                <expr_stmt pos:start="751:17" pos:end="751:105"><expr pos:start="751:17" pos:end="751:104"><call pos:start="751:17" pos:end="751:104"><name pos:start="751:17" pos:end="751:22">av_log</name><argument_list pos:start="751:23" pos:end="751:104">(<argument pos:start="751:24" pos:end="751:31"><expr pos:start="751:24" pos:end="751:31"><name pos:start="751:24" pos:end="751:31"><name pos:start="751:24" pos:end="751:24">h</name><operator pos:start="751:25" pos:end="751:26">-&gt;</operator><name pos:start="751:27" pos:end="751:31">avctx</name></name></expr></argument>, <argument pos:start="751:34" pos:end="751:45"><expr pos:start="751:34" pos:end="751:45"><name pos:start="751:34" pos:end="751:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="751:48" pos:end="751:78"><expr pos:start="751:48" pos:end="751:78"><literal type="string" pos:start="751:48" pos:end="751:78">"cbp too large (%u) at %d %d\n"</literal></expr></argument>, <argument pos:start="751:81" pos:end="751:83"><expr pos:start="751:81" pos:end="751:83"><name pos:start="751:81" pos:end="751:83">cbp</name></expr></argument>, <argument pos:start="751:86" pos:end="751:93"><expr pos:start="751:86" pos:end="751:93"><name pos:start="751:86" pos:end="751:93"><name pos:start="751:86" pos:end="751:87">sl</name><operator pos:start="751:88" pos:end="751:89">-&gt;</operator><name pos:start="751:90" pos:end="751:93">mb_x</name></name></expr></argument>, <argument pos:start="751:96" pos:end="751:103"><expr pos:start="751:96" pos:end="751:103"><name pos:start="751:96" pos:end="751:103"><name pos:start="751:96" pos:end="751:97">sl</name><operator pos:start="751:98" pos:end="751:99">-&gt;</operator><name pos:start="751:100" pos:end="751:103">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="753:17" pos:end="753:26">return <expr pos:start="753:24" pos:end="753:25"><operator pos:start="753:24" pos:end="753:24">-</operator><literal type="number" pos:start="753:25" pos:end="753:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="757:13" pos:end="759:72"><if pos:start="757:13" pos:end="757:75">if<condition pos:start="757:15" pos:end="757:36">(<expr pos:start="757:16" pos:end="757:35"><call pos:start="757:16" pos:end="757:35"><name pos:start="757:16" pos:end="757:26">IS_INTRA4x4</name><argument_list pos:start="757:27" pos:end="757:35">(<argument pos:start="757:28" pos:end="757:34"><expr pos:start="757:28" pos:end="757:34"><name pos:start="757:28" pos:end="757:34">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="757:38" pos:end="757:75"><block_content pos:start="757:38" pos:end="757:75"> <expr_stmt pos:start="757:38" pos:end="757:75"><expr pos:start="757:38" pos:end="757:74"><name pos:start="757:38" pos:end="757:40">cbp</name><operator pos:start="757:41" pos:end="757:41">=</operator> <name pos:start="757:43" pos:end="757:74"><name pos:start="757:43" pos:end="757:69">golomb_to_intra4x4_cbp_gray</name><index pos:start="757:70" pos:end="757:74">[<expr pos:start="757:71" pos:end="757:73"><name pos:start="757:71" pos:end="757:73">cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="759:13" pos:end="759:72">else<block type="pseudo" pos:start="759:38" pos:end="759:72"><block_content pos:start="759:38" pos:end="759:72">                     <expr_stmt pos:start="759:38" pos:end="759:72"><expr pos:start="759:38" pos:end="759:71"><name pos:start="759:38" pos:end="759:40">cbp</name><operator pos:start="759:41" pos:end="759:41">=</operator> <name pos:start="759:43" pos:end="759:71"><name pos:start="759:43" pos:end="759:66">golomb_to_inter_cbp_gray</name><index pos:start="759:67" pos:end="759:71">[<expr pos:start="759:68" pos:end="759:70"><name pos:start="759:68" pos:end="759:70">cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="763:7" pos:end="773:5">else <block pos:start="763:12" pos:end="773:5">{<block_content pos:start="765:9" pos:end="771:9">

        <if_stmt pos:start="765:9" pos:end="771:9"><if pos:start="765:9" pos:end="771:9">if <condition pos:start="765:12" pos:end="765:37">(<expr pos:start="765:13" pos:end="765:36"><operator pos:start="765:13" pos:end="765:13">!</operator><name pos:start="765:14" pos:end="765:26">decode_chroma</name> <operator pos:start="765:28" pos:end="765:29">&amp;&amp;</operator> <name pos:start="765:31" pos:end="765:33">cbp</name><operator pos:start="765:34" pos:end="765:34">&gt;</operator><literal type="number" pos:start="765:35" pos:end="765:36">15</literal></expr>)</condition> <block pos:start="765:39" pos:end="771:9">{<block_content pos:start="767:13" pos:end="769:39">

            <expr_stmt pos:start="767:13" pos:end="767:60"><expr pos:start="767:13" pos:end="767:59"><call pos:start="767:13" pos:end="767:59"><name pos:start="767:13" pos:end="767:18">av_log</name><argument_list pos:start="767:19" pos:end="767:59">(<argument pos:start="767:20" pos:end="767:27"><expr pos:start="767:20" pos:end="767:27"><name pos:start="767:20" pos:end="767:27"><name pos:start="767:20" pos:end="767:20">h</name><operator pos:start="767:21" pos:end="767:22">-&gt;</operator><name pos:start="767:23" pos:end="767:27">avctx</name></name></expr></argument>, <argument pos:start="767:30" pos:end="767:41"><expr pos:start="767:30" pos:end="767:41"><name pos:start="767:30" pos:end="767:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="767:44" pos:end="767:58"><expr pos:start="767:44" pos:end="767:58"><literal type="string" pos:start="767:44" pos:end="767:58">"gray chroma\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="769:13" pos:end="769:39">return <expr pos:start="769:20" pos:end="769:38"><name pos:start="769:20" pos:end="769:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="777:5" pos:end="781:5"><if pos:start="777:5" pos:end="781:5">if<condition pos:start="777:7" pos:end="777:56">(<expr pos:start="777:8" pos:end="777:55"><name pos:start="777:8" pos:end="777:21">dct8x8_allowed</name> <operator pos:start="777:23" pos:end="777:24">&amp;&amp;</operator> <operator pos:start="777:26" pos:end="777:26">(</operator><name pos:start="777:27" pos:end="777:29">cbp</name><operator pos:start="777:30" pos:end="777:30">&amp;</operator><literal type="number" pos:start="777:31" pos:end="777:32">15</literal><operator pos:start="777:33" pos:end="777:33">)</operator> <operator pos:start="777:35" pos:end="777:36">&amp;&amp;</operator> <operator pos:start="777:38" pos:end="777:38">!</operator><call pos:start="777:39" pos:end="777:55"><name pos:start="777:39" pos:end="777:46">IS_INTRA</name><argument_list pos:start="777:47" pos:end="777:55">(<argument pos:start="777:48" pos:end="777:54"><expr pos:start="777:48" pos:end="777:54"><name pos:start="777:48" pos:end="777:54">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="777:57" pos:end="781:5">{<block_content pos:start="779:9" pos:end="779:53">

        <expr_stmt pos:start="779:9" pos:end="779:53"><expr pos:start="779:9" pos:end="779:52"><name pos:start="779:9" pos:end="779:15">mb_type</name> <operator pos:start="779:17" pos:end="779:18">|=</operator> <name pos:start="779:20" pos:end="779:33">MB_TYPE_8x8DCT</name><operator pos:start="779:34" pos:end="779:34">*</operator><call pos:start="779:35" pos:end="779:52"><name pos:start="779:35" pos:end="779:43">get_bits1</name><argument_list pos:start="779:44" pos:end="779:52">(<argument pos:start="779:45" pos:end="779:51"><expr pos:start="779:45" pos:end="779:51"><operator pos:start="779:45" pos:end="779:45">&amp;</operator><name pos:start="779:46" pos:end="779:51"><name pos:start="779:46" pos:end="779:47">sl</name><operator pos:start="779:48" pos:end="779:49">-&gt;</operator><name pos:start="779:50" pos:end="779:51">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="783:5" pos:end="785:29"><expr pos:start="783:5" pos:end="785:28"><name pos:start="783:5" pos:end="783:11"><name pos:start="783:5" pos:end="783:6">sl</name><operator pos:start="783:7" pos:end="783:8">-&gt;</operator><name pos:start="783:9" pos:end="783:11">cbp</name></name><operator pos:start="783:12" pos:end="783:12">=</operator>

    <name pos:start="785:5" pos:end="785:23"><name pos:start="785:5" pos:end="785:5">h</name><operator pos:start="785:6" pos:end="785:7">-&gt;</operator><name pos:start="785:8" pos:end="785:16">cbp_table</name><index pos:start="785:17" pos:end="785:23">[<expr pos:start="785:18" pos:end="785:22"><name pos:start="785:18" pos:end="785:22">mb_xy</name></expr>]</index></name><operator pos:start="785:24" pos:end="785:24">=</operator> <name pos:start="785:26" pos:end="785:28">cbp</name></expr>;</expr_stmt>

    <expr_stmt pos:start="787:5" pos:end="787:40"><expr pos:start="787:5" pos:end="787:39"><name pos:start="787:5" pos:end="787:29"><name pos:start="787:5" pos:end="787:5">h</name><operator pos:start="787:6" pos:end="787:7">-&gt;</operator><name pos:start="787:8" pos:end="787:14">cur_pic</name><operator pos:start="787:15" pos:end="787:15">.</operator><name pos:start="787:16" pos:end="787:22">mb_type</name><index pos:start="787:23" pos:end="787:29">[<expr pos:start="787:24" pos:end="787:28"><name pos:start="787:24" pos:end="787:28">mb_xy</name></expr>]</index></name> <operator pos:start="787:31" pos:end="787:31">=</operator> <name pos:start="787:33" pos:end="787:39">mb_type</name></expr>;</expr_stmt>



    <if_stmt pos:start="791:5" pos:end="947:5"><if pos:start="791:5" pos:end="939:5">if<condition pos:start="791:7" pos:end="791:37">(<expr pos:start="791:8" pos:end="791:36"><name pos:start="791:8" pos:end="791:10">cbp</name> <operator pos:start="791:12" pos:end="791:13">||</operator> <call pos:start="791:15" pos:end="791:36"><name pos:start="791:15" pos:end="791:27">IS_INTRA16x16</name><argument_list pos:start="791:28" pos:end="791:36">(<argument pos:start="791:29" pos:end="791:35"><expr pos:start="791:29" pos:end="791:35"><name pos:start="791:29" pos:end="791:35">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="791:38" pos:end="939:5">{<block_content pos:start="793:9" pos:end="937:9">

        <decl_stmt pos:start="793:9" pos:end="793:35"><decl pos:start="793:9" pos:end="793:16"><type pos:start="793:9" pos:end="793:11"><name pos:start="793:9" pos:end="793:11">int</name></type> <name pos:start="793:13" pos:end="793:16">i4x4</name></decl>, <decl pos:start="793:19" pos:end="793:22"><type ref="prev" pos:start="793:9" pos:end="793:11"/><name pos:start="793:19" pos:end="793:22">i8x8</name></decl>, <decl pos:start="793:25" pos:end="793:34"><type ref="prev" pos:start="793:9" pos:end="793:11"/><name pos:start="793:25" pos:end="793:34">chroma_idx</name></decl>;</decl_stmt>

        <decl_stmt pos:start="795:9" pos:end="795:19"><decl pos:start="795:9" pos:end="795:18"><type pos:start="795:9" pos:end="795:11"><name pos:start="795:9" pos:end="795:11">int</name></type> <name pos:start="795:13" pos:end="795:18">dquant</name></decl>;</decl_stmt>

        <decl_stmt pos:start="797:9" pos:end="797:16"><decl pos:start="797:9" pos:end="797:15"><type pos:start="797:9" pos:end="797:11"><name pos:start="797:9" pos:end="797:11">int</name></type> <name pos:start="797:13" pos:end="797:15">ret</name></decl>;</decl_stmt>

        <decl_stmt pos:start="799:9" pos:end="799:36"><decl pos:start="799:9" pos:end="799:35"><type pos:start="799:9" pos:end="799:23"><name pos:start="799:9" pos:end="799:21">GetBitContext</name> <modifier pos:start="799:23" pos:end="799:23">*</modifier></type><name pos:start="799:24" pos:end="799:25">gb</name> <init pos:start="799:27" pos:end="799:35">= <expr pos:start="799:29" pos:end="799:35"><operator pos:start="799:29" pos:end="799:29">&amp;</operator><name pos:start="799:30" pos:end="799:35"><name pos:start="799:30" pos:end="799:31">sl</name><operator pos:start="799:32" pos:end="799:33">-&gt;</operator><name pos:start="799:34" pos:end="799:35">gb</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="801:9" pos:end="801:38"><decl pos:start="801:9" pos:end="801:27"><type pos:start="801:9" pos:end="801:23"><specifier pos:start="801:9" pos:end="801:13">const</specifier> <name pos:start="801:15" pos:end="801:21">uint8_t</name> <modifier pos:start="801:23" pos:end="801:23">*</modifier></type><name pos:start="801:24" pos:end="801:27">scan</name></decl>, <decl pos:start="801:30" pos:end="801:37"><type ref="prev" pos:start="801:9" pos:end="801:23"><modifier pos:start="801:30" pos:end="801:30">*</modifier></type><name pos:start="801:31" pos:end="801:37">scan8x8</name></decl>;</decl_stmt>

        <decl_stmt pos:start="803:9" pos:end="803:68"><decl pos:start="803:9" pos:end="803:67"><type pos:start="803:9" pos:end="803:17"><specifier pos:start="803:9" pos:end="803:13">const</specifier> <name pos:start="803:15" pos:end="803:17">int</name></type> <name pos:start="803:19" pos:end="803:24">max_qp</name> <init pos:start="803:26" pos:end="803:67">= <expr pos:start="803:28" pos:end="803:67"><literal type="number" pos:start="803:28" pos:end="803:31">51</literal> <operator pos:start="803:31" pos:end="803:31">+</operator> <literal type="number" pos:start="803:33" pos:end="803:33">6</literal> <operator pos:start="803:35" pos:end="803:35">*</operator> <operator pos:start="803:37" pos:end="803:37">(</operator><name pos:start="803:38" pos:end="803:62"><name pos:start="803:38" pos:end="803:38">h</name><operator pos:start="803:39" pos:end="803:40">-&gt;</operator><name pos:start="803:41" pos:end="803:42">ps</name><operator pos:start="803:43" pos:end="803:43">.</operator><name pos:start="803:44" pos:end="803:46">sps</name><operator pos:start="803:47" pos:end="803:48">-&gt;</operator><name pos:start="803:49" pos:end="803:62">bit_depth_luma</name></name> <operator pos:start="803:64" pos:end="803:64">-</operator> <literal type="number" pos:start="803:66" pos:end="803:66">8</literal><operator pos:start="803:67" pos:end="803:67">)</operator></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="807:9" pos:end="819:9"><if pos:start="807:9" pos:end="813:9">if<condition pos:start="807:11" pos:end="807:34">(<expr pos:start="807:12" pos:end="807:33"><call pos:start="807:12" pos:end="807:33"><name pos:start="807:12" pos:end="807:24">IS_INTERLACED</name><argument_list pos:start="807:25" pos:end="807:33">(<argument pos:start="807:26" pos:end="807:32"><expr pos:start="807:26" pos:end="807:32"><name pos:start="807:26" pos:end="807:32">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="807:35" pos:end="813:9">{<block_content pos:start="809:13" pos:end="811:68">

            <expr_stmt pos:start="809:13" pos:end="809:86"><expr pos:start="809:13" pos:end="809:85"><name pos:start="809:13" pos:end="809:19">scan8x8</name> <operator pos:start="809:21" pos:end="809:21">=</operator> <ternary pos:start="809:23" pos:end="809:85"><condition pos:start="809:23" pos:end="809:34"><expr pos:start="809:23" pos:end="809:32"><name pos:start="809:23" pos:end="809:32"><name pos:start="809:23" pos:end="809:24">sl</name><operator pos:start="809:25" pos:end="809:26">-&gt;</operator><name pos:start="809:27" pos:end="809:32">qscale</name></name></expr> ?</condition><then pos:start="809:36" pos:end="809:57"> <expr pos:start="809:36" pos:end="809:57"><name pos:start="809:36" pos:end="809:57"><name pos:start="809:36" pos:end="809:36">h</name><operator pos:start="809:37" pos:end="809:38">-&gt;</operator><name pos:start="809:39" pos:end="809:57">field_scan8x8_cavlc</name></name></expr> </then><else pos:start="809:59" pos:end="809:85">: <expr pos:start="809:61" pos:end="809:85"><name pos:start="809:61" pos:end="809:85"><name pos:start="809:61" pos:end="809:61">h</name><operator pos:start="809:62" pos:end="809:63">-&gt;</operator><name pos:start="809:64" pos:end="809:85">field_scan8x8_cavlc_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="811:13" pos:end="811:68"><expr pos:start="811:13" pos:end="811:67"><name pos:start="811:13" pos:end="811:16">scan</name>    <operator pos:start="811:21" pos:end="811:21">=</operator> <ternary pos:start="811:23" pos:end="811:67"><condition pos:start="811:23" pos:end="811:34"><expr pos:start="811:23" pos:end="811:32"><name pos:start="811:23" pos:end="811:32"><name pos:start="811:23" pos:end="811:24">sl</name><operator pos:start="811:25" pos:end="811:26">-&gt;</operator><name pos:start="811:27" pos:end="811:32">qscale</name></name></expr> ?</condition><then pos:start="811:36" pos:end="811:48"> <expr pos:start="811:36" pos:end="811:48"><name pos:start="811:36" pos:end="811:48"><name pos:start="811:36" pos:end="811:36">h</name><operator pos:start="811:37" pos:end="811:38">-&gt;</operator><name pos:start="811:39" pos:end="811:48">field_scan</name></name></expr> </then><else pos:start="811:50" pos:end="811:67">: <expr pos:start="811:52" pos:end="811:67"><name pos:start="811:52" pos:end="811:67"><name pos:start="811:52" pos:end="811:52">h</name><operator pos:start="811:53" pos:end="811:54">-&gt;</operator><name pos:start="811:55" pos:end="811:67">field_scan_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="813:10" pos:end="819:9">else<block pos:start="813:14" pos:end="819:9">{<block_content pos:start="815:13" pos:end="817:70">

            <expr_stmt pos:start="815:13" pos:end="815:88"><expr pos:start="815:13" pos:end="815:87"><name pos:start="815:13" pos:end="815:19">scan8x8</name> <operator pos:start="815:21" pos:end="815:21">=</operator> <ternary pos:start="815:23" pos:end="815:87"><condition pos:start="815:23" pos:end="815:34"><expr pos:start="815:23" pos:end="815:32"><name pos:start="815:23" pos:end="815:32"><name pos:start="815:23" pos:end="815:24">sl</name><operator pos:start="815:25" pos:end="815:26">-&gt;</operator><name pos:start="815:27" pos:end="815:32">qscale</name></name></expr> ?</condition><then pos:start="815:36" pos:end="815:58"> <expr pos:start="815:36" pos:end="815:58"><name pos:start="815:36" pos:end="815:58"><name pos:start="815:36" pos:end="815:36">h</name><operator pos:start="815:37" pos:end="815:38">-&gt;</operator><name pos:start="815:39" pos:end="815:58">zigzag_scan8x8_cavlc</name></name></expr> </then><else pos:start="815:60" pos:end="815:87">: <expr pos:start="815:62" pos:end="815:87"><name pos:start="815:62" pos:end="815:87"><name pos:start="815:62" pos:end="815:62">h</name><operator pos:start="815:63" pos:end="815:64">-&gt;</operator><name pos:start="815:65" pos:end="815:87">zigzag_scan8x8_cavlc_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="817:13" pos:end="817:70"><expr pos:start="817:13" pos:end="817:69"><name pos:start="817:13" pos:end="817:16">scan</name>    <operator pos:start="817:21" pos:end="817:21">=</operator> <ternary pos:start="817:23" pos:end="817:69"><condition pos:start="817:23" pos:end="817:34"><expr pos:start="817:23" pos:end="817:32"><name pos:start="817:23" pos:end="817:32"><name pos:start="817:23" pos:end="817:24">sl</name><operator pos:start="817:25" pos:end="817:26">-&gt;</operator><name pos:start="817:27" pos:end="817:32">qscale</name></name></expr> ?</condition><then pos:start="817:36" pos:end="817:49"> <expr pos:start="817:36" pos:end="817:49"><name pos:start="817:36" pos:end="817:49"><name pos:start="817:36" pos:end="817:36">h</name><operator pos:start="817:37" pos:end="817:38">-&gt;</operator><name pos:start="817:39" pos:end="817:49">zigzag_scan</name></name></expr> </then><else pos:start="817:51" pos:end="817:69">: <expr pos:start="817:53" pos:end="817:69"><name pos:start="817:53" pos:end="817:69"><name pos:start="817:53" pos:end="817:53">h</name><operator pos:start="817:54" pos:end="817:55">-&gt;</operator><name pos:start="817:56" pos:end="817:69">zigzag_scan_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="823:9" pos:end="823:39"><expr pos:start="823:9" pos:end="823:38"><name pos:start="823:9" pos:end="823:14">dquant</name><operator pos:start="823:15" pos:end="823:15">=</operator> <call pos:start="823:17" pos:end="823:38"><name pos:start="823:17" pos:end="823:29">get_se_golomb</name><argument_list pos:start="823:30" pos:end="823:38">(<argument pos:start="823:31" pos:end="823:37"><expr pos:start="823:31" pos:end="823:37"><operator pos:start="823:31" pos:end="823:31">&amp;</operator><name pos:start="823:32" pos:end="823:37"><name pos:start="823:32" pos:end="823:33">sl</name><operator pos:start="823:34" pos:end="823:35">-&gt;</operator><name pos:start="823:36" pos:end="823:37">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="827:9" pos:end="827:29"><expr pos:start="827:9" pos:end="827:28"><name pos:start="827:9" pos:end="827:18"><name pos:start="827:9" pos:end="827:10">sl</name><operator pos:start="827:11" pos:end="827:12">-&gt;</operator><name pos:start="827:13" pos:end="827:18">qscale</name></name> <operator pos:start="827:20" pos:end="827:21">+=</operator> <name pos:start="827:23" pos:end="827:28">dquant</name></expr>;</expr_stmt>



        <if_stmt pos:start="831:9" pos:end="845:9"><if pos:start="831:9" pos:end="845:9">if <condition pos:start="831:12" pos:end="831:44">(<expr pos:start="831:13" pos:end="831:43"><operator pos:start="831:13" pos:end="831:13">(</operator><operator pos:start="831:14" pos:end="831:14">(</operator><name pos:start="831:15" pos:end="831:22">unsigned</name><operator pos:start="831:23" pos:end="831:23">)</operator><name pos:start="831:24" pos:end="831:33"><name pos:start="831:24" pos:end="831:25">sl</name><operator pos:start="831:26" pos:end="831:27">-&gt;</operator><name pos:start="831:28" pos:end="831:33">qscale</name></name><operator pos:start="831:34" pos:end="831:34">)</operator> <operator pos:start="831:36" pos:end="831:36">&gt;</operator> <name pos:start="831:38" pos:end="831:43">max_qp</name></expr>)</condition><block pos:start="831:45" pos:end="845:9">{<block_content pos:start="833:13" pos:end="843:13">

            <if_stmt pos:start="833:13" pos:end="835:55"><if pos:start="833:13" pos:end="833:57">if <condition pos:start="833:16" pos:end="833:31">(<expr pos:start="833:17" pos:end="833:30"><name pos:start="833:17" pos:end="833:26"><name pos:start="833:17" pos:end="833:18">sl</name><operator pos:start="833:19" pos:end="833:20">-&gt;</operator><name pos:start="833:21" pos:end="833:26">qscale</name></name> <operator pos:start="833:28" pos:end="833:28">&lt;</operator> <literal type="number" pos:start="833:30" pos:end="833:30">0</literal></expr>)</condition><block type="pseudo" pos:start="833:33" pos:end="833:57"><block_content pos:start="833:33" pos:end="833:57"> <expr_stmt pos:start="833:33" pos:end="833:57"><expr pos:start="833:33" pos:end="833:56"><name pos:start="833:33" pos:end="833:42"><name pos:start="833:33" pos:end="833:34">sl</name><operator pos:start="833:35" pos:end="833:36">-&gt;</operator><name pos:start="833:37" pos:end="833:42">qscale</name></name> <operator pos:start="833:44" pos:end="833:45">+=</operator> <name pos:start="833:47" pos:end="833:52">max_qp</name> <operator pos:start="833:54" pos:end="833:54">+</operator> <literal type="number" pos:start="833:56" pos:end="833:56">1</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="835:13" pos:end="835:55">else<block type="pseudo" pos:start="835:33" pos:end="835:55"><block_content pos:start="835:33" pos:end="835:55">                <expr_stmt pos:start="835:33" pos:end="835:55"><expr pos:start="835:33" pos:end="835:54"><name pos:start="835:33" pos:end="835:42"><name pos:start="835:33" pos:end="835:34">sl</name><operator pos:start="835:35" pos:end="835:36">-&gt;</operator><name pos:start="835:37" pos:end="835:42">qscale</name></name> <operator pos:start="835:44" pos:end="835:45">-=</operator> <name pos:start="835:47" pos:end="835:52">max_qp</name><operator pos:start="835:53" pos:end="835:53">+</operator><literal type="number" pos:start="835:54" pos:end="835:54">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="837:13" pos:end="843:13"><if pos:start="837:13" pos:end="843:13">if <condition pos:start="837:16" pos:end="837:48">(<expr pos:start="837:17" pos:end="837:47"><operator pos:start="837:17" pos:end="837:17">(</operator><operator pos:start="837:18" pos:end="837:18">(</operator><name pos:start="837:19" pos:end="837:26">unsigned</name><operator pos:start="837:27" pos:end="837:27">)</operator><name pos:start="837:28" pos:end="837:37"><name pos:start="837:28" pos:end="837:29">sl</name><operator pos:start="837:30" pos:end="837:31">-&gt;</operator><name pos:start="837:32" pos:end="837:37">qscale</name></name><operator pos:start="837:38" pos:end="837:38">)</operator> <operator pos:start="837:40" pos:end="837:40">&gt;</operator> <name pos:start="837:42" pos:end="837:47">max_qp</name></expr>)</condition><block pos:start="837:49" pos:end="843:13">{<block_content pos:start="839:17" pos:end="841:26">

                <expr_stmt pos:start="839:17" pos:end="839:114"><expr pos:start="839:17" pos:end="839:113"><call pos:start="839:17" pos:end="839:113"><name pos:start="839:17" pos:end="839:22">av_log</name><argument_list pos:start="839:23" pos:end="839:113">(<argument pos:start="839:24" pos:end="839:31"><expr pos:start="839:24" pos:end="839:31"><name pos:start="839:24" pos:end="839:31"><name pos:start="839:24" pos:end="839:24">h</name><operator pos:start="839:25" pos:end="839:26">-&gt;</operator><name pos:start="839:27" pos:end="839:31">avctx</name></name></expr></argument>, <argument pos:start="839:34" pos:end="839:45"><expr pos:start="839:34" pos:end="839:45"><name pos:start="839:34" pos:end="839:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="839:48" pos:end="839:84"><expr pos:start="839:48" pos:end="839:84"><literal type="string" pos:start="839:48" pos:end="839:84">"dquant out of range (%d) at %d %d\n"</literal></expr></argument>, <argument pos:start="839:87" pos:end="839:92"><expr pos:start="839:87" pos:end="839:92"><name pos:start="839:87" pos:end="839:92">dquant</name></expr></argument>, <argument pos:start="839:95" pos:end="839:102"><expr pos:start="839:95" pos:end="839:102"><name pos:start="839:95" pos:end="839:102"><name pos:start="839:95" pos:end="839:96">sl</name><operator pos:start="839:97" pos:end="839:98">-&gt;</operator><name pos:start="839:99" pos:end="839:102">mb_x</name></name></expr></argument>, <argument pos:start="839:105" pos:end="839:112"><expr pos:start="839:105" pos:end="839:112"><name pos:start="839:105" pos:end="839:112"><name pos:start="839:105" pos:end="839:106">sl</name><operator pos:start="839:107" pos:end="839:108">-&gt;</operator><name pos:start="839:109" pos:end="839:112">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="841:17" pos:end="841:26">return <expr pos:start="841:24" pos:end="841:25"><operator pos:start="841:24" pos:end="841:24">-</operator><literal type="number" pos:start="841:25" pos:end="841:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="849:9" pos:end="849:67"><expr pos:start="849:9" pos:end="849:66"><name pos:start="849:9" pos:end="849:24"><name pos:start="849:9" pos:end="849:10">sl</name><operator pos:start="849:11" pos:end="849:12">-&gt;</operator><name pos:start="849:13" pos:end="849:21">chroma_qp</name><index pos:start="849:22" pos:end="849:24">[<expr pos:start="849:23" pos:end="849:23"><literal type="number" pos:start="849:23" pos:end="849:23">0</literal></expr>]</index></name> <operator pos:start="849:26" pos:end="849:26">=</operator> <call pos:start="849:28" pos:end="849:66"><name pos:start="849:28" pos:end="849:40">get_chroma_qp</name><argument_list pos:start="849:41" pos:end="849:66">(<argument pos:start="849:42" pos:end="849:50"><expr pos:start="849:42" pos:end="849:50"><name pos:start="849:42" pos:end="849:50"><name pos:start="849:42" pos:end="849:42">h</name><operator pos:start="849:43" pos:end="849:44">-&gt;</operator><name pos:start="849:45" pos:end="849:46">ps</name><operator pos:start="849:47" pos:end="849:47">.</operator><name pos:start="849:48" pos:end="849:50">pps</name></name></expr></argument>, <argument pos:start="849:53" pos:end="849:53"><expr pos:start="849:53" pos:end="849:53"><literal type="number" pos:start="849:53" pos:end="849:53">0</literal></expr></argument>, <argument pos:start="849:56" pos:end="849:65"><expr pos:start="849:56" pos:end="849:65"><name pos:start="849:56" pos:end="849:65"><name pos:start="849:56" pos:end="849:57">sl</name><operator pos:start="849:58" pos:end="849:59">-&gt;</operator><name pos:start="849:60" pos:end="849:65">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="851:9" pos:end="851:67"><expr pos:start="851:9" pos:end="851:66"><name pos:start="851:9" pos:end="851:24"><name pos:start="851:9" pos:end="851:10">sl</name><operator pos:start="851:11" pos:end="851:12">-&gt;</operator><name pos:start="851:13" pos:end="851:21">chroma_qp</name><index pos:start="851:22" pos:end="851:24">[<expr pos:start="851:23" pos:end="851:23"><literal type="number" pos:start="851:23" pos:end="851:23">1</literal></expr>]</index></name> <operator pos:start="851:26" pos:end="851:26">=</operator> <call pos:start="851:28" pos:end="851:66"><name pos:start="851:28" pos:end="851:40">get_chroma_qp</name><argument_list pos:start="851:41" pos:end="851:66">(<argument pos:start="851:42" pos:end="851:50"><expr pos:start="851:42" pos:end="851:50"><name pos:start="851:42" pos:end="851:50"><name pos:start="851:42" pos:end="851:42">h</name><operator pos:start="851:43" pos:end="851:44">-&gt;</operator><name pos:start="851:45" pos:end="851:46">ps</name><operator pos:start="851:47" pos:end="851:47">.</operator><name pos:start="851:48" pos:end="851:50">pps</name></name></expr></argument>, <argument pos:start="851:53" pos:end="851:53"><expr pos:start="851:53" pos:end="851:53"><literal type="number" pos:start="851:53" pos:end="851:53">1</literal></expr></argument>, <argument pos:start="851:56" pos:end="851:65"><expr pos:start="851:56" pos:end="851:65"><name pos:start="851:56" pos:end="851:65"><name pos:start="851:56" pos:end="851:57">sl</name><operator pos:start="851:58" pos:end="851:59">-&gt;</operator><name pos:start="851:60" pos:end="851:65">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="855:9" pos:end="859:9"><if pos:start="855:9" pos:end="859:9">if <condition pos:start="855:12" pos:end="855:102">(<expr pos:start="855:13" pos:end="855:100"><operator pos:start="855:13" pos:end="855:13">(</operator><name pos:start="855:14" pos:end="855:16">ret</name> <operator pos:start="855:18" pos:end="855:18">=</operator> <call pos:start="855:20" pos:end="855:95"><name pos:start="855:20" pos:end="855:39">decode_luma_residual</name><argument_list pos:start="855:40" pos:end="855:95">(<argument pos:start="855:41" pos:end="855:41"><expr pos:start="855:41" pos:end="855:41"><name pos:start="855:41" pos:end="855:41">h</name></expr></argument>, <argument pos:start="855:44" pos:end="855:45"><expr pos:start="855:44" pos:end="855:45"><name pos:start="855:44" pos:end="855:45">sl</name></expr></argument>, <argument pos:start="855:48" pos:end="855:49"><expr pos:start="855:48" pos:end="855:49"><name pos:start="855:48" pos:end="855:49">gb</name></expr></argument>, <argument pos:start="855:52" pos:end="855:55"><expr pos:start="855:52" pos:end="855:55"><name pos:start="855:52" pos:end="855:55">scan</name></expr></argument>, <argument pos:start="855:58" pos:end="855:64"><expr pos:start="855:58" pos:end="855:64"><name pos:start="855:58" pos:end="855:64">scan8x8</name></expr></argument>, <argument pos:start="855:67" pos:end="855:77"><expr pos:start="855:67" pos:end="855:77"><name pos:start="855:67" pos:end="855:77">pixel_shift</name></expr></argument>, <argument pos:start="855:80" pos:end="855:86"><expr pos:start="855:80" pos:end="855:86"><name pos:start="855:80" pos:end="855:86">mb_type</name></expr></argument>, <argument pos:start="855:89" pos:end="855:91"><expr pos:start="855:89" pos:end="855:91"><name pos:start="855:89" pos:end="855:91">cbp</name></expr></argument>, <argument pos:start="855:94" pos:end="855:94"><expr pos:start="855:94" pos:end="855:94"><literal type="number" pos:start="855:94" pos:end="855:94">0</literal></expr></argument>)</argument_list></call><operator pos:start="855:96" pos:end="855:96">)</operator> <operator pos:start="855:98" pos:end="855:98">&lt;</operator> <literal type="number" pos:start="855:100" pos:end="855:100">0</literal></expr> )</condition> <block pos:start="855:104" pos:end="859:9">{<block_content pos:start="857:13" pos:end="857:22">

            <return pos:start="857:13" pos:end="857:22">return <expr pos:start="857:20" pos:end="857:21"><operator pos:start="857:20" pos:end="857:20">-</operator><literal type="number" pos:start="857:21" pos:end="857:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="861:9" pos:end="861:41"><expr pos:start="861:9" pos:end="861:40"><name pos:start="861:9" pos:end="861:27"><name pos:start="861:9" pos:end="861:9">h</name><operator pos:start="861:10" pos:end="861:11">-&gt;</operator><name pos:start="861:12" pos:end="861:20">cbp_table</name><index pos:start="861:21" pos:end="861:27">[<expr pos:start="861:22" pos:end="861:26"><name pos:start="861:22" pos:end="861:26">mb_xy</name></expr>]</index></name> <operator pos:start="861:29" pos:end="861:30">|=</operator> <name pos:start="861:32" pos:end="861:34">ret</name> <operator pos:start="861:36" pos:end="861:37">&lt;&lt;</operator> <literal type="number" pos:start="861:39" pos:end="861:40">12</literal></expr>;</expr_stmt>

        <if_stmt pos:start="863:9" pos:end="937:9"><if pos:start="863:9" pos:end="877:9">if <condition pos:start="863:12" pos:end="863:25">(<expr pos:start="863:13" pos:end="863:24"><call pos:start="863:13" pos:end="863:24"><name pos:start="863:13" pos:end="863:21">CHROMA444</name><argument_list pos:start="863:22" pos:end="863:24">(<argument pos:start="863:23" pos:end="863:23"><expr pos:start="863:23" pos:end="863:23"><name pos:start="863:23" pos:end="863:23">h</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="863:27" pos:end="877:9">{<block_content pos:start="865:13" pos:end="875:13">

            <if_stmt pos:start="865:13" pos:end="869:13"><if pos:start="865:13" pos:end="869:13">if <condition pos:start="865:16" pos:end="865:98">(<expr pos:start="865:17" pos:end="865:96"><call pos:start="865:17" pos:end="865:92"><name pos:start="865:17" pos:end="865:36">decode_luma_residual</name><argument_list pos:start="865:37" pos:end="865:92">(<argument pos:start="865:38" pos:end="865:38"><expr pos:start="865:38" pos:end="865:38"><name pos:start="865:38" pos:end="865:38">h</name></expr></argument>, <argument pos:start="865:41" pos:end="865:42"><expr pos:start="865:41" pos:end="865:42"><name pos:start="865:41" pos:end="865:42">sl</name></expr></argument>, <argument pos:start="865:45" pos:end="865:46"><expr pos:start="865:45" pos:end="865:46"><name pos:start="865:45" pos:end="865:46">gb</name></expr></argument>, <argument pos:start="865:49" pos:end="865:52"><expr pos:start="865:49" pos:end="865:52"><name pos:start="865:49" pos:end="865:52">scan</name></expr></argument>, <argument pos:start="865:55" pos:end="865:61"><expr pos:start="865:55" pos:end="865:61"><name pos:start="865:55" pos:end="865:61">scan8x8</name></expr></argument>, <argument pos:start="865:64" pos:end="865:74"><expr pos:start="865:64" pos:end="865:74"><name pos:start="865:64" pos:end="865:74">pixel_shift</name></expr></argument>, <argument pos:start="865:77" pos:end="865:83"><expr pos:start="865:77" pos:end="865:83"><name pos:start="865:77" pos:end="865:83">mb_type</name></expr></argument>, <argument pos:start="865:86" pos:end="865:88"><expr pos:start="865:86" pos:end="865:88"><name pos:start="865:86" pos:end="865:88">cbp</name></expr></argument>, <argument pos:start="865:91" pos:end="865:91"><expr pos:start="865:91" pos:end="865:91"><literal type="number" pos:start="865:91" pos:end="865:91">1</literal></expr></argument>)</argument_list></call> <operator pos:start="865:94" pos:end="865:94">&lt;</operator> <literal type="number" pos:start="865:96" pos:end="865:96">0</literal></expr> )</condition> <block pos:start="865:100" pos:end="869:13">{<block_content pos:start="867:17" pos:end="867:26">

                <return pos:start="867:17" pos:end="867:26">return <expr pos:start="867:24" pos:end="867:25"><operator pos:start="867:24" pos:end="867:24">-</operator><literal type="number" pos:start="867:25" pos:end="867:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="871:13" pos:end="875:13"><if pos:start="871:13" pos:end="875:13">if <condition pos:start="871:16" pos:end="871:98">(<expr pos:start="871:17" pos:end="871:96"><call pos:start="871:17" pos:end="871:92"><name pos:start="871:17" pos:end="871:36">decode_luma_residual</name><argument_list pos:start="871:37" pos:end="871:92">(<argument pos:start="871:38" pos:end="871:38"><expr pos:start="871:38" pos:end="871:38"><name pos:start="871:38" pos:end="871:38">h</name></expr></argument>, <argument pos:start="871:41" pos:end="871:42"><expr pos:start="871:41" pos:end="871:42"><name pos:start="871:41" pos:end="871:42">sl</name></expr></argument>, <argument pos:start="871:45" pos:end="871:46"><expr pos:start="871:45" pos:end="871:46"><name pos:start="871:45" pos:end="871:46">gb</name></expr></argument>, <argument pos:start="871:49" pos:end="871:52"><expr pos:start="871:49" pos:end="871:52"><name pos:start="871:49" pos:end="871:52">scan</name></expr></argument>, <argument pos:start="871:55" pos:end="871:61"><expr pos:start="871:55" pos:end="871:61"><name pos:start="871:55" pos:end="871:61">scan8x8</name></expr></argument>, <argument pos:start="871:64" pos:end="871:74"><expr pos:start="871:64" pos:end="871:74"><name pos:start="871:64" pos:end="871:74">pixel_shift</name></expr></argument>, <argument pos:start="871:77" pos:end="871:83"><expr pos:start="871:77" pos:end="871:83"><name pos:start="871:77" pos:end="871:83">mb_type</name></expr></argument>, <argument pos:start="871:86" pos:end="871:88"><expr pos:start="871:86" pos:end="871:88"><name pos:start="871:86" pos:end="871:88">cbp</name></expr></argument>, <argument pos:start="871:91" pos:end="871:91"><expr pos:start="871:91" pos:end="871:91"><literal type="number" pos:start="871:91" pos:end="871:91">2</literal></expr></argument>)</argument_list></call> <operator pos:start="871:94" pos:end="871:94">&lt;</operator> <literal type="number" pos:start="871:96" pos:end="871:96">0</literal></expr> )</condition> <block pos:start="871:100" pos:end="875:13">{<block_content pos:start="873:17" pos:end="873:26">

                <return pos:start="873:17" pos:end="873:26">return <expr pos:start="873:24" pos:end="873:25"><operator pos:start="873:24" pos:end="873:24">-</operator><literal type="number" pos:start="873:25" pos:end="873:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="877:11" pos:end="937:9">else <block pos:start="877:16" pos:end="937:9">{<block_content pos:start="879:13" pos:end="935:13">

            <decl_stmt pos:start="879:13" pos:end="879:62"><decl pos:start="879:13" pos:end="879:61"><type pos:start="879:13" pos:end="879:21"><specifier pos:start="879:13" pos:end="879:17">const</specifier> <name pos:start="879:19" pos:end="879:21">int</name></type> <name pos:start="879:23" pos:end="879:30">num_c8x8</name> <init pos:start="879:32" pos:end="879:61">= <expr pos:start="879:34" pos:end="879:61"><name pos:start="879:34" pos:end="879:61"><name pos:start="879:34" pos:end="879:34">h</name><operator pos:start="879:35" pos:end="879:36">-&gt;</operator><name pos:start="879:37" pos:end="879:38">ps</name><operator pos:start="879:39" pos:end="879:39">.</operator><name pos:start="879:40" pos:end="879:42">sps</name><operator pos:start="879:43" pos:end="879:44">-&gt;</operator><name pos:start="879:45" pos:end="879:61">chroma_format_idc</name></name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="883:13" pos:end="899:13"><if pos:start="883:13" pos:end="899:13">if<condition pos:start="883:15" pos:end="883:24">(<expr pos:start="883:16" pos:end="883:23"><name pos:start="883:16" pos:end="883:18">cbp</name><operator pos:start="883:19" pos:end="883:19">&amp;</operator><literal type="number" pos:start="883:20" pos:end="883:23">0x30</literal></expr>)</condition><block pos:start="883:25" pos:end="899:13">{<block_content pos:start="885:17" pos:end="897:21">

                <for pos:start="885:17" pos:end="897:21">for<control pos:start="885:20" pos:end="885:61">(<init pos:start="885:21" pos:end="885:33"><expr pos:start="885:21" pos:end="885:32"><name pos:start="885:21" pos:end="885:30">chroma_idx</name><operator pos:start="885:31" pos:end="885:31">=</operator><literal type="number" pos:start="885:32" pos:end="885:32">0</literal></expr>;</init> <condition pos:start="885:35" pos:end="885:47"><expr pos:start="885:35" pos:end="885:46"><name pos:start="885:35" pos:end="885:44">chroma_idx</name><operator pos:start="885:45" pos:end="885:45">&lt;</operator><literal type="number" pos:start="885:46" pos:end="885:46">2</literal></expr>;</condition> <incr pos:start="885:49" pos:end="885:60"><expr pos:start="885:49" pos:end="885:60"><name pos:start="885:49" pos:end="885:58">chroma_idx</name><operator pos:start="885:59" pos:end="885:60">++</operator></expr></incr>)</control><block type="pseudo" pos:start="887:21" pos:end="897:21"><block_content pos:start="887:21" pos:end="897:21">

                    <if_stmt pos:start="887:21" pos:end="897:21"><if pos:start="887:21" pos:end="897:21">if <condition pos:start="887:24" pos:end="893:64">(<expr pos:start="887:25" pos:end="893:63"><call pos:start="887:25" pos:end="893:59"><name pos:start="887:25" pos:end="887:39">decode_residual</name><argument_list pos:start="887:40" pos:end="893:59">(<argument pos:start="887:41" pos:end="887:41"><expr pos:start="887:41" pos:end="887:41"><name pos:start="887:41" pos:end="887:41">h</name></expr></argument>, <argument pos:start="887:44" pos:end="887:45"><expr pos:start="887:44" pos:end="887:45"><name pos:start="887:44" pos:end="887:45">sl</name></expr></argument>, <argument pos:start="887:48" pos:end="887:49"><expr pos:start="887:48" pos:end="887:49"><name pos:start="887:48" pos:end="887:49">gb</name></expr></argument>, <argument pos:start="887:52" pos:end="887:101"><expr pos:start="887:52" pos:end="887:101"><name pos:start="887:52" pos:end="887:57"><name pos:start="887:52" pos:end="887:53">sl</name><operator pos:start="887:54" pos:end="887:55">-&gt;</operator><name pos:start="887:56" pos:end="887:57">mb</name></name> <operator pos:start="887:59" pos:end="887:59">+</operator> <operator pos:start="887:61" pos:end="887:61">(</operator><operator pos:start="887:62" pos:end="887:62">(</operator><literal type="number" pos:start="887:63" pos:end="887:67">256</literal> <operator pos:start="887:67" pos:end="887:67">+</operator> <literal type="number" pos:start="887:69" pos:end="887:70">16</literal><operator pos:start="887:71" pos:end="887:71">*</operator><literal type="number" pos:start="887:72" pos:end="887:73">16</literal><operator pos:start="887:74" pos:end="887:74">*</operator><name pos:start="887:75" pos:end="887:84">chroma_idx</name><operator pos:start="887:85" pos:end="887:85">)</operator> <operator pos:start="887:87" pos:end="887:88">&lt;&lt;</operator> <name pos:start="887:90" pos:end="887:100">pixel_shift</name><operator pos:start="887:101" pos:end="887:101">)</operator></expr></argument>,

                                        <argument pos:start="889:41" pos:end="889:74"><expr pos:start="889:41" pos:end="889:74"><name pos:start="889:41" pos:end="889:61">CHROMA_DC_BLOCK_INDEX</name> <operator pos:start="889:63" pos:end="889:63">+</operator> <name pos:start="889:65" pos:end="889:74">chroma_idx</name></expr></argument>,

                                        <argument pos:start="891:41" pos:end="891:105"><expr pos:start="891:41" pos:end="891:105"><ternary pos:start="891:41" pos:end="891:105"><condition pos:start="891:41" pos:end="891:54"><expr pos:start="891:41" pos:end="891:52"><call pos:start="891:41" pos:end="891:52"><name pos:start="891:41" pos:end="891:49">CHROMA422</name><argument_list pos:start="891:50" pos:end="891:52">(<argument pos:start="891:51" pos:end="891:51"><expr pos:start="891:51" pos:end="891:51"><name pos:start="891:51" pos:end="891:51">h</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="891:56" pos:end="891:80"> <expr pos:start="891:56" pos:end="891:80"><name pos:start="891:56" pos:end="891:80">ff_h264_chroma422_dc_scan</name></expr> </then><else pos:start="891:82" pos:end="891:105">: <expr pos:start="891:84" pos:end="891:105"><name pos:start="891:84" pos:end="891:105">ff_h264_chroma_dc_scan</name></expr></else></ternary></expr></argument>,

                                        <argument pos:start="893:41" pos:end="893:44"><expr pos:start="893:41" pos:end="893:44"><name pos:start="893:41" pos:end="893:44">NULL</name></expr></argument>, <argument pos:start="893:47" pos:end="893:58"><expr pos:start="893:47" pos:end="893:58"><literal type="number" pos:start="893:47" pos:end="893:47">4</literal> <operator pos:start="893:49" pos:end="893:49">*</operator> <name pos:start="893:51" pos:end="893:58">num_c8x8</name></expr></argument>)</argument_list></call> <operator pos:start="893:61" pos:end="893:61">&lt;</operator> <literal type="number" pos:start="893:63" pos:end="893:63">0</literal></expr>)</condition> <block pos:start="893:66" pos:end="897:21">{<block_content pos:start="895:25" pos:end="895:34">

                        <return pos:start="895:25" pos:end="895:34">return <expr pos:start="895:32" pos:end="895:33"><operator pos:start="895:32" pos:end="895:32">-</operator><literal type="number" pos:start="895:33" pos:end="895:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt></block_content></block></for>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="903:13" pos:end="935:13"><if pos:start="903:13" pos:end="929:13">if<condition pos:start="903:15" pos:end="903:24">(<expr pos:start="903:16" pos:end="903:23"><name pos:start="903:16" pos:end="903:18">cbp</name><operator pos:start="903:19" pos:end="903:19">&amp;</operator><literal type="number" pos:start="903:20" pos:end="903:23">0x20</literal></expr>)</condition><block pos:start="903:25" pos:end="929:13">{<block_content pos:start="905:17" pos:end="927:17">

                <for pos:start="905:17" pos:end="927:17">for<control pos:start="905:20" pos:end="905:61">(<init pos:start="905:21" pos:end="905:33"><expr pos:start="905:21" pos:end="905:32"><name pos:start="905:21" pos:end="905:30">chroma_idx</name><operator pos:start="905:31" pos:end="905:31">=</operator><literal type="number" pos:start="905:32" pos:end="905:32">0</literal></expr>;</init> <condition pos:start="905:35" pos:end="905:47"><expr pos:start="905:35" pos:end="905:46"><name pos:start="905:35" pos:end="905:44">chroma_idx</name><operator pos:start="905:45" pos:end="905:45">&lt;</operator><literal type="number" pos:start="905:46" pos:end="905:46">2</literal></expr>;</condition> <incr pos:start="905:49" pos:end="905:60"><expr pos:start="905:49" pos:end="905:60"><name pos:start="905:49" pos:end="905:58">chroma_idx</name><operator pos:start="905:59" pos:end="905:60">++</operator></expr></incr>)</control><block pos:start="905:62" pos:end="927:17">{<block_content pos:start="907:21" pos:end="925:21">

                    <decl_stmt pos:start="907:21" pos:end="907:138"><decl pos:start="907:21" pos:end="907:137"><type pos:start="907:21" pos:end="907:36"><specifier pos:start="907:21" pos:end="907:25">const</specifier> <name pos:start="907:27" pos:end="907:34">uint32_t</name> <modifier pos:start="907:36" pos:end="907:36">*</modifier></type><name pos:start="907:37" pos:end="907:40">qmul</name> <init pos:start="907:42" pos:end="907:137">= <expr pos:start="907:44" pos:end="907:137"><name pos:start="907:44" pos:end="907:137"><name pos:start="907:44" pos:end="907:44">h</name><operator pos:start="907:45" pos:end="907:46">-&gt;</operator><name pos:start="907:47" pos:end="907:48">ps</name><operator pos:start="907:49" pos:end="907:49">.</operator><name pos:start="907:50" pos:end="907:52">pps</name><operator pos:start="907:53" pos:end="907:54">-&gt;</operator><name pos:start="907:55" pos:end="907:68">dequant4_coeff</name><index pos:start="907:69" pos:end="907:110">[<expr pos:start="907:70" pos:end="907:109"><name pos:start="907:70" pos:end="907:79">chroma_idx</name><operator pos:start="907:80" pos:end="907:80">+</operator><literal type="number" pos:start="907:81" pos:end="907:82">1</literal><operator pos:start="907:82" pos:end="907:82">+</operator><operator pos:start="907:83" pos:end="907:83">(</operator><ternary pos:start="907:84" pos:end="907:108"><condition pos:start="907:84" pos:end="907:104"><expr pos:start="907:84" pos:end="907:102"><call pos:start="907:84" pos:end="907:102"><name pos:start="907:84" pos:end="907:91">IS_INTRA</name><argument_list pos:start="907:92" pos:end="907:102">( <argument pos:start="907:94" pos:end="907:100"><expr pos:start="907:94" pos:end="907:100"><name pos:start="907:94" pos:end="907:100">mb_type</name></expr></argument> )</argument_list></call></expr> ?</condition><then pos:start="907:106" pos:end="907:106"> <expr pos:start="907:106" pos:end="907:106"><literal type="number" pos:start="907:106" pos:end="907:106">0</literal></expr></then><else pos:start="907:107" pos:end="907:108">:<expr pos:start="907:108" pos:end="907:108"><literal type="number" pos:start="907:108" pos:end="907:108">3</literal></expr></else></ternary><operator pos:start="907:109" pos:end="907:109">)</operator></expr>]</index><index pos:start="907:111" pos:end="907:137">[<expr pos:start="907:112" pos:end="907:136"><name pos:start="907:112" pos:end="907:136"><name pos:start="907:112" pos:end="907:113">sl</name><operator pos:start="907:114" pos:end="907:115">-&gt;</operator><name pos:start="907:116" pos:end="907:124">chroma_qp</name><index pos:start="907:125" pos:end="907:136">[<expr pos:start="907:126" pos:end="907:135"><name pos:start="907:126" pos:end="907:135">chroma_idx</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="909:21" pos:end="909:84"><decl pos:start="909:21" pos:end="909:83"><type pos:start="909:21" pos:end="909:29"><name pos:start="909:21" pos:end="909:27">int16_t</name> <modifier pos:start="909:29" pos:end="909:29">*</modifier></type><name pos:start="909:30" pos:end="909:31">mb</name> <init pos:start="909:33" pos:end="909:83">= <expr pos:start="909:35" pos:end="909:83"><name pos:start="909:35" pos:end="909:40"><name pos:start="909:35" pos:end="909:36">sl</name><operator pos:start="909:37" pos:end="909:38">-&gt;</operator><name pos:start="909:39" pos:end="909:40">mb</name></name> <operator pos:start="909:42" pos:end="909:42">+</operator> <operator pos:start="909:44" pos:end="909:44">(</operator><literal type="number" pos:start="909:45" pos:end="909:46">16</literal><operator pos:start="909:47" pos:end="909:47">*</operator><operator pos:start="909:48" pos:end="909:48">(</operator><literal type="number" pos:start="909:49" pos:end="909:52">16</literal> <operator pos:start="909:52" pos:end="909:52">+</operator> <literal type="number" pos:start="909:54" pos:end="909:55">16</literal><operator pos:start="909:56" pos:end="909:56">*</operator><name pos:start="909:57" pos:end="909:66">chroma_idx</name><operator pos:start="909:67" pos:end="909:67">)</operator> <operator pos:start="909:69" pos:end="909:70">&lt;&lt;</operator> <name pos:start="909:72" pos:end="909:82">pixel_shift</name><operator pos:start="909:83" pos:end="909:83">)</operator></expr></init></decl>;</decl_stmt>

                    <for pos:start="911:21" pos:end="925:21">for <control pos:start="911:25" pos:end="911:57">(<init pos:start="911:26" pos:end="911:34"><expr pos:start="911:26" pos:end="911:33"><name pos:start="911:26" pos:end="911:29">i8x8</name> <operator pos:start="911:31" pos:end="911:31">=</operator> <literal type="number" pos:start="911:33" pos:end="911:33">0</literal></expr>;</init> <condition pos:start="911:36" pos:end="911:49"><expr pos:start="911:36" pos:end="911:48"><name pos:start="911:36" pos:end="911:39">i8x8</name><operator pos:start="911:40" pos:end="911:40">&lt;</operator><name pos:start="911:41" pos:end="911:48">num_c8x8</name></expr>;</condition> <incr pos:start="911:51" pos:end="911:56"><expr pos:start="911:51" pos:end="911:56"><name pos:start="911:51" pos:end="911:54">i8x8</name><operator pos:start="911:55" pos:end="911:56">++</operator></expr></incr>)</control> <block pos:start="911:59" pos:end="925:21">{<block_content pos:start="913:25" pos:end="923:25">

                        <for pos:start="913:25" pos:end="923:25">for <control pos:start="913:29" pos:end="913:56">(<init pos:start="913:30" pos:end="913:38"><expr pos:start="913:30" pos:end="913:37"><name pos:start="913:30" pos:end="913:33">i4x4</name> <operator pos:start="913:35" pos:end="913:35">=</operator> <literal type="number" pos:start="913:37" pos:end="913:37">0</literal></expr>;</init> <condition pos:start="913:40" pos:end="913:48"><expr pos:start="913:40" pos:end="913:47"><name pos:start="913:40" pos:end="913:43">i4x4</name> <operator pos:start="913:45" pos:end="913:45">&lt;</operator> <literal type="number" pos:start="913:47" pos:end="913:47">4</literal></expr>;</condition> <incr pos:start="913:50" pos:end="913:55"><expr pos:start="913:50" pos:end="913:55"><name pos:start="913:50" pos:end="913:53">i4x4</name><operator pos:start="913:54" pos:end="913:55">++</operator></expr></incr>)</control> <block pos:start="913:58" pos:end="923:25">{<block_content pos:start="915:29" pos:end="921:52">

                            <decl_stmt pos:start="915:29" pos:end="915:81"><decl pos:start="915:29" pos:end="915:80"><type pos:start="915:29" pos:end="915:37"><specifier pos:start="915:29" pos:end="915:33">const</specifier> <name pos:start="915:35" pos:end="915:37">int</name></type> <name pos:start="915:39" pos:end="915:43">index</name> <init pos:start="915:45" pos:end="915:80">= <expr pos:start="915:47" pos:end="915:80"><literal type="number" pos:start="915:47" pos:end="915:50">16</literal> <operator pos:start="915:50" pos:end="915:50">+</operator> <literal type="number" pos:start="915:52" pos:end="915:53">16</literal><operator pos:start="915:54" pos:end="915:54">*</operator><name pos:start="915:55" pos:end="915:64">chroma_idx</name> <operator pos:start="915:66" pos:end="915:66">+</operator> <literal type="number" pos:start="915:68" pos:end="915:68">8</literal><operator pos:start="915:69" pos:end="915:69">*</operator><name pos:start="915:70" pos:end="915:73">i8x8</name> <operator pos:start="915:75" pos:end="915:75">+</operator> <name pos:start="915:77" pos:end="915:80">i4x4</name></expr></init></decl>;</decl_stmt>

                            <if_stmt pos:start="917:29" pos:end="919:42"><if pos:start="917:29" pos:end="919:42">if <condition pos:start="917:32" pos:end="917:94">(<expr pos:start="917:33" pos:end="917:93"><call pos:start="917:33" pos:end="917:89"><name pos:start="917:33" pos:end="917:47">decode_residual</name><argument_list pos:start="917:48" pos:end="917:89">(<argument pos:start="917:49" pos:end="917:49"><expr pos:start="917:49" pos:end="917:49"><name pos:start="917:49" pos:end="917:49">h</name></expr></argument>, <argument pos:start="917:52" pos:end="917:53"><expr pos:start="917:52" pos:end="917:53"><name pos:start="917:52" pos:end="917:53">sl</name></expr></argument>, <argument pos:start="917:56" pos:end="917:57"><expr pos:start="917:56" pos:end="917:57"><name pos:start="917:56" pos:end="917:57">gb</name></expr></argument>, <argument pos:start="917:60" pos:end="917:61"><expr pos:start="917:60" pos:end="917:61"><name pos:start="917:60" pos:end="917:61">mb</name></expr></argument>, <argument pos:start="917:64" pos:end="917:68"><expr pos:start="917:64" pos:end="917:68"><name pos:start="917:64" pos:end="917:68">index</name></expr></argument>, <argument pos:start="917:71" pos:end="917:78"><expr pos:start="917:71" pos:end="917:78"><name pos:start="917:71" pos:end="917:74">scan</name> <operator pos:start="917:76" pos:end="917:76">+</operator> <literal type="number" pos:start="917:78" pos:end="917:78">1</literal></expr></argument>, <argument pos:start="917:81" pos:end="917:84"><expr pos:start="917:81" pos:end="917:84"><name pos:start="917:81" pos:end="917:84">qmul</name></expr></argument>, <argument pos:start="917:87" pos:end="917:88"><expr pos:start="917:87" pos:end="917:88"><literal type="number" pos:start="917:87" pos:end="917:88">15</literal></expr></argument>)</argument_list></call> <operator pos:start="917:91" pos:end="917:91">&lt;</operator> <literal type="number" pos:start="917:93" pos:end="917:93">0</literal></expr>)</condition><block type="pseudo" pos:start="919:33" pos:end="919:42"><block_content pos:start="919:33" pos:end="919:42">

                                <return pos:start="919:33" pos:end="919:42">return <expr pos:start="919:40" pos:end="919:41"><operator pos:start="919:40" pos:end="919:40">-</operator><literal type="number" pos:start="919:41" pos:end="919:41">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="921:29" pos:end="921:52"><expr pos:start="921:29" pos:end="921:51"><name pos:start="921:29" pos:end="921:30">mb</name> <operator pos:start="921:32" pos:end="921:33">+=</operator> <literal type="number" pos:start="921:35" pos:end="921:36">16</literal> <operator pos:start="921:38" pos:end="921:39">&lt;&lt;</operator> <name pos:start="921:41" pos:end="921:51">pixel_shift</name></expr>;</expr_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></for>

                </block_content>}</block></for>

            </block_content>}</block></if><else pos:start="929:14" pos:end="935:13">else<block pos:start="929:18" pos:end="935:13">{<block_content pos:start="931:17" pos:end="933:84">

                <expr_stmt pos:start="931:17" pos:end="931:84"><expr pos:start="931:17" pos:end="931:83"><call pos:start="931:17" pos:end="931:83"><name pos:start="931:17" pos:end="931:30">fill_rectangle</name><argument_list pos:start="931:31" pos:end="931:83">(<argument pos:start="931:32" pos:end="931:67"><expr pos:start="931:32" pos:end="931:67"><operator pos:start="931:32" pos:end="931:32">&amp;</operator><name pos:start="931:33" pos:end="931:67"><name pos:start="931:33" pos:end="931:34">sl</name><operator pos:start="931:35" pos:end="931:36">-&gt;</operator><name pos:start="931:37" pos:end="931:56">non_zero_count_cache</name><index pos:start="931:57" pos:end="931:67">[<expr pos:start="931:58" pos:end="931:66"><name pos:start="931:58" pos:end="931:66"><name pos:start="931:58" pos:end="931:62">scan8</name><index pos:start="931:63" pos:end="931:66">[<expr pos:start="931:64" pos:end="931:65"><literal type="number" pos:start="931:64" pos:end="931:65">16</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="931:70" pos:end="931:70"><expr pos:start="931:70" pos:end="931:70"><literal type="number" pos:start="931:70" pos:end="931:70">4</literal></expr></argument>, <argument pos:start="931:73" pos:end="931:73"><expr pos:start="931:73" pos:end="931:73"><literal type="number" pos:start="931:73" pos:end="931:73">4</literal></expr></argument>, <argument pos:start="931:76" pos:end="931:76"><expr pos:start="931:76" pos:end="931:76"><literal type="number" pos:start="931:76" pos:end="931:76">8</literal></expr></argument>, <argument pos:start="931:79" pos:end="931:79"><expr pos:start="931:79" pos:end="931:79"><literal type="number" pos:start="931:79" pos:end="931:79">0</literal></expr></argument>, <argument pos:start="931:82" pos:end="931:82"><expr pos:start="931:82" pos:end="931:82"><literal type="number" pos:start="931:82" pos:end="931:82">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="933:17" pos:end="933:84"><expr pos:start="933:17" pos:end="933:83"><call pos:start="933:17" pos:end="933:83"><name pos:start="933:17" pos:end="933:30">fill_rectangle</name><argument_list pos:start="933:31" pos:end="933:83">(<argument pos:start="933:32" pos:end="933:67"><expr pos:start="933:32" pos:end="933:67"><operator pos:start="933:32" pos:end="933:32">&amp;</operator><name pos:start="933:33" pos:end="933:67"><name pos:start="933:33" pos:end="933:34">sl</name><operator pos:start="933:35" pos:end="933:36">-&gt;</operator><name pos:start="933:37" pos:end="933:56">non_zero_count_cache</name><index pos:start="933:57" pos:end="933:67">[<expr pos:start="933:58" pos:end="933:66"><name pos:start="933:58" pos:end="933:66"><name pos:start="933:58" pos:end="933:62">scan8</name><index pos:start="933:63" pos:end="933:66">[<expr pos:start="933:64" pos:end="933:65"><literal type="number" pos:start="933:64" pos:end="933:65">32</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="933:70" pos:end="933:70"><expr pos:start="933:70" pos:end="933:70"><literal type="number" pos:start="933:70" pos:end="933:70">4</literal></expr></argument>, <argument pos:start="933:73" pos:end="933:73"><expr pos:start="933:73" pos:end="933:73"><literal type="number" pos:start="933:73" pos:end="933:73">4</literal></expr></argument>, <argument pos:start="933:76" pos:end="933:76"><expr pos:start="933:76" pos:end="933:76"><literal type="number" pos:start="933:76" pos:end="933:76">8</literal></expr></argument>, <argument pos:start="933:79" pos:end="933:79"><expr pos:start="933:79" pos:end="933:79"><literal type="number" pos:start="933:79" pos:end="933:79">0</literal></expr></argument>, <argument pos:start="933:82" pos:end="933:82"><expr pos:start="933:82" pos:end="933:82"><literal type="number" pos:start="933:82" pos:end="933:82">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if><else pos:start="939:6" pos:end="947:5">else<block pos:start="939:10" pos:end="947:5">{<block_content pos:start="941:9" pos:end="945:76">

        <expr_stmt pos:start="941:9" pos:end="941:76"><expr pos:start="941:9" pos:end="941:75"><call pos:start="941:9" pos:end="941:75"><name pos:start="941:9" pos:end="941:22">fill_rectangle</name><argument_list pos:start="941:23" pos:end="941:75">(<argument pos:start="941:24" pos:end="941:59"><expr pos:start="941:24" pos:end="941:59"><operator pos:start="941:24" pos:end="941:24">&amp;</operator><name pos:start="941:25" pos:end="941:59"><name pos:start="941:25" pos:end="941:26">sl</name><operator pos:start="941:27" pos:end="941:28">-&gt;</operator><name pos:start="941:29" pos:end="941:48">non_zero_count_cache</name><index pos:start="941:49" pos:end="941:59">[<expr pos:start="941:50" pos:end="941:58"><name pos:start="941:50" pos:end="941:58"><name pos:start="941:50" pos:end="941:54">scan8</name><index pos:start="941:55" pos:end="941:58">[ <expr pos:start="941:57" pos:end="941:57"><literal type="number" pos:start="941:57" pos:end="941:57">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="941:62" pos:end="941:62"><expr pos:start="941:62" pos:end="941:62"><literal type="number" pos:start="941:62" pos:end="941:62">4</literal></expr></argument>, <argument pos:start="941:65" pos:end="941:65"><expr pos:start="941:65" pos:end="941:65"><literal type="number" pos:start="941:65" pos:end="941:65">4</literal></expr></argument>, <argument pos:start="941:68" pos:end="941:68"><expr pos:start="941:68" pos:end="941:68"><literal type="number" pos:start="941:68" pos:end="941:68">8</literal></expr></argument>, <argument pos:start="941:71" pos:end="941:71"><expr pos:start="941:71" pos:end="941:71"><literal type="number" pos:start="941:71" pos:end="941:71">0</literal></expr></argument>, <argument pos:start="941:74" pos:end="941:74"><expr pos:start="941:74" pos:end="941:74"><literal type="number" pos:start="941:74" pos:end="941:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="943:9" pos:end="943:76"><expr pos:start="943:9" pos:end="943:75"><call pos:start="943:9" pos:end="943:75"><name pos:start="943:9" pos:end="943:22">fill_rectangle</name><argument_list pos:start="943:23" pos:end="943:75">(<argument pos:start="943:24" pos:end="943:59"><expr pos:start="943:24" pos:end="943:59"><operator pos:start="943:24" pos:end="943:24">&amp;</operator><name pos:start="943:25" pos:end="943:59"><name pos:start="943:25" pos:end="943:26">sl</name><operator pos:start="943:27" pos:end="943:28">-&gt;</operator><name pos:start="943:29" pos:end="943:48">non_zero_count_cache</name><index pos:start="943:49" pos:end="943:59">[<expr pos:start="943:50" pos:end="943:58"><name pos:start="943:50" pos:end="943:58"><name pos:start="943:50" pos:end="943:54">scan8</name><index pos:start="943:55" pos:end="943:58">[<expr pos:start="943:56" pos:end="943:57"><literal type="number" pos:start="943:56" pos:end="943:57">16</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="943:62" pos:end="943:62"><expr pos:start="943:62" pos:end="943:62"><literal type="number" pos:start="943:62" pos:end="943:62">4</literal></expr></argument>, <argument pos:start="943:65" pos:end="943:65"><expr pos:start="943:65" pos:end="943:65"><literal type="number" pos:start="943:65" pos:end="943:65">4</literal></expr></argument>, <argument pos:start="943:68" pos:end="943:68"><expr pos:start="943:68" pos:end="943:68"><literal type="number" pos:start="943:68" pos:end="943:68">8</literal></expr></argument>, <argument pos:start="943:71" pos:end="943:71"><expr pos:start="943:71" pos:end="943:71"><literal type="number" pos:start="943:71" pos:end="943:71">0</literal></expr></argument>, <argument pos:start="943:74" pos:end="943:74"><expr pos:start="943:74" pos:end="943:74"><literal type="number" pos:start="943:74" pos:end="943:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="945:9" pos:end="945:76"><expr pos:start="945:9" pos:end="945:75"><call pos:start="945:9" pos:end="945:75"><name pos:start="945:9" pos:end="945:22">fill_rectangle</name><argument_list pos:start="945:23" pos:end="945:75">(<argument pos:start="945:24" pos:end="945:59"><expr pos:start="945:24" pos:end="945:59"><operator pos:start="945:24" pos:end="945:24">&amp;</operator><name pos:start="945:25" pos:end="945:59"><name pos:start="945:25" pos:end="945:26">sl</name><operator pos:start="945:27" pos:end="945:28">-&gt;</operator><name pos:start="945:29" pos:end="945:48">non_zero_count_cache</name><index pos:start="945:49" pos:end="945:59">[<expr pos:start="945:50" pos:end="945:58"><name pos:start="945:50" pos:end="945:58"><name pos:start="945:50" pos:end="945:54">scan8</name><index pos:start="945:55" pos:end="945:58">[<expr pos:start="945:56" pos:end="945:57"><literal type="number" pos:start="945:56" pos:end="945:57">32</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="945:62" pos:end="945:62"><expr pos:start="945:62" pos:end="945:62"><literal type="number" pos:start="945:62" pos:end="945:62">4</literal></expr></argument>, <argument pos:start="945:65" pos:end="945:65"><expr pos:start="945:65" pos:end="945:65"><literal type="number" pos:start="945:65" pos:end="945:65">4</literal></expr></argument>, <argument pos:start="945:68" pos:end="945:68"><expr pos:start="945:68" pos:end="945:68"><literal type="number" pos:start="945:68" pos:end="945:68">8</literal></expr></argument>, <argument pos:start="945:71" pos:end="945:71"><expr pos:start="945:71" pos:end="945:71"><literal type="number" pos:start="945:71" pos:end="945:71">0</literal></expr></argument>, <argument pos:start="945:74" pos:end="945:74"><expr pos:start="945:74" pos:end="945:74"><literal type="number" pos:start="945:74" pos:end="945:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="949:5" pos:end="949:48"><expr pos:start="949:5" pos:end="949:47"><name pos:start="949:5" pos:end="949:34"><name pos:start="949:5" pos:end="949:5">h</name><operator pos:start="949:6" pos:end="949:7">-&gt;</operator><name pos:start="949:8" pos:end="949:14">cur_pic</name><operator pos:start="949:15" pos:end="949:15">.</operator><name pos:start="949:16" pos:end="949:27">qscale_table</name><index pos:start="949:28" pos:end="949:34">[<expr pos:start="949:29" pos:end="949:33"><name pos:start="949:29" pos:end="949:33">mb_xy</name></expr>]</index></name> <operator pos:start="949:36" pos:end="949:36">=</operator> <name pos:start="949:38" pos:end="949:47"><name pos:start="949:38" pos:end="949:39">sl</name><operator pos:start="949:40" pos:end="949:41">-&gt;</operator><name pos:start="949:42" pos:end="949:47">qscale</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="951:5" pos:end="951:37"><expr pos:start="951:5" pos:end="951:36"><call pos:start="951:5" pos:end="951:36"><name pos:start="951:5" pos:end="951:29">write_back_non_zero_count</name><argument_list pos:start="951:30" pos:end="951:36">(<argument pos:start="951:31" pos:end="951:31"><expr pos:start="951:31" pos:end="951:31"><name pos:start="951:31" pos:end="951:31">h</name></expr></argument>, <argument pos:start="951:34" pos:end="951:35"><expr pos:start="951:34" pos:end="951:35"><name pos:start="951:34" pos:end="951:35">sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="955:5" pos:end="955:13">return <expr pos:start="955:12" pos:end="955:12"><literal type="number" pos:start="955:12" pos:end="955:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
