<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24354.c" pos:tabs="8"><function pos:start="1:1" pos:end="29:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">socket_accept</name><parameter_list pos:start="1:25" pos:end="1:34">(<parameter pos:start="1:26" pos:end="1:33"><decl pos:start="1:26" pos:end="1:33"><type pos:start="1:26" pos:end="1:28"><name pos:start="1:26" pos:end="1:28">int</name></type> <name pos:start="1:30" pos:end="1:33">sock</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="29:1">{<block_content pos:start="5:5" pos:end="27:15">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:22">sockaddr_un</name></name></type> <name pos:start="5:24" pos:end="5:27">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">socklen_t</name></type> <name pos:start="7:15" pos:end="7:21">addrlen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:27"><expr pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:11">addrlen</name> <operator pos:start="13:13" pos:end="13:13">=</operator> <sizeof pos:start="13:15" pos:end="13:26">sizeof<argument_list pos:start="13:21" pos:end="13:26">(<argument pos:start="13:22" pos:end="13:25"><expr pos:start="13:22" pos:end="13:25"><name pos:start="13:22" pos:end="13:25">addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <do pos:start="15:5" pos:end="19:42">do <block pos:start="15:8" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:63">

        <expr_stmt pos:start="17:9" pos:end="17:63"><expr pos:start="17:9" pos:end="17:62"><name pos:start="17:9" pos:end="17:11">ret</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <call pos:start="17:15" pos:end="17:62"><name pos:start="17:15" pos:end="17:20">accept</name><argument_list pos:start="17:21" pos:end="17:62">(<argument pos:start="17:22" pos:end="17:25"><expr pos:start="17:22" pos:end="17:25"><name pos:start="17:22" pos:end="17:25">sock</name></expr></argument>, <argument pos:start="17:28" pos:end="17:51"><expr pos:start="17:28" pos:end="17:51"><operator pos:start="17:28" pos:end="17:28">(</operator>struct <name pos:start="17:36" pos:end="17:43">sockaddr</name> <operator pos:start="17:45" pos:end="17:45">*</operator><operator pos:start="17:46" pos:end="17:46">)</operator><operator pos:start="17:47" pos:end="17:47">&amp;</operator><name pos:start="17:48" pos:end="17:51">addr</name></expr></argument>, <argument pos:start="17:54" pos:end="17:61"><expr pos:start="17:54" pos:end="17:61"><operator pos:start="17:54" pos:end="17:54">&amp;</operator><name pos:start="17:55" pos:end="17:61">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="19:13" pos:end="19:41">(<expr pos:start="19:14" pos:end="19:40"><name pos:start="19:14" pos:end="19:16">ret</name> <operator pos:start="19:18" pos:end="19:19">==</operator> <operator pos:start="19:21" pos:end="19:21">-</operator><literal type="number" pos:start="19:22" pos:end="19:22">1</literal> <operator pos:start="19:24" pos:end="19:25">&amp;&amp;</operator> <name pos:start="19:27" pos:end="19:31">errno</name> <operator pos:start="19:33" pos:end="19:34">==</operator> <name pos:start="19:36" pos:end="19:40">EINTR</name></expr>)</condition>;</do>

    <expr_stmt pos:start="21:5" pos:end="21:27"><expr pos:start="21:5" pos:end="21:26"><call pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:21">g_assert_no_errno</name><argument_list pos:start="21:22" pos:end="21:26">(<argument pos:start="21:23" pos:end="21:25"><expr pos:start="21:23" pos:end="21:25"><name pos:start="21:23" pos:end="21:25">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:16"><expr pos:start="23:5" pos:end="23:15"><call pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:9">close</name><argument_list pos:start="23:10" pos:end="23:15">(<argument pos:start="23:11" pos:end="23:14"><expr pos:start="23:11" pos:end="23:14"><name pos:start="23:11" pos:end="23:14">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="27:5" pos:end="27:15">return <expr pos:start="27:12" pos:end="27:14"><name pos:start="27:12" pos:end="27:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
