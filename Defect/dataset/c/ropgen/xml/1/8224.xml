<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8224.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">expand_rle_row</name><parameter_list pos:start="1:26" pos:end="3:60">(<parameter pos:start="1:27" pos:end="1:37"><decl pos:start="1:27" pos:end="1:37"><type pos:start="1:27" pos:end="1:37"><name pos:start="1:27" pos:end="1:34">SgiState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">s</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:55"><decl pos:start="1:40" pos:end="1:55"><type pos:start="1:40" pos:end="1:55"><name pos:start="1:40" pos:end="1:46">uint8_t</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:55">out_buf</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:42"><decl pos:start="3:27" pos:end="3:42"><type pos:start="3:27" pos:end="3:42"><name pos:start="3:27" pos:end="3:33">uint8_t</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:42">out_end</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:59"><decl pos:start="3:45" pos:end="3:59"><type pos:start="3:45" pos:end="3:59"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:59">pixelstride</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="63:1">{<block_content pos:start="7:5" pos:end="61:5">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">char</name></type> <name pos:start="7:19" pos:end="7:23">pixel</name></decl>, <decl pos:start="7:26" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:17"/><name pos:start="7:26" pos:end="7:30">count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:23">orig</name> <init pos:start="9:25" pos:end="9:33">= <expr pos:start="9:27" pos:end="9:33"><name pos:start="9:27" pos:end="9:33">out_buf</name></expr></init></decl>;</decl_stmt>



    <while pos:start="13:5" pos:end="61:5">while <condition pos:start="13:11" pos:end="13:13">(<expr pos:start="13:12" pos:end="13:12"><literal type="number" pos:start="13:12" pos:end="13:12">1</literal></expr>)</condition> <block pos:start="13:15" pos:end="61:5">{<block_content pos:start="15:9" pos:end="59:9">

        <if_stmt pos:start="15:9" pos:end="17:39"><if pos:start="15:9" pos:end="17:39">if <condition pos:start="15:12" pos:end="15:50">(<expr pos:start="15:13" pos:end="15:49"><call pos:start="15:13" pos:end="15:45"><name pos:start="15:13" pos:end="15:38">bytestream2_get_bytes_left</name><argument_list pos:start="15:39" pos:end="15:45">(<argument pos:start="15:40" pos:end="15:44"><expr pos:start="15:40" pos:end="15:44"><operator pos:start="15:40" pos:end="15:40">&amp;</operator><name pos:start="15:41" pos:end="15:44"><name pos:start="15:41" pos:end="15:41">s</name><operator pos:start="15:42" pos:end="15:43">-&gt;</operator><name pos:start="15:44" pos:end="15:44">g</name></name></expr></argument>)</argument_list></call> <operator pos:start="15:47" pos:end="15:47">&lt;</operator> <literal type="number" pos:start="15:49" pos:end="15:49">1</literal></expr>)</condition><block type="pseudo" pos:start="17:13" pos:end="17:39"><block_content pos:start="17:13" pos:end="17:39">

            <return pos:start="17:13" pos:end="17:39">return <expr pos:start="17:20" pos:end="17:38"><name pos:start="17:20" pos:end="17:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:45"><expr pos:start="19:9" pos:end="19:44"><name pos:start="19:9" pos:end="19:13">pixel</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <call pos:start="19:17" pos:end="19:44"><name pos:start="19:17" pos:end="19:37">bytestream2_get_byteu</name><argument_list pos:start="19:38" pos:end="19:44">(<argument pos:start="19:39" pos:end="19:43"><expr pos:start="19:39" pos:end="19:43"><operator pos:start="19:39" pos:end="19:39">&amp;</operator><name pos:start="19:40" pos:end="19:43"><name pos:start="19:40" pos:end="19:40">s</name><operator pos:start="19:41" pos:end="19:42">-&gt;</operator><name pos:start="19:43" pos:end="19:43">g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:38">(<expr pos:start="21:13" pos:end="21:37"><operator pos:start="21:13" pos:end="21:13">!</operator><operator pos:start="21:14" pos:end="21:14">(</operator><name pos:start="21:15" pos:end="21:19">count</name> <operator pos:start="21:21" pos:end="21:21">=</operator> <operator pos:start="21:23" pos:end="21:23">(</operator><name pos:start="21:24" pos:end="21:28">pixel</name> <operator pos:start="21:30" pos:end="21:30">&amp;</operator> <literal type="number" pos:start="21:32" pos:end="21:35">0x7f</literal><operator pos:start="21:36" pos:end="21:36">)</operator><operator pos:start="21:37" pos:end="21:37">)</operator></expr>)</condition> <block pos:start="21:40" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:50">

            <return pos:start="23:13" pos:end="23:50">return <expr pos:start="23:20" pos:end="23:49"><operator pos:start="23:20" pos:end="23:20">(</operator><name pos:start="23:21" pos:end="23:27">out_buf</name> <operator pos:start="23:29" pos:end="23:29">-</operator> <name pos:start="23:31" pos:end="23:34">orig</name><operator pos:start="23:35" pos:end="23:35">)</operator> <operator pos:start="23:37" pos:end="23:37">/</operator> <name pos:start="23:39" pos:end="23:49">pixelstride</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="29:9" pos:end="29:40">/* Check for buffer overflow. */</comment>

        <if_stmt pos:start="31:9" pos:end="31:63"><if pos:start="31:9" pos:end="31:63">if<condition pos:start="31:11" pos:end="31:52">(<expr pos:start="31:12" pos:end="31:51"><name pos:start="31:12" pos:end="31:18">out_buf</name> <operator pos:start="31:20" pos:end="31:20">+</operator> <name pos:start="31:22" pos:end="31:32">pixelstride</name> <operator pos:start="31:34" pos:end="31:34">*</operator> <name pos:start="31:36" pos:end="31:40">count</name> <operator pos:start="31:42" pos:end="31:43">&gt;=</operator> <name pos:start="31:45" pos:end="31:51">out_end</name></expr>)</condition><block type="pseudo" pos:start="31:54" pos:end="31:63"><block_content pos:start="31:54" pos:end="31:63"> <return pos:start="31:54" pos:end="31:63">return <expr pos:start="31:61" pos:end="31:62"><operator pos:start="31:61" pos:end="31:61">-</operator><literal type="number" pos:start="31:62" pos:end="31:62">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="35:9" pos:end="59:9"><if pos:start="35:9" pos:end="45:9">if <condition pos:start="35:12" pos:end="35:25">(<expr pos:start="35:13" pos:end="35:24"><name pos:start="35:13" pos:end="35:17">pixel</name> <operator pos:start="35:19" pos:end="35:19">&amp;</operator> <literal type="number" pos:start="35:21" pos:end="35:24">0x80</literal></expr>)</condition> <block pos:start="35:27" pos:end="45:9">{<block_content pos:start="37:13" pos:end="43:13">

            <while pos:start="37:13" pos:end="43:13">while <condition pos:start="37:19" pos:end="37:27">(<expr pos:start="37:20" pos:end="37:26"><name pos:start="37:20" pos:end="37:24">count</name><operator pos:start="37:25" pos:end="37:26">--</operator></expr>)</condition> <block pos:start="37:29" pos:end="43:13">{<block_content pos:start="39:17" pos:end="41:39">

                <expr_stmt pos:start="39:17" pos:end="39:55"><expr pos:start="39:17" pos:end="39:54"><operator pos:start="39:17" pos:end="39:17">*</operator><name pos:start="39:18" pos:end="39:24">out_buf</name> <operator pos:start="39:26" pos:end="39:26">=</operator> <call pos:start="39:28" pos:end="39:54"><name pos:start="39:28" pos:end="39:47">bytestream2_get_byte</name><argument_list pos:start="39:48" pos:end="39:54">(<argument pos:start="39:49" pos:end="39:53"><expr pos:start="39:49" pos:end="39:53"><operator pos:start="39:49" pos:end="39:49">&amp;</operator><name pos:start="39:50" pos:end="39:53"><name pos:start="39:50" pos:end="39:50">s</name><operator pos:start="39:51" pos:end="39:52">-&gt;</operator><name pos:start="39:53" pos:end="39:53">g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:39"><expr pos:start="41:17" pos:end="41:38"><name pos:start="41:17" pos:end="41:23">out_buf</name> <operator pos:start="41:25" pos:end="41:26">+=</operator> <name pos:start="41:28" pos:end="41:38">pixelstride</name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if> <else pos:start="45:11" pos:end="59:9">else <block pos:start="45:16" pos:end="59:9">{<block_content pos:start="47:13" pos:end="57:13">

            <expr_stmt pos:start="47:13" pos:end="47:48"><expr pos:start="47:13" pos:end="47:47"><name pos:start="47:13" pos:end="47:17">pixel</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <call pos:start="47:21" pos:end="47:47"><name pos:start="47:21" pos:end="47:40">bytestream2_get_byte</name><argument_list pos:start="47:41" pos:end="47:47">(<argument pos:start="47:42" pos:end="47:46"><expr pos:start="47:42" pos:end="47:46"><operator pos:start="47:42" pos:end="47:42">&amp;</operator><name pos:start="47:43" pos:end="47:46"><name pos:start="47:43" pos:end="47:43">s</name><operator pos:start="47:44" pos:end="47:45">-&gt;</operator><name pos:start="47:46" pos:end="47:46">g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <while pos:start="51:13" pos:end="57:13">while <condition pos:start="51:19" pos:end="51:27">(<expr pos:start="51:20" pos:end="51:26"><name pos:start="51:20" pos:end="51:24">count</name><operator pos:start="51:25" pos:end="51:26">--</operator></expr>)</condition> <block pos:start="51:29" pos:end="57:13">{<block_content pos:start="53:17" pos:end="55:39">

                <expr_stmt pos:start="53:17" pos:end="53:33"><expr pos:start="53:17" pos:end="53:32"><operator pos:start="53:17" pos:end="53:17">*</operator><name pos:start="53:18" pos:end="53:24">out_buf</name> <operator pos:start="53:26" pos:end="53:26">=</operator> <name pos:start="53:28" pos:end="53:32">pixel</name></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:39"><expr pos:start="55:17" pos:end="55:38"><name pos:start="55:17" pos:end="55:23">out_buf</name> <operator pos:start="55:25" pos:end="55:26">+=</operator> <name pos:start="55:28" pos:end="55:38">pixelstride</name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
