<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10404.c" pos:tabs="8"><function pos:start="1:1" pos:end="677:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">ff_dca_xll_decode_audio</name><parameter_list pos:start="1:28" pos:end="1:58">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:38">DCAContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:50">AVFrame</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">frame</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="677:1">{<block_content pos:start="7:5" pos:end="675:13">

    <comment type="block" pos:start="5:5" pos:end="5:55">/* FIXME: Decodes only the first frequency band. */</comment>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">seg</name></decl>, <decl pos:start="7:14" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:20">chset_i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:49">/* Coding parameters for each channel set. */</comment>

    <struct pos:start="13:5" pos:end="27:22">struct <name pos:start="13:12" pos:end="13:24">coding_params</name> <block pos:start="13:26" pos:end="27:5">{

        <decl_stmt pos:start="15:9" pos:end="15:21"><decl pos:start="15:9" pos:end="15:20"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:20">seg_type</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:31"><decl pos:start="17:9" pos:end="17:30"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:30"><name pos:start="17:13" pos:end="17:26">rice_code_flag</name><index pos:start="17:27" pos:end="17:30">[<expr pos:start="17:28" pos:end="17:29"><literal type="number" pos:start="17:28" pos:end="17:29">16</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:28"><decl pos:start="19:9" pos:end="19:27"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:27"><name pos:start="19:13" pos:end="19:23">pancAuxABIT</name><index pos:start="19:24" pos:end="19:27">[<expr pos:start="19:25" pos:end="19:26"><literal type="number" pos:start="19:25" pos:end="19:26">16</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:26"><decl pos:start="21:9" pos:end="21:25"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:25"><name pos:start="21:13" pos:end="21:21">pancABIT0</name><index pos:start="21:22" pos:end="21:25">[<expr pos:start="21:23" pos:end="21:24"><literal type="number" pos:start="21:23" pos:end="21:24">16</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="block" pos:start="21:29" pos:end="21:55">/* Not sure what this is */</comment>

        <decl_stmt pos:start="23:9" pos:end="23:25"><decl pos:start="23:9" pos:end="23:24"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:24"><name pos:start="23:13" pos:end="23:20">pancABIT</name><index pos:start="23:21" pos:end="23:24">[<expr pos:start="23:22" pos:end="23:23"><literal type="number" pos:start="23:22" pos:end="23:23">16</literal></expr>]</index></name></decl>;</decl_stmt>   <comment type="block" pos:start="23:29" pos:end="23:55">/* Not sure what this is */</comment>

        <decl_stmt pos:start="25:9" pos:end="25:28"><decl pos:start="25:9" pos:end="25:27"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:27"><name pos:start="25:13" pos:end="25:23">nSamplPart0</name><index pos:start="25:24" pos:end="25:27">[<expr pos:start="25:25" pos:end="25:26"><literal type="number" pos:start="25:25" pos:end="25:26">16</literal></expr>]</index></name></decl>;</decl_stmt>

    }</block> <decl pos:start="27:7" pos:end="27:21"><name pos:start="27:7" pos:end="27:21"><name pos:start="27:7" pos:end="27:17">param_state</name><index pos:start="27:18" pos:end="27:21">[<expr pos:start="27:19" pos:end="27:20"><literal type="number" pos:start="27:19" pos:end="27:20">16</literal></expr>]</index></name></decl>;</struct>



    <decl_stmt pos:start="31:5" pos:end="31:40"><decl pos:start="31:5" pos:end="31:39"><type pos:start="31:5" pos:end="31:19"><name pos:start="31:5" pos:end="31:17">GetBitContext</name> <modifier pos:start="31:19" pos:end="31:19">*</modifier></type><name pos:start="31:20" pos:end="31:21">gb</name> <init pos:start="31:23" pos:end="31:39">= <expr pos:start="31:25" pos:end="31:39"><operator pos:start="31:25" pos:end="31:25">&amp;</operator><name pos:start="31:26" pos:end="31:39"><name pos:start="31:26" pos:end="31:26">s</name><operator pos:start="31:27" pos:end="31:28">-&gt;</operator><name pos:start="31:29" pos:end="31:36">xll_navi</name><operator pos:start="31:37" pos:end="31:37">.</operator><name pos:start="31:38" pos:end="31:39">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:17"><decl pos:start="33:5" pos:end="33:16"><type pos:start="33:5" pos:end="33:9"><name pos:start="33:5" pos:end="33:7">int</name> <modifier pos:start="33:9" pos:end="33:9">*</modifier></type><name pos:start="33:10" pos:end="33:16">history</name></decl>;</decl_stmt>



    <comment type="block" pos:start="37:5" pos:end="41:23">/* Layout: First the sample buffer for one segment per channel,

     * followed by history buffers of DCA_XLL_AORDER_MAX samples for

     * each channel. */</comment>

    <expr_stmt pos:start="43:5" pos:end="47:65"><expr pos:start="43:5" pos:end="47:64"><call pos:start="43:5" pos:end="47:64"><name pos:start="43:5" pos:end="43:18">av_fast_malloc</name><argument_list pos:start="43:19" pos:end="47:64">(<argument pos:start="43:20" pos:end="43:37"><expr pos:start="43:20" pos:end="43:37"><operator pos:start="43:20" pos:end="43:20">&amp;</operator><name pos:start="43:21" pos:end="43:37"><name pos:start="43:21" pos:end="43:21">s</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:37">xll_sample_buf</name></name></expr></argument>, <argument pos:start="43:40" pos:end="43:62"><expr pos:start="43:40" pos:end="43:62"><operator pos:start="43:40" pos:end="43:40">&amp;</operator><name pos:start="43:41" pos:end="43:62"><name pos:start="43:41" pos:end="43:41">s</name><operator pos:start="43:42" pos:end="43:43">-&gt;</operator><name pos:start="43:44" pos:end="43:62">xll_sample_buf_size</name></name></expr></argument>,

                   <argument pos:start="45:20" pos:end="47:63"><expr pos:start="45:20" pos:end="47:63"><operator pos:start="45:20" pos:end="45:20">(</operator><name pos:start="45:21" pos:end="45:38"><name pos:start="45:21" pos:end="45:21">s</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:38">xll_smpl_in_seg</name></name> <operator pos:start="45:40" pos:end="45:40">+</operator> <name pos:start="45:42" pos:end="45:59">DCA_XLL_AORDER_MAX</name><operator pos:start="45:60" pos:end="45:60">)</operator> <operator pos:start="45:62" pos:end="45:62">*</operator>

                   <name pos:start="47:20" pos:end="47:34"><name pos:start="47:20" pos:end="47:20">s</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:34">xll_channels</name></name> <operator pos:start="47:36" pos:end="47:36">*</operator> <sizeof pos:start="47:38" pos:end="47:63">sizeof<argument_list pos:start="47:44" pos:end="47:63">(<argument pos:start="47:45" pos:end="47:62"><expr pos:start="47:45" pos:end="47:62"><operator pos:start="47:45" pos:end="47:45">*</operator><name pos:start="47:46" pos:end="47:62"><name pos:start="47:46" pos:end="47:46">s</name><operator pos:start="47:47" pos:end="47:48">-&gt;</operator><name pos:start="47:49" pos:end="47:62">xll_sample_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="51:31"><if pos:start="49:5" pos:end="51:31">if <condition pos:start="49:8" pos:end="49:27">(<expr pos:start="49:9" pos:end="49:26"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:26"><name pos:start="49:10" pos:end="49:10">s</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:26">xll_sample_buf</name></name></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:31"><block_content pos:start="51:9" pos:end="51:31">

        <return pos:start="51:9" pos:end="51:31">return <expr pos:start="51:16" pos:end="51:30"><call pos:start="51:16" pos:end="51:30"><name pos:start="51:16" pos:end="51:22">AVERROR</name><argument_list pos:start="51:23" pos:end="51:30">(<argument pos:start="51:24" pos:end="51:29"><expr pos:start="51:24" pos:end="51:29"><name pos:start="51:24" pos:end="51:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:71"><expr pos:start="55:5" pos:end="55:70"><name pos:start="55:5" pos:end="55:11">history</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <name pos:start="55:15" pos:end="55:31"><name pos:start="55:15" pos:end="55:15">s</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:31">xll_sample_buf</name></name> <operator pos:start="55:33" pos:end="55:33">+</operator> <name pos:start="55:35" pos:end="55:52"><name pos:start="55:35" pos:end="55:35">s</name><operator pos:start="55:36" pos:end="55:37">-&gt;</operator><name pos:start="55:38" pos:end="55:52">xll_smpl_in_seg</name></name> <operator pos:start="55:54" pos:end="55:54">*</operator> <name pos:start="55:56" pos:end="55:70"><name pos:start="55:56" pos:end="55:56">s</name><operator pos:start="55:57" pos:end="55:58">-&gt;</operator><name pos:start="55:59" pos:end="55:70">xll_channels</name></name></expr>;</expr_stmt>



    <for pos:start="59:5" pos:end="673:5">for <control pos:start="59:9" pos:end="59:47">(<init pos:start="59:10" pos:end="59:17"><expr pos:start="59:10" pos:end="59:16"><name pos:start="59:10" pos:end="59:12">seg</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <literal type="number" pos:start="59:16" pos:end="59:16">0</literal></expr>;</init> <condition pos:start="59:19" pos:end="59:40"><expr pos:start="59:19" pos:end="59:39"><name pos:start="59:19" pos:end="59:21">seg</name> <operator pos:start="59:23" pos:end="59:23">&lt;</operator> <name pos:start="59:25" pos:end="59:39"><name pos:start="59:25" pos:end="59:25">s</name><operator pos:start="59:26" pos:end="59:27">-&gt;</operator><name pos:start="59:28" pos:end="59:39">xll_segments</name></name></expr>;</condition> <incr pos:start="59:42" pos:end="59:46"><expr pos:start="59:42" pos:end="59:46"><name pos:start="59:42" pos:end="59:44">seg</name><operator pos:start="59:45" pos:end="59:46">++</operator></expr></incr>)</control> <block pos:start="59:49" pos:end="673:5">{<block_content pos:start="61:9" pos:end="671:9">

        <decl_stmt pos:start="61:9" pos:end="61:28"><decl pos:start="61:9" pos:end="61:27"><type pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:16">unsigned</name></type> <name pos:start="61:18" pos:end="61:27">in_channel</name></decl>;</decl_stmt>



        <for pos:start="65:9" pos:end="671:9">for <control pos:start="65:13" pos:end="65:76">(<init pos:start="65:14" pos:end="65:38"><expr pos:start="65:14" pos:end="65:37"><name pos:start="65:14" pos:end="65:20">chset_i</name> <operator pos:start="65:22" pos:end="65:22">=</operator> <name pos:start="65:24" pos:end="65:33">in_channel</name> <operator pos:start="65:35" pos:end="65:35">=</operator> <literal type="number" pos:start="65:37" pos:end="65:37">0</literal></expr>;</init> <condition pos:start="65:40" pos:end="65:65"><expr pos:start="65:40" pos:end="65:64"><name pos:start="65:40" pos:end="65:46">chset_i</name> <operator pos:start="65:48" pos:end="65:48">&lt;</operator> <name pos:start="65:50" pos:end="65:64"><name pos:start="65:50" pos:end="65:50">s</name><operator pos:start="65:51" pos:end="65:52">-&gt;</operator><name pos:start="65:53" pos:end="65:64">xll_nch_sets</name></name></expr>;</condition> <incr pos:start="65:67" pos:end="65:75"><expr pos:start="65:67" pos:end="65:75"><name pos:start="65:67" pos:end="65:73">chset_i</name><operator pos:start="65:74" pos:end="65:75">++</operator></expr></incr>)</control> <block pos:start="65:78" pos:end="671:9">{<block_content pos:start="69:13" pos:end="669:48">

            <comment type="block" pos:start="67:13" pos:end="67:88">/* The spec isn't very explicit, but I think the NAVI sizes are in bytes. */</comment>

            <decl_stmt pos:start="69:13" pos:end="71:70"><decl pos:start="69:13" pos:end="71:69"><type pos:start="69:13" pos:end="69:15"><name pos:start="69:13" pos:end="69:15">int</name></type> <name pos:start="69:17" pos:end="69:23">end_pos</name> <init pos:start="69:25" pos:end="71:69">= <expr pos:start="69:27" pos:end="71:69"><call pos:start="69:27" pos:end="69:44"><name pos:start="69:27" pos:end="69:40">get_bits_count</name><argument_list pos:start="69:41" pos:end="69:44">(<argument pos:start="69:42" pos:end="69:43"><expr pos:start="69:42" pos:end="69:43"><name pos:start="69:42" pos:end="69:43">gb</name></expr></argument>)</argument_list></call> <operator pos:start="69:46" pos:end="69:46">+</operator>

                          <literal type="number" pos:start="71:27" pos:end="71:27">8</literal> <operator pos:start="71:29" pos:end="71:29">*</operator> <name pos:start="71:31" pos:end="71:69"><name pos:start="71:31" pos:end="71:31">s</name><operator pos:start="71:32" pos:end="71:33">-&gt;</operator><name pos:start="71:34" pos:end="71:41">xll_navi</name><operator pos:start="71:42" pos:end="71:42">.</operator><name pos:start="71:43" pos:end="71:52">chset_size</name><index pos:start="71:53" pos:end="71:55">[<expr pos:start="71:54" pos:end="71:54"><literal type="number" pos:start="71:54" pos:end="71:54">0</literal></expr>]</index><index pos:start="71:56" pos:end="71:60">[<expr pos:start="71:57" pos:end="71:59"><name pos:start="71:57" pos:end="71:59">seg</name></expr>]</index><index pos:start="71:61" pos:end="71:69">[<expr pos:start="71:62" pos:end="71:68"><name pos:start="71:62" pos:end="71:68">chset_i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="73:13" pos:end="73:21"><decl pos:start="73:13" pos:end="73:17"><type pos:start="73:13" pos:end="73:15"><name pos:start="73:13" pos:end="73:15">int</name></type> <name pos:start="73:17" pos:end="73:17">i</name></decl>, <decl pos:start="73:20" pos:end="73:20"><type ref="prev" pos:start="73:13" pos:end="73:15"/><name pos:start="73:20" pos:end="73:20">j</name></decl>;</decl_stmt>

            <decl_stmt pos:start="75:13" pos:end="75:65"><decl pos:start="75:13" pos:end="75:64"><type pos:start="75:13" pos:end="75:34"><name pos:start="75:13" pos:end="75:32"><name pos:start="75:13" pos:end="75:18">struct</name> <name pos:start="75:20" pos:end="75:32">coding_params</name></name> <modifier pos:start="75:34" pos:end="75:34">*</modifier></type><name pos:start="75:35" pos:end="75:40">params</name> <init pos:start="75:42" pos:end="75:64">= <expr pos:start="75:44" pos:end="75:64"><operator pos:start="75:44" pos:end="75:44">&amp;</operator><name pos:start="75:45" pos:end="75:64"><name pos:start="75:45" pos:end="75:55">param_state</name><index pos:start="75:56" pos:end="75:64">[<expr pos:start="75:57" pos:end="75:63"><name pos:start="75:57" pos:end="75:63">chset_i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="77:13" pos:end="79:61">/* I think this flag means that we should keep seg_type and

             * other parameters from the previous segment. */</comment>

            <decl_stmt pos:start="81:13" pos:end="81:41"><decl pos:start="81:13" pos:end="81:40"><type pos:start="81:13" pos:end="81:15"><name pos:start="81:13" pos:end="81:15">int</name></type> <name pos:start="81:17" pos:end="81:40">use_seg_state_code_param</name></decl>;</decl_stmt>

            <decl_stmt pos:start="83:13" pos:end="83:63"><decl pos:start="83:13" pos:end="83:62"><type pos:start="83:13" pos:end="83:31"><name pos:start="83:13" pos:end="83:29">XllChSetSubHeader</name> <modifier pos:start="83:31" pos:end="83:31">*</modifier></type><name pos:start="83:32" pos:end="83:36">chset</name> <init pos:start="83:38" pos:end="83:62">= <expr pos:start="83:40" pos:end="83:62"><operator pos:start="83:40" pos:end="83:40">&amp;</operator><name pos:start="83:41" pos:end="83:62"><name pos:start="83:41" pos:end="83:41">s</name><operator pos:start="83:42" pos:end="83:43">-&gt;</operator><name pos:start="83:44" pos:end="83:53">xll_chsets</name><index pos:start="83:54" pos:end="83:62">[<expr pos:start="83:55" pos:end="83:61"><name pos:start="83:55" pos:end="83:61">chset_i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="85:13" pos:end="89:32"><if pos:start="85:13" pos:end="89:32">if <condition pos:start="85:16" pos:end="85:49">(<expr pos:start="85:17" pos:end="85:48"><name pos:start="85:17" pos:end="85:26">in_channel</name> <operator pos:start="85:28" pos:end="85:29">&gt;=</operator> <name pos:start="85:31" pos:end="85:48"><name pos:start="85:31" pos:end="85:31">s</name><operator pos:start="85:32" pos:end="85:33">-&gt;</operator><name pos:start="85:34" pos:end="85:38">avctx</name><operator pos:start="85:39" pos:end="85:40">-&gt;</operator><name pos:start="85:41" pos:end="85:48">channels</name></name></expr>)</condition><block type="pseudo" pos:start="89:17" pos:end="89:32"><block_content pos:start="89:17" pos:end="89:32">

                <comment type="block" pos:start="87:17" pos:end="87:62">/* FIXME: Could go directly to next segment */</comment>

                <goto pos:start="89:17" pos:end="89:32">goto <name pos:start="89:22" pos:end="89:31">next_chset</name>;</goto></block_content></block></if></if_stmt>



            <if_stmt pos:start="93:13" pos:end="103:13"><if pos:start="93:13" pos:end="103:13">if <condition pos:start="93:16" pos:end="93:67">(<expr pos:start="93:17" pos:end="93:66"><name pos:start="93:17" pos:end="93:37"><name pos:start="93:17" pos:end="93:17">s</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:24">avctx</name><operator pos:start="93:25" pos:end="93:26">-&gt;</operator><name pos:start="93:27" pos:end="93:37">sample_rate</name></name> <operator pos:start="93:39" pos:end="93:40">!=</operator> <name pos:start="93:42" pos:end="93:66"><name pos:start="93:42" pos:end="93:46">chset</name><operator pos:start="93:47" pos:end="93:48">-&gt;</operator><name pos:start="93:49" pos:end="93:66">sampling_frequency</name></name></expr>)</condition> <block pos:start="93:69" pos:end="103:13">{<block_content pos:start="95:17" pos:end="101:32">

                <expr_stmt pos:start="95:17" pos:end="99:73"><expr pos:start="95:17" pos:end="99:72"><call pos:start="95:17" pos:end="99:72"><name pos:start="95:17" pos:end="95:22">av_log</name><argument_list pos:start="95:23" pos:end="99:72">(<argument pos:start="95:24" pos:end="95:31"><expr pos:start="95:24" pos:end="95:31"><name pos:start="95:24" pos:end="95:31"><name pos:start="95:24" pos:end="95:24">s</name><operator pos:start="95:25" pos:end="95:26">-&gt;</operator><name pos:start="95:27" pos:end="95:31">avctx</name></name></expr></argument>, <argument pos:start="95:34" pos:end="95:47"><expr pos:start="95:34" pos:end="95:47"><name pos:start="95:34" pos:end="95:47">AV_LOG_WARNING</name></expr></argument>,

                       <argument pos:start="97:24" pos:end="97:76"><expr pos:start="97:24" pos:end="97:76"><literal type="string" pos:start="97:24" pos:end="97:76">"XLL: unexpected chset sample rate %d, expected %d\n"</literal></expr></argument>,

                       <argument pos:start="99:24" pos:end="99:48"><expr pos:start="99:24" pos:end="99:48"><name pos:start="99:24" pos:end="99:48"><name pos:start="99:24" pos:end="99:28">chset</name><operator pos:start="99:29" pos:end="99:30">-&gt;</operator><name pos:start="99:31" pos:end="99:48">sampling_frequency</name></name></expr></argument>, <argument pos:start="99:51" pos:end="99:71"><expr pos:start="99:51" pos:end="99:71"><name pos:start="99:51" pos:end="99:71"><name pos:start="99:51" pos:end="99:51">s</name><operator pos:start="99:52" pos:end="99:53">-&gt;</operator><name pos:start="99:54" pos:end="99:58">avctx</name><operator pos:start="99:59" pos:end="99:60">-&gt;</operator><name pos:start="99:61" pos:end="99:71">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="101:17" pos:end="101:32">goto <name pos:start="101:22" pos:end="101:31">next_chset</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="105:13" pos:end="111:45"><if pos:start="105:13" pos:end="107:59">if <condition pos:start="105:16" pos:end="105:25">(<expr pos:start="105:17" pos:end="105:24"><name pos:start="105:17" pos:end="105:19">seg</name> <operator pos:start="105:21" pos:end="105:22">!=</operator> <literal type="number" pos:start="105:24" pos:end="105:24">0</literal></expr>)</condition><block type="pseudo" pos:start="107:17" pos:end="107:59"><block_content pos:start="107:17" pos:end="107:59">

                <expr_stmt pos:start="107:17" pos:end="107:59"><expr pos:start="107:17" pos:end="107:58"><name pos:start="107:17" pos:end="107:40">use_seg_state_code_param</name> <operator pos:start="107:42" pos:end="107:42">=</operator> <call pos:start="107:44" pos:end="107:58"><name pos:start="107:44" pos:end="107:51">get_bits</name><argument_list pos:start="107:52" pos:end="107:58">(<argument pos:start="107:53" pos:end="107:54"><expr pos:start="107:53" pos:end="107:54"><name pos:start="107:53" pos:end="107:54">gb</name></expr></argument>, <argument pos:start="107:57" pos:end="107:57"><expr pos:start="107:57" pos:end="107:57"><literal type="number" pos:start="107:57" pos:end="107:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="109:13" pos:end="111:45">else<block type="pseudo" pos:start="111:17" pos:end="111:45"><block_content pos:start="111:17" pos:end="111:45">

                <expr_stmt pos:start="111:17" pos:end="111:45"><expr pos:start="111:17" pos:end="111:44"><name pos:start="111:17" pos:end="111:40">use_seg_state_code_param</name> <operator pos:start="111:42" pos:end="111:42">=</operator> <literal type="number" pos:start="111:44" pos:end="111:44">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <if_stmt pos:start="115:13" pos:end="211:13"><if pos:start="115:13" pos:end="211:13">if <condition pos:start="115:16" pos:end="115:42">(<expr pos:start="115:17" pos:end="115:41"><operator pos:start="115:17" pos:end="115:17">!</operator><name pos:start="115:18" pos:end="115:41">use_seg_state_code_param</name></expr>)</condition> <block pos:start="115:44" pos:end="211:13">{<block_content pos:start="117:17" pos:end="209:17">

                <decl_stmt pos:start="117:17" pos:end="117:38"><decl pos:start="117:17" pos:end="117:34"><type pos:start="117:17" pos:end="117:19"><name pos:start="117:17" pos:end="117:19">int</name></type> <name pos:start="117:21" pos:end="117:34">num_param_sets</name></decl>, <decl pos:start="117:37" pos:end="117:37"><type ref="prev" pos:start="117:17" pos:end="117:19"/><name pos:start="117:37" pos:end="117:37">i</name></decl>;</decl_stmt>

                <decl_stmt pos:start="119:17" pos:end="119:35"><decl pos:start="119:17" pos:end="119:34"><type pos:start="119:17" pos:end="119:24"><name pos:start="119:17" pos:end="119:24">unsigned</name></type> <name pos:start="119:26" pos:end="119:34">bits4ABIT</name></decl>;</decl_stmt>



                <expr_stmt pos:start="123:17" pos:end="123:51"><expr pos:start="123:17" pos:end="123:50"><name pos:start="123:17" pos:end="123:32"><name pos:start="123:17" pos:end="123:22">params</name><operator pos:start="123:23" pos:end="123:24">-&gt;</operator><name pos:start="123:25" pos:end="123:32">seg_type</name></name> <operator pos:start="123:34" pos:end="123:34">=</operator> <call pos:start="123:36" pos:end="123:50"><name pos:start="123:36" pos:end="123:43">get_bits</name><argument_list pos:start="123:44" pos:end="123:50">(<argument pos:start="123:45" pos:end="123:46"><expr pos:start="123:45" pos:end="123:46"><name pos:start="123:45" pos:end="123:46">gb</name></expr></argument>, <argument pos:start="123:49" pos:end="123:49"><expr pos:start="123:49" pos:end="123:49"><literal type="number" pos:start="123:49" pos:end="123:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="125:17" pos:end="125:74"><expr pos:start="125:17" pos:end="125:73"><name pos:start="125:17" pos:end="125:30">num_param_sets</name>   <operator pos:start="125:34" pos:end="125:34">=</operator> <ternary pos:start="125:36" pos:end="125:73"><condition pos:start="125:36" pos:end="125:53"><expr pos:start="125:36" pos:end="125:51"><name pos:start="125:36" pos:end="125:51"><name pos:start="125:36" pos:end="125:41">params</name><operator pos:start="125:42" pos:end="125:43">-&gt;</operator><name pos:start="125:44" pos:end="125:51">seg_type</name></name></expr> ?</condition><then pos:start="125:55" pos:end="125:55"> <expr pos:start="125:55" pos:end="125:55"><literal type="number" pos:start="125:55" pos:end="125:55">1</literal></expr> </then><else pos:start="125:57" pos:end="125:73">: <expr pos:start="125:59" pos:end="125:73"><name pos:start="125:59" pos:end="125:73"><name pos:start="125:59" pos:end="125:63">chset</name><operator pos:start="125:64" pos:end="125:65">-&gt;</operator><name pos:start="125:66" pos:end="125:73">channels</name></name></expr></else></ternary></expr>;</expr_stmt>



                <if_stmt pos:start="129:17" pos:end="147:17"><if pos:start="129:17" pos:end="133:17">if <condition pos:start="129:20" pos:end="129:42">(<expr pos:start="129:21" pos:end="129:41"><name pos:start="129:21" pos:end="129:36"><name pos:start="129:21" pos:end="129:25">chset</name><operator pos:start="129:26" pos:end="129:27">-&gt;</operator><name pos:start="129:28" pos:end="129:36">bit_width</name></name> <operator pos:start="129:38" pos:end="129:38">&gt;</operator> <literal type="number" pos:start="129:40" pos:end="129:41">16</literal></expr>)</condition> <block pos:start="129:44" pos:end="133:17">{<block_content pos:start="131:21" pos:end="131:34">

                    <expr_stmt pos:start="131:21" pos:end="131:34"><expr pos:start="131:21" pos:end="131:33"><name pos:start="131:21" pos:end="131:29">bits4ABIT</name> <operator pos:start="131:31" pos:end="131:31">=</operator> <literal type="number" pos:start="131:33" pos:end="131:33">5</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="133:19" pos:end="147:17">else <block pos:start="133:24" pos:end="147:17">{<block_content pos:start="135:21" pos:end="145:36">

                    <if_stmt pos:start="135:21" pos:end="141:38"><if pos:start="135:21" pos:end="137:38">if <condition pos:start="135:24" pos:end="135:45">(<expr pos:start="135:25" pos:end="135:44"><name pos:start="135:25" pos:end="135:40"><name pos:start="135:25" pos:end="135:29">chset</name><operator pos:start="135:30" pos:end="135:31">-&gt;</operator><name pos:start="135:32" pos:end="135:40">bit_width</name></name> <operator pos:start="135:42" pos:end="135:42">&gt;</operator> <literal type="number" pos:start="135:44" pos:end="135:44">8</literal></expr>)</condition><block type="pseudo" pos:start="137:25" pos:end="137:38"><block_content pos:start="137:25" pos:end="137:38">

                        <expr_stmt pos:start="137:25" pos:end="137:38"><expr pos:start="137:25" pos:end="137:37"><name pos:start="137:25" pos:end="137:33">bits4ABIT</name> <operator pos:start="137:35" pos:end="137:35">=</operator> <literal type="number" pos:start="137:37" pos:end="137:37">4</literal></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="139:21" pos:end="141:38">else<block type="pseudo" pos:start="141:25" pos:end="141:38"><block_content pos:start="141:25" pos:end="141:38">

                        <expr_stmt pos:start="141:25" pos:end="141:38"><expr pos:start="141:25" pos:end="141:37"><name pos:start="141:25" pos:end="141:33">bits4ABIT</name> <operator pos:start="141:35" pos:end="141:35">=</operator> <literal type="number" pos:start="141:37" pos:end="141:37">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <if_stmt pos:start="143:21" pos:end="145:36"><if pos:start="143:21" pos:end="145:36">if <condition pos:start="143:24" pos:end="143:44">(<expr pos:start="143:25" pos:end="143:43"><name pos:start="143:25" pos:end="143:39"><name pos:start="143:25" pos:end="143:25">s</name><operator pos:start="143:26" pos:end="143:27">-&gt;</operator><name pos:start="143:28" pos:end="143:39">xll_nch_sets</name></name> <operator pos:start="143:41" pos:end="143:41">&gt;</operator> <literal type="number" pos:start="143:43" pos:end="143:43">1</literal></expr>)</condition><block type="pseudo" pos:start="145:25" pos:end="145:36"><block_content pos:start="145:25" pos:end="145:36">

                        <expr_stmt pos:start="145:25" pos:end="145:36"><expr pos:start="145:25" pos:end="145:35"><name pos:start="145:25" pos:end="145:33">bits4ABIT</name><operator pos:start="145:34" pos:end="145:35">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></else></if_stmt>



                <for pos:start="151:17" pos:end="163:17">for <control pos:start="151:21" pos:end="151:52">(<init pos:start="151:22" pos:end="151:27"><expr pos:start="151:22" pos:end="151:26"><name pos:start="151:22" pos:end="151:22">i</name> <operator pos:start="151:24" pos:end="151:24">=</operator> <literal type="number" pos:start="151:26" pos:end="151:26">0</literal></expr>;</init> <condition pos:start="151:29" pos:end="151:47"><expr pos:start="151:29" pos:end="151:46"><name pos:start="151:29" pos:end="151:29">i</name> <operator pos:start="151:31" pos:end="151:31">&lt;</operator> <name pos:start="151:33" pos:end="151:46">num_param_sets</name></expr>;</condition> <incr pos:start="151:49" pos:end="151:51"><expr pos:start="151:49" pos:end="151:51"><name pos:start="151:49" pos:end="151:49">i</name><operator pos:start="151:50" pos:end="151:51">++</operator></expr></incr>)</control> <block pos:start="151:54" pos:end="163:17">{<block_content pos:start="153:21" pos:end="161:51">

                    <expr_stmt pos:start="153:21" pos:end="153:64"><expr pos:start="153:21" pos:end="153:63"><name pos:start="153:21" pos:end="153:45"><name pos:start="153:21" pos:end="153:26">params</name><operator pos:start="153:27" pos:end="153:28">-&gt;</operator><name pos:start="153:29" pos:end="153:42">rice_code_flag</name><index pos:start="153:43" pos:end="153:45">[<expr pos:start="153:44" pos:end="153:44"><name pos:start="153:44" pos:end="153:44">i</name></expr>]</index></name> <operator pos:start="153:47" pos:end="153:47">=</operator> <call pos:start="153:49" pos:end="153:63"><name pos:start="153:49" pos:end="153:56">get_bits</name><argument_list pos:start="153:57" pos:end="153:63">(<argument pos:start="153:58" pos:end="153:59"><expr pos:start="153:58" pos:end="153:59"><name pos:start="153:58" pos:end="153:59">gb</name></expr></argument>, <argument pos:start="153:62" pos:end="153:62"><expr pos:start="153:62" pos:end="153:62"><literal type="number" pos:start="153:62" pos:end="153:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="155:21" pos:end="161:51"><if pos:start="155:21" pos:end="157:77">if <condition pos:start="155:24" pos:end="155:90">(<expr pos:start="155:25" pos:end="155:89"><operator pos:start="155:25" pos:end="155:25">!</operator><name pos:start="155:26" pos:end="155:41"><name pos:start="155:26" pos:end="155:31">params</name><operator pos:start="155:32" pos:end="155:33">-&gt;</operator><name pos:start="155:34" pos:end="155:41">seg_type</name></name> <operator pos:start="155:43" pos:end="155:44">&amp;&amp;</operator> <name pos:start="155:46" pos:end="155:70"><name pos:start="155:46" pos:end="155:51">params</name><operator pos:start="155:52" pos:end="155:53">-&gt;</operator><name pos:start="155:54" pos:end="155:67">rice_code_flag</name><index pos:start="155:68" pos:end="155:70">[<expr pos:start="155:69" pos:end="155:69"><name pos:start="155:69" pos:end="155:69">i</name></expr>]</index></name> <operator pos:start="155:72" pos:end="155:73">&amp;&amp;</operator> <call pos:start="155:75" pos:end="155:89"><name pos:start="155:75" pos:end="155:82">get_bits</name><argument_list pos:start="155:83" pos:end="155:89">(<argument pos:start="155:84" pos:end="155:85"><expr pos:start="155:84" pos:end="155:85"><name pos:start="155:84" pos:end="155:85">gb</name></expr></argument>, <argument pos:start="155:88" pos:end="155:88"><expr pos:start="155:88" pos:end="155:88"><literal type="number" pos:start="155:88" pos:end="155:88">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="157:25" pos:end="157:77"><block_content pos:start="157:25" pos:end="157:77">

                        <expr_stmt pos:start="157:25" pos:end="157:77"><expr pos:start="157:25" pos:end="157:76"><name pos:start="157:25" pos:end="157:46"><name pos:start="157:25" pos:end="157:30">params</name><operator pos:start="157:31" pos:end="157:32">-&gt;</operator><name pos:start="157:33" pos:end="157:43">pancAuxABIT</name><index pos:start="157:44" pos:end="157:46">[<expr pos:start="157:45" pos:end="157:45"><name pos:start="157:45" pos:end="157:45">i</name></expr>]</index></name> <operator pos:start="157:48" pos:end="157:48">=</operator> <call pos:start="157:50" pos:end="157:72"><name pos:start="157:50" pos:end="157:57">get_bits</name><argument_list pos:start="157:58" pos:end="157:72">(<argument pos:start="157:59" pos:end="157:60"><expr pos:start="157:59" pos:end="157:60"><name pos:start="157:59" pos:end="157:60">gb</name></expr></argument>, <argument pos:start="157:63" pos:end="157:71"><expr pos:start="157:63" pos:end="157:71"><name pos:start="157:63" pos:end="157:71">bits4ABIT</name></expr></argument>)</argument_list></call> <operator pos:start="157:74" pos:end="157:74">+</operator> <literal type="number" pos:start="157:76" pos:end="157:76">1</literal></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="159:21" pos:end="161:51">else<block type="pseudo" pos:start="161:25" pos:end="161:51"><block_content pos:start="161:25" pos:end="161:51">

                        <expr_stmt pos:start="161:25" pos:end="161:51"><expr pos:start="161:25" pos:end="161:50"><name pos:start="161:25" pos:end="161:46"><name pos:start="161:25" pos:end="161:30">params</name><operator pos:start="161:31" pos:end="161:32">-&gt;</operator><name pos:start="161:33" pos:end="161:43">pancAuxABIT</name><index pos:start="161:44" pos:end="161:46">[<expr pos:start="161:45" pos:end="161:45"><name pos:start="161:45" pos:end="161:45">i</name></expr>]</index></name> <operator pos:start="161:48" pos:end="161:48">=</operator> <literal type="number" pos:start="161:50" pos:end="161:50">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></for>



                <for pos:start="167:17" pos:end="209:17">for <control pos:start="167:21" pos:end="167:52">(<init pos:start="167:22" pos:end="167:27"><expr pos:start="167:22" pos:end="167:26"><name pos:start="167:22" pos:end="167:22">i</name> <operator pos:start="167:24" pos:end="167:24">=</operator> <literal type="number" pos:start="167:26" pos:end="167:26">0</literal></expr>;</init> <condition pos:start="167:29" pos:end="167:47"><expr pos:start="167:29" pos:end="167:46"><name pos:start="167:29" pos:end="167:29">i</name> <operator pos:start="167:31" pos:end="167:31">&lt;</operator> <name pos:start="167:33" pos:end="167:46">num_param_sets</name></expr>;</condition> <incr pos:start="167:49" pos:end="167:51"><expr pos:start="167:49" pos:end="167:51"><name pos:start="167:49" pos:end="167:49">i</name><operator pos:start="167:50" pos:end="167:51">++</operator></expr></incr>)</control> <block pos:start="167:54" pos:end="209:17">{<block_content pos:start="169:21" pos:end="207:46">

                    <if_stmt pos:start="169:21" pos:end="195:51"><if pos:start="169:21" pos:end="193:21">if <condition pos:start="169:24" pos:end="169:29">(<expr pos:start="169:25" pos:end="169:28"><operator pos:start="169:25" pos:end="169:25">!</operator><name pos:start="169:26" pos:end="169:28">seg</name></expr>)</condition> <block pos:start="169:31" pos:end="193:21">{<block_content pos:start="173:25" pos:end="191:79">

                        <comment type="block" pos:start="171:25" pos:end="171:51">/* Parameters for part 1 */</comment>

                        <expr_stmt pos:start="173:25" pos:end="173:71"><expr pos:start="173:25" pos:end="173:70"><name pos:start="173:25" pos:end="173:44"><name pos:start="173:25" pos:end="173:30">params</name><operator pos:start="173:31" pos:end="173:32">-&gt;</operator><name pos:start="173:33" pos:end="173:41">pancABIT0</name><index pos:start="173:42" pos:end="173:44">[<expr pos:start="173:43" pos:end="173:43"><name pos:start="173:43" pos:end="173:43">i</name></expr>]</index></name> <operator pos:start="173:46" pos:end="173:46">=</operator> <call pos:start="173:48" pos:end="173:70"><name pos:start="173:48" pos:end="173:55">get_bits</name><argument_list pos:start="173:56" pos:end="173:70">(<argument pos:start="173:57" pos:end="173:58"><expr pos:start="173:57" pos:end="173:58"><name pos:start="173:57" pos:end="173:58">gb</name></expr></argument>, <argument pos:start="173:61" pos:end="173:69"><expr pos:start="173:61" pos:end="173:69"><name pos:start="173:61" pos:end="173:69">bits4ABIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="175:25" pos:end="179:51"><if pos:start="175:25" pos:end="179:51">if <condition pos:start="175:28" pos:end="175:87">(<expr pos:start="175:29" pos:end="175:86"><name pos:start="175:29" pos:end="175:53"><name pos:start="175:29" pos:end="175:34">params</name><operator pos:start="175:35" pos:end="175:36">-&gt;</operator><name pos:start="175:37" pos:end="175:50">rice_code_flag</name><index pos:start="175:51" pos:end="175:53">[<expr pos:start="175:52" pos:end="175:52"><name pos:start="175:52" pos:end="175:52">i</name></expr>]</index></name> <operator pos:start="175:55" pos:end="175:56">==</operator> <literal type="number" pos:start="175:58" pos:end="175:58">0</literal> <operator pos:start="175:60" pos:end="175:61">&amp;&amp;</operator> <name pos:start="175:63" pos:end="175:82"><name pos:start="175:63" pos:end="175:68">params</name><operator pos:start="175:69" pos:end="175:70">-&gt;</operator><name pos:start="175:71" pos:end="175:79">pancABIT0</name><index pos:start="175:80" pos:end="175:82">[<expr pos:start="175:81" pos:end="175:81"><name pos:start="175:81" pos:end="175:81">i</name></expr>]</index></name> <operator pos:start="175:84" pos:end="175:84">&gt;</operator> <literal type="number" pos:start="175:86" pos:end="175:86">0</literal></expr>)</condition><block type="pseudo" pos:start="179:29" pos:end="179:51"><block_content pos:start="179:29" pos:end="179:51">

                            <comment type="block" pos:start="177:29" pos:end="177:49">/* For linear code */</comment>

                            <expr_stmt pos:start="179:29" pos:end="179:51"><expr pos:start="179:29" pos:end="179:50"><name pos:start="179:29" pos:end="179:48"><name pos:start="179:29" pos:end="179:34">params</name><operator pos:start="179:35" pos:end="179:36">-&gt;</operator><name pos:start="179:37" pos:end="179:45">pancABIT0</name><index pos:start="179:46" pos:end="179:48">[<expr pos:start="179:47" pos:end="179:47"><name pos:start="179:47" pos:end="179:47">i</name></expr>]</index></name><operator pos:start="179:49" pos:end="179:50">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



                        <comment type="block" pos:start="183:25" pos:end="183:71">/* NOTE: In the spec, not indexed by band??? */</comment>

                        <if_stmt pos:start="185:25" pos:end="191:79"><if pos:start="185:25" pos:end="187:78">if <condition pos:start="185:28" pos:end="185:50">(<expr pos:start="185:29" pos:end="185:49"><name pos:start="185:29" pos:end="185:44"><name pos:start="185:29" pos:end="185:34">params</name><operator pos:start="185:35" pos:end="185:36">-&gt;</operator><name pos:start="185:37" pos:end="185:44">seg_type</name></name> <operator pos:start="185:46" pos:end="185:47">==</operator> <literal type="number" pos:start="185:49" pos:end="185:49">0</literal></expr>)</condition><block type="pseudo" pos:start="187:29" pos:end="187:78"><block_content pos:start="187:29" pos:end="187:78">

                            <expr_stmt pos:start="187:29" pos:end="187:78"><expr pos:start="187:29" pos:end="187:77"><name pos:start="187:29" pos:end="187:50"><name pos:start="187:29" pos:end="187:34">params</name><operator pos:start="187:35" pos:end="187:36">-&gt;</operator><name pos:start="187:37" pos:end="187:47">nSamplPart0</name><index pos:start="187:48" pos:end="187:50">[<expr pos:start="187:49" pos:end="187:49"><name pos:start="187:49" pos:end="187:49">i</name></expr>]</index></name> <operator pos:start="187:52" pos:end="187:52">=</operator> <name pos:start="187:54" pos:end="187:77"><name pos:start="187:54" pos:end="187:58">chset</name><operator pos:start="187:59" pos:end="187:60">-&gt;</operator><name pos:start="187:61" pos:end="187:71">adapt_order</name><index pos:start="187:72" pos:end="187:74">[<expr pos:start="187:73" pos:end="187:73"><literal type="number" pos:start="187:73" pos:end="187:73">0</literal></expr>]</index><index pos:start="187:75" pos:end="187:77">[<expr pos:start="187:76" pos:end="187:76"><name pos:start="187:76" pos:end="187:76">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="189:25" pos:end="191:79">else<block type="pseudo" pos:start="191:29" pos:end="191:79"><block_content pos:start="191:29" pos:end="191:79">

                            <expr_stmt pos:start="191:29" pos:end="191:79"><expr pos:start="191:29" pos:end="191:78"><name pos:start="191:29" pos:end="191:50"><name pos:start="191:29" pos:end="191:34">params</name><operator pos:start="191:35" pos:end="191:36">-&gt;</operator><name pos:start="191:37" pos:end="191:47">nSamplPart0</name><index pos:start="191:48" pos:end="191:50">[<expr pos:start="191:49" pos:end="191:49"><name pos:start="191:49" pos:end="191:49">i</name></expr>]</index></name> <operator pos:start="191:52" pos:end="191:52">=</operator> <name pos:start="191:54" pos:end="191:78"><name pos:start="191:54" pos:end="191:58">chset</name><operator pos:start="191:59" pos:end="191:60">-&gt;</operator><name pos:start="191:61" pos:end="191:75">adapt_order_max</name><index pos:start="191:76" pos:end="191:78">[<expr pos:start="191:77" pos:end="191:77"><literal type="number" pos:start="191:77" pos:end="191:77">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="193:23" pos:end="195:51">else<block type="pseudo" pos:start="195:25" pos:end="195:51"><block_content pos:start="195:25" pos:end="195:51">

                        <expr_stmt pos:start="195:25" pos:end="195:51"><expr pos:start="195:25" pos:end="195:50"><name pos:start="195:25" pos:end="195:46"><name pos:start="195:25" pos:end="195:30">params</name><operator pos:start="195:31" pos:end="195:32">-&gt;</operator><name pos:start="195:33" pos:end="195:43">nSamplPart0</name><index pos:start="195:44" pos:end="195:46">[<expr pos:start="195:45" pos:end="195:45"><name pos:start="195:45" pos:end="195:45">i</name></expr>]</index></name> <operator pos:start="195:48" pos:end="195:48">=</operator> <literal type="number" pos:start="195:50" pos:end="195:50">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



                    <comment type="block" pos:start="199:21" pos:end="199:47">/* Parameters for part 2 */</comment>

                    <expr_stmt pos:start="201:21" pos:end="201:66"><expr pos:start="201:21" pos:end="201:65"><name pos:start="201:21" pos:end="201:39"><name pos:start="201:21" pos:end="201:26">params</name><operator pos:start="201:27" pos:end="201:28">-&gt;</operator><name pos:start="201:29" pos:end="201:36">pancABIT</name><index pos:start="201:37" pos:end="201:39">[<expr pos:start="201:38" pos:end="201:38"><name pos:start="201:38" pos:end="201:38">i</name></expr>]</index></name> <operator pos:start="201:41" pos:end="201:41">=</operator> <call pos:start="201:43" pos:end="201:65"><name pos:start="201:43" pos:end="201:50">get_bits</name><argument_list pos:start="201:51" pos:end="201:65">(<argument pos:start="201:52" pos:end="201:53"><expr pos:start="201:52" pos:end="201:53"><name pos:start="201:52" pos:end="201:53">gb</name></expr></argument>, <argument pos:start="201:56" pos:end="201:64"><expr pos:start="201:56" pos:end="201:64"><name pos:start="201:56" pos:end="201:64">bits4ABIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="203:21" pos:end="207:46"><if pos:start="203:21" pos:end="207:46">if <condition pos:start="203:24" pos:end="203:82">(<expr pos:start="203:25" pos:end="203:81"><name pos:start="203:25" pos:end="203:49"><name pos:start="203:25" pos:end="203:30">params</name><operator pos:start="203:31" pos:end="203:32">-&gt;</operator><name pos:start="203:33" pos:end="203:46">rice_code_flag</name><index pos:start="203:47" pos:end="203:49">[<expr pos:start="203:48" pos:end="203:48"><name pos:start="203:48" pos:end="203:48">i</name></expr>]</index></name> <operator pos:start="203:51" pos:end="203:52">==</operator> <literal type="number" pos:start="203:54" pos:end="203:54">0</literal> <operator pos:start="203:56" pos:end="203:57">&amp;&amp;</operator> <name pos:start="203:59" pos:end="203:77"><name pos:start="203:59" pos:end="203:64">params</name><operator pos:start="203:65" pos:end="203:66">-&gt;</operator><name pos:start="203:67" pos:end="203:74">pancABIT</name><index pos:start="203:75" pos:end="203:77">[<expr pos:start="203:76" pos:end="203:76"><name pos:start="203:76" pos:end="203:76">i</name></expr>]</index></name> <operator pos:start="203:79" pos:end="203:79">&gt;</operator> <literal type="number" pos:start="203:81" pos:end="203:81">0</literal></expr>)</condition><block type="pseudo" pos:start="207:25" pos:end="207:46"><block_content pos:start="207:25" pos:end="207:46">

                        <comment type="block" pos:start="205:25" pos:end="205:45">/* For linear code */</comment>

                        <expr_stmt pos:start="207:25" pos:end="207:46"><expr pos:start="207:25" pos:end="207:45"><name pos:start="207:25" pos:end="207:43"><name pos:start="207:25" pos:end="207:30">params</name><operator pos:start="207:31" pos:end="207:32">-&gt;</operator><name pos:start="207:33" pos:end="207:40">pancABIT</name><index pos:start="207:41" pos:end="207:43">[<expr pos:start="207:42" pos:end="207:42"><name pos:start="207:42" pos:end="207:42">i</name></expr>]</index></name><operator pos:start="207:44" pos:end="207:45">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

            <for pos:start="213:13" pos:end="345:13">for <control pos:start="213:17" pos:end="213:49">(<init pos:start="213:18" pos:end="213:23"><expr pos:start="213:18" pos:end="213:22"><name pos:start="213:18" pos:end="213:18">i</name> <operator pos:start="213:20" pos:end="213:20">=</operator> <literal type="number" pos:start="213:22" pos:end="213:22">0</literal></expr>;</init> <condition pos:start="213:25" pos:end="213:44"><expr pos:start="213:25" pos:end="213:43"><name pos:start="213:25" pos:end="213:25">i</name> <operator pos:start="213:27" pos:end="213:27">&lt;</operator> <name pos:start="213:29" pos:end="213:43"><name pos:start="213:29" pos:end="213:33">chset</name><operator pos:start="213:34" pos:end="213:35">-&gt;</operator><name pos:start="213:36" pos:end="213:43">channels</name></name></expr>;</condition> <incr pos:start="213:46" pos:end="213:48"><expr pos:start="213:46" pos:end="213:48"><name pos:start="213:46" pos:end="213:46">i</name><operator pos:start="213:47" pos:end="213:48">++</operator></expr></incr>)</control> <block pos:start="213:51" pos:end="345:13">{<block_content pos:start="215:17" pos:end="343:17">

                <decl_stmt pos:start="215:17" pos:end="215:59"><decl pos:start="215:17" pos:end="215:58"><type pos:start="215:17" pos:end="215:19"><name pos:start="215:17" pos:end="215:19">int</name></type> <name pos:start="215:21" pos:end="215:31">param_index</name> <init pos:start="215:33" pos:end="215:58">= <expr pos:start="215:35" pos:end="215:58"><ternary pos:start="215:35" pos:end="215:58"><condition pos:start="215:35" pos:end="215:52"><expr pos:start="215:35" pos:end="215:50"><name pos:start="215:35" pos:end="215:50"><name pos:start="215:35" pos:end="215:40">params</name><operator pos:start="215:41" pos:end="215:42">-&gt;</operator><name pos:start="215:43" pos:end="215:50">seg_type</name></name></expr> ?</condition><then pos:start="215:54" pos:end="215:54"> <expr pos:start="215:54" pos:end="215:54"><literal type="number" pos:start="215:54" pos:end="215:54">0</literal></expr> </then><else pos:start="215:56" pos:end="215:58">: <expr pos:start="215:58" pos:end="215:58"><name pos:start="215:58" pos:end="215:58">i</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="217:17" pos:end="217:65"><decl pos:start="217:17" pos:end="217:64"><type pos:start="217:17" pos:end="217:19"><name pos:start="217:17" pos:end="217:19">int</name></type> <name pos:start="217:21" pos:end="217:24">bits</name>        <init pos:start="217:33" pos:end="217:64">= <expr pos:start="217:35" pos:end="217:64"><name pos:start="217:35" pos:end="217:64"><name pos:start="217:35" pos:end="217:40">params</name><operator pos:start="217:41" pos:end="217:42">-&gt;</operator><name pos:start="217:43" pos:end="217:51">pancABIT0</name><index pos:start="217:52" pos:end="217:64">[<expr pos:start="217:53" pos:end="217:63"><name pos:start="217:53" pos:end="217:63">param_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="219:17" pos:end="219:67"><decl pos:start="219:17" pos:end="219:66"><type pos:start="219:17" pos:end="219:19"><name pos:start="219:17" pos:end="219:19">int</name></type> <name pos:start="219:21" pos:end="219:25">part0</name>       <init pos:start="219:33" pos:end="219:66">= <expr pos:start="219:35" pos:end="219:66"><name pos:start="219:35" pos:end="219:66"><name pos:start="219:35" pos:end="219:40">params</name><operator pos:start="219:41" pos:end="219:42">-&gt;</operator><name pos:start="219:43" pos:end="219:53">nSamplPart0</name><index pos:start="219:54" pos:end="219:66">[<expr pos:start="219:55" pos:end="219:65"><name pos:start="219:55" pos:end="219:65">param_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="221:17" pos:end="223:72"><decl pos:start="221:17" pos:end="223:71"><type pos:start="221:17" pos:end="221:21"><name pos:start="221:17" pos:end="221:19">int</name> <modifier pos:start="221:21" pos:end="221:21">*</modifier></type><name pos:start="221:22" pos:end="221:31">sample_buf</name> <init pos:start="221:33" pos:end="223:71">= <expr pos:start="221:35" pos:end="223:71"><name pos:start="221:35" pos:end="221:51"><name pos:start="221:35" pos:end="221:35">s</name><operator pos:start="221:36" pos:end="221:37">-&gt;</operator><name pos:start="221:38" pos:end="221:51">xll_sample_buf</name></name> <operator pos:start="221:53" pos:end="221:53">+</operator>

                                  <operator pos:start="223:35" pos:end="223:35">(</operator><name pos:start="223:36" pos:end="223:45">in_channel</name> <operator pos:start="223:47" pos:end="223:47">+</operator> <name pos:start="223:49" pos:end="223:49">i</name><operator pos:start="223:50" pos:end="223:50">)</operator> <operator pos:start="223:52" pos:end="223:52">*</operator> <name pos:start="223:54" pos:end="223:71"><name pos:start="223:54" pos:end="223:54">s</name><operator pos:start="223:55" pos:end="223:56">-&gt;</operator><name pos:start="223:57" pos:end="223:71">xll_smpl_in_seg</name></name></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="227:17" pos:end="343:17"><if pos:start="227:17" pos:end="259:17">if <condition pos:start="227:20" pos:end="227:57">(<expr pos:start="227:21" pos:end="227:56"><operator pos:start="227:21" pos:end="227:21">!</operator><name pos:start="227:22" pos:end="227:56"><name pos:start="227:22" pos:end="227:27">params</name><operator pos:start="227:28" pos:end="227:29">-&gt;</operator><name pos:start="227:30" pos:end="227:43">rice_code_flag</name><index pos:start="227:44" pos:end="227:56">[<expr pos:start="227:45" pos:end="227:55"><name pos:start="227:45" pos:end="227:55">param_index</name></expr>]</index></name></expr>)</condition> <block pos:start="227:59" pos:end="259:17">{<block_content pos:start="231:21" pos:end="257:85">

                    <comment type="block" pos:start="229:21" pos:end="229:37">/* Linear code */</comment>

                    <if_stmt pos:start="231:21" pos:end="239:77"><if pos:start="231:21" pos:end="235:66">if <condition pos:start="231:24" pos:end="231:29">(<expr pos:start="231:25" pos:end="231:28"><name pos:start="231:25" pos:end="231:28">bits</name></expr>)</condition><block type="pseudo" pos:start="233:25" pos:end="235:66"><block_content pos:start="233:25" pos:end="235:66">

                        <for pos:start="233:25" pos:end="235:66">for <control pos:start="233:29" pos:end="233:51">(<init pos:start="233:30" pos:end="233:35"><expr pos:start="233:30" pos:end="233:34"><name pos:start="233:30" pos:end="233:30">j</name> <operator pos:start="233:32" pos:end="233:32">=</operator> <literal type="number" pos:start="233:34" pos:end="233:34">0</literal></expr>;</init> <condition pos:start="233:37" pos:end="233:46"><expr pos:start="233:37" pos:end="233:45"><name pos:start="233:37" pos:end="233:37">j</name> <operator pos:start="233:39" pos:end="233:39">&lt;</operator> <name pos:start="233:41" pos:end="233:45">part0</name></expr>;</condition> <incr pos:start="233:48" pos:end="233:50"><expr pos:start="233:48" pos:end="233:50"><name pos:start="233:48" pos:end="233:48">j</name><operator pos:start="233:49" pos:end="233:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="235:29" pos:end="235:66"><block_content pos:start="235:29" pos:end="235:66">

                            <expr_stmt pos:start="235:29" pos:end="235:66"><expr pos:start="235:29" pos:end="235:65"><name pos:start="235:29" pos:end="235:41"><name pos:start="235:29" pos:end="235:38">sample_buf</name><index pos:start="235:39" pos:end="235:41">[<expr pos:start="235:40" pos:end="235:40"><name pos:start="235:40" pos:end="235:40">j</name></expr>]</index></name> <operator pos:start="235:43" pos:end="235:43">=</operator> <call pos:start="235:45" pos:end="235:65"><name pos:start="235:45" pos:end="235:55">get_bits_sm</name><argument_list pos:start="235:56" pos:end="235:65">(<argument pos:start="235:57" pos:end="235:58"><expr pos:start="235:57" pos:end="235:58"><name pos:start="235:57" pos:end="235:58">gb</name></expr></argument>, <argument pos:start="235:61" pos:end="235:64"><expr pos:start="235:61" pos:end="235:64"><name pos:start="235:61" pos:end="235:64">bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

                    <else pos:start="237:21" pos:end="239:77">else<block type="pseudo" pos:start="239:25" pos:end="239:77"><block_content pos:start="239:25" pos:end="239:77">

                        <expr_stmt pos:start="239:25" pos:end="239:77"><expr pos:start="239:25" pos:end="239:76"><call pos:start="239:25" pos:end="239:76"><name pos:start="239:25" pos:end="239:30">memset</name><argument_list pos:start="239:31" pos:end="239:76">(<argument pos:start="239:32" pos:end="239:41"><expr pos:start="239:32" pos:end="239:41"><name pos:start="239:32" pos:end="239:41">sample_buf</name></expr></argument>, <argument pos:start="239:44" pos:end="239:44"><expr pos:start="239:44" pos:end="239:44"><literal type="number" pos:start="239:44" pos:end="239:44">0</literal></expr></argument>, <argument pos:start="239:47" pos:end="239:75"><expr pos:start="239:47" pos:end="239:75"><name pos:start="239:47" pos:end="239:51">part0</name> <operator pos:start="239:53" pos:end="239:53">*</operator> <sizeof pos:start="239:55" pos:end="239:75">sizeof<argument_list pos:start="239:61" pos:end="239:75">(<argument pos:start="239:62" pos:end="239:74"><expr pos:start="239:62" pos:end="239:74"><name pos:start="239:62" pos:end="239:74"><name pos:start="239:62" pos:end="239:71">sample_buf</name><index pos:start="239:72" pos:end="239:74">[<expr pos:start="239:73" pos:end="239:73"><literal type="number" pos:start="239:73" pos:end="239:73">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



                    <comment type="block" pos:start="243:21" pos:end="243:37">/* Second part */</comment>

                    <expr_stmt pos:start="245:21" pos:end="245:57"><expr pos:start="245:21" pos:end="245:56"><name pos:start="245:21" pos:end="245:24">bits</name> <operator pos:start="245:26" pos:end="245:26">=</operator> <name pos:start="245:28" pos:end="245:56"><name pos:start="245:28" pos:end="245:33">params</name><operator pos:start="245:34" pos:end="245:35">-&gt;</operator><name pos:start="245:36" pos:end="245:43">pancABIT</name><index pos:start="245:44" pos:end="245:56">[<expr pos:start="245:45" pos:end="245:55"><name pos:start="245:45" pos:end="245:55">param_index</name></expr>]</index></name></expr>;</expr_stmt>

                    <if_stmt pos:start="247:21" pos:end="257:85"><if pos:start="247:21" pos:end="251:66">if <condition pos:start="247:24" pos:end="247:29">(<expr pos:start="247:25" pos:end="247:28"><name pos:start="247:25" pos:end="247:28">bits</name></expr>)</condition><block type="pseudo" pos:start="249:25" pos:end="251:66"><block_content pos:start="249:25" pos:end="251:66">

                        <for pos:start="249:25" pos:end="251:66">for <control pos:start="249:29" pos:end="249:68">(<init pos:start="249:30" pos:end="249:39"><expr pos:start="249:30" pos:end="249:38"><name pos:start="249:30" pos:end="249:30">j</name> <operator pos:start="249:32" pos:end="249:32">=</operator> <name pos:start="249:34" pos:end="249:38">part0</name></expr>;</init> <condition pos:start="249:41" pos:end="249:63"><expr pos:start="249:41" pos:end="249:62"><name pos:start="249:41" pos:end="249:41">j</name> <operator pos:start="249:43" pos:end="249:43">&lt;</operator> <name pos:start="249:45" pos:end="249:62"><name pos:start="249:45" pos:end="249:45">s</name><operator pos:start="249:46" pos:end="249:47">-&gt;</operator><name pos:start="249:48" pos:end="249:62">xll_smpl_in_seg</name></name></expr>;</condition> <incr pos:start="249:65" pos:end="249:67"><expr pos:start="249:65" pos:end="249:67"><name pos:start="249:65" pos:end="249:65">j</name><operator pos:start="249:66" pos:end="249:67">++</operator></expr></incr>)</control><block type="pseudo" pos:start="251:29" pos:end="251:66"><block_content pos:start="251:29" pos:end="251:66">

                            <expr_stmt pos:start="251:29" pos:end="251:66"><expr pos:start="251:29" pos:end="251:65"><name pos:start="251:29" pos:end="251:41"><name pos:start="251:29" pos:end="251:38">sample_buf</name><index pos:start="251:39" pos:end="251:41">[<expr pos:start="251:40" pos:end="251:40"><name pos:start="251:40" pos:end="251:40">j</name></expr>]</index></name> <operator pos:start="251:43" pos:end="251:43">=</operator> <call pos:start="251:45" pos:end="251:65"><name pos:start="251:45" pos:end="251:55">get_bits_sm</name><argument_list pos:start="251:56" pos:end="251:65">(<argument pos:start="251:57" pos:end="251:58"><expr pos:start="251:57" pos:end="251:58"><name pos:start="251:57" pos:end="251:58">gb</name></expr></argument>, <argument pos:start="251:61" pos:end="251:64"><expr pos:start="251:61" pos:end="251:64"><name pos:start="251:61" pos:end="251:64">bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

                    <else pos:start="253:21" pos:end="257:85">else<block type="pseudo" pos:start="255:25" pos:end="257:85"><block_content pos:start="255:25" pos:end="257:85">

                        <expr_stmt pos:start="255:25" pos:end="257:85"><expr pos:start="255:25" pos:end="257:84"><call pos:start="255:25" pos:end="257:84"><name pos:start="255:25" pos:end="255:30">memset</name><argument_list pos:start="255:31" pos:end="257:84">(<argument pos:start="255:32" pos:end="255:49"><expr pos:start="255:32" pos:end="255:49"><name pos:start="255:32" pos:end="255:41">sample_buf</name> <operator pos:start="255:43" pos:end="255:43">+</operator> <name pos:start="255:45" pos:end="255:49">part0</name></expr></argument>, <argument pos:start="255:52" pos:end="255:52"><expr pos:start="255:52" pos:end="255:52"><literal type="number" pos:start="255:52" pos:end="255:52">0</literal></expr></argument>,

                               <argument pos:start="257:32" pos:end="257:83"><expr pos:start="257:32" pos:end="257:83"><operator pos:start="257:32" pos:end="257:32">(</operator><name pos:start="257:33" pos:end="257:50"><name pos:start="257:33" pos:end="257:33">s</name><operator pos:start="257:34" pos:end="257:35">-&gt;</operator><name pos:start="257:36" pos:end="257:50">xll_smpl_in_seg</name></name> <operator pos:start="257:52" pos:end="257:52">-</operator> <name pos:start="257:54" pos:end="257:58">part0</name><operator pos:start="257:59" pos:end="257:59">)</operator> <operator pos:start="257:61" pos:end="257:61">*</operator> <sizeof pos:start="257:63" pos:end="257:83">sizeof<argument_list pos:start="257:69" pos:end="257:83">(<argument pos:start="257:70" pos:end="257:82"><expr pos:start="257:70" pos:end="257:82"><name pos:start="257:70" pos:end="257:82"><name pos:start="257:70" pos:end="257:79">sample_buf</name><index pos:start="257:80" pos:end="257:82">[<expr pos:start="257:81" pos:end="257:81"><literal type="number" pos:start="257:81" pos:end="257:81">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="259:19" pos:end="343:17">else <block pos:start="259:24" pos:end="343:17">{<block_content pos:start="261:21" pos:end="341:21">

                    <decl_stmt pos:start="261:21" pos:end="261:68"><decl pos:start="261:21" pos:end="261:67"><type pos:start="261:21" pos:end="261:23"><name pos:start="261:21" pos:end="261:23">int</name></type> <name pos:start="261:25" pos:end="261:32">aux_bits</name> <init pos:start="261:34" pos:end="261:67">= <expr pos:start="261:36" pos:end="261:67"><name pos:start="261:36" pos:end="261:67"><name pos:start="261:36" pos:end="261:41">params</name><operator pos:start="261:42" pos:end="261:43">-&gt;</operator><name pos:start="261:44" pos:end="261:54">pancAuxABIT</name><index pos:start="261:55" pos:end="261:67">[<expr pos:start="261:56" pos:end="261:66"><name pos:start="261:56" pos:end="261:66">param_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



                    <for pos:start="265:21" pos:end="279:21">for <control pos:start="265:25" pos:end="265:47">(<init pos:start="265:26" pos:end="265:31"><expr pos:start="265:26" pos:end="265:30"><name pos:start="265:26" pos:end="265:26">j</name> <operator pos:start="265:28" pos:end="265:28">=</operator> <literal type="number" pos:start="265:30" pos:end="265:30">0</literal></expr>;</init> <condition pos:start="265:33" pos:end="265:42"><expr pos:start="265:33" pos:end="265:41"><name pos:start="265:33" pos:end="265:33">j</name> <operator pos:start="265:35" pos:end="265:35">&lt;</operator> <name pos:start="265:37" pos:end="265:41">part0</name></expr>;</condition> <incr pos:start="265:44" pos:end="265:46"><expr pos:start="265:44" pos:end="265:46"><name pos:start="265:44" pos:end="265:44">j</name><operator pos:start="265:45" pos:end="265:46">++</operator></expr></incr>)</control> <block pos:start="265:49" pos:end="279:21">{<block_content pos:start="269:25" pos:end="277:75">

                        <comment type="block" pos:start="267:25" pos:end="267:70">/* FIXME: Is this identical to Golomb code? */</comment>

                        <decl_stmt pos:start="269:25" pos:end="269:61"><decl pos:start="269:25" pos:end="269:60"><type pos:start="269:25" pos:end="269:27"><name pos:start="269:25" pos:end="269:27">int</name></type> <name pos:start="269:29" pos:end="269:29">t</name> <init pos:start="269:31" pos:end="269:60">= <expr pos:start="269:33" pos:end="269:60"><call pos:start="269:33" pos:end="269:52"><name pos:start="269:33" pos:end="269:41">get_unary</name><argument_list pos:start="269:42" pos:end="269:52">(<argument pos:start="269:43" pos:end="269:44"><expr pos:start="269:43" pos:end="269:44"><name pos:start="269:43" pos:end="269:44">gb</name></expr></argument>, <argument pos:start="269:47" pos:end="269:47"><expr pos:start="269:47" pos:end="269:47"><literal type="number" pos:start="269:47" pos:end="269:47">1</literal></expr></argument>, <argument pos:start="269:50" pos:end="269:51"><expr pos:start="269:50" pos:end="269:51"><literal type="number" pos:start="269:50" pos:end="269:51">33</literal></expr></argument>)</argument_list></call> <operator pos:start="269:54" pos:end="269:55">&lt;&lt;</operator> <name pos:start="269:57" pos:end="269:60">bits</name></expr></init></decl>;</decl_stmt>

                        <comment type="block" pos:start="271:25" pos:end="271:94">/* FIXME: Could move this test outside of the loop, for efficiency. */</comment>

                        <if_stmt pos:start="273:25" pos:end="275:52"><if pos:start="273:25" pos:end="275:52">if <condition pos:start="273:28" pos:end="273:33">(<expr pos:start="273:29" pos:end="273:32"><name pos:start="273:29" pos:end="273:32">bits</name></expr>)</condition><block type="pseudo" pos:start="275:29" pos:end="275:52"><block_content pos:start="275:29" pos:end="275:52">

                            <expr_stmt pos:start="275:29" pos:end="275:52"><expr pos:start="275:29" pos:end="275:51"><name pos:start="275:29" pos:end="275:29">t</name> <operator pos:start="275:31" pos:end="275:32">|=</operator> <call pos:start="275:34" pos:end="275:51"><name pos:start="275:34" pos:end="275:41">get_bits</name><argument_list pos:start="275:42" pos:end="275:51">(<argument pos:start="275:43" pos:end="275:44"><expr pos:start="275:43" pos:end="275:44"><name pos:start="275:43" pos:end="275:44">gb</name></expr></argument>, <argument pos:start="275:47" pos:end="275:50"><expr pos:start="275:47" pos:end="275:50"><name pos:start="275:47" pos:end="275:50">bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="277:25" pos:end="277:75"><expr pos:start="277:25" pos:end="277:74"><name pos:start="277:25" pos:end="277:37"><name pos:start="277:25" pos:end="277:34">sample_buf</name><index pos:start="277:35" pos:end="277:37">[<expr pos:start="277:36" pos:end="277:36"><name pos:start="277:36" pos:end="277:36">j</name></expr>]</index></name> <operator pos:start="277:39" pos:end="277:39">=</operator> <ternary pos:start="277:41" pos:end="277:74"><condition pos:start="277:41" pos:end="277:49"><expr pos:start="277:41" pos:end="277:47"><operator pos:start="277:41" pos:end="277:41">(</operator><name pos:start="277:42" pos:end="277:42">t</name> <operator pos:start="277:44" pos:end="277:44">&amp;</operator> <literal type="number" pos:start="277:46" pos:end="277:46">1</literal><operator pos:start="277:47" pos:end="277:47">)</operator></expr> ?</condition><then pos:start="277:51" pos:end="277:63"> <expr pos:start="277:51" pos:end="277:63"><operator pos:start="277:51" pos:end="277:51">-</operator><operator pos:start="277:52" pos:end="277:52">(</operator><name pos:start="277:53" pos:end="277:53">t</name> <operator pos:start="277:55" pos:end="277:56">&gt;&gt;</operator> <literal type="number" pos:start="277:58" pos:end="277:58">1</literal><operator pos:start="277:59" pos:end="277:59">)</operator> <operator pos:start="277:61" pos:end="277:61">-</operator> <literal type="number" pos:start="277:63" pos:end="277:63">1</literal></expr> </then><else pos:start="277:65" pos:end="277:74">: <expr pos:start="277:67" pos:end="277:74"><operator pos:start="277:67" pos:end="277:67">(</operator><name pos:start="277:68" pos:end="277:68">t</name> <operator pos:start="277:70" pos:end="277:71">&gt;&gt;</operator> <literal type="number" pos:start="277:73" pos:end="277:73">1</literal><operator pos:start="277:74" pos:end="277:74">)</operator></expr></else></ternary></expr>;</expr_stmt>

                    </block_content>}</block></for>



                    <comment type="block" pos:start="283:21" pos:end="283:37">/* Second part */</comment>

                    <expr_stmt pos:start="285:21" pos:end="285:57"><expr pos:start="285:21" pos:end="285:56"><name pos:start="285:21" pos:end="285:24">bits</name> <operator pos:start="285:26" pos:end="285:26">=</operator> <name pos:start="285:28" pos:end="285:56"><name pos:start="285:28" pos:end="285:33">params</name><operator pos:start="285:34" pos:end="285:35">-&gt;</operator><name pos:start="285:36" pos:end="285:43">pancABIT</name><index pos:start="285:44" pos:end="285:56">[<expr pos:start="285:45" pos:end="285:55"><name pos:start="285:45" pos:end="285:55">param_index</name></expr>]</index></name></expr>;</expr_stmt>



                    <comment type="block" pos:start="289:21" pos:end="291:69">/* Follow the spec's suggestion of using the

                     * buffer also to store the hybrid-rice flags. */</comment>

                    <expr_stmt pos:start="293:21" pos:end="295:81"><expr pos:start="293:21" pos:end="295:80"><call pos:start="293:21" pos:end="295:80"><name pos:start="293:21" pos:end="293:26">memset</name><argument_list pos:start="293:27" pos:end="295:80">(<argument pos:start="293:28" pos:end="293:45"><expr pos:start="293:28" pos:end="293:45"><name pos:start="293:28" pos:end="293:37">sample_buf</name> <operator pos:start="293:39" pos:end="293:39">+</operator> <name pos:start="293:41" pos:end="293:45">part0</name></expr></argument>, <argument pos:start="293:48" pos:end="293:48"><expr pos:start="293:48" pos:end="293:48"><literal type="number" pos:start="293:48" pos:end="293:48">0</literal></expr></argument>,

                           <argument pos:start="295:28" pos:end="295:79"><expr pos:start="295:28" pos:end="295:79"><operator pos:start="295:28" pos:end="295:28">(</operator><name pos:start="295:29" pos:end="295:46"><name pos:start="295:29" pos:end="295:29">s</name><operator pos:start="295:30" pos:end="295:31">-&gt;</operator><name pos:start="295:32" pos:end="295:46">xll_smpl_in_seg</name></name> <operator pos:start="295:48" pos:end="295:48">-</operator> <name pos:start="295:50" pos:end="295:54">part0</name><operator pos:start="295:55" pos:end="295:55">)</operator> <operator pos:start="295:57" pos:end="295:57">*</operator> <sizeof pos:start="295:59" pos:end="295:79">sizeof<argument_list pos:start="295:65" pos:end="295:79">(<argument pos:start="295:66" pos:end="295:78"><expr pos:start="295:66" pos:end="295:78"><name pos:start="295:66" pos:end="295:78"><name pos:start="295:66" pos:end="295:75">sample_buf</name><index pos:start="295:76" pos:end="295:78">[<expr pos:start="295:77" pos:end="295:77"><literal type="number" pos:start="295:77" pos:end="295:77">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <if_stmt pos:start="299:21" pos:end="323:21"><if pos:start="299:21" pos:end="323:21">if <condition pos:start="299:24" pos:end="299:37">(<expr pos:start="299:25" pos:end="299:36"><name pos:start="299:25" pos:end="299:32">aux_bits</name> <operator pos:start="299:34" pos:end="299:34">&gt;</operator> <literal type="number" pos:start="299:36" pos:end="299:36">0</literal></expr>)</condition> <block pos:start="299:39" pos:end="323:21">{<block_content pos:start="311:25" pos:end="321:81">

                        <comment type="block" pos:start="301:25" pos:end="309:35">/* For hybrid rice encoding, some samples are linearly

                         * coded. According to the spec, "nBits4SamplLoci" bits

                         * are used for each index, but this value is not

                         * defined. I guess we should use log2(xll_smpl_in_seg)

                         * bits. */</comment>

                        <decl_stmt pos:start="311:25" pos:end="311:73"><decl pos:start="311:25" pos:end="311:72"><type pos:start="311:25" pos:end="311:27"><name pos:start="311:25" pos:end="311:27">int</name></type> <name pos:start="311:29" pos:end="311:33">count</name> <init pos:start="311:35" pos:end="311:72">= <expr pos:start="311:37" pos:end="311:72"><call pos:start="311:37" pos:end="311:72"><name pos:start="311:37" pos:end="311:44">get_bits</name><argument_list pos:start="311:45" pos:end="311:72">(<argument pos:start="311:46" pos:end="311:47"><expr pos:start="311:46" pos:end="311:47"><name pos:start="311:46" pos:end="311:47">gb</name></expr></argument>, <argument pos:start="311:50" pos:end="311:71"><expr pos:start="311:50" pos:end="311:71"><name pos:start="311:50" pos:end="311:71"><name pos:start="311:50" pos:end="311:50">s</name><operator pos:start="311:51" pos:end="311:52">-&gt;</operator><name pos:start="311:53" pos:end="311:71">xll_log_smpl_in_seg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="313:25" pos:end="315:62"><expr pos:start="313:25" pos:end="315:61"><call pos:start="313:25" pos:end="315:61"><name pos:start="313:25" pos:end="313:30">av_log</name><argument_list pos:start="313:31" pos:end="315:61">(<argument pos:start="313:32" pos:end="313:39"><expr pos:start="313:32" pos:end="313:39"><name pos:start="313:32" pos:end="313:39"><name pos:start="313:32" pos:end="313:32">s</name><operator pos:start="313:33" pos:end="313:34">-&gt;</operator><name pos:start="313:35" pos:end="313:39">avctx</name></name></expr></argument>, <argument pos:start="313:42" pos:end="313:53"><expr pos:start="313:42" pos:end="313:53"><name pos:start="313:42" pos:end="313:53">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="313:56" pos:end="313:81"><expr pos:start="313:56" pos:end="313:81"><literal type="string" pos:start="313:56" pos:end="313:81">"aux count %d (bits %d)\n"</literal></expr></argument>,

                               <argument pos:start="315:32" pos:end="315:36"><expr pos:start="315:32" pos:end="315:36"><name pos:start="315:32" pos:end="315:36">count</name></expr></argument>, <argument pos:start="315:39" pos:end="315:60"><expr pos:start="315:39" pos:end="315:60"><name pos:start="315:39" pos:end="315:60"><name pos:start="315:39" pos:end="315:39">s</name><operator pos:start="315:40" pos:end="315:41">-&gt;</operator><name pos:start="315:42" pos:end="315:60">xll_log_smpl_in_seg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <for pos:start="319:25" pos:end="321:81">for <control pos:start="319:29" pos:end="319:51">(<init pos:start="319:30" pos:end="319:35"><expr pos:start="319:30" pos:end="319:34"><name pos:start="319:30" pos:end="319:30">j</name> <operator pos:start="319:32" pos:end="319:32">=</operator> <literal type="number" pos:start="319:34" pos:end="319:34">0</literal></expr>;</init> <condition pos:start="319:37" pos:end="319:46"><expr pos:start="319:37" pos:end="319:45"><name pos:start="319:37" pos:end="319:37">j</name> <operator pos:start="319:39" pos:end="319:39">&lt;</operator> <name pos:start="319:41" pos:end="319:45">count</name></expr>;</condition> <incr pos:start="319:48" pos:end="319:50"><expr pos:start="319:48" pos:end="319:50"><name pos:start="319:48" pos:end="319:48">j</name><operator pos:start="319:49" pos:end="319:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="321:29" pos:end="321:81"><block_content pos:start="321:29" pos:end="321:81">

                            <expr_stmt pos:start="321:29" pos:end="321:81"><expr pos:start="321:29" pos:end="321:80"><name pos:start="321:29" pos:end="321:76"><name pos:start="321:29" pos:end="321:38">sample_buf</name><index pos:start="321:39" pos:end="321:76">[<expr pos:start="321:40" pos:end="321:75"><call pos:start="321:40" pos:end="321:75"><name pos:start="321:40" pos:end="321:47">get_bits</name><argument_list pos:start="321:48" pos:end="321:75">(<argument pos:start="321:49" pos:end="321:50"><expr pos:start="321:49" pos:end="321:50"><name pos:start="321:49" pos:end="321:50">gb</name></expr></argument>, <argument pos:start="321:53" pos:end="321:74"><expr pos:start="321:53" pos:end="321:74"><name pos:start="321:53" pos:end="321:74"><name pos:start="321:53" pos:end="321:53">s</name><operator pos:start="321:54" pos:end="321:55">-&gt;</operator><name pos:start="321:56" pos:end="321:74">xll_log_smpl_in_seg</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="321:78" pos:end="321:78">=</operator> <literal type="number" pos:start="321:80" pos:end="321:80">1</literal></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></if></if_stmt>

                    <for pos:start="325:21" pos:end="341:21">for <control pos:start="325:25" pos:end="325:64">(<init pos:start="325:26" pos:end="325:35"><expr pos:start="325:26" pos:end="325:34"><name pos:start="325:26" pos:end="325:26">j</name> <operator pos:start="325:28" pos:end="325:28">=</operator> <name pos:start="325:30" pos:end="325:34">part0</name></expr>;</init> <condition pos:start="325:37" pos:end="325:59"><expr pos:start="325:37" pos:end="325:58"><name pos:start="325:37" pos:end="325:37">j</name> <operator pos:start="325:39" pos:end="325:39">&lt;</operator> <name pos:start="325:41" pos:end="325:58"><name pos:start="325:41" pos:end="325:41">s</name><operator pos:start="325:42" pos:end="325:43">-&gt;</operator><name pos:start="325:44" pos:end="325:58">xll_smpl_in_seg</name></name></expr>;</condition> <incr pos:start="325:61" pos:end="325:63"><expr pos:start="325:61" pos:end="325:63"><name pos:start="325:61" pos:end="325:61">j</name><operator pos:start="325:62" pos:end="325:63">++</operator></expr></incr>)</control> <block pos:start="325:66" pos:end="341:21">{<block_content pos:start="327:25" pos:end="339:70">

                        <if_stmt pos:start="327:25" pos:end="339:70"><if pos:start="327:25" pos:end="337:25">if <condition pos:start="327:28" pos:end="327:43">(<expr pos:start="327:29" pos:end="327:42"><operator pos:start="327:29" pos:end="327:29">!</operator><name pos:start="327:30" pos:end="327:42"><name pos:start="327:30" pos:end="327:39">sample_buf</name><index pos:start="327:40" pos:end="327:42">[<expr pos:start="327:41" pos:end="327:41"><name pos:start="327:41" pos:end="327:41">j</name></expr>]</index></name></expr>)</condition> <block pos:start="327:45" pos:end="337:25">{<block_content pos:start="329:29" pos:end="335:79">

                            <decl_stmt pos:start="329:29" pos:end="329:57"><decl pos:start="329:29" pos:end="329:56"><type pos:start="329:29" pos:end="329:31"><name pos:start="329:29" pos:end="329:31">int</name></type> <name pos:start="329:33" pos:end="329:33">t</name> <init pos:start="329:35" pos:end="329:56">= <expr pos:start="329:37" pos:end="329:56"><call pos:start="329:37" pos:end="329:56"><name pos:start="329:37" pos:end="329:45">get_unary</name><argument_list pos:start="329:46" pos:end="329:56">(<argument pos:start="329:47" pos:end="329:48"><expr pos:start="329:47" pos:end="329:48"><name pos:start="329:47" pos:end="329:48">gb</name></expr></argument>, <argument pos:start="329:51" pos:end="329:51"><expr pos:start="329:51" pos:end="329:51"><literal type="number" pos:start="329:51" pos:end="329:51">1</literal></expr></argument>, <argument pos:start="329:54" pos:end="329:55"><expr pos:start="329:54" pos:end="329:55"><literal type="number" pos:start="329:54" pos:end="329:55">33</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <if_stmt pos:start="331:29" pos:end="333:69"><if pos:start="331:29" pos:end="333:69">if <condition pos:start="331:32" pos:end="331:37">(<expr pos:start="331:33" pos:end="331:36"><name pos:start="331:33" pos:end="331:36">bits</name></expr>)</condition><block type="pseudo" pos:start="333:33" pos:end="333:69"><block_content pos:start="333:33" pos:end="333:69">

                                <expr_stmt pos:start="333:33" pos:end="333:69"><expr pos:start="333:33" pos:end="333:68"><name pos:start="333:33" pos:end="333:33">t</name> <operator pos:start="333:35" pos:end="333:35">=</operator> <operator pos:start="333:37" pos:end="333:37">(</operator><name pos:start="333:38" pos:end="333:38">t</name> <operator pos:start="333:40" pos:end="333:41">&lt;&lt;</operator> <name pos:start="333:43" pos:end="333:46">bits</name><operator pos:start="333:47" pos:end="333:47">)</operator> <operator pos:start="333:49" pos:end="333:49">|</operator> <call pos:start="333:51" pos:end="333:68"><name pos:start="333:51" pos:end="333:58">get_bits</name><argument_list pos:start="333:59" pos:end="333:68">(<argument pos:start="333:60" pos:end="333:61"><expr pos:start="333:60" pos:end="333:61"><name pos:start="333:60" pos:end="333:61">gb</name></expr></argument>, <argument pos:start="333:64" pos:end="333:67"><expr pos:start="333:64" pos:end="333:67"><name pos:start="333:64" pos:end="333:67">bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="335:29" pos:end="335:79"><expr pos:start="335:29" pos:end="335:78"><name pos:start="335:29" pos:end="335:41"><name pos:start="335:29" pos:end="335:38">sample_buf</name><index pos:start="335:39" pos:end="335:41">[<expr pos:start="335:40" pos:end="335:40"><name pos:start="335:40" pos:end="335:40">j</name></expr>]</index></name> <operator pos:start="335:43" pos:end="335:43">=</operator> <ternary pos:start="335:45" pos:end="335:78"><condition pos:start="335:45" pos:end="335:53"><expr pos:start="335:45" pos:end="335:51"><operator pos:start="335:45" pos:end="335:45">(</operator><name pos:start="335:46" pos:end="335:46">t</name> <operator pos:start="335:48" pos:end="335:48">&amp;</operator> <literal type="number" pos:start="335:50" pos:end="335:50">1</literal><operator pos:start="335:51" pos:end="335:51">)</operator></expr> ?</condition><then pos:start="335:55" pos:end="335:67"> <expr pos:start="335:55" pos:end="335:67"><operator pos:start="335:55" pos:end="335:55">-</operator><operator pos:start="335:56" pos:end="335:56">(</operator><name pos:start="335:57" pos:end="335:57">t</name> <operator pos:start="335:59" pos:end="335:60">&gt;&gt;</operator> <literal type="number" pos:start="335:62" pos:end="335:62">1</literal><operator pos:start="335:63" pos:end="335:63">)</operator> <operator pos:start="335:65" pos:end="335:65">-</operator> <literal type="number" pos:start="335:67" pos:end="335:67">1</literal></expr> </then><else pos:start="335:69" pos:end="335:78">: <expr pos:start="335:71" pos:end="335:78"><operator pos:start="335:71" pos:end="335:71">(</operator><name pos:start="335:72" pos:end="335:72">t</name> <operator pos:start="335:74" pos:end="335:75">&gt;&gt;</operator> <literal type="number" pos:start="335:77" pos:end="335:77">1</literal><operator pos:start="335:78" pos:end="335:78">)</operator></expr></else></ternary></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="337:27" pos:end="339:70">else<block type="pseudo" pos:start="339:29" pos:end="339:70"><block_content pos:start="339:29" pos:end="339:70">

                            <expr_stmt pos:start="339:29" pos:end="339:70"><expr pos:start="339:29" pos:end="339:69"><name pos:start="339:29" pos:end="339:41"><name pos:start="339:29" pos:end="339:38">sample_buf</name><index pos:start="339:39" pos:end="339:41">[<expr pos:start="339:40" pos:end="339:40"><name pos:start="339:40" pos:end="339:40">j</name></expr>]</index></name> <operator pos:start="339:43" pos:end="339:43">=</operator> <call pos:start="339:45" pos:end="339:69"><name pos:start="339:45" pos:end="339:55">get_bits_sm</name><argument_list pos:start="339:56" pos:end="339:69">(<argument pos:start="339:57" pos:end="339:58"><expr pos:start="339:57" pos:end="339:58"><name pos:start="339:57" pos:end="339:58">gb</name></expr></argument>, <argument pos:start="339:61" pos:end="339:68"><expr pos:start="339:61" pos:end="339:68"><name pos:start="339:61" pos:end="339:68">aux_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>



            <for pos:start="349:13" pos:end="389:13">for <control pos:start="349:17" pos:end="349:49">(<init pos:start="349:18" pos:end="349:23"><expr pos:start="349:18" pos:end="349:22"><name pos:start="349:18" pos:end="349:18">i</name> <operator pos:start="349:20" pos:end="349:20">=</operator> <literal type="number" pos:start="349:22" pos:end="349:22">0</literal></expr>;</init> <condition pos:start="349:25" pos:end="349:44"><expr pos:start="349:25" pos:end="349:43"><name pos:start="349:25" pos:end="349:25">i</name> <operator pos:start="349:27" pos:end="349:27">&lt;</operator> <name pos:start="349:29" pos:end="349:43"><name pos:start="349:29" pos:end="349:33">chset</name><operator pos:start="349:34" pos:end="349:35">-&gt;</operator><name pos:start="349:36" pos:end="349:43">channels</name></name></expr>;</condition> <incr pos:start="349:46" pos:end="349:48"><expr pos:start="349:46" pos:end="349:48"><name pos:start="349:46" pos:end="349:46">i</name><operator pos:start="349:47" pos:end="349:48">++</operator></expr></incr>)</control> <block pos:start="349:51" pos:end="389:13">{<block_content pos:start="351:17" pos:end="387:59">

                <decl_stmt pos:start="351:17" pos:end="351:64"><decl pos:start="351:17" pos:end="351:63"><type pos:start="351:17" pos:end="351:24"><name pos:start="351:17" pos:end="351:24">unsigned</name></type> <name pos:start="351:26" pos:end="351:36">adapt_order</name> <init pos:start="351:38" pos:end="351:63">= <expr pos:start="351:40" pos:end="351:63"><name pos:start="351:40" pos:end="351:63"><name pos:start="351:40" pos:end="351:44">chset</name><operator pos:start="351:45" pos:end="351:46">-&gt;</operator><name pos:start="351:47" pos:end="351:57">adapt_order</name><index pos:start="351:58" pos:end="351:60">[<expr pos:start="351:59" pos:end="351:59"><literal type="number" pos:start="351:59" pos:end="351:59">0</literal></expr>]</index><index pos:start="351:61" pos:end="351:63">[<expr pos:start="351:62" pos:end="351:62"><name pos:start="351:62" pos:end="351:62">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="353:17" pos:end="355:72"><decl pos:start="353:17" pos:end="355:71"><type pos:start="353:17" pos:end="353:21"><name pos:start="353:17" pos:end="353:19">int</name> <modifier pos:start="353:21" pos:end="353:21">*</modifier></type><name pos:start="353:22" pos:end="353:31">sample_buf</name> <init pos:start="353:33" pos:end="355:71">= <expr pos:start="353:35" pos:end="355:71"><name pos:start="353:35" pos:end="353:51"><name pos:start="353:35" pos:end="353:35">s</name><operator pos:start="353:36" pos:end="353:37">-&gt;</operator><name pos:start="353:38" pos:end="353:51">xll_sample_buf</name></name> <operator pos:start="353:53" pos:end="353:53">+</operator>

                                  <operator pos:start="355:35" pos:end="355:35">(</operator><name pos:start="355:36" pos:end="355:45">in_channel</name> <operator pos:start="355:47" pos:end="355:47">+</operator> <name pos:start="355:49" pos:end="355:49">i</name><operator pos:start="355:50" pos:end="355:50">)</operator> <operator pos:start="355:52" pos:end="355:52">*</operator> <name pos:start="355:54" pos:end="355:71"><name pos:start="355:54" pos:end="355:54">s</name><operator pos:start="355:55" pos:end="355:56">-&gt;</operator><name pos:start="355:57" pos:end="355:71">xll_smpl_in_seg</name></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="357:17" pos:end="357:76"><decl pos:start="357:17" pos:end="357:75"><type pos:start="357:17" pos:end="357:21"><name pos:start="357:17" pos:end="357:19">int</name> <modifier pos:start="357:21" pos:end="357:21">*</modifier></type><name pos:start="357:22" pos:end="357:25">prev</name> <init pos:start="357:27" pos:end="357:75">= <expr pos:start="357:29" pos:end="357:75"><name pos:start="357:29" pos:end="357:35">history</name> <operator pos:start="357:37" pos:end="357:37">+</operator> <operator pos:start="357:39" pos:end="357:39">(</operator><name pos:start="357:40" pos:end="357:49">in_channel</name> <operator pos:start="357:51" pos:end="357:51">+</operator> <name pos:start="357:53" pos:end="357:53">i</name><operator pos:start="357:54" pos:end="357:54">)</operator> <operator pos:start="357:56" pos:end="357:56">*</operator> <name pos:start="357:58" pos:end="357:75">DCA_XLL_AORDER_MAX</name></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="361:17" pos:end="383:79"><if pos:start="361:17" pos:end="375:17">if <condition pos:start="361:20" pos:end="361:33">(<expr pos:start="361:21" pos:end="361:32"><operator pos:start="361:21" pos:end="361:21">!</operator><name pos:start="361:22" pos:end="361:32">adapt_order</name></expr>)</condition> <block pos:start="361:35" pos:end="375:17">{<block_content pos:start="363:21" pos:end="373:21">

                    <decl_stmt pos:start="363:21" pos:end="363:35"><decl pos:start="363:21" pos:end="363:34"><type pos:start="363:21" pos:end="363:28"><name pos:start="363:21" pos:end="363:28">unsigned</name></type> <name pos:start="363:30" pos:end="363:34">order</name></decl>;</decl_stmt>

                    <for pos:start="365:21" pos:end="373:21">for <control pos:start="365:25" pos:end="365:78">(<init pos:start="365:26" pos:end="365:58"><expr pos:start="365:26" pos:end="365:57"><name pos:start="365:26" pos:end="365:30">order</name> <operator pos:start="365:32" pos:end="365:32">=</operator> <name pos:start="365:34" pos:end="365:57"><name pos:start="365:34" pos:end="365:38">chset</name><operator pos:start="365:39" pos:end="365:40">-&gt;</operator><name pos:start="365:41" pos:end="365:51">fixed_order</name><index pos:start="365:52" pos:end="365:54">[<expr pos:start="365:53" pos:end="365:53"><literal type="number" pos:start="365:53" pos:end="365:53">0</literal></expr>]</index><index pos:start="365:55" pos:end="365:57">[<expr pos:start="365:56" pos:end="365:56"><name pos:start="365:56" pos:end="365:56">i</name></expr>]</index></name></expr>;</init> <condition pos:start="365:60" pos:end="365:69"><expr pos:start="365:60" pos:end="365:68"><name pos:start="365:60" pos:end="365:64">order</name> <operator pos:start="365:66" pos:end="365:66">&gt;</operator> <literal type="number" pos:start="365:68" pos:end="365:68">0</literal></expr>;</condition> <incr pos:start="365:71" pos:end="365:77"><expr pos:start="365:71" pos:end="365:77"><name pos:start="365:71" pos:end="365:75">order</name><operator pos:start="365:76" pos:end="365:77">--</operator></expr></incr>)</control> <block pos:start="365:80" pos:end="373:21">{<block_content pos:start="367:25" pos:end="371:63">

                        <decl_stmt pos:start="367:25" pos:end="367:35"><decl pos:start="367:25" pos:end="367:34"><type pos:start="367:25" pos:end="367:32"><name pos:start="367:25" pos:end="367:32">unsigned</name></type> <name pos:start="367:34" pos:end="367:34">j</name></decl>;</decl_stmt>

                        <for pos:start="369:25" pos:end="371:63">for <control pos:start="369:29" pos:end="369:64">(<init pos:start="369:30" pos:end="369:35"><expr pos:start="369:30" pos:end="369:34"><name pos:start="369:30" pos:end="369:30">j</name> <operator pos:start="369:32" pos:end="369:32">=</operator> <literal type="number" pos:start="369:34" pos:end="369:34">1</literal></expr>;</init> <condition pos:start="369:37" pos:end="369:59"><expr pos:start="369:37" pos:end="369:58"><name pos:start="369:37" pos:end="369:37">j</name> <operator pos:start="369:39" pos:end="369:39">&lt;</operator> <name pos:start="369:41" pos:end="369:58"><name pos:start="369:41" pos:end="369:41">s</name><operator pos:start="369:42" pos:end="369:43">-&gt;</operator><name pos:start="369:44" pos:end="369:58">xll_smpl_in_seg</name></name></expr>;</condition> <incr pos:start="369:61" pos:end="369:63"><expr pos:start="369:61" pos:end="369:63"><name pos:start="369:61" pos:end="369:61">j</name><operator pos:start="369:62" pos:end="369:63">++</operator></expr></incr>)</control><block type="pseudo" pos:start="371:29" pos:end="371:63"><block_content pos:start="371:29" pos:end="371:63">

                            <expr_stmt pos:start="371:29" pos:end="371:63"><expr pos:start="371:29" pos:end="371:62"><name pos:start="371:29" pos:end="371:41"><name pos:start="371:29" pos:end="371:38">sample_buf</name><index pos:start="371:39" pos:end="371:41">[<expr pos:start="371:40" pos:end="371:40"><name pos:start="371:40" pos:end="371:40">j</name></expr>]</index></name> <operator pos:start="371:43" pos:end="371:44">+=</operator> <name pos:start="371:46" pos:end="371:62"><name pos:start="371:46" pos:end="371:55">sample_buf</name><index pos:start="371:56" pos:end="371:62">[<expr pos:start="371:57" pos:end="371:61"><name pos:start="371:57" pos:end="371:57">j</name> <operator pos:start="371:59" pos:end="371:59">-</operator> <literal type="number" pos:start="371:61" pos:end="371:61">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></for>

                </block_content>}</block></if> <else pos:start="375:19" pos:end="383:79">else<block type="pseudo" pos:start="379:21" pos:end="383:79"><block_content pos:start="379:21" pos:end="383:79">

                    <comment type="block" pos:start="377:21" pos:end="377:64">/* Inverse adaptive prediction, in place. */</comment>

                    <expr_stmt pos:start="379:21" pos:end="383:79"><expr pos:start="379:21" pos:end="383:78"><call pos:start="379:21" pos:end="383:78"><name pos:start="379:21" pos:end="379:42">dca_xll_inv_adapt_pred</name><argument_list pos:start="379:43" pos:end="383:78">(<argument pos:start="379:44" pos:end="379:53"><expr pos:start="379:44" pos:end="379:53"><name pos:start="379:44" pos:end="379:53">sample_buf</name></expr></argument>, <argument pos:start="379:56" pos:end="379:73"><expr pos:start="379:56" pos:end="379:73"><name pos:start="379:56" pos:end="379:73"><name pos:start="379:56" pos:end="379:56">s</name><operator pos:start="379:57" pos:end="379:58">-&gt;</operator><name pos:start="379:59" pos:end="379:73">xll_smpl_in_seg</name></name></expr></argument>,

                                           <argument pos:start="381:44" pos:end="381:54"><expr pos:start="381:44" pos:end="381:54"><name pos:start="381:44" pos:end="381:54">adapt_order</name></expr></argument>, <argument pos:start="381:57" pos:end="381:73"><expr pos:start="381:57" pos:end="381:73"><ternary pos:start="381:57" pos:end="381:73"><condition pos:start="381:57" pos:end="381:61"><expr pos:start="381:57" pos:end="381:59"><name pos:start="381:57" pos:end="381:59">seg</name></expr> ?</condition><then pos:start="381:63" pos:end="381:66"> <expr pos:start="381:63" pos:end="381:66"><name pos:start="381:63" pos:end="381:66">prev</name></expr> </then><else pos:start="381:68" pos:end="381:73">: <expr pos:start="381:70" pos:end="381:73"><name pos:start="381:70" pos:end="381:73">NULL</name></expr></else></ternary></expr></argument>,

                                           <argument pos:start="383:44" pos:end="383:77"><expr pos:start="383:44" pos:end="383:77"><name pos:start="383:44" pos:end="383:77"><name pos:start="383:44" pos:end="383:48">chset</name><operator pos:start="383:49" pos:end="383:50">-&gt;</operator><name pos:start="383:51" pos:end="383:71">lpc_refl_coeffs_q_ind</name><index pos:start="383:72" pos:end="383:74">[<expr pos:start="383:73" pos:end="383:73"><literal type="number" pos:start="383:73" pos:end="383:73">0</literal></expr>]</index><index pos:start="383:75" pos:end="383:77">[<expr pos:start="383:76" pos:end="383:76"><name pos:start="383:76" pos:end="383:76">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="385:17" pos:end="387:59"><expr pos:start="385:17" pos:end="387:58"><call pos:start="385:17" pos:end="387:58"><name pos:start="385:17" pos:end="385:22">memcpy</name><argument_list pos:start="385:23" pos:end="387:58">(<argument pos:start="385:24" pos:end="385:27"><expr pos:start="385:24" pos:end="385:27"><name pos:start="385:24" pos:end="385:27">prev</name></expr></argument>, <argument pos:start="385:30" pos:end="385:81"><expr pos:start="385:30" pos:end="385:81"><name pos:start="385:30" pos:end="385:39">sample_buf</name> <operator pos:start="385:41" pos:end="385:41">+</operator> <name pos:start="385:43" pos:end="385:60"><name pos:start="385:43" pos:end="385:43">s</name><operator pos:start="385:44" pos:end="385:45">-&gt;</operator><name pos:start="385:46" pos:end="385:60">xll_smpl_in_seg</name></name> <operator pos:start="385:62" pos:end="385:62">-</operator> <name pos:start="385:64" pos:end="385:81">DCA_XLL_AORDER_MAX</name></expr></argument>,

                       <argument pos:start="387:24" pos:end="387:57"><expr pos:start="387:24" pos:end="387:57"><name pos:start="387:24" pos:end="387:41">DCA_XLL_AORDER_MAX</name> <operator pos:start="387:43" pos:end="387:43">*</operator> <sizeof pos:start="387:45" pos:end="387:57">sizeof<argument_list pos:start="387:51" pos:end="387:57">(<argument pos:start="387:52" pos:end="387:56"><expr pos:start="387:52" pos:end="387:56"><operator pos:start="387:52" pos:end="387:52">*</operator><name pos:start="387:53" pos:end="387:56">prev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <for pos:start="391:13" pos:end="413:13">for <control pos:start="391:17" pos:end="391:52">(<init pos:start="391:18" pos:end="391:23"><expr pos:start="391:18" pos:end="391:22"><name pos:start="391:18" pos:end="391:18">i</name> <operator pos:start="391:20" pos:end="391:20">=</operator> <literal type="number" pos:start="391:22" pos:end="391:22">1</literal></expr>;</init> <condition pos:start="391:25" pos:end="391:44"><expr pos:start="391:25" pos:end="391:43"><name pos:start="391:25" pos:end="391:25">i</name> <operator pos:start="391:27" pos:end="391:27">&lt;</operator> <name pos:start="391:29" pos:end="391:43"><name pos:start="391:29" pos:end="391:33">chset</name><operator pos:start="391:34" pos:end="391:35">-&gt;</operator><name pos:start="391:36" pos:end="391:43">channels</name></name></expr>;</condition> <incr pos:start="391:46" pos:end="391:51"><expr pos:start="391:46" pos:end="391:51"><name pos:start="391:46" pos:end="391:46">i</name> <operator pos:start="391:48" pos:end="391:49">+=</operator> <literal type="number" pos:start="391:51" pos:end="391:51">2</literal></expr></incr>)</control> <block pos:start="391:54" pos:end="413:13">{<block_content pos:start="393:17" pos:end="411:17">

                <decl_stmt pos:start="393:17" pos:end="393:64"><decl pos:start="393:17" pos:end="393:63"><type pos:start="393:17" pos:end="393:19"><name pos:start="393:17" pos:end="393:19">int</name></type> <name pos:start="393:21" pos:end="393:25">coeff</name> <init pos:start="393:27" pos:end="393:63">= <expr pos:start="393:29" pos:end="393:63"><name pos:start="393:29" pos:end="393:63"><name pos:start="393:29" pos:end="393:33">chset</name><operator pos:start="393:34" pos:end="393:35">-&gt;</operator><name pos:start="393:36" pos:end="393:53">pw_ch_pairs_coeffs</name><index pos:start="393:54" pos:end="393:56">[<expr pos:start="393:55" pos:end="393:55"><literal type="number" pos:start="393:55" pos:end="393:55">0</literal></expr>]</index><index pos:start="393:57" pos:end="393:63">[<expr pos:start="393:58" pos:end="393:62"><name pos:start="393:58" pos:end="393:58">i</name> <operator pos:start="393:60" pos:end="393:60">/</operator> <literal type="number" pos:start="393:62" pos:end="393:62">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="395:17" pos:end="411:17"><if pos:start="395:17" pos:end="411:17">if <condition pos:start="395:20" pos:end="395:31">(<expr pos:start="395:21" pos:end="395:30"><name pos:start="395:21" pos:end="395:25">coeff</name> <operator pos:start="395:27" pos:end="395:28">!=</operator> <literal type="number" pos:start="395:30" pos:end="395:30">0</literal></expr>)</condition> <block pos:start="395:33" pos:end="411:17">{<block_content pos:start="397:21" pos:end="409:78">

                    <decl_stmt pos:start="397:21" pos:end="399:76"><decl pos:start="397:21" pos:end="399:75"><type pos:start="397:21" pos:end="397:25"><name pos:start="397:21" pos:end="397:23">int</name> <modifier pos:start="397:25" pos:end="397:25">*</modifier></type><name pos:start="397:26" pos:end="397:35">sample_buf</name> <init pos:start="397:37" pos:end="399:75">= <expr pos:start="397:39" pos:end="399:75"><name pos:start="397:39" pos:end="397:55"><name pos:start="397:39" pos:end="397:39">s</name><operator pos:start="397:40" pos:end="397:41">-&gt;</operator><name pos:start="397:42" pos:end="397:55">xll_sample_buf</name></name> <operator pos:start="397:57" pos:end="397:57">+</operator>

                                      <operator pos:start="399:39" pos:end="399:39">(</operator><name pos:start="399:40" pos:end="399:49">in_channel</name> <operator pos:start="399:51" pos:end="399:51">+</operator> <name pos:start="399:53" pos:end="399:53">i</name><operator pos:start="399:54" pos:end="399:54">)</operator> <operator pos:start="399:56" pos:end="399:56">*</operator> <name pos:start="399:58" pos:end="399:75"><name pos:start="399:58" pos:end="399:58">s</name><operator pos:start="399:59" pos:end="399:60">-&gt;</operator><name pos:start="399:61" pos:end="399:75">xll_smpl_in_seg</name></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="401:21" pos:end="401:64"><decl pos:start="401:21" pos:end="401:63"><type pos:start="401:21" pos:end="401:25"><name pos:start="401:21" pos:end="401:23">int</name> <modifier pos:start="401:25" pos:end="401:25">*</modifier></type><name pos:start="401:26" pos:end="401:29">prev</name> <init pos:start="401:31" pos:end="401:63">= <expr pos:start="401:33" pos:end="401:63"><name pos:start="401:33" pos:end="401:42">sample_buf</name> <operator pos:start="401:44" pos:end="401:44">-</operator> <name pos:start="401:46" pos:end="401:63"><name pos:start="401:46" pos:end="401:46">s</name><operator pos:start="401:47" pos:end="401:48">-&gt;</operator><name pos:start="401:49" pos:end="401:63">xll_smpl_in_seg</name></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="403:21" pos:end="403:31"><decl pos:start="403:21" pos:end="403:30"><type pos:start="403:21" pos:end="403:28"><name pos:start="403:21" pos:end="403:28">unsigned</name></type> <name pos:start="403:30" pos:end="403:30">j</name></decl>;</decl_stmt>

                    <for pos:start="405:21" pos:end="409:78">for <control pos:start="405:25" pos:end="405:60">(<init pos:start="405:26" pos:end="405:31"><expr pos:start="405:26" pos:end="405:30"><name pos:start="405:26" pos:end="405:26">j</name> <operator pos:start="405:28" pos:end="405:28">=</operator> <literal type="number" pos:start="405:30" pos:end="405:30">0</literal></expr>;</init> <condition pos:start="405:33" pos:end="405:55"><expr pos:start="405:33" pos:end="405:54"><name pos:start="405:33" pos:end="405:33">j</name> <operator pos:start="405:35" pos:end="405:35">&lt;</operator> <name pos:start="405:37" pos:end="405:54"><name pos:start="405:37" pos:end="405:37">s</name><operator pos:start="405:38" pos:end="405:39">-&gt;</operator><name pos:start="405:40" pos:end="405:54">xll_smpl_in_seg</name></name></expr>;</condition> <incr pos:start="405:57" pos:end="405:59"><expr pos:start="405:57" pos:end="405:59"><name pos:start="405:57" pos:end="405:57">j</name><operator pos:start="405:58" pos:end="405:59">++</operator></expr></incr>)</control><block type="pseudo" pos:start="409:25" pos:end="409:78"><block_content pos:start="409:25" pos:end="409:78">

                        <comment type="block" pos:start="407:25" pos:end="407:79">/* Shift is unspecified, but should apparently be 3. */</comment>

                        <expr_stmt pos:start="409:25" pos:end="409:78"><expr pos:start="409:25" pos:end="409:77"><name pos:start="409:25" pos:end="409:37"><name pos:start="409:25" pos:end="409:34">sample_buf</name><index pos:start="409:35" pos:end="409:37">[<expr pos:start="409:36" pos:end="409:36"><name pos:start="409:36" pos:end="409:36">j</name></expr>]</index></name> <operator pos:start="409:39" pos:end="409:40">+=</operator> <operator pos:start="409:42" pos:end="409:42">(</operator><operator pos:start="409:43" pos:end="409:43">(</operator><name pos:start="409:44" pos:end="409:50">int64_t</name><operator pos:start="409:51" pos:end="409:51">)</operator> <name pos:start="409:53" pos:end="409:57">coeff</name> <operator pos:start="409:59" pos:end="409:59">*</operator> <name pos:start="409:61" pos:end="409:67"><name pos:start="409:61" pos:end="409:64">prev</name><index pos:start="409:65" pos:end="409:67">[<expr pos:start="409:66" pos:end="409:66"><name pos:start="409:66" pos:end="409:66">j</name></expr>]</index></name> <operator pos:start="409:69" pos:end="409:69">+</operator> <literal type="number" pos:start="409:71" pos:end="409:71">4</literal><operator pos:start="409:72" pos:end="409:72">)</operator> <operator pos:start="409:74" pos:end="409:75">&gt;&gt;</operator> <literal type="number" pos:start="409:77" pos:end="409:77">3</literal></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>



            <if_stmt pos:start="417:13" pos:end="501:13"><if pos:start="417:13" pos:end="501:13">if <condition pos:start="417:16" pos:end="417:36">(<expr pos:start="417:17" pos:end="417:35"><name pos:start="417:17" pos:end="417:35"><name pos:start="417:17" pos:end="417:17">s</name><operator pos:start="417:18" pos:end="417:19">-&gt;</operator><name pos:start="417:20" pos:end="417:35">xll_scalable_lsb</name></name></expr>)</condition> <block pos:start="417:38" pos:end="501:13">{<block_content pos:start="419:17" pos:end="499:17">

                <decl_stmt pos:start="419:17" pos:end="421:62"><decl pos:start="419:17" pos:end="421:61"><type pos:start="419:17" pos:end="419:19"><name pos:start="419:17" pos:end="419:19">int</name></type> <name pos:start="419:21" pos:end="419:29">lsb_start</name> <init pos:start="419:31" pos:end="421:61">= <expr pos:start="419:33" pos:end="421:61"><name pos:start="419:33" pos:end="419:39">end_pos</name> <operator pos:start="419:41" pos:end="419:41">-</operator> <literal type="number" pos:start="419:43" pos:end="419:43">8</literal> <operator pos:start="419:45" pos:end="419:45">*</operator> <name pos:start="419:47" pos:end="419:65"><name pos:start="419:47" pos:end="419:51">chset</name><operator pos:start="419:52" pos:end="419:53">-&gt;</operator><name pos:start="419:54" pos:end="419:62">lsb_fsize</name><index pos:start="419:63" pos:end="419:65">[<expr pos:start="419:64" pos:end="419:64"><literal type="number" pos:start="419:64" pos:end="419:64">0</literal></expr>]</index></name> <operator pos:start="419:67" pos:end="419:67">-</operator>

                                <literal type="number" pos:start="421:33" pos:end="421:33">8</literal> <operator pos:start="421:35" pos:end="421:35">*</operator> <operator pos:start="421:37" pos:end="421:37">(</operator><name pos:start="421:38" pos:end="421:56"><name pos:start="421:38" pos:end="421:38">s</name><operator pos:start="421:39" pos:end="421:40">-&gt;</operator><name pos:start="421:41" pos:end="421:56">xll_banddata_crc</name></name> <operator pos:start="421:58" pos:end="421:58">&amp;</operator> <literal type="number" pos:start="421:60" pos:end="421:60">2</literal><operator pos:start="421:61" pos:end="421:61">)</operator></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="423:17" pos:end="423:25"><decl pos:start="423:17" pos:end="423:24"><type pos:start="423:17" pos:end="423:19"><name pos:start="423:17" pos:end="423:19">int</name></type> <name pos:start="423:21" pos:end="423:24">done</name></decl>;</decl_stmt>

                <expr_stmt pos:start="425:17" pos:end="425:39"><expr pos:start="425:17" pos:end="425:38"><name pos:start="425:17" pos:end="425:17">i</name> <operator pos:start="425:19" pos:end="425:19">=</operator> <call pos:start="425:21" pos:end="425:38"><name pos:start="425:21" pos:end="425:34">get_bits_count</name><argument_list pos:start="425:35" pos:end="425:38">(<argument pos:start="425:36" pos:end="425:37"><expr pos:start="425:36" pos:end="425:37"><name pos:start="425:36" pos:end="425:37">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="427:17" pos:end="437:17"><if pos:start="427:17" pos:end="437:17">if <condition pos:start="427:20" pos:end="427:34">(<expr pos:start="427:21" pos:end="427:33"><name pos:start="427:21" pos:end="427:21">i</name> <operator pos:start="427:23" pos:end="427:23">&gt;</operator> <name pos:start="427:25" pos:end="427:33">lsb_start</name></expr>)</condition> <block pos:start="427:36" pos:end="437:17">{<block_content pos:start="429:21" pos:end="435:47">

                    <expr_stmt pos:start="429:21" pos:end="433:50"><expr pos:start="429:21" pos:end="433:49"><call pos:start="429:21" pos:end="433:49"><name pos:start="429:21" pos:end="429:26">av_log</name><argument_list pos:start="429:27" pos:end="433:49">(<argument pos:start="429:28" pos:end="429:35"><expr pos:start="429:28" pos:end="429:35"><name pos:start="429:28" pos:end="429:35"><name pos:start="429:28" pos:end="429:28">s</name><operator pos:start="429:29" pos:end="429:30">-&gt;</operator><name pos:start="429:31" pos:end="429:35">avctx</name></name></expr></argument>, <argument pos:start="429:38" pos:end="429:49"><expr pos:start="429:38" pos:end="429:49"><name pos:start="429:38" pos:end="429:49">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="431:28" pos:end="431:97"><expr pos:start="431:28" pos:end="431:97"><literal type="string" pos:start="431:28" pos:end="431:97">"chset data lsb exceeds NAVI size, end_pos %d, lsb_start %d, pos %d\n"</literal></expr></argument>,

                           <argument pos:start="433:28" pos:end="433:34"><expr pos:start="433:28" pos:end="433:34"><name pos:start="433:28" pos:end="433:34">end_pos</name></expr></argument>, <argument pos:start="433:37" pos:end="433:45"><expr pos:start="433:37" pos:end="433:45"><name pos:start="433:37" pos:end="433:45">lsb_start</name></expr></argument>, <argument pos:start="433:48" pos:end="433:48"><expr pos:start="433:48" pos:end="433:48"><name pos:start="433:48" pos:end="433:48">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="435:21" pos:end="435:47">return <expr pos:start="435:28" pos:end="435:46"><name pos:start="435:28" pos:end="435:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="439:17" pos:end="441:54"><if pos:start="439:17" pos:end="441:54">if <condition pos:start="439:20" pos:end="439:34">(<expr pos:start="439:21" pos:end="439:33"><name pos:start="439:21" pos:end="439:21">i</name> <operator pos:start="439:23" pos:end="439:23">&lt;</operator> <name pos:start="439:25" pos:end="439:33">lsb_start</name></expr>)</condition><block type="pseudo" pos:start="441:21" pos:end="441:54"><block_content pos:start="441:21" pos:end="441:54">

                    <expr_stmt pos:start="441:21" pos:end="441:54"><expr pos:start="441:21" pos:end="441:53"><call pos:start="441:21" pos:end="441:53"><name pos:start="441:21" pos:end="441:34">skip_bits_long</name><argument_list pos:start="441:35" pos:end="441:53">(<argument pos:start="441:36" pos:end="441:37"><expr pos:start="441:36" pos:end="441:37"><name pos:start="441:36" pos:end="441:37">gb</name></expr></argument>, <argument pos:start="441:40" pos:end="441:52"><expr pos:start="441:40" pos:end="441:52"><name pos:start="441:40" pos:end="441:48">lsb_start</name> <operator pos:start="441:50" pos:end="441:50">-</operator> <name pos:start="441:52" pos:end="441:52">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <for pos:start="445:17" pos:end="489:17">for <control pos:start="445:21" pos:end="445:60">(<init pos:start="445:22" pos:end="445:34"><expr pos:start="445:22" pos:end="445:33"><name pos:start="445:22" pos:end="445:22">i</name> <operator pos:start="445:24" pos:end="445:24">=</operator> <name pos:start="445:26" pos:end="445:29">done</name> <operator pos:start="445:31" pos:end="445:31">=</operator> <literal type="number" pos:start="445:33" pos:end="445:33">0</literal></expr>;</init> <condition pos:start="445:36" pos:end="445:55"><expr pos:start="445:36" pos:end="445:54"><name pos:start="445:36" pos:end="445:36">i</name> <operator pos:start="445:38" pos:end="445:38">&lt;</operator> <name pos:start="445:40" pos:end="445:54"><name pos:start="445:40" pos:end="445:44">chset</name><operator pos:start="445:45" pos:end="445:46">-&gt;</operator><name pos:start="445:47" pos:end="445:54">channels</name></name></expr>;</condition> <incr pos:start="445:57" pos:end="445:59"><expr pos:start="445:57" pos:end="445:59"><name pos:start="445:57" pos:end="445:57">i</name><operator pos:start="445:58" pos:end="445:59">++</operator></expr></incr>)</control> <block pos:start="445:62" pos:end="489:17">{<block_content pos:start="447:21" pos:end="487:21">

                    <decl_stmt pos:start="447:21" pos:end="447:58"><decl pos:start="447:21" pos:end="447:57"><type pos:start="447:21" pos:end="447:23"><name pos:start="447:21" pos:end="447:23">int</name></type> <name pos:start="447:25" pos:end="447:28">bits</name> <init pos:start="447:30" pos:end="447:57">= <expr pos:start="447:32" pos:end="447:57"><name pos:start="447:32" pos:end="447:57"><name pos:start="447:32" pos:end="447:36">chset</name><operator pos:start="447:37" pos:end="447:38">-&gt;</operator><name pos:start="447:39" pos:end="447:51">scalable_lsbs</name><index pos:start="447:52" pos:end="447:54">[<expr pos:start="447:53" pos:end="447:53"><literal type="number" pos:start="447:53" pos:end="447:53">0</literal></expr>]</index><index pos:start="447:55" pos:end="447:57">[<expr pos:start="447:56" pos:end="447:56"><name pos:start="447:56" pos:end="447:56">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="449:21" pos:end="487:21"><if pos:start="449:21" pos:end="487:21">if <condition pos:start="449:24" pos:end="449:33">(<expr pos:start="449:25" pos:end="449:32"><name pos:start="449:25" pos:end="449:28">bits</name> <operator pos:start="449:30" pos:end="449:30">&gt;</operator> <literal type="number" pos:start="449:32" pos:end="449:32">0</literal></expr>)</condition> <block pos:start="449:35" pos:end="487:21">{<block_content pos:start="457:25" pos:end="485:58">

                        <comment type="block" pos:start="451:25" pos:end="455:59">/* The channel reordering is conceptually done

                         * before adding the lsb:s, so we need to do

                         * the inverse permutation here. */</comment>

                        <decl_stmt pos:start="457:25" pos:end="457:71"><decl pos:start="457:25" pos:end="457:70"><type pos:start="457:25" pos:end="457:32"><name pos:start="457:25" pos:end="457:32">unsigned</name></type> <name pos:start="457:34" pos:end="457:35">pi</name> <init pos:start="457:37" pos:end="457:70">= <expr pos:start="457:39" pos:end="457:70"><name pos:start="457:39" pos:end="457:70"><name pos:start="457:39" pos:end="457:43">chset</name><operator pos:start="457:44" pos:end="457:45">-&gt;</operator><name pos:start="457:46" pos:end="457:64">orig_chan_order_inv</name><index pos:start="457:65" pos:end="457:67">[<expr pos:start="457:66" pos:end="457:66"><literal type="number" pos:start="457:66" pos:end="457:66">0</literal></expr>]</index><index pos:start="457:68" pos:end="457:70">[<expr pos:start="457:69" pos:end="457:69"><name pos:start="457:69" pos:end="457:69">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="459:25" pos:end="461:81"><decl pos:start="459:25" pos:end="461:80"><type pos:start="459:25" pos:end="459:29"><name pos:start="459:25" pos:end="459:27">int</name> <modifier pos:start="459:29" pos:end="459:29">*</modifier></type><name pos:start="459:30" pos:end="459:39">sample_buf</name> <init pos:start="459:41" pos:end="461:80">= <expr pos:start="459:43" pos:end="461:80"><name pos:start="459:43" pos:end="459:59"><name pos:start="459:43" pos:end="459:43">s</name><operator pos:start="459:44" pos:end="459:45">-&gt;</operator><name pos:start="459:46" pos:end="459:59">xll_sample_buf</name></name> <operator pos:start="459:61" pos:end="459:61">+</operator>

                                          <operator pos:start="461:43" pos:end="461:43">(</operator><name pos:start="461:44" pos:end="461:53">in_channel</name> <operator pos:start="461:55" pos:end="461:55">+</operator> <name pos:start="461:57" pos:end="461:58">pi</name><operator pos:start="461:59" pos:end="461:59">)</operator> <operator pos:start="461:61" pos:end="461:61">*</operator> <name pos:start="461:63" pos:end="461:80"><name pos:start="461:63" pos:end="461:63">s</name><operator pos:start="461:64" pos:end="461:65">-&gt;</operator><name pos:start="461:66" pos:end="461:80">xll_smpl_in_seg</name></name></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="463:25" pos:end="463:68"><decl pos:start="463:25" pos:end="463:67"><type pos:start="463:25" pos:end="463:27"><name pos:start="463:25" pos:end="463:27">int</name></type> <name pos:start="463:29" pos:end="463:31">adj</name> <init pos:start="463:33" pos:end="463:67">= <expr pos:start="463:35" pos:end="463:67"><name pos:start="463:35" pos:end="463:67"><name pos:start="463:35" pos:end="463:39">chset</name><operator pos:start="463:40" pos:end="463:41">-&gt;</operator><name pos:start="463:42" pos:end="463:61">bit_width_adj_per_ch</name><index pos:start="463:62" pos:end="463:64">[<expr pos:start="463:63" pos:end="463:63"><literal type="number" pos:start="463:63" pos:end="463:63">0</literal></expr>]</index><index pos:start="463:65" pos:end="463:67">[<expr pos:start="463:66" pos:end="463:66"><name pos:start="463:66" pos:end="463:66">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="465:25" pos:end="465:45"><decl pos:start="465:25" pos:end="465:44"><type pos:start="465:25" pos:end="465:27"><name pos:start="465:25" pos:end="465:27">int</name></type> <name pos:start="465:29" pos:end="465:37">msb_shift</name> <init pos:start="465:39" pos:end="465:44">= <expr pos:start="465:41" pos:end="465:44"><name pos:start="465:41" pos:end="465:44">bits</name></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="467:25" pos:end="467:35"><decl pos:start="467:25" pos:end="467:34"><type pos:start="467:25" pos:end="467:32"><name pos:start="467:25" pos:end="467:32">unsigned</name></type> <name pos:start="467:34" pos:end="467:34">j</name></decl>;</decl_stmt>



                        <if_stmt pos:start="471:25" pos:end="473:49"><if pos:start="471:25" pos:end="473:49">if <condition pos:start="471:28" pos:end="471:36">(<expr pos:start="471:29" pos:end="471:35"><name pos:start="471:29" pos:end="471:31">adj</name> <operator pos:start="471:33" pos:end="471:33">&gt;</operator> <literal type="number" pos:start="471:35" pos:end="471:35">0</literal></expr>)</condition><block type="pseudo" pos:start="473:29" pos:end="473:49"><block_content pos:start="473:29" pos:end="473:49">

                            <expr_stmt pos:start="473:29" pos:end="473:49"><expr pos:start="473:29" pos:end="473:48"><name pos:start="473:29" pos:end="473:37">msb_shift</name> <operator pos:start="473:39" pos:end="473:40">+=</operator> <name pos:start="473:42" pos:end="473:44">adj</name> <operator pos:start="473:46" pos:end="473:46">-</operator> <literal type="number" pos:start="473:48" pos:end="473:48">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



                        <for pos:start="477:25" pos:end="481:72">for <control pos:start="477:29" pos:end="477:64">(<init pos:start="477:30" pos:end="477:35"><expr pos:start="477:30" pos:end="477:34"><name pos:start="477:30" pos:end="477:30">j</name> <operator pos:start="477:32" pos:end="477:32">=</operator> <literal type="number" pos:start="477:34" pos:end="477:34">0</literal></expr>;</init> <condition pos:start="477:37" pos:end="477:59"><expr pos:start="477:37" pos:end="477:58"><name pos:start="477:37" pos:end="477:37">j</name> <operator pos:start="477:39" pos:end="477:39">&lt;</operator> <name pos:start="477:41" pos:end="477:58"><name pos:start="477:41" pos:end="477:41">s</name><operator pos:start="477:42" pos:end="477:43">-&gt;</operator><name pos:start="477:44" pos:end="477:58">xll_smpl_in_seg</name></name></expr>;</condition> <incr pos:start="477:61" pos:end="477:63"><expr pos:start="477:61" pos:end="477:63"><name pos:start="477:61" pos:end="477:61">j</name><operator pos:start="477:62" pos:end="477:63">++</operator></expr></incr>)</control><block type="pseudo" pos:start="479:29" pos:end="481:72"><block_content pos:start="479:29" pos:end="481:72">

                            <expr_stmt pos:start="479:29" pos:end="481:72"><expr pos:start="479:29" pos:end="481:71"><name pos:start="479:29" pos:end="479:41"><name pos:start="479:29" pos:end="479:38">sample_buf</name><index pos:start="479:39" pos:end="479:41">[<expr pos:start="479:40" pos:end="479:40"><name pos:start="479:40" pos:end="479:40">j</name></expr>]</index></name> <operator pos:start="479:43" pos:end="479:43">=</operator> <operator pos:start="479:45" pos:end="479:45">(</operator><name pos:start="479:46" pos:end="479:58"><name pos:start="479:46" pos:end="479:55">sample_buf</name><index pos:start="479:56" pos:end="479:58">[<expr pos:start="479:57" pos:end="479:57"><name pos:start="479:57" pos:end="479:57">j</name></expr>]</index></name> <operator pos:start="479:60" pos:end="479:61">&lt;&lt;</operator> <name pos:start="479:63" pos:end="479:71">msb_shift</name><operator pos:start="479:72" pos:end="479:72">)</operator> <operator pos:start="479:74" pos:end="479:74">+</operator>

                                            <operator pos:start="481:45" pos:end="481:45">(</operator><call pos:start="481:46" pos:end="481:63"><name pos:start="481:46" pos:end="481:53">get_bits</name><argument_list pos:start="481:54" pos:end="481:63">(<argument pos:start="481:55" pos:end="481:56"><expr pos:start="481:55" pos:end="481:56"><name pos:start="481:55" pos:end="481:56">gb</name></expr></argument>, <argument pos:start="481:59" pos:end="481:62"><expr pos:start="481:59" pos:end="481:62"><name pos:start="481:59" pos:end="481:62">bits</name></expr></argument>)</argument_list></call> <operator pos:start="481:65" pos:end="481:66">&lt;&lt;</operator> <name pos:start="481:68" pos:end="481:70">adj</name><operator pos:start="481:71" pos:end="481:71">)</operator></expr>;</expr_stmt></block_content></block></for>



                        <expr_stmt pos:start="485:25" pos:end="485:58"><expr pos:start="485:25" pos:end="485:57"><name pos:start="485:25" pos:end="485:28">done</name> <operator pos:start="485:30" pos:end="485:31">+=</operator> <name pos:start="485:33" pos:end="485:36">bits</name> <operator pos:start="485:38" pos:end="485:38">*</operator> <name pos:start="485:40" pos:end="485:57"><name pos:start="485:40" pos:end="485:40">s</name><operator pos:start="485:41" pos:end="485:42">-&gt;</operator><name pos:start="485:43" pos:end="485:57">xll_smpl_in_seg</name></name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="491:17" pos:end="499:17"><if pos:start="491:17" pos:end="499:17">if <condition pos:start="491:20" pos:end="491:51">(<expr pos:start="491:21" pos:end="491:50"><name pos:start="491:21" pos:end="491:24">done</name> <operator pos:start="491:26" pos:end="491:26">&gt;</operator> <literal type="number" pos:start="491:28" pos:end="491:28">8</literal> <operator pos:start="491:30" pos:end="491:30">*</operator> <name pos:start="491:32" pos:end="491:50"><name pos:start="491:32" pos:end="491:36">chset</name><operator pos:start="491:37" pos:end="491:38">-&gt;</operator><name pos:start="491:39" pos:end="491:47">lsb_fsize</name><index pos:start="491:48" pos:end="491:50">[<expr pos:start="491:49" pos:end="491:49"><literal type="number" pos:start="491:49" pos:end="491:49">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="491:53" pos:end="499:17">{<block_content pos:start="493:21" pos:end="497:47">

                    <expr_stmt pos:start="493:21" pos:end="495:59"><expr pos:start="493:21" pos:end="495:58"><call pos:start="493:21" pos:end="495:58"><name pos:start="493:21" pos:end="493:26">av_log</name><argument_list pos:start="493:27" pos:end="495:58">(<argument pos:start="493:28" pos:end="493:35"><expr pos:start="493:28" pos:end="493:35"><name pos:start="493:28" pos:end="493:35"><name pos:start="493:28" pos:end="493:28">s</name><operator pos:start="493:29" pos:end="493:30">-&gt;</operator><name pos:start="493:31" pos:end="493:35">avctx</name></name></expr></argument>, <argument pos:start="493:38" pos:end="493:49"><expr pos:start="493:38" pos:end="493:49"><name pos:start="493:38" pos:end="493:49">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="495:28" pos:end="495:57"><expr pos:start="495:28" pos:end="495:57"><literal type="string" pos:start="495:28" pos:end="495:57">"chset lsb exceeds lsb_size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="497:21" pos:end="497:47">return <expr pos:start="497:28" pos:end="497:46"><name pos:start="497:28" pos:end="497:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="505:13" pos:end="505:31">/* Store output. */</comment>

            <for pos:start="507:13" pos:end="569:13">for <control pos:start="507:17" pos:end="507:49">(<init pos:start="507:18" pos:end="507:23"><expr pos:start="507:18" pos:end="507:22"><name pos:start="507:18" pos:end="507:18">i</name> <operator pos:start="507:20" pos:end="507:20">=</operator> <literal type="number" pos:start="507:22" pos:end="507:22">0</literal></expr>;</init> <condition pos:start="507:25" pos:end="507:44"><expr pos:start="507:25" pos:end="507:43"><name pos:start="507:25" pos:end="507:25">i</name> <operator pos:start="507:27" pos:end="507:27">&lt;</operator> <name pos:start="507:29" pos:end="507:43"><name pos:start="507:29" pos:end="507:33">chset</name><operator pos:start="507:34" pos:end="507:35">-&gt;</operator><name pos:start="507:36" pos:end="507:43">channels</name></name></expr>;</condition> <incr pos:start="507:46" pos:end="507:48"><expr pos:start="507:46" pos:end="507:48"><name pos:start="507:46" pos:end="507:46">i</name><operator pos:start="507:47" pos:end="507:48">++</operator></expr></incr>)</control> <block pos:start="507:51" pos:end="569:13">{<block_content pos:start="509:17" pos:end="567:17">

                <decl_stmt pos:start="509:17" pos:end="511:72"><decl pos:start="509:17" pos:end="511:71"><type pos:start="509:17" pos:end="509:21"><name pos:start="509:17" pos:end="509:19">int</name> <modifier pos:start="509:21" pos:end="509:21">*</modifier></type><name pos:start="509:22" pos:end="509:31">sample_buf</name> <init pos:start="509:33" pos:end="511:71">= <expr pos:start="509:35" pos:end="511:71"><name pos:start="509:35" pos:end="509:51"><name pos:start="509:35" pos:end="509:35">s</name><operator pos:start="509:36" pos:end="509:37">-&gt;</operator><name pos:start="509:38" pos:end="509:51">xll_sample_buf</name></name> <operator pos:start="509:53" pos:end="509:53">+</operator>

                                  <operator pos:start="511:35" pos:end="511:35">(</operator><name pos:start="511:36" pos:end="511:45">in_channel</name> <operator pos:start="511:47" pos:end="511:47">+</operator> <name pos:start="511:49" pos:end="511:49">i</name><operator pos:start="511:50" pos:end="511:50">)</operator> <operator pos:start="511:52" pos:end="511:52">*</operator> <name pos:start="511:54" pos:end="511:71"><name pos:start="511:54" pos:end="511:54">s</name><operator pos:start="511:55" pos:end="511:56">-&gt;</operator><name pos:start="511:57" pos:end="511:71">xll_smpl_in_seg</name></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="513:17" pos:end="513:54"><decl pos:start="513:17" pos:end="513:53"><type pos:start="513:17" pos:end="513:19"><name pos:start="513:17" pos:end="513:19">int</name></type> <name pos:start="513:21" pos:end="513:25">shift</name> <init pos:start="513:27" pos:end="513:53">= <expr pos:start="513:29" pos:end="513:53"><literal type="number" pos:start="513:29" pos:end="513:31">1</literal> <operator pos:start="513:31" pos:end="513:31">-</operator> <name pos:start="513:33" pos:end="513:53"><name pos:start="513:33" pos:end="513:37">chset</name><operator pos:start="513:38" pos:end="513:39">-&gt;</operator><name pos:start="513:40" pos:end="513:53">bit_resolution</name></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="515:17" pos:end="515:63"><decl pos:start="515:17" pos:end="515:62"><type pos:start="515:17" pos:end="515:19"><name pos:start="515:17" pos:end="515:19">int</name></type> <name pos:start="515:21" pos:end="515:31">out_channel</name> <init pos:start="515:33" pos:end="515:62">= <expr pos:start="515:35" pos:end="515:62"><name pos:start="515:35" pos:end="515:62"><name pos:start="515:35" pos:end="515:39">chset</name><operator pos:start="515:40" pos:end="515:41">-&gt;</operator><name pos:start="515:42" pos:end="515:56">orig_chan_order</name><index pos:start="515:57" pos:end="515:59">[<expr pos:start="515:58" pos:end="515:58"><literal type="number" pos:start="515:58" pos:end="515:58">0</literal></expr>]</index><index pos:start="515:60" pos:end="515:62">[<expr pos:start="515:61" pos:end="515:61"><name pos:start="515:61" pos:end="515:61">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="517:17" pos:end="517:27"><decl pos:start="517:17" pos:end="517:26"><type pos:start="517:17" pos:end="517:23"><name pos:start="517:17" pos:end="517:21">float</name> <modifier pos:start="517:23" pos:end="517:23">*</modifier></type><name pos:start="517:24" pos:end="517:26">out</name></decl>;</decl_stmt>



                <comment type="block" pos:start="521:17" pos:end="523:46">/* XLL uses the channel order C, L, R, and we want L,

                 * R, C. FIXME: Generalize. */</comment>

                <if_stmt pos:start="525:17" pos:end="529:68"><if pos:start="525:17" pos:end="529:68">if <condition pos:start="525:20" pos:end="527:65">(<expr pos:start="525:21" pos:end="527:64"><name pos:start="525:21" pos:end="525:42"><name pos:start="525:21" pos:end="525:25">chset</name><operator pos:start="525:26" pos:end="525:27">-&gt;</operator><name pos:start="525:28" pos:end="525:42">ch_mask_enabled</name></name> <operator pos:start="525:44" pos:end="525:45">&amp;&amp;</operator>

                    <operator pos:start="527:21" pos:end="527:21">(</operator><name pos:start="527:22" pos:end="527:35"><name pos:start="527:22" pos:end="527:26">chset</name><operator pos:start="527:27" pos:end="527:28">-&gt;</operator><name pos:start="527:29" pos:end="527:35">ch_mask</name></name> <operator pos:start="527:37" pos:end="527:37">&amp;</operator> <literal type="number" pos:start="527:39" pos:end="527:39">7</literal><operator pos:start="527:40" pos:end="527:40">)</operator> <operator pos:start="527:42" pos:end="527:43">==</operator> <literal type="number" pos:start="527:45" pos:end="527:45">7</literal> <operator pos:start="527:47" pos:end="527:48">&amp;&amp;</operator> <name pos:start="527:50" pos:end="527:60">out_channel</name> <operator pos:start="527:62" pos:end="527:62">&lt;</operator> <literal type="number" pos:start="527:64" pos:end="527:64">3</literal></expr>)</condition><block type="pseudo" pos:start="529:21" pos:end="529:68"><block_content pos:start="529:21" pos:end="529:68">

                    <expr_stmt pos:start="529:21" pos:end="529:68"><expr pos:start="529:21" pos:end="529:67"><name pos:start="529:21" pos:end="529:31">out_channel</name> <operator pos:start="529:33" pos:end="529:33">=</operator> <ternary pos:start="529:35" pos:end="529:67"><condition pos:start="529:35" pos:end="529:47"><expr pos:start="529:35" pos:end="529:45"><name pos:start="529:35" pos:end="529:45">out_channel</name></expr> ?</condition><then pos:start="529:49" pos:end="529:63"> <expr pos:start="529:49" pos:end="529:63"><name pos:start="529:49" pos:end="529:59">out_channel</name> <operator pos:start="529:61" pos:end="529:61">-</operator> <literal type="number" pos:start="529:63" pos:end="529:63">1</literal></expr> </then><else pos:start="529:65" pos:end="529:67">: <expr pos:start="529:67" pos:end="529:67"><literal type="number" pos:start="529:67" pos:end="529:67">2</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <expr_stmt pos:start="533:17" pos:end="533:42"><expr pos:start="533:17" pos:end="533:41"><name pos:start="533:17" pos:end="533:27">out_channel</name> <operator pos:start="533:29" pos:end="533:30">+=</operator> <name pos:start="533:32" pos:end="533:41">in_channel</name></expr>;</expr_stmt>

                <if_stmt pos:start="535:17" pos:end="537:29"><if pos:start="535:17" pos:end="537:29">if <condition pos:start="535:20" pos:end="535:54">(<expr pos:start="535:21" pos:end="535:53"><name pos:start="535:21" pos:end="535:31">out_channel</name> <operator pos:start="535:33" pos:end="535:34">&gt;=</operator> <name pos:start="535:36" pos:end="535:53"><name pos:start="535:36" pos:end="535:36">s</name><operator pos:start="535:37" pos:end="535:38">-&gt;</operator><name pos:start="535:39" pos:end="535:43">avctx</name><operator pos:start="535:44" pos:end="535:45">-&gt;</operator><name pos:start="535:46" pos:end="535:53">channels</name></name></expr>)</condition><block type="pseudo" pos:start="537:21" pos:end="537:29"><block_content pos:start="537:21" pos:end="537:29">

                    <continue pos:start="537:21" pos:end="537:29">continue;</continue></block_content></block></if></if_stmt>



                <expr_stmt pos:start="541:17" pos:end="541:67"><expr pos:start="541:17" pos:end="541:66"><name pos:start="541:17" pos:end="541:19">out</name>  <operator pos:start="541:22" pos:end="541:22">=</operator> <operator pos:start="541:24" pos:end="541:24">(</operator><name pos:start="541:25" pos:end="541:29">float</name> <operator pos:start="541:31" pos:end="541:31">*</operator><operator pos:start="541:32" pos:end="541:32">)</operator> <name pos:start="541:34" pos:end="541:66"><name pos:start="541:34" pos:end="541:38">frame</name><operator pos:start="541:39" pos:end="541:40">-&gt;</operator><name pos:start="541:41" pos:end="541:53">extended_data</name><index pos:start="541:54" pos:end="541:66">[<expr pos:start="541:55" pos:end="541:65"><name pos:start="541:55" pos:end="541:65">out_channel</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="543:17" pos:end="543:48"><expr pos:start="543:17" pos:end="543:47"><name pos:start="543:17" pos:end="543:19">out</name> <operator pos:start="543:21" pos:end="543:22">+=</operator> <name pos:start="543:24" pos:end="543:26">seg</name> <operator pos:start="543:28" pos:end="543:28">*</operator> <name pos:start="543:30" pos:end="543:47"><name pos:start="543:30" pos:end="543:30">s</name><operator pos:start="543:31" pos:end="543:32">-&gt;</operator><name pos:start="543:33" pos:end="543:47">xll_smpl_in_seg</name></name></expr>;</expr_stmt>



                <comment type="block" pos:start="547:17" pos:end="547:76">/* NOTE: A one bit means residual encoding is *not* used. */</comment>

                <if_stmt pos:start="549:17" pos:end="567:17"><if pos:start="549:17" pos:end="559:17">if <condition pos:start="549:20" pos:end="549:54">(<expr pos:start="549:21" pos:end="549:53"><operator pos:start="549:21" pos:end="549:21">(</operator><name pos:start="549:22" pos:end="549:43"><name pos:start="549:22" pos:end="549:26">chset</name><operator pos:start="549:27" pos:end="549:28">-&gt;</operator><name pos:start="549:29" pos:end="549:43">residual_encode</name></name> <operator pos:start="549:45" pos:end="549:46">&gt;&gt;</operator> <name pos:start="549:48" pos:end="549:48">i</name><operator pos:start="549:49" pos:end="549:49">)</operator> <operator pos:start="549:51" pos:end="549:51">&amp;</operator> <literal type="number" pos:start="549:53" pos:end="549:53">1</literal></expr>)</condition> <block pos:start="549:56" pos:end="559:17">{<block_content pos:start="555:21" pos:end="557:62">

                    <comment type="block" pos:start="551:21" pos:end="553:71">/* Replace channel samples.

                     * FIXME: Most likely not the right thing to do. */</comment>

                    <for pos:start="555:21" pos:end="557:62">for <control pos:start="555:25" pos:end="555:60">(<init pos:start="555:26" pos:end="555:31"><expr pos:start="555:26" pos:end="555:30"><name pos:start="555:26" pos:end="555:26">j</name> <operator pos:start="555:28" pos:end="555:28">=</operator> <literal type="number" pos:start="555:30" pos:end="555:30">0</literal></expr>;</init> <condition pos:start="555:33" pos:end="555:55"><expr pos:start="555:33" pos:end="555:54"><name pos:start="555:33" pos:end="555:33">j</name> <operator pos:start="555:35" pos:end="555:35">&lt;</operator> <name pos:start="555:37" pos:end="555:54"><name pos:start="555:37" pos:end="555:37">s</name><operator pos:start="555:38" pos:end="555:39">-&gt;</operator><name pos:start="555:40" pos:end="555:54">xll_smpl_in_seg</name></name></expr>;</condition> <incr pos:start="555:57" pos:end="555:59"><expr pos:start="555:57" pos:end="555:59"><name pos:start="555:57" pos:end="555:57">j</name><operator pos:start="555:58" pos:end="555:59">++</operator></expr></incr>)</control><block type="pseudo" pos:start="557:25" pos:end="557:62"><block_content pos:start="557:25" pos:end="557:62">

                        <expr_stmt pos:start="557:25" pos:end="557:62"><expr pos:start="557:25" pos:end="557:61"><name pos:start="557:25" pos:end="557:30"><name pos:start="557:25" pos:end="557:27">out</name><index pos:start="557:28" pos:end="557:30">[<expr pos:start="557:29" pos:end="557:29"><name pos:start="557:29" pos:end="557:29">j</name></expr>]</index></name> <operator pos:start="557:32" pos:end="557:32">=</operator> <call pos:start="557:34" pos:end="557:61"><name pos:start="557:34" pos:end="557:39">ldexpf</name><argument_list pos:start="557:40" pos:end="557:61">(<argument pos:start="557:41" pos:end="557:53"><expr pos:start="557:41" pos:end="557:53"><name pos:start="557:41" pos:end="557:53"><name pos:start="557:41" pos:end="557:50">sample_buf</name><index pos:start="557:51" pos:end="557:53">[<expr pos:start="557:52" pos:end="557:52"><name pos:start="557:52" pos:end="557:52">j</name></expr>]</index></name></expr></argument>, <argument pos:start="557:56" pos:end="557:60"><expr pos:start="557:56" pos:end="557:60"><name pos:start="557:56" pos:end="557:60">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if> <else pos:start="559:19" pos:end="567:17">else <block pos:start="559:24" pos:end="567:17">{<block_content pos:start="563:21" pos:end="565:63">

                    <comment type="block" pos:start="561:21" pos:end="561:61">/* Add residual signal to core channel */</comment>

                    <for pos:start="563:21" pos:end="565:63">for <control pos:start="563:25" pos:end="563:60">(<init pos:start="563:26" pos:end="563:31"><expr pos:start="563:26" pos:end="563:30"><name pos:start="563:26" pos:end="563:26">j</name> <operator pos:start="563:28" pos:end="563:28">=</operator> <literal type="number" pos:start="563:30" pos:end="563:30">0</literal></expr>;</init> <condition pos:start="563:33" pos:end="563:55"><expr pos:start="563:33" pos:end="563:54"><name pos:start="563:33" pos:end="563:33">j</name> <operator pos:start="563:35" pos:end="563:35">&lt;</operator> <name pos:start="563:37" pos:end="563:54"><name pos:start="563:37" pos:end="563:37">s</name><operator pos:start="563:38" pos:end="563:39">-&gt;</operator><name pos:start="563:40" pos:end="563:54">xll_smpl_in_seg</name></name></expr>;</condition> <incr pos:start="563:57" pos:end="563:59"><expr pos:start="563:57" pos:end="563:59"><name pos:start="563:57" pos:end="563:57">j</name><operator pos:start="563:58" pos:end="563:59">++</operator></expr></incr>)</control><block type="pseudo" pos:start="565:25" pos:end="565:63"><block_content pos:start="565:25" pos:end="565:63">

                        <expr_stmt pos:start="565:25" pos:end="565:63"><expr pos:start="565:25" pos:end="565:62"><name pos:start="565:25" pos:end="565:30"><name pos:start="565:25" pos:end="565:27">out</name><index pos:start="565:28" pos:end="565:30">[<expr pos:start="565:29" pos:end="565:29"><name pos:start="565:29" pos:end="565:29">j</name></expr>]</index></name> <operator pos:start="565:32" pos:end="565:33">+=</operator> <call pos:start="565:35" pos:end="565:62"><name pos:start="565:35" pos:end="565:40">ldexpf</name><argument_list pos:start="565:41" pos:end="565:62">(<argument pos:start="565:42" pos:end="565:54"><expr pos:start="565:42" pos:end="565:54"><name pos:start="565:42" pos:end="565:54"><name pos:start="565:42" pos:end="565:51">sample_buf</name><index pos:start="565:52" pos:end="565:54">[<expr pos:start="565:53" pos:end="565:53"><name pos:start="565:53" pos:end="565:53">j</name></expr>]</index></name></expr></argument>, <argument pos:start="565:57" pos:end="565:61"><expr pos:start="565:57" pos:end="565:61"><name pos:start="565:57" pos:end="565:61">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>



            <if_stmt pos:start="573:13" pos:end="645:13"><if pos:start="573:13" pos:end="645:13">if <condition pos:start="573:16" pos:end="575:60">(<expr pos:start="573:17" pos:end="575:59"><name pos:start="573:17" pos:end="573:50"><name pos:start="573:17" pos:end="573:21">chset</name><operator pos:start="573:22" pos:end="573:23">-&gt;</operator><name pos:start="573:24" pos:end="573:50">downmix_coeff_code_embedded</name></name> <operator pos:start="573:52" pos:end="573:53">&amp;&amp;</operator>

                <operator pos:start="575:17" pos:end="575:17">!</operator><name pos:start="575:18" pos:end="575:38"><name pos:start="575:18" pos:end="575:22">chset</name><operator pos:start="575:23" pos:end="575:24">-&gt;</operator><name pos:start="575:25" pos:end="575:38">primary_ch_set</name></name> <operator pos:start="575:40" pos:end="575:41">&amp;&amp;</operator> <name pos:start="575:43" pos:end="575:59"><name pos:start="575:43" pos:end="575:47">chset</name><operator pos:start="575:48" pos:end="575:49">-&gt;</operator><name pos:start="575:50" pos:end="575:59">hier_chset</name></name></expr>)</condition> <block pos:start="575:62" pos:end="645:13">{<block_content pos:start="579:17" pos:end="643:17">

                <comment type="block" pos:start="577:17" pos:end="577:68">/* Undo hierarchical downmix of earlier channels. */</comment>

                <decl_stmt pos:start="579:17" pos:end="579:37"><decl pos:start="579:17" pos:end="579:36"><type pos:start="579:17" pos:end="579:24"><name pos:start="579:17" pos:end="579:24">unsigned</name></type> <name pos:start="579:26" pos:end="579:36">mix_channel</name></decl>;</decl_stmt>

                <for pos:start="581:17" pos:end="643:17">for <control pos:start="581:21" pos:end="581:78">(<init pos:start="581:22" pos:end="581:37"><expr pos:start="581:22" pos:end="581:36"><name pos:start="581:22" pos:end="581:32">mix_channel</name> <operator pos:start="581:34" pos:end="581:34">=</operator> <literal type="number" pos:start="581:36" pos:end="581:36">0</literal></expr>;</init> <condition pos:start="581:39" pos:end="581:63"><expr pos:start="581:39" pos:end="581:62"><name pos:start="581:39" pos:end="581:49">mix_channel</name> <operator pos:start="581:51" pos:end="581:51">&lt;</operator> <name pos:start="581:53" pos:end="581:62">in_channel</name></expr>;</condition> <incr pos:start="581:65" pos:end="581:77"><expr pos:start="581:65" pos:end="581:77"><name pos:start="581:65" pos:end="581:75">mix_channel</name><operator pos:start="581:76" pos:end="581:77">++</operator></expr></incr>)</control> <block pos:start="581:80" pos:end="643:17">{<block_content pos:start="583:21" pos:end="641:25">

                    <decl_stmt pos:start="583:21" pos:end="583:35"><decl pos:start="583:21" pos:end="583:34"><type pos:start="583:21" pos:end="583:27"><name pos:start="583:21" pos:end="583:25">float</name> <modifier pos:start="583:27" pos:end="583:27">*</modifier></type><name pos:start="583:28" pos:end="583:34">mix_buf</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="585:21" pos:end="585:35"><decl pos:start="585:21" pos:end="585:34"><type pos:start="585:21" pos:end="585:31"><specifier pos:start="585:21" pos:end="585:25">const</specifier> <name pos:start="585:27" pos:end="585:29">int</name> <modifier pos:start="585:31" pos:end="585:31">*</modifier></type><name pos:start="585:32" pos:end="585:34">col</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="587:21" pos:end="587:32"><decl pos:start="587:21" pos:end="587:31"><type pos:start="587:21" pos:end="587:25"><name pos:start="587:21" pos:end="587:25">float</name></type> <name pos:start="587:27" pos:end="587:31">coeff</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="589:21" pos:end="589:33"><decl pos:start="589:21" pos:end="589:32"><type pos:start="589:21" pos:end="589:28"><name pos:start="589:21" pos:end="589:28">unsigned</name></type> <name pos:start="589:30" pos:end="589:32">row</name></decl>;</decl_stmt>

                    <comment type="block" pos:start="591:21" pos:end="591:77">/* Similar channel reorder C, L, R vs L, R, C reorder. */</comment>

                    <if_stmt pos:start="593:21" pos:end="601:78"><if pos:start="593:21" pos:end="597:100">if <condition pos:start="593:24" pos:end="595:69">(<expr pos:start="593:25" pos:end="595:68"><name pos:start="593:25" pos:end="593:46"><name pos:start="593:25" pos:end="593:29">chset</name><operator pos:start="593:30" pos:end="593:31">-&gt;</operator><name pos:start="593:32" pos:end="593:46">ch_mask_enabled</name></name> <operator pos:start="593:48" pos:end="593:49">&amp;&amp;</operator>

                        <operator pos:start="595:25" pos:end="595:25">(</operator><name pos:start="595:26" pos:end="595:39"><name pos:start="595:26" pos:end="595:30">chset</name><operator pos:start="595:31" pos:end="595:32">-&gt;</operator><name pos:start="595:33" pos:end="595:39">ch_mask</name></name> <operator pos:start="595:41" pos:end="595:41">&amp;</operator> <literal type="number" pos:start="595:43" pos:end="595:43">7</literal><operator pos:start="595:44" pos:end="595:44">)</operator> <operator pos:start="595:46" pos:end="595:47">==</operator> <literal type="number" pos:start="595:49" pos:end="595:49">7</literal> <operator pos:start="595:51" pos:end="595:52">&amp;&amp;</operator> <name pos:start="595:54" pos:end="595:64">mix_channel</name> <operator pos:start="595:66" pos:end="595:66">&lt;</operator> <literal type="number" pos:start="595:68" pos:end="595:68">3</literal></expr>)</condition><block type="pseudo" pos:start="597:25" pos:end="597:100"><block_content pos:start="597:25" pos:end="597:100">

                        <expr_stmt pos:start="597:25" pos:end="597:100"><expr pos:start="597:25" pos:end="597:99"><name pos:start="597:25" pos:end="597:31">mix_buf</name> <operator pos:start="597:33" pos:end="597:33">=</operator> <operator pos:start="597:35" pos:end="597:35">(</operator><name pos:start="597:36" pos:end="597:40">float</name> <operator pos:start="597:42" pos:end="597:42">*</operator><operator pos:start="597:43" pos:end="597:43">)</operator> <name pos:start="597:45" pos:end="597:99"><name pos:start="597:45" pos:end="597:49">frame</name><operator pos:start="597:50" pos:end="597:51">-&gt;</operator><name pos:start="597:52" pos:end="597:64">extended_data</name><index pos:start="597:65" pos:end="597:99">[<expr pos:start="597:66" pos:end="597:98"><ternary pos:start="597:66" pos:end="597:98"><condition pos:start="597:66" pos:end="597:78"><expr pos:start="597:66" pos:end="597:76"><name pos:start="597:66" pos:end="597:76">mix_channel</name></expr> ?</condition><then pos:start="597:80" pos:end="597:94"> <expr pos:start="597:80" pos:end="597:94"><name pos:start="597:80" pos:end="597:90">mix_channel</name> <operator pos:start="597:92" pos:end="597:92">-</operator> <literal type="number" pos:start="597:94" pos:end="597:94">1</literal></expr> </then><else pos:start="597:96" pos:end="597:98">: <expr pos:start="597:98" pos:end="597:98"><literal type="number" pos:start="597:98" pos:end="597:98">2</literal></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="599:21" pos:end="601:78">else<block type="pseudo" pos:start="601:25" pos:end="601:78"><block_content pos:start="601:25" pos:end="601:78">

                        <expr_stmt pos:start="601:25" pos:end="601:78"><expr pos:start="601:25" pos:end="601:77"><name pos:start="601:25" pos:end="601:31">mix_buf</name> <operator pos:start="601:33" pos:end="601:33">=</operator> <operator pos:start="601:35" pos:end="601:35">(</operator><name pos:start="601:36" pos:end="601:40">float</name> <operator pos:start="601:42" pos:end="601:42">*</operator><operator pos:start="601:43" pos:end="601:43">)</operator> <name pos:start="601:45" pos:end="601:77"><name pos:start="601:45" pos:end="601:49">frame</name><operator pos:start="601:50" pos:end="601:51">-&gt;</operator><name pos:start="601:52" pos:end="601:64">extended_data</name><index pos:start="601:65" pos:end="601:77">[<expr pos:start="601:66" pos:end="601:76"><name pos:start="601:66" pos:end="601:76">mix_channel</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



                    <expr_stmt pos:start="605:21" pos:end="605:56"><expr pos:start="605:21" pos:end="605:55"><name pos:start="605:21" pos:end="605:27">mix_buf</name> <operator pos:start="605:29" pos:end="605:30">+=</operator> <name pos:start="605:32" pos:end="605:34">seg</name> <operator pos:start="605:36" pos:end="605:36">*</operator> <name pos:start="605:38" pos:end="605:55"><name pos:start="605:38" pos:end="605:38">s</name><operator pos:start="605:39" pos:end="605:40">-&gt;</operator><name pos:start="605:41" pos:end="605:55">xll_smpl_in_seg</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="607:21" pos:end="607:86"><expr pos:start="607:21" pos:end="607:85"><name pos:start="607:21" pos:end="607:23">col</name> <operator pos:start="607:25" pos:end="607:25">=</operator> <operator pos:start="607:27" pos:end="607:27">&amp;</operator><name pos:start="607:28" pos:end="607:85"><name pos:start="607:28" pos:end="607:32">chset</name><operator pos:start="607:33" pos:end="607:34">-&gt;</operator><name pos:start="607:35" pos:end="607:48">downmix_coeffs</name><index pos:start="607:49" pos:end="607:85">[<expr pos:start="607:50" pos:end="607:84"><name pos:start="607:50" pos:end="607:60">mix_channel</name> <operator pos:start="607:62" pos:end="607:62">*</operator> <operator pos:start="607:64" pos:end="607:64">(</operator><name pos:start="607:65" pos:end="607:79"><name pos:start="607:65" pos:end="607:69">chset</name><operator pos:start="607:70" pos:end="607:71">-&gt;</operator><name pos:start="607:72" pos:end="607:79">channels</name></name> <operator pos:start="607:81" pos:end="607:81">+</operator> <literal type="number" pos:start="607:83" pos:end="607:83">1</literal><operator pos:start="607:84" pos:end="607:84">)</operator></expr>]</index></name></expr>;</expr_stmt>



                    <comment type="block" pos:start="611:21" pos:end="611:31">/* Scale */</comment>

                    <expr_stmt pos:start="613:21" pos:end="613:48"><expr pos:start="613:21" pos:end="613:47"><name pos:start="613:21" pos:end="613:25">coeff</name> <operator pos:start="613:27" pos:end="613:27">=</operator> <call pos:start="613:29" pos:end="613:47"><name pos:start="613:29" pos:end="613:34">ldexpf</name><argument_list pos:start="613:35" pos:end="613:47">(<argument pos:start="613:36" pos:end="613:41"><expr pos:start="613:36" pos:end="613:41"><name pos:start="613:36" pos:end="613:41"><name pos:start="613:36" pos:end="613:38">col</name><index pos:start="613:39" pos:end="613:41">[<expr pos:start="613:40" pos:end="613:40"><literal type="number" pos:start="613:40" pos:end="613:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="613:44" pos:end="613:46"><expr pos:start="613:44" pos:end="613:46"><operator pos:start="613:44" pos:end="613:44">-</operator><literal type="number" pos:start="613:45" pos:end="613:46">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="615:21" pos:end="617:44">for <control pos:start="615:25" pos:end="615:60">(<init pos:start="615:26" pos:end="615:31"><expr pos:start="615:26" pos:end="615:30"><name pos:start="615:26" pos:end="615:26">j</name> <operator pos:start="615:28" pos:end="615:28">=</operator> <literal type="number" pos:start="615:30" pos:end="615:30">0</literal></expr>;</init> <condition pos:start="615:33" pos:end="615:55"><expr pos:start="615:33" pos:end="615:54"><name pos:start="615:33" pos:end="615:33">j</name> <operator pos:start="615:35" pos:end="615:35">&lt;</operator> <name pos:start="615:37" pos:end="615:54"><name pos:start="615:37" pos:end="615:37">s</name><operator pos:start="615:38" pos:end="615:39">-&gt;</operator><name pos:start="615:40" pos:end="615:54">xll_smpl_in_seg</name></name></expr>;</condition> <incr pos:start="615:57" pos:end="615:59"><expr pos:start="615:57" pos:end="615:59"><name pos:start="615:57" pos:end="615:57">j</name><operator pos:start="615:58" pos:end="615:59">++</operator></expr></incr>)</control><block type="pseudo" pos:start="617:25" pos:end="617:44"><block_content pos:start="617:25" pos:end="617:44">

                        <expr_stmt pos:start="617:25" pos:end="617:44"><expr pos:start="617:25" pos:end="617:43"><name pos:start="617:25" pos:end="617:34"><name pos:start="617:25" pos:end="617:31">mix_buf</name><index pos:start="617:32" pos:end="617:34">[<expr pos:start="617:33" pos:end="617:33"><name pos:start="617:33" pos:end="617:33">j</name></expr>]</index></name> <operator pos:start="617:36" pos:end="617:37">*=</operator> <name pos:start="617:39" pos:end="617:43">coeff</name></expr>;</expr_stmt></block_content></block></for>



                    <for pos:start="621:21" pos:end="641:25">for <control pos:start="621:25" pos:end="625:31">(<init pos:start="621:26" pos:end="621:33"><expr pos:start="621:26" pos:end="621:32"><name pos:start="621:26" pos:end="621:28">row</name> <operator pos:start="621:30" pos:end="621:30">=</operator> <literal type="number" pos:start="621:32" pos:end="621:32">0</literal></expr>;</init>

                         <condition pos:start="623:26" pos:end="623:88"><expr pos:start="623:26" pos:end="623:87"><name pos:start="623:26" pos:end="623:28">row</name> <operator pos:start="623:30" pos:end="623:30">&lt;</operator> <name pos:start="623:32" pos:end="623:46"><name pos:start="623:32" pos:end="623:36">chset</name><operator pos:start="623:37" pos:end="623:38">-&gt;</operator><name pos:start="623:39" pos:end="623:46">channels</name></name> <operator pos:start="623:48" pos:end="623:49">&amp;&amp;</operator> <name pos:start="623:51" pos:end="623:60">in_channel</name> <operator pos:start="623:62" pos:end="623:62">+</operator> <name pos:start="623:64" pos:end="623:66">row</name> <operator pos:start="623:68" pos:end="623:68">&lt;</operator> <name pos:start="623:70" pos:end="623:87"><name pos:start="623:70" pos:end="623:70">s</name><operator pos:start="623:71" pos:end="623:72">-&gt;</operator><name pos:start="623:73" pos:end="623:77">avctx</name><operator pos:start="623:78" pos:end="623:79">-&gt;</operator><name pos:start="623:80" pos:end="623:87">channels</name></name></expr>;</condition>

                         <incr pos:start="625:26" pos:end="625:30"><expr pos:start="625:26" pos:end="625:30"><name pos:start="625:26" pos:end="625:28">row</name><operator pos:start="625:29" pos:end="625:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="627:25" pos:end="641:25"><block_content pos:start="627:25" pos:end="641:25">

                        <if_stmt pos:start="627:25" pos:end="641:25"><if pos:start="627:25" pos:end="641:25">if <condition pos:start="627:28" pos:end="627:41">(<expr pos:start="627:29" pos:end="627:40"><name pos:start="627:29" pos:end="627:40"><name pos:start="627:29" pos:end="627:31">col</name><index pos:start="627:32" pos:end="627:40">[<expr pos:start="627:33" pos:end="627:39"><name pos:start="627:33" pos:end="627:35">row</name> <operator pos:start="627:37" pos:end="627:37">+</operator> <literal type="number" pos:start="627:39" pos:end="627:39">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="627:43" pos:end="641:25">{<block_content pos:start="629:29" pos:end="639:69">

                            <decl_stmt pos:start="629:29" pos:end="631:87"><decl pos:start="629:29" pos:end="631:86"><type pos:start="629:29" pos:end="629:41"><specifier pos:start="629:29" pos:end="629:33">const</specifier> <name pos:start="629:35" pos:end="629:39">float</name> <modifier pos:start="629:41" pos:end="629:41">*</modifier></type><name pos:start="629:42" pos:end="629:52">new_channel</name> <init pos:start="629:54" pos:end="631:86">=

                                <expr pos:start="631:33" pos:end="631:86"><operator pos:start="631:33" pos:end="631:33">(</operator><specifier pos:start="631:34" pos:end="631:38">const</specifier> <name pos:start="631:40" pos:end="631:44">float</name> <operator pos:start="631:46" pos:end="631:46">*</operator><operator pos:start="631:47" pos:end="631:47">)</operator> <name pos:start="631:49" pos:end="631:86"><name pos:start="631:49" pos:end="631:53">frame</name><operator pos:start="631:54" pos:end="631:55">-&gt;</operator><name pos:start="631:56" pos:end="631:68">extended_data</name><index pos:start="631:69" pos:end="631:86">[<expr pos:start="631:70" pos:end="631:85"><name pos:start="631:70" pos:end="631:79">in_channel</name> <operator pos:start="631:81" pos:end="631:81">+</operator> <name pos:start="631:83" pos:end="631:85">row</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="633:29" pos:end="633:68"><expr pos:start="633:29" pos:end="633:67"><name pos:start="633:29" pos:end="633:39">new_channel</name> <operator pos:start="633:41" pos:end="633:42">+=</operator> <name pos:start="633:44" pos:end="633:46">seg</name> <operator pos:start="633:48" pos:end="633:48">*</operator> <name pos:start="633:50" pos:end="633:67"><name pos:start="633:50" pos:end="633:50">s</name><operator pos:start="633:51" pos:end="633:52">-&gt;</operator><name pos:start="633:53" pos:end="633:67">xll_smpl_in_seg</name></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="635:29" pos:end="635:69"><expr pos:start="635:29" pos:end="635:68"><name pos:start="635:29" pos:end="635:33">coeff</name>        <operator pos:start="635:42" pos:end="635:42">=</operator> <call pos:start="635:44" pos:end="635:68"><name pos:start="635:44" pos:end="635:49">ldexpf</name><argument_list pos:start="635:50" pos:end="635:68">(<argument pos:start="635:51" pos:end="635:62"><expr pos:start="635:51" pos:end="635:62"><name pos:start="635:51" pos:end="635:62"><name pos:start="635:51" pos:end="635:53">col</name><index pos:start="635:54" pos:end="635:62">[<expr pos:start="635:55" pos:end="635:61"><name pos:start="635:55" pos:end="635:57">row</name> <operator pos:start="635:59" pos:end="635:59">+</operator> <literal type="number" pos:start="635:61" pos:end="635:61">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="635:65" pos:end="635:67"><expr pos:start="635:65" pos:end="635:67"><operator pos:start="635:65" pos:end="635:65">-</operator><literal type="number" pos:start="635:66" pos:end="635:67">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="637:29" pos:end="639:69">for <control pos:start="637:33" pos:end="637:68">(<init pos:start="637:34" pos:end="637:39"><expr pos:start="637:34" pos:end="637:38"><name pos:start="637:34" pos:end="637:34">j</name> <operator pos:start="637:36" pos:end="637:36">=</operator> <literal type="number" pos:start="637:38" pos:end="637:38">0</literal></expr>;</init> <condition pos:start="637:41" pos:end="637:63"><expr pos:start="637:41" pos:end="637:62"><name pos:start="637:41" pos:end="637:41">j</name> <operator pos:start="637:43" pos:end="637:43">&lt;</operator> <name pos:start="637:45" pos:end="637:62"><name pos:start="637:45" pos:end="637:45">s</name><operator pos:start="637:46" pos:end="637:47">-&gt;</operator><name pos:start="637:48" pos:end="637:62">xll_smpl_in_seg</name></name></expr>;</condition> <incr pos:start="637:65" pos:end="637:67"><expr pos:start="637:65" pos:end="637:67"><name pos:start="637:65" pos:end="637:65">j</name><operator pos:start="637:66" pos:end="637:67">++</operator></expr></incr>)</control><block type="pseudo" pos:start="639:33" pos:end="639:69"><block_content pos:start="639:33" pos:end="639:69">

                                <expr_stmt pos:start="639:33" pos:end="639:69"><expr pos:start="639:33" pos:end="639:68"><name pos:start="639:33" pos:end="639:42"><name pos:start="639:33" pos:end="639:39">mix_buf</name><index pos:start="639:40" pos:end="639:42">[<expr pos:start="639:41" pos:end="639:41"><name pos:start="639:41" pos:end="639:41">j</name></expr>]</index></name> <operator pos:start="639:44" pos:end="639:45">-=</operator> <name pos:start="639:47" pos:end="639:51">coeff</name> <operator pos:start="639:53" pos:end="639:53">*</operator> <name pos:start="639:55" pos:end="639:68"><name pos:start="639:55" pos:end="639:65">new_channel</name><index pos:start="639:66" pos:end="639:68">[<expr pos:start="639:67" pos:end="639:67"><name pos:start="639:67" pos:end="639:67">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></if></if_stmt></block_content></block></for>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>



<label pos:start="649:1" pos:end="649:11"><name pos:start="649:1" pos:end="649:10">next_chset</name>:</label>

            <expr_stmt pos:start="651:13" pos:end="651:42"><expr pos:start="651:13" pos:end="651:41"><name pos:start="651:13" pos:end="651:22">in_channel</name> <operator pos:start="651:24" pos:end="651:25">+=</operator> <name pos:start="651:27" pos:end="651:41"><name pos:start="651:27" pos:end="651:31">chset</name><operator pos:start="651:32" pos:end="651:33">-&gt;</operator><name pos:start="651:34" pos:end="651:41">channels</name></name></expr>;</expr_stmt>

            <comment type="block" pos:start="653:13" pos:end="653:63">/* Skip to next channel set using the NAVI info. */</comment>

            <expr_stmt pos:start="655:13" pos:end="655:35"><expr pos:start="655:13" pos:end="655:34"><name pos:start="655:13" pos:end="655:13">i</name> <operator pos:start="655:15" pos:end="655:15">=</operator> <call pos:start="655:17" pos:end="655:34"><name pos:start="655:17" pos:end="655:30">get_bits_count</name><argument_list pos:start="655:31" pos:end="655:34">(<argument pos:start="655:32" pos:end="655:33"><expr pos:start="655:32" pos:end="655:33"><name pos:start="655:32" pos:end="655:33">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="657:13" pos:end="665:13"><if pos:start="657:13" pos:end="665:13">if <condition pos:start="657:16" pos:end="657:28">(<expr pos:start="657:17" pos:end="657:27"><name pos:start="657:17" pos:end="657:17">i</name> <operator pos:start="657:19" pos:end="657:19">&gt;</operator> <name pos:start="657:21" pos:end="657:27">end_pos</name></expr>)</condition> <block pos:start="657:30" pos:end="665:13">{<block_content pos:start="659:17" pos:end="663:43">

                <expr_stmt pos:start="659:17" pos:end="661:57"><expr pos:start="659:17" pos:end="661:56"><call pos:start="659:17" pos:end="661:56"><name pos:start="659:17" pos:end="659:22">av_log</name><argument_list pos:start="659:23" pos:end="661:56">(<argument pos:start="659:24" pos:end="659:31"><expr pos:start="659:24" pos:end="659:31"><name pos:start="659:24" pos:end="659:31"><name pos:start="659:24" pos:end="659:24">s</name><operator pos:start="659:25" pos:end="659:26">-&gt;</operator><name pos:start="659:27" pos:end="659:31">avctx</name></name></expr></argument>, <argument pos:start="659:34" pos:end="659:45"><expr pos:start="659:34" pos:end="659:45"><name pos:start="659:34" pos:end="659:45">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="661:24" pos:end="661:55"><expr pos:start="661:24" pos:end="661:55"><literal type="string" pos:start="661:24" pos:end="661:55">"chset data exceeds NAVI size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="663:17" pos:end="663:43">return <expr pos:start="663:24" pos:end="663:42"><name pos:start="663:24" pos:end="663:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="667:13" pos:end="669:48"><if pos:start="667:13" pos:end="669:48">if <condition pos:start="667:16" pos:end="667:28">(<expr pos:start="667:17" pos:end="667:27"><name pos:start="667:17" pos:end="667:17">i</name> <operator pos:start="667:19" pos:end="667:19">&lt;</operator> <name pos:start="667:21" pos:end="667:27">end_pos</name></expr>)</condition><block type="pseudo" pos:start="669:17" pos:end="669:48"><block_content pos:start="669:17" pos:end="669:48">

                <expr_stmt pos:start="669:17" pos:end="669:48"><expr pos:start="669:17" pos:end="669:47"><call pos:start="669:17" pos:end="669:47"><name pos:start="669:17" pos:end="669:30">skip_bits_long</name><argument_list pos:start="669:31" pos:end="669:47">(<argument pos:start="669:32" pos:end="669:33"><expr pos:start="669:32" pos:end="669:33"><name pos:start="669:32" pos:end="669:33">gb</name></expr></argument>, <argument pos:start="669:36" pos:end="669:46"><expr pos:start="669:36" pos:end="669:46"><name pos:start="669:36" pos:end="669:42">end_pos</name> <operator pos:start="669:44" pos:end="669:44">-</operator> <name pos:start="669:46" pos:end="669:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <return pos:start="675:5" pos:end="675:13">return <expr pos:start="675:12" pos:end="675:12"><literal type="number" pos:start="675:12" pos:end="675:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
