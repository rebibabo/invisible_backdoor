<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15663.c" pos:tabs="8"><function pos:start="1:1" pos:end="221:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">check_oflag_copied</name><parameter_list pos:start="1:30" pos:end="3:48">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:72"><decl pos:start="1:53" pos:end="1:72"><type pos:start="1:53" pos:end="1:72"><name pos:start="1:53" pos:end="1:67">BdrvCheckResult</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">res</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:47"><decl pos:start="3:31" pos:end="3:47"><type pos:start="3:31" pos:end="3:47"><name pos:start="3:31" pos:end="3:43">BdrvCheckMode</name></type> <name pos:start="3:45" pos:end="3:47">fix</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="221:1">{<block_content pos:start="7:5" pos:end="219:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:62"><decl pos:start="9:5" pos:end="9:61"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">uint64_t</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:22">l2_table</name> <init pos:start="9:24" pos:end="9:61">= <expr pos:start="9:26" pos:end="9:61"><call pos:start="9:26" pos:end="9:61"><name pos:start="9:26" pos:end="9:40">qemu_blockalign</name><argument_list pos:start="9:41" pos:end="9:61">(<argument pos:start="9:42" pos:end="9:43"><expr pos:start="9:42" pos:end="9:43"><name pos:start="9:42" pos:end="9:43">bs</name></expr></argument>, <argument pos:start="9:46" pos:end="9:60"><expr pos:start="9:46" pos:end="9:60"><name pos:start="9:46" pos:end="9:60"><name pos:start="9:46" pos:end="9:46">s</name><operator pos:start="9:47" pos:end="9:48">-&gt;</operator><name pos:start="9:49" pos:end="9:60">cluster_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:16">refcount</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:13"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:12"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:12">j</name></decl>;</decl_stmt>



    <for pos:start="19:5" pos:end="207:5">for <control pos:start="19:9" pos:end="19:36">(<init pos:start="19:10" pos:end="19:15"><expr pos:start="19:10" pos:end="19:14"><name pos:start="19:10" pos:end="19:10">i</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</init> <condition pos:start="19:17" pos:end="19:31"><expr pos:start="19:17" pos:end="19:30"><name pos:start="19:17" pos:end="19:17">i</name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <name pos:start="19:21" pos:end="19:30"><name pos:start="19:21" pos:end="19:21">s</name><operator pos:start="19:22" pos:end="19:23">-&gt;</operator><name pos:start="19:24" pos:end="19:30">l1_size</name></name></expr>;</condition> <incr pos:start="19:33" pos:end="19:35"><expr pos:start="19:33" pos:end="19:35"><name pos:start="19:33" pos:end="19:33">i</name><operator pos:start="19:34" pos:end="19:35">++</operator></expr></incr>)</control> <block pos:start="19:38" pos:end="207:5">{<block_content pos:start="21:9" pos:end="205:9">

        <decl_stmt pos:start="21:9" pos:end="21:43"><decl pos:start="21:9" pos:end="21:42"><type pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:16">uint64_t</name></type> <name pos:start="21:18" pos:end="21:25">l1_entry</name> <init pos:start="21:27" pos:end="21:42">= <expr pos:start="21:29" pos:end="21:42"><name pos:start="21:29" pos:end="21:42"><name pos:start="21:29" pos:end="21:29">s</name><operator pos:start="21:30" pos:end="21:31">-&gt;</operator><name pos:start="21:32" pos:end="21:39">l1_table</name><index pos:start="21:40" pos:end="21:42">[<expr pos:start="21:41" pos:end="21:41"><name pos:start="21:41" pos:end="21:41">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:56"><decl pos:start="23:9" pos:end="23:55"><type pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:16">uint64_t</name></type> <name pos:start="23:18" pos:end="23:26">l2_offset</name> <init pos:start="23:28" pos:end="23:55">= <expr pos:start="23:30" pos:end="23:55"><name pos:start="23:30" pos:end="23:37">l1_entry</name> <operator pos:start="23:39" pos:end="23:39">&amp;</operator> <name pos:start="23:41" pos:end="23:55">L1E_OFFSET_MASK</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:30"><decl pos:start="25:9" pos:end="25:29"><type pos:start="25:9" pos:end="25:12"><name pos:start="25:9" pos:end="25:12">bool</name></type> <name pos:start="25:14" pos:end="25:21">l2_dirty</name> <init pos:start="25:23" pos:end="25:29">= <expr pos:start="25:25" pos:end="25:29"><name pos:start="25:25" pos:end="25:29">false</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:23">(<expr pos:start="29:13" pos:end="29:22"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:22">l2_offset</name></expr>)</condition> <block pos:start="29:25" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:21">

            <continue pos:start="31:13" pos:end="31:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:66"><expr pos:start="37:9" pos:end="37:65"><name pos:start="37:9" pos:end="37:16">refcount</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:65"><name pos:start="37:20" pos:end="37:31">get_refcount</name><argument_list pos:start="37:32" pos:end="37:65">(<argument pos:start="37:33" pos:end="37:34"><expr pos:start="37:33" pos:end="37:34"><name pos:start="37:33" pos:end="37:34">bs</name></expr></argument>, <argument pos:start="37:37" pos:end="37:64"><expr pos:start="37:37" pos:end="37:64"><name pos:start="37:37" pos:end="37:45">l2_offset</name> <operator pos:start="37:47" pos:end="37:48">&gt;&gt;</operator> <name pos:start="37:50" pos:end="37:64"><name pos:start="37:50" pos:end="37:50">s</name><operator pos:start="37:51" pos:end="37:52">-&gt;</operator><name pos:start="37:53" pos:end="37:64">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:25">(<expr pos:start="39:13" pos:end="39:24"><name pos:start="39:13" pos:end="39:20">refcount</name> <operator pos:start="39:22" pos:end="39:22">&lt;</operator> <literal type="number" pos:start="39:24" pos:end="39:24">0</literal></expr>)</condition> <block pos:start="39:27" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:21">

            <comment type="block" pos:start="41:13" pos:end="41:64">/* don't print message nor increment check_errors */</comment>

            <continue pos:start="43:13" pos:end="43:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="47:9" pos:end="85:9"><if pos:start="47:9" pos:end="85:9">if <condition pos:start="47:12" pos:end="47:69">(<expr pos:start="47:13" pos:end="47:68"><operator pos:start="47:13" pos:end="47:13">(</operator><name pos:start="47:14" pos:end="47:21">refcount</name> <operator pos:start="47:23" pos:end="47:24">==</operator> <literal type="number" pos:start="47:26" pos:end="47:26">1</literal><operator pos:start="47:27" pos:end="47:27">)</operator> <operator pos:start="47:29" pos:end="47:30">!=</operator> <operator pos:start="47:32" pos:end="47:32">(</operator><operator pos:start="47:33" pos:end="47:33">(</operator><name pos:start="47:34" pos:end="47:41">l1_entry</name> <operator pos:start="47:43" pos:end="47:43">&amp;</operator> <name pos:start="47:45" pos:end="47:61">QCOW_OFLAG_COPIED</name><operator pos:start="47:62" pos:end="47:62">)</operator> <operator pos:start="47:64" pos:end="47:65">!=</operator> <literal type="number" pos:start="47:67" pos:end="47:67">0</literal><operator pos:start="47:68" pos:end="47:68">)</operator></expr>)</condition> <block pos:start="47:71" pos:end="85:9">{<block_content pos:start="49:13" pos:end="83:13">

            <expr_stmt pos:start="49:13" pos:end="57:43"><expr pos:start="49:13" pos:end="57:42"><call pos:start="49:13" pos:end="57:42"><name pos:start="49:13" pos:end="49:19">fprintf</name><argument_list pos:start="49:20" pos:end="57:42">(<argument pos:start="49:21" pos:end="49:26"><expr pos:start="49:21" pos:end="49:26"><name pos:start="49:21" pos:end="49:26">stderr</name></expr></argument>, <argument pos:start="49:29" pos:end="51:56"><expr pos:start="49:29" pos:end="51:56"><literal type="string" pos:start="49:29" pos:end="49:70">"%s OFLAG_COPIED L2 cluster: l1_index=%d "</literal>

                    <literal type="string" pos:start="51:21" pos:end="51:32">"l1_entry=%"</literal> <name pos:start="51:34" pos:end="51:39">PRIx64</name> <literal type="string" pos:start="51:41" pos:end="51:56">" refcount=%d\n"</literal></expr></argument>,

                    <argument pos:start="53:21" pos:end="55:51"><expr pos:start="53:21" pos:end="55:51"><ternary pos:start="53:21" pos:end="55:51"><condition pos:start="53:21" pos:end="53:43"><expr pos:start="53:21" pos:end="53:41"><name pos:start="53:21" pos:end="53:23">fix</name> <operator pos:start="53:25" pos:end="53:25">&amp;</operator> <name pos:start="53:27" pos:end="53:41">BDRV_FIX_ERRORS</name></expr> ?</condition><then pos:start="53:45" pos:end="53:55"> <expr pos:start="53:45" pos:end="53:55"><literal type="string" pos:start="53:45" pos:end="53:55">"Repairing"</literal></expr> </then><else pos:start="53:57" pos:end="55:51">:

                                            <expr pos:start="55:45" pos:end="55:51"><literal type="string" pos:start="55:45" pos:end="55:51">"ERROR"</literal></expr></else></ternary></expr></argument>,

                    <argument pos:start="57:21" pos:end="57:21"><expr pos:start="57:21" pos:end="57:21"><name pos:start="57:21" pos:end="57:21">i</name></expr></argument>, <argument pos:start="57:24" pos:end="57:31"><expr pos:start="57:24" pos:end="57:31"><name pos:start="57:24" pos:end="57:31">l1_entry</name></expr></argument>, <argument pos:start="57:34" pos:end="57:41"><expr pos:start="57:34" pos:end="57:41"><name pos:start="57:34" pos:end="57:41">refcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="83:13"><if pos:start="59:13" pos:end="79:13">if <condition pos:start="59:16" pos:end="59:38">(<expr pos:start="59:17" pos:end="59:37"><name pos:start="59:17" pos:end="59:19">fix</name> <operator pos:start="59:21" pos:end="59:21">&amp;</operator> <name pos:start="59:23" pos:end="59:37">BDRV_FIX_ERRORS</name></expr>)</condition> <block pos:start="59:40" pos:end="79:13">{<block_content pos:start="61:17" pos:end="77:41">

                <expr_stmt pos:start="61:17" pos:end="65:63"><expr pos:start="61:17" pos:end="65:62"><name pos:start="61:17" pos:end="61:30"><name pos:start="61:17" pos:end="61:17">s</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:27">l1_table</name><index pos:start="61:28" pos:end="61:30">[<expr pos:start="61:29" pos:end="61:29"><name pos:start="61:29" pos:end="61:29">i</name></expr>]</index></name> <operator pos:start="61:32" pos:end="61:32">=</operator> <ternary pos:start="61:34" pos:end="65:62"><condition pos:start="61:34" pos:end="63:32"><expr pos:start="61:34" pos:end="61:46"><name pos:start="61:34" pos:end="61:41">refcount</name> <operator pos:start="61:43" pos:end="61:44">==</operator> <literal type="number" pos:start="61:46" pos:end="61:46">1</literal></expr>

                               ?</condition><then pos:start="63:34" pos:end="63:62"> <expr pos:start="63:34" pos:end="63:62"><name pos:start="63:34" pos:end="63:41">l1_entry</name> <operator pos:start="63:43" pos:end="63:43">|</operator>  <name pos:start="63:46" pos:end="63:62">QCOW_OFLAG_COPIED</name></expr>

                               </then><else pos:start="65:32" pos:end="65:62">: <expr pos:start="65:34" pos:end="65:62"><name pos:start="65:34" pos:end="65:41">l1_entry</name> <operator pos:start="65:43" pos:end="65:43">&amp;</operator> <operator pos:start="65:45" pos:end="65:45">~</operator><name pos:start="65:46" pos:end="65:62">QCOW_OFLAG_COPIED</name></expr></else></ternary></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:50"><expr pos:start="67:17" pos:end="67:49"><name pos:start="67:17" pos:end="67:19">ret</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <call pos:start="67:23" pos:end="67:49"><name pos:start="67:23" pos:end="67:42">qcow2_write_l1_entry</name><argument_list pos:start="67:43" pos:end="67:49">(<argument pos:start="67:44" pos:end="67:45"><expr pos:start="67:44" pos:end="67:45"><name pos:start="67:44" pos:end="67:45">bs</name></expr></argument>, <argument pos:start="67:48" pos:end="67:48"><expr pos:start="67:48" pos:end="67:48"><name pos:start="67:48" pos:end="67:48">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="69:17" pos:end="75:17"><if pos:start="69:17" pos:end="75:17">if <condition pos:start="69:20" pos:end="69:28">(<expr pos:start="69:21" pos:end="69:27"><name pos:start="69:21" pos:end="69:23">ret</name> <operator pos:start="69:25" pos:end="69:25">&lt;</operator> <literal type="number" pos:start="69:27" pos:end="69:27">0</literal></expr>)</condition> <block pos:start="69:30" pos:end="75:17">{<block_content pos:start="71:21" pos:end="73:30">

                    <expr_stmt pos:start="71:21" pos:end="71:40"><expr pos:start="71:21" pos:end="71:39"><name pos:start="71:21" pos:end="71:37"><name pos:start="71:21" pos:end="71:23">res</name><operator pos:start="71:24" pos:end="71:25">-&gt;</operator><name pos:start="71:26" pos:end="71:37">check_errors</name></name><operator pos:start="71:38" pos:end="71:39">++</operator></expr>;</expr_stmt>

                    <goto pos:start="73:21" pos:end="73:30">goto <name pos:start="73:26" pos:end="73:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:41"><expr pos:start="77:17" pos:end="77:40"><name pos:start="77:17" pos:end="77:38"><name pos:start="77:17" pos:end="77:19">res</name><operator pos:start="77:20" pos:end="77:21">-&gt;</operator><name pos:start="77:22" pos:end="77:38">corruptions_fixed</name></name><operator pos:start="77:39" pos:end="77:40">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="79:15" pos:end="83:13">else <block pos:start="79:20" pos:end="83:13">{<block_content pos:start="81:17" pos:end="81:35">

                <expr_stmt pos:start="81:17" pos:end="81:35"><expr pos:start="81:17" pos:end="81:34"><name pos:start="81:17" pos:end="81:32"><name pos:start="81:17" pos:end="81:19">res</name><operator pos:start="81:20" pos:end="81:21">-&gt;</operator><name pos:start="81:22" pos:end="81:32">corruptions</name></name><operator pos:start="81:33" pos:end="81:34">++</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="89:9" pos:end="91:56"><expr pos:start="89:9" pos:end="91:55"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <call pos:start="89:15" pos:end="91:55"><name pos:start="89:15" pos:end="89:24">bdrv_pread</name><argument_list pos:start="89:25" pos:end="91:55">(<argument pos:start="89:26" pos:end="89:33"><expr pos:start="89:26" pos:end="89:33"><name pos:start="89:26" pos:end="89:33"><name pos:start="89:26" pos:end="89:27">bs</name><operator pos:start="89:28" pos:end="89:29">-&gt;</operator><name pos:start="89:30" pos:end="89:33">file</name></name></expr></argument>, <argument pos:start="89:36" pos:end="89:44"><expr pos:start="89:36" pos:end="89:44"><name pos:start="89:36" pos:end="89:44">l2_offset</name></expr></argument>, <argument pos:start="89:47" pos:end="89:54"><expr pos:start="89:47" pos:end="89:54"><name pos:start="89:47" pos:end="89:54">l2_table</name></expr></argument>,

                         <argument pos:start="91:26" pos:end="91:54"><expr pos:start="91:26" pos:end="91:54"><name pos:start="91:26" pos:end="91:35"><name pos:start="91:26" pos:end="91:26">s</name><operator pos:start="91:27" pos:end="91:28">-&gt;</operator><name pos:start="91:29" pos:end="91:35">l2_size</name></name> <operator pos:start="91:37" pos:end="91:37">*</operator> <sizeof pos:start="91:39" pos:end="91:54">sizeof<argument_list pos:start="91:45" pos:end="91:54">(<argument pos:start="91:46" pos:end="91:53"><expr pos:start="91:46" pos:end="91:53"><name pos:start="91:46" pos:end="91:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="103:9"><if pos:start="93:9" pos:end="103:9">if <condition pos:start="93:12" pos:end="93:20">(<expr pos:start="93:13" pos:end="93:19"><name pos:start="93:13" pos:end="93:15">ret</name> <operator pos:start="93:17" pos:end="93:17">&lt;</operator> <literal type="number" pos:start="93:19" pos:end="93:19">0</literal></expr>)</condition> <block pos:start="93:22" pos:end="103:9">{<block_content pos:start="95:13" pos:end="101:22">

            <expr_stmt pos:start="95:13" pos:end="97:36"><expr pos:start="95:13" pos:end="97:35"><call pos:start="95:13" pos:end="97:35"><name pos:start="95:13" pos:end="95:19">fprintf</name><argument_list pos:start="95:20" pos:end="97:35">(<argument pos:start="95:21" pos:end="95:26"><expr pos:start="95:21" pos:end="95:26"><name pos:start="95:21" pos:end="95:26">stderr</name></expr></argument>, <argument pos:start="95:29" pos:end="95:66"><expr pos:start="95:29" pos:end="95:66"><literal type="string" pos:start="95:29" pos:end="95:66">"ERROR: Could not read L2 table: %s\n"</literal></expr></argument>,

                    <argument pos:start="97:21" pos:end="97:34"><expr pos:start="97:21" pos:end="97:34"><call pos:start="97:21" pos:end="97:34"><name pos:start="97:21" pos:end="97:28">strerror</name><argument_list pos:start="97:29" pos:end="97:34">(<argument pos:start="97:30" pos:end="97:33"><expr pos:start="97:30" pos:end="97:33"><operator pos:start="97:30" pos:end="97:30">-</operator><name pos:start="97:31" pos:end="97:33">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:32"><expr pos:start="99:13" pos:end="99:31"><name pos:start="99:13" pos:end="99:29"><name pos:start="99:13" pos:end="99:15">res</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:29">check_errors</name></name><operator pos:start="99:30" pos:end="99:31">++</operator></expr>;</expr_stmt>

            <goto pos:start="101:13" pos:end="101:22">goto <name pos:start="101:18" pos:end="101:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <for pos:start="107:9" pos:end="165:9">for <control pos:start="107:13" pos:end="107:40">(<init pos:start="107:14" pos:end="107:19"><expr pos:start="107:14" pos:end="107:18"><name pos:start="107:14" pos:end="107:14">j</name> <operator pos:start="107:16" pos:end="107:16">=</operator> <literal type="number" pos:start="107:18" pos:end="107:18">0</literal></expr>;</init> <condition pos:start="107:21" pos:end="107:35"><expr pos:start="107:21" pos:end="107:34"><name pos:start="107:21" pos:end="107:21">j</name> <operator pos:start="107:23" pos:end="107:23">&lt;</operator> <name pos:start="107:25" pos:end="107:34"><name pos:start="107:25" pos:end="107:25">s</name><operator pos:start="107:26" pos:end="107:27">-&gt;</operator><name pos:start="107:28" pos:end="107:34">l2_size</name></name></expr>;</condition> <incr pos:start="107:37" pos:end="107:39"><expr pos:start="107:37" pos:end="107:39"><name pos:start="107:37" pos:end="107:37">j</name><operator pos:start="107:38" pos:end="107:39">++</operator></expr></incr>)</control> <block pos:start="107:42" pos:end="165:9">{<block_content pos:start="109:13" pos:end="163:13">

            <decl_stmt pos:start="109:13" pos:end="109:57"><decl pos:start="109:13" pos:end="109:56"><type pos:start="109:13" pos:end="109:20"><name pos:start="109:13" pos:end="109:20">uint64_t</name></type> <name pos:start="109:22" pos:end="109:29">l2_entry</name> <init pos:start="109:31" pos:end="109:56">= <expr pos:start="109:33" pos:end="109:56"><call pos:start="109:33" pos:end="109:56"><name pos:start="109:33" pos:end="109:43">be64_to_cpu</name><argument_list pos:start="109:44" pos:end="109:56">(<argument pos:start="109:45" pos:end="109:55"><expr pos:start="109:45" pos:end="109:55"><name pos:start="109:45" pos:end="109:55"><name pos:start="109:45" pos:end="109:52">l2_table</name><index pos:start="109:53" pos:end="109:55">[<expr pos:start="109:54" pos:end="109:54"><name pos:start="109:54" pos:end="109:54">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="111:13" pos:end="111:62"><decl pos:start="111:13" pos:end="111:61"><type pos:start="111:13" pos:end="111:20"><name pos:start="111:13" pos:end="111:20">uint64_t</name></type> <name pos:start="111:22" pos:end="111:32">data_offset</name> <init pos:start="111:34" pos:end="111:61">= <expr pos:start="111:36" pos:end="111:61"><name pos:start="111:36" pos:end="111:43">l2_entry</name> <operator pos:start="111:45" pos:end="111:45">&amp;</operator> <name pos:start="111:47" pos:end="111:61">L2E_OFFSET_MASK</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="113:13" pos:end="113:64"><decl pos:start="113:13" pos:end="113:63"><type pos:start="113:13" pos:end="113:15"><name pos:start="113:13" pos:end="113:15">int</name></type> <name pos:start="113:17" pos:end="113:28">cluster_type</name> <init pos:start="113:30" pos:end="113:63">= <expr pos:start="113:32" pos:end="113:63"><call pos:start="113:32" pos:end="113:63"><name pos:start="113:32" pos:end="113:53">qcow2_get_cluster_type</name><argument_list pos:start="113:54" pos:end="113:63">(<argument pos:start="113:55" pos:end="113:62"><expr pos:start="113:55" pos:end="113:62"><name pos:start="113:55" pos:end="113:62">l2_entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="117:13" pos:end="163:13"><if pos:start="117:13" pos:end="163:13">if <condition pos:start="117:16" pos:end="119:77">(<expr pos:start="117:17" pos:end="119:76"><operator pos:start="117:17" pos:end="117:17">(</operator><name pos:start="117:18" pos:end="117:29">cluster_type</name> <operator pos:start="117:31" pos:end="117:32">==</operator> <name pos:start="117:34" pos:end="117:53">QCOW2_CLUSTER_NORMAL</name><operator pos:start="117:54" pos:end="117:54">)</operator> <operator pos:start="117:56" pos:end="117:57">||</operator>

                <operator pos:start="119:17" pos:end="119:17">(</operator><operator pos:start="119:18" pos:end="119:18">(</operator><name pos:start="119:19" pos:end="119:30">cluster_type</name> <operator pos:start="119:32" pos:end="119:33">==</operator> <name pos:start="119:35" pos:end="119:52">QCOW2_CLUSTER_ZERO</name><operator pos:start="119:53" pos:end="119:53">)</operator> <operator pos:start="119:55" pos:end="119:56">&amp;&amp;</operator> <operator pos:start="119:58" pos:end="119:58">(</operator><name pos:start="119:59" pos:end="119:69">data_offset</name> <operator pos:start="119:71" pos:end="119:72">!=</operator> <literal type="number" pos:start="119:74" pos:end="119:74">0</literal><operator pos:start="119:75" pos:end="119:75">)</operator><operator pos:start="119:76" pos:end="119:76">)</operator></expr>)</condition> <block pos:start="119:79" pos:end="163:13">{<block_content pos:start="121:17" pos:end="161:17">

                <expr_stmt pos:start="121:17" pos:end="121:76"><expr pos:start="121:17" pos:end="121:75"><name pos:start="121:17" pos:end="121:24">refcount</name> <operator pos:start="121:26" pos:end="121:26">=</operator> <call pos:start="121:28" pos:end="121:75"><name pos:start="121:28" pos:end="121:39">get_refcount</name><argument_list pos:start="121:40" pos:end="121:75">(<argument pos:start="121:41" pos:end="121:42"><expr pos:start="121:41" pos:end="121:42"><name pos:start="121:41" pos:end="121:42">bs</name></expr></argument>, <argument pos:start="121:45" pos:end="121:74"><expr pos:start="121:45" pos:end="121:74"><name pos:start="121:45" pos:end="121:55">data_offset</name> <operator pos:start="121:57" pos:end="121:58">&gt;&gt;</operator> <name pos:start="121:60" pos:end="121:74"><name pos:start="121:60" pos:end="121:60">s</name><operator pos:start="121:61" pos:end="121:62">-&gt;</operator><name pos:start="121:63" pos:end="121:74">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="123:17" pos:end="129:17"><if pos:start="123:17" pos:end="129:17">if <condition pos:start="123:20" pos:end="123:33">(<expr pos:start="123:21" pos:end="123:32"><name pos:start="123:21" pos:end="123:28">refcount</name> <operator pos:start="123:30" pos:end="123:30">&lt;</operator> <literal type="number" pos:start="123:32" pos:end="123:32">0</literal></expr>)</condition> <block pos:start="123:35" pos:end="129:17">{<block_content pos:start="127:21" pos:end="127:29">

                    <comment type="block" pos:start="125:21" pos:end="125:72">/* don't print message nor increment check_errors */</comment>

                    <continue pos:start="127:21" pos:end="127:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="131:17" pos:end="161:17"><if pos:start="131:17" pos:end="161:17">if <condition pos:start="131:20" pos:end="131:77">(<expr pos:start="131:21" pos:end="131:76"><operator pos:start="131:21" pos:end="131:21">(</operator><name pos:start="131:22" pos:end="131:29">refcount</name> <operator pos:start="131:31" pos:end="131:32">==</operator> <literal type="number" pos:start="131:34" pos:end="131:34">1</literal><operator pos:start="131:35" pos:end="131:35">)</operator> <operator pos:start="131:37" pos:end="131:38">!=</operator> <operator pos:start="131:40" pos:end="131:40">(</operator><operator pos:start="131:41" pos:end="131:41">(</operator><name pos:start="131:42" pos:end="131:49">l2_entry</name> <operator pos:start="131:51" pos:end="131:51">&amp;</operator> <name pos:start="131:53" pos:end="131:69">QCOW_OFLAG_COPIED</name><operator pos:start="131:70" pos:end="131:70">)</operator> <operator pos:start="131:72" pos:end="131:73">!=</operator> <literal type="number" pos:start="131:75" pos:end="131:75">0</literal><operator pos:start="131:76" pos:end="131:76">)</operator></expr>)</condition> <block pos:start="131:79" pos:end="161:17">{<block_content pos:start="133:21" pos:end="159:21">

                    <expr_stmt pos:start="133:21" pos:end="141:48"><expr pos:start="133:21" pos:end="141:47"><call pos:start="133:21" pos:end="141:47"><name pos:start="133:21" pos:end="133:27">fprintf</name><argument_list pos:start="133:28" pos:end="141:47">(<argument pos:start="133:29" pos:end="133:34"><expr pos:start="133:29" pos:end="133:34"><name pos:start="133:29" pos:end="133:34">stderr</name></expr></argument>, <argument pos:start="133:37" pos:end="135:64"><expr pos:start="133:37" pos:end="135:64"><literal type="string" pos:start="133:37" pos:end="133:68">"%s OFLAG_COPIED data cluster: "</literal>

                            <literal type="string" pos:start="135:29" pos:end="135:40">"l2_entry=%"</literal> <name pos:start="135:42" pos:end="135:47">PRIx64</name> <literal type="string" pos:start="135:49" pos:end="135:64">" refcount=%d\n"</literal></expr></argument>,

                            <argument pos:start="137:29" pos:end="139:59"><expr pos:start="137:29" pos:end="139:59"><ternary pos:start="137:29" pos:end="139:59"><condition pos:start="137:29" pos:end="137:51"><expr pos:start="137:29" pos:end="137:49"><name pos:start="137:29" pos:end="137:31">fix</name> <operator pos:start="137:33" pos:end="137:33">&amp;</operator> <name pos:start="137:35" pos:end="137:49">BDRV_FIX_ERRORS</name></expr> ?</condition><then pos:start="137:53" pos:end="137:63"> <expr pos:start="137:53" pos:end="137:63"><literal type="string" pos:start="137:53" pos:end="137:63">"Repairing"</literal></expr> </then><else pos:start="137:65" pos:end="139:59">:

                                                    <expr pos:start="139:53" pos:end="139:59"><literal type="string" pos:start="139:53" pos:end="139:59">"ERROR"</literal></expr></else></ternary></expr></argument>,

                            <argument pos:start="141:29" pos:end="141:36"><expr pos:start="141:29" pos:end="141:36"><name pos:start="141:29" pos:end="141:36">l2_entry</name></expr></argument>, <argument pos:start="141:39" pos:end="141:46"><expr pos:start="141:39" pos:end="141:46"><name pos:start="141:39" pos:end="141:46">refcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="143:21" pos:end="159:21"><if pos:start="143:21" pos:end="155:21">if <condition pos:start="143:24" pos:end="143:46">(<expr pos:start="143:25" pos:end="143:45"><name pos:start="143:25" pos:end="143:27">fix</name> <operator pos:start="143:29" pos:end="143:29">&amp;</operator> <name pos:start="143:31" pos:end="143:45">BDRV_FIX_ERRORS</name></expr>)</condition> <block pos:start="143:48" pos:end="155:21">{<block_content pos:start="145:25" pos:end="153:49">

                        <expr_stmt pos:start="145:25" pos:end="149:69"><expr pos:start="145:25" pos:end="149:68"><name pos:start="145:25" pos:end="145:35"><name pos:start="145:25" pos:end="145:32">l2_table</name><index pos:start="145:33" pos:end="145:35">[<expr pos:start="145:34" pos:end="145:34"><name pos:start="145:34" pos:end="145:34">j</name></expr>]</index></name> <operator pos:start="145:37" pos:end="145:37">=</operator> <call pos:start="145:39" pos:end="149:68"><name pos:start="145:39" pos:end="145:49">cpu_to_be64</name><argument_list pos:start="145:50" pos:end="149:68">(<argument pos:start="145:51" pos:end="149:67"><expr pos:start="145:51" pos:end="149:67"><ternary pos:start="145:51" pos:end="149:67"><condition pos:start="145:51" pos:end="147:37"><expr pos:start="145:51" pos:end="145:63"><name pos:start="145:51" pos:end="145:58">refcount</name> <operator pos:start="145:60" pos:end="145:61">==</operator> <literal type="number" pos:start="145:63" pos:end="145:63">1</literal></expr>

                                    ?</condition><then pos:start="147:39" pos:end="147:67"> <expr pos:start="147:39" pos:end="147:67"><name pos:start="147:39" pos:end="147:46">l2_entry</name> <operator pos:start="147:48" pos:end="147:48">|</operator>  <name pos:start="147:51" pos:end="147:67">QCOW_OFLAG_COPIED</name></expr>

                                    </then><else pos:start="149:37" pos:end="149:67">: <expr pos:start="149:39" pos:end="149:67"><name pos:start="149:39" pos:end="149:46">l2_entry</name> <operator pos:start="149:48" pos:end="149:48">&amp;</operator> <operator pos:start="149:50" pos:end="149:50">~</operator><name pos:start="149:51" pos:end="149:67">QCOW_OFLAG_COPIED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="151:25" pos:end="151:40"><expr pos:start="151:25" pos:end="151:39"><name pos:start="151:25" pos:end="151:32">l2_dirty</name> <operator pos:start="151:34" pos:end="151:34">=</operator> <name pos:start="151:36" pos:end="151:39">true</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="153:25" pos:end="153:49"><expr pos:start="153:25" pos:end="153:48"><name pos:start="153:25" pos:end="153:46"><name pos:start="153:25" pos:end="153:27">res</name><operator pos:start="153:28" pos:end="153:29">-&gt;</operator><name pos:start="153:30" pos:end="153:46">corruptions_fixed</name></name><operator pos:start="153:47" pos:end="153:48">++</operator></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="155:23" pos:end="159:21">else <block pos:start="155:28" pos:end="159:21">{<block_content pos:start="157:25" pos:end="157:43">

                        <expr_stmt pos:start="157:25" pos:end="157:43"><expr pos:start="157:25" pos:end="157:42"><name pos:start="157:25" pos:end="157:40"><name pos:start="157:25" pos:end="157:27">res</name><operator pos:start="157:28" pos:end="157:29">-&gt;</operator><name pos:start="157:30" pos:end="157:40">corruptions</name></name><operator pos:start="157:41" pos:end="157:42">++</operator></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="169:9" pos:end="205:9"><if pos:start="169:9" pos:end="205:9">if <condition pos:start="169:12" pos:end="169:21">(<expr pos:start="169:13" pos:end="169:20"><name pos:start="169:13" pos:end="169:20">l2_dirty</name></expr>)</condition> <block pos:start="169:23" pos:end="205:9">{<block_content pos:start="171:13" pos:end="203:13">

            <expr_stmt pos:start="171:13" pos:end="175:37"><expr pos:start="171:13" pos:end="175:36"><name pos:start="171:13" pos:end="171:15">ret</name> <operator pos:start="171:17" pos:end="171:17">=</operator> <call pos:start="171:19" pos:end="175:36"><name pos:start="171:19" pos:end="171:47">qcow2_pre_write_overlap_check</name><argument_list pos:start="171:48" pos:end="175:36">(<argument pos:start="171:49" pos:end="171:50"><expr pos:start="171:49" pos:end="171:50"><name pos:start="171:49" pos:end="171:50">bs</name></expr></argument>,

                    <argument pos:start="173:21" pos:end="173:58"><expr pos:start="173:21" pos:end="173:58"><name pos:start="173:21" pos:end="173:36">QCOW2_OL_DEFAULT</name> <operator pos:start="173:38" pos:end="173:38">&amp;</operator> <operator pos:start="173:40" pos:end="173:40">~</operator><name pos:start="173:41" pos:end="173:58">QCOW2_OL_ACTIVE_L2</name></expr></argument>, <argument pos:start="173:61" pos:end="173:69"><expr pos:start="173:61" pos:end="173:69"><name pos:start="173:61" pos:end="173:69">l2_offset</name></expr></argument>,

                    <argument pos:start="175:21" pos:end="175:35"><expr pos:start="175:21" pos:end="175:35"><name pos:start="175:21" pos:end="175:35"><name pos:start="175:21" pos:end="175:21">s</name><operator pos:start="175:22" pos:end="175:23">-&gt;</operator><name pos:start="175:24" pos:end="175:35">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="177:13" pos:end="187:13"><if pos:start="177:13" pos:end="187:13">if <condition pos:start="177:16" pos:end="177:24">(<expr pos:start="177:17" pos:end="177:23"><name pos:start="177:17" pos:end="177:19">ret</name> <operator pos:start="177:21" pos:end="177:21">&lt;</operator> <literal type="number" pos:start="177:23" pos:end="177:23">0</literal></expr>)</condition> <block pos:start="177:26" pos:end="187:13">{<block_content pos:start="179:17" pos:end="185:26">

                <expr_stmt pos:start="179:17" pos:end="181:70"><expr pos:start="179:17" pos:end="181:69"><call pos:start="179:17" pos:end="181:69"><name pos:start="179:17" pos:end="179:23">fprintf</name><argument_list pos:start="179:24" pos:end="181:69">(<argument pos:start="179:25" pos:end="179:30"><expr pos:start="179:25" pos:end="179:30"><name pos:start="179:25" pos:end="179:30">stderr</name></expr></argument>, <argument pos:start="179:33" pos:end="181:52"><expr pos:start="179:33" pos:end="181:52"><literal type="string" pos:start="179:33" pos:end="179:76">"ERROR: Could not write L2 table; metadata "</literal>

                        <literal type="string" pos:start="181:25" pos:end="181:52">"overlap check failed: %s\n"</literal></expr></argument>, <argument pos:start="181:55" pos:end="181:68"><expr pos:start="181:55" pos:end="181:68"><call pos:start="181:55" pos:end="181:68"><name pos:start="181:55" pos:end="181:62">strerror</name><argument_list pos:start="181:63" pos:end="181:68">(<argument pos:start="181:64" pos:end="181:67"><expr pos:start="181:64" pos:end="181:67"><operator pos:start="181:64" pos:end="181:64">-</operator><name pos:start="181:65" pos:end="181:67">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:36"><expr pos:start="183:17" pos:end="183:35"><name pos:start="183:17" pos:end="183:33"><name pos:start="183:17" pos:end="183:19">res</name><operator pos:start="183:20" pos:end="183:21">-&gt;</operator><name pos:start="183:22" pos:end="183:33">check_errors</name></name><operator pos:start="183:34" pos:end="183:35">++</operator></expr>;</expr_stmt>

                <goto pos:start="185:17" pos:end="185:26">goto <name pos:start="185:22" pos:end="185:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="191:13" pos:end="191:78"><expr pos:start="191:13" pos:end="191:77"><name pos:start="191:13" pos:end="191:15">ret</name> <operator pos:start="191:17" pos:end="191:17">=</operator> <call pos:start="191:19" pos:end="191:77"><name pos:start="191:19" pos:end="191:29">bdrv_pwrite</name><argument_list pos:start="191:30" pos:end="191:77">(<argument pos:start="191:31" pos:end="191:38"><expr pos:start="191:31" pos:end="191:38"><name pos:start="191:31" pos:end="191:38"><name pos:start="191:31" pos:end="191:32">bs</name><operator pos:start="191:33" pos:end="191:34">-&gt;</operator><name pos:start="191:35" pos:end="191:38">file</name></name></expr></argument>, <argument pos:start="191:41" pos:end="191:49"><expr pos:start="191:41" pos:end="191:49"><name pos:start="191:41" pos:end="191:49">l2_offset</name></expr></argument>, <argument pos:start="191:52" pos:end="191:59"><expr pos:start="191:52" pos:end="191:59"><name pos:start="191:52" pos:end="191:59">l2_table</name></expr></argument>, <argument pos:start="191:62" pos:end="191:76"><expr pos:start="191:62" pos:end="191:76"><name pos:start="191:62" pos:end="191:76"><name pos:start="191:62" pos:end="191:62">s</name><operator pos:start="191:63" pos:end="191:64">-&gt;</operator><name pos:start="191:65" pos:end="191:76">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="193:13" pos:end="203:13"><if pos:start="193:13" pos:end="203:13">if <condition pos:start="193:16" pos:end="193:24">(<expr pos:start="193:17" pos:end="193:23"><name pos:start="193:17" pos:end="193:19">ret</name> <operator pos:start="193:21" pos:end="193:21">&lt;</operator> <literal type="number" pos:start="193:23" pos:end="193:23">0</literal></expr>)</condition> <block pos:start="193:26" pos:end="203:13">{<block_content pos:start="195:17" pos:end="201:26">

                <expr_stmt pos:start="195:17" pos:end="197:40"><expr pos:start="195:17" pos:end="197:39"><call pos:start="195:17" pos:end="197:39"><name pos:start="195:17" pos:end="195:23">fprintf</name><argument_list pos:start="195:24" pos:end="197:39">(<argument pos:start="195:25" pos:end="195:30"><expr pos:start="195:25" pos:end="195:30"><name pos:start="195:25" pos:end="195:30">stderr</name></expr></argument>, <argument pos:start="195:33" pos:end="195:71"><expr pos:start="195:33" pos:end="195:71"><literal type="string" pos:start="195:33" pos:end="195:71">"ERROR: Could not write L2 table: %s\n"</literal></expr></argument>,

                        <argument pos:start="197:25" pos:end="197:38"><expr pos:start="197:25" pos:end="197:38"><call pos:start="197:25" pos:end="197:38"><name pos:start="197:25" pos:end="197:32">strerror</name><argument_list pos:start="197:33" pos:end="197:38">(<argument pos:start="197:34" pos:end="197:37"><expr pos:start="197:34" pos:end="197:37"><operator pos:start="197:34" pos:end="197:34">-</operator><name pos:start="197:35" pos:end="197:37">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:36"><expr pos:start="199:17" pos:end="199:35"><name pos:start="199:17" pos:end="199:33"><name pos:start="199:17" pos:end="199:19">res</name><operator pos:start="199:20" pos:end="199:21">-&gt;</operator><name pos:start="199:22" pos:end="199:33">check_errors</name></name><operator pos:start="199:34" pos:end="199:35">++</operator></expr>;</expr_stmt>

                <goto pos:start="201:17" pos:end="201:26">goto <name pos:start="201:22" pos:end="201:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="211:5" pos:end="211:12"><expr pos:start="211:5" pos:end="211:11"><name pos:start="211:5" pos:end="211:7">ret</name> <operator pos:start="211:9" pos:end="211:9">=</operator> <literal type="number" pos:start="211:11" pos:end="211:11">0</literal></expr>;</expr_stmt>



<label pos:start="215:1" pos:end="215:5"><name pos:start="215:1" pos:end="215:4">fail</name>:</label>

    <expr_stmt pos:start="217:5" pos:end="217:25"><expr pos:start="217:5" pos:end="217:24"><call pos:start="217:5" pos:end="217:24"><name pos:start="217:5" pos:end="217:14">qemu_vfree</name><argument_list pos:start="217:15" pos:end="217:24">(<argument pos:start="217:16" pos:end="217:23"><expr pos:start="217:16" pos:end="217:23"><name pos:start="217:16" pos:end="217:23">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="219:5" pos:end="219:15">return <expr pos:start="219:12" pos:end="219:14"><name pos:start="219:12" pos:end="219:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
