<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13704.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:34">yuy2ToUV</name>)<parameter_list pos:start="1:36" pos:end="1:136">(<parameter pos:start="1:37" pos:end="1:49"><decl pos:start="1:37" pos:end="1:49"><type pos:start="1:37" pos:end="1:49"><name pos:start="1:37" pos:end="1:43">uint8_t</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">dstU</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:64"><decl pos:start="1:52" pos:end="1:64"><type pos:start="1:52" pos:end="1:64"><name pos:start="1:52" pos:end="1:58">uint8_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">dstV</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:85"><decl pos:start="1:67" pos:end="1:85"><type pos:start="1:67" pos:end="1:85"><specifier pos:start="1:67" pos:end="1:71">const</specifier> <name pos:start="1:73" pos:end="1:79">uint8_t</name> <modifier pos:start="1:81" pos:end="1:81">*</modifier></type><name pos:start="1:82" pos:end="1:85">src1</name></decl></parameter>, <parameter pos:start="1:88" pos:end="1:106"><decl pos:start="1:88" pos:end="1:106"><type pos:start="1:88" pos:end="1:106"><specifier pos:start="1:88" pos:end="1:92">const</specifier> <name pos:start="1:94" pos:end="1:100">uint8_t</name> <modifier pos:start="1:102" pos:end="1:102">*</modifier></type><name pos:start="1:103" pos:end="1:106">src2</name></decl></parameter>, <parameter pos:start="1:109" pos:end="1:117"><decl pos:start="1:109" pos:end="1:117"><type pos:start="1:109" pos:end="1:117"><name pos:start="1:109" pos:end="1:111">int</name></type> <name pos:start="1:113" pos:end="1:117">width</name></decl></parameter>, <parameter pos:start="1:120" pos:end="1:135"><decl pos:start="1:120" pos:end="1:135"><type pos:start="1:120" pos:end="1:135"><name pos:start="1:120" pos:end="1:127">uint32_t</name> <modifier pos:start="1:129" pos:end="1:129">*</modifier></type><name pos:start="1:130" pos:end="1:135">unused</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="7:5" pos:end="63:25">

<cpp:if pos:start="5:1" pos:end="5:24">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:24">COMPILE_TEMPLATE_MMX</name></expr></cpp:if>

    <asm pos:start="7:5" pos:end="50:0">__asm__ <specifier pos:start="7:13" pos:end="7:20">volatile</specifier>(

        "movq "MANGLE(bm01010101)", %%mm4           \n\t"

        "mov                    %0, %%"REG_a"       \n\t"

        "1:                                         \n\t"

        "movq    (%1, %%"REG_a",4), %%mm0           \n\t"

        "movq   8(%1, %%"REG_a",4), %%mm1           \n\t"

        "psrlw                  $8, %%mm0           \n\t"

        "psrlw                  $8, %%mm1           \n\t"

        "packuswb            %%mm1, %%mm0           \n\t"

        "movq                %%mm0, %%mm1           \n\t"

        "psrlw                  $8, %%mm0           \n\t"

        "pand                %%mm4, %%mm1           \n\t"

        "packuswb            %%mm0, %%mm0           \n\t"

        "packuswb            %%mm1, %%mm1           \n\t"

        "movd                %%mm0, (%3, %%"REG_a") \n\t"

        "movd                %%mm1, (%2, %%"REG_a") \n\t"

        "add                    $4, %%"REG_a"       \n\t"

        " js                    1b                  \n\t"

        : : "g" ((x86_reg)-width), "r" (src1+width*4), "r" (dstU+width), "r" (dstV+width)

        : "%"REG_a

    );</asm>

<cpp:else pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="51:5" pos:end="51:10"><decl pos:start="51:5" pos:end="51:9"><type pos:start="51:5" pos:end="51:7"><name pos:start="51:5" pos:end="51:7">int</name></type> <name pos:start="51:9" pos:end="51:9">i</name></decl>;</decl_stmt>

    <for pos:start="53:5" pos:end="62:0">for <control pos:start="53:9" pos:end="53:27">(<init pos:start="53:10" pos:end="53:13"><expr pos:start="53:10" pos:end="53:12"><name pos:start="53:10" pos:end="53:10">i</name><operator pos:start="53:11" pos:end="53:11">=</operator><literal type="number" pos:start="53:12" pos:end="53:12">0</literal></expr>;</init> <condition pos:start="53:15" pos:end="53:22"><expr pos:start="53:15" pos:end="53:21"><name pos:start="53:15" pos:end="53:15">i</name><operator pos:start="53:16" pos:end="53:16">&lt;</operator><name pos:start="53:17" pos:end="53:21">width</name></expr>;</condition> <incr pos:start="53:24" pos:end="53:26"><expr pos:start="53:24" pos:end="53:26"><name pos:start="53:24" pos:end="53:24">i</name><operator pos:start="53:25" pos:end="53:26">++</operator></expr></incr>)</control> <block pos:start="53:29" pos:end="62:0">{<block_content pos:start="55:9" pos:end="57:31">

        <expr_stmt pos:start="55:9" pos:end="55:31"><expr pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:12">dstU</name><index pos:start="55:13" pos:end="55:15">[<expr pos:start="55:14" pos:end="55:14"><name pos:start="55:14" pos:end="55:14">i</name></expr>]</index></name><operator pos:start="55:16" pos:end="55:16">=</operator> <name pos:start="55:18" pos:end="55:30"><name pos:start="55:18" pos:end="55:21">src1</name><index pos:start="55:22" pos:end="55:30">[<expr pos:start="55:23" pos:end="55:29"><literal type="number" pos:start="55:23" pos:end="55:23">4</literal><operator pos:start="55:24" pos:end="55:24">*</operator><name pos:start="55:25" pos:end="55:25">i</name> <operator pos:start="55:27" pos:end="55:27">+</operator> <literal type="number" pos:start="55:29" pos:end="55:29">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:31"><expr pos:start="57:9" pos:end="57:30"><name pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:12">dstV</name><index pos:start="57:13" pos:end="57:15">[<expr pos:start="57:14" pos:end="57:14"><name pos:start="57:14" pos:end="57:14">i</name></expr>]</index></name><operator pos:start="57:16" pos:end="57:16">=</operator> <name pos:start="57:18" pos:end="57:30"><name pos:start="57:18" pos:end="57:21">src1</name><index pos:start="57:22" pos:end="57:30">[<expr pos:start="57:23" pos:end="57:29"><literal type="number" pos:start="57:23" pos:end="57:23">4</literal><operator pos:start="57:24" pos:end="57:24">*</operator><name pos:start="57:25" pos:end="57:25">i</name> <operator pos:start="57:27" pos:end="57:27">+</operator> <literal type="number" pos:start="57:29" pos:end="57:29">3</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="63:5" pos:end="63:25"><expr pos:start="63:5" pos:end="63:24"><call pos:start="63:5" pos:end="63:24"><name pos:start="63:5" pos:end="63:10">assert</name><argument_list pos:start="63:11" pos:end="63:24">(<argument pos:start="63:12" pos:end="63:23"><expr pos:start="63:12" pos:end="63:23"><name pos:start="63:12" pos:end="63:15">src1</name> <operator pos:start="63:17" pos:end="63:18">==</operator> <name pos:start="63:20" pos:end="63:23">src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
