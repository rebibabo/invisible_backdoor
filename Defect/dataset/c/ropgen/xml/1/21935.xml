<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21935.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">parse_forced_key_frames</name><parameter_list pos:start="1:36" pos:end="3:58">(<parameter pos:start="1:37" pos:end="1:44"><decl pos:start="1:37" pos:end="1:44"><type pos:start="1:37" pos:end="1:44"><name pos:start="1:37" pos:end="1:40">char</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">kf</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:63"><decl pos:start="1:47" pos:end="1:63"><type pos:start="1:47" pos:end="1:63"><name pos:start="1:47" pos:end="1:58">OutputStream</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">ost</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:57"><decl pos:start="3:37" pos:end="3:57"><type pos:start="3:37" pos:end="3:57"><name pos:start="3:37" pos:end="3:50">AVCodecContext</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:57">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="59:1">{<block_content pos:start="7:5" pos:end="57:5">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:11">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">n</name> <init pos:start="9:11" pos:end="9:13">= <expr pos:start="9:13" pos:end="9:13"><literal type="number" pos:start="9:13" pos:end="9:13">1</literal></expr></init></decl>, <decl pos:start="9:16" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:16">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:13">t</name></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="19:16">for <control pos:start="15:9" pos:end="15:25">(<init pos:start="15:10" pos:end="15:16"><expr pos:start="15:10" pos:end="15:15"><name pos:start="15:10" pos:end="15:10">p</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <name pos:start="15:14" pos:end="15:15">kf</name></expr>;</init> <condition pos:start="15:18" pos:end="15:20"><expr pos:start="15:18" pos:end="15:19"><operator pos:start="15:18" pos:end="15:18">*</operator><name pos:start="15:19" pos:end="15:19">p</name></expr>;</condition> <incr pos:start="15:22" pos:end="15:24"><expr pos:start="15:22" pos:end="15:24"><name pos:start="15:22" pos:end="15:22">p</name><operator pos:start="15:23" pos:end="15:24">++</operator></expr></incr>)</control><block type="pseudo" pos:start="17:9" pos:end="19:16"><block_content pos:start="17:9" pos:end="19:16">

        <if_stmt pos:start="17:9" pos:end="19:16"><if pos:start="17:9" pos:end="19:16">if <condition pos:start="17:12" pos:end="17:22">(<expr pos:start="17:13" pos:end="17:21"><operator pos:start="17:13" pos:end="17:13">*</operator><name pos:start="17:14" pos:end="17:14">p</name> <operator pos:start="17:16" pos:end="17:17">==</operator> <literal type="char" pos:start="17:19" pos:end="17:21">','</literal></expr>)</condition><block type="pseudo" pos:start="19:13" pos:end="19:16"><block_content pos:start="19:13" pos:end="19:16">

            <expr_stmt pos:start="19:13" pos:end="19:16"><expr pos:start="19:13" pos:end="19:15"><name pos:start="19:13" pos:end="19:13">n</name><operator pos:start="19:14" pos:end="19:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

    <expr_stmt pos:start="21:5" pos:end="21:29"><expr pos:start="21:5" pos:end="21:28"><name pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:7">ost</name><operator pos:start="21:8" pos:end="21:9">-&gt;</operator><name pos:start="21:10" pos:end="21:24">forced_kf_count</name></name> <operator pos:start="21:26" pos:end="21:26">=</operator> <name pos:start="21:28" pos:end="21:28">n</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:70"><expr pos:start="23:5" pos:end="23:69"><name pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:7">ost</name><operator pos:start="23:8" pos:end="23:9">-&gt;</operator><name pos:start="23:10" pos:end="23:22">forced_kf_pts</name></name>   <operator pos:start="23:26" pos:end="23:26">=</operator> <call pos:start="23:28" pos:end="23:69"><name pos:start="23:28" pos:end="23:36">av_malloc</name><argument_list pos:start="23:37" pos:end="23:69">(<argument pos:start="23:38" pos:end="23:68"><expr pos:start="23:38" pos:end="23:68"><sizeof pos:start="23:38" pos:end="23:64">sizeof<argument_list pos:start="23:44" pos:end="23:64">(<argument pos:start="23:45" pos:end="23:63"><expr pos:start="23:45" pos:end="23:63"><operator pos:start="23:45" pos:end="23:45">*</operator><name pos:start="23:46" pos:end="23:63"><name pos:start="23:46" pos:end="23:48">ost</name><operator pos:start="23:49" pos:end="23:50">-&gt;</operator><name pos:start="23:51" pos:end="23:63">forced_kf_pts</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="23:66" pos:end="23:66">*</operator> <name pos:start="23:68" pos:end="23:68">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:28">(<expr pos:start="25:9" pos:end="25:27"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:27"><name pos:start="25:10" pos:end="25:12">ost</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:27">forced_kf_pts</name></name></expr>)</condition> <block pos:start="25:30" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:16">

        <expr_stmt pos:start="27:9" pos:end="27:84"><expr pos:start="27:9" pos:end="27:83"><call pos:start="27:9" pos:end="27:83"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:83">(<argument pos:start="27:16" pos:end="27:19"><expr pos:start="27:16" pos:end="27:19"><name pos:start="27:16" pos:end="27:19">NULL</name></expr></argument>, <argument pos:start="27:22" pos:end="27:33"><expr pos:start="27:22" pos:end="27:33"><name pos:start="27:22" pos:end="27:33">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="27:36" pos:end="27:82"><expr pos:start="27:36" pos:end="27:82"><literal type="string" pos:start="27:36" pos:end="27:82">"Could not allocate forced key frames array.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:16"><expr pos:start="29:9" pos:end="29:15"><call pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:12">exit</name><argument_list pos:start="29:13" pos:end="29:15">(<argument pos:start="29:14" pos:end="29:14"><expr pos:start="29:14" pos:end="29:14"><literal type="number" pos:start="29:14" pos:end="29:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:11"><expr pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:5">p</name> <operator pos:start="35:7" pos:end="35:7">=</operator> <name pos:start="35:9" pos:end="35:10">kf</name></expr>;</expr_stmt>

    <for pos:start="37:5" pos:end="57:5">for <control pos:start="37:9" pos:end="37:27">(<init pos:start="37:10" pos:end="37:15"><expr pos:start="37:10" pos:end="37:14"><name pos:start="37:10" pos:end="37:10">i</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <literal type="number" pos:start="37:14" pos:end="37:14">0</literal></expr>;</init> <condition pos:start="37:17" pos:end="37:22"><expr pos:start="37:17" pos:end="37:21"><name pos:start="37:17" pos:end="37:17">i</name> <operator pos:start="37:19" pos:end="37:19">&lt;</operator> <name pos:start="37:21" pos:end="37:21">n</name></expr>;</condition> <incr pos:start="37:24" pos:end="37:26"><expr pos:start="37:24" pos:end="37:26"><name pos:start="37:24" pos:end="37:24">i</name><operator pos:start="37:25" pos:end="37:26">++</operator></expr></incr>)</control> <block pos:start="37:29" pos:end="57:5">{<block_content pos:start="39:9" pos:end="55:17">

        <decl_stmt pos:start="39:9" pos:end="39:36"><decl pos:start="39:9" pos:end="39:35"><type pos:start="39:9" pos:end="39:14"><name pos:start="39:9" pos:end="39:12">char</name> <modifier pos:start="39:14" pos:end="39:14">*</modifier></type><name pos:start="39:15" pos:end="39:18">next</name> <init pos:start="39:20" pos:end="39:35">= <expr pos:start="39:22" pos:end="39:35"><call pos:start="39:22" pos:end="39:35"><name pos:start="39:22" pos:end="39:27">strchr</name><argument_list pos:start="39:28" pos:end="39:35">(<argument pos:start="39:29" pos:end="39:29"><expr pos:start="39:29" pos:end="39:29"><name pos:start="39:29" pos:end="39:29">p</name></expr></argument>, <argument pos:start="39:32" pos:end="39:34"><expr pos:start="39:32" pos:end="39:34"><literal type="char" pos:start="39:32" pos:end="39:34">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="43:9" pos:end="45:24"><if pos:start="43:9" pos:end="45:24">if <condition pos:start="43:12" pos:end="43:17">(<expr pos:start="43:13" pos:end="43:16"><name pos:start="43:13" pos:end="43:16">next</name></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:24"><block_content pos:start="45:13" pos:end="45:24">

            <expr_stmt pos:start="45:13" pos:end="45:24"><expr pos:start="45:13" pos:end="45:23"><operator pos:start="45:13" pos:end="45:13">*</operator><name pos:start="45:14" pos:end="45:17">next</name><operator pos:start="45:18" pos:end="45:19">++</operator> <operator pos:start="45:21" pos:end="45:21">=</operator> <literal type="number" pos:start="45:23" pos:end="45:23">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="49:9" pos:end="49:56"><expr pos:start="49:9" pos:end="49:55"><name pos:start="49:9" pos:end="49:9">t</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <call pos:start="49:13" pos:end="49:55"><name pos:start="49:13" pos:end="49:29">parse_time_or_die</name><argument_list pos:start="49:30" pos:end="49:55">(<argument pos:start="49:31" pos:end="49:48"><expr pos:start="49:31" pos:end="49:48"><literal type="string" pos:start="49:31" pos:end="49:48">"force_key_frames"</literal></expr></argument>, <argument pos:start="49:51" pos:end="49:51"><expr pos:start="49:51" pos:end="49:51"><name pos:start="49:51" pos:end="49:51">p</name></expr></argument>, <argument pos:start="49:54" pos:end="49:54"><expr pos:start="49:54" pos:end="49:54"><literal type="number" pos:start="49:54" pos:end="49:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:82"><expr pos:start="51:9" pos:end="51:81"><name pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:11">ost</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:26">forced_kf_pts</name><index pos:start="51:27" pos:end="51:29">[<expr pos:start="51:28" pos:end="51:28"><name pos:start="51:28" pos:end="51:28">i</name></expr>]</index></name> <operator pos:start="51:31" pos:end="51:31">=</operator> <call pos:start="51:33" pos:end="51:81"><name pos:start="51:33" pos:end="51:44">av_rescale_q</name><argument_list pos:start="51:45" pos:end="51:81">(<argument pos:start="51:46" pos:end="51:46"><expr pos:start="51:46" pos:end="51:46"><name pos:start="51:46" pos:end="51:46">t</name></expr></argument>, <argument pos:start="51:49" pos:end="51:62"><expr pos:start="51:49" pos:end="51:62"><name pos:start="51:49" pos:end="51:62">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="51:65" pos:end="51:80"><expr pos:start="51:65" pos:end="51:80"><name pos:start="51:65" pos:end="51:80"><name pos:start="51:65" pos:end="51:69">avctx</name><operator pos:start="51:70" pos:end="51:71">-&gt;</operator><name pos:start="51:72" pos:end="51:80">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:17"><expr pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:9">p</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <name pos:start="55:13" pos:end="55:16">next</name></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
