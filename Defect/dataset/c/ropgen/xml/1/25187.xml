<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25187.c" pos:tabs="8"> <macro pos:start="1:2" pos:end="5:14"><name pos:start="1:2" pos:end="1:21">roundAndPackFloatx80</name><argument_list pos:start="1:22" pos:end="5:14">(

     <argument pos:start="3:6" pos:end="3:27">int8 roundingPrecision</argument>, <argument pos:start="3:30" pos:end="3:39">flag zSign</argument>, <argument pos:start="3:42" pos:end="3:51">int32 zExp</argument>, <argument pos:start="3:54" pos:end="3:67">uint64_t zSig0</argument>, <argument pos:start="3:70" pos:end="5:13">uint64_t zSig1

 STATUS_PARAM</argument>)</argument_list></macro>

<block pos:start="7:1" pos:end="315:1">{<block_content pos:start="9:5" pos:end="311:46">

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">int8</name></type> <name pos:start="9:10" pos:end="9:21">roundingMode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:45"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">flag</name></type> <name pos:start="11:10" pos:end="11:25">roundNearestEven</name></decl>, <decl pos:start="11:28" pos:end="11:36"><type ref="prev" pos:start="11:5" pos:end="11:8"/><name pos:start="11:28" pos:end="11:36">increment</name></decl>, <decl pos:start="11:39" pos:end="11:44"><type ref="prev" pos:start="11:5" pos:end="11:8"/><name pos:start="11:39" pos:end="11:44">isTiny</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:47"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:9">int64</name></type> <name pos:start="13:11" pos:end="13:24">roundIncrement</name></decl>, <decl pos:start="13:27" pos:end="13:35"><type ref="prev" pos:start="13:5" pos:end="13:9"/><name pos:start="13:27" pos:end="13:35">roundMask</name></decl>, <decl pos:start="13:38" pos:end="13:46"><type ref="prev" pos:start="13:5" pos:end="13:9"/><name pos:start="13:38" pos:end="13:46">roundBits</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:47"><expr pos:start="17:5" pos:end="17:46"><name pos:start="17:5" pos:end="17:16">roundingMode</name> <operator pos:start="17:18" pos:end="17:18">=</operator> <call pos:start="17:20" pos:end="17:46"><name pos:start="17:20" pos:end="17:25">STATUS</name><argument_list pos:start="17:26" pos:end="17:46">(<argument pos:start="17:27" pos:end="17:45"><expr pos:start="17:27" pos:end="17:45"><name pos:start="17:27" pos:end="17:45">float_rounding_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:68"><expr pos:start="19:5" pos:end="19:67"><name pos:start="19:5" pos:end="19:20">roundNearestEven</name> <operator pos:start="19:22" pos:end="19:22">=</operator> <operator pos:start="19:24" pos:end="19:24">(</operator> <name pos:start="19:26" pos:end="19:37">roundingMode</name> <operator pos:start="19:39" pos:end="19:40">==</operator> <name pos:start="19:42" pos:end="19:65">float_round_nearest_even</name> <operator pos:start="19:67" pos:end="19:67">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="21:52"><if pos:start="21:5" pos:end="21:52">if <condition pos:start="21:8" pos:end="21:34">( <expr pos:start="21:10" pos:end="21:32"><name pos:start="21:10" pos:end="21:26">roundingPrecision</name> <operator pos:start="21:28" pos:end="21:29">==</operator> <literal type="number" pos:start="21:31" pos:end="21:32">80</literal></expr> )</condition><block type="pseudo" pos:start="21:36" pos:end="21:52"><block_content pos:start="21:36" pos:end="21:52"> <goto pos:start="21:36" pos:end="21:52">goto <name pos:start="21:41" pos:end="21:51">precision80</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt pos:start="23:5" pos:end="43:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:34">( <expr pos:start="23:10" pos:end="23:32"><name pos:start="23:10" pos:end="23:26">roundingPrecision</name> <operator pos:start="23:28" pos:end="23:29">==</operator> <literal type="number" pos:start="23:31" pos:end="23:32">64</literal></expr> )</condition> <block pos:start="23:36" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:48">

        <expr_stmt pos:start="25:9" pos:end="25:53"><expr pos:start="25:9" pos:end="25:52"><name pos:start="25:9" pos:end="25:22">roundIncrement</name> <operator pos:start="25:24" pos:end="25:24">=</operator> <call pos:start="25:26" pos:end="25:52"><name pos:start="25:26" pos:end="25:30">LIT64</name><argument_list pos:start="25:31" pos:end="25:52">( <argument pos:start="25:33" pos:end="25:50"><expr pos:start="25:33" pos:end="25:50"><literal type="number" pos:start="25:33" pos:end="25:50">0x0000000000000400</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:48"><expr pos:start="27:9" pos:end="27:47"><name pos:start="27:9" pos:end="27:17">roundMask</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <call pos:start="27:21" pos:end="27:47"><name pos:start="27:21" pos:end="27:25">LIT64</name><argument_list pos:start="27:26" pos:end="27:47">( <argument pos:start="27:28" pos:end="27:45"><expr pos:start="27:28" pos:end="27:45"><literal type="number" pos:start="27:28" pos:end="27:45">0x00000000000007FF</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="31:5" pos:end="37:5">else if <condition pos:start="31:13" pos:end="31:39">( <expr pos:start="31:15" pos:end="31:37"><name pos:start="31:15" pos:end="31:31">roundingPrecision</name> <operator pos:start="31:33" pos:end="31:34">==</operator> <literal type="number" pos:start="31:36" pos:end="31:37">32</literal></expr> )</condition> <block pos:start="31:41" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:48">

        <expr_stmt pos:start="33:9" pos:end="33:53"><expr pos:start="33:9" pos:end="33:52"><name pos:start="33:9" pos:end="33:22">roundIncrement</name> <operator pos:start="33:24" pos:end="33:24">=</operator> <call pos:start="33:26" pos:end="33:52"><name pos:start="33:26" pos:end="33:30">LIT64</name><argument_list pos:start="33:31" pos:end="33:52">( <argument pos:start="33:33" pos:end="33:50"><expr pos:start="33:33" pos:end="33:50"><literal type="number" pos:start="33:33" pos:end="33:50">0x0000008000000000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:48"><expr pos:start="35:9" pos:end="35:47"><name pos:start="35:9" pos:end="35:17">roundMask</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <call pos:start="35:21" pos:end="35:47"><name pos:start="35:21" pos:end="35:25">LIT64</name><argument_list pos:start="35:26" pos:end="35:47">( <argument pos:start="35:28" pos:end="35:45"><expr pos:start="35:28" pos:end="35:45"><literal type="number" pos:start="35:28" pos:end="35:45">0x000000FFFFFFFFFF</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>

    <else pos:start="39:5" pos:end="43:5">else <block pos:start="39:10" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:25">

        <goto pos:start="41:9" pos:end="41:25">goto <name pos:start="41:14" pos:end="41:24">precision80</name>;</goto>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:28"><expr pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:9">zSig0</name> <operator pos:start="45:11" pos:end="45:12">|=</operator> <operator pos:start="45:14" pos:end="45:14">(</operator> <name pos:start="45:16" pos:end="45:20">zSig1</name> <operator pos:start="45:22" pos:end="45:23">!=</operator> <literal type="number" pos:start="45:25" pos:end="45:25">0</literal> <operator pos:start="45:27" pos:end="45:27">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="73:5"><if pos:start="47:5" pos:end="73:5">if <condition pos:start="47:8" pos:end="47:29">( <expr pos:start="47:10" pos:end="47:27"><operator pos:start="47:10" pos:end="47:10">!</operator> <name pos:start="47:12" pos:end="47:27">roundNearestEven</name></expr> )</condition> <block pos:start="47:31" pos:end="73:5">{<block_content pos:start="49:9" pos:end="71:9">

        <if_stmt pos:start="49:9" pos:end="71:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:50">( <expr pos:start="49:14" pos:end="49:48"><name pos:start="49:14" pos:end="49:25">roundingMode</name> <operator pos:start="49:27" pos:end="49:28">==</operator> <name pos:start="49:30" pos:end="49:48">float_round_to_zero</name></expr> )</condition> <block pos:start="49:52" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:31">

            <expr_stmt pos:start="51:13" pos:end="51:31"><expr pos:start="51:13" pos:end="51:30"><name pos:start="51:13" pos:end="51:26">roundIncrement</name> <operator pos:start="51:28" pos:end="51:28">=</operator> <literal type="number" pos:start="51:30" pos:end="51:30">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="55:9" pos:end="71:9">else <block pos:start="55:14" pos:end="71:9">{<block_content pos:start="57:13" pos:end="69:13">

            <expr_stmt pos:start="57:13" pos:end="57:39"><expr pos:start="57:13" pos:end="57:38"><name pos:start="57:13" pos:end="57:26">roundIncrement</name> <operator pos:start="57:28" pos:end="57:28">=</operator> <name pos:start="57:30" pos:end="57:38">roundMask</name></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="69:13"><if pos:start="59:13" pos:end="63:13">if <condition pos:start="59:16" pos:end="59:24">( <expr pos:start="59:18" pos:end="59:22"><name pos:start="59:18" pos:end="59:22">zSign</name></expr> )</condition> <block pos:start="59:26" pos:end="63:13">{<block_content pos:start="61:17" pos:end="61:73">

                <if_stmt pos:start="61:17" pos:end="61:73"><if pos:start="61:17" pos:end="61:73">if <condition pos:start="61:20" pos:end="61:53">( <expr pos:start="61:22" pos:end="61:51"><name pos:start="61:22" pos:end="61:33">roundingMode</name> <operator pos:start="61:35" pos:end="61:36">==</operator> <name pos:start="61:38" pos:end="61:51">float_round_up</name></expr> )</condition><block type="pseudo" pos:start="61:55" pos:end="61:73"><block_content pos:start="61:55" pos:end="61:73"> <expr_stmt pos:start="61:55" pos:end="61:73"><expr pos:start="61:55" pos:end="61:72"><name pos:start="61:55" pos:end="61:68">roundIncrement</name> <operator pos:start="61:70" pos:end="61:70">=</operator> <literal type="number" pos:start="61:72" pos:end="61:72">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if>

            <else pos:start="65:13" pos:end="69:13">else <block pos:start="65:18" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:75">

                <if_stmt pos:start="67:17" pos:end="67:75"><if pos:start="67:17" pos:end="67:75">if <condition pos:start="67:20" pos:end="67:55">( <expr pos:start="67:22" pos:end="67:53"><name pos:start="67:22" pos:end="67:33">roundingMode</name> <operator pos:start="67:35" pos:end="67:36">==</operator> <name pos:start="67:38" pos:end="67:53">float_round_down</name></expr> )</condition><block type="pseudo" pos:start="67:57" pos:end="67:75"><block_content pos:start="67:57" pos:end="67:75"> <expr_stmt pos:start="67:57" pos:end="67:75"><expr pos:start="67:57" pos:end="67:74"><name pos:start="67:57" pos:end="67:70">roundIncrement</name> <operator pos:start="67:72" pos:end="67:72">=</operator> <literal type="number" pos:start="67:74" pos:end="67:74">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:34"><expr pos:start="75:5" pos:end="75:33"><name pos:start="75:5" pos:end="75:13">roundBits</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <name pos:start="75:17" pos:end="75:21">zSig0</name> <operator pos:start="75:23" pos:end="75:23">&amp;</operator> <name pos:start="75:25" pos:end="75:33">roundMask</name></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="129:5"><if pos:start="77:5" pos:end="129:5">if <condition pos:start="77:8" pos:end="77:44">( <expr pos:start="77:10" pos:end="77:42"><literal type="number" pos:start="77:10" pos:end="77:15">0x7FFD</literal> <operator pos:start="77:17" pos:end="77:18">&lt;=</operator> <operator pos:start="77:20" pos:end="77:20">(</operator><name pos:start="77:21" pos:end="77:28">uint32_t</name><operator pos:start="77:29" pos:end="77:29">)</operator> <operator pos:start="77:31" pos:end="77:31">(</operator> <name pos:start="77:33" pos:end="77:36">zExp</name> <operator pos:start="77:38" pos:end="77:38">-</operator> <literal type="number" pos:start="77:40" pos:end="77:40">1</literal> <operator pos:start="77:42" pos:end="77:42">)</operator></expr> )</condition> <block pos:start="77:46" pos:end="129:5">{<block_content pos:start="79:9" pos:end="127:9">

        <if_stmt pos:start="79:9" pos:end="87:9"><if pos:start="79:9" pos:end="87:9">if <condition pos:start="79:12" pos:end="83:12">(    <expr pos:start="79:17" pos:end="81:76"><operator pos:start="79:17" pos:end="79:17">(</operator> <literal type="number" pos:start="79:19" pos:end="79:24">0x7FFE</literal> <operator pos:start="79:26" pos:end="79:26">&lt;</operator> <name pos:start="79:28" pos:end="79:31">zExp</name> <operator pos:start="79:33" pos:end="79:33">)</operator>

             <operator pos:start="81:14" pos:end="81:15">||</operator> <operator pos:start="81:17" pos:end="81:17">(</operator> <operator pos:start="81:19" pos:end="81:19">(</operator> <name pos:start="81:21" pos:end="81:24">zExp</name> <operator pos:start="81:26" pos:end="81:27">==</operator> <literal type="number" pos:start="81:29" pos:end="81:34">0x7FFE</literal> <operator pos:start="81:36" pos:end="81:36">)</operator> <operator pos:start="81:38" pos:end="81:39">&amp;&amp;</operator> <operator pos:start="81:41" pos:end="81:41">(</operator> <name pos:start="81:43" pos:end="81:47">zSig0</name> <operator pos:start="81:49" pos:end="81:49">+</operator> <name pos:start="81:51" pos:end="81:64">roundIncrement</name> <operator pos:start="81:66" pos:end="81:66">&lt;</operator> <name pos:start="81:68" pos:end="81:72">zSig0</name> <operator pos:start="81:74" pos:end="81:74">)</operator> <operator pos:start="81:76" pos:end="81:76">)</operator></expr>

           )</condition> <block pos:start="83:14" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:26">

            <goto pos:start="85:13" pos:end="85:26">goto <name pos:start="85:18" pos:end="85:25">overflow</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="89:9" pos:end="127:9"><if pos:start="89:9" pos:end="127:9">if <condition pos:start="89:12" pos:end="89:24">( <expr pos:start="89:14" pos:end="89:22"><name pos:start="89:14" pos:end="89:17">zExp</name> <operator pos:start="89:19" pos:end="89:20">&lt;=</operator> <literal type="number" pos:start="89:22" pos:end="89:22">0</literal></expr> )</condition> <block pos:start="89:26" pos:end="127:9">{<block_content pos:start="91:13" pos:end="125:54">

            <if_stmt pos:start="91:13" pos:end="91:76"><if pos:start="91:13" pos:end="91:76">if <condition pos:start="91:16" pos:end="91:40">( <expr pos:start="91:18" pos:end="91:38"><call pos:start="91:18" pos:end="91:38"><name pos:start="91:18" pos:end="91:23">STATUS</name><argument_list pos:start="91:24" pos:end="91:38">(<argument pos:start="91:25" pos:end="91:37"><expr pos:start="91:25" pos:end="91:37"><name pos:start="91:25" pos:end="91:37">flush_to_zero</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo" pos:start="91:42" pos:end="91:76"><block_content pos:start="91:42" pos:end="91:76"> <return pos:start="91:42" pos:end="91:76">return <expr pos:start="91:49" pos:end="91:75"><call pos:start="91:49" pos:end="91:75"><name pos:start="91:49" pos:end="91:60">packFloatx80</name><argument_list pos:start="91:61" pos:end="91:75">( <argument pos:start="91:63" pos:end="91:67"><expr pos:start="91:63" pos:end="91:67"><name pos:start="91:63" pos:end="91:67">zSign</name></expr></argument>, <argument pos:start="91:70" pos:end="91:70"><expr pos:start="91:70" pos:end="91:70"><literal type="number" pos:start="91:70" pos:end="91:70">0</literal></expr></argument>, <argument pos:start="91:73" pos:end="91:73"><expr pos:start="91:73" pos:end="91:73"><literal type="number" pos:start="91:73" pos:end="91:73">0</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="93:13" pos:end="99:55"><expr pos:start="93:13" pos:end="99:54"><name pos:start="93:13" pos:end="93:18">isTiny</name> <operator pos:start="93:20" pos:end="93:20">=</operator>

                   <operator pos:start="95:20" pos:end="95:20">(</operator> <call pos:start="95:22" pos:end="95:50"><name pos:start="95:22" pos:end="95:27">STATUS</name><argument_list pos:start="95:28" pos:end="95:50">(<argument pos:start="95:29" pos:end="95:49"><expr pos:start="95:29" pos:end="95:49"><name pos:start="95:29" pos:end="95:49">float_detect_tininess</name></expr></argument>)</argument_list></call> <operator pos:start="95:52" pos:end="95:53">==</operator> <name pos:start="95:55" pos:end="95:84">float_tininess_before_rounding</name> <operator pos:start="95:86" pos:end="95:86">)</operator>

                <operator pos:start="97:17" pos:end="97:18">||</operator> <operator pos:start="97:20" pos:end="97:20">(</operator> <name pos:start="97:22" pos:end="97:25">zExp</name> <operator pos:start="97:27" pos:end="97:27">&lt;</operator> <literal type="number" pos:start="97:29" pos:end="97:29">0</literal> <operator pos:start="97:31" pos:end="97:31">)</operator>

                <operator pos:start="99:17" pos:end="99:18">||</operator> <operator pos:start="99:20" pos:end="99:20">(</operator> <name pos:start="99:22" pos:end="99:26">zSig0</name> <operator pos:start="99:28" pos:end="99:29">&lt;=</operator> <name pos:start="99:31" pos:end="99:35">zSig0</name> <operator pos:start="99:37" pos:end="99:37">+</operator> <name pos:start="99:39" pos:end="99:52">roundIncrement</name> <operator pos:start="99:54" pos:end="99:54">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:59"><expr pos:start="101:13" pos:end="101:58"><call pos:start="101:13" pos:end="101:58"><name pos:start="101:13" pos:end="101:31">shift64RightJamming</name><argument_list pos:start="101:32" pos:end="101:58">( <argument pos:start="101:34" pos:end="101:38"><expr pos:start="101:34" pos:end="101:38"><name pos:start="101:34" pos:end="101:38">zSig0</name></expr></argument>, <argument pos:start="101:41" pos:end="101:48"><expr pos:start="101:41" pos:end="101:48"><literal type="number" pos:start="101:41" pos:end="101:43">1</literal> <operator pos:start="101:43" pos:end="101:43">-</operator> <name pos:start="101:45" pos:end="101:48">zExp</name></expr></argument>, <argument pos:start="101:51" pos:end="101:56"><expr pos:start="101:51" pos:end="101:56"><operator pos:start="101:51" pos:end="101:51">&amp;</operator><name pos:start="101:52" pos:end="101:56">zSig0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:21"><expr pos:start="103:13" pos:end="103:20"><name pos:start="103:13" pos:end="103:16">zExp</name> <operator pos:start="103:18" pos:end="103:18">=</operator> <literal type="number" pos:start="103:20" pos:end="103:20">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:42"><expr pos:start="105:13" pos:end="105:41"><name pos:start="105:13" pos:end="105:21">roundBits</name> <operator pos:start="105:23" pos:end="105:23">=</operator> <name pos:start="105:25" pos:end="105:29">zSig0</name> <operator pos:start="105:31" pos:end="105:31">&amp;</operator> <name pos:start="105:33" pos:end="105:41">roundMask</name></expr>;</expr_stmt>

            <if_stmt pos:start="107:13" pos:end="107:85"><if pos:start="107:13" pos:end="107:85">if <condition pos:start="107:16" pos:end="107:38">( <expr pos:start="107:18" pos:end="107:36"><name pos:start="107:18" pos:end="107:23">isTiny</name> <operator pos:start="107:25" pos:end="107:26">&amp;&amp;</operator> <name pos:start="107:28" pos:end="107:36">roundBits</name></expr> )</condition><block type="pseudo" pos:start="107:40" pos:end="107:85"><block_content pos:start="107:40" pos:end="107:85"> <macro pos:start="107:40" pos:end="107:84"><name pos:start="107:40" pos:end="107:50">float_raise</name><argument_list pos:start="107:51" pos:end="107:84">( <argument pos:start="107:53" pos:end="107:83">float_flag_underflow STATUS_VAR</argument>)</argument_list></macro><empty_stmt pos:start="107:85" pos:end="107:85">;</empty_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="109:13" pos:end="109:81"><if pos:start="109:13" pos:end="109:81">if <condition pos:start="109:16" pos:end="109:28">( <expr pos:start="109:18" pos:end="109:26"><name pos:start="109:18" pos:end="109:26">roundBits</name></expr> )</condition><block type="pseudo" pos:start="109:30" pos:end="109:81"><block_content pos:start="109:30" pos:end="109:81"> <expr_stmt pos:start="109:30" pos:end="109:81"><expr pos:start="109:30" pos:end="109:80"><call pos:start="109:30" pos:end="109:58"><name pos:start="109:30" pos:end="109:35">STATUS</name><argument_list pos:start="109:36" pos:end="109:58">(<argument pos:start="109:37" pos:end="109:57"><expr pos:start="109:37" pos:end="109:57"><name pos:start="109:37" pos:end="109:57">float_exception_flags</name></expr></argument>)</argument_list></call> <operator pos:start="109:60" pos:end="109:61">|=</operator> <name pos:start="109:63" pos:end="109:80">float_flag_inexact</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:36"><expr pos:start="111:13" pos:end="111:35"><name pos:start="111:13" pos:end="111:17">zSig0</name> <operator pos:start="111:19" pos:end="111:20">+=</operator> <name pos:start="111:22" pos:end="111:35">roundIncrement</name></expr>;</expr_stmt>

            <if_stmt pos:start="113:13" pos:end="113:48"><if pos:start="113:13" pos:end="113:48">if <condition pos:start="113:16" pos:end="113:38">( <expr pos:start="113:18" pos:end="113:36"><operator pos:start="113:18" pos:end="113:18">(</operator><name pos:start="113:19" pos:end="113:25">int64_t</name><operator pos:start="113:26" pos:end="113:26">)</operator> <name pos:start="113:28" pos:end="113:32">zSig0</name> <operator pos:start="113:34" pos:end="113:34">&lt;</operator> <literal type="number" pos:start="113:36" pos:end="113:36">0</literal></expr> )</condition><block type="pseudo" pos:start="113:40" pos:end="113:48"><block_content pos:start="113:40" pos:end="113:48"> <expr_stmt pos:start="113:40" pos:end="113:48"><expr pos:start="113:40" pos:end="113:47"><name pos:start="113:40" pos:end="113:43">zExp</name> <operator pos:start="113:45" pos:end="113:45">=</operator> <literal type="number" pos:start="113:47" pos:end="113:47">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:43"><expr pos:start="115:13" pos:end="115:42"><name pos:start="115:13" pos:end="115:26">roundIncrement</name> <operator pos:start="115:28" pos:end="115:28">=</operator> <name pos:start="115:30" pos:end="115:38">roundMask</name> <operator pos:start="115:40" pos:end="115:40">+</operator> <literal type="number" pos:start="115:42" pos:end="115:42">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="117:13" pos:end="121:13"><if pos:start="117:13" pos:end="121:13">if <condition pos:start="117:16" pos:end="117:73">( <expr pos:start="117:18" pos:end="117:71"><name pos:start="117:18" pos:end="117:33">roundNearestEven</name> <operator pos:start="117:35" pos:end="117:36">&amp;&amp;</operator> <operator pos:start="117:38" pos:end="117:38">(</operator> <name pos:start="117:40" pos:end="117:48">roundBits</name><operator pos:start="117:49" pos:end="117:50">&lt;&lt;</operator><literal type="number" pos:start="117:51" pos:end="117:51">1</literal> <operator pos:start="117:53" pos:end="117:54">==</operator> <name pos:start="117:56" pos:end="117:69">roundIncrement</name> <operator pos:start="117:71" pos:end="117:71">)</operator></expr> )</condition> <block pos:start="117:75" pos:end="121:13">{<block_content pos:start="119:17" pos:end="119:44">

                <expr_stmt pos:start="119:17" pos:end="119:44"><expr pos:start="119:17" pos:end="119:43"><name pos:start="119:17" pos:end="119:25">roundMask</name> <operator pos:start="119:27" pos:end="119:28">|=</operator> <name pos:start="119:30" pos:end="119:43">roundIncrement</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:33"><expr pos:start="123:13" pos:end="123:32"><name pos:start="123:13" pos:end="123:17">zSig0</name> <operator pos:start="123:19" pos:end="123:20">&amp;=</operator> <operator pos:start="123:22" pos:end="123:22">~</operator> <name pos:start="123:24" pos:end="123:32">roundMask</name></expr>;</expr_stmt>

            <return pos:start="125:13" pos:end="125:54">return <expr pos:start="125:20" pos:end="125:53"><call pos:start="125:20" pos:end="125:53"><name pos:start="125:20" pos:end="125:31">packFloatx80</name><argument_list pos:start="125:32" pos:end="125:53">( <argument pos:start="125:34" pos:end="125:38"><expr pos:start="125:34" pos:end="125:38"><name pos:start="125:34" pos:end="125:38">zSign</name></expr></argument>, <argument pos:start="125:41" pos:end="125:44"><expr pos:start="125:41" pos:end="125:44"><name pos:start="125:41" pos:end="125:44">zExp</name></expr></argument>, <argument pos:start="125:47" pos:end="125:51"><expr pos:start="125:47" pos:end="125:51"><name pos:start="125:47" pos:end="125:51">zSig0</name></expr></argument> )</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="131:5" pos:end="131:73"><if pos:start="131:5" pos:end="131:73">if <condition pos:start="131:8" pos:end="131:20">( <expr pos:start="131:10" pos:end="131:18"><name pos:start="131:10" pos:end="131:18">roundBits</name></expr> )</condition><block type="pseudo" pos:start="131:22" pos:end="131:73"><block_content pos:start="131:22" pos:end="131:73"> <expr_stmt pos:start="131:22" pos:end="131:73"><expr pos:start="131:22" pos:end="131:72"><call pos:start="131:22" pos:end="131:50"><name pos:start="131:22" pos:end="131:27">STATUS</name><argument_list pos:start="131:28" pos:end="131:50">(<argument pos:start="131:29" pos:end="131:49"><expr pos:start="131:29" pos:end="131:49"><name pos:start="131:29" pos:end="131:49">float_exception_flags</name></expr></argument>)</argument_list></call> <operator pos:start="131:52" pos:end="131:53">|=</operator> <name pos:start="131:55" pos:end="131:72">float_flag_inexact</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:28"><expr pos:start="133:5" pos:end="133:27"><name pos:start="133:5" pos:end="133:9">zSig0</name> <operator pos:start="133:11" pos:end="133:12">+=</operator> <name pos:start="133:14" pos:end="133:27">roundIncrement</name></expr>;</expr_stmt>

    <if_stmt pos:start="135:5" pos:end="141:5"><if pos:start="135:5" pos:end="141:5">if <condition pos:start="135:8" pos:end="135:33">( <expr pos:start="135:10" pos:end="135:31"><name pos:start="135:10" pos:end="135:14">zSig0</name> <operator pos:start="135:16" pos:end="135:16">&lt;</operator> <name pos:start="135:18" pos:end="135:31">roundIncrement</name></expr> )</condition> <block pos:start="135:35" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:44">

        <expr_stmt pos:start="137:9" pos:end="137:15"><expr pos:start="137:9" pos:end="137:14"><operator pos:start="137:9" pos:end="137:10">++</operator><name pos:start="137:11" pos:end="137:14">zExp</name></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:44"><expr pos:start="139:9" pos:end="139:43"><name pos:start="139:9" pos:end="139:13">zSig0</name> <operator pos:start="139:15" pos:end="139:15">=</operator> <call pos:start="139:17" pos:end="139:43"><name pos:start="139:17" pos:end="139:21">LIT64</name><argument_list pos:start="139:22" pos:end="139:43">( <argument pos:start="139:24" pos:end="139:41"><expr pos:start="139:24" pos:end="139:41"><literal type="number" pos:start="139:24" pos:end="139:41">0x8000000000000000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:35"><expr pos:start="143:5" pos:end="143:34"><name pos:start="143:5" pos:end="143:18">roundIncrement</name> <operator pos:start="143:20" pos:end="143:20">=</operator> <name pos:start="143:22" pos:end="143:30">roundMask</name> <operator pos:start="143:32" pos:end="143:32">+</operator> <literal type="number" pos:start="143:34" pos:end="143:34">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="149:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:65">( <expr pos:start="145:10" pos:end="145:63"><name pos:start="145:10" pos:end="145:25">roundNearestEven</name> <operator pos:start="145:27" pos:end="145:28">&amp;&amp;</operator> <operator pos:start="145:30" pos:end="145:30">(</operator> <name pos:start="145:32" pos:end="145:40">roundBits</name><operator pos:start="145:41" pos:end="145:42">&lt;&lt;</operator><literal type="number" pos:start="145:43" pos:end="145:43">1</literal> <operator pos:start="145:45" pos:end="145:46">==</operator> <name pos:start="145:48" pos:end="145:61">roundIncrement</name> <operator pos:start="145:63" pos:end="145:63">)</operator></expr> )</condition> <block pos:start="145:67" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:36">

        <expr_stmt pos:start="147:9" pos:end="147:36"><expr pos:start="147:9" pos:end="147:35"><name pos:start="147:9" pos:end="147:17">roundMask</name> <operator pos:start="147:19" pos:end="147:20">|=</operator> <name pos:start="147:22" pos:end="147:35">roundIncrement</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:25"><expr pos:start="151:5" pos:end="151:24"><name pos:start="151:5" pos:end="151:9">zSig0</name> <operator pos:start="151:11" pos:end="151:12">&amp;=</operator> <operator pos:start="151:14" pos:end="151:14">~</operator> <name pos:start="151:16" pos:end="151:24">roundMask</name></expr>;</expr_stmt>

    <if_stmt pos:start="153:5" pos:end="153:31"><if pos:start="153:5" pos:end="153:31">if <condition pos:start="153:8" pos:end="153:21">( <expr pos:start="153:10" pos:end="153:19"><name pos:start="153:10" pos:end="153:14">zSig0</name> <operator pos:start="153:16" pos:end="153:17">==</operator> <literal type="number" pos:start="153:19" pos:end="153:19">0</literal></expr> )</condition><block type="pseudo" pos:start="153:23" pos:end="153:31"><block_content pos:start="153:23" pos:end="153:31"> <expr_stmt pos:start="153:23" pos:end="153:31"><expr pos:start="153:23" pos:end="153:30"><name pos:start="153:23" pos:end="153:26">zExp</name> <operator pos:start="153:28" pos:end="153:28">=</operator> <literal type="number" pos:start="153:30" pos:end="153:30">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="155:5" pos:end="155:46">return <expr pos:start="155:12" pos:end="155:45"><call pos:start="155:12" pos:end="155:45"><name pos:start="155:12" pos:end="155:23">packFloatx80</name><argument_list pos:start="155:24" pos:end="155:45">( <argument pos:start="155:26" pos:end="155:30"><expr pos:start="155:26" pos:end="155:30"><name pos:start="155:26" pos:end="155:30">zSign</name></expr></argument>, <argument pos:start="155:33" pos:end="155:36"><expr pos:start="155:33" pos:end="155:36"><name pos:start="155:33" pos:end="155:36">zExp</name></expr></argument>, <argument pos:start="155:39" pos:end="155:43"><expr pos:start="155:39" pos:end="155:43"><name pos:start="155:39" pos:end="155:43">zSig0</name></expr></argument> )</argument_list></call></expr>;</return>

 <label pos:start="157:2" pos:end="157:13"><name pos:start="157:2" pos:end="157:12">precision80</name>:</label>

    <expr_stmt pos:start="159:5" pos:end="159:40"><expr pos:start="159:5" pos:end="159:39"><name pos:start="159:5" pos:end="159:13">increment</name> <operator pos:start="159:15" pos:end="159:15">=</operator> <operator pos:start="159:17" pos:end="159:17">(</operator> <operator pos:start="159:19" pos:end="159:19">(</operator><name pos:start="159:20" pos:end="159:26">int64_t</name><operator pos:start="159:27" pos:end="159:27">)</operator> <name pos:start="159:29" pos:end="159:33">zSig1</name> <operator pos:start="159:35" pos:end="159:35">&lt;</operator> <literal type="number" pos:start="159:37" pos:end="159:37">0</literal> <operator pos:start="159:39" pos:end="159:39">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="161:5" pos:end="185:5"><if pos:start="161:5" pos:end="185:5">if <condition pos:start="161:8" pos:end="161:29">( <expr pos:start="161:10" pos:end="161:27"><operator pos:start="161:10" pos:end="161:10">!</operator> <name pos:start="161:12" pos:end="161:27">roundNearestEven</name></expr> )</condition> <block pos:start="161:31" pos:end="185:5">{<block_content pos:start="163:9" pos:end="183:9">

        <if_stmt pos:start="163:9" pos:end="183:9"><if pos:start="163:9" pos:end="167:9">if <condition pos:start="163:12" pos:end="163:50">( <expr pos:start="163:14" pos:end="163:48"><name pos:start="163:14" pos:end="163:25">roundingMode</name> <operator pos:start="163:27" pos:end="163:28">==</operator> <name pos:start="163:30" pos:end="163:48">float_round_to_zero</name></expr> )</condition> <block pos:start="163:52" pos:end="167:9">{<block_content pos:start="165:13" pos:end="165:26">

            <expr_stmt pos:start="165:13" pos:end="165:26"><expr pos:start="165:13" pos:end="165:25"><name pos:start="165:13" pos:end="165:21">increment</name> <operator pos:start="165:23" pos:end="165:23">=</operator> <literal type="number" pos:start="165:25" pos:end="165:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="169:9" pos:end="183:9">else <block pos:start="169:14" pos:end="183:9">{<block_content pos:start="171:13" pos:end="181:13">

            <if_stmt pos:start="171:13" pos:end="181:13"><if pos:start="171:13" pos:end="175:13">if <condition pos:start="171:16" pos:end="171:24">( <expr pos:start="171:18" pos:end="171:22"><name pos:start="171:18" pos:end="171:22">zSign</name></expr> )</condition> <block pos:start="171:26" pos:end="175:13">{<block_content pos:start="173:17" pos:end="173:74">

                <expr_stmt pos:start="173:17" pos:end="173:74"><expr pos:start="173:17" pos:end="173:73"><name pos:start="173:17" pos:end="173:25">increment</name> <operator pos:start="173:27" pos:end="173:27">=</operator> <operator pos:start="173:29" pos:end="173:29">(</operator> <name pos:start="173:31" pos:end="173:42">roundingMode</name> <operator pos:start="173:44" pos:end="173:45">==</operator> <name pos:start="173:47" pos:end="173:62">float_round_down</name> <operator pos:start="173:64" pos:end="173:64">)</operator> <operator pos:start="173:66" pos:end="173:67">&amp;&amp;</operator> <name pos:start="173:69" pos:end="173:73">zSig1</name></expr>;</expr_stmt>

            </block_content>}</block></if>

            <else pos:start="177:13" pos:end="181:13">else <block pos:start="177:18" pos:end="181:13">{<block_content pos:start="179:17" pos:end="179:72">

                <expr_stmt pos:start="179:17" pos:end="179:72"><expr pos:start="179:17" pos:end="179:71"><name pos:start="179:17" pos:end="179:25">increment</name> <operator pos:start="179:27" pos:end="179:27">=</operator> <operator pos:start="179:29" pos:end="179:29">(</operator> <name pos:start="179:31" pos:end="179:42">roundingMode</name> <operator pos:start="179:44" pos:end="179:45">==</operator> <name pos:start="179:47" pos:end="179:60">float_round_up</name> <operator pos:start="179:62" pos:end="179:62">)</operator> <operator pos:start="179:64" pos:end="179:65">&amp;&amp;</operator> <name pos:start="179:67" pos:end="179:71">zSig1</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="187:5" pos:end="281:5"><if pos:start="187:5" pos:end="281:5">if <condition pos:start="187:8" pos:end="187:44">( <expr pos:start="187:10" pos:end="187:42"><literal type="number" pos:start="187:10" pos:end="187:15">0x7FFD</literal> <operator pos:start="187:17" pos:end="187:18">&lt;=</operator> <operator pos:start="187:20" pos:end="187:20">(</operator><name pos:start="187:21" pos:end="187:28">uint32_t</name><operator pos:start="187:29" pos:end="187:29">)</operator> <operator pos:start="187:31" pos:end="187:31">(</operator> <name pos:start="187:33" pos:end="187:36">zExp</name> <operator pos:start="187:38" pos:end="187:38">-</operator> <literal type="number" pos:start="187:40" pos:end="187:40">1</literal> <operator pos:start="187:42" pos:end="187:42">)</operator></expr> )</condition> <block pos:start="187:46" pos:end="281:5">{<block_content pos:start="189:9" pos:end="279:9">

        <if_stmt pos:start="189:9" pos:end="221:9"><if pos:start="189:9" pos:end="221:9">if <condition pos:start="189:12" pos:end="199:12">(    <expr pos:start="189:17" pos:end="197:17"><operator pos:start="189:17" pos:end="189:17">(</operator> <literal type="number" pos:start="189:19" pos:end="189:24">0x7FFE</literal> <operator pos:start="189:26" pos:end="189:26">&lt;</operator> <name pos:start="189:28" pos:end="189:31">zExp</name> <operator pos:start="189:33" pos:end="189:33">)</operator>

             <operator pos:start="191:14" pos:end="191:15">||</operator> <operator pos:start="191:17" pos:end="191:17">(</operator>    <operator pos:start="191:22" pos:end="191:22">(</operator> <name pos:start="191:24" pos:end="191:27">zExp</name> <operator pos:start="191:29" pos:end="191:30">==</operator> <literal type="number" pos:start="191:32" pos:end="191:37">0x7FFE</literal> <operator pos:start="191:39" pos:end="191:39">)</operator>

                  <operator pos:start="193:19" pos:end="193:20">&amp;&amp;</operator> <operator pos:start="193:22" pos:end="193:22">(</operator> <name pos:start="193:24" pos:end="193:28">zSig0</name> <operator pos:start="193:30" pos:end="193:31">==</operator> <call pos:start="193:33" pos:end="193:59"><name pos:start="193:33" pos:end="193:37">LIT64</name><argument_list pos:start="193:38" pos:end="193:59">( <argument pos:start="193:40" pos:end="193:57"><expr pos:start="193:40" pos:end="193:57"><literal type="number" pos:start="193:40" pos:end="193:57">0xFFFFFFFFFFFFFFFF</literal></expr></argument> )</argument_list></call> <operator pos:start="193:61" pos:end="193:61">)</operator>

                  <operator pos:start="195:19" pos:end="195:20">&amp;&amp;</operator> <name pos:start="195:22" pos:end="195:30">increment</name>

                <operator pos:start="197:17" pos:end="197:17">)</operator></expr>

           )</condition> <block pos:start="199:14" pos:end="221:9">{<block_content pos:start="201:13" pos:end="219:78">

            <expr_stmt pos:start="201:13" pos:end="201:26"><expr pos:start="201:13" pos:end="201:25"><name pos:start="201:13" pos:end="201:21">roundMask</name> <operator pos:start="201:23" pos:end="201:23">=</operator> <literal type="number" pos:start="201:25" pos:end="201:25">0</literal></expr>;</expr_stmt>

 <label pos:start="203:2" pos:end="203:10"><name pos:start="203:2" pos:end="203:9">overflow</name>:</label>

            <macro pos:start="205:13" pos:end="205:77"><name pos:start="205:13" pos:end="205:23">float_raise</name><argument_list pos:start="205:24" pos:end="205:77">( <argument pos:start="205:26" pos:end="205:76">float_flag_overflow | float_flag_inexact STATUS_VAR</argument>)</argument_list></macro><empty_stmt pos:start="205:78" pos:end="205:78">;</empty_stmt>

            <if_stmt pos:start="207:13" pos:end="217:13"><if pos:start="207:13" pos:end="217:13">if <condition pos:start="207:16" pos:end="213:16">(    <expr pos:start="207:21" pos:end="211:71"><operator pos:start="207:21" pos:end="207:21">(</operator> <name pos:start="207:23" pos:end="207:34">roundingMode</name> <operator pos:start="207:36" pos:end="207:37">==</operator> <name pos:start="207:39" pos:end="207:57">float_round_to_zero</name> <operator pos:start="207:59" pos:end="207:59">)</operator>

                 <operator pos:start="209:18" pos:end="209:19">||</operator> <operator pos:start="209:21" pos:end="209:21">(</operator> <name pos:start="209:23" pos:end="209:27">zSign</name> <operator pos:start="209:29" pos:end="209:30">&amp;&amp;</operator> <operator pos:start="209:32" pos:end="209:32">(</operator> <name pos:start="209:34" pos:end="209:45">roundingMode</name> <operator pos:start="209:47" pos:end="209:48">==</operator> <name pos:start="209:50" pos:end="209:63">float_round_up</name> <operator pos:start="209:65" pos:end="209:65">)</operator> <operator pos:start="209:67" pos:end="209:67">)</operator>

                 <operator pos:start="211:18" pos:end="211:19">||</operator> <operator pos:start="211:21" pos:end="211:21">(</operator> <operator pos:start="211:23" pos:end="211:23">!</operator> <name pos:start="211:25" pos:end="211:29">zSign</name> <operator pos:start="211:31" pos:end="211:32">&amp;&amp;</operator> <operator pos:start="211:34" pos:end="211:34">(</operator> <name pos:start="211:36" pos:end="211:47">roundingMode</name> <operator pos:start="211:49" pos:end="211:50">==</operator> <name pos:start="211:52" pos:end="211:67">float_round_down</name> <operator pos:start="211:69" pos:end="211:69">)</operator> <operator pos:start="211:71" pos:end="211:71">)</operator></expr>

               )</condition> <block pos:start="213:18" pos:end="217:13">{<block_content pos:start="215:17" pos:end="215:66">

                <return pos:start="215:17" pos:end="215:66">return <expr pos:start="215:24" pos:end="215:65"><call pos:start="215:24" pos:end="215:65"><name pos:start="215:24" pos:end="215:35">packFloatx80</name><argument_list pos:start="215:36" pos:end="215:65">( <argument pos:start="215:38" pos:end="215:42"><expr pos:start="215:38" pos:end="215:42"><name pos:start="215:38" pos:end="215:42">zSign</name></expr></argument>, <argument pos:start="215:45" pos:end="215:50"><expr pos:start="215:45" pos:end="215:50"><literal type="number" pos:start="215:45" pos:end="215:50">0x7FFE</literal></expr></argument>, <argument pos:start="215:53" pos:end="215:63"><expr pos:start="215:53" pos:end="215:63"><operator pos:start="215:53" pos:end="215:53">~</operator> <name pos:start="215:55" pos:end="215:63">roundMask</name></expr></argument> )</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <return pos:start="219:13" pos:end="219:78">return <expr pos:start="219:20" pos:end="219:77"><call pos:start="219:20" pos:end="219:77"><name pos:start="219:20" pos:end="219:31">packFloatx80</name><argument_list pos:start="219:32" pos:end="219:77">( <argument pos:start="219:34" pos:end="219:38"><expr pos:start="219:34" pos:end="219:38"><name pos:start="219:34" pos:end="219:38">zSign</name></expr></argument>, <argument pos:start="219:41" pos:end="219:46"><expr pos:start="219:41" pos:end="219:46"><literal type="number" pos:start="219:41" pos:end="219:46">0x7FFF</literal></expr></argument>, <argument pos:start="219:49" pos:end="219:75"><expr pos:start="219:49" pos:end="219:75"><call pos:start="219:49" pos:end="219:75"><name pos:start="219:49" pos:end="219:53">LIT64</name><argument_list pos:start="219:54" pos:end="219:75">( <argument pos:start="219:56" pos:end="219:73"><expr pos:start="219:56" pos:end="219:73"><literal type="number" pos:start="219:56" pos:end="219:73">0x8000000000000000</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="223:9" pos:end="279:9"><if pos:start="223:9" pos:end="279:9">if <condition pos:start="223:12" pos:end="223:24">( <expr pos:start="223:14" pos:end="223:22"><name pos:start="223:14" pos:end="223:17">zExp</name> <operator pos:start="223:19" pos:end="223:20">&lt;=</operator> <literal type="number" pos:start="223:22" pos:end="223:22">0</literal></expr> )</condition> <block pos:start="223:26" pos:end="279:9">{<block_content pos:start="225:13" pos:end="277:54">

            <expr_stmt pos:start="225:13" pos:end="233:59"><expr pos:start="225:13" pos:end="233:58"><name pos:start="225:13" pos:end="225:18">isTiny</name> <operator pos:start="225:20" pos:end="225:20">=</operator>

                   <operator pos:start="227:20" pos:end="227:20">(</operator> <call pos:start="227:22" pos:end="227:50"><name pos:start="227:22" pos:end="227:27">STATUS</name><argument_list pos:start="227:28" pos:end="227:50">(<argument pos:start="227:29" pos:end="227:49"><expr pos:start="227:29" pos:end="227:49"><name pos:start="227:29" pos:end="227:49">float_detect_tininess</name></expr></argument>)</argument_list></call> <operator pos:start="227:52" pos:end="227:53">==</operator> <name pos:start="227:55" pos:end="227:84">float_tininess_before_rounding</name> <operator pos:start="227:86" pos:end="227:86">)</operator>

                <operator pos:start="229:17" pos:end="229:18">||</operator> <operator pos:start="229:20" pos:end="229:20">(</operator> <name pos:start="229:22" pos:end="229:25">zExp</name> <operator pos:start="229:27" pos:end="229:27">&lt;</operator> <literal type="number" pos:start="229:29" pos:end="229:29">0</literal> <operator pos:start="229:31" pos:end="229:31">)</operator>

                <operator pos:start="231:17" pos:end="231:18">||</operator> <operator pos:start="231:20" pos:end="231:20">!</operator> <name pos:start="231:22" pos:end="231:30">increment</name>

                <operator pos:start="233:17" pos:end="233:18">||</operator> <operator pos:start="233:20" pos:end="233:20">(</operator> <name pos:start="233:22" pos:end="233:26">zSig0</name> <operator pos:start="233:28" pos:end="233:28">&lt;</operator> <call pos:start="233:30" pos:end="233:56"><name pos:start="233:30" pos:end="233:34">LIT64</name><argument_list pos:start="233:35" pos:end="233:56">( <argument pos:start="233:37" pos:end="233:54"><expr pos:start="233:37" pos:end="233:54"><literal type="number" pos:start="233:37" pos:end="233:54">0xFFFFFFFFFFFFFFFF</literal></expr></argument> )</argument_list></call> <operator pos:start="233:58" pos:end="233:58">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:79"><expr pos:start="235:13" pos:end="235:78"><call pos:start="235:13" pos:end="235:78"><name pos:start="235:13" pos:end="235:36">shift64ExtraRightJamming</name><argument_list pos:start="235:37" pos:end="235:78">( <argument pos:start="235:39" pos:end="235:43"><expr pos:start="235:39" pos:end="235:43"><name pos:start="235:39" pos:end="235:43">zSig0</name></expr></argument>, <argument pos:start="235:46" pos:end="235:50"><expr pos:start="235:46" pos:end="235:50"><name pos:start="235:46" pos:end="235:50">zSig1</name></expr></argument>, <argument pos:start="235:53" pos:end="235:60"><expr pos:start="235:53" pos:end="235:60"><literal type="number" pos:start="235:53" pos:end="235:55">1</literal> <operator pos:start="235:55" pos:end="235:55">-</operator> <name pos:start="235:57" pos:end="235:60">zExp</name></expr></argument>, <argument pos:start="235:63" pos:end="235:68"><expr pos:start="235:63" pos:end="235:68"><operator pos:start="235:63" pos:end="235:63">&amp;</operator><name pos:start="235:64" pos:end="235:68">zSig0</name></expr></argument>, <argument pos:start="235:71" pos:end="235:76"><expr pos:start="235:71" pos:end="235:76"><operator pos:start="235:71" pos:end="235:71">&amp;</operator><name pos:start="235:72" pos:end="235:76">zSig1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:21"><expr pos:start="237:13" pos:end="237:20"><name pos:start="237:13" pos:end="237:16">zExp</name> <operator pos:start="237:18" pos:end="237:18">=</operator> <literal type="number" pos:start="237:20" pos:end="237:20">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="239:13" pos:end="239:81"><if pos:start="239:13" pos:end="239:81">if <condition pos:start="239:16" pos:end="239:34">( <expr pos:start="239:18" pos:end="239:32"><name pos:start="239:18" pos:end="239:23">isTiny</name> <operator pos:start="239:25" pos:end="239:26">&amp;&amp;</operator> <name pos:start="239:28" pos:end="239:32">zSig1</name></expr> )</condition><block type="pseudo" pos:start="239:36" pos:end="239:81"><block_content pos:start="239:36" pos:end="239:81"> <macro pos:start="239:36" pos:end="239:80"><name pos:start="239:36" pos:end="239:46">float_raise</name><argument_list pos:start="239:47" pos:end="239:80">( <argument pos:start="239:49" pos:end="239:79">float_flag_underflow STATUS_VAR</argument>)</argument_list></macro><empty_stmt pos:start="239:81" pos:end="239:81">;</empty_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="241:13" pos:end="241:77"><if pos:start="241:13" pos:end="241:77">if <condition pos:start="241:16" pos:end="241:24">( <expr pos:start="241:18" pos:end="241:22"><name pos:start="241:18" pos:end="241:22">zSig1</name></expr> )</condition><block type="pseudo" pos:start="241:26" pos:end="241:77"><block_content pos:start="241:26" pos:end="241:77"> <expr_stmt pos:start="241:26" pos:end="241:77"><expr pos:start="241:26" pos:end="241:76"><call pos:start="241:26" pos:end="241:54"><name pos:start="241:26" pos:end="241:31">STATUS</name><argument_list pos:start="241:32" pos:end="241:54">(<argument pos:start="241:33" pos:end="241:53"><expr pos:start="241:33" pos:end="241:53"><name pos:start="241:33" pos:end="241:53">float_exception_flags</name></expr></argument>)</argument_list></call> <operator pos:start="241:56" pos:end="241:57">|=</operator> <name pos:start="241:59" pos:end="241:76">float_flag_inexact</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="243:13" pos:end="263:13"><if pos:start="243:13" pos:end="247:13">if <condition pos:start="243:16" pos:end="243:35">( <expr pos:start="243:18" pos:end="243:33"><name pos:start="243:18" pos:end="243:33">roundNearestEven</name></expr> )</condition> <block pos:start="243:37" pos:end="247:13">{<block_content pos:start="245:17" pos:end="245:52">

                <expr_stmt pos:start="245:17" pos:end="245:52"><expr pos:start="245:17" pos:end="245:51"><name pos:start="245:17" pos:end="245:25">increment</name> <operator pos:start="245:27" pos:end="245:27">=</operator> <operator pos:start="245:29" pos:end="245:29">(</operator> <operator pos:start="245:31" pos:end="245:31">(</operator><name pos:start="245:32" pos:end="245:38">int64_t</name><operator pos:start="245:39" pos:end="245:39">)</operator> <name pos:start="245:41" pos:end="245:45">zSig1</name> <operator pos:start="245:47" pos:end="245:47">&lt;</operator> <literal type="number" pos:start="245:49" pos:end="245:49">0</literal> <operator pos:start="245:51" pos:end="245:51">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if>

            <else pos:start="249:13" pos:end="263:13">else <block pos:start="249:18" pos:end="263:13">{<block_content pos:start="251:17" pos:end="261:17">

                <if_stmt pos:start="251:17" pos:end="261:17"><if pos:start="251:17" pos:end="255:17">if <condition pos:start="251:20" pos:end="251:28">( <expr pos:start="251:22" pos:end="251:26"><name pos:start="251:22" pos:end="251:26">zSign</name></expr> )</condition> <block pos:start="251:30" pos:end="255:17">{<block_content pos:start="253:21" pos:end="253:78">

                    <expr_stmt pos:start="253:21" pos:end="253:78"><expr pos:start="253:21" pos:end="253:77"><name pos:start="253:21" pos:end="253:29">increment</name> <operator pos:start="253:31" pos:end="253:31">=</operator> <operator pos:start="253:33" pos:end="253:33">(</operator> <name pos:start="253:35" pos:end="253:46">roundingMode</name> <operator pos:start="253:48" pos:end="253:49">==</operator> <name pos:start="253:51" pos:end="253:66">float_round_down</name> <operator pos:start="253:68" pos:end="253:68">)</operator> <operator pos:start="253:70" pos:end="253:71">&amp;&amp;</operator> <name pos:start="253:73" pos:end="253:77">zSig1</name></expr>;</expr_stmt>

                </block_content>}</block></if>

                <else pos:start="257:17" pos:end="261:17">else <block pos:start="257:22" pos:end="261:17">{<block_content pos:start="259:21" pos:end="259:76">

                    <expr_stmt pos:start="259:21" pos:end="259:76"><expr pos:start="259:21" pos:end="259:75"><name pos:start="259:21" pos:end="259:29">increment</name> <operator pos:start="259:31" pos:end="259:31">=</operator> <operator pos:start="259:33" pos:end="259:33">(</operator> <name pos:start="259:35" pos:end="259:46">roundingMode</name> <operator pos:start="259:48" pos:end="259:49">==</operator> <name pos:start="259:51" pos:end="259:64">float_round_up</name> <operator pos:start="259:66" pos:end="259:66">)</operator> <operator pos:start="259:68" pos:end="259:69">&amp;&amp;</operator> <name pos:start="259:71" pos:end="259:75">zSig1</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="265:13" pos:end="275:13"><if pos:start="265:13" pos:end="275:13">if <condition pos:start="265:16" pos:end="265:28">( <expr pos:start="265:18" pos:end="265:26"><name pos:start="265:18" pos:end="265:26">increment</name></expr> )</condition> <block pos:start="265:30" pos:end="275:13">{<block_content pos:start="267:17" pos:end="273:52">

                <expr_stmt pos:start="267:17" pos:end="267:24"><expr pos:start="267:17" pos:end="267:23"><operator pos:start="267:17" pos:end="267:18">++</operator><name pos:start="267:19" pos:end="267:23">zSig0</name></expr>;</expr_stmt>

                <expr_stmt pos:start="269:17" pos:end="271:78"><expr pos:start="269:17" pos:end="271:77"><name pos:start="269:17" pos:end="269:21">zSig0</name> <operator pos:start="269:23" pos:end="269:24">&amp;=</operator>

                    <operator pos:start="271:21" pos:end="271:21">~</operator> <operator pos:start="271:23" pos:end="271:23">(</operator> <operator pos:start="271:25" pos:end="271:25">(</operator> <operator pos:start="271:27" pos:end="271:27">(</operator><name pos:start="271:28" pos:end="271:35">uint64_t</name><operator pos:start="271:36" pos:end="271:36">)</operator> <operator pos:start="271:38" pos:end="271:38">(</operator> <name pos:start="271:40" pos:end="271:44">zSig1</name><operator pos:start="271:45" pos:end="271:46">&lt;&lt;</operator><literal type="number" pos:start="271:47" pos:end="271:47">1</literal> <operator pos:start="271:49" pos:end="271:49">)</operator> <operator pos:start="271:51" pos:end="271:52">==</operator> <literal type="number" pos:start="271:54" pos:end="271:54">0</literal> <operator pos:start="271:56" pos:end="271:56">)</operator> <operator pos:start="271:58" pos:end="271:58">&amp;</operator> <name pos:start="271:60" pos:end="271:75">roundNearestEven</name> <operator pos:start="271:77" pos:end="271:77">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="273:17" pos:end="273:52"><if pos:start="273:17" pos:end="273:52">if <condition pos:start="273:20" pos:end="273:42">( <expr pos:start="273:22" pos:end="273:40"><operator pos:start="273:22" pos:end="273:22">(</operator><name pos:start="273:23" pos:end="273:29">int64_t</name><operator pos:start="273:30" pos:end="273:30">)</operator> <name pos:start="273:32" pos:end="273:36">zSig0</name> <operator pos:start="273:38" pos:end="273:38">&lt;</operator> <literal type="number" pos:start="273:40" pos:end="273:40">0</literal></expr> )</condition><block type="pseudo" pos:start="273:44" pos:end="273:52"><block_content pos:start="273:44" pos:end="273:52"> <expr_stmt pos:start="273:44" pos:end="273:52"><expr pos:start="273:44" pos:end="273:51"><name pos:start="273:44" pos:end="273:47">zExp</name> <operator pos:start="273:49" pos:end="273:49">=</operator> <literal type="number" pos:start="273:51" pos:end="273:51">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <return pos:start="277:13" pos:end="277:54">return <expr pos:start="277:20" pos:end="277:53"><call pos:start="277:20" pos:end="277:53"><name pos:start="277:20" pos:end="277:31">packFloatx80</name><argument_list pos:start="277:32" pos:end="277:53">( <argument pos:start="277:34" pos:end="277:38"><expr pos:start="277:34" pos:end="277:38"><name pos:start="277:34" pos:end="277:38">zSign</name></expr></argument>, <argument pos:start="277:41" pos:end="277:44"><expr pos:start="277:41" pos:end="277:44"><name pos:start="277:41" pos:end="277:44">zExp</name></expr></argument>, <argument pos:start="277:47" pos:end="277:51"><expr pos:start="277:47" pos:end="277:51"><name pos:start="277:47" pos:end="277:51">zSig0</name></expr></argument> )</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="283:5" pos:end="283:69"><if pos:start="283:5" pos:end="283:69">if <condition pos:start="283:8" pos:end="283:16">( <expr pos:start="283:10" pos:end="283:14"><name pos:start="283:10" pos:end="283:14">zSig1</name></expr> )</condition><block type="pseudo" pos:start="283:18" pos:end="283:69"><block_content pos:start="283:18" pos:end="283:69"> <expr_stmt pos:start="283:18" pos:end="283:69"><expr pos:start="283:18" pos:end="283:68"><call pos:start="283:18" pos:end="283:46"><name pos:start="283:18" pos:end="283:23">STATUS</name><argument_list pos:start="283:24" pos:end="283:46">(<argument pos:start="283:25" pos:end="283:45"><expr pos:start="283:25" pos:end="283:45"><name pos:start="283:25" pos:end="283:45">float_exception_flags</name></expr></argument>)</argument_list></call> <operator pos:start="283:48" pos:end="283:49">|=</operator> <name pos:start="283:51" pos:end="283:68">float_flag_inexact</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="285:5" pos:end="309:5"><if pos:start="285:5" pos:end="303:5">if <condition pos:start="285:8" pos:end="285:20">( <expr pos:start="285:10" pos:end="285:18"><name pos:start="285:10" pos:end="285:18">increment</name></expr> )</condition> <block pos:start="285:22" pos:end="303:5">{<block_content pos:start="287:9" pos:end="301:9">

        <expr_stmt pos:start="287:9" pos:end="287:16"><expr pos:start="287:9" pos:end="287:15"><operator pos:start="287:9" pos:end="287:10">++</operator><name pos:start="287:11" pos:end="287:15">zSig0</name></expr>;</expr_stmt>

        <if_stmt pos:start="289:9" pos:end="301:9"><if pos:start="289:9" pos:end="295:9">if <condition pos:start="289:12" pos:end="289:25">( <expr pos:start="289:14" pos:end="289:23"><name pos:start="289:14" pos:end="289:18">zSig0</name> <operator pos:start="289:20" pos:end="289:21">==</operator> <literal type="number" pos:start="289:23" pos:end="289:23">0</literal></expr> )</condition> <block pos:start="289:27" pos:end="295:9">{<block_content pos:start="291:13" pos:end="293:48">

            <expr_stmt pos:start="291:13" pos:end="291:19"><expr pos:start="291:13" pos:end="291:18"><operator pos:start="291:13" pos:end="291:14">++</operator><name pos:start="291:15" pos:end="291:18">zExp</name></expr>;</expr_stmt>

            <expr_stmt pos:start="293:13" pos:end="293:48"><expr pos:start="293:13" pos:end="293:47"><name pos:start="293:13" pos:end="293:17">zSig0</name> <operator pos:start="293:19" pos:end="293:19">=</operator> <call pos:start="293:21" pos:end="293:47"><name pos:start="293:21" pos:end="293:25">LIT64</name><argument_list pos:start="293:26" pos:end="293:47">( <argument pos:start="293:28" pos:end="293:45"><expr pos:start="293:28" pos:end="293:45"><literal type="number" pos:start="293:28" pos:end="293:45">0x8000000000000000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="297:9" pos:end="301:9">else <block pos:start="297:14" pos:end="301:9">{<block_content pos:start="299:13" pos:end="299:79">

            <expr_stmt pos:start="299:13" pos:end="299:79"><expr pos:start="299:13" pos:end="299:78"><name pos:start="299:13" pos:end="299:17">zSig0</name> <operator pos:start="299:19" pos:end="299:20">&amp;=</operator> <operator pos:start="299:22" pos:end="299:22">~</operator> <operator pos:start="299:24" pos:end="299:24">(</operator> <operator pos:start="299:26" pos:end="299:26">(</operator> <operator pos:start="299:28" pos:end="299:28">(</operator><name pos:start="299:29" pos:end="299:36">uint64_t</name><operator pos:start="299:37" pos:end="299:37">)</operator> <operator pos:start="299:39" pos:end="299:39">(</operator> <name pos:start="299:41" pos:end="299:45">zSig1</name><operator pos:start="299:46" pos:end="299:47">&lt;&lt;</operator><literal type="number" pos:start="299:48" pos:end="299:48">1</literal> <operator pos:start="299:50" pos:end="299:50">)</operator> <operator pos:start="299:52" pos:end="299:53">==</operator> <literal type="number" pos:start="299:55" pos:end="299:55">0</literal> <operator pos:start="299:57" pos:end="299:57">)</operator> <operator pos:start="299:59" pos:end="299:59">&amp;</operator> <name pos:start="299:61" pos:end="299:76">roundNearestEven</name> <operator pos:start="299:78" pos:end="299:78">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>

    <else pos:start="305:5" pos:end="309:5">else <block pos:start="305:10" pos:end="309:5">{<block_content pos:start="307:9" pos:end="307:35">

        <if_stmt pos:start="307:9" pos:end="307:35"><if pos:start="307:9" pos:end="307:35">if <condition pos:start="307:12" pos:end="307:25">( <expr pos:start="307:14" pos:end="307:23"><name pos:start="307:14" pos:end="307:18">zSig0</name> <operator pos:start="307:20" pos:end="307:21">==</operator> <literal type="number" pos:start="307:23" pos:end="307:23">0</literal></expr> )</condition><block type="pseudo" pos:start="307:27" pos:end="307:35"><block_content pos:start="307:27" pos:end="307:35"> <expr_stmt pos:start="307:27" pos:end="307:35"><expr pos:start="307:27" pos:end="307:34"><name pos:start="307:27" pos:end="307:30">zExp</name> <operator pos:start="307:32" pos:end="307:32">=</operator> <literal type="number" pos:start="307:34" pos:end="307:34">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="311:5" pos:end="311:46">return <expr pos:start="311:12" pos:end="311:45"><call pos:start="311:12" pos:end="311:45"><name pos:start="311:12" pos:end="311:23">packFloatx80</name><argument_list pos:start="311:24" pos:end="311:45">( <argument pos:start="311:26" pos:end="311:30"><expr pos:start="311:26" pos:end="311:30"><name pos:start="311:26" pos:end="311:30">zSign</name></expr></argument>, <argument pos:start="311:33" pos:end="311:36"><expr pos:start="311:33" pos:end="311:36"><name pos:start="311:33" pos:end="311:36">zExp</name></expr></argument>, <argument pos:start="311:39" pos:end="311:43"><expr pos:start="311:39" pos:end="311:43"><name pos:start="311:39" pos:end="311:43">zSig0</name></expr></argument> )</argument_list></call></expr>;</return>



</block_content>}</block>
</unit>
