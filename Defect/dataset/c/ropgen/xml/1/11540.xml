<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11540.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">usbredir_handle_iso_data</name><parameter_list pos:start="1:36" pos:end="3:48">(<parameter pos:start="1:37" pos:end="1:55"><decl pos:start="1:37" pos:end="1:55"><type pos:start="1:37" pos:end="1:55"><name pos:start="1:37" pos:end="1:50">USBRedirDevice</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">dev</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:66">USBPacket</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:69">p</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:47"><decl pos:start="3:38" pos:end="3:47"><type pos:start="3:38" pos:end="3:47"><name pos:start="3:38" pos:end="3:44">uint8_t</name></type> <name pos:start="3:46" pos:end="3:47">ep</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="137:1">{<block_content pos:start="7:5" pos:end="135:5">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">status</name></decl>, <decl pos:start="7:17" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:19">len</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="37:5"><if pos:start="11:5" pos:end="37:5">if <condition pos:start="11:8" pos:end="13:47">(<expr pos:start="11:9" pos:end="13:46"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:32"><name pos:start="11:10" pos:end="11:12">dev</name><operator pos:start="11:13" pos:end="11:14">-&gt;</operator><name pos:start="11:15" pos:end="11:22">endpoint</name><index pos:start="11:23" pos:end="11:32">[<expr pos:start="11:24" pos:end="11:31"><call pos:start="11:24" pos:end="11:31"><name pos:start="11:24" pos:end="11:27">EP2I</name><argument_list pos:start="11:28" pos:end="11:31">(<argument pos:start="11:29" pos:end="11:30"><expr pos:start="11:29" pos:end="11:30"><name pos:start="11:29" pos:end="11:30">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="11:33" pos:end="11:33">.</operator><name pos:start="11:34" pos:end="11:44">iso_started</name> <operator pos:start="11:46" pos:end="11:47">&amp;&amp;</operator>

            <operator pos:start="13:13" pos:end="13:13">!</operator><name pos:start="13:14" pos:end="13:36"><name pos:start="13:14" pos:end="13:16">dev</name><operator pos:start="13:17" pos:end="13:18">-&gt;</operator><name pos:start="13:19" pos:end="13:26">endpoint</name><index pos:start="13:27" pos:end="13:36">[<expr pos:start="13:28" pos:end="13:35"><call pos:start="13:28" pos:end="13:35"><name pos:start="13:28" pos:end="13:31">EP2I</name><argument_list pos:start="13:32" pos:end="13:35">(<argument pos:start="13:33" pos:end="13:34"><expr pos:start="13:33" pos:end="13:34"><name pos:start="13:33" pos:end="13:34">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="13:37" pos:end="13:37">.</operator><name pos:start="13:38" pos:end="13:46">iso_error</name></expr>)</condition> <block pos:start="13:49" pos:end="37:5">{<block_content pos:start="15:9" pos:end="35:48">

        <decl_stmt pos:start="15:9" pos:end="25:10"><decl pos:start="15:9" pos:end="25:9"><type pos:start="15:9" pos:end="15:48"><name pos:start="15:9" pos:end="15:48"><name pos:start="15:9" pos:end="15:14">struct</name> <name pos:start="15:16" pos:end="15:48">usb_redir_start_iso_stream_header</name></name></type> <name pos:start="15:50" pos:end="15:58">start_iso</name> <init pos:start="15:60" pos:end="25:9">= <expr pos:start="15:62" pos:end="25:9"><block pos:start="15:62" pos:end="25:9">{

            <expr pos:start="17:13" pos:end="17:26"><operator pos:start="17:13" pos:end="17:13">.</operator><name pos:start="17:14" pos:end="17:21">endpoint</name> <operator pos:start="17:23" pos:end="17:23">=</operator> <name pos:start="17:25" pos:end="17:26">ep</name></expr>,

            <comment type="block" pos:start="19:13" pos:end="19:78">/* TODO maybe do something with these depending on ep interval? */</comment>

            <expr pos:start="21:13" pos:end="21:30"><operator pos:start="21:13" pos:end="21:13">.</operator><name pos:start="21:14" pos:end="21:25">pkts_per_urb</name> <operator pos:start="21:27" pos:end="21:27">=</operator> <literal type="number" pos:start="21:29" pos:end="21:30">32</literal></expr>,

            <expr pos:start="23:13" pos:end="23:24"><operator pos:start="23:13" pos:end="23:13">.</operator><name pos:start="23:14" pos:end="23:20">no_urbs</name> <operator pos:start="23:22" pos:end="23:22">=</operator> <literal type="number" pos:start="23:24" pos:end="23:24">3</literal></expr>,

        }</block></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="27:9" pos:end="27:67">/* No id, we look at the ep when receiving a status back */</comment>

        <expr_stmt pos:start="29:9" pos:end="29:73"><expr pos:start="29:9" pos:end="29:72"><call pos:start="29:9" pos:end="29:72"><name pos:start="29:9" pos:end="29:44">usbredirparser_send_start_iso_stream</name><argument_list pos:start="29:45" pos:end="29:72">(<argument pos:start="29:46" pos:end="29:56"><expr pos:start="29:46" pos:end="29:56"><name pos:start="29:46" pos:end="29:56"><name pos:start="29:46" pos:end="29:48">dev</name><operator pos:start="29:49" pos:end="29:50">-&gt;</operator><name pos:start="29:51" pos:end="29:56">parser</name></name></expr></argument>, <argument pos:start="29:59" pos:end="29:59"><expr pos:start="29:59" pos:end="29:59"><literal type="number" pos:start="29:59" pos:end="29:59">0</literal></expr></argument>, <argument pos:start="29:62" pos:end="29:71"><expr pos:start="29:62" pos:end="29:71"><operator pos:start="29:62" pos:end="29:62">&amp;</operator><name pos:start="29:63" pos:end="29:71">start_iso</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:45"><expr pos:start="31:9" pos:end="31:44"><call pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:31">usbredirparser_do_write</name><argument_list pos:start="31:32" pos:end="31:44">(<argument pos:start="31:33" pos:end="31:43"><expr pos:start="31:33" pos:end="31:43"><name pos:start="31:33" pos:end="31:43"><name pos:start="31:33" pos:end="31:35">dev</name><operator pos:start="31:36" pos:end="31:37">-&gt;</operator><name pos:start="31:38" pos:end="31:43">parser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:52"><expr pos:start="33:9" pos:end="33:51"><call pos:start="33:9" pos:end="33:51"><name pos:start="33:9" pos:end="33:15">DPRINTF</name><argument_list pos:start="33:16" pos:end="33:51">(<argument pos:start="33:17" pos:end="33:46"><expr pos:start="33:17" pos:end="33:46"><literal type="string" pos:start="33:17" pos:end="33:46">"iso stream started ep %02X\n"</literal></expr></argument>, <argument pos:start="33:49" pos:end="33:50"><expr pos:start="33:49" pos:end="33:50"><name pos:start="33:49" pos:end="33:50">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:48"><expr pos:start="35:9" pos:end="35:47"><name pos:start="35:9" pos:end="35:31"><name pos:start="35:9" pos:end="35:11">dev</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:21">endpoint</name><index pos:start="35:22" pos:end="35:31">[<expr pos:start="35:23" pos:end="35:30"><call pos:start="35:23" pos:end="35:30"><name pos:start="35:23" pos:end="35:26">EP2I</name><argument_list pos:start="35:27" pos:end="35:30">(<argument pos:start="35:28" pos:end="35:29"><expr pos:start="35:28" pos:end="35:29"><name pos:start="35:28" pos:end="35:29">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="35:32" pos:end="35:32">.</operator><name pos:start="35:33" pos:end="35:43">iso_started</name> <operator pos:start="35:45" pos:end="35:45">=</operator> <literal type="number" pos:start="35:47" pos:end="35:47">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="135:5"><if pos:start="41:5" pos:end="99:5">if <condition pos:start="41:8" pos:end="41:24">(<expr pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:10">ep</name> <operator pos:start="41:12" pos:end="41:12">&amp;</operator> <name pos:start="41:14" pos:end="41:23">USB_DIR_IN</name></expr>)</condition> <block pos:start="41:26" pos:end="99:5">{<block_content pos:start="43:9" pos:end="97:19">

        <decl_stmt pos:start="43:9" pos:end="43:32"><decl pos:start="43:9" pos:end="43:31"><type pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:25"><name pos:start="43:9" pos:end="43:14">struct</name> <name pos:start="43:16" pos:end="43:25">buf_packet</name></name> <modifier pos:start="43:27" pos:end="43:27">*</modifier></type><name pos:start="43:28" pos:end="43:31">isop</name></decl>;</decl_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:60"><expr pos:start="47:9" pos:end="47:59"><name pos:start="47:9" pos:end="47:12">isop</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="47:59"><name pos:start="47:16" pos:end="47:27">QTAILQ_FIRST</name><argument_list pos:start="47:28" pos:end="47:59">(<argument pos:start="47:29" pos:end="47:58"><expr pos:start="47:29" pos:end="47:58"><operator pos:start="47:29" pos:end="47:29">&amp;</operator><name pos:start="47:30" pos:end="47:52"><name pos:start="47:30" pos:end="47:32">dev</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:42">endpoint</name><index pos:start="47:43" pos:end="47:52">[<expr pos:start="47:44" pos:end="47:51"><call pos:start="47:44" pos:end="47:51"><name pos:start="47:44" pos:end="47:47">EP2I</name><argument_list pos:start="47:48" pos:end="47:51">(<argument pos:start="47:49" pos:end="47:50"><expr pos:start="47:49" pos:end="47:50"><name pos:start="47:49" pos:end="47:50">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="47:53" pos:end="47:53">.</operator><name pos:start="47:54" pos:end="47:58">bufpq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="61:9"><if pos:start="49:9" pos:end="61:9">if <condition pos:start="49:12" pos:end="49:25">(<expr pos:start="49:13" pos:end="49:24"><name pos:start="49:13" pos:end="49:16">isop</name> <operator pos:start="49:18" pos:end="49:19">==</operator> <name pos:start="49:21" pos:end="49:24">NULL</name></expr>)</condition> <block pos:start="49:27" pos:end="61:9">{<block_content pos:start="51:13" pos:end="59:58">

            <expr_stmt pos:start="51:13" pos:end="51:60"><expr pos:start="51:13" pos:end="51:59"><call pos:start="51:13" pos:end="51:59"><name pos:start="51:13" pos:end="51:20">DPRINTF2</name><argument_list pos:start="51:21" pos:end="51:59">(<argument pos:start="51:22" pos:end="51:54"><expr pos:start="51:22" pos:end="51:54"><literal type="string" pos:start="51:22" pos:end="51:54">"iso-token-in ep %02X, no isop\n"</literal></expr></argument>, <argument pos:start="51:57" pos:end="51:58"><expr pos:start="51:57" pos:end="51:58"><name pos:start="51:57" pos:end="51:58">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="53:13" pos:end="53:78">/* Check iso_error for stream errors, otherwise its an underrun */</comment>

            <expr_stmt pos:start="55:13" pos:end="55:55"><expr pos:start="55:13" pos:end="55:54"><name pos:start="55:13" pos:end="55:18">status</name> <operator pos:start="55:20" pos:end="55:20">=</operator> <name pos:start="55:22" pos:end="55:44"><name pos:start="55:22" pos:end="55:24">dev</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:34">endpoint</name><index pos:start="55:35" pos:end="55:44">[<expr pos:start="55:36" pos:end="55:43"><call pos:start="55:36" pos:end="55:43"><name pos:start="55:36" pos:end="55:39">EP2I</name><argument_list pos:start="55:40" pos:end="55:43">(<argument pos:start="55:41" pos:end="55:42"><expr pos:start="55:41" pos:end="55:42"><name pos:start="55:41" pos:end="55:42">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="55:45" pos:end="55:45">.</operator><name pos:start="55:46" pos:end="55:54">iso_error</name></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:50"><expr pos:start="57:13" pos:end="57:49"><name pos:start="57:13" pos:end="57:35"><name pos:start="57:13" pos:end="57:15">dev</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:25">endpoint</name><index pos:start="57:26" pos:end="57:35">[<expr pos:start="57:27" pos:end="57:34"><call pos:start="57:27" pos:end="57:34"><name pos:start="57:27" pos:end="57:30">EP2I</name><argument_list pos:start="57:31" pos:end="57:34">(<argument pos:start="57:32" pos:end="57:33"><expr pos:start="57:32" pos:end="57:33"><name pos:start="57:32" pos:end="57:33">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="57:36" pos:end="57:36">.</operator><name pos:start="57:37" pos:end="57:45">iso_error</name> <operator pos:start="57:47" pos:end="57:47">=</operator> <literal type="number" pos:start="57:49" pos:end="57:49">0</literal></expr>;</expr_stmt>

            <return pos:start="59:13" pos:end="59:58">return <expr pos:start="59:20" pos:end="59:57"><call pos:start="59:20" pos:end="59:57"><name pos:start="59:20" pos:end="59:41">usbredir_handle_status</name><argument_list pos:start="59:42" pos:end="59:57">(<argument pos:start="59:43" pos:end="59:45"><expr pos:start="59:43" pos:end="59:45"><name pos:start="59:43" pos:end="59:45">dev</name></expr></argument>, <argument pos:start="59:48" pos:end="59:53"><expr pos:start="59:48" pos:end="59:53"><name pos:start="59:48" pos:end="59:53">status</name></expr></argument>, <argument pos:start="59:56" pos:end="59:56"><expr pos:start="59:56" pos:end="59:56"><literal type="number" pos:start="59:56" pos:end="59:56">0</literal></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="65:28"><expr pos:start="63:9" pos:end="65:27"><call pos:start="63:9" pos:end="65:27"><name pos:start="63:9" pos:end="63:16">DPRINTF2</name><argument_list pos:start="63:17" pos:end="65:27">(<argument pos:start="63:18" pos:end="63:58"><expr pos:start="63:18" pos:end="63:58"><literal type="string" pos:start="63:18" pos:end="63:58">"iso-token-in ep %02X status %d len %d\n"</literal></expr></argument>, <argument pos:start="63:61" pos:end="63:62"><expr pos:start="63:61" pos:end="63:62"><name pos:start="63:61" pos:end="63:62">ep</name></expr></argument>, <argument pos:start="63:65" pos:end="63:76"><expr pos:start="63:65" pos:end="63:76"><name pos:start="63:65" pos:end="63:76"><name pos:start="63:65" pos:end="63:68">isop</name><operator pos:start="63:69" pos:end="63:70">-&gt;</operator><name pos:start="63:71" pos:end="63:76">status</name></name></expr></argument>,

                 <argument pos:start="65:18" pos:end="65:26"><expr pos:start="65:18" pos:end="65:26"><name pos:start="65:18" pos:end="65:26"><name pos:start="65:18" pos:end="65:21">isop</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:26">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:30"><expr pos:start="69:9" pos:end="69:29"><name pos:start="69:9" pos:end="69:14">status</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <name pos:start="69:18" pos:end="69:29"><name pos:start="69:18" pos:end="69:21">isop</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:29">status</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:40">(<expr pos:start="71:13" pos:end="71:39"><name pos:start="71:13" pos:end="71:18">status</name> <operator pos:start="71:20" pos:end="71:21">!=</operator> <name pos:start="71:23" pos:end="71:39">usb_redir_success</name></expr>)</condition> <block pos:start="71:42" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:58">

            <expr_stmt pos:start="73:13" pos:end="73:37"><expr pos:start="73:13" pos:end="73:36"><call pos:start="73:13" pos:end="73:36"><name pos:start="73:13" pos:end="73:21">bufp_free</name><argument_list pos:start="73:22" pos:end="73:36">(<argument pos:start="73:23" pos:end="73:25"><expr pos:start="73:23" pos:end="73:25"><name pos:start="73:23" pos:end="73:25">dev</name></expr></argument>, <argument pos:start="73:28" pos:end="73:31"><expr pos:start="73:28" pos:end="73:31"><name pos:start="73:28" pos:end="73:31">isop</name></expr></argument>, <argument pos:start="73:34" pos:end="73:35"><expr pos:start="73:34" pos:end="73:35"><name pos:start="73:34" pos:end="73:35">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="75:13" pos:end="75:58">return <expr pos:start="75:20" pos:end="75:57"><call pos:start="75:20" pos:end="75:57"><name pos:start="75:20" pos:end="75:41">usbredir_handle_status</name><argument_list pos:start="75:42" pos:end="75:57">(<argument pos:start="75:43" pos:end="75:45"><expr pos:start="75:43" pos:end="75:45"><name pos:start="75:43" pos:end="75:45">dev</name></expr></argument>, <argument pos:start="75:48" pos:end="75:53"><expr pos:start="75:48" pos:end="75:53"><name pos:start="75:48" pos:end="75:53">status</name></expr></argument>, <argument pos:start="75:56" pos:end="75:56"><expr pos:start="75:56" pos:end="75:56"><literal type="number" pos:start="75:56" pos:end="75:56">0</literal></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:24"><expr pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:11">len</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <name pos:start="81:15" pos:end="81:23"><name pos:start="81:15" pos:end="81:18">isop</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:23">len</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="91:9"><if pos:start="83:9" pos:end="91:9">if <condition pos:start="83:12" pos:end="83:25">(<expr pos:start="83:13" pos:end="83:24"><name pos:start="83:13" pos:end="83:15">len</name> <operator pos:start="83:17" pos:end="83:17">&gt;</operator> <name pos:start="83:19" pos:end="83:24"><name pos:start="83:19" pos:end="83:19">p</name><operator pos:start="83:20" pos:end="83:21">-&gt;</operator><name pos:start="83:22" pos:end="83:24">len</name></name></expr>)</condition> <block pos:start="83:27" pos:end="91:9">{<block_content pos:start="85:13" pos:end="89:31">

            <expr_stmt pos:start="85:13" pos:end="85:75"><expr pos:start="85:13" pos:end="85:74"><call pos:start="85:13" pos:end="85:74"><name pos:start="85:13" pos:end="85:17">ERROR</name><argument_list pos:start="85:18" pos:end="85:74">(<argument pos:start="85:19" pos:end="85:69"><expr pos:start="85:19" pos:end="85:69"><literal type="string" pos:start="85:19" pos:end="85:69">"received iso data is larger then packet ep %02X\n"</literal></expr></argument>, <argument pos:start="85:72" pos:end="85:73"><expr pos:start="85:72" pos:end="85:73"><name pos:start="85:72" pos:end="85:73">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:37"><expr pos:start="87:13" pos:end="87:36"><call pos:start="87:13" pos:end="87:36"><name pos:start="87:13" pos:end="87:21">bufp_free</name><argument_list pos:start="87:22" pos:end="87:36">(<argument pos:start="87:23" pos:end="87:25"><expr pos:start="87:23" pos:end="87:25"><name pos:start="87:23" pos:end="87:25">dev</name></expr></argument>, <argument pos:start="87:28" pos:end="87:31"><expr pos:start="87:28" pos:end="87:31"><name pos:start="87:28" pos:end="87:31">isop</name></expr></argument>, <argument pos:start="87:34" pos:end="87:35"><expr pos:start="87:34" pos:end="87:35"><name pos:start="87:34" pos:end="87:35">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="89:13" pos:end="89:31">return <expr pos:start="89:20" pos:end="89:30"><name pos:start="89:20" pos:end="89:30">USB_RET_NAK</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:41"><expr pos:start="93:9" pos:end="93:40"><call pos:start="93:9" pos:end="93:40"><name pos:start="93:9" pos:end="93:14">memcpy</name><argument_list pos:start="93:15" pos:end="93:40">(<argument pos:start="93:16" pos:end="93:22"><expr pos:start="93:16" pos:end="93:22"><name pos:start="93:16" pos:end="93:22"><name pos:start="93:16" pos:end="93:16">p</name><operator pos:start="93:17" pos:end="93:18">-&gt;</operator><name pos:start="93:19" pos:end="93:22">data</name></name></expr></argument>, <argument pos:start="93:25" pos:end="93:34"><expr pos:start="93:25" pos:end="93:34"><name pos:start="93:25" pos:end="93:34"><name pos:start="93:25" pos:end="93:28">isop</name><operator pos:start="93:29" pos:end="93:30">-&gt;</operator><name pos:start="93:31" pos:end="93:34">data</name></name></expr></argument>, <argument pos:start="93:37" pos:end="93:39"><expr pos:start="93:37" pos:end="93:39"><name pos:start="93:37" pos:end="93:39">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:33"><expr pos:start="95:9" pos:end="95:32"><call pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:17">bufp_free</name><argument_list pos:start="95:18" pos:end="95:32">(<argument pos:start="95:19" pos:end="95:21"><expr pos:start="95:19" pos:end="95:21"><name pos:start="95:19" pos:end="95:21">dev</name></expr></argument>, <argument pos:start="95:24" pos:end="95:27"><expr pos:start="95:24" pos:end="95:27"><name pos:start="95:24" pos:end="95:27">isop</name></expr></argument>, <argument pos:start="95:30" pos:end="95:31"><expr pos:start="95:30" pos:end="95:31"><name pos:start="95:30" pos:end="95:31">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:19">return <expr pos:start="97:16" pos:end="97:18"><name pos:start="97:16" pos:end="97:18">len</name></expr>;</return>

    </block_content>}</block></if> <else pos:start="99:7" pos:end="135:5">else <block pos:start="99:12" pos:end="135:5">{<block_content pos:start="105:9" pos:end="133:59">

        <comment type="block" pos:start="101:9" pos:end="103:45">/* If the stream was not started because of a pending error don't

           send the packet to the usb-host */</comment>

        <if_stmt pos:start="105:9" pos:end="123:9"><if pos:start="105:9" pos:end="123:9">if <condition pos:start="105:12" pos:end="105:48">(<expr pos:start="105:13" pos:end="105:47"><name pos:start="105:13" pos:end="105:35"><name pos:start="105:13" pos:end="105:15">dev</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:25">endpoint</name><index pos:start="105:26" pos:end="105:35">[<expr pos:start="105:27" pos:end="105:34"><call pos:start="105:27" pos:end="105:34"><name pos:start="105:27" pos:end="105:30">EP2I</name><argument_list pos:start="105:31" pos:end="105:34">(<argument pos:start="105:32" pos:end="105:33"><expr pos:start="105:32" pos:end="105:33"><name pos:start="105:32" pos:end="105:33">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="105:36" pos:end="105:36">.</operator><name pos:start="105:37" pos:end="105:47">iso_started</name></expr>)</condition> <block pos:start="105:50" pos:end="123:9">{<block_content pos:start="107:13" pos:end="121:49">

            <decl_stmt pos:start="107:13" pos:end="113:14"><decl pos:start="107:13" pos:end="113:13"><type pos:start="107:13" pos:end="107:46"><name pos:start="107:13" pos:end="107:46"><name pos:start="107:13" pos:end="107:18">struct</name> <name pos:start="107:20" pos:end="107:46">usb_redir_iso_packet_header</name></name></type> <name pos:start="107:48" pos:end="107:57">iso_packet</name> <init pos:start="107:59" pos:end="113:13">= <expr pos:start="107:61" pos:end="113:13"><block pos:start="107:61" pos:end="113:13">{

                <expr pos:start="109:17" pos:end="109:30"><operator pos:start="109:17" pos:end="109:17">.</operator><name pos:start="109:18" pos:end="109:25">endpoint</name> <operator pos:start="109:27" pos:end="109:27">=</operator> <name pos:start="109:29" pos:end="109:30">ep</name></expr>,

                <expr pos:start="111:17" pos:end="111:32"><operator pos:start="111:17" pos:end="111:17">.</operator><name pos:start="111:18" pos:end="111:23">length</name> <operator pos:start="111:25" pos:end="111:25">=</operator> <name pos:start="111:27" pos:end="111:32"><name pos:start="111:27" pos:end="111:27">p</name><operator pos:start="111:28" pos:end="111:29">-&gt;</operator><name pos:start="111:30" pos:end="111:32">len</name></name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="115:13" pos:end="115:71">/* No id, we look at the ep when receiving a status back */</comment>

            <expr_stmt pos:start="117:13" pos:end="119:60"><expr pos:start="117:13" pos:end="119:59"><call pos:start="117:13" pos:end="119:59"><name pos:start="117:13" pos:end="117:42">usbredirparser_send_iso_packet</name><argument_list pos:start="117:43" pos:end="119:59">(<argument pos:start="117:44" pos:end="117:54"><expr pos:start="117:44" pos:end="117:54"><name pos:start="117:44" pos:end="117:54"><name pos:start="117:44" pos:end="117:46">dev</name><operator pos:start="117:47" pos:end="117:48">-&gt;</operator><name pos:start="117:49" pos:end="117:54">parser</name></name></expr></argument>, <argument pos:start="117:57" pos:end="117:57"><expr pos:start="117:57" pos:end="117:57"><literal type="number" pos:start="117:57" pos:end="117:57">0</literal></expr></argument>, <argument pos:start="117:60" pos:end="117:70"><expr pos:start="117:60" pos:end="117:70"><operator pos:start="117:60" pos:end="117:60">&amp;</operator><name pos:start="117:61" pos:end="117:70">iso_packet</name></expr></argument>,

                                           <argument pos:start="119:44" pos:end="119:50"><expr pos:start="119:44" pos:end="119:50"><name pos:start="119:44" pos:end="119:50"><name pos:start="119:44" pos:end="119:44">p</name><operator pos:start="119:45" pos:end="119:46">-&gt;</operator><name pos:start="119:47" pos:end="119:50">data</name></name></expr></argument>, <argument pos:start="119:53" pos:end="119:58"><expr pos:start="119:53" pos:end="119:58"><name pos:start="119:53" pos:end="119:58"><name pos:start="119:53" pos:end="119:53">p</name><operator pos:start="119:54" pos:end="119:55">-&gt;</operator><name pos:start="119:56" pos:end="119:58">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:49"><expr pos:start="121:13" pos:end="121:48"><call pos:start="121:13" pos:end="121:48"><name pos:start="121:13" pos:end="121:35">usbredirparser_do_write</name><argument_list pos:start="121:36" pos:end="121:48">(<argument pos:start="121:37" pos:end="121:47"><expr pos:start="121:37" pos:end="121:47"><name pos:start="121:37" pos:end="121:47"><name pos:start="121:37" pos:end="121:39">dev</name><operator pos:start="121:40" pos:end="121:41">-&gt;</operator><name pos:start="121:42" pos:end="121:47">parser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:51"><expr pos:start="125:9" pos:end="125:50"><name pos:start="125:9" pos:end="125:14">status</name> <operator pos:start="125:16" pos:end="125:16">=</operator> <name pos:start="125:18" pos:end="125:40"><name pos:start="125:18" pos:end="125:20">dev</name><operator pos:start="125:21" pos:end="125:22">-&gt;</operator><name pos:start="125:23" pos:end="125:30">endpoint</name><index pos:start="125:31" pos:end="125:40">[<expr pos:start="125:32" pos:end="125:39"><call pos:start="125:32" pos:end="125:39"><name pos:start="125:32" pos:end="125:35">EP2I</name><argument_list pos:start="125:36" pos:end="125:39">(<argument pos:start="125:37" pos:end="125:38"><expr pos:start="125:37" pos:end="125:38"><name pos:start="125:37" pos:end="125:38">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="125:41" pos:end="125:41">.</operator><name pos:start="125:42" pos:end="125:50">iso_error</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:46"><expr pos:start="127:9" pos:end="127:45"><name pos:start="127:9" pos:end="127:31"><name pos:start="127:9" pos:end="127:11">dev</name><operator pos:start="127:12" pos:end="127:13">-&gt;</operator><name pos:start="127:14" pos:end="127:21">endpoint</name><index pos:start="127:22" pos:end="127:31">[<expr pos:start="127:23" pos:end="127:30"><call pos:start="127:23" pos:end="127:30"><name pos:start="127:23" pos:end="127:26">EP2I</name><argument_list pos:start="127:27" pos:end="127:30">(<argument pos:start="127:28" pos:end="127:29"><expr pos:start="127:28" pos:end="127:29"><name pos:start="127:28" pos:end="127:29">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="127:32" pos:end="127:32">.</operator><name pos:start="127:33" pos:end="127:41">iso_error</name> <operator pos:start="127:43" pos:end="127:43">=</operator> <literal type="number" pos:start="127:45" pos:end="127:45">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="131:25"><expr pos:start="129:9" pos:end="131:24"><call pos:start="129:9" pos:end="131:24"><name pos:start="129:9" pos:end="129:16">DPRINTF2</name><argument_list pos:start="129:17" pos:end="131:24">(<argument pos:start="129:18" pos:end="129:59"><expr pos:start="129:18" pos:end="129:59"><literal type="string" pos:start="129:18" pos:end="129:59">"iso-token-out ep %02X status %d len %d\n"</literal></expr></argument>, <argument pos:start="129:62" pos:end="129:63"><expr pos:start="129:62" pos:end="129:63"><name pos:start="129:62" pos:end="129:63">ep</name></expr></argument>, <argument pos:start="129:66" pos:end="129:71"><expr pos:start="129:66" pos:end="129:71"><name pos:start="129:66" pos:end="129:71">status</name></expr></argument>,

                 <argument pos:start="131:18" pos:end="131:23"><expr pos:start="131:18" pos:end="131:23"><name pos:start="131:18" pos:end="131:23"><name pos:start="131:18" pos:end="131:18">p</name><operator pos:start="131:19" pos:end="131:20">-&gt;</operator><name pos:start="131:21" pos:end="131:23">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="133:9" pos:end="133:59">return <expr pos:start="133:16" pos:end="133:58"><call pos:start="133:16" pos:end="133:58"><name pos:start="133:16" pos:end="133:37">usbredir_handle_status</name><argument_list pos:start="133:38" pos:end="133:58">(<argument pos:start="133:39" pos:end="133:41"><expr pos:start="133:39" pos:end="133:41"><name pos:start="133:39" pos:end="133:41">dev</name></expr></argument>, <argument pos:start="133:44" pos:end="133:49"><expr pos:start="133:44" pos:end="133:49"><name pos:start="133:44" pos:end="133:49">status</name></expr></argument>, <argument pos:start="133:52" pos:end="133:57"><expr pos:start="133:52" pos:end="133:57"><name pos:start="133:52" pos:end="133:57"><name pos:start="133:52" pos:end="133:52">p</name><operator pos:start="133:53" pos:end="133:54">-&gt;</operator><name pos:start="133:55" pos:end="133:57">len</name></name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
