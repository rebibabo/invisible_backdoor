<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19416.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">bmdma_prepare_buf</name><parameter_list pos:start="1:29" pos:end="1:55">(<parameter pos:start="1:30" pos:end="1:40"><decl pos:start="1:30" pos:end="1:40"><type pos:start="1:30" pos:end="1:40"><name pos:start="1:30" pos:end="1:35">IDEDMA</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">dma</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:54"><name pos:start="1:43" pos:end="1:45">int</name></type> <name pos:start="1:47" pos:end="1:54">is_write</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:13">

    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:52"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">BMDMAState</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:18">bm</name> <init pos:start="5:20" pos:end="5:52">= <expr pos:start="5:22" pos:end="5:52"><call pos:start="5:22" pos:end="5:52"><name pos:start="5:22" pos:end="5:30">DO_UPCAST</name><argument_list pos:start="5:31" pos:end="5:52">(<argument pos:start="5:32" pos:end="5:41"><expr pos:start="5:32" pos:end="5:41"><name pos:start="5:32" pos:end="5:41">BMDMAState</name></expr></argument>, <argument pos:start="5:44" pos:end="5:46"><expr pos:start="5:44" pos:end="5:46"><name pos:start="5:44" pos:end="5:46">dma</name></expr></argument>, <argument pos:start="5:49" pos:end="5:51"><expr pos:start="5:49" pos:end="5:51"><name pos:start="5:49" pos:end="5:51">dma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">IDEState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:37">= <expr pos:start="7:19" pos:end="7:37"><call pos:start="7:19" pos:end="7:37"><name pos:start="7:19" pos:end="7:33">bmdma_active_if</name><argument_list pos:start="7:34" pos:end="7:37">(<argument pos:start="7:35" pos:end="7:36"><expr pos:start="7:35" pos:end="7:36"><name pos:start="7:35" pos:end="7:36">bm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">PCIDevice</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:22">pci_dev</name> <init pos:start="9:24" pos:end="9:48">= <expr pos:start="9:26" pos:end="9:48"><call pos:start="9:26" pos:end="9:48"><name pos:start="9:26" pos:end="9:35">PCI_DEVICE</name><argument_list pos:start="9:36" pos:end="9:48">(<argument pos:start="9:37" pos:end="9:47"><expr pos:start="9:37" pos:end="9:47"><name pos:start="9:37" pos:end="9:47"><name pos:start="9:37" pos:end="9:38">bm</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:47">pci_dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <struct pos:start="11:5" pos:end="17:10">struct <block pos:start="11:12" pos:end="17:5">{

        <decl_stmt pos:start="13:9" pos:end="13:22"><decl pos:start="13:9" pos:end="13:21"><type pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">uint32_t</name></type> <name pos:start="13:18" pos:end="13:21">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:22"><decl pos:start="15:9" pos:end="15:21"><type pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:16">uint32_t</name></type> <name pos:start="15:18" pos:end="15:21">size</name></decl>;</decl_stmt>

    }</block> <decl pos:start="17:7" pos:end="17:9"><name pos:start="17:7" pos:end="17:9">prd</name></decl>;</struct>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">l</name></decl>, <decl pos:start="19:12" pos:end="19:14"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:14">len</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="25:66"><expr pos:start="23:5" pos:end="25:65"><call pos:start="23:5" pos:end="25:65"><name pos:start="23:5" pos:end="23:23">pci_dma_sglist_init</name><argument_list pos:start="23:24" pos:end="25:65">(<argument pos:start="23:25" pos:end="23:30"><expr pos:start="23:25" pos:end="23:30"><operator pos:start="23:25" pos:end="23:25">&amp;</operator><name pos:start="23:26" pos:end="23:30"><name pos:start="23:26" pos:end="23:26">s</name><operator pos:start="23:27" pos:end="23:28">-&gt;</operator><name pos:start="23:29" pos:end="23:30">sg</name></name></expr></argument>, <argument pos:start="23:33" pos:end="23:39"><expr pos:start="23:33" pos:end="23:39"><name pos:start="23:33" pos:end="23:39">pci_dev</name></expr></argument>,

                        <argument pos:start="25:25" pos:end="25:64"><expr pos:start="25:25" pos:end="25:64"><name pos:start="25:25" pos:end="25:34"><name pos:start="25:25" pos:end="25:25">s</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:34">nsector</name></name> <operator pos:start="25:36" pos:end="25:36">/</operator> <operator pos:start="25:38" pos:end="25:38">(</operator><name pos:start="25:39" pos:end="25:53">BMDMA_PAGE_SIZE</name> <operator pos:start="25:55" pos:end="25:55">/</operator> <literal type="number" pos:start="25:57" pos:end="25:59">512</literal><operator pos:start="25:60" pos:end="25:60">)</operator> <operator pos:start="25:62" pos:end="25:62">+</operator> <literal type="number" pos:start="25:64" pos:end="25:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:26"><expr pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:21">io_buffer_size</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <literal type="number" pos:start="27:25" pos:end="27:25">0</literal></expr>;</expr_stmt>

    <for pos:start="29:5" pos:end="77:5">for<control pos:start="29:8" pos:end="29:11">(<init pos:start="29:9" pos:end="29:9">;</init><condition pos:start="29:10" pos:end="29:10">;</condition><incr/>)</control> <block pos:start="29:13" pos:end="77:5">{<block_content pos:start="31:9" pos:end="75:9">

        <if_stmt pos:start="31:9" pos:end="61:9"><if pos:start="31:9" pos:end="61:9">if <condition pos:start="31:12" pos:end="31:33">(<expr pos:start="31:13" pos:end="31:32"><name pos:start="31:13" pos:end="31:27"><name pos:start="31:13" pos:end="31:14">bm</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:27">cur_prd_len</name></name> <operator pos:start="31:29" pos:end="31:30">==</operator> <literal type="number" pos:start="31:32" pos:end="31:32">0</literal></expr>)</condition> <block pos:start="31:35" pos:end="61:9">{<block_content pos:start="35:13" pos:end="59:55">

            <comment type="block" pos:start="33:13" pos:end="33:61">/* end of table (with a fail safe of one page) */</comment>

            <if_stmt pos:start="35:13" pos:end="39:46"><if pos:start="35:13" pos:end="39:46">if <condition pos:start="35:16" pos:end="37:61">(<expr pos:start="35:17" pos:end="37:60"><name pos:start="35:17" pos:end="35:32"><name pos:start="35:17" pos:end="35:18">bm</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:32">cur_prd_last</name></name> <operator pos:start="35:34" pos:end="35:35">||</operator>

                <operator pos:start="37:17" pos:end="37:17">(</operator><name pos:start="37:18" pos:end="37:29"><name pos:start="37:18" pos:end="37:19">bm</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:29">cur_addr</name></name> <operator pos:start="37:31" pos:end="37:31">-</operator> <name pos:start="37:33" pos:end="37:40"><name pos:start="37:33" pos:end="37:34">bm</name><operator pos:start="37:35" pos:end="37:36">-&gt;</operator><name pos:start="37:37" pos:end="37:40">addr</name></name><operator pos:start="37:41" pos:end="37:41">)</operator> <operator pos:start="37:43" pos:end="37:44">&gt;=</operator> <name pos:start="37:46" pos:end="37:60">BMDMA_PAGE_SIZE</name></expr>)</condition><block type="pseudo" pos:start="39:17" pos:end="39:46"><block_content pos:start="39:17" pos:end="39:46">

                <return pos:start="39:17" pos:end="39:46">return <expr pos:start="39:24" pos:end="39:45"><name pos:start="39:24" pos:end="39:40"><name pos:start="39:24" pos:end="39:24">s</name><operator pos:start="39:25" pos:end="39:26">-&gt;</operator><name pos:start="39:27" pos:end="39:40">io_buffer_size</name></name> <operator pos:start="39:42" pos:end="39:43">!=</operator> <literal type="number" pos:start="39:45" pos:end="39:45">0</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:57"><expr pos:start="41:13" pos:end="41:56"><call pos:start="41:13" pos:end="41:56"><name pos:start="41:13" pos:end="41:24">pci_dma_read</name><argument_list pos:start="41:25" pos:end="41:56">(<argument pos:start="41:26" pos:end="41:32"><expr pos:start="41:26" pos:end="41:32"><name pos:start="41:26" pos:end="41:32">pci_dev</name></expr></argument>, <argument pos:start="41:35" pos:end="41:46"><expr pos:start="41:35" pos:end="41:46"><name pos:start="41:35" pos:end="41:46"><name pos:start="41:35" pos:end="41:36">bm</name><operator pos:start="41:37" pos:end="41:38">-&gt;</operator><name pos:start="41:39" pos:end="41:46">cur_addr</name></name></expr></argument>, <argument pos:start="41:49" pos:end="41:52"><expr pos:start="41:49" pos:end="41:52"><operator pos:start="41:49" pos:end="41:49">&amp;</operator><name pos:start="41:50" pos:end="41:52">prd</name></expr></argument>, <argument pos:start="41:55" pos:end="41:55"><expr pos:start="41:55" pos:end="41:55"><literal type="number" pos:start="41:55" pos:end="41:55">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:30"><expr pos:start="43:13" pos:end="43:29"><name pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:14">bm</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:24">cur_addr</name></name> <operator pos:start="43:26" pos:end="43:27">+=</operator> <literal type="number" pos:start="43:29" pos:end="43:29">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:45"><expr pos:start="45:13" pos:end="45:44"><name pos:start="45:13" pos:end="45:20"><name pos:start="45:13" pos:end="45:15">prd</name><operator pos:start="45:16" pos:end="45:16">.</operator><name pos:start="45:17" pos:end="45:20">addr</name></name> <operator pos:start="45:22" pos:end="45:22">=</operator> <call pos:start="45:24" pos:end="45:44"><name pos:start="45:24" pos:end="45:34">le32_to_cpu</name><argument_list pos:start="45:35" pos:end="45:44">(<argument pos:start="45:36" pos:end="45:43"><expr pos:start="45:36" pos:end="45:43"><name pos:start="45:36" pos:end="45:43"><name pos:start="45:36" pos:end="45:38">prd</name><operator pos:start="45:39" pos:end="45:39">.</operator><name pos:start="45:40" pos:end="45:43">addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:45"><expr pos:start="47:13" pos:end="47:44"><name pos:start="47:13" pos:end="47:20"><name pos:start="47:13" pos:end="47:15">prd</name><operator pos:start="47:16" pos:end="47:16">.</operator><name pos:start="47:17" pos:end="47:20">size</name></name> <operator pos:start="47:22" pos:end="47:22">=</operator> <call pos:start="47:24" pos:end="47:44"><name pos:start="47:24" pos:end="47:34">le32_to_cpu</name><argument_list pos:start="47:35" pos:end="47:44">(<argument pos:start="47:36" pos:end="47:43"><expr pos:start="47:36" pos:end="47:43"><name pos:start="47:36" pos:end="47:43"><name pos:start="47:36" pos:end="47:38">prd</name><operator pos:start="47:39" pos:end="47:39">.</operator><name pos:start="47:40" pos:end="47:43">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:36"><expr pos:start="49:13" pos:end="49:35"><name pos:start="49:13" pos:end="49:15">len</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:26"><name pos:start="49:19" pos:end="49:21">prd</name><operator pos:start="49:22" pos:end="49:22">.</operator><name pos:start="49:23" pos:end="49:26">size</name></name> <operator pos:start="49:28" pos:end="49:28">&amp;</operator> <literal type="number" pos:start="49:30" pos:end="49:35">0xfffe</literal></expr>;</expr_stmt>

            <if_stmt pos:start="51:13" pos:end="53:30"><if pos:start="51:13" pos:end="53:30">if <condition pos:start="51:16" pos:end="51:25">(<expr pos:start="51:17" pos:end="51:24"><name pos:start="51:17" pos:end="51:19">len</name> <operator pos:start="51:21" pos:end="51:22">==</operator> <literal type="number" pos:start="51:24" pos:end="51:24">0</literal></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:30"><block_content pos:start="53:17" pos:end="53:30">

                <expr_stmt pos:start="53:17" pos:end="53:30"><expr pos:start="53:17" pos:end="53:29"><name pos:start="53:17" pos:end="53:19">len</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <literal type="number" pos:start="53:23" pos:end="53:29">0x10000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:34"><expr pos:start="55:13" pos:end="55:33"><name pos:start="55:13" pos:end="55:27"><name pos:start="55:13" pos:end="55:14">bm</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:27">cur_prd_len</name></name> <operator pos:start="55:29" pos:end="55:29">=</operator> <name pos:start="55:31" pos:end="55:33">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:40"><expr pos:start="57:13" pos:end="57:39"><name pos:start="57:13" pos:end="57:28"><name pos:start="57:13" pos:end="57:14">bm</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:28">cur_prd_addr</name></name> <operator pos:start="57:30" pos:end="57:30">=</operator> <name pos:start="57:32" pos:end="57:39"><name pos:start="57:32" pos:end="57:34">prd</name><operator pos:start="57:35" pos:end="57:35">.</operator><name pos:start="57:36" pos:end="57:39">addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:55"><expr pos:start="59:13" pos:end="59:54"><name pos:start="59:13" pos:end="59:28"><name pos:start="59:13" pos:end="59:14">bm</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:28">cur_prd_last</name></name> <operator pos:start="59:30" pos:end="59:30">=</operator> <operator pos:start="59:32" pos:end="59:32">(</operator><name pos:start="59:33" pos:end="59:40"><name pos:start="59:33" pos:end="59:35">prd</name><operator pos:start="59:36" pos:end="59:36">.</operator><name pos:start="59:37" pos:end="59:40">size</name></name> <operator pos:start="59:42" pos:end="59:42">&amp;</operator> <literal type="number" pos:start="59:44" pos:end="59:53">0x80000000</literal><operator pos:start="59:54" pos:end="59:54">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:28"><expr pos:start="63:9" pos:end="63:27"><name pos:start="63:9" pos:end="63:9">l</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <name pos:start="63:13" pos:end="63:27"><name pos:start="63:13" pos:end="63:14">bm</name><operator pos:start="63:15" pos:end="63:16">-&gt;</operator><name pos:start="63:17" pos:end="63:27">cur_prd_len</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="75:9"><if pos:start="65:9" pos:end="75:9">if <condition pos:start="65:12" pos:end="65:18">(<expr pos:start="65:13" pos:end="65:17"><name pos:start="65:13" pos:end="65:13">l</name> <operator pos:start="65:15" pos:end="65:15">&gt;</operator> <literal type="number" pos:start="65:17" pos:end="65:17">0</literal></expr>)</condition> <block pos:start="65:20" pos:end="75:9">{<block_content pos:start="67:13" pos:end="73:35">

            <expr_stmt pos:start="67:13" pos:end="67:57"><expr pos:start="67:13" pos:end="67:56"><call pos:start="67:13" pos:end="67:56"><name pos:start="67:13" pos:end="67:27">qemu_sglist_add</name><argument_list pos:start="67:28" pos:end="67:56">(<argument pos:start="67:29" pos:end="67:34"><expr pos:start="67:29" pos:end="67:34"><operator pos:start="67:29" pos:end="67:29">&amp;</operator><name pos:start="67:30" pos:end="67:34"><name pos:start="67:30" pos:end="67:30">s</name><operator pos:start="67:31" pos:end="67:32">-&gt;</operator><name pos:start="67:33" pos:end="67:34">sg</name></name></expr></argument>, <argument pos:start="67:37" pos:end="67:52"><expr pos:start="67:37" pos:end="67:52"><name pos:start="67:37" pos:end="67:52"><name pos:start="67:37" pos:end="67:38">bm</name><operator pos:start="67:39" pos:end="67:40">-&gt;</operator><name pos:start="67:41" pos:end="67:52">cur_prd_addr</name></name></expr></argument>, <argument pos:start="67:55" pos:end="67:55"><expr pos:start="67:55" pos:end="67:55"><name pos:start="67:55" pos:end="67:55">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:34"><expr pos:start="69:13" pos:end="69:33"><name pos:start="69:13" pos:end="69:28"><name pos:start="69:13" pos:end="69:14">bm</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:28">cur_prd_addr</name></name> <operator pos:start="69:30" pos:end="69:31">+=</operator> <name pos:start="69:33" pos:end="69:33">l</name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:33"><expr pos:start="71:13" pos:end="71:32"><name pos:start="71:13" pos:end="71:27"><name pos:start="71:13" pos:end="71:14">bm</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:27">cur_prd_len</name></name> <operator pos:start="71:29" pos:end="71:30">-=</operator> <name pos:start="71:32" pos:end="71:32">l</name></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:35"><expr pos:start="73:13" pos:end="73:34"><name pos:start="73:13" pos:end="73:29"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:29">io_buffer_size</name></name> <operator pos:start="73:31" pos:end="73:32">+=</operator> <name pos:start="73:34" pos:end="73:34">l</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="79:5" pos:end="79:13">return <expr pos:start="79:12" pos:end="79:12"><literal type="number" pos:start="79:12" pos:end="79:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
