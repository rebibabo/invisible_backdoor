<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24139.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">void</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:20">av_tree_insert</name><parameter_list pos:start="1:21" pos:end="1:105">(<parameter pos:start="1:22" pos:end="1:36"><decl pos:start="1:22" pos:end="1:36"><type pos:start="1:22" pos:end="1:36"><name pos:start="1:22" pos:end="1:31">AVTreeNode</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier><modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:36">tp</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:47"><decl pos:start="1:39" pos:end="1:47"><type pos:start="1:39" pos:end="1:47"><name pos:start="1:39" pos:end="1:42">void</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">key</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:85"><function_decl pos:start="1:50" pos:end="1:85"><type pos:start="1:50" pos:end="1:52"><name pos:start="1:50" pos:end="1:52">int</name></type> (<modifier pos:start="1:55" pos:end="1:55">*</modifier><name pos:start="1:56" pos:end="1:58">cmp</name>)<parameter_list pos:start="1:60" pos:end="1:85">(<parameter pos:start="1:61" pos:end="1:69"><decl pos:start="1:61" pos:end="1:69"><type pos:start="1:61" pos:end="1:69"><name pos:start="1:61" pos:end="1:64">void</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">key</name></decl></parameter>, <parameter pos:start="1:72" pos:end="1:84"><decl pos:start="1:72" pos:end="1:84"><type pos:start="1:72" pos:end="1:84"><specifier pos:start="1:72" pos:end="1:76">const</specifier> <name pos:start="1:78" pos:end="1:81">void</name> <modifier pos:start="1:83" pos:end="1:83">*</modifier></type><name pos:start="1:84" pos:end="1:84">b</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter pos:start="1:88" pos:end="1:104"><decl pos:start="1:88" pos:end="1:104"><type pos:start="1:88" pos:end="1:104"><name pos:start="1:88" pos:end="1:97">AVTreeNode</name> <modifier pos:start="1:99" pos:end="1:99">*</modifier><modifier pos:start="1:100" pos:end="1:100">*</modifier></type><name pos:start="1:101" pos:end="1:104">next</name></decl></parameter>)</parameter_list><block pos:start="1:106" pos:end="151:1">{<block_content pos:start="3:5" pos:end="149:5">

    <decl_stmt pos:start="3:5" pos:end="3:23"><decl pos:start="3:5" pos:end="3:22"><type pos:start="3:5" pos:end="3:16"><name pos:start="3:5" pos:end="3:14">AVTreeNode</name> <modifier pos:start="3:16" pos:end="3:16">*</modifier></type><name pos:start="3:17" pos:end="3:17">t</name><init pos:start="3:18" pos:end="3:22">= <expr pos:start="3:20" pos:end="3:22"><operator pos:start="3:20" pos:end="3:20">*</operator><name pos:start="3:21" pos:end="3:22">tp</name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="5:5" pos:end="149:5"><if pos:start="5:5" pos:end="141:5">if<condition pos:start="5:7" pos:end="5:9">(<expr pos:start="5:8" pos:end="5:8"><name pos:start="5:8" pos:end="5:8">t</name></expr>)</condition><block pos:start="5:10" pos:end="141:5">{<block_content pos:start="7:9" pos:end="139:19">

        <decl_stmt pos:start="7:9" pos:end="7:42"><decl pos:start="7:9" pos:end="7:41"><type pos:start="7:9" pos:end="7:20"><name pos:start="7:9" pos:end="7:16">unsigned</name> <name pos:start="7:18" pos:end="7:20">int</name></type> <name pos:start="7:22" pos:end="7:22">v</name><init pos:start="7:23" pos:end="7:41">= <expr pos:start="7:25" pos:end="7:41"><call pos:start="7:25" pos:end="7:41"><name pos:start="7:25" pos:end="7:27">cmp</name><argument_list pos:start="7:28" pos:end="7:41">(<argument pos:start="7:29" pos:end="7:35"><expr pos:start="7:29" pos:end="7:35"><name pos:start="7:29" pos:end="7:35"><name pos:start="7:29" pos:end="7:29">t</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:35">elem</name></name></expr></argument>, <argument pos:start="7:38" pos:end="7:40"><expr pos:start="7:38" pos:end="7:40"><name pos:start="7:38" pos:end="7:40">key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="9:9" pos:end="9:18"><decl pos:start="9:9" pos:end="9:17"><type pos:start="9:9" pos:end="9:14"><name pos:start="9:9" pos:end="9:12">void</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:17">ret</name></decl>;</decl_stmt>

        <if_stmt pos:start="11:9" pos:end="39:9"><if pos:start="11:9" pos:end="39:9">if<condition pos:start="11:11" pos:end="11:14">(<expr pos:start="11:12" pos:end="11:13"><operator pos:start="11:12" pos:end="11:12">!</operator><name pos:start="11:13" pos:end="11:13">v</name></expr>)</condition><block pos:start="11:15" pos:end="39:9">{<block_content pos:start="13:13" pos:end="37:13">

            <if_stmt pos:start="13:13" pos:end="37:13"><if pos:start="13:13" pos:end="15:31">if<condition pos:start="13:15" pos:end="13:21">(<expr pos:start="13:16" pos:end="13:20"><operator pos:start="13:16" pos:end="13:16">*</operator><name pos:start="13:17" pos:end="13:20">next</name></expr>)</condition><block type="pseudo" pos:start="15:17" pos:end="15:31"><block_content pos:start="15:17" pos:end="15:31">

                <return pos:start="15:17" pos:end="15:31">return <expr pos:start="15:24" pos:end="15:30"><name pos:start="15:24" pos:end="15:30"><name pos:start="15:24" pos:end="15:24">t</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:30">elem</name></name></expr>;</return></block_content></block></if>

            <if type="elseif" pos:start="17:13" pos:end="29:13">else if<condition pos:start="17:20" pos:end="17:45">(<expr pos:start="17:21" pos:end="17:44"><name pos:start="17:21" pos:end="17:31"><name pos:start="17:21" pos:end="17:21">t</name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:28">child</name><index pos:start="17:29" pos:end="17:31">[<expr pos:start="17:30" pos:end="17:30"><literal type="number" pos:start="17:30" pos:end="17:30">0</literal></expr>]</index></name><operator pos:start="17:32" pos:end="17:33">||</operator><name pos:start="17:34" pos:end="17:44"><name pos:start="17:34" pos:end="17:34">t</name><operator pos:start="17:35" pos:end="17:36">-&gt;</operator><name pos:start="17:37" pos:end="17:41">child</name><index pos:start="17:42" pos:end="17:44">[<expr pos:start="17:43" pos:end="17:43"><literal type="number" pos:start="17:43" pos:end="17:43">1</literal></expr>]</index></name></expr>)</condition><block pos:start="17:46" pos:end="29:13">{<block_content pos:start="19:17" pos:end="27:22">

                <decl_stmt pos:start="19:17" pos:end="19:36"><decl pos:start="19:17" pos:end="19:35"><type pos:start="19:17" pos:end="19:19"><name pos:start="19:17" pos:end="19:19">int</name></type> <name pos:start="19:21" pos:end="19:21">i</name><init pos:start="19:22" pos:end="19:35">= <expr pos:start="19:24" pos:end="19:35"><operator pos:start="19:24" pos:end="19:24">!</operator><name pos:start="19:25" pos:end="19:35"><name pos:start="19:25" pos:end="19:25">t</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:32">child</name><index pos:start="19:33" pos:end="19:35">[<expr pos:start="19:34" pos:end="19:34"><literal type="number" pos:start="19:34" pos:end="19:34">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="21:17" pos:end="21:35"><decl pos:start="21:17" pos:end="21:34"><type pos:start="21:17" pos:end="21:22"><name pos:start="21:17" pos:end="21:20">void</name> <modifier pos:start="21:22" pos:end="21:22">*</modifier></type><name pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:31">next_elem</name><index pos:start="21:32" pos:end="21:34">[<expr pos:start="21:33" pos:end="21:33"><literal type="number" pos:start="21:33" pos:end="21:33">2</literal></expr>]</index></name></decl>;</decl_stmt>

                <expr_stmt pos:start="23:17" pos:end="23:63"><expr pos:start="23:17" pos:end="23:62"><call pos:start="23:17" pos:end="23:62"><name pos:start="23:17" pos:end="23:28">av_tree_find</name><argument_list pos:start="23:29" pos:end="23:62">(<argument pos:start="23:30" pos:end="23:40"><expr pos:start="23:30" pos:end="23:40"><name pos:start="23:30" pos:end="23:40"><name pos:start="23:30" pos:end="23:30">t</name><operator pos:start="23:31" pos:end="23:32">-&gt;</operator><name pos:start="23:33" pos:end="23:37">child</name><index pos:start="23:38" pos:end="23:40">[<expr pos:start="23:39" pos:end="23:39"><name pos:start="23:39" pos:end="23:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="23:43" pos:end="23:45"><expr pos:start="23:43" pos:end="23:45"><name pos:start="23:43" pos:end="23:45">key</name></expr></argument>, <argument pos:start="23:48" pos:end="23:50"><expr pos:start="23:48" pos:end="23:50"><name pos:start="23:48" pos:end="23:50">cmp</name></expr></argument>, <argument pos:start="23:53" pos:end="23:61"><expr pos:start="23:53" pos:end="23:61"><name pos:start="23:53" pos:end="23:61">next_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="25:17" pos:end="25:43"><expr pos:start="25:17" pos:end="25:42"><name pos:start="25:17" pos:end="25:19">key</name><operator pos:start="25:20" pos:end="25:20">=</operator> <name pos:start="25:22" pos:end="25:28"><name pos:start="25:22" pos:end="25:22">t</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:28">elem</name></name><operator pos:start="25:29" pos:end="25:29">=</operator> <name pos:start="25:31" pos:end="25:42"><name pos:start="25:31" pos:end="25:39">next_elem</name><index pos:start="25:40" pos:end="25:42">[<expr pos:start="25:41" pos:end="25:41"><name pos:start="25:41" pos:end="25:41">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="27:17" pos:end="27:22"><expr pos:start="27:17" pos:end="27:21"><name pos:start="27:17" pos:end="27:17">v</name><operator pos:start="27:18" pos:end="27:18">=</operator> <operator pos:start="27:20" pos:end="27:20">-</operator><name pos:start="27:21" pos:end="27:21">i</name></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="29:14" pos:end="37:13">else<block pos:start="29:18" pos:end="37:13">{<block_content pos:start="31:17" pos:end="35:28">

                <expr_stmt pos:start="31:17" pos:end="31:25"><expr pos:start="31:17" pos:end="31:24"><operator pos:start="31:17" pos:end="31:17">*</operator><name pos:start="31:18" pos:end="31:21">next</name><operator pos:start="31:22" pos:end="31:22">=</operator> <name pos:start="31:24" pos:end="31:24">t</name></expr>;</expr_stmt>

                <expr_stmt pos:start="33:17" pos:end="33:25"><expr pos:start="33:17" pos:end="33:24"><operator pos:start="33:17" pos:end="33:17">*</operator><name pos:start="33:18" pos:end="33:19">tp</name><operator pos:start="33:20" pos:end="33:20">=</operator><name pos:start="33:21" pos:end="33:24">NULL</name></expr>;</expr_stmt>

                <return pos:start="35:17" pos:end="35:28">return <expr pos:start="35:24" pos:end="35:27"><name pos:start="35:24" pos:end="35:27">NULL</name></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:62"><expr pos:start="41:9" pos:end="41:61"><name pos:start="41:9" pos:end="41:11">ret</name><operator pos:start="41:12" pos:end="41:12">=</operator> <call pos:start="41:14" pos:end="41:61"><name pos:start="41:14" pos:end="41:27">av_tree_insert</name><argument_list pos:start="41:28" pos:end="41:61">(<argument pos:start="41:29" pos:end="41:44"><expr pos:start="41:29" pos:end="41:44"><operator pos:start="41:29" pos:end="41:29">&amp;</operator><name pos:start="41:30" pos:end="41:44"><name pos:start="41:30" pos:end="41:30">t</name><operator pos:start="41:31" pos:end="41:32">-&gt;</operator><name pos:start="41:33" pos:end="41:37">child</name><index pos:start="41:38" pos:end="41:44">[<expr pos:start="41:39" pos:end="41:43"><name pos:start="41:39" pos:end="41:39">v</name><operator pos:start="41:40" pos:end="41:41">&gt;&gt;</operator><literal type="number" pos:start="41:42" pos:end="41:43">31</literal></expr>]</index></name></expr></argument>, <argument pos:start="41:47" pos:end="41:49"><expr pos:start="41:47" pos:end="41:49"><name pos:start="41:47" pos:end="41:49">key</name></expr></argument>, <argument pos:start="41:52" pos:end="41:54"><expr pos:start="41:52" pos:end="41:54"><name pos:start="41:52" pos:end="41:54">cmp</name></expr></argument>, <argument pos:start="41:57" pos:end="41:60"><expr pos:start="41:57" pos:end="41:60"><name pos:start="41:57" pos:end="41:60">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="137:9"><if pos:start="43:9" pos:end="137:9">if<condition pos:start="43:11" pos:end="43:16">(<expr pos:start="43:12" pos:end="43:15"><operator pos:start="43:12" pos:end="43:12">!</operator><name pos:start="43:13" pos:end="43:15">ret</name></expr>)</condition><block pos:start="43:17" pos:end="137:9">{<block_content pos:start="45:13" pos:end="135:27">

            <decl_stmt pos:start="45:13" pos:end="45:37"><decl pos:start="45:13" pos:end="45:36"><type pos:start="45:13" pos:end="45:15"><name pos:start="45:13" pos:end="45:15">int</name></type> <name pos:start="45:17" pos:end="45:17">i</name><init pos:start="45:18" pos:end="45:36">= <expr pos:start="45:20" pos:end="45:36"><operator pos:start="45:20" pos:end="45:20">(</operator><name pos:start="45:21" pos:end="45:21">v</name><operator pos:start="45:22" pos:end="45:23">&gt;&gt;</operator><literal type="number" pos:start="45:24" pos:end="45:25">31</literal><operator pos:start="45:26" pos:end="45:26">)</operator> <operator pos:start="45:28" pos:end="45:28">^</operator> <operator pos:start="45:30" pos:end="45:30">!</operator><operator pos:start="45:31" pos:end="45:31">!</operator><operator pos:start="45:32" pos:end="45:32">*</operator><name pos:start="45:33" pos:end="45:36">next</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="47:13" pos:end="47:45"><decl pos:start="47:13" pos:end="47:44"><type pos:start="47:13" pos:end="47:25"><name pos:start="47:13" pos:end="47:22">AVTreeNode</name> <modifier pos:start="47:24" pos:end="47:24">*</modifier><modifier pos:start="47:25" pos:end="47:25">*</modifier></type><name pos:start="47:26" pos:end="47:30">child</name><init pos:start="47:31" pos:end="47:44">= <expr pos:start="47:33" pos:end="47:44"><operator pos:start="47:33" pos:end="47:33">&amp;</operator><name pos:start="47:34" pos:end="47:44"><name pos:start="47:34" pos:end="47:34">t</name><operator pos:start="47:35" pos:end="47:36">-&gt;</operator><name pos:start="47:37" pos:end="47:41">child</name><index pos:start="47:42" pos:end="47:44">[<expr pos:start="47:43" pos:end="47:43"><name pos:start="47:43" pos:end="47:43">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:32"><expr pos:start="49:13" pos:end="49:31"><name pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:13">t</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:20">state</name></name> <operator pos:start="49:22" pos:end="49:23">+=</operator> <literal type="number" pos:start="49:25" pos:end="49:25">2</literal><operator pos:start="49:26" pos:end="49:26">*</operator><name pos:start="49:27" pos:end="49:27">i</name> <operator pos:start="49:29" pos:end="49:29">-</operator> <literal type="number" pos:start="49:31" pos:end="49:31">1</literal></expr>;</expr_stmt>



            <if_stmt pos:start="53:13" pos:end="131:13"><if pos:start="53:13" pos:end="131:13">if<condition pos:start="53:15" pos:end="53:29">(<expr pos:start="53:16" pos:end="53:28"><operator pos:start="53:16" pos:end="53:16">!</operator><operator pos:start="53:17" pos:end="53:17">(</operator><name pos:start="53:18" pos:end="53:25"><name pos:start="53:18" pos:end="53:18">t</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:25">state</name></name><operator pos:start="53:26" pos:end="53:26">&amp;</operator><literal type="number" pos:start="53:27" pos:end="53:27">1</literal><operator pos:start="53:28" pos:end="53:28">)</operator></expr>)</condition><block pos:start="53:30" pos:end="131:13">{<block_content pos:start="55:17" pos:end="129:17">

                <if_stmt pos:start="55:17" pos:end="129:17"><if pos:start="55:17" pos:end="129:17">if<condition pos:start="55:19" pos:end="55:28">(<expr pos:start="55:20" pos:end="55:27"><name pos:start="55:20" pos:end="55:27"><name pos:start="55:20" pos:end="55:20">t</name><operator pos:start="55:21" pos:end="55:22">-&gt;</operator><name pos:start="55:23" pos:end="55:27">state</name></name></expr>)</condition><block pos:start="55:29" pos:end="129:17">{<block_content pos:start="93:21" pos:end="127:21">

                    <comment type="block" pos:start="57:21" pos:end="91:22">/* The following code is equivalent to

                    if((*child)-&gt;state*2 == -t-&gt;state)

                        rotate(child, i^1);

                    rotate(tp, i);



                    with rotate():

                    static void rotate(AVTreeNode **tp, int i){

                        AVTreeNode *t= *tp;



                        *tp= t-&gt;child[i];

                        t-&gt;child[i]= t-&gt;child[i]-&gt;child[i^1];

                        (*tp)-&gt;child[i^1]= t;

                        i= 4*t-&gt;state + 2*(*tp)-&gt;state + 12;

                          t  -&gt;state=                     ((0x614586 &gt;&gt; i) &amp; 3)-1;

                        (*tp)-&gt;state= ((*tp)-&gt;state&gt;&gt;1) + ((0x400EEA &gt;&gt; i) &amp; 3)-1;

                    }

                    but such a rotate function is both bigger and slower

                    */</comment>

                    <if_stmt pos:start="93:21" pos:end="127:21"><if pos:start="93:21" pos:end="113:21">if<condition pos:start="93:23" pos:end="93:54">(<expr pos:start="93:24" pos:end="93:53"><name pos:start="93:24" pos:end="93:38"><operator pos:start="93:24" pos:end="93:24">(</operator><operator pos:start="93:25" pos:end="93:25">*</operator><name pos:start="93:26" pos:end="93:30">child</name><operator pos:start="93:31" pos:end="93:31">)</operator><operator pos:start="93:32" pos:end="93:33">-&gt;</operator><name pos:start="93:34" pos:end="93:38">state</name></name><operator pos:start="93:39" pos:end="93:39">*</operator><literal type="number" pos:start="93:40" pos:end="93:40">2</literal> <operator pos:start="93:42" pos:end="93:43">==</operator> <operator pos:start="93:45" pos:end="93:45">-</operator><name pos:start="93:46" pos:end="93:53"><name pos:start="93:46" pos:end="93:46">t</name><operator pos:start="93:47" pos:end="93:48">-&gt;</operator><name pos:start="93:49" pos:end="93:53">state</name></name></expr>)</condition><block pos:start="93:55" pos:end="113:21">{<block_content pos:start="95:25" pos:end="111:39">

                        <expr_stmt pos:start="95:25" pos:end="95:50"><expr pos:start="95:25" pos:end="95:49"><operator pos:start="95:25" pos:end="95:25">*</operator><name pos:start="95:26" pos:end="95:27">tp</name><operator pos:start="95:28" pos:end="95:28">=</operator> <name pos:start="95:30" pos:end="95:44"><operator pos:start="95:30" pos:end="95:30">(</operator><operator pos:start="95:31" pos:end="95:31">*</operator><name pos:start="95:32" pos:end="95:36">child</name><operator pos:start="95:37" pos:end="95:37">)</operator><operator pos:start="95:38" pos:end="95:39">-&gt;</operator><name pos:start="95:40" pos:end="95:44">child</name></name><index pos:start="95:45" pos:end="95:49">[<expr pos:start="95:46" pos:end="95:48"><name pos:start="95:46" pos:end="95:46">i</name><operator pos:start="95:47" pos:end="95:47">^</operator><literal type="number" pos:start="95:48" pos:end="95:48">1</literal></expr>]</index></expr>;</expr_stmt>

                        <expr_stmt pos:start="97:25" pos:end="97:62"><expr pos:start="97:25" pos:end="97:61"><name pos:start="97:25" pos:end="97:39"><operator pos:start="97:25" pos:end="97:25">(</operator><operator pos:start="97:26" pos:end="97:26">*</operator><name pos:start="97:27" pos:end="97:31">child</name><operator pos:start="97:32" pos:end="97:32">)</operator><operator pos:start="97:33" pos:end="97:34">-&gt;</operator><name pos:start="97:35" pos:end="97:39">child</name></name><index pos:start="97:40" pos:end="97:44">[<expr pos:start="97:41" pos:end="97:43"><name pos:start="97:41" pos:end="97:41">i</name><operator pos:start="97:42" pos:end="97:42">^</operator><literal type="number" pos:start="97:43" pos:end="97:43">1</literal></expr>]</index><operator pos:start="97:45" pos:end="97:45">=</operator> <name pos:start="97:47" pos:end="97:58"><operator pos:start="97:47" pos:end="97:47">(</operator><operator pos:start="97:48" pos:end="97:48">*</operator><name pos:start="97:49" pos:end="97:50">tp</name><operator pos:start="97:51" pos:end="97:51">)</operator><operator pos:start="97:52" pos:end="97:53">-&gt;</operator><name pos:start="97:54" pos:end="97:58">child</name></name><index pos:start="97:59" pos:end="97:61">[<expr pos:start="97:60" pos:end="97:60"><name pos:start="97:60" pos:end="97:60">i</name></expr>]</index></expr>;</expr_stmt>

                        <expr_stmt pos:start="99:25" pos:end="99:48"><expr pos:start="99:25" pos:end="99:47"><name pos:start="99:25" pos:end="99:36"><operator pos:start="99:25" pos:end="99:25">(</operator><operator pos:start="99:26" pos:end="99:26">*</operator><name pos:start="99:27" pos:end="99:28">tp</name><operator pos:start="99:29" pos:end="99:29">)</operator><operator pos:start="99:30" pos:end="99:31">-&gt;</operator><name pos:start="99:32" pos:end="99:36">child</name></name><index pos:start="99:37" pos:end="99:39">[<expr pos:start="99:38" pos:end="99:38"><name pos:start="99:38" pos:end="99:38">i</name></expr>]</index><operator pos:start="99:40" pos:end="99:40">=</operator> <operator pos:start="99:42" pos:end="99:42">*</operator><name pos:start="99:43" pos:end="99:47">child</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="101:25" pos:end="101:50"><expr pos:start="101:25" pos:end="101:49"><operator pos:start="101:25" pos:end="101:25">*</operator><name pos:start="101:26" pos:end="101:30">child</name><operator pos:start="101:31" pos:end="101:31">=</operator> <name pos:start="101:33" pos:end="101:44"><operator pos:start="101:33" pos:end="101:33">(</operator><operator pos:start="101:34" pos:end="101:34">*</operator><name pos:start="101:35" pos:end="101:36">tp</name><operator pos:start="101:37" pos:end="101:37">)</operator><operator pos:start="101:38" pos:end="101:39">-&gt;</operator><name pos:start="101:40" pos:end="101:44">child</name></name><index pos:start="101:45" pos:end="101:49">[<expr pos:start="101:46" pos:end="101:48"><name pos:start="101:46" pos:end="101:46">i</name><operator pos:start="101:47" pos:end="101:47">^</operator><literal type="number" pos:start="101:48" pos:end="101:48">1</literal></expr>]</index></expr>;</expr_stmt>

                        <expr_stmt pos:start="103:25" pos:end="103:45"><expr pos:start="103:25" pos:end="103:44"><name pos:start="103:25" pos:end="103:36"><operator pos:start="103:25" pos:end="103:25">(</operator><operator pos:start="103:26" pos:end="103:26">*</operator><name pos:start="103:27" pos:end="103:28">tp</name><operator pos:start="103:29" pos:end="103:29">)</operator><operator pos:start="103:30" pos:end="103:31">-&gt;</operator><name pos:start="103:32" pos:end="103:36">child</name></name><index pos:start="103:37" pos:end="103:41">[<expr pos:start="103:38" pos:end="103:40"><name pos:start="103:38" pos:end="103:38">i</name><operator pos:start="103:39" pos:end="103:39">^</operator><literal type="number" pos:start="103:40" pos:end="103:40">1</literal></expr>]</index><operator pos:start="103:42" pos:end="103:42">=</operator> <name pos:start="103:44" pos:end="103:44">t</name></expr>;</expr_stmt>



                        <expr_stmt pos:start="107:25" pos:end="107:66"><expr pos:start="107:25" pos:end="107:65"><name pos:start="107:25" pos:end="107:36"><operator pos:start="107:25" pos:end="107:25">(</operator><operator pos:start="107:26" pos:end="107:26">*</operator><name pos:start="107:27" pos:end="107:28">tp</name><operator pos:start="107:29" pos:end="107:29">)</operator><operator pos:start="107:30" pos:end="107:31">-&gt;</operator><name pos:start="107:32" pos:end="107:36">child</name></name><index pos:start="107:37" pos:end="107:39">[<expr pos:start="107:38" pos:end="107:38"><literal type="number" pos:start="107:38" pos:end="107:38">0</literal></expr>]</index><operator pos:start="107:40" pos:end="107:41">-&gt;</operator><name pos:start="107:42" pos:end="107:46">state</name><operator pos:start="107:47" pos:end="107:47">=</operator> <operator pos:start="107:49" pos:end="107:49">-</operator><operator pos:start="107:50" pos:end="107:50">(</operator><name pos:start="107:51" pos:end="107:62"><operator pos:start="107:51" pos:end="107:51">(</operator><operator pos:start="107:52" pos:end="107:52">*</operator><name pos:start="107:53" pos:end="107:54">tp</name><operator pos:start="107:55" pos:end="107:55">)</operator><operator pos:start="107:56" pos:end="107:57">-&gt;</operator><name pos:start="107:58" pos:end="107:62">state</name></name><operator pos:start="107:63" pos:end="107:63">&gt;</operator><literal type="number" pos:start="107:64" pos:end="107:64">0</literal><operator pos:start="107:65" pos:end="107:65">)</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="109:25" pos:end="109:66"><expr pos:start="109:25" pos:end="109:64"><name pos:start="109:25" pos:end="109:36"><operator pos:start="109:25" pos:end="109:25">(</operator><operator pos:start="109:26" pos:end="109:26">*</operator><name pos:start="109:27" pos:end="109:28">tp</name><operator pos:start="109:29" pos:end="109:29">)</operator><operator pos:start="109:30" pos:end="109:31">-&gt;</operator><name pos:start="109:32" pos:end="109:36">child</name></name><index pos:start="109:37" pos:end="109:39">[<expr pos:start="109:38" pos:end="109:38"><literal type="number" pos:start="109:38" pos:end="109:38">1</literal></expr>]</index><operator pos:start="109:40" pos:end="109:41">-&gt;</operator><name pos:start="109:42" pos:end="109:46">state</name><operator pos:start="109:47" pos:end="109:47">=</operator>   <name pos:start="109:51" pos:end="109:64"><operator pos:start="109:51" pos:end="109:51">(</operator><operator pos:start="109:52" pos:end="109:52">*</operator><name pos:start="109:53" pos:end="109:54">tp</name><operator pos:start="109:55" pos:end="109:55">)</operator><operator pos:start="109:56" pos:end="109:57">-&gt;</operator><name pos:start="109:58" pos:end="109:62">state</name></name><operator pos:start="109:63" pos:end="109:63">&lt;</operator><literal type="number" pos:start="109:64" pos:end="109:64">0</literal></expr> ;</expr_stmt>

                        <expr_stmt pos:start="111:25" pos:end="111:39"><expr pos:start="111:25" pos:end="111:38"><name pos:start="111:25" pos:end="111:36"><operator pos:start="111:25" pos:end="111:25">(</operator><operator pos:start="111:26" pos:end="111:26">*</operator><name pos:start="111:27" pos:end="111:28">tp</name><operator pos:start="111:29" pos:end="111:29">)</operator><operator pos:start="111:30" pos:end="111:31">-&gt;</operator><name pos:start="111:32" pos:end="111:36">state</name></name><operator pos:start="111:37" pos:end="111:37">=</operator><literal type="number" pos:start="111:38" pos:end="111:38">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="113:22" pos:end="127:21">else<block pos:start="113:26" pos:end="127:21">{<block_content pos:start="115:25" pos:end="125:48">

                        <expr_stmt pos:start="115:25" pos:end="115:36"><expr pos:start="115:25" pos:end="115:35"><operator pos:start="115:25" pos:end="115:25">*</operator><name pos:start="115:26" pos:end="115:27">tp</name><operator pos:start="115:28" pos:end="115:28">=</operator> <operator pos:start="115:30" pos:end="115:30">*</operator><name pos:start="115:31" pos:end="115:35">child</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="117:25" pos:end="117:53"><expr pos:start="117:25" pos:end="117:52"><operator pos:start="117:25" pos:end="117:25">*</operator><name pos:start="117:26" pos:end="117:30">child</name><operator pos:start="117:31" pos:end="117:31">=</operator> <name pos:start="117:33" pos:end="117:47"><operator pos:start="117:33" pos:end="117:33">(</operator><operator pos:start="117:34" pos:end="117:34">*</operator><name pos:start="117:35" pos:end="117:39">child</name><operator pos:start="117:40" pos:end="117:40">)</operator><operator pos:start="117:41" pos:end="117:42">-&gt;</operator><name pos:start="117:43" pos:end="117:47">child</name></name><index pos:start="117:48" pos:end="117:52">[<expr pos:start="117:49" pos:end="117:51"><name pos:start="117:49" pos:end="117:49">i</name><operator pos:start="117:50" pos:end="117:50">^</operator><literal type="number" pos:start="117:51" pos:end="117:51">1</literal></expr>]</index></expr>;</expr_stmt>

                        <expr_stmt pos:start="119:25" pos:end="119:45"><expr pos:start="119:25" pos:end="119:44"><name pos:start="119:25" pos:end="119:36"><operator pos:start="119:25" pos:end="119:25">(</operator><operator pos:start="119:26" pos:end="119:26">*</operator><name pos:start="119:27" pos:end="119:28">tp</name><operator pos:start="119:29" pos:end="119:29">)</operator><operator pos:start="119:30" pos:end="119:31">-&gt;</operator><name pos:start="119:32" pos:end="119:36">child</name></name><index pos:start="119:37" pos:end="119:41">[<expr pos:start="119:38" pos:end="119:40"><name pos:start="119:38" pos:end="119:38">i</name><operator pos:start="119:39" pos:end="119:39">^</operator><literal type="number" pos:start="119:40" pos:end="119:40">1</literal></expr>]</index><operator pos:start="119:42" pos:end="119:42">=</operator> <name pos:start="119:44" pos:end="119:44">t</name></expr>;</expr_stmt>

                        <if_stmt pos:start="121:25" pos:end="123:55"><if pos:start="121:25" pos:end="121:55">if<condition pos:start="121:27" pos:end="121:40">(<expr pos:start="121:28" pos:end="121:39"><name pos:start="121:28" pos:end="121:39"><operator pos:start="121:28" pos:end="121:28">(</operator><operator pos:start="121:29" pos:end="121:29">*</operator><name pos:start="121:30" pos:end="121:31">tp</name><operator pos:start="121:32" pos:end="121:32">)</operator><operator pos:start="121:33" pos:end="121:34">-&gt;</operator><name pos:start="121:35" pos:end="121:39">state</name></name></expr>)</condition><block type="pseudo" pos:start="121:42" pos:end="121:55"><block_content pos:start="121:42" pos:end="121:55"> <expr_stmt pos:start="121:42" pos:end="121:55"><expr pos:start="121:42" pos:end="121:54"><name pos:start="121:42" pos:end="121:49"><name pos:start="121:42" pos:end="121:42">t</name><operator pos:start="121:43" pos:end="121:44">-&gt;</operator><name pos:start="121:45" pos:end="121:49">state</name></name>  <operator pos:start="121:52" pos:end="121:52">=</operator> <literal type="number" pos:start="121:54" pos:end="121:54">0</literal></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="123:25" pos:end="123:55">else<block type="pseudo" pos:start="123:42" pos:end="123:55"><block_content pos:start="123:42" pos:end="123:55">             <expr_stmt pos:start="123:42" pos:end="123:55"><expr pos:start="123:42" pos:end="123:54"><name pos:start="123:42" pos:end="123:49"><name pos:start="123:42" pos:end="123:42">t</name><operator pos:start="123:43" pos:end="123:44">-&gt;</operator><name pos:start="123:45" pos:end="123:49">state</name></name><operator pos:start="123:50" pos:end="123:52">&gt;&gt;=</operator> <literal type="number" pos:start="123:54" pos:end="123:54">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="125:25" pos:end="125:48"><expr pos:start="125:25" pos:end="125:47"><name pos:start="125:25" pos:end="125:36"><operator pos:start="125:25" pos:end="125:25">(</operator><operator pos:start="125:26" pos:end="125:26">*</operator><name pos:start="125:27" pos:end="125:28">tp</name><operator pos:start="125:29" pos:end="125:29">)</operator><operator pos:start="125:30" pos:end="125:31">-&gt;</operator><name pos:start="125:32" pos:end="125:36">state</name></name><operator pos:start="125:37" pos:end="125:37">=</operator> <operator pos:start="125:39" pos:end="125:39">-</operator><name pos:start="125:40" pos:end="125:47"><name pos:start="125:40" pos:end="125:40">t</name><operator pos:start="125:41" pos:end="125:42">-&gt;</operator><name pos:start="125:43" pos:end="125:47">state</name></name></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="133:13" pos:end="135:27"><if pos:start="133:13" pos:end="135:27">if<condition pos:start="133:15" pos:end="133:39">(<expr pos:start="133:16" pos:end="133:38"><operator pos:start="133:16" pos:end="133:16">!</operator><name pos:start="133:17" pos:end="133:28"><operator pos:start="133:17" pos:end="133:17">(</operator><operator pos:start="133:18" pos:end="133:18">*</operator><name pos:start="133:19" pos:end="133:20">tp</name><operator pos:start="133:21" pos:end="133:21">)</operator><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:28">state</name></name> <operator pos:start="133:30" pos:end="133:30">^</operator> <operator pos:start="133:32" pos:end="133:32">!</operator><operator pos:start="133:33" pos:end="133:33">!</operator><operator pos:start="133:34" pos:end="133:34">*</operator><name pos:start="133:35" pos:end="133:38">next</name></expr>)</condition><block type="pseudo" pos:start="135:17" pos:end="135:27"><block_content pos:start="135:17" pos:end="135:27">

                <return pos:start="135:17" pos:end="135:27">return <expr pos:start="135:24" pos:end="135:26"><name pos:start="135:24" pos:end="135:26">key</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="139:9" pos:end="139:19">return <expr pos:start="139:16" pos:end="139:18"><name pos:start="139:16" pos:end="139:18">ret</name></expr>;</return>

    </block_content>}</block></if><else pos:start="141:6" pos:end="149:5">else<block pos:start="141:10" pos:end="149:5">{<block_content pos:start="143:9" pos:end="147:20">

        <expr_stmt pos:start="143:9" pos:end="143:19"><expr pos:start="143:9" pos:end="143:18"><operator pos:start="143:9" pos:end="143:9">*</operator><name pos:start="143:10" pos:end="143:11">tp</name><operator pos:start="143:12" pos:end="143:12">=</operator> <operator pos:start="143:14" pos:end="143:14">*</operator><name pos:start="143:15" pos:end="143:18">next</name></expr>;</expr_stmt> <expr_stmt pos:start="143:21" pos:end="143:32"><expr pos:start="143:21" pos:end="143:31"><operator pos:start="143:21" pos:end="143:21">*</operator><name pos:start="143:22" pos:end="143:25">next</name><operator pos:start="143:26" pos:end="143:26">=</operator> <name pos:start="143:28" pos:end="143:31">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:25"><expr pos:start="145:9" pos:end="145:24"><name pos:start="145:9" pos:end="145:19"><operator pos:start="145:9" pos:end="145:9">(</operator><operator pos:start="145:10" pos:end="145:10">*</operator><name pos:start="145:11" pos:end="145:12">tp</name><operator pos:start="145:13" pos:end="145:13">)</operator><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:19">elem</name></name><operator pos:start="145:20" pos:end="145:20">=</operator> <name pos:start="145:22" pos:end="145:24">key</name></expr>;</expr_stmt>

        <return pos:start="147:9" pos:end="147:20">return <expr pos:start="147:16" pos:end="147:19"><name pos:start="147:16" pos:end="147:19">NULL</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
