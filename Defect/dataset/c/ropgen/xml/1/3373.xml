<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3373.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">mxf_read_local_tags</name><parameter_list pos:start="1:31" pos:end="1:140">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><name pos:start="1:32" pos:end="1:41">MXFContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">mxf</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:62"><decl pos:start="1:49" pos:end="1:62"><type pos:start="1:49" pos:end="1:62"><name pos:start="1:49" pos:end="1:57">KLVPacket</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">klv</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:95"><decl pos:start="1:65" pos:end="1:95"><type pos:start="1:65" pos:end="1:95"><name pos:start="1:65" pos:end="1:83">MXFMetadataReadFunc</name> <modifier pos:start="1:85" pos:end="1:85">*</modifier></type><name pos:start="1:86" pos:end="1:95">read_child</name></decl></parameter>, <parameter pos:start="1:98" pos:end="1:109"><decl pos:start="1:98" pos:end="1:109"><type pos:start="1:98" pos:end="1:109"><name pos:start="1:98" pos:end="1:100">int</name></type> <name pos:start="1:102" pos:end="1:109">ctx_size</name></decl></parameter>, <parameter pos:start="1:112" pos:end="1:139"><decl pos:start="1:112" pos:end="1:139"><type pos:start="1:112" pos:end="1:139"><name pos:start="1:112" pos:end="1:134"><name pos:start="1:112" pos:end="1:115">enum</name> <name pos:start="1:117" pos:end="1:134">MXFMetadataSetType</name></name></type> <name pos:start="1:136" pos:end="1:139">type</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:57">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">AVIOContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">pb</name> <init pos:start="5:21" pos:end="5:33">= <expr pos:start="5:23" pos:end="5:33"><name pos:start="5:23" pos:end="5:33"><name pos:start="5:23" pos:end="5:25">mxf</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:29">fc</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:33">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:64"><decl pos:start="7:5" pos:end="7:63"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">MXFMetadataSet</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:23">ctx</name> <init pos:start="7:25" pos:end="7:63">= <expr pos:start="7:27" pos:end="7:63"><ternary pos:start="7:27" pos:end="7:63"><condition pos:start="7:27" pos:end="7:36"><expr pos:start="7:27" pos:end="7:34"><name pos:start="7:27" pos:end="7:34">ctx_size</name></expr> ?</condition><then pos:start="7:38" pos:end="7:57"> <expr pos:start="7:38" pos:end="7:57"><call pos:start="7:38" pos:end="7:57"><name pos:start="7:38" pos:end="7:47">av_mallocz</name><argument_list pos:start="7:48" pos:end="7:57">(<argument pos:start="7:49" pos:end="7:56"><expr pos:start="7:49" pos:end="7:56"><name pos:start="7:49" pos:end="7:56">ctx_size</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="7:59" pos:end="7:63">: <expr pos:start="7:61" pos:end="7:63"><name pos:start="7:61" pos:end="7:63">mxf</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:51"><decl pos:start="9:5" pos:end="9:50"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:20">klv_end</name> <init pos:start="9:22" pos:end="9:50">= <expr pos:start="9:24" pos:end="9:50"><call pos:start="9:24" pos:end="9:36"><name pos:start="9:24" pos:end="9:32">avio_tell</name><argument_list pos:start="9:33" pos:end="9:36">(<argument pos:start="9:34" pos:end="9:35"><expr pos:start="9:34" pos:end="9:35"><name pos:start="9:34" pos:end="9:35">pb</name></expr></argument>)</argument_list></call> <operator pos:start="9:38" pos:end="9:38">+</operator> <name pos:start="9:40" pos:end="9:50"><name pos:start="9:40" pos:end="9:42">klv</name><operator pos:start="9:43" pos:end="9:44">-&gt;</operator><name pos:start="9:45" pos:end="9:50">length</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:31"><if pos:start="13:5" pos:end="15:31">if <condition pos:start="13:8" pos:end="13:13">(<expr pos:start="13:9" pos:end="13:12"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:12">ctx</name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:31"><block_content pos:start="15:9" pos:end="15:31">

        <return pos:start="15:9" pos:end="15:31">return <expr pos:start="15:16" pos:end="15:30"><call pos:start="15:16" pos:end="15:30"><name pos:start="15:16" pos:end="15:22">AVERROR</name><argument_list pos:start="15:23" pos:end="15:30">(<argument pos:start="15:24" pos:end="15:29"><expr pos:start="15:24" pos:end="15:29"><name pos:start="15:24" pos:end="15:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:36"><expr pos:start="17:5" pos:end="17:35"><call pos:start="17:5" pos:end="17:35"><name pos:start="17:5" pos:end="17:24">mxf_metadataset_init</name><argument_list pos:start="17:25" pos:end="17:35">(<argument pos:start="17:26" pos:end="17:28"><expr pos:start="17:26" pos:end="17:28"><name pos:start="17:26" pos:end="17:28">ctx</name></expr></argument>, <argument pos:start="17:31" pos:end="17:34"><expr pos:start="17:31" pos:end="17:34"><name pos:start="17:31" pos:end="17:34">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="19:5" pos:end="99:5">while <condition pos:start="19:11" pos:end="19:57">(<expr pos:start="19:12" pos:end="19:56"><call pos:start="19:12" pos:end="19:24"><name pos:start="19:12" pos:end="19:20">avio_tell</name><argument_list pos:start="19:21" pos:end="19:24">(<argument pos:start="19:22" pos:end="19:23"><expr pos:start="19:22" pos:end="19:23"><name pos:start="19:22" pos:end="19:23">pb</name></expr></argument>)</argument_list></call> <operator pos:start="19:26" pos:end="19:26">+</operator> <literal type="number" pos:start="19:28" pos:end="19:28">4</literal> <operator pos:start="19:30" pos:end="19:30">&lt;</operator> <name pos:start="19:32" pos:end="19:38">klv_end</name> <operator pos:start="19:40" pos:end="19:41">&amp;&amp;</operator> <operator pos:start="19:43" pos:end="19:43">!</operator><call pos:start="19:44" pos:end="19:56"><name pos:start="19:44" pos:end="19:52">avio_feof</name><argument_list pos:start="19:53" pos:end="19:56">(<argument pos:start="19:54" pos:end="19:55"><expr pos:start="19:54" pos:end="19:55"><name pos:start="19:54" pos:end="19:55">pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:59" pos:end="99:5">{<block_content pos:start="21:9" pos:end="97:42">

        <decl_stmt pos:start="21:9" pos:end="21:16"><decl pos:start="21:9" pos:end="21:15"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:15">ret</name></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:32"><decl pos:start="23:9" pos:end="23:31"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:15">tag</name> <init pos:start="23:17" pos:end="23:31">= <expr pos:start="23:19" pos:end="23:31"><call pos:start="23:19" pos:end="23:31"><name pos:start="23:19" pos:end="23:27">avio_rb16</name><argument_list pos:start="23:28" pos:end="23:31">(<argument pos:start="23:29" pos:end="23:30"><expr pos:start="23:29" pos:end="23:30"><name pos:start="23:29" pos:end="23:30">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:33"><decl pos:start="25:9" pos:end="25:32"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:16">size</name> <init pos:start="25:18" pos:end="25:32">= <expr pos:start="25:20" pos:end="25:32"><call pos:start="25:20" pos:end="25:32"><name pos:start="25:20" pos:end="25:28">avio_rb16</name><argument_list pos:start="25:29" pos:end="25:32">(<argument pos:start="25:30" pos:end="25:31"><expr pos:start="25:30" pos:end="25:31"><name pos:start="25:30" pos:end="25:31">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="25:35" pos:end="25:61">/* KLV specified by 0x53 */</comment>

        <decl_stmt pos:start="27:9" pos:end="27:45"><decl pos:start="27:9" pos:end="27:44"><type pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:16">uint64_t</name></type> <name pos:start="27:18" pos:end="27:21">next</name> <init pos:start="27:23" pos:end="27:44">= <expr pos:start="27:25" pos:end="27:44"><call pos:start="27:25" pos:end="27:37"><name pos:start="27:25" pos:end="27:33">avio_tell</name><argument_list pos:start="27:34" pos:end="27:37">(<argument pos:start="27:35" pos:end="27:36"><expr pos:start="27:35" pos:end="27:36"><name pos:start="27:35" pos:end="27:36">pb</name></expr></argument>)</argument_list></call> <operator pos:start="27:39" pos:end="27:39">+</operator> <name pos:start="27:41" pos:end="27:44">size</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:22"><decl pos:start="29:9" pos:end="29:21"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">UID</name></type> <name pos:start="29:13" pos:end="29:15">uid</name> <init pos:start="29:17" pos:end="29:21">= <expr pos:start="29:19" pos:end="29:21"><block pos:start="29:19" pos:end="29:21">{<expr pos:start="29:20" pos:end="29:20"><literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:65"><expr pos:start="33:9" pos:end="33:64"><call pos:start="33:9" pos:end="33:64"><name pos:start="33:9" pos:end="33:15">av_dlog</name><argument_list pos:start="33:16" pos:end="33:64">(<argument pos:start="33:17" pos:end="33:23"><expr pos:start="33:17" pos:end="33:23"><name pos:start="33:17" pos:end="33:23"><name pos:start="33:17" pos:end="33:19">mxf</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:23">fc</name></name></expr></argument>, <argument pos:start="33:26" pos:end="33:52"><expr pos:start="33:26" pos:end="33:52"><literal type="string" pos:start="33:26" pos:end="33:52">"local tag %#04x size %d\n"</literal></expr></argument>, <argument pos:start="33:55" pos:end="33:57"><expr pos:start="33:55" pos:end="33:57"><name pos:start="33:55" pos:end="33:57">tag</name></expr></argument>, <argument pos:start="33:60" pos:end="33:63"><expr pos:start="33:60" pos:end="33:63"><name pos:start="33:60" pos:end="33:63">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:18">(<expr pos:start="35:13" pos:end="35:17"><operator pos:start="35:13" pos:end="35:13">!</operator><name pos:start="35:14" pos:end="35:17">size</name></expr>)</condition> <block pos:start="35:20" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:21"> <comment type="block" pos:start="35:22" pos:end="35:86">/* ignore empty tag, needed for some files with empty UMID tag */</comment>

            <expr_stmt pos:start="37:13" pos:end="37:80"><expr pos:start="37:13" pos:end="37:79"><call pos:start="37:13" pos:end="37:79"><name pos:start="37:13" pos:end="37:18">av_log</name><argument_list pos:start="37:19" pos:end="37:79">(<argument pos:start="37:20" pos:end="37:26"><expr pos:start="37:20" pos:end="37:26"><name pos:start="37:20" pos:end="37:26"><name pos:start="37:20" pos:end="37:22">mxf</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:26">fc</name></name></expr></argument>, <argument pos:start="37:29" pos:end="37:40"><expr pos:start="37:29" pos:end="37:40"><name pos:start="37:29" pos:end="37:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:43" pos:end="37:73"><expr pos:start="37:43" pos:end="37:73"><literal type="string" pos:start="37:43" pos:end="37:73">"local tag %#04x with 0 size\n"</literal></expr></argument>, <argument pos:start="37:76" pos:end="37:78"><expr pos:start="37:76" pos:end="37:78"><name pos:start="37:76" pos:end="37:78">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="39:13" pos:end="39:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="43:9" pos:end="63:9"><if pos:start="43:9" pos:end="63:9">if <condition pos:start="43:12" pos:end="43:25">(<expr pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:15">tag</name> <operator pos:start="43:17" pos:end="43:17">&gt;</operator> <literal type="number" pos:start="43:19" pos:end="43:24">0x7FFF</literal></expr>)</condition> <block pos:start="43:27" pos:end="63:9">{<block_content pos:start="45:13" pos:end="61:13"> <comment type="block" pos:start="43:29" pos:end="43:45">/* dynamic tag */</comment>

            <decl_stmt pos:start="45:13" pos:end="45:18"><decl pos:start="45:13" pos:end="45:17"><type pos:start="45:13" pos:end="45:15"><name pos:start="45:13" pos:end="45:15">int</name></type> <name pos:start="45:17" pos:end="45:17">i</name></decl>;</decl_stmt>

            <for pos:start="47:13" pos:end="61:13">for <control pos:start="47:17" pos:end="47:55">(<init pos:start="47:18" pos:end="47:23"><expr pos:start="47:18" pos:end="47:22"><name pos:start="47:18" pos:end="47:18">i</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <literal type="number" pos:start="47:22" pos:end="47:22">0</literal></expr>;</init> <condition pos:start="47:25" pos:end="47:50"><expr pos:start="47:25" pos:end="47:49"><name pos:start="47:25" pos:end="47:25">i</name> <operator pos:start="47:27" pos:end="47:27">&lt;</operator> <name pos:start="47:29" pos:end="47:49"><name pos:start="47:29" pos:end="47:31">mxf</name><operator pos:start="47:32" pos:end="47:33">-&gt;</operator><name pos:start="47:34" pos:end="47:49">local_tags_count</name></name></expr>;</condition> <incr pos:start="47:52" pos:end="47:54"><expr pos:start="47:52" pos:end="47:54"><name pos:start="47:52" pos:end="47:52">i</name><operator pos:start="47:53" pos:end="47:54">++</operator></expr></incr>)</control> <block pos:start="47:57" pos:end="61:13">{<block_content pos:start="49:17" pos:end="59:17">

                <decl_stmt pos:start="49:17" pos:end="49:62"><decl pos:start="49:17" pos:end="49:61"><type pos:start="49:17" pos:end="49:19"><name pos:start="49:17" pos:end="49:19">int</name></type> <name pos:start="49:21" pos:end="49:29">local_tag</name> <init pos:start="49:31" pos:end="49:61">= <expr pos:start="49:33" pos:end="49:61"><call pos:start="49:33" pos:end="49:61"><name pos:start="49:33" pos:end="49:39">AV_RB16</name><argument_list pos:start="49:40" pos:end="49:61">(<argument pos:start="49:41" pos:end="49:60"><expr pos:start="49:41" pos:end="49:60"><name pos:start="49:41" pos:end="49:55"><name pos:start="49:41" pos:end="49:43">mxf</name><operator pos:start="49:44" pos:end="49:45">-&gt;</operator><name pos:start="49:46" pos:end="49:55">local_tags</name></name><operator pos:start="49:56" pos:end="49:56">+</operator><name pos:start="49:57" pos:end="49:57">i</name><operator pos:start="49:58" pos:end="49:58">*</operator><literal type="number" pos:start="49:59" pos:end="49:60">18</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="51:17" pos:end="59:17"><if pos:start="51:17" pos:end="59:17">if <condition pos:start="51:20" pos:end="51:37">(<expr pos:start="51:21" pos:end="51:36"><name pos:start="51:21" pos:end="51:29">local_tag</name> <operator pos:start="51:31" pos:end="51:32">==</operator> <name pos:start="51:34" pos:end="51:36">tag</name></expr>)</condition> <block pos:start="51:39" pos:end="59:17">{<block_content pos:start="53:21" pos:end="57:51">

                    <expr_stmt pos:start="53:21" pos:end="53:60"><expr pos:start="53:21" pos:end="53:59"><call pos:start="53:21" pos:end="53:59"><name pos:start="53:21" pos:end="53:26">memcpy</name><argument_list pos:start="53:27" pos:end="53:59">(<argument pos:start="53:28" pos:end="53:30"><expr pos:start="53:28" pos:end="53:30"><name pos:start="53:28" pos:end="53:30">uid</name></expr></argument>, <argument pos:start="53:33" pos:end="53:54"><expr pos:start="53:33" pos:end="53:54"><name pos:start="53:33" pos:end="53:47"><name pos:start="53:33" pos:end="53:35">mxf</name><operator pos:start="53:36" pos:end="53:37">-&gt;</operator><name pos:start="53:38" pos:end="53:47">local_tags</name></name><operator pos:start="53:48" pos:end="53:48">+</operator><name pos:start="53:49" pos:end="53:49">i</name><operator pos:start="53:50" pos:end="53:50">*</operator><literal type="number" pos:start="53:51" pos:end="53:53">18</literal><operator pos:start="53:53" pos:end="53:53">+</operator><literal type="number" pos:start="53:54" pos:end="53:54">2</literal></expr></argument>, <argument pos:start="53:57" pos:end="53:58"><expr pos:start="53:57" pos:end="53:58"><literal type="number" pos:start="53:57" pos:end="53:58">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="55:21" pos:end="55:69"><expr pos:start="55:21" pos:end="55:68"><call pos:start="55:21" pos:end="55:68"><name pos:start="55:21" pos:end="55:27">av_dlog</name><argument_list pos:start="55:28" pos:end="55:68">(<argument pos:start="55:29" pos:end="55:35"><expr pos:start="55:29" pos:end="55:35"><name pos:start="55:29" pos:end="55:35"><name pos:start="55:29" pos:end="55:31">mxf</name><operator pos:start="55:32" pos:end="55:33">-&gt;</operator><name pos:start="55:34" pos:end="55:35">fc</name></name></expr></argument>, <argument pos:start="55:38" pos:end="55:56"><expr pos:start="55:38" pos:end="55:56"><literal type="string" pos:start="55:38" pos:end="55:56">"local tag %#04x\n"</literal></expr></argument>, <argument pos:start="55:59" pos:end="55:67"><expr pos:start="55:59" pos:end="55:67"><name pos:start="55:59" pos:end="55:67">local_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="57:21" pos:end="57:51"><expr pos:start="57:21" pos:end="57:50"><call pos:start="57:21" pos:end="57:50"><name pos:start="57:21" pos:end="57:29">PRINT_KEY</name><argument_list pos:start="57:30" pos:end="57:50">(<argument pos:start="57:31" pos:end="57:37"><expr pos:start="57:31" pos:end="57:37"><name pos:start="57:31" pos:end="57:37"><name pos:start="57:31" pos:end="57:33">mxf</name><operator pos:start="57:34" pos:end="57:35">-&gt;</operator><name pos:start="57:36" pos:end="57:37">fc</name></name></expr></argument>, <argument pos:start="57:40" pos:end="57:44"><expr pos:start="57:40" pos:end="57:44"><literal type="string" pos:start="57:40" pos:end="57:44">"uid"</literal></expr></argument>, <argument pos:start="57:47" pos:end="57:49"><expr pos:start="57:47" pos:end="57:49"><name pos:start="57:47" pos:end="57:49">uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="65:9" pos:end="71:23"><if pos:start="65:9" pos:end="67:40">if <condition pos:start="65:12" pos:end="65:38">(<expr pos:start="65:13" pos:end="65:37"><name pos:start="65:13" pos:end="65:20">ctx_size</name> <operator pos:start="65:22" pos:end="65:23">&amp;&amp;</operator> <name pos:start="65:25" pos:end="65:27">tag</name> <operator pos:start="65:29" pos:end="65:30">==</operator> <literal type="number" pos:start="65:32" pos:end="65:37">0x3C0A</literal></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:40"><block_content pos:start="67:13" pos:end="67:40">

            <expr_stmt pos:start="67:13" pos:end="67:40"><expr pos:start="67:13" pos:end="67:39"><call pos:start="67:13" pos:end="67:39"><name pos:start="67:13" pos:end="67:21">avio_read</name><argument_list pos:start="67:22" pos:end="67:39">(<argument pos:start="67:23" pos:end="67:24"><expr pos:start="67:23" pos:end="67:24"><name pos:start="67:23" pos:end="67:24">pb</name></expr></argument>, <argument pos:start="67:27" pos:end="67:34"><expr pos:start="67:27" pos:end="67:34"><name pos:start="67:27" pos:end="67:34"><name pos:start="67:27" pos:end="67:29">ctx</name><operator pos:start="67:30" pos:end="67:31">-&gt;</operator><name pos:start="67:32" pos:end="67:34">uid</name></name></expr></argument>, <argument pos:start="67:37" pos:end="67:38"><expr pos:start="67:37" pos:end="67:38"><literal type="number" pos:start="67:37" pos:end="67:38">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="69:9" pos:end="71:23">else if <condition pos:start="69:17" pos:end="69:69">(<expr pos:start="69:18" pos:end="69:68"><operator pos:start="69:18" pos:end="69:18">(</operator><name pos:start="69:19" pos:end="69:21">ret</name> <operator pos:start="69:23" pos:end="69:23">=</operator> <call pos:start="69:25" pos:end="69:63"><name pos:start="69:25" pos:end="69:34">read_child</name><argument_list pos:start="69:35" pos:end="69:63">(<argument pos:start="69:36" pos:end="69:38"><expr pos:start="69:36" pos:end="69:38"><name pos:start="69:36" pos:end="69:38">ctx</name></expr></argument>, <argument pos:start="69:41" pos:end="69:42"><expr pos:start="69:41" pos:end="69:42"><name pos:start="69:41" pos:end="69:42">pb</name></expr></argument>, <argument pos:start="69:45" pos:end="69:47"><expr pos:start="69:45" pos:end="69:47"><name pos:start="69:45" pos:end="69:47">tag</name></expr></argument>, <argument pos:start="69:50" pos:end="69:53"><expr pos:start="69:50" pos:end="69:53"><name pos:start="69:50" pos:end="69:53">size</name></expr></argument>, <argument pos:start="69:56" pos:end="69:58"><expr pos:start="69:56" pos:end="69:58"><name pos:start="69:56" pos:end="69:58">uid</name></expr></argument>, <argument pos:start="69:61" pos:end="69:62"><expr pos:start="69:61" pos:end="69:62"><operator pos:start="69:61" pos:end="69:61">-</operator><literal type="number" pos:start="69:62" pos:end="69:62">1</literal></expr></argument>)</argument_list></call><operator pos:start="69:64" pos:end="69:64">)</operator> <operator pos:start="69:66" pos:end="69:66">&lt;</operator> <literal type="number" pos:start="69:68" pos:end="69:68">0</literal></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:23"><block_content pos:start="71:13" pos:end="71:23">

            <return pos:start="71:13" pos:end="71:23">return <expr pos:start="71:20" pos:end="71:22"><name pos:start="71:20" pos:end="71:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="75:9" pos:end="77:70">/* Accept the 64k local set limit being exceeded (Avid). Don't accept

         * it extending past the end of the KLV though (zzuf5.mxf). */</comment>

        <if_stmt pos:start="79:9" pos:end="97:42"><if pos:start="79:9" pos:end="95:9">if <condition pos:start="79:12" pos:end="79:36">(<expr pos:start="79:13" pos:end="79:35"><call pos:start="79:13" pos:end="79:25"><name pos:start="79:13" pos:end="79:21">avio_tell</name><argument_list pos:start="79:22" pos:end="79:25">(<argument pos:start="79:23" pos:end="79:24"><expr pos:start="79:23" pos:end="79:24"><name pos:start="79:23" pos:end="79:24">pb</name></expr></argument>)</argument_list></call> <operator pos:start="79:27" pos:end="79:27">&gt;</operator> <name pos:start="79:29" pos:end="79:35">klv_end</name></expr>)</condition> <block pos:start="79:38" pos:end="95:9">{<block_content pos:start="81:13" pos:end="93:39">

            <if_stmt pos:start="81:13" pos:end="83:29"><if pos:start="81:13" pos:end="83:29">if <condition pos:start="81:16" pos:end="81:25">(<expr pos:start="81:17" pos:end="81:24"><name pos:start="81:17" pos:end="81:24">ctx_size</name></expr>)</condition><block type="pseudo" pos:start="83:17" pos:end="83:29"><block_content pos:start="83:17" pos:end="83:29">

                <expr_stmt pos:start="83:17" pos:end="83:29"><expr pos:start="83:17" pos:end="83:28"><call pos:start="83:17" pos:end="83:28"><name pos:start="83:17" pos:end="83:23">av_free</name><argument_list pos:start="83:24" pos:end="83:28">(<argument pos:start="83:25" pos:end="83:27"><expr pos:start="83:25" pos:end="83:27"><name pos:start="83:25" pos:end="83:27">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="87:13" pos:end="91:37"><expr pos:start="87:13" pos:end="91:36"><call pos:start="87:13" pos:end="91:36"><name pos:start="87:13" pos:end="87:18">av_log</name><argument_list pos:start="87:19" pos:end="91:36">(<argument pos:start="87:20" pos:end="87:26"><expr pos:start="87:20" pos:end="87:26"><name pos:start="87:20" pos:end="87:26"><name pos:start="87:20" pos:end="87:22">mxf</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:26">fc</name></name></expr></argument>, <argument pos:start="87:29" pos:end="87:40"><expr pos:start="87:29" pos:end="87:40"><name pos:start="87:29" pos:end="87:40">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="89:20" pos:end="89:81"><expr pos:start="89:20" pos:end="89:81"><literal type="string" pos:start="89:20" pos:end="89:71">"local tag %#04x extends past end of local set @ %#"</literal><name pos:start="89:72" pos:end="89:77">PRIx64</name><literal type="string" pos:start="89:78" pos:end="89:81">"\n"</literal></expr></argument>,

                   <argument pos:start="91:20" pos:end="91:22"><expr pos:start="91:20" pos:end="91:22"><name pos:start="91:20" pos:end="91:22">tag</name></expr></argument>, <argument pos:start="91:25" pos:end="91:35"><expr pos:start="91:25" pos:end="91:35"><name pos:start="91:25" pos:end="91:35"><name pos:start="91:25" pos:end="91:27">klv</name><operator pos:start="91:28" pos:end="91:29">-&gt;</operator><name pos:start="91:30" pos:end="91:35">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="93:13" pos:end="93:39">return <expr pos:start="93:20" pos:end="93:38"><name pos:start="93:20" pos:end="93:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="95:11" pos:end="97:42">else if <condition pos:start="95:19" pos:end="95:41">(<expr pos:start="95:20" pos:end="95:40"><call pos:start="95:20" pos:end="95:32"><name pos:start="95:20" pos:end="95:28">avio_tell</name><argument_list pos:start="95:29" pos:end="95:32">(<argument pos:start="95:30" pos:end="95:31"><expr pos:start="95:30" pos:end="95:31"><name pos:start="95:30" pos:end="95:31">pb</name></expr></argument>)</argument_list></call> <operator pos:start="95:34" pos:end="95:35">&lt;=</operator> <name pos:start="95:37" pos:end="95:40">next</name></expr>)</condition><block type="pseudo" pos:start="97:13" pos:end="97:42"><block_content pos:start="97:13" pos:end="97:42">   <comment type="block" pos:start="95:45" pos:end="95:103">/* only seek forward, else this can loop for a long time */</comment>

            <expr_stmt pos:start="97:13" pos:end="97:42"><expr pos:start="97:13" pos:end="97:41"><call pos:start="97:13" pos:end="97:41"><name pos:start="97:13" pos:end="97:21">avio_seek</name><argument_list pos:start="97:22" pos:end="97:41">(<argument pos:start="97:23" pos:end="97:24"><expr pos:start="97:23" pos:end="97:24"><name pos:start="97:23" pos:end="97:24">pb</name></expr></argument>, <argument pos:start="97:27" pos:end="97:30"><expr pos:start="97:27" pos:end="97:30"><name pos:start="97:27" pos:end="97:30">next</name></expr></argument>, <argument pos:start="97:33" pos:end="97:40"><expr pos:start="97:33" pos:end="97:40"><name pos:start="97:33" pos:end="97:40">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="101:5" pos:end="101:35"><if pos:start="101:5" pos:end="101:35">if <condition pos:start="101:8" pos:end="101:17">(<expr pos:start="101:9" pos:end="101:16"><name pos:start="101:9" pos:end="101:16">ctx_size</name></expr>)</condition><block type="pseudo" pos:start="101:19" pos:end="101:35"><block_content pos:start="101:19" pos:end="101:35"> <expr_stmt pos:start="101:19" pos:end="101:35"><expr pos:start="101:19" pos:end="101:34"><name pos:start="101:19" pos:end="101:27"><name pos:start="101:19" pos:end="101:21">ctx</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:27">type</name></name> <operator pos:start="101:29" pos:end="101:29">=</operator> <name pos:start="101:31" pos:end="101:34">type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="103:5" pos:end="103:57">return <expr pos:start="103:12" pos:end="103:56"><ternary pos:start="103:12" pos:end="103:56"><condition pos:start="103:12" pos:end="103:21"><expr pos:start="103:12" pos:end="103:19"><name pos:start="103:12" pos:end="103:19">ctx_size</name></expr> ?</condition><then pos:start="103:23" pos:end="103:52"> <expr pos:start="103:23" pos:end="103:52"><call pos:start="103:23" pos:end="103:52"><name pos:start="103:23" pos:end="103:42">mxf_add_metadata_set</name><argument_list pos:start="103:43" pos:end="103:52">(<argument pos:start="103:44" pos:end="103:46"><expr pos:start="103:44" pos:end="103:46"><name pos:start="103:44" pos:end="103:46">mxf</name></expr></argument>, <argument pos:start="103:49" pos:end="103:51"><expr pos:start="103:49" pos:end="103:51"><name pos:start="103:49" pos:end="103:51">ctx</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="103:54" pos:end="103:56">: <expr pos:start="103:56" pos:end="103:56"><literal type="number" pos:start="103:56" pos:end="103:56">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
