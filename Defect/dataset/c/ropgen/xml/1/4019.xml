<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4019.c" pos:tabs="8"><function pos:start="1:1" pos:end="222:13"><type pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:23">attribute_align_arg</name></type> <name pos:start="1:25" pos:end="1:37">avcodec_open2</name><parameter_list pos:start="1:38" pos:end="1:106">(<parameter pos:start="1:39" pos:end="1:59"><decl pos:start="1:39" pos:end="1:59"><type pos:start="1:39" pos:end="1:59"><name pos:start="1:39" pos:end="1:52">AVCodecContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:59">avctx</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:81"><decl pos:start="1:62" pos:end="1:81"><type pos:start="1:62" pos:end="1:81"><specifier pos:start="1:62" pos:end="1:66">const</specifier> <name pos:start="1:68" pos:end="1:74">AVCodec</name> <modifier pos:start="1:76" pos:end="1:76">*</modifier></type><name pos:start="1:77" pos:end="1:81">codec</name></decl></parameter>, <parameter pos:start="1:84" pos:end="1:105"><decl pos:start="1:84" pos:end="1:105"><type pos:start="1:84" pos:end="1:105"><name pos:start="1:84" pos:end="1:95">AVDictionary</name> <modifier pos:start="1:97" pos:end="1:97">*</modifier><modifier pos:start="1:98" pos:end="1:98">*</modifier></type><name pos:start="1:99" pos:end="1:105">options</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="222:13">{<block_content pos:start="3:5" pos:end="222:13">
    <decl_stmt pos:start="3:5" pos:end="3:16"><decl pos:start="3:5" pos:end="3:15"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:11">ret</name> <init pos:start="3:13" pos:end="3:15">= <expr pos:start="3:15" pos:end="3:15"><literal type="number" pos:start="3:15" pos:end="3:15">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:29"><decl pos:start="4:5" pos:end="4:28"><type pos:start="4:5" pos:end="4:18"><name pos:start="4:5" pos:end="4:16">AVDictionary</name> <modifier pos:start="4:18" pos:end="4:18">*</modifier></type><name pos:start="4:19" pos:end="4:21">tmp</name> <init pos:start="4:23" pos:end="4:28">= <expr pos:start="4:25" pos:end="4:28"><name pos:start="4:25" pos:end="4:28">NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="5:5" pos:end="6:17"><if pos:start="5:5" pos:end="6:17">if <condition pos:start="5:8" pos:end="5:31">(<expr pos:start="5:9" pos:end="5:30"><call pos:start="5:9" pos:end="5:30"><name pos:start="5:9" pos:end="5:23">avcodec_is_open</name><argument_list pos:start="5:24" pos:end="5:30">(<argument pos:start="5:25" pos:end="5:29"><expr pos:start="5:25" pos:end="5:29"><name pos:start="5:25" pos:end="5:29">avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="6:9" pos:end="6:17"><block_content pos:start="6:9" pos:end="6:17">
        <return pos:start="6:9" pos:end="6:17">return <expr pos:start="6:16" pos:end="6:16"><literal type="number" pos:start="6:16" pos:end="6:16">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="7:5" pos:end="222:13"><if pos:start="7:5" pos:end="222:13">if <condition pos:start="7:8" pos:end="7:34">(<expr pos:start="7:9" pos:end="7:33"><operator pos:start="7:9" pos:end="7:9">(</operator><operator pos:start="7:10" pos:end="7:10">!</operator><name pos:start="7:11" pos:end="7:15">codec</name> <operator pos:start="7:17" pos:end="7:18">&amp;&amp;</operator> <operator pos:start="7:20" pos:end="7:20">!</operator><name pos:start="7:21" pos:end="7:32"><name pos:start="7:21" pos:end="7:25">avctx</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:32">codec</name></name><operator pos:start="7:33" pos:end="7:33">)</operator></expr>)</condition> <block pos:start="7:36" pos:end="222:13">{<block_content pos:start="8:9" pos:end="222:13">
        <expr_stmt pos:start="8:9" pos:end="8:79"><expr pos:start="8:9" pos:end="8:78"><call pos:start="8:9" pos:end="8:78"><name pos:start="8:9" pos:end="8:14">av_log</name><argument_list pos:start="8:15" pos:end="8:78">(<argument pos:start="8:16" pos:end="8:20"><expr pos:start="8:16" pos:end="8:20"><name pos:start="8:16" pos:end="8:20">avctx</name></expr></argument>, <argument pos:start="8:23" pos:end="8:34"><expr pos:start="8:23" pos:end="8:34"><name pos:start="8:23" pos:end="8:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="8:37" pos:end="8:77"><expr pos:start="8:37" pos:end="8:77"><literal type="string" pos:start="8:37" pos:end="8:77">"No codec provided to avcodec_open2().\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="9:9" pos:end="9:31">return <expr pos:start="9:16" pos:end="9:30"><call pos:start="9:16" pos:end="9:30"><name pos:start="9:16" pos:end="9:22">AVERROR</name><argument_list pos:start="9:23" pos:end="9:30">(<argument pos:start="9:24" pos:end="9:29"><expr pos:start="9:24" pos:end="9:29"><name pos:start="9:24" pos:end="9:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
    <if_stmt pos:start="10:5" pos:end="222:13"><if pos:start="10:5" pos:end="222:13">if <condition pos:start="10:8" pos:end="10:57">(<expr pos:start="10:9" pos:end="10:56"><operator pos:start="10:9" pos:end="10:9">(</operator><name pos:start="10:10" pos:end="10:14">codec</name> <operator pos:start="10:16" pos:end="10:17">&amp;&amp;</operator> <name pos:start="10:19" pos:end="10:30"><name pos:start="10:19" pos:end="10:23">avctx</name><operator pos:start="10:24" pos:end="10:25">-&gt;</operator><name pos:start="10:26" pos:end="10:30">codec</name></name> <operator pos:start="10:32" pos:end="10:33">&amp;&amp;</operator> <name pos:start="10:35" pos:end="10:39">codec</name> <operator pos:start="10:41" pos:end="10:42">!=</operator> <name pos:start="10:44" pos:end="10:55"><name pos:start="10:44" pos:end="10:48">avctx</name><operator pos:start="10:49" pos:end="10:50">-&gt;</operator><name pos:start="10:51" pos:end="10:55">codec</name></name><operator pos:start="10:56" pos:end="10:56">)</operator></expr>)</condition> <block pos:start="10:59" pos:end="222:13">{<block_content pos:start="11:9" pos:end="222:13">
        <expr_stmt pos:start="11:9" pos:end="12:108"><expr pos:start="11:9" pos:end="12:107"><call pos:start="11:9" pos:end="12:107"><name pos:start="11:9" pos:end="11:14">av_log</name><argument_list pos:start="11:15" pos:end="12:107">(<argument pos:start="11:16" pos:end="11:20"><expr pos:start="11:16" pos:end="11:20"><name pos:start="11:16" pos:end="11:20">avctx</name></expr></argument>, <argument pos:start="11:23" pos:end="11:34"><expr pos:start="11:23" pos:end="11:34"><name pos:start="11:23" pos:end="11:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="11:37" pos:end="12:73"><expr pos:start="11:37" pos:end="12:73"><literal type="string" pos:start="11:37" pos:end="11:80">"This AVCodecContext was allocated for %s, "</literal>
                                    <literal type="string" pos:start="12:37" pos:end="12:73">"but %s passed to avcodec_open2().\n"</literal></expr></argument>, <argument pos:start="12:76" pos:end="12:93"><expr pos:start="12:76" pos:end="12:93"><name pos:start="12:76" pos:end="12:93"><name pos:start="12:76" pos:end="12:80">avctx</name><operator pos:start="12:81" pos:end="12:82">-&gt;</operator><name pos:start="12:83" pos:end="12:87">codec</name><operator pos:start="12:88" pos:end="12:89">-&gt;</operator><name pos:start="12:90" pos:end="12:93">name</name></name></expr></argument>, <argument pos:start="12:96" pos:end="12:106"><expr pos:start="12:96" pos:end="12:106"><name pos:start="12:96" pos:end="12:106"><name pos:start="12:96" pos:end="12:100">codec</name><operator pos:start="12:101" pos:end="12:102">-&gt;</operator><name pos:start="12:103" pos:end="12:106">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="13:9" pos:end="13:31">return <expr pos:start="13:16" pos:end="13:30"><call pos:start="13:16" pos:end="13:30"><name pos:start="13:16" pos:end="13:22">AVERROR</name><argument_list pos:start="13:23" pos:end="13:30">(<argument pos:start="13:24" pos:end="13:29"><expr pos:start="13:24" pos:end="13:29"><name pos:start="13:24" pos:end="13:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
    <if_stmt pos:start="14:5" pos:end="15:29"><if pos:start="14:5" pos:end="15:29">if <condition pos:start="14:8" pos:end="14:15">(<expr pos:start="14:9" pos:end="14:14"><operator pos:start="14:9" pos:end="14:9">!</operator><name pos:start="14:10" pos:end="14:14">codec</name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:29"><block_content pos:start="15:9" pos:end="15:29">
        <expr_stmt pos:start="15:9" pos:end="15:29"><expr pos:start="15:9" pos:end="15:28"><name pos:start="15:9" pos:end="15:13">codec</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <name pos:start="15:17" pos:end="15:28"><name pos:start="15:17" pos:end="15:21">avctx</name><operator pos:start="15:22" pos:end="15:23">-&gt;</operator><name pos:start="15:24" pos:end="15:28">codec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="16:5" pos:end="17:31"><if pos:start="16:5" pos:end="17:31">if <condition pos:start="16:8" pos:end="16:84">(<expr pos:start="16:9" pos:end="16:83"><name pos:start="16:9" pos:end="16:29"><name pos:start="16:9" pos:end="16:13">avctx</name><operator pos:start="16:14" pos:end="16:15">-&gt;</operator><name pos:start="16:16" pos:end="16:29">extradata_size</name></name> <operator pos:start="16:31" pos:end="16:31">&lt;</operator> <literal type="number" pos:start="16:33" pos:end="16:33">0</literal> <operator pos:start="16:35" pos:end="16:36">||</operator> <name pos:start="16:38" pos:end="16:58"><name pos:start="16:38" pos:end="16:42">avctx</name><operator pos:start="16:43" pos:end="16:44">-&gt;</operator><name pos:start="16:45" pos:end="16:58">extradata_size</name></name> <operator pos:start="16:60" pos:end="16:61">&gt;=</operator> <name pos:start="16:63" pos:end="16:83">FF_MAX_EXTRADATA_SIZE</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:31"><block_content pos:start="17:9" pos:end="17:31">
        <return pos:start="17:9" pos:end="17:31">return <expr pos:start="17:16" pos:end="17:30"><call pos:start="17:16" pos:end="17:30"><name pos:start="17:16" pos:end="17:22">AVERROR</name><argument_list pos:start="17:23" pos:end="17:30">(<argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="18:5" pos:end="19:40"><if pos:start="18:5" pos:end="19:40">if <condition pos:start="18:8" pos:end="18:16">(<expr pos:start="18:9" pos:end="18:15"><name pos:start="18:9" pos:end="18:15">options</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:40"><block_content pos:start="19:9" pos:end="19:40">
        <expr_stmt pos:start="19:9" pos:end="19:40"><expr pos:start="19:9" pos:end="19:39"><call pos:start="19:9" pos:end="19:39"><name pos:start="19:9" pos:end="19:20">av_dict_copy</name><argument_list pos:start="19:21" pos:end="19:39">(<argument pos:start="19:22" pos:end="19:25"><expr pos:start="19:22" pos:end="19:25"><operator pos:start="19:22" pos:end="19:22">&amp;</operator><name pos:start="19:23" pos:end="19:25">tmp</name></expr></argument>, <argument pos:start="19:28" pos:end="19:35"><expr pos:start="19:28" pos:end="19:35"><operator pos:start="19:28" pos:end="19:28">*</operator><name pos:start="19:29" pos:end="19:35">options</name></expr></argument>, <argument pos:start="19:38" pos:end="19:38"><expr pos:start="19:38" pos:end="19:38"><literal type="number" pos:start="19:38" pos:end="19:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block" pos:start="20:5" pos:end="20:69">/* If there is a user-supplied mutex locking routine, call it. */</comment>
    <if_stmt pos:start="21:5" pos:end="222:13"><if pos:start="21:5" pos:end="222:13">if <condition pos:start="21:8" pos:end="21:78">(<expr pos:start="21:9" pos:end="21:77"><operator pos:start="21:9" pos:end="21:9">!</operator><operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:30"><name pos:start="21:11" pos:end="21:15">codec</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:30">caps_internal</name></name> <operator pos:start="21:32" pos:end="21:32">&amp;</operator> <name pos:start="21:34" pos:end="21:61">FF_CODEC_CAP_INIT_THREADSAFE</name><operator pos:start="21:62" pos:end="21:62">)</operator> <operator pos:start="21:64" pos:end="21:65">&amp;&amp;</operator> <name pos:start="21:67" pos:end="21:77"><name pos:start="21:67" pos:end="21:71">codec</name><operator pos:start="21:72" pos:end="21:73">-&gt;</operator><name pos:start="21:74" pos:end="21:77">init</name></name></expr>)</condition> <block pos:start="21:80" pos:end="222:13">{<block_content pos:start="22:9" pos:end="222:13">
        <if_stmt pos:start="22:9" pos:end="222:13"><if pos:start="22:9" pos:end="222:13">if <condition pos:start="22:12" pos:end="22:23">(<expr pos:start="22:13" pos:end="22:22"><name pos:start="22:13" pos:end="22:22">lockmgr_cb</name></expr>)</condition> <block pos:start="22:25" pos:end="222:13">{<block_content pos:start="23:13" pos:end="222:13">
            <if_stmt pos:start="23:13" pos:end="24:26"><if pos:start="23:13" pos:end="24:26">if <condition pos:start="23:16" pos:end="23:60">(<expr pos:start="23:17" pos:end="23:59"><call pos:start="23:17" pos:end="23:59">(<modifier pos:start="23:18" pos:end="23:18">*</modifier><name pos:start="23:19" pos:end="23:28">lockmgr_cb</name>)<argument_list pos:start="23:30" pos:end="23:59">(<argument pos:start="23:31" pos:end="23:42"><expr pos:start="23:31" pos:end="23:42"><operator pos:start="23:31" pos:end="23:31">&amp;</operator><name pos:start="23:32" pos:end="23:42">codec_mutex</name></expr></argument>, <argument pos:start="23:45" pos:end="23:58"><expr pos:start="23:45" pos:end="23:58"><name pos:start="23:45" pos:end="23:58">AV_LOCK_OBTAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="24:17" pos:end="24:26"><block_content pos:start="24:17" pos:end="24:26">
                <return pos:start="24:17" pos:end="24:26">return <expr pos:start="24:24" pos:end="24:25"><operator pos:start="24:24" pos:end="24:24">-</operator><literal type="number" pos:start="24:25" pos:end="24:25">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="25:9" pos:end="25:35"><expr pos:start="25:9" pos:end="25:34"><name pos:start="25:9" pos:end="25:32">entangled_thread_counter</name><operator pos:start="25:33" pos:end="25:34">++</operator></expr>;</expr_stmt>
        <if_stmt pos:start="26:9" pos:end="222:13"><if pos:start="26:9" pos:end="222:13">if <condition pos:start="26:12" pos:end="26:42">(<expr pos:start="26:13" pos:end="26:41"><name pos:start="26:13" pos:end="26:36">entangled_thread_counter</name> <operator pos:start="26:38" pos:end="26:39">!=</operator> <literal type="number" pos:start="26:41" pos:end="26:41">1</literal></expr>)</condition> <block pos:start="26:44" pos:end="222:13">{<block_content pos:start="27:13" pos:end="222:13">
            <expr_stmt pos:start="27:13" pos:end="30:45"><expr pos:start="27:13" pos:end="30:44"><call pos:start="27:13" pos:end="30:44"><name pos:start="27:13" pos:end="27:18">av_log</name><argument_list pos:start="27:19" pos:end="30:44">(<argument pos:start="27:20" pos:end="27:24"><expr pos:start="27:20" pos:end="27:24"><name pos:start="27:20" pos:end="27:24">avctx</name></expr></argument>, <argument pos:start="27:27" pos:end="27:38"><expr pos:start="27:27" pos:end="27:38"><name pos:start="27:27" pos:end="27:38">AV_LOG_ERROR</name></expr></argument>,
                   <argument pos:start="28:20" pos:end="29:74"><expr pos:start="28:20" pos:end="29:74"><literal type="string" pos:start="28:20" pos:end="28:74">"Insufficient thread locking. At least %d threads are "</literal>
                   <literal type="string" pos:start="29:20" pos:end="29:74">"calling avcodec_open2() at the same time right now.\n"</literal></expr></argument>,
                   <argument pos:start="30:20" pos:end="30:43"><expr pos:start="30:20" pos:end="30:43"><name pos:start="30:20" pos:end="30:43">entangled_thread_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="31:13" pos:end="31:21"><expr pos:start="31:13" pos:end="31:20"><name pos:start="31:13" pos:end="31:15">ret</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <operator pos:start="31:19" pos:end="31:19">-</operator><literal type="number" pos:start="31:20" pos:end="31:20">1</literal></expr>;</expr_stmt>
            <goto pos:start="32:13" pos:end="32:21">goto <name pos:start="32:18" pos:end="32:20">end</name>;</goto>
    <expr_stmt pos:start="33:5" pos:end="33:58"><expr pos:start="33:5" pos:end="33:57"><name pos:start="33:5" pos:end="33:19"><name pos:start="33:5" pos:end="33:9">avctx</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:19">internal</name></name> <operator pos:start="33:21" pos:end="33:21">=</operator> <call pos:start="33:23" pos:end="33:57"><name pos:start="33:23" pos:end="33:32">av_mallocz</name><argument_list pos:start="33:33" pos:end="33:57">(<argument pos:start="33:34" pos:end="33:56"><expr pos:start="33:34" pos:end="33:56"><sizeof pos:start="33:34" pos:end="33:56">sizeof<argument_list pos:start="33:40" pos:end="33:56">(<argument pos:start="33:41" pos:end="33:55"><expr pos:start="33:41" pos:end="33:55"><name pos:start="33:41" pos:end="33:55">AVCodecInternal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="34:5" pos:end="222:13"><if pos:start="34:5" pos:end="222:13">if <condition pos:start="34:8" pos:end="34:25">(<expr pos:start="34:9" pos:end="34:24"><operator pos:start="34:9" pos:end="34:9">!</operator><name pos:start="34:10" pos:end="34:24"><name pos:start="34:10" pos:end="34:14">avctx</name><operator pos:start="34:15" pos:end="34:16">-&gt;</operator><name pos:start="34:17" pos:end="34:24">internal</name></name></expr>)</condition> <block pos:start="34:27" pos:end="222:13">{<block_content pos:start="35:9" pos:end="222:13">
        <expr_stmt pos:start="35:9" pos:end="35:30"><expr pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:29"><name pos:start="35:15" pos:end="35:21">AVERROR</name><argument_list pos:start="35:22" pos:end="35:29">(<argument pos:start="35:23" pos:end="35:28"><expr pos:start="35:23" pos:end="35:28"><name pos:start="35:23" pos:end="35:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="36:9" pos:end="36:17">goto <name pos:start="36:14" pos:end="36:16">end</name>;</goto>
    <expr_stmt pos:start="37:5" pos:end="37:71"><expr pos:start="37:5" pos:end="37:70"><name pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:9">avctx</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:19">internal</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:25">pool</name></name> <operator pos:start="37:27" pos:end="37:27">=</operator> <call pos:start="37:29" pos:end="37:70"><name pos:start="37:29" pos:end="37:38">av_mallocz</name><argument_list pos:start="37:39" pos:end="37:70">(<argument pos:start="37:40" pos:end="37:69"><expr pos:start="37:40" pos:end="37:69"><sizeof pos:start="37:40" pos:end="37:69">sizeof<argument_list pos:start="37:46" pos:end="37:69">(<argument pos:start="37:47" pos:end="37:68"><expr pos:start="37:47" pos:end="37:68"><operator pos:start="37:47" pos:end="37:47">*</operator><name pos:start="37:48" pos:end="37:68"><name pos:start="37:48" pos:end="37:52">avctx</name><operator pos:start="37:53" pos:end="37:54">-&gt;</operator><name pos:start="37:55" pos:end="37:62">internal</name><operator pos:start="37:63" pos:end="37:64">-&gt;</operator><name pos:start="37:65" pos:end="37:68">pool</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="38:5" pos:end="222:13"><if pos:start="38:5" pos:end="222:13">if <condition pos:start="38:8" pos:end="38:31">(<expr pos:start="38:9" pos:end="38:30"><operator pos:start="38:9" pos:end="38:9">!</operator><name pos:start="38:10" pos:end="38:30"><name pos:start="38:10" pos:end="38:14">avctx</name><operator pos:start="38:15" pos:end="38:16">-&gt;</operator><name pos:start="38:17" pos:end="38:24">internal</name><operator pos:start="38:25" pos:end="38:26">-&gt;</operator><name pos:start="38:27" pos:end="38:30">pool</name></name></expr>)</condition> <block pos:start="38:33" pos:end="222:13">{<block_content pos:start="39:9" pos:end="222:13">
        <expr_stmt pos:start="39:9" pos:end="39:30"><expr pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:29"><name pos:start="39:15" pos:end="39:21">AVERROR</name><argument_list pos:start="39:22" pos:end="39:29">(<argument pos:start="39:23" pos:end="39:28"><expr pos:start="39:23" pos:end="39:28"><name pos:start="39:23" pos:end="39:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="40:5" pos:end="40:48"><expr pos:start="40:5" pos:end="40:47"><name pos:start="40:5" pos:end="40:28"><name pos:start="40:5" pos:end="40:9">avctx</name><operator pos:start="40:10" pos:end="40:11">-&gt;</operator><name pos:start="40:12" pos:end="40:19">internal</name><operator pos:start="40:20" pos:end="40:21">-&gt;</operator><name pos:start="40:22" pos:end="40:28">to_free</name></name> <operator pos:start="40:30" pos:end="40:30">=</operator> <call pos:start="40:32" pos:end="40:47"><name pos:start="40:32" pos:end="40:45">av_frame_alloc</name><argument_list pos:start="40:46" pos:end="40:47">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="41:5" pos:end="222:13"><if pos:start="41:5" pos:end="222:13">if <condition pos:start="41:8" pos:end="41:34">(<expr pos:start="41:9" pos:end="41:33"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:33"><name pos:start="41:10" pos:end="41:14">avctx</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:24">internal</name><operator pos:start="41:25" pos:end="41:26">-&gt;</operator><name pos:start="41:27" pos:end="41:33">to_free</name></name></expr>)</condition> <block pos:start="41:36" pos:end="222:13">{<block_content pos:start="42:9" pos:end="222:13">
        <expr_stmt pos:start="42:9" pos:end="42:30"><expr pos:start="42:9" pos:end="42:29"><name pos:start="42:9" pos:end="42:11">ret</name> <operator pos:start="42:13" pos:end="42:13">=</operator> <call pos:start="42:15" pos:end="42:29"><name pos:start="42:15" pos:end="42:21">AVERROR</name><argument_list pos:start="42:22" pos:end="42:29">(<argument pos:start="42:23" pos:end="42:28"><expr pos:start="42:23" pos:end="42:28"><name pos:start="42:23" pos:end="42:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="43:5" pos:end="43:53"><expr pos:start="43:5" pos:end="43:52"><name pos:start="43:5" pos:end="43:33"><name pos:start="43:5" pos:end="43:9">avctx</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:19">internal</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:33">buffer_frame</name></name> <operator pos:start="43:35" pos:end="43:35">=</operator> <call pos:start="43:37" pos:end="43:52"><name pos:start="43:37" pos:end="43:50">av_frame_alloc</name><argument_list pos:start="43:51" pos:end="43:52">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="44:5" pos:end="222:13"><if pos:start="44:5" pos:end="222:13">if <condition pos:start="44:8" pos:end="44:39">(<expr pos:start="44:9" pos:end="44:38"><operator pos:start="44:9" pos:end="44:9">!</operator><name pos:start="44:10" pos:end="44:38"><name pos:start="44:10" pos:end="44:14">avctx</name><operator pos:start="44:15" pos:end="44:16">-&gt;</operator><name pos:start="44:17" pos:end="44:24">internal</name><operator pos:start="44:25" pos:end="44:26">-&gt;</operator><name pos:start="44:27" pos:end="44:38">buffer_frame</name></name></expr>)</condition> <block pos:start="44:41" pos:end="222:13">{<block_content pos:start="45:9" pos:end="222:13">
        <expr_stmt pos:start="45:9" pos:end="45:30"><expr pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:29"><name pos:start="45:15" pos:end="45:21">AVERROR</name><argument_list pos:start="45:22" pos:end="45:29">(<argument pos:start="45:23" pos:end="45:28"><expr pos:start="45:23" pos:end="45:28"><name pos:start="45:23" pos:end="45:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="46:5" pos:end="46:52"><expr pos:start="46:5" pos:end="46:51"><name pos:start="46:5" pos:end="46:31"><name pos:start="46:5" pos:end="46:9">avctx</name><operator pos:start="46:10" pos:end="46:11">-&gt;</operator><name pos:start="46:12" pos:end="46:19">internal</name><operator pos:start="46:20" pos:end="46:21">-&gt;</operator><name pos:start="46:22" pos:end="46:31">buffer_pkt</name></name> <operator pos:start="46:33" pos:end="46:33">=</operator> <call pos:start="46:35" pos:end="46:51"><name pos:start="46:35" pos:end="46:49">av_packet_alloc</name><argument_list pos:start="46:50" pos:end="46:51">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="47:5" pos:end="222:13"><if pos:start="47:5" pos:end="222:13">if <condition pos:start="47:8" pos:end="47:37">(<expr pos:start="47:9" pos:end="47:36"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:36"><name pos:start="47:10" pos:end="47:14">avctx</name><operator pos:start="47:15" pos:end="47:16">-&gt;</operator><name pos:start="47:17" pos:end="47:24">internal</name><operator pos:start="47:25" pos:end="47:26">-&gt;</operator><name pos:start="47:27" pos:end="47:36">buffer_pkt</name></name></expr>)</condition> <block pos:start="47:39" pos:end="222:13">{<block_content pos:start="48:9" pos:end="222:13">
        <expr_stmt pos:start="48:9" pos:end="48:30"><expr pos:start="48:9" pos:end="48:29"><name pos:start="48:9" pos:end="48:11">ret</name> <operator pos:start="48:13" pos:end="48:13">=</operator> <call pos:start="48:15" pos:end="48:29"><name pos:start="48:15" pos:end="48:21">AVERROR</name><argument_list pos:start="48:22" pos:end="48:29">(<argument pos:start="48:23" pos:end="48:28"><expr pos:start="48:23" pos:end="48:28"><name pos:start="48:23" pos:end="48:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="49:5" pos:end="222:13"><if pos:start="49:5" pos:end="222:13">if <condition pos:start="49:8" pos:end="49:34">(<expr pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:29"><name pos:start="49:9" pos:end="49:13">codec</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:29">priv_data_size</name></name> <operator pos:start="49:31" pos:end="49:31">&gt;</operator> <literal type="number" pos:start="49:33" pos:end="49:33">0</literal></expr>)</condition> <block pos:start="49:36" pos:end="222:13">{<block_content pos:start="50:9" pos:end="222:13">
        <if_stmt pos:start="50:9" pos:end="222:13"><if pos:start="50:9" pos:end="222:13">if <condition pos:start="50:12" pos:end="50:30">(<expr pos:start="50:13" pos:end="50:29"><operator pos:start="50:13" pos:end="50:13">!</operator><name pos:start="50:14" pos:end="50:29"><name pos:start="50:14" pos:end="50:18">avctx</name><operator pos:start="50:19" pos:end="50:20">-&gt;</operator><name pos:start="50:21" pos:end="50:29">priv_data</name></name></expr>)</condition> <block pos:start="50:32" pos:end="222:13">{<block_content pos:start="51:13" pos:end="222:13">
            <expr_stmt pos:start="51:13" pos:end="51:65"><expr pos:start="51:13" pos:end="51:64"><name pos:start="51:13" pos:end="51:28"><name pos:start="51:13" pos:end="51:17">avctx</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:28">priv_data</name></name> <operator pos:start="51:30" pos:end="51:30">=</operator> <call pos:start="51:32" pos:end="51:64"><name pos:start="51:32" pos:end="51:41">av_mallocz</name><argument_list pos:start="51:42" pos:end="51:64">(<argument pos:start="51:43" pos:end="51:63"><expr pos:start="51:43" pos:end="51:63"><name pos:start="51:43" pos:end="51:63"><name pos:start="51:43" pos:end="51:47">codec</name><operator pos:start="51:48" pos:end="51:49">-&gt;</operator><name pos:start="51:50" pos:end="51:63">priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="52:13" pos:end="222:13"><if pos:start="52:13" pos:end="222:13">if <condition pos:start="52:16" pos:end="52:34">(<expr pos:start="52:17" pos:end="52:33"><operator pos:start="52:17" pos:end="52:17">!</operator><name pos:start="52:18" pos:end="52:33"><name pos:start="52:18" pos:end="52:22">avctx</name><operator pos:start="52:23" pos:end="52:24">-&gt;</operator><name pos:start="52:25" pos:end="52:33">priv_data</name></name></expr>)</condition> <block pos:start="52:36" pos:end="222:13">{<block_content pos:start="53:17" pos:end="222:13">
                <expr_stmt pos:start="53:17" pos:end="53:38"><expr pos:start="53:17" pos:end="53:37"><name pos:start="53:17" pos:end="53:19">ret</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <call pos:start="53:23" pos:end="53:37"><name pos:start="53:23" pos:end="53:29">AVERROR</name><argument_list pos:start="53:30" pos:end="53:37">(<argument pos:start="53:31" pos:end="53:36"><expr pos:start="53:31" pos:end="53:36"><name pos:start="53:31" pos:end="53:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="54:17" pos:end="54:25">goto <name pos:start="54:22" pos:end="54:24">end</name>;</goto>
            <if_stmt pos:start="55:13" pos:end="222:13"><if pos:start="55:13" pos:end="59:5">if <condition pos:start="55:16" pos:end="55:34">(<expr pos:start="55:17" pos:end="55:33"><name pos:start="55:17" pos:end="55:33"><name pos:start="55:17" pos:end="55:21">codec</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:33">priv_class</name></name></expr>)</condition> <block pos:start="55:36" pos:end="59:5">{<block_content pos:start="56:17" pos:end="58:85">
                <expr_stmt pos:start="56:17" pos:end="56:72"><expr pos:start="56:17" pos:end="56:71"><operator pos:start="56:17" pos:end="56:17">*</operator><operator pos:start="56:18" pos:end="56:18">(</operator><specifier pos:start="56:19" pos:end="56:23">const</specifier> <name pos:start="56:25" pos:end="56:31">AVClass</name> <operator pos:start="56:33" pos:end="56:33">*</operator><operator pos:start="56:34" pos:end="56:34">*</operator><operator pos:start="56:35" pos:end="56:35">)</operator><name pos:start="56:36" pos:end="56:51"><name pos:start="56:36" pos:end="56:40">avctx</name><operator pos:start="56:41" pos:end="56:42">-&gt;</operator><name pos:start="56:43" pos:end="56:51">priv_data</name></name> <operator pos:start="56:53" pos:end="56:53">=</operator> <name pos:start="56:55" pos:end="56:71"><name pos:start="56:55" pos:end="56:59">codec</name><operator pos:start="56:60" pos:end="56:61">-&gt;</operator><name pos:start="56:62" pos:end="56:71">priv_class</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="57:17" pos:end="57:54"><expr pos:start="57:17" pos:end="57:53"><call pos:start="57:17" pos:end="57:53"><name pos:start="57:17" pos:end="57:35">av_opt_set_defaults</name><argument_list pos:start="57:36" pos:end="57:53">(<argument pos:start="57:37" pos:end="57:52"><expr pos:start="57:37" pos:end="57:52"><name pos:start="57:37" pos:end="57:52"><name pos:start="57:37" pos:end="57:41">avctx</name><operator pos:start="57:42" pos:end="57:43">-&gt;</operator><name pos:start="57:44" pos:end="57:52">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="58:9" pos:end="58:85"><if pos:start="58:9" pos:end="58:85">if <condition pos:start="58:12" pos:end="58:85">(<expr pos:start="58:13" pos:end="58:84"><name pos:start="58:13" pos:end="58:29"><name pos:start="58:13" pos:end="58:17">codec</name><operator pos:start="58:18" pos:end="58:19">-&gt;</operator><name pos:start="58:20" pos:end="58:29">priv_class</name></name> <operator pos:start="58:31" pos:end="58:32">&amp;&amp;</operator> <operator pos:start="58:34" pos:end="58:34">(</operator><name pos:start="58:35" pos:end="58:37">ret</name> <operator pos:start="58:39" pos:end="58:39">=</operator> <call pos:start="58:41" pos:end="58:79"><name pos:start="58:41" pos:end="58:55">av_opt_set_dict</name><argument_list pos:start="58:56" pos:end="58:79">(<argument pos:start="58:57" pos:end="58:72"><expr pos:start="58:57" pos:end="58:72"><name pos:start="58:57" pos:end="58:72"><name pos:start="58:57" pos:end="58:61">avctx</name><operator pos:start="58:62" pos:end="58:63">-&gt;</operator><name pos:start="58:64" pos:end="58:72">priv_data</name></name></expr></argument>, <argument pos:start="58:75" pos:end="58:78"><expr pos:start="58:75" pos:end="58:78"><operator pos:start="58:75" pos:end="58:75">&amp;</operator><name pos:start="58:76" pos:end="58:78">tmp</name></expr></argument>)</argument_list></call><operator pos:start="58:80" pos:end="58:80">)</operator> <operator pos:start="58:82" pos:end="58:82">&lt;</operator> <literal type="number" pos:start="58:84" pos:end="58:84">0</literal></expr>)</condition><block type="pseudo"><block_content/></block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="59:7" pos:end="222:13">else <block pos:start="59:12" pos:end="222:13">{<block_content pos:start="60:9" pos:end="222:13">
        <expr_stmt pos:start="60:9" pos:end="60:32"><expr pos:start="60:9" pos:end="60:31"><name pos:start="60:9" pos:end="60:24"><name pos:start="60:9" pos:end="60:13">avctx</name><operator pos:start="60:14" pos:end="60:15">-&gt;</operator><name pos:start="60:16" pos:end="60:24">priv_data</name></name> <operator pos:start="60:26" pos:end="60:26">=</operator> <name pos:start="60:28" pos:end="60:31">NULL</name></expr>;</expr_stmt>
    <if_stmt pos:start="61:5" pos:end="65:68"><if pos:start="61:5" pos:end="65:68">if <condition pos:start="61:8" pos:end="61:49">(<expr pos:start="61:9" pos:end="61:48"><operator pos:start="61:9" pos:end="61:9">(</operator><name pos:start="61:10" pos:end="61:12">ret</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <call pos:start="61:16" pos:end="61:43"><name pos:start="61:16" pos:end="61:30">av_opt_set_dict</name><argument_list pos:start="61:31" pos:end="61:43">(<argument pos:start="61:32" pos:end="61:36"><expr pos:start="61:32" pos:end="61:36"><name pos:start="61:32" pos:end="61:36">avctx</name></expr></argument>, <argument pos:start="61:39" pos:end="61:42"><expr pos:start="61:39" pos:end="61:42"><operator pos:start="61:39" pos:end="61:39">&amp;</operator><name pos:start="61:40" pos:end="61:42">tmp</name></expr></argument>)</argument_list></call><operator pos:start="61:44" pos:end="61:44">)</operator> <operator pos:start="61:46" pos:end="61:46">&lt;</operator> <literal type="number" pos:start="61:48" pos:end="61:48">0</literal></expr>)</condition><block type="pseudo" pos:start="62:5" pos:end="65:68"><block_content pos:start="62:5" pos:end="65:68">
    <if_stmt pos:start="62:5" pos:end="65:68"><if pos:start="62:5" pos:end="63:80">if <condition pos:start="62:8" pos:end="62:85">(<expr pos:start="62:9" pos:end="62:84"><name pos:start="62:9" pos:end="62:26"><name pos:start="62:9" pos:end="62:13">avctx</name><operator pos:start="62:14" pos:end="62:15">-&gt;</operator><name pos:start="62:16" pos:end="62:26">coded_width</name></name> <operator pos:start="62:28" pos:end="62:29">&amp;&amp;</operator> <name pos:start="62:31" pos:end="62:49"><name pos:start="62:31" pos:end="62:35">avctx</name><operator pos:start="62:36" pos:end="62:37">-&gt;</operator><name pos:start="62:38" pos:end="62:49">coded_height</name></name> <operator pos:start="62:51" pos:end="62:52">&amp;&amp;</operator> <operator pos:start="62:54" pos:end="62:54">!</operator><name pos:start="62:55" pos:end="62:66"><name pos:start="62:55" pos:end="62:59">avctx</name><operator pos:start="62:60" pos:end="62:61">-&gt;</operator><name pos:start="62:62" pos:end="62:66">width</name></name> <operator pos:start="62:68" pos:end="62:69">&amp;&amp;</operator> <operator pos:start="62:71" pos:end="62:71">!</operator><name pos:start="62:72" pos:end="62:84"><name pos:start="62:72" pos:end="62:76">avctx</name><operator pos:start="62:77" pos:end="62:78">-&gt;</operator><name pos:start="62:79" pos:end="62:84">height</name></name></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:80"><block_content pos:start="63:9" pos:end="63:80">
        <expr_stmt pos:start="63:9" pos:end="63:80"><expr pos:start="63:9" pos:end="63:79"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="63:79"><name pos:start="63:15" pos:end="63:31">ff_set_dimensions</name><argument_list pos:start="63:32" pos:end="63:79">(<argument pos:start="63:33" pos:end="63:37"><expr pos:start="63:33" pos:end="63:37"><name pos:start="63:33" pos:end="63:37">avctx</name></expr></argument>, <argument pos:start="63:40" pos:end="63:57"><expr pos:start="63:40" pos:end="63:57"><name pos:start="63:40" pos:end="63:57"><name pos:start="63:40" pos:end="63:44">avctx</name><operator pos:start="63:45" pos:end="63:46">-&gt;</operator><name pos:start="63:47" pos:end="63:57">coded_width</name></name></expr></argument>, <argument pos:start="63:60" pos:end="63:78"><expr pos:start="63:60" pos:end="63:78"><name pos:start="63:60" pos:end="63:78"><name pos:start="63:60" pos:end="63:64">avctx</name><operator pos:start="63:65" pos:end="63:66">-&gt;</operator><name pos:start="63:67" pos:end="63:78">coded_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif" pos:start="64:5" pos:end="65:68">else if <condition pos:start="64:13" pos:end="64:43">(<expr pos:start="64:14" pos:end="64:42"><name pos:start="64:14" pos:end="64:25"><name pos:start="64:14" pos:end="64:18">avctx</name><operator pos:start="64:19" pos:end="64:20">-&gt;</operator><name pos:start="64:21" pos:end="64:25">width</name></name> <operator pos:start="64:27" pos:end="64:28">&amp;&amp;</operator> <name pos:start="64:30" pos:end="64:42"><name pos:start="64:30" pos:end="64:34">avctx</name><operator pos:start="64:35" pos:end="64:36">-&gt;</operator><name pos:start="64:37" pos:end="64:42">height</name></name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:68"><block_content pos:start="65:9" pos:end="65:68">
        <expr_stmt pos:start="65:9" pos:end="65:68"><expr pos:start="65:9" pos:end="65:67"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:67"><name pos:start="65:15" pos:end="65:31">ff_set_dimensions</name><argument_list pos:start="65:32" pos:end="65:67">(<argument pos:start="65:33" pos:end="65:37"><expr pos:start="65:33" pos:end="65:37"><name pos:start="65:33" pos:end="65:37">avctx</name></expr></argument>, <argument pos:start="65:40" pos:end="65:51"><expr pos:start="65:40" pos:end="65:51"><name pos:start="65:40" pos:end="65:51"><name pos:start="65:40" pos:end="65:44">avctx</name><operator pos:start="65:45" pos:end="65:46">-&gt;</operator><name pos:start="65:47" pos:end="65:51">width</name></name></expr></argument>, <argument pos:start="65:54" pos:end="65:66"><expr pos:start="65:54" pos:end="65:66"><name pos:start="65:54" pos:end="65:66"><name pos:start="65:54" pos:end="65:58">avctx</name><operator pos:start="65:59" pos:end="65:60">-&gt;</operator><name pos:start="65:61" pos:end="65:66">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="66:5" pos:end="222:13"><if pos:start="66:5" pos:end="222:13">if <condition pos:start="66:8" pos:end="66:16">(<expr pos:start="66:9" pos:end="66:15"><name pos:start="66:9" pos:end="66:11">ret</name> <operator pos:start="66:13" pos:end="66:13">&lt;</operator> <literal type="number" pos:start="66:15" pos:end="66:15">0</literal></expr>)</condition><block type="pseudo" pos:start="67:5" pos:end="222:13"><block_content pos:start="67:5" pos:end="222:13">
    <if_stmt pos:start="67:5" pos:end="222:13"><if pos:start="67:5" pos:end="222:13">if <condition pos:start="67:8" pos:end="69:90">(<expr pos:start="67:9" pos:end="69:89"><operator pos:start="67:9" pos:end="67:9">(</operator><name pos:start="67:10" pos:end="67:27"><name pos:start="67:10" pos:end="67:14">avctx</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:27">coded_width</name></name> <operator pos:start="67:29" pos:end="67:30">||</operator> <name pos:start="67:32" pos:end="67:50"><name pos:start="67:32" pos:end="67:36">avctx</name><operator pos:start="67:37" pos:end="67:38">-&gt;</operator><name pos:start="67:39" pos:end="67:50">coded_height</name></name> <operator pos:start="67:52" pos:end="67:53">||</operator> <name pos:start="67:55" pos:end="67:66"><name pos:start="67:55" pos:end="67:59">avctx</name><operator pos:start="67:60" pos:end="67:61">-&gt;</operator><name pos:start="67:62" pos:end="67:66">width</name></name> <operator pos:start="67:68" pos:end="67:69">||</operator> <name pos:start="67:71" pos:end="67:83"><name pos:start="67:71" pos:end="67:75">avctx</name><operator pos:start="67:76" pos:end="67:77">-&gt;</operator><name pos:start="67:78" pos:end="67:83">height</name></name><operator pos:start="67:84" pos:end="67:84">)</operator>
        <operator pos:start="68:9" pos:end="68:10">&amp;&amp;</operator> <operator pos:start="68:12" pos:end="68:12">(</operator>  <call pos:start="68:15" pos:end="68:84"><name pos:start="68:15" pos:end="68:33">av_image_check_size</name><argument_list pos:start="68:34" pos:end="68:84">(<argument pos:start="68:35" pos:end="68:52"><expr pos:start="68:35" pos:end="68:52"><name pos:start="68:35" pos:end="68:52"><name pos:start="68:35" pos:end="68:39">avctx</name><operator pos:start="68:40" pos:end="68:41">-&gt;</operator><name pos:start="68:42" pos:end="68:52">coded_width</name></name></expr></argument>, <argument pos:start="68:55" pos:end="68:73"><expr pos:start="68:55" pos:end="68:73"><name pos:start="68:55" pos:end="68:73"><name pos:start="68:55" pos:end="68:59">avctx</name><operator pos:start="68:60" pos:end="68:61">-&gt;</operator><name pos:start="68:62" pos:end="68:73">coded_height</name></name></expr></argument>, <argument pos:start="68:76" pos:end="68:76"><expr pos:start="68:76" pos:end="68:76"><literal type="number" pos:start="68:76" pos:end="68:76">0</literal></expr></argument>, <argument pos:start="68:79" pos:end="68:83"><expr pos:start="68:79" pos:end="68:83"><name pos:start="68:79" pos:end="68:83">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="68:86" pos:end="68:86">&lt;</operator> <literal type="number" pos:start="68:88" pos:end="68:88">0</literal>
           <operator pos:start="69:12" pos:end="69:13">||</operator> <call pos:start="69:15" pos:end="69:84"><name pos:start="69:15" pos:end="69:33">av_image_check_size</name><argument_list pos:start="69:34" pos:end="69:84">(<argument pos:start="69:35" pos:end="69:46"><expr pos:start="69:35" pos:end="69:46"><name pos:start="69:35" pos:end="69:46"><name pos:start="69:35" pos:end="69:39">avctx</name><operator pos:start="69:40" pos:end="69:41">-&gt;</operator><name pos:start="69:42" pos:end="69:46">width</name></name></expr></argument>,       <argument pos:start="69:55" pos:end="69:67"><expr pos:start="69:55" pos:end="69:67"><name pos:start="69:55" pos:end="69:67"><name pos:start="69:55" pos:end="69:59">avctx</name><operator pos:start="69:60" pos:end="69:61">-&gt;</operator><name pos:start="69:62" pos:end="69:67">height</name></name></expr></argument>,       <argument pos:start="69:76" pos:end="69:76"><expr pos:start="69:76" pos:end="69:76"><literal type="number" pos:start="69:76" pos:end="69:76">0</literal></expr></argument>, <argument pos:start="69:79" pos:end="69:83"><expr pos:start="69:79" pos:end="69:83"><name pos:start="69:79" pos:end="69:83">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="69:86" pos:end="69:86">&lt;</operator> <literal type="number" pos:start="69:88" pos:end="69:88">0</literal><operator pos:start="69:89" pos:end="69:89">)</operator></expr>)</condition> <block pos:start="69:92" pos:end="222:13">{<block_content pos:start="70:9" pos:end="222:13">
        <expr_stmt pos:start="70:9" pos:end="70:80"><expr pos:start="70:9" pos:end="70:79"><call pos:start="70:9" pos:end="70:79"><name pos:start="70:9" pos:end="70:14">av_log</name><argument_list pos:start="70:15" pos:end="70:79">(<argument pos:start="70:16" pos:end="70:20"><expr pos:start="70:16" pos:end="70:20"><name pos:start="70:16" pos:end="70:20">avctx</name></expr></argument>, <argument pos:start="70:23" pos:end="70:36"><expr pos:start="70:23" pos:end="70:36"><name pos:start="70:23" pos:end="70:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="70:39" pos:end="70:78"><expr pos:start="70:39" pos:end="70:78"><literal type="string" pos:start="70:39" pos:end="70:78">"ignoring invalid width/height values\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="71:9" pos:end="71:39"><expr pos:start="71:9" pos:end="71:38"><call pos:start="71:9" pos:end="71:38"><name pos:start="71:9" pos:end="71:25">ff_set_dimensions</name><argument_list pos:start="71:26" pos:end="71:38">(<argument pos:start="71:27" pos:end="71:31"><expr pos:start="71:27" pos:end="71:31"><name pos:start="71:27" pos:end="71:31">avctx</name></expr></argument>, <argument pos:start="71:34" pos:end="71:34"><expr pos:start="71:34" pos:end="71:34"><literal type="number" pos:start="71:34" pos:end="71:34">0</literal></expr></argument>, <argument pos:start="71:37" pos:end="71:37"><expr pos:start="71:37" pos:end="71:37"><literal type="number" pos:start="71:37" pos:end="71:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="72:5" pos:end="222:13"><if pos:start="72:5" pos:end="222:13">if <condition pos:start="72:8" pos:end="72:46">(<expr pos:start="72:9" pos:end="72:45"><name pos:start="72:9" pos:end="72:20"><name pos:start="72:9" pos:end="72:13">avctx</name><operator pos:start="72:14" pos:end="72:15">-&gt;</operator><name pos:start="72:16" pos:end="72:20">width</name></name> <operator pos:start="72:22" pos:end="72:22">&gt;</operator> <literal type="number" pos:start="72:24" pos:end="72:24">0</literal> <operator pos:start="72:26" pos:end="72:27">&amp;&amp;</operator> <name pos:start="72:29" pos:end="72:41"><name pos:start="72:29" pos:end="72:33">avctx</name><operator pos:start="72:34" pos:end="72:35">-&gt;</operator><name pos:start="72:36" pos:end="72:41">height</name></name> <operator pos:start="72:43" pos:end="72:43">&gt;</operator> <literal type="number" pos:start="72:45" pos:end="72:45">0</literal></expr>)</condition> <block pos:start="72:48" pos:end="222:13">{<block_content pos:start="73:9" pos:end="222:13">
        <if_stmt pos:start="73:9" pos:end="222:13"><if pos:start="73:9" pos:end="222:13">if <condition pos:start="73:12" pos:end="74:63">(<expr pos:start="73:13" pos:end="74:62"><call pos:start="73:13" pos:end="74:58"><name pos:start="73:13" pos:end="73:30">av_image_check_sar</name><argument_list pos:start="73:31" pos:end="74:58">(<argument pos:start="73:32" pos:end="73:43"><expr pos:start="73:32" pos:end="73:43"><name pos:start="73:32" pos:end="73:43"><name pos:start="73:32" pos:end="73:36">avctx</name><operator pos:start="73:37" pos:end="73:38">-&gt;</operator><name pos:start="73:39" pos:end="73:43">width</name></name></expr></argument>, <argument pos:start="73:46" pos:end="73:58"><expr pos:start="73:46" pos:end="73:58"><name pos:start="73:46" pos:end="73:58"><name pos:start="73:46" pos:end="73:50">avctx</name><operator pos:start="73:51" pos:end="73:52">-&gt;</operator><name pos:start="73:53" pos:end="73:58">height</name></name></expr></argument>,
                               <argument pos:start="74:32" pos:end="74:57"><expr pos:start="74:32" pos:end="74:57"><name pos:start="74:32" pos:end="74:57"><name pos:start="74:32" pos:end="74:36">avctx</name><operator pos:start="74:37" pos:end="74:38">-&gt;</operator><name pos:start="74:39" pos:end="74:57">sample_aspect_ratio</name></name></expr></argument>)</argument_list></call> <operator pos:start="74:60" pos:end="74:60">&lt;</operator> <literal type="number" pos:start="74:62" pos:end="74:62">0</literal></expr>)</condition> <block pos:start="74:65" pos:end="222:13">{<block_content pos:start="75:13" pos:end="222:13">
            <expr_stmt pos:start="75:13" pos:end="77:51"><expr pos:start="75:13" pos:end="77:50"><call pos:start="75:13" pos:end="77:50"><name pos:start="75:13" pos:end="75:18">av_log</name><argument_list pos:start="75:19" pos:end="77:50">(<argument pos:start="75:20" pos:end="75:24"><expr pos:start="75:20" pos:end="75:24"><name pos:start="75:20" pos:end="75:24">avctx</name></expr></argument>, <argument pos:start="75:27" pos:end="75:40"><expr pos:start="75:27" pos:end="75:40"><name pos:start="75:27" pos:end="75:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="75:43" pos:end="75:73"><expr pos:start="75:43" pos:end="75:73"><literal type="string" pos:start="75:43" pos:end="75:73">"ignoring invalid SAR: %u/%u\n"</literal></expr></argument>,
                   <argument pos:start="76:20" pos:end="76:49"><expr pos:start="76:20" pos:end="76:49"><name pos:start="76:20" pos:end="76:49"><name pos:start="76:20" pos:end="76:24">avctx</name><operator pos:start="76:25" pos:end="76:26">-&gt;</operator><name pos:start="76:27" pos:end="76:45">sample_aspect_ratio</name><operator pos:start="76:46" pos:end="76:46">.</operator><name pos:start="76:47" pos:end="76:49">num</name></name></expr></argument>,
                   <argument pos:start="77:20" pos:end="77:49"><expr pos:start="77:20" pos:end="77:49"><name pos:start="77:20" pos:end="77:49"><name pos:start="77:20" pos:end="77:24">avctx</name><operator pos:start="77:25" pos:end="77:26">-&gt;</operator><name pos:start="77:27" pos:end="77:45">sample_aspect_ratio</name><operator pos:start="77:46" pos:end="77:46">.</operator><name pos:start="77:47" pos:end="77:49">den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="78:13" pos:end="78:62"><expr pos:start="78:13" pos:end="78:61"><name pos:start="78:13" pos:end="78:38"><name pos:start="78:13" pos:end="78:17">avctx</name><operator pos:start="78:18" pos:end="78:19">-&gt;</operator><name pos:start="78:20" pos:end="78:38">sample_aspect_ratio</name></name> <operator pos:start="78:40" pos:end="78:40">=</operator> <operator pos:start="78:42" pos:end="78:42">(</operator><name pos:start="78:43" pos:end="78:52">AVRational</name><operator pos:start="78:53" pos:end="78:53">)</operator><block pos:start="78:54" pos:end="78:61">{ <expr pos:start="78:56" pos:end="78:56"><literal type="number" pos:start="78:56" pos:end="78:56">0</literal></expr>, <expr pos:start="78:59" pos:end="78:59"><literal type="number" pos:start="78:59" pos:end="78:59">1</literal></expr> }</block></expr>;</expr_stmt>
    <comment type="block" pos:start="79:5" pos:end="80:74">/* if the decoder init function was already called previously,
     * free the already allocated subtitle_header before overwriting it */</comment>
    <if_stmt pos:start="81:5" pos:end="82:42"><if pos:start="81:5" pos:end="82:42">if <condition pos:start="81:8" pos:end="81:35">(<expr pos:start="81:9" pos:end="81:34"><call pos:start="81:9" pos:end="81:34"><name pos:start="81:9" pos:end="81:27">av_codec_is_decoder</name><argument_list pos:start="81:28" pos:end="81:34">(<argument pos:start="81:29" pos:end="81:33"><expr pos:start="81:29" pos:end="81:33"><name pos:start="81:29" pos:end="81:33">codec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="82:9" pos:end="82:42"><block_content pos:start="82:9" pos:end="82:42">
        <expr_stmt pos:start="82:9" pos:end="82:42"><expr pos:start="82:9" pos:end="82:41"><call pos:start="82:9" pos:end="82:41"><name pos:start="82:9" pos:end="82:16">av_freep</name><argument_list pos:start="82:17" pos:end="82:41">(<argument pos:start="82:18" pos:end="82:40"><expr pos:start="82:18" pos:end="82:40"><operator pos:start="82:18" pos:end="82:18">&amp;</operator><name pos:start="82:19" pos:end="82:40"><name pos:start="82:19" pos:end="82:23">avctx</name><operator pos:start="82:24" pos:end="82:25">-&gt;</operator><name pos:start="82:26" pos:end="82:40">subtitle_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="83:5" pos:end="222:13"><if pos:start="83:5" pos:end="222:13">if <condition pos:start="83:8" pos:end="83:46">(<expr pos:start="83:9" pos:end="83:45"><name pos:start="83:9" pos:end="83:23"><name pos:start="83:9" pos:end="83:13">avctx</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:23">channels</name></name> <operator pos:start="83:25" pos:end="83:25">&gt;</operator> <name pos:start="83:27" pos:end="83:45">FF_SANE_NB_CHANNELS</name></expr>)</condition> <block pos:start="83:48" pos:end="222:13">{<block_content pos:start="84:5" pos:end="222:13">
    <expr_stmt pos:start="84:5" pos:end="84:25"><expr pos:start="84:5" pos:end="84:24"><name pos:start="84:5" pos:end="84:16"><name pos:start="84:5" pos:end="84:9">avctx</name><operator pos:start="84:10" pos:end="84:11">-&gt;</operator><name pos:start="84:12" pos:end="84:16">codec</name></name> <operator pos:start="84:18" pos:end="84:18">=</operator> <name pos:start="84:20" pos:end="84:24">codec</name></expr>;</expr_stmt>
    <if_stmt pos:start="85:5" pos:end="222:13"><if pos:start="85:5" pos:end="222:13">if <condition pos:start="85:8" pos:end="86:44">(<expr pos:start="85:9" pos:end="86:43"><operator pos:start="85:9" pos:end="85:9">(</operator><name pos:start="85:10" pos:end="85:26"><name pos:start="85:10" pos:end="85:14">avctx</name><operator pos:start="85:15" pos:end="85:16">-&gt;</operator><name pos:start="85:17" pos:end="85:26">codec_type</name></name> <operator pos:start="85:28" pos:end="85:29">==</operator> <name pos:start="85:31" pos:end="85:50">AVMEDIA_TYPE_UNKNOWN</name> <operator pos:start="85:52" pos:end="85:53">||</operator> <name pos:start="85:55" pos:end="85:71"><name pos:start="85:55" pos:end="85:59">avctx</name><operator pos:start="85:60" pos:end="85:61">-&gt;</operator><name pos:start="85:62" pos:end="85:71">codec_type</name></name> <operator pos:start="85:73" pos:end="85:74">==</operator> <name pos:start="85:76" pos:end="85:86"><name pos:start="85:76" pos:end="85:80">codec</name><operator pos:start="85:81" pos:end="85:82">-&gt;</operator><name pos:start="85:83" pos:end="85:86">type</name></name><operator pos:start="85:87" pos:end="85:87">)</operator> <operator pos:start="85:89" pos:end="85:90">&amp;&amp;</operator>
        <name pos:start="86:9" pos:end="86:23"><name pos:start="86:9" pos:end="86:13">avctx</name><operator pos:start="86:14" pos:end="86:15">-&gt;</operator><name pos:start="86:16" pos:end="86:23">codec_id</name></name> <operator pos:start="86:25" pos:end="86:26">==</operator> <name pos:start="86:28" pos:end="86:43">AV_CODEC_ID_NONE</name></expr>)</condition> <block pos:start="86:46" pos:end="222:13">{<block_content pos:start="87:9" pos:end="222:13">
        <expr_stmt pos:start="87:9" pos:end="87:40"><expr pos:start="87:9" pos:end="87:39"><name pos:start="87:9" pos:end="87:25"><name pos:start="87:9" pos:end="87:13">avctx</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:25">codec_type</name></name> <operator pos:start="87:27" pos:end="87:27">=</operator> <name pos:start="87:29" pos:end="87:39"><name pos:start="87:29" pos:end="87:33">codec</name><operator pos:start="87:34" pos:end="87:35">-&gt;</operator><name pos:start="87:36" pos:end="87:39">type</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="88:9" pos:end="88:38"><expr pos:start="88:9" pos:end="88:37"><name pos:start="88:9" pos:end="88:23"><name pos:start="88:9" pos:end="88:13">avctx</name><operator pos:start="88:14" pos:end="88:15">-&gt;</operator><name pos:start="88:16" pos:end="88:23">codec_id</name></name>   <operator pos:start="88:27" pos:end="88:27">=</operator> <name pos:start="88:29" pos:end="88:37"><name pos:start="88:29" pos:end="88:33">codec</name><operator pos:start="88:34" pos:end="88:35">-&gt;</operator><name pos:start="88:36" pos:end="88:37">id</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="89:5" pos:end="222:13"><if pos:start="89:5" pos:end="222:13">if <condition pos:start="89:8" pos:end="90:90">(<expr pos:start="89:9" pos:end="90:89"><name pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:13">avctx</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:23">codec_id</name></name> <operator pos:start="89:25" pos:end="89:26">!=</operator> <name pos:start="89:28" pos:end="89:36"><name pos:start="89:28" pos:end="89:32">codec</name><operator pos:start="89:33" pos:end="89:34">-&gt;</operator><name pos:start="89:35" pos:end="89:36">id</name></name> <operator pos:start="89:38" pos:end="89:39">||</operator> <operator pos:start="89:41" pos:end="89:41">(</operator><name pos:start="89:42" pos:end="89:58"><name pos:start="89:42" pos:end="89:46">avctx</name><operator pos:start="89:47" pos:end="89:48">-&gt;</operator><name pos:start="89:49" pos:end="89:58">codec_type</name></name> <operator pos:start="89:60" pos:end="89:61">!=</operator> <name pos:start="89:63" pos:end="89:73"><name pos:start="89:63" pos:end="89:67">codec</name><operator pos:start="89:68" pos:end="89:69">-&gt;</operator><name pos:start="89:70" pos:end="89:73">type</name></name>
                                         <operator pos:start="90:42" pos:end="90:43">&amp;&amp;</operator> <name pos:start="90:45" pos:end="90:61"><name pos:start="90:45" pos:end="90:49">avctx</name><operator pos:start="90:50" pos:end="90:51">-&gt;</operator><name pos:start="90:52" pos:end="90:61">codec_type</name></name> <operator pos:start="90:63" pos:end="90:64">!=</operator> <name pos:start="90:66" pos:end="90:88">AVMEDIA_TYPE_ATTACHMENT</name><operator pos:start="90:89" pos:end="90:89">)</operator></expr>)</condition> <block pos:start="90:92" pos:end="222:13">{<block_content pos:start="91:9" pos:end="222:13">
        <expr_stmt pos:start="91:9" pos:end="91:69"><expr pos:start="91:9" pos:end="91:68"><call pos:start="91:9" pos:end="91:68"><name pos:start="91:9" pos:end="91:14">av_log</name><argument_list pos:start="91:15" pos:end="91:68">(<argument pos:start="91:16" pos:end="91:20"><expr pos:start="91:16" pos:end="91:20"><name pos:start="91:16" pos:end="91:20">avctx</name></expr></argument>, <argument pos:start="91:23" pos:end="91:34"><expr pos:start="91:23" pos:end="91:34"><name pos:start="91:23" pos:end="91:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:37" pos:end="91:67"><expr pos:start="91:37" pos:end="91:67"><literal type="string" pos:start="91:37" pos:end="91:67">"codec type or id mismatches\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="92:5" pos:end="92:28"><expr pos:start="92:5" pos:end="92:27"><name pos:start="92:5" pos:end="92:23"><name pos:start="92:5" pos:end="92:9">avctx</name><operator pos:start="92:10" pos:end="92:11">-&gt;</operator><name pos:start="92:12" pos:end="92:23">frame_number</name></name> <operator pos:start="92:25" pos:end="92:25">=</operator> <literal type="number" pos:start="92:27" pos:end="92:27">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="93:5" pos:end="222:13"><if pos:start="93:5" pos:end="222:13">if <condition pos:start="93:8" pos:end="94:66">(<expr pos:start="93:9" pos:end="94:65"><operator pos:start="93:9" pos:end="93:9">(</operator><name pos:start="93:10" pos:end="93:35"><name pos:start="93:10" pos:end="93:14">avctx</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:21">codec</name><operator pos:start="93:22" pos:end="93:23">-&gt;</operator><name pos:start="93:24" pos:end="93:35">capabilities</name></name> <operator pos:start="93:37" pos:end="93:37">&amp;</operator> <name pos:start="93:39" pos:end="93:63">AV_CODEC_CAP_EXPERIMENTAL</name><operator pos:start="93:64" pos:end="93:64">)</operator> <operator pos:start="93:66" pos:end="93:67">&amp;&amp;</operator>
        <name pos:start="94:9" pos:end="94:36"><name pos:start="94:9" pos:end="94:13">avctx</name><operator pos:start="94:14" pos:end="94:15">-&gt;</operator><name pos:start="94:16" pos:end="94:36">strict_std_compliance</name></name> <operator pos:start="94:38" pos:end="94:38">&gt;</operator> <name pos:start="94:40" pos:end="94:65">FF_COMPLIANCE_EXPERIMENTAL</name></expr>)</condition> <block pos:start="94:68" pos:end="222:13">{<block_content pos:start="95:9" pos:end="222:13">
        <expr_stmt pos:start="95:9" pos:end="95:35"><expr pos:start="95:9" pos:end="95:34"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <name pos:start="95:15" pos:end="95:34">AVERROR_EXPERIMENTAL</name></expr>;</expr_stmt>
    <if_stmt pos:start="96:5" pos:end="222:13"><if pos:start="96:5" pos:end="222:13">if <condition pos:start="96:8" pos:end="97:57">(<expr pos:start="96:9" pos:end="97:56"><name pos:start="96:9" pos:end="96:25"><name pos:start="96:9" pos:end="96:13">avctx</name><operator pos:start="96:14" pos:end="96:15">-&gt;</operator><name pos:start="96:16" pos:end="96:25">codec_type</name></name> <operator pos:start="96:27" pos:end="96:28">==</operator> <name pos:start="96:30" pos:end="96:47">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="96:49" pos:end="96:50">&amp;&amp;</operator>
        <operator pos:start="97:9" pos:end="97:9">(</operator><operator pos:start="97:10" pos:end="97:10">!</operator><name pos:start="97:11" pos:end="97:30"><name pos:start="97:11" pos:end="97:15">avctx</name><operator pos:start="97:16" pos:end="97:17">-&gt;</operator><name pos:start="97:18" pos:end="97:26">time_base</name><operator pos:start="97:27" pos:end="97:27">.</operator><name pos:start="97:28" pos:end="97:30">num</name></name> <operator pos:start="97:32" pos:end="97:33">||</operator> <operator pos:start="97:35" pos:end="97:35">!</operator><name pos:start="97:36" pos:end="97:55"><name pos:start="97:36" pos:end="97:40">avctx</name><operator pos:start="97:41" pos:end="97:42">-&gt;</operator><name pos:start="97:43" pos:end="97:51">time_base</name><operator pos:start="97:52" pos:end="97:52">.</operator><name pos:start="97:53" pos:end="97:55">den</name></name><operator pos:start="97:56" pos:end="97:56">)</operator></expr>)</condition> <block pos:start="97:59" pos:end="222:13">{<block_content pos:start="98:9" pos:end="222:13">
        <expr_stmt pos:start="98:9" pos:end="98:33"><expr pos:start="98:9" pos:end="98:32"><name pos:start="98:9" pos:end="98:28"><name pos:start="98:9" pos:end="98:13">avctx</name><operator pos:start="98:14" pos:end="98:15">-&gt;</operator><name pos:start="98:16" pos:end="98:24">time_base</name><operator pos:start="98:25" pos:end="98:25">.</operator><name pos:start="98:26" pos:end="98:28">num</name></name> <operator pos:start="98:30" pos:end="98:30">=</operator> <literal type="number" pos:start="98:32" pos:end="98:32">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="99:9" pos:end="99:50"><expr pos:start="99:9" pos:end="99:49"><name pos:start="99:9" pos:end="99:28"><name pos:start="99:9" pos:end="99:13">avctx</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:24">time_base</name><operator pos:start="99:25" pos:end="99:25">.</operator><name pos:start="99:26" pos:end="99:28">den</name></name> <operator pos:start="99:30" pos:end="99:30">=</operator> <name pos:start="99:32" pos:end="99:49"><name pos:start="99:32" pos:end="99:36">avctx</name><operator pos:start="99:37" pos:end="99:38">-&gt;</operator><name pos:start="99:39" pos:end="99:49">sample_rate</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="100:5" pos:end="222:13"><if pos:start="100:5" pos:end="222:13">if <condition pos:start="100:8" pos:end="100:21">(<expr pos:start="100:9" pos:end="100:20"><name pos:start="100:9" pos:end="100:20">HAVE_THREADS</name></expr>)</condition> <block pos:start="100:23" pos:end="222:13">{<block_content pos:start="101:9" pos:end="222:13">
        <expr_stmt pos:start="101:9" pos:end="101:36"><expr pos:start="101:9" pos:end="101:35"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <call pos:start="101:15" pos:end="101:35"><name pos:start="101:15" pos:end="101:28">ff_thread_init</name><argument_list pos:start="101:29" pos:end="101:35">(<argument pos:start="101:30" pos:end="101:34"><expr pos:start="101:30" pos:end="101:34"><name pos:start="101:30" pos:end="101:34">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="102:9" pos:end="222:13"><if pos:start="102:9" pos:end="222:13">if <condition pos:start="102:12" pos:end="102:20">(<expr pos:start="102:13" pos:end="102:19"><name pos:start="102:13" pos:end="102:15">ret</name> <operator pos:start="102:17" pos:end="102:17">&lt;</operator> <literal type="number" pos:start="102:19" pos:end="102:19">0</literal></expr>)</condition> <block pos:start="102:22" pos:end="222:13">{<block_content pos:start="103:5" pos:end="222:13">
    <if_stmt pos:start="103:5" pos:end="104:32"><if pos:start="103:5" pos:end="104:32">if <condition pos:start="103:8" pos:end="103:76">(<expr pos:start="103:9" pos:end="103:75"><operator pos:start="103:9" pos:end="103:9">!</operator><name pos:start="103:10" pos:end="103:21">HAVE_THREADS</name> <operator pos:start="103:23" pos:end="103:24">&amp;&amp;</operator> <operator pos:start="103:26" pos:end="103:26">!</operator><operator pos:start="103:27" pos:end="103:27">(</operator><name pos:start="103:28" pos:end="103:46"><name pos:start="103:28" pos:end="103:32">codec</name><operator pos:start="103:33" pos:end="103:34">-&gt;</operator><name pos:start="103:35" pos:end="103:46">capabilities</name></name> <operator pos:start="103:48" pos:end="103:48">&amp;</operator> <name pos:start="103:50" pos:end="103:74">AV_CODEC_CAP_AUTO_THREADS</name><operator pos:start="103:75" pos:end="103:75">)</operator></expr>)</condition><block type="pseudo" pos:start="104:9" pos:end="104:32"><block_content pos:start="104:9" pos:end="104:32">
        <expr_stmt pos:start="104:9" pos:end="104:32"><expr pos:start="104:9" pos:end="104:31"><name pos:start="104:9" pos:end="104:27"><name pos:start="104:9" pos:end="104:13">avctx</name><operator pos:start="104:14" pos:end="104:15">-&gt;</operator><name pos:start="104:16" pos:end="104:27">thread_count</name></name> <operator pos:start="104:29" pos:end="104:29">=</operator> <literal type="number" pos:start="104:31" pos:end="104:31">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="105:5" pos:end="222:13"><if pos:start="105:5" pos:end="222:13">if <condition pos:start="105:8" pos:end="105:42">(<expr pos:start="105:9" pos:end="105:41"><call pos:start="105:9" pos:end="105:41"><name pos:start="105:9" pos:end="105:27">av_codec_is_encoder</name><argument_list pos:start="105:28" pos:end="105:41">(<argument pos:start="105:29" pos:end="105:40"><expr pos:start="105:29" pos:end="105:40"><name pos:start="105:29" pos:end="105:40"><name pos:start="105:29" pos:end="105:33">avctx</name><operator pos:start="105:34" pos:end="105:35">-&gt;</operator><name pos:start="105:36" pos:end="105:40">codec</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:44" pos:end="222:13">{<block_content pos:start="106:9" pos:end="222:13">
        <decl_stmt pos:start="106:9" pos:end="108:0"><decl pos:start="106:9" pos:end="106:13"><type pos:start="106:9" pos:end="106:11"><name pos:start="106:9" pos:end="106:11">int</name></type> <name pos:start="106:13" pos:end="106:13">i</name></decl>;</decl_stmt>
<cpp:if pos:start="107:1" pos:end="107:22">#<cpp:directive pos:start="107:2" pos:end="107:3">if</cpp:directive> <expr pos:start="107:5" pos:end="107:22"><name pos:start="107:5" pos:end="107:22">FF_API_CODED_FRAME</name></expr></cpp:if>
<decl_stmt pos:start="108:1" pos:end="109:46"><decl pos:start="108:1" pos:end="109:45"><type pos:start="108:1" pos:end="108:31"><name pos:start="108:1" pos:end="108:31">FF_DISABLE_DEPRECATION_WARNINGS</name></type>
        <name pos:start="109:9" pos:end="109:26"><name pos:start="109:9" pos:end="109:13">avctx</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:26">coded_frame</name></name> <init pos:start="109:28" pos:end="109:45">= <expr pos:start="109:30" pos:end="109:45"><call pos:start="109:30" pos:end="109:45"><name pos:start="109:30" pos:end="109:43">av_frame_alloc</name><argument_list pos:start="109:44" pos:end="109:45">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="110:9" pos:end="222:13"><if pos:start="110:9" pos:end="222:13">if <condition pos:start="110:12" pos:end="110:32">(<expr pos:start="110:13" pos:end="110:31"><operator pos:start="110:13" pos:end="110:13">!</operator><name pos:start="110:14" pos:end="110:31"><name pos:start="110:14" pos:end="110:18">avctx</name><operator pos:start="110:19" pos:end="110:20">-&gt;</operator><name pos:start="110:21" pos:end="110:31">coded_frame</name></name></expr>)</condition> <block pos:start="110:34" pos:end="222:13">{<block_content pos:start="111:13" pos:end="222:13">
            <expr_stmt pos:start="111:13" pos:end="111:34"><expr pos:start="111:13" pos:end="111:33"><name pos:start="111:13" pos:end="111:15">ret</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <call pos:start="111:19" pos:end="111:33"><name pos:start="111:19" pos:end="111:25">AVERROR</name><argument_list pos:start="111:26" pos:end="111:33">(<argument pos:start="111:27" pos:end="111:32"><expr pos:start="111:27" pos:end="111:32"><name pos:start="111:27" pos:end="111:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro pos:start="112:1" pos:end="114:0"><name pos:start="112:1" pos:end="114:0">FF_ENABLE_DEPRECATION_WARNINGS</name></macro>
<cpp:endif pos:start="113:1" pos:end="113:6">#<cpp:directive pos:start="113:2" pos:end="113:6">endif</cpp:directive></cpp:endif>
        <if_stmt pos:start="114:9" pos:end="222:13"><if pos:start="114:9" pos:end="222:13">if <condition pos:start="114:12" pos:end="114:38">(<expr pos:start="114:13" pos:end="114:37"><name pos:start="114:13" pos:end="114:37"><name pos:start="114:13" pos:end="114:17">avctx</name><operator pos:start="114:18" pos:end="114:19">-&gt;</operator><name pos:start="114:20" pos:end="114:24">codec</name><operator pos:start="114:25" pos:end="114:26">-&gt;</operator><name pos:start="114:27" pos:end="114:37">sample_fmts</name></name></expr>)</condition> <block pos:start="114:40" pos:end="222:13">{<block_content pos:start="115:13" pos:end="222:13">
            <for pos:start="115:13" pos:end="222:13">for <control pos:start="115:17" pos:end="115:80">(<init pos:start="115:18" pos:end="115:23"><expr pos:start="115:18" pos:end="115:22"><name pos:start="115:18" pos:end="115:18">i</name> <operator pos:start="115:20" pos:end="115:20">=</operator> <literal type="number" pos:start="115:22" pos:end="115:22">0</literal></expr>;</init> <condition pos:start="115:25" pos:end="115:75"><expr pos:start="115:25" pos:end="115:74"><name pos:start="115:25" pos:end="115:52"><name pos:start="115:25" pos:end="115:29">avctx</name><operator pos:start="115:30" pos:end="115:31">-&gt;</operator><name pos:start="115:32" pos:end="115:36">codec</name><operator pos:start="115:37" pos:end="115:38">-&gt;</operator><name pos:start="115:39" pos:end="115:49">sample_fmts</name><index pos:start="115:50" pos:end="115:52">[<expr pos:start="115:51" pos:end="115:51"><name pos:start="115:51" pos:end="115:51">i</name></expr>]</index></name> <operator pos:start="115:54" pos:end="115:55">!=</operator> <name pos:start="115:57" pos:end="115:74">AV_SAMPLE_FMT_NONE</name></expr>;</condition> <incr pos:start="115:77" pos:end="115:79"><expr pos:start="115:77" pos:end="115:79"><name pos:start="115:77" pos:end="115:77">i</name><operator pos:start="115:78" pos:end="115:79">++</operator></expr></incr>)</control> <block pos:start="115:82" pos:end="222:13">{<block_content pos:start="116:17" pos:end="222:13">
                <if_stmt pos:start="116:17" pos:end="117:26"><if pos:start="116:17" pos:end="117:26">if <condition pos:start="116:20" pos:end="116:70">(<expr pos:start="116:21" pos:end="116:69"><name pos:start="116:21" pos:end="116:37"><name pos:start="116:21" pos:end="116:25">avctx</name><operator pos:start="116:26" pos:end="116:27">-&gt;</operator><name pos:start="116:28" pos:end="116:37">sample_fmt</name></name> <operator pos:start="116:39" pos:end="116:40">==</operator> <name pos:start="116:42" pos:end="116:69"><name pos:start="116:42" pos:end="116:46">avctx</name><operator pos:start="116:47" pos:end="116:48">-&gt;</operator><name pos:start="116:49" pos:end="116:53">codec</name><operator pos:start="116:54" pos:end="116:55">-&gt;</operator><name pos:start="116:56" pos:end="116:66">sample_fmts</name><index pos:start="116:67" pos:end="116:69">[<expr pos:start="116:68" pos:end="116:68"><name pos:start="116:68" pos:end="116:68">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="117:21" pos:end="117:26"><block_content pos:start="117:21" pos:end="117:26">
                    <break pos:start="117:21" pos:end="117:26">break;</break></block_content></block></if></if_stmt>
                <if_stmt pos:start="118:17" pos:end="222:13"><if pos:start="118:17" pos:end="222:13">if <condition pos:start="118:20" pos:end="120:75">(<expr pos:start="118:21" pos:end="120:74"><name pos:start="118:21" pos:end="118:35"><name pos:start="118:21" pos:end="118:25">avctx</name><operator pos:start="118:26" pos:end="118:27">-&gt;</operator><name pos:start="118:28" pos:end="118:35">channels</name></name> <operator pos:start="118:37" pos:end="118:38">==</operator> <literal type="number" pos:start="118:40" pos:end="118:40">1</literal> <operator pos:start="118:42" pos:end="118:43">&amp;&amp;</operator>
                    <call pos:start="119:21" pos:end="119:63"><name pos:start="119:21" pos:end="119:44">av_get_planar_sample_fmt</name><argument_list pos:start="119:45" pos:end="119:63">(<argument pos:start="119:46" pos:end="119:62"><expr pos:start="119:46" pos:end="119:62"><name pos:start="119:46" pos:end="119:62"><name pos:start="119:46" pos:end="119:50">avctx</name><operator pos:start="119:51" pos:end="119:52">-&gt;</operator><name pos:start="119:53" pos:end="119:62">sample_fmt</name></name></expr></argument>)</argument_list></call> <operator pos:start="119:65" pos:end="119:66">==</operator>
                    <call pos:start="120:21" pos:end="120:74"><name pos:start="120:21" pos:end="120:44">av_get_planar_sample_fmt</name><argument_list pos:start="120:45" pos:end="120:74">(<argument pos:start="120:46" pos:end="120:73"><expr pos:start="120:46" pos:end="120:73"><name pos:start="120:46" pos:end="120:73"><name pos:start="120:46" pos:end="120:50">avctx</name><operator pos:start="120:51" pos:end="120:52">-&gt;</operator><name pos:start="120:53" pos:end="120:57">codec</name><operator pos:start="120:58" pos:end="120:59">-&gt;</operator><name pos:start="120:60" pos:end="120:70">sample_fmts</name><index pos:start="120:71" pos:end="120:73">[<expr pos:start="120:72" pos:end="120:72"><name pos:start="120:72" pos:end="120:72">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="120:77" pos:end="222:13">{<block_content pos:start="121:21" pos:end="222:13">
                    <expr_stmt pos:start="121:21" pos:end="121:69"><expr pos:start="121:21" pos:end="121:68"><name pos:start="121:21" pos:end="121:37"><name pos:start="121:21" pos:end="121:25">avctx</name><operator pos:start="121:26" pos:end="121:27">-&gt;</operator><name pos:start="121:28" pos:end="121:37">sample_fmt</name></name> <operator pos:start="121:39" pos:end="121:39">=</operator> <name pos:start="121:41" pos:end="121:68"><name pos:start="121:41" pos:end="121:45">avctx</name><operator pos:start="121:46" pos:end="121:47">-&gt;</operator><name pos:start="121:48" pos:end="121:52">codec</name><operator pos:start="121:53" pos:end="121:54">-&gt;</operator><name pos:start="121:55" pos:end="121:65">sample_fmts</name><index pos:start="121:66" pos:end="121:68">[<expr pos:start="121:67" pos:end="121:67"><name pos:start="121:67" pos:end="121:67">i</name></expr>]</index></name></expr>;</expr_stmt>
                    <break pos:start="122:21" pos:end="122:26">break;</break>
            <if_stmt pos:start="123:13" pos:end="222:13"><if pos:start="123:13" pos:end="222:13">if <condition pos:start="123:16" pos:end="123:67">(<expr pos:start="123:17" pos:end="123:66"><name pos:start="123:17" pos:end="123:44"><name pos:start="123:17" pos:end="123:21">avctx</name><operator pos:start="123:22" pos:end="123:23">-&gt;</operator><name pos:start="123:24" pos:end="123:28">codec</name><operator pos:start="123:29" pos:end="123:30">-&gt;</operator><name pos:start="123:31" pos:end="123:41">sample_fmts</name><index pos:start="123:42" pos:end="123:44">[<expr pos:start="123:43" pos:end="123:43"><name pos:start="123:43" pos:end="123:43">i</name></expr>]</index></name> <operator pos:start="123:46" pos:end="123:47">==</operator> <name pos:start="123:49" pos:end="123:66">AV_SAMPLE_FMT_NONE</name></expr>)</condition> <block pos:start="123:69" pos:end="222:13">{<block_content pos:start="124:17" pos:end="222:13">
                <expr_stmt pos:start="124:17" pos:end="124:88"><expr pos:start="124:17" pos:end="124:87"><call pos:start="124:17" pos:end="124:87"><name pos:start="124:17" pos:end="124:22">av_log</name><argument_list pos:start="124:23" pos:end="124:87">(<argument pos:start="124:24" pos:end="124:28"><expr pos:start="124:24" pos:end="124:28"><name pos:start="124:24" pos:end="124:28">avctx</name></expr></argument>, <argument pos:start="124:31" pos:end="124:42"><expr pos:start="124:31" pos:end="124:42"><name pos:start="124:31" pos:end="124:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="124:45" pos:end="124:86"><expr pos:start="124:45" pos:end="124:86"><literal type="string" pos:start="124:45" pos:end="124:86">"Specified sample_fmt is not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="125:9" pos:end="222:13"><if pos:start="125:9" pos:end="222:13">if <condition pos:start="125:12" pos:end="125:35">(<expr pos:start="125:13" pos:end="125:34"><name pos:start="125:13" pos:end="125:34"><name pos:start="125:13" pos:end="125:17">avctx</name><operator pos:start="125:18" pos:end="125:19">-&gt;</operator><name pos:start="125:20" pos:end="125:24">codec</name><operator pos:start="125:25" pos:end="125:26">-&gt;</operator><name pos:start="125:27" pos:end="125:34">pix_fmts</name></name></expr>)</condition> <block pos:start="125:37" pos:end="222:13">{<block_content pos:start="126:13" pos:end="222:13">
            <for pos:start="126:13" pos:end="128:26">for <control pos:start="126:17" pos:end="126:74">(<init pos:start="126:18" pos:end="126:23"><expr pos:start="126:18" pos:end="126:22"><name pos:start="126:18" pos:end="126:18">i</name> <operator pos:start="126:20" pos:end="126:20">=</operator> <literal type="number" pos:start="126:22" pos:end="126:22">0</literal></expr>;</init> <condition pos:start="126:25" pos:end="126:69"><expr pos:start="126:25" pos:end="126:68"><name pos:start="126:25" pos:end="126:49"><name pos:start="126:25" pos:end="126:29">avctx</name><operator pos:start="126:30" pos:end="126:31">-&gt;</operator><name pos:start="126:32" pos:end="126:36">codec</name><operator pos:start="126:37" pos:end="126:38">-&gt;</operator><name pos:start="126:39" pos:end="126:46">pix_fmts</name><index pos:start="126:47" pos:end="126:49">[<expr pos:start="126:48" pos:end="126:48"><name pos:start="126:48" pos:end="126:48">i</name></expr>]</index></name> <operator pos:start="126:51" pos:end="126:52">!=</operator> <name pos:start="126:54" pos:end="126:68">AV_PIX_FMT_NONE</name></expr>;</condition> <incr pos:start="126:71" pos:end="126:73"><expr pos:start="126:71" pos:end="126:73"><name pos:start="126:71" pos:end="126:71">i</name><operator pos:start="126:72" pos:end="126:73">++</operator></expr></incr>)</control><block type="pseudo" pos:start="127:17" pos:end="128:26"><block_content pos:start="127:17" pos:end="128:26">
                <if_stmt pos:start="127:17" pos:end="128:26"><if pos:start="127:17" pos:end="128:26">if <condition pos:start="127:20" pos:end="127:64">(<expr pos:start="127:21" pos:end="127:63"><name pos:start="127:21" pos:end="127:34"><name pos:start="127:21" pos:end="127:25">avctx</name><operator pos:start="127:26" pos:end="127:27">-&gt;</operator><name pos:start="127:28" pos:end="127:34">pix_fmt</name></name> <operator pos:start="127:36" pos:end="127:37">==</operator> <name pos:start="127:39" pos:end="127:63"><name pos:start="127:39" pos:end="127:43">avctx</name><operator pos:start="127:44" pos:end="127:45">-&gt;</operator><name pos:start="127:46" pos:end="127:50">codec</name><operator pos:start="127:51" pos:end="127:52">-&gt;</operator><name pos:start="127:53" pos:end="127:60">pix_fmts</name><index pos:start="127:61" pos:end="127:63">[<expr pos:start="127:62" pos:end="127:62"><name pos:start="127:62" pos:end="127:62">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="128:21" pos:end="128:26"><block_content pos:start="128:21" pos:end="128:26">
                    <break pos:start="128:21" pos:end="128:26">break;</break></block_content></block></if></if_stmt></block_content></block></for>
            <if_stmt pos:start="129:13" pos:end="222:13"><if pos:start="129:13" pos:end="222:13">if <condition pos:start="129:16" pos:end="129:61">(<expr pos:start="129:17" pos:end="129:60"><name pos:start="129:17" pos:end="129:41"><name pos:start="129:17" pos:end="129:21">avctx</name><operator pos:start="129:22" pos:end="129:23">-&gt;</operator><name pos:start="129:24" pos:end="129:28">codec</name><operator pos:start="129:29" pos:end="129:30">-&gt;</operator><name pos:start="129:31" pos:end="129:38">pix_fmts</name><index pos:start="129:39" pos:end="129:41">[<expr pos:start="129:40" pos:end="129:40"><name pos:start="129:40" pos:end="129:40">i</name></expr>]</index></name> <operator pos:start="129:43" pos:end="129:44">==</operator> <name pos:start="129:46" pos:end="129:60">AV_PIX_FMT_NONE</name></expr>)</condition> <block pos:start="129:63" pos:end="222:13">{<block_content pos:start="130:17" pos:end="222:13">
                <expr_stmt pos:start="130:17" pos:end="130:84"><expr pos:start="130:17" pos:end="130:83"><call pos:start="130:17" pos:end="130:83"><name pos:start="130:17" pos:end="130:22">av_log</name><argument_list pos:start="130:23" pos:end="130:83">(<argument pos:start="130:24" pos:end="130:28"><expr pos:start="130:24" pos:end="130:28"><name pos:start="130:24" pos:end="130:28">avctx</name></expr></argument>, <argument pos:start="130:31" pos:end="130:42"><expr pos:start="130:31" pos:end="130:42"><name pos:start="130:31" pos:end="130:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="130:45" pos:end="130:82"><expr pos:start="130:45" pos:end="130:82"><literal type="string" pos:start="130:45" pos:end="130:82">"Specified pix_fmt is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="131:13" pos:end="135:54"><if pos:start="131:13" pos:end="135:54">if <condition pos:start="131:16" pos:end="134:65">(<expr pos:start="131:17" pos:end="134:64"><name pos:start="131:17" pos:end="131:41"><name pos:start="131:17" pos:end="131:21">avctx</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:28">codec</name><operator pos:start="131:29" pos:end="131:30">-&gt;</operator><name pos:start="131:31" pos:end="131:38">pix_fmts</name><index pos:start="131:39" pos:end="131:41">[<expr pos:start="131:40" pos:end="131:40"><name pos:start="131:40" pos:end="131:40">i</name></expr>]</index></name> <operator pos:start="131:43" pos:end="131:44">==</operator> <name pos:start="131:46" pos:end="131:64">AV_PIX_FMT_YUVJ420P</name> <operator pos:start="131:66" pos:end="131:67">||</operator>
                <name pos:start="132:17" pos:end="132:41"><name pos:start="132:17" pos:end="132:21">avctx</name><operator pos:start="132:22" pos:end="132:23">-&gt;</operator><name pos:start="132:24" pos:end="132:28">codec</name><operator pos:start="132:29" pos:end="132:30">-&gt;</operator><name pos:start="132:31" pos:end="132:38">pix_fmts</name><index pos:start="132:39" pos:end="132:41">[<expr pos:start="132:40" pos:end="132:40"><name pos:start="132:40" pos:end="132:40">i</name></expr>]</index></name> <operator pos:start="132:43" pos:end="132:44">==</operator> <name pos:start="132:46" pos:end="132:64">AV_PIX_FMT_YUVJ422P</name> <operator pos:start="132:66" pos:end="132:67">||</operator>
                <name pos:start="133:17" pos:end="133:41"><name pos:start="133:17" pos:end="133:21">avctx</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:28">codec</name><operator pos:start="133:29" pos:end="133:30">-&gt;</operator><name pos:start="133:31" pos:end="133:38">pix_fmts</name><index pos:start="133:39" pos:end="133:41">[<expr pos:start="133:40" pos:end="133:40"><name pos:start="133:40" pos:end="133:40">i</name></expr>]</index></name> <operator pos:start="133:43" pos:end="133:44">==</operator> <name pos:start="133:46" pos:end="133:64">AV_PIX_FMT_YUVJ440P</name> <operator pos:start="133:66" pos:end="133:67">||</operator>
                <name pos:start="134:17" pos:end="134:41"><name pos:start="134:17" pos:end="134:21">avctx</name><operator pos:start="134:22" pos:end="134:23">-&gt;</operator><name pos:start="134:24" pos:end="134:28">codec</name><operator pos:start="134:29" pos:end="134:30">-&gt;</operator><name pos:start="134:31" pos:end="134:38">pix_fmts</name><index pos:start="134:39" pos:end="134:41">[<expr pos:start="134:40" pos:end="134:40"><name pos:start="134:40" pos:end="134:40">i</name></expr>]</index></name> <operator pos:start="134:43" pos:end="134:44">==</operator> <name pos:start="134:46" pos:end="134:64">AV_PIX_FMT_YUVJ444P</name></expr>)</condition><block type="pseudo" pos:start="135:17" pos:end="135:54"><block_content pos:start="135:17" pos:end="135:54">
                <expr_stmt pos:start="135:17" pos:end="135:54"><expr pos:start="135:17" pos:end="135:53"><name pos:start="135:17" pos:end="135:34"><name pos:start="135:17" pos:end="135:21">avctx</name><operator pos:start="135:22" pos:end="135:23">-&gt;</operator><name pos:start="135:24" pos:end="135:34">color_range</name></name> <operator pos:start="135:36" pos:end="135:36">=</operator> <name pos:start="135:38" pos:end="135:53">AVCOL_RANGE_JPEG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="136:9" pos:end="222:13"><if pos:start="136:9" pos:end="222:13">if <condition pos:start="136:12" pos:end="136:48">(<expr pos:start="136:13" pos:end="136:47"><name pos:start="136:13" pos:end="136:47"><name pos:start="136:13" pos:end="136:17">avctx</name><operator pos:start="136:18" pos:end="136:19">-&gt;</operator><name pos:start="136:20" pos:end="136:24">codec</name><operator pos:start="136:25" pos:end="136:26">-&gt;</operator><name pos:start="136:27" pos:end="136:47">supported_samplerates</name></name></expr>)</condition> <block pos:start="136:50" pos:end="222:13">{<block_content pos:start="137:13" pos:end="222:13">
            <for pos:start="137:13" pos:end="139:26">for <control pos:start="137:17" pos:end="137:73">(<init pos:start="137:18" pos:end="137:23"><expr pos:start="137:18" pos:end="137:22"><name pos:start="137:18" pos:end="137:18">i</name> <operator pos:start="137:20" pos:end="137:20">=</operator> <literal type="number" pos:start="137:22" pos:end="137:22">0</literal></expr>;</init> <condition pos:start="137:25" pos:end="137:68"><expr pos:start="137:25" pos:end="137:67"><name pos:start="137:25" pos:end="137:62"><name pos:start="137:25" pos:end="137:29">avctx</name><operator pos:start="137:30" pos:end="137:31">-&gt;</operator><name pos:start="137:32" pos:end="137:36">codec</name><operator pos:start="137:37" pos:end="137:38">-&gt;</operator><name pos:start="137:39" pos:end="137:59">supported_samplerates</name><index pos:start="137:60" pos:end="137:62">[<expr pos:start="137:61" pos:end="137:61"><name pos:start="137:61" pos:end="137:61">i</name></expr>]</index></name> <operator pos:start="137:64" pos:end="137:65">!=</operator> <literal type="number" pos:start="137:67" pos:end="137:67">0</literal></expr>;</condition> <incr pos:start="137:70" pos:end="137:72"><expr pos:start="137:70" pos:end="137:72"><name pos:start="137:70" pos:end="137:70">i</name><operator pos:start="137:71" pos:end="137:72">++</operator></expr></incr>)</control><block type="pseudo" pos:start="138:17" pos:end="139:26"><block_content pos:start="138:17" pos:end="139:26">
                <if_stmt pos:start="138:17" pos:end="139:26"><if pos:start="138:17" pos:end="139:26">if <condition pos:start="138:20" pos:end="138:81">(<expr pos:start="138:21" pos:end="138:80"><name pos:start="138:21" pos:end="138:38"><name pos:start="138:21" pos:end="138:25">avctx</name><operator pos:start="138:26" pos:end="138:27">-&gt;</operator><name pos:start="138:28" pos:end="138:38">sample_rate</name></name> <operator pos:start="138:40" pos:end="138:41">==</operator> <name pos:start="138:43" pos:end="138:80"><name pos:start="138:43" pos:end="138:47">avctx</name><operator pos:start="138:48" pos:end="138:49">-&gt;</operator><name pos:start="138:50" pos:end="138:54">codec</name><operator pos:start="138:55" pos:end="138:56">-&gt;</operator><name pos:start="138:57" pos:end="138:77">supported_samplerates</name><index pos:start="138:78" pos:end="138:80">[<expr pos:start="138:79" pos:end="138:79"><name pos:start="138:79" pos:end="138:79">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="139:21" pos:end="139:26"><block_content pos:start="139:21" pos:end="139:26">
                    <break pos:start="139:21" pos:end="139:26">break;</break></block_content></block></if></if_stmt></block_content></block></for>
            <if_stmt pos:start="140:13" pos:end="222:13"><if pos:start="140:13" pos:end="222:13">if <condition pos:start="140:16" pos:end="140:60">(<expr pos:start="140:17" pos:end="140:59"><name pos:start="140:17" pos:end="140:54"><name pos:start="140:17" pos:end="140:21">avctx</name><operator pos:start="140:22" pos:end="140:23">-&gt;</operator><name pos:start="140:24" pos:end="140:28">codec</name><operator pos:start="140:29" pos:end="140:30">-&gt;</operator><name pos:start="140:31" pos:end="140:51">supported_samplerates</name><index pos:start="140:52" pos:end="140:54">[<expr pos:start="140:53" pos:end="140:53"><name pos:start="140:53" pos:end="140:53">i</name></expr>]</index></name> <operator pos:start="140:56" pos:end="140:57">==</operator> <literal type="number" pos:start="140:59" pos:end="140:59">0</literal></expr>)</condition> <block pos:start="140:62" pos:end="222:13">{<block_content pos:start="141:17" pos:end="222:13">
                <expr_stmt pos:start="141:17" pos:end="141:88"><expr pos:start="141:17" pos:end="141:87"><call pos:start="141:17" pos:end="141:87"><name pos:start="141:17" pos:end="141:22">av_log</name><argument_list pos:start="141:23" pos:end="141:87">(<argument pos:start="141:24" pos:end="141:28"><expr pos:start="141:24" pos:end="141:28"><name pos:start="141:24" pos:end="141:28">avctx</name></expr></argument>, <argument pos:start="141:31" pos:end="141:42"><expr pos:start="141:31" pos:end="141:42"><name pos:start="141:31" pos:end="141:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="141:45" pos:end="141:86"><expr pos:start="141:45" pos:end="141:86"><literal type="string" pos:start="141:45" pos:end="141:86">"Specified sample_rate is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="142:9" pos:end="222:13"><if pos:start="142:9" pos:end="222:13">if <condition pos:start="142:12" pos:end="142:42">(<expr pos:start="142:13" pos:end="142:41"><name pos:start="142:13" pos:end="142:41"><name pos:start="142:13" pos:end="142:17">avctx</name><operator pos:start="142:18" pos:end="142:19">-&gt;</operator><name pos:start="142:20" pos:end="142:24">codec</name><operator pos:start="142:25" pos:end="142:26">-&gt;</operator><name pos:start="142:27" pos:end="142:41">channel_layouts</name></name></expr>)</condition> <block pos:start="142:44" pos:end="222:13">{<block_content pos:start="143:13" pos:end="222:13">
            <if_stmt pos:start="143:13" pos:end="222:13"><if pos:start="143:13" pos:end="145:13">if <condition pos:start="143:16" pos:end="143:39">(<expr pos:start="143:17" pos:end="143:38"><operator pos:start="143:17" pos:end="143:17">!</operator><name pos:start="143:18" pos:end="143:38"><name pos:start="143:18" pos:end="143:22">avctx</name><operator pos:start="143:23" pos:end="143:24">-&gt;</operator><name pos:start="143:25" pos:end="143:38">channel_layout</name></name></expr>)</condition> <block pos:start="143:41" pos:end="145:13">{<block_content pos:start="144:17" pos:end="144:80">
                <expr_stmt pos:start="144:17" pos:end="144:80"><expr pos:start="144:17" pos:end="144:79"><call pos:start="144:17" pos:end="144:79"><name pos:start="144:17" pos:end="144:22">av_log</name><argument_list pos:start="144:23" pos:end="144:79">(<argument pos:start="144:24" pos:end="144:28"><expr pos:start="144:24" pos:end="144:28"><name pos:start="144:24" pos:end="144:28">avctx</name></expr></argument>, <argument pos:start="144:31" pos:end="144:44"><expr pos:start="144:31" pos:end="144:44"><name pos:start="144:31" pos:end="144:44">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="144:47" pos:end="144:78"><expr pos:start="144:47" pos:end="144:78"><literal type="string" pos:start="144:47" pos:end="144:78">"channel_layout not specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="145:15" pos:end="222:13">else <block pos:start="145:20" pos:end="222:13">{<block_content pos:start="146:17" pos:end="222:13">
                <for pos:start="146:17" pos:end="148:30">for <control pos:start="146:21" pos:end="146:71">(<init pos:start="146:22" pos:end="146:27"><expr pos:start="146:22" pos:end="146:26"><name pos:start="146:22" pos:end="146:22">i</name> <operator pos:start="146:24" pos:end="146:24">=</operator> <literal type="number" pos:start="146:26" pos:end="146:26">0</literal></expr>;</init> <condition pos:start="146:29" pos:end="146:66"><expr pos:start="146:29" pos:end="146:65"><name pos:start="146:29" pos:end="146:60"><name pos:start="146:29" pos:end="146:33">avctx</name><operator pos:start="146:34" pos:end="146:35">-&gt;</operator><name pos:start="146:36" pos:end="146:40">codec</name><operator pos:start="146:41" pos:end="146:42">-&gt;</operator><name pos:start="146:43" pos:end="146:57">channel_layouts</name><index pos:start="146:58" pos:end="146:60">[<expr pos:start="146:59" pos:end="146:59"><name pos:start="146:59" pos:end="146:59">i</name></expr>]</index></name> <operator pos:start="146:62" pos:end="146:63">!=</operator> <literal type="number" pos:start="146:65" pos:end="146:65">0</literal></expr>;</condition> <incr pos:start="146:68" pos:end="146:70"><expr pos:start="146:68" pos:end="146:70"><name pos:start="146:68" pos:end="146:68">i</name><operator pos:start="146:69" pos:end="146:70">++</operator></expr></incr>)</control><block type="pseudo" pos:start="147:21" pos:end="148:30"><block_content pos:start="147:21" pos:end="148:30">
                    <if_stmt pos:start="147:21" pos:end="148:30"><if pos:start="147:21" pos:end="148:30">if <condition pos:start="147:24" pos:end="147:82">(<expr pos:start="147:25" pos:end="147:81"><name pos:start="147:25" pos:end="147:45"><name pos:start="147:25" pos:end="147:29">avctx</name><operator pos:start="147:30" pos:end="147:31">-&gt;</operator><name pos:start="147:32" pos:end="147:45">channel_layout</name></name> <operator pos:start="147:47" pos:end="147:48">==</operator> <name pos:start="147:50" pos:end="147:81"><name pos:start="147:50" pos:end="147:54">avctx</name><operator pos:start="147:55" pos:end="147:56">-&gt;</operator><name pos:start="147:57" pos:end="147:61">codec</name><operator pos:start="147:62" pos:end="147:63">-&gt;</operator><name pos:start="147:64" pos:end="147:78">channel_layouts</name><index pos:start="147:79" pos:end="147:81">[<expr pos:start="147:80" pos:end="147:80"><name pos:start="147:80" pos:end="147:80">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="148:25" pos:end="148:30"><block_content pos:start="148:25" pos:end="148:30">
                        <break pos:start="148:25" pos:end="148:30">break;</break></block_content></block></if></if_stmt></block_content></block></for>
                <if_stmt pos:start="149:17" pos:end="222:13"><if pos:start="149:17" pos:end="222:13">if <condition pos:start="149:20" pos:end="149:58">(<expr pos:start="149:21" pos:end="149:57"><name pos:start="149:21" pos:end="149:52"><name pos:start="149:21" pos:end="149:25">avctx</name><operator pos:start="149:26" pos:end="149:27">-&gt;</operator><name pos:start="149:28" pos:end="149:32">codec</name><operator pos:start="149:33" pos:end="149:34">-&gt;</operator><name pos:start="149:35" pos:end="149:49">channel_layouts</name><index pos:start="149:50" pos:end="149:52">[<expr pos:start="149:51" pos:end="149:51"><name pos:start="149:51" pos:end="149:51">i</name></expr>]</index></name> <operator pos:start="149:54" pos:end="149:55">==</operator> <literal type="number" pos:start="149:57" pos:end="149:57">0</literal></expr>)</condition> <block pos:start="149:60" pos:end="222:13">{<block_content pos:start="150:21" pos:end="222:13">
                    <expr_stmt pos:start="150:21" pos:end="150:95"><expr pos:start="150:21" pos:end="150:94"><call pos:start="150:21" pos:end="150:94"><name pos:start="150:21" pos:end="150:26">av_log</name><argument_list pos:start="150:27" pos:end="150:94">(<argument pos:start="150:28" pos:end="150:32"><expr pos:start="150:28" pos:end="150:32"><name pos:start="150:28" pos:end="150:32">avctx</name></expr></argument>, <argument pos:start="150:35" pos:end="150:46"><expr pos:start="150:35" pos:end="150:46"><name pos:start="150:35" pos:end="150:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="150:49" pos:end="150:93"><expr pos:start="150:49" pos:end="150:93"><literal type="string" pos:start="150:49" pos:end="150:93">"Specified channel_layout is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="151:9" pos:end="222:13"><if pos:start="151:9" pos:end="222:13">if <condition pos:start="151:12" pos:end="151:53">(<expr pos:start="151:13" pos:end="151:52"><name pos:start="151:13" pos:end="151:33"><name pos:start="151:13" pos:end="151:17">avctx</name><operator pos:start="151:18" pos:end="151:19">-&gt;</operator><name pos:start="151:20" pos:end="151:33">channel_layout</name></name> <operator pos:start="151:35" pos:end="151:36">&amp;&amp;</operator> <name pos:start="151:38" pos:end="151:52"><name pos:start="151:38" pos:end="151:42">avctx</name><operator pos:start="151:43" pos:end="151:44">-&gt;</operator><name pos:start="151:45" pos:end="151:52">channels</name></name></expr>)</condition> <block pos:start="151:55" pos:end="222:13">{<block_content pos:start="152:13" pos:end="222:13">
            <if_stmt pos:start="152:13" pos:end="222:13"><if pos:start="152:13" pos:end="154:9">if <condition pos:start="152:16" pos:end="152:92">(<expr pos:start="152:17" pos:end="152:91"><call pos:start="152:17" pos:end="152:72"><name pos:start="152:17" pos:end="152:49">av_get_channel_layout_nb_channels</name><argument_list pos:start="152:50" pos:end="152:72">(<argument pos:start="152:51" pos:end="152:71"><expr pos:start="152:51" pos:end="152:71"><name pos:start="152:51" pos:end="152:71"><name pos:start="152:51" pos:end="152:55">avctx</name><operator pos:start="152:56" pos:end="152:57">-&gt;</operator><name pos:start="152:58" pos:end="152:71">channel_layout</name></name></expr></argument>)</argument_list></call> <operator pos:start="152:74" pos:end="152:75">!=</operator> <name pos:start="152:77" pos:end="152:91"><name pos:start="152:77" pos:end="152:81">avctx</name><operator pos:start="152:82" pos:end="152:83">-&gt;</operator><name pos:start="152:84" pos:end="152:91">channels</name></name></expr>)</condition> <block pos:start="152:94" pos:end="154:9">{<block_content pos:start="153:17" pos:end="153:98">
                <expr_stmt pos:start="153:17" pos:end="153:98"><expr pos:start="153:17" pos:end="153:97"><call pos:start="153:17" pos:end="153:97"><name pos:start="153:17" pos:end="153:22">av_log</name><argument_list pos:start="153:23" pos:end="153:97">(<argument pos:start="153:24" pos:end="153:28"><expr pos:start="153:24" pos:end="153:28"><name pos:start="153:24" pos:end="153:28">avctx</name></expr></argument>, <argument pos:start="153:31" pos:end="153:42"><expr pos:start="153:31" pos:end="153:42"><name pos:start="153:31" pos:end="153:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="153:45" pos:end="153:96"><expr pos:start="153:45" pos:end="153:96"><literal type="string" pos:start="153:45" pos:end="153:96">"channel layout does not match number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="154:11" pos:end="222:13">else if <condition pos:start="154:19" pos:end="154:41">(<expr pos:start="154:20" pos:end="154:40"><name pos:start="154:20" pos:end="154:40"><name pos:start="154:20" pos:end="154:24">avctx</name><operator pos:start="154:25" pos:end="154:26">-&gt;</operator><name pos:start="154:27" pos:end="154:40">channel_layout</name></name></expr>)</condition> <block pos:start="154:43" pos:end="222:13">{<block_content pos:start="155:13" pos:end="222:13">
            <expr_stmt pos:start="155:13" pos:end="155:87"><expr pos:start="155:13" pos:end="155:86"><name pos:start="155:13" pos:end="155:27"><name pos:start="155:13" pos:end="155:17">avctx</name><operator pos:start="155:18" pos:end="155:19">-&gt;</operator><name pos:start="155:20" pos:end="155:27">channels</name></name> <operator pos:start="155:29" pos:end="155:29">=</operator> <call pos:start="155:31" pos:end="155:86"><name pos:start="155:31" pos:end="155:63">av_get_channel_layout_nb_channels</name><argument_list pos:start="155:64" pos:end="155:86">(<argument pos:start="155:65" pos:end="155:85"><expr pos:start="155:65" pos:end="155:85"><name pos:start="155:65" pos:end="155:85"><name pos:start="155:65" pos:end="155:69">avctx</name><operator pos:start="155:70" pos:end="155:71">-&gt;</operator><name pos:start="155:72" pos:end="155:85">channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="156:9" pos:end="157:79"><if pos:start="156:9" pos:end="157:79">if <condition pos:start="156:12" pos:end="156:48">(<expr pos:start="156:13" pos:end="156:47"><operator pos:start="156:13" pos:end="156:13">!</operator><name pos:start="156:14" pos:end="156:47"><name pos:start="156:14" pos:end="156:18">avctx</name><operator pos:start="156:19" pos:end="156:20">-&gt;</operator><name pos:start="156:21" pos:end="156:47">rc_initial_buffer_occupancy</name></name></expr>)</condition><block type="pseudo" pos:start="157:13" pos:end="157:79"><block_content pos:start="157:13" pos:end="157:79">
            <expr_stmt pos:start="157:13" pos:end="157:79"><expr pos:start="157:13" pos:end="157:78"><name pos:start="157:13" pos:end="157:46"><name pos:start="157:13" pos:end="157:17">avctx</name><operator pos:start="157:18" pos:end="157:19">-&gt;</operator><name pos:start="157:20" pos:end="157:46">rc_initial_buffer_occupancy</name></name> <operator pos:start="157:48" pos:end="157:48">=</operator> <name pos:start="157:50" pos:end="157:70"><name pos:start="157:50" pos:end="157:54">avctx</name><operator pos:start="157:55" pos:end="157:56">-&gt;</operator><name pos:start="157:57" pos:end="157:70">rc_buffer_size</name></name> <operator pos:start="157:72" pos:end="157:72">*</operator> <literal type="number" pos:start="157:74" pos:end="157:74">3</literal> <operator pos:start="157:76" pos:end="157:76">/</operator> <literal type="number" pos:start="157:78" pos:end="157:78">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="158:9" pos:end="222:13"><if pos:start="158:9" pos:end="222:13">if <condition pos:start="158:12" pos:end="159:68">(<expr pos:start="158:13" pos:end="159:67"><name pos:start="158:13" pos:end="158:34"><name pos:start="158:13" pos:end="158:17">avctx</name><operator pos:start="158:18" pos:end="158:19">-&gt;</operator><name pos:start="158:20" pos:end="158:34">ticks_per_frame</name></name> <operator pos:start="158:36" pos:end="158:37">&amp;&amp;</operator>
            <name pos:start="159:13" pos:end="159:34"><name pos:start="159:13" pos:end="159:17">avctx</name><operator pos:start="159:18" pos:end="159:19">-&gt;</operator><name pos:start="159:20" pos:end="159:34">ticks_per_frame</name></name> <operator pos:start="159:36" pos:end="159:36">&gt;</operator> <name pos:start="159:38" pos:end="159:44">INT_MAX</name> <operator pos:start="159:46" pos:end="159:46">/</operator> <name pos:start="159:48" pos:end="159:67"><name pos:start="159:48" pos:end="159:52">avctx</name><operator pos:start="159:53" pos:end="159:54">-&gt;</operator><name pos:start="159:55" pos:end="159:63">time_base</name><operator pos:start="159:64" pos:end="159:64">.</operator><name pos:start="159:65" pos:end="159:67">num</name></name></expr>)</condition> <block pos:start="159:70" pos:end="222:13">{<block_content pos:start="160:13" pos:end="222:13">
            <expr_stmt pos:start="160:13" pos:end="164:41"><expr pos:start="160:13" pos:end="164:40"><call pos:start="160:13" pos:end="164:40"><name pos:start="160:13" pos:end="160:18">av_log</name><argument_list pos:start="160:19" pos:end="164:40">(<argument pos:start="160:20" pos:end="160:24"><expr pos:start="160:20" pos:end="160:24"><name pos:start="160:20" pos:end="160:24">avctx</name></expr></argument>, <argument pos:start="160:27" pos:end="160:38"><expr pos:start="160:27" pos:end="160:38"><name pos:start="160:27" pos:end="160:38">AV_LOG_ERROR</name></expr></argument>,
                   <argument pos:start="161:20" pos:end="161:73"><expr pos:start="161:20" pos:end="161:73"><literal type="string" pos:start="161:20" pos:end="161:73">"ticks_per_frame %d too large for the timebase %d/%d."</literal></expr></argument>,
                   <argument pos:start="162:20" pos:end="162:41"><expr pos:start="162:20" pos:end="162:41"><name pos:start="162:20" pos:end="162:41"><name pos:start="162:20" pos:end="162:24">avctx</name><operator pos:start="162:25" pos:end="162:26">-&gt;</operator><name pos:start="162:27" pos:end="162:41">ticks_per_frame</name></name></expr></argument>,
                   <argument pos:start="163:20" pos:end="163:39"><expr pos:start="163:20" pos:end="163:39"><name pos:start="163:20" pos:end="163:39"><name pos:start="163:20" pos:end="163:24">avctx</name><operator pos:start="163:25" pos:end="163:26">-&gt;</operator><name pos:start="163:27" pos:end="163:35">time_base</name><operator pos:start="163:36" pos:end="163:36">.</operator><name pos:start="163:37" pos:end="163:39">num</name></name></expr></argument>,
                   <argument pos:start="164:20" pos:end="164:39"><expr pos:start="164:20" pos:end="164:39"><name pos:start="164:20" pos:end="164:39"><name pos:start="164:20" pos:end="164:24">avctx</name><operator pos:start="164:25" pos:end="164:26">-&gt;</operator><name pos:start="164:27" pos:end="164:35">time_base</name><operator pos:start="164:36" pos:end="164:36">.</operator><name pos:start="164:37" pos:end="164:39">den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="165:9" pos:end="222:13"><if pos:start="165:9" pos:end="222:13">if <condition pos:start="165:12" pos:end="165:33">(<expr pos:start="165:13" pos:end="165:32"><name pos:start="165:13" pos:end="165:32"><name pos:start="165:13" pos:end="165:17">avctx</name><operator pos:start="165:18" pos:end="165:19">-&gt;</operator><name pos:start="165:20" pos:end="165:32">hw_frames_ctx</name></name></expr>)</condition> <block pos:start="165:35" pos:end="222:13">{<block_content pos:start="166:13" pos:end="222:13">
            <decl_stmt pos:start="166:13" pos:end="166:91"><decl pos:start="166:13" pos:end="166:90"><type pos:start="166:13" pos:end="166:31"><name pos:start="166:13" pos:end="166:29">AVHWFramesContext</name> <modifier pos:start="166:31" pos:end="166:31">*</modifier></type><name pos:start="166:32" pos:end="166:41">frames_ctx</name> <init pos:start="166:43" pos:end="166:90">= <expr pos:start="166:45" pos:end="166:90"><operator pos:start="166:45" pos:end="166:45">(</operator><name pos:start="166:46" pos:end="166:62">AVHWFramesContext</name><operator pos:start="166:63" pos:end="166:63">*</operator><operator pos:start="166:64" pos:end="166:64">)</operator><name pos:start="166:65" pos:end="166:90"><name pos:start="166:65" pos:end="166:69">avctx</name><operator pos:start="166:70" pos:end="166:71">-&gt;</operator><name pos:start="166:72" pos:end="166:84">hw_frames_ctx</name><operator pos:start="166:85" pos:end="166:86">-&gt;</operator><name pos:start="166:87" pos:end="166:90">data</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="167:13" pos:end="222:13"><if pos:start="167:13" pos:end="222:13">if <condition pos:start="167:16" pos:end="167:53">(<expr pos:start="167:17" pos:end="167:52"><name pos:start="167:17" pos:end="167:34"><name pos:start="167:17" pos:end="167:26">frames_ctx</name><operator pos:start="167:27" pos:end="167:28">-&gt;</operator><name pos:start="167:29" pos:end="167:34">format</name></name> <operator pos:start="167:36" pos:end="167:37">!=</operator> <name pos:start="167:39" pos:end="167:52"><name pos:start="167:39" pos:end="167:43">avctx</name><operator pos:start="167:44" pos:end="167:45">-&gt;</operator><name pos:start="167:46" pos:end="167:52">pix_fmt</name></name></expr>)</condition> <block pos:start="167:55" pos:end="222:13">{<block_content pos:start="168:17" pos:end="222:13">
                <expr_stmt pos:start="168:17" pos:end="169:92"><expr pos:start="168:17" pos:end="169:91"><call pos:start="168:17" pos:end="169:91"><name pos:start="168:17" pos:end="168:22">av_log</name><argument_list pos:start="168:23" pos:end="169:91">(<argument pos:start="168:24" pos:end="168:28"><expr pos:start="168:24" pos:end="168:28"><name pos:start="168:24" pos:end="168:28">avctx</name></expr></argument>, <argument pos:start="168:31" pos:end="168:42"><expr pos:start="168:31" pos:end="168:42"><name pos:start="168:31" pos:end="168:42">AV_LOG_ERROR</name></expr></argument>,
                       <argument pos:start="169:24" pos:end="169:90"><expr pos:start="169:24" pos:end="169:90"><literal type="string" pos:start="169:24" pos:end="169:90">"Mismatching AVCodecContext.pix_fmt and AVHWFramesContext.format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="170:5" pos:end="222:13"><if pos:start="170:5" pos:end="222:13">if <condition pos:start="170:8" pos:end="170:77">(<expr pos:start="170:9" pos:end="170:76"><name pos:start="170:9" pos:end="170:26"><name pos:start="170:9" pos:end="170:13">avctx</name><operator pos:start="170:14" pos:end="170:15">-&gt;</operator><name pos:start="170:16" pos:end="170:20">codec</name><operator pos:start="170:21" pos:end="170:22">-&gt;</operator><name pos:start="170:23" pos:end="170:26">init</name></name> <operator pos:start="170:28" pos:end="170:29">&amp;&amp;</operator> <operator pos:start="170:31" pos:end="170:31">!</operator><operator pos:start="170:32" pos:end="170:32">(</operator><name pos:start="170:33" pos:end="170:57"><name pos:start="170:33" pos:end="170:37">avctx</name><operator pos:start="170:38" pos:end="170:39">-&gt;</operator><name pos:start="170:40" pos:end="170:57">active_thread_type</name></name> <operator pos:start="170:59" pos:end="170:59">&amp;</operator> <name pos:start="170:61" pos:end="170:75">FF_THREAD_FRAME</name><operator pos:start="170:76" pos:end="170:76">)</operator></expr>)</condition> <block pos:start="170:79" pos:end="222:13">{<block_content pos:start="171:9" pos:end="222:13">
        <expr_stmt pos:start="171:9" pos:end="171:40"><expr pos:start="171:9" pos:end="171:39"><name pos:start="171:9" pos:end="171:11">ret</name> <operator pos:start="171:13" pos:end="171:13">=</operator> <call pos:start="171:15" pos:end="171:39"><name pos:start="171:15" pos:end="171:32"><name pos:start="171:15" pos:end="171:19">avctx</name><operator pos:start="171:20" pos:end="171:21">-&gt;</operator><name pos:start="171:22" pos:end="171:26">codec</name><operator pos:start="171:27" pos:end="171:28">-&gt;</operator><name pos:start="171:29" pos:end="171:32">init</name></name><argument_list pos:start="171:33" pos:end="171:39">(<argument pos:start="171:34" pos:end="171:38"><expr pos:start="171:34" pos:end="171:38"><name pos:start="171:34" pos:end="171:38">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="172:9" pos:end="222:13"><if pos:start="172:9" pos:end="222:13">if <condition pos:start="172:12" pos:end="172:20">(<expr pos:start="172:13" pos:end="172:19"><name pos:start="172:13" pos:end="172:15">ret</name> <operator pos:start="172:17" pos:end="172:17">&lt;</operator> <literal type="number" pos:start="172:19" pos:end="172:19">0</literal></expr>)</condition> <block pos:start="172:22" pos:end="222:13">{<block_content pos:start="174:5" pos:end="222:13">
<cpp:if pos:start="173:1" pos:end="173:25">#<cpp:directive pos:start="173:2" pos:end="173:3">if</cpp:directive> <expr pos:start="173:5" pos:end="173:25"><name pos:start="173:5" pos:end="173:25">FF_API_AUDIOENC_DELAY</name></expr></cpp:if>
    <if_stmt pos:start="174:5" pos:end="177:0"><if pos:start="174:5" pos:end="177:0">if <condition pos:start="174:8" pos:end="174:42">(<expr pos:start="174:9" pos:end="174:41"><call pos:start="174:9" pos:end="174:41"><name pos:start="174:9" pos:end="174:27">av_codec_is_encoder</name><argument_list pos:start="174:28" pos:end="174:41">(<argument pos:start="174:29" pos:end="174:40"><expr pos:start="174:29" pos:end="174:40"><name pos:start="174:29" pos:end="174:40"><name pos:start="174:29" pos:end="174:33">avctx</name><operator pos:start="174:34" pos:end="174:35">-&gt;</operator><name pos:start="174:36" pos:end="174:40">codec</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="175:9" pos:end="177:0"><block_content pos:start="175:9" pos:end="177:0">
        <expr_stmt pos:start="175:9" pos:end="177:0"><expr pos:start="175:9" pos:end="175:45"><name pos:start="175:9" pos:end="175:20"><name pos:start="175:9" pos:end="175:13">avctx</name><operator pos:start="175:14" pos:end="175:15">-&gt;</operator><name pos:start="175:16" pos:end="175:20">delay</name></name> <operator pos:start="175:22" pos:end="175:22">=</operator> <name pos:start="175:24" pos:end="175:45"><name pos:start="175:24" pos:end="175:28">avctx</name><operator pos:start="175:29" pos:end="175:30">-&gt;</operator><name pos:start="175:31" pos:end="175:45">initial_padding</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif pos:start="176:1" pos:end="176:6">#<cpp:directive pos:start="176:2" pos:end="176:6">endif</cpp:directive></cpp:endif>
    <if_stmt pos:start="177:5" pos:end="222:13"><if pos:start="177:5" pos:end="222:13">if <condition pos:start="177:8" pos:end="177:42">(<expr pos:start="177:9" pos:end="177:41"><call pos:start="177:9" pos:end="177:41"><name pos:start="177:9" pos:end="177:27">av_codec_is_decoder</name><argument_list pos:start="177:28" pos:end="177:41">(<argument pos:start="177:29" pos:end="177:40"><expr pos:start="177:29" pos:end="177:40"><name pos:start="177:29" pos:end="177:40"><name pos:start="177:29" pos:end="177:33">avctx</name><operator pos:start="177:34" pos:end="177:35">-&gt;</operator><name pos:start="177:36" pos:end="177:40">codec</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="177:44" pos:end="222:13">{<block_content pos:start="179:9" pos:end="222:13">
        <comment type="block" pos:start="178:9" pos:end="178:54">/* validate channel layout from the decoder */</comment>
        <if_stmt pos:start="179:9" pos:end="222:13"><if pos:start="179:9" pos:end="222:13">if <condition pos:start="179:12" pos:end="179:34">(<expr pos:start="179:13" pos:end="179:33"><name pos:start="179:13" pos:end="179:33"><name pos:start="179:13" pos:end="179:17">avctx</name><operator pos:start="179:18" pos:end="179:19">-&gt;</operator><name pos:start="179:20" pos:end="179:33">channel_layout</name></name></expr>)</condition> <block pos:start="179:36" pos:end="222:13">{<block_content pos:start="180:13" pos:end="222:13">
            <decl_stmt pos:start="180:13" pos:end="180:84"><decl pos:start="180:13" pos:end="180:83"><type pos:start="180:13" pos:end="180:15"><name pos:start="180:13" pos:end="180:15">int</name></type> <name pos:start="180:17" pos:end="180:24">channels</name> <init pos:start="180:26" pos:end="180:83">= <expr pos:start="180:28" pos:end="180:83"><call pos:start="180:28" pos:end="180:83"><name pos:start="180:28" pos:end="180:60">av_get_channel_layout_nb_channels</name><argument_list pos:start="180:61" pos:end="180:83">(<argument pos:start="180:62" pos:end="180:82"><expr pos:start="180:62" pos:end="180:82"><name pos:start="180:62" pos:end="180:82"><name pos:start="180:62" pos:end="180:66">avctx</name><operator pos:start="180:67" pos:end="180:68">-&gt;</operator><name pos:start="180:69" pos:end="180:82">channel_layout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="181:13" pos:end="222:13"><if pos:start="181:13" pos:end="182:43">if <condition pos:start="181:16" pos:end="181:33">(<expr pos:start="181:17" pos:end="181:32"><operator pos:start="181:17" pos:end="181:17">!</operator><name pos:start="181:18" pos:end="181:32"><name pos:start="181:18" pos:end="181:22">avctx</name><operator pos:start="181:23" pos:end="181:24">-&gt;</operator><name pos:start="181:25" pos:end="181:32">channels</name></name></expr>)</condition><block type="pseudo" pos:start="182:17" pos:end="182:43"><block_content pos:start="182:17" pos:end="182:43">
                <expr_stmt pos:start="182:17" pos:end="182:43"><expr pos:start="182:17" pos:end="182:42"><name pos:start="182:17" pos:end="182:31"><name pos:start="182:17" pos:end="182:21">avctx</name><operator pos:start="182:22" pos:end="182:23">-&gt;</operator><name pos:start="182:24" pos:end="182:31">channels</name></name> <operator pos:start="182:33" pos:end="182:33">=</operator> <name pos:start="182:35" pos:end="182:42">channels</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif" pos:start="183:13" pos:end="222:13">else if <condition pos:start="183:21" pos:end="183:49">(<expr pos:start="183:22" pos:end="183:48"><name pos:start="183:22" pos:end="183:29">channels</name> <operator pos:start="183:31" pos:end="183:32">!=</operator> <name pos:start="183:34" pos:end="183:48"><name pos:start="183:34" pos:end="183:38">avctx</name><operator pos:start="183:39" pos:end="183:40">-&gt;</operator><name pos:start="183:41" pos:end="183:48">channels</name></name></expr>)</condition> <block pos:start="183:51" pos:end="222:13">{<block_content pos:start="184:17" pos:end="222:13">
                <expr_stmt pos:start="184:17" pos:end="185:77"><expr pos:start="184:17" pos:end="185:76"><call pos:start="184:17" pos:end="185:76"><name pos:start="184:17" pos:end="184:22">av_log</name><argument_list pos:start="184:23" pos:end="185:76">(<argument pos:start="184:24" pos:end="184:28"><expr pos:start="184:24" pos:end="184:28"><name pos:start="184:24" pos:end="184:28">avctx</name></expr></argument>, <argument pos:start="184:31" pos:end="184:44"><expr pos:start="184:31" pos:end="184:44"><name pos:start="184:31" pos:end="184:44">AV_LOG_WARNING</name></expr></argument>,
                       <argument pos:start="185:24" pos:end="185:75"><expr pos:start="185:24" pos:end="185:75"><literal type="string" pos:start="185:24" pos:end="185:75">"channel layout does not match number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="186:17" pos:end="186:42"><expr pos:start="186:17" pos:end="186:41"><name pos:start="186:17" pos:end="186:37"><name pos:start="186:17" pos:end="186:21">avctx</name><operator pos:start="186:22" pos:end="186:23">-&gt;</operator><name pos:start="186:24" pos:end="186:37">channel_layout</name></name> <operator pos:start="186:39" pos:end="186:39">=</operator> <literal type="number" pos:start="186:41" pos:end="186:41">0</literal></expr>;</expr_stmt>
        <if_stmt pos:start="187:9" pos:end="222:13"><if pos:start="187:9" pos:end="222:13">if <condition pos:start="187:12" pos:end="188:50">(<expr pos:start="187:13" pos:end="188:49"><name pos:start="187:13" pos:end="187:27"><name pos:start="187:13" pos:end="187:17">avctx</name><operator pos:start="187:18" pos:end="187:19">-&gt;</operator><name pos:start="187:20" pos:end="187:27">channels</name></name> <operator pos:start="187:29" pos:end="187:30">&amp;&amp;</operator> <name pos:start="187:32" pos:end="187:46"><name pos:start="187:32" pos:end="187:36">avctx</name><operator pos:start="187:37" pos:end="187:38">-&gt;</operator><name pos:start="187:39" pos:end="187:46">channels</name></name> <operator pos:start="187:48" pos:end="187:48">&lt;</operator> <literal type="number" pos:start="187:50" pos:end="187:50">0</literal> <operator pos:start="187:52" pos:end="187:53">||</operator>
            <name pos:start="188:13" pos:end="188:27"><name pos:start="188:13" pos:end="188:17">avctx</name><operator pos:start="188:18" pos:end="188:19">-&gt;</operator><name pos:start="188:20" pos:end="188:27">channels</name></name> <operator pos:start="188:29" pos:end="188:29">&gt;</operator> <name pos:start="188:31" pos:end="188:49">FF_SANE_NB_CHANNELS</name></expr>)</condition> <block pos:start="188:52" pos:end="222:13">{<block_content pos:start="190:9" pos:end="222:13">
<cpp:if pos:start="189:1" pos:end="189:25">#<cpp:directive pos:start="189:2" pos:end="189:3">if</cpp:directive> <expr pos:start="189:5" pos:end="189:25"><name pos:start="189:5" pos:end="189:25">FF_API_AVCTX_TIMEBASE</name></expr></cpp:if>
        <if_stmt pos:start="190:9" pos:end="193:0"><if pos:start="190:9" pos:end="193:0">if <condition pos:start="190:12" pos:end="190:65">(<expr pos:start="190:13" pos:end="190:64"><name pos:start="190:13" pos:end="190:32"><name pos:start="190:13" pos:end="190:17">avctx</name><operator pos:start="190:18" pos:end="190:19">-&gt;</operator><name pos:start="190:20" pos:end="190:28">framerate</name><operator pos:start="190:29" pos:end="190:29">.</operator><name pos:start="190:30" pos:end="190:32">num</name></name> <operator pos:start="190:34" pos:end="190:34">&gt;</operator> <literal type="number" pos:start="190:36" pos:end="190:36">0</literal> <operator pos:start="190:38" pos:end="190:39">&amp;&amp;</operator> <name pos:start="190:41" pos:end="190:60"><name pos:start="190:41" pos:end="190:45">avctx</name><operator pos:start="190:46" pos:end="190:47">-&gt;</operator><name pos:start="190:48" pos:end="190:56">framerate</name><operator pos:start="190:57" pos:end="190:57">.</operator><name pos:start="190:58" pos:end="190:60">den</name></name> <operator pos:start="190:62" pos:end="190:62">&gt;</operator> <literal type="number" pos:start="190:64" pos:end="190:64">0</literal></expr>)</condition><block type="pseudo" pos:start="191:13" pos:end="193:0"><block_content pos:start="191:13" pos:end="193:0">
            <expr_stmt pos:start="191:13" pos:end="193:0"><expr pos:start="191:13" pos:end="191:57"><name pos:start="191:13" pos:end="191:28"><name pos:start="191:13" pos:end="191:17">avctx</name><operator pos:start="191:18" pos:end="191:19">-&gt;</operator><name pos:start="191:20" pos:end="191:28">time_base</name></name> <operator pos:start="191:30" pos:end="191:30">=</operator> <call pos:start="191:32" pos:end="191:57"><name pos:start="191:32" pos:end="191:39">av_inv_q</name><argument_list pos:start="191:40" pos:end="191:57">(<argument pos:start="191:41" pos:end="191:56"><expr pos:start="191:41" pos:end="191:56"><name pos:start="191:41" pos:end="191:56"><name pos:start="191:41" pos:end="191:45">avctx</name><operator pos:start="191:46" pos:end="191:47">-&gt;</operator><name pos:start="191:48" pos:end="191:56">framerate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif pos:start="192:1" pos:end="192:6">#<cpp:directive pos:start="192:2" pos:end="192:6">endif</cpp:directive></cpp:endif>
<label pos:start="193:1" pos:end="193:4"><name pos:start="193:1" pos:end="193:3">end</name>:</label>
    <if_stmt pos:start="194:5" pos:end="222:13"><if pos:start="194:5" pos:end="222:13">if <condition pos:start="194:8" pos:end="194:78">(<expr pos:start="194:9" pos:end="194:77"><operator pos:start="194:9" pos:end="194:9">!</operator><operator pos:start="194:10" pos:end="194:10">(</operator><name pos:start="194:11" pos:end="194:30"><name pos:start="194:11" pos:end="194:15">codec</name><operator pos:start="194:16" pos:end="194:17">-&gt;</operator><name pos:start="194:18" pos:end="194:30">caps_internal</name></name> <operator pos:start="194:32" pos:end="194:32">&amp;</operator> <name pos:start="194:34" pos:end="194:61">FF_CODEC_CAP_INIT_THREADSAFE</name><operator pos:start="194:62" pos:end="194:62">)</operator> <operator pos:start="194:64" pos:end="194:65">&amp;&amp;</operator> <name pos:start="194:67" pos:end="194:77"><name pos:start="194:67" pos:end="194:71">codec</name><operator pos:start="194:72" pos:end="194:73">-&gt;</operator><name pos:start="194:74" pos:end="194:77">init</name></name></expr>)</condition> <block pos:start="194:80" pos:end="222:13">{<block_content pos:start="195:9" pos:end="222:13">
        <expr_stmt pos:start="195:9" pos:end="195:35"><expr pos:start="195:9" pos:end="195:34"><name pos:start="195:9" pos:end="195:32">entangled_thread_counter</name><operator pos:start="195:33" pos:end="195:34">--</operator></expr>;</expr_stmt>
        <comment type="block" pos:start="196:9" pos:end="196:46">/* Release any user-supplied mutex. */</comment>
        <if_stmt pos:start="197:9" pos:end="222:13"><if pos:start="197:9" pos:end="222:13">if <condition pos:start="197:12" pos:end="197:23">(<expr pos:start="197:13" pos:end="197:22"><name pos:start="197:13" pos:end="197:22">lockmgr_cb</name></expr>)</condition> <block pos:start="197:25" pos:end="222:13">{<block_content pos:start="198:13" pos:end="222:13">
            <expr_stmt pos:start="198:13" pos:end="198:57"><expr pos:start="198:13" pos:end="198:56"><call pos:start="198:13" pos:end="198:56">(<modifier pos:start="198:14" pos:end="198:14">*</modifier><name pos:start="198:15" pos:end="198:24">lockmgr_cb</name>)<argument_list pos:start="198:26" pos:end="198:56">(<argument pos:start="198:27" pos:end="198:38"><expr pos:start="198:27" pos:end="198:38"><operator pos:start="198:27" pos:end="198:27">&amp;</operator><name pos:start="198:28" pos:end="198:38">codec_mutex</name></expr></argument>, <argument pos:start="198:41" pos:end="198:55"><expr pos:start="198:41" pos:end="198:55"><name pos:start="198:41" pos:end="198:55">AV_LOCK_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="199:5" pos:end="222:13"><if pos:start="199:5" pos:end="222:13">if <condition pos:start="199:8" pos:end="199:16">(<expr pos:start="199:9" pos:end="199:15"><name pos:start="199:9" pos:end="199:15">options</name></expr>)</condition> <block pos:start="199:18" pos:end="222:13">{<block_content pos:start="200:9" pos:end="222:13">
        <expr_stmt pos:start="200:9" pos:end="200:30"><expr pos:start="200:9" pos:end="200:29"><call pos:start="200:9" pos:end="200:29"><name pos:start="200:9" pos:end="200:20">av_dict_free</name><argument_list pos:start="200:21" pos:end="200:29">(<argument pos:start="200:22" pos:end="200:28"><expr pos:start="200:22" pos:end="200:28"><name pos:start="200:22" pos:end="200:28">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="201:9" pos:end="201:23"><expr pos:start="201:9" pos:end="201:22"><operator pos:start="201:9" pos:end="201:9">*</operator><name pos:start="201:10" pos:end="201:16">options</name> <operator pos:start="201:18" pos:end="201:18">=</operator> <name pos:start="201:20" pos:end="201:22">tmp</name></expr>;</expr_stmt>
    <return pos:start="202:5" pos:end="202:15">return <expr pos:start="202:12" pos:end="202:14"><name pos:start="202:12" pos:end="202:14">ret</name></expr>;</return>
<label pos:start="203:1" pos:end="203:13"><name pos:start="203:1" pos:end="203:12">free_and_end</name>:</label>
    <if_stmt pos:start="204:5" pos:end="206:35"><if pos:start="204:5" pos:end="206:35">if <condition pos:start="204:8" pos:end="205:66">(<expr pos:start="204:9" pos:end="205:65"><name pos:start="204:9" pos:end="204:20"><name pos:start="204:9" pos:end="204:13">avctx</name><operator pos:start="204:14" pos:end="204:15">-&gt;</operator><name pos:start="204:16" pos:end="204:20">codec</name></name> <operator pos:start="204:22" pos:end="204:23">&amp;&amp;</operator>
        <operator pos:start="205:9" pos:end="205:9">(</operator><name pos:start="205:10" pos:end="205:36"><name pos:start="205:10" pos:end="205:14">avctx</name><operator pos:start="205:15" pos:end="205:16">-&gt;</operator><name pos:start="205:17" pos:end="205:21">codec</name><operator pos:start="205:22" pos:end="205:23">-&gt;</operator><name pos:start="205:24" pos:end="205:36">caps_internal</name></name> <operator pos:start="205:38" pos:end="205:38">&amp;</operator> <name pos:start="205:40" pos:end="205:64">FF_CODEC_CAP_INIT_CLEANUP</name><operator pos:start="205:65" pos:end="205:65">)</operator></expr>)</condition><block type="pseudo" pos:start="206:9" pos:end="206:35"><block_content pos:start="206:9" pos:end="206:35">
        <expr_stmt pos:start="206:9" pos:end="206:35"><expr pos:start="206:9" pos:end="206:34"><call pos:start="206:9" pos:end="206:34"><name pos:start="206:9" pos:end="206:27"><name pos:start="206:9" pos:end="206:13">avctx</name><operator pos:start="206:14" pos:end="206:15">-&gt;</operator><name pos:start="206:16" pos:end="206:20">codec</name><operator pos:start="206:21" pos:end="206:22">-&gt;</operator><name pos:start="206:23" pos:end="206:27">close</name></name><argument_list pos:start="206:28" pos:end="206:34">(<argument pos:start="206:29" pos:end="206:33"><expr pos:start="206:29" pos:end="206:33"><name pos:start="206:29" pos:end="206:33">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="207:5" pos:end="208:38"><if pos:start="207:5" pos:end="208:38">if <condition pos:start="207:8" pos:end="207:69">(<expr pos:start="207:9" pos:end="207:68"><name pos:start="207:9" pos:end="207:24"><name pos:start="207:9" pos:end="207:13">avctx</name><operator pos:start="207:14" pos:end="207:15">-&gt;</operator><name pos:start="207:16" pos:end="207:24">priv_data</name></name> <operator pos:start="207:26" pos:end="207:27">&amp;&amp;</operator> <name pos:start="207:29" pos:end="207:40"><name pos:start="207:29" pos:end="207:33">avctx</name><operator pos:start="207:34" pos:end="207:35">-&gt;</operator><name pos:start="207:36" pos:end="207:40">codec</name></name> <operator pos:start="207:42" pos:end="207:43">&amp;&amp;</operator> <name pos:start="207:45" pos:end="207:68"><name pos:start="207:45" pos:end="207:49">avctx</name><operator pos:start="207:50" pos:end="207:51">-&gt;</operator><name pos:start="207:52" pos:end="207:56">codec</name><operator pos:start="207:57" pos:end="207:58">-&gt;</operator><name pos:start="207:59" pos:end="207:68">priv_class</name></name></expr>)</condition><block type="pseudo" pos:start="208:9" pos:end="208:38"><block_content pos:start="208:9" pos:end="208:38">
        <expr_stmt pos:start="208:9" pos:end="208:38"><expr pos:start="208:9" pos:end="208:37"><call pos:start="208:9" pos:end="208:37"><name pos:start="208:9" pos:end="208:19">av_opt_free</name><argument_list pos:start="208:20" pos:end="208:37">(<argument pos:start="208:21" pos:end="208:36"><expr pos:start="208:21" pos:end="208:36"><name pos:start="208:21" pos:end="208:36"><name pos:start="208:21" pos:end="208:25">avctx</name><operator pos:start="208:26" pos:end="208:27">-&gt;</operator><name pos:start="208:28" pos:end="208:36">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="209:5" pos:end="211:0"><expr pos:start="209:5" pos:end="209:22"><call pos:start="209:5" pos:end="209:22"><name pos:start="209:5" pos:end="209:15">av_opt_free</name><argument_list pos:start="209:16" pos:end="209:22">(<argument pos:start="209:17" pos:end="209:21"><expr pos:start="209:17" pos:end="209:21"><name pos:start="209:17" pos:end="209:21">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="210:1" pos:end="210:22">#<cpp:directive pos:start="210:2" pos:end="210:3">if</cpp:directive> <expr pos:start="210:5" pos:end="210:22"><name pos:start="210:5" pos:end="210:22">FF_API_CODED_FRAME</name></expr></cpp:if>
<decl_stmt pos:start="211:1" pos:end="212:39"><decl pos:start="211:1" pos:end="212:38"><type pos:start="211:1" pos:end="211:31"><name pos:start="211:1" pos:end="211:31">FF_DISABLE_DEPRECATION_WARNINGS</name></type>
    <name pos:start="212:5" pos:end="212:17">av_frame_free</name><argument_list pos:start="212:18" pos:end="212:38">(<argument pos:start="212:19" pos:end="212:37"><expr pos:start="212:19" pos:end="212:37"><operator pos:start="212:19" pos:end="212:19">&amp;</operator><name pos:start="212:20" pos:end="212:37"><name pos:start="212:20" pos:end="212:24">avctx</name><operator pos:start="212:25" pos:end="212:26">-&gt;</operator><name pos:start="212:27" pos:end="212:37">coded_frame</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt pos:start="213:1" pos:end="215:23"><decl pos:start="213:1" pos:end="215:22"><type pos:start="213:1" pos:end="215:0"><name pos:start="213:1" pos:end="215:0">FF_ENABLE_DEPRECATION_WARNINGS</name></type>
<cpp:endif pos:start="214:1" pos:end="214:6">#<cpp:directive pos:start="214:2" pos:end="214:6">endif</cpp:directive></cpp:endif>
    <name pos:start="215:5" pos:end="215:16">av_dict_free</name><argument_list pos:start="215:17" pos:end="215:22">(<argument pos:start="215:18" pos:end="215:21"><expr pos:start="215:18" pos:end="215:21"><operator pos:start="215:18" pos:end="215:18">&amp;</operator><name pos:start="215:19" pos:end="215:21">tmp</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt pos:start="216:5" pos:end="216:32"><expr pos:start="216:5" pos:end="216:31"><call pos:start="216:5" pos:end="216:31"><name pos:start="216:5" pos:end="216:12">av_freep</name><argument_list pos:start="216:13" pos:end="216:31">(<argument pos:start="216:14" pos:end="216:30"><expr pos:start="216:14" pos:end="216:30"><operator pos:start="216:14" pos:end="216:14">&amp;</operator><name pos:start="216:15" pos:end="216:30"><name pos:start="216:15" pos:end="216:19">avctx</name><operator pos:start="216:20" pos:end="216:21">-&gt;</operator><name pos:start="216:22" pos:end="216:30">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="217:5" pos:end="222:13"><if pos:start="217:5" pos:end="222:13">if <condition pos:start="217:8" pos:end="217:24">(<expr pos:start="217:9" pos:end="217:23"><name pos:start="217:9" pos:end="217:23"><name pos:start="217:9" pos:end="217:13">avctx</name><operator pos:start="217:14" pos:end="217:15">-&gt;</operator><name pos:start="217:16" pos:end="217:23">internal</name></name></expr>)</condition> <block pos:start="217:26" pos:end="222:13">{<block_content pos:start="218:9" pos:end="222:13">
        <expr_stmt pos:start="218:9" pos:end="218:49"><expr pos:start="218:9" pos:end="218:48"><call pos:start="218:9" pos:end="218:48"><name pos:start="218:9" pos:end="218:21">av_frame_free</name><argument_list pos:start="218:22" pos:end="218:48">(<argument pos:start="218:23" pos:end="218:47"><expr pos:start="218:23" pos:end="218:47"><operator pos:start="218:23" pos:end="218:23">&amp;</operator><name pos:start="218:24" pos:end="218:47"><name pos:start="218:24" pos:end="218:28">avctx</name><operator pos:start="218:29" pos:end="218:30">-&gt;</operator><name pos:start="218:31" pos:end="218:38">internal</name><operator pos:start="218:39" pos:end="218:40">-&gt;</operator><name pos:start="218:41" pos:end="218:47">to_free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="219:9" pos:end="219:41"><expr pos:start="219:9" pos:end="219:40"><call pos:start="219:9" pos:end="219:40"><name pos:start="219:9" pos:end="219:16">av_freep</name><argument_list pos:start="219:17" pos:end="219:40">(<argument pos:start="219:18" pos:end="219:39"><expr pos:start="219:18" pos:end="219:39"><operator pos:start="219:18" pos:end="219:18">&amp;</operator><name pos:start="219:19" pos:end="219:39"><name pos:start="219:19" pos:end="219:23">avctx</name><operator pos:start="219:24" pos:end="219:25">-&gt;</operator><name pos:start="219:26" pos:end="219:33">internal</name><operator pos:start="219:34" pos:end="219:35">-&gt;</operator><name pos:start="219:36" pos:end="219:39">pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="220:5" pos:end="220:31"><expr pos:start="220:5" pos:end="220:30"><call pos:start="220:5" pos:end="220:30"><name pos:start="220:5" pos:end="220:12">av_freep</name><argument_list pos:start="220:13" pos:end="220:30">(<argument pos:start="220:14" pos:end="220:29"><expr pos:start="220:14" pos:end="220:29"><operator pos:start="220:14" pos:end="220:14">&amp;</operator><name pos:start="220:15" pos:end="220:29"><name pos:start="220:15" pos:end="220:19">avctx</name><operator pos:start="220:20" pos:end="220:21">-&gt;</operator><name pos:start="220:22" pos:end="220:29">internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="221:5" pos:end="221:24"><expr pos:start="221:5" pos:end="221:23"><name pos:start="221:5" pos:end="221:16"><name pos:start="221:5" pos:end="221:9">avctx</name><operator pos:start="221:10" pos:end="221:11">-&gt;</operator><name pos:start="221:12" pos:end="221:16">codec</name></name> <operator pos:start="221:18" pos:end="221:18">=</operator> <name pos:start="221:20" pos:end="221:23">NULL</name></expr>;</expr_stmt>
    <goto pos:start="222:5" pos:end="222:13">goto <name pos:start="222:10" pos:end="222:12">end</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
