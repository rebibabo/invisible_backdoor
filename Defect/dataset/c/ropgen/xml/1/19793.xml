<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19793.c" pos:tabs="8"><function pos:start="1:1" pos:end="931:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:18">RENAME</name></type>(<name pos:start="1:20" pos:end="1:30">postProcess</name>)<parameter_list pos:start="1:32" pos:end="3:97">(<parameter pos:start="1:33" pos:end="1:51"><decl pos:start="1:33" pos:end="1:51"><type pos:start="1:33" pos:end="1:49"><specifier pos:start="1:33" pos:end="1:37">const</specifier> <name pos:start="1:39" pos:end="1:45">uint8_t</name></type> <name pos:start="1:47" pos:end="1:51"><name pos:start="1:47" pos:end="1:49">src</name><index pos:start="1:50" pos:end="1:51">[]</index></name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:66"><decl pos:start="1:54" pos:end="1:66"><type pos:start="1:54" pos:end="1:66"><name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:66">srcStride</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:81"><decl pos:start="1:69" pos:end="1:81"><type pos:start="1:69" pos:end="1:79"><name pos:start="1:69" pos:end="1:75">uint8_t</name></type> <name pos:start="1:77" pos:end="1:81"><name pos:start="1:77" pos:end="1:79">dst</name><index pos:start="1:80" pos:end="1:81">[]</index></name></decl></parameter>, <parameter pos:start="1:84" pos:end="1:96"><decl pos:start="1:84" pos:end="1:96"><type pos:start="1:84" pos:end="1:96"><name pos:start="1:84" pos:end="1:86">int</name></type> <name pos:start="1:88" pos:end="1:96">dstStride</name></decl></parameter>, <parameter pos:start="1:99" pos:end="1:107"><decl pos:start="1:99" pos:end="1:107"><type pos:start="1:99" pos:end="1:107"><name pos:start="1:99" pos:end="1:101">int</name></type> <name pos:start="1:103" pos:end="1:107">width</name></decl></parameter>, <parameter pos:start="1:110" pos:end="1:119"><decl pos:start="1:110" pos:end="1:119"><type pos:start="1:110" pos:end="1:119"><name pos:start="1:110" pos:end="1:112">int</name></type> <name pos:start="1:114" pos:end="1:119">height</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:54"><decl pos:start="3:33" pos:end="3:54"><type pos:start="3:33" pos:end="3:52"><specifier pos:start="3:33" pos:end="3:37">const</specifier> <name pos:start="3:39" pos:end="3:48">QP_STORE_T</name></type> <name pos:start="3:50" pos:end="3:54"><name pos:start="3:50" pos:end="3:52">QPs</name><index pos:start="3:53" pos:end="3:54">[]</index></name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:68"><decl pos:start="3:57" pos:end="3:68"><type pos:start="3:57" pos:end="3:68"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:68">QPStride</name></decl></parameter>, <parameter pos:start="3:71" pos:end="3:81"><decl pos:start="3:71" pos:end="3:81"><type pos:start="3:71" pos:end="3:81"><name pos:start="3:71" pos:end="3:73">int</name></type> <name pos:start="3:75" pos:end="3:81">isColor</name></decl></parameter>, <parameter pos:start="3:84" pos:end="3:96"><decl pos:start="3:84" pos:end="3:96"><type pos:start="3:84" pos:end="3:96"><name pos:start="3:84" pos:end="3:92">PPContext</name> <modifier pos:start="3:94" pos:end="3:94">*</modifier></type><name pos:start="3:95" pos:end="3:96">c2</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="931:1">{<block_content pos:start="7:5" pos:end="927:11">

    <expr_stmt pos:start="7:5" pos:end="7:42"><expr pos:start="7:5" pos:end="7:41"><call pos:start="7:5" pos:end="7:36"><name pos:start="7:5" pos:end="7:19">DECLARE_ALIGNED</name><argument_list pos:start="7:20" pos:end="7:36">(<argument pos:start="7:21" pos:end="7:21"><expr pos:start="7:21" pos:end="7:21"><literal type="number" pos:start="7:21" pos:end="7:21">8</literal></expr></argument>, <argument pos:start="7:24" pos:end="7:32"><expr pos:start="7:24" pos:end="7:32"><name pos:start="7:24" pos:end="7:32">PPContext</name></expr></argument>, <argument pos:start="7:35" pos:end="7:35"><expr pos:start="7:35" pos:end="7:35"><name pos:start="7:35" pos:end="7:35">c</name></expr></argument>)</argument_list></call><operator pos:start="7:37" pos:end="7:37">=</operator> <operator pos:start="7:39" pos:end="7:39">*</operator><name pos:start="7:40" pos:end="7:41">c2</name></expr>;</expr_stmt> <comment type="line" pos:start="7:44" pos:end="7:76">//copy to stack for faster access</comment>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">x</name></decl>,<decl pos:start="9:11" pos:end="9:11"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:11" pos:end="9:11">y</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="11:1" pos:end="11:24">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:24">COMPILE_TIME_MODE</name></cpp:ifdef>

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:13"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:13">int</name></type> <name pos:start="13:15" pos:end="13:18">mode</name><init pos:start="13:19" pos:end="13:37">= <expr pos:start="13:21" pos:end="13:37"><name pos:start="13:21" pos:end="13:37">COMPILE_TIME_MODE</name></expr></init></decl>;</decl_stmt>

<cpp:else pos:start="15:1" pos:end="15:5">#<cpp:directive pos:start="15:2" pos:end="15:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="17:5" pos:end="20:0"><decl pos:start="17:5" pos:end="17:67"><type pos:start="17:5" pos:end="17:13"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:13">int</name></type> <name pos:start="17:15" pos:end="17:18">mode</name><init pos:start="17:19" pos:end="17:67">= <expr pos:start="17:21" pos:end="17:67"><ternary pos:start="17:21" pos:end="17:67"><condition pos:start="17:21" pos:end="17:29"><expr pos:start="17:21" pos:end="17:27"><name pos:start="17:21" pos:end="17:27">isColor</name></expr> ?</condition><then pos:start="17:31" pos:end="17:48"> <expr pos:start="17:31" pos:end="17:48"><name pos:start="17:31" pos:end="17:48"><name pos:start="17:31" pos:end="17:31">c</name><operator pos:start="17:32" pos:end="17:32">.</operator><name pos:start="17:33" pos:end="17:38">ppMode</name><operator pos:start="17:39" pos:end="17:39">.</operator><name pos:start="17:40" pos:end="17:48">chromMode</name></name></expr> </then><else pos:start="17:50" pos:end="17:67">: <expr pos:start="17:52" pos:end="17:67"><name pos:start="17:52" pos:end="17:67"><name pos:start="17:52" pos:end="17:52">c</name><operator pos:start="17:53" pos:end="17:53">.</operator><name pos:start="17:54" pos:end="17:59">ppMode</name><operator pos:start="17:60" pos:end="17:60">.</operator><name pos:start="17:61" pos:end="17:67">lumMode</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="21:5" pos:end="21:27"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:13">black</name><init pos:start="21:14" pos:end="21:15">=<expr pos:start="21:15" pos:end="21:15"><literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr></init></decl>, <decl pos:start="21:18" pos:end="21:26"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:18" pos:end="21:22">white</name><init pos:start="21:23" pos:end="21:26">=<expr pos:start="21:24" pos:end="21:26"><literal type="number" pos:start="21:24" pos:end="21:26">255</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="21:29" pos:end="21:78">// blackest black and whitest white in the picture</comment>

    <decl_stmt pos:start="23:5" pos:end="23:30"><decl pos:start="23:5" pos:end="23:29"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:20">QPCorrecture</name><init pos:start="23:21" pos:end="23:29">= <expr pos:start="23:23" pos:end="23:29"><literal type="number" pos:start="23:23" pos:end="23:25">256</literal><operator pos:start="23:26" pos:end="23:26">*</operator><literal type="number" pos:start="23:27" pos:end="23:29">256</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="27:5" pos:end="30:0"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:17">copyAhead</name></decl>;</decl_stmt>

<cpp:if pos:start="29:1" pos:end="29:19">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:19">HAVE_MMX_INLINE</name></expr></cpp:if>

    <decl_stmt pos:start="31:5" pos:end="34:0"><decl pos:start="31:5" pos:end="31:9"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:9">i</name></decl>;</decl_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>



    <decl_stmt pos:start="37:5" pos:end="37:59"><decl pos:start="37:5" pos:end="37:58"><type pos:start="37:5" pos:end="37:13"><specifier pos:start="37:5" pos:end="37:9">const</specifier> <name pos:start="37:11" pos:end="37:13">int</name></type> <name pos:start="37:15" pos:end="37:22">qpHShift</name><init pos:start="37:23" pos:end="37:58">= <expr pos:start="37:25" pos:end="37:58"><ternary pos:start="37:25" pos:end="37:58"><condition pos:start="37:25" pos:end="37:33"><expr pos:start="37:25" pos:end="37:31"><name pos:start="37:25" pos:end="37:31">isColor</name></expr> ?</condition><then pos:start="37:35" pos:end="37:54"> <expr pos:start="37:35" pos:end="37:54"><literal type="number" pos:start="37:35" pos:end="37:36">4</literal><operator pos:start="37:36" pos:end="37:36">-</operator><name pos:start="37:37" pos:end="37:54"><name pos:start="37:37" pos:end="37:37">c</name><operator pos:start="37:38" pos:end="37:38">.</operator><name pos:start="37:39" pos:end="37:54">hChromaSubSample</name></name></expr> </then><else pos:start="37:56" pos:end="37:58">: <expr pos:start="37:58" pos:end="37:58"><literal type="number" pos:start="37:58" pos:end="37:58">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:59"><decl pos:start="39:5" pos:end="39:58"><type pos:start="39:5" pos:end="39:13"><specifier pos:start="39:5" pos:end="39:9">const</specifier> <name pos:start="39:11" pos:end="39:13">int</name></type> <name pos:start="39:15" pos:end="39:22">qpVShift</name><init pos:start="39:23" pos:end="39:58">= <expr pos:start="39:25" pos:end="39:58"><ternary pos:start="39:25" pos:end="39:58"><condition pos:start="39:25" pos:end="39:33"><expr pos:start="39:25" pos:end="39:31"><name pos:start="39:25" pos:end="39:31">isColor</name></expr> ?</condition><then pos:start="39:35" pos:end="39:54"> <expr pos:start="39:35" pos:end="39:54"><literal type="number" pos:start="39:35" pos:end="39:36">4</literal><operator pos:start="39:36" pos:end="39:36">-</operator><name pos:start="39:37" pos:end="39:54"><name pos:start="39:37" pos:end="39:37">c</name><operator pos:start="39:38" pos:end="39:38">.</operator><name pos:start="39:39" pos:end="39:54">vChromaSubSample</name></name></expr> </then><else pos:start="39:56" pos:end="39:58">: <expr pos:start="39:58" pos:end="39:58"><literal type="number" pos:start="39:58" pos:end="39:58">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <comment type="line" pos:start="43:5" pos:end="43:18">//FIXME remove</comment>

    <decl_stmt pos:start="45:5" pos:end="45:46"><decl pos:start="45:5" pos:end="45:45"><type pos:start="45:5" pos:end="45:20"><name pos:start="45:5" pos:end="45:12">uint64_t</name> <modifier pos:start="45:14" pos:end="45:14">*</modifier> <specifier pos:start="45:16" pos:end="45:20">const</specifier></type> <name pos:start="45:22" pos:end="45:31">yHistogram</name><init pos:start="45:32" pos:end="45:45">= <expr pos:start="45:34" pos:end="45:45"><name pos:start="45:34" pos:end="45:45"><name pos:start="45:34" pos:end="45:34">c</name><operator pos:start="45:35" pos:end="45:35">.</operator><name pos:start="45:36" pos:end="45:45">yHistogram</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:82"><decl pos:start="47:5" pos:end="47:81"><type pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:11">uint8_t</name> <modifier pos:start="47:13" pos:end="47:13">*</modifier> <specifier pos:start="47:15" pos:end="47:19">const</specifier></type> <name pos:start="47:21" pos:end="47:27">tempSrc</name><init pos:start="47:28" pos:end="47:81">= <expr pos:start="47:30" pos:end="47:81"><ternary pos:start="47:30" pos:end="47:81"><condition pos:start="47:30" pos:end="47:44"><expr pos:start="47:30" pos:end="47:42"><name pos:start="47:30" pos:end="47:38">srcStride</name> <operator pos:start="47:40" pos:end="47:40">&gt;</operator> <literal type="number" pos:start="47:42" pos:end="47:42">0</literal></expr> ?</condition><then pos:start="47:46" pos:end="47:54"> <expr pos:start="47:46" pos:end="47:54"><name pos:start="47:46" pos:end="47:54"><name pos:start="47:46" pos:end="47:46">c</name><operator pos:start="47:47" pos:end="47:47">.</operator><name pos:start="47:48" pos:end="47:54">tempSrc</name></name></expr> </then><else pos:start="47:56" pos:end="47:81">: <expr pos:start="47:58" pos:end="47:81"><name pos:start="47:58" pos:end="47:66"><name pos:start="47:58" pos:end="47:58">c</name><operator pos:start="47:59" pos:end="47:59">.</operator><name pos:start="47:60" pos:end="47:66">tempSrc</name></name> <operator pos:start="47:68" pos:end="47:68">-</operator> <literal type="number" pos:start="47:70" pos:end="47:71">23</literal><operator pos:start="47:72" pos:end="47:72">*</operator><name pos:start="47:73" pos:end="47:81">srcStride</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="56:0"><decl pos:start="49:5" pos:end="49:81"><type pos:start="49:5" pos:end="49:19"><name pos:start="49:5" pos:end="49:11">uint8_t</name> <modifier pos:start="49:13" pos:end="49:13">*</modifier> <specifier pos:start="49:15" pos:end="49:19">const</specifier></type> <name pos:start="49:21" pos:end="49:27">tempDst</name><init pos:start="49:28" pos:end="49:81">= <expr pos:start="49:30" pos:end="49:81"><ternary pos:start="49:30" pos:end="49:81"><condition pos:start="49:30" pos:end="49:44"><expr pos:start="49:30" pos:end="49:42"><name pos:start="49:30" pos:end="49:38">dstStride</name> <operator pos:start="49:40" pos:end="49:40">&gt;</operator> <literal type="number" pos:start="49:42" pos:end="49:42">0</literal></expr> ?</condition><then pos:start="49:46" pos:end="49:54"> <expr pos:start="49:46" pos:end="49:54"><name pos:start="49:46" pos:end="49:54"><name pos:start="49:46" pos:end="49:46">c</name><operator pos:start="49:47" pos:end="49:47">.</operator><name pos:start="49:48" pos:end="49:54">tempDst</name></name></expr> </then><else pos:start="49:56" pos:end="49:81">: <expr pos:start="49:58" pos:end="49:81"><name pos:start="49:58" pos:end="49:66"><name pos:start="49:58" pos:end="49:58">c</name><operator pos:start="49:59" pos:end="49:59">.</operator><name pos:start="49:60" pos:end="49:66">tempDst</name></name> <operator pos:start="49:68" pos:end="49:68">-</operator> <literal type="number" pos:start="49:70" pos:end="49:71">23</literal><operator pos:start="49:72" pos:end="49:72">*</operator><name pos:start="49:73" pos:end="49:81">dstStride</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:start="51:5" pos:end="51:64">//const int mbWidth= isColor ? (width+7)&gt;&gt;3 : (width+15)&gt;&gt;4;</comment>



<cpp:if pos:start="55:1" pos:end="55:19">#<cpp:directive pos:start="55:2" pos:end="55:3">if</cpp:directive> <expr pos:start="55:5" pos:end="55:19"><name pos:start="55:5" pos:end="55:19">HAVE_MMX_INLINE</name></expr></cpp:if>

    <for pos:start="57:5" pos:end="74:0">for<control pos:start="57:8" pos:end="57:23">(<init pos:start="57:9" pos:end="57:12"><expr pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:9">i</name><operator pos:start="57:10" pos:end="57:10">=</operator><literal type="number" pos:start="57:11" pos:end="57:11">0</literal></expr>;</init> <condition pos:start="57:14" pos:end="57:18"><expr pos:start="57:14" pos:end="57:17"><name pos:start="57:14" pos:end="57:14">i</name><operator pos:start="57:15" pos:end="57:15">&lt;</operator><literal type="number" pos:start="57:16" pos:end="57:17">57</literal></expr>;</condition> <incr pos:start="57:20" pos:end="57:22"><expr pos:start="57:20" pos:end="57:22"><name pos:start="57:20" pos:end="57:20">i</name><operator pos:start="57:21" pos:end="57:22">++</operator></expr></incr>)</control><block pos:start="57:24" pos:end="74:0">{<block_content pos:start="59:9" pos:end="69:51">

        <decl_stmt pos:start="59:9" pos:end="59:53"><decl pos:start="59:9" pos:end="59:52"><type pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">int</name></type> <name pos:start="59:13" pos:end="59:18">offset</name><init pos:start="59:19" pos:end="59:52">= <expr pos:start="59:21" pos:end="59:52"><operator pos:start="59:21" pos:end="59:21">(</operator><operator pos:start="59:22" pos:end="59:22">(</operator><name pos:start="59:23" pos:end="59:23">i</name><operator pos:start="59:24" pos:end="59:24">*</operator><name pos:start="59:25" pos:end="59:43"><name pos:start="59:25" pos:end="59:25">c</name><operator pos:start="59:26" pos:end="59:26">.</operator><name pos:start="59:27" pos:end="59:32">ppMode</name><operator pos:start="59:33" pos:end="59:33">.</operator><name pos:start="59:34" pos:end="59:43">baseDcDiff</name></name><operator pos:start="59:44" pos:end="59:44">)</operator><operator pos:start="59:45" pos:end="59:46">&gt;&gt;</operator><literal type="number" pos:start="59:47" pos:end="59:47">8</literal><operator pos:start="59:48" pos:end="59:48">)</operator> <operator pos:start="59:50" pos:end="59:50">+</operator> <literal type="number" pos:start="59:52" pos:end="59:52">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="61:9" pos:end="61:36"><decl pos:start="61:9" pos:end="61:35"><type pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">int</name></type> <name pos:start="61:13" pos:end="61:21">threshold</name><init pos:start="61:22" pos:end="61:35">= <expr pos:start="61:24" pos:end="61:35"><name pos:start="61:24" pos:end="61:29">offset</name><operator pos:start="61:30" pos:end="61:30">*</operator><literal type="number" pos:start="61:31" pos:end="61:33">2</literal> <operator pos:start="61:33" pos:end="61:33">+</operator> <literal type="number" pos:start="61:35" pos:end="61:35">1</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:40"><expr pos:start="63:9" pos:end="63:39"><name pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:9">c</name><operator pos:start="63:10" pos:end="63:10">.</operator><name pos:start="63:11" pos:end="63:21">mmxDcOffset</name><index pos:start="63:22" pos:end="63:24">[<expr pos:start="63:23" pos:end="63:23"><name pos:start="63:23" pos:end="63:23">i</name></expr>]</index></name><operator pos:start="63:25" pos:end="63:25">=</operator> <literal type="number" pos:start="63:27" pos:end="63:32">0x7F</literal> <operator pos:start="63:32" pos:end="63:32">-</operator> <name pos:start="63:34" pos:end="63:39">offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:46"><expr pos:start="65:9" pos:end="65:45"><name pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:9">c</name><operator pos:start="65:10" pos:end="65:10">.</operator><name pos:start="65:11" pos:end="65:24">mmxDcThreshold</name><index pos:start="65:25" pos:end="65:27">[<expr pos:start="65:26" pos:end="65:26"><name pos:start="65:26" pos:end="65:26">i</name></expr>]</index></name><operator pos:start="65:28" pos:end="65:28">=</operator> <literal type="number" pos:start="65:30" pos:end="65:35">0x7F</literal> <operator pos:start="65:35" pos:end="65:35">-</operator> <name pos:start="65:37" pos:end="65:45">threshold</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:48"><expr pos:start="67:9" pos:end="67:47"><name pos:start="67:9" pos:end="67:24"><name pos:start="67:9" pos:end="67:9">c</name><operator pos:start="67:10" pos:end="67:10">.</operator><name pos:start="67:11" pos:end="67:21">mmxDcOffset</name><index pos:start="67:22" pos:end="67:24">[<expr pos:start="67:23" pos:end="67:23"><name pos:start="67:23" pos:end="67:23">i</name></expr>]</index></name><operator pos:start="67:25" pos:end="67:26">*=</operator> <literal type="number" pos:start="67:28" pos:end="67:47">0x0101010101010101LL</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:51"><expr pos:start="69:9" pos:end="69:50"><name pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:9">c</name><operator pos:start="69:10" pos:end="69:10">.</operator><name pos:start="69:11" pos:end="69:24">mmxDcThreshold</name><index pos:start="69:25" pos:end="69:27">[<expr pos:start="69:26" pos:end="69:26"><name pos:start="69:26" pos:end="69:26">i</name></expr>]</index></name><operator pos:start="69:28" pos:end="69:29">*=</operator> <literal type="number" pos:start="69:31" pos:end="69:50">0x0101010101010101LL</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="77:5" pos:end="99:21"><if pos:start="77:5" pos:end="77:52">if<condition pos:start="77:7" pos:end="77:38">(<expr pos:start="77:8" pos:end="77:37"><name pos:start="77:8" pos:end="77:11">mode</name> <operator pos:start="77:13" pos:end="77:13">&amp;</operator> <name pos:start="77:15" pos:end="77:37">CUBIC_IPOL_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="77:40" pos:end="77:52"><block_content pos:start="77:40" pos:end="77:52"> <expr_stmt pos:start="77:40" pos:end="77:52"><expr pos:start="77:40" pos:end="77:51"><name pos:start="77:40" pos:end="77:48">copyAhead</name><operator pos:start="77:49" pos:end="77:49">=</operator><literal type="number" pos:start="77:50" pos:end="77:51">16</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="79:5" pos:end="83:60">else if<condition pos:start="79:12" pos:end="83:46">(   <expr pos:start="79:16" pos:end="83:45"><operator pos:start="79:16" pos:end="79:16">(</operator><name pos:start="79:17" pos:end="79:20">mode</name> <operator pos:start="79:22" pos:end="79:22">&amp;</operator> <name pos:start="79:24" pos:end="79:48">LINEAR_BLEND_DEINT_FILTER</name><operator pos:start="79:49" pos:end="79:49">)</operator>

            <operator pos:start="81:13" pos:end="81:14">||</operator> <operator pos:start="81:16" pos:end="81:16">(</operator><name pos:start="81:17" pos:end="81:20">mode</name> <operator pos:start="81:22" pos:end="81:22">&amp;</operator> <name pos:start="81:24" pos:end="81:42">FFMPEG_DEINT_FILTER</name><operator pos:start="81:43" pos:end="81:43">)</operator>

            <operator pos:start="83:13" pos:end="83:14">||</operator> <operator pos:start="83:16" pos:end="83:16">(</operator><name pos:start="83:17" pos:end="83:20">mode</name> <operator pos:start="83:22" pos:end="83:22">&amp;</operator> <name pos:start="83:24" pos:end="83:44">LOWPASS5_DEINT_FILTER</name><operator pos:start="83:45" pos:end="83:45">)</operator></expr>)</condition><block type="pseudo" pos:start="83:48" pos:end="83:60"><block_content pos:start="83:48" pos:end="83:60"> <expr_stmt pos:start="83:48" pos:end="83:60"><expr pos:start="83:48" pos:end="83:59"><name pos:start="83:48" pos:end="83:56">copyAhead</name><operator pos:start="83:57" pos:end="83:57">=</operator><literal type="number" pos:start="83:58" pos:end="83:59">14</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="85:5" pos:end="91:50">else if<condition pos:start="85:12" pos:end="91:36">(   <expr pos:start="85:16" pos:end="91:35"><operator pos:start="85:16" pos:end="85:16">(</operator><name pos:start="85:17" pos:end="85:20">mode</name> <operator pos:start="85:22" pos:end="85:22">&amp;</operator> <name pos:start="85:24" pos:end="85:32">V_DEBLOCK</name><operator pos:start="85:33" pos:end="85:33">)</operator>

            <operator pos:start="87:13" pos:end="87:14">||</operator> <operator pos:start="87:16" pos:end="87:16">(</operator><name pos:start="87:17" pos:end="87:20">mode</name> <operator pos:start="87:22" pos:end="87:22">&amp;</operator> <name pos:start="87:24" pos:end="87:47">LINEAR_IPOL_DEINT_FILTER</name><operator pos:start="87:48" pos:end="87:48">)</operator>

            <operator pos:start="89:13" pos:end="89:14">||</operator> <operator pos:start="89:16" pos:end="89:16">(</operator><name pos:start="89:17" pos:end="89:20">mode</name> <operator pos:start="89:22" pos:end="89:22">&amp;</operator> <name pos:start="89:24" pos:end="89:42">MEDIAN_DEINT_FILTER</name><operator pos:start="89:43" pos:end="89:43">)</operator>

            <operator pos:start="91:13" pos:end="91:14">||</operator> <operator pos:start="91:16" pos:end="91:16">(</operator><name pos:start="91:17" pos:end="91:20">mode</name> <operator pos:start="91:22" pos:end="91:22">&amp;</operator> <name pos:start="91:24" pos:end="91:34">V_A_DEBLOCK</name><operator pos:start="91:35" pos:end="91:35">)</operator></expr>)</condition><block type="pseudo" pos:start="91:38" pos:end="91:50"><block_content pos:start="91:38" pos:end="91:50"> <expr_stmt pos:start="91:38" pos:end="91:50"><expr pos:start="91:38" pos:end="91:49"><name pos:start="91:38" pos:end="91:46">copyAhead</name><operator pos:start="91:47" pos:end="91:47">=</operator><literal type="number" pos:start="91:48" pos:end="91:49">13</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="93:5" pos:end="93:45">else if<condition pos:start="93:12" pos:end="93:31">(<expr pos:start="93:13" pos:end="93:30"><name pos:start="93:13" pos:end="93:16">mode</name> <operator pos:start="93:18" pos:end="93:18">&amp;</operator> <name pos:start="93:20" pos:end="93:30">V_X1_FILTER</name></expr>)</condition><block type="pseudo" pos:start="93:33" pos:end="93:45"><block_content pos:start="93:33" pos:end="93:45"> <expr_stmt pos:start="93:33" pos:end="93:45"><expr pos:start="93:33" pos:end="93:44"><name pos:start="93:33" pos:end="93:41">copyAhead</name><operator pos:start="93:42" pos:end="93:42">=</operator><literal type="number" pos:start="93:43" pos:end="93:44">11</literal></expr>;</expr_stmt></block_content></block></if>

<comment type="line" pos:start="95:1" pos:end="95:48">//    else if(mode &amp; V_RK1_FILTER) copyAhead=10;</comment>

    <if type="elseif" pos:start="97:5" pos:end="97:39">else if<condition pos:start="97:12" pos:end="97:26">(<expr pos:start="97:13" pos:end="97:25"><name pos:start="97:13" pos:end="97:16">mode</name> <operator pos:start="97:18" pos:end="97:18">&amp;</operator> <name pos:start="97:20" pos:end="97:25">DERING</name></expr>)</condition><block type="pseudo" pos:start="97:28" pos:end="97:39"><block_content pos:start="97:28" pos:end="97:39"> <expr_stmt pos:start="97:28" pos:end="97:39"><expr pos:start="97:28" pos:end="97:38"><name pos:start="97:28" pos:end="97:36">copyAhead</name><operator pos:start="97:37" pos:end="97:37">=</operator><literal type="number" pos:start="97:38" pos:end="97:38">9</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="99:5" pos:end="99:21">else<block type="pseudo" pos:start="99:10" pos:end="99:21"><block_content pos:start="99:10" pos:end="99:21"> <expr_stmt pos:start="99:10" pos:end="99:21"><expr pos:start="99:10" pos:end="99:20"><name pos:start="99:10" pos:end="99:18">copyAhead</name><operator pos:start="99:19" pos:end="99:19">=</operator><literal type="number" pos:start="99:20" pos:end="99:20">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:18"><expr pos:start="103:5" pos:end="103:17"><name pos:start="103:5" pos:end="103:13">copyAhead</name><operator pos:start="103:14" pos:end="103:15">-=</operator> <literal type="number" pos:start="103:17" pos:end="103:17">8</literal></expr>;</expr_stmt>



    <if_stmt pos:start="107:5" pos:end="211:5"><if pos:start="107:5" pos:end="203:5">if<condition pos:start="107:7" pos:end="107:16">(<expr pos:start="107:8" pos:end="107:15"><operator pos:start="107:8" pos:end="107:8">!</operator><name pos:start="107:9" pos:end="107:15">isColor</name></expr>)</condition><block pos:start="107:17" pos:end="203:5">{<block_content pos:start="109:9" pos:end="201:58">

        <decl_stmt pos:start="109:9" pos:end="109:24"><decl pos:start="109:9" pos:end="109:23"><type pos:start="109:9" pos:end="109:16"><name pos:start="109:9" pos:end="109:16">uint64_t</name></type> <name pos:start="109:18" pos:end="109:20">sum</name><init pos:start="109:21" pos:end="109:23">= <expr pos:start="109:23" pos:end="109:23"><literal type="number" pos:start="109:23" pos:end="109:23">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="111:9" pos:end="111:14"><decl pos:start="111:9" pos:end="111:13"><type pos:start="111:9" pos:end="111:11"><name pos:start="111:9" pos:end="111:11">int</name></type> <name pos:start="111:13" pos:end="111:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="113:9" pos:end="113:28"><decl pos:start="113:9" pos:end="113:27"><type pos:start="113:9" pos:end="113:16"><name pos:start="113:9" pos:end="113:16">uint64_t</name></type> <name pos:start="113:18" pos:end="113:27">maxClipped</name></decl>;</decl_stmt>

        <decl_stmt pos:start="115:9" pos:end="115:25"><decl pos:start="115:9" pos:end="115:24"><type pos:start="115:9" pos:end="115:16"><name pos:start="115:9" pos:end="115:16">uint64_t</name></type> <name pos:start="115:18" pos:end="115:24">clipped</name></decl>;</decl_stmt>

        <decl_stmt pos:start="117:9" pos:end="117:21"><decl pos:start="117:9" pos:end="117:20"><type pos:start="117:9" pos:end="117:14"><name pos:start="117:9" pos:end="117:14">double</name></type> <name pos:start="117:16" pos:end="117:20">scale</name></decl>;</decl_stmt>



        <expr_stmt pos:start="121:9" pos:end="121:21"><expr pos:start="121:9" pos:end="121:20"><name pos:start="121:9" pos:end="121:18"><name pos:start="121:9" pos:end="121:9">c</name><operator pos:start="121:10" pos:end="121:10">.</operator><name pos:start="121:11" pos:end="121:18">frameNum</name></name><operator pos:start="121:19" pos:end="121:20">++</operator></expr>;</expr_stmt>

        <comment type="line" pos:start="123:9" pos:end="123:48">// first frame is fscked so we ignore it</comment>

        <if_stmt pos:start="125:9" pos:end="125:66"><if pos:start="125:9" pos:end="125:66">if<condition pos:start="125:11" pos:end="125:27">(<expr pos:start="125:12" pos:end="125:26"><name pos:start="125:12" pos:end="125:21"><name pos:start="125:12" pos:end="125:12">c</name><operator pos:start="125:13" pos:end="125:13">.</operator><name pos:start="125:14" pos:end="125:21">frameNum</name></name> <operator pos:start="125:23" pos:end="125:24">==</operator> <literal type="number" pos:start="125:26" pos:end="125:26">1</literal></expr>)</condition><block type="pseudo" pos:start="125:29" pos:end="125:66"><block_content pos:start="125:29" pos:end="125:66"> <expr_stmt pos:start="125:29" pos:end="125:66"><expr pos:start="125:29" pos:end="125:65"><name pos:start="125:29" pos:end="125:41"><name pos:start="125:29" pos:end="125:38">yHistogram</name><index pos:start="125:39" pos:end="125:41">[<expr pos:start="125:40" pos:end="125:40"><literal type="number" pos:start="125:40" pos:end="125:40">0</literal></expr>]</index></name><operator pos:start="125:42" pos:end="125:42">=</operator> <name pos:start="125:44" pos:end="125:48">width</name><operator pos:start="125:49" pos:end="125:49">*</operator><name pos:start="125:50" pos:end="125:55">height</name><operator pos:start="125:56" pos:end="125:56">/</operator><literal type="number" pos:start="125:57" pos:end="125:58">64</literal><operator pos:start="125:59" pos:end="125:59">*</operator><literal type="number" pos:start="125:60" pos:end="125:61">15</literal><operator pos:start="125:62" pos:end="125:62">/</operator><literal type="number" pos:start="125:63" pos:end="125:65">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <for pos:start="129:9" pos:end="133:9">for<control pos:start="129:12" pos:end="129:28">(<init pos:start="129:13" pos:end="129:16"><expr pos:start="129:13" pos:end="129:15"><name pos:start="129:13" pos:end="129:13">i</name><operator pos:start="129:14" pos:end="129:14">=</operator><literal type="number" pos:start="129:15" pos:end="129:15">0</literal></expr>;</init> <condition pos:start="129:18" pos:end="129:23"><expr pos:start="129:18" pos:end="129:22"><name pos:start="129:18" pos:end="129:18">i</name><operator pos:start="129:19" pos:end="129:19">&lt;</operator><literal type="number" pos:start="129:20" pos:end="129:22">256</literal></expr>;</condition> <incr pos:start="129:25" pos:end="129:27"><expr pos:start="129:25" pos:end="129:27"><name pos:start="129:25" pos:end="129:25">i</name><operator pos:start="129:26" pos:end="129:27">++</operator></expr></incr>)</control><block pos:start="129:29" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:32">

            <expr_stmt pos:start="131:13" pos:end="131:32"><expr pos:start="131:13" pos:end="131:31"><name pos:start="131:13" pos:end="131:15">sum</name><operator pos:start="131:16" pos:end="131:17">+=</operator> <name pos:start="131:19" pos:end="131:31"><name pos:start="131:19" pos:end="131:28">yHistogram</name><index pos:start="131:29" pos:end="131:31">[<expr pos:start="131:30" pos:end="131:30"><name pos:start="131:30" pos:end="131:30">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="137:9" pos:end="137:61">/* We always get a completely black picture first. */</comment>

        <expr_stmt pos:start="139:9" pos:end="139:67"><expr pos:start="139:9" pos:end="139:66"><name pos:start="139:9" pos:end="139:18">maxClipped</name><operator pos:start="139:19" pos:end="139:19">=</operator> <operator pos:start="139:21" pos:end="139:21">(</operator><name pos:start="139:22" pos:end="139:29">uint64_t</name><operator pos:start="139:30" pos:end="139:30">)</operator><operator pos:start="139:31" pos:end="139:31">(</operator><name pos:start="139:32" pos:end="139:34">sum</name> <operator pos:start="139:36" pos:end="139:36">*</operator> <name pos:start="139:38" pos:end="139:65"><name pos:start="139:38" pos:end="139:38">c</name><operator pos:start="139:39" pos:end="139:39">.</operator><name pos:start="139:40" pos:end="139:45">ppMode</name><operator pos:start="139:46" pos:end="139:46">.</operator><name pos:start="139:47" pos:end="139:65">maxClippedThreshold</name></name><operator pos:start="139:66" pos:end="139:66">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="143:9" pos:end="143:21"><expr pos:start="143:9" pos:end="143:20"><name pos:start="143:9" pos:end="143:15">clipped</name><operator pos:start="143:16" pos:end="143:16">=</operator> <name pos:start="143:18" pos:end="143:20">sum</name></expr>;</expr_stmt>

        <for pos:start="145:9" pos:end="151:9">for<control pos:start="145:12" pos:end="145:40">(<init pos:start="145:13" pos:end="145:22"><expr pos:start="145:13" pos:end="145:21"><name pos:start="145:13" pos:end="145:17">black</name><operator pos:start="145:18" pos:end="145:18">=</operator><literal type="number" pos:start="145:19" pos:end="145:21">255</literal></expr>;</init> <condition pos:start="145:24" pos:end="145:31"><expr pos:start="145:24" pos:end="145:30"><name pos:start="145:24" pos:end="145:28">black</name><operator pos:start="145:29" pos:end="145:29">&gt;</operator><literal type="number" pos:start="145:30" pos:end="145:30">0</literal></expr>;</condition> <incr pos:start="145:33" pos:end="145:39"><expr pos:start="145:33" pos:end="145:39"><name pos:start="145:33" pos:end="145:37">black</name><operator pos:start="145:38" pos:end="145:39">--</operator></expr></incr>)</control><block pos:start="145:41" pos:end="151:9">{<block_content pos:start="147:13" pos:end="149:40">

            <if_stmt pos:start="147:13" pos:end="147:43"><if pos:start="147:13" pos:end="147:43">if<condition pos:start="147:15" pos:end="147:36">(<expr pos:start="147:16" pos:end="147:35"><name pos:start="147:16" pos:end="147:22">clipped</name> <operator pos:start="147:24" pos:end="147:24">&lt;</operator> <name pos:start="147:26" pos:end="147:35">maxClipped</name></expr>)</condition><block type="pseudo" pos:start="147:38" pos:end="147:43"><block_content pos:start="147:38" pos:end="147:43"> <break pos:start="147:38" pos:end="147:43">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:40"><expr pos:start="149:13" pos:end="149:39"><name pos:start="149:13" pos:end="149:19">clipped</name><operator pos:start="149:20" pos:end="149:21">-=</operator> <name pos:start="149:23" pos:end="149:39"><name pos:start="149:23" pos:end="149:32">yHistogram</name><index pos:start="149:33" pos:end="149:39">[<expr pos:start="149:34" pos:end="149:38"><name pos:start="149:34" pos:end="149:38">black</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="155:9" pos:end="155:21"><expr pos:start="155:9" pos:end="155:20"><name pos:start="155:9" pos:end="155:15">clipped</name><operator pos:start="155:16" pos:end="155:16">=</operator> <name pos:start="155:18" pos:end="155:20">sum</name></expr>;</expr_stmt>

        <for pos:start="157:9" pos:end="163:9">for<control pos:start="157:12" pos:end="157:40">(<init pos:start="157:13" pos:end="157:20"><expr pos:start="157:13" pos:end="157:19"><name pos:start="157:13" pos:end="157:17">white</name><operator pos:start="157:18" pos:end="157:18">=</operator><literal type="number" pos:start="157:19" pos:end="157:19">0</literal></expr>;</init> <condition pos:start="157:22" pos:end="157:31"><expr pos:start="157:22" pos:end="157:30"><name pos:start="157:22" pos:end="157:26">white</name><operator pos:start="157:27" pos:end="157:27">&lt;</operator><literal type="number" pos:start="157:28" pos:end="157:30">256</literal></expr>;</condition> <incr pos:start="157:33" pos:end="157:39"><expr pos:start="157:33" pos:end="157:39"><name pos:start="157:33" pos:end="157:37">white</name><operator pos:start="157:38" pos:end="157:39">++</operator></expr></incr>)</control><block pos:start="157:41" pos:end="163:9">{<block_content pos:start="159:13" pos:end="161:40">

            <if_stmt pos:start="159:13" pos:end="159:43"><if pos:start="159:13" pos:end="159:43">if<condition pos:start="159:15" pos:end="159:36">(<expr pos:start="159:16" pos:end="159:35"><name pos:start="159:16" pos:end="159:22">clipped</name> <operator pos:start="159:24" pos:end="159:24">&lt;</operator> <name pos:start="159:26" pos:end="159:35">maxClipped</name></expr>)</condition><block type="pseudo" pos:start="159:38" pos:end="159:43"><block_content pos:start="159:38" pos:end="159:43"> <break pos:start="159:38" pos:end="159:43">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:40"><expr pos:start="161:13" pos:end="161:39"><name pos:start="161:13" pos:end="161:19">clipped</name><operator pos:start="161:20" pos:end="161:21">-=</operator> <name pos:start="161:23" pos:end="161:39"><name pos:start="161:23" pos:end="161:32">yHistogram</name><index pos:start="161:33" pos:end="161:39">[<expr pos:start="161:34" pos:end="161:38"><name pos:start="161:34" pos:end="161:38">white</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="167:9" pos:end="172:0"><expr pos:start="167:9" pos:end="167:92"><name pos:start="167:9" pos:end="167:13">scale</name><operator pos:start="167:14" pos:end="167:14">=</operator> <operator pos:start="167:16" pos:end="167:16">(</operator><name pos:start="167:17" pos:end="167:22">double</name><operator pos:start="167:23" pos:end="167:23">)</operator><operator pos:start="167:24" pos:end="167:24">(</operator><name pos:start="167:25" pos:end="167:44"><name pos:start="167:25" pos:end="167:25">c</name><operator pos:start="167:26" pos:end="167:26">.</operator><name pos:start="167:27" pos:end="167:32">ppMode</name><operator pos:start="167:33" pos:end="167:33">.</operator><name pos:start="167:34" pos:end="167:44">maxAllowedY</name></name> <operator pos:start="167:46" pos:end="167:46">-</operator> <name pos:start="167:48" pos:end="167:67"><name pos:start="167:48" pos:end="167:48">c</name><operator pos:start="167:49" pos:end="167:49">.</operator><name pos:start="167:50" pos:end="167:55">ppMode</name><operator pos:start="167:56" pos:end="167:56">.</operator><name pos:start="167:57" pos:end="167:67">minAllowedY</name></name><operator pos:start="167:68" pos:end="167:68">)</operator> <operator pos:start="167:70" pos:end="167:70">/</operator> <operator pos:start="167:72" pos:end="167:72">(</operator><name pos:start="167:73" pos:end="167:78">double</name><operator pos:start="167:79" pos:end="167:79">)</operator><operator pos:start="167:80" pos:end="167:80">(</operator><name pos:start="167:81" pos:end="167:85">white</name><operator pos:start="167:86" pos:end="167:86">-</operator><name pos:start="167:87" pos:end="167:91">black</name><operator pos:start="167:92" pos:end="167:92">)</operator></expr>;</expr_stmt>



<cpp:if pos:start="171:1" pos:end="171:22">#<cpp:directive pos:start="171:2" pos:end="171:3">if</cpp:directive> <expr pos:start="171:5" pos:end="171:22"><name pos:start="171:5" pos:end="171:22">HAVE_MMXEXT_INLINE</name></expr></cpp:if>

        <expr_stmt pos:start="173:9" pos:end="173:54"><expr pos:start="173:9" pos:end="173:53"><name pos:start="173:9" pos:end="173:22"><name pos:start="173:9" pos:end="173:9">c</name><operator pos:start="173:10" pos:end="173:10">.</operator><name pos:start="173:11" pos:end="173:22">packedYScale</name></name><operator pos:start="173:23" pos:end="173:23">=</operator> <operator pos:start="173:25" pos:end="173:25">(</operator><name pos:start="173:26" pos:end="173:33">uint16_t</name><operator pos:start="173:34" pos:end="173:34">)</operator><operator pos:start="173:35" pos:end="173:35">(</operator><name pos:start="173:36" pos:end="173:40">scale</name><operator pos:start="173:41" pos:end="173:41">*</operator><literal type="number" pos:start="173:42" pos:end="173:48">256.0</literal> <operator pos:start="173:48" pos:end="173:48">+</operator> <literal type="number" pos:start="173:50" pos:end="173:52">0.5</literal><operator pos:start="173:53" pos:end="173:53">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="178:0"><expr pos:start="175:9" pos:end="175:86"><name pos:start="175:9" pos:end="175:23"><name pos:start="175:9" pos:end="175:9">c</name><operator pos:start="175:10" pos:end="175:10">.</operator><name pos:start="175:11" pos:end="175:23">packedYOffset</name></name><operator pos:start="175:24" pos:end="175:24">=</operator> <operator pos:start="175:26" pos:end="175:26">(</operator><operator pos:start="175:27" pos:end="175:27">(</operator><operator pos:start="175:28" pos:end="175:28">(</operator><name pos:start="175:29" pos:end="175:33">black</name><operator pos:start="175:34" pos:end="175:34">*</operator><name pos:start="175:35" pos:end="175:48"><name pos:start="175:35" pos:end="175:35">c</name><operator pos:start="175:36" pos:end="175:36">.</operator><name pos:start="175:37" pos:end="175:48">packedYScale</name></name><operator pos:start="175:49" pos:end="175:49">)</operator><operator pos:start="175:50" pos:end="175:51">&gt;&gt;</operator><literal type="number" pos:start="175:52" pos:end="175:52">8</literal><operator pos:start="175:53" pos:end="175:53">)</operator> <operator pos:start="175:55" pos:end="175:55">-</operator> <name pos:start="175:57" pos:end="175:76"><name pos:start="175:57" pos:end="175:57">c</name><operator pos:start="175:58" pos:end="175:58">.</operator><name pos:start="175:59" pos:end="175:64">ppMode</name><operator pos:start="175:65" pos:end="175:65">.</operator><name pos:start="175:66" pos:end="175:76">minAllowedY</name></name><operator pos:start="175:77" pos:end="175:77">)</operator> <operator pos:start="175:79" pos:end="175:79">&amp;</operator> <literal type="number" pos:start="175:81" pos:end="175:86">0xFFFF</literal></expr>;</expr_stmt>

<cpp:else pos:start="177:1" pos:end="177:5">#<cpp:directive pos:start="177:2" pos:end="177:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="179:9" pos:end="179:55"><expr pos:start="179:9" pos:end="179:54"><name pos:start="179:9" pos:end="179:22"><name pos:start="179:9" pos:end="179:9">c</name><operator pos:start="179:10" pos:end="179:10">.</operator><name pos:start="179:11" pos:end="179:22">packedYScale</name></name><operator pos:start="179:23" pos:end="179:23">=</operator> <operator pos:start="179:25" pos:end="179:25">(</operator><name pos:start="179:26" pos:end="179:33">uint16_t</name><operator pos:start="179:34" pos:end="179:34">)</operator><operator pos:start="179:35" pos:end="179:35">(</operator><name pos:start="179:36" pos:end="179:40">scale</name><operator pos:start="179:41" pos:end="179:41">*</operator><literal type="number" pos:start="179:42" pos:end="179:49">1024.0</literal> <operator pos:start="179:49" pos:end="179:49">+</operator> <literal type="number" pos:start="179:51" pos:end="179:53">0.5</literal><operator pos:start="179:54" pos:end="179:54">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="184:0"><expr pos:start="181:9" pos:end="181:64"><name pos:start="181:9" pos:end="181:23"><name pos:start="181:9" pos:end="181:9">c</name><operator pos:start="181:10" pos:end="181:10">.</operator><name pos:start="181:11" pos:end="181:23">packedYOffset</name></name><operator pos:start="181:24" pos:end="181:24">=</operator> <operator pos:start="181:26" pos:end="181:26">(</operator><name pos:start="181:27" pos:end="181:31">black</name> <operator pos:start="181:33" pos:end="181:33">-</operator> <name pos:start="181:35" pos:end="181:54"><name pos:start="181:35" pos:end="181:35">c</name><operator pos:start="181:36" pos:end="181:36">.</operator><name pos:start="181:37" pos:end="181:42">ppMode</name><operator pos:start="181:43" pos:end="181:43">.</operator><name pos:start="181:44" pos:end="181:54">minAllowedY</name></name><operator pos:start="181:55" pos:end="181:55">)</operator> <operator pos:start="181:57" pos:end="181:57">&amp;</operator> <literal type="number" pos:start="181:59" pos:end="181:64">0xFFFF</literal></expr>;</expr_stmt>

<cpp:endif pos:start="183:1" pos:end="183:6">#<cpp:directive pos:start="183:2" pos:end="183:6">endif</cpp:directive></cpp:endif>



        <expr_stmt pos:start="187:9" pos:end="187:46"><expr pos:start="187:9" pos:end="187:45"><name pos:start="187:9" pos:end="187:23"><name pos:start="187:9" pos:end="187:9">c</name><operator pos:start="187:10" pos:end="187:10">.</operator><name pos:start="187:11" pos:end="187:23">packedYOffset</name></name><operator pos:start="187:24" pos:end="187:25">|=</operator> <name pos:start="187:27" pos:end="187:41"><name pos:start="187:27" pos:end="187:27">c</name><operator pos:start="187:28" pos:end="187:28">.</operator><name pos:start="187:29" pos:end="187:41">packedYOffset</name></name><operator pos:start="187:42" pos:end="187:43">&lt;&lt;</operator><literal type="number" pos:start="187:44" pos:end="187:45">32</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:46"><expr pos:start="189:9" pos:end="189:45"><name pos:start="189:9" pos:end="189:23"><name pos:start="189:9" pos:end="189:9">c</name><operator pos:start="189:10" pos:end="189:10">.</operator><name pos:start="189:11" pos:end="189:23">packedYOffset</name></name><operator pos:start="189:24" pos:end="189:25">|=</operator> <name pos:start="189:27" pos:end="189:41"><name pos:start="189:27" pos:end="189:27">c</name><operator pos:start="189:28" pos:end="189:28">.</operator><name pos:start="189:29" pos:end="189:41">packedYOffset</name></name><operator pos:start="189:42" pos:end="189:43">&lt;&lt;</operator><literal type="number" pos:start="189:44" pos:end="189:45">16</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="193:9" pos:end="193:44"><expr pos:start="193:9" pos:end="193:43"><name pos:start="193:9" pos:end="193:22"><name pos:start="193:9" pos:end="193:9">c</name><operator pos:start="193:10" pos:end="193:10">.</operator><name pos:start="193:11" pos:end="193:22">packedYScale</name></name><operator pos:start="193:23" pos:end="193:24">|=</operator> <name pos:start="193:26" pos:end="193:39"><name pos:start="193:26" pos:end="193:26">c</name><operator pos:start="193:27" pos:end="193:27">.</operator><name pos:start="193:28" pos:end="193:39">packedYScale</name></name><operator pos:start="193:40" pos:end="193:41">&lt;&lt;</operator><literal type="number" pos:start="193:42" pos:end="193:43">32</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:44"><expr pos:start="195:9" pos:end="195:43"><name pos:start="195:9" pos:end="195:22"><name pos:start="195:9" pos:end="195:9">c</name><operator pos:start="195:10" pos:end="195:10">.</operator><name pos:start="195:11" pos:end="195:22">packedYScale</name></name><operator pos:start="195:23" pos:end="195:24">|=</operator> <name pos:start="195:26" pos:end="195:39"><name pos:start="195:26" pos:end="195:26">c</name><operator pos:start="195:27" pos:end="195:27">.</operator><name pos:start="195:28" pos:end="195:39">packedYScale</name></name><operator pos:start="195:40" pos:end="195:41">&lt;&lt;</operator><literal type="number" pos:start="195:42" pos:end="195:43">16</literal></expr>;</expr_stmt>



        <if_stmt pos:start="199:9" pos:end="201:58"><if pos:start="199:9" pos:end="199:77">if<condition pos:start="199:11" pos:end="199:28">(<expr pos:start="199:12" pos:end="199:27"><name pos:start="199:12" pos:end="199:15">mode</name> <operator pos:start="199:17" pos:end="199:17">&amp;</operator> <name pos:start="199:19" pos:end="199:27">LEVEL_FIX</name></expr>)</condition><block type="pseudo" pos:start="199:37" pos:end="199:77"><block_content pos:start="199:37" pos:end="199:77">        <expr_stmt pos:start="199:37" pos:end="199:77"><expr pos:start="199:37" pos:end="199:76"><name pos:start="199:37" pos:end="199:48">QPCorrecture</name><operator pos:start="199:49" pos:end="199:49">=</operator> <operator pos:start="199:51" pos:end="199:51">(</operator><name pos:start="199:52" pos:end="199:54">int</name><operator pos:start="199:55" pos:end="199:55">)</operator><operator pos:start="199:56" pos:end="199:56">(</operator><name pos:start="199:57" pos:end="199:61">scale</name><operator pos:start="199:62" pos:end="199:62">*</operator><literal type="number" pos:start="199:63" pos:end="199:65">256</literal><operator pos:start="199:66" pos:end="199:66">*</operator><literal type="number" pos:start="199:67" pos:end="199:71">256</literal> <operator pos:start="199:71" pos:end="199:71">+</operator> <literal type="number" pos:start="199:73" pos:end="199:75">0.5</literal><operator pos:start="199:76" pos:end="199:76">)</operator></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="201:9" pos:end="201:58">else<block type="pseudo" pos:start="201:37" pos:end="201:58"><block_content pos:start="201:37" pos:end="201:58">                        <expr_stmt pos:start="201:37" pos:end="201:58"><expr pos:start="201:37" pos:end="201:57"><name pos:start="201:37" pos:end="201:48">QPCorrecture</name><operator pos:start="201:49" pos:end="201:49">=</operator> <literal type="number" pos:start="201:51" pos:end="201:53">256</literal><operator pos:start="201:54" pos:end="201:54">*</operator><literal type="number" pos:start="201:55" pos:end="201:57">256</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if><else pos:start="203:6" pos:end="211:5">else<block pos:start="203:10" pos:end="211:5">{<block_content pos:start="205:9" pos:end="209:30">

        <expr_stmt pos:start="205:9" pos:end="205:45"><expr pos:start="205:9" pos:end="205:44"><name pos:start="205:9" pos:end="205:22"><name pos:start="205:9" pos:end="205:9">c</name><operator pos:start="205:10" pos:end="205:10">.</operator><name pos:start="205:11" pos:end="205:22">packedYScale</name></name><operator pos:start="205:23" pos:end="205:23">=</operator> <literal type="number" pos:start="205:25" pos:end="205:44">0x0100010001000100LL</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:27"><expr pos:start="207:9" pos:end="207:26"><name pos:start="207:9" pos:end="207:23"><name pos:start="207:9" pos:end="207:9">c</name><operator pos:start="207:10" pos:end="207:10">.</operator><name pos:start="207:11" pos:end="207:23">packedYOffset</name></name><operator pos:start="207:24" pos:end="207:24">=</operator> <literal type="number" pos:start="207:26" pos:end="207:26">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:30"><expr pos:start="209:9" pos:end="209:29"><name pos:start="209:9" pos:end="209:20">QPCorrecture</name><operator pos:start="209:21" pos:end="209:21">=</operator> <literal type="number" pos:start="209:23" pos:end="209:25">256</literal><operator pos:start="209:26" pos:end="209:26">*</operator><literal type="number" pos:start="209:27" pos:end="209:29">256</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="215:5" pos:end="215:48">/* copy &amp; deinterlace first row of blocks */</comment>

    <expr_stmt pos:start="217:5" pos:end="217:18"><expr pos:start="217:5" pos:end="217:17"><name pos:start="217:5" pos:end="217:5">y</name><operator pos:start="217:6" pos:end="217:6">=</operator><operator pos:start="217:7" pos:end="217:7">-</operator><name pos:start="217:8" pos:end="217:17">BLOCK_SIZE</name></expr>;</expr_stmt>

    <block pos:start="219:5" pos:end="371:5">{<block_content pos:start="221:9" pos:end="369:9">

        <decl_stmt pos:start="221:9" pos:end="221:53"><decl pos:start="221:9" pos:end="221:52"><type pos:start="221:9" pos:end="221:23"><specifier pos:start="221:9" pos:end="221:13">const</specifier> <name pos:start="221:15" pos:end="221:21">uint8_t</name> <modifier pos:start="221:23" pos:end="221:23">*</modifier></type><name pos:start="221:24" pos:end="221:31">srcBlock</name><init pos:start="221:32" pos:end="221:52">= <expr pos:start="221:34" pos:end="221:52"><operator pos:start="221:34" pos:end="221:34">&amp;</operator><operator pos:start="221:35" pos:end="221:35">(</operator><name pos:start="221:36" pos:end="221:51"><name pos:start="221:36" pos:end="221:38">src</name><index pos:start="221:39" pos:end="221:51">[<expr pos:start="221:40" pos:end="221:50"><name pos:start="221:40" pos:end="221:40">y</name><operator pos:start="221:41" pos:end="221:41">*</operator><name pos:start="221:42" pos:end="221:50">srcStride</name></expr>]</index></name><operator pos:start="221:52" pos:end="221:52">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="223:9" pos:end="223:47"><decl pos:start="223:9" pos:end="223:46"><type pos:start="223:9" pos:end="223:17"><name pos:start="223:9" pos:end="223:15">uint8_t</name> <modifier pos:start="223:17" pos:end="223:17">*</modifier></type><name pos:start="223:18" pos:end="223:25">dstBlock</name><init pos:start="223:26" pos:end="223:46">= <expr pos:start="223:28" pos:end="223:46"><name pos:start="223:28" pos:end="223:34">tempDst</name> <operator pos:start="223:36" pos:end="223:36">+</operator> <name pos:start="223:38" pos:end="223:46">dstStride</name></expr></init></decl>;</decl_stmt>



        <comment type="line" pos:start="227:9" pos:end="227:91">// From this point on it is guaranteed that we can read and write 16 lines downward</comment>

        <comment type="line" pos:start="229:9" pos:end="229:75">// finish 1 block before the next otherwise we might have a problem</comment>

        <comment type="line" pos:start="231:9" pos:end="231:86">// with the L1 Cache of the P4 ... or only a few blocks at a time or soemthing</comment>

        <for pos:start="233:9" pos:end="353:9">for<control pos:start="233:12" pos:end="233:40">(<init pos:start="233:13" pos:end="233:16"><expr pos:start="233:13" pos:end="233:15"><name pos:start="233:13" pos:end="233:13">x</name><operator pos:start="233:14" pos:end="233:14">=</operator><literal type="number" pos:start="233:15" pos:end="233:15">0</literal></expr>;</init> <condition pos:start="233:18" pos:end="233:25"><expr pos:start="233:18" pos:end="233:24"><name pos:start="233:18" pos:end="233:18">x</name><operator pos:start="233:19" pos:end="233:19">&lt;</operator><name pos:start="233:20" pos:end="233:24">width</name></expr>;</condition> <incr pos:start="233:27" pos:end="233:39"><expr pos:start="233:27" pos:end="233:39"><name pos:start="233:27" pos:end="233:27">x</name><operator pos:start="233:28" pos:end="233:29">+=</operator><name pos:start="233:30" pos:end="233:39">BLOCK_SIZE</name></expr></incr>)</control><block pos:start="233:41" pos:end="353:9">{<block_content pos:start="253:13" pos:end="351:24">



<cpp:if pos:start="237:1" pos:end="237:22">#<cpp:directive pos:start="237:2" pos:end="237:3">if</cpp:directive> <expr pos:start="237:5" pos:end="237:22"><name pos:start="237:5" pos:end="237:22">HAVE_MMXEXT_INLINE</name></expr></cpp:if>

<comment type="block" pos:start="239:1" pos:end="249:2">/*

            prefetchnta(srcBlock + (((x&gt;&gt;2)&amp;6) + 5)*srcStride + 32);

            prefetchnta(srcBlock + (((x&gt;&gt;2)&amp;6) + 6)*srcStride + 32);

            prefetcht0(dstBlock + (((x&gt;&gt;2)&amp;6) + 5)*dstStride + 32);

            prefetcht0(dstBlock + (((x&gt;&gt;2)&amp;6) + 6)*dstStride + 32);

*/</comment>



            <asm pos:start="253:13" pos:end="306:0">__asm__(

                "mov %4, %%"REG_a"              \n\t"

                "shr $2, %%"REG_a"              \n\t"

                "and $6, %%"REG_a"              \n\t"

                "add %5, %%"REG_a"              \n\t"

                "mov %%"REG_a", %%"REG_d"       \n\t"

                "imul %1, %%"REG_a"             \n\t"

                "imul %3, %%"REG_d"             \n\t"

                "prefetchnta 32(%%"REG_a", %0)  \n\t"

                "prefetcht0 32(%%"REG_d", %2)   \n\t"

                "add %1, %%"REG_a"              \n\t"

                "add %3, %%"REG_d"              \n\t"

                "prefetchnta 32(%%"REG_a", %0)  \n\t"

                "prefetcht0 32(%%"REG_d", %2)   \n\t"

                :: "r" (srcBlock), "r" ((x86_reg)srcStride), "r" (dstBlock), "r" ((x86_reg)dstStride),

                "g" ((x86_reg)x), "g" ((x86_reg)copyAhead)

                : "%"REG_a, "%"REG_d

            );</asm>



<cpp:elif pos:start="291:1" pos:end="291:26">#<cpp:directive pos:start="291:2" pos:end="291:5">elif</cpp:directive> <expr pos:start="291:7" pos:end="291:26"><name pos:start="291:7" pos:end="291:26">HAVE_AMD3DNOW_INLINE</name></expr></cpp:elif>

<comment type="line" pos:start="293:1" pos:end="293:95">//FIXME check if this is faster on an 3dnow chip or if it is faster without the prefetch or ...</comment>

<comment type="block" pos:start="295:1" pos:end="303:2">/*          prefetch(srcBlock + (((x&gt;&gt;3)&amp;3) + 5)*srcStride + 32);

            prefetch(srcBlock + (((x&gt;&gt;3)&amp;3) + 9)*srcStride + 32);

            prefetchw(dstBlock + (((x&gt;&gt;3)&amp;3) + 5)*dstStride + 32);

            prefetchw(dstBlock + (((x&gt;&gt;3)&amp;3) + 9)*dstStride + 32);

*/</comment>

<cpp:endif pos:start="305:1" pos:end="305:6">#<cpp:directive pos:start="305:2" pos:end="305:6">endif</cpp:directive></cpp:endif>



            <expr_stmt pos:start="309:13" pos:end="311:101"><expr pos:start="309:13" pos:end="311:100"><call pos:start="309:13" pos:end="311:100"><call pos:start="309:13" pos:end="309:29"><name pos:start="309:13" pos:end="309:18">RENAME</name><argument_list pos:start="309:19" pos:end="309:29">(<argument pos:start="309:20" pos:end="309:28"><expr pos:start="309:20" pos:end="309:28"><name pos:start="309:20" pos:end="309:28">blockCopy</name></expr></argument>)</argument_list></call><argument_list pos:start="309:30" pos:end="311:100">(<argument pos:start="309:31" pos:end="309:52"><expr pos:start="309:31" pos:end="309:52"><name pos:start="309:31" pos:end="309:38">dstBlock</name> <operator pos:start="309:40" pos:end="309:40">+</operator> <name pos:start="309:42" pos:end="309:50">dstStride</name><operator pos:start="309:51" pos:end="309:51">*</operator><literal type="number" pos:start="309:52" pos:end="309:52">8</literal></expr></argument>, <argument pos:start="309:55" pos:end="309:63"><expr pos:start="309:55" pos:end="309:63"><name pos:start="309:55" pos:end="309:63">dstStride</name></expr></argument>,

                              <argument pos:start="311:31" pos:end="311:52"><expr pos:start="311:31" pos:end="311:52"><name pos:start="311:31" pos:end="311:38">srcBlock</name> <operator pos:start="311:40" pos:end="311:40">+</operator> <name pos:start="311:42" pos:end="311:50">srcStride</name><operator pos:start="311:51" pos:end="311:51">*</operator><literal type="number" pos:start="311:52" pos:end="311:52">8</literal></expr></argument>, <argument pos:start="311:55" pos:end="311:63"><expr pos:start="311:55" pos:end="311:63"><name pos:start="311:55" pos:end="311:63">srcStride</name></expr></argument>, <argument pos:start="311:66" pos:end="311:81"><expr pos:start="311:66" pos:end="311:81"><name pos:start="311:66" pos:end="311:69">mode</name> <operator pos:start="311:71" pos:end="311:71">&amp;</operator> <name pos:start="311:73" pos:end="311:81">LEVEL_FIX</name></expr></argument>, <argument pos:start="311:84" pos:end="311:99"><expr pos:start="311:84" pos:end="311:99"><operator pos:start="311:84" pos:end="311:84">&amp;</operator><name pos:start="311:85" pos:end="311:99"><name pos:start="311:85" pos:end="311:85">c</name><operator pos:start="311:86" pos:end="311:86">.</operator><name pos:start="311:87" pos:end="311:99">packedYOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="315:13" pos:end="315:65"><expr pos:start="315:13" pos:end="315:64"><call pos:start="315:13" pos:end="315:64"><call pos:start="315:13" pos:end="315:29"><name pos:start="315:13" pos:end="315:18">RENAME</name><argument_list pos:start="315:19" pos:end="315:29">(<argument pos:start="315:20" pos:end="315:28"><expr pos:start="315:20" pos:end="315:28"><name pos:start="315:20" pos:end="315:28">duplicate</name></expr></argument>)</argument_list></call><argument_list pos:start="315:30" pos:end="315:64">(<argument pos:start="315:31" pos:end="315:52"><expr pos:start="315:31" pos:end="315:52"><name pos:start="315:31" pos:end="315:38">dstBlock</name> <operator pos:start="315:40" pos:end="315:40">+</operator> <name pos:start="315:42" pos:end="315:50">dstStride</name><operator pos:start="315:51" pos:end="315:51">*</operator><literal type="number" pos:start="315:52" pos:end="315:52">8</literal></expr></argument>, <argument pos:start="315:55" pos:end="315:63"><expr pos:start="315:55" pos:end="315:63"><name pos:start="315:55" pos:end="315:63">dstStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="319:13" pos:end="341:101"><if pos:start="319:13" pos:end="321:74">if<condition pos:start="319:15" pos:end="319:47">(<expr pos:start="319:16" pos:end="319:46"><name pos:start="319:16" pos:end="319:19">mode</name> <operator pos:start="319:21" pos:end="319:21">&amp;</operator> <name pos:start="319:23" pos:end="319:46">LINEAR_IPOL_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="321:17" pos:end="321:74"><block_content pos:start="321:17" pos:end="321:74">

                <function_decl pos:start="321:17" pos:end="321:74"><type pos:start="321:17" pos:end="321:22"><name pos:start="321:17" pos:end="321:22">RENAME</name></type>(<name pos:start="321:24" pos:end="321:51">deInterlaceInterpolateLinear</name>)<parameter_list pos:start="321:53" pos:end="321:73">(<parameter pos:start="321:54" pos:end="321:61"><decl pos:start="321:54" pos:end="321:61"><type pos:start="321:54" pos:end="321:61"><name pos:start="321:54" pos:end="321:61">dstBlock</name></type></decl></parameter>, <parameter pos:start="321:64" pos:end="321:72"><decl pos:start="321:64" pos:end="321:72"><type pos:start="321:64" pos:end="321:72"><name pos:start="321:64" pos:end="321:72">dstStride</name></type></decl></parameter>)</parameter_list>;</function_decl></block_content></block></if>

            <if type="elseif" pos:start="323:13" pos:end="325:85">else if<condition pos:start="323:20" pos:end="323:53">(<expr pos:start="323:21" pos:end="323:52"><name pos:start="323:21" pos:end="323:24">mode</name> <operator pos:start="323:26" pos:end="323:26">&amp;</operator> <name pos:start="323:28" pos:end="323:52">LINEAR_BLEND_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="325:17" pos:end="325:85"><block_content pos:start="325:17" pos:end="325:85">

                <expr_stmt pos:start="325:17" pos:end="325:85"><expr pos:start="325:17" pos:end="325:84"><call pos:start="325:17" pos:end="325:84"><call pos:start="325:17" pos:end="325:46"><name pos:start="325:17" pos:end="325:22">RENAME</name><argument_list pos:start="325:23" pos:end="325:46">(<argument pos:start="325:24" pos:end="325:45"><expr pos:start="325:24" pos:end="325:45"><name pos:start="325:24" pos:end="325:45">deInterlaceBlendLinear</name></expr></argument>)</argument_list></call><argument_list pos:start="325:47" pos:end="325:84">(<argument pos:start="325:48" pos:end="325:55"><expr pos:start="325:48" pos:end="325:55"><name pos:start="325:48" pos:end="325:55">dstBlock</name></expr></argument>, <argument pos:start="325:58" pos:end="325:66"><expr pos:start="325:58" pos:end="325:66"><name pos:start="325:58" pos:end="325:66">dstStride</name></expr></argument>, <argument pos:start="325:69" pos:end="325:83"><expr pos:start="325:69" pos:end="325:83"><name pos:start="325:69" pos:end="325:79"><name pos:start="325:69" pos:end="325:69">c</name><operator pos:start="325:70" pos:end="325:70">.</operator><name pos:start="325:71" pos:end="325:79">deintTemp</name></name> <operator pos:start="325:81" pos:end="325:81">+</operator> <name pos:start="325:83" pos:end="325:83">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="327:13" pos:end="329:63">else if<condition pos:start="327:20" pos:end="327:47">(<expr pos:start="327:21" pos:end="327:46"><name pos:start="327:21" pos:end="327:24">mode</name> <operator pos:start="327:26" pos:end="327:26">&amp;</operator> <name pos:start="327:28" pos:end="327:46">MEDIAN_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="329:17" pos:end="329:63"><block_content pos:start="329:17" pos:end="329:63">

                <function_decl pos:start="329:17" pos:end="329:63"><type pos:start="329:17" pos:end="329:22"><name pos:start="329:17" pos:end="329:22">RENAME</name></type>(<name pos:start="329:24" pos:end="329:40">deInterlaceMedian</name>)<parameter_list pos:start="329:42" pos:end="329:62">(<parameter pos:start="329:43" pos:end="329:50"><decl pos:start="329:43" pos:end="329:50"><type pos:start="329:43" pos:end="329:50"><name pos:start="329:43" pos:end="329:50">dstBlock</name></type></decl></parameter>, <parameter pos:start="329:53" pos:end="329:61"><decl pos:start="329:53" pos:end="329:61"><type pos:start="329:53" pos:end="329:61"><name pos:start="329:53" pos:end="329:61">dstStride</name></type></decl></parameter>)</parameter_list>;</function_decl></block_content></block></if>

            <if type="elseif" pos:start="331:13" pos:end="333:73">else if<condition pos:start="331:20" pos:end="331:51">(<expr pos:start="331:21" pos:end="331:50"><name pos:start="331:21" pos:end="331:24">mode</name> <operator pos:start="331:26" pos:end="331:26">&amp;</operator> <name pos:start="331:28" pos:end="331:50">CUBIC_IPOL_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="333:17" pos:end="333:73"><block_content pos:start="333:17" pos:end="333:73">

                <function_decl pos:start="333:17" pos:end="333:73"><type pos:start="333:17" pos:end="333:22"><name pos:start="333:17" pos:end="333:22">RENAME</name></type>(<name pos:start="333:24" pos:end="333:50">deInterlaceInterpolateCubic</name>)<parameter_list pos:start="333:52" pos:end="333:72">(<parameter pos:start="333:53" pos:end="333:60"><decl pos:start="333:53" pos:end="333:60"><type pos:start="333:53" pos:end="333:60"><name pos:start="333:53" pos:end="333:60">dstBlock</name></type></decl></parameter>, <parameter pos:start="333:63" pos:end="333:71"><decl pos:start="333:63" pos:end="333:71"><type pos:start="333:63" pos:end="333:71"><name pos:start="333:63" pos:end="333:71">dstStride</name></type></decl></parameter>)</parameter_list>;</function_decl></block_content></block></if>

            <if type="elseif" pos:start="335:13" pos:end="337:76">else if<condition pos:start="335:20" pos:end="335:47">(<expr pos:start="335:21" pos:end="335:46"><name pos:start="335:21" pos:end="335:24">mode</name> <operator pos:start="335:26" pos:end="335:26">&amp;</operator> <name pos:start="335:28" pos:end="335:46">FFMPEG_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="337:17" pos:end="337:76"><block_content pos:start="337:17" pos:end="337:76">

                <expr_stmt pos:start="337:17" pos:end="337:76"><expr pos:start="337:17" pos:end="337:75"><call pos:start="337:17" pos:end="337:75"><call pos:start="337:17" pos:end="337:37"><name pos:start="337:17" pos:end="337:22">RENAME</name><argument_list pos:start="337:23" pos:end="337:37">(<argument pos:start="337:24" pos:end="337:36"><expr pos:start="337:24" pos:end="337:36"><name pos:start="337:24" pos:end="337:36">deInterlaceFF</name></expr></argument>)</argument_list></call><argument_list pos:start="337:38" pos:end="337:75">(<argument pos:start="337:39" pos:end="337:46"><expr pos:start="337:39" pos:end="337:46"><name pos:start="337:39" pos:end="337:46">dstBlock</name></expr></argument>, <argument pos:start="337:49" pos:end="337:57"><expr pos:start="337:49" pos:end="337:57"><name pos:start="337:49" pos:end="337:57">dstStride</name></expr></argument>, <argument pos:start="337:60" pos:end="337:74"><expr pos:start="337:60" pos:end="337:74"><name pos:start="337:60" pos:end="337:70"><name pos:start="337:60" pos:end="337:60">c</name><operator pos:start="337:61" pos:end="337:61">.</operator><name pos:start="337:62" pos:end="337:70">deintTemp</name></name> <operator pos:start="337:72" pos:end="337:72">+</operator> <name pos:start="337:74" pos:end="337:74">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="339:13" pos:end="341:101">else if<condition pos:start="339:20" pos:end="339:49">(<expr pos:start="339:21" pos:end="339:48"><name pos:start="339:21" pos:end="339:24">mode</name> <operator pos:start="339:26" pos:end="339:26">&amp;</operator> <name pos:start="339:28" pos:end="339:48">LOWPASS5_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="341:17" pos:end="341:101"><block_content pos:start="341:17" pos:end="341:101">

                <expr_stmt pos:start="341:17" pos:end="341:101"><expr pos:start="341:17" pos:end="341:100"><call pos:start="341:17" pos:end="341:100"><call pos:start="341:17" pos:end="341:37"><name pos:start="341:17" pos:end="341:22">RENAME</name><argument_list pos:start="341:23" pos:end="341:37">(<argument pos:start="341:24" pos:end="341:36"><expr pos:start="341:24" pos:end="341:36"><name pos:start="341:24" pos:end="341:36">deInterlaceL5</name></expr></argument>)</argument_list></call><argument_list pos:start="341:38" pos:end="341:100">(<argument pos:start="341:39" pos:end="341:46"><expr pos:start="341:39" pos:end="341:46"><name pos:start="341:39" pos:end="341:46">dstBlock</name></expr></argument>, <argument pos:start="341:49" pos:end="341:57"><expr pos:start="341:49" pos:end="341:57"><name pos:start="341:49" pos:end="341:57">dstStride</name></expr></argument>, <argument pos:start="341:60" pos:end="341:74"><expr pos:start="341:60" pos:end="341:74"><name pos:start="341:60" pos:end="341:70"><name pos:start="341:60" pos:end="341:60">c</name><operator pos:start="341:61" pos:end="341:61">.</operator><name pos:start="341:62" pos:end="341:70">deintTemp</name></name> <operator pos:start="341:72" pos:end="341:72">+</operator> <name pos:start="341:74" pos:end="341:74">x</name></expr></argument>, <argument pos:start="341:77" pos:end="341:99"><expr pos:start="341:77" pos:end="341:99"><name pos:start="341:77" pos:end="341:87"><name pos:start="341:77" pos:end="341:77">c</name><operator pos:start="341:78" pos:end="341:78">.</operator><name pos:start="341:79" pos:end="341:87">deintTemp</name></name> <operator pos:start="341:89" pos:end="341:89">+</operator> <name pos:start="341:91" pos:end="341:95">width</name> <operator pos:start="341:97" pos:end="341:97">+</operator> <name pos:start="341:99" pos:end="341:99">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<comment type="block" pos:start="343:1" pos:end="347:2">/*          else if(mode &amp; CUBIC_BLEND_DEINT_FILTER)

                RENAME(deInterlaceBlendCubic)(dstBlock, dstStride);

*/</comment>

            <expr_stmt pos:start="349:13" pos:end="349:24"><expr pos:start="349:13" pos:end="349:23"><name pos:start="349:13" pos:end="349:20">dstBlock</name><operator pos:start="349:21" pos:end="349:22">+=</operator><literal type="number" pos:start="349:23" pos:end="349:23">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="351:13" pos:end="351:24"><expr pos:start="351:13" pos:end="351:23"><name pos:start="351:13" pos:end="351:20">srcBlock</name><operator pos:start="351:21" pos:end="351:22">+=</operator><literal type="number" pos:start="351:23" pos:end="351:23">8</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="355:9" pos:end="369:9"><if pos:start="355:9" pos:end="357:70">if<condition pos:start="355:11" pos:end="355:35">(<expr pos:start="355:12" pos:end="355:34"><name pos:start="355:12" pos:end="355:16">width</name><operator pos:start="355:17" pos:end="355:18">==</operator><call pos:start="355:19" pos:end="355:34"><name pos:start="355:19" pos:end="355:23">FFABS</name><argument_list pos:start="355:24" pos:end="355:34">(<argument pos:start="355:25" pos:end="355:33"><expr pos:start="355:25" pos:end="355:33"><name pos:start="355:25" pos:end="355:33">dstStride</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="357:13" pos:end="357:70"><block_content pos:start="357:13" pos:end="357:70">

            <expr_stmt pos:start="357:13" pos:end="357:70"><expr pos:start="357:13" pos:end="357:69"><call pos:start="357:13" pos:end="357:69"><name pos:start="357:13" pos:end="357:19">linecpy</name><argument_list pos:start="357:20" pos:end="357:69">(<argument pos:start="357:21" pos:end="357:23"><expr pos:start="357:21" pos:end="357:23"><name pos:start="357:21" pos:end="357:23">dst</name></expr></argument>, <argument pos:start="357:26" pos:end="357:46"><expr pos:start="357:26" pos:end="357:46"><name pos:start="357:26" pos:end="357:32">tempDst</name> <operator pos:start="357:34" pos:end="357:34">+</operator> <literal type="number" pos:start="357:36" pos:end="357:36">9</literal><operator pos:start="357:37" pos:end="357:37">*</operator><name pos:start="357:38" pos:end="357:46">dstStride</name></expr></argument>, <argument pos:start="357:49" pos:end="357:57"><expr pos:start="357:49" pos:end="357:57"><name pos:start="357:49" pos:end="357:57">copyAhead</name></expr></argument>, <argument pos:start="357:60" pos:end="357:68"><expr pos:start="357:60" pos:end="357:68"><name pos:start="357:60" pos:end="357:68">dstStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="359:9" pos:end="369:9">else<block pos:start="359:13" pos:end="369:9">{<block_content pos:start="361:13" pos:end="367:13">

            <decl_stmt pos:start="361:13" pos:end="361:18"><decl pos:start="361:13" pos:end="361:17"><type pos:start="361:13" pos:end="361:15"><name pos:start="361:13" pos:end="361:15">int</name></type> <name pos:start="361:17" pos:end="361:17">i</name></decl>;</decl_stmt>

            <for pos:start="363:13" pos:end="367:13">for<control pos:start="363:16" pos:end="363:38">(<init pos:start="363:17" pos:end="363:20"><expr pos:start="363:17" pos:end="363:19"><name pos:start="363:17" pos:end="363:17">i</name><operator pos:start="363:18" pos:end="363:18">=</operator><literal type="number" pos:start="363:19" pos:end="363:19">0</literal></expr>;</init> <condition pos:start="363:22" pos:end="363:33"><expr pos:start="363:22" pos:end="363:32"><name pos:start="363:22" pos:end="363:22">i</name><operator pos:start="363:23" pos:end="363:23">&lt;</operator><name pos:start="363:24" pos:end="363:32">copyAhead</name></expr>;</condition> <incr pos:start="363:35" pos:end="363:37"><expr pos:start="363:35" pos:end="363:37"><name pos:start="363:35" pos:end="363:35">i</name><operator pos:start="363:36" pos:end="363:37">++</operator></expr></incr>)</control><block pos:start="363:39" pos:end="367:13">{<block_content pos:start="365:17" pos:end="365:76">

                <expr_stmt pos:start="365:17" pos:end="365:76"><expr pos:start="365:17" pos:end="365:75"><call pos:start="365:17" pos:end="365:75"><name pos:start="365:17" pos:end="365:22">memcpy</name><argument_list pos:start="365:23" pos:end="365:75">(<argument pos:start="365:24" pos:end="365:40"><expr pos:start="365:24" pos:end="365:40"><name pos:start="365:24" pos:end="365:26">dst</name> <operator pos:start="365:28" pos:end="365:28">+</operator> <name pos:start="365:30" pos:end="365:30">i</name><operator pos:start="365:31" pos:end="365:31">*</operator><name pos:start="365:32" pos:end="365:40">dstStride</name></expr></argument>, <argument pos:start="365:43" pos:end="365:67"><expr pos:start="365:43" pos:end="365:67"><name pos:start="365:43" pos:end="365:49">tempDst</name> <operator pos:start="365:51" pos:end="365:51">+</operator> <operator pos:start="365:53" pos:end="365:53">(</operator><literal type="number" pos:start="365:54" pos:end="365:55">9</literal><operator pos:start="365:55" pos:end="365:55">+</operator><name pos:start="365:56" pos:end="365:56">i</name><operator pos:start="365:57" pos:end="365:57">)</operator><operator pos:start="365:58" pos:end="365:58">*</operator><name pos:start="365:59" pos:end="365:67">dstStride</name></expr></argument>, <argument pos:start="365:70" pos:end="365:74"><expr pos:start="365:70" pos:end="365:74"><name pos:start="365:70" pos:end="365:74">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block>



    <for pos:start="375:5" pos:end="870:0">for<control pos:start="375:8" pos:end="375:37">(<init pos:start="375:9" pos:end="375:12"><expr pos:start="375:9" pos:end="375:11"><name pos:start="375:9" pos:end="375:9">y</name><operator pos:start="375:10" pos:end="375:10">=</operator><literal type="number" pos:start="375:11" pos:end="375:11">0</literal></expr>;</init> <condition pos:start="375:14" pos:end="375:22"><expr pos:start="375:14" pos:end="375:21"><name pos:start="375:14" pos:end="375:14">y</name><operator pos:start="375:15" pos:end="375:15">&lt;</operator><name pos:start="375:16" pos:end="375:21">height</name></expr>;</condition> <incr pos:start="375:24" pos:end="375:36"><expr pos:start="375:24" pos:end="375:36"><name pos:start="375:24" pos:end="375:24">y</name><operator pos:start="375:25" pos:end="375:26">+=</operator><name pos:start="375:27" pos:end="375:36">BLOCK_SIZE</name></expr></incr>)</control><block pos:start="375:38" pos:end="870:0">{<block_content pos:start="379:9" pos:end="847:9">

        <comment type="line" pos:start="377:9" pos:end="377:64">//1% speedup if these are here instead of the inner loop</comment>

        <decl_stmt pos:start="379:9" pos:end="379:53"><decl pos:start="379:9" pos:end="379:52"><type pos:start="379:9" pos:end="379:23"><specifier pos:start="379:9" pos:end="379:13">const</specifier> <name pos:start="379:15" pos:end="379:21">uint8_t</name> <modifier pos:start="379:23" pos:end="379:23">*</modifier></type><name pos:start="379:24" pos:end="379:31">srcBlock</name><init pos:start="379:32" pos:end="379:52">= <expr pos:start="379:34" pos:end="379:52"><operator pos:start="379:34" pos:end="379:34">&amp;</operator><operator pos:start="379:35" pos:end="379:35">(</operator><name pos:start="379:36" pos:end="379:51"><name pos:start="379:36" pos:end="379:38">src</name><index pos:start="379:39" pos:end="379:51">[<expr pos:start="379:40" pos:end="379:50"><name pos:start="379:40" pos:end="379:40">y</name><operator pos:start="379:41" pos:end="379:41">*</operator><name pos:start="379:42" pos:end="379:50">srcStride</name></expr>]</index></name><operator pos:start="379:52" pos:end="379:52">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="381:9" pos:end="384:0"><decl pos:start="381:9" pos:end="381:46"><type pos:start="381:9" pos:end="381:17"><name pos:start="381:9" pos:end="381:15">uint8_t</name> <modifier pos:start="381:17" pos:end="381:17">*</modifier></type><name pos:start="381:18" pos:end="381:25">dstBlock</name><init pos:start="381:26" pos:end="381:46">= <expr pos:start="381:28" pos:end="381:46"><operator pos:start="381:28" pos:end="381:28">&amp;</operator><operator pos:start="381:29" pos:end="381:29">(</operator><name pos:start="381:30" pos:end="381:45"><name pos:start="381:30" pos:end="381:32">dst</name><index pos:start="381:33" pos:end="381:45">[<expr pos:start="381:34" pos:end="381:44"><name pos:start="381:34" pos:end="381:34">y</name><operator pos:start="381:35" pos:end="381:35">*</operator><name pos:start="381:36" pos:end="381:44">dstStride</name></expr>]</index></name><operator pos:start="381:46" pos:end="381:46">)</operator></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="383:1" pos:end="383:19">#<cpp:directive pos:start="383:2" pos:end="383:3">if</cpp:directive> <expr pos:start="383:5" pos:end="383:19"><name pos:start="383:5" pos:end="383:19">HAVE_MMX_INLINE</name></expr></cpp:if>

        <decl_stmt pos:start="385:9" pos:end="385:42"><decl pos:start="385:9" pos:end="385:41"><type pos:start="385:9" pos:end="385:17"><name pos:start="385:9" pos:end="385:15">uint8_t</name> <modifier pos:start="385:17" pos:end="385:17">*</modifier></type><name pos:start="385:18" pos:end="385:27">tempBlock1</name><init pos:start="385:28" pos:end="385:41">= <expr pos:start="385:30" pos:end="385:41"><name pos:start="385:30" pos:end="385:41"><name pos:start="385:30" pos:end="385:30">c</name><operator pos:start="385:31" pos:end="385:31">.</operator><name pos:start="385:32" pos:end="385:41">tempBlocks</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="387:9" pos:end="390:0"><decl pos:start="387:9" pos:end="387:45"><type pos:start="387:9" pos:end="387:17"><name pos:start="387:9" pos:end="387:15">uint8_t</name> <modifier pos:start="387:17" pos:end="387:17">*</modifier></type><name pos:start="387:18" pos:end="387:27">tempBlock2</name><init pos:start="387:28" pos:end="387:45">= <expr pos:start="387:30" pos:end="387:45"><name pos:start="387:30" pos:end="387:41"><name pos:start="387:30" pos:end="387:30">c</name><operator pos:start="387:31" pos:end="387:31">.</operator><name pos:start="387:32" pos:end="387:41">tempBlocks</name></name> <operator pos:start="387:43" pos:end="387:43">+</operator> <literal type="number" pos:start="387:45" pos:end="387:45">8</literal></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="389:1" pos:end="389:6">#<cpp:directive pos:start="389:2" pos:end="389:6">endif</cpp:directive></cpp:endif>

        <decl_stmt pos:start="391:9" pos:end="391:58"><decl pos:start="391:9" pos:end="391:57"><type pos:start="391:9" pos:end="391:22"><specifier pos:start="391:9" pos:end="391:13">const</specifier> <name pos:start="391:15" pos:end="391:20">int8_t</name> <modifier pos:start="391:22" pos:end="391:22">*</modifier></type><name pos:start="391:23" pos:end="391:27">QPptr</name><init pos:start="391:28" pos:end="391:57">= <expr pos:start="391:30" pos:end="391:57"><operator pos:start="391:30" pos:end="391:30">&amp;</operator><name pos:start="391:31" pos:end="391:57"><name pos:start="391:31" pos:end="391:33">QPs</name><index pos:start="391:34" pos:end="391:57">[<expr pos:start="391:35" pos:end="391:56"><operator pos:start="391:35" pos:end="391:35">(</operator><name pos:start="391:36" pos:end="391:36">y</name><operator pos:start="391:37" pos:end="391:38">&gt;&gt;</operator><name pos:start="391:39" pos:end="391:46">qpVShift</name><operator pos:start="391:47" pos:end="391:47">)</operator><operator pos:start="391:48" pos:end="391:48">*</operator><name pos:start="391:49" pos:end="391:56">QPStride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="393:9" pos:end="393:73"><decl pos:start="393:9" pos:end="393:72"><type pos:start="393:9" pos:end="393:16"><name pos:start="393:9" pos:end="393:14">int8_t</name> <modifier pos:start="393:16" pos:end="393:16">*</modifier></type><name pos:start="393:17" pos:end="393:25">nonBQPptr</name><init pos:start="393:26" pos:end="393:72">= <expr pos:start="393:28" pos:end="393:72"><operator pos:start="393:28" pos:end="393:28">&amp;</operator><name pos:start="393:29" pos:end="393:72"><name pos:start="393:29" pos:end="393:29">c</name><operator pos:start="393:30" pos:end="393:30">.</operator><name pos:start="393:31" pos:end="393:41">nonBQPTable</name><index pos:start="393:42" pos:end="393:72">[<expr pos:start="393:43" pos:end="393:71"><operator pos:start="393:43" pos:end="393:43">(</operator><name pos:start="393:44" pos:end="393:44">y</name><operator pos:start="393:45" pos:end="393:46">&gt;&gt;</operator><name pos:start="393:47" pos:end="393:54">qpVShift</name><operator pos:start="393:55" pos:end="393:55">)</operator><operator pos:start="393:56" pos:end="393:56">*</operator><call pos:start="393:57" pos:end="393:71"><name pos:start="393:57" pos:end="393:61">FFABS</name><argument_list pos:start="393:62" pos:end="393:71">(<argument pos:start="393:63" pos:end="393:70"><expr pos:start="393:63" pos:end="393:70"><name pos:start="393:63" pos:end="393:70">QPStride</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="395:9" pos:end="395:17"><decl pos:start="395:9" pos:end="395:16"><type pos:start="395:9" pos:end="395:11"><name pos:start="395:9" pos:end="395:11">int</name></type> <name pos:start="395:13" pos:end="395:14">QP</name><init pos:start="395:15" pos:end="395:16">=<expr pos:start="395:16" pos:end="395:16"><literal type="number" pos:start="395:16" pos:end="395:16">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="397:9" pos:end="399:48">/* can we mess with a 8x16 block from srcBlock/dstBlock downwards and 1 line upwards

           if not than use a temporary buffer */</comment>

        <if_stmt pos:start="401:9" pos:end="441:9"><if pos:start="401:9" pos:end="441:9">if<condition pos:start="401:11" pos:end="401:26">(<expr pos:start="401:12" pos:end="401:25"><name pos:start="401:12" pos:end="401:12">y</name><operator pos:start="401:13" pos:end="401:13">+</operator><literal type="number" pos:start="401:14" pos:end="401:15">15</literal> <operator pos:start="401:17" pos:end="401:18">&gt;=</operator> <name pos:start="401:20" pos:end="401:25">height</name></expr>)</condition><block pos:start="401:27" pos:end="441:9">{<block_content pos:start="403:13" pos:end="439:30">

            <decl_stmt pos:start="403:13" pos:end="403:18"><decl pos:start="403:13" pos:end="403:17"><type pos:start="403:13" pos:end="403:15"><name pos:start="403:13" pos:end="403:15">int</name></type> <name pos:start="403:17" pos:end="403:17">i</name></decl>;</decl_stmt>

            <comment type="block" pos:start="405:13" pos:end="407:40">/* copy from line (copyAhead) to (copyAhead+7) of src, these will be copied with

               blockcopy to dst later */</comment>

            <expr_stmt pos:start="409:13" pos:end="411:61"><expr pos:start="409:13" pos:end="411:60"><call pos:start="409:13" pos:end="411:60"><name pos:start="409:13" pos:end="409:19">linecpy</name><argument_list pos:start="409:20" pos:end="411:60">(<argument pos:start="409:21" pos:end="409:49"><expr pos:start="409:21" pos:end="409:49"><name pos:start="409:21" pos:end="409:27">tempSrc</name> <operator pos:start="409:29" pos:end="409:29">+</operator> <name pos:start="409:31" pos:end="409:39">srcStride</name><operator pos:start="409:40" pos:end="409:40">*</operator><name pos:start="409:41" pos:end="409:49">copyAhead</name></expr></argument>, <argument pos:start="409:52" pos:end="409:81"><expr pos:start="409:52" pos:end="409:81"><name pos:start="409:52" pos:end="409:59">srcBlock</name> <operator pos:start="409:61" pos:end="409:61">+</operator> <name pos:start="409:63" pos:end="409:71">srcStride</name><operator pos:start="409:72" pos:end="409:72">*</operator><name pos:start="409:73" pos:end="409:81">copyAhead</name></expr></argument>,

                    <argument pos:start="411:21" pos:end="411:48"><expr pos:start="411:21" pos:end="411:48"><call pos:start="411:21" pos:end="411:48"><name pos:start="411:21" pos:end="411:25">FFMAX</name><argument_list pos:start="411:26" pos:end="411:48">(<argument pos:start="411:27" pos:end="411:44"><expr pos:start="411:27" pos:end="411:44"><name pos:start="411:27" pos:end="411:32">height</name><operator pos:start="411:33" pos:end="411:33">-</operator><name pos:start="411:34" pos:end="411:34">y</name><operator pos:start="411:35" pos:end="411:35">-</operator><name pos:start="411:36" pos:end="411:44">copyAhead</name></expr></argument>, <argument pos:start="411:47" pos:end="411:47"><expr pos:start="411:47" pos:end="411:47"><literal type="number" pos:start="411:47" pos:end="411:47">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="411:51" pos:end="411:59"><expr pos:start="411:51" pos:end="411:59"><name pos:start="411:51" pos:end="411:59">srcStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="415:13" pos:end="415:86">/* duplicate last line of src to fill the void up to line (copyAhead+7) */</comment>

            <for pos:start="417:13" pos:end="419:96">for<control pos:start="417:16" pos:end="417:57">(<init pos:start="417:17" pos:end="417:37"><expr pos:start="417:17" pos:end="417:36"><name pos:start="417:17" pos:end="417:17">i</name><operator pos:start="417:18" pos:end="417:18">=</operator><call pos:start="417:19" pos:end="417:36"><name pos:start="417:19" pos:end="417:23">FFMAX</name><argument_list pos:start="417:24" pos:end="417:36">(<argument pos:start="417:25" pos:end="417:32"><expr pos:start="417:25" pos:end="417:32"><name pos:start="417:25" pos:end="417:30">height</name><operator pos:start="417:31" pos:end="417:31">-</operator><name pos:start="417:32" pos:end="417:32">y</name></expr></argument>, <argument pos:start="417:35" pos:end="417:35"><expr pos:start="417:35" pos:end="417:35"><literal type="number" pos:start="417:35" pos:end="417:35">8</literal></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="417:39" pos:end="417:52"><expr pos:start="417:39" pos:end="417:51"><name pos:start="417:39" pos:end="417:39">i</name><operator pos:start="417:40" pos:end="417:40">&lt;</operator><name pos:start="417:41" pos:end="417:49">copyAhead</name><operator pos:start="417:50" pos:end="417:50">+</operator><literal type="number" pos:start="417:51" pos:end="417:51">8</literal></expr>;</condition> <incr pos:start="417:54" pos:end="417:56"><expr pos:start="417:54" pos:end="417:56"><name pos:start="417:54" pos:end="417:54">i</name><operator pos:start="417:55" pos:end="417:56">++</operator></expr></incr>)</control><block type="pseudo" pos:start="419:21" pos:end="419:96"><block_content pos:start="419:21" pos:end="419:96">

                    <expr_stmt pos:start="419:21" pos:end="419:96"><expr pos:start="419:21" pos:end="419:95"><call pos:start="419:21" pos:end="419:95"><name pos:start="419:21" pos:end="419:26">memcpy</name><argument_list pos:start="419:27" pos:end="419:95">(<argument pos:start="419:28" pos:end="419:48"><expr pos:start="419:28" pos:end="419:48"><name pos:start="419:28" pos:end="419:34">tempSrc</name> <operator pos:start="419:36" pos:end="419:36">+</operator> <name pos:start="419:38" pos:end="419:46">srcStride</name><operator pos:start="419:47" pos:end="419:47">*</operator><name pos:start="419:48" pos:end="419:48">i</name></expr></argument>, <argument pos:start="419:51" pos:end="419:76"><expr pos:start="419:51" pos:end="419:76"><name pos:start="419:51" pos:end="419:53">src</name> <operator pos:start="419:55" pos:end="419:55">+</operator> <name pos:start="419:57" pos:end="419:65">srcStride</name><operator pos:start="419:66" pos:end="419:66">*</operator><operator pos:start="419:67" pos:end="419:67">(</operator><name pos:start="419:68" pos:end="419:73">height</name><operator pos:start="419:74" pos:end="419:74">-</operator><literal type="number" pos:start="419:75" pos:end="419:75">1</literal><operator pos:start="419:76" pos:end="419:76">)</operator></expr></argument>, <argument pos:start="419:79" pos:end="419:94"><expr pos:start="419:79" pos:end="419:94"><call pos:start="419:79" pos:end="419:94"><name pos:start="419:79" pos:end="419:83">FFABS</name><argument_list pos:start="419:84" pos:end="419:94">(<argument pos:start="419:85" pos:end="419:93"><expr pos:start="419:85" pos:end="419:93"><name pos:start="419:85" pos:end="419:93">srcStride</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



            <comment type="block" pos:start="423:13" pos:end="423:81">/* copy up to (copyAhead+1) lines of dst (line -1 to (copyAhead-1))*/</comment>

            <expr_stmt pos:start="425:13" pos:end="425:94"><expr pos:start="425:13" pos:end="425:93"><call pos:start="425:13" pos:end="425:93"><name pos:start="425:13" pos:end="425:19">linecpy</name><argument_list pos:start="425:20" pos:end="425:93">(<argument pos:start="425:21" pos:end="425:27"><expr pos:start="425:21" pos:end="425:27"><name pos:start="425:21" pos:end="425:27">tempDst</name></expr></argument>, <argument pos:start="425:30" pos:end="425:49"><expr pos:start="425:30" pos:end="425:49"><name pos:start="425:30" pos:end="425:37">dstBlock</name> <operator pos:start="425:39" pos:end="425:39">-</operator> <name pos:start="425:41" pos:end="425:49">dstStride</name></expr></argument>, <argument pos:start="425:52" pos:end="425:81"><expr pos:start="425:52" pos:end="425:81"><call pos:start="425:52" pos:end="425:81"><name pos:start="425:52" pos:end="425:56">FFMIN</name><argument_list pos:start="425:57" pos:end="425:81">(<argument pos:start="425:58" pos:end="425:67"><expr pos:start="425:58" pos:end="425:67"><name pos:start="425:58" pos:end="425:63">height</name><operator pos:start="425:64" pos:end="425:64">-</operator><name pos:start="425:65" pos:end="425:65">y</name><operator pos:start="425:66" pos:end="425:66">+</operator><literal type="number" pos:start="425:67" pos:end="425:67">1</literal></expr></argument>, <argument pos:start="425:70" pos:end="425:80"><expr pos:start="425:70" pos:end="425:80"><name pos:start="425:70" pos:end="425:78">copyAhead</name><operator pos:start="425:79" pos:end="425:79">+</operator><literal type="number" pos:start="425:80" pos:end="425:80">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="425:84" pos:end="425:92"><expr pos:start="425:84" pos:end="425:92"><name pos:start="425:84" pos:end="425:92">dstStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="429:13" pos:end="429:84">/* duplicate last line of dst to fill the void up to line (copyAhead) */</comment>

            <for pos:start="431:13" pos:end="433:96">for<control pos:start="431:16" pos:end="431:48">(<init pos:start="431:17" pos:end="431:29"><expr pos:start="431:17" pos:end="431:28"><name pos:start="431:17" pos:end="431:17">i</name><operator pos:start="431:18" pos:end="431:18">=</operator><name pos:start="431:19" pos:end="431:24">height</name><operator pos:start="431:25" pos:end="431:25">-</operator><name pos:start="431:26" pos:end="431:26">y</name><operator pos:start="431:27" pos:end="431:27">+</operator><literal type="number" pos:start="431:28" pos:end="431:28">1</literal></expr>;</init> <condition pos:start="431:31" pos:end="431:43"><expr pos:start="431:31" pos:end="431:42"><name pos:start="431:31" pos:end="431:31">i</name><operator pos:start="431:32" pos:end="431:33">&lt;=</operator><name pos:start="431:34" pos:end="431:42">copyAhead</name></expr>;</condition> <incr pos:start="431:45" pos:end="431:47"><expr pos:start="431:45" pos:end="431:47"><name pos:start="431:45" pos:end="431:45">i</name><operator pos:start="431:46" pos:end="431:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="433:21" pos:end="433:96"><block_content pos:start="433:21" pos:end="433:96">

                    <expr_stmt pos:start="433:21" pos:end="433:96"><expr pos:start="433:21" pos:end="433:95"><call pos:start="433:21" pos:end="433:95"><name pos:start="433:21" pos:end="433:26">memcpy</name><argument_list pos:start="433:27" pos:end="433:95">(<argument pos:start="433:28" pos:end="433:48"><expr pos:start="433:28" pos:end="433:48"><name pos:start="433:28" pos:end="433:34">tempDst</name> <operator pos:start="433:36" pos:end="433:36">+</operator> <name pos:start="433:38" pos:end="433:46">dstStride</name><operator pos:start="433:47" pos:end="433:47">*</operator><name pos:start="433:48" pos:end="433:48">i</name></expr></argument>, <argument pos:start="433:51" pos:end="433:76"><expr pos:start="433:51" pos:end="433:76"><name pos:start="433:51" pos:end="433:53">dst</name> <operator pos:start="433:55" pos:end="433:55">+</operator> <name pos:start="433:57" pos:end="433:65">dstStride</name><operator pos:start="433:66" pos:end="433:66">*</operator><operator pos:start="433:67" pos:end="433:67">(</operator><name pos:start="433:68" pos:end="433:73">height</name><operator pos:start="433:74" pos:end="433:74">-</operator><literal type="number" pos:start="433:75" pos:end="433:75">1</literal><operator pos:start="433:76" pos:end="433:76">)</operator></expr></argument>, <argument pos:start="433:79" pos:end="433:94"><expr pos:start="433:79" pos:end="433:94"><call pos:start="433:79" pos:end="433:94"><name pos:start="433:79" pos:end="433:83">FFABS</name><argument_list pos:start="433:84" pos:end="433:94">(<argument pos:start="433:85" pos:end="433:93"><expr pos:start="433:85" pos:end="433:93"><name pos:start="433:85" pos:end="433:93">dstStride</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



            <expr_stmt pos:start="437:13" pos:end="437:42"><expr pos:start="437:13" pos:end="437:41"><name pos:start="437:13" pos:end="437:20">dstBlock</name><operator pos:start="437:21" pos:end="437:21">=</operator> <name pos:start="437:23" pos:end="437:29">tempDst</name> <operator pos:start="437:31" pos:end="437:31">+</operator> <name pos:start="437:33" pos:end="437:41">dstStride</name></expr>;</expr_stmt>

            <expr_stmt pos:start="439:13" pos:end="439:30"><expr pos:start="439:13" pos:end="439:29"><name pos:start="439:13" pos:end="439:20">srcBlock</name><operator pos:start="439:21" pos:end="439:21">=</operator> <name pos:start="439:23" pos:end="439:29">tempSrc</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="445:9" pos:end="445:91">// From this point on it is guaranteed that we can read and write 16 lines downward</comment>

        <comment type="line" pos:start="447:9" pos:end="447:75">// finish 1 block before the next otherwise we might have a problem</comment>

        <comment type="line" pos:start="449:9" pos:end="449:86">// with the L1 Cache of the P4 ... or only a few blocks at a time or soemthing</comment>

        <for pos:start="451:9" pos:end="799:9">for<control pos:start="451:12" pos:end="451:40">(<init pos:start="451:13" pos:end="451:16"><expr pos:start="451:13" pos:end="451:15"><name pos:start="451:13" pos:end="451:13">x</name><operator pos:start="451:14" pos:end="451:14">=</operator><literal type="number" pos:start="451:15" pos:end="451:15">0</literal></expr>;</init> <condition pos:start="451:18" pos:end="451:25"><expr pos:start="451:18" pos:end="451:24"><name pos:start="451:18" pos:end="451:18">x</name><operator pos:start="451:19" pos:end="451:19">&lt;</operator><name pos:start="451:20" pos:end="451:24">width</name></expr>;</condition> <incr pos:start="451:27" pos:end="451:39"><expr pos:start="451:27" pos:end="451:39"><name pos:start="451:27" pos:end="451:27">x</name><operator pos:start="451:28" pos:end="451:29">+=</operator><name pos:start="451:30" pos:end="451:39">BLOCK_SIZE</name></expr></incr>)</control><block pos:start="451:41" pos:end="799:9">{<block_content pos:start="453:13" pos:end="798:0">

            <decl_stmt pos:start="453:13" pos:end="456:0"><decl pos:start="453:13" pos:end="453:39"><type pos:start="453:13" pos:end="453:21"><specifier pos:start="453:13" pos:end="453:17">const</specifier> <name pos:start="453:19" pos:end="453:21">int</name></type> <name pos:start="453:23" pos:end="453:28">stride</name><init pos:start="453:29" pos:end="453:39">= <expr pos:start="453:31" pos:end="453:39"><name pos:start="453:31" pos:end="453:39">dstStride</name></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="455:1" pos:end="455:19">#<cpp:directive pos:start="455:2" pos:end="455:3">if</cpp:directive> <expr pos:start="455:5" pos:end="455:19"><name pos:start="455:5" pos:end="455:19">HAVE_MMX_INLINE</name></expr></cpp:if>

            <decl_stmt pos:start="457:13" pos:end="460:0"><decl pos:start="457:13" pos:end="457:28"><type pos:start="457:13" pos:end="457:21"><name pos:start="457:13" pos:end="457:19">uint8_t</name> <modifier pos:start="457:21" pos:end="457:21">*</modifier></type><name pos:start="457:22" pos:end="457:28">tmpXchg</name></decl>;</decl_stmt>

<cpp:endif pos:start="459:1" pos:end="459:6">#<cpp:directive pos:start="459:2" pos:end="459:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="461:13" pos:end="479:13"><if pos:start="461:13" pos:end="467:13">if<condition pos:start="461:15" pos:end="461:23">(<expr pos:start="461:16" pos:end="461:22"><name pos:start="461:16" pos:end="461:22">isColor</name></expr>)</condition><block pos:start="461:24" pos:end="467:13">{<block_content pos:start="463:17" pos:end="465:49">

                <expr_stmt pos:start="463:17" pos:end="463:39"><expr pos:start="463:17" pos:end="463:38"><name pos:start="463:17" pos:end="463:18">QP</name><operator pos:start="463:19" pos:end="463:19">=</operator> <name pos:start="463:21" pos:end="463:38"><name pos:start="463:21" pos:end="463:25">QPptr</name><index pos:start="463:26" pos:end="463:38">[<expr pos:start="463:27" pos:end="463:37"><name pos:start="463:27" pos:end="463:27">x</name><operator pos:start="463:28" pos:end="463:29">&gt;&gt;</operator><name pos:start="463:30" pos:end="463:37">qpHShift</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="465:17" pos:end="465:49"><expr pos:start="465:17" pos:end="465:48"><name pos:start="465:17" pos:end="465:24"><name pos:start="465:17" pos:end="465:17">c</name><operator pos:start="465:18" pos:end="465:18">.</operator><name pos:start="465:19" pos:end="465:24">nonBQP</name></name><operator pos:start="465:25" pos:end="465:25">=</operator> <name pos:start="465:27" pos:end="465:48"><name pos:start="465:27" pos:end="465:35">nonBQPptr</name><index pos:start="465:36" pos:end="465:48">[<expr pos:start="465:37" pos:end="465:47"><name pos:start="465:37" pos:end="465:37">x</name><operator pos:start="465:38" pos:end="465:39">&gt;&gt;</operator><name pos:start="465:40" pos:end="465:47">qpHShift</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="467:14" pos:end="479:13">else<block pos:start="467:18" pos:end="479:13">{<block_content pos:start="469:17" pos:end="477:59">

                <expr_stmt pos:start="469:17" pos:end="469:32"><expr pos:start="469:17" pos:end="469:31"><name pos:start="469:17" pos:end="469:18">QP</name><operator pos:start="469:19" pos:end="469:19">=</operator> <name pos:start="469:21" pos:end="469:31"><name pos:start="469:21" pos:end="469:25">QPptr</name><index pos:start="469:26" pos:end="469:31">[<expr pos:start="469:27" pos:end="469:30"><name pos:start="469:27" pos:end="469:27">x</name><operator pos:start="469:28" pos:end="469:29">&gt;&gt;</operator><literal type="number" pos:start="469:30" pos:end="469:30">4</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="471:17" pos:end="471:53"><expr pos:start="471:17" pos:end="471:52"><name pos:start="471:17" pos:end="471:18">QP</name><operator pos:start="471:19" pos:end="471:19">=</operator> <operator pos:start="471:21" pos:end="471:21">(</operator><name pos:start="471:22" pos:end="471:23">QP</name><operator pos:start="471:24" pos:end="471:24">*</operator> <name pos:start="471:26" pos:end="471:37">QPCorrecture</name> <operator pos:start="471:39" pos:end="471:39">+</operator> <literal type="number" pos:start="471:41" pos:end="471:43">256</literal><operator pos:start="471:44" pos:end="471:44">*</operator><literal type="number" pos:start="471:45" pos:end="471:47">128</literal><operator pos:start="471:48" pos:end="471:48">)</operator><operator pos:start="471:49" pos:end="471:50">&gt;&gt;</operator><literal type="number" pos:start="471:51" pos:end="471:52">16</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="473:17" pos:end="473:42"><expr pos:start="473:17" pos:end="473:41"><name pos:start="473:17" pos:end="473:24"><name pos:start="473:17" pos:end="473:17">c</name><operator pos:start="473:18" pos:end="473:18">.</operator><name pos:start="473:19" pos:end="473:24">nonBQP</name></name><operator pos:start="473:25" pos:end="473:25">=</operator> <name pos:start="473:27" pos:end="473:41"><name pos:start="473:27" pos:end="473:35">nonBQPptr</name><index pos:start="473:36" pos:end="473:41">[<expr pos:start="473:37" pos:end="473:40"><name pos:start="473:37" pos:end="473:37">x</name><operator pos:start="473:38" pos:end="473:39">&gt;&gt;</operator><literal type="number" pos:start="473:40" pos:end="473:40">4</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="475:17" pos:end="475:65"><expr pos:start="475:17" pos:end="475:64"><name pos:start="475:17" pos:end="475:24"><name pos:start="475:17" pos:end="475:17">c</name><operator pos:start="475:18" pos:end="475:18">.</operator><name pos:start="475:19" pos:end="475:24">nonBQP</name></name><operator pos:start="475:25" pos:end="475:25">=</operator> <operator pos:start="475:27" pos:end="475:27">(</operator><name pos:start="475:28" pos:end="475:35"><name pos:start="475:28" pos:end="475:28">c</name><operator pos:start="475:29" pos:end="475:29">.</operator><name pos:start="475:30" pos:end="475:35">nonBQP</name></name><operator pos:start="475:36" pos:end="475:36">*</operator> <name pos:start="475:38" pos:end="475:49">QPCorrecture</name> <operator pos:start="475:51" pos:end="475:51">+</operator> <literal type="number" pos:start="475:53" pos:end="475:55">256</literal><operator pos:start="475:56" pos:end="475:56">*</operator><literal type="number" pos:start="475:57" pos:end="475:59">128</literal><operator pos:start="475:60" pos:end="475:60">)</operator><operator pos:start="475:61" pos:end="475:62">&gt;&gt;</operator><literal type="number" pos:start="475:63" pos:end="475:64">16</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="477:17" pos:end="477:59"><expr pos:start="477:17" pos:end="477:58"><name pos:start="477:17" pos:end="477:56"><name pos:start="477:17" pos:end="477:26">yHistogram</name><index pos:start="477:27" pos:end="477:56">[ <expr pos:start="477:29" pos:end="477:54"><name pos:start="477:29" pos:end="477:54"><name pos:start="477:29" pos:end="477:36">srcBlock</name><index pos:start="477:37" pos:end="477:54">[<expr pos:start="477:38" pos:end="477:53"><name pos:start="477:38" pos:end="477:46">srcStride</name><operator pos:start="477:47" pos:end="477:47">*</operator><literal type="number" pos:start="477:48" pos:end="477:49">12</literal> <operator pos:start="477:51" pos:end="477:51">+</operator> <literal type="number" pos:start="477:53" pos:end="477:53">4</literal></expr>]</index></name></expr> ]</index></name><operator pos:start="477:57" pos:end="477:58">++</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="481:13" pos:end="484:0"><expr pos:start="481:13" pos:end="481:20"><name pos:start="481:13" pos:end="481:16"><name pos:start="481:13" pos:end="481:13">c</name><operator pos:start="481:14" pos:end="481:14">.</operator><name pos:start="481:15" pos:end="481:16">QP</name></name><operator pos:start="481:17" pos:end="481:17">=</operator> <name pos:start="481:19" pos:end="481:20">QP</name></expr>;</expr_stmt>

<cpp:if pos:start="483:1" pos:end="483:19">#<cpp:directive pos:start="483:2" pos:end="483:3">if</cpp:directive> <expr pos:start="483:5" pos:end="483:19"><name pos:start="483:5" pos:end="483:19">HAVE_MMX_INLINE</name></expr></cpp:if>

            <asm pos:start="485:13" pos:end="510:0">__asm__ <specifier pos:start="485:21" pos:end="485:28">volatile</specifier>(

                "movd %1, %%mm7         \n\t"

                "packuswb %%mm7, %%mm7  \n\t" <comment type="line" pos:start="489:47" pos:end="489:73">// 0, 0, 0, QP, 0, 0, 0, QP</comment>

                "packuswb %%mm7, %%mm7  \n\t" <comment type="line" pos:start="491:47" pos:end="491:73">// 0,QP, 0, QP, 0,QP, 0, QP</comment>

                "packuswb %%mm7, %%mm7  \n\t" <comment type="line" pos:start="493:47" pos:end="493:59">// QP,..., QP</comment>

                "movq %%mm7, %0         \n\t"

                : "=m" (c.pQPb)

                : "r" (QP)

            );</asm>

<cpp:endif pos:start="503:1" pos:end="503:6">#<cpp:directive pos:start="503:2" pos:end="503:6">endif</cpp:directive></cpp:endif>





<cpp:if pos:start="509:1" pos:end="509:22">#<cpp:directive pos:start="509:2" pos:end="509:3">if</cpp:directive> <expr pos:start="509:5" pos:end="509:22"><name pos:start="509:5" pos:end="509:22">HAVE_MMXEXT_INLINE</name></expr></cpp:if>

<comment type="block" pos:start="511:1" pos:end="521:2">/*

            prefetchnta(srcBlock + (((x&gt;&gt;2)&amp;6) + 5)*srcStride + 32);

            prefetchnta(srcBlock + (((x&gt;&gt;2)&amp;6) + 6)*srcStride + 32);

            prefetcht0(dstBlock + (((x&gt;&gt;2)&amp;6) + 5)*dstStride + 32);

            prefetcht0(dstBlock + (((x&gt;&gt;2)&amp;6) + 6)*dstStride + 32);

*/</comment>



            <asm pos:start="525:13" pos:end="578:0">__asm__(

                "mov %4, %%"REG_a"              \n\t"

                "shr $2, %%"REG_a"              \n\t"

                "and $6, %%"REG_a"              \n\t"

                "add %5, %%"REG_a"              \n\t"

                "mov %%"REG_a", %%"REG_d"       \n\t"

                "imul %1, %%"REG_a"             \n\t"

                "imul %3, %%"REG_d"             \n\t"

                "prefetchnta 32(%%"REG_a", %0)  \n\t"

                "prefetcht0 32(%%"REG_d", %2)   \n\t"

                "add %1, %%"REG_a"              \n\t"

                "add %3, %%"REG_d"              \n\t"

                "prefetchnta 32(%%"REG_a", %0)  \n\t"

                "prefetcht0 32(%%"REG_d", %2)   \n\t"

                :: "r" (srcBlock), "r" ((x86_reg)srcStride), "r" (dstBlock), "r" ((x86_reg)dstStride),

                "g" ((x86_reg)x), "g" ((x86_reg)copyAhead)

                : "%"REG_a, "%"REG_d

            );</asm>



<cpp:elif pos:start="563:1" pos:end="563:26">#<cpp:directive pos:start="563:2" pos:end="563:5">elif</cpp:directive> <expr pos:start="563:7" pos:end="563:26"><name pos:start="563:7" pos:end="563:26">HAVE_AMD3DNOW_INLINE</name></expr></cpp:elif>

<comment type="line" pos:start="565:1" pos:end="565:95">//FIXME check if this is faster on an 3dnow chip or if it is faster without the prefetch or ...</comment>

<comment type="block" pos:start="567:1" pos:end="575:2">/*          prefetch(srcBlock + (((x&gt;&gt;3)&amp;3) + 5)*srcStride + 32);

            prefetch(srcBlock + (((x&gt;&gt;3)&amp;3) + 9)*srcStride + 32);

            prefetchw(dstBlock + (((x&gt;&gt;3)&amp;3) + 5)*dstStride + 32);

            prefetchw(dstBlock + (((x&gt;&gt;3)&amp;3) + 9)*dstStride + 32);

*/</comment>

<cpp:endif pos:start="577:1" pos:end="577:6">#<cpp:directive pos:start="577:2" pos:end="577:6">endif</cpp:directive></cpp:endif>



            <expr_stmt pos:start="581:13" pos:end="583:109"><expr pos:start="581:13" pos:end="583:108"><call pos:start="581:13" pos:end="583:108"><call pos:start="581:13" pos:end="581:29"><name pos:start="581:13" pos:end="581:18">RENAME</name><argument_list pos:start="581:19" pos:end="581:29">(<argument pos:start="581:20" pos:end="581:28"><expr pos:start="581:20" pos:end="581:28"><name pos:start="581:20" pos:end="581:28">blockCopy</name></expr></argument>)</argument_list></call><argument_list pos:start="581:30" pos:end="583:108">(<argument pos:start="581:31" pos:end="581:60"><expr pos:start="581:31" pos:end="581:60"><name pos:start="581:31" pos:end="581:38">dstBlock</name> <operator pos:start="581:40" pos:end="581:40">+</operator> <name pos:start="581:42" pos:end="581:50">dstStride</name><operator pos:start="581:51" pos:end="581:51">*</operator><name pos:start="581:52" pos:end="581:60">copyAhead</name></expr></argument>, <argument pos:start="581:63" pos:end="581:71"><expr pos:start="581:63" pos:end="581:71"><name pos:start="581:63" pos:end="581:71">dstStride</name></expr></argument>,

                              <argument pos:start="583:31" pos:end="583:60"><expr pos:start="583:31" pos:end="583:60"><name pos:start="583:31" pos:end="583:38">srcBlock</name> <operator pos:start="583:40" pos:end="583:40">+</operator> <name pos:start="583:42" pos:end="583:50">srcStride</name><operator pos:start="583:51" pos:end="583:51">*</operator><name pos:start="583:52" pos:end="583:60">copyAhead</name></expr></argument>, <argument pos:start="583:63" pos:end="583:71"><expr pos:start="583:63" pos:end="583:71"><name pos:start="583:63" pos:end="583:71">srcStride</name></expr></argument>, <argument pos:start="583:74" pos:end="583:89"><expr pos:start="583:74" pos:end="583:89"><name pos:start="583:74" pos:end="583:77">mode</name> <operator pos:start="583:79" pos:end="583:79">&amp;</operator> <name pos:start="583:81" pos:end="583:89">LEVEL_FIX</name></expr></argument>, <argument pos:start="583:92" pos:end="583:107"><expr pos:start="583:92" pos:end="583:107"><operator pos:start="583:92" pos:end="583:92">&amp;</operator><name pos:start="583:93" pos:end="583:107"><name pos:start="583:93" pos:end="583:93">c</name><operator pos:start="583:94" pos:end="583:94">.</operator><name pos:start="583:95" pos:end="583:107">packedYOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="587:13" pos:end="609:101"><if pos:start="587:13" pos:end="589:74">if<condition pos:start="587:15" pos:end="587:47">(<expr pos:start="587:16" pos:end="587:46"><name pos:start="587:16" pos:end="587:19">mode</name> <operator pos:start="587:21" pos:end="587:21">&amp;</operator> <name pos:start="587:23" pos:end="587:46">LINEAR_IPOL_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="589:17" pos:end="589:74"><block_content pos:start="589:17" pos:end="589:74">

                <function_decl pos:start="589:17" pos:end="589:74"><type pos:start="589:17" pos:end="589:22"><name pos:start="589:17" pos:end="589:22">RENAME</name></type>(<name pos:start="589:24" pos:end="589:51">deInterlaceInterpolateLinear</name>)<parameter_list pos:start="589:53" pos:end="589:73">(<parameter pos:start="589:54" pos:end="589:61"><decl pos:start="589:54" pos:end="589:61"><type pos:start="589:54" pos:end="589:61"><name pos:start="589:54" pos:end="589:61">dstBlock</name></type></decl></parameter>, <parameter pos:start="589:64" pos:end="589:72"><decl pos:start="589:64" pos:end="589:72"><type pos:start="589:64" pos:end="589:72"><name pos:start="589:64" pos:end="589:72">dstStride</name></type></decl></parameter>)</parameter_list>;</function_decl></block_content></block></if>

            <if type="elseif" pos:start="591:13" pos:end="593:85">else if<condition pos:start="591:20" pos:end="591:53">(<expr pos:start="591:21" pos:end="591:52"><name pos:start="591:21" pos:end="591:24">mode</name> <operator pos:start="591:26" pos:end="591:26">&amp;</operator> <name pos:start="591:28" pos:end="591:52">LINEAR_BLEND_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="593:17" pos:end="593:85"><block_content pos:start="593:17" pos:end="593:85">

                <expr_stmt pos:start="593:17" pos:end="593:85"><expr pos:start="593:17" pos:end="593:84"><call pos:start="593:17" pos:end="593:84"><call pos:start="593:17" pos:end="593:46"><name pos:start="593:17" pos:end="593:22">RENAME</name><argument_list pos:start="593:23" pos:end="593:46">(<argument pos:start="593:24" pos:end="593:45"><expr pos:start="593:24" pos:end="593:45"><name pos:start="593:24" pos:end="593:45">deInterlaceBlendLinear</name></expr></argument>)</argument_list></call><argument_list pos:start="593:47" pos:end="593:84">(<argument pos:start="593:48" pos:end="593:55"><expr pos:start="593:48" pos:end="593:55"><name pos:start="593:48" pos:end="593:55">dstBlock</name></expr></argument>, <argument pos:start="593:58" pos:end="593:66"><expr pos:start="593:58" pos:end="593:66"><name pos:start="593:58" pos:end="593:66">dstStride</name></expr></argument>, <argument pos:start="593:69" pos:end="593:83"><expr pos:start="593:69" pos:end="593:83"><name pos:start="593:69" pos:end="593:79"><name pos:start="593:69" pos:end="593:69">c</name><operator pos:start="593:70" pos:end="593:70">.</operator><name pos:start="593:71" pos:end="593:79">deintTemp</name></name> <operator pos:start="593:81" pos:end="593:81">+</operator> <name pos:start="593:83" pos:end="593:83">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="595:13" pos:end="597:63">else if<condition pos:start="595:20" pos:end="595:47">(<expr pos:start="595:21" pos:end="595:46"><name pos:start="595:21" pos:end="595:24">mode</name> <operator pos:start="595:26" pos:end="595:26">&amp;</operator> <name pos:start="595:28" pos:end="595:46">MEDIAN_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="597:17" pos:end="597:63"><block_content pos:start="597:17" pos:end="597:63">

                <function_decl pos:start="597:17" pos:end="597:63"><type pos:start="597:17" pos:end="597:22"><name pos:start="597:17" pos:end="597:22">RENAME</name></type>(<name pos:start="597:24" pos:end="597:40">deInterlaceMedian</name>)<parameter_list pos:start="597:42" pos:end="597:62">(<parameter pos:start="597:43" pos:end="597:50"><decl pos:start="597:43" pos:end="597:50"><type pos:start="597:43" pos:end="597:50"><name pos:start="597:43" pos:end="597:50">dstBlock</name></type></decl></parameter>, <parameter pos:start="597:53" pos:end="597:61"><decl pos:start="597:53" pos:end="597:61"><type pos:start="597:53" pos:end="597:61"><name pos:start="597:53" pos:end="597:61">dstStride</name></type></decl></parameter>)</parameter_list>;</function_decl></block_content></block></if>

            <if type="elseif" pos:start="599:13" pos:end="601:73">else if<condition pos:start="599:20" pos:end="599:51">(<expr pos:start="599:21" pos:end="599:50"><name pos:start="599:21" pos:end="599:24">mode</name> <operator pos:start="599:26" pos:end="599:26">&amp;</operator> <name pos:start="599:28" pos:end="599:50">CUBIC_IPOL_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="601:17" pos:end="601:73"><block_content pos:start="601:17" pos:end="601:73">

                <function_decl pos:start="601:17" pos:end="601:73"><type pos:start="601:17" pos:end="601:22"><name pos:start="601:17" pos:end="601:22">RENAME</name></type>(<name pos:start="601:24" pos:end="601:50">deInterlaceInterpolateCubic</name>)<parameter_list pos:start="601:52" pos:end="601:72">(<parameter pos:start="601:53" pos:end="601:60"><decl pos:start="601:53" pos:end="601:60"><type pos:start="601:53" pos:end="601:60"><name pos:start="601:53" pos:end="601:60">dstBlock</name></type></decl></parameter>, <parameter pos:start="601:63" pos:end="601:71"><decl pos:start="601:63" pos:end="601:71"><type pos:start="601:63" pos:end="601:71"><name pos:start="601:63" pos:end="601:71">dstStride</name></type></decl></parameter>)</parameter_list>;</function_decl></block_content></block></if>

            <if type="elseif" pos:start="603:13" pos:end="605:76">else if<condition pos:start="603:20" pos:end="603:47">(<expr pos:start="603:21" pos:end="603:46"><name pos:start="603:21" pos:end="603:24">mode</name> <operator pos:start="603:26" pos:end="603:26">&amp;</operator> <name pos:start="603:28" pos:end="603:46">FFMPEG_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="605:17" pos:end="605:76"><block_content pos:start="605:17" pos:end="605:76">

                <expr_stmt pos:start="605:17" pos:end="605:76"><expr pos:start="605:17" pos:end="605:75"><call pos:start="605:17" pos:end="605:75"><call pos:start="605:17" pos:end="605:37"><name pos:start="605:17" pos:end="605:22">RENAME</name><argument_list pos:start="605:23" pos:end="605:37">(<argument pos:start="605:24" pos:end="605:36"><expr pos:start="605:24" pos:end="605:36"><name pos:start="605:24" pos:end="605:36">deInterlaceFF</name></expr></argument>)</argument_list></call><argument_list pos:start="605:38" pos:end="605:75">(<argument pos:start="605:39" pos:end="605:46"><expr pos:start="605:39" pos:end="605:46"><name pos:start="605:39" pos:end="605:46">dstBlock</name></expr></argument>, <argument pos:start="605:49" pos:end="605:57"><expr pos:start="605:49" pos:end="605:57"><name pos:start="605:49" pos:end="605:57">dstStride</name></expr></argument>, <argument pos:start="605:60" pos:end="605:74"><expr pos:start="605:60" pos:end="605:74"><name pos:start="605:60" pos:end="605:70"><name pos:start="605:60" pos:end="605:60">c</name><operator pos:start="605:61" pos:end="605:61">.</operator><name pos:start="605:62" pos:end="605:70">deintTemp</name></name> <operator pos:start="605:72" pos:end="605:72">+</operator> <name pos:start="605:74" pos:end="605:74">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="607:13" pos:end="609:101">else if<condition pos:start="607:20" pos:end="607:49">(<expr pos:start="607:21" pos:end="607:48"><name pos:start="607:21" pos:end="607:24">mode</name> <operator pos:start="607:26" pos:end="607:26">&amp;</operator> <name pos:start="607:28" pos:end="607:48">LOWPASS5_DEINT_FILTER</name></expr>)</condition><block type="pseudo" pos:start="609:17" pos:end="609:101"><block_content pos:start="609:17" pos:end="609:101">

                <expr_stmt pos:start="609:17" pos:end="609:101"><expr pos:start="609:17" pos:end="609:100"><call pos:start="609:17" pos:end="609:100"><call pos:start="609:17" pos:end="609:37"><name pos:start="609:17" pos:end="609:22">RENAME</name><argument_list pos:start="609:23" pos:end="609:37">(<argument pos:start="609:24" pos:end="609:36"><expr pos:start="609:24" pos:end="609:36"><name pos:start="609:24" pos:end="609:36">deInterlaceL5</name></expr></argument>)</argument_list></call><argument_list pos:start="609:38" pos:end="609:100">(<argument pos:start="609:39" pos:end="609:46"><expr pos:start="609:39" pos:end="609:46"><name pos:start="609:39" pos:end="609:46">dstBlock</name></expr></argument>, <argument pos:start="609:49" pos:end="609:57"><expr pos:start="609:49" pos:end="609:57"><name pos:start="609:49" pos:end="609:57">dstStride</name></expr></argument>, <argument pos:start="609:60" pos:end="609:74"><expr pos:start="609:60" pos:end="609:74"><name pos:start="609:60" pos:end="609:70"><name pos:start="609:60" pos:end="609:60">c</name><operator pos:start="609:61" pos:end="609:61">.</operator><name pos:start="609:62" pos:end="609:70">deintTemp</name></name> <operator pos:start="609:72" pos:end="609:72">+</operator> <name pos:start="609:74" pos:end="609:74">x</name></expr></argument>, <argument pos:start="609:77" pos:end="609:99"><expr pos:start="609:77" pos:end="609:99"><name pos:start="609:77" pos:end="609:87"><name pos:start="609:77" pos:end="609:77">c</name><operator pos:start="609:78" pos:end="609:78">.</operator><name pos:start="609:79" pos:end="609:87">deintTemp</name></name> <operator pos:start="609:89" pos:end="609:89">+</operator> <name pos:start="609:91" pos:end="609:95">width</name> <operator pos:start="609:97" pos:end="609:97">+</operator> <name pos:start="609:99" pos:end="609:99">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<comment type="block" pos:start="611:1" pos:end="615:2">/*          else if(mode &amp; CUBIC_BLEND_DEINT_FILTER)

                RENAME(deInterlaceBlendCubic)(dstBlock, dstStride);

*/</comment>



            <comment type="block" pos:start="619:13" pos:end="619:50">/* only deblock if we have 2 blocks */</comment>

            <if_stmt pos:start="621:13" pos:end="652:0"><if pos:start="621:13" pos:end="652:0">if<condition pos:start="621:15" pos:end="621:30">(<expr pos:start="621:16" pos:end="621:29"><name pos:start="621:16" pos:end="621:16">y</name> <operator pos:start="621:18" pos:end="621:18">+</operator> <literal type="number" pos:start="621:20" pos:end="621:20">8</literal> <operator pos:start="621:22" pos:end="621:22">&lt;</operator> <name pos:start="621:24" pos:end="621:29">height</name></expr>)</condition><block pos:start="621:31" pos:end="652:0">{<block_content pos:start="623:17" pos:end="645:17">

                <if_stmt pos:start="623:17" pos:end="645:17"><if pos:start="623:17" pos:end="625:63">if<condition pos:start="623:19" pos:end="623:38">(<expr pos:start="623:20" pos:end="623:37"><name pos:start="623:20" pos:end="623:23">mode</name> <operator pos:start="623:25" pos:end="623:25">&amp;</operator> <name pos:start="623:27" pos:end="623:37">V_X1_FILTER</name></expr>)</condition><block type="pseudo" pos:start="625:21" pos:end="625:63"><block_content pos:start="625:21" pos:end="625:63">

                    <expr_stmt pos:start="625:21" pos:end="625:63"><expr pos:start="625:21" pos:end="625:62"><call pos:start="625:21" pos:end="625:62"><call pos:start="625:21" pos:end="625:40"><name pos:start="625:21" pos:end="625:26">RENAME</name><argument_list pos:start="625:27" pos:end="625:40">(<argument pos:start="625:28" pos:end="625:39"><expr pos:start="625:28" pos:end="625:39"><name pos:start="625:28" pos:end="625:39">vertX1Filter</name></expr></argument>)</argument_list></call><argument_list pos:start="625:41" pos:end="625:62">(<argument pos:start="625:42" pos:end="625:49"><expr pos:start="625:42" pos:end="625:49"><name pos:start="625:42" pos:end="625:49">dstBlock</name></expr></argument>, <argument pos:start="625:52" pos:end="625:57"><expr pos:start="625:52" pos:end="625:57"><name pos:start="625:52" pos:end="625:57">stride</name></expr></argument>, <argument pos:start="625:60" pos:end="625:61"><expr pos:start="625:60" pos:end="625:61"><operator pos:start="625:60" pos:end="625:60">&amp;</operator><name pos:start="625:61" pos:end="625:61">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="627:17" pos:end="641:17">else if<condition pos:start="627:24" pos:end="627:41">(<expr pos:start="627:25" pos:end="627:40"><name pos:start="627:25" pos:end="627:28">mode</name> <operator pos:start="627:30" pos:end="627:30">&amp;</operator> <name pos:start="627:32" pos:end="627:40">V_DEBLOCK</name></expr>)</condition><block pos:start="627:42" pos:end="641:17">{<block_content pos:start="629:21" pos:end="639:70">

                    <decl_stmt pos:start="629:21" pos:end="629:76"><decl pos:start="629:21" pos:end="629:75"><type pos:start="629:21" pos:end="629:29"><specifier pos:start="629:21" pos:end="629:25">const</specifier> <name pos:start="629:27" pos:end="629:29">int</name></type> <name pos:start="629:31" pos:end="629:31">t</name><init pos:start="629:32" pos:end="629:75">= <expr pos:start="629:34" pos:end="629:75"><call pos:start="629:34" pos:end="629:75"><call pos:start="629:34" pos:end="629:53"><name pos:start="629:34" pos:end="629:39">RENAME</name><argument_list pos:start="629:40" pos:end="629:53">(<argument pos:start="629:41" pos:end="629:52"><expr pos:start="629:41" pos:end="629:52"><name pos:start="629:41" pos:end="629:52">vertClassify</name></expr></argument>)</argument_list></call><argument_list pos:start="629:54" pos:end="629:75">(<argument pos:start="629:55" pos:end="629:62"><expr pos:start="629:55" pos:end="629:62"><name pos:start="629:55" pos:end="629:62">dstBlock</name></expr></argument>, <argument pos:start="629:65" pos:end="629:70"><expr pos:start="629:65" pos:end="629:70"><name pos:start="629:65" pos:end="629:70">stride</name></expr></argument>, <argument pos:start="629:73" pos:end="629:74"><expr pos:start="629:73" pos:end="629:74"><operator pos:start="629:73" pos:end="629:73">&amp;</operator><name pos:start="629:74" pos:end="629:74">c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="633:21" pos:end="639:70"><if pos:start="633:21" pos:end="635:68">if<condition pos:start="633:23" pos:end="633:28">(<expr pos:start="633:24" pos:end="633:27"><name pos:start="633:24" pos:end="633:24">t</name><operator pos:start="633:25" pos:end="633:26">==</operator><literal type="number" pos:start="633:27" pos:end="633:27">1</literal></expr>)</condition><block type="pseudo" pos:start="635:25" pos:end="635:68"><block_content pos:start="635:25" pos:end="635:68">

                        <expr_stmt pos:start="635:25" pos:end="635:68"><expr pos:start="635:25" pos:end="635:67"><call pos:start="635:25" pos:end="635:67"><call pos:start="635:25" pos:end="635:45"><name pos:start="635:25" pos:end="635:30">RENAME</name><argument_list pos:start="635:31" pos:end="635:45">(<argument pos:start="635:32" pos:end="635:44"><expr pos:start="635:32" pos:end="635:44"><name pos:start="635:32" pos:end="635:44">doVertLowPass</name></expr></argument>)</argument_list></call><argument_list pos:start="635:46" pos:end="635:67">(<argument pos:start="635:47" pos:end="635:54"><expr pos:start="635:47" pos:end="635:54"><name pos:start="635:47" pos:end="635:54">dstBlock</name></expr></argument>, <argument pos:start="635:57" pos:end="635:62"><expr pos:start="635:57" pos:end="635:62"><name pos:start="635:57" pos:end="635:62">stride</name></expr></argument>, <argument pos:start="635:65" pos:end="635:66"><expr pos:start="635:65" pos:end="635:66"><operator pos:start="635:65" pos:end="635:65">&amp;</operator><name pos:start="635:66" pos:end="635:66">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="637:21" pos:end="639:70">else if<condition pos:start="637:28" pos:end="637:33">(<expr pos:start="637:29" pos:end="637:32"><name pos:start="637:29" pos:end="637:29">t</name><operator pos:start="637:30" pos:end="637:31">==</operator><literal type="number" pos:start="637:32" pos:end="637:32">2</literal></expr>)</condition><block type="pseudo" pos:start="639:25" pos:end="639:70"><block_content pos:start="639:25" pos:end="639:70">

                        <expr_stmt pos:start="639:25" pos:end="639:70"><expr pos:start="639:25" pos:end="639:69"><call pos:start="639:25" pos:end="639:69"><call pos:start="639:25" pos:end="639:47"><name pos:start="639:25" pos:end="639:30">RENAME</name><argument_list pos:start="639:31" pos:end="639:47">(<argument pos:start="639:32" pos:end="639:46"><expr pos:start="639:32" pos:end="639:46"><name pos:start="639:32" pos:end="639:46">doVertDefFilter</name></expr></argument>)</argument_list></call><argument_list pos:start="639:48" pos:end="639:69">(<argument pos:start="639:49" pos:end="639:56"><expr pos:start="639:49" pos:end="639:56"><name pos:start="639:49" pos:end="639:56">dstBlock</name></expr></argument>, <argument pos:start="639:59" pos:end="639:64"><expr pos:start="639:59" pos:end="639:64"><name pos:start="639:59" pos:end="639:64">stride</name></expr></argument>, <argument pos:start="639:67" pos:end="639:68"><expr pos:start="639:67" pos:end="639:68"><operator pos:start="639:67" pos:end="639:67">&amp;</operator><name pos:start="639:68" pos:end="639:68">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if><if type="elseif" pos:start="641:18" pos:end="645:17">else if<condition pos:start="641:25" pos:end="641:44">(<expr pos:start="641:26" pos:end="641:43"><name pos:start="641:26" pos:end="641:29">mode</name> <operator pos:start="641:31" pos:end="641:31">&amp;</operator> <name pos:start="641:33" pos:end="641:43">V_A_DEBLOCK</name></expr>)</condition><block pos:start="641:45" pos:end="645:17">{<block_content pos:start="643:21" pos:end="643:66">

                    <expr_stmt pos:start="643:21" pos:end="643:66"><expr pos:start="643:21" pos:end="643:65"><call pos:start="643:21" pos:end="643:65"><call pos:start="643:21" pos:end="643:40"><name pos:start="643:21" pos:end="643:26">RENAME</name><argument_list pos:start="643:27" pos:end="643:40">(<argument pos:start="643:28" pos:end="643:39"><expr pos:start="643:28" pos:end="643:39"><name pos:start="643:28" pos:end="643:39">do_a_deblock</name></expr></argument>)</argument_list></call><argument_list pos:start="643:41" pos:end="643:65">(<argument pos:start="643:42" pos:end="643:49"><expr pos:start="643:42" pos:end="643:49"><name pos:start="643:42" pos:end="643:49">dstBlock</name></expr></argument>, <argument pos:start="643:52" pos:end="643:57"><expr pos:start="643:52" pos:end="643:57"><name pos:start="643:52" pos:end="643:57">stride</name></expr></argument>, <argument pos:start="643:60" pos:end="643:60"><expr pos:start="643:60" pos:end="643:60"><literal type="number" pos:start="643:60" pos:end="643:60">1</literal></expr></argument>, <argument pos:start="643:63" pos:end="643:64"><expr pos:start="643:63" pos:end="643:64"><operator pos:start="643:63" pos:end="643:63">&amp;</operator><name pos:start="643:64" pos:end="643:64">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



<cpp:if pos:start="651:1" pos:end="651:19">#<cpp:directive pos:start="651:2" pos:end="651:3">if</cpp:directive> <expr pos:start="651:5" pos:end="651:19"><name pos:start="651:5" pos:end="651:19">HAVE_MMX_INLINE</name></expr></cpp:if>

            <function_decl pos:start="653:13" pos:end="656:0"><type pos:start="653:13" pos:end="653:18"><name pos:start="653:13" pos:end="653:18">RENAME</name></type>(<name pos:start="653:20" pos:end="653:29">transpose1</name>)<parameter_list pos:start="653:31" pos:end="653:75">(<parameter pos:start="653:32" pos:end="653:41"><decl pos:start="653:32" pos:end="653:41"><type pos:start="653:32" pos:end="653:41"><name pos:start="653:32" pos:end="653:41">tempBlock1</name></type></decl></parameter>, <parameter pos:start="653:44" pos:end="653:53"><decl pos:start="653:44" pos:end="653:53"><type pos:start="653:44" pos:end="653:53"><name pos:start="653:44" pos:end="653:53">tempBlock2</name></type></decl></parameter>, <parameter pos:start="653:56" pos:end="653:63"><decl pos:start="653:56" pos:end="653:63"><type pos:start="653:56" pos:end="653:63"><name pos:start="653:56" pos:end="653:63">dstBlock</name></type></decl></parameter>, <parameter pos:start="653:66" pos:end="653:74"><decl pos:start="653:66" pos:end="653:74"><type pos:start="653:66" pos:end="653:74"><name pos:start="653:66" pos:end="653:74">dstStride</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif pos:start="655:1" pos:end="655:6">#<cpp:directive pos:start="655:2" pos:end="655:6">endif</cpp:directive></cpp:endif>

            <comment type="block" pos:start="657:13" pos:end="657:79">/* check if we have a previous block to deblock it with dstBlock */</comment>

            <if_stmt pos:start="659:13" pos:end="779:13"><if pos:start="659:13" pos:end="779:13">if<condition pos:start="659:15" pos:end="659:26">(<expr pos:start="659:16" pos:end="659:25"><name pos:start="659:16" pos:end="659:16">x</name> <operator pos:start="659:18" pos:end="659:18">-</operator> <literal type="number" pos:start="659:20" pos:end="659:20">8</literal> <operator pos:start="659:22" pos:end="659:23">&gt;=</operator> <literal type="number" pos:start="659:25" pos:end="659:25">0</literal></expr>)</condition><block pos:start="659:27" pos:end="779:13">{<block_content pos:start="663:17" pos:end="777:17">

<cpp:if pos:start="661:1" pos:end="661:19">#<cpp:directive pos:start="661:2" pos:end="661:3">if</cpp:directive> <expr pos:start="661:5" pos:end="661:19"><name pos:start="661:5" pos:end="661:19">HAVE_MMX_INLINE</name></expr></cpp:if>

                <if_stmt pos:start="663:17" pos:end="687:17"><if pos:start="663:17" pos:end="665:65">if<condition pos:start="663:19" pos:end="663:38">(<expr pos:start="663:20" pos:end="663:37"><name pos:start="663:20" pos:end="663:23">mode</name> <operator pos:start="663:25" pos:end="663:25">&amp;</operator> <name pos:start="663:27" pos:end="663:37">H_X1_FILTER</name></expr>)</condition><block type="pseudo" pos:start="665:25" pos:end="665:65"><block_content pos:start="665:25" pos:end="665:65">

                        <expr_stmt pos:start="665:25" pos:end="665:65"><expr pos:start="665:25" pos:end="665:64"><call pos:start="665:25" pos:end="665:64"><call pos:start="665:25" pos:end="665:44"><name pos:start="665:25" pos:end="665:30">RENAME</name><argument_list pos:start="665:31" pos:end="665:44">(<argument pos:start="665:32" pos:end="665:43"><expr pos:start="665:32" pos:end="665:43"><name pos:start="665:32" pos:end="665:43">vertX1Filter</name></expr></argument>)</argument_list></call><argument_list pos:start="665:45" pos:end="665:64">(<argument pos:start="665:46" pos:end="665:55"><expr pos:start="665:46" pos:end="665:55"><name pos:start="665:46" pos:end="665:55">tempBlock1</name></expr></argument>, <argument pos:start="665:58" pos:end="665:59"><expr pos:start="665:58" pos:end="665:59"><literal type="number" pos:start="665:58" pos:end="665:59">16</literal></expr></argument>, <argument pos:start="665:62" pos:end="665:63"><expr pos:start="665:62" pos:end="665:63"><operator pos:start="665:62" pos:end="665:62">&amp;</operator><name pos:start="665:63" pos:end="665:63">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="667:17" pos:end="683:17">else if<condition pos:start="667:24" pos:end="667:41">(<expr pos:start="667:25" pos:end="667:40"><name pos:start="667:25" pos:end="667:28">mode</name> <operator pos:start="667:30" pos:end="667:30">&amp;</operator> <name pos:start="667:32" pos:end="667:40">H_DEBLOCK</name></expr>)</condition><block pos:start="667:42" pos:end="683:17">{<block_content pos:start="671:21" pos:end="681:68">

<comment type="line" pos:start="669:1" pos:end="669:13">//START_TIMER</comment>

                    <decl_stmt pos:start="671:21" pos:end="671:74"><decl pos:start="671:21" pos:end="671:73"><type pos:start="671:21" pos:end="671:29"><specifier pos:start="671:21" pos:end="671:25">const</specifier> <name pos:start="671:27" pos:end="671:29">int</name></type> <name pos:start="671:31" pos:end="671:31">t</name><init pos:start="671:32" pos:end="671:73">= <expr pos:start="671:34" pos:end="671:73"><call pos:start="671:34" pos:end="671:73"><call pos:start="671:34" pos:end="671:53"><name pos:start="671:34" pos:end="671:39">RENAME</name><argument_list pos:start="671:40" pos:end="671:53">(<argument pos:start="671:41" pos:end="671:52"><expr pos:start="671:41" pos:end="671:52"><name pos:start="671:41" pos:end="671:52">vertClassify</name></expr></argument>)</argument_list></call><argument_list pos:start="671:54" pos:end="671:73">(<argument pos:start="671:55" pos:end="671:64"><expr pos:start="671:55" pos:end="671:64"><name pos:start="671:55" pos:end="671:64">tempBlock1</name></expr></argument>, <argument pos:start="671:67" pos:end="671:68"><expr pos:start="671:67" pos:end="671:68"><literal type="number" pos:start="671:67" pos:end="671:68">16</literal></expr></argument>, <argument pos:start="671:71" pos:end="671:72"><expr pos:start="671:71" pos:end="671:72"><operator pos:start="671:71" pos:end="671:71">&amp;</operator><name pos:start="671:72" pos:end="671:72">c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line" pos:start="673:1" pos:end="673:27">//STOP_TIMER("dc &amp; minmax")</comment>

                    <if_stmt pos:start="675:21" pos:end="681:68"><if pos:start="675:21" pos:end="677:66">if<condition pos:start="675:23" pos:end="675:28">(<expr pos:start="675:24" pos:end="675:27"><name pos:start="675:24" pos:end="675:24">t</name><operator pos:start="675:25" pos:end="675:26">==</operator><literal type="number" pos:start="675:27" pos:end="675:27">1</literal></expr>)</condition><block type="pseudo" pos:start="677:25" pos:end="677:66"><block_content pos:start="677:25" pos:end="677:66">

                        <expr_stmt pos:start="677:25" pos:end="677:66"><expr pos:start="677:25" pos:end="677:65"><call pos:start="677:25" pos:end="677:65"><call pos:start="677:25" pos:end="677:45"><name pos:start="677:25" pos:end="677:30">RENAME</name><argument_list pos:start="677:31" pos:end="677:45">(<argument pos:start="677:32" pos:end="677:44"><expr pos:start="677:32" pos:end="677:44"><name pos:start="677:32" pos:end="677:44">doVertLowPass</name></expr></argument>)</argument_list></call><argument_list pos:start="677:46" pos:end="677:65">(<argument pos:start="677:47" pos:end="677:56"><expr pos:start="677:47" pos:end="677:56"><name pos:start="677:47" pos:end="677:56">tempBlock1</name></expr></argument>, <argument pos:start="677:59" pos:end="677:60"><expr pos:start="677:59" pos:end="677:60"><literal type="number" pos:start="677:59" pos:end="677:60">16</literal></expr></argument>, <argument pos:start="677:63" pos:end="677:64"><expr pos:start="677:63" pos:end="677:64"><operator pos:start="677:63" pos:end="677:63">&amp;</operator><name pos:start="677:64" pos:end="677:64">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="679:21" pos:end="681:68">else if<condition pos:start="679:28" pos:end="679:33">(<expr pos:start="679:29" pos:end="679:32"><name pos:start="679:29" pos:end="679:29">t</name><operator pos:start="679:30" pos:end="679:31">==</operator><literal type="number" pos:start="679:32" pos:end="679:32">2</literal></expr>)</condition><block type="pseudo" pos:start="681:25" pos:end="681:68"><block_content pos:start="681:25" pos:end="681:68">

                        <expr_stmt pos:start="681:25" pos:end="681:68"><expr pos:start="681:25" pos:end="681:67"><call pos:start="681:25" pos:end="681:67"><call pos:start="681:25" pos:end="681:47"><name pos:start="681:25" pos:end="681:30">RENAME</name><argument_list pos:start="681:31" pos:end="681:47">(<argument pos:start="681:32" pos:end="681:46"><expr pos:start="681:32" pos:end="681:46"><name pos:start="681:32" pos:end="681:46">doVertDefFilter</name></expr></argument>)</argument_list></call><argument_list pos:start="681:48" pos:end="681:67">(<argument pos:start="681:49" pos:end="681:58"><expr pos:start="681:49" pos:end="681:58"><name pos:start="681:49" pos:end="681:58">tempBlock1</name></expr></argument>, <argument pos:start="681:61" pos:end="681:62"><expr pos:start="681:61" pos:end="681:62"><literal type="number" pos:start="681:61" pos:end="681:62">16</literal></expr></argument>, <argument pos:start="681:65" pos:end="681:66"><expr pos:start="681:65" pos:end="681:66"><operator pos:start="681:65" pos:end="681:65">&amp;</operator><name pos:start="681:66" pos:end="681:66">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if><if type="elseif" pos:start="683:18" pos:end="687:17">else if<condition pos:start="683:25" pos:end="683:44">(<expr pos:start="683:26" pos:end="683:43"><name pos:start="683:26" pos:end="683:29">mode</name> <operator pos:start="683:31" pos:end="683:31">&amp;</operator> <name pos:start="683:33" pos:end="683:43">H_A_DEBLOCK</name></expr>)</condition><block pos:start="683:45" pos:end="687:17">{<block_content pos:start="685:25" pos:end="685:68">

                        <expr_stmt pos:start="685:25" pos:end="685:68"><expr pos:start="685:25" pos:end="685:67"><call pos:start="685:25" pos:end="685:67"><call pos:start="685:25" pos:end="685:44"><name pos:start="685:25" pos:end="685:30">RENAME</name><argument_list pos:start="685:31" pos:end="685:44">(<argument pos:start="685:32" pos:end="685:43"><expr pos:start="685:32" pos:end="685:43"><name pos:start="685:32" pos:end="685:43">do_a_deblock</name></expr></argument>)</argument_list></call><argument_list pos:start="685:45" pos:end="685:67">(<argument pos:start="685:46" pos:end="685:55"><expr pos:start="685:46" pos:end="685:55"><name pos:start="685:46" pos:end="685:55">tempBlock1</name></expr></argument>, <argument pos:start="685:58" pos:end="685:59"><expr pos:start="685:58" pos:end="685:59"><literal type="number" pos:start="685:58" pos:end="685:59">16</literal></expr></argument>, <argument pos:start="685:62" pos:end="685:62"><expr pos:start="685:62" pos:end="685:62"><literal type="number" pos:start="685:62" pos:end="685:62">1</literal></expr></argument>, <argument pos:start="685:65" pos:end="685:66"><expr pos:start="685:65" pos:end="685:66"><operator pos:start="685:65" pos:end="685:65">&amp;</operator><name pos:start="685:66" pos:end="685:66">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="691:17" pos:end="696:0"><expr pos:start="691:17" pos:end="691:76"><call pos:start="691:17" pos:end="691:76"><call pos:start="691:17" pos:end="691:34"><name pos:start="691:17" pos:end="691:22">RENAME</name><argument_list pos:start="691:23" pos:end="691:34">(<argument pos:start="691:24" pos:end="691:33"><expr pos:start="691:24" pos:end="691:33"><name pos:start="691:24" pos:end="691:33">transpose2</name></expr></argument>)</argument_list></call><argument_list pos:start="691:35" pos:end="691:76">(<argument pos:start="691:36" pos:end="691:45"><expr pos:start="691:36" pos:end="691:45"><name pos:start="691:36" pos:end="691:43">dstBlock</name><operator pos:start="691:44" pos:end="691:44">-</operator><literal type="number" pos:start="691:45" pos:end="691:45">4</literal></expr></argument>, <argument pos:start="691:48" pos:end="691:56"><expr pos:start="691:48" pos:end="691:56"><name pos:start="691:48" pos:end="691:56">dstStride</name></expr></argument>, <argument pos:start="691:59" pos:end="691:75"><expr pos:start="691:59" pos:end="691:75"><name pos:start="691:59" pos:end="691:68">tempBlock1</name> <operator pos:start="691:70" pos:end="691:70">+</operator> <literal type="number" pos:start="691:72" pos:end="691:72">4</literal><operator pos:start="691:73" pos:end="691:73">*</operator><literal type="number" pos:start="691:74" pos:end="691:75">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:else pos:start="695:1" pos:end="695:5">#<cpp:directive pos:start="695:2" pos:end="695:5">else</cpp:directive></cpp:else>

                <if_stmt pos:start="697:17" pos:end="754:0"><if pos:start="697:17" pos:end="699:58">if<condition pos:start="697:19" pos:end="697:38">(<expr pos:start="697:20" pos:end="697:37"><name pos:start="697:20" pos:end="697:23">mode</name> <operator pos:start="697:25" pos:end="697:25">&amp;</operator> <name pos:start="697:27" pos:end="697:37">H_X1_FILTER</name></expr>)</condition><block type="pseudo" pos:start="699:21" pos:end="699:58"><block_content pos:start="699:21" pos:end="699:58">

                    <expr_stmt pos:start="699:21" pos:end="699:58"><expr pos:start="699:21" pos:end="699:57"><call pos:start="699:21" pos:end="699:57"><name pos:start="699:21" pos:end="699:33">horizX1Filter</name><argument_list pos:start="699:34" pos:end="699:57">(<argument pos:start="699:35" pos:end="699:44"><expr pos:start="699:35" pos:end="699:44"><name pos:start="699:35" pos:end="699:42">dstBlock</name><operator pos:start="699:43" pos:end="699:43">-</operator><literal type="number" pos:start="699:44" pos:end="699:44">4</literal></expr></argument>, <argument pos:start="699:47" pos:end="699:52"><expr pos:start="699:47" pos:end="699:52"><name pos:start="699:47" pos:end="699:52">stride</name></expr></argument>, <argument pos:start="699:55" pos:end="699:56"><expr pos:start="699:55" pos:end="699:56"><name pos:start="699:55" pos:end="699:56">QP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="701:17" pos:end="747:17">else if<condition pos:start="701:24" pos:end="701:41">(<expr pos:start="701:25" pos:end="701:40"><name pos:start="701:25" pos:end="701:28">mode</name> <operator pos:start="701:30" pos:end="701:30">&amp;</operator> <name pos:start="701:32" pos:end="701:40">H_DEBLOCK</name></expr>)</condition><block pos:start="701:42" pos:end="747:17">{<block_content pos:start="705:21" pos:end="746:0">

<cpp:if pos:start="703:1" pos:end="703:16">#<cpp:directive pos:start="703:2" pos:end="703:3">if</cpp:directive> <expr pos:start="703:5" pos:end="703:16"><name pos:start="703:5" pos:end="703:16">HAVE_ALTIVEC</name></expr></cpp:if>

                    <macro pos:start="705:21" pos:end="705:65"><name pos:start="705:21" pos:end="705:35">DECLARE_ALIGNED</name><argument_list pos:start="705:36" pos:end="705:65">(<argument pos:start="705:37" pos:end="705:38"><literal type="number" pos:start="705:37" pos:end="705:38">16</literal></argument>, <argument pos:start="705:41" pos:end="705:53">unsigned char</argument>, <argument pos:start="705:56" pos:end="705:64">tempBlock</argument>)</argument_list></macro><expr_stmt pos:start="705:66" pos:end="705:71"><expr pos:start="705:66" pos:end="705:70"><index pos:start="705:66" pos:end="705:70">[<expr pos:start="705:67" pos:end="705:69"><literal type="number" pos:start="705:67" pos:end="705:69">272</literal></expr>]</index></expr>;</expr_stmt>

                    <decl_stmt pos:start="707:21" pos:end="707:26"><decl pos:start="707:21" pos:end="707:25"><type pos:start="707:21" pos:end="707:23"><name pos:start="707:21" pos:end="707:23">int</name></type> <name pos:start="707:25" pos:end="707:25">t</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="709:21" pos:end="709:101"><expr pos:start="709:21" pos:end="709:100"><call pos:start="709:21" pos:end="709:100"><name pos:start="709:21" pos:end="709:61">transpose_16x8_char_toPackedAlign_altivec</name><argument_list pos:start="709:62" pos:end="709:100">(<argument pos:start="709:63" pos:end="709:71"><expr pos:start="709:63" pos:end="709:71"><name pos:start="709:63" pos:end="709:71">tempBlock</name></expr></argument>, <argument pos:start="709:74" pos:end="709:91"><expr pos:start="709:74" pos:end="709:91"><name pos:start="709:74" pos:end="709:81">dstBlock</name> <operator pos:start="709:83" pos:end="709:83">-</operator> <operator pos:start="709:85" pos:end="709:85">(</operator><literal type="number" pos:start="709:86" pos:end="709:88">4</literal> <operator pos:start="709:88" pos:end="709:88">+</operator> <literal type="number" pos:start="709:90" pos:end="709:90">1</literal><operator pos:start="709:91" pos:end="709:91">)</operator></expr></argument>, <argument pos:start="709:94" pos:end="709:99"><expr pos:start="709:94" pos:end="709:99"><name pos:start="709:94" pos:end="709:99">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="713:21" pos:end="713:67"><expr pos:start="713:21" pos:end="713:66"><name pos:start="713:21" pos:end="713:21">t</name> <operator pos:start="713:23" pos:end="713:23">=</operator> <call pos:start="713:25" pos:end="713:66"><name pos:start="713:25" pos:end="713:44">vertClassify_altivec</name><argument_list pos:start="713:45" pos:end="713:66">(<argument pos:start="713:46" pos:end="713:57"><expr pos:start="713:46" pos:end="713:57"><name pos:start="713:46" pos:end="713:54">tempBlock</name><operator pos:start="713:55" pos:end="713:55">-</operator><literal type="number" pos:start="713:56" pos:end="713:57">48</literal></expr></argument>, <argument pos:start="713:60" pos:end="713:61"><expr pos:start="713:60" pos:end="713:61"><literal type="number" pos:start="713:60" pos:end="713:61">16</literal></expr></argument>, <argument pos:start="713:64" pos:end="713:65"><expr pos:start="713:64" pos:end="713:65"><operator pos:start="713:64" pos:end="713:64">&amp;</operator><name pos:start="713:65" pos:end="713:65">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="715:21" pos:end="732:0"><if pos:start="715:21" pos:end="721:21">if<condition pos:start="715:23" pos:end="715:28">(<expr pos:start="715:24" pos:end="715:27"><name pos:start="715:24" pos:end="715:24">t</name><operator pos:start="715:25" pos:end="715:26">==</operator><literal type="number" pos:start="715:27" pos:end="715:27">1</literal></expr>)</condition> <block pos:start="715:30" pos:end="721:21">{<block_content pos:start="717:25" pos:end="719:107">

                        <expr_stmt pos:start="717:25" pos:end="717:68"><expr pos:start="717:25" pos:end="717:67"><call pos:start="717:25" pos:end="717:67"><name pos:start="717:25" pos:end="717:45">doVertLowPass_altivec</name><argument_list pos:start="717:46" pos:end="717:67">(<argument pos:start="717:47" pos:end="717:58"><expr pos:start="717:47" pos:end="717:58"><name pos:start="717:47" pos:end="717:55">tempBlock</name><operator pos:start="717:56" pos:end="717:56">-</operator><literal type="number" pos:start="717:57" pos:end="717:58">48</literal></expr></argument>, <argument pos:start="717:61" pos:end="717:62"><expr pos:start="717:61" pos:end="717:62"><literal type="number" pos:start="717:61" pos:end="717:62">16</literal></expr></argument>, <argument pos:start="717:65" pos:end="717:66"><expr pos:start="717:65" pos:end="717:66"><operator pos:start="717:65" pos:end="717:65">&amp;</operator><name pos:start="717:66" pos:end="717:66">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="719:25" pos:end="719:107"><expr pos:start="719:25" pos:end="719:106"><call pos:start="719:25" pos:end="719:106"><name pos:start="719:25" pos:end="719:67">transpose_8x16_char_fromPackedAlign_altivec</name><argument_list pos:start="719:68" pos:end="719:106">(<argument pos:start="719:69" pos:end="719:86"><expr pos:start="719:69" pos:end="719:86"><name pos:start="719:69" pos:end="719:76">dstBlock</name> <operator pos:start="719:78" pos:end="719:78">-</operator> <operator pos:start="719:80" pos:end="719:80">(</operator><literal type="number" pos:start="719:81" pos:end="719:83">4</literal> <operator pos:start="719:83" pos:end="719:83">+</operator> <literal type="number" pos:start="719:85" pos:end="719:85">1</literal><operator pos:start="719:86" pos:end="719:86">)</operator></expr></argument>, <argument pos:start="719:89" pos:end="719:97"><expr pos:start="719:89" pos:end="719:97"><name pos:start="719:89" pos:end="719:97">tempBlock</name></expr></argument>, <argument pos:start="719:100" pos:end="719:105"><expr pos:start="719:100" pos:end="719:105"><name pos:start="719:100" pos:end="719:105">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if>

                    <if type="elseif" pos:start="723:21" pos:end="732:0">else if<condition pos:start="723:28" pos:end="723:33">(<expr pos:start="723:29" pos:end="723:32"><name pos:start="723:29" pos:end="723:29">t</name><operator pos:start="723:30" pos:end="723:31">==</operator><literal type="number" pos:start="723:32" pos:end="723:32">2</literal></expr>)</condition> <block pos:start="723:35" pos:end="732:0">{<block_content pos:start="725:25" pos:end="727:107">

                        <expr_stmt pos:start="725:25" pos:end="725:70"><expr pos:start="725:25" pos:end="725:69"><call pos:start="725:25" pos:end="725:69"><name pos:start="725:25" pos:end="725:47">doVertDefFilter_altivec</name><argument_list pos:start="725:48" pos:end="725:69">(<argument pos:start="725:49" pos:end="725:60"><expr pos:start="725:49" pos:end="725:60"><name pos:start="725:49" pos:end="725:57">tempBlock</name><operator pos:start="725:58" pos:end="725:58">-</operator><literal type="number" pos:start="725:59" pos:end="725:60">48</literal></expr></argument>, <argument pos:start="725:63" pos:end="725:64"><expr pos:start="725:63" pos:end="725:64"><literal type="number" pos:start="725:63" pos:end="725:64">16</literal></expr></argument>, <argument pos:start="725:67" pos:end="725:68"><expr pos:start="725:67" pos:end="725:68"><operator pos:start="725:67" pos:end="725:67">&amp;</operator><name pos:start="725:68" pos:end="725:68">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="727:25" pos:end="727:107"><expr pos:start="727:25" pos:end="727:106"><call pos:start="727:25" pos:end="727:106"><name pos:start="727:25" pos:end="727:67">transpose_8x16_char_fromPackedAlign_altivec</name><argument_list pos:start="727:68" pos:end="727:106">(<argument pos:start="727:69" pos:end="727:86"><expr pos:start="727:69" pos:end="727:86"><name pos:start="727:69" pos:end="727:76">dstBlock</name> <operator pos:start="727:78" pos:end="727:78">-</operator> <operator pos:start="727:80" pos:end="727:80">(</operator><literal type="number" pos:start="727:81" pos:end="727:83">4</literal> <operator pos:start="727:83" pos:end="727:83">+</operator> <literal type="number" pos:start="727:85" pos:end="727:85">1</literal><operator pos:start="727:86" pos:end="727:86">)</operator></expr></argument>, <argument pos:start="727:89" pos:end="727:97"><expr pos:start="727:89" pos:end="727:97"><name pos:start="727:89" pos:end="727:97">tempBlock</name></expr></argument>, <argument pos:start="727:100" pos:end="727:105"><expr pos:start="727:100" pos:end="727:105"><name pos:start="727:100" pos:end="727:105">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

<cpp:else pos:start="731:1" pos:end="731:5">#<cpp:directive pos:start="731:2" pos:end="731:5">else</cpp:directive></cpp:else>

                    <decl_stmt pos:start="733:21" pos:end="733:79"><decl pos:start="733:21" pos:end="733:78"><type pos:start="733:21" pos:end="733:29"><specifier pos:start="733:21" pos:end="733:25">const</specifier> <name pos:start="733:27" pos:end="733:29">int</name></type> <name pos:start="733:31" pos:end="733:31">t</name><init pos:start="733:32" pos:end="733:78">= <expr pos:start="733:34" pos:end="733:78"><call pos:start="733:34" pos:end="733:78"><call pos:start="733:34" pos:end="733:54"><name pos:start="733:34" pos:end="733:39">RENAME</name><argument_list pos:start="733:40" pos:end="733:54">(<argument pos:start="733:41" pos:end="733:53"><expr pos:start="733:41" pos:end="733:53"><name pos:start="733:41" pos:end="733:53">horizClassify</name></expr></argument>)</argument_list></call><argument_list pos:start="733:55" pos:end="733:78">(<argument pos:start="733:56" pos:end="733:65"><expr pos:start="733:56" pos:end="733:65"><name pos:start="733:56" pos:end="733:63">dstBlock</name><operator pos:start="733:64" pos:end="733:64">-</operator><literal type="number" pos:start="733:65" pos:end="733:65">4</literal></expr></argument>, <argument pos:start="733:68" pos:end="733:73"><expr pos:start="733:68" pos:end="733:73"><name pos:start="733:68" pos:end="733:73">stride</name></expr></argument>, <argument pos:start="733:76" pos:end="733:77"><expr pos:start="733:76" pos:end="733:77"><operator pos:start="733:76" pos:end="733:76">&amp;</operator><name pos:start="733:77" pos:end="733:77">c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="737:21" pos:end="746:0"><if pos:start="737:21" pos:end="739:71">if<condition pos:start="737:23" pos:end="737:28">(<expr pos:start="737:24" pos:end="737:27"><name pos:start="737:24" pos:end="737:24">t</name><operator pos:start="737:25" pos:end="737:26">==</operator><literal type="number" pos:start="737:27" pos:end="737:27">1</literal></expr>)</condition><block type="pseudo" pos:start="739:25" pos:end="739:71"><block_content pos:start="739:25" pos:end="739:71">

                        <expr_stmt pos:start="739:25" pos:end="739:71"><expr pos:start="739:25" pos:end="739:70"><call pos:start="739:25" pos:end="739:70"><call pos:start="739:25" pos:end="739:46"><name pos:start="739:25" pos:end="739:30">RENAME</name><argument_list pos:start="739:31" pos:end="739:46">(<argument pos:start="739:32" pos:end="739:45"><expr pos:start="739:32" pos:end="739:45"><name pos:start="739:32" pos:end="739:45">doHorizLowPass</name></expr></argument>)</argument_list></call><argument_list pos:start="739:47" pos:end="739:70">(<argument pos:start="739:48" pos:end="739:57"><expr pos:start="739:48" pos:end="739:57"><name pos:start="739:48" pos:end="739:55">dstBlock</name><operator pos:start="739:56" pos:end="739:56">-</operator><literal type="number" pos:start="739:57" pos:end="739:57">4</literal></expr></argument>, <argument pos:start="739:60" pos:end="739:65"><expr pos:start="739:60" pos:end="739:65"><name pos:start="739:60" pos:end="739:65">stride</name></expr></argument>, <argument pos:start="739:68" pos:end="739:69"><expr pos:start="739:68" pos:end="739:69"><operator pos:start="739:68" pos:end="739:68">&amp;</operator><name pos:start="739:69" pos:end="739:69">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="741:21" pos:end="746:0">else if<condition pos:start="741:28" pos:end="741:33">(<expr pos:start="741:29" pos:end="741:32"><name pos:start="741:29" pos:end="741:29">t</name><operator pos:start="741:30" pos:end="741:31">==</operator><literal type="number" pos:start="741:32" pos:end="741:32">2</literal></expr>)</condition><block type="pseudo" pos:start="743:25" pos:end="746:0"><block_content pos:start="743:25" pos:end="746:0">

                        <expr_stmt pos:start="743:25" pos:end="746:0"><expr pos:start="743:25" pos:end="743:72"><call pos:start="743:25" pos:end="743:72"><call pos:start="743:25" pos:end="743:48"><name pos:start="743:25" pos:end="743:30">RENAME</name><argument_list pos:start="743:31" pos:end="743:48">(<argument pos:start="743:32" pos:end="743:47"><expr pos:start="743:32" pos:end="743:47"><name pos:start="743:32" pos:end="743:47">doHorizDefFilter</name></expr></argument>)</argument_list></call><argument_list pos:start="743:49" pos:end="743:72">(<argument pos:start="743:50" pos:end="743:59"><expr pos:start="743:50" pos:end="743:59"><name pos:start="743:50" pos:end="743:57">dstBlock</name><operator pos:start="743:58" pos:end="743:58">-</operator><literal type="number" pos:start="743:59" pos:end="743:59">4</literal></expr></argument>, <argument pos:start="743:62" pos:end="743:67"><expr pos:start="743:62" pos:end="743:67"><name pos:start="743:62" pos:end="743:67">stride</name></expr></argument>, <argument pos:start="743:70" pos:end="743:71"><expr pos:start="743:70" pos:end="743:71"><operator pos:start="743:70" pos:end="743:70">&amp;</operator><name pos:start="743:71" pos:end="743:71">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="745:1" pos:end="745:6">#<cpp:directive pos:start="745:2" pos:end="745:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></if><if type="elseif" pos:start="747:18" pos:end="754:0">else if<condition pos:start="747:25" pos:end="747:44">(<expr pos:start="747:26" pos:end="747:43"><name pos:start="747:26" pos:end="747:29">mode</name> <operator pos:start="747:31" pos:end="747:31">&amp;</operator> <name pos:start="747:33" pos:end="747:43">H_A_DEBLOCK</name></expr>)</condition><block pos:start="747:45" pos:end="754:0">{<block_content pos:start="749:21" pos:end="749:68">

                    <expr_stmt pos:start="749:21" pos:end="749:68"><expr pos:start="749:21" pos:end="749:67"><call pos:start="749:21" pos:end="749:67"><call pos:start="749:21" pos:end="749:40"><name pos:start="749:21" pos:end="749:26">RENAME</name><argument_list pos:start="749:27" pos:end="749:40">(<argument pos:start="749:28" pos:end="749:39"><expr pos:start="749:28" pos:end="749:39"><name pos:start="749:28" pos:end="749:39">do_a_deblock</name></expr></argument>)</argument_list></call><argument_list pos:start="749:41" pos:end="749:67">(<argument pos:start="749:42" pos:end="749:51"><expr pos:start="749:42" pos:end="749:51"><name pos:start="749:42" pos:end="749:49">dstBlock</name><operator pos:start="749:50" pos:end="749:50">-</operator><literal type="number" pos:start="749:51" pos:end="749:51">8</literal></expr></argument>, <argument pos:start="749:54" pos:end="749:54"><expr pos:start="749:54" pos:end="749:54"><literal type="number" pos:start="749:54" pos:end="749:54">1</literal></expr></argument>, <argument pos:start="749:57" pos:end="749:62"><expr pos:start="749:57" pos:end="749:62"><name pos:start="749:57" pos:end="749:62">stride</name></expr></argument>, <argument pos:start="749:65" pos:end="749:66"><expr pos:start="749:65" pos:end="749:66"><operator pos:start="749:65" pos:end="749:65">&amp;</operator><name pos:start="749:66" pos:end="749:66">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="753:1" pos:end="753:6">#<cpp:directive pos:start="753:2" pos:end="753:6">endif</cpp:directive></cpp:endif> <comment type="line" pos:start="753:8" pos:end="753:24">//HAVE_MMX_INLINE</comment>

                <if_stmt pos:start="755:17" pos:end="761:17"><if pos:start="755:17" pos:end="761:17">if<condition pos:start="755:19" pos:end="755:33">(<expr pos:start="755:20" pos:end="755:32"><name pos:start="755:20" pos:end="755:23">mode</name> <operator pos:start="755:25" pos:end="755:25">&amp;</operator> <name pos:start="755:27" pos:end="755:32">DERING</name></expr>)</condition><block pos:start="755:34" pos:end="761:17">{<block_content pos:start="759:21" pos:end="759:78">

                <comment type="line" pos:start="757:17" pos:end="757:41">//FIXME filter first line</comment>

                    <if_stmt pos:start="759:21" pos:end="759:78"><if pos:start="759:21" pos:end="759:78">if<condition pos:start="759:23" pos:end="759:27">(<expr pos:start="759:24" pos:end="759:26"><name pos:start="759:24" pos:end="759:24">y</name><operator pos:start="759:25" pos:end="759:25">&gt;</operator><literal type="number" pos:start="759:26" pos:end="759:26">0</literal></expr>)</condition><block type="pseudo" pos:start="759:29" pos:end="759:78"><block_content pos:start="759:29" pos:end="759:78"> <expr_stmt pos:start="759:29" pos:end="759:78"><expr pos:start="759:29" pos:end="759:77"><call pos:start="759:29" pos:end="759:77"><call pos:start="759:29" pos:end="759:42"><name pos:start="759:29" pos:end="759:34">RENAME</name><argument_list pos:start="759:35" pos:end="759:42">(<argument pos:start="759:36" pos:end="759:41"><expr pos:start="759:36" pos:end="759:41"><name pos:start="759:36" pos:end="759:41">dering</name></expr></argument>)</argument_list></call><argument_list pos:start="759:43" pos:end="759:77">(<argument pos:start="759:44" pos:end="759:64"><expr pos:start="759:44" pos:end="759:64"><name pos:start="759:44" pos:end="759:51">dstBlock</name> <operator pos:start="759:53" pos:end="759:53">-</operator> <name pos:start="759:55" pos:end="759:60">stride</name> <operator pos:start="759:62" pos:end="759:62">-</operator> <literal type="number" pos:start="759:64" pos:end="759:64">8</literal></expr></argument>, <argument pos:start="759:67" pos:end="759:72"><expr pos:start="759:67" pos:end="759:72"><name pos:start="759:67" pos:end="759:72">stride</name></expr></argument>, <argument pos:start="759:75" pos:end="759:76"><expr pos:start="759:75" pos:end="759:76"><operator pos:start="759:75" pos:end="759:75">&amp;</operator><name pos:start="759:76" pos:end="759:76">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="765:17" pos:end="777:17"><if pos:start="765:17" pos:end="777:17">if<condition pos:start="765:19" pos:end="765:44">(<expr pos:start="765:20" pos:end="765:43"><name pos:start="765:20" pos:end="765:23">mode</name> <operator pos:start="765:25" pos:end="765:25">&amp;</operator> <name pos:start="765:27" pos:end="765:43">TEMP_NOISE_FILTER</name></expr>)</condition>

                <block pos:start="767:17" pos:end="777:17">{<block_content pos:start="769:21" pos:end="775:50">

                    <expr_stmt pos:start="769:21" pos:end="775:50"><expr pos:start="769:21" pos:end="775:49"><call pos:start="769:21" pos:end="775:49"><call pos:start="769:21" pos:end="769:44"><name pos:start="769:21" pos:end="769:26">RENAME</name><argument_list pos:start="769:27" pos:end="769:44">(<argument pos:start="769:28" pos:end="769:43"><expr pos:start="769:28" pos:end="769:43"><name pos:start="769:28" pos:end="769:43">tempNoiseReducer</name></expr></argument>)</argument_list></call><argument_list pos:start="769:45" pos:end="775:49">(<argument pos:start="769:46" pos:end="769:55"><expr pos:start="769:46" pos:end="769:55"><name pos:start="769:46" pos:end="769:53">dstBlock</name><operator pos:start="769:54" pos:end="769:54">-</operator><literal type="number" pos:start="769:55" pos:end="769:55">8</literal></expr></argument>, <argument pos:start="769:58" pos:end="769:63"><expr pos:start="769:58" pos:end="769:63"><name pos:start="769:58" pos:end="769:63">stride</name></expr></argument>,

                            <argument pos:start="771:29" pos:end="771:68"><expr pos:start="771:29" pos:end="771:68"><name pos:start="771:29" pos:end="771:50"><name pos:start="771:29" pos:end="771:29">c</name><operator pos:start="771:30" pos:end="771:30">.</operator><name pos:start="771:31" pos:end="771:41">tempBlurred</name><index pos:start="771:42" pos:end="771:50">[<expr pos:start="771:43" pos:end="771:49"><name pos:start="771:43" pos:end="771:49">isColor</name></expr>]</index></name> <operator pos:start="771:52" pos:end="771:52">+</operator> <name pos:start="771:54" pos:end="771:54">y</name><operator pos:start="771:55" pos:end="771:55">*</operator><name pos:start="771:56" pos:end="771:64">dstStride</name> <operator pos:start="771:66" pos:end="771:66">+</operator> <name pos:start="771:68" pos:end="771:68">x</name></expr></argument>,

                            <argument pos:start="773:29" pos:end="773:82"><expr pos:start="773:29" pos:end="773:82"><name pos:start="773:29" pos:end="773:54"><name pos:start="773:29" pos:end="773:29">c</name><operator pos:start="773:30" pos:end="773:30">.</operator><name pos:start="773:31" pos:end="773:45">tempBlurredPast</name><index pos:start="773:46" pos:end="773:54">[<expr pos:start="773:47" pos:end="773:53"><name pos:start="773:47" pos:end="773:53">isColor</name></expr>]</index></name> <operator pos:start="773:56" pos:end="773:56">+</operator> <operator pos:start="773:58" pos:end="773:58">(</operator><name pos:start="773:59" pos:end="773:59">y</name><operator pos:start="773:60" pos:end="773:61">&gt;&gt;</operator><literal type="number" pos:start="773:62" pos:end="773:62">3</literal><operator pos:start="773:63" pos:end="773:63">)</operator><operator pos:start="773:64" pos:end="773:64">*</operator><literal type="number" pos:start="773:65" pos:end="773:69">256</literal> <operator pos:start="773:69" pos:end="773:69">+</operator> <operator pos:start="773:71" pos:end="773:71">(</operator><name pos:start="773:72" pos:end="773:72">x</name><operator pos:start="773:73" pos:end="773:74">&gt;&gt;</operator><literal type="number" pos:start="773:75" pos:end="773:75">3</literal><operator pos:start="773:76" pos:end="773:76">)</operator> <operator pos:start="773:78" pos:end="773:78">+</operator> <literal type="number" pos:start="773:80" pos:end="773:82">256</literal></expr></argument>,

                            <argument pos:start="775:29" pos:end="775:48"><expr pos:start="775:29" pos:end="775:48"><name pos:start="775:29" pos:end="775:48"><name pos:start="775:29" pos:end="775:29">c</name><operator pos:start="775:30" pos:end="775:30">.</operator><name pos:start="775:31" pos:end="775:36">ppMode</name><operator pos:start="775:37" pos:end="775:37">.</operator><name pos:start="775:38" pos:end="775:48">maxTmpNoise</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="783:13" pos:end="783:24"><expr pos:start="783:13" pos:end="783:23"><name pos:start="783:13" pos:end="783:20">dstBlock</name><operator pos:start="783:21" pos:end="783:22">+=</operator><literal type="number" pos:start="783:23" pos:end="783:23">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="785:13" pos:end="790:0"><expr pos:start="785:13" pos:end="785:23"><name pos:start="785:13" pos:end="785:20">srcBlock</name><operator pos:start="785:21" pos:end="785:22">+=</operator><literal type="number" pos:start="785:23" pos:end="785:23">8</literal></expr>;</expr_stmt>



<cpp:if pos:start="789:1" pos:end="789:19">#<cpp:directive pos:start="789:2" pos:end="789:3">if</cpp:directive> <expr pos:start="789:5" pos:end="789:19"><name pos:start="789:5" pos:end="789:19">HAVE_MMX_INLINE</name></expr></cpp:if>

            <expr_stmt pos:start="791:13" pos:end="791:32"><expr pos:start="791:13" pos:end="791:31"><name pos:start="791:13" pos:end="791:19">tmpXchg</name><operator pos:start="791:20" pos:end="791:20">=</operator> <name pos:start="791:22" pos:end="791:31">tempBlock1</name></expr>;</expr_stmt>

            <expr_stmt pos:start="793:13" pos:end="793:35"><expr pos:start="793:13" pos:end="793:34"><name pos:start="793:13" pos:end="793:22">tempBlock1</name><operator pos:start="793:23" pos:end="793:23">=</operator> <name pos:start="793:25" pos:end="793:34">tempBlock2</name></expr>;</expr_stmt>

            <expr_stmt pos:start="795:13" pos:end="798:0"><expr pos:start="795:13" pos:end="795:32"><name pos:start="795:13" pos:end="795:22">tempBlock2</name> <operator pos:start="795:24" pos:end="795:24">=</operator> <name pos:start="795:26" pos:end="795:32">tmpXchg</name></expr>;</expr_stmt>

<cpp:endif pos:start="797:1" pos:end="797:6">#<cpp:directive pos:start="797:2" pos:end="797:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></for>



        <if_stmt pos:start="803:9" pos:end="807:9"><if pos:start="803:9" pos:end="807:9">if<condition pos:start="803:11" pos:end="803:25">(<expr pos:start="803:12" pos:end="803:24"><name pos:start="803:12" pos:end="803:15">mode</name> <operator pos:start="803:17" pos:end="803:17">&amp;</operator> <name pos:start="803:19" pos:end="803:24">DERING</name></expr>)</condition><block pos:start="803:26" pos:end="807:9">{<block_content pos:start="805:13" pos:end="805:78">

            <if_stmt pos:start="805:13" pos:end="805:78"><if pos:start="805:13" pos:end="805:78">if<condition pos:start="805:15" pos:end="805:21">(<expr pos:start="805:16" pos:end="805:20"><name pos:start="805:16" pos:end="805:16">y</name> <operator pos:start="805:18" pos:end="805:18">&gt;</operator> <literal type="number" pos:start="805:20" pos:end="805:20">0</literal></expr>)</condition><block type="pseudo" pos:start="805:23" pos:end="805:78"><block_content pos:start="805:23" pos:end="805:78"> <expr_stmt pos:start="805:23" pos:end="805:78"><expr pos:start="805:23" pos:end="805:77"><call pos:start="805:23" pos:end="805:77"><call pos:start="805:23" pos:end="805:36"><name pos:start="805:23" pos:end="805:28">RENAME</name><argument_list pos:start="805:29" pos:end="805:36">(<argument pos:start="805:30" pos:end="805:35"><expr pos:start="805:30" pos:end="805:35"><name pos:start="805:30" pos:end="805:35">dering</name></expr></argument>)</argument_list></call><argument_list pos:start="805:37" pos:end="805:77">(<argument pos:start="805:38" pos:end="805:61"><expr pos:start="805:38" pos:end="805:61"><name pos:start="805:38" pos:end="805:45">dstBlock</name> <operator pos:start="805:47" pos:end="805:47">-</operator> <name pos:start="805:49" pos:end="805:57">dstStride</name> <operator pos:start="805:59" pos:end="805:59">-</operator> <literal type="number" pos:start="805:61" pos:end="805:61">8</literal></expr></argument>, <argument pos:start="805:64" pos:end="805:72"><expr pos:start="805:64" pos:end="805:72"><name pos:start="805:64" pos:end="805:72">dstStride</name></expr></argument>, <argument pos:start="805:75" pos:end="805:76"><expr pos:start="805:75" pos:end="805:76"><operator pos:start="805:75" pos:end="805:75">&amp;</operator><name pos:start="805:76" pos:end="805:76">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="811:9" pos:end="821:9"><if pos:start="811:9" pos:end="821:9">if<condition pos:start="811:11" pos:end="811:38">(<expr pos:start="811:12" pos:end="811:37"><operator pos:start="811:12" pos:end="811:12">(</operator><name pos:start="811:13" pos:end="811:16">mode</name> <operator pos:start="811:18" pos:end="811:18">&amp;</operator> <name pos:start="811:20" pos:end="811:36">TEMP_NOISE_FILTER</name><operator pos:start="811:37" pos:end="811:37">)</operator></expr>)</condition><block pos:start="811:39" pos:end="821:9">{<block_content pos:start="813:13" pos:end="819:42">

            <expr_stmt pos:start="813:13" pos:end="819:42"><expr pos:start="813:13" pos:end="819:41"><call pos:start="813:13" pos:end="819:41"><call pos:start="813:13" pos:end="813:36"><name pos:start="813:13" pos:end="813:18">RENAME</name><argument_list pos:start="813:19" pos:end="813:36">(<argument pos:start="813:20" pos:end="813:35"><expr pos:start="813:20" pos:end="813:35"><name pos:start="813:20" pos:end="813:35">tempNoiseReducer</name></expr></argument>)</argument_list></call><argument_list pos:start="813:37" pos:end="819:41">(<argument pos:start="813:38" pos:end="813:47"><expr pos:start="813:38" pos:end="813:47"><name pos:start="813:38" pos:end="813:45">dstBlock</name><operator pos:start="813:46" pos:end="813:46">-</operator><literal type="number" pos:start="813:47" pos:end="813:47">8</literal></expr></argument>, <argument pos:start="813:50" pos:end="813:58"><expr pos:start="813:50" pos:end="813:58"><name pos:start="813:50" pos:end="813:58">dstStride</name></expr></argument>,

                    <argument pos:start="815:21" pos:end="815:60"><expr pos:start="815:21" pos:end="815:60"><name pos:start="815:21" pos:end="815:42"><name pos:start="815:21" pos:end="815:21">c</name><operator pos:start="815:22" pos:end="815:22">.</operator><name pos:start="815:23" pos:end="815:33">tempBlurred</name><index pos:start="815:34" pos:end="815:42">[<expr pos:start="815:35" pos:end="815:41"><name pos:start="815:35" pos:end="815:41">isColor</name></expr>]</index></name> <operator pos:start="815:44" pos:end="815:44">+</operator> <name pos:start="815:46" pos:end="815:46">y</name><operator pos:start="815:47" pos:end="815:47">*</operator><name pos:start="815:48" pos:end="815:56">dstStride</name> <operator pos:start="815:58" pos:end="815:58">+</operator> <name pos:start="815:60" pos:end="815:60">x</name></expr></argument>,

                    <argument pos:start="817:21" pos:end="817:74"><expr pos:start="817:21" pos:end="817:74"><name pos:start="817:21" pos:end="817:46"><name pos:start="817:21" pos:end="817:21">c</name><operator pos:start="817:22" pos:end="817:22">.</operator><name pos:start="817:23" pos:end="817:37">tempBlurredPast</name><index pos:start="817:38" pos:end="817:46">[<expr pos:start="817:39" pos:end="817:45"><name pos:start="817:39" pos:end="817:45">isColor</name></expr>]</index></name> <operator pos:start="817:48" pos:end="817:48">+</operator> <operator pos:start="817:50" pos:end="817:50">(</operator><name pos:start="817:51" pos:end="817:51">y</name><operator pos:start="817:52" pos:end="817:53">&gt;&gt;</operator><literal type="number" pos:start="817:54" pos:end="817:54">3</literal><operator pos:start="817:55" pos:end="817:55">)</operator><operator pos:start="817:56" pos:end="817:56">*</operator><literal type="number" pos:start="817:57" pos:end="817:61">256</literal> <operator pos:start="817:61" pos:end="817:61">+</operator> <operator pos:start="817:63" pos:end="817:63">(</operator><name pos:start="817:64" pos:end="817:64">x</name><operator pos:start="817:65" pos:end="817:66">&gt;&gt;</operator><literal type="number" pos:start="817:67" pos:end="817:67">3</literal><operator pos:start="817:68" pos:end="817:68">)</operator> <operator pos:start="817:70" pos:end="817:70">+</operator> <literal type="number" pos:start="817:72" pos:end="817:74">256</literal></expr></argument>,

                    <argument pos:start="819:21" pos:end="819:40"><expr pos:start="819:21" pos:end="819:40"><name pos:start="819:21" pos:end="819:40"><name pos:start="819:21" pos:end="819:21">c</name><operator pos:start="819:22" pos:end="819:22">.</operator><name pos:start="819:23" pos:end="819:28">ppMode</name><operator pos:start="819:29" pos:end="819:29">.</operator><name pos:start="819:30" pos:end="819:40">maxTmpNoise</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="825:9" pos:end="825:55">/* did we use a tmp buffer for the last lines*/</comment>

        <if_stmt pos:start="827:9" pos:end="847:9"><if pos:start="827:9" pos:end="847:9">if<condition pos:start="827:11" pos:end="827:26">(<expr pos:start="827:12" pos:end="827:25"><name pos:start="827:12" pos:end="827:12">y</name><operator pos:start="827:13" pos:end="827:13">+</operator><literal type="number" pos:start="827:14" pos:end="827:15">15</literal> <operator pos:start="827:17" pos:end="827:18">&gt;=</operator> <name pos:start="827:20" pos:end="827:25">height</name></expr>)</condition><block pos:start="827:27" pos:end="847:9">{<block_content pos:start="829:13" pos:end="845:13">

            <decl_stmt pos:start="829:13" pos:end="829:51"><decl pos:start="829:13" pos:end="829:50"><type pos:start="829:13" pos:end="829:21"><name pos:start="829:13" pos:end="829:19">uint8_t</name> <modifier pos:start="829:21" pos:end="829:21">*</modifier></type><name pos:start="829:22" pos:end="829:29">dstBlock</name><init pos:start="829:30" pos:end="829:50">= <expr pos:start="829:32" pos:end="829:50"><operator pos:start="829:32" pos:end="829:32">&amp;</operator><operator pos:start="829:33" pos:end="829:33">(</operator><name pos:start="829:34" pos:end="829:49"><name pos:start="829:34" pos:end="829:36">dst</name><index pos:start="829:37" pos:end="829:49">[<expr pos:start="829:38" pos:end="829:48"><name pos:start="829:38" pos:end="829:38">y</name><operator pos:start="829:39" pos:end="829:39">*</operator><name pos:start="829:40" pos:end="829:48">dstStride</name></expr>]</index></name><operator pos:start="829:50" pos:end="829:50">)</operator></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="831:13" pos:end="845:13"><if pos:start="831:13" pos:end="833:76">if<condition pos:start="831:15" pos:end="831:39">(<expr pos:start="831:16" pos:end="831:38"><name pos:start="831:16" pos:end="831:20">width</name><operator pos:start="831:21" pos:end="831:22">==</operator><call pos:start="831:23" pos:end="831:38"><name pos:start="831:23" pos:end="831:27">FFABS</name><argument_list pos:start="831:28" pos:end="831:38">(<argument pos:start="831:29" pos:end="831:37"><expr pos:start="831:29" pos:end="831:37"><name pos:start="831:29" pos:end="831:37">dstStride</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="833:17" pos:end="833:76"><block_content pos:start="833:17" pos:end="833:76">

                <expr_stmt pos:start="833:17" pos:end="833:76"><expr pos:start="833:17" pos:end="833:75"><call pos:start="833:17" pos:end="833:75"><name pos:start="833:17" pos:end="833:23">linecpy</name><argument_list pos:start="833:24" pos:end="833:75">(<argument pos:start="833:25" pos:end="833:32"><expr pos:start="833:25" pos:end="833:32"><name pos:start="833:25" pos:end="833:32">dstBlock</name></expr></argument>, <argument pos:start="833:35" pos:end="833:53"><expr pos:start="833:35" pos:end="833:53"><name pos:start="833:35" pos:end="833:41">tempDst</name> <operator pos:start="833:43" pos:end="833:43">+</operator> <name pos:start="833:45" pos:end="833:53">dstStride</name></expr></argument>, <argument pos:start="833:56" pos:end="833:63"><expr pos:start="833:56" pos:end="833:63"><name pos:start="833:56" pos:end="833:61">height</name><operator pos:start="833:62" pos:end="833:62">-</operator><name pos:start="833:63" pos:end="833:63">y</name></expr></argument>, <argument pos:start="833:66" pos:end="833:74"><expr pos:start="833:66" pos:end="833:74"><name pos:start="833:66" pos:end="833:74">dstStride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="835:13" pos:end="845:13">else<block pos:start="835:17" pos:end="845:13">{<block_content pos:start="837:17" pos:end="843:17">

                <decl_stmt pos:start="837:17" pos:end="837:22"><decl pos:start="837:17" pos:end="837:21"><type pos:start="837:17" pos:end="837:19"><name pos:start="837:17" pos:end="837:19">int</name></type> <name pos:start="837:21" pos:end="837:21">i</name></decl>;</decl_stmt>

                <for pos:start="839:17" pos:end="843:17">for<control pos:start="839:20" pos:end="839:41">(<init pos:start="839:21" pos:end="839:24"><expr pos:start="839:21" pos:end="839:23"><name pos:start="839:21" pos:end="839:21">i</name><operator pos:start="839:22" pos:end="839:22">=</operator><literal type="number" pos:start="839:23" pos:end="839:23">0</literal></expr>;</init> <condition pos:start="839:26" pos:end="839:36"><expr pos:start="839:26" pos:end="839:35"><name pos:start="839:26" pos:end="839:26">i</name><operator pos:start="839:27" pos:end="839:27">&lt;</operator><name pos:start="839:28" pos:end="839:33">height</name><operator pos:start="839:34" pos:end="839:34">-</operator><name pos:start="839:35" pos:end="839:35">y</name></expr>;</condition> <incr pos:start="839:38" pos:end="839:40"><expr pos:start="839:38" pos:end="839:40"><name pos:start="839:38" pos:end="839:38">i</name><operator pos:start="839:39" pos:end="839:40">++</operator></expr></incr>)</control><block pos:start="839:42" pos:end="843:17">{<block_content pos:start="841:21" pos:end="841:85">

                    <expr_stmt pos:start="841:21" pos:end="841:85"><expr pos:start="841:21" pos:end="841:84"><call pos:start="841:21" pos:end="841:84"><name pos:start="841:21" pos:end="841:26">memcpy</name><argument_list pos:start="841:27" pos:end="841:84">(<argument pos:start="841:28" pos:end="841:49"><expr pos:start="841:28" pos:end="841:49"><name pos:start="841:28" pos:end="841:35">dstBlock</name> <operator pos:start="841:37" pos:end="841:37">+</operator> <name pos:start="841:39" pos:end="841:39">i</name><operator pos:start="841:40" pos:end="841:40">*</operator><name pos:start="841:41" pos:end="841:49">dstStride</name></expr></argument>, <argument pos:start="841:52" pos:end="841:76"><expr pos:start="841:52" pos:end="841:76"><name pos:start="841:52" pos:end="841:58">tempDst</name> <operator pos:start="841:60" pos:end="841:60">+</operator> <operator pos:start="841:62" pos:end="841:62">(</operator><name pos:start="841:63" pos:end="841:63">i</name><operator pos:start="841:64" pos:end="841:64">+</operator><literal type="number" pos:start="841:65" pos:end="841:65">1</literal><operator pos:start="841:66" pos:end="841:66">)</operator><operator pos:start="841:67" pos:end="841:67">*</operator><name pos:start="841:68" pos:end="841:76">dstStride</name></expr></argument>, <argument pos:start="841:79" pos:end="841:83"><expr pos:start="841:79" pos:end="841:83"><name pos:start="841:79" pos:end="841:83">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

<comment type="block" pos:start="849:1" pos:end="865:11">/*

        for(x=0; x&lt;width; x+=32){

            volatile int i;

            i+=   dstBlock[x + 7*dstStride] + dstBlock[x + 8*dstStride]

                + dstBlock[x + 9*dstStride] + dstBlock[x +10*dstStride]

                + dstBlock[x +11*dstStride] + dstBlock[x +12*dstStride];

                + dstBlock[x +13*dstStride]

                + dstBlock[x +14*dstStride] + dstBlock[x +15*dstStride];

        }*/</comment>

    </block_content>}</block></for>

<cpp:if pos:start="869:1" pos:end="869:26">#<cpp:directive pos:start="869:2" pos:end="869:3">if</cpp:directive>   <expr pos:start="869:7" pos:end="869:26"><name pos:start="869:7" pos:end="869:26">HAVE_AMD3DNOW_INLINE</name></expr></cpp:if>

    <asm pos:start="871:5" pos:end="874:0">__asm__ <specifier pos:start="871:13" pos:end="871:20">volatile</specifier>("femms");</asm>

<cpp:elif pos:start="873:1" pos:end="873:21">#<cpp:directive pos:start="873:2" pos:end="873:5">elif</cpp:directive> <expr pos:start="873:7" pos:end="873:21"><name pos:start="873:7" pos:end="873:21">HAVE_MMX_INLINE</name></expr></cpp:elif>

    <asm pos:start="875:5" pos:end="882:0">__asm__ <specifier pos:start="875:13" pos:end="875:20">volatile</specifier>("emms");</asm>

<cpp:endif pos:start="877:1" pos:end="877:6">#<cpp:directive pos:start="877:2" pos:end="877:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="881:1" pos:end="881:23">#<cpp:directive pos:start="881:2" pos:end="881:6">ifdef</cpp:directive> <name pos:start="881:8" pos:end="881:23">DEBUG_BRIGHTNESS</name></cpp:ifdef>

    <if_stmt pos:start="883:5" pos:end="924:0"><if pos:start="883:5" pos:end="924:0">if<condition pos:start="883:7" pos:end="883:16">(<expr pos:start="883:8" pos:end="883:15"><operator pos:start="883:8" pos:end="883:8">!</operator><name pos:start="883:9" pos:end="883:15">isColor</name></expr>)</condition><block pos:start="883:17" pos:end="924:0">{<block_content pos:start="885:9" pos:end="919:9">

        <decl_stmt pos:start="885:9" pos:end="885:18"><decl pos:start="885:9" pos:end="885:17"><type pos:start="885:9" pos:end="885:11"><name pos:start="885:9" pos:end="885:11">int</name></type> <name pos:start="885:13" pos:end="885:15">max</name><init pos:start="885:16" pos:end="885:17">=<expr pos:start="885:17" pos:end="885:17"><literal type="number" pos:start="885:17" pos:end="885:17">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="887:9" pos:end="887:14"><decl pos:start="887:9" pos:end="887:13"><type pos:start="887:9" pos:end="887:11"><name pos:start="887:9" pos:end="887:11">int</name></type> <name pos:start="887:13" pos:end="887:13">i</name></decl>;</decl_stmt>

        <for pos:start="889:9" pos:end="891:54">for<control pos:start="889:12" pos:end="889:28">(<init pos:start="889:13" pos:end="889:16"><expr pos:start="889:13" pos:end="889:15"><name pos:start="889:13" pos:end="889:13">i</name><operator pos:start="889:14" pos:end="889:14">=</operator><literal type="number" pos:start="889:15" pos:end="889:15">0</literal></expr>;</init> <condition pos:start="889:18" pos:end="889:23"><expr pos:start="889:18" pos:end="889:22"><name pos:start="889:18" pos:end="889:18">i</name><operator pos:start="889:19" pos:end="889:19">&lt;</operator><literal type="number" pos:start="889:20" pos:end="889:22">256</literal></expr>;</condition> <incr pos:start="889:25" pos:end="889:27"><expr pos:start="889:25" pos:end="889:27"><name pos:start="889:25" pos:end="889:25">i</name><operator pos:start="889:26" pos:end="889:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="891:13" pos:end="891:54"><block_content pos:start="891:13" pos:end="891:54">

            <if_stmt pos:start="891:13" pos:end="891:54"><if pos:start="891:13" pos:end="891:54">if<condition pos:start="891:15" pos:end="891:35">(<expr pos:start="891:16" pos:end="891:34"><name pos:start="891:16" pos:end="891:28"><name pos:start="891:16" pos:end="891:25">yHistogram</name><index pos:start="891:26" pos:end="891:28">[<expr pos:start="891:27" pos:end="891:27"><name pos:start="891:27" pos:end="891:27">i</name></expr>]</index></name> <operator pos:start="891:30" pos:end="891:30">&gt;</operator> <name pos:start="891:32" pos:end="891:34">max</name></expr>)</condition><block type="pseudo" pos:start="891:37" pos:end="891:54"><block_content pos:start="891:37" pos:end="891:54"> <expr_stmt pos:start="891:37" pos:end="891:54"><expr pos:start="891:37" pos:end="891:53"><name pos:start="891:37" pos:end="891:39">max</name><operator pos:start="891:40" pos:end="891:40">=</operator><name pos:start="891:41" pos:end="891:53"><name pos:start="891:41" pos:end="891:50">yHistogram</name><index pos:start="891:51" pos:end="891:53">[<expr pos:start="891:52" pos:end="891:52"><name pos:start="891:52" pos:end="891:52">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>



        <for pos:start="895:9" pos:end="909:9">for<control pos:start="895:12" pos:end="895:28">(<init pos:start="895:13" pos:end="895:16"><expr pos:start="895:13" pos:end="895:15"><name pos:start="895:13" pos:end="895:13">i</name><operator pos:start="895:14" pos:end="895:14">=</operator><literal type="number" pos:start="895:15" pos:end="895:15">1</literal></expr>;</init> <condition pos:start="895:18" pos:end="895:23"><expr pos:start="895:18" pos:end="895:22"><name pos:start="895:18" pos:end="895:18">i</name><operator pos:start="895:19" pos:end="895:19">&lt;</operator><literal type="number" pos:start="895:20" pos:end="895:22">256</literal></expr>;</condition> <incr pos:start="895:25" pos:end="895:27"><expr pos:start="895:25" pos:end="895:27"><name pos:start="895:25" pos:end="895:25">i</name><operator pos:start="895:26" pos:end="895:27">++</operator></expr></incr>)</control><block pos:start="895:29" pos:end="909:9">{<block_content pos:start="897:13" pos:end="907:43">

            <decl_stmt pos:start="897:13" pos:end="897:18"><decl pos:start="897:13" pos:end="897:17"><type pos:start="897:13" pos:end="897:15"><name pos:start="897:13" pos:end="897:15">int</name></type> <name pos:start="897:17" pos:end="897:17">x</name></decl>;</decl_stmt>

            <decl_stmt pos:start="899:13" pos:end="899:50"><decl pos:start="899:13" pos:end="899:49"><type pos:start="899:13" pos:end="899:15"><name pos:start="899:13" pos:end="899:15">int</name></type> <name pos:start="899:17" pos:end="899:21">start</name><init pos:start="899:22" pos:end="899:49">=<expr pos:start="899:23" pos:end="899:49"><name pos:start="899:23" pos:end="899:37"><name pos:start="899:23" pos:end="899:32">yHistogram</name><index pos:start="899:33" pos:end="899:37">[<expr pos:start="899:34" pos:end="899:36"><name pos:start="899:34" pos:end="899:34">i</name><operator pos:start="899:35" pos:end="899:35">-</operator><literal type="number" pos:start="899:36" pos:end="899:36">1</literal></expr>]</index></name><operator pos:start="899:38" pos:end="899:38">/</operator><operator pos:start="899:39" pos:end="899:39">(</operator><name pos:start="899:40" pos:end="899:42">max</name><operator pos:start="899:43" pos:end="899:43">/</operator><literal type="number" pos:start="899:44" pos:end="899:47">256</literal><operator pos:start="899:47" pos:end="899:47">+</operator><literal type="number" pos:start="899:48" pos:end="899:48">1</literal><operator pos:start="899:49" pos:end="899:49">)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="901:13" pos:end="901:46"><decl pos:start="901:13" pos:end="901:45"><type pos:start="901:13" pos:end="901:15"><name pos:start="901:13" pos:end="901:15">int</name></type> <name pos:start="901:17" pos:end="901:19">end</name><init pos:start="901:20" pos:end="901:45">=<expr pos:start="901:21" pos:end="901:45"><name pos:start="901:21" pos:end="901:33"><name pos:start="901:21" pos:end="901:30">yHistogram</name><index pos:start="901:31" pos:end="901:33">[<expr pos:start="901:32" pos:end="901:32"><name pos:start="901:32" pos:end="901:32">i</name></expr>]</index></name><operator pos:start="901:34" pos:end="901:34">/</operator><operator pos:start="901:35" pos:end="901:35">(</operator><name pos:start="901:36" pos:end="901:38">max</name><operator pos:start="901:39" pos:end="901:39">/</operator><literal type="number" pos:start="901:40" pos:end="901:43">256</literal><operator pos:start="901:43" pos:end="901:43">+</operator><literal type="number" pos:start="901:44" pos:end="901:44">1</literal><operator pos:start="901:45" pos:end="901:45">)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="903:13" pos:end="903:42"><decl pos:start="903:13" pos:end="903:41"><type pos:start="903:13" pos:end="903:15"><name pos:start="903:13" pos:end="903:15">int</name></type> <name pos:start="903:17" pos:end="903:19">inc</name><init pos:start="903:20" pos:end="903:41">= <expr pos:start="903:22" pos:end="903:41"><ternary pos:start="903:22" pos:end="903:41"><condition pos:start="903:22" pos:end="903:34"><expr pos:start="903:22" pos:end="903:32"><name pos:start="903:22" pos:end="903:24">end</name> <operator pos:start="903:26" pos:end="903:26">&gt;</operator> <name pos:start="903:28" pos:end="903:32">start</name></expr> ?</condition><then pos:start="903:36" pos:end="903:36"> <expr pos:start="903:36" pos:end="903:36"><literal type="number" pos:start="903:36" pos:end="903:36">1</literal></expr> </then><else pos:start="903:38" pos:end="903:41">: <expr pos:start="903:40" pos:end="903:41"><operator pos:start="903:40" pos:end="903:40">-</operator><literal type="number" pos:start="903:41" pos:end="903:41">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <for pos:start="905:13" pos:end="907:43">for<control pos:start="905:16" pos:end="905:44">(<init pos:start="905:17" pos:end="905:24"><expr pos:start="905:17" pos:end="905:23"><name pos:start="905:17" pos:end="905:17">x</name><operator pos:start="905:18" pos:end="905:18">=</operator><name pos:start="905:19" pos:end="905:23">start</name></expr>;</init> <condition pos:start="905:26" pos:end="905:36"><expr pos:start="905:26" pos:end="905:35"><name pos:start="905:26" pos:end="905:26">x</name><operator pos:start="905:27" pos:end="905:28">!=</operator><name pos:start="905:29" pos:end="905:31">end</name><operator pos:start="905:32" pos:end="905:32">+</operator><name pos:start="905:33" pos:end="905:35">inc</name></expr>;</condition> <incr pos:start="905:38" pos:end="905:43"><expr pos:start="905:38" pos:end="905:43"><name pos:start="905:38" pos:end="905:38">x</name><operator pos:start="905:39" pos:end="905:40">+=</operator><name pos:start="905:41" pos:end="905:43">inc</name></expr></incr>)</control><block type="pseudo" pos:start="907:17" pos:end="907:43"><block_content pos:start="907:17" pos:end="907:43">

                <expr_stmt pos:start="907:17" pos:end="907:43"><expr pos:start="907:17" pos:end="907:42"><name pos:start="907:17" pos:end="907:37"><name pos:start="907:17" pos:end="907:19">dst</name><index pos:start="907:20" pos:end="907:37">[ <expr pos:start="907:22" pos:end="907:36"><name pos:start="907:22" pos:end="907:22">i</name><operator pos:start="907:23" pos:end="907:23">*</operator><name pos:start="907:24" pos:end="907:32">dstStride</name> <operator pos:start="907:34" pos:end="907:34">+</operator> <name pos:start="907:36" pos:end="907:36">x</name></expr>]</index></name><operator pos:start="907:38" pos:end="907:39">+=</operator><literal type="number" pos:start="907:40" pos:end="907:42">128</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>



        <for pos:start="913:9" pos:end="919:9">for<control pos:start="913:12" pos:end="913:29">(<init pos:start="913:13" pos:end="913:16"><expr pos:start="913:13" pos:end="913:15"><name pos:start="913:13" pos:end="913:13">i</name><operator pos:start="913:14" pos:end="913:14">=</operator><literal type="number" pos:start="913:15" pos:end="913:15">0</literal></expr>;</init> <condition pos:start="913:18" pos:end="913:23"><expr pos:start="913:18" pos:end="913:22"><name pos:start="913:18" pos:end="913:18">i</name><operator pos:start="913:19" pos:end="913:19">&lt;</operator><literal type="number" pos:start="913:20" pos:end="913:22">100</literal></expr>;</condition> <incr pos:start="913:25" pos:end="913:28"><expr pos:start="913:25" pos:end="913:28"><name pos:start="913:25" pos:end="913:25">i</name><operator pos:start="913:26" pos:end="913:27">+=</operator><literal type="number" pos:start="913:28" pos:end="913:28">2</literal></expr></incr>)</control><block pos:start="913:30" pos:end="919:9">{<block_content pos:start="915:13" pos:end="917:45">

            <expr_stmt pos:start="915:13" pos:end="915:45"><expr pos:start="915:13" pos:end="915:44"><name pos:start="915:13" pos:end="915:39"><name pos:start="915:13" pos:end="915:15">dst</name><index pos:start="915:16" pos:end="915:39">[ <expr pos:start="915:18" pos:end="915:38"><operator pos:start="915:18" pos:end="915:18">(</operator><name pos:start="915:19" pos:end="915:23">white</name><operator pos:start="915:24" pos:end="915:24">)</operator><operator pos:start="915:25" pos:end="915:25">*</operator><name pos:start="915:26" pos:end="915:34">dstStride</name> <operator pos:start="915:36" pos:end="915:36">+</operator> <name pos:start="915:38" pos:end="915:38">i</name></expr>]</index></name><operator pos:start="915:40" pos:end="915:41">+=</operator><literal type="number" pos:start="915:42" pos:end="915:44">128</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="917:13" pos:end="917:45"><expr pos:start="917:13" pos:end="917:44"><name pos:start="917:13" pos:end="917:39"><name pos:start="917:13" pos:end="917:15">dst</name><index pos:start="917:16" pos:end="917:39">[ <expr pos:start="917:18" pos:end="917:38"><operator pos:start="917:18" pos:end="917:18">(</operator><name pos:start="917:19" pos:end="917:23">black</name><operator pos:start="917:24" pos:end="917:24">)</operator><operator pos:start="917:25" pos:end="917:25">*</operator><name pos:start="917:26" pos:end="917:34">dstStride</name> <operator pos:start="917:36" pos:end="917:36">+</operator> <name pos:start="917:38" pos:end="917:38">i</name></expr>]</index></name><operator pos:start="917:40" pos:end="917:41">+=</operator><literal type="number" pos:start="917:42" pos:end="917:44">128</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="923:1" pos:end="923:6">#<cpp:directive pos:start="923:2" pos:end="923:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="927:5" pos:end="927:11"><expr pos:start="927:5" pos:end="927:10"><operator pos:start="927:5" pos:end="927:5">*</operator><name pos:start="927:6" pos:end="927:7">c2</name><operator pos:start="927:8" pos:end="927:8">=</operator> <name pos:start="927:10" pos:end="927:10">c</name></expr>;</expr_stmt> <comment type="line" pos:start="927:13" pos:end="927:37">//copy local context back</comment>



</block_content>}</block></function>
</unit>
