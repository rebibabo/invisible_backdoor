<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16116.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:32">spapr_h_cas_compose_response</name><parameter_list pos:start="1:33" pos:end="5:49">(<parameter pos:start="1:34" pos:end="1:57"><decl pos:start="1:34" pos:end="1:57"><type pos:start="1:34" pos:end="1:57"><name pos:start="1:34" pos:end="1:50">sPAPRMachineState</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">spapr</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:50"><decl pos:start="3:34" pos:end="3:50"><type pos:start="3:34" pos:end="3:50"><name pos:start="3:34" pos:end="3:45">target_ulong</name></type> <name pos:start="3:47" pos:end="3:50">addr</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:69"><decl pos:start="3:53" pos:end="3:69"><type pos:start="3:53" pos:end="3:69"><name pos:start="3:53" pos:end="3:64">target_ulong</name></type> <name pos:start="3:66" pos:end="3:69">size</name></decl></parameter>,

                                 <parameter pos:start="5:34" pos:end="5:48"><decl pos:start="5:34" pos:end="5:48"><type pos:start="5:34" pos:end="5:48"><name pos:start="5:34" pos:end="5:37">bool</name></type> <name pos:start="5:39" pos:end="5:48">cpu_update</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="91:1">{<block_content pos:start="9:5" pos:end="89:13">

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">void</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:13">fdt</name></decl>, <decl pos:start="9:16" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:10"><modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:24">fdt_skel</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:58"><decl pos:start="11:5" pos:end="11:57"><type pos:start="11:5" pos:end="11:31"><name pos:start="11:5" pos:end="11:31">sPAPRDeviceTreeUpdateHeader</name></type> <name pos:start="11:33" pos:end="11:35">hdr</name> <init pos:start="11:37" pos:end="11:57">= <expr pos:start="11:39" pos:end="11:57"><block pos:start="11:39" pos:end="11:57">{ <expr pos:start="11:41" pos:end="11:55"><operator pos:start="11:41" pos:end="11:41">.</operator><name pos:start="11:42" pos:end="11:51">version_id</name> <operator pos:start="11:53" pos:end="11:53">=</operator> <literal type="number" pos:start="11:55" pos:end="11:55">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:73"><decl pos:start="13:5" pos:end="13:72"><type pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:21">sPAPRMachineClass</name> <modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:26">smc</name> <init pos:start="13:28" pos:end="13:72">= <expr pos:start="13:30" pos:end="13:72"><call pos:start="13:30" pos:end="13:72"><name pos:start="13:30" pos:end="13:52">SPAPR_MACHINE_GET_CLASS</name><argument_list pos:start="13:53" pos:end="13:72">(<argument pos:start="13:54" pos:end="13:71"><expr pos:start="13:54" pos:end="13:71"><call pos:start="13:54" pos:end="13:71"><name pos:start="13:54" pos:end="13:69">qdev_get_machine</name><argument_list pos:start="13:70" pos:end="13:71">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:24"><expr pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:8">size</name> <operator pos:start="17:10" pos:end="17:11">-=</operator> <sizeof pos:start="17:13" pos:end="17:23">sizeof<argument_list pos:start="17:19" pos:end="17:23">(<argument pos:start="17:20" pos:end="17:22"><expr pos:start="17:20" pos:end="17:22"><name pos:start="17:20" pos:end="17:22">hdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:25">/* Create sceleton */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:31"><expr pos:start="23:5" pos:end="23:30"><name pos:start="23:5" pos:end="23:12">fdt_skel</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:24">g_malloc0</name><argument_list pos:start="23:25" pos:end="23:30">(<argument pos:start="23:26" pos:end="23:29"><expr pos:start="23:26" pos:end="23:29"><name pos:start="23:26" pos:end="23:29">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:39"><expr pos:start="25:5" pos:end="25:38"><call pos:start="25:5" pos:end="25:38"><name pos:start="25:5" pos:end="25:8">_FDT</name><argument_list pos:start="25:9" pos:end="25:38">(<argument pos:start="25:10" pos:end="25:37"><expr pos:start="25:10" pos:end="25:37"><operator pos:start="25:10" pos:end="25:10">(</operator><call pos:start="25:11" pos:end="25:36"><name pos:start="25:11" pos:end="25:20">fdt_create</name><argument_list pos:start="25:21" pos:end="25:36">(<argument pos:start="25:22" pos:end="25:29"><expr pos:start="25:22" pos:end="25:29"><name pos:start="25:22" pos:end="25:29">fdt_skel</name></expr></argument>, <argument pos:start="25:32" pos:end="25:35"><expr pos:start="25:32" pos:end="25:35"><name pos:start="25:32" pos:end="25:35">size</name></expr></argument>)</argument_list></call><operator pos:start="25:37" pos:end="25:37">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:41"><expr pos:start="27:5" pos:end="27:40"><call pos:start="27:5" pos:end="27:40"><name pos:start="27:5" pos:end="27:8">_FDT</name><argument_list pos:start="27:9" pos:end="27:40">(<argument pos:start="27:10" pos:end="27:39"><expr pos:start="27:10" pos:end="27:39"><operator pos:start="27:10" pos:end="27:10">(</operator><call pos:start="27:11" pos:end="27:38"><name pos:start="27:11" pos:end="27:24">fdt_begin_node</name><argument_list pos:start="27:25" pos:end="27:38">(<argument pos:start="27:26" pos:end="27:33"><expr pos:start="27:26" pos:end="27:33"><name pos:start="27:26" pos:end="27:33">fdt_skel</name></expr></argument>, <argument pos:start="27:36" pos:end="27:37"><expr pos:start="27:36" pos:end="27:37"><literal type="string" pos:start="27:36" pos:end="27:37">""</literal></expr></argument>)</argument_list></call><operator pos:start="27:39" pos:end="27:39">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:35"><expr pos:start="29:5" pos:end="29:34"><call pos:start="29:5" pos:end="29:34"><name pos:start="29:5" pos:end="29:8">_FDT</name><argument_list pos:start="29:9" pos:end="29:34">(<argument pos:start="29:10" pos:end="29:33"><expr pos:start="29:10" pos:end="29:33"><operator pos:start="29:10" pos:end="29:10">(</operator><call pos:start="29:11" pos:end="29:32"><name pos:start="29:11" pos:end="29:22">fdt_end_node</name><argument_list pos:start="29:23" pos:end="29:32">(<argument pos:start="29:24" pos:end="29:31"><expr pos:start="29:24" pos:end="29:31"><name pos:start="29:24" pos:end="29:31">fdt_skel</name></expr></argument>)</argument_list></call><operator pos:start="29:33" pos:end="29:33">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:33"><expr pos:start="31:5" pos:end="31:32"><call pos:start="31:5" pos:end="31:32"><name pos:start="31:5" pos:end="31:8">_FDT</name><argument_list pos:start="31:9" pos:end="31:32">(<argument pos:start="31:10" pos:end="31:31"><expr pos:start="31:10" pos:end="31:31"><operator pos:start="31:10" pos:end="31:10">(</operator><call pos:start="31:11" pos:end="31:30"><name pos:start="31:11" pos:end="31:20">fdt_finish</name><argument_list pos:start="31:21" pos:end="31:30">(<argument pos:start="31:22" pos:end="31:29"><expr pos:start="31:22" pos:end="31:29"><name pos:start="31:22" pos:end="31:29">fdt_skel</name></expr></argument>)</argument_list></call><operator pos:start="31:31" pos:end="31:31">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:26"><expr pos:start="33:5" pos:end="33:25"><name pos:start="33:5" pos:end="33:7">fdt</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:25"><name pos:start="33:11" pos:end="33:19">g_malloc0</name><argument_list pos:start="33:20" pos:end="33:25">(<argument pos:start="33:21" pos:end="33:24"><expr pos:start="33:21" pos:end="33:24"><name pos:start="33:21" pos:end="33:24">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:47"><expr pos:start="35:5" pos:end="35:46"><call pos:start="35:5" pos:end="35:46"><name pos:start="35:5" pos:end="35:8">_FDT</name><argument_list pos:start="35:9" pos:end="35:46">(<argument pos:start="35:10" pos:end="35:45"><expr pos:start="35:10" pos:end="35:45"><operator pos:start="35:10" pos:end="35:10">(</operator><call pos:start="35:11" pos:end="35:44"><name pos:start="35:11" pos:end="35:23">fdt_open_into</name><argument_list pos:start="35:24" pos:end="35:44">(<argument pos:start="35:25" pos:end="35:32"><expr pos:start="35:25" pos:end="35:32"><name pos:start="35:25" pos:end="35:32">fdt_skel</name></expr></argument>, <argument pos:start="35:35" pos:end="35:37"><expr pos:start="35:35" pos:end="35:37"><name pos:start="35:35" pos:end="35:37">fdt</name></expr></argument>, <argument pos:start="35:40" pos:end="35:43"><expr pos:start="35:40" pos:end="35:43"><name pos:start="35:40" pos:end="35:43">size</name></expr></argument>)</argument_list></call><operator pos:start="35:45" pos:end="35:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:21"><expr pos:start="37:5" pos:end="37:20"><call pos:start="37:5" pos:end="37:20"><name pos:start="37:5" pos:end="37:10">g_free</name><argument_list pos:start="37:11" pos:end="37:20">(<argument pos:start="37:12" pos:end="37:19"><expr pos:start="37:12" pos:end="37:19"><name pos:start="37:12" pos:end="37:19">fdt_skel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:25">/* Fixup cpu nodes */</comment>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:19">(<expr pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:18">cpu_update</name></expr>)</condition> <block pos:start="43:21" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:47">

        <expr_stmt pos:start="45:9" pos:end="45:47"><expr pos:start="45:9" pos:end="45:46"><call pos:start="45:9" pos:end="45:46"><name pos:start="45:9" pos:end="45:12">_FDT</name><argument_list pos:start="45:13" pos:end="45:46">(<argument pos:start="45:14" pos:end="45:45"><expr pos:start="45:14" pos:end="45:45"><operator pos:start="45:14" pos:end="45:14">(</operator><call pos:start="45:15" pos:end="45:44"><name pos:start="45:15" pos:end="45:32">spapr_fixup_cpu_dt</name><argument_list pos:start="45:33" pos:end="45:44">(<argument pos:start="45:34" pos:end="45:36"><expr pos:start="45:34" pos:end="45:36"><name pos:start="45:34" pos:end="45:36">fdt</name></expr></argument>, <argument pos:start="45:39" pos:end="45:43"><expr pos:start="45:39" pos:end="45:43"><name pos:start="45:39" pos:end="45:43">spapr</name></expr></argument>)</argument_list></call><operator pos:start="45:45" pos:end="45:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:70">/* Generate ibm,dynamic-reconfiguration-memory node if required */</comment>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:59">(<expr pos:start="53:9" pos:end="53:58"><call pos:start="53:9" pos:end="53:58"><name pos:start="53:9" pos:end="53:23">spapr_ovec_test</name><argument_list pos:start="53:24" pos:end="53:58">(<argument pos:start="53:25" pos:end="53:38"><expr pos:start="53:25" pos:end="53:38"><name pos:start="53:25" pos:end="53:38"><name pos:start="53:25" pos:end="53:29">spapr</name><operator pos:start="53:30" pos:end="53:31">-&gt;</operator><name pos:start="53:32" pos:end="53:38">ov5_cas</name></name></expr></argument>, <argument pos:start="53:41" pos:end="53:57"><expr pos:start="53:41" pos:end="53:57"><name pos:start="53:41" pos:end="53:57">OV5_DRCONF_MEMORY</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:61" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:57">

        <expr_stmt pos:start="55:9" pos:end="55:38"><expr pos:start="55:9" pos:end="55:37"><call pos:start="55:9" pos:end="55:37"><name pos:start="55:9" pos:end="55:16">g_assert</name><argument_list pos:start="55:17" pos:end="55:37">(<argument pos:start="55:18" pos:end="55:36"><expr pos:start="55:18" pos:end="55:36"><name pos:start="55:18" pos:end="55:36"><name pos:start="55:18" pos:end="55:20">smc</name><operator pos:start="55:21" pos:end="55:22">-&gt;</operator><name pos:start="55:23" pos:end="55:36">dr_lmb_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:57"><expr pos:start="57:9" pos:end="57:56"><call pos:start="57:9" pos:end="57:56"><name pos:start="57:9" pos:end="57:12">_FDT</name><argument_list pos:start="57:13" pos:end="57:56">(<argument pos:start="57:14" pos:end="57:55"><expr pos:start="57:14" pos:end="57:55"><operator pos:start="57:14" pos:end="57:14">(</operator><call pos:start="57:15" pos:end="57:54"><name pos:start="57:15" pos:end="57:42">spapr_populate_drconf_memory</name><argument_list pos:start="57:43" pos:end="57:54">(<argument pos:start="57:44" pos:end="57:48"><expr pos:start="57:44" pos:end="57:48"><name pos:start="57:44" pos:end="57:48">spapr</name></expr></argument>, <argument pos:start="57:51" pos:end="57:53"><expr pos:start="57:51" pos:end="57:53"><name pos:start="57:51" pos:end="57:53">fdt</name></expr></argument>)</argument_list></call><operator pos:start="57:55" pos:end="57:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:29">/* Pack resulting tree */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:26"><expr pos:start="65:5" pos:end="65:25"><call pos:start="65:5" pos:end="65:25"><name pos:start="65:5" pos:end="65:8">_FDT</name><argument_list pos:start="65:9" pos:end="65:25">(<argument pos:start="65:10" pos:end="65:24"><expr pos:start="65:10" pos:end="65:24"><operator pos:start="65:10" pos:end="65:10">(</operator><call pos:start="65:11" pos:end="65:23"><name pos:start="65:11" pos:end="65:18">fdt_pack</name><argument_list pos:start="65:19" pos:end="65:23">(<argument pos:start="65:20" pos:end="65:22"><expr pos:start="65:20" pos:end="65:22"><name pos:start="65:20" pos:end="65:22">fdt</name></expr></argument>)</argument_list></call><operator pos:start="65:24" pos:end="65:24">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:48">(<expr pos:start="69:9" pos:end="69:47"><call pos:start="69:9" pos:end="69:26"><name pos:start="69:9" pos:end="69:21">fdt_totalsize</name><argument_list pos:start="69:22" pos:end="69:26">(<argument pos:start="69:23" pos:end="69:25"><expr pos:start="69:23" pos:end="69:25"><name pos:start="69:23" pos:end="69:25">fdt</name></expr></argument>)</argument_list></call> <operator pos:start="69:28" pos:end="69:28">+</operator> <sizeof pos:start="69:30" pos:end="69:40">sizeof<argument_list pos:start="69:36" pos:end="69:40">(<argument pos:start="69:37" pos:end="69:39"><expr pos:start="69:37" pos:end="69:39"><name pos:start="69:37" pos:end="69:39">hdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="69:42" pos:end="69:42">&gt;</operator> <name pos:start="69:44" pos:end="69:47">size</name></expr>)</condition> <block pos:start="69:50" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:18">

        <expr_stmt pos:start="71:9" pos:end="71:37"><expr pos:start="71:9" pos:end="71:36"><call pos:start="71:9" pos:end="71:36"><name pos:start="71:9" pos:end="71:30">trace_spapr_cas_failed</name><argument_list pos:start="71:31" pos:end="71:36">(<argument pos:start="71:32" pos:end="71:35"><expr pos:start="71:32" pos:end="71:35"><name pos:start="71:32" pos:end="71:35">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:18">return <expr pos:start="73:16" pos:end="73:17"><operator pos:start="73:16" pos:end="73:16">-</operator><literal type="number" pos:start="73:17" pos:end="73:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:55"><expr pos:start="79:5" pos:end="79:54"><call pos:start="79:5" pos:end="79:54"><name pos:start="79:5" pos:end="79:29">cpu_physical_memory_write</name><argument_list pos:start="79:30" pos:end="79:54">(<argument pos:start="79:31" pos:end="79:34"><expr pos:start="79:31" pos:end="79:34"><name pos:start="79:31" pos:end="79:34">addr</name></expr></argument>, <argument pos:start="79:37" pos:end="79:40"><expr pos:start="79:37" pos:end="79:40"><operator pos:start="79:37" pos:end="79:37">&amp;</operator><name pos:start="79:38" pos:end="79:40">hdr</name></expr></argument>, <argument pos:start="79:43" pos:end="79:53"><expr pos:start="79:43" pos:end="79:53"><sizeof pos:start="79:43" pos:end="79:53">sizeof<argument_list pos:start="79:49" pos:end="79:53">(<argument pos:start="79:50" pos:end="79:52"><expr pos:start="79:50" pos:end="79:52"><name pos:start="79:50" pos:end="79:52">hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:75"><expr pos:start="81:5" pos:end="81:74"><call pos:start="81:5" pos:end="81:74"><name pos:start="81:5" pos:end="81:29">cpu_physical_memory_write</name><argument_list pos:start="81:30" pos:end="81:74">(<argument pos:start="81:31" pos:end="81:48"><expr pos:start="81:31" pos:end="81:48"><name pos:start="81:31" pos:end="81:34">addr</name> <operator pos:start="81:36" pos:end="81:36">+</operator> <sizeof pos:start="81:38" pos:end="81:48">sizeof<argument_list pos:start="81:44" pos:end="81:48">(<argument pos:start="81:45" pos:end="81:47"><expr pos:start="81:45" pos:end="81:47"><name pos:start="81:45" pos:end="81:47">hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="81:51" pos:end="81:53"><expr pos:start="81:51" pos:end="81:53"><name pos:start="81:51" pos:end="81:53">fdt</name></expr></argument>, <argument pos:start="81:56" pos:end="81:73"><expr pos:start="81:56" pos:end="81:73"><call pos:start="81:56" pos:end="81:73"><name pos:start="81:56" pos:end="81:68">fdt_totalsize</name><argument_list pos:start="81:69" pos:end="81:73">(<argument pos:start="81:70" pos:end="81:72"><expr pos:start="81:70" pos:end="81:72"><name pos:start="81:70" pos:end="81:72">fdt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:63"><expr pos:start="83:5" pos:end="83:62"><call pos:start="83:5" pos:end="83:62"><name pos:start="83:5" pos:end="83:28">trace_spapr_cas_continue</name><argument_list pos:start="83:29" pos:end="83:62">(<argument pos:start="83:30" pos:end="83:61"><expr pos:start="83:30" pos:end="83:61"><call pos:start="83:30" pos:end="83:47"><name pos:start="83:30" pos:end="83:42">fdt_totalsize</name><argument_list pos:start="83:43" pos:end="83:47">(<argument pos:start="83:44" pos:end="83:46"><expr pos:start="83:44" pos:end="83:46"><name pos:start="83:44" pos:end="83:46">fdt</name></expr></argument>)</argument_list></call> <operator pos:start="83:49" pos:end="83:49">+</operator> <sizeof pos:start="83:51" pos:end="83:61">sizeof<argument_list pos:start="83:57" pos:end="83:61">(<argument pos:start="83:58" pos:end="83:60"><expr pos:start="83:58" pos:end="83:60"><name pos:start="83:58" pos:end="83:60">hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:16"><expr pos:start="85:5" pos:end="85:15"><call pos:start="85:5" pos:end="85:15"><name pos:start="85:5" pos:end="85:10">g_free</name><argument_list pos:start="85:11" pos:end="85:15">(<argument pos:start="85:12" pos:end="85:14"><expr pos:start="85:12" pos:end="85:14"><name pos:start="85:12" pos:end="85:14">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="89:5" pos:end="89:13">return <expr pos:start="89:12" pos:end="89:12"><literal type="number" pos:start="89:12" pos:end="89:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
