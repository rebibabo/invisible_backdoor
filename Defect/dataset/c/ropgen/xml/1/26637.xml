<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26637.c" pos:tabs="8"><function pos:start="1:1" pos:end="229:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">mjpegb_decode_frame</name><parameter_list pos:start="1:31" pos:end="5:46">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:52"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:40"><decl pos:start="3:31" pos:end="3:40"><type pos:start="3:31" pos:end="3:40"><name pos:start="3:31" pos:end="3:34">void</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:40">data</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:56"><decl pos:start="3:43" pos:end="3:56"><type pos:start="3:43" pos:end="3:56"><name pos:start="3:43" pos:end="3:45">int</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:56">got_frame</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:45"><decl pos:start="5:31" pos:end="5:45"><type pos:start="5:31" pos:end="5:45"><name pos:start="5:31" pos:end="5:38">AVPacket</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:45">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="229:1">{<block_content pos:start="9:5" pos:end="227:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:44"><type pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:22">MJpegDecodeContext</name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:25">s</name> <init pos:start="13:27" pos:end="13:44">= <expr pos:start="13:29" pos:end="13:44"><name pos:start="13:29" pos:end="13:44"><name pos:start="13:29" pos:end="13:33">avctx</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:26">buf_end</name></decl>, <decl pos:start="15:29" pos:end="15:36"><type ref="prev" pos:start="15:5" pos:end="15:19"><modifier pos:start="15:29" pos:end="15:29">*</modifier></type><name pos:start="15:30" pos:end="15:36">buf_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:17">GetBitContext</name></type> <name pos:start="17:19" pos:end="17:21">hgb</name></decl>;</decl_stmt> <comment type="block" pos:start="17:24" pos:end="17:43">/* for the header */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:71"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:21">dqt_offs</name></decl>, <decl pos:start="19:24" pos:end="19:31"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:24" pos:end="19:31">dht_offs</name></decl>, <decl pos:start="19:34" pos:end="19:41"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:34" pos:end="19:41">sof_offs</name></decl>, <decl pos:start="19:44" pos:end="19:51"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:44" pos:end="19:51">sos_offs</name></decl>, <decl pos:start="19:54" pos:end="19:70"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:54" pos:end="19:70">second_field_offs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:34"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:23">field_size</name></decl>, <decl pos:start="21:26" pos:end="21:33"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:26" pos:end="21:33">sod_offs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:12"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:18"><expr pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:11">buf_ptr</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <name pos:start="27:15" pos:end="27:17">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:29"><expr pos:start="29:5" pos:end="29:28"><name pos:start="29:5" pos:end="29:11">buf_end</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <name pos:start="29:15" pos:end="29:17">buf</name> <operator pos:start="29:19" pos:end="29:19">+</operator> <name pos:start="29:21" pos:end="29:28">buf_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:23"><expr pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:18">got_picture</name></name> <operator pos:start="31:20" pos:end="31:20">=</operator> <literal type="number" pos:start="31:22" pos:end="31:22">0</literal></expr>;</expr_stmt>



<label pos:start="35:1" pos:end="35:12"><name pos:start="35:1" pos:end="35:11">read_header</name>:</label>

    <comment type="block" pos:start="37:5" pos:end="37:28">/* reset on every SOI */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:28"><expr pos:start="39:5" pos:end="39:27"><name pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:23">restart_interval</name></name> <operator pos:start="39:25" pos:end="39:25">=</operator> <literal type="number" pos:start="39:27" pos:end="39:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:25"><expr pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:20"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:20">restart_count</name></name> <operator pos:start="41:22" pos:end="41:22">=</operator> <literal type="number" pos:start="41:24" pos:end="41:24">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:26"><expr pos:start="43:5" pos:end="43:25"><name pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:21">mjpb_skiptosod</name></name> <operator pos:start="43:23" pos:end="43:23">=</operator> <literal type="number" pos:start="43:25" pos:end="43:25">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="49:35"><if pos:start="47:5" pos:end="49:35">if <condition pos:start="47:8" pos:end="47:37">(<expr pos:start="47:9" pos:end="47:36"><name pos:start="47:9" pos:end="47:15">buf_end</name> <operator pos:start="47:17" pos:end="47:17">-</operator> <name pos:start="47:19" pos:end="47:25">buf_ptr</name> <operator pos:start="47:27" pos:end="47:28">&gt;=</operator> <literal type="number" pos:start="47:30" pos:end="47:30">1</literal> <operator pos:start="47:32" pos:end="47:33">&lt;&lt;</operator> <literal type="number" pos:start="47:35" pos:end="47:36">28</literal></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:35"><block_content pos:start="49:9" pos:end="49:35">

        <return pos:start="49:9" pos:end="49:35">return <expr pos:start="49:16" pos:end="49:34"><name pos:start="49:16" pos:end="49:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:68"><expr pos:start="53:5" pos:end="53:67"><call pos:start="53:5" pos:end="53:67"><name pos:start="53:5" pos:end="53:17">init_get_bits</name><argument_list pos:start="53:18" pos:end="53:67">(<argument pos:start="53:19" pos:end="53:22"><expr pos:start="53:19" pos:end="53:22"><operator pos:start="53:19" pos:end="53:19">&amp;</operator><name pos:start="53:20" pos:end="53:22">hgb</name></expr></argument>, <argument pos:start="53:25" pos:end="53:31"><expr pos:start="53:25" pos:end="53:31"><name pos:start="53:25" pos:end="53:31">buf_ptr</name></expr></argument>, <comment type="block" pos:start="53:34" pos:end="53:45">/*buf_size*/</comment><argument pos:start="53:46" pos:end="53:66"><expr pos:start="53:46" pos:end="53:66"><operator pos:start="53:46" pos:end="53:46">(</operator><name pos:start="53:47" pos:end="53:53">buf_end</name> <operator pos:start="53:55" pos:end="53:55">-</operator> <name pos:start="53:57" pos:end="53:63">buf_ptr</name><operator pos:start="53:64" pos:end="53:64">)</operator><operator pos:start="53:65" pos:end="53:65">*</operator><literal type="number" pos:start="53:66" pos:end="53:66">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:24"><expr pos:start="57:5" pos:end="57:23"><call pos:start="57:5" pos:end="57:23"><name pos:start="57:5" pos:end="57:13">skip_bits</name><argument_list pos:start="57:14" pos:end="57:23">(<argument pos:start="57:15" pos:end="57:18"><expr pos:start="57:15" pos:end="57:18"><operator pos:start="57:15" pos:end="57:15">&amp;</operator><name pos:start="57:16" pos:end="57:18">hgb</name></expr></argument>, <argument pos:start="57:21" pos:end="57:22"><expr pos:start="57:21" pos:end="57:22"><literal type="number" pos:start="57:21" pos:end="57:22">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="57:26" pos:end="57:45">/* reserved zeros */</comment>



    <if_stmt pos:start="61:5" pos:end="69:5"><if pos:start="61:5" pos:end="69:5">if <condition pos:start="61:8" pos:end="61:60">(<expr pos:start="61:9" pos:end="61:59"><call pos:start="61:9" pos:end="61:31"><name pos:start="61:9" pos:end="61:21">get_bits_long</name><argument_list pos:start="61:22" pos:end="61:31">(<argument pos:start="61:23" pos:end="61:26"><expr pos:start="61:23" pos:end="61:26"><operator pos:start="61:23" pos:end="61:23">&amp;</operator><name pos:start="61:24" pos:end="61:26">hgb</name></expr></argument>, <argument pos:start="61:29" pos:end="61:30"><expr pos:start="61:29" pos:end="61:30"><literal type="number" pos:start="61:29" pos:end="61:30">32</literal></expr></argument>)</argument_list></call> <operator pos:start="61:33" pos:end="61:34">!=</operator> <call pos:start="61:36" pos:end="61:59"><name pos:start="61:36" pos:end="61:42">MKBETAG</name><argument_list pos:start="61:43" pos:end="61:59">(<argument pos:start="61:44" pos:end="61:46"><expr pos:start="61:44" pos:end="61:46"><literal type="char" pos:start="61:44" pos:end="61:46">'m'</literal></expr></argument>,<argument pos:start="61:48" pos:end="61:50"><expr pos:start="61:48" pos:end="61:50"><literal type="char" pos:start="61:48" pos:end="61:50">'j'</literal></expr></argument>,<argument pos:start="61:52" pos:end="61:54"><expr pos:start="61:52" pos:end="61:54"><literal type="char" pos:start="61:52" pos:end="61:54">'p'</literal></expr></argument>,<argument pos:start="61:56" pos:end="61:58"><expr pos:start="61:56" pos:end="61:58"><literal type="char" pos:start="61:56" pos:end="61:58">'g'</literal></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="63:5" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:35">

        <expr_stmt pos:start="65:9" pos:end="65:68"><expr pos:start="65:9" pos:end="65:67"><call pos:start="65:9" pos:end="65:67"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:67">(<argument pos:start="65:16" pos:end="65:20"><expr pos:start="65:16" pos:end="65:20"><name pos:start="65:16" pos:end="65:20">avctx</name></expr></argument>, <argument pos:start="65:23" pos:end="65:36"><expr pos:start="65:23" pos:end="65:36"><name pos:start="65:23" pos:end="65:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="65:39" pos:end="65:66"><expr pos:start="65:39" pos:end="65:66"><literal type="string" pos:start="65:39" pos:end="65:66">"not mjpeg-b (bad fourcc)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:35">return <expr pos:start="67:16" pos:end="67:34"><name pos:start="67:16" pos:end="67:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:41"><expr pos:start="73:5" pos:end="73:40"><name pos:start="73:5" pos:end="73:14">field_size</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <call pos:start="73:18" pos:end="73:40"><name pos:start="73:18" pos:end="73:30">get_bits_long</name><argument_list pos:start="73:31" pos:end="73:40">(<argument pos:start="73:32" pos:end="73:35"><expr pos:start="73:32" pos:end="73:35"><operator pos:start="73:32" pos:end="73:32">&amp;</operator><name pos:start="73:33" pos:end="73:35">hgb</name></expr></argument>, <argument pos:start="73:38" pos:end="73:39"><expr pos:start="73:38" pos:end="73:39"><literal type="number" pos:start="73:38" pos:end="73:39">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="73:43" pos:end="73:58">/* field size */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:66"><expr pos:start="75:5" pos:end="75:65"><call pos:start="75:5" pos:end="75:65"><name pos:start="75:5" pos:end="75:10">av_log</name><argument_list pos:start="75:11" pos:end="75:65">(<argument pos:start="75:12" pos:end="75:16"><expr pos:start="75:12" pos:end="75:16"><name pos:start="75:12" pos:end="75:16">avctx</name></expr></argument>, <argument pos:start="75:19" pos:end="75:30"><expr pos:start="75:19" pos:end="75:30"><name pos:start="75:19" pos:end="75:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="75:33" pos:end="75:52"><expr pos:start="75:33" pos:end="75:52"><literal type="string" pos:start="75:33" pos:end="75:52">"field size: 0x%x\n"</literal></expr></argument>, <argument pos:start="75:55" pos:end="75:64"><expr pos:start="75:55" pos:end="75:64"><name pos:start="75:55" pos:end="75:64">field_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:24"><expr pos:start="77:5" pos:end="77:23"><call pos:start="77:5" pos:end="77:23"><name pos:start="77:5" pos:end="77:13">skip_bits</name><argument_list pos:start="77:14" pos:end="77:23">(<argument pos:start="77:15" pos:end="77:18"><expr pos:start="77:15" pos:end="77:18"><operator pos:start="77:15" pos:end="77:15">&amp;</operator><name pos:start="77:16" pos:end="77:18">hgb</name></expr></argument>, <argument pos:start="77:21" pos:end="77:22"><expr pos:start="77:21" pos:end="77:22"><literal type="number" pos:start="77:21" pos:end="77:22">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="77:26" pos:end="77:48">/* padded field size */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:110"><expr pos:start="79:5" pos:end="79:109"><name pos:start="79:5" pos:end="79:21">second_field_offs</name> <operator pos:start="79:23" pos:end="79:23">=</operator> <call pos:start="79:25" pos:end="79:109"><name pos:start="79:25" pos:end="79:33">read_offs</name><argument_list pos:start="79:34" pos:end="79:109">(<argument pos:start="79:35" pos:end="79:39"><expr pos:start="79:35" pos:end="79:39"><name pos:start="79:35" pos:end="79:39">avctx</name></expr></argument>, <argument pos:start="79:42" pos:end="79:45"><expr pos:start="79:42" pos:end="79:45"><operator pos:start="79:42" pos:end="79:42">&amp;</operator><name pos:start="79:43" pos:end="79:45">hgb</name></expr></argument>, <argument pos:start="79:48" pos:end="79:64"><expr pos:start="79:48" pos:end="79:64"><name pos:start="79:48" pos:end="79:54">buf_end</name> <operator pos:start="79:56" pos:end="79:56">-</operator> <name pos:start="79:58" pos:end="79:64">buf_ptr</name></expr></argument>, <argument pos:start="79:67" pos:end="79:108"><expr pos:start="79:67" pos:end="79:108"><literal type="string" pos:start="79:67" pos:end="79:108">"second_field_offs is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:80"><expr pos:start="81:5" pos:end="81:79"><call pos:start="81:5" pos:end="81:79"><name pos:start="81:5" pos:end="81:10">av_log</name><argument_list pos:start="81:11" pos:end="81:79">(<argument pos:start="81:12" pos:end="81:16"><expr pos:start="81:12" pos:end="81:16"><name pos:start="81:12" pos:end="81:16">avctx</name></expr></argument>, <argument pos:start="81:19" pos:end="81:30"><expr pos:start="81:19" pos:end="81:30"><name pos:start="81:19" pos:end="81:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="81:33" pos:end="81:59"><expr pos:start="81:33" pos:end="81:59"><literal type="string" pos:start="81:33" pos:end="81:59">"second field offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="81:62" pos:end="81:78"><expr pos:start="81:62" pos:end="81:78"><name pos:start="81:62" pos:end="81:78">second_field_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:87"><expr pos:start="85:5" pos:end="85:86"><name pos:start="85:5" pos:end="85:12">dqt_offs</name> <operator pos:start="85:14" pos:end="85:14">=</operator> <call pos:start="85:16" pos:end="85:86"><name pos:start="85:16" pos:end="85:24">read_offs</name><argument_list pos:start="85:25" pos:end="85:86">(<argument pos:start="85:26" pos:end="85:30"><expr pos:start="85:26" pos:end="85:30"><name pos:start="85:26" pos:end="85:30">avctx</name></expr></argument>, <argument pos:start="85:33" pos:end="85:36"><expr pos:start="85:33" pos:end="85:36"><operator pos:start="85:33" pos:end="85:33">&amp;</operator><name pos:start="85:34" pos:end="85:36">hgb</name></expr></argument>, <argument pos:start="85:39" pos:end="85:55"><expr pos:start="85:39" pos:end="85:55"><name pos:start="85:39" pos:end="85:45">buf_end</name> <operator pos:start="85:47" pos:end="85:47">-</operator> <name pos:start="85:49" pos:end="85:55">buf_ptr</name></expr></argument>, <argument pos:start="85:58" pos:end="85:85"><expr pos:start="85:58" pos:end="85:85"><literal type="string" pos:start="85:58" pos:end="85:85">"dqt is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:62"><expr pos:start="87:5" pos:end="87:61"><call pos:start="87:5" pos:end="87:61"><name pos:start="87:5" pos:end="87:10">av_log</name><argument_list pos:start="87:11" pos:end="87:61">(<argument pos:start="87:12" pos:end="87:16"><expr pos:start="87:12" pos:end="87:16"><name pos:start="87:12" pos:end="87:16">avctx</name></expr></argument>, <argument pos:start="87:19" pos:end="87:30"><expr pos:start="87:19" pos:end="87:30"><name pos:start="87:19" pos:end="87:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="87:33" pos:end="87:50"><expr pos:start="87:33" pos:end="87:50"><literal type="string" pos:start="87:33" pos:end="87:50">"dqt offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="87:53" pos:end="87:60"><expr pos:start="87:53" pos:end="87:60"><name pos:start="87:53" pos:end="87:60">dqt_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="103:5"><if pos:start="89:5" pos:end="103:5">if <condition pos:start="89:8" pos:end="89:17">(<expr pos:start="89:9" pos:end="89:16"><name pos:start="89:9" pos:end="89:16">dqt_offs</name></expr>)</condition>

    <block pos:start="91:5" pos:end="103:5">{<block_content pos:start="93:9" pos:end="101:37">

        <expr_stmt pos:start="93:9" pos:end="93:82"><expr pos:start="93:9" pos:end="93:81"><call pos:start="93:9" pos:end="93:81"><name pos:start="93:9" pos:end="93:21">init_get_bits</name><argument_list pos:start="93:22" pos:end="93:81">(<argument pos:start="93:23" pos:end="93:28"><expr pos:start="93:23" pos:end="93:28"><operator pos:start="93:23" pos:end="93:23">&amp;</operator><name pos:start="93:24" pos:end="93:28"><name pos:start="93:24" pos:end="93:24">s</name><operator pos:start="93:25" pos:end="93:26">-&gt;</operator><name pos:start="93:27" pos:end="93:28">gb</name></name></expr></argument>, <argument pos:start="93:31" pos:end="93:46"><expr pos:start="93:31" pos:end="93:46"><name pos:start="93:31" pos:end="93:37">buf_ptr</name><operator pos:start="93:38" pos:end="93:38">+</operator><name pos:start="93:39" pos:end="93:46">dqt_offs</name></expr></argument>, <argument pos:start="93:49" pos:end="93:80"><expr pos:start="93:49" pos:end="93:80"><operator pos:start="93:49" pos:end="93:49">(</operator><name pos:start="93:50" pos:end="93:56">buf_end</name> <operator pos:start="93:58" pos:end="93:58">-</operator> <operator pos:start="93:60" pos:end="93:60">(</operator><name pos:start="93:61" pos:end="93:67">buf_ptr</name><operator pos:start="93:68" pos:end="93:68">+</operator><name pos:start="93:69" pos:end="93:76">dqt_offs</name><operator pos:start="93:77" pos:end="93:77">)</operator><operator pos:start="93:78" pos:end="93:78">)</operator><operator pos:start="93:79" pos:end="93:79">*</operator><literal type="number" pos:start="93:80" pos:end="93:80">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:28"><expr pos:start="95:9" pos:end="95:27"><name pos:start="95:9" pos:end="95:21"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:21">start_code</name></name> <operator pos:start="95:23" pos:end="95:23">=</operator> <name pos:start="95:25" pos:end="95:27">DQT</name></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="101:37"><if pos:start="97:9" pos:end="101:37">if <condition pos:start="97:12" pos:end="99:53">(<expr pos:start="97:13" pos:end="99:52"><call pos:start="97:13" pos:end="97:34"><name pos:start="97:13" pos:end="97:31">ff_mjpeg_decode_dqt</name><argument_list pos:start="97:32" pos:end="97:34">(<argument pos:start="97:33" pos:end="97:33"><expr pos:start="97:33" pos:end="97:33"><name pos:start="97:33" pos:end="97:33">s</name></expr></argument>)</argument_list></call> <operator pos:start="97:36" pos:end="97:36">&lt;</operator> <literal type="number" pos:start="97:38" pos:end="97:38">0</literal> <operator pos:start="97:40" pos:end="97:41">&amp;&amp;</operator>

            <operator pos:start="99:13" pos:end="99:13">(</operator><name pos:start="99:14" pos:end="99:35"><name pos:start="99:14" pos:end="99:18">avctx</name><operator pos:start="99:19" pos:end="99:20">-&gt;</operator><name pos:start="99:21" pos:end="99:35">err_recognition</name></name> <operator pos:start="99:37" pos:end="99:37">&amp;</operator> <name pos:start="99:39" pos:end="99:51">AV_EF_EXPLODE</name><operator pos:start="99:52" pos:end="99:52">)</operator></expr>)</condition><block type="pseudo" pos:start="101:11" pos:end="101:37"><block_content pos:start="101:11" pos:end="101:37">

          <return pos:start="101:11" pos:end="101:37">return <expr pos:start="101:18" pos:end="101:36"><name pos:start="101:18" pos:end="101:36">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:87"><expr pos:start="107:5" pos:end="107:86"><name pos:start="107:5" pos:end="107:12">dht_offs</name> <operator pos:start="107:14" pos:end="107:14">=</operator> <call pos:start="107:16" pos:end="107:86"><name pos:start="107:16" pos:end="107:24">read_offs</name><argument_list pos:start="107:25" pos:end="107:86">(<argument pos:start="107:26" pos:end="107:30"><expr pos:start="107:26" pos:end="107:30"><name pos:start="107:26" pos:end="107:30">avctx</name></expr></argument>, <argument pos:start="107:33" pos:end="107:36"><expr pos:start="107:33" pos:end="107:36"><operator pos:start="107:33" pos:end="107:33">&amp;</operator><name pos:start="107:34" pos:end="107:36">hgb</name></expr></argument>, <argument pos:start="107:39" pos:end="107:55"><expr pos:start="107:39" pos:end="107:55"><name pos:start="107:39" pos:end="107:45">buf_end</name> <operator pos:start="107:47" pos:end="107:47">-</operator> <name pos:start="107:49" pos:end="107:55">buf_ptr</name></expr></argument>, <argument pos:start="107:58" pos:end="107:85"><expr pos:start="107:58" pos:end="107:85"><literal type="string" pos:start="107:58" pos:end="107:85">"dht is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:62"><expr pos:start="109:5" pos:end="109:61"><call pos:start="109:5" pos:end="109:61"><name pos:start="109:5" pos:end="109:10">av_log</name><argument_list pos:start="109:11" pos:end="109:61">(<argument pos:start="109:12" pos:end="109:16"><expr pos:start="109:12" pos:end="109:16"><name pos:start="109:12" pos:end="109:16">avctx</name></expr></argument>, <argument pos:start="109:19" pos:end="109:30"><expr pos:start="109:19" pos:end="109:30"><name pos:start="109:19" pos:end="109:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="109:33" pos:end="109:50"><expr pos:start="109:33" pos:end="109:50"><literal type="string" pos:start="109:33" pos:end="109:50">"dht offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="109:53" pos:end="109:60"><expr pos:start="109:53" pos:end="109:60"><name pos:start="109:53" pos:end="109:60">dht_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="121:5"><if pos:start="111:5" pos:end="121:5">if <condition pos:start="111:8" pos:end="111:17">(<expr pos:start="111:9" pos:end="111:16"><name pos:start="111:9" pos:end="111:16">dht_offs</name></expr>)</condition>

    <block pos:start="113:5" pos:end="121:5">{<block_content pos:start="115:9" pos:end="119:31">

        <expr_stmt pos:start="115:9" pos:end="115:82"><expr pos:start="115:9" pos:end="115:81"><call pos:start="115:9" pos:end="115:81"><name pos:start="115:9" pos:end="115:21">init_get_bits</name><argument_list pos:start="115:22" pos:end="115:81">(<argument pos:start="115:23" pos:end="115:28"><expr pos:start="115:23" pos:end="115:28"><operator pos:start="115:23" pos:end="115:23">&amp;</operator><name pos:start="115:24" pos:end="115:28"><name pos:start="115:24" pos:end="115:24">s</name><operator pos:start="115:25" pos:end="115:26">-&gt;</operator><name pos:start="115:27" pos:end="115:28">gb</name></name></expr></argument>, <argument pos:start="115:31" pos:end="115:46"><expr pos:start="115:31" pos:end="115:46"><name pos:start="115:31" pos:end="115:37">buf_ptr</name><operator pos:start="115:38" pos:end="115:38">+</operator><name pos:start="115:39" pos:end="115:46">dht_offs</name></expr></argument>, <argument pos:start="115:49" pos:end="115:80"><expr pos:start="115:49" pos:end="115:80"><operator pos:start="115:49" pos:end="115:49">(</operator><name pos:start="115:50" pos:end="115:56">buf_end</name> <operator pos:start="115:58" pos:end="115:58">-</operator> <operator pos:start="115:60" pos:end="115:60">(</operator><name pos:start="115:61" pos:end="115:67">buf_ptr</name><operator pos:start="115:68" pos:end="115:68">+</operator><name pos:start="115:69" pos:end="115:76">dht_offs</name><operator pos:start="115:77" pos:end="115:77">)</operator><operator pos:start="115:78" pos:end="115:78">)</operator><operator pos:start="115:79" pos:end="115:79">*</operator><literal type="number" pos:start="115:80" pos:end="115:80">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:28"><expr pos:start="117:9" pos:end="117:27"><name pos:start="117:9" pos:end="117:21"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:21">start_code</name></name> <operator pos:start="117:23" pos:end="117:23">=</operator> <name pos:start="117:25" pos:end="117:27">DHT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:31"><expr pos:start="119:9" pos:end="119:30"><call pos:start="119:9" pos:end="119:30"><name pos:start="119:9" pos:end="119:27">ff_mjpeg_decode_dht</name><argument_list pos:start="119:28" pos:end="119:30">(<argument pos:start="119:29" pos:end="119:29"><expr pos:start="119:29" pos:end="119:29"><name pos:start="119:29" pos:end="119:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:87"><expr pos:start="125:5" pos:end="125:86"><name pos:start="125:5" pos:end="125:12">sof_offs</name> <operator pos:start="125:14" pos:end="125:14">=</operator> <call pos:start="125:16" pos:end="125:86"><name pos:start="125:16" pos:end="125:24">read_offs</name><argument_list pos:start="125:25" pos:end="125:86">(<argument pos:start="125:26" pos:end="125:30"><expr pos:start="125:26" pos:end="125:30"><name pos:start="125:26" pos:end="125:30">avctx</name></expr></argument>, <argument pos:start="125:33" pos:end="125:36"><expr pos:start="125:33" pos:end="125:36"><operator pos:start="125:33" pos:end="125:33">&amp;</operator><name pos:start="125:34" pos:end="125:36">hgb</name></expr></argument>, <argument pos:start="125:39" pos:end="125:55"><expr pos:start="125:39" pos:end="125:55"><name pos:start="125:39" pos:end="125:45">buf_end</name> <operator pos:start="125:47" pos:end="125:47">-</operator> <name pos:start="125:49" pos:end="125:55">buf_ptr</name></expr></argument>, <argument pos:start="125:58" pos:end="125:85"><expr pos:start="125:58" pos:end="125:85"><literal type="string" pos:start="125:58" pos:end="125:85">"sof is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:62"><expr pos:start="127:5" pos:end="127:61"><call pos:start="127:5" pos:end="127:61"><name pos:start="127:5" pos:end="127:10">av_log</name><argument_list pos:start="127:11" pos:end="127:61">(<argument pos:start="127:12" pos:end="127:16"><expr pos:start="127:12" pos:end="127:16"><name pos:start="127:12" pos:end="127:16">avctx</name></expr></argument>, <argument pos:start="127:19" pos:end="127:30"><expr pos:start="127:19" pos:end="127:30"><name pos:start="127:19" pos:end="127:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="127:33" pos:end="127:50"><expr pos:start="127:33" pos:end="127:50"><literal type="string" pos:start="127:33" pos:end="127:50">"sof offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="127:53" pos:end="127:60"><expr pos:start="127:53" pos:end="127:60"><name pos:start="127:53" pos:end="127:60">sof_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="129:5" pos:end="141:5"><if pos:start="129:5" pos:end="141:5">if <condition pos:start="129:8" pos:end="129:17">(<expr pos:start="129:9" pos:end="129:16"><name pos:start="129:9" pos:end="129:16">sof_offs</name></expr>)</condition>

    <block pos:start="131:5" pos:end="141:5">{<block_content pos:start="133:9" pos:end="139:22">

        <expr_stmt pos:start="133:9" pos:end="133:82"><expr pos:start="133:9" pos:end="133:81"><call pos:start="133:9" pos:end="133:81"><name pos:start="133:9" pos:end="133:21">init_get_bits</name><argument_list pos:start="133:22" pos:end="133:81">(<argument pos:start="133:23" pos:end="133:28"><expr pos:start="133:23" pos:end="133:28"><operator pos:start="133:23" pos:end="133:23">&amp;</operator><name pos:start="133:24" pos:end="133:28"><name pos:start="133:24" pos:end="133:24">s</name><operator pos:start="133:25" pos:end="133:26">-&gt;</operator><name pos:start="133:27" pos:end="133:28">gb</name></name></expr></argument>, <argument pos:start="133:31" pos:end="133:46"><expr pos:start="133:31" pos:end="133:46"><name pos:start="133:31" pos:end="133:37">buf_ptr</name><operator pos:start="133:38" pos:end="133:38">+</operator><name pos:start="133:39" pos:end="133:46">sof_offs</name></expr></argument>, <argument pos:start="133:49" pos:end="133:80"><expr pos:start="133:49" pos:end="133:80"><operator pos:start="133:49" pos:end="133:49">(</operator><name pos:start="133:50" pos:end="133:56">buf_end</name> <operator pos:start="133:58" pos:end="133:58">-</operator> <operator pos:start="133:60" pos:end="133:60">(</operator><name pos:start="133:61" pos:end="133:67">buf_ptr</name><operator pos:start="133:68" pos:end="133:68">+</operator><name pos:start="133:69" pos:end="133:76">sof_offs</name><operator pos:start="133:77" pos:end="133:77">)</operator><operator pos:start="133:78" pos:end="133:78">)</operator><operator pos:start="133:79" pos:end="133:79">*</operator><literal type="number" pos:start="133:80" pos:end="133:80">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:29"><expr pos:start="135:9" pos:end="135:28"><name pos:start="135:9" pos:end="135:21"><name pos:start="135:9" pos:end="135:9">s</name><operator pos:start="135:10" pos:end="135:11">-&gt;</operator><name pos:start="135:12" pos:end="135:21">start_code</name></name> <operator pos:start="135:23" pos:end="135:23">=</operator> <name pos:start="135:25" pos:end="135:28">SOF0</name></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="139:22"><if pos:start="137:9" pos:end="139:22">if <condition pos:start="137:12" pos:end="137:39">(<expr pos:start="137:13" pos:end="137:38"><call pos:start="137:13" pos:end="137:34"><name pos:start="137:13" pos:end="137:31">ff_mjpeg_decode_sof</name><argument_list pos:start="137:32" pos:end="137:34">(<argument pos:start="137:33" pos:end="137:33"><expr pos:start="137:33" pos:end="137:33"><name pos:start="137:33" pos:end="137:33">s</name></expr></argument>)</argument_list></call> <operator pos:start="137:36" pos:end="137:36">&lt;</operator> <literal type="number" pos:start="137:38" pos:end="137:38">0</literal></expr>)</condition><block type="pseudo" pos:start="139:13" pos:end="139:22"><block_content pos:start="139:13" pos:end="139:22">

            <return pos:start="139:13" pos:end="139:22">return <expr pos:start="139:20" pos:end="139:21"><operator pos:start="139:20" pos:end="139:20">-</operator><literal type="number" pos:start="139:21" pos:end="139:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="145:5" pos:end="145:87"><expr pos:start="145:5" pos:end="145:86"><name pos:start="145:5" pos:end="145:12">sos_offs</name> <operator pos:start="145:14" pos:end="145:14">=</operator> <call pos:start="145:16" pos:end="145:86"><name pos:start="145:16" pos:end="145:24">read_offs</name><argument_list pos:start="145:25" pos:end="145:86">(<argument pos:start="145:26" pos:end="145:30"><expr pos:start="145:26" pos:end="145:30"><name pos:start="145:26" pos:end="145:30">avctx</name></expr></argument>, <argument pos:start="145:33" pos:end="145:36"><expr pos:start="145:33" pos:end="145:36"><operator pos:start="145:33" pos:end="145:33">&amp;</operator><name pos:start="145:34" pos:end="145:36">hgb</name></expr></argument>, <argument pos:start="145:39" pos:end="145:55"><expr pos:start="145:39" pos:end="145:55"><name pos:start="145:39" pos:end="145:45">buf_end</name> <operator pos:start="145:47" pos:end="145:47">-</operator> <name pos:start="145:49" pos:end="145:55">buf_ptr</name></expr></argument>, <argument pos:start="145:58" pos:end="145:85"><expr pos:start="145:58" pos:end="145:85"><literal type="string" pos:start="145:58" pos:end="145:85">"sos is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:62"><expr pos:start="147:5" pos:end="147:61"><call pos:start="147:5" pos:end="147:61"><name pos:start="147:5" pos:end="147:10">av_log</name><argument_list pos:start="147:11" pos:end="147:61">(<argument pos:start="147:12" pos:end="147:16"><expr pos:start="147:12" pos:end="147:16"><name pos:start="147:12" pos:end="147:16">avctx</name></expr></argument>, <argument pos:start="147:19" pos:end="147:30"><expr pos:start="147:19" pos:end="147:30"><name pos:start="147:19" pos:end="147:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="147:33" pos:end="147:50"><expr pos:start="147:33" pos:end="147:50"><literal type="string" pos:start="147:33" pos:end="147:50">"sos offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="147:53" pos:end="147:60"><expr pos:start="147:53" pos:end="147:60"><name pos:start="147:53" pos:end="147:60">sos_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:87"><expr pos:start="149:5" pos:end="149:86"><name pos:start="149:5" pos:end="149:12">sod_offs</name> <operator pos:start="149:14" pos:end="149:14">=</operator> <call pos:start="149:16" pos:end="149:86"><name pos:start="149:16" pos:end="149:24">read_offs</name><argument_list pos:start="149:25" pos:end="149:86">(<argument pos:start="149:26" pos:end="149:30"><expr pos:start="149:26" pos:end="149:30"><name pos:start="149:26" pos:end="149:30">avctx</name></expr></argument>, <argument pos:start="149:33" pos:end="149:36"><expr pos:start="149:33" pos:end="149:36"><operator pos:start="149:33" pos:end="149:33">&amp;</operator><name pos:start="149:34" pos:end="149:36">hgb</name></expr></argument>, <argument pos:start="149:39" pos:end="149:55"><expr pos:start="149:39" pos:end="149:55"><name pos:start="149:39" pos:end="149:45">buf_end</name> <operator pos:start="149:47" pos:end="149:47">-</operator> <name pos:start="149:49" pos:end="149:55">buf_ptr</name></expr></argument>, <argument pos:start="149:58" pos:end="149:85"><expr pos:start="149:58" pos:end="149:85"><literal type="string" pos:start="149:58" pos:end="149:85">"sof is %d and size is %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:62"><expr pos:start="151:5" pos:end="151:61"><call pos:start="151:5" pos:end="151:61"><name pos:start="151:5" pos:end="151:10">av_log</name><argument_list pos:start="151:11" pos:end="151:61">(<argument pos:start="151:12" pos:end="151:16"><expr pos:start="151:12" pos:end="151:16"><name pos:start="151:12" pos:end="151:16">avctx</name></expr></argument>, <argument pos:start="151:19" pos:end="151:30"><expr pos:start="151:19" pos:end="151:30"><name pos:start="151:19" pos:end="151:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="151:33" pos:end="151:50"><expr pos:start="151:33" pos:end="151:50"><literal type="string" pos:start="151:33" pos:end="151:50">"sod offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="151:53" pos:end="151:60"><expr pos:start="151:53" pos:end="151:60"><name pos:start="151:53" pos:end="151:60">sod_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="153:5" pos:end="171:5"><if pos:start="153:5" pos:end="171:5">if <condition pos:start="153:8" pos:end="153:17">(<expr pos:start="153:9" pos:end="153:16"><name pos:start="153:9" pos:end="153:16">sos_offs</name></expr>)</condition>

    <block pos:start="155:5" pos:end="171:5">{<block_content pos:start="157:9" pos:end="169:37">

        <expr_stmt pos:start="157:9" pos:end="159:75"><expr pos:start="157:9" pos:end="159:74"><call pos:start="157:9" pos:end="159:74"><name pos:start="157:9" pos:end="157:21">init_get_bits</name><argument_list pos:start="157:22" pos:end="159:74">(<argument pos:start="157:23" pos:end="157:28"><expr pos:start="157:23" pos:end="157:28"><operator pos:start="157:23" pos:end="157:23">&amp;</operator><name pos:start="157:24" pos:end="157:28"><name pos:start="157:24" pos:end="157:24">s</name><operator pos:start="157:25" pos:end="157:26">-&gt;</operator><name pos:start="157:27" pos:end="157:28">gb</name></name></expr></argument>, <argument pos:start="157:31" pos:end="157:48"><expr pos:start="157:31" pos:end="157:48"><name pos:start="157:31" pos:end="157:37">buf_ptr</name> <operator pos:start="157:39" pos:end="157:39">+</operator> <name pos:start="157:41" pos:end="157:48">sos_offs</name></expr></argument>,

                      <argument pos:start="159:23" pos:end="159:73"><expr pos:start="159:23" pos:end="159:73"><literal type="number" pos:start="159:23" pos:end="159:23">8</literal> <operator pos:start="159:25" pos:end="159:25">*</operator> <call pos:start="159:27" pos:end="159:73"><name pos:start="159:27" pos:end="159:31">FFMIN</name><argument_list pos:start="159:32" pos:end="159:73">(<argument pos:start="159:33" pos:end="159:42"><expr pos:start="159:33" pos:end="159:42"><name pos:start="159:33" pos:end="159:42">field_size</name></expr></argument>, <argument pos:start="159:45" pos:end="159:72"><expr pos:start="159:45" pos:end="159:72"><name pos:start="159:45" pos:end="159:51">buf_end</name> <operator pos:start="159:53" pos:end="159:53">-</operator> <name pos:start="159:55" pos:end="159:61">buf_ptr</name> <operator pos:start="159:63" pos:end="159:63">-</operator> <name pos:start="159:65" pos:end="159:72">sos_offs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:74"><expr pos:start="161:9" pos:end="161:73"><name pos:start="161:9" pos:end="161:25"><name pos:start="161:9" pos:end="161:9">s</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:25">mjpb_skiptosod</name></name> <operator pos:start="161:27" pos:end="161:27">=</operator> <operator pos:start="161:29" pos:end="161:29">(</operator><name pos:start="161:30" pos:end="161:37">sod_offs</name> <operator pos:start="161:39" pos:end="161:39">-</operator> <name pos:start="161:41" pos:end="161:48">sos_offs</name> <operator pos:start="161:50" pos:end="161:50">-</operator> <call pos:start="161:52" pos:end="161:72"><name pos:start="161:52" pos:end="161:60">show_bits</name><argument_list pos:start="161:61" pos:end="161:72">(<argument pos:start="161:62" pos:end="161:67"><expr pos:start="161:62" pos:end="161:67"><operator pos:start="161:62" pos:end="161:62">&amp;</operator><name pos:start="161:63" pos:end="161:67"><name pos:start="161:63" pos:end="161:63">s</name><operator pos:start="161:64" pos:end="161:65">-&gt;</operator><name pos:start="161:66" pos:end="161:67">gb</name></name></expr></argument>, <argument pos:start="161:70" pos:end="161:71"><expr pos:start="161:70" pos:end="161:71"><literal type="number" pos:start="161:70" pos:end="161:71">16</literal></expr></argument>)</argument_list></call><operator pos:start="161:73" pos:end="161:73">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:28"><expr pos:start="163:9" pos:end="163:27"><name pos:start="163:9" pos:end="163:21"><name pos:start="163:9" pos:end="163:9">s</name><operator pos:start="163:10" pos:end="163:11">-&gt;</operator><name pos:start="163:12" pos:end="163:21">start_code</name></name> <operator pos:start="163:23" pos:end="163:23">=</operator> <name pos:start="163:25" pos:end="163:27">SOS</name></expr>;</expr_stmt>

        <if_stmt pos:start="165:9" pos:end="169:37"><if pos:start="165:9" pos:end="169:37">if <condition pos:start="165:12" pos:end="167:53">(<expr pos:start="165:13" pos:end="167:52"><call pos:start="165:13" pos:end="165:46"><name pos:start="165:13" pos:end="165:31">ff_mjpeg_decode_sos</name><argument_list pos:start="165:32" pos:end="165:46">(<argument pos:start="165:33" pos:end="165:33"><expr pos:start="165:33" pos:end="165:33"><name pos:start="165:33" pos:end="165:33">s</name></expr></argument>, <argument pos:start="165:36" pos:end="165:39"><expr pos:start="165:36" pos:end="165:39"><name pos:start="165:36" pos:end="165:39">NULL</name></expr></argument>, <argument pos:start="165:42" pos:end="165:45"><expr pos:start="165:42" pos:end="165:45"><name pos:start="165:42" pos:end="165:45">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="165:48" pos:end="165:48">&lt;</operator> <literal type="number" pos:start="165:50" pos:end="165:50">0</literal> <operator pos:start="165:52" pos:end="165:53">&amp;&amp;</operator>

            <operator pos:start="167:13" pos:end="167:13">(</operator><name pos:start="167:14" pos:end="167:35"><name pos:start="167:14" pos:end="167:18">avctx</name><operator pos:start="167:19" pos:end="167:20">-&gt;</operator><name pos:start="167:21" pos:end="167:35">err_recognition</name></name> <operator pos:start="167:37" pos:end="167:37">&amp;</operator> <name pos:start="167:39" pos:end="167:51">AV_EF_EXPLODE</name><operator pos:start="167:52" pos:end="167:52">)</operator></expr>)</condition><block type="pseudo" pos:start="169:11" pos:end="169:37"><block_content pos:start="169:11" pos:end="169:37">

          <return pos:start="169:11" pos:end="169:37">return <expr pos:start="169:18" pos:end="169:36"><name pos:start="169:18" pos:end="169:36">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="175:5" pos:end="191:5"><if pos:start="175:5" pos:end="191:5">if <condition pos:start="175:8" pos:end="175:22">(<expr pos:start="175:9" pos:end="175:21"><name pos:start="175:9" pos:end="175:21"><name pos:start="175:9" pos:end="175:9">s</name><operator pos:start="175:10" pos:end="175:11">-&gt;</operator><name pos:start="175:12" pos:end="175:21">interlaced</name></name></expr>)</condition> <block pos:start="175:24" pos:end="191:5">{<block_content pos:start="177:9" pos:end="189:13">

        <expr_stmt pos:start="177:9" pos:end="177:29"><expr pos:start="177:9" pos:end="177:28"><name pos:start="177:9" pos:end="177:23"><name pos:start="177:9" pos:end="177:9">s</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:23">bottom_field</name></name> <operator pos:start="177:25" pos:end="177:26">^=</operator> <literal type="number" pos:start="177:28" pos:end="177:28">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="179:9" pos:end="179:58">/* if not bottom field, do not output image yet */</comment>

        <if_stmt pos:start="181:9" pos:end="189:13"><if pos:start="181:9" pos:end="189:13">if <condition pos:start="181:12" pos:end="181:74">(<expr pos:start="181:13" pos:end="181:73"><name pos:start="181:13" pos:end="181:27"><name pos:start="181:13" pos:end="181:13">s</name><operator pos:start="181:14" pos:end="181:15">-&gt;</operator><name pos:start="181:16" pos:end="181:27">bottom_field</name></name> <operator pos:start="181:29" pos:end="181:30">!=</operator> <name pos:start="181:32" pos:end="181:52"><name pos:start="181:32" pos:end="181:32">s</name><operator pos:start="181:33" pos:end="181:34">-&gt;</operator><name pos:start="181:35" pos:end="181:52">interlace_polarity</name></name> <operator pos:start="181:54" pos:end="181:55">&amp;&amp;</operator> <name pos:start="181:57" pos:end="181:73">second_field_offs</name></expr>)</condition>

        <block pos:start="183:9" pos:end="189:13">{<block_content pos:start="185:13" pos:end="187:29">

            <expr_stmt pos:start="185:13" pos:end="185:46"><expr pos:start="185:13" pos:end="185:45"><name pos:start="185:13" pos:end="185:19">buf_ptr</name> <operator pos:start="185:21" pos:end="185:21">=</operator> <name pos:start="185:23" pos:end="185:25">buf</name> <operator pos:start="185:27" pos:end="185:27">+</operator> <name pos:start="185:29" pos:end="185:45">second_field_offs</name></expr>;</expr_stmt>

            <goto pos:start="187:13" pos:end="187:29">goto <name pos:start="187:18" pos:end="187:28">read_header</name>;</goto>

            </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="195:5" pos:end="195:66">//XXX FIXME factorize, this looks very similar to the EOI code</comment>



    <if_stmt pos:start="199:5" pos:end="205:5"><if pos:start="199:5" pos:end="205:5">if<condition pos:start="199:7" pos:end="199:23">(<expr pos:start="199:8" pos:end="199:22"><operator pos:start="199:8" pos:end="199:8">!</operator><name pos:start="199:9" pos:end="199:22"><name pos:start="199:9" pos:end="199:9">s</name><operator pos:start="199:10" pos:end="199:11">-&gt;</operator><name pos:start="199:12" pos:end="199:22">got_picture</name></name></expr>)</condition> <block pos:start="199:25" pos:end="205:5">{<block_content pos:start="201:9" pos:end="203:24">

        <expr_stmt pos:start="201:9" pos:end="201:54"><expr pos:start="201:9" pos:end="201:53"><call pos:start="201:9" pos:end="201:53"><name pos:start="201:9" pos:end="201:14">av_log</name><argument_list pos:start="201:15" pos:end="201:53">(<argument pos:start="201:16" pos:end="201:20"><expr pos:start="201:16" pos:end="201:20"><name pos:start="201:16" pos:end="201:20">avctx</name></expr></argument>, <argument pos:start="201:23" pos:end="201:36"><expr pos:start="201:23" pos:end="201:36"><name pos:start="201:23" pos:end="201:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="201:39" pos:end="201:52"><expr pos:start="201:39" pos:end="201:52"><literal type="string" pos:start="201:39" pos:end="201:52">"no picture\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="203:9" pos:end="203:24">return <expr pos:start="203:16" pos:end="203:23"><name pos:start="203:16" pos:end="203:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="209:5" pos:end="211:19"><if pos:start="209:5" pos:end="211:19">if <condition pos:start="209:8" pos:end="209:55">(<expr pos:start="209:9" pos:end="209:54"><operator pos:start="209:9" pos:end="209:9">(</operator><name pos:start="209:10" pos:end="209:12">ret</name> <operator pos:start="209:14" pos:end="209:14">=</operator> <call pos:start="209:16" pos:end="209:49"><name pos:start="209:16" pos:end="209:27">av_frame_ref</name><argument_list pos:start="209:28" pos:end="209:49">(<argument pos:start="209:29" pos:end="209:32"><expr pos:start="209:29" pos:end="209:32"><name pos:start="209:29" pos:end="209:32">data</name></expr></argument>, <argument pos:start="209:35" pos:end="209:48"><expr pos:start="209:35" pos:end="209:48"><name pos:start="209:35" pos:end="209:48"><name pos:start="209:35" pos:end="209:35">s</name><operator pos:start="209:36" pos:end="209:37">-&gt;</operator><name pos:start="209:38" pos:end="209:48">picture_ptr</name></name></expr></argument>)</argument_list></call><operator pos:start="209:50" pos:end="209:50">)</operator> <operator pos:start="209:52" pos:end="209:52">&lt;</operator> <literal type="number" pos:start="209:54" pos:end="209:54">0</literal></expr>)</condition><block type="pseudo" pos:start="211:9" pos:end="211:19"><block_content pos:start="211:9" pos:end="211:19">

        <return pos:start="211:9" pos:end="211:19">return <expr pos:start="211:16" pos:end="211:18"><name pos:start="211:16" pos:end="211:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:19"><expr pos:start="213:5" pos:end="213:18"><operator pos:start="213:5" pos:end="213:5">*</operator><name pos:start="213:6" pos:end="213:14">got_frame</name> <operator pos:start="213:16" pos:end="213:16">=</operator> <literal type="number" pos:start="213:18" pos:end="213:18">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="217:5" pos:end="223:5"><if pos:start="217:5" pos:end="223:5">if <condition pos:start="217:8" pos:end="217:51">(<expr pos:start="217:9" pos:end="217:50"><operator pos:start="217:9" pos:end="217:9">!</operator><name pos:start="217:10" pos:end="217:20"><name pos:start="217:10" pos:end="217:10">s</name><operator pos:start="217:11" pos:end="217:12">-&gt;</operator><name pos:start="217:13" pos:end="217:20">lossless</name></name> <operator pos:start="217:22" pos:end="217:23">&amp;&amp;</operator> <name pos:start="217:25" pos:end="217:36"><name pos:start="217:25" pos:end="217:29">avctx</name><operator pos:start="217:30" pos:end="217:31">-&gt;</operator><name pos:start="217:32" pos:end="217:36">debug</name></name> <operator pos:start="217:38" pos:end="217:38">&amp;</operator> <name pos:start="217:40" pos:end="217:50">FF_DEBUG_QP</name></expr>)</condition> <block pos:start="217:53" pos:end="223:5">{<block_content pos:start="219:9" pos:end="221:65">

        <expr_stmt pos:start="219:9" pos:end="221:65"><expr pos:start="219:9" pos:end="221:64"><call pos:start="219:9" pos:end="221:64"><name pos:start="219:9" pos:end="219:14">av_log</name><argument_list pos:start="219:15" pos:end="221:64">(<argument pos:start="219:16" pos:end="219:20"><expr pos:start="219:16" pos:end="219:20"><name pos:start="219:16" pos:end="219:20">avctx</name></expr></argument>, <argument pos:start="219:23" pos:end="219:34"><expr pos:start="219:23" pos:end="219:34"><name pos:start="219:23" pos:end="219:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="219:37" pos:end="219:46"><expr pos:start="219:37" pos:end="219:46"><literal type="string" pos:start="219:37" pos:end="219:46">"QP: %d\n"</literal></expr></argument>,

               <argument pos:start="221:16" pos:end="221:63"><expr pos:start="221:16" pos:end="221:63"><call pos:start="221:16" pos:end="221:63"><name pos:start="221:16" pos:end="221:21">FFMAX3</name><argument_list pos:start="221:22" pos:end="221:63">(<argument pos:start="221:23" pos:end="221:34"><expr pos:start="221:23" pos:end="221:34"><name pos:start="221:23" pos:end="221:34"><name pos:start="221:23" pos:end="221:23">s</name><operator pos:start="221:24" pos:end="221:25">-&gt;</operator><name pos:start="221:26" pos:end="221:31">qscale</name><index pos:start="221:32" pos:end="221:34">[<expr pos:start="221:33" pos:end="221:33"><literal type="number" pos:start="221:33" pos:end="221:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="221:37" pos:end="221:48"><expr pos:start="221:37" pos:end="221:48"><name pos:start="221:37" pos:end="221:48"><name pos:start="221:37" pos:end="221:37">s</name><operator pos:start="221:38" pos:end="221:39">-&gt;</operator><name pos:start="221:40" pos:end="221:45">qscale</name><index pos:start="221:46" pos:end="221:48">[<expr pos:start="221:47" pos:end="221:47"><literal type="number" pos:start="221:47" pos:end="221:47">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="221:51" pos:end="221:62"><expr pos:start="221:51" pos:end="221:62"><name pos:start="221:51" pos:end="221:62"><name pos:start="221:51" pos:end="221:51">s</name><operator pos:start="221:52" pos:end="221:53">-&gt;</operator><name pos:start="221:54" pos:end="221:59">qscale</name><index pos:start="221:60" pos:end="221:62">[<expr pos:start="221:61" pos:end="221:61"><literal type="number" pos:start="221:61" pos:end="221:61">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="227:5" pos:end="227:20">return <expr pos:start="227:12" pos:end="227:19"><name pos:start="227:12" pos:end="227:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
