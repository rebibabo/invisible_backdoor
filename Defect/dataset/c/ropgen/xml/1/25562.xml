<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25562.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">parse_add_fd</name><parameter_list pos:start="1:24" pos:end="1:53">(<parameter pos:start="1:25" pos:end="1:38"><decl pos:start="1:25" pos:end="1:38"><type pos:start="1:25" pos:end="1:38"><name pos:start="1:25" pos:end="1:32">QemuOpts</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:38">opts</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:52"><decl pos:start="1:41" pos:end="1:52"><type pos:start="1:41" pos:end="1:52"><name pos:start="1:41" pos:end="1:44">void</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:52">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:13">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">fd</name></decl>, <decl pos:start="5:13" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:13" pos:end="5:17">dupfd</name></decl>, <decl pos:start="5:20" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:20" pos:end="5:24">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:20">fdset_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:25">fd_opaque</name> <init pos:start="9:27" pos:end="9:32">= <expr pos:start="9:29" pos:end="9:32"><name pos:start="9:29" pos:end="9:32">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:45"><expr pos:start="13:5" pos:end="13:44"><name pos:start="13:5" pos:end="13:6">fd</name> <operator pos:start="13:8" pos:end="13:8">=</operator> <call pos:start="13:10" pos:end="13:44"><name pos:start="13:10" pos:end="13:28">qemu_opt_get_number</name><argument_list pos:start="13:29" pos:end="13:44">(<argument pos:start="13:30" pos:end="13:33"><expr pos:start="13:30" pos:end="13:33"><name pos:start="13:30" pos:end="13:33">opts</name></expr></argument>, <argument pos:start="13:36" pos:end="13:39"><expr pos:start="13:36" pos:end="13:39"><literal type="string" pos:start="13:36" pos:end="13:39">"fd"</literal></expr></argument>, <argument pos:start="13:42" pos:end="13:43"><expr pos:start="13:42" pos:end="13:43"><operator pos:start="13:42" pos:end="13:42">-</operator><literal type="number" pos:start="13:43" pos:end="13:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:52"><expr pos:start="15:5" pos:end="15:51"><name pos:start="15:5" pos:end="15:12">fdset_id</name> <operator pos:start="15:14" pos:end="15:14">=</operator> <call pos:start="15:16" pos:end="15:51"><name pos:start="15:16" pos:end="15:34">qemu_opt_get_number</name><argument_list pos:start="15:35" pos:end="15:51">(<argument pos:start="15:36" pos:end="15:39"><expr pos:start="15:36" pos:end="15:39"><name pos:start="15:36" pos:end="15:39">opts</name></expr></argument>, <argument pos:start="15:42" pos:end="15:46"><expr pos:start="15:42" pos:end="15:46"><literal type="string" pos:start="15:42" pos:end="15:46">"set"</literal></expr></argument>, <argument pos:start="15:49" pos:end="15:50"><expr pos:start="15:49" pos:end="15:50"><operator pos:start="15:49" pos:end="15:49">-</operator><literal type="number" pos:start="15:50" pos:end="15:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:45"><expr pos:start="17:5" pos:end="17:44"><name pos:start="17:5" pos:end="17:13">fd_opaque</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <call pos:start="17:17" pos:end="17:44"><name pos:start="17:17" pos:end="17:28">qemu_opt_get</name><argument_list pos:start="17:29" pos:end="17:44">(<argument pos:start="17:30" pos:end="17:33"><expr pos:start="17:30" pos:end="17:33"><name pos:start="17:30" pos:end="17:33">opts</name></expr></argument>, <argument pos:start="17:36" pos:end="17:43"><expr pos:start="17:36" pos:end="17:43"><literal type="string" pos:start="17:36" pos:end="17:43">"opaque"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:15">(<expr pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:10">fd</name> <operator pos:start="21:12" pos:end="21:12">&lt;</operator> <literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr>)</condition> <block pos:start="21:17" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:18">

        <expr_stmt pos:start="23:9" pos:end="25:72"><expr pos:start="23:9" pos:end="25:71"><call pos:start="23:9" pos:end="25:71"><name pos:start="23:9" pos:end="23:21">qerror_report</name><argument_list pos:start="23:22" pos:end="25:71">(<argument pos:start="23:23" pos:end="23:47"><expr pos:start="23:23" pos:end="23:47"><name pos:start="23:23" pos:end="23:47">ERROR_CLASS_GENERIC_ERROR</name></expr></argument>,

                      <argument pos:start="25:23" pos:end="25:70"><expr pos:start="25:23" pos:end="25:70"><literal type="string" pos:start="25:23" pos:end="25:70">"fd option is required and must be non-negative"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="41:5">if <condition pos:start="33:8" pos:end="33:28">(<expr pos:start="33:9" pos:end="33:27"><name pos:start="33:9" pos:end="33:10">fd</name> <operator pos:start="33:12" pos:end="33:13">&lt;=</operator> <name pos:start="33:15" pos:end="33:27">STDERR_FILENO</name></expr>)</condition> <block pos:start="33:30" pos:end="41:5">{<block_content pos:start="35:9" pos:end="39:18">

        <expr_stmt pos:start="35:9" pos:end="37:60"><expr pos:start="35:9" pos:end="37:59"><call pos:start="35:9" pos:end="37:59"><name pos:start="35:9" pos:end="35:21">qerror_report</name><argument_list pos:start="35:22" pos:end="37:59">(<argument pos:start="35:23" pos:end="35:47"><expr pos:start="35:23" pos:end="35:47"><name pos:start="35:23" pos:end="35:47">ERROR_CLASS_GENERIC_ERROR</name></expr></argument>,

                      <argument pos:start="37:23" pos:end="37:58"><expr pos:start="37:23" pos:end="37:58"><literal type="string" pos:start="37:23" pos:end="37:58">"fd cannot be a standard I/O stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="51:7">/*

     * All fds inherited across exec() necessarily have FD_CLOEXEC

     * clear, while qemu sets FD_CLOEXEC on all other fds used internally.

     */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:31"><expr pos:start="53:5" pos:end="53:30"><name pos:start="53:5" pos:end="53:9">flags</name> <operator pos:start="53:11" pos:end="53:11">=</operator> <call pos:start="53:13" pos:end="53:30"><name pos:start="53:13" pos:end="53:17">fcntl</name><argument_list pos:start="53:18" pos:end="53:30">(<argument pos:start="53:19" pos:end="53:20"><expr pos:start="53:19" pos:end="53:20"><name pos:start="53:19" pos:end="53:20">fd</name></expr></argument>, <argument pos:start="53:23" pos:end="53:29"><expr pos:start="53:23" pos:end="53:29"><name pos:start="53:23" pos:end="53:29">F_GETFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:44">(<expr pos:start="55:9" pos:end="55:43"><name pos:start="55:9" pos:end="55:13">flags</name> <operator pos:start="55:15" pos:end="55:16">==</operator> <operator pos:start="55:18" pos:end="55:18">-</operator><literal type="number" pos:start="55:19" pos:end="55:19">1</literal> <operator pos:start="55:21" pos:end="55:22">||</operator> <operator pos:start="55:24" pos:end="55:24">(</operator><name pos:start="55:25" pos:end="55:29">flags</name> <operator pos:start="55:31" pos:end="55:31">&amp;</operator> <name pos:start="55:33" pos:end="55:42">FD_CLOEXEC</name><operator pos:start="55:43" pos:end="55:43">)</operator></expr>)</condition> <block pos:start="55:46" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:18">

        <expr_stmt pos:start="57:9" pos:end="59:59"><expr pos:start="57:9" pos:end="59:58"><call pos:start="57:9" pos:end="59:58"><name pos:start="57:9" pos:end="57:21">qerror_report</name><argument_list pos:start="57:22" pos:end="59:58">(<argument pos:start="57:23" pos:end="57:47"><expr pos:start="57:23" pos:end="57:47"><name pos:start="57:23" pos:end="57:47">ERROR_CLASS_GENERIC_ERROR</name></expr></argument>,

                      <argument pos:start="59:23" pos:end="59:57"><expr pos:start="59:23" pos:end="59:57"><literal type="string" pos:start="59:23" pos:end="59:57">"fd is not valid or already in use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:18">return <expr pos:start="61:16" pos:end="61:17"><operator pos:start="61:16" pos:end="61:16">-</operator><literal type="number" pos:start="61:17" pos:end="61:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="80:0"><if pos:start="67:5" pos:end="80:0">if <condition pos:start="67:8" pos:end="67:21">(<expr pos:start="67:9" pos:end="67:20"><name pos:start="67:9" pos:end="67:16">fdset_id</name> <operator pos:start="67:18" pos:end="67:18">&lt;</operator> <literal type="number" pos:start="67:20" pos:end="67:20">0</literal></expr>)</condition> <block pos:start="67:23" pos:end="80:0">{<block_content pos:start="69:9" pos:end="73:18">

        <expr_stmt pos:start="69:9" pos:end="71:73"><expr pos:start="69:9" pos:end="71:72"><call pos:start="69:9" pos:end="71:72"><name pos:start="69:9" pos:end="69:21">qerror_report</name><argument_list pos:start="69:22" pos:end="71:72">(<argument pos:start="69:23" pos:end="69:47"><expr pos:start="69:23" pos:end="69:47"><name pos:start="69:23" pos:end="69:47">ERROR_CLASS_GENERIC_ERROR</name></expr></argument>,

                      <argument pos:start="71:23" pos:end="71:71"><expr pos:start="71:23" pos:end="71:71"><literal type="string" pos:start="71:23" pos:end="71:71">"set option is required and must be non-negative"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:18">return <expr pos:start="73:16" pos:end="73:17"><operator pos:start="73:16" pos:end="73:16">-</operator><literal type="number" pos:start="73:17" pos:end="73:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="79:1" pos:end="79:22">#<cpp:directive pos:start="79:2" pos:end="79:6">ifdef</cpp:directive> <name pos:start="79:8" pos:end="79:22">F_DUPFD_CLOEXEC</name></cpp:ifdef>

    <expr_stmt pos:start="81:5" pos:end="84:0"><expr pos:start="81:5" pos:end="81:41"><name pos:start="81:5" pos:end="81:9">dupfd</name> <operator pos:start="81:11" pos:end="81:11">=</operator> <call pos:start="81:13" pos:end="81:41"><name pos:start="81:13" pos:end="81:17">fcntl</name><argument_list pos:start="81:18" pos:end="81:41">(<argument pos:start="81:19" pos:end="81:20"><expr pos:start="81:19" pos:end="81:20"><name pos:start="81:19" pos:end="81:20">fd</name></expr></argument>, <argument pos:start="81:23" pos:end="81:37"><expr pos:start="81:23" pos:end="81:37"><name pos:start="81:23" pos:end="81:37">F_DUPFD_CLOEXEC</name></expr></argument>, <argument pos:start="81:40" pos:end="81:40"><expr pos:start="81:40" pos:end="81:40"><literal type="number" pos:start="81:40" pos:end="81:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="83:1" pos:end="83:5">#<cpp:directive pos:start="83:2" pos:end="83:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="85:5" pos:end="85:20"><expr pos:start="85:5" pos:end="85:19"><name pos:start="85:5" pos:end="85:9">dupfd</name> <operator pos:start="85:11" pos:end="85:11">=</operator> <call pos:start="85:13" pos:end="85:19"><name pos:start="85:13" pos:end="85:15">dup</name><argument_list pos:start="85:16" pos:end="85:19">(<argument pos:start="85:17" pos:end="85:18"><expr pos:start="85:17" pos:end="85:18"><name pos:start="85:17" pos:end="85:18">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="94:0"><if pos:start="87:5" pos:end="94:0">if <condition pos:start="87:8" pos:end="87:20">(<expr pos:start="87:9" pos:end="87:19"><name pos:start="87:9" pos:end="87:13">dupfd</name> <operator pos:start="87:15" pos:end="87:16">!=</operator> <operator pos:start="87:18" pos:end="87:18">-</operator><literal type="number" pos:start="87:19" pos:end="87:19">1</literal></expr>)</condition> <block pos:start="87:22" pos:end="94:0">{<block_content pos:start="89:9" pos:end="89:32">

        <expr_stmt pos:start="89:9" pos:end="89:32"><expr pos:start="89:9" pos:end="89:31"><call pos:start="89:9" pos:end="89:31"><name pos:start="89:9" pos:end="89:24">qemu_set_cloexec</name><argument_list pos:start="89:25" pos:end="89:31">(<argument pos:start="89:26" pos:end="89:30"><expr pos:start="89:26" pos:end="89:30"><name pos:start="89:26" pos:end="89:30">dupfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="93:1" pos:end="93:6">#<cpp:directive pos:start="93:2" pos:end="93:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="95:5" pos:end="103:5"><if pos:start="95:5" pos:end="103:5">if <condition pos:start="95:8" pos:end="95:20">(<expr pos:start="95:9" pos:end="95:19"><name pos:start="95:9" pos:end="95:13">dupfd</name> <operator pos:start="95:15" pos:end="95:16">==</operator> <operator pos:start="95:18" pos:end="95:18">-</operator><literal type="number" pos:start="95:19" pos:end="95:19">1</literal></expr>)</condition> <block pos:start="95:22" pos:end="103:5">{<block_content pos:start="97:9" pos:end="101:18">

        <expr_stmt pos:start="97:9" pos:end="99:67"><expr pos:start="97:9" pos:end="99:66"><call pos:start="97:9" pos:end="99:66"><name pos:start="97:9" pos:end="97:21">qerror_report</name><argument_list pos:start="97:22" pos:end="99:66">(<argument pos:start="97:23" pos:end="97:47"><expr pos:start="97:23" pos:end="97:47"><name pos:start="97:23" pos:end="97:47">ERROR_CLASS_GENERIC_ERROR</name></expr></argument>,

                      <argument pos:start="99:23" pos:end="99:48"><expr pos:start="99:23" pos:end="99:48"><literal type="string" pos:start="99:23" pos:end="99:48">"Error duplicating fd: %s"</literal></expr></argument>, <argument pos:start="99:51" pos:end="99:65"><expr pos:start="99:51" pos:end="99:65"><call pos:start="99:51" pos:end="99:65"><name pos:start="99:51" pos:end="99:58">strerror</name><argument_list pos:start="99:59" pos:end="99:65">(<argument pos:start="99:60" pos:end="99:64"><expr pos:start="99:60" pos:end="99:64"><name pos:start="99:60" pos:end="99:64">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:18">return <expr pos:start="101:16" pos:end="101:17"><operator pos:start="101:16" pos:end="101:16">-</operator><literal type="number" pos:start="101:17" pos:end="101:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:79">/* add the duplicate fd, and optionally the opaque string, to the fd set */</comment>

    <expr_stmt pos:start="109:5" pos:end="111:42"><expr pos:start="109:5" pos:end="111:41"><call pos:start="109:5" pos:end="111:41"><name pos:start="109:5" pos:end="109:24">monitor_fdset_add_fd</name><argument_list pos:start="109:25" pos:end="111:41">(<argument pos:start="109:26" pos:end="109:30"><expr pos:start="109:26" pos:end="109:30"><name pos:start="109:26" pos:end="109:30">dupfd</name></expr></argument>, <argument pos:start="109:33" pos:end="109:36"><expr pos:start="109:33" pos:end="109:36"><name pos:start="109:33" pos:end="109:36">true</name></expr></argument>, <argument pos:start="109:39" pos:end="109:46"><expr pos:start="109:39" pos:end="109:46"><name pos:start="109:39" pos:end="109:46">fdset_id</name></expr></argument>, <argument pos:start="109:49" pos:end="109:72"><expr pos:start="109:49" pos:end="109:72"><ternary pos:start="109:49" pos:end="109:72"><condition pos:start="109:49" pos:end="109:59"><expr pos:start="109:49" pos:end="109:57"><name pos:start="109:49" pos:end="109:57">fd_opaque</name></expr> ?</condition><then pos:start="109:61" pos:end="109:64"> <expr pos:start="109:61" pos:end="109:64"><name pos:start="109:61" pos:end="109:64">true</name></expr> </then><else pos:start="109:66" pos:end="109:72">: <expr pos:start="109:68" pos:end="109:72"><name pos:start="109:68" pos:end="109:72">false</name></expr></else></ternary></expr></argument>,

                         <argument pos:start="111:26" pos:end="111:34"><expr pos:start="111:26" pos:end="111:34"><name pos:start="111:26" pos:end="111:34">fd_opaque</name></expr></argument>, <argument pos:start="111:37" pos:end="111:40"><expr pos:start="111:37" pos:end="111:40"><name pos:start="111:37" pos:end="111:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="115:5" pos:end="115:13">return <expr pos:start="115:12" pos:end="115:12"><literal type="number" pos:start="115:12" pos:end="115:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
