<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6380.c" pos:tabs="8"><function pos:start="1:1" pos:end="859:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">img_convert</name><parameter_list pos:start="1:23" pos:end="1:45">(<parameter pos:start="1:24" pos:end="1:31"><decl pos:start="1:24" pos:end="1:31"><type pos:start="1:24" pos:end="1:31"><name pos:start="1:24" pos:end="1:26">int</name></type> <name pos:start="1:28" pos:end="1:31">argc</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:44"><decl pos:start="1:34" pos:end="1:44"><type pos:start="1:34" pos:end="1:44"><name pos:start="1:34" pos:end="1:37">char</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier><modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:44">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="859:1">{<block_content pos:start="5:5" pos:end="857:13">

    <decl_stmt pos:start="5:5" pos:end="5:79"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">c</name></decl>, <decl pos:start="5:12" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">ret</name> <init pos:start="5:16" pos:end="5:18">= <expr pos:start="5:18" pos:end="5:18"><literal type="number" pos:start="5:18" pos:end="5:18">0</literal></expr></init></decl>, <decl pos:start="5:21" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:21" pos:end="5:21">n</name></decl>, <decl pos:start="5:24" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:24" pos:end="5:25">n1</name></decl>, <decl pos:start="5:28" pos:end="5:31"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:28" pos:end="5:31">bs_n</name></decl>, <decl pos:start="5:34" pos:end="5:37"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:34" pos:end="5:37">bs_i</name></decl>, <decl pos:start="5:40" pos:end="5:47"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:40" pos:end="5:47">compress</name></decl>, <decl pos:start="5:50" pos:end="5:61"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:50" pos:end="5:61">cluster_size</name></decl>, <decl pos:start="5:64" pos:end="5:78"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:64" pos:end="5:78">cluster_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">progress</name> <init pos:start="7:18" pos:end="7:20">= <expr pos:start="7:20" pos:end="7:20"><literal type="number" pos:start="7:20" pos:end="7:20">0</literal></expr></init></decl>, <decl pos:start="7:23" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:23" pos:end="7:27">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:67"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">fmt</name></decl>, <decl pos:start="9:22" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:29">out_fmt</name></decl>, <decl pos:start="9:32" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:32" pos:end="9:32">*</modifier></type><name pos:start="9:33" pos:end="9:37">cache</name></decl>, <decl pos:start="9:40" pos:end="9:51"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:40" pos:end="9:40">*</modifier></type><name pos:start="9:41" pos:end="9:51">out_baseimg</name></decl>, <decl pos:start="9:54" pos:end="9:66"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:54" pos:end="9:54">*</modifier></type><name pos:start="9:55" pos:end="9:66">out_filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">BlockDriver</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">drv</name></decl>, <decl pos:start="11:23" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:17"><modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:32">proto_drv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:49"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:20">BlockDriverState</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier><modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:25">bs</name> <init pos:start="13:27" pos:end="13:32">= <expr pos:start="13:29" pos:end="13:32"><name pos:start="13:29" pos:end="13:32">NULL</name></expr></init></decl>, <decl pos:start="13:35" pos:end="13:48"><type ref="prev" pos:start="13:5" pos:end="13:23"><modifier pos:start="13:35" pos:end="13:35">*</modifier></type><name pos:start="13:36" pos:end="13:41">out_bs</name> <init pos:start="13:43" pos:end="13:48">= <expr pos:start="13:45" pos:end="13:48"><name pos:start="13:45" pos:end="13:48">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:61"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:25">total_sectors</name></decl>, <decl pos:start="15:28" pos:end="15:37"><type ref="prev" pos:start="15:5" pos:end="15:11"/><name pos:start="15:28" pos:end="15:37">nb_sectors</name></decl>, <decl pos:start="15:40" pos:end="15:49"><type ref="prev" pos:start="15:5" pos:end="15:11"/><name pos:start="15:40" pos:end="15:49">sector_num</name></decl>, <decl pos:start="15:52" pos:end="15:60"><type ref="prev" pos:start="15:5" pos:end="15:11"/><name pos:start="15:52" pos:end="15:60">bs_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:23">bs_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type> <name pos:start="19:15" pos:end="19:17">buf</name> <init pos:start="19:19" pos:end="19:24">= <expr pos:start="19:21" pos:end="19:24"><name pos:start="19:21" pos:end="19:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:19"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:17">uint8_t</name> <modifier pos:start="21:19" pos:end="21:19">*</modifier></type><name pos:start="21:20" pos:end="21:23">buf1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:19">BlockDriverInfo</name></type> <name pos:start="23:21" pos:end="23:23">bdi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:62"><decl pos:start="25:5" pos:end="25:37"><type pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:23">QEMUOptionParameter</name> <modifier pos:start="25:25" pos:end="25:25">*</modifier></type><name pos:start="25:26" pos:end="25:30">param</name> <init pos:start="25:32" pos:end="25:37">= <expr pos:start="25:34" pos:end="25:37"><name pos:start="25:34" pos:end="25:37">NULL</name></expr></init></decl>, <decl pos:start="25:40" pos:end="25:61"><type ref="prev" pos:start="25:5" pos:end="25:25"><modifier pos:start="25:40" pos:end="25:40">*</modifier></type><name pos:start="25:41" pos:end="25:54">create_options</name> <init pos:start="25:56" pos:end="25:61">= <expr pos:start="25:58" pos:end="25:61"><name pos:start="25:58" pos:end="25:61">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:43"><decl pos:start="27:5" pos:end="27:42"><type pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:23">QEMUOptionParameter</name> <modifier pos:start="27:25" pos:end="27:25">*</modifier></type><name pos:start="27:26" pos:end="27:42">out_baseimg_param</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:25"><decl pos:start="29:5" pos:end="29:24"><type pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:8">char</name> <modifier pos:start="29:10" pos:end="29:10">*</modifier></type><name pos:start="29:11" pos:end="29:17">options</name> <init pos:start="29:19" pos:end="29:24">= <expr pos:start="29:21" pos:end="29:24"><name pos:start="29:21" pos:end="29:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:37"><decl pos:start="31:5" pos:end="31:36"><type pos:start="31:5" pos:end="31:16"><specifier pos:start="31:5" pos:end="31:9">const</specifier> <name pos:start="31:11" pos:end="31:14">char</name> <modifier pos:start="31:16" pos:end="31:16">*</modifier></type><name pos:start="31:17" pos:end="31:29">snapshot_name</name> <init pos:start="31:31" pos:end="31:36">= <expr pos:start="31:33" pos:end="31:36"><name pos:start="31:33" pos:end="31:36">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:25"><decl pos:start="33:5" pos:end="33:24"><type pos:start="33:5" pos:end="33:9"><name pos:start="33:5" pos:end="33:9">float</name></type> <name pos:start="33:11" pos:end="33:24">local_progress</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:23"><decl pos:start="35:5" pos:end="35:22"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:18">min_sparse</name> <init pos:start="35:20" pos:end="35:22">= <expr pos:start="35:22" pos:end="35:22"><literal type="number" pos:start="35:22" pos:end="35:22">8</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="35:25" pos:end="35:76">/* Need at least 4k of zeros for sparse detection */</comment>



    <expr_stmt pos:start="39:5" pos:end="39:15"><expr pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:7">fmt</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <name pos:start="39:11" pos:end="39:14">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:20"><expr pos:start="41:5" pos:end="41:19"><name pos:start="41:5" pos:end="41:11">out_fmt</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <literal type="string" pos:start="41:15" pos:end="41:19">"raw"</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:21"><expr pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:9">cache</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <literal type="string" pos:start="43:13" pos:end="43:20">"unsafe"</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:23"><expr pos:start="45:5" pos:end="45:22"><name pos:start="45:5" pos:end="45:15">out_baseimg</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <name pos:start="45:19" pos:end="45:22">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:17"><expr pos:start="47:5" pos:end="47:16"><name pos:start="47:5" pos:end="47:12">compress</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>;</expr_stmt>

    <for pos:start="49:5" pos:end="161:5">for<control pos:start="49:8" pos:end="49:11">(<init pos:start="49:9" pos:end="49:9">;</init><condition pos:start="49:10" pos:end="49:10">;</condition><incr/>)</control> <block pos:start="49:13" pos:end="161:5">{<block_content pos:start="51:9" pos:end="159:9">

        <expr_stmt pos:start="51:9" pos:end="51:54"><expr pos:start="51:9" pos:end="51:53"><name pos:start="51:9" pos:end="51:9">c</name> <operator pos:start="51:11" pos:end="51:11">=</operator> <call pos:start="51:13" pos:end="51:53"><name pos:start="51:13" pos:end="51:18">getopt</name><argument_list pos:start="51:19" pos:end="51:53">(<argument pos:start="51:20" pos:end="51:23"><expr pos:start="51:20" pos:end="51:23"><name pos:start="51:20" pos:end="51:23">argc</name></expr></argument>, <argument pos:start="51:26" pos:end="51:29"><expr pos:start="51:26" pos:end="51:29"><name pos:start="51:26" pos:end="51:29">argv</name></expr></argument>, <argument pos:start="51:32" pos:end="51:52"><expr pos:start="51:32" pos:end="51:52"><literal type="string" pos:start="51:32" pos:end="51:52">"f:O:B:s:hce6o:pS:t:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:20">(<expr pos:start="53:13" pos:end="53:19"><name pos:start="53:13" pos:end="53:13">c</name> <operator pos:start="53:15" pos:end="53:16">==</operator> <operator pos:start="53:18" pos:end="53:18">-</operator><literal type="number" pos:start="53:19" pos:end="53:19">1</literal></expr>)</condition> <block pos:start="53:22" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:18">

            <break pos:start="55:13" pos:end="55:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="59:9" pos:end="159:9">switch<condition pos:start="59:15" pos:end="59:17">(<expr pos:start="59:16" pos:end="59:16"><name pos:start="59:16" pos:end="59:16">c</name></expr>)</condition> <block pos:start="59:19" pos:end="159:9">{<block_content pos:start="61:9" pos:end="157:18">

        <case pos:start="61:9" pos:end="61:17">case <expr pos:start="61:14" pos:end="61:16"><literal type="char" pos:start="61:14" pos:end="61:16">'?'</literal></expr>:</case>

        <case pos:start="63:9" pos:end="63:17">case <expr pos:start="63:14" pos:end="63:16"><literal type="char" pos:start="63:14" pos:end="63:16">'h'</literal></expr>:</case>

            <expr_stmt pos:start="65:13" pos:end="65:19"><expr pos:start="65:13" pos:end="65:18"><call pos:start="65:13" pos:end="65:18"><name pos:start="65:13" pos:end="65:16">help</name><argument_list pos:start="65:17" pos:end="65:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        <case pos:start="69:9" pos:end="69:17">case <expr pos:start="69:14" pos:end="69:16"><literal type="char" pos:start="69:14" pos:end="69:16">'f'</literal></expr>:</case>

            <expr_stmt pos:start="71:13" pos:end="71:25"><expr pos:start="71:13" pos:end="71:24"><name pos:start="71:13" pos:end="71:15">fmt</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <name pos:start="71:19" pos:end="71:24">optarg</name></expr>;</expr_stmt>

            <break pos:start="73:13" pos:end="73:18">break;</break>

        <case pos:start="75:9" pos:end="75:17">case <expr pos:start="75:14" pos:end="75:16"><literal type="char" pos:start="75:14" pos:end="75:16">'O'</literal></expr>:</case>

            <expr_stmt pos:start="77:13" pos:end="77:29"><expr pos:start="77:13" pos:end="77:28"><name pos:start="77:13" pos:end="77:19">out_fmt</name> <operator pos:start="77:21" pos:end="77:21">=</operator> <name pos:start="77:23" pos:end="77:28">optarg</name></expr>;</expr_stmt>

            <break pos:start="79:13" pos:end="79:18">break;</break>

        <case pos:start="81:9" pos:end="81:17">case <expr pos:start="81:14" pos:end="81:16"><literal type="char" pos:start="81:14" pos:end="81:16">'B'</literal></expr>:</case>

            <expr_stmt pos:start="83:13" pos:end="83:33"><expr pos:start="83:13" pos:end="83:32"><name pos:start="83:13" pos:end="83:23">out_baseimg</name> <operator pos:start="83:25" pos:end="83:25">=</operator> <name pos:start="83:27" pos:end="83:32">optarg</name></expr>;</expr_stmt>

            <break pos:start="85:13" pos:end="85:18">break;</break>

        <case pos:start="87:9" pos:end="87:17">case <expr pos:start="87:14" pos:end="87:16"><literal type="char" pos:start="87:14" pos:end="87:16">'c'</literal></expr>:</case>

            <expr_stmt pos:start="89:13" pos:end="89:25"><expr pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:20">compress</name> <operator pos:start="89:22" pos:end="89:22">=</operator> <literal type="number" pos:start="89:24" pos:end="89:24">1</literal></expr>;</expr_stmt>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        <case pos:start="93:9" pos:end="93:17">case <expr pos:start="93:14" pos:end="93:16"><literal type="char" pos:start="93:14" pos:end="93:16">'e'</literal></expr>:</case>

            <expr_stmt pos:start="95:13" pos:end="97:43"><expr pos:start="95:13" pos:end="97:42"><call pos:start="95:13" pos:end="97:42"><name pos:start="95:13" pos:end="95:24">error_report</name><argument_list pos:start="95:25" pos:end="97:42">(<argument pos:start="95:26" pos:end="97:41"><expr pos:start="95:26" pos:end="97:41"><literal type="string" pos:start="95:26" pos:end="95:68">"option -e is deprecated, please use \'-o "</literal>

                  <literal type="string" pos:start="97:19" pos:end="97:41">"encryption\' instead!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="99:13" pos:end="99:21">return <expr pos:start="99:20" pos:end="99:20"><literal type="number" pos:start="99:20" pos:end="99:20">1</literal></expr>;</return>

        <case pos:start="101:9" pos:end="101:17">case <expr pos:start="101:14" pos:end="101:16"><literal type="char" pos:start="101:14" pos:end="101:16">'6'</literal></expr>:</case>

            <expr_stmt pos:start="103:13" pos:end="105:40"><expr pos:start="103:13" pos:end="105:39"><call pos:start="103:13" pos:end="105:39"><name pos:start="103:13" pos:end="103:24">error_report</name><argument_list pos:start="103:25" pos:end="105:39">(<argument pos:start="103:26" pos:end="105:38"><expr pos:start="103:26" pos:end="105:38"><literal type="string" pos:start="103:26" pos:end="103:68">"option -6 is deprecated, please use \'-o "</literal>

                  <literal type="string" pos:start="105:19" pos:end="105:38">"compat6\' instead!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="107:13" pos:end="107:21">return <expr pos:start="107:20" pos:end="107:20"><literal type="number" pos:start="107:20" pos:end="107:20">1</literal></expr>;</return>

        <case pos:start="109:9" pos:end="109:17">case <expr pos:start="109:14" pos:end="109:16"><literal type="char" pos:start="109:14" pos:end="109:16">'o'</literal></expr>:</case>

            <expr_stmt pos:start="111:13" pos:end="111:29"><expr pos:start="111:13" pos:end="111:28"><name pos:start="111:13" pos:end="111:19">options</name> <operator pos:start="111:21" pos:end="111:21">=</operator> <name pos:start="111:23" pos:end="111:28">optarg</name></expr>;</expr_stmt>

            <break pos:start="113:13" pos:end="113:18">break;</break>

        <case pos:start="115:9" pos:end="115:17">case <expr pos:start="115:14" pos:end="115:16"><literal type="char" pos:start="115:14" pos:end="115:16">'s'</literal></expr>:</case>

            <expr_stmt pos:start="117:13" pos:end="117:35"><expr pos:start="117:13" pos:end="117:34"><name pos:start="117:13" pos:end="117:25">snapshot_name</name> <operator pos:start="117:27" pos:end="117:27">=</operator> <name pos:start="117:29" pos:end="117:34">optarg</name></expr>;</expr_stmt>

            <break pos:start="119:13" pos:end="119:18">break;</break>

        <case pos:start="121:9" pos:end="121:17">case <expr pos:start="121:14" pos:end="121:16"><literal type="char" pos:start="121:14" pos:end="121:16">'S'</literal></expr>:</case>

        <block pos:start="123:9" pos:end="145:9">{<block_content pos:start="125:13" pos:end="143:18">

            <decl_stmt pos:start="125:13" pos:end="125:25"><decl pos:start="125:13" pos:end="125:24"><type pos:start="125:13" pos:end="125:19"><name pos:start="125:13" pos:end="125:19">int64_t</name></type> <name pos:start="125:21" pos:end="125:24">sval</name></decl>;</decl_stmt>

            <decl_stmt pos:start="127:13" pos:end="127:22"><decl pos:start="127:13" pos:end="127:21"><type pos:start="127:13" pos:end="127:18"><name pos:start="127:13" pos:end="127:16">char</name> <modifier pos:start="127:18" pos:end="127:18">*</modifier></type><name pos:start="127:19" pos:end="127:21">end</name></decl>;</decl_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:69"><expr pos:start="129:13" pos:end="129:68"><name pos:start="129:13" pos:end="129:16">sval</name> <operator pos:start="129:18" pos:end="129:18">=</operator> <call pos:start="129:20" pos:end="129:68"><name pos:start="129:20" pos:end="129:33">strtosz_suffix</name><argument_list pos:start="129:34" pos:end="129:68">(<argument pos:start="129:35" pos:end="129:40"><expr pos:start="129:35" pos:end="129:40"><name pos:start="129:35" pos:end="129:40">optarg</name></expr></argument>, <argument pos:start="129:43" pos:end="129:46"><expr pos:start="129:43" pos:end="129:46"><operator pos:start="129:43" pos:end="129:43">&amp;</operator><name pos:start="129:44" pos:end="129:46">end</name></expr></argument>, <argument pos:start="129:49" pos:end="129:67"><expr pos:start="129:49" pos:end="129:67"><name pos:start="129:49" pos:end="129:67">STRTOSZ_DEFSUFFIX_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="131:13" pos:end="137:13"><if pos:start="131:13" pos:end="137:13">if <condition pos:start="131:16" pos:end="131:33">(<expr pos:start="131:17" pos:end="131:32"><name pos:start="131:17" pos:end="131:20">sval</name> <operator pos:start="131:22" pos:end="131:22">&lt;</operator> <literal type="number" pos:start="131:24" pos:end="131:24">0</literal> <operator pos:start="131:26" pos:end="131:27">||</operator> <operator pos:start="131:29" pos:end="131:29">*</operator><name pos:start="131:30" pos:end="131:32">end</name></expr>)</condition> <block pos:start="131:35" pos:end="137:13">{<block_content pos:start="133:17" pos:end="135:25">

                <expr_stmt pos:start="133:17" pos:end="133:93"><expr pos:start="133:17" pos:end="133:92"><call pos:start="133:17" pos:end="133:92"><name pos:start="133:17" pos:end="133:28">error_report</name><argument_list pos:start="133:29" pos:end="133:92">(<argument pos:start="133:30" pos:end="133:91"><expr pos:start="133:30" pos:end="133:91"><literal type="string" pos:start="133:30" pos:end="133:91">"Invalid minimum zero buffer size for sparse output specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="135:17" pos:end="135:25">return <expr pos:start="135:24" pos:end="135:24"><literal type="number" pos:start="135:24" pos:end="135:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="141:13" pos:end="141:49"><expr pos:start="141:13" pos:end="141:48"><name pos:start="141:13" pos:end="141:22">min_sparse</name> <operator pos:start="141:24" pos:end="141:24">=</operator> <name pos:start="141:26" pos:end="141:29">sval</name> <operator pos:start="141:31" pos:end="141:31">/</operator> <name pos:start="141:33" pos:end="141:48">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

            <break pos:start="143:13" pos:end="143:18">break;</break>

        </block_content>}</block>

        <case pos:start="147:9" pos:end="147:17">case <expr pos:start="147:14" pos:end="147:16"><literal type="char" pos:start="147:14" pos:end="147:16">'p'</literal></expr>:</case>

            <expr_stmt pos:start="149:13" pos:end="149:25"><expr pos:start="149:13" pos:end="149:24"><name pos:start="149:13" pos:end="149:20">progress</name> <operator pos:start="149:22" pos:end="149:22">=</operator> <literal type="number" pos:start="149:24" pos:end="149:24">1</literal></expr>;</expr_stmt>

            <break pos:start="151:13" pos:end="151:18">break;</break>

        <case pos:start="153:9" pos:end="153:17">case <expr pos:start="153:14" pos:end="153:16"><literal type="char" pos:start="153:14" pos:end="153:16">'t'</literal></expr>:</case>

            <expr_stmt pos:start="155:13" pos:end="155:27"><expr pos:start="155:13" pos:end="155:26"><name pos:start="155:13" pos:end="155:17">cache</name> <operator pos:start="155:19" pos:end="155:19">=</operator> <name pos:start="155:21" pos:end="155:26">optarg</name></expr>;</expr_stmt>

            <break pos:start="157:13" pos:end="157:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <expr_stmt pos:start="165:5" pos:end="165:29"><expr pos:start="165:5" pos:end="165:28"><name pos:start="165:5" pos:end="165:8">bs_n</name> <operator pos:start="165:10" pos:end="165:10">=</operator> <name pos:start="165:12" pos:end="165:15">argc</name> <operator pos:start="165:17" pos:end="165:17">-</operator> <name pos:start="165:19" pos:end="165:24">optind</name> <operator pos:start="165:26" pos:end="165:26">-</operator> <literal type="number" pos:start="165:28" pos:end="165:28">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="171:5"><if pos:start="167:5" pos:end="171:5">if <condition pos:start="167:8" pos:end="167:17">(<expr pos:start="167:9" pos:end="167:16"><name pos:start="167:9" pos:end="167:12">bs_n</name> <operator pos:start="167:14" pos:end="167:14">&lt;</operator> <literal type="number" pos:start="167:16" pos:end="167:16">1</literal></expr>)</condition> <block pos:start="167:19" pos:end="171:5">{<block_content pos:start="169:9" pos:end="169:15">

        <expr_stmt pos:start="169:9" pos:end="169:15"><expr pos:start="169:9" pos:end="169:14"><call pos:start="169:9" pos:end="169:14"><name pos:start="169:9" pos:end="169:12">help</name><argument_list pos:start="169:13" pos:end="169:14">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:34"><expr pos:start="175:5" pos:end="175:33"><name pos:start="175:5" pos:end="175:16">out_filename</name> <operator pos:start="175:18" pos:end="175:18">=</operator> <name pos:start="175:20" pos:end="175:33"><name pos:start="175:20" pos:end="175:23">argv</name><index pos:start="175:24" pos:end="175:33">[<expr pos:start="175:25" pos:end="175:32"><name pos:start="175:25" pos:end="175:28">argc</name> <operator pos:start="175:30" pos:end="175:30">-</operator> <literal type="number" pos:start="175:32" pos:end="175:32">1</literal></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="179:5" pos:end="179:36">/* Initialize before goto out */</comment>

    <expr_stmt pos:start="181:5" pos:end="181:38"><expr pos:start="181:5" pos:end="181:37"><call pos:start="181:5" pos:end="181:37"><name pos:start="181:5" pos:end="181:22">qemu_progress_init</name><argument_list pos:start="181:23" pos:end="181:37">(<argument pos:start="181:24" pos:end="181:31"><expr pos:start="181:24" pos:end="181:31"><name pos:start="181:24" pos:end="181:31">progress</name></expr></argument>, <argument pos:start="181:34" pos:end="181:36"><expr pos:start="181:34" pos:end="181:36"><literal type="number" pos:start="181:34" pos:end="181:36">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="185:5" pos:end="191:5"><if pos:start="185:5" pos:end="191:5">if <condition pos:start="185:8" pos:end="185:41">(<expr pos:start="185:9" pos:end="185:40"><name pos:start="185:9" pos:end="185:15">options</name> <operator pos:start="185:17" pos:end="185:18">&amp;&amp;</operator> <operator pos:start="185:20" pos:end="185:20">!</operator><call pos:start="185:21" pos:end="185:40"><name pos:start="185:21" pos:end="185:26">strcmp</name><argument_list pos:start="185:27" pos:end="185:40">(<argument pos:start="185:28" pos:end="185:34"><expr pos:start="185:28" pos:end="185:34"><name pos:start="185:28" pos:end="185:34">options</name></expr></argument>, <argument pos:start="185:37" pos:end="185:39"><expr pos:start="185:37" pos:end="185:39"><literal type="string" pos:start="185:37" pos:end="185:39">"?"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="185:43" pos:end="191:5">{<block_content pos:start="187:9" pos:end="189:17">

        <expr_stmt pos:start="187:9" pos:end="187:61"><expr pos:start="187:9" pos:end="187:60"><name pos:start="187:9" pos:end="187:11">ret</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <call pos:start="187:15" pos:end="187:60"><name pos:start="187:15" pos:end="187:37">print_block_option_help</name><argument_list pos:start="187:38" pos:end="187:60">(<argument pos:start="187:39" pos:end="187:50"><expr pos:start="187:39" pos:end="187:50"><name pos:start="187:39" pos:end="187:50">out_filename</name></expr></argument>, <argument pos:start="187:53" pos:end="187:59"><expr pos:start="187:53" pos:end="187:59"><name pos:start="187:53" pos:end="187:59">out_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="189:9" pos:end="189:17">goto <name pos:start="189:14" pos:end="189:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="195:5" pos:end="205:5"><if pos:start="195:5" pos:end="205:5">if <condition pos:start="195:8" pos:end="195:32">(<expr pos:start="195:9" pos:end="195:31"><name pos:start="195:9" pos:end="195:12">bs_n</name> <operator pos:start="195:14" pos:end="195:14">&gt;</operator> <literal type="number" pos:start="195:16" pos:end="195:16">1</literal> <operator pos:start="195:18" pos:end="195:19">&amp;&amp;</operator> <name pos:start="195:21" pos:end="195:31">out_baseimg</name></expr>)</condition> <block pos:start="195:34" pos:end="205:5">{<block_content pos:start="197:9" pos:end="203:17">

        <expr_stmt pos:start="197:9" pos:end="199:31"><expr pos:start="197:9" pos:end="199:30"><call pos:start="197:9" pos:end="199:30"><name pos:start="197:9" pos:end="197:20">error_report</name><argument_list pos:start="197:21" pos:end="199:30">(<argument pos:start="197:22" pos:end="199:29"><expr pos:start="197:22" pos:end="199:29"><literal type="string" pos:start="197:22" pos:end="197:75">"-B makes no sense when concatenating multiple input "</literal>

                     <literal type="string" pos:start="199:22" pos:end="199:29">"images"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:17"><expr pos:start="201:9" pos:end="201:16"><name pos:start="201:9" pos:end="201:11">ret</name> <operator pos:start="201:13" pos:end="201:13">=</operator> <operator pos:start="201:15" pos:end="201:15">-</operator><literal type="number" pos:start="201:16" pos:end="201:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="203:9" pos:end="203:17">goto <name pos:start="203:14" pos:end="203:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="209:5" pos:end="209:32"><expr pos:start="209:5" pos:end="209:31"><call pos:start="209:5" pos:end="209:31"><name pos:start="209:5" pos:end="209:23">qemu_progress_print</name><argument_list pos:start="209:24" pos:end="209:31">(<argument pos:start="209:25" pos:end="209:25"><expr pos:start="209:25" pos:end="209:25"><literal type="number" pos:start="209:25" pos:end="209:25">0</literal></expr></argument>, <argument pos:start="209:28" pos:end="209:30"><expr pos:start="209:28" pos:end="209:30"><literal type="number" pos:start="209:28" pos:end="209:30">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="213:5" pos:end="213:54"><expr pos:start="213:5" pos:end="213:53"><name pos:start="213:5" pos:end="213:6">bs</name> <operator pos:start="213:8" pos:end="213:8">=</operator> <call pos:start="213:10" pos:end="213:53"><name pos:start="213:10" pos:end="213:18">g_malloc0</name><argument_list pos:start="213:19" pos:end="213:53">(<argument pos:start="213:20" pos:end="213:52"><expr pos:start="213:20" pos:end="213:52"><name pos:start="213:20" pos:end="213:23">bs_n</name> <operator pos:start="213:25" pos:end="213:25">*</operator> <sizeof pos:start="213:27" pos:end="213:52">sizeof<argument_list pos:start="213:33" pos:end="213:52">(<argument pos:start="213:34" pos:end="213:51"><expr pos:start="213:34" pos:end="213:51"><name pos:start="213:34" pos:end="213:49">BlockDriverState</name> <operator pos:start="213:51" pos:end="213:51">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="217:5" pos:end="217:22"><expr pos:start="217:5" pos:end="217:21"><name pos:start="217:5" pos:end="217:17">total_sectors</name> <operator pos:start="217:19" pos:end="217:19">=</operator> <literal type="number" pos:start="217:21" pos:end="217:21">0</literal></expr>;</expr_stmt>

    <for pos:start="219:5" pos:end="237:5">for <control pos:start="219:9" pos:end="219:39">(<init pos:start="219:10" pos:end="219:18"><expr pos:start="219:10" pos:end="219:17"><name pos:start="219:10" pos:end="219:13">bs_i</name> <operator pos:start="219:15" pos:end="219:15">=</operator> <literal type="number" pos:start="219:17" pos:end="219:17">0</literal></expr>;</init> <condition pos:start="219:20" pos:end="219:31"><expr pos:start="219:20" pos:end="219:30"><name pos:start="219:20" pos:end="219:23">bs_i</name> <operator pos:start="219:25" pos:end="219:25">&lt;</operator> <name pos:start="219:27" pos:end="219:30">bs_n</name></expr>;</condition> <incr pos:start="219:33" pos:end="219:38"><expr pos:start="219:33" pos:end="219:38"><name pos:start="219:33" pos:end="219:36">bs_i</name><operator pos:start="219:37" pos:end="219:38">++</operator></expr></incr>)</control> <block pos:start="219:41" pos:end="237:5">{<block_content pos:start="221:9" pos:end="235:36">

        <expr_stmt pos:start="221:9" pos:end="221:73"><expr pos:start="221:9" pos:end="221:72"><name pos:start="221:9" pos:end="221:16"><name pos:start="221:9" pos:end="221:10">bs</name><index pos:start="221:11" pos:end="221:16">[<expr pos:start="221:12" pos:end="221:15"><name pos:start="221:12" pos:end="221:15">bs_i</name></expr>]</index></name> <operator pos:start="221:18" pos:end="221:18">=</operator> <call pos:start="221:20" pos:end="221:72"><name pos:start="221:20" pos:end="221:32">bdrv_new_open</name><argument_list pos:start="221:33" pos:end="221:72">(<argument pos:start="221:34" pos:end="221:52"><expr pos:start="221:34" pos:end="221:52"><name pos:start="221:34" pos:end="221:52"><name pos:start="221:34" pos:end="221:37">argv</name><index pos:start="221:38" pos:end="221:52">[<expr pos:start="221:39" pos:end="221:51"><name pos:start="221:39" pos:end="221:44">optind</name> <operator pos:start="221:46" pos:end="221:46">+</operator> <name pos:start="221:48" pos:end="221:51">bs_i</name></expr>]</index></name></expr></argument>, <argument pos:start="221:55" pos:end="221:57"><expr pos:start="221:55" pos:end="221:57"><name pos:start="221:55" pos:end="221:57">fmt</name></expr></argument>, <argument pos:start="221:60" pos:end="221:71"><expr pos:start="221:60" pos:end="221:71"><name pos:start="221:60" pos:end="221:71">BDRV_O_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="223:9" pos:end="231:9"><if pos:start="223:9" pos:end="231:9">if <condition pos:start="223:12" pos:end="223:22">(<expr pos:start="223:13" pos:end="223:21"><operator pos:start="223:13" pos:end="223:13">!</operator><name pos:start="223:14" pos:end="223:21"><name pos:start="223:14" pos:end="223:15">bs</name><index pos:start="223:16" pos:end="223:21">[<expr pos:start="223:17" pos:end="223:20"><name pos:start="223:17" pos:end="223:20">bs_i</name></expr>]</index></name></expr>)</condition> <block pos:start="223:24" pos:end="231:9">{<block_content pos:start="225:13" pos:end="229:21">

            <expr_stmt pos:start="225:13" pos:end="225:69"><expr pos:start="225:13" pos:end="225:68"><call pos:start="225:13" pos:end="225:68"><name pos:start="225:13" pos:end="225:24">error_report</name><argument_list pos:start="225:25" pos:end="225:68">(<argument pos:start="225:26" pos:end="225:46"><expr pos:start="225:26" pos:end="225:46"><literal type="string" pos:start="225:26" pos:end="225:46">"Could not open '%s'"</literal></expr></argument>, <argument pos:start="225:49" pos:end="225:67"><expr pos:start="225:49" pos:end="225:67"><name pos:start="225:49" pos:end="225:67"><name pos:start="225:49" pos:end="225:52">argv</name><index pos:start="225:53" pos:end="225:67">[<expr pos:start="225:54" pos:end="225:66"><name pos:start="225:54" pos:end="225:59">optind</name> <operator pos:start="225:61" pos:end="225:61">+</operator> <name pos:start="225:63" pos:end="225:66">bs_i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:21"><expr pos:start="227:13" pos:end="227:20"><name pos:start="227:13" pos:end="227:15">ret</name> <operator pos:start="227:17" pos:end="227:17">=</operator> <operator pos:start="227:19" pos:end="227:19">-</operator><literal type="number" pos:start="227:20" pos:end="227:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="229:13" pos:end="229:21">goto <name pos:start="229:18" pos:end="229:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:49"><expr pos:start="233:9" pos:end="233:48"><call pos:start="233:9" pos:end="233:48"><name pos:start="233:9" pos:end="233:25">bdrv_get_geometry</name><argument_list pos:start="233:26" pos:end="233:48">(<argument pos:start="233:27" pos:end="233:34"><expr pos:start="233:27" pos:end="233:34"><name pos:start="233:27" pos:end="233:34"><name pos:start="233:27" pos:end="233:28">bs</name><index pos:start="233:29" pos:end="233:34">[<expr pos:start="233:30" pos:end="233:33"><name pos:start="233:30" pos:end="233:33">bs_i</name></expr>]</index></name></expr></argument>, <argument pos:start="233:37" pos:end="233:47"><expr pos:start="233:37" pos:end="233:47"><operator pos:start="233:37" pos:end="233:37">&amp;</operator><name pos:start="233:38" pos:end="233:47">bs_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:36"><expr pos:start="235:9" pos:end="235:35"><name pos:start="235:9" pos:end="235:21">total_sectors</name> <operator pos:start="235:23" pos:end="235:24">+=</operator> <name pos:start="235:26" pos:end="235:35">bs_sectors</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="241:5" pos:end="263:5"><if pos:start="241:5" pos:end="263:5">if <condition pos:start="241:8" pos:end="241:30">(<expr pos:start="241:9" pos:end="241:29"><name pos:start="241:9" pos:end="241:21">snapshot_name</name> <operator pos:start="241:23" pos:end="241:24">!=</operator> <name pos:start="241:26" pos:end="241:29">NULL</name></expr>)</condition> <block pos:start="241:32" pos:end="263:5">{<block_content pos:start="243:9" pos:end="261:9">

        <if_stmt pos:start="243:9" pos:end="251:9"><if pos:start="243:9" pos:end="251:9">if <condition pos:start="243:12" pos:end="243:21">(<expr pos:start="243:13" pos:end="243:20"><name pos:start="243:13" pos:end="243:16">bs_n</name> <operator pos:start="243:18" pos:end="243:18">&gt;</operator> <literal type="number" pos:start="243:20" pos:end="243:20">1</literal></expr>)</condition> <block pos:start="243:23" pos:end="251:9">{<block_content pos:start="245:13" pos:end="249:21">

            <expr_stmt pos:start="245:13" pos:end="245:75"><expr pos:start="245:13" pos:end="245:74"><call pos:start="245:13" pos:end="245:74"><name pos:start="245:13" pos:end="245:24">error_report</name><argument_list pos:start="245:25" pos:end="245:74">(<argument pos:start="245:26" pos:end="245:73"><expr pos:start="245:26" pos:end="245:73"><literal type="string" pos:start="245:26" pos:end="245:73">"No support for concatenating multiple snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:21"><expr pos:start="247:13" pos:end="247:20"><name pos:start="247:13" pos:end="247:15">ret</name> <operator pos:start="247:17" pos:end="247:17">=</operator> <operator pos:start="247:19" pos:end="247:19">-</operator><literal type="number" pos:start="247:20" pos:end="247:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="249:13" pos:end="249:21">goto <name pos:start="249:18" pos:end="249:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="253:9" pos:end="261:9"><if pos:start="253:9" pos:end="261:9">if <condition pos:start="253:12" pos:end="253:61">(<expr pos:start="253:13" pos:end="253:60"><call pos:start="253:13" pos:end="253:56"><name pos:start="253:13" pos:end="253:34">bdrv_snapshot_load_tmp</name><argument_list pos:start="253:35" pos:end="253:56">(<argument pos:start="253:36" pos:end="253:40"><expr pos:start="253:36" pos:end="253:40"><name pos:start="253:36" pos:end="253:40"><name pos:start="253:36" pos:end="253:37">bs</name><index pos:start="253:38" pos:end="253:40">[<expr pos:start="253:39" pos:end="253:39"><literal type="number" pos:start="253:39" pos:end="253:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="253:43" pos:end="253:55"><expr pos:start="253:43" pos:end="253:55"><name pos:start="253:43" pos:end="253:55">snapshot_name</name></expr></argument>)</argument_list></call> <operator pos:start="253:58" pos:end="253:58">&lt;</operator> <literal type="number" pos:start="253:60" pos:end="253:60">0</literal></expr>)</condition> <block pos:start="253:63" pos:end="261:9">{<block_content pos:start="255:13" pos:end="259:21">

            <expr_stmt pos:start="255:13" pos:end="255:52"><expr pos:start="255:13" pos:end="255:51"><call pos:start="255:13" pos:end="255:51"><name pos:start="255:13" pos:end="255:24">error_report</name><argument_list pos:start="255:25" pos:end="255:51">(<argument pos:start="255:26" pos:end="255:50"><expr pos:start="255:26" pos:end="255:50"><literal type="string" pos:start="255:26" pos:end="255:50">"Failed to load snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:21"><expr pos:start="257:13" pos:end="257:20"><name pos:start="257:13" pos:end="257:15">ret</name> <operator pos:start="257:17" pos:end="257:17">=</operator> <operator pos:start="257:19" pos:end="257:19">-</operator><literal type="number" pos:start="257:20" pos:end="257:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="259:13" pos:end="259:21">goto <name pos:start="259:18" pos:end="259:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="267:5" pos:end="267:43">/* Find driver and parse its options */</comment>

    <expr_stmt pos:start="269:5" pos:end="269:36"><expr pos:start="269:5" pos:end="269:35"><name pos:start="269:5" pos:end="269:7">drv</name> <operator pos:start="269:9" pos:end="269:9">=</operator> <call pos:start="269:11" pos:end="269:35"><name pos:start="269:11" pos:end="269:26">bdrv_find_format</name><argument_list pos:start="269:27" pos:end="269:35">(<argument pos:start="269:28" pos:end="269:34"><expr pos:start="269:28" pos:end="269:34"><name pos:start="269:28" pos:end="269:34">out_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="271:5" pos:end="279:5"><if pos:start="271:5" pos:end="279:5">if <condition pos:start="271:8" pos:end="271:13">(<expr pos:start="271:9" pos:end="271:12"><operator pos:start="271:9" pos:end="271:9">!</operator><name pos:start="271:10" pos:end="271:12">drv</name></expr>)</condition> <block pos:start="271:15" pos:end="279:5">{<block_content pos:start="273:9" pos:end="277:17">

        <expr_stmt pos:start="273:9" pos:end="273:58"><expr pos:start="273:9" pos:end="273:57"><call pos:start="273:9" pos:end="273:57"><name pos:start="273:9" pos:end="273:20">error_report</name><argument_list pos:start="273:21" pos:end="273:57">(<argument pos:start="273:22" pos:end="273:47"><expr pos:start="273:22" pos:end="273:47"><literal type="string" pos:start="273:22" pos:end="273:47">"Unknown file format '%s'"</literal></expr></argument>, <argument pos:start="273:50" pos:end="273:56"><expr pos:start="273:50" pos:end="273:56"><name pos:start="273:50" pos:end="273:56">out_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:17"><expr pos:start="275:9" pos:end="275:16"><name pos:start="275:9" pos:end="275:11">ret</name> <operator pos:start="275:13" pos:end="275:13">=</operator> <operator pos:start="275:15" pos:end="275:15">-</operator><literal type="number" pos:start="275:16" pos:end="275:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="277:9" pos:end="277:17">goto <name pos:start="277:14" pos:end="277:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="283:5" pos:end="283:49"><expr pos:start="283:5" pos:end="283:48"><name pos:start="283:5" pos:end="283:13">proto_drv</name> <operator pos:start="283:15" pos:end="283:15">=</operator> <call pos:start="283:17" pos:end="283:48"><name pos:start="283:17" pos:end="283:34">bdrv_find_protocol</name><argument_list pos:start="283:35" pos:end="283:48">(<argument pos:start="283:36" pos:end="283:47"><expr pos:start="283:36" pos:end="283:47"><name pos:start="283:36" pos:end="283:47">out_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="285:5" pos:end="293:5"><if pos:start="285:5" pos:end="293:5">if <condition pos:start="285:8" pos:end="285:19">(<expr pos:start="285:9" pos:end="285:18"><operator pos:start="285:9" pos:end="285:9">!</operator><name pos:start="285:10" pos:end="285:18">proto_drv</name></expr>)</condition> <block pos:start="285:21" pos:end="293:5">{<block_content pos:start="287:9" pos:end="291:17">

        <expr_stmt pos:start="287:9" pos:end="287:60"><expr pos:start="287:9" pos:end="287:59"><call pos:start="287:9" pos:end="287:59"><name pos:start="287:9" pos:end="287:20">error_report</name><argument_list pos:start="287:21" pos:end="287:59">(<argument pos:start="287:22" pos:end="287:44"><expr pos:start="287:22" pos:end="287:44"><literal type="string" pos:start="287:22" pos:end="287:44">"Unknown protocol '%s'"</literal></expr></argument>, <argument pos:start="287:47" pos:end="287:58"><expr pos:start="287:47" pos:end="287:58"><name pos:start="287:47" pos:end="287:58">out_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:17"><expr pos:start="289:9" pos:end="289:16"><name pos:start="289:9" pos:end="289:11">ret</name> <operator pos:start="289:13" pos:end="289:13">=</operator> <operator pos:start="289:15" pos:end="289:15">-</operator><literal type="number" pos:start="289:16" pos:end="289:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="291:9" pos:end="291:17">goto <name pos:start="291:14" pos:end="291:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="297:5" pos:end="299:67"><expr pos:start="297:5" pos:end="299:66"><name pos:start="297:5" pos:end="297:18">create_options</name> <operator pos:start="297:20" pos:end="297:20">=</operator> <call pos:start="297:22" pos:end="299:66"><name pos:start="297:22" pos:end="297:45">append_option_parameters</name><argument_list pos:start="297:46" pos:end="299:66">(<argument pos:start="297:47" pos:end="297:60"><expr pos:start="297:47" pos:end="297:60"><name pos:start="297:47" pos:end="297:60">create_options</name></expr></argument>,

                                              <argument pos:start="299:47" pos:end="299:65"><expr pos:start="299:47" pos:end="299:65"><name pos:start="299:47" pos:end="299:65"><name pos:start="299:47" pos:end="299:49">drv</name><operator pos:start="299:50" pos:end="299:51">-&gt;</operator><name pos:start="299:52" pos:end="299:65">create_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="303:73"><expr pos:start="301:5" pos:end="303:72"><name pos:start="301:5" pos:end="301:18">create_options</name> <operator pos:start="301:20" pos:end="301:20">=</operator> <call pos:start="301:22" pos:end="303:72"><name pos:start="301:22" pos:end="301:45">append_option_parameters</name><argument_list pos:start="301:46" pos:end="303:72">(<argument pos:start="301:47" pos:end="301:60"><expr pos:start="301:47" pos:end="301:60"><name pos:start="301:47" pos:end="301:60">create_options</name></expr></argument>,

                                              <argument pos:start="303:47" pos:end="303:71"><expr pos:start="303:47" pos:end="303:71"><name pos:start="303:47" pos:end="303:71"><name pos:start="303:47" pos:end="303:55">proto_drv</name><operator pos:start="303:56" pos:end="303:57">-&gt;</operator><name pos:start="303:58" pos:end="303:71">create_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="307:5" pos:end="325:5"><if pos:start="307:5" pos:end="321:5">if <condition pos:start="307:8" pos:end="307:16">(<expr pos:start="307:9" pos:end="307:15"><name pos:start="307:9" pos:end="307:15">options</name></expr>)</condition> <block pos:start="307:18" pos:end="321:5">{<block_content pos:start="309:9" pos:end="319:9">

        <expr_stmt pos:start="309:9" pos:end="309:72"><expr pos:start="309:9" pos:end="309:71"><name pos:start="309:9" pos:end="309:13">param</name> <operator pos:start="309:15" pos:end="309:15">=</operator> <call pos:start="309:17" pos:end="309:71"><name pos:start="309:17" pos:end="309:39">parse_option_parameters</name><argument_list pos:start="309:40" pos:end="309:71">(<argument pos:start="309:41" pos:end="309:47"><expr pos:start="309:41" pos:end="309:47"><name pos:start="309:41" pos:end="309:47">options</name></expr></argument>, <argument pos:start="309:50" pos:end="309:63"><expr pos:start="309:50" pos:end="309:63"><name pos:start="309:50" pos:end="309:63">create_options</name></expr></argument>, <argument pos:start="309:66" pos:end="309:70"><expr pos:start="309:66" pos:end="309:70"><name pos:start="309:66" pos:end="309:70">param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="311:9" pos:end="319:9"><if pos:start="311:9" pos:end="319:9">if <condition pos:start="311:12" pos:end="311:26">(<expr pos:start="311:13" pos:end="311:25"><name pos:start="311:13" pos:end="311:17">param</name> <operator pos:start="311:19" pos:end="311:20">==</operator> <name pos:start="311:22" pos:end="311:25">NULL</name></expr>)</condition> <block pos:start="311:28" pos:end="319:9">{<block_content pos:start="313:13" pos:end="317:21">

            <expr_stmt pos:start="313:13" pos:end="313:75"><expr pos:start="313:13" pos:end="313:74"><call pos:start="313:13" pos:end="313:74"><name pos:start="313:13" pos:end="313:24">error_report</name><argument_list pos:start="313:25" pos:end="313:74">(<argument pos:start="313:26" pos:end="313:64"><expr pos:start="313:26" pos:end="313:64"><literal type="string" pos:start="313:26" pos:end="313:64">"Invalid options for file format '%s'."</literal></expr></argument>, <argument pos:start="313:67" pos:end="313:73"><expr pos:start="313:67" pos:end="313:73"><name pos:start="313:67" pos:end="313:73">out_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="315:13" pos:end="315:21"><expr pos:start="315:13" pos:end="315:20"><name pos:start="315:13" pos:end="315:15">ret</name> <operator pos:start="315:17" pos:end="315:17">=</operator> <operator pos:start="315:19" pos:end="315:19">-</operator><literal type="number" pos:start="315:20" pos:end="315:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="317:13" pos:end="317:21">goto <name pos:start="317:18" pos:end="317:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="321:7" pos:end="325:5">else <block pos:start="321:12" pos:end="325:5">{<block_content pos:start="323:9" pos:end="323:67">

        <expr_stmt pos:start="323:9" pos:end="323:67"><expr pos:start="323:9" pos:end="323:66"><name pos:start="323:9" pos:end="323:13">param</name> <operator pos:start="323:15" pos:end="323:15">=</operator> <call pos:start="323:17" pos:end="323:66"><name pos:start="323:17" pos:end="323:39">parse_option_parameters</name><argument_list pos:start="323:40" pos:end="323:66">(<argument pos:start="323:41" pos:end="323:42"><expr pos:start="323:41" pos:end="323:42"><literal type="string" pos:start="323:41" pos:end="323:42">""</literal></expr></argument>, <argument pos:start="323:45" pos:end="323:58"><expr pos:start="323:45" pos:end="323:58"><name pos:start="323:45" pos:end="323:58">create_options</name></expr></argument>, <argument pos:start="323:61" pos:end="323:65"><expr pos:start="323:61" pos:end="323:65"><name pos:start="323:61" pos:end="323:65">param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="329:5" pos:end="329:73"><expr pos:start="329:5" pos:end="329:72"><call pos:start="329:5" pos:end="329:72"><name pos:start="329:5" pos:end="329:28">set_option_parameter_int</name><argument_list pos:start="329:29" pos:end="329:72">(<argument pos:start="329:30" pos:end="329:34"><expr pos:start="329:30" pos:end="329:34"><name pos:start="329:30" pos:end="329:34">param</name></expr></argument>, <argument pos:start="329:37" pos:end="329:50"><expr pos:start="329:37" pos:end="329:50"><name pos:start="329:37" pos:end="329:50">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="329:53" pos:end="329:71"><expr pos:start="329:53" pos:end="329:71"><name pos:start="329:53" pos:end="329:65">total_sectors</name> <operator pos:start="329:67" pos:end="329:67">*</operator> <literal type="number" pos:start="329:69" pos:end="329:71">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="331:5" pos:end="331:67"><expr pos:start="331:5" pos:end="331:66"><name pos:start="331:5" pos:end="331:7">ret</name> <operator pos:start="331:9" pos:end="331:9">=</operator> <call pos:start="331:11" pos:end="331:66"><name pos:start="331:11" pos:end="331:31">add_old_style_options</name><argument_list pos:start="331:32" pos:end="331:66">(<argument pos:start="331:33" pos:end="331:39"><expr pos:start="331:33" pos:end="331:39"><name pos:start="331:33" pos:end="331:39">out_fmt</name></expr></argument>, <argument pos:start="331:42" pos:end="331:46"><expr pos:start="331:42" pos:end="331:46"><name pos:start="331:42" pos:end="331:46">param</name></expr></argument>, <argument pos:start="331:49" pos:end="331:59"><expr pos:start="331:49" pos:end="331:59"><name pos:start="331:49" pos:end="331:59">out_baseimg</name></expr></argument>, <argument pos:start="331:62" pos:end="331:65"><expr pos:start="331:62" pos:end="331:65"><name pos:start="331:62" pos:end="331:65">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="333:5" pos:end="337:5"><if pos:start="333:5" pos:end="337:5">if <condition pos:start="333:8" pos:end="333:16">(<expr pos:start="333:9" pos:end="333:15"><name pos:start="333:9" pos:end="333:11">ret</name> <operator pos:start="333:13" pos:end="333:13">&lt;</operator> <literal type="number" pos:start="333:15" pos:end="333:15">0</literal></expr>)</condition> <block pos:start="333:18" pos:end="337:5">{<block_content pos:start="335:9" pos:end="335:17">

        <goto pos:start="335:9" pos:end="335:17">goto <name pos:start="335:14" pos:end="335:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="341:5" pos:end="341:59">/* Get backing file name if -o backing_file was used */</comment>

    <expr_stmt pos:start="343:5" pos:end="343:76"><expr pos:start="343:5" pos:end="343:75"><name pos:start="343:5" pos:end="343:21">out_baseimg_param</name> <operator pos:start="343:23" pos:end="343:23">=</operator> <call pos:start="343:25" pos:end="343:75"><name pos:start="343:25" pos:end="343:44">get_option_parameter</name><argument_list pos:start="343:45" pos:end="343:75">(<argument pos:start="343:46" pos:end="343:50"><expr pos:start="343:46" pos:end="343:50"><name pos:start="343:46" pos:end="343:50">param</name></expr></argument>, <argument pos:start="343:53" pos:end="343:74"><expr pos:start="343:53" pos:end="343:74"><name pos:start="343:53" pos:end="343:74">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="345:5" pos:end="349:5"><if pos:start="345:5" pos:end="349:5">if <condition pos:start="345:8" pos:end="345:26">(<expr pos:start="345:9" pos:end="345:25"><name pos:start="345:9" pos:end="345:25">out_baseimg_param</name></expr>)</condition> <block pos:start="345:28" pos:end="349:5">{<block_content pos:start="347:9" pos:end="347:49">

        <expr_stmt pos:start="347:9" pos:end="347:49"><expr pos:start="347:9" pos:end="347:48"><name pos:start="347:9" pos:end="347:19">out_baseimg</name> <operator pos:start="347:21" pos:end="347:21">=</operator> <name pos:start="347:23" pos:end="347:48"><name pos:start="347:23" pos:end="347:39">out_baseimg_param</name><operator pos:start="347:40" pos:end="347:41">-&gt;</operator><name pos:start="347:42" pos:end="347:46">value</name><operator pos:start="347:47" pos:end="347:47">.</operator><name pos:start="347:48" pos:end="347:48">s</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="353:5" pos:end="353:43">/* Check if compression is supported */</comment>

    <if_stmt pos:start="355:5" pos:end="409:5"><if pos:start="355:5" pos:end="409:5">if <condition pos:start="355:8" pos:end="355:17">(<expr pos:start="355:9" pos:end="355:16"><name pos:start="355:9" pos:end="355:16">compress</name></expr>)</condition> <block pos:start="355:19" pos:end="409:5">{<block_content pos:start="357:9" pos:end="407:9">

        <decl_stmt pos:start="357:9" pos:end="359:59"><decl pos:start="357:9" pos:end="359:58"><type pos:start="357:9" pos:end="357:29"><name pos:start="357:9" pos:end="357:27">QEMUOptionParameter</name> <modifier pos:start="357:29" pos:end="357:29">*</modifier></type><name pos:start="357:30" pos:end="357:39">encryption</name> <init pos:start="357:41" pos:end="359:58">=

            <expr pos:start="359:13" pos:end="359:58"><call pos:start="359:13" pos:end="359:58"><name pos:start="359:13" pos:end="359:32">get_option_parameter</name><argument_list pos:start="359:33" pos:end="359:58">(<argument pos:start="359:34" pos:end="359:38"><expr pos:start="359:34" pos:end="359:38"><name pos:start="359:34" pos:end="359:38">param</name></expr></argument>, <argument pos:start="359:41" pos:end="359:57"><expr pos:start="359:41" pos:end="359:57"><name pos:start="359:41" pos:end="359:57">BLOCK_OPT_ENCRYPT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="361:9" pos:end="363:60"><decl pos:start="361:9" pos:end="363:59"><type pos:start="361:9" pos:end="361:29"><name pos:start="361:9" pos:end="361:27">QEMUOptionParameter</name> <modifier pos:start="361:29" pos:end="361:29">*</modifier></type><name pos:start="361:30" pos:end="361:42">preallocation</name> <init pos:start="361:44" pos:end="363:59">=

            <expr pos:start="363:13" pos:end="363:59"><call pos:start="363:13" pos:end="363:59"><name pos:start="363:13" pos:end="363:32">get_option_parameter</name><argument_list pos:start="363:33" pos:end="363:59">(<argument pos:start="363:34" pos:end="363:38"><expr pos:start="363:34" pos:end="363:38"><name pos:start="363:34" pos:end="363:38">param</name></expr></argument>, <argument pos:start="363:41" pos:end="363:58"><expr pos:start="363:41" pos:end="363:58"><name pos:start="363:41" pos:end="363:58">BLOCK_OPT_PREALLOC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="367:9" pos:end="375:9"><if pos:start="367:9" pos:end="375:9">if <condition pos:start="367:12" pos:end="367:40">(<expr pos:start="367:13" pos:end="367:39"><operator pos:start="367:13" pos:end="367:13">!</operator><name pos:start="367:14" pos:end="367:39"><name pos:start="367:14" pos:end="367:16">drv</name><operator pos:start="367:17" pos:end="367:18">-&gt;</operator><name pos:start="367:19" pos:end="367:39">bdrv_write_compressed</name></name></expr>)</condition> <block pos:start="367:42" pos:end="375:9">{<block_content pos:start="369:13" pos:end="373:21">

            <expr_stmt pos:start="369:13" pos:end="369:75"><expr pos:start="369:13" pos:end="369:74"><call pos:start="369:13" pos:end="369:74"><name pos:start="369:13" pos:end="369:24">error_report</name><argument_list pos:start="369:25" pos:end="369:74">(<argument pos:start="369:26" pos:end="369:73"><expr pos:start="369:26" pos:end="369:73"><literal type="string" pos:start="369:26" pos:end="369:73">"Compression not supported for this file format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="371:13" pos:end="371:21"><expr pos:start="371:13" pos:end="371:20"><name pos:start="371:13" pos:end="371:15">ret</name> <operator pos:start="371:17" pos:end="371:17">=</operator> <operator pos:start="371:19" pos:end="371:19">-</operator><literal type="number" pos:start="371:20" pos:end="371:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="373:13" pos:end="373:21">goto <name pos:start="373:18" pos:end="373:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="379:9" pos:end="389:9"><if pos:start="379:9" pos:end="389:9">if <condition pos:start="379:12" pos:end="379:46">(<expr pos:start="379:13" pos:end="379:45"><name pos:start="379:13" pos:end="379:22">encryption</name> <operator pos:start="379:24" pos:end="379:25">&amp;&amp;</operator> <name pos:start="379:27" pos:end="379:45"><name pos:start="379:27" pos:end="379:36">encryption</name><operator pos:start="379:37" pos:end="379:38">-&gt;</operator><name pos:start="379:39" pos:end="379:43">value</name><operator pos:start="379:44" pos:end="379:44">.</operator><name pos:start="379:45" pos:end="379:45">n</name></name></expr>)</condition> <block pos:start="379:48" pos:end="389:9">{<block_content pos:start="381:13" pos:end="387:21">

            <expr_stmt pos:start="381:13" pos:end="383:42"><expr pos:start="381:13" pos:end="383:41"><call pos:start="381:13" pos:end="383:41"><name pos:start="381:13" pos:end="381:24">error_report</name><argument_list pos:start="381:25" pos:end="383:41">(<argument pos:start="381:26" pos:end="383:40"><expr pos:start="381:26" pos:end="383:40"><literal type="string" pos:start="381:26" pos:end="381:71">"Compression and encryption not supported at "</literal>

                         <literal type="string" pos:start="383:26" pos:end="383:40">"the same time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="385:13" pos:end="385:21"><expr pos:start="385:13" pos:end="385:20"><name pos:start="385:13" pos:end="385:15">ret</name> <operator pos:start="385:17" pos:end="385:17">=</operator> <operator pos:start="385:19" pos:end="385:19">-</operator><literal type="number" pos:start="385:20" pos:end="385:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="387:13" pos:end="387:21">goto <name pos:start="387:18" pos:end="387:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="393:9" pos:end="407:9"><if pos:start="393:9" pos:end="407:9">if <condition pos:start="393:12" pos:end="395:53">(<expr pos:start="393:13" pos:end="395:52"><name pos:start="393:13" pos:end="393:25">preallocation</name> <operator pos:start="393:27" pos:end="393:28">&amp;&amp;</operator> <name pos:start="393:30" pos:end="393:51"><name pos:start="393:30" pos:end="393:42">preallocation</name><operator pos:start="393:43" pos:end="393:44">-&gt;</operator><name pos:start="393:45" pos:end="393:49">value</name><operator pos:start="393:50" pos:end="393:50">.</operator><name pos:start="393:51" pos:end="393:51">s</name></name>

            <operator pos:start="395:13" pos:end="395:14">&amp;&amp;</operator> <call pos:start="395:16" pos:end="395:52"><name pos:start="395:16" pos:end="395:21">strcmp</name><argument_list pos:start="395:22" pos:end="395:52">(<argument pos:start="395:23" pos:end="395:44"><expr pos:start="395:23" pos:end="395:44"><name pos:start="395:23" pos:end="395:44"><name pos:start="395:23" pos:end="395:35">preallocation</name><operator pos:start="395:36" pos:end="395:37">-&gt;</operator><name pos:start="395:38" pos:end="395:42">value</name><operator pos:start="395:43" pos:end="395:43">.</operator><name pos:start="395:44" pos:end="395:44">s</name></name></expr></argument>, <argument pos:start="395:47" pos:end="395:51"><expr pos:start="395:47" pos:end="395:51"><literal type="string" pos:start="395:47" pos:end="395:51">"off"</literal></expr></argument>)</argument_list></call></expr>)</condition>

        <block pos:start="397:9" pos:end="407:9">{<block_content pos:start="399:13" pos:end="405:21">

            <expr_stmt pos:start="399:13" pos:end="401:42"><expr pos:start="399:13" pos:end="401:41"><call pos:start="399:13" pos:end="401:41"><name pos:start="399:13" pos:end="399:24">error_report</name><argument_list pos:start="399:25" pos:end="401:41">(<argument pos:start="399:26" pos:end="401:40"><expr pos:start="399:26" pos:end="401:40"><literal type="string" pos:start="399:26" pos:end="399:74">"Compression and preallocation not supported at "</literal>

                         <literal type="string" pos:start="401:26" pos:end="401:40">"the same time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="403:13" pos:end="403:21"><expr pos:start="403:13" pos:end="403:20"><name pos:start="403:13" pos:end="403:15">ret</name> <operator pos:start="403:17" pos:end="403:17">=</operator> <operator pos:start="403:19" pos:end="403:19">-</operator><literal type="number" pos:start="403:20" pos:end="403:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="405:13" pos:end="405:21">goto <name pos:start="405:18" pos:end="405:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="413:5" pos:end="413:30">/* Create the new image */</comment>

    <expr_stmt pos:start="415:5" pos:end="415:48"><expr pos:start="415:5" pos:end="415:47"><name pos:start="415:5" pos:end="415:7">ret</name> <operator pos:start="415:9" pos:end="415:9">=</operator> <call pos:start="415:11" pos:end="415:47"><name pos:start="415:11" pos:end="415:21">bdrv_create</name><argument_list pos:start="415:22" pos:end="415:47">(<argument pos:start="415:23" pos:end="415:25"><expr pos:start="415:23" pos:end="415:25"><name pos:start="415:23" pos:end="415:25">drv</name></expr></argument>, <argument pos:start="415:28" pos:end="415:39"><expr pos:start="415:28" pos:end="415:39"><name pos:start="415:28" pos:end="415:39">out_filename</name></expr></argument>, <argument pos:start="415:42" pos:end="415:46"><expr pos:start="415:42" pos:end="415:46"><name pos:start="415:42" pos:end="415:46">param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="417:5" pos:end="441:5"><if pos:start="417:5" pos:end="441:5">if <condition pos:start="417:8" pos:end="417:16">(<expr pos:start="417:9" pos:end="417:15"><name pos:start="417:9" pos:end="417:11">ret</name> <operator pos:start="417:13" pos:end="417:13">&lt;</operator> <literal type="number" pos:start="417:15" pos:end="417:15">0</literal></expr>)</condition> <block pos:start="417:18" pos:end="441:5">{<block_content pos:start="419:9" pos:end="439:17">

        <if_stmt pos:start="419:9" pos:end="437:9"><if pos:start="419:9" pos:end="425:9">if <condition pos:start="419:12" pos:end="419:28">(<expr pos:start="419:13" pos:end="419:27"><name pos:start="419:13" pos:end="419:15">ret</name> <operator pos:start="419:17" pos:end="419:18">==</operator> <operator pos:start="419:20" pos:end="419:20">-</operator><name pos:start="419:21" pos:end="419:27">ENOTSUP</name></expr>)</condition> <block pos:start="419:30" pos:end="425:9">{<block_content pos:start="421:13" pos:end="423:34">

            <expr_stmt pos:start="421:13" pos:end="423:34"><expr pos:start="421:13" pos:end="423:33"><call pos:start="421:13" pos:end="423:33"><name pos:start="421:13" pos:end="421:24">error_report</name><argument_list pos:start="421:25" pos:end="423:33">(<argument pos:start="421:26" pos:end="421:72"><expr pos:start="421:26" pos:end="421:72"><literal type="string" pos:start="421:26" pos:end="421:72">"Formatting not supported for file format '%s'"</literal></expr></argument>,

                         <argument pos:start="423:26" pos:end="423:32"><expr pos:start="423:26" pos:end="423:32"><name pos:start="423:26" pos:end="423:32">out_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="425:11" pos:end="431:9">else if <condition pos:start="425:19" pos:end="425:33">(<expr pos:start="425:20" pos:end="425:32"><name pos:start="425:20" pos:end="425:22">ret</name> <operator pos:start="425:24" pos:end="425:25">==</operator> <operator pos:start="425:27" pos:end="425:27">-</operator><name pos:start="425:28" pos:end="425:32">EFBIG</name></expr>)</condition> <block pos:start="425:35" pos:end="431:9">{<block_content pos:start="427:13" pos:end="429:34">

            <expr_stmt pos:start="427:13" pos:end="429:34"><expr pos:start="427:13" pos:end="429:33"><call pos:start="427:13" pos:end="429:33"><name pos:start="427:13" pos:end="427:24">error_report</name><argument_list pos:start="427:25" pos:end="429:33">(<argument pos:start="427:26" pos:end="427:75"><expr pos:start="427:26" pos:end="427:75"><literal type="string" pos:start="427:26" pos:end="427:75">"The image size is too large for file format '%s'"</literal></expr></argument>,

                         <argument pos:start="429:26" pos:end="429:32"><expr pos:start="429:26" pos:end="429:32"><name pos:start="429:26" pos:end="429:32">out_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="431:11" pos:end="437:9">else <block pos:start="431:16" pos:end="437:9">{<block_content pos:start="433:13" pos:end="435:64">

            <expr_stmt pos:start="433:13" pos:end="435:64"><expr pos:start="433:13" pos:end="435:63"><call pos:start="433:13" pos:end="435:63"><name pos:start="433:13" pos:end="433:24">error_report</name><argument_list pos:start="433:25" pos:end="435:63">(<argument pos:start="433:26" pos:end="433:60"><expr pos:start="433:26" pos:end="433:60"><literal type="string" pos:start="433:26" pos:end="433:60">"%s: error while converting %s: %s"</literal></expr></argument>,

                         <argument pos:start="435:26" pos:end="435:37"><expr pos:start="435:26" pos:end="435:37"><name pos:start="435:26" pos:end="435:37">out_filename</name></expr></argument>, <argument pos:start="435:40" pos:end="435:46"><expr pos:start="435:40" pos:end="435:46"><name pos:start="435:40" pos:end="435:46">out_fmt</name></expr></argument>, <argument pos:start="435:49" pos:end="435:62"><expr pos:start="435:49" pos:end="435:62"><call pos:start="435:49" pos:end="435:62"><name pos:start="435:49" pos:end="435:56">strerror</name><argument_list pos:start="435:57" pos:end="435:62">(<argument pos:start="435:58" pos:end="435:61"><expr pos:start="435:58" pos:end="435:61"><operator pos:start="435:58" pos:end="435:58">-</operator><name pos:start="435:59" pos:end="435:61">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <goto pos:start="439:9" pos:end="439:17">goto <name pos:start="439:14" pos:end="439:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="445:5" pos:end="445:24"><expr pos:start="445:5" pos:end="445:23"><name pos:start="445:5" pos:end="445:9">flags</name> <operator pos:start="445:11" pos:end="445:11">=</operator> <name pos:start="445:13" pos:end="445:23">BDRV_O_RDWR</name></expr>;</expr_stmt>

    <expr_stmt pos:start="447:5" pos:end="447:48"><expr pos:start="447:5" pos:end="447:47"><name pos:start="447:5" pos:end="447:7">ret</name> <operator pos:start="447:9" pos:end="447:9">=</operator> <call pos:start="447:11" pos:end="447:47"><name pos:start="447:11" pos:end="447:32">bdrv_parse_cache_flags</name><argument_list pos:start="447:33" pos:end="447:47">(<argument pos:start="447:34" pos:end="447:38"><expr pos:start="447:34" pos:end="447:38"><name pos:start="447:34" pos:end="447:38">cache</name></expr></argument>, <argument pos:start="447:41" pos:end="447:46"><expr pos:start="447:41" pos:end="447:46"><operator pos:start="447:41" pos:end="447:41">&amp;</operator><name pos:start="447:42" pos:end="447:46">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="449:5" pos:end="455:5"><if pos:start="449:5" pos:end="455:5">if <condition pos:start="449:8" pos:end="449:16">(<expr pos:start="449:9" pos:end="449:15"><name pos:start="449:9" pos:end="449:11">ret</name> <operator pos:start="449:13" pos:end="449:13">&lt;</operator> <literal type="number" pos:start="449:15" pos:end="449:15">0</literal></expr>)</condition> <block pos:start="449:18" pos:end="455:5">{<block_content pos:start="451:9" pos:end="453:18">

        <expr_stmt pos:start="451:9" pos:end="451:56"><expr pos:start="451:9" pos:end="451:55"><call pos:start="451:9" pos:end="451:55"><name pos:start="451:9" pos:end="451:20">error_report</name><argument_list pos:start="451:21" pos:end="451:55">(<argument pos:start="451:22" pos:end="451:47"><expr pos:start="451:22" pos:end="451:47"><literal type="string" pos:start="451:22" pos:end="451:47">"Invalid cache option: %s"</literal></expr></argument>, <argument pos:start="451:50" pos:end="451:54"><expr pos:start="451:50" pos:end="451:54"><name pos:start="451:50" pos:end="451:54">cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="453:9" pos:end="453:18">return <expr pos:start="453:16" pos:end="453:17"><operator pos:start="453:16" pos:end="453:16">-</operator><literal type="number" pos:start="453:17" pos:end="453:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="459:5" pos:end="459:57"><expr pos:start="459:5" pos:end="459:56"><name pos:start="459:5" pos:end="459:10">out_bs</name> <operator pos:start="459:12" pos:end="459:12">=</operator> <call pos:start="459:14" pos:end="459:56"><name pos:start="459:14" pos:end="459:26">bdrv_new_open</name><argument_list pos:start="459:27" pos:end="459:56">(<argument pos:start="459:28" pos:end="459:39"><expr pos:start="459:28" pos:end="459:39"><name pos:start="459:28" pos:end="459:39">out_filename</name></expr></argument>, <argument pos:start="459:42" pos:end="459:48"><expr pos:start="459:42" pos:end="459:48"><name pos:start="459:42" pos:end="459:48">out_fmt</name></expr></argument>, <argument pos:start="459:51" pos:end="459:55"><expr pos:start="459:51" pos:end="459:55"><name pos:start="459:51" pos:end="459:55">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="461:5" pos:end="467:5"><if pos:start="461:5" pos:end="467:5">if <condition pos:start="461:8" pos:end="461:16">(<expr pos:start="461:9" pos:end="461:15"><operator pos:start="461:9" pos:end="461:9">!</operator><name pos:start="461:10" pos:end="461:15">out_bs</name></expr>)</condition> <block pos:start="461:18" pos:end="467:5">{<block_content pos:start="463:9" pos:end="465:17">

        <expr_stmt pos:start="463:9" pos:end="463:17"><expr pos:start="463:9" pos:end="463:16"><name pos:start="463:9" pos:end="463:11">ret</name> <operator pos:start="463:13" pos:end="463:13">=</operator> <operator pos:start="463:15" pos:end="463:15">-</operator><literal type="number" pos:start="463:16" pos:end="463:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="465:9" pos:end="465:17">goto <name pos:start="465:14" pos:end="465:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="471:5" pos:end="471:13"><expr pos:start="471:5" pos:end="471:12"><name pos:start="471:5" pos:end="471:8">bs_i</name> <operator pos:start="471:10" pos:end="471:10">=</operator> <literal type="number" pos:start="471:12" pos:end="471:12">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="473:5" pos:end="473:18"><expr pos:start="473:5" pos:end="473:17"><name pos:start="473:5" pos:end="473:13">bs_offset</name> <operator pos:start="473:15" pos:end="473:15">=</operator> <literal type="number" pos:start="473:17" pos:end="473:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="475:5" pos:end="475:42"><expr pos:start="475:5" pos:end="475:41"><call pos:start="475:5" pos:end="475:41"><name pos:start="475:5" pos:end="475:21">bdrv_get_geometry</name><argument_list pos:start="475:22" pos:end="475:41">(<argument pos:start="475:23" pos:end="475:27"><expr pos:start="475:23" pos:end="475:27"><name pos:start="475:23" pos:end="475:27"><name pos:start="475:23" pos:end="475:24">bs</name><index pos:start="475:25" pos:end="475:27">[<expr pos:start="475:26" pos:end="475:26"><literal type="number" pos:start="475:26" pos:end="475:26">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="475:30" pos:end="475:40"><expr pos:start="475:30" pos:end="475:40"><operator pos:start="475:30" pos:end="475:30">&amp;</operator><name pos:start="475:31" pos:end="475:40">bs_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="477:5" pos:end="477:47"><expr pos:start="477:5" pos:end="477:46"><name pos:start="477:5" pos:end="477:7">buf</name> <operator pos:start="477:9" pos:end="477:9">=</operator> <call pos:start="477:11" pos:end="477:46"><name pos:start="477:11" pos:end="477:25">qemu_blockalign</name><argument_list pos:start="477:26" pos:end="477:46">(<argument pos:start="477:27" pos:end="477:32"><expr pos:start="477:27" pos:end="477:32"><name pos:start="477:27" pos:end="477:32">out_bs</name></expr></argument>, <argument pos:start="477:35" pos:end="477:45"><expr pos:start="477:35" pos:end="477:45"><name pos:start="477:35" pos:end="477:45">IO_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="481:5" pos:end="817:5"><if pos:start="481:5" pos:end="647:5">if <condition pos:start="481:8" pos:end="481:17">(<expr pos:start="481:9" pos:end="481:16"><name pos:start="481:9" pos:end="481:16">compress</name></expr>)</condition> <block pos:start="481:19" pos:end="647:5">{<block_content pos:start="483:9" pos:end="645:50">

        <expr_stmt pos:start="483:9" pos:end="483:42"><expr pos:start="483:9" pos:end="483:41"><name pos:start="483:9" pos:end="483:11">ret</name> <operator pos:start="483:13" pos:end="483:13">=</operator> <call pos:start="483:15" pos:end="483:41"><name pos:start="483:15" pos:end="483:27">bdrv_get_info</name><argument_list pos:start="483:28" pos:end="483:41">(<argument pos:start="483:29" pos:end="483:34"><expr pos:start="483:29" pos:end="483:34"><name pos:start="483:29" pos:end="483:34">out_bs</name></expr></argument>, <argument pos:start="483:37" pos:end="483:40"><expr pos:start="483:37" pos:end="483:40"><operator pos:start="483:37" pos:end="483:37">&amp;</operator><name pos:start="483:38" pos:end="483:40">bdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="485:9" pos:end="491:9"><if pos:start="485:9" pos:end="491:9">if <condition pos:start="485:12" pos:end="485:20">(<expr pos:start="485:13" pos:end="485:19"><name pos:start="485:13" pos:end="485:15">ret</name> <operator pos:start="485:17" pos:end="485:17">&lt;</operator> <literal type="number" pos:start="485:19" pos:end="485:19">0</literal></expr>)</condition> <block pos:start="485:22" pos:end="491:9">{<block_content pos:start="487:13" pos:end="489:21">

            <expr_stmt pos:start="487:13" pos:end="487:60"><expr pos:start="487:13" pos:end="487:59"><call pos:start="487:13" pos:end="487:59"><name pos:start="487:13" pos:end="487:24">error_report</name><argument_list pos:start="487:25" pos:end="487:59">(<argument pos:start="487:26" pos:end="487:58"><expr pos:start="487:26" pos:end="487:58"><literal type="string" pos:start="487:26" pos:end="487:58">"could not get block driver info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="489:13" pos:end="489:21">goto <name pos:start="489:18" pos:end="489:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="493:9" pos:end="493:40"><expr pos:start="493:9" pos:end="493:39"><name pos:start="493:9" pos:end="493:20">cluster_size</name> <operator pos:start="493:22" pos:end="493:22">=</operator> <name pos:start="493:24" pos:end="493:39"><name pos:start="493:24" pos:end="493:26">bdi</name><operator pos:start="493:27" pos:end="493:27">.</operator><name pos:start="493:28" pos:end="493:39">cluster_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="495:9" pos:end="503:9"><if pos:start="495:9" pos:end="503:9">if <condition pos:start="495:12" pos:end="495:60">(<expr pos:start="495:13" pos:end="495:59"><name pos:start="495:13" pos:end="495:24">cluster_size</name> <operator pos:start="495:26" pos:end="495:27">&lt;=</operator> <literal type="number" pos:start="495:29" pos:end="495:29">0</literal> <operator pos:start="495:31" pos:end="495:32">||</operator> <name pos:start="495:34" pos:end="495:45">cluster_size</name> <operator pos:start="495:47" pos:end="495:47">&gt;</operator> <name pos:start="495:49" pos:end="495:59">IO_BUF_SIZE</name></expr>)</condition> <block pos:start="495:62" pos:end="503:9">{<block_content pos:start="497:13" pos:end="501:21">

            <expr_stmt pos:start="497:13" pos:end="497:49"><expr pos:start="497:13" pos:end="497:48"><call pos:start="497:13" pos:end="497:48"><name pos:start="497:13" pos:end="497:24">error_report</name><argument_list pos:start="497:25" pos:end="497:48">(<argument pos:start="497:26" pos:end="497:47"><expr pos:start="497:26" pos:end="497:47"><literal type="string" pos:start="497:26" pos:end="497:47">"invalid cluster size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="499:13" pos:end="499:21"><expr pos:start="499:13" pos:end="499:20"><name pos:start="499:13" pos:end="499:15">ret</name> <operator pos:start="499:17" pos:end="499:17">=</operator> <operator pos:start="499:19" pos:end="499:19">-</operator><literal type="number" pos:start="499:20" pos:end="499:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="501:13" pos:end="501:21">goto <name pos:start="501:18" pos:end="501:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="505:9" pos:end="505:44"><expr pos:start="505:9" pos:end="505:43"><name pos:start="505:9" pos:end="505:23">cluster_sectors</name> <operator pos:start="505:25" pos:end="505:25">=</operator> <name pos:start="505:27" pos:end="505:38">cluster_size</name> <operator pos:start="505:40" pos:end="505:41">&gt;&gt;</operator> <literal type="number" pos:start="505:43" pos:end="505:43">9</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="507:9" pos:end="507:23"><expr pos:start="507:9" pos:end="507:22"><name pos:start="507:9" pos:end="507:18">sector_num</name> <operator pos:start="507:20" pos:end="507:20">=</operator> <literal type="number" pos:start="507:22" pos:end="507:22">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="511:9" pos:end="511:35"><expr pos:start="511:9" pos:end="511:34"><name pos:start="511:9" pos:end="511:18">nb_sectors</name> <operator pos:start="511:20" pos:end="511:20">=</operator> <name pos:start="511:22" pos:end="511:34">total_sectors</name></expr>;</expr_stmt>

        <expr_stmt pos:start="513:9" pos:end="515:60"><expr pos:start="513:9" pos:end="515:59"><name pos:start="513:9" pos:end="513:22">local_progress</name> <operator pos:start="513:24" pos:end="513:24">=</operator> <operator pos:start="513:26" pos:end="513:26">(</operator><name pos:start="513:27" pos:end="513:31">float</name><operator pos:start="513:32" pos:end="513:32">)</operator><literal type="number" pos:start="513:33" pos:end="513:35">100</literal> <operator pos:start="513:37" pos:end="513:37">/</operator>

            <operator pos:start="515:13" pos:end="515:13">(</operator><name pos:start="515:14" pos:end="515:23">nb_sectors</name> <operator pos:start="515:25" pos:end="515:25">/</operator> <call pos:start="515:27" pos:end="515:58"><name pos:start="515:27" pos:end="515:29">MIN</name><argument_list pos:start="515:30" pos:end="515:58">(<argument pos:start="515:31" pos:end="515:40"><expr pos:start="515:31" pos:end="515:40"><name pos:start="515:31" pos:end="515:40">nb_sectors</name></expr></argument>, <argument pos:start="515:43" pos:end="515:57"><expr pos:start="515:43" pos:end="515:57"><name pos:start="515:43" pos:end="515:57">cluster_sectors</name></expr></argument>)</argument_list></call><operator pos:start="515:59" pos:end="515:59">)</operator></expr>;</expr_stmt>



        <for pos:start="519:9" pos:end="641:9">for<control pos:start="519:12" pos:end="519:15">(<init pos:start="519:13" pos:end="519:13">;</init><condition pos:start="519:14" pos:end="519:14">;</condition><incr/>)</control> <block pos:start="519:17" pos:end="641:9">{<block_content pos:start="521:13" pos:end="639:53">

            <decl_stmt pos:start="521:13" pos:end="521:27"><decl pos:start="521:13" pos:end="521:26"><type pos:start="521:13" pos:end="521:19"><name pos:start="521:13" pos:end="521:19">int64_t</name></type> <name pos:start="521:21" pos:end="521:26">bs_num</name></decl>;</decl_stmt>

            <decl_stmt pos:start="523:13" pos:end="523:26"><decl pos:start="523:13" pos:end="523:25"><type pos:start="523:13" pos:end="523:15"><name pos:start="523:13" pos:end="523:15">int</name></type> <name pos:start="523:17" pos:end="523:25">remainder</name></decl>;</decl_stmt>

            <decl_stmt pos:start="525:13" pos:end="525:26"><decl pos:start="525:13" pos:end="525:25"><type pos:start="525:13" pos:end="525:21"><name pos:start="525:13" pos:end="525:19">uint8_t</name> <modifier pos:start="525:21" pos:end="525:21">*</modifier></type><name pos:start="525:22" pos:end="525:25">buf2</name></decl>;</decl_stmt>



            <expr_stmt pos:start="529:13" pos:end="529:52"><expr pos:start="529:13" pos:end="529:51"><name pos:start="529:13" pos:end="529:22">nb_sectors</name> <operator pos:start="529:24" pos:end="529:24">=</operator> <name pos:start="529:26" pos:end="529:38">total_sectors</name> <operator pos:start="529:40" pos:end="529:40">-</operator> <name pos:start="529:42" pos:end="529:51">sector_num</name></expr>;</expr_stmt>

            <if_stmt pos:start="531:13" pos:end="533:22"><if pos:start="531:13" pos:end="533:22">if <condition pos:start="531:16" pos:end="531:32">(<expr pos:start="531:17" pos:end="531:31"><name pos:start="531:17" pos:end="531:26">nb_sectors</name> <operator pos:start="531:28" pos:end="531:29">&lt;=</operator> <literal type="number" pos:start="531:31" pos:end="531:31">0</literal></expr>)</condition><block type="pseudo" pos:start="533:17" pos:end="533:22"><block_content pos:start="533:17" pos:end="533:22">

                <break pos:start="533:17" pos:end="533:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="535:13" pos:end="541:31"><if pos:start="535:13" pos:end="537:36">if <condition pos:start="535:16" pos:end="535:46">(<expr pos:start="535:17" pos:end="535:45"><name pos:start="535:17" pos:end="535:26">nb_sectors</name> <operator pos:start="535:28" pos:end="535:29">&gt;=</operator> <name pos:start="535:31" pos:end="535:45">cluster_sectors</name></expr>)</condition><block type="pseudo" pos:start="537:17" pos:end="537:36"><block_content pos:start="537:17" pos:end="537:36">

                <expr_stmt pos:start="537:17" pos:end="537:36"><expr pos:start="537:17" pos:end="537:35"><name pos:start="537:17" pos:end="537:17">n</name> <operator pos:start="537:19" pos:end="537:19">=</operator> <name pos:start="537:21" pos:end="537:35">cluster_sectors</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="539:13" pos:end="541:31">else<block type="pseudo" pos:start="541:17" pos:end="541:31"><block_content pos:start="541:17" pos:end="541:31">

                <expr_stmt pos:start="541:17" pos:end="541:31"><expr pos:start="541:17" pos:end="541:30"><name pos:start="541:17" pos:end="541:17">n</name> <operator pos:start="541:19" pos:end="541:19">=</operator> <name pos:start="541:21" pos:end="541:30">nb_sectors</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="545:13" pos:end="545:44"><expr pos:start="545:13" pos:end="545:43"><name pos:start="545:13" pos:end="545:18">bs_num</name> <operator pos:start="545:20" pos:end="545:20">=</operator> <name pos:start="545:22" pos:end="545:31">sector_num</name> <operator pos:start="545:33" pos:end="545:33">-</operator> <name pos:start="545:35" pos:end="545:43">bs_offset</name></expr>;</expr_stmt>

            <expr_stmt pos:start="547:13" pos:end="547:33"><expr pos:start="547:13" pos:end="547:32"><call pos:start="547:13" pos:end="547:32"><name pos:start="547:13" pos:end="547:18">assert</name> <argument_list pos:start="547:20" pos:end="547:32">(<argument pos:start="547:21" pos:end="547:31"><expr pos:start="547:21" pos:end="547:31"><name pos:start="547:21" pos:end="547:26">bs_num</name> <operator pos:start="547:28" pos:end="547:29">&gt;=</operator> <literal type="number" pos:start="547:31" pos:end="547:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="549:13" pos:end="549:26"><expr pos:start="549:13" pos:end="549:25"><name pos:start="549:13" pos:end="549:21">remainder</name> <operator pos:start="549:23" pos:end="549:23">=</operator> <name pos:start="549:25" pos:end="549:25">n</name></expr>;</expr_stmt>

            <expr_stmt pos:start="551:13" pos:end="551:23"><expr pos:start="551:13" pos:end="551:22"><name pos:start="551:13" pos:end="551:16">buf2</name> <operator pos:start="551:18" pos:end="551:18">=</operator> <name pos:start="551:20" pos:end="551:22">buf</name></expr>;</expr_stmt>

            <while pos:start="553:13" pos:end="607:13">while <condition pos:start="553:19" pos:end="553:33">(<expr pos:start="553:20" pos:end="553:32"><name pos:start="553:20" pos:end="553:28">remainder</name> <operator pos:start="553:30" pos:end="553:30">&gt;</operator> <literal type="number" pos:start="553:32" pos:end="553:32">0</literal></expr>)</condition> <block pos:start="553:35" pos:end="607:13">{<block_content pos:start="555:17" pos:end="605:34">

                <decl_stmt pos:start="555:17" pos:end="555:25"><decl pos:start="555:17" pos:end="555:24"><type pos:start="555:17" pos:end="555:19"><name pos:start="555:17" pos:end="555:19">int</name></type> <name pos:start="555:21" pos:end="555:24">nlow</name></decl>;</decl_stmt>

                <while pos:start="557:17" pos:end="575:17">while <condition pos:start="557:23" pos:end="557:44">(<expr pos:start="557:24" pos:end="557:43"><name pos:start="557:24" pos:end="557:29">bs_num</name> <operator pos:start="557:31" pos:end="557:32">==</operator> <name pos:start="557:34" pos:end="557:43">bs_sectors</name></expr>)</condition> <block pos:start="557:46" pos:end="575:17">{<block_content pos:start="559:21" pos:end="567:31">

                    <expr_stmt pos:start="559:21" pos:end="559:27"><expr pos:start="559:21" pos:end="559:26"><name pos:start="559:21" pos:end="559:24">bs_i</name><operator pos:start="559:25" pos:end="559:26">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="561:21" pos:end="561:41"><expr pos:start="561:21" pos:end="561:40"><call pos:start="561:21" pos:end="561:40"><name pos:start="561:21" pos:end="561:26">assert</name> <argument_list pos:start="561:28" pos:end="561:40">(<argument pos:start="561:29" pos:end="561:39"><expr pos:start="561:29" pos:end="561:39"><name pos:start="561:29" pos:end="561:32">bs_i</name> <operator pos:start="561:34" pos:end="561:34">&lt;</operator> <name pos:start="561:36" pos:end="561:39">bs_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="563:21" pos:end="563:44"><expr pos:start="563:21" pos:end="563:43"><name pos:start="563:21" pos:end="563:29">bs_offset</name> <operator pos:start="563:31" pos:end="563:32">+=</operator> <name pos:start="563:34" pos:end="563:43">bs_sectors</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="565:21" pos:end="565:61"><expr pos:start="565:21" pos:end="565:60"><call pos:start="565:21" pos:end="565:60"><name pos:start="565:21" pos:end="565:37">bdrv_get_geometry</name><argument_list pos:start="565:38" pos:end="565:60">(<argument pos:start="565:39" pos:end="565:46"><expr pos:start="565:39" pos:end="565:46"><name pos:start="565:39" pos:end="565:46"><name pos:start="565:39" pos:end="565:40">bs</name><index pos:start="565:41" pos:end="565:46">[<expr pos:start="565:42" pos:end="565:45"><name pos:start="565:42" pos:end="565:45">bs_i</name></expr>]</index></name></expr></argument>, <argument pos:start="565:49" pos:end="565:59"><expr pos:start="565:49" pos:end="565:59"><operator pos:start="565:49" pos:end="565:49">&amp;</operator><name pos:start="565:50" pos:end="565:59">bs_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="567:21" pos:end="567:31"><expr pos:start="567:21" pos:end="567:30"><name pos:start="567:21" pos:end="567:26">bs_num</name> <operator pos:start="567:28" pos:end="567:28">=</operator> <literal type="number" pos:start="567:30" pos:end="567:30">0</literal></expr>;</expr_stmt>

                    <comment type="block" pos:start="569:21" pos:end="573:73">/* printf("changing part: sector_num=%" PRId64 ", "

                       "bs_i=%d, bs_offset=%" PRId64 ", bs_sectors=%" PRId64

                       "\n", sector_num, bs_i, bs_offset, bs_sectors); */</comment>

                </block_content>}</block></while>

                <expr_stmt pos:start="577:17" pos:end="577:45"><expr pos:start="577:17" pos:end="577:44"><call pos:start="577:17" pos:end="577:44"><name pos:start="577:17" pos:end="577:22">assert</name> <argument_list pos:start="577:24" pos:end="577:44">(<argument pos:start="577:25" pos:end="577:43"><expr pos:start="577:25" pos:end="577:43"><name pos:start="577:25" pos:end="577:30">bs_num</name> <operator pos:start="577:32" pos:end="577:32">&lt;</operator> <name pos:start="577:34" pos:end="577:43">bs_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="581:17" pos:end="581:91"><expr pos:start="581:17" pos:end="581:90"><name pos:start="581:17" pos:end="581:20">nlow</name> <operator pos:start="581:22" pos:end="581:22">=</operator> <ternary pos:start="581:24" pos:end="581:90"><condition pos:start="581:24" pos:end="581:58"><expr pos:start="581:24" pos:end="581:56"><operator pos:start="581:24" pos:end="581:24">(</operator><name pos:start="581:25" pos:end="581:33">remainder</name> <operator pos:start="581:35" pos:end="581:35">&gt;</operator> <name pos:start="581:37" pos:end="581:46">bs_sectors</name> <operator pos:start="581:48" pos:end="581:48">-</operator> <name pos:start="581:50" pos:end="581:55">bs_num</name><operator pos:start="581:56" pos:end="581:56">)</operator></expr> ?</condition><then pos:start="581:60" pos:end="581:78"> <expr pos:start="581:60" pos:end="581:78"><name pos:start="581:60" pos:end="581:69">bs_sectors</name> <operator pos:start="581:71" pos:end="581:71">-</operator> <name pos:start="581:73" pos:end="581:78">bs_num</name></expr> </then><else pos:start="581:80" pos:end="581:90">: <expr pos:start="581:82" pos:end="581:90"><name pos:start="581:82" pos:end="581:90">remainder</name></expr></else></ternary></expr>;</expr_stmt>



                <expr_stmt pos:start="585:17" pos:end="585:62"><expr pos:start="585:17" pos:end="585:61"><name pos:start="585:17" pos:end="585:19">ret</name> <operator pos:start="585:21" pos:end="585:21">=</operator> <call pos:start="585:23" pos:end="585:61"><name pos:start="585:23" pos:end="585:31">bdrv_read</name><argument_list pos:start="585:32" pos:end="585:61">(<argument pos:start="585:33" pos:end="585:40"><expr pos:start="585:33" pos:end="585:40"><name pos:start="585:33" pos:end="585:40"><name pos:start="585:33" pos:end="585:34">bs</name><index pos:start="585:35" pos:end="585:40">[<expr pos:start="585:36" pos:end="585:39"><name pos:start="585:36" pos:end="585:39">bs_i</name></expr>]</index></name></expr></argument>, <argument pos:start="585:43" pos:end="585:48"><expr pos:start="585:43" pos:end="585:48"><name pos:start="585:43" pos:end="585:48">bs_num</name></expr></argument>, <argument pos:start="585:51" pos:end="585:54"><expr pos:start="585:51" pos:end="585:54"><name pos:start="585:51" pos:end="585:54">buf2</name></expr></argument>, <argument pos:start="585:57" pos:end="585:60"><expr pos:start="585:57" pos:end="585:60"><name pos:start="585:57" pos:end="585:60">nlow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="587:17" pos:end="595:17"><if pos:start="587:17" pos:end="595:17">if <condition pos:start="587:20" pos:end="587:28">(<expr pos:start="587:21" pos:end="587:27"><name pos:start="587:21" pos:end="587:23">ret</name> <operator pos:start="587:25" pos:end="587:25">&lt;</operator> <literal type="number" pos:start="587:27" pos:end="587:27">0</literal></expr>)</condition> <block pos:start="587:30" pos:end="595:17">{<block_content pos:start="589:21" pos:end="593:29">

                    <expr_stmt pos:start="589:21" pos:end="591:57"><expr pos:start="589:21" pos:end="591:56"><call pos:start="589:21" pos:end="591:56"><name pos:start="589:21" pos:end="589:32">error_report</name><argument_list pos:start="589:33" pos:end="591:56">(<argument pos:start="589:34" pos:end="589:77"><expr pos:start="589:34" pos:end="589:77"><literal type="string" pos:start="589:34" pos:end="589:63">"error while reading sector %"</literal> <name pos:start="589:65" pos:end="589:70">PRId64</name> <literal type="string" pos:start="589:72" pos:end="589:77">": %s"</literal></expr></argument>,

                                 <argument pos:start="591:34" pos:end="591:39"><expr pos:start="591:34" pos:end="591:39"><name pos:start="591:34" pos:end="591:39">bs_num</name></expr></argument>, <argument pos:start="591:42" pos:end="591:55"><expr pos:start="591:42" pos:end="591:55"><call pos:start="591:42" pos:end="591:55"><name pos:start="591:42" pos:end="591:49">strerror</name><argument_list pos:start="591:50" pos:end="591:55">(<argument pos:start="591:51" pos:end="591:54"><expr pos:start="591:51" pos:end="591:54"><operator pos:start="591:51" pos:end="591:51">-</operator><name pos:start="591:52" pos:end="591:54">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="593:21" pos:end="593:29">goto <name pos:start="593:26" pos:end="593:28">out</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="599:17" pos:end="599:35"><expr pos:start="599:17" pos:end="599:34"><name pos:start="599:17" pos:end="599:20">buf2</name> <operator pos:start="599:22" pos:end="599:23">+=</operator> <name pos:start="599:25" pos:end="599:28">nlow</name> <operator pos:start="599:30" pos:end="599:30">*</operator> <literal type="number" pos:start="599:32" pos:end="599:34">512</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="601:17" pos:end="601:31"><expr pos:start="601:17" pos:end="601:30"><name pos:start="601:17" pos:end="601:22">bs_num</name> <operator pos:start="601:24" pos:end="601:25">+=</operator> <name pos:start="601:27" pos:end="601:30">nlow</name></expr>;</expr_stmt>



                <expr_stmt pos:start="605:17" pos:end="605:34"><expr pos:start="605:17" pos:end="605:33"><name pos:start="605:17" pos:end="605:25">remainder</name> <operator pos:start="605:27" pos:end="605:28">-=</operator> <name pos:start="605:30" pos:end="605:33">nlow</name></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="609:13" pos:end="609:36"><expr pos:start="609:13" pos:end="609:35"><call pos:start="609:13" pos:end="609:35"><name pos:start="609:13" pos:end="609:18">assert</name> <argument_list pos:start="609:20" pos:end="609:35">(<argument pos:start="609:21" pos:end="609:34"><expr pos:start="609:21" pos:end="609:34"><name pos:start="609:21" pos:end="609:29">remainder</name> <operator pos:start="609:31" pos:end="609:32">==</operator> <literal type="number" pos:start="609:34" pos:end="609:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="613:13" pos:end="617:13"><if pos:start="613:13" pos:end="617:13">if <condition pos:start="613:16" pos:end="613:36">(<expr pos:start="613:17" pos:end="613:35"><name pos:start="613:17" pos:end="613:17">n</name> <operator pos:start="613:19" pos:end="613:19">&lt;</operator> <name pos:start="613:21" pos:end="613:35">cluster_sectors</name></expr>)</condition> <block pos:start="613:38" pos:end="617:13">{<block_content pos:start="615:17" pos:end="615:65">

                <expr_stmt pos:start="615:17" pos:end="615:65"><expr pos:start="615:17" pos:end="615:64"><call pos:start="615:17" pos:end="615:64"><name pos:start="615:17" pos:end="615:22">memset</name><argument_list pos:start="615:23" pos:end="615:64">(<argument pos:start="615:24" pos:end="615:36"><expr pos:start="615:24" pos:end="615:36"><name pos:start="615:24" pos:end="615:26">buf</name> <operator pos:start="615:28" pos:end="615:28">+</operator> <name pos:start="615:30" pos:end="615:30">n</name> <operator pos:start="615:32" pos:end="615:32">*</operator> <literal type="number" pos:start="615:34" pos:end="615:36">512</literal></expr></argument>, <argument pos:start="615:39" pos:end="615:39"><expr pos:start="615:39" pos:end="615:39"><literal type="number" pos:start="615:39" pos:end="615:39">0</literal></expr></argument>, <argument pos:start="615:42" pos:end="615:63"><expr pos:start="615:42" pos:end="615:63"><name pos:start="615:42" pos:end="615:53">cluster_size</name> <operator pos:start="615:55" pos:end="615:55">-</operator> <name pos:start="615:57" pos:end="615:57">n</name> <operator pos:start="615:59" pos:end="615:59">*</operator> <literal type="number" pos:start="615:61" pos:end="615:63">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="619:13" pos:end="635:13"><if pos:start="619:13" pos:end="635:13">if <condition pos:start="619:16" pos:end="619:51">(<expr pos:start="619:17" pos:end="619:50"><operator pos:start="619:17" pos:end="619:17">!</operator><call pos:start="619:18" pos:end="619:50"><name pos:start="619:18" pos:end="619:31">buffer_is_zero</name><argument_list pos:start="619:32" pos:end="619:50">(<argument pos:start="619:33" pos:end="619:35"><expr pos:start="619:33" pos:end="619:35"><name pos:start="619:33" pos:end="619:35">buf</name></expr></argument>, <argument pos:start="619:38" pos:end="619:49"><expr pos:start="619:38" pos:end="619:49"><name pos:start="619:38" pos:end="619:49">cluster_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="619:53" pos:end="635:13">{<block_content pos:start="621:17" pos:end="633:17">

                <expr_stmt pos:start="621:17" pos:end="623:61"><expr pos:start="621:17" pos:end="623:60"><name pos:start="621:17" pos:end="621:19">ret</name> <operator pos:start="621:21" pos:end="621:21">=</operator> <call pos:start="621:23" pos:end="623:60"><name pos:start="621:23" pos:end="621:43">bdrv_write_compressed</name><argument_list pos:start="621:44" pos:end="623:60">(<argument pos:start="621:45" pos:end="621:50"><expr pos:start="621:45" pos:end="621:50"><name pos:start="621:45" pos:end="621:50">out_bs</name></expr></argument>, <argument pos:start="621:53" pos:end="621:62"><expr pos:start="621:53" pos:end="621:62"><name pos:start="621:53" pos:end="621:62">sector_num</name></expr></argument>, <argument pos:start="621:65" pos:end="621:67"><expr pos:start="621:65" pos:end="621:67"><name pos:start="621:65" pos:end="621:67">buf</name></expr></argument>,

                                            <argument pos:start="623:45" pos:end="623:59"><expr pos:start="623:45" pos:end="623:59"><name pos:start="623:45" pos:end="623:59">cluster_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="625:17" pos:end="633:17"><if pos:start="625:17" pos:end="633:17">if <condition pos:start="625:20" pos:end="625:29">(<expr pos:start="625:21" pos:end="625:28"><name pos:start="625:21" pos:end="625:23">ret</name> <operator pos:start="625:25" pos:end="625:26">!=</operator> <literal type="number" pos:start="625:28" pos:end="625:28">0</literal></expr>)</condition> <block pos:start="625:31" pos:end="633:17">{<block_content pos:start="627:21" pos:end="631:29">

                    <expr_stmt pos:start="627:21" pos:end="629:69"><expr pos:start="627:21" pos:end="629:68"><call pos:start="627:21" pos:end="629:68"><name pos:start="627:21" pos:end="627:32">error_report</name><argument_list pos:start="627:33" pos:end="629:68">(<argument pos:start="627:34" pos:end="629:39"><expr pos:start="627:34" pos:end="629:39"><literal type="string" pos:start="627:34" pos:end="627:67">"error while compressing sector %"</literal> <name pos:start="627:69" pos:end="627:74">PRId64</name>

                                 <literal type="string" pos:start="629:34" pos:end="629:39">": %s"</literal></expr></argument>, <argument pos:start="629:42" pos:end="629:51"><expr pos:start="629:42" pos:end="629:51"><name pos:start="629:42" pos:end="629:51">sector_num</name></expr></argument>, <argument pos:start="629:54" pos:end="629:67"><expr pos:start="629:54" pos:end="629:67"><call pos:start="629:54" pos:end="629:67"><name pos:start="629:54" pos:end="629:61">strerror</name><argument_list pos:start="629:62" pos:end="629:67">(<argument pos:start="629:63" pos:end="629:66"><expr pos:start="629:63" pos:end="629:66"><operator pos:start="629:63" pos:end="629:63">-</operator><name pos:start="629:64" pos:end="629:66">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="631:21" pos:end="631:29">goto <name pos:start="631:26" pos:end="631:28">out</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="637:13" pos:end="637:28"><expr pos:start="637:13" pos:end="637:27"><name pos:start="637:13" pos:end="637:22">sector_num</name> <operator pos:start="637:24" pos:end="637:25">+=</operator> <name pos:start="637:27" pos:end="637:27">n</name></expr>;</expr_stmt>

            <expr_stmt pos:start="639:13" pos:end="639:53"><expr pos:start="639:13" pos:end="639:52"><call pos:start="639:13" pos:end="639:52"><name pos:start="639:13" pos:end="639:31">qemu_progress_print</name><argument_list pos:start="639:32" pos:end="639:52">(<argument pos:start="639:33" pos:end="639:46"><expr pos:start="639:33" pos:end="639:46"><name pos:start="639:33" pos:end="639:46">local_progress</name></expr></argument>, <argument pos:start="639:49" pos:end="639:51"><expr pos:start="639:49" pos:end="639:51"><literal type="number" pos:start="639:49" pos:end="639:51">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="643:9" pos:end="643:33">/* signal EOF to align */</comment>

        <expr_stmt pos:start="645:9" pos:end="645:50"><expr pos:start="645:9" pos:end="645:49"><call pos:start="645:9" pos:end="645:49"><name pos:start="645:9" pos:end="645:29">bdrv_write_compressed</name><argument_list pos:start="645:30" pos:end="645:49">(<argument pos:start="645:31" pos:end="645:36"><expr pos:start="645:31" pos:end="645:36"><name pos:start="645:31" pos:end="645:36">out_bs</name></expr></argument>, <argument pos:start="645:39" pos:end="645:39"><expr pos:start="645:39" pos:end="645:39"><literal type="number" pos:start="645:39" pos:end="645:39">0</literal></expr></argument>, <argument pos:start="645:42" pos:end="645:45"><expr pos:start="645:42" pos:end="645:45"><name pos:start="645:42" pos:end="645:45">NULL</name></expr></argument>, <argument pos:start="645:48" pos:end="645:48"><expr pos:start="645:48" pos:end="645:48"><literal type="number" pos:start="645:48" pos:end="645:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="647:7" pos:end="817:5">else <block pos:start="647:12" pos:end="817:5">{<block_content pos:start="649:9" pos:end="815:9">

        <decl_stmt pos:start="649:9" pos:end="649:55"><decl pos:start="649:9" pos:end="649:54"><type pos:start="649:9" pos:end="649:11"><name pos:start="649:9" pos:end="649:11">int</name></type> <name pos:start="649:13" pos:end="649:25">has_zero_init</name> <init pos:start="649:27" pos:end="649:54">= <expr pos:start="649:29" pos:end="649:54"><call pos:start="649:29" pos:end="649:54"><name pos:start="649:29" pos:end="649:46">bdrv_has_zero_init</name><argument_list pos:start="649:47" pos:end="649:54">(<argument pos:start="649:48" pos:end="649:53"><expr pos:start="649:48" pos:end="649:53"><name pos:start="649:48" pos:end="649:53">out_bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="653:9" pos:end="653:23"><expr pos:start="653:9" pos:end="653:22"><name pos:start="653:9" pos:end="653:18">sector_num</name> <operator pos:start="653:20" pos:end="653:20">=</operator> <literal type="number" pos:start="653:22" pos:end="653:22">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="653:25" pos:end="653:67">// total number of sectors converted so far</comment>

        <expr_stmt pos:start="655:9" pos:end="655:48"><expr pos:start="655:9" pos:end="655:47"><name pos:start="655:9" pos:end="655:18">nb_sectors</name> <operator pos:start="655:20" pos:end="655:20">=</operator> <name pos:start="655:22" pos:end="655:34">total_sectors</name> <operator pos:start="655:36" pos:end="655:36">-</operator> <name pos:start="655:38" pos:end="655:47">sector_num</name></expr>;</expr_stmt>

        <expr_stmt pos:start="657:9" pos:end="659:62"><expr pos:start="657:9" pos:end="659:61"><name pos:start="657:9" pos:end="657:22">local_progress</name> <operator pos:start="657:24" pos:end="657:24">=</operator> <operator pos:start="657:26" pos:end="657:26">(</operator><name pos:start="657:27" pos:end="657:31">float</name><operator pos:start="657:32" pos:end="657:32">)</operator><literal type="number" pos:start="657:33" pos:end="657:35">100</literal> <operator pos:start="657:37" pos:end="657:37">/</operator>

            <operator pos:start="659:13" pos:end="659:13">(</operator><name pos:start="659:14" pos:end="659:23">nb_sectors</name> <operator pos:start="659:25" pos:end="659:25">/</operator> <call pos:start="659:27" pos:end="659:60"><name pos:start="659:27" pos:end="659:29">MIN</name><argument_list pos:start="659:30" pos:end="659:60">(<argument pos:start="659:31" pos:end="659:40"><expr pos:start="659:31" pos:end="659:40"><name pos:start="659:31" pos:end="659:40">nb_sectors</name></expr></argument>, <argument pos:start="659:43" pos:end="659:59"><expr pos:start="659:43" pos:end="659:59"><name pos:start="659:43" pos:end="659:53">IO_BUF_SIZE</name> <operator pos:start="659:55" pos:end="659:55">/</operator> <literal type="number" pos:start="659:57" pos:end="659:59">512</literal></expr></argument>)</argument_list></call><operator pos:start="659:61" pos:end="659:61">)</operator></expr>;</expr_stmt>



        <for pos:start="663:9" pos:end="815:9">for<control pos:start="663:12" pos:end="663:15">(<init pos:start="663:13" pos:end="663:13">;</init><condition pos:start="663:14" pos:end="663:14">;</condition><incr/>)</control> <block pos:start="663:17" pos:end="815:9">{<block_content pos:start="665:13" pos:end="813:53">

            <expr_stmt pos:start="665:13" pos:end="665:52"><expr pos:start="665:13" pos:end="665:51"><name pos:start="665:13" pos:end="665:22">nb_sectors</name> <operator pos:start="665:24" pos:end="665:24">=</operator> <name pos:start="665:26" pos:end="665:38">total_sectors</name> <operator pos:start="665:40" pos:end="665:40">-</operator> <name pos:start="665:42" pos:end="665:51">sector_num</name></expr>;</expr_stmt>

            <if_stmt pos:start="667:13" pos:end="671:13"><if pos:start="667:13" pos:end="671:13">if <condition pos:start="667:16" pos:end="667:32">(<expr pos:start="667:17" pos:end="667:31"><name pos:start="667:17" pos:end="667:26">nb_sectors</name> <operator pos:start="667:28" pos:end="667:29">&lt;=</operator> <literal type="number" pos:start="667:31" pos:end="667:31">0</literal></expr>)</condition> <block pos:start="667:34" pos:end="671:13">{<block_content pos:start="669:17" pos:end="669:22">

                <break pos:start="669:17" pos:end="669:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="673:13" pos:end="681:13"><if pos:start="673:13" pos:end="677:13">if <condition pos:start="673:16" pos:end="673:50">(<expr pos:start="673:17" pos:end="673:49"><name pos:start="673:17" pos:end="673:26">nb_sectors</name> <operator pos:start="673:28" pos:end="673:29">&gt;=</operator> <operator pos:start="673:31" pos:end="673:31">(</operator><name pos:start="673:32" pos:end="673:42">IO_BUF_SIZE</name> <operator pos:start="673:44" pos:end="673:44">/</operator> <literal type="number" pos:start="673:46" pos:end="673:48">512</literal><operator pos:start="673:49" pos:end="673:49">)</operator></expr>)</condition> <block pos:start="673:52" pos:end="677:13">{<block_content pos:start="675:17" pos:end="675:40">

                <expr_stmt pos:start="675:17" pos:end="675:40"><expr pos:start="675:17" pos:end="675:39"><name pos:start="675:17" pos:end="675:17">n</name> <operator pos:start="675:19" pos:end="675:19">=</operator> <operator pos:start="675:21" pos:end="675:21">(</operator><name pos:start="675:22" pos:end="675:32">IO_BUF_SIZE</name> <operator pos:start="675:34" pos:end="675:34">/</operator> <literal type="number" pos:start="675:36" pos:end="675:38">512</literal><operator pos:start="675:39" pos:end="675:39">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="677:15" pos:end="681:13">else <block pos:start="677:20" pos:end="681:13">{<block_content pos:start="679:17" pos:end="679:31">

                <expr_stmt pos:start="679:17" pos:end="679:31"><expr pos:start="679:17" pos:end="679:30"><name pos:start="679:17" pos:end="679:17">n</name> <operator pos:start="679:19" pos:end="679:19">=</operator> <name pos:start="679:21" pos:end="679:30">nb_sectors</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <while pos:start="685:13" pos:end="701:13">while <condition pos:start="685:19" pos:end="685:56">(<expr pos:start="685:20" pos:end="685:55"><name pos:start="685:20" pos:end="685:29">sector_num</name> <operator pos:start="685:31" pos:end="685:31">-</operator> <name pos:start="685:33" pos:end="685:41">bs_offset</name> <operator pos:start="685:43" pos:end="685:44">&gt;=</operator> <name pos:start="685:46" pos:end="685:55">bs_sectors</name></expr>)</condition> <block pos:start="685:58" pos:end="701:13">{<block_content pos:start="687:17" pos:end="693:57">

                <expr_stmt pos:start="687:17" pos:end="687:24"><expr pos:start="687:17" pos:end="687:23"><name pos:start="687:17" pos:end="687:20">bs_i</name> <operator pos:start="687:22" pos:end="687:23">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="689:17" pos:end="689:37"><expr pos:start="689:17" pos:end="689:36"><call pos:start="689:17" pos:end="689:36"><name pos:start="689:17" pos:end="689:22">assert</name> <argument_list pos:start="689:24" pos:end="689:36">(<argument pos:start="689:25" pos:end="689:35"><expr pos:start="689:25" pos:end="689:35"><name pos:start="689:25" pos:end="689:28">bs_i</name> <operator pos:start="689:30" pos:end="689:30">&lt;</operator> <name pos:start="689:32" pos:end="689:35">bs_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="691:17" pos:end="691:40"><expr pos:start="691:17" pos:end="691:39"><name pos:start="691:17" pos:end="691:25">bs_offset</name> <operator pos:start="691:27" pos:end="691:28">+=</operator> <name pos:start="691:30" pos:end="691:39">bs_sectors</name></expr>;</expr_stmt>

                <expr_stmt pos:start="693:17" pos:end="693:57"><expr pos:start="693:17" pos:end="693:56"><call pos:start="693:17" pos:end="693:56"><name pos:start="693:17" pos:end="693:33">bdrv_get_geometry</name><argument_list pos:start="693:34" pos:end="693:56">(<argument pos:start="693:35" pos:end="693:42"><expr pos:start="693:35" pos:end="693:42"><name pos:start="693:35" pos:end="693:42"><name pos:start="693:35" pos:end="693:36">bs</name><index pos:start="693:37" pos:end="693:42">[<expr pos:start="693:38" pos:end="693:41"><name pos:start="693:38" pos:end="693:41">bs_i</name></expr>]</index></name></expr></argument>, <argument pos:start="693:45" pos:end="693:55"><expr pos:start="693:45" pos:end="693:55"><operator pos:start="693:45" pos:end="693:45">&amp;</operator><name pos:start="693:46" pos:end="693:55">bs_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="695:17" pos:end="699:63">/* printf("changing part: sector_num=%" PRId64 ", bs_i=%d, "

                  "bs_offset=%" PRId64 ", bs_sectors=%" PRId64 "\n",

                   sector_num, bs_i, bs_offset, bs_sectors); */</comment>

            </block_content>}</block></while>



            <if_stmt pos:start="705:13" pos:end="709:13"><if pos:start="705:13" pos:end="709:13">if <condition pos:start="705:16" pos:end="705:56">(<expr pos:start="705:17" pos:end="705:55"><name pos:start="705:17" pos:end="705:17">n</name> <operator pos:start="705:19" pos:end="705:19">&gt;</operator> <name pos:start="705:21" pos:end="705:29">bs_offset</name> <operator pos:start="705:31" pos:end="705:31">+</operator> <name pos:start="705:33" pos:end="705:42">bs_sectors</name> <operator pos:start="705:44" pos:end="705:44">-</operator> <name pos:start="705:46" pos:end="705:55">sector_num</name></expr>)</condition> <block pos:start="705:58" pos:end="709:13">{<block_content pos:start="707:17" pos:end="707:56">

                <expr_stmt pos:start="707:17" pos:end="707:56"><expr pos:start="707:17" pos:end="707:55"><name pos:start="707:17" pos:end="707:17">n</name> <operator pos:start="707:19" pos:end="707:19">=</operator> <name pos:start="707:21" pos:end="707:29">bs_offset</name> <operator pos:start="707:31" pos:end="707:31">+</operator> <name pos:start="707:33" pos:end="707:42">bs_sectors</name> <operator pos:start="707:44" pos:end="707:44">-</operator> <name pos:start="707:46" pos:end="707:55">sector_num</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="713:13" pos:end="747:13"><if pos:start="713:13" pos:end="743:13">if <condition pos:start="713:16" pos:end="713:30">(<expr pos:start="713:17" pos:end="713:29"><name pos:start="713:17" pos:end="713:29">has_zero_init</name></expr>)</condition> <block pos:start="713:32" pos:end="743:13">{<block_content pos:start="723:17" pos:end="741:17">

                <comment type="block" pos:start="715:17" pos:end="721:41">/* If the output image is being created as a copy on write image,

                   assume that sectors which are unallocated in the input image

                   are present in both the output's and input's base images (no

                   need to copy them). */</comment>

                <if_stmt pos:start="723:17" pos:end="741:17"><if pos:start="723:17" pos:end="741:17">if <condition pos:start="723:20" pos:end="723:32">(<expr pos:start="723:21" pos:end="723:31"><name pos:start="723:21" pos:end="723:31">out_baseimg</name></expr>)</condition> <block pos:start="723:34" pos:end="741:17">{<block_content pos:start="725:21" pos:end="739:27">

                    <if_stmt pos:start="725:21" pos:end="733:21"><if pos:start="725:21" pos:end="733:21">if <condition pos:start="725:24" pos:end="727:51">(<expr pos:start="725:25" pos:end="727:50"><operator pos:start="725:25" pos:end="725:25">!</operator><call pos:start="725:26" pos:end="727:50"><name pos:start="725:26" pos:end="725:42">bdrv_is_allocated</name><argument_list pos:start="725:43" pos:end="727:50">(<argument pos:start="725:44" pos:end="725:51"><expr pos:start="725:44" pos:end="725:51"><name pos:start="725:44" pos:end="725:51"><name pos:start="725:44" pos:end="725:45">bs</name><index pos:start="725:46" pos:end="725:51">[<expr pos:start="725:47" pos:end="725:50"><name pos:start="725:47" pos:end="725:50">bs_i</name></expr>]</index></name></expr></argument>, <argument pos:start="725:54" pos:end="725:75"><expr pos:start="725:54" pos:end="725:75"><name pos:start="725:54" pos:end="725:63">sector_num</name> <operator pos:start="725:65" pos:end="725:65">-</operator> <name pos:start="725:67" pos:end="725:75">bs_offset</name></expr></argument>,

                                           <argument pos:start="727:44" pos:end="727:44"><expr pos:start="727:44" pos:end="727:44"><name pos:start="727:44" pos:end="727:44">n</name></expr></argument>, <argument pos:start="727:47" pos:end="727:49"><expr pos:start="727:47" pos:end="727:49"><operator pos:start="727:47" pos:end="727:47">&amp;</operator><name pos:start="727:48" pos:end="727:49">n1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="727:53" pos:end="733:21">{<block_content pos:start="729:25" pos:end="731:33">

                        <expr_stmt pos:start="729:25" pos:end="729:41"><expr pos:start="729:25" pos:end="729:40"><name pos:start="729:25" pos:end="729:34">sector_num</name> <operator pos:start="729:36" pos:end="729:37">+=</operator> <name pos:start="729:39" pos:end="729:40">n1</name></expr>;</expr_stmt>

                        <continue pos:start="731:25" pos:end="731:33">continue;</continue>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="735:21" pos:end="737:84">/* The next 'n1' sectors are allocated in the input image. Copy

                       only those as they may be followed by unallocated sectors. */</comment>

                    <expr_stmt pos:start="739:21" pos:end="739:27"><expr pos:start="739:21" pos:end="739:26"><name pos:start="739:21" pos:end="739:21">n</name> <operator pos:start="739:23" pos:end="739:23">=</operator> <name pos:start="739:25" pos:end="739:26">n1</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="743:15" pos:end="747:13">else <block pos:start="743:20" pos:end="747:13">{<block_content pos:start="745:17" pos:end="745:23">

                <expr_stmt pos:start="745:17" pos:end="745:23"><expr pos:start="745:17" pos:end="745:22"><name pos:start="745:17" pos:end="745:18">n1</name> <operator pos:start="745:20" pos:end="745:20">=</operator> <name pos:start="745:22" pos:end="745:22">n</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="751:13" pos:end="751:70"><expr pos:start="751:13" pos:end="751:69"><name pos:start="751:13" pos:end="751:15">ret</name> <operator pos:start="751:17" pos:end="751:17">=</operator> <call pos:start="751:19" pos:end="751:69"><name pos:start="751:19" pos:end="751:27">bdrv_read</name><argument_list pos:start="751:28" pos:end="751:69">(<argument pos:start="751:29" pos:end="751:36"><expr pos:start="751:29" pos:end="751:36"><name pos:start="751:29" pos:end="751:36"><name pos:start="751:29" pos:end="751:30">bs</name><index pos:start="751:31" pos:end="751:36">[<expr pos:start="751:32" pos:end="751:35"><name pos:start="751:32" pos:end="751:35">bs_i</name></expr>]</index></name></expr></argument>, <argument pos:start="751:39" pos:end="751:60"><expr pos:start="751:39" pos:end="751:60"><name pos:start="751:39" pos:end="751:48">sector_num</name> <operator pos:start="751:50" pos:end="751:50">-</operator> <name pos:start="751:52" pos:end="751:60">bs_offset</name></expr></argument>, <argument pos:start="751:63" pos:end="751:65"><expr pos:start="751:63" pos:end="751:65"><name pos:start="751:63" pos:end="751:65">buf</name></expr></argument>, <argument pos:start="751:68" pos:end="751:68"><expr pos:start="751:68" pos:end="751:68"><name pos:start="751:68" pos:end="751:68">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="753:13" pos:end="761:13"><if pos:start="753:13" pos:end="761:13">if <condition pos:start="753:16" pos:end="753:24">(<expr pos:start="753:17" pos:end="753:23"><name pos:start="753:17" pos:end="753:19">ret</name> <operator pos:start="753:21" pos:end="753:21">&lt;</operator> <literal type="number" pos:start="753:23" pos:end="753:23">0</literal></expr>)</condition> <block pos:start="753:26" pos:end="761:13">{<block_content pos:start="755:17" pos:end="759:25">

                <expr_stmt pos:start="755:17" pos:end="757:69"><expr pos:start="755:17" pos:end="757:68"><call pos:start="755:17" pos:end="757:68"><name pos:start="755:17" pos:end="755:28">error_report</name><argument_list pos:start="755:29" pos:end="757:68">(<argument pos:start="755:30" pos:end="755:73"><expr pos:start="755:30" pos:end="755:73"><literal type="string" pos:start="755:30" pos:end="755:59">"error while reading sector %"</literal> <name pos:start="755:61" pos:end="755:66">PRId64</name> <literal type="string" pos:start="755:68" pos:end="755:73">": %s"</literal></expr></argument>,

                             <argument pos:start="757:30" pos:end="757:51"><expr pos:start="757:30" pos:end="757:51"><name pos:start="757:30" pos:end="757:39">sector_num</name> <operator pos:start="757:41" pos:end="757:41">-</operator> <name pos:start="757:43" pos:end="757:51">bs_offset</name></expr></argument>, <argument pos:start="757:54" pos:end="757:67"><expr pos:start="757:54" pos:end="757:67"><call pos:start="757:54" pos:end="757:67"><name pos:start="757:54" pos:end="757:61">strerror</name><argument_list pos:start="757:62" pos:end="757:67">(<argument pos:start="757:63" pos:end="757:66"><expr pos:start="757:63" pos:end="757:66"><operator pos:start="757:63" pos:end="757:63">-</operator><name pos:start="757:64" pos:end="757:66">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="759:17" pos:end="759:25">goto <name pos:start="759:22" pos:end="759:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="763:13" pos:end="767:74">/* NOTE: at the same time we convert, we do not write zero

               sectors to have a chance to compress the image. Ideally, we

               should add a specific call to have the info to go faster */</comment>

            <expr_stmt pos:start="769:13" pos:end="769:23"><expr pos:start="769:13" pos:end="769:22"><name pos:start="769:13" pos:end="769:16">buf1</name> <operator pos:start="769:18" pos:end="769:18">=</operator> <name pos:start="769:20" pos:end="769:22">buf</name></expr>;</expr_stmt>

            <while pos:start="771:13" pos:end="811:13">while <condition pos:start="771:19" pos:end="771:25">(<expr pos:start="771:20" pos:end="771:24"><name pos:start="771:20" pos:end="771:20">n</name> <operator pos:start="771:22" pos:end="771:22">&gt;</operator> <literal type="number" pos:start="771:24" pos:end="771:24">0</literal></expr>)</condition> <block pos:start="771:27" pos:end="811:13">{<block_content pos:start="787:17" pos:end="809:33">

                <comment type="block" pos:start="773:17" pos:end="785:55">/* If the output image is being created as a copy on write image,

                   copy all sectors even the ones containing only NUL bytes,

                   because they may differ from the sectors in the base image.



                   If the output is to a host device, we also write out

                   sectors that are entirely 0, since whatever data was

                   already there is garbage, not 0s. */</comment>

                <if_stmt pos:start="787:17" pos:end="803:17"><if pos:start="787:17" pos:end="803:17">if <condition pos:start="787:20" pos:end="789:71">(<expr pos:start="787:21" pos:end="789:70"><operator pos:start="787:21" pos:end="787:21">!</operator><name pos:start="787:22" pos:end="787:34">has_zero_init</name> <operator pos:start="787:36" pos:end="787:37">||</operator> <name pos:start="787:39" pos:end="787:49">out_baseimg</name> <operator pos:start="787:51" pos:end="787:52">||</operator>

                    <call pos:start="789:21" pos:end="789:70"><name pos:start="789:21" pos:end="789:44">is_allocated_sectors_min</name><argument_list pos:start="789:45" pos:end="789:70">(<argument pos:start="789:46" pos:end="789:49"><expr pos:start="789:46" pos:end="789:49"><name pos:start="789:46" pos:end="789:49">buf1</name></expr></argument>, <argument pos:start="789:52" pos:end="789:52"><expr pos:start="789:52" pos:end="789:52"><name pos:start="789:52" pos:end="789:52">n</name></expr></argument>, <argument pos:start="789:55" pos:end="789:57"><expr pos:start="789:55" pos:end="789:57"><operator pos:start="789:55" pos:end="789:55">&amp;</operator><name pos:start="789:56" pos:end="789:57">n1</name></expr></argument>, <argument pos:start="789:60" pos:end="789:69"><expr pos:start="789:60" pos:end="789:69"><name pos:start="789:60" pos:end="789:69">min_sparse</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="789:73" pos:end="803:17">{<block_content pos:start="791:21" pos:end="801:21">

                    <expr_stmt pos:start="791:21" pos:end="791:67"><expr pos:start="791:21" pos:end="791:66"><name pos:start="791:21" pos:end="791:23">ret</name> <operator pos:start="791:25" pos:end="791:25">=</operator> <call pos:start="791:27" pos:end="791:66"><name pos:start="791:27" pos:end="791:36">bdrv_write</name><argument_list pos:start="791:37" pos:end="791:66">(<argument pos:start="791:38" pos:end="791:43"><expr pos:start="791:38" pos:end="791:43"><name pos:start="791:38" pos:end="791:43">out_bs</name></expr></argument>, <argument pos:start="791:46" pos:end="791:55"><expr pos:start="791:46" pos:end="791:55"><name pos:start="791:46" pos:end="791:55">sector_num</name></expr></argument>, <argument pos:start="791:58" pos:end="791:61"><expr pos:start="791:58" pos:end="791:61"><name pos:start="791:58" pos:end="791:61">buf1</name></expr></argument>, <argument pos:start="791:64" pos:end="791:65"><expr pos:start="791:64" pos:end="791:65"><name pos:start="791:64" pos:end="791:65">n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="793:21" pos:end="801:21"><if pos:start="793:21" pos:end="801:21">if <condition pos:start="793:24" pos:end="793:32">(<expr pos:start="793:25" pos:end="793:31"><name pos:start="793:25" pos:end="793:27">ret</name> <operator pos:start="793:29" pos:end="793:29">&lt;</operator> <literal type="number" pos:start="793:31" pos:end="793:31">0</literal></expr>)</condition> <block pos:start="793:34" pos:end="801:21">{<block_content pos:start="795:25" pos:end="799:33">

                        <expr_stmt pos:start="795:25" pos:end="797:73"><expr pos:start="795:25" pos:end="797:72"><call pos:start="795:25" pos:end="797:72"><name pos:start="795:25" pos:end="795:36">error_report</name><argument_list pos:start="795:37" pos:end="797:72">(<argument pos:start="795:38" pos:end="797:43"><expr pos:start="795:38" pos:end="797:43"><literal type="string" pos:start="795:38" pos:end="795:67">"error while writing sector %"</literal> <name pos:start="795:69" pos:end="795:74">PRId64</name>

                                     <literal type="string" pos:start="797:38" pos:end="797:43">": %s"</literal></expr></argument>, <argument pos:start="797:46" pos:end="797:55"><expr pos:start="797:46" pos:end="797:55"><name pos:start="797:46" pos:end="797:55">sector_num</name></expr></argument>, <argument pos:start="797:58" pos:end="797:71"><expr pos:start="797:58" pos:end="797:71"><call pos:start="797:58" pos:end="797:71"><name pos:start="797:58" pos:end="797:65">strerror</name><argument_list pos:start="797:66" pos:end="797:71">(<argument pos:start="797:67" pos:end="797:70"><expr pos:start="797:67" pos:end="797:70"><operator pos:start="797:67" pos:end="797:67">-</operator><name pos:start="797:68" pos:end="797:70">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="799:25" pos:end="799:33">goto <name pos:start="799:30" pos:end="799:32">out</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="805:17" pos:end="805:33"><expr pos:start="805:17" pos:end="805:32"><name pos:start="805:17" pos:end="805:26">sector_num</name> <operator pos:start="805:28" pos:end="805:29">+=</operator> <name pos:start="805:31" pos:end="805:32">n1</name></expr>;</expr_stmt>

                <expr_stmt pos:start="807:17" pos:end="807:24"><expr pos:start="807:17" pos:end="807:23"><name pos:start="807:17" pos:end="807:17">n</name> <operator pos:start="807:19" pos:end="807:20">-=</operator> <name pos:start="807:22" pos:end="807:23">n1</name></expr>;</expr_stmt>

                <expr_stmt pos:start="809:17" pos:end="809:33"><expr pos:start="809:17" pos:end="809:32"><name pos:start="809:17" pos:end="809:20">buf1</name> <operator pos:start="809:22" pos:end="809:23">+=</operator> <name pos:start="809:25" pos:end="809:26">n1</name> <operator pos:start="809:28" pos:end="809:28">*</operator> <literal type="number" pos:start="809:30" pos:end="809:32">512</literal></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="813:13" pos:end="813:53"><expr pos:start="813:13" pos:end="813:52"><call pos:start="813:13" pos:end="813:52"><name pos:start="813:13" pos:end="813:31">qemu_progress_print</name><argument_list pos:start="813:32" pos:end="813:52">(<argument pos:start="813:33" pos:end="813:46"><expr pos:start="813:33" pos:end="813:46"><name pos:start="813:33" pos:end="813:46">local_progress</name></expr></argument>, <argument pos:start="813:49" pos:end="813:51"><expr pos:start="813:49" pos:end="813:51"><literal type="number" pos:start="813:49" pos:end="813:51">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>

<label pos:start="819:1" pos:end="819:4"><name pos:start="819:1" pos:end="819:3">out</name>:</label>

    <expr_stmt pos:start="821:5" pos:end="821:24"><expr pos:start="821:5" pos:end="821:23"><call pos:start="821:5" pos:end="821:23"><name pos:start="821:5" pos:end="821:21">qemu_progress_end</name><argument_list pos:start="821:22" pos:end="821:23">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="823:5" pos:end="823:43"><expr pos:start="823:5" pos:end="823:42"><call pos:start="823:5" pos:end="823:42"><name pos:start="823:5" pos:end="823:26">free_option_parameters</name><argument_list pos:start="823:27" pos:end="823:42">(<argument pos:start="823:28" pos:end="823:41"><expr pos:start="823:28" pos:end="823:41"><name pos:start="823:28" pos:end="823:41">create_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="825:5" pos:end="825:34"><expr pos:start="825:5" pos:end="825:33"><call pos:start="825:5" pos:end="825:33"><name pos:start="825:5" pos:end="825:26">free_option_parameters</name><argument_list pos:start="825:27" pos:end="825:33">(<argument pos:start="825:28" pos:end="825:32"><expr pos:start="825:28" pos:end="825:32"><name pos:start="825:28" pos:end="825:32">param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="827:5" pos:end="827:20"><expr pos:start="827:5" pos:end="827:19"><call pos:start="827:5" pos:end="827:19"><name pos:start="827:5" pos:end="827:14">qemu_vfree</name><argument_list pos:start="827:15" pos:end="827:19">(<argument pos:start="827:16" pos:end="827:18"><expr pos:start="827:16" pos:end="827:18"><name pos:start="827:16" pos:end="827:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="829:5" pos:end="833:5"><if pos:start="829:5" pos:end="833:5">if <condition pos:start="829:8" pos:end="829:15">(<expr pos:start="829:9" pos:end="829:14"><name pos:start="829:9" pos:end="829:14">out_bs</name></expr>)</condition> <block pos:start="829:17" pos:end="833:5">{<block_content pos:start="831:9" pos:end="831:28">

        <expr_stmt pos:start="831:9" pos:end="831:28"><expr pos:start="831:9" pos:end="831:27"><call pos:start="831:9" pos:end="831:27"><name pos:start="831:9" pos:end="831:19">bdrv_delete</name><argument_list pos:start="831:20" pos:end="831:27">(<argument pos:start="831:21" pos:end="831:26"><expr pos:start="831:21" pos:end="831:26"><name pos:start="831:21" pos:end="831:26">out_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="835:5" pos:end="849:5"><if pos:start="835:5" pos:end="849:5">if <condition pos:start="835:8" pos:end="835:11">(<expr pos:start="835:9" pos:end="835:10"><name pos:start="835:9" pos:end="835:10">bs</name></expr>)</condition> <block pos:start="835:13" pos:end="849:5">{<block_content pos:start="837:9" pos:end="847:19">

        <for pos:start="837:9" pos:end="845:9">for <control pos:start="837:13" pos:end="837:43">(<init pos:start="837:14" pos:end="837:22"><expr pos:start="837:14" pos:end="837:21"><name pos:start="837:14" pos:end="837:17">bs_i</name> <operator pos:start="837:19" pos:end="837:19">=</operator> <literal type="number" pos:start="837:21" pos:end="837:21">0</literal></expr>;</init> <condition pos:start="837:24" pos:end="837:35"><expr pos:start="837:24" pos:end="837:34"><name pos:start="837:24" pos:end="837:27">bs_i</name> <operator pos:start="837:29" pos:end="837:29">&lt;</operator> <name pos:start="837:31" pos:end="837:34">bs_n</name></expr>;</condition> <incr pos:start="837:37" pos:end="837:42"><expr pos:start="837:37" pos:end="837:42"><name pos:start="837:37" pos:end="837:40">bs_i</name><operator pos:start="837:41" pos:end="837:42">++</operator></expr></incr>)</control> <block pos:start="837:45" pos:end="845:9">{<block_content pos:start="839:13" pos:end="843:13">

            <if_stmt pos:start="839:13" pos:end="843:13"><if pos:start="839:13" pos:end="843:13">if <condition pos:start="839:16" pos:end="839:25">(<expr pos:start="839:17" pos:end="839:24"><name pos:start="839:17" pos:end="839:24"><name pos:start="839:17" pos:end="839:18">bs</name><index pos:start="839:19" pos:end="839:24">[<expr pos:start="839:20" pos:end="839:23"><name pos:start="839:20" pos:end="839:23">bs_i</name></expr>]</index></name></expr>)</condition> <block pos:start="839:27" pos:end="843:13">{<block_content pos:start="841:17" pos:end="841:38">

                <expr_stmt pos:start="841:17" pos:end="841:38"><expr pos:start="841:17" pos:end="841:37"><call pos:start="841:17" pos:end="841:37"><name pos:start="841:17" pos:end="841:27">bdrv_delete</name><argument_list pos:start="841:28" pos:end="841:37">(<argument pos:start="841:29" pos:end="841:36"><expr pos:start="841:29" pos:end="841:36"><name pos:start="841:29" pos:end="841:36"><name pos:start="841:29" pos:end="841:30">bs</name><index pos:start="841:31" pos:end="841:36">[<expr pos:start="841:32" pos:end="841:35"><name pos:start="841:32" pos:end="841:35">bs_i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="847:9" pos:end="847:19"><expr pos:start="847:9" pos:end="847:18"><call pos:start="847:9" pos:end="847:18"><name pos:start="847:9" pos:end="847:14">g_free</name><argument_list pos:start="847:15" pos:end="847:18">(<argument pos:start="847:16" pos:end="847:17"><expr pos:start="847:16" pos:end="847:17"><name pos:start="847:16" pos:end="847:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="851:5" pos:end="855:5"><if pos:start="851:5" pos:end="855:5">if <condition pos:start="851:8" pos:end="851:12">(<expr pos:start="851:9" pos:end="851:11"><name pos:start="851:9" pos:end="851:11">ret</name></expr>)</condition> <block pos:start="851:14" pos:end="855:5">{<block_content pos:start="853:9" pos:end="853:17">

        <return pos:start="853:9" pos:end="853:17">return <expr pos:start="853:16" pos:end="853:16"><literal type="number" pos:start="853:16" pos:end="853:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="857:5" pos:end="857:13">return <expr pos:start="857:12" pos:end="857:12"><literal type="number" pos:start="857:12" pos:end="857:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
