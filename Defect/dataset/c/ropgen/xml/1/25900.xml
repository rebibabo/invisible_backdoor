<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25900.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">tcg_out_qemu_ld</name><parameter_list pos:start="1:28" pos:end="2:36">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:38">TCGContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:61"><decl pos:start="1:44" pos:end="1:61"><type pos:start="1:44" pos:end="1:61"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:55">TCGArg</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">args</name></decl></parameter>,
                            <parameter pos:start="2:29" pos:end="2:35"><decl pos:start="2:29" pos:end="2:35"><type pos:start="2:29" pos:end="2:35"><name pos:start="2:29" pos:end="2:31">int</name></type> <name pos:start="2:33" pos:end="2:35">opc</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="153:1">{<block_content pos:start="4:5" pos:end="152:58">
    <decl_stmt pos:start="4:5" pos:end="6:0"><decl pos:start="4:5" pos:end="4:16"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:16">addr_reg</name></decl>, <decl pos:start="4:19" pos:end="4:26"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:19" pos:end="4:26">data_reg</name></decl>, <decl pos:start="4:29" pos:end="4:32"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:29" pos:end="4:32">arg0</name></decl>, <decl pos:start="4:35" pos:end="4:38"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:35" pos:end="4:38">arg1</name></decl>, <decl pos:start="4:41" pos:end="4:44"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:41" pos:end="4:44">arg2</name></decl>, <decl pos:start="4:47" pos:end="4:55"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:47" pos:end="4:55">mem_index</name></decl>, <decl pos:start="4:58" pos:end="4:63"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:58" pos:end="4:63">s_bits</name></decl>;</decl_stmt>
<cpp:if pos:start="5:1" pos:end="5:27">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:27"><call pos:start="5:5" pos:end="5:27"><name pos:start="5:5" pos:end="5:11">defined</name><argument_list pos:start="5:12" pos:end="5:27">(<argument pos:start="5:13" pos:end="5:26"><expr pos:start="5:13" pos:end="5:26"><name pos:start="5:13" pos:end="5:26">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt pos:start="6:5" pos:end="6:38"><decl pos:start="6:5" pos:end="6:24"><type pos:start="6:5" pos:end="6:14"><name pos:start="6:5" pos:end="6:12">uint32_t</name> <modifier pos:start="6:14" pos:end="6:14">*</modifier></type><name pos:start="6:15" pos:end="6:24">label1_ptr</name></decl>, <decl pos:start="6:27" pos:end="6:37"><type ref="prev" pos:start="6:5" pos:end="6:14"><modifier pos:start="6:27" pos:end="6:27">*</modifier></type><name pos:start="6:28" pos:end="6:37">label2_ptr</name></decl>;</decl_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:23"><expr pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:12">data_reg</name> <operator pos:start="7:14" pos:end="7:14">=</operator> <operator pos:start="7:16" pos:end="7:16">*</operator><name pos:start="7:17" pos:end="7:20">args</name><operator pos:start="7:21" pos:end="7:22">++</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="8:5" pos:end="8:23"><expr pos:start="8:5" pos:end="8:22"><name pos:start="8:5" pos:end="8:12">addr_reg</name> <operator pos:start="8:14" pos:end="8:14">=</operator> <operator pos:start="8:16" pos:end="8:16">*</operator><name pos:start="8:17" pos:end="8:20">args</name><operator pos:start="8:21" pos:end="8:22">++</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:22"><expr pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:13">mem_index</name> <operator pos:start="9:15" pos:end="9:15">=</operator> <operator pos:start="9:17" pos:end="9:17">*</operator><name pos:start="9:18" pos:end="9:21">args</name></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:21"><expr pos:start="10:5" pos:end="10:20"><name pos:start="10:5" pos:end="10:10">s_bits</name> <operator pos:start="10:12" pos:end="10:12">=</operator> <name pos:start="10:14" pos:end="10:16">opc</name> <operator pos:start="10:18" pos:end="10:18">&amp;</operator> <literal type="number" pos:start="10:20" pos:end="10:20">3</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:22"><expr pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:8">arg0</name> <operator pos:start="11:10" pos:end="11:10">=</operator> <name pos:start="11:12" pos:end="11:21">TCG_REG_O0</name></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:22"><expr pos:start="12:5" pos:end="12:21"><name pos:start="12:5" pos:end="12:8">arg1</name> <operator pos:start="12:10" pos:end="12:10">=</operator> <name pos:start="12:12" pos:end="12:21">TCG_REG_O1</name></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="15:0"><expr pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:8">arg2</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <name pos:start="13:12" pos:end="13:21">TCG_REG_O2</name></expr>;</expr_stmt>
<cpp:if pos:start="14:1" pos:end="14:27">#<cpp:directive pos:start="14:2" pos:end="14:3">if</cpp:directive> <expr pos:start="14:5" pos:end="14:27"><call pos:start="14:5" pos:end="14:27"><name pos:start="14:5" pos:end="14:11">defined</name><argument_list pos:start="14:12" pos:end="14:27">(<argument pos:start="14:13" pos:end="14:26"><expr pos:start="14:13" pos:end="14:26"><name pos:start="14:13" pos:end="14:26">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block" pos:start="15:5" pos:end="15:31">/* srl addr_reg, x, arg1 */</comment>
    <expr_stmt pos:start="16:5" pos:end="17:30"><expr pos:start="16:5" pos:end="17:29"><call pos:start="16:5" pos:end="17:29"><name pos:start="16:5" pos:end="16:18">tcg_out_arithi</name><argument_list pos:start="16:19" pos:end="17:29">(<argument pos:start="16:20" pos:end="16:20"><expr pos:start="16:20" pos:end="16:20"><name pos:start="16:20" pos:end="16:20">s</name></expr></argument>, <argument pos:start="16:23" pos:end="16:26"><expr pos:start="16:23" pos:end="16:26"><name pos:start="16:23" pos:end="16:26">arg1</name></expr></argument>, <argument pos:start="16:29" pos:end="16:36"><expr pos:start="16:29" pos:end="16:36"><name pos:start="16:29" pos:end="16:36">addr_reg</name></expr></argument>, <argument pos:start="16:39" pos:end="16:75"><expr pos:start="16:39" pos:end="16:75"><name pos:start="16:39" pos:end="16:54">TARGET_PAGE_BITS</name> <operator pos:start="16:56" pos:end="16:56">-</operator> <name pos:start="16:58" pos:end="16:75">CPU_TLB_ENTRY_BITS</name></expr></argument>,
                   <argument pos:start="17:20" pos:end="17:28"><expr pos:start="17:20" pos:end="17:28"><name pos:start="17:20" pos:end="17:28">SHIFT_SRL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="19:30"><expr pos:start="18:5" pos:end="19:29"><call pos:start="18:5" pos:end="19:29"><name pos:start="18:5" pos:end="18:18">tcg_out_arithi</name><argument_list pos:start="18:19" pos:end="19:29">(<argument pos:start="18:20" pos:end="18:20"><expr pos:start="18:20" pos:end="18:20"><name pos:start="18:20" pos:end="18:20">s</name></expr></argument>, <argument pos:start="18:23" pos:end="18:26"><expr pos:start="18:23" pos:end="18:26"><name pos:start="18:23" pos:end="18:26">arg0</name></expr></argument>, <argument pos:start="18:29" pos:end="18:36"><expr pos:start="18:29" pos:end="18:36"><name pos:start="18:29" pos:end="18:36">addr_reg</name></expr></argument>, <argument pos:start="18:39" pos:end="18:76"><expr pos:start="18:39" pos:end="18:76"><name pos:start="18:39" pos:end="18:54">TARGET_PAGE_MASK</name> <operator pos:start="18:56" pos:end="18:56">|</operator> <operator pos:start="18:58" pos:end="18:58">(</operator><operator pos:start="18:59" pos:end="18:59">(</operator><literal type="number" pos:start="18:60" pos:end="18:60">1</literal> <operator pos:start="18:62" pos:end="18:63">&lt;&lt;</operator> <name pos:start="18:65" pos:end="18:70">s_bits</name><operator pos:start="18:71" pos:end="18:71">)</operator> <operator pos:start="18:73" pos:end="18:73">-</operator> <literal type="number" pos:start="18:75" pos:end="18:75">1</literal><operator pos:start="18:76" pos:end="18:76">)</operator></expr></argument>,
                   <argument pos:start="19:20" pos:end="19:28"><expr pos:start="19:20" pos:end="19:28"><name pos:start="19:20" pos:end="19:28">ARITH_AND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="20:5" pos:end="20:27">/* and arg1, x, arg1 */</comment>
    <expr_stmt pos:start="21:5" pos:end="21:68"><expr pos:start="21:5" pos:end="21:67"><call pos:start="21:5" pos:end="21:67"><name pos:start="21:5" pos:end="21:16">tcg_out_andi</name><argument_list pos:start="21:17" pos:end="21:67">(<argument pos:start="21:18" pos:end="21:18"><expr pos:start="21:18" pos:end="21:18"><name pos:start="21:18" pos:end="21:18">s</name></expr></argument>, <argument pos:start="21:21" pos:end="21:24"><expr pos:start="21:21" pos:end="21:24"><name pos:start="21:21" pos:end="21:24">arg1</name></expr></argument>, <argument pos:start="21:27" pos:end="21:66"><expr pos:start="21:27" pos:end="21:66"><operator pos:start="21:27" pos:end="21:27">(</operator><name pos:start="21:28" pos:end="21:39">CPU_TLB_SIZE</name> <operator pos:start="21:41" pos:end="21:41">-</operator> <literal type="number" pos:start="21:43" pos:end="21:43">1</literal><operator pos:start="21:44" pos:end="21:44">)</operator> <operator pos:start="21:46" pos:end="21:47">&lt;&lt;</operator> <name pos:start="21:49" pos:end="21:66">CPU_TLB_ENTRY_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="22:5" pos:end="22:27">/* add arg1, x, arg1 */</comment>
    <expr_stmt pos:start="23:5" pos:end="24:71"><expr pos:start="23:5" pos:end="24:70"><call pos:start="23:5" pos:end="24:70"><name pos:start="23:5" pos:end="23:16">tcg_out_addi</name><argument_list pos:start="23:17" pos:end="24:70">(<argument pos:start="23:18" pos:end="23:18"><expr pos:start="23:18" pos:end="23:18"><name pos:start="23:18" pos:end="23:18">s</name></expr></argument>, <argument pos:start="23:21" pos:end="23:24"><expr pos:start="23:21" pos:end="23:24"><name pos:start="23:21" pos:end="23:24">arg1</name></expr></argument>, <argument pos:start="23:27" pos:end="24:69"><expr pos:start="23:27" pos:end="24:69"><call pos:start="23:27" pos:end="24:69"><name pos:start="23:27" pos:end="23:34">offsetof</name><argument_list pos:start="23:35" pos:end="24:69">(<argument pos:start="23:36" pos:end="23:43"><expr pos:start="23:36" pos:end="23:43"><name pos:start="23:36" pos:end="23:43">CPUState</name></expr></argument>,
                                   <argument pos:start="24:36" pos:end="24:68"><expr pos:start="24:36" pos:end="24:68"><name pos:start="24:36" pos:end="24:58"><name pos:start="24:36" pos:end="24:44">tlb_table</name><index pos:start="24:45" pos:end="24:55">[<expr pos:start="24:46" pos:end="24:54"><name pos:start="24:46" pos:end="24:54">mem_index</name></expr>]</index><index pos:start="24:56" pos:end="24:58">[<expr pos:start="24:57" pos:end="24:57"><literal type="number" pos:start="24:57" pos:end="24:57">0</literal></expr>]</index></name><operator pos:start="24:59" pos:end="24:59">.</operator><name pos:start="24:60" pos:end="24:68">addr_read</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="25:5" pos:end="25:29">/* add env, arg1, arg1 */</comment>
    <expr_stmt pos:start="26:5" pos:end="26:55"><expr pos:start="26:5" pos:end="26:54"><call pos:start="26:5" pos:end="26:54"><name pos:start="26:5" pos:end="26:17">tcg_out_arith</name><argument_list pos:start="26:18" pos:end="26:54">(<argument pos:start="26:19" pos:end="26:19"><expr pos:start="26:19" pos:end="26:19"><name pos:start="26:19" pos:end="26:19">s</name></expr></argument>, <argument pos:start="26:22" pos:end="26:25"><expr pos:start="26:22" pos:end="26:25"><name pos:start="26:22" pos:end="26:25">arg1</name></expr></argument>, <argument pos:start="26:28" pos:end="26:36"><expr pos:start="26:28" pos:end="26:36"><name pos:start="26:28" pos:end="26:36">TCG_AREG0</name></expr></argument>, <argument pos:start="26:39" pos:end="26:42"><expr pos:start="26:39" pos:end="26:42"><name pos:start="26:39" pos:end="26:42">arg1</name></expr></argument>, <argument pos:start="26:45" pos:end="26:53"><expr pos:start="26:45" pos:end="26:53"><name pos:start="26:45" pos:end="26:53">ARITH_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="27:5" pos:end="27:25">/* ld [arg1], arg2 */</comment>
    <expr_stmt pos:start="28:5" pos:end="29:36"><expr pos:start="28:5" pos:end="29:35"><call pos:start="28:5" pos:end="29:35"><name pos:start="28:5" pos:end="28:13">tcg_out32</name><argument_list pos:start="28:14" pos:end="29:35">(<argument pos:start="28:15" pos:end="28:15"><expr pos:start="28:15" pos:end="28:15"><name pos:start="28:15" pos:end="28:15">s</name></expr></argument>, <argument pos:start="28:18" pos:end="29:34"><expr pos:start="28:18" pos:end="29:34"><name pos:start="28:18" pos:end="28:29">TARGET_LD_OP</name> <operator pos:start="28:31" pos:end="28:31">|</operator> <call pos:start="28:33" pos:end="28:45"><name pos:start="28:33" pos:end="28:39">INSN_RD</name><argument_list pos:start="28:40" pos:end="28:45">(<argument pos:start="28:41" pos:end="28:44"><expr pos:start="28:41" pos:end="28:44"><name pos:start="28:41" pos:end="28:44">arg2</name></expr></argument>)</argument_list></call> <operator pos:start="28:47" pos:end="28:47">|</operator> <call pos:start="28:49" pos:end="28:62"><name pos:start="28:49" pos:end="28:56">INSN_RS1</name><argument_list pos:start="28:57" pos:end="28:62">(<argument pos:start="28:58" pos:end="28:61"><expr pos:start="28:58" pos:end="28:61"><name pos:start="28:58" pos:end="28:61">arg1</name></expr></argument>)</argument_list></call> <operator pos:start="28:64" pos:end="28:64">|</operator>
              <call pos:start="29:15" pos:end="29:34"><name pos:start="29:15" pos:end="29:22">INSN_RS2</name><argument_list pos:start="29:23" pos:end="29:34">(<argument pos:start="29:24" pos:end="29:33"><expr pos:start="29:24" pos:end="29:33"><name pos:start="29:24" pos:end="29:33">TCG_REG_G0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="30:5" pos:end="30:31">/* subcc arg0, arg2, %g0 */</comment>
    <expr_stmt pos:start="31:5" pos:end="31:58"><expr pos:start="31:5" pos:end="31:57"><call pos:start="31:5" pos:end="31:57"><name pos:start="31:5" pos:end="31:17">tcg_out_arith</name><argument_list pos:start="31:18" pos:end="31:57">(<argument pos:start="31:19" pos:end="31:19"><expr pos:start="31:19" pos:end="31:19"><name pos:start="31:19" pos:end="31:19">s</name></expr></argument>, <argument pos:start="31:22" pos:end="31:31"><expr pos:start="31:22" pos:end="31:31"><name pos:start="31:22" pos:end="31:31">TCG_REG_G0</name></expr></argument>, <argument pos:start="31:34" pos:end="31:37"><expr pos:start="31:34" pos:end="31:37"><name pos:start="31:34" pos:end="31:37">arg0</name></expr></argument>, <argument pos:start="31:40" pos:end="31:43"><expr pos:start="31:40" pos:end="31:43"><name pos:start="31:40" pos:end="31:43">arg2</name></expr></argument>, <argument pos:start="31:46" pos:end="31:56"><expr pos:start="31:46" pos:end="31:56"><name pos:start="31:46" pos:end="31:56">ARITH_SUBCC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="32:5" pos:end="33:19">/* will become:
       be label1 */</comment>
    <expr_stmt pos:start="34:5" pos:end="34:41"><expr pos:start="34:5" pos:end="34:40"><name pos:start="34:5" pos:end="34:14">label1_ptr</name> <operator pos:start="34:16" pos:end="34:16">=</operator> <operator pos:start="34:18" pos:end="34:18">(</operator><name pos:start="34:19" pos:end="34:26">uint32_t</name> <operator pos:start="34:28" pos:end="34:28">*</operator><operator pos:start="34:29" pos:end="34:29">)</operator><name pos:start="34:30" pos:end="34:40"><name pos:start="34:30" pos:end="34:30">s</name><operator pos:start="34:31" pos:end="34:32">-&gt;</operator><name pos:start="34:33" pos:end="34:40">code_ptr</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="35:5" pos:end="35:20"><expr pos:start="35:5" pos:end="35:19"><call pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:13">tcg_out32</name><argument_list pos:start="35:14" pos:end="35:19">(<argument pos:start="35:15" pos:end="35:15"><expr pos:start="35:15" pos:end="35:15"><name pos:start="35:15" pos:end="35:15">s</name></expr></argument>, <argument pos:start="35:18" pos:end="35:18"><expr pos:start="35:18" pos:end="35:18"><literal type="number" pos:start="35:18" pos:end="35:18">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="36:5" pos:end="36:26">/* mov (delay slot) */</comment>
    <expr_stmt pos:start="37:5" pos:end="37:35"><expr pos:start="37:5" pos:end="37:34"><call pos:start="37:5" pos:end="37:34"><name pos:start="37:5" pos:end="37:15">tcg_out_mov</name><argument_list pos:start="37:16" pos:end="37:34">(<argument pos:start="37:17" pos:end="37:17"><expr pos:start="37:17" pos:end="37:17"><name pos:start="37:17" pos:end="37:17">s</name></expr></argument>, <argument pos:start="37:20" pos:end="37:23"><expr pos:start="37:20" pos:end="37:23"><name pos:start="37:20" pos:end="37:23">arg0</name></expr></argument>, <argument pos:start="37:26" pos:end="37:33"><expr pos:start="37:26" pos:end="37:33"><name pos:start="37:26" pos:end="37:33">addr_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="38:5" pos:end="38:13">/* mov */</comment>
    <expr_stmt pos:start="39:5" pos:end="39:51"><expr pos:start="39:5" pos:end="39:50"><call pos:start="39:5" pos:end="39:50"><name pos:start="39:5" pos:end="39:16">tcg_out_movi</name><argument_list pos:start="39:17" pos:end="39:50">(<argument pos:start="39:18" pos:end="39:18"><expr pos:start="39:18" pos:end="39:18"><name pos:start="39:18" pos:end="39:18">s</name></expr></argument>, <argument pos:start="39:21" pos:end="39:32"><expr pos:start="39:21" pos:end="39:32"><name pos:start="39:21" pos:end="39:32">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="39:35" pos:end="39:38"><expr pos:start="39:35" pos:end="39:38"><name pos:start="39:35" pos:end="39:38">arg1</name></expr></argument>, <argument pos:start="39:41" pos:end="39:49"><expr pos:start="39:41" pos:end="39:49"><name pos:start="39:41" pos:end="39:49">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="40:5" pos:end="40:50">/* XXX: move that code at the end of the TB */</comment>
    <comment type="block" pos:start="41:5" pos:end="41:44">/* qemu_ld_helper[s_bits](arg0, arg1) */</comment>
    <expr_stmt pos:start="42:5" pos:end="44:40"><expr pos:start="42:5" pos:end="44:39"><call pos:start="42:5" pos:end="44:39"><name pos:start="42:5" pos:end="42:13">tcg_out32</name><argument_list pos:start="42:14" pos:end="44:39">(<argument pos:start="42:15" pos:end="42:15"><expr pos:start="42:15" pos:end="42:15"><name pos:start="42:15" pos:end="42:15">s</name></expr></argument>, <argument pos:start="42:18" pos:end="44:38"><expr pos:start="42:18" pos:end="44:38"><name pos:start="42:18" pos:end="42:21">CALL</name> <operator pos:start="42:23" pos:end="42:23">|</operator> <operator pos:start="42:25" pos:end="42:25">(</operator><operator pos:start="42:26" pos:end="42:26">(</operator><operator pos:start="42:27" pos:end="42:27">(</operator><operator pos:start="42:28" pos:end="42:28">(</operator><name pos:start="42:29" pos:end="42:44">tcg_target_ulong</name><operator pos:start="42:45" pos:end="42:45">)</operator><name pos:start="42:46" pos:end="42:68"><name pos:start="42:46" pos:end="42:60">qemu_ld_helpers</name><index pos:start="42:61" pos:end="42:68">[<expr pos:start="42:62" pos:end="42:67"><name pos:start="42:62" pos:end="42:67">s_bits</name></expr>]</index></name>
                           <operator pos:start="43:28" pos:end="43:28">-</operator> <operator pos:start="43:30" pos:end="43:30">(</operator><name pos:start="43:31" pos:end="43:46">tcg_target_ulong</name><operator pos:start="43:47" pos:end="43:47">)</operator><name pos:start="43:48" pos:end="43:58"><name pos:start="43:48" pos:end="43:48">s</name><operator pos:start="43:49" pos:end="43:50">-&gt;</operator><name pos:start="43:51" pos:end="43:58">code_ptr</name></name><operator pos:start="43:59" pos:end="43:59">)</operator> <operator pos:start="43:61" pos:end="43:62">&gt;&gt;</operator> <literal type="number" pos:start="43:64" pos:end="43:64">2</literal><operator pos:start="43:65" pos:end="43:65">)</operator>
                         <operator pos:start="44:26" pos:end="44:26">&amp;</operator> <literal type="number" pos:start="44:28" pos:end="44:37">0x3fffffff</literal><operator pos:start="44:38" pos:end="44:38">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="45:5" pos:end="46:26">/* Store AREG0 in stack to avoid ugly glibc bugs that mangle
       global registers */</comment>
    <comment type="line" pos:start="47:5" pos:end="47:17">// delay slot</comment>
    <expr_stmt pos:start="48:5" pos:end="49:74"><expr pos:start="48:5" pos:end="49:73"><call pos:start="48:5" pos:end="49:73"><name pos:start="48:5" pos:end="48:16">tcg_out_ldst</name><argument_list pos:start="48:17" pos:end="49:73">(<argument pos:start="48:18" pos:end="48:18"><expr pos:start="48:18" pos:end="48:18"><name pos:start="48:18" pos:end="48:18">s</name></expr></argument>, <argument pos:start="48:21" pos:end="48:29"><expr pos:start="48:21" pos:end="48:29"><name pos:start="48:21" pos:end="48:29">TCG_AREG0</name></expr></argument>, <argument pos:start="48:32" pos:end="48:49"><expr pos:start="48:32" pos:end="48:49"><name pos:start="48:32" pos:end="48:49">TCG_REG_CALL_STACK</name></expr></argument>,
                 <argument pos:start="49:18" pos:end="49:60"><expr pos:start="49:18" pos:end="49:60"><name pos:start="49:18" pos:end="49:45">TCG_TARGET_CALL_STACK_OFFSET</name> <operator pos:start="49:47" pos:end="49:47">-</operator> <sizeof pos:start="49:49" pos:end="49:60">sizeof<argument_list pos:start="49:55" pos:end="49:60">(<argument pos:start="49:56" pos:end="49:59"><expr pos:start="49:56" pos:end="49:59"><name pos:start="49:56" pos:end="49:59">long</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="49:63" pos:end="49:72"><expr pos:start="49:63" pos:end="49:72"><name pos:start="49:63" pos:end="49:72">HOST_ST_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="50:5" pos:end="51:74"><expr pos:start="50:5" pos:end="51:73"><call pos:start="50:5" pos:end="51:73"><name pos:start="50:5" pos:end="50:16">tcg_out_ldst</name><argument_list pos:start="50:17" pos:end="51:73">(<argument pos:start="50:18" pos:end="50:18"><expr pos:start="50:18" pos:end="50:18"><name pos:start="50:18" pos:end="50:18">s</name></expr></argument>, <argument pos:start="50:21" pos:end="50:29"><expr pos:start="50:21" pos:end="50:29"><name pos:start="50:21" pos:end="50:29">TCG_AREG0</name></expr></argument>, <argument pos:start="50:32" pos:end="50:49"><expr pos:start="50:32" pos:end="50:49"><name pos:start="50:32" pos:end="50:49">TCG_REG_CALL_STACK</name></expr></argument>,
                 <argument pos:start="51:18" pos:end="51:60"><expr pos:start="51:18" pos:end="51:60"><name pos:start="51:18" pos:end="51:45">TCG_TARGET_CALL_STACK_OFFSET</name> <operator pos:start="51:47" pos:end="51:47">-</operator> <sizeof pos:start="51:49" pos:end="51:60">sizeof<argument_list pos:start="51:55" pos:end="51:60">(<argument pos:start="51:56" pos:end="51:59"><expr pos:start="51:56" pos:end="51:59"><name pos:start="51:56" pos:end="51:59">long</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="51:63" pos:end="51:72"><expr pos:start="51:63" pos:end="51:72"><name pos:start="51:63" pos:end="51:72">HOST_LD_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="52:5" pos:end="52:38">/* data_reg = sign_extend(arg0) */</comment>
    <switch pos:start="53:5" pos:end="84:5">switch<condition pos:start="53:11" pos:end="53:15">(<expr pos:start="53:12" pos:end="53:14"><name pos:start="53:12" pos:end="53:14">opc</name></expr>)</condition> <block pos:start="53:17" pos:end="84:5">{<block_content pos:start="54:5" pos:end="83:14">
    <case pos:start="54:5" pos:end="54:15">case <expr pos:start="54:10" pos:end="54:14"><literal type="number" pos:start="54:10" pos:end="54:10">0</literal> <operator pos:start="54:12" pos:end="54:12">|</operator> <literal type="number" pos:start="54:14" pos:end="54:14">4</literal></expr>:</case>
        <comment type="block" pos:start="55:9" pos:end="55:39">/* sll arg0, 24/56, data_reg */</comment>
        <expr_stmt pos:start="56:9" pos:end="57:36"><expr pos:start="56:9" pos:end="57:35"><call pos:start="56:9" pos:end="57:35"><name pos:start="56:9" pos:end="56:22">tcg_out_arithi</name><argument_list pos:start="56:23" pos:end="57:35">(<argument pos:start="56:24" pos:end="56:24"><expr pos:start="56:24" pos:end="56:24"><name pos:start="56:24" pos:end="56:24">s</name></expr></argument>, <argument pos:start="56:27" pos:end="56:34"><expr pos:start="56:27" pos:end="56:34"><name pos:start="56:27" pos:end="56:34">data_reg</name></expr></argument>, <argument pos:start="56:37" pos:end="56:40"><expr pos:start="56:37" pos:end="56:40"><name pos:start="56:37" pos:end="56:40">arg0</name></expr></argument>, <argument pos:start="56:43" pos:end="56:78"><expr pos:start="56:43" pos:end="56:78"><operator pos:start="56:43" pos:end="56:43">(</operator><name pos:start="56:44" pos:end="56:46">int</name><operator pos:start="56:47" pos:end="56:47">)</operator><sizeof pos:start="56:48" pos:end="56:70">sizeof<argument_list pos:start="56:54" pos:end="56:70">(<argument pos:start="56:55" pos:end="56:69"><expr pos:start="56:55" pos:end="56:69"><name pos:start="56:55" pos:end="56:69">tcg_target_long</name></expr></argument>)</argument_list></sizeof> <operator pos:start="56:72" pos:end="56:72">*</operator> <literal type="number" pos:start="56:74" pos:end="56:76">8</literal> <operator pos:start="56:76" pos:end="56:76">-</operator> <literal type="number" pos:start="56:78" pos:end="56:78">8</literal></expr></argument>,
                       <argument pos:start="57:24" pos:end="57:34"><expr pos:start="57:24" pos:end="57:34"><name pos:start="57:24" pos:end="57:34">HOST_SLL_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="58:9" pos:end="58:43">/* sra data_reg, 24/56, data_reg */</comment>
        <expr_stmt pos:start="59:9" pos:end="60:74"><expr pos:start="59:9" pos:end="60:73"><call pos:start="59:9" pos:end="60:73"><name pos:start="59:9" pos:end="59:22">tcg_out_arithi</name><argument_list pos:start="59:23" pos:end="60:73">(<argument pos:start="59:24" pos:end="59:24"><expr pos:start="59:24" pos:end="59:24"><name pos:start="59:24" pos:end="59:24">s</name></expr></argument>, <argument pos:start="59:27" pos:end="59:34"><expr pos:start="59:27" pos:end="59:34"><name pos:start="59:27" pos:end="59:34">data_reg</name></expr></argument>, <argument pos:start="59:37" pos:end="59:44"><expr pos:start="59:37" pos:end="59:44"><name pos:start="59:37" pos:end="59:44">data_reg</name></expr></argument>,
                       <argument pos:start="60:24" pos:end="60:59"><expr pos:start="60:24" pos:end="60:59"><operator pos:start="60:24" pos:end="60:24">(</operator><name pos:start="60:25" pos:end="60:27">int</name><operator pos:start="60:28" pos:end="60:28">)</operator><sizeof pos:start="60:29" pos:end="60:51">sizeof<argument_list pos:start="60:35" pos:end="60:51">(<argument pos:start="60:36" pos:end="60:50"><expr pos:start="60:36" pos:end="60:50"><name pos:start="60:36" pos:end="60:50">tcg_target_long</name></expr></argument>)</argument_list></sizeof> <operator pos:start="60:53" pos:end="60:53">*</operator> <literal type="number" pos:start="60:55" pos:end="60:57">8</literal> <operator pos:start="60:57" pos:end="60:57">-</operator> <literal type="number" pos:start="60:59" pos:end="60:59">8</literal></expr></argument>, <argument pos:start="60:62" pos:end="60:72"><expr pos:start="60:62" pos:end="60:72"><name pos:start="60:62" pos:end="60:72">HOST_SRA_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="61:9" pos:end="61:14">break;</break>
    <case pos:start="62:5" pos:end="62:15">case <expr pos:start="62:10" pos:end="62:14"><literal type="number" pos:start="62:10" pos:end="62:10">1</literal> <operator pos:start="62:12" pos:end="62:12">|</operator> <literal type="number" pos:start="62:14" pos:end="62:14">4</literal></expr>:</case>
        <comment type="block" pos:start="63:9" pos:end="63:39">/* sll arg0, 16/48, data_reg */</comment>
        <expr_stmt pos:start="64:9" pos:end="65:75"><expr pos:start="64:9" pos:end="65:74"><call pos:start="64:9" pos:end="65:74"><name pos:start="64:9" pos:end="64:22">tcg_out_arithi</name><argument_list pos:start="64:23" pos:end="65:74">(<argument pos:start="64:24" pos:end="64:24"><expr pos:start="64:24" pos:end="64:24"><name pos:start="64:24" pos:end="64:24">s</name></expr></argument>, <argument pos:start="64:27" pos:end="64:34"><expr pos:start="64:27" pos:end="64:34"><name pos:start="64:27" pos:end="64:34">data_reg</name></expr></argument>, <argument pos:start="64:37" pos:end="64:40"><expr pos:start="64:37" pos:end="64:40"><name pos:start="64:37" pos:end="64:40">arg0</name></expr></argument>,
                       <argument pos:start="65:24" pos:end="65:60"><expr pos:start="65:24" pos:end="65:60"><operator pos:start="65:24" pos:end="65:24">(</operator><name pos:start="65:25" pos:end="65:27">int</name><operator pos:start="65:28" pos:end="65:28">)</operator><sizeof pos:start="65:29" pos:end="65:51">sizeof<argument_list pos:start="65:35" pos:end="65:51">(<argument pos:start="65:36" pos:end="65:50"><expr pos:start="65:36" pos:end="65:50"><name pos:start="65:36" pos:end="65:50">tcg_target_long</name></expr></argument>)</argument_list></sizeof> <operator pos:start="65:53" pos:end="65:53">*</operator> <literal type="number" pos:start="65:55" pos:end="65:57">8</literal> <operator pos:start="65:57" pos:end="65:57">-</operator> <literal type="number" pos:start="65:59" pos:end="65:60">16</literal></expr></argument>, <argument pos:start="65:63" pos:end="65:73"><expr pos:start="65:63" pos:end="65:73"><name pos:start="65:63" pos:end="65:73">HOST_SLL_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="66:9" pos:end="66:43">/* sra data_reg, 16/48, data_reg */</comment>
        <expr_stmt pos:start="67:9" pos:end="68:75"><expr pos:start="67:9" pos:end="68:74"><call pos:start="67:9" pos:end="68:74"><name pos:start="67:9" pos:end="67:22">tcg_out_arithi</name><argument_list pos:start="67:23" pos:end="68:74">(<argument pos:start="67:24" pos:end="67:24"><expr pos:start="67:24" pos:end="67:24"><name pos:start="67:24" pos:end="67:24">s</name></expr></argument>, <argument pos:start="67:27" pos:end="67:34"><expr pos:start="67:27" pos:end="67:34"><name pos:start="67:27" pos:end="67:34">data_reg</name></expr></argument>, <argument pos:start="67:37" pos:end="67:44"><expr pos:start="67:37" pos:end="67:44"><name pos:start="67:37" pos:end="67:44">data_reg</name></expr></argument>,
                       <argument pos:start="68:24" pos:end="68:60"><expr pos:start="68:24" pos:end="68:60"><operator pos:start="68:24" pos:end="68:24">(</operator><name pos:start="68:25" pos:end="68:27">int</name><operator pos:start="68:28" pos:end="68:28">)</operator><sizeof pos:start="68:29" pos:end="68:51">sizeof<argument_list pos:start="68:35" pos:end="68:51">(<argument pos:start="68:36" pos:end="68:50"><expr pos:start="68:36" pos:end="68:50"><name pos:start="68:36" pos:end="68:50">tcg_target_long</name></expr></argument>)</argument_list></sizeof> <operator pos:start="68:53" pos:end="68:53">*</operator> <literal type="number" pos:start="68:55" pos:end="68:57">8</literal> <operator pos:start="68:57" pos:end="68:57">-</operator> <literal type="number" pos:start="68:59" pos:end="68:60">16</literal></expr></argument>, <argument pos:start="68:63" pos:end="68:73"><expr pos:start="68:63" pos:end="68:73"><name pos:start="68:63" pos:end="68:73">HOST_SRA_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="69:9" pos:end="69:14">break;</break>
    <case pos:start="70:5" pos:end="70:15">case <expr pos:start="70:10" pos:end="70:14"><literal type="number" pos:start="70:10" pos:end="70:10">2</literal> <operator pos:start="70:12" pos:end="70:12">|</operator> <literal type="number" pos:start="70:14" pos:end="70:14">4</literal></expr>:</case>
        <comment type="block" pos:start="71:9" pos:end="71:36">/* sll arg0, 32, data_reg */</comment>
        <expr_stmt pos:start="72:9" pos:end="72:59"><expr pos:start="72:9" pos:end="72:58"><call pos:start="72:9" pos:end="72:58"><name pos:start="72:9" pos:end="72:22">tcg_out_arithi</name><argument_list pos:start="72:23" pos:end="72:58">(<argument pos:start="72:24" pos:end="72:24"><expr pos:start="72:24" pos:end="72:24"><name pos:start="72:24" pos:end="72:24">s</name></expr></argument>, <argument pos:start="72:27" pos:end="72:34"><expr pos:start="72:27" pos:end="72:34"><name pos:start="72:27" pos:end="72:34">data_reg</name></expr></argument>, <argument pos:start="72:37" pos:end="72:40"><expr pos:start="72:37" pos:end="72:40"><name pos:start="72:37" pos:end="72:40">arg0</name></expr></argument>, <argument pos:start="72:43" pos:end="72:44"><expr pos:start="72:43" pos:end="72:44"><literal type="number" pos:start="72:43" pos:end="72:44">32</literal></expr></argument>, <argument pos:start="72:47" pos:end="72:57"><expr pos:start="72:47" pos:end="72:57"><name pos:start="72:47" pos:end="72:57">HOST_SLL_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="73:9" pos:end="73:40">/* sra data_reg, 32, data_reg */</comment>
        <expr_stmt pos:start="74:9" pos:end="74:63"><expr pos:start="74:9" pos:end="74:62"><call pos:start="74:9" pos:end="74:62"><name pos:start="74:9" pos:end="74:22">tcg_out_arithi</name><argument_list pos:start="74:23" pos:end="74:62">(<argument pos:start="74:24" pos:end="74:24"><expr pos:start="74:24" pos:end="74:24"><name pos:start="74:24" pos:end="74:24">s</name></expr></argument>, <argument pos:start="74:27" pos:end="74:34"><expr pos:start="74:27" pos:end="74:34"><name pos:start="74:27" pos:end="74:34">data_reg</name></expr></argument>, <argument pos:start="74:37" pos:end="74:44"><expr pos:start="74:37" pos:end="74:44"><name pos:start="74:37" pos:end="74:44">data_reg</name></expr></argument>, <argument pos:start="74:47" pos:end="74:48"><expr pos:start="74:47" pos:end="74:48"><literal type="number" pos:start="74:47" pos:end="74:48">32</literal></expr></argument>, <argument pos:start="74:51" pos:end="74:61"><expr pos:start="74:51" pos:end="74:61"><name pos:start="74:51" pos:end="74:61">HOST_SRA_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="75:9" pos:end="75:14">break;</break>
    <case pos:start="76:5" pos:end="76:11">case <expr pos:start="76:10" pos:end="76:10"><literal type="number" pos:start="76:10" pos:end="76:10">0</literal></expr>:</case>
    <case pos:start="77:5" pos:end="77:11">case <expr pos:start="77:10" pos:end="77:10"><literal type="number" pos:start="77:10" pos:end="77:10">1</literal></expr>:</case>
    <case pos:start="78:5" pos:end="78:11">case <expr pos:start="78:10" pos:end="78:10"><literal type="number" pos:start="78:10" pos:end="78:10">2</literal></expr>:</case>
    <case pos:start="79:5" pos:end="79:11">case <expr pos:start="79:10" pos:end="79:10"><literal type="number" pos:start="79:10" pos:end="79:10">3</literal></expr>:</case>
    <default pos:start="80:5" pos:end="80:12">default:</default>
        <comment type="block" pos:start="81:9" pos:end="81:17">/* mov */</comment>
        <expr_stmt pos:start="82:9" pos:end="82:39"><expr pos:start="82:9" pos:end="82:38"><call pos:start="82:9" pos:end="82:38"><name pos:start="82:9" pos:end="82:19">tcg_out_mov</name><argument_list pos:start="82:20" pos:end="82:38">(<argument pos:start="82:21" pos:end="82:21"><expr pos:start="82:21" pos:end="82:21"><name pos:start="82:21" pos:end="82:21">s</name></expr></argument>, <argument pos:start="82:24" pos:end="82:31"><expr pos:start="82:24" pos:end="82:31"><name pos:start="82:24" pos:end="82:31">data_reg</name></expr></argument>, <argument pos:start="82:34" pos:end="82:37"><expr pos:start="82:34" pos:end="82:37"><name pos:start="82:34" pos:end="82:37">arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="83:9" pos:end="83:14">break;</break>
    </block_content>}</block></switch>
    <comment type="block" pos:start="85:5" pos:end="86:19">/* will become:
       ba label2 */</comment>
    <expr_stmt pos:start="87:5" pos:end="87:41"><expr pos:start="87:5" pos:end="87:40"><name pos:start="87:5" pos:end="87:14">label2_ptr</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <operator pos:start="87:18" pos:end="87:18">(</operator><name pos:start="87:19" pos:end="87:26">uint32_t</name> <operator pos:start="87:28" pos:end="87:28">*</operator><operator pos:start="87:29" pos:end="87:29">)</operator><name pos:start="87:30" pos:end="87:40"><name pos:start="87:30" pos:end="87:30">s</name><operator pos:start="87:31" pos:end="87:32">-&gt;</operator><name pos:start="87:33" pos:end="87:40">code_ptr</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="88:5" pos:end="88:20"><expr pos:start="88:5" pos:end="88:19"><call pos:start="88:5" pos:end="88:19"><name pos:start="88:5" pos:end="88:13">tcg_out32</name><argument_list pos:start="88:14" pos:end="88:19">(<argument pos:start="88:15" pos:end="88:15"><expr pos:start="88:15" pos:end="88:15"><name pos:start="88:15" pos:end="88:15">s</name></expr></argument>, <argument pos:start="88:18" pos:end="88:18"><expr pos:start="88:18" pos:end="88:18"><literal type="number" pos:start="88:18" pos:end="88:18">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="89:5" pos:end="89:25">/* nop (delay slot */</comment>
    <expr_stmt pos:start="90:5" pos:end="90:19"><expr pos:start="90:5" pos:end="90:18"><call pos:start="90:5" pos:end="90:18"><name pos:start="90:5" pos:end="90:15">tcg_out_nop</name><argument_list pos:start="90:16" pos:end="90:18">(<argument pos:start="90:17" pos:end="90:17"><expr pos:start="90:17" pos:end="90:17"><name pos:start="90:17" pos:end="90:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="91:5" pos:end="91:17">/* label1: */</comment>
    <expr_stmt pos:start="92:5" pos:end="94:58"><expr pos:start="92:5" pos:end="94:57"><operator pos:start="92:5" pos:end="92:5">*</operator><name pos:start="92:6" pos:end="92:15">label1_ptr</name> <operator pos:start="92:17" pos:end="92:17">=</operator> <operator pos:start="92:19" pos:end="92:19">(</operator><call pos:start="92:20" pos:end="92:29"><name pos:start="92:20" pos:end="92:26">INSN_OP</name><argument_list pos:start="92:27" pos:end="92:29">(<argument pos:start="92:28" pos:end="92:28"><expr pos:start="92:28" pos:end="92:28"><literal type="number" pos:start="92:28" pos:end="92:28">0</literal></expr></argument>)</argument_list></call> <operator pos:start="92:31" pos:end="92:31">|</operator> <call pos:start="92:33" pos:end="92:52"><name pos:start="92:33" pos:end="92:41">INSN_COND</name><argument_list pos:start="92:42" pos:end="92:52">(<argument pos:start="92:43" pos:end="92:48"><expr pos:start="92:43" pos:end="92:48"><name pos:start="92:43" pos:end="92:48">COND_E</name></expr></argument>, <argument pos:start="92:51" pos:end="92:51"><expr pos:start="92:51" pos:end="92:51"><literal type="number" pos:start="92:51" pos:end="92:51">0</literal></expr></argument>)</argument_list></call> <operator pos:start="92:54" pos:end="92:54">|</operator> <call pos:start="92:56" pos:end="92:68"><name pos:start="92:56" pos:end="92:63">INSN_OP2</name><argument_list pos:start="92:64" pos:end="92:68">(<argument pos:start="92:65" pos:end="92:67"><expr pos:start="92:65" pos:end="92:67"><literal type="number" pos:start="92:65" pos:end="92:67">0x2</literal></expr></argument>)</argument_list></call> <operator pos:start="92:70" pos:end="92:70">|</operator>
                   <call pos:start="93:20" pos:end="94:56"><name pos:start="93:20" pos:end="93:29">INSN_OFF22</name><argument_list pos:start="93:30" pos:end="94:56">(<argument pos:start="93:31" pos:end="94:55"><expr pos:start="93:31" pos:end="94:55"><operator pos:start="93:31" pos:end="93:31">(</operator><name pos:start="93:32" pos:end="93:39">unsigned</name> <name pos:start="93:41" pos:end="93:44">long</name><operator pos:start="93:45" pos:end="93:45">)</operator><name pos:start="93:46" pos:end="93:56"><name pos:start="93:46" pos:end="93:46">s</name><operator pos:start="93:47" pos:end="93:48">-&gt;</operator><name pos:start="93:49" pos:end="93:56">code_ptr</name></name> <operator pos:start="93:58" pos:end="93:58">-</operator>
                              <operator pos:start="94:31" pos:end="94:31">(</operator><name pos:start="94:32" pos:end="94:39">unsigned</name> <name pos:start="94:41" pos:end="94:44">long</name><operator pos:start="94:45" pos:end="94:45">)</operator><name pos:start="94:46" pos:end="94:55">label1_ptr</name></expr></argument>)</argument_list></call><operator pos:start="94:57" pos:end="94:57">)</operator></expr>;</expr_stmt>
    <comment type="block" pos:start="95:5" pos:end="95:29">/* ld [arg1 + x], arg1 */</comment>
    <expr_stmt pos:start="96:5" pos:end="97:63"><expr pos:start="96:5" pos:end="97:62"><call pos:start="96:5" pos:end="97:62"><name pos:start="96:5" pos:end="96:16">tcg_out_ldst</name><argument_list pos:start="96:17" pos:end="97:62">(<argument pos:start="96:18" pos:end="96:18"><expr pos:start="96:18" pos:end="96:18"><name pos:start="96:18" pos:end="96:18">s</name></expr></argument>, <argument pos:start="96:21" pos:end="96:24"><expr pos:start="96:21" pos:end="96:24"><name pos:start="96:21" pos:end="96:24">arg1</name></expr></argument>, <argument pos:start="96:27" pos:end="96:30"><expr pos:start="96:27" pos:end="96:30"><name pos:start="96:27" pos:end="96:30">arg1</name></expr></argument>, <argument pos:start="96:33" pos:end="97:49"><expr pos:start="96:33" pos:end="97:49"><call pos:start="96:33" pos:end="96:61"><name pos:start="96:33" pos:end="96:40">offsetof</name><argument_list pos:start="96:41" pos:end="96:61">(<argument pos:start="96:42" pos:end="96:52"><expr pos:start="96:42" pos:end="96:52"><name pos:start="96:42" pos:end="96:52">CPUTLBEntry</name></expr></argument>, <argument pos:start="96:55" pos:end="96:60"><expr pos:start="96:55" pos:end="96:60"><name pos:start="96:55" pos:end="96:60">addend</name></expr></argument>)</argument_list></call> <operator pos:start="96:63" pos:end="96:63">-</operator>
                 <call pos:start="97:18" pos:end="97:49"><name pos:start="97:18" pos:end="97:25">offsetof</name><argument_list pos:start="97:26" pos:end="97:49">(<argument pos:start="97:27" pos:end="97:37"><expr pos:start="97:27" pos:end="97:37"><name pos:start="97:27" pos:end="97:37">CPUTLBEntry</name></expr></argument>, <argument pos:start="97:40" pos:end="97:48"><expr pos:start="97:40" pos:end="97:48"><name pos:start="97:40" pos:end="97:48">addr_read</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="97:52" pos:end="97:61"><expr pos:start="97:52" pos:end="97:61"><name pos:start="97:52" pos:end="97:61">HOST_LD_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="98:5" pos:end="98:34">/* add addr_reg, arg1, arg0 */</comment>
    <expr_stmt pos:start="99:5" pos:end="99:54"><expr pos:start="99:5" pos:end="99:53"><call pos:start="99:5" pos:end="99:53"><name pos:start="99:5" pos:end="99:17">tcg_out_arith</name><argument_list pos:start="99:18" pos:end="99:53">(<argument pos:start="99:19" pos:end="99:19"><expr pos:start="99:19" pos:end="99:19"><name pos:start="99:19" pos:end="99:19">s</name></expr></argument>, <argument pos:start="99:22" pos:end="99:25"><expr pos:start="99:22" pos:end="99:25"><name pos:start="99:22" pos:end="99:25">arg0</name></expr></argument>, <argument pos:start="99:28" pos:end="99:35"><expr pos:start="99:28" pos:end="99:35"><name pos:start="99:28" pos:end="99:35">addr_reg</name></expr></argument>, <argument pos:start="99:38" pos:end="99:41"><expr pos:start="99:38" pos:end="99:41"><name pos:start="99:38" pos:end="99:41">arg1</name></expr></argument>, <argument pos:start="99:44" pos:end="99:52"><expr pos:start="99:44" pos:end="99:52"><name pos:start="99:44" pos:end="99:52">ARITH_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="100:5" pos:end="100:20"><expr pos:start="100:5" pos:end="100:19"><name pos:start="100:5" pos:end="100:8">arg0</name> <operator pos:start="100:10" pos:end="100:10">=</operator> <name pos:start="100:12" pos:end="100:19">addr_reg</name></expr>;</expr_stmt>
    <switch pos:start="101:5" pos:end="149:0">switch<condition pos:start="101:11" pos:end="101:15">(<expr pos:start="101:12" pos:end="101:14"><name pos:start="101:12" pos:end="101:14">opc</name></expr>)</condition> <block pos:start="101:17" pos:end="149:0">{<block_content pos:start="102:5" pos:end="146:20">
    <case pos:start="102:5" pos:end="102:11">case <expr pos:start="102:10" pos:end="102:10"><literal type="number" pos:start="102:10" pos:end="102:10">0</literal></expr>:</case>
        <comment type="block" pos:start="103:9" pos:end="103:35">/* ldub [arg0], data_reg */</comment>
        <expr_stmt pos:start="104:9" pos:end="104:49"><expr pos:start="104:9" pos:end="104:48"><call pos:start="104:9" pos:end="104:48"><name pos:start="104:9" pos:end="104:20">tcg_out_ldst</name><argument_list pos:start="104:21" pos:end="104:48">(<argument pos:start="104:22" pos:end="104:22"><expr pos:start="104:22" pos:end="104:22"><name pos:start="104:22" pos:end="104:22">s</name></expr></argument>, <argument pos:start="104:25" pos:end="104:32"><expr pos:start="104:25" pos:end="104:32"><name pos:start="104:25" pos:end="104:32">data_reg</name></expr></argument>, <argument pos:start="104:35" pos:end="104:38"><expr pos:start="104:35" pos:end="104:38"><name pos:start="104:35" pos:end="104:38">arg0</name></expr></argument>, <argument pos:start="104:41" pos:end="104:41"><expr pos:start="104:41" pos:end="104:41"><literal type="number" pos:start="104:41" pos:end="104:41">0</literal></expr></argument>, <argument pos:start="104:44" pos:end="104:47"><expr pos:start="104:44" pos:end="104:47"><name pos:start="104:44" pos:end="104:47">LDUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="105:9" pos:end="105:14">break;</break>
    <case pos:start="106:5" pos:end="106:15">case <expr pos:start="106:10" pos:end="106:14"><literal type="number" pos:start="106:10" pos:end="106:10">0</literal> <operator pos:start="106:12" pos:end="106:12">|</operator> <literal type="number" pos:start="106:14" pos:end="106:14">4</literal></expr>:</case>
        <comment type="block" pos:start="107:9" pos:end="107:35">/* ldsb [arg0], data_reg */</comment>
        <expr_stmt pos:start="108:9" pos:end="108:49"><expr pos:start="108:9" pos:end="108:48"><call pos:start="108:9" pos:end="108:48"><name pos:start="108:9" pos:end="108:20">tcg_out_ldst</name><argument_list pos:start="108:21" pos:end="108:48">(<argument pos:start="108:22" pos:end="108:22"><expr pos:start="108:22" pos:end="108:22"><name pos:start="108:22" pos:end="108:22">s</name></expr></argument>, <argument pos:start="108:25" pos:end="108:32"><expr pos:start="108:25" pos:end="108:32"><name pos:start="108:25" pos:end="108:32">data_reg</name></expr></argument>, <argument pos:start="108:35" pos:end="108:38"><expr pos:start="108:35" pos:end="108:38"><name pos:start="108:35" pos:end="108:38">arg0</name></expr></argument>, <argument pos:start="108:41" pos:end="108:41"><expr pos:start="108:41" pos:end="108:41"><literal type="number" pos:start="108:41" pos:end="108:41">0</literal></expr></argument>, <argument pos:start="108:44" pos:end="108:47"><expr pos:start="108:44" pos:end="108:47"><name pos:start="108:44" pos:end="108:47">LDSB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="109:9" pos:end="109:14">break;</break>
    <case pos:start="110:5" pos:end="112:0">case <expr pos:start="110:10" pos:end="110:10"><literal type="number" pos:start="110:10" pos:end="110:10">1</literal></expr>:</case>
<cpp:ifdef pos:start="111:1" pos:end="111:29">#<cpp:directive pos:start="111:2" pos:end="111:6">ifdef</cpp:directive> <name pos:start="111:8" pos:end="111:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>
        <comment type="block" pos:start="112:9" pos:end="112:35">/* lduh [arg0], data_reg */</comment>
        <expr_stmt pos:start="113:9" pos:end="113:49"><expr pos:start="113:9" pos:end="113:48"><call pos:start="113:9" pos:end="113:48"><name pos:start="113:9" pos:end="113:20">tcg_out_ldst</name><argument_list pos:start="113:21" pos:end="113:48">(<argument pos:start="113:22" pos:end="113:22"><expr pos:start="113:22" pos:end="113:22"><name pos:start="113:22" pos:end="113:22">s</name></expr></argument>, <argument pos:start="113:25" pos:end="113:32"><expr pos:start="113:25" pos:end="113:32"><name pos:start="113:25" pos:end="113:32">data_reg</name></expr></argument>, <argument pos:start="113:35" pos:end="113:38"><expr pos:start="113:35" pos:end="113:38"><name pos:start="113:35" pos:end="113:38">arg0</name></expr></argument>, <argument pos:start="113:41" pos:end="113:41"><expr pos:start="113:41" pos:end="113:41"><literal type="number" pos:start="113:41" pos:end="113:41">0</literal></expr></argument>, <argument pos:start="113:44" pos:end="113:47"><expr pos:start="113:44" pos:end="113:47"><name pos:start="113:44" pos:end="113:47">LDUH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="114:9" pos:end="114:55">/* lduha [arg0] ASI_PRIMARY_LITTLE, data_reg */</comment>
        <expr_stmt pos:start="115:9" pos:end="115:74"><expr pos:start="115:9" pos:end="115:73"><call pos:start="115:9" pos:end="115:73"><name pos:start="115:9" pos:end="115:24">tcg_out_ldst_asi</name><argument_list pos:start="115:25" pos:end="115:73">(<argument pos:start="115:26" pos:end="115:26"><expr pos:start="115:26" pos:end="115:26"><name pos:start="115:26" pos:end="115:26">s</name></expr></argument>, <argument pos:start="115:29" pos:end="115:36"><expr pos:start="115:29" pos:end="115:36"><name pos:start="115:29" pos:end="115:36">data_reg</name></expr></argument>, <argument pos:start="115:39" pos:end="115:42"><expr pos:start="115:39" pos:end="115:42"><name pos:start="115:39" pos:end="115:42">arg0</name></expr></argument>, <argument pos:start="115:45" pos:end="115:45"><expr pos:start="115:45" pos:end="115:45"><literal type="number" pos:start="115:45" pos:end="115:45">0</literal></expr></argument>, <argument pos:start="115:48" pos:end="115:52"><expr pos:start="115:48" pos:end="115:52"><name pos:start="115:48" pos:end="115:52">LDUHA</name></expr></argument>, <argument pos:start="115:55" pos:end="115:72"><expr pos:start="115:55" pos:end="115:72"><name pos:start="115:55" pos:end="115:72">ASI_PRIMARY_LITTLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="116:9" pos:end="116:14">break;</break>
    <case pos:start="117:5" pos:end="119:0">case <expr pos:start="117:10" pos:end="117:14"><literal type="number" pos:start="117:10" pos:end="117:10">1</literal> <operator pos:start="117:12" pos:end="117:12">|</operator> <literal type="number" pos:start="117:14" pos:end="117:14">4</literal></expr>:</case>
<cpp:ifdef pos:start="118:1" pos:end="118:29">#<cpp:directive pos:start="118:2" pos:end="118:6">ifdef</cpp:directive> <name pos:start="118:8" pos:end="118:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>
        <comment type="block" pos:start="119:9" pos:end="119:35">/* ldsh [arg0], data_reg */</comment>
        <expr_stmt pos:start="120:9" pos:end="120:49"><expr pos:start="120:9" pos:end="120:48"><call pos:start="120:9" pos:end="120:48"><name pos:start="120:9" pos:end="120:20">tcg_out_ldst</name><argument_list pos:start="120:21" pos:end="120:48">(<argument pos:start="120:22" pos:end="120:22"><expr pos:start="120:22" pos:end="120:22"><name pos:start="120:22" pos:end="120:22">s</name></expr></argument>, <argument pos:start="120:25" pos:end="120:32"><expr pos:start="120:25" pos:end="120:32"><name pos:start="120:25" pos:end="120:32">data_reg</name></expr></argument>, <argument pos:start="120:35" pos:end="120:38"><expr pos:start="120:35" pos:end="120:38"><name pos:start="120:35" pos:end="120:38">arg0</name></expr></argument>, <argument pos:start="120:41" pos:end="120:41"><expr pos:start="120:41" pos:end="120:41"><literal type="number" pos:start="120:41" pos:end="120:41">0</literal></expr></argument>, <argument pos:start="120:44" pos:end="120:47"><expr pos:start="120:44" pos:end="120:47"><name pos:start="120:44" pos:end="120:47">LDSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="121:9" pos:end="121:55">/* ldsha [arg0] ASI_PRIMARY_LITTLE, data_reg */</comment>
        <expr_stmt pos:start="122:9" pos:end="122:74"><expr pos:start="122:9" pos:end="122:73"><call pos:start="122:9" pos:end="122:73"><name pos:start="122:9" pos:end="122:24">tcg_out_ldst_asi</name><argument_list pos:start="122:25" pos:end="122:73">(<argument pos:start="122:26" pos:end="122:26"><expr pos:start="122:26" pos:end="122:26"><name pos:start="122:26" pos:end="122:26">s</name></expr></argument>, <argument pos:start="122:29" pos:end="122:36"><expr pos:start="122:29" pos:end="122:36"><name pos:start="122:29" pos:end="122:36">data_reg</name></expr></argument>, <argument pos:start="122:39" pos:end="122:42"><expr pos:start="122:39" pos:end="122:42"><name pos:start="122:39" pos:end="122:42">arg0</name></expr></argument>, <argument pos:start="122:45" pos:end="122:45"><expr pos:start="122:45" pos:end="122:45"><literal type="number" pos:start="122:45" pos:end="122:45">0</literal></expr></argument>, <argument pos:start="122:48" pos:end="122:52"><expr pos:start="122:48" pos:end="122:52"><name pos:start="122:48" pos:end="122:52">LDSHA</name></expr></argument>, <argument pos:start="122:55" pos:end="122:72"><expr pos:start="122:55" pos:end="122:72"><name pos:start="122:55" pos:end="122:72">ASI_PRIMARY_LITTLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="123:9" pos:end="123:14">break;</break>
    <case pos:start="124:5" pos:end="126:0">case <expr pos:start="124:10" pos:end="124:10"><literal type="number" pos:start="124:10" pos:end="124:10">2</literal></expr>:</case>
<cpp:ifdef pos:start="125:1" pos:end="125:29">#<cpp:directive pos:start="125:2" pos:end="125:6">ifdef</cpp:directive> <name pos:start="125:8" pos:end="125:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>
        <comment type="block" pos:start="126:9" pos:end="126:35">/* lduw [arg0], data_reg */</comment>
        <expr_stmt pos:start="127:9" pos:end="127:49"><expr pos:start="127:9" pos:end="127:48"><call pos:start="127:9" pos:end="127:48"><name pos:start="127:9" pos:end="127:20">tcg_out_ldst</name><argument_list pos:start="127:21" pos:end="127:48">(<argument pos:start="127:22" pos:end="127:22"><expr pos:start="127:22" pos:end="127:22"><name pos:start="127:22" pos:end="127:22">s</name></expr></argument>, <argument pos:start="127:25" pos:end="127:32"><expr pos:start="127:25" pos:end="127:32"><name pos:start="127:25" pos:end="127:32">data_reg</name></expr></argument>, <argument pos:start="127:35" pos:end="127:38"><expr pos:start="127:35" pos:end="127:38"><name pos:start="127:35" pos:end="127:38">arg0</name></expr></argument>, <argument pos:start="127:41" pos:end="127:41"><expr pos:start="127:41" pos:end="127:41"><literal type="number" pos:start="127:41" pos:end="127:41">0</literal></expr></argument>, <argument pos:start="127:44" pos:end="127:47"><expr pos:start="127:44" pos:end="127:47"><name pos:start="127:44" pos:end="127:47">LDUW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="128:9" pos:end="128:55">/* lduwa [arg0] ASI_PRIMARY_LITTLE, data_reg */</comment>
        <expr_stmt pos:start="129:9" pos:end="129:74"><expr pos:start="129:9" pos:end="129:73"><call pos:start="129:9" pos:end="129:73"><name pos:start="129:9" pos:end="129:24">tcg_out_ldst_asi</name><argument_list pos:start="129:25" pos:end="129:73">(<argument pos:start="129:26" pos:end="129:26"><expr pos:start="129:26" pos:end="129:26"><name pos:start="129:26" pos:end="129:26">s</name></expr></argument>, <argument pos:start="129:29" pos:end="129:36"><expr pos:start="129:29" pos:end="129:36"><name pos:start="129:29" pos:end="129:36">data_reg</name></expr></argument>, <argument pos:start="129:39" pos:end="129:42"><expr pos:start="129:39" pos:end="129:42"><name pos:start="129:39" pos:end="129:42">arg0</name></expr></argument>, <argument pos:start="129:45" pos:end="129:45"><expr pos:start="129:45" pos:end="129:45"><literal type="number" pos:start="129:45" pos:end="129:45">0</literal></expr></argument>, <argument pos:start="129:48" pos:end="129:52"><expr pos:start="129:48" pos:end="129:52"><name pos:start="129:48" pos:end="129:52">LDUWA</name></expr></argument>, <argument pos:start="129:55" pos:end="129:72"><expr pos:start="129:55" pos:end="129:72"><name pos:start="129:55" pos:end="129:72">ASI_PRIMARY_LITTLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="130:9" pos:end="130:14">break;</break>
    <case pos:start="131:5" pos:end="133:0">case <expr pos:start="131:10" pos:end="131:14"><literal type="number" pos:start="131:10" pos:end="131:10">2</literal> <operator pos:start="131:12" pos:end="131:12">|</operator> <literal type="number" pos:start="131:14" pos:end="131:14">4</literal></expr>:</case>
<cpp:ifdef pos:start="132:1" pos:end="132:29">#<cpp:directive pos:start="132:2" pos:end="132:6">ifdef</cpp:directive> <name pos:start="132:8" pos:end="132:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>
        <comment type="block" pos:start="133:9" pos:end="133:35">/* ldsw [arg0], data_reg */</comment>
        <expr_stmt pos:start="134:9" pos:end="134:49"><expr pos:start="134:9" pos:end="134:48"><call pos:start="134:9" pos:end="134:48"><name pos:start="134:9" pos:end="134:20">tcg_out_ldst</name><argument_list pos:start="134:21" pos:end="134:48">(<argument pos:start="134:22" pos:end="134:22"><expr pos:start="134:22" pos:end="134:22"><name pos:start="134:22" pos:end="134:22">s</name></expr></argument>, <argument pos:start="134:25" pos:end="134:32"><expr pos:start="134:25" pos:end="134:32"><name pos:start="134:25" pos:end="134:32">data_reg</name></expr></argument>, <argument pos:start="134:35" pos:end="134:38"><expr pos:start="134:35" pos:end="134:38"><name pos:start="134:35" pos:end="134:38">arg0</name></expr></argument>, <argument pos:start="134:41" pos:end="134:41"><expr pos:start="134:41" pos:end="134:41"><literal type="number" pos:start="134:41" pos:end="134:41">0</literal></expr></argument>, <argument pos:start="134:44" pos:end="134:47"><expr pos:start="134:44" pos:end="134:47"><name pos:start="134:44" pos:end="134:47">LDSW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="135:9" pos:end="135:55">/* ldswa [arg0] ASI_PRIMARY_LITTLE, data_reg */</comment>
        <expr_stmt pos:start="136:9" pos:end="136:74"><expr pos:start="136:9" pos:end="136:73"><call pos:start="136:9" pos:end="136:73"><name pos:start="136:9" pos:end="136:24">tcg_out_ldst_asi</name><argument_list pos:start="136:25" pos:end="136:73">(<argument pos:start="136:26" pos:end="136:26"><expr pos:start="136:26" pos:end="136:26"><name pos:start="136:26" pos:end="136:26">s</name></expr></argument>, <argument pos:start="136:29" pos:end="136:36"><expr pos:start="136:29" pos:end="136:36"><name pos:start="136:29" pos:end="136:36">data_reg</name></expr></argument>, <argument pos:start="136:39" pos:end="136:42"><expr pos:start="136:39" pos:end="136:42"><name pos:start="136:39" pos:end="136:42">arg0</name></expr></argument>, <argument pos:start="136:45" pos:end="136:45"><expr pos:start="136:45" pos:end="136:45"><literal type="number" pos:start="136:45" pos:end="136:45">0</literal></expr></argument>, <argument pos:start="136:48" pos:end="136:52"><expr pos:start="136:48" pos:end="136:52"><name pos:start="136:48" pos:end="136:52">LDSWA</name></expr></argument>, <argument pos:start="136:55" pos:end="136:72"><expr pos:start="136:55" pos:end="136:72"><name pos:start="136:55" pos:end="136:72">ASI_PRIMARY_LITTLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="137:9" pos:end="137:14">break;</break>
    <case pos:start="138:5" pos:end="140:0">case <expr pos:start="138:10" pos:end="138:10"><literal type="number" pos:start="138:10" pos:end="138:10">3</literal></expr>:</case>
<cpp:ifdef pos:start="139:1" pos:end="139:29">#<cpp:directive pos:start="139:2" pos:end="139:6">ifdef</cpp:directive> <name pos:start="139:8" pos:end="139:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>
        <comment type="block" pos:start="140:9" pos:end="140:34">/* ldx [arg0], data_reg */</comment>
        <expr_stmt pos:start="141:9" pos:end="141:48"><expr pos:start="141:9" pos:end="141:47"><call pos:start="141:9" pos:end="141:47"><name pos:start="141:9" pos:end="141:20">tcg_out_ldst</name><argument_list pos:start="141:21" pos:end="141:47">(<argument pos:start="141:22" pos:end="141:22"><expr pos:start="141:22" pos:end="141:22"><name pos:start="141:22" pos:end="141:22">s</name></expr></argument>, <argument pos:start="141:25" pos:end="141:32"><expr pos:start="141:25" pos:end="141:32"><name pos:start="141:25" pos:end="141:32">data_reg</name></expr></argument>, <argument pos:start="141:35" pos:end="141:38"><expr pos:start="141:35" pos:end="141:38"><name pos:start="141:35" pos:end="141:38">arg0</name></expr></argument>, <argument pos:start="141:41" pos:end="141:41"><expr pos:start="141:41" pos:end="141:41"><literal type="number" pos:start="141:41" pos:end="141:41">0</literal></expr></argument>, <argument pos:start="141:44" pos:end="141:46"><expr pos:start="141:44" pos:end="141:46"><name pos:start="141:44" pos:end="141:46">LDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="142:9" pos:end="142:54">/* ldxa [arg0] ASI_PRIMARY_LITTLE, data_reg */</comment>
        <expr_stmt pos:start="143:9" pos:end="143:73"><expr pos:start="143:9" pos:end="143:72"><call pos:start="143:9" pos:end="143:72"><name pos:start="143:9" pos:end="143:24">tcg_out_ldst_asi</name><argument_list pos:start="143:25" pos:end="143:72">(<argument pos:start="143:26" pos:end="143:26"><expr pos:start="143:26" pos:end="143:26"><name pos:start="143:26" pos:end="143:26">s</name></expr></argument>, <argument pos:start="143:29" pos:end="143:36"><expr pos:start="143:29" pos:end="143:36"><name pos:start="143:29" pos:end="143:36">data_reg</name></expr></argument>, <argument pos:start="143:39" pos:end="143:42"><expr pos:start="143:39" pos:end="143:42"><name pos:start="143:39" pos:end="143:42">arg0</name></expr></argument>, <argument pos:start="143:45" pos:end="143:45"><expr pos:start="143:45" pos:end="143:45"><literal type="number" pos:start="143:45" pos:end="143:45">0</literal></expr></argument>, <argument pos:start="143:48" pos:end="143:51"><expr pos:start="143:48" pos:end="143:51"><name pos:start="143:48" pos:end="143:51">LDXA</name></expr></argument>, <argument pos:start="143:54" pos:end="143:71"><expr pos:start="143:54" pos:end="143:71"><name pos:start="143:54" pos:end="143:71">ASI_PRIMARY_LITTLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="144:9" pos:end="144:14">break;</break>
    <default pos:start="145:5" pos:end="145:12">default:</default>
        <expr_stmt pos:start="146:9" pos:end="146:20"><expr pos:start="146:9" pos:end="146:19"><call pos:start="146:9" pos:end="146:19"><name pos:start="146:9" pos:end="146:17">tcg_abort</name><argument_list pos:start="146:18" pos:end="146:19">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
<cpp:if pos:start="148:1" pos:end="148:27">#<cpp:directive pos:start="148:2" pos:end="148:3">if</cpp:directive> <expr pos:start="148:5" pos:end="148:27"><call pos:start="148:5" pos:end="148:27"><name pos:start="148:5" pos:end="148:11">defined</name><argument_list pos:start="148:12" pos:end="148:27">(<argument pos:start="148:13" pos:end="148:26"><expr pos:start="148:13" pos:end="148:26"><name pos:start="148:13" pos:end="148:26">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block" pos:start="149:5" pos:end="149:17">/* label2: */</comment>
    <expr_stmt pos:start="150:5" pos:end="152:58"><expr pos:start="150:5" pos:end="152:57"><operator pos:start="150:5" pos:end="150:5">*</operator><name pos:start="150:6" pos:end="150:15">label2_ptr</name> <operator pos:start="150:17" pos:end="150:17">=</operator> <operator pos:start="150:19" pos:end="150:19">(</operator><call pos:start="150:20" pos:end="150:29"><name pos:start="150:20" pos:end="150:26">INSN_OP</name><argument_list pos:start="150:27" pos:end="150:29">(<argument pos:start="150:28" pos:end="150:28"><expr pos:start="150:28" pos:end="150:28"><literal type="number" pos:start="150:28" pos:end="150:28">0</literal></expr></argument>)</argument_list></call> <operator pos:start="150:31" pos:end="150:31">|</operator> <call pos:start="150:33" pos:end="150:52"><name pos:start="150:33" pos:end="150:41">INSN_COND</name><argument_list pos:start="150:42" pos:end="150:52">(<argument pos:start="150:43" pos:end="150:48"><expr pos:start="150:43" pos:end="150:48"><name pos:start="150:43" pos:end="150:48">COND_A</name></expr></argument>, <argument pos:start="150:51" pos:end="150:51"><expr pos:start="150:51" pos:end="150:51"><literal type="number" pos:start="150:51" pos:end="150:51">0</literal></expr></argument>)</argument_list></call> <operator pos:start="150:54" pos:end="150:54">|</operator> <call pos:start="150:56" pos:end="150:68"><name pos:start="150:56" pos:end="150:63">INSN_OP2</name><argument_list pos:start="150:64" pos:end="150:68">(<argument pos:start="150:65" pos:end="150:67"><expr pos:start="150:65" pos:end="150:67"><literal type="number" pos:start="150:65" pos:end="150:67">0x2</literal></expr></argument>)</argument_list></call> <operator pos:start="150:70" pos:end="150:70">|</operator>
                   <call pos:start="151:20" pos:end="152:56"><name pos:start="151:20" pos:end="151:29">INSN_OFF22</name><argument_list pos:start="151:30" pos:end="152:56">(<argument pos:start="151:31" pos:end="152:55"><expr pos:start="151:31" pos:end="152:55"><operator pos:start="151:31" pos:end="151:31">(</operator><name pos:start="151:32" pos:end="151:39">unsigned</name> <name pos:start="151:41" pos:end="151:44">long</name><operator pos:start="151:45" pos:end="151:45">)</operator><name pos:start="151:46" pos:end="151:56"><name pos:start="151:46" pos:end="151:46">s</name><operator pos:start="151:47" pos:end="151:48">-&gt;</operator><name pos:start="151:49" pos:end="151:56">code_ptr</name></name> <operator pos:start="151:58" pos:end="151:58">-</operator>
                              <operator pos:start="152:31" pos:end="152:31">(</operator><name pos:start="152:32" pos:end="152:39">unsigned</name> <name pos:start="152:41" pos:end="152:44">long</name><operator pos:start="152:45" pos:end="152:45">)</operator><name pos:start="152:46" pos:end="152:55">label2_ptr</name></expr></argument>)</argument_list></call><operator pos:start="152:57" pos:end="152:57">)</operator></expr>;</expr_stmt>
</block_content>}</block></function></unit>
