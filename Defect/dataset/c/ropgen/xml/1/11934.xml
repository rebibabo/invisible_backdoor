<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11934.c" pos:tabs="8"><function pos:start="1:1" pos:end="155:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">a64_write_packet</name><parameter_list pos:start="1:28" pos:end="1:69">(<parameter pos:start="1:29" pos:end="1:53"><decl pos:start="1:29" pos:end="1:53"><type pos:start="1:29" pos:end="1:53"><name pos:start="1:29" pos:end="1:50"><name pos:start="1:29" pos:end="1:34">struct</name> <name pos:start="1:36" pos:end="1:50">AVFormatContext</name></name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">s</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:68"><decl pos:start="1:56" pos:end="1:68"><type pos:start="1:56" pos:end="1:68"><name pos:start="1:56" pos:end="1:63">AVPacket</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="155:1">{<block_content pos:start="5:5" pos:end="153:13">

    <decl_stmt pos:start="5:5" pos:end="5:49"><decl pos:start="5:5" pos:end="5:48"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">AVCodecContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:25">avctx</name> <init pos:start="5:27" pos:end="5:48">= <expr pos:start="5:29" pos:end="5:48"><name pos:start="5:29" pos:end="5:41"><name pos:start="5:29" pos:end="5:29">s</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:38">streams</name><index pos:start="5:39" pos:end="5:41">[<expr pos:start="5:40" pos:end="5:40"><literal type="number" pos:start="5:40" pos:end="5:40">0</literal></expr>]</index></name><operator pos:start="5:42" pos:end="5:43">-&gt;</operator><name pos:start="5:44" pos:end="5:48">codec</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">A64MuxerContext</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:22">c</name> <init pos:start="7:24" pos:end="7:37">= <expr pos:start="7:26" pos:end="7:37"><name pos:start="7:26" pos:end="7:37"><name pos:start="7:26" pos:end="7:26">s</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:20">ch_chunksize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:16">lifetime</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">frame_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:20">charset_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:18">frame_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:18">num_frames</name></decl>;</decl_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:37">/* fetch values from extradata */</comment>

    <switch pos:start="27:5" pos:end="147:5">switch <condition pos:start="27:12" pos:end="27:29">(<expr pos:start="27:13" pos:end="27:28"><name pos:start="27:13" pos:end="27:28"><name pos:start="27:13" pos:end="27:17">avctx</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:24">codec</name><operator pos:start="27:25" pos:end="27:26">-&gt;</operator><name pos:start="27:27" pos:end="27:28">id</name></name></expr>)</condition> <block pos:start="27:31" pos:end="147:5">{<block_content pos:start="29:5" pos:end="145:14">

    <case pos:start="29:5" pos:end="29:28">case <expr pos:start="29:10" pos:end="29:27"><name pos:start="29:10" pos:end="29:27">CODEC_ID_A64_MULTI</name></expr>:</case>

    <case pos:start="31:5" pos:end="31:29">case <expr pos:start="31:10" pos:end="31:28"><name pos:start="31:10" pos:end="31:28">CODEC_ID_A64_MULTI5</name></expr>:</case>

        <if_stmt pos:start="33:9" pos:end="135:9"><if pos:start="33:9" pos:end="135:9">if<condition pos:start="33:11" pos:end="33:26">(<expr pos:start="33:12" pos:end="33:25"><name pos:start="33:12" pos:end="33:25"><name pos:start="33:12" pos:end="33:12">c</name><operator pos:start="33:13" pos:end="33:14">-&gt;</operator><name pos:start="33:15" pos:end="33:25">interleaved</name></name></expr>)</condition> <block pos:start="33:28" pos:end="135:9">{<block_content pos:start="51:13" pos:end="133:18">

            <comment type="block" pos:start="35:13" pos:end="49:70">/* Write interleaved, means we insert chunks of the future charset before each current frame.

             * Reason: if we load 1 charset + corresponding frames in one block on c64, we need to store

             * them first and then display frame by frame to keep in sync. Thus we would read and write

             * the data for colram from/to ram first and waste too much time. If we interleave and send the

             * charset beforehand, we assemble a new charset chunk by chunk, write current screen data to

             * screen-ram to be displayed and decode the colram directly to colram-location $d800 during

             * the overscan, while reading directly from source

             * This is the only way so far, to achieve 25fps on c64 */</comment>

            <if_stmt pos:start="51:13" pos:end="75:13"><if pos:start="51:13" pos:end="67:13">if<condition pos:start="51:15" pos:end="51:32">(<expr pos:start="51:16" pos:end="51:31"><name pos:start="51:16" pos:end="51:31"><name pos:start="51:16" pos:end="51:20">avctx</name><operator pos:start="51:21" pos:end="51:22">-&gt;</operator><name pos:start="51:23" pos:end="51:31">extradata</name></name></expr>)</condition> <block pos:start="51:34" pos:end="67:13">{<block_content pos:start="55:17" pos:end="61:62">

                <comment type="block" pos:start="53:17" pos:end="53:49">/* fetch values from extradata */</comment>

                <expr_stmt pos:start="55:17" pos:end="55:61"><expr pos:start="55:17" pos:end="55:60"><name pos:start="55:17" pos:end="55:24">lifetime</name>     <operator pos:start="55:30" pos:end="55:30">=</operator> <call pos:start="55:32" pos:end="55:60"><name pos:start="55:32" pos:end="55:38">AV_RB32</name><argument_list pos:start="55:39" pos:end="55:60">(<argument pos:start="55:40" pos:end="55:59"><expr pos:start="55:40" pos:end="55:59"><name pos:start="55:40" pos:end="55:55"><name pos:start="55:40" pos:end="55:44">avctx</name><operator pos:start="55:45" pos:end="55:46">-&gt;</operator><name pos:start="55:47" pos:end="55:55">extradata</name></name> <operator pos:start="55:57" pos:end="55:57">+</operator> <literal type="number" pos:start="55:59" pos:end="55:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:61"><expr pos:start="57:17" pos:end="57:60"><name pos:start="57:17" pos:end="57:27">frame_count</name>  <operator pos:start="57:30" pos:end="57:30">=</operator> <call pos:start="57:32" pos:end="57:60"><name pos:start="57:32" pos:end="57:38">AV_RB32</name><argument_list pos:start="57:39" pos:end="57:60">(<argument pos:start="57:40" pos:end="57:59"><expr pos:start="57:40" pos:end="57:59"><name pos:start="57:40" pos:end="57:55"><name pos:start="57:40" pos:end="57:44">avctx</name><operator pos:start="57:45" pos:end="57:46">-&gt;</operator><name pos:start="57:47" pos:end="57:55">extradata</name></name> <operator pos:start="57:57" pos:end="57:57">+</operator> <literal type="number" pos:start="57:59" pos:end="57:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:61"><expr pos:start="59:17" pos:end="59:60"><name pos:start="59:17" pos:end="59:28">charset_size</name> <operator pos:start="59:30" pos:end="59:30">=</operator> <call pos:start="59:32" pos:end="59:60"><name pos:start="59:32" pos:end="59:38">AV_RB32</name><argument_list pos:start="59:39" pos:end="59:60">(<argument pos:start="59:40" pos:end="59:59"><expr pos:start="59:40" pos:end="59:59"><name pos:start="59:40" pos:end="59:55"><name pos:start="59:40" pos:end="59:44">avctx</name><operator pos:start="59:45" pos:end="59:46">-&gt;</operator><name pos:start="59:47" pos:end="59:55">extradata</name></name> <operator pos:start="59:57" pos:end="59:57">+</operator> <literal type="number" pos:start="59:59" pos:end="59:59">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:62"><expr pos:start="61:17" pos:end="61:61"><name pos:start="61:17" pos:end="61:26">frame_size</name>   <operator pos:start="61:30" pos:end="61:30">=</operator> <call pos:start="61:32" pos:end="61:61"><name pos:start="61:32" pos:end="61:38">AV_RB32</name><argument_list pos:start="61:39" pos:end="61:61">(<argument pos:start="61:40" pos:end="61:60"><expr pos:start="61:40" pos:end="61:60"><name pos:start="61:40" pos:end="61:55"><name pos:start="61:40" pos:end="61:44">avctx</name><operator pos:start="61:45" pos:end="61:46">-&gt;</operator><name pos:start="61:47" pos:end="61:55">extradata</name></name> <operator pos:start="61:57" pos:end="61:57">+</operator> <literal type="number" pos:start="61:59" pos:end="61:60">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="65:17" pos:end="65:42">/* TODO: sanity checks? */</comment>

            </block_content>}</block></if>

            <else pos:start="69:13" pos:end="75:13">else <block pos:start="69:18" pos:end="75:13">{<block_content pos:start="71:17" pos:end="73:39">

                <expr_stmt pos:start="71:17" pos:end="71:67"><expr pos:start="71:17" pos:end="71:66"><call pos:start="71:17" pos:end="71:66"><name pos:start="71:17" pos:end="71:22">av_log</name><argument_list pos:start="71:23" pos:end="71:66">(<argument pos:start="71:24" pos:end="71:28"><expr pos:start="71:24" pos:end="71:28"><name pos:start="71:24" pos:end="71:28">avctx</name></expr></argument>, <argument pos:start="71:31" pos:end="71:42"><expr pos:start="71:31" pos:end="71:42"><name pos:start="71:31" pos:end="71:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:45" pos:end="71:65"><expr pos:start="71:45" pos:end="71:65"><literal type="string" pos:start="71:45" pos:end="71:65">"extradata not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="73:17" pos:end="73:39">return <expr pos:start="73:24" pos:end="73:38"><call pos:start="73:24" pos:end="73:38"><name pos:start="73:24" pos:end="73:30">AVERROR</name><argument_list pos:start="73:31" pos:end="73:38">(<argument pos:start="73:32" pos:end="73:37"><expr pos:start="73:32" pos:end="73:37"><name pos:start="73:32" pos:end="73:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:47"><expr pos:start="77:13" pos:end="77:46"><name pos:start="77:13" pos:end="77:24">ch_chunksize</name><operator pos:start="77:25" pos:end="77:25">=</operator><name pos:start="77:26" pos:end="77:37">charset_size</name><operator pos:start="77:38" pos:end="77:38">/</operator><name pos:start="77:39" pos:end="77:46">lifetime</name></expr>;</expr_stmt>

            <comment type="block" pos:start="79:13" pos:end="79:85">/* TODO: check if charset/size is % lifetime, but maybe check in codec */</comment>

            <if_stmt pos:start="81:13" pos:end="83:50"><if pos:start="81:13" pos:end="81:48">if<condition pos:start="81:15" pos:end="81:25">(<expr pos:start="81:16" pos:end="81:24"><name pos:start="81:16" pos:end="81:24"><name pos:start="81:16" pos:end="81:18">pkt</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:24">data</name></name></expr>)</condition><block type="pseudo" pos:start="81:27" pos:end="81:48"><block_content pos:start="81:27" pos:end="81:48"> <expr_stmt pos:start="81:27" pos:end="81:48"><expr pos:start="81:27" pos:end="81:47"><name pos:start="81:27" pos:end="81:36">num_frames</name> <operator pos:start="81:38" pos:end="81:38">=</operator> <name pos:start="81:40" pos:end="81:47">lifetime</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="83:13" pos:end="83:50">else<block type="pseudo" pos:start="83:18" pos:end="83:50"><block_content pos:start="83:18" pos:end="83:50"> <expr_stmt pos:start="83:18" pos:end="83:50"><expr pos:start="83:18" pos:end="83:49"><name pos:start="83:18" pos:end="83:27">num_frames</name> <operator pos:start="83:29" pos:end="83:29">=</operator> <name pos:start="83:31" pos:end="83:49"><name pos:start="83:31" pos:end="83:31">c</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:49">prev_frame_count</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <for pos:start="85:13" pos:end="119:13">for<control pos:start="85:16" pos:end="85:43">(<init pos:start="85:17" pos:end="85:22"><expr pos:start="85:17" pos:end="85:21"><name pos:start="85:17" pos:end="85:17">i</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <literal type="number" pos:start="85:21" pos:end="85:21">0</literal></expr>;</init> <condition pos:start="85:24" pos:end="85:38"><expr pos:start="85:24" pos:end="85:37"><name pos:start="85:24" pos:end="85:24">i</name> <operator pos:start="85:26" pos:end="85:26">&lt;</operator> <name pos:start="85:28" pos:end="85:37">num_frames</name></expr>;</condition> <incr pos:start="85:40" pos:end="85:42"><expr pos:start="85:40" pos:end="85:42"><name pos:start="85:40" pos:end="85:40">i</name><operator pos:start="85:41" pos:end="85:42">++</operator></expr></incr>)</control> <block pos:start="85:45" pos:end="119:13">{<block_content pos:start="87:17" pos:end="117:17">

                <if_stmt pos:start="87:17" pos:end="101:17"><if pos:start="87:17" pos:end="93:17">if<condition pos:start="87:19" pos:end="87:29">(<expr pos:start="87:20" pos:end="87:28"><name pos:start="87:20" pos:end="87:28"><name pos:start="87:20" pos:end="87:22">pkt</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:28">data</name></name></expr>)</condition> <block pos:start="87:31" pos:end="93:17">{<block_content pos:start="91:21" pos:end="91:82">

                    <comment type="block" pos:start="89:21" pos:end="89:76">/* if available, put newest charset chunk into buffer */</comment>

                    <expr_stmt pos:start="91:21" pos:end="91:82"><expr pos:start="91:21" pos:end="91:81"><call pos:start="91:21" pos:end="91:81"><name pos:start="91:21" pos:end="91:30">put_buffer</name><argument_list pos:start="91:31" pos:end="91:81">(<argument pos:start="91:32" pos:end="91:36"><expr pos:start="91:32" pos:end="91:36"><name pos:start="91:32" pos:end="91:36"><name pos:start="91:32" pos:end="91:32">s</name><operator pos:start="91:33" pos:end="91:34">-&gt;</operator><name pos:start="91:35" pos:end="91:36">pb</name></name></expr></argument>, <argument pos:start="91:39" pos:end="91:66"><expr pos:start="91:39" pos:end="91:66"><name pos:start="91:39" pos:end="91:47"><name pos:start="91:39" pos:end="91:41">pkt</name><operator pos:start="91:42" pos:end="91:43">-&gt;</operator><name pos:start="91:44" pos:end="91:47">data</name></name> <operator pos:start="91:49" pos:end="91:49">+</operator> <name pos:start="91:51" pos:end="91:62">ch_chunksize</name> <operator pos:start="91:64" pos:end="91:64">*</operator> <name pos:start="91:66" pos:end="91:66">i</name></expr></argument>, <argument pos:start="91:69" pos:end="91:80"><expr pos:start="91:69" pos:end="91:80"><name pos:start="91:69" pos:end="91:80">ch_chunksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if>

                <else pos:start="95:17" pos:end="101:17">else <block pos:start="95:22" pos:end="101:17">{<block_content pos:start="99:21" pos:end="99:73">

                    <comment type="block" pos:start="97:21" pos:end="97:84">/* a bit ugly, but is there an alternative to put many zeros? */</comment>

                    <for pos:start="99:21" pos:end="99:73">for<control pos:start="99:24" pos:end="99:53">(<init pos:start="99:25" pos:end="99:30"><expr pos:start="99:25" pos:end="99:29"><name pos:start="99:25" pos:end="99:25">j</name> <operator pos:start="99:27" pos:end="99:27">=</operator> <literal type="number" pos:start="99:29" pos:end="99:29">0</literal></expr>;</init> <condition pos:start="99:32" pos:end="99:48"><expr pos:start="99:32" pos:end="99:47"><name pos:start="99:32" pos:end="99:32">j</name> <operator pos:start="99:34" pos:end="99:34">&lt;</operator> <name pos:start="99:36" pos:end="99:47">ch_chunksize</name></expr>;</condition> <incr pos:start="99:50" pos:end="99:52"><expr pos:start="99:50" pos:end="99:52"><name pos:start="99:50" pos:end="99:50">j</name><operator pos:start="99:51" pos:end="99:52">++</operator></expr></incr>)</control><block type="pseudo" pos:start="99:55" pos:end="99:73"><block_content pos:start="99:55" pos:end="99:73"> <expr_stmt pos:start="99:55" pos:end="99:73"><expr pos:start="99:55" pos:end="99:72"><call pos:start="99:55" pos:end="99:72"><name pos:start="99:55" pos:end="99:62">put_byte</name><argument_list pos:start="99:63" pos:end="99:72">(<argument pos:start="99:64" pos:end="99:68"><expr pos:start="99:64" pos:end="99:68"><name pos:start="99:64" pos:end="99:68"><name pos:start="99:64" pos:end="99:64">s</name><operator pos:start="99:65" pos:end="99:66">-&gt;</operator><name pos:start="99:67" pos:end="99:68">pb</name></name></expr></argument>, <argument pos:start="99:71" pos:end="99:71"><expr pos:start="99:71" pos:end="99:71"><literal type="number" pos:start="99:71" pos:end="99:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="103:17" pos:end="117:17"><if pos:start="103:17" pos:end="109:17">if<condition pos:start="103:19" pos:end="103:36">(<expr pos:start="103:20" pos:end="103:35"><name pos:start="103:20" pos:end="103:35"><name pos:start="103:20" pos:end="103:20">c</name><operator pos:start="103:21" pos:end="103:22">-&gt;</operator><name pos:start="103:23" pos:end="103:30">prev_pkt</name><operator pos:start="103:31" pos:end="103:31">.</operator><name pos:start="103:32" pos:end="103:35">data</name></name></expr>)</condition> <block pos:start="103:38" pos:end="109:17">{<block_content pos:start="107:21" pos:end="107:100">

                    <comment type="block" pos:start="105:21" pos:end="105:82">/* put frame (screen + colram) from last packet into buffer */</comment>

                    <expr_stmt pos:start="107:21" pos:end="107:100"><expr pos:start="107:21" pos:end="107:99"><call pos:start="107:21" pos:end="107:99"><name pos:start="107:21" pos:end="107:30">put_buffer</name><argument_list pos:start="107:31" pos:end="107:99">(<argument pos:start="107:32" pos:end="107:36"><expr pos:start="107:32" pos:end="107:36"><name pos:start="107:32" pos:end="107:36"><name pos:start="107:32" pos:end="107:32">s</name><operator pos:start="107:33" pos:end="107:34">-&gt;</operator><name pos:start="107:35" pos:end="107:36">pb</name></name></expr></argument>, <argument pos:start="107:39" pos:end="107:86"><expr pos:start="107:39" pos:end="107:86"><name pos:start="107:39" pos:end="107:54"><name pos:start="107:39" pos:end="107:39">c</name><operator pos:start="107:40" pos:end="107:41">-&gt;</operator><name pos:start="107:42" pos:end="107:49">prev_pkt</name><operator pos:start="107:50" pos:end="107:50">.</operator><name pos:start="107:51" pos:end="107:54">data</name></name> <operator pos:start="107:56" pos:end="107:56">+</operator> <name pos:start="107:58" pos:end="107:69">charset_size</name> <operator pos:start="107:71" pos:end="107:71">+</operator> <name pos:start="107:73" pos:end="107:82">frame_size</name> <operator pos:start="107:84" pos:end="107:84">*</operator> <name pos:start="107:86" pos:end="107:86">i</name></expr></argument>, <argument pos:start="107:89" pos:end="107:98"><expr pos:start="107:89" pos:end="107:98"><name pos:start="107:89" pos:end="107:98">frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if>

                <else pos:start="111:17" pos:end="117:17">else <block pos:start="111:22" pos:end="117:17">{<block_content pos:start="115:21" pos:end="115:71">

                    <comment type="block" pos:start="113:21" pos:end="113:84">/* a bit ugly, but is there an alternative to put many zeros? */</comment>

                    <for pos:start="115:21" pos:end="115:71">for<control pos:start="115:24" pos:end="115:51">(<init pos:start="115:25" pos:end="115:30"><expr pos:start="115:25" pos:end="115:29"><name pos:start="115:25" pos:end="115:25">j</name> <operator pos:start="115:27" pos:end="115:27">=</operator> <literal type="number" pos:start="115:29" pos:end="115:29">0</literal></expr>;</init> <condition pos:start="115:32" pos:end="115:46"><expr pos:start="115:32" pos:end="115:45"><name pos:start="115:32" pos:end="115:32">j</name> <operator pos:start="115:34" pos:end="115:34">&lt;</operator> <name pos:start="115:36" pos:end="115:45">frame_size</name></expr>;</condition> <incr pos:start="115:48" pos:end="115:50"><expr pos:start="115:48" pos:end="115:50"><name pos:start="115:48" pos:end="115:48">j</name><operator pos:start="115:49" pos:end="115:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="115:53" pos:end="115:71"><block_content pos:start="115:53" pos:end="115:71"> <expr_stmt pos:start="115:53" pos:end="115:71"><expr pos:start="115:53" pos:end="115:70"><call pos:start="115:53" pos:end="115:70"><name pos:start="115:53" pos:end="115:60">put_byte</name><argument_list pos:start="115:61" pos:end="115:70">(<argument pos:start="115:62" pos:end="115:66"><expr pos:start="115:62" pos:end="115:66"><name pos:start="115:62" pos:end="115:66"><name pos:start="115:62" pos:end="115:62">s</name><operator pos:start="115:63" pos:end="115:64">-&gt;</operator><name pos:start="115:65" pos:end="115:66">pb</name></name></expr></argument>, <argument pos:start="115:69" pos:end="115:69"><expr pos:start="115:69" pos:end="115:69"><literal type="number" pos:start="115:69" pos:end="115:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

            <comment type="block" pos:start="121:13" pos:end="121:53">/* backup current packet for next turn */</comment>

            <if_stmt pos:start="123:13" pos:end="129:13"><if pos:start="123:13" pos:end="129:13">if<condition pos:start="123:15" pos:end="123:25">(<expr pos:start="123:16" pos:end="123:24"><name pos:start="123:16" pos:end="123:24"><name pos:start="123:16" pos:end="123:18">pkt</name><operator pos:start="123:19" pos:end="123:20">-&gt;</operator><name pos:start="123:21" pos:end="123:24">data</name></name></expr>)</condition> <block pos:start="123:27" pos:end="129:13">{<block_content pos:start="125:17" pos:end="127:63">

                <expr_stmt pos:start="125:17" pos:end="125:55"><expr pos:start="125:17" pos:end="125:54"><call pos:start="125:17" pos:end="125:54"><name pos:start="125:17" pos:end="125:29">av_new_packet</name><argument_list pos:start="125:30" pos:end="125:54">(<argument pos:start="125:31" pos:end="125:42"><expr pos:start="125:31" pos:end="125:42"><operator pos:start="125:31" pos:end="125:31">&amp;</operator><name pos:start="125:32" pos:end="125:42"><name pos:start="125:32" pos:end="125:32">c</name><operator pos:start="125:33" pos:end="125:34">-&gt;</operator><name pos:start="125:35" pos:end="125:42">prev_pkt</name></name></expr></argument>, <argument pos:start="125:45" pos:end="125:53"><expr pos:start="125:45" pos:end="125:53"><name pos:start="125:45" pos:end="125:53"><name pos:start="125:45" pos:end="125:47">pkt</name><operator pos:start="125:48" pos:end="125:49">-&gt;</operator><name pos:start="125:50" pos:end="125:53">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:63"><expr pos:start="127:17" pos:end="127:62"><call pos:start="127:17" pos:end="127:62"><name pos:start="127:17" pos:end="127:22">memcpy</name><argument_list pos:start="127:23" pos:end="127:62">(<argument pos:start="127:24" pos:end="127:39"><expr pos:start="127:24" pos:end="127:39"><name pos:start="127:24" pos:end="127:39"><name pos:start="127:24" pos:end="127:24">c</name><operator pos:start="127:25" pos:end="127:26">-&gt;</operator><name pos:start="127:27" pos:end="127:34">prev_pkt</name><operator pos:start="127:35" pos:end="127:35">.</operator><name pos:start="127:36" pos:end="127:39">data</name></name></expr></argument>, <argument pos:start="127:42" pos:end="127:50"><expr pos:start="127:42" pos:end="127:50"><name pos:start="127:42" pos:end="127:50"><name pos:start="127:42" pos:end="127:44">pkt</name><operator pos:start="127:45" pos:end="127:46">-&gt;</operator><name pos:start="127:47" pos:end="127:50">data</name></name></expr></argument>, <argument pos:start="127:53" pos:end="127:61"><expr pos:start="127:53" pos:end="127:61"><name pos:start="127:53" pos:end="127:61"><name pos:start="127:53" pos:end="127:55">pkt</name><operator pos:start="127:56" pos:end="127:57">-&gt;</operator><name pos:start="127:58" pos:end="127:61">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:46"><expr pos:start="131:13" pos:end="131:45"><name pos:start="131:13" pos:end="131:31"><name pos:start="131:13" pos:end="131:13">c</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:31">prev_frame_count</name></name> <operator pos:start="131:33" pos:end="131:33">=</operator> <name pos:start="131:35" pos:end="131:45">frame_count</name></expr>;</expr_stmt>

            <break pos:start="133:13" pos:end="133:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <default pos:start="137:9" pos:end="137:16">default:</default>

            <comment type="block" pos:start="139:13" pos:end="141:79">/* Write things as is. Nice for self-contained frames from non-multicolor modes or if played

             * directly from ram and not from a streaming device (rrnet/mmc) */</comment>

            <if_stmt pos:start="143:13" pos:end="143:60"><if pos:start="143:13" pos:end="143:60">if<condition pos:start="143:15" pos:end="143:19">(<expr pos:start="143:16" pos:end="143:18"><name pos:start="143:16" pos:end="143:18">pkt</name></expr>)</condition><block type="pseudo" pos:start="143:21" pos:end="143:60"><block_content pos:start="143:21" pos:end="143:60"> <expr_stmt pos:start="143:21" pos:end="143:60"><expr pos:start="143:21" pos:end="143:59"><call pos:start="143:21" pos:end="143:59"><name pos:start="143:21" pos:end="143:30">put_buffer</name><argument_list pos:start="143:31" pos:end="143:59">(<argument pos:start="143:32" pos:end="143:36"><expr pos:start="143:32" pos:end="143:36"><name pos:start="143:32" pos:end="143:36"><name pos:start="143:32" pos:end="143:32">s</name><operator pos:start="143:33" pos:end="143:34">-&gt;</operator><name pos:start="143:35" pos:end="143:36">pb</name></name></expr></argument>, <argument pos:start="143:39" pos:end="143:47"><expr pos:start="143:39" pos:end="143:47"><name pos:start="143:39" pos:end="143:47"><name pos:start="143:39" pos:end="143:41">pkt</name><operator pos:start="143:42" pos:end="143:43">-&gt;</operator><name pos:start="143:44" pos:end="143:47">data</name></name></expr></argument>, <argument pos:start="143:50" pos:end="143:58"><expr pos:start="143:50" pos:end="143:58"><name pos:start="143:50" pos:end="143:58"><name pos:start="143:50" pos:end="143:52">pkt</name><operator pos:start="143:53" pos:end="143:54">-&gt;</operator><name pos:start="143:55" pos:end="143:58">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="151:5" pos:end="151:28"><expr pos:start="151:5" pos:end="151:27"><call pos:start="151:5" pos:end="151:27"><name pos:start="151:5" pos:end="151:20">put_flush_packet</name><argument_list pos:start="151:21" pos:end="151:27">(<argument pos:start="151:22" pos:end="151:26"><expr pos:start="151:22" pos:end="151:26"><name pos:start="151:22" pos:end="151:26"><name pos:start="151:22" pos:end="151:22">s</name><operator pos:start="151:23" pos:end="151:24">-&gt;</operator><name pos:start="151:25" pos:end="151:26">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="153:5" pos:end="153:13">return <expr pos:start="153:12" pos:end="153:12"><literal type="number" pos:start="153:12" pos:end="153:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
