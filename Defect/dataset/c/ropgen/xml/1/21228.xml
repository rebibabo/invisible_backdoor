<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21228.c" pos:tabs="8"><function pos:start="1:1" pos:end="185:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">decode_format80</name><parameter_list pos:start="1:28" pos:end="3:55">(<parameter pos:start="1:29" pos:end="1:52"><decl pos:start="1:29" pos:end="1:52"><type pos:start="1:29" pos:end="1:52"><specifier pos:start="1:29" pos:end="1:33">const</specifier> <name pos:start="1:35" pos:end="1:42">unsigned</name> <name pos:start="1:44" pos:end="1:47">char</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:52">src</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:66"><decl pos:start="1:55" pos:end="1:66"><type pos:start="1:55" pos:end="1:66"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:66">src_size</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:23"><decl pos:start="3:5" pos:end="3:23"><type pos:start="3:5" pos:end="3:23"><name pos:start="3:5" pos:end="3:12">unsigned</name> <name pos:start="3:14" pos:end="3:17">char</name> <modifier pos:start="3:19" pos:end="3:19">*</modifier></type><name pos:start="3:20" pos:end="3:23">dest</name></decl></parameter>, <parameter pos:start="3:26" pos:end="3:38"><decl pos:start="3:26" pos:end="3:38"><type pos:start="3:26" pos:end="3:38"><name pos:start="3:26" pos:end="3:28">int</name></type> <name pos:start="3:30" pos:end="3:38">dest_size</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name></type> <name pos:start="3:45" pos:end="3:54">check_size</name></decl></parameter>)</parameter_list> <block pos:start="3:57" pos:end="185:1">{<block_content pos:start="7:5" pos:end="183:39">



    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">src_index</name> <init pos:start="7:19" pos:end="7:21">= <expr pos:start="7:21" pos:end="7:21"><literal type="number" pos:start="7:21" pos:end="7:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">dest_index</name> <init pos:start="9:20" pos:end="9:22">= <expr pos:start="9:22" pos:end="9:22"><literal type="number" pos:start="9:22" pos:end="9:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:15">src_pos</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:17">char</name></type> <name pos:start="15:19" pos:end="15:23">color</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>;</decl_stmt>



    <while pos:start="21:5" pos:end="165:5">while <condition pos:start="21:11" pos:end="21:32">(<expr pos:start="21:12" pos:end="21:31"><name pos:start="21:12" pos:end="21:20">src_index</name> <operator pos:start="21:22" pos:end="21:22">&lt;</operator> <name pos:start="21:24" pos:end="21:31">src_size</name></expr>)</condition> <block pos:start="21:34" pos:end="165:5">{<block_content pos:start="25:9" pos:end="163:9">



        <expr_stmt pos:start="25:9" pos:end="25:61"><expr pos:start="25:9" pos:end="25:60"><call pos:start="25:9" pos:end="25:60"><name pos:start="25:9" pos:end="25:15">av_dlog</name><argument_list pos:start="25:16" pos:end="25:60">(<argument pos:start="25:17" pos:end="25:20"><expr pos:start="25:17" pos:end="25:20"><name pos:start="25:17" pos:end="25:20">NULL</name></expr></argument>, <argument pos:start="25:23" pos:end="25:43"><expr pos:start="25:23" pos:end="25:43"><literal type="string" pos:start="25:23" pos:end="25:43">"      opcode %02X: "</literal></expr></argument>, <argument pos:start="25:46" pos:end="25:59"><expr pos:start="25:46" pos:end="25:59"><name pos:start="25:46" pos:end="25:59"><name pos:start="25:46" pos:end="25:48">src</name><index pos:start="25:49" pos:end="25:59">[<expr pos:start="25:50" pos:end="25:58"><name pos:start="25:50" pos:end="25:58">src_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="29:9" pos:end="29:47">/* 0x80 means that frame is finished */</comment>

        <if_stmt pos:start="31:9" pos:end="43:9"><if pos:start="31:9" pos:end="43:9">if <condition pos:start="31:12" pos:end="31:35">(<expr pos:start="31:13" pos:end="31:34"><name pos:start="31:13" pos:end="31:26"><name pos:start="31:13" pos:end="31:15">src</name><index pos:start="31:16" pos:end="31:26">[<expr pos:start="31:17" pos:end="31:25"><name pos:start="31:17" pos:end="31:25">src_index</name></expr>]</index></name> <operator pos:start="31:28" pos:end="31:29">==</operator> <literal type="number" pos:start="31:31" pos:end="31:34">0x80</literal></expr>)</condition><block type="pseudo" pos:start="36:9" pos:end="43:9"><block_content pos:start="36:9" pos:end="43:9">




        <if_stmt pos:start="36:9" pos:end="43:9"><if pos:start="36:9" pos:end="43:9">if <condition pos:start="36:12" pos:end="36:36">(<expr pos:start="36:13" pos:end="36:35"><name pos:start="36:13" pos:end="36:22">dest_index</name> <operator pos:start="36:24" pos:end="36:25">&gt;=</operator> <name pos:start="36:27" pos:end="36:35">dest_size</name></expr>)</condition> <block pos:start="36:38" pos:end="43:9">{<block_content pos:start="38:13" pos:end="40:39">

            <expr_stmt pos:start="38:13" pos:end="40:39"><expr pos:start="38:13" pos:end="40:38"><call pos:start="38:13" pos:end="40:38"><name pos:start="38:13" pos:end="38:18">av_log</name><argument_list pos:start="38:19" pos:end="40:38">(<argument pos:start="38:20" pos:end="38:23"><expr pos:start="38:20" pos:end="38:23"><name pos:start="38:20" pos:end="38:23">NULL</name></expr></argument>, <argument pos:start="38:26" pos:end="38:37"><expr pos:start="38:26" pos:end="38:37"><name pos:start="38:26" pos:end="38:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="38:40" pos:end="38:120"><expr pos:start="38:40" pos:end="38:120"><literal type="string" pos:start="38:40" pos:end="38:120">"  VQA video: decode_format80 problem: dest_index (%d) exceeded dest_size (%d)\n"</literal></expr></argument>,

                <argument pos:start="40:17" pos:end="40:26"><expr pos:start="40:17" pos:end="40:26"><name pos:start="40:17" pos:end="40:26">dest_index</name></expr></argument>, <argument pos:start="40:29" pos:end="40:37"><expr pos:start="40:29" pos:end="40:37"><name pos:start="40:29" pos:end="40:37">dest_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="47:9" pos:end="163:9"><if pos:start="47:9" pos:end="76:9">if <condition pos:start="47:12" pos:end="47:35">(<expr pos:start="47:13" pos:end="47:34"><name pos:start="47:13" pos:end="47:26"><name pos:start="47:13" pos:end="47:15">src</name><index pos:start="47:16" pos:end="47:26">[<expr pos:start="47:17" pos:end="47:25"><name pos:start="47:17" pos:end="47:25">src_index</name></expr>]</index></name> <operator pos:start="47:28" pos:end="47:29">==</operator> <literal type="number" pos:start="47:31" pos:end="47:34">0xFF</literal></expr>)</condition> <block pos:start="47:37" pos:end="76:9">{<block_content pos:start="51:13" pos:end="72:32">



            <expr_stmt pos:start="51:13" pos:end="51:24"><expr pos:start="51:13" pos:end="51:23"><name pos:start="51:13" pos:end="51:21">src_index</name><operator pos:start="51:22" pos:end="51:23">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:45"><expr pos:start="53:13" pos:end="53:44"><name pos:start="53:13" pos:end="53:17">count</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <call pos:start="53:21" pos:end="53:44"><name pos:start="53:21" pos:end="53:27">AV_RL16</name><argument_list pos:start="53:28" pos:end="53:44">(<argument pos:start="53:29" pos:end="53:43"><expr pos:start="53:29" pos:end="53:43"><operator pos:start="53:29" pos:end="53:29">&amp;</operator><name pos:start="53:30" pos:end="53:43"><name pos:start="53:30" pos:end="53:32">src</name><index pos:start="53:33" pos:end="53:43">[<expr pos:start="53:34" pos:end="53:42"><name pos:start="53:34" pos:end="53:42">src_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:27"><expr pos:start="55:13" pos:end="55:26"><name pos:start="55:13" pos:end="55:21">src_index</name> <operator pos:start="55:23" pos:end="55:24">+=</operator> <literal type="number" pos:start="55:26" pos:end="55:26">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:47"><expr pos:start="57:13" pos:end="57:46"><name pos:start="57:13" pos:end="57:19">src_pos</name> <operator pos:start="57:21" pos:end="57:21">=</operator> <call pos:start="57:23" pos:end="57:46"><name pos:start="57:23" pos:end="57:29">AV_RL16</name><argument_list pos:start="57:30" pos:end="57:46">(<argument pos:start="57:31" pos:end="57:45"><expr pos:start="57:31" pos:end="57:45"><operator pos:start="57:31" pos:end="57:31">&amp;</operator><name pos:start="57:32" pos:end="57:45"><name pos:start="57:32" pos:end="57:34">src</name><index pos:start="57:35" pos:end="57:45">[<expr pos:start="57:36" pos:end="57:44"><name pos:start="57:36" pos:end="57:44">src_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:27"><expr pos:start="59:13" pos:end="59:26"><name pos:start="59:13" pos:end="59:21">src_index</name> <operator pos:start="59:23" pos:end="59:24">+=</operator> <literal type="number" pos:start="59:26" pos:end="59:26">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:86"><expr pos:start="61:13" pos:end="61:85"><call pos:start="61:13" pos:end="61:85"><name pos:start="61:13" pos:end="61:19">av_dlog</name><argument_list pos:start="61:20" pos:end="61:85">(<argument pos:start="61:21" pos:end="61:24"><expr pos:start="61:21" pos:end="61:24"><name pos:start="61:21" pos:end="61:24">NULL</name></expr></argument>, <argument pos:start="61:27" pos:end="61:68"><expr pos:start="61:27" pos:end="61:68"><literal type="string" pos:start="61:27" pos:end="61:68">"(1) copy %X bytes from absolute pos %X\n"</literal></expr></argument>, <argument pos:start="61:71" pos:end="61:75"><expr pos:start="61:71" pos:end="61:75"><name pos:start="61:71" pos:end="61:75">count</name></expr></argument>, <argument pos:start="61:78" pos:end="61:84"><expr pos:start="61:78" pos:end="61:84"><name pos:start="61:78" pos:end="61:84">src_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:26"><expr pos:start="63:13" pos:end="63:25"><call pos:start="63:13" pos:end="63:25"><name pos:start="63:13" pos:end="63:23">CHECK_COUNT</name><argument_list pos:start="63:24" pos:end="63:25">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="65:13" pos:end="70:57"><if pos:start="65:13" pos:end="70:57">if <condition pos:start="65:16" pos:end="65:44">(<expr pos:start="65:17" pos:end="65:43"><name pos:start="65:17" pos:end="65:23">src_pos</name> <operator pos:start="65:25" pos:end="65:25">+</operator> <name pos:start="65:27" pos:end="65:31">count</name> <operator pos:start="65:33" pos:end="65:33">&gt;</operator> <name pos:start="65:35" pos:end="65:43">dest_size</name></expr>)</condition><block type="pseudo" pos:start="68:13" pos:end="70:57"><block_content pos:start="68:13" pos:end="70:57">


            <for pos:start="68:13" pos:end="70:57">for <control pos:start="68:17" pos:end="68:39">(<init pos:start="68:18" pos:end="68:23"><expr pos:start="68:18" pos:end="68:22"><name pos:start="68:18" pos:end="68:18">i</name> <operator pos:start="68:20" pos:end="68:20">=</operator> <literal type="number" pos:start="68:22" pos:end="68:22">0</literal></expr>;</init> <condition pos:start="68:25" pos:end="68:34"><expr pos:start="68:25" pos:end="68:33"><name pos:start="68:25" pos:end="68:25">i</name> <operator pos:start="68:27" pos:end="68:27">&lt;</operator> <name pos:start="68:29" pos:end="68:33">count</name></expr>;</condition> <incr pos:start="68:36" pos:end="68:38"><expr pos:start="68:36" pos:end="68:38"><name pos:start="68:36" pos:end="68:36">i</name><operator pos:start="68:37" pos:end="68:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="70:17" pos:end="70:57"><block_content pos:start="70:17" pos:end="70:57">

                <expr_stmt pos:start="70:17" pos:end="70:57"><expr pos:start="70:17" pos:end="70:56"><name pos:start="70:17" pos:end="70:36"><name pos:start="70:17" pos:end="70:20">dest</name><index pos:start="70:21" pos:end="70:36">[<expr pos:start="70:22" pos:end="70:35"><name pos:start="70:22" pos:end="70:31">dest_index</name> <operator pos:start="70:33" pos:end="70:33">+</operator> <name pos:start="70:35" pos:end="70:35">i</name></expr>]</index></name> <operator pos:start="70:38" pos:end="70:38">=</operator> <name pos:start="70:40" pos:end="70:56"><name pos:start="70:40" pos:end="70:43">dest</name><index pos:start="70:44" pos:end="70:56">[<expr pos:start="70:45" pos:end="70:55"><name pos:start="70:45" pos:end="70:51">src_pos</name> <operator pos:start="70:53" pos:end="70:53">+</operator> <name pos:start="70:55" pos:end="70:55">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

            <expr_stmt pos:start="72:13" pos:end="72:32"><expr pos:start="72:13" pos:end="72:31"><name pos:start="72:13" pos:end="72:22">dest_index</name> <operator pos:start="72:24" pos:end="72:25">+=</operator> <name pos:start="72:27" pos:end="72:31">count</name></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="76:11" pos:end="98:9">else if <condition pos:start="76:19" pos:end="76:42">(<expr pos:start="76:20" pos:end="76:41"><name pos:start="76:20" pos:end="76:33"><name pos:start="76:20" pos:end="76:22">src</name><index pos:start="76:23" pos:end="76:33">[<expr pos:start="76:24" pos:end="76:32"><name pos:start="76:24" pos:end="76:32">src_index</name></expr>]</index></name> <operator pos:start="76:35" pos:end="76:36">==</operator> <literal type="number" pos:start="76:38" pos:end="76:41">0xFE</literal></expr>)</condition> <block pos:start="76:44" pos:end="98:9">{<block_content pos:start="80:13" pos:end="94:32">



            <expr_stmt pos:start="80:13" pos:end="80:24"><expr pos:start="80:13" pos:end="80:23"><name pos:start="80:13" pos:end="80:21">src_index</name><operator pos:start="80:22" pos:end="80:23">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="82:13" pos:end="82:45"><expr pos:start="82:13" pos:end="82:44"><name pos:start="82:13" pos:end="82:17">count</name> <operator pos:start="82:19" pos:end="82:19">=</operator> <call pos:start="82:21" pos:end="82:44"><name pos:start="82:21" pos:end="82:27">AV_RL16</name><argument_list pos:start="82:28" pos:end="82:44">(<argument pos:start="82:29" pos:end="82:43"><expr pos:start="82:29" pos:end="82:43"><operator pos:start="82:29" pos:end="82:29">&amp;</operator><name pos:start="82:30" pos:end="82:43"><name pos:start="82:30" pos:end="82:32">src</name><index pos:start="82:33" pos:end="82:43">[<expr pos:start="82:34" pos:end="82:42"><name pos:start="82:34" pos:end="82:42">src_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="84:13" pos:end="84:27"><expr pos:start="84:13" pos:end="84:26"><name pos:start="84:13" pos:end="84:21">src_index</name> <operator pos:start="84:23" pos:end="84:24">+=</operator> <literal type="number" pos:start="84:26" pos:end="84:26">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="86:13" pos:end="86:37"><expr pos:start="86:13" pos:end="86:36"><name pos:start="86:13" pos:end="86:17">color</name> <operator pos:start="86:19" pos:end="86:19">=</operator> <name pos:start="86:21" pos:end="86:36"><name pos:start="86:21" pos:end="86:23">src</name><index pos:start="86:24" pos:end="86:36">[<expr pos:start="86:25" pos:end="86:35"><name pos:start="86:25" pos:end="86:33">src_index</name><operator pos:start="86:34" pos:end="86:35">++</operator></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="88:13" pos:end="88:70"><expr pos:start="88:13" pos:end="88:69"><call pos:start="88:13" pos:end="88:69"><name pos:start="88:13" pos:end="88:19">av_dlog</name><argument_list pos:start="88:20" pos:end="88:69">(<argument pos:start="88:21" pos:end="88:24"><expr pos:start="88:21" pos:end="88:24"><name pos:start="88:21" pos:end="88:24">NULL</name></expr></argument>, <argument pos:start="88:27" pos:end="88:54"><expr pos:start="88:27" pos:end="88:54"><literal type="string" pos:start="88:27" pos:end="88:54">"(2) set %X bytes to %02X\n"</literal></expr></argument>, <argument pos:start="88:57" pos:end="88:61"><expr pos:start="88:57" pos:end="88:61"><name pos:start="88:57" pos:end="88:61">count</name></expr></argument>, <argument pos:start="88:64" pos:end="88:68"><expr pos:start="88:64" pos:end="88:68"><name pos:start="88:64" pos:end="88:68">color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="90:13" pos:end="90:26"><expr pos:start="90:13" pos:end="90:25"><call pos:start="90:13" pos:end="90:25"><name pos:start="90:13" pos:end="90:23">CHECK_COUNT</name><argument_list pos:start="90:24" pos:end="90:25">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="92:13" pos:end="92:52"><expr pos:start="92:13" pos:end="92:51"><call pos:start="92:13" pos:end="92:51"><name pos:start="92:13" pos:end="92:18">memset</name><argument_list pos:start="92:19" pos:end="92:51">(<argument pos:start="92:20" pos:end="92:36"><expr pos:start="92:20" pos:end="92:36"><operator pos:start="92:20" pos:end="92:20">&amp;</operator><name pos:start="92:21" pos:end="92:36"><name pos:start="92:21" pos:end="92:24">dest</name><index pos:start="92:25" pos:end="92:36">[<expr pos:start="92:26" pos:end="92:35"><name pos:start="92:26" pos:end="92:35">dest_index</name></expr>]</index></name></expr></argument>, <argument pos:start="92:39" pos:end="92:43"><expr pos:start="92:39" pos:end="92:43"><name pos:start="92:39" pos:end="92:43">color</name></expr></argument>, <argument pos:start="92:46" pos:end="92:50"><expr pos:start="92:46" pos:end="92:50"><name pos:start="92:46" pos:end="92:50">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="94:13" pos:end="94:32"><expr pos:start="94:13" pos:end="94:31"><name pos:start="94:13" pos:end="94:22">dest_index</name> <operator pos:start="94:24" pos:end="94:25">+=</operator> <name pos:start="94:27" pos:end="94:31">count</name></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="98:11" pos:end="123:9">else if <condition pos:start="98:19" pos:end="98:51">(<expr pos:start="98:20" pos:end="98:50"><operator pos:start="98:20" pos:end="98:20">(</operator><name pos:start="98:21" pos:end="98:34"><name pos:start="98:21" pos:end="98:23">src</name><index pos:start="98:24" pos:end="98:34">[<expr pos:start="98:25" pos:end="98:33"><name pos:start="98:25" pos:end="98:33">src_index</name></expr>]</index></name> <operator pos:start="98:36" pos:end="98:36">&amp;</operator> <literal type="number" pos:start="98:38" pos:end="98:41">0xC0</literal><operator pos:start="98:42" pos:end="98:42">)</operator> <operator pos:start="98:44" pos:end="98:45">==</operator> <literal type="number" pos:start="98:47" pos:end="98:50">0xC0</literal></expr>)</condition> <block pos:start="98:53" pos:end="123:9">{<block_content pos:start="102:13" pos:end="119:32">



            <expr_stmt pos:start="102:13" pos:end="102:50"><expr pos:start="102:13" pos:end="102:49"><name pos:start="102:13" pos:end="102:17">count</name> <operator pos:start="102:19" pos:end="102:19">=</operator> <operator pos:start="102:21" pos:end="102:21">(</operator><name pos:start="102:22" pos:end="102:37"><name pos:start="102:22" pos:end="102:24">src</name><index pos:start="102:25" pos:end="102:37">[<expr pos:start="102:26" pos:end="102:36"><name pos:start="102:26" pos:end="102:34">src_index</name><operator pos:start="102:35" pos:end="102:36">++</operator></expr>]</index></name> <operator pos:start="102:39" pos:end="102:39">&amp;</operator> <literal type="number" pos:start="102:41" pos:end="102:44">0x3F</literal><operator pos:start="102:45" pos:end="102:45">)</operator> <operator pos:start="102:47" pos:end="102:47">+</operator> <literal type="number" pos:start="102:49" pos:end="102:49">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="104:13" pos:end="104:47"><expr pos:start="104:13" pos:end="104:46"><name pos:start="104:13" pos:end="104:19">src_pos</name> <operator pos:start="104:21" pos:end="104:21">=</operator> <call pos:start="104:23" pos:end="104:46"><name pos:start="104:23" pos:end="104:29">AV_RL16</name><argument_list pos:start="104:30" pos:end="104:46">(<argument pos:start="104:31" pos:end="104:45"><expr pos:start="104:31" pos:end="104:45"><operator pos:start="104:31" pos:end="104:31">&amp;</operator><name pos:start="104:32" pos:end="104:45"><name pos:start="104:32" pos:end="104:34">src</name><index pos:start="104:35" pos:end="104:45">[<expr pos:start="104:36" pos:end="104:44"><name pos:start="104:36" pos:end="104:44">src_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="106:13" pos:end="106:27"><expr pos:start="106:13" pos:end="106:26"><name pos:start="106:13" pos:end="106:21">src_index</name> <operator pos:start="106:23" pos:end="106:24">+=</operator> <literal type="number" pos:start="106:26" pos:end="106:26">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="108:13" pos:end="108:86"><expr pos:start="108:13" pos:end="108:85"><call pos:start="108:13" pos:end="108:85"><name pos:start="108:13" pos:end="108:19">av_dlog</name><argument_list pos:start="108:20" pos:end="108:85">(<argument pos:start="108:21" pos:end="108:24"><expr pos:start="108:21" pos:end="108:24"><name pos:start="108:21" pos:end="108:24">NULL</name></expr></argument>, <argument pos:start="108:27" pos:end="108:68"><expr pos:start="108:27" pos:end="108:68"><literal type="string" pos:start="108:27" pos:end="108:68">"(3) copy %X bytes from absolute pos %X\n"</literal></expr></argument>, <argument pos:start="108:71" pos:end="108:75"><expr pos:start="108:71" pos:end="108:75"><name pos:start="108:71" pos:end="108:75">count</name></expr></argument>, <argument pos:start="108:78" pos:end="108:84"><expr pos:start="108:78" pos:end="108:84"><name pos:start="108:78" pos:end="108:84">src_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="110:13" pos:end="110:26"><expr pos:start="110:13" pos:end="110:25"><call pos:start="110:13" pos:end="110:25"><name pos:start="110:13" pos:end="110:23">CHECK_COUNT</name><argument_list pos:start="110:24" pos:end="110:25">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="112:13" pos:end="117:57"><if pos:start="112:13" pos:end="117:57">if <condition pos:start="112:16" pos:end="112:44">(<expr pos:start="112:17" pos:end="112:43"><name pos:start="112:17" pos:end="112:23">src_pos</name> <operator pos:start="112:25" pos:end="112:25">+</operator> <name pos:start="112:27" pos:end="112:31">count</name> <operator pos:start="112:33" pos:end="112:33">&gt;</operator> <name pos:start="112:35" pos:end="112:43">dest_size</name></expr>)</condition><block type="pseudo" pos:start="115:13" pos:end="117:57"><block_content pos:start="115:13" pos:end="117:57">


            <for pos:start="115:13" pos:end="117:57">for <control pos:start="115:17" pos:end="115:39">(<init pos:start="115:18" pos:end="115:23"><expr pos:start="115:18" pos:end="115:22"><name pos:start="115:18" pos:end="115:18">i</name> <operator pos:start="115:20" pos:end="115:20">=</operator> <literal type="number" pos:start="115:22" pos:end="115:22">0</literal></expr>;</init> <condition pos:start="115:25" pos:end="115:34"><expr pos:start="115:25" pos:end="115:33"><name pos:start="115:25" pos:end="115:25">i</name> <operator pos:start="115:27" pos:end="115:27">&lt;</operator> <name pos:start="115:29" pos:end="115:33">count</name></expr>;</condition> <incr pos:start="115:36" pos:end="115:38"><expr pos:start="115:36" pos:end="115:38"><name pos:start="115:36" pos:end="115:36">i</name><operator pos:start="115:37" pos:end="115:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="117:17" pos:end="117:57"><block_content pos:start="117:17" pos:end="117:57">

                <expr_stmt pos:start="117:17" pos:end="117:57"><expr pos:start="117:17" pos:end="117:56"><name pos:start="117:17" pos:end="117:36"><name pos:start="117:17" pos:end="117:20">dest</name><index pos:start="117:21" pos:end="117:36">[<expr pos:start="117:22" pos:end="117:35"><name pos:start="117:22" pos:end="117:31">dest_index</name> <operator pos:start="117:33" pos:end="117:33">+</operator> <name pos:start="117:35" pos:end="117:35">i</name></expr>]</index></name> <operator pos:start="117:38" pos:end="117:38">=</operator> <name pos:start="117:40" pos:end="117:56"><name pos:start="117:40" pos:end="117:43">dest</name><index pos:start="117:44" pos:end="117:56">[<expr pos:start="117:45" pos:end="117:55"><name pos:start="117:45" pos:end="117:51">src_pos</name> <operator pos:start="117:53" pos:end="117:53">+</operator> <name pos:start="117:55" pos:end="117:55">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:32"><expr pos:start="119:13" pos:end="119:31"><name pos:start="119:13" pos:end="119:22">dest_index</name> <operator pos:start="119:24" pos:end="119:25">+=</operator> <name pos:start="119:27" pos:end="119:31">count</name></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="123:11" pos:end="141:9">else if <condition pos:start="123:19" pos:end="123:41">(<expr pos:start="123:20" pos:end="123:40"><name pos:start="123:20" pos:end="123:33"><name pos:start="123:20" pos:end="123:22">src</name><index pos:start="123:23" pos:end="123:33">[<expr pos:start="123:24" pos:end="123:32"><name pos:start="123:24" pos:end="123:32">src_index</name></expr>]</index></name> <operator pos:start="123:35" pos:end="123:35">&gt;</operator> <literal type="number" pos:start="123:37" pos:end="123:40">0x80</literal></expr>)</condition> <block pos:start="123:43" pos:end="141:9">{<block_content pos:start="127:13" pos:end="137:32">



            <expr_stmt pos:start="127:13" pos:end="127:44"><expr pos:start="127:13" pos:end="127:43"><name pos:start="127:13" pos:end="127:17">count</name> <operator pos:start="127:19" pos:end="127:19">=</operator> <name pos:start="127:21" pos:end="127:36"><name pos:start="127:21" pos:end="127:23">src</name><index pos:start="127:24" pos:end="127:36">[<expr pos:start="127:25" pos:end="127:35"><name pos:start="127:25" pos:end="127:33">src_index</name><operator pos:start="127:34" pos:end="127:35">++</operator></expr>]</index></name> <operator pos:start="127:38" pos:end="127:38">&amp;</operator> <literal type="number" pos:start="127:40" pos:end="127:43">0x3F</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:76"><expr pos:start="129:13" pos:end="129:75"><call pos:start="129:13" pos:end="129:75"><name pos:start="129:13" pos:end="129:19">av_dlog</name><argument_list pos:start="129:20" pos:end="129:75">(<argument pos:start="129:21" pos:end="129:24"><expr pos:start="129:21" pos:end="129:24"><name pos:start="129:21" pos:end="129:24">NULL</name></expr></argument>, <argument pos:start="129:27" pos:end="129:67"><expr pos:start="129:27" pos:end="129:67"><literal type="string" pos:start="129:27" pos:end="129:67">"(4) copy %X bytes from source to dest\n"</literal></expr></argument>, <argument pos:start="129:70" pos:end="129:74"><expr pos:start="129:70" pos:end="129:74"><name pos:start="129:70" pos:end="129:74">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:26"><expr pos:start="131:13" pos:end="131:25"><call pos:start="131:13" pos:end="131:25"><name pos:start="131:13" pos:end="131:23">CHECK_COUNT</name><argument_list pos:start="131:24" pos:end="131:25">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:62"><expr pos:start="133:13" pos:end="133:61"><call pos:start="133:13" pos:end="133:61"><name pos:start="133:13" pos:end="133:18">memcpy</name><argument_list pos:start="133:19" pos:end="133:61">(<argument pos:start="133:20" pos:end="133:36"><expr pos:start="133:20" pos:end="133:36"><operator pos:start="133:20" pos:end="133:20">&amp;</operator><name pos:start="133:21" pos:end="133:36"><name pos:start="133:21" pos:end="133:24">dest</name><index pos:start="133:25" pos:end="133:36">[<expr pos:start="133:26" pos:end="133:35"><name pos:start="133:26" pos:end="133:35">dest_index</name></expr>]</index></name></expr></argument>, <argument pos:start="133:39" pos:end="133:53"><expr pos:start="133:39" pos:end="133:53"><operator pos:start="133:39" pos:end="133:39">&amp;</operator><name pos:start="133:40" pos:end="133:53"><name pos:start="133:40" pos:end="133:42">src</name><index pos:start="133:43" pos:end="133:53">[<expr pos:start="133:44" pos:end="133:52"><name pos:start="133:44" pos:end="133:52">src_index</name></expr>]</index></name></expr></argument>, <argument pos:start="133:56" pos:end="133:60"><expr pos:start="133:56" pos:end="133:60"><name pos:start="133:56" pos:end="133:60">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:31"><expr pos:start="135:13" pos:end="135:30"><name pos:start="135:13" pos:end="135:21">src_index</name> <operator pos:start="135:23" pos:end="135:24">+=</operator> <name pos:start="135:26" pos:end="135:30">count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:32"><expr pos:start="137:13" pos:end="137:31"><name pos:start="137:13" pos:end="137:22">dest_index</name> <operator pos:start="137:24" pos:end="137:25">+=</operator> <name pos:start="137:27" pos:end="137:31">count</name></expr>;</expr_stmt>



        </block_content>}</block></if> <else pos:start="141:11" pos:end="163:9">else <block pos:start="141:16" pos:end="163:9">{<block_content pos:start="145:13" pos:end="161:32">



            <expr_stmt pos:start="145:13" pos:end="145:55"><expr pos:start="145:13" pos:end="145:54"><name pos:start="145:13" pos:end="145:17">count</name> <operator pos:start="145:19" pos:end="145:19">=</operator> <operator pos:start="145:21" pos:end="145:21">(</operator><operator pos:start="145:22" pos:end="145:22">(</operator><name pos:start="145:23" pos:end="145:36"><name pos:start="145:23" pos:end="145:25">src</name><index pos:start="145:26" pos:end="145:36">[<expr pos:start="145:27" pos:end="145:35"><name pos:start="145:27" pos:end="145:35">src_index</name></expr>]</index></name> <operator pos:start="145:38" pos:end="145:38">&amp;</operator> <literal type="number" pos:start="145:40" pos:end="145:43">0x70</literal><operator pos:start="145:44" pos:end="145:44">)</operator> <operator pos:start="145:46" pos:end="145:47">&gt;&gt;</operator> <literal type="number" pos:start="145:49" pos:end="145:49">4</literal><operator pos:start="145:50" pos:end="145:50">)</operator> <operator pos:start="145:52" pos:end="145:52">+</operator> <literal type="number" pos:start="145:54" pos:end="145:54">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:56"><expr pos:start="147:13" pos:end="147:55"><name pos:start="147:13" pos:end="147:19">src_pos</name> <operator pos:start="147:21" pos:end="147:21">=</operator> <call pos:start="147:23" pos:end="147:46"><name pos:start="147:23" pos:end="147:29">AV_RB16</name><argument_list pos:start="147:30" pos:end="147:46">(<argument pos:start="147:31" pos:end="147:45"><expr pos:start="147:31" pos:end="147:45"><operator pos:start="147:31" pos:end="147:31">&amp;</operator><name pos:start="147:32" pos:end="147:45"><name pos:start="147:32" pos:end="147:34">src</name><index pos:start="147:35" pos:end="147:45">[<expr pos:start="147:36" pos:end="147:44"><name pos:start="147:36" pos:end="147:44">src_index</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="147:48" pos:end="147:48">&amp;</operator> <literal type="number" pos:start="147:50" pos:end="147:55">0x0FFF</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:27"><expr pos:start="149:13" pos:end="149:26"><name pos:start="149:13" pos:end="149:21">src_index</name> <operator pos:start="149:23" pos:end="149:24">+=</operator> <literal type="number" pos:start="149:26" pos:end="149:26">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:80"><expr pos:start="151:13" pos:end="151:79"><call pos:start="151:13" pos:end="151:79"><name pos:start="151:13" pos:end="151:19">av_dlog</name><argument_list pos:start="151:20" pos:end="151:79">(<argument pos:start="151:21" pos:end="151:24"><expr pos:start="151:21" pos:end="151:24"><name pos:start="151:21" pos:end="151:24">NULL</name></expr></argument>, <argument pos:start="151:27" pos:end="151:62"><expr pos:start="151:27" pos:end="151:62"><literal type="string" pos:start="151:27" pos:end="151:62">"(5) copy %X bytes from relpos %X\n"</literal></expr></argument>, <argument pos:start="151:65" pos:end="151:69"><expr pos:start="151:65" pos:end="151:69"><name pos:start="151:65" pos:end="151:69">count</name></expr></argument>, <argument pos:start="151:72" pos:end="151:78"><expr pos:start="151:72" pos:end="151:78"><name pos:start="151:72" pos:end="151:78">src_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:26"><expr pos:start="153:13" pos:end="153:25"><call pos:start="153:13" pos:end="153:25"><name pos:start="153:13" pos:end="153:23">CHECK_COUNT</name><argument_list pos:start="153:24" pos:end="153:25">()</argument_list></call></expr>;</expr_stmt>



            <for pos:start="157:13" pos:end="159:70">for <control pos:start="157:17" pos:end="157:39">(<init pos:start="157:18" pos:end="157:23"><expr pos:start="157:18" pos:end="157:22"><name pos:start="157:18" pos:end="157:18">i</name> <operator pos:start="157:20" pos:end="157:20">=</operator> <literal type="number" pos:start="157:22" pos:end="157:22">0</literal></expr>;</init> <condition pos:start="157:25" pos:end="157:34"><expr pos:start="157:25" pos:end="157:33"><name pos:start="157:25" pos:end="157:25">i</name> <operator pos:start="157:27" pos:end="157:27">&lt;</operator> <name pos:start="157:29" pos:end="157:33">count</name></expr>;</condition> <incr pos:start="157:36" pos:end="157:38"><expr pos:start="157:36" pos:end="157:38"><name pos:start="157:36" pos:end="157:36">i</name><operator pos:start="157:37" pos:end="157:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="159:17" pos:end="159:70"><block_content pos:start="159:17" pos:end="159:70">

                <expr_stmt pos:start="159:17" pos:end="159:70"><expr pos:start="159:17" pos:end="159:69"><name pos:start="159:17" pos:end="159:36"><name pos:start="159:17" pos:end="159:20">dest</name><index pos:start="159:21" pos:end="159:36">[<expr pos:start="159:22" pos:end="159:35"><name pos:start="159:22" pos:end="159:31">dest_index</name> <operator pos:start="159:33" pos:end="159:33">+</operator> <name pos:start="159:35" pos:end="159:35">i</name></expr>]</index></name> <operator pos:start="159:38" pos:end="159:38">=</operator> <name pos:start="159:40" pos:end="159:69"><name pos:start="159:40" pos:end="159:43">dest</name><index pos:start="159:44" pos:end="159:69">[<expr pos:start="159:45" pos:end="159:68"><name pos:start="159:45" pos:end="159:54">dest_index</name> <operator pos:start="159:56" pos:end="159:56">-</operator> <name pos:start="159:58" pos:end="159:64">src_pos</name> <operator pos:start="159:66" pos:end="159:66">+</operator> <name pos:start="159:68" pos:end="159:68">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="161:13" pos:end="161:32"><expr pos:start="161:13" pos:end="161:31"><name pos:start="161:13" pos:end="161:22">dest_index</name> <operator pos:start="161:24" pos:end="161:25">+=</operator> <name pos:start="161:27" pos:end="161:31">count</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="169:5" pos:end="175:44">/* validate that the entire destination buffer was filled; this is

     * important for decoding frame maps since each vector needs to have a

     * codebook entry; it is not important for compressed codebooks because

     * not every entry needs to be filled */</comment>

    <if_stmt pos:start="177:5" pos:end="183:39"><if pos:start="177:5" pos:end="183:39">if <condition pos:start="177:8" pos:end="177:19">(<expr pos:start="177:9" pos:end="177:18"><name pos:start="177:9" pos:end="177:18">check_size</name></expr>)</condition><block type="pseudo" pos:start="179:9" pos:end="183:39"><block_content pos:start="179:9" pos:end="183:39">

        <if_stmt pos:start="179:9" pos:end="183:39"><if pos:start="179:9" pos:end="183:39">if <condition pos:start="179:12" pos:end="179:35">(<expr pos:start="179:13" pos:end="179:34"><name pos:start="179:13" pos:end="179:22">dest_index</name> <operator pos:start="179:24" pos:end="179:24">&lt;</operator> <name pos:start="179:26" pos:end="179:34">dest_size</name></expr>)</condition><block type="pseudo" pos:start="181:13" pos:end="183:39"><block_content pos:start="181:13" pos:end="183:39">

            <expr_stmt pos:start="181:13" pos:end="183:39"><expr pos:start="181:13" pos:end="183:38"><call pos:start="181:13" pos:end="183:38"><name pos:start="181:13" pos:end="181:18">av_log</name><argument_list pos:start="181:19" pos:end="183:38">(<argument pos:start="181:20" pos:end="181:23"><expr pos:start="181:20" pos:end="181:23"><name pos:start="181:20" pos:end="181:23">NULL</name></expr></argument>, <argument pos:start="181:26" pos:end="181:37"><expr pos:start="181:26" pos:end="181:37"><name pos:start="181:26" pos:end="181:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="181:40" pos:end="181:134"><expr pos:start="181:40" pos:end="181:134"><literal type="string" pos:start="181:40" pos:end="181:134">"  VQA video: decode_format80 problem: decode finished with dest_index (%d) &lt; dest_size (%d)\n"</literal></expr></argument>,

                <argument pos:start="183:17" pos:end="183:26"><expr pos:start="183:17" pos:end="183:26"><name pos:start="183:17" pos:end="183:26">dest_index</name></expr></argument>, <argument pos:start="183:29" pos:end="183:37"><expr pos:start="183:29" pos:end="183:37"><name pos:start="183:29" pos:end="183:37">dest_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function></unit>
