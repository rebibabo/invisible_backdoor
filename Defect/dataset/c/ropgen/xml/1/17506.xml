<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17506.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:17">open_f</name><parameter_list pos:start="1:18" pos:end="1:59">(<parameter pos:start="1:19" pos:end="1:35"><decl pos:start="1:19" pos:end="1:35"><type pos:start="1:19" pos:end="1:35"><name pos:start="1:19" pos:end="1:30">BlockBackend</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">blk</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:45"><decl pos:start="1:38" pos:end="1:45"><type pos:start="1:38" pos:end="1:45"><name pos:start="1:38" pos:end="1:40">int</name></type> <name pos:start="1:42" pos:end="1:45">argc</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:58"><decl pos:start="1:48" pos:end="1:58"><type pos:start="1:48" pos:end="1:58"><name pos:start="1:48" pos:end="1:51">char</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier><modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="167:1">{<block_content pos:start="5:5" pos:end="165:5">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">flags</name> <init pos:start="5:15" pos:end="5:28">= <expr pos:start="5:17" pos:end="5:28"><name pos:start="5:17" pos:end="5:28">BDRV_O_UNMAP</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">readonly</name> <init pos:start="7:18" pos:end="7:20">= <expr pos:start="7:20" pos:end="7:20"><literal type="number" pos:start="7:20" pos:end="7:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:21">writethrough</name> <init pos:start="9:23" pos:end="9:28">= <expr pos:start="9:25" pos:end="9:28"><name pos:start="9:25" pos:end="9:28">true</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">QemuOpts</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:19">qopts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">QDict</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:15">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:20">force_share</name> <init pos:start="17:22" pos:end="17:28">= <expr pos:start="17:24" pos:end="17:28"><name pos:start="17:24" pos:end="17:28">false</name></expr></init></decl>;</decl_stmt>



    <while pos:start="21:5" pos:end="115:5">while <condition pos:start="21:11" pos:end="21:57">(<expr pos:start="21:12" pos:end="21:56"><operator pos:start="21:12" pos:end="21:12">(</operator><name pos:start="21:13" pos:end="21:13">c</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <call pos:start="21:17" pos:end="21:49"><name pos:start="21:17" pos:end="21:22">getopt</name><argument_list pos:start="21:23" pos:end="21:49">(<argument pos:start="21:24" pos:end="21:27"><expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">argc</name></expr></argument>, <argument pos:start="21:30" pos:end="21:33"><expr pos:start="21:30" pos:end="21:33"><name pos:start="21:30" pos:end="21:33">argv</name></expr></argument>, <argument pos:start="21:36" pos:end="21:48"><expr pos:start="21:36" pos:end="21:48"><literal type="string" pos:start="21:36" pos:end="21:48">"snro:kt:d:U"</literal></expr></argument>)</argument_list></call><operator pos:start="21:50" pos:end="21:50">)</operator> <operator pos:start="21:52" pos:end="21:53">!=</operator> <operator pos:start="21:55" pos:end="21:55">-</operator><literal type="number" pos:start="21:56" pos:end="21:56">1</literal></expr>)</condition> <block pos:start="21:59" pos:end="115:5">{<block_content pos:start="23:9" pos:end="113:9">

        <switch pos:start="23:9" pos:end="113:9">switch <condition pos:start="23:16" pos:end="23:18">(<expr pos:start="23:17" pos:end="23:17"><name pos:start="23:17" pos:end="23:17">c</name></expr>)</condition> <block pos:start="23:20" pos:end="113:9">{<block_content pos:start="25:9" pos:end="111:51">

        <case pos:start="25:9" pos:end="25:17">case <expr pos:start="25:14" pos:end="25:16"><literal type="char" pos:start="25:14" pos:end="25:16">'s'</literal></expr>:</case>

            <expr_stmt pos:start="27:13" pos:end="27:37"><expr pos:start="27:13" pos:end="27:36"><name pos:start="27:13" pos:end="27:17">flags</name> <operator pos:start="27:19" pos:end="27:20">|=</operator> <name pos:start="27:22" pos:end="27:36">BDRV_O_SNAPSHOT</name></expr>;</expr_stmt>

            <break pos:start="29:13" pos:end="29:18">break;</break>

        <case pos:start="31:9" pos:end="31:17">case <expr pos:start="31:14" pos:end="31:16"><literal type="char" pos:start="31:14" pos:end="31:16">'n'</literal></expr>:</case>

            <expr_stmt pos:start="33:13" pos:end="33:36"><expr pos:start="33:13" pos:end="33:35"><name pos:start="33:13" pos:end="33:17">flags</name> <operator pos:start="33:19" pos:end="33:20">|=</operator> <name pos:start="33:22" pos:end="33:35">BDRV_O_NOCACHE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:33"><expr pos:start="35:13" pos:end="35:32"><name pos:start="35:13" pos:end="35:24">writethrough</name> <operator pos:start="35:26" pos:end="35:26">=</operator> <name pos:start="35:28" pos:end="35:32">false</name></expr>;</expr_stmt>

            <break pos:start="37:13" pos:end="37:18">break;</break>

        <case pos:start="39:9" pos:end="39:17">case <expr pos:start="39:14" pos:end="39:16"><literal type="char" pos:start="39:14" pos:end="39:16">'r'</literal></expr>:</case>

            <expr_stmt pos:start="41:13" pos:end="41:25"><expr pos:start="41:13" pos:end="41:24"><name pos:start="41:13" pos:end="41:20">readonly</name> <operator pos:start="41:22" pos:end="41:22">=</operator> <literal type="number" pos:start="41:24" pos:end="41:24">1</literal></expr>;</expr_stmt>

            <break pos:start="43:13" pos:end="43:18">break;</break>

        <case pos:start="45:9" pos:end="45:17">case <expr pos:start="45:14" pos:end="45:16"><literal type="char" pos:start="45:14" pos:end="45:16">'k'</literal></expr>:</case>

            <expr_stmt pos:start="47:13" pos:end="47:39"><expr pos:start="47:13" pos:end="47:38"><name pos:start="47:13" pos:end="47:17">flags</name> <operator pos:start="47:19" pos:end="47:20">|=</operator> <name pos:start="47:22" pos:end="47:38">BDRV_O_NATIVE_AIO</name></expr>;</expr_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>

        <case pos:start="51:9" pos:end="51:17">case <expr pos:start="51:14" pos:end="51:16"><literal type="char" pos:start="51:14" pos:end="51:16">'t'</literal></expr>:</case>

            <if_stmt pos:start="53:13" pos:end="61:13"><if pos:start="53:13" pos:end="61:13">if <condition pos:start="53:16" pos:end="53:73">(<expr pos:start="53:17" pos:end="53:72"><call pos:start="53:17" pos:end="53:68"><name pos:start="53:17" pos:end="53:37">bdrv_parse_cache_mode</name><argument_list pos:start="53:38" pos:end="53:68">(<argument pos:start="53:39" pos:end="53:44"><expr pos:start="53:39" pos:end="53:44"><name pos:start="53:39" pos:end="53:44">optarg</name></expr></argument>, <argument pos:start="53:47" pos:end="53:52"><expr pos:start="53:47" pos:end="53:52"><operator pos:start="53:47" pos:end="53:47">&amp;</operator><name pos:start="53:48" pos:end="53:52">flags</name></expr></argument>, <argument pos:start="53:55" pos:end="53:67"><expr pos:start="53:55" pos:end="53:67"><operator pos:start="53:55" pos:end="53:55">&amp;</operator><name pos:start="53:56" pos:end="53:67">writethrough</name></expr></argument>)</argument_list></call> <operator pos:start="53:70" pos:end="53:70">&lt;</operator> <literal type="number" pos:start="53:72" pos:end="53:72">0</literal></expr>)</condition> <block pos:start="53:75" pos:end="61:13">{<block_content pos:start="55:17" pos:end="59:25">

                <expr_stmt pos:start="55:17" pos:end="55:65"><expr pos:start="55:17" pos:end="55:64"><call pos:start="55:17" pos:end="55:64"><name pos:start="55:17" pos:end="55:28">error_report</name><argument_list pos:start="55:29" pos:end="55:64">(<argument pos:start="55:30" pos:end="55:55"><expr pos:start="55:30" pos:end="55:55"><literal type="string" pos:start="55:30" pos:end="55:55">"Invalid cache option: %s"</literal></expr></argument>, <argument pos:start="55:58" pos:end="55:63"><expr pos:start="55:58" pos:end="55:63"><name pos:start="55:58" pos:end="55:63">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:45"><expr pos:start="57:17" pos:end="57:44"><call pos:start="57:17" pos:end="57:44"><name pos:start="57:17" pos:end="57:31">qemu_opts_reset</name><argument_list pos:start="57:32" pos:end="57:44">(<argument pos:start="57:33" pos:end="57:43"><expr pos:start="57:33" pos:end="57:43"><operator pos:start="57:33" pos:end="57:33">&amp;</operator><name pos:start="57:34" pos:end="57:43">empty_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="59:17" pos:end="59:25">return <expr pos:start="59:24" pos:end="59:24"><literal type="number" pos:start="59:24" pos:end="59:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="63:13" pos:end="63:18">break;</break>

        <case pos:start="65:9" pos:end="65:17">case <expr pos:start="65:14" pos:end="65:16"><literal type="char" pos:start="65:14" pos:end="65:16">'d'</literal></expr>:</case>

            <if_stmt pos:start="67:13" pos:end="75:13"><if pos:start="67:13" pos:end="75:13">if <condition pos:start="67:16" pos:end="67:61">(<expr pos:start="67:17" pos:end="67:60"><call pos:start="67:17" pos:end="67:56"><name pos:start="67:17" pos:end="67:40">bdrv_parse_discard_flags</name><argument_list pos:start="67:41" pos:end="67:56">(<argument pos:start="67:42" pos:end="67:47"><expr pos:start="67:42" pos:end="67:47"><name pos:start="67:42" pos:end="67:47">optarg</name></expr></argument>, <argument pos:start="67:50" pos:end="67:55"><expr pos:start="67:50" pos:end="67:55"><operator pos:start="67:50" pos:end="67:50">&amp;</operator><name pos:start="67:51" pos:end="67:55">flags</name></expr></argument>)</argument_list></call> <operator pos:start="67:58" pos:end="67:58">&lt;</operator> <literal type="number" pos:start="67:60" pos:end="67:60">0</literal></expr>)</condition> <block pos:start="67:63" pos:end="75:13">{<block_content pos:start="69:17" pos:end="73:25">

                <expr_stmt pos:start="69:17" pos:end="69:67"><expr pos:start="69:17" pos:end="69:66"><call pos:start="69:17" pos:end="69:66"><name pos:start="69:17" pos:end="69:28">error_report</name><argument_list pos:start="69:29" pos:end="69:66">(<argument pos:start="69:30" pos:end="69:57"><expr pos:start="69:30" pos:end="69:57"><literal type="string" pos:start="69:30" pos:end="69:57">"Invalid discard option: %s"</literal></expr></argument>, <argument pos:start="69:60" pos:end="69:65"><expr pos:start="69:60" pos:end="69:65"><name pos:start="69:60" pos:end="69:65">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:45"><expr pos:start="71:17" pos:end="71:44"><call pos:start="71:17" pos:end="71:44"><name pos:start="71:17" pos:end="71:31">qemu_opts_reset</name><argument_list pos:start="71:32" pos:end="71:44">(<argument pos:start="71:33" pos:end="71:43"><expr pos:start="71:33" pos:end="71:43"><operator pos:start="71:33" pos:end="71:33">&amp;</operator><name pos:start="71:34" pos:end="71:43">empty_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="73:17" pos:end="73:25">return <expr pos:start="73:24" pos:end="73:24"><literal type="number" pos:start="73:24" pos:end="73:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="77:13" pos:end="77:18">break;</break>

        <case pos:start="79:9" pos:end="79:17">case <expr pos:start="79:14" pos:end="79:16"><literal type="char" pos:start="79:14" pos:end="79:16">'o'</literal></expr>:</case>

            <if_stmt pos:start="81:13" pos:end="89:13"><if pos:start="81:13" pos:end="89:13">if <condition pos:start="81:16" pos:end="81:26">(<expr pos:start="81:17" pos:end="81:25"><name pos:start="81:17" pos:end="81:25">imageOpts</name></expr>)</condition> <block pos:start="81:28" pos:end="89:13">{<block_content pos:start="83:17" pos:end="87:25">

                <expr_stmt pos:start="83:17" pos:end="83:78"><expr pos:start="83:17" pos:end="83:77"><call pos:start="83:17" pos:end="83:77"><name pos:start="83:17" pos:end="83:22">printf</name><argument_list pos:start="83:23" pos:end="83:77">(<argument pos:start="83:24" pos:end="83:76"><expr pos:start="83:24" pos:end="83:76"><literal type="string" pos:start="83:24" pos:end="83:76">"--image-opts and 'open -o' are mutually exclusive\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:45"><expr pos:start="85:17" pos:end="85:44"><call pos:start="85:17" pos:end="85:44"><name pos:start="85:17" pos:end="85:31">qemu_opts_reset</name><argument_list pos:start="85:32" pos:end="85:44">(<argument pos:start="85:33" pos:end="85:43"><expr pos:start="85:33" pos:end="85:43"><operator pos:start="85:33" pos:end="85:33">&amp;</operator><name pos:start="85:34" pos:end="85:43">empty_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="87:17" pos:end="87:25">return <expr pos:start="87:24" pos:end="87:24"><literal type="number" pos:start="87:24" pos:end="87:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="91:13" pos:end="97:13"><if pos:start="91:13" pos:end="97:13">if <condition pos:start="91:16" pos:end="91:69">(<expr pos:start="91:17" pos:end="91:68"><operator pos:start="91:17" pos:end="91:17">!</operator><call pos:start="91:18" pos:end="91:68"><name pos:start="91:18" pos:end="91:40">qemu_opts_parse_noisily</name><argument_list pos:start="91:41" pos:end="91:68">(<argument pos:start="91:42" pos:end="91:52"><expr pos:start="91:42" pos:end="91:52"><operator pos:start="91:42" pos:end="91:42">&amp;</operator><name pos:start="91:43" pos:end="91:52">empty_opts</name></expr></argument>, <argument pos:start="91:55" pos:end="91:60"><expr pos:start="91:55" pos:end="91:60"><name pos:start="91:55" pos:end="91:60">optarg</name></expr></argument>, <argument pos:start="91:63" pos:end="91:67"><expr pos:start="91:63" pos:end="91:67"><name pos:start="91:63" pos:end="91:67">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:71" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:25">

                <expr_stmt pos:start="93:17" pos:end="93:45"><expr pos:start="93:17" pos:end="93:44"><call pos:start="93:17" pos:end="93:44"><name pos:start="93:17" pos:end="93:31">qemu_opts_reset</name><argument_list pos:start="93:32" pos:end="93:44">(<argument pos:start="93:33" pos:end="93:43"><expr pos:start="93:33" pos:end="93:43"><operator pos:start="93:33" pos:end="93:33">&amp;</operator><name pos:start="93:34" pos:end="93:43">empty_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="95:17" pos:end="95:25">return <expr pos:start="95:24" pos:end="95:24"><literal type="number" pos:start="95:24" pos:end="95:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="99:13" pos:end="99:18">break;</break>

        <case pos:start="101:9" pos:end="101:17">case <expr pos:start="101:14" pos:end="101:16"><literal type="char" pos:start="101:14" pos:end="101:16">'U'</literal></expr>:</case>

            <expr_stmt pos:start="103:13" pos:end="103:31"><expr pos:start="103:13" pos:end="103:30"><name pos:start="103:13" pos:end="103:23">force_share</name> <operator pos:start="103:25" pos:end="103:25">=</operator> <name pos:start="103:27" pos:end="103:30">true</name></expr>;</expr_stmt>

            <break pos:start="105:13" pos:end="105:18">break;</break>

        <default pos:start="107:9" pos:end="107:16">default:</default>

            <expr_stmt pos:start="109:13" pos:end="109:41"><expr pos:start="109:13" pos:end="109:40"><call pos:start="109:13" pos:end="109:40"><name pos:start="109:13" pos:end="109:27">qemu_opts_reset</name><argument_list pos:start="109:28" pos:end="109:40">(<argument pos:start="109:29" pos:end="109:39"><expr pos:start="109:29" pos:end="109:39"><operator pos:start="109:29" pos:end="109:29">&amp;</operator><name pos:start="109:30" pos:end="109:39">empty_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="111:13" pos:end="111:51">return <expr pos:start="111:20" pos:end="111:50"><call pos:start="111:20" pos:end="111:50"><name pos:start="111:20" pos:end="111:39">qemuio_command_usage</name><argument_list pos:start="111:40" pos:end="111:50">(<argument pos:start="111:41" pos:end="111:49"><expr pos:start="111:41" pos:end="111:49"><operator pos:start="111:41" pos:end="111:41">&amp;</operator><name pos:start="111:42" pos:end="111:49">open_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <if_stmt pos:start="119:5" pos:end="123:5"><if pos:start="119:5" pos:end="123:5">if <condition pos:start="119:8" pos:end="119:18">(<expr pos:start="119:9" pos:end="119:17"><operator pos:start="119:9" pos:end="119:9">!</operator><name pos:start="119:10" pos:end="119:17">readonly</name></expr>)</condition> <block pos:start="119:20" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:29">

        <expr_stmt pos:start="121:9" pos:end="121:29"><expr pos:start="121:9" pos:end="121:28"><name pos:start="121:9" pos:end="121:13">flags</name> <operator pos:start="121:15" pos:end="121:16">|=</operator> <name pos:start="121:18" pos:end="121:28">BDRV_O_RDWR</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="127:5" pos:end="139:5"><if pos:start="127:5" pos:end="139:5">if <condition pos:start="127:8" pos:end="127:42">(<expr pos:start="127:9" pos:end="127:41"><name pos:start="127:9" pos:end="127:17">imageOpts</name> <operator pos:start="127:19" pos:end="127:20">&amp;&amp;</operator> <operator pos:start="127:22" pos:end="127:22">(</operator><name pos:start="127:23" pos:end="127:28">optind</name> <operator pos:start="127:30" pos:end="127:31">==</operator> <name pos:start="127:33" pos:end="127:36">argc</name> <operator pos:start="127:38" pos:end="127:38">-</operator> <literal type="number" pos:start="127:40" pos:end="127:40">1</literal><operator pos:start="127:41" pos:end="127:41">)</operator></expr>)</condition> <block pos:start="127:44" pos:end="139:5">{<block_content pos:start="129:9" pos:end="137:17">

        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:71">(<expr pos:start="129:13" pos:end="129:70"><operator pos:start="129:13" pos:end="129:13">!</operator><call pos:start="129:14" pos:end="129:70"><name pos:start="129:14" pos:end="129:36">qemu_opts_parse_noisily</name><argument_list pos:start="129:37" pos:end="129:70">(<argument pos:start="129:38" pos:end="129:48"><expr pos:start="129:38" pos:end="129:48"><operator pos:start="129:38" pos:end="129:38">&amp;</operator><name pos:start="129:39" pos:end="129:48">empty_opts</name></expr></argument>, <argument pos:start="129:51" pos:end="129:62"><expr pos:start="129:51" pos:end="129:62"><name pos:start="129:51" pos:end="129:62"><name pos:start="129:51" pos:end="129:54">argv</name><index pos:start="129:55" pos:end="129:62">[<expr pos:start="129:56" pos:end="129:61"><name pos:start="129:56" pos:end="129:61">optind</name></expr>]</index></name></expr></argument>, <argument pos:start="129:65" pos:end="129:69"><expr pos:start="129:65" pos:end="129:69"><name pos:start="129:65" pos:end="129:69">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="129:73" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:21">

            <expr_stmt pos:start="131:13" pos:end="131:41"><expr pos:start="131:13" pos:end="131:40"><call pos:start="131:13" pos:end="131:40"><name pos:start="131:13" pos:end="131:27">qemu_opts_reset</name><argument_list pos:start="131:28" pos:end="131:40">(<argument pos:start="131:29" pos:end="131:39"><expr pos:start="131:29" pos:end="131:39"><operator pos:start="131:29" pos:end="131:29">&amp;</operator><name pos:start="131:30" pos:end="131:39">empty_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="133:13" pos:end="133:21">return <expr pos:start="133:20" pos:end="133:20"><literal type="number" pos:start="133:20" pos:end="133:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:17"><expr pos:start="137:9" pos:end="137:16"><name pos:start="137:9" pos:end="137:14">optind</name><operator pos:start="137:15" pos:end="137:16">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:46"><expr pos:start="143:5" pos:end="143:45"><name pos:start="143:5" pos:end="143:9">qopts</name> <operator pos:start="143:11" pos:end="143:11">=</operator> <call pos:start="143:13" pos:end="143:45"><name pos:start="143:13" pos:end="143:26">qemu_opts_find</name><argument_list pos:start="143:27" pos:end="143:45">(<argument pos:start="143:28" pos:end="143:38"><expr pos:start="143:28" pos:end="143:38"><operator pos:start="143:28" pos:end="143:28">&amp;</operator><name pos:start="143:29" pos:end="143:38">empty_opts</name></expr></argument>, <argument pos:start="143:41" pos:end="143:44"><expr pos:start="143:41" pos:end="143:44"><name pos:start="143:41" pos:end="143:44">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:58"><expr pos:start="145:5" pos:end="145:57"><name pos:start="145:5" pos:end="145:8">opts</name> <operator pos:start="145:10" pos:end="145:10">=</operator> <ternary pos:start="145:12" pos:end="145:57"><condition pos:start="145:12" pos:end="145:18"><expr pos:start="145:12" pos:end="145:16"><name pos:start="145:12" pos:end="145:16">qopts</name></expr> ?</condition><then pos:start="145:20" pos:end="145:50"> <expr pos:start="145:20" pos:end="145:50"><call pos:start="145:20" pos:end="145:50"><name pos:start="145:20" pos:end="145:37">qemu_opts_to_qdict</name><argument_list pos:start="145:38" pos:end="145:50">(<argument pos:start="145:39" pos:end="145:43"><expr pos:start="145:39" pos:end="145:43"><name pos:start="145:39" pos:end="145:43">qopts</name></expr></argument>, <argument pos:start="145:46" pos:end="145:49"><expr pos:start="145:46" pos:end="145:49"><name pos:start="145:46" pos:end="145:49">NULL</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="145:52" pos:end="145:57">: <expr pos:start="145:54" pos:end="145:57"><name pos:start="145:54" pos:end="145:57">NULL</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:33"><expr pos:start="147:5" pos:end="147:32"><call pos:start="147:5" pos:end="147:32"><name pos:start="147:5" pos:end="147:19">qemu_opts_reset</name><argument_list pos:start="147:20" pos:end="147:32">(<argument pos:start="147:21" pos:end="147:31"><expr pos:start="147:21" pos:end="147:31"><operator pos:start="147:21" pos:end="147:21">&amp;</operator><name pos:start="147:22" pos:end="147:31">empty_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="151:5" pos:end="165:5"><if pos:start="151:5" pos:end="155:5">if <condition pos:start="151:8" pos:end="151:27">(<expr pos:start="151:9" pos:end="151:26"><name pos:start="151:9" pos:end="151:14">optind</name> <operator pos:start="151:16" pos:end="151:17">==</operator> <name pos:start="151:19" pos:end="151:22">argc</name> <operator pos:start="151:24" pos:end="151:24">-</operator> <literal type="number" pos:start="151:26" pos:end="151:26">1</literal></expr>)</condition> <block pos:start="151:29" pos:end="155:5">{<block_content pos:start="153:9" pos:end="153:78">

        <return pos:start="153:9" pos:end="153:78">return <expr pos:start="153:16" pos:end="153:77"><call pos:start="153:16" pos:end="153:77"><name pos:start="153:16" pos:end="153:23">openfile</name><argument_list pos:start="153:24" pos:end="153:77">(<argument pos:start="153:25" pos:end="153:36"><expr pos:start="153:25" pos:end="153:36"><name pos:start="153:25" pos:end="153:36"><name pos:start="153:25" pos:end="153:28">argv</name><index pos:start="153:29" pos:end="153:36">[<expr pos:start="153:30" pos:end="153:35"><name pos:start="153:30" pos:end="153:35">optind</name></expr>]</index></name></expr></argument>, <argument pos:start="153:39" pos:end="153:43"><expr pos:start="153:39" pos:end="153:43"><name pos:start="153:39" pos:end="153:43">flags</name></expr></argument>, <argument pos:start="153:46" pos:end="153:57"><expr pos:start="153:46" pos:end="153:57"><name pos:start="153:46" pos:end="153:57">writethrough</name></expr></argument>, <argument pos:start="153:60" pos:end="153:70"><expr pos:start="153:60" pos:end="153:70"><name pos:start="153:60" pos:end="153:70">force_share</name></expr></argument>, <argument pos:start="153:73" pos:end="153:76"><expr pos:start="153:73" pos:end="153:76"><name pos:start="153:73" pos:end="153:76">opts</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="155:7" pos:end="159:5">else if <condition pos:start="155:15" pos:end="155:30">(<expr pos:start="155:16" pos:end="155:29"><name pos:start="155:16" pos:end="155:21">optind</name> <operator pos:start="155:23" pos:end="155:24">==</operator> <name pos:start="155:26" pos:end="155:29">argc</name></expr>)</condition> <block pos:start="155:32" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:70">

        <return pos:start="157:9" pos:end="157:70">return <expr pos:start="157:16" pos:end="157:69"><call pos:start="157:16" pos:end="157:69"><name pos:start="157:16" pos:end="157:23">openfile</name><argument_list pos:start="157:24" pos:end="157:69">(<argument pos:start="157:25" pos:end="157:28"><expr pos:start="157:25" pos:end="157:28"><name pos:start="157:25" pos:end="157:28">NULL</name></expr></argument>, <argument pos:start="157:31" pos:end="157:35"><expr pos:start="157:31" pos:end="157:35"><name pos:start="157:31" pos:end="157:35">flags</name></expr></argument>, <argument pos:start="157:38" pos:end="157:49"><expr pos:start="157:38" pos:end="157:49"><name pos:start="157:38" pos:end="157:49">writethrough</name></expr></argument>, <argument pos:start="157:52" pos:end="157:62"><expr pos:start="157:52" pos:end="157:62"><name pos:start="157:52" pos:end="157:62">force_share</name></expr></argument>, <argument pos:start="157:65" pos:end="157:68"><expr pos:start="157:65" pos:end="157:68"><name pos:start="157:65" pos:end="157:68">opts</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if> <else pos:start="159:7" pos:end="165:5">else <block pos:start="159:12" pos:end="165:5">{<block_content pos:start="161:9" pos:end="163:47">

        <expr_stmt pos:start="161:9" pos:end="161:22"><expr pos:start="161:9" pos:end="161:21"><call pos:start="161:9" pos:end="161:21"><name pos:start="161:9" pos:end="161:15">QDECREF</name><argument_list pos:start="161:16" pos:end="161:21">(<argument pos:start="161:17" pos:end="161:20"><expr pos:start="161:17" pos:end="161:20"><name pos:start="161:17" pos:end="161:20">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="163:9" pos:end="163:47">return <expr pos:start="163:16" pos:end="163:46"><call pos:start="163:16" pos:end="163:46"><name pos:start="163:16" pos:end="163:35">qemuio_command_usage</name><argument_list pos:start="163:36" pos:end="163:46">(<argument pos:start="163:37" pos:end="163:45"><expr pos:start="163:37" pos:end="163:45"><operator pos:start="163:37" pos:end="163:37">&amp;</operator><name pos:start="163:38" pos:end="163:45">open_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
