<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20185.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">ide_qdev_init</name><parameter_list pos:start="1:25" pos:end="1:61">(<parameter pos:start="1:26" pos:end="1:42"><decl pos:start="1:26" pos:end="1:42"><type pos:start="1:26" pos:end="1:42"><name pos:start="1:26" pos:end="1:36">DeviceState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">qdev</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:60"><decl pos:start="1:45" pos:end="1:60"><type pos:start="1:45" pos:end="1:60"><name pos:start="1:45" pos:end="1:54">DeviceInfo</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">base</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:14">

    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">IDEDevice</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:18">dev</name> <init pos:start="5:20" pos:end="5:53">= <expr pos:start="5:22" pos:end="5:53"><call pos:start="5:22" pos:end="5:53"><name pos:start="5:22" pos:end="5:30">DO_UPCAST</name><argument_list pos:start="5:31" pos:end="5:53">(<argument pos:start="5:32" pos:end="5:40"><expr pos:start="5:32" pos:end="5:40"><name pos:start="5:32" pos:end="5:40">IDEDevice</name></expr></argument>, <argument pos:start="5:43" pos:end="5:46"><expr pos:start="5:43" pos:end="5:46"><name pos:start="5:43" pos:end="5:46">qdev</name></expr></argument>, <argument pos:start="5:49" pos:end="5:52"><expr pos:start="5:49" pos:end="5:52"><name pos:start="5:49" pos:end="5:52">qdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:63"><decl pos:start="7:5" pos:end="7:62"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">IDEDeviceInfo</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:23">info</name> <init pos:start="7:25" pos:end="7:62">= <expr pos:start="7:27" pos:end="7:62"><call pos:start="7:27" pos:end="7:62"><name pos:start="7:27" pos:end="7:35">DO_UPCAST</name><argument_list pos:start="7:36" pos:end="7:62">(<argument pos:start="7:37" pos:end="7:49"><expr pos:start="7:37" pos:end="7:49"><name pos:start="7:37" pos:end="7:49">IDEDeviceInfo</name></expr></argument>, <argument pos:start="7:52" pos:end="7:55"><expr pos:start="7:52" pos:end="7:55"><name pos:start="7:52" pos:end="7:55">qdev</name></expr></argument>, <argument pos:start="7:58" pos:end="7:61"><expr pos:start="7:58" pos:end="7:61"><name pos:start="7:58" pos:end="7:61">base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:60"><decl pos:start="9:5" pos:end="9:59"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">IDEBus</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:15">bus</name> <init pos:start="9:17" pos:end="9:59">= <expr pos:start="9:19" pos:end="9:59"><call pos:start="9:19" pos:end="9:59"><name pos:start="9:19" pos:end="9:27">DO_UPCAST</name><argument_list pos:start="9:28" pos:end="9:59">(<argument pos:start="9:29" pos:end="9:34"><expr pos:start="9:29" pos:end="9:34"><name pos:start="9:29" pos:end="9:34">IDEBus</name></expr></argument>, <argument pos:start="9:37" pos:end="9:40"><expr pos:start="9:37" pos:end="9:40"><name pos:start="9:37" pos:end="9:40">qbus</name></expr></argument>, <argument pos:start="9:43" pos:end="9:58"><expr pos:start="9:43" pos:end="9:58"><name pos:start="9:43" pos:end="9:58"><name pos:start="9:43" pos:end="9:46">qdev</name><operator pos:start="9:47" pos:end="9:48">-&gt;</operator><name pos:start="9:49" pos:end="9:58">parent_bus</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:22">(<expr pos:start="13:9" pos:end="13:21"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:21"><name pos:start="13:10" pos:end="13:12">dev</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:18">conf</name><operator pos:start="13:19" pos:end="13:19">.</operator><name pos:start="13:20" pos:end="13:21">bs</name></name></expr>)</condition> <block pos:start="13:24" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:17">

        <expr_stmt pos:start="15:9" pos:end="15:70"><expr pos:start="15:9" pos:end="15:69"><call pos:start="15:9" pos:end="15:69"><name pos:start="15:9" pos:end="15:15">fprintf</name><argument_list pos:start="15:16" pos:end="15:69">(<argument pos:start="15:17" pos:end="15:22"><expr pos:start="15:17" pos:end="15:22"><name pos:start="15:17" pos:end="15:22">stderr</name></expr></argument>, <argument pos:start="15:25" pos:end="15:50"><expr pos:start="15:25" pos:end="15:50"><literal type="string" pos:start="15:25" pos:end="15:50">"%s: no drive specified\n"</literal></expr></argument>, <argument pos:start="15:53" pos:end="15:68"><expr pos:start="15:53" pos:end="15:68"><name pos:start="15:53" pos:end="15:68"><name pos:start="15:53" pos:end="15:56">qdev</name><operator pos:start="15:57" pos:end="15:58">-&gt;</operator><name pos:start="15:59" pos:end="15:62">info</name><operator pos:start="15:63" pos:end="15:64">-&gt;</operator><name pos:start="15:65" pos:end="15:68">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="17:9" pos:end="17:17">goto <name pos:start="17:14" pos:end="17:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:24">(<expr pos:start="21:9" pos:end="21:23"><name pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:11">dev</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:17">unit</name></name> <operator pos:start="21:19" pos:end="21:20">==</operator> <operator pos:start="21:22" pos:end="21:22">-</operator><literal type="number" pos:start="21:23" pos:end="21:23">1</literal></expr>)</condition> <block pos:start="21:26" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:40">

        <expr_stmt pos:start="23:9" pos:end="23:40"><expr pos:start="23:9" pos:end="23:39"><name pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:11">dev</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:17">unit</name></name> <operator pos:start="23:19" pos:end="23:19">=</operator> <ternary pos:start="23:21" pos:end="23:39"><condition pos:start="23:21" pos:end="23:33"><expr pos:start="23:21" pos:end="23:31"><name pos:start="23:21" pos:end="23:31"><name pos:start="23:21" pos:end="23:23">bus</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:31">master</name></name></expr> ?</condition><then pos:start="23:35" pos:end="23:35"> <expr pos:start="23:35" pos:end="23:35"><literal type="number" pos:start="23:35" pos:end="23:35">1</literal></expr> </then><else pos:start="23:37" pos:end="23:39">: <expr pos:start="23:39" pos:end="23:39"><literal type="number" pos:start="23:39" pos:end="23:39">0</literal></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="27:5" pos:end="61:5">switch <condition pos:start="27:12" pos:end="27:22">(<expr pos:start="27:13" pos:end="27:21"><name pos:start="27:13" pos:end="27:21"><name pos:start="27:13" pos:end="27:15">dev</name><operator pos:start="27:16" pos:end="27:17">-&gt;</operator><name pos:start="27:18" pos:end="27:21">unit</name></name></expr>)</condition> <block pos:start="27:24" pos:end="61:5">{<block_content pos:start="29:5" pos:end="59:17">

    <case pos:start="29:5" pos:end="29:11">case <expr pos:start="29:10" pos:end="29:10"><literal type="number" pos:start="29:10" pos:end="29:10">0</literal></expr>:</case>

        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:24">(<expr pos:start="31:13" pos:end="31:23"><name pos:start="31:13" pos:end="31:23"><name pos:start="31:13" pos:end="31:15">bus</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:23">master</name></name></expr>)</condition> <block pos:start="31:26" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:21">

            <expr_stmt pos:start="33:13" pos:end="33:67"><expr pos:start="33:13" pos:end="33:66"><call pos:start="33:13" pos:end="33:66"><name pos:start="33:13" pos:end="33:19">fprintf</name><argument_list pos:start="33:20" pos:end="33:66">(<argument pos:start="33:21" pos:end="33:26"><expr pos:start="33:21" pos:end="33:26"><name pos:start="33:21" pos:end="33:26">stderr</name></expr></argument>, <argument pos:start="33:29" pos:end="33:65"><expr pos:start="33:29" pos:end="33:65"><literal type="string" pos:start="33:29" pos:end="33:65">"ide: tried to assign master twice\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="35:13" pos:end="35:21">goto <name pos:start="35:18" pos:end="35:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:26"><expr pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:11">bus</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:19">master</name></name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:25">dev</name></expr>;</expr_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:11">case <expr pos:start="43:10" pos:end="43:10"><literal type="number" pos:start="43:10" pos:end="43:10">1</literal></expr>:</case>

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:23">(<expr pos:start="45:13" pos:end="45:22"><name pos:start="45:13" pos:end="45:22"><name pos:start="45:13" pos:end="45:15">bus</name><operator pos:start="45:16" pos:end="45:17">-&gt;</operator><name pos:start="45:18" pos:end="45:22">slave</name></name></expr>)</condition> <block pos:start="45:25" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:21">

            <expr_stmt pos:start="47:13" pos:end="47:66"><expr pos:start="47:13" pos:end="47:65"><call pos:start="47:13" pos:end="47:65"><name pos:start="47:13" pos:end="47:19">fprintf</name><argument_list pos:start="47:20" pos:end="47:65">(<argument pos:start="47:21" pos:end="47:26"><expr pos:start="47:21" pos:end="47:26"><name pos:start="47:21" pos:end="47:26">stderr</name></expr></argument>, <argument pos:start="47:29" pos:end="47:64"><expr pos:start="47:29" pos:end="47:64"><literal type="string" pos:start="47:29" pos:end="47:64">"ide: tried to assign slave twice\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="49:13" pos:end="49:21">goto <name pos:start="49:18" pos:end="49:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:25"><expr pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:18"><name pos:start="53:9" pos:end="53:11">bus</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:18">slave</name></name> <operator pos:start="53:20" pos:end="53:20">=</operator> <name pos:start="53:22" pos:end="53:24">dev</name></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <default pos:start="57:5" pos:end="57:12">default:</default>

        <goto pos:start="59:9" pos:end="59:17">goto <name pos:start="59:14" pos:end="59:16">err</name>;</goto>

    </block_content>}</block></switch>

    <return pos:start="63:5" pos:end="63:27">return <expr pos:start="63:12" pos:end="63:26"><call pos:start="63:12" pos:end="63:26"><name pos:start="63:12" pos:end="63:21"><name pos:start="63:12" pos:end="63:15">info</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:21">init</name></name><argument_list pos:start="63:22" pos:end="63:26">(<argument pos:start="63:23" pos:end="63:25"><expr pos:start="63:23" pos:end="63:25"><name pos:start="63:23" pos:end="63:25">dev</name></expr></argument>)</argument_list></call></expr>;</return>



<label pos:start="67:1" pos:end="67:4"><name pos:start="67:1" pos:end="67:3">err</name>:</label>

    <return pos:start="69:5" pos:end="69:14">return <expr pos:start="69:12" pos:end="69:13"><operator pos:start="69:12" pos:end="69:12">-</operator><literal type="number" pos:start="69:13" pos:end="69:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
