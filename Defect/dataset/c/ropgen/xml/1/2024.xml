<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2024.c" pos:tabs="8"><function pos:start="1:1" pos:end="4767:1"><type pos:start="1:1" pos:end="1:16"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">uint8_t</name> <modifier pos:start="1:16" pos:end="1:16">*</modifier></type><name pos:start="1:17" pos:end="1:26">disas_insn</name><parameter_list pos:start="1:27" pos:end="1:62">(<parameter pos:start="1:28" pos:end="1:42"><decl pos:start="1:28" pos:end="1:42"><type pos:start="1:28" pos:end="1:42"><name pos:start="1:28" pos:end="1:39">DisasContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:61"><decl pos:start="1:45" pos:end="1:61"><type pos:start="1:45" pos:end="1:61"><name pos:start="1:45" pos:end="1:51">uint8_t</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:61">pc_start</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="4767:1">{<block_content pos:start="5:5" pos:end="4765:17">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">b</name></decl>, <decl pos:start="5:12" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:19">prefixes</name></decl>, <decl pos:start="5:22" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:26">aflag</name></decl>, <decl pos:start="5:29" pos:end="5:33"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:29" pos:end="5:33">dflag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">shift</name></decl>, <decl pos:start="7:16" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:17">ot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:67"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">modrm</name></decl>, <decl pos:start="9:16" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:18">reg</name></decl>, <decl pos:start="9:21" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:22">rm</name></decl>, <decl pos:start="9:25" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:25" pos:end="9:27">mod</name></decl>, <decl pos:start="9:30" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:30" pos:end="9:37">reg_addr</name></decl>, <decl pos:start="9:40" pos:end="9:41"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:40" pos:end="9:41">op</name></decl>, <decl pos:start="9:44" pos:end="9:48"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:44" pos:end="9:48">opreg</name></decl>, <decl pos:start="9:51" pos:end="9:61"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:51" pos:end="9:61">offset_addr</name></decl>, <decl pos:start="9:64" pos:end="9:66"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:64" pos:end="9:66">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:25">next_eip</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:21"><expr pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:9">pc</name></name> <operator pos:start="15:11" pos:end="15:11">=</operator> <name pos:start="15:13" pos:end="15:20">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:17"><expr pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">prefixes</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:9">aflag</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <name pos:start="19:13" pos:end="19:21"><name pos:start="19:13" pos:end="19:13">s</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:21">code32</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:9">dflag</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <name pos:start="21:13" pos:end="21:21"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:21">code32</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:21"><expr pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:15">override</name></name> <operator pos:start="23:17" pos:end="23:17">=</operator> <operator pos:start="23:19" pos:end="23:19">-</operator><literal type="number" pos:start="23:20" pos:end="23:20">1</literal></expr>;</expr_stmt>

 <label pos:start="25:2" pos:end="25:11"><name pos:start="25:2" pos:end="25:10">next_byte</name>:</label>

    <expr_stmt pos:start="27:5" pos:end="27:25"><expr pos:start="27:5" pos:end="27:24"><name pos:start="27:5" pos:end="27:5">b</name> <operator pos:start="27:7" pos:end="27:7">=</operator> <call pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:17">ldub_code</name><argument_list pos:start="27:18" pos:end="27:24">(<argument pos:start="27:19" pos:end="27:23"><expr pos:start="27:19" pos:end="27:23"><name pos:start="27:19" pos:end="27:23"><name pos:start="27:19" pos:end="27:19">s</name><operator pos:start="27:20" pos:end="27:21">-&gt;</operator><name pos:start="27:22" pos:end="27:23">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:12"><expr pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:9"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:9">pc</name></name><operator pos:start="29:10" pos:end="29:11">++</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="31:5" pos:end="31:24">/* check prefixes */</comment>

    <switch pos:start="33:5" pos:end="101:5">switch <condition pos:start="33:12" pos:end="33:14">(<expr pos:start="33:13" pos:end="33:13"><name pos:start="33:13" pos:end="33:13">b</name></expr>)</condition> <block pos:start="33:16" pos:end="101:5">{<block_content pos:start="35:5" pos:end="99:23">

    <case pos:start="35:5" pos:end="35:14">case <expr pos:start="35:10" pos:end="35:13"><literal type="number" pos:start="35:10" pos:end="35:13">0xf3</literal></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:32"><expr pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:16">prefixes</name> <operator pos:start="37:18" pos:end="37:19">|=</operator> <name pos:start="37:21" pos:end="37:31">PREFIX_REPZ</name></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:23">goto <name pos:start="39:14" pos:end="39:22">next_byte</name>;</goto>

    <case pos:start="41:5" pos:end="41:14">case <expr pos:start="41:10" pos:end="41:13"><literal type="number" pos:start="41:10" pos:end="41:13">0xf2</literal></expr>:</case>

        <expr_stmt pos:start="43:9" pos:end="43:33"><expr pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:16">prefixes</name> <operator pos:start="43:18" pos:end="43:19">|=</operator> <name pos:start="43:21" pos:end="43:32">PREFIX_REPNZ</name></expr>;</expr_stmt>

        <goto pos:start="45:9" pos:end="45:23">goto <name pos:start="45:14" pos:end="45:22">next_byte</name>;</goto>

    <case pos:start="47:5" pos:end="47:14">case <expr pos:start="47:10" pos:end="47:13"><literal type="number" pos:start="47:10" pos:end="47:13">0xf0</literal></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="49:32"><expr pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:16">prefixes</name> <operator pos:start="49:18" pos:end="49:19">|=</operator> <name pos:start="49:21" pos:end="49:31">PREFIX_LOCK</name></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:23">goto <name pos:start="51:14" pos:end="51:22">next_byte</name>;</goto>

    <case pos:start="53:5" pos:end="53:14">case <expr pos:start="53:10" pos:end="53:13"><literal type="number" pos:start="53:10" pos:end="53:13">0x2e</literal></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:27"><expr pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:19">override</name></name> <operator pos:start="55:21" pos:end="55:21">=</operator> <name pos:start="55:23" pos:end="55:26">R_CS</name></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:23">goto <name pos:start="57:14" pos:end="57:22">next_byte</name>;</goto>

    <case pos:start="59:5" pos:end="59:14">case <expr pos:start="59:10" pos:end="59:13"><literal type="number" pos:start="59:10" pos:end="59:13">0x36</literal></expr>:</case>

        <expr_stmt pos:start="61:9" pos:end="61:27"><expr pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:19"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:19">override</name></name> <operator pos:start="61:21" pos:end="61:21">=</operator> <name pos:start="61:23" pos:end="61:26">R_SS</name></expr>;</expr_stmt>

        <goto pos:start="63:9" pos:end="63:23">goto <name pos:start="63:14" pos:end="63:22">next_byte</name>;</goto>

    <case pos:start="65:5" pos:end="65:14">case <expr pos:start="65:10" pos:end="65:13"><literal type="number" pos:start="65:10" pos:end="65:13">0x3e</literal></expr>:</case>

        <expr_stmt pos:start="67:9" pos:end="67:27"><expr pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:19">override</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:26">R_DS</name></expr>;</expr_stmt>

        <goto pos:start="69:9" pos:end="69:23">goto <name pos:start="69:14" pos:end="69:22">next_byte</name>;</goto>

    <case pos:start="71:5" pos:end="71:14">case <expr pos:start="71:10" pos:end="71:13"><literal type="number" pos:start="71:10" pos:end="71:13">0x26</literal></expr>:</case>

        <expr_stmt pos:start="73:9" pos:end="73:27"><expr pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:19"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:19">override</name></name> <operator pos:start="73:21" pos:end="73:21">=</operator> <name pos:start="73:23" pos:end="73:26">R_ES</name></expr>;</expr_stmt>

        <goto pos:start="75:9" pos:end="75:23">goto <name pos:start="75:14" pos:end="75:22">next_byte</name>;</goto>

    <case pos:start="77:5" pos:end="77:14">case <expr pos:start="77:10" pos:end="77:13"><literal type="number" pos:start="77:10" pos:end="77:13">0x64</literal></expr>:</case>

        <expr_stmt pos:start="79:9" pos:end="79:27"><expr pos:start="79:9" pos:end="79:26"><name pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:19">override</name></name> <operator pos:start="79:21" pos:end="79:21">=</operator> <name pos:start="79:23" pos:end="79:26">R_FS</name></expr>;</expr_stmt>

        <goto pos:start="81:9" pos:end="81:23">goto <name pos:start="81:14" pos:end="81:22">next_byte</name>;</goto>

    <case pos:start="83:5" pos:end="83:14">case <expr pos:start="83:10" pos:end="83:13"><literal type="number" pos:start="83:10" pos:end="83:13">0x65</literal></expr>:</case>

        <expr_stmt pos:start="85:9" pos:end="85:27"><expr pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:19">override</name></name> <operator pos:start="85:21" pos:end="85:21">=</operator> <name pos:start="85:23" pos:end="85:26">R_GS</name></expr>;</expr_stmt>

        <goto pos:start="87:9" pos:end="87:23">goto <name pos:start="87:14" pos:end="87:22">next_byte</name>;</goto>

    <case pos:start="89:5" pos:end="89:14">case <expr pos:start="89:10" pos:end="89:13"><literal type="number" pos:start="89:10" pos:end="89:13">0x66</literal></expr>:</case>

        <expr_stmt pos:start="91:9" pos:end="91:32"><expr pos:start="91:9" pos:end="91:31"><name pos:start="91:9" pos:end="91:16">prefixes</name> <operator pos:start="91:18" pos:end="91:19">|=</operator> <name pos:start="91:21" pos:end="91:31">PREFIX_DATA</name></expr>;</expr_stmt>

        <goto pos:start="93:9" pos:end="93:23">goto <name pos:start="93:14" pos:end="93:22">next_byte</name>;</goto>

    <case pos:start="95:5" pos:end="95:14">case <expr pos:start="95:10" pos:end="95:13"><literal type="number" pos:start="95:10" pos:end="95:13">0x67</literal></expr>:</case>

        <expr_stmt pos:start="97:9" pos:end="97:31"><expr pos:start="97:9" pos:end="97:30"><name pos:start="97:9" pos:end="97:16">prefixes</name> <operator pos:start="97:18" pos:end="97:19">|=</operator> <name pos:start="97:21" pos:end="97:30">PREFIX_ADR</name></expr>;</expr_stmt>

        <goto pos:start="99:9" pos:end="99:23">goto <name pos:start="99:14" pos:end="99:22">next_byte</name>;</goto>

    </block_content>}</block></switch>



    <if_stmt pos:start="105:5" pos:end="107:19"><if pos:start="105:5" pos:end="107:19">if <condition pos:start="105:8" pos:end="105:31">(<expr pos:start="105:9" pos:end="105:30"><name pos:start="105:9" pos:end="105:16">prefixes</name> <operator pos:start="105:18" pos:end="105:18">&amp;</operator> <name pos:start="105:20" pos:end="105:30">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="107:9" pos:end="107:19"><block_content pos:start="107:9" pos:end="107:19">

        <expr_stmt pos:start="107:9" pos:end="107:19"><expr pos:start="107:9" pos:end="107:18"><name pos:start="107:9" pos:end="107:13">dflag</name> <operator pos:start="107:15" pos:end="107:16">^=</operator> <literal type="number" pos:start="107:18" pos:end="107:18">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="109:5" pos:end="111:19"><if pos:start="109:5" pos:end="111:19">if <condition pos:start="109:8" pos:end="109:30">(<expr pos:start="109:9" pos:end="109:29"><name pos:start="109:9" pos:end="109:16">prefixes</name> <operator pos:start="109:18" pos:end="109:18">&amp;</operator> <name pos:start="109:20" pos:end="109:29">PREFIX_ADR</name></expr>)</condition><block type="pseudo" pos:start="111:9" pos:end="111:19"><block_content pos:start="111:9" pos:end="111:19">

        <expr_stmt pos:start="111:9" pos:end="111:19"><expr pos:start="111:9" pos:end="111:18"><name pos:start="111:9" pos:end="111:13">aflag</name> <operator pos:start="111:15" pos:end="111:16">^=</operator> <literal type="number" pos:start="111:18" pos:end="111:18">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:25"><expr pos:start="115:5" pos:end="115:24"><name pos:start="115:5" pos:end="115:13"><name pos:start="115:5" pos:end="115:5">s</name><operator pos:start="115:6" pos:end="115:7">-&gt;</operator><name pos:start="115:8" pos:end="115:13">prefix</name></name> <operator pos:start="115:15" pos:end="115:15">=</operator> <name pos:start="115:17" pos:end="115:24">prefixes</name></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:21"><expr pos:start="117:5" pos:end="117:20"><name pos:start="117:5" pos:end="117:12"><name pos:start="117:5" pos:end="117:5">s</name><operator pos:start="117:6" pos:end="117:7">-&gt;</operator><name pos:start="117:8" pos:end="117:12">aflag</name></name> <operator pos:start="117:14" pos:end="117:14">=</operator> <name pos:start="117:16" pos:end="117:20">aflag</name></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:21"><expr pos:start="119:5" pos:end="119:20"><name pos:start="119:5" pos:end="119:12"><name pos:start="119:5" pos:end="119:5">s</name><operator pos:start="119:6" pos:end="119:7">-&gt;</operator><name pos:start="119:8" pos:end="119:12">dflag</name></name> <operator pos:start="119:14" pos:end="119:14">=</operator> <name pos:start="119:16" pos:end="119:20">dflag</name></expr>;</expr_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:25">/* lock generation */</comment>

    <if_stmt pos:start="125:5" pos:end="127:22"><if pos:start="125:5" pos:end="127:22">if <condition pos:start="125:8" pos:end="125:31">(<expr pos:start="125:9" pos:end="125:30"><name pos:start="125:9" pos:end="125:16">prefixes</name> <operator pos:start="125:18" pos:end="125:18">&amp;</operator> <name pos:start="125:20" pos:end="125:30">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="127:9" pos:end="127:22"><block_content pos:start="127:9" pos:end="127:22">

        <expr_stmt pos:start="127:9" pos:end="127:22"><expr pos:start="127:9" pos:end="127:21"><call pos:start="127:9" pos:end="127:21"><name pos:start="127:9" pos:end="127:19">gen_op_lock</name><argument_list pos:start="127:20" pos:end="127:21">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="131:5" pos:end="131:27">/* now check op code */</comment>

 <label pos:start="133:2" pos:end="133:10"><name pos:start="133:2" pos:end="133:9">reswitch</name>:</label>

    <switch pos:start="135:5" pos:end="4745:5">switch<condition pos:start="135:11" pos:end="135:13">(<expr pos:start="135:12" pos:end="135:12"><name pos:start="135:12" pos:end="135:12">b</name></expr>)</condition> <block pos:start="135:15" pos:end="4745:5">{<block_content pos:start="137:5" pos:end="4743:24">

    <case pos:start="137:5" pos:end="137:14">case <expr pos:start="137:10" pos:end="137:13"><literal type="number" pos:start="137:10" pos:end="137:13">0x0f</literal></expr>:</case>

        <comment type="block" format="doxygen" pos:start="139:9" pos:end="139:36">/**************************/</comment>

        <comment type="block" pos:start="141:9" pos:end="141:30">/* extended op code */</comment>

        <expr_stmt pos:start="143:9" pos:end="143:39"><expr pos:start="143:9" pos:end="143:38"><name pos:start="143:9" pos:end="143:9">b</name> <operator pos:start="143:11" pos:end="143:11">=</operator> <call pos:start="143:13" pos:end="143:30"><name pos:start="143:13" pos:end="143:21">ldub_code</name><argument_list pos:start="143:22" pos:end="143:30">(<argument pos:start="143:23" pos:end="143:29"><expr pos:start="143:23" pos:end="143:29"><name pos:start="143:23" pos:end="143:27"><name pos:start="143:23" pos:end="143:23">s</name><operator pos:start="143:24" pos:end="143:25">-&gt;</operator><name pos:start="143:26" pos:end="143:27">pc</name></name><operator pos:start="143:28" pos:end="143:29">++</operator></expr></argument>)</argument_list></call> <operator pos:start="143:32" pos:end="143:32">|</operator> <literal type="number" pos:start="143:34" pos:end="143:38">0x100</literal></expr>;</expr_stmt>

        <goto pos:start="145:9" pos:end="145:22">goto <name pos:start="145:14" pos:end="145:21">reswitch</name>;</goto>

        

        <comment type="block" format="doxygen" pos:start="149:9" pos:end="149:36">/**************************/</comment>

        <comment type="block" pos:start="151:9" pos:end="151:27">/* arith &amp; logic */</comment>

    <case pos:start="153:5" pos:end="153:23">case <expr pos:start="153:10" pos:end="153:22"><literal type="number" pos:start="153:10" pos:end="153:13">0x00</literal> <operator pos:start="153:15" pos:end="153:17">...</operator> <literal type="number" pos:start="153:19" pos:end="153:22">0x05</literal></expr>:</case>

    <case pos:start="155:5" pos:end="155:23">case <expr pos:start="155:10" pos:end="155:22"><literal type="number" pos:start="155:10" pos:end="155:13">0x08</literal> <operator pos:start="155:15" pos:end="155:17">...</operator> <literal type="number" pos:start="155:19" pos:end="155:22">0x0d</literal></expr>:</case>

    <case pos:start="157:5" pos:end="157:23">case <expr pos:start="157:10" pos:end="157:22"><literal type="number" pos:start="157:10" pos:end="157:13">0x10</literal> <operator pos:start="157:15" pos:end="157:17">...</operator> <literal type="number" pos:start="157:19" pos:end="157:22">0x15</literal></expr>:</case>

    <case pos:start="159:5" pos:end="159:23">case <expr pos:start="159:10" pos:end="159:22"><literal type="number" pos:start="159:10" pos:end="159:13">0x18</literal> <operator pos:start="159:15" pos:end="159:17">...</operator> <literal type="number" pos:start="159:19" pos:end="159:22">0x1d</literal></expr>:</case>

    <case pos:start="161:5" pos:end="161:23">case <expr pos:start="161:10" pos:end="161:22"><literal type="number" pos:start="161:10" pos:end="161:13">0x20</literal> <operator pos:start="161:15" pos:end="161:17">...</operator> <literal type="number" pos:start="161:19" pos:end="161:22">0x25</literal></expr>:</case>

    <case pos:start="163:5" pos:end="163:23">case <expr pos:start="163:10" pos:end="163:22"><literal type="number" pos:start="163:10" pos:end="163:13">0x28</literal> <operator pos:start="163:15" pos:end="163:17">...</operator> <literal type="number" pos:start="163:19" pos:end="163:22">0x2d</literal></expr>:</case>

    <case pos:start="165:5" pos:end="165:23">case <expr pos:start="165:10" pos:end="165:22"><literal type="number" pos:start="165:10" pos:end="165:13">0x30</literal> <operator pos:start="165:15" pos:end="165:17">...</operator> <literal type="number" pos:start="165:19" pos:end="165:22">0x35</literal></expr>:</case>

    <case pos:start="167:5" pos:end="167:23">case <expr pos:start="167:10" pos:end="167:22"><literal type="number" pos:start="167:10" pos:end="167:13">0x38</literal> <operator pos:start="167:15" pos:end="167:17">...</operator> <literal type="number" pos:start="167:19" pos:end="167:22">0x3d</literal></expr>:</case>

        <block pos:start="169:9" pos:end="277:9">{<block_content pos:start="171:13" pos:end="275:13">

            <decl_stmt pos:start="171:13" pos:end="171:27"><decl pos:start="171:13" pos:end="171:18"><type pos:start="171:13" pos:end="171:15"><name pos:start="171:13" pos:end="171:15">int</name></type> <name pos:start="171:17" pos:end="171:18">op</name></decl>, <decl pos:start="171:21" pos:end="171:21"><type ref="prev" pos:start="171:13" pos:end="171:15"/><name pos:start="171:21" pos:end="171:21">f</name></decl>, <decl pos:start="171:24" pos:end="171:26"><type ref="prev" pos:start="171:13" pos:end="171:15"/><name pos:start="171:24" pos:end="171:26">val</name></decl>;</decl_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:30"><expr pos:start="173:13" pos:end="173:29"><name pos:start="173:13" pos:end="173:14">op</name> <operator pos:start="173:16" pos:end="173:16">=</operator> <operator pos:start="173:18" pos:end="173:18">(</operator><name pos:start="173:19" pos:end="173:19">b</name> <operator pos:start="173:21" pos:end="173:22">&gt;&gt;</operator> <literal type="number" pos:start="173:24" pos:end="173:24">3</literal><operator pos:start="173:25" pos:end="173:25">)</operator> <operator pos:start="173:27" pos:end="173:27">&amp;</operator> <literal type="number" pos:start="173:29" pos:end="173:29">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:29"><expr pos:start="175:13" pos:end="175:28"><name pos:start="175:13" pos:end="175:13">f</name> <operator pos:start="175:15" pos:end="175:15">=</operator> <operator pos:start="175:17" pos:end="175:17">(</operator><name pos:start="175:18" pos:end="175:18">b</name> <operator pos:start="175:20" pos:end="175:21">&gt;&gt;</operator> <literal type="number" pos:start="175:23" pos:end="175:23">1</literal><operator pos:start="175:24" pos:end="175:24">)</operator> <operator pos:start="175:26" pos:end="175:26">&amp;</operator> <literal type="number" pos:start="175:28" pos:end="175:28">3</literal></expr>;</expr_stmt>



            <if_stmt pos:start="179:13" pos:end="185:47"><if pos:start="179:13" pos:end="181:29">if <condition pos:start="179:16" pos:end="179:29">(<expr pos:start="179:17" pos:end="179:28"><operator pos:start="179:17" pos:end="179:17">(</operator><name pos:start="179:18" pos:end="179:18">b</name> <operator pos:start="179:20" pos:end="179:20">&amp;</operator> <literal type="number" pos:start="179:22" pos:end="179:22">1</literal><operator pos:start="179:23" pos:end="179:23">)</operator> <operator pos:start="179:25" pos:end="179:26">==</operator> <literal type="number" pos:start="179:28" pos:end="179:28">0</literal></expr>)</condition><block type="pseudo" pos:start="181:17" pos:end="181:29"><block_content pos:start="181:17" pos:end="181:29">

                <expr_stmt pos:start="181:17" pos:end="181:29"><expr pos:start="181:17" pos:end="181:28"><name pos:start="181:17" pos:end="181:18">ot</name> <operator pos:start="181:20" pos:end="181:20">=</operator> <name pos:start="181:22" pos:end="181:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="183:13" pos:end="185:47">else<block type="pseudo" pos:start="185:17" pos:end="185:47"><block_content pos:start="185:17" pos:end="185:47">

                <expr_stmt pos:start="185:17" pos:end="185:47"><expr pos:start="185:17" pos:end="185:46"><name pos:start="185:17" pos:end="185:18">ot</name> <operator pos:start="185:20" pos:end="185:20">=</operator> <ternary pos:start="185:22" pos:end="185:46"><condition pos:start="185:22" pos:end="185:28"><expr pos:start="185:22" pos:end="185:26"><name pos:start="185:22" pos:end="185:26">dflag</name></expr> ?</condition><then pos:start="185:30" pos:end="185:36"> <expr pos:start="185:30" pos:end="185:36"><name pos:start="185:30" pos:end="185:36">OT_LONG</name></expr> </then><else pos:start="185:38" pos:end="185:46">: <expr pos:start="185:40" pos:end="185:46"><name pos:start="185:40" pos:end="185:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

            

            <switch pos:start="189:13" pos:end="275:13">switch<condition pos:start="189:19" pos:end="189:21">(<expr pos:start="189:20" pos:end="189:20"><name pos:start="189:20" pos:end="189:20">f</name></expr>)</condition> <block pos:start="189:23" pos:end="275:13">{<block_content pos:start="191:13" pos:end="273:22">

            <case pos:start="191:13" pos:end="191:19">case <expr pos:start="191:18" pos:end="191:18"><literal type="number" pos:start="191:18" pos:end="191:18">0</literal></expr>:</case> <comment type="block" pos:start="191:21" pos:end="191:35">/* OP Ev, Gv */</comment>

                <expr_stmt pos:start="193:17" pos:end="193:43"><expr pos:start="193:17" pos:end="193:42"><name pos:start="193:17" pos:end="193:21">modrm</name> <operator pos:start="193:23" pos:end="193:23">=</operator> <call pos:start="193:25" pos:end="193:42"><name pos:start="193:25" pos:end="193:33">ldub_code</name><argument_list pos:start="193:34" pos:end="193:42">(<argument pos:start="193:35" pos:end="193:41"><expr pos:start="193:35" pos:end="193:41"><name pos:start="193:35" pos:end="193:39"><name pos:start="193:35" pos:end="193:35">s</name><operator pos:start="193:36" pos:end="193:37">-&gt;</operator><name pos:start="193:38" pos:end="193:39">pc</name></name><operator pos:start="193:40" pos:end="193:41">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="195:17" pos:end="195:41"><expr pos:start="195:17" pos:end="195:40"><name pos:start="195:17" pos:end="195:19">reg</name> <operator pos:start="195:21" pos:end="195:21">=</operator> <operator pos:start="195:23" pos:end="195:23">(</operator><operator pos:start="195:24" pos:end="195:24">(</operator><name pos:start="195:25" pos:end="195:29">modrm</name> <operator pos:start="195:31" pos:end="195:32">&gt;&gt;</operator> <literal type="number" pos:start="195:34" pos:end="195:34">3</literal><operator pos:start="195:35" pos:end="195:35">)</operator> <operator pos:start="195:37" pos:end="195:37">&amp;</operator> <literal type="number" pos:start="195:39" pos:end="195:39">7</literal><operator pos:start="195:40" pos:end="195:40">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="197:17" pos:end="197:39"><expr pos:start="197:17" pos:end="197:38"><name pos:start="197:17" pos:end="197:19">mod</name> <operator pos:start="197:21" pos:end="197:21">=</operator> <operator pos:start="197:23" pos:end="197:23">(</operator><name pos:start="197:24" pos:end="197:28">modrm</name> <operator pos:start="197:30" pos:end="197:31">&gt;&gt;</operator> <literal type="number" pos:start="197:33" pos:end="197:33">6</literal><operator pos:start="197:34" pos:end="197:34">)</operator> <operator pos:start="197:36" pos:end="197:36">&amp;</operator> <literal type="number" pos:start="197:38" pos:end="197:38">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:31"><expr pos:start="199:17" pos:end="199:30"><name pos:start="199:17" pos:end="199:18">rm</name> <operator pos:start="199:20" pos:end="199:20">=</operator> <name pos:start="199:22" pos:end="199:26">modrm</name> <operator pos:start="199:28" pos:end="199:28">&amp;</operator> <literal type="number" pos:start="199:30" pos:end="199:30">7</literal></expr>;</expr_stmt>

                <if_stmt pos:start="201:17" pos:end="227:17"><if pos:start="201:17" pos:end="207:17">if <condition pos:start="201:20" pos:end="201:29">(<expr pos:start="201:21" pos:end="201:28"><name pos:start="201:21" pos:end="201:23">mod</name> <operator pos:start="201:25" pos:end="201:26">!=</operator> <literal type="number" pos:start="201:28" pos:end="201:28">3</literal></expr>)</condition> <block pos:start="201:31" pos:end="207:17">{<block_content pos:start="203:21" pos:end="205:36">

                    <expr_stmt pos:start="203:21" pos:end="203:69"><expr pos:start="203:21" pos:end="203:68"><call pos:start="203:21" pos:end="203:68"><name pos:start="203:21" pos:end="203:33">gen_lea_modrm</name><argument_list pos:start="203:34" pos:end="203:68">(<argument pos:start="203:35" pos:end="203:35"><expr pos:start="203:35" pos:end="203:35"><name pos:start="203:35" pos:end="203:35">s</name></expr></argument>, <argument pos:start="203:38" pos:end="203:42"><expr pos:start="203:38" pos:end="203:42"><name pos:start="203:38" pos:end="203:42">modrm</name></expr></argument>, <argument pos:start="203:45" pos:end="203:53"><expr pos:start="203:45" pos:end="203:53"><operator pos:start="203:45" pos:end="203:45">&amp;</operator><name pos:start="203:46" pos:end="203:53">reg_addr</name></expr></argument>, <argument pos:start="203:56" pos:end="203:67"><expr pos:start="203:56" pos:end="203:67"><operator pos:start="203:56" pos:end="203:56">&amp;</operator><name pos:start="203:57" pos:end="203:67">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="205:21" pos:end="205:36"><expr pos:start="205:21" pos:end="205:35"><name pos:start="205:21" pos:end="205:25">opreg</name> <operator pos:start="205:27" pos:end="205:27">=</operator> <name pos:start="205:29" pos:end="205:35">OR_TMP0</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="207:19" pos:end="223:17">else if <condition pos:start="207:27" pos:end="207:54">(<expr pos:start="207:28" pos:end="207:53"><name pos:start="207:28" pos:end="207:29">op</name> <operator pos:start="207:31" pos:end="207:32">==</operator> <name pos:start="207:34" pos:end="207:40">OP_XORL</name> <operator pos:start="207:42" pos:end="207:43">&amp;&amp;</operator> <name pos:start="207:45" pos:end="207:46">rm</name> <operator pos:start="207:48" pos:end="207:49">==</operator> <name pos:start="207:51" pos:end="207:53">reg</name></expr>)</condition> <block pos:start="207:56" pos:end="223:17">{<block_content pos:start="209:17" pos:end="221:26">

                <label pos:start="209:17" pos:end="209:25"><name pos:start="209:17" pos:end="209:24">xor_zero</name>:</label>

                    <comment type="block" pos:start="211:21" pos:end="211:51">/* xor reg, reg optimisation */</comment>

                    <expr_stmt pos:start="213:21" pos:end="213:39"><expr pos:start="213:21" pos:end="213:38"><call pos:start="213:21" pos:end="213:38"><name pos:start="213:21" pos:end="213:36">gen_op_movl_T0_0</name><argument_list pos:start="213:37" pos:end="213:38">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="215:21" pos:end="215:49"><expr pos:start="215:21" pos:end="215:48"><name pos:start="215:21" pos:end="215:28"><name pos:start="215:21" pos:end="215:21">s</name><operator pos:start="215:22" pos:end="215:23">-&gt;</operator><name pos:start="215:24" pos:end="215:28">cc_op</name></name> <operator pos:start="215:30" pos:end="215:30">=</operator> <name pos:start="215:32" pos:end="215:43">CC_OP_LOGICB</name> <operator pos:start="215:45" pos:end="215:45">+</operator> <name pos:start="215:47" pos:end="215:48">ot</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="217:21" pos:end="217:49"><expr pos:start="217:21" pos:end="217:48"><name pos:start="217:21" pos:end="217:46"><name pos:start="217:21" pos:end="217:37">gen_op_mov_reg_T0</name><index pos:start="217:38" pos:end="217:41">[<expr pos:start="217:39" pos:end="217:40"><name pos:start="217:39" pos:end="217:40">ot</name></expr>]</index><index pos:start="217:42" pos:end="217:46">[<expr pos:start="217:43" pos:end="217:45"><name pos:start="217:43" pos:end="217:45">reg</name></expr>]</index></name><operator pos:start="217:47" pos:end="217:47">(</operator><operator pos:start="217:48" pos:end="217:48">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="219:21" pos:end="219:40"><expr pos:start="219:21" pos:end="219:39"><call pos:start="219:21" pos:end="219:39"><name pos:start="219:21" pos:end="219:37">gen_op_update1_cc</name><argument_list pos:start="219:38" pos:end="219:39">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="221:21" pos:end="221:26">break;</break>

                </block_content>}</block></if> <else pos:start="223:19" pos:end="227:17">else <block pos:start="223:24" pos:end="227:17">{<block_content pos:start="225:21" pos:end="225:31">

                    <expr_stmt pos:start="225:21" pos:end="225:31"><expr pos:start="225:21" pos:end="225:30"><name pos:start="225:21" pos:end="225:25">opreg</name> <operator pos:start="225:27" pos:end="225:27">=</operator> <name pos:start="225:29" pos:end="225:30">rm</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="229:17" pos:end="229:48"><expr pos:start="229:17" pos:end="229:47"><name pos:start="229:17" pos:end="229:45"><name pos:start="229:17" pos:end="229:33">gen_op_mov_TN_reg</name><index pos:start="229:34" pos:end="229:37">[<expr pos:start="229:35" pos:end="229:36"><name pos:start="229:35" pos:end="229:36">ot</name></expr>]</index><index pos:start="229:38" pos:end="229:40">[<expr pos:start="229:39" pos:end="229:39"><literal type="number" pos:start="229:39" pos:end="229:39">1</literal></expr>]</index><index pos:start="229:41" pos:end="229:45">[<expr pos:start="229:42" pos:end="229:44"><name pos:start="229:42" pos:end="229:44">reg</name></expr>]</index></name><operator pos:start="229:46" pos:end="229:46">(</operator><operator pos:start="229:47" pos:end="229:47">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="231:17" pos:end="231:41"><expr pos:start="231:17" pos:end="231:40"><call pos:start="231:17" pos:end="231:40"><name pos:start="231:17" pos:end="231:22">gen_op</name><argument_list pos:start="231:23" pos:end="231:40">(<argument pos:start="231:24" pos:end="231:24"><expr pos:start="231:24" pos:end="231:24"><name pos:start="231:24" pos:end="231:24">s</name></expr></argument>, <argument pos:start="231:27" pos:end="231:28"><expr pos:start="231:27" pos:end="231:28"><name pos:start="231:27" pos:end="231:28">op</name></expr></argument>, <argument pos:start="231:31" pos:end="231:32"><expr pos:start="231:31" pos:end="231:32"><name pos:start="231:31" pos:end="231:32">ot</name></expr></argument>, <argument pos:start="231:35" pos:end="231:39"><expr pos:start="231:35" pos:end="231:39"><name pos:start="231:35" pos:end="231:39">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="233:17" pos:end="233:22">break;</break>

            <case pos:start="235:13" pos:end="235:19">case <expr pos:start="235:18" pos:end="235:18"><literal type="number" pos:start="235:18" pos:end="235:18">1</literal></expr>:</case> <comment type="block" pos:start="235:21" pos:end="235:35">/* OP Gv, Ev */</comment>

                <expr_stmt pos:start="237:17" pos:end="237:43"><expr pos:start="237:17" pos:end="237:42"><name pos:start="237:17" pos:end="237:21">modrm</name> <operator pos:start="237:23" pos:end="237:23">=</operator> <call pos:start="237:25" pos:end="237:42"><name pos:start="237:25" pos:end="237:33">ldub_code</name><argument_list pos:start="237:34" pos:end="237:42">(<argument pos:start="237:35" pos:end="237:41"><expr pos:start="237:35" pos:end="237:41"><name pos:start="237:35" pos:end="237:39"><name pos:start="237:35" pos:end="237:35">s</name><operator pos:start="237:36" pos:end="237:37">-&gt;</operator><name pos:start="237:38" pos:end="237:39">pc</name></name><operator pos:start="237:40" pos:end="237:41">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="239:17" pos:end="239:39"><expr pos:start="239:17" pos:end="239:38"><name pos:start="239:17" pos:end="239:19">mod</name> <operator pos:start="239:21" pos:end="239:21">=</operator> <operator pos:start="239:23" pos:end="239:23">(</operator><name pos:start="239:24" pos:end="239:28">modrm</name> <operator pos:start="239:30" pos:end="239:31">&gt;&gt;</operator> <literal type="number" pos:start="239:33" pos:end="239:33">6</literal><operator pos:start="239:34" pos:end="239:34">)</operator> <operator pos:start="239:36" pos:end="239:36">&amp;</operator> <literal type="number" pos:start="239:38" pos:end="239:38">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="241:17" pos:end="241:41"><expr pos:start="241:17" pos:end="241:40"><name pos:start="241:17" pos:end="241:19">reg</name> <operator pos:start="241:21" pos:end="241:21">=</operator> <operator pos:start="241:23" pos:end="241:23">(</operator><operator pos:start="241:24" pos:end="241:24">(</operator><name pos:start="241:25" pos:end="241:29">modrm</name> <operator pos:start="241:31" pos:end="241:32">&gt;&gt;</operator> <literal type="number" pos:start="241:34" pos:end="241:34">3</literal><operator pos:start="241:35" pos:end="241:35">)</operator> <operator pos:start="241:37" pos:end="241:37">&amp;</operator> <literal type="number" pos:start="241:39" pos:end="241:39">7</literal><operator pos:start="241:40" pos:end="241:40">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="243:17" pos:end="243:31"><expr pos:start="243:17" pos:end="243:30"><name pos:start="243:17" pos:end="243:18">rm</name> <operator pos:start="243:20" pos:end="243:20">=</operator> <name pos:start="243:22" pos:end="243:26">modrm</name> <operator pos:start="243:28" pos:end="243:28">&amp;</operator> <literal type="number" pos:start="243:30" pos:end="243:30">7</literal></expr>;</expr_stmt>

                <if_stmt pos:start="245:17" pos:end="259:17"><if pos:start="245:17" pos:end="251:17">if <condition pos:start="245:20" pos:end="245:29">(<expr pos:start="245:21" pos:end="245:28"><name pos:start="245:21" pos:end="245:23">mod</name> <operator pos:start="245:25" pos:end="245:26">!=</operator> <literal type="number" pos:start="245:28" pos:end="245:28">3</literal></expr>)</condition> <block pos:start="245:31" pos:end="251:17">{<block_content pos:start="247:21" pos:end="249:57">

                    <expr_stmt pos:start="247:21" pos:end="247:69"><expr pos:start="247:21" pos:end="247:68"><call pos:start="247:21" pos:end="247:68"><name pos:start="247:21" pos:end="247:33">gen_lea_modrm</name><argument_list pos:start="247:34" pos:end="247:68">(<argument pos:start="247:35" pos:end="247:35"><expr pos:start="247:35" pos:end="247:35"><name pos:start="247:35" pos:end="247:35">s</name></expr></argument>, <argument pos:start="247:38" pos:end="247:42"><expr pos:start="247:38" pos:end="247:42"><name pos:start="247:38" pos:end="247:42">modrm</name></expr></argument>, <argument pos:start="247:45" pos:end="247:53"><expr pos:start="247:45" pos:end="247:53"><operator pos:start="247:45" pos:end="247:45">&amp;</operator><name pos:start="247:46" pos:end="247:53">reg_addr</name></expr></argument>, <argument pos:start="247:56" pos:end="247:67"><expr pos:start="247:56" pos:end="247:67"><operator pos:start="247:56" pos:end="247:56">&amp;</operator><name pos:start="247:57" pos:end="247:67">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="249:21" pos:end="249:57"><expr pos:start="249:21" pos:end="249:56"><name pos:start="249:21" pos:end="249:54"><name pos:start="249:21" pos:end="249:35">gen_op_ld_T1_A0</name><index pos:start="249:36" pos:end="249:54">[<expr pos:start="249:37" pos:end="249:53"><name pos:start="249:37" pos:end="249:38">ot</name> <operator pos:start="249:40" pos:end="249:40">+</operator> <name pos:start="249:42" pos:end="249:53"><name pos:start="249:42" pos:end="249:42">s</name><operator pos:start="249:43" pos:end="249:44">-&gt;</operator><name pos:start="249:45" pos:end="249:53">mem_index</name></name></expr>]</index></name><operator pos:start="249:55" pos:end="249:55">(</operator><operator pos:start="249:56" pos:end="249:56">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="251:19" pos:end="255:17">else if <condition pos:start="251:27" pos:end="251:54">(<expr pos:start="251:28" pos:end="251:53"><name pos:start="251:28" pos:end="251:29">op</name> <operator pos:start="251:31" pos:end="251:32">==</operator> <name pos:start="251:34" pos:end="251:40">OP_XORL</name> <operator pos:start="251:42" pos:end="251:43">&amp;&amp;</operator> <name pos:start="251:45" pos:end="251:46">rm</name> <operator pos:start="251:48" pos:end="251:49">==</operator> <name pos:start="251:51" pos:end="251:53">reg</name></expr>)</condition> <block pos:start="251:56" pos:end="255:17">{<block_content pos:start="253:21" pos:end="253:34">

                    <goto pos:start="253:21" pos:end="253:34">goto <name pos:start="253:26" pos:end="253:33">xor_zero</name>;</goto>

                </block_content>}</block></if> <else pos:start="255:19" pos:end="259:17">else <block pos:start="255:24" pos:end="259:17">{<block_content pos:start="257:21" pos:end="257:51">

                    <expr_stmt pos:start="257:21" pos:end="257:51"><expr pos:start="257:21" pos:end="257:50"><name pos:start="257:21" pos:end="257:48"><name pos:start="257:21" pos:end="257:37">gen_op_mov_TN_reg</name><index pos:start="257:38" pos:end="257:41">[<expr pos:start="257:39" pos:end="257:40"><name pos:start="257:39" pos:end="257:40">ot</name></expr>]</index><index pos:start="257:42" pos:end="257:44">[<expr pos:start="257:43" pos:end="257:43"><literal type="number" pos:start="257:43" pos:end="257:43">1</literal></expr>]</index><index pos:start="257:45" pos:end="257:48">[<expr pos:start="257:46" pos:end="257:47"><name pos:start="257:46" pos:end="257:47">rm</name></expr>]</index></name><operator pos:start="257:49" pos:end="257:49">(</operator><operator pos:start="257:50" pos:end="257:50">)</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="261:17" pos:end="261:39"><expr pos:start="261:17" pos:end="261:38"><call pos:start="261:17" pos:end="261:38"><name pos:start="261:17" pos:end="261:22">gen_op</name><argument_list pos:start="261:23" pos:end="261:38">(<argument pos:start="261:24" pos:end="261:24"><expr pos:start="261:24" pos:end="261:24"><name pos:start="261:24" pos:end="261:24">s</name></expr></argument>, <argument pos:start="261:27" pos:end="261:28"><expr pos:start="261:27" pos:end="261:28"><name pos:start="261:27" pos:end="261:28">op</name></expr></argument>, <argument pos:start="261:31" pos:end="261:32"><expr pos:start="261:31" pos:end="261:32"><name pos:start="261:31" pos:end="261:32">ot</name></expr></argument>, <argument pos:start="261:35" pos:end="261:37"><expr pos:start="261:35" pos:end="261:37"><name pos:start="261:35" pos:end="261:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="263:17" pos:end="263:22">break;</break>

            <case pos:start="265:13" pos:end="265:19">case <expr pos:start="265:18" pos:end="265:18"><literal type="number" pos:start="265:18" pos:end="265:18">2</literal></expr>:</case> <comment type="block" pos:start="265:21" pos:end="265:34">/* OP A, Iv */</comment>

                <expr_stmt pos:start="267:17" pos:end="267:38"><expr pos:start="267:17" pos:end="267:37"><name pos:start="267:17" pos:end="267:19">val</name> <operator pos:start="267:21" pos:end="267:21">=</operator> <call pos:start="267:23" pos:end="267:37"><name pos:start="267:23" pos:end="267:30">insn_get</name><argument_list pos:start="267:31" pos:end="267:37">(<argument pos:start="267:32" pos:end="267:32"><expr pos:start="267:32" pos:end="267:32"><name pos:start="267:32" pos:end="267:32">s</name></expr></argument>, <argument pos:start="267:35" pos:end="267:36"><expr pos:start="267:35" pos:end="267:36"><name pos:start="267:35" pos:end="267:36">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="269:17" pos:end="269:39"><expr pos:start="269:17" pos:end="269:38"><call pos:start="269:17" pos:end="269:38"><name pos:start="269:17" pos:end="269:33">gen_op_movl_T1_im</name><argument_list pos:start="269:34" pos:end="269:38">(<argument pos:start="269:35" pos:end="269:37"><expr pos:start="269:35" pos:end="269:37"><name pos:start="269:35" pos:end="269:37">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="271:17" pos:end="271:42"><expr pos:start="271:17" pos:end="271:41"><call pos:start="271:17" pos:end="271:41"><name pos:start="271:17" pos:end="271:22">gen_op</name><argument_list pos:start="271:23" pos:end="271:41">(<argument pos:start="271:24" pos:end="271:24"><expr pos:start="271:24" pos:end="271:24"><name pos:start="271:24" pos:end="271:24">s</name></expr></argument>, <argument pos:start="271:27" pos:end="271:28"><expr pos:start="271:27" pos:end="271:28"><name pos:start="271:27" pos:end="271:28">op</name></expr></argument>, <argument pos:start="271:31" pos:end="271:32"><expr pos:start="271:31" pos:end="271:32"><name pos:start="271:31" pos:end="271:32">ot</name></expr></argument>, <argument pos:start="271:35" pos:end="271:40"><expr pos:start="271:35" pos:end="271:40"><name pos:start="271:35" pos:end="271:40">OR_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="273:17" pos:end="273:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block>

        <break pos:start="279:9" pos:end="279:14">break;</break>



    <case pos:start="283:5" pos:end="283:14">case <expr pos:start="283:10" pos:end="283:13"><literal type="number" pos:start="283:10" pos:end="283:13">0x80</literal></expr>:</case> <comment type="block" pos:start="283:16" pos:end="283:25">/* GRP1 */</comment>

    <case pos:start="285:5" pos:end="285:14">case <expr pos:start="285:10" pos:end="285:13"><literal type="number" pos:start="285:10" pos:end="285:13">0x81</literal></expr>:</case>

    <case pos:start="287:5" pos:end="287:14">case <expr pos:start="287:10" pos:end="287:13"><literal type="number" pos:start="287:10" pos:end="287:13">0x82</literal></expr>:</case>

    <case pos:start="289:5" pos:end="289:14">case <expr pos:start="289:10" pos:end="289:13"><literal type="number" pos:start="289:10" pos:end="289:13">0x83</literal></expr>:</case>

        <block pos:start="291:9" pos:end="357:9">{<block_content pos:start="293:13" pos:end="355:37">

            <decl_stmt pos:start="293:13" pos:end="293:20"><decl pos:start="293:13" pos:end="293:19"><type pos:start="293:13" pos:end="293:15"><name pos:start="293:13" pos:end="293:15">int</name></type> <name pos:start="293:17" pos:end="293:19">val</name></decl>;</decl_stmt>



            <if_stmt pos:start="297:13" pos:end="303:47"><if pos:start="297:13" pos:end="299:29">if <condition pos:start="297:16" pos:end="297:29">(<expr pos:start="297:17" pos:end="297:28"><operator pos:start="297:17" pos:end="297:17">(</operator><name pos:start="297:18" pos:end="297:18">b</name> <operator pos:start="297:20" pos:end="297:20">&amp;</operator> <literal type="number" pos:start="297:22" pos:end="297:22">1</literal><operator pos:start="297:23" pos:end="297:23">)</operator> <operator pos:start="297:25" pos:end="297:26">==</operator> <literal type="number" pos:start="297:28" pos:end="297:28">0</literal></expr>)</condition><block type="pseudo" pos:start="299:17" pos:end="299:29"><block_content pos:start="299:17" pos:end="299:29">

                <expr_stmt pos:start="299:17" pos:end="299:29"><expr pos:start="299:17" pos:end="299:28"><name pos:start="299:17" pos:end="299:18">ot</name> <operator pos:start="299:20" pos:end="299:20">=</operator> <name pos:start="299:22" pos:end="299:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="301:13" pos:end="303:47">else<block type="pseudo" pos:start="303:17" pos:end="303:47"><block_content pos:start="303:17" pos:end="303:47">

                <expr_stmt pos:start="303:17" pos:end="303:47"><expr pos:start="303:17" pos:end="303:46"><name pos:start="303:17" pos:end="303:18">ot</name> <operator pos:start="303:20" pos:end="303:20">=</operator> <ternary pos:start="303:22" pos:end="303:46"><condition pos:start="303:22" pos:end="303:28"><expr pos:start="303:22" pos:end="303:26"><name pos:start="303:22" pos:end="303:26">dflag</name></expr> ?</condition><then pos:start="303:30" pos:end="303:36"> <expr pos:start="303:30" pos:end="303:36"><name pos:start="303:30" pos:end="303:36">OT_LONG</name></expr> </then><else pos:start="303:38" pos:end="303:46">: <expr pos:start="303:40" pos:end="303:46"><name pos:start="303:40" pos:end="303:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

            

            <expr_stmt pos:start="307:13" pos:end="307:39"><expr pos:start="307:13" pos:end="307:38"><name pos:start="307:13" pos:end="307:17">modrm</name> <operator pos:start="307:19" pos:end="307:19">=</operator> <call pos:start="307:21" pos:end="307:38"><name pos:start="307:21" pos:end="307:29">ldub_code</name><argument_list pos:start="307:30" pos:end="307:38">(<argument pos:start="307:31" pos:end="307:37"><expr pos:start="307:31" pos:end="307:37"><name pos:start="307:31" pos:end="307:35"><name pos:start="307:31" pos:end="307:31">s</name><operator pos:start="307:32" pos:end="307:33">-&gt;</operator><name pos:start="307:34" pos:end="307:35">pc</name></name><operator pos:start="307:36" pos:end="307:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:35"><expr pos:start="309:13" pos:end="309:34"><name pos:start="309:13" pos:end="309:15">mod</name> <operator pos:start="309:17" pos:end="309:17">=</operator> <operator pos:start="309:19" pos:end="309:19">(</operator><name pos:start="309:20" pos:end="309:24">modrm</name> <operator pos:start="309:26" pos:end="309:27">&gt;&gt;</operator> <literal type="number" pos:start="309:29" pos:end="309:29">6</literal><operator pos:start="309:30" pos:end="309:30">)</operator> <operator pos:start="309:32" pos:end="309:32">&amp;</operator> <literal type="number" pos:start="309:34" pos:end="309:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:27"><expr pos:start="311:13" pos:end="311:26"><name pos:start="311:13" pos:end="311:14">rm</name> <operator pos:start="311:16" pos:end="311:16">=</operator> <name pos:start="311:18" pos:end="311:22">modrm</name> <operator pos:start="311:24" pos:end="311:24">&amp;</operator> <literal type="number" pos:start="311:26" pos:end="311:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="313:13" pos:end="313:34"><expr pos:start="313:13" pos:end="313:33"><name pos:start="313:13" pos:end="313:14">op</name> <operator pos:start="313:16" pos:end="313:16">=</operator> <operator pos:start="313:18" pos:end="313:18">(</operator><name pos:start="313:19" pos:end="313:23">modrm</name> <operator pos:start="313:25" pos:end="313:26">&gt;&gt;</operator> <literal type="number" pos:start="313:28" pos:end="313:28">3</literal><operator pos:start="313:29" pos:end="313:29">)</operator> <operator pos:start="313:31" pos:end="313:31">&amp;</operator> <literal type="number" pos:start="313:33" pos:end="313:33">7</literal></expr>;</expr_stmt>

            

            <if_stmt pos:start="317:13" pos:end="327:13"><if pos:start="317:13" pos:end="323:13">if <condition pos:start="317:16" pos:end="317:25">(<expr pos:start="317:17" pos:end="317:24"><name pos:start="317:17" pos:end="317:19">mod</name> <operator pos:start="317:21" pos:end="317:22">!=</operator> <literal type="number" pos:start="317:24" pos:end="317:24">3</literal></expr>)</condition> <block pos:start="317:27" pos:end="323:13">{<block_content pos:start="319:17" pos:end="321:32">

                <expr_stmt pos:start="319:17" pos:end="319:65"><expr pos:start="319:17" pos:end="319:64"><call pos:start="319:17" pos:end="319:64"><name pos:start="319:17" pos:end="319:29">gen_lea_modrm</name><argument_list pos:start="319:30" pos:end="319:64">(<argument pos:start="319:31" pos:end="319:31"><expr pos:start="319:31" pos:end="319:31"><name pos:start="319:31" pos:end="319:31">s</name></expr></argument>, <argument pos:start="319:34" pos:end="319:38"><expr pos:start="319:34" pos:end="319:38"><name pos:start="319:34" pos:end="319:38">modrm</name></expr></argument>, <argument pos:start="319:41" pos:end="319:49"><expr pos:start="319:41" pos:end="319:49"><operator pos:start="319:41" pos:end="319:41">&amp;</operator><name pos:start="319:42" pos:end="319:49">reg_addr</name></expr></argument>, <argument pos:start="319:52" pos:end="319:63"><expr pos:start="319:52" pos:end="319:63"><operator pos:start="319:52" pos:end="319:52">&amp;</operator><name pos:start="319:53" pos:end="319:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="321:17" pos:end="321:32"><expr pos:start="321:17" pos:end="321:31"><name pos:start="321:17" pos:end="321:21">opreg</name> <operator pos:start="321:23" pos:end="321:23">=</operator> <name pos:start="321:25" pos:end="321:31">OR_TMP0</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="323:15" pos:end="327:13">else <block pos:start="323:20" pos:end="327:13">{<block_content pos:start="325:17" pos:end="325:36">

                <expr_stmt pos:start="325:17" pos:end="325:36"><expr pos:start="325:17" pos:end="325:35"><name pos:start="325:17" pos:end="325:21">opreg</name> <operator pos:start="325:23" pos:end="325:23">=</operator> <name pos:start="325:25" pos:end="325:26">rm</name> <operator pos:start="325:28" pos:end="325:28">+</operator> <name pos:start="325:30" pos:end="325:35">OR_EAX</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <switch pos:start="331:13" pos:end="351:13">switch<condition pos:start="331:19" pos:end="331:21">(<expr pos:start="331:20" pos:end="331:20"><name pos:start="331:20" pos:end="331:20">b</name></expr>)</condition> <block pos:start="331:23" pos:end="351:13">{<block_content pos:start="333:13" pos:end="349:22">

            <default pos:start="333:13" pos:end="333:20">default:</default>

            <case pos:start="335:13" pos:end="335:22">case <expr pos:start="335:18" pos:end="335:21"><literal type="number" pos:start="335:18" pos:end="335:21">0x80</literal></expr>:</case>

            <case pos:start="337:13" pos:end="337:22">case <expr pos:start="337:18" pos:end="337:21"><literal type="number" pos:start="337:18" pos:end="337:21">0x81</literal></expr>:</case>

            <case pos:start="339:13" pos:end="339:22">case <expr pos:start="339:18" pos:end="339:21"><literal type="number" pos:start="339:18" pos:end="339:21">0x82</literal></expr>:</case>

                <expr_stmt pos:start="341:17" pos:end="341:38"><expr pos:start="341:17" pos:end="341:37"><name pos:start="341:17" pos:end="341:19">val</name> <operator pos:start="341:21" pos:end="341:21">=</operator> <call pos:start="341:23" pos:end="341:37"><name pos:start="341:23" pos:end="341:30">insn_get</name><argument_list pos:start="341:31" pos:end="341:37">(<argument pos:start="341:32" pos:end="341:32"><expr pos:start="341:32" pos:end="341:32"><name pos:start="341:32" pos:end="341:32">s</name></expr></argument>, <argument pos:start="341:35" pos:end="341:36"><expr pos:start="341:35" pos:end="341:36"><name pos:start="341:35" pos:end="341:36">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="343:17" pos:end="343:22">break;</break>

            <case pos:start="345:13" pos:end="345:22">case <expr pos:start="345:18" pos:end="345:21"><literal type="number" pos:start="345:18" pos:end="345:21">0x83</literal></expr>:</case>

                <expr_stmt pos:start="347:17" pos:end="347:51"><expr pos:start="347:17" pos:end="347:50"><name pos:start="347:17" pos:end="347:19">val</name> <operator pos:start="347:21" pos:end="347:21">=</operator> <operator pos:start="347:23" pos:end="347:23">(</operator><name pos:start="347:24" pos:end="347:29">int8_t</name><operator pos:start="347:30" pos:end="347:30">)</operator><call pos:start="347:31" pos:end="347:50"><name pos:start="347:31" pos:end="347:38">insn_get</name><argument_list pos:start="347:39" pos:end="347:50">(<argument pos:start="347:40" pos:end="347:40"><expr pos:start="347:40" pos:end="347:40"><name pos:start="347:40" pos:end="347:40">s</name></expr></argument>, <argument pos:start="347:43" pos:end="347:49"><expr pos:start="347:43" pos:end="347:49"><name pos:start="347:43" pos:end="347:49">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="349:17" pos:end="349:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="353:13" pos:end="353:35"><expr pos:start="353:13" pos:end="353:34"><call pos:start="353:13" pos:end="353:34"><name pos:start="353:13" pos:end="353:29">gen_op_movl_T1_im</name><argument_list pos:start="353:30" pos:end="353:34">(<argument pos:start="353:31" pos:end="353:33"><expr pos:start="353:31" pos:end="353:33"><name pos:start="353:31" pos:end="353:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="355:13" pos:end="355:37"><expr pos:start="355:13" pos:end="355:36"><call pos:start="355:13" pos:end="355:36"><name pos:start="355:13" pos:end="355:18">gen_op</name><argument_list pos:start="355:19" pos:end="355:36">(<argument pos:start="355:20" pos:end="355:20"><expr pos:start="355:20" pos:end="355:20"><name pos:start="355:20" pos:end="355:20">s</name></expr></argument>, <argument pos:start="355:23" pos:end="355:24"><expr pos:start="355:23" pos:end="355:24"><name pos:start="355:23" pos:end="355:24">op</name></expr></argument>, <argument pos:start="355:27" pos:end="355:28"><expr pos:start="355:27" pos:end="355:28"><name pos:start="355:27" pos:end="355:28">ot</name></expr></argument>, <argument pos:start="355:31" pos:end="355:35"><expr pos:start="355:31" pos:end="355:35"><name pos:start="355:31" pos:end="355:35">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="359:9" pos:end="359:14">break;</break>



        <comment type="block" format="doxygen" pos:start="363:9" pos:end="363:36">/**************************/</comment>

        <comment type="block" pos:start="365:9" pos:end="365:44">/* inc, dec, and other misc arith */</comment>

    <case pos:start="367:5" pos:end="367:23">case <expr pos:start="367:10" pos:end="367:22"><literal type="number" pos:start="367:10" pos:end="367:13">0x40</literal> <operator pos:start="367:15" pos:end="367:17">...</operator> <literal type="number" pos:start="367:19" pos:end="367:22">0x47</literal></expr>:</case> <comment type="block" pos:start="367:25" pos:end="367:36">/* inc Gv */</comment>

        <expr_stmt pos:start="369:9" pos:end="369:39"><expr pos:start="369:9" pos:end="369:38"><name pos:start="369:9" pos:end="369:10">ot</name> <operator pos:start="369:12" pos:end="369:12">=</operator> <ternary pos:start="369:14" pos:end="369:38"><condition pos:start="369:14" pos:end="369:20"><expr pos:start="369:14" pos:end="369:18"><name pos:start="369:14" pos:end="369:18">dflag</name></expr> ?</condition><then pos:start="369:22" pos:end="369:28"> <expr pos:start="369:22" pos:end="369:28"><name pos:start="369:22" pos:end="369:28">OT_LONG</name></expr> </then><else pos:start="369:30" pos:end="369:38">: <expr pos:start="369:32" pos:end="369:38"><name pos:start="369:32" pos:end="369:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="371:9" pos:end="371:44"><expr pos:start="371:9" pos:end="371:43"><call pos:start="371:9" pos:end="371:43"><name pos:start="371:9" pos:end="371:15">gen_inc</name><argument_list pos:start="371:16" pos:end="371:43">(<argument pos:start="371:17" pos:end="371:17"><expr pos:start="371:17" pos:end="371:17"><name pos:start="371:17" pos:end="371:17">s</name></expr></argument>, <argument pos:start="371:20" pos:end="371:21"><expr pos:start="371:20" pos:end="371:21"><name pos:start="371:20" pos:end="371:21">ot</name></expr></argument>, <argument pos:start="371:24" pos:end="371:39"><expr pos:start="371:24" pos:end="371:39"><name pos:start="371:24" pos:end="371:29">OR_EAX</name> <operator pos:start="371:31" pos:end="371:31">+</operator> <operator pos:start="371:33" pos:end="371:33">(</operator><name pos:start="371:34" pos:end="371:34">b</name> <operator pos:start="371:36" pos:end="371:36">&amp;</operator> <literal type="number" pos:start="371:38" pos:end="371:38">7</literal><operator pos:start="371:39" pos:end="371:39">)</operator></expr></argument>, <argument pos:start="371:42" pos:end="371:42"><expr pos:start="371:42" pos:end="371:42"><literal type="number" pos:start="371:42" pos:end="371:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="373:9" pos:end="373:14">break;</break>

    <case pos:start="375:5" pos:end="375:23">case <expr pos:start="375:10" pos:end="375:22"><literal type="number" pos:start="375:10" pos:end="375:13">0x48</literal> <operator pos:start="375:15" pos:end="375:17">...</operator> <literal type="number" pos:start="375:19" pos:end="375:22">0x4f</literal></expr>:</case> <comment type="block" pos:start="375:25" pos:end="375:36">/* dec Gv */</comment>

        <expr_stmt pos:start="377:9" pos:end="377:39"><expr pos:start="377:9" pos:end="377:38"><name pos:start="377:9" pos:end="377:10">ot</name> <operator pos:start="377:12" pos:end="377:12">=</operator> <ternary pos:start="377:14" pos:end="377:38"><condition pos:start="377:14" pos:end="377:20"><expr pos:start="377:14" pos:end="377:18"><name pos:start="377:14" pos:end="377:18">dflag</name></expr> ?</condition><then pos:start="377:22" pos:end="377:28"> <expr pos:start="377:22" pos:end="377:28"><name pos:start="377:22" pos:end="377:28">OT_LONG</name></expr> </then><else pos:start="377:30" pos:end="377:38">: <expr pos:start="377:32" pos:end="377:38"><name pos:start="377:32" pos:end="377:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="379:9" pos:end="379:45"><expr pos:start="379:9" pos:end="379:44"><call pos:start="379:9" pos:end="379:44"><name pos:start="379:9" pos:end="379:15">gen_inc</name><argument_list pos:start="379:16" pos:end="379:44">(<argument pos:start="379:17" pos:end="379:17"><expr pos:start="379:17" pos:end="379:17"><name pos:start="379:17" pos:end="379:17">s</name></expr></argument>, <argument pos:start="379:20" pos:end="379:21"><expr pos:start="379:20" pos:end="379:21"><name pos:start="379:20" pos:end="379:21">ot</name></expr></argument>, <argument pos:start="379:24" pos:end="379:39"><expr pos:start="379:24" pos:end="379:39"><name pos:start="379:24" pos:end="379:29">OR_EAX</name> <operator pos:start="379:31" pos:end="379:31">+</operator> <operator pos:start="379:33" pos:end="379:33">(</operator><name pos:start="379:34" pos:end="379:34">b</name> <operator pos:start="379:36" pos:end="379:36">&amp;</operator> <literal type="number" pos:start="379:38" pos:end="379:38">7</literal><operator pos:start="379:39" pos:end="379:39">)</operator></expr></argument>, <argument pos:start="379:42" pos:end="379:43"><expr pos:start="379:42" pos:end="379:43"><operator pos:start="379:42" pos:end="379:42">-</operator><literal type="number" pos:start="379:43" pos:end="379:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="381:9" pos:end="381:14">break;</break>

    <case pos:start="383:5" pos:end="383:14">case <expr pos:start="383:10" pos:end="383:13"><literal type="number" pos:start="383:10" pos:end="383:13">0xf6</literal></expr>:</case> <comment type="block" pos:start="383:16" pos:end="383:25">/* GRP3 */</comment>

    <case pos:start="385:5" pos:end="385:14">case <expr pos:start="385:10" pos:end="385:13"><literal type="number" pos:start="385:10" pos:end="385:13">0xf7</literal></expr>:</case>

        <if_stmt pos:start="387:9" pos:end="393:43"><if pos:start="387:9" pos:end="389:25">if <condition pos:start="387:12" pos:end="387:25">(<expr pos:start="387:13" pos:end="387:24"><operator pos:start="387:13" pos:end="387:13">(</operator><name pos:start="387:14" pos:end="387:14">b</name> <operator pos:start="387:16" pos:end="387:16">&amp;</operator> <literal type="number" pos:start="387:18" pos:end="387:18">1</literal><operator pos:start="387:19" pos:end="387:19">)</operator> <operator pos:start="387:21" pos:end="387:22">==</operator> <literal type="number" pos:start="387:24" pos:end="387:24">0</literal></expr>)</condition><block type="pseudo" pos:start="389:13" pos:end="389:25"><block_content pos:start="389:13" pos:end="389:25">

            <expr_stmt pos:start="389:13" pos:end="389:25"><expr pos:start="389:13" pos:end="389:24"><name pos:start="389:13" pos:end="389:14">ot</name> <operator pos:start="389:16" pos:end="389:16">=</operator> <name pos:start="389:18" pos:end="389:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="391:9" pos:end="393:43">else<block type="pseudo" pos:start="393:13" pos:end="393:43"><block_content pos:start="393:13" pos:end="393:43">

            <expr_stmt pos:start="393:13" pos:end="393:43"><expr pos:start="393:13" pos:end="393:42"><name pos:start="393:13" pos:end="393:14">ot</name> <operator pos:start="393:16" pos:end="393:16">=</operator> <ternary pos:start="393:18" pos:end="393:42"><condition pos:start="393:18" pos:end="393:24"><expr pos:start="393:18" pos:end="393:22"><name pos:start="393:18" pos:end="393:22">dflag</name></expr> ?</condition><then pos:start="393:26" pos:end="393:32"> <expr pos:start="393:26" pos:end="393:32"><name pos:start="393:26" pos:end="393:32">OT_LONG</name></expr> </then><else pos:start="393:34" pos:end="393:42">: <expr pos:start="393:36" pos:end="393:42"><name pos:start="393:36" pos:end="393:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="397:9" pos:end="397:35"><expr pos:start="397:9" pos:end="397:34"><name pos:start="397:9" pos:end="397:13">modrm</name> <operator pos:start="397:15" pos:end="397:15">=</operator> <call pos:start="397:17" pos:end="397:34"><name pos:start="397:17" pos:end="397:25">ldub_code</name><argument_list pos:start="397:26" pos:end="397:34">(<argument pos:start="397:27" pos:end="397:33"><expr pos:start="397:27" pos:end="397:33"><name pos:start="397:27" pos:end="397:31"><name pos:start="397:27" pos:end="397:27">s</name><operator pos:start="397:28" pos:end="397:29">-&gt;</operator><name pos:start="397:30" pos:end="397:31">pc</name></name><operator pos:start="397:32" pos:end="397:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="399:9" pos:end="399:31"><expr pos:start="399:9" pos:end="399:30"><name pos:start="399:9" pos:end="399:11">mod</name> <operator pos:start="399:13" pos:end="399:13">=</operator> <operator pos:start="399:15" pos:end="399:15">(</operator><name pos:start="399:16" pos:end="399:20">modrm</name> <operator pos:start="399:22" pos:end="399:23">&gt;&gt;</operator> <literal type="number" pos:start="399:25" pos:end="399:25">6</literal><operator pos:start="399:26" pos:end="399:26">)</operator> <operator pos:start="399:28" pos:end="399:28">&amp;</operator> <literal type="number" pos:start="399:30" pos:end="399:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="401:9" pos:end="401:23"><expr pos:start="401:9" pos:end="401:22"><name pos:start="401:9" pos:end="401:10">rm</name> <operator pos:start="401:12" pos:end="401:12">=</operator> <name pos:start="401:14" pos:end="401:18">modrm</name> <operator pos:start="401:20" pos:end="401:20">&amp;</operator> <literal type="number" pos:start="401:22" pos:end="401:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="403:9" pos:end="403:30"><expr pos:start="403:9" pos:end="403:29"><name pos:start="403:9" pos:end="403:10">op</name> <operator pos:start="403:12" pos:end="403:12">=</operator> <operator pos:start="403:14" pos:end="403:14">(</operator><name pos:start="403:15" pos:end="403:19">modrm</name> <operator pos:start="403:21" pos:end="403:22">&gt;&gt;</operator> <literal type="number" pos:start="403:24" pos:end="403:24">3</literal><operator pos:start="403:25" pos:end="403:25">)</operator> <operator pos:start="403:27" pos:end="403:27">&amp;</operator> <literal type="number" pos:start="403:29" pos:end="403:29">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="405:9" pos:end="415:9"><if pos:start="405:9" pos:end="411:9">if <condition pos:start="405:12" pos:end="405:21">(<expr pos:start="405:13" pos:end="405:20"><name pos:start="405:13" pos:end="405:15">mod</name> <operator pos:start="405:17" pos:end="405:18">!=</operator> <literal type="number" pos:start="405:20" pos:end="405:20">3</literal></expr>)</condition> <block pos:start="405:23" pos:end="411:9">{<block_content pos:start="407:13" pos:end="409:49">

            <expr_stmt pos:start="407:13" pos:end="407:61"><expr pos:start="407:13" pos:end="407:60"><call pos:start="407:13" pos:end="407:60"><name pos:start="407:13" pos:end="407:25">gen_lea_modrm</name><argument_list pos:start="407:26" pos:end="407:60">(<argument pos:start="407:27" pos:end="407:27"><expr pos:start="407:27" pos:end="407:27"><name pos:start="407:27" pos:end="407:27">s</name></expr></argument>, <argument pos:start="407:30" pos:end="407:34"><expr pos:start="407:30" pos:end="407:34"><name pos:start="407:30" pos:end="407:34">modrm</name></expr></argument>, <argument pos:start="407:37" pos:end="407:45"><expr pos:start="407:37" pos:end="407:45"><operator pos:start="407:37" pos:end="407:37">&amp;</operator><name pos:start="407:38" pos:end="407:45">reg_addr</name></expr></argument>, <argument pos:start="407:48" pos:end="407:59"><expr pos:start="407:48" pos:end="407:59"><operator pos:start="407:48" pos:end="407:48">&amp;</operator><name pos:start="407:49" pos:end="407:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="409:13" pos:end="409:49"><expr pos:start="409:13" pos:end="409:48"><name pos:start="409:13" pos:end="409:46"><name pos:start="409:13" pos:end="409:27">gen_op_ld_T0_A0</name><index pos:start="409:28" pos:end="409:46">[<expr pos:start="409:29" pos:end="409:45"><name pos:start="409:29" pos:end="409:30">ot</name> <operator pos:start="409:32" pos:end="409:32">+</operator> <name pos:start="409:34" pos:end="409:45"><name pos:start="409:34" pos:end="409:34">s</name><operator pos:start="409:35" pos:end="409:36">-&gt;</operator><name pos:start="409:37" pos:end="409:45">mem_index</name></name></expr>]</index></name><operator pos:start="409:47" pos:end="409:47">(</operator><operator pos:start="409:48" pos:end="409:48">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="411:11" pos:end="415:9">else <block pos:start="411:16" pos:end="415:9">{<block_content pos:start="413:13" pos:end="413:43">

            <expr_stmt pos:start="413:13" pos:end="413:43"><expr pos:start="413:13" pos:end="413:42"><name pos:start="413:13" pos:end="413:40"><name pos:start="413:13" pos:end="413:29">gen_op_mov_TN_reg</name><index pos:start="413:30" pos:end="413:33">[<expr pos:start="413:31" pos:end="413:32"><name pos:start="413:31" pos:end="413:32">ot</name></expr>]</index><index pos:start="413:34" pos:end="413:36">[<expr pos:start="413:35" pos:end="413:35"><literal type="number" pos:start="413:35" pos:end="413:35">0</literal></expr>]</index><index pos:start="413:37" pos:end="413:40">[<expr pos:start="413:38" pos:end="413:39"><name pos:start="413:38" pos:end="413:39">rm</name></expr>]</index></name><operator pos:start="413:41" pos:end="413:41">(</operator><operator pos:start="413:42" pos:end="413:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <switch pos:start="419:9" pos:end="597:9">switch<condition pos:start="419:15" pos:end="419:18">(<expr pos:start="419:16" pos:end="419:17"><name pos:start="419:16" pos:end="419:17">op</name></expr>)</condition> <block pos:start="419:20" pos:end="597:9">{<block_content pos:start="421:9" pos:end="595:28">

        <case pos:start="421:9" pos:end="421:15">case <expr pos:start="421:14" pos:end="421:14"><literal type="number" pos:start="421:14" pos:end="421:14">0</literal></expr>:</case> <comment type="block" pos:start="421:17" pos:end="421:26">/* test */</comment>

            <expr_stmt pos:start="423:13" pos:end="423:34"><expr pos:start="423:13" pos:end="423:33"><name pos:start="423:13" pos:end="423:15">val</name> <operator pos:start="423:17" pos:end="423:17">=</operator> <call pos:start="423:19" pos:end="423:33"><name pos:start="423:19" pos:end="423:26">insn_get</name><argument_list pos:start="423:27" pos:end="423:33">(<argument pos:start="423:28" pos:end="423:28"><expr pos:start="423:28" pos:end="423:28"><name pos:start="423:28" pos:end="423:28">s</name></expr></argument>, <argument pos:start="423:31" pos:end="423:32"><expr pos:start="423:31" pos:end="423:32"><name pos:start="423:31" pos:end="423:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="425:13" pos:end="425:35"><expr pos:start="425:13" pos:end="425:34"><call pos:start="425:13" pos:end="425:34"><name pos:start="425:13" pos:end="425:29">gen_op_movl_T1_im</name><argument_list pos:start="425:30" pos:end="425:34">(<argument pos:start="425:31" pos:end="425:33"><expr pos:start="425:31" pos:end="425:33"><name pos:start="425:31" pos:end="425:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="427:13" pos:end="427:36"><expr pos:start="427:13" pos:end="427:35"><call pos:start="427:13" pos:end="427:35"><name pos:start="427:13" pos:end="427:33">gen_op_testl_T0_T1_cc</name><argument_list pos:start="427:34" pos:end="427:35">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="429:13" pos:end="429:41"><expr pos:start="429:13" pos:end="429:40"><name pos:start="429:13" pos:end="429:20"><name pos:start="429:13" pos:end="429:13">s</name><operator pos:start="429:14" pos:end="429:15">-&gt;</operator><name pos:start="429:16" pos:end="429:20">cc_op</name></name> <operator pos:start="429:22" pos:end="429:22">=</operator> <name pos:start="429:24" pos:end="429:35">CC_OP_LOGICB</name> <operator pos:start="429:37" pos:end="429:37">+</operator> <name pos:start="429:39" pos:end="429:40">ot</name></expr>;</expr_stmt>

            <break pos:start="431:13" pos:end="431:18">break;</break>

        <case pos:start="433:9" pos:end="433:15">case <expr pos:start="433:14" pos:end="433:14"><literal type="number" pos:start="433:14" pos:end="433:14">2</literal></expr>:</case> <comment type="block" pos:start="433:17" pos:end="433:25">/* not */</comment>

            <expr_stmt pos:start="435:13" pos:end="435:29"><expr pos:start="435:13" pos:end="435:28"><call pos:start="435:13" pos:end="435:28"><name pos:start="435:13" pos:end="435:26">gen_op_notl_T0</name><argument_list pos:start="435:27" pos:end="435:28">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="437:13" pos:end="445:13"><if pos:start="437:13" pos:end="441:13">if <condition pos:start="437:16" pos:end="437:25">(<expr pos:start="437:17" pos:end="437:24"><name pos:start="437:17" pos:end="437:19">mod</name> <operator pos:start="437:21" pos:end="437:22">!=</operator> <literal type="number" pos:start="437:24" pos:end="437:24">3</literal></expr>)</condition> <block pos:start="437:27" pos:end="441:13">{<block_content pos:start="439:17" pos:end="439:53">

                <expr_stmt pos:start="439:17" pos:end="439:53"><expr pos:start="439:17" pos:end="439:52"><name pos:start="439:17" pos:end="439:50"><name pos:start="439:17" pos:end="439:31">gen_op_st_T0_A0</name><index pos:start="439:32" pos:end="439:50">[<expr pos:start="439:33" pos:end="439:49"><name pos:start="439:33" pos:end="439:34">ot</name> <operator pos:start="439:36" pos:end="439:36">+</operator> <name pos:start="439:38" pos:end="439:49"><name pos:start="439:38" pos:end="439:38">s</name><operator pos:start="439:39" pos:end="439:40">-&gt;</operator><name pos:start="439:41" pos:end="439:49">mem_index</name></name></expr>]</index></name><operator pos:start="439:51" pos:end="439:51">(</operator><operator pos:start="439:52" pos:end="439:52">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="441:15" pos:end="445:13">else <block pos:start="441:20" pos:end="445:13">{<block_content pos:start="443:17" pos:end="443:44">

                <expr_stmt pos:start="443:17" pos:end="443:44"><expr pos:start="443:17" pos:end="443:43"><name pos:start="443:17" pos:end="443:41"><name pos:start="443:17" pos:end="443:33">gen_op_mov_reg_T0</name><index pos:start="443:34" pos:end="443:37">[<expr pos:start="443:35" pos:end="443:36"><name pos:start="443:35" pos:end="443:36">ot</name></expr>]</index><index pos:start="443:38" pos:end="443:41">[<expr pos:start="443:39" pos:end="443:40"><name pos:start="443:39" pos:end="443:40">rm</name></expr>]</index></name><operator pos:start="443:42" pos:end="443:42">(</operator><operator pos:start="443:43" pos:end="443:43">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="447:13" pos:end="447:18">break;</break>

        <case pos:start="449:9" pos:end="449:15">case <expr pos:start="449:14" pos:end="449:14"><literal type="number" pos:start="449:14" pos:end="449:14">3</literal></expr>:</case> <comment type="block" pos:start="449:17" pos:end="449:25">/* neg */</comment>

            <expr_stmt pos:start="451:13" pos:end="451:29"><expr pos:start="451:13" pos:end="451:28"><call pos:start="451:13" pos:end="451:28"><name pos:start="451:13" pos:end="451:26">gen_op_negl_T0</name><argument_list pos:start="451:27" pos:end="451:28">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="453:13" pos:end="461:13"><if pos:start="453:13" pos:end="457:13">if <condition pos:start="453:16" pos:end="453:25">(<expr pos:start="453:17" pos:end="453:24"><name pos:start="453:17" pos:end="453:19">mod</name> <operator pos:start="453:21" pos:end="453:22">!=</operator> <literal type="number" pos:start="453:24" pos:end="453:24">3</literal></expr>)</condition> <block pos:start="453:27" pos:end="457:13">{<block_content pos:start="455:17" pos:end="455:53">

                <expr_stmt pos:start="455:17" pos:end="455:53"><expr pos:start="455:17" pos:end="455:52"><name pos:start="455:17" pos:end="455:50"><name pos:start="455:17" pos:end="455:31">gen_op_st_T0_A0</name><index pos:start="455:32" pos:end="455:50">[<expr pos:start="455:33" pos:end="455:49"><name pos:start="455:33" pos:end="455:34">ot</name> <operator pos:start="455:36" pos:end="455:36">+</operator> <name pos:start="455:38" pos:end="455:49"><name pos:start="455:38" pos:end="455:38">s</name><operator pos:start="455:39" pos:end="455:40">-&gt;</operator><name pos:start="455:41" pos:end="455:49">mem_index</name></name></expr>]</index></name><operator pos:start="455:51" pos:end="455:51">(</operator><operator pos:start="455:52" pos:end="455:52">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="457:15" pos:end="461:13">else <block pos:start="457:20" pos:end="461:13">{<block_content pos:start="459:17" pos:end="459:44">

                <expr_stmt pos:start="459:17" pos:end="459:44"><expr pos:start="459:17" pos:end="459:43"><name pos:start="459:17" pos:end="459:41"><name pos:start="459:17" pos:end="459:33">gen_op_mov_reg_T0</name><index pos:start="459:34" pos:end="459:37">[<expr pos:start="459:35" pos:end="459:36"><name pos:start="459:35" pos:end="459:36">ot</name></expr>]</index><index pos:start="459:38" pos:end="459:41">[<expr pos:start="459:39" pos:end="459:40"><name pos:start="459:39" pos:end="459:40">rm</name></expr>]</index></name><operator pos:start="459:42" pos:end="459:42">(</operator><operator pos:start="459:43" pos:end="459:43">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="463:13" pos:end="463:35"><expr pos:start="463:13" pos:end="463:34"><call pos:start="463:13" pos:end="463:34"><name pos:start="463:13" pos:end="463:32">gen_op_update_neg_cc</name><argument_list pos:start="463:33" pos:end="463:34">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="465:13" pos:end="465:39"><expr pos:start="465:13" pos:end="465:38"><name pos:start="465:13" pos:end="465:20"><name pos:start="465:13" pos:end="465:13">s</name><operator pos:start="465:14" pos:end="465:15">-&gt;</operator><name pos:start="465:16" pos:end="465:20">cc_op</name></name> <operator pos:start="465:22" pos:end="465:22">=</operator> <name pos:start="465:24" pos:end="465:33">CC_OP_SUBB</name> <operator pos:start="465:35" pos:end="465:35">+</operator> <name pos:start="465:37" pos:end="465:38">ot</name></expr>;</expr_stmt>

            <break pos:start="467:13" pos:end="467:18">break;</break>

        <case pos:start="469:9" pos:end="469:15">case <expr pos:start="469:14" pos:end="469:14"><literal type="number" pos:start="469:14" pos:end="469:14">4</literal></expr>:</case> <comment type="block" pos:start="469:17" pos:end="469:25">/* mul */</comment>

            <switch pos:start="471:13" pos:end="499:13">switch<condition pos:start="471:19" pos:end="471:22">(<expr pos:start="471:20" pos:end="471:21"><name pos:start="471:20" pos:end="471:21">ot</name></expr>)</condition> <block pos:start="471:24" pos:end="499:13">{<block_content pos:start="473:13" pos:end="497:22">

            <case pos:start="473:13" pos:end="473:25">case <expr pos:start="473:18" pos:end="473:24"><name pos:start="473:18" pos:end="473:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="475:17" pos:end="475:36"><expr pos:start="475:17" pos:end="475:35"><call pos:start="475:17" pos:end="475:35"><name pos:start="475:17" pos:end="475:33">gen_op_mulb_AL_T0</name><argument_list pos:start="475:34" pos:end="475:35">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="477:17" pos:end="477:38"><expr pos:start="477:17" pos:end="477:37"><name pos:start="477:17" pos:end="477:24"><name pos:start="477:17" pos:end="477:17">s</name><operator pos:start="477:18" pos:end="477:19">-&gt;</operator><name pos:start="477:20" pos:end="477:24">cc_op</name></name> <operator pos:start="477:26" pos:end="477:26">=</operator> <name pos:start="477:28" pos:end="477:37">CC_OP_MULB</name></expr>;</expr_stmt>

                <break pos:start="479:17" pos:end="479:22">break;</break>

            <case pos:start="481:13" pos:end="481:25">case <expr pos:start="481:18" pos:end="481:24"><name pos:start="481:18" pos:end="481:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="483:17" pos:end="483:36"><expr pos:start="483:17" pos:end="483:35"><call pos:start="483:17" pos:end="483:35"><name pos:start="483:17" pos:end="483:33">gen_op_mulw_AX_T0</name><argument_list pos:start="483:34" pos:end="483:35">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="485:17" pos:end="485:38"><expr pos:start="485:17" pos:end="485:37"><name pos:start="485:17" pos:end="485:24"><name pos:start="485:17" pos:end="485:17">s</name><operator pos:start="485:18" pos:end="485:19">-&gt;</operator><name pos:start="485:20" pos:end="485:24">cc_op</name></name> <operator pos:start="485:26" pos:end="485:26">=</operator> <name pos:start="485:28" pos:end="485:37">CC_OP_MULW</name></expr>;</expr_stmt>

                <break pos:start="487:17" pos:end="487:22">break;</break>

            <default pos:start="489:13" pos:end="489:20">default:</default>

            <case pos:start="491:13" pos:end="491:25">case <expr pos:start="491:18" pos:end="491:24"><name pos:start="491:18" pos:end="491:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="493:17" pos:end="493:37"><expr pos:start="493:17" pos:end="493:36"><call pos:start="493:17" pos:end="493:36"><name pos:start="493:17" pos:end="493:34">gen_op_mull_EAX_T0</name><argument_list pos:start="493:35" pos:end="493:36">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="495:17" pos:end="495:38"><expr pos:start="495:17" pos:end="495:37"><name pos:start="495:17" pos:end="495:24"><name pos:start="495:17" pos:end="495:17">s</name><operator pos:start="495:18" pos:end="495:19">-&gt;</operator><name pos:start="495:20" pos:end="495:24">cc_op</name></name> <operator pos:start="495:26" pos:end="495:26">=</operator> <name pos:start="495:28" pos:end="495:37">CC_OP_MULL</name></expr>;</expr_stmt>

                <break pos:start="497:17" pos:end="497:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="501:13" pos:end="501:18">break;</break>

        <case pos:start="503:9" pos:end="503:15">case <expr pos:start="503:14" pos:end="503:14"><literal type="number" pos:start="503:14" pos:end="503:14">5</literal></expr>:</case> <comment type="block" pos:start="503:17" pos:end="503:26">/* imul */</comment>

            <switch pos:start="505:13" pos:end="533:13">switch<condition pos:start="505:19" pos:end="505:22">(<expr pos:start="505:20" pos:end="505:21"><name pos:start="505:20" pos:end="505:21">ot</name></expr>)</condition> <block pos:start="505:24" pos:end="533:13">{<block_content pos:start="507:13" pos:end="531:22">

            <case pos:start="507:13" pos:end="507:25">case <expr pos:start="507:18" pos:end="507:24"><name pos:start="507:18" pos:end="507:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="509:17" pos:end="509:37"><expr pos:start="509:17" pos:end="509:36"><call pos:start="509:17" pos:end="509:36"><name pos:start="509:17" pos:end="509:34">gen_op_imulb_AL_T0</name><argument_list pos:start="509:35" pos:end="509:36">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="511:17" pos:end="511:38"><expr pos:start="511:17" pos:end="511:37"><name pos:start="511:17" pos:end="511:24"><name pos:start="511:17" pos:end="511:17">s</name><operator pos:start="511:18" pos:end="511:19">-&gt;</operator><name pos:start="511:20" pos:end="511:24">cc_op</name></name> <operator pos:start="511:26" pos:end="511:26">=</operator> <name pos:start="511:28" pos:end="511:37">CC_OP_MULB</name></expr>;</expr_stmt>

                <break pos:start="513:17" pos:end="513:22">break;</break>

            <case pos:start="515:13" pos:end="515:25">case <expr pos:start="515:18" pos:end="515:24"><name pos:start="515:18" pos:end="515:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="517:17" pos:end="517:37"><expr pos:start="517:17" pos:end="517:36"><call pos:start="517:17" pos:end="517:36"><name pos:start="517:17" pos:end="517:34">gen_op_imulw_AX_T0</name><argument_list pos:start="517:35" pos:end="517:36">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="519:17" pos:end="519:38"><expr pos:start="519:17" pos:end="519:37"><name pos:start="519:17" pos:end="519:24"><name pos:start="519:17" pos:end="519:17">s</name><operator pos:start="519:18" pos:end="519:19">-&gt;</operator><name pos:start="519:20" pos:end="519:24">cc_op</name></name> <operator pos:start="519:26" pos:end="519:26">=</operator> <name pos:start="519:28" pos:end="519:37">CC_OP_MULW</name></expr>;</expr_stmt>

                <break pos:start="521:17" pos:end="521:22">break;</break>

            <default pos:start="523:13" pos:end="523:20">default:</default>

            <case pos:start="525:13" pos:end="525:25">case <expr pos:start="525:18" pos:end="525:24"><name pos:start="525:18" pos:end="525:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="527:17" pos:end="527:38"><expr pos:start="527:17" pos:end="527:37"><call pos:start="527:17" pos:end="527:37"><name pos:start="527:17" pos:end="527:35">gen_op_imull_EAX_T0</name><argument_list pos:start="527:36" pos:end="527:37">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="529:17" pos:end="529:38"><expr pos:start="529:17" pos:end="529:37"><name pos:start="529:17" pos:end="529:24"><name pos:start="529:17" pos:end="529:17">s</name><operator pos:start="529:18" pos:end="529:19">-&gt;</operator><name pos:start="529:20" pos:end="529:24">cc_op</name></name> <operator pos:start="529:26" pos:end="529:26">=</operator> <name pos:start="529:28" pos:end="529:37">CC_OP_MULL</name></expr>;</expr_stmt>

                <break pos:start="531:17" pos:end="531:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="535:13" pos:end="535:18">break;</break>

        <case pos:start="537:9" pos:end="537:15">case <expr pos:start="537:14" pos:end="537:14"><literal type="number" pos:start="537:14" pos:end="537:14">6</literal></expr>:</case> <comment type="block" pos:start="537:17" pos:end="537:25">/* div */</comment>

            <switch pos:start="539:13" pos:end="561:13">switch<condition pos:start="539:19" pos:end="539:22">(<expr pos:start="539:20" pos:end="539:21"><name pos:start="539:20" pos:end="539:21">ot</name></expr>)</condition> <block pos:start="539:24" pos:end="561:13">{<block_content pos:start="541:13" pos:end="559:22">

            <case pos:start="541:13" pos:end="541:25">case <expr pos:start="541:18" pos:end="541:24"><name pos:start="541:18" pos:end="541:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="543:17" pos:end="543:57"><expr pos:start="543:17" pos:end="543:56"><call pos:start="543:17" pos:end="543:56"><name pos:start="543:17" pos:end="543:33">gen_op_divb_AL_T0</name><argument_list pos:start="543:34" pos:end="543:56">(<argument pos:start="543:35" pos:end="543:55"><expr pos:start="543:35" pos:end="543:55"><name pos:start="543:35" pos:end="543:42">pc_start</name> <operator pos:start="543:44" pos:end="543:44">-</operator> <name pos:start="543:46" pos:end="543:55"><name pos:start="543:46" pos:end="543:46">s</name><operator pos:start="543:47" pos:end="543:48">-&gt;</operator><name pos:start="543:49" pos:end="543:55">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="545:17" pos:end="545:22">break;</break>

            <case pos:start="547:13" pos:end="547:25">case <expr pos:start="547:18" pos:end="547:24"><name pos:start="547:18" pos:end="547:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="549:17" pos:end="549:57"><expr pos:start="549:17" pos:end="549:56"><call pos:start="549:17" pos:end="549:56"><name pos:start="549:17" pos:end="549:33">gen_op_divw_AX_T0</name><argument_list pos:start="549:34" pos:end="549:56">(<argument pos:start="549:35" pos:end="549:55"><expr pos:start="549:35" pos:end="549:55"><name pos:start="549:35" pos:end="549:42">pc_start</name> <operator pos:start="549:44" pos:end="549:44">-</operator> <name pos:start="549:46" pos:end="549:55"><name pos:start="549:46" pos:end="549:46">s</name><operator pos:start="549:47" pos:end="549:48">-&gt;</operator><name pos:start="549:49" pos:end="549:55">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="551:17" pos:end="551:22">break;</break>

            <default pos:start="553:13" pos:end="553:20">default:</default>

            <case pos:start="555:13" pos:end="555:25">case <expr pos:start="555:18" pos:end="555:24"><name pos:start="555:18" pos:end="555:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="557:17" pos:end="557:58"><expr pos:start="557:17" pos:end="557:57"><call pos:start="557:17" pos:end="557:57"><name pos:start="557:17" pos:end="557:34">gen_op_divl_EAX_T0</name><argument_list pos:start="557:35" pos:end="557:57">(<argument pos:start="557:36" pos:end="557:56"><expr pos:start="557:36" pos:end="557:56"><name pos:start="557:36" pos:end="557:43">pc_start</name> <operator pos:start="557:45" pos:end="557:45">-</operator> <name pos:start="557:47" pos:end="557:56"><name pos:start="557:47" pos:end="557:47">s</name><operator pos:start="557:48" pos:end="557:49">-&gt;</operator><name pos:start="557:50" pos:end="557:56">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="559:17" pos:end="559:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="563:13" pos:end="563:18">break;</break>

        <case pos:start="565:9" pos:end="565:15">case <expr pos:start="565:14" pos:end="565:14"><literal type="number" pos:start="565:14" pos:end="565:14">7</literal></expr>:</case> <comment type="block" pos:start="565:17" pos:end="565:26">/* idiv */</comment>

            <switch pos:start="567:13" pos:end="589:13">switch<condition pos:start="567:19" pos:end="567:22">(<expr pos:start="567:20" pos:end="567:21"><name pos:start="567:20" pos:end="567:21">ot</name></expr>)</condition> <block pos:start="567:24" pos:end="589:13">{<block_content pos:start="569:13" pos:end="587:22">

            <case pos:start="569:13" pos:end="569:25">case <expr pos:start="569:18" pos:end="569:24"><name pos:start="569:18" pos:end="569:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="571:17" pos:end="571:58"><expr pos:start="571:17" pos:end="571:57"><call pos:start="571:17" pos:end="571:57"><name pos:start="571:17" pos:end="571:34">gen_op_idivb_AL_T0</name><argument_list pos:start="571:35" pos:end="571:57">(<argument pos:start="571:36" pos:end="571:56"><expr pos:start="571:36" pos:end="571:56"><name pos:start="571:36" pos:end="571:43">pc_start</name> <operator pos:start="571:45" pos:end="571:45">-</operator> <name pos:start="571:47" pos:end="571:56"><name pos:start="571:47" pos:end="571:47">s</name><operator pos:start="571:48" pos:end="571:49">-&gt;</operator><name pos:start="571:50" pos:end="571:56">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="573:17" pos:end="573:22">break;</break>

            <case pos:start="575:13" pos:end="575:25">case <expr pos:start="575:18" pos:end="575:24"><name pos:start="575:18" pos:end="575:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="577:17" pos:end="577:58"><expr pos:start="577:17" pos:end="577:57"><call pos:start="577:17" pos:end="577:57"><name pos:start="577:17" pos:end="577:34">gen_op_idivw_AX_T0</name><argument_list pos:start="577:35" pos:end="577:57">(<argument pos:start="577:36" pos:end="577:56"><expr pos:start="577:36" pos:end="577:56"><name pos:start="577:36" pos:end="577:43">pc_start</name> <operator pos:start="577:45" pos:end="577:45">-</operator> <name pos:start="577:47" pos:end="577:56"><name pos:start="577:47" pos:end="577:47">s</name><operator pos:start="577:48" pos:end="577:49">-&gt;</operator><name pos:start="577:50" pos:end="577:56">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="579:17" pos:end="579:22">break;</break>

            <default pos:start="581:13" pos:end="581:20">default:</default>

            <case pos:start="583:13" pos:end="583:25">case <expr pos:start="583:18" pos:end="583:24"><name pos:start="583:18" pos:end="583:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="585:17" pos:end="585:59"><expr pos:start="585:17" pos:end="585:58"><call pos:start="585:17" pos:end="585:58"><name pos:start="585:17" pos:end="585:35">gen_op_idivl_EAX_T0</name><argument_list pos:start="585:36" pos:end="585:58">(<argument pos:start="585:37" pos:end="585:57"><expr pos:start="585:37" pos:end="585:57"><name pos:start="585:37" pos:end="585:44">pc_start</name> <operator pos:start="585:46" pos:end="585:46">-</operator> <name pos:start="585:48" pos:end="585:57"><name pos:start="585:48" pos:end="585:48">s</name><operator pos:start="585:49" pos:end="585:50">-&gt;</operator><name pos:start="585:51" pos:end="585:57">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="587:17" pos:end="587:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="591:13" pos:end="591:18">break;</break>

        <default pos:start="593:9" pos:end="593:16">default:</default>

            <goto pos:start="595:13" pos:end="595:28">goto <name pos:start="595:18" pos:end="595:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="599:9" pos:end="599:14">break;</break>



    <case pos:start="603:5" pos:end="603:14">case <expr pos:start="603:10" pos:end="603:13"><literal type="number" pos:start="603:10" pos:end="603:13">0xfe</literal></expr>:</case> <comment type="block" pos:start="603:16" pos:end="603:25">/* GRP4 */</comment>

    <case pos:start="605:5" pos:end="605:14">case <expr pos:start="605:10" pos:end="605:13"><literal type="number" pos:start="605:10" pos:end="605:13">0xff</literal></expr>:</case> <comment type="block" pos:start="605:16" pos:end="605:25">/* GRP5 */</comment>

        <if_stmt pos:start="607:9" pos:end="613:43"><if pos:start="607:9" pos:end="609:25">if <condition pos:start="607:12" pos:end="607:25">(<expr pos:start="607:13" pos:end="607:24"><operator pos:start="607:13" pos:end="607:13">(</operator><name pos:start="607:14" pos:end="607:14">b</name> <operator pos:start="607:16" pos:end="607:16">&amp;</operator> <literal type="number" pos:start="607:18" pos:end="607:18">1</literal><operator pos:start="607:19" pos:end="607:19">)</operator> <operator pos:start="607:21" pos:end="607:22">==</operator> <literal type="number" pos:start="607:24" pos:end="607:24">0</literal></expr>)</condition><block type="pseudo" pos:start="609:13" pos:end="609:25"><block_content pos:start="609:13" pos:end="609:25">

            <expr_stmt pos:start="609:13" pos:end="609:25"><expr pos:start="609:13" pos:end="609:24"><name pos:start="609:13" pos:end="609:14">ot</name> <operator pos:start="609:16" pos:end="609:16">=</operator> <name pos:start="609:18" pos:end="609:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="611:9" pos:end="613:43">else<block type="pseudo" pos:start="613:13" pos:end="613:43"><block_content pos:start="613:13" pos:end="613:43">

            <expr_stmt pos:start="613:13" pos:end="613:43"><expr pos:start="613:13" pos:end="613:42"><name pos:start="613:13" pos:end="613:14">ot</name> <operator pos:start="613:16" pos:end="613:16">=</operator> <ternary pos:start="613:18" pos:end="613:42"><condition pos:start="613:18" pos:end="613:24"><expr pos:start="613:18" pos:end="613:22"><name pos:start="613:18" pos:end="613:22">dflag</name></expr> ?</condition><then pos:start="613:26" pos:end="613:32"> <expr pos:start="613:26" pos:end="613:32"><name pos:start="613:26" pos:end="613:32">OT_LONG</name></expr> </then><else pos:start="613:34" pos:end="613:42">: <expr pos:start="613:36" pos:end="613:42"><name pos:start="613:36" pos:end="613:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="617:9" pos:end="617:35"><expr pos:start="617:9" pos:end="617:34"><name pos:start="617:9" pos:end="617:13">modrm</name> <operator pos:start="617:15" pos:end="617:15">=</operator> <call pos:start="617:17" pos:end="617:34"><name pos:start="617:17" pos:end="617:25">ldub_code</name><argument_list pos:start="617:26" pos:end="617:34">(<argument pos:start="617:27" pos:end="617:33"><expr pos:start="617:27" pos:end="617:33"><name pos:start="617:27" pos:end="617:31"><name pos:start="617:27" pos:end="617:27">s</name><operator pos:start="617:28" pos:end="617:29">-&gt;</operator><name pos:start="617:30" pos:end="617:31">pc</name></name><operator pos:start="617:32" pos:end="617:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="619:9" pos:end="619:31"><expr pos:start="619:9" pos:end="619:30"><name pos:start="619:9" pos:end="619:11">mod</name> <operator pos:start="619:13" pos:end="619:13">=</operator> <operator pos:start="619:15" pos:end="619:15">(</operator><name pos:start="619:16" pos:end="619:20">modrm</name> <operator pos:start="619:22" pos:end="619:23">&gt;&gt;</operator> <literal type="number" pos:start="619:25" pos:end="619:25">6</literal><operator pos:start="619:26" pos:end="619:26">)</operator> <operator pos:start="619:28" pos:end="619:28">&amp;</operator> <literal type="number" pos:start="619:30" pos:end="619:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="621:9" pos:end="621:23"><expr pos:start="621:9" pos:end="621:22"><name pos:start="621:9" pos:end="621:10">rm</name> <operator pos:start="621:12" pos:end="621:12">=</operator> <name pos:start="621:14" pos:end="621:18">modrm</name> <operator pos:start="621:20" pos:end="621:20">&amp;</operator> <literal type="number" pos:start="621:22" pos:end="621:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="623:9" pos:end="623:30"><expr pos:start="623:9" pos:end="623:29"><name pos:start="623:9" pos:end="623:10">op</name> <operator pos:start="623:12" pos:end="623:12">=</operator> <operator pos:start="623:14" pos:end="623:14">(</operator><name pos:start="623:15" pos:end="623:19">modrm</name> <operator pos:start="623:21" pos:end="623:22">&gt;&gt;</operator> <literal type="number" pos:start="623:24" pos:end="623:24">3</literal><operator pos:start="623:25" pos:end="623:25">)</operator> <operator pos:start="623:27" pos:end="623:27">&amp;</operator> <literal type="number" pos:start="623:29" pos:end="623:29">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="625:9" pos:end="629:9"><if pos:start="625:9" pos:end="629:9">if <condition pos:start="625:12" pos:end="625:33">(<expr pos:start="625:13" pos:end="625:32"><name pos:start="625:13" pos:end="625:14">op</name> <operator pos:start="625:16" pos:end="625:17">&gt;=</operator> <literal type="number" pos:start="625:19" pos:end="625:19">2</literal> <operator pos:start="625:21" pos:end="625:22">&amp;&amp;</operator> <name pos:start="625:24" pos:end="625:24">b</name> <operator pos:start="625:26" pos:end="625:27">==</operator> <literal type="number" pos:start="625:29" pos:end="625:32">0xfe</literal></expr>)</condition> <block pos:start="625:35" pos:end="629:9">{<block_content pos:start="627:13" pos:end="627:28">

            <goto pos:start="627:13" pos:end="627:28">goto <name pos:start="627:18" pos:end="627:27">illegal_op</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="631:9" pos:end="643:9"><if pos:start="631:9" pos:end="639:9">if <condition pos:start="631:12" pos:end="631:21">(<expr pos:start="631:13" pos:end="631:20"><name pos:start="631:13" pos:end="631:15">mod</name> <operator pos:start="631:17" pos:end="631:18">!=</operator> <literal type="number" pos:start="631:20" pos:end="631:20">3</literal></expr>)</condition> <block pos:start="631:23" pos:end="639:9">{<block_content pos:start="633:13" pos:end="637:53">

            <expr_stmt pos:start="633:13" pos:end="633:61"><expr pos:start="633:13" pos:end="633:60"><call pos:start="633:13" pos:end="633:60"><name pos:start="633:13" pos:end="633:25">gen_lea_modrm</name><argument_list pos:start="633:26" pos:end="633:60">(<argument pos:start="633:27" pos:end="633:27"><expr pos:start="633:27" pos:end="633:27"><name pos:start="633:27" pos:end="633:27">s</name></expr></argument>, <argument pos:start="633:30" pos:end="633:34"><expr pos:start="633:30" pos:end="633:34"><name pos:start="633:30" pos:end="633:34">modrm</name></expr></argument>, <argument pos:start="633:37" pos:end="633:45"><expr pos:start="633:37" pos:end="633:45"><operator pos:start="633:37" pos:end="633:37">&amp;</operator><name pos:start="633:38" pos:end="633:45">reg_addr</name></expr></argument>, <argument pos:start="633:48" pos:end="633:59"><expr pos:start="633:48" pos:end="633:59"><operator pos:start="633:48" pos:end="633:48">&amp;</operator><name pos:start="633:49" pos:end="633:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="635:13" pos:end="637:53"><if pos:start="635:13" pos:end="637:53">if <condition pos:start="635:16" pos:end="635:46">(<expr pos:start="635:17" pos:end="635:45"><name pos:start="635:17" pos:end="635:18">op</name> <operator pos:start="635:20" pos:end="635:21">&gt;=</operator> <literal type="number" pos:start="635:23" pos:end="635:23">2</literal> <operator pos:start="635:25" pos:end="635:26">&amp;&amp;</operator> <name pos:start="635:28" pos:end="635:29">op</name> <operator pos:start="635:31" pos:end="635:32">!=</operator> <literal type="number" pos:start="635:34" pos:end="635:34">3</literal> <operator pos:start="635:36" pos:end="635:37">&amp;&amp;</operator> <name pos:start="635:39" pos:end="635:40">op</name> <operator pos:start="635:42" pos:end="635:43">!=</operator> <literal type="number" pos:start="635:45" pos:end="635:45">5</literal></expr>)</condition><block type="pseudo" pos:start="637:17" pos:end="637:53"><block_content pos:start="637:17" pos:end="637:53">

                <expr_stmt pos:start="637:17" pos:end="637:53"><expr pos:start="637:17" pos:end="637:52"><name pos:start="637:17" pos:end="637:50"><name pos:start="637:17" pos:end="637:31">gen_op_ld_T0_A0</name><index pos:start="637:32" pos:end="637:50">[<expr pos:start="637:33" pos:end="637:49"><name pos:start="637:33" pos:end="637:34">ot</name> <operator pos:start="637:36" pos:end="637:36">+</operator> <name pos:start="637:38" pos:end="637:49"><name pos:start="637:38" pos:end="637:38">s</name><operator pos:start="637:39" pos:end="637:40">-&gt;</operator><name pos:start="637:41" pos:end="637:49">mem_index</name></name></expr>]</index></name><operator pos:start="637:51" pos:end="637:51">(</operator><operator pos:start="637:52" pos:end="637:52">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="639:11" pos:end="643:9">else <block pos:start="639:16" pos:end="643:9">{<block_content pos:start="641:13" pos:end="641:43">

            <expr_stmt pos:start="641:13" pos:end="641:43"><expr pos:start="641:13" pos:end="641:42"><name pos:start="641:13" pos:end="641:40"><name pos:start="641:13" pos:end="641:29">gen_op_mov_TN_reg</name><index pos:start="641:30" pos:end="641:33">[<expr pos:start="641:31" pos:end="641:32"><name pos:start="641:31" pos:end="641:32">ot</name></expr>]</index><index pos:start="641:34" pos:end="641:36">[<expr pos:start="641:35" pos:end="641:35"><literal type="number" pos:start="641:35" pos:end="641:35">0</literal></expr>]</index><index pos:start="641:37" pos:end="641:40">[<expr pos:start="641:38" pos:end="641:39"><name pos:start="641:38" pos:end="641:39">rm</name></expr>]</index></name><operator pos:start="641:41" pos:end="641:41">(</operator><operator pos:start="641:42" pos:end="641:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <switch pos:start="647:9" pos:end="783:9">switch<condition pos:start="647:15" pos:end="647:18">(<expr pos:start="647:16" pos:end="647:17"><name pos:start="647:16" pos:end="647:17">op</name></expr>)</condition> <block pos:start="647:20" pos:end="783:9">{<block_content pos:start="649:9" pos:end="781:28">

        <case pos:start="649:9" pos:end="649:15">case <expr pos:start="649:14" pos:end="649:14"><literal type="number" pos:start="649:14" pos:end="649:14">0</literal></expr>:</case> <comment type="block" pos:start="649:17" pos:end="649:28">/* inc Ev */</comment>

            <if_stmt pos:start="651:13" pos:end="657:27"><if pos:start="651:13" pos:end="653:32">if <condition pos:start="651:16" pos:end="651:25">(<expr pos:start="651:17" pos:end="651:24"><name pos:start="651:17" pos:end="651:19">mod</name> <operator pos:start="651:21" pos:end="651:22">!=</operator> <literal type="number" pos:start="651:24" pos:end="651:24">3</literal></expr>)</condition><block type="pseudo" pos:start="653:17" pos:end="653:32"><block_content pos:start="653:17" pos:end="653:32">

                <expr_stmt pos:start="653:17" pos:end="653:32"><expr pos:start="653:17" pos:end="653:31"><name pos:start="653:17" pos:end="653:21">opreg</name> <operator pos:start="653:23" pos:end="653:23">=</operator> <name pos:start="653:25" pos:end="653:31">OR_TMP0</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="655:13" pos:end="657:27">else<block type="pseudo" pos:start="657:17" pos:end="657:27"><block_content pos:start="657:17" pos:end="657:27">

                <expr_stmt pos:start="657:17" pos:end="657:27"><expr pos:start="657:17" pos:end="657:26"><name pos:start="657:17" pos:end="657:21">opreg</name> <operator pos:start="657:23" pos:end="657:23">=</operator> <name pos:start="657:25" pos:end="657:26">rm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="659:13" pos:end="659:37"><expr pos:start="659:13" pos:end="659:36"><call pos:start="659:13" pos:end="659:36"><name pos:start="659:13" pos:end="659:19">gen_inc</name><argument_list pos:start="659:20" pos:end="659:36">(<argument pos:start="659:21" pos:end="659:21"><expr pos:start="659:21" pos:end="659:21"><name pos:start="659:21" pos:end="659:21">s</name></expr></argument>, <argument pos:start="659:24" pos:end="659:25"><expr pos:start="659:24" pos:end="659:25"><name pos:start="659:24" pos:end="659:25">ot</name></expr></argument>, <argument pos:start="659:28" pos:end="659:32"><expr pos:start="659:28" pos:end="659:32"><name pos:start="659:28" pos:end="659:32">opreg</name></expr></argument>, <argument pos:start="659:35" pos:end="659:35"><expr pos:start="659:35" pos:end="659:35"><literal type="number" pos:start="659:35" pos:end="659:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="661:13" pos:end="661:18">break;</break>

        <case pos:start="663:9" pos:end="663:15">case <expr pos:start="663:14" pos:end="663:14"><literal type="number" pos:start="663:14" pos:end="663:14">1</literal></expr>:</case> <comment type="block" pos:start="663:17" pos:end="663:28">/* dec Ev */</comment>

            <if_stmt pos:start="665:13" pos:end="671:27"><if pos:start="665:13" pos:end="667:32">if <condition pos:start="665:16" pos:end="665:25">(<expr pos:start="665:17" pos:end="665:24"><name pos:start="665:17" pos:end="665:19">mod</name> <operator pos:start="665:21" pos:end="665:22">!=</operator> <literal type="number" pos:start="665:24" pos:end="665:24">3</literal></expr>)</condition><block type="pseudo" pos:start="667:17" pos:end="667:32"><block_content pos:start="667:17" pos:end="667:32">

                <expr_stmt pos:start="667:17" pos:end="667:32"><expr pos:start="667:17" pos:end="667:31"><name pos:start="667:17" pos:end="667:21">opreg</name> <operator pos:start="667:23" pos:end="667:23">=</operator> <name pos:start="667:25" pos:end="667:31">OR_TMP0</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="669:13" pos:end="671:27">else<block type="pseudo" pos:start="671:17" pos:end="671:27"><block_content pos:start="671:17" pos:end="671:27">

                <expr_stmt pos:start="671:17" pos:end="671:27"><expr pos:start="671:17" pos:end="671:26"><name pos:start="671:17" pos:end="671:21">opreg</name> <operator pos:start="671:23" pos:end="671:23">=</operator> <name pos:start="671:25" pos:end="671:26">rm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="673:13" pos:end="673:38"><expr pos:start="673:13" pos:end="673:37"><call pos:start="673:13" pos:end="673:37"><name pos:start="673:13" pos:end="673:19">gen_inc</name><argument_list pos:start="673:20" pos:end="673:37">(<argument pos:start="673:21" pos:end="673:21"><expr pos:start="673:21" pos:end="673:21"><name pos:start="673:21" pos:end="673:21">s</name></expr></argument>, <argument pos:start="673:24" pos:end="673:25"><expr pos:start="673:24" pos:end="673:25"><name pos:start="673:24" pos:end="673:25">ot</name></expr></argument>, <argument pos:start="673:28" pos:end="673:32"><expr pos:start="673:28" pos:end="673:32"><name pos:start="673:28" pos:end="673:32">opreg</name></expr></argument>, <argument pos:start="673:35" pos:end="673:36"><expr pos:start="673:35" pos:end="673:36"><operator pos:start="673:35" pos:end="673:35">-</operator><literal type="number" pos:start="673:36" pos:end="673:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="675:13" pos:end="675:18">break;</break>

        <case pos:start="677:9" pos:end="677:15">case <expr pos:start="677:14" pos:end="677:14"><literal type="number" pos:start="677:14" pos:end="677:14">2</literal></expr>:</case> <comment type="block" pos:start="677:17" pos:end="677:29">/* call Ev */</comment>

            <comment type="block" pos:start="679:13" pos:end="679:65">/* XXX: optimize if memory (no 'and' is necessary) */</comment>

            <if_stmt pos:start="681:13" pos:end="683:38"><if pos:start="681:13" pos:end="683:38">if <condition pos:start="681:16" pos:end="681:30">(<expr pos:start="681:17" pos:end="681:29"><name pos:start="681:17" pos:end="681:24"><name pos:start="681:17" pos:end="681:17">s</name><operator pos:start="681:18" pos:end="681:19">-&gt;</operator><name pos:start="681:20" pos:end="681:24">dflag</name></name> <operator pos:start="681:26" pos:end="681:27">==</operator> <literal type="number" pos:start="681:29" pos:end="681:29">0</literal></expr>)</condition><block type="pseudo" pos:start="683:17" pos:end="683:38"><block_content pos:start="683:17" pos:end="683:38">

                <expr_stmt pos:start="683:17" pos:end="683:38"><expr pos:start="683:17" pos:end="683:37"><call pos:start="683:17" pos:end="683:37"><name pos:start="683:17" pos:end="683:35">gen_op_andl_T0_ffff</name><argument_list pos:start="683:36" pos:end="683:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="685:13" pos:end="685:42"><expr pos:start="685:13" pos:end="685:41"><name pos:start="685:13" pos:end="685:20">next_eip</name> <operator pos:start="685:22" pos:end="685:22">=</operator> <name pos:start="685:24" pos:end="685:28"><name pos:start="685:24" pos:end="685:24">s</name><operator pos:start="685:25" pos:end="685:26">-&gt;</operator><name pos:start="685:27" pos:end="685:28">pc</name></name> <operator pos:start="685:30" pos:end="685:30">-</operator> <name pos:start="685:32" pos:end="685:41"><name pos:start="685:32" pos:end="685:32">s</name><operator pos:start="685:33" pos:end="685:34">-&gt;</operator><name pos:start="685:35" pos:end="685:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="687:13" pos:end="687:40"><expr pos:start="687:13" pos:end="687:39"><call pos:start="687:13" pos:end="687:39"><name pos:start="687:13" pos:end="687:29">gen_op_movl_T1_im</name><argument_list pos:start="687:30" pos:end="687:39">(<argument pos:start="687:31" pos:end="687:38"><expr pos:start="687:31" pos:end="687:38"><name pos:start="687:31" pos:end="687:38">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="689:13" pos:end="689:27"><expr pos:start="689:13" pos:end="689:26"><call pos:start="689:13" pos:end="689:26"><name pos:start="689:13" pos:end="689:23">gen_push_T1</name><argument_list pos:start="689:24" pos:end="689:26">(<argument pos:start="689:25" pos:end="689:25"><expr pos:start="689:25" pos:end="689:25"><name pos:start="689:25" pos:end="689:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="691:13" pos:end="691:28"><expr pos:start="691:13" pos:end="691:27"><call pos:start="691:13" pos:end="691:27"><name pos:start="691:13" pos:end="691:25">gen_op_jmp_T0</name><argument_list pos:start="691:26" pos:end="691:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="693:13" pos:end="693:23"><expr pos:start="693:13" pos:end="693:22"><call pos:start="693:13" pos:end="693:22"><name pos:start="693:13" pos:end="693:19">gen_eob</name><argument_list pos:start="693:20" pos:end="693:22">(<argument pos:start="693:21" pos:end="693:21"><expr pos:start="693:21" pos:end="693:21"><name pos:start="693:21" pos:end="693:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="695:13" pos:end="695:18">break;</break>

        <case pos:start="697:9" pos:end="697:15">case <expr pos:start="697:14" pos:end="697:14"><literal type="number" pos:start="697:14" pos:end="697:14">3</literal></expr>:</case> <comment type="block" pos:start="697:17" pos:end="697:30">/* lcall Ev */</comment>

            <expr_stmt pos:start="699:13" pos:end="699:49"><expr pos:start="699:13" pos:end="699:48"><name pos:start="699:13" pos:end="699:46"><name pos:start="699:13" pos:end="699:27">gen_op_ld_T1_A0</name><index pos:start="699:28" pos:end="699:46">[<expr pos:start="699:29" pos:end="699:45"><name pos:start="699:29" pos:end="699:30">ot</name> <operator pos:start="699:32" pos:end="699:32">+</operator> <name pos:start="699:34" pos:end="699:45"><name pos:start="699:34" pos:end="699:34">s</name><operator pos:start="699:35" pos:end="699:36">-&gt;</operator><name pos:start="699:37" pos:end="699:45">mem_index</name></name></expr>]</index></name><operator pos:start="699:47" pos:end="699:47">(</operator><operator pos:start="699:48" pos:end="699:48">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="701:13" pos:end="701:55"><expr pos:start="701:13" pos:end="701:54"><call pos:start="701:13" pos:end="701:54"><name pos:start="701:13" pos:end="701:29">gen_op_addl_A0_im</name><argument_list pos:start="701:30" pos:end="701:54">(<argument pos:start="701:31" pos:end="701:53"><expr pos:start="701:31" pos:end="701:53"><literal type="number" pos:start="701:31" pos:end="701:31">1</literal> <operator pos:start="701:33" pos:end="701:34">&lt;&lt;</operator> <operator pos:start="701:36" pos:end="701:36">(</operator><name pos:start="701:37" pos:end="701:38">ot</name> <operator pos:start="701:40" pos:end="701:40">-</operator> <name pos:start="701:42" pos:end="701:48">OT_WORD</name> <operator pos:start="701:50" pos:end="701:50">+</operator> <literal type="number" pos:start="701:52" pos:end="701:52">1</literal><operator pos:start="701:53" pos:end="701:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="703:13" pos:end="703:55"><expr pos:start="703:13" pos:end="703:54"><name pos:start="703:13" pos:end="703:52"><name pos:start="703:13" pos:end="703:28">gen_op_ldu_T0_A0</name><index pos:start="703:29" pos:end="703:52">[<expr pos:start="703:30" pos:end="703:51"><name pos:start="703:30" pos:end="703:36">OT_WORD</name> <operator pos:start="703:38" pos:end="703:38">+</operator> <name pos:start="703:40" pos:end="703:51"><name pos:start="703:40" pos:end="703:40">s</name><operator pos:start="703:41" pos:end="703:42">-&gt;</operator><name pos:start="703:43" pos:end="703:51">mem_index</name></name></expr>]</index></name><operator pos:start="703:53" pos:end="703:53">(</operator><operator pos:start="703:54" pos:end="703:54">)</operator></expr>;</expr_stmt>

        <label pos:start="705:9" pos:end="705:17"><name pos:start="705:9" pos:end="705:16">do_lcall</name>:</label>

            <if_stmt pos:start="707:13" pos:end="721:13"><if pos:start="707:13" pos:end="717:13">if <condition pos:start="707:16" pos:end="707:34">(<expr pos:start="707:17" pos:end="707:33"><name pos:start="707:17" pos:end="707:21"><name pos:start="707:17" pos:end="707:17">s</name><operator pos:start="707:18" pos:end="707:19">-&gt;</operator><name pos:start="707:20" pos:end="707:21">pe</name></name> <operator pos:start="707:23" pos:end="707:24">&amp;&amp;</operator> <operator pos:start="707:26" pos:end="707:26">!</operator><name pos:start="707:27" pos:end="707:33"><name pos:start="707:27" pos:end="707:27">s</name><operator pos:start="707:28" pos:end="707:29">-&gt;</operator><name pos:start="707:30" pos:end="707:33">vm86</name></name></expr>)</condition> <block pos:start="707:36" pos:end="717:13">{<block_content pos:start="709:17" pos:end="715:72">

                <if_stmt pos:start="709:17" pos:end="711:47"><if pos:start="709:17" pos:end="711:47">if <condition pos:start="709:20" pos:end="709:46">(<expr pos:start="709:21" pos:end="709:45"><name pos:start="709:21" pos:end="709:28"><name pos:start="709:21" pos:end="709:21">s</name><operator pos:start="709:22" pos:end="709:23">-&gt;</operator><name pos:start="709:24" pos:end="709:28">cc_op</name></name> <operator pos:start="709:30" pos:end="709:31">!=</operator> <name pos:start="709:33" pos:end="709:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="711:21" pos:end="711:47"><block_content pos:start="711:21" pos:end="711:47">

                    <expr_stmt pos:start="711:21" pos:end="711:47"><expr pos:start="711:21" pos:end="711:46"><call pos:start="711:21" pos:end="711:46"><name pos:start="711:21" pos:end="711:36">gen_op_set_cc_op</name><argument_list pos:start="711:37" pos:end="711:46">(<argument pos:start="711:38" pos:end="711:45"><expr pos:start="711:38" pos:end="711:45"><name pos:start="711:38" pos:end="711:45"><name pos:start="711:38" pos:end="711:38">s</name><operator pos:start="711:39" pos:end="711:40">-&gt;</operator><name pos:start="711:41" pos:end="711:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="713:17" pos:end="713:53"><expr pos:start="713:17" pos:end="713:52"><call pos:start="713:17" pos:end="713:52"><name pos:start="713:17" pos:end="713:29">gen_op_jmp_im</name><argument_list pos:start="713:30" pos:end="713:52">(<argument pos:start="713:31" pos:end="713:51"><expr pos:start="713:31" pos:end="713:51"><name pos:start="713:31" pos:end="713:38">pc_start</name> <operator pos:start="713:40" pos:end="713:40">-</operator> <name pos:start="713:42" pos:end="713:51"><name pos:start="713:42" pos:end="713:42">s</name><operator pos:start="713:43" pos:end="713:44">-&gt;</operator><name pos:start="713:45" pos:end="713:51">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="715:17" pos:end="715:72"><expr pos:start="715:17" pos:end="715:71"><call pos:start="715:17" pos:end="715:71"><name pos:start="715:17" pos:end="715:44">gen_op_lcall_protected_T0_T1</name><argument_list pos:start="715:45" pos:end="715:71">(<argument pos:start="715:46" pos:end="715:50"><expr pos:start="715:46" pos:end="715:50"><name pos:start="715:46" pos:end="715:50">dflag</name></expr></argument>, <argument pos:start="715:53" pos:end="715:70"><expr pos:start="715:53" pos:end="715:70"><name pos:start="715:53" pos:end="715:57"><name pos:start="715:53" pos:end="715:53">s</name><operator pos:start="715:54" pos:end="715:55">-&gt;</operator><name pos:start="715:56" pos:end="715:57">pc</name></name> <operator pos:start="715:59" pos:end="715:59">-</operator> <name pos:start="715:61" pos:end="715:70"><name pos:start="715:61" pos:end="715:61">s</name><operator pos:start="715:62" pos:end="715:63">-&gt;</operator><name pos:start="715:64" pos:end="715:70">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="717:15" pos:end="721:13">else <block pos:start="717:20" pos:end="721:13">{<block_content pos:start="719:17" pos:end="719:67">

                <expr_stmt pos:start="719:17" pos:end="719:67"><expr pos:start="719:17" pos:end="719:66"><call pos:start="719:17" pos:end="719:66"><name pos:start="719:17" pos:end="719:39">gen_op_lcall_real_T0_T1</name><argument_list pos:start="719:40" pos:end="719:66">(<argument pos:start="719:41" pos:end="719:45"><expr pos:start="719:41" pos:end="719:45"><name pos:start="719:41" pos:end="719:45">dflag</name></expr></argument>, <argument pos:start="719:48" pos:end="719:65"><expr pos:start="719:48" pos:end="719:65"><name pos:start="719:48" pos:end="719:52"><name pos:start="719:48" pos:end="719:48">s</name><operator pos:start="719:49" pos:end="719:50">-&gt;</operator><name pos:start="719:51" pos:end="719:52">pc</name></name> <operator pos:start="719:54" pos:end="719:54">-</operator> <name pos:start="719:56" pos:end="719:65"><name pos:start="719:56" pos:end="719:56">s</name><operator pos:start="719:57" pos:end="719:58">-&gt;</operator><name pos:start="719:59" pos:end="719:65">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="723:13" pos:end="723:23"><expr pos:start="723:13" pos:end="723:22"><call pos:start="723:13" pos:end="723:22"><name pos:start="723:13" pos:end="723:19">gen_eob</name><argument_list pos:start="723:20" pos:end="723:22">(<argument pos:start="723:21" pos:end="723:21"><expr pos:start="723:21" pos:end="723:21"><name pos:start="723:21" pos:end="723:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="725:13" pos:end="725:18">break;</break>

        <case pos:start="727:9" pos:end="727:15">case <expr pos:start="727:14" pos:end="727:14"><literal type="number" pos:start="727:14" pos:end="727:14">4</literal></expr>:</case> <comment type="block" pos:start="727:17" pos:end="727:28">/* jmp Ev */</comment>

            <if_stmt pos:start="729:13" pos:end="731:38"><if pos:start="729:13" pos:end="731:38">if <condition pos:start="729:16" pos:end="729:30">(<expr pos:start="729:17" pos:end="729:29"><name pos:start="729:17" pos:end="729:24"><name pos:start="729:17" pos:end="729:17">s</name><operator pos:start="729:18" pos:end="729:19">-&gt;</operator><name pos:start="729:20" pos:end="729:24">dflag</name></name> <operator pos:start="729:26" pos:end="729:27">==</operator> <literal type="number" pos:start="729:29" pos:end="729:29">0</literal></expr>)</condition><block type="pseudo" pos:start="731:17" pos:end="731:38"><block_content pos:start="731:17" pos:end="731:38">

                <expr_stmt pos:start="731:17" pos:end="731:38"><expr pos:start="731:17" pos:end="731:37"><call pos:start="731:17" pos:end="731:37"><name pos:start="731:17" pos:end="731:35">gen_op_andl_T0_ffff</name><argument_list pos:start="731:36" pos:end="731:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="733:13" pos:end="733:28"><expr pos:start="733:13" pos:end="733:27"><call pos:start="733:13" pos:end="733:27"><name pos:start="733:13" pos:end="733:25">gen_op_jmp_T0</name><argument_list pos:start="733:26" pos:end="733:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="735:13" pos:end="735:23"><expr pos:start="735:13" pos:end="735:22"><call pos:start="735:13" pos:end="735:22"><name pos:start="735:13" pos:end="735:19">gen_eob</name><argument_list pos:start="735:20" pos:end="735:22">(<argument pos:start="735:21" pos:end="735:21"><expr pos:start="735:21" pos:end="735:21"><name pos:start="735:21" pos:end="735:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="737:13" pos:end="737:18">break;</break>

        <case pos:start="739:9" pos:end="739:15">case <expr pos:start="739:14" pos:end="739:14"><literal type="number" pos:start="739:14" pos:end="739:14">5</literal></expr>:</case> <comment type="block" pos:start="739:17" pos:end="739:29">/* ljmp Ev */</comment>

            <expr_stmt pos:start="741:13" pos:end="741:49"><expr pos:start="741:13" pos:end="741:48"><name pos:start="741:13" pos:end="741:46"><name pos:start="741:13" pos:end="741:27">gen_op_ld_T1_A0</name><index pos:start="741:28" pos:end="741:46">[<expr pos:start="741:29" pos:end="741:45"><name pos:start="741:29" pos:end="741:30">ot</name> <operator pos:start="741:32" pos:end="741:32">+</operator> <name pos:start="741:34" pos:end="741:45"><name pos:start="741:34" pos:end="741:34">s</name><operator pos:start="741:35" pos:end="741:36">-&gt;</operator><name pos:start="741:37" pos:end="741:45">mem_index</name></name></expr>]</index></name><operator pos:start="741:47" pos:end="741:47">(</operator><operator pos:start="741:48" pos:end="741:48">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="743:13" pos:end="743:55"><expr pos:start="743:13" pos:end="743:54"><call pos:start="743:13" pos:end="743:54"><name pos:start="743:13" pos:end="743:29">gen_op_addl_A0_im</name><argument_list pos:start="743:30" pos:end="743:54">(<argument pos:start="743:31" pos:end="743:53"><expr pos:start="743:31" pos:end="743:53"><literal type="number" pos:start="743:31" pos:end="743:31">1</literal> <operator pos:start="743:33" pos:end="743:34">&lt;&lt;</operator> <operator pos:start="743:36" pos:end="743:36">(</operator><name pos:start="743:37" pos:end="743:38">ot</name> <operator pos:start="743:40" pos:end="743:40">-</operator> <name pos:start="743:42" pos:end="743:48">OT_WORD</name> <operator pos:start="743:50" pos:end="743:50">+</operator> <literal type="number" pos:start="743:52" pos:end="743:52">1</literal><operator pos:start="743:53" pos:end="743:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="745:13" pos:end="745:55"><expr pos:start="745:13" pos:end="745:54"><name pos:start="745:13" pos:end="745:52"><name pos:start="745:13" pos:end="745:28">gen_op_ldu_T0_A0</name><index pos:start="745:29" pos:end="745:52">[<expr pos:start="745:30" pos:end="745:51"><name pos:start="745:30" pos:end="745:36">OT_WORD</name> <operator pos:start="745:38" pos:end="745:38">+</operator> <name pos:start="745:40" pos:end="745:51"><name pos:start="745:40" pos:end="745:40">s</name><operator pos:start="745:41" pos:end="745:42">-&gt;</operator><name pos:start="745:43" pos:end="745:51">mem_index</name></name></expr>]</index></name><operator pos:start="745:53" pos:end="745:53">(</operator><operator pos:start="745:54" pos:end="745:54">)</operator></expr>;</expr_stmt>

        <label pos:start="747:9" pos:end="747:16"><name pos:start="747:9" pos:end="747:15">do_ljmp</name>:</label>

            <if_stmt pos:start="749:13" pos:end="767:13"><if pos:start="749:13" pos:end="759:13">if <condition pos:start="749:16" pos:end="749:34">(<expr pos:start="749:17" pos:end="749:33"><name pos:start="749:17" pos:end="749:21"><name pos:start="749:17" pos:end="749:17">s</name><operator pos:start="749:18" pos:end="749:19">-&gt;</operator><name pos:start="749:20" pos:end="749:21">pe</name></name> <operator pos:start="749:23" pos:end="749:24">&amp;&amp;</operator> <operator pos:start="749:26" pos:end="749:26">!</operator><name pos:start="749:27" pos:end="749:33"><name pos:start="749:27" pos:end="749:27">s</name><operator pos:start="749:28" pos:end="749:29">-&gt;</operator><name pos:start="749:30" pos:end="749:33">vm86</name></name></expr>)</condition> <block pos:start="749:36" pos:end="759:13">{<block_content pos:start="751:17" pos:end="757:64">

                <if_stmt pos:start="751:17" pos:end="753:47"><if pos:start="751:17" pos:end="753:47">if <condition pos:start="751:20" pos:end="751:46">(<expr pos:start="751:21" pos:end="751:45"><name pos:start="751:21" pos:end="751:28"><name pos:start="751:21" pos:end="751:21">s</name><operator pos:start="751:22" pos:end="751:23">-&gt;</operator><name pos:start="751:24" pos:end="751:28">cc_op</name></name> <operator pos:start="751:30" pos:end="751:31">!=</operator> <name pos:start="751:33" pos:end="751:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="753:21" pos:end="753:47"><block_content pos:start="753:21" pos:end="753:47">

                    <expr_stmt pos:start="753:21" pos:end="753:47"><expr pos:start="753:21" pos:end="753:46"><call pos:start="753:21" pos:end="753:46"><name pos:start="753:21" pos:end="753:36">gen_op_set_cc_op</name><argument_list pos:start="753:37" pos:end="753:46">(<argument pos:start="753:38" pos:end="753:45"><expr pos:start="753:38" pos:end="753:45"><name pos:start="753:38" pos:end="753:45"><name pos:start="753:38" pos:end="753:38">s</name><operator pos:start="753:39" pos:end="753:40">-&gt;</operator><name pos:start="753:41" pos:end="753:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="755:17" pos:end="755:53"><expr pos:start="755:17" pos:end="755:52"><call pos:start="755:17" pos:end="755:52"><name pos:start="755:17" pos:end="755:29">gen_op_jmp_im</name><argument_list pos:start="755:30" pos:end="755:52">(<argument pos:start="755:31" pos:end="755:51"><expr pos:start="755:31" pos:end="755:51"><name pos:start="755:31" pos:end="755:38">pc_start</name> <operator pos:start="755:40" pos:end="755:40">-</operator> <name pos:start="755:42" pos:end="755:51"><name pos:start="755:42" pos:end="755:42">s</name><operator pos:start="755:43" pos:end="755:44">-&gt;</operator><name pos:start="755:45" pos:end="755:51">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="757:17" pos:end="757:64"><expr pos:start="757:17" pos:end="757:63"><call pos:start="757:17" pos:end="757:63"><name pos:start="757:17" pos:end="757:43">gen_op_ljmp_protected_T0_T1</name><argument_list pos:start="757:44" pos:end="757:63">(<argument pos:start="757:45" pos:end="757:62"><expr pos:start="757:45" pos:end="757:62"><name pos:start="757:45" pos:end="757:49"><name pos:start="757:45" pos:end="757:45">s</name><operator pos:start="757:46" pos:end="757:47">-&gt;</operator><name pos:start="757:48" pos:end="757:49">pc</name></name> <operator pos:start="757:51" pos:end="757:51">-</operator> <name pos:start="757:53" pos:end="757:62"><name pos:start="757:53" pos:end="757:53">s</name><operator pos:start="757:54" pos:end="757:55">-&gt;</operator><name pos:start="757:56" pos:end="757:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="759:15" pos:end="767:13">else <block pos:start="759:20" pos:end="767:13">{<block_content pos:start="761:17" pos:end="765:32">

                <expr_stmt pos:start="761:17" pos:end="761:72"><expr pos:start="761:17" pos:end="761:71"><call pos:start="761:17" pos:end="761:71"><name pos:start="761:17" pos:end="761:37">gen_op_movl_seg_T0_vm</name><argument_list pos:start="761:38" pos:end="761:71">(<argument pos:start="761:39" pos:end="761:70"><expr pos:start="761:39" pos:end="761:70"><call pos:start="761:39" pos:end="761:70"><name pos:start="761:39" pos:end="761:46">offsetof</name><argument_list pos:start="761:47" pos:end="761:70">(<argument pos:start="761:48" pos:end="761:58"><expr pos:start="761:48" pos:end="761:58"><name pos:start="761:48" pos:end="761:58">CPUX86State</name></expr></argument>,<argument pos:start="761:60" pos:end="761:69"><expr pos:start="761:60" pos:end="761:69"><name pos:start="761:60" pos:end="761:69"><name pos:start="761:60" pos:end="761:63">segs</name><index pos:start="761:64" pos:end="761:69">[<expr pos:start="761:65" pos:end="761:68"><name pos:start="761:65" pos:end="761:68">R_CS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="763:17" pos:end="763:36"><expr pos:start="763:17" pos:end="763:35"><call pos:start="763:17" pos:end="763:35"><name pos:start="763:17" pos:end="763:33">gen_op_movl_T0_T1</name><argument_list pos:start="763:34" pos:end="763:35">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="765:17" pos:end="765:32"><expr pos:start="765:17" pos:end="765:31"><call pos:start="765:17" pos:end="765:31"><name pos:start="765:17" pos:end="765:29">gen_op_jmp_T0</name><argument_list pos:start="765:30" pos:end="765:31">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="769:13" pos:end="769:23"><expr pos:start="769:13" pos:end="769:22"><call pos:start="769:13" pos:end="769:22"><name pos:start="769:13" pos:end="769:19">gen_eob</name><argument_list pos:start="769:20" pos:end="769:22">(<argument pos:start="769:21" pos:end="769:21"><expr pos:start="769:21" pos:end="769:21"><name pos:start="769:21" pos:end="769:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="771:13" pos:end="771:18">break;</break>

        <case pos:start="773:9" pos:end="773:15">case <expr pos:start="773:14" pos:end="773:14"><literal type="number" pos:start="773:14" pos:end="773:14">6</literal></expr>:</case> <comment type="block" pos:start="773:17" pos:end="773:29">/* push Ev */</comment>

            <expr_stmt pos:start="775:13" pos:end="775:27"><expr pos:start="775:13" pos:end="775:26"><call pos:start="775:13" pos:end="775:26"><name pos:start="775:13" pos:end="775:23">gen_push_T0</name><argument_list pos:start="775:24" pos:end="775:26">(<argument pos:start="775:25" pos:end="775:25"><expr pos:start="775:25" pos:end="775:25"><name pos:start="775:25" pos:end="775:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="777:13" pos:end="777:18">break;</break>

        <default pos:start="779:9" pos:end="779:16">default:</default>

            <goto pos:start="781:13" pos:end="781:28">goto <name pos:start="781:18" pos:end="781:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="785:9" pos:end="785:14">break;</break>



    <case pos:start="789:5" pos:end="789:14">case <expr pos:start="789:10" pos:end="789:13"><literal type="number" pos:start="789:10" pos:end="789:13">0x84</literal></expr>:</case> <comment type="block" pos:start="789:16" pos:end="789:32">/* test Ev, Gv */</comment>

    <case pos:start="791:5" pos:end="791:14">case <expr pos:start="791:10" pos:end="791:13"><literal type="number" pos:start="791:10" pos:end="791:13">0x85</literal></expr>:</case> 

        <if_stmt pos:start="793:9" pos:end="799:43"><if pos:start="793:9" pos:end="795:25">if <condition pos:start="793:12" pos:end="793:25">(<expr pos:start="793:13" pos:end="793:24"><operator pos:start="793:13" pos:end="793:13">(</operator><name pos:start="793:14" pos:end="793:14">b</name> <operator pos:start="793:16" pos:end="793:16">&amp;</operator> <literal type="number" pos:start="793:18" pos:end="793:18">1</literal><operator pos:start="793:19" pos:end="793:19">)</operator> <operator pos:start="793:21" pos:end="793:22">==</operator> <literal type="number" pos:start="793:24" pos:end="793:24">0</literal></expr>)</condition><block type="pseudo" pos:start="795:13" pos:end="795:25"><block_content pos:start="795:13" pos:end="795:25">

            <expr_stmt pos:start="795:13" pos:end="795:25"><expr pos:start="795:13" pos:end="795:24"><name pos:start="795:13" pos:end="795:14">ot</name> <operator pos:start="795:16" pos:end="795:16">=</operator> <name pos:start="795:18" pos:end="795:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="797:9" pos:end="799:43">else<block type="pseudo" pos:start="799:13" pos:end="799:43"><block_content pos:start="799:13" pos:end="799:43">

            <expr_stmt pos:start="799:13" pos:end="799:43"><expr pos:start="799:13" pos:end="799:42"><name pos:start="799:13" pos:end="799:14">ot</name> <operator pos:start="799:16" pos:end="799:16">=</operator> <ternary pos:start="799:18" pos:end="799:42"><condition pos:start="799:18" pos:end="799:24"><expr pos:start="799:18" pos:end="799:22"><name pos:start="799:18" pos:end="799:22">dflag</name></expr> ?</condition><then pos:start="799:26" pos:end="799:32"> <expr pos:start="799:26" pos:end="799:32"><name pos:start="799:26" pos:end="799:32">OT_LONG</name></expr> </then><else pos:start="799:34" pos:end="799:42">: <expr pos:start="799:36" pos:end="799:42"><name pos:start="799:36" pos:end="799:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="803:9" pos:end="803:35"><expr pos:start="803:9" pos:end="803:34"><name pos:start="803:9" pos:end="803:13">modrm</name> <operator pos:start="803:15" pos:end="803:15">=</operator> <call pos:start="803:17" pos:end="803:34"><name pos:start="803:17" pos:end="803:25">ldub_code</name><argument_list pos:start="803:26" pos:end="803:34">(<argument pos:start="803:27" pos:end="803:33"><expr pos:start="803:27" pos:end="803:33"><name pos:start="803:27" pos:end="803:31"><name pos:start="803:27" pos:end="803:27">s</name><operator pos:start="803:28" pos:end="803:29">-&gt;</operator><name pos:start="803:30" pos:end="803:31">pc</name></name><operator pos:start="803:32" pos:end="803:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="805:9" pos:end="805:31"><expr pos:start="805:9" pos:end="805:30"><name pos:start="805:9" pos:end="805:11">mod</name> <operator pos:start="805:13" pos:end="805:13">=</operator> <operator pos:start="805:15" pos:end="805:15">(</operator><name pos:start="805:16" pos:end="805:20">modrm</name> <operator pos:start="805:22" pos:end="805:23">&gt;&gt;</operator> <literal type="number" pos:start="805:25" pos:end="805:25">6</literal><operator pos:start="805:26" pos:end="805:26">)</operator> <operator pos:start="805:28" pos:end="805:28">&amp;</operator> <literal type="number" pos:start="805:30" pos:end="805:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="807:9" pos:end="807:23"><expr pos:start="807:9" pos:end="807:22"><name pos:start="807:9" pos:end="807:10">rm</name> <operator pos:start="807:12" pos:end="807:12">=</operator> <name pos:start="807:14" pos:end="807:18">modrm</name> <operator pos:start="807:20" pos:end="807:20">&amp;</operator> <literal type="number" pos:start="807:22" pos:end="807:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="809:9" pos:end="809:31"><expr pos:start="809:9" pos:end="809:30"><name pos:start="809:9" pos:end="809:11">reg</name> <operator pos:start="809:13" pos:end="809:13">=</operator> <operator pos:start="809:15" pos:end="809:15">(</operator><name pos:start="809:16" pos:end="809:20">modrm</name> <operator pos:start="809:22" pos:end="809:23">&gt;&gt;</operator> <literal type="number" pos:start="809:25" pos:end="809:25">3</literal><operator pos:start="809:26" pos:end="809:26">)</operator> <operator pos:start="809:28" pos:end="809:28">&amp;</operator> <literal type="number" pos:start="809:30" pos:end="809:30">7</literal></expr>;</expr_stmt>

        

        <expr_stmt pos:start="813:9" pos:end="813:49"><expr pos:start="813:9" pos:end="813:48"><call pos:start="813:9" pos:end="813:48"><name pos:start="813:9" pos:end="813:22">gen_ldst_modrm</name><argument_list pos:start="813:23" pos:end="813:48">(<argument pos:start="813:24" pos:end="813:24"><expr pos:start="813:24" pos:end="813:24"><name pos:start="813:24" pos:end="813:24">s</name></expr></argument>, <argument pos:start="813:27" pos:end="813:31"><expr pos:start="813:27" pos:end="813:31"><name pos:start="813:27" pos:end="813:31">modrm</name></expr></argument>, <argument pos:start="813:34" pos:end="813:35"><expr pos:start="813:34" pos:end="813:35"><name pos:start="813:34" pos:end="813:35">ot</name></expr></argument>, <argument pos:start="813:38" pos:end="813:44"><expr pos:start="813:38" pos:end="813:44"><name pos:start="813:38" pos:end="813:44">OR_TMP0</name></expr></argument>, <argument pos:start="813:47" pos:end="813:47"><expr pos:start="813:47" pos:end="813:47"><literal type="number" pos:start="813:47" pos:end="813:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="815:9" pos:end="815:49"><expr pos:start="815:9" pos:end="815:48"><name pos:start="815:9" pos:end="815:46"><name pos:start="815:9" pos:end="815:25">gen_op_mov_TN_reg</name><index pos:start="815:26" pos:end="815:29">[<expr pos:start="815:27" pos:end="815:28"><name pos:start="815:27" pos:end="815:28">ot</name></expr>]</index><index pos:start="815:30" pos:end="815:32">[<expr pos:start="815:31" pos:end="815:31"><literal type="number" pos:start="815:31" pos:end="815:31">1</literal></expr>]</index><index pos:start="815:33" pos:end="815:46">[<expr pos:start="815:34" pos:end="815:45"><name pos:start="815:34" pos:end="815:36">reg</name> <operator pos:start="815:38" pos:end="815:38">+</operator> <name pos:start="815:40" pos:end="815:45">OR_EAX</name></expr>]</index></name><operator pos:start="815:47" pos:end="815:47">(</operator><operator pos:start="815:48" pos:end="815:48">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="817:9" pos:end="817:32"><expr pos:start="817:9" pos:end="817:31"><call pos:start="817:9" pos:end="817:31"><name pos:start="817:9" pos:end="817:29">gen_op_testl_T0_T1_cc</name><argument_list pos:start="817:30" pos:end="817:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="819:9" pos:end="819:37"><expr pos:start="819:9" pos:end="819:36"><name pos:start="819:9" pos:end="819:16"><name pos:start="819:9" pos:end="819:9">s</name><operator pos:start="819:10" pos:end="819:11">-&gt;</operator><name pos:start="819:12" pos:end="819:16">cc_op</name></name> <operator pos:start="819:18" pos:end="819:18">=</operator> <name pos:start="819:20" pos:end="819:31">CC_OP_LOGICB</name> <operator pos:start="819:33" pos:end="819:33">+</operator> <name pos:start="819:35" pos:end="819:36">ot</name></expr>;</expr_stmt>

        <break pos:start="821:9" pos:end="821:14">break;</break>

        

    <case pos:start="825:5" pos:end="825:14">case <expr pos:start="825:10" pos:end="825:13"><literal type="number" pos:start="825:10" pos:end="825:13">0xa8</literal></expr>:</case> <comment type="block" pos:start="825:16" pos:end="825:33">/* test eAX, Iv */</comment>

    <case pos:start="827:5" pos:end="827:14">case <expr pos:start="827:10" pos:end="827:13"><literal type="number" pos:start="827:10" pos:end="827:13">0xa9</literal></expr>:</case>

        <if_stmt pos:start="829:9" pos:end="835:43"><if pos:start="829:9" pos:end="831:25">if <condition pos:start="829:12" pos:end="829:25">(<expr pos:start="829:13" pos:end="829:24"><operator pos:start="829:13" pos:end="829:13">(</operator><name pos:start="829:14" pos:end="829:14">b</name> <operator pos:start="829:16" pos:end="829:16">&amp;</operator> <literal type="number" pos:start="829:18" pos:end="829:18">1</literal><operator pos:start="829:19" pos:end="829:19">)</operator> <operator pos:start="829:21" pos:end="829:22">==</operator> <literal type="number" pos:start="829:24" pos:end="829:24">0</literal></expr>)</condition><block type="pseudo" pos:start="831:13" pos:end="831:25"><block_content pos:start="831:13" pos:end="831:25">

            <expr_stmt pos:start="831:13" pos:end="831:25"><expr pos:start="831:13" pos:end="831:24"><name pos:start="831:13" pos:end="831:14">ot</name> <operator pos:start="831:16" pos:end="831:16">=</operator> <name pos:start="831:18" pos:end="831:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="833:9" pos:end="835:43">else<block type="pseudo" pos:start="835:13" pos:end="835:43"><block_content pos:start="835:13" pos:end="835:43">

            <expr_stmt pos:start="835:13" pos:end="835:43"><expr pos:start="835:13" pos:end="835:42"><name pos:start="835:13" pos:end="835:14">ot</name> <operator pos:start="835:16" pos:end="835:16">=</operator> <ternary pos:start="835:18" pos:end="835:42"><condition pos:start="835:18" pos:end="835:24"><expr pos:start="835:18" pos:end="835:22"><name pos:start="835:18" pos:end="835:22">dflag</name></expr> ?</condition><then pos:start="835:26" pos:end="835:32"> <expr pos:start="835:26" pos:end="835:32"><name pos:start="835:26" pos:end="835:32">OT_LONG</name></expr> </then><else pos:start="835:34" pos:end="835:42">: <expr pos:start="835:36" pos:end="835:42"><name pos:start="835:36" pos:end="835:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="837:9" pos:end="837:30"><expr pos:start="837:9" pos:end="837:29"><name pos:start="837:9" pos:end="837:11">val</name> <operator pos:start="837:13" pos:end="837:13">=</operator> <call pos:start="837:15" pos:end="837:29"><name pos:start="837:15" pos:end="837:22">insn_get</name><argument_list pos:start="837:23" pos:end="837:29">(<argument pos:start="837:24" pos:end="837:24"><expr pos:start="837:24" pos:end="837:24"><name pos:start="837:24" pos:end="837:24">s</name></expr></argument>, <argument pos:start="837:27" pos:end="837:28"><expr pos:start="837:27" pos:end="837:28"><name pos:start="837:27" pos:end="837:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="841:9" pos:end="841:43"><expr pos:start="841:9" pos:end="841:42"><name pos:start="841:9" pos:end="841:40"><name pos:start="841:9" pos:end="841:25">gen_op_mov_TN_reg</name><index pos:start="841:26" pos:end="841:29">[<expr pos:start="841:27" pos:end="841:28"><name pos:start="841:27" pos:end="841:28">ot</name></expr>]</index><index pos:start="841:30" pos:end="841:32">[<expr pos:start="841:31" pos:end="841:31"><literal type="number" pos:start="841:31" pos:end="841:31">0</literal></expr>]</index><index pos:start="841:33" pos:end="841:40">[<expr pos:start="841:34" pos:end="841:39"><name pos:start="841:34" pos:end="841:39">OR_EAX</name></expr>]</index></name><operator pos:start="841:41" pos:end="841:41">(</operator><operator pos:start="841:42" pos:end="841:42">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="843:9" pos:end="843:31"><expr pos:start="843:9" pos:end="843:30"><call pos:start="843:9" pos:end="843:30"><name pos:start="843:9" pos:end="843:25">gen_op_movl_T1_im</name><argument_list pos:start="843:26" pos:end="843:30">(<argument pos:start="843:27" pos:end="843:29"><expr pos:start="843:27" pos:end="843:29"><name pos:start="843:27" pos:end="843:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="845:9" pos:end="845:32"><expr pos:start="845:9" pos:end="845:31"><call pos:start="845:9" pos:end="845:31"><name pos:start="845:9" pos:end="845:29">gen_op_testl_T0_T1_cc</name><argument_list pos:start="845:30" pos:end="845:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="847:9" pos:end="847:37"><expr pos:start="847:9" pos:end="847:36"><name pos:start="847:9" pos:end="847:16"><name pos:start="847:9" pos:end="847:9">s</name><operator pos:start="847:10" pos:end="847:11">-&gt;</operator><name pos:start="847:12" pos:end="847:16">cc_op</name></name> <operator pos:start="847:18" pos:end="847:18">=</operator> <name pos:start="847:20" pos:end="847:31">CC_OP_LOGICB</name> <operator pos:start="847:33" pos:end="847:33">+</operator> <name pos:start="847:35" pos:end="847:36">ot</name></expr>;</expr_stmt>

        <break pos:start="849:9" pos:end="849:14">break;</break>

        

    <case pos:start="853:5" pos:end="853:14">case <expr pos:start="853:10" pos:end="853:13"><literal type="number" pos:start="853:10" pos:end="853:13">0x98</literal></expr>:</case> <comment type="block" pos:start="853:16" pos:end="853:29">/* CWDE/CBW */</comment>

        <if_stmt pos:start="855:9" pos:end="861:34"><if pos:start="855:9" pos:end="857:35">if <condition pos:start="855:12" pos:end="855:18">(<expr pos:start="855:13" pos:end="855:17"><name pos:start="855:13" pos:end="855:17">dflag</name></expr>)</condition><block type="pseudo" pos:start="857:13" pos:end="857:35"><block_content pos:start="857:13" pos:end="857:35">

            <expr_stmt pos:start="857:13" pos:end="857:35"><expr pos:start="857:13" pos:end="857:34"><call pos:start="857:13" pos:end="857:34"><name pos:start="857:13" pos:end="857:32">gen_op_movswl_EAX_AX</name><argument_list pos:start="857:33" pos:end="857:34">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="859:9" pos:end="861:34">else<block type="pseudo" pos:start="861:13" pos:end="861:34"><block_content pos:start="861:13" pos:end="861:34">

            <expr_stmt pos:start="861:13" pos:end="861:34"><expr pos:start="861:13" pos:end="861:33"><call pos:start="861:13" pos:end="861:33"><name pos:start="861:13" pos:end="861:31">gen_op_movsbw_AX_AL</name><argument_list pos:start="861:32" pos:end="861:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="863:9" pos:end="863:14">break;</break>

    <case pos:start="865:5" pos:end="865:14">case <expr pos:start="865:10" pos:end="865:13"><literal type="number" pos:start="865:10" pos:end="865:13">0x99</literal></expr>:</case> <comment type="block" pos:start="865:16" pos:end="865:28">/* CDQ/CWD */</comment>

        <if_stmt pos:start="867:9" pos:end="873:34"><if pos:start="867:9" pos:end="869:36">if <condition pos:start="867:12" pos:end="867:18">(<expr pos:start="867:13" pos:end="867:17"><name pos:start="867:13" pos:end="867:17">dflag</name></expr>)</condition><block type="pseudo" pos:start="869:13" pos:end="869:36"><block_content pos:start="869:13" pos:end="869:36">

            <expr_stmt pos:start="869:13" pos:end="869:36"><expr pos:start="869:13" pos:end="869:35"><call pos:start="869:13" pos:end="869:35"><name pos:start="869:13" pos:end="869:33">gen_op_movslq_EDX_EAX</name><argument_list pos:start="869:34" pos:end="869:35">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="871:9" pos:end="873:34">else<block type="pseudo" pos:start="873:13" pos:end="873:34"><block_content pos:start="873:13" pos:end="873:34">

            <expr_stmt pos:start="873:13" pos:end="873:34"><expr pos:start="873:13" pos:end="873:33"><call pos:start="873:13" pos:end="873:33"><name pos:start="873:13" pos:end="873:31">gen_op_movswl_DX_AX</name><argument_list pos:start="873:32" pos:end="873:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="875:9" pos:end="875:14">break;</break>

    <case pos:start="877:5" pos:end="877:15">case <expr pos:start="877:10" pos:end="877:14"><literal type="number" pos:start="877:10" pos:end="877:14">0x1af</literal></expr>:</case> <comment type="block" pos:start="877:17" pos:end="877:33">/* imul Gv, Ev */</comment>

    <case pos:start="879:5" pos:end="879:14">case <expr pos:start="879:10" pos:end="879:13"><literal type="number" pos:start="879:10" pos:end="879:13">0x69</literal></expr>:</case> <comment type="block" pos:start="879:16" pos:end="879:35">/* imul Gv, Ev, I */</comment>

    <case pos:start="881:5" pos:end="881:14">case <expr pos:start="881:10" pos:end="881:13"><literal type="number" pos:start="881:10" pos:end="881:13">0x6b</literal></expr>:</case>

        <expr_stmt pos:start="883:9" pos:end="883:39"><expr pos:start="883:9" pos:end="883:38"><name pos:start="883:9" pos:end="883:10">ot</name> <operator pos:start="883:12" pos:end="883:12">=</operator> <ternary pos:start="883:14" pos:end="883:38"><condition pos:start="883:14" pos:end="883:20"><expr pos:start="883:14" pos:end="883:18"><name pos:start="883:14" pos:end="883:18">dflag</name></expr> ?</condition><then pos:start="883:22" pos:end="883:28"> <expr pos:start="883:22" pos:end="883:28"><name pos:start="883:22" pos:end="883:28">OT_LONG</name></expr> </then><else pos:start="883:30" pos:end="883:38">: <expr pos:start="883:32" pos:end="883:38"><name pos:start="883:32" pos:end="883:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="885:9" pos:end="885:35"><expr pos:start="885:9" pos:end="885:34"><name pos:start="885:9" pos:end="885:13">modrm</name> <operator pos:start="885:15" pos:end="885:15">=</operator> <call pos:start="885:17" pos:end="885:34"><name pos:start="885:17" pos:end="885:25">ldub_code</name><argument_list pos:start="885:26" pos:end="885:34">(<argument pos:start="885:27" pos:end="885:33"><expr pos:start="885:27" pos:end="885:33"><name pos:start="885:27" pos:end="885:31"><name pos:start="885:27" pos:end="885:27">s</name><operator pos:start="885:28" pos:end="885:29">-&gt;</operator><name pos:start="885:30" pos:end="885:31">pc</name></name><operator pos:start="885:32" pos:end="885:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="887:9" pos:end="887:42"><expr pos:start="887:9" pos:end="887:41"><name pos:start="887:9" pos:end="887:11">reg</name> <operator pos:start="887:13" pos:end="887:13">=</operator> <operator pos:start="887:15" pos:end="887:15">(</operator><operator pos:start="887:16" pos:end="887:16">(</operator><name pos:start="887:17" pos:end="887:21">modrm</name> <operator pos:start="887:23" pos:end="887:24">&gt;&gt;</operator> <literal type="number" pos:start="887:26" pos:end="887:26">3</literal><operator pos:start="887:27" pos:end="887:27">)</operator> <operator pos:start="887:29" pos:end="887:29">&amp;</operator> <literal type="number" pos:start="887:31" pos:end="887:31">7</literal><operator pos:start="887:32" pos:end="887:32">)</operator> <operator pos:start="887:34" pos:end="887:34">+</operator> <name pos:start="887:36" pos:end="887:41">OR_EAX</name></expr>;</expr_stmt>

        <expr_stmt pos:start="889:9" pos:end="889:49"><expr pos:start="889:9" pos:end="889:48"><call pos:start="889:9" pos:end="889:48"><name pos:start="889:9" pos:end="889:22">gen_ldst_modrm</name><argument_list pos:start="889:23" pos:end="889:48">(<argument pos:start="889:24" pos:end="889:24"><expr pos:start="889:24" pos:end="889:24"><name pos:start="889:24" pos:end="889:24">s</name></expr></argument>, <argument pos:start="889:27" pos:end="889:31"><expr pos:start="889:27" pos:end="889:31"><name pos:start="889:27" pos:end="889:31">modrm</name></expr></argument>, <argument pos:start="889:34" pos:end="889:35"><expr pos:start="889:34" pos:end="889:35"><name pos:start="889:34" pos:end="889:35">ot</name></expr></argument>, <argument pos:start="889:38" pos:end="889:44"><expr pos:start="889:38" pos:end="889:44"><name pos:start="889:38" pos:end="889:44">OR_TMP0</name></expr></argument>, <argument pos:start="889:47" pos:end="889:47"><expr pos:start="889:47" pos:end="889:47"><literal type="number" pos:start="889:47" pos:end="889:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="891:9" pos:end="907:9"><if pos:start="891:9" pos:end="897:9">if <condition pos:start="891:12" pos:end="891:22">(<expr pos:start="891:13" pos:end="891:21"><name pos:start="891:13" pos:end="891:13">b</name> <operator pos:start="891:15" pos:end="891:16">==</operator> <literal type="number" pos:start="891:18" pos:end="891:21">0x69</literal></expr>)</condition> <block pos:start="891:24" pos:end="897:9">{<block_content pos:start="893:13" pos:end="895:35">

            <expr_stmt pos:start="893:13" pos:end="893:34"><expr pos:start="893:13" pos:end="893:33"><name pos:start="893:13" pos:end="893:15">val</name> <operator pos:start="893:17" pos:end="893:17">=</operator> <call pos:start="893:19" pos:end="893:33"><name pos:start="893:19" pos:end="893:26">insn_get</name><argument_list pos:start="893:27" pos:end="893:33">(<argument pos:start="893:28" pos:end="893:28"><expr pos:start="893:28" pos:end="893:28"><name pos:start="893:28" pos:end="893:28">s</name></expr></argument>, <argument pos:start="893:31" pos:end="893:32"><expr pos:start="893:31" pos:end="893:32"><name pos:start="893:31" pos:end="893:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="895:13" pos:end="895:35"><expr pos:start="895:13" pos:end="895:34"><call pos:start="895:13" pos:end="895:34"><name pos:start="895:13" pos:end="895:29">gen_op_movl_T1_im</name><argument_list pos:start="895:30" pos:end="895:34">(<argument pos:start="895:31" pos:end="895:33"><expr pos:start="895:31" pos:end="895:33"><name pos:start="895:31" pos:end="895:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="897:11" pos:end="903:9">else if <condition pos:start="897:19" pos:end="897:29">(<expr pos:start="897:20" pos:end="897:28"><name pos:start="897:20" pos:end="897:20">b</name> <operator pos:start="897:22" pos:end="897:23">==</operator> <literal type="number" pos:start="897:25" pos:end="897:28">0x6b</literal></expr>)</condition> <block pos:start="897:31" pos:end="903:9">{<block_content pos:start="899:13" pos:end="901:35">

            <expr_stmt pos:start="899:13" pos:end="899:47"><expr pos:start="899:13" pos:end="899:46"><name pos:start="899:13" pos:end="899:15">val</name> <operator pos:start="899:17" pos:end="899:17">=</operator> <operator pos:start="899:19" pos:end="899:19">(</operator><name pos:start="899:20" pos:end="899:25">int8_t</name><operator pos:start="899:26" pos:end="899:26">)</operator><call pos:start="899:27" pos:end="899:46"><name pos:start="899:27" pos:end="899:34">insn_get</name><argument_list pos:start="899:35" pos:end="899:46">(<argument pos:start="899:36" pos:end="899:36"><expr pos:start="899:36" pos:end="899:36"><name pos:start="899:36" pos:end="899:36">s</name></expr></argument>, <argument pos:start="899:39" pos:end="899:45"><expr pos:start="899:39" pos:end="899:45"><name pos:start="899:39" pos:end="899:45">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="901:13" pos:end="901:35"><expr pos:start="901:13" pos:end="901:34"><call pos:start="901:13" pos:end="901:34"><name pos:start="901:13" pos:end="901:29">gen_op_movl_T1_im</name><argument_list pos:start="901:30" pos:end="901:34">(<argument pos:start="901:31" pos:end="901:33"><expr pos:start="901:31" pos:end="901:33"><name pos:start="901:31" pos:end="901:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="903:11" pos:end="907:9">else <block pos:start="903:16" pos:end="907:9">{<block_content pos:start="905:13" pos:end="905:44">

            <expr_stmt pos:start="905:13" pos:end="905:44"><expr pos:start="905:13" pos:end="905:43"><name pos:start="905:13" pos:end="905:41"><name pos:start="905:13" pos:end="905:29">gen_op_mov_TN_reg</name><index pos:start="905:30" pos:end="905:33">[<expr pos:start="905:31" pos:end="905:32"><name pos:start="905:31" pos:end="905:32">ot</name></expr>]</index><index pos:start="905:34" pos:end="905:36">[<expr pos:start="905:35" pos:end="905:35"><literal type="number" pos:start="905:35" pos:end="905:35">1</literal></expr>]</index><index pos:start="905:37" pos:end="905:41">[<expr pos:start="905:38" pos:end="905:40"><name pos:start="905:38" pos:end="905:40">reg</name></expr>]</index></name><operator pos:start="905:42" pos:end="905:42">(</operator><operator pos:start="905:43" pos:end="905:43">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="911:9" pos:end="919:9"><if pos:start="911:9" pos:end="915:9">if <condition pos:start="911:12" pos:end="911:26">(<expr pos:start="911:13" pos:end="911:25"><name pos:start="911:13" pos:end="911:14">ot</name> <operator pos:start="911:16" pos:end="911:17">==</operator> <name pos:start="911:19" pos:end="911:25">OT_LONG</name></expr>)</condition> <block pos:start="911:28" pos:end="915:9">{<block_content pos:start="913:13" pos:end="913:33">

            <expr_stmt pos:start="913:13" pos:end="913:33"><expr pos:start="913:13" pos:end="913:32"><call pos:start="913:13" pos:end="913:32"><name pos:start="913:13" pos:end="913:30">gen_op_imull_T0_T1</name><argument_list pos:start="913:31" pos:end="913:32">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="915:11" pos:end="919:9">else <block pos:start="915:16" pos:end="919:9">{<block_content pos:start="917:13" pos:end="917:33">

            <expr_stmt pos:start="917:13" pos:end="917:33"><expr pos:start="917:13" pos:end="917:32"><call pos:start="917:13" pos:end="917:32"><name pos:start="917:13" pos:end="917:30">gen_op_imulw_T0_T1</name><argument_list pos:start="917:31" pos:end="917:32">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="921:9" pos:end="921:37"><expr pos:start="921:9" pos:end="921:36"><name pos:start="921:9" pos:end="921:34"><name pos:start="921:9" pos:end="921:25">gen_op_mov_reg_T0</name><index pos:start="921:26" pos:end="921:29">[<expr pos:start="921:27" pos:end="921:28"><name pos:start="921:27" pos:end="921:28">ot</name></expr>]</index><index pos:start="921:30" pos:end="921:34">[<expr pos:start="921:31" pos:end="921:33"><name pos:start="921:31" pos:end="921:33">reg</name></expr>]</index></name><operator pos:start="921:35" pos:end="921:35">(</operator><operator pos:start="921:36" pos:end="921:36">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="923:9" pos:end="923:35"><expr pos:start="923:9" pos:end="923:34"><name pos:start="923:9" pos:end="923:16"><name pos:start="923:9" pos:end="923:9">s</name><operator pos:start="923:10" pos:end="923:11">-&gt;</operator><name pos:start="923:12" pos:end="923:16">cc_op</name></name> <operator pos:start="923:18" pos:end="923:18">=</operator> <name pos:start="923:20" pos:end="923:29">CC_OP_MULB</name> <operator pos:start="923:31" pos:end="923:31">+</operator> <name pos:start="923:33" pos:end="923:34">ot</name></expr>;</expr_stmt>

        <break pos:start="925:9" pos:end="925:14">break;</break>

    <case pos:start="927:5" pos:end="927:15">case <expr pos:start="927:10" pos:end="927:14"><literal type="number" pos:start="927:10" pos:end="927:14">0x1c0</literal></expr>:</case>

    <case pos:start="929:5" pos:end="929:15">case <expr pos:start="929:10" pos:end="929:14"><literal type="number" pos:start="929:10" pos:end="929:14">0x1c1</literal></expr>:</case> <comment type="block" pos:start="929:17" pos:end="929:33">/* xadd Ev, Gv */</comment>

        <if_stmt pos:start="931:9" pos:end="937:43"><if pos:start="931:9" pos:end="933:25">if <condition pos:start="931:12" pos:end="931:25">(<expr pos:start="931:13" pos:end="931:24"><operator pos:start="931:13" pos:end="931:13">(</operator><name pos:start="931:14" pos:end="931:14">b</name> <operator pos:start="931:16" pos:end="931:16">&amp;</operator> <literal type="number" pos:start="931:18" pos:end="931:18">1</literal><operator pos:start="931:19" pos:end="931:19">)</operator> <operator pos:start="931:21" pos:end="931:22">==</operator> <literal type="number" pos:start="931:24" pos:end="931:24">0</literal></expr>)</condition><block type="pseudo" pos:start="933:13" pos:end="933:25"><block_content pos:start="933:13" pos:end="933:25">

            <expr_stmt pos:start="933:13" pos:end="933:25"><expr pos:start="933:13" pos:end="933:24"><name pos:start="933:13" pos:end="933:14">ot</name> <operator pos:start="933:16" pos:end="933:16">=</operator> <name pos:start="933:18" pos:end="933:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="935:9" pos:end="937:43">else<block type="pseudo" pos:start="937:13" pos:end="937:43"><block_content pos:start="937:13" pos:end="937:43">

            <expr_stmt pos:start="937:13" pos:end="937:43"><expr pos:start="937:13" pos:end="937:42"><name pos:start="937:13" pos:end="937:14">ot</name> <operator pos:start="937:16" pos:end="937:16">=</operator> <ternary pos:start="937:18" pos:end="937:42"><condition pos:start="937:18" pos:end="937:24"><expr pos:start="937:18" pos:end="937:22"><name pos:start="937:18" pos:end="937:22">dflag</name></expr> ?</condition><then pos:start="937:26" pos:end="937:32"> <expr pos:start="937:26" pos:end="937:32"><name pos:start="937:26" pos:end="937:32">OT_LONG</name></expr> </then><else pos:start="937:34" pos:end="937:42">: <expr pos:start="937:36" pos:end="937:42"><name pos:start="937:36" pos:end="937:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="939:9" pos:end="939:35"><expr pos:start="939:9" pos:end="939:34"><name pos:start="939:9" pos:end="939:13">modrm</name> <operator pos:start="939:15" pos:end="939:15">=</operator> <call pos:start="939:17" pos:end="939:34"><name pos:start="939:17" pos:end="939:25">ldub_code</name><argument_list pos:start="939:26" pos:end="939:34">(<argument pos:start="939:27" pos:end="939:33"><expr pos:start="939:27" pos:end="939:33"><name pos:start="939:27" pos:end="939:31"><name pos:start="939:27" pos:end="939:27">s</name><operator pos:start="939:28" pos:end="939:29">-&gt;</operator><name pos:start="939:30" pos:end="939:31">pc</name></name><operator pos:start="939:32" pos:end="939:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="941:9" pos:end="941:31"><expr pos:start="941:9" pos:end="941:30"><name pos:start="941:9" pos:end="941:11">reg</name> <operator pos:start="941:13" pos:end="941:13">=</operator> <operator pos:start="941:15" pos:end="941:15">(</operator><name pos:start="941:16" pos:end="941:20">modrm</name> <operator pos:start="941:22" pos:end="941:23">&gt;&gt;</operator> <literal type="number" pos:start="941:25" pos:end="941:25">3</literal><operator pos:start="941:26" pos:end="941:26">)</operator> <operator pos:start="941:28" pos:end="941:28">&amp;</operator> <literal type="number" pos:start="941:30" pos:end="941:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="943:9" pos:end="943:31"><expr pos:start="943:9" pos:end="943:30"><name pos:start="943:9" pos:end="943:11">mod</name> <operator pos:start="943:13" pos:end="943:13">=</operator> <operator pos:start="943:15" pos:end="943:15">(</operator><name pos:start="943:16" pos:end="943:20">modrm</name> <operator pos:start="943:22" pos:end="943:23">&gt;&gt;</operator> <literal type="number" pos:start="943:25" pos:end="943:25">6</literal><operator pos:start="943:26" pos:end="943:26">)</operator> <operator pos:start="943:28" pos:end="943:28">&amp;</operator> <literal type="number" pos:start="943:30" pos:end="943:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="945:9" pos:end="973:9"><if pos:start="945:9" pos:end="959:9">if <condition pos:start="945:12" pos:end="945:21">(<expr pos:start="945:13" pos:end="945:20"><name pos:start="945:13" pos:end="945:15">mod</name> <operator pos:start="945:17" pos:end="945:18">==</operator> <literal type="number" pos:start="945:20" pos:end="945:20">3</literal></expr>)</condition> <block pos:start="945:23" pos:end="959:9">{<block_content pos:start="947:13" pos:end="957:40">

            <expr_stmt pos:start="947:13" pos:end="947:27"><expr pos:start="947:13" pos:end="947:26"><name pos:start="947:13" pos:end="947:14">rm</name> <operator pos:start="947:16" pos:end="947:16">=</operator> <name pos:start="947:18" pos:end="947:22">modrm</name> <operator pos:start="947:24" pos:end="947:24">&amp;</operator> <literal type="number" pos:start="947:26" pos:end="947:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="949:13" pos:end="949:44"><expr pos:start="949:13" pos:end="949:43"><name pos:start="949:13" pos:end="949:41"><name pos:start="949:13" pos:end="949:29">gen_op_mov_TN_reg</name><index pos:start="949:30" pos:end="949:33">[<expr pos:start="949:31" pos:end="949:32"><name pos:start="949:31" pos:end="949:32">ot</name></expr>]</index><index pos:start="949:34" pos:end="949:36">[<expr pos:start="949:35" pos:end="949:35"><literal type="number" pos:start="949:35" pos:end="949:35">0</literal></expr>]</index><index pos:start="949:37" pos:end="949:41">[<expr pos:start="949:38" pos:end="949:40"><name pos:start="949:38" pos:end="949:40">reg</name></expr>]</index></name><operator pos:start="949:42" pos:end="949:42">(</operator><operator pos:start="949:43" pos:end="949:43">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="951:13" pos:end="951:43"><expr pos:start="951:13" pos:end="951:42"><name pos:start="951:13" pos:end="951:40"><name pos:start="951:13" pos:end="951:29">gen_op_mov_TN_reg</name><index pos:start="951:30" pos:end="951:33">[<expr pos:start="951:31" pos:end="951:32"><name pos:start="951:31" pos:end="951:32">ot</name></expr>]</index><index pos:start="951:34" pos:end="951:36">[<expr pos:start="951:35" pos:end="951:35"><literal type="number" pos:start="951:35" pos:end="951:35">1</literal></expr>]</index><index pos:start="951:37" pos:end="951:40">[<expr pos:start="951:38" pos:end="951:39"><name pos:start="951:38" pos:end="951:39">rm</name></expr>]</index></name><operator pos:start="951:41" pos:end="951:41">(</operator><operator pos:start="951:42" pos:end="951:42">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="953:13" pos:end="953:32"><expr pos:start="953:13" pos:end="953:31"><call pos:start="953:13" pos:end="953:31"><name pos:start="953:13" pos:end="953:29">gen_op_addl_T0_T1</name><argument_list pos:start="953:30" pos:end="953:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="955:13" pos:end="955:41"><expr pos:start="955:13" pos:end="955:40"><name pos:start="955:13" pos:end="955:38"><name pos:start="955:13" pos:end="955:29">gen_op_mov_reg_T1</name><index pos:start="955:30" pos:end="955:33">[<expr pos:start="955:31" pos:end="955:32"><name pos:start="955:31" pos:end="955:32">ot</name></expr>]</index><index pos:start="955:34" pos:end="955:38">[<expr pos:start="955:35" pos:end="955:37"><name pos:start="955:35" pos:end="955:37">reg</name></expr>]</index></name><operator pos:start="955:39" pos:end="955:39">(</operator><operator pos:start="955:40" pos:end="955:40">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="957:13" pos:end="957:40"><expr pos:start="957:13" pos:end="957:39"><name pos:start="957:13" pos:end="957:37"><name pos:start="957:13" pos:end="957:29">gen_op_mov_reg_T0</name><index pos:start="957:30" pos:end="957:33">[<expr pos:start="957:31" pos:end="957:32"><name pos:start="957:31" pos:end="957:32">ot</name></expr>]</index><index pos:start="957:34" pos:end="957:37">[<expr pos:start="957:35" pos:end="957:36"><name pos:start="957:35" pos:end="957:36">rm</name></expr>]</index></name><operator pos:start="957:38" pos:end="957:38">(</operator><operator pos:start="957:39" pos:end="957:39">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="959:11" pos:end="973:9">else <block pos:start="959:16" pos:end="973:9">{<block_content pos:start="961:13" pos:end="971:41">

            <expr_stmt pos:start="961:13" pos:end="961:61"><expr pos:start="961:13" pos:end="961:60"><call pos:start="961:13" pos:end="961:60"><name pos:start="961:13" pos:end="961:25">gen_lea_modrm</name><argument_list pos:start="961:26" pos:end="961:60">(<argument pos:start="961:27" pos:end="961:27"><expr pos:start="961:27" pos:end="961:27"><name pos:start="961:27" pos:end="961:27">s</name></expr></argument>, <argument pos:start="961:30" pos:end="961:34"><expr pos:start="961:30" pos:end="961:34"><name pos:start="961:30" pos:end="961:34">modrm</name></expr></argument>, <argument pos:start="961:37" pos:end="961:45"><expr pos:start="961:37" pos:end="961:45"><operator pos:start="961:37" pos:end="961:37">&amp;</operator><name pos:start="961:38" pos:end="961:45">reg_addr</name></expr></argument>, <argument pos:start="961:48" pos:end="961:59"><expr pos:start="961:48" pos:end="961:59"><operator pos:start="961:48" pos:end="961:48">&amp;</operator><name pos:start="961:49" pos:end="961:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="963:13" pos:end="963:44"><expr pos:start="963:13" pos:end="963:43"><name pos:start="963:13" pos:end="963:41"><name pos:start="963:13" pos:end="963:29">gen_op_mov_TN_reg</name><index pos:start="963:30" pos:end="963:33">[<expr pos:start="963:31" pos:end="963:32"><name pos:start="963:31" pos:end="963:32">ot</name></expr>]</index><index pos:start="963:34" pos:end="963:36">[<expr pos:start="963:35" pos:end="963:35"><literal type="number" pos:start="963:35" pos:end="963:35">0</literal></expr>]</index><index pos:start="963:37" pos:end="963:41">[<expr pos:start="963:38" pos:end="963:40"><name pos:start="963:38" pos:end="963:40">reg</name></expr>]</index></name><operator pos:start="963:42" pos:end="963:42">(</operator><operator pos:start="963:43" pos:end="963:43">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="965:13" pos:end="965:49"><expr pos:start="965:13" pos:end="965:48"><name pos:start="965:13" pos:end="965:46"><name pos:start="965:13" pos:end="965:27">gen_op_ld_T1_A0</name><index pos:start="965:28" pos:end="965:46">[<expr pos:start="965:29" pos:end="965:45"><name pos:start="965:29" pos:end="965:30">ot</name> <operator pos:start="965:32" pos:end="965:32">+</operator> <name pos:start="965:34" pos:end="965:45"><name pos:start="965:34" pos:end="965:34">s</name><operator pos:start="965:35" pos:end="965:36">-&gt;</operator><name pos:start="965:37" pos:end="965:45">mem_index</name></name></expr>]</index></name><operator pos:start="965:47" pos:end="965:47">(</operator><operator pos:start="965:48" pos:end="965:48">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="967:13" pos:end="967:32"><expr pos:start="967:13" pos:end="967:31"><call pos:start="967:13" pos:end="967:31"><name pos:start="967:13" pos:end="967:29">gen_op_addl_T0_T1</name><argument_list pos:start="967:30" pos:end="967:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="969:13" pos:end="969:49"><expr pos:start="969:13" pos:end="969:48"><name pos:start="969:13" pos:end="969:46"><name pos:start="969:13" pos:end="969:27">gen_op_st_T0_A0</name><index pos:start="969:28" pos:end="969:46">[<expr pos:start="969:29" pos:end="969:45"><name pos:start="969:29" pos:end="969:30">ot</name> <operator pos:start="969:32" pos:end="969:32">+</operator> <name pos:start="969:34" pos:end="969:45"><name pos:start="969:34" pos:end="969:34">s</name><operator pos:start="969:35" pos:end="969:36">-&gt;</operator><name pos:start="969:37" pos:end="969:45">mem_index</name></name></expr>]</index></name><operator pos:start="969:47" pos:end="969:47">(</operator><operator pos:start="969:48" pos:end="969:48">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="971:13" pos:end="971:41"><expr pos:start="971:13" pos:end="971:40"><name pos:start="971:13" pos:end="971:38"><name pos:start="971:13" pos:end="971:29">gen_op_mov_reg_T1</name><index pos:start="971:30" pos:end="971:33">[<expr pos:start="971:31" pos:end="971:32"><name pos:start="971:31" pos:end="971:32">ot</name></expr>]</index><index pos:start="971:34" pos:end="971:38">[<expr pos:start="971:35" pos:end="971:37"><name pos:start="971:35" pos:end="971:37">reg</name></expr>]</index></name><operator pos:start="971:39" pos:end="971:39">(</operator><operator pos:start="971:40" pos:end="971:40">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="975:9" pos:end="975:28"><expr pos:start="975:9" pos:end="975:27"><call pos:start="975:9" pos:end="975:27"><name pos:start="975:9" pos:end="975:25">gen_op_update2_cc</name><argument_list pos:start="975:26" pos:end="975:27">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="977:9" pos:end="977:35"><expr pos:start="977:9" pos:end="977:34"><name pos:start="977:9" pos:end="977:16"><name pos:start="977:9" pos:end="977:9">s</name><operator pos:start="977:10" pos:end="977:11">-&gt;</operator><name pos:start="977:12" pos:end="977:16">cc_op</name></name> <operator pos:start="977:18" pos:end="977:18">=</operator> <name pos:start="977:20" pos:end="977:29">CC_OP_ADDB</name> <operator pos:start="977:31" pos:end="977:31">+</operator> <name pos:start="977:33" pos:end="977:34">ot</name></expr>;</expr_stmt>

        <break pos:start="979:9" pos:end="979:14">break;</break>

    <case pos:start="981:5" pos:end="981:15">case <expr pos:start="981:10" pos:end="981:14"><literal type="number" pos:start="981:10" pos:end="981:14">0x1b0</literal></expr>:</case>

    <case pos:start="983:5" pos:end="983:15">case <expr pos:start="983:10" pos:end="983:14"><literal type="number" pos:start="983:10" pos:end="983:14">0x1b1</literal></expr>:</case> <comment type="block" pos:start="983:17" pos:end="983:36">/* cmpxchg Ev, Gv */</comment>

        <if_stmt pos:start="985:9" pos:end="991:43"><if pos:start="985:9" pos:end="987:25">if <condition pos:start="985:12" pos:end="985:25">(<expr pos:start="985:13" pos:end="985:24"><operator pos:start="985:13" pos:end="985:13">(</operator><name pos:start="985:14" pos:end="985:14">b</name> <operator pos:start="985:16" pos:end="985:16">&amp;</operator> <literal type="number" pos:start="985:18" pos:end="985:18">1</literal><operator pos:start="985:19" pos:end="985:19">)</operator> <operator pos:start="985:21" pos:end="985:22">==</operator> <literal type="number" pos:start="985:24" pos:end="985:24">0</literal></expr>)</condition><block type="pseudo" pos:start="987:13" pos:end="987:25"><block_content pos:start="987:13" pos:end="987:25">

            <expr_stmt pos:start="987:13" pos:end="987:25"><expr pos:start="987:13" pos:end="987:24"><name pos:start="987:13" pos:end="987:14">ot</name> <operator pos:start="987:16" pos:end="987:16">=</operator> <name pos:start="987:18" pos:end="987:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="989:9" pos:end="991:43">else<block type="pseudo" pos:start="991:13" pos:end="991:43"><block_content pos:start="991:13" pos:end="991:43">

            <expr_stmt pos:start="991:13" pos:end="991:43"><expr pos:start="991:13" pos:end="991:42"><name pos:start="991:13" pos:end="991:14">ot</name> <operator pos:start="991:16" pos:end="991:16">=</operator> <ternary pos:start="991:18" pos:end="991:42"><condition pos:start="991:18" pos:end="991:24"><expr pos:start="991:18" pos:end="991:22"><name pos:start="991:18" pos:end="991:22">dflag</name></expr> ?</condition><then pos:start="991:26" pos:end="991:32"> <expr pos:start="991:26" pos:end="991:32"><name pos:start="991:26" pos:end="991:32">OT_LONG</name></expr> </then><else pos:start="991:34" pos:end="991:42">: <expr pos:start="991:36" pos:end="991:42"><name pos:start="991:36" pos:end="991:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="993:9" pos:end="993:35"><expr pos:start="993:9" pos:end="993:34"><name pos:start="993:9" pos:end="993:13">modrm</name> <operator pos:start="993:15" pos:end="993:15">=</operator> <call pos:start="993:17" pos:end="993:34"><name pos:start="993:17" pos:end="993:25">ldub_code</name><argument_list pos:start="993:26" pos:end="993:34">(<argument pos:start="993:27" pos:end="993:33"><expr pos:start="993:27" pos:end="993:33"><name pos:start="993:27" pos:end="993:31"><name pos:start="993:27" pos:end="993:27">s</name><operator pos:start="993:28" pos:end="993:29">-&gt;</operator><name pos:start="993:30" pos:end="993:31">pc</name></name><operator pos:start="993:32" pos:end="993:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="995:9" pos:end="995:31"><expr pos:start="995:9" pos:end="995:30"><name pos:start="995:9" pos:end="995:11">reg</name> <operator pos:start="995:13" pos:end="995:13">=</operator> <operator pos:start="995:15" pos:end="995:15">(</operator><name pos:start="995:16" pos:end="995:20">modrm</name> <operator pos:start="995:22" pos:end="995:23">&gt;&gt;</operator> <literal type="number" pos:start="995:25" pos:end="995:25">3</literal><operator pos:start="995:26" pos:end="995:26">)</operator> <operator pos:start="995:28" pos:end="995:28">&amp;</operator> <literal type="number" pos:start="995:30" pos:end="995:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="997:9" pos:end="997:31"><expr pos:start="997:9" pos:end="997:30"><name pos:start="997:9" pos:end="997:11">mod</name> <operator pos:start="997:13" pos:end="997:13">=</operator> <operator pos:start="997:15" pos:end="997:15">(</operator><name pos:start="997:16" pos:end="997:20">modrm</name> <operator pos:start="997:22" pos:end="997:23">&gt;&gt;</operator> <literal type="number" pos:start="997:25" pos:end="997:25">6</literal><operator pos:start="997:26" pos:end="997:26">)</operator> <operator pos:start="997:28" pos:end="997:28">&amp;</operator> <literal type="number" pos:start="997:30" pos:end="997:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="999:9" pos:end="999:40"><expr pos:start="999:9" pos:end="999:39"><name pos:start="999:9" pos:end="999:37"><name pos:start="999:9" pos:end="999:25">gen_op_mov_TN_reg</name><index pos:start="999:26" pos:end="999:29">[<expr pos:start="999:27" pos:end="999:28"><name pos:start="999:27" pos:end="999:28">ot</name></expr>]</index><index pos:start="999:30" pos:end="999:32">[<expr pos:start="999:31" pos:end="999:31"><literal type="number" pos:start="999:31" pos:end="999:31">1</literal></expr>]</index><index pos:start="999:33" pos:end="999:37">[<expr pos:start="999:34" pos:end="999:36"><name pos:start="999:34" pos:end="999:36">reg</name></expr>]</index></name><operator pos:start="999:38" pos:end="999:38">(</operator><operator pos:start="999:39" pos:end="999:39">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="1001:9" pos:end="1019:9"><if pos:start="1001:9" pos:end="1011:9">if <condition pos:start="1001:12" pos:end="1001:21">(<expr pos:start="1001:13" pos:end="1001:20"><name pos:start="1001:13" pos:end="1001:15">mod</name> <operator pos:start="1001:17" pos:end="1001:18">==</operator> <literal type="number" pos:start="1001:20" pos:end="1001:20">3</literal></expr>)</condition> <block pos:start="1001:23" pos:end="1011:9">{<block_content pos:start="1003:13" pos:end="1009:40">

            <expr_stmt pos:start="1003:13" pos:end="1003:27"><expr pos:start="1003:13" pos:end="1003:26"><name pos:start="1003:13" pos:end="1003:14">rm</name> <operator pos:start="1003:16" pos:end="1003:16">=</operator> <name pos:start="1003:18" pos:end="1003:22">modrm</name> <operator pos:start="1003:24" pos:end="1003:24">&amp;</operator> <literal type="number" pos:start="1003:26" pos:end="1003:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1005:13" pos:end="1005:43"><expr pos:start="1005:13" pos:end="1005:42"><name pos:start="1005:13" pos:end="1005:40"><name pos:start="1005:13" pos:end="1005:29">gen_op_mov_TN_reg</name><index pos:start="1005:30" pos:end="1005:33">[<expr pos:start="1005:31" pos:end="1005:32"><name pos:start="1005:31" pos:end="1005:32">ot</name></expr>]</index><index pos:start="1005:34" pos:end="1005:36">[<expr pos:start="1005:35" pos:end="1005:35"><literal type="number" pos:start="1005:35" pos:end="1005:35">0</literal></expr>]</index><index pos:start="1005:37" pos:end="1005:40">[<expr pos:start="1005:38" pos:end="1005:39"><name pos:start="1005:38" pos:end="1005:39">rm</name></expr>]</index></name><operator pos:start="1005:41" pos:end="1005:41">(</operator><operator pos:start="1005:42" pos:end="1005:42">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1007:13" pos:end="1007:46"><expr pos:start="1007:13" pos:end="1007:45"><name pos:start="1007:13" pos:end="1007:43"><name pos:start="1007:13" pos:end="1007:39">gen_op_cmpxchg_T0_T1_EAX_cc</name><index pos:start="1007:40" pos:end="1007:43">[<expr pos:start="1007:41" pos:end="1007:42"><name pos:start="1007:41" pos:end="1007:42">ot</name></expr>]</index></name><operator pos:start="1007:44" pos:end="1007:44">(</operator><operator pos:start="1007:45" pos:end="1007:45">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1009:13" pos:end="1009:40"><expr pos:start="1009:13" pos:end="1009:39"><name pos:start="1009:13" pos:end="1009:37"><name pos:start="1009:13" pos:end="1009:29">gen_op_mov_reg_T0</name><index pos:start="1009:30" pos:end="1009:33">[<expr pos:start="1009:31" pos:end="1009:32"><name pos:start="1009:31" pos:end="1009:32">ot</name></expr>]</index><index pos:start="1009:34" pos:end="1009:37">[<expr pos:start="1009:35" pos:end="1009:36"><name pos:start="1009:35" pos:end="1009:36">rm</name></expr>]</index></name><operator pos:start="1009:38" pos:end="1009:38">(</operator><operator pos:start="1009:39" pos:end="1009:39">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1011:11" pos:end="1019:9">else <block pos:start="1011:16" pos:end="1019:9">{<block_content pos:start="1013:13" pos:end="1017:65">

            <expr_stmt pos:start="1013:13" pos:end="1013:61"><expr pos:start="1013:13" pos:end="1013:60"><call pos:start="1013:13" pos:end="1013:60"><name pos:start="1013:13" pos:end="1013:25">gen_lea_modrm</name><argument_list pos:start="1013:26" pos:end="1013:60">(<argument pos:start="1013:27" pos:end="1013:27"><expr pos:start="1013:27" pos:end="1013:27"><name pos:start="1013:27" pos:end="1013:27">s</name></expr></argument>, <argument pos:start="1013:30" pos:end="1013:34"><expr pos:start="1013:30" pos:end="1013:34"><name pos:start="1013:30" pos:end="1013:34">modrm</name></expr></argument>, <argument pos:start="1013:37" pos:end="1013:45"><expr pos:start="1013:37" pos:end="1013:45"><operator pos:start="1013:37" pos:end="1013:37">&amp;</operator><name pos:start="1013:38" pos:end="1013:45">reg_addr</name></expr></argument>, <argument pos:start="1013:48" pos:end="1013:59"><expr pos:start="1013:48" pos:end="1013:59"><operator pos:start="1013:48" pos:end="1013:48">&amp;</operator><name pos:start="1013:49" pos:end="1013:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1015:13" pos:end="1015:49"><expr pos:start="1015:13" pos:end="1015:48"><name pos:start="1015:13" pos:end="1015:46"><name pos:start="1015:13" pos:end="1015:27">gen_op_ld_T0_A0</name><index pos:start="1015:28" pos:end="1015:46">[<expr pos:start="1015:29" pos:end="1015:45"><name pos:start="1015:29" pos:end="1015:30">ot</name> <operator pos:start="1015:32" pos:end="1015:32">+</operator> <name pos:start="1015:34" pos:end="1015:45"><name pos:start="1015:34" pos:end="1015:34">s</name><operator pos:start="1015:35" pos:end="1015:36">-&gt;</operator><name pos:start="1015:37" pos:end="1015:45">mem_index</name></name></expr>]</index></name><operator pos:start="1015:47" pos:end="1015:47">(</operator><operator pos:start="1015:48" pos:end="1015:48">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1017:13" pos:end="1017:65"><expr pos:start="1017:13" pos:end="1017:64"><name pos:start="1017:13" pos:end="1017:62"><name pos:start="1017:13" pos:end="1017:43">gen_op_cmpxchg_mem_T0_T1_EAX_cc</name><index pos:start="1017:44" pos:end="1017:62">[<expr pos:start="1017:45" pos:end="1017:61"><name pos:start="1017:45" pos:end="1017:46">ot</name> <operator pos:start="1017:48" pos:end="1017:48">+</operator> <name pos:start="1017:50" pos:end="1017:61"><name pos:start="1017:50" pos:end="1017:50">s</name><operator pos:start="1017:51" pos:end="1017:52">-&gt;</operator><name pos:start="1017:53" pos:end="1017:61">mem_index</name></name></expr>]</index></name><operator pos:start="1017:63" pos:end="1017:63">(</operator><operator pos:start="1017:64" pos:end="1017:64">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1021:9" pos:end="1021:35"><expr pos:start="1021:9" pos:end="1021:34"><name pos:start="1021:9" pos:end="1021:16"><name pos:start="1021:9" pos:end="1021:9">s</name><operator pos:start="1021:10" pos:end="1021:11">-&gt;</operator><name pos:start="1021:12" pos:end="1021:16">cc_op</name></name> <operator pos:start="1021:18" pos:end="1021:18">=</operator> <name pos:start="1021:20" pos:end="1021:29">CC_OP_SUBB</name> <operator pos:start="1021:31" pos:end="1021:31">+</operator> <name pos:start="1021:33" pos:end="1021:34">ot</name></expr>;</expr_stmt>

        <break pos:start="1023:9" pos:end="1023:14">break;</break>

    <case pos:start="1025:5" pos:end="1025:15">case <expr pos:start="1025:10" pos:end="1025:14"><literal type="number" pos:start="1025:10" pos:end="1025:14">0x1c7</literal></expr>:</case> <comment type="block" pos:start="1025:17" pos:end="1025:31">/* cmpxchg8b */</comment>

        <expr_stmt pos:start="1027:9" pos:end="1027:35"><expr pos:start="1027:9" pos:end="1027:34"><name pos:start="1027:9" pos:end="1027:13">modrm</name> <operator pos:start="1027:15" pos:end="1027:15">=</operator> <call pos:start="1027:17" pos:end="1027:34"><name pos:start="1027:17" pos:end="1027:25">ldub_code</name><argument_list pos:start="1027:26" pos:end="1027:34">(<argument pos:start="1027:27" pos:end="1027:33"><expr pos:start="1027:27" pos:end="1027:33"><name pos:start="1027:27" pos:end="1027:31"><name pos:start="1027:27" pos:end="1027:27">s</name><operator pos:start="1027:28" pos:end="1027:29">-&gt;</operator><name pos:start="1027:30" pos:end="1027:31">pc</name></name><operator pos:start="1027:32" pos:end="1027:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1029:9" pos:end="1029:31"><expr pos:start="1029:9" pos:end="1029:30"><name pos:start="1029:9" pos:end="1029:11">mod</name> <operator pos:start="1029:13" pos:end="1029:13">=</operator> <operator pos:start="1029:15" pos:end="1029:15">(</operator><name pos:start="1029:16" pos:end="1029:20">modrm</name> <operator pos:start="1029:22" pos:end="1029:23">&gt;&gt;</operator> <literal type="number" pos:start="1029:25" pos:end="1029:25">6</literal><operator pos:start="1029:26" pos:end="1029:26">)</operator> <operator pos:start="1029:28" pos:end="1029:28">&amp;</operator> <literal type="number" pos:start="1029:30" pos:end="1029:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1031:9" pos:end="1033:28"><if pos:start="1031:9" pos:end="1033:28">if <condition pos:start="1031:12" pos:end="1031:21">(<expr pos:start="1031:13" pos:end="1031:20"><name pos:start="1031:13" pos:end="1031:15">mod</name> <operator pos:start="1031:17" pos:end="1031:18">==</operator> <literal type="number" pos:start="1031:20" pos:end="1031:20">3</literal></expr>)</condition><block type="pseudo" pos:start="1033:13" pos:end="1033:28"><block_content pos:start="1033:13" pos:end="1033:28">

            <goto pos:start="1033:13" pos:end="1033:28">goto <name pos:start="1033:18" pos:end="1033:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="1035:9" pos:end="1037:39"><if pos:start="1035:9" pos:end="1037:39">if <condition pos:start="1035:12" pos:end="1035:38">(<expr pos:start="1035:13" pos:end="1035:37"><name pos:start="1035:13" pos:end="1035:20"><name pos:start="1035:13" pos:end="1035:13">s</name><operator pos:start="1035:14" pos:end="1035:15">-&gt;</operator><name pos:start="1035:16" pos:end="1035:20">cc_op</name></name> <operator pos:start="1035:22" pos:end="1035:23">!=</operator> <name pos:start="1035:25" pos:end="1035:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="1037:13" pos:end="1037:39"><block_content pos:start="1037:13" pos:end="1037:39">

            <expr_stmt pos:start="1037:13" pos:end="1037:39"><expr pos:start="1037:13" pos:end="1037:38"><call pos:start="1037:13" pos:end="1037:38"><name pos:start="1037:13" pos:end="1037:28">gen_op_set_cc_op</name><argument_list pos:start="1037:29" pos:end="1037:38">(<argument pos:start="1037:30" pos:end="1037:37"><expr pos:start="1037:30" pos:end="1037:37"><name pos:start="1037:30" pos:end="1037:37"><name pos:start="1037:30" pos:end="1037:30">s</name><operator pos:start="1037:31" pos:end="1037:32">-&gt;</operator><name pos:start="1037:33" pos:end="1037:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1039:9" pos:end="1039:57"><expr pos:start="1039:9" pos:end="1039:56"><call pos:start="1039:9" pos:end="1039:56"><name pos:start="1039:9" pos:end="1039:21">gen_lea_modrm</name><argument_list pos:start="1039:22" pos:end="1039:56">(<argument pos:start="1039:23" pos:end="1039:23"><expr pos:start="1039:23" pos:end="1039:23"><name pos:start="1039:23" pos:end="1039:23">s</name></expr></argument>, <argument pos:start="1039:26" pos:end="1039:30"><expr pos:start="1039:26" pos:end="1039:30"><name pos:start="1039:26" pos:end="1039:30">modrm</name></expr></argument>, <argument pos:start="1039:33" pos:end="1039:41"><expr pos:start="1039:33" pos:end="1039:41"><operator pos:start="1039:33" pos:end="1039:33">&amp;</operator><name pos:start="1039:34" pos:end="1039:41">reg_addr</name></expr></argument>, <argument pos:start="1039:44" pos:end="1039:55"><expr pos:start="1039:44" pos:end="1039:55"><operator pos:start="1039:44" pos:end="1039:44">&amp;</operator><name pos:start="1039:45" pos:end="1039:55">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1041:9" pos:end="1041:27"><expr pos:start="1041:9" pos:end="1041:26"><call pos:start="1041:9" pos:end="1041:26"><name pos:start="1041:9" pos:end="1041:24">gen_op_cmpxchg8b</name><argument_list pos:start="1041:25" pos:end="1041:26">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1043:9" pos:end="1043:32"><expr pos:start="1043:9" pos:end="1043:31"><name pos:start="1043:9" pos:end="1043:16"><name pos:start="1043:9" pos:end="1043:9">s</name><operator pos:start="1043:10" pos:end="1043:11">-&gt;</operator><name pos:start="1043:12" pos:end="1043:16">cc_op</name></name> <operator pos:start="1043:18" pos:end="1043:18">=</operator> <name pos:start="1043:20" pos:end="1043:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="1045:9" pos:end="1045:14">break;</break>

        

        <comment type="block" format="doxygen" pos:start="1049:9" pos:end="1049:36">/**************************/</comment>

        <comment type="block" pos:start="1051:9" pos:end="1051:22">/* push/pop */</comment>

    <case pos:start="1053:5" pos:end="1053:23">case <expr pos:start="1053:10" pos:end="1053:22"><literal type="number" pos:start="1053:10" pos:end="1053:13">0x50</literal> <operator pos:start="1053:15" pos:end="1053:17">...</operator> <literal type="number" pos:start="1053:19" pos:end="1053:22">0x57</literal></expr>:</case> <comment type="block" pos:start="1053:25" pos:end="1053:34">/* push */</comment>

        <expr_stmt pos:start="1055:9" pos:end="1055:47"><expr pos:start="1055:9" pos:end="1055:46"><name pos:start="1055:9" pos:end="1055:44"><name pos:start="1055:9" pos:end="1055:25">gen_op_mov_TN_reg</name><index pos:start="1055:26" pos:end="1055:34">[<expr pos:start="1055:27" pos:end="1055:33"><name pos:start="1055:27" pos:end="1055:33">OT_LONG</name></expr>]</index><index pos:start="1055:35" pos:end="1055:37">[<expr pos:start="1055:36" pos:end="1055:36"><literal type="number" pos:start="1055:36" pos:end="1055:36">0</literal></expr>]</index><index pos:start="1055:38" pos:end="1055:44">[<expr pos:start="1055:39" pos:end="1055:43"><name pos:start="1055:39" pos:end="1055:39">b</name> <operator pos:start="1055:41" pos:end="1055:41">&amp;</operator> <literal type="number" pos:start="1055:43" pos:end="1055:43">7</literal></expr>]</index></name><operator pos:start="1055:45" pos:end="1055:45">(</operator><operator pos:start="1055:46" pos:end="1055:46">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1057:9" pos:end="1057:23"><expr pos:start="1057:9" pos:end="1057:22"><call pos:start="1057:9" pos:end="1057:22"><name pos:start="1057:9" pos:end="1057:19">gen_push_T0</name><argument_list pos:start="1057:20" pos:end="1057:22">(<argument pos:start="1057:21" pos:end="1057:21"><expr pos:start="1057:21" pos:end="1057:21"><name pos:start="1057:21" pos:end="1057:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1059:9" pos:end="1059:14">break;</break>

    <case pos:start="1061:5" pos:end="1061:23">case <expr pos:start="1061:10" pos:end="1061:22"><literal type="number" pos:start="1061:10" pos:end="1061:13">0x58</literal> <operator pos:start="1061:15" pos:end="1061:17">...</operator> <literal type="number" pos:start="1061:19" pos:end="1061:22">0x5f</literal></expr>:</case> <comment type="block" pos:start="1061:25" pos:end="1061:33">/* pop */</comment>

        <expr_stmt pos:start="1063:9" pos:end="1063:39"><expr pos:start="1063:9" pos:end="1063:38"><name pos:start="1063:9" pos:end="1063:10">ot</name> <operator pos:start="1063:12" pos:end="1063:12">=</operator> <ternary pos:start="1063:14" pos:end="1063:38"><condition pos:start="1063:14" pos:end="1063:20"><expr pos:start="1063:14" pos:end="1063:18"><name pos:start="1063:14" pos:end="1063:18">dflag</name></expr> ?</condition><then pos:start="1063:22" pos:end="1063:28"> <expr pos:start="1063:22" pos:end="1063:28"><name pos:start="1063:22" pos:end="1063:28">OT_LONG</name></expr> </then><else pos:start="1063:30" pos:end="1063:38">: <expr pos:start="1063:32" pos:end="1063:38"><name pos:start="1063:32" pos:end="1063:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1065:9" pos:end="1065:22"><expr pos:start="1065:9" pos:end="1065:21"><call pos:start="1065:9" pos:end="1065:21"><name pos:start="1065:9" pos:end="1065:18">gen_pop_T0</name><argument_list pos:start="1065:19" pos:end="1065:21">(<argument pos:start="1065:20" pos:end="1065:20"><expr pos:start="1065:20" pos:end="1065:20"><name pos:start="1065:20" pos:end="1065:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1067:9" pos:end="1067:50">/* NOTE: order is important for pop %sp */</comment>

        <expr_stmt pos:start="1069:9" pos:end="1069:26"><expr pos:start="1069:9" pos:end="1069:25"><call pos:start="1069:9" pos:end="1069:25"><name pos:start="1069:9" pos:end="1069:22">gen_pop_update</name><argument_list pos:start="1069:23" pos:end="1069:25">(<argument pos:start="1069:24" pos:end="1069:24"><expr pos:start="1069:24" pos:end="1069:24"><name pos:start="1069:24" pos:end="1069:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1071:9" pos:end="1071:39"><expr pos:start="1071:9" pos:end="1071:38"><name pos:start="1071:9" pos:end="1071:36"><name pos:start="1071:9" pos:end="1071:25">gen_op_mov_reg_T0</name><index pos:start="1071:26" pos:end="1071:29">[<expr pos:start="1071:27" pos:end="1071:28"><name pos:start="1071:27" pos:end="1071:28">ot</name></expr>]</index><index pos:start="1071:30" pos:end="1071:36">[<expr pos:start="1071:31" pos:end="1071:35"><name pos:start="1071:31" pos:end="1071:31">b</name> <operator pos:start="1071:33" pos:end="1071:33">&amp;</operator> <literal type="number" pos:start="1071:35" pos:end="1071:35">7</literal></expr>]</index></name><operator pos:start="1071:37" pos:end="1071:37">(</operator><operator pos:start="1071:38" pos:end="1071:38">)</operator></expr>;</expr_stmt>

        <break pos:start="1073:9" pos:end="1073:14">break;</break>

    <case pos:start="1075:5" pos:end="1075:14">case <expr pos:start="1075:10" pos:end="1075:13"><literal type="number" pos:start="1075:10" pos:end="1075:13">0x60</literal></expr>:</case> <comment type="block" pos:start="1075:16" pos:end="1075:26">/* pusha */</comment>

        <expr_stmt pos:start="1077:9" pos:end="1077:21"><expr pos:start="1077:9" pos:end="1077:20"><call pos:start="1077:9" pos:end="1077:20"><name pos:start="1077:9" pos:end="1077:17">gen_pusha</name><argument_list pos:start="1077:18" pos:end="1077:20">(<argument pos:start="1077:19" pos:end="1077:19"><expr pos:start="1077:19" pos:end="1077:19"><name pos:start="1077:19" pos:end="1077:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1079:9" pos:end="1079:14">break;</break>

    <case pos:start="1081:5" pos:end="1081:14">case <expr pos:start="1081:10" pos:end="1081:13"><literal type="number" pos:start="1081:10" pos:end="1081:13">0x61</literal></expr>:</case> <comment type="block" pos:start="1081:16" pos:end="1081:25">/* popa */</comment>

        <expr_stmt pos:start="1083:9" pos:end="1083:20"><expr pos:start="1083:9" pos:end="1083:19"><call pos:start="1083:9" pos:end="1083:19"><name pos:start="1083:9" pos:end="1083:16">gen_popa</name><argument_list pos:start="1083:17" pos:end="1083:19">(<argument pos:start="1083:18" pos:end="1083:18"><expr pos:start="1083:18" pos:end="1083:18"><name pos:start="1083:18" pos:end="1083:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1085:9" pos:end="1085:14">break;</break>

    <case pos:start="1087:5" pos:end="1087:14">case <expr pos:start="1087:10" pos:end="1087:13"><literal type="number" pos:start="1087:10" pos:end="1087:13">0x68</literal></expr>:</case> <comment type="block" pos:start="1087:16" pos:end="1087:28">/* push Iv */</comment>

    <case pos:start="1089:5" pos:end="1089:14">case <expr pos:start="1089:10" pos:end="1089:13"><literal type="number" pos:start="1089:10" pos:end="1089:13">0x6a</literal></expr>:</case>

        <expr_stmt pos:start="1091:9" pos:end="1091:39"><expr pos:start="1091:9" pos:end="1091:38"><name pos:start="1091:9" pos:end="1091:10">ot</name> <operator pos:start="1091:12" pos:end="1091:12">=</operator> <ternary pos:start="1091:14" pos:end="1091:38"><condition pos:start="1091:14" pos:end="1091:20"><expr pos:start="1091:14" pos:end="1091:18"><name pos:start="1091:14" pos:end="1091:18">dflag</name></expr> ?</condition><then pos:start="1091:22" pos:end="1091:28"> <expr pos:start="1091:22" pos:end="1091:28"><name pos:start="1091:22" pos:end="1091:28">OT_LONG</name></expr> </then><else pos:start="1091:30" pos:end="1091:38">: <expr pos:start="1091:32" pos:end="1091:38"><name pos:start="1091:32" pos:end="1091:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="1093:9" pos:end="1099:47"><if pos:start="1093:9" pos:end="1095:34">if <condition pos:start="1093:12" pos:end="1093:22">(<expr pos:start="1093:13" pos:end="1093:21"><name pos:start="1093:13" pos:end="1093:13">b</name> <operator pos:start="1093:15" pos:end="1093:16">==</operator> <literal type="number" pos:start="1093:18" pos:end="1093:21">0x68</literal></expr>)</condition><block type="pseudo" pos:start="1095:13" pos:end="1095:34"><block_content pos:start="1095:13" pos:end="1095:34">

            <expr_stmt pos:start="1095:13" pos:end="1095:34"><expr pos:start="1095:13" pos:end="1095:33"><name pos:start="1095:13" pos:end="1095:15">val</name> <operator pos:start="1095:17" pos:end="1095:17">=</operator> <call pos:start="1095:19" pos:end="1095:33"><name pos:start="1095:19" pos:end="1095:26">insn_get</name><argument_list pos:start="1095:27" pos:end="1095:33">(<argument pos:start="1095:28" pos:end="1095:28"><expr pos:start="1095:28" pos:end="1095:28"><name pos:start="1095:28" pos:end="1095:28">s</name></expr></argument>, <argument pos:start="1095:31" pos:end="1095:32"><expr pos:start="1095:31" pos:end="1095:32"><name pos:start="1095:31" pos:end="1095:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1097:9" pos:end="1099:47">else<block type="pseudo" pos:start="1099:13" pos:end="1099:47"><block_content pos:start="1099:13" pos:end="1099:47">

            <expr_stmt pos:start="1099:13" pos:end="1099:47"><expr pos:start="1099:13" pos:end="1099:46"><name pos:start="1099:13" pos:end="1099:15">val</name> <operator pos:start="1099:17" pos:end="1099:17">=</operator> <operator pos:start="1099:19" pos:end="1099:19">(</operator><name pos:start="1099:20" pos:end="1099:25">int8_t</name><operator pos:start="1099:26" pos:end="1099:26">)</operator><call pos:start="1099:27" pos:end="1099:46"><name pos:start="1099:27" pos:end="1099:34">insn_get</name><argument_list pos:start="1099:35" pos:end="1099:46">(<argument pos:start="1099:36" pos:end="1099:36"><expr pos:start="1099:36" pos:end="1099:36"><name pos:start="1099:36" pos:end="1099:36">s</name></expr></argument>, <argument pos:start="1099:39" pos:end="1099:45"><expr pos:start="1099:39" pos:end="1099:45"><name pos:start="1099:39" pos:end="1099:45">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1101:9" pos:end="1101:31"><expr pos:start="1101:9" pos:end="1101:30"><call pos:start="1101:9" pos:end="1101:30"><name pos:start="1101:9" pos:end="1101:25">gen_op_movl_T0_im</name><argument_list pos:start="1101:26" pos:end="1101:30">(<argument pos:start="1101:27" pos:end="1101:29"><expr pos:start="1101:27" pos:end="1101:29"><name pos:start="1101:27" pos:end="1101:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1103:9" pos:end="1103:23"><expr pos:start="1103:9" pos:end="1103:22"><call pos:start="1103:9" pos:end="1103:22"><name pos:start="1103:9" pos:end="1103:19">gen_push_T0</name><argument_list pos:start="1103:20" pos:end="1103:22">(<argument pos:start="1103:21" pos:end="1103:21"><expr pos:start="1103:21" pos:end="1103:21"><name pos:start="1103:21" pos:end="1103:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1105:9" pos:end="1105:14">break;</break>

    <case pos:start="1107:5" pos:end="1107:14">case <expr pos:start="1107:10" pos:end="1107:13"><literal type="number" pos:start="1107:10" pos:end="1107:13">0x8f</literal></expr>:</case> <comment type="block" pos:start="1107:16" pos:end="1107:27">/* pop Ev */</comment>

        <expr_stmt pos:start="1109:9" pos:end="1109:39"><expr pos:start="1109:9" pos:end="1109:38"><name pos:start="1109:9" pos:end="1109:10">ot</name> <operator pos:start="1109:12" pos:end="1109:12">=</operator> <ternary pos:start="1109:14" pos:end="1109:38"><condition pos:start="1109:14" pos:end="1109:20"><expr pos:start="1109:14" pos:end="1109:18"><name pos:start="1109:14" pos:end="1109:18">dflag</name></expr> ?</condition><then pos:start="1109:22" pos:end="1109:28"> <expr pos:start="1109:22" pos:end="1109:28"><name pos:start="1109:22" pos:end="1109:28">OT_LONG</name></expr> </then><else pos:start="1109:30" pos:end="1109:38">: <expr pos:start="1109:32" pos:end="1109:38"><name pos:start="1109:32" pos:end="1109:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1111:9" pos:end="1111:35"><expr pos:start="1111:9" pos:end="1111:34"><name pos:start="1111:9" pos:end="1111:13">modrm</name> <operator pos:start="1111:15" pos:end="1111:15">=</operator> <call pos:start="1111:17" pos:end="1111:34"><name pos:start="1111:17" pos:end="1111:25">ldub_code</name><argument_list pos:start="1111:26" pos:end="1111:34">(<argument pos:start="1111:27" pos:end="1111:33"><expr pos:start="1111:27" pos:end="1111:33"><name pos:start="1111:27" pos:end="1111:31"><name pos:start="1111:27" pos:end="1111:27">s</name><operator pos:start="1111:28" pos:end="1111:29">-&gt;</operator><name pos:start="1111:30" pos:end="1111:31">pc</name></name><operator pos:start="1111:32" pos:end="1111:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1113:9" pos:end="1113:31"><expr pos:start="1113:9" pos:end="1113:30"><name pos:start="1113:9" pos:end="1113:11">mod</name> <operator pos:start="1113:13" pos:end="1113:13">=</operator> <operator pos:start="1113:15" pos:end="1113:15">(</operator><name pos:start="1113:16" pos:end="1113:20">modrm</name> <operator pos:start="1113:22" pos:end="1113:23">&gt;&gt;</operator> <literal type="number" pos:start="1113:25" pos:end="1113:25">6</literal><operator pos:start="1113:26" pos:end="1113:26">)</operator> <operator pos:start="1113:28" pos:end="1113:28">&amp;</operator> <literal type="number" pos:start="1113:30" pos:end="1113:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1115:9" pos:end="1115:22"><expr pos:start="1115:9" pos:end="1115:21"><call pos:start="1115:9" pos:end="1115:21"><name pos:start="1115:9" pos:end="1115:18">gen_pop_T0</name><argument_list pos:start="1115:19" pos:end="1115:21">(<argument pos:start="1115:20" pos:end="1115:20"><expr pos:start="1115:20" pos:end="1115:20"><name pos:start="1115:20" pos:end="1115:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1117:9" pos:end="1139:9"><if pos:start="1117:9" pos:end="1127:9">if <condition pos:start="1117:12" pos:end="1117:21">(<expr pos:start="1117:13" pos:end="1117:20"><name pos:start="1117:13" pos:end="1117:15">mod</name> <operator pos:start="1117:17" pos:end="1117:18">==</operator> <literal type="number" pos:start="1117:20" pos:end="1117:20">3</literal></expr>)</condition> <block pos:start="1117:23" pos:end="1127:9">{<block_content pos:start="1121:13" pos:end="1125:40">

            <comment type="block" pos:start="1119:13" pos:end="1119:54">/* NOTE: order is important for pop %sp */</comment>

            <expr_stmt pos:start="1121:13" pos:end="1121:30"><expr pos:start="1121:13" pos:end="1121:29"><call pos:start="1121:13" pos:end="1121:29"><name pos:start="1121:13" pos:end="1121:26">gen_pop_update</name><argument_list pos:start="1121:27" pos:end="1121:29">(<argument pos:start="1121:28" pos:end="1121:28"><expr pos:start="1121:28" pos:end="1121:28"><name pos:start="1121:28" pos:end="1121:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1123:13" pos:end="1123:27"><expr pos:start="1123:13" pos:end="1123:26"><name pos:start="1123:13" pos:end="1123:14">rm</name> <operator pos:start="1123:16" pos:end="1123:16">=</operator> <name pos:start="1123:18" pos:end="1123:22">modrm</name> <operator pos:start="1123:24" pos:end="1123:24">&amp;</operator> <literal type="number" pos:start="1123:26" pos:end="1123:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1125:13" pos:end="1125:40"><expr pos:start="1125:13" pos:end="1125:39"><name pos:start="1125:13" pos:end="1125:37"><name pos:start="1125:13" pos:end="1125:29">gen_op_mov_reg_T0</name><index pos:start="1125:30" pos:end="1125:33">[<expr pos:start="1125:31" pos:end="1125:32"><name pos:start="1125:31" pos:end="1125:32">ot</name></expr>]</index><index pos:start="1125:34" pos:end="1125:37">[<expr pos:start="1125:35" pos:end="1125:36"><name pos:start="1125:35" pos:end="1125:36">rm</name></expr>]</index></name><operator pos:start="1125:38" pos:end="1125:38">(</operator><operator pos:start="1125:39" pos:end="1125:39">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1127:11" pos:end="1139:9">else <block pos:start="1127:16" pos:end="1139:9">{<block_content pos:start="1131:13" pos:end="1137:30">

            <comment type="block" pos:start="1129:13" pos:end="1129:65">/* NOTE: order is important too for MMU exceptions */</comment>

            <expr_stmt pos:start="1131:13" pos:end="1131:42"><expr pos:start="1131:13" pos:end="1131:41"><name pos:start="1131:13" pos:end="1131:28"><name pos:start="1131:13" pos:end="1131:13">s</name><operator pos:start="1131:14" pos:end="1131:15">-&gt;</operator><name pos:start="1131:16" pos:end="1131:28">popl_esp_hack</name></name> <operator pos:start="1131:30" pos:end="1131:30">=</operator> <literal type="number" pos:start="1131:32" pos:end="1131:32">2</literal> <operator pos:start="1131:34" pos:end="1131:35">&lt;&lt;</operator> <name pos:start="1131:37" pos:end="1131:41">dflag</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1133:13" pos:end="1133:53"><expr pos:start="1133:13" pos:end="1133:52"><call pos:start="1133:13" pos:end="1133:52"><name pos:start="1133:13" pos:end="1133:26">gen_ldst_modrm</name><argument_list pos:start="1133:27" pos:end="1133:52">(<argument pos:start="1133:28" pos:end="1133:28"><expr pos:start="1133:28" pos:end="1133:28"><name pos:start="1133:28" pos:end="1133:28">s</name></expr></argument>, <argument pos:start="1133:31" pos:end="1133:35"><expr pos:start="1133:31" pos:end="1133:35"><name pos:start="1133:31" pos:end="1133:35">modrm</name></expr></argument>, <argument pos:start="1133:38" pos:end="1133:39"><expr pos:start="1133:38" pos:end="1133:39"><name pos:start="1133:38" pos:end="1133:39">ot</name></expr></argument>, <argument pos:start="1133:42" pos:end="1133:48"><expr pos:start="1133:42" pos:end="1133:48"><name pos:start="1133:42" pos:end="1133:48">OR_TMP0</name></expr></argument>, <argument pos:start="1133:51" pos:end="1133:51"><expr pos:start="1133:51" pos:end="1133:51"><literal type="number" pos:start="1133:51" pos:end="1133:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1135:13" pos:end="1135:33"><expr pos:start="1135:13" pos:end="1135:32"><name pos:start="1135:13" pos:end="1135:28"><name pos:start="1135:13" pos:end="1135:13">s</name><operator pos:start="1135:14" pos:end="1135:15">-&gt;</operator><name pos:start="1135:16" pos:end="1135:28">popl_esp_hack</name></name> <operator pos:start="1135:30" pos:end="1135:30">=</operator> <literal type="number" pos:start="1135:32" pos:end="1135:32">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1137:13" pos:end="1137:30"><expr pos:start="1137:13" pos:end="1137:29"><call pos:start="1137:13" pos:end="1137:29"><name pos:start="1137:13" pos:end="1137:26">gen_pop_update</name><argument_list pos:start="1137:27" pos:end="1137:29">(<argument pos:start="1137:28" pos:end="1137:28"><expr pos:start="1137:28" pos:end="1137:28"><name pos:start="1137:28" pos:end="1137:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1141:9" pos:end="1141:14">break;</break>

    <case pos:start="1143:5" pos:end="1143:14">case <expr pos:start="1143:10" pos:end="1143:13"><literal type="number" pos:start="1143:10" pos:end="1143:13">0xc8</literal></expr>:</case> <comment type="block" pos:start="1143:16" pos:end="1143:26">/* enter */</comment>

        <block pos:start="1145:9" pos:end="1157:9">{<block_content pos:start="1147:13" pos:end="1155:37">

            <decl_stmt pos:start="1147:13" pos:end="1147:22"><decl pos:start="1147:13" pos:end="1147:21"><type pos:start="1147:13" pos:end="1147:15"><name pos:start="1147:13" pos:end="1147:15">int</name></type> <name pos:start="1147:17" pos:end="1147:21">level</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1149:13" pos:end="1149:35"><expr pos:start="1149:13" pos:end="1149:34"><name pos:start="1149:13" pos:end="1149:15">val</name> <operator pos:start="1149:17" pos:end="1149:17">=</operator> <call pos:start="1149:19" pos:end="1149:34"><name pos:start="1149:19" pos:end="1149:27">lduw_code</name><argument_list pos:start="1149:28" pos:end="1149:34">(<argument pos:start="1149:29" pos:end="1149:33"><expr pos:start="1149:29" pos:end="1149:33"><name pos:start="1149:29" pos:end="1149:33"><name pos:start="1149:29" pos:end="1149:29">s</name><operator pos:start="1149:30" pos:end="1149:31">-&gt;</operator><name pos:start="1149:32" pos:end="1149:33">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1151:13" pos:end="1151:23"><expr pos:start="1151:13" pos:end="1151:22"><name pos:start="1151:13" pos:end="1151:17"><name pos:start="1151:13" pos:end="1151:13">s</name><operator pos:start="1151:14" pos:end="1151:15">-&gt;</operator><name pos:start="1151:16" pos:end="1151:17">pc</name></name> <operator pos:start="1151:19" pos:end="1151:20">+=</operator> <literal type="number" pos:start="1151:22" pos:end="1151:22">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1153:13" pos:end="1153:39"><expr pos:start="1153:13" pos:end="1153:38"><name pos:start="1153:13" pos:end="1153:17">level</name> <operator pos:start="1153:19" pos:end="1153:19">=</operator> <call pos:start="1153:21" pos:end="1153:38"><name pos:start="1153:21" pos:end="1153:29">ldub_code</name><argument_list pos:start="1153:30" pos:end="1153:38">(<argument pos:start="1153:31" pos:end="1153:37"><expr pos:start="1153:31" pos:end="1153:37"><name pos:start="1153:31" pos:end="1153:35"><name pos:start="1153:31" pos:end="1153:31">s</name><operator pos:start="1153:32" pos:end="1153:33">-&gt;</operator><name pos:start="1153:34" pos:end="1153:35">pc</name></name><operator pos:start="1153:36" pos:end="1153:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1155:13" pos:end="1155:37"><expr pos:start="1155:13" pos:end="1155:36"><call pos:start="1155:13" pos:end="1155:36"><name pos:start="1155:13" pos:end="1155:21">gen_enter</name><argument_list pos:start="1155:22" pos:end="1155:36">(<argument pos:start="1155:23" pos:end="1155:23"><expr pos:start="1155:23" pos:end="1155:23"><name pos:start="1155:23" pos:end="1155:23">s</name></expr></argument>, <argument pos:start="1155:26" pos:end="1155:28"><expr pos:start="1155:26" pos:end="1155:28"><name pos:start="1155:26" pos:end="1155:28">val</name></expr></argument>, <argument pos:start="1155:31" pos:end="1155:35"><expr pos:start="1155:31" pos:end="1155:35"><name pos:start="1155:31" pos:end="1155:35">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1159:9" pos:end="1159:14">break;</break>

    <case pos:start="1161:5" pos:end="1161:14">case <expr pos:start="1161:10" pos:end="1161:13"><literal type="number" pos:start="1161:10" pos:end="1161:13">0xc9</literal></expr>:</case> <comment type="block" pos:start="1161:16" pos:end="1161:26">/* leave */</comment>

        <comment type="block" pos:start="1163:9" pos:end="1163:84">/* XXX: exception not precise (ESP is updated before potential exception) */</comment>

        <if_stmt pos:start="1165:9" pos:end="1177:9"><if pos:start="1165:9" pos:end="1171:9">if <condition pos:start="1165:12" pos:end="1165:20">(<expr pos:start="1165:13" pos:end="1165:19"><name pos:start="1165:13" pos:end="1165:19"><name pos:start="1165:13" pos:end="1165:13">s</name><operator pos:start="1165:14" pos:end="1165:15">-&gt;</operator><name pos:start="1165:16" pos:end="1165:19">ss32</name></name></expr>)</condition> <block pos:start="1165:22" pos:end="1171:9">{<block_content pos:start="1167:13" pos:end="1169:48">

            <expr_stmt pos:start="1167:13" pos:end="1167:51"><expr pos:start="1167:13" pos:end="1167:50"><name pos:start="1167:13" pos:end="1167:48"><name pos:start="1167:13" pos:end="1167:29">gen_op_mov_TN_reg</name><index pos:start="1167:30" pos:end="1167:38">[<expr pos:start="1167:31" pos:end="1167:37"><name pos:start="1167:31" pos:end="1167:37">OT_LONG</name></expr>]</index><index pos:start="1167:39" pos:end="1167:41">[<expr pos:start="1167:40" pos:end="1167:40"><literal type="number" pos:start="1167:40" pos:end="1167:40">0</literal></expr>]</index><index pos:start="1167:42" pos:end="1167:48">[<expr pos:start="1167:43" pos:end="1167:47"><name pos:start="1167:43" pos:end="1167:47">R_EBP</name></expr>]</index></name><operator pos:start="1167:49" pos:end="1167:49">(</operator><operator pos:start="1167:50" pos:end="1167:50">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1169:13" pos:end="1169:48"><expr pos:start="1169:13" pos:end="1169:47"><name pos:start="1169:13" pos:end="1169:45"><name pos:start="1169:13" pos:end="1169:29">gen_op_mov_reg_T0</name><index pos:start="1169:30" pos:end="1169:38">[<expr pos:start="1169:31" pos:end="1169:37"><name pos:start="1169:31" pos:end="1169:37">OT_LONG</name></expr>]</index><index pos:start="1169:39" pos:end="1169:45">[<expr pos:start="1169:40" pos:end="1169:44"><name pos:start="1169:40" pos:end="1169:44">R_ESP</name></expr>]</index></name><operator pos:start="1169:46" pos:end="1169:46">(</operator><operator pos:start="1169:47" pos:end="1169:47">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1171:11" pos:end="1177:9">else <block pos:start="1171:16" pos:end="1177:9">{<block_content pos:start="1173:13" pos:end="1175:48">

            <expr_stmt pos:start="1173:13" pos:end="1173:51"><expr pos:start="1173:13" pos:end="1173:50"><name pos:start="1173:13" pos:end="1173:48"><name pos:start="1173:13" pos:end="1173:29">gen_op_mov_TN_reg</name><index pos:start="1173:30" pos:end="1173:38">[<expr pos:start="1173:31" pos:end="1173:37"><name pos:start="1173:31" pos:end="1173:37">OT_WORD</name></expr>]</index><index pos:start="1173:39" pos:end="1173:41">[<expr pos:start="1173:40" pos:end="1173:40"><literal type="number" pos:start="1173:40" pos:end="1173:40">0</literal></expr>]</index><index pos:start="1173:42" pos:end="1173:48">[<expr pos:start="1173:43" pos:end="1173:47"><name pos:start="1173:43" pos:end="1173:47">R_EBP</name></expr>]</index></name><operator pos:start="1173:49" pos:end="1173:49">(</operator><operator pos:start="1173:50" pos:end="1173:50">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1175:13" pos:end="1175:48"><expr pos:start="1175:13" pos:end="1175:47"><name pos:start="1175:13" pos:end="1175:45"><name pos:start="1175:13" pos:end="1175:29">gen_op_mov_reg_T0</name><index pos:start="1175:30" pos:end="1175:38">[<expr pos:start="1175:31" pos:end="1175:37"><name pos:start="1175:31" pos:end="1175:37">OT_WORD</name></expr>]</index><index pos:start="1175:39" pos:end="1175:45">[<expr pos:start="1175:40" pos:end="1175:44"><name pos:start="1175:40" pos:end="1175:44">R_ESP</name></expr>]</index></name><operator pos:start="1175:46" pos:end="1175:46">(</operator><operator pos:start="1175:47" pos:end="1175:47">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1179:9" pos:end="1179:22"><expr pos:start="1179:9" pos:end="1179:21"><call pos:start="1179:9" pos:end="1179:21"><name pos:start="1179:9" pos:end="1179:18">gen_pop_T0</name><argument_list pos:start="1179:19" pos:end="1179:21">(<argument pos:start="1179:20" pos:end="1179:20"><expr pos:start="1179:20" pos:end="1179:20"><name pos:start="1179:20" pos:end="1179:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1181:9" pos:end="1181:39"><expr pos:start="1181:9" pos:end="1181:38"><name pos:start="1181:9" pos:end="1181:10">ot</name> <operator pos:start="1181:12" pos:end="1181:12">=</operator> <ternary pos:start="1181:14" pos:end="1181:38"><condition pos:start="1181:14" pos:end="1181:20"><expr pos:start="1181:14" pos:end="1181:18"><name pos:start="1181:14" pos:end="1181:18">dflag</name></expr> ?</condition><then pos:start="1181:22" pos:end="1181:28"> <expr pos:start="1181:22" pos:end="1181:28"><name pos:start="1181:22" pos:end="1181:28">OT_LONG</name></expr> </then><else pos:start="1181:30" pos:end="1181:38">: <expr pos:start="1181:32" pos:end="1181:38"><name pos:start="1181:32" pos:end="1181:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1183:9" pos:end="1183:39"><expr pos:start="1183:9" pos:end="1183:38"><name pos:start="1183:9" pos:end="1183:36"><name pos:start="1183:9" pos:end="1183:25">gen_op_mov_reg_T0</name><index pos:start="1183:26" pos:end="1183:29">[<expr pos:start="1183:27" pos:end="1183:28"><name pos:start="1183:27" pos:end="1183:28">ot</name></expr>]</index><index pos:start="1183:30" pos:end="1183:36">[<expr pos:start="1183:31" pos:end="1183:35"><name pos:start="1183:31" pos:end="1183:35">R_EBP</name></expr>]</index></name><operator pos:start="1183:37" pos:end="1183:37">(</operator><operator pos:start="1183:38" pos:end="1183:38">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1185:9" pos:end="1185:26"><expr pos:start="1185:9" pos:end="1185:25"><call pos:start="1185:9" pos:end="1185:25"><name pos:start="1185:9" pos:end="1185:22">gen_pop_update</name><argument_list pos:start="1185:23" pos:end="1185:25">(<argument pos:start="1185:24" pos:end="1185:24"><expr pos:start="1185:24" pos:end="1185:24"><name pos:start="1185:24" pos:end="1185:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1187:9" pos:end="1187:14">break;</break>

    <case pos:start="1189:5" pos:end="1189:14">case <expr pos:start="1189:10" pos:end="1189:13"><literal type="number" pos:start="1189:10" pos:end="1189:13">0x06</literal></expr>:</case> <comment type="block" pos:start="1189:16" pos:end="1189:28">/* push es */</comment>

    <case pos:start="1191:5" pos:end="1191:14">case <expr pos:start="1191:10" pos:end="1191:13"><literal type="number" pos:start="1191:10" pos:end="1191:13">0x0e</literal></expr>:</case> <comment type="block" pos:start="1191:16" pos:end="1191:28">/* push cs */</comment>

    <case pos:start="1193:5" pos:end="1193:14">case <expr pos:start="1193:10" pos:end="1193:13"><literal type="number" pos:start="1193:10" pos:end="1193:13">0x16</literal></expr>:</case> <comment type="block" pos:start="1193:16" pos:end="1193:28">/* push ss */</comment>

    <case pos:start="1195:5" pos:end="1195:14">case <expr pos:start="1195:10" pos:end="1195:13"><literal type="number" pos:start="1195:10" pos:end="1195:13">0x1e</literal></expr>:</case> <comment type="block" pos:start="1195:16" pos:end="1195:28">/* push ds */</comment>

        <expr_stmt pos:start="1197:9" pos:end="1197:35"><expr pos:start="1197:9" pos:end="1197:34"><call pos:start="1197:9" pos:end="1197:34"><name pos:start="1197:9" pos:end="1197:26">gen_op_movl_T0_seg</name><argument_list pos:start="1197:27" pos:end="1197:34">(<argument pos:start="1197:28" pos:end="1197:33"><expr pos:start="1197:28" pos:end="1197:33"><name pos:start="1197:28" pos:end="1197:28">b</name> <operator pos:start="1197:30" pos:end="1197:31">&gt;&gt;</operator> <literal type="number" pos:start="1197:33" pos:end="1197:33">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1199:9" pos:end="1199:23"><expr pos:start="1199:9" pos:end="1199:22"><call pos:start="1199:9" pos:end="1199:22"><name pos:start="1199:9" pos:end="1199:19">gen_push_T0</name><argument_list pos:start="1199:20" pos:end="1199:22">(<argument pos:start="1199:21" pos:end="1199:21"><expr pos:start="1199:21" pos:end="1199:21"><name pos:start="1199:21" pos:end="1199:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1201:9" pos:end="1201:14">break;</break>

    <case pos:start="1203:5" pos:end="1203:15">case <expr pos:start="1203:10" pos:end="1203:14"><literal type="number" pos:start="1203:10" pos:end="1203:14">0x1a0</literal></expr>:</case> <comment type="block" pos:start="1203:17" pos:end="1203:29">/* push fs */</comment>

    <case pos:start="1205:5" pos:end="1205:15">case <expr pos:start="1205:10" pos:end="1205:14"><literal type="number" pos:start="1205:10" pos:end="1205:14">0x1a8</literal></expr>:</case> <comment type="block" pos:start="1205:17" pos:end="1205:29">/* push gs */</comment>

        <expr_stmt pos:start="1207:9" pos:end="1207:41"><expr pos:start="1207:9" pos:end="1207:40"><call pos:start="1207:9" pos:end="1207:40"><name pos:start="1207:9" pos:end="1207:26">gen_op_movl_T0_seg</name><argument_list pos:start="1207:27" pos:end="1207:40">(<argument pos:start="1207:28" pos:end="1207:39"><expr pos:start="1207:28" pos:end="1207:39"><operator pos:start="1207:28" pos:end="1207:28">(</operator><name pos:start="1207:29" pos:end="1207:29">b</name> <operator pos:start="1207:31" pos:end="1207:32">&gt;&gt;</operator> <literal type="number" pos:start="1207:34" pos:end="1207:34">3</literal><operator pos:start="1207:35" pos:end="1207:35">)</operator> <operator pos:start="1207:37" pos:end="1207:37">&amp;</operator> <literal type="number" pos:start="1207:39" pos:end="1207:39">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1209:9" pos:end="1209:23"><expr pos:start="1209:9" pos:end="1209:22"><call pos:start="1209:9" pos:end="1209:22"><name pos:start="1209:9" pos:end="1209:19">gen_push_T0</name><argument_list pos:start="1209:20" pos:end="1209:22">(<argument pos:start="1209:21" pos:end="1209:21"><expr pos:start="1209:21" pos:end="1209:21"><name pos:start="1209:21" pos:end="1209:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1211:9" pos:end="1211:14">break;</break>

    <case pos:start="1213:5" pos:end="1213:14">case <expr pos:start="1213:10" pos:end="1213:13"><literal type="number" pos:start="1213:10" pos:end="1213:13">0x07</literal></expr>:</case> <comment type="block" pos:start="1213:16" pos:end="1213:27">/* pop es */</comment>

    <case pos:start="1215:5" pos:end="1215:14">case <expr pos:start="1215:10" pos:end="1215:13"><literal type="number" pos:start="1215:10" pos:end="1215:13">0x17</literal></expr>:</case> <comment type="block" pos:start="1215:16" pos:end="1215:27">/* pop ss */</comment>

    <case pos:start="1217:5" pos:end="1217:14">case <expr pos:start="1217:10" pos:end="1217:13"><literal type="number" pos:start="1217:10" pos:end="1217:13">0x1f</literal></expr>:</case> <comment type="block" pos:start="1217:16" pos:end="1217:27">/* pop ds */</comment>

        <expr_stmt pos:start="1219:9" pos:end="1219:21"><expr pos:start="1219:9" pos:end="1219:20"><name pos:start="1219:9" pos:end="1219:11">reg</name> <operator pos:start="1219:13" pos:end="1219:13">=</operator> <name pos:start="1219:15" pos:end="1219:15">b</name> <operator pos:start="1219:17" pos:end="1219:18">&gt;&gt;</operator> <literal type="number" pos:start="1219:20" pos:end="1219:20">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1221:9" pos:end="1221:22"><expr pos:start="1221:9" pos:end="1221:21"><call pos:start="1221:9" pos:end="1221:21"><name pos:start="1221:9" pos:end="1221:18">gen_pop_T0</name><argument_list pos:start="1221:19" pos:end="1221:21">(<argument pos:start="1221:20" pos:end="1221:20"><expr pos:start="1221:20" pos:end="1221:20"><name pos:start="1221:20" pos:end="1221:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1223:9" pos:end="1223:55"><expr pos:start="1223:9" pos:end="1223:54"><call pos:start="1223:9" pos:end="1223:54"><name pos:start="1223:9" pos:end="1223:23">gen_movl_seg_T0</name><argument_list pos:start="1223:24" pos:end="1223:54">(<argument pos:start="1223:25" pos:end="1223:25"><expr pos:start="1223:25" pos:end="1223:25"><name pos:start="1223:25" pos:end="1223:25">s</name></expr></argument>, <argument pos:start="1223:28" pos:end="1223:30"><expr pos:start="1223:28" pos:end="1223:30"><name pos:start="1223:28" pos:end="1223:30">reg</name></expr></argument>, <argument pos:start="1223:33" pos:end="1223:53"><expr pos:start="1223:33" pos:end="1223:53"><name pos:start="1223:33" pos:end="1223:40">pc_start</name> <operator pos:start="1223:42" pos:end="1223:42">-</operator> <name pos:start="1223:44" pos:end="1223:53"><name pos:start="1223:44" pos:end="1223:44">s</name><operator pos:start="1223:45" pos:end="1223:46">-&gt;</operator><name pos:start="1223:47" pos:end="1223:53">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1225:9" pos:end="1225:26"><expr pos:start="1225:9" pos:end="1225:25"><call pos:start="1225:9" pos:end="1225:25"><name pos:start="1225:9" pos:end="1225:22">gen_pop_update</name><argument_list pos:start="1225:23" pos:end="1225:25">(<argument pos:start="1225:24" pos:end="1225:24"><expr pos:start="1225:24" pos:end="1225:24"><name pos:start="1225:24" pos:end="1225:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1227:9" pos:end="1241:9"><if pos:start="1227:9" pos:end="1241:9">if <condition pos:start="1227:12" pos:end="1227:24">(<expr pos:start="1227:13" pos:end="1227:23"><name pos:start="1227:13" pos:end="1227:15">reg</name> <operator pos:start="1227:17" pos:end="1227:18">==</operator> <name pos:start="1227:20" pos:end="1227:23">R_SS</name></expr>)</condition> <block pos:start="1227:26" pos:end="1241:9">{<block_content pos:start="1235:13" pos:end="1239:22">

            <comment type="block" pos:start="1229:13" pos:end="1229:57">/* if reg == SS, inhibit interrupts/trace. */</comment>

            <comment type="block" pos:start="1231:13" pos:end="1233:33">/* If several instructions disable interrupts, only the

               _first_ does it */</comment>

            <if_stmt pos:start="1235:13" pos:end="1237:41"><if pos:start="1235:13" pos:end="1237:41">if <condition pos:start="1235:16" pos:end="1235:54">(<expr pos:start="1235:17" pos:end="1235:53"><operator pos:start="1235:17" pos:end="1235:17">!</operator><operator pos:start="1235:18" pos:end="1235:18">(</operator><name pos:start="1235:19" pos:end="1235:30"><name pos:start="1235:19" pos:end="1235:19">s</name><operator pos:start="1235:20" pos:end="1235:21">-&gt;</operator><name pos:start="1235:22" pos:end="1235:23">tb</name><operator pos:start="1235:24" pos:end="1235:25">-&gt;</operator><name pos:start="1235:26" pos:end="1235:30">flags</name></name> <operator pos:start="1235:32" pos:end="1235:32">&amp;</operator> <name pos:start="1235:34" pos:end="1235:52">HF_INHIBIT_IRQ_MASK</name><operator pos:start="1235:53" pos:end="1235:53">)</operator></expr>)</condition><block type="pseudo" pos:start="1237:17" pos:end="1237:41"><block_content pos:start="1237:17" pos:end="1237:41">

                <expr_stmt pos:start="1237:17" pos:end="1237:41"><expr pos:start="1237:17" pos:end="1237:40"><call pos:start="1237:17" pos:end="1237:40"><name pos:start="1237:17" pos:end="1237:38">gen_op_set_inhibit_irq</name><argument_list pos:start="1237:39" pos:end="1237:40">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1239:13" pos:end="1239:22"><expr pos:start="1239:13" pos:end="1239:21"><name pos:start="1239:13" pos:end="1239:17"><name pos:start="1239:13" pos:end="1239:13">s</name><operator pos:start="1239:14" pos:end="1239:15">-&gt;</operator><name pos:start="1239:16" pos:end="1239:17">tf</name></name> <operator pos:start="1239:19" pos:end="1239:19">=</operator> <literal type="number" pos:start="1239:21" pos:end="1239:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1243:9" pos:end="1249:9"><if pos:start="1243:9" pos:end="1249:9">if <condition pos:start="1243:12" pos:end="1243:22">(<expr pos:start="1243:13" pos:end="1243:21"><name pos:start="1243:13" pos:end="1243:21"><name pos:start="1243:13" pos:end="1243:13">s</name><operator pos:start="1243:14" pos:end="1243:15">-&gt;</operator><name pos:start="1243:16" pos:end="1243:21">is_jmp</name></name></expr>)</condition> <block pos:start="1243:24" pos:end="1249:9">{<block_content pos:start="1245:13" pos:end="1247:23">

            <expr_stmt pos:start="1245:13" pos:end="1245:46"><expr pos:start="1245:13" pos:end="1245:45"><call pos:start="1245:13" pos:end="1245:45"><name pos:start="1245:13" pos:end="1245:25">gen_op_jmp_im</name><argument_list pos:start="1245:26" pos:end="1245:45">(<argument pos:start="1245:27" pos:end="1245:44"><expr pos:start="1245:27" pos:end="1245:44"><name pos:start="1245:27" pos:end="1245:31"><name pos:start="1245:27" pos:end="1245:27">s</name><operator pos:start="1245:28" pos:end="1245:29">-&gt;</operator><name pos:start="1245:30" pos:end="1245:31">pc</name></name> <operator pos:start="1245:33" pos:end="1245:33">-</operator> <name pos:start="1245:35" pos:end="1245:44"><name pos:start="1245:35" pos:end="1245:35">s</name><operator pos:start="1245:36" pos:end="1245:37">-&gt;</operator><name pos:start="1245:38" pos:end="1245:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1247:13" pos:end="1247:23"><expr pos:start="1247:13" pos:end="1247:22"><call pos:start="1247:13" pos:end="1247:22"><name pos:start="1247:13" pos:end="1247:19">gen_eob</name><argument_list pos:start="1247:20" pos:end="1247:22">(<argument pos:start="1247:21" pos:end="1247:21"><expr pos:start="1247:21" pos:end="1247:21"><name pos:start="1247:21" pos:end="1247:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="1251:9" pos:end="1251:14">break;</break>

    <case pos:start="1253:5" pos:end="1253:15">case <expr pos:start="1253:10" pos:end="1253:14"><literal type="number" pos:start="1253:10" pos:end="1253:14">0x1a1</literal></expr>:</case> <comment type="block" pos:start="1253:17" pos:end="1253:28">/* pop fs */</comment>

    <case pos:start="1255:5" pos:end="1255:15">case <expr pos:start="1255:10" pos:end="1255:14"><literal type="number" pos:start="1255:10" pos:end="1255:14">0x1a9</literal></expr>:</case> <comment type="block" pos:start="1255:17" pos:end="1255:28">/* pop gs */</comment>

        <expr_stmt pos:start="1257:9" pos:end="1257:22"><expr pos:start="1257:9" pos:end="1257:21"><call pos:start="1257:9" pos:end="1257:21"><name pos:start="1257:9" pos:end="1257:18">gen_pop_T0</name><argument_list pos:start="1257:19" pos:end="1257:21">(<argument pos:start="1257:20" pos:end="1257:20"><expr pos:start="1257:20" pos:end="1257:20"><name pos:start="1257:20" pos:end="1257:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1259:9" pos:end="1259:64"><expr pos:start="1259:9" pos:end="1259:63"><call pos:start="1259:9" pos:end="1259:63"><name pos:start="1259:9" pos:end="1259:23">gen_movl_seg_T0</name><argument_list pos:start="1259:24" pos:end="1259:63">(<argument pos:start="1259:25" pos:end="1259:25"><expr pos:start="1259:25" pos:end="1259:25"><name pos:start="1259:25" pos:end="1259:25">s</name></expr></argument>, <argument pos:start="1259:28" pos:end="1259:39"><expr pos:start="1259:28" pos:end="1259:39"><operator pos:start="1259:28" pos:end="1259:28">(</operator><name pos:start="1259:29" pos:end="1259:29">b</name> <operator pos:start="1259:31" pos:end="1259:32">&gt;&gt;</operator> <literal type="number" pos:start="1259:34" pos:end="1259:34">3</literal><operator pos:start="1259:35" pos:end="1259:35">)</operator> <operator pos:start="1259:37" pos:end="1259:37">&amp;</operator> <literal type="number" pos:start="1259:39" pos:end="1259:39">7</literal></expr></argument>, <argument pos:start="1259:42" pos:end="1259:62"><expr pos:start="1259:42" pos:end="1259:62"><name pos:start="1259:42" pos:end="1259:49">pc_start</name> <operator pos:start="1259:51" pos:end="1259:51">-</operator> <name pos:start="1259:53" pos:end="1259:62"><name pos:start="1259:53" pos:end="1259:53">s</name><operator pos:start="1259:54" pos:end="1259:55">-&gt;</operator><name pos:start="1259:56" pos:end="1259:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1261:9" pos:end="1261:26"><expr pos:start="1261:9" pos:end="1261:25"><call pos:start="1261:9" pos:end="1261:25"><name pos:start="1261:9" pos:end="1261:22">gen_pop_update</name><argument_list pos:start="1261:23" pos:end="1261:25">(<argument pos:start="1261:24" pos:end="1261:24"><expr pos:start="1261:24" pos:end="1261:24"><name pos:start="1261:24" pos:end="1261:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1263:9" pos:end="1269:9"><if pos:start="1263:9" pos:end="1269:9">if <condition pos:start="1263:12" pos:end="1263:22">(<expr pos:start="1263:13" pos:end="1263:21"><name pos:start="1263:13" pos:end="1263:21"><name pos:start="1263:13" pos:end="1263:13">s</name><operator pos:start="1263:14" pos:end="1263:15">-&gt;</operator><name pos:start="1263:16" pos:end="1263:21">is_jmp</name></name></expr>)</condition> <block pos:start="1263:24" pos:end="1269:9">{<block_content pos:start="1265:13" pos:end="1267:23">

            <expr_stmt pos:start="1265:13" pos:end="1265:46"><expr pos:start="1265:13" pos:end="1265:45"><call pos:start="1265:13" pos:end="1265:45"><name pos:start="1265:13" pos:end="1265:25">gen_op_jmp_im</name><argument_list pos:start="1265:26" pos:end="1265:45">(<argument pos:start="1265:27" pos:end="1265:44"><expr pos:start="1265:27" pos:end="1265:44"><name pos:start="1265:27" pos:end="1265:31"><name pos:start="1265:27" pos:end="1265:27">s</name><operator pos:start="1265:28" pos:end="1265:29">-&gt;</operator><name pos:start="1265:30" pos:end="1265:31">pc</name></name> <operator pos:start="1265:33" pos:end="1265:33">-</operator> <name pos:start="1265:35" pos:end="1265:44"><name pos:start="1265:35" pos:end="1265:35">s</name><operator pos:start="1265:36" pos:end="1265:37">-&gt;</operator><name pos:start="1265:38" pos:end="1265:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1267:13" pos:end="1267:23"><expr pos:start="1267:13" pos:end="1267:22"><call pos:start="1267:13" pos:end="1267:22"><name pos:start="1267:13" pos:end="1267:19">gen_eob</name><argument_list pos:start="1267:20" pos:end="1267:22">(<argument pos:start="1267:21" pos:end="1267:21"><expr pos:start="1267:21" pos:end="1267:21"><name pos:start="1267:21" pos:end="1267:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="1271:9" pos:end="1271:14">break;</break>



        <comment type="block" format="doxygen" pos:start="1275:9" pos:end="1275:36">/**************************/</comment>

        <comment type="block" pos:start="1277:9" pos:end="1277:17">/* mov */</comment>

    <case pos:start="1279:5" pos:end="1279:14">case <expr pos:start="1279:10" pos:end="1279:13"><literal type="number" pos:start="1279:10" pos:end="1279:13">0x88</literal></expr>:</case>

    <case pos:start="1281:5" pos:end="1281:14">case <expr pos:start="1281:10" pos:end="1281:13"><literal type="number" pos:start="1281:10" pos:end="1281:13">0x89</literal></expr>:</case> <comment type="block" pos:start="1281:16" pos:end="1281:31">/* mov Gv, Ev */</comment>

        <if_stmt pos:start="1283:9" pos:end="1289:43"><if pos:start="1283:9" pos:end="1285:25">if <condition pos:start="1283:12" pos:end="1283:25">(<expr pos:start="1283:13" pos:end="1283:24"><operator pos:start="1283:13" pos:end="1283:13">(</operator><name pos:start="1283:14" pos:end="1283:14">b</name> <operator pos:start="1283:16" pos:end="1283:16">&amp;</operator> <literal type="number" pos:start="1283:18" pos:end="1283:18">1</literal><operator pos:start="1283:19" pos:end="1283:19">)</operator> <operator pos:start="1283:21" pos:end="1283:22">==</operator> <literal type="number" pos:start="1283:24" pos:end="1283:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1285:13" pos:end="1285:25"><block_content pos:start="1285:13" pos:end="1285:25">

            <expr_stmt pos:start="1285:13" pos:end="1285:25"><expr pos:start="1285:13" pos:end="1285:24"><name pos:start="1285:13" pos:end="1285:14">ot</name> <operator pos:start="1285:16" pos:end="1285:16">=</operator> <name pos:start="1285:18" pos:end="1285:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1287:9" pos:end="1289:43">else<block type="pseudo" pos:start="1289:13" pos:end="1289:43"><block_content pos:start="1289:13" pos:end="1289:43">

            <expr_stmt pos:start="1289:13" pos:end="1289:43"><expr pos:start="1289:13" pos:end="1289:42"><name pos:start="1289:13" pos:end="1289:14">ot</name> <operator pos:start="1289:16" pos:end="1289:16">=</operator> <ternary pos:start="1289:18" pos:end="1289:42"><condition pos:start="1289:18" pos:end="1289:24"><expr pos:start="1289:18" pos:end="1289:22"><name pos:start="1289:18" pos:end="1289:22">dflag</name></expr> ?</condition><then pos:start="1289:26" pos:end="1289:32"> <expr pos:start="1289:26" pos:end="1289:32"><name pos:start="1289:26" pos:end="1289:32">OT_LONG</name></expr> </then><else pos:start="1289:34" pos:end="1289:42">: <expr pos:start="1289:36" pos:end="1289:42"><name pos:start="1289:36" pos:end="1289:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1291:9" pos:end="1291:35"><expr pos:start="1291:9" pos:end="1291:34"><name pos:start="1291:9" pos:end="1291:13">modrm</name> <operator pos:start="1291:15" pos:end="1291:15">=</operator> <call pos:start="1291:17" pos:end="1291:34"><name pos:start="1291:17" pos:end="1291:25">ldub_code</name><argument_list pos:start="1291:26" pos:end="1291:34">(<argument pos:start="1291:27" pos:end="1291:33"><expr pos:start="1291:27" pos:end="1291:33"><name pos:start="1291:27" pos:end="1291:31"><name pos:start="1291:27" pos:end="1291:27">s</name><operator pos:start="1291:28" pos:end="1291:29">-&gt;</operator><name pos:start="1291:30" pos:end="1291:31">pc</name></name><operator pos:start="1291:32" pos:end="1291:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1293:9" pos:end="1293:31"><expr pos:start="1293:9" pos:end="1293:30"><name pos:start="1293:9" pos:end="1293:11">reg</name> <operator pos:start="1293:13" pos:end="1293:13">=</operator> <operator pos:start="1293:15" pos:end="1293:15">(</operator><name pos:start="1293:16" pos:end="1293:20">modrm</name> <operator pos:start="1293:22" pos:end="1293:23">&gt;&gt;</operator> <literal type="number" pos:start="1293:25" pos:end="1293:25">3</literal><operator pos:start="1293:26" pos:end="1293:26">)</operator> <operator pos:start="1293:28" pos:end="1293:28">&amp;</operator> <literal type="number" pos:start="1293:30" pos:end="1293:30">7</literal></expr>;</expr_stmt>

        

        <comment type="block" pos:start="1297:9" pos:end="1297:38">/* generate a generic store */</comment>

        <expr_stmt pos:start="1299:9" pos:end="1299:54"><expr pos:start="1299:9" pos:end="1299:53"><call pos:start="1299:9" pos:end="1299:53"><name pos:start="1299:9" pos:end="1299:22">gen_ldst_modrm</name><argument_list pos:start="1299:23" pos:end="1299:53">(<argument pos:start="1299:24" pos:end="1299:24"><expr pos:start="1299:24" pos:end="1299:24"><name pos:start="1299:24" pos:end="1299:24">s</name></expr></argument>, <argument pos:start="1299:27" pos:end="1299:31"><expr pos:start="1299:27" pos:end="1299:31"><name pos:start="1299:27" pos:end="1299:31">modrm</name></expr></argument>, <argument pos:start="1299:34" pos:end="1299:35"><expr pos:start="1299:34" pos:end="1299:35"><name pos:start="1299:34" pos:end="1299:35">ot</name></expr></argument>, <argument pos:start="1299:38" pos:end="1299:49"><expr pos:start="1299:38" pos:end="1299:49"><name pos:start="1299:38" pos:end="1299:43">OR_EAX</name> <operator pos:start="1299:45" pos:end="1299:45">+</operator> <name pos:start="1299:47" pos:end="1299:49">reg</name></expr></argument>, <argument pos:start="1299:52" pos:end="1299:52"><expr pos:start="1299:52" pos:end="1299:52"><literal type="number" pos:start="1299:52" pos:end="1299:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1301:9" pos:end="1301:14">break;</break>

    <case pos:start="1303:5" pos:end="1303:14">case <expr pos:start="1303:10" pos:end="1303:13"><literal type="number" pos:start="1303:10" pos:end="1303:13">0xc6</literal></expr>:</case>

    <case pos:start="1305:5" pos:end="1305:14">case <expr pos:start="1305:10" pos:end="1305:13"><literal type="number" pos:start="1305:10" pos:end="1305:13">0xc7</literal></expr>:</case> <comment type="block" pos:start="1305:16" pos:end="1305:31">/* mov Ev, Iv */</comment>

        <if_stmt pos:start="1307:9" pos:end="1313:43"><if pos:start="1307:9" pos:end="1309:25">if <condition pos:start="1307:12" pos:end="1307:25">(<expr pos:start="1307:13" pos:end="1307:24"><operator pos:start="1307:13" pos:end="1307:13">(</operator><name pos:start="1307:14" pos:end="1307:14">b</name> <operator pos:start="1307:16" pos:end="1307:16">&amp;</operator> <literal type="number" pos:start="1307:18" pos:end="1307:18">1</literal><operator pos:start="1307:19" pos:end="1307:19">)</operator> <operator pos:start="1307:21" pos:end="1307:22">==</operator> <literal type="number" pos:start="1307:24" pos:end="1307:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1309:13" pos:end="1309:25"><block_content pos:start="1309:13" pos:end="1309:25">

            <expr_stmt pos:start="1309:13" pos:end="1309:25"><expr pos:start="1309:13" pos:end="1309:24"><name pos:start="1309:13" pos:end="1309:14">ot</name> <operator pos:start="1309:16" pos:end="1309:16">=</operator> <name pos:start="1309:18" pos:end="1309:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1311:9" pos:end="1313:43">else<block type="pseudo" pos:start="1313:13" pos:end="1313:43"><block_content pos:start="1313:13" pos:end="1313:43">

            <expr_stmt pos:start="1313:13" pos:end="1313:43"><expr pos:start="1313:13" pos:end="1313:42"><name pos:start="1313:13" pos:end="1313:14">ot</name> <operator pos:start="1313:16" pos:end="1313:16">=</operator> <ternary pos:start="1313:18" pos:end="1313:42"><condition pos:start="1313:18" pos:end="1313:24"><expr pos:start="1313:18" pos:end="1313:22"><name pos:start="1313:18" pos:end="1313:22">dflag</name></expr> ?</condition><then pos:start="1313:26" pos:end="1313:32"> <expr pos:start="1313:26" pos:end="1313:32"><name pos:start="1313:26" pos:end="1313:32">OT_LONG</name></expr> </then><else pos:start="1313:34" pos:end="1313:42">: <expr pos:start="1313:36" pos:end="1313:42"><name pos:start="1313:36" pos:end="1313:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1315:9" pos:end="1315:35"><expr pos:start="1315:9" pos:end="1315:34"><name pos:start="1315:9" pos:end="1315:13">modrm</name> <operator pos:start="1315:15" pos:end="1315:15">=</operator> <call pos:start="1315:17" pos:end="1315:34"><name pos:start="1315:17" pos:end="1315:25">ldub_code</name><argument_list pos:start="1315:26" pos:end="1315:34">(<argument pos:start="1315:27" pos:end="1315:33"><expr pos:start="1315:27" pos:end="1315:33"><name pos:start="1315:27" pos:end="1315:31"><name pos:start="1315:27" pos:end="1315:27">s</name><operator pos:start="1315:28" pos:end="1315:29">-&gt;</operator><name pos:start="1315:30" pos:end="1315:31">pc</name></name><operator pos:start="1315:32" pos:end="1315:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1317:9" pos:end="1317:31"><expr pos:start="1317:9" pos:end="1317:30"><name pos:start="1317:9" pos:end="1317:11">mod</name> <operator pos:start="1317:13" pos:end="1317:13">=</operator> <operator pos:start="1317:15" pos:end="1317:15">(</operator><name pos:start="1317:16" pos:end="1317:20">modrm</name> <operator pos:start="1317:22" pos:end="1317:23">&gt;&gt;</operator> <literal type="number" pos:start="1317:25" pos:end="1317:25">6</literal><operator pos:start="1317:26" pos:end="1317:26">)</operator> <operator pos:start="1317:28" pos:end="1317:28">&amp;</operator> <literal type="number" pos:start="1317:30" pos:end="1317:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1319:9" pos:end="1321:61"><if pos:start="1319:9" pos:end="1321:61">if <condition pos:start="1319:12" pos:end="1319:21">(<expr pos:start="1319:13" pos:end="1319:20"><name pos:start="1319:13" pos:end="1319:15">mod</name> <operator pos:start="1319:17" pos:end="1319:18">!=</operator> <literal type="number" pos:start="1319:20" pos:end="1319:20">3</literal></expr>)</condition><block type="pseudo" pos:start="1321:13" pos:end="1321:61"><block_content pos:start="1321:13" pos:end="1321:61">

            <expr_stmt pos:start="1321:13" pos:end="1321:61"><expr pos:start="1321:13" pos:end="1321:60"><call pos:start="1321:13" pos:end="1321:60"><name pos:start="1321:13" pos:end="1321:25">gen_lea_modrm</name><argument_list pos:start="1321:26" pos:end="1321:60">(<argument pos:start="1321:27" pos:end="1321:27"><expr pos:start="1321:27" pos:end="1321:27"><name pos:start="1321:27" pos:end="1321:27">s</name></expr></argument>, <argument pos:start="1321:30" pos:end="1321:34"><expr pos:start="1321:30" pos:end="1321:34"><name pos:start="1321:30" pos:end="1321:34">modrm</name></expr></argument>, <argument pos:start="1321:37" pos:end="1321:45"><expr pos:start="1321:37" pos:end="1321:45"><operator pos:start="1321:37" pos:end="1321:37">&amp;</operator><name pos:start="1321:38" pos:end="1321:45">reg_addr</name></expr></argument>, <argument pos:start="1321:48" pos:end="1321:59"><expr pos:start="1321:48" pos:end="1321:59"><operator pos:start="1321:48" pos:end="1321:48">&amp;</operator><name pos:start="1321:49" pos:end="1321:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1323:9" pos:end="1323:30"><expr pos:start="1323:9" pos:end="1323:29"><name pos:start="1323:9" pos:end="1323:11">val</name> <operator pos:start="1323:13" pos:end="1323:13">=</operator> <call pos:start="1323:15" pos:end="1323:29"><name pos:start="1323:15" pos:end="1323:22">insn_get</name><argument_list pos:start="1323:23" pos:end="1323:29">(<argument pos:start="1323:24" pos:end="1323:24"><expr pos:start="1323:24" pos:end="1323:24"><name pos:start="1323:24" pos:end="1323:24">s</name></expr></argument>, <argument pos:start="1323:27" pos:end="1323:28"><expr pos:start="1323:27" pos:end="1323:28"><name pos:start="1323:27" pos:end="1323:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1325:9" pos:end="1325:31"><expr pos:start="1325:9" pos:end="1325:30"><call pos:start="1325:9" pos:end="1325:30"><name pos:start="1325:9" pos:end="1325:25">gen_op_movl_T0_im</name><argument_list pos:start="1325:26" pos:end="1325:30">(<argument pos:start="1325:27" pos:end="1325:29"><expr pos:start="1325:27" pos:end="1325:29"><name pos:start="1325:27" pos:end="1325:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1327:9" pos:end="1333:47"><if pos:start="1327:9" pos:end="1329:49">if <condition pos:start="1327:12" pos:end="1327:21">(<expr pos:start="1327:13" pos:end="1327:20"><name pos:start="1327:13" pos:end="1327:15">mod</name> <operator pos:start="1327:17" pos:end="1327:18">!=</operator> <literal type="number" pos:start="1327:20" pos:end="1327:20">3</literal></expr>)</condition><block type="pseudo" pos:start="1329:13" pos:end="1329:49"><block_content pos:start="1329:13" pos:end="1329:49">

            <expr_stmt pos:start="1329:13" pos:end="1329:49"><expr pos:start="1329:13" pos:end="1329:48"><name pos:start="1329:13" pos:end="1329:46"><name pos:start="1329:13" pos:end="1329:27">gen_op_st_T0_A0</name><index pos:start="1329:28" pos:end="1329:46">[<expr pos:start="1329:29" pos:end="1329:45"><name pos:start="1329:29" pos:end="1329:30">ot</name> <operator pos:start="1329:32" pos:end="1329:32">+</operator> <name pos:start="1329:34" pos:end="1329:45"><name pos:start="1329:34" pos:end="1329:34">s</name><operator pos:start="1329:35" pos:end="1329:36">-&gt;</operator><name pos:start="1329:37" pos:end="1329:45">mem_index</name></name></expr>]</index></name><operator pos:start="1329:47" pos:end="1329:47">(</operator><operator pos:start="1329:48" pos:end="1329:48">)</operator></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1331:9" pos:end="1333:47">else<block type="pseudo" pos:start="1333:13" pos:end="1333:47"><block_content pos:start="1333:13" pos:end="1333:47">

            <expr_stmt pos:start="1333:13" pos:end="1333:47"><expr pos:start="1333:13" pos:end="1333:46"><name pos:start="1333:13" pos:end="1333:44"><name pos:start="1333:13" pos:end="1333:29">gen_op_mov_reg_T0</name><index pos:start="1333:30" pos:end="1333:33">[<expr pos:start="1333:31" pos:end="1333:32"><name pos:start="1333:31" pos:end="1333:32">ot</name></expr>]</index><index pos:start="1333:34" pos:end="1333:44">[<expr pos:start="1333:35" pos:end="1333:43"><name pos:start="1333:35" pos:end="1333:39">modrm</name> <operator pos:start="1333:41" pos:end="1333:41">&amp;</operator> <literal type="number" pos:start="1333:43" pos:end="1333:43">7</literal></expr>]</index></name><operator pos:start="1333:45" pos:end="1333:45">(</operator><operator pos:start="1333:46" pos:end="1333:46">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="1335:9" pos:end="1335:14">break;</break>

    <case pos:start="1337:5" pos:end="1337:14">case <expr pos:start="1337:10" pos:end="1337:13"><literal type="number" pos:start="1337:10" pos:end="1337:13">0x8a</literal></expr>:</case>

    <case pos:start="1339:5" pos:end="1339:14">case <expr pos:start="1339:10" pos:end="1339:13"><literal type="number" pos:start="1339:10" pos:end="1339:13">0x8b</literal></expr>:</case> <comment type="block" pos:start="1339:16" pos:end="1339:31">/* mov Ev, Gv */</comment>

        <if_stmt pos:start="1341:9" pos:end="1347:43"><if pos:start="1341:9" pos:end="1343:25">if <condition pos:start="1341:12" pos:end="1341:25">(<expr pos:start="1341:13" pos:end="1341:24"><operator pos:start="1341:13" pos:end="1341:13">(</operator><name pos:start="1341:14" pos:end="1341:14">b</name> <operator pos:start="1341:16" pos:end="1341:16">&amp;</operator> <literal type="number" pos:start="1341:18" pos:end="1341:18">1</literal><operator pos:start="1341:19" pos:end="1341:19">)</operator> <operator pos:start="1341:21" pos:end="1341:22">==</operator> <literal type="number" pos:start="1341:24" pos:end="1341:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1343:13" pos:end="1343:25"><block_content pos:start="1343:13" pos:end="1343:25">

            <expr_stmt pos:start="1343:13" pos:end="1343:25"><expr pos:start="1343:13" pos:end="1343:24"><name pos:start="1343:13" pos:end="1343:14">ot</name> <operator pos:start="1343:16" pos:end="1343:16">=</operator> <name pos:start="1343:18" pos:end="1343:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1345:9" pos:end="1347:43">else<block type="pseudo" pos:start="1347:13" pos:end="1347:43"><block_content pos:start="1347:13" pos:end="1347:43">

            <expr_stmt pos:start="1347:13" pos:end="1347:43"><expr pos:start="1347:13" pos:end="1347:42"><name pos:start="1347:13" pos:end="1347:14">ot</name> <operator pos:start="1347:16" pos:end="1347:16">=</operator> <ternary pos:start="1347:18" pos:end="1347:42"><condition pos:start="1347:18" pos:end="1347:24"><expr pos:start="1347:18" pos:end="1347:22"><name pos:start="1347:18" pos:end="1347:22">dflag</name></expr> ?</condition><then pos:start="1347:26" pos:end="1347:32"> <expr pos:start="1347:26" pos:end="1347:32"><name pos:start="1347:26" pos:end="1347:32">OT_LONG</name></expr> </then><else pos:start="1347:34" pos:end="1347:42">: <expr pos:start="1347:36" pos:end="1347:42"><name pos:start="1347:36" pos:end="1347:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1349:9" pos:end="1349:35"><expr pos:start="1349:9" pos:end="1349:34"><name pos:start="1349:9" pos:end="1349:13">modrm</name> <operator pos:start="1349:15" pos:end="1349:15">=</operator> <call pos:start="1349:17" pos:end="1349:34"><name pos:start="1349:17" pos:end="1349:25">ldub_code</name><argument_list pos:start="1349:26" pos:end="1349:34">(<argument pos:start="1349:27" pos:end="1349:33"><expr pos:start="1349:27" pos:end="1349:33"><name pos:start="1349:27" pos:end="1349:31"><name pos:start="1349:27" pos:end="1349:27">s</name><operator pos:start="1349:28" pos:end="1349:29">-&gt;</operator><name pos:start="1349:30" pos:end="1349:31">pc</name></name><operator pos:start="1349:32" pos:end="1349:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1351:9" pos:end="1351:31"><expr pos:start="1351:9" pos:end="1351:30"><name pos:start="1351:9" pos:end="1351:11">reg</name> <operator pos:start="1351:13" pos:end="1351:13">=</operator> <operator pos:start="1351:15" pos:end="1351:15">(</operator><name pos:start="1351:16" pos:end="1351:20">modrm</name> <operator pos:start="1351:22" pos:end="1351:23">&gt;&gt;</operator> <literal type="number" pos:start="1351:25" pos:end="1351:25">3</literal><operator pos:start="1351:26" pos:end="1351:26">)</operator> <operator pos:start="1351:28" pos:end="1351:28">&amp;</operator> <literal type="number" pos:start="1351:30" pos:end="1351:30">7</literal></expr>;</expr_stmt>

        

        <expr_stmt pos:start="1355:9" pos:end="1355:49"><expr pos:start="1355:9" pos:end="1355:48"><call pos:start="1355:9" pos:end="1355:48"><name pos:start="1355:9" pos:end="1355:22">gen_ldst_modrm</name><argument_list pos:start="1355:23" pos:end="1355:48">(<argument pos:start="1355:24" pos:end="1355:24"><expr pos:start="1355:24" pos:end="1355:24"><name pos:start="1355:24" pos:end="1355:24">s</name></expr></argument>, <argument pos:start="1355:27" pos:end="1355:31"><expr pos:start="1355:27" pos:end="1355:31"><name pos:start="1355:27" pos:end="1355:31">modrm</name></expr></argument>, <argument pos:start="1355:34" pos:end="1355:35"><expr pos:start="1355:34" pos:end="1355:35"><name pos:start="1355:34" pos:end="1355:35">ot</name></expr></argument>, <argument pos:start="1355:38" pos:end="1355:44"><expr pos:start="1355:38" pos:end="1355:44"><name pos:start="1355:38" pos:end="1355:44">OR_TMP0</name></expr></argument>, <argument pos:start="1355:47" pos:end="1355:47"><expr pos:start="1355:47" pos:end="1355:47"><literal type="number" pos:start="1355:47" pos:end="1355:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1357:9" pos:end="1357:37"><expr pos:start="1357:9" pos:end="1357:36"><name pos:start="1357:9" pos:end="1357:34"><name pos:start="1357:9" pos:end="1357:25">gen_op_mov_reg_T0</name><index pos:start="1357:26" pos:end="1357:29">[<expr pos:start="1357:27" pos:end="1357:28"><name pos:start="1357:27" pos:end="1357:28">ot</name></expr>]</index><index pos:start="1357:30" pos:end="1357:34">[<expr pos:start="1357:31" pos:end="1357:33"><name pos:start="1357:31" pos:end="1357:33">reg</name></expr>]</index></name><operator pos:start="1357:35" pos:end="1357:35">(</operator><operator pos:start="1357:36" pos:end="1357:36">)</operator></expr>;</expr_stmt>

        <break pos:start="1359:9" pos:end="1359:14">break;</break>

    <case pos:start="1361:5" pos:end="1361:14">case <expr pos:start="1361:10" pos:end="1361:13"><literal type="number" pos:start="1361:10" pos:end="1361:13">0x8e</literal></expr>:</case> <comment type="block" pos:start="1361:16" pos:end="1361:32">/* mov seg, Gv */</comment>

        <expr_stmt pos:start="1363:9" pos:end="1363:35"><expr pos:start="1363:9" pos:end="1363:34"><name pos:start="1363:9" pos:end="1363:13">modrm</name> <operator pos:start="1363:15" pos:end="1363:15">=</operator> <call pos:start="1363:17" pos:end="1363:34"><name pos:start="1363:17" pos:end="1363:25">ldub_code</name><argument_list pos:start="1363:26" pos:end="1363:34">(<argument pos:start="1363:27" pos:end="1363:33"><expr pos:start="1363:27" pos:end="1363:33"><name pos:start="1363:27" pos:end="1363:31"><name pos:start="1363:27" pos:end="1363:27">s</name><operator pos:start="1363:28" pos:end="1363:29">-&gt;</operator><name pos:start="1363:30" pos:end="1363:31">pc</name></name><operator pos:start="1363:32" pos:end="1363:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1365:9" pos:end="1365:31"><expr pos:start="1365:9" pos:end="1365:30"><name pos:start="1365:9" pos:end="1365:11">reg</name> <operator pos:start="1365:13" pos:end="1365:13">=</operator> <operator pos:start="1365:15" pos:end="1365:15">(</operator><name pos:start="1365:16" pos:end="1365:20">modrm</name> <operator pos:start="1365:22" pos:end="1365:23">&gt;&gt;</operator> <literal type="number" pos:start="1365:25" pos:end="1365:25">3</literal><operator pos:start="1365:26" pos:end="1365:26">)</operator> <operator pos:start="1365:28" pos:end="1365:28">&amp;</operator> <literal type="number" pos:start="1365:30" pos:end="1365:30">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1367:9" pos:end="1369:28"><if pos:start="1367:9" pos:end="1369:28">if <condition pos:start="1367:12" pos:end="1367:36">(<expr pos:start="1367:13" pos:end="1367:35"><name pos:start="1367:13" pos:end="1367:15">reg</name> <operator pos:start="1367:17" pos:end="1367:18">&gt;=</operator> <literal type="number" pos:start="1367:20" pos:end="1367:20">6</literal> <operator pos:start="1367:22" pos:end="1367:23">||</operator> <name pos:start="1367:25" pos:end="1367:27">reg</name> <operator pos:start="1367:29" pos:end="1367:30">==</operator> <name pos:start="1367:32" pos:end="1367:35">R_CS</name></expr>)</condition><block type="pseudo" pos:start="1369:13" pos:end="1369:28"><block_content pos:start="1369:13" pos:end="1369:28">

            <goto pos:start="1369:13" pos:end="1369:28">goto <name pos:start="1369:18" pos:end="1369:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1371:9" pos:end="1371:54"><expr pos:start="1371:9" pos:end="1371:53"><call pos:start="1371:9" pos:end="1371:53"><name pos:start="1371:9" pos:end="1371:22">gen_ldst_modrm</name><argument_list pos:start="1371:23" pos:end="1371:53">(<argument pos:start="1371:24" pos:end="1371:24"><expr pos:start="1371:24" pos:end="1371:24"><name pos:start="1371:24" pos:end="1371:24">s</name></expr></argument>, <argument pos:start="1371:27" pos:end="1371:31"><expr pos:start="1371:27" pos:end="1371:31"><name pos:start="1371:27" pos:end="1371:31">modrm</name></expr></argument>, <argument pos:start="1371:34" pos:end="1371:40"><expr pos:start="1371:34" pos:end="1371:40"><name pos:start="1371:34" pos:end="1371:40">OT_WORD</name></expr></argument>, <argument pos:start="1371:43" pos:end="1371:49"><expr pos:start="1371:43" pos:end="1371:49"><name pos:start="1371:43" pos:end="1371:49">OR_TMP0</name></expr></argument>, <argument pos:start="1371:52" pos:end="1371:52"><expr pos:start="1371:52" pos:end="1371:52"><literal type="number" pos:start="1371:52" pos:end="1371:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1373:9" pos:end="1373:55"><expr pos:start="1373:9" pos:end="1373:54"><call pos:start="1373:9" pos:end="1373:54"><name pos:start="1373:9" pos:end="1373:23">gen_movl_seg_T0</name><argument_list pos:start="1373:24" pos:end="1373:54">(<argument pos:start="1373:25" pos:end="1373:25"><expr pos:start="1373:25" pos:end="1373:25"><name pos:start="1373:25" pos:end="1373:25">s</name></expr></argument>, <argument pos:start="1373:28" pos:end="1373:30"><expr pos:start="1373:28" pos:end="1373:30"><name pos:start="1373:28" pos:end="1373:30">reg</name></expr></argument>, <argument pos:start="1373:33" pos:end="1373:53"><expr pos:start="1373:33" pos:end="1373:53"><name pos:start="1373:33" pos:end="1373:40">pc_start</name> <operator pos:start="1373:42" pos:end="1373:42">-</operator> <name pos:start="1373:44" pos:end="1373:53"><name pos:start="1373:44" pos:end="1373:44">s</name><operator pos:start="1373:45" pos:end="1373:46">-&gt;</operator><name pos:start="1373:47" pos:end="1373:53">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1375:9" pos:end="1389:9"><if pos:start="1375:9" pos:end="1389:9">if <condition pos:start="1375:12" pos:end="1375:24">(<expr pos:start="1375:13" pos:end="1375:23"><name pos:start="1375:13" pos:end="1375:15">reg</name> <operator pos:start="1375:17" pos:end="1375:18">==</operator> <name pos:start="1375:20" pos:end="1375:23">R_SS</name></expr>)</condition> <block pos:start="1375:26" pos:end="1389:9">{<block_content pos:start="1383:13" pos:end="1387:22">

            <comment type="block" pos:start="1377:13" pos:end="1377:56">/* if reg == SS, inhibit interrupts/trace */</comment>

            <comment type="block" pos:start="1379:13" pos:end="1381:33">/* If several instructions disable interrupts, only the

               _first_ does it */</comment>

            <if_stmt pos:start="1383:13" pos:end="1385:41"><if pos:start="1383:13" pos:end="1385:41">if <condition pos:start="1383:16" pos:end="1383:54">(<expr pos:start="1383:17" pos:end="1383:53"><operator pos:start="1383:17" pos:end="1383:17">!</operator><operator pos:start="1383:18" pos:end="1383:18">(</operator><name pos:start="1383:19" pos:end="1383:30"><name pos:start="1383:19" pos:end="1383:19">s</name><operator pos:start="1383:20" pos:end="1383:21">-&gt;</operator><name pos:start="1383:22" pos:end="1383:23">tb</name><operator pos:start="1383:24" pos:end="1383:25">-&gt;</operator><name pos:start="1383:26" pos:end="1383:30">flags</name></name> <operator pos:start="1383:32" pos:end="1383:32">&amp;</operator> <name pos:start="1383:34" pos:end="1383:52">HF_INHIBIT_IRQ_MASK</name><operator pos:start="1383:53" pos:end="1383:53">)</operator></expr>)</condition><block type="pseudo" pos:start="1385:17" pos:end="1385:41"><block_content pos:start="1385:17" pos:end="1385:41">

                <expr_stmt pos:start="1385:17" pos:end="1385:41"><expr pos:start="1385:17" pos:end="1385:40"><call pos:start="1385:17" pos:end="1385:40"><name pos:start="1385:17" pos:end="1385:38">gen_op_set_inhibit_irq</name><argument_list pos:start="1385:39" pos:end="1385:40">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1387:13" pos:end="1387:22"><expr pos:start="1387:13" pos:end="1387:21"><name pos:start="1387:13" pos:end="1387:17"><name pos:start="1387:13" pos:end="1387:13">s</name><operator pos:start="1387:14" pos:end="1387:15">-&gt;</operator><name pos:start="1387:16" pos:end="1387:17">tf</name></name> <operator pos:start="1387:19" pos:end="1387:19">=</operator> <literal type="number" pos:start="1387:21" pos:end="1387:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1391:9" pos:end="1397:9"><if pos:start="1391:9" pos:end="1397:9">if <condition pos:start="1391:12" pos:end="1391:22">(<expr pos:start="1391:13" pos:end="1391:21"><name pos:start="1391:13" pos:end="1391:21"><name pos:start="1391:13" pos:end="1391:13">s</name><operator pos:start="1391:14" pos:end="1391:15">-&gt;</operator><name pos:start="1391:16" pos:end="1391:21">is_jmp</name></name></expr>)</condition> <block pos:start="1391:24" pos:end="1397:9">{<block_content pos:start="1393:13" pos:end="1395:23">

            <expr_stmt pos:start="1393:13" pos:end="1393:46"><expr pos:start="1393:13" pos:end="1393:45"><call pos:start="1393:13" pos:end="1393:45"><name pos:start="1393:13" pos:end="1393:25">gen_op_jmp_im</name><argument_list pos:start="1393:26" pos:end="1393:45">(<argument pos:start="1393:27" pos:end="1393:44"><expr pos:start="1393:27" pos:end="1393:44"><name pos:start="1393:27" pos:end="1393:31"><name pos:start="1393:27" pos:end="1393:27">s</name><operator pos:start="1393:28" pos:end="1393:29">-&gt;</operator><name pos:start="1393:30" pos:end="1393:31">pc</name></name> <operator pos:start="1393:33" pos:end="1393:33">-</operator> <name pos:start="1393:35" pos:end="1393:44"><name pos:start="1393:35" pos:end="1393:35">s</name><operator pos:start="1393:36" pos:end="1393:37">-&gt;</operator><name pos:start="1393:38" pos:end="1393:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1395:13" pos:end="1395:23"><expr pos:start="1395:13" pos:end="1395:22"><call pos:start="1395:13" pos:end="1395:22"><name pos:start="1395:13" pos:end="1395:19">gen_eob</name><argument_list pos:start="1395:20" pos:end="1395:22">(<argument pos:start="1395:21" pos:end="1395:21"><expr pos:start="1395:21" pos:end="1395:21"><name pos:start="1395:21" pos:end="1395:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="1399:9" pos:end="1399:14">break;</break>

    <case pos:start="1401:5" pos:end="1401:14">case <expr pos:start="1401:10" pos:end="1401:13"><literal type="number" pos:start="1401:10" pos:end="1401:13">0x8c</literal></expr>:</case> <comment type="block" pos:start="1401:16" pos:end="1401:32">/* mov Gv, seg */</comment>

        <expr_stmt pos:start="1403:9" pos:end="1403:35"><expr pos:start="1403:9" pos:end="1403:34"><name pos:start="1403:9" pos:end="1403:13">modrm</name> <operator pos:start="1403:15" pos:end="1403:15">=</operator> <call pos:start="1403:17" pos:end="1403:34"><name pos:start="1403:17" pos:end="1403:25">ldub_code</name><argument_list pos:start="1403:26" pos:end="1403:34">(<argument pos:start="1403:27" pos:end="1403:33"><expr pos:start="1403:27" pos:end="1403:33"><name pos:start="1403:27" pos:end="1403:31"><name pos:start="1403:27" pos:end="1403:27">s</name><operator pos:start="1403:28" pos:end="1403:29">-&gt;</operator><name pos:start="1403:30" pos:end="1403:31">pc</name></name><operator pos:start="1403:32" pos:end="1403:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1405:9" pos:end="1405:31"><expr pos:start="1405:9" pos:end="1405:30"><name pos:start="1405:9" pos:end="1405:11">reg</name> <operator pos:start="1405:13" pos:end="1405:13">=</operator> <operator pos:start="1405:15" pos:end="1405:15">(</operator><name pos:start="1405:16" pos:end="1405:20">modrm</name> <operator pos:start="1405:22" pos:end="1405:23">&gt;&gt;</operator> <literal type="number" pos:start="1405:25" pos:end="1405:25">3</literal><operator pos:start="1405:26" pos:end="1405:26">)</operator> <operator pos:start="1405:28" pos:end="1405:28">&amp;</operator> <literal type="number" pos:start="1405:30" pos:end="1405:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1407:9" pos:end="1407:31"><expr pos:start="1407:9" pos:end="1407:30"><name pos:start="1407:9" pos:end="1407:11">mod</name> <operator pos:start="1407:13" pos:end="1407:13">=</operator> <operator pos:start="1407:15" pos:end="1407:15">(</operator><name pos:start="1407:16" pos:end="1407:20">modrm</name> <operator pos:start="1407:22" pos:end="1407:23">&gt;&gt;</operator> <literal type="number" pos:start="1407:25" pos:end="1407:25">6</literal><operator pos:start="1407:26" pos:end="1407:26">)</operator> <operator pos:start="1407:28" pos:end="1407:28">&amp;</operator> <literal type="number" pos:start="1407:30" pos:end="1407:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1409:9" pos:end="1411:28"><if pos:start="1409:9" pos:end="1411:28">if <condition pos:start="1409:12" pos:end="1409:21">(<expr pos:start="1409:13" pos:end="1409:20"><name pos:start="1409:13" pos:end="1409:15">reg</name> <operator pos:start="1409:17" pos:end="1409:18">&gt;=</operator> <literal type="number" pos:start="1409:20" pos:end="1409:20">6</literal></expr>)</condition><block type="pseudo" pos:start="1411:13" pos:end="1411:28"><block_content pos:start="1411:13" pos:end="1411:28">

            <goto pos:start="1411:13" pos:end="1411:28">goto <name pos:start="1411:18" pos:end="1411:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1413:9" pos:end="1413:32"><expr pos:start="1413:9" pos:end="1413:31"><call pos:start="1413:9" pos:end="1413:31"><name pos:start="1413:9" pos:end="1413:26">gen_op_movl_T0_seg</name><argument_list pos:start="1413:27" pos:end="1413:31">(<argument pos:start="1413:28" pos:end="1413:30"><expr pos:start="1413:28" pos:end="1413:30"><name pos:start="1413:28" pos:end="1413:30">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1415:9" pos:end="1415:21"><expr pos:start="1415:9" pos:end="1415:20"><name pos:start="1415:9" pos:end="1415:10">ot</name> <operator pos:start="1415:12" pos:end="1415:12">=</operator> <name pos:start="1415:14" pos:end="1415:20">OT_WORD</name></expr>;</expr_stmt>

        <if_stmt pos:start="1417:9" pos:end="1419:25"><if pos:start="1417:9" pos:end="1419:25">if <condition pos:start="1417:12" pos:end="1417:30">(<expr pos:start="1417:13" pos:end="1417:29"><name pos:start="1417:13" pos:end="1417:15">mod</name> <operator pos:start="1417:17" pos:end="1417:18">==</operator> <literal type="number" pos:start="1417:20" pos:end="1417:20">3</literal> <operator pos:start="1417:22" pos:end="1417:23">&amp;&amp;</operator> <name pos:start="1417:25" pos:end="1417:29">dflag</name></expr>)</condition><block type="pseudo" pos:start="1419:13" pos:end="1419:25"><block_content pos:start="1419:13" pos:end="1419:25">

            <expr_stmt pos:start="1419:13" pos:end="1419:25"><expr pos:start="1419:13" pos:end="1419:24"><name pos:start="1419:13" pos:end="1419:14">ot</name> <operator pos:start="1419:16" pos:end="1419:16">=</operator> <name pos:start="1419:18" pos:end="1419:24">OT_LONG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1421:9" pos:end="1421:49"><expr pos:start="1421:9" pos:end="1421:48"><call pos:start="1421:9" pos:end="1421:48"><name pos:start="1421:9" pos:end="1421:22">gen_ldst_modrm</name><argument_list pos:start="1421:23" pos:end="1421:48">(<argument pos:start="1421:24" pos:end="1421:24"><expr pos:start="1421:24" pos:end="1421:24"><name pos:start="1421:24" pos:end="1421:24">s</name></expr></argument>, <argument pos:start="1421:27" pos:end="1421:31"><expr pos:start="1421:27" pos:end="1421:31"><name pos:start="1421:27" pos:end="1421:31">modrm</name></expr></argument>, <argument pos:start="1421:34" pos:end="1421:35"><expr pos:start="1421:34" pos:end="1421:35"><name pos:start="1421:34" pos:end="1421:35">ot</name></expr></argument>, <argument pos:start="1421:38" pos:end="1421:44"><expr pos:start="1421:38" pos:end="1421:44"><name pos:start="1421:38" pos:end="1421:44">OR_TMP0</name></expr></argument>, <argument pos:start="1421:47" pos:end="1421:47"><expr pos:start="1421:47" pos:end="1421:47"><literal type="number" pos:start="1421:47" pos:end="1421:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1423:9" pos:end="1423:14">break;</break>



    <case pos:start="1427:5" pos:end="1427:15">case <expr pos:start="1427:10" pos:end="1427:14"><literal type="number" pos:start="1427:10" pos:end="1427:14">0x1b6</literal></expr>:</case> <comment type="block" pos:start="1427:17" pos:end="1427:35">/* movzbS Gv, Eb */</comment>

    <case pos:start="1429:5" pos:end="1429:15">case <expr pos:start="1429:10" pos:end="1429:14"><literal type="number" pos:start="1429:10" pos:end="1429:14">0x1b7</literal></expr>:</case> <comment type="block" pos:start="1429:17" pos:end="1429:35">/* movzwS Gv, Eb */</comment>

    <case pos:start="1431:5" pos:end="1431:15">case <expr pos:start="1431:10" pos:end="1431:14"><literal type="number" pos:start="1431:10" pos:end="1431:14">0x1be</literal></expr>:</case> <comment type="block" pos:start="1431:17" pos:end="1431:35">/* movsbS Gv, Eb */</comment>

    <case pos:start="1433:5" pos:end="1433:15">case <expr pos:start="1433:10" pos:end="1433:14"><literal type="number" pos:start="1433:10" pos:end="1433:14">0x1bf</literal></expr>:</case> <comment type="block" pos:start="1433:17" pos:end="1433:35">/* movswS Gv, Eb */</comment>

        <block pos:start="1435:9" pos:end="1511:9">{<block_content pos:start="1437:13" pos:end="1509:13">

            <decl_stmt pos:start="1437:13" pos:end="1437:21"><decl pos:start="1437:13" pos:end="1437:20"><type pos:start="1437:13" pos:end="1437:15"><name pos:start="1437:13" pos:end="1437:15">int</name></type> <name pos:start="1437:17" pos:end="1437:20">d_ot</name></decl>;</decl_stmt>

            <comment type="block" pos:start="1439:13" pos:end="1439:49">/* d_ot is the size of destination */</comment>

            <expr_stmt pos:start="1441:13" pos:end="1441:35"><expr pos:start="1441:13" pos:end="1441:34"><name pos:start="1441:13" pos:end="1441:16">d_ot</name> <operator pos:start="1441:18" pos:end="1441:18">=</operator> <name pos:start="1441:20" pos:end="1441:24">dflag</name> <operator pos:start="1441:26" pos:end="1441:26">+</operator> <name pos:start="1441:28" pos:end="1441:34">OT_WORD</name></expr>;</expr_stmt>

            <comment type="block" pos:start="1443:13" pos:end="1443:42">/* ot is the size of source */</comment>

            <expr_stmt pos:start="1445:13" pos:end="1445:35"><expr pos:start="1445:13" pos:end="1445:34"><name pos:start="1445:13" pos:end="1445:14">ot</name> <operator pos:start="1445:16" pos:end="1445:16">=</operator> <operator pos:start="1445:18" pos:end="1445:18">(</operator><name pos:start="1445:19" pos:end="1445:19">b</name> <operator pos:start="1445:21" pos:end="1445:21">&amp;</operator> <literal type="number" pos:start="1445:23" pos:end="1445:23">1</literal><operator pos:start="1445:24" pos:end="1445:24">)</operator> <operator pos:start="1445:26" pos:end="1445:26">+</operator> <name pos:start="1445:28" pos:end="1445:34">OT_BYTE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1447:13" pos:end="1447:39"><expr pos:start="1447:13" pos:end="1447:38"><name pos:start="1447:13" pos:end="1447:17">modrm</name> <operator pos:start="1447:19" pos:end="1447:19">=</operator> <call pos:start="1447:21" pos:end="1447:38"><name pos:start="1447:21" pos:end="1447:29">ldub_code</name><argument_list pos:start="1447:30" pos:end="1447:38">(<argument pos:start="1447:31" pos:end="1447:37"><expr pos:start="1447:31" pos:end="1447:37"><name pos:start="1447:31" pos:end="1447:35"><name pos:start="1447:31" pos:end="1447:31">s</name><operator pos:start="1447:32" pos:end="1447:33">-&gt;</operator><name pos:start="1447:34" pos:end="1447:35">pc</name></name><operator pos:start="1447:36" pos:end="1447:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1449:13" pos:end="1449:46"><expr pos:start="1449:13" pos:end="1449:45"><name pos:start="1449:13" pos:end="1449:15">reg</name> <operator pos:start="1449:17" pos:end="1449:17">=</operator> <operator pos:start="1449:19" pos:end="1449:19">(</operator><operator pos:start="1449:20" pos:end="1449:20">(</operator><name pos:start="1449:21" pos:end="1449:25">modrm</name> <operator pos:start="1449:27" pos:end="1449:28">&gt;&gt;</operator> <literal type="number" pos:start="1449:30" pos:end="1449:30">3</literal><operator pos:start="1449:31" pos:end="1449:31">)</operator> <operator pos:start="1449:33" pos:end="1449:33">&amp;</operator> <literal type="number" pos:start="1449:35" pos:end="1449:35">7</literal><operator pos:start="1449:36" pos:end="1449:36">)</operator> <operator pos:start="1449:38" pos:end="1449:38">+</operator> <name pos:start="1449:40" pos:end="1449:45">OR_EAX</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1451:13" pos:end="1451:35"><expr pos:start="1451:13" pos:end="1451:34"><name pos:start="1451:13" pos:end="1451:15">mod</name> <operator pos:start="1451:17" pos:end="1451:17">=</operator> <operator pos:start="1451:19" pos:end="1451:19">(</operator><name pos:start="1451:20" pos:end="1451:24">modrm</name> <operator pos:start="1451:26" pos:end="1451:27">&gt;&gt;</operator> <literal type="number" pos:start="1451:29" pos:end="1451:29">6</literal><operator pos:start="1451:30" pos:end="1451:30">)</operator> <operator pos:start="1451:32" pos:end="1451:32">&amp;</operator> <literal type="number" pos:start="1451:34" pos:end="1451:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1453:13" pos:end="1453:27"><expr pos:start="1453:13" pos:end="1453:26"><name pos:start="1453:13" pos:end="1453:14">rm</name> <operator pos:start="1453:16" pos:end="1453:16">=</operator> <name pos:start="1453:18" pos:end="1453:22">modrm</name> <operator pos:start="1453:24" pos:end="1453:24">&amp;</operator> <literal type="number" pos:start="1453:26" pos:end="1453:26">7</literal></expr>;</expr_stmt>

            

            <if_stmt pos:start="1457:13" pos:end="1509:13"><if pos:start="1457:13" pos:end="1493:13">if <condition pos:start="1457:16" pos:end="1457:25">(<expr pos:start="1457:17" pos:end="1457:24"><name pos:start="1457:17" pos:end="1457:19">mod</name> <operator pos:start="1457:21" pos:end="1457:22">==</operator> <literal type="number" pos:start="1457:24" pos:end="1457:24">3</literal></expr>)</condition> <block pos:start="1457:27" pos:end="1493:13">{<block_content pos:start="1459:17" pos:end="1491:47">

                <expr_stmt pos:start="1459:17" pos:end="1459:47"><expr pos:start="1459:17" pos:end="1459:46"><name pos:start="1459:17" pos:end="1459:44"><name pos:start="1459:17" pos:end="1459:33">gen_op_mov_TN_reg</name><index pos:start="1459:34" pos:end="1459:37">[<expr pos:start="1459:35" pos:end="1459:36"><name pos:start="1459:35" pos:end="1459:36">ot</name></expr>]</index><index pos:start="1459:38" pos:end="1459:40">[<expr pos:start="1459:39" pos:end="1459:39"><literal type="number" pos:start="1459:39" pos:end="1459:39">0</literal></expr>]</index><index pos:start="1459:41" pos:end="1459:44">[<expr pos:start="1459:42" pos:end="1459:43"><name pos:start="1459:42" pos:end="1459:43">rm</name></expr>]</index></name><operator pos:start="1459:45" pos:end="1459:45">(</operator><operator pos:start="1459:46" pos:end="1459:46">)</operator></expr>;</expr_stmt>

                <switch pos:start="1461:17" pos:end="1489:17">switch<condition pos:start="1461:23" pos:end="1461:36">(<expr pos:start="1461:24" pos:end="1461:35"><name pos:start="1461:24" pos:end="1461:25">ot</name> <operator pos:start="1461:27" pos:end="1461:27">|</operator> <operator pos:start="1461:29" pos:end="1461:29">(</operator><name pos:start="1461:30" pos:end="1461:30">b</name> <operator pos:start="1461:32" pos:end="1461:32">&amp;</operator> <literal type="number" pos:start="1461:34" pos:end="1461:34">8</literal><operator pos:start="1461:35" pos:end="1461:35">)</operator></expr>)</condition> <block pos:start="1461:38" pos:end="1489:17">{<block_content pos:start="1463:17" pos:end="1487:26">

                <case pos:start="1463:17" pos:end="1463:29">case <expr pos:start="1463:22" pos:end="1463:28"><name pos:start="1463:22" pos:end="1463:28">OT_BYTE</name></expr>:</case>

                    <expr_stmt pos:start="1465:21" pos:end="1465:42"><expr pos:start="1465:21" pos:end="1465:41"><call pos:start="1465:21" pos:end="1465:41"><name pos:start="1465:21" pos:end="1465:39">gen_op_movzbl_T0_T0</name><argument_list pos:start="1465:40" pos:end="1465:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1467:21" pos:end="1467:26">break;</break>

                <case pos:start="1469:17" pos:end="1469:33">case <expr pos:start="1469:22" pos:end="1469:32"><name pos:start="1469:22" pos:end="1469:28">OT_BYTE</name> <operator pos:start="1469:30" pos:end="1469:30">|</operator> <literal type="number" pos:start="1469:32" pos:end="1469:32">8</literal></expr>:</case>

                    <expr_stmt pos:start="1471:21" pos:end="1471:42"><expr pos:start="1471:21" pos:end="1471:41"><call pos:start="1471:21" pos:end="1471:41"><name pos:start="1471:21" pos:end="1471:39">gen_op_movsbl_T0_T0</name><argument_list pos:start="1471:40" pos:end="1471:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1473:21" pos:end="1473:26">break;</break>

                <case pos:start="1475:17" pos:end="1475:29">case <expr pos:start="1475:22" pos:end="1475:28"><name pos:start="1475:22" pos:end="1475:28">OT_WORD</name></expr>:</case>

                    <expr_stmt pos:start="1477:21" pos:end="1477:42"><expr pos:start="1477:21" pos:end="1477:41"><call pos:start="1477:21" pos:end="1477:41"><name pos:start="1477:21" pos:end="1477:39">gen_op_movzwl_T0_T0</name><argument_list pos:start="1477:40" pos:end="1477:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1479:21" pos:end="1479:26">break;</break>

                <default pos:start="1481:17" pos:end="1481:24">default:</default>

                <case pos:start="1483:17" pos:end="1483:33">case <expr pos:start="1483:22" pos:end="1483:32"><name pos:start="1483:22" pos:end="1483:28">OT_WORD</name> <operator pos:start="1483:30" pos:end="1483:30">|</operator> <literal type="number" pos:start="1483:32" pos:end="1483:32">8</literal></expr>:</case>

                    <expr_stmt pos:start="1485:21" pos:end="1485:42"><expr pos:start="1485:21" pos:end="1485:41"><call pos:start="1485:21" pos:end="1485:41"><name pos:start="1485:21" pos:end="1485:39">gen_op_movswl_T0_T0</name><argument_list pos:start="1485:40" pos:end="1485:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1487:21" pos:end="1487:26">break;</break>

                </block_content>}</block></switch>

                <expr_stmt pos:start="1491:17" pos:end="1491:47"><expr pos:start="1491:17" pos:end="1491:46"><name pos:start="1491:17" pos:end="1491:44"><name pos:start="1491:17" pos:end="1491:33">gen_op_mov_reg_T0</name><index pos:start="1491:34" pos:end="1491:39">[<expr pos:start="1491:35" pos:end="1491:38"><name pos:start="1491:35" pos:end="1491:38">d_ot</name></expr>]</index><index pos:start="1491:40" pos:end="1491:44">[<expr pos:start="1491:41" pos:end="1491:43"><name pos:start="1491:41" pos:end="1491:43">reg</name></expr>]</index></name><operator pos:start="1491:45" pos:end="1491:45">(</operator><operator pos:start="1491:46" pos:end="1491:46">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1493:15" pos:end="1509:13">else <block pos:start="1493:20" pos:end="1509:13">{<block_content pos:start="1495:17" pos:end="1507:47">

                <expr_stmt pos:start="1495:17" pos:end="1495:65"><expr pos:start="1495:17" pos:end="1495:64"><call pos:start="1495:17" pos:end="1495:64"><name pos:start="1495:17" pos:end="1495:29">gen_lea_modrm</name><argument_list pos:start="1495:30" pos:end="1495:64">(<argument pos:start="1495:31" pos:end="1495:31"><expr pos:start="1495:31" pos:end="1495:31"><name pos:start="1495:31" pos:end="1495:31">s</name></expr></argument>, <argument pos:start="1495:34" pos:end="1495:38"><expr pos:start="1495:34" pos:end="1495:38"><name pos:start="1495:34" pos:end="1495:38">modrm</name></expr></argument>, <argument pos:start="1495:41" pos:end="1495:49"><expr pos:start="1495:41" pos:end="1495:49"><operator pos:start="1495:41" pos:end="1495:41">&amp;</operator><name pos:start="1495:42" pos:end="1495:49">reg_addr</name></expr></argument>, <argument pos:start="1495:52" pos:end="1495:63"><expr pos:start="1495:52" pos:end="1495:63"><operator pos:start="1495:52" pos:end="1495:52">&amp;</operator><name pos:start="1495:53" pos:end="1495:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1497:17" pos:end="1505:17"><if pos:start="1497:17" pos:end="1501:17">if <condition pos:start="1497:20" pos:end="1497:26">(<expr pos:start="1497:21" pos:end="1497:25"><name pos:start="1497:21" pos:end="1497:21">b</name> <operator pos:start="1497:23" pos:end="1497:23">&amp;</operator> <literal type="number" pos:start="1497:25" pos:end="1497:25">8</literal></expr>)</condition> <block pos:start="1497:28" pos:end="1501:17">{<block_content pos:start="1499:21" pos:end="1499:58">

                    <expr_stmt pos:start="1499:21" pos:end="1499:58"><expr pos:start="1499:21" pos:end="1499:57"><name pos:start="1499:21" pos:end="1499:55"><name pos:start="1499:21" pos:end="1499:36">gen_op_lds_T0_A0</name><index pos:start="1499:37" pos:end="1499:55">[<expr pos:start="1499:38" pos:end="1499:54"><name pos:start="1499:38" pos:end="1499:39">ot</name> <operator pos:start="1499:41" pos:end="1499:41">+</operator> <name pos:start="1499:43" pos:end="1499:54"><name pos:start="1499:43" pos:end="1499:43">s</name><operator pos:start="1499:44" pos:end="1499:45">-&gt;</operator><name pos:start="1499:46" pos:end="1499:54">mem_index</name></name></expr>]</index></name><operator pos:start="1499:56" pos:end="1499:56">(</operator><operator pos:start="1499:57" pos:end="1499:57">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1501:19" pos:end="1505:17">else <block pos:start="1501:24" pos:end="1505:17">{<block_content pos:start="1503:21" pos:end="1503:58">

                    <expr_stmt pos:start="1503:21" pos:end="1503:58"><expr pos:start="1503:21" pos:end="1503:57"><name pos:start="1503:21" pos:end="1503:55"><name pos:start="1503:21" pos:end="1503:36">gen_op_ldu_T0_A0</name><index pos:start="1503:37" pos:end="1503:55">[<expr pos:start="1503:38" pos:end="1503:54"><name pos:start="1503:38" pos:end="1503:39">ot</name> <operator pos:start="1503:41" pos:end="1503:41">+</operator> <name pos:start="1503:43" pos:end="1503:54"><name pos:start="1503:43" pos:end="1503:43">s</name><operator pos:start="1503:44" pos:end="1503:45">-&gt;</operator><name pos:start="1503:46" pos:end="1503:54">mem_index</name></name></expr>]</index></name><operator pos:start="1503:56" pos:end="1503:56">(</operator><operator pos:start="1503:57" pos:end="1503:57">)</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1507:17" pos:end="1507:47"><expr pos:start="1507:17" pos:end="1507:46"><name pos:start="1507:17" pos:end="1507:44"><name pos:start="1507:17" pos:end="1507:33">gen_op_mov_reg_T0</name><index pos:start="1507:34" pos:end="1507:39">[<expr pos:start="1507:35" pos:end="1507:38"><name pos:start="1507:35" pos:end="1507:38">d_ot</name></expr>]</index><index pos:start="1507:40" pos:end="1507:44">[<expr pos:start="1507:41" pos:end="1507:43"><name pos:start="1507:41" pos:end="1507:43">reg</name></expr>]</index></name><operator pos:start="1507:45" pos:end="1507:45">(</operator><operator pos:start="1507:46" pos:end="1507:46">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="1513:9" pos:end="1513:14">break;</break>



    <case pos:start="1517:5" pos:end="1517:14">case <expr pos:start="1517:10" pos:end="1517:13"><literal type="number" pos:start="1517:10" pos:end="1517:13">0x8d</literal></expr>:</case> <comment type="block" pos:start="1517:16" pos:end="1517:24">/* lea */</comment>

        <expr_stmt pos:start="1519:9" pos:end="1519:39"><expr pos:start="1519:9" pos:end="1519:38"><name pos:start="1519:9" pos:end="1519:10">ot</name> <operator pos:start="1519:12" pos:end="1519:12">=</operator> <ternary pos:start="1519:14" pos:end="1519:38"><condition pos:start="1519:14" pos:end="1519:20"><expr pos:start="1519:14" pos:end="1519:18"><name pos:start="1519:14" pos:end="1519:18">dflag</name></expr> ?</condition><then pos:start="1519:22" pos:end="1519:28"> <expr pos:start="1519:22" pos:end="1519:28"><name pos:start="1519:22" pos:end="1519:28">OT_LONG</name></expr> </then><else pos:start="1519:30" pos:end="1519:38">: <expr pos:start="1519:32" pos:end="1519:38"><name pos:start="1519:32" pos:end="1519:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1521:9" pos:end="1521:35"><expr pos:start="1521:9" pos:end="1521:34"><name pos:start="1521:9" pos:end="1521:13">modrm</name> <operator pos:start="1521:15" pos:end="1521:15">=</operator> <call pos:start="1521:17" pos:end="1521:34"><name pos:start="1521:17" pos:end="1521:25">ldub_code</name><argument_list pos:start="1521:26" pos:end="1521:34">(<argument pos:start="1521:27" pos:end="1521:33"><expr pos:start="1521:27" pos:end="1521:33"><name pos:start="1521:27" pos:end="1521:31"><name pos:start="1521:27" pos:end="1521:27">s</name><operator pos:start="1521:28" pos:end="1521:29">-&gt;</operator><name pos:start="1521:30" pos:end="1521:31">pc</name></name><operator pos:start="1521:32" pos:end="1521:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1523:9" pos:end="1523:31"><expr pos:start="1523:9" pos:end="1523:30"><name pos:start="1523:9" pos:end="1523:11">mod</name> <operator pos:start="1523:13" pos:end="1523:13">=</operator> <operator pos:start="1523:15" pos:end="1523:15">(</operator><name pos:start="1523:16" pos:end="1523:20">modrm</name> <operator pos:start="1523:22" pos:end="1523:23">&gt;&gt;</operator> <literal type="number" pos:start="1523:25" pos:end="1523:25">6</literal><operator pos:start="1523:26" pos:end="1523:26">)</operator> <operator pos:start="1523:28" pos:end="1523:28">&amp;</operator> <literal type="number" pos:start="1523:30" pos:end="1523:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1525:9" pos:end="1527:28"><if pos:start="1525:9" pos:end="1527:28">if <condition pos:start="1525:12" pos:end="1525:21">(<expr pos:start="1525:13" pos:end="1525:20"><name pos:start="1525:13" pos:end="1525:15">mod</name> <operator pos:start="1525:17" pos:end="1525:18">==</operator> <literal type="number" pos:start="1525:20" pos:end="1525:20">3</literal></expr>)</condition><block type="pseudo" pos:start="1527:13" pos:end="1527:28"><block_content pos:start="1527:13" pos:end="1527:28">

            <goto pos:start="1527:13" pos:end="1527:28">goto <name pos:start="1527:18" pos:end="1527:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1529:9" pos:end="1529:31"><expr pos:start="1529:9" pos:end="1529:30"><name pos:start="1529:9" pos:end="1529:11">reg</name> <operator pos:start="1529:13" pos:end="1529:13">=</operator> <operator pos:start="1529:15" pos:end="1529:15">(</operator><name pos:start="1529:16" pos:end="1529:20">modrm</name> <operator pos:start="1529:22" pos:end="1529:23">&gt;&gt;</operator> <literal type="number" pos:start="1529:25" pos:end="1529:25">3</literal><operator pos:start="1529:26" pos:end="1529:26">)</operator> <operator pos:start="1529:28" pos:end="1529:28">&amp;</operator> <literal type="number" pos:start="1529:30" pos:end="1529:30">7</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="1531:9" pos:end="1531:53">/* we must ensure that no segment is added */</comment>

        <expr_stmt pos:start="1533:9" pos:end="1533:25"><expr pos:start="1533:9" pos:end="1533:24"><name pos:start="1533:9" pos:end="1533:19"><name pos:start="1533:9" pos:end="1533:9">s</name><operator pos:start="1533:10" pos:end="1533:11">-&gt;</operator><name pos:start="1533:12" pos:end="1533:19">override</name></name> <operator pos:start="1533:21" pos:end="1533:21">=</operator> <operator pos:start="1533:23" pos:end="1533:23">-</operator><literal type="number" pos:start="1533:24" pos:end="1533:24">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1535:9" pos:end="1535:24"><expr pos:start="1535:9" pos:end="1535:23"><name pos:start="1535:9" pos:end="1535:11">val</name> <operator pos:start="1535:13" pos:end="1535:13">=</operator> <name pos:start="1535:15" pos:end="1535:23"><name pos:start="1535:15" pos:end="1535:15">s</name><operator pos:start="1535:16" pos:end="1535:17">-&gt;</operator><name pos:start="1535:18" pos:end="1535:23">addseg</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="1537:9" pos:end="1537:22"><expr pos:start="1537:9" pos:end="1537:21"><name pos:start="1537:9" pos:end="1537:17"><name pos:start="1537:9" pos:end="1537:9">s</name><operator pos:start="1537:10" pos:end="1537:11">-&gt;</operator><name pos:start="1537:12" pos:end="1537:17">addseg</name></name> <operator pos:start="1537:19" pos:end="1537:19">=</operator> <literal type="number" pos:start="1537:21" pos:end="1537:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1539:9" pos:end="1539:57"><expr pos:start="1539:9" pos:end="1539:56"><call pos:start="1539:9" pos:end="1539:56"><name pos:start="1539:9" pos:end="1539:21">gen_lea_modrm</name><argument_list pos:start="1539:22" pos:end="1539:56">(<argument pos:start="1539:23" pos:end="1539:23"><expr pos:start="1539:23" pos:end="1539:23"><name pos:start="1539:23" pos:end="1539:23">s</name></expr></argument>, <argument pos:start="1539:26" pos:end="1539:30"><expr pos:start="1539:26" pos:end="1539:30"><name pos:start="1539:26" pos:end="1539:30">modrm</name></expr></argument>, <argument pos:start="1539:33" pos:end="1539:41"><expr pos:start="1539:33" pos:end="1539:41"><operator pos:start="1539:33" pos:end="1539:33">&amp;</operator><name pos:start="1539:34" pos:end="1539:41">reg_addr</name></expr></argument>, <argument pos:start="1539:44" pos:end="1539:55"><expr pos:start="1539:44" pos:end="1539:55"><operator pos:start="1539:44" pos:end="1539:44">&amp;</operator><name pos:start="1539:45" pos:end="1539:55">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1541:9" pos:end="1541:24"><expr pos:start="1541:9" pos:end="1541:23"><name pos:start="1541:9" pos:end="1541:17"><name pos:start="1541:9" pos:end="1541:9">s</name><operator pos:start="1541:10" pos:end="1541:11">-&gt;</operator><name pos:start="1541:12" pos:end="1541:17">addseg</name></name> <operator pos:start="1541:19" pos:end="1541:19">=</operator> <name pos:start="1541:21" pos:end="1541:23">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="1543:9" pos:end="1543:47"><expr pos:start="1543:9" pos:end="1543:46"><name pos:start="1543:9" pos:end="1543:44"><name pos:start="1543:9" pos:end="1543:25">gen_op_mov_reg_A0</name><index pos:start="1543:26" pos:end="1543:39">[<expr pos:start="1543:27" pos:end="1543:38"><name pos:start="1543:27" pos:end="1543:28">ot</name> <operator pos:start="1543:30" pos:end="1543:30">-</operator> <name pos:start="1543:32" pos:end="1543:38">OT_WORD</name></expr>]</index><index pos:start="1543:40" pos:end="1543:44">[<expr pos:start="1543:41" pos:end="1543:43"><name pos:start="1543:41" pos:end="1543:43">reg</name></expr>]</index></name><operator pos:start="1543:45" pos:end="1543:45">(</operator><operator pos:start="1543:46" pos:end="1543:46">)</operator></expr>;</expr_stmt>

        <break pos:start="1545:9" pos:end="1545:14">break;</break>

        

    <case pos:start="1549:5" pos:end="1549:14">case <expr pos:start="1549:10" pos:end="1549:13"><literal type="number" pos:start="1549:10" pos:end="1549:13">0xa0</literal></expr>:</case> <comment type="block" pos:start="1549:16" pos:end="1549:32">/* mov EAX, Ov */</comment>

    <case pos:start="1551:5" pos:end="1551:14">case <expr pos:start="1551:10" pos:end="1551:13"><literal type="number" pos:start="1551:10" pos:end="1551:13">0xa1</literal></expr>:</case>

    <case pos:start="1553:5" pos:end="1553:14">case <expr pos:start="1553:10" pos:end="1553:13"><literal type="number" pos:start="1553:10" pos:end="1553:13">0xa2</literal></expr>:</case> <comment type="block" pos:start="1553:16" pos:end="1553:32">/* mov Ov, EAX */</comment>

    <case pos:start="1555:5" pos:end="1555:14">case <expr pos:start="1555:10" pos:end="1555:13"><literal type="number" pos:start="1555:10" pos:end="1555:13">0xa3</literal></expr>:</case>

        <if_stmt pos:start="1557:9" pos:end="1563:43"><if pos:start="1557:9" pos:end="1559:25">if <condition pos:start="1557:12" pos:end="1557:25">(<expr pos:start="1557:13" pos:end="1557:24"><operator pos:start="1557:13" pos:end="1557:13">(</operator><name pos:start="1557:14" pos:end="1557:14">b</name> <operator pos:start="1557:16" pos:end="1557:16">&amp;</operator> <literal type="number" pos:start="1557:18" pos:end="1557:18">1</literal><operator pos:start="1557:19" pos:end="1557:19">)</operator> <operator pos:start="1557:21" pos:end="1557:22">==</operator> <literal type="number" pos:start="1557:24" pos:end="1557:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1559:13" pos:end="1559:25"><block_content pos:start="1559:13" pos:end="1559:25">

            <expr_stmt pos:start="1559:13" pos:end="1559:25"><expr pos:start="1559:13" pos:end="1559:24"><name pos:start="1559:13" pos:end="1559:14">ot</name> <operator pos:start="1559:16" pos:end="1559:16">=</operator> <name pos:start="1559:18" pos:end="1559:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1561:9" pos:end="1563:43">else<block type="pseudo" pos:start="1563:13" pos:end="1563:43"><block_content pos:start="1563:13" pos:end="1563:43">

            <expr_stmt pos:start="1563:13" pos:end="1563:43"><expr pos:start="1563:13" pos:end="1563:42"><name pos:start="1563:13" pos:end="1563:14">ot</name> <operator pos:start="1563:16" pos:end="1563:16">=</operator> <ternary pos:start="1563:18" pos:end="1563:42"><condition pos:start="1563:18" pos:end="1563:24"><expr pos:start="1563:18" pos:end="1563:22"><name pos:start="1563:18" pos:end="1563:22">dflag</name></expr> ?</condition><then pos:start="1563:26" pos:end="1563:32"> <expr pos:start="1563:26" pos:end="1563:32"><name pos:start="1563:26" pos:end="1563:32">OT_LONG</name></expr> </then><else pos:start="1563:34" pos:end="1563:42">: <expr pos:start="1563:36" pos:end="1563:42"><name pos:start="1563:36" pos:end="1563:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="1565:9" pos:end="1571:47"><if pos:start="1565:9" pos:end="1567:47">if <condition pos:start="1565:12" pos:end="1565:21">(<expr pos:start="1565:13" pos:end="1565:20"><name pos:start="1565:13" pos:end="1565:20"><name pos:start="1565:13" pos:end="1565:13">s</name><operator pos:start="1565:14" pos:end="1565:15">-&gt;</operator><name pos:start="1565:16" pos:end="1565:20">aflag</name></name></expr>)</condition><block type="pseudo" pos:start="1567:13" pos:end="1567:47"><block_content pos:start="1567:13" pos:end="1567:47">

            <expr_stmt pos:start="1567:13" pos:end="1567:47"><expr pos:start="1567:13" pos:end="1567:46"><name pos:start="1567:13" pos:end="1567:23">offset_addr</name> <operator pos:start="1567:25" pos:end="1567:25">=</operator> <call pos:start="1567:27" pos:end="1567:46"><name pos:start="1567:27" pos:end="1567:34">insn_get</name><argument_list pos:start="1567:35" pos:end="1567:46">(<argument pos:start="1567:36" pos:end="1567:36"><expr pos:start="1567:36" pos:end="1567:36"><name pos:start="1567:36" pos:end="1567:36">s</name></expr></argument>, <argument pos:start="1567:39" pos:end="1567:45"><expr pos:start="1567:39" pos:end="1567:45"><name pos:start="1567:39" pos:end="1567:45">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1569:9" pos:end="1571:47">else<block type="pseudo" pos:start="1571:13" pos:end="1571:47"><block_content pos:start="1571:13" pos:end="1571:47">

            <expr_stmt pos:start="1571:13" pos:end="1571:47"><expr pos:start="1571:13" pos:end="1571:46"><name pos:start="1571:13" pos:end="1571:23">offset_addr</name> <operator pos:start="1571:25" pos:end="1571:25">=</operator> <call pos:start="1571:27" pos:end="1571:46"><name pos:start="1571:27" pos:end="1571:34">insn_get</name><argument_list pos:start="1571:35" pos:end="1571:46">(<argument pos:start="1571:36" pos:end="1571:36"><expr pos:start="1571:36" pos:end="1571:36"><name pos:start="1571:36" pos:end="1571:36">s</name></expr></argument>, <argument pos:start="1571:39" pos:end="1571:45"><expr pos:start="1571:39" pos:end="1571:45"><name pos:start="1571:39" pos:end="1571:45">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1573:9" pos:end="1573:39"><expr pos:start="1573:9" pos:end="1573:38"><call pos:start="1573:9" pos:end="1573:38"><name pos:start="1573:9" pos:end="1573:25">gen_op_movl_A0_im</name><argument_list pos:start="1573:26" pos:end="1573:38">(<argument pos:start="1573:27" pos:end="1573:37"><expr pos:start="1573:27" pos:end="1573:37"><name pos:start="1573:27" pos:end="1573:37">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1575:9" pos:end="1575:29">/* handle override */</comment>

        <block pos:start="1577:9" pos:end="1601:9">{<block_content pos:start="1579:13" pos:end="1599:13">

            <decl_stmt pos:start="1579:13" pos:end="1579:39"><decl pos:start="1579:13" pos:end="1579:24"><type pos:start="1579:13" pos:end="1579:15"><name pos:start="1579:13" pos:end="1579:15">int</name></type> <name pos:start="1579:17" pos:end="1579:24">override</name></decl>, <decl pos:start="1579:27" pos:end="1579:38"><type ref="prev" pos:start="1579:13" pos:end="1579:15"/><name pos:start="1579:27" pos:end="1579:38">must_add_seg</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1581:13" pos:end="1581:37"><expr pos:start="1581:13" pos:end="1581:36"><name pos:start="1581:13" pos:end="1581:24">must_add_seg</name> <operator pos:start="1581:26" pos:end="1581:26">=</operator> <name pos:start="1581:28" pos:end="1581:36"><name pos:start="1581:28" pos:end="1581:28">s</name><operator pos:start="1581:29" pos:end="1581:30">-&gt;</operator><name pos:start="1581:31" pos:end="1581:36">addseg</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="1583:13" pos:end="1593:13"><if pos:start="1583:13" pos:end="1589:13">if <condition pos:start="1583:16" pos:end="1583:33">(<expr pos:start="1583:17" pos:end="1583:32"><name pos:start="1583:17" pos:end="1583:27"><name pos:start="1583:17" pos:end="1583:17">s</name><operator pos:start="1583:18" pos:end="1583:19">-&gt;</operator><name pos:start="1583:20" pos:end="1583:27">override</name></name> <operator pos:start="1583:29" pos:end="1583:30">&gt;=</operator> <literal type="number" pos:start="1583:32" pos:end="1583:32">0</literal></expr>)</condition> <block pos:start="1583:35" pos:end="1589:13">{<block_content pos:start="1585:17" pos:end="1587:33">

                <expr_stmt pos:start="1585:17" pos:end="1585:39"><expr pos:start="1585:17" pos:end="1585:38"><name pos:start="1585:17" pos:end="1585:24">override</name> <operator pos:start="1585:26" pos:end="1585:26">=</operator> <name pos:start="1585:28" pos:end="1585:38"><name pos:start="1585:28" pos:end="1585:28">s</name><operator pos:start="1585:29" pos:end="1585:30">-&gt;</operator><name pos:start="1585:31" pos:end="1585:38">override</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1587:17" pos:end="1587:33"><expr pos:start="1587:17" pos:end="1587:32"><name pos:start="1587:17" pos:end="1587:28">must_add_seg</name> <operator pos:start="1587:30" pos:end="1587:30">=</operator> <literal type="number" pos:start="1587:32" pos:end="1587:32">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1589:15" pos:end="1593:13">else <block pos:start="1589:20" pos:end="1593:13">{<block_content pos:start="1591:17" pos:end="1591:32">

                <expr_stmt pos:start="1591:17" pos:end="1591:32"><expr pos:start="1591:17" pos:end="1591:31"><name pos:start="1591:17" pos:end="1591:24">override</name> <operator pos:start="1591:26" pos:end="1591:26">=</operator> <name pos:start="1591:28" pos:end="1591:31">R_DS</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="1595:13" pos:end="1599:13"><if pos:start="1595:13" pos:end="1599:13">if <condition pos:start="1595:16" pos:end="1595:29">(<expr pos:start="1595:17" pos:end="1595:28"><name pos:start="1595:17" pos:end="1595:28">must_add_seg</name></expr>)</condition> <block pos:start="1595:31" pos:end="1599:13">{<block_content pos:start="1597:17" pos:end="1597:78">

                <expr_stmt pos:start="1597:17" pos:end="1597:78"><expr pos:start="1597:17" pos:end="1597:77"><call pos:start="1597:17" pos:end="1597:77"><name pos:start="1597:17" pos:end="1597:34">gen_op_addl_A0_seg</name><argument_list pos:start="1597:35" pos:end="1597:77">(<argument pos:start="1597:36" pos:end="1597:76"><expr pos:start="1597:36" pos:end="1597:76"><call pos:start="1597:36" pos:end="1597:76"><name pos:start="1597:36" pos:end="1597:43">offsetof</name><argument_list pos:start="1597:44" pos:end="1597:76">(<argument pos:start="1597:45" pos:end="1597:55"><expr pos:start="1597:45" pos:end="1597:55"><name pos:start="1597:45" pos:end="1597:55">CPUX86State</name></expr></argument>,<argument pos:start="1597:57" pos:end="1597:75"><expr pos:start="1597:57" pos:end="1597:75"><name pos:start="1597:57" pos:end="1597:70"><name pos:start="1597:57" pos:end="1597:60">segs</name><index pos:start="1597:61" pos:end="1597:70">[<expr pos:start="1597:62" pos:end="1597:69"><name pos:start="1597:62" pos:end="1597:69">override</name></expr>]</index></name><operator pos:start="1597:71" pos:end="1597:71">.</operator><name pos:start="1597:72" pos:end="1597:75">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <if_stmt pos:start="1603:9" pos:end="1615:9"><if pos:start="1603:9" pos:end="1609:9">if <condition pos:start="1603:12" pos:end="1603:25">(<expr pos:start="1603:13" pos:end="1603:24"><operator pos:start="1603:13" pos:end="1603:13">(</operator><name pos:start="1603:14" pos:end="1603:14">b</name> <operator pos:start="1603:16" pos:end="1603:16">&amp;</operator> <literal type="number" pos:start="1603:18" pos:end="1603:18">2</literal><operator pos:start="1603:19" pos:end="1603:19">)</operator> <operator pos:start="1603:21" pos:end="1603:22">==</operator> <literal type="number" pos:start="1603:24" pos:end="1603:24">0</literal></expr>)</condition> <block pos:start="1603:27" pos:end="1609:9">{<block_content pos:start="1605:13" pos:end="1607:43">

            <expr_stmt pos:start="1605:13" pos:end="1605:49"><expr pos:start="1605:13" pos:end="1605:48"><name pos:start="1605:13" pos:end="1605:46"><name pos:start="1605:13" pos:end="1605:27">gen_op_ld_T0_A0</name><index pos:start="1605:28" pos:end="1605:46">[<expr pos:start="1605:29" pos:end="1605:45"><name pos:start="1605:29" pos:end="1605:30">ot</name> <operator pos:start="1605:32" pos:end="1605:32">+</operator> <name pos:start="1605:34" pos:end="1605:45"><name pos:start="1605:34" pos:end="1605:34">s</name><operator pos:start="1605:35" pos:end="1605:36">-&gt;</operator><name pos:start="1605:37" pos:end="1605:45">mem_index</name></name></expr>]</index></name><operator pos:start="1605:47" pos:end="1605:47">(</operator><operator pos:start="1605:48" pos:end="1605:48">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1607:13" pos:end="1607:43"><expr pos:start="1607:13" pos:end="1607:42"><name pos:start="1607:13" pos:end="1607:40"><name pos:start="1607:13" pos:end="1607:29">gen_op_mov_reg_T0</name><index pos:start="1607:30" pos:end="1607:33">[<expr pos:start="1607:31" pos:end="1607:32"><name pos:start="1607:31" pos:end="1607:32">ot</name></expr>]</index><index pos:start="1607:34" pos:end="1607:40">[<expr pos:start="1607:35" pos:end="1607:39"><name pos:start="1607:35" pos:end="1607:39">R_EAX</name></expr>]</index></name><operator pos:start="1607:41" pos:end="1607:41">(</operator><operator pos:start="1607:42" pos:end="1607:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1609:11" pos:end="1615:9">else <block pos:start="1609:16" pos:end="1615:9">{<block_content pos:start="1611:13" pos:end="1613:49">

            <expr_stmt pos:start="1611:13" pos:end="1611:46"><expr pos:start="1611:13" pos:end="1611:45"><name pos:start="1611:13" pos:end="1611:43"><name pos:start="1611:13" pos:end="1611:29">gen_op_mov_TN_reg</name><index pos:start="1611:30" pos:end="1611:33">[<expr pos:start="1611:31" pos:end="1611:32"><name pos:start="1611:31" pos:end="1611:32">ot</name></expr>]</index><index pos:start="1611:34" pos:end="1611:36">[<expr pos:start="1611:35" pos:end="1611:35"><literal type="number" pos:start="1611:35" pos:end="1611:35">0</literal></expr>]</index><index pos:start="1611:37" pos:end="1611:43">[<expr pos:start="1611:38" pos:end="1611:42"><name pos:start="1611:38" pos:end="1611:42">R_EAX</name></expr>]</index></name><operator pos:start="1611:44" pos:end="1611:44">(</operator><operator pos:start="1611:45" pos:end="1611:45">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1613:13" pos:end="1613:49"><expr pos:start="1613:13" pos:end="1613:48"><name pos:start="1613:13" pos:end="1613:46"><name pos:start="1613:13" pos:end="1613:27">gen_op_st_T0_A0</name><index pos:start="1613:28" pos:end="1613:46">[<expr pos:start="1613:29" pos:end="1613:45"><name pos:start="1613:29" pos:end="1613:30">ot</name> <operator pos:start="1613:32" pos:end="1613:32">+</operator> <name pos:start="1613:34" pos:end="1613:45"><name pos:start="1613:34" pos:end="1613:34">s</name><operator pos:start="1613:35" pos:end="1613:36">-&gt;</operator><name pos:start="1613:37" pos:end="1613:45">mem_index</name></name></expr>]</index></name><operator pos:start="1613:47" pos:end="1613:47">(</operator><operator pos:start="1613:48" pos:end="1613:48">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1617:9" pos:end="1617:14">break;</break>

    <case pos:start="1619:5" pos:end="1619:14">case <expr pos:start="1619:10" pos:end="1619:13"><literal type="number" pos:start="1619:10" pos:end="1619:13">0xd7</literal></expr>:</case> <comment type="block" pos:start="1619:16" pos:end="1619:25">/* xlat */</comment>

        <expr_stmt pos:start="1621:9" pos:end="1621:36"><expr pos:start="1621:9" pos:end="1621:35"><name pos:start="1621:9" pos:end="1621:33"><name pos:start="1621:9" pos:end="1621:26">gen_op_movl_A0_reg</name><index pos:start="1621:27" pos:end="1621:33">[<expr pos:start="1621:28" pos:end="1621:32"><name pos:start="1621:28" pos:end="1621:32">R_EBX</name></expr>]</index></name><operator pos:start="1621:34" pos:end="1621:34">(</operator><operator pos:start="1621:35" pos:end="1621:35">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1623:9" pos:end="1623:28"><expr pos:start="1623:9" pos:end="1623:27"><call pos:start="1623:9" pos:end="1623:27"><name pos:start="1623:9" pos:end="1623:25">gen_op_addl_A0_AL</name><argument_list pos:start="1623:26" pos:end="1623:27">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1625:9" pos:end="1627:34"><if pos:start="1625:9" pos:end="1627:34">if <condition pos:start="1625:12" pos:end="1625:26">(<expr pos:start="1625:13" pos:end="1625:25"><name pos:start="1625:13" pos:end="1625:20"><name pos:start="1625:13" pos:end="1625:13">s</name><operator pos:start="1625:14" pos:end="1625:15">-&gt;</operator><name pos:start="1625:16" pos:end="1625:20">aflag</name></name> <operator pos:start="1625:22" pos:end="1625:23">==</operator> <literal type="number" pos:start="1625:25" pos:end="1625:25">0</literal></expr>)</condition><block type="pseudo" pos:start="1627:13" pos:end="1627:34"><block_content pos:start="1627:13" pos:end="1627:34">

            <expr_stmt pos:start="1627:13" pos:end="1627:34"><expr pos:start="1627:13" pos:end="1627:33"><call pos:start="1627:13" pos:end="1627:33"><name pos:start="1627:13" pos:end="1627:31">gen_op_andl_A0_ffff</name><argument_list pos:start="1627:32" pos:end="1627:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block" pos:start="1629:9" pos:end="1629:29">/* handle override */</comment>

        <block pos:start="1631:9" pos:end="1657:9">{<block_content pos:start="1633:13" pos:end="1655:13">

            <decl_stmt pos:start="1633:13" pos:end="1633:39"><decl pos:start="1633:13" pos:end="1633:24"><type pos:start="1633:13" pos:end="1633:15"><name pos:start="1633:13" pos:end="1633:15">int</name></type> <name pos:start="1633:17" pos:end="1633:24">override</name></decl>, <decl pos:start="1633:27" pos:end="1633:38"><type ref="prev" pos:start="1633:13" pos:end="1633:15"/><name pos:start="1633:27" pos:end="1633:38">must_add_seg</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1635:13" pos:end="1635:37"><expr pos:start="1635:13" pos:end="1635:36"><name pos:start="1635:13" pos:end="1635:24">must_add_seg</name> <operator pos:start="1635:26" pos:end="1635:26">=</operator> <name pos:start="1635:28" pos:end="1635:36"><name pos:start="1635:28" pos:end="1635:28">s</name><operator pos:start="1635:29" pos:end="1635:30">-&gt;</operator><name pos:start="1635:31" pos:end="1635:36">addseg</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="1637:13" pos:end="1637:28"><expr pos:start="1637:13" pos:end="1637:27"><name pos:start="1637:13" pos:end="1637:20">override</name> <operator pos:start="1637:22" pos:end="1637:22">=</operator> <name pos:start="1637:24" pos:end="1637:27">R_DS</name></expr>;</expr_stmt>

            <if_stmt pos:start="1639:13" pos:end="1649:13"><if pos:start="1639:13" pos:end="1645:13">if <condition pos:start="1639:16" pos:end="1639:33">(<expr pos:start="1639:17" pos:end="1639:32"><name pos:start="1639:17" pos:end="1639:27"><name pos:start="1639:17" pos:end="1639:17">s</name><operator pos:start="1639:18" pos:end="1639:19">-&gt;</operator><name pos:start="1639:20" pos:end="1639:27">override</name></name> <operator pos:start="1639:29" pos:end="1639:30">&gt;=</operator> <literal type="number" pos:start="1639:32" pos:end="1639:32">0</literal></expr>)</condition> <block pos:start="1639:35" pos:end="1645:13">{<block_content pos:start="1641:17" pos:end="1643:33">

                <expr_stmt pos:start="1641:17" pos:end="1641:39"><expr pos:start="1641:17" pos:end="1641:38"><name pos:start="1641:17" pos:end="1641:24">override</name> <operator pos:start="1641:26" pos:end="1641:26">=</operator> <name pos:start="1641:28" pos:end="1641:38"><name pos:start="1641:28" pos:end="1641:28">s</name><operator pos:start="1641:29" pos:end="1641:30">-&gt;</operator><name pos:start="1641:31" pos:end="1641:38">override</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1643:17" pos:end="1643:33"><expr pos:start="1643:17" pos:end="1643:32"><name pos:start="1643:17" pos:end="1643:28">must_add_seg</name> <operator pos:start="1643:30" pos:end="1643:30">=</operator> <literal type="number" pos:start="1643:32" pos:end="1643:32">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1645:15" pos:end="1649:13">else <block pos:start="1645:20" pos:end="1649:13">{<block_content pos:start="1647:17" pos:end="1647:32">

                <expr_stmt pos:start="1647:17" pos:end="1647:32"><expr pos:start="1647:17" pos:end="1647:31"><name pos:start="1647:17" pos:end="1647:24">override</name> <operator pos:start="1647:26" pos:end="1647:26">=</operator> <name pos:start="1647:28" pos:end="1647:31">R_DS</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="1651:13" pos:end="1655:13"><if pos:start="1651:13" pos:end="1655:13">if <condition pos:start="1651:16" pos:end="1651:29">(<expr pos:start="1651:17" pos:end="1651:28"><name pos:start="1651:17" pos:end="1651:28">must_add_seg</name></expr>)</condition> <block pos:start="1651:31" pos:end="1655:13">{<block_content pos:start="1653:17" pos:end="1653:78">

                <expr_stmt pos:start="1653:17" pos:end="1653:78"><expr pos:start="1653:17" pos:end="1653:77"><call pos:start="1653:17" pos:end="1653:77"><name pos:start="1653:17" pos:end="1653:34">gen_op_addl_A0_seg</name><argument_list pos:start="1653:35" pos:end="1653:77">(<argument pos:start="1653:36" pos:end="1653:76"><expr pos:start="1653:36" pos:end="1653:76"><call pos:start="1653:36" pos:end="1653:76"><name pos:start="1653:36" pos:end="1653:43">offsetof</name><argument_list pos:start="1653:44" pos:end="1653:76">(<argument pos:start="1653:45" pos:end="1653:55"><expr pos:start="1653:45" pos:end="1653:55"><name pos:start="1653:45" pos:end="1653:55">CPUX86State</name></expr></argument>,<argument pos:start="1653:57" pos:end="1653:75"><expr pos:start="1653:57" pos:end="1653:75"><name pos:start="1653:57" pos:end="1653:70"><name pos:start="1653:57" pos:end="1653:60">segs</name><index pos:start="1653:61" pos:end="1653:70">[<expr pos:start="1653:62" pos:end="1653:69"><name pos:start="1653:62" pos:end="1653:69">override</name></expr>]</index></name><operator pos:start="1653:71" pos:end="1653:71">.</operator><name pos:start="1653:72" pos:end="1653:75">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="1659:9" pos:end="1659:51"><expr pos:start="1659:9" pos:end="1659:50"><name pos:start="1659:9" pos:end="1659:48"><name pos:start="1659:9" pos:end="1659:24">gen_op_ldu_T0_A0</name><index pos:start="1659:25" pos:end="1659:48">[<expr pos:start="1659:26" pos:end="1659:47"><name pos:start="1659:26" pos:end="1659:32">OT_BYTE</name> <operator pos:start="1659:34" pos:end="1659:34">+</operator> <name pos:start="1659:36" pos:end="1659:47"><name pos:start="1659:36" pos:end="1659:36">s</name><operator pos:start="1659:37" pos:end="1659:38">-&gt;</operator><name pos:start="1659:39" pos:end="1659:47">mem_index</name></name></expr>]</index></name><operator pos:start="1659:49" pos:end="1659:49">(</operator><operator pos:start="1659:50" pos:end="1659:50">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1661:9" pos:end="1661:44"><expr pos:start="1661:9" pos:end="1661:43"><name pos:start="1661:9" pos:end="1661:41"><name pos:start="1661:9" pos:end="1661:25">gen_op_mov_reg_T0</name><index pos:start="1661:26" pos:end="1661:34">[<expr pos:start="1661:27" pos:end="1661:33"><name pos:start="1661:27" pos:end="1661:33">OT_BYTE</name></expr>]</index><index pos:start="1661:35" pos:end="1661:41">[<expr pos:start="1661:36" pos:end="1661:40"><name pos:start="1661:36" pos:end="1661:40">R_EAX</name></expr>]</index></name><operator pos:start="1661:42" pos:end="1661:42">(</operator><operator pos:start="1661:43" pos:end="1661:43">)</operator></expr>;</expr_stmt>

        <break pos:start="1663:9" pos:end="1663:14">break;</break>

    <case pos:start="1665:5" pos:end="1665:23">case <expr pos:start="1665:10" pos:end="1665:22"><literal type="number" pos:start="1665:10" pos:end="1665:13">0xb0</literal> <operator pos:start="1665:15" pos:end="1665:17">...</operator> <literal type="number" pos:start="1665:19" pos:end="1665:22">0xb7</literal></expr>:</case> <comment type="block" pos:start="1665:25" pos:end="1665:39">/* mov R, Ib */</comment>

        <expr_stmt pos:start="1667:9" pos:end="1667:35"><expr pos:start="1667:9" pos:end="1667:34"><name pos:start="1667:9" pos:end="1667:11">val</name> <operator pos:start="1667:13" pos:end="1667:13">=</operator> <call pos:start="1667:15" pos:end="1667:34"><name pos:start="1667:15" pos:end="1667:22">insn_get</name><argument_list pos:start="1667:23" pos:end="1667:34">(<argument pos:start="1667:24" pos:end="1667:24"><expr pos:start="1667:24" pos:end="1667:24"><name pos:start="1667:24" pos:end="1667:24">s</name></expr></argument>, <argument pos:start="1667:27" pos:end="1667:33"><expr pos:start="1667:27" pos:end="1667:33"><name pos:start="1667:27" pos:end="1667:33">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1669:9" pos:end="1669:31"><expr pos:start="1669:9" pos:end="1669:30"><call pos:start="1669:9" pos:end="1669:30"><name pos:start="1669:9" pos:end="1669:25">gen_op_movl_T0_im</name><argument_list pos:start="1669:26" pos:end="1669:30">(<argument pos:start="1669:27" pos:end="1669:29"><expr pos:start="1669:27" pos:end="1669:29"><name pos:start="1669:27" pos:end="1669:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1671:9" pos:end="1671:44"><expr pos:start="1671:9" pos:end="1671:43"><name pos:start="1671:9" pos:end="1671:41"><name pos:start="1671:9" pos:end="1671:25">gen_op_mov_reg_T0</name><index pos:start="1671:26" pos:end="1671:34">[<expr pos:start="1671:27" pos:end="1671:33"><name pos:start="1671:27" pos:end="1671:33">OT_BYTE</name></expr>]</index><index pos:start="1671:35" pos:end="1671:41">[<expr pos:start="1671:36" pos:end="1671:40"><name pos:start="1671:36" pos:end="1671:36">b</name> <operator pos:start="1671:38" pos:end="1671:38">&amp;</operator> <literal type="number" pos:start="1671:40" pos:end="1671:40">7</literal></expr>]</index></name><operator pos:start="1671:42" pos:end="1671:42">(</operator><operator pos:start="1671:43" pos:end="1671:43">)</operator></expr>;</expr_stmt>

        <break pos:start="1673:9" pos:end="1673:14">break;</break>

    <case pos:start="1675:5" pos:end="1675:23">case <expr pos:start="1675:10" pos:end="1675:22"><literal type="number" pos:start="1675:10" pos:end="1675:13">0xb8</literal> <operator pos:start="1675:15" pos:end="1675:17">...</operator> <literal type="number" pos:start="1675:19" pos:end="1675:22">0xbf</literal></expr>:</case> <comment type="block" pos:start="1675:25" pos:end="1675:39">/* mov R, Iv */</comment>

        <expr_stmt pos:start="1677:9" pos:end="1677:39"><expr pos:start="1677:9" pos:end="1677:38"><name pos:start="1677:9" pos:end="1677:10">ot</name> <operator pos:start="1677:12" pos:end="1677:12">=</operator> <ternary pos:start="1677:14" pos:end="1677:38"><condition pos:start="1677:14" pos:end="1677:20"><expr pos:start="1677:14" pos:end="1677:18"><name pos:start="1677:14" pos:end="1677:18">dflag</name></expr> ?</condition><then pos:start="1677:22" pos:end="1677:28"> <expr pos:start="1677:22" pos:end="1677:28"><name pos:start="1677:22" pos:end="1677:28">OT_LONG</name></expr> </then><else pos:start="1677:30" pos:end="1677:38">: <expr pos:start="1677:32" pos:end="1677:38"><name pos:start="1677:32" pos:end="1677:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1679:9" pos:end="1679:30"><expr pos:start="1679:9" pos:end="1679:29"><name pos:start="1679:9" pos:end="1679:11">val</name> <operator pos:start="1679:13" pos:end="1679:13">=</operator> <call pos:start="1679:15" pos:end="1679:29"><name pos:start="1679:15" pos:end="1679:22">insn_get</name><argument_list pos:start="1679:23" pos:end="1679:29">(<argument pos:start="1679:24" pos:end="1679:24"><expr pos:start="1679:24" pos:end="1679:24"><name pos:start="1679:24" pos:end="1679:24">s</name></expr></argument>, <argument pos:start="1679:27" pos:end="1679:28"><expr pos:start="1679:27" pos:end="1679:28"><name pos:start="1679:27" pos:end="1679:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1681:9" pos:end="1681:31"><expr pos:start="1681:9" pos:end="1681:30"><name pos:start="1681:9" pos:end="1681:11">reg</name> <operator pos:start="1681:13" pos:end="1681:13">=</operator> <name pos:start="1681:15" pos:end="1681:20">OR_EAX</name> <operator pos:start="1681:22" pos:end="1681:22">+</operator> <operator pos:start="1681:24" pos:end="1681:24">(</operator><name pos:start="1681:25" pos:end="1681:25">b</name> <operator pos:start="1681:27" pos:end="1681:27">&amp;</operator> <literal type="number" pos:start="1681:29" pos:end="1681:29">7</literal><operator pos:start="1681:30" pos:end="1681:30">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1683:9" pos:end="1683:31"><expr pos:start="1683:9" pos:end="1683:30"><call pos:start="1683:9" pos:end="1683:30"><name pos:start="1683:9" pos:end="1683:25">gen_op_movl_T0_im</name><argument_list pos:start="1683:26" pos:end="1683:30">(<argument pos:start="1683:27" pos:end="1683:29"><expr pos:start="1683:27" pos:end="1683:29"><name pos:start="1683:27" pos:end="1683:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1685:9" pos:end="1685:37"><expr pos:start="1685:9" pos:end="1685:36"><name pos:start="1685:9" pos:end="1685:34"><name pos:start="1685:9" pos:end="1685:25">gen_op_mov_reg_T0</name><index pos:start="1685:26" pos:end="1685:29">[<expr pos:start="1685:27" pos:end="1685:28"><name pos:start="1685:27" pos:end="1685:28">ot</name></expr>]</index><index pos:start="1685:30" pos:end="1685:34">[<expr pos:start="1685:31" pos:end="1685:33"><name pos:start="1685:31" pos:end="1685:33">reg</name></expr>]</index></name><operator pos:start="1685:35" pos:end="1685:35">(</operator><operator pos:start="1685:36" pos:end="1685:36">)</operator></expr>;</expr_stmt>

        <break pos:start="1687:9" pos:end="1687:14">break;</break>



    <case pos:start="1691:5" pos:end="1691:23">case <expr pos:start="1691:10" pos:end="1691:22"><literal type="number" pos:start="1691:10" pos:end="1691:13">0x91</literal> <operator pos:start="1691:15" pos:end="1691:17">...</operator> <literal type="number" pos:start="1691:19" pos:end="1691:22">0x97</literal></expr>:</case> <comment type="block" pos:start="1691:25" pos:end="1691:41">/* xchg R, EAX */</comment>

        <expr_stmt pos:start="1693:9" pos:end="1693:39"><expr pos:start="1693:9" pos:end="1693:38"><name pos:start="1693:9" pos:end="1693:10">ot</name> <operator pos:start="1693:12" pos:end="1693:12">=</operator> <ternary pos:start="1693:14" pos:end="1693:38"><condition pos:start="1693:14" pos:end="1693:20"><expr pos:start="1693:14" pos:end="1693:18"><name pos:start="1693:14" pos:end="1693:18">dflag</name></expr> ?</condition><then pos:start="1693:22" pos:end="1693:28"> <expr pos:start="1693:22" pos:end="1693:28"><name pos:start="1693:22" pos:end="1693:28">OT_LONG</name></expr> </then><else pos:start="1693:30" pos:end="1693:38">: <expr pos:start="1693:32" pos:end="1693:38"><name pos:start="1693:32" pos:end="1693:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1695:9" pos:end="1695:20"><expr pos:start="1695:9" pos:end="1695:19"><name pos:start="1695:9" pos:end="1695:11">reg</name> <operator pos:start="1695:13" pos:end="1695:13">=</operator> <name pos:start="1695:15" pos:end="1695:15">b</name> <operator pos:start="1695:17" pos:end="1695:17">&amp;</operator> <literal type="number" pos:start="1695:19" pos:end="1695:19">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1697:9" pos:end="1697:19"><expr pos:start="1697:9" pos:end="1697:18"><name pos:start="1697:9" pos:end="1697:10">rm</name> <operator pos:start="1697:12" pos:end="1697:12">=</operator> <name pos:start="1697:14" pos:end="1697:18">R_EAX</name></expr>;</expr_stmt>

        <goto pos:start="1699:9" pos:end="1699:25">goto <name pos:start="1699:14" pos:end="1699:24">do_xchg_reg</name>;</goto>

    <case pos:start="1701:5" pos:end="1701:14">case <expr pos:start="1701:10" pos:end="1701:13"><literal type="number" pos:start="1701:10" pos:end="1701:13">0x86</literal></expr>:</case>

    <case pos:start="1703:5" pos:end="1703:14">case <expr pos:start="1703:10" pos:end="1703:13"><literal type="number" pos:start="1703:10" pos:end="1703:13">0x87</literal></expr>:</case> <comment type="block" pos:start="1703:16" pos:end="1703:32">/* xchg Ev, Gv */</comment>

        <if_stmt pos:start="1705:9" pos:end="1711:43"><if pos:start="1705:9" pos:end="1707:25">if <condition pos:start="1705:12" pos:end="1705:25">(<expr pos:start="1705:13" pos:end="1705:24"><operator pos:start="1705:13" pos:end="1705:13">(</operator><name pos:start="1705:14" pos:end="1705:14">b</name> <operator pos:start="1705:16" pos:end="1705:16">&amp;</operator> <literal type="number" pos:start="1705:18" pos:end="1705:18">1</literal><operator pos:start="1705:19" pos:end="1705:19">)</operator> <operator pos:start="1705:21" pos:end="1705:22">==</operator> <literal type="number" pos:start="1705:24" pos:end="1705:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1707:13" pos:end="1707:25"><block_content pos:start="1707:13" pos:end="1707:25">

            <expr_stmt pos:start="1707:13" pos:end="1707:25"><expr pos:start="1707:13" pos:end="1707:24"><name pos:start="1707:13" pos:end="1707:14">ot</name> <operator pos:start="1707:16" pos:end="1707:16">=</operator> <name pos:start="1707:18" pos:end="1707:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1709:9" pos:end="1711:43">else<block type="pseudo" pos:start="1711:13" pos:end="1711:43"><block_content pos:start="1711:13" pos:end="1711:43">

            <expr_stmt pos:start="1711:13" pos:end="1711:43"><expr pos:start="1711:13" pos:end="1711:42"><name pos:start="1711:13" pos:end="1711:14">ot</name> <operator pos:start="1711:16" pos:end="1711:16">=</operator> <ternary pos:start="1711:18" pos:end="1711:42"><condition pos:start="1711:18" pos:end="1711:24"><expr pos:start="1711:18" pos:end="1711:22"><name pos:start="1711:18" pos:end="1711:22">dflag</name></expr> ?</condition><then pos:start="1711:26" pos:end="1711:32"> <expr pos:start="1711:26" pos:end="1711:32"><name pos:start="1711:26" pos:end="1711:32">OT_LONG</name></expr> </then><else pos:start="1711:34" pos:end="1711:42">: <expr pos:start="1711:36" pos:end="1711:42"><name pos:start="1711:36" pos:end="1711:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1713:9" pos:end="1713:35"><expr pos:start="1713:9" pos:end="1713:34"><name pos:start="1713:9" pos:end="1713:13">modrm</name> <operator pos:start="1713:15" pos:end="1713:15">=</operator> <call pos:start="1713:17" pos:end="1713:34"><name pos:start="1713:17" pos:end="1713:25">ldub_code</name><argument_list pos:start="1713:26" pos:end="1713:34">(<argument pos:start="1713:27" pos:end="1713:33"><expr pos:start="1713:27" pos:end="1713:33"><name pos:start="1713:27" pos:end="1713:31"><name pos:start="1713:27" pos:end="1713:27">s</name><operator pos:start="1713:28" pos:end="1713:29">-&gt;</operator><name pos:start="1713:30" pos:end="1713:31">pc</name></name><operator pos:start="1713:32" pos:end="1713:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1715:9" pos:end="1715:31"><expr pos:start="1715:9" pos:end="1715:30"><name pos:start="1715:9" pos:end="1715:11">reg</name> <operator pos:start="1715:13" pos:end="1715:13">=</operator> <operator pos:start="1715:15" pos:end="1715:15">(</operator><name pos:start="1715:16" pos:end="1715:20">modrm</name> <operator pos:start="1715:22" pos:end="1715:23">&gt;&gt;</operator> <literal type="number" pos:start="1715:25" pos:end="1715:25">3</literal><operator pos:start="1715:26" pos:end="1715:26">)</operator> <operator pos:start="1715:28" pos:end="1715:28">&amp;</operator> <literal type="number" pos:start="1715:30" pos:end="1715:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1717:9" pos:end="1717:31"><expr pos:start="1717:9" pos:end="1717:30"><name pos:start="1717:9" pos:end="1717:11">mod</name> <operator pos:start="1717:13" pos:end="1717:13">=</operator> <operator pos:start="1717:15" pos:end="1717:15">(</operator><name pos:start="1717:16" pos:end="1717:20">modrm</name> <operator pos:start="1717:22" pos:end="1717:23">&gt;&gt;</operator> <literal type="number" pos:start="1717:25" pos:end="1717:25">6</literal><operator pos:start="1717:26" pos:end="1717:26">)</operator> <operator pos:start="1717:28" pos:end="1717:28">&amp;</operator> <literal type="number" pos:start="1717:30" pos:end="1717:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1719:9" pos:end="1755:9"><if pos:start="1719:9" pos:end="1733:9">if <condition pos:start="1719:12" pos:end="1719:21">(<expr pos:start="1719:13" pos:end="1719:20"><name pos:start="1719:13" pos:end="1719:15">mod</name> <operator pos:start="1719:17" pos:end="1719:18">==</operator> <literal type="number" pos:start="1719:20" pos:end="1719:20">3</literal></expr>)</condition> <block pos:start="1719:23" pos:end="1733:9">{<block_content pos:start="1721:13" pos:end="1731:41">

            <expr_stmt pos:start="1721:13" pos:end="1721:27"><expr pos:start="1721:13" pos:end="1721:26"><name pos:start="1721:13" pos:end="1721:14">rm</name> <operator pos:start="1721:16" pos:end="1721:16">=</operator> <name pos:start="1721:18" pos:end="1721:22">modrm</name> <operator pos:start="1721:24" pos:end="1721:24">&amp;</operator> <literal type="number" pos:start="1721:26" pos:end="1721:26">7</literal></expr>;</expr_stmt>

        <label pos:start="1723:9" pos:end="1723:20"><name pos:start="1723:9" pos:end="1723:19">do_xchg_reg</name>:</label>

            <expr_stmt pos:start="1725:13" pos:end="1725:44"><expr pos:start="1725:13" pos:end="1725:43"><name pos:start="1725:13" pos:end="1725:41"><name pos:start="1725:13" pos:end="1725:29">gen_op_mov_TN_reg</name><index pos:start="1725:30" pos:end="1725:33">[<expr pos:start="1725:31" pos:end="1725:32"><name pos:start="1725:31" pos:end="1725:32">ot</name></expr>]</index><index pos:start="1725:34" pos:end="1725:36">[<expr pos:start="1725:35" pos:end="1725:35"><literal type="number" pos:start="1725:35" pos:end="1725:35">0</literal></expr>]</index><index pos:start="1725:37" pos:end="1725:41">[<expr pos:start="1725:38" pos:end="1725:40"><name pos:start="1725:38" pos:end="1725:40">reg</name></expr>]</index></name><operator pos:start="1725:42" pos:end="1725:42">(</operator><operator pos:start="1725:43" pos:end="1725:43">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1727:13" pos:end="1727:43"><expr pos:start="1727:13" pos:end="1727:42"><name pos:start="1727:13" pos:end="1727:40"><name pos:start="1727:13" pos:end="1727:29">gen_op_mov_TN_reg</name><index pos:start="1727:30" pos:end="1727:33">[<expr pos:start="1727:31" pos:end="1727:32"><name pos:start="1727:31" pos:end="1727:32">ot</name></expr>]</index><index pos:start="1727:34" pos:end="1727:36">[<expr pos:start="1727:35" pos:end="1727:35"><literal type="number" pos:start="1727:35" pos:end="1727:35">1</literal></expr>]</index><index pos:start="1727:37" pos:end="1727:40">[<expr pos:start="1727:38" pos:end="1727:39"><name pos:start="1727:38" pos:end="1727:39">rm</name></expr>]</index></name><operator pos:start="1727:41" pos:end="1727:41">(</operator><operator pos:start="1727:42" pos:end="1727:42">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1729:13" pos:end="1729:40"><expr pos:start="1729:13" pos:end="1729:39"><name pos:start="1729:13" pos:end="1729:37"><name pos:start="1729:13" pos:end="1729:29">gen_op_mov_reg_T0</name><index pos:start="1729:30" pos:end="1729:33">[<expr pos:start="1729:31" pos:end="1729:32"><name pos:start="1729:31" pos:end="1729:32">ot</name></expr>]</index><index pos:start="1729:34" pos:end="1729:37">[<expr pos:start="1729:35" pos:end="1729:36"><name pos:start="1729:35" pos:end="1729:36">rm</name></expr>]</index></name><operator pos:start="1729:38" pos:end="1729:38">(</operator><operator pos:start="1729:39" pos:end="1729:39">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1731:13" pos:end="1731:41"><expr pos:start="1731:13" pos:end="1731:40"><name pos:start="1731:13" pos:end="1731:38"><name pos:start="1731:13" pos:end="1731:29">gen_op_mov_reg_T1</name><index pos:start="1731:30" pos:end="1731:33">[<expr pos:start="1731:31" pos:end="1731:32"><name pos:start="1731:31" pos:end="1731:32">ot</name></expr>]</index><index pos:start="1731:34" pos:end="1731:38">[<expr pos:start="1731:35" pos:end="1731:37"><name pos:start="1731:35" pos:end="1731:37">reg</name></expr>]</index></name><operator pos:start="1731:39" pos:end="1731:39">(</operator><operator pos:start="1731:40" pos:end="1731:40">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1733:11" pos:end="1755:9">else <block pos:start="1733:16" pos:end="1755:9">{<block_content pos:start="1735:13" pos:end="1753:41">

            <expr_stmt pos:start="1735:13" pos:end="1735:61"><expr pos:start="1735:13" pos:end="1735:60"><call pos:start="1735:13" pos:end="1735:60"><name pos:start="1735:13" pos:end="1735:25">gen_lea_modrm</name><argument_list pos:start="1735:26" pos:end="1735:60">(<argument pos:start="1735:27" pos:end="1735:27"><expr pos:start="1735:27" pos:end="1735:27"><name pos:start="1735:27" pos:end="1735:27">s</name></expr></argument>, <argument pos:start="1735:30" pos:end="1735:34"><expr pos:start="1735:30" pos:end="1735:34"><name pos:start="1735:30" pos:end="1735:34">modrm</name></expr></argument>, <argument pos:start="1735:37" pos:end="1735:45"><expr pos:start="1735:37" pos:end="1735:45"><operator pos:start="1735:37" pos:end="1735:37">&amp;</operator><name pos:start="1735:38" pos:end="1735:45">reg_addr</name></expr></argument>, <argument pos:start="1735:48" pos:end="1735:59"><expr pos:start="1735:48" pos:end="1735:59"><operator pos:start="1735:48" pos:end="1735:48">&amp;</operator><name pos:start="1735:49" pos:end="1735:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1737:13" pos:end="1737:44"><expr pos:start="1737:13" pos:end="1737:43"><name pos:start="1737:13" pos:end="1737:41"><name pos:start="1737:13" pos:end="1737:29">gen_op_mov_TN_reg</name><index pos:start="1737:30" pos:end="1737:33">[<expr pos:start="1737:31" pos:end="1737:32"><name pos:start="1737:31" pos:end="1737:32">ot</name></expr>]</index><index pos:start="1737:34" pos:end="1737:36">[<expr pos:start="1737:35" pos:end="1737:35"><literal type="number" pos:start="1737:35" pos:end="1737:35">0</literal></expr>]</index><index pos:start="1737:37" pos:end="1737:41">[<expr pos:start="1737:38" pos:end="1737:40"><name pos:start="1737:38" pos:end="1737:40">reg</name></expr>]</index></name><operator pos:start="1737:42" pos:end="1737:42">(</operator><operator pos:start="1737:43" pos:end="1737:43">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="1739:13" pos:end="1739:44">/* for xchg, lock is implicit */</comment>

            <if_stmt pos:start="1741:13" pos:end="1743:30"><if pos:start="1741:13" pos:end="1743:30">if <condition pos:start="1741:16" pos:end="1741:42">(<expr pos:start="1741:17" pos:end="1741:41"><operator pos:start="1741:17" pos:end="1741:17">!</operator><operator pos:start="1741:18" pos:end="1741:18">(</operator><name pos:start="1741:19" pos:end="1741:26">prefixes</name> <operator pos:start="1741:28" pos:end="1741:28">&amp;</operator> <name pos:start="1741:30" pos:end="1741:40">PREFIX_LOCK</name><operator pos:start="1741:41" pos:end="1741:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1743:17" pos:end="1743:30"><block_content pos:start="1743:17" pos:end="1743:30">

                <expr_stmt pos:start="1743:17" pos:end="1743:30"><expr pos:start="1743:17" pos:end="1743:29"><call pos:start="1743:17" pos:end="1743:29"><name pos:start="1743:17" pos:end="1743:27">gen_op_lock</name><argument_list pos:start="1743:28" pos:end="1743:29">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1745:13" pos:end="1745:49"><expr pos:start="1745:13" pos:end="1745:48"><name pos:start="1745:13" pos:end="1745:46"><name pos:start="1745:13" pos:end="1745:27">gen_op_ld_T1_A0</name><index pos:start="1745:28" pos:end="1745:46">[<expr pos:start="1745:29" pos:end="1745:45"><name pos:start="1745:29" pos:end="1745:30">ot</name> <operator pos:start="1745:32" pos:end="1745:32">+</operator> <name pos:start="1745:34" pos:end="1745:45"><name pos:start="1745:34" pos:end="1745:34">s</name><operator pos:start="1745:35" pos:end="1745:36">-&gt;</operator><name pos:start="1745:37" pos:end="1745:45">mem_index</name></name></expr>]</index></name><operator pos:start="1745:47" pos:end="1745:47">(</operator><operator pos:start="1745:48" pos:end="1745:48">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1747:13" pos:end="1747:49"><expr pos:start="1747:13" pos:end="1747:48"><name pos:start="1747:13" pos:end="1747:46"><name pos:start="1747:13" pos:end="1747:27">gen_op_st_T0_A0</name><index pos:start="1747:28" pos:end="1747:46">[<expr pos:start="1747:29" pos:end="1747:45"><name pos:start="1747:29" pos:end="1747:30">ot</name> <operator pos:start="1747:32" pos:end="1747:32">+</operator> <name pos:start="1747:34" pos:end="1747:45"><name pos:start="1747:34" pos:end="1747:34">s</name><operator pos:start="1747:35" pos:end="1747:36">-&gt;</operator><name pos:start="1747:37" pos:end="1747:45">mem_index</name></name></expr>]</index></name><operator pos:start="1747:47" pos:end="1747:47">(</operator><operator pos:start="1747:48" pos:end="1747:48">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="1749:13" pos:end="1751:32"><if pos:start="1749:13" pos:end="1751:32">if <condition pos:start="1749:16" pos:end="1749:42">(<expr pos:start="1749:17" pos:end="1749:41"><operator pos:start="1749:17" pos:end="1749:17">!</operator><operator pos:start="1749:18" pos:end="1749:18">(</operator><name pos:start="1749:19" pos:end="1749:26">prefixes</name> <operator pos:start="1749:28" pos:end="1749:28">&amp;</operator> <name pos:start="1749:30" pos:end="1749:40">PREFIX_LOCK</name><operator pos:start="1749:41" pos:end="1749:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1751:17" pos:end="1751:32"><block_content pos:start="1751:17" pos:end="1751:32">

                <expr_stmt pos:start="1751:17" pos:end="1751:32"><expr pos:start="1751:17" pos:end="1751:31"><call pos:start="1751:17" pos:end="1751:31"><name pos:start="1751:17" pos:end="1751:29">gen_op_unlock</name><argument_list pos:start="1751:30" pos:end="1751:31">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1753:13" pos:end="1753:41"><expr pos:start="1753:13" pos:end="1753:40"><name pos:start="1753:13" pos:end="1753:38"><name pos:start="1753:13" pos:end="1753:29">gen_op_mov_reg_T1</name><index pos:start="1753:30" pos:end="1753:33">[<expr pos:start="1753:31" pos:end="1753:32"><name pos:start="1753:31" pos:end="1753:32">ot</name></expr>]</index><index pos:start="1753:34" pos:end="1753:38">[<expr pos:start="1753:35" pos:end="1753:37"><name pos:start="1753:35" pos:end="1753:37">reg</name></expr>]</index></name><operator pos:start="1753:39" pos:end="1753:39">(</operator><operator pos:start="1753:40" pos:end="1753:40">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1757:9" pos:end="1757:14">break;</break>

    <case pos:start="1759:5" pos:end="1759:14">case <expr pos:start="1759:10" pos:end="1759:13"><literal type="number" pos:start="1759:10" pos:end="1759:13">0xc4</literal></expr>:</case> <comment type="block" pos:start="1759:16" pos:end="1759:27">/* les Gv */</comment>

        <expr_stmt pos:start="1761:9" pos:end="1761:18"><expr pos:start="1761:9" pos:end="1761:17"><name pos:start="1761:9" pos:end="1761:10">op</name> <operator pos:start="1761:12" pos:end="1761:12">=</operator> <name pos:start="1761:14" pos:end="1761:17">R_ES</name></expr>;</expr_stmt>

        <goto pos:start="1763:9" pos:end="1763:20">goto <name pos:start="1763:14" pos:end="1763:19">do_lxx</name>;</goto>

    <case pos:start="1765:5" pos:end="1765:14">case <expr pos:start="1765:10" pos:end="1765:13"><literal type="number" pos:start="1765:10" pos:end="1765:13">0xc5</literal></expr>:</case> <comment type="block" pos:start="1765:16" pos:end="1765:27">/* lds Gv */</comment>

        <expr_stmt pos:start="1767:9" pos:end="1767:18"><expr pos:start="1767:9" pos:end="1767:17"><name pos:start="1767:9" pos:end="1767:10">op</name> <operator pos:start="1767:12" pos:end="1767:12">=</operator> <name pos:start="1767:14" pos:end="1767:17">R_DS</name></expr>;</expr_stmt>

        <goto pos:start="1769:9" pos:end="1769:20">goto <name pos:start="1769:14" pos:end="1769:19">do_lxx</name>;</goto>

    <case pos:start="1771:5" pos:end="1771:15">case <expr pos:start="1771:10" pos:end="1771:14"><literal type="number" pos:start="1771:10" pos:end="1771:14">0x1b2</literal></expr>:</case> <comment type="block" pos:start="1771:17" pos:end="1771:28">/* lss Gv */</comment>

        <expr_stmt pos:start="1773:9" pos:end="1773:18"><expr pos:start="1773:9" pos:end="1773:17"><name pos:start="1773:9" pos:end="1773:10">op</name> <operator pos:start="1773:12" pos:end="1773:12">=</operator> <name pos:start="1773:14" pos:end="1773:17">R_SS</name></expr>;</expr_stmt>

        <goto pos:start="1775:9" pos:end="1775:20">goto <name pos:start="1775:14" pos:end="1775:19">do_lxx</name>;</goto>

    <case pos:start="1777:5" pos:end="1777:15">case <expr pos:start="1777:10" pos:end="1777:14"><literal type="number" pos:start="1777:10" pos:end="1777:14">0x1b4</literal></expr>:</case> <comment type="block" pos:start="1777:17" pos:end="1777:28">/* lfs Gv */</comment>

        <expr_stmt pos:start="1779:9" pos:end="1779:18"><expr pos:start="1779:9" pos:end="1779:17"><name pos:start="1779:9" pos:end="1779:10">op</name> <operator pos:start="1779:12" pos:end="1779:12">=</operator> <name pos:start="1779:14" pos:end="1779:17">R_FS</name></expr>;</expr_stmt>

        <goto pos:start="1781:9" pos:end="1781:20">goto <name pos:start="1781:14" pos:end="1781:19">do_lxx</name>;</goto>

    <case pos:start="1783:5" pos:end="1783:15">case <expr pos:start="1783:10" pos:end="1783:14"><literal type="number" pos:start="1783:10" pos:end="1783:14">0x1b5</literal></expr>:</case> <comment type="block" pos:start="1783:17" pos:end="1783:28">/* lgs Gv */</comment>

        <expr_stmt pos:start="1785:9" pos:end="1785:18"><expr pos:start="1785:9" pos:end="1785:17"><name pos:start="1785:9" pos:end="1785:10">op</name> <operator pos:start="1785:12" pos:end="1785:12">=</operator> <name pos:start="1785:14" pos:end="1785:17">R_GS</name></expr>;</expr_stmt>

    <label pos:start="1787:5" pos:end="1787:11"><name pos:start="1787:5" pos:end="1787:10">do_lxx</name>:</label>

        <expr_stmt pos:start="1789:9" pos:end="1789:39"><expr pos:start="1789:9" pos:end="1789:38"><name pos:start="1789:9" pos:end="1789:10">ot</name> <operator pos:start="1789:12" pos:end="1789:12">=</operator> <ternary pos:start="1789:14" pos:end="1789:38"><condition pos:start="1789:14" pos:end="1789:20"><expr pos:start="1789:14" pos:end="1789:18"><name pos:start="1789:14" pos:end="1789:18">dflag</name></expr> ?</condition><then pos:start="1789:22" pos:end="1789:28"> <expr pos:start="1789:22" pos:end="1789:28"><name pos:start="1789:22" pos:end="1789:28">OT_LONG</name></expr> </then><else pos:start="1789:30" pos:end="1789:38">: <expr pos:start="1789:32" pos:end="1789:38"><name pos:start="1789:32" pos:end="1789:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1791:9" pos:end="1791:35"><expr pos:start="1791:9" pos:end="1791:34"><name pos:start="1791:9" pos:end="1791:13">modrm</name> <operator pos:start="1791:15" pos:end="1791:15">=</operator> <call pos:start="1791:17" pos:end="1791:34"><name pos:start="1791:17" pos:end="1791:25">ldub_code</name><argument_list pos:start="1791:26" pos:end="1791:34">(<argument pos:start="1791:27" pos:end="1791:33"><expr pos:start="1791:27" pos:end="1791:33"><name pos:start="1791:27" pos:end="1791:31"><name pos:start="1791:27" pos:end="1791:27">s</name><operator pos:start="1791:28" pos:end="1791:29">-&gt;</operator><name pos:start="1791:30" pos:end="1791:31">pc</name></name><operator pos:start="1791:32" pos:end="1791:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1793:9" pos:end="1793:31"><expr pos:start="1793:9" pos:end="1793:30"><name pos:start="1793:9" pos:end="1793:11">reg</name> <operator pos:start="1793:13" pos:end="1793:13">=</operator> <operator pos:start="1793:15" pos:end="1793:15">(</operator><name pos:start="1793:16" pos:end="1793:20">modrm</name> <operator pos:start="1793:22" pos:end="1793:23">&gt;&gt;</operator> <literal type="number" pos:start="1793:25" pos:end="1793:25">3</literal><operator pos:start="1793:26" pos:end="1793:26">)</operator> <operator pos:start="1793:28" pos:end="1793:28">&amp;</operator> <literal type="number" pos:start="1793:30" pos:end="1793:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1795:9" pos:end="1795:31"><expr pos:start="1795:9" pos:end="1795:30"><name pos:start="1795:9" pos:end="1795:11">mod</name> <operator pos:start="1795:13" pos:end="1795:13">=</operator> <operator pos:start="1795:15" pos:end="1795:15">(</operator><name pos:start="1795:16" pos:end="1795:20">modrm</name> <operator pos:start="1795:22" pos:end="1795:23">&gt;&gt;</operator> <literal type="number" pos:start="1795:25" pos:end="1795:25">6</literal><operator pos:start="1795:26" pos:end="1795:26">)</operator> <operator pos:start="1795:28" pos:end="1795:28">&amp;</operator> <literal type="number" pos:start="1795:30" pos:end="1795:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1797:9" pos:end="1799:28"><if pos:start="1797:9" pos:end="1799:28">if <condition pos:start="1797:12" pos:end="1797:21">(<expr pos:start="1797:13" pos:end="1797:20"><name pos:start="1797:13" pos:end="1797:15">mod</name> <operator pos:start="1797:17" pos:end="1797:18">==</operator> <literal type="number" pos:start="1797:20" pos:end="1797:20">3</literal></expr>)</condition><block type="pseudo" pos:start="1799:13" pos:end="1799:28"><block_content pos:start="1799:13" pos:end="1799:28">

            <goto pos:start="1799:13" pos:end="1799:28">goto <name pos:start="1799:18" pos:end="1799:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1801:9" pos:end="1801:57"><expr pos:start="1801:9" pos:end="1801:56"><call pos:start="1801:9" pos:end="1801:56"><name pos:start="1801:9" pos:end="1801:21">gen_lea_modrm</name><argument_list pos:start="1801:22" pos:end="1801:56">(<argument pos:start="1801:23" pos:end="1801:23"><expr pos:start="1801:23" pos:end="1801:23"><name pos:start="1801:23" pos:end="1801:23">s</name></expr></argument>, <argument pos:start="1801:26" pos:end="1801:30"><expr pos:start="1801:26" pos:end="1801:30"><name pos:start="1801:26" pos:end="1801:30">modrm</name></expr></argument>, <argument pos:start="1801:33" pos:end="1801:41"><expr pos:start="1801:33" pos:end="1801:41"><operator pos:start="1801:33" pos:end="1801:33">&amp;</operator><name pos:start="1801:34" pos:end="1801:41">reg_addr</name></expr></argument>, <argument pos:start="1801:44" pos:end="1801:55"><expr pos:start="1801:44" pos:end="1801:55"><operator pos:start="1801:44" pos:end="1801:44">&amp;</operator><name pos:start="1801:45" pos:end="1801:55">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1803:9" pos:end="1803:45"><expr pos:start="1803:9" pos:end="1803:44"><name pos:start="1803:9" pos:end="1803:42"><name pos:start="1803:9" pos:end="1803:23">gen_op_ld_T1_A0</name><index pos:start="1803:24" pos:end="1803:42">[<expr pos:start="1803:25" pos:end="1803:41"><name pos:start="1803:25" pos:end="1803:26">ot</name> <operator pos:start="1803:28" pos:end="1803:28">+</operator> <name pos:start="1803:30" pos:end="1803:41"><name pos:start="1803:30" pos:end="1803:30">s</name><operator pos:start="1803:31" pos:end="1803:32">-&gt;</operator><name pos:start="1803:33" pos:end="1803:41">mem_index</name></name></expr>]</index></name><operator pos:start="1803:43" pos:end="1803:43">(</operator><operator pos:start="1803:44" pos:end="1803:44">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1805:9" pos:end="1805:51"><expr pos:start="1805:9" pos:end="1805:50"><call pos:start="1805:9" pos:end="1805:50"><name pos:start="1805:9" pos:end="1805:25">gen_op_addl_A0_im</name><argument_list pos:start="1805:26" pos:end="1805:50">(<argument pos:start="1805:27" pos:end="1805:49"><expr pos:start="1805:27" pos:end="1805:49"><literal type="number" pos:start="1805:27" pos:end="1805:27">1</literal> <operator pos:start="1805:29" pos:end="1805:30">&lt;&lt;</operator> <operator pos:start="1805:32" pos:end="1805:32">(</operator><name pos:start="1805:33" pos:end="1805:34">ot</name> <operator pos:start="1805:36" pos:end="1805:36">-</operator> <name pos:start="1805:38" pos:end="1805:44">OT_WORD</name> <operator pos:start="1805:46" pos:end="1805:46">+</operator> <literal type="number" pos:start="1805:48" pos:end="1805:48">1</literal><operator pos:start="1805:49" pos:end="1805:49">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1807:9" pos:end="1807:66">/* load the segment first to handle exceptions properly */</comment>

        <expr_stmt pos:start="1809:9" pos:end="1809:51"><expr pos:start="1809:9" pos:end="1809:50"><name pos:start="1809:9" pos:end="1809:48"><name pos:start="1809:9" pos:end="1809:24">gen_op_ldu_T0_A0</name><index pos:start="1809:25" pos:end="1809:48">[<expr pos:start="1809:26" pos:end="1809:47"><name pos:start="1809:26" pos:end="1809:32">OT_WORD</name> <operator pos:start="1809:34" pos:end="1809:34">+</operator> <name pos:start="1809:36" pos:end="1809:47"><name pos:start="1809:36" pos:end="1809:36">s</name><operator pos:start="1809:37" pos:end="1809:38">-&gt;</operator><name pos:start="1809:39" pos:end="1809:47">mem_index</name></name></expr>]</index></name><operator pos:start="1809:49" pos:end="1809:49">(</operator><operator pos:start="1809:50" pos:end="1809:50">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1811:9" pos:end="1811:54"><expr pos:start="1811:9" pos:end="1811:53"><call pos:start="1811:9" pos:end="1811:53"><name pos:start="1811:9" pos:end="1811:23">gen_movl_seg_T0</name><argument_list pos:start="1811:24" pos:end="1811:53">(<argument pos:start="1811:25" pos:end="1811:25"><expr pos:start="1811:25" pos:end="1811:25"><name pos:start="1811:25" pos:end="1811:25">s</name></expr></argument>, <argument pos:start="1811:28" pos:end="1811:29"><expr pos:start="1811:28" pos:end="1811:29"><name pos:start="1811:28" pos:end="1811:29">op</name></expr></argument>, <argument pos:start="1811:32" pos:end="1811:52"><expr pos:start="1811:32" pos:end="1811:52"><name pos:start="1811:32" pos:end="1811:39">pc_start</name> <operator pos:start="1811:41" pos:end="1811:41">-</operator> <name pos:start="1811:43" pos:end="1811:52"><name pos:start="1811:43" pos:end="1811:43">s</name><operator pos:start="1811:44" pos:end="1811:45">-&gt;</operator><name pos:start="1811:46" pos:end="1811:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1813:9" pos:end="1813:31">/* then put the data */</comment>

        <expr_stmt pos:start="1815:9" pos:end="1815:37"><expr pos:start="1815:9" pos:end="1815:36"><name pos:start="1815:9" pos:end="1815:34"><name pos:start="1815:9" pos:end="1815:25">gen_op_mov_reg_T1</name><index pos:start="1815:26" pos:end="1815:29">[<expr pos:start="1815:27" pos:end="1815:28"><name pos:start="1815:27" pos:end="1815:28">ot</name></expr>]</index><index pos:start="1815:30" pos:end="1815:34">[<expr pos:start="1815:31" pos:end="1815:33"><name pos:start="1815:31" pos:end="1815:33">reg</name></expr>]</index></name><operator pos:start="1815:35" pos:end="1815:35">(</operator><operator pos:start="1815:36" pos:end="1815:36">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="1817:9" pos:end="1823:9"><if pos:start="1817:9" pos:end="1823:9">if <condition pos:start="1817:12" pos:end="1817:22">(<expr pos:start="1817:13" pos:end="1817:21"><name pos:start="1817:13" pos:end="1817:21"><name pos:start="1817:13" pos:end="1817:13">s</name><operator pos:start="1817:14" pos:end="1817:15">-&gt;</operator><name pos:start="1817:16" pos:end="1817:21">is_jmp</name></name></expr>)</condition> <block pos:start="1817:24" pos:end="1823:9">{<block_content pos:start="1819:13" pos:end="1821:23">

            <expr_stmt pos:start="1819:13" pos:end="1819:46"><expr pos:start="1819:13" pos:end="1819:45"><call pos:start="1819:13" pos:end="1819:45"><name pos:start="1819:13" pos:end="1819:25">gen_op_jmp_im</name><argument_list pos:start="1819:26" pos:end="1819:45">(<argument pos:start="1819:27" pos:end="1819:44"><expr pos:start="1819:27" pos:end="1819:44"><name pos:start="1819:27" pos:end="1819:31"><name pos:start="1819:27" pos:end="1819:27">s</name><operator pos:start="1819:28" pos:end="1819:29">-&gt;</operator><name pos:start="1819:30" pos:end="1819:31">pc</name></name> <operator pos:start="1819:33" pos:end="1819:33">-</operator> <name pos:start="1819:35" pos:end="1819:44"><name pos:start="1819:35" pos:end="1819:35">s</name><operator pos:start="1819:36" pos:end="1819:37">-&gt;</operator><name pos:start="1819:38" pos:end="1819:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1821:13" pos:end="1821:23"><expr pos:start="1821:13" pos:end="1821:22"><call pos:start="1821:13" pos:end="1821:22"><name pos:start="1821:13" pos:end="1821:19">gen_eob</name><argument_list pos:start="1821:20" pos:end="1821:22">(<argument pos:start="1821:21" pos:end="1821:21"><expr pos:start="1821:21" pos:end="1821:21"><name pos:start="1821:21" pos:end="1821:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="1825:9" pos:end="1825:14">break;</break>

        

        <comment type="block" format="doxygen" pos:start="1829:9" pos:end="1829:34">/************************/</comment>

        <comment type="block" pos:start="1831:9" pos:end="1831:20">/* shifts */</comment>

    <case pos:start="1833:5" pos:end="1833:14">case <expr pos:start="1833:10" pos:end="1833:13"><literal type="number" pos:start="1833:10" pos:end="1833:13">0xc0</literal></expr>:</case>

    <case pos:start="1835:5" pos:end="1835:14">case <expr pos:start="1835:10" pos:end="1835:13"><literal type="number" pos:start="1835:10" pos:end="1835:13">0xc1</literal></expr>:</case>

        <comment type="block" pos:start="1837:9" pos:end="1837:25">/* shift Ev,Ib */</comment>

        <expr_stmt pos:start="1839:9" pos:end="1839:18"><expr pos:start="1839:9" pos:end="1839:17"><name pos:start="1839:9" pos:end="1839:13">shift</name> <operator pos:start="1839:15" pos:end="1839:15">=</operator> <literal type="number" pos:start="1839:17" pos:end="1839:17">2</literal></expr>;</expr_stmt>

    <label pos:start="1841:5" pos:end="1841:9"><name pos:start="1841:5" pos:end="1841:8">grp2</name>:</label>

        <block pos:start="1843:9" pos:end="1897:9">{<block_content pos:start="1845:13" pos:end="1895:13">

            <if_stmt pos:start="1845:13" pos:end="1851:47"><if pos:start="1845:13" pos:end="1847:29">if <condition pos:start="1845:16" pos:end="1845:29">(<expr pos:start="1845:17" pos:end="1845:28"><operator pos:start="1845:17" pos:end="1845:17">(</operator><name pos:start="1845:18" pos:end="1845:18">b</name> <operator pos:start="1845:20" pos:end="1845:20">&amp;</operator> <literal type="number" pos:start="1845:22" pos:end="1845:22">1</literal><operator pos:start="1845:23" pos:end="1845:23">)</operator> <operator pos:start="1845:25" pos:end="1845:26">==</operator> <literal type="number" pos:start="1845:28" pos:end="1845:28">0</literal></expr>)</condition><block type="pseudo" pos:start="1847:17" pos:end="1847:29"><block_content pos:start="1847:17" pos:end="1847:29">

                <expr_stmt pos:start="1847:17" pos:end="1847:29"><expr pos:start="1847:17" pos:end="1847:28"><name pos:start="1847:17" pos:end="1847:18">ot</name> <operator pos:start="1847:20" pos:end="1847:20">=</operator> <name pos:start="1847:22" pos:end="1847:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1849:13" pos:end="1851:47">else<block type="pseudo" pos:start="1851:17" pos:end="1851:47"><block_content pos:start="1851:17" pos:end="1851:47">

                <expr_stmt pos:start="1851:17" pos:end="1851:47"><expr pos:start="1851:17" pos:end="1851:46"><name pos:start="1851:17" pos:end="1851:18">ot</name> <operator pos:start="1851:20" pos:end="1851:20">=</operator> <ternary pos:start="1851:22" pos:end="1851:46"><condition pos:start="1851:22" pos:end="1851:28"><expr pos:start="1851:22" pos:end="1851:26"><name pos:start="1851:22" pos:end="1851:26">dflag</name></expr> ?</condition><then pos:start="1851:30" pos:end="1851:36"> <expr pos:start="1851:30" pos:end="1851:36"><name pos:start="1851:30" pos:end="1851:36">OT_LONG</name></expr> </then><else pos:start="1851:38" pos:end="1851:46">: <expr pos:start="1851:40" pos:end="1851:46"><name pos:start="1851:40" pos:end="1851:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

            

            <expr_stmt pos:start="1855:13" pos:end="1855:39"><expr pos:start="1855:13" pos:end="1855:38"><name pos:start="1855:13" pos:end="1855:17">modrm</name> <operator pos:start="1855:19" pos:end="1855:19">=</operator> <call pos:start="1855:21" pos:end="1855:38"><name pos:start="1855:21" pos:end="1855:29">ldub_code</name><argument_list pos:start="1855:30" pos:end="1855:38">(<argument pos:start="1855:31" pos:end="1855:37"><expr pos:start="1855:31" pos:end="1855:37"><name pos:start="1855:31" pos:end="1855:35"><name pos:start="1855:31" pos:end="1855:31">s</name><operator pos:start="1855:32" pos:end="1855:33">-&gt;</operator><name pos:start="1855:34" pos:end="1855:35">pc</name></name><operator pos:start="1855:36" pos:end="1855:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1857:13" pos:end="1857:35"><expr pos:start="1857:13" pos:end="1857:34"><name pos:start="1857:13" pos:end="1857:15">mod</name> <operator pos:start="1857:17" pos:end="1857:17">=</operator> <operator pos:start="1857:19" pos:end="1857:19">(</operator><name pos:start="1857:20" pos:end="1857:24">modrm</name> <operator pos:start="1857:26" pos:end="1857:27">&gt;&gt;</operator> <literal type="number" pos:start="1857:29" pos:end="1857:29">6</literal><operator pos:start="1857:30" pos:end="1857:30">)</operator> <operator pos:start="1857:32" pos:end="1857:32">&amp;</operator> <literal type="number" pos:start="1857:34" pos:end="1857:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1859:13" pos:end="1859:27"><expr pos:start="1859:13" pos:end="1859:26"><name pos:start="1859:13" pos:end="1859:14">rm</name> <operator pos:start="1859:16" pos:end="1859:16">=</operator> <name pos:start="1859:18" pos:end="1859:22">modrm</name> <operator pos:start="1859:24" pos:end="1859:24">&amp;</operator> <literal type="number" pos:start="1859:26" pos:end="1859:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1861:13" pos:end="1861:34"><expr pos:start="1861:13" pos:end="1861:33"><name pos:start="1861:13" pos:end="1861:14">op</name> <operator pos:start="1861:16" pos:end="1861:16">=</operator> <operator pos:start="1861:18" pos:end="1861:18">(</operator><name pos:start="1861:19" pos:end="1861:23">modrm</name> <operator pos:start="1861:25" pos:end="1861:26">&gt;&gt;</operator> <literal type="number" pos:start="1861:28" pos:end="1861:28">3</literal><operator pos:start="1861:29" pos:end="1861:29">)</operator> <operator pos:start="1861:31" pos:end="1861:31">&amp;</operator> <literal type="number" pos:start="1861:33" pos:end="1861:33">7</literal></expr>;</expr_stmt>

            

            <if_stmt pos:start="1865:13" pos:end="1875:13"><if pos:start="1865:13" pos:end="1871:13">if <condition pos:start="1865:16" pos:end="1865:25">(<expr pos:start="1865:17" pos:end="1865:24"><name pos:start="1865:17" pos:end="1865:19">mod</name> <operator pos:start="1865:21" pos:end="1865:22">!=</operator> <literal type="number" pos:start="1865:24" pos:end="1865:24">3</literal></expr>)</condition> <block pos:start="1865:27" pos:end="1871:13">{<block_content pos:start="1867:17" pos:end="1869:32">

                <expr_stmt pos:start="1867:17" pos:end="1867:65"><expr pos:start="1867:17" pos:end="1867:64"><call pos:start="1867:17" pos:end="1867:64"><name pos:start="1867:17" pos:end="1867:29">gen_lea_modrm</name><argument_list pos:start="1867:30" pos:end="1867:64">(<argument pos:start="1867:31" pos:end="1867:31"><expr pos:start="1867:31" pos:end="1867:31"><name pos:start="1867:31" pos:end="1867:31">s</name></expr></argument>, <argument pos:start="1867:34" pos:end="1867:38"><expr pos:start="1867:34" pos:end="1867:38"><name pos:start="1867:34" pos:end="1867:38">modrm</name></expr></argument>, <argument pos:start="1867:41" pos:end="1867:49"><expr pos:start="1867:41" pos:end="1867:49"><operator pos:start="1867:41" pos:end="1867:41">&amp;</operator><name pos:start="1867:42" pos:end="1867:49">reg_addr</name></expr></argument>, <argument pos:start="1867:52" pos:end="1867:63"><expr pos:start="1867:52" pos:end="1867:63"><operator pos:start="1867:52" pos:end="1867:52">&amp;</operator><name pos:start="1867:53" pos:end="1867:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1869:17" pos:end="1869:32"><expr pos:start="1869:17" pos:end="1869:31"><name pos:start="1869:17" pos:end="1869:21">opreg</name> <operator pos:start="1869:23" pos:end="1869:23">=</operator> <name pos:start="1869:25" pos:end="1869:31">OR_TMP0</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1871:15" pos:end="1875:13">else <block pos:start="1871:20" pos:end="1875:13">{<block_content pos:start="1873:17" pos:end="1873:36">

                <expr_stmt pos:start="1873:17" pos:end="1873:36"><expr pos:start="1873:17" pos:end="1873:35"><name pos:start="1873:17" pos:end="1873:21">opreg</name> <operator pos:start="1873:23" pos:end="1873:23">=</operator> <name pos:start="1873:25" pos:end="1873:26">rm</name> <operator pos:start="1873:28" pos:end="1873:28">+</operator> <name pos:start="1873:30" pos:end="1873:35">OR_EAX</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="1879:13" pos:end="1879:28">/* simpler op */</comment>

            <if_stmt pos:start="1881:13" pos:end="1895:13"><if pos:start="1881:13" pos:end="1885:13">if <condition pos:start="1881:16" pos:end="1881:27">(<expr pos:start="1881:17" pos:end="1881:26"><name pos:start="1881:17" pos:end="1881:21">shift</name> <operator pos:start="1881:23" pos:end="1881:24">==</operator> <literal type="number" pos:start="1881:26" pos:end="1881:26">0</literal></expr>)</condition> <block pos:start="1881:29" pos:end="1885:13">{<block_content pos:start="1883:17" pos:end="1883:52">

                <expr_stmt pos:start="1883:17" pos:end="1883:52"><expr pos:start="1883:17" pos:end="1883:51"><call pos:start="1883:17" pos:end="1883:51"><name pos:start="1883:17" pos:end="1883:25">gen_shift</name><argument_list pos:start="1883:26" pos:end="1883:51">(<argument pos:start="1883:27" pos:end="1883:27"><expr pos:start="1883:27" pos:end="1883:27"><name pos:start="1883:27" pos:end="1883:27">s</name></expr></argument>, <argument pos:start="1883:30" pos:end="1883:31"><expr pos:start="1883:30" pos:end="1883:31"><name pos:start="1883:30" pos:end="1883:31">op</name></expr></argument>, <argument pos:start="1883:34" pos:end="1883:35"><expr pos:start="1883:34" pos:end="1883:35"><name pos:start="1883:34" pos:end="1883:35">ot</name></expr></argument>, <argument pos:start="1883:38" pos:end="1883:42"><expr pos:start="1883:38" pos:end="1883:42"><name pos:start="1883:38" pos:end="1883:42">opreg</name></expr></argument>, <argument pos:start="1883:45" pos:end="1883:50"><expr pos:start="1883:45" pos:end="1883:50"><name pos:start="1883:45" pos:end="1883:50">OR_ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1885:15" pos:end="1895:13">else <block pos:start="1885:20" pos:end="1895:13">{<block_content pos:start="1887:17" pos:end="1893:52">

                <if_stmt pos:start="1887:17" pos:end="1891:17"><if pos:start="1887:17" pos:end="1891:17">if <condition pos:start="1887:20" pos:end="1887:31">(<expr pos:start="1887:21" pos:end="1887:30"><name pos:start="1887:21" pos:end="1887:25">shift</name> <operator pos:start="1887:27" pos:end="1887:28">==</operator> <literal type="number" pos:start="1887:30" pos:end="1887:30">2</literal></expr>)</condition> <block pos:start="1887:33" pos:end="1891:17">{<block_content pos:start="1889:21" pos:end="1889:47">

                    <expr_stmt pos:start="1889:21" pos:end="1889:47"><expr pos:start="1889:21" pos:end="1889:46"><name pos:start="1889:21" pos:end="1889:25">shift</name> <operator pos:start="1889:27" pos:end="1889:27">=</operator> <call pos:start="1889:29" pos:end="1889:46"><name pos:start="1889:29" pos:end="1889:37">ldub_code</name><argument_list pos:start="1889:38" pos:end="1889:46">(<argument pos:start="1889:39" pos:end="1889:45"><expr pos:start="1889:39" pos:end="1889:45"><name pos:start="1889:39" pos:end="1889:43"><name pos:start="1889:39" pos:end="1889:39">s</name><operator pos:start="1889:40" pos:end="1889:41">-&gt;</operator><name pos:start="1889:42" pos:end="1889:43">pc</name></name><operator pos:start="1889:44" pos:end="1889:45">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1893:17" pos:end="1893:52"><expr pos:start="1893:17" pos:end="1893:51"><call pos:start="1893:17" pos:end="1893:51"><name pos:start="1893:17" pos:end="1893:26">gen_shifti</name><argument_list pos:start="1893:27" pos:end="1893:51">(<argument pos:start="1893:28" pos:end="1893:28"><expr pos:start="1893:28" pos:end="1893:28"><name pos:start="1893:28" pos:end="1893:28">s</name></expr></argument>, <argument pos:start="1893:31" pos:end="1893:32"><expr pos:start="1893:31" pos:end="1893:32"><name pos:start="1893:31" pos:end="1893:32">op</name></expr></argument>, <argument pos:start="1893:35" pos:end="1893:36"><expr pos:start="1893:35" pos:end="1893:36"><name pos:start="1893:35" pos:end="1893:36">ot</name></expr></argument>, <argument pos:start="1893:39" pos:end="1893:43"><expr pos:start="1893:39" pos:end="1893:43"><name pos:start="1893:39" pos:end="1893:43">opreg</name></expr></argument>, <argument pos:start="1893:46" pos:end="1893:50"><expr pos:start="1893:46" pos:end="1893:50"><name pos:start="1893:46" pos:end="1893:50">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="1899:9" pos:end="1899:14">break;</break>

    <case pos:start="1901:5" pos:end="1901:14">case <expr pos:start="1901:10" pos:end="1901:13"><literal type="number" pos:start="1901:10" pos:end="1901:13">0xd0</literal></expr>:</case>

    <case pos:start="1903:5" pos:end="1903:14">case <expr pos:start="1903:10" pos:end="1903:13"><literal type="number" pos:start="1903:10" pos:end="1903:13">0xd1</literal></expr>:</case>

        <comment type="block" pos:start="1905:9" pos:end="1905:24">/* shift Ev,1 */</comment>

        <expr_stmt pos:start="1907:9" pos:end="1907:18"><expr pos:start="1907:9" pos:end="1907:17"><name pos:start="1907:9" pos:end="1907:13">shift</name> <operator pos:start="1907:15" pos:end="1907:15">=</operator> <literal type="number" pos:start="1907:17" pos:end="1907:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="1909:9" pos:end="1909:18">goto <name pos:start="1909:14" pos:end="1909:17">grp2</name>;</goto>

    <case pos:start="1911:5" pos:end="1911:14">case <expr pos:start="1911:10" pos:end="1911:13"><literal type="number" pos:start="1911:10" pos:end="1911:13">0xd2</literal></expr>:</case>

    <case pos:start="1913:5" pos:end="1913:14">case <expr pos:start="1913:10" pos:end="1913:13"><literal type="number" pos:start="1913:10" pos:end="1913:13">0xd3</literal></expr>:</case>

        <comment type="block" pos:start="1915:9" pos:end="1915:25">/* shift Ev,cl */</comment>

        <expr_stmt pos:start="1917:9" pos:end="1917:18"><expr pos:start="1917:9" pos:end="1917:17"><name pos:start="1917:9" pos:end="1917:13">shift</name> <operator pos:start="1917:15" pos:end="1917:15">=</operator> <literal type="number" pos:start="1917:17" pos:end="1917:17">0</literal></expr>;</expr_stmt>

        <goto pos:start="1919:9" pos:end="1919:18">goto <name pos:start="1919:14" pos:end="1919:17">grp2</name>;</goto>



    <case pos:start="1923:5" pos:end="1923:15">case <expr pos:start="1923:10" pos:end="1923:14"><literal type="number" pos:start="1923:10" pos:end="1923:14">0x1a4</literal></expr>:</case> <comment type="block" pos:start="1923:17" pos:end="1923:30">/* shld imm */</comment>

        <expr_stmt pos:start="1925:9" pos:end="1925:15"><expr pos:start="1925:9" pos:end="1925:14"><name pos:start="1925:9" pos:end="1925:10">op</name> <operator pos:start="1925:12" pos:end="1925:12">=</operator> <literal type="number" pos:start="1925:14" pos:end="1925:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1927:9" pos:end="1927:18"><expr pos:start="1927:9" pos:end="1927:17"><name pos:start="1927:9" pos:end="1927:13">shift</name> <operator pos:start="1927:15" pos:end="1927:15">=</operator> <literal type="number" pos:start="1927:17" pos:end="1927:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="1929:9" pos:end="1929:23">goto <name pos:start="1929:14" pos:end="1929:22">do_shiftd</name>;</goto>

    <case pos:start="1931:5" pos:end="1931:15">case <expr pos:start="1931:10" pos:end="1931:14"><literal type="number" pos:start="1931:10" pos:end="1931:14">0x1a5</literal></expr>:</case> <comment type="block" pos:start="1931:17" pos:end="1931:29">/* shld cl */</comment>

        <expr_stmt pos:start="1933:9" pos:end="1933:15"><expr pos:start="1933:9" pos:end="1933:14"><name pos:start="1933:9" pos:end="1933:10">op</name> <operator pos:start="1933:12" pos:end="1933:12">=</operator> <literal type="number" pos:start="1933:14" pos:end="1933:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1935:9" pos:end="1935:18"><expr pos:start="1935:9" pos:end="1935:17"><name pos:start="1935:9" pos:end="1935:13">shift</name> <operator pos:start="1935:15" pos:end="1935:15">=</operator> <literal type="number" pos:start="1935:17" pos:end="1935:17">0</literal></expr>;</expr_stmt>

        <goto pos:start="1937:9" pos:end="1937:23">goto <name pos:start="1937:14" pos:end="1937:22">do_shiftd</name>;</goto>

    <case pos:start="1939:5" pos:end="1939:15">case <expr pos:start="1939:10" pos:end="1939:14"><literal type="number" pos:start="1939:10" pos:end="1939:14">0x1ac</literal></expr>:</case> <comment type="block" pos:start="1939:17" pos:end="1939:30">/* shrd imm */</comment>

        <expr_stmt pos:start="1941:9" pos:end="1941:15"><expr pos:start="1941:9" pos:end="1941:14"><name pos:start="1941:9" pos:end="1941:10">op</name> <operator pos:start="1941:12" pos:end="1941:12">=</operator> <literal type="number" pos:start="1941:14" pos:end="1941:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1943:9" pos:end="1943:18"><expr pos:start="1943:9" pos:end="1943:17"><name pos:start="1943:9" pos:end="1943:13">shift</name> <operator pos:start="1943:15" pos:end="1943:15">=</operator> <literal type="number" pos:start="1943:17" pos:end="1943:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="1945:9" pos:end="1945:23">goto <name pos:start="1945:14" pos:end="1945:22">do_shiftd</name>;</goto>

    <case pos:start="1947:5" pos:end="1947:15">case <expr pos:start="1947:10" pos:end="1947:14"><literal type="number" pos:start="1947:10" pos:end="1947:14">0x1ad</literal></expr>:</case> <comment type="block" pos:start="1947:17" pos:end="1947:29">/* shrd cl */</comment>

        <expr_stmt pos:start="1949:9" pos:end="1949:15"><expr pos:start="1949:9" pos:end="1949:14"><name pos:start="1949:9" pos:end="1949:10">op</name> <operator pos:start="1949:12" pos:end="1949:12">=</operator> <literal type="number" pos:start="1949:14" pos:end="1949:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1951:9" pos:end="1951:18"><expr pos:start="1951:9" pos:end="1951:17"><name pos:start="1951:9" pos:end="1951:13">shift</name> <operator pos:start="1951:15" pos:end="1951:15">=</operator> <literal type="number" pos:start="1951:17" pos:end="1951:17">0</literal></expr>;</expr_stmt>

    <label pos:start="1953:5" pos:end="1953:14"><name pos:start="1953:5" pos:end="1953:13">do_shiftd</name>:</label>

        <expr_stmt pos:start="1955:9" pos:end="1955:39"><expr pos:start="1955:9" pos:end="1955:38"><name pos:start="1955:9" pos:end="1955:10">ot</name> <operator pos:start="1955:12" pos:end="1955:12">=</operator> <ternary pos:start="1955:14" pos:end="1955:38"><condition pos:start="1955:14" pos:end="1955:20"><expr pos:start="1955:14" pos:end="1955:18"><name pos:start="1955:14" pos:end="1955:18">dflag</name></expr> ?</condition><then pos:start="1955:22" pos:end="1955:28"> <expr pos:start="1955:22" pos:end="1955:28"><name pos:start="1955:22" pos:end="1955:28">OT_LONG</name></expr> </then><else pos:start="1955:30" pos:end="1955:38">: <expr pos:start="1955:32" pos:end="1955:38"><name pos:start="1955:32" pos:end="1955:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1957:9" pos:end="1957:35"><expr pos:start="1957:9" pos:end="1957:34"><name pos:start="1957:9" pos:end="1957:13">modrm</name> <operator pos:start="1957:15" pos:end="1957:15">=</operator> <call pos:start="1957:17" pos:end="1957:34"><name pos:start="1957:17" pos:end="1957:25">ldub_code</name><argument_list pos:start="1957:26" pos:end="1957:34">(<argument pos:start="1957:27" pos:end="1957:33"><expr pos:start="1957:27" pos:end="1957:33"><name pos:start="1957:27" pos:end="1957:31"><name pos:start="1957:27" pos:end="1957:27">s</name><operator pos:start="1957:28" pos:end="1957:29">-&gt;</operator><name pos:start="1957:30" pos:end="1957:31">pc</name></name><operator pos:start="1957:32" pos:end="1957:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1959:9" pos:end="1959:31"><expr pos:start="1959:9" pos:end="1959:30"><name pos:start="1959:9" pos:end="1959:11">mod</name> <operator pos:start="1959:13" pos:end="1959:13">=</operator> <operator pos:start="1959:15" pos:end="1959:15">(</operator><name pos:start="1959:16" pos:end="1959:20">modrm</name> <operator pos:start="1959:22" pos:end="1959:23">&gt;&gt;</operator> <literal type="number" pos:start="1959:25" pos:end="1959:25">6</literal><operator pos:start="1959:26" pos:end="1959:26">)</operator> <operator pos:start="1959:28" pos:end="1959:28">&amp;</operator> <literal type="number" pos:start="1959:30" pos:end="1959:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1961:9" pos:end="1961:23"><expr pos:start="1961:9" pos:end="1961:22"><name pos:start="1961:9" pos:end="1961:10">rm</name> <operator pos:start="1961:12" pos:end="1961:12">=</operator> <name pos:start="1961:14" pos:end="1961:18">modrm</name> <operator pos:start="1961:20" pos:end="1961:20">&amp;</operator> <literal type="number" pos:start="1961:22" pos:end="1961:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1963:9" pos:end="1963:31"><expr pos:start="1963:9" pos:end="1963:30"><name pos:start="1963:9" pos:end="1963:11">reg</name> <operator pos:start="1963:13" pos:end="1963:13">=</operator> <operator pos:start="1963:15" pos:end="1963:15">(</operator><name pos:start="1963:16" pos:end="1963:20">modrm</name> <operator pos:start="1963:22" pos:end="1963:23">&gt;&gt;</operator> <literal type="number" pos:start="1963:25" pos:end="1963:25">3</literal><operator pos:start="1963:26" pos:end="1963:26">)</operator> <operator pos:start="1963:28" pos:end="1963:28">&amp;</operator> <literal type="number" pos:start="1963:30" pos:end="1963:30">7</literal></expr>;</expr_stmt>

        

        <if_stmt pos:start="1967:9" pos:end="1977:9"><if pos:start="1967:9" pos:end="1973:9">if <condition pos:start="1967:12" pos:end="1967:21">(<expr pos:start="1967:13" pos:end="1967:20"><name pos:start="1967:13" pos:end="1967:15">mod</name> <operator pos:start="1967:17" pos:end="1967:18">!=</operator> <literal type="number" pos:start="1967:20" pos:end="1967:20">3</literal></expr>)</condition> <block pos:start="1967:23" pos:end="1973:9">{<block_content pos:start="1969:13" pos:end="1971:49">

            <expr_stmt pos:start="1969:13" pos:end="1969:61"><expr pos:start="1969:13" pos:end="1969:60"><call pos:start="1969:13" pos:end="1969:60"><name pos:start="1969:13" pos:end="1969:25">gen_lea_modrm</name><argument_list pos:start="1969:26" pos:end="1969:60">(<argument pos:start="1969:27" pos:end="1969:27"><expr pos:start="1969:27" pos:end="1969:27"><name pos:start="1969:27" pos:end="1969:27">s</name></expr></argument>, <argument pos:start="1969:30" pos:end="1969:34"><expr pos:start="1969:30" pos:end="1969:34"><name pos:start="1969:30" pos:end="1969:34">modrm</name></expr></argument>, <argument pos:start="1969:37" pos:end="1969:45"><expr pos:start="1969:37" pos:end="1969:45"><operator pos:start="1969:37" pos:end="1969:37">&amp;</operator><name pos:start="1969:38" pos:end="1969:45">reg_addr</name></expr></argument>, <argument pos:start="1969:48" pos:end="1969:59"><expr pos:start="1969:48" pos:end="1969:59"><operator pos:start="1969:48" pos:end="1969:48">&amp;</operator><name pos:start="1969:49" pos:end="1969:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1971:13" pos:end="1971:49"><expr pos:start="1971:13" pos:end="1971:48"><name pos:start="1971:13" pos:end="1971:46"><name pos:start="1971:13" pos:end="1971:27">gen_op_ld_T0_A0</name><index pos:start="1971:28" pos:end="1971:46">[<expr pos:start="1971:29" pos:end="1971:45"><name pos:start="1971:29" pos:end="1971:30">ot</name> <operator pos:start="1971:32" pos:end="1971:32">+</operator> <name pos:start="1971:34" pos:end="1971:45"><name pos:start="1971:34" pos:end="1971:34">s</name><operator pos:start="1971:35" pos:end="1971:36">-&gt;</operator><name pos:start="1971:37" pos:end="1971:45">mem_index</name></name></expr>]</index></name><operator pos:start="1971:47" pos:end="1971:47">(</operator><operator pos:start="1971:48" pos:end="1971:48">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1973:11" pos:end="1977:9">else <block pos:start="1973:16" pos:end="1977:9">{<block_content pos:start="1975:13" pos:end="1975:43">

            <expr_stmt pos:start="1975:13" pos:end="1975:43"><expr pos:start="1975:13" pos:end="1975:42"><name pos:start="1975:13" pos:end="1975:40"><name pos:start="1975:13" pos:end="1975:29">gen_op_mov_TN_reg</name><index pos:start="1975:30" pos:end="1975:33">[<expr pos:start="1975:31" pos:end="1975:32"><name pos:start="1975:31" pos:end="1975:32">ot</name></expr>]</index><index pos:start="1975:34" pos:end="1975:36">[<expr pos:start="1975:35" pos:end="1975:35"><literal type="number" pos:start="1975:35" pos:end="1975:35">0</literal></expr>]</index><index pos:start="1975:37" pos:end="1975:40">[<expr pos:start="1975:38" pos:end="1975:39"><name pos:start="1975:38" pos:end="1975:39">rm</name></expr>]</index></name><operator pos:start="1975:41" pos:end="1975:41">(</operator><operator pos:start="1975:42" pos:end="1975:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1979:9" pos:end="1979:40"><expr pos:start="1979:9" pos:end="1979:39"><name pos:start="1979:9" pos:end="1979:37"><name pos:start="1979:9" pos:end="1979:25">gen_op_mov_TN_reg</name><index pos:start="1979:26" pos:end="1979:29">[<expr pos:start="1979:27" pos:end="1979:28"><name pos:start="1979:27" pos:end="1979:28">ot</name></expr>]</index><index pos:start="1979:30" pos:end="1979:32">[<expr pos:start="1979:31" pos:end="1979:31"><literal type="number" pos:start="1979:31" pos:end="1979:31">1</literal></expr>]</index><index pos:start="1979:33" pos:end="1979:37">[<expr pos:start="1979:34" pos:end="1979:36"><name pos:start="1979:34" pos:end="1979:36">reg</name></expr>]</index></name><operator pos:start="1979:38" pos:end="1979:38">(</operator><operator pos:start="1979:39" pos:end="1979:39">)</operator></expr>;</expr_stmt>

        

        <if_stmt pos:start="1983:9" pos:end="2025:9"><if pos:start="1983:9" pos:end="2009:9">if <condition pos:start="1983:12" pos:end="1983:18">(<expr pos:start="1983:13" pos:end="1983:17"><name pos:start="1983:13" pos:end="1983:17">shift</name></expr>)</condition> <block pos:start="1983:20" pos:end="2009:9">{<block_content pos:start="1985:13" pos:end="2007:13">

            <expr_stmt pos:start="1985:13" pos:end="1985:37"><expr pos:start="1985:13" pos:end="1985:36"><name pos:start="1985:13" pos:end="1985:15">val</name> <operator pos:start="1985:17" pos:end="1985:17">=</operator> <call pos:start="1985:19" pos:end="1985:36"><name pos:start="1985:19" pos:end="1985:27">ldub_code</name><argument_list pos:start="1985:28" pos:end="1985:36">(<argument pos:start="1985:29" pos:end="1985:35"><expr pos:start="1985:29" pos:end="1985:35"><name pos:start="1985:29" pos:end="1985:33"><name pos:start="1985:29" pos:end="1985:29">s</name><operator pos:start="1985:30" pos:end="1985:31">-&gt;</operator><name pos:start="1985:32" pos:end="1985:33">pc</name></name><operator pos:start="1985:34" pos:end="1985:35">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1987:13" pos:end="1987:24"><expr pos:start="1987:13" pos:end="1987:23"><name pos:start="1987:13" pos:end="1987:15">val</name> <operator pos:start="1987:17" pos:end="1987:18">&amp;=</operator> <literal type="number" pos:start="1987:20" pos:end="1987:23">0x1f</literal></expr>;</expr_stmt>

            <if_stmt pos:start="1989:13" pos:end="2007:13"><if pos:start="1989:13" pos:end="2007:13">if <condition pos:start="1989:16" pos:end="1989:20">(<expr pos:start="1989:17" pos:end="1989:19"><name pos:start="1989:17" pos:end="1989:19">val</name></expr>)</condition> <block pos:start="1989:22" pos:end="2007:13">{<block_content pos:start="1991:17" pos:end="2005:47">

                <if_stmt pos:start="1991:17" pos:end="1997:78"><if pos:start="1991:17" pos:end="1993:59">if <condition pos:start="1991:20" pos:end="1991:29">(<expr pos:start="1991:21" pos:end="1991:28"><name pos:start="1991:21" pos:end="1991:23">mod</name> <operator pos:start="1991:25" pos:end="1991:26">==</operator> <literal type="number" pos:start="1991:28" pos:end="1991:28">3</literal></expr>)</condition><block type="pseudo" pos:start="1993:21" pos:end="1993:59"><block_content pos:start="1993:21" pos:end="1993:59">

                    <expr_stmt pos:start="1993:21" pos:end="1993:59"><expr pos:start="1993:21" pos:end="1993:58"><name pos:start="1993:21" pos:end="1993:53"><name pos:start="1993:21" pos:end="1993:45">gen_op_shiftd_T0_T1_im_cc</name><index pos:start="1993:46" pos:end="1993:49">[<expr pos:start="1993:47" pos:end="1993:48"><name pos:start="1993:47" pos:end="1993:48">ot</name></expr>]</index><index pos:start="1993:50" pos:end="1993:53">[<expr pos:start="1993:51" pos:end="1993:52"><name pos:start="1993:51" pos:end="1993:52">op</name></expr>]</index></name><operator pos:start="1993:54" pos:end="1993:54">(</operator><name pos:start="1993:55" pos:end="1993:57">val</name><operator pos:start="1993:58" pos:end="1993:58">)</operator></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1995:17" pos:end="1997:78">else<block type="pseudo" pos:start="1997:21" pos:end="1997:78"><block_content pos:start="1997:21" pos:end="1997:78">

                    <expr_stmt pos:start="1997:21" pos:end="1997:78"><expr pos:start="1997:21" pos:end="1997:77"><name pos:start="1997:21" pos:end="1997:72"><name pos:start="1997:21" pos:end="1997:49">gen_op_shiftd_mem_T0_T1_im_cc</name><index pos:start="1997:50" pos:end="1997:68">[<expr pos:start="1997:51" pos:end="1997:67"><name pos:start="1997:51" pos:end="1997:52">ot</name> <operator pos:start="1997:54" pos:end="1997:54">+</operator> <name pos:start="1997:56" pos:end="1997:67"><name pos:start="1997:56" pos:end="1997:56">s</name><operator pos:start="1997:57" pos:end="1997:58">-&gt;</operator><name pos:start="1997:59" pos:end="1997:67">mem_index</name></name></expr>]</index><index pos:start="1997:69" pos:end="1997:72">[<expr pos:start="1997:70" pos:end="1997:71"><name pos:start="1997:70" pos:end="1997:71">op</name></expr>]</index></name><operator pos:start="1997:73" pos:end="1997:73">(</operator><name pos:start="1997:74" pos:end="1997:76">val</name><operator pos:start="1997:77" pos:end="1997:77">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <if_stmt pos:start="1999:17" pos:end="2005:47"><if pos:start="1999:17" pos:end="2001:47">if <condition pos:start="1999:20" pos:end="1999:45">(<expr pos:start="1999:21" pos:end="1999:44"><name pos:start="1999:21" pos:end="1999:22">op</name> <operator pos:start="1999:24" pos:end="1999:25">==</operator> <literal type="number" pos:start="1999:27" pos:end="1999:27">0</literal> <operator pos:start="1999:29" pos:end="1999:30">&amp;&amp;</operator> <name pos:start="1999:32" pos:end="1999:33">ot</name> <operator pos:start="1999:35" pos:end="1999:36">!=</operator> <name pos:start="1999:38" pos:end="1999:44">OT_WORD</name></expr>)</condition><block type="pseudo" pos:start="2001:21" pos:end="2001:47"><block_content pos:start="2001:21" pos:end="2001:47">

                    <expr_stmt pos:start="2001:21" pos:end="2001:47"><expr pos:start="2001:21" pos:end="2001:46"><name pos:start="2001:21" pos:end="2001:28"><name pos:start="2001:21" pos:end="2001:21">s</name><operator pos:start="2001:22" pos:end="2001:23">-&gt;</operator><name pos:start="2001:24" pos:end="2001:28">cc_op</name></name> <operator pos:start="2001:30" pos:end="2001:30">=</operator> <name pos:start="2001:32" pos:end="2001:41">CC_OP_SHLB</name> <operator pos:start="2001:43" pos:end="2001:43">+</operator> <name pos:start="2001:45" pos:end="2001:46">ot</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="2003:17" pos:end="2005:47">else<block type="pseudo" pos:start="2005:21" pos:end="2005:47"><block_content pos:start="2005:21" pos:end="2005:47">

                    <expr_stmt pos:start="2005:21" pos:end="2005:47"><expr pos:start="2005:21" pos:end="2005:46"><name pos:start="2005:21" pos:end="2005:28"><name pos:start="2005:21" pos:end="2005:21">s</name><operator pos:start="2005:22" pos:end="2005:23">-&gt;</operator><name pos:start="2005:24" pos:end="2005:28">cc_op</name></name> <operator pos:start="2005:30" pos:end="2005:30">=</operator> <name pos:start="2005:32" pos:end="2005:41">CC_OP_SARB</name> <operator pos:start="2005:43" pos:end="2005:43">+</operator> <name pos:start="2005:45" pos:end="2005:46">ot</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="2009:11" pos:end="2025:9">else <block pos:start="2009:16" pos:end="2025:9">{<block_content pos:start="2011:13" pos:end="2023:37">

            <if_stmt pos:start="2011:13" pos:end="2013:43"><if pos:start="2011:13" pos:end="2013:43">if <condition pos:start="2011:16" pos:end="2011:42">(<expr pos:start="2011:17" pos:end="2011:41"><name pos:start="2011:17" pos:end="2011:24"><name pos:start="2011:17" pos:end="2011:17">s</name><operator pos:start="2011:18" pos:end="2011:19">-&gt;</operator><name pos:start="2011:20" pos:end="2011:24">cc_op</name></name> <operator pos:start="2011:26" pos:end="2011:27">!=</operator> <name pos:start="2011:29" pos:end="2011:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="2013:17" pos:end="2013:43"><block_content pos:start="2013:17" pos:end="2013:43">

                <expr_stmt pos:start="2013:17" pos:end="2013:43"><expr pos:start="2013:17" pos:end="2013:42"><call pos:start="2013:17" pos:end="2013:42"><name pos:start="2013:17" pos:end="2013:32">gen_op_set_cc_op</name><argument_list pos:start="2013:33" pos:end="2013:42">(<argument pos:start="2013:34" pos:end="2013:41"><expr pos:start="2013:34" pos:end="2013:41"><name pos:start="2013:34" pos:end="2013:41"><name pos:start="2013:34" pos:end="2013:34">s</name><operator pos:start="2013:35" pos:end="2013:36">-&gt;</operator><name pos:start="2013:37" pos:end="2013:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="2015:13" pos:end="2021:72"><if pos:start="2015:13" pos:end="2017:53">if <condition pos:start="2015:16" pos:end="2015:25">(<expr pos:start="2015:17" pos:end="2015:24"><name pos:start="2015:17" pos:end="2015:19">mod</name> <operator pos:start="2015:21" pos:end="2015:22">==</operator> <literal type="number" pos:start="2015:24" pos:end="2015:24">3</literal></expr>)</condition><block type="pseudo" pos:start="2017:17" pos:end="2017:53"><block_content pos:start="2017:17" pos:end="2017:53">

                <expr_stmt pos:start="2017:17" pos:end="2017:53"><expr pos:start="2017:17" pos:end="2017:52"><name pos:start="2017:17" pos:end="2017:50"><name pos:start="2017:17" pos:end="2017:42">gen_op_shiftd_T0_T1_ECX_cc</name><index pos:start="2017:43" pos:end="2017:46">[<expr pos:start="2017:44" pos:end="2017:45"><name pos:start="2017:44" pos:end="2017:45">ot</name></expr>]</index><index pos:start="2017:47" pos:end="2017:50">[<expr pos:start="2017:48" pos:end="2017:49"><name pos:start="2017:48" pos:end="2017:49">op</name></expr>]</index></name><operator pos:start="2017:51" pos:end="2017:51">(</operator><operator pos:start="2017:52" pos:end="2017:52">)</operator></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2019:13" pos:end="2021:72">else<block type="pseudo" pos:start="2021:17" pos:end="2021:72"><block_content pos:start="2021:17" pos:end="2021:72">

                <expr_stmt pos:start="2021:17" pos:end="2021:72"><expr pos:start="2021:17" pos:end="2021:71"><name pos:start="2021:17" pos:end="2021:69"><name pos:start="2021:17" pos:end="2021:46">gen_op_shiftd_mem_T0_T1_ECX_cc</name><index pos:start="2021:47" pos:end="2021:65">[<expr pos:start="2021:48" pos:end="2021:64"><name pos:start="2021:48" pos:end="2021:49">ot</name> <operator pos:start="2021:51" pos:end="2021:51">+</operator> <name pos:start="2021:53" pos:end="2021:64"><name pos:start="2021:53" pos:end="2021:53">s</name><operator pos:start="2021:54" pos:end="2021:55">-&gt;</operator><name pos:start="2021:56" pos:end="2021:64">mem_index</name></name></expr>]</index><index pos:start="2021:66" pos:end="2021:69">[<expr pos:start="2021:67" pos:end="2021:68"><name pos:start="2021:67" pos:end="2021:68">op</name></expr>]</index></name><operator pos:start="2021:70" pos:end="2021:70">(</operator><operator pos:start="2021:71" pos:end="2021:71">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="2023:13" pos:end="2023:37"><expr pos:start="2023:13" pos:end="2023:36"><name pos:start="2023:13" pos:end="2023:20"><name pos:start="2023:13" pos:end="2023:13">s</name><operator pos:start="2023:14" pos:end="2023:15">-&gt;</operator><name pos:start="2023:16" pos:end="2023:20">cc_op</name></name> <operator pos:start="2023:22" pos:end="2023:22">=</operator> <name pos:start="2023:24" pos:end="2023:36">CC_OP_DYNAMIC</name></expr>;</expr_stmt> <comment type="block" pos:start="2023:39" pos:end="2023:70">/* cannot predict flags after */</comment>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="2027:9" pos:end="2031:9"><if pos:start="2027:9" pos:end="2031:9">if <condition pos:start="2027:12" pos:end="2027:21">(<expr pos:start="2027:13" pos:end="2027:20"><name pos:start="2027:13" pos:end="2027:15">mod</name> <operator pos:start="2027:17" pos:end="2027:18">==</operator> <literal type="number" pos:start="2027:20" pos:end="2027:20">3</literal></expr>)</condition> <block pos:start="2027:23" pos:end="2031:9">{<block_content pos:start="2029:13" pos:end="2029:40">

            <expr_stmt pos:start="2029:13" pos:end="2029:40"><expr pos:start="2029:13" pos:end="2029:39"><name pos:start="2029:13" pos:end="2029:37"><name pos:start="2029:13" pos:end="2029:29">gen_op_mov_reg_T0</name><index pos:start="2029:30" pos:end="2029:33">[<expr pos:start="2029:31" pos:end="2029:32"><name pos:start="2029:31" pos:end="2029:32">ot</name></expr>]</index><index pos:start="2029:34" pos:end="2029:37">[<expr pos:start="2029:35" pos:end="2029:36"><name pos:start="2029:35" pos:end="2029:36">rm</name></expr>]</index></name><operator pos:start="2029:38" pos:end="2029:38">(</operator><operator pos:start="2029:39" pos:end="2029:39">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="2033:9" pos:end="2033:14">break;</break>



        <comment type="block" format="doxygen" pos:start="2037:9" pos:end="2037:34">/************************/</comment>

        <comment type="block" pos:start="2039:9" pos:end="2039:20">/* floats */</comment>

    <case pos:start="2041:5" pos:end="2041:23">case <expr pos:start="2041:10" pos:end="2041:22"><literal type="number" pos:start="2041:10" pos:end="2041:13">0xd8</literal> <operator pos:start="2041:15" pos:end="2041:17">...</operator> <literal type="number" pos:start="2041:19" pos:end="2041:22">0xdf</literal></expr>:</case> 

        <if_stmt pos:start="2043:9" pos:end="2053:9"><if pos:start="2043:9" pos:end="2053:9">if <condition pos:start="2043:12" pos:end="2043:49">(<expr pos:start="2043:13" pos:end="2043:48"><name pos:start="2043:13" pos:end="2043:20"><name pos:start="2043:13" pos:end="2043:13">s</name><operator pos:start="2043:14" pos:end="2043:15">-&gt;</operator><name pos:start="2043:16" pos:end="2043:20">flags</name></name> <operator pos:start="2043:22" pos:end="2043:22">&amp;</operator> <operator pos:start="2043:24" pos:end="2043:24">(</operator><name pos:start="2043:25" pos:end="2043:34">HF_EM_MASK</name> <operator pos:start="2043:36" pos:end="2043:36">|</operator> <name pos:start="2043:38" pos:end="2043:47">HF_TS_MASK</name><operator pos:start="2043:48" pos:end="2043:48">)</operator></expr>)</condition> <block pos:start="2043:51" pos:end="2053:9">{<block_content pos:start="2049:13" pos:end="2051:18">

            <comment type="block" pos:start="2045:13" pos:end="2045:72">/* if CR0.EM or CR0.TS are set, generate an FPU exception */</comment>

            <comment type="block" pos:start="2047:13" pos:end="2047:49">/* XXX: what to do if illegal op ? */</comment>

            <expr_stmt pos:start="2049:13" pos:end="2049:65"><expr pos:start="2049:13" pos:end="2049:64"><call pos:start="2049:13" pos:end="2049:64"><name pos:start="2049:13" pos:end="2049:25">gen_exception</name><argument_list pos:start="2049:26" pos:end="2049:64">(<argument pos:start="2049:27" pos:end="2049:27"><expr pos:start="2049:27" pos:end="2049:27"><name pos:start="2049:27" pos:end="2049:27">s</name></expr></argument>, <argument pos:start="2049:30" pos:end="2049:40"><expr pos:start="2049:30" pos:end="2049:40"><name pos:start="2049:30" pos:end="2049:40">EXCP07_PREX</name></expr></argument>, <argument pos:start="2049:43" pos:end="2049:63"><expr pos:start="2049:43" pos:end="2049:63"><name pos:start="2049:43" pos:end="2049:50">pc_start</name> <operator pos:start="2049:52" pos:end="2049:52">-</operator> <name pos:start="2049:54" pos:end="2049:63"><name pos:start="2049:54" pos:end="2049:54">s</name><operator pos:start="2049:55" pos:end="2049:56">-&gt;</operator><name pos:start="2049:57" pos:end="2049:63">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2051:13" pos:end="2051:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2055:9" pos:end="2055:35"><expr pos:start="2055:9" pos:end="2055:34"><name pos:start="2055:9" pos:end="2055:13">modrm</name> <operator pos:start="2055:15" pos:end="2055:15">=</operator> <call pos:start="2055:17" pos:end="2055:34"><name pos:start="2055:17" pos:end="2055:25">ldub_code</name><argument_list pos:start="2055:26" pos:end="2055:34">(<argument pos:start="2055:27" pos:end="2055:33"><expr pos:start="2055:27" pos:end="2055:33"><name pos:start="2055:27" pos:end="2055:31"><name pos:start="2055:27" pos:end="2055:27">s</name><operator pos:start="2055:28" pos:end="2055:29">-&gt;</operator><name pos:start="2055:30" pos:end="2055:31">pc</name></name><operator pos:start="2055:32" pos:end="2055:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2057:9" pos:end="2057:31"><expr pos:start="2057:9" pos:end="2057:30"><name pos:start="2057:9" pos:end="2057:11">mod</name> <operator pos:start="2057:13" pos:end="2057:13">=</operator> <operator pos:start="2057:15" pos:end="2057:15">(</operator><name pos:start="2057:16" pos:end="2057:20">modrm</name> <operator pos:start="2057:22" pos:end="2057:23">&gt;&gt;</operator> <literal type="number" pos:start="2057:25" pos:end="2057:25">6</literal><operator pos:start="2057:26" pos:end="2057:26">)</operator> <operator pos:start="2057:28" pos:end="2057:28">&amp;</operator> <literal type="number" pos:start="2057:30" pos:end="2057:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2059:9" pos:end="2059:23"><expr pos:start="2059:9" pos:end="2059:22"><name pos:start="2059:9" pos:end="2059:10">rm</name> <operator pos:start="2059:12" pos:end="2059:12">=</operator> <name pos:start="2059:14" pos:end="2059:18">modrm</name> <operator pos:start="2059:20" pos:end="2059:20">&amp;</operator> <literal type="number" pos:start="2059:22" pos:end="2059:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2061:9" pos:end="2061:49"><expr pos:start="2061:9" pos:end="2061:48"><name pos:start="2061:9" pos:end="2061:10">op</name> <operator pos:start="2061:12" pos:end="2061:12">=</operator> <operator pos:start="2061:14" pos:end="2061:14">(</operator><operator pos:start="2061:15" pos:end="2061:15">(</operator><name pos:start="2061:16" pos:end="2061:16">b</name> <operator pos:start="2061:18" pos:end="2061:18">&amp;</operator> <literal type="number" pos:start="2061:20" pos:end="2061:20">7</literal><operator pos:start="2061:21" pos:end="2061:21">)</operator> <operator pos:start="2061:23" pos:end="2061:24">&lt;&lt;</operator> <literal type="number" pos:start="2061:26" pos:end="2061:26">3</literal><operator pos:start="2061:27" pos:end="2061:27">)</operator> <operator pos:start="2061:29" pos:end="2061:29">|</operator> <operator pos:start="2061:31" pos:end="2061:31">(</operator><operator pos:start="2061:32" pos:end="2061:32">(</operator><name pos:start="2061:33" pos:end="2061:37">modrm</name> <operator pos:start="2061:39" pos:end="2061:40">&gt;&gt;</operator> <literal type="number" pos:start="2061:42" pos:end="2061:42">3</literal><operator pos:start="2061:43" pos:end="2061:43">)</operator> <operator pos:start="2061:45" pos:end="2061:45">&amp;</operator> <literal type="number" pos:start="2061:47" pos:end="2061:47">7</literal><operator pos:start="2061:48" pos:end="2061:48">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="2063:9" pos:end="2878:0"><if pos:start="2063:9" pos:end="2327:9">if <condition pos:start="2063:12" pos:end="2063:21">(<expr pos:start="2063:13" pos:end="2063:20"><name pos:start="2063:13" pos:end="2063:15">mod</name> <operator pos:start="2063:17" pos:end="2063:18">!=</operator> <literal type="number" pos:start="2063:20" pos:end="2063:20">3</literal></expr>)</condition> <block pos:start="2063:23" pos:end="2327:9">{<block_content pos:start="2067:13" pos:end="2325:13">

            <comment type="block" pos:start="2065:13" pos:end="2065:27">/* memory op */</comment>

            <expr_stmt pos:start="2067:13" pos:end="2067:61"><expr pos:start="2067:13" pos:end="2067:60"><call pos:start="2067:13" pos:end="2067:60"><name pos:start="2067:13" pos:end="2067:25">gen_lea_modrm</name><argument_list pos:start="2067:26" pos:end="2067:60">(<argument pos:start="2067:27" pos:end="2067:27"><expr pos:start="2067:27" pos:end="2067:27"><name pos:start="2067:27" pos:end="2067:27">s</name></expr></argument>, <argument pos:start="2067:30" pos:end="2067:34"><expr pos:start="2067:30" pos:end="2067:34"><name pos:start="2067:30" pos:end="2067:34">modrm</name></expr></argument>, <argument pos:start="2067:37" pos:end="2067:45"><expr pos:start="2067:37" pos:end="2067:45"><operator pos:start="2067:37" pos:end="2067:37">&amp;</operator><name pos:start="2067:38" pos:end="2067:45">reg_addr</name></expr></argument>, <argument pos:start="2067:48" pos:end="2067:59"><expr pos:start="2067:48" pos:end="2067:59"><operator pos:start="2067:48" pos:end="2067:48">&amp;</operator><name pos:start="2067:49" pos:end="2067:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="2069:13" pos:end="2325:13">switch<condition pos:start="2069:19" pos:end="2069:22">(<expr pos:start="2069:20" pos:end="2069:21"><name pos:start="2069:20" pos:end="2069:21">op</name></expr>)</condition> <block pos:start="2069:24" pos:end="2325:13">{<block_content pos:start="2071:13" pos:end="2323:32">

            <case pos:start="2071:13" pos:end="2071:31">case <expr pos:start="2071:18" pos:end="2071:30"><literal type="number" pos:start="2071:18" pos:end="2071:21">0x00</literal> <operator pos:start="2071:23" pos:end="2071:25">...</operator> <literal type="number" pos:start="2071:27" pos:end="2071:30">0x07</literal></expr>:</case> <comment type="block" pos:start="2071:33" pos:end="2071:43">/* fxxxs */</comment>

            <case pos:start="2073:13" pos:end="2073:31">case <expr pos:start="2073:18" pos:end="2073:30"><literal type="number" pos:start="2073:18" pos:end="2073:21">0x10</literal> <operator pos:start="2073:23" pos:end="2073:25">...</operator> <literal type="number" pos:start="2073:27" pos:end="2073:30">0x17</literal></expr>:</case> <comment type="block" pos:start="2073:33" pos:end="2073:44">/* fixxxl */</comment>

            <case pos:start="2075:13" pos:end="2075:31">case <expr pos:start="2075:18" pos:end="2075:30"><literal type="number" pos:start="2075:18" pos:end="2075:21">0x20</literal> <operator pos:start="2075:23" pos:end="2075:25">...</operator> <literal type="number" pos:start="2075:27" pos:end="2075:30">0x27</literal></expr>:</case> <comment type="block" pos:start="2075:33" pos:end="2075:43">/* fxxxl */</comment>

            <case pos:start="2077:13" pos:end="2077:31">case <expr pos:start="2077:18" pos:end="2077:30"><literal type="number" pos:start="2077:18" pos:end="2077:21">0x30</literal> <operator pos:start="2077:23" pos:end="2077:25">...</operator> <literal type="number" pos:start="2077:27" pos:end="2077:30">0x37</literal></expr>:</case> <comment type="block" pos:start="2077:33" pos:end="2077:43">/* fixxx */</comment>

                <block pos:start="2079:17" pos:end="2129:17">{<block_content pos:start="2081:21" pos:end="2127:21">

                    <decl_stmt pos:start="2081:21" pos:end="2081:28"><decl pos:start="2081:21" pos:end="2081:27"><type pos:start="2081:21" pos:end="2081:23"><name pos:start="2081:21" pos:end="2081:23">int</name></type> <name pos:start="2081:25" pos:end="2081:27">op1</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="2083:21" pos:end="2083:33"><expr pos:start="2083:21" pos:end="2083:32"><name pos:start="2083:21" pos:end="2083:23">op1</name> <operator pos:start="2083:25" pos:end="2083:25">=</operator> <name pos:start="2083:27" pos:end="2083:28">op</name> <operator pos:start="2083:30" pos:end="2083:30">&amp;</operator> <literal type="number" pos:start="2083:32" pos:end="2083:32">7</literal></expr>;</expr_stmt>



                    <switch pos:start="2087:21" pos:end="2115:21">switch<condition pos:start="2087:27" pos:end="2087:35">(<expr pos:start="2087:28" pos:end="2087:34"><name pos:start="2087:28" pos:end="2087:29">op</name> <operator pos:start="2087:31" pos:end="2087:32">&gt;&gt;</operator> <literal type="number" pos:start="2087:34" pos:end="2087:34">4</literal></expr>)</condition> <block pos:start="2087:37" pos:end="2115:21">{<block_content pos:start="2089:21" pos:end="2113:30">

                    <case pos:start="2089:21" pos:end="2089:27">case <expr pos:start="2089:26" pos:end="2089:26"><literal type="number" pos:start="2089:26" pos:end="2089:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2091:25" pos:end="2091:45"><expr pos:start="2091:25" pos:end="2091:44"><call pos:start="2091:25" pos:end="2091:44"><name pos:start="2091:25" pos:end="2091:42">gen_op_flds_FT0_A0</name><argument_list pos:start="2091:43" pos:end="2091:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2093:25" pos:end="2093:30">break;</break>

                    <case pos:start="2095:21" pos:end="2095:27">case <expr pos:start="2095:26" pos:end="2095:26"><literal type="number" pos:start="2095:26" pos:end="2095:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2097:25" pos:end="2097:46"><expr pos:start="2097:25" pos:end="2097:45"><call pos:start="2097:25" pos:end="2097:45"><name pos:start="2097:25" pos:end="2097:43">gen_op_fildl_FT0_A0</name><argument_list pos:start="2097:44" pos:end="2097:45">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2099:25" pos:end="2099:30">break;</break>

                    <case pos:start="2101:21" pos:end="2101:27">case <expr pos:start="2101:26" pos:end="2101:26"><literal type="number" pos:start="2101:26" pos:end="2101:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2103:25" pos:end="2103:45"><expr pos:start="2103:25" pos:end="2103:44"><call pos:start="2103:25" pos:end="2103:44"><name pos:start="2103:25" pos:end="2103:42">gen_op_fldl_FT0_A0</name><argument_list pos:start="2103:43" pos:end="2103:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2105:25" pos:end="2105:30">break;</break>

                    <case pos:start="2107:21" pos:end="2107:27">case <expr pos:start="2107:26" pos:end="2107:26"><literal type="number" pos:start="2107:26" pos:end="2107:26">3</literal></expr>:</case>

                    <default pos:start="2109:21" pos:end="2109:28">default:</default>

                        <expr_stmt pos:start="2111:25" pos:end="2111:45"><expr pos:start="2111:25" pos:end="2111:44"><call pos:start="2111:25" pos:end="2111:44"><name pos:start="2111:25" pos:end="2111:42">gen_op_fild_FT0_A0</name><argument_list pos:start="2111:43" pos:end="2111:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2113:25" pos:end="2113:30">break;</break>

                    </block_content>}</block></switch>

                    

                    <expr_stmt pos:start="2119:21" pos:end="2119:51"><expr pos:start="2119:21" pos:end="2119:50"><name pos:start="2119:21" pos:end="2119:48"><name pos:start="2119:21" pos:end="2119:43">gen_op_fp_arith_ST0_FT0</name><index pos:start="2119:44" pos:end="2119:48">[<expr pos:start="2119:45" pos:end="2119:47"><name pos:start="2119:45" pos:end="2119:47">op1</name></expr>]</index></name><operator pos:start="2119:49" pos:end="2119:49">(</operator><operator pos:start="2119:50" pos:end="2119:50">)</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="2121:21" pos:end="2127:21"><if pos:start="2121:21" pos:end="2127:21">if <condition pos:start="2121:24" pos:end="2121:33">(<expr pos:start="2121:25" pos:end="2121:32"><name pos:start="2121:25" pos:end="2121:27">op1</name> <operator pos:start="2121:29" pos:end="2121:30">==</operator> <literal type="number" pos:start="2121:32" pos:end="2121:32">3</literal></expr>)</condition> <block pos:start="2121:35" pos:end="2127:21">{<block_content pos:start="2125:25" pos:end="2125:38">

                        <comment type="block" pos:start="2123:25" pos:end="2123:45">/* fcomp needs pop */</comment>

                        <expr_stmt pos:start="2125:25" pos:end="2125:38"><expr pos:start="2125:25" pos:end="2125:37"><call pos:start="2125:25" pos:end="2125:37"><name pos:start="2125:25" pos:end="2125:35">gen_op_fpop</name><argument_list pos:start="2125:36" pos:end="2125:37">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block>

                <break pos:start="2131:17" pos:end="2131:22">break;</break>

            <case pos:start="2133:13" pos:end="2133:22">case <expr pos:start="2133:18" pos:end="2133:21"><literal type="number" pos:start="2133:18" pos:end="2133:21">0x08</literal></expr>:</case> <comment type="block" pos:start="2133:24" pos:end="2133:33">/* flds */</comment>

            <case pos:start="2135:13" pos:end="2135:22">case <expr pos:start="2135:18" pos:end="2135:21"><literal type="number" pos:start="2135:18" pos:end="2135:21">0x0a</literal></expr>:</case> <comment type="block" pos:start="2135:24" pos:end="2135:33">/* fsts */</comment>

            <case pos:start="2137:13" pos:end="2137:22">case <expr pos:start="2137:18" pos:end="2137:21"><literal type="number" pos:start="2137:18" pos:end="2137:21">0x0b</literal></expr>:</case> <comment type="block" pos:start="2137:24" pos:end="2137:34">/* fstps */</comment>

            <case pos:start="2139:13" pos:end="2139:22">case <expr pos:start="2139:18" pos:end="2139:21"><literal type="number" pos:start="2139:18" pos:end="2139:21">0x18</literal></expr>:</case> <comment type="block" pos:start="2139:24" pos:end="2139:34">/* fildl */</comment>

            <case pos:start="2141:13" pos:end="2141:22">case <expr pos:start="2141:18" pos:end="2141:21"><literal type="number" pos:start="2141:18" pos:end="2141:21">0x1a</literal></expr>:</case> <comment type="block" pos:start="2141:24" pos:end="2141:34">/* fistl */</comment>

            <case pos:start="2143:13" pos:end="2143:22">case <expr pos:start="2143:18" pos:end="2143:21"><literal type="number" pos:start="2143:18" pos:end="2143:21">0x1b</literal></expr>:</case> <comment type="block" pos:start="2143:24" pos:end="2143:35">/* fistpl */</comment>

            <case pos:start="2145:13" pos:end="2145:22">case <expr pos:start="2145:18" pos:end="2145:21"><literal type="number" pos:start="2145:18" pos:end="2145:21">0x28</literal></expr>:</case> <comment type="block" pos:start="2145:24" pos:end="2145:33">/* fldl */</comment>

            <case pos:start="2147:13" pos:end="2147:22">case <expr pos:start="2147:18" pos:end="2147:21"><literal type="number" pos:start="2147:18" pos:end="2147:21">0x2a</literal></expr>:</case> <comment type="block" pos:start="2147:24" pos:end="2147:33">/* fstl */</comment>

            <case pos:start="2149:13" pos:end="2149:22">case <expr pos:start="2149:18" pos:end="2149:21"><literal type="number" pos:start="2149:18" pos:end="2149:21">0x2b</literal></expr>:</case> <comment type="block" pos:start="2149:24" pos:end="2149:34">/* fstpl */</comment>

            <case pos:start="2151:13" pos:end="2151:22">case <expr pos:start="2151:18" pos:end="2151:21"><literal type="number" pos:start="2151:18" pos:end="2151:21">0x38</literal></expr>:</case> <comment type="block" pos:start="2151:24" pos:end="2151:34">/* filds */</comment>

            <case pos:start="2153:13" pos:end="2153:22">case <expr pos:start="2153:18" pos:end="2153:21"><literal type="number" pos:start="2153:18" pos:end="2153:21">0x3a</literal></expr>:</case> <comment type="block" pos:start="2153:24" pos:end="2153:34">/* fists */</comment>

            <case pos:start="2155:13" pos:end="2155:22">case <expr pos:start="2155:18" pos:end="2155:21"><literal type="number" pos:start="2155:18" pos:end="2155:21">0x3b</literal></expr>:</case> <comment type="block" pos:start="2155:24" pos:end="2155:35">/* fistps */</comment>

                

                <switch pos:start="2159:17" pos:end="2233:17">switch<condition pos:start="2159:23" pos:end="2159:30">(<expr pos:start="2159:24" pos:end="2159:29"><name pos:start="2159:24" pos:end="2159:25">op</name> <operator pos:start="2159:27" pos:end="2159:27">&amp;</operator> <literal type="number" pos:start="2159:29" pos:end="2159:29">7</literal></expr>)</condition> <block pos:start="2159:32" pos:end="2233:17">{<block_content pos:start="2161:17" pos:end="2231:26">

                <case pos:start="2161:17" pos:end="2161:23">case <expr pos:start="2161:22" pos:end="2161:22"><literal type="number" pos:start="2161:22" pos:end="2161:22">0</literal></expr>:</case>

                    <switch pos:start="2163:21" pos:end="2191:21">switch<condition pos:start="2163:27" pos:end="2163:35">(<expr pos:start="2163:28" pos:end="2163:34"><name pos:start="2163:28" pos:end="2163:29">op</name> <operator pos:start="2163:31" pos:end="2163:32">&gt;&gt;</operator> <literal type="number" pos:start="2163:34" pos:end="2163:34">4</literal></expr>)</condition> <block pos:start="2163:37" pos:end="2191:21">{<block_content pos:start="2165:21" pos:end="2189:30">

                    <case pos:start="2165:21" pos:end="2165:27">case <expr pos:start="2165:26" pos:end="2165:26"><literal type="number" pos:start="2165:26" pos:end="2165:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2167:25" pos:end="2167:45"><expr pos:start="2167:25" pos:end="2167:44"><call pos:start="2167:25" pos:end="2167:44"><name pos:start="2167:25" pos:end="2167:42">gen_op_flds_ST0_A0</name><argument_list pos:start="2167:43" pos:end="2167:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2169:25" pos:end="2169:30">break;</break>

                    <case pos:start="2171:21" pos:end="2171:27">case <expr pos:start="2171:26" pos:end="2171:26"><literal type="number" pos:start="2171:26" pos:end="2171:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2173:25" pos:end="2173:46"><expr pos:start="2173:25" pos:end="2173:45"><call pos:start="2173:25" pos:end="2173:45"><name pos:start="2173:25" pos:end="2173:43">gen_op_fildl_ST0_A0</name><argument_list pos:start="2173:44" pos:end="2173:45">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2175:25" pos:end="2175:30">break;</break>

                    <case pos:start="2177:21" pos:end="2177:27">case <expr pos:start="2177:26" pos:end="2177:26"><literal type="number" pos:start="2177:26" pos:end="2177:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2179:25" pos:end="2179:45"><expr pos:start="2179:25" pos:end="2179:44"><call pos:start="2179:25" pos:end="2179:44"><name pos:start="2179:25" pos:end="2179:42">gen_op_fldl_ST0_A0</name><argument_list pos:start="2179:43" pos:end="2179:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2181:25" pos:end="2181:30">break;</break>

                    <case pos:start="2183:21" pos:end="2183:27">case <expr pos:start="2183:26" pos:end="2183:26"><literal type="number" pos:start="2183:26" pos:end="2183:26">3</literal></expr>:</case>

                    <default pos:start="2185:21" pos:end="2185:28">default:</default>

                        <expr_stmt pos:start="2187:25" pos:end="2187:45"><expr pos:start="2187:25" pos:end="2187:44"><call pos:start="2187:25" pos:end="2187:44"><name pos:start="2187:25" pos:end="2187:42">gen_op_fild_ST0_A0</name><argument_list pos:start="2187:43" pos:end="2187:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2189:25" pos:end="2189:30">break;</break>

                    </block_content>}</block></switch>

                    <break pos:start="2193:21" pos:end="2193:26">break;</break>

                <default pos:start="2195:17" pos:end="2195:24">default:</default>

                    <switch pos:start="2197:21" pos:end="2225:21">switch<condition pos:start="2197:27" pos:end="2197:35">(<expr pos:start="2197:28" pos:end="2197:34"><name pos:start="2197:28" pos:end="2197:29">op</name> <operator pos:start="2197:31" pos:end="2197:32">&gt;&gt;</operator> <literal type="number" pos:start="2197:34" pos:end="2197:34">4</literal></expr>)</condition> <block pos:start="2197:37" pos:end="2225:21">{<block_content pos:start="2199:21" pos:end="2223:30">

                    <case pos:start="2199:21" pos:end="2199:27">case <expr pos:start="2199:26" pos:end="2199:26"><literal type="number" pos:start="2199:26" pos:end="2199:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2201:25" pos:end="2201:45"><expr pos:start="2201:25" pos:end="2201:44"><call pos:start="2201:25" pos:end="2201:44"><name pos:start="2201:25" pos:end="2201:42">gen_op_fsts_ST0_A0</name><argument_list pos:start="2201:43" pos:end="2201:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2203:25" pos:end="2203:30">break;</break>

                    <case pos:start="2205:21" pos:end="2205:27">case <expr pos:start="2205:26" pos:end="2205:26"><literal type="number" pos:start="2205:26" pos:end="2205:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2207:25" pos:end="2207:46"><expr pos:start="2207:25" pos:end="2207:45"><call pos:start="2207:25" pos:end="2207:45"><name pos:start="2207:25" pos:end="2207:43">gen_op_fistl_ST0_A0</name><argument_list pos:start="2207:44" pos:end="2207:45">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2209:25" pos:end="2209:30">break;</break>

                    <case pos:start="2211:21" pos:end="2211:27">case <expr pos:start="2211:26" pos:end="2211:26"><literal type="number" pos:start="2211:26" pos:end="2211:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2213:25" pos:end="2213:45"><expr pos:start="2213:25" pos:end="2213:44"><call pos:start="2213:25" pos:end="2213:44"><name pos:start="2213:25" pos:end="2213:42">gen_op_fstl_ST0_A0</name><argument_list pos:start="2213:43" pos:end="2213:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2215:25" pos:end="2215:30">break;</break>

                    <case pos:start="2217:21" pos:end="2217:27">case <expr pos:start="2217:26" pos:end="2217:26"><literal type="number" pos:start="2217:26" pos:end="2217:26">3</literal></expr>:</case>

                    <default pos:start="2219:21" pos:end="2219:28">default:</default>

                        <expr_stmt pos:start="2221:25" pos:end="2221:45"><expr pos:start="2221:25" pos:end="2221:44"><call pos:start="2221:25" pos:end="2221:44"><name pos:start="2221:25" pos:end="2221:42">gen_op_fist_ST0_A0</name><argument_list pos:start="2221:43" pos:end="2221:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2223:25" pos:end="2223:30">break;</break>

                    </block_content>}</block></switch>

                    <if_stmt pos:start="2227:21" pos:end="2229:38"><if pos:start="2227:21" pos:end="2229:38">if <condition pos:start="2227:24" pos:end="2227:38">(<expr pos:start="2227:25" pos:end="2227:37"><operator pos:start="2227:25" pos:end="2227:25">(</operator><name pos:start="2227:26" pos:end="2227:27">op</name> <operator pos:start="2227:29" pos:end="2227:29">&amp;</operator> <literal type="number" pos:start="2227:31" pos:end="2227:31">7</literal><operator pos:start="2227:32" pos:end="2227:32">)</operator> <operator pos:start="2227:34" pos:end="2227:35">==</operator> <literal type="number" pos:start="2227:37" pos:end="2227:37">3</literal></expr>)</condition><block type="pseudo" pos:start="2229:25" pos:end="2229:38"><block_content pos:start="2229:25" pos:end="2229:38">

                        <expr_stmt pos:start="2229:25" pos:end="2229:38"><expr pos:start="2229:25" pos:end="2229:37"><call pos:start="2229:25" pos:end="2229:37"><name pos:start="2229:25" pos:end="2229:35">gen_op_fpop</name><argument_list pos:start="2229:36" pos:end="2229:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break pos:start="2231:21" pos:end="2231:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="2235:17" pos:end="2235:22">break;</break>

            <case pos:start="2237:13" pos:end="2237:22">case <expr pos:start="2237:18" pos:end="2237:21"><literal type="number" pos:start="2237:18" pos:end="2237:21">0x0c</literal></expr>:</case> <comment type="block" pos:start="2237:24" pos:end="2237:39">/* fldenv mem */</comment>

                <expr_stmt pos:start="2239:17" pos:end="2239:43"><expr pos:start="2239:17" pos:end="2239:42"><call pos:start="2239:17" pos:end="2239:42"><name pos:start="2239:17" pos:end="2239:32">gen_op_fldenv_A0</name><argument_list pos:start="2239:33" pos:end="2239:42">(<argument pos:start="2239:34" pos:end="2239:41"><expr pos:start="2239:34" pos:end="2239:41"><name pos:start="2239:34" pos:end="2239:41"><name pos:start="2239:34" pos:end="2239:34">s</name><operator pos:start="2239:35" pos:end="2239:36">-&gt;</operator><name pos:start="2239:37" pos:end="2239:41">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2241:17" pos:end="2241:22">break;</break>

            <case pos:start="2243:13" pos:end="2243:22">case <expr pos:start="2243:18" pos:end="2243:21"><literal type="number" pos:start="2243:18" pos:end="2243:21">0x0d</literal></expr>:</case> <comment type="block" pos:start="2243:24" pos:end="2243:38">/* fldcw mem */</comment>

                <expr_stmt pos:start="2245:17" pos:end="2245:34"><expr pos:start="2245:17" pos:end="2245:33"><call pos:start="2245:17" pos:end="2245:33"><name pos:start="2245:17" pos:end="2245:31">gen_op_fldcw_A0</name><argument_list pos:start="2245:32" pos:end="2245:33">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2247:17" pos:end="2247:22">break;</break>

            <case pos:start="2249:13" pos:end="2249:22">case <expr pos:start="2249:18" pos:end="2249:21"><literal type="number" pos:start="2249:18" pos:end="2249:21">0x0e</literal></expr>:</case> <comment type="block" pos:start="2249:24" pos:end="2249:40">/* fnstenv mem */</comment>

                <expr_stmt pos:start="2251:17" pos:end="2251:44"><expr pos:start="2251:17" pos:end="2251:43"><call pos:start="2251:17" pos:end="2251:43"><name pos:start="2251:17" pos:end="2251:33">gen_op_fnstenv_A0</name><argument_list pos:start="2251:34" pos:end="2251:43">(<argument pos:start="2251:35" pos:end="2251:42"><expr pos:start="2251:35" pos:end="2251:42"><name pos:start="2251:35" pos:end="2251:42"><name pos:start="2251:35" pos:end="2251:35">s</name><operator pos:start="2251:36" pos:end="2251:37">-&gt;</operator><name pos:start="2251:38" pos:end="2251:42">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2253:17" pos:end="2253:22">break;</break>

            <case pos:start="2255:13" pos:end="2255:22">case <expr pos:start="2255:18" pos:end="2255:21"><literal type="number" pos:start="2255:18" pos:end="2255:21">0x0f</literal></expr>:</case> <comment type="block" pos:start="2255:24" pos:end="2255:39">/* fnstcw mem */</comment>

                <expr_stmt pos:start="2257:17" pos:end="2257:35"><expr pos:start="2257:17" pos:end="2257:34"><call pos:start="2257:17" pos:end="2257:34"><name pos:start="2257:17" pos:end="2257:32">gen_op_fnstcw_A0</name><argument_list pos:start="2257:33" pos:end="2257:34">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2259:17" pos:end="2259:22">break;</break>

            <case pos:start="2261:13" pos:end="2261:22">case <expr pos:start="2261:18" pos:end="2261:21"><literal type="number" pos:start="2261:18" pos:end="2261:21">0x1d</literal></expr>:</case> <comment type="block" pos:start="2261:24" pos:end="2261:37">/* fldt mem */</comment>

                <expr_stmt pos:start="2263:17" pos:end="2263:37"><expr pos:start="2263:17" pos:end="2263:36"><call pos:start="2263:17" pos:end="2263:36"><name pos:start="2263:17" pos:end="2263:34">gen_op_fldt_ST0_A0</name><argument_list pos:start="2263:35" pos:end="2263:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2265:17" pos:end="2265:22">break;</break>

            <case pos:start="2267:13" pos:end="2267:22">case <expr pos:start="2267:18" pos:end="2267:21"><literal type="number" pos:start="2267:18" pos:end="2267:21">0x1f</literal></expr>:</case> <comment type="block" pos:start="2267:24" pos:end="2267:38">/* fstpt mem */</comment>

                <expr_stmt pos:start="2269:17" pos:end="2269:37"><expr pos:start="2269:17" pos:end="2269:36"><call pos:start="2269:17" pos:end="2269:36"><name pos:start="2269:17" pos:end="2269:34">gen_op_fstt_ST0_A0</name><argument_list pos:start="2269:35" pos:end="2269:36">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2271:17" pos:end="2271:30"><expr pos:start="2271:17" pos:end="2271:29"><call pos:start="2271:17" pos:end="2271:29"><name pos:start="2271:17" pos:end="2271:27">gen_op_fpop</name><argument_list pos:start="2271:28" pos:end="2271:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2273:17" pos:end="2273:22">break;</break>

            <case pos:start="2275:13" pos:end="2275:22">case <expr pos:start="2275:18" pos:end="2275:21"><literal type="number" pos:start="2275:18" pos:end="2275:21">0x2c</literal></expr>:</case> <comment type="block" pos:start="2275:24" pos:end="2275:39">/* frstor mem */</comment>

                <expr_stmt pos:start="2277:17" pos:end="2277:43"><expr pos:start="2277:17" pos:end="2277:42"><call pos:start="2277:17" pos:end="2277:42"><name pos:start="2277:17" pos:end="2277:32">gen_op_frstor_A0</name><argument_list pos:start="2277:33" pos:end="2277:42">(<argument pos:start="2277:34" pos:end="2277:41"><expr pos:start="2277:34" pos:end="2277:41"><name pos:start="2277:34" pos:end="2277:41"><name pos:start="2277:34" pos:end="2277:34">s</name><operator pos:start="2277:35" pos:end="2277:36">-&gt;</operator><name pos:start="2277:37" pos:end="2277:41">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2279:17" pos:end="2279:22">break;</break>

            <case pos:start="2281:13" pos:end="2281:22">case <expr pos:start="2281:18" pos:end="2281:21"><literal type="number" pos:start="2281:18" pos:end="2281:21">0x2e</literal></expr>:</case> <comment type="block" pos:start="2281:24" pos:end="2281:39">/* fnsave mem */</comment>

                <expr_stmt pos:start="2283:17" pos:end="2283:43"><expr pos:start="2283:17" pos:end="2283:42"><call pos:start="2283:17" pos:end="2283:42"><name pos:start="2283:17" pos:end="2283:32">gen_op_fnsave_A0</name><argument_list pos:start="2283:33" pos:end="2283:42">(<argument pos:start="2283:34" pos:end="2283:41"><expr pos:start="2283:34" pos:end="2283:41"><name pos:start="2283:34" pos:end="2283:41"><name pos:start="2283:34" pos:end="2283:34">s</name><operator pos:start="2283:35" pos:end="2283:36">-&gt;</operator><name pos:start="2283:37" pos:end="2283:41">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2285:17" pos:end="2285:22">break;</break>

            <case pos:start="2287:13" pos:end="2287:22">case <expr pos:start="2287:18" pos:end="2287:21"><literal type="number" pos:start="2287:18" pos:end="2287:21">0x2f</literal></expr>:</case> <comment type="block" pos:start="2287:24" pos:end="2287:39">/* fnstsw mem */</comment>

                <expr_stmt pos:start="2289:17" pos:end="2289:35"><expr pos:start="2289:17" pos:end="2289:34"><call pos:start="2289:17" pos:end="2289:34"><name pos:start="2289:17" pos:end="2289:32">gen_op_fnstsw_A0</name><argument_list pos:start="2289:33" pos:end="2289:34">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2291:17" pos:end="2291:22">break;</break>

            <case pos:start="2293:13" pos:end="2293:22">case <expr pos:start="2293:18" pos:end="2293:21"><literal type="number" pos:start="2293:18" pos:end="2293:21">0x3c</literal></expr>:</case> <comment type="block" pos:start="2293:24" pos:end="2293:33">/* fbld */</comment>

                <expr_stmt pos:start="2295:17" pos:end="2295:37"><expr pos:start="2295:17" pos:end="2295:36"><call pos:start="2295:17" pos:end="2295:36"><name pos:start="2295:17" pos:end="2295:34">gen_op_fbld_ST0_A0</name><argument_list pos:start="2295:35" pos:end="2295:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2297:17" pos:end="2297:22">break;</break>

            <case pos:start="2299:13" pos:end="2299:22">case <expr pos:start="2299:18" pos:end="2299:21"><literal type="number" pos:start="2299:18" pos:end="2299:21">0x3e</literal></expr>:</case> <comment type="block" pos:start="2299:24" pos:end="2299:34">/* fbstp */</comment>

                <expr_stmt pos:start="2301:17" pos:end="2301:37"><expr pos:start="2301:17" pos:end="2301:36"><call pos:start="2301:17" pos:end="2301:36"><name pos:start="2301:17" pos:end="2301:34">gen_op_fbst_ST0_A0</name><argument_list pos:start="2301:35" pos:end="2301:36">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2303:17" pos:end="2303:30"><expr pos:start="2303:17" pos:end="2303:29"><call pos:start="2303:17" pos:end="2303:29"><name pos:start="2303:17" pos:end="2303:27">gen_op_fpop</name><argument_list pos:start="2303:28" pos:end="2303:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2305:17" pos:end="2305:22">break;</break>

            <case pos:start="2307:13" pos:end="2307:22">case <expr pos:start="2307:18" pos:end="2307:21"><literal type="number" pos:start="2307:18" pos:end="2307:21">0x3d</literal></expr>:</case> <comment type="block" pos:start="2307:24" pos:end="2307:35">/* fildll */</comment>

                <expr_stmt pos:start="2309:17" pos:end="2309:39"><expr pos:start="2309:17" pos:end="2309:38"><call pos:start="2309:17" pos:end="2309:38"><name pos:start="2309:17" pos:end="2309:36">gen_op_fildll_ST0_A0</name><argument_list pos:start="2309:37" pos:end="2309:38">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2311:17" pos:end="2311:22">break;</break>

            <case pos:start="2313:13" pos:end="2313:22">case <expr pos:start="2313:18" pos:end="2313:21"><literal type="number" pos:start="2313:18" pos:end="2313:21">0x3f</literal></expr>:</case> <comment type="block" pos:start="2313:24" pos:end="2313:36">/* fistpll */</comment>

                <expr_stmt pos:start="2315:17" pos:end="2315:39"><expr pos:start="2315:17" pos:end="2315:38"><call pos:start="2315:17" pos:end="2315:38"><name pos:start="2315:17" pos:end="2315:36">gen_op_fistll_ST0_A0</name><argument_list pos:start="2315:37" pos:end="2315:38">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2317:17" pos:end="2317:30"><expr pos:start="2317:17" pos:end="2317:29"><call pos:start="2317:17" pos:end="2317:29"><name pos:start="2317:17" pos:end="2317:27">gen_op_fpop</name><argument_list pos:start="2317:28" pos:end="2317:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2319:17" pos:end="2319:22">break;</break>

            <default pos:start="2321:13" pos:end="2321:20">default:</default>

                <goto pos:start="2323:17" pos:end="2323:32">goto <name pos:start="2323:22" pos:end="2323:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="2327:11" pos:end="2878:0">else <block pos:start="2327:16" pos:end="2878:0">{<block_content pos:start="2331:13" pos:end="2873:13">

            <comment type="block" pos:start="2329:13" pos:end="2329:36">/* register float ops */</comment>

            <expr_stmt pos:start="2331:13" pos:end="2331:23"><expr pos:start="2331:13" pos:end="2331:22"><name pos:start="2331:13" pos:end="2331:17">opreg</name> <operator pos:start="2331:19" pos:end="2331:19">=</operator> <name pos:start="2331:21" pos:end="2331:22">rm</name></expr>;</expr_stmt>



            <switch pos:start="2335:13" pos:end="2873:13">switch<condition pos:start="2335:19" pos:end="2335:22">(<expr pos:start="2335:20" pos:end="2335:21"><name pos:start="2335:20" pos:end="2335:21">op</name></expr>)</condition> <block pos:start="2335:24" pos:end="2873:13">{<block_content pos:start="2337:13" pos:end="2871:32">

            <case pos:start="2337:13" pos:end="2337:22">case <expr pos:start="2337:18" pos:end="2337:21"><literal type="number" pos:start="2337:18" pos:end="2337:21">0x08</literal></expr>:</case> <comment type="block" pos:start="2337:24" pos:end="2337:36">/* fld sti */</comment>

                <expr_stmt pos:start="2339:17" pos:end="2339:31"><expr pos:start="2339:17" pos:end="2339:30"><call pos:start="2339:17" pos:end="2339:30"><name pos:start="2339:17" pos:end="2339:28">gen_op_fpush</name><argument_list pos:start="2339:29" pos:end="2339:30">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2341:17" pos:end="2341:53"><expr pos:start="2341:17" pos:end="2341:52"><call pos:start="2341:17" pos:end="2341:52"><name pos:start="2341:17" pos:end="2341:35">gen_op_fmov_ST0_STN</name><argument_list pos:start="2341:36" pos:end="2341:52">(<argument pos:start="2341:37" pos:end="2341:51"><expr pos:start="2341:37" pos:end="2341:51"><operator pos:start="2341:37" pos:end="2341:37">(</operator><name pos:start="2341:38" pos:end="2341:42">opreg</name> <operator pos:start="2341:44" pos:end="2341:44">+</operator> <literal type="number" pos:start="2341:46" pos:end="2341:46">1</literal><operator pos:start="2341:47" pos:end="2341:47">)</operator> <operator pos:start="2341:49" pos:end="2341:49">&amp;</operator> <literal type="number" pos:start="2341:51" pos:end="2341:51">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2343:17" pos:end="2343:22">break;</break>

            <case pos:start="2345:13" pos:end="2345:22">case <expr pos:start="2345:18" pos:end="2345:21"><literal type="number" pos:start="2345:18" pos:end="2345:21">0x09</literal></expr>:</case> <comment type="block" pos:start="2345:24" pos:end="2345:38">/* fxchg sti */</comment>

                <expr_stmt pos:start="2347:17" pos:end="2347:44"><expr pos:start="2347:17" pos:end="2347:43"><call pos:start="2347:17" pos:end="2347:43"><name pos:start="2347:17" pos:end="2347:36">gen_op_fxchg_ST0_STN</name><argument_list pos:start="2347:37" pos:end="2347:43">(<argument pos:start="2347:38" pos:end="2347:42"><expr pos:start="2347:38" pos:end="2347:42"><name pos:start="2347:38" pos:end="2347:42">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2349:17" pos:end="2349:22">break;</break>

            <case pos:start="2351:13" pos:end="2351:22">case <expr pos:start="2351:18" pos:end="2351:21"><literal type="number" pos:start="2351:18" pos:end="2351:21">0x0a</literal></expr>:</case> <comment type="block" pos:start="2351:24" pos:end="2351:37">/* grp d9/2 */</comment>

                <switch pos:start="2353:17" pos:end="2363:17">switch<condition pos:start="2353:23" pos:end="2353:26">(<expr pos:start="2353:24" pos:end="2353:25"><name pos:start="2353:24" pos:end="2353:25">rm</name></expr>)</condition> <block pos:start="2353:28" pos:end="2363:17">{<block_content pos:start="2355:17" pos:end="2361:36">

                <case pos:start="2355:17" pos:end="2355:23">case <expr pos:start="2355:22" pos:end="2355:22"><literal type="number" pos:start="2355:22" pos:end="2355:22">0</literal></expr>:</case> <comment type="block" pos:start="2355:25" pos:end="2355:34">/* fnop */</comment>

                    <break pos:start="2357:21" pos:end="2357:26">break;</break>

                <default pos:start="2359:17" pos:end="2359:24">default:</default>

                    <goto pos:start="2361:21" pos:end="2361:36">goto <name pos:start="2361:26" pos:end="2361:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2365:17" pos:end="2365:22">break;</break>

            <case pos:start="2367:13" pos:end="2367:22">case <expr pos:start="2367:18" pos:end="2367:21"><literal type="number" pos:start="2367:18" pos:end="2367:21">0x0c</literal></expr>:</case> <comment type="block" pos:start="2367:24" pos:end="2367:37">/* grp d9/4 */</comment>

                <switch pos:start="2369:17" pos:end="2401:17">switch<condition pos:start="2369:23" pos:end="2369:26">(<expr pos:start="2369:24" pos:end="2369:25"><name pos:start="2369:24" pos:end="2369:25">rm</name></expr>)</condition> <block pos:start="2369:28" pos:end="2401:17">{<block_content pos:start="2371:17" pos:end="2399:36">

                <case pos:start="2371:17" pos:end="2371:23">case <expr pos:start="2371:22" pos:end="2371:22"><literal type="number" pos:start="2371:22" pos:end="2371:22">0</literal></expr>:</case> <comment type="block" pos:start="2371:25" pos:end="2371:34">/* fchs */</comment>

                    <expr_stmt pos:start="2373:21" pos:end="2373:38"><expr pos:start="2373:21" pos:end="2373:37"><call pos:start="2373:21" pos:end="2373:37"><name pos:start="2373:21" pos:end="2373:35">gen_op_fchs_ST0</name><argument_list pos:start="2373:36" pos:end="2373:37">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2375:21" pos:end="2375:26">break;</break>

                <case pos:start="2377:17" pos:end="2377:23">case <expr pos:start="2377:22" pos:end="2377:22"><literal type="number" pos:start="2377:22" pos:end="2377:22">1</literal></expr>:</case> <comment type="block" pos:start="2377:25" pos:end="2377:34">/* fabs */</comment>

                    <expr_stmt pos:start="2379:21" pos:end="2379:38"><expr pos:start="2379:21" pos:end="2379:37"><call pos:start="2379:21" pos:end="2379:37"><name pos:start="2379:21" pos:end="2379:35">gen_op_fabs_ST0</name><argument_list pos:start="2379:36" pos:end="2379:37">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2381:21" pos:end="2381:26">break;</break>

                <case pos:start="2383:17" pos:end="2383:23">case <expr pos:start="2383:22" pos:end="2383:22"><literal type="number" pos:start="2383:22" pos:end="2383:22">4</literal></expr>:</case> <comment type="block" pos:start="2383:25" pos:end="2383:34">/* ftst */</comment>

                    <expr_stmt pos:start="2385:21" pos:end="2385:38"><expr pos:start="2385:21" pos:end="2385:37"><call pos:start="2385:21" pos:end="2385:37"><name pos:start="2385:21" pos:end="2385:35">gen_op_fldz_FT0</name><argument_list pos:start="2385:36" pos:end="2385:37">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2387:21" pos:end="2387:42"><expr pos:start="2387:21" pos:end="2387:41"><call pos:start="2387:21" pos:end="2387:41"><name pos:start="2387:21" pos:end="2387:39">gen_op_fcom_ST0_FT0</name><argument_list pos:start="2387:40" pos:end="2387:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2389:21" pos:end="2389:26">break;</break>

                <case pos:start="2391:17" pos:end="2391:23">case <expr pos:start="2391:22" pos:end="2391:22"><literal type="number" pos:start="2391:22" pos:end="2391:22">5</literal></expr>:</case> <comment type="block" pos:start="2391:25" pos:end="2391:34">/* fxam */</comment>

                    <expr_stmt pos:start="2393:21" pos:end="2393:38"><expr pos:start="2393:21" pos:end="2393:37"><call pos:start="2393:21" pos:end="2393:37"><name pos:start="2393:21" pos:end="2393:35">gen_op_fxam_ST0</name><argument_list pos:start="2393:36" pos:end="2393:37">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2395:21" pos:end="2395:26">break;</break>

                <default pos:start="2397:17" pos:end="2397:24">default:</default>

                    <goto pos:start="2399:21" pos:end="2399:36">goto <name pos:start="2399:26" pos:end="2399:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2403:17" pos:end="2403:22">break;</break>

            <case pos:start="2405:13" pos:end="2405:22">case <expr pos:start="2405:18" pos:end="2405:21"><literal type="number" pos:start="2405:18" pos:end="2405:21">0x0d</literal></expr>:</case> <comment type="block" pos:start="2405:24" pos:end="2405:37">/* grp d9/5 */</comment>

                <block pos:start="2407:17" pos:end="2473:17">{<block_content pos:start="2409:21" pos:end="2471:21">

                    <switch pos:start="2409:21" pos:end="2471:21">switch<condition pos:start="2409:27" pos:end="2409:30">(<expr pos:start="2409:28" pos:end="2409:29"><name pos:start="2409:28" pos:end="2409:29">rm</name></expr>)</condition> <block pos:start="2409:32" pos:end="2471:21">{<block_content pos:start="2411:21" pos:end="2469:40">

                    <case pos:start="2411:21" pos:end="2411:27">case <expr pos:start="2411:26" pos:end="2411:26"><literal type="number" pos:start="2411:26" pos:end="2411:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2413:25" pos:end="2413:39"><expr pos:start="2413:25" pos:end="2413:38"><call pos:start="2413:25" pos:end="2413:38"><name pos:start="2413:25" pos:end="2413:36">gen_op_fpush</name><argument_list pos:start="2413:37" pos:end="2413:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2415:25" pos:end="2415:42"><expr pos:start="2415:25" pos:end="2415:41"><call pos:start="2415:25" pos:end="2415:41"><name pos:start="2415:25" pos:end="2415:39">gen_op_fld1_ST0</name><argument_list pos:start="2415:40" pos:end="2415:41">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2417:25" pos:end="2417:30">break;</break>

                    <case pos:start="2419:21" pos:end="2419:27">case <expr pos:start="2419:26" pos:end="2419:26"><literal type="number" pos:start="2419:26" pos:end="2419:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2421:25" pos:end="2421:39"><expr pos:start="2421:25" pos:end="2421:38"><call pos:start="2421:25" pos:end="2421:38"><name pos:start="2421:25" pos:end="2421:36">gen_op_fpush</name><argument_list pos:start="2421:37" pos:end="2421:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2423:25" pos:end="2423:44"><expr pos:start="2423:25" pos:end="2423:43"><call pos:start="2423:25" pos:end="2423:43"><name pos:start="2423:25" pos:end="2423:41">gen_op_fldl2t_ST0</name><argument_list pos:start="2423:42" pos:end="2423:43">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2425:25" pos:end="2425:30">break;</break>

                    <case pos:start="2427:21" pos:end="2427:27">case <expr pos:start="2427:26" pos:end="2427:26"><literal type="number" pos:start="2427:26" pos:end="2427:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2429:25" pos:end="2429:39"><expr pos:start="2429:25" pos:end="2429:38"><call pos:start="2429:25" pos:end="2429:38"><name pos:start="2429:25" pos:end="2429:36">gen_op_fpush</name><argument_list pos:start="2429:37" pos:end="2429:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2431:25" pos:end="2431:44"><expr pos:start="2431:25" pos:end="2431:43"><call pos:start="2431:25" pos:end="2431:43"><name pos:start="2431:25" pos:end="2431:41">gen_op_fldl2e_ST0</name><argument_list pos:start="2431:42" pos:end="2431:43">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2433:25" pos:end="2433:30">break;</break>

                    <case pos:start="2435:21" pos:end="2435:27">case <expr pos:start="2435:26" pos:end="2435:26"><literal type="number" pos:start="2435:26" pos:end="2435:26">3</literal></expr>:</case>

                        <expr_stmt pos:start="2437:25" pos:end="2437:39"><expr pos:start="2437:25" pos:end="2437:38"><call pos:start="2437:25" pos:end="2437:38"><name pos:start="2437:25" pos:end="2437:36">gen_op_fpush</name><argument_list pos:start="2437:37" pos:end="2437:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2439:25" pos:end="2439:43"><expr pos:start="2439:25" pos:end="2439:42"><call pos:start="2439:25" pos:end="2439:42"><name pos:start="2439:25" pos:end="2439:40">gen_op_fldpi_ST0</name><argument_list pos:start="2439:41" pos:end="2439:42">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2441:25" pos:end="2441:30">break;</break>

                    <case pos:start="2443:21" pos:end="2443:27">case <expr pos:start="2443:26" pos:end="2443:26"><literal type="number" pos:start="2443:26" pos:end="2443:26">4</literal></expr>:</case>

                        <expr_stmt pos:start="2445:25" pos:end="2445:39"><expr pos:start="2445:25" pos:end="2445:38"><call pos:start="2445:25" pos:end="2445:38"><name pos:start="2445:25" pos:end="2445:36">gen_op_fpush</name><argument_list pos:start="2445:37" pos:end="2445:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2447:25" pos:end="2447:44"><expr pos:start="2447:25" pos:end="2447:43"><call pos:start="2447:25" pos:end="2447:43"><name pos:start="2447:25" pos:end="2447:41">gen_op_fldlg2_ST0</name><argument_list pos:start="2447:42" pos:end="2447:43">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2449:25" pos:end="2449:30">break;</break>

                    <case pos:start="2451:21" pos:end="2451:27">case <expr pos:start="2451:26" pos:end="2451:26"><literal type="number" pos:start="2451:26" pos:end="2451:26">5</literal></expr>:</case>

                        <expr_stmt pos:start="2453:25" pos:end="2453:39"><expr pos:start="2453:25" pos:end="2453:38"><call pos:start="2453:25" pos:end="2453:38"><name pos:start="2453:25" pos:end="2453:36">gen_op_fpush</name><argument_list pos:start="2453:37" pos:end="2453:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2455:25" pos:end="2455:44"><expr pos:start="2455:25" pos:end="2455:43"><call pos:start="2455:25" pos:end="2455:43"><name pos:start="2455:25" pos:end="2455:41">gen_op_fldln2_ST0</name><argument_list pos:start="2455:42" pos:end="2455:43">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2457:25" pos:end="2457:30">break;</break>

                    <case pos:start="2459:21" pos:end="2459:27">case <expr pos:start="2459:26" pos:end="2459:26"><literal type="number" pos:start="2459:26" pos:end="2459:26">6</literal></expr>:</case>

                        <expr_stmt pos:start="2461:25" pos:end="2461:39"><expr pos:start="2461:25" pos:end="2461:38"><call pos:start="2461:25" pos:end="2461:38"><name pos:start="2461:25" pos:end="2461:36">gen_op_fpush</name><argument_list pos:start="2461:37" pos:end="2461:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2463:25" pos:end="2463:42"><expr pos:start="2463:25" pos:end="2463:41"><call pos:start="2463:25" pos:end="2463:41"><name pos:start="2463:25" pos:end="2463:39">gen_op_fldz_ST0</name><argument_list pos:start="2463:40" pos:end="2463:41">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2465:25" pos:end="2465:30">break;</break>

                    <default pos:start="2467:21" pos:end="2467:28">default:</default>

                        <goto pos:start="2469:25" pos:end="2469:40">goto <name pos:start="2469:30" pos:end="2469:39">illegal_op</name>;</goto>

                    </block_content>}</block></switch>

                </block_content>}</block>

                <break pos:start="2475:17" pos:end="2475:22">break;</break>

            <case pos:start="2477:13" pos:end="2477:22">case <expr pos:start="2477:18" pos:end="2477:21"><literal type="number" pos:start="2477:18" pos:end="2477:21">0x0e</literal></expr>:</case> <comment type="block" pos:start="2477:24" pos:end="2477:37">/* grp d9/6 */</comment>

                <switch pos:start="2479:17" pos:end="2531:17">switch<condition pos:start="2479:23" pos:end="2479:26">(<expr pos:start="2479:24" pos:end="2479:25"><name pos:start="2479:24" pos:end="2479:25">rm</name></expr>)</condition> <block pos:start="2479:28" pos:end="2531:17">{<block_content pos:start="2481:17" pos:end="2529:26">

                <case pos:start="2481:17" pos:end="2481:23">case <expr pos:start="2481:22" pos:end="2481:22"><literal type="number" pos:start="2481:22" pos:end="2481:22">0</literal></expr>:</case> <comment type="block" pos:start="2481:25" pos:end="2481:35">/* f2xm1 */</comment>

                    <expr_stmt pos:start="2483:21" pos:end="2483:35"><expr pos:start="2483:21" pos:end="2483:34"><call pos:start="2483:21" pos:end="2483:34"><name pos:start="2483:21" pos:end="2483:32">gen_op_f2xm1</name><argument_list pos:start="2483:33" pos:end="2483:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2485:21" pos:end="2485:26">break;</break>

                <case pos:start="2487:17" pos:end="2487:23">case <expr pos:start="2487:22" pos:end="2487:22"><literal type="number" pos:start="2487:22" pos:end="2487:22">1</literal></expr>:</case> <comment type="block" pos:start="2487:25" pos:end="2487:35">/* fyl2x */</comment>

                    <expr_stmt pos:start="2489:21" pos:end="2489:35"><expr pos:start="2489:21" pos:end="2489:34"><call pos:start="2489:21" pos:end="2489:34"><name pos:start="2489:21" pos:end="2489:32">gen_op_fyl2x</name><argument_list pos:start="2489:33" pos:end="2489:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2491:21" pos:end="2491:26">break;</break>

                <case pos:start="2493:17" pos:end="2493:23">case <expr pos:start="2493:22" pos:end="2493:22"><literal type="number" pos:start="2493:22" pos:end="2493:22">2</literal></expr>:</case> <comment type="block" pos:start="2493:25" pos:end="2493:35">/* fptan */</comment>

                    <expr_stmt pos:start="2495:21" pos:end="2495:35"><expr pos:start="2495:21" pos:end="2495:34"><call pos:start="2495:21" pos:end="2495:34"><name pos:start="2495:21" pos:end="2495:32">gen_op_fptan</name><argument_list pos:start="2495:33" pos:end="2495:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2497:21" pos:end="2497:26">break;</break>

                <case pos:start="2499:17" pos:end="2499:23">case <expr pos:start="2499:22" pos:end="2499:22"><literal type="number" pos:start="2499:22" pos:end="2499:22">3</literal></expr>:</case> <comment type="block" pos:start="2499:25" pos:end="2499:36">/* fpatan */</comment>

                    <expr_stmt pos:start="2501:21" pos:end="2501:36"><expr pos:start="2501:21" pos:end="2501:35"><call pos:start="2501:21" pos:end="2501:35"><name pos:start="2501:21" pos:end="2501:33">gen_op_fpatan</name><argument_list pos:start="2501:34" pos:end="2501:35">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2503:21" pos:end="2503:26">break;</break>

                <case pos:start="2505:17" pos:end="2505:23">case <expr pos:start="2505:22" pos:end="2505:22"><literal type="number" pos:start="2505:22" pos:end="2505:22">4</literal></expr>:</case> <comment type="block" pos:start="2505:25" pos:end="2505:37">/* fxtract */</comment>

                    <expr_stmt pos:start="2507:21" pos:end="2507:37"><expr pos:start="2507:21" pos:end="2507:36"><call pos:start="2507:21" pos:end="2507:36"><name pos:start="2507:21" pos:end="2507:34">gen_op_fxtract</name><argument_list pos:start="2507:35" pos:end="2507:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2509:21" pos:end="2509:26">break;</break>

                <case pos:start="2511:17" pos:end="2511:23">case <expr pos:start="2511:22" pos:end="2511:22"><literal type="number" pos:start="2511:22" pos:end="2511:22">5</literal></expr>:</case> <comment type="block" pos:start="2511:25" pos:end="2511:36">/* fprem1 */</comment>

                    <expr_stmt pos:start="2513:21" pos:end="2513:36"><expr pos:start="2513:21" pos:end="2513:35"><call pos:start="2513:21" pos:end="2513:35"><name pos:start="2513:21" pos:end="2513:33">gen_op_fprem1</name><argument_list pos:start="2513:34" pos:end="2513:35">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2515:21" pos:end="2515:26">break;</break>

                <case pos:start="2517:17" pos:end="2517:23">case <expr pos:start="2517:22" pos:end="2517:22"><literal type="number" pos:start="2517:22" pos:end="2517:22">6</literal></expr>:</case> <comment type="block" pos:start="2517:25" pos:end="2517:37">/* fdecstp */</comment>

                    <expr_stmt pos:start="2519:21" pos:end="2519:37"><expr pos:start="2519:21" pos:end="2519:36"><call pos:start="2519:21" pos:end="2519:36"><name pos:start="2519:21" pos:end="2519:34">gen_op_fdecstp</name><argument_list pos:start="2519:35" pos:end="2519:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2521:21" pos:end="2521:26">break;</break>

                <default pos:start="2523:17" pos:end="2523:24">default:</default>

                <case pos:start="2525:17" pos:end="2525:23">case <expr pos:start="2525:22" pos:end="2525:22"><literal type="number" pos:start="2525:22" pos:end="2525:22">7</literal></expr>:</case> <comment type="block" pos:start="2525:25" pos:end="2525:37">/* fincstp */</comment>

                    <expr_stmt pos:start="2527:21" pos:end="2527:37"><expr pos:start="2527:21" pos:end="2527:36"><call pos:start="2527:21" pos:end="2527:36"><name pos:start="2527:21" pos:end="2527:34">gen_op_fincstp</name><argument_list pos:start="2527:35" pos:end="2527:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2529:21" pos:end="2529:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="2533:17" pos:end="2533:22">break;</break>

            <case pos:start="2535:13" pos:end="2535:22">case <expr pos:start="2535:18" pos:end="2535:21"><literal type="number" pos:start="2535:18" pos:end="2535:21">0x0f</literal></expr>:</case> <comment type="block" pos:start="2535:24" pos:end="2535:37">/* grp d9/7 */</comment>

                <switch pos:start="2537:17" pos:end="2589:17">switch<condition pos:start="2537:23" pos:end="2537:26">(<expr pos:start="2537:24" pos:end="2537:25"><name pos:start="2537:24" pos:end="2537:25">rm</name></expr>)</condition> <block pos:start="2537:28" pos:end="2589:17">{<block_content pos:start="2539:17" pos:end="2587:26">

                <case pos:start="2539:17" pos:end="2539:23">case <expr pos:start="2539:22" pos:end="2539:22"><literal type="number" pos:start="2539:22" pos:end="2539:22">0</literal></expr>:</case> <comment type="block" pos:start="2539:25" pos:end="2539:35">/* fprem */</comment>

                    <expr_stmt pos:start="2541:21" pos:end="2541:35"><expr pos:start="2541:21" pos:end="2541:34"><call pos:start="2541:21" pos:end="2541:34"><name pos:start="2541:21" pos:end="2541:32">gen_op_fprem</name><argument_list pos:start="2541:33" pos:end="2541:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2543:21" pos:end="2543:26">break;</break>

                <case pos:start="2545:17" pos:end="2545:23">case <expr pos:start="2545:22" pos:end="2545:22"><literal type="number" pos:start="2545:22" pos:end="2545:22">1</literal></expr>:</case> <comment type="block" pos:start="2545:25" pos:end="2545:37">/* fyl2xp1 */</comment>

                    <expr_stmt pos:start="2547:21" pos:end="2547:37"><expr pos:start="2547:21" pos:end="2547:36"><call pos:start="2547:21" pos:end="2547:36"><name pos:start="2547:21" pos:end="2547:34">gen_op_fyl2xp1</name><argument_list pos:start="2547:35" pos:end="2547:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2549:21" pos:end="2549:26">break;</break>

                <case pos:start="2551:17" pos:end="2551:23">case <expr pos:start="2551:22" pos:end="2551:22"><literal type="number" pos:start="2551:22" pos:end="2551:22">2</literal></expr>:</case> <comment type="block" pos:start="2551:25" pos:end="2551:35">/* fsqrt */</comment>

                    <expr_stmt pos:start="2553:21" pos:end="2553:35"><expr pos:start="2553:21" pos:end="2553:34"><call pos:start="2553:21" pos:end="2553:34"><name pos:start="2553:21" pos:end="2553:32">gen_op_fsqrt</name><argument_list pos:start="2553:33" pos:end="2553:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2555:21" pos:end="2555:26">break;</break>

                <case pos:start="2557:17" pos:end="2557:23">case <expr pos:start="2557:22" pos:end="2557:22"><literal type="number" pos:start="2557:22" pos:end="2557:22">3</literal></expr>:</case> <comment type="block" pos:start="2557:25" pos:end="2557:37">/* fsincos */</comment>

                    <expr_stmt pos:start="2559:21" pos:end="2559:37"><expr pos:start="2559:21" pos:end="2559:36"><call pos:start="2559:21" pos:end="2559:36"><name pos:start="2559:21" pos:end="2559:34">gen_op_fsincos</name><argument_list pos:start="2559:35" pos:end="2559:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2561:21" pos:end="2561:26">break;</break>

                <case pos:start="2563:17" pos:end="2563:23">case <expr pos:start="2563:22" pos:end="2563:22"><literal type="number" pos:start="2563:22" pos:end="2563:22">5</literal></expr>:</case> <comment type="block" pos:start="2563:25" pos:end="2563:36">/* fscale */</comment>

                    <expr_stmt pos:start="2565:21" pos:end="2565:36"><expr pos:start="2565:21" pos:end="2565:35"><call pos:start="2565:21" pos:end="2565:35"><name pos:start="2565:21" pos:end="2565:33">gen_op_fscale</name><argument_list pos:start="2565:34" pos:end="2565:35">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2567:21" pos:end="2567:26">break;</break>

                <case pos:start="2569:17" pos:end="2569:23">case <expr pos:start="2569:22" pos:end="2569:22"><literal type="number" pos:start="2569:22" pos:end="2569:22">4</literal></expr>:</case> <comment type="block" pos:start="2569:25" pos:end="2569:37">/* frndint */</comment>

                    <expr_stmt pos:start="2571:21" pos:end="2571:37"><expr pos:start="2571:21" pos:end="2571:36"><call pos:start="2571:21" pos:end="2571:36"><name pos:start="2571:21" pos:end="2571:34">gen_op_frndint</name><argument_list pos:start="2571:35" pos:end="2571:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2573:21" pos:end="2573:26">break;</break>

                <case pos:start="2575:17" pos:end="2575:23">case <expr pos:start="2575:22" pos:end="2575:22"><literal type="number" pos:start="2575:22" pos:end="2575:22">6</literal></expr>:</case> <comment type="block" pos:start="2575:25" pos:end="2575:34">/* fsin */</comment>

                    <expr_stmt pos:start="2577:21" pos:end="2577:34"><expr pos:start="2577:21" pos:end="2577:33"><call pos:start="2577:21" pos:end="2577:33"><name pos:start="2577:21" pos:end="2577:31">gen_op_fsin</name><argument_list pos:start="2577:32" pos:end="2577:33">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2579:21" pos:end="2579:26">break;</break>

                <default pos:start="2581:17" pos:end="2581:24">default:</default>

                <case pos:start="2583:17" pos:end="2583:23">case <expr pos:start="2583:22" pos:end="2583:22"><literal type="number" pos:start="2583:22" pos:end="2583:22">7</literal></expr>:</case> <comment type="block" pos:start="2583:25" pos:end="2583:34">/* fcos */</comment>

                    <expr_stmt pos:start="2585:21" pos:end="2585:34"><expr pos:start="2585:21" pos:end="2585:33"><call pos:start="2585:21" pos:end="2585:33"><name pos:start="2585:21" pos:end="2585:31">gen_op_fcos</name><argument_list pos:start="2585:32" pos:end="2585:33">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2587:21" pos:end="2587:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="2591:17" pos:end="2591:22">break;</break>

            <case pos:start="2593:13" pos:end="2593:22">case <expr pos:start="2593:18" pos:end="2593:21"><literal type="number" pos:start="2593:18" pos:end="2593:21">0x00</literal></expr>:</case> <case pos:start="2593:24" pos:end="2593:33">case <expr pos:start="2593:29" pos:end="2593:32"><literal type="number" pos:start="2593:29" pos:end="2593:32">0x01</literal></expr>:</case> <case pos:start="2593:35" pos:end="2593:53">case <expr pos:start="2593:40" pos:end="2593:52"><literal type="number" pos:start="2593:40" pos:end="2593:43">0x04</literal> <operator pos:start="2593:45" pos:end="2593:47">...</operator> <literal type="number" pos:start="2593:49" pos:end="2593:52">0x07</literal></expr>:</case> <comment type="block" pos:start="2593:55" pos:end="2593:72">/* fxxx st, sti */</comment>

            <case pos:start="2595:13" pos:end="2595:22">case <expr pos:start="2595:18" pos:end="2595:21"><literal type="number" pos:start="2595:18" pos:end="2595:21">0x20</literal></expr>:</case> <case pos:start="2595:24" pos:end="2595:33">case <expr pos:start="2595:29" pos:end="2595:32"><literal type="number" pos:start="2595:29" pos:end="2595:32">0x21</literal></expr>:</case> <case pos:start="2595:35" pos:end="2595:53">case <expr pos:start="2595:40" pos:end="2595:52"><literal type="number" pos:start="2595:40" pos:end="2595:43">0x24</literal> <operator pos:start="2595:45" pos:end="2595:47">...</operator> <literal type="number" pos:start="2595:49" pos:end="2595:52">0x27</literal></expr>:</case> <comment type="block" pos:start="2595:55" pos:end="2595:72">/* fxxx sti, st */</comment>

            <case pos:start="2597:13" pos:end="2597:22">case <expr pos:start="2597:18" pos:end="2597:21"><literal type="number" pos:start="2597:18" pos:end="2597:21">0x30</literal></expr>:</case> <case pos:start="2597:24" pos:end="2597:33">case <expr pos:start="2597:29" pos:end="2597:32"><literal type="number" pos:start="2597:29" pos:end="2597:32">0x31</literal></expr>:</case> <case pos:start="2597:35" pos:end="2597:53">case <expr pos:start="2597:40" pos:end="2597:52"><literal type="number" pos:start="2597:40" pos:end="2597:43">0x34</literal> <operator pos:start="2597:45" pos:end="2597:47">...</operator> <literal type="number" pos:start="2597:49" pos:end="2597:52">0x37</literal></expr>:</case> <comment type="block" pos:start="2597:55" pos:end="2597:73">/* fxxxp sti, st */</comment>

                <block pos:start="2599:17" pos:end="2623:17">{<block_content pos:start="2601:21" pos:end="2621:21">

                    <decl_stmt pos:start="2601:21" pos:end="2601:28"><decl pos:start="2601:21" pos:end="2601:27"><type pos:start="2601:21" pos:end="2601:23"><name pos:start="2601:21" pos:end="2601:23">int</name></type> <name pos:start="2601:25" pos:end="2601:27">op1</name></decl>;</decl_stmt>

                    

                    <expr_stmt pos:start="2605:21" pos:end="2605:33"><expr pos:start="2605:21" pos:end="2605:32"><name pos:start="2605:21" pos:end="2605:23">op1</name> <operator pos:start="2605:25" pos:end="2605:25">=</operator> <name pos:start="2605:27" pos:end="2605:28">op</name> <operator pos:start="2605:30" pos:end="2605:30">&amp;</operator> <literal type="number" pos:start="2605:32" pos:end="2605:32">7</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="2607:21" pos:end="2621:21"><if pos:start="2607:21" pos:end="2615:21">if <condition pos:start="2607:24" pos:end="2607:35">(<expr pos:start="2607:25" pos:end="2607:34"><name pos:start="2607:25" pos:end="2607:26">op</name> <operator pos:start="2607:28" pos:end="2607:29">&gt;=</operator> <literal type="number" pos:start="2607:31" pos:end="2607:34">0x20</literal></expr>)</condition> <block pos:start="2607:37" pos:end="2615:21">{<block_content pos:start="2609:25" pos:end="2613:42">

                        <expr_stmt pos:start="2609:25" pos:end="2609:60"><expr pos:start="2609:25" pos:end="2609:59"><name pos:start="2609:25" pos:end="2609:52"><name pos:start="2609:25" pos:end="2609:47">gen_op_fp_arith_STN_ST0</name><index pos:start="2609:48" pos:end="2609:52">[<expr pos:start="2609:49" pos:end="2609:51"><name pos:start="2609:49" pos:end="2609:51">op1</name></expr>]</index></name><operator pos:start="2609:53" pos:end="2609:53">(</operator><name pos:start="2609:54" pos:end="2609:58">opreg</name><operator pos:start="2609:59" pos:end="2609:59">)</operator></expr>;</expr_stmt>

                        <if_stmt pos:start="2611:25" pos:end="2613:42"><if pos:start="2611:25" pos:end="2613:42">if <condition pos:start="2611:28" pos:end="2611:39">(<expr pos:start="2611:29" pos:end="2611:38"><name pos:start="2611:29" pos:end="2611:30">op</name> <operator pos:start="2611:32" pos:end="2611:33">&gt;=</operator> <literal type="number" pos:start="2611:35" pos:end="2611:38">0x30</literal></expr>)</condition><block type="pseudo" pos:start="2613:29" pos:end="2613:42"><block_content pos:start="2613:29" pos:end="2613:42">

                            <expr_stmt pos:start="2613:29" pos:end="2613:42"><expr pos:start="2613:29" pos:end="2613:41"><call pos:start="2613:29" pos:end="2613:41"><name pos:start="2613:29" pos:end="2613:39">gen_op_fpop</name><argument_list pos:start="2613:40" pos:end="2613:41">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></if> <else pos:start="2615:23" pos:end="2621:21">else <block pos:start="2615:28" pos:end="2621:21">{<block_content pos:start="2617:25" pos:end="2619:55">

                        <expr_stmt pos:start="2617:25" pos:end="2617:51"><expr pos:start="2617:25" pos:end="2617:50"><call pos:start="2617:25" pos:end="2617:50"><name pos:start="2617:25" pos:end="2617:43">gen_op_fmov_FT0_STN</name><argument_list pos:start="2617:44" pos:end="2617:50">(<argument pos:start="2617:45" pos:end="2617:49"><expr pos:start="2617:45" pos:end="2617:49"><name pos:start="2617:45" pos:end="2617:49">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2619:25" pos:end="2619:55"><expr pos:start="2619:25" pos:end="2619:54"><name pos:start="2619:25" pos:end="2619:52"><name pos:start="2619:25" pos:end="2619:47">gen_op_fp_arith_ST0_FT0</name><index pos:start="2619:48" pos:end="2619:52">[<expr pos:start="2619:49" pos:end="2619:51"><name pos:start="2619:49" pos:end="2619:51">op1</name></expr>]</index></name><operator pos:start="2619:53" pos:end="2619:53">(</operator><operator pos:start="2619:54" pos:end="2619:54">)</operator></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block>

                <break pos:start="2625:17" pos:end="2625:22">break;</break>

            <case pos:start="2627:13" pos:end="2627:22">case <expr pos:start="2627:18" pos:end="2627:21"><literal type="number" pos:start="2627:18" pos:end="2627:21">0x02</literal></expr>:</case> <comment type="block" pos:start="2627:24" pos:end="2627:33">/* fcom */</comment>

                <expr_stmt pos:start="2629:17" pos:end="2629:43"><expr pos:start="2629:17" pos:end="2629:42"><call pos:start="2629:17" pos:end="2629:42"><name pos:start="2629:17" pos:end="2629:35">gen_op_fmov_FT0_STN</name><argument_list pos:start="2629:36" pos:end="2629:42">(<argument pos:start="2629:37" pos:end="2629:41"><expr pos:start="2629:37" pos:end="2629:41"><name pos:start="2629:37" pos:end="2629:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2631:17" pos:end="2631:38"><expr pos:start="2631:17" pos:end="2631:37"><call pos:start="2631:17" pos:end="2631:37"><name pos:start="2631:17" pos:end="2631:35">gen_op_fcom_ST0_FT0</name><argument_list pos:start="2631:36" pos:end="2631:37">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2633:17" pos:end="2633:22">break;</break>

            <case pos:start="2635:13" pos:end="2635:22">case <expr pos:start="2635:18" pos:end="2635:21"><literal type="number" pos:start="2635:18" pos:end="2635:21">0x03</literal></expr>:</case> <comment type="block" pos:start="2635:24" pos:end="2635:34">/* fcomp */</comment>

                <expr_stmt pos:start="2637:17" pos:end="2637:43"><expr pos:start="2637:17" pos:end="2637:42"><call pos:start="2637:17" pos:end="2637:42"><name pos:start="2637:17" pos:end="2637:35">gen_op_fmov_FT0_STN</name><argument_list pos:start="2637:36" pos:end="2637:42">(<argument pos:start="2637:37" pos:end="2637:41"><expr pos:start="2637:37" pos:end="2637:41"><name pos:start="2637:37" pos:end="2637:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2639:17" pos:end="2639:38"><expr pos:start="2639:17" pos:end="2639:37"><call pos:start="2639:17" pos:end="2639:37"><name pos:start="2639:17" pos:end="2639:35">gen_op_fcom_ST0_FT0</name><argument_list pos:start="2639:36" pos:end="2639:37">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2641:17" pos:end="2641:30"><expr pos:start="2641:17" pos:end="2641:29"><call pos:start="2641:17" pos:end="2641:29"><name pos:start="2641:17" pos:end="2641:27">gen_op_fpop</name><argument_list pos:start="2641:28" pos:end="2641:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2643:17" pos:end="2643:22">break;</break>

            <case pos:start="2645:13" pos:end="2645:22">case <expr pos:start="2645:18" pos:end="2645:21"><literal type="number" pos:start="2645:18" pos:end="2645:21">0x15</literal></expr>:</case> <comment type="block" pos:start="2645:24" pos:end="2645:33">/* da/5 */</comment>

                <switch pos:start="2647:17" pos:end="2665:17">switch<condition pos:start="2647:23" pos:end="2647:26">(<expr pos:start="2647:24" pos:end="2647:25"><name pos:start="2647:24" pos:end="2647:25">rm</name></expr>)</condition> <block pos:start="2647:28" pos:end="2665:17">{<block_content pos:start="2649:17" pos:end="2663:36">

                <case pos:start="2649:17" pos:end="2649:23">case <expr pos:start="2649:22" pos:end="2649:22"><literal type="number" pos:start="2649:22" pos:end="2649:22">1</literal></expr>:</case> <comment type="block" pos:start="2649:25" pos:end="2649:37">/* fucompp */</comment>

                    <expr_stmt pos:start="2651:21" pos:end="2651:43"><expr pos:start="2651:21" pos:end="2651:42"><call pos:start="2651:21" pos:end="2651:42"><name pos:start="2651:21" pos:end="2651:39">gen_op_fmov_FT0_STN</name><argument_list pos:start="2651:40" pos:end="2651:42">(<argument pos:start="2651:41" pos:end="2651:41"><expr pos:start="2651:41" pos:end="2651:41"><literal type="number" pos:start="2651:41" pos:end="2651:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2653:21" pos:end="2653:43"><expr pos:start="2653:21" pos:end="2653:42"><call pos:start="2653:21" pos:end="2653:42"><name pos:start="2653:21" pos:end="2653:40">gen_op_fucom_ST0_FT0</name><argument_list pos:start="2653:41" pos:end="2653:42">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2655:21" pos:end="2655:34"><expr pos:start="2655:21" pos:end="2655:33"><call pos:start="2655:21" pos:end="2655:33"><name pos:start="2655:21" pos:end="2655:31">gen_op_fpop</name><argument_list pos:start="2655:32" pos:end="2655:33">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2657:21" pos:end="2657:34"><expr pos:start="2657:21" pos:end="2657:33"><call pos:start="2657:21" pos:end="2657:33"><name pos:start="2657:21" pos:end="2657:31">gen_op_fpop</name><argument_list pos:start="2657:32" pos:end="2657:33">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2659:21" pos:end="2659:26">break;</break>

                <default pos:start="2661:17" pos:end="2661:24">default:</default>

                    <goto pos:start="2663:21" pos:end="2663:36">goto <name pos:start="2663:26" pos:end="2663:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2667:17" pos:end="2667:22">break;</break>

            <case pos:start="2669:13" pos:end="2669:22">case <expr pos:start="2669:18" pos:end="2669:21"><literal type="number" pos:start="2669:18" pos:end="2669:21">0x1c</literal></expr>:</case>

                <switch pos:start="2671:17" pos:end="2701:17">switch<condition pos:start="2671:23" pos:end="2671:26">(<expr pos:start="2671:24" pos:end="2671:25"><name pos:start="2671:24" pos:end="2671:25">rm</name></expr>)</condition> <block pos:start="2671:28" pos:end="2701:17">{<block_content pos:start="2673:17" pos:end="2699:36">

                <case pos:start="2673:17" pos:end="2673:23">case <expr pos:start="2673:22" pos:end="2673:22"><literal type="number" pos:start="2673:22" pos:end="2673:22">0</literal></expr>:</case> <comment type="block" pos:start="2673:25" pos:end="2673:63">/* feni (287 only, just do nop here) */</comment>

                    <break pos:start="2675:21" pos:end="2675:26">break;</break>

                <case pos:start="2677:17" pos:end="2677:23">case <expr pos:start="2677:22" pos:end="2677:22"><literal type="number" pos:start="2677:22" pos:end="2677:22">1</literal></expr>:</case> <comment type="block" pos:start="2677:25" pos:end="2677:64">/* fdisi (287 only, just do nop here) */</comment>

                    <break pos:start="2679:21" pos:end="2679:26">break;</break>

                <case pos:start="2681:17" pos:end="2681:23">case <expr pos:start="2681:22" pos:end="2681:22"><literal type="number" pos:start="2681:22" pos:end="2681:22">2</literal></expr>:</case> <comment type="block" pos:start="2681:25" pos:end="2681:35">/* fclex */</comment>

                    <expr_stmt pos:start="2683:21" pos:end="2683:35"><expr pos:start="2683:21" pos:end="2683:34"><call pos:start="2683:21" pos:end="2683:34"><name pos:start="2683:21" pos:end="2683:32">gen_op_fclex</name><argument_list pos:start="2683:33" pos:end="2683:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2685:21" pos:end="2685:26">break;</break>

                <case pos:start="2687:17" pos:end="2687:23">case <expr pos:start="2687:22" pos:end="2687:22"><literal type="number" pos:start="2687:22" pos:end="2687:22">3</literal></expr>:</case> <comment type="block" pos:start="2687:25" pos:end="2687:36">/* fninit */</comment>

                    <expr_stmt pos:start="2689:21" pos:end="2689:36"><expr pos:start="2689:21" pos:end="2689:35"><call pos:start="2689:21" pos:end="2689:35"><name pos:start="2689:21" pos:end="2689:33">gen_op_fninit</name><argument_list pos:start="2689:34" pos:end="2689:35">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2691:21" pos:end="2691:26">break;</break>

                <case pos:start="2693:17" pos:end="2693:23">case <expr pos:start="2693:22" pos:end="2693:22"><literal type="number" pos:start="2693:22" pos:end="2693:22">4</literal></expr>:</case> <comment type="block" pos:start="2693:25" pos:end="2693:65">/* fsetpm (287 only, just do nop here) */</comment>

                    <break pos:start="2695:21" pos:end="2695:26">break;</break>

                <default pos:start="2697:17" pos:end="2697:24">default:</default>

                    <goto pos:start="2699:21" pos:end="2699:36">goto <name pos:start="2699:26" pos:end="2699:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2703:17" pos:end="2703:22">break;</break>

            <case pos:start="2705:13" pos:end="2705:22">case <expr pos:start="2705:18" pos:end="2705:21"><literal type="number" pos:start="2705:18" pos:end="2705:21">0x1d</literal></expr>:</case> <comment type="block" pos:start="2705:24" pos:end="2705:35">/* fucomi */</comment>

                <if_stmt pos:start="2707:17" pos:end="2709:47"><if pos:start="2707:17" pos:end="2709:47">if <condition pos:start="2707:20" pos:end="2707:46">(<expr pos:start="2707:21" pos:end="2707:45"><name pos:start="2707:21" pos:end="2707:28"><name pos:start="2707:21" pos:end="2707:21">s</name><operator pos:start="2707:22" pos:end="2707:23">-&gt;</operator><name pos:start="2707:24" pos:end="2707:28">cc_op</name></name> <operator pos:start="2707:30" pos:end="2707:31">!=</operator> <name pos:start="2707:33" pos:end="2707:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="2709:21" pos:end="2709:47"><block_content pos:start="2709:21" pos:end="2709:47">

                    <expr_stmt pos:start="2709:21" pos:end="2709:47"><expr pos:start="2709:21" pos:end="2709:46"><call pos:start="2709:21" pos:end="2709:46"><name pos:start="2709:21" pos:end="2709:36">gen_op_set_cc_op</name><argument_list pos:start="2709:37" pos:end="2709:46">(<argument pos:start="2709:38" pos:end="2709:45"><expr pos:start="2709:38" pos:end="2709:45"><name pos:start="2709:38" pos:end="2709:45"><name pos:start="2709:38" pos:end="2709:38">s</name><operator pos:start="2709:39" pos:end="2709:40">-&gt;</operator><name pos:start="2709:41" pos:end="2709:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="2711:17" pos:end="2711:43"><expr pos:start="2711:17" pos:end="2711:42"><call pos:start="2711:17" pos:end="2711:42"><name pos:start="2711:17" pos:end="2711:35">gen_op_fmov_FT0_STN</name><argument_list pos:start="2711:36" pos:end="2711:42">(<argument pos:start="2711:37" pos:end="2711:41"><expr pos:start="2711:37" pos:end="2711:41"><name pos:start="2711:37" pos:end="2711:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2713:17" pos:end="2713:40"><expr pos:start="2713:17" pos:end="2713:39"><call pos:start="2713:17" pos:end="2713:39"><name pos:start="2713:17" pos:end="2713:37">gen_op_fucomi_ST0_FT0</name><argument_list pos:start="2713:38" pos:end="2713:39">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2715:17" pos:end="2715:40"><expr pos:start="2715:17" pos:end="2715:39"><name pos:start="2715:17" pos:end="2715:24"><name pos:start="2715:17" pos:end="2715:17">s</name><operator pos:start="2715:18" pos:end="2715:19">-&gt;</operator><name pos:start="2715:20" pos:end="2715:24">cc_op</name></name> <operator pos:start="2715:26" pos:end="2715:26">=</operator> <name pos:start="2715:28" pos:end="2715:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

                <break pos:start="2717:17" pos:end="2717:22">break;</break>

            <case pos:start="2719:13" pos:end="2719:22">case <expr pos:start="2719:18" pos:end="2719:21"><literal type="number" pos:start="2719:18" pos:end="2719:21">0x1e</literal></expr>:</case> <comment type="block" pos:start="2719:24" pos:end="2719:34">/* fcomi */</comment>

                <if_stmt pos:start="2721:17" pos:end="2723:47"><if pos:start="2721:17" pos:end="2723:47">if <condition pos:start="2721:20" pos:end="2721:46">(<expr pos:start="2721:21" pos:end="2721:45"><name pos:start="2721:21" pos:end="2721:28"><name pos:start="2721:21" pos:end="2721:21">s</name><operator pos:start="2721:22" pos:end="2721:23">-&gt;</operator><name pos:start="2721:24" pos:end="2721:28">cc_op</name></name> <operator pos:start="2721:30" pos:end="2721:31">!=</operator> <name pos:start="2721:33" pos:end="2721:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="2723:21" pos:end="2723:47"><block_content pos:start="2723:21" pos:end="2723:47">

                    <expr_stmt pos:start="2723:21" pos:end="2723:47"><expr pos:start="2723:21" pos:end="2723:46"><call pos:start="2723:21" pos:end="2723:46"><name pos:start="2723:21" pos:end="2723:36">gen_op_set_cc_op</name><argument_list pos:start="2723:37" pos:end="2723:46">(<argument pos:start="2723:38" pos:end="2723:45"><expr pos:start="2723:38" pos:end="2723:45"><name pos:start="2723:38" pos:end="2723:45"><name pos:start="2723:38" pos:end="2723:38">s</name><operator pos:start="2723:39" pos:end="2723:40">-&gt;</operator><name pos:start="2723:41" pos:end="2723:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="2725:17" pos:end="2725:43"><expr pos:start="2725:17" pos:end="2725:42"><call pos:start="2725:17" pos:end="2725:42"><name pos:start="2725:17" pos:end="2725:35">gen_op_fmov_FT0_STN</name><argument_list pos:start="2725:36" pos:end="2725:42">(<argument pos:start="2725:37" pos:end="2725:41"><expr pos:start="2725:37" pos:end="2725:41"><name pos:start="2725:37" pos:end="2725:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2727:17" pos:end="2727:39"><expr pos:start="2727:17" pos:end="2727:38"><call pos:start="2727:17" pos:end="2727:38"><name pos:start="2727:17" pos:end="2727:36">gen_op_fcomi_ST0_FT0</name><argument_list pos:start="2727:37" pos:end="2727:38">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2729:17" pos:end="2729:40"><expr pos:start="2729:17" pos:end="2729:39"><name pos:start="2729:17" pos:end="2729:24"><name pos:start="2729:17" pos:end="2729:17">s</name><operator pos:start="2729:18" pos:end="2729:19">-&gt;</operator><name pos:start="2729:20" pos:end="2729:24">cc_op</name></name> <operator pos:start="2729:26" pos:end="2729:26">=</operator> <name pos:start="2729:28" pos:end="2729:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

                <break pos:start="2731:17" pos:end="2731:22">break;</break>

            <case pos:start="2733:13" pos:end="2733:22">case <expr pos:start="2733:18" pos:end="2733:21"><literal type="number" pos:start="2733:18" pos:end="2733:21">0x2a</literal></expr>:</case> <comment type="block" pos:start="2733:24" pos:end="2733:36">/* fst sti */</comment>

                <expr_stmt pos:start="2735:17" pos:end="2735:43"><expr pos:start="2735:17" pos:end="2735:42"><call pos:start="2735:17" pos:end="2735:42"><name pos:start="2735:17" pos:end="2735:35">gen_op_fmov_STN_ST0</name><argument_list pos:start="2735:36" pos:end="2735:42">(<argument pos:start="2735:37" pos:end="2735:41"><expr pos:start="2735:37" pos:end="2735:41"><name pos:start="2735:37" pos:end="2735:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2737:17" pos:end="2737:22">break;</break>

            <case pos:start="2739:13" pos:end="2739:22">case <expr pos:start="2739:18" pos:end="2739:21"><literal type="number" pos:start="2739:18" pos:end="2739:21">0x2b</literal></expr>:</case> <comment type="block" pos:start="2739:24" pos:end="2739:37">/* fstp sti */</comment>

                <expr_stmt pos:start="2741:17" pos:end="2741:43"><expr pos:start="2741:17" pos:end="2741:42"><call pos:start="2741:17" pos:end="2741:42"><name pos:start="2741:17" pos:end="2741:35">gen_op_fmov_STN_ST0</name><argument_list pos:start="2741:36" pos:end="2741:42">(<argument pos:start="2741:37" pos:end="2741:41"><expr pos:start="2741:37" pos:end="2741:41"><name pos:start="2741:37" pos:end="2741:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2743:17" pos:end="2743:30"><expr pos:start="2743:17" pos:end="2743:29"><call pos:start="2743:17" pos:end="2743:29"><name pos:start="2743:17" pos:end="2743:27">gen_op_fpop</name><argument_list pos:start="2743:28" pos:end="2743:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2745:17" pos:end="2745:22">break;</break>

            <case pos:start="2747:13" pos:end="2747:22">case <expr pos:start="2747:18" pos:end="2747:21"><literal type="number" pos:start="2747:18" pos:end="2747:21">0x2c</literal></expr>:</case> <comment type="block" pos:start="2747:24" pos:end="2747:40">/* fucom st(i) */</comment>

                <expr_stmt pos:start="2749:17" pos:end="2749:43"><expr pos:start="2749:17" pos:end="2749:42"><call pos:start="2749:17" pos:end="2749:42"><name pos:start="2749:17" pos:end="2749:35">gen_op_fmov_FT0_STN</name><argument_list pos:start="2749:36" pos:end="2749:42">(<argument pos:start="2749:37" pos:end="2749:41"><expr pos:start="2749:37" pos:end="2749:41"><name pos:start="2749:37" pos:end="2749:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2751:17" pos:end="2751:39"><expr pos:start="2751:17" pos:end="2751:38"><call pos:start="2751:17" pos:end="2751:38"><name pos:start="2751:17" pos:end="2751:36">gen_op_fucom_ST0_FT0</name><argument_list pos:start="2751:37" pos:end="2751:38">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2753:17" pos:end="2753:22">break;</break>

            <case pos:start="2755:13" pos:end="2755:22">case <expr pos:start="2755:18" pos:end="2755:21"><literal type="number" pos:start="2755:18" pos:end="2755:21">0x2d</literal></expr>:</case> <comment type="block" pos:start="2755:24" pos:end="2755:41">/* fucomp st(i) */</comment>

                <expr_stmt pos:start="2757:17" pos:end="2757:43"><expr pos:start="2757:17" pos:end="2757:42"><call pos:start="2757:17" pos:end="2757:42"><name pos:start="2757:17" pos:end="2757:35">gen_op_fmov_FT0_STN</name><argument_list pos:start="2757:36" pos:end="2757:42">(<argument pos:start="2757:37" pos:end="2757:41"><expr pos:start="2757:37" pos:end="2757:41"><name pos:start="2757:37" pos:end="2757:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2759:17" pos:end="2759:39"><expr pos:start="2759:17" pos:end="2759:38"><call pos:start="2759:17" pos:end="2759:38"><name pos:start="2759:17" pos:end="2759:36">gen_op_fucom_ST0_FT0</name><argument_list pos:start="2759:37" pos:end="2759:38">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2761:17" pos:end="2761:30"><expr pos:start="2761:17" pos:end="2761:29"><call pos:start="2761:17" pos:end="2761:29"><name pos:start="2761:17" pos:end="2761:27">gen_op_fpop</name><argument_list pos:start="2761:28" pos:end="2761:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2763:17" pos:end="2763:22">break;</break>

            <case pos:start="2765:13" pos:end="2765:22">case <expr pos:start="2765:18" pos:end="2765:21"><literal type="number" pos:start="2765:18" pos:end="2765:21">0x33</literal></expr>:</case> <comment type="block" pos:start="2765:24" pos:end="2765:33">/* de/3 */</comment>

                <switch pos:start="2767:17" pos:end="2785:17">switch<condition pos:start="2767:23" pos:end="2767:26">(<expr pos:start="2767:24" pos:end="2767:25"><name pos:start="2767:24" pos:end="2767:25">rm</name></expr>)</condition> <block pos:start="2767:28" pos:end="2785:17">{<block_content pos:start="2769:17" pos:end="2783:36">

                <case pos:start="2769:17" pos:end="2769:23">case <expr pos:start="2769:22" pos:end="2769:22"><literal type="number" pos:start="2769:22" pos:end="2769:22">1</literal></expr>:</case> <comment type="block" pos:start="2769:25" pos:end="2769:36">/* fcompp */</comment>

                    <expr_stmt pos:start="2771:21" pos:end="2771:43"><expr pos:start="2771:21" pos:end="2771:42"><call pos:start="2771:21" pos:end="2771:42"><name pos:start="2771:21" pos:end="2771:39">gen_op_fmov_FT0_STN</name><argument_list pos:start="2771:40" pos:end="2771:42">(<argument pos:start="2771:41" pos:end="2771:41"><expr pos:start="2771:41" pos:end="2771:41"><literal type="number" pos:start="2771:41" pos:end="2771:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2773:21" pos:end="2773:42"><expr pos:start="2773:21" pos:end="2773:41"><call pos:start="2773:21" pos:end="2773:41"><name pos:start="2773:21" pos:end="2773:39">gen_op_fcom_ST0_FT0</name><argument_list pos:start="2773:40" pos:end="2773:41">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2775:21" pos:end="2775:34"><expr pos:start="2775:21" pos:end="2775:33"><call pos:start="2775:21" pos:end="2775:33"><name pos:start="2775:21" pos:end="2775:31">gen_op_fpop</name><argument_list pos:start="2775:32" pos:end="2775:33">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2777:21" pos:end="2777:34"><expr pos:start="2777:21" pos:end="2777:33"><call pos:start="2777:21" pos:end="2777:33"><name pos:start="2777:21" pos:end="2777:31">gen_op_fpop</name><argument_list pos:start="2777:32" pos:end="2777:33">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2779:21" pos:end="2779:26">break;</break>

                <default pos:start="2781:17" pos:end="2781:24">default:</default>

                    <goto pos:start="2783:21" pos:end="2783:36">goto <name pos:start="2783:26" pos:end="2783:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2787:17" pos:end="2787:22">break;</break>

            <case pos:start="2789:13" pos:end="2789:22">case <expr pos:start="2789:18" pos:end="2789:21"><literal type="number" pos:start="2789:18" pos:end="2789:21">0x3c</literal></expr>:</case> <comment type="block" pos:start="2789:24" pos:end="2789:33">/* df/4 */</comment>

                <switch pos:start="2791:17" pos:end="2803:17">switch<condition pos:start="2791:23" pos:end="2791:26">(<expr pos:start="2791:24" pos:end="2791:25"><name pos:start="2791:24" pos:end="2791:25">rm</name></expr>)</condition> <block pos:start="2791:28" pos:end="2803:17">{<block_content pos:start="2793:17" pos:end="2801:36">

                <case pos:start="2793:17" pos:end="2793:23">case <expr pos:start="2793:22" pos:end="2793:22"><literal type="number" pos:start="2793:22" pos:end="2793:22">0</literal></expr>:</case>

                    <expr_stmt pos:start="2795:21" pos:end="2795:40"><expr pos:start="2795:21" pos:end="2795:39"><call pos:start="2795:21" pos:end="2795:39"><name pos:start="2795:21" pos:end="2795:37">gen_op_fnstsw_EAX</name><argument_list pos:start="2795:38" pos:end="2795:39">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2797:21" pos:end="2797:26">break;</break>

                <default pos:start="2799:17" pos:end="2799:24">default:</default>

                    <goto pos:start="2801:21" pos:end="2801:36">goto <name pos:start="2801:26" pos:end="2801:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2805:17" pos:end="2805:22">break;</break>

            <case pos:start="2807:13" pos:end="2807:22">case <expr pos:start="2807:18" pos:end="2807:21"><literal type="number" pos:start="2807:18" pos:end="2807:21">0x3d</literal></expr>:</case> <comment type="block" pos:start="2807:24" pos:end="2807:36">/* fucomip */</comment>

                <if_stmt pos:start="2809:17" pos:end="2811:47"><if pos:start="2809:17" pos:end="2811:47">if <condition pos:start="2809:20" pos:end="2809:46">(<expr pos:start="2809:21" pos:end="2809:45"><name pos:start="2809:21" pos:end="2809:28"><name pos:start="2809:21" pos:end="2809:21">s</name><operator pos:start="2809:22" pos:end="2809:23">-&gt;</operator><name pos:start="2809:24" pos:end="2809:28">cc_op</name></name> <operator pos:start="2809:30" pos:end="2809:31">!=</operator> <name pos:start="2809:33" pos:end="2809:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="2811:21" pos:end="2811:47"><block_content pos:start="2811:21" pos:end="2811:47">

                    <expr_stmt pos:start="2811:21" pos:end="2811:47"><expr pos:start="2811:21" pos:end="2811:46"><call pos:start="2811:21" pos:end="2811:46"><name pos:start="2811:21" pos:end="2811:36">gen_op_set_cc_op</name><argument_list pos:start="2811:37" pos:end="2811:46">(<argument pos:start="2811:38" pos:end="2811:45"><expr pos:start="2811:38" pos:end="2811:45"><name pos:start="2811:38" pos:end="2811:45"><name pos:start="2811:38" pos:end="2811:38">s</name><operator pos:start="2811:39" pos:end="2811:40">-&gt;</operator><name pos:start="2811:41" pos:end="2811:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="2813:17" pos:end="2813:43"><expr pos:start="2813:17" pos:end="2813:42"><call pos:start="2813:17" pos:end="2813:42"><name pos:start="2813:17" pos:end="2813:35">gen_op_fmov_FT0_STN</name><argument_list pos:start="2813:36" pos:end="2813:42">(<argument pos:start="2813:37" pos:end="2813:41"><expr pos:start="2813:37" pos:end="2813:41"><name pos:start="2813:37" pos:end="2813:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2815:17" pos:end="2815:40"><expr pos:start="2815:17" pos:end="2815:39"><call pos:start="2815:17" pos:end="2815:39"><name pos:start="2815:17" pos:end="2815:37">gen_op_fucomi_ST0_FT0</name><argument_list pos:start="2815:38" pos:end="2815:39">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2817:17" pos:end="2817:30"><expr pos:start="2817:17" pos:end="2817:29"><call pos:start="2817:17" pos:end="2817:29"><name pos:start="2817:17" pos:end="2817:27">gen_op_fpop</name><argument_list pos:start="2817:28" pos:end="2817:29">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2819:17" pos:end="2819:40"><expr pos:start="2819:17" pos:end="2819:39"><name pos:start="2819:17" pos:end="2819:24"><name pos:start="2819:17" pos:end="2819:17">s</name><operator pos:start="2819:18" pos:end="2819:19">-&gt;</operator><name pos:start="2819:20" pos:end="2819:24">cc_op</name></name> <operator pos:start="2819:26" pos:end="2819:26">=</operator> <name pos:start="2819:28" pos:end="2819:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

                <break pos:start="2821:17" pos:end="2821:22">break;</break>

            <case pos:start="2823:13" pos:end="2823:22">case <expr pos:start="2823:18" pos:end="2823:21"><literal type="number" pos:start="2823:18" pos:end="2823:21">0x3e</literal></expr>:</case> <comment type="block" pos:start="2823:24" pos:end="2823:35">/* fcomip */</comment>

                <if_stmt pos:start="2825:17" pos:end="2827:47"><if pos:start="2825:17" pos:end="2827:47">if <condition pos:start="2825:20" pos:end="2825:46">(<expr pos:start="2825:21" pos:end="2825:45"><name pos:start="2825:21" pos:end="2825:28"><name pos:start="2825:21" pos:end="2825:21">s</name><operator pos:start="2825:22" pos:end="2825:23">-&gt;</operator><name pos:start="2825:24" pos:end="2825:28">cc_op</name></name> <operator pos:start="2825:30" pos:end="2825:31">!=</operator> <name pos:start="2825:33" pos:end="2825:45">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="2827:21" pos:end="2827:47"><block_content pos:start="2827:21" pos:end="2827:47">

                    <expr_stmt pos:start="2827:21" pos:end="2827:47"><expr pos:start="2827:21" pos:end="2827:46"><call pos:start="2827:21" pos:end="2827:46"><name pos:start="2827:21" pos:end="2827:36">gen_op_set_cc_op</name><argument_list pos:start="2827:37" pos:end="2827:46">(<argument pos:start="2827:38" pos:end="2827:45"><expr pos:start="2827:38" pos:end="2827:45"><name pos:start="2827:38" pos:end="2827:45"><name pos:start="2827:38" pos:end="2827:38">s</name><operator pos:start="2827:39" pos:end="2827:40">-&gt;</operator><name pos:start="2827:41" pos:end="2827:45">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="2829:17" pos:end="2829:43"><expr pos:start="2829:17" pos:end="2829:42"><call pos:start="2829:17" pos:end="2829:42"><name pos:start="2829:17" pos:end="2829:35">gen_op_fmov_FT0_STN</name><argument_list pos:start="2829:36" pos:end="2829:42">(<argument pos:start="2829:37" pos:end="2829:41"><expr pos:start="2829:37" pos:end="2829:41"><name pos:start="2829:37" pos:end="2829:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2831:17" pos:end="2831:39"><expr pos:start="2831:17" pos:end="2831:38"><call pos:start="2831:17" pos:end="2831:38"><name pos:start="2831:17" pos:end="2831:36">gen_op_fcomi_ST0_FT0</name><argument_list pos:start="2831:37" pos:end="2831:38">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2833:17" pos:end="2833:30"><expr pos:start="2833:17" pos:end="2833:29"><call pos:start="2833:17" pos:end="2833:29"><name pos:start="2833:17" pos:end="2833:27">gen_op_fpop</name><argument_list pos:start="2833:28" pos:end="2833:29">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2835:17" pos:end="2835:40"><expr pos:start="2835:17" pos:end="2835:39"><name pos:start="2835:17" pos:end="2835:24"><name pos:start="2835:17" pos:end="2835:17">s</name><operator pos:start="2835:18" pos:end="2835:19">-&gt;</operator><name pos:start="2835:20" pos:end="2835:24">cc_op</name></name> <operator pos:start="2835:26" pos:end="2835:26">=</operator> <name pos:start="2835:28" pos:end="2835:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

                <break pos:start="2837:17" pos:end="2837:22">break;</break>

            <case pos:start="2839:13" pos:end="2839:31">case <expr pos:start="2839:18" pos:end="2839:30"><literal type="number" pos:start="2839:18" pos:end="2839:21">0x10</literal> <operator pos:start="2839:23" pos:end="2839:25">...</operator> <literal type="number" pos:start="2839:27" pos:end="2839:30">0x13</literal></expr>:</case> <comment type="block" pos:start="2839:33" pos:end="2839:45">/* fcmovxx */</comment>

            <case pos:start="2841:13" pos:end="2841:31">case <expr pos:start="2841:18" pos:end="2841:30"><literal type="number" pos:start="2841:18" pos:end="2841:21">0x18</literal> <operator pos:start="2841:23" pos:end="2841:25">...</operator> <literal type="number" pos:start="2841:27" pos:end="2841:30">0x1b</literal></expr>:</case>

                <block pos:start="2843:17" pos:end="2865:17">{<block_content pos:start="2845:21" pos:end="2863:51">

                    <decl_stmt pos:start="2845:21" pos:end="2845:28"><decl pos:start="2845:21" pos:end="2845:27"><type pos:start="2845:21" pos:end="2845:23"><name pos:start="2845:21" pos:end="2845:23">int</name></type> <name pos:start="2845:25" pos:end="2845:27">op1</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="2847:21" pos:end="2857:22"><decl pos:start="2847:21" pos:end="2857:21"><type pos:start="2847:21" pos:end="2847:40"><specifier pos:start="2847:21" pos:end="2847:25">const</specifier> <specifier pos:start="2847:27" pos:end="2847:32">static</specifier> <name pos:start="2847:34" pos:end="2847:40">uint8_t</name></type> <name pos:start="2847:42" pos:end="2847:52"><name pos:start="2847:42" pos:end="2847:49">fcmov_cc</name><index pos:start="2847:50" pos:end="2847:52">[<expr pos:start="2847:51" pos:end="2847:51"><literal type="number" pos:start="2847:51" pos:end="2847:51">8</literal></expr>]</index></name> <init pos:start="2847:54" pos:end="2857:21">= <expr pos:start="2847:56" pos:end="2857:21"><block pos:start="2847:56" pos:end="2857:21">{

                        <expr pos:start="2849:25" pos:end="2849:36"><operator pos:start="2849:25" pos:end="2849:25">(</operator><name pos:start="2849:26" pos:end="2849:30">JCC_B</name> <operator pos:start="2849:32" pos:end="2849:33">&lt;&lt;</operator> <literal type="number" pos:start="2849:35" pos:end="2849:35">1</literal><operator pos:start="2849:36" pos:end="2849:36">)</operator></expr>,

                        <expr pos:start="2851:25" pos:end="2851:36"><operator pos:start="2851:25" pos:end="2851:25">(</operator><name pos:start="2851:26" pos:end="2851:30">JCC_Z</name> <operator pos:start="2851:32" pos:end="2851:33">&lt;&lt;</operator> <literal type="number" pos:start="2851:35" pos:end="2851:35">1</literal><operator pos:start="2851:36" pos:end="2851:36">)</operator></expr>,

                        <expr pos:start="2853:25" pos:end="2853:37"><operator pos:start="2853:25" pos:end="2853:25">(</operator><name pos:start="2853:26" pos:end="2853:31">JCC_BE</name> <operator pos:start="2853:33" pos:end="2853:34">&lt;&lt;</operator> <literal type="number" pos:start="2853:36" pos:end="2853:36">1</literal><operator pos:start="2853:37" pos:end="2853:37">)</operator></expr>,

                        <expr pos:start="2855:25" pos:end="2855:36"><operator pos:start="2855:25" pos:end="2855:25">(</operator><name pos:start="2855:26" pos:end="2855:30">JCC_P</name> <operator pos:start="2855:32" pos:end="2855:33">&lt;&lt;</operator> <literal type="number" pos:start="2855:35" pos:end="2855:35">1</literal><operator pos:start="2855:36" pos:end="2855:36">)</operator></expr>,

                    }</block></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="2859:21" pos:end="2859:61"><expr pos:start="2859:21" pos:end="2859:60"><name pos:start="2859:21" pos:end="2859:23">op1</name> <operator pos:start="2859:25" pos:end="2859:25">=</operator> <name pos:start="2859:27" pos:end="2859:42"><name pos:start="2859:27" pos:end="2859:34">fcmov_cc</name><index pos:start="2859:35" pos:end="2859:42">[<expr pos:start="2859:36" pos:end="2859:41"><name pos:start="2859:36" pos:end="2859:37">op</name> <operator pos:start="2859:39" pos:end="2859:39">&amp;</operator> <literal type="number" pos:start="2859:41" pos:end="2859:41">3</literal></expr>]</index></name> <operator pos:start="2859:44" pos:end="2859:44">|</operator> <operator pos:start="2859:46" pos:end="2859:46">(</operator><operator pos:start="2859:47" pos:end="2859:47">(</operator><name pos:start="2859:48" pos:end="2859:49">op</name> <operator pos:start="2859:51" pos:end="2859:52">&gt;&gt;</operator> <literal type="number" pos:start="2859:54" pos:end="2859:54">3</literal><operator pos:start="2859:55" pos:end="2859:55">)</operator> <operator pos:start="2859:57" pos:end="2859:57">&amp;</operator> <literal type="number" pos:start="2859:59" pos:end="2859:59">1</literal><operator pos:start="2859:60" pos:end="2859:60">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="2861:21" pos:end="2861:38"><expr pos:start="2861:21" pos:end="2861:37"><call pos:start="2861:21" pos:end="2861:37"><name pos:start="2861:21" pos:end="2861:29">gen_setcc</name><argument_list pos:start="2861:30" pos:end="2861:37">(<argument pos:start="2861:31" pos:end="2861:31"><expr pos:start="2861:31" pos:end="2861:31"><name pos:start="2861:31" pos:end="2861:31">s</name></expr></argument>, <argument pos:start="2861:34" pos:end="2861:36"><expr pos:start="2861:34" pos:end="2861:36"><name pos:start="2861:34" pos:end="2861:36">op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2863:21" pos:end="2863:51"><expr pos:start="2863:21" pos:end="2863:50"><call pos:start="2863:21" pos:end="2863:50"><name pos:start="2863:21" pos:end="2863:43">gen_op_fcmov_ST0_STN_T0</name><argument_list pos:start="2863:44" pos:end="2863:50">(<argument pos:start="2863:45" pos:end="2863:49"><expr pos:start="2863:45" pos:end="2863:49"><name pos:start="2863:45" pos:end="2863:49">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="2867:17" pos:end="2867:22">break;</break>

            <default pos:start="2869:13" pos:end="2869:20">default:</default>

                <goto pos:start="2871:17" pos:end="2871:32">goto <name pos:start="2871:22" pos:end="2871:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="2877:1" pos:end="2877:20">#<cpp:directive pos:start="2877:2" pos:end="2877:6">ifdef</cpp:directive> <name pos:start="2877:8" pos:end="2877:20">USE_CODE_COPY</name></cpp:ifdef>

        <expr_stmt pos:start="2879:9" pos:end="2882:0"><expr pos:start="2879:9" pos:end="2879:38"><name pos:start="2879:9" pos:end="2879:21"><name pos:start="2879:9" pos:end="2879:9">s</name><operator pos:start="2879:10" pos:end="2879:11">-&gt;</operator><name pos:start="2879:12" pos:end="2879:13">tb</name><operator pos:start="2879:14" pos:end="2879:15">-&gt;</operator><name pos:start="2879:16" pos:end="2879:21">cflags</name></name> <operator pos:start="2879:23" pos:end="2879:24">|=</operator> <name pos:start="2879:26" pos:end="2879:38">CF_TB_FP_USED</name></expr>;</expr_stmt>

<cpp:endif pos:start="2881:1" pos:end="2881:6">#<cpp:directive pos:start="2881:2" pos:end="2881:6">endif</cpp:directive></cpp:endif>

        <break pos:start="2883:9" pos:end="2883:14">break;</break>

        <comment type="block" format="doxygen" pos:start="2885:9" pos:end="2885:34">/************************/</comment>

        <comment type="block" pos:start="2887:9" pos:end="2887:24">/* string ops */</comment>



    <case pos:start="2891:5" pos:end="2891:14">case <expr pos:start="2891:10" pos:end="2891:13"><literal type="number" pos:start="2891:10" pos:end="2891:13">0xa4</literal></expr>:</case> <comment type="block" pos:start="2891:16" pos:end="2891:26">/* movsS */</comment>

    <case pos:start="2893:5" pos:end="2893:14">case <expr pos:start="2893:10" pos:end="2893:13"><literal type="number" pos:start="2893:10" pos:end="2893:13">0xa5</literal></expr>:</case>

        <if_stmt pos:start="2895:9" pos:end="2901:43"><if pos:start="2895:9" pos:end="2897:25">if <condition pos:start="2895:12" pos:end="2895:25">(<expr pos:start="2895:13" pos:end="2895:24"><operator pos:start="2895:13" pos:end="2895:13">(</operator><name pos:start="2895:14" pos:end="2895:14">b</name> <operator pos:start="2895:16" pos:end="2895:16">&amp;</operator> <literal type="number" pos:start="2895:18" pos:end="2895:18">1</literal><operator pos:start="2895:19" pos:end="2895:19">)</operator> <operator pos:start="2895:21" pos:end="2895:22">==</operator> <literal type="number" pos:start="2895:24" pos:end="2895:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2897:13" pos:end="2897:25"><block_content pos:start="2897:13" pos:end="2897:25">

            <expr_stmt pos:start="2897:13" pos:end="2897:25"><expr pos:start="2897:13" pos:end="2897:24"><name pos:start="2897:13" pos:end="2897:14">ot</name> <operator pos:start="2897:16" pos:end="2897:16">=</operator> <name pos:start="2897:18" pos:end="2897:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2899:9" pos:end="2901:43">else<block type="pseudo" pos:start="2901:13" pos:end="2901:43"><block_content pos:start="2901:13" pos:end="2901:43">

            <expr_stmt pos:start="2901:13" pos:end="2901:43"><expr pos:start="2901:13" pos:end="2901:42"><name pos:start="2901:13" pos:end="2901:14">ot</name> <operator pos:start="2901:16" pos:end="2901:16">=</operator> <ternary pos:start="2901:18" pos:end="2901:42"><condition pos:start="2901:18" pos:end="2901:24"><expr pos:start="2901:18" pos:end="2901:22"><name pos:start="2901:18" pos:end="2901:22">dflag</name></expr> ?</condition><then pos:start="2901:26" pos:end="2901:32"> <expr pos:start="2901:26" pos:end="2901:32"><name pos:start="2901:26" pos:end="2901:32">OT_LONG</name></expr> </then><else pos:start="2901:34" pos:end="2901:42">: <expr pos:start="2901:36" pos:end="2901:42"><name pos:start="2901:36" pos:end="2901:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="2905:9" pos:end="2913:9"><if pos:start="2905:9" pos:end="2909:9">if <condition pos:start="2905:12" pos:end="2905:52">(<expr pos:start="2905:13" pos:end="2905:51"><name pos:start="2905:13" pos:end="2905:20">prefixes</name> <operator pos:start="2905:22" pos:end="2905:22">&amp;</operator> <operator pos:start="2905:24" pos:end="2905:24">(</operator><name pos:start="2905:25" pos:end="2905:35">PREFIX_REPZ</name> <operator pos:start="2905:37" pos:end="2905:37">|</operator> <name pos:start="2905:39" pos:end="2905:50">PREFIX_REPNZ</name><operator pos:start="2905:51" pos:end="2905:51">)</operator></expr>)</condition> <block pos:start="2905:54" pos:end="2909:9">{<block_content pos:start="2907:13" pos:end="2907:76">

            <expr_stmt pos:start="2907:13" pos:end="2907:76"><expr pos:start="2907:13" pos:end="2907:75"><call pos:start="2907:13" pos:end="2907:75"><name pos:start="2907:13" pos:end="2907:25">gen_repz_movs</name><argument_list pos:start="2907:26" pos:end="2907:75">(<argument pos:start="2907:27" pos:end="2907:27"><expr pos:start="2907:27" pos:end="2907:27"><name pos:start="2907:27" pos:end="2907:27">s</name></expr></argument>, <argument pos:start="2907:30" pos:end="2907:31"><expr pos:start="2907:30" pos:end="2907:31"><name pos:start="2907:30" pos:end="2907:31">ot</name></expr></argument>, <argument pos:start="2907:34" pos:end="2907:54"><expr pos:start="2907:34" pos:end="2907:54"><name pos:start="2907:34" pos:end="2907:41">pc_start</name> <operator pos:start="2907:43" pos:end="2907:43">-</operator> <name pos:start="2907:45" pos:end="2907:54"><name pos:start="2907:45" pos:end="2907:45">s</name><operator pos:start="2907:46" pos:end="2907:47">-&gt;</operator><name pos:start="2907:48" pos:end="2907:54">cs_base</name></name></expr></argument>, <argument pos:start="2907:57" pos:end="2907:74"><expr pos:start="2907:57" pos:end="2907:74"><name pos:start="2907:57" pos:end="2907:61"><name pos:start="2907:57" pos:end="2907:57">s</name><operator pos:start="2907:58" pos:end="2907:59">-&gt;</operator><name pos:start="2907:60" pos:end="2907:61">pc</name></name> <operator pos:start="2907:63" pos:end="2907:63">-</operator> <name pos:start="2907:65" pos:end="2907:74"><name pos:start="2907:65" pos:end="2907:65">s</name><operator pos:start="2907:66" pos:end="2907:67">-&gt;</operator><name pos:start="2907:68" pos:end="2907:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2909:11" pos:end="2913:9">else <block pos:start="2909:16" pos:end="2913:9">{<block_content pos:start="2911:13" pos:end="2911:28">

            <expr_stmt pos:start="2911:13" pos:end="2911:28"><expr pos:start="2911:13" pos:end="2911:27"><call pos:start="2911:13" pos:end="2911:27"><name pos:start="2911:13" pos:end="2911:20">gen_movs</name><argument_list pos:start="2911:21" pos:end="2911:27">(<argument pos:start="2911:22" pos:end="2911:22"><expr pos:start="2911:22" pos:end="2911:22"><name pos:start="2911:22" pos:end="2911:22">s</name></expr></argument>, <argument pos:start="2911:25" pos:end="2911:26"><expr pos:start="2911:25" pos:end="2911:26"><name pos:start="2911:25" pos:end="2911:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2915:9" pos:end="2915:14">break;</break>

        

    <case pos:start="2919:5" pos:end="2919:14">case <expr pos:start="2919:10" pos:end="2919:13"><literal type="number" pos:start="2919:10" pos:end="2919:13">0xaa</literal></expr>:</case> <comment type="block" pos:start="2919:16" pos:end="2919:26">/* stosS */</comment>

    <case pos:start="2921:5" pos:end="2921:14">case <expr pos:start="2921:10" pos:end="2921:13"><literal type="number" pos:start="2921:10" pos:end="2921:13">0xab</literal></expr>:</case>

        <if_stmt pos:start="2923:9" pos:end="2929:43"><if pos:start="2923:9" pos:end="2925:25">if <condition pos:start="2923:12" pos:end="2923:25">(<expr pos:start="2923:13" pos:end="2923:24"><operator pos:start="2923:13" pos:end="2923:13">(</operator><name pos:start="2923:14" pos:end="2923:14">b</name> <operator pos:start="2923:16" pos:end="2923:16">&amp;</operator> <literal type="number" pos:start="2923:18" pos:end="2923:18">1</literal><operator pos:start="2923:19" pos:end="2923:19">)</operator> <operator pos:start="2923:21" pos:end="2923:22">==</operator> <literal type="number" pos:start="2923:24" pos:end="2923:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2925:13" pos:end="2925:25"><block_content pos:start="2925:13" pos:end="2925:25">

            <expr_stmt pos:start="2925:13" pos:end="2925:25"><expr pos:start="2925:13" pos:end="2925:24"><name pos:start="2925:13" pos:end="2925:14">ot</name> <operator pos:start="2925:16" pos:end="2925:16">=</operator> <name pos:start="2925:18" pos:end="2925:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2927:9" pos:end="2929:43">else<block type="pseudo" pos:start="2929:13" pos:end="2929:43"><block_content pos:start="2929:13" pos:end="2929:43">

            <expr_stmt pos:start="2929:13" pos:end="2929:43"><expr pos:start="2929:13" pos:end="2929:42"><name pos:start="2929:13" pos:end="2929:14">ot</name> <operator pos:start="2929:16" pos:end="2929:16">=</operator> <ternary pos:start="2929:18" pos:end="2929:42"><condition pos:start="2929:18" pos:end="2929:24"><expr pos:start="2929:18" pos:end="2929:22"><name pos:start="2929:18" pos:end="2929:22">dflag</name></expr> ?</condition><then pos:start="2929:26" pos:end="2929:32"> <expr pos:start="2929:26" pos:end="2929:32"><name pos:start="2929:26" pos:end="2929:32">OT_LONG</name></expr> </then><else pos:start="2929:34" pos:end="2929:42">: <expr pos:start="2929:36" pos:end="2929:42"><name pos:start="2929:36" pos:end="2929:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="2933:9" pos:end="2941:9"><if pos:start="2933:9" pos:end="2937:9">if <condition pos:start="2933:12" pos:end="2933:52">(<expr pos:start="2933:13" pos:end="2933:51"><name pos:start="2933:13" pos:end="2933:20">prefixes</name> <operator pos:start="2933:22" pos:end="2933:22">&amp;</operator> <operator pos:start="2933:24" pos:end="2933:24">(</operator><name pos:start="2933:25" pos:end="2933:35">PREFIX_REPZ</name> <operator pos:start="2933:37" pos:end="2933:37">|</operator> <name pos:start="2933:39" pos:end="2933:50">PREFIX_REPNZ</name><operator pos:start="2933:51" pos:end="2933:51">)</operator></expr>)</condition> <block pos:start="2933:54" pos:end="2937:9">{<block_content pos:start="2935:13" pos:end="2935:76">

            <expr_stmt pos:start="2935:13" pos:end="2935:76"><expr pos:start="2935:13" pos:end="2935:75"><call pos:start="2935:13" pos:end="2935:75"><name pos:start="2935:13" pos:end="2935:25">gen_repz_stos</name><argument_list pos:start="2935:26" pos:end="2935:75">(<argument pos:start="2935:27" pos:end="2935:27"><expr pos:start="2935:27" pos:end="2935:27"><name pos:start="2935:27" pos:end="2935:27">s</name></expr></argument>, <argument pos:start="2935:30" pos:end="2935:31"><expr pos:start="2935:30" pos:end="2935:31"><name pos:start="2935:30" pos:end="2935:31">ot</name></expr></argument>, <argument pos:start="2935:34" pos:end="2935:54"><expr pos:start="2935:34" pos:end="2935:54"><name pos:start="2935:34" pos:end="2935:41">pc_start</name> <operator pos:start="2935:43" pos:end="2935:43">-</operator> <name pos:start="2935:45" pos:end="2935:54"><name pos:start="2935:45" pos:end="2935:45">s</name><operator pos:start="2935:46" pos:end="2935:47">-&gt;</operator><name pos:start="2935:48" pos:end="2935:54">cs_base</name></name></expr></argument>, <argument pos:start="2935:57" pos:end="2935:74"><expr pos:start="2935:57" pos:end="2935:74"><name pos:start="2935:57" pos:end="2935:61"><name pos:start="2935:57" pos:end="2935:57">s</name><operator pos:start="2935:58" pos:end="2935:59">-&gt;</operator><name pos:start="2935:60" pos:end="2935:61">pc</name></name> <operator pos:start="2935:63" pos:end="2935:63">-</operator> <name pos:start="2935:65" pos:end="2935:74"><name pos:start="2935:65" pos:end="2935:65">s</name><operator pos:start="2935:66" pos:end="2935:67">-&gt;</operator><name pos:start="2935:68" pos:end="2935:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2937:11" pos:end="2941:9">else <block pos:start="2937:16" pos:end="2941:9">{<block_content pos:start="2939:13" pos:end="2939:28">

            <expr_stmt pos:start="2939:13" pos:end="2939:28"><expr pos:start="2939:13" pos:end="2939:27"><call pos:start="2939:13" pos:end="2939:27"><name pos:start="2939:13" pos:end="2939:20">gen_stos</name><argument_list pos:start="2939:21" pos:end="2939:27">(<argument pos:start="2939:22" pos:end="2939:22"><expr pos:start="2939:22" pos:end="2939:22"><name pos:start="2939:22" pos:end="2939:22">s</name></expr></argument>, <argument pos:start="2939:25" pos:end="2939:26"><expr pos:start="2939:25" pos:end="2939:26"><name pos:start="2939:25" pos:end="2939:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2943:9" pos:end="2943:14">break;</break>

    <case pos:start="2945:5" pos:end="2945:14">case <expr pos:start="2945:10" pos:end="2945:13"><literal type="number" pos:start="2945:10" pos:end="2945:13">0xac</literal></expr>:</case> <comment type="block" pos:start="2945:16" pos:end="2945:26">/* lodsS */</comment>

    <case pos:start="2947:5" pos:end="2947:14">case <expr pos:start="2947:10" pos:end="2947:13"><literal type="number" pos:start="2947:10" pos:end="2947:13">0xad</literal></expr>:</case>

        <if_stmt pos:start="2949:9" pos:end="2955:43"><if pos:start="2949:9" pos:end="2951:25">if <condition pos:start="2949:12" pos:end="2949:25">(<expr pos:start="2949:13" pos:end="2949:24"><operator pos:start="2949:13" pos:end="2949:13">(</operator><name pos:start="2949:14" pos:end="2949:14">b</name> <operator pos:start="2949:16" pos:end="2949:16">&amp;</operator> <literal type="number" pos:start="2949:18" pos:end="2949:18">1</literal><operator pos:start="2949:19" pos:end="2949:19">)</operator> <operator pos:start="2949:21" pos:end="2949:22">==</operator> <literal type="number" pos:start="2949:24" pos:end="2949:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2951:13" pos:end="2951:25"><block_content pos:start="2951:13" pos:end="2951:25">

            <expr_stmt pos:start="2951:13" pos:end="2951:25"><expr pos:start="2951:13" pos:end="2951:24"><name pos:start="2951:13" pos:end="2951:14">ot</name> <operator pos:start="2951:16" pos:end="2951:16">=</operator> <name pos:start="2951:18" pos:end="2951:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2953:9" pos:end="2955:43">else<block type="pseudo" pos:start="2955:13" pos:end="2955:43"><block_content pos:start="2955:13" pos:end="2955:43">

            <expr_stmt pos:start="2955:13" pos:end="2955:43"><expr pos:start="2955:13" pos:end="2955:42"><name pos:start="2955:13" pos:end="2955:14">ot</name> <operator pos:start="2955:16" pos:end="2955:16">=</operator> <ternary pos:start="2955:18" pos:end="2955:42"><condition pos:start="2955:18" pos:end="2955:24"><expr pos:start="2955:18" pos:end="2955:22"><name pos:start="2955:18" pos:end="2955:22">dflag</name></expr> ?</condition><then pos:start="2955:26" pos:end="2955:32"> <expr pos:start="2955:26" pos:end="2955:32"><name pos:start="2955:26" pos:end="2955:32">OT_LONG</name></expr> </then><else pos:start="2955:34" pos:end="2955:42">: <expr pos:start="2955:36" pos:end="2955:42"><name pos:start="2955:36" pos:end="2955:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="2957:9" pos:end="2965:9"><if pos:start="2957:9" pos:end="2961:9">if <condition pos:start="2957:12" pos:end="2957:52">(<expr pos:start="2957:13" pos:end="2957:51"><name pos:start="2957:13" pos:end="2957:20">prefixes</name> <operator pos:start="2957:22" pos:end="2957:22">&amp;</operator> <operator pos:start="2957:24" pos:end="2957:24">(</operator><name pos:start="2957:25" pos:end="2957:35">PREFIX_REPZ</name> <operator pos:start="2957:37" pos:end="2957:37">|</operator> <name pos:start="2957:39" pos:end="2957:50">PREFIX_REPNZ</name><operator pos:start="2957:51" pos:end="2957:51">)</operator></expr>)</condition> <block pos:start="2957:54" pos:end="2961:9">{<block_content pos:start="2959:13" pos:end="2959:76">

            <expr_stmt pos:start="2959:13" pos:end="2959:76"><expr pos:start="2959:13" pos:end="2959:75"><call pos:start="2959:13" pos:end="2959:75"><name pos:start="2959:13" pos:end="2959:25">gen_repz_lods</name><argument_list pos:start="2959:26" pos:end="2959:75">(<argument pos:start="2959:27" pos:end="2959:27"><expr pos:start="2959:27" pos:end="2959:27"><name pos:start="2959:27" pos:end="2959:27">s</name></expr></argument>, <argument pos:start="2959:30" pos:end="2959:31"><expr pos:start="2959:30" pos:end="2959:31"><name pos:start="2959:30" pos:end="2959:31">ot</name></expr></argument>, <argument pos:start="2959:34" pos:end="2959:54"><expr pos:start="2959:34" pos:end="2959:54"><name pos:start="2959:34" pos:end="2959:41">pc_start</name> <operator pos:start="2959:43" pos:end="2959:43">-</operator> <name pos:start="2959:45" pos:end="2959:54"><name pos:start="2959:45" pos:end="2959:45">s</name><operator pos:start="2959:46" pos:end="2959:47">-&gt;</operator><name pos:start="2959:48" pos:end="2959:54">cs_base</name></name></expr></argument>, <argument pos:start="2959:57" pos:end="2959:74"><expr pos:start="2959:57" pos:end="2959:74"><name pos:start="2959:57" pos:end="2959:61"><name pos:start="2959:57" pos:end="2959:57">s</name><operator pos:start="2959:58" pos:end="2959:59">-&gt;</operator><name pos:start="2959:60" pos:end="2959:61">pc</name></name> <operator pos:start="2959:63" pos:end="2959:63">-</operator> <name pos:start="2959:65" pos:end="2959:74"><name pos:start="2959:65" pos:end="2959:65">s</name><operator pos:start="2959:66" pos:end="2959:67">-&gt;</operator><name pos:start="2959:68" pos:end="2959:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2961:11" pos:end="2965:9">else <block pos:start="2961:16" pos:end="2965:9">{<block_content pos:start="2963:13" pos:end="2963:28">

            <expr_stmt pos:start="2963:13" pos:end="2963:28"><expr pos:start="2963:13" pos:end="2963:27"><call pos:start="2963:13" pos:end="2963:27"><name pos:start="2963:13" pos:end="2963:20">gen_lods</name><argument_list pos:start="2963:21" pos:end="2963:27">(<argument pos:start="2963:22" pos:end="2963:22"><expr pos:start="2963:22" pos:end="2963:22"><name pos:start="2963:22" pos:end="2963:22">s</name></expr></argument>, <argument pos:start="2963:25" pos:end="2963:26"><expr pos:start="2963:25" pos:end="2963:26"><name pos:start="2963:25" pos:end="2963:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2967:9" pos:end="2967:14">break;</break>

    <case pos:start="2969:5" pos:end="2969:14">case <expr pos:start="2969:10" pos:end="2969:13"><literal type="number" pos:start="2969:10" pos:end="2969:13">0xae</literal></expr>:</case> <comment type="block" pos:start="2969:16" pos:end="2969:26">/* scasS */</comment>

    <case pos:start="2971:5" pos:end="2971:14">case <expr pos:start="2971:10" pos:end="2971:13"><literal type="number" pos:start="2971:10" pos:end="2971:13">0xaf</literal></expr>:</case>

        <if_stmt pos:start="2973:9" pos:end="2979:47"><if pos:start="2973:9" pos:end="2975:25">if <condition pos:start="2973:12" pos:end="2973:25">(<expr pos:start="2973:13" pos:end="2973:24"><operator pos:start="2973:13" pos:end="2973:13">(</operator><name pos:start="2973:14" pos:end="2973:14">b</name> <operator pos:start="2973:16" pos:end="2973:16">&amp;</operator> <literal type="number" pos:start="2973:18" pos:end="2973:18">1</literal><operator pos:start="2973:19" pos:end="2973:19">)</operator> <operator pos:start="2973:21" pos:end="2973:22">==</operator> <literal type="number" pos:start="2973:24" pos:end="2973:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2975:13" pos:end="2975:25"><block_content pos:start="2975:13" pos:end="2975:25">

            <expr_stmt pos:start="2975:13" pos:end="2975:25"><expr pos:start="2975:13" pos:end="2975:24"><name pos:start="2975:13" pos:end="2975:14">ot</name> <operator pos:start="2975:16" pos:end="2975:16">=</operator> <name pos:start="2975:18" pos:end="2975:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2977:9" pos:end="2979:47">else<block type="pseudo" pos:start="2979:17" pos:end="2979:47"><block_content pos:start="2979:17" pos:end="2979:47">

                <expr_stmt pos:start="2979:17" pos:end="2979:47"><expr pos:start="2979:17" pos:end="2979:46"><name pos:start="2979:17" pos:end="2979:18">ot</name> <operator pos:start="2979:20" pos:end="2979:20">=</operator> <ternary pos:start="2979:22" pos:end="2979:46"><condition pos:start="2979:22" pos:end="2979:28"><expr pos:start="2979:22" pos:end="2979:26"><name pos:start="2979:22" pos:end="2979:26">dflag</name></expr> ?</condition><then pos:start="2979:30" pos:end="2979:36"> <expr pos:start="2979:30" pos:end="2979:36"><name pos:start="2979:30" pos:end="2979:36">OT_LONG</name></expr> </then><else pos:start="2979:38" pos:end="2979:46">: <expr pos:start="2979:40" pos:end="2979:46"><name pos:start="2979:40" pos:end="2979:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="2981:9" pos:end="2995:9"><if pos:start="2981:9" pos:end="2985:9">if <condition pos:start="2981:12" pos:end="2981:36">(<expr pos:start="2981:13" pos:end="2981:35"><name pos:start="2981:13" pos:end="2981:20">prefixes</name> <operator pos:start="2981:22" pos:end="2981:22">&amp;</operator> <name pos:start="2981:24" pos:end="2981:35">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="2981:38" pos:end="2985:9">{<block_content pos:start="2983:13" pos:end="2983:79">

            <expr_stmt pos:start="2983:13" pos:end="2983:79"><expr pos:start="2983:13" pos:end="2983:78"><call pos:start="2983:13" pos:end="2983:78"><name pos:start="2983:13" pos:end="2983:25">gen_repz_scas</name><argument_list pos:start="2983:26" pos:end="2983:78">(<argument pos:start="2983:27" pos:end="2983:27"><expr pos:start="2983:27" pos:end="2983:27"><name pos:start="2983:27" pos:end="2983:27">s</name></expr></argument>, <argument pos:start="2983:30" pos:end="2983:31"><expr pos:start="2983:30" pos:end="2983:31"><name pos:start="2983:30" pos:end="2983:31">ot</name></expr></argument>, <argument pos:start="2983:34" pos:end="2983:54"><expr pos:start="2983:34" pos:end="2983:54"><name pos:start="2983:34" pos:end="2983:41">pc_start</name> <operator pos:start="2983:43" pos:end="2983:43">-</operator> <name pos:start="2983:45" pos:end="2983:54"><name pos:start="2983:45" pos:end="2983:45">s</name><operator pos:start="2983:46" pos:end="2983:47">-&gt;</operator><name pos:start="2983:48" pos:end="2983:54">cs_base</name></name></expr></argument>, <argument pos:start="2983:57" pos:end="2983:74"><expr pos:start="2983:57" pos:end="2983:74"><name pos:start="2983:57" pos:end="2983:61"><name pos:start="2983:57" pos:end="2983:57">s</name><operator pos:start="2983:58" pos:end="2983:59">-&gt;</operator><name pos:start="2983:60" pos:end="2983:61">pc</name></name> <operator pos:start="2983:63" pos:end="2983:63">-</operator> <name pos:start="2983:65" pos:end="2983:74"><name pos:start="2983:65" pos:end="2983:65">s</name><operator pos:start="2983:66" pos:end="2983:67">-&gt;</operator><name pos:start="2983:68" pos:end="2983:74">cs_base</name></name></expr></argument>, <argument pos:start="2983:77" pos:end="2983:77"><expr pos:start="2983:77" pos:end="2983:77"><literal type="number" pos:start="2983:77" pos:end="2983:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="2985:11" pos:end="2989:9">else if <condition pos:start="2985:19" pos:end="2985:42">(<expr pos:start="2985:20" pos:end="2985:41"><name pos:start="2985:20" pos:end="2985:27">prefixes</name> <operator pos:start="2985:29" pos:end="2985:29">&amp;</operator> <name pos:start="2985:31" pos:end="2985:41">PREFIX_REPZ</name></expr>)</condition> <block pos:start="2985:44" pos:end="2989:9">{<block_content pos:start="2987:13" pos:end="2987:79">

            <expr_stmt pos:start="2987:13" pos:end="2987:79"><expr pos:start="2987:13" pos:end="2987:78"><call pos:start="2987:13" pos:end="2987:78"><name pos:start="2987:13" pos:end="2987:25">gen_repz_scas</name><argument_list pos:start="2987:26" pos:end="2987:78">(<argument pos:start="2987:27" pos:end="2987:27"><expr pos:start="2987:27" pos:end="2987:27"><name pos:start="2987:27" pos:end="2987:27">s</name></expr></argument>, <argument pos:start="2987:30" pos:end="2987:31"><expr pos:start="2987:30" pos:end="2987:31"><name pos:start="2987:30" pos:end="2987:31">ot</name></expr></argument>, <argument pos:start="2987:34" pos:end="2987:54"><expr pos:start="2987:34" pos:end="2987:54"><name pos:start="2987:34" pos:end="2987:41">pc_start</name> <operator pos:start="2987:43" pos:end="2987:43">-</operator> <name pos:start="2987:45" pos:end="2987:54"><name pos:start="2987:45" pos:end="2987:45">s</name><operator pos:start="2987:46" pos:end="2987:47">-&gt;</operator><name pos:start="2987:48" pos:end="2987:54">cs_base</name></name></expr></argument>, <argument pos:start="2987:57" pos:end="2987:74"><expr pos:start="2987:57" pos:end="2987:74"><name pos:start="2987:57" pos:end="2987:61"><name pos:start="2987:57" pos:end="2987:57">s</name><operator pos:start="2987:58" pos:end="2987:59">-&gt;</operator><name pos:start="2987:60" pos:end="2987:61">pc</name></name> <operator pos:start="2987:63" pos:end="2987:63">-</operator> <name pos:start="2987:65" pos:end="2987:74"><name pos:start="2987:65" pos:end="2987:65">s</name><operator pos:start="2987:66" pos:end="2987:67">-&gt;</operator><name pos:start="2987:68" pos:end="2987:74">cs_base</name></name></expr></argument>, <argument pos:start="2987:77" pos:end="2987:77"><expr pos:start="2987:77" pos:end="2987:77"><literal type="number" pos:start="2987:77" pos:end="2987:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2989:11" pos:end="2995:9">else <block pos:start="2989:16" pos:end="2995:9">{<block_content pos:start="2991:13" pos:end="2993:39">

            <expr_stmt pos:start="2991:13" pos:end="2991:28"><expr pos:start="2991:13" pos:end="2991:27"><call pos:start="2991:13" pos:end="2991:27"><name pos:start="2991:13" pos:end="2991:20">gen_scas</name><argument_list pos:start="2991:21" pos:end="2991:27">(<argument pos:start="2991:22" pos:end="2991:22"><expr pos:start="2991:22" pos:end="2991:22"><name pos:start="2991:22" pos:end="2991:22">s</name></expr></argument>, <argument pos:start="2991:25" pos:end="2991:26"><expr pos:start="2991:25" pos:end="2991:26"><name pos:start="2991:25" pos:end="2991:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2993:13" pos:end="2993:39"><expr pos:start="2993:13" pos:end="2993:38"><name pos:start="2993:13" pos:end="2993:20"><name pos:start="2993:13" pos:end="2993:13">s</name><operator pos:start="2993:14" pos:end="2993:15">-&gt;</operator><name pos:start="2993:16" pos:end="2993:20">cc_op</name></name> <operator pos:start="2993:22" pos:end="2993:22">=</operator> <name pos:start="2993:24" pos:end="2993:33">CC_OP_SUBB</name> <operator pos:start="2993:35" pos:end="2993:35">+</operator> <name pos:start="2993:37" pos:end="2993:38">ot</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2997:9" pos:end="2997:14">break;</break>



    <case pos:start="3001:5" pos:end="3001:14">case <expr pos:start="3001:10" pos:end="3001:13"><literal type="number" pos:start="3001:10" pos:end="3001:13">0xa6</literal></expr>:</case> <comment type="block" pos:start="3001:16" pos:end="3001:26">/* cmpsS */</comment>

    <case pos:start="3003:5" pos:end="3003:14">case <expr pos:start="3003:10" pos:end="3003:13"><literal type="number" pos:start="3003:10" pos:end="3003:13">0xa7</literal></expr>:</case>

        <if_stmt pos:start="3005:9" pos:end="3011:43"><if pos:start="3005:9" pos:end="3007:25">if <condition pos:start="3005:12" pos:end="3005:25">(<expr pos:start="3005:13" pos:end="3005:24"><operator pos:start="3005:13" pos:end="3005:13">(</operator><name pos:start="3005:14" pos:end="3005:14">b</name> <operator pos:start="3005:16" pos:end="3005:16">&amp;</operator> <literal type="number" pos:start="3005:18" pos:end="3005:18">1</literal><operator pos:start="3005:19" pos:end="3005:19">)</operator> <operator pos:start="3005:21" pos:end="3005:22">==</operator> <literal type="number" pos:start="3005:24" pos:end="3005:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3007:13" pos:end="3007:25"><block_content pos:start="3007:13" pos:end="3007:25">

            <expr_stmt pos:start="3007:13" pos:end="3007:25"><expr pos:start="3007:13" pos:end="3007:24"><name pos:start="3007:13" pos:end="3007:14">ot</name> <operator pos:start="3007:16" pos:end="3007:16">=</operator> <name pos:start="3007:18" pos:end="3007:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3009:9" pos:end="3011:43">else<block type="pseudo" pos:start="3011:13" pos:end="3011:43"><block_content pos:start="3011:13" pos:end="3011:43">

            <expr_stmt pos:start="3011:13" pos:end="3011:43"><expr pos:start="3011:13" pos:end="3011:42"><name pos:start="3011:13" pos:end="3011:14">ot</name> <operator pos:start="3011:16" pos:end="3011:16">=</operator> <ternary pos:start="3011:18" pos:end="3011:42"><condition pos:start="3011:18" pos:end="3011:24"><expr pos:start="3011:18" pos:end="3011:22"><name pos:start="3011:18" pos:end="3011:22">dflag</name></expr> ?</condition><then pos:start="3011:26" pos:end="3011:32"> <expr pos:start="3011:26" pos:end="3011:32"><name pos:start="3011:26" pos:end="3011:32">OT_LONG</name></expr> </then><else pos:start="3011:34" pos:end="3011:42">: <expr pos:start="3011:36" pos:end="3011:42"><name pos:start="3011:36" pos:end="3011:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="3013:9" pos:end="3027:9"><if pos:start="3013:9" pos:end="3017:9">if <condition pos:start="3013:12" pos:end="3013:36">(<expr pos:start="3013:13" pos:end="3013:35"><name pos:start="3013:13" pos:end="3013:20">prefixes</name> <operator pos:start="3013:22" pos:end="3013:22">&amp;</operator> <name pos:start="3013:24" pos:end="3013:35">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="3013:38" pos:end="3017:9">{<block_content pos:start="3015:13" pos:end="3015:79">

            <expr_stmt pos:start="3015:13" pos:end="3015:79"><expr pos:start="3015:13" pos:end="3015:78"><call pos:start="3015:13" pos:end="3015:78"><name pos:start="3015:13" pos:end="3015:25">gen_repz_cmps</name><argument_list pos:start="3015:26" pos:end="3015:78">(<argument pos:start="3015:27" pos:end="3015:27"><expr pos:start="3015:27" pos:end="3015:27"><name pos:start="3015:27" pos:end="3015:27">s</name></expr></argument>, <argument pos:start="3015:30" pos:end="3015:31"><expr pos:start="3015:30" pos:end="3015:31"><name pos:start="3015:30" pos:end="3015:31">ot</name></expr></argument>, <argument pos:start="3015:34" pos:end="3015:54"><expr pos:start="3015:34" pos:end="3015:54"><name pos:start="3015:34" pos:end="3015:41">pc_start</name> <operator pos:start="3015:43" pos:end="3015:43">-</operator> <name pos:start="3015:45" pos:end="3015:54"><name pos:start="3015:45" pos:end="3015:45">s</name><operator pos:start="3015:46" pos:end="3015:47">-&gt;</operator><name pos:start="3015:48" pos:end="3015:54">cs_base</name></name></expr></argument>, <argument pos:start="3015:57" pos:end="3015:74"><expr pos:start="3015:57" pos:end="3015:74"><name pos:start="3015:57" pos:end="3015:61"><name pos:start="3015:57" pos:end="3015:57">s</name><operator pos:start="3015:58" pos:end="3015:59">-&gt;</operator><name pos:start="3015:60" pos:end="3015:61">pc</name></name> <operator pos:start="3015:63" pos:end="3015:63">-</operator> <name pos:start="3015:65" pos:end="3015:74"><name pos:start="3015:65" pos:end="3015:65">s</name><operator pos:start="3015:66" pos:end="3015:67">-&gt;</operator><name pos:start="3015:68" pos:end="3015:74">cs_base</name></name></expr></argument>, <argument pos:start="3015:77" pos:end="3015:77"><expr pos:start="3015:77" pos:end="3015:77"><literal type="number" pos:start="3015:77" pos:end="3015:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="3017:11" pos:end="3021:9">else if <condition pos:start="3017:19" pos:end="3017:42">(<expr pos:start="3017:20" pos:end="3017:41"><name pos:start="3017:20" pos:end="3017:27">prefixes</name> <operator pos:start="3017:29" pos:end="3017:29">&amp;</operator> <name pos:start="3017:31" pos:end="3017:41">PREFIX_REPZ</name></expr>)</condition> <block pos:start="3017:44" pos:end="3021:9">{<block_content pos:start="3019:13" pos:end="3019:79">

            <expr_stmt pos:start="3019:13" pos:end="3019:79"><expr pos:start="3019:13" pos:end="3019:78"><call pos:start="3019:13" pos:end="3019:78"><name pos:start="3019:13" pos:end="3019:25">gen_repz_cmps</name><argument_list pos:start="3019:26" pos:end="3019:78">(<argument pos:start="3019:27" pos:end="3019:27"><expr pos:start="3019:27" pos:end="3019:27"><name pos:start="3019:27" pos:end="3019:27">s</name></expr></argument>, <argument pos:start="3019:30" pos:end="3019:31"><expr pos:start="3019:30" pos:end="3019:31"><name pos:start="3019:30" pos:end="3019:31">ot</name></expr></argument>, <argument pos:start="3019:34" pos:end="3019:54"><expr pos:start="3019:34" pos:end="3019:54"><name pos:start="3019:34" pos:end="3019:41">pc_start</name> <operator pos:start="3019:43" pos:end="3019:43">-</operator> <name pos:start="3019:45" pos:end="3019:54"><name pos:start="3019:45" pos:end="3019:45">s</name><operator pos:start="3019:46" pos:end="3019:47">-&gt;</operator><name pos:start="3019:48" pos:end="3019:54">cs_base</name></name></expr></argument>, <argument pos:start="3019:57" pos:end="3019:74"><expr pos:start="3019:57" pos:end="3019:74"><name pos:start="3019:57" pos:end="3019:61"><name pos:start="3019:57" pos:end="3019:57">s</name><operator pos:start="3019:58" pos:end="3019:59">-&gt;</operator><name pos:start="3019:60" pos:end="3019:61">pc</name></name> <operator pos:start="3019:63" pos:end="3019:63">-</operator> <name pos:start="3019:65" pos:end="3019:74"><name pos:start="3019:65" pos:end="3019:65">s</name><operator pos:start="3019:66" pos:end="3019:67">-&gt;</operator><name pos:start="3019:68" pos:end="3019:74">cs_base</name></name></expr></argument>, <argument pos:start="3019:77" pos:end="3019:77"><expr pos:start="3019:77" pos:end="3019:77"><literal type="number" pos:start="3019:77" pos:end="3019:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3021:11" pos:end="3027:9">else <block pos:start="3021:16" pos:end="3027:9">{<block_content pos:start="3023:13" pos:end="3025:39">

            <expr_stmt pos:start="3023:13" pos:end="3023:28"><expr pos:start="3023:13" pos:end="3023:27"><call pos:start="3023:13" pos:end="3023:27"><name pos:start="3023:13" pos:end="3023:20">gen_cmps</name><argument_list pos:start="3023:21" pos:end="3023:27">(<argument pos:start="3023:22" pos:end="3023:22"><expr pos:start="3023:22" pos:end="3023:22"><name pos:start="3023:22" pos:end="3023:22">s</name></expr></argument>, <argument pos:start="3023:25" pos:end="3023:26"><expr pos:start="3023:25" pos:end="3023:26"><name pos:start="3023:25" pos:end="3023:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3025:13" pos:end="3025:39"><expr pos:start="3025:13" pos:end="3025:38"><name pos:start="3025:13" pos:end="3025:20"><name pos:start="3025:13" pos:end="3025:13">s</name><operator pos:start="3025:14" pos:end="3025:15">-&gt;</operator><name pos:start="3025:16" pos:end="3025:20">cc_op</name></name> <operator pos:start="3025:22" pos:end="3025:22">=</operator> <name pos:start="3025:24" pos:end="3025:33">CC_OP_SUBB</name> <operator pos:start="3025:35" pos:end="3025:35">+</operator> <name pos:start="3025:37" pos:end="3025:38">ot</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3029:9" pos:end="3029:14">break;</break>

    <case pos:start="3031:5" pos:end="3031:14">case <expr pos:start="3031:10" pos:end="3031:13"><literal type="number" pos:start="3031:10" pos:end="3031:13">0x6c</literal></expr>:</case> <comment type="block" pos:start="3031:16" pos:end="3031:25">/* insS */</comment>

    <case pos:start="3033:5" pos:end="3033:14">case <expr pos:start="3033:10" pos:end="3033:13"><literal type="number" pos:start="3033:10" pos:end="3033:13">0x6d</literal></expr>:</case>

        <if_stmt pos:start="3035:9" pos:end="3041:43"><if pos:start="3035:9" pos:end="3037:25">if <condition pos:start="3035:12" pos:end="3035:25">(<expr pos:start="3035:13" pos:end="3035:24"><operator pos:start="3035:13" pos:end="3035:13">(</operator><name pos:start="3035:14" pos:end="3035:14">b</name> <operator pos:start="3035:16" pos:end="3035:16">&amp;</operator> <literal type="number" pos:start="3035:18" pos:end="3035:18">1</literal><operator pos:start="3035:19" pos:end="3035:19">)</operator> <operator pos:start="3035:21" pos:end="3035:22">==</operator> <literal type="number" pos:start="3035:24" pos:end="3035:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3037:13" pos:end="3037:25"><block_content pos:start="3037:13" pos:end="3037:25">

            <expr_stmt pos:start="3037:13" pos:end="3037:25"><expr pos:start="3037:13" pos:end="3037:24"><name pos:start="3037:13" pos:end="3037:14">ot</name> <operator pos:start="3037:16" pos:end="3037:16">=</operator> <name pos:start="3037:18" pos:end="3037:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3039:9" pos:end="3041:43">else<block type="pseudo" pos:start="3041:13" pos:end="3041:43"><block_content pos:start="3041:13" pos:end="3041:43">

            <expr_stmt pos:start="3041:13" pos:end="3041:43"><expr pos:start="3041:13" pos:end="3041:42"><name pos:start="3041:13" pos:end="3041:14">ot</name> <operator pos:start="3041:16" pos:end="3041:16">=</operator> <ternary pos:start="3041:18" pos:end="3041:42"><condition pos:start="3041:18" pos:end="3041:24"><expr pos:start="3041:18" pos:end="3041:22"><name pos:start="3041:18" pos:end="3041:22">dflag</name></expr> ?</condition><then pos:start="3041:26" pos:end="3041:32"> <expr pos:start="3041:26" pos:end="3041:32"><name pos:start="3041:26" pos:end="3041:32">OT_LONG</name></expr> </then><else pos:start="3041:34" pos:end="3041:42">: <expr pos:start="3041:36" pos:end="3041:42"><name pos:start="3041:36" pos:end="3041:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="3043:9" pos:end="3043:54"><expr pos:start="3043:9" pos:end="3043:53"><call pos:start="3043:9" pos:end="3043:53"><name pos:start="3043:9" pos:end="3043:20">gen_check_io</name><argument_list pos:start="3043:21" pos:end="3043:53">(<argument pos:start="3043:22" pos:end="3043:22"><expr pos:start="3043:22" pos:end="3043:22"><name pos:start="3043:22" pos:end="3043:22">s</name></expr></argument>, <argument pos:start="3043:25" pos:end="3043:26"><expr pos:start="3043:25" pos:end="3043:26"><name pos:start="3043:25" pos:end="3043:26">ot</name></expr></argument>, <argument pos:start="3043:29" pos:end="3043:29"><expr pos:start="3043:29" pos:end="3043:29"><literal type="number" pos:start="3043:29" pos:end="3043:29">1</literal></expr></argument>, <argument pos:start="3043:32" pos:end="3043:52"><expr pos:start="3043:32" pos:end="3043:52"><name pos:start="3043:32" pos:end="3043:39">pc_start</name> <operator pos:start="3043:41" pos:end="3043:41">-</operator> <name pos:start="3043:43" pos:end="3043:52"><name pos:start="3043:43" pos:end="3043:43">s</name><operator pos:start="3043:44" pos:end="3043:45">-&gt;</operator><name pos:start="3043:46" pos:end="3043:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3045:9" pos:end="3053:9"><if pos:start="3045:9" pos:end="3049:9">if <condition pos:start="3045:12" pos:end="3045:52">(<expr pos:start="3045:13" pos:end="3045:51"><name pos:start="3045:13" pos:end="3045:20">prefixes</name> <operator pos:start="3045:22" pos:end="3045:22">&amp;</operator> <operator pos:start="3045:24" pos:end="3045:24">(</operator><name pos:start="3045:25" pos:end="3045:35">PREFIX_REPZ</name> <operator pos:start="3045:37" pos:end="3045:37">|</operator> <name pos:start="3045:39" pos:end="3045:50">PREFIX_REPNZ</name><operator pos:start="3045:51" pos:end="3045:51">)</operator></expr>)</condition> <block pos:start="3045:54" pos:end="3049:9">{<block_content pos:start="3047:13" pos:end="3047:75">

            <expr_stmt pos:start="3047:13" pos:end="3047:75"><expr pos:start="3047:13" pos:end="3047:74"><call pos:start="3047:13" pos:end="3047:74"><name pos:start="3047:13" pos:end="3047:24">gen_repz_ins</name><argument_list pos:start="3047:25" pos:end="3047:74">(<argument pos:start="3047:26" pos:end="3047:26"><expr pos:start="3047:26" pos:end="3047:26"><name pos:start="3047:26" pos:end="3047:26">s</name></expr></argument>, <argument pos:start="3047:29" pos:end="3047:30"><expr pos:start="3047:29" pos:end="3047:30"><name pos:start="3047:29" pos:end="3047:30">ot</name></expr></argument>, <argument pos:start="3047:33" pos:end="3047:53"><expr pos:start="3047:33" pos:end="3047:53"><name pos:start="3047:33" pos:end="3047:40">pc_start</name> <operator pos:start="3047:42" pos:end="3047:42">-</operator> <name pos:start="3047:44" pos:end="3047:53"><name pos:start="3047:44" pos:end="3047:44">s</name><operator pos:start="3047:45" pos:end="3047:46">-&gt;</operator><name pos:start="3047:47" pos:end="3047:53">cs_base</name></name></expr></argument>, <argument pos:start="3047:56" pos:end="3047:73"><expr pos:start="3047:56" pos:end="3047:73"><name pos:start="3047:56" pos:end="3047:60"><name pos:start="3047:56" pos:end="3047:56">s</name><operator pos:start="3047:57" pos:end="3047:58">-&gt;</operator><name pos:start="3047:59" pos:end="3047:60">pc</name></name> <operator pos:start="3047:62" pos:end="3047:62">-</operator> <name pos:start="3047:64" pos:end="3047:73"><name pos:start="3047:64" pos:end="3047:64">s</name><operator pos:start="3047:65" pos:end="3047:66">-&gt;</operator><name pos:start="3047:67" pos:end="3047:73">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3049:11" pos:end="3053:9">else <block pos:start="3049:16" pos:end="3053:9">{<block_content pos:start="3051:13" pos:end="3051:27">

            <expr_stmt pos:start="3051:13" pos:end="3051:27"><expr pos:start="3051:13" pos:end="3051:26"><call pos:start="3051:13" pos:end="3051:26"><name pos:start="3051:13" pos:end="3051:19">gen_ins</name><argument_list pos:start="3051:20" pos:end="3051:26">(<argument pos:start="3051:21" pos:end="3051:21"><expr pos:start="3051:21" pos:end="3051:21"><name pos:start="3051:21" pos:end="3051:21">s</name></expr></argument>, <argument pos:start="3051:24" pos:end="3051:25"><expr pos:start="3051:24" pos:end="3051:25"><name pos:start="3051:24" pos:end="3051:25">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3055:9" pos:end="3055:14">break;</break>

    <case pos:start="3057:5" pos:end="3057:14">case <expr pos:start="3057:10" pos:end="3057:13"><literal type="number" pos:start="3057:10" pos:end="3057:13">0x6e</literal></expr>:</case> <comment type="block" pos:start="3057:16" pos:end="3057:26">/* outsS */</comment>

    <case pos:start="3059:5" pos:end="3059:14">case <expr pos:start="3059:10" pos:end="3059:13"><literal type="number" pos:start="3059:10" pos:end="3059:13">0x6f</literal></expr>:</case>

        <if_stmt pos:start="3061:9" pos:end="3067:43"><if pos:start="3061:9" pos:end="3063:25">if <condition pos:start="3061:12" pos:end="3061:25">(<expr pos:start="3061:13" pos:end="3061:24"><operator pos:start="3061:13" pos:end="3061:13">(</operator><name pos:start="3061:14" pos:end="3061:14">b</name> <operator pos:start="3061:16" pos:end="3061:16">&amp;</operator> <literal type="number" pos:start="3061:18" pos:end="3061:18">1</literal><operator pos:start="3061:19" pos:end="3061:19">)</operator> <operator pos:start="3061:21" pos:end="3061:22">==</operator> <literal type="number" pos:start="3061:24" pos:end="3061:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3063:13" pos:end="3063:25"><block_content pos:start="3063:13" pos:end="3063:25">

            <expr_stmt pos:start="3063:13" pos:end="3063:25"><expr pos:start="3063:13" pos:end="3063:24"><name pos:start="3063:13" pos:end="3063:14">ot</name> <operator pos:start="3063:16" pos:end="3063:16">=</operator> <name pos:start="3063:18" pos:end="3063:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3065:9" pos:end="3067:43">else<block type="pseudo" pos:start="3067:13" pos:end="3067:43"><block_content pos:start="3067:13" pos:end="3067:43">

            <expr_stmt pos:start="3067:13" pos:end="3067:43"><expr pos:start="3067:13" pos:end="3067:42"><name pos:start="3067:13" pos:end="3067:14">ot</name> <operator pos:start="3067:16" pos:end="3067:16">=</operator> <ternary pos:start="3067:18" pos:end="3067:42"><condition pos:start="3067:18" pos:end="3067:24"><expr pos:start="3067:18" pos:end="3067:22"><name pos:start="3067:18" pos:end="3067:22">dflag</name></expr> ?</condition><then pos:start="3067:26" pos:end="3067:32"> <expr pos:start="3067:26" pos:end="3067:32"><name pos:start="3067:26" pos:end="3067:32">OT_LONG</name></expr> </then><else pos:start="3067:34" pos:end="3067:42">: <expr pos:start="3067:36" pos:end="3067:42"><name pos:start="3067:36" pos:end="3067:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="3069:9" pos:end="3069:54"><expr pos:start="3069:9" pos:end="3069:53"><call pos:start="3069:9" pos:end="3069:53"><name pos:start="3069:9" pos:end="3069:20">gen_check_io</name><argument_list pos:start="3069:21" pos:end="3069:53">(<argument pos:start="3069:22" pos:end="3069:22"><expr pos:start="3069:22" pos:end="3069:22"><name pos:start="3069:22" pos:end="3069:22">s</name></expr></argument>, <argument pos:start="3069:25" pos:end="3069:26"><expr pos:start="3069:25" pos:end="3069:26"><name pos:start="3069:25" pos:end="3069:26">ot</name></expr></argument>, <argument pos:start="3069:29" pos:end="3069:29"><expr pos:start="3069:29" pos:end="3069:29"><literal type="number" pos:start="3069:29" pos:end="3069:29">1</literal></expr></argument>, <argument pos:start="3069:32" pos:end="3069:52"><expr pos:start="3069:32" pos:end="3069:52"><name pos:start="3069:32" pos:end="3069:39">pc_start</name> <operator pos:start="3069:41" pos:end="3069:41">-</operator> <name pos:start="3069:43" pos:end="3069:52"><name pos:start="3069:43" pos:end="3069:43">s</name><operator pos:start="3069:44" pos:end="3069:45">-&gt;</operator><name pos:start="3069:46" pos:end="3069:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3071:9" pos:end="3079:9"><if pos:start="3071:9" pos:end="3075:9">if <condition pos:start="3071:12" pos:end="3071:52">(<expr pos:start="3071:13" pos:end="3071:51"><name pos:start="3071:13" pos:end="3071:20">prefixes</name> <operator pos:start="3071:22" pos:end="3071:22">&amp;</operator> <operator pos:start="3071:24" pos:end="3071:24">(</operator><name pos:start="3071:25" pos:end="3071:35">PREFIX_REPZ</name> <operator pos:start="3071:37" pos:end="3071:37">|</operator> <name pos:start="3071:39" pos:end="3071:50">PREFIX_REPNZ</name><operator pos:start="3071:51" pos:end="3071:51">)</operator></expr>)</condition> <block pos:start="3071:54" pos:end="3075:9">{<block_content pos:start="3073:13" pos:end="3073:76">

            <expr_stmt pos:start="3073:13" pos:end="3073:76"><expr pos:start="3073:13" pos:end="3073:75"><call pos:start="3073:13" pos:end="3073:75"><name pos:start="3073:13" pos:end="3073:25">gen_repz_outs</name><argument_list pos:start="3073:26" pos:end="3073:75">(<argument pos:start="3073:27" pos:end="3073:27"><expr pos:start="3073:27" pos:end="3073:27"><name pos:start="3073:27" pos:end="3073:27">s</name></expr></argument>, <argument pos:start="3073:30" pos:end="3073:31"><expr pos:start="3073:30" pos:end="3073:31"><name pos:start="3073:30" pos:end="3073:31">ot</name></expr></argument>, <argument pos:start="3073:34" pos:end="3073:54"><expr pos:start="3073:34" pos:end="3073:54"><name pos:start="3073:34" pos:end="3073:41">pc_start</name> <operator pos:start="3073:43" pos:end="3073:43">-</operator> <name pos:start="3073:45" pos:end="3073:54"><name pos:start="3073:45" pos:end="3073:45">s</name><operator pos:start="3073:46" pos:end="3073:47">-&gt;</operator><name pos:start="3073:48" pos:end="3073:54">cs_base</name></name></expr></argument>, <argument pos:start="3073:57" pos:end="3073:74"><expr pos:start="3073:57" pos:end="3073:74"><name pos:start="3073:57" pos:end="3073:61"><name pos:start="3073:57" pos:end="3073:57">s</name><operator pos:start="3073:58" pos:end="3073:59">-&gt;</operator><name pos:start="3073:60" pos:end="3073:61">pc</name></name> <operator pos:start="3073:63" pos:end="3073:63">-</operator> <name pos:start="3073:65" pos:end="3073:74"><name pos:start="3073:65" pos:end="3073:65">s</name><operator pos:start="3073:66" pos:end="3073:67">-&gt;</operator><name pos:start="3073:68" pos:end="3073:74">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3075:11" pos:end="3079:9">else <block pos:start="3075:16" pos:end="3079:9">{<block_content pos:start="3077:13" pos:end="3077:28">

            <expr_stmt pos:start="3077:13" pos:end="3077:28"><expr pos:start="3077:13" pos:end="3077:27"><call pos:start="3077:13" pos:end="3077:27"><name pos:start="3077:13" pos:end="3077:20">gen_outs</name><argument_list pos:start="3077:21" pos:end="3077:27">(<argument pos:start="3077:22" pos:end="3077:22"><expr pos:start="3077:22" pos:end="3077:22"><name pos:start="3077:22" pos:end="3077:22">s</name></expr></argument>, <argument pos:start="3077:25" pos:end="3077:26"><expr pos:start="3077:25" pos:end="3077:26"><name pos:start="3077:25" pos:end="3077:26">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3081:9" pos:end="3081:14">break;</break>



        <comment type="block" format="doxygen" pos:start="3085:9" pos:end="3085:34">/************************/</comment>

        <comment type="block" pos:start="3087:9" pos:end="3087:22">/* port I/O */</comment>

    <case pos:start="3089:5" pos:end="3089:14">case <expr pos:start="3089:10" pos:end="3089:13"><literal type="number" pos:start="3089:10" pos:end="3089:13">0xe4</literal></expr>:</case>

    <case pos:start="3091:5" pos:end="3091:14">case <expr pos:start="3091:10" pos:end="3091:13"><literal type="number" pos:start="3091:10" pos:end="3091:13">0xe5</literal></expr>:</case>

        <if_stmt pos:start="3093:9" pos:end="3099:43"><if pos:start="3093:9" pos:end="3095:25">if <condition pos:start="3093:12" pos:end="3093:25">(<expr pos:start="3093:13" pos:end="3093:24"><operator pos:start="3093:13" pos:end="3093:13">(</operator><name pos:start="3093:14" pos:end="3093:14">b</name> <operator pos:start="3093:16" pos:end="3093:16">&amp;</operator> <literal type="number" pos:start="3093:18" pos:end="3093:18">1</literal><operator pos:start="3093:19" pos:end="3093:19">)</operator> <operator pos:start="3093:21" pos:end="3093:22">==</operator> <literal type="number" pos:start="3093:24" pos:end="3093:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3095:13" pos:end="3095:25"><block_content pos:start="3095:13" pos:end="3095:25">

            <expr_stmt pos:start="3095:13" pos:end="3095:25"><expr pos:start="3095:13" pos:end="3095:24"><name pos:start="3095:13" pos:end="3095:14">ot</name> <operator pos:start="3095:16" pos:end="3095:16">=</operator> <name pos:start="3095:18" pos:end="3095:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3097:9" pos:end="3099:43">else<block type="pseudo" pos:start="3099:13" pos:end="3099:43"><block_content pos:start="3099:13" pos:end="3099:43">

            <expr_stmt pos:start="3099:13" pos:end="3099:43"><expr pos:start="3099:13" pos:end="3099:42"><name pos:start="3099:13" pos:end="3099:14">ot</name> <operator pos:start="3099:16" pos:end="3099:16">=</operator> <ternary pos:start="3099:18" pos:end="3099:42"><condition pos:start="3099:18" pos:end="3099:24"><expr pos:start="3099:18" pos:end="3099:22"><name pos:start="3099:18" pos:end="3099:22">dflag</name></expr> ?</condition><then pos:start="3099:26" pos:end="3099:32"> <expr pos:start="3099:26" pos:end="3099:32"><name pos:start="3099:26" pos:end="3099:32">OT_LONG</name></expr> </then><else pos:start="3099:34" pos:end="3099:42">: <expr pos:start="3099:36" pos:end="3099:42"><name pos:start="3099:36" pos:end="3099:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="3101:9" pos:end="3101:33"><expr pos:start="3101:9" pos:end="3101:32"><name pos:start="3101:9" pos:end="3101:11">val</name> <operator pos:start="3101:13" pos:end="3101:13">=</operator> <call pos:start="3101:15" pos:end="3101:32"><name pos:start="3101:15" pos:end="3101:23">ldub_code</name><argument_list pos:start="3101:24" pos:end="3101:32">(<argument pos:start="3101:25" pos:end="3101:31"><expr pos:start="3101:25" pos:end="3101:31"><name pos:start="3101:25" pos:end="3101:29"><name pos:start="3101:25" pos:end="3101:25">s</name><operator pos:start="3101:26" pos:end="3101:27">-&gt;</operator><name pos:start="3101:28" pos:end="3101:29">pc</name></name><operator pos:start="3101:30" pos:end="3101:31">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3103:9" pos:end="3103:31"><expr pos:start="3103:9" pos:end="3103:30"><call pos:start="3103:9" pos:end="3103:30"><name pos:start="3103:9" pos:end="3103:25">gen_op_movl_T0_im</name><argument_list pos:start="3103:26" pos:end="3103:30">(<argument pos:start="3103:27" pos:end="3103:29"><expr pos:start="3103:27" pos:end="3103:29"><name pos:start="3103:27" pos:end="3103:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3105:9" pos:end="3105:54"><expr pos:start="3105:9" pos:end="3105:53"><call pos:start="3105:9" pos:end="3105:53"><name pos:start="3105:9" pos:end="3105:20">gen_check_io</name><argument_list pos:start="3105:21" pos:end="3105:53">(<argument pos:start="3105:22" pos:end="3105:22"><expr pos:start="3105:22" pos:end="3105:22"><name pos:start="3105:22" pos:end="3105:22">s</name></expr></argument>, <argument pos:start="3105:25" pos:end="3105:26"><expr pos:start="3105:25" pos:end="3105:26"><name pos:start="3105:25" pos:end="3105:26">ot</name></expr></argument>, <argument pos:start="3105:29" pos:end="3105:29"><expr pos:start="3105:29" pos:end="3105:29"><literal type="number" pos:start="3105:29" pos:end="3105:29">0</literal></expr></argument>, <argument pos:start="3105:32" pos:end="3105:52"><expr pos:start="3105:32" pos:end="3105:52"><name pos:start="3105:32" pos:end="3105:39">pc_start</name> <operator pos:start="3105:41" pos:end="3105:41">-</operator> <name pos:start="3105:43" pos:end="3105:52"><name pos:start="3105:43" pos:end="3105:43">s</name><operator pos:start="3105:44" pos:end="3105:45">-&gt;</operator><name pos:start="3105:46" pos:end="3105:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3107:9" pos:end="3107:24"><expr pos:start="3107:9" pos:end="3107:23"><name pos:start="3107:9" pos:end="3107:21"><name pos:start="3107:9" pos:end="3107:17">gen_op_in</name><index pos:start="3107:18" pos:end="3107:21">[<expr pos:start="3107:19" pos:end="3107:20"><name pos:start="3107:19" pos:end="3107:20">ot</name></expr>]</index></name><operator pos:start="3107:22" pos:end="3107:22">(</operator><operator pos:start="3107:23" pos:end="3107:23">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3109:9" pos:end="3109:39"><expr pos:start="3109:9" pos:end="3109:38"><name pos:start="3109:9" pos:end="3109:36"><name pos:start="3109:9" pos:end="3109:25">gen_op_mov_reg_T1</name><index pos:start="3109:26" pos:end="3109:29">[<expr pos:start="3109:27" pos:end="3109:28"><name pos:start="3109:27" pos:end="3109:28">ot</name></expr>]</index><index pos:start="3109:30" pos:end="3109:36">[<expr pos:start="3109:31" pos:end="3109:35"><name pos:start="3109:31" pos:end="3109:35">R_EAX</name></expr>]</index></name><operator pos:start="3109:37" pos:end="3109:37">(</operator><operator pos:start="3109:38" pos:end="3109:38">)</operator></expr>;</expr_stmt>

        <break pos:start="3111:9" pos:end="3111:14">break;</break>

    <case pos:start="3113:5" pos:end="3113:14">case <expr pos:start="3113:10" pos:end="3113:13"><literal type="number" pos:start="3113:10" pos:end="3113:13">0xe6</literal></expr>:</case>

    <case pos:start="3115:5" pos:end="3115:14">case <expr pos:start="3115:10" pos:end="3115:13"><literal type="number" pos:start="3115:10" pos:end="3115:13">0xe7</literal></expr>:</case>

        <if_stmt pos:start="3117:9" pos:end="3123:43"><if pos:start="3117:9" pos:end="3119:25">if <condition pos:start="3117:12" pos:end="3117:25">(<expr pos:start="3117:13" pos:end="3117:24"><operator pos:start="3117:13" pos:end="3117:13">(</operator><name pos:start="3117:14" pos:end="3117:14">b</name> <operator pos:start="3117:16" pos:end="3117:16">&amp;</operator> <literal type="number" pos:start="3117:18" pos:end="3117:18">1</literal><operator pos:start="3117:19" pos:end="3117:19">)</operator> <operator pos:start="3117:21" pos:end="3117:22">==</operator> <literal type="number" pos:start="3117:24" pos:end="3117:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3119:13" pos:end="3119:25"><block_content pos:start="3119:13" pos:end="3119:25">

            <expr_stmt pos:start="3119:13" pos:end="3119:25"><expr pos:start="3119:13" pos:end="3119:24"><name pos:start="3119:13" pos:end="3119:14">ot</name> <operator pos:start="3119:16" pos:end="3119:16">=</operator> <name pos:start="3119:18" pos:end="3119:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3121:9" pos:end="3123:43">else<block type="pseudo" pos:start="3123:13" pos:end="3123:43"><block_content pos:start="3123:13" pos:end="3123:43">

            <expr_stmt pos:start="3123:13" pos:end="3123:43"><expr pos:start="3123:13" pos:end="3123:42"><name pos:start="3123:13" pos:end="3123:14">ot</name> <operator pos:start="3123:16" pos:end="3123:16">=</operator> <ternary pos:start="3123:18" pos:end="3123:42"><condition pos:start="3123:18" pos:end="3123:24"><expr pos:start="3123:18" pos:end="3123:22"><name pos:start="3123:18" pos:end="3123:22">dflag</name></expr> ?</condition><then pos:start="3123:26" pos:end="3123:32"> <expr pos:start="3123:26" pos:end="3123:32"><name pos:start="3123:26" pos:end="3123:32">OT_LONG</name></expr> </then><else pos:start="3123:34" pos:end="3123:42">: <expr pos:start="3123:36" pos:end="3123:42"><name pos:start="3123:36" pos:end="3123:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="3125:9" pos:end="3125:33"><expr pos:start="3125:9" pos:end="3125:32"><name pos:start="3125:9" pos:end="3125:11">val</name> <operator pos:start="3125:13" pos:end="3125:13">=</operator> <call pos:start="3125:15" pos:end="3125:32"><name pos:start="3125:15" pos:end="3125:23">ldub_code</name><argument_list pos:start="3125:24" pos:end="3125:32">(<argument pos:start="3125:25" pos:end="3125:31"><expr pos:start="3125:25" pos:end="3125:31"><name pos:start="3125:25" pos:end="3125:29"><name pos:start="3125:25" pos:end="3125:25">s</name><operator pos:start="3125:26" pos:end="3125:27">-&gt;</operator><name pos:start="3125:28" pos:end="3125:29">pc</name></name><operator pos:start="3125:30" pos:end="3125:31">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3127:9" pos:end="3127:31"><expr pos:start="3127:9" pos:end="3127:30"><call pos:start="3127:9" pos:end="3127:30"><name pos:start="3127:9" pos:end="3127:25">gen_op_movl_T0_im</name><argument_list pos:start="3127:26" pos:end="3127:30">(<argument pos:start="3127:27" pos:end="3127:29"><expr pos:start="3127:27" pos:end="3127:29"><name pos:start="3127:27" pos:end="3127:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3129:9" pos:end="3129:54"><expr pos:start="3129:9" pos:end="3129:53"><call pos:start="3129:9" pos:end="3129:53"><name pos:start="3129:9" pos:end="3129:20">gen_check_io</name><argument_list pos:start="3129:21" pos:end="3129:53">(<argument pos:start="3129:22" pos:end="3129:22"><expr pos:start="3129:22" pos:end="3129:22"><name pos:start="3129:22" pos:end="3129:22">s</name></expr></argument>, <argument pos:start="3129:25" pos:end="3129:26"><expr pos:start="3129:25" pos:end="3129:26"><name pos:start="3129:25" pos:end="3129:26">ot</name></expr></argument>, <argument pos:start="3129:29" pos:end="3129:29"><expr pos:start="3129:29" pos:end="3129:29"><literal type="number" pos:start="3129:29" pos:end="3129:29">0</literal></expr></argument>, <argument pos:start="3129:32" pos:end="3129:52"><expr pos:start="3129:32" pos:end="3129:52"><name pos:start="3129:32" pos:end="3129:39">pc_start</name> <operator pos:start="3129:41" pos:end="3129:41">-</operator> <name pos:start="3129:43" pos:end="3129:52"><name pos:start="3129:43" pos:end="3129:43">s</name><operator pos:start="3129:44" pos:end="3129:45">-&gt;</operator><name pos:start="3129:46" pos:end="3129:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3131:9" pos:end="3131:42"><expr pos:start="3131:9" pos:end="3131:41"><name pos:start="3131:9" pos:end="3131:39"><name pos:start="3131:9" pos:end="3131:25">gen_op_mov_TN_reg</name><index pos:start="3131:26" pos:end="3131:29">[<expr pos:start="3131:27" pos:end="3131:28"><name pos:start="3131:27" pos:end="3131:28">ot</name></expr>]</index><index pos:start="3131:30" pos:end="3131:32">[<expr pos:start="3131:31" pos:end="3131:31"><literal type="number" pos:start="3131:31" pos:end="3131:31">1</literal></expr>]</index><index pos:start="3131:33" pos:end="3131:39">[<expr pos:start="3131:34" pos:end="3131:38"><name pos:start="3131:34" pos:end="3131:38">R_EAX</name></expr>]</index></name><operator pos:start="3131:40" pos:end="3131:40">(</operator><operator pos:start="3131:41" pos:end="3131:41">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3133:9" pos:end="3133:25"><expr pos:start="3133:9" pos:end="3133:24"><name pos:start="3133:9" pos:end="3133:22"><name pos:start="3133:9" pos:end="3133:18">gen_op_out</name><index pos:start="3133:19" pos:end="3133:22">[<expr pos:start="3133:20" pos:end="3133:21"><name pos:start="3133:20" pos:end="3133:21">ot</name></expr>]</index></name><operator pos:start="3133:23" pos:end="3133:23">(</operator><operator pos:start="3133:24" pos:end="3133:24">)</operator></expr>;</expr_stmt>

        <break pos:start="3135:9" pos:end="3135:14">break;</break>

    <case pos:start="3137:5" pos:end="3137:14">case <expr pos:start="3137:10" pos:end="3137:13"><literal type="number" pos:start="3137:10" pos:end="3137:13">0xec</literal></expr>:</case>

    <case pos:start="3139:5" pos:end="3139:14">case <expr pos:start="3139:10" pos:end="3139:13"><literal type="number" pos:start="3139:10" pos:end="3139:13">0xed</literal></expr>:</case>

        <if_stmt pos:start="3141:9" pos:end="3147:43"><if pos:start="3141:9" pos:end="3143:25">if <condition pos:start="3141:12" pos:end="3141:25">(<expr pos:start="3141:13" pos:end="3141:24"><operator pos:start="3141:13" pos:end="3141:13">(</operator><name pos:start="3141:14" pos:end="3141:14">b</name> <operator pos:start="3141:16" pos:end="3141:16">&amp;</operator> <literal type="number" pos:start="3141:18" pos:end="3141:18">1</literal><operator pos:start="3141:19" pos:end="3141:19">)</operator> <operator pos:start="3141:21" pos:end="3141:22">==</operator> <literal type="number" pos:start="3141:24" pos:end="3141:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3143:13" pos:end="3143:25"><block_content pos:start="3143:13" pos:end="3143:25">

            <expr_stmt pos:start="3143:13" pos:end="3143:25"><expr pos:start="3143:13" pos:end="3143:24"><name pos:start="3143:13" pos:end="3143:14">ot</name> <operator pos:start="3143:16" pos:end="3143:16">=</operator> <name pos:start="3143:18" pos:end="3143:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3145:9" pos:end="3147:43">else<block type="pseudo" pos:start="3147:13" pos:end="3147:43"><block_content pos:start="3147:13" pos:end="3147:43">

            <expr_stmt pos:start="3147:13" pos:end="3147:43"><expr pos:start="3147:13" pos:end="3147:42"><name pos:start="3147:13" pos:end="3147:14">ot</name> <operator pos:start="3147:16" pos:end="3147:16">=</operator> <ternary pos:start="3147:18" pos:end="3147:42"><condition pos:start="3147:18" pos:end="3147:24"><expr pos:start="3147:18" pos:end="3147:22"><name pos:start="3147:18" pos:end="3147:22">dflag</name></expr> ?</condition><then pos:start="3147:26" pos:end="3147:32"> <expr pos:start="3147:26" pos:end="3147:32"><name pos:start="3147:26" pos:end="3147:32">OT_LONG</name></expr> </then><else pos:start="3147:34" pos:end="3147:42">: <expr pos:start="3147:36" pos:end="3147:42"><name pos:start="3147:36" pos:end="3147:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="3149:9" pos:end="3149:47"><expr pos:start="3149:9" pos:end="3149:46"><name pos:start="3149:9" pos:end="3149:44"><name pos:start="3149:9" pos:end="3149:25">gen_op_mov_TN_reg</name><index pos:start="3149:26" pos:end="3149:34">[<expr pos:start="3149:27" pos:end="3149:33"><name pos:start="3149:27" pos:end="3149:33">OT_WORD</name></expr>]</index><index pos:start="3149:35" pos:end="3149:37">[<expr pos:start="3149:36" pos:end="3149:36"><literal type="number" pos:start="3149:36" pos:end="3149:36">0</literal></expr>]</index><index pos:start="3149:38" pos:end="3149:44">[<expr pos:start="3149:39" pos:end="3149:43"><name pos:start="3149:39" pos:end="3149:43">R_EDX</name></expr>]</index></name><operator pos:start="3149:45" pos:end="3149:45">(</operator><operator pos:start="3149:46" pos:end="3149:46">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3151:9" pos:end="3151:30"><expr pos:start="3151:9" pos:end="3151:29"><call pos:start="3151:9" pos:end="3151:29"><name pos:start="3151:9" pos:end="3151:27">gen_op_andl_T0_ffff</name><argument_list pos:start="3151:28" pos:end="3151:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3153:9" pos:end="3153:54"><expr pos:start="3153:9" pos:end="3153:53"><call pos:start="3153:9" pos:end="3153:53"><name pos:start="3153:9" pos:end="3153:20">gen_check_io</name><argument_list pos:start="3153:21" pos:end="3153:53">(<argument pos:start="3153:22" pos:end="3153:22"><expr pos:start="3153:22" pos:end="3153:22"><name pos:start="3153:22" pos:end="3153:22">s</name></expr></argument>, <argument pos:start="3153:25" pos:end="3153:26"><expr pos:start="3153:25" pos:end="3153:26"><name pos:start="3153:25" pos:end="3153:26">ot</name></expr></argument>, <argument pos:start="3153:29" pos:end="3153:29"><expr pos:start="3153:29" pos:end="3153:29"><literal type="number" pos:start="3153:29" pos:end="3153:29">0</literal></expr></argument>, <argument pos:start="3153:32" pos:end="3153:52"><expr pos:start="3153:32" pos:end="3153:52"><name pos:start="3153:32" pos:end="3153:39">pc_start</name> <operator pos:start="3153:41" pos:end="3153:41">-</operator> <name pos:start="3153:43" pos:end="3153:52"><name pos:start="3153:43" pos:end="3153:43">s</name><operator pos:start="3153:44" pos:end="3153:45">-&gt;</operator><name pos:start="3153:46" pos:end="3153:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3155:9" pos:end="3155:24"><expr pos:start="3155:9" pos:end="3155:23"><name pos:start="3155:9" pos:end="3155:21"><name pos:start="3155:9" pos:end="3155:17">gen_op_in</name><index pos:start="3155:18" pos:end="3155:21">[<expr pos:start="3155:19" pos:end="3155:20"><name pos:start="3155:19" pos:end="3155:20">ot</name></expr>]</index></name><operator pos:start="3155:22" pos:end="3155:22">(</operator><operator pos:start="3155:23" pos:end="3155:23">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3157:9" pos:end="3157:39"><expr pos:start="3157:9" pos:end="3157:38"><name pos:start="3157:9" pos:end="3157:36"><name pos:start="3157:9" pos:end="3157:25">gen_op_mov_reg_T1</name><index pos:start="3157:26" pos:end="3157:29">[<expr pos:start="3157:27" pos:end="3157:28"><name pos:start="3157:27" pos:end="3157:28">ot</name></expr>]</index><index pos:start="3157:30" pos:end="3157:36">[<expr pos:start="3157:31" pos:end="3157:35"><name pos:start="3157:31" pos:end="3157:35">R_EAX</name></expr>]</index></name><operator pos:start="3157:37" pos:end="3157:37">(</operator><operator pos:start="3157:38" pos:end="3157:38">)</operator></expr>;</expr_stmt>

        <break pos:start="3159:9" pos:end="3159:14">break;</break>

    <case pos:start="3161:5" pos:end="3161:14">case <expr pos:start="3161:10" pos:end="3161:13"><literal type="number" pos:start="3161:10" pos:end="3161:13">0xee</literal></expr>:</case>

    <case pos:start="3163:5" pos:end="3163:14">case <expr pos:start="3163:10" pos:end="3163:13"><literal type="number" pos:start="3163:10" pos:end="3163:13">0xef</literal></expr>:</case>

        <if_stmt pos:start="3165:9" pos:end="3171:43"><if pos:start="3165:9" pos:end="3167:25">if <condition pos:start="3165:12" pos:end="3165:25">(<expr pos:start="3165:13" pos:end="3165:24"><operator pos:start="3165:13" pos:end="3165:13">(</operator><name pos:start="3165:14" pos:end="3165:14">b</name> <operator pos:start="3165:16" pos:end="3165:16">&amp;</operator> <literal type="number" pos:start="3165:18" pos:end="3165:18">1</literal><operator pos:start="3165:19" pos:end="3165:19">)</operator> <operator pos:start="3165:21" pos:end="3165:22">==</operator> <literal type="number" pos:start="3165:24" pos:end="3165:24">0</literal></expr>)</condition><block type="pseudo" pos:start="3167:13" pos:end="3167:25"><block_content pos:start="3167:13" pos:end="3167:25">

            <expr_stmt pos:start="3167:13" pos:end="3167:25"><expr pos:start="3167:13" pos:end="3167:24"><name pos:start="3167:13" pos:end="3167:14">ot</name> <operator pos:start="3167:16" pos:end="3167:16">=</operator> <name pos:start="3167:18" pos:end="3167:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3169:9" pos:end="3171:43">else<block type="pseudo" pos:start="3171:13" pos:end="3171:43"><block_content pos:start="3171:13" pos:end="3171:43">

            <expr_stmt pos:start="3171:13" pos:end="3171:43"><expr pos:start="3171:13" pos:end="3171:42"><name pos:start="3171:13" pos:end="3171:14">ot</name> <operator pos:start="3171:16" pos:end="3171:16">=</operator> <ternary pos:start="3171:18" pos:end="3171:42"><condition pos:start="3171:18" pos:end="3171:24"><expr pos:start="3171:18" pos:end="3171:22"><name pos:start="3171:18" pos:end="3171:22">dflag</name></expr> ?</condition><then pos:start="3171:26" pos:end="3171:32"> <expr pos:start="3171:26" pos:end="3171:32"><name pos:start="3171:26" pos:end="3171:32">OT_LONG</name></expr> </then><else pos:start="3171:34" pos:end="3171:42">: <expr pos:start="3171:36" pos:end="3171:42"><name pos:start="3171:36" pos:end="3171:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="3173:9" pos:end="3173:47"><expr pos:start="3173:9" pos:end="3173:46"><name pos:start="3173:9" pos:end="3173:44"><name pos:start="3173:9" pos:end="3173:25">gen_op_mov_TN_reg</name><index pos:start="3173:26" pos:end="3173:34">[<expr pos:start="3173:27" pos:end="3173:33"><name pos:start="3173:27" pos:end="3173:33">OT_WORD</name></expr>]</index><index pos:start="3173:35" pos:end="3173:37">[<expr pos:start="3173:36" pos:end="3173:36"><literal type="number" pos:start="3173:36" pos:end="3173:36">0</literal></expr>]</index><index pos:start="3173:38" pos:end="3173:44">[<expr pos:start="3173:39" pos:end="3173:43"><name pos:start="3173:39" pos:end="3173:43">R_EDX</name></expr>]</index></name><operator pos:start="3173:45" pos:end="3173:45">(</operator><operator pos:start="3173:46" pos:end="3173:46">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3175:9" pos:end="3175:30"><expr pos:start="3175:9" pos:end="3175:29"><call pos:start="3175:9" pos:end="3175:29"><name pos:start="3175:9" pos:end="3175:27">gen_op_andl_T0_ffff</name><argument_list pos:start="3175:28" pos:end="3175:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3177:9" pos:end="3177:54"><expr pos:start="3177:9" pos:end="3177:53"><call pos:start="3177:9" pos:end="3177:53"><name pos:start="3177:9" pos:end="3177:20">gen_check_io</name><argument_list pos:start="3177:21" pos:end="3177:53">(<argument pos:start="3177:22" pos:end="3177:22"><expr pos:start="3177:22" pos:end="3177:22"><name pos:start="3177:22" pos:end="3177:22">s</name></expr></argument>, <argument pos:start="3177:25" pos:end="3177:26"><expr pos:start="3177:25" pos:end="3177:26"><name pos:start="3177:25" pos:end="3177:26">ot</name></expr></argument>, <argument pos:start="3177:29" pos:end="3177:29"><expr pos:start="3177:29" pos:end="3177:29"><literal type="number" pos:start="3177:29" pos:end="3177:29">0</literal></expr></argument>, <argument pos:start="3177:32" pos:end="3177:52"><expr pos:start="3177:32" pos:end="3177:52"><name pos:start="3177:32" pos:end="3177:39">pc_start</name> <operator pos:start="3177:41" pos:end="3177:41">-</operator> <name pos:start="3177:43" pos:end="3177:52"><name pos:start="3177:43" pos:end="3177:43">s</name><operator pos:start="3177:44" pos:end="3177:45">-&gt;</operator><name pos:start="3177:46" pos:end="3177:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3179:9" pos:end="3179:42"><expr pos:start="3179:9" pos:end="3179:41"><name pos:start="3179:9" pos:end="3179:39"><name pos:start="3179:9" pos:end="3179:25">gen_op_mov_TN_reg</name><index pos:start="3179:26" pos:end="3179:29">[<expr pos:start="3179:27" pos:end="3179:28"><name pos:start="3179:27" pos:end="3179:28">ot</name></expr>]</index><index pos:start="3179:30" pos:end="3179:32">[<expr pos:start="3179:31" pos:end="3179:31"><literal type="number" pos:start="3179:31" pos:end="3179:31">1</literal></expr>]</index><index pos:start="3179:33" pos:end="3179:39">[<expr pos:start="3179:34" pos:end="3179:38"><name pos:start="3179:34" pos:end="3179:38">R_EAX</name></expr>]</index></name><operator pos:start="3179:40" pos:end="3179:40">(</operator><operator pos:start="3179:41" pos:end="3179:41">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3181:9" pos:end="3181:25"><expr pos:start="3181:9" pos:end="3181:24"><name pos:start="3181:9" pos:end="3181:22"><name pos:start="3181:9" pos:end="3181:18">gen_op_out</name><index pos:start="3181:19" pos:end="3181:22">[<expr pos:start="3181:20" pos:end="3181:21"><name pos:start="3181:20" pos:end="3181:21">ot</name></expr>]</index></name><operator pos:start="3181:23" pos:end="3181:23">(</operator><operator pos:start="3181:24" pos:end="3181:24">)</operator></expr>;</expr_stmt>

        <break pos:start="3183:9" pos:end="3183:14">break;</break>



        <comment type="block" format="doxygen" pos:start="3187:9" pos:end="3187:34">/************************/</comment>

        <comment type="block" pos:start="3189:9" pos:end="3189:21">/* control */</comment>

    <case pos:start="3191:5" pos:end="3191:14">case <expr pos:start="3191:10" pos:end="3191:13"><literal type="number" pos:start="3191:10" pos:end="3191:13">0xc2</literal></expr>:</case> <comment type="block" pos:start="3191:16" pos:end="3191:27">/* ret im */</comment>

        <expr_stmt pos:start="3193:9" pos:end="3193:31"><expr pos:start="3193:9" pos:end="3193:30"><name pos:start="3193:9" pos:end="3193:11">val</name> <operator pos:start="3193:13" pos:end="3193:13">=</operator> <call pos:start="3193:15" pos:end="3193:30"><name pos:start="3193:15" pos:end="3193:23">ldsw_code</name><argument_list pos:start="3193:24" pos:end="3193:30">(<argument pos:start="3193:25" pos:end="3193:29"><expr pos:start="3193:25" pos:end="3193:29"><name pos:start="3193:25" pos:end="3193:29"><name pos:start="3193:25" pos:end="3193:25">s</name><operator pos:start="3193:26" pos:end="3193:27">-&gt;</operator><name pos:start="3193:28" pos:end="3193:29">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3195:9" pos:end="3195:19"><expr pos:start="3195:9" pos:end="3195:18"><name pos:start="3195:9" pos:end="3195:13"><name pos:start="3195:9" pos:end="3195:9">s</name><operator pos:start="3195:10" pos:end="3195:11">-&gt;</operator><name pos:start="3195:12" pos:end="3195:13">pc</name></name> <operator pos:start="3195:15" pos:end="3195:16">+=</operator> <literal type="number" pos:start="3195:18" pos:end="3195:18">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3197:9" pos:end="3197:22"><expr pos:start="3197:9" pos:end="3197:21"><call pos:start="3197:9" pos:end="3197:21"><name pos:start="3197:9" pos:end="3197:18">gen_pop_T0</name><argument_list pos:start="3197:19" pos:end="3197:21">(<argument pos:start="3197:20" pos:end="3197:20"><expr pos:start="3197:20" pos:end="3197:20"><name pos:start="3197:20" pos:end="3197:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3199:9" pos:end="3199:51"><expr pos:start="3199:9" pos:end="3199:50"><call pos:start="3199:9" pos:end="3199:50"><name pos:start="3199:9" pos:end="3199:24">gen_stack_update</name><argument_list pos:start="3199:25" pos:end="3199:50">(<argument pos:start="3199:26" pos:end="3199:26"><expr pos:start="3199:26" pos:end="3199:26"><name pos:start="3199:26" pos:end="3199:26">s</name></expr></argument>, <argument pos:start="3199:29" pos:end="3199:49"><expr pos:start="3199:29" pos:end="3199:49"><name pos:start="3199:29" pos:end="3199:31">val</name> <operator pos:start="3199:33" pos:end="3199:33">+</operator> <operator pos:start="3199:35" pos:end="3199:35">(</operator><literal type="number" pos:start="3199:36" pos:end="3199:36">2</literal> <operator pos:start="3199:38" pos:end="3199:39">&lt;&lt;</operator> <name pos:start="3199:41" pos:end="3199:48"><name pos:start="3199:41" pos:end="3199:41">s</name><operator pos:start="3199:42" pos:end="3199:43">-&gt;</operator><name pos:start="3199:44" pos:end="3199:48">dflag</name></name><operator pos:start="3199:49" pos:end="3199:49">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3201:9" pos:end="3203:34"><if pos:start="3201:9" pos:end="3203:34">if <condition pos:start="3201:12" pos:end="3201:26">(<expr pos:start="3201:13" pos:end="3201:25"><name pos:start="3201:13" pos:end="3201:20"><name pos:start="3201:13" pos:end="3201:13">s</name><operator pos:start="3201:14" pos:end="3201:15">-&gt;</operator><name pos:start="3201:16" pos:end="3201:20">dflag</name></name> <operator pos:start="3201:22" pos:end="3201:23">==</operator> <literal type="number" pos:start="3201:25" pos:end="3201:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3203:13" pos:end="3203:34"><block_content pos:start="3203:13" pos:end="3203:34">

            <expr_stmt pos:start="3203:13" pos:end="3203:34"><expr pos:start="3203:13" pos:end="3203:33"><call pos:start="3203:13" pos:end="3203:33"><name pos:start="3203:13" pos:end="3203:31">gen_op_andl_T0_ffff</name><argument_list pos:start="3203:32" pos:end="3203:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3205:9" pos:end="3205:24"><expr pos:start="3205:9" pos:end="3205:23"><call pos:start="3205:9" pos:end="3205:23"><name pos:start="3205:9" pos:end="3205:21">gen_op_jmp_T0</name><argument_list pos:start="3205:22" pos:end="3205:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3207:9" pos:end="3207:19"><expr pos:start="3207:9" pos:end="3207:18"><call pos:start="3207:9" pos:end="3207:18"><name pos:start="3207:9" pos:end="3207:15">gen_eob</name><argument_list pos:start="3207:16" pos:end="3207:18">(<argument pos:start="3207:17" pos:end="3207:17"><expr pos:start="3207:17" pos:end="3207:17"><name pos:start="3207:17" pos:end="3207:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3209:9" pos:end="3209:14">break;</break>

    <case pos:start="3211:5" pos:end="3211:14">case <expr pos:start="3211:10" pos:end="3211:13"><literal type="number" pos:start="3211:10" pos:end="3211:13">0xc3</literal></expr>:</case> <comment type="block" pos:start="3211:16" pos:end="3211:24">/* ret */</comment>

        <expr_stmt pos:start="3213:9" pos:end="3213:22"><expr pos:start="3213:9" pos:end="3213:21"><call pos:start="3213:9" pos:end="3213:21"><name pos:start="3213:9" pos:end="3213:18">gen_pop_T0</name><argument_list pos:start="3213:19" pos:end="3213:21">(<argument pos:start="3213:20" pos:end="3213:20"><expr pos:start="3213:20" pos:end="3213:20"><name pos:start="3213:20" pos:end="3213:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3215:9" pos:end="3215:26"><expr pos:start="3215:9" pos:end="3215:25"><call pos:start="3215:9" pos:end="3215:25"><name pos:start="3215:9" pos:end="3215:22">gen_pop_update</name><argument_list pos:start="3215:23" pos:end="3215:25">(<argument pos:start="3215:24" pos:end="3215:24"><expr pos:start="3215:24" pos:end="3215:24"><name pos:start="3215:24" pos:end="3215:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3217:9" pos:end="3219:34"><if pos:start="3217:9" pos:end="3219:34">if <condition pos:start="3217:12" pos:end="3217:26">(<expr pos:start="3217:13" pos:end="3217:25"><name pos:start="3217:13" pos:end="3217:20"><name pos:start="3217:13" pos:end="3217:13">s</name><operator pos:start="3217:14" pos:end="3217:15">-&gt;</operator><name pos:start="3217:16" pos:end="3217:20">dflag</name></name> <operator pos:start="3217:22" pos:end="3217:23">==</operator> <literal type="number" pos:start="3217:25" pos:end="3217:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3219:13" pos:end="3219:34"><block_content pos:start="3219:13" pos:end="3219:34">

            <expr_stmt pos:start="3219:13" pos:end="3219:34"><expr pos:start="3219:13" pos:end="3219:33"><call pos:start="3219:13" pos:end="3219:33"><name pos:start="3219:13" pos:end="3219:31">gen_op_andl_T0_ffff</name><argument_list pos:start="3219:32" pos:end="3219:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3221:9" pos:end="3221:24"><expr pos:start="3221:9" pos:end="3221:23"><call pos:start="3221:9" pos:end="3221:23"><name pos:start="3221:9" pos:end="3221:21">gen_op_jmp_T0</name><argument_list pos:start="3221:22" pos:end="3221:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3223:9" pos:end="3223:19"><expr pos:start="3223:9" pos:end="3223:18"><call pos:start="3223:9" pos:end="3223:18"><name pos:start="3223:9" pos:end="3223:15">gen_eob</name><argument_list pos:start="3223:16" pos:end="3223:18">(<argument pos:start="3223:17" pos:end="3223:17"><expr pos:start="3223:17" pos:end="3223:17"><name pos:start="3223:17" pos:end="3223:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3225:9" pos:end="3225:14">break;</break>

    <case pos:start="3227:5" pos:end="3227:14">case <expr pos:start="3227:10" pos:end="3227:13"><literal type="number" pos:start="3227:10" pos:end="3227:13">0xca</literal></expr>:</case> <comment type="block" pos:start="3227:16" pos:end="3227:28">/* lret im */</comment>

        <expr_stmt pos:start="3229:9" pos:end="3229:31"><expr pos:start="3229:9" pos:end="3229:30"><name pos:start="3229:9" pos:end="3229:11">val</name> <operator pos:start="3229:13" pos:end="3229:13">=</operator> <call pos:start="3229:15" pos:end="3229:30"><name pos:start="3229:15" pos:end="3229:23">ldsw_code</name><argument_list pos:start="3229:24" pos:end="3229:30">(<argument pos:start="3229:25" pos:end="3229:29"><expr pos:start="3229:25" pos:end="3229:29"><name pos:start="3229:25" pos:end="3229:29"><name pos:start="3229:25" pos:end="3229:25">s</name><operator pos:start="3229:26" pos:end="3229:27">-&gt;</operator><name pos:start="3229:28" pos:end="3229:29">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3231:9" pos:end="3231:19"><expr pos:start="3231:9" pos:end="3231:18"><name pos:start="3231:9" pos:end="3231:13"><name pos:start="3231:9" pos:end="3231:9">s</name><operator pos:start="3231:10" pos:end="3231:11">-&gt;</operator><name pos:start="3231:12" pos:end="3231:13">pc</name></name> <operator pos:start="3231:15" pos:end="3231:16">+=</operator> <literal type="number" pos:start="3231:18" pos:end="3231:18">2</literal></expr>;</expr_stmt>

    <label pos:start="3233:5" pos:end="3233:12"><name pos:start="3233:5" pos:end="3233:11">do_lret</name>:</label>

        <if_stmt pos:start="3235:9" pos:end="3275:9"><if pos:start="3235:9" pos:end="3245:9">if <condition pos:start="3235:12" pos:end="3235:30">(<expr pos:start="3235:13" pos:end="3235:29"><name pos:start="3235:13" pos:end="3235:17"><name pos:start="3235:13" pos:end="3235:13">s</name><operator pos:start="3235:14" pos:end="3235:15">-&gt;</operator><name pos:start="3235:16" pos:end="3235:17">pe</name></name> <operator pos:start="3235:19" pos:end="3235:20">&amp;&amp;</operator> <operator pos:start="3235:22" pos:end="3235:22">!</operator><name pos:start="3235:23" pos:end="3235:29"><name pos:start="3235:23" pos:end="3235:23">s</name><operator pos:start="3235:24" pos:end="3235:25">-&gt;</operator><name pos:start="3235:26" pos:end="3235:29">vm86</name></name></expr>)</condition> <block pos:start="3235:32" pos:end="3245:9">{<block_content pos:start="3237:13" pos:end="3243:49">

            <if_stmt pos:start="3237:13" pos:end="3239:43"><if pos:start="3237:13" pos:end="3239:43">if <condition pos:start="3237:16" pos:end="3237:42">(<expr pos:start="3237:17" pos:end="3237:41"><name pos:start="3237:17" pos:end="3237:24"><name pos:start="3237:17" pos:end="3237:17">s</name><operator pos:start="3237:18" pos:end="3237:19">-&gt;</operator><name pos:start="3237:20" pos:end="3237:24">cc_op</name></name> <operator pos:start="3237:26" pos:end="3237:27">!=</operator> <name pos:start="3237:29" pos:end="3237:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3239:17" pos:end="3239:43"><block_content pos:start="3239:17" pos:end="3239:43">

                <expr_stmt pos:start="3239:17" pos:end="3239:43"><expr pos:start="3239:17" pos:end="3239:42"><call pos:start="3239:17" pos:end="3239:42"><name pos:start="3239:17" pos:end="3239:32">gen_op_set_cc_op</name><argument_list pos:start="3239:33" pos:end="3239:42">(<argument pos:start="3239:34" pos:end="3239:41"><expr pos:start="3239:34" pos:end="3239:41"><name pos:start="3239:34" pos:end="3239:41"><name pos:start="3239:34" pos:end="3239:34">s</name><operator pos:start="3239:35" pos:end="3239:36">-&gt;</operator><name pos:start="3239:37" pos:end="3239:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="3241:13" pos:end="3241:49"><expr pos:start="3241:13" pos:end="3241:48"><call pos:start="3241:13" pos:end="3241:48"><name pos:start="3241:13" pos:end="3241:25">gen_op_jmp_im</name><argument_list pos:start="3241:26" pos:end="3241:48">(<argument pos:start="3241:27" pos:end="3241:47"><expr pos:start="3241:27" pos:end="3241:47"><name pos:start="3241:27" pos:end="3241:34">pc_start</name> <operator pos:start="3241:36" pos:end="3241:36">-</operator> <name pos:start="3241:38" pos:end="3241:47"><name pos:start="3241:38" pos:end="3241:38">s</name><operator pos:start="3241:39" pos:end="3241:40">-&gt;</operator><name pos:start="3241:41" pos:end="3241:47">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3243:13" pos:end="3243:49"><expr pos:start="3243:13" pos:end="3243:48"><call pos:start="3243:13" pos:end="3243:48"><name pos:start="3243:13" pos:end="3243:33">gen_op_lret_protected</name><argument_list pos:start="3243:34" pos:end="3243:48">(<argument pos:start="3243:35" pos:end="3243:42"><expr pos:start="3243:35" pos:end="3243:42"><name pos:start="3243:35" pos:end="3243:42"><name pos:start="3243:35" pos:end="3243:35">s</name><operator pos:start="3243:36" pos:end="3243:37">-&gt;</operator><name pos:start="3243:38" pos:end="3243:42">dflag</name></name></expr></argument>, <argument pos:start="3243:45" pos:end="3243:47"><expr pos:start="3243:45" pos:end="3243:47"><name pos:start="3243:45" pos:end="3243:47">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3245:11" pos:end="3275:9">else <block pos:start="3245:16" pos:end="3275:9">{<block_content pos:start="3247:13" pos:end="3273:55">

            <expr_stmt pos:start="3247:13" pos:end="3247:28"><expr pos:start="3247:13" pos:end="3247:27"><call pos:start="3247:13" pos:end="3247:27"><name pos:start="3247:13" pos:end="3247:24">gen_stack_A0</name><argument_list pos:start="3247:25" pos:end="3247:27">(<argument pos:start="3247:26" pos:end="3247:26"><expr pos:start="3247:26" pos:end="3247:26"><name pos:start="3247:26" pos:end="3247:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="3249:13" pos:end="3249:28">/* pop offset */</comment>

            <expr_stmt pos:start="3251:13" pos:end="3251:59"><expr pos:start="3251:13" pos:end="3251:58"><name pos:start="3251:13" pos:end="3251:56"><name pos:start="3251:13" pos:end="3251:27">gen_op_ld_T0_A0</name><index pos:start="3251:28" pos:end="3251:56">[<expr pos:start="3251:29" pos:end="3251:55"><literal type="number" pos:start="3251:29" pos:end="3251:29">1</literal> <operator pos:start="3251:31" pos:end="3251:31">+</operator> <name pos:start="3251:33" pos:end="3251:40"><name pos:start="3251:33" pos:end="3251:33">s</name><operator pos:start="3251:34" pos:end="3251:35">-&gt;</operator><name pos:start="3251:36" pos:end="3251:40">dflag</name></name> <operator pos:start="3251:42" pos:end="3251:42">+</operator> <name pos:start="3251:44" pos:end="3251:55"><name pos:start="3251:44" pos:end="3251:44">s</name><operator pos:start="3251:45" pos:end="3251:46">-&gt;</operator><name pos:start="3251:47" pos:end="3251:55">mem_index</name></name></expr>]</index></name><operator pos:start="3251:57" pos:end="3251:57">(</operator><operator pos:start="3251:58" pos:end="3251:58">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="3253:13" pos:end="3255:38"><if pos:start="3253:13" pos:end="3255:38">if <condition pos:start="3253:16" pos:end="3253:30">(<expr pos:start="3253:17" pos:end="3253:29"><name pos:start="3253:17" pos:end="3253:24"><name pos:start="3253:17" pos:end="3253:17">s</name><operator pos:start="3253:18" pos:end="3253:19">-&gt;</operator><name pos:start="3253:20" pos:end="3253:24">dflag</name></name> <operator pos:start="3253:26" pos:end="3253:27">==</operator> <literal type="number" pos:start="3253:29" pos:end="3253:29">0</literal></expr>)</condition><block type="pseudo" pos:start="3255:17" pos:end="3255:38"><block_content pos:start="3255:17" pos:end="3255:38">

                <expr_stmt pos:start="3255:17" pos:end="3255:38"><expr pos:start="3255:17" pos:end="3255:37"><call pos:start="3255:17" pos:end="3255:37"><name pos:start="3255:17" pos:end="3255:35">gen_op_andl_T0_ffff</name><argument_list pos:start="3255:36" pos:end="3255:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block" pos:start="3257:13" pos:end="3259:27">/* NOTE: keeping EIP updated is not a problem in case of

               exception */</comment>

            <expr_stmt pos:start="3261:13" pos:end="3261:28"><expr pos:start="3261:13" pos:end="3261:27"><call pos:start="3261:13" pos:end="3261:27"><name pos:start="3261:13" pos:end="3261:25">gen_op_jmp_T0</name><argument_list pos:start="3261:26" pos:end="3261:27">()</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="3263:13" pos:end="3263:30">/* pop selector */</comment>

            <expr_stmt pos:start="3265:13" pos:end="3265:45"><expr pos:start="3265:13" pos:end="3265:44"><call pos:start="3265:13" pos:end="3265:44"><name pos:start="3265:13" pos:end="3265:29">gen_op_addl_A0_im</name><argument_list pos:start="3265:30" pos:end="3265:44">(<argument pos:start="3265:31" pos:end="3265:43"><expr pos:start="3265:31" pos:end="3265:43"><literal type="number" pos:start="3265:31" pos:end="3265:31">2</literal> <operator pos:start="3265:33" pos:end="3265:34">&lt;&lt;</operator> <name pos:start="3265:36" pos:end="3265:43"><name pos:start="3265:36" pos:end="3265:36">s</name><operator pos:start="3265:37" pos:end="3265:38">-&gt;</operator><name pos:start="3265:39" pos:end="3265:43">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3267:13" pos:end="3267:59"><expr pos:start="3267:13" pos:end="3267:58"><name pos:start="3267:13" pos:end="3267:56"><name pos:start="3267:13" pos:end="3267:27">gen_op_ld_T0_A0</name><index pos:start="3267:28" pos:end="3267:56">[<expr pos:start="3267:29" pos:end="3267:55"><literal type="number" pos:start="3267:29" pos:end="3267:29">1</literal> <operator pos:start="3267:31" pos:end="3267:31">+</operator> <name pos:start="3267:33" pos:end="3267:40"><name pos:start="3267:33" pos:end="3267:33">s</name><operator pos:start="3267:34" pos:end="3267:35">-&gt;</operator><name pos:start="3267:36" pos:end="3267:40">dflag</name></name> <operator pos:start="3267:42" pos:end="3267:42">+</operator> <name pos:start="3267:44" pos:end="3267:55"><name pos:start="3267:44" pos:end="3267:44">s</name><operator pos:start="3267:45" pos:end="3267:46">-&gt;</operator><name pos:start="3267:47" pos:end="3267:55">mem_index</name></name></expr>]</index></name><operator pos:start="3267:57" pos:end="3267:57">(</operator><operator pos:start="3267:58" pos:end="3267:58">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="3269:13" pos:end="3269:68"><expr pos:start="3269:13" pos:end="3269:67"><call pos:start="3269:13" pos:end="3269:67"><name pos:start="3269:13" pos:end="3269:33">gen_op_movl_seg_T0_vm</name><argument_list pos:start="3269:34" pos:end="3269:67">(<argument pos:start="3269:35" pos:end="3269:66"><expr pos:start="3269:35" pos:end="3269:66"><call pos:start="3269:35" pos:end="3269:66"><name pos:start="3269:35" pos:end="3269:42">offsetof</name><argument_list pos:start="3269:43" pos:end="3269:66">(<argument pos:start="3269:44" pos:end="3269:54"><expr pos:start="3269:44" pos:end="3269:54"><name pos:start="3269:44" pos:end="3269:54">CPUX86State</name></expr></argument>,<argument pos:start="3269:56" pos:end="3269:65"><expr pos:start="3269:56" pos:end="3269:65"><name pos:start="3269:56" pos:end="3269:65"><name pos:start="3269:56" pos:end="3269:59">segs</name><index pos:start="3269:60" pos:end="3269:65">[<expr pos:start="3269:61" pos:end="3269:64"><name pos:start="3269:61" pos:end="3269:64">R_CS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="3271:13" pos:end="3271:34">/* add stack offset */</comment>

            <expr_stmt pos:start="3273:13" pos:end="3273:55"><expr pos:start="3273:13" pos:end="3273:54"><call pos:start="3273:13" pos:end="3273:54"><name pos:start="3273:13" pos:end="3273:28">gen_stack_update</name><argument_list pos:start="3273:29" pos:end="3273:54">(<argument pos:start="3273:30" pos:end="3273:30"><expr pos:start="3273:30" pos:end="3273:30"><name pos:start="3273:30" pos:end="3273:30">s</name></expr></argument>, <argument pos:start="3273:33" pos:end="3273:53"><expr pos:start="3273:33" pos:end="3273:53"><name pos:start="3273:33" pos:end="3273:35">val</name> <operator pos:start="3273:37" pos:end="3273:37">+</operator> <operator pos:start="3273:39" pos:end="3273:39">(</operator><literal type="number" pos:start="3273:40" pos:end="3273:40">4</literal> <operator pos:start="3273:42" pos:end="3273:43">&lt;&lt;</operator> <name pos:start="3273:45" pos:end="3273:52"><name pos:start="3273:45" pos:end="3273:45">s</name><operator pos:start="3273:46" pos:end="3273:47">-&gt;</operator><name pos:start="3273:48" pos:end="3273:52">dflag</name></name><operator pos:start="3273:53" pos:end="3273:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="3277:9" pos:end="3277:19"><expr pos:start="3277:9" pos:end="3277:18"><call pos:start="3277:9" pos:end="3277:18"><name pos:start="3277:9" pos:end="3277:15">gen_eob</name><argument_list pos:start="3277:16" pos:end="3277:18">(<argument pos:start="3277:17" pos:end="3277:17"><expr pos:start="3277:17" pos:end="3277:17"><name pos:start="3277:17" pos:end="3277:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3279:9" pos:end="3279:14">break;</break>

    <case pos:start="3281:5" pos:end="3281:14">case <expr pos:start="3281:10" pos:end="3281:13"><literal type="number" pos:start="3281:10" pos:end="3281:13">0xcb</literal></expr>:</case> <comment type="block" pos:start="3281:16" pos:end="3281:25">/* lret */</comment>

        <expr_stmt pos:start="3283:9" pos:end="3283:16"><expr pos:start="3283:9" pos:end="3283:15"><name pos:start="3283:9" pos:end="3283:11">val</name> <operator pos:start="3283:13" pos:end="3283:13">=</operator> <literal type="number" pos:start="3283:15" pos:end="3283:15">0</literal></expr>;</expr_stmt>

        <goto pos:start="3285:9" pos:end="3285:21">goto <name pos:start="3285:14" pos:end="3285:20">do_lret</name>;</goto>

    <case pos:start="3287:5" pos:end="3287:14">case <expr pos:start="3287:10" pos:end="3287:13"><literal type="number" pos:start="3287:10" pos:end="3287:13">0xcf</literal></expr>:</case> <comment type="block" pos:start="3287:16" pos:end="3287:25">/* iret */</comment>

        <if_stmt pos:start="3289:9" pos:end="3323:9"><if pos:start="3289:9" pos:end="3297:9">if <condition pos:start="3289:12" pos:end="3289:19">(<expr pos:start="3289:13" pos:end="3289:18"><operator pos:start="3289:13" pos:end="3289:13">!</operator><name pos:start="3289:14" pos:end="3289:18"><name pos:start="3289:14" pos:end="3289:14">s</name><operator pos:start="3289:15" pos:end="3289:16">-&gt;</operator><name pos:start="3289:17" pos:end="3289:18">pe</name></name></expr>)</condition> <block pos:start="3289:21" pos:end="3297:9">{<block_content pos:start="3293:13" pos:end="3295:36">

            <comment type="block" pos:start="3291:13" pos:end="3291:27">/* real mode */</comment>

            <expr_stmt pos:start="3293:13" pos:end="3293:39"><expr pos:start="3293:13" pos:end="3293:38"><call pos:start="3293:13" pos:end="3293:38"><name pos:start="3293:13" pos:end="3293:28">gen_op_iret_real</name><argument_list pos:start="3293:29" pos:end="3293:38">(<argument pos:start="3293:30" pos:end="3293:37"><expr pos:start="3293:30" pos:end="3293:37"><name pos:start="3293:30" pos:end="3293:37"><name pos:start="3293:30" pos:end="3293:30">s</name><operator pos:start="3293:31" pos:end="3293:32">-&gt;</operator><name pos:start="3293:33" pos:end="3293:37">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3295:13" pos:end="3295:36"><expr pos:start="3295:13" pos:end="3295:35"><name pos:start="3295:13" pos:end="3295:20"><name pos:start="3295:13" pos:end="3295:13">s</name><operator pos:start="3295:14" pos:end="3295:15">-&gt;</operator><name pos:start="3295:16" pos:end="3295:20">cc_op</name></name> <operator pos:start="3295:22" pos:end="3295:22">=</operator> <name pos:start="3295:24" pos:end="3295:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="3297:11" pos:end="3311:9">else if <condition pos:start="3297:19" pos:end="3297:27">(<expr pos:start="3297:20" pos:end="3297:26"><name pos:start="3297:20" pos:end="3297:26"><name pos:start="3297:20" pos:end="3297:20">s</name><operator pos:start="3297:21" pos:end="3297:22">-&gt;</operator><name pos:start="3297:23" pos:end="3297:26">vm86</name></name></expr>)</condition> <block pos:start="3297:29" pos:end="3311:9">{<block_content pos:start="3299:13" pos:end="3309:13">

            <if_stmt pos:start="3299:13" pos:end="3309:13"><if pos:start="3299:13" pos:end="3303:13">if <condition pos:start="3299:16" pos:end="3299:29">(<expr pos:start="3299:17" pos:end="3299:28"><name pos:start="3299:17" pos:end="3299:23"><name pos:start="3299:17" pos:end="3299:17">s</name><operator pos:start="3299:18" pos:end="3299:19">-&gt;</operator><name pos:start="3299:20" pos:end="3299:23">iopl</name></name> <operator pos:start="3299:25" pos:end="3299:26">!=</operator> <literal type="number" pos:start="3299:28" pos:end="3299:28">3</literal></expr>)</condition> <block pos:start="3299:31" pos:end="3303:13">{<block_content pos:start="3301:17" pos:end="3301:68">

                <expr_stmt pos:start="3301:17" pos:end="3301:68"><expr pos:start="3301:17" pos:end="3301:67"><call pos:start="3301:17" pos:end="3301:67"><name pos:start="3301:17" pos:end="3301:29">gen_exception</name><argument_list pos:start="3301:30" pos:end="3301:67">(<argument pos:start="3301:31" pos:end="3301:31"><expr pos:start="3301:31" pos:end="3301:31"><name pos:start="3301:31" pos:end="3301:31">s</name></expr></argument>, <argument pos:start="3301:34" pos:end="3301:43"><expr pos:start="3301:34" pos:end="3301:43"><name pos:start="3301:34" pos:end="3301:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="3301:46" pos:end="3301:66"><expr pos:start="3301:46" pos:end="3301:66"><name pos:start="3301:46" pos:end="3301:53">pc_start</name> <operator pos:start="3301:55" pos:end="3301:55">-</operator> <name pos:start="3301:57" pos:end="3301:66"><name pos:start="3301:57" pos:end="3301:57">s</name><operator pos:start="3301:58" pos:end="3301:59">-&gt;</operator><name pos:start="3301:60" pos:end="3301:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="3303:15" pos:end="3309:13">else <block pos:start="3303:20" pos:end="3309:13">{<block_content pos:start="3305:17" pos:end="3307:40">

                <expr_stmt pos:start="3305:17" pos:end="3305:43"><expr pos:start="3305:17" pos:end="3305:42"><call pos:start="3305:17" pos:end="3305:42"><name pos:start="3305:17" pos:end="3305:32">gen_op_iret_real</name><argument_list pos:start="3305:33" pos:end="3305:42">(<argument pos:start="3305:34" pos:end="3305:41"><expr pos:start="3305:34" pos:end="3305:41"><name pos:start="3305:34" pos:end="3305:41"><name pos:start="3305:34" pos:end="3305:34">s</name><operator pos:start="3305:35" pos:end="3305:36">-&gt;</operator><name pos:start="3305:37" pos:end="3305:41">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3307:17" pos:end="3307:40"><expr pos:start="3307:17" pos:end="3307:39"><name pos:start="3307:17" pos:end="3307:24"><name pos:start="3307:17" pos:end="3307:17">s</name><operator pos:start="3307:18" pos:end="3307:19">-&gt;</operator><name pos:start="3307:20" pos:end="3307:24">cc_op</name></name> <operator pos:start="3307:26" pos:end="3307:26">=</operator> <name pos:start="3307:28" pos:end="3307:39">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="3311:11" pos:end="3323:9">else <block pos:start="3311:16" pos:end="3323:9">{<block_content pos:start="3313:13" pos:end="3321:36">

            <if_stmt pos:start="3313:13" pos:end="3315:43"><if pos:start="3313:13" pos:end="3315:43">if <condition pos:start="3313:16" pos:end="3313:42">(<expr pos:start="3313:17" pos:end="3313:41"><name pos:start="3313:17" pos:end="3313:24"><name pos:start="3313:17" pos:end="3313:17">s</name><operator pos:start="3313:18" pos:end="3313:19">-&gt;</operator><name pos:start="3313:20" pos:end="3313:24">cc_op</name></name> <operator pos:start="3313:26" pos:end="3313:27">!=</operator> <name pos:start="3313:29" pos:end="3313:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3315:17" pos:end="3315:43"><block_content pos:start="3315:17" pos:end="3315:43">

                <expr_stmt pos:start="3315:17" pos:end="3315:43"><expr pos:start="3315:17" pos:end="3315:42"><call pos:start="3315:17" pos:end="3315:42"><name pos:start="3315:17" pos:end="3315:32">gen_op_set_cc_op</name><argument_list pos:start="3315:33" pos:end="3315:42">(<argument pos:start="3315:34" pos:end="3315:41"><expr pos:start="3315:34" pos:end="3315:41"><name pos:start="3315:34" pos:end="3315:41"><name pos:start="3315:34" pos:end="3315:34">s</name><operator pos:start="3315:35" pos:end="3315:36">-&gt;</operator><name pos:start="3315:37" pos:end="3315:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="3317:13" pos:end="3317:49"><expr pos:start="3317:13" pos:end="3317:48"><call pos:start="3317:13" pos:end="3317:48"><name pos:start="3317:13" pos:end="3317:25">gen_op_jmp_im</name><argument_list pos:start="3317:26" pos:end="3317:48">(<argument pos:start="3317:27" pos:end="3317:47"><expr pos:start="3317:27" pos:end="3317:47"><name pos:start="3317:27" pos:end="3317:34">pc_start</name> <operator pos:start="3317:36" pos:end="3317:36">-</operator> <name pos:start="3317:38" pos:end="3317:47"><name pos:start="3317:38" pos:end="3317:38">s</name><operator pos:start="3317:39" pos:end="3317:40">-&gt;</operator><name pos:start="3317:41" pos:end="3317:47">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3319:13" pos:end="3319:64"><expr pos:start="3319:13" pos:end="3319:63"><call pos:start="3319:13" pos:end="3319:63"><name pos:start="3319:13" pos:end="3319:33">gen_op_iret_protected</name><argument_list pos:start="3319:34" pos:end="3319:63">(<argument pos:start="3319:35" pos:end="3319:42"><expr pos:start="3319:35" pos:end="3319:42"><name pos:start="3319:35" pos:end="3319:42"><name pos:start="3319:35" pos:end="3319:35">s</name><operator pos:start="3319:36" pos:end="3319:37">-&gt;</operator><name pos:start="3319:38" pos:end="3319:42">dflag</name></name></expr></argument>, <argument pos:start="3319:45" pos:end="3319:62"><expr pos:start="3319:45" pos:end="3319:62"><name pos:start="3319:45" pos:end="3319:49"><name pos:start="3319:45" pos:end="3319:45">s</name><operator pos:start="3319:46" pos:end="3319:47">-&gt;</operator><name pos:start="3319:48" pos:end="3319:49">pc</name></name> <operator pos:start="3319:51" pos:end="3319:51">-</operator> <name pos:start="3319:53" pos:end="3319:62"><name pos:start="3319:53" pos:end="3319:53">s</name><operator pos:start="3319:54" pos:end="3319:55">-&gt;</operator><name pos:start="3319:56" pos:end="3319:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3321:13" pos:end="3321:36"><expr pos:start="3321:13" pos:end="3321:35"><name pos:start="3321:13" pos:end="3321:20"><name pos:start="3321:13" pos:end="3321:13">s</name><operator pos:start="3321:14" pos:end="3321:15">-&gt;</operator><name pos:start="3321:16" pos:end="3321:20">cc_op</name></name> <operator pos:start="3321:22" pos:end="3321:22">=</operator> <name pos:start="3321:24" pos:end="3321:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="3325:9" pos:end="3325:19"><expr pos:start="3325:9" pos:end="3325:18"><call pos:start="3325:9" pos:end="3325:18"><name pos:start="3325:9" pos:end="3325:15">gen_eob</name><argument_list pos:start="3325:16" pos:end="3325:18">(<argument pos:start="3325:17" pos:end="3325:17"><expr pos:start="3325:17" pos:end="3325:17"><name pos:start="3325:17" pos:end="3325:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3327:9" pos:end="3327:14">break;</break>

    <case pos:start="3329:5" pos:end="3329:14">case <expr pos:start="3329:10" pos:end="3329:13"><literal type="number" pos:start="3329:10" pos:end="3329:13">0xe8</literal></expr>:</case> <comment type="block" pos:start="3329:16" pos:end="3329:28">/* call im */</comment>

        <block pos:start="3331:9" pos:end="3353:9">{<block_content pos:start="3333:13" pos:end="3351:28">

            <decl_stmt pos:start="3333:13" pos:end="3333:34"><decl pos:start="3333:13" pos:end="3333:33"><type pos:start="3333:13" pos:end="3333:24"><name pos:start="3333:13" pos:end="3333:20">unsigned</name> <name pos:start="3333:22" pos:end="3333:24">int</name></type> <name pos:start="3333:26" pos:end="3333:33">next_eip</name></decl>;</decl_stmt>

            <expr_stmt pos:start="3335:13" pos:end="3335:43"><expr pos:start="3335:13" pos:end="3335:42"><name pos:start="3335:13" pos:end="3335:14">ot</name> <operator pos:start="3335:16" pos:end="3335:16">=</operator> <ternary pos:start="3335:18" pos:end="3335:42"><condition pos:start="3335:18" pos:end="3335:24"><expr pos:start="3335:18" pos:end="3335:22"><name pos:start="3335:18" pos:end="3335:22">dflag</name></expr> ?</condition><then pos:start="3335:26" pos:end="3335:32"> <expr pos:start="3335:26" pos:end="3335:32"><name pos:start="3335:26" pos:end="3335:32">OT_LONG</name></expr> </then><else pos:start="3335:34" pos:end="3335:42">: <expr pos:start="3335:36" pos:end="3335:42"><name pos:start="3335:36" pos:end="3335:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="3337:13" pos:end="3337:34"><expr pos:start="3337:13" pos:end="3337:33"><name pos:start="3337:13" pos:end="3337:15">val</name> <operator pos:start="3337:17" pos:end="3337:17">=</operator> <call pos:start="3337:19" pos:end="3337:33"><name pos:start="3337:19" pos:end="3337:26">insn_get</name><argument_list pos:start="3337:27" pos:end="3337:33">(<argument pos:start="3337:28" pos:end="3337:28"><expr pos:start="3337:28" pos:end="3337:28"><name pos:start="3337:28" pos:end="3337:28">s</name></expr></argument>, <argument pos:start="3337:31" pos:end="3337:32"><expr pos:start="3337:31" pos:end="3337:32"><name pos:start="3337:31" pos:end="3337:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3339:13" pos:end="3339:42"><expr pos:start="3339:13" pos:end="3339:41"><name pos:start="3339:13" pos:end="3339:20">next_eip</name> <operator pos:start="3339:22" pos:end="3339:22">=</operator> <name pos:start="3339:24" pos:end="3339:28"><name pos:start="3339:24" pos:end="3339:24">s</name><operator pos:start="3339:25" pos:end="3339:26">-&gt;</operator><name pos:start="3339:27" pos:end="3339:28">pc</name></name> <operator pos:start="3339:30" pos:end="3339:30">-</operator> <name pos:start="3339:32" pos:end="3339:41"><name pos:start="3339:32" pos:end="3339:32">s</name><operator pos:start="3339:33" pos:end="3339:34">-&gt;</operator><name pos:start="3339:35" pos:end="3339:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="3341:13" pos:end="3341:28"><expr pos:start="3341:13" pos:end="3341:27"><name pos:start="3341:13" pos:end="3341:15">val</name> <operator pos:start="3341:17" pos:end="3341:18">+=</operator> <name pos:start="3341:20" pos:end="3341:27">next_eip</name></expr>;</expr_stmt>

            <if_stmt pos:start="3343:13" pos:end="3345:30"><if pos:start="3343:13" pos:end="3345:30">if <condition pos:start="3343:16" pos:end="3343:30">(<expr pos:start="3343:17" pos:end="3343:29"><name pos:start="3343:17" pos:end="3343:24"><name pos:start="3343:17" pos:end="3343:17">s</name><operator pos:start="3343:18" pos:end="3343:19">-&gt;</operator><name pos:start="3343:20" pos:end="3343:24">dflag</name></name> <operator pos:start="3343:26" pos:end="3343:27">==</operator> <literal type="number" pos:start="3343:29" pos:end="3343:29">0</literal></expr>)</condition><block type="pseudo" pos:start="3345:17" pos:end="3345:30"><block_content pos:start="3345:17" pos:end="3345:30">

                <expr_stmt pos:start="3345:17" pos:end="3345:30"><expr pos:start="3345:17" pos:end="3345:29"><name pos:start="3345:17" pos:end="3345:19">val</name> <operator pos:start="3345:21" pos:end="3345:22">&amp;=</operator> <literal type="number" pos:start="3345:24" pos:end="3345:29">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="3347:13" pos:end="3347:40"><expr pos:start="3347:13" pos:end="3347:39"><call pos:start="3347:13" pos:end="3347:39"><name pos:start="3347:13" pos:end="3347:29">gen_op_movl_T0_im</name><argument_list pos:start="3347:30" pos:end="3347:39">(<argument pos:start="3347:31" pos:end="3347:38"><expr pos:start="3347:31" pos:end="3347:38"><name pos:start="3347:31" pos:end="3347:38">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3349:13" pos:end="3349:27"><expr pos:start="3349:13" pos:end="3349:26"><call pos:start="3349:13" pos:end="3349:26"><name pos:start="3349:13" pos:end="3349:23">gen_push_T0</name><argument_list pos:start="3349:24" pos:end="3349:26">(<argument pos:start="3349:25" pos:end="3349:25"><expr pos:start="3349:25" pos:end="3349:25"><name pos:start="3349:25" pos:end="3349:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3351:13" pos:end="3351:28"><expr pos:start="3351:13" pos:end="3351:27"><call pos:start="3351:13" pos:end="3351:27"><name pos:start="3351:13" pos:end="3351:19">gen_jmp</name><argument_list pos:start="3351:20" pos:end="3351:27">(<argument pos:start="3351:21" pos:end="3351:21"><expr pos:start="3351:21" pos:end="3351:21"><name pos:start="3351:21" pos:end="3351:21">s</name></expr></argument>, <argument pos:start="3351:24" pos:end="3351:26"><expr pos:start="3351:24" pos:end="3351:26"><name pos:start="3351:24" pos:end="3351:26">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="3355:9" pos:end="3355:14">break;</break>

    <case pos:start="3357:5" pos:end="3357:14">case <expr pos:start="3357:10" pos:end="3357:13"><literal type="number" pos:start="3357:10" pos:end="3357:13">0x9a</literal></expr>:</case> <comment type="block" pos:start="3357:16" pos:end="3357:29">/* lcall im */</comment>

        <block pos:start="3359:9" pos:end="3377:9">{<block_content pos:start="3361:13" pos:end="3375:38">

            <decl_stmt pos:start="3361:13" pos:end="3361:42"><decl pos:start="3361:13" pos:end="3361:33"><type pos:start="3361:13" pos:end="3361:24"><name pos:start="3361:13" pos:end="3361:20">unsigned</name> <name pos:start="3361:22" pos:end="3361:24">int</name></type> <name pos:start="3361:26" pos:end="3361:33">selector</name></decl>, <decl pos:start="3361:36" pos:end="3361:41"><type ref="prev" pos:start="3361:13" pos:end="3361:24"/><name pos:start="3361:36" pos:end="3361:41">offset</name></decl>;</decl_stmt>



            <expr_stmt pos:start="3365:13" pos:end="3365:43"><expr pos:start="3365:13" pos:end="3365:42"><name pos:start="3365:13" pos:end="3365:14">ot</name> <operator pos:start="3365:16" pos:end="3365:16">=</operator> <ternary pos:start="3365:18" pos:end="3365:42"><condition pos:start="3365:18" pos:end="3365:24"><expr pos:start="3365:18" pos:end="3365:22"><name pos:start="3365:18" pos:end="3365:22">dflag</name></expr> ?</condition><then pos:start="3365:26" pos:end="3365:32"> <expr pos:start="3365:26" pos:end="3365:32"><name pos:start="3365:26" pos:end="3365:32">OT_LONG</name></expr> </then><else pos:start="3365:34" pos:end="3365:42">: <expr pos:start="3365:36" pos:end="3365:42"><name pos:start="3365:36" pos:end="3365:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="3367:13" pos:end="3367:37"><expr pos:start="3367:13" pos:end="3367:36"><name pos:start="3367:13" pos:end="3367:18">offset</name> <operator pos:start="3367:20" pos:end="3367:20">=</operator> <call pos:start="3367:22" pos:end="3367:36"><name pos:start="3367:22" pos:end="3367:29">insn_get</name><argument_list pos:start="3367:30" pos:end="3367:36">(<argument pos:start="3367:31" pos:end="3367:31"><expr pos:start="3367:31" pos:end="3367:31"><name pos:start="3367:31" pos:end="3367:31">s</name></expr></argument>, <argument pos:start="3367:34" pos:end="3367:35"><expr pos:start="3367:34" pos:end="3367:35"><name pos:start="3367:34" pos:end="3367:35">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3369:13" pos:end="3369:44"><expr pos:start="3369:13" pos:end="3369:43"><name pos:start="3369:13" pos:end="3369:20">selector</name> <operator pos:start="3369:22" pos:end="3369:22">=</operator> <call pos:start="3369:24" pos:end="3369:43"><name pos:start="3369:24" pos:end="3369:31">insn_get</name><argument_list pos:start="3369:32" pos:end="3369:43">(<argument pos:start="3369:33" pos:end="3369:33"><expr pos:start="3369:33" pos:end="3369:33"><name pos:start="3369:33" pos:end="3369:33">s</name></expr></argument>, <argument pos:start="3369:36" pos:end="3369:42"><expr pos:start="3369:36" pos:end="3369:42"><name pos:start="3369:36" pos:end="3369:42">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            

            <expr_stmt pos:start="3373:13" pos:end="3373:40"><expr pos:start="3373:13" pos:end="3373:39"><call pos:start="3373:13" pos:end="3373:39"><name pos:start="3373:13" pos:end="3373:29">gen_op_movl_T0_im</name><argument_list pos:start="3373:30" pos:end="3373:39">(<argument pos:start="3373:31" pos:end="3373:38"><expr pos:start="3373:31" pos:end="3373:38"><name pos:start="3373:31" pos:end="3373:38">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3375:13" pos:end="3375:38"><expr pos:start="3375:13" pos:end="3375:37"><call pos:start="3375:13" pos:end="3375:37"><name pos:start="3375:13" pos:end="3375:29">gen_op_movl_T1_im</name><argument_list pos:start="3375:30" pos:end="3375:37">(<argument pos:start="3375:31" pos:end="3375:36"><expr pos:start="3375:31" pos:end="3375:36"><name pos:start="3375:31" pos:end="3375:36">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <goto pos:start="3379:9" pos:end="3379:22">goto <name pos:start="3379:14" pos:end="3379:21">do_lcall</name>;</goto>

    <case pos:start="3381:5" pos:end="3381:14">case <expr pos:start="3381:10" pos:end="3381:13"><literal type="number" pos:start="3381:10" pos:end="3381:13">0xe9</literal></expr>:</case> <comment type="block" pos:start="3381:16" pos:end="3381:24">/* jmp */</comment>

        <expr_stmt pos:start="3383:9" pos:end="3383:39"><expr pos:start="3383:9" pos:end="3383:38"><name pos:start="3383:9" pos:end="3383:10">ot</name> <operator pos:start="3383:12" pos:end="3383:12">=</operator> <ternary pos:start="3383:14" pos:end="3383:38"><condition pos:start="3383:14" pos:end="3383:20"><expr pos:start="3383:14" pos:end="3383:18"><name pos:start="3383:14" pos:end="3383:18">dflag</name></expr> ?</condition><then pos:start="3383:22" pos:end="3383:28"> <expr pos:start="3383:22" pos:end="3383:28"><name pos:start="3383:22" pos:end="3383:28">OT_LONG</name></expr> </then><else pos:start="3383:30" pos:end="3383:38">: <expr pos:start="3383:32" pos:end="3383:38"><name pos:start="3383:32" pos:end="3383:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="3385:9" pos:end="3385:30"><expr pos:start="3385:9" pos:end="3385:29"><name pos:start="3385:9" pos:end="3385:11">val</name> <operator pos:start="3385:13" pos:end="3385:13">=</operator> <call pos:start="3385:15" pos:end="3385:29"><name pos:start="3385:15" pos:end="3385:22">insn_get</name><argument_list pos:start="3385:23" pos:end="3385:29">(<argument pos:start="3385:24" pos:end="3385:24"><expr pos:start="3385:24" pos:end="3385:24"><name pos:start="3385:24" pos:end="3385:24">s</name></expr></argument>, <argument pos:start="3385:27" pos:end="3385:28"><expr pos:start="3385:27" pos:end="3385:28"><name pos:start="3385:27" pos:end="3385:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3387:9" pos:end="3387:34"><expr pos:start="3387:9" pos:end="3387:33"><name pos:start="3387:9" pos:end="3387:11">val</name> <operator pos:start="3387:13" pos:end="3387:14">+=</operator> <name pos:start="3387:16" pos:end="3387:20"><name pos:start="3387:16" pos:end="3387:16">s</name><operator pos:start="3387:17" pos:end="3387:18">-&gt;</operator><name pos:start="3387:19" pos:end="3387:20">pc</name></name> <operator pos:start="3387:22" pos:end="3387:22">-</operator> <name pos:start="3387:24" pos:end="3387:33"><name pos:start="3387:24" pos:end="3387:24">s</name><operator pos:start="3387:25" pos:end="3387:26">-&gt;</operator><name pos:start="3387:27" pos:end="3387:33">cs_base</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="3389:9" pos:end="3391:31"><if pos:start="3389:9" pos:end="3391:31">if <condition pos:start="3389:12" pos:end="3389:26">(<expr pos:start="3389:13" pos:end="3389:25"><name pos:start="3389:13" pos:end="3389:20"><name pos:start="3389:13" pos:end="3389:13">s</name><operator pos:start="3389:14" pos:end="3389:15">-&gt;</operator><name pos:start="3389:16" pos:end="3389:20">dflag</name></name> <operator pos:start="3389:22" pos:end="3389:23">==</operator> <literal type="number" pos:start="3389:25" pos:end="3389:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3391:13" pos:end="3391:31"><block_content pos:start="3391:13" pos:end="3391:31">

            <expr_stmt pos:start="3391:13" pos:end="3391:31"><expr pos:start="3391:13" pos:end="3391:30"><name pos:start="3391:13" pos:end="3391:15">val</name> <operator pos:start="3391:17" pos:end="3391:17">=</operator> <name pos:start="3391:19" pos:end="3391:21">val</name> <operator pos:start="3391:23" pos:end="3391:23">&amp;</operator> <literal type="number" pos:start="3391:25" pos:end="3391:30">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3393:9" pos:end="3393:24"><expr pos:start="3393:9" pos:end="3393:23"><call pos:start="3393:9" pos:end="3393:23"><name pos:start="3393:9" pos:end="3393:15">gen_jmp</name><argument_list pos:start="3393:16" pos:end="3393:23">(<argument pos:start="3393:17" pos:end="3393:17"><expr pos:start="3393:17" pos:end="3393:17"><name pos:start="3393:17" pos:end="3393:17">s</name></expr></argument>, <argument pos:start="3393:20" pos:end="3393:22"><expr pos:start="3393:20" pos:end="3393:22"><name pos:start="3393:20" pos:end="3393:22">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3395:9" pos:end="3395:14">break;</break>

    <case pos:start="3397:5" pos:end="3397:14">case <expr pos:start="3397:10" pos:end="3397:13"><literal type="number" pos:start="3397:10" pos:end="3397:13">0xea</literal></expr>:</case> <comment type="block" pos:start="3397:16" pos:end="3397:28">/* ljmp im */</comment>

        <block pos:start="3399:9" pos:end="3417:9">{<block_content pos:start="3401:13" pos:end="3415:38">

            <decl_stmt pos:start="3401:13" pos:end="3401:42"><decl pos:start="3401:13" pos:end="3401:33"><type pos:start="3401:13" pos:end="3401:24"><name pos:start="3401:13" pos:end="3401:20">unsigned</name> <name pos:start="3401:22" pos:end="3401:24">int</name></type> <name pos:start="3401:26" pos:end="3401:33">selector</name></decl>, <decl pos:start="3401:36" pos:end="3401:41"><type ref="prev" pos:start="3401:13" pos:end="3401:24"/><name pos:start="3401:36" pos:end="3401:41">offset</name></decl>;</decl_stmt>



            <expr_stmt pos:start="3405:13" pos:end="3405:43"><expr pos:start="3405:13" pos:end="3405:42"><name pos:start="3405:13" pos:end="3405:14">ot</name> <operator pos:start="3405:16" pos:end="3405:16">=</operator> <ternary pos:start="3405:18" pos:end="3405:42"><condition pos:start="3405:18" pos:end="3405:24"><expr pos:start="3405:18" pos:end="3405:22"><name pos:start="3405:18" pos:end="3405:22">dflag</name></expr> ?</condition><then pos:start="3405:26" pos:end="3405:32"> <expr pos:start="3405:26" pos:end="3405:32"><name pos:start="3405:26" pos:end="3405:32">OT_LONG</name></expr> </then><else pos:start="3405:34" pos:end="3405:42">: <expr pos:start="3405:36" pos:end="3405:42"><name pos:start="3405:36" pos:end="3405:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="3407:13" pos:end="3407:37"><expr pos:start="3407:13" pos:end="3407:36"><name pos:start="3407:13" pos:end="3407:18">offset</name> <operator pos:start="3407:20" pos:end="3407:20">=</operator> <call pos:start="3407:22" pos:end="3407:36"><name pos:start="3407:22" pos:end="3407:29">insn_get</name><argument_list pos:start="3407:30" pos:end="3407:36">(<argument pos:start="3407:31" pos:end="3407:31"><expr pos:start="3407:31" pos:end="3407:31"><name pos:start="3407:31" pos:end="3407:31">s</name></expr></argument>, <argument pos:start="3407:34" pos:end="3407:35"><expr pos:start="3407:34" pos:end="3407:35"><name pos:start="3407:34" pos:end="3407:35">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3409:13" pos:end="3409:44"><expr pos:start="3409:13" pos:end="3409:43"><name pos:start="3409:13" pos:end="3409:20">selector</name> <operator pos:start="3409:22" pos:end="3409:22">=</operator> <call pos:start="3409:24" pos:end="3409:43"><name pos:start="3409:24" pos:end="3409:31">insn_get</name><argument_list pos:start="3409:32" pos:end="3409:43">(<argument pos:start="3409:33" pos:end="3409:33"><expr pos:start="3409:33" pos:end="3409:33"><name pos:start="3409:33" pos:end="3409:33">s</name></expr></argument>, <argument pos:start="3409:36" pos:end="3409:42"><expr pos:start="3409:36" pos:end="3409:42"><name pos:start="3409:36" pos:end="3409:42">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            

            <expr_stmt pos:start="3413:13" pos:end="3413:40"><expr pos:start="3413:13" pos:end="3413:39"><call pos:start="3413:13" pos:end="3413:39"><name pos:start="3413:13" pos:end="3413:29">gen_op_movl_T0_im</name><argument_list pos:start="3413:30" pos:end="3413:39">(<argument pos:start="3413:31" pos:end="3413:38"><expr pos:start="3413:31" pos:end="3413:38"><name pos:start="3413:31" pos:end="3413:38">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3415:13" pos:end="3415:38"><expr pos:start="3415:13" pos:end="3415:37"><call pos:start="3415:13" pos:end="3415:37"><name pos:start="3415:13" pos:end="3415:29">gen_op_movl_T1_im</name><argument_list pos:start="3415:30" pos:end="3415:37">(<argument pos:start="3415:31" pos:end="3415:36"><expr pos:start="3415:31" pos:end="3415:36"><name pos:start="3415:31" pos:end="3415:36">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <goto pos:start="3419:9" pos:end="3419:21">goto <name pos:start="3419:14" pos:end="3419:20">do_ljmp</name>;</goto>

    <case pos:start="3421:5" pos:end="3421:14">case <expr pos:start="3421:10" pos:end="3421:13"><literal type="number" pos:start="3421:10" pos:end="3421:13">0xeb</literal></expr>:</case> <comment type="block" pos:start="3421:16" pos:end="3421:27">/* jmp Jb */</comment>

        <expr_stmt pos:start="3423:9" pos:end="3423:43"><expr pos:start="3423:9" pos:end="3423:42"><name pos:start="3423:9" pos:end="3423:11">val</name> <operator pos:start="3423:13" pos:end="3423:13">=</operator> <operator pos:start="3423:15" pos:end="3423:15">(</operator><name pos:start="3423:16" pos:end="3423:21">int8_t</name><operator pos:start="3423:22" pos:end="3423:22">)</operator><call pos:start="3423:23" pos:end="3423:42"><name pos:start="3423:23" pos:end="3423:30">insn_get</name><argument_list pos:start="3423:31" pos:end="3423:42">(<argument pos:start="3423:32" pos:end="3423:32"><expr pos:start="3423:32" pos:end="3423:32"><name pos:start="3423:32" pos:end="3423:32">s</name></expr></argument>, <argument pos:start="3423:35" pos:end="3423:41"><expr pos:start="3423:35" pos:end="3423:41"><name pos:start="3423:35" pos:end="3423:41">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3425:9" pos:end="3425:34"><expr pos:start="3425:9" pos:end="3425:33"><name pos:start="3425:9" pos:end="3425:11">val</name> <operator pos:start="3425:13" pos:end="3425:14">+=</operator> <name pos:start="3425:16" pos:end="3425:20"><name pos:start="3425:16" pos:end="3425:16">s</name><operator pos:start="3425:17" pos:end="3425:18">-&gt;</operator><name pos:start="3425:19" pos:end="3425:20">pc</name></name> <operator pos:start="3425:22" pos:end="3425:22">-</operator> <name pos:start="3425:24" pos:end="3425:33"><name pos:start="3425:24" pos:end="3425:24">s</name><operator pos:start="3425:25" pos:end="3425:26">-&gt;</operator><name pos:start="3425:27" pos:end="3425:33">cs_base</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="3427:9" pos:end="3429:31"><if pos:start="3427:9" pos:end="3429:31">if <condition pos:start="3427:12" pos:end="3427:26">(<expr pos:start="3427:13" pos:end="3427:25"><name pos:start="3427:13" pos:end="3427:20"><name pos:start="3427:13" pos:end="3427:13">s</name><operator pos:start="3427:14" pos:end="3427:15">-&gt;</operator><name pos:start="3427:16" pos:end="3427:20">dflag</name></name> <operator pos:start="3427:22" pos:end="3427:23">==</operator> <literal type="number" pos:start="3427:25" pos:end="3427:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3429:13" pos:end="3429:31"><block_content pos:start="3429:13" pos:end="3429:31">

            <expr_stmt pos:start="3429:13" pos:end="3429:31"><expr pos:start="3429:13" pos:end="3429:30"><name pos:start="3429:13" pos:end="3429:15">val</name> <operator pos:start="3429:17" pos:end="3429:17">=</operator> <name pos:start="3429:19" pos:end="3429:21">val</name> <operator pos:start="3429:23" pos:end="3429:23">&amp;</operator> <literal type="number" pos:start="3429:25" pos:end="3429:30">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3431:9" pos:end="3431:24"><expr pos:start="3431:9" pos:end="3431:23"><call pos:start="3431:9" pos:end="3431:23"><name pos:start="3431:9" pos:end="3431:15">gen_jmp</name><argument_list pos:start="3431:16" pos:end="3431:23">(<argument pos:start="3431:17" pos:end="3431:17"><expr pos:start="3431:17" pos:end="3431:17"><name pos:start="3431:17" pos:end="3431:17">s</name></expr></argument>, <argument pos:start="3431:20" pos:end="3431:22"><expr pos:start="3431:20" pos:end="3431:22"><name pos:start="3431:20" pos:end="3431:22">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3433:9" pos:end="3433:14">break;</break>

    <case pos:start="3435:5" pos:end="3435:23">case <expr pos:start="3435:10" pos:end="3435:22"><literal type="number" pos:start="3435:10" pos:end="3435:13">0x70</literal> <operator pos:start="3435:15" pos:end="3435:17">...</operator> <literal type="number" pos:start="3435:19" pos:end="3435:22">0x7f</literal></expr>:</case> <comment type="block" pos:start="3435:25" pos:end="3435:36">/* jcc Jb */</comment>

        <expr_stmt pos:start="3437:9" pos:end="3437:43"><expr pos:start="3437:9" pos:end="3437:42"><name pos:start="3437:9" pos:end="3437:11">val</name> <operator pos:start="3437:13" pos:end="3437:13">=</operator> <operator pos:start="3437:15" pos:end="3437:15">(</operator><name pos:start="3437:16" pos:end="3437:21">int8_t</name><operator pos:start="3437:22" pos:end="3437:22">)</operator><call pos:start="3437:23" pos:end="3437:42"><name pos:start="3437:23" pos:end="3437:30">insn_get</name><argument_list pos:start="3437:31" pos:end="3437:42">(<argument pos:start="3437:32" pos:end="3437:32"><expr pos:start="3437:32" pos:end="3437:32"><name pos:start="3437:32" pos:end="3437:32">s</name></expr></argument>, <argument pos:start="3437:35" pos:end="3437:41"><expr pos:start="3437:35" pos:end="3437:41"><name pos:start="3437:35" pos:end="3437:41">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="3439:9" pos:end="3439:20">goto <name pos:start="3439:14" pos:end="3439:19">do_jcc</name>;</goto>

    <case pos:start="3441:5" pos:end="3441:25">case <expr pos:start="3441:10" pos:end="3441:24"><literal type="number" pos:start="3441:10" pos:end="3441:14">0x180</literal> <operator pos:start="3441:16" pos:end="3441:18">...</operator> <literal type="number" pos:start="3441:20" pos:end="3441:24">0x18f</literal></expr>:</case> <comment type="block" pos:start="3441:27" pos:end="3441:38">/* jcc Jv */</comment>

        <if_stmt pos:start="3443:9" pos:end="3451:9"><if pos:start="3443:9" pos:end="3447:9">if <condition pos:start="3443:12" pos:end="3443:18">(<expr pos:start="3443:13" pos:end="3443:17"><name pos:start="3443:13" pos:end="3443:17">dflag</name></expr>)</condition> <block pos:start="3443:20" pos:end="3447:9">{<block_content pos:start="3445:13" pos:end="3445:39">

            <expr_stmt pos:start="3445:13" pos:end="3445:39"><expr pos:start="3445:13" pos:end="3445:38"><name pos:start="3445:13" pos:end="3445:15">val</name> <operator pos:start="3445:17" pos:end="3445:17">=</operator> <call pos:start="3445:19" pos:end="3445:38"><name pos:start="3445:19" pos:end="3445:26">insn_get</name><argument_list pos:start="3445:27" pos:end="3445:38">(<argument pos:start="3445:28" pos:end="3445:28"><expr pos:start="3445:28" pos:end="3445:28"><name pos:start="3445:28" pos:end="3445:28">s</name></expr></argument>, <argument pos:start="3445:31" pos:end="3445:37"><expr pos:start="3445:31" pos:end="3445:37"><name pos:start="3445:31" pos:end="3445:37">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3447:11" pos:end="3451:9">else <block pos:start="3447:16" pos:end="3451:9">{<block_content pos:start="3449:13" pos:end="3449:48">

            <expr_stmt pos:start="3449:13" pos:end="3449:48"><expr pos:start="3449:13" pos:end="3449:47"><name pos:start="3449:13" pos:end="3449:15">val</name> <operator pos:start="3449:17" pos:end="3449:17">=</operator> <operator pos:start="3449:19" pos:end="3449:19">(</operator><name pos:start="3449:20" pos:end="3449:26">int16_t</name><operator pos:start="3449:27" pos:end="3449:27">)</operator><call pos:start="3449:28" pos:end="3449:47"><name pos:start="3449:28" pos:end="3449:35">insn_get</name><argument_list pos:start="3449:36" pos:end="3449:47">(<argument pos:start="3449:37" pos:end="3449:37"><expr pos:start="3449:37" pos:end="3449:37"><name pos:start="3449:37" pos:end="3449:37">s</name></expr></argument>, <argument pos:start="3449:40" pos:end="3449:46"><expr pos:start="3449:40" pos:end="3449:46"><name pos:start="3449:40" pos:end="3449:46">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

        </block_content>}</block></else></if_stmt>

    <label pos:start="3453:5" pos:end="3453:11"><name pos:start="3453:5" pos:end="3453:10">do_jcc</name>:</label>

        <expr_stmt pos:start="3455:9" pos:end="3455:38"><expr pos:start="3455:9" pos:end="3455:37"><name pos:start="3455:9" pos:end="3455:16">next_eip</name> <operator pos:start="3455:18" pos:end="3455:18">=</operator> <name pos:start="3455:20" pos:end="3455:24"><name pos:start="3455:20" pos:end="3455:20">s</name><operator pos:start="3455:21" pos:end="3455:22">-&gt;</operator><name pos:start="3455:23" pos:end="3455:24">pc</name></name> <operator pos:start="3455:26" pos:end="3455:26">-</operator> <name pos:start="3455:28" pos:end="3455:37"><name pos:start="3455:28" pos:end="3455:28">s</name><operator pos:start="3455:29" pos:end="3455:30">-&gt;</operator><name pos:start="3455:31" pos:end="3455:37">cs_base</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="3457:9" pos:end="3457:24"><expr pos:start="3457:9" pos:end="3457:23"><name pos:start="3457:9" pos:end="3457:11">val</name> <operator pos:start="3457:13" pos:end="3457:14">+=</operator> <name pos:start="3457:16" pos:end="3457:23">next_eip</name></expr>;</expr_stmt>

        <if_stmt pos:start="3459:9" pos:end="3461:26"><if pos:start="3459:9" pos:end="3461:26">if <condition pos:start="3459:12" pos:end="3459:26">(<expr pos:start="3459:13" pos:end="3459:25"><name pos:start="3459:13" pos:end="3459:20"><name pos:start="3459:13" pos:end="3459:13">s</name><operator pos:start="3459:14" pos:end="3459:15">-&gt;</operator><name pos:start="3459:16" pos:end="3459:20">dflag</name></name> <operator pos:start="3459:22" pos:end="3459:23">==</operator> <literal type="number" pos:start="3459:25" pos:end="3459:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3461:13" pos:end="3461:26"><block_content pos:start="3461:13" pos:end="3461:26">

            <expr_stmt pos:start="3461:13" pos:end="3461:26"><expr pos:start="3461:13" pos:end="3461:25"><name pos:start="3461:13" pos:end="3461:15">val</name> <operator pos:start="3461:17" pos:end="3461:18">&amp;=</operator> <literal type="number" pos:start="3461:20" pos:end="3461:25">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3463:9" pos:end="3463:37"><expr pos:start="3463:9" pos:end="3463:36"><call pos:start="3463:9" pos:end="3463:36"><name pos:start="3463:9" pos:end="3463:15">gen_jcc</name><argument_list pos:start="3463:16" pos:end="3463:36">(<argument pos:start="3463:17" pos:end="3463:17"><expr pos:start="3463:17" pos:end="3463:17"><name pos:start="3463:17" pos:end="3463:17">s</name></expr></argument>, <argument pos:start="3463:20" pos:end="3463:20"><expr pos:start="3463:20" pos:end="3463:20"><name pos:start="3463:20" pos:end="3463:20">b</name></expr></argument>, <argument pos:start="3463:23" pos:end="3463:25"><expr pos:start="3463:23" pos:end="3463:25"><name pos:start="3463:23" pos:end="3463:25">val</name></expr></argument>, <argument pos:start="3463:28" pos:end="3463:35"><expr pos:start="3463:28" pos:end="3463:35"><name pos:start="3463:28" pos:end="3463:35">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3465:9" pos:end="3465:14">break;</break>



    <case pos:start="3469:5" pos:end="3469:25">case <expr pos:start="3469:10" pos:end="3469:24"><literal type="number" pos:start="3469:10" pos:end="3469:14">0x190</literal> <operator pos:start="3469:16" pos:end="3469:18">...</operator> <literal type="number" pos:start="3469:20" pos:end="3469:24">0x19f</literal></expr>:</case> <comment type="block" pos:start="3469:27" pos:end="3469:40">/* setcc Gv */</comment>

        <expr_stmt pos:start="3471:9" pos:end="3471:35"><expr pos:start="3471:9" pos:end="3471:34"><name pos:start="3471:9" pos:end="3471:13">modrm</name> <operator pos:start="3471:15" pos:end="3471:15">=</operator> <call pos:start="3471:17" pos:end="3471:34"><name pos:start="3471:17" pos:end="3471:25">ldub_code</name><argument_list pos:start="3471:26" pos:end="3471:34">(<argument pos:start="3471:27" pos:end="3471:33"><expr pos:start="3471:27" pos:end="3471:33"><name pos:start="3471:27" pos:end="3471:31"><name pos:start="3471:27" pos:end="3471:27">s</name><operator pos:start="3471:28" pos:end="3471:29">-&gt;</operator><name pos:start="3471:30" pos:end="3471:31">pc</name></name><operator pos:start="3471:32" pos:end="3471:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3473:9" pos:end="3473:24"><expr pos:start="3473:9" pos:end="3473:23"><call pos:start="3473:9" pos:end="3473:23"><name pos:start="3473:9" pos:end="3473:17">gen_setcc</name><argument_list pos:start="3473:18" pos:end="3473:23">(<argument pos:start="3473:19" pos:end="3473:19"><expr pos:start="3473:19" pos:end="3473:19"><name pos:start="3473:19" pos:end="3473:19">s</name></expr></argument>, <argument pos:start="3473:22" pos:end="3473:22"><expr pos:start="3473:22" pos:end="3473:22"><name pos:start="3473:22" pos:end="3473:22">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3475:9" pos:end="3475:54"><expr pos:start="3475:9" pos:end="3475:53"><call pos:start="3475:9" pos:end="3475:53"><name pos:start="3475:9" pos:end="3475:22">gen_ldst_modrm</name><argument_list pos:start="3475:23" pos:end="3475:53">(<argument pos:start="3475:24" pos:end="3475:24"><expr pos:start="3475:24" pos:end="3475:24"><name pos:start="3475:24" pos:end="3475:24">s</name></expr></argument>, <argument pos:start="3475:27" pos:end="3475:31"><expr pos:start="3475:27" pos:end="3475:31"><name pos:start="3475:27" pos:end="3475:31">modrm</name></expr></argument>, <argument pos:start="3475:34" pos:end="3475:40"><expr pos:start="3475:34" pos:end="3475:40"><name pos:start="3475:34" pos:end="3475:40">OT_BYTE</name></expr></argument>, <argument pos:start="3475:43" pos:end="3475:49"><expr pos:start="3475:43" pos:end="3475:49"><name pos:start="3475:43" pos:end="3475:49">OR_TMP0</name></expr></argument>, <argument pos:start="3475:52" pos:end="3475:52"><expr pos:start="3475:52" pos:end="3475:52"><literal type="number" pos:start="3475:52" pos:end="3475:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3477:9" pos:end="3477:14">break;</break>

    <case pos:start="3479:5" pos:end="3479:25">case <expr pos:start="3479:10" pos:end="3479:24"><literal type="number" pos:start="3479:10" pos:end="3479:14">0x140</literal> <operator pos:start="3479:16" pos:end="3479:18">...</operator> <literal type="number" pos:start="3479:20" pos:end="3479:24">0x14f</literal></expr>:</case> <comment type="block" pos:start="3479:27" pos:end="3479:43">/* cmov Gv, Ev */</comment>

        <expr_stmt pos:start="3481:9" pos:end="3481:39"><expr pos:start="3481:9" pos:end="3481:38"><name pos:start="3481:9" pos:end="3481:10">ot</name> <operator pos:start="3481:12" pos:end="3481:12">=</operator> <ternary pos:start="3481:14" pos:end="3481:38"><condition pos:start="3481:14" pos:end="3481:20"><expr pos:start="3481:14" pos:end="3481:18"><name pos:start="3481:14" pos:end="3481:18">dflag</name></expr> ?</condition><then pos:start="3481:22" pos:end="3481:28"> <expr pos:start="3481:22" pos:end="3481:28"><name pos:start="3481:22" pos:end="3481:28">OT_LONG</name></expr> </then><else pos:start="3481:30" pos:end="3481:38">: <expr pos:start="3481:32" pos:end="3481:38"><name pos:start="3481:32" pos:end="3481:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="3483:9" pos:end="3483:35"><expr pos:start="3483:9" pos:end="3483:34"><name pos:start="3483:9" pos:end="3483:13">modrm</name> <operator pos:start="3483:15" pos:end="3483:15">=</operator> <call pos:start="3483:17" pos:end="3483:34"><name pos:start="3483:17" pos:end="3483:25">ldub_code</name><argument_list pos:start="3483:26" pos:end="3483:34">(<argument pos:start="3483:27" pos:end="3483:33"><expr pos:start="3483:27" pos:end="3483:33"><name pos:start="3483:27" pos:end="3483:31"><name pos:start="3483:27" pos:end="3483:27">s</name><operator pos:start="3483:28" pos:end="3483:29">-&gt;</operator><name pos:start="3483:30" pos:end="3483:31">pc</name></name><operator pos:start="3483:32" pos:end="3483:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3485:9" pos:end="3485:31"><expr pos:start="3485:9" pos:end="3485:30"><name pos:start="3485:9" pos:end="3485:11">reg</name> <operator pos:start="3485:13" pos:end="3485:13">=</operator> <operator pos:start="3485:15" pos:end="3485:15">(</operator><name pos:start="3485:16" pos:end="3485:20">modrm</name> <operator pos:start="3485:22" pos:end="3485:23">&gt;&gt;</operator> <literal type="number" pos:start="3485:25" pos:end="3485:25">3</literal><operator pos:start="3485:26" pos:end="3485:26">)</operator> <operator pos:start="3485:28" pos:end="3485:28">&amp;</operator> <literal type="number" pos:start="3485:30" pos:end="3485:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3487:9" pos:end="3487:31"><expr pos:start="3487:9" pos:end="3487:30"><name pos:start="3487:9" pos:end="3487:11">mod</name> <operator pos:start="3487:13" pos:end="3487:13">=</operator> <operator pos:start="3487:15" pos:end="3487:15">(</operator><name pos:start="3487:16" pos:end="3487:20">modrm</name> <operator pos:start="3487:22" pos:end="3487:23">&gt;&gt;</operator> <literal type="number" pos:start="3487:25" pos:end="3487:25">6</literal><operator pos:start="3487:26" pos:end="3487:26">)</operator> <operator pos:start="3487:28" pos:end="3487:28">&amp;</operator> <literal type="number" pos:start="3487:30" pos:end="3487:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3489:9" pos:end="3489:24"><expr pos:start="3489:9" pos:end="3489:23"><call pos:start="3489:9" pos:end="3489:23"><name pos:start="3489:9" pos:end="3489:17">gen_setcc</name><argument_list pos:start="3489:18" pos:end="3489:23">(<argument pos:start="3489:19" pos:end="3489:19"><expr pos:start="3489:19" pos:end="3489:19"><name pos:start="3489:19" pos:end="3489:19">s</name></expr></argument>, <argument pos:start="3489:22" pos:end="3489:22"><expr pos:start="3489:22" pos:end="3489:22"><name pos:start="3489:22" pos:end="3489:22">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3491:9" pos:end="3503:9"><if pos:start="3491:9" pos:end="3497:9">if <condition pos:start="3491:12" pos:end="3491:21">(<expr pos:start="3491:13" pos:end="3491:20"><name pos:start="3491:13" pos:end="3491:15">mod</name> <operator pos:start="3491:17" pos:end="3491:18">!=</operator> <literal type="number" pos:start="3491:20" pos:end="3491:20">3</literal></expr>)</condition> <block pos:start="3491:23" pos:end="3497:9">{<block_content pos:start="3493:13" pos:end="3495:49">

            <expr_stmt pos:start="3493:13" pos:end="3493:61"><expr pos:start="3493:13" pos:end="3493:60"><call pos:start="3493:13" pos:end="3493:60"><name pos:start="3493:13" pos:end="3493:25">gen_lea_modrm</name><argument_list pos:start="3493:26" pos:end="3493:60">(<argument pos:start="3493:27" pos:end="3493:27"><expr pos:start="3493:27" pos:end="3493:27"><name pos:start="3493:27" pos:end="3493:27">s</name></expr></argument>, <argument pos:start="3493:30" pos:end="3493:34"><expr pos:start="3493:30" pos:end="3493:34"><name pos:start="3493:30" pos:end="3493:34">modrm</name></expr></argument>, <argument pos:start="3493:37" pos:end="3493:45"><expr pos:start="3493:37" pos:end="3493:45"><operator pos:start="3493:37" pos:end="3493:37">&amp;</operator><name pos:start="3493:38" pos:end="3493:45">reg_addr</name></expr></argument>, <argument pos:start="3493:48" pos:end="3493:59"><expr pos:start="3493:48" pos:end="3493:59"><operator pos:start="3493:48" pos:end="3493:48">&amp;</operator><name pos:start="3493:49" pos:end="3493:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3495:13" pos:end="3495:49"><expr pos:start="3495:13" pos:end="3495:48"><name pos:start="3495:13" pos:end="3495:46"><name pos:start="3495:13" pos:end="3495:27">gen_op_ld_T1_A0</name><index pos:start="3495:28" pos:end="3495:46">[<expr pos:start="3495:29" pos:end="3495:45"><name pos:start="3495:29" pos:end="3495:30">ot</name> <operator pos:start="3495:32" pos:end="3495:32">+</operator> <name pos:start="3495:34" pos:end="3495:45"><name pos:start="3495:34" pos:end="3495:34">s</name><operator pos:start="3495:35" pos:end="3495:36">-&gt;</operator><name pos:start="3495:37" pos:end="3495:45">mem_index</name></name></expr>]</index></name><operator pos:start="3495:47" pos:end="3495:47">(</operator><operator pos:start="3495:48" pos:end="3495:48">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3497:11" pos:end="3503:9">else <block pos:start="3497:16" pos:end="3503:9">{<block_content pos:start="3499:13" pos:end="3501:43">

            <expr_stmt pos:start="3499:13" pos:end="3499:27"><expr pos:start="3499:13" pos:end="3499:26"><name pos:start="3499:13" pos:end="3499:14">rm</name> <operator pos:start="3499:16" pos:end="3499:16">=</operator> <name pos:start="3499:18" pos:end="3499:22">modrm</name> <operator pos:start="3499:24" pos:end="3499:24">&amp;</operator> <literal type="number" pos:start="3499:26" pos:end="3499:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="3501:13" pos:end="3501:43"><expr pos:start="3501:13" pos:end="3501:42"><name pos:start="3501:13" pos:end="3501:40"><name pos:start="3501:13" pos:end="3501:29">gen_op_mov_TN_reg</name><index pos:start="3501:30" pos:end="3501:33">[<expr pos:start="3501:31" pos:end="3501:32"><name pos:start="3501:31" pos:end="3501:32">ot</name></expr>]</index><index pos:start="3501:34" pos:end="3501:36">[<expr pos:start="3501:35" pos:end="3501:35"><literal type="number" pos:start="3501:35" pos:end="3501:35">1</literal></expr>]</index><index pos:start="3501:37" pos:end="3501:40">[<expr pos:start="3501:38" pos:end="3501:39"><name pos:start="3501:38" pos:end="3501:39">rm</name></expr>]</index></name><operator pos:start="3501:41" pos:end="3501:41">(</operator><operator pos:start="3501:42" pos:end="3501:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="3505:9" pos:end="3505:51"><expr pos:start="3505:9" pos:end="3505:50"><name pos:start="3505:9" pos:end="3505:48"><name pos:start="3505:9" pos:end="3505:29">gen_op_cmov_reg_T1_T0</name><index pos:start="3505:30" pos:end="3505:43">[<expr pos:start="3505:31" pos:end="3505:42"><name pos:start="3505:31" pos:end="3505:32">ot</name> <operator pos:start="3505:34" pos:end="3505:34">-</operator> <name pos:start="3505:36" pos:end="3505:42">OT_WORD</name></expr>]</index><index pos:start="3505:44" pos:end="3505:48">[<expr pos:start="3505:45" pos:end="3505:47"><name pos:start="3505:45" pos:end="3505:47">reg</name></expr>]</index></name><operator pos:start="3505:49" pos:end="3505:49">(</operator><operator pos:start="3505:50" pos:end="3505:50">)</operator></expr>;</expr_stmt>

        <break pos:start="3507:9" pos:end="3507:14">break;</break>

        

        <comment type="block" format="doxygen" pos:start="3511:9" pos:end="3511:34">/************************/</comment>

        <comment type="block" pos:start="3513:9" pos:end="3513:19">/* flags */</comment>

    <case pos:start="3515:5" pos:end="3515:14">case <expr pos:start="3515:10" pos:end="3515:13"><literal type="number" pos:start="3515:10" pos:end="3515:13">0x9c</literal></expr>:</case> <comment type="block" pos:start="3515:16" pos:end="3515:26">/* pushf */</comment>

        <if_stmt pos:start="3517:9" pos:end="3531:9"><if pos:start="3517:9" pos:end="3521:9">if <condition pos:start="3517:12" pos:end="3517:36">(<expr pos:start="3517:13" pos:end="3517:35"><name pos:start="3517:13" pos:end="3517:19"><name pos:start="3517:13" pos:end="3517:13">s</name><operator pos:start="3517:14" pos:end="3517:15">-&gt;</operator><name pos:start="3517:16" pos:end="3517:19">vm86</name></name> <operator pos:start="3517:21" pos:end="3517:22">&amp;&amp;</operator> <name pos:start="3517:24" pos:end="3517:30"><name pos:start="3517:24" pos:end="3517:24">s</name><operator pos:start="3517:25" pos:end="3517:26">-&gt;</operator><name pos:start="3517:27" pos:end="3517:30">iopl</name></name> <operator pos:start="3517:32" pos:end="3517:33">!=</operator> <literal type="number" pos:start="3517:35" pos:end="3517:35">3</literal></expr>)</condition> <block pos:start="3517:38" pos:end="3521:9">{<block_content pos:start="3519:13" pos:end="3519:64">

            <expr_stmt pos:start="3519:13" pos:end="3519:64"><expr pos:start="3519:13" pos:end="3519:63"><call pos:start="3519:13" pos:end="3519:63"><name pos:start="3519:13" pos:end="3519:25">gen_exception</name><argument_list pos:start="3519:26" pos:end="3519:63">(<argument pos:start="3519:27" pos:end="3519:27"><expr pos:start="3519:27" pos:end="3519:27"><name pos:start="3519:27" pos:end="3519:27">s</name></expr></argument>, <argument pos:start="3519:30" pos:end="3519:39"><expr pos:start="3519:30" pos:end="3519:39"><name pos:start="3519:30" pos:end="3519:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="3519:42" pos:end="3519:62"><expr pos:start="3519:42" pos:end="3519:62"><name pos:start="3519:42" pos:end="3519:49">pc_start</name> <operator pos:start="3519:51" pos:end="3519:51">-</operator> <name pos:start="3519:53" pos:end="3519:62"><name pos:start="3519:53" pos:end="3519:53">s</name><operator pos:start="3519:54" pos:end="3519:55">-&gt;</operator><name pos:start="3519:56" pos:end="3519:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3521:11" pos:end="3531:9">else <block pos:start="3521:16" pos:end="3531:9">{<block_content pos:start="3523:13" pos:end="3529:27">

            <if_stmt pos:start="3523:13" pos:end="3525:43"><if pos:start="3523:13" pos:end="3525:43">if <condition pos:start="3523:16" pos:end="3523:42">(<expr pos:start="3523:17" pos:end="3523:41"><name pos:start="3523:17" pos:end="3523:24"><name pos:start="3523:17" pos:end="3523:17">s</name><operator pos:start="3523:18" pos:end="3523:19">-&gt;</operator><name pos:start="3523:20" pos:end="3523:24">cc_op</name></name> <operator pos:start="3523:26" pos:end="3523:27">!=</operator> <name pos:start="3523:29" pos:end="3523:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3525:17" pos:end="3525:43"><block_content pos:start="3525:17" pos:end="3525:43">

                <expr_stmt pos:start="3525:17" pos:end="3525:43"><expr pos:start="3525:17" pos:end="3525:42"><call pos:start="3525:17" pos:end="3525:42"><name pos:start="3525:17" pos:end="3525:32">gen_op_set_cc_op</name><argument_list pos:start="3525:33" pos:end="3525:42">(<argument pos:start="3525:34" pos:end="3525:41"><expr pos:start="3525:34" pos:end="3525:41"><name pos:start="3525:34" pos:end="3525:41"><name pos:start="3525:34" pos:end="3525:34">s</name><operator pos:start="3525:35" pos:end="3525:36">-&gt;</operator><name pos:start="3525:37" pos:end="3525:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="3527:13" pos:end="3527:36"><expr pos:start="3527:13" pos:end="3527:35"><call pos:start="3527:13" pos:end="3527:35"><name pos:start="3527:13" pos:end="3527:33">gen_op_movl_T0_eflags</name><argument_list pos:start="3527:34" pos:end="3527:35">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3529:13" pos:end="3529:27"><expr pos:start="3529:13" pos:end="3529:26"><call pos:start="3529:13" pos:end="3529:26"><name pos:start="3529:13" pos:end="3529:23">gen_push_T0</name><argument_list pos:start="3529:24" pos:end="3529:26">(<argument pos:start="3529:25" pos:end="3529:25"><expr pos:start="3529:25" pos:end="3529:25"><name pos:start="3529:25" pos:end="3529:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3533:9" pos:end="3533:14">break;</break>

    <case pos:start="3535:5" pos:end="3535:14">case <expr pos:start="3535:10" pos:end="3535:13"><literal type="number" pos:start="3535:10" pos:end="3535:13">0x9d</literal></expr>:</case> <comment type="block" pos:start="3535:16" pos:end="3535:25">/* popf */</comment>

        <if_stmt pos:start="3537:9" pos:end="3597:9"><if pos:start="3537:9" pos:end="3541:9">if <condition pos:start="3537:12" pos:end="3537:36">(<expr pos:start="3537:13" pos:end="3537:35"><name pos:start="3537:13" pos:end="3537:19"><name pos:start="3537:13" pos:end="3537:13">s</name><operator pos:start="3537:14" pos:end="3537:15">-&gt;</operator><name pos:start="3537:16" pos:end="3537:19">vm86</name></name> <operator pos:start="3537:21" pos:end="3537:22">&amp;&amp;</operator> <name pos:start="3537:24" pos:end="3537:30"><name pos:start="3537:24" pos:end="3537:24">s</name><operator pos:start="3537:25" pos:end="3537:26">-&gt;</operator><name pos:start="3537:27" pos:end="3537:30">iopl</name></name> <operator pos:start="3537:32" pos:end="3537:33">!=</operator> <literal type="number" pos:start="3537:35" pos:end="3537:35">3</literal></expr>)</condition> <block pos:start="3537:38" pos:end="3541:9">{<block_content pos:start="3539:13" pos:end="3539:64">

            <expr_stmt pos:start="3539:13" pos:end="3539:64"><expr pos:start="3539:13" pos:end="3539:63"><call pos:start="3539:13" pos:end="3539:63"><name pos:start="3539:13" pos:end="3539:25">gen_exception</name><argument_list pos:start="3539:26" pos:end="3539:63">(<argument pos:start="3539:27" pos:end="3539:27"><expr pos:start="3539:27" pos:end="3539:27"><name pos:start="3539:27" pos:end="3539:27">s</name></expr></argument>, <argument pos:start="3539:30" pos:end="3539:39"><expr pos:start="3539:30" pos:end="3539:39"><name pos:start="3539:30" pos:end="3539:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="3539:42" pos:end="3539:62"><expr pos:start="3539:42" pos:end="3539:62"><name pos:start="3539:42" pos:end="3539:49">pc_start</name> <operator pos:start="3539:51" pos:end="3539:51">-</operator> <name pos:start="3539:53" pos:end="3539:62"><name pos:start="3539:53" pos:end="3539:53">s</name><operator pos:start="3539:54" pos:end="3539:55">-&gt;</operator><name pos:start="3539:56" pos:end="3539:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3541:11" pos:end="3597:9">else <block pos:start="3541:16" pos:end="3597:9">{<block_content pos:start="3543:13" pos:end="3595:23">

            <expr_stmt pos:start="3543:13" pos:end="3543:26"><expr pos:start="3543:13" pos:end="3543:25"><call pos:start="3543:13" pos:end="3543:25"><name pos:start="3543:13" pos:end="3543:22">gen_pop_T0</name><argument_list pos:start="3543:23" pos:end="3543:25">(<argument pos:start="3543:24" pos:end="3543:24"><expr pos:start="3543:24" pos:end="3543:24"><name pos:start="3543:24" pos:end="3543:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="3545:13" pos:end="3585:13"><if pos:start="3545:13" pos:end="3557:13">if <condition pos:start="3545:16" pos:end="3545:28">(<expr pos:start="3545:17" pos:end="3545:27"><name pos:start="3545:17" pos:end="3545:22"><name pos:start="3545:17" pos:end="3545:17">s</name><operator pos:start="3545:18" pos:end="3545:19">-&gt;</operator><name pos:start="3545:20" pos:end="3545:22">cpl</name></name> <operator pos:start="3545:24" pos:end="3545:25">==</operator> <literal type="number" pos:start="3545:27" pos:end="3545:27">0</literal></expr>)</condition> <block pos:start="3545:30" pos:end="3557:13">{<block_content pos:start="3547:17" pos:end="3555:17">

                <if_stmt pos:start="3547:17" pos:end="3555:17"><if pos:start="3547:17" pos:end="3551:17">if <condition pos:start="3547:20" pos:end="3547:29">(<expr pos:start="3547:21" pos:end="3547:28"><name pos:start="3547:21" pos:end="3547:28"><name pos:start="3547:21" pos:end="3547:21">s</name><operator pos:start="3547:22" pos:end="3547:23">-&gt;</operator><name pos:start="3547:24" pos:end="3547:28">dflag</name></name></expr>)</condition> <block pos:start="3547:31" pos:end="3551:17">{<block_content pos:start="3549:21" pos:end="3549:49">

                    <expr_stmt pos:start="3549:21" pos:end="3549:49"><expr pos:start="3549:21" pos:end="3549:48"><call pos:start="3549:21" pos:end="3549:48"><name pos:start="3549:21" pos:end="3549:46">gen_op_movl_eflags_T0_cpl0</name><argument_list pos:start="3549:47" pos:end="3549:48">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="3551:19" pos:end="3555:17">else <block pos:start="3551:24" pos:end="3555:17">{<block_content pos:start="3553:21" pos:end="3553:49">

                    <expr_stmt pos:start="3553:21" pos:end="3553:49"><expr pos:start="3553:21" pos:end="3553:48"><call pos:start="3553:21" pos:end="3553:48"><name pos:start="3553:21" pos:end="3553:46">gen_op_movw_eflags_T0_cpl0</name><argument_list pos:start="3553:47" pos:end="3553:48">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="3557:15" pos:end="3585:13">else <block pos:start="3557:20" pos:end="3585:13">{<block_content pos:start="3559:17" pos:end="3583:17">

                <if_stmt pos:start="3559:17" pos:end="3583:17"><if pos:start="3559:17" pos:end="3571:17">if <condition pos:start="3559:20" pos:end="3559:38">(<expr pos:start="3559:21" pos:end="3559:37"><name pos:start="3559:21" pos:end="3559:26"><name pos:start="3559:21" pos:end="3559:21">s</name><operator pos:start="3559:22" pos:end="3559:23">-&gt;</operator><name pos:start="3559:24" pos:end="3559:26">cpl</name></name> <operator pos:start="3559:28" pos:end="3559:29">&lt;=</operator> <name pos:start="3559:31" pos:end="3559:37"><name pos:start="3559:31" pos:end="3559:31">s</name><operator pos:start="3559:32" pos:end="3559:33">-&gt;</operator><name pos:start="3559:34" pos:end="3559:37">iopl</name></name></expr>)</condition> <block pos:start="3559:40" pos:end="3571:17">{<block_content pos:start="3561:21" pos:end="3569:21">

                    <if_stmt pos:start="3561:21" pos:end="3569:21"><if pos:start="3561:21" pos:end="3565:21">if <condition pos:start="3561:24" pos:end="3561:33">(<expr pos:start="3561:25" pos:end="3561:32"><name pos:start="3561:25" pos:end="3561:32"><name pos:start="3561:25" pos:end="3561:25">s</name><operator pos:start="3561:26" pos:end="3561:27">-&gt;</operator><name pos:start="3561:28" pos:end="3561:32">dflag</name></name></expr>)</condition> <block pos:start="3561:35" pos:end="3565:21">{<block_content pos:start="3563:25" pos:end="3563:51">

                        <expr_stmt pos:start="3563:25" pos:end="3563:51"><expr pos:start="3563:25" pos:end="3563:50"><call pos:start="3563:25" pos:end="3563:50"><name pos:start="3563:25" pos:end="3563:48">gen_op_movl_eflags_T0_io</name><argument_list pos:start="3563:49" pos:end="3563:50">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="3565:23" pos:end="3569:21">else <block pos:start="3565:28" pos:end="3569:21">{<block_content pos:start="3567:25" pos:end="3567:51">

                        <expr_stmt pos:start="3567:25" pos:end="3567:51"><expr pos:start="3567:25" pos:end="3567:50"><call pos:start="3567:25" pos:end="3567:50"><name pos:start="3567:25" pos:end="3567:48">gen_op_movw_eflags_T0_io</name><argument_list pos:start="3567:49" pos:end="3567:50">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="3571:19" pos:end="3583:17">else <block pos:start="3571:24" pos:end="3583:17">{<block_content pos:start="3573:21" pos:end="3581:21">

                    <if_stmt pos:start="3573:21" pos:end="3581:21"><if pos:start="3573:21" pos:end="3577:21">if <condition pos:start="3573:24" pos:end="3573:33">(<expr pos:start="3573:25" pos:end="3573:32"><name pos:start="3573:25" pos:end="3573:32"><name pos:start="3573:25" pos:end="3573:25">s</name><operator pos:start="3573:26" pos:end="3573:27">-&gt;</operator><name pos:start="3573:28" pos:end="3573:32">dflag</name></name></expr>)</condition> <block pos:start="3573:35" pos:end="3577:21">{<block_content pos:start="3575:25" pos:end="3575:48">

                        <expr_stmt pos:start="3575:25" pos:end="3575:48"><expr pos:start="3575:25" pos:end="3575:47"><call pos:start="3575:25" pos:end="3575:47"><name pos:start="3575:25" pos:end="3575:45">gen_op_movl_eflags_T0</name><argument_list pos:start="3575:46" pos:end="3575:47">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="3577:23" pos:end="3581:21">else <block pos:start="3577:28" pos:end="3581:21">{<block_content pos:start="3579:25" pos:end="3579:48">

                        <expr_stmt pos:start="3579:25" pos:end="3579:48"><expr pos:start="3579:25" pos:end="3579:47"><call pos:start="3579:25" pos:end="3579:47"><name pos:start="3579:25" pos:end="3579:45">gen_op_movw_eflags_T0</name><argument_list pos:start="3579:46" pos:end="3579:47">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="3587:13" pos:end="3587:30"><expr pos:start="3587:13" pos:end="3587:29"><call pos:start="3587:13" pos:end="3587:29"><name pos:start="3587:13" pos:end="3587:26">gen_pop_update</name><argument_list pos:start="3587:27" pos:end="3587:29">(<argument pos:start="3587:28" pos:end="3587:28"><expr pos:start="3587:28" pos:end="3587:28"><name pos:start="3587:28" pos:end="3587:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3589:13" pos:end="3589:36"><expr pos:start="3589:13" pos:end="3589:35"><name pos:start="3589:13" pos:end="3589:20"><name pos:start="3589:13" pos:end="3589:13">s</name><operator pos:start="3589:14" pos:end="3589:15">-&gt;</operator><name pos:start="3589:16" pos:end="3589:20">cc_op</name></name> <operator pos:start="3589:22" pos:end="3589:22">=</operator> <name pos:start="3589:24" pos:end="3589:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            <comment type="block" pos:start="3591:13" pos:end="3591:62">/* abort translation because TF flag may change */</comment>

            <expr_stmt pos:start="3593:13" pos:end="3593:46"><expr pos:start="3593:13" pos:end="3593:45"><call pos:start="3593:13" pos:end="3593:45"><name pos:start="3593:13" pos:end="3593:25">gen_op_jmp_im</name><argument_list pos:start="3593:26" pos:end="3593:45">(<argument pos:start="3593:27" pos:end="3593:44"><expr pos:start="3593:27" pos:end="3593:44"><name pos:start="3593:27" pos:end="3593:31"><name pos:start="3593:27" pos:end="3593:27">s</name><operator pos:start="3593:28" pos:end="3593:29">-&gt;</operator><name pos:start="3593:30" pos:end="3593:31">pc</name></name> <operator pos:start="3593:33" pos:end="3593:33">-</operator> <name pos:start="3593:35" pos:end="3593:44"><name pos:start="3593:35" pos:end="3593:35">s</name><operator pos:start="3593:36" pos:end="3593:37">-&gt;</operator><name pos:start="3593:38" pos:end="3593:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3595:13" pos:end="3595:23"><expr pos:start="3595:13" pos:end="3595:22"><call pos:start="3595:13" pos:end="3595:22"><name pos:start="3595:13" pos:end="3595:19">gen_eob</name><argument_list pos:start="3595:20" pos:end="3595:22">(<argument pos:start="3595:21" pos:end="3595:21"><expr pos:start="3595:21" pos:end="3595:21"><name pos:start="3595:21" pos:end="3595:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3599:9" pos:end="3599:14">break;</break>

    <case pos:start="3601:5" pos:end="3601:14">case <expr pos:start="3601:10" pos:end="3601:13"><literal type="number" pos:start="3601:10" pos:end="3601:13">0x9e</literal></expr>:</case> <comment type="block" pos:start="3601:16" pos:end="3601:25">/* sahf */</comment>

        <expr_stmt pos:start="3603:9" pos:end="3603:46"><expr pos:start="3603:9" pos:end="3603:45"><name pos:start="3603:9" pos:end="3603:43"><name pos:start="3603:9" pos:end="3603:25">gen_op_mov_TN_reg</name><index pos:start="3603:26" pos:end="3603:34">[<expr pos:start="3603:27" pos:end="3603:33"><name pos:start="3603:27" pos:end="3603:33">OT_BYTE</name></expr>]</index><index pos:start="3603:35" pos:end="3603:37">[<expr pos:start="3603:36" pos:end="3603:36"><literal type="number" pos:start="3603:36" pos:end="3603:36">0</literal></expr>]</index><index pos:start="3603:38" pos:end="3603:43">[<expr pos:start="3603:39" pos:end="3603:42"><name pos:start="3603:39" pos:end="3603:42">R_AH</name></expr>]</index></name><operator pos:start="3603:44" pos:end="3603:44">(</operator><operator pos:start="3603:45" pos:end="3603:45">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="3605:9" pos:end="3607:39"><if pos:start="3605:9" pos:end="3607:39">if <condition pos:start="3605:12" pos:end="3605:38">(<expr pos:start="3605:13" pos:end="3605:37"><name pos:start="3605:13" pos:end="3605:20"><name pos:start="3605:13" pos:end="3605:13">s</name><operator pos:start="3605:14" pos:end="3605:15">-&gt;</operator><name pos:start="3605:16" pos:end="3605:20">cc_op</name></name> <operator pos:start="3605:22" pos:end="3605:23">!=</operator> <name pos:start="3605:25" pos:end="3605:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3607:13" pos:end="3607:39"><block_content pos:start="3607:13" pos:end="3607:39">

            <expr_stmt pos:start="3607:13" pos:end="3607:39"><expr pos:start="3607:13" pos:end="3607:38"><call pos:start="3607:13" pos:end="3607:38"><name pos:start="3607:13" pos:end="3607:28">gen_op_set_cc_op</name><argument_list pos:start="3607:29" pos:end="3607:38">(<argument pos:start="3607:30" pos:end="3607:37"><expr pos:start="3607:30" pos:end="3607:37"><name pos:start="3607:30" pos:end="3607:37"><name pos:start="3607:30" pos:end="3607:30">s</name><operator pos:start="3607:31" pos:end="3607:32">-&gt;</operator><name pos:start="3607:33" pos:end="3607:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3609:9" pos:end="3609:32"><expr pos:start="3609:9" pos:end="3609:31"><call pos:start="3609:9" pos:end="3609:31"><name pos:start="3609:9" pos:end="3609:29">gen_op_movb_eflags_T0</name><argument_list pos:start="3609:30" pos:end="3609:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3611:9" pos:end="3611:32"><expr pos:start="3611:9" pos:end="3611:31"><name pos:start="3611:9" pos:end="3611:16"><name pos:start="3611:9" pos:end="3611:9">s</name><operator pos:start="3611:10" pos:end="3611:11">-&gt;</operator><name pos:start="3611:12" pos:end="3611:16">cc_op</name></name> <operator pos:start="3611:18" pos:end="3611:18">=</operator> <name pos:start="3611:20" pos:end="3611:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3613:9" pos:end="3613:14">break;</break>

    <case pos:start="3615:5" pos:end="3615:14">case <expr pos:start="3615:10" pos:end="3615:13"><literal type="number" pos:start="3615:10" pos:end="3615:13">0x9f</literal></expr>:</case> <comment type="block" pos:start="3615:16" pos:end="3615:25">/* lahf */</comment>

        <if_stmt pos:start="3617:9" pos:end="3619:39"><if pos:start="3617:9" pos:end="3619:39">if <condition pos:start="3617:12" pos:end="3617:38">(<expr pos:start="3617:13" pos:end="3617:37"><name pos:start="3617:13" pos:end="3617:20"><name pos:start="3617:13" pos:end="3617:13">s</name><operator pos:start="3617:14" pos:end="3617:15">-&gt;</operator><name pos:start="3617:16" pos:end="3617:20">cc_op</name></name> <operator pos:start="3617:22" pos:end="3617:23">!=</operator> <name pos:start="3617:25" pos:end="3617:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3619:13" pos:end="3619:39"><block_content pos:start="3619:13" pos:end="3619:39">

            <expr_stmt pos:start="3619:13" pos:end="3619:39"><expr pos:start="3619:13" pos:end="3619:38"><call pos:start="3619:13" pos:end="3619:38"><name pos:start="3619:13" pos:end="3619:28">gen_op_set_cc_op</name><argument_list pos:start="3619:29" pos:end="3619:38">(<argument pos:start="3619:30" pos:end="3619:37"><expr pos:start="3619:30" pos:end="3619:37"><name pos:start="3619:30" pos:end="3619:37"><name pos:start="3619:30" pos:end="3619:30">s</name><operator pos:start="3619:31" pos:end="3619:32">-&gt;</operator><name pos:start="3619:33" pos:end="3619:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3621:9" pos:end="3621:32"><expr pos:start="3621:9" pos:end="3621:31"><call pos:start="3621:9" pos:end="3621:31"><name pos:start="3621:9" pos:end="3621:29">gen_op_movl_T0_eflags</name><argument_list pos:start="3621:30" pos:end="3621:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3623:9" pos:end="3623:43"><expr pos:start="3623:9" pos:end="3623:42"><name pos:start="3623:9" pos:end="3623:40"><name pos:start="3623:9" pos:end="3623:25">gen_op_mov_reg_T0</name><index pos:start="3623:26" pos:end="3623:34">[<expr pos:start="3623:27" pos:end="3623:33"><name pos:start="3623:27" pos:end="3623:33">OT_BYTE</name></expr>]</index><index pos:start="3623:35" pos:end="3623:40">[<expr pos:start="3623:36" pos:end="3623:39"><name pos:start="3623:36" pos:end="3623:39">R_AH</name></expr>]</index></name><operator pos:start="3623:41" pos:end="3623:41">(</operator><operator pos:start="3623:42" pos:end="3623:42">)</operator></expr>;</expr_stmt>

        <break pos:start="3625:9" pos:end="3625:14">break;</break>

    <case pos:start="3627:5" pos:end="3627:14">case <expr pos:start="3627:10" pos:end="3627:13"><literal type="number" pos:start="3627:10" pos:end="3627:13">0xf5</literal></expr>:</case> <comment type="block" pos:start="3627:16" pos:end="3627:24">/* cmc */</comment>

        <if_stmt pos:start="3629:9" pos:end="3631:39"><if pos:start="3629:9" pos:end="3631:39">if <condition pos:start="3629:12" pos:end="3629:38">(<expr pos:start="3629:13" pos:end="3629:37"><name pos:start="3629:13" pos:end="3629:20"><name pos:start="3629:13" pos:end="3629:13">s</name><operator pos:start="3629:14" pos:end="3629:15">-&gt;</operator><name pos:start="3629:16" pos:end="3629:20">cc_op</name></name> <operator pos:start="3629:22" pos:end="3629:23">!=</operator> <name pos:start="3629:25" pos:end="3629:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3631:13" pos:end="3631:39"><block_content pos:start="3631:13" pos:end="3631:39">

            <expr_stmt pos:start="3631:13" pos:end="3631:39"><expr pos:start="3631:13" pos:end="3631:38"><call pos:start="3631:13" pos:end="3631:38"><name pos:start="3631:13" pos:end="3631:28">gen_op_set_cc_op</name><argument_list pos:start="3631:29" pos:end="3631:38">(<argument pos:start="3631:30" pos:end="3631:37"><expr pos:start="3631:30" pos:end="3631:37"><name pos:start="3631:30" pos:end="3631:37"><name pos:start="3631:30" pos:end="3631:30">s</name><operator pos:start="3631:31" pos:end="3631:32">-&gt;</operator><name pos:start="3631:33" pos:end="3631:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3633:9" pos:end="3633:21"><expr pos:start="3633:9" pos:end="3633:20"><call pos:start="3633:9" pos:end="3633:20"><name pos:start="3633:9" pos:end="3633:18">gen_op_cmc</name><argument_list pos:start="3633:19" pos:end="3633:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3635:9" pos:end="3635:32"><expr pos:start="3635:9" pos:end="3635:31"><name pos:start="3635:9" pos:end="3635:16"><name pos:start="3635:9" pos:end="3635:9">s</name><operator pos:start="3635:10" pos:end="3635:11">-&gt;</operator><name pos:start="3635:12" pos:end="3635:16">cc_op</name></name> <operator pos:start="3635:18" pos:end="3635:18">=</operator> <name pos:start="3635:20" pos:end="3635:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3637:9" pos:end="3637:14">break;</break>

    <case pos:start="3639:5" pos:end="3639:14">case <expr pos:start="3639:10" pos:end="3639:13"><literal type="number" pos:start="3639:10" pos:end="3639:13">0xf8</literal></expr>:</case> <comment type="block" pos:start="3639:16" pos:end="3639:24">/* clc */</comment>

        <if_stmt pos:start="3641:9" pos:end="3643:39"><if pos:start="3641:9" pos:end="3643:39">if <condition pos:start="3641:12" pos:end="3641:38">(<expr pos:start="3641:13" pos:end="3641:37"><name pos:start="3641:13" pos:end="3641:20"><name pos:start="3641:13" pos:end="3641:13">s</name><operator pos:start="3641:14" pos:end="3641:15">-&gt;</operator><name pos:start="3641:16" pos:end="3641:20">cc_op</name></name> <operator pos:start="3641:22" pos:end="3641:23">!=</operator> <name pos:start="3641:25" pos:end="3641:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3643:13" pos:end="3643:39"><block_content pos:start="3643:13" pos:end="3643:39">

            <expr_stmt pos:start="3643:13" pos:end="3643:39"><expr pos:start="3643:13" pos:end="3643:38"><call pos:start="3643:13" pos:end="3643:38"><name pos:start="3643:13" pos:end="3643:28">gen_op_set_cc_op</name><argument_list pos:start="3643:29" pos:end="3643:38">(<argument pos:start="3643:30" pos:end="3643:37"><expr pos:start="3643:30" pos:end="3643:37"><name pos:start="3643:30" pos:end="3643:37"><name pos:start="3643:30" pos:end="3643:30">s</name><operator pos:start="3643:31" pos:end="3643:32">-&gt;</operator><name pos:start="3643:33" pos:end="3643:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3645:9" pos:end="3645:21"><expr pos:start="3645:9" pos:end="3645:20"><call pos:start="3645:9" pos:end="3645:20"><name pos:start="3645:9" pos:end="3645:18">gen_op_clc</name><argument_list pos:start="3645:19" pos:end="3645:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3647:9" pos:end="3647:32"><expr pos:start="3647:9" pos:end="3647:31"><name pos:start="3647:9" pos:end="3647:16"><name pos:start="3647:9" pos:end="3647:9">s</name><operator pos:start="3647:10" pos:end="3647:11">-&gt;</operator><name pos:start="3647:12" pos:end="3647:16">cc_op</name></name> <operator pos:start="3647:18" pos:end="3647:18">=</operator> <name pos:start="3647:20" pos:end="3647:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3649:9" pos:end="3649:14">break;</break>

    <case pos:start="3651:5" pos:end="3651:14">case <expr pos:start="3651:10" pos:end="3651:13"><literal type="number" pos:start="3651:10" pos:end="3651:13">0xf9</literal></expr>:</case> <comment type="block" pos:start="3651:16" pos:end="3651:24">/* stc */</comment>

        <if_stmt pos:start="3653:9" pos:end="3655:39"><if pos:start="3653:9" pos:end="3655:39">if <condition pos:start="3653:12" pos:end="3653:38">(<expr pos:start="3653:13" pos:end="3653:37"><name pos:start="3653:13" pos:end="3653:20"><name pos:start="3653:13" pos:end="3653:13">s</name><operator pos:start="3653:14" pos:end="3653:15">-&gt;</operator><name pos:start="3653:16" pos:end="3653:20">cc_op</name></name> <operator pos:start="3653:22" pos:end="3653:23">!=</operator> <name pos:start="3653:25" pos:end="3653:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3655:13" pos:end="3655:39"><block_content pos:start="3655:13" pos:end="3655:39">

            <expr_stmt pos:start="3655:13" pos:end="3655:39"><expr pos:start="3655:13" pos:end="3655:38"><call pos:start="3655:13" pos:end="3655:38"><name pos:start="3655:13" pos:end="3655:28">gen_op_set_cc_op</name><argument_list pos:start="3655:29" pos:end="3655:38">(<argument pos:start="3655:30" pos:end="3655:37"><expr pos:start="3655:30" pos:end="3655:37"><name pos:start="3655:30" pos:end="3655:37"><name pos:start="3655:30" pos:end="3655:30">s</name><operator pos:start="3655:31" pos:end="3655:32">-&gt;</operator><name pos:start="3655:33" pos:end="3655:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3657:9" pos:end="3657:21"><expr pos:start="3657:9" pos:end="3657:20"><call pos:start="3657:9" pos:end="3657:20"><name pos:start="3657:9" pos:end="3657:18">gen_op_stc</name><argument_list pos:start="3657:19" pos:end="3657:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3659:9" pos:end="3659:32"><expr pos:start="3659:9" pos:end="3659:31"><name pos:start="3659:9" pos:end="3659:16"><name pos:start="3659:9" pos:end="3659:9">s</name><operator pos:start="3659:10" pos:end="3659:11">-&gt;</operator><name pos:start="3659:12" pos:end="3659:16">cc_op</name></name> <operator pos:start="3659:18" pos:end="3659:18">=</operator> <name pos:start="3659:20" pos:end="3659:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3661:9" pos:end="3661:14">break;</break>

    <case pos:start="3663:5" pos:end="3663:14">case <expr pos:start="3663:10" pos:end="3663:13"><literal type="number" pos:start="3663:10" pos:end="3663:13">0xfc</literal></expr>:</case> <comment type="block" pos:start="3663:16" pos:end="3663:24">/* cld */</comment>

        <expr_stmt pos:start="3665:9" pos:end="3665:21"><expr pos:start="3665:9" pos:end="3665:20"><call pos:start="3665:9" pos:end="3665:20"><name pos:start="3665:9" pos:end="3665:18">gen_op_cld</name><argument_list pos:start="3665:19" pos:end="3665:20">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3667:9" pos:end="3667:14">break;</break>

    <case pos:start="3669:5" pos:end="3669:14">case <expr pos:start="3669:10" pos:end="3669:13"><literal type="number" pos:start="3669:10" pos:end="3669:13">0xfd</literal></expr>:</case> <comment type="block" pos:start="3669:16" pos:end="3669:24">/* std */</comment>

        <expr_stmt pos:start="3671:9" pos:end="3671:21"><expr pos:start="3671:9" pos:end="3671:20"><call pos:start="3671:9" pos:end="3671:20"><name pos:start="3671:9" pos:end="3671:18">gen_op_std</name><argument_list pos:start="3671:19" pos:end="3671:20">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3673:9" pos:end="3673:14">break;</break>



        <comment type="block" format="doxygen" pos:start="3677:9" pos:end="3677:34">/************************/</comment>

        <comment type="block" pos:start="3679:9" pos:end="3679:28">/* bit operations */</comment>

    <case pos:start="3681:5" pos:end="3681:15">case <expr pos:start="3681:10" pos:end="3681:14"><literal type="number" pos:start="3681:10" pos:end="3681:14">0x1ba</literal></expr>:</case> <comment type="block" pos:start="3681:17" pos:end="3681:43">/* bt/bts/btr/btc Gv, im */</comment>

        <expr_stmt pos:start="3683:9" pos:end="3683:39"><expr pos:start="3683:9" pos:end="3683:38"><name pos:start="3683:9" pos:end="3683:10">ot</name> <operator pos:start="3683:12" pos:end="3683:12">=</operator> <ternary pos:start="3683:14" pos:end="3683:38"><condition pos:start="3683:14" pos:end="3683:20"><expr pos:start="3683:14" pos:end="3683:18"><name pos:start="3683:14" pos:end="3683:18">dflag</name></expr> ?</condition><then pos:start="3683:22" pos:end="3683:28"> <expr pos:start="3683:22" pos:end="3683:28"><name pos:start="3683:22" pos:end="3683:28">OT_LONG</name></expr> </then><else pos:start="3683:30" pos:end="3683:38">: <expr pos:start="3683:32" pos:end="3683:38"><name pos:start="3683:32" pos:end="3683:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="3685:9" pos:end="3685:35"><expr pos:start="3685:9" pos:end="3685:34"><name pos:start="3685:9" pos:end="3685:13">modrm</name> <operator pos:start="3685:15" pos:end="3685:15">=</operator> <call pos:start="3685:17" pos:end="3685:34"><name pos:start="3685:17" pos:end="3685:25">ldub_code</name><argument_list pos:start="3685:26" pos:end="3685:34">(<argument pos:start="3685:27" pos:end="3685:33"><expr pos:start="3685:27" pos:end="3685:33"><name pos:start="3685:27" pos:end="3685:31"><name pos:start="3685:27" pos:end="3685:27">s</name><operator pos:start="3685:28" pos:end="3685:29">-&gt;</operator><name pos:start="3685:30" pos:end="3685:31">pc</name></name><operator pos:start="3685:32" pos:end="3685:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3687:9" pos:end="3687:30"><expr pos:start="3687:9" pos:end="3687:29"><name pos:start="3687:9" pos:end="3687:10">op</name> <operator pos:start="3687:12" pos:end="3687:12">=</operator> <operator pos:start="3687:14" pos:end="3687:14">(</operator><name pos:start="3687:15" pos:end="3687:19">modrm</name> <operator pos:start="3687:21" pos:end="3687:22">&gt;&gt;</operator> <literal type="number" pos:start="3687:24" pos:end="3687:24">3</literal><operator pos:start="3687:25" pos:end="3687:25">)</operator> <operator pos:start="3687:27" pos:end="3687:27">&amp;</operator> <literal type="number" pos:start="3687:29" pos:end="3687:29">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3689:9" pos:end="3689:31"><expr pos:start="3689:9" pos:end="3689:30"><name pos:start="3689:9" pos:end="3689:11">mod</name> <operator pos:start="3689:13" pos:end="3689:13">=</operator> <operator pos:start="3689:15" pos:end="3689:15">(</operator><name pos:start="3689:16" pos:end="3689:20">modrm</name> <operator pos:start="3689:22" pos:end="3689:23">&gt;&gt;</operator> <literal type="number" pos:start="3689:25" pos:end="3689:25">6</literal><operator pos:start="3689:26" pos:end="3689:26">)</operator> <operator pos:start="3689:28" pos:end="3689:28">&amp;</operator> <literal type="number" pos:start="3689:30" pos:end="3689:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3691:9" pos:end="3691:23"><expr pos:start="3691:9" pos:end="3691:22"><name pos:start="3691:9" pos:end="3691:10">rm</name> <operator pos:start="3691:12" pos:end="3691:12">=</operator> <name pos:start="3691:14" pos:end="3691:18">modrm</name> <operator pos:start="3691:20" pos:end="3691:20">&amp;</operator> <literal type="number" pos:start="3691:22" pos:end="3691:22">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="3693:9" pos:end="3703:9"><if pos:start="3693:9" pos:end="3699:9">if <condition pos:start="3693:12" pos:end="3693:21">(<expr pos:start="3693:13" pos:end="3693:20"><name pos:start="3693:13" pos:end="3693:15">mod</name> <operator pos:start="3693:17" pos:end="3693:18">!=</operator> <literal type="number" pos:start="3693:20" pos:end="3693:20">3</literal></expr>)</condition> <block pos:start="3693:23" pos:end="3699:9">{<block_content pos:start="3695:13" pos:end="3697:49">

            <expr_stmt pos:start="3695:13" pos:end="3695:61"><expr pos:start="3695:13" pos:end="3695:60"><call pos:start="3695:13" pos:end="3695:60"><name pos:start="3695:13" pos:end="3695:25">gen_lea_modrm</name><argument_list pos:start="3695:26" pos:end="3695:60">(<argument pos:start="3695:27" pos:end="3695:27"><expr pos:start="3695:27" pos:end="3695:27"><name pos:start="3695:27" pos:end="3695:27">s</name></expr></argument>, <argument pos:start="3695:30" pos:end="3695:34"><expr pos:start="3695:30" pos:end="3695:34"><name pos:start="3695:30" pos:end="3695:34">modrm</name></expr></argument>, <argument pos:start="3695:37" pos:end="3695:45"><expr pos:start="3695:37" pos:end="3695:45"><operator pos:start="3695:37" pos:end="3695:37">&amp;</operator><name pos:start="3695:38" pos:end="3695:45">reg_addr</name></expr></argument>, <argument pos:start="3695:48" pos:end="3695:59"><expr pos:start="3695:48" pos:end="3695:59"><operator pos:start="3695:48" pos:end="3695:48">&amp;</operator><name pos:start="3695:49" pos:end="3695:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3697:13" pos:end="3697:49"><expr pos:start="3697:13" pos:end="3697:48"><name pos:start="3697:13" pos:end="3697:46"><name pos:start="3697:13" pos:end="3697:27">gen_op_ld_T0_A0</name><index pos:start="3697:28" pos:end="3697:46">[<expr pos:start="3697:29" pos:end="3697:45"><name pos:start="3697:29" pos:end="3697:30">ot</name> <operator pos:start="3697:32" pos:end="3697:32">+</operator> <name pos:start="3697:34" pos:end="3697:45"><name pos:start="3697:34" pos:end="3697:34">s</name><operator pos:start="3697:35" pos:end="3697:36">-&gt;</operator><name pos:start="3697:37" pos:end="3697:45">mem_index</name></name></expr>]</index></name><operator pos:start="3697:47" pos:end="3697:47">(</operator><operator pos:start="3697:48" pos:end="3697:48">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3699:11" pos:end="3703:9">else <block pos:start="3699:16" pos:end="3703:9">{<block_content pos:start="3701:13" pos:end="3701:43">

            <expr_stmt pos:start="3701:13" pos:end="3701:43"><expr pos:start="3701:13" pos:end="3701:42"><name pos:start="3701:13" pos:end="3701:40"><name pos:start="3701:13" pos:end="3701:29">gen_op_mov_TN_reg</name><index pos:start="3701:30" pos:end="3701:33">[<expr pos:start="3701:31" pos:end="3701:32"><name pos:start="3701:31" pos:end="3701:32">ot</name></expr>]</index><index pos:start="3701:34" pos:end="3701:36">[<expr pos:start="3701:35" pos:end="3701:35"><literal type="number" pos:start="3701:35" pos:end="3701:35">0</literal></expr>]</index><index pos:start="3701:37" pos:end="3701:40">[<expr pos:start="3701:38" pos:end="3701:39"><name pos:start="3701:38" pos:end="3701:39">rm</name></expr>]</index></name><operator pos:start="3701:41" pos:end="3701:41">(</operator><operator pos:start="3701:42" pos:end="3701:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="3705:9" pos:end="3705:24">/* load shift */</comment>

        <expr_stmt pos:start="3707:9" pos:end="3707:33"><expr pos:start="3707:9" pos:end="3707:32"><name pos:start="3707:9" pos:end="3707:11">val</name> <operator pos:start="3707:13" pos:end="3707:13">=</operator> <call pos:start="3707:15" pos:end="3707:32"><name pos:start="3707:15" pos:end="3707:23">ldub_code</name><argument_list pos:start="3707:24" pos:end="3707:32">(<argument pos:start="3707:25" pos:end="3707:31"><expr pos:start="3707:25" pos:end="3707:31"><name pos:start="3707:25" pos:end="3707:29"><name pos:start="3707:25" pos:end="3707:25">s</name><operator pos:start="3707:26" pos:end="3707:27">-&gt;</operator><name pos:start="3707:28" pos:end="3707:29">pc</name></name><operator pos:start="3707:30" pos:end="3707:31">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3709:9" pos:end="3709:31"><expr pos:start="3709:9" pos:end="3709:30"><call pos:start="3709:9" pos:end="3709:30"><name pos:start="3709:9" pos:end="3709:25">gen_op_movl_T1_im</name><argument_list pos:start="3709:26" pos:end="3709:30">(<argument pos:start="3709:27" pos:end="3709:29"><expr pos:start="3709:27" pos:end="3709:29"><name pos:start="3709:27" pos:end="3709:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3711:9" pos:end="3713:28"><if pos:start="3711:9" pos:end="3713:28">if <condition pos:start="3711:12" pos:end="3711:19">(<expr pos:start="3711:13" pos:end="3711:18"><name pos:start="3711:13" pos:end="3711:14">op</name> <operator pos:start="3711:16" pos:end="3711:16">&lt;</operator> <literal type="number" pos:start="3711:18" pos:end="3711:18">4</literal></expr>)</condition><block type="pseudo" pos:start="3713:13" pos:end="3713:28"><block_content pos:start="3713:13" pos:end="3713:28">

            <goto pos:start="3713:13" pos:end="3713:28">goto <name pos:start="3713:18" pos:end="3713:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3715:9" pos:end="3715:16"><expr pos:start="3715:9" pos:end="3715:15"><name pos:start="3715:9" pos:end="3715:10">op</name> <operator pos:start="3715:12" pos:end="3715:13">-=</operator> <literal type="number" pos:start="3715:15" pos:end="3715:15">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3717:9" pos:end="3717:48"><expr pos:start="3717:9" pos:end="3717:47"><name pos:start="3717:9" pos:end="3717:45"><name pos:start="3717:9" pos:end="3717:27">gen_op_btx_T0_T1_cc</name><index pos:start="3717:28" pos:end="3717:41">[<expr pos:start="3717:29" pos:end="3717:40"><name pos:start="3717:29" pos:end="3717:30">ot</name> <operator pos:start="3717:32" pos:end="3717:32">-</operator> <name pos:start="3717:34" pos:end="3717:40">OT_WORD</name></expr>]</index><index pos:start="3717:42" pos:end="3717:45">[<expr pos:start="3717:43" pos:end="3717:44"><name pos:start="3717:43" pos:end="3717:44">op</name></expr>]</index></name><operator pos:start="3717:46" pos:end="3717:46">(</operator><operator pos:start="3717:47" pos:end="3717:47">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3719:9" pos:end="3719:35"><expr pos:start="3719:9" pos:end="3719:34"><name pos:start="3719:9" pos:end="3719:16"><name pos:start="3719:9" pos:end="3719:9">s</name><operator pos:start="3719:10" pos:end="3719:11">-&gt;</operator><name pos:start="3719:12" pos:end="3719:16">cc_op</name></name> <operator pos:start="3719:18" pos:end="3719:18">=</operator> <name pos:start="3719:20" pos:end="3719:29">CC_OP_SARB</name> <operator pos:start="3719:31" pos:end="3719:31">+</operator> <name pos:start="3719:33" pos:end="3719:34">ot</name></expr>;</expr_stmt>

        <if_stmt pos:start="3721:9" pos:end="3733:9"><if pos:start="3721:9" pos:end="3733:9">if <condition pos:start="3721:12" pos:end="3721:20">(<expr pos:start="3721:13" pos:end="3721:19"><name pos:start="3721:13" pos:end="3721:14">op</name> <operator pos:start="3721:16" pos:end="3721:17">!=</operator> <literal type="number" pos:start="3721:19" pos:end="3721:19">0</literal></expr>)</condition> <block pos:start="3721:22" pos:end="3733:9">{<block_content pos:start="3723:13" pos:end="3731:34">

            <if_stmt pos:start="3723:13" pos:end="3729:44"><if pos:start="3723:13" pos:end="3725:53">if <condition pos:start="3723:16" pos:end="3723:25">(<expr pos:start="3723:17" pos:end="3723:24"><name pos:start="3723:17" pos:end="3723:19">mod</name> <operator pos:start="3723:21" pos:end="3723:22">!=</operator> <literal type="number" pos:start="3723:24" pos:end="3723:24">3</literal></expr>)</condition><block type="pseudo" pos:start="3725:17" pos:end="3725:53"><block_content pos:start="3725:17" pos:end="3725:53">

                <expr_stmt pos:start="3725:17" pos:end="3725:53"><expr pos:start="3725:17" pos:end="3725:52"><name pos:start="3725:17" pos:end="3725:50"><name pos:start="3725:17" pos:end="3725:31">gen_op_st_T0_A0</name><index pos:start="3725:32" pos:end="3725:50">[<expr pos:start="3725:33" pos:end="3725:49"><name pos:start="3725:33" pos:end="3725:34">ot</name> <operator pos:start="3725:36" pos:end="3725:36">+</operator> <name pos:start="3725:38" pos:end="3725:49"><name pos:start="3725:38" pos:end="3725:38">s</name><operator pos:start="3725:39" pos:end="3725:40">-&gt;</operator><name pos:start="3725:41" pos:end="3725:49">mem_index</name></name></expr>]</index></name><operator pos:start="3725:51" pos:end="3725:51">(</operator><operator pos:start="3725:52" pos:end="3725:52">)</operator></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3727:13" pos:end="3729:44">else<block type="pseudo" pos:start="3729:17" pos:end="3729:44"><block_content pos:start="3729:17" pos:end="3729:44">

                <expr_stmt pos:start="3729:17" pos:end="3729:44"><expr pos:start="3729:17" pos:end="3729:43"><name pos:start="3729:17" pos:end="3729:41"><name pos:start="3729:17" pos:end="3729:33">gen_op_mov_reg_T0</name><index pos:start="3729:34" pos:end="3729:37">[<expr pos:start="3729:35" pos:end="3729:36"><name pos:start="3729:35" pos:end="3729:36">ot</name></expr>]</index><index pos:start="3729:38" pos:end="3729:41">[<expr pos:start="3729:39" pos:end="3729:40"><name pos:start="3729:39" pos:end="3729:40">rm</name></expr>]</index></name><operator pos:start="3729:42" pos:end="3729:42">(</operator><operator pos:start="3729:43" pos:end="3729:43">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="3731:13" pos:end="3731:34"><expr pos:start="3731:13" pos:end="3731:33"><call pos:start="3731:13" pos:end="3731:33"><name pos:start="3731:13" pos:end="3731:31">gen_op_update_bt_cc</name><argument_list pos:start="3731:32" pos:end="3731:33">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="3735:9" pos:end="3735:14">break;</break>

    <case pos:start="3737:5" pos:end="3737:15">case <expr pos:start="3737:10" pos:end="3737:14"><literal type="number" pos:start="3737:10" pos:end="3737:14">0x1a3</literal></expr>:</case> <comment type="block" pos:start="3737:17" pos:end="3737:31">/* bt Gv, Ev */</comment>

        <expr_stmt pos:start="3739:9" pos:end="3739:15"><expr pos:start="3739:9" pos:end="3739:14"><name pos:start="3739:9" pos:end="3739:10">op</name> <operator pos:start="3739:12" pos:end="3739:12">=</operator> <literal type="number" pos:start="3739:14" pos:end="3739:14">0</literal></expr>;</expr_stmt>

        <goto pos:start="3741:9" pos:end="3741:20">goto <name pos:start="3741:14" pos:end="3741:19">do_btx</name>;</goto>

    <case pos:start="3743:5" pos:end="3743:15">case <expr pos:start="3743:10" pos:end="3743:14"><literal type="number" pos:start="3743:10" pos:end="3743:14">0x1ab</literal></expr>:</case> <comment type="block" pos:start="3743:17" pos:end="3743:25">/* bts */</comment>

        <expr_stmt pos:start="3745:9" pos:end="3745:15"><expr pos:start="3745:9" pos:end="3745:14"><name pos:start="3745:9" pos:end="3745:10">op</name> <operator pos:start="3745:12" pos:end="3745:12">=</operator> <literal type="number" pos:start="3745:14" pos:end="3745:14">1</literal></expr>;</expr_stmt>

        <goto pos:start="3747:9" pos:end="3747:20">goto <name pos:start="3747:14" pos:end="3747:19">do_btx</name>;</goto>

    <case pos:start="3749:5" pos:end="3749:15">case <expr pos:start="3749:10" pos:end="3749:14"><literal type="number" pos:start="3749:10" pos:end="3749:14">0x1b3</literal></expr>:</case> <comment type="block" pos:start="3749:17" pos:end="3749:25">/* btr */</comment>

        <expr_stmt pos:start="3751:9" pos:end="3751:15"><expr pos:start="3751:9" pos:end="3751:14"><name pos:start="3751:9" pos:end="3751:10">op</name> <operator pos:start="3751:12" pos:end="3751:12">=</operator> <literal type="number" pos:start="3751:14" pos:end="3751:14">2</literal></expr>;</expr_stmt>

        <goto pos:start="3753:9" pos:end="3753:20">goto <name pos:start="3753:14" pos:end="3753:19">do_btx</name>;</goto>

    <case pos:start="3755:5" pos:end="3755:15">case <expr pos:start="3755:10" pos:end="3755:14"><literal type="number" pos:start="3755:10" pos:end="3755:14">0x1bb</literal></expr>:</case> <comment type="block" pos:start="3755:17" pos:end="3755:25">/* btc */</comment>

        <expr_stmt pos:start="3757:9" pos:end="3757:15"><expr pos:start="3757:9" pos:end="3757:14"><name pos:start="3757:9" pos:end="3757:10">op</name> <operator pos:start="3757:12" pos:end="3757:12">=</operator> <literal type="number" pos:start="3757:14" pos:end="3757:14">3</literal></expr>;</expr_stmt>

    <label pos:start="3759:5" pos:end="3759:11"><name pos:start="3759:5" pos:end="3759:10">do_btx</name>:</label>

        <expr_stmt pos:start="3761:9" pos:end="3761:39"><expr pos:start="3761:9" pos:end="3761:38"><name pos:start="3761:9" pos:end="3761:10">ot</name> <operator pos:start="3761:12" pos:end="3761:12">=</operator> <ternary pos:start="3761:14" pos:end="3761:38"><condition pos:start="3761:14" pos:end="3761:20"><expr pos:start="3761:14" pos:end="3761:18"><name pos:start="3761:14" pos:end="3761:18">dflag</name></expr> ?</condition><then pos:start="3761:22" pos:end="3761:28"> <expr pos:start="3761:22" pos:end="3761:28"><name pos:start="3761:22" pos:end="3761:28">OT_LONG</name></expr> </then><else pos:start="3761:30" pos:end="3761:38">: <expr pos:start="3761:32" pos:end="3761:38"><name pos:start="3761:32" pos:end="3761:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="3763:9" pos:end="3763:35"><expr pos:start="3763:9" pos:end="3763:34"><name pos:start="3763:9" pos:end="3763:13">modrm</name> <operator pos:start="3763:15" pos:end="3763:15">=</operator> <call pos:start="3763:17" pos:end="3763:34"><name pos:start="3763:17" pos:end="3763:25">ldub_code</name><argument_list pos:start="3763:26" pos:end="3763:34">(<argument pos:start="3763:27" pos:end="3763:33"><expr pos:start="3763:27" pos:end="3763:33"><name pos:start="3763:27" pos:end="3763:31"><name pos:start="3763:27" pos:end="3763:27">s</name><operator pos:start="3763:28" pos:end="3763:29">-&gt;</operator><name pos:start="3763:30" pos:end="3763:31">pc</name></name><operator pos:start="3763:32" pos:end="3763:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3765:9" pos:end="3765:31"><expr pos:start="3765:9" pos:end="3765:30"><name pos:start="3765:9" pos:end="3765:11">reg</name> <operator pos:start="3765:13" pos:end="3765:13">=</operator> <operator pos:start="3765:15" pos:end="3765:15">(</operator><name pos:start="3765:16" pos:end="3765:20">modrm</name> <operator pos:start="3765:22" pos:end="3765:23">&gt;&gt;</operator> <literal type="number" pos:start="3765:25" pos:end="3765:25">3</literal><operator pos:start="3765:26" pos:end="3765:26">)</operator> <operator pos:start="3765:28" pos:end="3765:28">&amp;</operator> <literal type="number" pos:start="3765:30" pos:end="3765:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3767:9" pos:end="3767:31"><expr pos:start="3767:9" pos:end="3767:30"><name pos:start="3767:9" pos:end="3767:11">mod</name> <operator pos:start="3767:13" pos:end="3767:13">=</operator> <operator pos:start="3767:15" pos:end="3767:15">(</operator><name pos:start="3767:16" pos:end="3767:20">modrm</name> <operator pos:start="3767:22" pos:end="3767:23">&gt;&gt;</operator> <literal type="number" pos:start="3767:25" pos:end="3767:25">6</literal><operator pos:start="3767:26" pos:end="3767:26">)</operator> <operator pos:start="3767:28" pos:end="3767:28">&amp;</operator> <literal type="number" pos:start="3767:30" pos:end="3767:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3769:9" pos:end="3769:23"><expr pos:start="3769:9" pos:end="3769:22"><name pos:start="3769:9" pos:end="3769:10">rm</name> <operator pos:start="3769:12" pos:end="3769:12">=</operator> <name pos:start="3769:14" pos:end="3769:18">modrm</name> <operator pos:start="3769:20" pos:end="3769:20">&amp;</operator> <literal type="number" pos:start="3769:22" pos:end="3769:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3771:9" pos:end="3771:45"><expr pos:start="3771:9" pos:end="3771:44"><name pos:start="3771:9" pos:end="3771:42"><name pos:start="3771:9" pos:end="3771:25">gen_op_mov_TN_reg</name><index pos:start="3771:26" pos:end="3771:34">[<expr pos:start="3771:27" pos:end="3771:33"><name pos:start="3771:27" pos:end="3771:33">OT_LONG</name></expr>]</index><index pos:start="3771:35" pos:end="3771:37">[<expr pos:start="3771:36" pos:end="3771:36"><literal type="number" pos:start="3771:36" pos:end="3771:36">1</literal></expr>]</index><index pos:start="3771:38" pos:end="3771:42">[<expr pos:start="3771:39" pos:end="3771:41"><name pos:start="3771:39" pos:end="3771:41">reg</name></expr>]</index></name><operator pos:start="3771:43" pos:end="3771:43">(</operator><operator pos:start="3771:44" pos:end="3771:44">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="3773:9" pos:end="3793:9"><if pos:start="3773:9" pos:end="3789:9">if <condition pos:start="3773:12" pos:end="3773:21">(<expr pos:start="3773:13" pos:end="3773:20"><name pos:start="3773:13" pos:end="3773:15">mod</name> <operator pos:start="3773:17" pos:end="3773:18">!=</operator> <literal type="number" pos:start="3773:20" pos:end="3773:20">3</literal></expr>)</condition> <block pos:start="3773:23" pos:end="3789:9">{<block_content pos:start="3775:13" pos:end="3787:49">

            <expr_stmt pos:start="3775:13" pos:end="3775:61"><expr pos:start="3775:13" pos:end="3775:60"><call pos:start="3775:13" pos:end="3775:60"><name pos:start="3775:13" pos:end="3775:25">gen_lea_modrm</name><argument_list pos:start="3775:26" pos:end="3775:60">(<argument pos:start="3775:27" pos:end="3775:27"><expr pos:start="3775:27" pos:end="3775:27"><name pos:start="3775:27" pos:end="3775:27">s</name></expr></argument>, <argument pos:start="3775:30" pos:end="3775:34"><expr pos:start="3775:30" pos:end="3775:34"><name pos:start="3775:30" pos:end="3775:34">modrm</name></expr></argument>, <argument pos:start="3775:37" pos:end="3775:45"><expr pos:start="3775:37" pos:end="3775:45"><operator pos:start="3775:37" pos:end="3775:37">&amp;</operator><name pos:start="3775:38" pos:end="3775:45">reg_addr</name></expr></argument>, <argument pos:start="3775:48" pos:end="3775:59"><expr pos:start="3775:48" pos:end="3775:59"><operator pos:start="3775:48" pos:end="3775:48">&amp;</operator><name pos:start="3775:49" pos:end="3775:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="3777:13" pos:end="3777:62">/* specific case: we need to add a displacement */</comment>

            <if_stmt pos:start="3779:13" pos:end="3785:40"><if pos:start="3779:13" pos:end="3781:40">if <condition pos:start="3779:16" pos:end="3779:30">(<expr pos:start="3779:17" pos:end="3779:29"><name pos:start="3779:17" pos:end="3779:18">ot</name> <operator pos:start="3779:20" pos:end="3779:21">==</operator> <name pos:start="3779:23" pos:end="3779:29">OT_WORD</name></expr>)</condition><block type="pseudo" pos:start="3781:17" pos:end="3781:40"><block_content pos:start="3781:17" pos:end="3781:40">

                <expr_stmt pos:start="3781:17" pos:end="3781:40"><expr pos:start="3781:17" pos:end="3781:39"><call pos:start="3781:17" pos:end="3781:39"><name pos:start="3781:17" pos:end="3781:37">gen_op_add_bitw_A0_T1</name><argument_list pos:start="3781:38" pos:end="3781:39">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3783:13" pos:end="3785:40">else<block type="pseudo" pos:start="3785:17" pos:end="3785:40"><block_content pos:start="3785:17" pos:end="3785:40">

                <expr_stmt pos:start="3785:17" pos:end="3785:40"><expr pos:start="3785:17" pos:end="3785:39"><call pos:start="3785:17" pos:end="3785:39"><name pos:start="3785:17" pos:end="3785:37">gen_op_add_bitl_A0_T1</name><argument_list pos:start="3785:38" pos:end="3785:39">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="3787:13" pos:end="3787:49"><expr pos:start="3787:13" pos:end="3787:48"><name pos:start="3787:13" pos:end="3787:46"><name pos:start="3787:13" pos:end="3787:27">gen_op_ld_T0_A0</name><index pos:start="3787:28" pos:end="3787:46">[<expr pos:start="3787:29" pos:end="3787:45"><name pos:start="3787:29" pos:end="3787:30">ot</name> <operator pos:start="3787:32" pos:end="3787:32">+</operator> <name pos:start="3787:34" pos:end="3787:45"><name pos:start="3787:34" pos:end="3787:34">s</name><operator pos:start="3787:35" pos:end="3787:36">-&gt;</operator><name pos:start="3787:37" pos:end="3787:45">mem_index</name></name></expr>]</index></name><operator pos:start="3787:47" pos:end="3787:47">(</operator><operator pos:start="3787:48" pos:end="3787:48">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3789:11" pos:end="3793:9">else <block pos:start="3789:16" pos:end="3793:9">{<block_content pos:start="3791:13" pos:end="3791:43">

            <expr_stmt pos:start="3791:13" pos:end="3791:43"><expr pos:start="3791:13" pos:end="3791:42"><name pos:start="3791:13" pos:end="3791:40"><name pos:start="3791:13" pos:end="3791:29">gen_op_mov_TN_reg</name><index pos:start="3791:30" pos:end="3791:33">[<expr pos:start="3791:31" pos:end="3791:32"><name pos:start="3791:31" pos:end="3791:32">ot</name></expr>]</index><index pos:start="3791:34" pos:end="3791:36">[<expr pos:start="3791:35" pos:end="3791:35"><literal type="number" pos:start="3791:35" pos:end="3791:35">0</literal></expr>]</index><index pos:start="3791:37" pos:end="3791:40">[<expr pos:start="3791:38" pos:end="3791:39"><name pos:start="3791:38" pos:end="3791:39">rm</name></expr>]</index></name><operator pos:start="3791:41" pos:end="3791:41">(</operator><operator pos:start="3791:42" pos:end="3791:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="3795:9" pos:end="3795:48"><expr pos:start="3795:9" pos:end="3795:47"><name pos:start="3795:9" pos:end="3795:45"><name pos:start="3795:9" pos:end="3795:27">gen_op_btx_T0_T1_cc</name><index pos:start="3795:28" pos:end="3795:41">[<expr pos:start="3795:29" pos:end="3795:40"><name pos:start="3795:29" pos:end="3795:30">ot</name> <operator pos:start="3795:32" pos:end="3795:32">-</operator> <name pos:start="3795:34" pos:end="3795:40">OT_WORD</name></expr>]</index><index pos:start="3795:42" pos:end="3795:45">[<expr pos:start="3795:43" pos:end="3795:44"><name pos:start="3795:43" pos:end="3795:44">op</name></expr>]</index></name><operator pos:start="3795:46" pos:end="3795:46">(</operator><operator pos:start="3795:47" pos:end="3795:47">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3797:9" pos:end="3797:35"><expr pos:start="3797:9" pos:end="3797:34"><name pos:start="3797:9" pos:end="3797:16"><name pos:start="3797:9" pos:end="3797:9">s</name><operator pos:start="3797:10" pos:end="3797:11">-&gt;</operator><name pos:start="3797:12" pos:end="3797:16">cc_op</name></name> <operator pos:start="3797:18" pos:end="3797:18">=</operator> <name pos:start="3797:20" pos:end="3797:29">CC_OP_SARB</name> <operator pos:start="3797:31" pos:end="3797:31">+</operator> <name pos:start="3797:33" pos:end="3797:34">ot</name></expr>;</expr_stmt>

        <if_stmt pos:start="3799:9" pos:end="3811:9"><if pos:start="3799:9" pos:end="3811:9">if <condition pos:start="3799:12" pos:end="3799:20">(<expr pos:start="3799:13" pos:end="3799:19"><name pos:start="3799:13" pos:end="3799:14">op</name> <operator pos:start="3799:16" pos:end="3799:17">!=</operator> <literal type="number" pos:start="3799:19" pos:end="3799:19">0</literal></expr>)</condition> <block pos:start="3799:22" pos:end="3811:9">{<block_content pos:start="3801:13" pos:end="3809:34">

            <if_stmt pos:start="3801:13" pos:end="3807:44"><if pos:start="3801:13" pos:end="3803:53">if <condition pos:start="3801:16" pos:end="3801:25">(<expr pos:start="3801:17" pos:end="3801:24"><name pos:start="3801:17" pos:end="3801:19">mod</name> <operator pos:start="3801:21" pos:end="3801:22">!=</operator> <literal type="number" pos:start="3801:24" pos:end="3801:24">3</literal></expr>)</condition><block type="pseudo" pos:start="3803:17" pos:end="3803:53"><block_content pos:start="3803:17" pos:end="3803:53">

                <expr_stmt pos:start="3803:17" pos:end="3803:53"><expr pos:start="3803:17" pos:end="3803:52"><name pos:start="3803:17" pos:end="3803:50"><name pos:start="3803:17" pos:end="3803:31">gen_op_st_T0_A0</name><index pos:start="3803:32" pos:end="3803:50">[<expr pos:start="3803:33" pos:end="3803:49"><name pos:start="3803:33" pos:end="3803:34">ot</name> <operator pos:start="3803:36" pos:end="3803:36">+</operator> <name pos:start="3803:38" pos:end="3803:49"><name pos:start="3803:38" pos:end="3803:38">s</name><operator pos:start="3803:39" pos:end="3803:40">-&gt;</operator><name pos:start="3803:41" pos:end="3803:49">mem_index</name></name></expr>]</index></name><operator pos:start="3803:51" pos:end="3803:51">(</operator><operator pos:start="3803:52" pos:end="3803:52">)</operator></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3805:13" pos:end="3807:44">else<block type="pseudo" pos:start="3807:17" pos:end="3807:44"><block_content pos:start="3807:17" pos:end="3807:44">

                <expr_stmt pos:start="3807:17" pos:end="3807:44"><expr pos:start="3807:17" pos:end="3807:43"><name pos:start="3807:17" pos:end="3807:41"><name pos:start="3807:17" pos:end="3807:33">gen_op_mov_reg_T0</name><index pos:start="3807:34" pos:end="3807:37">[<expr pos:start="3807:35" pos:end="3807:36"><name pos:start="3807:35" pos:end="3807:36">ot</name></expr>]</index><index pos:start="3807:38" pos:end="3807:41">[<expr pos:start="3807:39" pos:end="3807:40"><name pos:start="3807:39" pos:end="3807:40">rm</name></expr>]</index></name><operator pos:start="3807:42" pos:end="3807:42">(</operator><operator pos:start="3807:43" pos:end="3807:43">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="3809:13" pos:end="3809:34"><expr pos:start="3809:13" pos:end="3809:33"><call pos:start="3809:13" pos:end="3809:33"><name pos:start="3809:13" pos:end="3809:31">gen_op_update_bt_cc</name><argument_list pos:start="3809:32" pos:end="3809:33">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="3813:9" pos:end="3813:14">break;</break>

    <case pos:start="3815:5" pos:end="3815:15">case <expr pos:start="3815:10" pos:end="3815:14"><literal type="number" pos:start="3815:10" pos:end="3815:14">0x1bc</literal></expr>:</case> <comment type="block" pos:start="3815:17" pos:end="3815:25">/* bsf */</comment>

    <case pos:start="3817:5" pos:end="3817:15">case <expr pos:start="3817:10" pos:end="3817:14"><literal type="number" pos:start="3817:10" pos:end="3817:14">0x1bd</literal></expr>:</case> <comment type="block" pos:start="3817:17" pos:end="3817:25">/* bsr */</comment>

        <expr_stmt pos:start="3819:9" pos:end="3819:39"><expr pos:start="3819:9" pos:end="3819:38"><name pos:start="3819:9" pos:end="3819:10">ot</name> <operator pos:start="3819:12" pos:end="3819:12">=</operator> <ternary pos:start="3819:14" pos:end="3819:38"><condition pos:start="3819:14" pos:end="3819:20"><expr pos:start="3819:14" pos:end="3819:18"><name pos:start="3819:14" pos:end="3819:18">dflag</name></expr> ?</condition><then pos:start="3819:22" pos:end="3819:28"> <expr pos:start="3819:22" pos:end="3819:28"><name pos:start="3819:22" pos:end="3819:28">OT_LONG</name></expr> </then><else pos:start="3819:30" pos:end="3819:38">: <expr pos:start="3819:32" pos:end="3819:38"><name pos:start="3819:32" pos:end="3819:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="3821:9" pos:end="3821:35"><expr pos:start="3821:9" pos:end="3821:34"><name pos:start="3821:9" pos:end="3821:13">modrm</name> <operator pos:start="3821:15" pos:end="3821:15">=</operator> <call pos:start="3821:17" pos:end="3821:34"><name pos:start="3821:17" pos:end="3821:25">ldub_code</name><argument_list pos:start="3821:26" pos:end="3821:34">(<argument pos:start="3821:27" pos:end="3821:33"><expr pos:start="3821:27" pos:end="3821:33"><name pos:start="3821:27" pos:end="3821:31"><name pos:start="3821:27" pos:end="3821:27">s</name><operator pos:start="3821:28" pos:end="3821:29">-&gt;</operator><name pos:start="3821:30" pos:end="3821:31">pc</name></name><operator pos:start="3821:32" pos:end="3821:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3823:9" pos:end="3823:31"><expr pos:start="3823:9" pos:end="3823:30"><name pos:start="3823:9" pos:end="3823:11">reg</name> <operator pos:start="3823:13" pos:end="3823:13">=</operator> <operator pos:start="3823:15" pos:end="3823:15">(</operator><name pos:start="3823:16" pos:end="3823:20">modrm</name> <operator pos:start="3823:22" pos:end="3823:23">&gt;&gt;</operator> <literal type="number" pos:start="3823:25" pos:end="3823:25">3</literal><operator pos:start="3823:26" pos:end="3823:26">)</operator> <operator pos:start="3823:28" pos:end="3823:28">&amp;</operator> <literal type="number" pos:start="3823:30" pos:end="3823:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3825:9" pos:end="3825:49"><expr pos:start="3825:9" pos:end="3825:48"><call pos:start="3825:9" pos:end="3825:48"><name pos:start="3825:9" pos:end="3825:22">gen_ldst_modrm</name><argument_list pos:start="3825:23" pos:end="3825:48">(<argument pos:start="3825:24" pos:end="3825:24"><expr pos:start="3825:24" pos:end="3825:24"><name pos:start="3825:24" pos:end="3825:24">s</name></expr></argument>, <argument pos:start="3825:27" pos:end="3825:31"><expr pos:start="3825:27" pos:end="3825:31"><name pos:start="3825:27" pos:end="3825:31">modrm</name></expr></argument>, <argument pos:start="3825:34" pos:end="3825:35"><expr pos:start="3825:34" pos:end="3825:35"><name pos:start="3825:34" pos:end="3825:35">ot</name></expr></argument>, <argument pos:start="3825:38" pos:end="3825:44"><expr pos:start="3825:38" pos:end="3825:44"><name pos:start="3825:38" pos:end="3825:44">OR_TMP0</name></expr></argument>, <argument pos:start="3825:47" pos:end="3825:47"><expr pos:start="3825:47" pos:end="3825:47"><literal type="number" pos:start="3825:47" pos:end="3825:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3827:9" pos:end="3827:48"><expr pos:start="3827:9" pos:end="3827:47"><name pos:start="3827:9" pos:end="3827:45"><name pos:start="3827:9" pos:end="3827:24">gen_op_bsx_T0_cc</name><index pos:start="3827:25" pos:end="3827:38">[<expr pos:start="3827:26" pos:end="3827:37"><name pos:start="3827:26" pos:end="3827:27">ot</name> <operator pos:start="3827:29" pos:end="3827:29">-</operator> <name pos:start="3827:31" pos:end="3827:37">OT_WORD</name></expr>]</index><index pos:start="3827:39" pos:end="3827:45">[<expr pos:start="3827:40" pos:end="3827:44"><name pos:start="3827:40" pos:end="3827:40">b</name> <operator pos:start="3827:42" pos:end="3827:42">&amp;</operator> <literal type="number" pos:start="3827:44" pos:end="3827:44">1</literal></expr>]</index></name><operator pos:start="3827:46" pos:end="3827:46">(</operator><operator pos:start="3827:47" pos:end="3827:47">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="3829:9" pos:end="3831:34">/* NOTE: we always write back the result. Intel doc says it is

           undefined if T0 == 0 */</comment>

        <expr_stmt pos:start="3833:9" pos:end="3833:37"><expr pos:start="3833:9" pos:end="3833:36"><name pos:start="3833:9" pos:end="3833:34"><name pos:start="3833:9" pos:end="3833:25">gen_op_mov_reg_T0</name><index pos:start="3833:26" pos:end="3833:29">[<expr pos:start="3833:27" pos:end="3833:28"><name pos:start="3833:27" pos:end="3833:28">ot</name></expr>]</index><index pos:start="3833:30" pos:end="3833:34">[<expr pos:start="3833:31" pos:end="3833:33"><name pos:start="3833:31" pos:end="3833:33">reg</name></expr>]</index></name><operator pos:start="3833:35" pos:end="3833:35">(</operator><operator pos:start="3833:36" pos:end="3833:36">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3835:9" pos:end="3835:37"><expr pos:start="3835:9" pos:end="3835:36"><name pos:start="3835:9" pos:end="3835:16"><name pos:start="3835:9" pos:end="3835:9">s</name><operator pos:start="3835:10" pos:end="3835:11">-&gt;</operator><name pos:start="3835:12" pos:end="3835:16">cc_op</name></name> <operator pos:start="3835:18" pos:end="3835:18">=</operator> <name pos:start="3835:20" pos:end="3835:31">CC_OP_LOGICB</name> <operator pos:start="3835:33" pos:end="3835:33">+</operator> <name pos:start="3835:35" pos:end="3835:36">ot</name></expr>;</expr_stmt>

        <break pos:start="3837:9" pos:end="3837:14">break;</break>

        <comment type="block" format="doxygen" pos:start="3839:9" pos:end="3839:34">/************************/</comment>

        <comment type="block" pos:start="3841:9" pos:end="3841:17">/* bcd */</comment>

    <case pos:start="3843:5" pos:end="3843:14">case <expr pos:start="3843:10" pos:end="3843:13"><literal type="number" pos:start="3843:10" pos:end="3843:13">0x27</literal></expr>:</case> <comment type="block" pos:start="3843:16" pos:end="3843:24">/* daa */</comment>

        <if_stmt pos:start="3845:9" pos:end="3847:39"><if pos:start="3845:9" pos:end="3847:39">if <condition pos:start="3845:12" pos:end="3845:38">(<expr pos:start="3845:13" pos:end="3845:37"><name pos:start="3845:13" pos:end="3845:20"><name pos:start="3845:13" pos:end="3845:13">s</name><operator pos:start="3845:14" pos:end="3845:15">-&gt;</operator><name pos:start="3845:16" pos:end="3845:20">cc_op</name></name> <operator pos:start="3845:22" pos:end="3845:23">!=</operator> <name pos:start="3845:25" pos:end="3845:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3847:13" pos:end="3847:39"><block_content pos:start="3847:13" pos:end="3847:39">

            <expr_stmt pos:start="3847:13" pos:end="3847:39"><expr pos:start="3847:13" pos:end="3847:38"><call pos:start="3847:13" pos:end="3847:38"><name pos:start="3847:13" pos:end="3847:28">gen_op_set_cc_op</name><argument_list pos:start="3847:29" pos:end="3847:38">(<argument pos:start="3847:30" pos:end="3847:37"><expr pos:start="3847:30" pos:end="3847:37"><name pos:start="3847:30" pos:end="3847:37"><name pos:start="3847:30" pos:end="3847:30">s</name><operator pos:start="3847:31" pos:end="3847:32">-&gt;</operator><name pos:start="3847:33" pos:end="3847:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3849:9" pos:end="3849:21"><expr pos:start="3849:9" pos:end="3849:20"><call pos:start="3849:9" pos:end="3849:20"><name pos:start="3849:9" pos:end="3849:18">gen_op_daa</name><argument_list pos:start="3849:19" pos:end="3849:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3851:9" pos:end="3851:32"><expr pos:start="3851:9" pos:end="3851:31"><name pos:start="3851:9" pos:end="3851:16"><name pos:start="3851:9" pos:end="3851:9">s</name><operator pos:start="3851:10" pos:end="3851:11">-&gt;</operator><name pos:start="3851:12" pos:end="3851:16">cc_op</name></name> <operator pos:start="3851:18" pos:end="3851:18">=</operator> <name pos:start="3851:20" pos:end="3851:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3853:9" pos:end="3853:14">break;</break>

    <case pos:start="3855:5" pos:end="3855:14">case <expr pos:start="3855:10" pos:end="3855:13"><literal type="number" pos:start="3855:10" pos:end="3855:13">0x2f</literal></expr>:</case> <comment type="block" pos:start="3855:16" pos:end="3855:24">/* das */</comment>

        <if_stmt pos:start="3857:9" pos:end="3859:39"><if pos:start="3857:9" pos:end="3859:39">if <condition pos:start="3857:12" pos:end="3857:38">(<expr pos:start="3857:13" pos:end="3857:37"><name pos:start="3857:13" pos:end="3857:20"><name pos:start="3857:13" pos:end="3857:13">s</name><operator pos:start="3857:14" pos:end="3857:15">-&gt;</operator><name pos:start="3857:16" pos:end="3857:20">cc_op</name></name> <operator pos:start="3857:22" pos:end="3857:23">!=</operator> <name pos:start="3857:25" pos:end="3857:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3859:13" pos:end="3859:39"><block_content pos:start="3859:13" pos:end="3859:39">

            <expr_stmt pos:start="3859:13" pos:end="3859:39"><expr pos:start="3859:13" pos:end="3859:38"><call pos:start="3859:13" pos:end="3859:38"><name pos:start="3859:13" pos:end="3859:28">gen_op_set_cc_op</name><argument_list pos:start="3859:29" pos:end="3859:38">(<argument pos:start="3859:30" pos:end="3859:37"><expr pos:start="3859:30" pos:end="3859:37"><name pos:start="3859:30" pos:end="3859:37"><name pos:start="3859:30" pos:end="3859:30">s</name><operator pos:start="3859:31" pos:end="3859:32">-&gt;</operator><name pos:start="3859:33" pos:end="3859:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3861:9" pos:end="3861:21"><expr pos:start="3861:9" pos:end="3861:20"><call pos:start="3861:9" pos:end="3861:20"><name pos:start="3861:9" pos:end="3861:18">gen_op_das</name><argument_list pos:start="3861:19" pos:end="3861:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3863:9" pos:end="3863:32"><expr pos:start="3863:9" pos:end="3863:31"><name pos:start="3863:9" pos:end="3863:16"><name pos:start="3863:9" pos:end="3863:9">s</name><operator pos:start="3863:10" pos:end="3863:11">-&gt;</operator><name pos:start="3863:12" pos:end="3863:16">cc_op</name></name> <operator pos:start="3863:18" pos:end="3863:18">=</operator> <name pos:start="3863:20" pos:end="3863:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3865:9" pos:end="3865:14">break;</break>

    <case pos:start="3867:5" pos:end="3867:14">case <expr pos:start="3867:10" pos:end="3867:13"><literal type="number" pos:start="3867:10" pos:end="3867:13">0x37</literal></expr>:</case> <comment type="block" pos:start="3867:16" pos:end="3867:24">/* aaa */</comment>

        <if_stmt pos:start="3869:9" pos:end="3871:39"><if pos:start="3869:9" pos:end="3871:39">if <condition pos:start="3869:12" pos:end="3869:38">(<expr pos:start="3869:13" pos:end="3869:37"><name pos:start="3869:13" pos:end="3869:20"><name pos:start="3869:13" pos:end="3869:13">s</name><operator pos:start="3869:14" pos:end="3869:15">-&gt;</operator><name pos:start="3869:16" pos:end="3869:20">cc_op</name></name> <operator pos:start="3869:22" pos:end="3869:23">!=</operator> <name pos:start="3869:25" pos:end="3869:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3871:13" pos:end="3871:39"><block_content pos:start="3871:13" pos:end="3871:39">

            <expr_stmt pos:start="3871:13" pos:end="3871:39"><expr pos:start="3871:13" pos:end="3871:38"><call pos:start="3871:13" pos:end="3871:38"><name pos:start="3871:13" pos:end="3871:28">gen_op_set_cc_op</name><argument_list pos:start="3871:29" pos:end="3871:38">(<argument pos:start="3871:30" pos:end="3871:37"><expr pos:start="3871:30" pos:end="3871:37"><name pos:start="3871:30" pos:end="3871:37"><name pos:start="3871:30" pos:end="3871:30">s</name><operator pos:start="3871:31" pos:end="3871:32">-&gt;</operator><name pos:start="3871:33" pos:end="3871:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3873:9" pos:end="3873:21"><expr pos:start="3873:9" pos:end="3873:20"><call pos:start="3873:9" pos:end="3873:20"><name pos:start="3873:9" pos:end="3873:18">gen_op_aaa</name><argument_list pos:start="3873:19" pos:end="3873:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3875:9" pos:end="3875:32"><expr pos:start="3875:9" pos:end="3875:31"><name pos:start="3875:9" pos:end="3875:16"><name pos:start="3875:9" pos:end="3875:9">s</name><operator pos:start="3875:10" pos:end="3875:11">-&gt;</operator><name pos:start="3875:12" pos:end="3875:16">cc_op</name></name> <operator pos:start="3875:18" pos:end="3875:18">=</operator> <name pos:start="3875:20" pos:end="3875:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3877:9" pos:end="3877:14">break;</break>

    <case pos:start="3879:5" pos:end="3879:14">case <expr pos:start="3879:10" pos:end="3879:13"><literal type="number" pos:start="3879:10" pos:end="3879:13">0x3f</literal></expr>:</case> <comment type="block" pos:start="3879:16" pos:end="3879:24">/* aas */</comment>

        <if_stmt pos:start="3881:9" pos:end="3883:39"><if pos:start="3881:9" pos:end="3883:39">if <condition pos:start="3881:12" pos:end="3881:38">(<expr pos:start="3881:13" pos:end="3881:37"><name pos:start="3881:13" pos:end="3881:20"><name pos:start="3881:13" pos:end="3881:13">s</name><operator pos:start="3881:14" pos:end="3881:15">-&gt;</operator><name pos:start="3881:16" pos:end="3881:20">cc_op</name></name> <operator pos:start="3881:22" pos:end="3881:23">!=</operator> <name pos:start="3881:25" pos:end="3881:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3883:13" pos:end="3883:39"><block_content pos:start="3883:13" pos:end="3883:39">

            <expr_stmt pos:start="3883:13" pos:end="3883:39"><expr pos:start="3883:13" pos:end="3883:38"><call pos:start="3883:13" pos:end="3883:38"><name pos:start="3883:13" pos:end="3883:28">gen_op_set_cc_op</name><argument_list pos:start="3883:29" pos:end="3883:38">(<argument pos:start="3883:30" pos:end="3883:37"><expr pos:start="3883:30" pos:end="3883:37"><name pos:start="3883:30" pos:end="3883:37"><name pos:start="3883:30" pos:end="3883:30">s</name><operator pos:start="3883:31" pos:end="3883:32">-&gt;</operator><name pos:start="3883:33" pos:end="3883:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3885:9" pos:end="3885:21"><expr pos:start="3885:9" pos:end="3885:20"><call pos:start="3885:9" pos:end="3885:20"><name pos:start="3885:9" pos:end="3885:18">gen_op_aas</name><argument_list pos:start="3885:19" pos:end="3885:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3887:9" pos:end="3887:32"><expr pos:start="3887:9" pos:end="3887:31"><name pos:start="3887:9" pos:end="3887:16"><name pos:start="3887:9" pos:end="3887:9">s</name><operator pos:start="3887:10" pos:end="3887:11">-&gt;</operator><name pos:start="3887:12" pos:end="3887:16">cc_op</name></name> <operator pos:start="3887:18" pos:end="3887:18">=</operator> <name pos:start="3887:20" pos:end="3887:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3889:9" pos:end="3889:14">break;</break>

    <case pos:start="3891:5" pos:end="3891:14">case <expr pos:start="3891:10" pos:end="3891:13"><literal type="number" pos:start="3891:10" pos:end="3891:13">0xd4</literal></expr>:</case> <comment type="block" pos:start="3891:16" pos:end="3891:24">/* aam */</comment>

        <expr_stmt pos:start="3893:9" pos:end="3893:33"><expr pos:start="3893:9" pos:end="3893:32"><name pos:start="3893:9" pos:end="3893:11">val</name> <operator pos:start="3893:13" pos:end="3893:13">=</operator> <call pos:start="3893:15" pos:end="3893:32"><name pos:start="3893:15" pos:end="3893:23">ldub_code</name><argument_list pos:start="3893:24" pos:end="3893:32">(<argument pos:start="3893:25" pos:end="3893:31"><expr pos:start="3893:25" pos:end="3893:31"><name pos:start="3893:25" pos:end="3893:29"><name pos:start="3893:25" pos:end="3893:25">s</name><operator pos:start="3893:26" pos:end="3893:27">-&gt;</operator><name pos:start="3893:28" pos:end="3893:29">pc</name></name><operator pos:start="3893:30" pos:end="3893:31">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3895:9" pos:end="3895:24"><expr pos:start="3895:9" pos:end="3895:23"><call pos:start="3895:9" pos:end="3895:23"><name pos:start="3895:9" pos:end="3895:18">gen_op_aam</name><argument_list pos:start="3895:19" pos:end="3895:23">(<argument pos:start="3895:20" pos:end="3895:22"><expr pos:start="3895:20" pos:end="3895:22"><name pos:start="3895:20" pos:end="3895:22">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3897:9" pos:end="3897:32"><expr pos:start="3897:9" pos:end="3897:31"><name pos:start="3897:9" pos:end="3897:16"><name pos:start="3897:9" pos:end="3897:9">s</name><operator pos:start="3897:10" pos:end="3897:11">-&gt;</operator><name pos:start="3897:12" pos:end="3897:16">cc_op</name></name> <operator pos:start="3897:18" pos:end="3897:18">=</operator> <name pos:start="3897:20" pos:end="3897:31">CC_OP_LOGICB</name></expr>;</expr_stmt>

        <break pos:start="3899:9" pos:end="3899:14">break;</break>

    <case pos:start="3901:5" pos:end="3901:14">case <expr pos:start="3901:10" pos:end="3901:13"><literal type="number" pos:start="3901:10" pos:end="3901:13">0xd5</literal></expr>:</case> <comment type="block" pos:start="3901:16" pos:end="3901:24">/* aad */</comment>

        <expr_stmt pos:start="3903:9" pos:end="3903:33"><expr pos:start="3903:9" pos:end="3903:32"><name pos:start="3903:9" pos:end="3903:11">val</name> <operator pos:start="3903:13" pos:end="3903:13">=</operator> <call pos:start="3903:15" pos:end="3903:32"><name pos:start="3903:15" pos:end="3903:23">ldub_code</name><argument_list pos:start="3903:24" pos:end="3903:32">(<argument pos:start="3903:25" pos:end="3903:31"><expr pos:start="3903:25" pos:end="3903:31"><name pos:start="3903:25" pos:end="3903:29"><name pos:start="3903:25" pos:end="3903:25">s</name><operator pos:start="3903:26" pos:end="3903:27">-&gt;</operator><name pos:start="3903:28" pos:end="3903:29">pc</name></name><operator pos:start="3903:30" pos:end="3903:31">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3905:9" pos:end="3905:24"><expr pos:start="3905:9" pos:end="3905:23"><call pos:start="3905:9" pos:end="3905:23"><name pos:start="3905:9" pos:end="3905:18">gen_op_aad</name><argument_list pos:start="3905:19" pos:end="3905:23">(<argument pos:start="3905:20" pos:end="3905:22"><expr pos:start="3905:20" pos:end="3905:22"><name pos:start="3905:20" pos:end="3905:22">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3907:9" pos:end="3907:32"><expr pos:start="3907:9" pos:end="3907:31"><name pos:start="3907:9" pos:end="3907:16"><name pos:start="3907:9" pos:end="3907:9">s</name><operator pos:start="3907:10" pos:end="3907:11">-&gt;</operator><name pos:start="3907:12" pos:end="3907:16">cc_op</name></name> <operator pos:start="3907:18" pos:end="3907:18">=</operator> <name pos:start="3907:20" pos:end="3907:31">CC_OP_LOGICB</name></expr>;</expr_stmt>

        <break pos:start="3909:9" pos:end="3909:14">break;</break>

        <comment type="block" format="doxygen" pos:start="3911:9" pos:end="3911:34">/************************/</comment>

        <comment type="block" pos:start="3913:9" pos:end="3913:18">/* misc */</comment>

    <case pos:start="3915:5" pos:end="3915:14">case <expr pos:start="3915:10" pos:end="3915:13"><literal type="number" pos:start="3915:10" pos:end="3915:13">0x90</literal></expr>:</case> <comment type="block" pos:start="3915:16" pos:end="3915:24">/* nop */</comment>

        <comment type="block" pos:start="3917:9" pos:end="3917:49">/* XXX: correct lock test for all insn */</comment>

        <if_stmt pos:start="3919:9" pos:end="3921:28"><if pos:start="3919:9" pos:end="3921:28">if <condition pos:start="3919:12" pos:end="3919:35">(<expr pos:start="3919:13" pos:end="3919:34"><name pos:start="3919:13" pos:end="3919:20">prefixes</name> <operator pos:start="3919:22" pos:end="3919:22">&amp;</operator> <name pos:start="3919:24" pos:end="3919:34">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="3921:13" pos:end="3921:28"><block_content pos:start="3921:13" pos:end="3921:28">

            <goto pos:start="3921:13" pos:end="3921:28">goto <name pos:start="3921:18" pos:end="3921:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <break pos:start="3923:9" pos:end="3923:14">break;</break>

    <case pos:start="3925:5" pos:end="3925:14">case <expr pos:start="3925:10" pos:end="3925:13"><literal type="number" pos:start="3925:10" pos:end="3925:13">0x9b</literal></expr>:</case> <comment type="block" pos:start="3925:16" pos:end="3925:26">/* fwait */</comment>

        <if_stmt pos:start="3927:9" pos:end="3943:9"><if pos:start="3927:9" pos:end="3933:9">if <condition pos:start="3927:12" pos:end="3929:38">(<expr pos:start="3927:13" pos:end="3929:37"><operator pos:start="3927:13" pos:end="3927:13">(</operator><name pos:start="3927:14" pos:end="3927:21"><name pos:start="3927:14" pos:end="3927:14">s</name><operator pos:start="3927:15" pos:end="3927:16">-&gt;</operator><name pos:start="3927:17" pos:end="3927:21">flags</name></name> <operator pos:start="3927:23" pos:end="3927:23">&amp;</operator> <operator pos:start="3927:25" pos:end="3927:25">(</operator><name pos:start="3927:26" pos:end="3927:35">HF_MP_MASK</name> <operator pos:start="3927:37" pos:end="3927:37">|</operator> <name pos:start="3927:39" pos:end="3927:48">HF_TS_MASK</name><operator pos:start="3927:49" pos:end="3927:49">)</operator><operator pos:start="3927:50" pos:end="3927:50">)</operator> <operator pos:start="3927:52" pos:end="3927:53">==</operator> 

            <operator pos:start="3929:13" pos:end="3929:13">(</operator><name pos:start="3929:14" pos:end="3929:23">HF_MP_MASK</name> <operator pos:start="3929:25" pos:end="3929:25">|</operator> <name pos:start="3929:27" pos:end="3929:36">HF_TS_MASK</name><operator pos:start="3929:37" pos:end="3929:37">)</operator></expr>)</condition> <block pos:start="3929:40" pos:end="3933:9">{<block_content pos:start="3931:13" pos:end="3931:65">

            <expr_stmt pos:start="3931:13" pos:end="3931:65"><expr pos:start="3931:13" pos:end="3931:64"><call pos:start="3931:13" pos:end="3931:64"><name pos:start="3931:13" pos:end="3931:25">gen_exception</name><argument_list pos:start="3931:26" pos:end="3931:64">(<argument pos:start="3931:27" pos:end="3931:27"><expr pos:start="3931:27" pos:end="3931:27"><name pos:start="3931:27" pos:end="3931:27">s</name></expr></argument>, <argument pos:start="3931:30" pos:end="3931:40"><expr pos:start="3931:30" pos:end="3931:40"><name pos:start="3931:30" pos:end="3931:40">EXCP07_PREX</name></expr></argument>, <argument pos:start="3931:43" pos:end="3931:63"><expr pos:start="3931:43" pos:end="3931:63"><name pos:start="3931:43" pos:end="3931:50">pc_start</name> <operator pos:start="3931:52" pos:end="3931:52">-</operator> <name pos:start="3931:54" pos:end="3931:63"><name pos:start="3931:54" pos:end="3931:54">s</name><operator pos:start="3931:55" pos:end="3931:56">-&gt;</operator><name pos:start="3931:57" pos:end="3931:63">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3933:11" pos:end="3943:9">else <block pos:start="3933:16" pos:end="3943:9">{<block_content pos:start="3935:13" pos:end="3941:27">

            <if_stmt pos:start="3935:13" pos:end="3937:43"><if pos:start="3935:13" pos:end="3937:43">if <condition pos:start="3935:16" pos:end="3935:42">(<expr pos:start="3935:17" pos:end="3935:41"><name pos:start="3935:17" pos:end="3935:24"><name pos:start="3935:17" pos:end="3935:17">s</name><operator pos:start="3935:18" pos:end="3935:19">-&gt;</operator><name pos:start="3935:20" pos:end="3935:24">cc_op</name></name> <operator pos:start="3935:26" pos:end="3935:27">!=</operator> <name pos:start="3935:29" pos:end="3935:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3937:17" pos:end="3937:43"><block_content pos:start="3937:17" pos:end="3937:43">

                <expr_stmt pos:start="3937:17" pos:end="3937:43"><expr pos:start="3937:17" pos:end="3937:42"><call pos:start="3937:17" pos:end="3937:42"><name pos:start="3937:17" pos:end="3937:32">gen_op_set_cc_op</name><argument_list pos:start="3937:33" pos:end="3937:42">(<argument pos:start="3937:34" pos:end="3937:41"><expr pos:start="3937:34" pos:end="3937:41"><name pos:start="3937:34" pos:end="3937:41"><name pos:start="3937:34" pos:end="3937:34">s</name><operator pos:start="3937:35" pos:end="3937:36">-&gt;</operator><name pos:start="3937:37" pos:end="3937:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="3939:13" pos:end="3939:49"><expr pos:start="3939:13" pos:end="3939:48"><call pos:start="3939:13" pos:end="3939:48"><name pos:start="3939:13" pos:end="3939:25">gen_op_jmp_im</name><argument_list pos:start="3939:26" pos:end="3939:48">(<argument pos:start="3939:27" pos:end="3939:47"><expr pos:start="3939:27" pos:end="3939:47"><name pos:start="3939:27" pos:end="3939:34">pc_start</name> <operator pos:start="3939:36" pos:end="3939:36">-</operator> <name pos:start="3939:38" pos:end="3939:47"><name pos:start="3939:38" pos:end="3939:38">s</name><operator pos:start="3939:39" pos:end="3939:40">-&gt;</operator><name pos:start="3939:41" pos:end="3939:47">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3941:13" pos:end="3941:27"><expr pos:start="3941:13" pos:end="3941:26"><call pos:start="3941:13" pos:end="3941:26"><name pos:start="3941:13" pos:end="3941:24">gen_op_fwait</name><argument_list pos:start="3941:25" pos:end="3941:26">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3945:9" pos:end="3945:14">break;</break>

    <case pos:start="3947:5" pos:end="3947:14">case <expr pos:start="3947:10" pos:end="3947:13"><literal type="number" pos:start="3947:10" pos:end="3947:13">0xcc</literal></expr>:</case> <comment type="block" pos:start="3947:16" pos:end="3947:25">/* int3 */</comment>

        <expr_stmt pos:start="3949:9" pos:end="3949:81"><expr pos:start="3949:9" pos:end="3949:80"><call pos:start="3949:9" pos:end="3949:80"><name pos:start="3949:9" pos:end="3949:21">gen_interrupt</name><argument_list pos:start="3949:22" pos:end="3949:80">(<argument pos:start="3949:23" pos:end="3949:23"><expr pos:start="3949:23" pos:end="3949:23"><name pos:start="3949:23" pos:end="3949:23">s</name></expr></argument>, <argument pos:start="3949:26" pos:end="3949:36"><expr pos:start="3949:26" pos:end="3949:36"><name pos:start="3949:26" pos:end="3949:36">EXCP03_INT3</name></expr></argument>, <argument pos:start="3949:39" pos:end="3949:59"><expr pos:start="3949:39" pos:end="3949:59"><name pos:start="3949:39" pos:end="3949:46">pc_start</name> <operator pos:start="3949:48" pos:end="3949:48">-</operator> <name pos:start="3949:50" pos:end="3949:59"><name pos:start="3949:50" pos:end="3949:50">s</name><operator pos:start="3949:51" pos:end="3949:52">-&gt;</operator><name pos:start="3949:53" pos:end="3949:59">cs_base</name></name></expr></argument>, <argument pos:start="3949:62" pos:end="3949:79"><expr pos:start="3949:62" pos:end="3949:79"><name pos:start="3949:62" pos:end="3949:66"><name pos:start="3949:62" pos:end="3949:62">s</name><operator pos:start="3949:63" pos:end="3949:64">-&gt;</operator><name pos:start="3949:65" pos:end="3949:66">pc</name></name> <operator pos:start="3949:68" pos:end="3949:68">-</operator> <name pos:start="3949:70" pos:end="3949:79"><name pos:start="3949:70" pos:end="3949:70">s</name><operator pos:start="3949:71" pos:end="3949:72">-&gt;</operator><name pos:start="3949:73" pos:end="3949:79">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3951:9" pos:end="3951:14">break;</break>

    <case pos:start="3953:5" pos:end="3953:14">case <expr pos:start="3953:10" pos:end="3953:13"><literal type="number" pos:start="3953:10" pos:end="3953:13">0xcd</literal></expr>:</case> <comment type="block" pos:start="3953:16" pos:end="3953:26">/* int N */</comment>

        <expr_stmt pos:start="3955:9" pos:end="3955:33"><expr pos:start="3955:9" pos:end="3955:32"><name pos:start="3955:9" pos:end="3955:11">val</name> <operator pos:start="3955:13" pos:end="3955:13">=</operator> <call pos:start="3955:15" pos:end="3955:32"><name pos:start="3955:15" pos:end="3955:23">ldub_code</name><argument_list pos:start="3955:24" pos:end="3955:32">(<argument pos:start="3955:25" pos:end="3955:31"><expr pos:start="3955:25" pos:end="3955:31"><name pos:start="3955:25" pos:end="3955:29"><name pos:start="3955:25" pos:end="3955:25">s</name><operator pos:start="3955:26" pos:end="3955:27">-&gt;</operator><name pos:start="3955:28" pos:end="3955:29">pc</name></name><operator pos:start="3955:30" pos:end="3955:31">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3957:9" pos:end="3965:9"><if pos:start="3957:9" pos:end="3961:9">if <condition pos:start="3957:12" pos:end="3957:36">(<expr pos:start="3957:13" pos:end="3957:35"><name pos:start="3957:13" pos:end="3957:19"><name pos:start="3957:13" pos:end="3957:13">s</name><operator pos:start="3957:14" pos:end="3957:15">-&gt;</operator><name pos:start="3957:16" pos:end="3957:19">vm86</name></name> <operator pos:start="3957:21" pos:end="3957:22">&amp;&amp;</operator> <name pos:start="3957:24" pos:end="3957:30"><name pos:start="3957:24" pos:end="3957:24">s</name><operator pos:start="3957:25" pos:end="3957:26">-&gt;</operator><name pos:start="3957:27" pos:end="3957:30">iopl</name></name> <operator pos:start="3957:32" pos:end="3957:33">!=</operator> <literal type="number" pos:start="3957:35" pos:end="3957:35">3</literal></expr>)</condition> <block pos:start="3957:38" pos:end="3961:9">{<block_content pos:start="3959:13" pos:end="3959:64">

            <expr_stmt pos:start="3959:13" pos:end="3959:64"><expr pos:start="3959:13" pos:end="3959:63"><call pos:start="3959:13" pos:end="3959:63"><name pos:start="3959:13" pos:end="3959:25">gen_exception</name><argument_list pos:start="3959:26" pos:end="3959:63">(<argument pos:start="3959:27" pos:end="3959:27"><expr pos:start="3959:27" pos:end="3959:27"><name pos:start="3959:27" pos:end="3959:27">s</name></expr></argument>, <argument pos:start="3959:30" pos:end="3959:39"><expr pos:start="3959:30" pos:end="3959:39"><name pos:start="3959:30" pos:end="3959:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="3959:42" pos:end="3959:62"><expr pos:start="3959:42" pos:end="3959:62"><name pos:start="3959:42" pos:end="3959:49">pc_start</name> <operator pos:start="3959:51" pos:end="3959:51">-</operator> <name pos:start="3959:53" pos:end="3959:62"><name pos:start="3959:53" pos:end="3959:53">s</name><operator pos:start="3959:54" pos:end="3959:55">-&gt;</operator><name pos:start="3959:56" pos:end="3959:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

        </block_content>}</block></if> <else pos:start="3961:11" pos:end="3965:9">else <block pos:start="3961:16" pos:end="3965:9">{<block_content pos:start="3963:13" pos:end="3963:77">

            <expr_stmt pos:start="3963:13" pos:end="3963:77"><expr pos:start="3963:13" pos:end="3963:76"><call pos:start="3963:13" pos:end="3963:76"><name pos:start="3963:13" pos:end="3963:25">gen_interrupt</name><argument_list pos:start="3963:26" pos:end="3963:76">(<argument pos:start="3963:27" pos:end="3963:27"><expr pos:start="3963:27" pos:end="3963:27"><name pos:start="3963:27" pos:end="3963:27">s</name></expr></argument>, <argument pos:start="3963:30" pos:end="3963:32"><expr pos:start="3963:30" pos:end="3963:32"><name pos:start="3963:30" pos:end="3963:32">val</name></expr></argument>, <argument pos:start="3963:35" pos:end="3963:55"><expr pos:start="3963:35" pos:end="3963:55"><name pos:start="3963:35" pos:end="3963:42">pc_start</name> <operator pos:start="3963:44" pos:end="3963:44">-</operator> <name pos:start="3963:46" pos:end="3963:55"><name pos:start="3963:46" pos:end="3963:46">s</name><operator pos:start="3963:47" pos:end="3963:48">-&gt;</operator><name pos:start="3963:49" pos:end="3963:55">cs_base</name></name></expr></argument>, <argument pos:start="3963:58" pos:end="3963:75"><expr pos:start="3963:58" pos:end="3963:75"><name pos:start="3963:58" pos:end="3963:62"><name pos:start="3963:58" pos:end="3963:58">s</name><operator pos:start="3963:59" pos:end="3963:60">-&gt;</operator><name pos:start="3963:61" pos:end="3963:62">pc</name></name> <operator pos:start="3963:64" pos:end="3963:64">-</operator> <name pos:start="3963:66" pos:end="3963:75"><name pos:start="3963:66" pos:end="3963:66">s</name><operator pos:start="3963:67" pos:end="3963:68">-&gt;</operator><name pos:start="3963:69" pos:end="3963:75">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3967:9" pos:end="3967:14">break;</break>

    <case pos:start="3969:5" pos:end="3969:14">case <expr pos:start="3969:10" pos:end="3969:13"><literal type="number" pos:start="3969:10" pos:end="3969:13">0xce</literal></expr>:</case> <comment type="block" pos:start="3969:16" pos:end="3969:25">/* into */</comment>

        <if_stmt pos:start="3971:9" pos:end="3973:39"><if pos:start="3971:9" pos:end="3973:39">if <condition pos:start="3971:12" pos:end="3971:38">(<expr pos:start="3971:13" pos:end="3971:37"><name pos:start="3971:13" pos:end="3971:20"><name pos:start="3971:13" pos:end="3971:13">s</name><operator pos:start="3971:14" pos:end="3971:15">-&gt;</operator><name pos:start="3971:16" pos:end="3971:20">cc_op</name></name> <operator pos:start="3971:22" pos:end="3971:23">!=</operator> <name pos:start="3971:25" pos:end="3971:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3973:13" pos:end="3973:39"><block_content pos:start="3973:13" pos:end="3973:39">

            <expr_stmt pos:start="3973:13" pos:end="3973:39"><expr pos:start="3973:13" pos:end="3973:38"><call pos:start="3973:13" pos:end="3973:38"><name pos:start="3973:13" pos:end="3973:28">gen_op_set_cc_op</name><argument_list pos:start="3973:29" pos:end="3973:38">(<argument pos:start="3973:30" pos:end="3973:37"><expr pos:start="3973:30" pos:end="3973:37"><name pos:start="3973:30" pos:end="3973:37"><name pos:start="3973:30" pos:end="3973:30">s</name><operator pos:start="3973:31" pos:end="3973:32">-&gt;</operator><name pos:start="3973:33" pos:end="3973:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3975:9" pos:end="3975:40"><expr pos:start="3975:9" pos:end="3975:39"><call pos:start="3975:9" pos:end="3975:39"><name pos:start="3975:9" pos:end="3975:19">gen_op_into</name><argument_list pos:start="3975:20" pos:end="3975:39">(<argument pos:start="3975:21" pos:end="3975:38"><expr pos:start="3975:21" pos:end="3975:38"><name pos:start="3975:21" pos:end="3975:25"><name pos:start="3975:21" pos:end="3975:21">s</name><operator pos:start="3975:22" pos:end="3975:23">-&gt;</operator><name pos:start="3975:24" pos:end="3975:25">pc</name></name> <operator pos:start="3975:27" pos:end="3975:27">-</operator> <name pos:start="3975:29" pos:end="3975:38"><name pos:start="3975:29" pos:end="3975:29">s</name><operator pos:start="3975:30" pos:end="3975:31">-&gt;</operator><name pos:start="3975:32" pos:end="3975:38">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3977:9" pos:end="3977:14">break;</break>

    <case pos:start="3979:5" pos:end="3979:14">case <expr pos:start="3979:10" pos:end="3979:13"><literal type="number" pos:start="3979:10" pos:end="3979:13">0xf1</literal></expr>:</case> <comment type="block" pos:start="3979:16" pos:end="3979:69">/* icebp (undocumented, exits to external debugger) */</comment>

        <expr_stmt pos:start="3981:9" pos:end="3981:44"><expr pos:start="3981:9" pos:end="3981:43"><call pos:start="3981:9" pos:end="3981:43"><name pos:start="3981:9" pos:end="3981:17">gen_debug</name><argument_list pos:start="3981:18" pos:end="3981:43">(<argument pos:start="3981:19" pos:end="3981:19"><expr pos:start="3981:19" pos:end="3981:19"><name pos:start="3981:19" pos:end="3981:19">s</name></expr></argument>, <argument pos:start="3981:22" pos:end="3981:42"><expr pos:start="3981:22" pos:end="3981:42"><name pos:start="3981:22" pos:end="3981:29">pc_start</name> <operator pos:start="3981:31" pos:end="3981:31">-</operator> <name pos:start="3981:33" pos:end="3981:42"><name pos:start="3981:33" pos:end="3981:33">s</name><operator pos:start="3981:34" pos:end="3981:35">-&gt;</operator><name pos:start="3981:36" pos:end="3981:42">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3983:9" pos:end="3983:14">break;</break>

    <case pos:start="3985:5" pos:end="3985:14">case <expr pos:start="3985:10" pos:end="3985:13"><literal type="number" pos:start="3985:10" pos:end="3985:13">0xfa</literal></expr>:</case> <comment type="block" pos:start="3985:16" pos:end="3985:24">/* cli */</comment>

        <if_stmt pos:start="3987:9" pos:end="4011:9"><if pos:start="3987:9" pos:end="3999:9">if <condition pos:start="3987:12" pos:end="3987:21">(<expr pos:start="3987:13" pos:end="3987:20"><operator pos:start="3987:13" pos:end="3987:13">!</operator><name pos:start="3987:14" pos:end="3987:20"><name pos:start="3987:14" pos:end="3987:14">s</name><operator pos:start="3987:15" pos:end="3987:16">-&gt;</operator><name pos:start="3987:17" pos:end="3987:20">vm86</name></name></expr>)</condition> <block pos:start="3987:23" pos:end="3999:9">{<block_content pos:start="3989:13" pos:end="3997:13">

            <if_stmt pos:start="3989:13" pos:end="3997:13"><if pos:start="3989:13" pos:end="3993:13">if <condition pos:start="3989:16" pos:end="3989:34">(<expr pos:start="3989:17" pos:end="3989:33"><name pos:start="3989:17" pos:end="3989:22"><name pos:start="3989:17" pos:end="3989:17">s</name><operator pos:start="3989:18" pos:end="3989:19">-&gt;</operator><name pos:start="3989:20" pos:end="3989:22">cpl</name></name> <operator pos:start="3989:24" pos:end="3989:25">&lt;=</operator> <name pos:start="3989:27" pos:end="3989:33"><name pos:start="3989:27" pos:end="3989:27">s</name><operator pos:start="3989:28" pos:end="3989:29">-&gt;</operator><name pos:start="3989:30" pos:end="3989:33">iopl</name></name></expr>)</condition> <block pos:start="3989:36" pos:end="3993:13">{<block_content pos:start="3991:17" pos:end="3991:29">

                <expr_stmt pos:start="3991:17" pos:end="3991:29"><expr pos:start="3991:17" pos:end="3991:28"><call pos:start="3991:17" pos:end="3991:28"><name pos:start="3991:17" pos:end="3991:26">gen_op_cli</name><argument_list pos:start="3991:27" pos:end="3991:28">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="3993:15" pos:end="3997:13">else <block pos:start="3993:20" pos:end="3997:13">{<block_content pos:start="3995:17" pos:end="3995:68">

                <expr_stmt pos:start="3995:17" pos:end="3995:68"><expr pos:start="3995:17" pos:end="3995:67"><call pos:start="3995:17" pos:end="3995:67"><name pos:start="3995:17" pos:end="3995:29">gen_exception</name><argument_list pos:start="3995:30" pos:end="3995:67">(<argument pos:start="3995:31" pos:end="3995:31"><expr pos:start="3995:31" pos:end="3995:31"><name pos:start="3995:31" pos:end="3995:31">s</name></expr></argument>, <argument pos:start="3995:34" pos:end="3995:43"><expr pos:start="3995:34" pos:end="3995:43"><name pos:start="3995:34" pos:end="3995:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="3995:46" pos:end="3995:66"><expr pos:start="3995:46" pos:end="3995:66"><name pos:start="3995:46" pos:end="3995:53">pc_start</name> <operator pos:start="3995:55" pos:end="3995:55">-</operator> <name pos:start="3995:57" pos:end="3995:66"><name pos:start="3995:57" pos:end="3995:57">s</name><operator pos:start="3995:58" pos:end="3995:59">-&gt;</operator><name pos:start="3995:60" pos:end="3995:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="3999:11" pos:end="4011:9">else <block pos:start="3999:16" pos:end="4011:9">{<block_content pos:start="4001:13" pos:end="4009:13">

            <if_stmt pos:start="4001:13" pos:end="4009:13"><if pos:start="4001:13" pos:end="4005:13">if <condition pos:start="4001:16" pos:end="4001:29">(<expr pos:start="4001:17" pos:end="4001:28"><name pos:start="4001:17" pos:end="4001:23"><name pos:start="4001:17" pos:end="4001:17">s</name><operator pos:start="4001:18" pos:end="4001:19">-&gt;</operator><name pos:start="4001:20" pos:end="4001:23">iopl</name></name> <operator pos:start="4001:25" pos:end="4001:26">==</operator> <literal type="number" pos:start="4001:28" pos:end="4001:28">3</literal></expr>)</condition> <block pos:start="4001:31" pos:end="4005:13">{<block_content pos:start="4003:17" pos:end="4003:29">

                <expr_stmt pos:start="4003:17" pos:end="4003:29"><expr pos:start="4003:17" pos:end="4003:28"><call pos:start="4003:17" pos:end="4003:28"><name pos:start="4003:17" pos:end="4003:26">gen_op_cli</name><argument_list pos:start="4003:27" pos:end="4003:28">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4005:15" pos:end="4009:13">else <block pos:start="4005:20" pos:end="4009:13">{<block_content pos:start="4007:17" pos:end="4007:68">

                <expr_stmt pos:start="4007:17" pos:end="4007:68"><expr pos:start="4007:17" pos:end="4007:67"><call pos:start="4007:17" pos:end="4007:67"><name pos:start="4007:17" pos:end="4007:29">gen_exception</name><argument_list pos:start="4007:30" pos:end="4007:67">(<argument pos:start="4007:31" pos:end="4007:31"><expr pos:start="4007:31" pos:end="4007:31"><name pos:start="4007:31" pos:end="4007:31">s</name></expr></argument>, <argument pos:start="4007:34" pos:end="4007:43"><expr pos:start="4007:34" pos:end="4007:43"><name pos:start="4007:34" pos:end="4007:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4007:46" pos:end="4007:66"><expr pos:start="4007:46" pos:end="4007:66"><name pos:start="4007:46" pos:end="4007:53">pc_start</name> <operator pos:start="4007:55" pos:end="4007:55">-</operator> <name pos:start="4007:57" pos:end="4007:66"><name pos:start="4007:57" pos:end="4007:57">s</name><operator pos:start="4007:58" pos:end="4007:59">-&gt;</operator><name pos:start="4007:60" pos:end="4007:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4013:9" pos:end="4013:14">break;</break>

    <case pos:start="4015:5" pos:end="4015:14">case <expr pos:start="4015:10" pos:end="4015:13"><literal type="number" pos:start="4015:10" pos:end="4015:13">0xfb</literal></expr>:</case> <comment type="block" pos:start="4015:16" pos:end="4015:24">/* sti */</comment>

        <if_stmt pos:start="4017:9" pos:end="4059:9"><if pos:start="4017:9" pos:end="4047:9">if <condition pos:start="4017:12" pos:end="4017:21">(<expr pos:start="4017:13" pos:end="4017:20"><operator pos:start="4017:13" pos:end="4017:13">!</operator><name pos:start="4017:14" pos:end="4017:20"><name pos:start="4017:14" pos:end="4017:14">s</name><operator pos:start="4017:15" pos:end="4017:16">-&gt;</operator><name pos:start="4017:17" pos:end="4017:20">vm86</name></name></expr>)</condition> <block pos:start="4017:23" pos:end="4047:9">{<block_content pos:start="4019:13" pos:end="4045:13">

            <if_stmt pos:start="4019:13" pos:end="4045:13"><if pos:start="4019:13" pos:end="4041:13">if <condition pos:start="4019:16" pos:end="4019:34">(<expr pos:start="4019:17" pos:end="4019:33"><name pos:start="4019:17" pos:end="4019:22"><name pos:start="4019:17" pos:end="4019:17">s</name><operator pos:start="4019:18" pos:end="4019:19">-&gt;</operator><name pos:start="4019:20" pos:end="4019:22">cpl</name></name> <operator pos:start="4019:24" pos:end="4019:25">&lt;=</operator> <name pos:start="4019:27" pos:end="4019:33"><name pos:start="4019:27" pos:end="4019:27">s</name><operator pos:start="4019:28" pos:end="4019:29">-&gt;</operator><name pos:start="4019:30" pos:end="4019:33">iopl</name></name></expr>)</condition> <block pos:start="4019:36" pos:end="4041:13">{<block_content pos:start="4021:13" pos:end="4039:27">

            <label pos:start="4021:13" pos:end="4021:20"><name pos:start="4021:13" pos:end="4021:19">gen_sti</name>:</label>

                <expr_stmt pos:start="4023:17" pos:end="4023:29"><expr pos:start="4023:17" pos:end="4023:28"><call pos:start="4023:17" pos:end="4023:28"><name pos:start="4023:17" pos:end="4023:26">gen_op_sti</name><argument_list pos:start="4023:27" pos:end="4023:28">()</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="4025:17" pos:end="4025:77">/* interruptions are enabled only the first insn after sti */</comment>

                <comment type="block" pos:start="4027:17" pos:end="4029:37">/* If several instructions disable interrupts, only the

                   _first_ does it */</comment>

                <if_stmt pos:start="4031:17" pos:end="4033:45"><if pos:start="4031:17" pos:end="4033:45">if <condition pos:start="4031:20" pos:end="4031:58">(<expr pos:start="4031:21" pos:end="4031:57"><operator pos:start="4031:21" pos:end="4031:21">!</operator><operator pos:start="4031:22" pos:end="4031:22">(</operator><name pos:start="4031:23" pos:end="4031:34"><name pos:start="4031:23" pos:end="4031:23">s</name><operator pos:start="4031:24" pos:end="4031:25">-&gt;</operator><name pos:start="4031:26" pos:end="4031:27">tb</name><operator pos:start="4031:28" pos:end="4031:29">-&gt;</operator><name pos:start="4031:30" pos:end="4031:34">flags</name></name> <operator pos:start="4031:36" pos:end="4031:36">&amp;</operator> <name pos:start="4031:38" pos:end="4031:56">HF_INHIBIT_IRQ_MASK</name><operator pos:start="4031:57" pos:end="4031:57">)</operator></expr>)</condition><block type="pseudo" pos:start="4033:21" pos:end="4033:45"><block_content pos:start="4033:21" pos:end="4033:45">

                    <expr_stmt pos:start="4033:21" pos:end="4033:45"><expr pos:start="4033:21" pos:end="4033:44"><call pos:start="4033:21" pos:end="4033:44"><name pos:start="4033:21" pos:end="4033:42">gen_op_set_inhibit_irq</name><argument_list pos:start="4033:43" pos:end="4033:44">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="block" pos:start="4035:17" pos:end="4035:58">/* give a chance to handle pending irqs */</comment>

                <expr_stmt pos:start="4037:17" pos:end="4037:50"><expr pos:start="4037:17" pos:end="4037:49"><call pos:start="4037:17" pos:end="4037:49"><name pos:start="4037:17" pos:end="4037:29">gen_op_jmp_im</name><argument_list pos:start="4037:30" pos:end="4037:49">(<argument pos:start="4037:31" pos:end="4037:48"><expr pos:start="4037:31" pos:end="4037:48"><name pos:start="4037:31" pos:end="4037:35"><name pos:start="4037:31" pos:end="4037:31">s</name><operator pos:start="4037:32" pos:end="4037:33">-&gt;</operator><name pos:start="4037:34" pos:end="4037:35">pc</name></name> <operator pos:start="4037:37" pos:end="4037:37">-</operator> <name pos:start="4037:39" pos:end="4037:48"><name pos:start="4037:39" pos:end="4037:39">s</name><operator pos:start="4037:40" pos:end="4037:41">-&gt;</operator><name pos:start="4037:42" pos:end="4037:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4039:17" pos:end="4039:27"><expr pos:start="4039:17" pos:end="4039:26"><call pos:start="4039:17" pos:end="4039:26"><name pos:start="4039:17" pos:end="4039:23">gen_eob</name><argument_list pos:start="4039:24" pos:end="4039:26">(<argument pos:start="4039:25" pos:end="4039:25"><expr pos:start="4039:25" pos:end="4039:25"><name pos:start="4039:25" pos:end="4039:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4041:15" pos:end="4045:13">else <block pos:start="4041:20" pos:end="4045:13">{<block_content pos:start="4043:17" pos:end="4043:68">

                <expr_stmt pos:start="4043:17" pos:end="4043:68"><expr pos:start="4043:17" pos:end="4043:67"><call pos:start="4043:17" pos:end="4043:67"><name pos:start="4043:17" pos:end="4043:29">gen_exception</name><argument_list pos:start="4043:30" pos:end="4043:67">(<argument pos:start="4043:31" pos:end="4043:31"><expr pos:start="4043:31" pos:end="4043:31"><name pos:start="4043:31" pos:end="4043:31">s</name></expr></argument>, <argument pos:start="4043:34" pos:end="4043:43"><expr pos:start="4043:34" pos:end="4043:43"><name pos:start="4043:34" pos:end="4043:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4043:46" pos:end="4043:66"><expr pos:start="4043:46" pos:end="4043:66"><name pos:start="4043:46" pos:end="4043:53">pc_start</name> <operator pos:start="4043:55" pos:end="4043:55">-</operator> <name pos:start="4043:57" pos:end="4043:66"><name pos:start="4043:57" pos:end="4043:57">s</name><operator pos:start="4043:58" pos:end="4043:59">-&gt;</operator><name pos:start="4043:60" pos:end="4043:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="4047:11" pos:end="4059:9">else <block pos:start="4047:16" pos:end="4059:9">{<block_content pos:start="4049:13" pos:end="4057:13">

            <if_stmt pos:start="4049:13" pos:end="4057:13"><if pos:start="4049:13" pos:end="4053:13">if <condition pos:start="4049:16" pos:end="4049:29">(<expr pos:start="4049:17" pos:end="4049:28"><name pos:start="4049:17" pos:end="4049:23"><name pos:start="4049:17" pos:end="4049:17">s</name><operator pos:start="4049:18" pos:end="4049:19">-&gt;</operator><name pos:start="4049:20" pos:end="4049:23">iopl</name></name> <operator pos:start="4049:25" pos:end="4049:26">==</operator> <literal type="number" pos:start="4049:28" pos:end="4049:28">3</literal></expr>)</condition> <block pos:start="4049:31" pos:end="4053:13">{<block_content pos:start="4051:17" pos:end="4051:29">

                <goto pos:start="4051:17" pos:end="4051:29">goto <name pos:start="4051:22" pos:end="4051:28">gen_sti</name>;</goto>

            </block_content>}</block></if> <else pos:start="4053:15" pos:end="4057:13">else <block pos:start="4053:20" pos:end="4057:13">{<block_content pos:start="4055:17" pos:end="4055:68">

                <expr_stmt pos:start="4055:17" pos:end="4055:68"><expr pos:start="4055:17" pos:end="4055:67"><call pos:start="4055:17" pos:end="4055:67"><name pos:start="4055:17" pos:end="4055:29">gen_exception</name><argument_list pos:start="4055:30" pos:end="4055:67">(<argument pos:start="4055:31" pos:end="4055:31"><expr pos:start="4055:31" pos:end="4055:31"><name pos:start="4055:31" pos:end="4055:31">s</name></expr></argument>, <argument pos:start="4055:34" pos:end="4055:43"><expr pos:start="4055:34" pos:end="4055:43"><name pos:start="4055:34" pos:end="4055:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4055:46" pos:end="4055:66"><expr pos:start="4055:46" pos:end="4055:66"><name pos:start="4055:46" pos:end="4055:53">pc_start</name> <operator pos:start="4055:55" pos:end="4055:55">-</operator> <name pos:start="4055:57" pos:end="4055:66"><name pos:start="4055:57" pos:end="4055:57">s</name><operator pos:start="4055:58" pos:end="4055:59">-&gt;</operator><name pos:start="4055:60" pos:end="4055:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4061:9" pos:end="4061:14">break;</break>

    <case pos:start="4063:5" pos:end="4063:14">case <expr pos:start="4063:10" pos:end="4063:13"><literal type="number" pos:start="4063:10" pos:end="4063:13">0x62</literal></expr>:</case> <comment type="block" pos:start="4063:16" pos:end="4063:26">/* bound */</comment>

        <expr_stmt pos:start="4065:9" pos:end="4065:39"><expr pos:start="4065:9" pos:end="4065:38"><name pos:start="4065:9" pos:end="4065:10">ot</name> <operator pos:start="4065:12" pos:end="4065:12">=</operator> <ternary pos:start="4065:14" pos:end="4065:38"><condition pos:start="4065:14" pos:end="4065:20"><expr pos:start="4065:14" pos:end="4065:18"><name pos:start="4065:14" pos:end="4065:18">dflag</name></expr> ?</condition><then pos:start="4065:22" pos:end="4065:28"> <expr pos:start="4065:22" pos:end="4065:28"><name pos:start="4065:22" pos:end="4065:28">OT_LONG</name></expr> </then><else pos:start="4065:30" pos:end="4065:38">: <expr pos:start="4065:32" pos:end="4065:38"><name pos:start="4065:32" pos:end="4065:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="4067:9" pos:end="4067:35"><expr pos:start="4067:9" pos:end="4067:34"><name pos:start="4067:9" pos:end="4067:13">modrm</name> <operator pos:start="4067:15" pos:end="4067:15">=</operator> <call pos:start="4067:17" pos:end="4067:34"><name pos:start="4067:17" pos:end="4067:25">ldub_code</name><argument_list pos:start="4067:26" pos:end="4067:34">(<argument pos:start="4067:27" pos:end="4067:33"><expr pos:start="4067:27" pos:end="4067:33"><name pos:start="4067:27" pos:end="4067:31"><name pos:start="4067:27" pos:end="4067:27">s</name><operator pos:start="4067:28" pos:end="4067:29">-&gt;</operator><name pos:start="4067:30" pos:end="4067:31">pc</name></name><operator pos:start="4067:32" pos:end="4067:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4069:9" pos:end="4069:31"><expr pos:start="4069:9" pos:end="4069:30"><name pos:start="4069:9" pos:end="4069:11">reg</name> <operator pos:start="4069:13" pos:end="4069:13">=</operator> <operator pos:start="4069:15" pos:end="4069:15">(</operator><name pos:start="4069:16" pos:end="4069:20">modrm</name> <operator pos:start="4069:22" pos:end="4069:23">&gt;&gt;</operator> <literal type="number" pos:start="4069:25" pos:end="4069:25">3</literal><operator pos:start="4069:26" pos:end="4069:26">)</operator> <operator pos:start="4069:28" pos:end="4069:28">&amp;</operator> <literal type="number" pos:start="4069:30" pos:end="4069:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4071:9" pos:end="4071:31"><expr pos:start="4071:9" pos:end="4071:30"><name pos:start="4071:9" pos:end="4071:11">mod</name> <operator pos:start="4071:13" pos:end="4071:13">=</operator> <operator pos:start="4071:15" pos:end="4071:15">(</operator><name pos:start="4071:16" pos:end="4071:20">modrm</name> <operator pos:start="4071:22" pos:end="4071:23">&gt;&gt;</operator> <literal type="number" pos:start="4071:25" pos:end="4071:25">6</literal><operator pos:start="4071:26" pos:end="4071:26">)</operator> <operator pos:start="4071:28" pos:end="4071:28">&amp;</operator> <literal type="number" pos:start="4071:30" pos:end="4071:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="4073:9" pos:end="4075:28"><if pos:start="4073:9" pos:end="4075:28">if <condition pos:start="4073:12" pos:end="4073:21">(<expr pos:start="4073:13" pos:end="4073:20"><name pos:start="4073:13" pos:end="4073:15">mod</name> <operator pos:start="4073:17" pos:end="4073:18">==</operator> <literal type="number" pos:start="4073:20" pos:end="4073:20">3</literal></expr>)</condition><block type="pseudo" pos:start="4075:13" pos:end="4075:28"><block_content pos:start="4075:13" pos:end="4075:28">

            <goto pos:start="4075:13" pos:end="4075:28">goto <name pos:start="4075:18" pos:end="4075:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4077:9" pos:end="4077:37"><expr pos:start="4077:9" pos:end="4077:36"><name pos:start="4077:9" pos:end="4077:34"><name pos:start="4077:9" pos:end="4077:25">gen_op_mov_reg_T0</name><index pos:start="4077:26" pos:end="4077:29">[<expr pos:start="4077:27" pos:end="4077:28"><name pos:start="4077:27" pos:end="4077:28">ot</name></expr>]</index><index pos:start="4077:30" pos:end="4077:34">[<expr pos:start="4077:31" pos:end="4077:33"><name pos:start="4077:31" pos:end="4077:33">reg</name></expr>]</index></name><operator pos:start="4077:35" pos:end="4077:35">(</operator><operator pos:start="4077:36" pos:end="4077:36">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="4079:9" pos:end="4079:57"><expr pos:start="4079:9" pos:end="4079:56"><call pos:start="4079:9" pos:end="4079:56"><name pos:start="4079:9" pos:end="4079:21">gen_lea_modrm</name><argument_list pos:start="4079:22" pos:end="4079:56">(<argument pos:start="4079:23" pos:end="4079:23"><expr pos:start="4079:23" pos:end="4079:23"><name pos:start="4079:23" pos:end="4079:23">s</name></expr></argument>, <argument pos:start="4079:26" pos:end="4079:30"><expr pos:start="4079:26" pos:end="4079:30"><name pos:start="4079:26" pos:end="4079:30">modrm</name></expr></argument>, <argument pos:start="4079:33" pos:end="4079:41"><expr pos:start="4079:33" pos:end="4079:41"><operator pos:start="4079:33" pos:end="4079:33">&amp;</operator><name pos:start="4079:34" pos:end="4079:41">reg_addr</name></expr></argument>, <argument pos:start="4079:44" pos:end="4079:55"><expr pos:start="4079:44" pos:end="4079:55"><operator pos:start="4079:44" pos:end="4079:44">&amp;</operator><name pos:start="4079:45" pos:end="4079:55">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="4081:9" pos:end="4087:49"><if pos:start="4081:9" pos:end="4083:49">if <condition pos:start="4081:12" pos:end="4081:26">(<expr pos:start="4081:13" pos:end="4081:25"><name pos:start="4081:13" pos:end="4081:14">ot</name> <operator pos:start="4081:16" pos:end="4081:17">==</operator> <name pos:start="4081:19" pos:end="4081:25">OT_WORD</name></expr>)</condition><block type="pseudo" pos:start="4083:13" pos:end="4083:49"><block_content pos:start="4083:13" pos:end="4083:49">

            <expr_stmt pos:start="4083:13" pos:end="4083:49"><expr pos:start="4083:13" pos:end="4083:48"><call pos:start="4083:13" pos:end="4083:48"><name pos:start="4083:13" pos:end="4083:25">gen_op_boundw</name><argument_list pos:start="4083:26" pos:end="4083:48">(<argument pos:start="4083:27" pos:end="4083:47"><expr pos:start="4083:27" pos:end="4083:47"><name pos:start="4083:27" pos:end="4083:34">pc_start</name> <operator pos:start="4083:36" pos:end="4083:36">-</operator> <name pos:start="4083:38" pos:end="4083:47"><name pos:start="4083:38" pos:end="4083:38">s</name><operator pos:start="4083:39" pos:end="4083:40">-&gt;</operator><name pos:start="4083:41" pos:end="4083:47">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="4085:9" pos:end="4087:49">else<block type="pseudo" pos:start="4087:13" pos:end="4087:49"><block_content pos:start="4087:13" pos:end="4087:49">

            <expr_stmt pos:start="4087:13" pos:end="4087:49"><expr pos:start="4087:13" pos:end="4087:48"><call pos:start="4087:13" pos:end="4087:48"><name pos:start="4087:13" pos:end="4087:25">gen_op_boundl</name><argument_list pos:start="4087:26" pos:end="4087:48">(<argument pos:start="4087:27" pos:end="4087:47"><expr pos:start="4087:27" pos:end="4087:47"><name pos:start="4087:27" pos:end="4087:34">pc_start</name> <operator pos:start="4087:36" pos:end="4087:36">-</operator> <name pos:start="4087:38" pos:end="4087:47"><name pos:start="4087:38" pos:end="4087:38">s</name><operator pos:start="4087:39" pos:end="4087:40">-&gt;</operator><name pos:start="4087:41" pos:end="4087:47">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="4089:9" pos:end="4089:14">break;</break>

    <case pos:start="4091:5" pos:end="4091:25">case <expr pos:start="4091:10" pos:end="4091:24"><literal type="number" pos:start="4091:10" pos:end="4091:14">0x1c8</literal> <operator pos:start="4091:16" pos:end="4091:18">...</operator> <literal type="number" pos:start="4091:20" pos:end="4091:24">0x1cf</literal></expr>:</case> <comment type="block" pos:start="4091:27" pos:end="4091:41">/* bswap reg */</comment>

        <expr_stmt pos:start="4093:9" pos:end="4093:20"><expr pos:start="4093:9" pos:end="4093:19"><name pos:start="4093:9" pos:end="4093:11">reg</name> <operator pos:start="4093:13" pos:end="4093:13">=</operator> <name pos:start="4093:15" pos:end="4093:15">b</name> <operator pos:start="4093:17" pos:end="4093:17">&amp;</operator> <literal type="number" pos:start="4093:19" pos:end="4093:19">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4095:9" pos:end="4095:45"><expr pos:start="4095:9" pos:end="4095:44"><name pos:start="4095:9" pos:end="4095:42"><name pos:start="4095:9" pos:end="4095:25">gen_op_mov_TN_reg</name><index pos:start="4095:26" pos:end="4095:34">[<expr pos:start="4095:27" pos:end="4095:33"><name pos:start="4095:27" pos:end="4095:33">OT_LONG</name></expr>]</index><index pos:start="4095:35" pos:end="4095:37">[<expr pos:start="4095:36" pos:end="4095:36"><literal type="number" pos:start="4095:36" pos:end="4095:36">0</literal></expr>]</index><index pos:start="4095:38" pos:end="4095:42">[<expr pos:start="4095:39" pos:end="4095:41"><name pos:start="4095:39" pos:end="4095:41">reg</name></expr>]</index></name><operator pos:start="4095:43" pos:end="4095:43">(</operator><operator pos:start="4095:44" pos:end="4095:44">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="4097:9" pos:end="4097:27"><expr pos:start="4097:9" pos:end="4097:26"><call pos:start="4097:9" pos:end="4097:26"><name pos:start="4097:9" pos:end="4097:24">gen_op_bswapl_T0</name><argument_list pos:start="4097:25" pos:end="4097:26">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4099:9" pos:end="4099:42"><expr pos:start="4099:9" pos:end="4099:41"><name pos:start="4099:9" pos:end="4099:39"><name pos:start="4099:9" pos:end="4099:25">gen_op_mov_reg_T0</name><index pos:start="4099:26" pos:end="4099:34">[<expr pos:start="4099:27" pos:end="4099:33"><name pos:start="4099:27" pos:end="4099:33">OT_LONG</name></expr>]</index><index pos:start="4099:35" pos:end="4099:39">[<expr pos:start="4099:36" pos:end="4099:38"><name pos:start="4099:36" pos:end="4099:38">reg</name></expr>]</index></name><operator pos:start="4099:40" pos:end="4099:40">(</operator><operator pos:start="4099:41" pos:end="4099:41">)</operator></expr>;</expr_stmt>

        <break pos:start="4101:9" pos:end="4101:14">break;</break>

    <case pos:start="4103:5" pos:end="4103:14">case <expr pos:start="4103:10" pos:end="4103:13"><literal type="number" pos:start="4103:10" pos:end="4103:13">0xd6</literal></expr>:</case> <comment type="block" pos:start="4103:16" pos:end="4103:25">/* salc */</comment>

        <if_stmt pos:start="4105:9" pos:end="4107:39"><if pos:start="4105:9" pos:end="4107:39">if <condition pos:start="4105:12" pos:end="4105:38">(<expr pos:start="4105:13" pos:end="4105:37"><name pos:start="4105:13" pos:end="4105:20"><name pos:start="4105:13" pos:end="4105:13">s</name><operator pos:start="4105:14" pos:end="4105:15">-&gt;</operator><name pos:start="4105:16" pos:end="4105:20">cc_op</name></name> <operator pos:start="4105:22" pos:end="4105:23">!=</operator> <name pos:start="4105:25" pos:end="4105:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4107:13" pos:end="4107:39"><block_content pos:start="4107:13" pos:end="4107:39">

            <expr_stmt pos:start="4107:13" pos:end="4107:39"><expr pos:start="4107:13" pos:end="4107:38"><call pos:start="4107:13" pos:end="4107:38"><name pos:start="4107:13" pos:end="4107:28">gen_op_set_cc_op</name><argument_list pos:start="4107:29" pos:end="4107:38">(<argument pos:start="4107:30" pos:end="4107:37"><expr pos:start="4107:30" pos:end="4107:37"><name pos:start="4107:30" pos:end="4107:37"><name pos:start="4107:30" pos:end="4107:30">s</name><operator pos:start="4107:31" pos:end="4107:32">-&gt;</operator><name pos:start="4107:33" pos:end="4107:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4109:9" pos:end="4109:22"><expr pos:start="4109:9" pos:end="4109:21"><call pos:start="4109:9" pos:end="4109:21"><name pos:start="4109:9" pos:end="4109:19">gen_op_salc</name><argument_list pos:start="4109:20" pos:end="4109:21">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4111:9" pos:end="4111:14">break;</break>

    <case pos:start="4113:5" pos:end="4113:14">case <expr pos:start="4113:10" pos:end="4113:13"><literal type="number" pos:start="4113:10" pos:end="4113:13">0xe0</literal></expr>:</case> <comment type="block" pos:start="4113:16" pos:end="4113:27">/* loopnz */</comment>

    <case pos:start="4115:5" pos:end="4115:14">case <expr pos:start="4115:10" pos:end="4115:13"><literal type="number" pos:start="4115:10" pos:end="4115:13">0xe1</literal></expr>:</case> <comment type="block" pos:start="4115:16" pos:end="4115:26">/* loopz */</comment>

        <if_stmt pos:start="4117:9" pos:end="4119:39"><if pos:start="4117:9" pos:end="4119:39">if <condition pos:start="4117:12" pos:end="4117:38">(<expr pos:start="4117:13" pos:end="4117:37"><name pos:start="4117:13" pos:end="4117:20"><name pos:start="4117:13" pos:end="4117:13">s</name><operator pos:start="4117:14" pos:end="4117:15">-&gt;</operator><name pos:start="4117:16" pos:end="4117:20">cc_op</name></name> <operator pos:start="4117:22" pos:end="4117:23">!=</operator> <name pos:start="4117:25" pos:end="4117:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4119:13" pos:end="4119:39"><block_content pos:start="4119:13" pos:end="4119:39">

            <expr_stmt pos:start="4119:13" pos:end="4119:39"><expr pos:start="4119:13" pos:end="4119:38"><call pos:start="4119:13" pos:end="4119:38"><name pos:start="4119:13" pos:end="4119:28">gen_op_set_cc_op</name><argument_list pos:start="4119:29" pos:end="4119:38">(<argument pos:start="4119:30" pos:end="4119:37"><expr pos:start="4119:30" pos:end="4119:37"><name pos:start="4119:30" pos:end="4119:37"><name pos:start="4119:30" pos:end="4119:30">s</name><operator pos:start="4119:31" pos:end="4119:32">-&gt;</operator><name pos:start="4119:33" pos:end="4119:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block" pos:start="4121:9" pos:end="4121:23">/* FALL THRU */</comment>

    <case pos:start="4123:5" pos:end="4123:14">case <expr pos:start="4123:10" pos:end="4123:13"><literal type="number" pos:start="4123:10" pos:end="4123:13">0xe2</literal></expr>:</case> <comment type="block" pos:start="4123:16" pos:end="4123:25">/* loop */</comment>

    <case pos:start="4125:5" pos:end="4125:14">case <expr pos:start="4125:10" pos:end="4125:13"><literal type="number" pos:start="4125:10" pos:end="4125:13">0xe3</literal></expr>:</case> <comment type="block" pos:start="4125:16" pos:end="4125:26">/* jecxz */</comment>

        <expr_stmt pos:start="4127:9" pos:end="4127:43"><expr pos:start="4127:9" pos:end="4127:42"><name pos:start="4127:9" pos:end="4127:11">val</name> <operator pos:start="4127:13" pos:end="4127:13">=</operator> <operator pos:start="4127:15" pos:end="4127:15">(</operator><name pos:start="4127:16" pos:end="4127:21">int8_t</name><operator pos:start="4127:22" pos:end="4127:22">)</operator><call pos:start="4127:23" pos:end="4127:42"><name pos:start="4127:23" pos:end="4127:30">insn_get</name><argument_list pos:start="4127:31" pos:end="4127:42">(<argument pos:start="4127:32" pos:end="4127:32"><expr pos:start="4127:32" pos:end="4127:32"><name pos:start="4127:32" pos:end="4127:32">s</name></expr></argument>, <argument pos:start="4127:35" pos:end="4127:41"><expr pos:start="4127:35" pos:end="4127:41"><name pos:start="4127:35" pos:end="4127:41">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4129:9" pos:end="4129:38"><expr pos:start="4129:9" pos:end="4129:37"><name pos:start="4129:9" pos:end="4129:16">next_eip</name> <operator pos:start="4129:18" pos:end="4129:18">=</operator> <name pos:start="4129:20" pos:end="4129:24"><name pos:start="4129:20" pos:end="4129:20">s</name><operator pos:start="4129:21" pos:end="4129:22">-&gt;</operator><name pos:start="4129:23" pos:end="4129:24">pc</name></name> <operator pos:start="4129:26" pos:end="4129:26">-</operator> <name pos:start="4129:28" pos:end="4129:37"><name pos:start="4129:28" pos:end="4129:28">s</name><operator pos:start="4129:29" pos:end="4129:30">-&gt;</operator><name pos:start="4129:31" pos:end="4129:37">cs_base</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="4131:9" pos:end="4131:24"><expr pos:start="4131:9" pos:end="4131:23"><name pos:start="4131:9" pos:end="4131:11">val</name> <operator pos:start="4131:13" pos:end="4131:14">+=</operator> <name pos:start="4131:16" pos:end="4131:23">next_eip</name></expr>;</expr_stmt>

        <if_stmt pos:start="4133:9" pos:end="4135:26"><if pos:start="4133:9" pos:end="4135:26">if <condition pos:start="4133:12" pos:end="4133:26">(<expr pos:start="4133:13" pos:end="4133:25"><name pos:start="4133:13" pos:end="4133:20"><name pos:start="4133:13" pos:end="4133:13">s</name><operator pos:start="4133:14" pos:end="4133:15">-&gt;</operator><name pos:start="4133:16" pos:end="4133:20">dflag</name></name> <operator pos:start="4133:22" pos:end="4133:23">==</operator> <literal type="number" pos:start="4133:25" pos:end="4133:25">0</literal></expr>)</condition><block type="pseudo" pos:start="4135:13" pos:end="4135:26"><block_content pos:start="4135:13" pos:end="4135:26">

            <expr_stmt pos:start="4135:13" pos:end="4135:26"><expr pos:start="4135:13" pos:end="4135:25"><name pos:start="4135:13" pos:end="4135:15">val</name> <operator pos:start="4135:17" pos:end="4135:18">&amp;=</operator> <literal type="number" pos:start="4135:20" pos:end="4135:25">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4137:9" pos:end="4137:52"><expr pos:start="4137:9" pos:end="4137:51"><name pos:start="4137:9" pos:end="4137:36"><name pos:start="4137:9" pos:end="4137:19">gen_op_loop</name><index pos:start="4137:20" pos:end="4137:29">[<expr pos:start="4137:21" pos:end="4137:28"><name pos:start="4137:21" pos:end="4137:28"><name pos:start="4137:21" pos:end="4137:21">s</name><operator pos:start="4137:22" pos:end="4137:23">-&gt;</operator><name pos:start="4137:24" pos:end="4137:28">aflag</name></name></expr>]</index><index pos:start="4137:30" pos:end="4137:36">[<expr pos:start="4137:31" pos:end="4137:35"><name pos:start="4137:31" pos:end="4137:31">b</name> <operator pos:start="4137:33" pos:end="4137:33">&amp;</operator> <literal type="number" pos:start="4137:35" pos:end="4137:35">3</literal></expr>]</index></name><operator pos:start="4137:37" pos:end="4137:37">(</operator><name pos:start="4137:38" pos:end="4137:40">val</name><operator pos:start="4137:41" pos:end="4137:41">,</operator> <name pos:start="4137:43" pos:end="4137:50">next_eip</name><operator pos:start="4137:51" pos:end="4137:51">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="4139:9" pos:end="4139:19"><expr pos:start="4139:9" pos:end="4139:18"><call pos:start="4139:9" pos:end="4139:18"><name pos:start="4139:9" pos:end="4139:15">gen_eob</name><argument_list pos:start="4139:16" pos:end="4139:18">(<argument pos:start="4139:17" pos:end="4139:17"><expr pos:start="4139:17" pos:end="4139:17"><name pos:start="4139:17" pos:end="4139:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4141:9" pos:end="4141:14">break;</break>

    <case pos:start="4143:5" pos:end="4143:15">case <expr pos:start="4143:10" pos:end="4143:14"><literal type="number" pos:start="4143:10" pos:end="4143:14">0x130</literal></expr>:</case> <comment type="block" pos:start="4143:17" pos:end="4143:27">/* wrmsr */</comment>

    <case pos:start="4145:5" pos:end="4145:15">case <expr pos:start="4145:10" pos:end="4145:14"><literal type="number" pos:start="4145:10" pos:end="4145:14">0x132</literal></expr>:</case> <comment type="block" pos:start="4145:17" pos:end="4145:27">/* rdmsr */</comment>

        <if_stmt pos:start="4147:9" pos:end="4161:9"><if pos:start="4147:9" pos:end="4151:9">if <condition pos:start="4147:12" pos:end="4147:24">(<expr pos:start="4147:13" pos:end="4147:23"><name pos:start="4147:13" pos:end="4147:18"><name pos:start="4147:13" pos:end="4147:13">s</name><operator pos:start="4147:14" pos:end="4147:15">-&gt;</operator><name pos:start="4147:16" pos:end="4147:18">cpl</name></name> <operator pos:start="4147:20" pos:end="4147:21">!=</operator> <literal type="number" pos:start="4147:23" pos:end="4147:23">0</literal></expr>)</condition> <block pos:start="4147:26" pos:end="4151:9">{<block_content pos:start="4149:13" pos:end="4149:64">

            <expr_stmt pos:start="4149:13" pos:end="4149:64"><expr pos:start="4149:13" pos:end="4149:63"><call pos:start="4149:13" pos:end="4149:63"><name pos:start="4149:13" pos:end="4149:25">gen_exception</name><argument_list pos:start="4149:26" pos:end="4149:63">(<argument pos:start="4149:27" pos:end="4149:27"><expr pos:start="4149:27" pos:end="4149:27"><name pos:start="4149:27" pos:end="4149:27">s</name></expr></argument>, <argument pos:start="4149:30" pos:end="4149:39"><expr pos:start="4149:30" pos:end="4149:39"><name pos:start="4149:30" pos:end="4149:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4149:42" pos:end="4149:62"><expr pos:start="4149:42" pos:end="4149:62"><name pos:start="4149:42" pos:end="4149:49">pc_start</name> <operator pos:start="4149:51" pos:end="4149:51">-</operator> <name pos:start="4149:53" pos:end="4149:62"><name pos:start="4149:53" pos:end="4149:53">s</name><operator pos:start="4149:54" pos:end="4149:55">-&gt;</operator><name pos:start="4149:56" pos:end="4149:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4151:11" pos:end="4161:9">else <block pos:start="4151:16" pos:end="4161:9">{<block_content pos:start="4153:13" pos:end="4159:31">

            <if_stmt pos:start="4153:13" pos:end="4159:31"><if pos:start="4153:13" pos:end="4155:31">if <condition pos:start="4153:16" pos:end="4153:22">(<expr pos:start="4153:17" pos:end="4153:21"><name pos:start="4153:17" pos:end="4153:17">b</name> <operator pos:start="4153:19" pos:end="4153:19">&amp;</operator> <literal type="number" pos:start="4153:21" pos:end="4153:21">2</literal></expr>)</condition><block type="pseudo" pos:start="4155:17" pos:end="4155:31"><block_content pos:start="4155:17" pos:end="4155:31">

                <expr_stmt pos:start="4155:17" pos:end="4155:31"><expr pos:start="4155:17" pos:end="4155:30"><call pos:start="4155:17" pos:end="4155:30"><name pos:start="4155:17" pos:end="4155:28">gen_op_rdmsr</name><argument_list pos:start="4155:29" pos:end="4155:30">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="4157:13" pos:end="4159:31">else<block type="pseudo" pos:start="4159:17" pos:end="4159:31"><block_content pos:start="4159:17" pos:end="4159:31">

                <expr_stmt pos:start="4159:17" pos:end="4159:31"><expr pos:start="4159:17" pos:end="4159:30"><call pos:start="4159:17" pos:end="4159:30"><name pos:start="4159:17" pos:end="4159:28">gen_op_wrmsr</name><argument_list pos:start="4159:29" pos:end="4159:30">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4163:9" pos:end="4163:14">break;</break>

    <case pos:start="4165:5" pos:end="4165:15">case <expr pos:start="4165:10" pos:end="4165:14"><literal type="number" pos:start="4165:10" pos:end="4165:14">0x131</literal></expr>:</case> <comment type="block" pos:start="4165:17" pos:end="4165:27">/* rdtsc */</comment>

        <expr_stmt pos:start="4167:9" pos:end="4167:23"><expr pos:start="4167:9" pos:end="4167:22"><call pos:start="4167:9" pos:end="4167:22"><name pos:start="4167:9" pos:end="4167:20">gen_op_rdtsc</name><argument_list pos:start="4167:21" pos:end="4167:22">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4169:9" pos:end="4169:14">break;</break>

    <case pos:start="4171:5" pos:end="4171:15">case <expr pos:start="4171:10" pos:end="4171:14"><literal type="number" pos:start="4171:10" pos:end="4171:14">0x1a2</literal></expr>:</case> <comment type="block" pos:start="4171:17" pos:end="4171:27">/* cpuid */</comment>

        <expr_stmt pos:start="4173:9" pos:end="4173:23"><expr pos:start="4173:9" pos:end="4173:22"><call pos:start="4173:9" pos:end="4173:22"><name pos:start="4173:9" pos:end="4173:20">gen_op_cpuid</name><argument_list pos:start="4173:21" pos:end="4173:22">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4175:9" pos:end="4175:14">break;</break>

    <case pos:start="4177:5" pos:end="4177:14">case <expr pos:start="4177:10" pos:end="4177:13"><literal type="number" pos:start="4177:10" pos:end="4177:13">0xf4</literal></expr>:</case> <comment type="block" pos:start="4177:16" pos:end="4177:24">/* hlt */</comment>

        <if_stmt pos:start="4179:9" pos:end="4195:9"><if pos:start="4179:9" pos:end="4183:9">if <condition pos:start="4179:12" pos:end="4179:24">(<expr pos:start="4179:13" pos:end="4179:23"><name pos:start="4179:13" pos:end="4179:18"><name pos:start="4179:13" pos:end="4179:13">s</name><operator pos:start="4179:14" pos:end="4179:15">-&gt;</operator><name pos:start="4179:16" pos:end="4179:18">cpl</name></name> <operator pos:start="4179:20" pos:end="4179:21">!=</operator> <literal type="number" pos:start="4179:23" pos:end="4179:23">0</literal></expr>)</condition> <block pos:start="4179:26" pos:end="4183:9">{<block_content pos:start="4181:13" pos:end="4181:64">

            <expr_stmt pos:start="4181:13" pos:end="4181:64"><expr pos:start="4181:13" pos:end="4181:63"><call pos:start="4181:13" pos:end="4181:63"><name pos:start="4181:13" pos:end="4181:25">gen_exception</name><argument_list pos:start="4181:26" pos:end="4181:63">(<argument pos:start="4181:27" pos:end="4181:27"><expr pos:start="4181:27" pos:end="4181:27"><name pos:start="4181:27" pos:end="4181:27">s</name></expr></argument>, <argument pos:start="4181:30" pos:end="4181:39"><expr pos:start="4181:30" pos:end="4181:39"><name pos:start="4181:30" pos:end="4181:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4181:42" pos:end="4181:62"><expr pos:start="4181:42" pos:end="4181:62"><name pos:start="4181:42" pos:end="4181:49">pc_start</name> <operator pos:start="4181:51" pos:end="4181:51">-</operator> <name pos:start="4181:53" pos:end="4181:62"><name pos:start="4181:53" pos:end="4181:53">s</name><operator pos:start="4181:54" pos:end="4181:55">-&gt;</operator><name pos:start="4181:56" pos:end="4181:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4183:11" pos:end="4195:9">else <block pos:start="4183:16" pos:end="4195:9">{<block_content pos:start="4185:13" pos:end="4193:26">

            <if_stmt pos:start="4185:13" pos:end="4187:43"><if pos:start="4185:13" pos:end="4187:43">if <condition pos:start="4185:16" pos:end="4185:42">(<expr pos:start="4185:17" pos:end="4185:41"><name pos:start="4185:17" pos:end="4185:24"><name pos:start="4185:17" pos:end="4185:17">s</name><operator pos:start="4185:18" pos:end="4185:19">-&gt;</operator><name pos:start="4185:20" pos:end="4185:24">cc_op</name></name> <operator pos:start="4185:26" pos:end="4185:27">!=</operator> <name pos:start="4185:29" pos:end="4185:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4187:17" pos:end="4187:43"><block_content pos:start="4187:17" pos:end="4187:43">

                <expr_stmt pos:start="4187:17" pos:end="4187:43"><expr pos:start="4187:17" pos:end="4187:42"><call pos:start="4187:17" pos:end="4187:42"><name pos:start="4187:17" pos:end="4187:32">gen_op_set_cc_op</name><argument_list pos:start="4187:33" pos:end="4187:42">(<argument pos:start="4187:34" pos:end="4187:41"><expr pos:start="4187:34" pos:end="4187:41"><name pos:start="4187:34" pos:end="4187:41"><name pos:start="4187:34" pos:end="4187:34">s</name><operator pos:start="4187:35" pos:end="4187:36">-&gt;</operator><name pos:start="4187:37" pos:end="4187:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4189:13" pos:end="4189:46"><expr pos:start="4189:13" pos:end="4189:45"><call pos:start="4189:13" pos:end="4189:45"><name pos:start="4189:13" pos:end="4189:25">gen_op_jmp_im</name><argument_list pos:start="4189:26" pos:end="4189:45">(<argument pos:start="4189:27" pos:end="4189:44"><expr pos:start="4189:27" pos:end="4189:44"><name pos:start="4189:27" pos:end="4189:31"><name pos:start="4189:27" pos:end="4189:27">s</name><operator pos:start="4189:28" pos:end="4189:29">-&gt;</operator><name pos:start="4189:30" pos:end="4189:31">pc</name></name> <operator pos:start="4189:33" pos:end="4189:33">-</operator> <name pos:start="4189:35" pos:end="4189:44"><name pos:start="4189:35" pos:end="4189:35">s</name><operator pos:start="4189:36" pos:end="4189:37">-&gt;</operator><name pos:start="4189:38" pos:end="4189:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4191:13" pos:end="4191:25"><expr pos:start="4191:13" pos:end="4191:24"><call pos:start="4191:13" pos:end="4191:24"><name pos:start="4191:13" pos:end="4191:22">gen_op_hlt</name><argument_list pos:start="4191:23" pos:end="4191:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4193:13" pos:end="4193:26"><expr pos:start="4193:13" pos:end="4193:25"><name pos:start="4193:13" pos:end="4193:21"><name pos:start="4193:13" pos:end="4193:13">s</name><operator pos:start="4193:14" pos:end="4193:15">-&gt;</operator><name pos:start="4193:16" pos:end="4193:21">is_jmp</name></name> <operator pos:start="4193:23" pos:end="4193:23">=</operator> <literal type="number" pos:start="4193:25" pos:end="4193:25">3</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4197:9" pos:end="4197:14">break;</break>

    <case pos:start="4199:5" pos:end="4199:15">case <expr pos:start="4199:10" pos:end="4199:14"><literal type="number" pos:start="4199:10" pos:end="4199:14">0x100</literal></expr>:</case>

        <expr_stmt pos:start="4201:9" pos:end="4201:35"><expr pos:start="4201:9" pos:end="4201:34"><name pos:start="4201:9" pos:end="4201:13">modrm</name> <operator pos:start="4201:15" pos:end="4201:15">=</operator> <call pos:start="4201:17" pos:end="4201:34"><name pos:start="4201:17" pos:end="4201:25">ldub_code</name><argument_list pos:start="4201:26" pos:end="4201:34">(<argument pos:start="4201:27" pos:end="4201:33"><expr pos:start="4201:27" pos:end="4201:33"><name pos:start="4201:27" pos:end="4201:31"><name pos:start="4201:27" pos:end="4201:27">s</name><operator pos:start="4201:28" pos:end="4201:29">-&gt;</operator><name pos:start="4201:30" pos:end="4201:31">pc</name></name><operator pos:start="4201:32" pos:end="4201:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4203:9" pos:end="4203:31"><expr pos:start="4203:9" pos:end="4203:30"><name pos:start="4203:9" pos:end="4203:11">mod</name> <operator pos:start="4203:13" pos:end="4203:13">=</operator> <operator pos:start="4203:15" pos:end="4203:15">(</operator><name pos:start="4203:16" pos:end="4203:20">modrm</name> <operator pos:start="4203:22" pos:end="4203:23">&gt;&gt;</operator> <literal type="number" pos:start="4203:25" pos:end="4203:25">6</literal><operator pos:start="4203:26" pos:end="4203:26">)</operator> <operator pos:start="4203:28" pos:end="4203:28">&amp;</operator> <literal type="number" pos:start="4203:30" pos:end="4203:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4205:9" pos:end="4205:30"><expr pos:start="4205:9" pos:end="4205:29"><name pos:start="4205:9" pos:end="4205:10">op</name> <operator pos:start="4205:12" pos:end="4205:12">=</operator> <operator pos:start="4205:14" pos:end="4205:14">(</operator><name pos:start="4205:15" pos:end="4205:19">modrm</name> <operator pos:start="4205:21" pos:end="4205:22">&gt;&gt;</operator> <literal type="number" pos:start="4205:24" pos:end="4205:24">3</literal><operator pos:start="4205:25" pos:end="4205:25">)</operator> <operator pos:start="4205:27" pos:end="4205:27">&amp;</operator> <literal type="number" pos:start="4205:29" pos:end="4205:29">7</literal></expr>;</expr_stmt>

        <switch pos:start="4207:9" pos:end="4319:9">switch<condition pos:start="4207:15" pos:end="4207:18">(<expr pos:start="4207:16" pos:end="4207:17"><name pos:start="4207:16" pos:end="4207:17">op</name></expr>)</condition> <block pos:start="4207:20" pos:end="4319:9">{<block_content pos:start="4209:9" pos:end="4317:28">

        <case pos:start="4209:9" pos:end="4209:15">case <expr pos:start="4209:14" pos:end="4209:14"><literal type="number" pos:start="4209:14" pos:end="4209:14">0</literal></expr>:</case> <comment type="block" pos:start="4209:17" pos:end="4209:26">/* sldt */</comment>

            <if_stmt pos:start="4211:13" pos:end="4213:32"><if pos:start="4211:13" pos:end="4213:32">if <condition pos:start="4211:16" pos:end="4211:34">(<expr pos:start="4211:17" pos:end="4211:33"><operator pos:start="4211:17" pos:end="4211:17">!</operator><name pos:start="4211:18" pos:end="4211:22"><name pos:start="4211:18" pos:end="4211:18">s</name><operator pos:start="4211:19" pos:end="4211:20">-&gt;</operator><name pos:start="4211:21" pos:end="4211:22">pe</name></name> <operator pos:start="4211:24" pos:end="4211:25">||</operator> <name pos:start="4211:27" pos:end="4211:33"><name pos:start="4211:27" pos:end="4211:27">s</name><operator pos:start="4211:28" pos:end="4211:29">-&gt;</operator><name pos:start="4211:30" pos:end="4211:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="4213:17" pos:end="4213:32"><block_content pos:start="4213:17" pos:end="4213:32">

                <goto pos:start="4213:17" pos:end="4213:32">goto <name pos:start="4213:22" pos:end="4213:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4215:13" pos:end="4215:67"><expr pos:start="4215:13" pos:end="4215:66"><call pos:start="4215:13" pos:end="4215:66"><name pos:start="4215:13" pos:end="4215:30">gen_op_movl_T0_env</name><argument_list pos:start="4215:31" pos:end="4215:66">(<argument pos:start="4215:32" pos:end="4215:65"><expr pos:start="4215:32" pos:end="4215:65"><call pos:start="4215:32" pos:end="4215:65"><name pos:start="4215:32" pos:end="4215:39">offsetof</name><argument_list pos:start="4215:40" pos:end="4215:65">(<argument pos:start="4215:41" pos:end="4215:51"><expr pos:start="4215:41" pos:end="4215:51"><name pos:start="4215:41" pos:end="4215:51">CPUX86State</name></expr></argument>,<argument pos:start="4215:53" pos:end="4215:64"><expr pos:start="4215:53" pos:end="4215:64"><name pos:start="4215:53" pos:end="4215:64"><name pos:start="4215:53" pos:end="4215:55">ldt</name><operator pos:start="4215:56" pos:end="4215:56">.</operator><name pos:start="4215:57" pos:end="4215:64">selector</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4217:13" pos:end="4217:25"><expr pos:start="4217:13" pos:end="4217:24"><name pos:start="4217:13" pos:end="4217:14">ot</name> <operator pos:start="4217:16" pos:end="4217:16">=</operator> <name pos:start="4217:18" pos:end="4217:24">OT_WORD</name></expr>;</expr_stmt>

            <if_stmt pos:start="4219:13" pos:end="4221:31"><if pos:start="4219:13" pos:end="4221:31">if <condition pos:start="4219:16" pos:end="4219:25">(<expr pos:start="4219:17" pos:end="4219:24"><name pos:start="4219:17" pos:end="4219:19">mod</name> <operator pos:start="4219:21" pos:end="4219:22">==</operator> <literal type="number" pos:start="4219:24" pos:end="4219:24">3</literal></expr>)</condition><block type="pseudo" pos:start="4221:17" pos:end="4221:31"><block_content pos:start="4221:17" pos:end="4221:31">

                <expr_stmt pos:start="4221:17" pos:end="4221:31"><expr pos:start="4221:17" pos:end="4221:30"><name pos:start="4221:17" pos:end="4221:18">ot</name> <operator pos:start="4221:20" pos:end="4221:21">+=</operator> <name pos:start="4221:23" pos:end="4221:30"><name pos:start="4221:23" pos:end="4221:23">s</name><operator pos:start="4221:24" pos:end="4221:25">-&gt;</operator><name pos:start="4221:26" pos:end="4221:30">dflag</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4223:13" pos:end="4223:53"><expr pos:start="4223:13" pos:end="4223:52"><call pos:start="4223:13" pos:end="4223:52"><name pos:start="4223:13" pos:end="4223:26">gen_ldst_modrm</name><argument_list pos:start="4223:27" pos:end="4223:52">(<argument pos:start="4223:28" pos:end="4223:28"><expr pos:start="4223:28" pos:end="4223:28"><name pos:start="4223:28" pos:end="4223:28">s</name></expr></argument>, <argument pos:start="4223:31" pos:end="4223:35"><expr pos:start="4223:31" pos:end="4223:35"><name pos:start="4223:31" pos:end="4223:35">modrm</name></expr></argument>, <argument pos:start="4223:38" pos:end="4223:39"><expr pos:start="4223:38" pos:end="4223:39"><name pos:start="4223:38" pos:end="4223:39">ot</name></expr></argument>, <argument pos:start="4223:42" pos:end="4223:48"><expr pos:start="4223:42" pos:end="4223:48"><name pos:start="4223:42" pos:end="4223:48">OR_TMP0</name></expr></argument>, <argument pos:start="4223:51" pos:end="4223:51"><expr pos:start="4223:51" pos:end="4223:51"><literal type="number" pos:start="4223:51" pos:end="4223:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4225:13" pos:end="4225:18">break;</break>

        <case pos:start="4227:9" pos:end="4227:15">case <expr pos:start="4227:14" pos:end="4227:14"><literal type="number" pos:start="4227:14" pos:end="4227:14">2</literal></expr>:</case> <comment type="block" pos:start="4227:17" pos:end="4227:26">/* lldt */</comment>

            <if_stmt pos:start="4229:13" pos:end="4231:32"><if pos:start="4229:13" pos:end="4231:32">if <condition pos:start="4229:16" pos:end="4229:34">(<expr pos:start="4229:17" pos:end="4229:33"><operator pos:start="4229:17" pos:end="4229:17">!</operator><name pos:start="4229:18" pos:end="4229:22"><name pos:start="4229:18" pos:end="4229:18">s</name><operator pos:start="4229:19" pos:end="4229:20">-&gt;</operator><name pos:start="4229:21" pos:end="4229:22">pe</name></name> <operator pos:start="4229:24" pos:end="4229:25">||</operator> <name pos:start="4229:27" pos:end="4229:33"><name pos:start="4229:27" pos:end="4229:27">s</name><operator pos:start="4229:28" pos:end="4229:29">-&gt;</operator><name pos:start="4229:30" pos:end="4229:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="4231:17" pos:end="4231:32"><block_content pos:start="4231:17" pos:end="4231:32">

                <goto pos:start="4231:17" pos:end="4231:32">goto <name pos:start="4231:22" pos:end="4231:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="4233:13" pos:end="4245:13"><if pos:start="4233:13" pos:end="4237:13">if <condition pos:start="4233:16" pos:end="4233:28">(<expr pos:start="4233:17" pos:end="4233:27"><name pos:start="4233:17" pos:end="4233:22"><name pos:start="4233:17" pos:end="4233:17">s</name><operator pos:start="4233:18" pos:end="4233:19">-&gt;</operator><name pos:start="4233:20" pos:end="4233:22">cpl</name></name> <operator pos:start="4233:24" pos:end="4233:25">!=</operator> <literal type="number" pos:start="4233:27" pos:end="4233:27">0</literal></expr>)</condition> <block pos:start="4233:30" pos:end="4237:13">{<block_content pos:start="4235:17" pos:end="4235:68">

                <expr_stmt pos:start="4235:17" pos:end="4235:68"><expr pos:start="4235:17" pos:end="4235:67"><call pos:start="4235:17" pos:end="4235:67"><name pos:start="4235:17" pos:end="4235:29">gen_exception</name><argument_list pos:start="4235:30" pos:end="4235:67">(<argument pos:start="4235:31" pos:end="4235:31"><expr pos:start="4235:31" pos:end="4235:31"><name pos:start="4235:31" pos:end="4235:31">s</name></expr></argument>, <argument pos:start="4235:34" pos:end="4235:43"><expr pos:start="4235:34" pos:end="4235:43"><name pos:start="4235:34" pos:end="4235:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4235:46" pos:end="4235:66"><expr pos:start="4235:46" pos:end="4235:66"><name pos:start="4235:46" pos:end="4235:53">pc_start</name> <operator pos:start="4235:55" pos:end="4235:55">-</operator> <name pos:start="4235:57" pos:end="4235:66"><name pos:start="4235:57" pos:end="4235:57">s</name><operator pos:start="4235:58" pos:end="4235:59">-&gt;</operator><name pos:start="4235:60" pos:end="4235:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4237:15" pos:end="4245:13">else <block pos:start="4237:20" pos:end="4245:13">{<block_content pos:start="4239:17" pos:end="4243:33">

                <expr_stmt pos:start="4239:17" pos:end="4239:62"><expr pos:start="4239:17" pos:end="4239:61"><call pos:start="4239:17" pos:end="4239:61"><name pos:start="4239:17" pos:end="4239:30">gen_ldst_modrm</name><argument_list pos:start="4239:31" pos:end="4239:61">(<argument pos:start="4239:32" pos:end="4239:32"><expr pos:start="4239:32" pos:end="4239:32"><name pos:start="4239:32" pos:end="4239:32">s</name></expr></argument>, <argument pos:start="4239:35" pos:end="4239:39"><expr pos:start="4239:35" pos:end="4239:39"><name pos:start="4239:35" pos:end="4239:39">modrm</name></expr></argument>, <argument pos:start="4239:42" pos:end="4239:48"><expr pos:start="4239:42" pos:end="4239:48"><name pos:start="4239:42" pos:end="4239:48">OT_WORD</name></expr></argument>, <argument pos:start="4239:51" pos:end="4239:57"><expr pos:start="4239:51" pos:end="4239:57"><name pos:start="4239:51" pos:end="4239:57">OR_TMP0</name></expr></argument>, <argument pos:start="4239:60" pos:end="4239:60"><expr pos:start="4239:60" pos:end="4239:60"><literal type="number" pos:start="4239:60" pos:end="4239:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4241:17" pos:end="4241:53"><expr pos:start="4241:17" pos:end="4241:52"><call pos:start="4241:17" pos:end="4241:52"><name pos:start="4241:17" pos:end="4241:29">gen_op_jmp_im</name><argument_list pos:start="4241:30" pos:end="4241:52">(<argument pos:start="4241:31" pos:end="4241:51"><expr pos:start="4241:31" pos:end="4241:51"><name pos:start="4241:31" pos:end="4241:38">pc_start</name> <operator pos:start="4241:40" pos:end="4241:40">-</operator> <name pos:start="4241:42" pos:end="4241:51"><name pos:start="4241:42" pos:end="4241:42">s</name><operator pos:start="4241:43" pos:end="4241:44">-&gt;</operator><name pos:start="4241:45" pos:end="4241:51">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4243:17" pos:end="4243:33"><expr pos:start="4243:17" pos:end="4243:32"><call pos:start="4243:17" pos:end="4243:32"><name pos:start="4243:17" pos:end="4243:30">gen_op_lldt_T0</name><argument_list pos:start="4243:31" pos:end="4243:32">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="4247:13" pos:end="4247:18">break;</break>

        <case pos:start="4249:9" pos:end="4249:15">case <expr pos:start="4249:14" pos:end="4249:14"><literal type="number" pos:start="4249:14" pos:end="4249:14">1</literal></expr>:</case> <comment type="block" pos:start="4249:17" pos:end="4249:25">/* str */</comment>

            <if_stmt pos:start="4251:13" pos:end="4253:32"><if pos:start="4251:13" pos:end="4253:32">if <condition pos:start="4251:16" pos:end="4251:34">(<expr pos:start="4251:17" pos:end="4251:33"><operator pos:start="4251:17" pos:end="4251:17">!</operator><name pos:start="4251:18" pos:end="4251:22"><name pos:start="4251:18" pos:end="4251:18">s</name><operator pos:start="4251:19" pos:end="4251:20">-&gt;</operator><name pos:start="4251:21" pos:end="4251:22">pe</name></name> <operator pos:start="4251:24" pos:end="4251:25">||</operator> <name pos:start="4251:27" pos:end="4251:33"><name pos:start="4251:27" pos:end="4251:27">s</name><operator pos:start="4251:28" pos:end="4251:29">-&gt;</operator><name pos:start="4251:30" pos:end="4251:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="4253:17" pos:end="4253:32"><block_content pos:start="4253:17" pos:end="4253:32">

                <goto pos:start="4253:17" pos:end="4253:32">goto <name pos:start="4253:22" pos:end="4253:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4255:13" pos:end="4255:66"><expr pos:start="4255:13" pos:end="4255:65"><call pos:start="4255:13" pos:end="4255:65"><name pos:start="4255:13" pos:end="4255:30">gen_op_movl_T0_env</name><argument_list pos:start="4255:31" pos:end="4255:65">(<argument pos:start="4255:32" pos:end="4255:64"><expr pos:start="4255:32" pos:end="4255:64"><call pos:start="4255:32" pos:end="4255:64"><name pos:start="4255:32" pos:end="4255:39">offsetof</name><argument_list pos:start="4255:40" pos:end="4255:64">(<argument pos:start="4255:41" pos:end="4255:51"><expr pos:start="4255:41" pos:end="4255:51"><name pos:start="4255:41" pos:end="4255:51">CPUX86State</name></expr></argument>,<argument pos:start="4255:53" pos:end="4255:63"><expr pos:start="4255:53" pos:end="4255:63"><name pos:start="4255:53" pos:end="4255:63"><name pos:start="4255:53" pos:end="4255:54">tr</name><operator pos:start="4255:55" pos:end="4255:55">.</operator><name pos:start="4255:56" pos:end="4255:63">selector</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4257:13" pos:end="4257:25"><expr pos:start="4257:13" pos:end="4257:24"><name pos:start="4257:13" pos:end="4257:14">ot</name> <operator pos:start="4257:16" pos:end="4257:16">=</operator> <name pos:start="4257:18" pos:end="4257:24">OT_WORD</name></expr>;</expr_stmt>

            <if_stmt pos:start="4259:13" pos:end="4261:31"><if pos:start="4259:13" pos:end="4261:31">if <condition pos:start="4259:16" pos:end="4259:25">(<expr pos:start="4259:17" pos:end="4259:24"><name pos:start="4259:17" pos:end="4259:19">mod</name> <operator pos:start="4259:21" pos:end="4259:22">==</operator> <literal type="number" pos:start="4259:24" pos:end="4259:24">3</literal></expr>)</condition><block type="pseudo" pos:start="4261:17" pos:end="4261:31"><block_content pos:start="4261:17" pos:end="4261:31">

                <expr_stmt pos:start="4261:17" pos:end="4261:31"><expr pos:start="4261:17" pos:end="4261:30"><name pos:start="4261:17" pos:end="4261:18">ot</name> <operator pos:start="4261:20" pos:end="4261:21">+=</operator> <name pos:start="4261:23" pos:end="4261:30"><name pos:start="4261:23" pos:end="4261:23">s</name><operator pos:start="4261:24" pos:end="4261:25">-&gt;</operator><name pos:start="4261:26" pos:end="4261:30">dflag</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4263:13" pos:end="4263:53"><expr pos:start="4263:13" pos:end="4263:52"><call pos:start="4263:13" pos:end="4263:52"><name pos:start="4263:13" pos:end="4263:26">gen_ldst_modrm</name><argument_list pos:start="4263:27" pos:end="4263:52">(<argument pos:start="4263:28" pos:end="4263:28"><expr pos:start="4263:28" pos:end="4263:28"><name pos:start="4263:28" pos:end="4263:28">s</name></expr></argument>, <argument pos:start="4263:31" pos:end="4263:35"><expr pos:start="4263:31" pos:end="4263:35"><name pos:start="4263:31" pos:end="4263:35">modrm</name></expr></argument>, <argument pos:start="4263:38" pos:end="4263:39"><expr pos:start="4263:38" pos:end="4263:39"><name pos:start="4263:38" pos:end="4263:39">ot</name></expr></argument>, <argument pos:start="4263:42" pos:end="4263:48"><expr pos:start="4263:42" pos:end="4263:48"><name pos:start="4263:42" pos:end="4263:48">OR_TMP0</name></expr></argument>, <argument pos:start="4263:51" pos:end="4263:51"><expr pos:start="4263:51" pos:end="4263:51"><literal type="number" pos:start="4263:51" pos:end="4263:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4265:13" pos:end="4265:18">break;</break>

        <case pos:start="4267:9" pos:end="4267:15">case <expr pos:start="4267:14" pos:end="4267:14"><literal type="number" pos:start="4267:14" pos:end="4267:14">3</literal></expr>:</case> <comment type="block" pos:start="4267:17" pos:end="4267:25">/* ltr */</comment>

            <if_stmt pos:start="4269:13" pos:end="4271:32"><if pos:start="4269:13" pos:end="4271:32">if <condition pos:start="4269:16" pos:end="4269:34">(<expr pos:start="4269:17" pos:end="4269:33"><operator pos:start="4269:17" pos:end="4269:17">!</operator><name pos:start="4269:18" pos:end="4269:22"><name pos:start="4269:18" pos:end="4269:18">s</name><operator pos:start="4269:19" pos:end="4269:20">-&gt;</operator><name pos:start="4269:21" pos:end="4269:22">pe</name></name> <operator pos:start="4269:24" pos:end="4269:25">||</operator> <name pos:start="4269:27" pos:end="4269:33"><name pos:start="4269:27" pos:end="4269:27">s</name><operator pos:start="4269:28" pos:end="4269:29">-&gt;</operator><name pos:start="4269:30" pos:end="4269:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="4271:17" pos:end="4271:32"><block_content pos:start="4271:17" pos:end="4271:32">

                <goto pos:start="4271:17" pos:end="4271:32">goto <name pos:start="4271:22" pos:end="4271:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="4273:13" pos:end="4285:13"><if pos:start="4273:13" pos:end="4277:13">if <condition pos:start="4273:16" pos:end="4273:28">(<expr pos:start="4273:17" pos:end="4273:27"><name pos:start="4273:17" pos:end="4273:22"><name pos:start="4273:17" pos:end="4273:17">s</name><operator pos:start="4273:18" pos:end="4273:19">-&gt;</operator><name pos:start="4273:20" pos:end="4273:22">cpl</name></name> <operator pos:start="4273:24" pos:end="4273:25">!=</operator> <literal type="number" pos:start="4273:27" pos:end="4273:27">0</literal></expr>)</condition> <block pos:start="4273:30" pos:end="4277:13">{<block_content pos:start="4275:17" pos:end="4275:68">

                <expr_stmt pos:start="4275:17" pos:end="4275:68"><expr pos:start="4275:17" pos:end="4275:67"><call pos:start="4275:17" pos:end="4275:67"><name pos:start="4275:17" pos:end="4275:29">gen_exception</name><argument_list pos:start="4275:30" pos:end="4275:67">(<argument pos:start="4275:31" pos:end="4275:31"><expr pos:start="4275:31" pos:end="4275:31"><name pos:start="4275:31" pos:end="4275:31">s</name></expr></argument>, <argument pos:start="4275:34" pos:end="4275:43"><expr pos:start="4275:34" pos:end="4275:43"><name pos:start="4275:34" pos:end="4275:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4275:46" pos:end="4275:66"><expr pos:start="4275:46" pos:end="4275:66"><name pos:start="4275:46" pos:end="4275:53">pc_start</name> <operator pos:start="4275:55" pos:end="4275:55">-</operator> <name pos:start="4275:57" pos:end="4275:66"><name pos:start="4275:57" pos:end="4275:57">s</name><operator pos:start="4275:58" pos:end="4275:59">-&gt;</operator><name pos:start="4275:60" pos:end="4275:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4277:15" pos:end="4285:13">else <block pos:start="4277:20" pos:end="4285:13">{<block_content pos:start="4279:17" pos:end="4283:32">

                <expr_stmt pos:start="4279:17" pos:end="4279:62"><expr pos:start="4279:17" pos:end="4279:61"><call pos:start="4279:17" pos:end="4279:61"><name pos:start="4279:17" pos:end="4279:30">gen_ldst_modrm</name><argument_list pos:start="4279:31" pos:end="4279:61">(<argument pos:start="4279:32" pos:end="4279:32"><expr pos:start="4279:32" pos:end="4279:32"><name pos:start="4279:32" pos:end="4279:32">s</name></expr></argument>, <argument pos:start="4279:35" pos:end="4279:39"><expr pos:start="4279:35" pos:end="4279:39"><name pos:start="4279:35" pos:end="4279:39">modrm</name></expr></argument>, <argument pos:start="4279:42" pos:end="4279:48"><expr pos:start="4279:42" pos:end="4279:48"><name pos:start="4279:42" pos:end="4279:48">OT_WORD</name></expr></argument>, <argument pos:start="4279:51" pos:end="4279:57"><expr pos:start="4279:51" pos:end="4279:57"><name pos:start="4279:51" pos:end="4279:57">OR_TMP0</name></expr></argument>, <argument pos:start="4279:60" pos:end="4279:60"><expr pos:start="4279:60" pos:end="4279:60"><literal type="number" pos:start="4279:60" pos:end="4279:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4281:17" pos:end="4281:53"><expr pos:start="4281:17" pos:end="4281:52"><call pos:start="4281:17" pos:end="4281:52"><name pos:start="4281:17" pos:end="4281:29">gen_op_jmp_im</name><argument_list pos:start="4281:30" pos:end="4281:52">(<argument pos:start="4281:31" pos:end="4281:51"><expr pos:start="4281:31" pos:end="4281:51"><name pos:start="4281:31" pos:end="4281:38">pc_start</name> <operator pos:start="4281:40" pos:end="4281:40">-</operator> <name pos:start="4281:42" pos:end="4281:51"><name pos:start="4281:42" pos:end="4281:42">s</name><operator pos:start="4281:43" pos:end="4281:44">-&gt;</operator><name pos:start="4281:45" pos:end="4281:51">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4283:17" pos:end="4283:32"><expr pos:start="4283:17" pos:end="4283:31"><call pos:start="4283:17" pos:end="4283:31"><name pos:start="4283:17" pos:end="4283:29">gen_op_ltr_T0</name><argument_list pos:start="4283:30" pos:end="4283:31">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="4287:13" pos:end="4287:18">break;</break>

        <case pos:start="4289:9" pos:end="4289:15">case <expr pos:start="4289:14" pos:end="4289:14"><literal type="number" pos:start="4289:14" pos:end="4289:14">4</literal></expr>:</case> <comment type="block" pos:start="4289:17" pos:end="4289:26">/* verr */</comment>

        <case pos:start="4291:9" pos:end="4291:15">case <expr pos:start="4291:14" pos:end="4291:14"><literal type="number" pos:start="4291:14" pos:end="4291:14">5</literal></expr>:</case> <comment type="block" pos:start="4291:17" pos:end="4291:26">/* verw */</comment>

            <if_stmt pos:start="4293:13" pos:end="4295:32"><if pos:start="4293:13" pos:end="4295:32">if <condition pos:start="4293:16" pos:end="4293:34">(<expr pos:start="4293:17" pos:end="4293:33"><operator pos:start="4293:17" pos:end="4293:17">!</operator><name pos:start="4293:18" pos:end="4293:22"><name pos:start="4293:18" pos:end="4293:18">s</name><operator pos:start="4293:19" pos:end="4293:20">-&gt;</operator><name pos:start="4293:21" pos:end="4293:22">pe</name></name> <operator pos:start="4293:24" pos:end="4293:25">||</operator> <name pos:start="4293:27" pos:end="4293:33"><name pos:start="4293:27" pos:end="4293:27">s</name><operator pos:start="4293:28" pos:end="4293:29">-&gt;</operator><name pos:start="4293:30" pos:end="4293:33">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="4295:17" pos:end="4295:32"><block_content pos:start="4295:17" pos:end="4295:32">

                <goto pos:start="4295:17" pos:end="4295:32">goto <name pos:start="4295:22" pos:end="4295:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4297:13" pos:end="4297:58"><expr pos:start="4297:13" pos:end="4297:57"><call pos:start="4297:13" pos:end="4297:57"><name pos:start="4297:13" pos:end="4297:26">gen_ldst_modrm</name><argument_list pos:start="4297:27" pos:end="4297:57">(<argument pos:start="4297:28" pos:end="4297:28"><expr pos:start="4297:28" pos:end="4297:28"><name pos:start="4297:28" pos:end="4297:28">s</name></expr></argument>, <argument pos:start="4297:31" pos:end="4297:35"><expr pos:start="4297:31" pos:end="4297:35"><name pos:start="4297:31" pos:end="4297:35">modrm</name></expr></argument>, <argument pos:start="4297:38" pos:end="4297:44"><expr pos:start="4297:38" pos:end="4297:44"><name pos:start="4297:38" pos:end="4297:44">OT_WORD</name></expr></argument>, <argument pos:start="4297:47" pos:end="4297:53"><expr pos:start="4297:47" pos:end="4297:53"><name pos:start="4297:47" pos:end="4297:53">OR_TMP0</name></expr></argument>, <argument pos:start="4297:56" pos:end="4297:56"><expr pos:start="4297:56" pos:end="4297:56"><literal type="number" pos:start="4297:56" pos:end="4297:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4299:13" pos:end="4301:43"><if pos:start="4299:13" pos:end="4301:43">if <condition pos:start="4299:16" pos:end="4299:42">(<expr pos:start="4299:17" pos:end="4299:41"><name pos:start="4299:17" pos:end="4299:24"><name pos:start="4299:17" pos:end="4299:17">s</name><operator pos:start="4299:18" pos:end="4299:19">-&gt;</operator><name pos:start="4299:20" pos:end="4299:24">cc_op</name></name> <operator pos:start="4299:26" pos:end="4299:27">!=</operator> <name pos:start="4299:29" pos:end="4299:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4301:17" pos:end="4301:43"><block_content pos:start="4301:17" pos:end="4301:43">

                <expr_stmt pos:start="4301:17" pos:end="4301:43"><expr pos:start="4301:17" pos:end="4301:42"><call pos:start="4301:17" pos:end="4301:42"><name pos:start="4301:17" pos:end="4301:32">gen_op_set_cc_op</name><argument_list pos:start="4301:33" pos:end="4301:42">(<argument pos:start="4301:34" pos:end="4301:41"><expr pos:start="4301:34" pos:end="4301:41"><name pos:start="4301:34" pos:end="4301:41"><name pos:start="4301:34" pos:end="4301:34">s</name><operator pos:start="4301:35" pos:end="4301:36">-&gt;</operator><name pos:start="4301:37" pos:end="4301:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="4303:13" pos:end="4309:30"><if pos:start="4303:13" pos:end="4305:30">if <condition pos:start="4303:16" pos:end="4303:24">(<expr pos:start="4303:17" pos:end="4303:23"><name pos:start="4303:17" pos:end="4303:18">op</name> <operator pos:start="4303:20" pos:end="4303:21">==</operator> <literal type="number" pos:start="4303:23" pos:end="4303:23">4</literal></expr>)</condition><block type="pseudo" pos:start="4305:17" pos:end="4305:30"><block_content pos:start="4305:17" pos:end="4305:30">

                <expr_stmt pos:start="4305:17" pos:end="4305:30"><expr pos:start="4305:17" pos:end="4305:29"><call pos:start="4305:17" pos:end="4305:29"><name pos:start="4305:17" pos:end="4305:27">gen_op_verr</name><argument_list pos:start="4305:28" pos:end="4305:29">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="4307:13" pos:end="4309:30">else<block type="pseudo" pos:start="4309:17" pos:end="4309:30"><block_content pos:start="4309:17" pos:end="4309:30">

                <expr_stmt pos:start="4309:17" pos:end="4309:30"><expr pos:start="4309:17" pos:end="4309:29"><call pos:start="4309:17" pos:end="4309:29"><name pos:start="4309:17" pos:end="4309:27">gen_op_verw</name><argument_list pos:start="4309:28" pos:end="4309:29">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="4311:13" pos:end="4311:36"><expr pos:start="4311:13" pos:end="4311:35"><name pos:start="4311:13" pos:end="4311:20"><name pos:start="4311:13" pos:end="4311:13">s</name><operator pos:start="4311:14" pos:end="4311:15">-&gt;</operator><name pos:start="4311:16" pos:end="4311:20">cc_op</name></name> <operator pos:start="4311:22" pos:end="4311:22">=</operator> <name pos:start="4311:24" pos:end="4311:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            <break pos:start="4313:13" pos:end="4313:18">break;</break>

        <default pos:start="4315:9" pos:end="4315:16">default:</default>

            <goto pos:start="4317:13" pos:end="4317:28">goto <name pos:start="4317:18" pos:end="4317:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="4321:9" pos:end="4321:14">break;</break>

    <case pos:start="4323:5" pos:end="4323:15">case <expr pos:start="4323:10" pos:end="4323:14"><literal type="number" pos:start="4323:10" pos:end="4323:14">0x101</literal></expr>:</case>

        <expr_stmt pos:start="4325:9" pos:end="4325:35"><expr pos:start="4325:9" pos:end="4325:34"><name pos:start="4325:9" pos:end="4325:13">modrm</name> <operator pos:start="4325:15" pos:end="4325:15">=</operator> <call pos:start="4325:17" pos:end="4325:34"><name pos:start="4325:17" pos:end="4325:25">ldub_code</name><argument_list pos:start="4325:26" pos:end="4325:34">(<argument pos:start="4325:27" pos:end="4325:33"><expr pos:start="4325:27" pos:end="4325:33"><name pos:start="4325:27" pos:end="4325:31"><name pos:start="4325:27" pos:end="4325:27">s</name><operator pos:start="4325:28" pos:end="4325:29">-&gt;</operator><name pos:start="4325:30" pos:end="4325:31">pc</name></name><operator pos:start="4325:32" pos:end="4325:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4327:9" pos:end="4327:31"><expr pos:start="4327:9" pos:end="4327:30"><name pos:start="4327:9" pos:end="4327:11">mod</name> <operator pos:start="4327:13" pos:end="4327:13">=</operator> <operator pos:start="4327:15" pos:end="4327:15">(</operator><name pos:start="4327:16" pos:end="4327:20">modrm</name> <operator pos:start="4327:22" pos:end="4327:23">&gt;&gt;</operator> <literal type="number" pos:start="4327:25" pos:end="4327:25">6</literal><operator pos:start="4327:26" pos:end="4327:26">)</operator> <operator pos:start="4327:28" pos:end="4327:28">&amp;</operator> <literal type="number" pos:start="4327:30" pos:end="4327:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4329:9" pos:end="4329:30"><expr pos:start="4329:9" pos:end="4329:29"><name pos:start="4329:9" pos:end="4329:10">op</name> <operator pos:start="4329:12" pos:end="4329:12">=</operator> <operator pos:start="4329:14" pos:end="4329:14">(</operator><name pos:start="4329:15" pos:end="4329:19">modrm</name> <operator pos:start="4329:21" pos:end="4329:22">&gt;&gt;</operator> <literal type="number" pos:start="4329:24" pos:end="4329:24">3</literal><operator pos:start="4329:25" pos:end="4329:25">)</operator> <operator pos:start="4329:27" pos:end="4329:27">&amp;</operator> <literal type="number" pos:start="4329:29" pos:end="4329:29">7</literal></expr>;</expr_stmt>

        <switch pos:start="4331:9" pos:end="4471:9">switch<condition pos:start="4331:15" pos:end="4331:18">(<expr pos:start="4331:16" pos:end="4331:17"><name pos:start="4331:16" pos:end="4331:17">op</name></expr>)</condition> <block pos:start="4331:20" pos:end="4471:9">{<block_content pos:start="4333:9" pos:end="4469:28">

        <case pos:start="4333:9" pos:end="4333:15">case <expr pos:start="4333:14" pos:end="4333:14"><literal type="number" pos:start="4333:14" pos:end="4333:14">0</literal></expr>:</case> <comment type="block" pos:start="4333:17" pos:end="4333:26">/* sgdt */</comment>

        <case pos:start="4335:9" pos:end="4335:15">case <expr pos:start="4335:14" pos:end="4335:14"><literal type="number" pos:start="4335:14" pos:end="4335:14">1</literal></expr>:</case> <comment type="block" pos:start="4335:17" pos:end="4335:26">/* sidt */</comment>

            <if_stmt pos:start="4337:13" pos:end="4339:32"><if pos:start="4337:13" pos:end="4339:32">if <condition pos:start="4337:16" pos:end="4337:25">(<expr pos:start="4337:17" pos:end="4337:24"><name pos:start="4337:17" pos:end="4337:19">mod</name> <operator pos:start="4337:21" pos:end="4337:22">==</operator> <literal type="number" pos:start="4337:24" pos:end="4337:24">3</literal></expr>)</condition><block type="pseudo" pos:start="4339:17" pos:end="4339:32"><block_content pos:start="4339:17" pos:end="4339:32">

                <goto pos:start="4339:17" pos:end="4339:32">goto <name pos:start="4339:22" pos:end="4339:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4341:13" pos:end="4341:61"><expr pos:start="4341:13" pos:end="4341:60"><call pos:start="4341:13" pos:end="4341:60"><name pos:start="4341:13" pos:end="4341:25">gen_lea_modrm</name><argument_list pos:start="4341:26" pos:end="4341:60">(<argument pos:start="4341:27" pos:end="4341:27"><expr pos:start="4341:27" pos:end="4341:27"><name pos:start="4341:27" pos:end="4341:27">s</name></expr></argument>, <argument pos:start="4341:30" pos:end="4341:34"><expr pos:start="4341:30" pos:end="4341:34"><name pos:start="4341:30" pos:end="4341:34">modrm</name></expr></argument>, <argument pos:start="4341:37" pos:end="4341:45"><expr pos:start="4341:37" pos:end="4341:45"><operator pos:start="4341:37" pos:end="4341:37">&amp;</operator><name pos:start="4341:38" pos:end="4341:45">reg_addr</name></expr></argument>, <argument pos:start="4341:48" pos:end="4341:59"><expr pos:start="4341:48" pos:end="4341:59"><operator pos:start="4341:48" pos:end="4341:48">&amp;</operator><name pos:start="4341:49" pos:end="4341:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4343:13" pos:end="4349:68"><if pos:start="4343:13" pos:end="4345:68">if <condition pos:start="4343:16" pos:end="4343:24">(<expr pos:start="4343:17" pos:end="4343:23"><name pos:start="4343:17" pos:end="4343:18">op</name> <operator pos:start="4343:20" pos:end="4343:21">==</operator> <literal type="number" pos:start="4343:23" pos:end="4343:23">0</literal></expr>)</condition><block type="pseudo" pos:start="4345:17" pos:end="4345:68"><block_content pos:start="4345:17" pos:end="4345:68">

                <expr_stmt pos:start="4345:17" pos:end="4345:68"><expr pos:start="4345:17" pos:end="4345:67"><call pos:start="4345:17" pos:end="4345:67"><name pos:start="4345:17" pos:end="4345:34">gen_op_movl_T0_env</name><argument_list pos:start="4345:35" pos:end="4345:67">(<argument pos:start="4345:36" pos:end="4345:66"><expr pos:start="4345:36" pos:end="4345:66"><call pos:start="4345:36" pos:end="4345:66"><name pos:start="4345:36" pos:end="4345:43">offsetof</name><argument_list pos:start="4345:44" pos:end="4345:66">(<argument pos:start="4345:45" pos:end="4345:55"><expr pos:start="4345:45" pos:end="4345:55"><name pos:start="4345:45" pos:end="4345:55">CPUX86State</name></expr></argument>,<argument pos:start="4345:57" pos:end="4345:65"><expr pos:start="4345:57" pos:end="4345:65"><name pos:start="4345:57" pos:end="4345:65"><name pos:start="4345:57" pos:end="4345:59">gdt</name><operator pos:start="4345:60" pos:end="4345:60">.</operator><name pos:start="4345:61" pos:end="4345:65">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="4347:13" pos:end="4349:68">else<block type="pseudo" pos:start="4349:17" pos:end="4349:68"><block_content pos:start="4349:17" pos:end="4349:68">

                <expr_stmt pos:start="4349:17" pos:end="4349:68"><expr pos:start="4349:17" pos:end="4349:67"><call pos:start="4349:17" pos:end="4349:67"><name pos:start="4349:17" pos:end="4349:34">gen_op_movl_T0_env</name><argument_list pos:start="4349:35" pos:end="4349:67">(<argument pos:start="4349:36" pos:end="4349:66"><expr pos:start="4349:36" pos:end="4349:66"><call pos:start="4349:36" pos:end="4349:66"><name pos:start="4349:36" pos:end="4349:43">offsetof</name><argument_list pos:start="4349:44" pos:end="4349:66">(<argument pos:start="4349:45" pos:end="4349:55"><expr pos:start="4349:45" pos:end="4349:55"><name pos:start="4349:45" pos:end="4349:55">CPUX86State</name></expr></argument>,<argument pos:start="4349:57" pos:end="4349:65"><expr pos:start="4349:57" pos:end="4349:65"><name pos:start="4349:57" pos:end="4349:65"><name pos:start="4349:57" pos:end="4349:59">idt</name><operator pos:start="4349:60" pos:end="4349:60">.</operator><name pos:start="4349:61" pos:end="4349:65">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="4351:13" pos:end="4351:54"><expr pos:start="4351:13" pos:end="4351:53"><name pos:start="4351:13" pos:end="4351:51"><name pos:start="4351:13" pos:end="4351:27">gen_op_st_T0_A0</name><index pos:start="4351:28" pos:end="4351:51">[<expr pos:start="4351:29" pos:end="4351:50"><name pos:start="4351:29" pos:end="4351:35">OT_WORD</name> <operator pos:start="4351:37" pos:end="4351:37">+</operator> <name pos:start="4351:39" pos:end="4351:50"><name pos:start="4351:39" pos:end="4351:39">s</name><operator pos:start="4351:40" pos:end="4351:41">-&gt;</operator><name pos:start="4351:42" pos:end="4351:50">mem_index</name></name></expr>]</index></name><operator pos:start="4351:52" pos:end="4351:52">(</operator><operator pos:start="4351:53" pos:end="4351:53">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="4353:13" pos:end="4353:33"><expr pos:start="4353:13" pos:end="4353:32"><call pos:start="4353:13" pos:end="4353:32"><name pos:start="4353:13" pos:end="4353:29">gen_op_addl_A0_im</name><argument_list pos:start="4353:30" pos:end="4353:32">(<argument pos:start="4353:31" pos:end="4353:31"><expr pos:start="4353:31" pos:end="4353:31"><literal type="number" pos:start="4353:31" pos:end="4353:31">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4355:13" pos:end="4361:67"><if pos:start="4355:13" pos:end="4357:67">if <condition pos:start="4355:16" pos:end="4355:24">(<expr pos:start="4355:17" pos:end="4355:23"><name pos:start="4355:17" pos:end="4355:18">op</name> <operator pos:start="4355:20" pos:end="4355:21">==</operator> <literal type="number" pos:start="4355:23" pos:end="4355:23">0</literal></expr>)</condition><block type="pseudo" pos:start="4357:17" pos:end="4357:67"><block_content pos:start="4357:17" pos:end="4357:67">

                <expr_stmt pos:start="4357:17" pos:end="4357:67"><expr pos:start="4357:17" pos:end="4357:66"><call pos:start="4357:17" pos:end="4357:66"><name pos:start="4357:17" pos:end="4357:34">gen_op_movl_T0_env</name><argument_list pos:start="4357:35" pos:end="4357:66">(<argument pos:start="4357:36" pos:end="4357:65"><expr pos:start="4357:36" pos:end="4357:65"><call pos:start="4357:36" pos:end="4357:65"><name pos:start="4357:36" pos:end="4357:43">offsetof</name><argument_list pos:start="4357:44" pos:end="4357:65">(<argument pos:start="4357:45" pos:end="4357:55"><expr pos:start="4357:45" pos:end="4357:55"><name pos:start="4357:45" pos:end="4357:55">CPUX86State</name></expr></argument>,<argument pos:start="4357:57" pos:end="4357:64"><expr pos:start="4357:57" pos:end="4357:64"><name pos:start="4357:57" pos:end="4357:64"><name pos:start="4357:57" pos:end="4357:59">gdt</name><operator pos:start="4357:60" pos:end="4357:60">.</operator><name pos:start="4357:61" pos:end="4357:64">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="4359:13" pos:end="4361:67">else<block type="pseudo" pos:start="4361:17" pos:end="4361:67"><block_content pos:start="4361:17" pos:end="4361:67">

                <expr_stmt pos:start="4361:17" pos:end="4361:67"><expr pos:start="4361:17" pos:end="4361:66"><call pos:start="4361:17" pos:end="4361:66"><name pos:start="4361:17" pos:end="4361:34">gen_op_movl_T0_env</name><argument_list pos:start="4361:35" pos:end="4361:66">(<argument pos:start="4361:36" pos:end="4361:65"><expr pos:start="4361:36" pos:end="4361:65"><call pos:start="4361:36" pos:end="4361:65"><name pos:start="4361:36" pos:end="4361:43">offsetof</name><argument_list pos:start="4361:44" pos:end="4361:65">(<argument pos:start="4361:45" pos:end="4361:55"><expr pos:start="4361:45" pos:end="4361:55"><name pos:start="4361:45" pos:end="4361:55">CPUX86State</name></expr></argument>,<argument pos:start="4361:57" pos:end="4361:64"><expr pos:start="4361:57" pos:end="4361:64"><name pos:start="4361:57" pos:end="4361:64"><name pos:start="4361:57" pos:end="4361:59">idt</name><operator pos:start="4361:60" pos:end="4361:60">.</operator><name pos:start="4361:61" pos:end="4361:64">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="4363:13" pos:end="4365:44"><if pos:start="4363:13" pos:end="4365:44">if <condition pos:start="4363:16" pos:end="4363:26">(<expr pos:start="4363:17" pos:end="4363:25"><operator pos:start="4363:17" pos:end="4363:17">!</operator><name pos:start="4363:18" pos:end="4363:25"><name pos:start="4363:18" pos:end="4363:18">s</name><operator pos:start="4363:19" pos:end="4363:20">-&gt;</operator><name pos:start="4363:21" pos:end="4363:25">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="4365:17" pos:end="4365:44"><block_content pos:start="4365:17" pos:end="4365:44">

                <expr_stmt pos:start="4365:17" pos:end="4365:44"><expr pos:start="4365:17" pos:end="4365:43"><call pos:start="4365:17" pos:end="4365:43"><name pos:start="4365:17" pos:end="4365:33">gen_op_andl_T0_im</name><argument_list pos:start="4365:34" pos:end="4365:43">(<argument pos:start="4365:35" pos:end="4365:42"><expr pos:start="4365:35" pos:end="4365:42"><literal type="number" pos:start="4365:35" pos:end="4365:42">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4367:13" pos:end="4367:54"><expr pos:start="4367:13" pos:end="4367:53"><name pos:start="4367:13" pos:end="4367:51"><name pos:start="4367:13" pos:end="4367:27">gen_op_st_T0_A0</name><index pos:start="4367:28" pos:end="4367:51">[<expr pos:start="4367:29" pos:end="4367:50"><name pos:start="4367:29" pos:end="4367:35">OT_LONG</name> <operator pos:start="4367:37" pos:end="4367:37">+</operator> <name pos:start="4367:39" pos:end="4367:50"><name pos:start="4367:39" pos:end="4367:39">s</name><operator pos:start="4367:40" pos:end="4367:41">-&gt;</operator><name pos:start="4367:42" pos:end="4367:50">mem_index</name></name></expr>]</index></name><operator pos:start="4367:52" pos:end="4367:52">(</operator><operator pos:start="4367:53" pos:end="4367:53">)</operator></expr>;</expr_stmt>

            <break pos:start="4369:13" pos:end="4369:18">break;</break>

        <case pos:start="4371:9" pos:end="4371:15">case <expr pos:start="4371:14" pos:end="4371:14"><literal type="number" pos:start="4371:14" pos:end="4371:14">2</literal></expr>:</case> <comment type="block" pos:start="4371:17" pos:end="4371:26">/* lgdt */</comment>

        <case pos:start="4373:9" pos:end="4373:15">case <expr pos:start="4373:14" pos:end="4373:14"><literal type="number" pos:start="4373:14" pos:end="4373:14">3</literal></expr>:</case> <comment type="block" pos:start="4373:17" pos:end="4373:26">/* lidt */</comment>

            <if_stmt pos:start="4375:13" pos:end="4377:32"><if pos:start="4375:13" pos:end="4377:32">if <condition pos:start="4375:16" pos:end="4375:25">(<expr pos:start="4375:17" pos:end="4375:24"><name pos:start="4375:17" pos:end="4375:19">mod</name> <operator pos:start="4375:21" pos:end="4375:22">==</operator> <literal type="number" pos:start="4375:24" pos:end="4375:24">3</literal></expr>)</condition><block type="pseudo" pos:start="4377:17" pos:end="4377:32"><block_content pos:start="4377:17" pos:end="4377:32">

                <goto pos:start="4377:17" pos:end="4377:32">goto <name pos:start="4377:22" pos:end="4377:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="4379:13" pos:end="4411:13"><if pos:start="4379:13" pos:end="4383:13">if <condition pos:start="4379:16" pos:end="4379:28">(<expr pos:start="4379:17" pos:end="4379:27"><name pos:start="4379:17" pos:end="4379:22"><name pos:start="4379:17" pos:end="4379:17">s</name><operator pos:start="4379:18" pos:end="4379:19">-&gt;</operator><name pos:start="4379:20" pos:end="4379:22">cpl</name></name> <operator pos:start="4379:24" pos:end="4379:25">!=</operator> <literal type="number" pos:start="4379:27" pos:end="4379:27">0</literal></expr>)</condition> <block pos:start="4379:30" pos:end="4383:13">{<block_content pos:start="4381:17" pos:end="4381:68">

                <expr_stmt pos:start="4381:17" pos:end="4381:68"><expr pos:start="4381:17" pos:end="4381:67"><call pos:start="4381:17" pos:end="4381:67"><name pos:start="4381:17" pos:end="4381:29">gen_exception</name><argument_list pos:start="4381:30" pos:end="4381:67">(<argument pos:start="4381:31" pos:end="4381:31"><expr pos:start="4381:31" pos:end="4381:31"><name pos:start="4381:31" pos:end="4381:31">s</name></expr></argument>, <argument pos:start="4381:34" pos:end="4381:43"><expr pos:start="4381:34" pos:end="4381:43"><name pos:start="4381:34" pos:end="4381:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4381:46" pos:end="4381:66"><expr pos:start="4381:46" pos:end="4381:66"><name pos:start="4381:46" pos:end="4381:53">pc_start</name> <operator pos:start="4381:55" pos:end="4381:55">-</operator> <name pos:start="4381:57" pos:end="4381:66"><name pos:start="4381:57" pos:end="4381:57">s</name><operator pos:start="4381:58" pos:end="4381:59">-&gt;</operator><name pos:start="4381:60" pos:end="4381:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4383:15" pos:end="4411:13">else <block pos:start="4383:20" pos:end="4411:13">{<block_content pos:start="4385:17" pos:end="4409:17">

                <expr_stmt pos:start="4385:17" pos:end="4385:65"><expr pos:start="4385:17" pos:end="4385:64"><call pos:start="4385:17" pos:end="4385:64"><name pos:start="4385:17" pos:end="4385:29">gen_lea_modrm</name><argument_list pos:start="4385:30" pos:end="4385:64">(<argument pos:start="4385:31" pos:end="4385:31"><expr pos:start="4385:31" pos:end="4385:31"><name pos:start="4385:31" pos:end="4385:31">s</name></expr></argument>, <argument pos:start="4385:34" pos:end="4385:38"><expr pos:start="4385:34" pos:end="4385:38"><name pos:start="4385:34" pos:end="4385:38">modrm</name></expr></argument>, <argument pos:start="4385:41" pos:end="4385:49"><expr pos:start="4385:41" pos:end="4385:49"><operator pos:start="4385:41" pos:end="4385:41">&amp;</operator><name pos:start="4385:42" pos:end="4385:49">reg_addr</name></expr></argument>, <argument pos:start="4385:52" pos:end="4385:63"><expr pos:start="4385:52" pos:end="4385:63"><operator pos:start="4385:52" pos:end="4385:52">&amp;</operator><name pos:start="4385:53" pos:end="4385:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4387:17" pos:end="4387:58"><expr pos:start="4387:17" pos:end="4387:57"><name pos:start="4387:17" pos:end="4387:55"><name pos:start="4387:17" pos:end="4387:31">gen_op_ld_T1_A0</name><index pos:start="4387:32" pos:end="4387:55">[<expr pos:start="4387:33" pos:end="4387:54"><name pos:start="4387:33" pos:end="4387:39">OT_WORD</name> <operator pos:start="4387:41" pos:end="4387:41">+</operator> <name pos:start="4387:43" pos:end="4387:54"><name pos:start="4387:43" pos:end="4387:43">s</name><operator pos:start="4387:44" pos:end="4387:45">-&gt;</operator><name pos:start="4387:46" pos:end="4387:54">mem_index</name></name></expr>]</index></name><operator pos:start="4387:56" pos:end="4387:56">(</operator><operator pos:start="4387:57" pos:end="4387:57">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="4389:17" pos:end="4389:37"><expr pos:start="4389:17" pos:end="4389:36"><call pos:start="4389:17" pos:end="4389:36"><name pos:start="4389:17" pos:end="4389:33">gen_op_addl_A0_im</name><argument_list pos:start="4389:34" pos:end="4389:36">(<argument pos:start="4389:35" pos:end="4389:35"><expr pos:start="4389:35" pos:end="4389:35"><literal type="number" pos:start="4389:35" pos:end="4389:35">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4391:17" pos:end="4391:58"><expr pos:start="4391:17" pos:end="4391:57"><name pos:start="4391:17" pos:end="4391:55"><name pos:start="4391:17" pos:end="4391:31">gen_op_ld_T0_A0</name><index pos:start="4391:32" pos:end="4391:55">[<expr pos:start="4391:33" pos:end="4391:54"><name pos:start="4391:33" pos:end="4391:39">OT_LONG</name> <operator pos:start="4391:41" pos:end="4391:41">+</operator> <name pos:start="4391:43" pos:end="4391:54"><name pos:start="4391:43" pos:end="4391:43">s</name><operator pos:start="4391:44" pos:end="4391:45">-&gt;</operator><name pos:start="4391:46" pos:end="4391:54">mem_index</name></name></expr>]</index></name><operator pos:start="4391:56" pos:end="4391:56">(</operator><operator pos:start="4391:57" pos:end="4391:57">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="4393:17" pos:end="4395:48"><if pos:start="4393:17" pos:end="4395:48">if <condition pos:start="4393:20" pos:end="4393:30">(<expr pos:start="4393:21" pos:end="4393:29"><operator pos:start="4393:21" pos:end="4393:21">!</operator><name pos:start="4393:22" pos:end="4393:29"><name pos:start="4393:22" pos:end="4393:22">s</name><operator pos:start="4393:23" pos:end="4393:24">-&gt;</operator><name pos:start="4393:25" pos:end="4393:29">dflag</name></name></expr>)</condition><block type="pseudo" pos:start="4395:21" pos:end="4395:48"><block_content pos:start="4395:21" pos:end="4395:48">

                    <expr_stmt pos:start="4395:21" pos:end="4395:48"><expr pos:start="4395:21" pos:end="4395:47"><call pos:start="4395:21" pos:end="4395:47"><name pos:start="4395:21" pos:end="4395:37">gen_op_andl_T0_im</name><argument_list pos:start="4395:38" pos:end="4395:47">(<argument pos:start="4395:39" pos:end="4395:46"><expr pos:start="4395:39" pos:end="4395:46"><literal type="number" pos:start="4395:39" pos:end="4395:46">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="4397:17" pos:end="4409:17"><if pos:start="4397:17" pos:end="4403:17">if <condition pos:start="4397:20" pos:end="4397:28">(<expr pos:start="4397:21" pos:end="4397:27"><name pos:start="4397:21" pos:end="4397:22">op</name> <operator pos:start="4397:24" pos:end="4397:25">==</operator> <literal type="number" pos:start="4397:27" pos:end="4397:27">2</literal></expr>)</condition> <block pos:start="4397:30" pos:end="4403:17">{<block_content pos:start="4399:21" pos:end="4401:72">

                    <expr_stmt pos:start="4399:21" pos:end="4399:71"><expr pos:start="4399:21" pos:end="4399:70"><call pos:start="4399:21" pos:end="4399:70"><name pos:start="4399:21" pos:end="4399:38">gen_op_movl_env_T0</name><argument_list pos:start="4399:39" pos:end="4399:70">(<argument pos:start="4399:40" pos:end="4399:69"><expr pos:start="4399:40" pos:end="4399:69"><call pos:start="4399:40" pos:end="4399:69"><name pos:start="4399:40" pos:end="4399:47">offsetof</name><argument_list pos:start="4399:48" pos:end="4399:69">(<argument pos:start="4399:49" pos:end="4399:59"><expr pos:start="4399:49" pos:end="4399:59"><name pos:start="4399:49" pos:end="4399:59">CPUX86State</name></expr></argument>,<argument pos:start="4399:61" pos:end="4399:68"><expr pos:start="4399:61" pos:end="4399:68"><name pos:start="4399:61" pos:end="4399:68"><name pos:start="4399:61" pos:end="4399:63">gdt</name><operator pos:start="4399:64" pos:end="4399:64">.</operator><name pos:start="4399:65" pos:end="4399:68">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4401:21" pos:end="4401:72"><expr pos:start="4401:21" pos:end="4401:71"><call pos:start="4401:21" pos:end="4401:71"><name pos:start="4401:21" pos:end="4401:38">gen_op_movl_env_T1</name><argument_list pos:start="4401:39" pos:end="4401:71">(<argument pos:start="4401:40" pos:end="4401:70"><expr pos:start="4401:40" pos:end="4401:70"><call pos:start="4401:40" pos:end="4401:70"><name pos:start="4401:40" pos:end="4401:47">offsetof</name><argument_list pos:start="4401:48" pos:end="4401:70">(<argument pos:start="4401:49" pos:end="4401:59"><expr pos:start="4401:49" pos:end="4401:59"><name pos:start="4401:49" pos:end="4401:59">CPUX86State</name></expr></argument>,<argument pos:start="4401:61" pos:end="4401:69"><expr pos:start="4401:61" pos:end="4401:69"><name pos:start="4401:61" pos:end="4401:69"><name pos:start="4401:61" pos:end="4401:63">gdt</name><operator pos:start="4401:64" pos:end="4401:64">.</operator><name pos:start="4401:65" pos:end="4401:69">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="4403:19" pos:end="4409:17">else <block pos:start="4403:24" pos:end="4409:17">{<block_content pos:start="4405:21" pos:end="4407:72">

                    <expr_stmt pos:start="4405:21" pos:end="4405:71"><expr pos:start="4405:21" pos:end="4405:70"><call pos:start="4405:21" pos:end="4405:70"><name pos:start="4405:21" pos:end="4405:38">gen_op_movl_env_T0</name><argument_list pos:start="4405:39" pos:end="4405:70">(<argument pos:start="4405:40" pos:end="4405:69"><expr pos:start="4405:40" pos:end="4405:69"><call pos:start="4405:40" pos:end="4405:69"><name pos:start="4405:40" pos:end="4405:47">offsetof</name><argument_list pos:start="4405:48" pos:end="4405:69">(<argument pos:start="4405:49" pos:end="4405:59"><expr pos:start="4405:49" pos:end="4405:59"><name pos:start="4405:49" pos:end="4405:59">CPUX86State</name></expr></argument>,<argument pos:start="4405:61" pos:end="4405:68"><expr pos:start="4405:61" pos:end="4405:68"><name pos:start="4405:61" pos:end="4405:68"><name pos:start="4405:61" pos:end="4405:63">idt</name><operator pos:start="4405:64" pos:end="4405:64">.</operator><name pos:start="4405:65" pos:end="4405:68">base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4407:21" pos:end="4407:72"><expr pos:start="4407:21" pos:end="4407:71"><call pos:start="4407:21" pos:end="4407:71"><name pos:start="4407:21" pos:end="4407:38">gen_op_movl_env_T1</name><argument_list pos:start="4407:39" pos:end="4407:71">(<argument pos:start="4407:40" pos:end="4407:70"><expr pos:start="4407:40" pos:end="4407:70"><call pos:start="4407:40" pos:end="4407:70"><name pos:start="4407:40" pos:end="4407:47">offsetof</name><argument_list pos:start="4407:48" pos:end="4407:70">(<argument pos:start="4407:49" pos:end="4407:59"><expr pos:start="4407:49" pos:end="4407:59"><name pos:start="4407:49" pos:end="4407:59">CPUX86State</name></expr></argument>,<argument pos:start="4407:61" pos:end="4407:69"><expr pos:start="4407:61" pos:end="4407:69"><name pos:start="4407:61" pos:end="4407:69"><name pos:start="4407:61" pos:end="4407:63">idt</name><operator pos:start="4407:64" pos:end="4407:64">.</operator><name pos:start="4407:65" pos:end="4407:69">limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="4413:13" pos:end="4413:18">break;</break>

        <case pos:start="4415:9" pos:end="4415:15">case <expr pos:start="4415:14" pos:end="4415:14"><literal type="number" pos:start="4415:14" pos:end="4415:14">4</literal></expr>:</case> <comment type="block" pos:start="4415:17" pos:end="4415:26">/* smsw */</comment>

            <expr_stmt pos:start="4417:13" pos:end="4417:60"><expr pos:start="4417:13" pos:end="4417:59"><call pos:start="4417:13" pos:end="4417:59"><name pos:start="4417:13" pos:end="4417:30">gen_op_movl_T0_env</name><argument_list pos:start="4417:31" pos:end="4417:59">(<argument pos:start="4417:32" pos:end="4417:58"><expr pos:start="4417:32" pos:end="4417:58"><call pos:start="4417:32" pos:end="4417:58"><name pos:start="4417:32" pos:end="4417:39">offsetof</name><argument_list pos:start="4417:40" pos:end="4417:58">(<argument pos:start="4417:41" pos:end="4417:51"><expr pos:start="4417:41" pos:end="4417:51"><name pos:start="4417:41" pos:end="4417:51">CPUX86State</name></expr></argument>,<argument pos:start="4417:53" pos:end="4417:57"><expr pos:start="4417:53" pos:end="4417:57"><name pos:start="4417:53" pos:end="4417:57"><name pos:start="4417:53" pos:end="4417:54">cr</name><index pos:start="4417:55" pos:end="4417:57">[<expr pos:start="4417:56" pos:end="4417:56"><literal type="number" pos:start="4417:56" pos:end="4417:56">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4419:13" pos:end="4419:58"><expr pos:start="4419:13" pos:end="4419:57"><call pos:start="4419:13" pos:end="4419:57"><name pos:start="4419:13" pos:end="4419:26">gen_ldst_modrm</name><argument_list pos:start="4419:27" pos:end="4419:57">(<argument pos:start="4419:28" pos:end="4419:28"><expr pos:start="4419:28" pos:end="4419:28"><name pos:start="4419:28" pos:end="4419:28">s</name></expr></argument>, <argument pos:start="4419:31" pos:end="4419:35"><expr pos:start="4419:31" pos:end="4419:35"><name pos:start="4419:31" pos:end="4419:35">modrm</name></expr></argument>, <argument pos:start="4419:38" pos:end="4419:44"><expr pos:start="4419:38" pos:end="4419:44"><name pos:start="4419:38" pos:end="4419:44">OT_WORD</name></expr></argument>, <argument pos:start="4419:47" pos:end="4419:53"><expr pos:start="4419:47" pos:end="4419:53"><name pos:start="4419:47" pos:end="4419:53">OR_TMP0</name></expr></argument>, <argument pos:start="4419:56" pos:end="4419:56"><expr pos:start="4419:56" pos:end="4419:56"><literal type="number" pos:start="4419:56" pos:end="4419:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="4421:13" pos:end="4421:18">break;</break>

        <case pos:start="4423:9" pos:end="4423:15">case <expr pos:start="4423:14" pos:end="4423:14"><literal type="number" pos:start="4423:14" pos:end="4423:14">6</literal></expr>:</case> <comment type="block" pos:start="4423:17" pos:end="4423:26">/* lmsw */</comment>

            <if_stmt pos:start="4425:13" pos:end="4439:13"><if pos:start="4425:13" pos:end="4429:13">if <condition pos:start="4425:16" pos:end="4425:28">(<expr pos:start="4425:17" pos:end="4425:27"><name pos:start="4425:17" pos:end="4425:22"><name pos:start="4425:17" pos:end="4425:17">s</name><operator pos:start="4425:18" pos:end="4425:19">-&gt;</operator><name pos:start="4425:20" pos:end="4425:22">cpl</name></name> <operator pos:start="4425:24" pos:end="4425:25">!=</operator> <literal type="number" pos:start="4425:27" pos:end="4425:27">0</literal></expr>)</condition> <block pos:start="4425:30" pos:end="4429:13">{<block_content pos:start="4427:17" pos:end="4427:68">

                <expr_stmt pos:start="4427:17" pos:end="4427:68"><expr pos:start="4427:17" pos:end="4427:67"><call pos:start="4427:17" pos:end="4427:67"><name pos:start="4427:17" pos:end="4427:29">gen_exception</name><argument_list pos:start="4427:30" pos:end="4427:67">(<argument pos:start="4427:31" pos:end="4427:31"><expr pos:start="4427:31" pos:end="4427:31"><name pos:start="4427:31" pos:end="4427:31">s</name></expr></argument>, <argument pos:start="4427:34" pos:end="4427:43"><expr pos:start="4427:34" pos:end="4427:43"><name pos:start="4427:34" pos:end="4427:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4427:46" pos:end="4427:66"><expr pos:start="4427:46" pos:end="4427:66"><name pos:start="4427:46" pos:end="4427:53">pc_start</name> <operator pos:start="4427:55" pos:end="4427:55">-</operator> <name pos:start="4427:57" pos:end="4427:66"><name pos:start="4427:57" pos:end="4427:57">s</name><operator pos:start="4427:58" pos:end="4427:59">-&gt;</operator><name pos:start="4427:60" pos:end="4427:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4429:15" pos:end="4439:13">else <block pos:start="4429:20" pos:end="4439:13">{<block_content pos:start="4431:17" pos:end="4437:27">

                <expr_stmt pos:start="4431:17" pos:end="4431:62"><expr pos:start="4431:17" pos:end="4431:61"><call pos:start="4431:17" pos:end="4431:61"><name pos:start="4431:17" pos:end="4431:30">gen_ldst_modrm</name><argument_list pos:start="4431:31" pos:end="4431:61">(<argument pos:start="4431:32" pos:end="4431:32"><expr pos:start="4431:32" pos:end="4431:32"><name pos:start="4431:32" pos:end="4431:32">s</name></expr></argument>, <argument pos:start="4431:35" pos:end="4431:39"><expr pos:start="4431:35" pos:end="4431:39"><name pos:start="4431:35" pos:end="4431:39">modrm</name></expr></argument>, <argument pos:start="4431:42" pos:end="4431:48"><expr pos:start="4431:42" pos:end="4431:48"><name pos:start="4431:42" pos:end="4431:48">OT_WORD</name></expr></argument>, <argument pos:start="4431:51" pos:end="4431:57"><expr pos:start="4431:51" pos:end="4431:57"><name pos:start="4431:51" pos:end="4431:57">OR_TMP0</name></expr></argument>, <argument pos:start="4431:60" pos:end="4431:60"><expr pos:start="4431:60" pos:end="4431:60"><literal type="number" pos:start="4431:60" pos:end="4431:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4433:17" pos:end="4433:33"><expr pos:start="4433:17" pos:end="4433:32"><call pos:start="4433:17" pos:end="4433:32"><name pos:start="4433:17" pos:end="4433:30">gen_op_lmsw_T0</name><argument_list pos:start="4433:31" pos:end="4433:32">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4435:17" pos:end="4435:50"><expr pos:start="4435:17" pos:end="4435:49"><call pos:start="4435:17" pos:end="4435:49"><name pos:start="4435:17" pos:end="4435:29">gen_op_jmp_im</name><argument_list pos:start="4435:30" pos:end="4435:49">(<argument pos:start="4435:31" pos:end="4435:48"><expr pos:start="4435:31" pos:end="4435:48"><name pos:start="4435:31" pos:end="4435:35"><name pos:start="4435:31" pos:end="4435:31">s</name><operator pos:start="4435:32" pos:end="4435:33">-&gt;</operator><name pos:start="4435:34" pos:end="4435:35">pc</name></name> <operator pos:start="4435:37" pos:end="4435:37">-</operator> <name pos:start="4435:39" pos:end="4435:48"><name pos:start="4435:39" pos:end="4435:39">s</name><operator pos:start="4435:40" pos:end="4435:41">-&gt;</operator><name pos:start="4435:42" pos:end="4435:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4437:17" pos:end="4437:27"><expr pos:start="4437:17" pos:end="4437:26"><call pos:start="4437:17" pos:end="4437:26"><name pos:start="4437:17" pos:end="4437:23">gen_eob</name><argument_list pos:start="4437:24" pos:end="4437:26">(<argument pos:start="4437:25" pos:end="4437:25"><expr pos:start="4437:25" pos:end="4437:25"><name pos:start="4437:25" pos:end="4437:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="4441:13" pos:end="4441:18">break;</break>

        <case pos:start="4443:9" pos:end="4443:15">case <expr pos:start="4443:14" pos:end="4443:14"><literal type="number" pos:start="4443:14" pos:end="4443:14">7</literal></expr>:</case> <comment type="block" pos:start="4443:17" pos:end="4443:28">/* invlpg */</comment>

            <if_stmt pos:start="4445:13" pos:end="4463:13"><if pos:start="4445:13" pos:end="4449:13">if <condition pos:start="4445:16" pos:end="4445:28">(<expr pos:start="4445:17" pos:end="4445:27"><name pos:start="4445:17" pos:end="4445:22"><name pos:start="4445:17" pos:end="4445:17">s</name><operator pos:start="4445:18" pos:end="4445:19">-&gt;</operator><name pos:start="4445:20" pos:end="4445:22">cpl</name></name> <operator pos:start="4445:24" pos:end="4445:25">!=</operator> <literal type="number" pos:start="4445:27" pos:end="4445:27">0</literal></expr>)</condition> <block pos:start="4445:30" pos:end="4449:13">{<block_content pos:start="4447:17" pos:end="4447:68">

                <expr_stmt pos:start="4447:17" pos:end="4447:68"><expr pos:start="4447:17" pos:end="4447:67"><call pos:start="4447:17" pos:end="4447:67"><name pos:start="4447:17" pos:end="4447:29">gen_exception</name><argument_list pos:start="4447:30" pos:end="4447:67">(<argument pos:start="4447:31" pos:end="4447:31"><expr pos:start="4447:31" pos:end="4447:31"><name pos:start="4447:31" pos:end="4447:31">s</name></expr></argument>, <argument pos:start="4447:34" pos:end="4447:43"><expr pos:start="4447:34" pos:end="4447:43"><name pos:start="4447:34" pos:end="4447:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4447:46" pos:end="4447:66"><expr pos:start="4447:46" pos:end="4447:66"><name pos:start="4447:46" pos:end="4447:53">pc_start</name> <operator pos:start="4447:55" pos:end="4447:55">-</operator> <name pos:start="4447:57" pos:end="4447:66"><name pos:start="4447:57" pos:end="4447:57">s</name><operator pos:start="4447:58" pos:end="4447:59">-&gt;</operator><name pos:start="4447:60" pos:end="4447:66">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4449:15" pos:end="4463:13">else <block pos:start="4449:20" pos:end="4463:13">{<block_content pos:start="4451:17" pos:end="4461:27">

                <if_stmt pos:start="4451:17" pos:end="4453:36"><if pos:start="4451:17" pos:end="4453:36">if <condition pos:start="4451:20" pos:end="4451:29">(<expr pos:start="4451:21" pos:end="4451:28"><name pos:start="4451:21" pos:end="4451:23">mod</name> <operator pos:start="4451:25" pos:end="4451:26">==</operator> <literal type="number" pos:start="4451:28" pos:end="4451:28">3</literal></expr>)</condition><block type="pseudo" pos:start="4453:21" pos:end="4453:36"><block_content pos:start="4453:21" pos:end="4453:36">

                    <goto pos:start="4453:21" pos:end="4453:36">goto <name pos:start="4453:26" pos:end="4453:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="4455:17" pos:end="4455:65"><expr pos:start="4455:17" pos:end="4455:64"><call pos:start="4455:17" pos:end="4455:64"><name pos:start="4455:17" pos:end="4455:29">gen_lea_modrm</name><argument_list pos:start="4455:30" pos:end="4455:64">(<argument pos:start="4455:31" pos:end="4455:31"><expr pos:start="4455:31" pos:end="4455:31"><name pos:start="4455:31" pos:end="4455:31">s</name></expr></argument>, <argument pos:start="4455:34" pos:end="4455:38"><expr pos:start="4455:34" pos:end="4455:38"><name pos:start="4455:34" pos:end="4455:38">modrm</name></expr></argument>, <argument pos:start="4455:41" pos:end="4455:49"><expr pos:start="4455:41" pos:end="4455:49"><operator pos:start="4455:41" pos:end="4455:41">&amp;</operator><name pos:start="4455:42" pos:end="4455:49">reg_addr</name></expr></argument>, <argument pos:start="4455:52" pos:end="4455:63"><expr pos:start="4455:52" pos:end="4455:63"><operator pos:start="4455:52" pos:end="4455:52">&amp;</operator><name pos:start="4455:53" pos:end="4455:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4457:17" pos:end="4457:35"><expr pos:start="4457:17" pos:end="4457:34"><call pos:start="4457:17" pos:end="4457:34"><name pos:start="4457:17" pos:end="4457:32">gen_op_invlpg_A0</name><argument_list pos:start="4457:33" pos:end="4457:34">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4459:17" pos:end="4459:50"><expr pos:start="4459:17" pos:end="4459:49"><call pos:start="4459:17" pos:end="4459:49"><name pos:start="4459:17" pos:end="4459:29">gen_op_jmp_im</name><argument_list pos:start="4459:30" pos:end="4459:49">(<argument pos:start="4459:31" pos:end="4459:48"><expr pos:start="4459:31" pos:end="4459:48"><name pos:start="4459:31" pos:end="4459:35"><name pos:start="4459:31" pos:end="4459:31">s</name><operator pos:start="4459:32" pos:end="4459:33">-&gt;</operator><name pos:start="4459:34" pos:end="4459:35">pc</name></name> <operator pos:start="4459:37" pos:end="4459:37">-</operator> <name pos:start="4459:39" pos:end="4459:48"><name pos:start="4459:39" pos:end="4459:39">s</name><operator pos:start="4459:40" pos:end="4459:41">-&gt;</operator><name pos:start="4459:42" pos:end="4459:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4461:17" pos:end="4461:27"><expr pos:start="4461:17" pos:end="4461:26"><call pos:start="4461:17" pos:end="4461:26"><name pos:start="4461:17" pos:end="4461:23">gen_eob</name><argument_list pos:start="4461:24" pos:end="4461:26">(<argument pos:start="4461:25" pos:end="4461:25"><expr pos:start="4461:25" pos:end="4461:25"><name pos:start="4461:25" pos:end="4461:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="4465:13" pos:end="4465:18">break;</break>

        <default pos:start="4467:9" pos:end="4467:16">default:</default>

            <goto pos:start="4469:13" pos:end="4469:28">goto <name pos:start="4469:18" pos:end="4469:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="4473:9" pos:end="4473:14">break;</break>

    <case pos:start="4475:5" pos:end="4475:15">case <expr pos:start="4475:10" pos:end="4475:14"><literal type="number" pos:start="4475:10" pos:end="4475:14">0x108</literal></expr>:</case> <comment type="block" pos:start="4475:17" pos:end="4475:26">/* invd */</comment>

    <case pos:start="4477:5" pos:end="4477:15">case <expr pos:start="4477:10" pos:end="4477:14"><literal type="number" pos:start="4477:10" pos:end="4477:14">0x109</literal></expr>:</case> <comment type="block" pos:start="4477:17" pos:end="4477:28">/* wbinvd */</comment>

        <if_stmt pos:start="4479:9" pos:end="4487:9"><if pos:start="4479:9" pos:end="4483:9">if <condition pos:start="4479:12" pos:end="4479:24">(<expr pos:start="4479:13" pos:end="4479:23"><name pos:start="4479:13" pos:end="4479:18"><name pos:start="4479:13" pos:end="4479:13">s</name><operator pos:start="4479:14" pos:end="4479:15">-&gt;</operator><name pos:start="4479:16" pos:end="4479:18">cpl</name></name> <operator pos:start="4479:20" pos:end="4479:21">!=</operator> <literal type="number" pos:start="4479:23" pos:end="4479:23">0</literal></expr>)</condition> <block pos:start="4479:26" pos:end="4483:9">{<block_content pos:start="4481:13" pos:end="4481:64">

            <expr_stmt pos:start="4481:13" pos:end="4481:64"><expr pos:start="4481:13" pos:end="4481:63"><call pos:start="4481:13" pos:end="4481:63"><name pos:start="4481:13" pos:end="4481:25">gen_exception</name><argument_list pos:start="4481:26" pos:end="4481:63">(<argument pos:start="4481:27" pos:end="4481:27"><expr pos:start="4481:27" pos:end="4481:27"><name pos:start="4481:27" pos:end="4481:27">s</name></expr></argument>, <argument pos:start="4481:30" pos:end="4481:39"><expr pos:start="4481:30" pos:end="4481:39"><name pos:start="4481:30" pos:end="4481:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4481:42" pos:end="4481:62"><expr pos:start="4481:42" pos:end="4481:62"><name pos:start="4481:42" pos:end="4481:49">pc_start</name> <operator pos:start="4481:51" pos:end="4481:51">-</operator> <name pos:start="4481:53" pos:end="4481:62"><name pos:start="4481:53" pos:end="4481:53">s</name><operator pos:start="4481:54" pos:end="4481:55">-&gt;</operator><name pos:start="4481:56" pos:end="4481:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4483:11" pos:end="4487:9">else <block pos:start="4483:16" pos:end="4487:9">{<block_content>

            <comment type="block" pos:start="4485:13" pos:end="4485:31">/* nothing to do */</comment>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4489:9" pos:end="4489:14">break;</break>

    <case pos:start="4491:5" pos:end="4491:14">case <expr pos:start="4491:10" pos:end="4491:13"><literal type="number" pos:start="4491:10" pos:end="4491:13">0x63</literal></expr>:</case> <comment type="block" pos:start="4491:16" pos:end="4491:25">/* arpl */</comment>

        <if_stmt pos:start="4493:9" pos:end="4495:28"><if pos:start="4493:9" pos:end="4495:28">if <condition pos:start="4493:12" pos:end="4493:30">(<expr pos:start="4493:13" pos:end="4493:29"><operator pos:start="4493:13" pos:end="4493:13">!</operator><name pos:start="4493:14" pos:end="4493:18"><name pos:start="4493:14" pos:end="4493:14">s</name><operator pos:start="4493:15" pos:end="4493:16">-&gt;</operator><name pos:start="4493:17" pos:end="4493:18">pe</name></name> <operator pos:start="4493:20" pos:end="4493:21">||</operator> <name pos:start="4493:23" pos:end="4493:29"><name pos:start="4493:23" pos:end="4493:23">s</name><operator pos:start="4493:24" pos:end="4493:25">-&gt;</operator><name pos:start="4493:26" pos:end="4493:29">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="4495:13" pos:end="4495:28"><block_content pos:start="4495:13" pos:end="4495:28">

            <goto pos:start="4495:13" pos:end="4495:28">goto <name pos:start="4495:18" pos:end="4495:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4497:9" pos:end="4497:39"><expr pos:start="4497:9" pos:end="4497:38"><name pos:start="4497:9" pos:end="4497:10">ot</name> <operator pos:start="4497:12" pos:end="4497:12">=</operator> <ternary pos:start="4497:14" pos:end="4497:38"><condition pos:start="4497:14" pos:end="4497:20"><expr pos:start="4497:14" pos:end="4497:18"><name pos:start="4497:14" pos:end="4497:18">dflag</name></expr> ?</condition><then pos:start="4497:22" pos:end="4497:28"> <expr pos:start="4497:22" pos:end="4497:28"><name pos:start="4497:22" pos:end="4497:28">OT_LONG</name></expr> </then><else pos:start="4497:30" pos:end="4497:38">: <expr pos:start="4497:32" pos:end="4497:38"><name pos:start="4497:32" pos:end="4497:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="4499:9" pos:end="4499:35"><expr pos:start="4499:9" pos:end="4499:34"><name pos:start="4499:9" pos:end="4499:13">modrm</name> <operator pos:start="4499:15" pos:end="4499:15">=</operator> <call pos:start="4499:17" pos:end="4499:34"><name pos:start="4499:17" pos:end="4499:25">ldub_code</name><argument_list pos:start="4499:26" pos:end="4499:34">(<argument pos:start="4499:27" pos:end="4499:33"><expr pos:start="4499:27" pos:end="4499:33"><name pos:start="4499:27" pos:end="4499:31"><name pos:start="4499:27" pos:end="4499:27">s</name><operator pos:start="4499:28" pos:end="4499:29">-&gt;</operator><name pos:start="4499:30" pos:end="4499:31">pc</name></name><operator pos:start="4499:32" pos:end="4499:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4501:9" pos:end="4501:31"><expr pos:start="4501:9" pos:end="4501:30"><name pos:start="4501:9" pos:end="4501:11">reg</name> <operator pos:start="4501:13" pos:end="4501:13">=</operator> <operator pos:start="4501:15" pos:end="4501:15">(</operator><name pos:start="4501:16" pos:end="4501:20">modrm</name> <operator pos:start="4501:22" pos:end="4501:23">&gt;&gt;</operator> <literal type="number" pos:start="4501:25" pos:end="4501:25">3</literal><operator pos:start="4501:26" pos:end="4501:26">)</operator> <operator pos:start="4501:28" pos:end="4501:28">&amp;</operator> <literal type="number" pos:start="4501:30" pos:end="4501:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4503:9" pos:end="4503:31"><expr pos:start="4503:9" pos:end="4503:30"><name pos:start="4503:9" pos:end="4503:11">mod</name> <operator pos:start="4503:13" pos:end="4503:13">=</operator> <operator pos:start="4503:15" pos:end="4503:15">(</operator><name pos:start="4503:16" pos:end="4503:20">modrm</name> <operator pos:start="4503:22" pos:end="4503:23">&gt;&gt;</operator> <literal type="number" pos:start="4503:25" pos:end="4503:25">6</literal><operator pos:start="4503:26" pos:end="4503:26">)</operator> <operator pos:start="4503:28" pos:end="4503:28">&amp;</operator> <literal type="number" pos:start="4503:30" pos:end="4503:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4505:9" pos:end="4505:23"><expr pos:start="4505:9" pos:end="4505:22"><name pos:start="4505:9" pos:end="4505:10">rm</name> <operator pos:start="4505:12" pos:end="4505:12">=</operator> <name pos:start="4505:14" pos:end="4505:18">modrm</name> <operator pos:start="4505:20" pos:end="4505:20">&amp;</operator> <literal type="number" pos:start="4505:22" pos:end="4505:22">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="4507:9" pos:end="4517:9"><if pos:start="4507:9" pos:end="4513:9">if <condition pos:start="4507:12" pos:end="4507:21">(<expr pos:start="4507:13" pos:end="4507:20"><name pos:start="4507:13" pos:end="4507:15">mod</name> <operator pos:start="4507:17" pos:end="4507:18">!=</operator> <literal type="number" pos:start="4507:20" pos:end="4507:20">3</literal></expr>)</condition> <block pos:start="4507:23" pos:end="4513:9">{<block_content pos:start="4509:13" pos:end="4511:49">

            <expr_stmt pos:start="4509:13" pos:end="4509:61"><expr pos:start="4509:13" pos:end="4509:60"><call pos:start="4509:13" pos:end="4509:60"><name pos:start="4509:13" pos:end="4509:25">gen_lea_modrm</name><argument_list pos:start="4509:26" pos:end="4509:60">(<argument pos:start="4509:27" pos:end="4509:27"><expr pos:start="4509:27" pos:end="4509:27"><name pos:start="4509:27" pos:end="4509:27">s</name></expr></argument>, <argument pos:start="4509:30" pos:end="4509:34"><expr pos:start="4509:30" pos:end="4509:34"><name pos:start="4509:30" pos:end="4509:34">modrm</name></expr></argument>, <argument pos:start="4509:37" pos:end="4509:45"><expr pos:start="4509:37" pos:end="4509:45"><operator pos:start="4509:37" pos:end="4509:37">&amp;</operator><name pos:start="4509:38" pos:end="4509:45">reg_addr</name></expr></argument>, <argument pos:start="4509:48" pos:end="4509:59"><expr pos:start="4509:48" pos:end="4509:59"><operator pos:start="4509:48" pos:end="4509:48">&amp;</operator><name pos:start="4509:49" pos:end="4509:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4511:13" pos:end="4511:49"><expr pos:start="4511:13" pos:end="4511:48"><name pos:start="4511:13" pos:end="4511:46"><name pos:start="4511:13" pos:end="4511:27">gen_op_ld_T0_A0</name><index pos:start="4511:28" pos:end="4511:46">[<expr pos:start="4511:29" pos:end="4511:45"><name pos:start="4511:29" pos:end="4511:30">ot</name> <operator pos:start="4511:32" pos:end="4511:32">+</operator> <name pos:start="4511:34" pos:end="4511:45"><name pos:start="4511:34" pos:end="4511:34">s</name><operator pos:start="4511:35" pos:end="4511:36">-&gt;</operator><name pos:start="4511:37" pos:end="4511:45">mem_index</name></name></expr>]</index></name><operator pos:start="4511:47" pos:end="4511:47">(</operator><operator pos:start="4511:48" pos:end="4511:48">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4513:11" pos:end="4517:9">else <block pos:start="4513:16" pos:end="4517:9">{<block_content pos:start="4515:13" pos:end="4515:43">

            <expr_stmt pos:start="4515:13" pos:end="4515:43"><expr pos:start="4515:13" pos:end="4515:42"><name pos:start="4515:13" pos:end="4515:40"><name pos:start="4515:13" pos:end="4515:29">gen_op_mov_TN_reg</name><index pos:start="4515:30" pos:end="4515:33">[<expr pos:start="4515:31" pos:end="4515:32"><name pos:start="4515:31" pos:end="4515:32">ot</name></expr>]</index><index pos:start="4515:34" pos:end="4515:36">[<expr pos:start="4515:35" pos:end="4515:35"><literal type="number" pos:start="4515:35" pos:end="4515:35">0</literal></expr>]</index><index pos:start="4515:37" pos:end="4515:40">[<expr pos:start="4515:38" pos:end="4515:39"><name pos:start="4515:38" pos:end="4515:39">rm</name></expr>]</index></name><operator pos:start="4515:41" pos:end="4515:41">(</operator><operator pos:start="4515:42" pos:end="4515:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="4519:9" pos:end="4521:39"><if pos:start="4519:9" pos:end="4521:39">if <condition pos:start="4519:12" pos:end="4519:38">(<expr pos:start="4519:13" pos:end="4519:37"><name pos:start="4519:13" pos:end="4519:20"><name pos:start="4519:13" pos:end="4519:13">s</name><operator pos:start="4519:14" pos:end="4519:15">-&gt;</operator><name pos:start="4519:16" pos:end="4519:20">cc_op</name></name> <operator pos:start="4519:22" pos:end="4519:23">!=</operator> <name pos:start="4519:25" pos:end="4519:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4521:13" pos:end="4521:39"><block_content pos:start="4521:13" pos:end="4521:39">

            <expr_stmt pos:start="4521:13" pos:end="4521:39"><expr pos:start="4521:13" pos:end="4521:38"><call pos:start="4521:13" pos:end="4521:38"><name pos:start="4521:13" pos:end="4521:28">gen_op_set_cc_op</name><argument_list pos:start="4521:29" pos:end="4521:38">(<argument pos:start="4521:30" pos:end="4521:37"><expr pos:start="4521:30" pos:end="4521:37"><name pos:start="4521:30" pos:end="4521:37"><name pos:start="4521:30" pos:end="4521:30">s</name><operator pos:start="4521:31" pos:end="4521:32">-&gt;</operator><name pos:start="4521:33" pos:end="4521:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4523:9" pos:end="4523:22"><expr pos:start="4523:9" pos:end="4523:21"><call pos:start="4523:9" pos:end="4523:21"><name pos:start="4523:9" pos:end="4523:19">gen_op_arpl</name><argument_list pos:start="4523:20" pos:end="4523:21">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4525:9" pos:end="4525:32"><expr pos:start="4525:9" pos:end="4525:31"><name pos:start="4525:9" pos:end="4525:16"><name pos:start="4525:9" pos:end="4525:9">s</name><operator pos:start="4525:10" pos:end="4525:11">-&gt;</operator><name pos:start="4525:12" pos:end="4525:16">cc_op</name></name> <operator pos:start="4525:18" pos:end="4525:18">=</operator> <name pos:start="4525:20" pos:end="4525:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <if_stmt pos:start="4527:9" pos:end="4535:9"><if pos:start="4527:9" pos:end="4531:9">if <condition pos:start="4527:12" pos:end="4527:21">(<expr pos:start="4527:13" pos:end="4527:20"><name pos:start="4527:13" pos:end="4527:15">mod</name> <operator pos:start="4527:17" pos:end="4527:18">!=</operator> <literal type="number" pos:start="4527:20" pos:end="4527:20">3</literal></expr>)</condition> <block pos:start="4527:23" pos:end="4531:9">{<block_content pos:start="4529:13" pos:end="4529:49">

            <expr_stmt pos:start="4529:13" pos:end="4529:49"><expr pos:start="4529:13" pos:end="4529:48"><name pos:start="4529:13" pos:end="4529:46"><name pos:start="4529:13" pos:end="4529:27">gen_op_st_T0_A0</name><index pos:start="4529:28" pos:end="4529:46">[<expr pos:start="4529:29" pos:end="4529:45"><name pos:start="4529:29" pos:end="4529:30">ot</name> <operator pos:start="4529:32" pos:end="4529:32">+</operator> <name pos:start="4529:34" pos:end="4529:45"><name pos:start="4529:34" pos:end="4529:34">s</name><operator pos:start="4529:35" pos:end="4529:36">-&gt;</operator><name pos:start="4529:37" pos:end="4529:45">mem_index</name></name></expr>]</index></name><operator pos:start="4529:47" pos:end="4529:47">(</operator><operator pos:start="4529:48" pos:end="4529:48">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4531:11" pos:end="4535:9">else <block pos:start="4531:16" pos:end="4535:9">{<block_content pos:start="4533:13" pos:end="4533:40">

            <expr_stmt pos:start="4533:13" pos:end="4533:40"><expr pos:start="4533:13" pos:end="4533:39"><name pos:start="4533:13" pos:end="4533:37"><name pos:start="4533:13" pos:end="4533:29">gen_op_mov_reg_T0</name><index pos:start="4533:30" pos:end="4533:33">[<expr pos:start="4533:31" pos:end="4533:32"><name pos:start="4533:31" pos:end="4533:32">ot</name></expr>]</index><index pos:start="4533:34" pos:end="4533:37">[<expr pos:start="4533:35" pos:end="4533:36"><name pos:start="4533:35" pos:end="4533:36">rm</name></expr>]</index></name><operator pos:start="4533:38" pos:end="4533:38">(</operator><operator pos:start="4533:39" pos:end="4533:39">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="4537:9" pos:end="4537:29"><expr pos:start="4537:9" pos:end="4537:28"><call pos:start="4537:9" pos:end="4537:28"><name pos:start="4537:9" pos:end="4537:26">gen_op_arpl_update</name><argument_list pos:start="4537:27" pos:end="4537:28">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="4539:9" pos:end="4539:14">break;</break>

    <case pos:start="4541:5" pos:end="4541:15">case <expr pos:start="4541:10" pos:end="4541:14"><literal type="number" pos:start="4541:10" pos:end="4541:14">0x102</literal></expr>:</case> <comment type="block" pos:start="4541:17" pos:end="4541:25">/* lar */</comment>

    <case pos:start="4543:5" pos:end="4543:15">case <expr pos:start="4543:10" pos:end="4543:14"><literal type="number" pos:start="4543:10" pos:end="4543:14">0x103</literal></expr>:</case> <comment type="block" pos:start="4543:17" pos:end="4543:25">/* lsl */</comment>

        <if_stmt pos:start="4545:9" pos:end="4547:28"><if pos:start="4545:9" pos:end="4547:28">if <condition pos:start="4545:12" pos:end="4545:30">(<expr pos:start="4545:13" pos:end="4545:29"><operator pos:start="4545:13" pos:end="4545:13">!</operator><name pos:start="4545:14" pos:end="4545:18"><name pos:start="4545:14" pos:end="4545:14">s</name><operator pos:start="4545:15" pos:end="4545:16">-&gt;</operator><name pos:start="4545:17" pos:end="4545:18">pe</name></name> <operator pos:start="4545:20" pos:end="4545:21">||</operator> <name pos:start="4545:23" pos:end="4545:29"><name pos:start="4545:23" pos:end="4545:23">s</name><operator pos:start="4545:24" pos:end="4545:25">-&gt;</operator><name pos:start="4545:26" pos:end="4545:29">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="4547:13" pos:end="4547:28"><block_content pos:start="4547:13" pos:end="4547:28">

            <goto pos:start="4547:13" pos:end="4547:28">goto <name pos:start="4547:18" pos:end="4547:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="4549:9" pos:end="4549:39"><expr pos:start="4549:9" pos:end="4549:38"><name pos:start="4549:9" pos:end="4549:10">ot</name> <operator pos:start="4549:12" pos:end="4549:12">=</operator> <ternary pos:start="4549:14" pos:end="4549:38"><condition pos:start="4549:14" pos:end="4549:20"><expr pos:start="4549:14" pos:end="4549:18"><name pos:start="4549:14" pos:end="4549:18">dflag</name></expr> ?</condition><then pos:start="4549:22" pos:end="4549:28"> <expr pos:start="4549:22" pos:end="4549:28"><name pos:start="4549:22" pos:end="4549:28">OT_LONG</name></expr> </then><else pos:start="4549:30" pos:end="4549:38">: <expr pos:start="4549:32" pos:end="4549:38"><name pos:start="4549:32" pos:end="4549:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="4551:9" pos:end="4551:35"><expr pos:start="4551:9" pos:end="4551:34"><name pos:start="4551:9" pos:end="4551:13">modrm</name> <operator pos:start="4551:15" pos:end="4551:15">=</operator> <call pos:start="4551:17" pos:end="4551:34"><name pos:start="4551:17" pos:end="4551:25">ldub_code</name><argument_list pos:start="4551:26" pos:end="4551:34">(<argument pos:start="4551:27" pos:end="4551:33"><expr pos:start="4551:27" pos:end="4551:33"><name pos:start="4551:27" pos:end="4551:31"><name pos:start="4551:27" pos:end="4551:27">s</name><operator pos:start="4551:28" pos:end="4551:29">-&gt;</operator><name pos:start="4551:30" pos:end="4551:31">pc</name></name><operator pos:start="4551:32" pos:end="4551:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4553:9" pos:end="4553:31"><expr pos:start="4553:9" pos:end="4553:30"><name pos:start="4553:9" pos:end="4553:11">reg</name> <operator pos:start="4553:13" pos:end="4553:13">=</operator> <operator pos:start="4553:15" pos:end="4553:15">(</operator><name pos:start="4553:16" pos:end="4553:20">modrm</name> <operator pos:start="4553:22" pos:end="4553:23">&gt;&gt;</operator> <literal type="number" pos:start="4553:25" pos:end="4553:25">3</literal><operator pos:start="4553:26" pos:end="4553:26">)</operator> <operator pos:start="4553:28" pos:end="4553:28">&amp;</operator> <literal type="number" pos:start="4553:30" pos:end="4553:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4555:9" pos:end="4555:49"><expr pos:start="4555:9" pos:end="4555:48"><call pos:start="4555:9" pos:end="4555:48"><name pos:start="4555:9" pos:end="4555:22">gen_ldst_modrm</name><argument_list pos:start="4555:23" pos:end="4555:48">(<argument pos:start="4555:24" pos:end="4555:24"><expr pos:start="4555:24" pos:end="4555:24"><name pos:start="4555:24" pos:end="4555:24">s</name></expr></argument>, <argument pos:start="4555:27" pos:end="4555:31"><expr pos:start="4555:27" pos:end="4555:31"><name pos:start="4555:27" pos:end="4555:31">modrm</name></expr></argument>, <argument pos:start="4555:34" pos:end="4555:35"><expr pos:start="4555:34" pos:end="4555:35"><name pos:start="4555:34" pos:end="4555:35">ot</name></expr></argument>, <argument pos:start="4555:38" pos:end="4555:44"><expr pos:start="4555:38" pos:end="4555:44"><name pos:start="4555:38" pos:end="4555:44">OR_TMP0</name></expr></argument>, <argument pos:start="4555:47" pos:end="4555:47"><expr pos:start="4555:47" pos:end="4555:47"><literal type="number" pos:start="4555:47" pos:end="4555:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4557:9" pos:end="4557:40"><expr pos:start="4557:9" pos:end="4557:39"><name pos:start="4557:9" pos:end="4557:37"><name pos:start="4557:9" pos:end="4557:25">gen_op_mov_TN_reg</name><index pos:start="4557:26" pos:end="4557:29">[<expr pos:start="4557:27" pos:end="4557:28"><name pos:start="4557:27" pos:end="4557:28">ot</name></expr>]</index><index pos:start="4557:30" pos:end="4557:32">[<expr pos:start="4557:31" pos:end="4557:31"><literal type="number" pos:start="4557:31" pos:end="4557:31">1</literal></expr>]</index><index pos:start="4557:33" pos:end="4557:37">[<expr pos:start="4557:34" pos:end="4557:36"><name pos:start="4557:34" pos:end="4557:36">reg</name></expr>]</index></name><operator pos:start="4557:38" pos:end="4557:38">(</operator><operator pos:start="4557:39" pos:end="4557:39">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="4559:9" pos:end="4561:39"><if pos:start="4559:9" pos:end="4561:39">if <condition pos:start="4559:12" pos:end="4559:38">(<expr pos:start="4559:13" pos:end="4559:37"><name pos:start="4559:13" pos:end="4559:20"><name pos:start="4559:13" pos:end="4559:13">s</name><operator pos:start="4559:14" pos:end="4559:15">-&gt;</operator><name pos:start="4559:16" pos:end="4559:20">cc_op</name></name> <operator pos:start="4559:22" pos:end="4559:23">!=</operator> <name pos:start="4559:25" pos:end="4559:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="4561:13" pos:end="4561:39"><block_content pos:start="4561:13" pos:end="4561:39">

            <expr_stmt pos:start="4561:13" pos:end="4561:39"><expr pos:start="4561:13" pos:end="4561:38"><call pos:start="4561:13" pos:end="4561:38"><name pos:start="4561:13" pos:end="4561:28">gen_op_set_cc_op</name><argument_list pos:start="4561:29" pos:end="4561:38">(<argument pos:start="4561:30" pos:end="4561:37"><expr pos:start="4561:30" pos:end="4561:37"><name pos:start="4561:30" pos:end="4561:37"><name pos:start="4561:30" pos:end="4561:30">s</name><operator pos:start="4561:31" pos:end="4561:32">-&gt;</operator><name pos:start="4561:33" pos:end="4561:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="4563:9" pos:end="4569:25"><if pos:start="4563:9" pos:end="4565:25">if <condition pos:start="4563:12" pos:end="4563:23">(<expr pos:start="4563:13" pos:end="4563:22"><name pos:start="4563:13" pos:end="4563:13">b</name> <operator pos:start="4563:15" pos:end="4563:16">==</operator> <literal type="number" pos:start="4563:18" pos:end="4563:22">0x102</literal></expr>)</condition><block type="pseudo" pos:start="4565:13" pos:end="4565:25"><block_content pos:start="4565:13" pos:end="4565:25">

            <expr_stmt pos:start="4565:13" pos:end="4565:25"><expr pos:start="4565:13" pos:end="4565:24"><call pos:start="4565:13" pos:end="4565:24"><name pos:start="4565:13" pos:end="4565:22">gen_op_lar</name><argument_list pos:start="4565:23" pos:end="4565:24">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="4567:9" pos:end="4569:25">else<block type="pseudo" pos:start="4569:13" pos:end="4569:25"><block_content pos:start="4569:13" pos:end="4569:25">

            <expr_stmt pos:start="4569:13" pos:end="4569:25"><expr pos:start="4569:13" pos:end="4569:24"><call pos:start="4569:13" pos:end="4569:24"><name pos:start="4569:13" pos:end="4569:22">gen_op_lsl</name><argument_list pos:start="4569:23" pos:end="4569:24">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="4571:9" pos:end="4571:32"><expr pos:start="4571:9" pos:end="4571:31"><name pos:start="4571:9" pos:end="4571:16"><name pos:start="4571:9" pos:end="4571:9">s</name><operator pos:start="4571:10" pos:end="4571:11">-&gt;</operator><name pos:start="4571:12" pos:end="4571:16">cc_op</name></name> <operator pos:start="4571:18" pos:end="4571:18">=</operator> <name pos:start="4571:20" pos:end="4571:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="4573:9" pos:end="4573:37"><expr pos:start="4573:9" pos:end="4573:36"><name pos:start="4573:9" pos:end="4573:34"><name pos:start="4573:9" pos:end="4573:25">gen_op_mov_reg_T1</name><index pos:start="4573:26" pos:end="4573:29">[<expr pos:start="4573:27" pos:end="4573:28"><name pos:start="4573:27" pos:end="4573:28">ot</name></expr>]</index><index pos:start="4573:30" pos:end="4573:34">[<expr pos:start="4573:31" pos:end="4573:33"><name pos:start="4573:31" pos:end="4573:33">reg</name></expr>]</index></name><operator pos:start="4573:35" pos:end="4573:35">(</operator><operator pos:start="4573:36" pos:end="4573:36">)</operator></expr>;</expr_stmt>

        <break pos:start="4575:9" pos:end="4575:14">break;</break>

    <case pos:start="4577:5" pos:end="4577:15">case <expr pos:start="4577:10" pos:end="4577:14"><literal type="number" pos:start="4577:10" pos:end="4577:14">0x118</literal></expr>:</case>

        <expr_stmt pos:start="4579:9" pos:end="4579:35"><expr pos:start="4579:9" pos:end="4579:34"><name pos:start="4579:9" pos:end="4579:13">modrm</name> <operator pos:start="4579:15" pos:end="4579:15">=</operator> <call pos:start="4579:17" pos:end="4579:34"><name pos:start="4579:17" pos:end="4579:25">ldub_code</name><argument_list pos:start="4579:26" pos:end="4579:34">(<argument pos:start="4579:27" pos:end="4579:33"><expr pos:start="4579:27" pos:end="4579:33"><name pos:start="4579:27" pos:end="4579:31"><name pos:start="4579:27" pos:end="4579:27">s</name><operator pos:start="4579:28" pos:end="4579:29">-&gt;</operator><name pos:start="4579:30" pos:end="4579:31">pc</name></name><operator pos:start="4579:32" pos:end="4579:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="4581:9" pos:end="4581:31"><expr pos:start="4581:9" pos:end="4581:30"><name pos:start="4581:9" pos:end="4581:11">mod</name> <operator pos:start="4581:13" pos:end="4581:13">=</operator> <operator pos:start="4581:15" pos:end="4581:15">(</operator><name pos:start="4581:16" pos:end="4581:20">modrm</name> <operator pos:start="4581:22" pos:end="4581:23">&gt;&gt;</operator> <literal type="number" pos:start="4581:25" pos:end="4581:25">6</literal><operator pos:start="4581:26" pos:end="4581:26">)</operator> <operator pos:start="4581:28" pos:end="4581:28">&amp;</operator> <literal type="number" pos:start="4581:30" pos:end="4581:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="4583:9" pos:end="4583:30"><expr pos:start="4583:9" pos:end="4583:29"><name pos:start="4583:9" pos:end="4583:10">op</name> <operator pos:start="4583:12" pos:end="4583:12">=</operator> <operator pos:start="4583:14" pos:end="4583:14">(</operator><name pos:start="4583:15" pos:end="4583:19">modrm</name> <operator pos:start="4583:21" pos:end="4583:22">&gt;&gt;</operator> <literal type="number" pos:start="4583:24" pos:end="4583:24">3</literal><operator pos:start="4583:25" pos:end="4583:25">)</operator> <operator pos:start="4583:27" pos:end="4583:27">&amp;</operator> <literal type="number" pos:start="4583:29" pos:end="4583:29">7</literal></expr>;</expr_stmt>

        <switch pos:start="4585:9" pos:end="4609:9">switch<condition pos:start="4585:15" pos:end="4585:18">(<expr pos:start="4585:16" pos:end="4585:17"><name pos:start="4585:16" pos:end="4585:17">op</name></expr>)</condition> <block pos:start="4585:20" pos:end="4609:9">{<block_content pos:start="4587:9" pos:end="4607:28">

        <case pos:start="4587:9" pos:end="4587:15">case <expr pos:start="4587:14" pos:end="4587:14"><literal type="number" pos:start="4587:14" pos:end="4587:14">0</literal></expr>:</case> <comment type="block" pos:start="4587:17" pos:end="4587:33">/* prefetchnta */</comment>

        <case pos:start="4589:9" pos:end="4589:15">case <expr pos:start="4589:14" pos:end="4589:14"><literal type="number" pos:start="4589:14" pos:end="4589:14">1</literal></expr>:</case> <comment type="block" pos:start="4589:17" pos:end="4589:33">/* prefetchnt0 */</comment>

        <case pos:start="4591:9" pos:end="4591:15">case <expr pos:start="4591:14" pos:end="4591:14"><literal type="number" pos:start="4591:14" pos:end="4591:14">2</literal></expr>:</case> <comment type="block" pos:start="4591:17" pos:end="4591:33">/* prefetchnt0 */</comment>

        <case pos:start="4593:9" pos:end="4593:15">case <expr pos:start="4593:14" pos:end="4593:14"><literal type="number" pos:start="4593:14" pos:end="4593:14">3</literal></expr>:</case> <comment type="block" pos:start="4593:17" pos:end="4593:33">/* prefetchnt0 */</comment>

            <if_stmt pos:start="4595:13" pos:end="4597:32"><if pos:start="4595:13" pos:end="4597:32">if <condition pos:start="4595:16" pos:end="4595:25">(<expr pos:start="4595:17" pos:end="4595:24"><name pos:start="4595:17" pos:end="4595:19">mod</name> <operator pos:start="4595:21" pos:end="4595:22">==</operator> <literal type="number" pos:start="4595:24" pos:end="4595:24">3</literal></expr>)</condition><block type="pseudo" pos:start="4597:17" pos:end="4597:32"><block_content pos:start="4597:17" pos:end="4597:32">

                <goto pos:start="4597:17" pos:end="4597:32">goto <name pos:start="4597:22" pos:end="4597:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4599:13" pos:end="4599:61"><expr pos:start="4599:13" pos:end="4599:60"><call pos:start="4599:13" pos:end="4599:60"><name pos:start="4599:13" pos:end="4599:25">gen_lea_modrm</name><argument_list pos:start="4599:26" pos:end="4599:60">(<argument pos:start="4599:27" pos:end="4599:27"><expr pos:start="4599:27" pos:end="4599:27"><name pos:start="4599:27" pos:end="4599:27">s</name></expr></argument>, <argument pos:start="4599:30" pos:end="4599:34"><expr pos:start="4599:30" pos:end="4599:34"><name pos:start="4599:30" pos:end="4599:34">modrm</name></expr></argument>, <argument pos:start="4599:37" pos:end="4599:45"><expr pos:start="4599:37" pos:end="4599:45"><operator pos:start="4599:37" pos:end="4599:37">&amp;</operator><name pos:start="4599:38" pos:end="4599:45">reg_addr</name></expr></argument>, <argument pos:start="4599:48" pos:end="4599:59"><expr pos:start="4599:48" pos:end="4599:59"><operator pos:start="4599:48" pos:end="4599:48">&amp;</operator><name pos:start="4599:49" pos:end="4599:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4601:13" pos:end="4601:36">/* nothing more to do */</comment>

            <break pos:start="4603:13" pos:end="4603:18">break;</break>

        <default pos:start="4605:9" pos:end="4605:16">default:</default>

            <goto pos:start="4607:13" pos:end="4607:28">goto <name pos:start="4607:18" pos:end="4607:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="4611:9" pos:end="4611:14">break;</break>

    <case pos:start="4613:5" pos:end="4613:15">case <expr pos:start="4613:10" pos:end="4613:14"><literal type="number" pos:start="4613:10" pos:end="4613:14">0x120</literal></expr>:</case> <comment type="block" pos:start="4613:17" pos:end="4613:34">/* mov reg, crN */</comment>

    <case pos:start="4615:5" pos:end="4615:15">case <expr pos:start="4615:10" pos:end="4615:14"><literal type="number" pos:start="4615:10" pos:end="4615:14">0x122</literal></expr>:</case> <comment type="block" pos:start="4615:17" pos:end="4615:34">/* mov crN, reg */</comment>

        <if_stmt pos:start="4617:9" pos:end="4669:9"><if pos:start="4617:9" pos:end="4621:9">if <condition pos:start="4617:12" pos:end="4617:24">(<expr pos:start="4617:13" pos:end="4617:23"><name pos:start="4617:13" pos:end="4617:18"><name pos:start="4617:13" pos:end="4617:13">s</name><operator pos:start="4617:14" pos:end="4617:15">-&gt;</operator><name pos:start="4617:16" pos:end="4617:18">cpl</name></name> <operator pos:start="4617:20" pos:end="4617:21">!=</operator> <literal type="number" pos:start="4617:23" pos:end="4617:23">0</literal></expr>)</condition> <block pos:start="4617:26" pos:end="4621:9">{<block_content pos:start="4619:13" pos:end="4619:64">

            <expr_stmt pos:start="4619:13" pos:end="4619:64"><expr pos:start="4619:13" pos:end="4619:63"><call pos:start="4619:13" pos:end="4619:63"><name pos:start="4619:13" pos:end="4619:25">gen_exception</name><argument_list pos:start="4619:26" pos:end="4619:63">(<argument pos:start="4619:27" pos:end="4619:27"><expr pos:start="4619:27" pos:end="4619:27"><name pos:start="4619:27" pos:end="4619:27">s</name></expr></argument>, <argument pos:start="4619:30" pos:end="4619:39"><expr pos:start="4619:30" pos:end="4619:39"><name pos:start="4619:30" pos:end="4619:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4619:42" pos:end="4619:62"><expr pos:start="4619:42" pos:end="4619:62"><name pos:start="4619:42" pos:end="4619:49">pc_start</name> <operator pos:start="4619:51" pos:end="4619:51">-</operator> <name pos:start="4619:53" pos:end="4619:62"><name pos:start="4619:53" pos:end="4619:53">s</name><operator pos:start="4619:54" pos:end="4619:55">-&gt;</operator><name pos:start="4619:56" pos:end="4619:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4621:11" pos:end="4669:9">else <block pos:start="4621:16" pos:end="4669:9">{<block_content pos:start="4623:13" pos:end="4667:13">

            <expr_stmt pos:start="4623:13" pos:end="4623:39"><expr pos:start="4623:13" pos:end="4623:38"><name pos:start="4623:13" pos:end="4623:17">modrm</name> <operator pos:start="4623:19" pos:end="4623:19">=</operator> <call pos:start="4623:21" pos:end="4623:38"><name pos:start="4623:21" pos:end="4623:29">ldub_code</name><argument_list pos:start="4623:30" pos:end="4623:38">(<argument pos:start="4623:31" pos:end="4623:37"><expr pos:start="4623:31" pos:end="4623:37"><name pos:start="4623:31" pos:end="4623:35"><name pos:start="4623:31" pos:end="4623:31">s</name><operator pos:start="4623:32" pos:end="4623:33">-&gt;</operator><name pos:start="4623:34" pos:end="4623:35">pc</name></name><operator pos:start="4623:36" pos:end="4623:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4625:13" pos:end="4627:32"><if pos:start="4625:13" pos:end="4627:32">if <condition pos:start="4625:16" pos:end="4625:39">(<expr pos:start="4625:17" pos:end="4625:38"><operator pos:start="4625:17" pos:end="4625:17">(</operator><name pos:start="4625:18" pos:end="4625:22">modrm</name> <operator pos:start="4625:24" pos:end="4625:24">&amp;</operator> <literal type="number" pos:start="4625:26" pos:end="4625:29">0xc0</literal><operator pos:start="4625:30" pos:end="4625:30">)</operator> <operator pos:start="4625:32" pos:end="4625:33">!=</operator> <literal type="number" pos:start="4625:35" pos:end="4625:38">0xc0</literal></expr>)</condition><block type="pseudo" pos:start="4627:17" pos:end="4627:32"><block_content pos:start="4627:17" pos:end="4627:32">

                <goto pos:start="4627:17" pos:end="4627:32">goto <name pos:start="4627:22" pos:end="4627:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4629:13" pos:end="4629:27"><expr pos:start="4629:13" pos:end="4629:26"><name pos:start="4629:13" pos:end="4629:14">rm</name> <operator pos:start="4629:16" pos:end="4629:16">=</operator> <name pos:start="4629:18" pos:end="4629:22">modrm</name> <operator pos:start="4629:24" pos:end="4629:24">&amp;</operator> <literal type="number" pos:start="4629:26" pos:end="4629:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="4631:13" pos:end="4631:35"><expr pos:start="4631:13" pos:end="4631:34"><name pos:start="4631:13" pos:end="4631:15">reg</name> <operator pos:start="4631:17" pos:end="4631:17">=</operator> <operator pos:start="4631:19" pos:end="4631:19">(</operator><name pos:start="4631:20" pos:end="4631:24">modrm</name> <operator pos:start="4631:26" pos:end="4631:27">&gt;&gt;</operator> <literal type="number" pos:start="4631:29" pos:end="4631:29">3</literal><operator pos:start="4631:30" pos:end="4631:30">)</operator> <operator pos:start="4631:32" pos:end="4631:32">&amp;</operator> <literal type="number" pos:start="4631:34" pos:end="4631:34">7</literal></expr>;</expr_stmt>

            <switch pos:start="4633:13" pos:end="4667:13">switch<condition pos:start="4633:19" pos:end="4633:23">(<expr pos:start="4633:20" pos:end="4633:22"><name pos:start="4633:20" pos:end="4633:22">reg</name></expr>)</condition> <block pos:start="4633:25" pos:end="4667:13">{<block_content pos:start="4635:13" pos:end="4665:32">

            <case pos:start="4635:13" pos:end="4635:19">case <expr pos:start="4635:18" pos:end="4635:18"><literal type="number" pos:start="4635:18" pos:end="4635:18">0</literal></expr>:</case>

            <case pos:start="4637:13" pos:end="4637:19">case <expr pos:start="4637:18" pos:end="4637:18"><literal type="number" pos:start="4637:18" pos:end="4637:18">2</literal></expr>:</case>

            <case pos:start="4639:13" pos:end="4639:19">case <expr pos:start="4639:18" pos:end="4639:18"><literal type="number" pos:start="4639:18" pos:end="4639:18">3</literal></expr>:</case>

            <case pos:start="4641:13" pos:end="4641:19">case <expr pos:start="4641:18" pos:end="4641:18"><literal type="number" pos:start="4641:18" pos:end="4641:18">4</literal></expr>:</case>

                <if_stmt pos:start="4643:17" pos:end="4659:17"><if pos:start="4643:17" pos:end="4653:17">if <condition pos:start="4643:20" pos:end="4643:26">(<expr pos:start="4643:21" pos:end="4643:25"><name pos:start="4643:21" pos:end="4643:21">b</name> <operator pos:start="4643:23" pos:end="4643:23">&amp;</operator> <literal type="number" pos:start="4643:25" pos:end="4643:25">2</literal></expr>)</condition> <block pos:start="4643:28" pos:end="4653:17">{<block_content pos:start="4645:21" pos:end="4651:31">

                    <expr_stmt pos:start="4645:21" pos:end="4645:56"><expr pos:start="4645:21" pos:end="4645:55"><name pos:start="4645:21" pos:end="4645:53"><name pos:start="4645:21" pos:end="4645:37">gen_op_mov_TN_reg</name><index pos:start="4645:38" pos:end="4645:46">[<expr pos:start="4645:39" pos:end="4645:45"><name pos:start="4645:39" pos:end="4645:45">OT_LONG</name></expr>]</index><index pos:start="4645:47" pos:end="4645:49">[<expr pos:start="4645:48" pos:end="4645:48"><literal type="number" pos:start="4645:48" pos:end="4645:48">0</literal></expr>]</index><index pos:start="4645:50" pos:end="4645:53">[<expr pos:start="4645:51" pos:end="4645:52"><name pos:start="4645:51" pos:end="4645:52">rm</name></expr>]</index></name><operator pos:start="4645:54" pos:end="4645:54">(</operator><operator pos:start="4645:55" pos:end="4645:55">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="4647:21" pos:end="4647:44"><expr pos:start="4647:21" pos:end="4647:43"><call pos:start="4647:21" pos:end="4647:43"><name pos:start="4647:21" pos:end="4647:38">gen_op_movl_crN_T0</name><argument_list pos:start="4647:39" pos:end="4647:43">(<argument pos:start="4647:40" pos:end="4647:42"><expr pos:start="4647:40" pos:end="4647:42"><name pos:start="4647:40" pos:end="4647:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4649:21" pos:end="4649:54"><expr pos:start="4649:21" pos:end="4649:53"><call pos:start="4649:21" pos:end="4649:53"><name pos:start="4649:21" pos:end="4649:33">gen_op_jmp_im</name><argument_list pos:start="4649:34" pos:end="4649:53">(<argument pos:start="4649:35" pos:end="4649:52"><expr pos:start="4649:35" pos:end="4649:52"><name pos:start="4649:35" pos:end="4649:39"><name pos:start="4649:35" pos:end="4649:35">s</name><operator pos:start="4649:36" pos:end="4649:37">-&gt;</operator><name pos:start="4649:38" pos:end="4649:39">pc</name></name> <operator pos:start="4649:41" pos:end="4649:41">-</operator> <name pos:start="4649:43" pos:end="4649:52"><name pos:start="4649:43" pos:end="4649:43">s</name><operator pos:start="4649:44" pos:end="4649:45">-&gt;</operator><name pos:start="4649:46" pos:end="4649:52">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4651:21" pos:end="4651:31"><expr pos:start="4651:21" pos:end="4651:30"><call pos:start="4651:21" pos:end="4651:30"><name pos:start="4651:21" pos:end="4651:27">gen_eob</name><argument_list pos:start="4651:28" pos:end="4651:30">(<argument pos:start="4651:29" pos:end="4651:29"><expr pos:start="4651:29" pos:end="4651:29"><name pos:start="4651:29" pos:end="4651:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="4653:19" pos:end="4659:17">else <block pos:start="4653:24" pos:end="4659:17">{<block_content pos:start="4655:21" pos:end="4657:53">

                    <expr_stmt pos:start="4655:21" pos:end="4655:70"><expr pos:start="4655:21" pos:end="4655:69"><call pos:start="4655:21" pos:end="4655:69"><name pos:start="4655:21" pos:end="4655:38">gen_op_movl_T0_env</name><argument_list pos:start="4655:39" pos:end="4655:69">(<argument pos:start="4655:40" pos:end="4655:68"><expr pos:start="4655:40" pos:end="4655:68"><call pos:start="4655:40" pos:end="4655:68"><name pos:start="4655:40" pos:end="4655:47">offsetof</name><argument_list pos:start="4655:48" pos:end="4655:68">(<argument pos:start="4655:49" pos:end="4655:59"><expr pos:start="4655:49" pos:end="4655:59"><name pos:start="4655:49" pos:end="4655:59">CPUX86State</name></expr></argument>,<argument pos:start="4655:61" pos:end="4655:67"><expr pos:start="4655:61" pos:end="4655:67"><name pos:start="4655:61" pos:end="4655:67"><name pos:start="4655:61" pos:end="4655:62">cr</name><index pos:start="4655:63" pos:end="4655:67">[<expr pos:start="4655:64" pos:end="4655:66"><name pos:start="4655:64" pos:end="4655:66">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4657:21" pos:end="4657:53"><expr pos:start="4657:21" pos:end="4657:52"><name pos:start="4657:21" pos:end="4657:50"><name pos:start="4657:21" pos:end="4657:37">gen_op_mov_reg_T0</name><index pos:start="4657:38" pos:end="4657:46">[<expr pos:start="4657:39" pos:end="4657:45"><name pos:start="4657:39" pos:end="4657:45">OT_LONG</name></expr>]</index><index pos:start="4657:47" pos:end="4657:50">[<expr pos:start="4657:48" pos:end="4657:49"><name pos:start="4657:48" pos:end="4657:49">rm</name></expr>]</index></name><operator pos:start="4657:51" pos:end="4657:51">(</operator><operator pos:start="4657:52" pos:end="4657:52">)</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="4661:17" pos:end="4661:22">break;</break>

            <default pos:start="4663:13" pos:end="4663:20">default:</default>

                <goto pos:start="4665:17" pos:end="4665:32">goto <name pos:start="4665:22" pos:end="4665:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4671:9" pos:end="4671:14">break;</break>

    <case pos:start="4673:5" pos:end="4673:15">case <expr pos:start="4673:10" pos:end="4673:14"><literal type="number" pos:start="4673:10" pos:end="4673:14">0x121</literal></expr>:</case> <comment type="block" pos:start="4673:17" pos:end="4673:34">/* mov reg, drN */</comment>

    <case pos:start="4675:5" pos:end="4675:15">case <expr pos:start="4675:10" pos:end="4675:14"><literal type="number" pos:start="4675:10" pos:end="4675:14">0x123</literal></expr>:</case> <comment type="block" pos:start="4675:17" pos:end="4675:34">/* mov drN, reg */</comment>

        <if_stmt pos:start="4677:9" pos:end="4717:9"><if pos:start="4677:9" pos:end="4681:9">if <condition pos:start="4677:12" pos:end="4677:24">(<expr pos:start="4677:13" pos:end="4677:23"><name pos:start="4677:13" pos:end="4677:18"><name pos:start="4677:13" pos:end="4677:13">s</name><operator pos:start="4677:14" pos:end="4677:15">-&gt;</operator><name pos:start="4677:16" pos:end="4677:18">cpl</name></name> <operator pos:start="4677:20" pos:end="4677:21">!=</operator> <literal type="number" pos:start="4677:23" pos:end="4677:23">0</literal></expr>)</condition> <block pos:start="4677:26" pos:end="4681:9">{<block_content pos:start="4679:13" pos:end="4679:64">

            <expr_stmt pos:start="4679:13" pos:end="4679:64"><expr pos:start="4679:13" pos:end="4679:63"><call pos:start="4679:13" pos:end="4679:63"><name pos:start="4679:13" pos:end="4679:25">gen_exception</name><argument_list pos:start="4679:26" pos:end="4679:63">(<argument pos:start="4679:27" pos:end="4679:27"><expr pos:start="4679:27" pos:end="4679:27"><name pos:start="4679:27" pos:end="4679:27">s</name></expr></argument>, <argument pos:start="4679:30" pos:end="4679:39"><expr pos:start="4679:30" pos:end="4679:39"><name pos:start="4679:30" pos:end="4679:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4679:42" pos:end="4679:62"><expr pos:start="4679:42" pos:end="4679:62"><name pos:start="4679:42" pos:end="4679:49">pc_start</name> <operator pos:start="4679:51" pos:end="4679:51">-</operator> <name pos:start="4679:53" pos:end="4679:62"><name pos:start="4679:53" pos:end="4679:53">s</name><operator pos:start="4679:54" pos:end="4679:55">-&gt;</operator><name pos:start="4679:56" pos:end="4679:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4681:11" pos:end="4717:9">else <block pos:start="4681:16" pos:end="4717:9">{<block_content pos:start="4683:13" pos:end="4715:13">

            <expr_stmt pos:start="4683:13" pos:end="4683:39"><expr pos:start="4683:13" pos:end="4683:38"><name pos:start="4683:13" pos:end="4683:17">modrm</name> <operator pos:start="4683:19" pos:end="4683:19">=</operator> <call pos:start="4683:21" pos:end="4683:38"><name pos:start="4683:21" pos:end="4683:29">ldub_code</name><argument_list pos:start="4683:30" pos:end="4683:38">(<argument pos:start="4683:31" pos:end="4683:37"><expr pos:start="4683:31" pos:end="4683:37"><name pos:start="4683:31" pos:end="4683:35"><name pos:start="4683:31" pos:end="4683:31">s</name><operator pos:start="4683:32" pos:end="4683:33">-&gt;</operator><name pos:start="4683:34" pos:end="4683:35">pc</name></name><operator pos:start="4683:36" pos:end="4683:37">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4685:13" pos:end="4687:32"><if pos:start="4685:13" pos:end="4687:32">if <condition pos:start="4685:16" pos:end="4685:39">(<expr pos:start="4685:17" pos:end="4685:38"><operator pos:start="4685:17" pos:end="4685:17">(</operator><name pos:start="4685:18" pos:end="4685:22">modrm</name> <operator pos:start="4685:24" pos:end="4685:24">&amp;</operator> <literal type="number" pos:start="4685:26" pos:end="4685:29">0xc0</literal><operator pos:start="4685:30" pos:end="4685:30">)</operator> <operator pos:start="4685:32" pos:end="4685:33">!=</operator> <literal type="number" pos:start="4685:35" pos:end="4685:38">0xc0</literal></expr>)</condition><block type="pseudo" pos:start="4687:17" pos:end="4687:32"><block_content pos:start="4687:17" pos:end="4687:32">

                <goto pos:start="4687:17" pos:end="4687:32">goto <name pos:start="4687:22" pos:end="4687:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="4689:13" pos:end="4689:27"><expr pos:start="4689:13" pos:end="4689:26"><name pos:start="4689:13" pos:end="4689:14">rm</name> <operator pos:start="4689:16" pos:end="4689:16">=</operator> <name pos:start="4689:18" pos:end="4689:22">modrm</name> <operator pos:start="4689:24" pos:end="4689:24">&amp;</operator> <literal type="number" pos:start="4689:26" pos:end="4689:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="4691:13" pos:end="4691:35"><expr pos:start="4691:13" pos:end="4691:34"><name pos:start="4691:13" pos:end="4691:15">reg</name> <operator pos:start="4691:17" pos:end="4691:17">=</operator> <operator pos:start="4691:19" pos:end="4691:19">(</operator><name pos:start="4691:20" pos:end="4691:24">modrm</name> <operator pos:start="4691:26" pos:end="4691:27">&gt;&gt;</operator> <literal type="number" pos:start="4691:29" pos:end="4691:29">3</literal><operator pos:start="4691:30" pos:end="4691:30">)</operator> <operator pos:start="4691:32" pos:end="4691:32">&amp;</operator> <literal type="number" pos:start="4691:34" pos:end="4691:34">7</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="4693:13" pos:end="4693:56">/* XXX: do it dynamically with CR4.DE bit */</comment>

            <if_stmt pos:start="4695:13" pos:end="4697:32"><if pos:start="4695:13" pos:end="4697:32">if <condition pos:start="4695:16" pos:end="4695:37">(<expr pos:start="4695:17" pos:end="4695:36"><name pos:start="4695:17" pos:end="4695:19">reg</name> <operator pos:start="4695:21" pos:end="4695:22">==</operator> <literal type="number" pos:start="4695:24" pos:end="4695:24">4</literal> <operator pos:start="4695:26" pos:end="4695:27">||</operator> <name pos:start="4695:29" pos:end="4695:31">reg</name> <operator pos:start="4695:33" pos:end="4695:34">==</operator> <literal type="number" pos:start="4695:36" pos:end="4695:36">5</literal></expr>)</condition><block type="pseudo" pos:start="4697:17" pos:end="4697:32"><block_content pos:start="4697:17" pos:end="4697:32">

                <goto pos:start="4697:17" pos:end="4697:32">goto <name pos:start="4697:22" pos:end="4697:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="4699:13" pos:end="4715:13"><if pos:start="4699:13" pos:end="4709:13">if <condition pos:start="4699:16" pos:end="4699:22">(<expr pos:start="4699:17" pos:end="4699:21"><name pos:start="4699:17" pos:end="4699:17">b</name> <operator pos:start="4699:19" pos:end="4699:19">&amp;</operator> <literal type="number" pos:start="4699:21" pos:end="4699:21">2</literal></expr>)</condition> <block pos:start="4699:24" pos:end="4709:13">{<block_content pos:start="4701:17" pos:end="4707:27">

                <expr_stmt pos:start="4701:17" pos:end="4701:52"><expr pos:start="4701:17" pos:end="4701:51"><name pos:start="4701:17" pos:end="4701:49"><name pos:start="4701:17" pos:end="4701:33">gen_op_mov_TN_reg</name><index pos:start="4701:34" pos:end="4701:42">[<expr pos:start="4701:35" pos:end="4701:41"><name pos:start="4701:35" pos:end="4701:41">OT_LONG</name></expr>]</index><index pos:start="4701:43" pos:end="4701:45">[<expr pos:start="4701:44" pos:end="4701:44"><literal type="number" pos:start="4701:44" pos:end="4701:44">0</literal></expr>]</index><index pos:start="4701:46" pos:end="4701:49">[<expr pos:start="4701:47" pos:end="4701:48"><name pos:start="4701:47" pos:end="4701:48">rm</name></expr>]</index></name><operator pos:start="4701:50" pos:end="4701:50">(</operator><operator pos:start="4701:51" pos:end="4701:51">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="4703:17" pos:end="4703:40"><expr pos:start="4703:17" pos:end="4703:39"><call pos:start="4703:17" pos:end="4703:39"><name pos:start="4703:17" pos:end="4703:34">gen_op_movl_drN_T0</name><argument_list pos:start="4703:35" pos:end="4703:39">(<argument pos:start="4703:36" pos:end="4703:38"><expr pos:start="4703:36" pos:end="4703:38"><name pos:start="4703:36" pos:end="4703:38">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4705:17" pos:end="4705:50"><expr pos:start="4705:17" pos:end="4705:49"><call pos:start="4705:17" pos:end="4705:49"><name pos:start="4705:17" pos:end="4705:29">gen_op_jmp_im</name><argument_list pos:start="4705:30" pos:end="4705:49">(<argument pos:start="4705:31" pos:end="4705:48"><expr pos:start="4705:31" pos:end="4705:48"><name pos:start="4705:31" pos:end="4705:35"><name pos:start="4705:31" pos:end="4705:31">s</name><operator pos:start="4705:32" pos:end="4705:33">-&gt;</operator><name pos:start="4705:34" pos:end="4705:35">pc</name></name> <operator pos:start="4705:37" pos:end="4705:37">-</operator> <name pos:start="4705:39" pos:end="4705:48"><name pos:start="4705:39" pos:end="4705:39">s</name><operator pos:start="4705:40" pos:end="4705:41">-&gt;</operator><name pos:start="4705:42" pos:end="4705:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4707:17" pos:end="4707:27"><expr pos:start="4707:17" pos:end="4707:26"><call pos:start="4707:17" pos:end="4707:26"><name pos:start="4707:17" pos:end="4707:23">gen_eob</name><argument_list pos:start="4707:24" pos:end="4707:26">(<argument pos:start="4707:25" pos:end="4707:25"><expr pos:start="4707:25" pos:end="4707:25"><name pos:start="4707:25" pos:end="4707:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4709:15" pos:end="4715:13">else <block pos:start="4709:20" pos:end="4715:13">{<block_content pos:start="4711:17" pos:end="4713:49">

                <expr_stmt pos:start="4711:17" pos:end="4711:66"><expr pos:start="4711:17" pos:end="4711:65"><call pos:start="4711:17" pos:end="4711:65"><name pos:start="4711:17" pos:end="4711:34">gen_op_movl_T0_env</name><argument_list pos:start="4711:35" pos:end="4711:65">(<argument pos:start="4711:36" pos:end="4711:64"><expr pos:start="4711:36" pos:end="4711:64"><call pos:start="4711:36" pos:end="4711:64"><name pos:start="4711:36" pos:end="4711:43">offsetof</name><argument_list pos:start="4711:44" pos:end="4711:64">(<argument pos:start="4711:45" pos:end="4711:55"><expr pos:start="4711:45" pos:end="4711:55"><name pos:start="4711:45" pos:end="4711:55">CPUX86State</name></expr></argument>,<argument pos:start="4711:57" pos:end="4711:63"><expr pos:start="4711:57" pos:end="4711:63"><name pos:start="4711:57" pos:end="4711:63"><name pos:start="4711:57" pos:end="4711:58">dr</name><index pos:start="4711:59" pos:end="4711:63">[<expr pos:start="4711:60" pos:end="4711:62"><name pos:start="4711:60" pos:end="4711:62">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4713:17" pos:end="4713:49"><expr pos:start="4713:17" pos:end="4713:48"><name pos:start="4713:17" pos:end="4713:46"><name pos:start="4713:17" pos:end="4713:33">gen_op_mov_reg_T0</name><index pos:start="4713:34" pos:end="4713:42">[<expr pos:start="4713:35" pos:end="4713:41"><name pos:start="4713:35" pos:end="4713:41">OT_LONG</name></expr>]</index><index pos:start="4713:43" pos:end="4713:46">[<expr pos:start="4713:44" pos:end="4713:45"><name pos:start="4713:44" pos:end="4713:45">rm</name></expr>]</index></name><operator pos:start="4713:47" pos:end="4713:47">(</operator><operator pos:start="4713:48" pos:end="4713:48">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4719:9" pos:end="4719:14">break;</break>

    <case pos:start="4721:5" pos:end="4721:15">case <expr pos:start="4721:10" pos:end="4721:14"><literal type="number" pos:start="4721:10" pos:end="4721:14">0x106</literal></expr>:</case> <comment type="block" pos:start="4721:17" pos:end="4721:26">/* clts */</comment>

        <if_stmt pos:start="4723:9" pos:end="4737:9"><if pos:start="4723:9" pos:end="4727:9">if <condition pos:start="4723:12" pos:end="4723:24">(<expr pos:start="4723:13" pos:end="4723:23"><name pos:start="4723:13" pos:end="4723:18"><name pos:start="4723:13" pos:end="4723:13">s</name><operator pos:start="4723:14" pos:end="4723:15">-&gt;</operator><name pos:start="4723:16" pos:end="4723:18">cpl</name></name> <operator pos:start="4723:20" pos:end="4723:21">!=</operator> <literal type="number" pos:start="4723:23" pos:end="4723:23">0</literal></expr>)</condition> <block pos:start="4723:26" pos:end="4727:9">{<block_content pos:start="4725:13" pos:end="4725:64">

            <expr_stmt pos:start="4725:13" pos:end="4725:64"><expr pos:start="4725:13" pos:end="4725:63"><call pos:start="4725:13" pos:end="4725:63"><name pos:start="4725:13" pos:end="4725:25">gen_exception</name><argument_list pos:start="4725:26" pos:end="4725:63">(<argument pos:start="4725:27" pos:end="4725:27"><expr pos:start="4725:27" pos:end="4725:27"><name pos:start="4725:27" pos:end="4725:27">s</name></expr></argument>, <argument pos:start="4725:30" pos:end="4725:39"><expr pos:start="4725:30" pos:end="4725:39"><name pos:start="4725:30" pos:end="4725:39">EXCP0D_GPF</name></expr></argument>, <argument pos:start="4725:42" pos:end="4725:62"><expr pos:start="4725:42" pos:end="4725:62"><name pos:start="4725:42" pos:end="4725:49">pc_start</name> <operator pos:start="4725:51" pos:end="4725:51">-</operator> <name pos:start="4725:53" pos:end="4725:62"><name pos:start="4725:53" pos:end="4725:53">s</name><operator pos:start="4725:54" pos:end="4725:55">-&gt;</operator><name pos:start="4725:56" pos:end="4725:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="4727:11" pos:end="4737:9">else <block pos:start="4727:16" pos:end="4737:9">{<block_content pos:start="4729:13" pos:end="4735:23">

            <expr_stmt pos:start="4729:13" pos:end="4729:26"><expr pos:start="4729:13" pos:end="4729:25"><call pos:start="4729:13" pos:end="4729:25"><name pos:start="4729:13" pos:end="4729:23">gen_op_clts</name><argument_list pos:start="4729:24" pos:end="4729:25">()</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="4731:13" pos:end="4731:62">/* abort block because static cpu state changed */</comment>

            <expr_stmt pos:start="4733:13" pos:end="4733:46"><expr pos:start="4733:13" pos:end="4733:45"><call pos:start="4733:13" pos:end="4733:45"><name pos:start="4733:13" pos:end="4733:25">gen_op_jmp_im</name><argument_list pos:start="4733:26" pos:end="4733:45">(<argument pos:start="4733:27" pos:end="4733:44"><expr pos:start="4733:27" pos:end="4733:44"><name pos:start="4733:27" pos:end="4733:31"><name pos:start="4733:27" pos:end="4733:27">s</name><operator pos:start="4733:28" pos:end="4733:29">-&gt;</operator><name pos:start="4733:30" pos:end="4733:31">pc</name></name> <operator pos:start="4733:33" pos:end="4733:33">-</operator> <name pos:start="4733:35" pos:end="4733:44"><name pos:start="4733:35" pos:end="4733:35">s</name><operator pos:start="4733:36" pos:end="4733:37">-&gt;</operator><name pos:start="4733:38" pos:end="4733:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="4735:13" pos:end="4735:23"><expr pos:start="4735:13" pos:end="4735:22"><call pos:start="4735:13" pos:end="4735:22"><name pos:start="4735:13" pos:end="4735:19">gen_eob</name><argument_list pos:start="4735:20" pos:end="4735:22">(<argument pos:start="4735:21" pos:end="4735:21"><expr pos:start="4735:21" pos:end="4735:21"><name pos:start="4735:21" pos:end="4735:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="4739:9" pos:end="4739:14">break;</break>

    <default pos:start="4741:5" pos:end="4741:12">default:</default>

        <goto pos:start="4743:9" pos:end="4743:24">goto <name pos:start="4743:14" pos:end="4743:23">illegal_op</name>;</goto>

    </block_content>}</block></switch>

    <comment type="block" pos:start="4747:5" pos:end="4747:25">/* lock generation */</comment>

    <if_stmt pos:start="4749:5" pos:end="4751:24"><if pos:start="4749:5" pos:end="4751:24">if <condition pos:start="4749:8" pos:end="4749:32">(<expr pos:start="4749:9" pos:end="4749:31"><name pos:start="4749:9" pos:end="4749:17"><name pos:start="4749:9" pos:end="4749:9">s</name><operator pos:start="4749:10" pos:end="4749:11">-&gt;</operator><name pos:start="4749:12" pos:end="4749:17">prefix</name></name> <operator pos:start="4749:19" pos:end="4749:19">&amp;</operator> <name pos:start="4749:21" pos:end="4749:31">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="4751:9" pos:end="4751:24"><block_content pos:start="4751:9" pos:end="4751:24">

        <expr_stmt pos:start="4751:9" pos:end="4751:24"><expr pos:start="4751:9" pos:end="4751:23"><call pos:start="4751:9" pos:end="4751:23"><name pos:start="4751:9" pos:end="4751:21">gen_op_unlock</name><argument_list pos:start="4751:22" pos:end="4751:23">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="4753:5" pos:end="4753:17">return <expr pos:start="4753:12" pos:end="4753:16"><name pos:start="4753:12" pos:end="4753:16"><name pos:start="4753:12" pos:end="4753:12">s</name><operator pos:start="4753:13" pos:end="4753:14">-&gt;</operator><name pos:start="4753:15" pos:end="4753:16">pc</name></name></expr>;</return>

 <label pos:start="4755:2" pos:end="4755:12"><name pos:start="4755:2" pos:end="4755:11">illegal_op</name>:</label>

    <if_stmt pos:start="4757:5" pos:end="4759:24"><if pos:start="4757:5" pos:end="4759:24">if <condition pos:start="4757:8" pos:end="4757:32">(<expr pos:start="4757:9" pos:end="4757:31"><name pos:start="4757:9" pos:end="4757:17"><name pos:start="4757:9" pos:end="4757:9">s</name><operator pos:start="4757:10" pos:end="4757:11">-&gt;</operator><name pos:start="4757:12" pos:end="4757:17">prefix</name></name> <operator pos:start="4757:19" pos:end="4757:19">&amp;</operator> <name pos:start="4757:21" pos:end="4757:31">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="4759:9" pos:end="4759:24"><block_content pos:start="4759:9" pos:end="4759:24">

        <expr_stmt pos:start="4759:9" pos:end="4759:24"><expr pos:start="4759:9" pos:end="4759:23"><call pos:start="4759:9" pos:end="4759:23"><name pos:start="4759:9" pos:end="4759:21">gen_op_unlock</name><argument_list pos:start="4759:22" pos:end="4759:23">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="4761:5" pos:end="4761:48">/* XXX: ensure that no lock was generated */</comment>

    <expr_stmt pos:start="4763:5" pos:end="4763:58"><expr pos:start="4763:5" pos:end="4763:57"><call pos:start="4763:5" pos:end="4763:57"><name pos:start="4763:5" pos:end="4763:17">gen_exception</name><argument_list pos:start="4763:18" pos:end="4763:57">(<argument pos:start="4763:19" pos:end="4763:19"><expr pos:start="4763:19" pos:end="4763:19"><name pos:start="4763:19" pos:end="4763:19">s</name></expr></argument>, <argument pos:start="4763:22" pos:end="4763:33"><expr pos:start="4763:22" pos:end="4763:33"><name pos:start="4763:22" pos:end="4763:33">EXCP06_ILLOP</name></expr></argument>, <argument pos:start="4763:36" pos:end="4763:56"><expr pos:start="4763:36" pos:end="4763:56"><name pos:start="4763:36" pos:end="4763:43">pc_start</name> <operator pos:start="4763:45" pos:end="4763:45">-</operator> <name pos:start="4763:47" pos:end="4763:56"><name pos:start="4763:47" pos:end="4763:47">s</name><operator pos:start="4763:48" pos:end="4763:49">-&gt;</operator><name pos:start="4763:50" pos:end="4763:56">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="4765:5" pos:end="4765:17">return <expr pos:start="4765:12" pos:end="4765:16"><name pos:start="4765:12" pos:end="4765:16"><name pos:start="4765:12" pos:end="4765:12">s</name><operator pos:start="4765:13" pos:end="4765:14">-&gt;</operator><name pos:start="4765:15" pos:end="4765:16">pc</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
