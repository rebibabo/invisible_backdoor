<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11195.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">get_device_guid</name><parameter_list pos:start="1:27" pos:end="9:25">(

    <parameter pos:start="3:5" pos:end="3:14"><decl pos:start="3:5" pos:end="3:14"><type pos:start="3:5" pos:end="3:14"><name pos:start="3:5" pos:end="3:8">char</name> <modifier pos:start="3:10" pos:end="3:10">*</modifier></type><name pos:start="3:11" pos:end="3:14">name</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:17">name_size</name></decl></parameter>,

    <parameter pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:21">actual_name</name></decl></parameter>,

    <parameter pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:24">actual_name_size</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="209:1">{<block_content pos:start="13:5" pos:end="207:13">

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">LONG</name></type> <name pos:start="13:10" pos:end="13:15">status</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">HKEY</name></type> <name pos:start="15:10" pos:end="15:24">control_net_key</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:9"><name pos:start="17:5" pos:end="17:9">DWORD</name></type> <name pos:start="17:11" pos:end="17:13">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:14"><decl pos:start="19:5" pos:end="19:13"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name> <init pos:start="19:11" pos:end="19:13">= <expr pos:start="19:13" pos:end="19:13"><literal type="number" pos:start="19:13" pos:end="19:13">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:17"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:12">stop</name> <init pos:start="21:14" pos:end="21:16">= <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="35:26"><expr pos:start="25:5" pos:end="35:25"><name pos:start="25:5" pos:end="25:10">status</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <call pos:start="25:14" pos:end="35:25"><name pos:start="25:14" pos:end="25:25">RegOpenKeyEx</name><argument_list pos:start="25:26" pos:end="35:25">(

        <argument pos:start="27:9" pos:end="27:26"><expr pos:start="27:9" pos:end="27:26"><name pos:start="27:9" pos:end="27:26">HKEY_LOCAL_MACHINE</name></expr></argument>,

        <argument pos:start="29:9" pos:end="29:31"><expr pos:start="29:9" pos:end="29:31"><name pos:start="29:9" pos:end="29:31">NETWORK_CONNECTIONS_KEY</name></expr></argument>,

        <argument pos:start="31:9" pos:end="31:9"><expr pos:start="31:9" pos:end="31:9"><literal type="number" pos:start="31:9" pos:end="31:9">0</literal></expr></argument>,

        <argument pos:start="33:9" pos:end="33:16"><expr pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:16">KEY_READ</name></expr></argument>,

        <argument pos:start="35:9" pos:end="35:24"><expr pos:start="35:9" pos:end="35:24"><operator pos:start="35:9" pos:end="35:9">&amp;</operator><name pos:start="35:10" pos:end="35:24">control_net_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:32">(<expr pos:start="39:9" pos:end="39:31"><name pos:start="39:9" pos:end="39:14">status</name> <operator pos:start="39:16" pos:end="39:17">!=</operator> <name pos:start="39:19" pos:end="39:31">ERROR_SUCCESS</name></expr>)</condition> <block pos:start="39:34" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:18">

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="47:5" pos:end="193:5">while <condition pos:start="47:11" pos:end="47:17">(<expr pos:start="47:12" pos:end="47:16"><operator pos:start="47:12" pos:end="47:12">!</operator><name pos:start="47:13" pos:end="47:16">stop</name></expr>)</condition>

    <block pos:start="49:5" pos:end="193:5">{<block_content pos:start="51:9" pos:end="191:12">

        <decl_stmt pos:start="51:9" pos:end="51:28"><decl pos:start="51:9" pos:end="51:27"><type pos:start="51:9" pos:end="51:12"><name pos:start="51:9" pos:end="51:12">char</name></type> <name pos:start="51:14" pos:end="51:27"><name pos:start="51:14" pos:end="51:22">enum_name</name><index pos:start="51:23" pos:end="51:27">[<expr pos:start="51:24" pos:end="51:26"><literal type="number" pos:start="51:24" pos:end="51:26">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="53:9" pos:end="53:36"><decl pos:start="53:9" pos:end="53:35"><type pos:start="53:9" pos:end="53:12"><name pos:start="53:9" pos:end="53:12">char</name></type> <name pos:start="53:14" pos:end="53:35"><name pos:start="53:14" pos:end="53:30">connection_string</name><index pos:start="53:31" pos:end="53:35">[<expr pos:start="53:32" pos:end="53:34"><literal type="number" pos:start="53:32" pos:end="53:34">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:28"><decl pos:start="55:9" pos:end="55:27"><type pos:start="55:9" pos:end="55:12"><name pos:start="55:9" pos:end="55:12">HKEY</name></type> <name pos:start="55:14" pos:end="55:27">connection_key</name></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:28"><decl pos:start="57:9" pos:end="57:27"><type pos:start="57:9" pos:end="57:12"><name pos:start="57:9" pos:end="57:12">char</name></type> <name pos:start="57:14" pos:end="57:27"><name pos:start="57:14" pos:end="57:22">name_data</name><index pos:start="57:23" pos:end="57:27">[<expr pos:start="57:24" pos:end="57:26"><literal type="number" pos:start="57:24" pos:end="57:26">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="59:9" pos:end="59:24"><decl pos:start="59:9" pos:end="59:23"><type pos:start="59:9" pos:end="59:13"><name pos:start="59:9" pos:end="59:13">DWORD</name></type> <name pos:start="59:15" pos:end="59:23">name_type</name></decl>;</decl_stmt>

        <decl_stmt pos:start="61:9" pos:end="61:42"><decl pos:start="61:9" pos:end="61:41"><type pos:start="61:9" pos:end="61:18"><specifier pos:start="61:9" pos:end="61:13">const</specifier> <name pos:start="61:15" pos:end="61:18">char</name></type> <name pos:start="61:20" pos:end="61:32"><name pos:start="61:20" pos:end="61:30">name_string</name><index pos:start="61:31" pos:end="61:32">[]</index></name> <init pos:start="61:34" pos:end="61:41">= <expr pos:start="61:36" pos:end="61:41"><literal type="string" pos:start="61:36" pos:end="61:41">"Name"</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:33"><expr pos:start="65:9" pos:end="65:32"><name pos:start="65:9" pos:end="65:11">len</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <sizeof pos:start="65:15" pos:end="65:32">sizeof <argument_list pos:start="65:22" pos:end="65:32">(<argument pos:start="65:23" pos:end="65:31"><expr pos:start="65:23" pos:end="65:31"><name pos:start="65:23" pos:end="65:31">enum_name</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="83:18"><expr pos:start="67:9" pos:end="83:17"><name pos:start="67:9" pos:end="67:14">status</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <call pos:start="67:18" pos:end="83:17"><name pos:start="67:18" pos:end="67:29">RegEnumKeyEx</name><argument_list pos:start="67:30" pos:end="83:17">(

            <argument pos:start="69:13" pos:end="69:27"><expr pos:start="69:13" pos:end="69:27"><name pos:start="69:13" pos:end="69:27">control_net_key</name></expr></argument>,

            <argument pos:start="71:13" pos:end="71:13"><expr pos:start="71:13" pos:end="71:13"><name pos:start="71:13" pos:end="71:13">i</name></expr></argument>,

            <argument pos:start="73:13" pos:end="73:21"><expr pos:start="73:13" pos:end="73:21"><name pos:start="73:13" pos:end="73:21">enum_name</name></expr></argument>,

            <argument pos:start="75:13" pos:end="75:16"><expr pos:start="75:13" pos:end="75:16"><operator pos:start="75:13" pos:end="75:13">&amp;</operator><name pos:start="75:14" pos:end="75:16">len</name></expr></argument>,

            <argument pos:start="77:13" pos:end="77:16"><expr pos:start="77:13" pos:end="77:16"><name pos:start="77:13" pos:end="77:16">NULL</name></expr></argument>,

            <argument pos:start="79:13" pos:end="79:16"><expr pos:start="79:13" pos:end="79:16"><name pos:start="79:13" pos:end="79:16">NULL</name></expr></argument>,

            <argument pos:start="81:13" pos:end="81:16"><expr pos:start="81:13" pos:end="81:16"><name pos:start="81:13" pos:end="81:16">NULL</name></expr></argument>,

            <argument pos:start="83:13" pos:end="83:16"><expr pos:start="83:13" pos:end="83:16"><name pos:start="83:13" pos:end="83:16">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="87:9" pos:end="95:9"><if pos:start="87:9" pos:end="89:18">if <condition pos:start="87:12" pos:end="87:42">(<expr pos:start="87:13" pos:end="87:41"><name pos:start="87:13" pos:end="87:18">status</name> <operator pos:start="87:20" pos:end="87:21">==</operator> <name pos:start="87:23" pos:end="87:41">ERROR_NO_MORE_ITEMS</name></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:18"><block_content pos:start="89:13" pos:end="89:18">

            <break pos:start="89:13" pos:end="89:18">break;</break></block_content></block></if>

        <if type="elseif" pos:start="91:9" pos:end="95:9">else if <condition pos:start="91:17" pos:end="91:41">(<expr pos:start="91:18" pos:end="91:40"><name pos:start="91:18" pos:end="91:23">status</name> <operator pos:start="91:25" pos:end="91:26">!=</operator> <name pos:start="91:28" pos:end="91:40">ERROR_SUCCESS</name></expr>)</condition> <block pos:start="91:43" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:22">

            <return pos:start="93:13" pos:end="93:22">return <expr pos:start="93:20" pos:end="93:21"><operator pos:start="93:20" pos:end="93:20">-</operator><literal type="number" pos:start="93:21" pos:end="93:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="99:9" pos:end="105:49"><expr pos:start="99:9" pos:end="105:48"><call pos:start="99:9" pos:end="105:48"><name pos:start="99:9" pos:end="99:16">snprintf</name><argument_list pos:start="99:17" pos:end="105:48">(<argument pos:start="99:18" pos:end="99:34"><expr pos:start="99:18" pos:end="99:34"><name pos:start="99:18" pos:end="99:34">connection_string</name></expr></argument>,

             <argument pos:start="101:14" pos:end="101:38"><expr pos:start="101:14" pos:end="101:38"><sizeof pos:start="101:14" pos:end="101:38">sizeof<argument_list pos:start="101:20" pos:end="101:38">(<argument pos:start="101:21" pos:end="101:37"><expr pos:start="101:21" pos:end="101:37"><name pos:start="101:21" pos:end="101:37">connection_string</name></expr></argument>)</argument_list></sizeof></expr></argument>,

             <argument pos:start="103:14" pos:end="103:33"><expr pos:start="103:14" pos:end="103:33"><literal type="string" pos:start="103:14" pos:end="103:33">"%s\\%s\\Connection"</literal></expr></argument>,

             <argument pos:start="105:14" pos:end="105:36"><expr pos:start="105:14" pos:end="105:36"><name pos:start="105:14" pos:end="105:36">NETWORK_CONNECTIONS_KEY</name></expr></argument>, <argument pos:start="105:39" pos:end="105:47"><expr pos:start="105:39" pos:end="105:47"><name pos:start="105:39" pos:end="105:47">enum_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="109:9" pos:end="119:29"><expr pos:start="109:9" pos:end="119:28"><name pos:start="109:9" pos:end="109:14">status</name> <operator pos:start="109:16" pos:end="109:16">=</operator> <call pos:start="109:18" pos:end="119:28"><name pos:start="109:18" pos:end="109:29">RegOpenKeyEx</name><argument_list pos:start="109:30" pos:end="119:28">(

            <argument pos:start="111:13" pos:end="111:30"><expr pos:start="111:13" pos:end="111:30"><name pos:start="111:13" pos:end="111:30">HKEY_LOCAL_MACHINE</name></expr></argument>,

            <argument pos:start="113:13" pos:end="113:29"><expr pos:start="113:13" pos:end="113:29"><name pos:start="113:13" pos:end="113:29">connection_string</name></expr></argument>,

            <argument pos:start="115:13" pos:end="115:13"><expr pos:start="115:13" pos:end="115:13"><literal type="number" pos:start="115:13" pos:end="115:13">0</literal></expr></argument>,

            <argument pos:start="117:13" pos:end="117:20"><expr pos:start="117:13" pos:end="117:20"><name pos:start="117:13" pos:end="117:20">KEY_READ</name></expr></argument>,

            <argument pos:start="119:13" pos:end="119:27"><expr pos:start="119:13" pos:end="119:27"><operator pos:start="119:13" pos:end="119:13">&amp;</operator><name pos:start="119:14" pos:end="119:27">connection_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="123:9" pos:end="189:9"><if pos:start="123:9" pos:end="189:9">if <condition pos:start="123:12" pos:end="123:36">(<expr pos:start="123:13" pos:end="123:35"><name pos:start="123:13" pos:end="123:18">status</name> <operator pos:start="123:20" pos:end="123:21">==</operator> <name pos:start="123:23" pos:end="123:35">ERROR_SUCCESS</name></expr>)</condition> <block pos:start="123:38" pos:end="189:9">{<block_content pos:start="125:13" pos:end="187:41">

            <expr_stmt pos:start="125:13" pos:end="125:37"><expr pos:start="125:13" pos:end="125:36"><name pos:start="125:13" pos:end="125:15">len</name> <operator pos:start="125:17" pos:end="125:17">=</operator> <sizeof pos:start="125:19" pos:end="125:36">sizeof <argument_list pos:start="125:26" pos:end="125:36">(<argument pos:start="125:27" pos:end="125:35"><expr pos:start="125:27" pos:end="125:35"><name pos:start="125:27" pos:end="125:35">name_data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="139:22"><expr pos:start="127:13" pos:end="139:21"><name pos:start="127:13" pos:end="127:18">status</name> <operator pos:start="127:20" pos:end="127:20">=</operator> <call pos:start="127:22" pos:end="139:21"><name pos:start="127:22" pos:end="127:36">RegQueryValueEx</name><argument_list pos:start="127:37" pos:end="139:21">(

                <argument pos:start="129:17" pos:end="129:30"><expr pos:start="129:17" pos:end="129:30"><name pos:start="129:17" pos:end="129:30">connection_key</name></expr></argument>,

                <argument pos:start="131:17" pos:end="131:27"><expr pos:start="131:17" pos:end="131:27"><name pos:start="131:17" pos:end="131:27">name_string</name></expr></argument>,

                <argument pos:start="133:17" pos:end="133:20"><expr pos:start="133:17" pos:end="133:20"><name pos:start="133:17" pos:end="133:20">NULL</name></expr></argument>,

                <argument pos:start="135:17" pos:end="135:26"><expr pos:start="135:17" pos:end="135:26"><operator pos:start="135:17" pos:end="135:17">&amp;</operator><name pos:start="135:18" pos:end="135:26">name_type</name></expr></argument>,

                <argument pos:start="137:17" pos:end="137:33"><expr pos:start="137:17" pos:end="137:33"><operator pos:start="137:17" pos:end="137:17">(</operator><name pos:start="137:18" pos:end="137:23">LPBYTE</name><operator pos:start="137:24" pos:end="137:24">)</operator><name pos:start="137:25" pos:end="137:33">name_data</name></expr></argument>,

                <argument pos:start="139:17" pos:end="139:20"><expr pos:start="139:17" pos:end="139:20"><operator pos:start="139:17" pos:end="139:17">&amp;</operator><name pos:start="139:18" pos:end="139:20">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="143:13" pos:end="183:13"><if pos:start="143:13" pos:end="147:13">if <condition pos:start="143:16" pos:end="143:63">(<expr pos:start="143:17" pos:end="143:62"><name pos:start="143:17" pos:end="143:22">status</name> <operator pos:start="143:24" pos:end="143:25">!=</operator> <name pos:start="143:27" pos:end="143:39">ERROR_SUCCESS</name> <operator pos:start="143:41" pos:end="143:42">||</operator> <name pos:start="143:44" pos:end="143:52">name_type</name> <operator pos:start="143:54" pos:end="143:55">!=</operator> <name pos:start="143:57" pos:end="143:62">REG_SZ</name></expr>)</condition> <block pos:start="143:65" pos:end="147:13">{<block_content pos:start="145:21" pos:end="145:30">

                    <return pos:start="145:21" pos:end="145:30">return <expr pos:start="145:28" pos:end="145:29"><operator pos:start="145:28" pos:end="145:28">-</operator><literal type="number" pos:start="145:29" pos:end="145:29">1</literal></expr>;</return>

            </block_content>}</block></if>

            <else pos:start="149:13" pos:end="183:13">else <block pos:start="149:18" pos:end="183:13">{<block_content pos:start="151:17" pos:end="181:17">

                <if_stmt pos:start="151:17" pos:end="181:17"><if pos:start="151:17" pos:end="181:17">if <condition pos:start="151:20" pos:end="151:48">(<expr pos:start="151:21" pos:end="151:47"><call pos:start="151:21" pos:end="151:47"><name pos:start="151:21" pos:end="151:36">is_tap_win32_dev</name><argument_list pos:start="151:37" pos:end="151:47">(<argument pos:start="151:38" pos:end="151:46"><expr pos:start="151:38" pos:end="151:46"><name pos:start="151:38" pos:end="151:46">enum_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="151:50" pos:end="181:17">{<block_content pos:start="153:21" pos:end="179:29">

                    <expr_stmt pos:start="153:21" pos:end="153:63"><expr pos:start="153:21" pos:end="153:62"><call pos:start="153:21" pos:end="153:62"><name pos:start="153:21" pos:end="153:28">snprintf</name><argument_list pos:start="153:29" pos:end="153:62">(<argument pos:start="153:30" pos:end="153:33"><expr pos:start="153:30" pos:end="153:33"><name pos:start="153:30" pos:end="153:33">name</name></expr></argument>, <argument pos:start="153:36" pos:end="153:44"><expr pos:start="153:36" pos:end="153:44"><name pos:start="153:36" pos:end="153:44">name_size</name></expr></argument>, <argument pos:start="153:47" pos:end="153:50"><expr pos:start="153:47" pos:end="153:50"><literal type="string" pos:start="153:47" pos:end="153:50">"%s"</literal></expr></argument>, <argument pos:start="153:53" pos:end="153:61"><expr pos:start="153:53" pos:end="153:61"><name pos:start="153:53" pos:end="153:61">enum_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="155:21" pos:end="177:21"><if pos:start="155:21" pos:end="177:21">if <condition pos:start="155:24" pos:end="155:36">(<expr pos:start="155:25" pos:end="155:35"><name pos:start="155:25" pos:end="155:35">actual_name</name></expr>)</condition> <block pos:start="155:38" pos:end="177:21">{<block_content pos:start="157:25" pos:end="175:25">

                        <if_stmt pos:start="157:25" pos:end="175:25"><if pos:start="157:25" pos:end="169:25">if <condition pos:start="157:28" pos:end="157:57">(<expr pos:start="157:29" pos:end="157:56"><call pos:start="157:29" pos:end="157:51"><name pos:start="157:29" pos:end="157:34">strcmp</name><argument_list pos:start="157:35" pos:end="157:51">(<argument pos:start="157:36" pos:end="157:46"><expr pos:start="157:36" pos:end="157:46"><name pos:start="157:36" pos:end="157:46">actual_name</name></expr></argument>, <argument pos:start="157:49" pos:end="157:50"><expr pos:start="157:49" pos:end="157:50"><literal type="string" pos:start="157:49" pos:end="157:50">""</literal></expr></argument>)</argument_list></call> <operator pos:start="157:53" pos:end="157:54">!=</operator> <literal type="number" pos:start="157:56" pos:end="157:56">0</literal></expr>)</condition> <block pos:start="157:59" pos:end="169:25">{<block_content pos:start="159:29" pos:end="167:29">

                            <if_stmt pos:start="159:29" pos:end="167:29"><if pos:start="159:29" pos:end="167:29">if <condition pos:start="159:32" pos:end="159:68">(<expr pos:start="159:33" pos:end="159:67"><call pos:start="159:33" pos:end="159:62"><name pos:start="159:33" pos:end="159:38">strcmp</name><argument_list pos:start="159:39" pos:end="159:62">(<argument pos:start="159:40" pos:end="159:48"><expr pos:start="159:40" pos:end="159:48"><name pos:start="159:40" pos:end="159:48">name_data</name></expr></argument>, <argument pos:start="159:51" pos:end="159:61"><expr pos:start="159:51" pos:end="159:61"><name pos:start="159:51" pos:end="159:61">actual_name</name></expr></argument>)</argument_list></call> <operator pos:start="159:64" pos:end="159:65">!=</operator> <literal type="number" pos:start="159:67" pos:end="159:67">0</literal></expr>)</condition> <block pos:start="159:70" pos:end="167:29">{<block_content pos:start="161:33" pos:end="165:41">

                                <expr_stmt pos:start="161:33" pos:end="161:61"><expr pos:start="161:33" pos:end="161:60"><call pos:start="161:33" pos:end="161:60"><name pos:start="161:33" pos:end="161:43">RegCloseKey</name> <argument_list pos:start="161:45" pos:end="161:60">(<argument pos:start="161:46" pos:end="161:59"><expr pos:start="161:46" pos:end="161:59"><name pos:start="161:46" pos:end="161:59">connection_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="163:33" pos:end="163:36"><expr pos:start="163:33" pos:end="163:35"><operator pos:start="163:33" pos:end="163:34">++</operator><name pos:start="163:35" pos:end="163:35">i</name></expr>;</expr_stmt>

                                <continue pos:start="165:33" pos:end="165:41">continue;</continue>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></if>

                        <else pos:start="171:25" pos:end="175:25">else <block pos:start="171:30" pos:end="175:25">{<block_content pos:start="173:29" pos:end="173:85">

                            <expr_stmt pos:start="173:29" pos:end="173:85"><expr pos:start="173:29" pos:end="173:84"><call pos:start="173:29" pos:end="173:84"><name pos:start="173:29" pos:end="173:36">snprintf</name><argument_list pos:start="173:37" pos:end="173:84">(<argument pos:start="173:38" pos:end="173:48"><expr pos:start="173:38" pos:end="173:48"><name pos:start="173:38" pos:end="173:48">actual_name</name></expr></argument>, <argument pos:start="173:51" pos:end="173:66"><expr pos:start="173:51" pos:end="173:66"><name pos:start="173:51" pos:end="173:66">actual_name_size</name></expr></argument>, <argument pos:start="173:69" pos:end="173:72"><expr pos:start="173:69" pos:end="173:72"><literal type="string" pos:start="173:69" pos:end="173:72">"%s"</literal></expr></argument>, <argument pos:start="173:75" pos:end="173:83"><expr pos:start="173:75" pos:end="173:83"><name pos:start="173:75" pos:end="173:83">name_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="179:21" pos:end="179:29"><expr pos:start="179:21" pos:end="179:28"><name pos:start="179:21" pos:end="179:24">stop</name> <operator pos:start="179:26" pos:end="179:26">=</operator> <literal type="number" pos:start="179:28" pos:end="179:28">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="187:13" pos:end="187:41"><expr pos:start="187:13" pos:end="187:40"><call pos:start="187:13" pos:end="187:40"><name pos:start="187:13" pos:end="187:23">RegCloseKey</name> <argument_list pos:start="187:25" pos:end="187:40">(<argument pos:start="187:26" pos:end="187:39"><expr pos:start="187:26" pos:end="187:39"><name pos:start="187:26" pos:end="187:39">connection_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:12"><expr pos:start="191:9" pos:end="191:11"><operator pos:start="191:9" pos:end="191:10">++</operator><name pos:start="191:11" pos:end="191:11">i</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="197:5" pos:end="197:34"><expr pos:start="197:5" pos:end="197:33"><call pos:start="197:5" pos:end="197:33"><name pos:start="197:5" pos:end="197:15">RegCloseKey</name> <argument_list pos:start="197:17" pos:end="197:33">(<argument pos:start="197:18" pos:end="197:32"><expr pos:start="197:18" pos:end="197:32"><name pos:start="197:18" pos:end="197:32">control_net_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="201:5" pos:end="203:18"><if pos:start="201:5" pos:end="203:18">if <condition pos:start="201:8" pos:end="201:18">(<expr pos:start="201:9" pos:end="201:17"><name pos:start="201:9" pos:end="201:12">stop</name> <operator pos:start="201:14" pos:end="201:15">==</operator> <literal type="number" pos:start="201:17" pos:end="201:17">0</literal></expr>)</condition><block type="pseudo" pos:start="203:9" pos:end="203:18"><block_content pos:start="203:9" pos:end="203:18">

        <return pos:start="203:9" pos:end="203:18">return <expr pos:start="203:16" pos:end="203:17"><operator pos:start="203:16" pos:end="203:16">-</operator><literal type="number" pos:start="203:17" pos:end="203:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="207:5" pos:end="207:13">return <expr pos:start="207:12" pos:end="207:12"><literal type="number" pos:start="207:12" pos:end="207:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
