<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2112.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">pci_pcnet_init</name><parameter_list pos:start="1:26" pos:end="1:45">(<parameter pos:start="1:27" pos:end="1:44"><decl pos:start="1:27" pos:end="1:44"><type pos:start="1:27" pos:end="1:37"><name pos:start="1:27" pos:end="1:35">PCIDevice</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:44">pci_dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:70">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">PCIPCNetState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">d</name> <init pos:start="5:22" pos:end="5:41">= <expr pos:start="5:24" pos:end="5:41"><call pos:start="5:24" pos:end="5:41"><name pos:start="5:24" pos:end="5:32">PCI_PCNET</name><argument_list pos:start="5:33" pos:end="5:41">(<argument pos:start="5:34" pos:end="5:40"><expr pos:start="5:34" pos:end="5:40"><name pos:start="5:34" pos:end="5:40">pci_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">PCNetState</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">s</name> <init pos:start="7:19" pos:end="7:29">= <expr pos:start="7:21" pos:end="7:29"><operator pos:start="7:21" pos:end="7:21">&amp;</operator><name pos:start="7:22" pos:end="7:29"><name pos:start="7:22" pos:end="7:22">d</name><operator pos:start="7:23" pos:end="7:24">-&gt;</operator><name pos:start="7:25" pos:end="7:29">state</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="20:0"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:21">pci_conf</name></decl>;</decl_stmt>



<cpp:if pos:start="13:1" pos:end="13:5">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:5"><literal type="number" pos:start="13:5" pos:end="13:5">0</literal></expr></cpp:if>

    printf("sizeof(RMD)=%d, sizeof(TMD)=%d\n",

        sizeof(struct pcnet_RMD), sizeof(struct pcnet_TMD));

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="23:5" pos:end="23:31"><expr pos:start="23:5" pos:end="23:30"><name pos:start="23:5" pos:end="23:12">pci_conf</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:22">pci_dev</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:30">config</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="29:66"><expr pos:start="27:5" pos:end="29:65"><call pos:start="27:5" pos:end="29:65"><name pos:start="27:5" pos:end="27:16">pci_set_word</name><argument_list pos:start="27:17" pos:end="29:65">(<argument pos:start="27:18" pos:end="27:38"><expr pos:start="27:18" pos:end="27:38"><name pos:start="27:18" pos:end="27:25">pci_conf</name> <operator pos:start="27:27" pos:end="27:27">+</operator> <name pos:start="27:29" pos:end="27:38">PCI_STATUS</name></expr></argument>,

                 <argument pos:start="29:18" pos:end="29:64"><expr pos:start="29:18" pos:end="29:64"><name pos:start="29:18" pos:end="29:37">PCI_STATUS_FAST_BACK</name> <operator pos:start="29:39" pos:end="29:39">|</operator> <name pos:start="29:41" pos:end="29:64">PCI_STATUS_DEVSEL_MEDIUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:58"><expr pos:start="33:5" pos:end="33:57"><call pos:start="33:5" pos:end="33:57"><name pos:start="33:5" pos:end="33:16">pci_set_word</name><argument_list pos:start="33:17" pos:end="33:57">(<argument pos:start="33:18" pos:end="33:51"><expr pos:start="33:18" pos:end="33:51"><name pos:start="33:18" pos:end="33:25">pci_conf</name> <operator pos:start="33:27" pos:end="33:27">+</operator> <name pos:start="33:29" pos:end="33:51">PCI_SUBSYSTEM_VENDOR_ID</name></expr></argument>, <argument pos:start="33:54" pos:end="33:56"><expr pos:start="33:54" pos:end="33:56"><literal type="number" pos:start="33:54" pos:end="33:56">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:51"><expr pos:start="35:5" pos:end="35:50"><call pos:start="35:5" pos:end="35:50"><name pos:start="35:5" pos:end="35:16">pci_set_word</name><argument_list pos:start="35:17" pos:end="35:50">(<argument pos:start="35:18" pos:end="35:44"><expr pos:start="35:18" pos:end="35:44"><name pos:start="35:18" pos:end="35:25">pci_conf</name> <operator pos:start="35:27" pos:end="35:27">+</operator> <name pos:start="35:29" pos:end="35:44">PCI_SUBSYSTEM_ID</name></expr></argument>, <argument pos:start="35:47" pos:end="35:49"><expr pos:start="35:47" pos:end="35:49"><literal type="number" pos:start="35:47" pos:end="35:49">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:36"><expr pos:start="39:5" pos:end="39:35"><name pos:start="39:5" pos:end="39:31"><name pos:start="39:5" pos:end="39:12">pci_conf</name><index pos:start="39:13" pos:end="39:31">[<expr pos:start="39:14" pos:end="39:30"><name pos:start="39:14" pos:end="39:30">PCI_INTERRUPT_PIN</name></expr>]</index></name> <operator pos:start="39:33" pos:end="39:33">=</operator> <literal type="number" pos:start="39:35" pos:end="39:35">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="39:38" pos:end="39:58">/* interrupt pin A */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:33"><expr pos:start="41:5" pos:end="41:32"><name pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:12">pci_conf</name><index pos:start="41:13" pos:end="41:25">[<expr pos:start="41:14" pos:end="41:24"><name pos:start="41:14" pos:end="41:24">PCI_MIN_GNT</name></expr>]</index></name> <operator pos:start="41:27" pos:end="41:27">=</operator> <literal type="number" pos:start="41:29" pos:end="41:32">0x06</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:33"><expr pos:start="43:5" pos:end="43:32"><name pos:start="43:5" pos:end="43:25"><name pos:start="43:5" pos:end="43:12">pci_conf</name><index pos:start="43:13" pos:end="43:25">[<expr pos:start="43:14" pos:end="43:24"><name pos:start="43:14" pos:end="43:24">PCI_MAX_LAT</name></expr>]</index></name> <operator pos:start="43:27" pos:end="43:27">=</operator> <literal type="number" pos:start="43:29" pos:end="43:32">0xff</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:39">/* Handler for memory-mapped I/O */</comment>

    <expr_stmt pos:start="49:5" pos:end="51:60"><expr pos:start="49:5" pos:end="51:59"><call pos:start="49:5" pos:end="51:59"><name pos:start="49:5" pos:end="49:25">memory_region_init_io</name><argument_list pos:start="49:26" pos:end="51:59">(<argument pos:start="49:27" pos:end="49:40"><expr pos:start="49:27" pos:end="49:40"><operator pos:start="49:27" pos:end="49:27">&amp;</operator><name pos:start="49:28" pos:end="49:40"><name pos:start="49:28" pos:end="49:28">d</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:35">state</name><operator pos:start="49:36" pos:end="49:36">.</operator><name pos:start="49:37" pos:end="49:40">mmio</name></name></expr></argument>, <argument pos:start="49:43" pos:end="49:51"><expr pos:start="49:43" pos:end="49:51"><call pos:start="49:43" pos:end="49:51"><name pos:start="49:43" pos:end="49:48">OBJECT</name><argument_list pos:start="49:49" pos:end="49:51">(<argument pos:start="49:50" pos:end="49:50"><expr pos:start="49:50" pos:end="49:50"><name pos:start="49:50" pos:end="49:50">d</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="49:54" pos:end="49:68"><expr pos:start="49:54" pos:end="49:68"><operator pos:start="49:54" pos:end="49:54">&amp;</operator><name pos:start="49:55" pos:end="49:68">pcnet_mmio_ops</name></expr></argument>, <argument pos:start="49:71" pos:end="49:71"><expr pos:start="49:71" pos:end="49:71"><name pos:start="49:71" pos:end="49:71">s</name></expr></argument>,

                          <argument pos:start="51:27" pos:end="51:38"><expr pos:start="51:27" pos:end="51:38"><literal type="string" pos:start="51:27" pos:end="51:38">"pcnet-mmio"</literal></expr></argument>, <argument pos:start="51:41" pos:end="51:58"><expr pos:start="51:41" pos:end="51:58"><name pos:start="51:41" pos:end="51:58">PCNET_PNPMMIO_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="57:45"><expr pos:start="55:5" pos:end="57:44"><call pos:start="55:5" pos:end="57:44"><name pos:start="55:5" pos:end="55:25">memory_region_init_io</name><argument_list pos:start="55:26" pos:end="57:44">(<argument pos:start="55:27" pos:end="55:36"><expr pos:start="55:27" pos:end="55:36"><operator pos:start="55:27" pos:end="55:27">&amp;</operator><name pos:start="55:28" pos:end="55:36"><name pos:start="55:28" pos:end="55:28">d</name><operator pos:start="55:29" pos:end="55:30">-&gt;</operator><name pos:start="55:31" pos:end="55:36">io_bar</name></name></expr></argument>, <argument pos:start="55:39" pos:end="55:47"><expr pos:start="55:39" pos:end="55:47"><call pos:start="55:39" pos:end="55:47"><name pos:start="55:39" pos:end="55:44">OBJECT</name><argument_list pos:start="55:45" pos:end="55:47">(<argument pos:start="55:46" pos:end="55:46"><expr pos:start="55:46" pos:end="55:46"><name pos:start="55:46" pos:end="55:46">d</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="55:50" pos:end="55:62"><expr pos:start="55:50" pos:end="55:62"><operator pos:start="55:50" pos:end="55:50">&amp;</operator><name pos:start="55:51" pos:end="55:62">pcnet_io_ops</name></expr></argument>, <argument pos:start="55:65" pos:end="55:65"><expr pos:start="55:65" pos:end="55:65"><name pos:start="55:65" pos:end="55:65">s</name></expr></argument>, <argument pos:start="55:68" pos:end="55:77"><expr pos:start="55:68" pos:end="55:77"><literal type="string" pos:start="55:68" pos:end="55:77">"pcnet-io"</literal></expr></argument>,

                          <argument pos:start="57:27" pos:end="57:43"><expr pos:start="57:27" pos:end="57:43"><name pos:start="57:27" pos:end="57:43">PCNET_IOPORT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:72"><expr pos:start="59:5" pos:end="59:71"><call pos:start="59:5" pos:end="59:71"><name pos:start="59:5" pos:end="59:20">pci_register_bar</name><argument_list pos:start="59:21" pos:end="59:71">(<argument pos:start="59:22" pos:end="59:28"><expr pos:start="59:22" pos:end="59:28"><name pos:start="59:22" pos:end="59:28">pci_dev</name></expr></argument>, <argument pos:start="59:31" pos:end="59:31"><expr pos:start="59:31" pos:end="59:31"><literal type="number" pos:start="59:31" pos:end="59:31">0</literal></expr></argument>, <argument pos:start="59:34" pos:end="59:58"><expr pos:start="59:34" pos:end="59:58"><name pos:start="59:34" pos:end="59:58">PCI_BASE_ADDRESS_SPACE_IO</name></expr></argument>, <argument pos:start="59:61" pos:end="59:70"><expr pos:start="59:61" pos:end="59:70"><operator pos:start="59:61" pos:end="59:61">&amp;</operator><name pos:start="59:62" pos:end="59:70"><name pos:start="59:62" pos:end="59:62">d</name><operator pos:start="59:63" pos:end="59:64">-&gt;</operator><name pos:start="59:65" pos:end="59:70">io_bar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:46"><expr pos:start="63:5" pos:end="63:45"><call pos:start="63:5" pos:end="63:45"><name pos:start="63:5" pos:end="63:20">pci_register_bar</name><argument_list pos:start="63:21" pos:end="63:45">(<argument pos:start="63:22" pos:end="63:28"><expr pos:start="63:22" pos:end="63:28"><name pos:start="63:22" pos:end="63:28">pci_dev</name></expr></argument>, <argument pos:start="63:31" pos:end="63:31"><expr pos:start="63:31" pos:end="63:31"><literal type="number" pos:start="63:31" pos:end="63:31">1</literal></expr></argument>, <argument pos:start="63:34" pos:end="63:34"><expr pos:start="63:34" pos:end="63:34"><literal type="number" pos:start="63:34" pos:end="63:34">0</literal></expr></argument>, <argument pos:start="63:37" pos:end="63:44"><expr pos:start="63:37" pos:end="63:44"><operator pos:start="63:37" pos:end="63:37">&amp;</operator><name pos:start="63:38" pos:end="63:44"><name pos:start="63:38" pos:end="63:38">s</name><operator pos:start="63:39" pos:end="63:40">-&gt;</operator><name pos:start="63:41" pos:end="63:44">mmio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:39"><expr pos:start="67:5" pos:end="67:38"><name pos:start="67:5" pos:end="67:10"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:10">irq</name></name> <operator pos:start="67:12" pos:end="67:12">=</operator> <call pos:start="67:14" pos:end="67:38"><name pos:start="67:14" pos:end="67:29">pci_allocate_irq</name><argument_list pos:start="67:30" pos:end="67:38">(<argument pos:start="67:31" pos:end="67:37"><expr pos:start="67:31" pos:end="67:37"><name pos:start="67:31" pos:end="67:37">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:48"><expr pos:start="69:5" pos:end="69:47"><name pos:start="69:5" pos:end="69:20"><name pos:start="69:5" pos:end="69:5">s</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:20">phys_mem_read</name></name> <operator pos:start="69:22" pos:end="69:22">=</operator> <name pos:start="69:24" pos:end="69:47">pci_physical_memory_read</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:50"><expr pos:start="71:5" pos:end="71:49"><name pos:start="71:5" pos:end="71:21"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:21">phys_mem_write</name></name> <operator pos:start="71:23" pos:end="71:23">=</operator> <name pos:start="71:25" pos:end="71:49">pci_physical_memory_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:28"><expr pos:start="73:5" pos:end="73:27"><name pos:start="73:5" pos:end="73:17"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:17">dma_opaque</name></name> <operator pos:start="73:19" pos:end="73:19">=</operator> <name pos:start="73:21" pos:end="73:27">pci_dev</name></expr>;</expr_stmt>



    <return pos:start="77:5" pos:end="77:70">return <expr pos:start="77:12" pos:end="77:69"><call pos:start="77:12" pos:end="77:69"><name pos:start="77:12" pos:end="77:28">pcnet_common_init</name><argument_list pos:start="77:29" pos:end="77:69">(<argument pos:start="77:30" pos:end="77:44"><expr pos:start="77:30" pos:end="77:44"><call pos:start="77:30" pos:end="77:44"><name pos:start="77:30" pos:end="77:35">DEVICE</name><argument_list pos:start="77:36" pos:end="77:44">(<argument pos:start="77:37" pos:end="77:43"><expr pos:start="77:37" pos:end="77:43"><name pos:start="77:37" pos:end="77:43">pci_dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="77:47" pos:end="77:47"><expr pos:start="77:47" pos:end="77:47"><name pos:start="77:47" pos:end="77:47">s</name></expr></argument>, <argument pos:start="77:50" pos:end="77:68"><expr pos:start="77:50" pos:end="77:68"><operator pos:start="77:50" pos:end="77:50">&amp;</operator><name pos:start="77:51" pos:end="77:68">net_pci_pcnet_info</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
