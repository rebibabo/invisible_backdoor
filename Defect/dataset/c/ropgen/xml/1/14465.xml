<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14465.c" pos:tabs="8"><function pos:start="1:1" pos:end="745:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">ppc_core99_init</name><parameter_list pos:start="1:28" pos:end="1:50">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:40">MachineState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:49">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="745:1">{<block_content pos:start="5:5" pos:end="743:52">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:31">kernel_filename</name> <init pos:start="7:33" pos:end="7:58">= <expr pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:41">machine</name><operator pos:start="7:42" pos:end="7:43">-&gt;</operator><name pos:start="7:44" pos:end="7:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:30">kernel_cmdline</name> <init pos:start="9:32" pos:end="9:56">= <expr pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:40">machine</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:31">initrd_filename</name> <init pos:start="11:33" pos:end="11:58">= <expr pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:41">machine</name><operator pos:start="11:42" pos:end="11:43">-&gt;</operator><name pos:start="11:44" pos:end="11:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:50"><decl pos:start="13:5" pos:end="13:49"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:27">boot_device</name> <init pos:start="13:29" pos:end="13:49">= <expr pos:start="13:31" pos:end="13:49"><name pos:start="13:31" pos:end="13:49"><name pos:start="13:31" pos:end="13:37">machine</name><operator pos:start="13:38" pos:end="13:39">-&gt;</operator><name pos:start="13:40" pos:end="13:49">boot_order</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">PowerPCCPU</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:19">cpu</name> <init pos:start="15:21" pos:end="15:26">= <expr pos:start="15:23" pos:end="15:26"><name pos:start="15:23" pos:end="15:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">CPUPPCState</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:20">env</name> <init pos:start="17:22" pos:end="17:27">= <expr pos:start="17:24" pos:end="17:27"><name pos:start="17:24" pos:end="17:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">char</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:34"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">qemu_irq</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:17">pic</name></decl>, <decl pos:start="21:20" pos:end="21:33"><type ref="prev" pos:start="21:5" pos:end="21:14"><modifier pos:start="21:20" pos:end="21:20">*</modifier><modifier pos:start="21:21" pos:end="21:21">*</modifier></type><name pos:start="21:22" pos:end="21:33">openpic_irqs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:47"><decl pos:start="23:5" pos:end="23:46"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:21">isa</name> <init pos:start="23:23" pos:end="23:46">= <expr pos:start="23:25" pos:end="23:46"><call pos:start="23:25" pos:end="23:46"><name pos:start="23:25" pos:end="23:29">g_new</name><argument_list pos:start="23:30" pos:end="23:46">(<argument pos:start="23:31" pos:end="23:42"><expr pos:start="23:31" pos:end="23:42"><name pos:start="23:31" pos:end="23:42">MemoryRegion</name></expr></argument>, <argument pos:start="23:45" pos:end="23:45"><expr pos:start="23:45" pos:end="23:45"><literal type="number" pos:start="23:45" pos:end="23:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:55"><decl pos:start="25:5" pos:end="25:54"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16">MemoryRegion</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:29">unin_memory</name> <init pos:start="25:31" pos:end="25:54">= <expr pos:start="25:33" pos:end="25:54"><call pos:start="25:33" pos:end="25:54"><name pos:start="25:33" pos:end="25:37">g_new</name><argument_list pos:start="25:38" pos:end="25:54">(<argument pos:start="25:39" pos:end="25:50"><expr pos:start="25:39" pos:end="25:50"><name pos:start="25:39" pos:end="25:50">MemoryRegion</name></expr></argument>, <argument pos:start="25:53" pos:end="25:53"><expr pos:start="25:53" pos:end="25:53"><literal type="number" pos:start="25:53" pos:end="25:53">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:56"><decl pos:start="27:5" pos:end="27:55"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">MemoryRegion</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:30">unin2_memory</name> <init pos:start="27:32" pos:end="27:55">= <expr pos:start="27:34" pos:end="27:55"><call pos:start="27:34" pos:end="27:55"><name pos:start="27:34" pos:end="27:38">g_new</name><argument_list pos:start="27:39" pos:end="27:55">(<argument pos:start="27:40" pos:end="27:51"><expr pos:start="27:40" pos:end="27:51"><name pos:start="27:40" pos:end="27:51">MemoryRegion</name></expr></argument>, <argument pos:start="27:54" pos:end="27:54"><expr pos:start="27:54" pos:end="27:54"><literal type="number" pos:start="27:54" pos:end="27:54">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:28"><decl pos:start="29:5" pos:end="29:18"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:18">linux_boot</name></decl>, <decl pos:start="29:21" pos:end="29:21"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:21" pos:end="29:21">i</name></decl>, <decl pos:start="29:24" pos:end="29:24"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:24" pos:end="29:24">j</name></decl>, <decl pos:start="29:27" pos:end="29:27"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:27" pos:end="29:27">k</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:79"><decl pos:start="31:5" pos:end="31:46"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:16">MemoryRegion</name> <modifier pos:start="31:18" pos:end="31:18">*</modifier></type><name pos:start="31:19" pos:end="31:21">ram</name> <init pos:start="31:23" pos:end="31:46">= <expr pos:start="31:25" pos:end="31:46"><call pos:start="31:25" pos:end="31:46"><name pos:start="31:25" pos:end="31:29">g_new</name><argument_list pos:start="31:30" pos:end="31:46">(<argument pos:start="31:31" pos:end="31:42"><expr pos:start="31:31" pos:end="31:42"><name pos:start="31:31" pos:end="31:42">MemoryRegion</name></expr></argument>, <argument pos:start="31:45" pos:end="31:45"><expr pos:start="31:45" pos:end="31:45"><literal type="number" pos:start="31:45" pos:end="31:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl pos:start="31:49" pos:end="31:78"><type ref="prev" pos:start="31:5" pos:end="31:18"><modifier pos:start="31:49" pos:end="31:49">*</modifier></type><name pos:start="31:50" pos:end="31:53">bios</name> <init pos:start="31:55" pos:end="31:78">= <expr pos:start="31:57" pos:end="31:78"><call pos:start="31:57" pos:end="31:78"><name pos:start="31:57" pos:end="31:61">g_new</name><argument_list pos:start="31:62" pos:end="31:78">(<argument pos:start="31:63" pos:end="31:74"><expr pos:start="31:63" pos:end="31:74"><name pos:start="31:63" pos:end="31:74">MemoryRegion</name></expr></argument>, <argument pos:start="31:77" pos:end="31:77"><expr pos:start="31:77" pos:end="31:77"><literal type="number" pos:start="31:77" pos:end="31:77">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:54"><decl pos:start="33:5" pos:end="33:22"><type pos:start="33:5" pos:end="33:10"><name pos:start="33:5" pos:end="33:10">hwaddr</name></type> <name pos:start="33:12" pos:end="33:22">kernel_base</name></decl>, <decl pos:start="33:25" pos:end="33:35"><type ref="prev" pos:start="33:5" pos:end="33:10"/><name pos:start="33:25" pos:end="33:35">initrd_base</name></decl>, <decl pos:start="33:38" pos:end="33:53"><type ref="prev" pos:start="33:5" pos:end="33:10"/><name pos:start="33:38" pos:end="33:49">cmdline_base</name> <init pos:start="33:51" pos:end="33:53">= <expr pos:start="33:53" pos:end="33:53"><literal type="number" pos:start="33:53" pos:end="33:53">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:34"><decl pos:start="35:5" pos:end="35:20"><type pos:start="35:5" pos:end="35:8"><name pos:start="35:5" pos:end="35:8">long</name></type> <name pos:start="35:10" pos:end="35:20">kernel_size</name></decl>, <decl pos:start="35:23" pos:end="35:33"><type ref="prev" pos:start="35:5" pos:end="35:8"/><name pos:start="35:23" pos:end="35:33">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:20"><decl pos:start="37:5" pos:end="37:19"><type pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:10">PCIBus</name> <modifier pos:start="37:12" pos:end="37:12">*</modifier></type><name pos:start="37:13" pos:end="37:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:21"><decl pos:start="39:5" pos:end="39:20"><type pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:13">PCIDevice</name> <modifier pos:start="39:15" pos:end="39:15">*</modifier></type><name pos:start="39:16" pos:end="39:20">macio</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:29"><decl pos:start="41:5" pos:end="41:28"><type pos:start="41:5" pos:end="41:19"><name pos:start="41:5" pos:end="41:17">MACIOIDEState</name> <modifier pos:start="41:19" pos:end="41:19">*</modifier></type><name pos:start="41:20" pos:end="41:28">macio_ide</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:22"><decl pos:start="43:5" pos:end="43:21"><type pos:start="43:5" pos:end="43:14"><name pos:start="43:5" pos:end="43:12">BusState</name> <modifier pos:start="43:14" pos:end="43:14">*</modifier></type><name pos:start="43:15" pos:end="43:21">adb_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:25"><decl pos:start="45:5" pos:end="45:24"><type pos:start="45:5" pos:end="45:21"><name pos:start="45:5" pos:end="45:19">MacIONVRAMState</name> <modifier pos:start="45:21" pos:end="45:21">*</modifier></type><name pos:start="45:22" pos:end="45:24">nvr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:29"><decl pos:start="47:5" pos:end="47:17"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:17">bios_size</name></decl>, <decl pos:start="47:20" pos:end="47:28"><type ref="prev" pos:start="47:5" pos:end="47:7"/><name pos:start="47:20" pos:end="47:28">ndrv_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:23"><decl pos:start="49:5" pos:end="49:22"><type pos:start="49:5" pos:end="49:13"><name pos:start="49:5" pos:end="49:11">uint8_t</name> <modifier pos:start="49:13" pos:end="49:13">*</modifier></type><name pos:start="49:14" pos:end="49:22">ndrv_file</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:37"><decl pos:start="51:5" pos:end="51:25"><type pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:16">MemoryRegion</name> <modifier pos:start="51:18" pos:end="51:18">*</modifier></type><name pos:start="51:19" pos:end="51:25">pic_mem</name></decl>, <decl pos:start="51:28" pos:end="51:36"><type ref="prev" pos:start="51:5" pos:end="51:18"><modifier pos:start="51:28" pos:end="51:28">*</modifier></type><name pos:start="51:29" pos:end="51:36">escc_mem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:52"><decl pos:start="53:5" pos:end="53:51"><type pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:16">MemoryRegion</name> <modifier pos:start="53:18" pos:end="53:18">*</modifier></type><name pos:start="53:19" pos:end="53:26">escc_bar</name> <init pos:start="53:28" pos:end="53:51">= <expr pos:start="53:30" pos:end="53:51"><call pos:start="53:30" pos:end="53:51"><name pos:start="53:30" pos:end="53:34">g_new</name><argument_list pos:start="53:35" pos:end="53:51">(<argument pos:start="53:36" pos:end="53:47"><expr pos:start="53:36" pos:end="53:47"><name pos:start="53:36" pos:end="53:47">MemoryRegion</name></expr></argument>, <argument pos:start="53:50" pos:end="53:50"><expr pos:start="53:50" pos:end="53:50"><literal type="number" pos:start="53:50" pos:end="53:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:24"><decl pos:start="55:5" pos:end="55:23"><type pos:start="55:5" pos:end="55:7"><name pos:start="55:5" pos:end="55:7">int</name></type> <name pos:start="55:9" pos:end="55:23">ppc_boot_device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:46"><decl pos:start="57:5" pos:end="57:45"><type pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:13">DriveInfo</name> <modifier pos:start="57:15" pos:end="57:15">*</modifier></type><name pos:start="57:16" pos:end="57:45"><name pos:start="57:16" pos:end="57:17">hd</name><index pos:start="57:18" pos:end="57:45">[<expr pos:start="57:19" pos:end="57:44"><name pos:start="57:19" pos:end="57:29">MAX_IDE_BUS</name> <operator pos:start="57:31" pos:end="57:31">*</operator> <name pos:start="57:33" pos:end="57:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="59:5" pos:end="59:17"><decl pos:start="59:5" pos:end="59:16"><type pos:start="59:5" pos:end="59:10"><name pos:start="59:5" pos:end="59:8">void</name> <modifier pos:start="59:10" pos:end="59:10">*</modifier></type><name pos:start="59:11" pos:end="59:16">fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="61:5" pos:end="61:21"><decl pos:start="61:5" pos:end="61:20"><type pos:start="61:5" pos:end="61:7"><name pos:start="61:5" pos:end="61:7">int</name></type> <name pos:start="61:9" pos:end="61:20">machine_arch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="63:5" pos:end="63:20"><decl pos:start="63:5" pos:end="63:19"><type pos:start="63:5" pos:end="63:18"><name pos:start="63:5" pos:end="63:16">SysBusDevice</name> <modifier pos:start="63:18" pos:end="63:18">*</modifier></type><name pos:start="63:19" pos:end="63:19">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="65:5" pos:end="65:21"><decl pos:start="65:5" pos:end="65:20"><type pos:start="65:5" pos:end="65:17"><name pos:start="65:5" pos:end="65:15">DeviceState</name> <modifier pos:start="65:17" pos:end="65:17">*</modifier></type><name pos:start="65:18" pos:end="65:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="67:5" pos:end="67:31"><decl pos:start="67:5" pos:end="67:30"><type pos:start="67:5" pos:end="67:9"><name pos:start="67:5" pos:end="67:7">int</name> <modifier pos:start="67:9" pos:end="67:9">*</modifier></type><name pos:start="67:10" pos:end="67:14">token</name> <init pos:start="67:16" pos:end="67:30">= <expr pos:start="67:18" pos:end="67:30"><call pos:start="67:18" pos:end="67:30"><name pos:start="67:18" pos:end="67:22">g_new</name><argument_list pos:start="67:23" pos:end="67:30">(<argument pos:start="67:24" pos:end="67:26"><expr pos:start="67:24" pos:end="67:26"><name pos:start="67:24" pos:end="67:26">int</name></expr></argument>, <argument pos:start="67:29" pos:end="67:29"><expr pos:start="67:29" pos:end="67:29"><literal type="number" pos:start="67:29" pos:end="67:29">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="69:5" pos:end="69:35"><decl pos:start="69:5" pos:end="69:34"><type pos:start="69:5" pos:end="69:10"><name pos:start="69:5" pos:end="69:10">hwaddr</name></type> <name pos:start="69:12" pos:end="69:21">nvram_addr</name> <init pos:start="69:23" pos:end="69:34">= <expr pos:start="69:25" pos:end="69:34"><literal type="number" pos:start="69:25" pos:end="69:34">0xFFF04000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="71:5" pos:end="71:20"><decl pos:start="71:5" pos:end="71:19"><type pos:start="71:5" pos:end="71:12"><name pos:start="71:5" pos:end="71:12">uint64_t</name></type> <name pos:start="71:14" pos:end="71:19">tbfreq</name></decl>;</decl_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:43"><expr pos:start="75:5" pos:end="75:42"><name pos:start="75:5" pos:end="75:14">linux_boot</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <operator pos:start="75:18" pos:end="75:18">(</operator><name pos:start="75:19" pos:end="75:33">kernel_filename</name> <operator pos:start="75:35" pos:end="75:36">!=</operator> <name pos:start="75:38" pos:end="75:41">NULL</name><operator pos:start="75:42" pos:end="75:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:19">/* init CPUs */</comment>

    <if_stmt pos:start="81:5" pos:end="93:5"><if pos:start="81:5" pos:end="93:5">if <condition pos:start="81:8" pos:end="81:35">(<expr pos:start="81:9" pos:end="81:34"><name pos:start="81:9" pos:end="81:26"><name pos:start="81:9" pos:end="81:15">machine</name><operator pos:start="81:16" pos:end="81:17">-&gt;</operator><name pos:start="81:18" pos:end="81:26">cpu_model</name></name> <operator pos:start="81:28" pos:end="81:29">==</operator> <name pos:start="81:31" pos:end="81:34">NULL</name></expr>)</condition> <block pos:start="81:37" pos:end="93:5">{<block_content pos:start="85:9" pos:end="92:0">

<cpp:ifdef pos:start="83:1" pos:end="83:19">#<cpp:directive pos:start="83:2" pos:end="83:6">ifdef</cpp:directive> <name pos:start="83:8" pos:end="83:19">TARGET_PPC64</name></cpp:ifdef>

        <expr_stmt pos:start="85:9" pos:end="88:0"><expr pos:start="85:9" pos:end="85:36"><name pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:15">machine</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:26">cpu_model</name></name> <operator pos:start="85:28" pos:end="85:28">=</operator> <literal type="string" pos:start="85:30" pos:end="85:36">"970fx"</literal></expr>;</expr_stmt>

<cpp:else pos:start="87:1" pos:end="87:5">#<cpp:directive pos:start="87:2" pos:end="87:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="89:9" pos:end="92:0"><expr pos:start="89:9" pos:end="89:33"><name pos:start="89:9" pos:end="89:26"><name pos:start="89:9" pos:end="89:15">machine</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:26">cpu_model</name></name> <operator pos:start="89:28" pos:end="89:28">=</operator> <literal type="string" pos:start="89:30" pos:end="89:33">"G4"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <for pos:start="95:5" pos:end="119:5">for <control pos:start="95:9" pos:end="95:34">(<init pos:start="95:10" pos:end="95:15"><expr pos:start="95:10" pos:end="95:14"><name pos:start="95:10" pos:end="95:10">i</name> <operator pos:start="95:12" pos:end="95:12">=</operator> <literal type="number" pos:start="95:14" pos:end="95:14">0</literal></expr>;</init> <condition pos:start="95:17" pos:end="95:29"><expr pos:start="95:17" pos:end="95:28"><name pos:start="95:17" pos:end="95:17">i</name> <operator pos:start="95:19" pos:end="95:19">&lt;</operator> <name pos:start="95:21" pos:end="95:28">smp_cpus</name></expr>;</condition> <incr pos:start="95:31" pos:end="95:33"><expr pos:start="95:31" pos:end="95:33"><name pos:start="95:31" pos:end="95:31">i</name><operator pos:start="95:32" pos:end="95:33">++</operator></expr></incr>)</control> <block pos:start="95:36" pos:end="119:5">{<block_content pos:start="97:9" pos:end="117:51">

        <expr_stmt pos:start="97:9" pos:end="99:64"><expr pos:start="97:9" pos:end="99:63"><name pos:start="97:9" pos:end="97:11">cpu</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="99:63"><name pos:start="97:15" pos:end="97:25">POWERPC_CPU</name><argument_list pos:start="97:26" pos:end="99:63">(<argument pos:start="97:27" pos:end="99:62"><expr pos:start="97:27" pos:end="99:62"><call pos:start="97:27" pos:end="99:62"><name pos:start="97:27" pos:end="97:42">cpu_generic_init</name><argument_list pos:start="97:43" pos:end="99:62">(<argument pos:start="97:44" pos:end="97:59"><expr pos:start="97:44" pos:end="97:59"><name pos:start="97:44" pos:end="97:59">TYPE_POWERPC_CPU</name></expr></argument>,

                                           <argument pos:start="99:44" pos:end="99:61"><expr pos:start="99:44" pos:end="99:61"><name pos:start="99:44" pos:end="99:61"><name pos:start="99:44" pos:end="99:50">machine</name><operator pos:start="99:51" pos:end="99:52">-&gt;</operator><name pos:start="99:53" pos:end="99:61">cpu_model</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="101:9" pos:end="107:9"><if pos:start="101:9" pos:end="107:9">if <condition pos:start="101:12" pos:end="101:24">(<expr pos:start="101:13" pos:end="101:23"><name pos:start="101:13" pos:end="101:15">cpu</name> <operator pos:start="101:17" pos:end="101:18">==</operator> <name pos:start="101:20" pos:end="101:23">NULL</name></expr>)</condition> <block pos:start="101:26" pos:end="107:9">{<block_content pos:start="103:13" pos:end="105:20">

            <expr_stmt pos:start="103:13" pos:end="103:71"><expr pos:start="103:13" pos:end="103:70"><call pos:start="103:13" pos:end="103:70"><name pos:start="103:13" pos:end="103:19">fprintf</name><argument_list pos:start="103:20" pos:end="103:70">(<argument pos:start="103:21" pos:end="103:26"><expr pos:start="103:21" pos:end="103:26"><name pos:start="103:21" pos:end="103:26">stderr</name></expr></argument>, <argument pos:start="103:29" pos:end="103:69"><expr pos:start="103:29" pos:end="103:69"><literal type="string" pos:start="103:29" pos:end="103:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:20"><expr pos:start="105:13" pos:end="105:19"><call pos:start="105:13" pos:end="105:19"><name pos:start="105:13" pos:end="105:16">exit</name><argument_list pos:start="105:17" pos:end="105:19">(<argument pos:start="105:18" pos:end="105:18"><expr pos:start="105:18" pos:end="105:18"><literal type="number" pos:start="105:18" pos:end="105:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:24"><expr pos:start="109:9" pos:end="109:23"><name pos:start="109:9" pos:end="109:11">env</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <operator pos:start="109:15" pos:end="109:15">&amp;</operator><name pos:start="109:16" pos:end="109:23"><name pos:start="109:16" pos:end="109:18">cpu</name><operator pos:start="109:19" pos:end="109:20">-&gt;</operator><name pos:start="109:21" pos:end="109:23">env</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="113:9" pos:end="113:48">/* Set time-base frequency to 100 Mhz */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:37"><expr pos:start="115:9" pos:end="115:36"><call pos:start="115:9" pos:end="115:36"><name pos:start="115:9" pos:end="115:23">cpu_ppc_tb_init</name><argument_list pos:start="115:24" pos:end="115:36">(<argument pos:start="115:25" pos:end="115:27"><expr pos:start="115:25" pos:end="115:27"><name pos:start="115:25" pos:end="115:27">env</name></expr></argument>, <argument pos:start="115:30" pos:end="115:35"><expr pos:start="115:30" pos:end="115:35"><name pos:start="115:30" pos:end="115:35">TBFREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:51"><expr pos:start="117:9" pos:end="117:50"><call pos:start="117:9" pos:end="117:50"><name pos:start="117:9" pos:end="117:27">qemu_register_reset</name><argument_list pos:start="117:28" pos:end="117:50">(<argument pos:start="117:29" pos:end="117:44"><expr pos:start="117:29" pos:end="117:44"><name pos:start="117:29" pos:end="117:44">ppc_core99_reset</name></expr></argument>, <argument pos:start="117:47" pos:end="117:49"><expr pos:start="117:47" pos:end="117:49"><name pos:start="117:47" pos:end="117:49">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="123:5" pos:end="123:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:80"><expr pos:start="125:5" pos:end="125:79"><call pos:start="125:5" pos:end="125:79"><name pos:start="125:5" pos:end="125:40">memory_region_allocate_system_memory</name><argument_list pos:start="125:41" pos:end="125:79">(<argument pos:start="125:42" pos:end="125:44"><expr pos:start="125:42" pos:end="125:44"><name pos:start="125:42" pos:end="125:44">ram</name></expr></argument>, <argument pos:start="125:47" pos:end="125:50"><expr pos:start="125:47" pos:end="125:50"><name pos:start="125:47" pos:end="125:50">NULL</name></expr></argument>, <argument pos:start="125:53" pos:end="125:68"><expr pos:start="125:53" pos:end="125:68"><literal type="string" pos:start="125:53" pos:end="125:68">"ppc_core99.ram"</literal></expr></argument>, <argument pos:start="125:71" pos:end="125:78"><expr pos:start="125:71" pos:end="125:78"><name pos:start="125:71" pos:end="125:78">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:61"><expr pos:start="127:5" pos:end="127:60"><call pos:start="127:5" pos:end="127:60"><name pos:start="127:5" pos:end="127:31">memory_region_add_subregion</name><argument_list pos:start="127:32" pos:end="127:60">(<argument pos:start="127:33" pos:end="127:51"><expr pos:start="127:33" pos:end="127:51"><call pos:start="127:33" pos:end="127:51"><name pos:start="127:33" pos:end="127:49">get_system_memory</name><argument_list pos:start="127:50" pos:end="127:51">()</argument_list></call></expr></argument>, <argument pos:start="127:54" pos:end="127:54"><expr pos:start="127:54" pos:end="127:54"><literal type="number" pos:start="127:54" pos:end="127:54">0</literal></expr></argument>, <argument pos:start="127:57" pos:end="127:59"><expr pos:start="127:57" pos:end="127:59"><name pos:start="127:57" pos:end="127:59">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="131:5" pos:end="131:32">/* allocate and load BIOS */</comment>

    <expr_stmt pos:start="133:5" pos:end="135:41"><expr pos:start="133:5" pos:end="135:40"><call pos:start="133:5" pos:end="135:40"><name pos:start="133:5" pos:end="133:26">memory_region_init_ram</name><argument_list pos:start="133:27" pos:end="135:40">(<argument pos:start="133:28" pos:end="133:31"><expr pos:start="133:28" pos:end="133:31"><name pos:start="133:28" pos:end="133:31">bios</name></expr></argument>, <argument pos:start="133:34" pos:end="133:37"><expr pos:start="133:34" pos:end="133:37"><name pos:start="133:34" pos:end="133:37">NULL</name></expr></argument>, <argument pos:start="133:40" pos:end="133:56"><expr pos:start="133:40" pos:end="133:56"><literal type="string" pos:start="133:40" pos:end="133:56">"ppc_core99.bios"</literal></expr></argument>, <argument pos:start="133:59" pos:end="133:67"><expr pos:start="133:59" pos:end="133:67"><name pos:start="133:59" pos:end="133:67">BIOS_SIZE</name></expr></argument>,

                           <argument pos:start="135:28" pos:end="135:39"><expr pos:start="135:28" pos:end="135:39"><operator pos:start="135:28" pos:end="135:28">&amp;</operator><name pos:start="135:29" pos:end="135:39">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="139:5" pos:end="141:34"><if pos:start="139:5" pos:end="141:34">if <condition pos:start="139:8" pos:end="139:26">(<expr pos:start="139:9" pos:end="139:25"><name pos:start="139:9" pos:end="139:17">bios_name</name> <operator pos:start="139:19" pos:end="139:20">==</operator> <name pos:start="139:22" pos:end="139:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="141:34"><block_content pos:start="141:9" pos:end="141:34">

        <expr_stmt pos:start="141:9" pos:end="141:34"><expr pos:start="141:9" pos:end="141:33"><name pos:start="141:9" pos:end="141:17">bios_name</name> <operator pos:start="141:19" pos:end="141:19">=</operator> <name pos:start="141:21" pos:end="141:33">PROM_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:62"><expr pos:start="143:5" pos:end="143:61"><name pos:start="143:5" pos:end="143:12">filename</name> <operator pos:start="143:14" pos:end="143:14">=</operator> <call pos:start="143:16" pos:end="143:61"><name pos:start="143:16" pos:end="143:29">qemu_find_file</name><argument_list pos:start="143:30" pos:end="143:61">(<argument pos:start="143:31" pos:end="143:49"><expr pos:start="143:31" pos:end="143:49"><name pos:start="143:31" pos:end="143:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="143:52" pos:end="143:60"><expr pos:start="143:52" pos:end="143:60"><name pos:start="143:52" pos:end="143:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:43"><expr pos:start="145:5" pos:end="145:42"><call pos:start="145:5" pos:end="145:42"><name pos:start="145:5" pos:end="145:30">memory_region_set_readonly</name><argument_list pos:start="145:31" pos:end="145:42">(<argument pos:start="145:32" pos:end="145:35"><expr pos:start="145:32" pos:end="145:35"><name pos:start="145:32" pos:end="145:35">bios</name></expr></argument>, <argument pos:start="145:38" pos:end="145:41"><expr pos:start="145:38" pos:end="145:41"><name pos:start="145:38" pos:end="145:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:70"><expr pos:start="147:5" pos:end="147:69"><call pos:start="147:5" pos:end="147:69"><name pos:start="147:5" pos:end="147:31">memory_region_add_subregion</name><argument_list pos:start="147:32" pos:end="147:69">(<argument pos:start="147:33" pos:end="147:51"><expr pos:start="147:33" pos:end="147:51"><call pos:start="147:33" pos:end="147:51"><name pos:start="147:33" pos:end="147:49">get_system_memory</name><argument_list pos:start="147:50" pos:end="147:51">()</argument_list></call></expr></argument>, <argument pos:start="147:54" pos:end="147:62"><expr pos:start="147:54" pos:end="147:62"><name pos:start="147:54" pos:end="147:62">PROM_ADDR</name></expr></argument>, <argument pos:start="147:65" pos:end="147:68"><expr pos:start="147:65" pos:end="147:68"><name pos:start="147:65" pos:end="147:68">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="151:5" pos:end="151:29">/* Load OpenBIOS (ELF) */</comment>

    <if_stmt pos:start="153:5" pos:end="167:5"><if pos:start="153:5" pos:end="163:5">if <condition pos:start="153:8" pos:end="153:17">(<expr pos:start="153:9" pos:end="153:16"><name pos:start="153:9" pos:end="153:16">filename</name></expr>)</condition> <block pos:start="153:19" pos:end="163:5">{<block_content pos:start="155:9" pos:end="161:25">

        <expr_stmt pos:start="155:9" pos:end="157:67"><expr pos:start="155:9" pos:end="157:66"><name pos:start="155:9" pos:end="155:17">bios_size</name> <operator pos:start="155:19" pos:end="155:19">=</operator> <call pos:start="155:21" pos:end="157:66"><name pos:start="155:21" pos:end="155:28">load_elf</name><argument_list pos:start="155:29" pos:end="157:66">(<argument pos:start="155:30" pos:end="155:37"><expr pos:start="155:30" pos:end="155:37"><name pos:start="155:30" pos:end="155:37">filename</name></expr></argument>, <argument pos:start="155:40" pos:end="155:43"><expr pos:start="155:40" pos:end="155:43"><name pos:start="155:40" pos:end="155:43">NULL</name></expr></argument>, <argument pos:start="155:46" pos:end="155:49"><expr pos:start="155:46" pos:end="155:49"><name pos:start="155:46" pos:end="155:49">NULL</name></expr></argument>, <argument pos:start="155:52" pos:end="155:55"><expr pos:start="155:52" pos:end="155:55"><name pos:start="155:52" pos:end="155:55">NULL</name></expr></argument>,

                             <argument pos:start="157:30" pos:end="157:33"><expr pos:start="157:30" pos:end="157:33"><name pos:start="157:30" pos:end="157:33">NULL</name></expr></argument>, <argument pos:start="157:36" pos:end="157:39"><expr pos:start="157:36" pos:end="157:39"><name pos:start="157:36" pos:end="157:39">NULL</name></expr></argument>, <argument pos:start="157:42" pos:end="157:42"><expr pos:start="157:42" pos:end="157:42"><literal type="number" pos:start="157:42" pos:end="157:42">1</literal></expr></argument>, <argument pos:start="157:45" pos:end="157:59"><expr pos:start="157:45" pos:end="157:59"><name pos:start="157:45" pos:end="157:59">PPC_ELF_MACHINE</name></expr></argument>, <argument pos:start="157:62" pos:end="157:62"><expr pos:start="157:62" pos:end="157:62"><literal type="number" pos:start="157:62" pos:end="157:62">0</literal></expr></argument>, <argument pos:start="157:65" pos:end="157:65"><expr pos:start="157:65" pos:end="157:65"><literal type="number" pos:start="157:65" pos:end="157:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="161:9" pos:end="161:25"><expr pos:start="161:9" pos:end="161:24"><call pos:start="161:9" pos:end="161:24"><name pos:start="161:9" pos:end="161:14">g_free</name><argument_list pos:start="161:15" pos:end="161:24">(<argument pos:start="161:16" pos:end="161:23"><expr pos:start="161:16" pos:end="161:23"><name pos:start="161:16" pos:end="161:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="163:7" pos:end="167:5">else <block pos:start="163:12" pos:end="167:5">{<block_content pos:start="165:9" pos:end="165:23">

        <expr_stmt pos:start="165:9" pos:end="165:23"><expr pos:start="165:9" pos:end="165:22"><name pos:start="165:9" pos:end="165:17">bios_size</name> <operator pos:start="165:19" pos:end="165:19">=</operator> <operator pos:start="165:21" pos:end="165:21">-</operator><literal type="number" pos:start="165:22" pos:end="165:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="169:5" pos:end="175:5"><if pos:start="169:5" pos:end="175:5">if <condition pos:start="169:8" pos:end="169:47">(<expr pos:start="169:9" pos:end="169:46"><name pos:start="169:9" pos:end="169:36"><name pos:start="169:9" pos:end="169:17">bios_size</name> <argument_list type="generic" pos:start="169:19" pos:end="169:36">&lt; <argument pos:start="169:21" pos:end="169:34"><expr pos:start="169:21" pos:end="169:34"><literal type="number" pos:start="169:21" pos:end="169:21">0</literal> <operator pos:start="169:23" pos:end="169:24">||</operator> <name pos:start="169:26" pos:end="169:34">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="169:38" pos:end="169:46">BIOS_SIZE</name></expr>)</condition> <block pos:start="169:49" pos:end="175:5">{<block_content pos:start="171:9" pos:end="173:16">

        <expr_stmt pos:start="171:9" pos:end="171:68"><expr pos:start="171:9" pos:end="171:67"><call pos:start="171:9" pos:end="171:67"><name pos:start="171:9" pos:end="171:20">error_report</name><argument_list pos:start="171:21" pos:end="171:67">(<argument pos:start="171:22" pos:end="171:55"><expr pos:start="171:22" pos:end="171:55"><literal type="string" pos:start="171:22" pos:end="171:55">"could not load PowerPC bios '%s'"</literal></expr></argument>, <argument pos:start="171:58" pos:end="171:66"><expr pos:start="171:58" pos:end="171:66"><name pos:start="171:58" pos:end="171:66">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:16"><expr pos:start="173:9" pos:end="173:15"><call pos:start="173:9" pos:end="173:15"><name pos:start="173:9" pos:end="173:12">exit</name><argument_list pos:start="173:13" pos:end="173:15">(<argument pos:start="173:14" pos:end="173:14"><expr pos:start="173:14" pos:end="173:14"><literal type="number" pos:start="173:14" pos:end="173:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="179:5" pos:end="303:5"><if pos:start="179:5" pos:end="265:5">if <condition pos:start="179:8" pos:end="179:19">(<expr pos:start="179:9" pos:end="179:18"><name pos:start="179:9" pos:end="179:18">linux_boot</name></expr>)</condition> <block pos:start="179:21" pos:end="265:5">{<block_content pos:start="181:9" pos:end="263:30">

        <decl_stmt pos:start="181:9" pos:end="181:29"><decl pos:start="181:9" pos:end="181:28"><type pos:start="181:9" pos:end="181:16"><name pos:start="181:9" pos:end="181:16">uint64_t</name></type> <name pos:start="181:18" pos:end="181:24">lowaddr</name> <init pos:start="181:26" pos:end="181:28">= <expr pos:start="181:28" pos:end="181:28"><literal type="number" pos:start="181:28" pos:end="181:28">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="183:9" pos:end="188:0"><decl pos:start="183:9" pos:end="183:24"><type pos:start="183:9" pos:end="183:11"><name pos:start="183:9" pos:end="183:11">int</name></type> <name pos:start="183:13" pos:end="183:24">bswap_needed</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="187:1" pos:end="187:19">#<cpp:directive pos:start="187:2" pos:end="187:6">ifdef</cpp:directive> <name pos:start="187:8" pos:end="187:19">BSWAP_NEEDED</name></cpp:ifdef>

        <expr_stmt pos:start="189:9" pos:end="192:0"><expr pos:start="189:9" pos:end="189:24"><name pos:start="189:9" pos:end="189:20">bswap_needed</name> <operator pos:start="189:22" pos:end="189:22">=</operator> <literal type="number" pos:start="189:24" pos:end="189:24">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="191:1" pos:end="191:5">#<cpp:directive pos:start="191:2" pos:end="191:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="193:9" pos:end="196:0"><expr pos:start="193:9" pos:end="193:24"><name pos:start="193:9" pos:end="193:20">bswap_needed</name> <operator pos:start="193:22" pos:end="193:22">=</operator> <literal type="number" pos:start="193:24" pos:end="193:24">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="195:1" pos:end="195:6">#<cpp:directive pos:start="195:2" pos:end="195:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="197:9" pos:end="197:39"><expr pos:start="197:9" pos:end="197:38"><name pos:start="197:9" pos:end="197:19">kernel_base</name> <operator pos:start="197:21" pos:end="197:21">=</operator> <name pos:start="197:23" pos:end="197:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>



        <expr_stmt pos:start="201:9" pos:end="205:37"><expr pos:start="201:9" pos:end="205:36"><name pos:start="201:9" pos:end="201:19">kernel_size</name> <operator pos:start="201:21" pos:end="201:21">=</operator> <call pos:start="201:23" pos:end="205:36"><name pos:start="201:23" pos:end="201:30">load_elf</name><argument_list pos:start="201:31" pos:end="205:36">(<argument pos:start="201:32" pos:end="201:46"><expr pos:start="201:32" pos:end="201:46"><name pos:start="201:32" pos:end="201:46">kernel_filename</name></expr></argument>, <argument pos:start="201:49" pos:end="201:72"><expr pos:start="201:49" pos:end="201:72"><name pos:start="201:49" pos:end="201:72">translate_kernel_address</name></expr></argument>, <argument pos:start="201:75" pos:end="201:78"><expr pos:start="201:75" pos:end="201:78"><name pos:start="201:75" pos:end="201:78">NULL</name></expr></argument>,

                               <argument pos:start="203:32" pos:end="203:35"><expr pos:start="203:32" pos:end="203:35"><name pos:start="203:32" pos:end="203:35">NULL</name></expr></argument>, <argument pos:start="203:38" pos:end="203:45"><expr pos:start="203:38" pos:end="203:45"><operator pos:start="203:38" pos:end="203:38">&amp;</operator><name pos:start="203:39" pos:end="203:45">lowaddr</name></expr></argument>, <argument pos:start="203:48" pos:end="203:51"><expr pos:start="203:48" pos:end="203:51"><name pos:start="203:48" pos:end="203:51">NULL</name></expr></argument>, <argument pos:start="203:54" pos:end="203:54"><expr pos:start="203:54" pos:end="203:54"><literal type="number" pos:start="203:54" pos:end="203:54">1</literal></expr></argument>, <argument pos:start="203:57" pos:end="203:71"><expr pos:start="203:57" pos:end="203:71"><name pos:start="203:57" pos:end="203:71">PPC_ELF_MACHINE</name></expr></argument>,

                               <argument pos:start="205:32" pos:end="205:32"><expr pos:start="205:32" pos:end="205:32"><literal type="number" pos:start="205:32" pos:end="205:32">0</literal></expr></argument>, <argument pos:start="205:35" pos:end="205:35"><expr pos:start="205:35" pos:end="205:35"><literal type="number" pos:start="205:35" pos:end="205:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="207:9" pos:end="213:54"><if pos:start="207:9" pos:end="213:54">if <condition pos:start="207:12" pos:end="207:28">(<expr pos:start="207:13" pos:end="207:27"><name pos:start="207:13" pos:end="207:23">kernel_size</name> <operator pos:start="207:25" pos:end="207:25">&lt;</operator> <literal type="number" pos:start="207:27" pos:end="207:27">0</literal></expr>)</condition><block type="pseudo" pos:start="209:13" pos:end="213:54"><block_content pos:start="209:13" pos:end="213:54">

            <expr_stmt pos:start="209:13" pos:end="213:54"><expr pos:start="209:13" pos:end="213:53"><name pos:start="209:13" pos:end="209:23">kernel_size</name> <operator pos:start="209:25" pos:end="209:25">=</operator> <call pos:start="209:27" pos:end="213:53"><name pos:start="209:27" pos:end="209:35">load_aout</name><argument_list pos:start="209:36" pos:end="213:53">(<argument pos:start="209:37" pos:end="209:51"><expr pos:start="209:37" pos:end="209:51"><name pos:start="209:37" pos:end="209:51">kernel_filename</name></expr></argument>, <argument pos:start="209:54" pos:end="209:64"><expr pos:start="209:54" pos:end="209:64"><name pos:start="209:54" pos:end="209:64">kernel_base</name></expr></argument>,

                                    <argument pos:start="211:37" pos:end="211:58"><expr pos:start="211:37" pos:end="211:58"><name pos:start="211:37" pos:end="211:44">ram_size</name> <operator pos:start="211:46" pos:end="211:46">-</operator> <name pos:start="211:48" pos:end="211:58">kernel_base</name></expr></argument>, <argument pos:start="211:61" pos:end="211:72"><expr pos:start="211:61" pos:end="211:72"><name pos:start="211:61" pos:end="211:72">bswap_needed</name></expr></argument>,

                                    <argument pos:start="213:37" pos:end="213:52"><expr pos:start="213:37" pos:end="213:52"><name pos:start="213:37" pos:end="213:52">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="215:9" pos:end="221:70"><if pos:start="215:9" pos:end="221:70">if <condition pos:start="215:12" pos:end="215:28">(<expr pos:start="215:13" pos:end="215:27"><name pos:start="215:13" pos:end="215:23">kernel_size</name> <operator pos:start="215:25" pos:end="215:25">&lt;</operator> <literal type="number" pos:start="215:27" pos:end="215:27">0</literal></expr>)</condition><block type="pseudo" pos:start="217:13" pos:end="221:70"><block_content pos:start="217:13" pos:end="221:70">

            <expr_stmt pos:start="217:13" pos:end="221:70"><expr pos:start="217:13" pos:end="221:69"><name pos:start="217:13" pos:end="217:23">kernel_size</name> <operator pos:start="217:25" pos:end="217:25">=</operator> <call pos:start="217:27" pos:end="221:69"><name pos:start="217:27" pos:end="217:45">load_image_targphys</name><argument_list pos:start="217:46" pos:end="221:69">(<argument pos:start="217:47" pos:end="217:61"><expr pos:start="217:47" pos:end="217:61"><name pos:start="217:47" pos:end="217:61">kernel_filename</name></expr></argument>,

                                              <argument pos:start="219:47" pos:end="219:57"><expr pos:start="219:47" pos:end="219:57"><name pos:start="219:47" pos:end="219:57">kernel_base</name></expr></argument>,

                                              <argument pos:start="221:47" pos:end="221:68"><expr pos:start="221:47" pos:end="221:68"><name pos:start="221:47" pos:end="221:54">ram_size</name> <operator pos:start="221:56" pos:end="221:56">-</operator> <name pos:start="221:58" pos:end="221:68">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="223:9" pos:end="229:9"><if pos:start="223:9" pos:end="229:9">if <condition pos:start="223:12" pos:end="223:28">(<expr pos:start="223:13" pos:end="223:27"><name pos:start="223:13" pos:end="223:23">kernel_size</name> <operator pos:start="223:25" pos:end="223:25">&lt;</operator> <literal type="number" pos:start="223:27" pos:end="223:27">0</literal></expr>)</condition> <block pos:start="223:30" pos:end="229:9">{<block_content pos:start="225:13" pos:end="227:20">

            <expr_stmt pos:start="225:13" pos:end="225:72"><expr pos:start="225:13" pos:end="225:71"><call pos:start="225:13" pos:end="225:71"><name pos:start="225:13" pos:end="225:24">error_report</name><argument_list pos:start="225:25" pos:end="225:71">(<argument pos:start="225:26" pos:end="225:53"><expr pos:start="225:26" pos:end="225:53"><literal type="string" pos:start="225:26" pos:end="225:53">"could not load kernel '%s'"</literal></expr></argument>, <argument pos:start="225:56" pos:end="225:70"><expr pos:start="225:56" pos:end="225:70"><name pos:start="225:56" pos:end="225:70">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:20"><expr pos:start="227:13" pos:end="227:19"><call pos:start="227:13" pos:end="227:19"><name pos:start="227:13" pos:end="227:16">exit</name><argument_list pos:start="227:17" pos:end="227:19">(<argument pos:start="227:18" pos:end="227:18"><expr pos:start="227:18" pos:end="227:18"><literal type="number" pos:start="227:18" pos:end="227:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="231:9" pos:end="231:25">/* load initrd */</comment>

        <if_stmt pos:start="233:9" pos:end="261:9"><if pos:start="233:9" pos:end="253:9">if <condition pos:start="233:12" pos:end="233:28">(<expr pos:start="233:13" pos:end="233:27"><name pos:start="233:13" pos:end="233:27">initrd_filename</name></expr>)</condition> <block pos:start="233:30" pos:end="253:9">{<block_content pos:start="235:13" pos:end="251:65">

            <expr_stmt pos:start="235:13" pos:end="235:77"><expr pos:start="235:13" pos:end="235:76"><name pos:start="235:13" pos:end="235:23">initrd_base</name> <operator pos:start="235:25" pos:end="235:25">=</operator> <call pos:start="235:27" pos:end="235:76"><name pos:start="235:27" pos:end="235:36">round_page</name><argument_list pos:start="235:37" pos:end="235:76">(<argument pos:start="235:38" pos:end="235:75"><expr pos:start="235:38" pos:end="235:75"><name pos:start="235:38" pos:end="235:48">kernel_base</name> <operator pos:start="235:50" pos:end="235:50">+</operator> <name pos:start="235:52" pos:end="235:62">kernel_size</name> <operator pos:start="235:64" pos:end="235:64">+</operator> <name pos:start="235:66" pos:end="235:75">KERNEL_GAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="239:70"><expr pos:start="237:13" pos:end="239:69"><name pos:start="237:13" pos:end="237:23">initrd_size</name> <operator pos:start="237:25" pos:end="237:25">=</operator> <call pos:start="237:27" pos:end="239:69"><name pos:start="237:27" pos:end="237:45">load_image_targphys</name><argument_list pos:start="237:46" pos:end="239:69">(<argument pos:start="237:47" pos:end="237:61"><expr pos:start="237:47" pos:end="237:61"><name pos:start="237:47" pos:end="237:61">initrd_filename</name></expr></argument>, <argument pos:start="237:64" pos:end="237:74"><expr pos:start="237:64" pos:end="237:74"><name pos:start="237:64" pos:end="237:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="239:47" pos:end="239:68"><expr pos:start="239:47" pos:end="239:68"><name pos:start="239:47" pos:end="239:54">ram_size</name> <operator pos:start="239:56" pos:end="239:56">-</operator> <name pos:start="239:58" pos:end="239:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="241:13" pos:end="249:13"><if pos:start="241:13" pos:end="249:13">if <condition pos:start="241:16" pos:end="241:32">(<expr pos:start="241:17" pos:end="241:31"><name pos:start="241:17" pos:end="241:27">initrd_size</name> <operator pos:start="241:29" pos:end="241:29">&lt;</operator> <literal type="number" pos:start="241:31" pos:end="241:31">0</literal></expr>)</condition> <block pos:start="241:34" pos:end="249:13">{<block_content pos:start="243:17" pos:end="247:24">

                <expr_stmt pos:start="243:17" pos:end="245:46"><expr pos:start="243:17" pos:end="245:45"><call pos:start="243:17" pos:end="245:45"><name pos:start="243:17" pos:end="243:28">error_report</name><argument_list pos:start="243:29" pos:end="245:45">(<argument pos:start="243:30" pos:end="243:67"><expr pos:start="243:30" pos:end="243:67"><literal type="string" pos:start="243:30" pos:end="243:67">"could not load initial ram disk '%s'"</literal></expr></argument>,

                             <argument pos:start="245:30" pos:end="245:44"><expr pos:start="245:30" pos:end="245:44"><name pos:start="245:30" pos:end="245:44">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="247:17" pos:end="247:24"><expr pos:start="247:17" pos:end="247:23"><call pos:start="247:17" pos:end="247:23"><name pos:start="247:17" pos:end="247:20">exit</name><argument_list pos:start="247:21" pos:end="247:23">(<argument pos:start="247:22" pos:end="247:22"><expr pos:start="247:22" pos:end="247:22"><literal type="number" pos:start="247:22" pos:end="247:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:65"><expr pos:start="251:13" pos:end="251:64"><name pos:start="251:13" pos:end="251:24">cmdline_base</name> <operator pos:start="251:26" pos:end="251:26">=</operator> <call pos:start="251:28" pos:end="251:64"><name pos:start="251:28" pos:end="251:37">round_page</name><argument_list pos:start="251:38" pos:end="251:64">(<argument pos:start="251:39" pos:end="251:63"><expr pos:start="251:39" pos:end="251:63"><name pos:start="251:39" pos:end="251:49">initrd_base</name> <operator pos:start="251:51" pos:end="251:51">+</operator> <name pos:start="251:53" pos:end="251:63">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="253:11" pos:end="261:9">else <block pos:start="253:16" pos:end="261:9">{<block_content pos:start="255:13" pos:end="259:78">

            <expr_stmt pos:start="255:13" pos:end="255:28"><expr pos:start="255:13" pos:end="255:27"><name pos:start="255:13" pos:end="255:23">initrd_base</name> <operator pos:start="255:25" pos:end="255:25">=</operator> <literal type="number" pos:start="255:27" pos:end="255:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:28"><expr pos:start="257:13" pos:end="257:27"><name pos:start="257:13" pos:end="257:23">initrd_size</name> <operator pos:start="257:25" pos:end="257:25">=</operator> <literal type="number" pos:start="257:27" pos:end="257:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:78"><expr pos:start="259:13" pos:end="259:77"><name pos:start="259:13" pos:end="259:24">cmdline_base</name> <operator pos:start="259:26" pos:end="259:26">=</operator> <call pos:start="259:28" pos:end="259:77"><name pos:start="259:28" pos:end="259:37">round_page</name><argument_list pos:start="259:38" pos:end="259:77">(<argument pos:start="259:39" pos:end="259:76"><expr pos:start="259:39" pos:end="259:76"><name pos:start="259:39" pos:end="259:49">kernel_base</name> <operator pos:start="259:51" pos:end="259:51">+</operator> <name pos:start="259:53" pos:end="259:63">kernel_size</name> <operator pos:start="259:65" pos:end="259:65">+</operator> <name pos:start="259:67" pos:end="259:76">KERNEL_GAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:30"><expr pos:start="263:9" pos:end="263:29"><name pos:start="263:9" pos:end="263:23">ppc_boot_device</name> <operator pos:start="263:25" pos:end="263:25">=</operator> <literal type="char" pos:start="263:27" pos:end="263:29">'m'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="265:7" pos:end="303:5">else <block pos:start="265:12" pos:end="303:5">{<block_content pos:start="267:9" pos:end="301:9">

        <expr_stmt pos:start="267:9" pos:end="267:24"><expr pos:start="267:9" pos:end="267:23"><name pos:start="267:9" pos:end="267:19">kernel_base</name> <operator pos:start="267:21" pos:end="267:21">=</operator> <literal type="number" pos:start="267:23" pos:end="267:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:24"><expr pos:start="269:9" pos:end="269:23"><name pos:start="269:9" pos:end="269:19">kernel_size</name> <operator pos:start="269:21" pos:end="269:21">=</operator> <literal type="number" pos:start="269:23" pos:end="269:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:24"><expr pos:start="271:9" pos:end="271:23"><name pos:start="271:9" pos:end="271:19">initrd_base</name> <operator pos:start="271:21" pos:end="271:21">=</operator> <literal type="number" pos:start="271:23" pos:end="271:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:24"><expr pos:start="273:9" pos:end="273:23"><name pos:start="273:9" pos:end="273:19">initrd_size</name> <operator pos:start="273:21" pos:end="273:21">=</operator> <literal type="number" pos:start="273:23" pos:end="273:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:31"><expr pos:start="275:9" pos:end="275:30"><name pos:start="275:9" pos:end="275:23">ppc_boot_device</name> <operator pos:start="275:25" pos:end="275:25">=</operator> <literal type="char" pos:start="275:27" pos:end="275:30">'\0'</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="277:9" pos:end="281:11">/* We consider that NewWorld PowerMac never have any floppy drive

         * For now, OHW cannot boot from the network.

         */</comment>

        <for pos:start="283:9" pos:end="293:9">for <control pos:start="283:13" pos:end="283:48">(<init pos:start="283:14" pos:end="283:19"><expr pos:start="283:14" pos:end="283:18"><name pos:start="283:14" pos:end="283:14">i</name> <operator pos:start="283:16" pos:end="283:16">=</operator> <literal type="number" pos:start="283:18" pos:end="283:18">0</literal></expr>;</init> <condition pos:start="283:21" pos:end="283:43"><expr pos:start="283:21" pos:end="283:42"><name pos:start="283:21" pos:end="283:34"><name pos:start="283:21" pos:end="283:31">boot_device</name><index pos:start="283:32" pos:end="283:34">[<expr pos:start="283:33" pos:end="283:33"><name pos:start="283:33" pos:end="283:33">i</name></expr>]</index></name> <operator pos:start="283:36" pos:end="283:37">!=</operator> <literal type="char" pos:start="283:39" pos:end="283:42">'\0'</literal></expr>;</condition> <incr pos:start="283:45" pos:end="283:47"><expr pos:start="283:45" pos:end="283:47"><name pos:start="283:45" pos:end="283:45">i</name><operator pos:start="283:46" pos:end="283:47">++</operator></expr></incr>)</control> <block pos:start="283:50" pos:end="293:9">{<block_content pos:start="285:13" pos:end="291:13">

            <if_stmt pos:start="285:13" pos:end="291:13"><if pos:start="285:13" pos:end="291:13">if <condition pos:start="285:16" pos:end="285:63">(<expr pos:start="285:17" pos:end="285:62"><name pos:start="285:17" pos:end="285:30"><name pos:start="285:17" pos:end="285:27">boot_device</name><index pos:start="285:28" pos:end="285:30">[<expr pos:start="285:29" pos:end="285:29"><name pos:start="285:29" pos:end="285:29">i</name></expr>]</index></name> <operator pos:start="285:32" pos:end="285:33">&gt;=</operator> <literal type="char" pos:start="285:35" pos:end="285:37">'c'</literal> <operator pos:start="285:39" pos:end="285:40">&amp;&amp;</operator> <name pos:start="285:42" pos:end="285:55"><name pos:start="285:42" pos:end="285:52">boot_device</name><index pos:start="285:53" pos:end="285:55">[<expr pos:start="285:54" pos:end="285:54"><name pos:start="285:54" pos:end="285:54">i</name></expr>]</index></name> <operator pos:start="285:57" pos:end="285:58">&lt;=</operator> <literal type="char" pos:start="285:60" pos:end="285:62">'f'</literal></expr>)</condition> <block pos:start="285:65" pos:end="291:13">{<block_content pos:start="287:17" pos:end="289:22">

                <expr_stmt pos:start="287:17" pos:end="287:49"><expr pos:start="287:17" pos:end="287:48"><name pos:start="287:17" pos:end="287:31">ppc_boot_device</name> <operator pos:start="287:33" pos:end="287:33">=</operator> <name pos:start="287:35" pos:end="287:48"><name pos:start="287:35" pos:end="287:45">boot_device</name><index pos:start="287:46" pos:end="287:48">[<expr pos:start="287:47" pos:end="287:47"><name pos:start="287:47" pos:end="287:47">i</name></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="289:17" pos:end="289:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="295:9" pos:end="301:9"><if pos:start="295:9" pos:end="301:9">if <condition pos:start="295:12" pos:end="295:36">(<expr pos:start="295:13" pos:end="295:35"><name pos:start="295:13" pos:end="295:27">ppc_boot_device</name> <operator pos:start="295:29" pos:end="295:30">==</operator> <literal type="char" pos:start="295:32" pos:end="295:35">'\0'</literal></expr>)</condition> <block pos:start="295:38" pos:end="301:9">{<block_content pos:start="297:13" pos:end="299:20">

            <expr_stmt pos:start="297:13" pos:end="297:72"><expr pos:start="297:13" pos:end="297:71"><call pos:start="297:13" pos:end="297:71"><name pos:start="297:13" pos:end="297:19">fprintf</name><argument_list pos:start="297:20" pos:end="297:71">(<argument pos:start="297:21" pos:end="297:26"><expr pos:start="297:21" pos:end="297:26"><name pos:start="297:21" pos:end="297:26">stderr</name></expr></argument>, <argument pos:start="297:29" pos:end="297:70"><expr pos:start="297:29" pos:end="297:70"><literal type="string" pos:start="297:29" pos:end="297:70">"No valid boot device for Mac99 machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:20"><expr pos:start="299:13" pos:end="299:19"><call pos:start="299:13" pos:end="299:19"><name pos:start="299:13" pos:end="299:16">exit</name><argument_list pos:start="299:17" pos:end="299:19">(<argument pos:start="299:18" pos:end="299:18"><expr pos:start="299:18" pos:end="299:18"><literal type="number" pos:start="299:18" pos:end="299:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="307:5" pos:end="307:39">/* Register 8 MB of ISA IO space */</comment>

    <expr_stmt pos:start="309:5" pos:end="311:61"><expr pos:start="309:5" pos:end="311:60"><call pos:start="309:5" pos:end="311:60"><name pos:start="309:5" pos:end="309:28">memory_region_init_alias</name><argument_list pos:start="309:29" pos:end="311:60">(<argument pos:start="309:30" pos:end="309:32"><expr pos:start="309:30" pos:end="309:32"><name pos:start="309:30" pos:end="309:32">isa</name></expr></argument>, <argument pos:start="309:35" pos:end="309:38"><expr pos:start="309:35" pos:end="309:38"><name pos:start="309:35" pos:end="309:38">NULL</name></expr></argument>, <argument pos:start="309:41" pos:end="309:50"><expr pos:start="309:41" pos:end="309:50"><literal type="string" pos:start="309:41" pos:end="309:50">"isa_mmio"</literal></expr></argument>,

                             <argument pos:start="311:30" pos:end="311:44"><expr pos:start="311:30" pos:end="311:44"><call pos:start="311:30" pos:end="311:44"><name pos:start="311:30" pos:end="311:42">get_system_io</name><argument_list pos:start="311:43" pos:end="311:44">()</argument_list></call></expr></argument>, <argument pos:start="311:47" pos:end="311:47"><expr pos:start="311:47" pos:end="311:47"><literal type="number" pos:start="311:47" pos:end="311:47">0</literal></expr></argument>, <argument pos:start="311:50" pos:end="311:59"><expr pos:start="311:50" pos:end="311:59"><literal type="number" pos:start="311:50" pos:end="311:59">0x00800000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="313:5" pos:end="313:70"><expr pos:start="313:5" pos:end="313:69"><call pos:start="313:5" pos:end="313:69"><name pos:start="313:5" pos:end="313:31">memory_region_add_subregion</name><argument_list pos:start="313:32" pos:end="313:69">(<argument pos:start="313:33" pos:end="313:51"><expr pos:start="313:33" pos:end="313:51"><call pos:start="313:33" pos:end="313:51"><name pos:start="313:33" pos:end="313:49">get_system_memory</name><argument_list pos:start="313:50" pos:end="313:51">()</argument_list></call></expr></argument>, <argument pos:start="313:54" pos:end="313:63"><expr pos:start="313:54" pos:end="313:63"><literal type="number" pos:start="313:54" pos:end="313:63">0xf2000000</literal></expr></argument>, <argument pos:start="313:66" pos:end="313:68"><expr pos:start="313:66" pos:end="313:68"><name pos:start="313:66" pos:end="313:68">isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="317:5" pos:end="317:48">/* UniN init: XXX should be a real device */</comment>

    <expr_stmt pos:start="319:5" pos:end="319:79"><expr pos:start="319:5" pos:end="319:78"><call pos:start="319:5" pos:end="319:78"><name pos:start="319:5" pos:end="319:25">memory_region_init_io</name><argument_list pos:start="319:26" pos:end="319:78">(<argument pos:start="319:27" pos:end="319:37"><expr pos:start="319:27" pos:end="319:37"><name pos:start="319:27" pos:end="319:37">unin_memory</name></expr></argument>, <argument pos:start="319:40" pos:end="319:43"><expr pos:start="319:40" pos:end="319:43"><name pos:start="319:40" pos:end="319:43">NULL</name></expr></argument>, <argument pos:start="319:46" pos:end="319:54"><expr pos:start="319:46" pos:end="319:54"><operator pos:start="319:46" pos:end="319:46">&amp;</operator><name pos:start="319:47" pos:end="319:54">unin_ops</name></expr></argument>, <argument pos:start="319:57" pos:end="319:61"><expr pos:start="319:57" pos:end="319:61"><name pos:start="319:57" pos:end="319:61">token</name></expr></argument>, <argument pos:start="319:64" pos:end="319:69"><expr pos:start="319:64" pos:end="319:69"><literal type="string" pos:start="319:64" pos:end="319:69">"unin"</literal></expr></argument>, <argument pos:start="319:72" pos:end="319:77"><expr pos:start="319:72" pos:end="319:77"><literal type="number" pos:start="319:72" pos:end="319:77">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="321:5" pos:end="321:78"><expr pos:start="321:5" pos:end="321:77"><call pos:start="321:5" pos:end="321:77"><name pos:start="321:5" pos:end="321:31">memory_region_add_subregion</name><argument_list pos:start="321:32" pos:end="321:77">(<argument pos:start="321:33" pos:end="321:51"><expr pos:start="321:33" pos:end="321:51"><call pos:start="321:33" pos:end="321:51"><name pos:start="321:33" pos:end="321:49">get_system_memory</name><argument_list pos:start="321:50" pos:end="321:51">()</argument_list></call></expr></argument>, <argument pos:start="321:54" pos:end="321:63"><expr pos:start="321:54" pos:end="321:63"><literal type="number" pos:start="321:54" pos:end="321:63">0xf8000000</literal></expr></argument>, <argument pos:start="321:66" pos:end="321:76"><expr pos:start="321:66" pos:end="321:76"><name pos:start="321:66" pos:end="321:76">unin_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="325:5" pos:end="325:80"><expr pos:start="325:5" pos:end="325:79"><call pos:start="325:5" pos:end="325:79"><name pos:start="325:5" pos:end="325:25">memory_region_init_io</name><argument_list pos:start="325:26" pos:end="325:79">(<argument pos:start="325:27" pos:end="325:38"><expr pos:start="325:27" pos:end="325:38"><name pos:start="325:27" pos:end="325:38">unin2_memory</name></expr></argument>, <argument pos:start="325:41" pos:end="325:44"><expr pos:start="325:41" pos:end="325:44"><name pos:start="325:41" pos:end="325:44">NULL</name></expr></argument>, <argument pos:start="325:47" pos:end="325:55"><expr pos:start="325:47" pos:end="325:55"><operator pos:start="325:47" pos:end="325:47">&amp;</operator><name pos:start="325:48" pos:end="325:55">unin_ops</name></expr></argument>, <argument pos:start="325:58" pos:end="325:62"><expr pos:start="325:58" pos:end="325:62"><name pos:start="325:58" pos:end="325:62">token</name></expr></argument>, <argument pos:start="325:65" pos:end="325:70"><expr pos:start="325:65" pos:end="325:70"><literal type="string" pos:start="325:65" pos:end="325:70">"unin"</literal></expr></argument>, <argument pos:start="325:73" pos:end="325:78"><expr pos:start="325:73" pos:end="325:78"><literal type="number" pos:start="325:73" pos:end="325:78">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="327:5" pos:end="327:79"><expr pos:start="327:5" pos:end="327:78"><call pos:start="327:5" pos:end="327:78"><name pos:start="327:5" pos:end="327:31">memory_region_add_subregion</name><argument_list pos:start="327:32" pos:end="327:78">(<argument pos:start="327:33" pos:end="327:51"><expr pos:start="327:33" pos:end="327:51"><call pos:start="327:33" pos:end="327:51"><name pos:start="327:33" pos:end="327:49">get_system_memory</name><argument_list pos:start="327:50" pos:end="327:51">()</argument_list></call></expr></argument>, <argument pos:start="327:54" pos:end="327:63"><expr pos:start="327:54" pos:end="327:63"><literal type="number" pos:start="327:54" pos:end="327:63">0xf3000000</literal></expr></argument>, <argument pos:start="327:66" pos:end="327:77"><expr pos:start="327:66" pos:end="327:77"><name pos:start="327:66" pos:end="327:77">unin2_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="331:5" pos:end="331:60"><expr pos:start="331:5" pos:end="331:59"><name pos:start="331:5" pos:end="331:16">openpic_irqs</name> <operator pos:start="331:18" pos:end="331:18">=</operator> <call pos:start="331:20" pos:end="331:59"><name pos:start="331:20" pos:end="331:28">g_malloc0</name><argument_list pos:start="331:29" pos:end="331:59">(<argument pos:start="331:30" pos:end="331:58"><expr pos:start="331:30" pos:end="331:58"><name pos:start="331:30" pos:end="331:37">smp_cpus</name> <operator pos:start="331:39" pos:end="331:39">*</operator> <sizeof pos:start="331:41" pos:end="331:58">sizeof<argument_list pos:start="331:47" pos:end="331:58">(<argument pos:start="331:48" pos:end="331:57"><expr pos:start="331:48" pos:end="331:57"><name pos:start="331:48" pos:end="331:55">qemu_irq</name> <operator pos:start="331:57" pos:end="331:57">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="333:5" pos:end="335:67"><expr pos:start="333:5" pos:end="335:66"><name pos:start="333:5" pos:end="333:19"><name pos:start="333:5" pos:end="333:16">openpic_irqs</name><index pos:start="333:17" pos:end="333:19">[<expr pos:start="333:18" pos:end="333:18"><literal type="number" pos:start="333:18" pos:end="333:18">0</literal></expr>]</index></name> <operator pos:start="333:21" pos:end="333:21">=</operator>

        <call pos:start="335:9" pos:end="335:66"><name pos:start="335:9" pos:end="335:17">g_malloc0</name><argument_list pos:start="335:18" pos:end="335:66">(<argument pos:start="335:19" pos:end="335:65"><expr pos:start="335:19" pos:end="335:65"><name pos:start="335:19" pos:end="335:26">smp_cpus</name> <operator pos:start="335:28" pos:end="335:28">*</operator> <sizeof pos:start="335:30" pos:end="335:45">sizeof<argument_list pos:start="335:36" pos:end="335:45">(<argument pos:start="335:37" pos:end="335:44"><expr pos:start="335:37" pos:end="335:44"><name pos:start="335:37" pos:end="335:44">qemu_irq</name></expr></argument>)</argument_list></sizeof> <operator pos:start="335:47" pos:end="335:47">*</operator> <name pos:start="335:49" pos:end="335:65">OPENPIC_OUTPUT_NB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="337:5" pos:end="415:5">for <control pos:start="337:9" pos:end="337:34">(<init pos:start="337:10" pos:end="337:15"><expr pos:start="337:10" pos:end="337:14"><name pos:start="337:10" pos:end="337:10">i</name> <operator pos:start="337:12" pos:end="337:12">=</operator> <literal type="number" pos:start="337:14" pos:end="337:14">0</literal></expr>;</init> <condition pos:start="337:17" pos:end="337:29"><expr pos:start="337:17" pos:end="337:28"><name pos:start="337:17" pos:end="337:17">i</name> <operator pos:start="337:19" pos:end="337:19">&lt;</operator> <name pos:start="337:21" pos:end="337:28">smp_cpus</name></expr>;</condition> <incr pos:start="337:31" pos:end="337:33"><expr pos:start="337:31" pos:end="337:33"><name pos:start="337:31" pos:end="337:31">i</name><operator pos:start="337:32" pos:end="337:33">++</operator></expr></incr>)</control> <block pos:start="337:36" pos:end="415:5">{<block_content pos:start="345:9" pos:end="413:9">

        <comment type="block" pos:start="339:9" pos:end="343:11">/* Mac99 IRQ connection between OpenPIC outputs pins

         * and PowerPC input pins

         */</comment>

        <switch pos:start="345:9" pos:end="413:9">switch <condition pos:start="345:16" pos:end="345:31">(<expr pos:start="345:17" pos:end="345:30"><call pos:start="345:17" pos:end="345:30"><name pos:start="345:17" pos:end="345:25">PPC_INPUT</name><argument_list pos:start="345:26" pos:end="345:30">(<argument pos:start="345:27" pos:end="345:29"><expr pos:start="345:27" pos:end="345:29"><name pos:start="345:27" pos:end="345:29">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="345:33" pos:end="413:9">{<block_content pos:start="347:9" pos:end="411:20">

        <case pos:start="347:9" pos:end="347:33">case <expr pos:start="347:14" pos:end="347:32"><name pos:start="347:14" pos:end="347:32">PPC_FLAGS_INPUT_6xx</name></expr>:</case>

            <expr_stmt pos:start="349:13" pos:end="349:72"><expr pos:start="349:13" pos:end="349:71"><name pos:start="349:13" pos:end="349:27"><name pos:start="349:13" pos:end="349:24">openpic_irqs</name><index pos:start="349:25" pos:end="349:27">[<expr pos:start="349:26" pos:end="349:26"><name pos:start="349:26" pos:end="349:26">i</name></expr>]</index></name> <operator pos:start="349:29" pos:end="349:29">=</operator> <name pos:start="349:31" pos:end="349:45"><name pos:start="349:31" pos:end="349:42">openpic_irqs</name><index pos:start="349:43" pos:end="349:45">[<expr pos:start="349:44" pos:end="349:44"><literal type="number" pos:start="349:44" pos:end="349:44">0</literal></expr>]</index></name> <operator pos:start="349:47" pos:end="349:47">+</operator> <operator pos:start="349:49" pos:end="349:49">(</operator><name pos:start="349:50" pos:end="349:50">i</name> <operator pos:start="349:52" pos:end="349:52">*</operator> <name pos:start="349:54" pos:end="349:70">OPENPIC_OUTPUT_NB</name><operator pos:start="349:71" pos:end="349:71">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="351:13" pos:end="353:64"><expr pos:start="351:13" pos:end="353:63"><name pos:start="351:13" pos:end="351:47"><name pos:start="351:13" pos:end="351:24">openpic_irqs</name><index pos:start="351:25" pos:end="351:27">[<expr pos:start="351:26" pos:end="351:26"><name pos:start="351:26" pos:end="351:26">i</name></expr>]</index><index pos:start="351:28" pos:end="351:47">[<expr pos:start="351:29" pos:end="351:46"><name pos:start="351:29" pos:end="351:46">OPENPIC_OUTPUT_INT</name></expr>]</index></name> <operator pos:start="351:49" pos:end="351:49">=</operator>

                <operator pos:start="353:17" pos:end="353:17">(</operator><operator pos:start="353:18" pos:end="353:18">(</operator><name pos:start="353:19" pos:end="353:26">qemu_irq</name> <operator pos:start="353:28" pos:end="353:28">*</operator><operator pos:start="353:29" pos:end="353:29">)</operator><name pos:start="353:30" pos:end="353:44"><name pos:start="353:30" pos:end="353:32">env</name><operator pos:start="353:33" pos:end="353:34">-&gt;</operator><name pos:start="353:35" pos:end="353:44">irq_inputs</name></name><operator pos:start="353:45" pos:end="353:45">)</operator><index pos:start="353:46" pos:end="353:63">[<expr pos:start="353:47" pos:end="353:62"><name pos:start="353:47" pos:end="353:62">PPC6xx_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="355:13" pos:end="357:64"><expr pos:start="355:13" pos:end="357:63"><name pos:start="355:13" pos:end="355:48"><name pos:start="355:13" pos:end="355:24">openpic_irqs</name><index pos:start="355:25" pos:end="355:27">[<expr pos:start="355:26" pos:end="355:26"><name pos:start="355:26" pos:end="355:26">i</name></expr>]</index><index pos:start="355:28" pos:end="355:48">[<expr pos:start="355:29" pos:end="355:47"><name pos:start="355:29" pos:end="355:47">OPENPIC_OUTPUT_CINT</name></expr>]</index></name> <operator pos:start="355:50" pos:end="355:50">=</operator>

                <operator pos:start="357:17" pos:end="357:17">(</operator><operator pos:start="357:18" pos:end="357:18">(</operator><name pos:start="357:19" pos:end="357:26">qemu_irq</name> <operator pos:start="357:28" pos:end="357:28">*</operator><operator pos:start="357:29" pos:end="357:29">)</operator><name pos:start="357:30" pos:end="357:44"><name pos:start="357:30" pos:end="357:32">env</name><operator pos:start="357:33" pos:end="357:34">-&gt;</operator><name pos:start="357:35" pos:end="357:44">irq_inputs</name></name><operator pos:start="357:45" pos:end="357:45">)</operator><index pos:start="357:46" pos:end="357:63">[<expr pos:start="357:47" pos:end="357:62"><name pos:start="357:47" pos:end="357:62">PPC6xx_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="359:13" pos:end="361:64"><expr pos:start="359:13" pos:end="361:63"><name pos:start="359:13" pos:end="359:47"><name pos:start="359:13" pos:end="359:24">openpic_irqs</name><index pos:start="359:25" pos:end="359:27">[<expr pos:start="359:26" pos:end="359:26"><name pos:start="359:26" pos:end="359:26">i</name></expr>]</index><index pos:start="359:28" pos:end="359:47">[<expr pos:start="359:29" pos:end="359:46"><name pos:start="359:29" pos:end="359:46">OPENPIC_OUTPUT_MCK</name></expr>]</index></name> <operator pos:start="359:49" pos:end="359:49">=</operator>

                <operator pos:start="361:17" pos:end="361:17">(</operator><operator pos:start="361:18" pos:end="361:18">(</operator><name pos:start="361:19" pos:end="361:26">qemu_irq</name> <operator pos:start="361:28" pos:end="361:28">*</operator><operator pos:start="361:29" pos:end="361:29">)</operator><name pos:start="361:30" pos:end="361:44"><name pos:start="361:30" pos:end="361:32">env</name><operator pos:start="361:33" pos:end="361:34">-&gt;</operator><name pos:start="361:35" pos:end="361:44">irq_inputs</name></name><operator pos:start="361:45" pos:end="361:45">)</operator><index pos:start="361:46" pos:end="361:63">[<expr pos:start="361:47" pos:end="361:62"><name pos:start="361:47" pos:end="361:62">PPC6xx_INPUT_MCP</name></expr>]</index></expr>;</expr_stmt>

            <comment type="block" pos:start="363:13" pos:end="363:33">/* Not connected ? */</comment>

            <expr_stmt pos:start="365:13" pos:end="365:57"><expr pos:start="365:13" pos:end="365:56"><name pos:start="365:13" pos:end="365:49"><name pos:start="365:13" pos:end="365:24">openpic_irqs</name><index pos:start="365:25" pos:end="365:27">[<expr pos:start="365:26" pos:end="365:26"><name pos:start="365:26" pos:end="365:26">i</name></expr>]</index><index pos:start="365:28" pos:end="365:49">[<expr pos:start="365:29" pos:end="365:48"><name pos:start="365:29" pos:end="365:48">OPENPIC_OUTPUT_DEBUG</name></expr>]</index></name> <operator pos:start="365:51" pos:end="365:51">=</operator> <name pos:start="365:53" pos:end="365:56">NULL</name></expr>;</expr_stmt>

            <comment type="block" pos:start="367:13" pos:end="367:28">/* Check this */</comment>

            <expr_stmt pos:start="369:13" pos:end="371:67"><expr pos:start="369:13" pos:end="371:66"><name pos:start="369:13" pos:end="369:49"><name pos:start="369:13" pos:end="369:24">openpic_irqs</name><index pos:start="369:25" pos:end="369:27">[<expr pos:start="369:26" pos:end="369:26"><name pos:start="369:26" pos:end="369:26">i</name></expr>]</index><index pos:start="369:28" pos:end="369:49">[<expr pos:start="369:29" pos:end="369:48"><name pos:start="369:29" pos:end="369:48">OPENPIC_OUTPUT_RESET</name></expr>]</index></name> <operator pos:start="369:51" pos:end="369:51">=</operator>

                <operator pos:start="371:17" pos:end="371:17">(</operator><operator pos:start="371:18" pos:end="371:18">(</operator><name pos:start="371:19" pos:end="371:26">qemu_irq</name> <operator pos:start="371:28" pos:end="371:28">*</operator><operator pos:start="371:29" pos:end="371:29">)</operator><name pos:start="371:30" pos:end="371:44"><name pos:start="371:30" pos:end="371:32">env</name><operator pos:start="371:33" pos:end="371:34">-&gt;</operator><name pos:start="371:35" pos:end="371:44">irq_inputs</name></name><operator pos:start="371:45" pos:end="371:45">)</operator><index pos:start="371:46" pos:end="371:66">[<expr pos:start="371:47" pos:end="371:65"><name pos:start="371:47" pos:end="371:65">PPC6xx_INPUT_HRESET</name></expr>]</index></expr>;</expr_stmt>

            <break pos:start="373:13" pos:end="376:0">break;</break>

<cpp:if pos:start="375:1" pos:end="375:25">#<cpp:directive pos:start="375:2" pos:end="375:3">if</cpp:directive> <expr pos:start="375:5" pos:end="375:25"><call pos:start="375:5" pos:end="375:25"><name pos:start="375:5" pos:end="375:11">defined</name><argument_list pos:start="375:12" pos:end="375:25">(<argument pos:start="375:13" pos:end="375:24"><expr pos:start="375:13" pos:end="375:24"><name pos:start="375:13" pos:end="375:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="377:9" pos:end="377:33">case <expr pos:start="377:14" pos:end="377:32"><name pos:start="377:14" pos:end="377:32">PPC_FLAGS_INPUT_970</name></expr>:</case>

            <expr_stmt pos:start="379:13" pos:end="379:72"><expr pos:start="379:13" pos:end="379:71"><name pos:start="379:13" pos:end="379:27"><name pos:start="379:13" pos:end="379:24">openpic_irqs</name><index pos:start="379:25" pos:end="379:27">[<expr pos:start="379:26" pos:end="379:26"><name pos:start="379:26" pos:end="379:26">i</name></expr>]</index></name> <operator pos:start="379:29" pos:end="379:29">=</operator> <name pos:start="379:31" pos:end="379:45"><name pos:start="379:31" pos:end="379:42">openpic_irqs</name><index pos:start="379:43" pos:end="379:45">[<expr pos:start="379:44" pos:end="379:44"><literal type="number" pos:start="379:44" pos:end="379:44">0</literal></expr>]</index></name> <operator pos:start="379:47" pos:end="379:47">+</operator> <operator pos:start="379:49" pos:end="379:49">(</operator><name pos:start="379:50" pos:end="379:50">i</name> <operator pos:start="379:52" pos:end="379:52">*</operator> <name pos:start="379:54" pos:end="379:70">OPENPIC_OUTPUT_NB</name><operator pos:start="379:71" pos:end="379:71">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="381:13" pos:end="383:64"><expr pos:start="381:13" pos:end="383:63"><name pos:start="381:13" pos:end="381:47"><name pos:start="381:13" pos:end="381:24">openpic_irqs</name><index pos:start="381:25" pos:end="381:27">[<expr pos:start="381:26" pos:end="381:26"><name pos:start="381:26" pos:end="381:26">i</name></expr>]</index><index pos:start="381:28" pos:end="381:47">[<expr pos:start="381:29" pos:end="381:46"><name pos:start="381:29" pos:end="381:46">OPENPIC_OUTPUT_INT</name></expr>]</index></name> <operator pos:start="381:49" pos:end="381:49">=</operator>

                <operator pos:start="383:17" pos:end="383:17">(</operator><operator pos:start="383:18" pos:end="383:18">(</operator><name pos:start="383:19" pos:end="383:26">qemu_irq</name> <operator pos:start="383:28" pos:end="383:28">*</operator><operator pos:start="383:29" pos:end="383:29">)</operator><name pos:start="383:30" pos:end="383:44"><name pos:start="383:30" pos:end="383:32">env</name><operator pos:start="383:33" pos:end="383:34">-&gt;</operator><name pos:start="383:35" pos:end="383:44">irq_inputs</name></name><operator pos:start="383:45" pos:end="383:45">)</operator><index pos:start="383:46" pos:end="383:63">[<expr pos:start="383:47" pos:end="383:62"><name pos:start="383:47" pos:end="383:62">PPC970_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="385:13" pos:end="387:64"><expr pos:start="385:13" pos:end="387:63"><name pos:start="385:13" pos:end="385:48"><name pos:start="385:13" pos:end="385:24">openpic_irqs</name><index pos:start="385:25" pos:end="385:27">[<expr pos:start="385:26" pos:end="385:26"><name pos:start="385:26" pos:end="385:26">i</name></expr>]</index><index pos:start="385:28" pos:end="385:48">[<expr pos:start="385:29" pos:end="385:47"><name pos:start="385:29" pos:end="385:47">OPENPIC_OUTPUT_CINT</name></expr>]</index></name> <operator pos:start="385:50" pos:end="385:50">=</operator>

                <operator pos:start="387:17" pos:end="387:17">(</operator><operator pos:start="387:18" pos:end="387:18">(</operator><name pos:start="387:19" pos:end="387:26">qemu_irq</name> <operator pos:start="387:28" pos:end="387:28">*</operator><operator pos:start="387:29" pos:end="387:29">)</operator><name pos:start="387:30" pos:end="387:44"><name pos:start="387:30" pos:end="387:32">env</name><operator pos:start="387:33" pos:end="387:34">-&gt;</operator><name pos:start="387:35" pos:end="387:44">irq_inputs</name></name><operator pos:start="387:45" pos:end="387:45">)</operator><index pos:start="387:46" pos:end="387:63">[<expr pos:start="387:47" pos:end="387:62"><name pos:start="387:47" pos:end="387:62">PPC970_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="389:13" pos:end="391:64"><expr pos:start="389:13" pos:end="391:63"><name pos:start="389:13" pos:end="389:47"><name pos:start="389:13" pos:end="389:24">openpic_irqs</name><index pos:start="389:25" pos:end="389:27">[<expr pos:start="389:26" pos:end="389:26"><name pos:start="389:26" pos:end="389:26">i</name></expr>]</index><index pos:start="389:28" pos:end="389:47">[<expr pos:start="389:29" pos:end="389:46"><name pos:start="389:29" pos:end="389:46">OPENPIC_OUTPUT_MCK</name></expr>]</index></name> <operator pos:start="389:49" pos:end="389:49">=</operator>

                <operator pos:start="391:17" pos:end="391:17">(</operator><operator pos:start="391:18" pos:end="391:18">(</operator><name pos:start="391:19" pos:end="391:26">qemu_irq</name> <operator pos:start="391:28" pos:end="391:28">*</operator><operator pos:start="391:29" pos:end="391:29">)</operator><name pos:start="391:30" pos:end="391:44"><name pos:start="391:30" pos:end="391:32">env</name><operator pos:start="391:33" pos:end="391:34">-&gt;</operator><name pos:start="391:35" pos:end="391:44">irq_inputs</name></name><operator pos:start="391:45" pos:end="391:45">)</operator><index pos:start="391:46" pos:end="391:63">[<expr pos:start="391:47" pos:end="391:62"><name pos:start="391:47" pos:end="391:62">PPC970_INPUT_MCP</name></expr>]</index></expr>;</expr_stmt>

            <comment type="block" pos:start="393:13" pos:end="393:33">/* Not connected ? */</comment>

            <expr_stmt pos:start="395:13" pos:end="395:57"><expr pos:start="395:13" pos:end="395:56"><name pos:start="395:13" pos:end="395:49"><name pos:start="395:13" pos:end="395:24">openpic_irqs</name><index pos:start="395:25" pos:end="395:27">[<expr pos:start="395:26" pos:end="395:26"><name pos:start="395:26" pos:end="395:26">i</name></expr>]</index><index pos:start="395:28" pos:end="395:49">[<expr pos:start="395:29" pos:end="395:48"><name pos:start="395:29" pos:end="395:48">OPENPIC_OUTPUT_DEBUG</name></expr>]</index></name> <operator pos:start="395:51" pos:end="395:51">=</operator> <name pos:start="395:53" pos:end="395:56">NULL</name></expr>;</expr_stmt>

            <comment type="block" pos:start="397:13" pos:end="397:28">/* Check this */</comment>

            <expr_stmt pos:start="399:13" pos:end="401:67"><expr pos:start="399:13" pos:end="401:66"><name pos:start="399:13" pos:end="399:49"><name pos:start="399:13" pos:end="399:24">openpic_irqs</name><index pos:start="399:25" pos:end="399:27">[<expr pos:start="399:26" pos:end="399:26"><name pos:start="399:26" pos:end="399:26">i</name></expr>]</index><index pos:start="399:28" pos:end="399:49">[<expr pos:start="399:29" pos:end="399:48"><name pos:start="399:29" pos:end="399:48">OPENPIC_OUTPUT_RESET</name></expr>]</index></name> <operator pos:start="399:51" pos:end="399:51">=</operator>

                <operator pos:start="401:17" pos:end="401:17">(</operator><operator pos:start="401:18" pos:end="401:18">(</operator><name pos:start="401:19" pos:end="401:26">qemu_irq</name> <operator pos:start="401:28" pos:end="401:28">*</operator><operator pos:start="401:29" pos:end="401:29">)</operator><name pos:start="401:30" pos:end="401:44"><name pos:start="401:30" pos:end="401:32">env</name><operator pos:start="401:33" pos:end="401:34">-&gt;</operator><name pos:start="401:35" pos:end="401:44">irq_inputs</name></name><operator pos:start="401:45" pos:end="401:45">)</operator><index pos:start="401:46" pos:end="401:66">[<expr pos:start="401:47" pos:end="401:65"><name pos:start="401:47" pos:end="401:65">PPC970_INPUT_HRESET</name></expr>]</index></expr>;</expr_stmt>

            <break pos:start="403:13" pos:end="406:0">break;</break>

<cpp:endif pos:start="405:1" pos:end="405:6">#<cpp:directive pos:start="405:2" pos:end="405:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="405:8" pos:end="405:34">/* defined(TARGET_PPC64) */</comment>

        <default pos:start="407:9" pos:end="407:16">default:</default>

            <expr_stmt pos:start="409:13" pos:end="409:69"><expr pos:start="409:13" pos:end="409:68"><call pos:start="409:13" pos:end="409:68"><name pos:start="409:13" pos:end="409:24">error_report</name><argument_list pos:start="409:25" pos:end="409:68">(<argument pos:start="409:26" pos:end="409:67"><expr pos:start="409:26" pos:end="409:67"><literal type="string" pos:start="409:26" pos:end="409:67">"Bus model not supported on mac99 machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="411:13" pos:end="411:20"><expr pos:start="411:13" pos:end="411:19"><call pos:start="411:13" pos:end="411:19"><name pos:start="411:13" pos:end="411:16">exit</name><argument_list pos:start="411:17" pos:end="411:19">(<argument pos:start="411:18" pos:end="411:18"><expr pos:start="411:18" pos:end="411:18"><literal type="number" pos:start="411:18" pos:end="411:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <expr_stmt pos:start="419:5" pos:end="419:31"><expr pos:start="419:5" pos:end="419:30"><name pos:start="419:5" pos:end="419:7">pic</name> <operator pos:start="419:9" pos:end="419:9">=</operator> <call pos:start="419:11" pos:end="419:30"><name pos:start="419:11" pos:end="419:16">g_new0</name><argument_list pos:start="419:17" pos:end="419:30">(<argument pos:start="419:18" pos:end="419:25"><expr pos:start="419:18" pos:end="419:25"><name pos:start="419:18" pos:end="419:25">qemu_irq</name></expr></argument>, <argument pos:start="419:28" pos:end="419:29"><expr pos:start="419:28" pos:end="419:29"><literal type="number" pos:start="419:28" pos:end="419:29">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="423:5" pos:end="423:42"><expr pos:start="423:5" pos:end="423:41"><name pos:start="423:5" pos:end="423:7">dev</name> <operator pos:start="423:9" pos:end="423:9">=</operator> <call pos:start="423:11" pos:end="423:41"><name pos:start="423:11" pos:end="423:21">qdev_create</name><argument_list pos:start="423:22" pos:end="423:41">(<argument pos:start="423:23" pos:end="423:26"><expr pos:start="423:23" pos:end="423:26"><name pos:start="423:23" pos:end="423:26">NULL</name></expr></argument>, <argument pos:start="423:29" pos:end="423:40"><expr pos:start="423:29" pos:end="423:40"><name pos:start="423:29" pos:end="423:40">TYPE_OPENPIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="425:5" pos:end="425:60"><expr pos:start="425:5" pos:end="425:59"><call pos:start="425:5" pos:end="425:59"><name pos:start="425:5" pos:end="425:24">qdev_prop_set_uint32</name><argument_list pos:start="425:25" pos:end="425:59">(<argument pos:start="425:26" pos:end="425:28"><expr pos:start="425:26" pos:end="425:28"><name pos:start="425:26" pos:end="425:28">dev</name></expr></argument>, <argument pos:start="425:31" pos:end="425:37"><expr pos:start="425:31" pos:end="425:37"><literal type="string" pos:start="425:31" pos:end="425:37">"model"</literal></expr></argument>, <argument pos:start="425:40" pos:end="425:58"><expr pos:start="425:40" pos:end="425:58"><name pos:start="425:40" pos:end="425:58">OPENPIC_MODEL_RAVEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="427:5" pos:end="427:26"><expr pos:start="427:5" pos:end="427:25"><call pos:start="427:5" pos:end="427:25"><name pos:start="427:5" pos:end="427:20">qdev_init_nofail</name><argument_list pos:start="427:21" pos:end="427:25">(<argument pos:start="427:22" pos:end="427:24"><expr pos:start="427:22" pos:end="427:24"><name pos:start="427:22" pos:end="427:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="429:5" pos:end="429:28"><expr pos:start="429:5" pos:end="429:27"><name pos:start="429:5" pos:end="429:5">s</name> <operator pos:start="429:7" pos:end="429:7">=</operator> <call pos:start="429:9" pos:end="429:27"><name pos:start="429:9" pos:end="429:22">SYS_BUS_DEVICE</name><argument_list pos:start="429:23" pos:end="429:27">(<argument pos:start="429:24" pos:end="429:26"><expr pos:start="429:24" pos:end="429:26"><name pos:start="429:24" pos:end="429:26">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:32"><expr pos:start="431:5" pos:end="431:31"><name pos:start="431:5" pos:end="431:11">pic_mem</name> <operator pos:start="431:13" pos:end="431:13">=</operator> <name pos:start="431:15" pos:end="431:24"><name pos:start="431:15" pos:end="431:15">s</name><operator pos:start="431:16" pos:end="431:17">-&gt;</operator><name pos:start="431:18" pos:end="431:21">mmio</name><index pos:start="431:22" pos:end="431:24">[<expr pos:start="431:23" pos:end="431:23"><literal type="number" pos:start="431:23" pos:end="431:23">0</literal></expr>]</index></name><operator pos:start="431:25" pos:end="431:25">.</operator><name pos:start="431:26" pos:end="431:31">memory</name></expr>;</expr_stmt>

    <expr_stmt pos:start="433:5" pos:end="433:10"><expr pos:start="433:5" pos:end="433:9"><name pos:start="433:5" pos:end="433:5">k</name> <operator pos:start="433:7" pos:end="433:7">=</operator> <literal type="number" pos:start="433:9" pos:end="433:9">0</literal></expr>;</expr_stmt>

    <for pos:start="435:5" pos:end="443:5">for <control pos:start="435:9" pos:end="435:34">(<init pos:start="435:10" pos:end="435:15"><expr pos:start="435:10" pos:end="435:14"><name pos:start="435:10" pos:end="435:10">i</name> <operator pos:start="435:12" pos:end="435:12">=</operator> <literal type="number" pos:start="435:14" pos:end="435:14">0</literal></expr>;</init> <condition pos:start="435:17" pos:end="435:29"><expr pos:start="435:17" pos:end="435:28"><name pos:start="435:17" pos:end="435:17">i</name> <operator pos:start="435:19" pos:end="435:19">&lt;</operator> <name pos:start="435:21" pos:end="435:28">smp_cpus</name></expr>;</condition> <incr pos:start="435:31" pos:end="435:33"><expr pos:start="435:31" pos:end="435:33"><name pos:start="435:31" pos:end="435:31">i</name><operator pos:start="435:32" pos:end="435:33">++</operator></expr></incr>)</control> <block pos:start="435:36" pos:end="443:5">{<block_content pos:start="437:9" pos:end="441:9">

        <for pos:start="437:9" pos:end="441:9">for <control pos:start="437:13" pos:end="437:47">(<init pos:start="437:14" pos:end="437:19"><expr pos:start="437:14" pos:end="437:18"><name pos:start="437:14" pos:end="437:14">j</name> <operator pos:start="437:16" pos:end="437:16">=</operator> <literal type="number" pos:start="437:18" pos:end="437:18">0</literal></expr>;</init> <condition pos:start="437:21" pos:end="437:42"><expr pos:start="437:21" pos:end="437:41"><name pos:start="437:21" pos:end="437:21">j</name> <operator pos:start="437:23" pos:end="437:23">&lt;</operator> <name pos:start="437:25" pos:end="437:41">OPENPIC_OUTPUT_NB</name></expr>;</condition> <incr pos:start="437:44" pos:end="437:46"><expr pos:start="437:44" pos:end="437:46"><name pos:start="437:44" pos:end="437:44">j</name><operator pos:start="437:45" pos:end="437:46">++</operator></expr></incr>)</control> <block pos:start="437:49" pos:end="441:9">{<block_content pos:start="439:13" pos:end="439:59">

            <expr_stmt pos:start="439:13" pos:end="439:59"><expr pos:start="439:13" pos:end="439:58"><call pos:start="439:13" pos:end="439:58"><name pos:start="439:13" pos:end="439:30">sysbus_connect_irq</name><argument_list pos:start="439:31" pos:end="439:58">(<argument pos:start="439:32" pos:end="439:32"><expr pos:start="439:32" pos:end="439:32"><name pos:start="439:32" pos:end="439:32">s</name></expr></argument>, <argument pos:start="439:35" pos:end="439:37"><expr pos:start="439:35" pos:end="439:37"><name pos:start="439:35" pos:end="439:35">k</name><operator pos:start="439:36" pos:end="439:37">++</operator></expr></argument>, <argument pos:start="439:40" pos:end="439:57"><expr pos:start="439:40" pos:end="439:57"><name pos:start="439:40" pos:end="439:57"><name pos:start="439:40" pos:end="439:51">openpic_irqs</name><index pos:start="439:52" pos:end="439:54">[<expr pos:start="439:53" pos:end="439:53"><name pos:start="439:53" pos:end="439:53">i</name></expr>]</index><index pos:start="439:55" pos:end="439:57">[<expr pos:start="439:56" pos:end="439:56"><name pos:start="439:56" pos:end="439:56">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <for pos:start="447:5" pos:end="451:5">for <control pos:start="447:9" pos:end="447:28">(<init pos:start="447:10" pos:end="447:15"><expr pos:start="447:10" pos:end="447:14"><name pos:start="447:10" pos:end="447:10">i</name> <operator pos:start="447:12" pos:end="447:12">=</operator> <literal type="number" pos:start="447:14" pos:end="447:14">0</literal></expr>;</init> <condition pos:start="447:17" pos:end="447:23"><expr pos:start="447:17" pos:end="447:22"><name pos:start="447:17" pos:end="447:17">i</name> <operator pos:start="447:19" pos:end="447:19">&lt;</operator> <literal type="number" pos:start="447:21" pos:end="447:22">64</literal></expr>;</condition> <incr pos:start="447:25" pos:end="447:27"><expr pos:start="447:25" pos:end="447:27"><name pos:start="447:25" pos:end="447:25">i</name><operator pos:start="447:26" pos:end="447:27">++</operator></expr></incr>)</control> <block pos:start="447:30" pos:end="451:5">{<block_content pos:start="449:9" pos:end="449:42">

        <expr_stmt pos:start="449:9" pos:end="449:42"><expr pos:start="449:9" pos:end="449:41"><name pos:start="449:9" pos:end="449:14"><name pos:start="449:9" pos:end="449:11">pic</name><index pos:start="449:12" pos:end="449:14">[<expr pos:start="449:13" pos:end="449:13"><name pos:start="449:13" pos:end="449:13">i</name></expr>]</index></name> <operator pos:start="449:16" pos:end="449:16">=</operator> <call pos:start="449:18" pos:end="449:41"><name pos:start="449:18" pos:end="449:33">qdev_get_gpio_in</name><argument_list pos:start="449:34" pos:end="449:41">(<argument pos:start="449:35" pos:end="449:37"><expr pos:start="449:35" pos:end="449:37"><name pos:start="449:35" pos:end="449:37">dev</name></expr></argument>, <argument pos:start="449:40" pos:end="449:40"><expr pos:start="449:40" pos:end="449:40"><name pos:start="449:40" pos:end="449:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="455:5" pos:end="469:5"><if pos:start="455:5" pos:end="463:5">if <condition pos:start="455:8" pos:end="455:46">(<expr pos:start="455:9" pos:end="455:45"><call pos:start="455:9" pos:end="455:22"><name pos:start="455:9" pos:end="455:17">PPC_INPUT</name><argument_list pos:start="455:18" pos:end="455:22">(<argument pos:start="455:19" pos:end="455:21"><expr pos:start="455:19" pos:end="455:21"><name pos:start="455:19" pos:end="455:21">env</name></expr></argument>)</argument_list></call> <operator pos:start="455:24" pos:end="455:25">==</operator> <name pos:start="455:27" pos:end="455:45">PPC_FLAGS_INPUT_970</name></expr>)</condition> <block pos:start="455:48" pos:end="463:5">{<block_content pos:start="459:9" pos:end="461:37">

        <comment type="block" pos:start="457:9" pos:end="457:31">/* 970 gets a U3 bus */</comment>

        <expr_stmt pos:start="459:9" pos:end="459:78"><expr pos:start="459:9" pos:end="459:77"><name pos:start="459:9" pos:end="459:15">pci_bus</name> <operator pos:start="459:17" pos:end="459:17">=</operator> <call pos:start="459:19" pos:end="459:77"><name pos:start="459:19" pos:end="459:34">pci_pmac_u3_init</name><argument_list pos:start="459:35" pos:end="459:77">(<argument pos:start="459:36" pos:end="459:38"><expr pos:start="459:36" pos:end="459:38"><name pos:start="459:36" pos:end="459:38">pic</name></expr></argument>, <argument pos:start="459:41" pos:end="459:59"><expr pos:start="459:41" pos:end="459:59"><call pos:start="459:41" pos:end="459:59"><name pos:start="459:41" pos:end="459:57">get_system_memory</name><argument_list pos:start="459:58" pos:end="459:59">()</argument_list></call></expr></argument>, <argument pos:start="459:62" pos:end="459:76"><expr pos:start="459:62" pos:end="459:76"><call pos:start="459:62" pos:end="459:76"><name pos:start="459:62" pos:end="459:74">get_system_io</name><argument_list pos:start="459:75" pos:end="459:76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="461:9" pos:end="461:37"><expr pos:start="461:9" pos:end="461:36"><name pos:start="461:9" pos:end="461:20">machine_arch</name> <operator pos:start="461:22" pos:end="461:22">=</operator> <name pos:start="461:24" pos:end="461:36">ARCH_MAC99_U3</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="463:7" pos:end="469:5">else <block pos:start="463:12" pos:end="469:5">{<block_content pos:start="465:9" pos:end="467:34">

        <expr_stmt pos:start="465:9" pos:end="465:75"><expr pos:start="465:9" pos:end="465:74"><name pos:start="465:9" pos:end="465:15">pci_bus</name> <operator pos:start="465:17" pos:end="465:17">=</operator> <call pos:start="465:19" pos:end="465:74"><name pos:start="465:19" pos:end="465:31">pci_pmac_init</name><argument_list pos:start="465:32" pos:end="465:74">(<argument pos:start="465:33" pos:end="465:35"><expr pos:start="465:33" pos:end="465:35"><name pos:start="465:33" pos:end="465:35">pic</name></expr></argument>, <argument pos:start="465:38" pos:end="465:56"><expr pos:start="465:38" pos:end="465:56"><call pos:start="465:38" pos:end="465:56"><name pos:start="465:38" pos:end="465:54">get_system_memory</name><argument_list pos:start="465:55" pos:end="465:56">()</argument_list></call></expr></argument>, <argument pos:start="465:59" pos:end="465:73"><expr pos:start="465:59" pos:end="465:73"><call pos:start="465:59" pos:end="465:73"><name pos:start="465:59" pos:end="465:71">get_system_io</name><argument_list pos:start="465:72" pos:end="465:73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="467:9" pos:end="467:34"><expr pos:start="467:9" pos:end="467:33"><name pos:start="467:9" pos:end="467:20">machine_arch</name> <operator pos:start="467:22" pos:end="467:22">=</operator> <name pos:start="467:24" pos:end="467:33">ARCH_MAC99</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="471:5" pos:end="471:78"><expr pos:start="471:5" pos:end="471:77"><call pos:start="471:5" pos:end="471:77"><name pos:start="471:5" pos:end="471:28">object_property_set_bool</name><argument_list pos:start="471:29" pos:end="471:77">(<argument pos:start="471:30" pos:end="471:44"><expr pos:start="471:30" pos:end="471:44"><call pos:start="471:30" pos:end="471:44"><name pos:start="471:30" pos:end="471:35">OBJECT</name><argument_list pos:start="471:36" pos:end="471:44">(<argument pos:start="471:37" pos:end="471:43"><expr pos:start="471:37" pos:end="471:43"><name pos:start="471:37" pos:end="471:43">pci_bus</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="471:47" pos:end="471:50"><expr pos:start="471:47" pos:end="471:50"><name pos:start="471:47" pos:end="471:50">true</name></expr></argument>, <argument pos:start="471:53" pos:end="471:62"><expr pos:start="471:53" pos:end="471:62"><literal type="string" pos:start="471:53" pos:end="471:62">"realized"</literal></expr></argument>, <argument pos:start="471:65" pos:end="471:76"><expr pos:start="471:65" pos:end="471:76"><operator pos:start="471:65" pos:end="471:65">&amp;</operator><name pos:start="471:66" pos:end="471:76">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="475:5" pos:end="475:65"><expr pos:start="475:5" pos:end="475:64"><name pos:start="475:5" pos:end="475:16"><name pos:start="475:5" pos:end="475:11">machine</name><operator pos:start="475:12" pos:end="475:13">-&gt;</operator><name pos:start="475:14" pos:end="475:16">usb</name></name> <operator pos:start="475:18" pos:end="475:19">|=</operator> <call pos:start="475:21" pos:end="475:38"><name pos:start="475:21" pos:end="475:36">defaults_enabled</name><argument_list pos:start="475:37" pos:end="475:38">()</argument_list></call> <operator pos:start="475:40" pos:end="475:41">&amp;&amp;</operator> <operator pos:start="475:43" pos:end="475:43">!</operator><name pos:start="475:44" pos:end="475:64"><name pos:start="475:44" pos:end="475:50">machine</name><operator pos:start="475:51" pos:end="475:52">-&gt;</operator><name pos:start="475:53" pos:end="475:64">usb_disabled</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="479:5" pos:end="479:28">/* Timebase Frequency */</comment>

    <if_stmt pos:start="481:5" pos:end="489:5"><if pos:start="481:5" pos:end="485:5">if <condition pos:start="481:8" pos:end="481:22">(<expr pos:start="481:9" pos:end="481:21"><call pos:start="481:9" pos:end="481:21"><name pos:start="481:9" pos:end="481:19">kvm_enabled</name><argument_list pos:start="481:20" pos:end="481:21">()</argument_list></call></expr>)</condition> <block pos:start="481:24" pos:end="485:5">{<block_content pos:start="483:9" pos:end="483:37">

        <expr_stmt pos:start="483:9" pos:end="483:37"><expr pos:start="483:9" pos:end="483:36"><name pos:start="483:9" pos:end="483:14">tbfreq</name> <operator pos:start="483:16" pos:end="483:16">=</operator> <call pos:start="483:18" pos:end="483:36"><name pos:start="483:18" pos:end="483:34">kvmppc_get_tbfreq</name><argument_list pos:start="483:35" pos:end="483:36">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="485:7" pos:end="489:5">else <block pos:start="485:12" pos:end="489:5">{<block_content pos:start="487:9" pos:end="487:24">

        <expr_stmt pos:start="487:9" pos:end="487:24"><expr pos:start="487:9" pos:end="487:23"><name pos:start="487:9" pos:end="487:14">tbfreq</name> <operator pos:start="487:16" pos:end="487:16">=</operator> <name pos:start="487:18" pos:end="487:23">TBFREQ</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="493:5" pos:end="493:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="495:5" pos:end="497:70"><expr pos:start="495:5" pos:end="497:69"><name pos:start="495:5" pos:end="495:12">escc_mem</name> <operator pos:start="495:14" pos:end="495:14">=</operator> <call pos:start="495:16" pos:end="497:69"><name pos:start="495:16" pos:end="495:24">escc_init</name><argument_list pos:start="495:25" pos:end="497:69">(<argument pos:start="495:26" pos:end="495:26"><expr pos:start="495:26" pos:end="495:26"><literal type="number" pos:start="495:26" pos:end="495:26">0</literal></expr></argument>, <argument pos:start="495:29" pos:end="495:37"><expr pos:start="495:29" pos:end="495:37"><name pos:start="495:29" pos:end="495:37"><name pos:start="495:29" pos:end="495:31">pic</name><index pos:start="495:32" pos:end="495:37">[<expr pos:start="495:33" pos:end="495:36"><literal type="number" pos:start="495:33" pos:end="495:36">0x25</literal></expr>]</index></name></expr></argument>, <argument pos:start="495:40" pos:end="495:48"><expr pos:start="495:40" pos:end="495:48"><name pos:start="495:40" pos:end="495:48"><name pos:start="495:40" pos:end="495:42">pic</name><index pos:start="495:43" pos:end="495:48">[<expr pos:start="495:44" pos:end="495:47"><literal type="number" pos:start="495:44" pos:end="495:47">0x24</literal></expr>]</index></name></expr></argument>,

                         <argument pos:start="497:26" pos:end="497:38"><expr pos:start="497:26" pos:end="497:38"><name pos:start="497:26" pos:end="497:38"><name pos:start="497:26" pos:end="497:35">serial_hds</name><index pos:start="497:36" pos:end="497:38">[<expr pos:start="497:37" pos:end="497:37"><literal type="number" pos:start="497:37" pos:end="497:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="497:41" pos:end="497:53"><expr pos:start="497:41" pos:end="497:53"><name pos:start="497:41" pos:end="497:53"><name pos:start="497:41" pos:end="497:50">serial_hds</name><index pos:start="497:51" pos:end="497:53">[<expr pos:start="497:52" pos:end="497:52"><literal type="number" pos:start="497:52" pos:end="497:52">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="497:56" pos:end="497:65"><expr pos:start="497:56" pos:end="497:65"><name pos:start="497:56" pos:end="497:65">ESCC_CLOCK</name></expr></argument>, <argument pos:start="497:68" pos:end="497:68"><expr pos:start="497:68" pos:end="497:68"><literal type="number" pos:start="497:68" pos:end="497:68">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="499:5" pos:end="501:72"><expr pos:start="499:5" pos:end="501:71"><call pos:start="499:5" pos:end="501:71"><name pos:start="499:5" pos:end="499:28">memory_region_init_alias</name><argument_list pos:start="499:29" pos:end="501:71">(<argument pos:start="499:30" pos:end="499:37"><expr pos:start="499:30" pos:end="499:37"><name pos:start="499:30" pos:end="499:37">escc_bar</name></expr></argument>, <argument pos:start="499:40" pos:end="499:43"><expr pos:start="499:40" pos:end="499:43"><name pos:start="499:40" pos:end="499:43">NULL</name></expr></argument>, <argument pos:start="499:46" pos:end="499:55"><expr pos:start="499:46" pos:end="499:55"><literal type="string" pos:start="499:46" pos:end="499:55">"escc-bar"</literal></expr></argument>,

                             <argument pos:start="501:30" pos:end="501:37"><expr pos:start="501:30" pos:end="501:37"><name pos:start="501:30" pos:end="501:37">escc_mem</name></expr></argument>, <argument pos:start="501:40" pos:end="501:40"><expr pos:start="501:40" pos:end="501:40"><literal type="number" pos:start="501:40" pos:end="501:40">0</literal></expr></argument>, <argument pos:start="501:43" pos:end="501:70"><expr pos:start="501:43" pos:end="501:70"><call pos:start="501:43" pos:end="501:70"><name pos:start="501:43" pos:end="501:60">memory_region_size</name><argument_list pos:start="501:61" pos:end="501:70">(<argument pos:start="501:62" pos:end="501:69"><expr pos:start="501:62" pos:end="501:69"><name pos:start="501:62" pos:end="501:69">escc_mem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="505:5" pos:end="505:57"><expr pos:start="505:5" pos:end="505:56"><name pos:start="505:5" pos:end="505:9">macio</name> <operator pos:start="505:11" pos:end="505:11">=</operator> <call pos:start="505:13" pos:end="505:56"><name pos:start="505:13" pos:end="505:22">pci_create</name><argument_list pos:start="505:23" pos:end="505:56">(<argument pos:start="505:24" pos:end="505:30"><expr pos:start="505:24" pos:end="505:30"><name pos:start="505:24" pos:end="505:30">pci_bus</name></expr></argument>, <argument pos:start="505:33" pos:end="505:34"><expr pos:start="505:33" pos:end="505:34"><operator pos:start="505:33" pos:end="505:33">-</operator><literal type="number" pos:start="505:34" pos:end="505:34">1</literal></expr></argument>, <argument pos:start="505:37" pos:end="505:55"><expr pos:start="505:37" pos:end="505:55"><name pos:start="505:37" pos:end="505:55">TYPE_NEWWORLD_MACIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="507:5" pos:end="507:24"><expr pos:start="507:5" pos:end="507:23"><name pos:start="507:5" pos:end="507:7">dev</name> <operator pos:start="507:9" pos:end="507:9">=</operator> <call pos:start="507:11" pos:end="507:23"><name pos:start="507:11" pos:end="507:16">DEVICE</name><argument_list pos:start="507:17" pos:end="507:23">(<argument pos:start="507:18" pos:end="507:22"><expr pos:start="507:18" pos:end="507:22"><name pos:start="507:18" pos:end="507:22">macio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="509:5" pos:end="509:45"><expr pos:start="509:5" pos:end="509:44"><call pos:start="509:5" pos:end="509:44"><name pos:start="509:5" pos:end="509:25">qdev_connect_gpio_out</name><argument_list pos:start="509:26" pos:end="509:44">(<argument pos:start="509:27" pos:end="509:29"><expr pos:start="509:27" pos:end="509:29"><name pos:start="509:27" pos:end="509:29">dev</name></expr></argument>, <argument pos:start="509:32" pos:end="509:32"><expr pos:start="509:32" pos:end="509:32"><literal type="number" pos:start="509:32" pos:end="509:32">0</literal></expr></argument>, <argument pos:start="509:35" pos:end="509:43"><expr pos:start="509:35" pos:end="509:43"><name pos:start="509:35" pos:end="509:43"><name pos:start="509:35" pos:end="509:37">pic</name><index pos:start="509:38" pos:end="509:43">[<expr pos:start="509:39" pos:end="509:42"><literal type="number" pos:start="509:39" pos:end="509:42">0x19</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="509:47" pos:end="509:56">/* CUDA */</comment>

    <expr_stmt pos:start="511:5" pos:end="511:45"><expr pos:start="511:5" pos:end="511:44"><call pos:start="511:5" pos:end="511:44"><name pos:start="511:5" pos:end="511:25">qdev_connect_gpio_out</name><argument_list pos:start="511:26" pos:end="511:44">(<argument pos:start="511:27" pos:end="511:29"><expr pos:start="511:27" pos:end="511:29"><name pos:start="511:27" pos:end="511:29">dev</name></expr></argument>, <argument pos:start="511:32" pos:end="511:32"><expr pos:start="511:32" pos:end="511:32"><literal type="number" pos:start="511:32" pos:end="511:32">1</literal></expr></argument>, <argument pos:start="511:35" pos:end="511:43"><expr pos:start="511:35" pos:end="511:43"><name pos:start="511:35" pos:end="511:43"><name pos:start="511:35" pos:end="511:37">pic</name><index pos:start="511:38" pos:end="511:43">[<expr pos:start="511:39" pos:end="511:42"><literal type="number" pos:start="511:39" pos:end="511:42">0x0d</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="511:47" pos:end="511:55">/* IDE */</comment>

    <expr_stmt pos:start="513:5" pos:end="513:45"><expr pos:start="513:5" pos:end="513:44"><call pos:start="513:5" pos:end="513:44"><name pos:start="513:5" pos:end="513:25">qdev_connect_gpio_out</name><argument_list pos:start="513:26" pos:end="513:44">(<argument pos:start="513:27" pos:end="513:29"><expr pos:start="513:27" pos:end="513:29"><name pos:start="513:27" pos:end="513:29">dev</name></expr></argument>, <argument pos:start="513:32" pos:end="513:32"><expr pos:start="513:32" pos:end="513:32"><literal type="number" pos:start="513:32" pos:end="513:32">2</literal></expr></argument>, <argument pos:start="513:35" pos:end="513:43"><expr pos:start="513:35" pos:end="513:43"><name pos:start="513:35" pos:end="513:43"><name pos:start="513:35" pos:end="513:37">pic</name><index pos:start="513:38" pos:end="513:43">[<expr pos:start="513:39" pos:end="513:42"><literal type="number" pos:start="513:39" pos:end="513:42">0x02</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="513:47" pos:end="513:59">/* IDE DMA */</comment>

    <expr_stmt pos:start="515:5" pos:end="515:45"><expr pos:start="515:5" pos:end="515:44"><call pos:start="515:5" pos:end="515:44"><name pos:start="515:5" pos:end="515:25">qdev_connect_gpio_out</name><argument_list pos:start="515:26" pos:end="515:44">(<argument pos:start="515:27" pos:end="515:29"><expr pos:start="515:27" pos:end="515:29"><name pos:start="515:27" pos:end="515:29">dev</name></expr></argument>, <argument pos:start="515:32" pos:end="515:32"><expr pos:start="515:32" pos:end="515:32"><literal type="number" pos:start="515:32" pos:end="515:32">3</literal></expr></argument>, <argument pos:start="515:35" pos:end="515:43"><expr pos:start="515:35" pos:end="515:43"><name pos:start="515:35" pos:end="515:43"><name pos:start="515:35" pos:end="515:37">pic</name><index pos:start="515:38" pos:end="515:43">[<expr pos:start="515:39" pos:end="515:42"><literal type="number" pos:start="515:39" pos:end="515:42">0x0e</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="515:47" pos:end="515:55">/* IDE */</comment>

    <expr_stmt pos:start="517:5" pos:end="517:45"><expr pos:start="517:5" pos:end="517:44"><call pos:start="517:5" pos:end="517:44"><name pos:start="517:5" pos:end="517:25">qdev_connect_gpio_out</name><argument_list pos:start="517:26" pos:end="517:44">(<argument pos:start="517:27" pos:end="517:29"><expr pos:start="517:27" pos:end="517:29"><name pos:start="517:27" pos:end="517:29">dev</name></expr></argument>, <argument pos:start="517:32" pos:end="517:32"><expr pos:start="517:32" pos:end="517:32"><literal type="number" pos:start="517:32" pos:end="517:32">4</literal></expr></argument>, <argument pos:start="517:35" pos:end="517:43"><expr pos:start="517:35" pos:end="517:43"><name pos:start="517:35" pos:end="517:43"><name pos:start="517:35" pos:end="517:37">pic</name><index pos:start="517:38" pos:end="517:43">[<expr pos:start="517:39" pos:end="517:42"><literal type="number" pos:start="517:39" pos:end="517:42">0x03</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="517:47" pos:end="517:59">/* IDE DMA */</comment>

    <expr_stmt pos:start="519:5" pos:end="519:51"><expr pos:start="519:5" pos:end="519:50"><call pos:start="519:5" pos:end="519:50"><name pos:start="519:5" pos:end="519:24">qdev_prop_set_uint64</name><argument_list pos:start="519:25" pos:end="519:50">(<argument pos:start="519:26" pos:end="519:28"><expr pos:start="519:26" pos:end="519:28"><name pos:start="519:26" pos:end="519:28">dev</name></expr></argument>, <argument pos:start="519:31" pos:end="519:41"><expr pos:start="519:31" pos:end="519:41"><literal type="string" pos:start="519:31" pos:end="519:41">"frequency"</literal></expr></argument>, <argument pos:start="519:44" pos:end="519:49"><expr pos:start="519:44" pos:end="519:49"><name pos:start="519:44" pos:end="519:49">tbfreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="521:5" pos:end="521:41"><expr pos:start="521:5" pos:end="521:40"><call pos:start="521:5" pos:end="521:40"><name pos:start="521:5" pos:end="521:14">macio_init</name><argument_list pos:start="521:15" pos:end="521:40">(<argument pos:start="521:16" pos:end="521:20"><expr pos:start="521:16" pos:end="521:20"><name pos:start="521:16" pos:end="521:20">macio</name></expr></argument>, <argument pos:start="521:23" pos:end="521:29"><expr pos:start="521:23" pos:end="521:29"><name pos:start="521:23" pos:end="521:29">pic_mem</name></expr></argument>, <argument pos:start="521:32" pos:end="521:39"><expr pos:start="521:32" pos:end="521:39"><name pos:start="521:32" pos:end="521:39">escc_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="525:5" pos:end="525:60">/* We only emulate 2 out of 3 IDE controllers for now */</comment>

    <expr_stmt pos:start="527:5" pos:end="527:38"><expr pos:start="527:5" pos:end="527:37"><call pos:start="527:5" pos:end="527:37"><name pos:start="527:5" pos:end="527:17">ide_drive_get</name><argument_list pos:start="527:18" pos:end="527:37">(<argument pos:start="527:19" pos:end="527:20"><expr pos:start="527:19" pos:end="527:20"><name pos:start="527:19" pos:end="527:20">hd</name></expr></argument>, <argument pos:start="527:23" pos:end="527:36"><expr pos:start="527:23" pos:end="527:36"><call pos:start="527:23" pos:end="527:36"><name pos:start="527:23" pos:end="527:32">ARRAY_SIZE</name><argument_list pos:start="527:33" pos:end="527:36">(<argument pos:start="527:34" pos:end="527:35"><expr pos:start="527:34" pos:end="527:35"><name pos:start="527:34" pos:end="527:35">hd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="531:5" pos:end="533:67"><expr pos:start="531:5" pos:end="533:66"><name pos:start="531:5" pos:end="531:13">macio_ide</name> <operator pos:start="531:15" pos:end="531:15">=</operator> <call pos:start="531:17" pos:end="533:66"><name pos:start="531:17" pos:end="531:25">MACIO_IDE</name><argument_list pos:start="531:26" pos:end="533:66">(<argument pos:start="531:27" pos:end="533:65"><expr pos:start="531:27" pos:end="533:65"><call pos:start="531:27" pos:end="533:65"><name pos:start="531:27" pos:end="531:55">object_resolve_path_component</name><argument_list pos:start="531:56" pos:end="533:65">(<argument pos:start="531:57" pos:end="531:69"><expr pos:start="531:57" pos:end="531:69"><call pos:start="531:57" pos:end="531:69"><name pos:start="531:57" pos:end="531:62">OBJECT</name><argument_list pos:start="531:63" pos:end="531:69">(<argument pos:start="531:64" pos:end="531:68"><expr pos:start="531:64" pos:end="531:68"><name pos:start="531:64" pos:end="531:68">macio</name></expr></argument>)</argument_list></call></expr></argument>,

                                                        <argument pos:start="533:57" pos:end="533:64"><expr pos:start="533:57" pos:end="533:64"><literal type="string" pos:start="533:57" pos:end="533:64">"ide[0]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="535:5" pos:end="535:41"><expr pos:start="535:5" pos:end="535:40"><call pos:start="535:5" pos:end="535:40"><name pos:start="535:5" pos:end="535:25">macio_ide_init_drives</name><argument_list pos:start="535:26" pos:end="535:40">(<argument pos:start="535:27" pos:end="535:35"><expr pos:start="535:27" pos:end="535:35"><name pos:start="535:27" pos:end="535:35">macio_ide</name></expr></argument>, <argument pos:start="535:38" pos:end="535:39"><expr pos:start="535:38" pos:end="535:39"><name pos:start="535:38" pos:end="535:39">hd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="539:5" pos:end="541:67"><expr pos:start="539:5" pos:end="541:66"><name pos:start="539:5" pos:end="539:13">macio_ide</name> <operator pos:start="539:15" pos:end="539:15">=</operator> <call pos:start="539:17" pos:end="541:66"><name pos:start="539:17" pos:end="539:25">MACIO_IDE</name><argument_list pos:start="539:26" pos:end="541:66">(<argument pos:start="539:27" pos:end="541:65"><expr pos:start="539:27" pos:end="541:65"><call pos:start="539:27" pos:end="541:65"><name pos:start="539:27" pos:end="539:55">object_resolve_path_component</name><argument_list pos:start="539:56" pos:end="541:65">(<argument pos:start="539:57" pos:end="539:69"><expr pos:start="539:57" pos:end="539:69"><call pos:start="539:57" pos:end="539:69"><name pos:start="539:57" pos:end="539:62">OBJECT</name><argument_list pos:start="539:63" pos:end="539:69">(<argument pos:start="539:64" pos:end="539:68"><expr pos:start="539:64" pos:end="539:68"><name pos:start="539:64" pos:end="539:68">macio</name></expr></argument>)</argument_list></call></expr></argument>,

                                                        <argument pos:start="541:57" pos:end="541:64"><expr pos:start="541:57" pos:end="541:64"><literal type="string" pos:start="541:57" pos:end="541:64">"ide[1]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="543:5" pos:end="543:56"><expr pos:start="543:5" pos:end="543:55"><call pos:start="543:5" pos:end="543:55"><name pos:start="543:5" pos:end="543:25">macio_ide_init_drives</name><argument_list pos:start="543:26" pos:end="543:55">(<argument pos:start="543:27" pos:end="543:35"><expr pos:start="543:27" pos:end="543:35"><name pos:start="543:27" pos:end="543:35">macio_ide</name></expr></argument>, <argument pos:start="543:38" pos:end="543:54"><expr pos:start="543:38" pos:end="543:54"><operator pos:start="543:38" pos:end="543:38">&amp;</operator><name pos:start="543:39" pos:end="543:54"><name pos:start="543:39" pos:end="543:40">hd</name><index pos:start="543:41" pos:end="543:54">[<expr pos:start="543:42" pos:end="543:53"><name pos:start="543:42" pos:end="543:53">MAX_IDE_DEVS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="547:5" pos:end="547:71"><expr pos:start="547:5" pos:end="547:70"><name pos:start="547:5" pos:end="547:7">dev</name> <operator pos:start="547:9" pos:end="547:9">=</operator> <call pos:start="547:11" pos:end="547:70"><name pos:start="547:11" pos:end="547:16">DEVICE</name><argument_list pos:start="547:17" pos:end="547:70">(<argument pos:start="547:18" pos:end="547:69"><expr pos:start="547:18" pos:end="547:69"><call pos:start="547:18" pos:end="547:69"><name pos:start="547:18" pos:end="547:46">object_resolve_path_component</name><argument_list pos:start="547:47" pos:end="547:69">(<argument pos:start="547:48" pos:end="547:60"><expr pos:start="547:48" pos:end="547:60"><call pos:start="547:48" pos:end="547:60"><name pos:start="547:48" pos:end="547:53">OBJECT</name><argument_list pos:start="547:54" pos:end="547:60">(<argument pos:start="547:55" pos:end="547:59"><expr pos:start="547:55" pos:end="547:59"><name pos:start="547:55" pos:end="547:59">macio</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="547:63" pos:end="547:68"><expr pos:start="547:63" pos:end="547:68"><literal type="string" pos:start="547:63" pos:end="547:68">"cuda"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="549:5" pos:end="549:47"><expr pos:start="549:5" pos:end="549:46"><name pos:start="549:5" pos:end="549:11">adb_bus</name> <operator pos:start="549:13" pos:end="549:13">=</operator> <call pos:start="549:15" pos:end="549:46"><name pos:start="549:15" pos:end="549:32">qdev_get_child_bus</name><argument_list pos:start="549:33" pos:end="549:46">(<argument pos:start="549:34" pos:end="549:36"><expr pos:start="549:34" pos:end="549:36"><name pos:start="549:34" pos:end="549:36">dev</name></expr></argument>, <argument pos:start="549:39" pos:end="549:45"><expr pos:start="549:39" pos:end="549:45"><literal type="string" pos:start="549:39" pos:end="549:45">"adb.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="551:5" pos:end="551:50"><expr pos:start="551:5" pos:end="551:49"><name pos:start="551:5" pos:end="551:7">dev</name> <operator pos:start="551:9" pos:end="551:9">=</operator> <call pos:start="551:11" pos:end="551:49"><name pos:start="551:11" pos:end="551:21">qdev_create</name><argument_list pos:start="551:22" pos:end="551:49">(<argument pos:start="551:23" pos:end="551:29"><expr pos:start="551:23" pos:end="551:29"><name pos:start="551:23" pos:end="551:29">adb_bus</name></expr></argument>, <argument pos:start="551:32" pos:end="551:48"><expr pos:start="551:32" pos:end="551:48"><name pos:start="551:32" pos:end="551:48">TYPE_ADB_KEYBOARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="553:5" pos:end="553:26"><expr pos:start="553:5" pos:end="553:25"><call pos:start="553:5" pos:end="553:25"><name pos:start="553:5" pos:end="553:20">qdev_init_nofail</name><argument_list pos:start="553:21" pos:end="553:25">(<argument pos:start="553:22" pos:end="553:24"><expr pos:start="553:22" pos:end="553:24"><name pos:start="553:22" pos:end="553:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="555:5" pos:end="555:47"><expr pos:start="555:5" pos:end="555:46"><name pos:start="555:5" pos:end="555:7">dev</name> <operator pos:start="555:9" pos:end="555:9">=</operator> <call pos:start="555:11" pos:end="555:46"><name pos:start="555:11" pos:end="555:21">qdev_create</name><argument_list pos:start="555:22" pos:end="555:46">(<argument pos:start="555:23" pos:end="555:29"><expr pos:start="555:23" pos:end="555:29"><name pos:start="555:23" pos:end="555:29">adb_bus</name></expr></argument>, <argument pos:start="555:32" pos:end="555:45"><expr pos:start="555:32" pos:end="555:45"><name pos:start="555:32" pos:end="555:45">TYPE_ADB_MOUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="557:5" pos:end="557:26"><expr pos:start="557:5" pos:end="557:25"><call pos:start="557:5" pos:end="557:25"><name pos:start="557:5" pos:end="557:20">qdev_init_nofail</name><argument_list pos:start="557:21" pos:end="557:25">(<argument pos:start="557:22" pos:end="557:24"><expr pos:start="557:22" pos:end="557:24"><name pos:start="557:22" pos:end="557:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="561:5" pos:end="583:5"><if pos:start="561:5" pos:end="583:5">if <condition pos:start="561:8" pos:end="561:21">(<expr pos:start="561:9" pos:end="561:20"><name pos:start="561:9" pos:end="561:20"><name pos:start="561:9" pos:end="561:15">machine</name><operator pos:start="561:16" pos:end="561:17">-&gt;</operator><name pos:start="561:18" pos:end="561:20">usb</name></name></expr>)</condition> <block pos:start="561:23" pos:end="583:5">{<block_content pos:start="563:9" pos:end="581:9">

        <expr_stmt pos:start="563:9" pos:end="563:51"><expr pos:start="563:9" pos:end="563:50"><call pos:start="563:9" pos:end="563:50"><name pos:start="563:9" pos:end="563:25">pci_create_simple</name><argument_list pos:start="563:26" pos:end="563:50">(<argument pos:start="563:27" pos:end="563:33"><expr pos:start="563:27" pos:end="563:33"><name pos:start="563:27" pos:end="563:33">pci_bus</name></expr></argument>, <argument pos:start="563:36" pos:end="563:37"><expr pos:start="563:36" pos:end="563:37"><operator pos:start="563:36" pos:end="563:36">-</operator><literal type="number" pos:start="563:37" pos:end="563:37">1</literal></expr></argument>, <argument pos:start="563:40" pos:end="563:49"><expr pos:start="563:40" pos:end="563:49"><literal type="string" pos:start="563:40" pos:end="563:49">"pci-ohci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="567:9" pos:end="569:19">/* U3 needs to use USB for input because Linux doesn't support via-cuda

        on PPC64 */</comment>

        <if_stmt pos:start="571:9" pos:end="581:9"><if pos:start="571:9" pos:end="581:9">if <condition pos:start="571:12" pos:end="571:42">(<expr pos:start="571:13" pos:end="571:41"><name pos:start="571:13" pos:end="571:24">machine_arch</name> <operator pos:start="571:26" pos:end="571:27">==</operator> <name pos:start="571:29" pos:end="571:41">ARCH_MAC99_U3</name></expr>)</condition> <block pos:start="571:44" pos:end="581:9">{<block_content pos:start="573:13" pos:end="579:52">

            <decl_stmt pos:start="573:13" pos:end="573:47"><decl pos:start="573:13" pos:end="573:46"><type pos:start="573:13" pos:end="573:20"><name pos:start="573:13" pos:end="573:18">USBBus</name> <modifier pos:start="573:20" pos:end="573:20">*</modifier></type><name pos:start="573:21" pos:end="573:27">usb_bus</name> <init pos:start="573:29" pos:end="573:46">= <expr pos:start="573:31" pos:end="573:46"><call pos:start="573:31" pos:end="573:46"><name pos:start="573:31" pos:end="573:42">usb_bus_find</name><argument_list pos:start="573:43" pos:end="573:46">(<argument pos:start="573:44" pos:end="573:45"><expr pos:start="573:44" pos:end="573:45"><operator pos:start="573:44" pos:end="573:44">-</operator><literal type="number" pos:start="573:45" pos:end="573:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="577:13" pos:end="577:50"><expr pos:start="577:13" pos:end="577:49"><call pos:start="577:13" pos:end="577:49"><name pos:start="577:13" pos:end="577:29">usb_create_simple</name><argument_list pos:start="577:30" pos:end="577:49">(<argument pos:start="577:31" pos:end="577:37"><expr pos:start="577:31" pos:end="577:37"><name pos:start="577:31" pos:end="577:37">usb_bus</name></expr></argument>, <argument pos:start="577:40" pos:end="577:48"><expr pos:start="577:40" pos:end="577:48"><literal type="string" pos:start="577:40" pos:end="577:48">"usb-kbd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="579:13" pos:end="579:52"><expr pos:start="579:13" pos:end="579:51"><call pos:start="579:13" pos:end="579:51"><name pos:start="579:13" pos:end="579:29">usb_create_simple</name><argument_list pos:start="579:30" pos:end="579:51">(<argument pos:start="579:31" pos:end="579:37"><expr pos:start="579:31" pos:end="579:37"><name pos:start="579:31" pos:end="579:37">usb_bus</name></expr></argument>, <argument pos:start="579:40" pos:end="579:50"><expr pos:start="579:40" pos:end="579:50"><literal type="string" pos:start="579:40" pos:end="579:50">"usb-mouse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="587:5" pos:end="587:26"><expr pos:start="587:5" pos:end="587:25"><call pos:start="587:5" pos:end="587:25"><name pos:start="587:5" pos:end="587:16">pci_vga_init</name><argument_list pos:start="587:17" pos:end="587:25">(<argument pos:start="587:18" pos:end="587:24"><expr pos:start="587:18" pos:end="587:24"><name pos:start="587:18" pos:end="587:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="591:5" pos:end="595:5"><if pos:start="591:5" pos:end="595:5">if <condition pos:start="591:8" pos:end="591:73">(<expr pos:start="591:9" pos:end="591:72"><name pos:start="591:9" pos:end="591:21">graphic_depth</name> <operator pos:start="591:23" pos:end="591:24">!=</operator> <literal type="number" pos:start="591:26" pos:end="591:27">15</literal> <operator pos:start="591:29" pos:end="591:30">&amp;&amp;</operator> <name pos:start="591:32" pos:end="591:44">graphic_depth</name> <operator pos:start="591:46" pos:end="591:47">!=</operator> <literal type="number" pos:start="591:49" pos:end="591:50">32</literal> <operator pos:start="591:52" pos:end="591:53">&amp;&amp;</operator> <name pos:start="591:55" pos:end="591:67">graphic_depth</name> <operator pos:start="591:69" pos:end="591:70">!=</operator> <literal type="number" pos:start="591:72" pos:end="591:72">8</literal></expr>)</condition> <block pos:start="591:75" pos:end="595:5">{<block_content pos:start="593:9" pos:end="593:27">

        <expr_stmt pos:start="593:9" pos:end="593:27"><expr pos:start="593:9" pos:end="593:26"><name pos:start="593:9" pos:end="593:21">graphic_depth</name> <operator pos:start="593:23" pos:end="593:23">=</operator> <literal type="number" pos:start="593:25" pos:end="593:26">15</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="599:5" pos:end="610:0">for <control pos:start="599:9" pos:end="599:33">(<init pos:start="599:10" pos:end="599:15"><expr pos:start="599:10" pos:end="599:14"><name pos:start="599:10" pos:end="599:10">i</name> <operator pos:start="599:12" pos:end="599:12">=</operator> <literal type="number" pos:start="599:14" pos:end="599:14">0</literal></expr>;</init> <condition pos:start="599:17" pos:end="599:28"><expr pos:start="599:17" pos:end="599:27"><name pos:start="599:17" pos:end="599:17">i</name> <operator pos:start="599:19" pos:end="599:19">&lt;</operator> <name pos:start="599:21" pos:end="599:27">nb_nics</name></expr>;</condition> <incr pos:start="599:30" pos:end="599:32"><expr pos:start="599:30" pos:end="599:32"><name pos:start="599:30" pos:end="599:30">i</name><operator pos:start="599:31" pos:end="599:32">++</operator></expr></incr>)</control> <block pos:start="599:35" pos:end="610:0">{<block_content pos:start="601:9" pos:end="601:69">

        <expr_stmt pos:start="601:9" pos:end="601:69"><expr pos:start="601:9" pos:end="601:68"><call pos:start="601:9" pos:end="601:68"><name pos:start="601:9" pos:end="601:27">pci_nic_init_nofail</name><argument_list pos:start="601:28" pos:end="601:68">(<argument pos:start="601:29" pos:end="601:40"><expr pos:start="601:29" pos:end="601:40"><operator pos:start="601:29" pos:end="601:29">&amp;</operator><name pos:start="601:30" pos:end="601:40"><name pos:start="601:30" pos:end="601:37">nd_table</name><index pos:start="601:38" pos:end="601:40">[<expr pos:start="601:39" pos:end="601:39"><name pos:start="601:39" pos:end="601:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="601:43" pos:end="601:49"><expr pos:start="601:43" pos:end="601:49"><name pos:start="601:43" pos:end="601:49">pci_bus</name></expr></argument>, <argument pos:start="601:52" pos:end="601:61"><expr pos:start="601:52" pos:end="601:61"><literal type="string" pos:start="601:52" pos:end="601:61">"ne2k_pci"</literal></expr></argument>, <argument pos:start="601:64" pos:end="601:67"><expr pos:start="601:64" pos:end="601:67"><name pos:start="601:64" pos:end="601:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="607:5" pos:end="607:63">/* The NewWorld NVRAM is not located in the MacIO device */</comment>

<cpp:ifdef pos:start="609:1" pos:end="609:17">#<cpp:directive pos:start="609:2" pos:end="609:6">ifdef</cpp:directive> <name pos:start="609:8" pos:end="609:17">CONFIG_KVM</name></cpp:ifdef>

    <if_stmt pos:start="611:5" pos:end="622:0"><if pos:start="611:5" pos:end="622:0">if <condition pos:start="611:8" pos:end="611:46">(<expr pos:start="611:9" pos:end="611:45"><call pos:start="611:9" pos:end="611:21"><name pos:start="611:9" pos:end="611:19">kvm_enabled</name><argument_list pos:start="611:20" pos:end="611:21">()</argument_list></call> <operator pos:start="611:23" pos:end="611:24">&amp;&amp;</operator> <call pos:start="611:26" pos:end="611:38"><name pos:start="611:26" pos:end="611:36">getpagesize</name><argument_list pos:start="611:37" pos:end="611:38">()</argument_list></call> <operator pos:start="611:40" pos:end="611:40">&gt;</operator> <literal type="number" pos:start="611:42" pos:end="611:45">4096</literal></expr>)</condition> <block pos:start="611:48" pos:end="622:0">{<block_content pos:start="617:9" pos:end="617:32">

        <comment type="block" pos:start="613:9" pos:end="615:53">/* We can't combine read-write and read-only in a single page, so

           move the NVRAM out of ROM again for KVM */</comment>

        <expr_stmt pos:start="617:9" pos:end="617:32"><expr pos:start="617:9" pos:end="617:31"><name pos:start="617:9" pos:end="617:18">nvram_addr</name> <operator pos:start="617:20" pos:end="617:20">=</operator> <literal type="number" pos:start="617:22" pos:end="617:31">0xFFE00000</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="621:1" pos:end="621:6">#<cpp:directive pos:start="621:2" pos:end="621:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="623:5" pos:end="623:46"><expr pos:start="623:5" pos:end="623:45"><name pos:start="623:5" pos:end="623:7">dev</name> <operator pos:start="623:9" pos:end="623:9">=</operator> <call pos:start="623:11" pos:end="623:45"><name pos:start="623:11" pos:end="623:21">qdev_create</name><argument_list pos:start="623:22" pos:end="623:45">(<argument pos:start="623:23" pos:end="623:26"><expr pos:start="623:23" pos:end="623:26"><name pos:start="623:23" pos:end="623:26">NULL</name></expr></argument>, <argument pos:start="623:29" pos:end="623:44"><expr pos:start="623:29" pos:end="623:44"><name pos:start="623:29" pos:end="623:44">TYPE_MACIO_NVRAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="625:5" pos:end="625:46"><expr pos:start="625:5" pos:end="625:45"><call pos:start="625:5" pos:end="625:45"><name pos:start="625:5" pos:end="625:24">qdev_prop_set_uint32</name><argument_list pos:start="625:25" pos:end="625:45">(<argument pos:start="625:26" pos:end="625:28"><expr pos:start="625:26" pos:end="625:28"><name pos:start="625:26" pos:end="625:28">dev</name></expr></argument>, <argument pos:start="625:31" pos:end="625:36"><expr pos:start="625:31" pos:end="625:36"><literal type="string" pos:start="625:31" pos:end="625:36">"size"</literal></expr></argument>, <argument pos:start="625:39" pos:end="625:44"><expr pos:start="625:39" pos:end="625:44"><literal type="number" pos:start="625:39" pos:end="625:44">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="627:5" pos:end="627:45"><expr pos:start="627:5" pos:end="627:44"><call pos:start="627:5" pos:end="627:44"><name pos:start="627:5" pos:end="627:24">qdev_prop_set_uint32</name><argument_list pos:start="627:25" pos:end="627:44">(<argument pos:start="627:26" pos:end="627:28"><expr pos:start="627:26" pos:end="627:28"><name pos:start="627:26" pos:end="627:28">dev</name></expr></argument>, <argument pos:start="627:31" pos:end="627:40"><expr pos:start="627:31" pos:end="627:40"><literal type="string" pos:start="627:31" pos:end="627:40">"it_shift"</literal></expr></argument>, <argument pos:start="627:43" pos:end="627:43"><expr pos:start="627:43" pos:end="627:43"><literal type="number" pos:start="627:43" pos:end="627:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="629:5" pos:end="629:26"><expr pos:start="629:5" pos:end="629:25"><call pos:start="629:5" pos:end="629:25"><name pos:start="629:5" pos:end="629:20">qdev_init_nofail</name><argument_list pos:start="629:21" pos:end="629:25">(<argument pos:start="629:22" pos:end="629:24"><expr pos:start="629:22" pos:end="629:24"><name pos:start="629:22" pos:end="629:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="631:5" pos:end="631:56"><expr pos:start="631:5" pos:end="631:55"><call pos:start="631:5" pos:end="631:55"><name pos:start="631:5" pos:end="631:19">sysbus_mmio_map</name><argument_list pos:start="631:20" pos:end="631:55">(<argument pos:start="631:21" pos:end="631:39"><expr pos:start="631:21" pos:end="631:39"><call pos:start="631:21" pos:end="631:39"><name pos:start="631:21" pos:end="631:34">SYS_BUS_DEVICE</name><argument_list pos:start="631:35" pos:end="631:39">(<argument pos:start="631:36" pos:end="631:38"><expr pos:start="631:36" pos:end="631:38"><name pos:start="631:36" pos:end="631:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="631:42" pos:end="631:42"><expr pos:start="631:42" pos:end="631:42"><literal type="number" pos:start="631:42" pos:end="631:42">0</literal></expr></argument>, <argument pos:start="631:45" pos:end="631:54"><expr pos:start="631:45" pos:end="631:54"><name pos:start="631:45" pos:end="631:54">nvram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="633:5" pos:end="633:27"><expr pos:start="633:5" pos:end="633:26"><name pos:start="633:5" pos:end="633:7">nvr</name> <operator pos:start="633:9" pos:end="633:9">=</operator> <call pos:start="633:11" pos:end="633:26"><name pos:start="633:11" pos:end="633:21">MACIO_NVRAM</name><argument_list pos:start="633:22" pos:end="633:26">(<argument pos:start="633:23" pos:end="633:25"><expr pos:start="633:23" pos:end="633:25"><name pos:start="633:23" pos:end="633:25">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="635:5" pos:end="635:45"><expr pos:start="635:5" pos:end="635:44"><call pos:start="635:5" pos:end="635:44"><name pos:start="635:5" pos:end="635:31">pmac_format_nvram_partition</name><argument_list pos:start="635:32" pos:end="635:44">(<argument pos:start="635:33" pos:end="635:35"><expr pos:start="635:33" pos:end="635:35"><name pos:start="635:33" pos:end="635:35">nvr</name></expr></argument>, <argument pos:start="635:38" pos:end="635:43"><expr pos:start="635:38" pos:end="635:43"><literal type="number" pos:start="635:38" pos:end="635:43">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="637:5" pos:end="637:42">/* No PCI init: the BIOS will do it */</comment>



    <expr_stmt pos:start="641:5" pos:end="641:53"><expr pos:start="641:5" pos:end="641:52"><name pos:start="641:5" pos:end="641:10">fw_cfg</name> <operator pos:start="641:12" pos:end="641:12">=</operator> <call pos:start="641:14" pos:end="641:52"><name pos:start="641:14" pos:end="641:28">fw_cfg_init_mem</name><argument_list pos:start="641:29" pos:end="641:52">(<argument pos:start="641:30" pos:end="641:37"><expr pos:start="641:30" pos:end="641:37"><name pos:start="641:30" pos:end="641:37">CFG_ADDR</name></expr></argument>, <argument pos:start="641:40" pos:end="641:51"><expr pos:start="641:40" pos:end="641:51"><name pos:start="641:40" pos:end="641:47">CFG_ADDR</name> <operator pos:start="641:49" pos:end="641:49">+</operator> <literal type="number" pos:start="641:51" pos:end="641:51">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="643:5" pos:end="643:63"><expr pos:start="643:5" pos:end="643:62"><call pos:start="643:5" pos:end="643:62"><name pos:start="643:5" pos:end="643:18">fw_cfg_add_i16</name><argument_list pos:start="643:19" pos:end="643:62">(<argument pos:start="643:20" pos:end="643:25"><expr pos:start="643:20" pos:end="643:25"><name pos:start="643:20" pos:end="643:25">fw_cfg</name></expr></argument>, <argument pos:start="643:28" pos:end="643:41"><expr pos:start="643:28" pos:end="643:41"><name pos:start="643:28" pos:end="643:41">FW_CFG_NB_CPUS</name></expr></argument>, <argument pos:start="643:44" pos:end="643:61"><expr pos:start="643:44" pos:end="643:61"><operator pos:start="643:44" pos:end="643:44">(</operator><name pos:start="643:45" pos:end="643:52">uint16_t</name><operator pos:start="643:53" pos:end="643:53">)</operator><name pos:start="643:54" pos:end="643:61">smp_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="645:5" pos:end="645:64"><expr pos:start="645:5" pos:end="645:63"><call pos:start="645:5" pos:end="645:63"><name pos:start="645:5" pos:end="645:18">fw_cfg_add_i16</name><argument_list pos:start="645:19" pos:end="645:63">(<argument pos:start="645:20" pos:end="645:25"><expr pos:start="645:20" pos:end="645:25"><name pos:start="645:20" pos:end="645:25">fw_cfg</name></expr></argument>, <argument pos:start="645:28" pos:end="645:42"><expr pos:start="645:28" pos:end="645:42"><name pos:start="645:28" pos:end="645:42">FW_CFG_MAX_CPUS</name></expr></argument>, <argument pos:start="645:45" pos:end="645:62"><expr pos:start="645:45" pos:end="645:62"><operator pos:start="645:45" pos:end="645:45">(</operator><name pos:start="645:46" pos:end="645:53">uint16_t</name><operator pos:start="645:54" pos:end="645:54">)</operator><name pos:start="645:55" pos:end="645:62">max_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="647:5" pos:end="647:64"><expr pos:start="647:5" pos:end="647:63"><call pos:start="647:5" pos:end="647:63"><name pos:start="647:5" pos:end="647:18">fw_cfg_add_i64</name><argument_list pos:start="647:19" pos:end="647:63">(<argument pos:start="647:20" pos:end="647:25"><expr pos:start="647:20" pos:end="647:25"><name pos:start="647:20" pos:end="647:25">fw_cfg</name></expr></argument>, <argument pos:start="647:28" pos:end="647:42"><expr pos:start="647:28" pos:end="647:42"><name pos:start="647:28" pos:end="647:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="647:45" pos:end="647:62"><expr pos:start="647:45" pos:end="647:62"><operator pos:start="647:45" pos:end="647:45">(</operator><name pos:start="647:46" pos:end="647:53">uint64_t</name><operator pos:start="647:54" pos:end="647:54">)</operator><name pos:start="647:55" pos:end="647:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="649:5" pos:end="649:60"><expr pos:start="649:5" pos:end="649:59"><call pos:start="649:5" pos:end="649:59"><name pos:start="649:5" pos:end="649:18">fw_cfg_add_i16</name><argument_list pos:start="649:19" pos:end="649:59">(<argument pos:start="649:20" pos:end="649:25"><expr pos:start="649:20" pos:end="649:25"><name pos:start="649:20" pos:end="649:25">fw_cfg</name></expr></argument>, <argument pos:start="649:28" pos:end="649:44"><expr pos:start="649:28" pos:end="649:44"><name pos:start="649:28" pos:end="649:44">FW_CFG_MACHINE_ID</name></expr></argument>, <argument pos:start="649:47" pos:end="649:58"><expr pos:start="649:47" pos:end="649:58"><name pos:start="649:47" pos:end="649:58">machine_arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="651:5" pos:end="651:60"><expr pos:start="651:5" pos:end="651:59"><call pos:start="651:5" pos:end="651:59"><name pos:start="651:5" pos:end="651:18">fw_cfg_add_i32</name><argument_list pos:start="651:19" pos:end="651:59">(<argument pos:start="651:20" pos:end="651:25"><expr pos:start="651:20" pos:end="651:25"><name pos:start="651:20" pos:end="651:25">fw_cfg</name></expr></argument>, <argument pos:start="651:28" pos:end="651:45"><expr pos:start="651:28" pos:end="651:45"><name pos:start="651:28" pos:end="651:45">FW_CFG_KERNEL_ADDR</name></expr></argument>, <argument pos:start="651:48" pos:end="651:58"><expr pos:start="651:48" pos:end="651:58"><name pos:start="651:48" pos:end="651:58">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="653:5" pos:end="653:60"><expr pos:start="653:5" pos:end="653:59"><call pos:start="653:5" pos:end="653:59"><name pos:start="653:5" pos:end="653:18">fw_cfg_add_i32</name><argument_list pos:start="653:19" pos:end="653:59">(<argument pos:start="653:20" pos:end="653:25"><expr pos:start="653:20" pos:end="653:25"><name pos:start="653:20" pos:end="653:25">fw_cfg</name></expr></argument>, <argument pos:start="653:28" pos:end="653:45"><expr pos:start="653:28" pos:end="653:45"><name pos:start="653:28" pos:end="653:45">FW_CFG_KERNEL_SIZE</name></expr></argument>, <argument pos:start="653:48" pos:end="653:58"><expr pos:start="653:48" pos:end="653:58"><name pos:start="653:48" pos:end="653:58">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="655:5" pos:end="665:5"><if pos:start="655:5" pos:end="661:5">if <condition pos:start="655:8" pos:end="655:23">(<expr pos:start="655:9" pos:end="655:22"><name pos:start="655:9" pos:end="655:22">kernel_cmdline</name></expr>)</condition> <block pos:start="655:25" pos:end="661:5">{<block_content pos:start="657:9" pos:end="659:84">

        <expr_stmt pos:start="657:9" pos:end="657:68"><expr pos:start="657:9" pos:end="657:67"><call pos:start="657:9" pos:end="657:67"><name pos:start="657:9" pos:end="657:22">fw_cfg_add_i32</name><argument_list pos:start="657:23" pos:end="657:67">(<argument pos:start="657:24" pos:end="657:29"><expr pos:start="657:24" pos:end="657:29"><name pos:start="657:24" pos:end="657:29">fw_cfg</name></expr></argument>, <argument pos:start="657:32" pos:end="657:52"><expr pos:start="657:32" pos:end="657:52"><name pos:start="657:32" pos:end="657:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="657:55" pos:end="657:66"><expr pos:start="657:55" pos:end="657:66"><name pos:start="657:55" pos:end="657:66">cmdline_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="659:9" pos:end="659:84"><expr pos:start="659:9" pos:end="659:83"><call pos:start="659:9" pos:end="659:83"><name pos:start="659:9" pos:end="659:24">pstrcpy_targphys</name><argument_list pos:start="659:25" pos:end="659:83">(<argument pos:start="659:26" pos:end="659:34"><expr pos:start="659:26" pos:end="659:34"><literal type="string" pos:start="659:26" pos:end="659:34">"cmdline"</literal></expr></argument>, <argument pos:start="659:37" pos:end="659:48"><expr pos:start="659:37" pos:end="659:48"><name pos:start="659:37" pos:end="659:48">cmdline_base</name></expr></argument>, <argument pos:start="659:51" pos:end="659:66"><expr pos:start="659:51" pos:end="659:66"><name pos:start="659:51" pos:end="659:66">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="659:69" pos:end="659:82"><expr pos:start="659:69" pos:end="659:82"><name pos:start="659:69" pos:end="659:82">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="661:7" pos:end="665:5">else <block pos:start="661:12" pos:end="665:5">{<block_content pos:start="663:9" pos:end="663:57">

        <expr_stmt pos:start="663:9" pos:end="663:57"><expr pos:start="663:9" pos:end="663:56"><call pos:start="663:9" pos:end="663:56"><name pos:start="663:9" pos:end="663:22">fw_cfg_add_i32</name><argument_list pos:start="663:23" pos:end="663:56">(<argument pos:start="663:24" pos:end="663:29"><expr pos:start="663:24" pos:end="663:29"><name pos:start="663:24" pos:end="663:29">fw_cfg</name></expr></argument>, <argument pos:start="663:32" pos:end="663:52"><expr pos:start="663:32" pos:end="663:52"><name pos:start="663:32" pos:end="663:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="663:55" pos:end="663:55"><expr pos:start="663:55" pos:end="663:55"><literal type="number" pos:start="663:55" pos:end="663:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="667:5" pos:end="667:60"><expr pos:start="667:5" pos:end="667:59"><call pos:start="667:5" pos:end="667:59"><name pos:start="667:5" pos:end="667:18">fw_cfg_add_i32</name><argument_list pos:start="667:19" pos:end="667:59">(<argument pos:start="667:20" pos:end="667:25"><expr pos:start="667:20" pos:end="667:25"><name pos:start="667:20" pos:end="667:25">fw_cfg</name></expr></argument>, <argument pos:start="667:28" pos:end="667:45"><expr pos:start="667:28" pos:end="667:45"><name pos:start="667:28" pos:end="667:45">FW_CFG_INITRD_ADDR</name></expr></argument>, <argument pos:start="667:48" pos:end="667:58"><expr pos:start="667:48" pos:end="667:58"><name pos:start="667:48" pos:end="667:58">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="669:5" pos:end="669:60"><expr pos:start="669:5" pos:end="669:59"><call pos:start="669:5" pos:end="669:59"><name pos:start="669:5" pos:end="669:18">fw_cfg_add_i32</name><argument_list pos:start="669:19" pos:end="669:59">(<argument pos:start="669:20" pos:end="669:25"><expr pos:start="669:20" pos:end="669:25"><name pos:start="669:20" pos:end="669:25">fw_cfg</name></expr></argument>, <argument pos:start="669:28" pos:end="669:45"><expr pos:start="669:28" pos:end="669:45"><name pos:start="669:28" pos:end="669:45">FW_CFG_INITRD_SIZE</name></expr></argument>, <argument pos:start="669:48" pos:end="669:58"><expr pos:start="669:48" pos:end="669:58"><name pos:start="669:48" pos:end="669:58">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="671:5" pos:end="671:64"><expr pos:start="671:5" pos:end="671:63"><call pos:start="671:5" pos:end="671:63"><name pos:start="671:5" pos:end="671:18">fw_cfg_add_i16</name><argument_list pos:start="671:19" pos:end="671:63">(<argument pos:start="671:20" pos:end="671:25"><expr pos:start="671:20" pos:end="671:25"><name pos:start="671:20" pos:end="671:25">fw_cfg</name></expr></argument>, <argument pos:start="671:28" pos:end="671:45"><expr pos:start="671:28" pos:end="671:45"><name pos:start="671:28" pos:end="671:45">FW_CFG_BOOT_DEVICE</name></expr></argument>, <argument pos:start="671:48" pos:end="671:62"><expr pos:start="671:48" pos:end="671:62"><name pos:start="671:48" pos:end="671:62">ppc_boot_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="675:5" pos:end="675:60"><expr pos:start="675:5" pos:end="675:59"><call pos:start="675:5" pos:end="675:59"><name pos:start="675:5" pos:end="675:18">fw_cfg_add_i16</name><argument_list pos:start="675:19" pos:end="675:59">(<argument pos:start="675:20" pos:end="675:25"><expr pos:start="675:20" pos:end="675:25"><name pos:start="675:20" pos:end="675:25">fw_cfg</name></expr></argument>, <argument pos:start="675:28" pos:end="675:43"><expr pos:start="675:28" pos:end="675:43"><name pos:start="675:28" pos:end="675:43">FW_CFG_PPC_WIDTH</name></expr></argument>, <argument pos:start="675:46" pos:end="675:58"><expr pos:start="675:46" pos:end="675:58"><name pos:start="675:46" pos:end="675:58">graphic_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="677:5" pos:end="677:62"><expr pos:start="677:5" pos:end="677:61"><call pos:start="677:5" pos:end="677:61"><name pos:start="677:5" pos:end="677:18">fw_cfg_add_i16</name><argument_list pos:start="677:19" pos:end="677:61">(<argument pos:start="677:20" pos:end="677:25"><expr pos:start="677:20" pos:end="677:25"><name pos:start="677:20" pos:end="677:25">fw_cfg</name></expr></argument>, <argument pos:start="677:28" pos:end="677:44"><expr pos:start="677:28" pos:end="677:44"><name pos:start="677:28" pos:end="677:44">FW_CFG_PPC_HEIGHT</name></expr></argument>, <argument pos:start="677:47" pos:end="677:60"><expr pos:start="677:47" pos:end="677:60"><name pos:start="677:47" pos:end="677:60">graphic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="679:5" pos:end="679:60"><expr pos:start="679:5" pos:end="679:59"><call pos:start="679:5" pos:end="679:59"><name pos:start="679:5" pos:end="679:18">fw_cfg_add_i16</name><argument_list pos:start="679:19" pos:end="679:59">(<argument pos:start="679:20" pos:end="679:25"><expr pos:start="679:20" pos:end="679:25"><name pos:start="679:20" pos:end="679:25">fw_cfg</name></expr></argument>, <argument pos:start="679:28" pos:end="679:43"><expr pos:start="679:28" pos:end="679:43"><name pos:start="679:28" pos:end="679:43">FW_CFG_PPC_DEPTH</name></expr></argument>, <argument pos:start="679:46" pos:end="679:58"><expr pos:start="679:46" pos:end="679:58"><name pos:start="679:46" pos:end="679:58">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="683:5" pos:end="683:61"><expr pos:start="683:5" pos:end="683:60"><call pos:start="683:5" pos:end="683:60"><name pos:start="683:5" pos:end="683:18">fw_cfg_add_i32</name><argument_list pos:start="683:19" pos:end="683:60">(<argument pos:start="683:20" pos:end="683:25"><expr pos:start="683:20" pos:end="683:25"><name pos:start="683:20" pos:end="683:25">fw_cfg</name></expr></argument>, <argument pos:start="683:28" pos:end="683:44"><expr pos:start="683:28" pos:end="683:44"><name pos:start="683:28" pos:end="683:44">FW_CFG_PPC_IS_KVM</name></expr></argument>, <argument pos:start="683:47" pos:end="683:59"><expr pos:start="683:47" pos:end="683:59"><call pos:start="683:47" pos:end="683:59"><name pos:start="683:47" pos:end="683:57">kvm_enabled</name><argument_list pos:start="683:58" pos:end="683:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="685:5" pos:end="703:5"><if pos:start="685:5" pos:end="703:5">if <condition pos:start="685:8" pos:end="685:22">(<expr pos:start="685:9" pos:end="685:21"><call pos:start="685:9" pos:end="685:21"><name pos:start="685:9" pos:end="685:19">kvm_enabled</name><argument_list pos:start="685:20" pos:end="685:21">()</argument_list></call></expr>)</condition> <block pos:start="685:24" pos:end="703:5">{<block_content pos:start="689:9" pos:end="702:0">

<cpp:ifdef pos:start="687:1" pos:end="687:17">#<cpp:directive pos:start="687:2" pos:end="687:6">ifdef</cpp:directive> <name pos:start="687:8" pos:end="687:17">CONFIG_KVM</name></cpp:ifdef>

        <decl_stmt pos:start="689:9" pos:end="689:27"><decl pos:start="689:9" pos:end="689:26"><type pos:start="689:9" pos:end="689:17"><name pos:start="689:9" pos:end="689:15">uint8_t</name> <modifier pos:start="689:17" pos:end="689:17">*</modifier></type><name pos:start="689:18" pos:end="689:26">hypercall</name></decl>;</decl_stmt>



        <expr_stmt pos:start="693:9" pos:end="693:33"><expr pos:start="693:9" pos:end="693:32"><name pos:start="693:9" pos:end="693:17">hypercall</name> <operator pos:start="693:19" pos:end="693:19">=</operator> <call pos:start="693:21" pos:end="693:32"><name pos:start="693:21" pos:end="693:28">g_malloc</name><argument_list pos:start="693:29" pos:end="693:32">(<argument pos:start="693:30" pos:end="693:31"><expr pos:start="693:30" pos:end="693:31"><literal type="number" pos:start="693:30" pos:end="693:31">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="695:9" pos:end="695:49"><expr pos:start="695:9" pos:end="695:48"><call pos:start="695:9" pos:end="695:48"><name pos:start="695:9" pos:end="695:28">kvmppc_get_hypercall</name><argument_list pos:start="695:29" pos:end="695:48">(<argument pos:start="695:30" pos:end="695:32"><expr pos:start="695:30" pos:end="695:32"><name pos:start="695:30" pos:end="695:32">env</name></expr></argument>, <argument pos:start="695:35" pos:end="695:43"><expr pos:start="695:35" pos:end="695:43"><name pos:start="695:35" pos:end="695:43">hypercall</name></expr></argument>, <argument pos:start="695:46" pos:end="695:47"><expr pos:start="695:46" pos:end="695:47"><literal type="number" pos:start="695:46" pos:end="695:47">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="697:9" pos:end="697:67"><expr pos:start="697:9" pos:end="697:66"><call pos:start="697:9" pos:end="697:66"><name pos:start="697:9" pos:end="697:24">fw_cfg_add_bytes</name><argument_list pos:start="697:25" pos:end="697:66">(<argument pos:start="697:26" pos:end="697:31"><expr pos:start="697:26" pos:end="697:31"><name pos:start="697:26" pos:end="697:31">fw_cfg</name></expr></argument>, <argument pos:start="697:34" pos:end="697:50"><expr pos:start="697:34" pos:end="697:50"><name pos:start="697:34" pos:end="697:50">FW_CFG_PPC_KVM_HC</name></expr></argument>, <argument pos:start="697:53" pos:end="697:61"><expr pos:start="697:53" pos:end="697:61"><name pos:start="697:53" pos:end="697:61">hypercall</name></expr></argument>, <argument pos:start="697:64" pos:end="697:65"><expr pos:start="697:64" pos:end="697:65"><literal type="number" pos:start="697:64" pos:end="697:65">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="699:9" pos:end="702:0"><expr pos:start="699:9" pos:end="699:60"><call pos:start="699:9" pos:end="699:60"><name pos:start="699:9" pos:end="699:22">fw_cfg_add_i32</name><argument_list pos:start="699:23" pos:end="699:60">(<argument pos:start="699:24" pos:end="699:29"><expr pos:start="699:24" pos:end="699:29"><name pos:start="699:24" pos:end="699:29">fw_cfg</name></expr></argument>, <argument pos:start="699:32" pos:end="699:49"><expr pos:start="699:32" pos:end="699:49"><name pos:start="699:32" pos:end="699:49">FW_CFG_PPC_KVM_PID</name></expr></argument>, <argument pos:start="699:52" pos:end="699:59"><expr pos:start="699:52" pos:end="699:59"><call pos:start="699:52" pos:end="699:59"><name pos:start="699:52" pos:end="699:57">getpid</name><argument_list pos:start="699:58" pos:end="699:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="701:1" pos:end="701:6">#<cpp:directive pos:start="701:2" pos:end="701:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="705:5" pos:end="705:54"><expr pos:start="705:5" pos:end="705:53"><call pos:start="705:5" pos:end="705:53"><name pos:start="705:5" pos:end="705:18">fw_cfg_add_i32</name><argument_list pos:start="705:19" pos:end="705:53">(<argument pos:start="705:20" pos:end="705:25"><expr pos:start="705:20" pos:end="705:25"><name pos:start="705:20" pos:end="705:25">fw_cfg</name></expr></argument>, <argument pos:start="705:28" pos:end="705:44"><expr pos:start="705:28" pos:end="705:44"><name pos:start="705:28" pos:end="705:44">FW_CFG_PPC_TBFREQ</name></expr></argument>, <argument pos:start="705:47" pos:end="705:52"><expr pos:start="705:47" pos:end="705:52"><name pos:start="705:47" pos:end="705:52">tbfreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="707:5" pos:end="707:78">/* Mac OS X requires a "known good" clock-frequency value; pass it one. */</comment>

    <expr_stmt pos:start="709:5" pos:end="709:60"><expr pos:start="709:5" pos:end="709:59"><call pos:start="709:5" pos:end="709:59"><name pos:start="709:5" pos:end="709:18">fw_cfg_add_i32</name><argument_list pos:start="709:19" pos:end="709:59">(<argument pos:start="709:20" pos:end="709:25"><expr pos:start="709:20" pos:end="709:25"><name pos:start="709:20" pos:end="709:25">fw_cfg</name></expr></argument>, <argument pos:start="709:28" pos:end="709:47"><expr pos:start="709:28" pos:end="709:47"><name pos:start="709:28" pos:end="709:47">FW_CFG_PPC_CLOCKFREQ</name></expr></argument>, <argument pos:start="709:50" pos:end="709:58"><expr pos:start="709:50" pos:end="709:58"><name pos:start="709:50" pos:end="709:58">CLOCKFREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="711:5" pos:end="711:56"><expr pos:start="711:5" pos:end="711:55"><call pos:start="711:5" pos:end="711:55"><name pos:start="711:5" pos:end="711:18">fw_cfg_add_i32</name><argument_list pos:start="711:19" pos:end="711:55">(<argument pos:start="711:20" pos:end="711:25"><expr pos:start="711:20" pos:end="711:25"><name pos:start="711:20" pos:end="711:25">fw_cfg</name></expr></argument>, <argument pos:start="711:28" pos:end="711:45"><expr pos:start="711:28" pos:end="711:45"><name pos:start="711:28" pos:end="711:45">FW_CFG_PPC_BUSFREQ</name></expr></argument>, <argument pos:start="711:48" pos:end="711:54"><expr pos:start="711:48" pos:end="711:54"><name pos:start="711:48" pos:end="711:54">BUSFREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="713:5" pos:end="713:62"><expr pos:start="713:5" pos:end="713:61"><call pos:start="713:5" pos:end="713:61"><name pos:start="713:5" pos:end="713:18">fw_cfg_add_i32</name><argument_list pos:start="713:19" pos:end="713:61">(<argument pos:start="713:20" pos:end="713:25"><expr pos:start="713:20" pos:end="713:25"><name pos:start="713:20" pos:end="713:25">fw_cfg</name></expr></argument>, <argument pos:start="713:28" pos:end="713:48"><expr pos:start="713:28" pos:end="713:48"><name pos:start="713:28" pos:end="713:48">FW_CFG_PPC_NVRAM_ADDR</name></expr></argument>, <argument pos:start="713:51" pos:end="713:60"><expr pos:start="713:51" pos:end="713:60"><name pos:start="713:51" pos:end="713:60">nvram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="717:5" pos:end="717:31">/* MacOS NDRV VGA driver */</comment>

    <expr_stmt pos:start="719:5" pos:end="719:70"><expr pos:start="719:5" pos:end="719:69"><name pos:start="719:5" pos:end="719:12">filename</name> <operator pos:start="719:14" pos:end="719:14">=</operator> <call pos:start="719:16" pos:end="719:69"><name pos:start="719:16" pos:end="719:29">qemu_find_file</name><argument_list pos:start="719:30" pos:end="719:69">(<argument pos:start="719:31" pos:end="719:49"><expr pos:start="719:31" pos:end="719:49"><name pos:start="719:31" pos:end="719:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="719:52" pos:end="719:68"><expr pos:start="719:52" pos:end="719:68"><name pos:start="719:52" pos:end="719:68">NDRV_VGA_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="721:5" pos:end="739:5"><if pos:start="721:5" pos:end="739:5">if <condition pos:start="721:8" pos:end="721:17">(<expr pos:start="721:9" pos:end="721:16"><name pos:start="721:9" pos:end="721:16">filename</name></expr>)</condition> <block pos:start="721:19" pos:end="739:5">{<block_content pos:start="723:9" pos:end="737:25">

        <expr_stmt pos:start="723:9" pos:end="723:45"><expr pos:start="723:9" pos:end="723:44"><name pos:start="723:9" pos:end="723:17">ndrv_size</name> <operator pos:start="723:19" pos:end="723:19">=</operator> <call pos:start="723:21" pos:end="723:44"><name pos:start="723:21" pos:end="723:34">get_image_size</name><argument_list pos:start="723:35" pos:end="723:44">(<argument pos:start="723:36" pos:end="723:43"><expr pos:start="723:36" pos:end="723:43"><name pos:start="723:36" pos:end="723:43">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="725:9" pos:end="735:9"><if pos:start="725:9" pos:end="735:9">if <condition pos:start="725:12" pos:end="725:28">(<expr pos:start="725:13" pos:end="725:27"><name pos:start="725:13" pos:end="725:21">ndrv_size</name> <operator pos:start="725:23" pos:end="725:24">!=</operator> <operator pos:start="725:26" pos:end="725:26">-</operator><literal type="number" pos:start="725:27" pos:end="725:27">1</literal></expr>)</condition> <block pos:start="725:30" pos:end="735:9">{<block_content pos:start="727:13" pos:end="733:80">

            <expr_stmt pos:start="727:13" pos:end="727:44"><expr pos:start="727:13" pos:end="727:43"><name pos:start="727:13" pos:end="727:21">ndrv_file</name> <operator pos:start="727:23" pos:end="727:23">=</operator> <call pos:start="727:25" pos:end="727:43"><name pos:start="727:25" pos:end="727:32">g_malloc</name><argument_list pos:start="727:33" pos:end="727:43">(<argument pos:start="727:34" pos:end="727:42"><expr pos:start="727:34" pos:end="727:42"><name pos:start="727:34" pos:end="727:42">ndrv_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="729:13" pos:end="729:56"><expr pos:start="729:13" pos:end="729:55"><name pos:start="729:13" pos:end="729:21">ndrv_size</name> <operator pos:start="729:23" pos:end="729:23">=</operator> <call pos:start="729:25" pos:end="729:55"><name pos:start="729:25" pos:end="729:34">load_image</name><argument_list pos:start="729:35" pos:end="729:55">(<argument pos:start="729:36" pos:end="729:43"><expr pos:start="729:36" pos:end="729:43"><name pos:start="729:36" pos:end="729:43">filename</name></expr></argument>, <argument pos:start="729:46" pos:end="729:54"><expr pos:start="729:46" pos:end="729:54"><name pos:start="729:46" pos:end="729:54">ndrv_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="733:13" pos:end="733:80"><expr pos:start="733:13" pos:end="733:79"><call pos:start="733:13" pos:end="733:79"><name pos:start="733:13" pos:end="733:27">fw_cfg_add_file</name><argument_list pos:start="733:28" pos:end="733:79">(<argument pos:start="733:29" pos:end="733:34"><expr pos:start="733:29" pos:end="733:34"><name pos:start="733:29" pos:end="733:34">fw_cfg</name></expr></argument>, <argument pos:start="733:37" pos:end="733:56"><expr pos:start="733:37" pos:end="733:56"><literal type="string" pos:start="733:37" pos:end="733:56">"ndrv/qemu_vga.ndrv"</literal></expr></argument>, <argument pos:start="733:59" pos:end="733:67"><expr pos:start="733:59" pos:end="733:67"><name pos:start="733:59" pos:end="733:67">ndrv_file</name></expr></argument>, <argument pos:start="733:70" pos:end="733:78"><expr pos:start="733:70" pos:end="733:78"><name pos:start="733:70" pos:end="733:78">ndrv_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="737:9" pos:end="737:25"><expr pos:start="737:9" pos:end="737:24"><call pos:start="737:9" pos:end="737:24"><name pos:start="737:9" pos:end="737:14">g_free</name><argument_list pos:start="737:15" pos:end="737:24">(<argument pos:start="737:16" pos:end="737:23"><expr pos:start="737:16" pos:end="737:23"><name pos:start="737:16" pos:end="737:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="743:5" pos:end="743:52"><expr pos:start="743:5" pos:end="743:51"><call pos:start="743:5" pos:end="743:51"><name pos:start="743:5" pos:end="743:26">qemu_register_boot_set</name><argument_list pos:start="743:27" pos:end="743:51">(<argument pos:start="743:28" pos:end="743:42"><expr pos:start="743:28" pos:end="743:42"><name pos:start="743:28" pos:end="743:42">fw_cfg_boot_set</name></expr></argument>, <argument pos:start="743:45" pos:end="743:50"><expr pos:start="743:45" pos:end="743:50"><name pos:start="743:45" pos:end="743:50">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
