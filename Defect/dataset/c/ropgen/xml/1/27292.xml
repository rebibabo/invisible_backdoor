<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27292.c" pos:tabs="8"><function pos:start="1:1" pos:end="215:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">decode_packet</name><parameter_list pos:start="1:25" pos:end="3:41">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:58"><decl pos:start="1:49" pos:end="1:58"><type pos:start="1:49" pos:end="1:58"><name pos:start="1:49" pos:end="1:52">void</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">data</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:78"><decl pos:start="1:61" pos:end="1:78"><type pos:start="1:61" pos:end="1:78"><name pos:start="1:61" pos:end="1:63">int</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:78">got_frame_ptr</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:40"><decl pos:start="3:26" pos:end="3:40"><type pos:start="3:26" pos:end="3:40"><name pos:start="3:26" pos:end="3:33">AVPacket</name><modifier pos:start="3:34" pos:end="3:34">*</modifier></type> <name pos:start="3:36" pos:end="3:40">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="215:1">{<block_content pos:start="7:5" pos:end="213:76">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">WmallDecodeCtx</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:40">= <expr pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:29">avctx</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:17">GetBitContext</name><modifier pos:start="9:18" pos:end="9:18">*</modifier></type> <name pos:start="9:20" pos:end="9:21">gb</name>  <init pos:start="9:24" pos:end="9:32">= <expr pos:start="9:26" pos:end="9:32"><operator pos:start="9:26" pos:end="9:26">&amp;</operator><name pos:start="9:27" pos:end="9:32"><name pos:start="9:27" pos:end="9:27">s</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:32">pgb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:18"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name><modifier pos:start="11:18" pos:end="11:18">*</modifier></type> <name pos:start="11:20" pos:end="11:22">buf</name> <init pos:start="11:24" pos:end="11:36">= <expr pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:30">avpkt</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:16">buf_size</name>       <init pos:start="13:24" pos:end="13:36">= <expr pos:start="13:26" pos:end="13:36"><name pos:start="13:26" pos:end="13:36"><name pos:start="13:26" pos:end="13:30">avpkt</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:68"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:27">num_bits_prev_frame</name></decl>, <decl pos:start="15:30" pos:end="15:51"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:30" pos:end="15:51">packet_sequence_number</name></decl>, <decl pos:start="15:54" pos:end="15:67"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:54" pos:end="15:67">spliced_packet</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:28"><expr pos:start="19:5" pos:end="19:27"><name pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:12">frame</name><operator pos:start="19:13" pos:end="19:13">.</operator><name pos:start="19:14" pos:end="19:23">nb_samples</name></name> <operator pos:start="19:25" pos:end="19:25">=</operator> <literal type="number" pos:start="19:27" pos:end="19:27">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="187:5"><if pos:start="23:5" pos:end="139:5">if <condition pos:start="23:8" pos:end="23:41">(<expr pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:22"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:22">packet_done</name></name> <operator pos:start="23:24" pos:end="23:25">||</operator> <name pos:start="23:27" pos:end="23:40"><name pos:start="23:27" pos:end="23:27">s</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:40">packet_loss</name></name></expr>)</condition> <block pos:start="23:43" pos:end="139:5">{<block_content pos:start="25:9" pos:end="135:9">

        <expr_stmt pos:start="25:9" pos:end="25:27"><expr pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:22">packet_done</name></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <literal type="number" pos:start="25:26" pos:end="25:26">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="29:9" pos:end="29:48">/* sanity check for the buffer length */</comment>

        <if_stmt pos:start="31:9" pos:end="33:21"><if pos:start="31:9" pos:end="33:21">if <condition pos:start="31:12" pos:end="31:42">(<expr pos:start="31:13" pos:end="31:41"><name pos:start="31:13" pos:end="31:20">buf_size</name> <operator pos:start="31:22" pos:end="31:22">&lt;</operator> <name pos:start="31:24" pos:end="31:41"><name pos:start="31:24" pos:end="31:28">avctx</name><operator pos:start="31:29" pos:end="31:30">-&gt;</operator><name pos:start="31:31" pos:end="31:41">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:21"><block_content pos:start="33:13" pos:end="33:21">

            <return pos:start="33:13" pos:end="33:21">return <expr pos:start="33:20" pos:end="33:20"><literal type="number" pos:start="33:20" pos:end="33:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:61"><expr pos:start="37:9" pos:end="37:60"><name pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:28">next_packet_start</name></name> <operator pos:start="37:30" pos:end="37:30">=</operator> <name pos:start="37:32" pos:end="37:39">buf_size</name> <operator pos:start="37:41" pos:end="37:41">-</operator> <name pos:start="37:43" pos:end="37:60"><name pos:start="37:43" pos:end="37:47">avctx</name><operator pos:start="37:48" pos:end="37:49">-&gt;</operator><name pos:start="37:50" pos:end="37:60">block_align</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:50"><expr pos:start="39:9" pos:end="39:49"><name pos:start="39:9" pos:end="39:16">buf_size</name>             <operator pos:start="39:30" pos:end="39:30">=</operator> <name pos:start="39:32" pos:end="39:49"><name pos:start="39:32" pos:end="39:36">avctx</name><operator pos:start="39:37" pos:end="39:38">-&gt;</operator><name pos:start="39:39" pos:end="39:49">block_align</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:45"><expr pos:start="41:9" pos:end="41:44"><name pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:23">buf_bit_size</name></name>      <operator pos:start="41:30" pos:end="41:30">=</operator> <name pos:start="41:32" pos:end="41:39">buf_size</name> <operator pos:start="41:41" pos:end="41:42">&lt;&lt;</operator> <literal type="number" pos:start="41:44" pos:end="41:44">3</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="45:9" pos:end="45:33">/* parse packet header */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:48"><expr pos:start="47:9" pos:end="47:47"><call pos:start="47:9" pos:end="47:47"><name pos:start="47:9" pos:end="47:21">init_get_bits</name><argument_list pos:start="47:22" pos:end="47:47">(<argument pos:start="47:23" pos:end="47:24"><expr pos:start="47:23" pos:end="47:24"><name pos:start="47:23" pos:end="47:24">gb</name></expr></argument>, <argument pos:start="47:27" pos:end="47:29"><expr pos:start="47:27" pos:end="47:29"><name pos:start="47:27" pos:end="47:29">buf</name></expr></argument>, <argument pos:start="47:32" pos:end="47:46"><expr pos:start="47:32" pos:end="47:46"><name pos:start="47:32" pos:end="47:46"><name pos:start="47:32" pos:end="47:32">s</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:46">buf_bit_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:49"><expr pos:start="49:9" pos:end="49:48"><name pos:start="49:9" pos:end="49:30">packet_sequence_number</name> <operator pos:start="49:32" pos:end="49:32">=</operator> <call pos:start="49:34" pos:end="49:48"><name pos:start="49:34" pos:end="49:41">get_bits</name><argument_list pos:start="49:42" pos:end="49:48">(<argument pos:start="49:43" pos:end="49:44"><expr pos:start="49:43" pos:end="49:44"><name pos:start="49:43" pos:end="49:44">gb</name></expr></argument>, <argument pos:start="49:47" pos:end="49:47"><expr pos:start="49:47" pos:end="49:47"><literal type="number" pos:start="49:47" pos:end="49:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:25"><expr pos:start="51:9" pos:end="51:24"><call pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:17">skip_bits</name><argument_list pos:start="51:18" pos:end="51:24">(<argument pos:start="51:19" pos:end="51:20"><expr pos:start="51:19" pos:end="51:20"><name pos:start="51:19" pos:end="51:20">gb</name></expr></argument>, <argument pos:start="51:23" pos:end="51:23"><expr pos:start="51:23" pos:end="51:23"><literal type="number" pos:start="51:23" pos:end="51:23">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line" pos:start="51:29" pos:end="51:80">// Skip seekable_frame_in_packet, currently ununused</comment>

        <expr_stmt pos:start="53:9" pos:end="53:39"><expr pos:start="53:9" pos:end="53:38"><name pos:start="53:9" pos:end="53:22">spliced_packet</name> <operator pos:start="53:24" pos:end="53:24">=</operator> <call pos:start="53:26" pos:end="53:38"><name pos:start="53:26" pos:end="53:34">get_bits1</name><argument_list pos:start="53:35" pos:end="53:38">(<argument pos:start="53:36" pos:end="53:37"><expr pos:start="53:36" pos:end="53:37"><name pos:start="53:36" pos:end="53:37">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="57:63"><if pos:start="55:9" pos:end="57:63">if <condition pos:start="55:12" pos:end="55:27">(<expr pos:start="55:13" pos:end="55:26"><name pos:start="55:13" pos:end="55:26">spliced_packet</name></expr>)</condition><block type="pseudo" pos:start="57:13" pos:end="57:63"><block_content pos:start="57:13" pos:end="57:63">

            <expr_stmt pos:start="57:13" pos:end="57:63"><expr pos:start="57:13" pos:end="57:62"><call pos:start="57:13" pos:end="57:62"><name pos:start="57:13" pos:end="57:33">avpriv_request_sample</name><argument_list pos:start="57:34" pos:end="57:62">(<argument pos:start="57:35" pos:end="57:39"><expr pos:start="57:35" pos:end="57:39"><name pos:start="57:35" pos:end="57:39">avctx</name></expr></argument>, <argument pos:start="57:42" pos:end="57:61"><expr pos:start="57:42" pos:end="57:61"><literal type="string" pos:start="57:42" pos:end="57:61">"Bitstream splicing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="61:9" pos:end="61:76">/* get number of bits that need to be added to the previous frame */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:63"><expr pos:start="63:9" pos:end="63:62"><name pos:start="63:9" pos:end="63:27">num_bits_prev_frame</name> <operator pos:start="63:29" pos:end="63:29">=</operator> <call pos:start="63:31" pos:end="63:62"><name pos:start="63:31" pos:end="63:38">get_bits</name><argument_list pos:start="63:39" pos:end="63:62">(<argument pos:start="63:40" pos:end="63:41"><expr pos:start="63:40" pos:end="63:41"><name pos:start="63:40" pos:end="63:41">gb</name></expr></argument>, <argument pos:start="63:44" pos:end="63:61"><expr pos:start="63:44" pos:end="63:61"><name pos:start="63:44" pos:end="63:61"><name pos:start="63:44" pos:end="63:44">s</name><operator pos:start="63:45" pos:end="63:46">-&gt;</operator><name pos:start="63:47" pos:end="63:61">log2_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="67:9" pos:end="67:35">/* check for packet loss */</comment>

        <if_stmt pos:start="69:9" pos:end="79:9"><if pos:start="69:9" pos:end="79:9">if <condition pos:start="69:12" pos:end="71:78">(<expr pos:start="69:13" pos:end="71:77"><operator pos:start="69:13" pos:end="69:13">!</operator><name pos:start="69:14" pos:end="69:27"><name pos:start="69:14" pos:end="69:14">s</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:27">packet_loss</name></name> <operator pos:start="69:29" pos:end="69:30">&amp;&amp;</operator>

            <operator pos:start="71:13" pos:end="71:13">(</operator><operator pos:start="71:14" pos:end="71:14">(</operator><name pos:start="71:15" pos:end="71:39"><name pos:start="71:15" pos:end="71:15">s</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:39">packet_sequence_number</name></name> <operator pos:start="71:41" pos:end="71:41">+</operator> <literal type="number" pos:start="71:43" pos:end="71:43">1</literal><operator pos:start="71:44" pos:end="71:44">)</operator> <operator pos:start="71:46" pos:end="71:46">&amp;</operator> <literal type="number" pos:start="71:48" pos:end="71:50">0xF</literal><operator pos:start="71:51" pos:end="71:51">)</operator> <operator pos:start="71:53" pos:end="71:54">!=</operator> <name pos:start="71:56" pos:end="71:77">packet_sequence_number</name></expr>)</condition> <block pos:start="71:80" pos:end="79:9">{<block_content pos:start="73:13" pos:end="77:70">

            <expr_stmt pos:start="73:13" pos:end="73:31"><expr pos:start="73:13" pos:end="73:30"><name pos:start="73:13" pos:end="73:26"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:26">packet_loss</name></name> <operator pos:start="73:28" pos:end="73:28">=</operator> <literal type="number" pos:start="73:30" pos:end="73:30">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="77:70"><expr pos:start="75:13" pos:end="77:69"><call pos:start="75:13" pos:end="77:69"><name pos:start="75:13" pos:end="75:18">av_log</name><argument_list pos:start="75:19" pos:end="77:69">(<argument pos:start="75:20" pos:end="75:24"><expr pos:start="75:20" pos:end="75:24"><name pos:start="75:20" pos:end="75:24">avctx</name></expr></argument>, <argument pos:start="75:27" pos:end="75:38"><expr pos:start="75:27" pos:end="75:38"><name pos:start="75:27" pos:end="75:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:41" pos:end="75:78"><expr pos:start="75:41" pos:end="75:78"><literal type="string" pos:start="75:41" pos:end="75:78">"Packet loss detected! seq %x vs %x\n"</literal></expr></argument>,

                   <argument pos:start="77:20" pos:end="77:44"><expr pos:start="77:20" pos:end="77:44"><name pos:start="77:20" pos:end="77:44"><name pos:start="77:20" pos:end="77:20">s</name><operator pos:start="77:21" pos:end="77:22">-&gt;</operator><name pos:start="77:23" pos:end="77:44">packet_sequence_number</name></name></expr></argument>, <argument pos:start="77:47" pos:end="77:68"><expr pos:start="77:47" pos:end="77:68"><name pos:start="77:47" pos:end="77:68">packet_sequence_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:59"><expr pos:start="81:9" pos:end="81:58"><name pos:start="81:9" pos:end="81:33"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:33">packet_sequence_number</name></name> <operator pos:start="81:35" pos:end="81:35">=</operator> <name pos:start="81:37" pos:end="81:58">packet_sequence_number</name></expr>;</expr_stmt>



        <if_stmt pos:start="85:9" pos:end="119:9"><if pos:start="85:9" pos:end="113:9">if <condition pos:start="85:12" pos:end="85:36">(<expr pos:start="85:13" pos:end="85:35"><name pos:start="85:13" pos:end="85:31">num_bits_prev_frame</name> <operator pos:start="85:33" pos:end="85:33">&gt;</operator> <literal type="number" pos:start="85:35" pos:end="85:35">0</literal></expr>)</condition> <block pos:start="85:38" pos:end="113:9">{<block_content pos:start="87:13" pos:end="111:32">

            <decl_stmt pos:start="87:13" pos:end="87:77"><decl pos:start="87:13" pos:end="87:76"><type pos:start="87:13" pos:end="87:15"><name pos:start="87:13" pos:end="87:15">int</name></type> <name pos:start="87:17" pos:end="87:37">remaining_packet_bits</name> <init pos:start="87:39" pos:end="87:76">= <expr pos:start="87:41" pos:end="87:76"><name pos:start="87:41" pos:end="87:55"><name pos:start="87:41" pos:end="87:41">s</name><operator pos:start="87:42" pos:end="87:43">-&gt;</operator><name pos:start="87:44" pos:end="87:55">buf_bit_size</name></name> <operator pos:start="87:57" pos:end="87:57">-</operator> <call pos:start="87:59" pos:end="87:76"><name pos:start="87:59" pos:end="87:72">get_bits_count</name><argument_list pos:start="87:73" pos:end="87:76">(<argument pos:start="87:74" pos:end="87:75"><expr pos:start="87:74" pos:end="87:75"><name pos:start="87:74" pos:end="87:75">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="89:13" pos:end="95:13"><if pos:start="89:13" pos:end="95:13">if <condition pos:start="89:16" pos:end="89:61">(<expr pos:start="89:17" pos:end="89:60"><name pos:start="89:17" pos:end="89:35">num_bits_prev_frame</name> <operator pos:start="89:37" pos:end="89:38">&gt;=</operator> <name pos:start="89:40" pos:end="89:60">remaining_packet_bits</name></expr>)</condition> <block pos:start="89:63" pos:end="95:13">{<block_content pos:start="91:17" pos:end="93:35">

                <expr_stmt pos:start="91:17" pos:end="91:60"><expr pos:start="91:17" pos:end="91:59"><name pos:start="91:17" pos:end="91:35">num_bits_prev_frame</name> <operator pos:start="91:37" pos:end="91:37">=</operator> <name pos:start="91:39" pos:end="91:59">remaining_packet_bits</name></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:35"><expr pos:start="93:17" pos:end="93:34"><name pos:start="93:17" pos:end="93:30"><name pos:start="93:17" pos:end="93:17">s</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:30">packet_done</name></name> <operator pos:start="93:32" pos:end="93:32">=</operator> <literal type="number" pos:start="93:34" pos:end="93:34">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="99:13" pos:end="101:57">/* Append the previous frame data to the remaining data from the

             * previous packet to create a full frame. */</comment>

            <expr_stmt pos:start="103:13" pos:end="103:53"><expr pos:start="103:13" pos:end="103:52"><call pos:start="103:13" pos:end="103:52"><name pos:start="103:13" pos:end="103:21">save_bits</name><argument_list pos:start="103:22" pos:end="103:52">(<argument pos:start="103:23" pos:end="103:23"><expr pos:start="103:23" pos:end="103:23"><name pos:start="103:23" pos:end="103:23">s</name></expr></argument>, <argument pos:start="103:26" pos:end="103:27"><expr pos:start="103:26" pos:end="103:27"><name pos:start="103:26" pos:end="103:27">gb</name></expr></argument>, <argument pos:start="103:30" pos:end="103:48"><expr pos:start="103:30" pos:end="103:48"><name pos:start="103:30" pos:end="103:48">num_bits_prev_frame</name></expr></argument>, <argument pos:start="103:51" pos:end="103:51"><expr pos:start="103:51" pos:end="103:51"><literal type="number" pos:start="103:51" pos:end="103:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="107:13" pos:end="107:62">/* decode the cross packet frame if it is valid */</comment>

            <if_stmt pos:start="109:13" pos:end="111:32"><if pos:start="109:13" pos:end="111:32">if <condition pos:start="109:16" pos:end="109:79">(<expr pos:start="109:17" pos:end="109:78"><name pos:start="109:17" pos:end="109:35">num_bits_prev_frame</name> <operator pos:start="109:37" pos:end="109:37">&lt;</operator> <name pos:start="109:39" pos:end="109:59">remaining_packet_bits</name> <operator pos:start="109:61" pos:end="109:62">&amp;&amp;</operator> <operator pos:start="109:64" pos:end="109:64">!</operator><name pos:start="109:65" pos:end="109:78"><name pos:start="109:65" pos:end="109:65">s</name><operator pos:start="109:66" pos:end="109:67">-&gt;</operator><name pos:start="109:68" pos:end="109:78">packet_loss</name></name></expr>)</condition><block type="pseudo" pos:start="111:17" pos:end="111:32"><block_content pos:start="111:17" pos:end="111:32">

                <expr_stmt pos:start="111:17" pos:end="111:32"><expr pos:start="111:17" pos:end="111:31"><call pos:start="111:17" pos:end="111:31"><name pos:start="111:17" pos:end="111:28">decode_frame</name><argument_list pos:start="111:29" pos:end="111:31">(<argument pos:start="111:30" pos:end="111:30"><expr pos:start="111:30" pos:end="111:30"><name pos:start="111:30" pos:end="111:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="113:11" pos:end="119:9">else if <condition pos:start="113:19" pos:end="113:55">(<expr pos:start="113:20" pos:end="113:54"><name pos:start="113:20" pos:end="113:36"><name pos:start="113:20" pos:end="113:20">s</name><operator pos:start="113:21" pos:end="113:22">-&gt;</operator><name pos:start="113:23" pos:end="113:36">num_saved_bits</name></name> <operator pos:start="113:38" pos:end="113:38">-</operator> <name pos:start="113:40" pos:end="113:54"><name pos:start="113:40" pos:end="113:40">s</name><operator pos:start="113:41" pos:end="113:42">-&gt;</operator><name pos:start="113:43" pos:end="113:54">frame_offset</name></name></expr>)</condition> <block pos:start="113:57" pos:end="119:9">{<block_content pos:start="115:13" pos:end="117:57">

            <expr_stmt pos:start="115:13" pos:end="117:57"><expr pos:start="115:13" pos:end="117:56"><call pos:start="115:13" pos:end="117:56"><name pos:start="115:13" pos:end="115:19">av_dlog</name><argument_list pos:start="115:20" pos:end="117:56">(<argument pos:start="115:21" pos:end="115:25"><expr pos:start="115:21" pos:end="115:25"><name pos:start="115:21" pos:end="115:25">avctx</name></expr></argument>, <argument pos:start="115:28" pos:end="115:64"><expr pos:start="115:28" pos:end="115:64"><literal type="string" pos:start="115:28" pos:end="115:64">"ignoring %x previously saved bits\n"</literal></expr></argument>,

                    <argument pos:start="117:21" pos:end="117:55"><expr pos:start="117:21" pos:end="117:55"><name pos:start="117:21" pos:end="117:37"><name pos:start="117:21" pos:end="117:21">s</name><operator pos:start="117:22" pos:end="117:23">-&gt;</operator><name pos:start="117:24" pos:end="117:37">num_saved_bits</name></name> <operator pos:start="117:39" pos:end="117:39">-</operator> <name pos:start="117:41" pos:end="117:55"><name pos:start="117:41" pos:end="117:41">s</name><operator pos:start="117:42" pos:end="117:43">-&gt;</operator><name pos:start="117:44" pos:end="117:55">frame_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="123:9" pos:end="135:9"><if pos:start="123:9" pos:end="135:9">if <condition pos:start="123:12" pos:end="123:27">(<expr pos:start="123:13" pos:end="123:26"><name pos:start="123:13" pos:end="123:26"><name pos:start="123:13" pos:end="123:13">s</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:26">packet_loss</name></name></expr>)</condition> <block pos:start="123:29" pos:end="135:9">{<block_content pos:start="129:13" pos:end="133:64">

            <comment type="block" pos:start="125:13" pos:end="127:77">/* Reset number of saved bits so that the decoder does not start

             * to decode incomplete frames in the s-&gt;len_prefix == 0 case. */</comment>

            <expr_stmt pos:start="129:13" pos:end="129:34"><expr pos:start="129:13" pos:end="129:33"><name pos:start="129:13" pos:end="129:29"><name pos:start="129:13" pos:end="129:13">s</name><operator pos:start="129:14" pos:end="129:15">-&gt;</operator><name pos:start="129:16" pos:end="129:29">num_saved_bits</name></name> <operator pos:start="129:31" pos:end="129:31">=</operator> <literal type="number" pos:start="129:33" pos:end="129:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:34"><expr pos:start="131:13" pos:end="131:33"><name pos:start="131:13" pos:end="131:26"><name pos:start="131:13" pos:end="131:13">s</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:26">packet_loss</name></name>    <operator pos:start="131:31" pos:end="131:31">=</operator> <literal type="number" pos:start="131:33" pos:end="131:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:64"><expr pos:start="133:13" pos:end="133:63"><call pos:start="133:13" pos:end="133:63"><name pos:start="133:13" pos:end="133:25">init_put_bits</name><argument_list pos:start="133:26" pos:end="133:63">(<argument pos:start="133:27" pos:end="133:32"><expr pos:start="133:27" pos:end="133:32"><operator pos:start="133:27" pos:end="133:27">&amp;</operator><name pos:start="133:28" pos:end="133:32"><name pos:start="133:28" pos:end="133:28">s</name><operator pos:start="133:29" pos:end="133:30">-&gt;</operator><name pos:start="133:31" pos:end="133:32">pb</name></name></expr></argument>, <argument pos:start="133:35" pos:end="133:47"><expr pos:start="133:35" pos:end="133:47"><name pos:start="133:35" pos:end="133:47"><name pos:start="133:35" pos:end="133:35">s</name><operator pos:start="133:36" pos:end="133:37">-&gt;</operator><name pos:start="133:38" pos:end="133:47">frame_data</name></name></expr></argument>, <argument pos:start="133:50" pos:end="133:62"><expr pos:start="133:50" pos:end="133:62"><name pos:start="133:50" pos:end="133:62">MAX_FRAMESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



    </block_content>}</block></if> <else pos:start="139:7" pos:end="187:5">else <block pos:start="139:12" pos:end="187:5">{<block_content pos:start="141:9" pos:end="185:9">

        <decl_stmt pos:start="141:9" pos:end="141:23"><decl pos:start="141:9" pos:end="141:22"><type pos:start="141:9" pos:end="141:11"><name pos:start="141:9" pos:end="141:11">int</name></type> <name pos:start="141:13" pos:end="141:22">frame_size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="145:9" pos:end="145:68"><expr pos:start="145:9" pos:end="145:67"><name pos:start="145:9" pos:end="145:23"><name pos:start="145:9" pos:end="145:9">s</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:23">buf_bit_size</name></name> <operator pos:start="145:25" pos:end="145:25">=</operator> <operator pos:start="145:27" pos:end="145:27">(</operator><name pos:start="145:28" pos:end="145:38"><name pos:start="145:28" pos:end="145:32">avpkt</name><operator pos:start="145:33" pos:end="145:34">-&gt;</operator><name pos:start="145:35" pos:end="145:38">size</name></name> <operator pos:start="145:40" pos:end="145:40">-</operator> <name pos:start="145:42" pos:end="145:61"><name pos:start="145:42" pos:end="145:42">s</name><operator pos:start="145:43" pos:end="145:44">-&gt;</operator><name pos:start="145:45" pos:end="145:61">next_packet_start</name></name><operator pos:start="145:62" pos:end="145:62">)</operator> <operator pos:start="145:64" pos:end="145:65">&lt;&lt;</operator> <literal type="number" pos:start="145:67" pos:end="145:67">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:56"><expr pos:start="147:9" pos:end="147:55"><call pos:start="147:9" pos:end="147:55"><name pos:start="147:9" pos:end="147:21">init_get_bits</name><argument_list pos:start="147:22" pos:end="147:55">(<argument pos:start="147:23" pos:end="147:24"><expr pos:start="147:23" pos:end="147:24"><name pos:start="147:23" pos:end="147:24">gb</name></expr></argument>, <argument pos:start="147:27" pos:end="147:37"><expr pos:start="147:27" pos:end="147:37"><name pos:start="147:27" pos:end="147:37"><name pos:start="147:27" pos:end="147:31">avpkt</name><operator pos:start="147:32" pos:end="147:33">-&gt;</operator><name pos:start="147:34" pos:end="147:37">data</name></name></expr></argument>, <argument pos:start="147:40" pos:end="147:54"><expr pos:start="147:40" pos:end="147:54"><name pos:start="147:40" pos:end="147:54"><name pos:start="147:40" pos:end="147:40">s</name><operator pos:start="147:41" pos:end="147:42">-&gt;</operator><name pos:start="147:43" pos:end="147:54">buf_bit_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:40"><expr pos:start="149:9" pos:end="149:39"><call pos:start="149:9" pos:end="149:39"><name pos:start="149:9" pos:end="149:17">skip_bits</name><argument_list pos:start="149:18" pos:end="149:39">(<argument pos:start="149:19" pos:end="149:20"><expr pos:start="149:19" pos:end="149:20"><name pos:start="149:19" pos:end="149:20">gb</name></expr></argument>, <argument pos:start="149:23" pos:end="149:38"><expr pos:start="149:23" pos:end="149:38"><name pos:start="149:23" pos:end="149:38"><name pos:start="149:23" pos:end="149:23">s</name><operator pos:start="149:24" pos:end="149:25">-&gt;</operator><name pos:start="149:26" pos:end="149:38">packet_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="153:9" pos:end="185:9"><if pos:start="153:9" pos:end="163:9">if <condition pos:start="153:12" pos:end="157:48">(<expr pos:start="153:13" pos:end="157:47"><name pos:start="153:13" pos:end="153:25"><name pos:start="153:13" pos:end="153:13">s</name><operator pos:start="153:14" pos:end="153:15">-&gt;</operator><name pos:start="153:16" pos:end="153:25">len_prefix</name></name> <operator pos:start="153:27" pos:end="153:28">&amp;&amp;</operator> <call pos:start="153:30" pos:end="153:50"><name pos:start="153:30" pos:end="153:43">remaining_bits</name><argument_list pos:start="153:44" pos:end="153:50">(<argument pos:start="153:45" pos:end="153:45"><expr pos:start="153:45" pos:end="153:45"><name pos:start="153:45" pos:end="153:45">s</name></expr></argument>, <argument pos:start="153:48" pos:end="153:49"><expr pos:start="153:48" pos:end="153:49"><name pos:start="153:48" pos:end="153:49">gb</name></expr></argument>)</argument_list></call> <operator pos:start="153:52" pos:end="153:52">&gt;</operator> <name pos:start="153:54" pos:end="153:71"><name pos:start="153:54" pos:end="153:54">s</name><operator pos:start="153:55" pos:end="153:56">-&gt;</operator><name pos:start="153:57" pos:end="153:71">log2_frame_size</name></name> <operator pos:start="153:73" pos:end="153:74">&amp;&amp;</operator>

            <operator pos:start="155:13" pos:end="155:13">(</operator><name pos:start="155:14" pos:end="155:23">frame_size</name> <operator pos:start="155:25" pos:end="155:25">=</operator> <call pos:start="155:27" pos:end="155:59"><name pos:start="155:27" pos:end="155:35">show_bits</name><argument_list pos:start="155:36" pos:end="155:59">(<argument pos:start="155:37" pos:end="155:38"><expr pos:start="155:37" pos:end="155:38"><name pos:start="155:37" pos:end="155:38">gb</name></expr></argument>, <argument pos:start="155:41" pos:end="155:58"><expr pos:start="155:41" pos:end="155:58"><name pos:start="155:41" pos:end="155:58"><name pos:start="155:41" pos:end="155:41">s</name><operator pos:start="155:42" pos:end="155:43">-&gt;</operator><name pos:start="155:44" pos:end="155:58">log2_frame_size</name></name></expr></argument>)</argument_list></call><operator pos:start="155:60" pos:end="155:60">)</operator> <operator pos:start="155:62" pos:end="155:63">&amp;&amp;</operator>

            <name pos:start="157:13" pos:end="157:22">frame_size</name> <operator pos:start="157:24" pos:end="157:25">&lt;=</operator> <call pos:start="157:27" pos:end="157:47"><name pos:start="157:27" pos:end="157:40">remaining_bits</name><argument_list pos:start="157:41" pos:end="157:47">(<argument pos:start="157:42" pos:end="157:42"><expr pos:start="157:42" pos:end="157:42"><name pos:start="157:42" pos:end="157:42">s</name></expr></argument>, <argument pos:start="157:45" pos:end="157:46"><expr pos:start="157:45" pos:end="157:46"><name pos:start="157:45" pos:end="157:46">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="157:50" pos:end="163:9">{<block_content pos:start="159:13" pos:end="161:46">

            <expr_stmt pos:start="159:13" pos:end="159:44"><expr pos:start="159:13" pos:end="159:43"><call pos:start="159:13" pos:end="159:43"><name pos:start="159:13" pos:end="159:21">save_bits</name><argument_list pos:start="159:22" pos:end="159:43">(<argument pos:start="159:23" pos:end="159:23"><expr pos:start="159:23" pos:end="159:23"><name pos:start="159:23" pos:end="159:23">s</name></expr></argument>, <argument pos:start="159:26" pos:end="159:27"><expr pos:start="159:26" pos:end="159:27"><name pos:start="159:26" pos:end="159:27">gb</name></expr></argument>, <argument pos:start="159:30" pos:end="159:39"><expr pos:start="159:30" pos:end="159:39"><name pos:start="159:30" pos:end="159:39">frame_size</name></expr></argument>, <argument pos:start="159:42" pos:end="159:42"><expr pos:start="159:42" pos:end="159:42"><literal type="number" pos:start="159:42" pos:end="159:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:46"><expr pos:start="161:13" pos:end="161:45"><name pos:start="161:13" pos:end="161:26"><name pos:start="161:13" pos:end="161:13">s</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:26">packet_done</name></name> <operator pos:start="161:28" pos:end="161:28">=</operator> <operator pos:start="161:30" pos:end="161:30">!</operator><call pos:start="161:31" pos:end="161:45"><name pos:start="161:31" pos:end="161:42">decode_frame</name><argument_list pos:start="161:43" pos:end="161:45">(<argument pos:start="161:44" pos:end="161:44"><expr pos:start="161:44" pos:end="161:44"><name pos:start="161:44" pos:end="161:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="163:11" pos:end="181:9">else if <condition pos:start="163:19" pos:end="165:65">(<expr pos:start="163:20" pos:end="165:64"><operator pos:start="163:20" pos:end="163:20">!</operator><name pos:start="163:21" pos:end="163:33"><name pos:start="163:21" pos:end="163:21">s</name><operator pos:start="163:22" pos:end="163:23">-&gt;</operator><name pos:start="163:24" pos:end="163:33">len_prefix</name></name>

                   <operator pos:start="165:20" pos:end="165:21">&amp;&amp;</operator> <name pos:start="165:23" pos:end="165:39"><name pos:start="165:23" pos:end="165:23">s</name><operator pos:start="165:24" pos:end="165:25">-&gt;</operator><name pos:start="165:26" pos:end="165:39">num_saved_bits</name></name> <operator pos:start="165:41" pos:end="165:41">&gt;</operator> <call pos:start="165:43" pos:end="165:64"><name pos:start="165:43" pos:end="165:56">get_bits_count</name><argument_list pos:start="165:57" pos:end="165:64">(<argument pos:start="165:58" pos:end="165:63"><expr pos:start="165:58" pos:end="165:63"><operator pos:start="165:58" pos:end="165:58">&amp;</operator><name pos:start="165:59" pos:end="165:63"><name pos:start="165:59" pos:end="165:59">s</name><operator pos:start="165:60" pos:end="165:61">-&gt;</operator><name pos:start="165:62" pos:end="165:63">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="165:67" pos:end="181:9">{<block_content pos:start="179:13" pos:end="179:46">

            <comment type="block" pos:start="167:13" pos:end="177:43">/* when the frames do not have a length prefix, we don't know the

             * compressed length of the individual frames however, we know what

             * part of a new packet belongs to the previous frame therefore we

             * save the incoming packet first, then we append the "previous

             * frame" data from the next packet so that we get a buffer that

             * only contains full frames */</comment>

            <expr_stmt pos:start="179:13" pos:end="179:46"><expr pos:start="179:13" pos:end="179:45"><name pos:start="179:13" pos:end="179:26"><name pos:start="179:13" pos:end="179:13">s</name><operator pos:start="179:14" pos:end="179:15">-&gt;</operator><name pos:start="179:16" pos:end="179:26">packet_done</name></name> <operator pos:start="179:28" pos:end="179:28">=</operator> <operator pos:start="179:30" pos:end="179:30">!</operator><call pos:start="179:31" pos:end="179:45"><name pos:start="179:31" pos:end="179:42">decode_frame</name><argument_list pos:start="179:43" pos:end="179:45">(<argument pos:start="179:44" pos:end="179:44"><expr pos:start="179:44" pos:end="179:44"><name pos:start="179:44" pos:end="179:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="181:11" pos:end="185:9">else <block pos:start="181:16" pos:end="185:9">{<block_content pos:start="183:13" pos:end="183:31">

            <expr_stmt pos:start="183:13" pos:end="183:31"><expr pos:start="183:13" pos:end="183:30"><name pos:start="183:13" pos:end="183:26"><name pos:start="183:13" pos:end="183:13">s</name><operator pos:start="183:14" pos:end="183:15">-&gt;</operator><name pos:start="183:16" pos:end="183:26">packet_done</name></name> <operator pos:start="183:28" pos:end="183:28">=</operator> <literal type="number" pos:start="183:30" pos:end="183:30">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="191:5" pos:end="201:5"><if pos:start="191:5" pos:end="201:5">if <condition pos:start="191:8" pos:end="193:34">(<expr pos:start="191:9" pos:end="193:33"><name pos:start="191:9" pos:end="191:22"><name pos:start="191:9" pos:end="191:9">s</name><operator pos:start="191:10" pos:end="191:11">-&gt;</operator><name pos:start="191:12" pos:end="191:22">packet_done</name></name> <operator pos:start="191:24" pos:end="191:25">&amp;&amp;</operator> <operator pos:start="191:27" pos:end="191:27">!</operator><name pos:start="191:28" pos:end="191:41"><name pos:start="191:28" pos:end="191:28">s</name><operator pos:start="191:29" pos:end="191:30">-&gt;</operator><name pos:start="191:31" pos:end="191:41">packet_loss</name></name> <operator pos:start="191:43" pos:end="191:44">&amp;&amp;</operator>

        <call pos:start="193:9" pos:end="193:29"><name pos:start="193:9" pos:end="193:22">remaining_bits</name><argument_list pos:start="193:23" pos:end="193:29">(<argument pos:start="193:24" pos:end="193:24"><expr pos:start="193:24" pos:end="193:24"><name pos:start="193:24" pos:end="193:24">s</name></expr></argument>, <argument pos:start="193:27" pos:end="193:28"><expr pos:start="193:27" pos:end="193:28"><name pos:start="193:27" pos:end="193:28">gb</name></expr></argument>)</argument_list></call> <operator pos:start="193:31" pos:end="193:31">&gt;</operator> <literal type="number" pos:start="193:33" pos:end="193:33">0</literal></expr>)</condition> <block pos:start="193:36" pos:end="201:5">{<block_content pos:start="199:9" pos:end="199:51">

        <comment type="block" pos:start="195:9" pos:end="197:34">/* save the rest of the data so that it can be decoded

         * with the next packet */</comment>

        <expr_stmt pos:start="199:9" pos:end="199:51"><expr pos:start="199:9" pos:end="199:50"><call pos:start="199:9" pos:end="199:50"><name pos:start="199:9" pos:end="199:17">save_bits</name><argument_list pos:start="199:18" pos:end="199:50">(<argument pos:start="199:19" pos:end="199:19"><expr pos:start="199:19" pos:end="199:19"><name pos:start="199:19" pos:end="199:19">s</name></expr></argument>, <argument pos:start="199:22" pos:end="199:23"><expr pos:start="199:22" pos:end="199:23"><name pos:start="199:22" pos:end="199:23">gb</name></expr></argument>, <argument pos:start="199:26" pos:end="199:46"><expr pos:start="199:26" pos:end="199:46"><call pos:start="199:26" pos:end="199:46"><name pos:start="199:26" pos:end="199:39">remaining_bits</name><argument_list pos:start="199:40" pos:end="199:46">(<argument pos:start="199:41" pos:end="199:41"><expr pos:start="199:41" pos:end="199:41"><name pos:start="199:41" pos:end="199:41">s</name></expr></argument>, <argument pos:start="199:44" pos:end="199:45"><expr pos:start="199:44" pos:end="199:45"><name pos:start="199:44" pos:end="199:45">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="199:49" pos:end="199:49"><expr pos:start="199:49" pos:end="199:49"><literal type="number" pos:start="199:49" pos:end="199:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:32"><expr pos:start="205:5" pos:end="205:31"><operator pos:start="205:5" pos:end="205:5">*</operator><operator pos:start="205:6" pos:end="205:6">(</operator><name pos:start="205:7" pos:end="205:13">AVFrame</name> <operator pos:start="205:15" pos:end="205:15">*</operator><operator pos:start="205:16" pos:end="205:16">)</operator><name pos:start="205:17" pos:end="205:20">data</name> <operator pos:start="205:22" pos:end="205:22">=</operator> <name pos:start="205:24" pos:end="205:31"><name pos:start="205:24" pos:end="205:24">s</name><operator pos:start="205:25" pos:end="205:26">-&gt;</operator><name pos:start="205:27" pos:end="205:31">frame</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:47"><expr pos:start="207:5" pos:end="207:46"><operator pos:start="207:5" pos:end="207:5">*</operator><name pos:start="207:6" pos:end="207:18">got_frame_ptr</name>   <operator pos:start="207:22" pos:end="207:22">=</operator> <name pos:start="207:24" pos:end="207:42"><name pos:start="207:24" pos:end="207:24">s</name><operator pos:start="207:25" pos:end="207:26">-&gt;</operator><name pos:start="207:27" pos:end="207:31">frame</name><operator pos:start="207:32" pos:end="207:32">.</operator><name pos:start="207:33" pos:end="207:42">nb_samples</name></name> <operator pos:start="207:44" pos:end="207:44">&gt;</operator> <literal type="number" pos:start="207:46" pos:end="207:46">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:46"><expr pos:start="209:5" pos:end="209:45"><name pos:start="209:5" pos:end="209:20"><name pos:start="209:5" pos:end="209:5">s</name><operator pos:start="209:6" pos:end="209:7">-&gt;</operator><name pos:start="209:8" pos:end="209:20">packet_offset</name></name> <operator pos:start="209:22" pos:end="209:22">=</operator> <call pos:start="209:24" pos:end="209:41"><name pos:start="209:24" pos:end="209:37">get_bits_count</name><argument_list pos:start="209:38" pos:end="209:41">(<argument pos:start="209:39" pos:end="209:40"><expr pos:start="209:39" pos:end="209:40"><name pos:start="209:39" pos:end="209:40">gb</name></expr></argument>)</argument_list></call> <operator pos:start="209:43" pos:end="209:43">&amp;</operator> <literal type="number" pos:start="209:45" pos:end="209:45">7</literal></expr>;</expr_stmt>



    <return pos:start="213:5" pos:end="213:76">return <expr pos:start="213:12" pos:end="213:75"><ternary pos:start="213:12" pos:end="213:75"><condition pos:start="213:12" pos:end="213:29"><expr pos:start="213:12" pos:end="213:27"><operator pos:start="213:12" pos:end="213:12">(</operator><name pos:start="213:13" pos:end="213:26"><name pos:start="213:13" pos:end="213:13">s</name><operator pos:start="213:14" pos:end="213:15">-&gt;</operator><name pos:start="213:16" pos:end="213:26">packet_loss</name></name><operator pos:start="213:27" pos:end="213:27">)</operator></expr> ?</condition><then pos:start="213:31" pos:end="213:49"> <expr pos:start="213:31" pos:end="213:49"><name pos:start="213:31" pos:end="213:49">AVERROR_INVALIDDATA</name></expr> </then><else pos:start="213:51" pos:end="213:75">: <expr pos:start="213:53" pos:end="213:75"><call pos:start="213:53" pos:end="213:70"><name pos:start="213:53" pos:end="213:66">get_bits_count</name><argument_list pos:start="213:67" pos:end="213:70">(<argument pos:start="213:68" pos:end="213:69"><expr pos:start="213:68" pos:end="213:69"><name pos:start="213:68" pos:end="213:69">gb</name></expr></argument>)</argument_list></call> <operator pos:start="213:72" pos:end="213:73">&gt;&gt;</operator> <literal type="number" pos:start="213:75" pos:end="213:75">3</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
