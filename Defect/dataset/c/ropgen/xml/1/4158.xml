<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4158.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_block</name><parameter_list pos:start="1:24" pos:end="3:89">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:42">MJpegDecodeContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:54">DCTELEM</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">block</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:37"><decl pos:start="3:25" pos:end="3:37"><type pos:start="3:25" pos:end="3:37"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:37">component</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:51"><decl pos:start="3:40" pos:end="3:51"><type pos:start="3:40" pos:end="3:51"><name pos:start="3:40" pos:end="3:42">int</name></type> <name pos:start="3:44" pos:end="3:51">dc_index</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:65"><decl pos:start="3:54" pos:end="3:65"><type pos:start="3:54" pos:end="3:65"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:65">ac_index</name></decl></parameter>, <parameter pos:start="3:68" pos:end="3:88"><decl pos:start="3:68" pos:end="3:88"><type pos:start="3:68" pos:end="3:88"><name pos:start="3:68" pos:end="3:74">int16_t</name> <modifier pos:start="3:76" pos:end="3:76">*</modifier></type><name pos:start="3:77" pos:end="3:88">quant_matrix</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="109:1">{<block_content pos:start="7:5" pos:end="107:13">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">code</name></decl>, <decl pos:start="7:15" pos:end="7:15"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:15">i</name></decl>, <decl pos:start="7:18" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:18">j</name></decl>, <decl pos:start="7:21" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:21" pos:end="7:25">level</name></decl>, <decl pos:start="7:28" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:28" pos:end="7:30">val</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:17">/* DC coef */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:39"><expr pos:start="13:5" pos:end="13:38"><name pos:start="13:5" pos:end="13:7">val</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:38"><name pos:start="13:11" pos:end="13:25">mjpeg_decode_dc</name><argument_list pos:start="13:26" pos:end="13:38">(<argument pos:start="13:27" pos:end="13:27"><expr pos:start="13:27" pos:end="13:27"><name pos:start="13:27" pos:end="13:27">s</name></expr></argument>, <argument pos:start="13:30" pos:end="13:37"><expr pos:start="13:30" pos:end="13:37"><name pos:start="13:30" pos:end="13:37">dc_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:22">(<expr pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:11">val</name> <operator pos:start="15:13" pos:end="15:14">==</operator> <literal type="number" pos:start="15:16" pos:end="15:21">0xffff</literal></expr>)</condition> <block pos:start="15:24" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:18">

        <expr_stmt pos:start="17:9" pos:end="17:53"><expr pos:start="17:9" pos:end="17:52"><call pos:start="17:9" pos:end="17:52"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:52">(<argument pos:start="17:16" pos:end="17:23"><expr pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:16">s</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:23">avctx</name></name></expr></argument>, <argument pos:start="17:26" pos:end="17:37"><expr pos:start="17:26" pos:end="17:37"><name pos:start="17:26" pos:end="17:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:40" pos:end="17:51"><expr pos:start="17:40" pos:end="17:51"><literal type="string" pos:start="17:40" pos:end="17:51">"error dc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:56"><expr pos:start="23:5" pos:end="23:55"><name pos:start="23:5" pos:end="23:7">val</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <name pos:start="23:11" pos:end="23:13">val</name> <operator pos:start="23:15" pos:end="23:15">*</operator> <name pos:start="23:17" pos:end="23:31"><name pos:start="23:17" pos:end="23:28">quant_matrix</name><index pos:start="23:29" pos:end="23:31">[<expr pos:start="23:30" pos:end="23:30"><literal type="number" pos:start="23:30" pos:end="23:30">0</literal></expr>]</index></name> <operator pos:start="23:33" pos:end="23:33">+</operator> <name pos:start="23:35" pos:end="23:55"><name pos:start="23:35" pos:end="23:35">s</name><operator pos:start="23:36" pos:end="23:37">-&gt;</operator><name pos:start="23:38" pos:end="23:44">last_dc</name><index pos:start="23:45" pos:end="23:55">[<expr pos:start="23:46" pos:end="23:54"><name pos:start="23:46" pos:end="23:54">component</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:32"><expr pos:start="25:5" pos:end="25:31"><name pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:14">last_dc</name><index pos:start="25:15" pos:end="25:25">[<expr pos:start="25:16" pos:end="25:24"><name pos:start="25:16" pos:end="25:24">component</name></expr>]</index></name> <operator pos:start="25:27" pos:end="25:27">=</operator> <name pos:start="25:29" pos:end="25:31">val</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:19"><expr pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:9">block</name><index pos:start="27:10" pos:end="27:12">[<expr pos:start="27:11" pos:end="27:11"><literal type="number" pos:start="27:11" pos:end="27:11">0</literal></expr>]</index></name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:18">val</name></expr>;</expr_stmt>

    <comment type="block" pos:start="29:5" pos:end="29:18">/* AC coefs */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:10"><expr pos:start="31:5" pos:end="31:9"><name pos:start="31:5" pos:end="31:5">i</name> <operator pos:start="31:7" pos:end="31:7">=</operator> <literal type="number" pos:start="31:9" pos:end="31:9">0</literal></expr>;</expr_stmt>

    <block pos:start="33:5" pos:end="103:29">{<block_content pos:start="33:6" pos:end="103:28"><macro pos:start="33:6" pos:end="33:28"><name pos:start="33:6" pos:end="33:16">OPEN_READER</name><argument_list pos:start="33:17" pos:end="33:28">(<argument pos:start="33:18" pos:end="33:19">re</argument>, <argument pos:start="33:22" pos:end="33:27">&amp;s-&gt;gb</argument>)</argument_list></macro>

    <for pos:start="35:5" pos:end="101:5">for<control pos:start="35:8" pos:end="35:11">(<init pos:start="35:9" pos:end="35:9">;</init><condition pos:start="35:10" pos:end="35:10">;</condition><incr/>)</control> <block pos:start="35:13" pos:end="101:5">{<block_content pos:start="37:9" pos:end="99:9">

        <expr_stmt pos:start="37:9" pos:end="37:33"><expr pos:start="37:9" pos:end="37:32"><call pos:start="37:9" pos:end="37:32"><name pos:start="37:9" pos:end="37:20">UPDATE_CACHE</name><argument_list pos:start="37:21" pos:end="37:32">(<argument pos:start="37:22" pos:end="37:23"><expr pos:start="37:22" pos:end="37:23"><name pos:start="37:22" pos:end="37:23">re</name></expr></argument>, <argument pos:start="37:26" pos:end="37:31"><expr pos:start="37:26" pos:end="37:31"><operator pos:start="37:26" pos:end="37:26">&amp;</operator><name pos:start="37:27" pos:end="37:31"><name pos:start="37:27" pos:end="37:27">s</name><operator pos:start="37:28" pos:end="37:29">-&gt;</operator><name pos:start="37:30" pos:end="37:31">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro pos:start="39:9" pos:end="39:67"><name pos:start="39:9" pos:end="39:15">GET_VLC</name><argument_list pos:start="39:16" pos:end="39:67">(<argument pos:start="39:17" pos:end="39:20">code</argument>, <argument pos:start="39:23" pos:end="39:24">re</argument>, <argument pos:start="39:27" pos:end="39:32">&amp;s-&gt;gb</argument>, <argument pos:start="39:35" pos:end="39:60">s-&gt;vlcs[<literal type="number" pos:start="39:43" pos:end="39:43">1</literal>][ac_index].table</argument>, <argument pos:start="39:63" pos:end="39:63"><literal type="number" pos:start="39:63" pos:end="39:63">9</literal></argument>, <argument pos:start="39:66" pos:end="39:66"><literal type="number" pos:start="39:66" pos:end="39:66">2</literal></argument>)</argument_list></macro>



        <comment type="block" pos:start="43:9" pos:end="43:17">/* EOB */</comment>

        <if_stmt pos:start="45:9" pos:end="47:18"><if pos:start="45:9" pos:end="47:18">if <condition pos:start="45:12" pos:end="45:25">(<expr pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:16">code</name> <operator pos:start="45:18" pos:end="45:19">==</operator> <literal type="number" pos:start="45:21" pos:end="45:24">0x10</literal></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:18"><block_content pos:start="47:13" pos:end="47:18">

            <break pos:start="47:13" pos:end="47:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:35"><expr pos:start="49:9" pos:end="49:34"><name pos:start="49:9" pos:end="49:9">i</name> <operator pos:start="49:11" pos:end="49:12">+=</operator> <operator pos:start="49:14" pos:end="49:14">(</operator><operator pos:start="49:15" pos:end="49:15">(</operator><name pos:start="49:16" pos:end="49:23">unsigned</name><operator pos:start="49:24" pos:end="49:24">)</operator><name pos:start="49:25" pos:end="49:28">code</name><operator pos:start="49:29" pos:end="49:29">)</operator> <operator pos:start="49:31" pos:end="49:32">&gt;&gt;</operator> <literal type="number" pos:start="49:34" pos:end="49:34">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:24"><expr pos:start="51:13" pos:end="51:23"><name pos:start="51:13" pos:end="51:16">code</name> <operator pos:start="51:18" pos:end="51:19">&amp;=</operator> <literal type="number" pos:start="51:21" pos:end="51:23">0xf</literal></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="99:9"><if pos:start="53:9" pos:end="99:9">if<condition pos:start="53:11" pos:end="53:16">(<expr pos:start="53:12" pos:end="53:15"><name pos:start="53:12" pos:end="53:15">code</name></expr>)</condition><block pos:start="53:17" pos:end="99:9">{<block_content pos:start="55:13" pos:end="97:47">

            <if_stmt pos:start="55:13" pos:end="59:13"><if pos:start="55:13" pos:end="59:13">if<condition pos:start="55:15" pos:end="55:42">(<expr pos:start="55:16" pos:end="55:41"><name pos:start="55:16" pos:end="55:19">code</name> <operator pos:start="55:21" pos:end="55:21">&gt;</operator> <name pos:start="55:23" pos:end="55:36">MIN_CACHE_BITS</name> <operator pos:start="55:38" pos:end="55:38">-</operator> <literal type="number" pos:start="55:40" pos:end="55:41">16</literal></expr>)</condition><block pos:start="55:43" pos:end="59:13">{<block_content pos:start="57:17" pos:end="57:40">

                <macro pos:start="57:17" pos:end="57:40"><name pos:start="57:17" pos:end="57:28">UPDATE_CACHE</name><argument_list pos:start="57:29" pos:end="57:40">(<argument pos:start="57:30" pos:end="57:31">re</argument>, <argument pos:start="57:34" pos:end="57:39">&amp;s-&gt;gb</argument>)</argument_list></macro>

            </block_content>}</block></if></if_stmt>

            <block pos:start="61:13" pos:end="69:13">{<block_content pos:start="63:17" pos:end="67:69">

                <decl_stmt pos:start="63:17" pos:end="63:47"><decl pos:start="63:17" pos:end="63:46"><type pos:start="63:17" pos:end="63:19"><name pos:start="63:17" pos:end="63:19">int</name></type> <name pos:start="63:21" pos:end="63:25">cache</name><init pos:start="63:26" pos:end="63:46">=<expr pos:start="63:27" pos:end="63:46"><call pos:start="63:27" pos:end="63:46"><name pos:start="63:27" pos:end="63:35">GET_CACHE</name><argument_list pos:start="63:36" pos:end="63:46">(<argument pos:start="63:37" pos:end="63:38"><expr pos:start="63:37" pos:end="63:38"><name pos:start="63:37" pos:end="63:38">re</name></expr></argument>,<argument pos:start="63:40" pos:end="63:45"><expr pos:start="63:40" pos:end="63:45"><operator pos:start="63:40" pos:end="63:40">&amp;</operator><name pos:start="63:41" pos:end="63:45"><name pos:start="63:41" pos:end="63:41">s</name><operator pos:start="63:42" pos:end="63:43">-&gt;</operator><name pos:start="63:44" pos:end="63:45">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="65:17" pos:end="65:38"><decl pos:start="65:17" pos:end="65:37"><type pos:start="65:17" pos:end="65:19"><name pos:start="65:17" pos:end="65:19">int</name></type> <name pos:start="65:21" pos:end="65:24">sign</name><init pos:start="65:25" pos:end="65:37">=<expr pos:start="65:26" pos:end="65:37"><operator pos:start="65:26" pos:end="65:26">(</operator><operator pos:start="65:27" pos:end="65:27">~</operator><name pos:start="65:28" pos:end="65:32">cache</name><operator pos:start="65:33" pos:end="65:33">)</operator><operator pos:start="65:34" pos:end="65:35">&gt;&gt;</operator><literal type="number" pos:start="65:36" pos:end="65:37">31</literal></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:69"><expr pos:start="67:17" pos:end="67:68"><name pos:start="67:17" pos:end="67:21">level</name> <operator pos:start="67:23" pos:end="67:23">=</operator> <operator pos:start="67:25" pos:end="67:25">(</operator><call pos:start="67:26" pos:end="67:53"><name pos:start="67:26" pos:end="67:34">NEG_USR32</name><argument_list pos:start="67:35" pos:end="67:53">(<argument pos:start="67:36" pos:end="67:47"><expr pos:start="67:36" pos:end="67:47"><name pos:start="67:36" pos:end="67:39">sign</name> <operator pos:start="67:41" pos:end="67:41">^</operator> <name pos:start="67:43" pos:end="67:47">cache</name></expr></argument>,<argument pos:start="67:49" pos:end="67:52"><expr pos:start="67:49" pos:end="67:52"><name pos:start="67:49" pos:end="67:52">code</name></expr></argument>)</argument_list></call> <operator pos:start="67:55" pos:end="67:55">^</operator> <name pos:start="67:57" pos:end="67:60">sign</name><operator pos:start="67:61" pos:end="67:61">)</operator> <operator pos:start="67:63" pos:end="67:63">-</operator> <name pos:start="67:65" pos:end="67:68">sign</name></expr>;</expr_stmt>

            </block_content>}</block>



            <macro pos:start="73:13" pos:end="73:44"><name pos:start="73:13" pos:end="73:26">LAST_SKIP_BITS</name><argument_list pos:start="73:27" pos:end="73:44">(<argument pos:start="73:28" pos:end="73:29">re</argument>, <argument pos:start="73:32" pos:end="73:37">&amp;s-&gt;gb</argument>, <argument pos:start="73:40" pos:end="73:43">code</argument>)</argument_list></macro>



            <if_stmt pos:start="77:13" pos:end="93:13"><if pos:start="77:13" pos:end="93:13">if <condition pos:start="77:16" pos:end="77:24">(<expr pos:start="77:17" pos:end="77:23"><name pos:start="77:17" pos:end="77:17">i</name> <operator pos:start="77:19" pos:end="77:20">&gt;=</operator> <literal type="number" pos:start="77:22" pos:end="77:23">63</literal></expr>)</condition> <block pos:start="77:26" pos:end="93:13">{<block_content pos:start="79:17" pos:end="91:26">

                <if_stmt pos:start="79:17" pos:end="87:17"><if pos:start="79:17" pos:end="87:17">if<condition pos:start="79:19" pos:end="79:27">(<expr pos:start="79:20" pos:end="79:26"><name pos:start="79:20" pos:end="79:20">i</name> <operator pos:start="79:22" pos:end="79:23">==</operator> <literal type="number" pos:start="79:25" pos:end="79:26">63</literal></expr>)</condition><block pos:start="79:28" pos:end="87:17">{<block_content pos:start="81:21" pos:end="85:26">

                    <expr_stmt pos:start="81:21" pos:end="81:52"><expr pos:start="81:21" pos:end="81:51"><name pos:start="81:21" pos:end="81:21">j</name> <operator pos:start="81:23" pos:end="81:23">=</operator> <name pos:start="81:25" pos:end="81:51"><name pos:start="81:25" pos:end="81:25">s</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:36">scantable</name><operator pos:start="81:37" pos:end="81:37">.</operator><name pos:start="81:38" pos:end="81:47">permutated</name><index pos:start="81:48" pos:end="81:51">[<expr pos:start="81:49" pos:end="81:50"><literal type="number" pos:start="81:49" pos:end="81:50">63</literal></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="83:21" pos:end="83:55"><expr pos:start="83:21" pos:end="83:54"><name pos:start="83:21" pos:end="83:28"><name pos:start="83:21" pos:end="83:25">block</name><index pos:start="83:26" pos:end="83:28">[<expr pos:start="83:27" pos:end="83:27"><name pos:start="83:27" pos:end="83:27">j</name></expr>]</index></name> <operator pos:start="83:30" pos:end="83:30">=</operator> <name pos:start="83:32" pos:end="83:36">level</name> <operator pos:start="83:38" pos:end="83:38">*</operator> <name pos:start="83:40" pos:end="83:54"><name pos:start="83:40" pos:end="83:51">quant_matrix</name><index pos:start="83:52" pos:end="83:54">[<expr pos:start="83:53" pos:end="83:53"><name pos:start="83:53" pos:end="83:53">j</name></expr>]</index></name></expr>;</expr_stmt>

                    <break pos:start="85:21" pos:end="85:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="89:17" pos:end="89:71"><expr pos:start="89:17" pos:end="89:70"><call pos:start="89:17" pos:end="89:70"><name pos:start="89:17" pos:end="89:22">av_log</name><argument_list pos:start="89:23" pos:end="89:70">(<argument pos:start="89:24" pos:end="89:31"><expr pos:start="89:24" pos:end="89:31"><name pos:start="89:24" pos:end="89:31"><name pos:start="89:24" pos:end="89:24">s</name><operator pos:start="89:25" pos:end="89:26">-&gt;</operator><name pos:start="89:27" pos:end="89:31">avctx</name></name></expr></argument>, <argument pos:start="89:34" pos:end="89:45"><expr pos:start="89:34" pos:end="89:45"><name pos:start="89:34" pos:end="89:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="89:48" pos:end="89:66"><expr pos:start="89:48" pos:end="89:66"><literal type="string" pos:start="89:48" pos:end="89:66">"error count: %d\n"</literal></expr></argument>, <argument pos:start="89:69" pos:end="89:69"><expr pos:start="89:69" pos:end="89:69"><name pos:start="89:69" pos:end="89:69">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="91:17" pos:end="91:26">return <expr pos:start="91:24" pos:end="91:25"><operator pos:start="91:24" pos:end="91:24">-</operator><literal type="number" pos:start="91:25" pos:end="91:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:43"><expr pos:start="95:13" pos:end="95:42"><name pos:start="95:13" pos:end="95:13">j</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <name pos:start="95:17" pos:end="95:42"><name pos:start="95:17" pos:end="95:17">s</name><operator pos:start="95:18" pos:end="95:19">-&gt;</operator><name pos:start="95:20" pos:end="95:28">scantable</name><operator pos:start="95:29" pos:end="95:29">.</operator><name pos:start="95:30" pos:end="95:39">permutated</name><index pos:start="95:40" pos:end="95:42">[<expr pos:start="95:41" pos:end="95:41"><name pos:start="95:41" pos:end="95:41">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:47"><expr pos:start="97:13" pos:end="97:46"><name pos:start="97:13" pos:end="97:20"><name pos:start="97:13" pos:end="97:17">block</name><index pos:start="97:18" pos:end="97:20">[<expr pos:start="97:19" pos:end="97:19"><name pos:start="97:19" pos:end="97:19">j</name></expr>]</index></name> <operator pos:start="97:22" pos:end="97:22">=</operator> <name pos:start="97:24" pos:end="97:28">level</name> <operator pos:start="97:30" pos:end="97:30">*</operator> <name pos:start="97:32" pos:end="97:46"><name pos:start="97:32" pos:end="97:43">quant_matrix</name><index pos:start="97:44" pos:end="97:46">[<expr pos:start="97:45" pos:end="97:45"><name pos:start="97:45" pos:end="97:45">j</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <macro pos:start="103:5" pos:end="103:28"><name pos:start="103:5" pos:end="103:16">CLOSE_READER</name><argument_list pos:start="103:17" pos:end="103:28">(<argument pos:start="103:18" pos:end="103:19">re</argument>, <argument pos:start="103:22" pos:end="103:27">&amp;s-&gt;gb</argument>)</argument_list></macro></block_content>}</block>



    <return pos:start="107:5" pos:end="107:13">return <expr pos:start="107:12" pos:end="107:12"><literal type="number" pos:start="107:12" pos:end="107:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
