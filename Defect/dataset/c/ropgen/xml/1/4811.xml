<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4811.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:33">usb_ep_combine_input_packets</name><parameter_list pos:start="1:34" pos:end="1:50">(<parameter pos:start="1:35" pos:end="1:49"><decl pos:start="1:35" pos:end="1:49"><type pos:start="1:35" pos:end="1:47"><name pos:start="1:35" pos:end="1:45">USBEndpoint</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">ep</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="127:1">{<block_content pos:start="5:5" pos:end="125:5">

    <decl_stmt pos:start="5:5" pos:end="5:57"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">USBPacket</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">p</name></decl>, <decl pos:start="5:19" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:15"><modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">u</name></decl>, <decl pos:start="5:23" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:15"><modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:27">next</name></decl>, <decl pos:start="5:30" pos:end="5:41"><type ref="prev" pos:start="5:5" pos:end="5:15"><modifier pos:start="5:30" pos:end="5:30">*</modifier></type><name pos:start="5:31" pos:end="5:34">prev</name> <init pos:start="5:36" pos:end="5:41">= <expr pos:start="5:38" pos:end="5:41"><name pos:start="5:38" pos:end="5:41">NULL</name></expr></init></decl>, <decl pos:start="5:44" pos:end="5:56"><type ref="prev" pos:start="5:5" pos:end="5:15"><modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:49">first</name> <init pos:start="5:51" pos:end="5:56">= <expr pos:start="5:53" pos:end="5:56"><name pos:start="5:53" pos:end="5:56">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">USBPort</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:17">port</name> <init pos:start="7:19" pos:end="7:33">= <expr pos:start="7:21" pos:end="7:33"><name pos:start="7:21" pos:end="7:33"><name pos:start="7:21" pos:end="7:22">ep</name><operator pos:start="7:23" pos:end="7:24">-&gt;</operator><name pos:start="7:25" pos:end="7:27">dev</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:33">port</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:25"><expr pos:start="13:5" pos:end="13:24"><call pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:24">(<argument pos:start="13:12" pos:end="13:23"><expr pos:start="13:12" pos:end="13:23"><name pos:start="13:12" pos:end="13:23"><name pos:start="13:12" pos:end="13:13">ep</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:23">pipeline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:36"><expr pos:start="15:5" pos:end="15:35"><call pos:start="15:5" pos:end="15:35"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:35">(<argument pos:start="15:12" pos:end="15:34"><expr pos:start="15:12" pos:end="15:34"><name pos:start="15:12" pos:end="15:18"><name pos:start="15:12" pos:end="15:13">ep</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:18">pid</name></name> <operator pos:start="15:20" pos:end="15:21">==</operator> <name pos:start="15:23" pos:end="15:34">USB_TOKEN_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="19:5" pos:end="19:51"><name pos:start="19:5" pos:end="19:23">QTAILQ_FOREACH_SAFE</name><argument_list pos:start="19:24" pos:end="19:51">(<argument pos:start="19:25" pos:end="19:25">p</argument>, <argument pos:start="19:28" pos:end="19:37">&amp;ep-&gt;queue</argument>, <argument pos:start="19:40" pos:end="19:44">queue</argument>, <argument pos:start="19:47" pos:end="19:50">next</argument>)</argument_list></macro> <block pos:start="19:53" pos:end="125:5">{<block_content pos:start="23:9" pos:end="123:9">

        <comment type="block" pos:start="21:9" pos:end="21:39">/* Empty the queue on a halt */</comment>

        <if_stmt pos:start="23:9" pos:end="31:9"><if pos:start="23:9" pos:end="31:9">if <condition pos:start="23:12" pos:end="23:23">(<expr pos:start="23:13" pos:end="23:22"><name pos:start="23:13" pos:end="23:22"><name pos:start="23:13" pos:end="23:14">ep</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:22">halted</name></name></expr>)</condition> <block pos:start="23:25" pos:end="31:9">{<block_content pos:start="25:13" pos:end="29:21">

            <expr_stmt pos:start="25:13" pos:end="25:50"><expr pos:start="25:13" pos:end="25:49"><name pos:start="25:13" pos:end="25:21"><name pos:start="25:13" pos:end="25:13">p</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:21">result</name></name> <operator pos:start="25:23" pos:end="25:23">=</operator> <name pos:start="25:25" pos:end="25:49">USB_RET_REMOVE_FROM_QUEUE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:41"><expr pos:start="27:13" pos:end="27:40"><call pos:start="27:13" pos:end="27:40"><name pos:start="27:13" pos:end="27:31"><name pos:start="27:13" pos:end="27:16">port</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:21">ops</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:31">complete</name></name><argument_list pos:start="27:32" pos:end="27:40">(<argument pos:start="27:33" pos:end="27:36"><expr pos:start="27:33" pos:end="27:36"><name pos:start="27:33" pos:end="27:36">port</name></expr></argument>, <argument pos:start="27:39" pos:end="27:39"><expr pos:start="27:39" pos:end="27:39"><name pos:start="27:39" pos:end="27:39">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="29:13" pos:end="29:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="35:9" pos:end="35:58">/* Skip packets already submitted to the device */</comment>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:41">(<expr pos:start="37:13" pos:end="37:40"><name pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:13">p</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:20">state</name></name> <operator pos:start="37:22" pos:end="37:23">==</operator> <name pos:start="37:25" pos:end="37:40">USB_PACKET_ASYNC</name></expr>)</condition> <block pos:start="37:43" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:21">

            <expr_stmt pos:start="39:13" pos:end="39:21"><expr pos:start="39:13" pos:end="39:20"><name pos:start="39:13" pos:end="39:16">prev</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <name pos:start="39:20" pos:end="39:20">p</name></expr>;</expr_stmt>

            <continue pos:start="41:13" pos:end="41:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:53"><expr pos:start="45:9" pos:end="45:52"><call pos:start="45:9" pos:end="45:52"><name pos:start="45:9" pos:end="45:30">usb_packet_check_state</name><argument_list pos:start="45:31" pos:end="45:52">(<argument pos:start="45:32" pos:end="45:32"><expr pos:start="45:32" pos:end="45:32"><name pos:start="45:32" pos:end="45:32">p</name></expr></argument>, <argument pos:start="45:35" pos:end="45:51"><expr pos:start="45:35" pos:end="45:51"><name pos:start="45:35" pos:end="45:51">USB_PACKET_QUEUED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="49:9" pos:end="57:11">/*

         * If the previous (combined) packet has the short_not_ok flag set

         * stop, as we must not submit packets to the device after a transfer

         * ending with short_not_ok packet.

         */</comment>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:39">(<expr pos:start="59:13" pos:end="59:38"><name pos:start="59:13" pos:end="59:16">prev</name> <operator pos:start="59:18" pos:end="59:19">&amp;&amp;</operator> <name pos:start="59:21" pos:end="59:38"><name pos:start="59:21" pos:end="59:24">prev</name><operator pos:start="59:25" pos:end="59:26">-&gt;</operator><name pos:start="59:27" pos:end="59:38">short_not_ok</name></name></expr>)</condition> <block pos:start="59:41" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:18">

            <break pos:start="61:13" pos:end="61:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="67:9" pos:end="91:9"><if pos:start="67:9" pos:end="87:9">if <condition pos:start="67:12" pos:end="67:18">(<expr pos:start="67:13" pos:end="67:17"><name pos:start="67:13" pos:end="67:17">first</name></expr>)</condition> <block pos:start="67:20" pos:end="87:9">{<block_content pos:start="69:13" pos:end="85:56">

            <if_stmt pos:start="69:13" pos:end="83:13"><if pos:start="69:13" pos:end="83:13">if <condition pos:start="69:16" pos:end="69:40">(<expr pos:start="69:17" pos:end="69:39"><name pos:start="69:17" pos:end="69:31"><name pos:start="69:17" pos:end="69:21">first</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:31">combined</name></name> <operator pos:start="69:33" pos:end="69:34">==</operator> <name pos:start="69:36" pos:end="69:39">NULL</name></expr>)</condition> <block pos:start="69:42" pos:end="83:13">{<block_content pos:start="71:17" pos:end="81:57">

                <decl_stmt pos:start="71:17" pos:end="71:75"><decl pos:start="71:17" pos:end="71:74"><type pos:start="71:17" pos:end="71:35"><name pos:start="71:17" pos:end="71:33">USBCombinedPacket</name> <modifier pos:start="71:35" pos:end="71:35">*</modifier></type><name pos:start="71:36" pos:end="71:43">combined</name> <init pos:start="71:45" pos:end="71:74">= <expr pos:start="71:47" pos:end="71:74"><call pos:start="71:47" pos:end="71:74"><name pos:start="71:47" pos:end="71:52">g_new0</name><argument_list pos:start="71:53" pos:end="71:74">(<argument pos:start="71:54" pos:end="71:70"><expr pos:start="71:54" pos:end="71:70"><name pos:start="71:54" pos:end="71:70">USBCombinedPacket</name></expr></argument>, <argument pos:start="71:73" pos:end="71:73"><expr pos:start="71:73" pos:end="71:73"><literal type="number" pos:start="71:73" pos:end="71:73">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="75:17" pos:end="75:40"><expr pos:start="75:17" pos:end="75:39"><name pos:start="75:17" pos:end="75:31"><name pos:start="75:17" pos:end="75:24">combined</name><operator pos:start="75:25" pos:end="75:26">-&gt;</operator><name pos:start="75:27" pos:end="75:31">first</name></name> <operator pos:start="75:33" pos:end="75:33">=</operator> <name pos:start="75:35" pos:end="75:39">first</name></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:48"><expr pos:start="77:17" pos:end="77:47"><call pos:start="77:17" pos:end="77:47"><name pos:start="77:17" pos:end="77:27">QTAILQ_INIT</name><argument_list pos:start="77:28" pos:end="77:47">(<argument pos:start="77:29" pos:end="77:46"><expr pos:start="77:29" pos:end="77:46"><operator pos:start="77:29" pos:end="77:29">&amp;</operator><name pos:start="77:30" pos:end="77:46"><name pos:start="77:30" pos:end="77:37">combined</name><operator pos:start="77:38" pos:end="77:39">-&gt;</operator><name pos:start="77:40" pos:end="77:46">packets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="79:17" pos:end="79:51"><expr pos:start="79:17" pos:end="79:50"><call pos:start="79:17" pos:end="79:50"><name pos:start="79:17" pos:end="79:31">qemu_iovec_init</name><argument_list pos:start="79:32" pos:end="79:50">(<argument pos:start="79:33" pos:end="79:46"><expr pos:start="79:33" pos:end="79:46"><operator pos:start="79:33" pos:end="79:33">&amp;</operator><name pos:start="79:34" pos:end="79:46"><name pos:start="79:34" pos:end="79:41">combined</name><operator pos:start="79:42" pos:end="79:43">-&gt;</operator><name pos:start="79:44" pos:end="79:46">iov</name></name></expr></argument>, <argument pos:start="79:49" pos:end="79:49"><expr pos:start="79:49" pos:end="79:49"><literal type="number" pos:start="79:49" pos:end="79:49">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:57"><expr pos:start="81:17" pos:end="81:56"><call pos:start="81:17" pos:end="81:56"><name pos:start="81:17" pos:end="81:39">usb_combined_packet_add</name><argument_list pos:start="81:40" pos:end="81:56">(<argument pos:start="81:41" pos:end="81:48"><expr pos:start="81:41" pos:end="81:48"><name pos:start="81:41" pos:end="81:48">combined</name></expr></argument>, <argument pos:start="81:51" pos:end="81:55"><expr pos:start="81:51" pos:end="81:55"><name pos:start="81:51" pos:end="81:55">first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:56"><expr pos:start="85:13" pos:end="85:55"><call pos:start="85:13" pos:end="85:55"><name pos:start="85:13" pos:end="85:35">usb_combined_packet_add</name><argument_list pos:start="85:36" pos:end="85:55">(<argument pos:start="85:37" pos:end="85:51"><expr pos:start="85:37" pos:end="85:51"><name pos:start="85:37" pos:end="85:51"><name pos:start="85:37" pos:end="85:41">first</name><operator pos:start="85:42" pos:end="85:43">-&gt;</operator><name pos:start="85:44" pos:end="85:51">combined</name></name></expr></argument>, <argument pos:start="85:54" pos:end="85:54"><expr pos:start="85:54" pos:end="85:54"><name pos:start="85:54" pos:end="85:54">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="87:11" pos:end="91:9">else <block pos:start="87:16" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:22">

            <expr_stmt pos:start="89:13" pos:end="89:22"><expr pos:start="89:13" pos:end="89:21"><name pos:start="89:13" pos:end="89:17">first</name> <operator pos:start="89:19" pos:end="89:19">=</operator> <name pos:start="89:21" pos:end="89:21">p</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="95:9" pos:end="95:67">/* Is this packet the last one of a (combined) transfer? */</comment>

        <if_stmt pos:start="97:9" pos:end="123:9"><if pos:start="97:9" pos:end="123:9">if <condition pos:start="97:12" pos:end="99:29">(<expr pos:start="97:13" pos:end="99:28"><operator pos:start="97:13" pos:end="97:13">(</operator><name pos:start="97:14" pos:end="97:24"><name pos:start="97:14" pos:end="97:14">p</name><operator pos:start="97:15" pos:end="97:16">-&gt;</operator><name pos:start="97:17" pos:end="97:19">iov</name><operator pos:start="97:20" pos:end="97:20">.</operator><name pos:start="97:21" pos:end="97:24">size</name></name> <operator pos:start="97:26" pos:end="97:26">%</operator> <name pos:start="97:28" pos:end="97:46"><name pos:start="97:28" pos:end="97:29">ep</name><operator pos:start="97:30" pos:end="97:31">-&gt;</operator><name pos:start="97:32" pos:end="97:46">max_packet_size</name></name><operator pos:start="97:47" pos:end="97:47">)</operator> <operator pos:start="97:49" pos:end="97:50">!=</operator> <literal type="number" pos:start="97:52" pos:end="97:52">0</literal> <operator pos:start="97:54" pos:end="97:55">||</operator> <operator pos:start="97:57" pos:end="97:57">!</operator><name pos:start="97:58" pos:end="97:72"><name pos:start="97:58" pos:end="97:58">p</name><operator pos:start="97:59" pos:end="97:60">-&gt;</operator><name pos:start="97:61" pos:end="97:72">short_not_ok</name></name> <operator pos:start="97:74" pos:end="97:75">||</operator>

                <name pos:start="99:17" pos:end="99:20">next</name> <operator pos:start="99:22" pos:end="99:23">==</operator> <name pos:start="99:25" pos:end="99:28">NULL</name></expr>)</condition> <block pos:start="99:31" pos:end="123:9">{<block_content pos:start="101:13" pos:end="121:21">

            <expr_stmt pos:start="101:13" pos:end="101:57"><expr pos:start="101:13" pos:end="101:56"><name pos:start="101:13" pos:end="101:15">ret</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <call pos:start="101:19" pos:end="101:56"><name pos:start="101:19" pos:end="101:40">usb_device_handle_data</name><argument_list pos:start="101:41" pos:end="101:56">(<argument pos:start="101:42" pos:end="101:48"><expr pos:start="101:42" pos:end="101:48"><name pos:start="101:42" pos:end="101:48"><name pos:start="101:42" pos:end="101:43">ep</name><operator pos:start="101:44" pos:end="101:45">-&gt;</operator><name pos:start="101:46" pos:end="101:48">dev</name></name></expr></argument>, <argument pos:start="101:51" pos:end="101:55"><expr pos:start="101:51" pos:end="101:55"><name pos:start="101:51" pos:end="101:55">first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:41"><expr pos:start="103:13" pos:end="103:40"><call pos:start="103:13" pos:end="103:40"><name pos:start="103:13" pos:end="103:18">assert</name><argument_list pos:start="103:19" pos:end="103:40">(<argument pos:start="103:20" pos:end="103:39"><expr pos:start="103:20" pos:end="103:39"><name pos:start="103:20" pos:end="103:22">ret</name> <operator pos:start="103:24" pos:end="103:25">==</operator> <name pos:start="103:27" pos:end="103:39">USB_RET_ASYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="105:13" pos:end="117:13"><if pos:start="105:13" pos:end="113:13">if <condition pos:start="105:16" pos:end="105:32">(<expr pos:start="105:17" pos:end="105:31"><name pos:start="105:17" pos:end="105:31"><name pos:start="105:17" pos:end="105:21">first</name><operator pos:start="105:22" pos:end="105:23">-&gt;</operator><name pos:start="105:24" pos:end="105:31">combined</name></name></expr>)</condition> <block pos:start="105:34" pos:end="113:13">{<block_content pos:start="107:17" pos:end="111:17">

                <macro pos:start="107:17" pos:end="107:76"><name pos:start="107:17" pos:end="107:30">QTAILQ_FOREACH</name><argument_list pos:start="107:31" pos:end="107:76">(<argument pos:start="107:32" pos:end="107:32">u</argument>, <argument pos:start="107:35" pos:end="107:59">&amp;first-&gt;combined-&gt;packets</argument>, <argument pos:start="107:62" pos:end="107:75">combined_entry</argument>)</argument_list></macro> <block pos:start="107:78" pos:end="111:17">{<block_content pos:start="109:21" pos:end="109:62">

                    <expr_stmt pos:start="109:21" pos:end="109:62"><expr pos:start="109:21" pos:end="109:61"><call pos:start="109:21" pos:end="109:61"><name pos:start="109:21" pos:end="109:40">usb_packet_set_state</name><argument_list pos:start="109:41" pos:end="109:61">(<argument pos:start="109:42" pos:end="109:42"><expr pos:start="109:42" pos:end="109:42"><name pos:start="109:42" pos:end="109:42">u</name></expr></argument>, <argument pos:start="109:45" pos:end="109:60"><expr pos:start="109:45" pos:end="109:60"><name pos:start="109:45" pos:end="109:60">USB_PACKET_ASYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

            </block_content>}</block></if> <else pos:start="113:15" pos:end="117:13">else <block pos:start="113:20" pos:end="117:13">{<block_content pos:start="115:17" pos:end="115:62">

                <expr_stmt pos:start="115:17" pos:end="115:62"><expr pos:start="115:17" pos:end="115:61"><call pos:start="115:17" pos:end="115:61"><name pos:start="115:17" pos:end="115:36">usb_packet_set_state</name><argument_list pos:start="115:37" pos:end="115:61">(<argument pos:start="115:38" pos:end="115:42"><expr pos:start="115:38" pos:end="115:42"><name pos:start="115:38" pos:end="115:42">first</name></expr></argument>, <argument pos:start="115:45" pos:end="115:60"><expr pos:start="115:45" pos:end="115:60"><name pos:start="115:45" pos:end="115:60">USB_PACKET_ASYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:25"><expr pos:start="119:13" pos:end="119:24"><name pos:start="119:13" pos:end="119:17">first</name> <operator pos:start="119:19" pos:end="119:19">=</operator> <name pos:start="119:21" pos:end="119:24">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:21"><expr pos:start="121:13" pos:end="121:20"><name pos:start="121:13" pos:end="121:16">prev</name> <operator pos:start="121:18" pos:end="121:18">=</operator> <name pos:start="121:20" pos:end="121:20">p</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

</block_content>}</block></function>
</unit>
