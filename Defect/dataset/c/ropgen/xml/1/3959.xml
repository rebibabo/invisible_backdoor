<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3959.c" pos:tabs="8"><function pos:start="1:1" pos:end="725:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:9">DriveInfo</name> <modifier pos:start="1:11" pos:end="1:11">*</modifier></type><name pos:start="1:12" pos:end="1:21">drive_init</name><parameter_list pos:start="1:22" pos:end="1:76">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:30">QemuOpts</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:36">opts</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:57"><decl pos:start="1:39" pos:end="1:57"><type pos:start="1:39" pos:end="1:57"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:57">default_to_scsi</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:75"><decl pos:start="1:60" pos:end="1:75"><type pos:start="1:60" pos:end="1:75"><name pos:start="1:60" pos:end="1:62">int</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:75">fatal_error</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="725:1">{<block_content pos:start="5:5" pos:end="723:17">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">file</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:21"><name pos:start="9:10" pos:end="9:16">devname</name><index pos:start="9:17" pos:end="9:21">[<expr pos:start="9:18" pos:end="9:20"><literal type="number" pos:start="9:18" pos:end="9:20">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:22">serial</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:24">mediastr</name> <init pos:start="13:26" pos:end="13:29">= <expr pos:start="13:28" pos:end="13:29"><literal type="string" pos:start="13:28" pos:end="13:29">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:22">BlockInterfaceType</name></type> <name pos:start="15:24" pos:end="15:27">type</name></decl>;</decl_stmt>

    <enum pos:start="17:5" pos:end="17:43">enum <block pos:start="17:10" pos:end="17:36">{ <decl pos:start="17:12" pos:end="17:21"><name pos:start="17:12" pos:end="17:21">MEDIA_DISK</name></decl>, <decl pos:start="17:24" pos:end="17:34"><name pos:start="17:24" pos:end="17:34">MEDIA_CDROM</name></decl> }</block> <decl pos:start="17:38" pos:end="17:42"><name pos:start="17:38" pos:end="17:42">media</name></decl>;</enum>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">bus_id</name></decl>, <decl pos:start="19:17" pos:end="19:23"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:17" pos:end="19:23">unit_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:39"><decl pos:start="21:5" pos:end="21:12"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:12">cyls</name></decl>, <decl pos:start="21:15" pos:end="21:19"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:15" pos:end="21:19">heads</name></decl>, <decl pos:start="21:22" pos:end="21:25"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:22" pos:end="21:25">secs</name></decl>, <decl pos:start="21:28" pos:end="21:38"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:28" pos:end="21:38">translation</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:15">BlockDriver</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:20">drv</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:16">max_devs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:14"><decl pos:start="27:5" pos:end="27:13"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:13">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:15"><decl pos:start="29:5" pos:end="29:14"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:10">ro</name> <init pos:start="29:12" pos:end="29:14">= <expr pos:start="29:14" pos:end="29:14"><literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:23"><decl pos:start="31:5" pos:end="31:22"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:18">bdrv_flags</name> <init pos:start="31:20" pos:end="31:22">= <expr pos:start="31:22" pos:end="31:22"><literal type="number" pos:start="31:22" pos:end="31:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:38"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:21">on_read_error</name></decl>, <decl pos:start="33:24" pos:end="33:37"><type ref="prev" pos:start="33:5" pos:end="33:7"/><name pos:start="33:24" pos:end="33:37">on_write_error</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:24"><decl pos:start="35:5" pos:end="35:23"><type pos:start="35:5" pos:end="35:16"><specifier pos:start="35:5" pos:end="35:9">const</specifier> <name pos:start="35:11" pos:end="35:14">char</name> <modifier pos:start="35:16" pos:end="35:16">*</modifier></type><name pos:start="35:17" pos:end="35:23">devaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:21"><decl pos:start="37:5" pos:end="37:20"><type pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:13">DriveInfo</name> <modifier pos:start="37:15" pos:end="37:15">*</modifier></type><name pos:start="37:16" pos:end="37:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:21"><decl pos:start="39:5" pos:end="39:20"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:16">snapshot</name> <init pos:start="39:18" pos:end="39:20">= <expr pos:start="39:20" pos:end="39:20"><literal type="number" pos:start="39:20" pos:end="39:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:12"><decl pos:start="41:5" pos:end="41:11"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:21"><expr pos:start="45:5" pos:end="45:20"><operator pos:start="45:5" pos:end="45:5">*</operator><name pos:start="45:6" pos:end="45:16">fatal_error</name> <operator pos:start="45:18" pos:end="45:18">=</operator> <literal type="number" pos:start="45:20" pos:end="45:20">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:44"><expr pos:start="49:5" pos:end="49:43"><name pos:start="49:5" pos:end="49:15">translation</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:43">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="69:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="53:24">(<expr pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:23">default_to_scsi</name></expr>)</condition> <block pos:start="53:26" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:50">

        <expr_stmt pos:start="55:9" pos:end="55:23"><expr pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:12">type</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <name pos:start="55:16" pos:end="55:22">IF_SCSI</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:33"><expr pos:start="57:9" pos:end="57:32"><name pos:start="57:9" pos:end="57:16">max_devs</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:32">MAX_SCSI_DEVS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:50"><expr pos:start="59:9" pos:end="59:49"><call pos:start="59:9" pos:end="59:49"><name pos:start="59:9" pos:end="59:15">pstrcpy</name><argument_list pos:start="59:16" pos:end="59:49">(<argument pos:start="59:17" pos:end="59:23"><expr pos:start="59:17" pos:end="59:23"><name pos:start="59:17" pos:end="59:23">devname</name></expr></argument>, <argument pos:start="59:26" pos:end="59:40"><expr pos:start="59:26" pos:end="59:40"><sizeof pos:start="59:26" pos:end="59:40">sizeof<argument_list pos:start="59:32" pos:end="59:40">(<argument pos:start="59:33" pos:end="59:39"><expr pos:start="59:33" pos:end="59:39"><name pos:start="59:33" pos:end="59:39">devname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="59:43" pos:end="59:48"><expr pos:start="59:43" pos:end="59:48"><literal type="string" pos:start="59:43" pos:end="59:48">"scsi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="69:5">else <block pos:start="61:12" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:49">

        <expr_stmt pos:start="63:9" pos:end="63:22"><expr pos:start="63:9" pos:end="63:21"><name pos:start="63:9" pos:end="63:12">type</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <name pos:start="63:16" pos:end="63:21">IF_IDE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:32"><expr pos:start="65:9" pos:end="65:31"><name pos:start="65:9" pos:end="65:16">max_devs</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:31">MAX_IDE_DEVS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:49"><expr pos:start="67:9" pos:end="67:48"><call pos:start="67:9" pos:end="67:48"><name pos:start="67:9" pos:end="67:15">pstrcpy</name><argument_list pos:start="67:16" pos:end="67:48">(<argument pos:start="67:17" pos:end="67:23"><expr pos:start="67:17" pos:end="67:23"><name pos:start="67:17" pos:end="67:23">devname</name></expr></argument>, <argument pos:start="67:26" pos:end="67:40"><expr pos:start="67:26" pos:end="67:40"><sizeof pos:start="67:26" pos:end="67:40">sizeof<argument_list pos:start="67:32" pos:end="67:40">(<argument pos:start="67:33" pos:end="67:39"><expr pos:start="67:33" pos:end="67:39"><name pos:start="67:33" pos:end="67:39">devname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="67:43" pos:end="67:47"><expr pos:start="67:43" pos:end="67:47"><literal type="string" pos:start="67:43" pos:end="67:47">"ide"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:23"><expr pos:start="71:5" pos:end="71:22"><name pos:start="71:5" pos:end="71:9">media</name> <operator pos:start="71:11" pos:end="71:11">=</operator> <name pos:start="71:13" pos:end="71:22">MEDIA_DISK</name></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:28">/* extract parameters */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:50"><expr pos:start="77:5" pos:end="77:49"><name pos:start="77:5" pos:end="77:10">bus_id</name>  <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:49"><name pos:start="77:15" pos:end="77:33">qemu_opt_get_number</name><argument_list pos:start="77:34" pos:end="77:49">(<argument pos:start="77:35" pos:end="77:38"><expr pos:start="77:35" pos:end="77:38"><name pos:start="77:35" pos:end="77:38">opts</name></expr></argument>, <argument pos:start="77:41" pos:end="77:45"><expr pos:start="77:41" pos:end="77:45"><literal type="string" pos:start="77:41" pos:end="77:45">"bus"</literal></expr></argument>, <argument pos:start="77:48" pos:end="77:48"><expr pos:start="77:48" pos:end="77:48"><literal type="number" pos:start="77:48" pos:end="77:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:52"><expr pos:start="79:5" pos:end="79:51"><name pos:start="79:5" pos:end="79:11">unit_id</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:51"><name pos:start="79:15" pos:end="79:33">qemu_opt_get_number</name><argument_list pos:start="79:34" pos:end="79:51">(<argument pos:start="79:35" pos:end="79:38"><expr pos:start="79:35" pos:end="79:38"><name pos:start="79:35" pos:end="79:38">opts</name></expr></argument>, <argument pos:start="79:41" pos:end="79:46"><expr pos:start="79:41" pos:end="79:46"><literal type="string" pos:start="79:41" pos:end="79:46">"unit"</literal></expr></argument>, <argument pos:start="79:49" pos:end="79:50"><expr pos:start="79:49" pos:end="79:50"><operator pos:start="79:49" pos:end="79:49">-</operator><literal type="number" pos:start="79:50" pos:end="79:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:53"><expr pos:start="81:5" pos:end="81:52"><name pos:start="81:5" pos:end="81:9">index</name>   <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:52"><name pos:start="81:15" pos:end="81:33">qemu_opt_get_number</name><argument_list pos:start="81:34" pos:end="81:52">(<argument pos:start="81:35" pos:end="81:38"><expr pos:start="81:35" pos:end="81:38"><name pos:start="81:35" pos:end="81:38">opts</name></expr></argument>, <argument pos:start="81:41" pos:end="81:47"><expr pos:start="81:41" pos:end="81:47"><literal type="string" pos:start="81:41" pos:end="81:47">"index"</literal></expr></argument>, <argument pos:start="81:50" pos:end="81:51"><expr pos:start="81:50" pos:end="81:51"><operator pos:start="81:50" pos:end="81:50">-</operator><literal type="number" pos:start="81:51" pos:end="81:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:49"><expr pos:start="85:5" pos:end="85:48"><name pos:start="85:5" pos:end="85:8">cyls</name>  <operator pos:start="85:11" pos:end="85:11">=</operator> <call pos:start="85:13" pos:end="85:48"><name pos:start="85:13" pos:end="85:31">qemu_opt_get_number</name><argument_list pos:start="85:32" pos:end="85:48">(<argument pos:start="85:33" pos:end="85:36"><expr pos:start="85:33" pos:end="85:36"><name pos:start="85:33" pos:end="85:36">opts</name></expr></argument>, <argument pos:start="85:39" pos:end="85:44"><expr pos:start="85:39" pos:end="85:44"><literal type="string" pos:start="85:39" pos:end="85:44">"cyls"</literal></expr></argument>, <argument pos:start="85:47" pos:end="85:47"><expr pos:start="85:47" pos:end="85:47"><literal type="number" pos:start="85:47" pos:end="85:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:50"><expr pos:start="87:5" pos:end="87:49"><name pos:start="87:5" pos:end="87:9">heads</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <call pos:start="87:13" pos:end="87:49"><name pos:start="87:13" pos:end="87:31">qemu_opt_get_number</name><argument_list pos:start="87:32" pos:end="87:49">(<argument pos:start="87:33" pos:end="87:36"><expr pos:start="87:33" pos:end="87:36"><name pos:start="87:33" pos:end="87:36">opts</name></expr></argument>, <argument pos:start="87:39" pos:end="87:45"><expr pos:start="87:39" pos:end="87:45"><literal type="string" pos:start="87:39" pos:end="87:45">"heads"</literal></expr></argument>, <argument pos:start="87:48" pos:end="87:48"><expr pos:start="87:48" pos:end="87:48"><literal type="number" pos:start="87:48" pos:end="87:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:49"><expr pos:start="89:5" pos:end="89:48"><name pos:start="89:5" pos:end="89:8">secs</name>  <operator pos:start="89:11" pos:end="89:11">=</operator> <call pos:start="89:13" pos:end="89:48"><name pos:start="89:13" pos:end="89:31">qemu_opt_get_number</name><argument_list pos:start="89:32" pos:end="89:48">(<argument pos:start="89:33" pos:end="89:36"><expr pos:start="89:33" pos:end="89:36"><name pos:start="89:33" pos:end="89:36">opts</name></expr></argument>, <argument pos:start="89:39" pos:end="89:44"><expr pos:start="89:39" pos:end="89:44"><literal type="string" pos:start="89:39" pos:end="89:44">"secs"</literal></expr></argument>, <argument pos:start="89:47" pos:end="89:47"><expr pos:start="89:47" pos:end="89:47"><literal type="number" pos:start="89:47" pos:end="89:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:54"><expr pos:start="93:5" pos:end="93:53"><name pos:start="93:5" pos:end="93:12">snapshot</name> <operator pos:start="93:14" pos:end="93:14">=</operator> <call pos:start="93:16" pos:end="93:53"><name pos:start="93:16" pos:end="93:32">qemu_opt_get_bool</name><argument_list pos:start="93:33" pos:end="93:53">(<argument pos:start="93:34" pos:end="93:37"><expr pos:start="93:34" pos:end="93:37"><name pos:start="93:34" pos:end="93:37">opts</name></expr></argument>, <argument pos:start="93:40" pos:end="93:49"><expr pos:start="93:40" pos:end="93:49"><literal type="string" pos:start="93:40" pos:end="93:49">"snapshot"</literal></expr></argument>, <argument pos:start="93:52" pos:end="93:52"><expr pos:start="93:52" pos:end="93:52"><literal type="number" pos:start="93:52" pos:end="93:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:48"><expr pos:start="95:5" pos:end="95:47"><name pos:start="95:5" pos:end="95:6">ro</name> <operator pos:start="95:8" pos:end="95:8">=</operator> <call pos:start="95:10" pos:end="95:47"><name pos:start="95:10" pos:end="95:26">qemu_opt_get_bool</name><argument_list pos:start="95:27" pos:end="95:47">(<argument pos:start="95:28" pos:end="95:31"><expr pos:start="95:28" pos:end="95:31"><name pos:start="95:28" pos:end="95:31">opts</name></expr></argument>, <argument pos:start="95:34" pos:end="95:43"><expr pos:start="95:34" pos:end="95:43"><literal type="string" pos:start="95:34" pos:end="95:43">"readonly"</literal></expr></argument>, <argument pos:start="95:46" pos:end="95:46"><expr pos:start="95:46" pos:end="95:46"><literal type="number" pos:start="95:46" pos:end="95:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:38"><expr pos:start="99:5" pos:end="99:37"><name pos:start="99:5" pos:end="99:8">file</name> <operator pos:start="99:10" pos:end="99:10">=</operator> <call pos:start="99:12" pos:end="99:37"><name pos:start="99:12" pos:end="99:23">qemu_opt_get</name><argument_list pos:start="99:24" pos:end="99:37">(<argument pos:start="99:25" pos:end="99:28"><expr pos:start="99:25" pos:end="99:28"><name pos:start="99:25" pos:end="99:28">opts</name></expr></argument>, <argument pos:start="99:31" pos:end="99:36"><expr pos:start="99:31" pos:end="99:36"><literal type="string" pos:start="99:31" pos:end="99:36">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:42"><expr pos:start="101:5" pos:end="101:41"><name pos:start="101:5" pos:end="101:10">serial</name> <operator pos:start="101:12" pos:end="101:12">=</operator> <call pos:start="101:14" pos:end="101:41"><name pos:start="101:14" pos:end="101:25">qemu_opt_get</name><argument_list pos:start="101:26" pos:end="101:41">(<argument pos:start="101:27" pos:end="101:30"><expr pos:start="101:27" pos:end="101:30"><name pos:start="101:27" pos:end="101:30">opts</name></expr></argument>, <argument pos:start="101:33" pos:end="101:40"><expr pos:start="101:33" pos:end="101:40"><literal type="string" pos:start="101:33" pos:end="101:40">"serial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="105:5" pos:end="171:5"><if pos:start="105:5" pos:end="171:5">if <condition pos:start="105:8" pos:end="105:49">(<expr pos:start="105:9" pos:end="105:48"><operator pos:start="105:9" pos:end="105:9">(</operator><name pos:start="105:10" pos:end="105:12">buf</name> <operator pos:start="105:14" pos:end="105:14">=</operator> <call pos:start="105:16" pos:end="105:39"><name pos:start="105:16" pos:end="105:27">qemu_opt_get</name><argument_list pos:start="105:28" pos:end="105:39">(<argument pos:start="105:29" pos:end="105:32"><expr pos:start="105:29" pos:end="105:32"><name pos:start="105:29" pos:end="105:32">opts</name></expr></argument>, <argument pos:start="105:35" pos:end="105:38"><expr pos:start="105:35" pos:end="105:38"><literal type="string" pos:start="105:35" pos:end="105:38">"if"</literal></expr></argument>)</argument_list></call><operator pos:start="105:40" pos:end="105:40">)</operator> <operator pos:start="105:42" pos:end="105:43">!=</operator> <name pos:start="105:45" pos:end="105:48">NULL</name></expr>)</condition> <block pos:start="105:51" pos:end="171:5">{<block_content pos:start="107:9" pos:end="169:9">

        <expr_stmt pos:start="107:9" pos:end="107:47"><expr pos:start="107:9" pos:end="107:46"><call pos:start="107:9" pos:end="107:46"><name pos:start="107:9" pos:end="107:15">pstrcpy</name><argument_list pos:start="107:16" pos:end="107:46">(<argument pos:start="107:17" pos:end="107:23"><expr pos:start="107:17" pos:end="107:23"><name pos:start="107:17" pos:end="107:23">devname</name></expr></argument>, <argument pos:start="107:26" pos:end="107:40"><expr pos:start="107:26" pos:end="107:40"><sizeof pos:start="107:26" pos:end="107:40">sizeof<argument_list pos:start="107:32" pos:end="107:40">(<argument pos:start="107:33" pos:end="107:39"><expr pos:start="107:33" pos:end="107:39"><name pos:start="107:33" pos:end="107:39">devname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="107:43" pos:end="107:45"><expr pos:start="107:43" pos:end="107:45"><name pos:start="107:43" pos:end="107:45">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="169:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:32">(<expr pos:start="109:13" pos:end="109:31"><operator pos:start="109:13" pos:end="109:13">!</operator><call pos:start="109:14" pos:end="109:31"><name pos:start="109:14" pos:end="109:19">strcmp</name><argument_list pos:start="109:20" pos:end="109:31">(<argument pos:start="109:21" pos:end="109:23"><expr pos:start="109:21" pos:end="109:23"><name pos:start="109:21" pos:end="109:23">buf</name></expr></argument>, <argument pos:start="109:26" pos:end="109:30"><expr pos:start="109:26" pos:end="109:30"><literal type="string" pos:start="109:26" pos:end="109:30">"ide"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:34" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:36">

	    <expr_stmt pos:start="111:13" pos:end="111:26"><expr pos:start="111:13" pos:end="111:25"><name pos:start="111:13" pos:end="111:16">type</name> <operator pos:start="111:18" pos:end="111:18">=</operator> <name pos:start="111:20" pos:end="111:25">IF_IDE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:36"><expr pos:start="113:13" pos:end="113:35"><name pos:start="113:13" pos:end="113:20">max_devs</name> <operator pos:start="113:22" pos:end="113:22">=</operator> <name pos:start="113:24" pos:end="113:35">MAX_IDE_DEVS</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="115:11" pos:end="121:9">else if <condition pos:start="115:19" pos:end="115:40">(<expr pos:start="115:20" pos:end="115:39"><operator pos:start="115:20" pos:end="115:20">!</operator><call pos:start="115:21" pos:end="115:39"><name pos:start="115:21" pos:end="115:26">strcmp</name><argument_list pos:start="115:27" pos:end="115:39">(<argument pos:start="115:28" pos:end="115:30"><expr pos:start="115:28" pos:end="115:30"><name pos:start="115:28" pos:end="115:30">buf</name></expr></argument>, <argument pos:start="115:33" pos:end="115:38"><expr pos:start="115:33" pos:end="115:38"><literal type="string" pos:start="115:33" pos:end="115:38">"scsi"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:42" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:37">

	    <expr_stmt pos:start="117:13" pos:end="117:27"><expr pos:start="117:13" pos:end="117:26"><name pos:start="117:13" pos:end="117:16">type</name> <operator pos:start="117:18" pos:end="117:18">=</operator> <name pos:start="117:20" pos:end="117:26">IF_SCSI</name></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:37"><expr pos:start="119:13" pos:end="119:36"><name pos:start="119:13" pos:end="119:20">max_devs</name> <operator pos:start="119:22" pos:end="119:22">=</operator> <name pos:start="119:24" pos:end="119:36">MAX_SCSI_DEVS</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="121:11" pos:end="127:9">else if <condition pos:start="121:19" pos:end="121:42">(<expr pos:start="121:20" pos:end="121:41"><operator pos:start="121:20" pos:end="121:20">!</operator><call pos:start="121:21" pos:end="121:41"><name pos:start="121:21" pos:end="121:26">strcmp</name><argument_list pos:start="121:27" pos:end="121:41">(<argument pos:start="121:28" pos:end="121:30"><expr pos:start="121:28" pos:end="121:30"><name pos:start="121:28" pos:end="121:30">buf</name></expr></argument>, <argument pos:start="121:33" pos:end="121:40"><expr pos:start="121:33" pos:end="121:40"><literal type="string" pos:start="121:33" pos:end="121:40">"floppy"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="121:44" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:25">

	    <expr_stmt pos:start="123:13" pos:end="123:29"><expr pos:start="123:13" pos:end="123:28"><name pos:start="123:13" pos:end="123:16">type</name> <operator pos:start="123:18" pos:end="123:18">=</operator> <name pos:start="123:20" pos:end="123:28">IF_FLOPPY</name></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:25"><expr pos:start="125:13" pos:end="125:24"><name pos:start="125:13" pos:end="125:20">max_devs</name> <operator pos:start="125:22" pos:end="125:22">=</operator> <literal type="number" pos:start="125:24" pos:end="125:24">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="127:11" pos:end="133:9">else if <condition pos:start="127:19" pos:end="127:42">(<expr pos:start="127:20" pos:end="127:41"><operator pos:start="127:20" pos:end="127:20">!</operator><call pos:start="127:21" pos:end="127:41"><name pos:start="127:21" pos:end="127:26">strcmp</name><argument_list pos:start="127:27" pos:end="127:41">(<argument pos:start="127:28" pos:end="127:30"><expr pos:start="127:28" pos:end="127:30"><name pos:start="127:28" pos:end="127:30">buf</name></expr></argument>, <argument pos:start="127:33" pos:end="127:40"><expr pos:start="127:33" pos:end="127:40"><literal type="string" pos:start="127:33" pos:end="127:40">"pflash"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:44" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:25">

	    <expr_stmt pos:start="129:13" pos:end="129:29"><expr pos:start="129:13" pos:end="129:28"><name pos:start="129:13" pos:end="129:16">type</name> <operator pos:start="129:18" pos:end="129:18">=</operator> <name pos:start="129:20" pos:end="129:28">IF_PFLASH</name></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:25"><expr pos:start="131:13" pos:end="131:24"><name pos:start="131:13" pos:end="131:20">max_devs</name> <operator pos:start="131:22" pos:end="131:22">=</operator> <literal type="number" pos:start="131:24" pos:end="131:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="133:11" pos:end="139:9">else if <condition pos:start="133:19" pos:end="133:39">(<expr pos:start="133:20" pos:end="133:38"><operator pos:start="133:20" pos:end="133:20">!</operator><call pos:start="133:21" pos:end="133:38"><name pos:start="133:21" pos:end="133:26">strcmp</name><argument_list pos:start="133:27" pos:end="133:38">(<argument pos:start="133:28" pos:end="133:30"><expr pos:start="133:28" pos:end="133:30"><name pos:start="133:28" pos:end="133:30">buf</name></expr></argument>, <argument pos:start="133:33" pos:end="133:37"><expr pos:start="133:33" pos:end="133:37"><literal type="string" pos:start="133:33" pos:end="133:37">"mtd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="133:41" pos:end="139:9">{<block_content pos:start="135:13" pos:end="137:25">

	    <expr_stmt pos:start="135:13" pos:end="135:26"><expr pos:start="135:13" pos:end="135:25"><name pos:start="135:13" pos:end="135:16">type</name> <operator pos:start="135:18" pos:end="135:18">=</operator> <name pos:start="135:20" pos:end="135:25">IF_MTD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:25"><expr pos:start="137:13" pos:end="137:24"><name pos:start="137:13" pos:end="137:20">max_devs</name> <operator pos:start="137:22" pos:end="137:22">=</operator> <literal type="number" pos:start="137:24" pos:end="137:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="139:11" pos:end="145:9">else if <condition pos:start="139:19" pos:end="139:38">(<expr pos:start="139:20" pos:end="139:37"><operator pos:start="139:20" pos:end="139:20">!</operator><call pos:start="139:21" pos:end="139:37"><name pos:start="139:21" pos:end="139:26">strcmp</name><argument_list pos:start="139:27" pos:end="139:37">(<argument pos:start="139:28" pos:end="139:30"><expr pos:start="139:28" pos:end="139:30"><name pos:start="139:28" pos:end="139:30">buf</name></expr></argument>, <argument pos:start="139:33" pos:end="139:36"><expr pos:start="139:33" pos:end="139:36"><literal type="string" pos:start="139:33" pos:end="139:36">"sd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:40" pos:end="145:9">{<block_content pos:start="141:13" pos:end="143:25">

	    <expr_stmt pos:start="141:13" pos:end="141:25"><expr pos:start="141:13" pos:end="141:24"><name pos:start="141:13" pos:end="141:16">type</name> <operator pos:start="141:18" pos:end="141:18">=</operator> <name pos:start="141:20" pos:end="141:24">IF_SD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:25"><expr pos:start="143:13" pos:end="143:24"><name pos:start="143:13" pos:end="143:20">max_devs</name> <operator pos:start="143:22" pos:end="143:22">=</operator> <literal type="number" pos:start="143:24" pos:end="143:24">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="145:11" pos:end="151:9">else if <condition pos:start="145:19" pos:end="145:42">(<expr pos:start="145:20" pos:end="145:41"><operator pos:start="145:20" pos:end="145:20">!</operator><call pos:start="145:21" pos:end="145:41"><name pos:start="145:21" pos:end="145:26">strcmp</name><argument_list pos:start="145:27" pos:end="145:41">(<argument pos:start="145:28" pos:end="145:30"><expr pos:start="145:28" pos:end="145:30"><name pos:start="145:28" pos:end="145:30">buf</name></expr></argument>, <argument pos:start="145:33" pos:end="145:40"><expr pos:start="145:33" pos:end="145:40"><literal type="string" pos:start="145:33" pos:end="145:40">"virtio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="145:44" pos:end="151:9">{<block_content pos:start="147:13" pos:end="149:25">

            <expr_stmt pos:start="147:13" pos:end="147:29"><expr pos:start="147:13" pos:end="147:28"><name pos:start="147:13" pos:end="147:16">type</name> <operator pos:start="147:18" pos:end="147:18">=</operator> <name pos:start="147:20" pos:end="147:28">IF_VIRTIO</name></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:25"><expr pos:start="149:13" pos:end="149:24"><name pos:start="149:13" pos:end="149:20">max_devs</name> <operator pos:start="149:22" pos:end="149:22">=</operator> <literal type="number" pos:start="149:24" pos:end="149:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="151:11" pos:end="157:9">else if <condition pos:start="151:19" pos:end="151:39">(<expr pos:start="151:20" pos:end="151:38"><operator pos:start="151:20" pos:end="151:20">!</operator><call pos:start="151:21" pos:end="151:38"><name pos:start="151:21" pos:end="151:26">strcmp</name><argument_list pos:start="151:27" pos:end="151:38">(<argument pos:start="151:28" pos:end="151:30"><expr pos:start="151:28" pos:end="151:30"><name pos:start="151:28" pos:end="151:30">buf</name></expr></argument>, <argument pos:start="151:33" pos:end="151:37"><expr pos:start="151:33" pos:end="151:37"><literal type="string" pos:start="151:33" pos:end="151:37">"xen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="151:41" pos:end="157:9">{<block_content pos:start="153:13" pos:end="155:25">

	    <expr_stmt pos:start="153:13" pos:end="153:26"><expr pos:start="153:13" pos:end="153:25"><name pos:start="153:13" pos:end="153:16">type</name> <operator pos:start="153:18" pos:end="153:18">=</operator> <name pos:start="153:20" pos:end="153:25">IF_XEN</name></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:25"><expr pos:start="155:13" pos:end="155:24"><name pos:start="155:13" pos:end="155:20">max_devs</name> <operator pos:start="155:22" pos:end="155:22">=</operator> <literal type="number" pos:start="155:24" pos:end="155:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="157:11" pos:end="163:9">else if <condition pos:start="157:19" pos:end="157:40">(<expr pos:start="157:20" pos:end="157:39"><operator pos:start="157:20" pos:end="157:20">!</operator><call pos:start="157:21" pos:end="157:39"><name pos:start="157:21" pos:end="157:26">strcmp</name><argument_list pos:start="157:27" pos:end="157:39">(<argument pos:start="157:28" pos:end="157:30"><expr pos:start="157:28" pos:end="157:30"><name pos:start="157:28" pos:end="157:30">buf</name></expr></argument>, <argument pos:start="157:33" pos:end="157:38"><expr pos:start="157:33" pos:end="157:38"><literal type="string" pos:start="157:33" pos:end="157:38">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="157:42" pos:end="163:9">{<block_content pos:start="159:13" pos:end="161:25">

	    <expr_stmt pos:start="159:13" pos:end="159:27"><expr pos:start="159:13" pos:end="159:26"><name pos:start="159:13" pos:end="159:16">type</name> <operator pos:start="159:18" pos:end="159:18">=</operator> <name pos:start="159:20" pos:end="159:26">IF_NONE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:25"><expr pos:start="161:13" pos:end="161:24"><name pos:start="161:13" pos:end="161:20">max_devs</name> <operator pos:start="161:22" pos:end="161:22">=</operator> <literal type="number" pos:start="161:24" pos:end="161:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="163:11" pos:end="169:9">else <block pos:start="163:16" pos:end="169:9">{<block_content pos:start="165:13" pos:end="167:24">

            <expr_stmt pos:start="165:13" pos:end="165:70"><expr pos:start="165:13" pos:end="165:69"><call pos:start="165:13" pos:end="165:69"><name pos:start="165:13" pos:end="165:19">fprintf</name><argument_list pos:start="165:20" pos:end="165:69">(<argument pos:start="165:21" pos:end="165:26"><expr pos:start="165:21" pos:end="165:26"><name pos:start="165:21" pos:end="165:26">stderr</name></expr></argument>, <argument pos:start="165:29" pos:end="165:63"><expr pos:start="165:29" pos:end="165:63"><literal type="string" pos:start="165:29" pos:end="165:63">"qemu: unsupported bus type '%s'\n"</literal></expr></argument>, <argument pos:start="165:66" pos:end="165:68"><expr pos:start="165:66" pos:end="165:68"><name pos:start="165:66" pos:end="165:68">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="167:13" pos:end="167:24">return <expr pos:start="167:20" pos:end="167:23"><name pos:start="167:20" pos:end="167:23">NULL</name></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="175:5" pos:end="201:5"><if pos:start="175:5" pos:end="201:5">if <condition pos:start="175:8" pos:end="175:30">(<expr pos:start="175:9" pos:end="175:29"><name pos:start="175:9" pos:end="175:12">cyls</name> <operator pos:start="175:14" pos:end="175:15">||</operator> <name pos:start="175:17" pos:end="175:21">heads</name> <operator pos:start="175:23" pos:end="175:24">||</operator> <name pos:start="175:26" pos:end="175:29">secs</name></expr>)</condition> <block pos:start="175:32" pos:end="201:5">{<block_content pos:start="177:9" pos:end="199:9">

        <if_stmt pos:start="177:9" pos:end="183:9"><if pos:start="177:9" pos:end="183:9">if <condition pos:start="177:12" pos:end="177:57">(<expr pos:start="177:13" pos:end="177:56"><name pos:start="177:13" pos:end="177:16">cyls</name> <operator pos:start="177:18" pos:end="177:18">&lt;</operator> <literal type="number" pos:start="177:20" pos:end="177:20">1</literal> <operator pos:start="177:22" pos:end="177:23">||</operator> <operator pos:start="177:25" pos:end="177:25">(</operator><name pos:start="177:26" pos:end="177:29">type</name> <operator pos:start="177:31" pos:end="177:32">==</operator> <name pos:start="177:34" pos:end="177:39">IF_IDE</name> <operator pos:start="177:41" pos:end="177:42">&amp;&amp;</operator> <name pos:start="177:44" pos:end="177:47">cyls</name> <operator pos:start="177:49" pos:end="177:49">&gt;</operator> <literal type="number" pos:start="177:51" pos:end="177:55">16383</literal><operator pos:start="177:56" pos:end="177:56">)</operator></expr>)</condition> <block pos:start="177:59" pos:end="183:9">{<block_content pos:start="179:13" pos:end="181:24">

            <expr_stmt pos:start="179:13" pos:end="179:78"><expr pos:start="179:13" pos:end="179:77"><call pos:start="179:13" pos:end="179:77"><name pos:start="179:13" pos:end="179:19">fprintf</name><argument_list pos:start="179:20" pos:end="179:77">(<argument pos:start="179:21" pos:end="179:26"><expr pos:start="179:21" pos:end="179:26"><name pos:start="179:21" pos:end="179:26">stderr</name></expr></argument>, <argument pos:start="179:29" pos:end="179:71"><expr pos:start="179:29" pos:end="179:71"><literal type="string" pos:start="179:29" pos:end="179:71">"qemu: '%s' invalid physical cyls number\n"</literal></expr></argument>, <argument pos:start="179:74" pos:end="179:76"><expr pos:start="179:74" pos:end="179:76"><name pos:start="179:74" pos:end="179:76">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="181:13" pos:end="181:24">return <expr pos:start="181:20" pos:end="181:23"><name pos:start="181:20" pos:end="181:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

        <if_stmt pos:start="185:9" pos:end="191:9"><if pos:start="185:9" pos:end="191:9">if <condition pos:start="185:12" pos:end="185:56">(<expr pos:start="185:13" pos:end="185:55"><name pos:start="185:13" pos:end="185:17">heads</name> <operator pos:start="185:19" pos:end="185:19">&lt;</operator> <literal type="number" pos:start="185:21" pos:end="185:21">1</literal> <operator pos:start="185:23" pos:end="185:24">||</operator> <operator pos:start="185:26" pos:end="185:26">(</operator><name pos:start="185:27" pos:end="185:30">type</name> <operator pos:start="185:32" pos:end="185:33">==</operator> <name pos:start="185:35" pos:end="185:40">IF_IDE</name> <operator pos:start="185:42" pos:end="185:43">&amp;&amp;</operator> <name pos:start="185:45" pos:end="185:49">heads</name> <operator pos:start="185:51" pos:end="185:51">&gt;</operator> <literal type="number" pos:start="185:53" pos:end="185:54">16</literal><operator pos:start="185:55" pos:end="185:55">)</operator></expr>)</condition> <block pos:start="185:58" pos:end="191:9">{<block_content pos:start="187:13" pos:end="189:24">

            <expr_stmt pos:start="187:13" pos:end="187:79"><expr pos:start="187:13" pos:end="187:78"><call pos:start="187:13" pos:end="187:78"><name pos:start="187:13" pos:end="187:19">fprintf</name><argument_list pos:start="187:20" pos:end="187:78">(<argument pos:start="187:21" pos:end="187:26"><expr pos:start="187:21" pos:end="187:26"><name pos:start="187:21" pos:end="187:26">stderr</name></expr></argument>, <argument pos:start="187:29" pos:end="187:72"><expr pos:start="187:29" pos:end="187:72"><literal type="string" pos:start="187:29" pos:end="187:72">"qemu: '%s' invalid physical heads number\n"</literal></expr></argument>, <argument pos:start="187:75" pos:end="187:77"><expr pos:start="187:75" pos:end="187:77"><name pos:start="187:75" pos:end="187:77">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="189:13" pos:end="189:24">return <expr pos:start="189:20" pos:end="189:23"><name pos:start="189:20" pos:end="189:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

        <if_stmt pos:start="193:9" pos:end="199:9"><if pos:start="193:9" pos:end="199:9">if <condition pos:start="193:12" pos:end="193:54">(<expr pos:start="193:13" pos:end="193:53"><name pos:start="193:13" pos:end="193:16">secs</name> <operator pos:start="193:18" pos:end="193:18">&lt;</operator> <literal type="number" pos:start="193:20" pos:end="193:20">1</literal> <operator pos:start="193:22" pos:end="193:23">||</operator> <operator pos:start="193:25" pos:end="193:25">(</operator><name pos:start="193:26" pos:end="193:29">type</name> <operator pos:start="193:31" pos:end="193:32">==</operator> <name pos:start="193:34" pos:end="193:39">IF_IDE</name> <operator pos:start="193:41" pos:end="193:42">&amp;&amp;</operator> <name pos:start="193:44" pos:end="193:47">secs</name> <operator pos:start="193:49" pos:end="193:49">&gt;</operator> <literal type="number" pos:start="193:51" pos:end="193:52">63</literal><operator pos:start="193:53" pos:end="193:53">)</operator></expr>)</condition> <block pos:start="193:56" pos:end="199:9">{<block_content pos:start="195:13" pos:end="197:24">

            <expr_stmt pos:start="195:13" pos:end="195:78"><expr pos:start="195:13" pos:end="195:77"><call pos:start="195:13" pos:end="195:77"><name pos:start="195:13" pos:end="195:19">fprintf</name><argument_list pos:start="195:20" pos:end="195:77">(<argument pos:start="195:21" pos:end="195:26"><expr pos:start="195:21" pos:end="195:26"><name pos:start="195:21" pos:end="195:26">stderr</name></expr></argument>, <argument pos:start="195:29" pos:end="195:71"><expr pos:start="195:29" pos:end="195:71"><literal type="string" pos:start="195:29" pos:end="195:71">"qemu: '%s' invalid physical secs number\n"</literal></expr></argument>, <argument pos:start="195:74" pos:end="195:76"><expr pos:start="195:74" pos:end="195:76"><name pos:start="195:74" pos:end="195:76">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="197:13" pos:end="197:24">return <expr pos:start="197:20" pos:end="197:23"><name pos:start="197:20" pos:end="197:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="205:5" pos:end="239:5"><if pos:start="205:5" pos:end="239:5">if <condition pos:start="205:8" pos:end="205:52">(<expr pos:start="205:9" pos:end="205:51"><operator pos:start="205:9" pos:end="205:9">(</operator><name pos:start="205:10" pos:end="205:12">buf</name> <operator pos:start="205:14" pos:end="205:14">=</operator> <call pos:start="205:16" pos:end="205:42"><name pos:start="205:16" pos:end="205:27">qemu_opt_get</name><argument_list pos:start="205:28" pos:end="205:42">(<argument pos:start="205:29" pos:end="205:32"><expr pos:start="205:29" pos:end="205:32"><name pos:start="205:29" pos:end="205:32">opts</name></expr></argument>, <argument pos:start="205:35" pos:end="205:41"><expr pos:start="205:35" pos:end="205:41"><literal type="string" pos:start="205:35" pos:end="205:41">"trans"</literal></expr></argument>)</argument_list></call><operator pos:start="205:43" pos:end="205:43">)</operator> <operator pos:start="205:45" pos:end="205:46">!=</operator> <name pos:start="205:48" pos:end="205:51">NULL</name></expr>)</condition> <block pos:start="205:54" pos:end="239:5">{<block_content pos:start="207:9" pos:end="237:9">

        <if_stmt pos:start="207:9" pos:end="217:9"><if pos:start="207:9" pos:end="217:9">if <condition pos:start="207:12" pos:end="207:18">(<expr pos:start="207:13" pos:end="207:17"><operator pos:start="207:13" pos:end="207:13">!</operator><name pos:start="207:14" pos:end="207:17">cyls</name></expr>)</condition> <block pos:start="207:20" pos:end="217:9">{<block_content pos:start="209:13" pos:end="215:24">

            <expr_stmt pos:start="209:13" pos:end="213:25"><expr pos:start="209:13" pos:end="213:24"><call pos:start="209:13" pos:end="213:24"><name pos:start="209:13" pos:end="209:19">fprintf</name><argument_list pos:start="209:20" pos:end="213:24">(<argument pos:start="209:21" pos:end="209:26"><expr pos:start="209:21" pos:end="209:26"><name pos:start="209:21" pos:end="209:26">stderr</name></expr></argument>,

                    <argument pos:start="211:21" pos:end="211:78"><expr pos:start="211:21" pos:end="211:78"><literal type="string" pos:start="211:21" pos:end="211:78">"qemu: '%s' trans must be used with cyls,heads and secs\n"</literal></expr></argument>,

                    <argument pos:start="213:21" pos:end="213:23"><expr pos:start="213:21" pos:end="213:23"><name pos:start="213:21" pos:end="213:23">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="215:13" pos:end="215:24">return <expr pos:start="215:20" pos:end="215:23"><name pos:start="215:20" pos:end="215:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="219:9" pos:end="237:9"><if pos:start="219:9" pos:end="221:52">if <condition pos:start="219:12" pos:end="219:33">(<expr pos:start="219:13" pos:end="219:32"><operator pos:start="219:13" pos:end="219:13">!</operator><call pos:start="219:14" pos:end="219:32"><name pos:start="219:14" pos:end="219:19">strcmp</name><argument_list pos:start="219:20" pos:end="219:32">(<argument pos:start="219:21" pos:end="219:23"><expr pos:start="219:21" pos:end="219:23"><name pos:start="219:21" pos:end="219:23">buf</name></expr></argument>, <argument pos:start="219:26" pos:end="219:31"><expr pos:start="219:26" pos:end="219:31"><literal type="string" pos:start="219:26" pos:end="219:31">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="221:13" pos:end="221:52"><block_content pos:start="221:13" pos:end="221:52">

            <expr_stmt pos:start="221:13" pos:end="221:52"><expr pos:start="221:13" pos:end="221:51"><name pos:start="221:13" pos:end="221:23">translation</name> <operator pos:start="221:25" pos:end="221:25">=</operator> <name pos:start="221:27" pos:end="221:51">BIOS_ATA_TRANSLATION_NONE</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="223:9" pos:end="225:51">else if <condition pos:start="223:17" pos:end="223:37">(<expr pos:start="223:18" pos:end="223:36"><operator pos:start="223:18" pos:end="223:18">!</operator><call pos:start="223:19" pos:end="223:36"><name pos:start="223:19" pos:end="223:24">strcmp</name><argument_list pos:start="223:25" pos:end="223:36">(<argument pos:start="223:26" pos:end="223:28"><expr pos:start="223:26" pos:end="223:28"><name pos:start="223:26" pos:end="223:28">buf</name></expr></argument>, <argument pos:start="223:31" pos:end="223:35"><expr pos:start="223:31" pos:end="223:35"><literal type="string" pos:start="223:31" pos:end="223:35">"lba"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="225:13" pos:end="225:51"><block_content pos:start="225:13" pos:end="225:51">

            <expr_stmt pos:start="225:13" pos:end="225:51"><expr pos:start="225:13" pos:end="225:50"><name pos:start="225:13" pos:end="225:23">translation</name> <operator pos:start="225:25" pos:end="225:25">=</operator> <name pos:start="225:27" pos:end="225:50">BIOS_ATA_TRANSLATION_LBA</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="227:9" pos:end="229:52">else if <condition pos:start="227:17" pos:end="227:38">(<expr pos:start="227:18" pos:end="227:37"><operator pos:start="227:18" pos:end="227:18">!</operator><call pos:start="227:19" pos:end="227:37"><name pos:start="227:19" pos:end="227:24">strcmp</name><argument_list pos:start="227:25" pos:end="227:37">(<argument pos:start="227:26" pos:end="227:28"><expr pos:start="227:26" pos:end="227:28"><name pos:start="227:26" pos:end="227:28">buf</name></expr></argument>, <argument pos:start="227:31" pos:end="227:36"><expr pos:start="227:31" pos:end="227:36"><literal type="string" pos:start="227:31" pos:end="227:36">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="229:13" pos:end="229:52"><block_content pos:start="229:13" pos:end="229:52">

            <expr_stmt pos:start="229:13" pos:end="229:52"><expr pos:start="229:13" pos:end="229:51"><name pos:start="229:13" pos:end="229:23">translation</name> <operator pos:start="229:25" pos:end="229:25">=</operator> <name pos:start="229:27" pos:end="229:51">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="231:9" pos:end="237:9">else <block pos:start="231:14" pos:end="237:9">{<block_content pos:start="233:13" pos:end="235:24">

            <expr_stmt pos:start="233:13" pos:end="233:74"><expr pos:start="233:13" pos:end="233:73"><call pos:start="233:13" pos:end="233:73"><name pos:start="233:13" pos:end="233:19">fprintf</name><argument_list pos:start="233:20" pos:end="233:73">(<argument pos:start="233:21" pos:end="233:26"><expr pos:start="233:21" pos:end="233:26"><name pos:start="233:21" pos:end="233:26">stderr</name></expr></argument>, <argument pos:start="233:29" pos:end="233:67"><expr pos:start="233:29" pos:end="233:67"><literal type="string" pos:start="233:29" pos:end="233:67">"qemu: '%s' invalid translation type\n"</literal></expr></argument>, <argument pos:start="233:70" pos:end="233:72"><expr pos:start="233:70" pos:end="233:72"><name pos:start="233:70" pos:end="233:72">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="235:13" pos:end="235:24">return <expr pos:start="235:20" pos:end="235:23"><name pos:start="235:20" pos:end="235:23">NULL</name></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="243:5" pos:end="271:5"><if pos:start="243:5" pos:end="271:5">if <condition pos:start="243:8" pos:end="243:52">(<expr pos:start="243:9" pos:end="243:51"><operator pos:start="243:9" pos:end="243:9">(</operator><name pos:start="243:10" pos:end="243:12">buf</name> <operator pos:start="243:14" pos:end="243:14">=</operator> <call pos:start="243:16" pos:end="243:42"><name pos:start="243:16" pos:end="243:27">qemu_opt_get</name><argument_list pos:start="243:28" pos:end="243:42">(<argument pos:start="243:29" pos:end="243:32"><expr pos:start="243:29" pos:end="243:32"><name pos:start="243:29" pos:end="243:32">opts</name></expr></argument>, <argument pos:start="243:35" pos:end="243:41"><expr pos:start="243:35" pos:end="243:41"><literal type="string" pos:start="243:35" pos:end="243:41">"media"</literal></expr></argument>)</argument_list></call><operator pos:start="243:43" pos:end="243:43">)</operator> <operator pos:start="243:45" pos:end="243:46">!=</operator> <name pos:start="243:48" pos:end="243:51">NULL</name></expr>)</condition> <block pos:start="243:54" pos:end="271:5">{<block_content pos:start="245:9" pos:end="269:9">

        <if_stmt pos:start="245:9" pos:end="269:9"><if pos:start="245:9" pos:end="249:9">if <condition pos:start="245:12" pos:end="245:33">(<expr pos:start="245:13" pos:end="245:32"><operator pos:start="245:13" pos:end="245:13">!</operator><call pos:start="245:14" pos:end="245:32"><name pos:start="245:14" pos:end="245:19">strcmp</name><argument_list pos:start="245:20" pos:end="245:32">(<argument pos:start="245:21" pos:end="245:23"><expr pos:start="245:21" pos:end="245:23"><name pos:start="245:21" pos:end="245:23">buf</name></expr></argument>, <argument pos:start="245:26" pos:end="245:31"><expr pos:start="245:26" pos:end="245:31"><literal type="string" pos:start="245:26" pos:end="245:31">"disk"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="245:35" pos:end="249:9">{<block_content pos:start="247:13" pos:end="247:31">

	    <expr_stmt pos:start="247:13" pos:end="247:31"><expr pos:start="247:13" pos:end="247:30"><name pos:start="247:13" pos:end="247:17">media</name> <operator pos:start="247:19" pos:end="247:19">=</operator> <name pos:start="247:21" pos:end="247:30">MEDIA_DISK</name></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="249:11" pos:end="263:9">else if <condition pos:start="249:19" pos:end="249:41">(<expr pos:start="249:20" pos:end="249:40"><operator pos:start="249:20" pos:end="249:20">!</operator><call pos:start="249:21" pos:end="249:40"><name pos:start="249:21" pos:end="249:26">strcmp</name><argument_list pos:start="249:27" pos:end="249:40">(<argument pos:start="249:28" pos:end="249:30"><expr pos:start="249:28" pos:end="249:30"><name pos:start="249:28" pos:end="249:30">buf</name></expr></argument>, <argument pos:start="249:33" pos:end="249:39"><expr pos:start="249:33" pos:end="249:39"><literal type="string" pos:start="249:33" pos:end="249:39">"cdrom"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="249:43" pos:end="263:9">{<block_content pos:start="251:13" pos:end="261:32">

            <if_stmt pos:start="251:13" pos:end="259:13"><if pos:start="251:13" pos:end="259:13">if <condition pos:start="251:16" pos:end="251:38">(<expr pos:start="251:17" pos:end="251:37"><name pos:start="251:17" pos:end="251:20">cyls</name> <operator pos:start="251:22" pos:end="251:23">||</operator> <name pos:start="251:25" pos:end="251:28">secs</name> <operator pos:start="251:30" pos:end="251:31">||</operator> <name pos:start="251:33" pos:end="251:37">heads</name></expr>)</condition> <block pos:start="251:40" pos:end="259:13">{<block_content pos:start="253:17" pos:end="257:28">

                <expr_stmt pos:start="253:17" pos:end="255:73"><expr pos:start="253:17" pos:end="255:72"><call pos:start="253:17" pos:end="255:72"><name pos:start="253:17" pos:end="253:23">fprintf</name><argument_list pos:start="253:24" pos:end="255:72">(<argument pos:start="253:25" pos:end="253:30"><expr pos:start="253:25" pos:end="253:30"><name pos:start="253:25" pos:end="253:30">stderr</name></expr></argument>,

                        <argument pos:start="255:25" pos:end="255:66"><expr pos:start="255:25" pos:end="255:66"><literal type="string" pos:start="255:25" pos:end="255:66">"qemu: '%s' invalid physical CHS format\n"</literal></expr></argument>, <argument pos:start="255:69" pos:end="255:71"><expr pos:start="255:69" pos:end="255:71"><name pos:start="255:69" pos:end="255:71">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	        <return pos:start="257:17" pos:end="257:28">return <expr pos:start="257:24" pos:end="257:27"><name pos:start="257:24" pos:end="257:27">NULL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="261:13" pos:end="261:32"><expr pos:start="261:13" pos:end="261:31"><name pos:start="261:13" pos:end="261:17">media</name> <operator pos:start="261:19" pos:end="261:19">=</operator> <name pos:start="261:21" pos:end="261:31">MEDIA_CDROM</name></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="263:11" pos:end="269:9">else <block pos:start="263:16" pos:end="269:9">{<block_content pos:start="265:13" pos:end="267:24">

	    <expr_stmt pos:start="265:13" pos:end="265:63"><expr pos:start="265:13" pos:end="265:62"><call pos:start="265:13" pos:end="265:62"><name pos:start="265:13" pos:end="265:19">fprintf</name><argument_list pos:start="265:20" pos:end="265:62">(<argument pos:start="265:21" pos:end="265:26"><expr pos:start="265:21" pos:end="265:26"><name pos:start="265:21" pos:end="265:26">stderr</name></expr></argument>, <argument pos:start="265:29" pos:end="265:56"><expr pos:start="265:29" pos:end="265:56"><literal type="string" pos:start="265:29" pos:end="265:56">"qemu: '%s' invalid media\n"</literal></expr></argument>, <argument pos:start="265:59" pos:end="265:61"><expr pos:start="265:59" pos:end="265:61"><name pos:start="265:59" pos:end="265:61">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="267:13" pos:end="267:24">return <expr pos:start="267:20" pos:end="267:23"><name pos:start="267:20" pos:end="267:23">NULL</name></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="275:5" pos:end="308:0"><if pos:start="275:5" pos:end="308:0">if <condition pos:start="275:8" pos:end="275:52">(<expr pos:start="275:9" pos:end="275:51"><operator pos:start="275:9" pos:end="275:9">(</operator><name pos:start="275:10" pos:end="275:12">buf</name> <operator pos:start="275:14" pos:end="275:14">=</operator> <call pos:start="275:16" pos:end="275:42"><name pos:start="275:16" pos:end="275:27">qemu_opt_get</name><argument_list pos:start="275:28" pos:end="275:42">(<argument pos:start="275:29" pos:end="275:32"><expr pos:start="275:29" pos:end="275:32"><name pos:start="275:29" pos:end="275:32">opts</name></expr></argument>, <argument pos:start="275:35" pos:end="275:41"><expr pos:start="275:35" pos:end="275:41"><literal type="string" pos:start="275:35" pos:end="275:41">"cache"</literal></expr></argument>)</argument_list></call><operator pos:start="275:43" pos:end="275:43">)</operator> <operator pos:start="275:45" pos:end="275:46">!=</operator> <name pos:start="275:48" pos:end="275:51">NULL</name></expr>)</condition> <block pos:start="275:54" pos:end="308:0">{<block_content pos:start="277:9" pos:end="301:9">

        <if_stmt pos:start="277:9" pos:end="301:9"><if pos:start="277:9" pos:end="281:9">if <condition pos:start="277:12" pos:end="277:56">(<expr pos:start="277:13" pos:end="277:55"><operator pos:start="277:13" pos:end="277:13">!</operator><call pos:start="277:14" pos:end="277:31"><name pos:start="277:14" pos:end="277:19">strcmp</name><argument_list pos:start="277:20" pos:end="277:31">(<argument pos:start="277:21" pos:end="277:23"><expr pos:start="277:21" pos:end="277:23"><name pos:start="277:21" pos:end="277:23">buf</name></expr></argument>, <argument pos:start="277:26" pos:end="277:30"><expr pos:start="277:26" pos:end="277:30"><literal type="string" pos:start="277:26" pos:end="277:30">"off"</literal></expr></argument>)</argument_list></call> <operator pos:start="277:33" pos:end="277:34">||</operator> <operator pos:start="277:36" pos:end="277:36">!</operator><call pos:start="277:37" pos:end="277:55"><name pos:start="277:37" pos:end="277:42">strcmp</name><argument_list pos:start="277:43" pos:end="277:55">(<argument pos:start="277:44" pos:end="277:46"><expr pos:start="277:44" pos:end="277:46"><name pos:start="277:44" pos:end="277:46">buf</name></expr></argument>, <argument pos:start="277:49" pos:end="277:54"><expr pos:start="277:49" pos:end="277:54"><literal type="string" pos:start="277:49" pos:end="277:54">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="277:58" pos:end="281:9">{<block_content pos:start="279:13" pos:end="279:41">

            <expr_stmt pos:start="279:13" pos:end="279:41"><expr pos:start="279:13" pos:end="279:40"><name pos:start="279:13" pos:end="279:22">bdrv_flags</name> <operator pos:start="279:24" pos:end="279:25">|=</operator> <name pos:start="279:27" pos:end="279:40">BDRV_O_NOCACHE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="281:11" pos:end="285:9">else if <condition pos:start="281:19" pos:end="281:45">(<expr pos:start="281:20" pos:end="281:44"><operator pos:start="281:20" pos:end="281:20">!</operator><call pos:start="281:21" pos:end="281:44"><name pos:start="281:21" pos:end="281:26">strcmp</name><argument_list pos:start="281:27" pos:end="281:44">(<argument pos:start="281:28" pos:end="281:30"><expr pos:start="281:28" pos:end="281:30"><name pos:start="281:28" pos:end="281:30">buf</name></expr></argument>, <argument pos:start="281:33" pos:end="281:43"><expr pos:start="281:33" pos:end="281:43"><literal type="string" pos:start="281:33" pos:end="281:43">"writeback"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="281:47" pos:end="285:9">{<block_content pos:start="283:13" pos:end="283:42">

            <expr_stmt pos:start="283:13" pos:end="283:42"><expr pos:start="283:13" pos:end="283:41"><name pos:start="283:13" pos:end="283:22">bdrv_flags</name> <operator pos:start="283:24" pos:end="283:25">|=</operator> <name pos:start="283:27" pos:end="283:41">BDRV_O_CACHE_WB</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="285:11" pos:end="291:9">else if <condition pos:start="285:19" pos:end="285:42">(<expr pos:start="285:20" pos:end="285:41"><operator pos:start="285:20" pos:end="285:20">!</operator><call pos:start="285:21" pos:end="285:41"><name pos:start="285:21" pos:end="285:26">strcmp</name><argument_list pos:start="285:27" pos:end="285:41">(<argument pos:start="285:28" pos:end="285:30"><expr pos:start="285:28" pos:end="285:30"><name pos:start="285:28" pos:end="285:30">buf</name></expr></argument>, <argument pos:start="285:33" pos:end="285:40"><expr pos:start="285:33" pos:end="285:40"><literal type="string" pos:start="285:33" pos:end="285:40">"unsafe"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="285:44" pos:end="291:9">{<block_content pos:start="287:13" pos:end="289:42">

            <expr_stmt pos:start="287:13" pos:end="287:42"><expr pos:start="287:13" pos:end="287:41"><name pos:start="287:13" pos:end="287:22">bdrv_flags</name> <operator pos:start="287:24" pos:end="287:25">|=</operator> <name pos:start="287:27" pos:end="287:41">BDRV_O_CACHE_WB</name></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:42"><expr pos:start="289:13" pos:end="289:41"><name pos:start="289:13" pos:end="289:22">bdrv_flags</name> <operator pos:start="289:24" pos:end="289:25">|=</operator> <name pos:start="289:27" pos:end="289:41">BDRV_O_NO_FLUSH</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="291:11" pos:end="295:9">else if <condition pos:start="291:19" pos:end="291:48">(<expr pos:start="291:20" pos:end="291:47"><operator pos:start="291:20" pos:end="291:20">!</operator><call pos:start="291:21" pos:end="291:47"><name pos:start="291:21" pos:end="291:26">strcmp</name><argument_list pos:start="291:27" pos:end="291:47">(<argument pos:start="291:28" pos:end="291:30"><expr pos:start="291:28" pos:end="291:30"><name pos:start="291:28" pos:end="291:30">buf</name></expr></argument>, <argument pos:start="291:33" pos:end="291:46"><expr pos:start="291:33" pos:end="291:46"><literal type="string" pos:start="291:33" pos:end="291:46">"writethrough"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="291:50" pos:end="295:9">{<block_content>

            <comment type="block" pos:start="293:13" pos:end="293:37">/* this is the default */</comment>

        </block_content>}</block></if> <else pos:start="295:11" pos:end="301:9">else <block pos:start="295:16" pos:end="301:9">{<block_content pos:start="297:12" pos:end="299:23">

           <expr_stmt pos:start="297:12" pos:end="297:59"><expr pos:start="297:12" pos:end="297:58"><call pos:start="297:12" pos:end="297:58"><name pos:start="297:12" pos:end="297:18">fprintf</name><argument_list pos:start="297:19" pos:end="297:58">(<argument pos:start="297:20" pos:end="297:25"><expr pos:start="297:20" pos:end="297:25"><name pos:start="297:20" pos:end="297:25">stderr</name></expr></argument>, <argument pos:start="297:28" pos:end="297:57"><expr pos:start="297:28" pos:end="297:57"><literal type="string" pos:start="297:28" pos:end="297:57">"qemu: invalid cache option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="299:12" pos:end="299:23">return <expr pos:start="299:19" pos:end="299:22"><name pos:start="299:19" pos:end="299:22">NULL</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="307:1" pos:end="307:23">#<cpp:directive pos:start="307:2" pos:end="307:6">ifdef</cpp:directive> <name pos:start="307:8" pos:end="307:23">CONFIG_LINUX_AIO</name></cpp:ifdef>

    <if_stmt pos:start="309:5" pos:end="330:0"><if pos:start="309:5" pos:end="330:0">if <condition pos:start="309:8" pos:end="309:50">(<expr pos:start="309:9" pos:end="309:49"><operator pos:start="309:9" pos:end="309:9">(</operator><name pos:start="309:10" pos:end="309:12">buf</name> <operator pos:start="309:14" pos:end="309:14">=</operator> <call pos:start="309:16" pos:end="309:40"><name pos:start="309:16" pos:end="309:27">qemu_opt_get</name><argument_list pos:start="309:28" pos:end="309:40">(<argument pos:start="309:29" pos:end="309:32"><expr pos:start="309:29" pos:end="309:32"><name pos:start="309:29" pos:end="309:32">opts</name></expr></argument>, <argument pos:start="309:35" pos:end="309:39"><expr pos:start="309:35" pos:end="309:39"><literal type="string" pos:start="309:35" pos:end="309:39">"aio"</literal></expr></argument>)</argument_list></call><operator pos:start="309:41" pos:end="309:41">)</operator> <operator pos:start="309:43" pos:end="309:44">!=</operator> <name pos:start="309:46" pos:end="309:49">NULL</name></expr>)</condition> <block pos:start="309:52" pos:end="330:0">{<block_content pos:start="311:9" pos:end="325:9">

        <if_stmt pos:start="311:9" pos:end="325:9"><if pos:start="311:9" pos:end="315:9">if <condition pos:start="311:12" pos:end="311:35">(<expr pos:start="311:13" pos:end="311:34"><operator pos:start="311:13" pos:end="311:13">!</operator><call pos:start="311:14" pos:end="311:34"><name pos:start="311:14" pos:end="311:19">strcmp</name><argument_list pos:start="311:20" pos:end="311:34">(<argument pos:start="311:21" pos:end="311:23"><expr pos:start="311:21" pos:end="311:23"><name pos:start="311:21" pos:end="311:23">buf</name></expr></argument>, <argument pos:start="311:26" pos:end="311:33"><expr pos:start="311:26" pos:end="311:33"><literal type="string" pos:start="311:26" pos:end="311:33">"native"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="311:37" pos:end="315:9">{<block_content pos:start="313:13" pos:end="313:44">

            <expr_stmt pos:start="313:13" pos:end="313:44"><expr pos:start="313:13" pos:end="313:43"><name pos:start="313:13" pos:end="313:22">bdrv_flags</name> <operator pos:start="313:24" pos:end="313:25">|=</operator> <name pos:start="313:27" pos:end="313:43">BDRV_O_NATIVE_AIO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="315:11" pos:end="319:9">else if <condition pos:start="315:19" pos:end="315:43">(<expr pos:start="315:20" pos:end="315:42"><operator pos:start="315:20" pos:end="315:20">!</operator><call pos:start="315:21" pos:end="315:42"><name pos:start="315:21" pos:end="315:26">strcmp</name><argument_list pos:start="315:27" pos:end="315:42">(<argument pos:start="315:28" pos:end="315:30"><expr pos:start="315:28" pos:end="315:30"><name pos:start="315:28" pos:end="315:30">buf</name></expr></argument>, <argument pos:start="315:33" pos:end="315:41"><expr pos:start="315:33" pos:end="315:41"><literal type="string" pos:start="315:33" pos:end="315:41">"threads"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="315:45" pos:end="319:9">{<block_content>

            <comment type="block" pos:start="317:13" pos:end="317:37">/* this is the default */</comment>

        </block_content>}</block></if> <else pos:start="319:11" pos:end="325:9">else <block pos:start="319:16" pos:end="325:9">{<block_content pos:start="321:12" pos:end="323:23">

           <expr_stmt pos:start="321:12" pos:end="321:57"><expr pos:start="321:12" pos:end="321:56"><call pos:start="321:12" pos:end="321:56"><name pos:start="321:12" pos:end="321:18">fprintf</name><argument_list pos:start="321:19" pos:end="321:56">(<argument pos:start="321:20" pos:end="321:25"><expr pos:start="321:20" pos:end="321:25"><name pos:start="321:20" pos:end="321:25">stderr</name></expr></argument>, <argument pos:start="321:28" pos:end="321:55"><expr pos:start="321:28" pos:end="321:55"><literal type="string" pos:start="321:28" pos:end="321:55">"qemu: invalid aio option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="323:12" pos:end="323:23">return <expr pos:start="323:19" pos:end="323:22"><name pos:start="323:19" pos:end="323:22">NULL</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="329:1" pos:end="329:6">#<cpp:directive pos:start="329:2" pos:end="329:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="333:5" pos:end="357:5"><if pos:start="333:5" pos:end="357:5">if <condition pos:start="333:8" pos:end="333:53">(<expr pos:start="333:9" pos:end="333:52"><operator pos:start="333:9" pos:end="333:9">(</operator><name pos:start="333:10" pos:end="333:12">buf</name> <operator pos:start="333:14" pos:end="333:14">=</operator> <call pos:start="333:16" pos:end="333:43"><name pos:start="333:16" pos:end="333:27">qemu_opt_get</name><argument_list pos:start="333:28" pos:end="333:43">(<argument pos:start="333:29" pos:end="333:32"><expr pos:start="333:29" pos:end="333:32"><name pos:start="333:29" pos:end="333:32">opts</name></expr></argument>, <argument pos:start="333:35" pos:end="333:42"><expr pos:start="333:35" pos:end="333:42"><literal type="string" pos:start="333:35" pos:end="333:42">"format"</literal></expr></argument>)</argument_list></call><operator pos:start="333:44" pos:end="333:44">)</operator> <operator pos:start="333:46" pos:end="333:47">!=</operator> <name pos:start="333:49" pos:end="333:52">NULL</name></expr>)</condition> <block pos:start="333:55" pos:end="357:5">{<block_content pos:start="335:8" pos:end="355:9">

       <if_stmt pos:start="335:8" pos:end="345:9"><if pos:start="335:8" pos:end="345:9">if <condition pos:start="335:11" pos:end="335:33">(<expr pos:start="335:12" pos:end="335:32"><call pos:start="335:12" pos:end="335:27"><name pos:start="335:12" pos:end="335:17">strcmp</name><argument_list pos:start="335:18" pos:end="335:27">(<argument pos:start="335:19" pos:end="335:21"><expr pos:start="335:19" pos:end="335:21"><name pos:start="335:19" pos:end="335:21">buf</name></expr></argument>, <argument pos:start="335:24" pos:end="335:26"><expr pos:start="335:24" pos:end="335:26"><literal type="string" pos:start="335:24" pos:end="335:26">"?"</literal></expr></argument>)</argument_list></call> <operator pos:start="335:29" pos:end="335:30">==</operator> <literal type="number" pos:start="335:32" pos:end="335:32">0</literal></expr>)</condition> <block pos:start="335:35" pos:end="345:9">{<block_content pos:start="337:13" pos:end="343:24">

            <expr_stmt pos:start="337:13" pos:end="337:56"><expr pos:start="337:13" pos:end="337:55"><call pos:start="337:13" pos:end="337:55"><name pos:start="337:13" pos:end="337:19">fprintf</name><argument_list pos:start="337:20" pos:end="337:55">(<argument pos:start="337:21" pos:end="337:26"><expr pos:start="337:21" pos:end="337:26"><name pos:start="337:21" pos:end="337:26">stderr</name></expr></argument>, <argument pos:start="337:29" pos:end="337:54"><expr pos:start="337:29" pos:end="337:54"><literal type="string" pos:start="337:29" pos:end="337:54">"qemu: Supported formats:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="339:13" pos:end="339:57"><expr pos:start="339:13" pos:end="339:56"><call pos:start="339:13" pos:end="339:56"><name pos:start="339:13" pos:end="339:31">bdrv_iterate_format</name><argument_list pos:start="339:32" pos:end="339:56">(<argument pos:start="339:33" pos:end="339:49"><expr pos:start="339:33" pos:end="339:49"><name pos:start="339:33" pos:end="339:49">bdrv_format_print</name></expr></argument>, <argument pos:start="339:52" pos:end="339:55"><expr pos:start="339:52" pos:end="339:55"><name pos:start="339:52" pos:end="339:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="341:13" pos:end="341:34"><expr pos:start="341:13" pos:end="341:33"><call pos:start="341:13" pos:end="341:33"><name pos:start="341:13" pos:end="341:19">fprintf</name><argument_list pos:start="341:20" pos:end="341:33">(<argument pos:start="341:21" pos:end="341:26"><expr pos:start="341:21" pos:end="341:26"><name pos:start="341:21" pos:end="341:26">stderr</name></expr></argument>, <argument pos:start="341:29" pos:end="341:32"><expr pos:start="341:29" pos:end="341:32"><literal type="string" pos:start="341:29" pos:end="341:32">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="343:13" pos:end="343:24">return <expr pos:start="343:20" pos:end="343:23"><name pos:start="343:20" pos:end="343:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="347:9" pos:end="347:48"><expr pos:start="347:9" pos:end="347:47"><name pos:start="347:9" pos:end="347:11">drv</name> <operator pos:start="347:13" pos:end="347:13">=</operator> <call pos:start="347:15" pos:end="347:47"><name pos:start="347:15" pos:end="347:42">bdrv_find_whitelisted_format</name><argument_list pos:start="347:43" pos:end="347:47">(<argument pos:start="347:44" pos:end="347:46"><expr pos:start="347:44" pos:end="347:46"><name pos:start="347:44" pos:end="347:46">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="349:9" pos:end="355:9"><if pos:start="349:9" pos:end="355:9">if <condition pos:start="349:12" pos:end="349:17">(<expr pos:start="349:13" pos:end="349:16"><operator pos:start="349:13" pos:end="349:13">!</operator><name pos:start="349:14" pos:end="349:16">drv</name></expr>)</condition> <block pos:start="349:19" pos:end="355:9">{<block_content pos:start="351:13" pos:end="353:24">

            <expr_stmt pos:start="351:13" pos:end="351:64"><expr pos:start="351:13" pos:end="351:63"><call pos:start="351:13" pos:end="351:63"><name pos:start="351:13" pos:end="351:19">fprintf</name><argument_list pos:start="351:20" pos:end="351:63">(<argument pos:start="351:21" pos:end="351:26"><expr pos:start="351:21" pos:end="351:26"><name pos:start="351:21" pos:end="351:26">stderr</name></expr></argument>, <argument pos:start="351:29" pos:end="351:57"><expr pos:start="351:29" pos:end="351:57"><literal type="string" pos:start="351:29" pos:end="351:57">"qemu: '%s' invalid format\n"</literal></expr></argument>, <argument pos:start="351:60" pos:end="351:62"><expr pos:start="351:60" pos:end="351:62"><name pos:start="351:60" pos:end="351:62">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="353:13" pos:end="353:24">return <expr pos:start="353:20" pos:end="353:23"><name pos:start="353:20" pos:end="353:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="361:5" pos:end="361:43"><expr pos:start="361:5" pos:end="361:42"><name pos:start="361:5" pos:end="361:18">on_write_error</name> <operator pos:start="361:20" pos:end="361:20">=</operator> <name pos:start="361:22" pos:end="361:42">BLOCK_ERR_STOP_ENOSPC</name></expr>;</expr_stmt>

    <if_stmt pos:start="363:5" pos:end="383:5"><if pos:start="363:5" pos:end="383:5">if <condition pos:start="363:8" pos:end="363:53">(<expr pos:start="363:9" pos:end="363:52"><operator pos:start="363:9" pos:end="363:9">(</operator><name pos:start="363:10" pos:end="363:12">buf</name> <operator pos:start="363:14" pos:end="363:14">=</operator> <call pos:start="363:16" pos:end="363:43"><name pos:start="363:16" pos:end="363:27">qemu_opt_get</name><argument_list pos:start="363:28" pos:end="363:43">(<argument pos:start="363:29" pos:end="363:32"><expr pos:start="363:29" pos:end="363:32"><name pos:start="363:29" pos:end="363:32">opts</name></expr></argument>, <argument pos:start="363:35" pos:end="363:42"><expr pos:start="363:35" pos:end="363:42"><literal type="string" pos:start="363:35" pos:end="363:42">"werror"</literal></expr></argument>)</argument_list></call><operator pos:start="363:44" pos:end="363:44">)</operator> <operator pos:start="363:46" pos:end="363:47">!=</operator> <name pos:start="363:49" pos:end="363:52">NULL</name></expr>)</condition> <block pos:start="363:55" pos:end="383:5">{<block_content pos:start="365:9" pos:end="381:9">

        <if_stmt pos:start="365:9" pos:end="371:9"><if pos:start="365:9" pos:end="371:9">if <condition pos:start="365:12" pos:end="365:86">(<expr pos:start="365:13" pos:end="365:85"><name pos:start="365:13" pos:end="365:16">type</name> <operator pos:start="365:18" pos:end="365:19">!=</operator> <name pos:start="365:21" pos:end="365:26">IF_IDE</name> <operator pos:start="365:28" pos:end="365:29">&amp;&amp;</operator> <name pos:start="365:31" pos:end="365:34">type</name> <operator pos:start="365:36" pos:end="365:37">!=</operator> <name pos:start="365:39" pos:end="365:45">IF_SCSI</name> <operator pos:start="365:47" pos:end="365:48">&amp;&amp;</operator> <name pos:start="365:50" pos:end="365:53">type</name> <operator pos:start="365:55" pos:end="365:56">!=</operator> <name pos:start="365:58" pos:end="365:66">IF_VIRTIO</name> <operator pos:start="365:68" pos:end="365:69">&amp;&amp;</operator> <name pos:start="365:71" pos:end="365:74">type</name> <operator pos:start="365:76" pos:end="365:77">!=</operator> <name pos:start="365:79" pos:end="365:85">IF_NONE</name></expr>)</condition> <block pos:start="365:88" pos:end="371:9">{<block_content pos:start="367:13" pos:end="369:24">

            <expr_stmt pos:start="367:13" pos:end="367:71"><expr pos:start="367:13" pos:end="367:70"><call pos:start="367:13" pos:end="367:70"><name pos:start="367:13" pos:end="367:19">fprintf</name><argument_list pos:start="367:20" pos:end="367:70">(<argument pos:start="367:21" pos:end="367:26"><expr pos:start="367:21" pos:end="367:26"><name pos:start="367:21" pos:end="367:26">stderr</name></expr></argument>, <argument pos:start="367:29" pos:end="367:69"><expr pos:start="367:29" pos:end="367:69"><literal type="string" pos:start="367:29" pos:end="367:69">"werror is no supported by this format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="369:13" pos:end="369:24">return <expr pos:start="369:20" pos:end="369:23"><name pos:start="369:20" pos:end="369:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="375:9" pos:end="375:58"><expr pos:start="375:9" pos:end="375:57"><name pos:start="375:9" pos:end="375:22">on_write_error</name> <operator pos:start="375:24" pos:end="375:24">=</operator> <call pos:start="375:26" pos:end="375:57"><name pos:start="375:26" pos:end="375:49">parse_block_error_action</name><argument_list pos:start="375:50" pos:end="375:57">(<argument pos:start="375:51" pos:end="375:53"><expr pos:start="375:51" pos:end="375:53"><name pos:start="375:51" pos:end="375:53">buf</name></expr></argument>, <argument pos:start="375:56" pos:end="375:56"><expr pos:start="375:56" pos:end="375:56"><literal type="number" pos:start="375:56" pos:end="375:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="377:9" pos:end="381:9"><if pos:start="377:9" pos:end="381:9">if <condition pos:start="377:12" pos:end="377:31">(<expr pos:start="377:13" pos:end="377:30"><name pos:start="377:13" pos:end="377:26">on_write_error</name> <operator pos:start="377:28" pos:end="377:28">&lt;</operator> <literal type="number" pos:start="377:30" pos:end="377:30">0</literal></expr>)</condition> <block pos:start="377:33" pos:end="381:9">{<block_content pos:start="379:13" pos:end="379:24">

            <return pos:start="379:13" pos:end="379:24">return <expr pos:start="379:20" pos:end="379:23"><name pos:start="379:20" pos:end="379:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="387:5" pos:end="387:37"><expr pos:start="387:5" pos:end="387:36"><name pos:start="387:5" pos:end="387:17">on_read_error</name> <operator pos:start="387:19" pos:end="387:19">=</operator> <name pos:start="387:21" pos:end="387:36">BLOCK_ERR_REPORT</name></expr>;</expr_stmt>

    <if_stmt pos:start="389:5" pos:end="409:5"><if pos:start="389:5" pos:end="409:5">if <condition pos:start="389:8" pos:end="389:53">(<expr pos:start="389:9" pos:end="389:52"><operator pos:start="389:9" pos:end="389:9">(</operator><name pos:start="389:10" pos:end="389:12">buf</name> <operator pos:start="389:14" pos:end="389:14">=</operator> <call pos:start="389:16" pos:end="389:43"><name pos:start="389:16" pos:end="389:27">qemu_opt_get</name><argument_list pos:start="389:28" pos:end="389:43">(<argument pos:start="389:29" pos:end="389:32"><expr pos:start="389:29" pos:end="389:32"><name pos:start="389:29" pos:end="389:32">opts</name></expr></argument>, <argument pos:start="389:35" pos:end="389:42"><expr pos:start="389:35" pos:end="389:42"><literal type="string" pos:start="389:35" pos:end="389:42">"rerror"</literal></expr></argument>)</argument_list></call><operator pos:start="389:44" pos:end="389:44">)</operator> <operator pos:start="389:46" pos:end="389:47">!=</operator> <name pos:start="389:49" pos:end="389:52">NULL</name></expr>)</condition> <block pos:start="389:55" pos:end="409:5">{<block_content pos:start="391:9" pos:end="407:9">

        <if_stmt pos:start="391:9" pos:end="397:9"><if pos:start="391:9" pos:end="397:9">if <condition pos:start="391:12" pos:end="391:67">(<expr pos:start="391:13" pos:end="391:66"><name pos:start="391:13" pos:end="391:16">type</name> <operator pos:start="391:18" pos:end="391:19">!=</operator> <name pos:start="391:21" pos:end="391:26">IF_IDE</name> <operator pos:start="391:28" pos:end="391:29">&amp;&amp;</operator> <name pos:start="391:31" pos:end="391:34">type</name> <operator pos:start="391:36" pos:end="391:37">!=</operator> <name pos:start="391:39" pos:end="391:47">IF_VIRTIO</name> <operator pos:start="391:49" pos:end="391:50">&amp;&amp;</operator> <name pos:start="391:52" pos:end="391:55">type</name> <operator pos:start="391:57" pos:end="391:58">!=</operator> <name pos:start="391:60" pos:end="391:66">IF_NONE</name></expr>)</condition> <block pos:start="391:69" pos:end="397:9">{<block_content pos:start="393:13" pos:end="395:24">

            <expr_stmt pos:start="393:13" pos:end="393:71"><expr pos:start="393:13" pos:end="393:70"><call pos:start="393:13" pos:end="393:70"><name pos:start="393:13" pos:end="393:19">fprintf</name><argument_list pos:start="393:20" pos:end="393:70">(<argument pos:start="393:21" pos:end="393:26"><expr pos:start="393:21" pos:end="393:26"><name pos:start="393:21" pos:end="393:26">stderr</name></expr></argument>, <argument pos:start="393:29" pos:end="393:69"><expr pos:start="393:29" pos:end="393:69"><literal type="string" pos:start="393:29" pos:end="393:69">"rerror is no supported by this format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="395:13" pos:end="395:24">return <expr pos:start="395:20" pos:end="395:23"><name pos:start="395:20" pos:end="395:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="401:9" pos:end="401:57"><expr pos:start="401:9" pos:end="401:56"><name pos:start="401:9" pos:end="401:21">on_read_error</name> <operator pos:start="401:23" pos:end="401:23">=</operator> <call pos:start="401:25" pos:end="401:56"><name pos:start="401:25" pos:end="401:48">parse_block_error_action</name><argument_list pos:start="401:49" pos:end="401:56">(<argument pos:start="401:50" pos:end="401:52"><expr pos:start="401:50" pos:end="401:52"><name pos:start="401:50" pos:end="401:52">buf</name></expr></argument>, <argument pos:start="401:55" pos:end="401:55"><expr pos:start="401:55" pos:end="401:55"><literal type="number" pos:start="401:55" pos:end="401:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="403:9" pos:end="407:9"><if pos:start="403:9" pos:end="407:9">if <condition pos:start="403:12" pos:end="403:30">(<expr pos:start="403:13" pos:end="403:29"><name pos:start="403:13" pos:end="403:25">on_read_error</name> <operator pos:start="403:27" pos:end="403:27">&lt;</operator> <literal type="number" pos:start="403:29" pos:end="403:29">0</literal></expr>)</condition> <block pos:start="403:32" pos:end="407:9">{<block_content pos:start="405:13" pos:end="405:24">

            <return pos:start="405:13" pos:end="405:24">return <expr pos:start="405:20" pos:end="405:23"><name pos:start="405:20" pos:end="405:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="413:5" pos:end="423:5"><if pos:start="413:5" pos:end="423:5">if <condition pos:start="413:8" pos:end="413:55">(<expr pos:start="413:9" pos:end="413:54"><operator pos:start="413:9" pos:end="413:9">(</operator><name pos:start="413:10" pos:end="413:16">devaddr</name> <operator pos:start="413:18" pos:end="413:18">=</operator> <call pos:start="413:20" pos:end="413:45"><name pos:start="413:20" pos:end="413:31">qemu_opt_get</name><argument_list pos:start="413:32" pos:end="413:45">(<argument pos:start="413:33" pos:end="413:36"><expr pos:start="413:33" pos:end="413:36"><name pos:start="413:33" pos:end="413:36">opts</name></expr></argument>, <argument pos:start="413:39" pos:end="413:44"><expr pos:start="413:39" pos:end="413:44"><literal type="string" pos:start="413:39" pos:end="413:44">"addr"</literal></expr></argument>)</argument_list></call><operator pos:start="413:46" pos:end="413:46">)</operator> <operator pos:start="413:48" pos:end="413:49">!=</operator> <name pos:start="413:51" pos:end="413:54">NULL</name></expr>)</condition> <block pos:start="413:57" pos:end="423:5">{<block_content pos:start="415:9" pos:end="421:9">

        <if_stmt pos:start="415:9" pos:end="421:9"><if pos:start="415:9" pos:end="421:9">if <condition pos:start="415:12" pos:end="415:30">(<expr pos:start="415:13" pos:end="415:29"><name pos:start="415:13" pos:end="415:16">type</name> <operator pos:start="415:18" pos:end="415:19">!=</operator> <name pos:start="415:21" pos:end="415:29">IF_VIRTIO</name></expr>)</condition> <block pos:start="415:32" pos:end="421:9">{<block_content pos:start="417:13" pos:end="419:24">

            <expr_stmt pos:start="417:13" pos:end="417:55"><expr pos:start="417:13" pos:end="417:54"><call pos:start="417:13" pos:end="417:54"><name pos:start="417:13" pos:end="417:19">fprintf</name><argument_list pos:start="417:20" pos:end="417:54">(<argument pos:start="417:21" pos:end="417:26"><expr pos:start="417:21" pos:end="417:26"><name pos:start="417:21" pos:end="417:26">stderr</name></expr></argument>, <argument pos:start="417:29" pos:end="417:53"><expr pos:start="417:29" pos:end="417:53"><literal type="string" pos:start="417:29" pos:end="417:53">"addr is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="419:13" pos:end="419:24">return <expr pos:start="419:20" pos:end="419:23"><name pos:start="419:20" pos:end="419:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="427:5" pos:end="427:46">/* compute bus and unit according index */</comment>



    <if_stmt pos:start="431:5" pos:end="459:5"><if pos:start="431:5" pos:end="459:5">if <condition pos:start="431:8" pos:end="431:20">(<expr pos:start="431:9" pos:end="431:19"><name pos:start="431:9" pos:end="431:13">index</name> <operator pos:start="431:15" pos:end="431:16">!=</operator> <operator pos:start="431:18" pos:end="431:18">-</operator><literal type="number" pos:start="431:19" pos:end="431:19">1</literal></expr>)</condition> <block pos:start="431:22" pos:end="459:5">{<block_content pos:start="433:9" pos:end="457:9">

        <if_stmt pos:start="433:9" pos:end="441:9"><if pos:start="433:9" pos:end="441:9">if <condition pos:start="433:12" pos:end="433:41">(<expr pos:start="433:13" pos:end="433:40"><name pos:start="433:13" pos:end="433:18">bus_id</name> <operator pos:start="433:20" pos:end="433:21">!=</operator> <literal type="number" pos:start="433:23" pos:end="433:23">0</literal> <operator pos:start="433:25" pos:end="433:26">||</operator> <name pos:start="433:28" pos:end="433:34">unit_id</name> <operator pos:start="433:36" pos:end="433:37">!=</operator> <operator pos:start="433:39" pos:end="433:39">-</operator><literal type="number" pos:start="433:40" pos:end="433:40">1</literal></expr>)</condition> <block pos:start="433:43" pos:end="441:9">{<block_content pos:start="435:13" pos:end="439:24">

            <expr_stmt pos:start="435:13" pos:end="437:70"><expr pos:start="435:13" pos:end="437:69"><call pos:start="435:13" pos:end="437:69"><name pos:start="435:13" pos:end="435:19">fprintf</name><argument_list pos:start="435:20" pos:end="437:69">(<argument pos:start="435:21" pos:end="435:26"><expr pos:start="435:21" pos:end="435:26"><name pos:start="435:21" pos:end="435:26">stderr</name></expr></argument>,

                    <argument pos:start="437:21" pos:end="437:68"><expr pos:start="437:21" pos:end="437:68"><literal type="string" pos:start="437:21" pos:end="437:68">"qemu: index cannot be used with bus and unit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="439:13" pos:end="439:24">return <expr pos:start="439:20" pos:end="439:23"><name pos:start="439:20" pos:end="439:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="443:9" pos:end="457:9"><if pos:start="443:9" pos:end="451:9">if <condition pos:start="443:12" pos:end="443:26">(<expr pos:start="443:13" pos:end="443:25"><name pos:start="443:13" pos:end="443:20">max_devs</name> <operator pos:start="443:22" pos:end="443:23">==</operator> <literal type="number" pos:start="443:25" pos:end="443:25">0</literal></expr>)</condition>

        <block pos:start="445:9" pos:end="451:9">{<block_content pos:start="447:13" pos:end="449:23">

            <expr_stmt pos:start="447:13" pos:end="447:28"><expr pos:start="447:13" pos:end="447:27"><name pos:start="447:13" pos:end="447:19">unit_id</name> <operator pos:start="447:21" pos:end="447:21">=</operator> <name pos:start="447:23" pos:end="447:27">index</name></expr>;</expr_stmt>

            <expr_stmt pos:start="449:13" pos:end="449:23"><expr pos:start="449:13" pos:end="449:22"><name pos:start="449:13" pos:end="449:18">bus_id</name> <operator pos:start="449:20" pos:end="449:20">=</operator> <literal type="number" pos:start="449:22" pos:end="449:22">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="451:11" pos:end="457:9">else <block pos:start="451:16" pos:end="457:9">{<block_content pos:start="453:13" pos:end="455:38">

            <expr_stmt pos:start="453:13" pos:end="453:39"><expr pos:start="453:13" pos:end="453:38"><name pos:start="453:13" pos:end="453:19">unit_id</name> <operator pos:start="453:21" pos:end="453:21">=</operator> <name pos:start="453:23" pos:end="453:27">index</name> <operator pos:start="453:29" pos:end="453:29">%</operator> <name pos:start="453:31" pos:end="453:38">max_devs</name></expr>;</expr_stmt>

            <expr_stmt pos:start="455:13" pos:end="455:38"><expr pos:start="455:13" pos:end="455:37"><name pos:start="455:13" pos:end="455:18">bus_id</name> <operator pos:start="455:20" pos:end="455:20">=</operator> <name pos:start="455:22" pos:end="455:26">index</name> <operator pos:start="455:28" pos:end="455:28">/</operator> <name pos:start="455:30" pos:end="455:37">max_devs</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="463:5" pos:end="467:7">/* if user doesn't specify a unit_id,

     * try to find the first free

     */</comment>



    <if_stmt pos:start="471:5" pos:end="489:5"><if pos:start="471:5" pos:end="489:5">if <condition pos:start="471:8" pos:end="471:22">(<expr pos:start="471:9" pos:end="471:21"><name pos:start="471:9" pos:end="471:15">unit_id</name> <operator pos:start="471:17" pos:end="471:18">==</operator> <operator pos:start="471:20" pos:end="471:20">-</operator><literal type="number" pos:start="471:21" pos:end="471:21">1</literal></expr>)</condition> <block pos:start="471:24" pos:end="489:5">{<block_content pos:start="473:8" pos:end="487:8">

       <expr_stmt pos:start="473:8" pos:end="473:19"><expr pos:start="473:8" pos:end="473:18"><name pos:start="473:8" pos:end="473:14">unit_id</name> <operator pos:start="473:16" pos:end="473:16">=</operator> <literal type="number" pos:start="473:18" pos:end="473:18">0</literal></expr>;</expr_stmt>

       <while pos:start="475:8" pos:end="487:8">while <condition pos:start="475:14" pos:end="475:55">(<expr pos:start="475:15" pos:end="475:54"><call pos:start="475:15" pos:end="475:46"><name pos:start="475:15" pos:end="475:23">drive_get</name><argument_list pos:start="475:24" pos:end="475:46">(<argument pos:start="475:25" pos:end="475:28"><expr pos:start="475:25" pos:end="475:28"><name pos:start="475:25" pos:end="475:28">type</name></expr></argument>, <argument pos:start="475:31" pos:end="475:36"><expr pos:start="475:31" pos:end="475:36"><name pos:start="475:31" pos:end="475:36">bus_id</name></expr></argument>, <argument pos:start="475:39" pos:end="475:45"><expr pos:start="475:39" pos:end="475:45"><name pos:start="475:39" pos:end="475:45">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="475:48" pos:end="475:49">!=</operator> <name pos:start="475:51" pos:end="475:54">NULL</name></expr>)</condition> <block pos:start="475:57" pos:end="487:8">{<block_content pos:start="477:12" pos:end="485:12">

           <expr_stmt pos:start="477:12" pos:end="477:21"><expr pos:start="477:12" pos:end="477:20"><name pos:start="477:12" pos:end="477:18">unit_id</name><operator pos:start="477:19" pos:end="477:20">++</operator></expr>;</expr_stmt>

           <if_stmt pos:start="479:12" pos:end="485:12"><if pos:start="479:12" pos:end="485:12">if <condition pos:start="479:15" pos:end="479:47">(<expr pos:start="479:16" pos:end="479:46"><name pos:start="479:16" pos:end="479:23">max_devs</name> <operator pos:start="479:25" pos:end="479:26">&amp;&amp;</operator> <name pos:start="479:28" pos:end="479:34">unit_id</name> <operator pos:start="479:36" pos:end="479:37">&gt;=</operator> <name pos:start="479:39" pos:end="479:46">max_devs</name></expr>)</condition> <block pos:start="479:49" pos:end="485:12">{<block_content pos:start="481:16" pos:end="483:24">

               <expr_stmt pos:start="481:16" pos:end="481:35"><expr pos:start="481:16" pos:end="481:34"><name pos:start="481:16" pos:end="481:22">unit_id</name> <operator pos:start="481:24" pos:end="481:25">-=</operator> <name pos:start="481:27" pos:end="481:34">max_devs</name></expr>;</expr_stmt>

               <expr_stmt pos:start="483:16" pos:end="483:24"><expr pos:start="483:16" pos:end="483:23"><name pos:start="483:16" pos:end="483:21">bus_id</name><operator pos:start="483:22" pos:end="483:23">++</operator></expr>;</expr_stmt>

           </block_content>}</block></if></if_stmt>

       </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="493:5" pos:end="493:23">/* check unit id */</comment>



    <if_stmt pos:start="497:5" pos:end="505:5"><if pos:start="497:5" pos:end="505:5">if <condition pos:start="497:8" pos:end="497:40">(<expr pos:start="497:9" pos:end="497:39"><name pos:start="497:9" pos:end="497:16">max_devs</name> <operator pos:start="497:18" pos:end="497:19">&amp;&amp;</operator> <name pos:start="497:21" pos:end="497:27">unit_id</name> <operator pos:start="497:29" pos:end="497:30">&gt;=</operator> <name pos:start="497:32" pos:end="497:39">max_devs</name></expr>)</condition> <block pos:start="497:42" pos:end="505:5">{<block_content pos:start="499:9" pos:end="503:20">

        <expr_stmt pos:start="499:9" pos:end="501:39"><expr pos:start="499:9" pos:end="501:38"><call pos:start="499:9" pos:end="501:38"><name pos:start="499:9" pos:end="499:15">fprintf</name><argument_list pos:start="499:16" pos:end="501:38">(<argument pos:start="499:17" pos:end="499:22"><expr pos:start="499:17" pos:end="499:22"><name pos:start="499:17" pos:end="499:22">stderr</name></expr></argument>, <argument pos:start="499:25" pos:end="499:61"><expr pos:start="499:25" pos:end="499:61"><literal type="string" pos:start="499:25" pos:end="499:61">"qemu: unit %d too big (max is %d)\n"</literal></expr></argument>,

                <argument pos:start="501:17" pos:end="501:23"><expr pos:start="501:17" pos:end="501:23"><name pos:start="501:17" pos:end="501:23">unit_id</name></expr></argument>, <argument pos:start="501:26" pos:end="501:37"><expr pos:start="501:26" pos:end="501:37"><name pos:start="501:26" pos:end="501:33">max_devs</name> <operator pos:start="501:35" pos:end="501:35">-</operator> <literal type="number" pos:start="501:37" pos:end="501:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="503:9" pos:end="503:20">return <expr pos:start="503:16" pos:end="503:19"><name pos:start="503:16" pos:end="503:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="509:5" pos:end="513:7">/*

     * ignore multiple definitions

     */</comment>



    <if_stmt pos:start="517:5" pos:end="523:5"><if pos:start="517:5" pos:end="523:5">if <condition pos:start="517:8" pos:end="517:49">(<expr pos:start="517:9" pos:end="517:48"><call pos:start="517:9" pos:end="517:40"><name pos:start="517:9" pos:end="517:17">drive_get</name><argument_list pos:start="517:18" pos:end="517:40">(<argument pos:start="517:19" pos:end="517:22"><expr pos:start="517:19" pos:end="517:22"><name pos:start="517:19" pos:end="517:22">type</name></expr></argument>, <argument pos:start="517:25" pos:end="517:30"><expr pos:start="517:25" pos:end="517:30"><name pos:start="517:25" pos:end="517:30">bus_id</name></expr></argument>, <argument pos:start="517:33" pos:end="517:39"><expr pos:start="517:33" pos:end="517:39"><name pos:start="517:33" pos:end="517:39">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="517:42" pos:end="517:43">!=</operator> <name pos:start="517:45" pos:end="517:48">NULL</name></expr>)</condition> <block pos:start="517:51" pos:end="523:5">{<block_content pos:start="519:9" pos:end="521:20">

        <expr_stmt pos:start="519:9" pos:end="519:25"><expr pos:start="519:9" pos:end="519:24"><operator pos:start="519:9" pos:end="519:9">*</operator><name pos:start="519:10" pos:end="519:20">fatal_error</name> <operator pos:start="519:22" pos:end="519:22">=</operator> <literal type="number" pos:start="519:24" pos:end="519:24">0</literal></expr>;</expr_stmt>

        <return pos:start="521:9" pos:end="521:20">return <expr pos:start="521:16" pos:end="521:19"><name pos:start="521:16" pos:end="521:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="527:5" pos:end="527:14">/* init */</comment>



    <expr_stmt pos:start="531:5" pos:end="531:41"><expr pos:start="531:5" pos:end="531:40"><name pos:start="531:5" pos:end="531:9">dinfo</name> <operator pos:start="531:11" pos:end="531:11">=</operator> <call pos:start="531:13" pos:end="531:40"><name pos:start="531:13" pos:end="531:24">qemu_mallocz</name><argument_list pos:start="531:25" pos:end="531:40">(<argument pos:start="531:26" pos:end="531:39"><expr pos:start="531:26" pos:end="531:39"><sizeof pos:start="531:26" pos:end="531:39">sizeof<argument_list pos:start="531:32" pos:end="531:39">(<argument pos:start="531:33" pos:end="531:38"><expr pos:start="531:33" pos:end="531:38"><operator pos:start="531:33" pos:end="531:33">*</operator><name pos:start="531:34" pos:end="531:38">dinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="533:5" pos:end="559:5"><if pos:start="533:5" pos:end="537:5">if <condition pos:start="533:8" pos:end="533:43">(<expr pos:start="533:9" pos:end="533:42"><operator pos:start="533:9" pos:end="533:9">(</operator><name pos:start="533:10" pos:end="533:12">buf</name> <operator pos:start="533:14" pos:end="533:14">=</operator> <call pos:start="533:16" pos:end="533:33"><name pos:start="533:16" pos:end="533:27">qemu_opts_id</name><argument_list pos:start="533:28" pos:end="533:33">(<argument pos:start="533:29" pos:end="533:32"><expr pos:start="533:29" pos:end="533:32"><name pos:start="533:29" pos:end="533:32">opts</name></expr></argument>)</argument_list></call><operator pos:start="533:34" pos:end="533:34">)</operator> <operator pos:start="533:36" pos:end="533:37">!=</operator> <name pos:start="533:39" pos:end="533:42">NULL</name></expr>)</condition> <block pos:start="533:45" pos:end="537:5">{<block_content pos:start="535:9" pos:end="535:37">

        <expr_stmt pos:start="535:9" pos:end="535:37"><expr pos:start="535:9" pos:end="535:36"><name pos:start="535:9" pos:end="535:17"><name pos:start="535:9" pos:end="535:13">dinfo</name><operator pos:start="535:14" pos:end="535:15">-&gt;</operator><name pos:start="535:16" pos:end="535:17">id</name></name> <operator pos:start="535:19" pos:end="535:19">=</operator> <call pos:start="535:21" pos:end="535:36"><name pos:start="535:21" pos:end="535:31">qemu_strdup</name><argument_list pos:start="535:32" pos:end="535:36">(<argument pos:start="535:33" pos:end="535:35"><expr pos:start="535:33" pos:end="535:35"><name pos:start="535:33" pos:end="535:35">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="537:7" pos:end="559:5">else <block pos:start="537:12" pos:end="559:5">{<block_content pos:start="541:9" pos:end="557:49">

        <comment type="block" pos:start="539:9" pos:end="539:42">/* no id supplied -&gt; create one */</comment>

        <expr_stmt pos:start="541:9" pos:end="541:37"><expr pos:start="541:9" pos:end="541:36"><name pos:start="541:9" pos:end="541:17"><name pos:start="541:9" pos:end="541:13">dinfo</name><operator pos:start="541:14" pos:end="541:15">-&gt;</operator><name pos:start="541:16" pos:end="541:17">id</name></name> <operator pos:start="541:19" pos:end="541:19">=</operator> <call pos:start="541:21" pos:end="541:36"><name pos:start="541:21" pos:end="541:32">qemu_mallocz</name><argument_list pos:start="541:33" pos:end="541:36">(<argument pos:start="541:34" pos:end="541:35"><expr pos:start="541:34" pos:end="541:35"><literal type="number" pos:start="541:34" pos:end="541:35">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="543:9" pos:end="545:62"><if pos:start="543:9" pos:end="545:62">if <condition pos:start="543:12" pos:end="543:46">(<expr pos:start="543:13" pos:end="543:45"><name pos:start="543:13" pos:end="543:16">type</name> <operator pos:start="543:18" pos:end="543:19">==</operator> <name pos:start="543:21" pos:end="543:26">IF_IDE</name> <operator pos:start="543:28" pos:end="543:29">||</operator> <name pos:start="543:31" pos:end="543:34">type</name> <operator pos:start="543:36" pos:end="543:37">==</operator> <name pos:start="543:39" pos:end="543:45">IF_SCSI</name></expr>)</condition><block type="pseudo" pos:start="545:13" pos:end="545:62"><block_content pos:start="545:13" pos:end="545:62">

            <expr_stmt pos:start="545:13" pos:end="545:62"><expr pos:start="545:13" pos:end="545:61"><name pos:start="545:13" pos:end="545:20">mediastr</name> <operator pos:start="545:22" pos:end="545:22">=</operator> <ternary pos:start="545:24" pos:end="545:61"><condition pos:start="545:24" pos:end="545:47"><expr pos:start="545:24" pos:end="545:45"><operator pos:start="545:24" pos:end="545:24">(</operator><name pos:start="545:25" pos:end="545:29">media</name> <operator pos:start="545:31" pos:end="545:32">==</operator> <name pos:start="545:34" pos:end="545:44">MEDIA_CDROM</name><operator pos:start="545:45" pos:end="545:45">)</operator></expr> ?</condition><then pos:start="545:49" pos:end="545:53"> <expr pos:start="545:49" pos:end="545:53"><literal type="string" pos:start="545:49" pos:end="545:53">"-cd"</literal></expr> </then><else pos:start="545:55" pos:end="545:61">: <expr pos:start="545:57" pos:end="545:61"><literal type="string" pos:start="545:57" pos:end="545:61">"-hd"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="547:9" pos:end="557:49"><if pos:start="547:9" pos:end="551:57">if <condition pos:start="547:12" pos:end="547:21">(<expr pos:start="547:13" pos:end="547:20"><name pos:start="547:13" pos:end="547:20">max_devs</name></expr>)</condition><block type="pseudo" pos:start="549:13" pos:end="551:57"><block_content pos:start="549:13" pos:end="551:57">

            <expr_stmt pos:start="549:13" pos:end="551:57"><expr pos:start="549:13" pos:end="551:56"><call pos:start="549:13" pos:end="551:56"><name pos:start="549:13" pos:end="549:20">snprintf</name><argument_list pos:start="549:21" pos:end="551:56">(<argument pos:start="549:22" pos:end="549:30"><expr pos:start="549:22" pos:end="549:30"><name pos:start="549:22" pos:end="549:30"><name pos:start="549:22" pos:end="549:26">dinfo</name><operator pos:start="549:27" pos:end="549:28">-&gt;</operator><name pos:start="549:29" pos:end="549:30">id</name></name></expr></argument>, <argument pos:start="549:33" pos:end="549:34"><expr pos:start="549:33" pos:end="549:34"><literal type="number" pos:start="549:33" pos:end="549:34">32</literal></expr></argument>, <argument pos:start="549:37" pos:end="549:46"><expr pos:start="549:37" pos:end="549:46"><literal type="string" pos:start="549:37" pos:end="549:46">"%s%i%s%i"</literal></expr></argument>,

                     <argument pos:start="551:22" pos:end="551:28"><expr pos:start="551:22" pos:end="551:28"><name pos:start="551:22" pos:end="551:28">devname</name></expr></argument>, <argument pos:start="551:31" pos:end="551:36"><expr pos:start="551:31" pos:end="551:36"><name pos:start="551:31" pos:end="551:36">bus_id</name></expr></argument>, <argument pos:start="551:39" pos:end="551:46"><expr pos:start="551:39" pos:end="551:46"><name pos:start="551:39" pos:end="551:46">mediastr</name></expr></argument>, <argument pos:start="551:49" pos:end="551:55"><expr pos:start="551:49" pos:end="551:55"><name pos:start="551:49" pos:end="551:55">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="553:9" pos:end="557:49">else<block type="pseudo" pos:start="555:13" pos:end="557:49"><block_content pos:start="555:13" pos:end="557:49">

            <expr_stmt pos:start="555:13" pos:end="557:49"><expr pos:start="555:13" pos:end="557:48"><call pos:start="555:13" pos:end="557:48"><name pos:start="555:13" pos:end="555:20">snprintf</name><argument_list pos:start="555:21" pos:end="557:48">(<argument pos:start="555:22" pos:end="555:30"><expr pos:start="555:22" pos:end="555:30"><name pos:start="555:22" pos:end="555:30"><name pos:start="555:22" pos:end="555:26">dinfo</name><operator pos:start="555:27" pos:end="555:28">-&gt;</operator><name pos:start="555:29" pos:end="555:30">id</name></name></expr></argument>, <argument pos:start="555:33" pos:end="555:34"><expr pos:start="555:33" pos:end="555:34"><literal type="number" pos:start="555:33" pos:end="555:34">32</literal></expr></argument>, <argument pos:start="555:37" pos:end="555:44"><expr pos:start="555:37" pos:end="555:44"><literal type="string" pos:start="555:37" pos:end="555:44">"%s%s%i"</literal></expr></argument>,

                     <argument pos:start="557:22" pos:end="557:28"><expr pos:start="557:22" pos:end="557:28"><name pos:start="557:22" pos:end="557:28">devname</name></expr></argument>, <argument pos:start="557:31" pos:end="557:38"><expr pos:start="557:31" pos:end="557:38"><name pos:start="557:31" pos:end="557:38">mediastr</name></expr></argument>, <argument pos:start="557:41" pos:end="557:47"><expr pos:start="557:41" pos:end="557:47"><name pos:start="557:41" pos:end="557:47">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="561:5" pos:end="561:38"><expr pos:start="561:5" pos:end="561:37"><name pos:start="561:5" pos:end="561:15"><name pos:start="561:5" pos:end="561:9">dinfo</name><operator pos:start="561:10" pos:end="561:11">-&gt;</operator><name pos:start="561:12" pos:end="561:15">bdrv</name></name> <operator pos:start="561:17" pos:end="561:17">=</operator> <call pos:start="561:19" pos:end="561:37"><name pos:start="561:19" pos:end="561:26">bdrv_new</name><argument_list pos:start="561:27" pos:end="561:37">(<argument pos:start="561:28" pos:end="561:36"><expr pos:start="561:28" pos:end="561:36"><name pos:start="561:28" pos:end="561:36"><name pos:start="561:28" pos:end="561:32">dinfo</name><operator pos:start="561:33" pos:end="561:34">-&gt;</operator><name pos:start="561:35" pos:end="561:36">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="563:5" pos:end="563:29"><expr pos:start="563:5" pos:end="563:28"><name pos:start="563:5" pos:end="563:18"><name pos:start="563:5" pos:end="563:9">dinfo</name><operator pos:start="563:10" pos:end="563:11">-&gt;</operator><name pos:start="563:12" pos:end="563:18">devaddr</name></name> <operator pos:start="563:20" pos:end="563:20">=</operator> <name pos:start="563:22" pos:end="563:28">devaddr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="565:5" pos:end="565:23"><expr pos:start="565:5" pos:end="565:22"><name pos:start="565:5" pos:end="565:15"><name pos:start="565:5" pos:end="565:9">dinfo</name><operator pos:start="565:10" pos:end="565:11">-&gt;</operator><name pos:start="565:12" pos:end="565:15">type</name></name> <operator pos:start="565:17" pos:end="565:17">=</operator> <name pos:start="565:19" pos:end="565:22">type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="567:5" pos:end="567:24"><expr pos:start="567:5" pos:end="567:23"><name pos:start="567:5" pos:end="567:14"><name pos:start="567:5" pos:end="567:9">dinfo</name><operator pos:start="567:10" pos:end="567:11">-&gt;</operator><name pos:start="567:12" pos:end="567:14">bus</name></name> <operator pos:start="567:16" pos:end="567:16">=</operator> <name pos:start="567:18" pos:end="567:23">bus_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="569:5" pos:end="569:26"><expr pos:start="569:5" pos:end="569:25"><name pos:start="569:5" pos:end="569:15"><name pos:start="569:5" pos:end="569:9">dinfo</name><operator pos:start="569:10" pos:end="569:11">-&gt;</operator><name pos:start="569:12" pos:end="569:15">unit</name></name> <operator pos:start="569:17" pos:end="569:17">=</operator> <name pos:start="569:19" pos:end="569:25">unit_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="571:5" pos:end="571:41"><expr pos:start="571:5" pos:end="571:40"><name pos:start="571:5" pos:end="571:24"><name pos:start="571:5" pos:end="571:9">dinfo</name><operator pos:start="571:10" pos:end="571:11">-&gt;</operator><name pos:start="571:12" pos:end="571:24">on_read_error</name></name> <operator pos:start="571:26" pos:end="571:26">=</operator> <name pos:start="571:28" pos:end="571:40">on_read_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="573:5" pos:end="573:43"><expr pos:start="573:5" pos:end="573:42"><name pos:start="573:5" pos:end="573:25"><name pos:start="573:5" pos:end="573:9">dinfo</name><operator pos:start="573:10" pos:end="573:11">-&gt;</operator><name pos:start="573:12" pos:end="573:25">on_write_error</name></name> <operator pos:start="573:27" pos:end="573:27">=</operator> <name pos:start="573:29" pos:end="573:42">on_write_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="575:5" pos:end="575:23"><expr pos:start="575:5" pos:end="575:22"><name pos:start="575:5" pos:end="575:15"><name pos:start="575:5" pos:end="575:9">dinfo</name><operator pos:start="575:10" pos:end="575:11">-&gt;</operator><name pos:start="575:12" pos:end="575:15">opts</name></name> <operator pos:start="575:17" pos:end="575:17">=</operator> <name pos:start="575:19" pos:end="575:22">opts</name></expr>;</expr_stmt>

    <if_stmt pos:start="577:5" pos:end="579:55"><if pos:start="577:5" pos:end="579:55">if <condition pos:start="577:8" pos:end="577:15">(<expr pos:start="577:9" pos:end="577:14"><name pos:start="577:9" pos:end="577:14">serial</name></expr>)</condition><block type="pseudo" pos:start="579:9" pos:end="579:55"><block_content pos:start="579:9" pos:end="579:55">

        <expr_stmt pos:start="579:9" pos:end="579:55"><expr pos:start="579:9" pos:end="579:54"><call pos:start="579:9" pos:end="579:54"><name pos:start="579:9" pos:end="579:15">strncpy</name><argument_list pos:start="579:16" pos:end="579:54">(<argument pos:start="579:17" pos:end="579:29"><expr pos:start="579:17" pos:end="579:29"><name pos:start="579:17" pos:end="579:29"><name pos:start="579:17" pos:end="579:21">dinfo</name><operator pos:start="579:22" pos:end="579:23">-&gt;</operator><name pos:start="579:24" pos:end="579:29">serial</name></name></expr></argument>, <argument pos:start="579:32" pos:end="579:37"><expr pos:start="579:32" pos:end="579:37"><name pos:start="579:32" pos:end="579:37">serial</name></expr></argument>, <argument pos:start="579:40" pos:end="579:53"><expr pos:start="579:40" pos:end="579:53"><sizeof pos:start="579:40" pos:end="579:53">sizeof<argument_list pos:start="579:46" pos:end="579:53">(<argument pos:start="579:47" pos:end="579:52"><expr pos:start="579:47" pos:end="579:52"><name pos:start="579:47" pos:end="579:52">serial</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="581:5" pos:end="581:45"><expr pos:start="581:5" pos:end="581:44"><call pos:start="581:5" pos:end="581:44"><name pos:start="581:5" pos:end="581:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="581:23" pos:end="581:44">(<argument pos:start="581:24" pos:end="581:30"><expr pos:start="581:24" pos:end="581:30"><operator pos:start="581:24" pos:end="581:24">&amp;</operator><name pos:start="581:25" pos:end="581:30">drives</name></expr></argument>, <argument pos:start="581:33" pos:end="581:37"><expr pos:start="581:33" pos:end="581:37"><name pos:start="581:33" pos:end="581:37">dinfo</name></expr></argument>, <argument pos:start="581:40" pos:end="581:43"><expr pos:start="581:40" pos:end="581:43"><name pos:start="581:40" pos:end="581:43">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="585:5" pos:end="657:5">switch<condition pos:start="585:11" pos:end="585:16">(<expr pos:start="585:12" pos:end="585:15"><name pos:start="585:12" pos:end="585:15">type</name></expr>)</condition> <block pos:start="585:18" pos:end="657:5">{<block_content pos:start="587:5" pos:end="655:16">

    <case pos:start="587:5" pos:end="587:16">case <expr pos:start="587:10" pos:end="587:15"><name pos:start="587:10" pos:end="587:15">IF_IDE</name></expr>:</case>

    <case pos:start="589:5" pos:end="589:17">case <expr pos:start="589:10" pos:end="589:16"><name pos:start="589:10" pos:end="589:16">IF_SCSI</name></expr>:</case>

    <case pos:start="591:5" pos:end="591:16">case <expr pos:start="591:10" pos:end="591:15"><name pos:start="591:10" pos:end="591:15">IF_XEN</name></expr>:</case>

    <case pos:start="593:5" pos:end="593:17">case <expr pos:start="593:10" pos:end="593:16"><name pos:start="593:10" pos:end="593:16">IF_NONE</name></expr>:</case>

        <switch pos:start="595:9" pos:end="615:9">switch<condition pos:start="595:15" pos:end="595:21">(<expr pos:start="595:16" pos:end="595:20"><name pos:start="595:16" pos:end="595:20">media</name></expr>)</condition> <block pos:start="595:23" pos:end="615:9">{<block_content pos:start="597:9" pos:end="613:18">

	<case pos:start="597:9" pos:end="597:24">case <expr pos:start="597:14" pos:end="597:23"><name pos:start="597:14" pos:end="597:23">MEDIA_DISK</name></expr>:</case>

            <if_stmt pos:start="599:13" pos:end="605:13"><if pos:start="599:13" pos:end="605:13">if <condition pos:start="599:16" pos:end="599:26">(<expr pos:start="599:17" pos:end="599:25"><name pos:start="599:17" pos:end="599:20">cyls</name> <operator pos:start="599:22" pos:end="599:23">!=</operator> <literal type="number" pos:start="599:25" pos:end="599:25">0</literal></expr>)</condition> <block pos:start="599:28" pos:end="605:13">{<block_content pos:start="601:17" pos:end="603:68">

                <expr_stmt pos:start="601:17" pos:end="601:71"><expr pos:start="601:17" pos:end="601:70"><call pos:start="601:17" pos:end="601:70"><name pos:start="601:17" pos:end="601:38">bdrv_set_geometry_hint</name><argument_list pos:start="601:39" pos:end="601:70">(<argument pos:start="601:40" pos:end="601:50"><expr pos:start="601:40" pos:end="601:50"><name pos:start="601:40" pos:end="601:50"><name pos:start="601:40" pos:end="601:44">dinfo</name><operator pos:start="601:45" pos:end="601:46">-&gt;</operator><name pos:start="601:47" pos:end="601:50">bdrv</name></name></expr></argument>, <argument pos:start="601:53" pos:end="601:56"><expr pos:start="601:53" pos:end="601:56"><name pos:start="601:53" pos:end="601:56">cyls</name></expr></argument>, <argument pos:start="601:59" pos:end="601:63"><expr pos:start="601:59" pos:end="601:63"><name pos:start="601:59" pos:end="601:63">heads</name></expr></argument>, <argument pos:start="601:66" pos:end="601:69"><expr pos:start="601:66" pos:end="601:69"><name pos:start="601:66" pos:end="601:69">secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="603:17" pos:end="603:68"><expr pos:start="603:17" pos:end="603:67"><call pos:start="603:17" pos:end="603:67"><name pos:start="603:17" pos:end="603:41">bdrv_set_translation_hint</name><argument_list pos:start="603:42" pos:end="603:67">(<argument pos:start="603:43" pos:end="603:53"><expr pos:start="603:43" pos:end="603:53"><name pos:start="603:43" pos:end="603:53"><name pos:start="603:43" pos:end="603:47">dinfo</name><operator pos:start="603:48" pos:end="603:49">-&gt;</operator><name pos:start="603:50" pos:end="603:53">bdrv</name></name></expr></argument>, <argument pos:start="603:56" pos:end="603:66"><expr pos:start="603:56" pos:end="603:66"><name pos:start="603:56" pos:end="603:66">translation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

	    <break pos:start="607:13" pos:end="607:18">break;</break>

	<case pos:start="609:9" pos:end="609:25">case <expr pos:start="609:14" pos:end="609:24"><name pos:start="609:14" pos:end="609:24">MEDIA_CDROM</name></expr>:</case>

            <expr_stmt pos:start="611:13" pos:end="611:61"><expr pos:start="611:13" pos:end="611:60"><call pos:start="611:13" pos:end="611:60"><name pos:start="611:13" pos:end="611:30">bdrv_set_type_hint</name><argument_list pos:start="611:31" pos:end="611:60">(<argument pos:start="611:32" pos:end="611:42"><expr pos:start="611:32" pos:end="611:42"><name pos:start="611:32" pos:end="611:42"><name pos:start="611:32" pos:end="611:36">dinfo</name><operator pos:start="611:37" pos:end="611:38">-&gt;</operator><name pos:start="611:39" pos:end="611:42">bdrv</name></name></expr></argument>, <argument pos:start="611:45" pos:end="611:59"><expr pos:start="611:45" pos:end="611:59"><name pos:start="611:45" pos:end="611:59">BDRV_TYPE_CDROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <break pos:start="613:13" pos:end="613:18">break;</break>

	</block_content>}</block></switch>

        <break pos:start="617:9" pos:end="617:14">break;</break>

    <case pos:start="619:5" pos:end="619:15">case <expr pos:start="619:10" pos:end="619:14"><name pos:start="619:10" pos:end="619:14">IF_SD</name></expr>:</case>

        <comment type="block" pos:start="621:9" pos:end="623:29">/* FIXME: This isn't really a floppy, but it's a reasonable

           approximation.  */</comment>

    <case pos:start="625:5" pos:end="625:19">case <expr pos:start="625:10" pos:end="625:18"><name pos:start="625:10" pos:end="625:18">IF_FLOPPY</name></expr>:</case>

        <expr_stmt pos:start="627:9" pos:end="627:58"><expr pos:start="627:9" pos:end="627:57"><call pos:start="627:9" pos:end="627:57"><name pos:start="627:9" pos:end="627:26">bdrv_set_type_hint</name><argument_list pos:start="627:27" pos:end="627:57">(<argument pos:start="627:28" pos:end="627:38"><expr pos:start="627:28" pos:end="627:38"><name pos:start="627:28" pos:end="627:38"><name pos:start="627:28" pos:end="627:32">dinfo</name><operator pos:start="627:33" pos:end="627:34">-&gt;</operator><name pos:start="627:35" pos:end="627:38">bdrv</name></name></expr></argument>, <argument pos:start="627:41" pos:end="627:56"><expr pos:start="627:41" pos:end="627:56"><name pos:start="627:41" pos:end="627:56">BDRV_TYPE_FLOPPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="629:9" pos:end="629:14">break;</break>

    <case pos:start="631:5" pos:end="631:19">case <expr pos:start="631:10" pos:end="631:18"><name pos:start="631:10" pos:end="631:18">IF_PFLASH</name></expr>:</case>

    <case pos:start="633:5" pos:end="633:16">case <expr pos:start="633:10" pos:end="633:15"><name pos:start="633:10" pos:end="633:15">IF_MTD</name></expr>:</case>

        <break pos:start="635:9" pos:end="635:14">break;</break>

    <case pos:start="637:5" pos:end="637:19">case <expr pos:start="637:10" pos:end="637:18"><name pos:start="637:10" pos:end="637:18">IF_VIRTIO</name></expr>:</case>

        <comment type="block" pos:start="639:9" pos:end="639:37">/* add virtio block device */</comment>

        <expr_stmt pos:start="641:9" pos:end="641:60"><expr pos:start="641:9" pos:end="641:59"><name pos:start="641:9" pos:end="641:12">opts</name> <operator pos:start="641:14" pos:end="641:14">=</operator> <call pos:start="641:16" pos:end="641:59"><name pos:start="641:16" pos:end="641:31">qemu_opts_create</name><argument_list pos:start="641:32" pos:end="641:59">(<argument pos:start="641:33" pos:end="641:49"><expr pos:start="641:33" pos:end="641:49"><operator pos:start="641:33" pos:end="641:33">&amp;</operator><name pos:start="641:34" pos:end="641:49">qemu_device_opts</name></expr></argument>, <argument pos:start="641:52" pos:end="641:55"><expr pos:start="641:52" pos:end="641:55"><name pos:start="641:52" pos:end="641:55">NULL</name></expr></argument>, <argument pos:start="641:58" pos:end="641:58"><expr pos:start="641:58" pos:end="641:58"><literal type="number" pos:start="641:58" pos:end="641:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="643:9" pos:end="643:55"><expr pos:start="643:9" pos:end="643:54"><call pos:start="643:9" pos:end="643:54"><name pos:start="643:9" pos:end="643:20">qemu_opt_set</name><argument_list pos:start="643:21" pos:end="643:54">(<argument pos:start="643:22" pos:end="643:25"><expr pos:start="643:22" pos:end="643:25"><name pos:start="643:22" pos:end="643:25">opts</name></expr></argument>, <argument pos:start="643:28" pos:end="643:35"><expr pos:start="643:28" pos:end="643:35"><literal type="string" pos:start="643:28" pos:end="643:35">"driver"</literal></expr></argument>, <argument pos:start="643:38" pos:end="643:53"><expr pos:start="643:38" pos:end="643:53"><literal type="string" pos:start="643:38" pos:end="643:53">"virtio-blk-pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="645:9" pos:end="645:47"><expr pos:start="645:9" pos:end="645:46"><call pos:start="645:9" pos:end="645:46"><name pos:start="645:9" pos:end="645:20">qemu_opt_set</name><argument_list pos:start="645:21" pos:end="645:46">(<argument pos:start="645:22" pos:end="645:25"><expr pos:start="645:22" pos:end="645:25"><name pos:start="645:22" pos:end="645:25">opts</name></expr></argument>, <argument pos:start="645:28" pos:end="645:34"><expr pos:start="645:28" pos:end="645:34"><literal type="string" pos:start="645:28" pos:end="645:34">"drive"</literal></expr></argument>, <argument pos:start="645:37" pos:end="645:45"><expr pos:start="645:37" pos:end="645:45"><name pos:start="645:37" pos:end="645:45"><name pos:start="645:37" pos:end="645:41">dinfo</name><operator pos:start="645:42" pos:end="645:43">-&gt;</operator><name pos:start="645:44" pos:end="645:45">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="647:9" pos:end="649:48"><if pos:start="647:9" pos:end="649:48">if <condition pos:start="647:12" pos:end="647:20">(<expr pos:start="647:13" pos:end="647:19"><name pos:start="647:13" pos:end="647:19">devaddr</name></expr>)</condition><block type="pseudo" pos:start="649:13" pos:end="649:48"><block_content pos:start="649:13" pos:end="649:48">

            <expr_stmt pos:start="649:13" pos:end="649:48"><expr pos:start="649:13" pos:end="649:47"><call pos:start="649:13" pos:end="649:47"><name pos:start="649:13" pos:end="649:24">qemu_opt_set</name><argument_list pos:start="649:25" pos:end="649:47">(<argument pos:start="649:26" pos:end="649:29"><expr pos:start="649:26" pos:end="649:29"><name pos:start="649:26" pos:end="649:29">opts</name></expr></argument>, <argument pos:start="649:32" pos:end="649:37"><expr pos:start="649:32" pos:end="649:37"><literal type="string" pos:start="649:32" pos:end="649:37">"addr"</literal></expr></argument>, <argument pos:start="649:40" pos:end="649:46"><expr pos:start="649:40" pos:end="649:46"><name pos:start="649:40" pos:end="649:46">devaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="651:9" pos:end="651:14">break;</break>

    <case pos:start="653:5" pos:end="653:18">case <expr pos:start="653:10" pos:end="653:17"><name pos:start="653:10" pos:end="653:17">IF_COUNT</name></expr>:</case>

        <expr_stmt pos:start="655:9" pos:end="655:16"><expr pos:start="655:9" pos:end="655:15"><call pos:start="655:9" pos:end="655:15"><name pos:start="655:9" pos:end="655:13">abort</name><argument_list pos:start="655:14" pos:end="655:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <if_stmt pos:start="659:5" pos:end="665:5"><if pos:start="659:5" pos:end="665:5">if <condition pos:start="659:8" pos:end="659:14">(<expr pos:start="659:9" pos:end="659:13"><operator pos:start="659:9" pos:end="659:9">!</operator><name pos:start="659:10" pos:end="659:13">file</name></expr>)</condition> <block pos:start="659:16" pos:end="665:5">{<block_content pos:start="661:9" pos:end="663:20">

        <expr_stmt pos:start="661:9" pos:end="661:25"><expr pos:start="661:9" pos:end="661:24"><operator pos:start="661:9" pos:end="661:9">*</operator><name pos:start="661:10" pos:end="661:20">fatal_error</name> <operator pos:start="661:22" pos:end="661:22">=</operator> <literal type="number" pos:start="661:24" pos:end="661:24">0</literal></expr>;</expr_stmt>

        <return pos:start="663:9" pos:end="663:20">return <expr pos:start="663:16" pos:end="663:19"><name pos:start="663:16" pos:end="663:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="667:5" pos:end="675:5"><if pos:start="667:5" pos:end="675:5">if <condition pos:start="667:8" pos:end="667:17">(<expr pos:start="667:9" pos:end="667:16"><name pos:start="667:9" pos:end="667:16">snapshot</name></expr>)</condition> <block pos:start="667:19" pos:end="675:5">{<block_content pos:start="671:9" pos:end="673:72">

        <comment type="block" pos:start="669:9" pos:end="669:51">/* always use cache=unsafe with snapshot */</comment>

        <expr_stmt pos:start="671:9" pos:end="671:41"><expr pos:start="671:9" pos:end="671:40"><name pos:start="671:9" pos:end="671:18">bdrv_flags</name> <operator pos:start="671:20" pos:end="671:21">&amp;=</operator> <operator pos:start="671:23" pos:end="671:23">~</operator><name pos:start="671:24" pos:end="671:40">BDRV_O_CACHE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="673:9" pos:end="673:72"><expr pos:start="673:9" pos:end="673:71"><name pos:start="673:9" pos:end="673:18">bdrv_flags</name> <operator pos:start="673:20" pos:end="673:21">|=</operator> <operator pos:start="673:23" pos:end="673:23">(</operator><name pos:start="673:24" pos:end="673:38">BDRV_O_SNAPSHOT</name><operator pos:start="673:39" pos:end="673:39">|</operator><name pos:start="673:40" pos:end="673:54">BDRV_O_CACHE_WB</name><operator pos:start="673:55" pos:end="673:55">|</operator><name pos:start="673:56" pos:end="673:70">BDRV_O_NO_FLUSH</name><operator pos:start="673:71" pos:end="673:71">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="679:5" pos:end="695:5"><if pos:start="679:5" pos:end="685:5">if <condition pos:start="679:8" pos:end="679:29">(<expr pos:start="679:9" pos:end="679:28"><name pos:start="679:9" pos:end="679:13">media</name> <operator pos:start="679:15" pos:end="679:16">==</operator> <name pos:start="679:18" pos:end="679:28">MEDIA_CDROM</name></expr>)</condition> <block pos:start="679:31" pos:end="685:5">{<block_content pos:start="683:9" pos:end="683:15">

        <comment type="block" pos:start="681:9" pos:end="681:60">/* CDROM is fine for any interface, don't check.  */</comment>

        <expr_stmt pos:start="683:9" pos:end="683:15"><expr pos:start="683:9" pos:end="683:14"><name pos:start="683:9" pos:end="683:10">ro</name> <operator pos:start="683:12" pos:end="683:12">=</operator> <literal type="number" pos:start="683:14" pos:end="683:14">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="685:7" pos:end="695:5">else if <condition pos:start="685:15" pos:end="685:23">(<expr pos:start="685:16" pos:end="685:22"><name pos:start="685:16" pos:end="685:17">ro</name> <operator pos:start="685:19" pos:end="685:20">==</operator> <literal type="number" pos:start="685:22" pos:end="685:22">1</literal></expr>)</condition> <block pos:start="685:25" pos:end="695:5">{<block_content pos:start="687:9" pos:end="693:9">

        <if_stmt pos:start="687:9" pos:end="693:9"><if pos:start="687:9" pos:end="693:9">if <condition pos:start="687:12" pos:end="687:89">(<expr pos:start="687:13" pos:end="687:88"><name pos:start="687:13" pos:end="687:16">type</name> <operator pos:start="687:18" pos:end="687:19">!=</operator> <name pos:start="687:21" pos:end="687:27">IF_SCSI</name> <operator pos:start="687:29" pos:end="687:30">&amp;&amp;</operator> <name pos:start="687:32" pos:end="687:35">type</name> <operator pos:start="687:37" pos:end="687:38">!=</operator> <name pos:start="687:40" pos:end="687:48">IF_VIRTIO</name> <operator pos:start="687:50" pos:end="687:51">&amp;&amp;</operator> <name pos:start="687:53" pos:end="687:56">type</name> <operator pos:start="687:58" pos:end="687:59">!=</operator> <name pos:start="687:61" pos:end="687:69">IF_FLOPPY</name> <operator pos:start="687:71" pos:end="687:72">&amp;&amp;</operator> <name pos:start="687:74" pos:end="687:77">type</name> <operator pos:start="687:79" pos:end="687:80">!=</operator> <name pos:start="687:82" pos:end="687:88">IF_NONE</name></expr>)</condition> <block pos:start="687:91" pos:end="693:9">{<block_content pos:start="689:13" pos:end="691:24">

            <expr_stmt pos:start="689:13" pos:end="689:97"><expr pos:start="689:13" pos:end="689:96"><call pos:start="689:13" pos:end="689:96"><name pos:start="689:13" pos:end="689:19">fprintf</name><argument_list pos:start="689:20" pos:end="689:96">(<argument pos:start="689:21" pos:end="689:26"><expr pos:start="689:21" pos:end="689:26"><name pos:start="689:21" pos:end="689:26">stderr</name></expr></argument>, <argument pos:start="689:29" pos:end="689:95"><expr pos:start="689:29" pos:end="689:95"><literal type="string" pos:start="689:29" pos:end="689:95">"qemu: readonly flag not supported for drive with this interface\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="691:13" pos:end="691:24">return <expr pos:start="691:20" pos:end="691:23"><name pos:start="691:20" pos:end="691:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="699:5" pos:end="699:39"><expr pos:start="699:5" pos:end="699:38"><name pos:start="699:5" pos:end="699:14">bdrv_flags</name> <operator pos:start="699:16" pos:end="699:17">|=</operator> <ternary pos:start="699:19" pos:end="699:38"><condition pos:start="699:19" pos:end="699:22"><expr pos:start="699:19" pos:end="699:20"><name pos:start="699:19" pos:end="699:20">ro</name></expr> ?</condition><then pos:start="699:24" pos:end="699:24"> <expr pos:start="699:24" pos:end="699:24"><literal type="number" pos:start="699:24" pos:end="699:24">0</literal></expr> </then><else pos:start="699:26" pos:end="699:38">: <expr pos:start="699:28" pos:end="699:38"><name pos:start="699:28" pos:end="699:38">BDRV_O_RDWR</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="703:5" pos:end="703:56"><expr pos:start="703:5" pos:end="703:55"><name pos:start="703:5" pos:end="703:7">ret</name> <operator pos:start="703:9" pos:end="703:9">=</operator> <call pos:start="703:11" pos:end="703:55"><name pos:start="703:11" pos:end="703:19">bdrv_open</name><argument_list pos:start="703:20" pos:end="703:55">(<argument pos:start="703:21" pos:end="703:31"><expr pos:start="703:21" pos:end="703:31"><name pos:start="703:21" pos:end="703:31"><name pos:start="703:21" pos:end="703:25">dinfo</name><operator pos:start="703:26" pos:end="703:27">-&gt;</operator><name pos:start="703:28" pos:end="703:31">bdrv</name></name></expr></argument>, <argument pos:start="703:34" pos:end="703:37"><expr pos:start="703:34" pos:end="703:37"><name pos:start="703:34" pos:end="703:37">file</name></expr></argument>, <argument pos:start="703:40" pos:end="703:49"><expr pos:start="703:40" pos:end="703:49"><name pos:start="703:40" pos:end="703:49">bdrv_flags</name></expr></argument>, <argument pos:start="703:52" pos:end="703:54"><expr pos:start="703:52" pos:end="703:54"><name pos:start="703:52" pos:end="703:54">drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="705:5" pos:end="713:5"><if pos:start="705:5" pos:end="713:5">if <condition pos:start="705:8" pos:end="705:16">(<expr pos:start="705:9" pos:end="705:15"><name pos:start="705:9" pos:end="705:11">ret</name> <operator pos:start="705:13" pos:end="705:13">&lt;</operator> <literal type="number" pos:start="705:15" pos:end="705:15">0</literal></expr>)</condition> <block pos:start="705:18" pos:end="713:5">{<block_content pos:start="707:9" pos:end="711:20">

        <expr_stmt pos:start="707:9" pos:end="709:46"><expr pos:start="707:9" pos:end="709:45"><call pos:start="707:9" pos:end="709:45"><name pos:start="707:9" pos:end="707:15">fprintf</name><argument_list pos:start="707:16" pos:end="709:45">(<argument pos:start="707:17" pos:end="707:22"><expr pos:start="707:17" pos:end="707:22"><name pos:start="707:17" pos:end="707:22">stderr</name></expr></argument>, <argument pos:start="707:25" pos:end="707:66"><expr pos:start="707:25" pos:end="707:66"><literal type="string" pos:start="707:25" pos:end="707:66">"qemu: could not open disk image %s: %s\n"</literal></expr></argument>,

                        <argument pos:start="709:25" pos:end="709:28"><expr pos:start="709:25" pos:end="709:28"><name pos:start="709:25" pos:end="709:28">file</name></expr></argument>, <argument pos:start="709:31" pos:end="709:44"><expr pos:start="709:31" pos:end="709:44"><call pos:start="709:31" pos:end="709:44"><name pos:start="709:31" pos:end="709:38">strerror</name><argument_list pos:start="709:39" pos:end="709:44">(<argument pos:start="709:40" pos:end="709:43"><expr pos:start="709:40" pos:end="709:43"><operator pos:start="709:40" pos:end="709:40">-</operator><name pos:start="709:41" pos:end="709:43">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="711:9" pos:end="711:20">return <expr pos:start="711:16" pos:end="711:19"><name pos:start="711:16" pos:end="711:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="717:5" pos:end="719:22"><if pos:start="717:5" pos:end="719:22">if <condition pos:start="717:8" pos:end="717:39">(<expr pos:start="717:9" pos:end="717:38"><call pos:start="717:9" pos:end="717:38"><name pos:start="717:9" pos:end="717:25">bdrv_key_required</name><argument_list pos:start="717:26" pos:end="717:38">(<argument pos:start="717:27" pos:end="717:37"><expr pos:start="717:27" pos:end="717:37"><name pos:start="717:27" pos:end="717:37"><name pos:start="717:27" pos:end="717:31">dinfo</name><operator pos:start="717:32" pos:end="717:33">-&gt;</operator><name pos:start="717:34" pos:end="717:37">bdrv</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="719:9" pos:end="719:22"><block_content pos:start="719:9" pos:end="719:22">

        <expr_stmt pos:start="719:9" pos:end="719:22"><expr pos:start="719:9" pos:end="719:21"><name pos:start="719:9" pos:end="719:17">autostart</name> <operator pos:start="719:19" pos:end="719:19">=</operator> <literal type="number" pos:start="719:21" pos:end="719:21">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="721:5" pos:end="721:21"><expr pos:start="721:5" pos:end="721:20"><operator pos:start="721:5" pos:end="721:5">*</operator><name pos:start="721:6" pos:end="721:16">fatal_error</name> <operator pos:start="721:18" pos:end="721:18">=</operator> <literal type="number" pos:start="721:20" pos:end="721:20">0</literal></expr>;</expr_stmt>

    <return pos:start="723:5" pos:end="723:17">return <expr pos:start="723:12" pos:end="723:16"><name pos:start="723:12" pos:end="723:16">dinfo</name></expr>;</return>

</block_content>}</block></function>
</unit>
