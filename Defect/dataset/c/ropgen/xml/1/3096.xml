<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3096.c" pos:tabs="8"><function pos:start="1:1" pos:end="225:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">qsv_decode_init</name><parameter_list pos:start="1:27" pos:end="1:81">(<parameter pos:start="1:28" pos:end="1:48"><decl pos:start="1:28" pos:end="1:48"><type pos:start="1:28" pos:end="1:48"><name pos:start="1:28" pos:end="1:41">AVCodecContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:48">avctx</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:60">QSVContext</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:63">q</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:80"><decl pos:start="1:66" pos:end="1:80"><type pos:start="1:66" pos:end="1:80"><name pos:start="1:66" pos:end="1:73">AVPacket</name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type><name pos:start="1:76" pos:end="1:80">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="225:1">{<block_content pos:start="5:5" pos:end="223:13">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:17">mfxVideoParam</name></type> <name pos:start="5:19" pos:end="5:23">param</name> <init pos:start="5:25" pos:end="5:35">= <expr pos:start="5:27" pos:end="5:35"><block pos:start="5:27" pos:end="5:35">{ <expr pos:start="5:29" pos:end="5:33"><block pos:start="5:29" pos:end="5:33">{ <expr pos:start="5:31" pos:end="5:31"><literal type="number" pos:start="5:31" pos:end="5:31">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">mfxBitstream</name></type> <name pos:start="7:18" pos:end="7:19">bs</name>   <init pos:start="7:23" pos:end="7:37">= <expr pos:start="7:25" pos:end="7:37"><block pos:start="7:25" pos:end="7:37">{ <expr pos:start="7:27" pos:end="7:35"><block pos:start="7:27" pos:end="7:35">{ <expr pos:start="7:29" pos:end="7:33"><block pos:start="7:29" pos:end="7:33">{ <expr pos:start="7:31" pos:end="7:31"><literal type="number" pos:start="7:31" pos:end="7:31">0</literal></expr> }</block></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="15:57"><decl pos:start="11:5" pos:end="15:56"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:8">enum</name> <name pos:start="11:10" pos:end="11:22">AVPixelFormat</name></name></type> <name pos:start="11:24" pos:end="11:34"><name pos:start="11:24" pos:end="11:31">pix_fmts</name><index pos:start="11:32" pos:end="11:34">[<expr pos:start="11:33" pos:end="11:33"><literal type="number" pos:start="11:33" pos:end="11:33">3</literal></expr>]</index></name> <init pos:start="11:36" pos:end="15:56">= <expr pos:start="11:38" pos:end="15:56"><block pos:start="11:38" pos:end="15:56">{ <expr pos:start="11:40" pos:end="11:53"><name pos:start="11:40" pos:end="11:53">AV_PIX_FMT_QSV</name></expr>,

                                       <expr pos:start="13:40" pos:end="13:54"><name pos:start="13:40" pos:end="13:54">AV_PIX_FMT_NV12</name></expr>,

                                       <expr pos:start="15:40" pos:end="15:54"><name pos:start="15:40" pos:end="15:54">AV_PIX_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:41"><expr pos:start="19:5" pos:end="19:40"><name pos:start="19:5" pos:end="19:7">ret</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:40"><name pos:start="19:11" pos:end="19:23">ff_get_format</name><argument_list pos:start="19:24" pos:end="19:40">(<argument pos:start="19:25" pos:end="19:29"><expr pos:start="19:25" pos:end="19:29"><name pos:start="19:25" pos:end="19:29">avctx</name></expr></argument>, <argument pos:start="19:32" pos:end="19:39"><expr pos:start="19:32" pos:end="19:39"><name pos:start="19:32" pos:end="19:39">pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="23:19"><if pos:start="21:5" pos:end="23:19">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">&lt;</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:19"><block_content pos:start="23:9" pos:end="23:19">

        <return pos:start="23:9" pos:end="23:19">return <expr pos:start="23:16" pos:end="23:18"><name pos:start="23:16" pos:end="23:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:30"><expr pos:start="27:5" pos:end="27:29"><name pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:9">avctx</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:18">pix_fmt</name></name>      <operator pos:start="27:25" pos:end="27:25">=</operator> <name pos:start="27:27" pos:end="27:29">ret</name></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:52"><expr pos:start="31:5" pos:end="31:51"><name pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:5">q</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:16">iopattern</name></name>  <operator pos:start="31:19" pos:end="31:19">=</operator> <name pos:start="31:21" pos:end="31:51">MFX_IOPATTERN_OUT_SYSTEM_MEMORY</name></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="47:5"><if pos:start="33:5" pos:end="47:5">if <condition pos:start="33:8" pos:end="33:31">(<expr pos:start="33:9" pos:end="33:30"><name pos:start="33:9" pos:end="33:30"><name pos:start="33:9" pos:end="33:13">avctx</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:30">hwaccel_context</name></name></expr>)</condition> <block pos:start="33:33" pos:end="47:5">{<block_content pos:start="35:9" pos:end="45:48">

        <decl_stmt pos:start="35:9" pos:end="35:51"><decl pos:start="35:9" pos:end="35:50"><type pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:20">AVQSVContext</name> <modifier pos:start="35:22" pos:end="35:22">*</modifier></type><name pos:start="35:23" pos:end="35:25">qsv</name> <init pos:start="35:27" pos:end="35:50">= <expr pos:start="35:29" pos:end="35:50"><name pos:start="35:29" pos:end="35:50"><name pos:start="35:29" pos:end="35:33">avctx</name><operator pos:start="35:34" pos:end="35:35">-&gt;</operator><name pos:start="35:36" pos:end="35:50">hwaccel_context</name></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:41"><expr pos:start="39:9" pos:end="39:40"><name pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:9">q</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:18">session</name></name>        <operator pos:start="39:27" pos:end="39:27">=</operator> <name pos:start="39:29" pos:end="39:40"><name pos:start="39:29" pos:end="39:31">qsv</name><operator pos:start="39:32" pos:end="39:33">-&gt;</operator><name pos:start="39:34" pos:end="39:40">session</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:43"><expr pos:start="41:9" pos:end="41:42"><name pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:9">q</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:20">iopattern</name></name>      <operator pos:start="41:27" pos:end="41:27">=</operator> <name pos:start="41:29" pos:end="41:42"><name pos:start="41:29" pos:end="41:31">qsv</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:42">iopattern</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:45"><expr pos:start="43:9" pos:end="43:44"><name pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:9">q</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:22">ext_buffers</name></name>    <operator pos:start="43:27" pos:end="43:27">=</operator> <name pos:start="43:29" pos:end="43:44"><name pos:start="43:29" pos:end="43:31">qsv</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:44">ext_buffers</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:48"><expr pos:start="45:9" pos:end="45:47"><name pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:9">q</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:25">nb_ext_buffers</name></name> <operator pos:start="45:27" pos:end="45:27">=</operator> <name pos:start="45:29" pos:end="45:47"><name pos:start="45:29" pos:end="45:31">qsv</name><operator pos:start="45:32" pos:end="45:33">-&gt;</operator><name pos:start="45:34" pos:end="45:47">nb_ext_buffers</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="49:5" pos:end="67:5"><if pos:start="49:5" pos:end="67:5">if <condition pos:start="49:8" pos:end="49:20">(<expr pos:start="49:9" pos:end="49:19"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:19"><name pos:start="49:10" pos:end="49:10">q</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:19">session</name></name></expr>)</condition> <block pos:start="49:22" pos:end="67:5">{<block_content pos:start="51:9" pos:end="65:44">

        <if_stmt pos:start="51:9" pos:end="61:9"><if pos:start="51:9" pos:end="61:9">if <condition pos:start="51:12" pos:end="51:36">(<expr pos:start="51:13" pos:end="51:35"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:35"><name pos:start="51:14" pos:end="51:14">q</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:27">internal_qs</name><operator pos:start="51:28" pos:end="51:28">.</operator><name pos:start="51:29" pos:end="51:35">session</name></name></expr>)</condition> <block pos:start="51:38" pos:end="61:9">{<block_content pos:start="53:13" pos:end="59:27">

            <expr_stmt pos:start="53:13" pos:end="55:64"><expr pos:start="53:13" pos:end="55:63"><name pos:start="53:13" pos:end="53:15">ret</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <call pos:start="53:19" pos:end="55:63"><name pos:start="53:19" pos:end="53:46">ff_qsv_init_internal_session</name><argument_list pos:start="53:47" pos:end="55:63">(<argument pos:start="53:48" pos:end="53:52"><expr pos:start="53:48" pos:end="53:52"><name pos:start="53:48" pos:end="53:52">avctx</name></expr></argument>, <argument pos:start="53:55" pos:end="53:69"><expr pos:start="53:55" pos:end="53:69"><operator pos:start="53:55" pos:end="53:55">&amp;</operator><name pos:start="53:56" pos:end="53:69"><name pos:start="53:56" pos:end="53:56">q</name><operator pos:start="53:57" pos:end="53:58">-&gt;</operator><name pos:start="53:59" pos:end="53:69">internal_qs</name></name></expr></argument>,

                                               <argument pos:start="55:48" pos:end="55:62"><expr pos:start="55:48" pos:end="55:62"><name pos:start="55:48" pos:end="55:62"><name pos:start="55:48" pos:end="55:48">q</name><operator pos:start="55:49" pos:end="55:50">-&gt;</operator><name pos:start="55:51" pos:end="55:62">load_plugins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="57:13" pos:end="59:27"><if pos:start="57:13" pos:end="59:27">if <condition pos:start="57:16" pos:end="57:24">(<expr pos:start="57:17" pos:end="57:23"><name pos:start="57:17" pos:end="57:19">ret</name> <operator pos:start="57:21" pos:end="57:21">&lt;</operator> <literal type="number" pos:start="57:23" pos:end="57:23">0</literal></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:27"><block_content pos:start="59:17" pos:end="59:27">

                <return pos:start="59:17" pos:end="59:27">return <expr pos:start="59:24" pos:end="59:26"><name pos:start="59:24" pos:end="59:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:44"><expr pos:start="65:9" pos:end="65:43"><name pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:9">q</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:18">session</name></name> <operator pos:start="65:20" pos:end="65:20">=</operator> <name pos:start="65:22" pos:end="65:43"><name pos:start="65:22" pos:end="65:22">q</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:35">internal_qs</name><operator pos:start="65:36" pos:end="65:36">.</operator><name pos:start="65:37" pos:end="65:43">session</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="83:35"><if pos:start="71:5" pos:end="81:5">if <condition pos:start="71:8" pos:end="71:20">(<expr pos:start="71:9" pos:end="71:19"><name pos:start="71:9" pos:end="71:19"><name pos:start="71:9" pos:end="71:13">avpkt</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:19">size</name></name></expr>)</condition> <block pos:start="71:22" pos:end="81:5">{<block_content pos:start="73:9" pos:end="79:35">

        <expr_stmt pos:start="73:9" pos:end="73:36"><expr pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:10">bs</name><operator pos:start="73:11" pos:end="73:11">.</operator><name pos:start="73:12" pos:end="73:15">Data</name></name>       <operator pos:start="73:23" pos:end="73:23">=</operator> <name pos:start="73:25" pos:end="73:35"><name pos:start="73:25" pos:end="73:29">avpkt</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:35">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:36"><expr pos:start="75:9" pos:end="75:35"><name pos:start="75:9" pos:end="75:21"><name pos:start="75:9" pos:end="75:10">bs</name><operator pos:start="75:11" pos:end="75:11">.</operator><name pos:start="75:12" pos:end="75:21">DataLength</name></name> <operator pos:start="75:23" pos:end="75:23">=</operator> <name pos:start="75:25" pos:end="75:35"><name pos:start="75:25" pos:end="75:29">avpkt</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:35">size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:38"><expr pos:start="77:9" pos:end="77:37"><name pos:start="77:9" pos:end="77:20"><name pos:start="77:9" pos:end="77:10">bs</name><operator pos:start="77:11" pos:end="77:11">.</operator><name pos:start="77:12" pos:end="77:20">MaxLength</name></name>  <operator pos:start="77:23" pos:end="77:23">=</operator> <name pos:start="77:25" pos:end="77:37"><name pos:start="77:25" pos:end="77:26">bs</name><operator pos:start="77:27" pos:end="77:27">.</operator><name pos:start="77:28" pos:end="77:37">DataLength</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:35"><expr pos:start="79:9" pos:end="79:34"><name pos:start="79:9" pos:end="79:20"><name pos:start="79:9" pos:end="79:10">bs</name><operator pos:start="79:11" pos:end="79:11">.</operator><name pos:start="79:12" pos:end="79:20">TimeStamp</name></name>  <operator pos:start="79:23" pos:end="79:23">=</operator> <name pos:start="79:25" pos:end="79:34"><name pos:start="79:25" pos:end="79:29">avpkt</name><operator pos:start="79:30" pos:end="79:31">-&gt;</operator><name pos:start="79:32" pos:end="79:34">pts</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="81:7" pos:end="83:35">else<block type="pseudo" pos:start="83:9" pos:end="83:35"><block_content pos:start="83:9" pos:end="83:35">

        <return pos:start="83:9" pos:end="83:35">return <expr pos:start="83:16" pos:end="83:34"><name pos:start="83:16" pos:end="83:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></else></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:50"><expr pos:start="87:5" pos:end="87:49"><name pos:start="87:5" pos:end="87:7">ret</name> <operator pos:start="87:9" pos:end="87:9">=</operator> <call pos:start="87:11" pos:end="87:49"><name pos:start="87:11" pos:end="87:32">ff_qsv_codec_id_to_mfx</name><argument_list pos:start="87:33" pos:end="87:49">(<argument pos:start="87:34" pos:end="87:48"><expr pos:start="87:34" pos:end="87:48"><name pos:start="87:34" pos:end="87:48"><name pos:start="87:34" pos:end="87:38">avctx</name><operator pos:start="87:39" pos:end="87:40">-&gt;</operator><name pos:start="87:41" pos:end="87:48">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:16">(<expr pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">&lt;</operator> <literal type="number" pos:start="89:15" pos:end="89:15">0</literal></expr>)</condition> <block pos:start="89:18" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:19">

        <expr_stmt pos:start="91:9" pos:end="91:84"><expr pos:start="91:9" pos:end="91:83"><call pos:start="91:9" pos:end="91:83"><name pos:start="91:9" pos:end="91:14">av_log</name><argument_list pos:start="91:15" pos:end="91:83">(<argument pos:start="91:16" pos:end="91:20"><expr pos:start="91:16" pos:end="91:20"><name pos:start="91:16" pos:end="91:20">avctx</name></expr></argument>, <argument pos:start="91:23" pos:end="91:34"><expr pos:start="91:23" pos:end="91:34"><name pos:start="91:23" pos:end="91:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:37" pos:end="91:65"><expr pos:start="91:37" pos:end="91:65"><literal type="string" pos:start="91:37" pos:end="91:65">"Unsupported codec_id %08x\n"</literal></expr></argument>, <argument pos:start="91:68" pos:end="91:82"><expr pos:start="91:68" pos:end="91:82"><name pos:start="91:68" pos:end="91:82"><name pos:start="91:68" pos:end="91:72">avctx</name><operator pos:start="91:73" pos:end="91:74">-&gt;</operator><name pos:start="91:75" pos:end="91:82">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:19">return <expr pos:start="93:16" pos:end="93:18"><name pos:start="93:16" pos:end="93:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:28"><expr pos:start="99:5" pos:end="99:27"><name pos:start="99:5" pos:end="99:21"><name pos:start="99:5" pos:end="99:9">param</name><operator pos:start="99:10" pos:end="99:10">.</operator><name pos:start="99:11" pos:end="99:13">mfx</name><operator pos:start="99:14" pos:end="99:14">.</operator><name pos:start="99:15" pos:end="99:21">CodecId</name></name> <operator pos:start="99:23" pos:end="99:23">=</operator> <name pos:start="99:25" pos:end="99:27">ret</name></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:63"><expr pos:start="103:5" pos:end="103:62"><name pos:start="103:5" pos:end="103:7">ret</name> <operator pos:start="103:9" pos:end="103:9">=</operator> <call pos:start="103:11" pos:end="103:62"><name pos:start="103:11" pos:end="103:37">MFXVideoDECODE_DecodeHeader</name><argument_list pos:start="103:38" pos:end="103:62">(<argument pos:start="103:39" pos:end="103:48"><expr pos:start="103:39" pos:end="103:48"><name pos:start="103:39" pos:end="103:48"><name pos:start="103:39" pos:end="103:39">q</name><operator pos:start="103:40" pos:end="103:41">-&gt;</operator><name pos:start="103:42" pos:end="103:48">session</name></name></expr></argument>, <argument pos:start="103:51" pos:end="103:53"><expr pos:start="103:51" pos:end="103:53"><operator pos:start="103:51" pos:end="103:51">&amp;</operator><name pos:start="103:52" pos:end="103:53">bs</name></expr></argument>, <argument pos:start="103:56" pos:end="103:61"><expr pos:start="103:56" pos:end="103:61"><operator pos:start="103:56" pos:end="103:56">&amp;</operator><name pos:start="103:57" pos:end="103:61">param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="121:5"><if pos:start="105:5" pos:end="115:5">if <condition pos:start="105:8" pos:end="105:31">(<expr pos:start="105:9" pos:end="105:30"><name pos:start="105:9" pos:end="105:25">MFX_ERR_MORE_DATA</name><operator pos:start="105:26" pos:end="105:27">==</operator><name pos:start="105:28" pos:end="105:30">ret</name></expr>)</condition> <block pos:start="105:33" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:27">

        <comment type="block" pos:start="107:9" pos:end="111:11">/* this code means that header not found so we return packet size to skip

           a current packet

         */</comment>

        <return pos:start="113:9" pos:end="113:27">return <expr pos:start="113:16" pos:end="113:26"><name pos:start="113:16" pos:end="113:26"><name pos:start="113:16" pos:end="113:20">avpkt</name><operator pos:start="113:21" pos:end="113:22">-&gt;</operator><name pos:start="113:23" pos:end="113:26">size</name></name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="115:7" pos:end="121:5">else if <condition pos:start="115:15" pos:end="115:23">(<expr pos:start="115:16" pos:end="115:22"><name pos:start="115:16" pos:end="115:18">ret</name> <operator pos:start="115:20" pos:end="115:20">&lt;</operator> <literal type="number" pos:start="115:22" pos:end="115:22">0</literal></expr>)</condition> <block pos:start="115:25" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:33">

        <expr_stmt pos:start="117:9" pos:end="117:69"><expr pos:start="117:9" pos:end="117:68"><call pos:start="117:9" pos:end="117:68"><name pos:start="117:9" pos:end="117:14">av_log</name><argument_list pos:start="117:15" pos:end="117:68">(<argument pos:start="117:16" pos:end="117:20"><expr pos:start="117:16" pos:end="117:20"><name pos:start="117:16" pos:end="117:20">avctx</name></expr></argument>, <argument pos:start="117:23" pos:end="117:34"><expr pos:start="117:23" pos:end="117:34"><name pos:start="117:23" pos:end="117:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="117:37" pos:end="117:62"><expr pos:start="117:37" pos:end="117:62"><literal type="string" pos:start="117:37" pos:end="117:62">"Decode header error %d\n"</literal></expr></argument>, <argument pos:start="117:65" pos:end="117:67"><expr pos:start="117:65" pos:end="117:67"><name pos:start="117:65" pos:end="117:67">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="119:9" pos:end="119:33">return <expr pos:start="119:16" pos:end="119:32"><call pos:start="119:16" pos:end="119:32"><name pos:start="119:16" pos:end="119:27">ff_qsv_error</name><argument_list pos:start="119:28" pos:end="119:32">(<argument pos:start="119:29" pos:end="119:31"><expr pos:start="119:29" pos:end="119:31"><name pos:start="119:29" pos:end="119:31">ret</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:37"><expr pos:start="123:5" pos:end="123:36"><name pos:start="123:5" pos:end="123:19"><name pos:start="123:5" pos:end="123:9">param</name><operator pos:start="123:10" pos:end="123:10">.</operator><name pos:start="123:11" pos:end="123:19">IOPattern</name></name>   <operator pos:start="123:23" pos:end="123:23">=</operator> <name pos:start="123:25" pos:end="123:36"><name pos:start="123:25" pos:end="123:25">q</name><operator pos:start="123:26" pos:end="123:27">-&gt;</operator><name pos:start="123:28" pos:end="123:36">iopattern</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:39"><expr pos:start="125:5" pos:end="125:38"><name pos:start="125:5" pos:end="125:20"><name pos:start="125:5" pos:end="125:9">param</name><operator pos:start="125:10" pos:end="125:10">.</operator><name pos:start="125:11" pos:end="125:20">AsyncDepth</name></name>  <operator pos:start="125:23" pos:end="125:23">=</operator> <name pos:start="125:25" pos:end="125:38"><name pos:start="125:25" pos:end="125:25">q</name><operator pos:start="125:26" pos:end="125:27">-&gt;</operator><name pos:start="125:28" pos:end="125:38">async_depth</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:39"><expr pos:start="127:5" pos:end="127:38"><name pos:start="127:5" pos:end="127:18"><name pos:start="127:5" pos:end="127:9">param</name><operator pos:start="127:10" pos:end="127:10">.</operator><name pos:start="127:11" pos:end="127:18">ExtParam</name></name>    <operator pos:start="127:23" pos:end="127:23">=</operator> <name pos:start="127:25" pos:end="127:38"><name pos:start="127:25" pos:end="127:25">q</name><operator pos:start="127:26" pos:end="127:27">-&gt;</operator><name pos:start="127:28" pos:end="127:38">ext_buffers</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:42"><expr pos:start="129:5" pos:end="129:41"><name pos:start="129:5" pos:end="129:21"><name pos:start="129:5" pos:end="129:9">param</name><operator pos:start="129:10" pos:end="129:10">.</operator><name pos:start="129:11" pos:end="129:21">NumExtParam</name></name> <operator pos:start="129:23" pos:end="129:23">=</operator> <name pos:start="129:25" pos:end="129:41"><name pos:start="129:25" pos:end="129:25">q</name><operator pos:start="129:26" pos:end="129:27">-&gt;</operator><name pos:start="129:28" pos:end="129:41">nb_ext_buffers</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:43"><expr pos:start="131:5" pos:end="131:42"><name pos:start="131:5" pos:end="131:36"><name pos:start="131:5" pos:end="131:9">param</name><operator pos:start="131:10" pos:end="131:10">.</operator><name pos:start="131:11" pos:end="131:13">mfx</name><operator pos:start="131:14" pos:end="131:14">.</operator><name pos:start="131:15" pos:end="131:23">FrameInfo</name><operator pos:start="131:24" pos:end="131:24">.</operator><name pos:start="131:25" pos:end="131:36">BitDepthLuma</name></name>   <operator pos:start="131:40" pos:end="131:40">=</operator> <literal type="number" pos:start="131:42" pos:end="131:42">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:43"><expr pos:start="133:5" pos:end="133:42"><name pos:start="133:5" pos:end="133:38"><name pos:start="133:5" pos:end="133:9">param</name><operator pos:start="133:10" pos:end="133:10">.</operator><name pos:start="133:11" pos:end="133:13">mfx</name><operator pos:start="133:14" pos:end="133:14">.</operator><name pos:start="133:15" pos:end="133:23">FrameInfo</name><operator pos:start="133:24" pos:end="133:24">.</operator><name pos:start="133:25" pos:end="133:38">BitDepthChroma</name></name> <operator pos:start="133:40" pos:end="133:40">=</operator> <literal type="number" pos:start="133:42" pos:end="133:42">8</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:50"><expr pos:start="137:5" pos:end="137:49"><name pos:start="137:5" pos:end="137:7">ret</name> <operator pos:start="137:9" pos:end="137:9">=</operator> <call pos:start="137:11" pos:end="137:49"><name pos:start="137:11" pos:end="137:29">MFXVideoDECODE_Init</name><argument_list pos:start="137:30" pos:end="137:49">(<argument pos:start="137:31" pos:end="137:40"><expr pos:start="137:31" pos:end="137:40"><name pos:start="137:31" pos:end="137:40"><name pos:start="137:31" pos:end="137:31">q</name><operator pos:start="137:32" pos:end="137:33">-&gt;</operator><name pos:start="137:34" pos:end="137:40">session</name></name></expr></argument>, <argument pos:start="137:43" pos:end="137:48"><expr pos:start="137:43" pos:end="137:48"><operator pos:start="137:43" pos:end="137:43">&amp;</operator><name pos:start="137:44" pos:end="137:48">param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="157:5"><if pos:start="139:5" pos:end="157:5">if <condition pos:start="139:8" pos:end="139:16">(<expr pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:11">ret</name> <operator pos:start="139:13" pos:end="139:13">&lt;</operator> <literal type="number" pos:start="139:15" pos:end="139:15">0</literal></expr>)</condition> <block pos:start="139:18" pos:end="157:5">{<block_content pos:start="141:9" pos:end="155:33">

        <if_stmt pos:start="141:9" pos:end="153:9"><if pos:start="141:9" pos:end="147:9">if <condition pos:start="141:12" pos:end="141:45">(<expr pos:start="141:13" pos:end="141:44"><name pos:start="141:13" pos:end="141:39">MFX_ERR_INVALID_VIDEO_PARAM</name><operator pos:start="141:40" pos:end="141:41">==</operator><name pos:start="141:42" pos:end="141:44">ret</name></expr>)</condition> <block pos:start="141:47" pos:end="147:9">{<block_content pos:start="143:13" pos:end="145:84">

            <expr_stmt pos:start="143:13" pos:end="145:84"><expr pos:start="143:13" pos:end="145:83"><call pos:start="143:13" pos:end="145:83"><name pos:start="143:13" pos:end="143:18">av_log</name><argument_list pos:start="143:19" pos:end="145:83">(<argument pos:start="143:20" pos:end="143:24"><expr pos:start="143:20" pos:end="143:24"><name pos:start="143:20" pos:end="143:24">avctx</name></expr></argument>, <argument pos:start="143:27" pos:end="143:38"><expr pos:start="143:27" pos:end="143:38"><name pos:start="143:27" pos:end="143:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="145:20" pos:end="145:82"><expr pos:start="145:20" pos:end="145:82"><literal type="string" pos:start="145:20" pos:end="145:82">"Error initializing the MFX video decoder, unsupported video\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="147:11" pos:end="153:9">else <block pos:start="147:16" pos:end="153:9">{<block_content pos:start="149:13" pos:end="151:73">

            <expr_stmt pos:start="149:13" pos:end="151:73"><expr pos:start="149:13" pos:end="151:72"><call pos:start="149:13" pos:end="151:72"><name pos:start="149:13" pos:end="149:18">av_log</name><argument_list pos:start="149:19" pos:end="151:72">(<argument pos:start="149:20" pos:end="149:24"><expr pos:start="149:20" pos:end="149:24"><name pos:start="149:20" pos:end="149:24">avctx</name></expr></argument>, <argument pos:start="149:27" pos:end="149:38"><expr pos:start="149:27" pos:end="149:38"><name pos:start="149:27" pos:end="149:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="151:20" pos:end="151:66"><expr pos:start="151:20" pos:end="151:66"><literal type="string" pos:start="151:20" pos:end="151:66">"Error initializing the MFX video decoder %d\n"</literal></expr></argument>, <argument pos:start="151:69" pos:end="151:71"><expr pos:start="151:69" pos:end="151:71"><name pos:start="151:69" pos:end="151:71">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <return pos:start="155:9" pos:end="155:33">return <expr pos:start="155:16" pos:end="155:32"><call pos:start="155:16" pos:end="155:32"><name pos:start="155:16" pos:end="155:27">ff_qsv_error</name><argument_list pos:start="155:28" pos:end="155:32">(<argument pos:start="155:29" pos:end="155:31"><expr pos:start="155:29" pos:end="155:31"><name pos:start="155:29" pos:end="155:31">ret</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:49"><expr pos:start="161:5" pos:end="161:48"><name pos:start="161:5" pos:end="161:18"><name pos:start="161:5" pos:end="161:9">avctx</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:18">profile</name></name>      <operator pos:start="161:25" pos:end="161:25">=</operator> <name pos:start="161:27" pos:end="161:48"><name pos:start="161:27" pos:end="161:31">param</name><operator pos:start="161:32" pos:end="161:32">.</operator><name pos:start="161:33" pos:end="161:35">mfx</name><operator pos:start="161:36" pos:end="161:36">.</operator><name pos:start="161:37" pos:end="161:48">CodecProfile</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:47"><expr pos:start="163:5" pos:end="163:46"><name pos:start="163:5" pos:end="163:16"><name pos:start="163:5" pos:end="163:9">avctx</name><operator pos:start="163:10" pos:end="163:11">-&gt;</operator><name pos:start="163:12" pos:end="163:16">level</name></name>        <operator pos:start="163:25" pos:end="163:25">=</operator> <name pos:start="163:27" pos:end="163:46"><name pos:start="163:27" pos:end="163:31">param</name><operator pos:start="163:32" pos:end="163:32">.</operator><name pos:start="163:33" pos:end="163:35">mfx</name><operator pos:start="163:36" pos:end="163:36">.</operator><name pos:start="163:37" pos:end="163:46">CodecLevel</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:52"><expr pos:start="165:5" pos:end="165:51"><name pos:start="165:5" pos:end="165:22"><name pos:start="165:5" pos:end="165:9">avctx</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:22">coded_width</name></name>  <operator pos:start="165:25" pos:end="165:25">=</operator> <name pos:start="165:27" pos:end="165:51"><name pos:start="165:27" pos:end="165:31">param</name><operator pos:start="165:32" pos:end="165:32">.</operator><name pos:start="165:33" pos:end="165:35">mfx</name><operator pos:start="165:36" pos:end="165:36">.</operator><name pos:start="165:37" pos:end="165:45">FrameInfo</name><operator pos:start="165:46" pos:end="165:46">.</operator><name pos:start="165:47" pos:end="165:51">Width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:53"><expr pos:start="167:5" pos:end="167:52"><name pos:start="167:5" pos:end="167:23"><name pos:start="167:5" pos:end="167:9">avctx</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:23">coded_height</name></name> <operator pos:start="167:25" pos:end="167:25">=</operator> <name pos:start="167:27" pos:end="167:52"><name pos:start="167:27" pos:end="167:31">param</name><operator pos:start="167:32" pos:end="167:32">.</operator><name pos:start="167:33" pos:end="167:35">mfx</name><operator pos:start="167:36" pos:end="167:36">.</operator><name pos:start="167:37" pos:end="167:45">FrameInfo</name><operator pos:start="167:46" pos:end="167:46">.</operator><name pos:start="167:47" pos:end="167:52">Height</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:80"><expr pos:start="169:5" pos:end="169:79"><name pos:start="169:5" pos:end="169:16"><name pos:start="169:5" pos:end="169:9">avctx</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:16">width</name></name>        <operator pos:start="169:25" pos:end="169:25">=</operator> <name pos:start="169:27" pos:end="169:51"><name pos:start="169:27" pos:end="169:31">param</name><operator pos:start="169:32" pos:end="169:32">.</operator><name pos:start="169:33" pos:end="169:35">mfx</name><operator pos:start="169:36" pos:end="169:36">.</operator><name pos:start="169:37" pos:end="169:45">FrameInfo</name><operator pos:start="169:46" pos:end="169:46">.</operator><name pos:start="169:47" pos:end="169:51">CropW</name></name> <operator pos:start="169:53" pos:end="169:53">-</operator> <name pos:start="169:55" pos:end="169:79"><name pos:start="169:55" pos:end="169:59">param</name><operator pos:start="169:60" pos:end="169:60">.</operator><name pos:start="169:61" pos:end="169:63">mfx</name><operator pos:start="169:64" pos:end="169:64">.</operator><name pos:start="169:65" pos:end="169:73">FrameInfo</name><operator pos:start="169:74" pos:end="169:74">.</operator><name pos:start="169:75" pos:end="169:79">CropX</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:80"><expr pos:start="171:5" pos:end="171:79"><name pos:start="171:5" pos:end="171:17"><name pos:start="171:5" pos:end="171:9">avctx</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:17">height</name></name>       <operator pos:start="171:25" pos:end="171:25">=</operator> <name pos:start="171:27" pos:end="171:51"><name pos:start="171:27" pos:end="171:31">param</name><operator pos:start="171:32" pos:end="171:32">.</operator><name pos:start="171:33" pos:end="171:35">mfx</name><operator pos:start="171:36" pos:end="171:36">.</operator><name pos:start="171:37" pos:end="171:45">FrameInfo</name><operator pos:start="171:46" pos:end="171:46">.</operator><name pos:start="171:47" pos:end="171:51">CropH</name></name> <operator pos:start="171:53" pos:end="171:53">-</operator> <name pos:start="171:55" pos:end="171:79"><name pos:start="171:55" pos:end="171:59">param</name><operator pos:start="171:60" pos:end="171:60">.</operator><name pos:start="171:61" pos:end="171:63">mfx</name><operator pos:start="171:64" pos:end="171:64">.</operator><name pos:start="171:65" pos:end="171:73">FrameInfo</name><operator pos:start="171:74" pos:end="171:74">.</operator><name pos:start="171:75" pos:end="171:79">CropY</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="175:5" pos:end="181:7">/* maximum decoder latency should be not exceed max DPB size for h.264 and

       HEVC which is 16 for both cases.

       So weare  pre-allocating fifo big enough for 17 elements:

     */</comment>

    <if_stmt pos:start="183:5" pos:end="193:5"><if pos:start="183:5" pos:end="193:5">if <condition pos:start="183:8" pos:end="183:23">(<expr pos:start="183:9" pos:end="183:22"><operator pos:start="183:9" pos:end="183:9">!</operator><name pos:start="183:10" pos:end="183:22"><name pos:start="183:10" pos:end="183:10">q</name><operator pos:start="183:11" pos:end="183:12">-&gt;</operator><name pos:start="183:13" pos:end="183:22">async_fifo</name></name></expr>)</condition> <block pos:start="183:25" pos:end="193:5">{<block_content pos:start="185:9" pos:end="191:35">

        <expr_stmt pos:start="185:9" pos:end="187:83"><expr pos:start="185:9" pos:end="187:82"><name pos:start="185:9" pos:end="185:21"><name pos:start="185:9" pos:end="185:9">q</name><operator pos:start="185:10" pos:end="185:11">-&gt;</operator><name pos:start="185:12" pos:end="185:21">async_fifo</name></name> <operator pos:start="185:23" pos:end="185:23">=</operator> <call pos:start="185:25" pos:end="187:82"><name pos:start="185:25" pos:end="185:37">av_fifo_alloc</name><argument_list pos:start="185:38" pos:end="187:82">(<argument pos:start="185:39" pos:end="187:81"><expr pos:start="185:39" pos:end="187:81"><operator pos:start="185:39" pos:end="185:39">(</operator><literal type="number" pos:start="185:40" pos:end="185:42">1</literal> <operator pos:start="185:42" pos:end="185:42">+</operator> <literal type="number" pos:start="185:44" pos:end="185:45">16</literal><operator pos:start="185:46" pos:end="185:46">)</operator> <operator pos:start="185:48" pos:end="185:48">*</operator>

                                      <operator pos:start="187:39" pos:end="187:39">(</operator><sizeof pos:start="187:40" pos:end="187:60">sizeof<argument_list pos:start="187:46" pos:end="187:60">(<argument pos:start="187:47" pos:end="187:59"><expr pos:start="187:47" pos:end="187:59"><name pos:start="187:47" pos:end="187:58">mfxSyncPoint</name><operator pos:start="187:59" pos:end="187:59">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="187:62" pos:end="187:62">+</operator> <sizeof pos:start="187:64" pos:end="187:80">sizeof<argument_list pos:start="187:70" pos:end="187:80">(<argument pos:start="187:71" pos:end="187:79"><expr pos:start="187:71" pos:end="187:79"><name pos:start="187:71" pos:end="187:78">QSVFrame</name><operator pos:start="187:79" pos:end="187:79">*</operator></expr></argument>)</argument_list></sizeof><operator pos:start="187:81" pos:end="187:81">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="189:9" pos:end="191:35"><if pos:start="189:9" pos:end="191:35">if <condition pos:start="189:12" pos:end="189:27">(<expr pos:start="189:13" pos:end="189:26"><operator pos:start="189:13" pos:end="189:13">!</operator><name pos:start="189:14" pos:end="189:26"><name pos:start="189:14" pos:end="189:14">q</name><operator pos:start="189:15" pos:end="189:16">-&gt;</operator><name pos:start="189:17" pos:end="189:26">async_fifo</name></name></expr>)</condition><block type="pseudo" pos:start="191:13" pos:end="191:35"><block_content pos:start="191:13" pos:end="191:35">

            <return pos:start="191:13" pos:end="191:35">return <expr pos:start="191:20" pos:end="191:34"><call pos:start="191:20" pos:end="191:34"><name pos:start="191:20" pos:end="191:26">AVERROR</name><argument_list pos:start="191:27" pos:end="191:34">(<argument pos:start="191:28" pos:end="191:33"><expr pos:start="191:28" pos:end="191:33"><name pos:start="191:28" pos:end="191:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="197:5" pos:end="205:5"><if pos:start="197:5" pos:end="205:5">if <condition pos:start="197:8" pos:end="197:23">(<expr pos:start="197:9" pos:end="197:22"><operator pos:start="197:9" pos:end="197:9">!</operator><name pos:start="197:10" pos:end="197:22"><name pos:start="197:10" pos:end="197:10">q</name><operator pos:start="197:11" pos:end="197:12">-&gt;</operator><name pos:start="197:13" pos:end="197:22">input_fifo</name></name></expr>)</condition> <block pos:start="197:25" pos:end="205:5">{<block_content pos:start="199:9" pos:end="203:35">

        <expr_stmt pos:start="199:9" pos:end="199:47"><expr pos:start="199:9" pos:end="199:46"><name pos:start="199:9" pos:end="199:21"><name pos:start="199:9" pos:end="199:9">q</name><operator pos:start="199:10" pos:end="199:11">-&gt;</operator><name pos:start="199:12" pos:end="199:21">input_fifo</name></name> <operator pos:start="199:23" pos:end="199:23">=</operator> <call pos:start="199:25" pos:end="199:46"><name pos:start="199:25" pos:end="199:37">av_fifo_alloc</name><argument_list pos:start="199:38" pos:end="199:46">(<argument pos:start="199:39" pos:end="199:45"><expr pos:start="199:39" pos:end="199:45"><literal type="number" pos:start="199:39" pos:end="199:42">1024</literal><operator pos:start="199:43" pos:end="199:43">*</operator><literal type="number" pos:start="199:44" pos:end="199:45">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="201:9" pos:end="203:35"><if pos:start="201:9" pos:end="203:35">if <condition pos:start="201:12" pos:end="201:27">(<expr pos:start="201:13" pos:end="201:26"><operator pos:start="201:13" pos:end="201:13">!</operator><name pos:start="201:14" pos:end="201:26"><name pos:start="201:14" pos:end="201:14">q</name><operator pos:start="201:15" pos:end="201:16">-&gt;</operator><name pos:start="201:17" pos:end="201:26">input_fifo</name></name></expr>)</condition><block type="pseudo" pos:start="203:13" pos:end="203:35"><block_content pos:start="203:13" pos:end="203:35">

            <return pos:start="203:13" pos:end="203:35">return <expr pos:start="203:20" pos:end="203:34"><call pos:start="203:20" pos:end="203:34"><name pos:start="203:20" pos:end="203:26">AVERROR</name><argument_list pos:start="203:27" pos:end="203:34">(<argument pos:start="203:28" pos:end="203:33"><expr pos:start="203:28" pos:end="203:33"><name pos:start="203:28" pos:end="203:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="209:5" pos:end="217:5"><if pos:start="209:5" pos:end="217:5">if <condition pos:start="209:8" pos:end="209:21">(<expr pos:start="209:9" pos:end="209:20"><operator pos:start="209:9" pos:end="209:9">!</operator><name pos:start="209:10" pos:end="209:20"><name pos:start="209:10" pos:end="209:10">q</name><operator pos:start="209:11" pos:end="209:12">-&gt;</operator><name pos:start="209:13" pos:end="209:20">pkt_fifo</name></name></expr>)</condition> <block pos:start="209:23" pos:end="217:5">{<block_content pos:start="211:9" pos:end="215:35">

        <expr_stmt pos:start="211:9" pos:end="211:67"><expr pos:start="211:9" pos:end="211:66"><name pos:start="211:9" pos:end="211:19"><name pos:start="211:9" pos:end="211:9">q</name><operator pos:start="211:10" pos:end="211:11">-&gt;</operator><name pos:start="211:12" pos:end="211:19">pkt_fifo</name></name> <operator pos:start="211:21" pos:end="211:21">=</operator> <call pos:start="211:23" pos:end="211:66"><name pos:start="211:23" pos:end="211:35">av_fifo_alloc</name><argument_list pos:start="211:36" pos:end="211:66">( <argument pos:start="211:38" pos:end="211:64"><expr pos:start="211:38" pos:end="211:64"><sizeof pos:start="211:38" pos:end="211:53">sizeof<argument_list pos:start="211:44" pos:end="211:53">(<argument pos:start="211:45" pos:end="211:52"><expr pos:start="211:45" pos:end="211:52"><name pos:start="211:45" pos:end="211:52">AVPacket</name></expr></argument>)</argument_list></sizeof> <operator pos:start="211:55" pos:end="211:55">*</operator> <operator pos:start="211:57" pos:end="211:57">(</operator><literal type="number" pos:start="211:58" pos:end="211:60">1</literal> <operator pos:start="211:60" pos:end="211:60">+</operator> <literal type="number" pos:start="211:62" pos:end="211:63">16</literal><operator pos:start="211:64" pos:end="211:64">)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="213:9" pos:end="215:35"><if pos:start="213:9" pos:end="215:35">if <condition pos:start="213:12" pos:end="213:25">(<expr pos:start="213:13" pos:end="213:24"><operator pos:start="213:13" pos:end="213:13">!</operator><name pos:start="213:14" pos:end="213:24"><name pos:start="213:14" pos:end="213:14">q</name><operator pos:start="213:15" pos:end="213:16">-&gt;</operator><name pos:start="213:17" pos:end="213:24">pkt_fifo</name></name></expr>)</condition><block type="pseudo" pos:start="215:13" pos:end="215:35"><block_content pos:start="215:13" pos:end="215:35">

            <return pos:start="215:13" pos:end="215:35">return <expr pos:start="215:20" pos:end="215:34"><call pos:start="215:20" pos:end="215:34"><name pos:start="215:20" pos:end="215:26">AVERROR</name><argument_list pos:start="215:27" pos:end="215:34">(<argument pos:start="215:28" pos:end="215:33"><expr pos:start="215:28" pos:end="215:33"><name pos:start="215:28" pos:end="215:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:24"><expr pos:start="219:5" pos:end="219:23"><name pos:start="219:5" pos:end="219:19"><name pos:start="219:5" pos:end="219:5">q</name><operator pos:start="219:6" pos:end="219:7">-&gt;</operator><name pos:start="219:8" pos:end="219:19">engine_ready</name></name> <operator pos:start="219:21" pos:end="219:21">=</operator> <literal type="number" pos:start="219:23" pos:end="219:23">1</literal></expr>;</expr_stmt>



    <return pos:start="223:5" pos:end="223:13">return <expr pos:start="223:12" pos:end="223:12"><literal type="number" pos:start="223:12" pos:end="223:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
