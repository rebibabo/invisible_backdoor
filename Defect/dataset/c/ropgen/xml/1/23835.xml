<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23835.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">ipvideo_decode_frame</name><parameter_list pos:start="1:32" pos:end="5:48">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:42"><decl pos:start="3:33" pos:end="3:42"><type pos:start="3:33" pos:end="3:42"><name pos:start="3:33" pos:end="3:36">void</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:42">data</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:58"><decl pos:start="3:45" pos:end="3:58"><type pos:start="3:45" pos:end="3:58"><name pos:start="3:45" pos:end="3:47">int</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:58">got_frame</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:47"><decl pos:start="5:33" pos:end="5:47"><type pos:start="5:33" pos:end="5:47"><name pos:start="5:33" pos:end="5:40">AVPacket</name> <modifier pos:start="5:42" pos:end="5:42">*</modifier></type><name pos:start="5:43" pos:end="5:47">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="113:1">{<block_content pos:start="9:5" pos:end="111:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">IpvideoContext</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:21">s</name> <init pos:start="13:23" pos:end="13:40">= <expr pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:29">avctx</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">AVFrame</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:18">frame</name> <init pos:start="15:20" pos:end="15:25">= <expr pos:start="15:22" pos:end="15:25"><name pos:start="15:22" pos:end="15:25">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="23:35"><if pos:start="21:5" pos:end="23:35">if <condition pos:start="21:8" pos:end="21:21">(<expr pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:16">buf_size</name> <operator pos:start="21:18" pos:end="21:18">&lt;</operator> <literal type="number" pos:start="21:20" pos:end="21:20">2</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:35"><block_content pos:start="23:9" pos:end="23:35">

        <return pos:start="23:9" pos:end="23:35">return <expr pos:start="23:16" pos:end="23:34"><name pos:start="23:16" pos:end="23:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:67">/* decoding map contains 4 bits of information per 8x8 block */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:48"><expr pos:start="29:5" pos:end="29:47"><name pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:24">decoding_map_size</name></name> <operator pos:start="29:26" pos:end="29:26">=</operator> <call pos:start="29:28" pos:end="29:47"><name pos:start="29:28" pos:end="29:34">AV_RL16</name><argument_list pos:start="29:35" pos:end="29:47">(<argument pos:start="29:36" pos:end="29:46"><expr pos:start="29:36" pos:end="29:46"><name pos:start="29:36" pos:end="29:46"><name pos:start="29:36" pos:end="29:40">avpkt</name><operator pos:start="29:41" pos:end="29:42">-&gt;</operator><name pos:start="29:43" pos:end="29:46">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="35:22">/* compressed buffer needs to be large enough to at least hold an entire

     * decoding map */</comment>

    <if_stmt pos:start="37:5" pos:end="39:24"><if pos:start="37:5" pos:end="39:24">if <condition pos:start="37:8" pos:end="37:44">(<expr pos:start="37:9" pos:end="37:43"><name pos:start="37:9" pos:end="37:16">buf_size</name> <operator pos:start="37:18" pos:end="37:18">&lt;</operator> <name pos:start="37:20" pos:end="37:39"><name pos:start="37:20" pos:end="37:20">s</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:39">decoding_map_size</name></name> <operator pos:start="37:41" pos:end="37:41">+</operator> <literal type="number" pos:start="37:43" pos:end="37:43">2</literal></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:24"><block_content pos:start="39:9" pos:end="39:24">

        <return pos:start="39:9" pos:end="39:24">return <expr pos:start="39:16" pos:end="39:23"><name pos:start="39:16" pos:end="39:23">buf_size</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:71">(<expr pos:start="43:9" pos:end="43:70"><call pos:start="43:9" pos:end="43:70"><name pos:start="43:9" pos:end="43:31">av_packet_get_side_data</name><argument_list pos:start="43:32" pos:end="43:70">(<argument pos:start="43:33" pos:end="43:37"><expr pos:start="43:33" pos:end="43:37"><name pos:start="43:33" pos:end="43:37">avpkt</name></expr></argument>, <argument pos:start="43:40" pos:end="43:63"><expr pos:start="43:40" pos:end="43:63"><name pos:start="43:40" pos:end="43:63">AV_PKT_DATA_PARAM_CHANGE</name></expr></argument>, <argument pos:start="43:66" pos:end="43:69"><expr pos:start="43:66" pos:end="43:69"><name pos:start="43:66" pos:end="43:69">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:73" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:45">

        <expr_stmt pos:start="45:9" pos:end="45:38"><expr pos:start="45:9" pos:end="45:37"><call pos:start="45:9" pos:end="45:37"><name pos:start="45:9" pos:end="45:22">av_frame_unref</name><argument_list pos:start="45:23" pos:end="45:37">(<argument pos:start="45:24" pos:end="45:36"><expr pos:start="45:24" pos:end="45:36"><name pos:start="45:24" pos:end="45:36"><name pos:start="45:24" pos:end="45:24">s</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:36">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:45"><expr pos:start="47:9" pos:end="47:44"><call pos:start="47:9" pos:end="47:44"><name pos:start="47:9" pos:end="47:22">av_frame_unref</name><argument_list pos:start="47:23" pos:end="47:44">(<argument pos:start="47:24" pos:end="47:43"><expr pos:start="47:24" pos:end="47:43"><name pos:start="47:24" pos:end="47:43"><name pos:start="47:24" pos:end="47:24">s</name><operator pos:start="47:25" pos:end="47:26">-&gt;</operator><name pos:start="47:27" pos:end="47:43">second_last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:30"><expr pos:start="53:5" pos:end="53:29"><name pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:19">decoding_map</name></name> <operator pos:start="53:21" pos:end="53:21">=</operator> <name pos:start="53:23" pos:end="53:25">buf</name> <operator pos:start="53:27" pos:end="53:27">+</operator> <literal type="number" pos:start="53:29" pos:end="53:29">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="57:54"><expr pos:start="55:5" pos:end="57:53"><call pos:start="55:5" pos:end="57:53"><name pos:start="55:5" pos:end="55:20">bytestream2_init</name><argument_list pos:start="55:21" pos:end="57:53">(<argument pos:start="55:22" pos:end="55:35"><expr pos:start="55:22" pos:end="55:35"><operator pos:start="55:22" pos:end="55:22">&amp;</operator><name pos:start="55:23" pos:end="55:35"><name pos:start="55:23" pos:end="55:23">s</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:35">stream_ptr</name></name></expr></argument>, <argument pos:start="55:38" pos:end="55:67"><expr pos:start="55:38" pos:end="55:67"><name pos:start="55:38" pos:end="55:40">buf</name> <operator pos:start="55:42" pos:end="55:42">+</operator> <literal type="number" pos:start="55:44" pos:end="55:46">2</literal> <operator pos:start="55:46" pos:end="55:46">+</operator> <name pos:start="55:48" pos:end="55:67"><name pos:start="55:48" pos:end="55:48">s</name><operator pos:start="55:49" pos:end="55:50">-&gt;</operator><name pos:start="55:51" pos:end="55:67">decoding_map_size</name></name></expr></argument>,

                     <argument pos:start="57:22" pos:end="57:52"><expr pos:start="57:22" pos:end="57:52"><name pos:start="57:22" pos:end="57:29">buf_size</name> <operator pos:start="57:31" pos:end="57:31">-</operator> <name pos:start="57:33" pos:end="57:52"><name pos:start="57:33" pos:end="57:33">s</name><operator pos:start="57:34" pos:end="57:35">-&gt;</operator><name pos:start="57:36" pos:end="57:52">decoding_map_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="63:19"><if pos:start="61:5" pos:end="63:19">if <condition pos:start="61:8" pos:end="61:72">(<expr pos:start="61:9" pos:end="61:71"><operator pos:start="61:9" pos:end="61:9">(</operator><name pos:start="61:10" pos:end="61:12">ret</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <call pos:start="61:16" pos:end="61:66"><name pos:start="61:16" pos:end="61:28">ff_get_buffer</name><argument_list pos:start="61:29" pos:end="61:66">(<argument pos:start="61:30" pos:end="61:34"><expr pos:start="61:30" pos:end="61:34"><name pos:start="61:30" pos:end="61:34">avctx</name></expr></argument>, <argument pos:start="61:37" pos:end="61:41"><expr pos:start="61:37" pos:end="61:41"><name pos:start="61:37" pos:end="61:41">frame</name></expr></argument>, <argument pos:start="61:44" pos:end="61:65"><expr pos:start="61:44" pos:end="61:65"><name pos:start="61:44" pos:end="61:65">AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator pos:start="61:67" pos:end="61:67">)</operator> <operator pos:start="61:69" pos:end="61:69">&lt;</operator> <literal type="number" pos:start="61:71" pos:end="61:71">0</literal></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:19"><block_content pos:start="63:9" pos:end="63:19">

        <return pos:start="63:9" pos:end="63:19">return <expr pos:start="63:16" pos:end="63:18"><name pos:start="63:16" pos:end="63:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="85:5"><if pos:start="67:5" pos:end="85:5">if <condition pos:start="67:8" pos:end="67:21">(<expr pos:start="67:9" pos:end="67:20"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:20"><name pos:start="67:10" pos:end="67:10">s</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:20">is_16bpp</name></name></expr>)</condition> <block pos:start="67:23" pos:end="85:5">{<block_content pos:start="69:9" pos:end="83:9">

        <decl_stmt pos:start="69:9" pos:end="69:17"><decl pos:start="69:9" pos:end="69:16"><type pos:start="69:9" pos:end="69:11"><name pos:start="69:9" pos:end="69:11">int</name></type> <name pos:start="69:13" pos:end="69:16">size</name></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:88"><decl pos:start="71:9" pos:end="71:87"><type pos:start="71:9" pos:end="71:23"><specifier pos:start="71:9" pos:end="71:13">const</specifier> <name pos:start="71:15" pos:end="71:21">uint8_t</name> <modifier pos:start="71:23" pos:end="71:23">*</modifier></type><name pos:start="71:24" pos:end="71:26">pal</name> <init pos:start="71:28" pos:end="71:87">= <expr pos:start="71:30" pos:end="71:87"><call pos:start="71:30" pos:end="71:87"><name pos:start="71:30" pos:end="71:52">av_packet_get_side_data</name><argument_list pos:start="71:53" pos:end="71:87">(<argument pos:start="71:54" pos:end="71:58"><expr pos:start="71:54" pos:end="71:58"><name pos:start="71:54" pos:end="71:58">avpkt</name></expr></argument>, <argument pos:start="71:61" pos:end="71:79"><expr pos:start="71:61" pos:end="71:79"><name pos:start="71:61" pos:end="71:79">AV_PKT_DATA_PALETTE</name></expr></argument>, <argument pos:start="71:82" pos:end="71:86"><expr pos:start="71:82" pos:end="71:86"><operator pos:start="71:82" pos:end="71:82">&amp;</operator><name pos:start="71:83" pos:end="71:86">size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="73:9" pos:end="83:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:42">(<expr pos:start="73:13" pos:end="73:41"><name pos:start="73:13" pos:end="73:15">pal</name> <operator pos:start="73:17" pos:end="73:18">&amp;&amp;</operator> <name pos:start="73:20" pos:end="73:23">size</name> <operator pos:start="73:25" pos:end="73:26">==</operator> <name pos:start="73:28" pos:end="73:41">AVPALETTE_SIZE</name></expr>)</condition> <block pos:start="73:44" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:48">

            <expr_stmt pos:start="75:13" pos:end="75:43"><expr pos:start="75:13" pos:end="75:42"><name pos:start="75:13" pos:end="75:38"><name pos:start="75:13" pos:end="75:17">frame</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:38">palette_has_changed</name></name> <operator pos:start="75:40" pos:end="75:40">=</operator> <literal type="number" pos:start="75:42" pos:end="75:42">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:48"><expr pos:start="77:13" pos:end="77:47"><call pos:start="77:13" pos:end="77:47"><name pos:start="77:13" pos:end="77:18">memcpy</name><argument_list pos:start="77:19" pos:end="77:47">(<argument pos:start="77:20" pos:end="77:25"><expr pos:start="77:20" pos:end="77:25"><name pos:start="77:20" pos:end="77:25"><name pos:start="77:20" pos:end="77:20">s</name><operator pos:start="77:21" pos:end="77:22">-&gt;</operator><name pos:start="77:23" pos:end="77:25">pal</name></name></expr></argument>, <argument pos:start="77:28" pos:end="77:30"><expr pos:start="77:28" pos:end="77:30"><name pos:start="77:28" pos:end="77:30">pal</name></expr></argument>, <argument pos:start="77:33" pos:end="77:46"><expr pos:start="77:33" pos:end="77:46"><name pos:start="77:33" pos:end="77:46">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="79:11" pos:end="83:9">else if <condition pos:start="79:19" pos:end="79:23">(<expr pos:start="79:20" pos:end="79:22"><name pos:start="79:20" pos:end="79:22">pal</name></expr>)</condition> <block pos:start="79:25" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:76">

            <expr_stmt pos:start="81:13" pos:end="81:76"><expr pos:start="81:13" pos:end="81:75"><call pos:start="81:13" pos:end="81:75"><name pos:start="81:13" pos:end="81:18">av_log</name><argument_list pos:start="81:19" pos:end="81:75">(<argument pos:start="81:20" pos:end="81:24"><expr pos:start="81:20" pos:end="81:24"><name pos:start="81:20" pos:end="81:24">avctx</name></expr></argument>, <argument pos:start="81:27" pos:end="81:38"><expr pos:start="81:27" pos:end="81:38"><name pos:start="81:27" pos:end="81:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="81:41" pos:end="81:68"><expr pos:start="81:41" pos:end="81:68"><literal type="string" pos:start="81:41" pos:end="81:68">"Palette size %d is wrong\n"</literal></expr></argument>, <argument pos:start="81:71" pos:end="81:74"><expr pos:start="81:71" pos:end="81:74"><name pos:start="81:71" pos:end="81:74">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:37"><expr pos:start="89:5" pos:end="89:36"><call pos:start="89:5" pos:end="89:36"><name pos:start="89:5" pos:end="89:26">ipvideo_decode_opcodes</name><argument_list pos:start="89:27" pos:end="89:36">(<argument pos:start="89:28" pos:end="89:28"><expr pos:start="89:28" pos:end="89:28"><name pos:start="89:28" pos:end="89:28">s</name></expr></argument>, <argument pos:start="89:31" pos:end="89:35"><expr pos:start="89:31" pos:end="89:35"><name pos:start="89:31" pos:end="89:35">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:19"><expr pos:start="93:5" pos:end="93:18"><operator pos:start="93:5" pos:end="93:5">*</operator><name pos:start="93:6" pos:end="93:14">got_frame</name> <operator pos:start="93:16" pos:end="93:16">=</operator> <literal type="number" pos:start="93:18" pos:end="93:18">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:24">/* shuffle frames */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:41"><expr pos:start="99:5" pos:end="99:40"><call pos:start="99:5" pos:end="99:40"><name pos:start="99:5" pos:end="99:18">av_frame_unref</name><argument_list pos:start="99:19" pos:end="99:40">(<argument pos:start="99:20" pos:end="99:39"><expr pos:start="99:20" pos:end="99:39"><name pos:start="99:20" pos:end="99:39"><name pos:start="99:20" pos:end="99:20">s</name><operator pos:start="99:21" pos:end="99:22">-&gt;</operator><name pos:start="99:23" pos:end="99:39">second_last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:58"><expr pos:start="101:5" pos:end="101:57"><call pos:start="101:5" pos:end="101:57"><name pos:start="101:5" pos:end="101:10">FFSWAP</name><argument_list pos:start="101:11" pos:end="101:57">(<argument pos:start="101:12" pos:end="101:19"><expr pos:start="101:12" pos:end="101:19"><name pos:start="101:12" pos:end="101:18">AVFrame</name><operator pos:start="101:19" pos:end="101:19">*</operator></expr></argument>, <argument pos:start="101:22" pos:end="101:41"><expr pos:start="101:22" pos:end="101:41"><name pos:start="101:22" pos:end="101:41"><name pos:start="101:22" pos:end="101:22">s</name><operator pos:start="101:23" pos:end="101:24">-&gt;</operator><name pos:start="101:25" pos:end="101:41">second_last_frame</name></name></expr></argument>, <argument pos:start="101:44" pos:end="101:56"><expr pos:start="101:44" pos:end="101:56"><name pos:start="101:44" pos:end="101:56"><name pos:start="101:44" pos:end="101:44">s</name><operator pos:start="101:45" pos:end="101:46">-&gt;</operator><name pos:start="101:47" pos:end="101:56">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="105:19"><if pos:start="103:5" pos:end="105:19">if <condition pos:start="103:8" pos:end="103:55">(<expr pos:start="103:9" pos:end="103:54"><operator pos:start="103:9" pos:end="103:9">(</operator><name pos:start="103:10" pos:end="103:12">ret</name> <operator pos:start="103:14" pos:end="103:14">=</operator> <call pos:start="103:16" pos:end="103:49"><name pos:start="103:16" pos:end="103:27">av_frame_ref</name><argument_list pos:start="103:28" pos:end="103:49">(<argument pos:start="103:29" pos:end="103:41"><expr pos:start="103:29" pos:end="103:41"><name pos:start="103:29" pos:end="103:41"><name pos:start="103:29" pos:end="103:29">s</name><operator pos:start="103:30" pos:end="103:31">-&gt;</operator><name pos:start="103:32" pos:end="103:41">last_frame</name></name></expr></argument>, <argument pos:start="103:44" pos:end="103:48"><expr pos:start="103:44" pos:end="103:48"><name pos:start="103:44" pos:end="103:48">frame</name></expr></argument>)</argument_list></call><operator pos:start="103:50" pos:end="103:50">)</operator> <operator pos:start="103:52" pos:end="103:52">&lt;</operator> <literal type="number" pos:start="103:54" pos:end="103:54">0</literal></expr>)</condition><block type="pseudo" pos:start="105:9" pos:end="105:19"><block_content pos:start="105:9" pos:end="105:19">

        <return pos:start="105:9" pos:end="105:19">return <expr pos:start="105:16" pos:end="105:18"><name pos:start="105:16" pos:end="105:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:56">/* report that the buffer was completely consumed */</comment>

    <return pos:start="111:5" pos:end="111:20">return <expr pos:start="111:12" pos:end="111:19"><name pos:start="111:12" pos:end="111:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
