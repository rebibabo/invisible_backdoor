<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19790.c" pos:tabs="8"><function pos:start="1:1" pos:end="206:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">build_trampolines</name><parameter_list pos:start="1:30" pos:end="1:44">(<parameter pos:start="1:31" pos:end="1:43"><decl pos:start="1:31" pos:end="1:43"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:40">TCGContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="206:1">{<block_content pos:start="5:5" pos:end="204:5">

    <decl_stmt pos:start="5:5" pos:end="27:6"><decl pos:start="5:5" pos:end="27:5"><type pos:start="5:5" pos:end="5:23"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <name pos:start="5:12" pos:end="5:15">void</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier> <specifier pos:start="5:19" pos:end="5:23">const</specifier></type> <name pos:start="5:25" pos:end="5:43"><name pos:start="5:25" pos:end="5:39">qemu_ld_helpers</name><index pos:start="5:40" pos:end="5:43">[<expr pos:start="5:41" pos:end="5:42"><literal type="number" pos:start="5:41" pos:end="5:42">16</literal></expr>]</index></name> <init pos:start="5:45" pos:end="27:5">= <expr pos:start="5:47" pos:end="27:5"><block pos:start="5:47" pos:end="27:5">{

        <expr pos:start="7:9" pos:end="7:39"><index pos:start="7:9" pos:end="7:15">[<expr pos:start="7:10" pos:end="7:14"><name pos:start="7:10" pos:end="7:14">MO_UB</name></expr>]</index>   <operator pos:start="7:19" pos:end="7:19">=</operator> <name pos:start="7:21" pos:end="7:39">helper_ret_ldub_mmu</name></expr>,

        <expr pos:start="9:9" pos:end="9:39"><index pos:start="9:9" pos:end="9:15">[<expr pos:start="9:10" pos:end="9:14"><name pos:start="9:10" pos:end="9:14">MO_SB</name></expr>]</index>   <operator pos:start="9:19" pos:end="9:19">=</operator> <name pos:start="9:21" pos:end="9:39">helper_ret_ldsb_mmu</name></expr>,

        <expr pos:start="11:9" pos:end="11:38"><index pos:start="11:9" pos:end="11:17">[<expr pos:start="11:10" pos:end="11:16"><name pos:start="11:10" pos:end="11:16">MO_LEUW</name></expr>]</index> <operator pos:start="11:19" pos:end="11:19">=</operator> <name pos:start="11:21" pos:end="11:38">helper_le_lduw_mmu</name></expr>,

        <expr pos:start="13:9" pos:end="13:38"><index pos:start="13:9" pos:end="13:17">[<expr pos:start="13:10" pos:end="13:16"><name pos:start="13:10" pos:end="13:16">MO_LESW</name></expr>]</index> <operator pos:start="13:19" pos:end="13:19">=</operator> <name pos:start="13:21" pos:end="13:38">helper_le_ldsw_mmu</name></expr>,

        <expr pos:start="15:9" pos:end="15:38"><index pos:start="15:9" pos:end="15:17">[<expr pos:start="15:10" pos:end="15:16"><name pos:start="15:10" pos:end="15:16">MO_LEUL</name></expr>]</index> <operator pos:start="15:19" pos:end="15:19">=</operator> <name pos:start="15:21" pos:end="15:38">helper_le_ldul_mmu</name></expr>,

        <expr pos:start="17:9" pos:end="17:37"><index pos:start="17:9" pos:end="17:16">[<expr pos:start="17:10" pos:end="17:15"><name pos:start="17:10" pos:end="17:15">MO_LEQ</name></expr>]</index>  <operator pos:start="17:19" pos:end="17:19">=</operator> <name pos:start="17:21" pos:end="17:37">helper_le_ldq_mmu</name></expr>,

        <expr pos:start="19:9" pos:end="19:38"><index pos:start="19:9" pos:end="19:17">[<expr pos:start="19:10" pos:end="19:16"><name pos:start="19:10" pos:end="19:16">MO_BEUW</name></expr>]</index> <operator pos:start="19:19" pos:end="19:19">=</operator> <name pos:start="19:21" pos:end="19:38">helper_be_lduw_mmu</name></expr>,

        <expr pos:start="21:9" pos:end="21:38"><index pos:start="21:9" pos:end="21:17">[<expr pos:start="21:10" pos:end="21:16"><name pos:start="21:10" pos:end="21:16">MO_BESW</name></expr>]</index> <operator pos:start="21:19" pos:end="21:19">=</operator> <name pos:start="21:21" pos:end="21:38">helper_be_ldsw_mmu</name></expr>,

        <expr pos:start="23:9" pos:end="23:38"><index pos:start="23:9" pos:end="23:17">[<expr pos:start="23:10" pos:end="23:16"><name pos:start="23:10" pos:end="23:16">MO_BEUL</name></expr>]</index> <operator pos:start="23:19" pos:end="23:19">=</operator> <name pos:start="23:21" pos:end="23:38">helper_be_ldul_mmu</name></expr>,

        <expr pos:start="25:9" pos:end="25:37"><index pos:start="25:9" pos:end="25:16">[<expr pos:start="25:10" pos:end="25:15"><name pos:start="25:10" pos:end="25:15">MO_BEQ</name></expr>]</index>  <operator pos:start="25:19" pos:end="25:19">=</operator> <name pos:start="25:21" pos:end="25:37">helper_be_ldq_mmu</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="45:6"><decl pos:start="29:5" pos:end="45:5"><type pos:start="29:5" pos:end="29:23"><specifier pos:start="29:5" pos:end="29:10">static</specifier> <name pos:start="29:12" pos:end="29:15">void</name> <modifier pos:start="29:17" pos:end="29:17">*</modifier> <specifier pos:start="29:19" pos:end="29:23">const</specifier></type> <name pos:start="29:25" pos:end="29:43"><name pos:start="29:25" pos:end="29:39">qemu_st_helpers</name><index pos:start="29:40" pos:end="29:43">[<expr pos:start="29:41" pos:end="29:42"><literal type="number" pos:start="29:41" pos:end="29:42">16</literal></expr>]</index></name> <init pos:start="29:45" pos:end="45:5">= <expr pos:start="29:47" pos:end="45:5"><block pos:start="29:47" pos:end="45:5">{

        <expr pos:start="31:9" pos:end="31:38"><index pos:start="31:9" pos:end="31:15">[<expr pos:start="31:10" pos:end="31:14"><name pos:start="31:10" pos:end="31:14">MO_UB</name></expr>]</index>   <operator pos:start="31:19" pos:end="31:19">=</operator> <name pos:start="31:21" pos:end="31:38">helper_ret_stb_mmu</name></expr>,

        <expr pos:start="33:9" pos:end="33:37"><index pos:start="33:9" pos:end="33:17">[<expr pos:start="33:10" pos:end="33:16"><name pos:start="33:10" pos:end="33:16">MO_LEUW</name></expr>]</index> <operator pos:start="33:19" pos:end="33:19">=</operator> <name pos:start="33:21" pos:end="33:37">helper_le_stw_mmu</name></expr>,

        <expr pos:start="35:9" pos:end="35:37"><index pos:start="35:9" pos:end="35:17">[<expr pos:start="35:10" pos:end="35:16"><name pos:start="35:10" pos:end="35:16">MO_LEUL</name></expr>]</index> <operator pos:start="35:19" pos:end="35:19">=</operator> <name pos:start="35:21" pos:end="35:37">helper_le_stl_mmu</name></expr>,

        <expr pos:start="37:9" pos:end="37:37"><index pos:start="37:9" pos:end="37:16">[<expr pos:start="37:10" pos:end="37:15"><name pos:start="37:10" pos:end="37:15">MO_LEQ</name></expr>]</index>  <operator pos:start="37:19" pos:end="37:19">=</operator> <name pos:start="37:21" pos:end="37:37">helper_le_stq_mmu</name></expr>,

        <expr pos:start="39:9" pos:end="39:37"><index pos:start="39:9" pos:end="39:17">[<expr pos:start="39:10" pos:end="39:16"><name pos:start="39:10" pos:end="39:16">MO_BEUW</name></expr>]</index> <operator pos:start="39:19" pos:end="39:19">=</operator> <name pos:start="39:21" pos:end="39:37">helper_be_stw_mmu</name></expr>,

        <expr pos:start="41:9" pos:end="41:37"><index pos:start="41:9" pos:end="41:17">[<expr pos:start="41:10" pos:end="41:16"><name pos:start="41:10" pos:end="41:16">MO_BEUL</name></expr>]</index> <operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:37">helper_be_stl_mmu</name></expr>,

        <expr pos:start="43:9" pos:end="43:37"><index pos:start="43:9" pos:end="43:16">[<expr pos:start="43:10" pos:end="43:15"><name pos:start="43:10" pos:end="43:15">MO_BEQ</name></expr>]</index>  <operator pos:start="43:19" pos:end="43:19">=</operator> <name pos:start="43:21" pos:end="43:37">helper_be_stq_mmu</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="49:5" pos:end="49:10"><decl pos:start="49:5" pos:end="49:9"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:14"><decl pos:start="51:5" pos:end="51:13"><type pos:start="51:5" pos:end="51:10"><name pos:start="51:5" pos:end="51:10">TCGReg</name></type> <name pos:start="51:12" pos:end="51:13">ra</name></decl>;</decl_stmt>



    <for pos:start="55:5" pos:end="107:5">for <control pos:start="55:9" pos:end="55:28">(<init pos:start="55:10" pos:end="55:15"><expr pos:start="55:10" pos:end="55:14"><name pos:start="55:10" pos:end="55:10">i</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <literal type="number" pos:start="55:14" pos:end="55:14">0</literal></expr>;</init> <condition pos:start="55:17" pos:end="55:23"><expr pos:start="55:17" pos:end="55:22"><name pos:start="55:17" pos:end="55:17">i</name> <operator pos:start="55:19" pos:end="55:19">&lt;</operator> <literal type="number" pos:start="55:21" pos:end="55:22">16</literal></expr>;</condition> <incr pos:start="55:25" pos:end="55:27"><expr pos:start="55:25" pos:end="55:27"><operator pos:start="55:25" pos:end="55:26">++</operator><name pos:start="55:27" pos:end="55:27">i</name></expr></incr>)</control> <block pos:start="55:30" pos:end="107:5">{<block_content pos:start="57:9" pos:end="105:53">

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:39">(<expr pos:start="57:13" pos:end="57:38"><name pos:start="57:13" pos:end="57:30"><name pos:start="57:13" pos:end="57:27">qemu_ld_helpers</name><index pos:start="57:28" pos:end="57:30">[<expr pos:start="57:29" pos:end="57:29"><name pos:start="57:29" pos:end="57:29">i</name></expr>]</index></name> <operator pos:start="57:32" pos:end="57:33">==</operator> <name pos:start="57:35" pos:end="57:38">NULL</name></expr>)</condition> <block pos:start="57:41" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:21">

            <continue pos:start="59:13" pos:end="59:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="65:9" pos:end="65:48">/* May as well align the trampoline.  */</comment>

        <while pos:start="67:9" pos:end="71:9">while <condition pos:start="67:15" pos:end="67:43">(<expr pos:start="67:16" pos:end="67:42"><operator pos:start="67:16" pos:end="67:16">(</operator><name pos:start="67:17" pos:end="67:25">uintptr_t</name><operator pos:start="67:26" pos:end="67:26">)</operator><name pos:start="67:27" pos:end="67:37"><name pos:start="67:27" pos:end="67:27">s</name><operator pos:start="67:28" pos:end="67:29">-&gt;</operator><name pos:start="67:30" pos:end="67:37">code_ptr</name></name> <operator pos:start="67:39" pos:end="67:39">&amp;</operator> <literal type="number" pos:start="67:41" pos:end="67:42">15</literal></expr>)</condition> <block pos:start="67:45" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:27">

            <expr_stmt pos:start="69:13" pos:end="69:27"><expr pos:start="69:13" pos:end="69:26"><call pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:23">tcg_out_nop</name><argument_list pos:start="69:24" pos:end="69:26">(<argument pos:start="69:25" pos:end="69:25"><expr pos:start="69:25" pos:end="69:25"><name pos:start="69:25" pos:end="69:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="73:9" pos:end="73:44"><expr pos:start="73:9" pos:end="73:43"><name pos:start="73:9" pos:end="73:29"><name pos:start="73:9" pos:end="73:26">qemu_ld_trampoline</name><index pos:start="73:27" pos:end="73:29">[<expr pos:start="73:28" pos:end="73:28"><name pos:start="73:28" pos:end="73:28">i</name></expr>]</index></name> <operator pos:start="73:31" pos:end="73:31">=</operator> <name pos:start="73:33" pos:end="73:43"><name pos:start="73:33" pos:end="73:33">s</name><operator pos:start="73:34" pos:end="73:35">-&gt;</operator><name pos:start="73:36" pos:end="73:43">code_ptr</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="77:9" pos:end="89:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:46">(<expr pos:start="77:13" pos:end="77:45"><name pos:start="77:13" pos:end="77:19">SPARC64</name> <operator pos:start="77:21" pos:end="77:22">||</operator> <name pos:start="77:24" pos:end="77:39">TARGET_LONG_BITS</name> <operator pos:start="77:41" pos:end="77:42">==</operator> <literal type="number" pos:start="77:44" pos:end="77:45">32</literal></expr>)</condition> <block pos:start="77:48" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:28">

            <expr_stmt pos:start="79:13" pos:end="79:28"><expr pos:start="79:13" pos:end="79:27"><name pos:start="79:13" pos:end="79:14">ra</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <name pos:start="79:18" pos:end="79:27">TCG_REG_O3</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="81:11" pos:end="89:9">else <block pos:start="81:16" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:28">

            <comment type="block" pos:start="83:13" pos:end="83:56">/* Install the high part of the address.  */</comment>

            <expr_stmt pos:start="85:13" pos:end="85:70"><expr pos:start="85:13" pos:end="85:69"><call pos:start="85:13" pos:end="85:69"><name pos:start="85:13" pos:end="85:26">tcg_out_arithi</name><argument_list pos:start="85:27" pos:end="85:69">(<argument pos:start="85:28" pos:end="85:28"><expr pos:start="85:28" pos:end="85:28"><name pos:start="85:28" pos:end="85:28">s</name></expr></argument>, <argument pos:start="85:31" pos:end="85:40"><expr pos:start="85:31" pos:end="85:40"><name pos:start="85:31" pos:end="85:40">TCG_REG_O1</name></expr></argument>, <argument pos:start="85:43" pos:end="85:52"><expr pos:start="85:43" pos:end="85:52"><name pos:start="85:43" pos:end="85:52">TCG_REG_O2</name></expr></argument>, <argument pos:start="85:55" pos:end="85:56"><expr pos:start="85:55" pos:end="85:56"><literal type="number" pos:start="85:55" pos:end="85:56">32</literal></expr></argument>, <argument pos:start="85:59" pos:end="85:68"><expr pos:start="85:59" pos:end="85:68"><name pos:start="85:59" pos:end="85:68">SHIFT_SRLX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:28"><expr pos:start="87:13" pos:end="87:27"><name pos:start="87:13" pos:end="87:14">ra</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <name pos:start="87:18" pos:end="87:27">TCG_REG_O4</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="93:9" pos:end="93:39">/* Set the retaddr operand.  */</comment>

        <expr_stmt pos:start="95:9" pos:end="95:53"><expr pos:start="95:9" pos:end="95:52"><call pos:start="95:9" pos:end="95:52"><name pos:start="95:9" pos:end="95:19">tcg_out_mov</name><argument_list pos:start="95:20" pos:end="95:52">(<argument pos:start="95:21" pos:end="95:21"><expr pos:start="95:21" pos:end="95:21"><name pos:start="95:21" pos:end="95:21">s</name></expr></argument>, <argument pos:start="95:24" pos:end="95:35"><expr pos:start="95:24" pos:end="95:35"><name pos:start="95:24" pos:end="95:35">TCG_TYPE_PTR</name></expr></argument>, <argument pos:start="95:38" pos:end="95:39"><expr pos:start="95:38" pos:end="95:39"><name pos:start="95:38" pos:end="95:39">ra</name></expr></argument>, <argument pos:start="95:42" pos:end="95:51"><expr pos:start="95:42" pos:end="95:51"><name pos:start="95:42" pos:end="95:51">TCG_REG_O7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="97:9" pos:end="97:35">/* Set the env operand.  */</comment>

        <expr_stmt pos:start="99:9" pos:end="99:60"><expr pos:start="99:9" pos:end="99:59"><call pos:start="99:9" pos:end="99:59"><name pos:start="99:9" pos:end="99:19">tcg_out_mov</name><argument_list pos:start="99:20" pos:end="99:59">(<argument pos:start="99:21" pos:end="99:21"><expr pos:start="99:21" pos:end="99:21"><name pos:start="99:21" pos:end="99:21">s</name></expr></argument>, <argument pos:start="99:24" pos:end="99:35"><expr pos:start="99:24" pos:end="99:35"><name pos:start="99:24" pos:end="99:35">TCG_TYPE_PTR</name></expr></argument>, <argument pos:start="99:38" pos:end="99:47"><expr pos:start="99:38" pos:end="99:47"><name pos:start="99:38" pos:end="99:47">TCG_REG_O0</name></expr></argument>, <argument pos:start="99:50" pos:end="99:58"><expr pos:start="99:50" pos:end="99:58"><name pos:start="99:50" pos:end="99:58">TCG_AREG0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="101:9" pos:end="101:25">/* Tail call.  */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:52"><expr pos:start="103:9" pos:end="103:51"><call pos:start="103:9" pos:end="103:51"><name pos:start="103:9" pos:end="103:28">tcg_out_call_nodelay</name><argument_list pos:start="103:29" pos:end="103:51">(<argument pos:start="103:30" pos:end="103:30"><expr pos:start="103:30" pos:end="103:30"><name pos:start="103:30" pos:end="103:30">s</name></expr></argument>, <argument pos:start="103:33" pos:end="103:50"><expr pos:start="103:33" pos:end="103:50"><name pos:start="103:33" pos:end="103:50"><name pos:start="103:33" pos:end="103:47">qemu_ld_helpers</name><index pos:start="103:48" pos:end="103:50">[<expr pos:start="103:49" pos:end="103:49"><name pos:start="103:49" pos:end="103:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:53"><expr pos:start="105:9" pos:end="105:52"><call pos:start="105:9" pos:end="105:52"><name pos:start="105:9" pos:end="105:19">tcg_out_mov</name><argument_list pos:start="105:20" pos:end="105:52">(<argument pos:start="105:21" pos:end="105:21"><expr pos:start="105:21" pos:end="105:21"><name pos:start="105:21" pos:end="105:21">s</name></expr></argument>, <argument pos:start="105:24" pos:end="105:35"><expr pos:start="105:24" pos:end="105:35"><name pos:start="105:24" pos:end="105:35">TCG_TYPE_PTR</name></expr></argument>, <argument pos:start="105:38" pos:end="105:47"><expr pos:start="105:38" pos:end="105:47"><name pos:start="105:38" pos:end="105:47">TCG_REG_O7</name></expr></argument>, <argument pos:start="105:50" pos:end="105:51"><expr pos:start="105:50" pos:end="105:51"><name pos:start="105:50" pos:end="105:51">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="111:5" pos:end="204:5">for <control pos:start="111:9" pos:end="111:28">(<init pos:start="111:10" pos:end="111:15"><expr pos:start="111:10" pos:end="111:14"><name pos:start="111:10" pos:end="111:10">i</name> <operator pos:start="111:12" pos:end="111:12">=</operator> <literal type="number" pos:start="111:14" pos:end="111:14">0</literal></expr>;</init> <condition pos:start="111:17" pos:end="111:23"><expr pos:start="111:17" pos:end="111:22"><name pos:start="111:17" pos:end="111:17">i</name> <operator pos:start="111:19" pos:end="111:19">&lt;</operator> <literal type="number" pos:start="111:21" pos:end="111:22">16</literal></expr>;</condition> <incr pos:start="111:25" pos:end="111:27"><expr pos:start="111:25" pos:end="111:27"><operator pos:start="111:25" pos:end="111:26">++</operator><name pos:start="111:27" pos:end="111:27">i</name></expr></incr>)</control> <block pos:start="111:30" pos:end="204:5">{<block_content pos:start="113:9" pos:end="202:53">

        <if_stmt pos:start="113:9" pos:end="117:9"><if pos:start="113:9" pos:end="117:9">if <condition pos:start="113:12" pos:end="113:39">(<expr pos:start="113:13" pos:end="113:38"><name pos:start="113:13" pos:end="113:30"><name pos:start="113:13" pos:end="113:27">qemu_st_helpers</name><index pos:start="113:28" pos:end="113:30">[<expr pos:start="113:29" pos:end="113:29"><name pos:start="113:29" pos:end="113:29">i</name></expr>]</index></name> <operator pos:start="113:32" pos:end="113:33">==</operator> <name pos:start="113:35" pos:end="113:38">NULL</name></expr>)</condition> <block pos:start="113:41" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:21">

            <continue pos:start="115:13" pos:end="115:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="121:9" pos:end="121:48">/* May as well align the trampoline.  */</comment>

        <while pos:start="123:9" pos:end="127:9">while <condition pos:start="123:15" pos:end="123:43">(<expr pos:start="123:16" pos:end="123:42"><operator pos:start="123:16" pos:end="123:16">(</operator><name pos:start="123:17" pos:end="123:25">uintptr_t</name><operator pos:start="123:26" pos:end="123:26">)</operator><name pos:start="123:27" pos:end="123:37"><name pos:start="123:27" pos:end="123:27">s</name><operator pos:start="123:28" pos:end="123:29">-&gt;</operator><name pos:start="123:30" pos:end="123:37">code_ptr</name></name> <operator pos:start="123:39" pos:end="123:39">&amp;</operator> <literal type="number" pos:start="123:41" pos:end="123:42">15</literal></expr>)</condition> <block pos:start="123:45" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:27">

            <expr_stmt pos:start="125:13" pos:end="125:27"><expr pos:start="125:13" pos:end="125:26"><call pos:start="125:13" pos:end="125:26"><name pos:start="125:13" pos:end="125:23">tcg_out_nop</name><argument_list pos:start="125:24" pos:end="125:26">(<argument pos:start="125:25" pos:end="125:25"><expr pos:start="125:25" pos:end="125:25"><name pos:start="125:25" pos:end="125:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="129:9" pos:end="129:44"><expr pos:start="129:9" pos:end="129:43"><name pos:start="129:9" pos:end="129:29"><name pos:start="129:9" pos:end="129:26">qemu_st_trampoline</name><index pos:start="129:27" pos:end="129:29">[<expr pos:start="129:28" pos:end="129:28"><name pos:start="129:28" pos:end="129:28">i</name></expr>]</index></name> <operator pos:start="129:31" pos:end="129:31">=</operator> <name pos:start="129:33" pos:end="129:43"><name pos:start="129:33" pos:end="129:33">s</name><operator pos:start="129:34" pos:end="129:35">-&gt;</operator><name pos:start="129:36" pos:end="129:43">code_ptr</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="133:9" pos:end="176:9"><if pos:start="133:9" pos:end="139:9">if <condition pos:start="133:12" pos:end="133:20">(<expr pos:start="133:13" pos:end="133:19"><name pos:start="133:13" pos:end="133:19">SPARC64</name></expr>)</condition> <block pos:start="133:22" pos:end="139:9">{<block_content pos:start="135:13" pos:end="137:28">

            <expr_stmt pos:start="135:13" pos:end="135:42"><expr pos:start="135:13" pos:end="135:41"><call pos:start="135:13" pos:end="135:41"><name pos:start="135:13" pos:end="135:23">emit_extend</name><argument_list pos:start="135:24" pos:end="135:41">(<argument pos:start="135:25" pos:end="135:25"><expr pos:start="135:25" pos:end="135:25"><name pos:start="135:25" pos:end="135:25">s</name></expr></argument>, <argument pos:start="135:28" pos:end="135:37"><expr pos:start="135:28" pos:end="135:37"><name pos:start="135:28" pos:end="135:37">TCG_REG_O2</name></expr></argument>, <argument pos:start="135:40" pos:end="135:40"><expr pos:start="135:40" pos:end="135:40"><name pos:start="135:40" pos:end="135:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:28"><expr pos:start="137:13" pos:end="137:27"><name pos:start="137:13" pos:end="137:14">ra</name> <operator pos:start="137:16" pos:end="137:16">=</operator> <name pos:start="137:18" pos:end="137:27">TCG_REG_O4</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="139:11" pos:end="176:9">else <block pos:start="139:16" pos:end="176:9">{<block_content pos:start="141:13" pos:end="174:20">

            <expr_stmt pos:start="141:13" pos:end="141:28"><expr pos:start="141:13" pos:end="141:27"><name pos:start="141:13" pos:end="141:14">ra</name> <operator pos:start="141:16" pos:end="141:16">=</operator> <name pos:start="141:18" pos:end="141:27">TCG_REG_O1</name></expr>;</expr_stmt>

            <if_stmt pos:start="143:13" pos:end="155:13"><if pos:start="143:13" pos:end="151:13">if <condition pos:start="143:16" pos:end="143:39">(<expr pos:start="143:17" pos:end="143:38"><name pos:start="143:17" pos:end="143:32">TARGET_LONG_BITS</name> <operator pos:start="143:34" pos:end="143:35">==</operator> <literal type="number" pos:start="143:37" pos:end="143:38">64</literal></expr>)</condition> <block pos:start="143:41" pos:end="151:13">{<block_content pos:start="147:17" pos:end="149:24">

                <comment type="block" pos:start="145:17" pos:end="145:60">/* Install the high part of the address.  */</comment>

                <expr_stmt pos:start="147:17" pos:end="147:62"><expr pos:start="147:17" pos:end="147:61"><call pos:start="147:17" pos:end="147:61"><name pos:start="147:17" pos:end="147:30">tcg_out_arithi</name><argument_list pos:start="147:31" pos:end="147:61">(<argument pos:start="147:32" pos:end="147:32"><expr pos:start="147:32" pos:end="147:32"><name pos:start="147:32" pos:end="147:32">s</name></expr></argument>, <argument pos:start="147:35" pos:end="147:36"><expr pos:start="147:35" pos:end="147:36"><name pos:start="147:35" pos:end="147:36">ra</name></expr></argument>, <argument pos:start="147:39" pos:end="147:44"><expr pos:start="147:39" pos:end="147:44"><name pos:start="147:39" pos:end="147:40">ra</name> <operator pos:start="147:42" pos:end="147:42">+</operator> <literal type="number" pos:start="147:44" pos:end="147:44">1</literal></expr></argument>, <argument pos:start="147:47" pos:end="147:48"><expr pos:start="147:47" pos:end="147:48"><literal type="number" pos:start="147:47" pos:end="147:48">32</literal></expr></argument>, <argument pos:start="147:51" pos:end="147:60"><expr pos:start="147:51" pos:end="147:60"><name pos:start="147:51" pos:end="147:60">SHIFT_SRLX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:24"><expr pos:start="149:17" pos:end="149:23"><name pos:start="149:17" pos:end="149:18">ra</name> <operator pos:start="149:20" pos:end="149:21">+=</operator> <literal type="number" pos:start="149:23" pos:end="149:23">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="151:15" pos:end="155:13">else <block pos:start="151:20" pos:end="155:13">{<block_content pos:start="153:17" pos:end="153:24">

                <expr_stmt pos:start="153:17" pos:end="153:24"><expr pos:start="153:17" pos:end="153:23"><name pos:start="153:17" pos:end="153:18">ra</name> <operator pos:start="153:20" pos:end="153:21">+=</operator> <literal type="number" pos:start="153:23" pos:end="153:23">1</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="157:13" pos:end="170:13"><if pos:start="157:13" pos:end="165:13">if <condition pos:start="157:16" pos:end="157:39">(<expr pos:start="157:17" pos:end="157:38"><operator pos:start="157:17" pos:end="157:17">(</operator><name pos:start="157:18" pos:end="157:18">i</name> <operator pos:start="157:20" pos:end="157:20">&amp;</operator> <name pos:start="157:22" pos:end="157:28">MO_SIZE</name><operator pos:start="157:29" pos:end="157:29">)</operator> <operator pos:start="157:31" pos:end="157:32">==</operator> <name pos:start="157:34" pos:end="157:38">MO_64</name></expr>)</condition> <block pos:start="157:41" pos:end="165:13">{<block_content pos:start="161:17" pos:end="163:24">

                <comment type="block" pos:start="159:17" pos:end="159:57">/* Install the high part of the data.  */</comment>

                <expr_stmt pos:start="161:17" pos:end="161:62"><expr pos:start="161:17" pos:end="161:61"><call pos:start="161:17" pos:end="161:61"><name pos:start="161:17" pos:end="161:30">tcg_out_arithi</name><argument_list pos:start="161:31" pos:end="161:61">(<argument pos:start="161:32" pos:end="161:32"><expr pos:start="161:32" pos:end="161:32"><name pos:start="161:32" pos:end="161:32">s</name></expr></argument>, <argument pos:start="161:35" pos:end="161:36"><expr pos:start="161:35" pos:end="161:36"><name pos:start="161:35" pos:end="161:36">ra</name></expr></argument>, <argument pos:start="161:39" pos:end="161:44"><expr pos:start="161:39" pos:end="161:44"><name pos:start="161:39" pos:end="161:40">ra</name> <operator pos:start="161:42" pos:end="161:42">+</operator> <literal type="number" pos:start="161:44" pos:end="161:44">1</literal></expr></argument>, <argument pos:start="161:47" pos:end="161:48"><expr pos:start="161:47" pos:end="161:48"><literal type="number" pos:start="161:47" pos:end="161:48">32</literal></expr></argument>, <argument pos:start="161:51" pos:end="161:60"><expr pos:start="161:51" pos:end="161:60"><name pos:start="161:51" pos:end="161:60">SHIFT_SRLX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="163:17" pos:end="163:24"><expr pos:start="163:17" pos:end="163:23"><name pos:start="163:17" pos:end="163:18">ra</name> <operator pos:start="163:20" pos:end="163:21">+=</operator> <literal type="number" pos:start="163:23" pos:end="163:23">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="165:15" pos:end="170:13">else <block pos:start="165:20" pos:end="170:13">{<block_content pos:start="168:17" pos:end="168:24">


                <expr_stmt pos:start="168:17" pos:end="168:24"><expr pos:start="168:17" pos:end="168:23"><name pos:start="168:17" pos:end="168:18">ra</name> <operator pos:start="168:20" pos:end="168:21">+=</operator> <literal type="number" pos:start="168:23" pos:end="168:23">1</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <comment type="block" pos:start="172:13" pos:end="172:40">/* Skip the oi argument.  */</comment>

            <expr_stmt pos:start="174:13" pos:end="174:20"><expr pos:start="174:13" pos:end="174:19"><name pos:start="174:13" pos:end="174:14">ra</name> <operator pos:start="174:16" pos:end="174:17">+=</operator> <literal type="number" pos:start="174:19" pos:end="174:19">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

                

        <comment type="block" pos:start="180:9" pos:end="180:39">/* Set the retaddr operand.  */</comment>

        <if_stmt pos:start="182:9" pos:end="190:9"><if pos:start="182:9" pos:end="190:9">if <condition pos:start="182:12" pos:end="182:29">(<expr pos:start="182:13" pos:end="182:28"><name pos:start="182:13" pos:end="182:14">ra</name> <operator pos:start="182:16" pos:end="182:17">&gt;=</operator> <name pos:start="182:19" pos:end="182:28">TCG_REG_O6</name></expr>)</condition> <block pos:start="182:31" pos:end="190:9">{<block_content pos:start="184:13" pos:end="188:28">

            <expr_stmt pos:start="184:13" pos:end="186:53"><expr pos:start="184:13" pos:end="186:52"><call pos:start="184:13" pos:end="186:52"><name pos:start="184:13" pos:end="184:22">tcg_out_st</name><argument_list pos:start="184:23" pos:end="186:52">(<argument pos:start="184:24" pos:end="184:24"><expr pos:start="184:24" pos:end="184:24"><name pos:start="184:24" pos:end="184:24">s</name></expr></argument>, <argument pos:start="184:27" pos:end="184:38"><expr pos:start="184:27" pos:end="184:38"><name pos:start="184:27" pos:end="184:38">TCG_TYPE_PTR</name></expr></argument>, <argument pos:start="184:41" pos:end="184:50"><expr pos:start="184:41" pos:end="184:50"><name pos:start="184:41" pos:end="184:50">TCG_REG_O7</name></expr></argument>, <argument pos:start="184:53" pos:end="184:70"><expr pos:start="184:53" pos:end="184:70"><name pos:start="184:53" pos:end="184:70">TCG_REG_CALL_STACK</name></expr></argument>,

                       <argument pos:start="186:24" pos:end="186:51"><expr pos:start="186:24" pos:end="186:51"><name pos:start="186:24" pos:end="186:51">TCG_TARGET_CALL_STACK_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="188:13" pos:end="188:28"><expr pos:start="188:13" pos:end="188:27"><name pos:start="188:13" pos:end="188:14">ra</name> <operator pos:start="188:16" pos:end="188:16">=</operator> <name pos:start="188:18" pos:end="188:27">TCG_REG_G1</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="192:9" pos:end="192:53"><expr pos:start="192:9" pos:end="192:52"><call pos:start="192:9" pos:end="192:52"><name pos:start="192:9" pos:end="192:19">tcg_out_mov</name><argument_list pos:start="192:20" pos:end="192:52">(<argument pos:start="192:21" pos:end="192:21"><expr pos:start="192:21" pos:end="192:21"><name pos:start="192:21" pos:end="192:21">s</name></expr></argument>, <argument pos:start="192:24" pos:end="192:35"><expr pos:start="192:24" pos:end="192:35"><name pos:start="192:24" pos:end="192:35">TCG_TYPE_PTR</name></expr></argument>, <argument pos:start="192:38" pos:end="192:39"><expr pos:start="192:38" pos:end="192:39"><name pos:start="192:38" pos:end="192:39">ra</name></expr></argument>, <argument pos:start="192:42" pos:end="192:51"><expr pos:start="192:42" pos:end="192:51"><name pos:start="192:42" pos:end="192:51">TCG_REG_O7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="194:9" pos:end="194:35">/* Set the env operand.  */</comment>

        <expr_stmt pos:start="196:9" pos:end="196:60"><expr pos:start="196:9" pos:end="196:59"><call pos:start="196:9" pos:end="196:59"><name pos:start="196:9" pos:end="196:19">tcg_out_mov</name><argument_list pos:start="196:20" pos:end="196:59">(<argument pos:start="196:21" pos:end="196:21"><expr pos:start="196:21" pos:end="196:21"><name pos:start="196:21" pos:end="196:21">s</name></expr></argument>, <argument pos:start="196:24" pos:end="196:35"><expr pos:start="196:24" pos:end="196:35"><name pos:start="196:24" pos:end="196:35">TCG_TYPE_PTR</name></expr></argument>, <argument pos:start="196:38" pos:end="196:47"><expr pos:start="196:38" pos:end="196:47"><name pos:start="196:38" pos:end="196:47">TCG_REG_O0</name></expr></argument>, <argument pos:start="196:50" pos:end="196:58"><expr pos:start="196:50" pos:end="196:58"><name pos:start="196:50" pos:end="196:58">TCG_AREG0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="198:9" pos:end="198:25">/* Tail call.  */</comment>

        <expr_stmt pos:start="200:9" pos:end="200:52"><expr pos:start="200:9" pos:end="200:51"><call pos:start="200:9" pos:end="200:51"><name pos:start="200:9" pos:end="200:28">tcg_out_call_nodelay</name><argument_list pos:start="200:29" pos:end="200:51">(<argument pos:start="200:30" pos:end="200:30"><expr pos:start="200:30" pos:end="200:30"><name pos:start="200:30" pos:end="200:30">s</name></expr></argument>, <argument pos:start="200:33" pos:end="200:50"><expr pos:start="200:33" pos:end="200:50"><name pos:start="200:33" pos:end="200:50"><name pos:start="200:33" pos:end="200:47">qemu_st_helpers</name><index pos:start="200:48" pos:end="200:50">[<expr pos:start="200:49" pos:end="200:49"><name pos:start="200:49" pos:end="200:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="202:9" pos:end="202:53"><expr pos:start="202:9" pos:end="202:52"><call pos:start="202:9" pos:end="202:52"><name pos:start="202:9" pos:end="202:19">tcg_out_mov</name><argument_list pos:start="202:20" pos:end="202:52">(<argument pos:start="202:21" pos:end="202:21"><expr pos:start="202:21" pos:end="202:21"><name pos:start="202:21" pos:end="202:21">s</name></expr></argument>, <argument pos:start="202:24" pos:end="202:35"><expr pos:start="202:24" pos:end="202:35"><name pos:start="202:24" pos:end="202:35">TCG_TYPE_PTR</name></expr></argument>, <argument pos:start="202:38" pos:end="202:47"><expr pos:start="202:38" pos:end="202:47"><name pos:start="202:38" pos:end="202:47">TCG_REG_O7</name></expr></argument>, <argument pos:start="202:50" pos:end="202:51"><expr pos:start="202:50" pos:end="202:51"><name pos:start="202:50" pos:end="202:51">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function></unit>
