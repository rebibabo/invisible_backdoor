<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23897.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">qed_aio_write_inplace</name><parameter_list pos:start="1:34" pos:end="1:77">(<parameter pos:start="1:35" pos:end="1:47"><decl pos:start="1:35" pos:end="1:47"><type pos:start="1:35" pos:end="1:47"><name pos:start="1:35" pos:end="1:42">QEDAIOCB</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">acb</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:64"><decl pos:start="1:50" pos:end="1:64"><type pos:start="1:50" pos:end="1:64"><name pos:start="1:50" pos:end="1:57">uint64_t</name></type> <name pos:start="1:59" pos:end="1:64">offset</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:76"><decl pos:start="1:67" pos:end="1:76"><type pos:start="1:67" pos:end="1:76"><name pos:start="1:67" pos:end="1:72">size_t</name></type> <name pos:start="1:74" pos:end="1:76">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="37:1">{<block_content pos:start="7:5" pos:end="35:31">

    <comment type="block" pos:start="5:5" pos:end="5:41">/* Allocate buffer for zero writes */</comment>

    <if_stmt pos:start="7:5" pos:end="21:5"><if pos:start="7:5" pos:end="21:5">if <condition pos:start="7:8" pos:end="7:36">(<expr pos:start="7:9" pos:end="7:35"><name pos:start="7:9" pos:end="7:18"><name pos:start="7:9" pos:end="7:11">acb</name><operator pos:start="7:12" pos:end="7:13">-&gt;</operator><name pos:start="7:14" pos:end="7:18">flags</name></name> <operator pos:start="7:20" pos:end="7:20">&amp;</operator> <name pos:start="7:22" pos:end="7:35">QED_AIOCB_ZERO</name></expr>)</condition> <block pos:start="7:38" pos:end="21:5">{<block_content pos:start="9:9" pos:end="19:9">

        <decl_stmt pos:start="9:9" pos:end="9:43"><decl pos:start="9:9" pos:end="9:42"><type pos:start="9:9" pos:end="9:22"><name pos:start="9:9" pos:end="9:20"><name pos:start="9:9" pos:end="9:14">struct</name> <name pos:start="9:16" pos:end="9:20">iovec</name></name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:25">iov</name> <init pos:start="9:27" pos:end="9:42">= <expr pos:start="9:29" pos:end="9:42"><name pos:start="9:29" pos:end="9:42"><name pos:start="9:29" pos:end="9:31">acb</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:37">qiov</name><operator pos:start="9:38" pos:end="9:39">-&gt;</operator><name pos:start="9:40" pos:end="9:42">iov</name></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="13:9" pos:end="19:9"><if pos:start="13:9" pos:end="19:9">if <condition pos:start="13:12" pos:end="13:27">(<expr pos:start="13:13" pos:end="13:26"><operator pos:start="13:13" pos:end="13:13">!</operator><name pos:start="13:14" pos:end="13:26"><name pos:start="13:14" pos:end="13:16">iov</name><operator pos:start="13:17" pos:end="13:18">-&gt;</operator><name pos:start="13:19" pos:end="13:26">iov_base</name></name></expr>)</condition> <block pos:start="13:29" pos:end="19:9">{<block_content pos:start="15:13" pos:end="17:51">

            <expr_stmt pos:start="15:13" pos:end="15:74"><expr pos:start="15:13" pos:end="15:73"><name pos:start="15:13" pos:end="15:25"><name pos:start="15:13" pos:end="15:15">iov</name><operator pos:start="15:16" pos:end="15:17">-&gt;</operator><name pos:start="15:18" pos:end="15:25">iov_base</name></name> <operator pos:start="15:27" pos:end="15:27">=</operator> <call pos:start="15:29" pos:end="15:73"><name pos:start="15:29" pos:end="15:43">qemu_blockalign</name><argument_list pos:start="15:44" pos:end="15:73">(<argument pos:start="15:45" pos:end="15:58"><expr pos:start="15:45" pos:end="15:58"><name pos:start="15:45" pos:end="15:58"><name pos:start="15:45" pos:end="15:47">acb</name><operator pos:start="15:48" pos:end="15:49">-&gt;</operator><name pos:start="15:50" pos:end="15:55">common</name><operator pos:start="15:56" pos:end="15:56">.</operator><name pos:start="15:57" pos:end="15:58">bs</name></name></expr></argument>, <argument pos:start="15:61" pos:end="15:72"><expr pos:start="15:61" pos:end="15:72"><name pos:start="15:61" pos:end="15:72"><name pos:start="15:61" pos:end="15:63">iov</name><operator pos:start="15:64" pos:end="15:65">-&gt;</operator><name pos:start="15:66" pos:end="15:72">iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="17:13" pos:end="17:51"><expr pos:start="17:13" pos:end="17:50"><call pos:start="17:13" pos:end="17:50"><name pos:start="17:13" pos:end="17:18">memset</name><argument_list pos:start="17:19" pos:end="17:50">(<argument pos:start="17:20" pos:end="17:32"><expr pos:start="17:20" pos:end="17:32"><name pos:start="17:20" pos:end="17:32"><name pos:start="17:20" pos:end="17:22">iov</name><operator pos:start="17:23" pos:end="17:24">-&gt;</operator><name pos:start="17:25" pos:end="17:32">iov_base</name></name></expr></argument>, <argument pos:start="17:35" pos:end="17:35"><expr pos:start="17:35" pos:end="17:35"><literal type="number" pos:start="17:35" pos:end="17:35">0</literal></expr></argument>, <argument pos:start="17:38" pos:end="17:49"><expr pos:start="17:38" pos:end="17:49"><name pos:start="17:38" pos:end="17:49"><name pos:start="17:38" pos:end="17:40">iov</name><operator pos:start="17:41" pos:end="17:42">-&gt;</operator><name pos:start="17:43" pos:end="17:49">iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:34">/* Calculate the I/O vector */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:30"><expr pos:start="27:5" pos:end="27:29"><name pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:7">acb</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:20">cur_cluster</name></name> <operator pos:start="27:22" pos:end="27:22">=</operator> <name pos:start="27:24" pos:end="27:29">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:72"><expr pos:start="29:5" pos:end="29:71"><call pos:start="29:5" pos:end="29:71"><name pos:start="29:5" pos:end="29:21">qemu_iovec_concat</name><argument_list pos:start="29:22" pos:end="29:71">(<argument pos:start="29:23" pos:end="29:36"><expr pos:start="29:23" pos:end="29:36"><operator pos:start="29:23" pos:end="29:23">&amp;</operator><name pos:start="29:24" pos:end="29:36"><name pos:start="29:24" pos:end="29:26">acb</name><operator pos:start="29:27" pos:end="29:28">-&gt;</operator><name pos:start="29:29" pos:end="29:36">cur_qiov</name></name></expr></argument>, <argument pos:start="29:39" pos:end="29:47"><expr pos:start="29:39" pos:end="29:47"><name pos:start="29:39" pos:end="29:47"><name pos:start="29:39" pos:end="29:41">acb</name><operator pos:start="29:42" pos:end="29:43">-&gt;</operator><name pos:start="29:44" pos:end="29:47">qiov</name></name></expr></argument>, <argument pos:start="29:50" pos:end="29:65"><expr pos:start="29:50" pos:end="29:65"><name pos:start="29:50" pos:end="29:65"><name pos:start="29:50" pos:end="29:52">acb</name><operator pos:start="29:53" pos:end="29:54">-&gt;</operator><name pos:start="29:55" pos:end="29:65">qiov_offset</name></name></expr></argument>, <argument pos:start="29:68" pos:end="29:70"><expr pos:start="29:68" pos:end="29:70"><name pos:start="29:68" pos:end="29:70">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:29">/* Do the actual write */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:31"><expr pos:start="35:5" pos:end="35:30"><call pos:start="35:5" pos:end="35:30"><name pos:start="35:5" pos:end="35:22">qed_aio_write_main</name><argument_list pos:start="35:23" pos:end="35:30">(<argument pos:start="35:24" pos:end="35:26"><expr pos:start="35:24" pos:end="35:26"><name pos:start="35:24" pos:end="35:26">acb</name></expr></argument>, <argument pos:start="35:29" pos:end="35:29"><expr pos:start="35:29" pos:end="35:29"><literal type="number" pos:start="35:29" pos:end="35:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
