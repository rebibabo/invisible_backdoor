<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26287.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">zynq_xadc_write</name><parameter_list pos:start="1:28" pos:end="3:42">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:32">void</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">opaque</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:55"><decl pos:start="1:43" pos:end="1:55"><type pos:start="1:43" pos:end="1:55"><name pos:start="1:43" pos:end="1:48">hwaddr</name></type> <name pos:start="1:50" pos:end="1:55">offset</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:65">uint64_t</name></type> <name pos:start="1:67" pos:end="1:69">val</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:41"><decl pos:start="3:29" pos:end="3:41"><type pos:start="3:29" pos:end="3:41"><name pos:start="3:29" pos:end="3:36">unsigned</name></type> <name pos:start="3:38" pos:end="3:41">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="121:1">{<block_content pos:start="7:5" pos:end="119:29">

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">ZynqXADCState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:46">= <expr pos:start="7:24" pos:end="7:46"><operator pos:start="7:24" pos:end="7:24">(</operator><name pos:start="7:25" pos:end="7:37">ZynqXADCState</name> <operator pos:start="7:39" pos:end="7:39">*</operator><operator pos:start="7:40" pos:end="7:40">)</operator><name pos:start="7:41" pos:end="7:46">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">reg</name> <init pos:start="9:13" pos:end="9:24">= <expr pos:start="9:15" pos:end="9:24"><name pos:start="9:15" pos:end="9:20">offset</name> <operator pos:start="9:22" pos:end="9:22">/</operator> <literal type="number" pos:start="9:24" pos:end="9:24">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">xadc_reg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:16">xadc_cmd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">xadc_data</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:44">(<expr pos:start="19:9" pos:end="19:43"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:43"><name pos:start="19:10" pos:end="19:31">zynq_xadc_check_offset</name><argument_list pos:start="19:32" pos:end="19:43">(<argument pos:start="19:33" pos:end="19:35"><expr pos:start="19:33" pos:end="19:35"><name pos:start="19:33" pos:end="19:35">reg</name></expr></argument>, <argument pos:start="19:38" pos:end="19:42"><expr pos:start="19:38" pos:end="19:42"><name pos:start="19:38" pos:end="19:42">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:46" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:15">

        <expr_stmt pos:start="21:9" pos:end="23:60"><expr pos:start="21:9" pos:end="23:59"><call pos:start="21:9" pos:end="23:59"><name pos:start="21:9" pos:end="21:21">qemu_log_mask</name><argument_list pos:start="21:22" pos:end="23:59">(<argument pos:start="21:23" pos:end="21:37"><expr pos:start="21:23" pos:end="21:37"><name pos:start="21:23" pos:end="21:37">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="21:40" pos:end="23:50"><expr pos:start="21:40" pos:end="23:50"><literal type="string" pos:start="21:40" pos:end="21:73">"zynq_xadc: Invalid write access "</literal>

                      <literal type="string" pos:start="23:23" pos:end="23:33">"to addr %"</literal> <name pos:start="23:35" pos:end="23:45">HWADDR_PRIx</name> <literal type="string" pos:start="23:47" pos:end="23:50">"\n"</literal></expr></argument>, <argument pos:start="23:53" pos:end="23:58"><expr pos:start="23:53" pos:end="23:58"><name pos:start="23:53" pos:end="23:58">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="31:5" pos:end="117:5">switch <condition pos:start="31:12" pos:end="31:16">(<expr pos:start="31:13" pos:end="31:15"><name pos:start="31:13" pos:end="31:15">reg</name></expr>)</condition> <block pos:start="31:18" pos:end="117:5">{<block_content pos:start="33:5" pos:end="115:14">

    <case pos:start="33:5" pos:end="33:13">case <expr pos:start="33:10" pos:end="33:12"><name pos:start="33:10" pos:end="33:12">CFG</name></expr>:</case>

        <expr_stmt pos:start="35:9" pos:end="35:27"><expr pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:15">regs</name><index pos:start="35:16" pos:end="35:20">[<expr pos:start="35:17" pos:end="35:19"><name pos:start="35:17" pos:end="35:19">CFG</name></expr>]</index></name> <operator pos:start="35:22" pos:end="35:22">=</operator> <name pos:start="35:24" pos:end="35:26">val</name></expr>;</expr_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    <case pos:start="39:5" pos:end="39:17">case <expr pos:start="39:10" pos:end="39:16"><name pos:start="39:10" pos:end="39:16">INT_STS</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:33"><expr pos:start="41:9" pos:end="41:32"><name pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:15">regs</name><index pos:start="41:16" pos:end="41:24">[<expr pos:start="41:17" pos:end="41:23"><name pos:start="41:17" pos:end="41:23">INT_STS</name></expr>]</index></name> <operator pos:start="41:26" pos:end="41:27">&amp;=</operator> <operator pos:start="41:29" pos:end="41:29">~</operator><name pos:start="41:30" pos:end="41:32">val</name></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    <case pos:start="45:5" pos:end="45:18">case <expr pos:start="45:10" pos:end="45:17"><name pos:start="45:10" pos:end="45:17">INT_MASK</name></expr>:</case>

        <expr_stmt pos:start="47:9" pos:end="47:42"><expr pos:start="47:9" pos:end="47:41"><name pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:15">regs</name><index pos:start="47:16" pos:end="47:25">[<expr pos:start="47:17" pos:end="47:24"><name pos:start="47:17" pos:end="47:24">INT_MASK</name></expr>]</index></name> <operator pos:start="47:27" pos:end="47:27">=</operator> <name pos:start="47:29" pos:end="47:31">val</name> <operator pos:start="47:33" pos:end="47:33">&amp;</operator> <name pos:start="47:35" pos:end="47:41">INT_ALL</name></expr>;</expr_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <case pos:start="51:5" pos:end="51:17">case <expr pos:start="51:10" pos:end="51:16"><name pos:start="51:10" pos:end="51:16">CMDFIFO</name></expr>:</case>

        <expr_stmt pos:start="53:9" pos:end="53:43"><expr pos:start="53:9" pos:end="53:42"><name pos:start="53:9" pos:end="53:16">xadc_cmd</name>  <operator pos:start="53:19" pos:end="53:19">=</operator> <call pos:start="53:21" pos:end="53:42"><name pos:start="53:21" pos:end="53:29">extract32</name><argument_list pos:start="53:30" pos:end="53:42">(<argument pos:start="53:31" pos:end="53:33"><expr pos:start="53:31" pos:end="53:33"><name pos:start="53:31" pos:end="53:33">val</name></expr></argument>, <argument pos:start="53:36" pos:end="53:37"><expr pos:start="53:36" pos:end="53:37"><literal type="number" pos:start="53:36" pos:end="53:37">26</literal></expr></argument>,  <argument pos:start="53:41" pos:end="53:41"><expr pos:start="53:41" pos:end="53:41"><literal type="number" pos:start="53:41" pos:end="53:41">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:43"><expr pos:start="55:9" pos:end="55:42"><name pos:start="55:9" pos:end="55:16">xadc_reg</name>  <operator pos:start="55:19" pos:end="55:19">=</operator> <call pos:start="55:21" pos:end="55:42"><name pos:start="55:21" pos:end="55:29">extract32</name><argument_list pos:start="55:30" pos:end="55:42">(<argument pos:start="55:31" pos:end="55:33"><expr pos:start="55:31" pos:end="55:33"><name pos:start="55:31" pos:end="55:33">val</name></expr></argument>, <argument pos:start="55:36" pos:end="55:37"><expr pos:start="55:36" pos:end="55:37"><literal type="number" pos:start="55:36" pos:end="55:37">16</literal></expr></argument>, <argument pos:start="55:40" pos:end="55:41"><expr pos:start="55:40" pos:end="55:41"><literal type="number" pos:start="55:40" pos:end="55:41">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:43"><expr pos:start="57:9" pos:end="57:42"><name pos:start="57:9" pos:end="57:17">xadc_data</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <call pos:start="57:21" pos:end="57:42"><name pos:start="57:21" pos:end="57:29">extract32</name><argument_list pos:start="57:30" pos:end="57:42">(<argument pos:start="57:31" pos:end="57:33"><expr pos:start="57:31" pos:end="57:33"><name pos:start="57:31" pos:end="57:33">val</name></expr></argument>,  <argument pos:start="57:37" pos:end="57:37"><expr pos:start="57:37" pos:end="57:37"><literal type="number" pos:start="57:37" pos:end="57:37">0</literal></expr></argument>, <argument pos:start="57:40" pos:end="57:41"><expr pos:start="57:40" pos:end="57:41"><literal type="number" pos:start="57:40" pos:end="57:41">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="61:9" pos:end="71:9"><if pos:start="61:9" pos:end="71:9">if <condition pos:start="61:12" pos:end="61:39">(<expr pos:start="61:13" pos:end="61:38"><name pos:start="61:13" pos:end="61:25"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:19">regs</name><index pos:start="61:20" pos:end="61:25">[<expr pos:start="61:21" pos:end="61:24"><name pos:start="61:21" pos:end="61:24">MCTL</name></expr>]</index></name> <operator pos:start="61:27" pos:end="61:27">&amp;</operator> <name pos:start="61:29" pos:end="61:38">MCTL_RESET</name></expr>)</condition> <block pos:start="61:41" pos:end="71:9">{<block_content pos:start="63:13" pos:end="69:18">

            <expr_stmt pos:start="63:13" pos:end="67:42"><expr pos:start="63:13" pos:end="67:41"><call pos:start="63:13" pos:end="67:41"><name pos:start="63:13" pos:end="63:25">qemu_log_mask</name><argument_list pos:start="63:26" pos:end="67:41">(<argument pos:start="63:27" pos:end="63:41"><expr pos:start="63:27" pos:end="63:41"><name pos:start="63:27" pos:end="63:41">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="63:44" pos:end="65:75"><expr pos:start="63:44" pos:end="65:75"><literal type="string" pos:start="63:44" pos:end="63:72">"zynq_xadc: Sending command "</literal>

                          <literal type="string" pos:start="65:27" pos:end="65:63">"while comm channel held in reset: %"</literal> <name pos:start="65:65" pos:end="65:70">PRIx32</name> <literal type="string" pos:start="65:72" pos:end="65:75">"\n"</literal></expr></argument>,

                          <argument pos:start="67:27" pos:end="67:40"><expr pos:start="67:27" pos:end="67:40"><operator pos:start="67:27" pos:end="67:27">(</operator><name pos:start="67:28" pos:end="67:35">uint32_t</name><operator pos:start="67:36" pos:end="67:36">)</operator> <name pos:start="67:38" pos:end="67:40">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="75:9" pos:end="83:9"><if pos:start="75:9" pos:end="83:9">if <condition pos:start="75:12" pos:end="75:69">(<expr pos:start="75:13" pos:end="75:68"><name pos:start="75:13" pos:end="75:20">xadc_reg</name> <operator pos:start="75:22" pos:end="75:22">&gt;</operator> <name pos:start="75:24" pos:end="75:45">ZYNQ_XADC_NUM_ADC_REGS</name> <operator pos:start="75:47" pos:end="75:48">&amp;&amp;</operator> <name pos:start="75:50" pos:end="75:57">xadc_cmd</name> <operator pos:start="75:59" pos:end="75:60">!=</operator> <name pos:start="75:62" pos:end="75:68">CMD_NOP</name></expr>)</condition> <block pos:start="75:71" pos:end="83:9">{<block_content pos:start="77:13" pos:end="81:18">

            <expr_stmt pos:start="77:13" pos:end="79:50"><expr pos:start="77:13" pos:end="79:49"><call pos:start="77:13" pos:end="79:49"><name pos:start="77:13" pos:end="77:25">qemu_log_mask</name><argument_list pos:start="77:26" pos:end="79:49">(<argument pos:start="77:27" pos:end="77:41"><expr pos:start="77:27" pos:end="77:41"><name pos:start="77:27" pos:end="77:41">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="77:44" pos:end="79:38"><expr pos:start="77:44" pos:end="79:38"><literal type="string" pos:start="77:44" pos:end="77:75">"read/write op to invalid xadc "</literal>

                          <literal type="string" pos:start="79:27" pos:end="79:38">"reg 0x%x\n"</literal></expr></argument>, <argument pos:start="79:41" pos:end="79:48"><expr pos:start="79:41" pos:end="79:48"><name pos:start="79:41" pos:end="79:48">xadc_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="81:13" pos:end="81:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="87:9" pos:end="107:9">switch <condition pos:start="87:16" pos:end="87:25">(<expr pos:start="87:17" pos:end="87:24"><name pos:start="87:17" pos:end="87:24">xadc_cmd</name></expr>)</condition> <block pos:start="87:27" pos:end="107:9">{<block_content pos:start="89:9" pos:end="105:18">

        <case pos:start="89:9" pos:end="89:22">case <expr pos:start="89:14" pos:end="89:21"><name pos:start="89:14" pos:end="89:21">CMD_READ</name></expr>:</case>

            <expr_stmt pos:start="91:13" pos:end="91:55"><expr pos:start="91:13" pos:end="91:54"><call pos:start="91:13" pos:end="91:54"><name pos:start="91:13" pos:end="91:27">xadc_push_dfifo</name><argument_list pos:start="91:28" pos:end="91:54">(<argument pos:start="91:29" pos:end="91:29"><expr pos:start="91:29" pos:end="91:29"><name pos:start="91:29" pos:end="91:29">s</name></expr></argument>, <argument pos:start="91:32" pos:end="91:53"><expr pos:start="91:32" pos:end="91:53"><name pos:start="91:32" pos:end="91:53"><name pos:start="91:32" pos:end="91:32">s</name><operator pos:start="91:33" pos:end="91:34">-&gt;</operator><name pos:start="91:35" pos:end="91:43">xadc_regs</name><index pos:start="91:44" pos:end="91:53">[<expr pos:start="91:45" pos:end="91:52"><name pos:start="91:45" pos:end="91:52">xadc_reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="93:13" pos:end="93:18">break;</break>

        <case pos:start="95:9" pos:end="95:23">case <expr pos:start="95:14" pos:end="95:22"><name pos:start="95:14" pos:end="95:22">CMD_WRITE</name></expr>:</case>

            <expr_stmt pos:start="97:13" pos:end="97:47"><expr pos:start="97:13" pos:end="97:46"><name pos:start="97:13" pos:end="97:34"><name pos:start="97:13" pos:end="97:13">s</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:24">xadc_regs</name><index pos:start="97:25" pos:end="97:34">[<expr pos:start="97:26" pos:end="97:33"><name pos:start="97:26" pos:end="97:33">xadc_reg</name></expr>]</index></name> <operator pos:start="97:36" pos:end="97:36">=</operator> <name pos:start="97:38" pos:end="97:46">xadc_data</name></expr>;</expr_stmt>

            <comment type="block" pos:start="99:13" pos:end="99:29">/* fallthrough */</comment>

        <case pos:start="101:9" pos:end="101:21">case <expr pos:start="101:14" pos:end="101:20"><name pos:start="101:14" pos:end="101:20">CMD_NOP</name></expr>:</case>

            <expr_stmt pos:start="103:13" pos:end="103:34"><expr pos:start="103:13" pos:end="103:33"><call pos:start="103:13" pos:end="103:33"><name pos:start="103:13" pos:end="103:27">xadc_push_dfifo</name><argument_list pos:start="103:28" pos:end="103:33">(<argument pos:start="103:29" pos:end="103:29"><expr pos:start="103:29" pos:end="103:29"><name pos:start="103:29" pos:end="103:29">s</name></expr></argument>, <argument pos:start="103:32" pos:end="103:32"><expr pos:start="103:32" pos:end="103:32"><literal type="number" pos:start="103:32" pos:end="103:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="105:13" pos:end="105:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="109:9" pos:end="109:14">break;</break>

    <case pos:start="111:5" pos:end="111:14">case <expr pos:start="111:10" pos:end="111:13"><name pos:start="111:10" pos:end="111:13">MCTL</name></expr>:</case>

        <expr_stmt pos:start="113:9" pos:end="113:41"><expr pos:start="113:9" pos:end="113:40"><name pos:start="113:9" pos:end="113:21"><name pos:start="113:9" pos:end="113:9">s</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:15">regs</name><index pos:start="113:16" pos:end="113:21">[<expr pos:start="113:17" pos:end="113:20"><name pos:start="113:17" pos:end="113:20">MCTL</name></expr>]</index></name> <operator pos:start="113:23" pos:end="113:23">=</operator> <name pos:start="113:25" pos:end="113:27">val</name> <operator pos:start="113:29" pos:end="113:29">&amp;</operator> <literal type="number" pos:start="113:31" pos:end="113:40">0x00fffeff</literal></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="119:5" pos:end="119:29"><expr pos:start="119:5" pos:end="119:28"><call pos:start="119:5" pos:end="119:28"><name pos:start="119:5" pos:end="119:25">zynq_xadc_update_ints</name><argument_list pos:start="119:26" pos:end="119:28">(<argument pos:start="119:27" pos:end="119:27"><expr pos:start="119:27" pos:end="119:27"><name pos:start="119:27" pos:end="119:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
