<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8811.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:20">always_inline</name> <name pos:start="1:22" pos:end="1:25">void</name></type> <name pos:start="1:27" pos:end="1:35">gen_bcond</name> <parameter_list pos:start="1:37" pos:end="1:65">(<parameter pos:start="1:38" pos:end="1:54"><decl pos:start="1:38" pos:end="1:54"><type pos:start="1:38" pos:end="1:54"><name pos:start="1:38" pos:end="1:49">DisasContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:54">ctx</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:64"><decl pos:start="1:57" pos:end="1:64"><type pos:start="1:57" pos:end="1:64"><name pos:start="1:57" pos:end="1:59">int</name></type> <name pos:start="1:61" pos:end="1:64">type</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="157:1">{<block_content pos:start="5:5" pos:end="155:5">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:15">bo</name> <init pos:start="5:17" pos:end="5:33">= <expr pos:start="5:19" pos:end="5:33"><call pos:start="5:19" pos:end="5:33"><name pos:start="5:19" pos:end="5:20">BO</name><argument_list pos:start="5:21" pos:end="5:33">(<argument pos:start="5:22" pos:end="5:32"><expr pos:start="5:22" pos:end="5:32"><name pos:start="5:22" pos:end="5:32"><name pos:start="5:22" pos:end="5:24">ctx</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:32">opcode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">l1</name> <init pos:start="7:12" pos:end="7:28">= <expr pos:start="7:14" pos:end="7:28"><call pos:start="7:14" pos:end="7:28"><name pos:start="7:14" pos:end="7:26">gen_new_label</name><argument_list pos:start="7:27" pos:end="7:28">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">TCGv</name></type> <name pos:start="9:10" pos:end="9:15">target</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:41"><expr pos:start="13:5" pos:end="13:40"><name pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:7">ctx</name><operator pos:start="13:8" pos:end="13:9">-&gt;</operator><name pos:start="13:10" pos:end="13:18">exception</name></name> <operator pos:start="13:20" pos:end="13:20">=</operator> <name pos:start="13:22" pos:end="13:40">POWERPC_EXCP_BRANCH</name></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="29:5"><if pos:start="15:5" pos:end="29:5">if <condition pos:start="15:8" pos:end="15:46">(<expr pos:start="15:9" pos:end="15:45"><name pos:start="15:9" pos:end="15:12">type</name> <operator pos:start="15:14" pos:end="15:15">==</operator> <name pos:start="15:17" pos:end="15:24">BCOND_LR</name> <operator pos:start="15:26" pos:end="15:27">||</operator> <name pos:start="15:29" pos:end="15:32">type</name> <operator pos:start="15:34" pos:end="15:35">==</operator> <name pos:start="15:37" pos:end="15:45">BCOND_CTR</name></expr>)</condition> <block pos:start="15:48" pos:end="29:5">{<block_content pos:start="17:9" pos:end="25:43">

        <expr_stmt pos:start="17:9" pos:end="17:38"><expr pos:start="17:9" pos:end="17:37"><name pos:start="17:9" pos:end="17:14">target</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <call pos:start="17:18" pos:end="17:37"><name pos:start="17:18" pos:end="17:35">tcg_temp_local_new</name><argument_list pos:start="17:36" pos:end="17:37">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="25:43"><if pos:start="19:9" pos:end="21:44">if <condition pos:start="19:12" pos:end="19:30">(<expr pos:start="19:13" pos:end="19:29"><name pos:start="19:13" pos:end="19:16">type</name> <operator pos:start="19:18" pos:end="19:19">==</operator> <name pos:start="19:21" pos:end="19:29">BCOND_CTR</name></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:44"><block_content pos:start="21:13" pos:end="21:44">

            <expr_stmt pos:start="21:13" pos:end="21:44"><expr pos:start="21:13" pos:end="21:43"><call pos:start="21:13" pos:end="21:43"><name pos:start="21:13" pos:end="21:26">tcg_gen_mov_tl</name><argument_list pos:start="21:27" pos:end="21:43">(<argument pos:start="21:28" pos:end="21:33"><expr pos:start="21:28" pos:end="21:33"><name pos:start="21:28" pos:end="21:33">target</name></expr></argument>, <argument pos:start="21:36" pos:end="21:42"><expr pos:start="21:36" pos:end="21:42"><name pos:start="21:36" pos:end="21:42">cpu_ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="23:9" pos:end="25:43">else<block type="pseudo" pos:start="25:13" pos:end="25:43"><block_content pos:start="25:13" pos:end="25:43">

            <expr_stmt pos:start="25:13" pos:end="25:43"><expr pos:start="25:13" pos:end="25:42"><call pos:start="25:13" pos:end="25:42"><name pos:start="25:13" pos:end="25:26">tcg_gen_mov_tl</name><argument_list pos:start="25:27" pos:end="25:42">(<argument pos:start="25:28" pos:end="25:33"><expr pos:start="25:28" pos:end="25:33"><name pos:start="25:28" pos:end="25:33">target</name></expr></argument>, <argument pos:start="25:36" pos:end="25:41"><expr pos:start="25:36" pos:end="25:41"><name pos:start="25:36" pos:end="25:41">cpu_lr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="33:33"><if pos:start="31:5" pos:end="33:33">if <condition pos:start="31:8" pos:end="31:24">(<expr pos:start="31:9" pos:end="31:23"><call pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:10">LK</name><argument_list pos:start="31:11" pos:end="31:23">(<argument pos:start="31:12" pos:end="31:22"><expr pos:start="31:12" pos:end="31:22"><name pos:start="31:12" pos:end="31:22"><name pos:start="31:12" pos:end="31:14">ctx</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:22">opcode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:33"><block_content pos:start="33:9" pos:end="33:33">

        <expr_stmt pos:start="33:9" pos:end="33:33"><expr pos:start="33:9" pos:end="33:32"><call pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:17">gen_setlr</name><argument_list pos:start="33:18" pos:end="33:32">(<argument pos:start="33:19" pos:end="33:21"><expr pos:start="33:19" pos:end="33:21"><name pos:start="33:19" pos:end="33:21">ctx</name></expr></argument>, <argument pos:start="33:24" pos:end="33:31"><expr pos:start="33:24" pos:end="33:31"><name pos:start="33:24" pos:end="33:31"><name pos:start="33:24" pos:end="33:26">ctx</name><operator pos:start="33:27" pos:end="33:28">-&gt;</operator><name pos:start="33:29" pos:end="33:31">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:25"><expr pos:start="35:5" pos:end="35:24"><name pos:start="35:5" pos:end="35:6">l1</name> <operator pos:start="35:8" pos:end="35:8">=</operator> <call pos:start="35:10" pos:end="35:24"><name pos:start="35:10" pos:end="35:22">gen_new_label</name><argument_list pos:start="35:23" pos:end="35:24">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="76:5"><if pos:start="37:5" pos:end="76:5">if <condition pos:start="37:8" pos:end="37:24">(<expr pos:start="37:9" pos:end="37:23"><operator pos:start="37:9" pos:end="37:9">(</operator><name pos:start="37:10" pos:end="37:11">bo</name> <operator pos:start="37:13" pos:end="37:13">&amp;</operator> <literal type="number" pos:start="37:15" pos:end="37:17">0x4</literal><operator pos:start="37:18" pos:end="37:18">)</operator> <operator pos:start="37:20" pos:end="37:21">==</operator> <literal type="number" pos:start="37:23" pos:end="37:23">0</literal></expr>)</condition> <block pos:start="37:26" pos:end="76:5">{<block_content pos:start="41:9" pos:end="74:28">

        <comment type="block" pos:start="39:9" pos:end="39:36">/* Decrement and test CTR */</comment>

        <decl_stmt pos:start="41:9" pos:end="41:35"><decl pos:start="41:9" pos:end="41:34"><type pos:start="41:9" pos:end="41:12"><name pos:start="41:9" pos:end="41:12">TCGv</name></type> <name pos:start="41:14" pos:end="41:17">temp</name> <init pos:start="41:19" pos:end="41:34">= <expr pos:start="41:21" pos:end="41:34"><call pos:start="41:21" pos:end="41:34"><name pos:start="41:21" pos:end="41:32">tcg_temp_new</name><argument_list pos:start="41:33" pos:end="41:34">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:40">(<expr pos:start="43:13" pos:end="43:39"><call pos:start="43:13" pos:end="43:39"><name pos:start="43:13" pos:end="43:20">unlikely</name><argument_list pos:start="43:21" pos:end="43:39">(<argument pos:start="43:22" pos:end="43:38"><expr pos:start="43:22" pos:end="43:38"><name pos:start="43:22" pos:end="43:25">type</name> <operator pos:start="43:27" pos:end="43:28">==</operator> <name pos:start="43:30" pos:end="43:38">BCOND_CTR</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:42" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:19">

            <expr_stmt pos:start="45:13" pos:end="45:63"><expr pos:start="45:13" pos:end="45:62"><call pos:start="45:13" pos:end="45:62"><name pos:start="45:13" pos:end="45:31">gen_inval_exception</name><argument_list pos:start="45:32" pos:end="45:62">(<argument pos:start="45:33" pos:end="45:35"><expr pos:start="45:33" pos:end="45:35"><name pos:start="45:33" pos:end="45:35">ctx</name></expr></argument>, <argument pos:start="45:38" pos:end="45:61"><expr pos:start="45:38" pos:end="45:61"><name pos:start="45:38" pos:end="45:61">POWERPC_EXCP_INVAL_INVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="54:0"><expr pos:start="51:9" pos:end="51:44"><call pos:start="51:9" pos:end="51:44"><name pos:start="51:9" pos:end="51:23">tcg_gen_subi_tl</name><argument_list pos:start="51:24" pos:end="51:44">(<argument pos:start="51:25" pos:end="51:31"><expr pos:start="51:25" pos:end="51:31"><name pos:start="51:25" pos:end="51:31">cpu_ctr</name></expr></argument>, <argument pos:start="51:34" pos:end="51:40"><expr pos:start="51:34" pos:end="51:40"><name pos:start="51:34" pos:end="51:40">cpu_ctr</name></expr></argument>, <argument pos:start="51:43" pos:end="51:43"><expr pos:start="51:43" pos:end="51:43"><literal type="number" pos:start="51:43" pos:end="51:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="53:1" pos:end="53:25">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:25"><call pos:start="53:5" pos:end="53:25"><name pos:start="53:5" pos:end="53:11">defined</name><argument_list pos:start="53:12" pos:end="53:25">(<argument pos:start="53:13" pos:end="53:24"><expr pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="55:9" pos:end="63:42"><if pos:start="55:9" pos:end="57:45">if <condition pos:start="55:12" pos:end="55:26">(<expr pos:start="55:13" pos:end="55:25"><operator pos:start="55:13" pos:end="55:13">!</operator><name pos:start="55:14" pos:end="55:25"><name pos:start="55:14" pos:end="55:16">ctx</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:25">sf_mode</name></name></expr>)</condition><block type="pseudo" pos:start="57:13" pos:end="57:45"><block_content pos:start="57:13" pos:end="57:45">

            <expr_stmt pos:start="57:13" pos:end="57:45"><expr pos:start="57:13" pos:end="57:44"><call pos:start="57:13" pos:end="57:44"><name pos:start="57:13" pos:end="57:29">tcg_gen_ext32u_tl</name><argument_list pos:start="57:30" pos:end="57:44">(<argument pos:start="57:31" pos:end="57:34"><expr pos:start="57:31" pos:end="57:34"><name pos:start="57:31" pos:end="57:34">temp</name></expr></argument>, <argument pos:start="57:37" pos:end="57:43"><expr pos:start="57:37" pos:end="57:43"><name pos:start="57:37" pos:end="57:43">cpu_ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="59:9" pos:end="63:42">else<block type="pseudo" pos:start="63:13" pos:end="63:42"><block_content pos:start="63:13" pos:end="63:42">

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="63:13" pos:end="63:42"><expr pos:start="63:13" pos:end="63:41"><call pos:start="63:13" pos:end="63:41"><name pos:start="63:13" pos:end="63:26">tcg_gen_mov_tl</name><argument_list pos:start="63:27" pos:end="63:41">(<argument pos:start="63:28" pos:end="63:31"><expr pos:start="63:28" pos:end="63:31"><name pos:start="63:28" pos:end="63:31">temp</name></expr></argument>, <argument pos:start="63:34" pos:end="63:40"><expr pos:start="63:34" pos:end="63:40"><name pos:start="63:34" pos:end="63:40">cpu_ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="65:9" pos:end="72:9"><if pos:start="65:9" pos:end="72:9">if <condition pos:start="65:12" pos:end="65:21">(<expr pos:start="65:13" pos:end="65:20"><name pos:start="65:13" pos:end="65:14">bo</name> <operator pos:start="65:16" pos:end="65:16">&amp;</operator> <literal type="number" pos:start="65:18" pos:end="65:20">0x2</literal></expr>)</condition> <block pos:start="65:23" pos:end="72:9">{<block_content pos:start="67:13" pos:end="70:57">

            <expr_stmt pos:start="67:13" pos:end="67:57"><expr pos:start="67:13" pos:end="67:56"><call pos:start="67:13" pos:end="67:56"><name pos:start="67:13" pos:end="67:30">tcg_gen_brcondi_tl</name><argument_list pos:start="67:31" pos:end="67:56">(<argument pos:start="67:32" pos:end="67:42"><expr pos:start="67:32" pos:end="67:42"><name pos:start="67:32" pos:end="67:42">TCG_COND_NE</name></expr></argument>, <argument pos:start="67:45" pos:end="67:48"><expr pos:start="67:45" pos:end="67:48"><name pos:start="67:45" pos:end="67:48">temp</name></expr></argument>, <argument pos:start="67:51" pos:end="67:51"><expr pos:start="67:51" pos:end="67:51"><literal type="number" pos:start="67:51" pos:end="67:51">0</literal></expr></argument>, <argument pos:start="67:54" pos:end="67:55"><expr pos:start="67:54" pos:end="67:55"><name pos:start="67:54" pos:end="67:55">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <expr_stmt pos:start="70:13" pos:end="70:57"><expr pos:start="70:13" pos:end="70:56"><call pos:start="70:13" pos:end="70:56"><name pos:start="70:13" pos:end="70:30">tcg_gen_brcondi_tl</name><argument_list pos:start="70:31" pos:end="70:56">(<argument pos:start="70:32" pos:end="70:42"><expr pos:start="70:32" pos:end="70:42"><name pos:start="70:32" pos:end="70:42">TCG_COND_EQ</name></expr></argument>, <argument pos:start="70:45" pos:end="70:48"><expr pos:start="70:45" pos:end="70:48"><name pos:start="70:45" pos:end="70:48">temp</name></expr></argument>, <argument pos:start="70:51" pos:end="70:51"><expr pos:start="70:51" pos:end="70:51"><literal type="number" pos:start="70:51" pos:end="70:51">0</literal></expr></argument>, <argument pos:start="70:54" pos:end="70:55"><expr pos:start="70:54" pos:end="70:55"><name pos:start="70:54" pos:end="70:55">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="74:9" pos:end="74:28"><expr pos:start="74:9" pos:end="74:27"><call pos:start="74:9" pos:end="74:27"><name pos:start="74:9" pos:end="74:21">tcg_temp_free</name><argument_list pos:start="74:22" pos:end="74:27">(<argument pos:start="74:23" pos:end="74:26"><expr pos:start="74:23" pos:end="74:26"><name pos:start="74:23" pos:end="74:26">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="78:5" pos:end="105:5"><if pos:start="78:5" pos:end="105:5">if <condition pos:start="78:8" pos:end="78:25">(<expr pos:start="78:9" pos:end="78:24"><operator pos:start="78:9" pos:end="78:9">(</operator><name pos:start="78:10" pos:end="78:11">bo</name> <operator pos:start="78:13" pos:end="78:13">&amp;</operator> <literal type="number" pos:start="78:15" pos:end="78:18">0x10</literal><operator pos:start="78:19" pos:end="78:19">)</operator> <operator pos:start="78:21" pos:end="78:22">==</operator> <literal type="number" pos:start="78:24" pos:end="78:24">0</literal></expr>)</condition> <block pos:start="78:27" pos:end="105:5">{<block_content pos:start="82:9" pos:end="103:32">

        <comment type="block" pos:start="80:9" pos:end="80:21">/* Test CR */</comment>

        <decl_stmt pos:start="82:9" pos:end="82:38"><decl pos:start="82:9" pos:end="82:37"><type pos:start="82:9" pos:end="82:16"><name pos:start="82:9" pos:end="82:16">uint32_t</name></type> <name pos:start="82:18" pos:end="82:19">bi</name> <init pos:start="82:21" pos:end="82:37">= <expr pos:start="82:23" pos:end="82:37"><call pos:start="82:23" pos:end="82:37"><name pos:start="82:23" pos:end="82:24">BI</name><argument_list pos:start="82:25" pos:end="82:37">(<argument pos:start="82:26" pos:end="82:36"><expr pos:start="82:26" pos:end="82:36"><name pos:start="82:26" pos:end="82:36"><name pos:start="82:26" pos:end="82:28">ctx</name><operator pos:start="82:29" pos:end="82:30">-&gt;</operator><name pos:start="82:31" pos:end="82:36">opcode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="84:9" pos:end="84:47"><decl pos:start="84:9" pos:end="84:46"><type pos:start="84:9" pos:end="84:16"><name pos:start="84:9" pos:end="84:16">uint32_t</name></type> <name pos:start="84:18" pos:end="84:21">mask</name> <init pos:start="84:23" pos:end="84:46">= <expr pos:start="84:25" pos:end="84:46"><literal type="number" pos:start="84:25" pos:end="84:25">1</literal> <operator pos:start="84:27" pos:end="84:28">&lt;&lt;</operator> <operator pos:start="84:30" pos:end="84:30">(</operator><literal type="number" pos:start="84:31" pos:end="84:33">3</literal> <operator pos:start="84:33" pos:end="84:33">-</operator> <operator pos:start="84:35" pos:end="84:35">(</operator><name pos:start="84:36" pos:end="84:37">bi</name> <operator pos:start="84:39" pos:end="84:39">&amp;</operator> <literal type="number" pos:start="84:41" pos:end="84:44">0x03</literal><operator pos:start="84:45" pos:end="84:45">)</operator><operator pos:start="84:46" pos:end="84:46">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="86:9" pos:end="86:43"><decl pos:start="86:9" pos:end="86:42"><type pos:start="86:9" pos:end="86:16"><name pos:start="86:9" pos:end="86:16">TCGv_i32</name></type> <name pos:start="86:18" pos:end="86:21">temp</name> <init pos:start="86:23" pos:end="86:42">= <expr pos:start="86:25" pos:end="86:42"><call pos:start="86:25" pos:end="86:42"><name pos:start="86:25" pos:end="86:40">tcg_temp_new_i32</name><argument_list pos:start="86:41" pos:end="86:42">()</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="90:9" pos:end="101:9"><if pos:start="90:9" pos:end="101:9">if <condition pos:start="90:12" pos:end="90:21">(<expr pos:start="90:13" pos:end="90:20"><name pos:start="90:13" pos:end="90:14">bo</name> <operator pos:start="90:16" pos:end="90:16">&amp;</operator> <literal type="number" pos:start="90:18" pos:end="90:20">0x8</literal></expr>)</condition> <block pos:start="90:23" pos:end="101:9">{<block_content pos:start="92:13" pos:end="99:58">

            <expr_stmt pos:start="92:13" pos:end="92:59"><expr pos:start="92:13" pos:end="92:58"><call pos:start="92:13" pos:end="92:58"><name pos:start="92:13" pos:end="92:28">tcg_gen_andi_i32</name><argument_list pos:start="92:29" pos:end="92:58">(<argument pos:start="92:30" pos:end="92:33"><expr pos:start="92:30" pos:end="92:33"><name pos:start="92:30" pos:end="92:33">temp</name></expr></argument>, <argument pos:start="92:36" pos:end="92:51"><expr pos:start="92:36" pos:end="92:51"><name pos:start="92:36" pos:end="92:51"><name pos:start="92:36" pos:end="92:42">cpu_crf</name><index pos:start="92:43" pos:end="92:51">[<expr pos:start="92:44" pos:end="92:50"><name pos:start="92:44" pos:end="92:45">bi</name> <operator pos:start="92:47" pos:end="92:48">&gt;&gt;</operator> <literal type="number" pos:start="92:50" pos:end="92:50">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="92:54" pos:end="92:57"><expr pos:start="92:54" pos:end="92:57"><name pos:start="92:54" pos:end="92:57">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="94:13" pos:end="94:58"><expr pos:start="94:13" pos:end="94:57"><call pos:start="94:13" pos:end="94:57"><name pos:start="94:13" pos:end="94:31">tcg_gen_brcondi_i32</name><argument_list pos:start="94:32" pos:end="94:57">(<argument pos:start="94:33" pos:end="94:43"><expr pos:start="94:33" pos:end="94:43"><name pos:start="94:33" pos:end="94:43">TCG_COND_EQ</name></expr></argument>, <argument pos:start="94:46" pos:end="94:49"><expr pos:start="94:46" pos:end="94:49"><name pos:start="94:46" pos:end="94:49">temp</name></expr></argument>, <argument pos:start="94:52" pos:end="94:52"><expr pos:start="94:52" pos:end="94:52"><literal type="number" pos:start="94:52" pos:end="94:52">0</literal></expr></argument>, <argument pos:start="94:55" pos:end="94:56"><expr pos:start="94:55" pos:end="94:56"><name pos:start="94:55" pos:end="94:56">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <expr_stmt pos:start="97:13" pos:end="97:59"><expr pos:start="97:13" pos:end="97:58"><call pos:start="97:13" pos:end="97:58"><name pos:start="97:13" pos:end="97:28">tcg_gen_andi_i32</name><argument_list pos:start="97:29" pos:end="97:58">(<argument pos:start="97:30" pos:end="97:33"><expr pos:start="97:30" pos:end="97:33"><name pos:start="97:30" pos:end="97:33">temp</name></expr></argument>, <argument pos:start="97:36" pos:end="97:51"><expr pos:start="97:36" pos:end="97:51"><name pos:start="97:36" pos:end="97:51"><name pos:start="97:36" pos:end="97:42">cpu_crf</name><index pos:start="97:43" pos:end="97:51">[<expr pos:start="97:44" pos:end="97:50"><name pos:start="97:44" pos:end="97:45">bi</name> <operator pos:start="97:47" pos:end="97:48">&gt;&gt;</operator> <literal type="number" pos:start="97:50" pos:end="97:50">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="97:54" pos:end="97:57"><expr pos:start="97:54" pos:end="97:57"><name pos:start="97:54" pos:end="97:57">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:58"><expr pos:start="99:13" pos:end="99:57"><call pos:start="99:13" pos:end="99:57"><name pos:start="99:13" pos:end="99:31">tcg_gen_brcondi_i32</name><argument_list pos:start="99:32" pos:end="99:57">(<argument pos:start="99:33" pos:end="99:43"><expr pos:start="99:33" pos:end="99:43"><name pos:start="99:33" pos:end="99:43">TCG_COND_NE</name></expr></argument>, <argument pos:start="99:46" pos:end="99:49"><expr pos:start="99:46" pos:end="99:49"><name pos:start="99:46" pos:end="99:49">temp</name></expr></argument>, <argument pos:start="99:52" pos:end="99:52"><expr pos:start="99:52" pos:end="99:52"><literal type="number" pos:start="99:52" pos:end="99:52">0</literal></expr></argument>, <argument pos:start="99:55" pos:end="99:56"><expr pos:start="99:55" pos:end="99:56"><name pos:start="99:55" pos:end="99:56">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:32"><expr pos:start="103:9" pos:end="103:31"><call pos:start="103:9" pos:end="103:31"><name pos:start="103:9" pos:end="103:25">tcg_temp_free_i32</name><argument_list pos:start="103:26" pos:end="103:31">(<argument pos:start="103:27" pos:end="103:30"><expr pos:start="103:27" pos:end="103:30"><name pos:start="103:27" pos:end="103:30">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="107:5" pos:end="155:5"><if pos:start="107:5" pos:end="155:5">if <condition pos:start="107:8" pos:end="107:25">(<expr pos:start="107:9" pos:end="107:24"><name pos:start="107:9" pos:end="107:12">type</name> <operator pos:start="107:14" pos:end="107:15">==</operator> <name pos:start="107:17" pos:end="107:24">BCOND_IM</name></expr>)</condition> <block pos:start="107:27" pos:end="155:5">{<block_content pos:start="109:9" pos:end="153:27">

        <decl_stmt pos:start="109:9" pos:end="109:68"><decl pos:start="109:9" pos:end="109:67"><type pos:start="109:9" pos:end="109:20"><name pos:start="109:9" pos:end="109:20">target_ulong</name></type> <name pos:start="109:22" pos:end="109:23">li</name> <init pos:start="109:25" pos:end="109:67">= <expr pos:start="109:27" pos:end="109:67"><operator pos:start="109:27" pos:end="109:27">(</operator><name pos:start="109:28" pos:end="109:38">target_long</name><operator pos:start="109:39" pos:end="109:39">)</operator><operator pos:start="109:40" pos:end="109:40">(</operator><operator pos:start="109:41" pos:end="109:41">(</operator><name pos:start="109:42" pos:end="109:48">int16_t</name><operator pos:start="109:49" pos:end="109:49">)</operator><operator pos:start="109:50" pos:end="109:50">(</operator><call pos:start="109:51" pos:end="109:65"><name pos:start="109:51" pos:end="109:52">BD</name><argument_list pos:start="109:53" pos:end="109:65">(<argument pos:start="109:54" pos:end="109:64"><expr pos:start="109:54" pos:end="109:64"><name pos:start="109:54" pos:end="109:64"><name pos:start="109:54" pos:end="109:56">ctx</name><operator pos:start="109:57" pos:end="109:58">-&gt;</operator><name pos:start="109:59" pos:end="109:64">opcode</name></name></expr></argument>)</argument_list></call><operator pos:start="109:66" pos:end="109:66">)</operator><operator pos:start="109:67" pos:end="109:67">)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="111:9" pos:end="118:9"><if pos:start="111:9" pos:end="118:9">if <condition pos:start="111:12" pos:end="111:41">(<expr pos:start="111:13" pos:end="111:40"><call pos:start="111:13" pos:end="111:40"><name pos:start="111:13" pos:end="111:18">likely</name><argument_list pos:start="111:19" pos:end="111:40">(<argument pos:start="111:20" pos:end="111:39"><expr pos:start="111:20" pos:end="111:39"><call pos:start="111:20" pos:end="111:34"><name pos:start="111:20" pos:end="111:21">AA</name><argument_list pos:start="111:22" pos:end="111:34">(<argument pos:start="111:23" pos:end="111:33"><expr pos:start="111:23" pos:end="111:33"><name pos:start="111:23" pos:end="111:33"><name pos:start="111:23" pos:end="111:25">ctx</name><operator pos:start="111:26" pos:end="111:27">-&gt;</operator><name pos:start="111:28" pos:end="111:33">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="111:36" pos:end="111:37">==</operator> <literal type="number" pos:start="111:39" pos:end="111:39">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:43" pos:end="118:9">{<block_content pos:start="113:13" pos:end="116:36">

            <expr_stmt pos:start="113:13" pos:end="113:51"><expr pos:start="113:13" pos:end="113:50"><call pos:start="113:13" pos:end="113:50"><name pos:start="113:13" pos:end="113:23">gen_goto_tb</name><argument_list pos:start="113:24" pos:end="113:50">(<argument pos:start="113:25" pos:end="113:27"><expr pos:start="113:25" pos:end="113:27"><name pos:start="113:25" pos:end="113:27">ctx</name></expr></argument>, <argument pos:start="113:30" pos:end="113:30"><expr pos:start="113:30" pos:end="113:30"><literal type="number" pos:start="113:30" pos:end="113:30">0</literal></expr></argument>, <argument pos:start="113:33" pos:end="113:49"><expr pos:start="113:33" pos:end="113:49"><name pos:start="113:33" pos:end="113:40"><name pos:start="113:33" pos:end="113:35">ctx</name><operator pos:start="113:36" pos:end="113:37">-&gt;</operator><name pos:start="113:38" pos:end="113:40">nip</name></name> <operator pos:start="113:42" pos:end="113:42">+</operator> <name pos:start="113:44" pos:end="113:45">li</name> <operator pos:start="113:47" pos:end="113:47">-</operator> <literal type="number" pos:start="113:49" pos:end="113:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <expr_stmt pos:start="116:13" pos:end="116:36"><expr pos:start="116:13" pos:end="116:35"><call pos:start="116:13" pos:end="116:35"><name pos:start="116:13" pos:end="116:23">gen_goto_tb</name><argument_list pos:start="116:24" pos:end="116:35">(<argument pos:start="116:25" pos:end="116:27"><expr pos:start="116:25" pos:end="116:27"><name pos:start="116:25" pos:end="116:27">ctx</name></expr></argument>, <argument pos:start="116:30" pos:end="116:30"><expr pos:start="116:30" pos:end="116:30"><literal type="number" pos:start="116:30" pos:end="116:30">0</literal></expr></argument>, <argument pos:start="116:33" pos:end="116:34"><expr pos:start="116:33" pos:end="116:34"><name pos:start="116:33" pos:end="116:34">li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="120:9" pos:end="120:26"><expr pos:start="120:9" pos:end="120:25"><call pos:start="120:9" pos:end="120:25"><name pos:start="120:9" pos:end="120:21">gen_set_label</name><argument_list pos:start="120:22" pos:end="120:25">(<argument pos:start="120:23" pos:end="120:24"><expr pos:start="120:23" pos:end="120:24"><name pos:start="120:23" pos:end="120:24">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="122:9" pos:end="126:0"><expr pos:start="122:9" pos:end="122:37"><call pos:start="122:9" pos:end="122:37"><name pos:start="122:9" pos:end="122:19">gen_goto_tb</name><argument_list pos:start="122:20" pos:end="122:37">(<argument pos:start="122:21" pos:end="122:23"><expr pos:start="122:21" pos:end="122:23"><name pos:start="122:21" pos:end="122:23">ctx</name></expr></argument>, <argument pos:start="122:26" pos:end="122:26"><expr pos:start="122:26" pos:end="122:26"><literal type="number" pos:start="122:26" pos:end="122:26">1</literal></expr></argument>, <argument pos:start="122:29" pos:end="122:36"><expr pos:start="122:29" pos:end="122:36"><name pos:start="122:29" pos:end="122:36"><name pos:start="122:29" pos:end="122:31">ctx</name><operator pos:start="122:32" pos:end="122:33">-&gt;</operator><name pos:start="122:34" pos:end="122:36">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if pos:start="125:1" pos:end="125:25">#<cpp:directive pos:start="125:2" pos:end="125:3">if</cpp:directive> <expr pos:start="125:5" pos:end="125:25"><call pos:start="125:5" pos:end="125:25"><name pos:start="125:5" pos:end="125:11">defined</name><argument_list pos:start="125:12" pos:end="125:25">(<argument pos:start="125:13" pos:end="125:24"><expr pos:start="125:13" pos:end="125:24"><name pos:start="125:13" pos:end="125:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="127:9" pos:end="135:49"><if pos:start="127:9" pos:end="129:59">if <condition pos:start="127:12" pos:end="127:28">(<expr pos:start="127:13" pos:end="127:27"><operator pos:start="127:13" pos:end="127:13">!</operator><operator pos:start="127:14" pos:end="127:14">(</operator><name pos:start="127:15" pos:end="127:26"><name pos:start="127:15" pos:end="127:17">ctx</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:26">sf_mode</name></name><operator pos:start="127:27" pos:end="127:27">)</operator></expr>)</condition><block type="pseudo" pos:start="129:13" pos:end="129:59"><block_content pos:start="129:13" pos:end="129:59">

            <expr_stmt pos:start="129:13" pos:end="129:59"><expr pos:start="129:13" pos:end="129:58"><call pos:start="129:13" pos:end="129:58"><name pos:start="129:13" pos:end="129:27">tcg_gen_andi_tl</name><argument_list pos:start="129:28" pos:end="129:58">(<argument pos:start="129:29" pos:end="129:35"><expr pos:start="129:29" pos:end="129:35"><name pos:start="129:29" pos:end="129:35">cpu_nip</name></expr></argument>, <argument pos:start="129:38" pos:end="129:43"><expr pos:start="129:38" pos:end="129:43"><name pos:start="129:38" pos:end="129:43">target</name></expr></argument>, <argument pos:start="129:46" pos:end="129:57"><expr pos:start="129:46" pos:end="129:57"><operator pos:start="129:46" pos:end="129:46">(</operator><name pos:start="129:47" pos:end="129:54">uint32_t</name><operator pos:start="129:55" pos:end="129:55">)</operator><operator pos:start="129:56" pos:end="129:56">~</operator><literal type="number" pos:start="129:57" pos:end="129:57">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="131:9" pos:end="135:49">else<block type="pseudo" pos:start="135:13" pos:end="135:49"><block_content pos:start="135:13" pos:end="135:49">

<cpp:endif pos:start="133:1" pos:end="133:6">#<cpp:directive pos:start="133:2" pos:end="133:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="135:13" pos:end="135:49"><expr pos:start="135:13" pos:end="135:48"><call pos:start="135:13" pos:end="135:48"><name pos:start="135:13" pos:end="135:27">tcg_gen_andi_tl</name><argument_list pos:start="135:28" pos:end="135:48">(<argument pos:start="135:29" pos:end="135:35"><expr pos:start="135:29" pos:end="135:35"><name pos:start="135:29" pos:end="135:35">cpu_nip</name></expr></argument>, <argument pos:start="135:38" pos:end="135:43"><expr pos:start="135:38" pos:end="135:43"><name pos:start="135:38" pos:end="135:43">target</name></expr></argument>, <argument pos:start="135:46" pos:end="135:47"><expr pos:start="135:46" pos:end="135:47"><operator pos:start="135:46" pos:end="135:46">~</operator><literal type="number" pos:start="135:47" pos:end="135:47">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:27"><expr pos:start="137:9" pos:end="137:26"><call pos:start="137:9" pos:end="137:26"><name pos:start="137:9" pos:end="137:23">tcg_gen_exit_tb</name><argument_list pos:start="137:24" pos:end="137:26">(<argument pos:start="137:25" pos:end="137:25"><expr pos:start="137:25" pos:end="137:25"><literal type="number" pos:start="137:25" pos:end="137:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="142:0"><expr pos:start="139:9" pos:end="139:25"><call pos:start="139:9" pos:end="139:25"><name pos:start="139:9" pos:end="139:21">gen_set_label</name><argument_list pos:start="139:22" pos:end="139:25">(<argument pos:start="139:23" pos:end="139:24"><expr pos:start="139:23" pos:end="139:24"><name pos:start="139:23" pos:end="139:24">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="141:1" pos:end="141:25">#<cpp:directive pos:start="141:2" pos:end="141:3">if</cpp:directive> <expr pos:start="141:5" pos:end="141:25"><call pos:start="141:5" pos:end="141:25"><name pos:start="141:5" pos:end="141:11">defined</name><argument_list pos:start="141:12" pos:end="141:25">(<argument pos:start="141:13" pos:end="141:24"><expr pos:start="141:13" pos:end="141:24"><name pos:start="141:13" pos:end="141:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="143:9" pos:end="151:47"><if pos:start="143:9" pos:end="145:57">if <condition pos:start="143:12" pos:end="143:28">(<expr pos:start="143:13" pos:end="143:27"><operator pos:start="143:13" pos:end="143:13">!</operator><operator pos:start="143:14" pos:end="143:14">(</operator><name pos:start="143:15" pos:end="143:26"><name pos:start="143:15" pos:end="143:17">ctx</name><operator pos:start="143:18" pos:end="143:19">-&gt;</operator><name pos:start="143:20" pos:end="143:26">sf_mode</name></name><operator pos:start="143:27" pos:end="143:27">)</operator></expr>)</condition><block type="pseudo" pos:start="145:13" pos:end="145:57"><block_content pos:start="145:13" pos:end="145:57">

            <expr_stmt pos:start="145:13" pos:end="145:57"><expr pos:start="145:13" pos:end="145:56"><call pos:start="145:13" pos:end="145:56"><name pos:start="145:13" pos:end="145:27">tcg_gen_movi_tl</name><argument_list pos:start="145:28" pos:end="145:56">(<argument pos:start="145:29" pos:end="145:35"><expr pos:start="145:29" pos:end="145:35"><name pos:start="145:29" pos:end="145:35">cpu_nip</name></expr></argument>, <argument pos:start="145:38" pos:end="145:55"><expr pos:start="145:38" pos:end="145:55"><operator pos:start="145:38" pos:end="145:38">(</operator><name pos:start="145:39" pos:end="145:46">uint32_t</name><operator pos:start="145:47" pos:end="145:47">)</operator><name pos:start="145:48" pos:end="145:55"><name pos:start="145:48" pos:end="145:50">ctx</name><operator pos:start="145:51" pos:end="145:52">-&gt;</operator><name pos:start="145:53" pos:end="145:55">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="147:9" pos:end="151:47">else<block type="pseudo" pos:start="151:13" pos:end="151:47"><block_content pos:start="151:13" pos:end="151:47">

<cpp:endif pos:start="149:1" pos:end="149:6">#<cpp:directive pos:start="149:2" pos:end="149:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="151:13" pos:end="151:47"><expr pos:start="151:13" pos:end="151:46"><call pos:start="151:13" pos:end="151:46"><name pos:start="151:13" pos:end="151:27">tcg_gen_movi_tl</name><argument_list pos:start="151:28" pos:end="151:46">(<argument pos:start="151:29" pos:end="151:35"><expr pos:start="151:29" pos:end="151:35"><name pos:start="151:29" pos:end="151:35">cpu_nip</name></expr></argument>, <argument pos:start="151:38" pos:end="151:45"><expr pos:start="151:38" pos:end="151:45"><name pos:start="151:38" pos:end="151:45"><name pos:start="151:38" pos:end="151:40">ctx</name><operator pos:start="151:41" pos:end="151:42">-&gt;</operator><name pos:start="151:43" pos:end="151:45">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:27"><expr pos:start="153:9" pos:end="153:26"><call pos:start="153:9" pos:end="153:26"><name pos:start="153:9" pos:end="153:23">tcg_gen_exit_tb</name><argument_list pos:start="153:24" pos:end="153:26">(<argument pos:start="153:25" pos:end="153:25"><expr pos:start="153:25" pos:end="153:25"><literal type="number" pos:start="153:25" pos:end="153:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function></unit>
