<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10901.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">ivshmem_common_realize</name><parameter_list pos:start="1:35" pos:end="1:64">(<parameter pos:start="1:36" pos:end="1:49"><decl pos:start="1:36" pos:end="1:49"><type pos:start="1:36" pos:end="1:49"><name pos:start="1:36" pos:end="1:44">PCIDevice</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">dev</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:56">Error</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier><modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="177:1">{<block_content pos:start="5:5" pos:end="175:62">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">IVShmemState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:41">= <expr pos:start="5:23" pos:end="5:41"><call pos:start="5:23" pos:end="5:41"><name pos:start="5:23" pos:end="5:36">IVSHMEM_COMMON</name><argument_list pos:start="5:37" pos:end="5:41">(<argument pos:start="5:38" pos:end="5:40"><expr pos:start="5:38" pos:end="5:40"><name pos:start="5:38" pos:end="5:40">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:14">err</name> <init pos:start="7:16" pos:end="7:21">= <expr pos:start="7:18" pos:end="7:21"><name pos:start="7:18" pos:end="7:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:21">pci_conf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="13:38"><decl pos:start="11:5" pos:end="13:37"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:16">attr</name> <init pos:start="11:18" pos:end="13:37">= <expr pos:start="11:20" pos:end="13:37"><name pos:start="11:20" pos:end="11:48">PCI_BASE_ADDRESS_SPACE_MEMORY</name> <operator pos:start="11:50" pos:end="11:50">|</operator>

        <name pos:start="13:9" pos:end="13:37">PCI_BASE_ADDRESS_MEM_PREFETCH</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:20">local_err</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:28">/* IRQFD requires MSI */</comment>

    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="23:45">(<expr pos:start="21:9" pos:end="23:44"><call pos:start="21:9" pos:end="21:49"><name pos:start="21:9" pos:end="21:27">ivshmem_has_feature</name><argument_list pos:start="21:28" pos:end="21:49">(<argument pos:start="21:29" pos:end="21:29"><expr pos:start="21:29" pos:end="21:29"><name pos:start="21:29" pos:end="21:29">s</name></expr></argument>, <argument pos:start="21:32" pos:end="21:48"><expr pos:start="21:32" pos:end="21:48"><name pos:start="21:32" pos:end="21:48">IVSHMEM_IOEVENTFD</name></expr></argument>)</argument_list></call> <operator pos:start="21:51" pos:end="21:52">&amp;&amp;</operator>

        <operator pos:start="23:9" pos:end="23:9">!</operator><call pos:start="23:10" pos:end="23:44"><name pos:start="23:10" pos:end="23:28">ivshmem_has_feature</name><argument_list pos:start="23:29" pos:end="23:44">(<argument pos:start="23:30" pos:end="23:30"><expr pos:start="23:30" pos:end="23:30"><name pos:start="23:30" pos:end="23:30">s</name></expr></argument>, <argument pos:start="23:33" pos:end="23:43"><expr pos:start="23:33" pos:end="23:43"><name pos:start="23:33" pos:end="23:43">IVSHMEM_MSI</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:47" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:15">

        <expr_stmt pos:start="25:9" pos:end="25:57"><expr pos:start="25:9" pos:end="25:56"><call pos:start="25:9" pos:end="25:56"><name pos:start="25:9" pos:end="25:18">error_setg</name><argument_list pos:start="25:19" pos:end="25:56">(<argument pos:start="25:20" pos:end="25:23"><expr pos:start="25:20" pos:end="25:23"><name pos:start="25:20" pos:end="25:23">errp</name></expr></argument>, <argument pos:start="25:26" pos:end="25:55"><expr pos:start="25:26" pos:end="25:55"><literal type="string" pos:start="25:26" pos:end="25:55">"ioeventfd/irqfd requires MSI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:27"><expr pos:start="33:5" pos:end="33:26"><name pos:start="33:5" pos:end="33:12">pci_conf</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <name pos:start="33:16" pos:end="33:26"><name pos:start="33:16" pos:end="33:18">dev</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:26">config</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:64"><expr pos:start="35:5" pos:end="35:63"><name pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:12">pci_conf</name><index pos:start="35:13" pos:end="35:25">[<expr pos:start="35:14" pos:end="35:24"><name pos:start="35:14" pos:end="35:24">PCI_COMMAND</name></expr>]</index></name> <operator pos:start="35:27" pos:end="35:27">=</operator> <name pos:start="35:29" pos:end="35:42">PCI_COMMAND_IO</name> <operator pos:start="35:44" pos:end="35:44">|</operator> <name pos:start="35:46" pos:end="35:63">PCI_COMMAND_MEMORY</name></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="41:64"><expr pos:start="39:5" pos:end="41:63"><call pos:start="39:5" pos:end="41:63"><name pos:start="39:5" pos:end="39:25">memory_region_init_io</name><argument_list pos:start="39:26" pos:end="41:63">(<argument pos:start="39:27" pos:end="39:42"><expr pos:start="39:27" pos:end="39:42"><operator pos:start="39:27" pos:end="39:27">&amp;</operator><name pos:start="39:28" pos:end="39:42"><name pos:start="39:28" pos:end="39:28">s</name><operator pos:start="39:29" pos:end="39:30">-&gt;</operator><name pos:start="39:31" pos:end="39:42">ivshmem_mmio</name></name></expr></argument>, <argument pos:start="39:45" pos:end="39:53"><expr pos:start="39:45" pos:end="39:53"><call pos:start="39:45" pos:end="39:53"><name pos:start="39:45" pos:end="39:50">OBJECT</name><argument_list pos:start="39:51" pos:end="39:53">(<argument pos:start="39:52" pos:end="39:52"><expr pos:start="39:52" pos:end="39:52"><name pos:start="39:52" pos:end="39:52">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:56" pos:end="39:72"><expr pos:start="39:56" pos:end="39:72"><operator pos:start="39:56" pos:end="39:56">&amp;</operator><name pos:start="39:57" pos:end="39:72">ivshmem_mmio_ops</name></expr></argument>, <argument pos:start="39:75" pos:end="39:75"><expr pos:start="39:75" pos:end="39:75"><name pos:start="39:75" pos:end="39:75">s</name></expr></argument>,

                          <argument pos:start="41:27" pos:end="41:40"><expr pos:start="41:27" pos:end="41:40"><literal type="string" pos:start="41:27" pos:end="41:40">"ivshmem-mmio"</literal></expr></argument>, <argument pos:start="41:43" pos:end="41:62"><expr pos:start="41:43" pos:end="41:62"><name pos:start="41:43" pos:end="41:62">IVSHMEM_REG_BAR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:29">/* region for registers*/</comment>

    <expr_stmt pos:start="47:5" pos:end="49:39"><expr pos:start="47:5" pos:end="49:38"><call pos:start="47:5" pos:end="49:38"><name pos:start="47:5" pos:end="47:20">pci_register_bar</name><argument_list pos:start="47:21" pos:end="49:38">(<argument pos:start="47:22" pos:end="47:24"><expr pos:start="47:22" pos:end="47:24"><name pos:start="47:22" pos:end="47:24">dev</name></expr></argument>, <argument pos:start="47:27" pos:end="47:27"><expr pos:start="47:27" pos:end="47:27"><literal type="number" pos:start="47:27" pos:end="47:27">0</literal></expr></argument>, <argument pos:start="47:30" pos:end="47:58"><expr pos:start="47:30" pos:end="47:58"><name pos:start="47:30" pos:end="47:58">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr></argument>,

                     <argument pos:start="49:22" pos:end="49:37"><expr pos:start="49:22" pos:end="49:37"><operator pos:start="49:22" pos:end="49:22">&amp;</operator><name pos:start="49:23" pos:end="49:37"><name pos:start="49:23" pos:end="49:23">s</name><operator pos:start="49:24" pos:end="49:25">-&gt;</operator><name pos:start="49:26" pos:end="49:37">ivshmem_mmio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:28">(<expr pos:start="53:9" pos:end="53:27"><name pos:start="53:9" pos:end="53:27"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:27">not_legacy_32bit</name></name></expr>)</condition> <block pos:start="53:30" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:45">

        <expr_stmt pos:start="55:9" pos:end="55:45"><expr pos:start="55:9" pos:end="55:44"><name pos:start="55:9" pos:end="55:12">attr</name> <operator pos:start="55:14" pos:end="55:15">|=</operator> <name pos:start="55:17" pos:end="55:44">PCI_BASE_ADDRESS_MEM_TYPE_64</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="139:5"><if pos:start="61:5" pos:end="71:5">if <condition pos:start="61:8" pos:end="61:27">(<expr pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:18"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:18">hostmem</name></name> <operator pos:start="61:20" pos:end="61:21">!=</operator> <name pos:start="61:23" pos:end="61:26">NULL</name></expr>)</condition> <block pos:start="61:29" pos:end="71:5">{<block_content pos:start="63:9" pos:end="69:71">

        <expr_stmt pos:start="63:9" pos:end="63:43"><expr pos:start="63:9" pos:end="63:42"><call pos:start="63:9" pos:end="63:42"><name pos:start="63:9" pos:end="63:23">IVSHMEM_DPRINTF</name><argument_list pos:start="63:24" pos:end="63:42">(<argument pos:start="63:25" pos:end="63:41"><expr pos:start="63:25" pos:end="63:41"><literal type="string" pos:start="63:25" pos:end="63:41">"using hostmem\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="67:9" pos:end="69:71"><expr pos:start="67:9" pos:end="69:70"><name pos:start="67:9" pos:end="67:23"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:23">ivshmem_bar2</name></name> <operator pos:start="67:25" pos:end="67:25">=</operator> <call pos:start="67:27" pos:end="69:70"><name pos:start="67:27" pos:end="67:56">host_memory_backend_get_memory</name><argument_list pos:start="67:57" pos:end="69:70">(<argument pos:start="67:58" pos:end="67:67"><expr pos:start="67:58" pos:end="67:67"><name pos:start="67:58" pos:end="67:67"><name pos:start="67:58" pos:end="67:58">s</name><operator pos:start="67:59" pos:end="67:60">-&gt;</operator><name pos:start="67:61" pos:end="67:67">hostmem</name></name></expr></argument>,

                                                         <argument pos:start="69:58" pos:end="69:69"><expr pos:start="69:58" pos:end="69:69"><operator pos:start="69:58" pos:end="69:58">&amp;</operator><name pos:start="69:59" pos:end="69:69">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="139:5">else <block pos:start="71:12" pos:end="139:5">{<block_content pos:start="73:9" pos:end="137:9">

        <decl_stmt pos:start="73:9" pos:end="73:62"><decl pos:start="73:9" pos:end="73:61"><type pos:start="73:9" pos:end="73:17"><name pos:start="73:9" pos:end="73:15">Chardev</name> <modifier pos:start="73:17" pos:end="73:17">*</modifier></type><name pos:start="73:18" pos:end="73:20">chr</name> <init pos:start="73:22" pos:end="73:61">= <expr pos:start="73:24" pos:end="73:61"><call pos:start="73:24" pos:end="73:61"><name pos:start="73:24" pos:end="73:45">qemu_chr_fe_get_driver</name><argument_list pos:start="73:46" pos:end="73:61">(<argument pos:start="73:47" pos:end="73:60"><expr pos:start="73:47" pos:end="73:60"><operator pos:start="73:47" pos:end="73:47">&amp;</operator><name pos:start="73:48" pos:end="73:60"><name pos:start="73:48" pos:end="73:48">s</name><operator pos:start="73:49" pos:end="73:50">-&gt;</operator><name pos:start="73:51" pos:end="73:60">server_chr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:20"><expr pos:start="75:9" pos:end="75:19"><call pos:start="75:9" pos:end="75:19"><name pos:start="75:9" pos:end="75:14">assert</name><argument_list pos:start="75:15" pos:end="75:19">(<argument pos:start="75:16" pos:end="75:18"><expr pos:start="75:16" pos:end="75:18"><name pos:start="75:16" pos:end="75:18">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="79:9" pos:end="81:39"><expr pos:start="79:9" pos:end="81:38"><call pos:start="79:9" pos:end="81:38"><name pos:start="79:9" pos:end="79:23">IVSHMEM_DPRINTF</name><argument_list pos:start="79:24" pos:end="81:38">(<argument pos:start="79:25" pos:end="79:68"><expr pos:start="79:25" pos:end="79:68"><literal type="string" pos:start="79:25" pos:end="79:68">"using shared memory server (socket = %s)\n"</literal></expr></argument>,

                        <argument pos:start="81:25" pos:end="81:37"><expr pos:start="81:25" pos:end="81:37"><name pos:start="81:25" pos:end="81:37"><name pos:start="81:25" pos:end="81:27">chr</name><operator pos:start="81:28" pos:end="81:29">-&gt;</operator><name pos:start="81:30" pos:end="81:37">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="85:9" pos:end="85:70">/* we allocate enough space for 16 peers and grow as needed */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:28"><expr pos:start="87:9" pos:end="87:27"><call pos:start="87:9" pos:end="87:27"><name pos:start="87:9" pos:end="87:20">resize_peers</name><argument_list pos:start="87:21" pos:end="87:27">(<argument pos:start="87:22" pos:end="87:22"><expr pos:start="87:22" pos:end="87:22"><name pos:start="87:22" pos:end="87:22">s</name></expr></argument>, <argument pos:start="87:25" pos:end="87:26"><expr pos:start="87:25" pos:end="87:26"><literal type="number" pos:start="87:25" pos:end="87:26">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="91:9" pos:end="99:11">/*

         * Receive setup messages from server synchronously.

         * Older versions did it asynchronously, but that creates a

         * number of entertaining race conditions.

         */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:36"><expr pos:start="101:9" pos:end="101:35"><call pos:start="101:9" pos:end="101:35"><name pos:start="101:9" pos:end="101:26">ivshmem_recv_setup</name><argument_list pos:start="101:27" pos:end="101:35">(<argument pos:start="101:28" pos:end="101:28"><expr pos:start="101:28" pos:end="101:28"><name pos:start="101:28" pos:end="101:28">s</name></expr></argument>, <argument pos:start="101:31" pos:end="101:34"><expr pos:start="101:31" pos:end="101:34"><operator pos:start="101:31" pos:end="101:31">&amp;</operator><name pos:start="101:32" pos:end="101:34">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="109:9"><if pos:start="103:9" pos:end="109:9">if <condition pos:start="103:12" pos:end="103:16">(<expr pos:start="103:13" pos:end="103:15"><name pos:start="103:13" pos:end="103:15">err</name></expr>)</condition> <block pos:start="103:18" pos:end="109:9">{<block_content pos:start="105:13" pos:end="107:19">

            <expr_stmt pos:start="105:13" pos:end="105:39"><expr pos:start="105:13" pos:end="105:38"><call pos:start="105:13" pos:end="105:38"><name pos:start="105:13" pos:end="105:27">error_propagate</name><argument_list pos:start="105:28" pos:end="105:38">(<argument pos:start="105:29" pos:end="105:32"><expr pos:start="105:29" pos:end="105:32"><name pos:start="105:29" pos:end="105:32">errp</name></expr></argument>, <argument pos:start="105:35" pos:end="105:37"><expr pos:start="105:35" pos:end="105:37"><name pos:start="105:35" pos:end="105:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="107:13" pos:end="107:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="113:9" pos:end="121:9"><if pos:start="113:9" pos:end="121:9">if <condition pos:start="113:12" pos:end="113:57">(<expr pos:start="113:13" pos:end="113:56"><name pos:start="113:13" pos:end="113:21"><name pos:start="113:13" pos:end="113:13">s</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:21">master</name></name> <operator pos:start="113:23" pos:end="113:24">==</operator> <name pos:start="113:26" pos:end="113:39">ON_OFF_AUTO_ON</name> <operator pos:start="113:41" pos:end="113:42">&amp;&amp;</operator> <name pos:start="113:44" pos:end="113:51"><name pos:start="113:44" pos:end="113:44">s</name><operator pos:start="113:45" pos:end="113:46">-&gt;</operator><name pos:start="113:47" pos:end="113:51">vm_id</name></name> <operator pos:start="113:53" pos:end="113:54">!=</operator> <literal type="number" pos:start="113:56" pos:end="113:56">0</literal></expr>)</condition> <block pos:start="113:59" pos:end="121:9">{<block_content pos:start="115:13" pos:end="119:19">

            <expr_stmt pos:start="115:13" pos:end="117:77"><expr pos:start="115:13" pos:end="117:76"><call pos:start="115:13" pos:end="117:76"><name pos:start="115:13" pos:end="115:22">error_setg</name><argument_list pos:start="115:23" pos:end="117:76">(<argument pos:start="115:24" pos:end="115:27"><expr pos:start="115:24" pos:end="115:27"><name pos:start="115:24" pos:end="115:27">errp</name></expr></argument>,

                       <argument pos:start="117:24" pos:end="117:75"><expr pos:start="117:24" pos:end="117:75"><literal type="string" pos:start="117:24" pos:end="117:75">"master must connect to the server before any peers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="119:13" pos:end="119:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="125:9" pos:end="127:68"><expr pos:start="125:9" pos:end="127:67"><call pos:start="125:9" pos:end="127:67"><name pos:start="125:9" pos:end="125:32">qemu_chr_fe_set_handlers</name><argument_list pos:start="125:33" pos:end="127:67">(<argument pos:start="125:34" pos:end="125:47"><expr pos:start="125:34" pos:end="125:47"><operator pos:start="125:34" pos:end="125:34">&amp;</operator><name pos:start="125:35" pos:end="125:47"><name pos:start="125:35" pos:end="125:35">s</name><operator pos:start="125:36" pos:end="125:37">-&gt;</operator><name pos:start="125:38" pos:end="125:47">server_chr</name></name></expr></argument>, <argument pos:start="125:50" pos:end="125:68"><expr pos:start="125:50" pos:end="125:68"><name pos:start="125:50" pos:end="125:68">ivshmem_can_receive</name></expr></argument>,

                                 <argument pos:start="127:34" pos:end="127:45"><expr pos:start="127:34" pos:end="127:45"><name pos:start="127:34" pos:end="127:45">ivshmem_read</name></expr></argument>, <argument pos:start="127:48" pos:end="127:51"><expr pos:start="127:48" pos:end="127:51"><name pos:start="127:48" pos:end="127:51">NULL</name></expr></argument>, <argument pos:start="127:54" pos:end="127:54"><expr pos:start="127:54" pos:end="127:54"><name pos:start="127:54" pos:end="127:54">s</name></expr></argument>, <argument pos:start="127:57" pos:end="127:60"><expr pos:start="127:57" pos:end="127:60"><name pos:start="127:57" pos:end="127:60">NULL</name></expr></argument>, <argument pos:start="127:63" pos:end="127:66"><expr pos:start="127:63" pos:end="127:66"><name pos:start="127:63" pos:end="127:66">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="131:9" pos:end="137:9"><if pos:start="131:9" pos:end="137:9">if <condition pos:start="131:12" pos:end="131:44">(<expr pos:start="131:13" pos:end="131:43"><call pos:start="131:13" pos:end="131:39"><name pos:start="131:13" pos:end="131:36">ivshmem_setup_interrupts</name><argument_list pos:start="131:37" pos:end="131:39">(<argument pos:start="131:38" pos:end="131:38"><expr pos:start="131:38" pos:end="131:38"><name pos:start="131:38" pos:end="131:38">s</name></expr></argument>)</argument_list></call> <operator pos:start="131:41" pos:end="131:41">&lt;</operator> <literal type="number" pos:start="131:43" pos:end="131:43">0</literal></expr>)</condition> <block pos:start="131:46" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:19">

            <expr_stmt pos:start="133:13" pos:end="133:64"><expr pos:start="133:13" pos:end="133:63"><call pos:start="133:13" pos:end="133:63"><name pos:start="133:13" pos:end="133:22">error_setg</name><argument_list pos:start="133:23" pos:end="133:63">(<argument pos:start="133:24" pos:end="133:27"><expr pos:start="133:24" pos:end="133:27"><name pos:start="133:24" pos:end="133:27">errp</name></expr></argument>, <argument pos:start="133:30" pos:end="133:62"><expr pos:start="133:30" pos:end="133:62"><literal type="string" pos:start="133:30" pos:end="133:62">"failed to initialize interrupts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="135:13" pos:end="135:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="143:5" pos:end="147:5"><if pos:start="143:5" pos:end="147:5">if <condition pos:start="143:8" pos:end="143:38">(<expr pos:start="143:9" pos:end="143:37"><name pos:start="143:9" pos:end="143:17"><name pos:start="143:9" pos:end="143:9">s</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:17">master</name></name> <operator pos:start="143:19" pos:end="143:20">==</operator> <name pos:start="143:22" pos:end="143:37">ON_OFF_AUTO_AUTO</name></expr>)</condition> <block pos:start="143:40" pos:end="147:5">{<block_content pos:start="145:9" pos:end="145:69">

        <expr_stmt pos:start="145:9" pos:end="145:69"><expr pos:start="145:9" pos:end="145:68"><name pos:start="145:9" pos:end="145:17"><name pos:start="145:9" pos:end="145:9">s</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:17">master</name></name> <operator pos:start="145:19" pos:end="145:19">=</operator> <ternary pos:start="145:21" pos:end="145:68"><condition pos:start="145:21" pos:end="145:35"><expr pos:start="145:21" pos:end="145:33"><name pos:start="145:21" pos:end="145:28"><name pos:start="145:21" pos:end="145:21">s</name><operator pos:start="145:22" pos:end="145:23">-&gt;</operator><name pos:start="145:24" pos:end="145:28">vm_id</name></name> <operator pos:start="145:30" pos:end="145:31">==</operator> <literal type="number" pos:start="145:33" pos:end="145:33">0</literal></expr> ?</condition><then pos:start="145:37" pos:end="145:50"> <expr pos:start="145:37" pos:end="145:50"><name pos:start="145:37" pos:end="145:50">ON_OFF_AUTO_ON</name></expr> </then><else pos:start="145:52" pos:end="145:68">: <expr pos:start="145:54" pos:end="145:68"><name pos:start="145:54" pos:end="145:68">ON_OFF_AUTO_OFF</name></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="151:5" pos:end="169:5"><if pos:start="151:5" pos:end="169:5">if <condition pos:start="151:8" pos:end="151:30">(<expr pos:start="151:9" pos:end="151:29"><operator pos:start="151:9" pos:end="151:9">!</operator><call pos:start="151:10" pos:end="151:29"><name pos:start="151:10" pos:end="151:26">ivshmem_is_master</name><argument_list pos:start="151:27" pos:end="151:29">(<argument pos:start="151:28" pos:end="151:28"><expr pos:start="151:28" pos:end="151:28"><name pos:start="151:28" pos:end="151:28">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="151:32" pos:end="169:5">{<block_content pos:start="153:9" pos:end="167:9">

        <expr_stmt pos:start="153:9" pos:end="155:95"><expr pos:start="153:9" pos:end="155:94"><call pos:start="153:9" pos:end="155:94"><name pos:start="153:9" pos:end="153:18">error_setg</name><argument_list pos:start="153:19" pos:end="155:94">(<argument pos:start="153:20" pos:end="153:40"><expr pos:start="153:20" pos:end="153:40"><operator pos:start="153:20" pos:end="153:20">&amp;</operator><name pos:start="153:21" pos:end="153:40"><name pos:start="153:21" pos:end="153:21">s</name><operator pos:start="153:22" pos:end="153:23">-&gt;</operator><name pos:start="153:24" pos:end="153:40">migration_blocker</name></name></expr></argument>,

                   <argument pos:start="155:20" pos:end="155:93"><expr pos:start="155:20" pos:end="155:93"><literal type="string" pos:start="155:20" pos:end="155:93">"Migration is disabled when using feature 'peer mode' in device 'ivshmem'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:62"><expr pos:start="157:9" pos:end="157:61"><call pos:start="157:9" pos:end="157:61"><name pos:start="157:9" pos:end="157:27">migrate_add_blocker</name><argument_list pos:start="157:28" pos:end="157:61">(<argument pos:start="157:29" pos:end="157:48"><expr pos:start="157:29" pos:end="157:48"><name pos:start="157:29" pos:end="157:48"><name pos:start="157:29" pos:end="157:29">s</name><operator pos:start="157:30" pos:end="157:31">-&gt;</operator><name pos:start="157:32" pos:end="157:48">migration_blocker</name></name></expr></argument>, <argument pos:start="157:51" pos:end="157:60"><expr pos:start="157:51" pos:end="157:60"><operator pos:start="157:51" pos:end="157:51">&amp;</operator><name pos:start="157:52" pos:end="157:60">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="159:9" pos:end="167:9"><if pos:start="159:9" pos:end="167:9">if <condition pos:start="159:12" pos:end="159:22">(<expr pos:start="159:13" pos:end="159:21"><name pos:start="159:13" pos:end="159:21">local_err</name></expr>)</condition> <block pos:start="159:24" pos:end="167:9">{<block_content pos:start="161:13" pos:end="165:19">

            <expr_stmt pos:start="161:13" pos:end="161:45"><expr pos:start="161:13" pos:end="161:44"><call pos:start="161:13" pos:end="161:44"><name pos:start="161:13" pos:end="161:27">error_propagate</name><argument_list pos:start="161:28" pos:end="161:44">(<argument pos:start="161:29" pos:end="161:32"><expr pos:start="161:29" pos:end="161:32"><name pos:start="161:29" pos:end="161:32">errp</name></expr></argument>, <argument pos:start="161:35" pos:end="161:43"><expr pos:start="161:35" pos:end="161:43"><name pos:start="161:35" pos:end="161:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:45"><expr pos:start="163:13" pos:end="163:44"><call pos:start="163:13" pos:end="163:44"><name pos:start="163:13" pos:end="163:22">error_free</name><argument_list pos:start="163:23" pos:end="163:44">(<argument pos:start="163:24" pos:end="163:43"><expr pos:start="163:24" pos:end="163:43"><name pos:start="163:24" pos:end="163:43"><name pos:start="163:24" pos:end="163:24">s</name><operator pos:start="163:25" pos:end="163:26">-&gt;</operator><name pos:start="163:27" pos:end="163:43">migration_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="165:13" pos:end="165:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:53"><expr pos:start="173:5" pos:end="173:52"><call pos:start="173:5" pos:end="173:52"><name pos:start="173:5" pos:end="173:24">vmstate_register_ram</name><argument_list pos:start="173:25" pos:end="173:52">(<argument pos:start="173:26" pos:end="173:40"><expr pos:start="173:26" pos:end="173:40"><name pos:start="173:26" pos:end="173:40"><name pos:start="173:26" pos:end="173:26">s</name><operator pos:start="173:27" pos:end="173:28">-&gt;</operator><name pos:start="173:29" pos:end="173:40">ivshmem_bar2</name></name></expr></argument>, <argument pos:start="173:43" pos:end="173:51"><expr pos:start="173:43" pos:end="173:51"><call pos:start="173:43" pos:end="173:51"><name pos:start="173:43" pos:end="173:48">DEVICE</name><argument_list pos:start="173:49" pos:end="173:51">(<argument pos:start="173:50" pos:end="173:50"><expr pos:start="173:50" pos:end="173:50"><name pos:start="173:50" pos:end="173:50">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:62"><expr pos:start="175:5" pos:end="175:61"><call pos:start="175:5" pos:end="175:61"><name pos:start="175:5" pos:end="175:20">pci_register_bar</name><argument_list pos:start="175:21" pos:end="175:61">(<argument pos:start="175:22" pos:end="175:34"><expr pos:start="175:22" pos:end="175:34"><call pos:start="175:22" pos:end="175:34"><name pos:start="175:22" pos:end="175:31">PCI_DEVICE</name><argument_list pos:start="175:32" pos:end="175:34">(<argument pos:start="175:33" pos:end="175:33"><expr pos:start="175:33" pos:end="175:33"><name pos:start="175:33" pos:end="175:33">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="175:37" pos:end="175:37"><expr pos:start="175:37" pos:end="175:37"><literal type="number" pos:start="175:37" pos:end="175:37">2</literal></expr></argument>, <argument pos:start="175:40" pos:end="175:43"><expr pos:start="175:40" pos:end="175:43"><name pos:start="175:40" pos:end="175:43">attr</name></expr></argument>, <argument pos:start="175:46" pos:end="175:60"><expr pos:start="175:46" pos:end="175:60"><name pos:start="175:46" pos:end="175:60"><name pos:start="175:46" pos:end="175:46">s</name><operator pos:start="175:47" pos:end="175:48">-&gt;</operator><name pos:start="175:49" pos:end="175:60">ivshmem_bar2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
