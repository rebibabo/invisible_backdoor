<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18952.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">slirp_hostfwd</name><parameter_list pos:start="1:25" pos:end="3:57">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">SlirpState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:61"><decl pos:start="1:41" pos:end="1:61"><type pos:start="1:41" pos:end="1:61"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:50">char</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:61">redir_str</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:42"><decl pos:start="3:26" pos:end="3:42"><type pos:start="3:26" pos:end="3:42"><name pos:start="3:26" pos:end="3:28">int</name></type> <name pos:start="3:30" pos:end="3:42">legacy_format</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:56"><decl pos:start="3:45" pos:end="3:56"><type pos:start="3:45" pos:end="3:56"><name pos:start="3:45" pos:end="3:49">Error</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier><modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:56">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="127:1">{<block_content pos:start="7:5" pos:end="125:14">

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:18">in_addr</name></name></type> <name pos:start="7:20" pos:end="7:28">host_addr</name> <init pos:start="7:30" pos:end="7:55">= <expr pos:start="7:32" pos:end="7:55"><block pos:start="7:32" pos:end="7:55">{ <expr pos:start="7:34" pos:end="7:53"><operator pos:start="7:34" pos:end="7:34">.</operator><name pos:start="7:35" pos:end="7:40">s_addr</name> <operator pos:start="7:42" pos:end="7:42">=</operator> <name pos:start="7:44" pos:end="7:53">INADDR_ANY</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:48"><decl pos:start="9:5" pos:end="9:47"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:18">in_addr</name></name></type> <name pos:start="9:20" pos:end="9:29">guest_addr</name> <init pos:start="9:31" pos:end="9:47">= <expr pos:start="9:33" pos:end="9:47"><block pos:start="9:33" pos:end="9:47">{ <expr pos:start="9:35" pos:end="9:45"><operator pos:start="9:35" pos:end="9:35">.</operator><name pos:start="9:36" pos:end="9:41">s_addr</name> <operator pos:start="9:43" pos:end="9:43">=</operator> <literal type="number" pos:start="9:45" pos:end="9:45">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">host_port</name></decl>, <decl pos:start="11:20" pos:end="11:29"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:20" pos:end="11:29">guest_port</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:17"><name pos:start="15:10" pos:end="15:12">buf</name><index pos:start="15:13" pos:end="15:17">[<expr pos:start="15:14" pos:end="15:16"><literal type="number" pos:start="15:14" pos:end="15:16">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:14">is_udp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:14"><decl pos:start="19:5" pos:end="19:13"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">char</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:13">end</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:18"><expr pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:5">p</name> <operator pos:start="23:7" pos:end="23:7">=</operator> <name pos:start="23:9" pos:end="23:17">redir_str</name></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:57">(<expr pos:start="25:9" pos:end="25:56"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:10">p</name> <operator pos:start="25:12" pos:end="25:13">||</operator> <call pos:start="25:15" pos:end="25:52"><name pos:start="25:15" pos:end="25:25">get_str_sep</name><argument_list pos:start="25:26" pos:end="25:52">(<argument pos:start="25:27" pos:end="25:29"><expr pos:start="25:27" pos:end="25:29"><name pos:start="25:27" pos:end="25:29">buf</name></expr></argument>, <argument pos:start="25:32" pos:end="25:42"><expr pos:start="25:32" pos:end="25:42"><sizeof pos:start="25:32" pos:end="25:42">sizeof<argument_list pos:start="25:38" pos:end="25:42">(<argument pos:start="25:39" pos:end="25:41"><expr pos:start="25:39" pos:end="25:41"><name pos:start="25:39" pos:end="25:41">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="25:45" pos:end="25:46"><expr pos:start="25:45" pos:end="25:46"><operator pos:start="25:45" pos:end="25:45">&amp;</operator><name pos:start="25:46" pos:end="25:46">p</name></expr></argument>, <argument pos:start="25:49" pos:end="25:51"><expr pos:start="25:49" pos:end="25:51"><literal type="char" pos:start="25:49" pos:end="25:51">':'</literal></expr></argument>)</argument_list></call> <operator pos:start="25:54" pos:end="25:54">&lt;</operator> <literal type="number" pos:start="25:56" pos:end="25:56">0</literal></expr>)</condition> <block pos:start="25:59" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:25">

        <goto pos:start="27:9" pos:end="27:25">goto <name pos:start="27:14" pos:end="27:24">fail_syntax</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="43:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:46">(<expr pos:start="31:9" pos:end="31:45"><operator pos:start="31:9" pos:end="31:9">!</operator><call pos:start="31:10" pos:end="31:27"><name pos:start="31:10" pos:end="31:15">strcmp</name><argument_list pos:start="31:16" pos:end="31:27">(<argument pos:start="31:17" pos:end="31:19"><expr pos:start="31:17" pos:end="31:19"><name pos:start="31:17" pos:end="31:19">buf</name></expr></argument>, <argument pos:start="31:22" pos:end="31:26"><expr pos:start="31:22" pos:end="31:26"><literal type="string" pos:start="31:22" pos:end="31:26">"tcp"</literal></expr></argument>)</argument_list></call> <operator pos:start="31:29" pos:end="31:30">||</operator> <name pos:start="31:32" pos:end="31:37"><name pos:start="31:32" pos:end="31:34">buf</name><index pos:start="31:35" pos:end="31:37">[<expr pos:start="31:36" pos:end="31:36"><literal type="number" pos:start="31:36" pos:end="31:36">0</literal></expr>]</index></name> <operator pos:start="31:39" pos:end="31:40">==</operator> <literal type="char" pos:start="31:42" pos:end="31:45">'\0'</literal></expr>)</condition> <block pos:start="31:48" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:19">

        <expr_stmt pos:start="33:9" pos:end="33:19"><expr pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:14">is_udp</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <literal type="number" pos:start="33:18" pos:end="33:18">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="35:7" pos:end="39:5">else if <condition pos:start="35:15" pos:end="35:35">(<expr pos:start="35:16" pos:end="35:34"><operator pos:start="35:16" pos:end="35:16">!</operator><call pos:start="35:17" pos:end="35:34"><name pos:start="35:17" pos:end="35:22">strcmp</name><argument_list pos:start="35:23" pos:end="35:34">(<argument pos:start="35:24" pos:end="35:26"><expr pos:start="35:24" pos:end="35:26"><name pos:start="35:24" pos:end="35:26">buf</name></expr></argument>, <argument pos:start="35:29" pos:end="35:33"><expr pos:start="35:29" pos:end="35:33"><literal type="string" pos:start="35:29" pos:end="35:33">"udp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:37" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:19">

        <expr_stmt pos:start="37:9" pos:end="37:19"><expr pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:14">is_udp</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <literal type="number" pos:start="37:18" pos:end="37:18">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="39:7" pos:end="43:5">else <block pos:start="39:12" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:25">

        <goto pos:start="41:9" pos:end="41:25">goto <name pos:start="41:14" pos:end="41:24">fail_syntax</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="47:5" pos:end="61:5"><if pos:start="47:5" pos:end="61:5">if <condition pos:start="47:8" pos:end="47:23">(<expr pos:start="47:9" pos:end="47:22"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:22">legacy_format</name></expr>)</condition> <block pos:start="47:25" pos:end="61:5">{<block_content pos:start="49:9" pos:end="59:9">

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:55">(<expr pos:start="49:13" pos:end="49:54"><call pos:start="49:13" pos:end="49:50"><name pos:start="49:13" pos:end="49:23">get_str_sep</name><argument_list pos:start="49:24" pos:end="49:50">(<argument pos:start="49:25" pos:end="49:27"><expr pos:start="49:25" pos:end="49:27"><name pos:start="49:25" pos:end="49:27">buf</name></expr></argument>, <argument pos:start="49:30" pos:end="49:40"><expr pos:start="49:30" pos:end="49:40"><sizeof pos:start="49:30" pos:end="49:40">sizeof<argument_list pos:start="49:36" pos:end="49:40">(<argument pos:start="49:37" pos:end="49:39"><expr pos:start="49:37" pos:end="49:39"><name pos:start="49:37" pos:end="49:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="49:43" pos:end="49:44"><expr pos:start="49:43" pos:end="49:44"><operator pos:start="49:43" pos:end="49:43">&amp;</operator><name pos:start="49:44" pos:end="49:44">p</name></expr></argument>, <argument pos:start="49:47" pos:end="49:49"><expr pos:start="49:47" pos:end="49:49"><literal type="char" pos:start="49:47" pos:end="49:49">':'</literal></expr></argument>)</argument_list></call> <operator pos:start="49:52" pos:end="49:52">&lt;</operator> <literal type="number" pos:start="49:54" pos:end="49:54">0</literal></expr>)</condition> <block pos:start="49:57" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:29">

            <goto pos:start="51:13" pos:end="51:29">goto <name pos:start="51:18" pos:end="51:28">fail_syntax</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:58">(<expr pos:start="55:13" pos:end="55:57"><name pos:start="55:13" pos:end="55:18"><name pos:start="55:13" pos:end="55:15">buf</name><index pos:start="55:16" pos:end="55:18">[<expr pos:start="55:17" pos:end="55:17"><literal type="number" pos:start="55:17" pos:end="55:17">0</literal></expr>]</index></name> <operator pos:start="55:20" pos:end="55:21">!=</operator> <literal type="char" pos:start="55:23" pos:end="55:26">'\0'</literal> <operator pos:start="55:28" pos:end="55:29">&amp;&amp;</operator> <operator pos:start="55:31" pos:end="55:31">!</operator><call pos:start="55:32" pos:end="55:57"><name pos:start="55:32" pos:end="55:40">inet_aton</name><argument_list pos:start="55:41" pos:end="55:57">(<argument pos:start="55:42" pos:end="55:44"><expr pos:start="55:42" pos:end="55:44"><name pos:start="55:42" pos:end="55:44">buf</name></expr></argument>, <argument pos:start="55:47" pos:end="55:56"><expr pos:start="55:47" pos:end="55:56"><operator pos:start="55:47" pos:end="55:47">&amp;</operator><name pos:start="55:48" pos:end="55:56">host_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:60" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:29">

            <goto pos:start="57:13" pos:end="57:29">goto <name pos:start="57:18" pos:end="57:28">fail_syntax</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:73">(<expr pos:start="65:9" pos:end="65:72"><call pos:start="65:9" pos:end="65:68"><name pos:start="65:9" pos:end="65:19">get_str_sep</name><argument_list pos:start="65:20" pos:end="65:68">(<argument pos:start="65:21" pos:end="65:23"><expr pos:start="65:21" pos:end="65:23"><name pos:start="65:21" pos:end="65:23">buf</name></expr></argument>, <argument pos:start="65:26" pos:end="65:36"><expr pos:start="65:26" pos:end="65:36"><sizeof pos:start="65:26" pos:end="65:36">sizeof<argument_list pos:start="65:32" pos:end="65:36">(<argument pos:start="65:33" pos:end="65:35"><expr pos:start="65:33" pos:end="65:35"><name pos:start="65:33" pos:end="65:35">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="65:39" pos:end="65:40"><expr pos:start="65:39" pos:end="65:40"><operator pos:start="65:39" pos:end="65:39">&amp;</operator><name pos:start="65:40" pos:end="65:40">p</name></expr></argument>, <argument pos:start="65:43" pos:end="65:67"><expr pos:start="65:43" pos:end="65:67"><ternary pos:start="65:43" pos:end="65:67"><condition pos:start="65:43" pos:end="65:57"><expr pos:start="65:43" pos:end="65:55"><name pos:start="65:43" pos:end="65:55">legacy_format</name></expr> ?</condition><then pos:start="65:59" pos:end="65:61"> <expr pos:start="65:59" pos:end="65:61"><literal type="char" pos:start="65:59" pos:end="65:61">':'</literal></expr> </then><else pos:start="65:63" pos:end="65:67">: <expr pos:start="65:65" pos:end="65:67"><literal type="char" pos:start="65:65" pos:end="65:67">'-'</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator pos:start="65:70" pos:end="65:70">&lt;</operator> <literal type="number" pos:start="65:72" pos:end="65:72">0</literal></expr>)</condition> <block pos:start="65:75" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:25">

        <goto pos:start="67:9" pos:end="67:25">goto <name pos:start="67:14" pos:end="67:24">fail_syntax</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:37"><expr pos:start="71:5" pos:end="71:36"><name pos:start="71:5" pos:end="71:13">host_port</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <call pos:start="71:17" pos:end="71:36"><name pos:start="71:17" pos:end="71:22">strtol</name><argument_list pos:start="71:23" pos:end="71:36">(<argument pos:start="71:24" pos:end="71:26"><expr pos:start="71:24" pos:end="71:26"><name pos:start="71:24" pos:end="71:26">buf</name></expr></argument>, <argument pos:start="71:29" pos:end="71:32"><expr pos:start="71:29" pos:end="71:32"><operator pos:start="71:29" pos:end="71:29">&amp;</operator><name pos:start="71:30" pos:end="71:32">end</name></expr></argument>, <argument pos:start="71:35" pos:end="71:35"><expr pos:start="71:35" pos:end="71:35"><literal type="number" pos:start="71:35" pos:end="71:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="77:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:59">(<expr pos:start="73:9" pos:end="73:58"><operator pos:start="73:9" pos:end="73:9">*</operator><name pos:start="73:10" pos:end="73:12">end</name> <operator pos:start="73:14" pos:end="73:15">!=</operator> <literal type="char" pos:start="73:17" pos:end="73:20">'\0'</literal> <operator pos:start="73:22" pos:end="73:23">||</operator> <name pos:start="73:25" pos:end="73:52"><name pos:start="73:25" pos:end="73:33">host_port</name> <argument_list type="generic" pos:start="73:35" pos:end="73:52">&lt; <argument pos:start="73:37" pos:end="73:50"><expr pos:start="73:37" pos:end="73:50"><literal type="number" pos:start="73:37" pos:end="73:37">0</literal> <operator pos:start="73:39" pos:end="73:40">||</operator> <name pos:start="73:42" pos:end="73:50">host_port</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="73:54" pos:end="73:58">65535</literal></expr>)</condition> <block pos:start="73:61" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:25">

        <goto pos:start="75:9" pos:end="75:25">goto <name pos:start="75:14" pos:end="75:24">fail_syntax</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="81:5" pos:end="85:5"><if pos:start="81:5" pos:end="85:5">if <condition pos:start="81:8" pos:end="81:51">(<expr pos:start="81:9" pos:end="81:50"><call pos:start="81:9" pos:end="81:46"><name pos:start="81:9" pos:end="81:19">get_str_sep</name><argument_list pos:start="81:20" pos:end="81:46">(<argument pos:start="81:21" pos:end="81:23"><expr pos:start="81:21" pos:end="81:23"><name pos:start="81:21" pos:end="81:23">buf</name></expr></argument>, <argument pos:start="81:26" pos:end="81:36"><expr pos:start="81:26" pos:end="81:36"><sizeof pos:start="81:26" pos:end="81:36">sizeof<argument_list pos:start="81:32" pos:end="81:36">(<argument pos:start="81:33" pos:end="81:35"><expr pos:start="81:33" pos:end="81:35"><name pos:start="81:33" pos:end="81:35">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="81:39" pos:end="81:40"><expr pos:start="81:39" pos:end="81:40"><operator pos:start="81:39" pos:end="81:39">&amp;</operator><name pos:start="81:40" pos:end="81:40">p</name></expr></argument>, <argument pos:start="81:43" pos:end="81:45"><expr pos:start="81:43" pos:end="81:45"><literal type="char" pos:start="81:43" pos:end="81:45">':'</literal></expr></argument>)</argument_list></call> <operator pos:start="81:48" pos:end="81:48">&lt;</operator> <literal type="number" pos:start="81:50" pos:end="81:50">0</literal></expr>)</condition> <block pos:start="81:53" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:25">

        <goto pos:start="83:9" pos:end="83:25">goto <name pos:start="83:14" pos:end="83:24">fail_syntax</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="87:5" pos:end="91:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:55">(<expr pos:start="87:9" pos:end="87:54"><name pos:start="87:9" pos:end="87:14"><name pos:start="87:9" pos:end="87:11">buf</name><index pos:start="87:12" pos:end="87:14">[<expr pos:start="87:13" pos:end="87:13"><literal type="number" pos:start="87:13" pos:end="87:13">0</literal></expr>]</index></name> <operator pos:start="87:16" pos:end="87:17">!=</operator> <literal type="char" pos:start="87:19" pos:end="87:22">'\0'</literal> <operator pos:start="87:24" pos:end="87:25">&amp;&amp;</operator> <operator pos:start="87:27" pos:end="87:27">!</operator><call pos:start="87:28" pos:end="87:54"><name pos:start="87:28" pos:end="87:36">inet_aton</name><argument_list pos:start="87:37" pos:end="87:54">(<argument pos:start="87:38" pos:end="87:40"><expr pos:start="87:38" pos:end="87:40"><name pos:start="87:38" pos:end="87:40">buf</name></expr></argument>, <argument pos:start="87:43" pos:end="87:53"><expr pos:start="87:43" pos:end="87:53"><operator pos:start="87:43" pos:end="87:43">&amp;</operator><name pos:start="87:44" pos:end="87:53">guest_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:57" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:25">

        <goto pos:start="89:9" pos:end="89:25">goto <name pos:start="89:14" pos:end="89:24">fail_syntax</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:36"><expr pos:start="95:5" pos:end="95:35"><name pos:start="95:5" pos:end="95:14">guest_port</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <call pos:start="95:18" pos:end="95:35"><name pos:start="95:18" pos:end="95:23">strtol</name><argument_list pos:start="95:24" pos:end="95:35">(<argument pos:start="95:25" pos:end="95:25"><expr pos:start="95:25" pos:end="95:25"><name pos:start="95:25" pos:end="95:25">p</name></expr></argument>, <argument pos:start="95:28" pos:end="95:31"><expr pos:start="95:28" pos:end="95:31"><operator pos:start="95:28" pos:end="95:28">&amp;</operator><name pos:start="95:29" pos:end="95:31">end</name></expr></argument>, <argument pos:start="95:34" pos:end="95:34"><expr pos:start="95:34" pos:end="95:34"><literal type="number" pos:start="95:34" pos:end="95:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:61">(<expr pos:start="97:9" pos:end="97:60"><operator pos:start="97:9" pos:end="97:9">*</operator><name pos:start="97:10" pos:end="97:12">end</name> <operator pos:start="97:14" pos:end="97:15">!=</operator> <literal type="char" pos:start="97:17" pos:end="97:20">'\0'</literal> <operator pos:start="97:22" pos:end="97:23">||</operator> <name pos:start="97:25" pos:end="97:54"><name pos:start="97:25" pos:end="97:34">guest_port</name> <argument_list type="generic" pos:start="97:36" pos:end="97:54">&lt; <argument pos:start="97:38" pos:end="97:52"><expr pos:start="97:38" pos:end="97:52"><literal type="number" pos:start="97:38" pos:end="97:38">1</literal> <operator pos:start="97:40" pos:end="97:41">||</operator> <name pos:start="97:43" pos:end="97:52">guest_port</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="97:56" pos:end="97:60">65535</literal></expr>)</condition> <block pos:start="97:63" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:25">

        <goto pos:start="99:9" pos:end="99:25">goto <name pos:start="99:14" pos:end="99:24">fail_syntax</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="105:5" pos:end="115:5"><if pos:start="105:5" pos:end="115:5">if <condition pos:start="105:8" pos:end="107:42">(<expr pos:start="105:9" pos:end="107:41"><call pos:start="105:9" pos:end="107:37"><name pos:start="105:9" pos:end="105:25">slirp_add_hostfwd</name><argument_list pos:start="105:26" pos:end="107:37">(<argument pos:start="105:27" pos:end="105:34"><expr pos:start="105:27" pos:end="105:34"><name pos:start="105:27" pos:end="105:34"><name pos:start="105:27" pos:end="105:27">s</name><operator pos:start="105:28" pos:end="105:29">-&gt;</operator><name pos:start="105:30" pos:end="105:34">slirp</name></name></expr></argument>, <argument pos:start="105:37" pos:end="105:42"><expr pos:start="105:37" pos:end="105:42"><name pos:start="105:37" pos:end="105:42">is_udp</name></expr></argument>, <argument pos:start="105:45" pos:end="105:53"><expr pos:start="105:45" pos:end="105:53"><name pos:start="105:45" pos:end="105:53">host_addr</name></expr></argument>, <argument pos:start="105:56" pos:end="105:64"><expr pos:start="105:56" pos:end="105:64"><name pos:start="105:56" pos:end="105:64">host_port</name></expr></argument>, <argument pos:start="105:67" pos:end="105:76"><expr pos:start="105:67" pos:end="105:76"><name pos:start="105:67" pos:end="105:76">guest_addr</name></expr></argument>,

                          <argument pos:start="107:27" pos:end="107:36"><expr pos:start="107:27" pos:end="107:36"><name pos:start="107:27" pos:end="107:36">guest_port</name></expr></argument>)</argument_list></call> <operator pos:start="107:39" pos:end="107:39">&lt;</operator> <literal type="number" pos:start="107:41" pos:end="107:41">0</literal></expr>)</condition> <block pos:start="107:44" pos:end="115:5">{<block_content pos:start="109:9" pos:end="113:18">

        <expr_stmt pos:start="109:9" pos:end="111:30"><expr pos:start="109:9" pos:end="111:29"><call pos:start="109:9" pos:end="111:29"><name pos:start="109:9" pos:end="109:18">error_setg</name><argument_list pos:start="109:19" pos:end="111:29">(<argument pos:start="109:20" pos:end="109:23"><expr pos:start="109:20" pos:end="109:23"><name pos:start="109:20" pos:end="109:23">errp</name></expr></argument>, <argument pos:start="109:26" pos:end="109:69"><expr pos:start="109:26" pos:end="109:69"><literal type="string" pos:start="109:26" pos:end="109:69">"Could not set up host forwarding rule '%s'"</literal></expr></argument>,

                   <argument pos:start="111:20" pos:end="111:28"><expr pos:start="111:20" pos:end="111:28"><name pos:start="111:20" pos:end="111:28">redir_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:18">return <expr pos:start="113:16" pos:end="113:17"><operator pos:start="113:16" pos:end="113:16">-</operator><literal type="number" pos:start="113:17" pos:end="113:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="117:5" pos:end="117:13">return <expr pos:start="117:12" pos:end="117:12"><literal type="number" pos:start="117:12" pos:end="117:12">0</literal></expr>;</return>



 <label pos:start="121:2" pos:end="121:13"><name pos:start="121:2" pos:end="121:12">fail_syntax</name>:</label>

    <expr_stmt pos:start="123:5" pos:end="123:69"><expr pos:start="123:5" pos:end="123:68"><call pos:start="123:5" pos:end="123:68"><name pos:start="123:5" pos:end="123:14">error_setg</name><argument_list pos:start="123:15" pos:end="123:68">(<argument pos:start="123:16" pos:end="123:19"><expr pos:start="123:16" pos:end="123:19"><name pos:start="123:16" pos:end="123:19">errp</name></expr></argument>, <argument pos:start="123:22" pos:end="123:56"><expr pos:start="123:22" pos:end="123:56"><literal type="string" pos:start="123:22" pos:end="123:56">"Invalid host forwarding rule '%s'"</literal></expr></argument>, <argument pos:start="123:59" pos:end="123:67"><expr pos:start="123:59" pos:end="123:67"><name pos:start="123:59" pos:end="123:67">redir_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="125:5" pos:end="125:14">return <expr pos:start="125:12" pos:end="125:13"><operator pos:start="125:12" pos:end="125:12">-</operator><literal type="number" pos:start="125:13" pos:end="125:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
