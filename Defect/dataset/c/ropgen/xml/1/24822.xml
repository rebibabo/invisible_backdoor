<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24822.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:13">fork_end</name><parameter_list pos:start="1:14" pos:end="1:24">(<parameter pos:start="1:15" pos:end="1:23"><decl pos:start="1:15" pos:end="1:23"><type pos:start="1:15" pos:end="1:17"><name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:23">child</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:5">

    <expr_stmt pos:start="5:5" pos:end="5:25"><expr pos:start="5:5" pos:end="5:24"><call pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:17">mmap_fork_end</name><argument_list pos:start="5:18" pos:end="5:24">(<argument pos:start="5:19" pos:end="5:23"><expr pos:start="5:19" pos:end="5:23"><name pos:start="5:19" pos:end="5:23">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="7:5" pos:end="41:5"><if pos:start="7:5" pos:end="34:5">if <condition pos:start="7:8" pos:end="7:14">(<expr pos:start="7:9" pos:end="7:13"><name pos:start="7:9" pos:end="7:13">child</name></expr>)</condition> <block pos:start="7:16" pos:end="34:5">{<block_content pos:start="9:9" pos:end="29:35">

        <decl_stmt pos:start="9:9" pos:end="9:33"><decl pos:start="9:9" pos:end="9:21"><type pos:start="9:9" pos:end="9:18"><name pos:start="9:9" pos:end="9:16">CPUState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">cpu</name></decl>, <decl pos:start="9:24" pos:end="9:32"><type ref="prev" pos:start="9:9" pos:end="9:18"><modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:32">next_cpu</name></decl>;</decl_stmt>

        <comment type="block" pos:start="11:9" pos:end="13:60">/* Child processes created by fork() only have a single thread.

           Discard information about the parent threads.  */</comment>

        <macro pos:start="15:9" pos:end="15:39"><name pos:start="15:9" pos:end="15:24">CPU_FOREACH_SAFE</name><argument_list pos:start="15:25" pos:end="15:39">(<argument pos:start="15:26" pos:end="15:28">cpu</argument>, <argument pos:start="15:31" pos:end="15:38">next_cpu</argument>)</argument_list></macro> <block pos:start="15:41" pos:end="23:9">{<block_content pos:start="17:13" pos:end="21:13">

            <if_stmt pos:start="17:13" pos:end="21:13"><if pos:start="17:13" pos:end="21:13">if <condition pos:start="17:16" pos:end="17:34">(<expr pos:start="17:17" pos:end="17:33"><name pos:start="17:17" pos:end="17:19">cpu</name> <operator pos:start="17:21" pos:end="17:22">!=</operator> <name pos:start="17:24" pos:end="17:33">thread_cpu</name></expr>)</condition> <block pos:start="17:36" pos:end="21:13">{<block_content pos:start="19:17" pos:end="19:48">

                <expr_stmt pos:start="19:17" pos:end="19:48"><expr pos:start="19:17" pos:end="19:47"><call pos:start="19:17" pos:end="19:47"><name pos:start="19:17" pos:end="19:29">QTAILQ_REMOVE</name><argument_list pos:start="19:30" pos:end="19:47">(<argument pos:start="19:31" pos:end="19:35"><expr pos:start="19:31" pos:end="19:35"><operator pos:start="19:31" pos:end="19:31">&amp;</operator><name pos:start="19:32" pos:end="19:35">cpus</name></expr></argument>, <argument pos:start="19:38" pos:end="19:40"><expr pos:start="19:38" pos:end="19:40"><name pos:start="19:38" pos:end="19:40">cpu</name></expr></argument>, <argument pos:start="19:43" pos:end="19:46"><expr pos:start="19:43" pos:end="19:46"><name pos:start="19:43" pos:end="19:46">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="25:9" pos:end="25:41"><expr pos:start="25:9" pos:end="25:40"><call pos:start="25:9" pos:end="25:40"><name pos:start="25:9" pos:end="25:23">qemu_mutex_init</name><argument_list pos:start="25:24" pos:end="25:40">(<argument pos:start="25:25" pos:end="25:39"><expr pos:start="25:25" pos:end="25:39"><operator pos:start="25:25" pos:end="25:25">&amp;</operator><name pos:start="25:26" pos:end="25:39"><name pos:start="25:26" pos:end="25:31">tb_ctx</name><operator pos:start="25:32" pos:end="25:32">.</operator><name pos:start="25:33" pos:end="25:39">tb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:29"><expr pos:start="27:9" pos:end="27:28"><call pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:26">qemu_init_cpu_list</name><argument_list pos:start="27:27" pos:end="27:28">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:35"><expr pos:start="29:9" pos:end="29:34"><call pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:22">gdbserver_fork</name><argument_list pos:start="29:23" pos:end="29:34">(<argument pos:start="29:24" pos:end="29:33"><expr pos:start="29:24" pos:end="29:33"><name pos:start="29:24" pos:end="29:33">thread_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    </block_content>}</block></if> <else pos:start="34:7" pos:end="41:5">else <block pos:start="34:12" pos:end="41:5">{<block_content pos:start="36:9" pos:end="38:26">

        <expr_stmt pos:start="36:9" pos:end="36:43"><expr pos:start="36:9" pos:end="36:42"><call pos:start="36:9" pos:end="36:42"><name pos:start="36:9" pos:end="36:25">qemu_mutex_unlock</name><argument_list pos:start="36:26" pos:end="36:42">(<argument pos:start="36:27" pos:end="36:41"><expr pos:start="36:27" pos:end="36:41"><operator pos:start="36:27" pos:end="36:27">&amp;</operator><name pos:start="36:28" pos:end="36:41"><name pos:start="36:28" pos:end="36:33">tb_ctx</name><operator pos:start="36:34" pos:end="36:34">.</operator><name pos:start="36:35" pos:end="36:41">tb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="38:9" pos:end="38:26"><expr pos:start="38:9" pos:end="38:25"><call pos:start="38:9" pos:end="38:25"><name pos:start="38:9" pos:end="38:23">cpu_list_unlock</name><argument_list pos:start="38:24" pos:end="38:25">()</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></else></if_stmt>

</block_content>}</block></function></unit>
