<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7291.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">do_unassigned_access</name><parameter_list pos:start="1:26" pos:end="3:47">(<parameter pos:start="1:27" pos:end="1:49"><decl pos:start="1:27" pos:end="1:49"><type pos:start="1:27" pos:end="1:49"><name pos:start="1:27" pos:end="1:44">target_phys_addr_t</name></type> <name pos:start="1:46" pos:end="1:49">addr</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:63">is_write</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:76"><decl pos:start="1:66" pos:end="1:76"><type pos:start="1:66" pos:end="1:76"><name pos:start="1:66" pos:end="1:68">int</name></type> <name pos:start="1:70" pos:end="1:76">is_exec</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:36"><decl pos:start="3:27" pos:end="3:36"><type pos:start="3:27" pos:end="3:36"><name pos:start="3:27" pos:end="3:29">int</name></type> <name pos:start="3:31" pos:end="3:36">is_asi</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:46"><decl pos:start="3:39" pos:end="3:46"><type pos:start="3:39" pos:end="3:46"><name pos:start="3:39" pos:end="3:41">int</name></type> <name pos:start="3:43" pos:end="3:46">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="119:1">{<block_content pos:start="7:5" pos:end="117:20">

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:23">saved_env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">fault_type</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="15:24">/* XXX: hack to restore env in all cases, even if not called from

       generated code */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:20"><expr pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:13">saved_env</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <name pos:start="17:17" pos:end="17:19">env</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="22:0"><expr pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:7">env</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <name pos:start="19:11" pos:end="19:24">cpu_single_env</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="21:1" pos:end="21:23">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:23">DEBUG_UNASSIGNED</name></cpp:ifdef>

    <if_stmt pos:start="23:5" pos:end="44:0"><if pos:start="23:5" pos:end="31:60">if <condition pos:start="23:8" pos:end="23:15">(<expr pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:14">is_asi</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="31:60"><block_content pos:start="25:9" pos:end="31:60">

        <expr_stmt pos:start="25:9" pos:end="31:60"><expr pos:start="25:9" pos:end="31:59"><call pos:start="25:9" pos:end="31:59"><name pos:start="25:9" pos:end="25:14">printf</name><argument_list pos:start="25:15" pos:end="31:59">(<argument pos:start="25:16" pos:end="27:53"><expr pos:start="25:16" pos:end="27:53"><literal type="string" pos:start="25:16" pos:end="25:58">"Unassigned mem %s access of %d byte%s to "</literal> <name pos:start="25:60" pos:end="25:73">TARGET_FMT_plx</name>

               <literal type="string" pos:start="27:16" pos:end="27:34">" asi 0x%02x from "</literal> <name pos:start="27:36" pos:end="27:48">TARGET_FMT_lx</name> <literal type="string" pos:start="27:50" pos:end="27:53">"\n"</literal></expr></argument>,

               <argument pos:start="29:16" pos:end="29:61"><expr pos:start="29:16" pos:end="29:61"><ternary pos:start="29:16" pos:end="29:61"><condition pos:start="29:16" pos:end="29:24"><expr pos:start="29:16" pos:end="29:22"><name pos:start="29:16" pos:end="29:22">is_exec</name></expr> ?</condition><then pos:start="29:26" pos:end="29:31"> <expr pos:start="29:26" pos:end="29:31"><literal type="string" pos:start="29:26" pos:end="29:31">"exec"</literal></expr> </then><else pos:start="29:33" pos:end="29:61">: <expr pos:start="29:35" pos:end="29:61"><ternary pos:start="29:35" pos:end="29:61"><condition pos:start="29:35" pos:end="29:44"><expr pos:start="29:35" pos:end="29:42"><name pos:start="29:35" pos:end="29:42">is_write</name></expr> ?</condition><then pos:start="29:46" pos:end="29:52"> <expr pos:start="29:46" pos:end="29:52"><literal type="string" pos:start="29:46" pos:end="29:52">"write"</literal></expr> </then><else pos:start="29:54" pos:end="29:61">: <expr pos:start="29:56" pos:end="29:61"><literal type="string" pos:start="29:56" pos:end="29:61">"read"</literal></expr></else></ternary></expr></else></ternary></expr></argument>, <argument pos:start="29:64" pos:end="29:67"><expr pos:start="29:64" pos:end="29:67"><name pos:start="29:64" pos:end="29:67">size</name></expr></argument>,

               <argument pos:start="31:16" pos:end="31:35"><expr pos:start="31:16" pos:end="31:35"><ternary pos:start="31:16" pos:end="31:35"><condition pos:start="31:16" pos:end="31:26"><expr pos:start="31:16" pos:end="31:24"><name pos:start="31:16" pos:end="31:19">size</name> <operator pos:start="31:21" pos:end="31:22">==</operator> <literal type="number" pos:start="31:24" pos:end="31:24">1</literal></expr> ?</condition><then pos:start="31:28" pos:end="31:29"> <expr pos:start="31:28" pos:end="31:29"><literal type="string" pos:start="31:28" pos:end="31:29">""</literal></expr> </then><else pos:start="31:31" pos:end="31:35">: <expr pos:start="31:33" pos:end="31:35"><literal type="string" pos:start="31:33" pos:end="31:35">"s"</literal></expr></else></ternary></expr></argument>, <argument pos:start="31:38" pos:end="31:41"><expr pos:start="31:38" pos:end="31:41"><name pos:start="31:38" pos:end="31:41">addr</name></expr></argument>, <argument pos:start="31:44" pos:end="31:49"><expr pos:start="31:44" pos:end="31:49"><name pos:start="31:44" pos:end="31:49">is_asi</name></expr></argument>, <argument pos:start="31:52" pos:end="31:58"><expr pos:start="31:52" pos:end="31:58"><name pos:start="31:52" pos:end="31:58"><name pos:start="31:52" pos:end="31:54">env</name><operator pos:start="31:55" pos:end="31:56">-&gt;</operator><name pos:start="31:57" pos:end="31:58">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="33:5" pos:end="44:0">else<block type="pseudo" pos:start="35:9" pos:end="44:0"><block_content pos:start="35:9" pos:end="44:0">

        <expr_stmt pos:start="35:9" pos:end="44:0"><expr pos:start="35:9" pos:end="41:51"><call pos:start="35:9" pos:end="41:51"><name pos:start="35:9" pos:end="35:14">printf</name><argument_list pos:start="35:15" pos:end="41:51">(<argument pos:start="35:16" pos:end="37:42"><expr pos:start="35:16" pos:end="37:42"><literal type="string" pos:start="35:16" pos:end="35:58">"Unassigned mem %s access of %d byte%s to "</literal> <name pos:start="35:60" pos:end="35:73">TARGET_FMT_plx</name>

               <literal type="string" pos:start="37:16" pos:end="37:23">" from "</literal> <name pos:start="37:25" pos:end="37:37">TARGET_FMT_lx</name> <literal type="string" pos:start="37:39" pos:end="37:42">"\n"</literal></expr></argument>,

               <argument pos:start="39:16" pos:end="39:61"><expr pos:start="39:16" pos:end="39:61"><ternary pos:start="39:16" pos:end="39:61"><condition pos:start="39:16" pos:end="39:24"><expr pos:start="39:16" pos:end="39:22"><name pos:start="39:16" pos:end="39:22">is_exec</name></expr> ?</condition><then pos:start="39:26" pos:end="39:31"> <expr pos:start="39:26" pos:end="39:31"><literal type="string" pos:start="39:26" pos:end="39:31">"exec"</literal></expr> </then><else pos:start="39:33" pos:end="39:61">: <expr pos:start="39:35" pos:end="39:61"><ternary pos:start="39:35" pos:end="39:61"><condition pos:start="39:35" pos:end="39:44"><expr pos:start="39:35" pos:end="39:42"><name pos:start="39:35" pos:end="39:42">is_write</name></expr> ?</condition><then pos:start="39:46" pos:end="39:52"> <expr pos:start="39:46" pos:end="39:52"><literal type="string" pos:start="39:46" pos:end="39:52">"write"</literal></expr> </then><else pos:start="39:54" pos:end="39:61">: <expr pos:start="39:56" pos:end="39:61"><literal type="string" pos:start="39:56" pos:end="39:61">"read"</literal></expr></else></ternary></expr></else></ternary></expr></argument>, <argument pos:start="39:64" pos:end="39:67"><expr pos:start="39:64" pos:end="39:67"><name pos:start="39:64" pos:end="39:67">size</name></expr></argument>,

               <argument pos:start="41:16" pos:end="41:35"><expr pos:start="41:16" pos:end="41:35"><ternary pos:start="41:16" pos:end="41:35"><condition pos:start="41:16" pos:end="41:26"><expr pos:start="41:16" pos:end="41:24"><name pos:start="41:16" pos:end="41:19">size</name> <operator pos:start="41:21" pos:end="41:22">==</operator> <literal type="number" pos:start="41:24" pos:end="41:24">1</literal></expr> ?</condition><then pos:start="41:28" pos:end="41:29"> <expr pos:start="41:28" pos:end="41:29"><literal type="string" pos:start="41:28" pos:end="41:29">""</literal></expr> </then><else pos:start="41:31" pos:end="41:35">: <expr pos:start="41:33" pos:end="41:35"><literal type="string" pos:start="41:33" pos:end="41:35">"s"</literal></expr></else></ternary></expr></argument>, <argument pos:start="41:38" pos:end="41:41"><expr pos:start="41:38" pos:end="41:41"><name pos:start="41:38" pos:end="41:41">addr</name></expr></argument>, <argument pos:start="41:44" pos:end="41:50"><expr pos:start="41:44" pos:end="41:50"><name pos:start="41:44" pos:end="41:50"><name pos:start="41:44" pos:end="41:46">env</name><operator pos:start="41:47" pos:end="41:48">-&gt;</operator><name pos:start="41:49" pos:end="41:50">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="45:5" pos:end="45:55">/* Don't overwrite translation and access faults */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:47"><expr pos:start="47:5" pos:end="47:46"><name pos:start="47:5" pos:end="47:14">fault_type</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <operator pos:start="47:18" pos:end="47:18">(</operator><name pos:start="47:19" pos:end="47:33"><name pos:start="47:19" pos:end="47:21">env</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:30">mmuregs</name><index pos:start="47:31" pos:end="47:33">[<expr pos:start="47:32" pos:end="47:32"><literal type="number" pos:start="47:32" pos:end="47:32">3</literal></expr>]</index></name> <operator pos:start="47:35" pos:end="47:35">&amp;</operator> <literal type="number" pos:start="47:37" pos:end="47:40">0x1c</literal><operator pos:start="47:41" pos:end="47:41">)</operator> <operator pos:start="47:43" pos:end="47:44">&gt;&gt;</operator> <literal type="number" pos:start="47:46" pos:end="47:46">2</literal></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="79:5"><if pos:start="49:5" pos:end="79:5">if <condition pos:start="49:8" pos:end="49:46">(<expr pos:start="49:9" pos:end="49:45"><operator pos:start="49:9" pos:end="49:9">(</operator><name pos:start="49:10" pos:end="49:19">fault_type</name> <operator pos:start="49:21" pos:end="49:21">&gt;</operator> <literal type="number" pos:start="49:23" pos:end="49:23">4</literal><operator pos:start="49:24" pos:end="49:24">)</operator> <operator pos:start="49:26" pos:end="49:27">||</operator> <operator pos:start="49:29" pos:end="49:29">(</operator><name pos:start="49:30" pos:end="49:39">fault_type</name> <operator pos:start="49:41" pos:end="49:42">==</operator> <literal type="number" pos:start="49:44" pos:end="49:44">0</literal><operator pos:start="49:45" pos:end="49:45">)</operator></expr>)</condition> <block pos:start="49:48" pos:end="79:5">{<block_content pos:start="51:9" pos:end="77:9">

        <expr_stmt pos:start="51:9" pos:end="51:28"><expr pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:11">env</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:20">mmuregs</name><index pos:start="51:21" pos:end="51:23">[<expr pos:start="51:22" pos:end="51:22"><literal type="number" pos:start="51:22" pos:end="51:22">3</literal></expr>]</index></name> <operator pos:start="51:25" pos:end="51:25">=</operator> <literal type="number" pos:start="51:27" pos:end="51:27">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="51:30" pos:end="51:56">/* Fault status register */</comment>

        <if_stmt pos:start="53:9" pos:end="55:39"><if pos:start="53:9" pos:end="55:39">if <condition pos:start="53:12" pos:end="53:19">(<expr pos:start="53:13" pos:end="53:18"><name pos:start="53:13" pos:end="53:18">is_asi</name></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:39"><block_content pos:start="55:13" pos:end="55:39">

            <expr_stmt pos:start="55:13" pos:end="55:39"><expr pos:start="55:13" pos:end="55:38"><name pos:start="55:13" pos:end="55:27"><name pos:start="55:13" pos:end="55:15">env</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:24">mmuregs</name><index pos:start="55:25" pos:end="55:27">[<expr pos:start="55:26" pos:end="55:26"><literal type="number" pos:start="55:26" pos:end="55:26">3</literal></expr>]</index></name> <operator pos:start="55:29" pos:end="55:30">|=</operator> <literal type="number" pos:start="55:32" pos:end="55:32">1</literal> <operator pos:start="55:34" pos:end="55:35">&lt;&lt;</operator> <literal type="number" pos:start="55:37" pos:end="55:38">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="59:38"><if pos:start="57:9" pos:end="59:38">if <condition pos:start="57:12" pos:end="57:22">(<expr pos:start="57:13" pos:end="57:21"><name pos:start="57:13" pos:end="57:21"><name pos:start="57:13" pos:end="57:15">env</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:21">psrs</name></name></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:38"><block_content pos:start="59:13" pos:end="59:38">

            <expr_stmt pos:start="59:13" pos:end="59:38"><expr pos:start="59:13" pos:end="59:37"><name pos:start="59:13" pos:end="59:27"><name pos:start="59:13" pos:end="59:15">env</name><operator pos:start="59:16" pos:end="59:17">-&gt;</operator><name pos:start="59:18" pos:end="59:24">mmuregs</name><index pos:start="59:25" pos:end="59:27">[<expr pos:start="59:26" pos:end="59:26"><literal type="number" pos:start="59:26" pos:end="59:26">3</literal></expr>]</index></name> <operator pos:start="59:29" pos:end="59:30">|=</operator> <literal type="number" pos:start="59:32" pos:end="59:32">1</literal> <operator pos:start="59:34" pos:end="59:35">&lt;&lt;</operator> <literal type="number" pos:start="59:37" pos:end="59:37">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="61:9" pos:end="63:38"><if pos:start="61:9" pos:end="63:38">if <condition pos:start="61:12" pos:end="61:20">(<expr pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:19">is_exec</name></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:38"><block_content pos:start="63:13" pos:end="63:38">

            <expr_stmt pos:start="63:13" pos:end="63:38"><expr pos:start="63:13" pos:end="63:37"><name pos:start="63:13" pos:end="63:27"><name pos:start="63:13" pos:end="63:15">env</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:24">mmuregs</name><index pos:start="63:25" pos:end="63:27">[<expr pos:start="63:26" pos:end="63:26"><literal type="number" pos:start="63:26" pos:end="63:26">3</literal></expr>]</index></name> <operator pos:start="63:29" pos:end="63:30">|=</operator> <literal type="number" pos:start="63:32" pos:end="63:32">1</literal> <operator pos:start="63:34" pos:end="63:35">&lt;&lt;</operator> <literal type="number" pos:start="63:37" pos:end="63:37">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="65:9" pos:end="67:38"><if pos:start="65:9" pos:end="67:38">if <condition pos:start="65:12" pos:end="65:21">(<expr pos:start="65:13" pos:end="65:20"><name pos:start="65:13" pos:end="65:20">is_write</name></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:38"><block_content pos:start="67:13" pos:end="67:38">

            <expr_stmt pos:start="67:13" pos:end="67:38"><expr pos:start="67:13" pos:end="67:37"><name pos:start="67:13" pos:end="67:27"><name pos:start="67:13" pos:end="67:15">env</name><operator pos:start="67:16" pos:end="67:17">-&gt;</operator><name pos:start="67:18" pos:end="67:24">mmuregs</name><index pos:start="67:25" pos:end="67:27">[<expr pos:start="67:26" pos:end="67:26"><literal type="number" pos:start="67:26" pos:end="67:26">3</literal></expr>]</index></name> <operator pos:start="67:29" pos:end="67:30">|=</operator> <literal type="number" pos:start="67:32" pos:end="67:32">1</literal> <operator pos:start="67:34" pos:end="67:35">&lt;&lt;</operator> <literal type="number" pos:start="67:37" pos:end="67:37">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:40"><expr pos:start="69:9" pos:end="69:39"><name pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:11">env</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:20">mmuregs</name><index pos:start="69:21" pos:end="69:23">[<expr pos:start="69:22" pos:end="69:22"><literal type="number" pos:start="69:22" pos:end="69:22">3</literal></expr>]</index></name> <operator pos:start="69:25" pos:end="69:26">|=</operator> <operator pos:start="69:28" pos:end="69:28">(</operator><literal type="number" pos:start="69:29" pos:end="69:29">5</literal> <operator pos:start="69:31" pos:end="69:32">&lt;&lt;</operator> <literal type="number" pos:start="69:34" pos:end="69:34">2</literal><operator pos:start="69:35" pos:end="69:35">)</operator> <operator pos:start="69:37" pos:end="69:37">|</operator> <literal type="number" pos:start="69:39" pos:end="69:39">2</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="71:9" pos:end="71:80">/* SuperSPARC will never place instruction fault addresses in the FAR */</comment>

        <if_stmt pos:start="73:9" pos:end="77:9"><if pos:start="73:9" pos:end="77:9">if <condition pos:start="73:12" pos:end="73:21">(<expr pos:start="73:13" pos:end="73:20"><operator pos:start="73:13" pos:end="73:13">!</operator><name pos:start="73:14" pos:end="73:20">is_exec</name></expr>)</condition> <block pos:start="73:23" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:35">

            <expr_stmt pos:start="75:13" pos:end="75:35"><expr pos:start="75:13" pos:end="75:34"><name pos:start="75:13" pos:end="75:27"><name pos:start="75:13" pos:end="75:15">env</name><operator pos:start="75:16" pos:end="75:17">-&gt;</operator><name pos:start="75:18" pos:end="75:24">mmuregs</name><index pos:start="75:25" pos:end="75:27">[<expr pos:start="75:26" pos:end="75:26"><literal type="number" pos:start="75:26" pos:end="75:26">4</literal></expr>]</index></name> <operator pos:start="75:29" pos:end="75:29">=</operator> <name pos:start="75:31" pos:end="75:34">addr</name></expr>;</expr_stmt> <comment type="block" pos:start="75:37" pos:end="75:64">/* Fault address register */</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="81:5" pos:end="81:70">/* overflow (same type fault was not read before another fault) */</comment>

    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:54">(<expr pos:start="83:9" pos:end="83:53"><name pos:start="83:9" pos:end="83:18">fault_type</name> <operator pos:start="83:20" pos:end="83:21">==</operator> <operator pos:start="83:23" pos:end="83:23">(</operator><operator pos:start="83:24" pos:end="83:24">(</operator><name pos:start="83:25" pos:end="83:39"><name pos:start="83:25" pos:end="83:27">env</name><operator pos:start="83:28" pos:end="83:29">-&gt;</operator><name pos:start="83:30" pos:end="83:36">mmuregs</name><index pos:start="83:37" pos:end="83:39">[<expr pos:start="83:38" pos:end="83:38"><literal type="number" pos:start="83:38" pos:end="83:38">3</literal></expr>]</index></name> <operator pos:start="83:41" pos:end="83:41">&amp;</operator> <literal type="number" pos:start="83:43" pos:end="83:46">0x1c</literal><operator pos:start="83:47" pos:end="83:47">)</operator><operator pos:start="83:48" pos:end="83:48">)</operator> <operator pos:start="83:50" pos:end="83:51">&gt;&gt;</operator> <literal type="number" pos:start="83:53" pos:end="83:53">2</literal></expr>)</condition> <block pos:start="83:56" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:29">

        <expr_stmt pos:start="85:9" pos:end="85:29"><expr pos:start="85:9" pos:end="85:28"><name pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:11">env</name><operator pos:start="85:12" pos:end="85:13">-&gt;</operator><name pos:start="85:14" pos:end="85:20">mmuregs</name><index pos:start="85:21" pos:end="85:23">[<expr pos:start="85:22" pos:end="85:22"><literal type="number" pos:start="85:22" pos:end="85:22">3</literal></expr>]</index></name> <operator pos:start="85:25" pos:end="85:26">|=</operator> <literal type="number" pos:start="85:28" pos:end="85:28">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="101:5"><if pos:start="91:5" pos:end="101:5">if <condition pos:start="91:8" pos:end="91:65">(<expr pos:start="91:9" pos:end="91:64"><operator pos:start="91:9" pos:end="91:9">(</operator><name pos:start="91:10" pos:end="91:24"><name pos:start="91:10" pos:end="91:12">env</name><operator pos:start="91:13" pos:end="91:14">-&gt;</operator><name pos:start="91:15" pos:end="91:21">mmuregs</name><index pos:start="91:22" pos:end="91:24">[<expr pos:start="91:23" pos:end="91:23"><literal type="number" pos:start="91:23" pos:end="91:23">0</literal></expr>]</index></name> <operator pos:start="91:26" pos:end="91:26">&amp;</operator> <name pos:start="91:28" pos:end="91:32">MMU_E</name><operator pos:start="91:33" pos:end="91:33">)</operator> <operator pos:start="91:35" pos:end="91:36">&amp;&amp;</operator> <operator pos:start="91:38" pos:end="91:38">!</operator><operator pos:start="91:39" pos:end="91:39">(</operator><name pos:start="91:40" pos:end="91:54"><name pos:start="91:40" pos:end="91:42">env</name><operator pos:start="91:43" pos:end="91:44">-&gt;</operator><name pos:start="91:45" pos:end="91:51">mmuregs</name><index pos:start="91:52" pos:end="91:54">[<expr pos:start="91:53" pos:end="91:53"><literal type="number" pos:start="91:53" pos:end="91:53">0</literal></expr>]</index></name> <operator pos:start="91:56" pos:end="91:56">&amp;</operator> <name pos:start="91:58" pos:end="91:63">MMU_NF</name><operator pos:start="91:64" pos:end="91:64">)</operator></expr>)</condition> <block pos:start="91:67" pos:end="101:5">{<block_content pos:start="93:9" pos:end="99:44">

        <if_stmt pos:start="93:9" pos:end="99:44"><if pos:start="93:9" pos:end="95:44">if <condition pos:start="93:12" pos:end="93:20">(<expr pos:start="93:13" pos:end="93:19"><name pos:start="93:13" pos:end="93:19">is_exec</name></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:44"><block_content pos:start="95:13" pos:end="95:44">

            <expr_stmt pos:start="95:13" pos:end="95:44"><expr pos:start="95:13" pos:end="95:43"><call pos:start="95:13" pos:end="95:43"><name pos:start="95:13" pos:end="95:27">raise_exception</name><argument_list pos:start="95:28" pos:end="95:43">(<argument pos:start="95:29" pos:end="95:42"><expr pos:start="95:29" pos:end="95:42"><name pos:start="95:29" pos:end="95:42">TT_CODE_ACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="97:9" pos:end="99:44">else<block type="pseudo" pos:start="99:13" pos:end="99:44"><block_content pos:start="99:13" pos:end="99:44">

            <expr_stmt pos:start="99:13" pos:end="99:44"><expr pos:start="99:13" pos:end="99:43"><call pos:start="99:13" pos:end="99:43"><name pos:start="99:13" pos:end="99:27">raise_exception</name><argument_list pos:start="99:28" pos:end="99:43">(<argument pos:start="99:29" pos:end="99:42"><expr pos:start="99:29" pos:end="99:42"><name pos:start="99:29" pos:end="99:42">TT_DATA_ACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="105:5" pos:end="107:64">/* flush neverland mappings created during no-fault mode,

       so the sequential MMU faults report proper fault types */</comment>

    <if_stmt pos:start="109:5" pos:end="113:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:33">(<expr pos:start="109:9" pos:end="109:32"><name pos:start="109:9" pos:end="109:23"><name pos:start="109:9" pos:end="109:11">env</name><operator pos:start="109:12" pos:end="109:13">-&gt;</operator><name pos:start="109:14" pos:end="109:20">mmuregs</name><index pos:start="109:21" pos:end="109:23">[<expr pos:start="109:22" pos:end="109:22"><literal type="number" pos:start="109:22" pos:end="109:22">0</literal></expr>]</index></name> <operator pos:start="109:25" pos:end="109:25">&amp;</operator> <name pos:start="109:27" pos:end="109:32">MMU_NF</name></expr>)</condition> <block pos:start="109:35" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:26">

        <expr_stmt pos:start="111:9" pos:end="111:26"><expr pos:start="111:9" pos:end="111:25"><call pos:start="111:9" pos:end="111:25"><name pos:start="111:9" pos:end="111:17">tlb_flush</name><argument_list pos:start="111:18" pos:end="111:25">(<argument pos:start="111:19" pos:end="111:21"><expr pos:start="111:19" pos:end="111:21"><name pos:start="111:19" pos:end="111:21">env</name></expr></argument>, <argument pos:start="111:24" pos:end="111:24"><expr pos:start="111:24" pos:end="111:24"><literal type="number" pos:start="111:24" pos:end="111:24">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:20"><expr pos:start="117:5" pos:end="117:19"><name pos:start="117:5" pos:end="117:7">env</name> <operator pos:start="117:9" pos:end="117:9">=</operator> <name pos:start="117:11" pos:end="117:19">saved_env</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
