<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25039.c" pos:tabs="8"><function pos:start="1:1" pos:end="104:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">rtas_start_cpu</name><parameter_list pos:start="1:27" pos:end="7:60">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:43"><name pos:start="1:28" pos:end="1:37">PowerPCCPU</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">cpu_</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:69"><decl pos:start="1:46" pos:end="1:69"><type pos:start="1:46" pos:end="1:69"><name pos:start="1:46" pos:end="1:62">sPAPRMachineState</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:69">spapr</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:41"><decl pos:start="3:28" pos:end="3:41"><type pos:start="3:28" pos:end="3:41"><name pos:start="3:28" pos:end="3:35">uint32_t</name></type> <name pos:start="3:37" pos:end="3:41">token</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:57"><decl pos:start="3:44" pos:end="3:57"><type pos:start="3:44" pos:end="3:57"><name pos:start="3:44" pos:end="3:51">uint32_t</name></type> <name pos:start="3:53" pos:end="3:57">nargs</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:44"><decl pos:start="5:28" pos:end="5:44"><type pos:start="5:28" pos:end="5:44"><name pos:start="5:28" pos:end="5:39">target_ulong</name></type> <name pos:start="5:41" pos:end="5:44">args</name></decl></parameter>,

                           <parameter pos:start="7:28" pos:end="7:40"><decl pos:start="7:28" pos:end="7:40"><type pos:start="7:28" pos:end="7:40"><name pos:start="7:28" pos:end="7:35">uint32_t</name></type> <name pos:start="7:37" pos:end="7:40">nret</name></decl></parameter>, <parameter pos:start="7:43" pos:end="7:59"><decl pos:start="7:43" pos:end="7:59"><type pos:start="7:43" pos:end="7:59"><name pos:start="7:43" pos:end="7:54">target_ulong</name></type> <name pos:start="7:56" pos:end="7:59">rets</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="104:1">{<block_content pos:start="11:5" pos:end="102:43">

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">target_ulong</name></type> <name pos:start="11:18" pos:end="11:19">id</name></decl>, <decl pos:start="11:22" pos:end="11:26"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:22" pos:end="11:26">start</name></decl>, <decl pos:start="11:29" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:29" pos:end="11:30">r3</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">PowerPCCPU</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:19">cpu</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:32">(<expr pos:start="17:9" pos:end="17:31"><name pos:start="17:9" pos:end="17:13">nargs</name> <operator pos:start="17:15" pos:end="17:16">!=</operator> <literal type="number" pos:start="17:18" pos:end="17:18">3</literal> <operator pos:start="17:20" pos:end="17:21">||</operator> <name pos:start="17:23" pos:end="17:26">nret</name> <operator pos:start="17:28" pos:end="17:29">!=</operator> <literal type="number" pos:start="17:31" pos:end="17:31">1</literal></expr>)</condition> <block pos:start="17:34" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:47"><expr pos:start="19:9" pos:end="19:46"><call pos:start="19:9" pos:end="19:46"><name pos:start="19:9" pos:end="19:15">rtas_st</name><argument_list pos:start="19:16" pos:end="19:46">(<argument pos:start="19:17" pos:end="19:20"><expr pos:start="19:17" pos:end="19:20"><name pos:start="19:17" pos:end="19:20">rets</name></expr></argument>, <argument pos:start="19:23" pos:end="19:23"><expr pos:start="19:23" pos:end="19:23"><literal type="number" pos:start="19:23" pos:end="19:23">0</literal></expr></argument>, <argument pos:start="19:26" pos:end="19:45"><expr pos:start="19:26" pos:end="19:45"><name pos:start="19:26" pos:end="19:45">RTAS_OUT_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:26"><expr pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:6">id</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <call pos:start="27:10" pos:end="27:25"><name pos:start="27:10" pos:end="27:16">rtas_ld</name><argument_list pos:start="27:17" pos:end="27:25">(<argument pos:start="27:18" pos:end="27:21"><expr pos:start="27:18" pos:end="27:21"><name pos:start="27:18" pos:end="27:21">args</name></expr></argument>, <argument pos:start="27:24" pos:end="27:24"><expr pos:start="27:24" pos:end="27:24"><literal type="number" pos:start="27:24" pos:end="27:24">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:29"><expr pos:start="29:5" pos:end="29:28"><name pos:start="29:5" pos:end="29:9">start</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <call pos:start="29:13" pos:end="29:28"><name pos:start="29:13" pos:end="29:19">rtas_ld</name><argument_list pos:start="29:20" pos:end="29:28">(<argument pos:start="29:21" pos:end="29:24"><expr pos:start="29:21" pos:end="29:24"><name pos:start="29:21" pos:end="29:24">args</name></expr></argument>, <argument pos:start="29:27" pos:end="29:27"><expr pos:start="29:27" pos:end="29:27"><literal type="number" pos:start="29:27" pos:end="29:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:26"><expr pos:start="31:5" pos:end="31:25"><name pos:start="31:5" pos:end="31:6">r3</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <call pos:start="31:10" pos:end="31:25"><name pos:start="31:10" pos:end="31:16">rtas_ld</name><argument_list pos:start="31:17" pos:end="31:25">(<argument pos:start="31:18" pos:end="31:21"><expr pos:start="31:18" pos:end="31:21"><name pos:start="31:18" pos:end="31:21">args</name></expr></argument>, <argument pos:start="31:24" pos:end="31:24"><expr pos:start="31:24" pos:end="31:24"><literal type="number" pos:start="31:24" pos:end="31:24">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:29"><expr pos:start="35:5" pos:end="35:28"><name pos:start="35:5" pos:end="35:7">cpu</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:28"><name pos:start="35:11" pos:end="35:24">spapr_find_cpu</name><argument_list pos:start="35:25" pos:end="35:28">(<argument pos:start="35:26" pos:end="35:27"><expr pos:start="35:26" pos:end="35:27"><name pos:start="35:26" pos:end="35:27">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="96:5"><if pos:start="37:5" pos:end="96:5">if <condition pos:start="37:8" pos:end="37:20">(<expr pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:11">cpu</name> <operator pos:start="37:13" pos:end="37:14">!=</operator> <name pos:start="37:16" pos:end="37:19">NULL</name></expr>)</condition> <block pos:start="37:22" pos:end="96:5">{<block_content pos:start="39:9" pos:end="94:15">

        <decl_stmt pos:start="39:9" pos:end="39:32"><decl pos:start="39:9" pos:end="39:31"><type pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:16">CPUState</name> <modifier pos:start="39:18" pos:end="39:18">*</modifier></type><name pos:start="39:19" pos:end="39:20">cs</name> <init pos:start="39:22" pos:end="39:31">= <expr pos:start="39:24" pos:end="39:31"><call pos:start="39:24" pos:end="39:31"><name pos:start="39:24" pos:end="39:26">CPU</name><argument_list pos:start="39:27" pos:end="39:31">(<argument pos:start="39:28" pos:end="39:30"><expr pos:start="39:28" pos:end="39:30"><name pos:start="39:28" pos:end="39:30">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:37"><decl pos:start="41:9" pos:end="41:36"><type pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:19">CPUPPCState</name> <modifier pos:start="41:21" pos:end="41:21">*</modifier></type><name pos:start="41:22" pos:end="41:24">env</name> <init pos:start="41:26" pos:end="41:36">= <expr pos:start="41:28" pos:end="41:36"><operator pos:start="41:28" pos:end="41:28">&amp;</operator><name pos:start="41:29" pos:end="41:36"><name pos:start="41:29" pos:end="41:31">cpu</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:36">env</name></name></expr></init></decl>;</decl_stmt>




        <if_stmt pos:start="46:9" pos:end="52:9"><if pos:start="46:9" pos:end="52:9">if <condition pos:start="46:12" pos:end="46:24">(<expr pos:start="46:13" pos:end="46:23"><operator pos:start="46:13" pos:end="46:13">!</operator><name pos:start="46:14" pos:end="46:23"><name pos:start="46:14" pos:end="46:15">cs</name><operator pos:start="46:16" pos:end="46:17">-&gt;</operator><name pos:start="46:18" pos:end="46:23">halted</name></name></expr>)</condition> <block pos:start="46:26" pos:end="52:9">{<block_content pos:start="48:13" pos:end="50:19">

            <expr_stmt pos:start="48:13" pos:end="48:48"><expr pos:start="48:13" pos:end="48:47"><call pos:start="48:13" pos:end="48:47"><name pos:start="48:13" pos:end="48:19">rtas_st</name><argument_list pos:start="48:20" pos:end="48:47">(<argument pos:start="48:21" pos:end="48:24"><expr pos:start="48:21" pos:end="48:24"><name pos:start="48:21" pos:end="48:24">rets</name></expr></argument>, <argument pos:start="48:27" pos:end="48:27"><expr pos:start="48:27" pos:end="48:27"><literal type="number" pos:start="48:27" pos:end="48:27">0</literal></expr></argument>, <argument pos:start="48:30" pos:end="48:46"><expr pos:start="48:30" pos:end="48:46"><name pos:start="48:30" pos:end="48:46">RTAS_OUT_HW_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="50:13" pos:end="50:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="56:9" pos:end="60:28">/* This will make sure qemu state is up to date with kvm, and

         * mark it dirty so our changes get flushed back before the

         * new cpu enters */</comment>

        <expr_stmt pos:start="62:9" pos:end="62:38"><expr pos:start="62:9" pos:end="62:37"><call pos:start="62:9" pos:end="62:37"><name pos:start="62:9" pos:end="62:33">kvm_cpu_synchronize_state</name><argument_list pos:start="62:34" pos:end="62:37">(<argument pos:start="62:35" pos:end="62:36"><expr pos:start="62:35" pos:end="62:36"><name pos:start="62:35" pos:end="62:36">cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="66:9" pos:end="66:55"><expr pos:start="66:9" pos:end="66:54"><name pos:start="66:9" pos:end="66:16"><name pos:start="66:9" pos:end="66:11">env</name><operator pos:start="66:12" pos:end="66:13">-&gt;</operator><name pos:start="66:14" pos:end="66:16">msr</name></name> <operator pos:start="66:18" pos:end="66:18">=</operator> <operator pos:start="66:20" pos:end="66:20">(</operator><literal type="number" pos:start="66:21" pos:end="66:24">1ULL</literal> <operator pos:start="66:26" pos:end="66:27">&lt;&lt;</operator> <name pos:start="66:29" pos:end="66:34">MSR_SF</name><operator pos:start="66:35" pos:end="66:35">)</operator> <operator pos:start="66:37" pos:end="66:37">|</operator> <operator pos:start="66:39" pos:end="66:39">(</operator><literal type="number" pos:start="66:40" pos:end="66:43">1ULL</literal> <operator pos:start="66:45" pos:end="66:46">&lt;&lt;</operator> <name pos:start="66:48" pos:end="66:53">MSR_ME</name><operator pos:start="66:54" pos:end="66:54">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="70:9" pos:end="70:76">/* Enable Power-saving mode Exit Cause exceptions for the new CPU */</comment>

        <expr_stmt pos:start="72:9" pos:end="72:43"><expr pos:start="72:9" pos:end="72:42"><name pos:start="72:9" pos:end="72:26"><name pos:start="72:9" pos:end="72:11">env</name><operator pos:start="72:12" pos:end="72:13">-&gt;</operator><name pos:start="72:14" pos:end="72:16">spr</name><index pos:start="72:17" pos:end="72:26">[<expr pos:start="72:18" pos:end="72:25"><name pos:start="72:18" pos:end="72:25">SPR_LPCR</name></expr>]</index></name> <operator pos:start="72:28" pos:end="72:29">|=</operator> <name pos:start="72:31" pos:end="72:42"><name pos:start="72:31" pos:end="72:33">pcc</name><operator pos:start="72:34" pos:end="72:35">-&gt;</operator><name pos:start="72:36" pos:end="72:42">lpcr_pm</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="76:9" pos:end="76:25"><expr pos:start="76:9" pos:end="76:24"><name pos:start="76:9" pos:end="76:16"><name pos:start="76:9" pos:end="76:11">env</name><operator pos:start="76:12" pos:end="76:13">-&gt;</operator><name pos:start="76:14" pos:end="76:16">nip</name></name> <operator pos:start="76:18" pos:end="76:18">=</operator> <name pos:start="76:20" pos:end="76:24">start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="78:9" pos:end="78:25"><expr pos:start="78:9" pos:end="78:24"><name pos:start="78:9" pos:end="78:19"><name pos:start="78:9" pos:end="78:11">env</name><operator pos:start="78:12" pos:end="78:13">-&gt;</operator><name pos:start="78:14" pos:end="78:16">gpr</name><index pos:start="78:17" pos:end="78:19">[<expr pos:start="78:18" pos:end="78:18"><literal type="number" pos:start="78:18" pos:end="78:18">3</literal></expr>]</index></name> <operator pos:start="78:21" pos:end="78:21">=</operator> <name pos:start="78:23" pos:end="78:24">r3</name></expr>;</expr_stmt>

        <expr_stmt pos:start="80:9" pos:end="80:23"><expr pos:start="80:9" pos:end="80:22"><name pos:start="80:9" pos:end="80:18"><name pos:start="80:9" pos:end="80:10">cs</name><operator pos:start="80:11" pos:end="80:12">-&gt;</operator><name pos:start="80:13" pos:end="80:18">halted</name></name> <operator pos:start="80:20" pos:end="80:20">=</operator> <literal type="number" pos:start="80:22" pos:end="80:22">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="82:9" pos:end="82:38"><expr pos:start="82:9" pos:end="82:37"><call pos:start="82:9" pos:end="82:37"><name pos:start="82:9" pos:end="82:32">spapr_cpu_set_endianness</name><argument_list pos:start="82:33" pos:end="82:37">(<argument pos:start="82:34" pos:end="82:36"><expr pos:start="82:34" pos:end="82:36"><name pos:start="82:34" pos:end="82:36">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="84:9" pos:end="84:40"><expr pos:start="84:9" pos:end="84:39"><call pos:start="84:9" pos:end="84:39"><name pos:start="84:9" pos:end="84:34">spapr_cpu_update_tb_offset</name><argument_list pos:start="84:35" pos:end="84:39">(<argument pos:start="84:36" pos:end="84:38"><expr pos:start="84:36" pos:end="84:38"><name pos:start="84:36" pos:end="84:38">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="88:9" pos:end="88:26"><expr pos:start="88:9" pos:end="88:25"><call pos:start="88:9" pos:end="88:25"><name pos:start="88:9" pos:end="88:21">qemu_cpu_kick</name><argument_list pos:start="88:22" pos:end="88:25">(<argument pos:start="88:23" pos:end="88:24"><expr pos:start="88:23" pos:end="88:24"><name pos:start="88:23" pos:end="88:24">cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="92:9" pos:end="92:43"><expr pos:start="92:9" pos:end="92:42"><call pos:start="92:9" pos:end="92:42"><name pos:start="92:9" pos:end="92:15">rtas_st</name><argument_list pos:start="92:16" pos:end="92:42">(<argument pos:start="92:17" pos:end="92:20"><expr pos:start="92:17" pos:end="92:20"><name pos:start="92:17" pos:end="92:20">rets</name></expr></argument>, <argument pos:start="92:23" pos:end="92:23"><expr pos:start="92:23" pos:end="92:23"><literal type="number" pos:start="92:23" pos:end="92:23">0</literal></expr></argument>, <argument pos:start="92:26" pos:end="92:41"><expr pos:start="92:26" pos:end="92:41"><name pos:start="92:26" pos:end="92:41">RTAS_OUT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="94:9" pos:end="94:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="100:5" pos:end="100:36">/* Didn't find a matching cpu */</comment>

    <expr_stmt pos:start="102:5" pos:end="102:43"><expr pos:start="102:5" pos:end="102:42"><call pos:start="102:5" pos:end="102:42"><name pos:start="102:5" pos:end="102:11">rtas_st</name><argument_list pos:start="102:12" pos:end="102:42">(<argument pos:start="102:13" pos:end="102:16"><expr pos:start="102:13" pos:end="102:16"><name pos:start="102:13" pos:end="102:16">rets</name></expr></argument>, <argument pos:start="102:19" pos:end="102:19"><expr pos:start="102:19" pos:end="102:19"><literal type="number" pos:start="102:19" pos:end="102:19">0</literal></expr></argument>, <argument pos:start="102:22" pos:end="102:41"><expr pos:start="102:22" pos:end="102:41"><name pos:start="102:22" pos:end="102:41">RTAS_OUT_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
