<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21338.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:42">rdma_accept_incoming_migration</name><parameter_list pos:start="1:43" pos:end="1:56">(<parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:49"><name pos:start="1:44" pos:end="1:47">void</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:55">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="53:1">{<block_content pos:start="5:5" pos:end="51:34">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">RDMAContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:21">rdma</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">QEMUFile</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:15">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:49"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>, <decl pos:start="11:30" pos:end="11:48"><type ref="prev" pos:start="11:5" pos:end="11:11"><modifier pos:start="11:30" pos:end="11:30">*</modifier><modifier pos:start="11:31" pos:end="11:31">*</modifier></type><name pos:start="11:32" pos:end="11:35">errp</name> <init pos:start="11:37" pos:end="11:48">= <expr pos:start="11:39" pos:end="11:48"><operator pos:start="11:39" pos:end="11:39">&amp;</operator><name pos:start="11:40" pos:end="11:48">local_err</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:46"><expr pos:start="15:5" pos:end="15:45"><call pos:start="15:5" pos:end="15:45"><name pos:start="15:5" pos:end="15:11">DPRINTF</name><argument_list pos:start="15:12" pos:end="15:45">(<argument pos:start="15:13" pos:end="15:44"><expr pos:start="15:13" pos:end="15:44"><literal type="string" pos:start="15:13" pos:end="15:44">"Accepting rdma connection...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:33"><expr pos:start="17:5" pos:end="17:32"><name pos:start="17:5" pos:end="17:7">ret</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:32"><name pos:start="17:11" pos:end="17:26">qemu_rdma_accept</name><argument_list pos:start="17:27" pos:end="17:32">(<argument pos:start="17:28" pos:end="17:31"><expr pos:start="17:28" pos:end="17:31"><name pos:start="17:28" pos:end="17:31">rdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:12">(<expr pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">ret</name></expr>)</condition> <block pos:start="21:14" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:15">

        <expr_stmt pos:start="23:9" pos:end="23:61"><expr pos:start="23:9" pos:end="23:60"><call pos:start="23:9" pos:end="23:60"><name pos:start="23:9" pos:end="23:13">ERROR</name><argument_list pos:start="23:14" pos:end="23:60">(<argument pos:start="23:15" pos:end="23:18"><expr pos:start="23:15" pos:end="23:18"><name pos:start="23:15" pos:end="23:18">errp</name></expr></argument>, <argument pos:start="23:21" pos:end="23:59"><expr pos:start="23:21" pos:end="23:59"><literal type="string" pos:start="23:21" pos:end="23:59">"RDMA Migration initialization failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:36"><expr pos:start="31:5" pos:end="31:35"><call pos:start="31:5" pos:end="31:35"><name pos:start="31:5" pos:end="31:11">DPRINTF</name><argument_list pos:start="31:12" pos:end="31:35">(<argument pos:start="31:13" pos:end="31:34"><expr pos:start="31:13" pos:end="31:34"><literal type="string" pos:start="31:13" pos:end="31:34">"Accepted migration\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:36"><expr pos:start="35:5" pos:end="35:35"><name pos:start="35:5" pos:end="35:5">f</name> <operator pos:start="35:7" pos:end="35:7">=</operator> <call pos:start="35:9" pos:end="35:35"><name pos:start="35:9" pos:end="35:23">qemu_fopen_rdma</name><argument_list pos:start="35:24" pos:end="35:35">(<argument pos:start="35:25" pos:end="35:28"><expr pos:start="35:25" pos:end="35:28"><name pos:start="35:25" pos:end="35:28">rdma</name></expr></argument>, <argument pos:start="35:31" pos:end="35:34"><expr pos:start="35:31" pos:end="35:34"><literal type="string" pos:start="35:31" pos:end="35:34">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:18">(<expr pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:9">f</name> <operator pos:start="37:11" pos:end="37:12">==</operator> <name pos:start="37:14" pos:end="37:17">NULL</name></expr>)</condition> <block pos:start="37:20" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:15">

        <expr_stmt pos:start="39:9" pos:end="39:50"><expr pos:start="39:9" pos:end="39:49"><call pos:start="39:9" pos:end="39:49"><name pos:start="39:9" pos:end="39:13">ERROR</name><argument_list pos:start="39:14" pos:end="39:49">(<argument pos:start="39:15" pos:end="39:18"><expr pos:start="39:15" pos:end="39:18"><name pos:start="39:15" pos:end="39:18">errp</name></expr></argument>, <argument pos:start="39:21" pos:end="39:48"><expr pos:start="39:21" pos:end="39:48"><literal type="string" pos:start="39:21" pos:end="39:48">"could not qemu_fopen_rdma!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:32"><expr pos:start="41:9" pos:end="41:31"><call pos:start="41:9" pos:end="41:31"><name pos:start="41:9" pos:end="41:25">qemu_rdma_cleanup</name><argument_list pos:start="41:26" pos:end="41:31">(<argument pos:start="41:27" pos:end="41:30"><expr pos:start="41:27" pos:end="41:30"><name pos:start="41:27" pos:end="41:30">rdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:47"><expr pos:start="49:5" pos:end="49:46"><name pos:start="49:5" pos:end="49:42"><name pos:start="49:5" pos:end="49:8">rdma</name><operator pos:start="49:9" pos:end="49:10">-&gt;</operator><name pos:start="49:11" pos:end="49:42">migration_started_on_destination</name></name> <operator pos:start="49:44" pos:end="49:44">=</operator> <literal type="number" pos:start="49:46" pos:end="49:46">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:34"><expr pos:start="51:5" pos:end="51:33"><call pos:start="51:5" pos:end="51:33"><name pos:start="51:5" pos:end="51:30">process_incoming_migration</name><argument_list pos:start="51:31" pos:end="51:33">(<argument pos:start="51:32" pos:end="51:32"><expr pos:start="51:32" pos:end="51:32"><name pos:start="51:32" pos:end="51:32">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
