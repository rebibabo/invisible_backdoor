<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12290.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:34">ape_decode_init</name><parameter_list pos:start="1:35" pos:end="1:57">(<parameter pos:start="1:36" pos:end="1:56"><decl pos:start="1:36" pos:end="1:56"><type pos:start="1:36" pos:end="1:51"><name pos:start="1:36" pos:end="1:49">AVCodecContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:56">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:27">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">APEContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:36">= <expr pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:25">avctx</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:35">(<expr pos:start="11:9" pos:end="11:34"><name pos:start="11:9" pos:end="11:29"><name pos:start="11:9" pos:end="11:13">avctx</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:29">extradata_size</name></name> <operator pos:start="11:31" pos:end="11:32">!=</operator> <literal type="number" pos:start="11:34" pos:end="11:34">6</literal></expr>)</condition> <block pos:start="11:37" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:31">

        <expr_stmt pos:start="13:9" pos:end="13:61"><expr pos:start="13:9" pos:end="13:60"><call pos:start="13:9" pos:end="13:60"><name pos:start="13:9" pos:end="13:14">av_log</name><argument_list pos:start="13:15" pos:end="13:60">(<argument pos:start="13:16" pos:end="13:20"><expr pos:start="13:16" pos:end="13:20"><name pos:start="13:16" pos:end="13:20">avctx</name></expr></argument>, <argument pos:start="13:23" pos:end="13:34"><expr pos:start="13:23" pos:end="13:34"><name pos:start="13:23" pos:end="13:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="13:37" pos:end="13:59"><expr pos:start="13:37" pos:end="13:59"><literal type="string" pos:start="13:37" pos:end="13:59">"Incorrect extradata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:31">return <expr pos:start="15:16" pos:end="15:30"><call pos:start="15:16" pos:end="15:30"><name pos:start="15:16" pos:end="15:22">AVERROR</name><argument_list pos:start="15:23" pos:end="15:30">(<argument pos:start="15:24" pos:end="15:29"><expr pos:start="15:24" pos:end="15:29"><name pos:start="15:24" pos:end="15:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:28">(<expr pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:23"><name pos:start="19:9" pos:end="19:13">avctx</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:23">channels</name></name> <operator pos:start="19:25" pos:end="19:25">&gt;</operator> <literal type="number" pos:start="19:27" pos:end="19:27">2</literal></expr>)</condition> <block pos:start="19:30" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:31">

        <expr_stmt pos:start="21:9" pos:end="21:75"><expr pos:start="21:9" pos:end="21:74"><call pos:start="21:9" pos:end="21:74"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="21:74">(<argument pos:start="21:16" pos:end="21:20"><expr pos:start="21:16" pos:end="21:20"><name pos:start="21:16" pos:end="21:20">avctx</name></expr></argument>, <argument pos:start="21:23" pos:end="21:34"><expr pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:37" pos:end="21:73"><expr pos:start="21:37" pos:end="21:73"><literal type="string" pos:start="21:37" pos:end="21:73">"Only mono and stereo is supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:31">return <expr pos:start="23:16" pos:end="23:30"><call pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:22">AVERROR</name><argument_list pos:start="23:23" pos:end="23:30">(<argument pos:start="23:24" pos:end="23:29"><expr pos:start="23:24" pos:end="23:29"><name pos:start="23:24" pos:end="23:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:42"><expr pos:start="27:5" pos:end="27:41"><name pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:10">bps</name></name> <operator pos:start="27:12" pos:end="27:12">=</operator> <name pos:start="27:14" pos:end="27:41"><name pos:start="27:14" pos:end="27:18">avctx</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:41">bits_per_coded_sample</name></name></expr>;</expr_stmt>

    <switch pos:start="29:5" pos:end="57:5">switch <condition pos:start="29:12" pos:end="29:19">(<expr pos:start="29:13" pos:end="29:18"><name pos:start="29:13" pos:end="29:18"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:18">bps</name></name></expr>)</condition> <block pos:start="29:21" pos:end="57:5">{<block_content pos:start="31:5" pos:end="55:36">

    <case pos:start="31:5" pos:end="31:11">case <expr pos:start="31:10" pos:end="31:10"><literal type="number" pos:start="31:10" pos:end="31:10">8</literal></expr>:</case>

        <expr_stmt pos:start="33:9" pos:end="33:45"><expr pos:start="33:9" pos:end="33:44"><name pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:13">avctx</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:25">sample_fmt</name></name> <operator pos:start="33:27" pos:end="33:27">=</operator> <name pos:start="33:29" pos:end="33:44">AV_SAMPLE_FMT_U8</name></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:12">case <expr pos:start="37:10" pos:end="37:11"><literal type="number" pos:start="37:10" pos:end="37:11">16</literal></expr>:</case>

        <expr_stmt pos:start="39:9" pos:end="39:46"><expr pos:start="39:9" pos:end="39:45"><name pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:13">avctx</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:25">sample_fmt</name></name> <operator pos:start="39:27" pos:end="39:27">=</operator> <name pos:start="39:29" pos:end="39:45">AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:12">case <expr pos:start="43:10" pos:end="43:11"><literal type="number" pos:start="43:10" pos:end="43:11">24</literal></expr>:</case>

        <expr_stmt pos:start="45:9" pos:end="45:46"><expr pos:start="45:9" pos:end="45:45"><name pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:13">avctx</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:25">sample_fmt</name></name> <operator pos:start="45:27" pos:end="45:27">=</operator> <name pos:start="45:29" pos:end="45:45">AV_SAMPLE_FMT_S32</name></expr>;</expr_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <default pos:start="49:5" pos:end="49:12">default:</default>

        <expr_stmt pos:start="51:9" pos:end="53:38"><expr pos:start="51:9" pos:end="53:37"><call pos:start="51:9" pos:end="53:37"><name pos:start="51:9" pos:end="51:29">av_log_ask_for_sample</name><argument_list pos:start="51:30" pos:end="53:37">(<argument pos:start="51:31" pos:end="51:35"><expr pos:start="51:31" pos:end="51:35"><name pos:start="51:31" pos:end="51:35">avctx</name></expr></argument>, <argument pos:start="51:38" pos:end="51:77"><expr pos:start="51:38" pos:end="51:77"><literal type="string" pos:start="51:38" pos:end="51:77">"Unsupported bits per coded sample %d\n"</literal></expr></argument>,

                              <argument pos:start="53:31" pos:end="53:36"><expr pos:start="53:31" pos:end="53:36"><name pos:start="53:31" pos:end="53:36"><name pos:start="53:31" pos:end="53:31">s</name><operator pos:start="53:32" pos:end="53:33">-&gt;</operator><name pos:start="53:34" pos:end="53:36">bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:36">return <expr pos:start="55:16" pos:end="55:35"><name pos:start="55:16" pos:end="55:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="59:5" pos:end="59:33"><expr pos:start="59:5" pos:end="59:32"><name pos:start="59:5" pos:end="59:12"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:12">avctx</name></name>             <operator pos:start="59:26" pos:end="59:26">=</operator> <name pos:start="59:28" pos:end="59:32">avctx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:43"><expr pos:start="61:5" pos:end="61:42"><name pos:start="61:5" pos:end="61:15"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:15">channels</name></name>          <operator pos:start="61:26" pos:end="61:26">=</operator> <name pos:start="61:28" pos:end="61:42"><name pos:start="61:28" pos:end="61:32">avctx</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:42">channels</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:53"><expr pos:start="63:5" pos:end="63:52"><name pos:start="63:5" pos:end="63:18"><name pos:start="63:5" pos:end="63:5">s</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:18">fileversion</name></name>       <operator pos:start="63:26" pos:end="63:26">=</operator> <call pos:start="63:28" pos:end="63:52"><name pos:start="63:28" pos:end="63:34">AV_RL16</name><argument_list pos:start="63:35" pos:end="63:52">(<argument pos:start="63:36" pos:end="63:51"><expr pos:start="63:36" pos:end="63:51"><name pos:start="63:36" pos:end="63:51"><name pos:start="63:36" pos:end="63:40">avctx</name><operator pos:start="63:41" pos:end="63:42">-&gt;</operator><name pos:start="63:43" pos:end="63:51">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:57"><expr pos:start="65:5" pos:end="65:56"><name pos:start="65:5" pos:end="65:24"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:24">compression_level</name></name> <operator pos:start="65:26" pos:end="65:26">=</operator> <call pos:start="65:28" pos:end="65:56"><name pos:start="65:28" pos:end="65:34">AV_RL16</name><argument_list pos:start="65:35" pos:end="65:56">(<argument pos:start="65:36" pos:end="65:55"><expr pos:start="65:36" pos:end="65:55"><name pos:start="65:36" pos:end="65:51"><name pos:start="65:36" pos:end="65:40">avctx</name><operator pos:start="65:41" pos:end="65:42">-&gt;</operator><name pos:start="65:43" pos:end="65:51">extradata</name></name> <operator pos:start="65:53" pos:end="65:53">+</operator> <literal type="number" pos:start="65:55" pos:end="65:55">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:57"><expr pos:start="67:5" pos:end="67:56"><name pos:start="67:5" pos:end="67:12"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:12">flags</name></name>             <operator pos:start="67:26" pos:end="67:26">=</operator> <call pos:start="67:28" pos:end="67:56"><name pos:start="67:28" pos:end="67:34">AV_RL16</name><argument_list pos:start="67:35" pos:end="67:56">(<argument pos:start="67:36" pos:end="67:55"><expr pos:start="67:36" pos:end="67:55"><name pos:start="67:36" pos:end="67:51"><name pos:start="67:36" pos:end="67:40">avctx</name><operator pos:start="67:41" pos:end="67:42">-&gt;</operator><name pos:start="67:43" pos:end="67:51">extradata</name></name> <operator pos:start="67:53" pos:end="67:53">+</operator> <literal type="number" pos:start="67:55" pos:end="67:55">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="73:43"><expr pos:start="71:5" pos:end="73:42"><call pos:start="71:5" pos:end="73:42"><name pos:start="71:5" pos:end="71:10">av_log</name><argument_list pos:start="71:11" pos:end="73:42">(<argument pos:start="71:12" pos:end="71:16"><expr pos:start="71:12" pos:end="71:16"><name pos:start="71:12" pos:end="71:16">avctx</name></expr></argument>, <argument pos:start="71:19" pos:end="71:30"><expr pos:start="71:19" pos:end="71:30"><name pos:start="71:19" pos:end="71:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="71:33" pos:end="71:69"><expr pos:start="71:33" pos:end="71:69"><literal type="string" pos:start="71:33" pos:end="71:69">"Compression Level: %d - Flags: %d\n"</literal></expr></argument>,

           <argument pos:start="73:12" pos:end="73:31"><expr pos:start="73:12" pos:end="73:31"><name pos:start="73:12" pos:end="73:31"><name pos:start="73:12" pos:end="73:12">s</name><operator pos:start="73:13" pos:end="73:14">-&gt;</operator><name pos:start="73:15" pos:end="73:31">compression_level</name></name></expr></argument>, <argument pos:start="73:34" pos:end="73:41"><expr pos:start="73:34" pos:end="73:41"><name pos:start="73:34" pos:end="73:41"><name pos:start="73:34" pos:end="73:34">s</name><operator pos:start="73:35" pos:end="73:36">-&gt;</operator><name pos:start="73:37" pos:end="73:41">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:87">(<expr pos:start="75:9" pos:end="75:86"><name pos:start="75:9" pos:end="75:28"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:28">compression_level</name></name> <operator pos:start="75:30" pos:end="75:30">%</operator> <literal type="number" pos:start="75:32" pos:end="75:35">1000</literal> <operator pos:start="75:37" pos:end="75:38">||</operator> <name pos:start="75:40" pos:end="75:59"><name pos:start="75:40" pos:end="75:40">s</name><operator pos:start="75:41" pos:end="75:42">-&gt;</operator><name pos:start="75:43" pos:end="75:59">compression_level</name></name> <operator pos:start="75:61" pos:end="75:61">&gt;</operator> <name pos:start="75:63" pos:end="75:86">COMPRESSION_LEVEL_INSANE</name></expr>)</condition> <block pos:start="75:89" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:35">

        <expr_stmt pos:start="77:9" pos:end="79:37"><expr pos:start="77:9" pos:end="79:36"><call pos:start="77:9" pos:end="79:36"><name pos:start="77:9" pos:end="77:14">av_log</name><argument_list pos:start="77:15" pos:end="79:36">(<argument pos:start="77:16" pos:end="77:20"><expr pos:start="77:16" pos:end="77:20"><name pos:start="77:16" pos:end="77:20">avctx</name></expr></argument>, <argument pos:start="77:23" pos:end="77:34"><expr pos:start="77:23" pos:end="77:34"><name pos:start="77:23" pos:end="77:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:37" pos:end="77:70"><expr pos:start="77:37" pos:end="77:70"><literal type="string" pos:start="77:37" pos:end="77:70">"Incorrect compression level %d\n"</literal></expr></argument>,

               <argument pos:start="79:16" pos:end="79:35"><expr pos:start="79:16" pos:end="79:35"><name pos:start="79:16" pos:end="79:35"><name pos:start="79:16" pos:end="79:16">s</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:35">compression_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:35">return <expr pos:start="81:16" pos:end="81:34"><name pos:start="81:16" pos:end="81:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:46"><expr pos:start="85:5" pos:end="85:45"><name pos:start="85:5" pos:end="85:11"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:11">fset</name></name> <operator pos:start="85:13" pos:end="85:13">=</operator> <name pos:start="85:15" pos:end="85:34"><name pos:start="85:15" pos:end="85:15">s</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:34">compression_level</name></name> <operator pos:start="85:36" pos:end="85:36">/</operator> <literal type="number" pos:start="85:38" pos:end="85:43">1000</literal> <operator pos:start="85:43" pos:end="85:43">-</operator> <literal type="number" pos:start="85:45" pos:end="85:45">1</literal></expr>;</expr_stmt>

    <for pos:start="87:5" pos:end="99:5">for <control pos:start="87:9" pos:end="87:43">(<init pos:start="87:10" pos:end="87:15"><expr pos:start="87:10" pos:end="87:14"><name pos:start="87:10" pos:end="87:10">i</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <literal type="number" pos:start="87:14" pos:end="87:14">0</literal></expr>;</init> <condition pos:start="87:17" pos:end="87:38"><expr pos:start="87:17" pos:end="87:37"><name pos:start="87:17" pos:end="87:17">i</name> <operator pos:start="87:19" pos:end="87:19">&lt;</operator> <name pos:start="87:21" pos:end="87:37">APE_FILTER_LEVELS</name></expr>;</condition> <incr pos:start="87:40" pos:end="87:42"><expr pos:start="87:40" pos:end="87:42"><name pos:start="87:40" pos:end="87:40">i</name><operator pos:start="87:41" pos:end="87:42">++</operator></expr></incr>)</control> <block pos:start="87:45" pos:end="99:5">{<block_content pos:start="89:9" pos:end="97:44">

        <if_stmt pos:start="89:9" pos:end="91:18"><if pos:start="89:9" pos:end="91:18">if <condition pos:start="89:12" pos:end="89:43">(<expr pos:start="89:13" pos:end="89:42"><operator pos:start="89:13" pos:end="89:13">!</operator><name pos:start="89:14" pos:end="89:42"><name pos:start="89:14" pos:end="89:30">ape_filter_orders</name><index pos:start="89:31" pos:end="89:39">[<expr pos:start="89:32" pos:end="89:38"><name pos:start="89:32" pos:end="89:38"><name pos:start="89:32" pos:end="89:32">s</name><operator pos:start="89:33" pos:end="89:34">-&gt;</operator><name pos:start="89:35" pos:end="89:38">fset</name></name></expr>]</index><index pos:start="89:40" pos:end="89:42">[<expr pos:start="89:41" pos:end="89:41"><name pos:start="89:41" pos:end="89:41">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="91:13" pos:end="91:18"><block_content pos:start="91:13" pos:end="91:18">

            <break pos:start="91:13" pos:end="91:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="97:44"><expr pos:start="93:9" pos:end="97:43"><call pos:start="93:9" pos:end="97:43"><name pos:start="93:9" pos:end="93:24">FF_ALLOC_OR_GOTO</name><argument_list pos:start="93:25" pos:end="97:43">(<argument pos:start="93:26" pos:end="93:30"><expr pos:start="93:26" pos:end="93:30"><name pos:start="93:26" pos:end="93:30">avctx</name></expr></argument>, <argument pos:start="93:33" pos:end="93:47"><expr pos:start="93:33" pos:end="93:47"><name pos:start="93:33" pos:end="93:47"><name pos:start="93:33" pos:end="93:33">s</name><operator pos:start="93:34" pos:end="93:35">-&gt;</operator><name pos:start="93:36" pos:end="93:44">filterbuf</name><index pos:start="93:45" pos:end="93:47">[<expr pos:start="93:46" pos:end="93:46"><name pos:start="93:46" pos:end="93:46">i</name></expr>]</index></name></expr></argument>,

                         <argument pos:start="95:26" pos:end="95:79"><expr pos:start="95:26" pos:end="95:79"><operator pos:start="95:26" pos:end="95:26">(</operator><name pos:start="95:27" pos:end="95:55"><name pos:start="95:27" pos:end="95:43">ape_filter_orders</name><index pos:start="95:44" pos:end="95:52">[<expr pos:start="95:45" pos:end="95:51"><name pos:start="95:45" pos:end="95:51"><name pos:start="95:45" pos:end="95:45">s</name><operator pos:start="95:46" pos:end="95:47">-&gt;</operator><name pos:start="95:48" pos:end="95:51">fset</name></name></expr>]</index><index pos:start="95:53" pos:end="95:55">[<expr pos:start="95:54" pos:end="95:54"><name pos:start="95:54" pos:end="95:54">i</name></expr>]</index></name> <operator pos:start="95:57" pos:end="95:57">*</operator> <literal type="number" pos:start="95:59" pos:end="95:61">3</literal> <operator pos:start="95:61" pos:end="95:61">+</operator> <name pos:start="95:63" pos:end="95:74">HISTORY_SIZE</name><operator pos:start="95:75" pos:end="95:75">)</operator> <operator pos:start="95:77" pos:end="95:77">*</operator> <literal type="number" pos:start="95:79" pos:end="95:79">4</literal></expr></argument>,

                         <argument pos:start="97:26" pos:end="97:42"><expr pos:start="97:26" pos:end="97:42"><name pos:start="97:26" pos:end="97:42">filter_alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="103:5" pos:end="103:36"><expr pos:start="103:5" pos:end="103:35"><call pos:start="103:5" pos:end="103:35"><name pos:start="103:5" pos:end="103:19">ff_dsputil_init</name><argument_list pos:start="103:20" pos:end="103:35">(<argument pos:start="103:21" pos:end="103:27"><expr pos:start="103:21" pos:end="103:27"><operator pos:start="103:21" pos:end="103:21">&amp;</operator><name pos:start="103:22" pos:end="103:27"><name pos:start="103:22" pos:end="103:22">s</name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:27">dsp</name></name></expr></argument>, <argument pos:start="103:30" pos:end="103:34"><expr pos:start="103:30" pos:end="103:34"><name pos:start="103:30" pos:end="103:34">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:91"><expr pos:start="105:5" pos:end="105:90"><name pos:start="105:5" pos:end="105:25"><name pos:start="105:5" pos:end="105:9">avctx</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:25">channel_layout</name></name> <operator pos:start="105:27" pos:end="105:27">=</operator> <ternary pos:start="105:29" pos:end="105:90"><condition pos:start="105:29" pos:end="105:50"><expr pos:start="105:29" pos:end="105:48"><operator pos:start="105:29" pos:end="105:29">(</operator><name pos:start="105:30" pos:end="105:44"><name pos:start="105:30" pos:end="105:34">avctx</name><operator pos:start="105:35" pos:end="105:36">-&gt;</operator><name pos:start="105:37" pos:end="105:44">channels</name></name><operator pos:start="105:45" pos:end="105:46">==</operator><literal type="number" pos:start="105:47" pos:end="105:47">2</literal><operator pos:start="105:48" pos:end="105:48">)</operator></expr> ?</condition><then pos:start="105:52" pos:end="105:70"> <expr pos:start="105:52" pos:end="105:70"><name pos:start="105:52" pos:end="105:70">AV_CH_LAYOUT_STEREO</name></expr> </then><else pos:start="105:72" pos:end="105:90">: <expr pos:start="105:74" pos:end="105:90"><name pos:start="105:74" pos:end="105:90">AV_CH_LAYOUT_MONO</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:42"><expr pos:start="109:5" pos:end="109:41"><call pos:start="109:5" pos:end="109:41"><name pos:start="109:5" pos:end="109:30">avcodec_get_frame_defaults</name><argument_list pos:start="109:31" pos:end="109:41">(<argument pos:start="109:32" pos:end="109:40"><expr pos:start="109:32" pos:end="109:40"><operator pos:start="109:32" pos:end="109:32">&amp;</operator><name pos:start="109:33" pos:end="109:40"><name pos:start="109:33" pos:end="109:33">s</name><operator pos:start="109:34" pos:end="109:35">-&gt;</operator><name pos:start="109:36" pos:end="109:40">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:35"><expr pos:start="111:5" pos:end="111:34"><name pos:start="111:5" pos:end="111:22"><name pos:start="111:5" pos:end="111:9">avctx</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:22">coded_frame</name></name> <operator pos:start="111:24" pos:end="111:24">=</operator> <operator pos:start="111:26" pos:end="111:26">&amp;</operator><name pos:start="111:27" pos:end="111:34"><name pos:start="111:27" pos:end="111:27">s</name><operator pos:start="111:28" pos:end="111:29">-&gt;</operator><name pos:start="111:30" pos:end="111:34">frame</name></name></expr>;</expr_stmt>



    <return pos:start="115:5" pos:end="115:13">return <expr pos:start="115:12" pos:end="115:12"><literal type="number" pos:start="115:12" pos:end="115:12">0</literal></expr>;</return>

<label pos:start="117:1" pos:end="117:18"><name pos:start="117:1" pos:end="117:17">filter_alloc_fail</name>:</label>

    <expr_stmt pos:start="119:5" pos:end="119:28"><expr pos:start="119:5" pos:end="119:27"><call pos:start="119:5" pos:end="119:27"><name pos:start="119:5" pos:end="119:20">ape_decode_close</name><argument_list pos:start="119:21" pos:end="119:27">(<argument pos:start="119:22" pos:end="119:26"><expr pos:start="119:22" pos:end="119:26"><name pos:start="119:22" pos:end="119:26">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="121:5" pos:end="121:27">return <expr pos:start="121:12" pos:end="121:26"><call pos:start="121:12" pos:end="121:26"><name pos:start="121:12" pos:end="121:18">AVERROR</name><argument_list pos:start="121:19" pos:end="121:26">(<argument pos:start="121:20" pos:end="121:25"><expr pos:start="121:20" pos:end="121:25"><name pos:start="121:20" pos:end="121:25">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
