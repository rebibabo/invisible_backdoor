<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11255.c" pos:tabs="8"><function pos:start="1:1" pos:end="50:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:13">vm_start</name><parameter_list pos:start="1:14" pos:end="1:19">(<parameter pos:start="1:15" pos:end="1:18"><decl pos:start="1:15" pos:end="1:18"><type pos:start="1:15" pos:end="1:18"><name pos:start="1:15" pos:end="1:18">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="50:1">{<block_content pos:start="5:5" pos:end="48:41">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">RunState</name></type> <name pos:start="5:14" pos:end="5:22">requested</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:38"><expr pos:start="9:5" pos:end="9:37"><call pos:start="9:5" pos:end="9:37"><name pos:start="9:5" pos:end="9:25">qemu_vmstop_requested</name><argument_list pos:start="9:26" pos:end="9:37">(<argument pos:start="9:27" pos:end="9:36"><expr pos:start="9:27" pos:end="9:36"><operator pos:start="9:27" pos:end="9:27">&amp;</operator><name pos:start="9:28" pos:end="9:36">requested</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:61">(<expr pos:start="11:9" pos:end="11:60"><call pos:start="11:9" pos:end="11:29"><name pos:start="11:9" pos:end="11:27">runstate_is_running</name><argument_list pos:start="11:28" pos:end="11:29">()</argument_list></call> <operator pos:start="11:31" pos:end="11:32">&amp;&amp;</operator> <name pos:start="11:34" pos:end="11:42">requested</name> <operator pos:start="11:44" pos:end="11:45">==</operator> <name pos:start="11:47" pos:end="11:60">RUN_STATE__MAX</name></expr>)</condition> <block pos:start="11:63" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:15">

        <return pos:start="13:9" pos:end="13:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="19:5" pos:end="27:7">/* Ensure that a STOP/RESUME pair of events is emitted if a

     * vmstop request was pending.  The BLOCK_IO_ERROR event, for

     * example, according to documentation is always followed by

     * the STOP event.

     */</comment>

    <if_stmt pos:start="29:5" pos:end="44:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:30">(<expr pos:start="29:9" pos:end="29:29"><call pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:27">runstate_is_running</name><argument_list pos:start="29:28" pos:end="29:29">()</argument_list></call></expr>)</condition> <block pos:start="29:32" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:43">

        <expr_stmt pos:start="31:9" pos:end="31:43"><expr pos:start="31:9" pos:end="31:42"><call pos:start="31:9" pos:end="31:42"><name pos:start="31:9" pos:end="31:28">qapi_event_send_stop</name><argument_list pos:start="31:29" pos:end="31:42">(<argument pos:start="31:30" pos:end="31:41"><expr pos:start="31:30" pos:end="31:41"><operator pos:start="31:30" pos:end="31:30">&amp;</operator><name pos:start="31:31" pos:end="31:41">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="44:5">else <block pos:start="33:12" pos:end="44:5">{<block_content pos:start="36:9" pos:end="42:27">


        <expr_stmt pos:start="36:9" pos:end="36:27"><expr pos:start="36:9" pos:end="36:26"><call pos:start="36:9" pos:end="36:26"><name pos:start="36:9" pos:end="36:24">cpu_enable_ticks</name><argument_list pos:start="36:25" pos:end="36:26">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="38:9" pos:end="38:40"><expr pos:start="38:9" pos:end="38:39"><call pos:start="38:9" pos:end="38:39"><name pos:start="38:9" pos:end="38:20">runstate_set</name><argument_list pos:start="38:21" pos:end="38:39">(<argument pos:start="38:22" pos:end="38:38"><expr pos:start="38:22" pos:end="38:38"><name pos:start="38:22" pos:end="38:38">RUN_STATE_RUNNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="40:9" pos:end="40:46"><expr pos:start="40:9" pos:end="40:45"><call pos:start="40:9" pos:end="40:45"><name pos:start="40:9" pos:end="40:23">vm_state_notify</name><argument_list pos:start="40:24" pos:end="40:45">(<argument pos:start="40:25" pos:end="40:25"><expr pos:start="40:25" pos:end="40:25"><literal type="number" pos:start="40:25" pos:end="40:25">1</literal></expr></argument>, <argument pos:start="40:28" pos:end="40:44"><expr pos:start="40:28" pos:end="40:44"><name pos:start="40:28" pos:end="40:44">RUN_STATE_RUNNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="42:9" pos:end="42:27"><expr pos:start="42:9" pos:end="42:26"><call pos:start="42:9" pos:end="42:26"><name pos:start="42:9" pos:end="42:24">resume_all_vcpus</name><argument_list pos:start="42:25" pos:end="42:26">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="48:5" pos:end="48:41"><expr pos:start="48:5" pos:end="48:40"><call pos:start="48:5" pos:end="48:40"><name pos:start="48:5" pos:end="48:26">qapi_event_send_resume</name><argument_list pos:start="48:27" pos:end="48:40">(<argument pos:start="48:28" pos:end="48:39"><expr pos:start="48:28" pos:end="48:39"><operator pos:start="48:28" pos:end="48:28">&amp;</operator><name pos:start="48:29" pos:end="48:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
