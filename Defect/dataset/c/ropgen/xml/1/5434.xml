<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5434.c" pos:tabs="8"><function pos:start="1:1" pos:end="389:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">read_access_unit</name><parameter_list pos:start="1:28" pos:end="3:64">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name><modifier pos:start="1:56" pos:end="1:56">*</modifier></type> <name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:46">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:63">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="389:1">{<block_content pos:start="7:5" pos:end="387:31">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">MLPDecodeContext</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:23">m</name> <init pos:start="11:25" pos:end="11:42">= <expr pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:31">avctx</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">GetBitContext</name></type> <name pos:start="13:19" pos:end="13:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:23">length</name></decl>, <decl pos:start="15:26" pos:end="15:31"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:26" pos:end="15:31">substr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:32">substream_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:28">header_size</name> <init pos:start="19:30" pos:end="19:32">= <expr pos:start="19:32" pos:end="19:32"><literal type="number" pos:start="19:32" pos:end="19:32">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:40"><decl pos:start="21:5" pos:end="21:39"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:16">int</name></type> <name pos:start="21:18" pos:end="21:35">substr_header_size</name> <init pos:start="21:37" pos:end="21:39">= <expr pos:start="21:39" pos:end="21:39"><literal type="number" pos:start="21:39" pos:end="21:39">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:53"><decl pos:start="23:5" pos:end="23:52"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">uint8_t</name></type> <name pos:start="23:13" pos:end="23:52"><name pos:start="23:13" pos:end="23:36">substream_parity_present</name><index pos:start="23:37" pos:end="23:52">[<expr pos:start="23:38" pos:end="23:51"><name pos:start="23:38" pos:end="23:51">MAX_SUBSTREAMS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:48"><decl pos:start="25:5" pos:end="25:47"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint16_t</name></type> <name pos:start="25:14" pos:end="25:47"><name pos:start="25:14" pos:end="25:31">substream_data_len</name><index pos:start="25:32" pos:end="25:47">[<expr pos:start="25:33" pos:end="25:46"><name pos:start="25:33" pos:end="25:46">MAX_SUBSTREAMS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:11">uint8_t</name></type> <name pos:start="27:13" pos:end="27:23">parity_bits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:12"><decl pos:start="29:5" pos:end="29:11"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="33:5" pos:end="35:17"><if pos:start="33:5" pos:end="35:17">if <condition pos:start="33:8" pos:end="33:21">(<expr pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:16">buf_size</name> <operator pos:start="33:18" pos:end="33:18">&lt;</operator> <literal type="number" pos:start="33:20" pos:end="33:20">4</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:17"><block_content pos:start="35:9" pos:end="35:17">

        <return pos:start="35:9" pos:end="35:17">return <expr pos:start="35:16" pos:end="35:16"><literal type="number" pos:start="35:16" pos:end="35:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:40"><expr pos:start="39:5" pos:end="39:39"><name pos:start="39:5" pos:end="39:10">length</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <operator pos:start="39:14" pos:end="39:14">(</operator><call pos:start="39:15" pos:end="39:26"><name pos:start="39:15" pos:end="39:21">AV_RB16</name><argument_list pos:start="39:22" pos:end="39:26">(<argument pos:start="39:23" pos:end="39:25"><expr pos:start="39:23" pos:end="39:25"><name pos:start="39:23" pos:end="39:25">buf</name></expr></argument>)</argument_list></call> <operator pos:start="39:28" pos:end="39:28">&amp;</operator> <literal type="number" pos:start="39:30" pos:end="39:34">0xfff</literal><operator pos:start="39:35" pos:end="39:35">)</operator> <operator pos:start="39:37" pos:end="39:37">*</operator> <literal type="number" pos:start="39:39" pos:end="39:39">2</literal></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="45:35"><if pos:start="43:5" pos:end="45:35">if <condition pos:start="43:8" pos:end="43:40">(<expr pos:start="43:9" pos:end="43:39"><name pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:14">length</name> <argument_list type="generic" pos:start="43:16" pos:end="43:30">&lt; <argument pos:start="43:18" pos:end="43:28"><expr pos:start="43:18" pos:end="43:28"><literal type="number" pos:start="43:18" pos:end="43:18">4</literal> <operator pos:start="43:20" pos:end="43:21">||</operator> <name pos:start="43:23" pos:end="43:28">length</name></expr></argument> &gt;</argument_list></name> <name pos:start="43:32" pos:end="43:39">buf_size</name></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:35"><block_content pos:start="45:9" pos:end="45:35">

        <return pos:start="45:9" pos:end="45:35">return <expr pos:start="45:16" pos:end="45:34"><name pos:start="45:16" pos:end="45:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:52"><expr pos:start="49:5" pos:end="49:51"><call pos:start="49:5" pos:end="49:51"><name pos:start="49:5" pos:end="49:17">init_get_bits</name><argument_list pos:start="49:18" pos:end="49:51">(<argument pos:start="49:19" pos:end="49:21"><expr pos:start="49:19" pos:end="49:21"><operator pos:start="49:19" pos:end="49:19">&amp;</operator><name pos:start="49:20" pos:end="49:21">gb</name></expr></argument>, <argument pos:start="49:24" pos:end="49:32"><expr pos:start="49:24" pos:end="49:32"><operator pos:start="49:24" pos:end="49:24">(</operator><name pos:start="49:25" pos:end="49:27">buf</name> <operator pos:start="49:29" pos:end="49:29">+</operator> <literal type="number" pos:start="49:31" pos:end="49:31">4</literal><operator pos:start="49:32" pos:end="49:32">)</operator></expr></argument>, <argument pos:start="49:35" pos:end="49:50"><expr pos:start="49:35" pos:end="49:50"><operator pos:start="49:35" pos:end="49:35">(</operator><name pos:start="49:36" pos:end="49:41">length</name> <operator pos:start="49:43" pos:end="49:43">-</operator> <literal type="number" pos:start="49:45" pos:end="49:45">4</literal><operator pos:start="49:46" pos:end="49:46">)</operator> <operator pos:start="49:48" pos:end="49:48">*</operator> <literal type="number" pos:start="49:50" pos:end="49:50">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:30"><expr pos:start="53:5" pos:end="53:29"><name pos:start="53:5" pos:end="53:25"><name pos:start="53:5" pos:end="53:5">m</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:25">is_major_sync_unit</name></name> <operator pos:start="53:27" pos:end="53:27">=</operator> <literal type="number" pos:start="53:29" pos:end="53:29">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="65:5"><if pos:start="55:5" pos:end="65:5">if <condition pos:start="55:8" pos:end="55:53">(<expr pos:start="55:9" pos:end="55:52"><call pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:22">show_bits_long</name><argument_list pos:start="55:23" pos:end="55:31">(<argument pos:start="55:24" pos:end="55:26"><expr pos:start="55:24" pos:end="55:26"><operator pos:start="55:24" pos:end="55:24">&amp;</operator><name pos:start="55:25" pos:end="55:26">gb</name></expr></argument>, <argument pos:start="55:29" pos:end="55:30"><expr pos:start="55:29" pos:end="55:30"><literal type="number" pos:start="55:29" pos:end="55:30">31</literal></expr></argument>)</argument_list></call> <operator pos:start="55:33" pos:end="55:34">==</operator> <operator pos:start="55:36" pos:end="55:36">(</operator><literal type="number" pos:start="55:37" pos:end="55:46">0xf8726fba</literal> <operator pos:start="55:48" pos:end="55:49">&gt;&gt;</operator> <literal type="number" pos:start="55:51" pos:end="55:51">1</literal><operator pos:start="55:52" pos:end="55:52">)</operator></expr>)</condition> <block pos:start="55:55" pos:end="65:5">{<block_content pos:start="57:9" pos:end="63:26">

        <if_stmt pos:start="57:9" pos:end="59:23"><if pos:start="57:9" pos:end="59:23">if <condition pos:start="57:12" pos:end="57:40">(<expr pos:start="57:13" pos:end="57:39"><call pos:start="57:13" pos:end="57:35"><name pos:start="57:13" pos:end="57:27">read_major_sync</name><argument_list pos:start="57:28" pos:end="57:35">(<argument pos:start="57:29" pos:end="57:29"><expr pos:start="57:29" pos:end="57:29"><name pos:start="57:29" pos:end="57:29">m</name></expr></argument>, <argument pos:start="57:32" pos:end="57:34"><expr pos:start="57:32" pos:end="57:34"><operator pos:start="57:32" pos:end="57:32">&amp;</operator><name pos:start="57:33" pos:end="57:34">gb</name></expr></argument>)</argument_list></call> <operator pos:start="57:37" pos:end="57:37">&lt;</operator> <literal type="number" pos:start="57:39" pos:end="57:39">0</literal></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:23"><block_content pos:start="59:13" pos:end="59:23">

            <goto pos:start="59:13" pos:end="59:23">goto <name pos:start="59:18" pos:end="59:22">error</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:34"><expr pos:start="61:9" pos:end="61:33"><name pos:start="61:9" pos:end="61:29"><name pos:start="61:9" pos:end="61:9">m</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:29">is_major_sync_unit</name></name> <operator pos:start="61:31" pos:end="61:31">=</operator> <literal type="number" pos:start="61:33" pos:end="61:33">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:26"><expr pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:19">header_size</name> <operator pos:start="63:21" pos:end="63:22">+=</operator> <literal type="number" pos:start="63:24" pos:end="63:25">28</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="79:5"><if pos:start="69:5" pos:end="79:5">if <condition pos:start="69:8" pos:end="69:25">(<expr pos:start="69:9" pos:end="69:24"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:24"><name pos:start="69:10" pos:end="69:10">m</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:24">params_valid</name></name></expr>)</condition> <block pos:start="69:27" pos:end="79:5">{<block_content pos:start="71:9" pos:end="77:22">

        <expr_stmt pos:start="71:9" pos:end="73:64"><expr pos:start="71:9" pos:end="73:63"><call pos:start="71:9" pos:end="73:63"><name pos:start="71:9" pos:end="71:14">av_log</name><argument_list pos:start="71:15" pos:end="73:63">(<argument pos:start="71:16" pos:end="71:23"><expr pos:start="71:16" pos:end="71:23"><name pos:start="71:16" pos:end="71:23"><name pos:start="71:16" pos:end="71:16">m</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:23">avctx</name></name></expr></argument>, <argument pos:start="71:26" pos:end="71:39"><expr pos:start="71:26" pos:end="71:39"><name pos:start="71:26" pos:end="71:39">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="73:16" pos:end="73:62"><expr pos:start="73:16" pos:end="73:62"><literal type="string" pos:start="73:16" pos:end="73:62">"Stream parameters not seen; skipping frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:27"><expr pos:start="75:9" pos:end="75:26"><operator pos:start="75:9" pos:end="75:9">*</operator><name pos:start="75:10" pos:end="75:22">got_frame_ptr</name> <operator pos:start="75:24" pos:end="75:24">=</operator> <literal type="number" pos:start="75:26" pos:end="75:26">0</literal></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:22">return <expr pos:start="77:16" pos:end="77:21"><name pos:start="77:16" pos:end="77:21">length</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:24"><expr pos:start="83:5" pos:end="83:23"><name pos:start="83:5" pos:end="83:19">substream_start</name> <operator pos:start="83:21" pos:end="83:21">=</operator> <literal type="number" pos:start="83:23" pos:end="83:23">0</literal></expr>;</expr_stmt>



    <for pos:start="87:5" pos:end="181:5">for <control pos:start="87:9" pos:end="87:58">(<init pos:start="87:10" pos:end="87:20"><expr pos:start="87:10" pos:end="87:19"><name pos:start="87:10" pos:end="87:15">substr</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <literal type="number" pos:start="87:19" pos:end="87:19">0</literal></expr>;</init> <condition pos:start="87:22" pos:end="87:48"><expr pos:start="87:22" pos:end="87:47"><name pos:start="87:22" pos:end="87:27">substr</name> <operator pos:start="87:29" pos:end="87:29">&lt;</operator> <name pos:start="87:31" pos:end="87:47"><name pos:start="87:31" pos:end="87:31">m</name><operator pos:start="87:32" pos:end="87:33">-&gt;</operator><name pos:start="87:34" pos:end="87:47">num_substreams</name></name></expr>;</condition> <incr pos:start="87:50" pos:end="87:57"><expr pos:start="87:50" pos:end="87:57"><name pos:start="87:50" pos:end="87:55">substr</name><operator pos:start="87:56" pos:end="87:57">++</operator></expr></incr>)</control> <block pos:start="87:60" pos:end="181:5">{<block_content pos:start="89:9" pos:end="179:30">

        <decl_stmt pos:start="89:9" pos:end="89:73"><decl pos:start="89:9" pos:end="89:29"><type pos:start="89:9" pos:end="89:11"><name pos:start="89:9" pos:end="89:11">int</name></type> <name pos:start="89:13" pos:end="89:29">extraword_present</name></decl>, <decl pos:start="89:32" pos:end="89:48"><type ref="prev" pos:start="89:9" pos:end="89:11"/><name pos:start="89:32" pos:end="89:48">checkdata_present</name></decl>, <decl pos:start="89:51" pos:end="89:53"><type ref="prev" pos:start="89:9" pos:end="89:11"/><name pos:start="89:51" pos:end="89:53">end</name></decl>, <decl pos:start="89:56" pos:end="89:72"><type ref="prev" pos:start="89:9" pos:end="89:11"/><name pos:start="89:56" pos:end="89:72">nonrestart_substr</name></decl>;</decl_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:43"><expr pos:start="93:9" pos:end="93:42"><name pos:start="93:9" pos:end="93:25">extraword_present</name> <operator pos:start="93:27" pos:end="93:27">=</operator> <call pos:start="93:29" pos:end="93:42"><name pos:start="93:29" pos:end="93:37">get_bits1</name><argument_list pos:start="93:38" pos:end="93:42">(<argument pos:start="93:39" pos:end="93:41"><expr pos:start="93:39" pos:end="93:41"><operator pos:start="93:39" pos:end="93:39">&amp;</operator><name pos:start="93:40" pos:end="93:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:43"><expr pos:start="95:9" pos:end="95:42"><name pos:start="95:9" pos:end="95:25">nonrestart_substr</name> <operator pos:start="95:27" pos:end="95:27">=</operator> <call pos:start="95:29" pos:end="95:42"><name pos:start="95:29" pos:end="95:37">get_bits1</name><argument_list pos:start="95:38" pos:end="95:42">(<argument pos:start="95:39" pos:end="95:41"><expr pos:start="95:39" pos:end="95:41"><operator pos:start="95:39" pos:end="95:39">&amp;</operator><name pos:start="95:40" pos:end="95:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:43"><expr pos:start="97:9" pos:end="97:42"><name pos:start="97:9" pos:end="97:25">checkdata_present</name> <operator pos:start="97:27" pos:end="97:27">=</operator> <call pos:start="97:29" pos:end="97:42"><name pos:start="97:29" pos:end="97:37">get_bits1</name><argument_list pos:start="97:38" pos:end="97:42">(<argument pos:start="97:39" pos:end="97:41"><expr pos:start="97:39" pos:end="97:41"><operator pos:start="97:39" pos:end="97:39">&amp;</operator><name pos:start="97:40" pos:end="97:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:24"><expr pos:start="99:9" pos:end="99:23"><call pos:start="99:9" pos:end="99:23"><name pos:start="99:9" pos:end="99:18">skip_bits1</name><argument_list pos:start="99:19" pos:end="99:23">(<argument pos:start="99:20" pos:end="99:22"><expr pos:start="99:20" pos:end="99:22"><operator pos:start="99:20" pos:end="99:20">&amp;</operator><name pos:start="99:21" pos:end="99:22">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:36"><expr pos:start="103:9" pos:end="103:35"><name pos:start="103:9" pos:end="103:11">end</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="103:31"><name pos:start="103:15" pos:end="103:22">get_bits</name><argument_list pos:start="103:23" pos:end="103:31">(<argument pos:start="103:24" pos:end="103:26"><expr pos:start="103:24" pos:end="103:26"><operator pos:start="103:24" pos:end="103:24">&amp;</operator><name pos:start="103:25" pos:end="103:26">gb</name></expr></argument>, <argument pos:start="103:29" pos:end="103:30"><expr pos:start="103:29" pos:end="103:30"><literal type="number" pos:start="103:29" pos:end="103:30">12</literal></expr></argument>)</argument_list></call> <operator pos:start="103:33" pos:end="103:33">*</operator> <literal type="number" pos:start="103:35" pos:end="103:35">2</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:32"><expr pos:start="107:9" pos:end="107:31"><name pos:start="107:9" pos:end="107:26">substr_header_size</name> <operator pos:start="107:28" pos:end="107:29">+=</operator> <literal type="number" pos:start="107:31" pos:end="107:31">2</literal></expr>;</expr_stmt>



        <if_stmt pos:start="111:9" pos:end="125:9"><if pos:start="111:9" pos:end="125:9">if <condition pos:start="111:12" pos:end="111:30">(<expr pos:start="111:13" pos:end="111:29"><name pos:start="111:13" pos:end="111:29">extraword_present</name></expr>)</condition> <block pos:start="111:32" pos:end="125:9">{<block_content pos:start="113:13" pos:end="123:36">

            <if_stmt pos:start="113:13" pos:end="119:13"><if pos:start="113:13" pos:end="119:13">if <condition pos:start="113:16" pos:end="113:54">(<expr pos:start="113:17" pos:end="113:53"><name pos:start="113:17" pos:end="113:34"><name pos:start="113:17" pos:end="113:17">m</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:24">avctx</name><operator pos:start="113:25" pos:end="113:26">-&gt;</operator><name pos:start="113:27" pos:end="113:34">codec_id</name></name> <operator pos:start="113:36" pos:end="113:37">==</operator> <name pos:start="113:39" pos:end="113:53">AV_CODEC_ID_MLP</name></expr>)</condition> <block pos:start="113:56" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:27">

                <expr_stmt pos:start="115:17" pos:end="115:88"><expr pos:start="115:17" pos:end="115:87"><call pos:start="115:17" pos:end="115:87"><name pos:start="115:17" pos:end="115:22">av_log</name><argument_list pos:start="115:23" pos:end="115:87">(<argument pos:start="115:24" pos:end="115:31"><expr pos:start="115:24" pos:end="115:31"><name pos:start="115:24" pos:end="115:31"><name pos:start="115:24" pos:end="115:24">m</name><operator pos:start="115:25" pos:end="115:26">-&gt;</operator><name pos:start="115:27" pos:end="115:31">avctx</name></name></expr></argument>, <argument pos:start="115:34" pos:end="115:45"><expr pos:start="115:34" pos:end="115:45"><name pos:start="115:34" pos:end="115:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:48" pos:end="115:86"><expr pos:start="115:48" pos:end="115:86"><literal type="string" pos:start="115:48" pos:end="115:86">"There must be no extraword for MLP.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="117:17" pos:end="117:27">goto <name pos:start="117:22" pos:end="117:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:31"><expr pos:start="121:13" pos:end="121:30"><call pos:start="121:13" pos:end="121:30"><name pos:start="121:13" pos:end="121:21">skip_bits</name><argument_list pos:start="121:22" pos:end="121:30">(<argument pos:start="121:23" pos:end="121:25"><expr pos:start="121:23" pos:end="121:25"><operator pos:start="121:23" pos:end="121:23">&amp;</operator><name pos:start="121:24" pos:end="121:25">gb</name></expr></argument>, <argument pos:start="121:28" pos:end="121:29"><expr pos:start="121:28" pos:end="121:29"><literal type="number" pos:start="121:28" pos:end="121:29">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:36"><expr pos:start="123:13" pos:end="123:35"><name pos:start="123:13" pos:end="123:30">substr_header_size</name> <operator pos:start="123:32" pos:end="123:33">+=</operator> <literal type="number" pos:start="123:35" pos:end="123:35">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:57">(<expr pos:start="129:13" pos:end="129:56"><operator pos:start="129:13" pos:end="129:13">!</operator><operator pos:start="129:14" pos:end="129:14">(</operator><name pos:start="129:15" pos:end="129:31">nonrestart_substr</name> <operator pos:start="129:33" pos:end="129:33">^</operator> <name pos:start="129:35" pos:end="129:55"><name pos:start="129:35" pos:end="129:35">m</name><operator pos:start="129:36" pos:end="129:37">-&gt;</operator><name pos:start="129:38" pos:end="129:55">is_major_sync_unit</name></name><operator pos:start="129:56" pos:end="129:56">)</operator></expr>)</condition> <block pos:start="129:59" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:23">

            <expr_stmt pos:start="131:13" pos:end="131:75"><expr pos:start="131:13" pos:end="131:74"><call pos:start="131:13" pos:end="131:74"><name pos:start="131:13" pos:end="131:18">av_log</name><argument_list pos:start="131:19" pos:end="131:74">(<argument pos:start="131:20" pos:end="131:27"><expr pos:start="131:20" pos:end="131:27"><name pos:start="131:20" pos:end="131:27"><name pos:start="131:20" pos:end="131:20">m</name><operator pos:start="131:21" pos:end="131:22">-&gt;</operator><name pos:start="131:23" pos:end="131:27">avctx</name></name></expr></argument>, <argument pos:start="131:30" pos:end="131:41"><expr pos:start="131:30" pos:end="131:41"><name pos:start="131:30" pos:end="131:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="131:44" pos:end="131:73"><expr pos:start="131:44" pos:end="131:73"><literal type="string" pos:start="131:44" pos:end="131:73">"Invalid nonrestart_substr.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="133:13" pos:end="133:23">goto <name pos:start="133:18" pos:end="133:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="139:9" pos:end="149:9"><if pos:start="139:9" pos:end="149:9">if <condition pos:start="139:12" pos:end="139:60">(<expr pos:start="139:13" pos:end="139:59"><name pos:start="139:13" pos:end="139:15">end</name> <operator pos:start="139:17" pos:end="139:17">+</operator> <name pos:start="139:19" pos:end="139:29">header_size</name> <operator pos:start="139:31" pos:end="139:31">+</operator> <name pos:start="139:33" pos:end="139:50">substr_header_size</name> <operator pos:start="139:52" pos:end="139:52">&gt;</operator> <name pos:start="139:54" pos:end="139:59">length</name></expr>)</condition> <block pos:start="139:62" pos:end="149:9">{<block_content pos:start="141:13" pos:end="147:60">

            <expr_stmt pos:start="141:13" pos:end="145:40"><expr pos:start="141:13" pos:end="145:39"><call pos:start="141:13" pos:end="145:39"><name pos:start="141:13" pos:end="141:18">av_log</name><argument_list pos:start="141:19" pos:end="145:39">(<argument pos:start="141:20" pos:end="141:27"><expr pos:start="141:20" pos:end="141:27"><name pos:start="141:20" pos:end="141:27"><name pos:start="141:20" pos:end="141:20">m</name><operator pos:start="141:21" pos:end="141:22">-&gt;</operator><name pos:start="141:23" pos:end="141:27">avctx</name></name></expr></argument>, <argument pos:start="141:30" pos:end="141:41"><expr pos:start="141:30" pos:end="141:41"><name pos:start="141:30" pos:end="141:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="143:20" pos:end="145:30"><expr pos:start="143:20" pos:end="145:30"><literal type="string" pos:start="143:20" pos:end="143:75">"Indicated length of substream %d data goes off end of "</literal>

                   <literal type="string" pos:start="145:20" pos:end="145:30">"packet.\n"</literal></expr></argument>, <argument pos:start="145:33" pos:end="145:38"><expr pos:start="145:33" pos:end="145:38"><name pos:start="145:33" pos:end="145:38">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:60"><expr pos:start="147:13" pos:end="147:59"><name pos:start="147:13" pos:end="147:15">end</name> <operator pos:start="147:17" pos:end="147:17">=</operator> <name pos:start="147:19" pos:end="147:24">length</name> <operator pos:start="147:26" pos:end="147:26">-</operator> <name pos:start="147:28" pos:end="147:38">header_size</name> <operator pos:start="147:40" pos:end="147:40">-</operator> <name pos:start="147:42" pos:end="147:59">substr_header_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="153:9" pos:end="165:9"><if pos:start="153:9" pos:end="165:9">if <condition pos:start="153:12" pos:end="153:34">(<expr pos:start="153:13" pos:end="153:33"><name pos:start="153:13" pos:end="153:15">end</name> <operator pos:start="153:17" pos:end="153:17">&lt;</operator> <name pos:start="153:19" pos:end="153:33">substream_start</name></expr>)</condition> <block pos:start="153:36" pos:end="165:9">{<block_content pos:start="155:13" pos:end="163:23">

            <expr_stmt pos:start="155:13" pos:end="161:27"><expr pos:start="155:13" pos:end="161:26"><call pos:start="155:13" pos:end="161:26"><name pos:start="155:13" pos:end="155:18">av_log</name><argument_list pos:start="155:19" pos:end="161:26">(<argument pos:start="155:20" pos:end="155:24"><expr pos:start="155:20" pos:end="155:24"><name pos:start="155:20" pos:end="155:24">avctx</name></expr></argument>, <argument pos:start="155:27" pos:end="155:38"><expr pos:start="155:27" pos:end="155:38"><name pos:start="155:27" pos:end="155:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="157:20" pos:end="159:63"><expr pos:start="157:20" pos:end="159:63"><literal type="string" pos:start="157:20" pos:end="157:63">"Indicated end offset of substream %d data "</literal>

                   <literal type="string" pos:start="159:20" pos:end="159:63">"is smaller than calculated start offset.\n"</literal></expr></argument>,

                   <argument pos:start="161:20" pos:end="161:25"><expr pos:start="161:20" pos:end="161:25"><name pos:start="161:20" pos:end="161:25">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="163:13" pos:end="163:23">goto <name pos:start="163:18" pos:end="163:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="169:9" pos:end="171:21"><if pos:start="169:9" pos:end="171:21">if <condition pos:start="169:12" pos:end="169:46">(<expr pos:start="169:13" pos:end="169:45"><name pos:start="169:13" pos:end="169:18">substr</name> <operator pos:start="169:20" pos:end="169:20">&gt;</operator> <name pos:start="169:22" pos:end="169:45"><name pos:start="169:22" pos:end="169:22">m</name><operator pos:start="169:23" pos:end="169:24">-&gt;</operator><name pos:start="169:25" pos:end="169:45">max_decoded_substream</name></name></expr>)</condition><block type="pseudo" pos:start="171:13" pos:end="171:21"><block_content pos:start="171:13" pos:end="171:21">

            <continue pos:start="171:13" pos:end="171:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="175:9" pos:end="175:61"><expr pos:start="175:9" pos:end="175:60"><name pos:start="175:9" pos:end="175:40"><name pos:start="175:9" pos:end="175:32">substream_parity_present</name><index pos:start="175:33" pos:end="175:40">[<expr pos:start="175:34" pos:end="175:39"><name pos:start="175:34" pos:end="175:39">substr</name></expr>]</index></name> <operator pos:start="175:42" pos:end="175:42">=</operator> <name pos:start="175:44" pos:end="175:60">checkdata_present</name></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:59"><expr pos:start="177:9" pos:end="177:58"><name pos:start="177:9" pos:end="177:34"><name pos:start="177:9" pos:end="177:26">substream_data_len</name><index pos:start="177:27" pos:end="177:34">[<expr pos:start="177:28" pos:end="177:33"><name pos:start="177:28" pos:end="177:33">substr</name></expr>]</index></name> <operator pos:start="177:36" pos:end="177:36">=</operator> <name pos:start="177:38" pos:end="177:40">end</name> <operator pos:start="177:42" pos:end="177:42">-</operator> <name pos:start="177:44" pos:end="177:58">substream_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:30"><expr pos:start="179:9" pos:end="179:29"><name pos:start="179:9" pos:end="179:23">substream_start</name> <operator pos:start="179:25" pos:end="179:25">=</operator> <name pos:start="179:27" pos:end="179:29">end</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="185:5" pos:end="185:51"><expr pos:start="185:5" pos:end="185:50"><name pos:start="185:5" pos:end="185:15">parity_bits</name>  <operator pos:start="185:18" pos:end="185:18">=</operator> <call pos:start="185:20" pos:end="185:50"><name pos:start="185:20" pos:end="185:42">ff_mlp_calculate_parity</name><argument_list pos:start="185:43" pos:end="185:50">(<argument pos:start="185:44" pos:end="185:46"><expr pos:start="185:44" pos:end="185:46"><name pos:start="185:44" pos:end="185:46">buf</name></expr></argument>, <argument pos:start="185:49" pos:end="185:49"><expr pos:start="185:49" pos:end="185:49"><literal type="number" pos:start="185:49" pos:end="185:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:82"><expr pos:start="187:5" pos:end="187:81"><name pos:start="187:5" pos:end="187:15">parity_bits</name> <operator pos:start="187:17" pos:end="187:18">^=</operator> <call pos:start="187:20" pos:end="187:81"><name pos:start="187:20" pos:end="187:42">ff_mlp_calculate_parity</name><argument_list pos:start="187:43" pos:end="187:81">(<argument pos:start="187:44" pos:end="187:60"><expr pos:start="187:44" pos:end="187:60"><name pos:start="187:44" pos:end="187:46">buf</name> <operator pos:start="187:48" pos:end="187:48">+</operator> <name pos:start="187:50" pos:end="187:60">header_size</name></expr></argument>, <argument pos:start="187:63" pos:end="187:80"><expr pos:start="187:63" pos:end="187:80"><name pos:start="187:63" pos:end="187:80">substr_header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="191:5" pos:end="197:5"><if pos:start="191:5" pos:end="197:5">if <condition pos:start="191:8" pos:end="191:58">(<expr pos:start="191:9" pos:end="191:57"><operator pos:start="191:9" pos:end="191:9">(</operator><operator pos:start="191:10" pos:end="191:10">(</operator><operator pos:start="191:11" pos:end="191:11">(</operator><name pos:start="191:12" pos:end="191:22">parity_bits</name> <operator pos:start="191:24" pos:end="191:25">&gt;&gt;</operator> <literal type="number" pos:start="191:27" pos:end="191:27">4</literal><operator pos:start="191:28" pos:end="191:28">)</operator> <operator pos:start="191:30" pos:end="191:30">^</operator> <name pos:start="191:32" pos:end="191:42">parity_bits</name><operator pos:start="191:43" pos:end="191:43">)</operator> <operator pos:start="191:45" pos:end="191:45">&amp;</operator> <literal type="number" pos:start="191:47" pos:end="191:49">0xF</literal><operator pos:start="191:50" pos:end="191:50">)</operator> <operator pos:start="191:52" pos:end="191:53">!=</operator> <literal type="number" pos:start="191:55" pos:end="191:57">0xF</literal></expr>)</condition> <block pos:start="191:60" pos:end="197:5">{<block_content pos:start="193:9" pos:end="195:19">

        <expr_stmt pos:start="193:9" pos:end="193:62"><expr pos:start="193:9" pos:end="193:61"><call pos:start="193:9" pos:end="193:61"><name pos:start="193:9" pos:end="193:14">av_log</name><argument_list pos:start="193:15" pos:end="193:61">(<argument pos:start="193:16" pos:end="193:20"><expr pos:start="193:16" pos:end="193:20"><name pos:start="193:16" pos:end="193:20">avctx</name></expr></argument>, <argument pos:start="193:23" pos:end="193:34"><expr pos:start="193:23" pos:end="193:34"><name pos:start="193:23" pos:end="193:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="193:37" pos:end="193:60"><expr pos:start="193:37" pos:end="193:60"><literal type="string" pos:start="193:37" pos:end="193:60">"Parity check failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="195:9" pos:end="195:19">goto <name pos:start="195:14" pos:end="195:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="201:5" pos:end="201:44"><expr pos:start="201:5" pos:end="201:43"><name pos:start="201:5" pos:end="201:7">buf</name> <operator pos:start="201:9" pos:end="201:10">+=</operator> <name pos:start="201:12" pos:end="201:22">header_size</name> <operator pos:start="201:24" pos:end="201:24">+</operator> <name pos:start="201:26" pos:end="201:43">substr_header_size</name></expr>;</expr_stmt>



    <for pos:start="205:5" pos:end="357:5">for <control pos:start="205:9" pos:end="205:66">(<init pos:start="205:10" pos:end="205:20"><expr pos:start="205:10" pos:end="205:19"><name pos:start="205:10" pos:end="205:15">substr</name> <operator pos:start="205:17" pos:end="205:17">=</operator> <literal type="number" pos:start="205:19" pos:end="205:19">0</literal></expr>;</init> <condition pos:start="205:22" pos:end="205:56"><expr pos:start="205:22" pos:end="205:55"><name pos:start="205:22" pos:end="205:27">substr</name> <operator pos:start="205:29" pos:end="205:30">&lt;=</operator> <name pos:start="205:32" pos:end="205:55"><name pos:start="205:32" pos:end="205:32">m</name><operator pos:start="205:33" pos:end="205:34">-&gt;</operator><name pos:start="205:35" pos:end="205:55">max_decoded_substream</name></name></expr>;</condition> <incr pos:start="205:58" pos:end="205:65"><expr pos:start="205:58" pos:end="205:65"><name pos:start="205:58" pos:end="205:63">substr</name><operator pos:start="205:64" pos:end="205:65">++</operator></expr></incr>)</control> <block pos:start="205:68" pos:end="357:5">{<block_content pos:start="207:9" pos:end="355:42">

        <decl_stmt pos:start="207:9" pos:end="207:45"><decl pos:start="207:9" pos:end="207:44"><type pos:start="207:9" pos:end="207:19"><name pos:start="207:9" pos:end="207:17">SubStream</name> <modifier pos:start="207:19" pos:end="207:19">*</modifier></type><name pos:start="207:20" pos:end="207:20">s</name> <init pos:start="207:22" pos:end="207:44">= <expr pos:start="207:24" pos:end="207:44"><operator pos:start="207:24" pos:end="207:24">&amp;</operator><name pos:start="207:25" pos:end="207:44"><name pos:start="207:25" pos:end="207:25">m</name><operator pos:start="207:26" pos:end="207:27">-&gt;</operator><name pos:start="207:28" pos:end="207:36">substream</name><index pos:start="207:37" pos:end="207:44">[<expr pos:start="207:38" pos:end="207:43"><name pos:start="207:38" pos:end="207:43">substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:64"><expr pos:start="209:9" pos:end="209:63"><call pos:start="209:9" pos:end="209:63"><name pos:start="209:9" pos:end="209:21">init_get_bits</name><argument_list pos:start="209:22" pos:end="209:63">(<argument pos:start="209:23" pos:end="209:25"><expr pos:start="209:23" pos:end="209:25"><operator pos:start="209:23" pos:end="209:23">&amp;</operator><name pos:start="209:24" pos:end="209:25">gb</name></expr></argument>, <argument pos:start="209:28" pos:end="209:30"><expr pos:start="209:28" pos:end="209:30"><name pos:start="209:28" pos:end="209:30">buf</name></expr></argument>, <argument pos:start="209:33" pos:end="209:62"><expr pos:start="209:33" pos:end="209:62"><name pos:start="209:33" pos:end="209:58"><name pos:start="209:33" pos:end="209:50">substream_data_len</name><index pos:start="209:51" pos:end="209:58">[<expr pos:start="209:52" pos:end="209:57"><name pos:start="209:52" pos:end="209:57">substr</name></expr>]</index></name> <operator pos:start="209:60" pos:end="209:60">*</operator> <literal type="number" pos:start="209:62" pos:end="209:62">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="213:9" pos:end="213:30"><expr pos:start="213:9" pos:end="213:29"><name pos:start="213:9" pos:end="213:25"><name pos:start="213:9" pos:end="213:9">m</name><operator pos:start="213:10" pos:end="213:11">-&gt;</operator><name pos:start="213:12" pos:end="213:25">matrix_changed</name></name> <operator pos:start="213:27" pos:end="213:27">=</operator> <literal type="number" pos:start="213:29" pos:end="213:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:64"><expr pos:start="215:9" pos:end="215:63"><call pos:start="215:9" pos:end="215:63"><name pos:start="215:9" pos:end="215:14">memset</name><argument_list pos:start="215:15" pos:end="215:63">(<argument pos:start="215:16" pos:end="215:32"><expr pos:start="215:16" pos:end="215:32"><name pos:start="215:16" pos:end="215:32"><name pos:start="215:16" pos:end="215:16">m</name><operator pos:start="215:17" pos:end="215:18">-&gt;</operator><name pos:start="215:19" pos:end="215:32">filter_changed</name></name></expr></argument>, <argument pos:start="215:35" pos:end="215:35"><expr pos:start="215:35" pos:end="215:35"><literal type="number" pos:start="215:35" pos:end="215:35">0</literal></expr></argument>, <argument pos:start="215:38" pos:end="215:62"><expr pos:start="215:38" pos:end="215:62"><sizeof pos:start="215:38" pos:end="215:62">sizeof<argument_list pos:start="215:44" pos:end="215:62">(<argument pos:start="215:45" pos:end="215:61"><expr pos:start="215:45" pos:end="215:61"><name pos:start="215:45" pos:end="215:61"><name pos:start="215:45" pos:end="215:45">m</name><operator pos:start="215:46" pos:end="215:47">-&gt;</operator><name pos:start="215:48" pos:end="215:61">filter_changed</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="219:9" pos:end="219:24"><expr pos:start="219:9" pos:end="219:23"><name pos:start="219:9" pos:end="219:19"><name pos:start="219:9" pos:end="219:9">s</name><operator pos:start="219:10" pos:end="219:11">-&gt;</operator><name pos:start="219:12" pos:end="219:19">blockpos</name></name> <operator pos:start="219:21" pos:end="219:21">=</operator> <literal type="number" pos:start="219:23" pos:end="219:23">0</literal></expr>;</expr_stmt>

        <do pos:start="221:9" pos:end="269:34">do <block pos:start="221:12" pos:end="269:9">{<block_content pos:start="223:13" pos:end="265:47">

            <if_stmt pos:start="223:13" pos:end="247:13"><if pos:start="223:13" pos:end="247:13">if <condition pos:start="223:16" pos:end="223:31">(<expr pos:start="223:17" pos:end="223:30"><call pos:start="223:17" pos:end="223:30"><name pos:start="223:17" pos:end="223:25">get_bits1</name><argument_list pos:start="223:26" pos:end="223:30">(<argument pos:start="223:27" pos:end="223:29"><expr pos:start="223:27" pos:end="223:29"><operator pos:start="223:27" pos:end="223:27">&amp;</operator><name pos:start="223:28" pos:end="223:29">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="223:33" pos:end="247:13">{<block_content pos:start="225:17" pos:end="245:37">

                <if_stmt pos:start="225:17" pos:end="235:17"><if pos:start="225:17" pos:end="235:17">if <condition pos:start="225:20" pos:end="225:35">(<expr pos:start="225:21" pos:end="225:34"><call pos:start="225:21" pos:end="225:34"><name pos:start="225:21" pos:end="225:29">get_bits1</name><argument_list pos:start="225:30" pos:end="225:34">(<argument pos:start="225:31" pos:end="225:33"><expr pos:start="225:31" pos:end="225:33"><operator pos:start="225:31" pos:end="225:31">&amp;</operator><name pos:start="225:32" pos:end="225:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="225:37" pos:end="235:17">{<block_content pos:start="229:21" pos:end="233:40">

                    <comment type="block" pos:start="227:21" pos:end="227:61">/* A restart header should be present. */</comment>

                    <if_stmt pos:start="229:21" pos:end="231:41"><if pos:start="229:21" pos:end="231:41">if <condition pos:start="229:24" pos:end="229:69">(<expr pos:start="229:25" pos:end="229:68"><call pos:start="229:25" pos:end="229:64"><name pos:start="229:25" pos:end="229:43">read_restart_header</name><argument_list pos:start="229:44" pos:end="229:64">(<argument pos:start="229:45" pos:end="229:45"><expr pos:start="229:45" pos:end="229:45"><name pos:start="229:45" pos:end="229:45">m</name></expr></argument>, <argument pos:start="229:48" pos:end="229:50"><expr pos:start="229:48" pos:end="229:50"><operator pos:start="229:48" pos:end="229:48">&amp;</operator><name pos:start="229:49" pos:end="229:50">gb</name></expr></argument>, <argument pos:start="229:53" pos:end="229:55"><expr pos:start="229:53" pos:end="229:55"><name pos:start="229:53" pos:end="229:55">buf</name></expr></argument>, <argument pos:start="229:58" pos:end="229:63"><expr pos:start="229:58" pos:end="229:63"><name pos:start="229:58" pos:end="229:63">substr</name></expr></argument>)</argument_list></call> <operator pos:start="229:66" pos:end="229:66">&lt;</operator> <literal type="number" pos:start="229:68" pos:end="229:68">0</literal></expr>)</condition><block type="pseudo" pos:start="231:25" pos:end="231:41"><block_content pos:start="231:25" pos:end="231:41">

                        <goto pos:start="231:25" pos:end="231:41">goto <name pos:start="231:30" pos:end="231:40">next_substr</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="233:21" pos:end="233:40"><expr pos:start="233:21" pos:end="233:39"><name pos:start="233:21" pos:end="233:35"><name pos:start="233:21" pos:end="233:21">s</name><operator pos:start="233:22" pos:end="233:23">-&gt;</operator><name pos:start="233:24" pos:end="233:35">restart_seen</name></name> <operator pos:start="233:37" pos:end="233:37">=</operator> <literal type="number" pos:start="233:39" pos:end="233:39">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="239:17" pos:end="241:37"><if pos:start="239:17" pos:end="241:37">if <condition pos:start="239:20" pos:end="239:37">(<expr pos:start="239:21" pos:end="239:36"><operator pos:start="239:21" pos:end="239:21">!</operator><name pos:start="239:22" pos:end="239:36"><name pos:start="239:22" pos:end="239:22">s</name><operator pos:start="239:23" pos:end="239:24">-&gt;</operator><name pos:start="239:25" pos:end="239:36">restart_seen</name></name></expr>)</condition><block type="pseudo" pos:start="241:21" pos:end="241:37"><block_content pos:start="241:21" pos:end="241:37">

                    <goto pos:start="241:21" pos:end="241:37">goto <name pos:start="241:26" pos:end="241:36">next_substr</name>;</goto></block_content></block></if></if_stmt>

                <if_stmt pos:start="243:17" pos:end="245:37"><if pos:start="243:17" pos:end="245:37">if <condition pos:start="243:20" pos:end="243:61">(<expr pos:start="243:21" pos:end="243:60"><call pos:start="243:21" pos:end="243:56"><name pos:start="243:21" pos:end="243:40">read_decoding_params</name><argument_list pos:start="243:41" pos:end="243:56">(<argument pos:start="243:42" pos:end="243:42"><expr pos:start="243:42" pos:end="243:42"><name pos:start="243:42" pos:end="243:42">m</name></expr></argument>, <argument pos:start="243:45" pos:end="243:47"><expr pos:start="243:45" pos:end="243:47"><operator pos:start="243:45" pos:end="243:45">&amp;</operator><name pos:start="243:46" pos:end="243:47">gb</name></expr></argument>, <argument pos:start="243:50" pos:end="243:55"><expr pos:start="243:50" pos:end="243:55"><name pos:start="243:50" pos:end="243:55">substr</name></expr></argument>)</argument_list></call> <operator pos:start="243:58" pos:end="243:58">&lt;</operator> <literal type="number" pos:start="243:60" pos:end="243:60">0</literal></expr>)</condition><block type="pseudo" pos:start="245:21" pos:end="245:37"><block_content pos:start="245:21" pos:end="245:37">

                    <goto pos:start="245:21" pos:end="245:37">goto <name pos:start="245:26" pos:end="245:36">next_substr</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="251:13" pos:end="253:33"><if pos:start="251:13" pos:end="253:33">if <condition pos:start="251:16" pos:end="251:33">(<expr pos:start="251:17" pos:end="251:32"><operator pos:start="251:17" pos:end="251:17">!</operator><name pos:start="251:18" pos:end="251:32"><name pos:start="251:18" pos:end="251:18">s</name><operator pos:start="251:19" pos:end="251:20">-&gt;</operator><name pos:start="251:21" pos:end="251:32">restart_seen</name></name></expr>)</condition><block type="pseudo" pos:start="253:17" pos:end="253:33"><block_content pos:start="253:17" pos:end="253:33">

                <goto pos:start="253:17" pos:end="253:33">goto <name pos:start="253:22" pos:end="253:32">next_substr</name>;</goto></block_content></block></if></if_stmt>



            <if_stmt pos:start="257:13" pos:end="259:27"><if pos:start="257:13" pos:end="259:27">if <condition pos:start="257:16" pos:end="257:60">(<expr pos:start="257:17" pos:end="257:59"><operator pos:start="257:17" pos:end="257:17">(</operator><name pos:start="257:18" pos:end="257:20">ret</name> <operator pos:start="257:22" pos:end="257:22">=</operator> <call pos:start="257:24" pos:end="257:54"><name pos:start="257:24" pos:end="257:38">read_block_data</name><argument_list pos:start="257:39" pos:end="257:54">(<argument pos:start="257:40" pos:end="257:40"><expr pos:start="257:40" pos:end="257:40"><name pos:start="257:40" pos:end="257:40">m</name></expr></argument>, <argument pos:start="257:43" pos:end="257:45"><expr pos:start="257:43" pos:end="257:45"><operator pos:start="257:43" pos:end="257:43">&amp;</operator><name pos:start="257:44" pos:end="257:45">gb</name></expr></argument>, <argument pos:start="257:48" pos:end="257:53"><expr pos:start="257:48" pos:end="257:53"><name pos:start="257:48" pos:end="257:53">substr</name></expr></argument>)</argument_list></call><operator pos:start="257:55" pos:end="257:55">)</operator> <operator pos:start="257:57" pos:end="257:57">&lt;</operator> <literal type="number" pos:start="257:59" pos:end="257:59">0</literal></expr>)</condition><block type="pseudo" pos:start="259:17" pos:end="259:27"><block_content pos:start="259:17" pos:end="259:27">

                <return pos:start="259:17" pos:end="259:27">return <expr pos:start="259:24" pos:end="259:26"><name pos:start="259:24" pos:end="259:26">ret</name></expr>;</return></block_content></block></if></if_stmt>



            <if_stmt pos:start="263:13" pos:end="265:47"><if pos:start="263:13" pos:end="265:47">if <condition pos:start="263:16" pos:end="263:70">(<expr pos:start="263:17" pos:end="263:69"><call pos:start="263:17" pos:end="263:35"><name pos:start="263:17" pos:end="263:30">get_bits_count</name><argument_list pos:start="263:31" pos:end="263:35">(<argument pos:start="263:32" pos:end="263:34"><expr pos:start="263:32" pos:end="263:34"><operator pos:start="263:32" pos:end="263:32">&amp;</operator><name pos:start="263:33" pos:end="263:34">gb</name></expr></argument>)</argument_list></call> <operator pos:start="263:37" pos:end="263:38">&gt;=</operator> <name pos:start="263:40" pos:end="263:65"><name pos:start="263:40" pos:end="263:57">substream_data_len</name><index pos:start="263:58" pos:end="263:65">[<expr pos:start="263:59" pos:end="263:64"><name pos:start="263:59" pos:end="263:64">substr</name></expr>]</index></name> <operator pos:start="263:67" pos:end="263:67">*</operator> <literal type="number" pos:start="263:69" pos:end="263:69">8</literal></expr>)</condition><block type="pseudo" pos:start="265:17" pos:end="265:47"><block_content pos:start="265:17" pos:end="265:47">

                <goto pos:start="265:17" pos:end="265:47">goto <name pos:start="265:22" pos:end="265:46">substream_length_mismatch</name>;</goto></block_content></block></if></if_stmt>



        </block_content>}</block> while <condition pos:start="269:17" pos:end="269:33">(<expr pos:start="269:18" pos:end="269:32"><operator pos:start="269:18" pos:end="269:18">!</operator><call pos:start="269:19" pos:end="269:32"><name pos:start="269:19" pos:end="269:27">get_bits1</name><argument_list pos:start="269:28" pos:end="269:32">(<argument pos:start="269:29" pos:end="269:31"><expr pos:start="269:29" pos:end="269:31"><operator pos:start="269:29" pos:end="269:29">&amp;</operator><name pos:start="269:30" pos:end="269:31">gb</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>



        <expr_stmt pos:start="273:9" pos:end="273:52"><expr pos:start="273:9" pos:end="273:51"><call pos:start="273:9" pos:end="273:51"><name pos:start="273:9" pos:end="273:17">skip_bits</name><argument_list pos:start="273:18" pos:end="273:51">(<argument pos:start="273:19" pos:end="273:21"><expr pos:start="273:19" pos:end="273:21"><operator pos:start="273:19" pos:end="273:19">&amp;</operator><name pos:start="273:20" pos:end="273:21">gb</name></expr></argument>, <argument pos:start="273:24" pos:end="273:50"><expr pos:start="273:24" pos:end="273:50"><operator pos:start="273:24" pos:end="273:24">(</operator><operator pos:start="273:25" pos:end="273:25">-</operator><call pos:start="273:26" pos:end="273:44"><name pos:start="273:26" pos:end="273:39">get_bits_count</name><argument_list pos:start="273:40" pos:end="273:44">(<argument pos:start="273:41" pos:end="273:43"><expr pos:start="273:41" pos:end="273:43"><operator pos:start="273:41" pos:end="273:41">&amp;</operator><name pos:start="273:42" pos:end="273:43">gb</name></expr></argument>)</argument_list></call><operator pos:start="273:45" pos:end="273:45">)</operator> <operator pos:start="273:47" pos:end="273:47">&amp;</operator> <literal type="number" pos:start="273:49" pos:end="273:50">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="277:9" pos:end="305:9"><if pos:start="277:9" pos:end="305:9">if <condition pos:start="277:12" pos:end="277:71">(<expr pos:start="277:13" pos:end="277:70"><name pos:start="277:13" pos:end="277:38"><name pos:start="277:13" pos:end="277:30">substream_data_len</name><index pos:start="277:31" pos:end="277:38">[<expr pos:start="277:32" pos:end="277:37"><name pos:start="277:32" pos:end="277:37">substr</name></expr>]</index></name> <operator pos:start="277:40" pos:end="277:40">*</operator> <literal type="number" pos:start="277:42" pos:end="277:44">8</literal> <operator pos:start="277:44" pos:end="277:44">-</operator> <call pos:start="277:46" pos:end="277:64"><name pos:start="277:46" pos:end="277:59">get_bits_count</name><argument_list pos:start="277:60" pos:end="277:64">(<argument pos:start="277:61" pos:end="277:63"><expr pos:start="277:61" pos:end="277:63"><operator pos:start="277:61" pos:end="277:61">&amp;</operator><name pos:start="277:62" pos:end="277:63">gb</name></expr></argument>)</argument_list></call> <operator pos:start="277:66" pos:end="277:67">&gt;=</operator> <literal type="number" pos:start="277:69" pos:end="277:70">32</literal></expr>)</condition> <block pos:start="277:73" pos:end="305:9">{<block_content pos:start="279:13" pos:end="303:76">

            <decl_stmt pos:start="279:13" pos:end="279:27"><decl pos:start="279:13" pos:end="279:26"><type pos:start="279:13" pos:end="279:15"><name pos:start="279:13" pos:end="279:15">int</name></type> <name pos:start="279:17" pos:end="279:26">shorten_by</name></decl>;</decl_stmt>



            <if_stmt pos:start="283:13" pos:end="285:43"><if pos:start="283:13" pos:end="285:43">if <condition pos:start="283:16" pos:end="283:44">(<expr pos:start="283:17" pos:end="283:43"><call pos:start="283:17" pos:end="283:33"><name pos:start="283:17" pos:end="283:24">get_bits</name><argument_list pos:start="283:25" pos:end="283:33">(<argument pos:start="283:26" pos:end="283:28"><expr pos:start="283:26" pos:end="283:28"><operator pos:start="283:26" pos:end="283:26">&amp;</operator><name pos:start="283:27" pos:end="283:28">gb</name></expr></argument>, <argument pos:start="283:31" pos:end="283:32"><expr pos:start="283:31" pos:end="283:32"><literal type="number" pos:start="283:31" pos:end="283:32">16</literal></expr></argument>)</argument_list></call> <operator pos:start="283:35" pos:end="283:36">!=</operator> <literal type="number" pos:start="283:38" pos:end="283:43">0xD234</literal></expr>)</condition><block type="pseudo" pos:start="285:17" pos:end="285:43"><block_content pos:start="285:17" pos:end="285:43">

                <return pos:start="285:17" pos:end="285:43">return <expr pos:start="285:24" pos:end="285:42"><name pos:start="285:24" pos:end="285:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="289:13" pos:end="289:43"><expr pos:start="289:13" pos:end="289:42"><name pos:start="289:13" pos:end="289:22">shorten_by</name> <operator pos:start="289:24" pos:end="289:24">=</operator> <call pos:start="289:26" pos:end="289:42"><name pos:start="289:26" pos:end="289:33">get_bits</name><argument_list pos:start="289:34" pos:end="289:42">(<argument pos:start="289:35" pos:end="289:37"><expr pos:start="289:35" pos:end="289:37"><operator pos:start="289:35" pos:end="289:35">&amp;</operator><name pos:start="289:36" pos:end="289:37">gb</name></expr></argument>, <argument pos:start="289:40" pos:end="289:41"><expr pos:start="289:40" pos:end="289:41"><literal type="number" pos:start="289:40" pos:end="289:41">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="291:13" pos:end="297:43"><if pos:start="291:13" pos:end="293:71">if      <condition pos:start="291:21" pos:end="291:86">(<expr pos:start="291:22" pos:end="291:85"><name pos:start="291:22" pos:end="291:39"><name pos:start="291:22" pos:end="291:22">m</name><operator pos:start="291:23" pos:end="291:24">-&gt;</operator><name pos:start="291:25" pos:end="291:29">avctx</name><operator pos:start="291:30" pos:end="291:31">-&gt;</operator><name pos:start="291:32" pos:end="291:39">codec_id</name></name> <operator pos:start="291:41" pos:end="291:42">==</operator> <name pos:start="291:44" pos:end="291:61">AV_CODEC_ID_TRUEHD</name> <operator pos:start="291:63" pos:end="291:64">&amp;&amp;</operator> <name pos:start="291:66" pos:end="291:75">shorten_by</name>  <operator pos:start="291:78" pos:end="291:78">&amp;</operator> <literal type="number" pos:start="291:80" pos:end="291:85">0x2000</literal></expr>)</condition><block type="pseudo" pos:start="293:17" pos:end="293:71"><block_content pos:start="293:17" pos:end="293:71">

                <expr_stmt pos:start="293:17" pos:end="293:71"><expr pos:start="293:17" pos:end="293:70"><name pos:start="293:17" pos:end="293:27"><name pos:start="293:17" pos:end="293:17">s</name><operator pos:start="293:18" pos:end="293:19">-&gt;</operator><name pos:start="293:20" pos:end="293:27">blockpos</name></name> <operator pos:start="293:29" pos:end="293:30">-=</operator> <call pos:start="293:32" pos:end="293:70"><name pos:start="293:32" pos:end="293:36">FFMIN</name><argument_list pos:start="293:37" pos:end="293:70">(<argument pos:start="293:38" pos:end="293:56"><expr pos:start="293:38" pos:end="293:56"><name pos:start="293:38" pos:end="293:47">shorten_by</name> <operator pos:start="293:49" pos:end="293:49">&amp;</operator> <literal type="number" pos:start="293:51" pos:end="293:56">0x1FFF</literal></expr></argument>, <argument pos:start="293:59" pos:end="293:69"><expr pos:start="293:59" pos:end="293:69"><name pos:start="293:59" pos:end="293:69"><name pos:start="293:59" pos:end="293:59">s</name><operator pos:start="293:60" pos:end="293:61">-&gt;</operator><name pos:start="293:62" pos:end="293:69">blockpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="295:13" pos:end="297:43">else if <condition pos:start="295:21" pos:end="295:86">(<expr pos:start="295:22" pos:end="295:85"><name pos:start="295:22" pos:end="295:39"><name pos:start="295:22" pos:end="295:22">m</name><operator pos:start="295:23" pos:end="295:24">-&gt;</operator><name pos:start="295:25" pos:end="295:29">avctx</name><operator pos:start="295:30" pos:end="295:31">-&gt;</operator><name pos:start="295:32" pos:end="295:39">codec_id</name></name> <operator pos:start="295:41" pos:end="295:42">==</operator> <name pos:start="295:44" pos:end="295:58">AV_CODEC_ID_MLP</name>    <operator pos:start="295:63" pos:end="295:64">&amp;&amp;</operator> <name pos:start="295:66" pos:end="295:75">shorten_by</name> <operator pos:start="295:77" pos:end="295:78">!=</operator> <literal type="number" pos:start="295:80" pos:end="295:85">0xD234</literal></expr>)</condition><block type="pseudo" pos:start="297:17" pos:end="297:43"><block_content pos:start="297:17" pos:end="297:43">

                <return pos:start="297:17" pos:end="297:43">return <expr pos:start="297:24" pos:end="297:42"><name pos:start="297:24" pos:end="297:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <if_stmt pos:start="301:13" pos:end="303:76"><if pos:start="301:13" pos:end="303:76">if <condition pos:start="301:16" pos:end="301:51">(<expr pos:start="301:17" pos:end="301:50"><name pos:start="301:17" pos:end="301:22">substr</name> <operator pos:start="301:24" pos:end="301:25">==</operator> <name pos:start="301:27" pos:end="301:50"><name pos:start="301:27" pos:end="301:27">m</name><operator pos:start="301:28" pos:end="301:29">-&gt;</operator><name pos:start="301:30" pos:end="301:50">max_decoded_substream</name></name></expr>)</condition><block type="pseudo" pos:start="303:17" pos:end="303:76"><block_content pos:start="303:17" pos:end="303:76">

                <expr_stmt pos:start="303:17" pos:end="303:76"><expr pos:start="303:17" pos:end="303:75"><call pos:start="303:17" pos:end="303:75"><name pos:start="303:17" pos:end="303:22">av_log</name><argument_list pos:start="303:23" pos:end="303:75">(<argument pos:start="303:24" pos:end="303:31"><expr pos:start="303:24" pos:end="303:31"><name pos:start="303:24" pos:end="303:31"><name pos:start="303:24" pos:end="303:24">m</name><operator pos:start="303:25" pos:end="303:26">-&gt;</operator><name pos:start="303:27" pos:end="303:31">avctx</name></name></expr></argument>, <argument pos:start="303:34" pos:end="303:44"><expr pos:start="303:34" pos:end="303:44"><name pos:start="303:34" pos:end="303:44">AV_LOG_INFO</name></expr></argument>, <argument pos:start="303:47" pos:end="303:74"><expr pos:start="303:47" pos:end="303:74"><literal type="string" pos:start="303:47" pos:end="303:74">"End of stream indicated.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="309:9" pos:end="335:9"><if pos:start="309:9" pos:end="335:9">if <condition pos:start="309:12" pos:end="309:45">(<expr pos:start="309:13" pos:end="309:44"><name pos:start="309:13" pos:end="309:44"><name pos:start="309:13" pos:end="309:36">substream_parity_present</name><index pos:start="309:37" pos:end="309:44">[<expr pos:start="309:38" pos:end="309:43"><name pos:start="309:38" pos:end="309:43">substr</name></expr>]</index></name></expr>)</condition> <block pos:start="309:47" pos:end="335:9">{<block_content pos:start="311:13" pos:end="333:94">

            <decl_stmt pos:start="311:13" pos:end="311:37"><decl pos:start="311:13" pos:end="311:26"><type pos:start="311:13" pos:end="311:19"><name pos:start="311:13" pos:end="311:19">uint8_t</name></type> <name pos:start="311:21" pos:end="311:26">parity</name></decl>, <decl pos:start="311:29" pos:end="311:36"><type ref="prev" pos:start="311:13" pos:end="311:19"/><name pos:start="311:29" pos:end="311:36">checksum</name></decl>;</decl_stmt>



            <if_stmt pos:start="315:13" pos:end="317:47"><if pos:start="315:13" pos:end="317:47">if <condition pos:start="315:16" pos:end="315:75">(<expr pos:start="315:17" pos:end="315:74"><name pos:start="315:17" pos:end="315:42"><name pos:start="315:17" pos:end="315:34">substream_data_len</name><index pos:start="315:35" pos:end="315:42">[<expr pos:start="315:36" pos:end="315:41"><name pos:start="315:36" pos:end="315:41">substr</name></expr>]</index></name> <operator pos:start="315:44" pos:end="315:44">*</operator> <literal type="number" pos:start="315:46" pos:end="315:48">8</literal> <operator pos:start="315:48" pos:end="315:48">-</operator> <call pos:start="315:50" pos:end="315:68"><name pos:start="315:50" pos:end="315:63">get_bits_count</name><argument_list pos:start="315:64" pos:end="315:68">(<argument pos:start="315:65" pos:end="315:67"><expr pos:start="315:65" pos:end="315:67"><operator pos:start="315:65" pos:end="315:65">&amp;</operator><name pos:start="315:66" pos:end="315:67">gb</name></expr></argument>)</argument_list></call> <operator pos:start="315:70" pos:end="315:71">!=</operator> <literal type="number" pos:start="315:73" pos:end="315:74">16</literal></expr>)</condition><block type="pseudo" pos:start="317:17" pos:end="317:47"><block_content pos:start="317:17" pos:end="317:47">

                <goto pos:start="317:17" pos:end="317:47">goto <name pos:start="317:22" pos:end="317:46">substream_length_mismatch</name>;</goto></block_content></block></if></if_stmt>



            <expr_stmt pos:start="321:13" pos:end="321:84"><expr pos:start="321:13" pos:end="321:83"><name pos:start="321:13" pos:end="321:18">parity</name>   <operator pos:start="321:22" pos:end="321:22">=</operator> <call pos:start="321:24" pos:end="321:83"><name pos:start="321:24" pos:end="321:46">ff_mlp_calculate_parity</name><argument_list pos:start="321:47" pos:end="321:83">(<argument pos:start="321:48" pos:end="321:50"><expr pos:start="321:48" pos:end="321:50"><name pos:start="321:48" pos:end="321:50">buf</name></expr></argument>, <argument pos:start="321:53" pos:end="321:82"><expr pos:start="321:53" pos:end="321:82"><name pos:start="321:53" pos:end="321:78"><name pos:start="321:53" pos:end="321:70">substream_data_len</name><index pos:start="321:71" pos:end="321:78">[<expr pos:start="321:72" pos:end="321:77"><name pos:start="321:72" pos:end="321:77">substr</name></expr>]</index></name> <operator pos:start="321:80" pos:end="321:80">-</operator> <literal type="number" pos:start="321:82" pos:end="321:82">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="323:13" pos:end="323:84"><expr pos:start="323:13" pos:end="323:83"><name pos:start="323:13" pos:end="323:20">checksum</name> <operator pos:start="323:22" pos:end="323:22">=</operator> <call pos:start="323:24" pos:end="323:83"><name pos:start="323:24" pos:end="323:39">ff_mlp_checksum8</name>       <argument_list pos:start="323:47" pos:end="323:83">(<argument pos:start="323:48" pos:end="323:50"><expr pos:start="323:48" pos:end="323:50"><name pos:start="323:48" pos:end="323:50">buf</name></expr></argument>, <argument pos:start="323:53" pos:end="323:82"><expr pos:start="323:53" pos:end="323:82"><name pos:start="323:53" pos:end="323:78"><name pos:start="323:53" pos:end="323:70">substream_data_len</name><index pos:start="323:71" pos:end="323:78">[<expr pos:start="323:72" pos:end="323:77"><name pos:start="323:72" pos:end="323:77">substr</name></expr>]</index></name> <operator pos:start="323:80" pos:end="323:80">-</operator> <literal type="number" pos:start="323:82" pos:end="323:82">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="327:13" pos:end="329:94"><if pos:start="327:13" pos:end="329:94">if <condition pos:start="327:16" pos:end="327:56">(<expr pos:start="327:17" pos:end="327:51"><operator pos:start="327:17" pos:end="327:17">(</operator><call pos:start="327:18" pos:end="327:33"><name pos:start="327:18" pos:end="327:25">get_bits</name><argument_list pos:start="327:26" pos:end="327:33">(<argument pos:start="327:27" pos:end="327:29"><expr pos:start="327:27" pos:end="327:29"><operator pos:start="327:27" pos:end="327:27">&amp;</operator><name pos:start="327:28" pos:end="327:29">gb</name></expr></argument>, <argument pos:start="327:32" pos:end="327:32"><expr pos:start="327:32" pos:end="327:32"><literal type="number" pos:start="327:32" pos:end="327:32">8</literal></expr></argument>)</argument_list></call> <operator pos:start="327:35" pos:end="327:35">^</operator> <name pos:start="327:37" pos:end="327:42">parity</name><operator pos:start="327:43" pos:end="327:43">)</operator> <operator pos:start="327:45" pos:end="327:46">!=</operator> <literal type="number" pos:start="327:48" pos:end="327:51">0xa9</literal></expr>    )</condition><block type="pseudo" pos:start="329:17" pos:end="329:94"><block_content pos:start="329:17" pos:end="329:94">

                <expr_stmt pos:start="329:17" pos:end="329:94"><expr pos:start="329:17" pos:end="329:93"><call pos:start="329:17" pos:end="329:93"><name pos:start="329:17" pos:end="329:22">av_log</name><argument_list pos:start="329:23" pos:end="329:93">(<argument pos:start="329:24" pos:end="329:31"><expr pos:start="329:24" pos:end="329:31"><name pos:start="329:24" pos:end="329:31"><name pos:start="329:24" pos:end="329:24">m</name><operator pos:start="329:25" pos:end="329:26">-&gt;</operator><name pos:start="329:27" pos:end="329:31">avctx</name></name></expr></argument>, <argument pos:start="329:34" pos:end="329:45"><expr pos:start="329:34" pos:end="329:45"><name pos:start="329:34" pos:end="329:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="329:48" pos:end="329:84"><expr pos:start="329:48" pos:end="329:84"><literal type="string" pos:start="329:48" pos:end="329:84">"Substream %d parity check failed.\n"</literal></expr></argument>, <argument pos:start="329:87" pos:end="329:92"><expr pos:start="329:87" pos:end="329:92"><name pos:start="329:87" pos:end="329:92">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="331:13" pos:end="333:94"><if pos:start="331:13" pos:end="333:94">if <condition pos:start="331:16" pos:end="331:56">( <expr pos:start="331:18" pos:end="331:55"><call pos:start="331:18" pos:end="331:33"><name pos:start="331:18" pos:end="331:25">get_bits</name><argument_list pos:start="331:26" pos:end="331:33">(<argument pos:start="331:27" pos:end="331:29"><expr pos:start="331:27" pos:end="331:29"><operator pos:start="331:27" pos:end="331:27">&amp;</operator><name pos:start="331:28" pos:end="331:29">gb</name></expr></argument>, <argument pos:start="331:32" pos:end="331:32"><expr pos:start="331:32" pos:end="331:32"><literal type="number" pos:start="331:32" pos:end="331:32">8</literal></expr></argument>)</argument_list></call>           <operator pos:start="331:45" pos:end="331:46">!=</operator> <name pos:start="331:48" pos:end="331:55">checksum</name></expr>)</condition><block type="pseudo" pos:start="333:17" pos:end="333:94"><block_content pos:start="333:17" pos:end="333:94">

                <expr_stmt pos:start="333:17" pos:end="333:94"><expr pos:start="333:17" pos:end="333:93"><call pos:start="333:17" pos:end="333:93"><name pos:start="333:17" pos:end="333:22">av_log</name><argument_list pos:start="333:23" pos:end="333:93">(<argument pos:start="333:24" pos:end="333:31"><expr pos:start="333:24" pos:end="333:31"><name pos:start="333:24" pos:end="333:31"><name pos:start="333:24" pos:end="333:24">m</name><operator pos:start="333:25" pos:end="333:26">-&gt;</operator><name pos:start="333:27" pos:end="333:31">avctx</name></name></expr></argument>, <argument pos:start="333:34" pos:end="333:45"><expr pos:start="333:34" pos:end="333:45"><name pos:start="333:34" pos:end="333:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="333:48" pos:end="333:80"><expr pos:start="333:48" pos:end="333:80"><literal type="string" pos:start="333:48" pos:end="333:80">"Substream %d checksum failed.\n"</literal></expr></argument>    , <argument pos:start="333:87" pos:end="333:92"><expr pos:start="333:87" pos:end="333:92"><name pos:start="333:87" pos:end="333:92">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="339:9" pos:end="341:43"><if pos:start="339:9" pos:end="341:43">if <condition pos:start="339:12" pos:end="339:66">(<expr pos:start="339:13" pos:end="339:65"><name pos:start="339:13" pos:end="339:38"><name pos:start="339:13" pos:end="339:30">substream_data_len</name><index pos:start="339:31" pos:end="339:38">[<expr pos:start="339:32" pos:end="339:37"><name pos:start="339:32" pos:end="339:37">substr</name></expr>]</index></name> <operator pos:start="339:40" pos:end="339:40">*</operator> <literal type="number" pos:start="339:42" pos:end="339:42">8</literal> <operator pos:start="339:44" pos:end="339:45">!=</operator> <call pos:start="339:47" pos:end="339:65"><name pos:start="339:47" pos:end="339:60">get_bits_count</name><argument_list pos:start="339:61" pos:end="339:65">(<argument pos:start="339:62" pos:end="339:64"><expr pos:start="339:62" pos:end="339:64"><operator pos:start="339:62" pos:end="339:62">&amp;</operator><name pos:start="339:63" pos:end="339:64">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="341:13" pos:end="341:43"><block_content pos:start="341:13" pos:end="341:43">

            <goto pos:start="341:13" pos:end="341:43">goto <name pos:start="341:18" pos:end="341:42">substream_length_mismatch</name>;</goto></block_content></block></if></if_stmt>



<label pos:start="345:1" pos:end="345:12"><name pos:start="345:1" pos:end="345:11">next_substr</name>:</label>

        <if_stmt pos:start="347:9" pos:end="351:75"><if pos:start="347:9" pos:end="351:75">if <condition pos:start="347:12" pos:end="347:29">(<expr pos:start="347:13" pos:end="347:28"><operator pos:start="347:13" pos:end="347:13">!</operator><name pos:start="347:14" pos:end="347:28"><name pos:start="347:14" pos:end="347:14">s</name><operator pos:start="347:15" pos:end="347:16">-&gt;</operator><name pos:start="347:17" pos:end="347:28">restart_seen</name></name></expr>)</condition><block type="pseudo" pos:start="349:13" pos:end="351:75"><block_content pos:start="349:13" pos:end="351:75">

            <expr_stmt pos:start="349:13" pos:end="351:75"><expr pos:start="349:13" pos:end="351:74"><call pos:start="349:13" pos:end="351:74"><name pos:start="349:13" pos:end="349:18">av_log</name><argument_list pos:start="349:19" pos:end="351:74">(<argument pos:start="349:20" pos:end="349:27"><expr pos:start="349:20" pos:end="349:27"><name pos:start="349:20" pos:end="349:27"><name pos:start="349:20" pos:end="349:20">m</name><operator pos:start="349:21" pos:end="349:22">-&gt;</operator><name pos:start="349:23" pos:end="349:27">avctx</name></name></expr></argument>, <argument pos:start="349:30" pos:end="349:41"><expr pos:start="349:30" pos:end="349:41"><name pos:start="349:30" pos:end="349:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="351:20" pos:end="351:65"><expr pos:start="351:20" pos:end="351:65"><literal type="string" pos:start="351:20" pos:end="351:65">"No restart header present in substream %d.\n"</literal></expr></argument>, <argument pos:start="351:68" pos:end="351:73"><expr pos:start="351:68" pos:end="351:73"><name pos:start="351:68" pos:end="351:73">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="355:9" pos:end="355:42"><expr pos:start="355:9" pos:end="355:41"><name pos:start="355:9" pos:end="355:11">buf</name> <operator pos:start="355:13" pos:end="355:14">+=</operator> <name pos:start="355:16" pos:end="355:41"><name pos:start="355:16" pos:end="355:33">substream_data_len</name><index pos:start="355:34" pos:end="355:41">[<expr pos:start="355:35" pos:end="355:40"><name pos:start="355:35" pos:end="355:40">substr</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="361:5" pos:end="361:51"><expr pos:start="361:5" pos:end="361:50"><call pos:start="361:5" pos:end="361:50"><name pos:start="361:5" pos:end="361:21">rematrix_channels</name><argument_list pos:start="361:22" pos:end="361:50">(<argument pos:start="361:23" pos:end="361:23"><expr pos:start="361:23" pos:end="361:23"><name pos:start="361:23" pos:end="361:23">m</name></expr></argument>, <argument pos:start="361:26" pos:end="361:49"><expr pos:start="361:26" pos:end="361:49"><name pos:start="361:26" pos:end="361:49"><name pos:start="361:26" pos:end="361:26">m</name><operator pos:start="361:27" pos:end="361:28">-&gt;</operator><name pos:start="361:29" pos:end="361:49">max_decoded_substream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="365:5" pos:end="367:19"><if pos:start="365:5" pos:end="367:19">if <condition pos:start="365:8" pos:end="365:82">(<expr pos:start="365:9" pos:end="365:81"><operator pos:start="365:9" pos:end="365:9">(</operator><name pos:start="365:10" pos:end="365:12">ret</name> <operator pos:start="365:14" pos:end="365:14">=</operator> <call pos:start="365:16" pos:end="365:76"><name pos:start="365:16" pos:end="365:26">output_data</name><argument_list pos:start="365:27" pos:end="365:76">(<argument pos:start="365:28" pos:end="365:28"><expr pos:start="365:28" pos:end="365:28"><name pos:start="365:28" pos:end="365:28">m</name></expr></argument>, <argument pos:start="365:31" pos:end="365:54"><expr pos:start="365:31" pos:end="365:54"><name pos:start="365:31" pos:end="365:54"><name pos:start="365:31" pos:end="365:31">m</name><operator pos:start="365:32" pos:end="365:33">-&gt;</operator><name pos:start="365:34" pos:end="365:54">max_decoded_substream</name></name></expr></argument>, <argument pos:start="365:57" pos:end="365:60"><expr pos:start="365:57" pos:end="365:60"><name pos:start="365:57" pos:end="365:60">data</name></expr></argument>, <argument pos:start="365:63" pos:end="365:75"><expr pos:start="365:63" pos:end="365:75"><name pos:start="365:63" pos:end="365:75">got_frame_ptr</name></expr></argument>)</argument_list></call><operator pos:start="365:77" pos:end="365:77">)</operator> <operator pos:start="365:79" pos:end="365:79">&lt;</operator> <literal type="number" pos:start="365:81" pos:end="365:81">0</literal></expr>)</condition><block type="pseudo" pos:start="367:9" pos:end="367:19"><block_content pos:start="367:9" pos:end="367:19">

        <return pos:start="367:9" pos:end="367:19">return <expr pos:start="367:16" pos:end="367:18"><name pos:start="367:16" pos:end="367:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="371:5" pos:end="371:18">return <expr pos:start="371:12" pos:end="371:17"><name pos:start="371:12" pos:end="371:17">length</name></expr>;</return>



<label pos:start="375:1" pos:end="375:26"><name pos:start="375:1" pos:end="375:25">substream_length_mismatch</name>:</label>

    <expr_stmt pos:start="377:5" pos:end="377:77"><expr pos:start="377:5" pos:end="377:76"><call pos:start="377:5" pos:end="377:76"><name pos:start="377:5" pos:end="377:10">av_log</name><argument_list pos:start="377:11" pos:end="377:76">(<argument pos:start="377:12" pos:end="377:19"><expr pos:start="377:12" pos:end="377:19"><name pos:start="377:12" pos:end="377:19"><name pos:start="377:12" pos:end="377:12">m</name><operator pos:start="377:13" pos:end="377:14">-&gt;</operator><name pos:start="377:15" pos:end="377:19">avctx</name></name></expr></argument>, <argument pos:start="377:22" pos:end="377:33"><expr pos:start="377:22" pos:end="377:33"><name pos:start="377:22" pos:end="377:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="377:36" pos:end="377:67"><expr pos:start="377:36" pos:end="377:67"><literal type="string" pos:start="377:36" pos:end="377:67">"substream %d length mismatch\n"</literal></expr></argument>, <argument pos:start="377:70" pos:end="377:75"><expr pos:start="377:70" pos:end="377:75"><name pos:start="377:70" pos:end="377:75">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="379:5" pos:end="379:31">return <expr pos:start="379:12" pos:end="379:30"><name pos:start="379:12" pos:end="379:30">AVERROR_INVALIDDATA</name></expr>;</return>



<label pos:start="383:1" pos:end="383:6"><name pos:start="383:1" pos:end="383:5">error</name>:</label>

    <expr_stmt pos:start="385:5" pos:end="385:24"><expr pos:start="385:5" pos:end="385:23"><name pos:start="385:5" pos:end="385:19"><name pos:start="385:5" pos:end="385:5">m</name><operator pos:start="385:6" pos:end="385:7">-&gt;</operator><name pos:start="385:8" pos:end="385:19">params_valid</name></name> <operator pos:start="385:21" pos:end="385:21">=</operator> <literal type="number" pos:start="385:23" pos:end="385:23">0</literal></expr>;</expr_stmt>

    <return pos:start="387:5" pos:end="387:31">return <expr pos:start="387:12" pos:end="387:30"><name pos:start="387:12" pos:end="387:30">AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></function>
</unit>
