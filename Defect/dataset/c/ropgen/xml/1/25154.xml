<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25154.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">prop_get_fdt</name><parameter_list pos:start="1:25" pos:end="3:52">(<parameter pos:start="1:26" pos:end="1:36"><decl pos:start="1:26" pos:end="1:36"><type pos:start="1:26" pos:end="1:36"><name pos:start="1:26" pos:end="1:31">Object</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">obj</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:48"><decl pos:start="1:39" pos:end="1:48"><type pos:start="1:39" pos:end="1:48"><name pos:start="1:39" pos:end="1:45">Visitor</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">v</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:66"><decl pos:start="1:51" pos:end="1:66"><type pos:start="1:51" pos:end="1:66"><specifier pos:start="1:51" pos:end="1:55">const</specifier> <name pos:start="1:57" pos:end="1:60">char</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:66">name</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:37"><decl pos:start="3:26" pos:end="3:37"><type pos:start="3:26" pos:end="3:37"><name pos:start="3:26" pos:end="3:29">void</name> <modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:37">opaque</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:51"><decl pos:start="3:40" pos:end="3:51"><type pos:start="3:40" pos:end="3:51"><name pos:start="3:40" pos:end="3:44">Error</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier><modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:51">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="145:1">{<block_content pos:start="7:5" pos:end="143:29">

    <decl_stmt pos:start="7:5" pos:end="7:52"><decl pos:start="7:5" pos:end="7:51"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">sPAPRDRConnector</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:25">drc</name> <init pos:start="7:27" pos:end="7:51">= <expr pos:start="7:29" pos:end="7:51"><call pos:start="7:29" pos:end="7:51"><name pos:start="7:29" pos:end="7:46">SPAPR_DR_CONNECTOR</name><argument_list pos:start="7:47" pos:end="7:51">(<argument pos:start="7:48" pos:end="7:50"><expr pos:start="7:48" pos:end="7:50"><name pos:start="7:48" pos:end="7:50">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">err</name> <init pos:start="9:16" pos:end="9:21">= <expr pos:start="9:18" pos:end="9:21"><name pos:start="9:18" pos:end="9:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:47"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:23">fdt_offset_next</name></decl>, <decl pos:start="11:26" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:26" pos:end="11:35">fdt_offset</name></decl>, <decl pos:start="11:38" pos:end="11:46"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:38" pos:end="11:46">fdt_depth</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">void</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:13">fdt</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="31:5"><if pos:start="17:5" pos:end="31:5">if <condition pos:start="17:8" pos:end="17:18">(<expr pos:start="17:9" pos:end="17:17"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:17"><name pos:start="17:10" pos:end="17:12">drc</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:17">fdt</name></name></expr>)</condition> <block pos:start="17:20" pos:end="31:5">{<block_content pos:start="19:9" pos:end="29:15">

        <expr_stmt pos:start="19:9" pos:end="19:51"><expr pos:start="19:9" pos:end="19:50"><call pos:start="19:9" pos:end="19:50"><name pos:start="19:9" pos:end="19:26">visit_start_struct</name><argument_list pos:start="19:27" pos:end="19:50">(<argument pos:start="19:28" pos:end="19:28"><expr pos:start="19:28" pos:end="19:28"><name pos:start="19:28" pos:end="19:28">v</name></expr></argument>, <argument pos:start="19:31" pos:end="19:34"><expr pos:start="19:31" pos:end="19:34"><name pos:start="19:31" pos:end="19:34">name</name></expr></argument>, <argument pos:start="19:37" pos:end="19:40"><expr pos:start="19:37" pos:end="19:40"><name pos:start="19:37" pos:end="19:40">NULL</name></expr></argument>, <argument pos:start="19:43" pos:end="19:43"><expr pos:start="19:43" pos:end="19:43"><literal type="number" pos:start="19:43" pos:end="19:43">0</literal></expr></argument>, <argument pos:start="19:46" pos:end="19:49"><expr pos:start="19:46" pos:end="19:49"><operator pos:start="19:46" pos:end="19:46">&amp;</operator><name pos:start="19:47" pos:end="19:49">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:17">(<expr pos:start="21:13" pos:end="21:16"><operator pos:start="21:13" pos:end="21:13">!</operator><name pos:start="21:14" pos:end="21:16">err</name></expr>)</condition> <block pos:start="21:19" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:38">

            <expr_stmt pos:start="23:13" pos:end="23:38"><expr pos:start="23:13" pos:end="23:37"><call pos:start="23:13" pos:end="23:37"><name pos:start="23:13" pos:end="23:28">visit_end_struct</name><argument_list pos:start="23:29" pos:end="23:37">(<argument pos:start="23:30" pos:end="23:30"><expr pos:start="23:30" pos:end="23:30"><name pos:start="23:30" pos:end="23:30">v</name></expr></argument>, <argument pos:start="23:33" pos:end="23:36"><expr pos:start="23:33" pos:end="23:36"><operator pos:start="23:33" pos:end="23:33">&amp;</operator><name pos:start="23:34" pos:end="23:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:35"><expr pos:start="27:9" pos:end="27:34"><call pos:start="27:9" pos:end="27:34"><name pos:start="27:9" pos:end="27:23">error_propagate</name><argument_list pos:start="27:24" pos:end="27:34">(<argument pos:start="27:25" pos:end="27:28"><expr pos:start="27:25" pos:end="27:28"><name pos:start="27:25" pos:end="27:28">errp</name></expr></argument>, <argument pos:start="27:31" pos:end="27:33"><expr pos:start="27:31" pos:end="27:33"><name pos:start="27:31" pos:end="27:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:19"><expr pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:7">fdt</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <name pos:start="35:11" pos:end="35:18"><name pos:start="35:11" pos:end="35:13">drc</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:18">fdt</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:39"><expr pos:start="37:5" pos:end="37:38"><name pos:start="37:5" pos:end="37:14">fdt_offset</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <name pos:start="37:18" pos:end="37:38"><name pos:start="37:18" pos:end="37:20">drc</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:38">fdt_start_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:18"><expr pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:13">fdt_depth</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <literal type="number" pos:start="39:17" pos:end="39:17">0</literal></expr>;</expr_stmt>



    <do pos:start="43:5" pos:end="143:29">do <block pos:start="43:8" pos:end="143:5">{<block_content pos:start="45:9" pos:end="141:37">

        <decl_stmt pos:start="45:9" pos:end="45:32"><decl pos:start="45:9" pos:end="45:31"><type pos:start="45:9" pos:end="45:20"><specifier pos:start="45:9" pos:end="45:13">const</specifier> <name pos:start="45:15" pos:end="45:18">char</name> <modifier pos:start="45:20" pos:end="45:20">*</modifier></type><name pos:start="45:21" pos:end="45:24">name</name> <init pos:start="45:26" pos:end="45:31">= <expr pos:start="45:28" pos:end="45:31"><name pos:start="45:28" pos:end="45:31">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:47"><decl pos:start="47:9" pos:end="47:46"><type pos:start="47:9" pos:end="47:35"><specifier pos:start="47:9" pos:end="47:13">const</specifier> <name pos:start="47:15" pos:end="47:33"><name pos:start="47:15" pos:end="47:20">struct</name> <name pos:start="47:22" pos:end="47:33">fdt_property</name></name> <modifier pos:start="47:35" pos:end="47:35">*</modifier></type><name pos:start="47:36" pos:end="47:39">prop</name> <init pos:start="47:41" pos:end="47:46">= <expr pos:start="47:43" pos:end="47:46"><name pos:start="47:43" pos:end="47:46">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:39"><decl pos:start="49:9" pos:end="49:24"><type pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">int</name></type> <name pos:start="49:13" pos:end="49:20">prop_len</name> <init pos:start="49:22" pos:end="49:24">= <expr pos:start="49:24" pos:end="49:24"><literal type="number" pos:start="49:24" pos:end="49:24">0</literal></expr></init></decl>, <decl pos:start="49:27" pos:end="49:38"><type ref="prev" pos:start="49:9" pos:end="49:11"/><name pos:start="49:27" pos:end="49:34">name_len</name> <init pos:start="49:36" pos:end="49:38">= <expr pos:start="49:38" pos:end="49:38"><literal type="number" pos:start="49:38" pos:end="49:38">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="51:9" pos:end="51:21"><decl pos:start="51:9" pos:end="51:20"><type pos:start="51:9" pos:end="51:16"><name pos:start="51:9" pos:end="51:16">uint32_t</name></type> <name pos:start="51:18" pos:end="51:20">tag</name></decl>;</decl_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:62"><expr pos:start="55:9" pos:end="55:61"><name pos:start="55:9" pos:end="55:11">tag</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:61"><name pos:start="55:15" pos:end="55:26">fdt_next_tag</name><argument_list pos:start="55:27" pos:end="55:61">(<argument pos:start="55:28" pos:end="55:30"><expr pos:start="55:28" pos:end="55:30"><name pos:start="55:28" pos:end="55:30">fdt</name></expr></argument>, <argument pos:start="55:33" pos:end="55:42"><expr pos:start="55:33" pos:end="55:42"><name pos:start="55:33" pos:end="55:42">fdt_offset</name></expr></argument>, <argument pos:start="55:45" pos:end="55:60"><expr pos:start="55:45" pos:end="55:60"><operator pos:start="55:45" pos:end="55:45">&amp;</operator><name pos:start="55:46" pos:end="55:60">fdt_offset_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="57:9" pos:end="139:9">switch <condition pos:start="57:16" pos:end="57:20">(<expr pos:start="57:17" pos:end="57:19"><name pos:start="57:17" pos:end="57:19">tag</name></expr>)</condition> <block pos:start="57:22" pos:end="139:9">{<block_content pos:start="59:9" pos:end="137:80">

        <case pos:start="59:9" pos:end="59:28">case <expr pos:start="59:14" pos:end="59:27"><name pos:start="59:14" pos:end="59:27">FDT_BEGIN_NODE</name></expr>:</case>

            <expr_stmt pos:start="61:13" pos:end="61:24"><expr pos:start="61:13" pos:end="61:23"><name pos:start="61:13" pos:end="61:21">fdt_depth</name><operator pos:start="61:22" pos:end="61:23">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:60"><expr pos:start="63:13" pos:end="63:59"><name pos:start="63:13" pos:end="63:16">name</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <call pos:start="63:20" pos:end="63:59"><name pos:start="63:20" pos:end="63:31">fdt_get_name</name><argument_list pos:start="63:32" pos:end="63:59">(<argument pos:start="63:33" pos:end="63:35"><expr pos:start="63:33" pos:end="63:35"><name pos:start="63:33" pos:end="63:35">fdt</name></expr></argument>, <argument pos:start="63:38" pos:end="63:47"><expr pos:start="63:38" pos:end="63:47"><name pos:start="63:38" pos:end="63:47">fdt_offset</name></expr></argument>, <argument pos:start="63:50" pos:end="63:58"><expr pos:start="63:50" pos:end="63:58"><operator pos:start="63:50" pos:end="63:50">&amp;</operator><name pos:start="63:51" pos:end="63:58">name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:55"><expr pos:start="65:13" pos:end="65:54"><call pos:start="65:13" pos:end="65:54"><name pos:start="65:13" pos:end="65:30">visit_start_struct</name><argument_list pos:start="65:31" pos:end="65:54">(<argument pos:start="65:32" pos:end="65:32"><expr pos:start="65:32" pos:end="65:32"><name pos:start="65:32" pos:end="65:32">v</name></expr></argument>, <argument pos:start="65:35" pos:end="65:38"><expr pos:start="65:35" pos:end="65:38"><name pos:start="65:35" pos:end="65:38">name</name></expr></argument>, <argument pos:start="65:41" pos:end="65:44"><expr pos:start="65:41" pos:end="65:44"><name pos:start="65:41" pos:end="65:44">NULL</name></expr></argument>, <argument pos:start="65:47" pos:end="65:47"><expr pos:start="65:47" pos:end="65:47"><literal type="number" pos:start="65:47" pos:end="65:47">0</literal></expr></argument>, <argument pos:start="65:50" pos:end="65:53"><expr pos:start="65:50" pos:end="65:53"><operator pos:start="65:50" pos:end="65:50">&amp;</operator><name pos:start="65:51" pos:end="65:53">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="67:13" pos:end="73:13"><if pos:start="67:13" pos:end="73:13">if <condition pos:start="67:16" pos:end="67:20">(<expr pos:start="67:17" pos:end="67:19"><name pos:start="67:17" pos:end="67:19">err</name></expr>)</condition> <block pos:start="67:22" pos:end="73:13">{<block_content pos:start="69:17" pos:end="71:23">

                <expr_stmt pos:start="69:17" pos:end="69:43"><expr pos:start="69:17" pos:end="69:42"><call pos:start="69:17" pos:end="69:42"><name pos:start="69:17" pos:end="69:31">error_propagate</name><argument_list pos:start="69:32" pos:end="69:42">(<argument pos:start="69:33" pos:end="69:36"><expr pos:start="69:33" pos:end="69:36"><name pos:start="69:33" pos:end="69:36">errp</name></expr></argument>, <argument pos:start="69:39" pos:end="69:41"><expr pos:start="69:39" pos:end="69:41"><name pos:start="69:39" pos:end="69:41">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="71:17" pos:end="71:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        <case pos:start="77:9" pos:end="77:26">case <expr pos:start="77:14" pos:end="77:25"><name pos:start="77:14" pos:end="77:25">FDT_END_NODE</name></expr>:</case>

            <comment type="block" pos:start="79:13" pos:end="79:74">/* shouldn't ever see an FDT_END_NODE before FDT_BEGIN_NODE */</comment>

            <expr_stmt pos:start="81:13" pos:end="81:36"><expr pos:start="81:13" pos:end="81:35"><call pos:start="81:13" pos:end="81:35"><name pos:start="81:13" pos:end="81:20">g_assert</name><argument_list pos:start="81:21" pos:end="81:35">(<argument pos:start="81:22" pos:end="81:34"><expr pos:start="81:22" pos:end="81:34"><name pos:start="81:22" pos:end="81:30">fdt_depth</name> <operator pos:start="81:32" pos:end="81:32">&gt;</operator> <literal type="number" pos:start="81:34" pos:end="81:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:38"><expr pos:start="83:13" pos:end="83:37"><call pos:start="83:13" pos:end="83:37"><name pos:start="83:13" pos:end="83:28">visit_end_struct</name><argument_list pos:start="83:29" pos:end="83:37">(<argument pos:start="83:30" pos:end="83:30"><expr pos:start="83:30" pos:end="83:30"><name pos:start="83:30" pos:end="83:30">v</name></expr></argument>, <argument pos:start="83:33" pos:end="83:36"><expr pos:start="83:33" pos:end="83:36"><operator pos:start="83:33" pos:end="83:33">&amp;</operator><name pos:start="83:34" pos:end="83:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="85:13" pos:end="91:13"><if pos:start="85:13" pos:end="91:13">if <condition pos:start="85:16" pos:end="85:20">(<expr pos:start="85:17" pos:end="85:19"><name pos:start="85:17" pos:end="85:19">err</name></expr>)</condition> <block pos:start="85:22" pos:end="91:13">{<block_content pos:start="87:17" pos:end="89:23">

                <expr_stmt pos:start="87:17" pos:end="87:43"><expr pos:start="87:17" pos:end="87:42"><call pos:start="87:17" pos:end="87:42"><name pos:start="87:17" pos:end="87:31">error_propagate</name><argument_list pos:start="87:32" pos:end="87:42">(<argument pos:start="87:33" pos:end="87:36"><expr pos:start="87:33" pos:end="87:36"><name pos:start="87:33" pos:end="87:36">errp</name></expr></argument>, <argument pos:start="87:39" pos:end="87:41"><expr pos:start="87:39" pos:end="87:41"><name pos:start="87:39" pos:end="87:41">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="89:17" pos:end="89:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:24"><expr pos:start="93:13" pos:end="93:23"><name pos:start="93:13" pos:end="93:21">fdt_depth</name><operator pos:start="93:22" pos:end="93:23">--</operator></expr>;</expr_stmt>

            <break pos:start="95:13" pos:end="95:18">break;</break>

        <case pos:start="97:9" pos:end="97:22">case <expr pos:start="97:14" pos:end="97:21"><name pos:start="97:14" pos:end="97:21">FDT_PROP</name></expr>:</case> <block pos:start="97:24" pos:end="133:9">{<block_content pos:start="99:13" pos:end="131:18">

            <decl_stmt pos:start="99:13" pos:end="99:18"><decl pos:start="99:13" pos:end="99:17"><type pos:start="99:13" pos:end="99:15"><name pos:start="99:13" pos:end="99:15">int</name></type> <name pos:start="99:17" pos:end="99:17">i</name></decl>;</decl_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:74"><expr pos:start="101:13" pos:end="101:73"><name pos:start="101:13" pos:end="101:16">prop</name> <operator pos:start="101:18" pos:end="101:18">=</operator> <call pos:start="101:20" pos:end="101:73"><name pos:start="101:20" pos:end="101:45">fdt_get_property_by_offset</name><argument_list pos:start="101:46" pos:end="101:73">(<argument pos:start="101:47" pos:end="101:49"><expr pos:start="101:47" pos:end="101:49"><name pos:start="101:47" pos:end="101:49">fdt</name></expr></argument>, <argument pos:start="101:52" pos:end="101:61"><expr pos:start="101:52" pos:end="101:61"><name pos:start="101:52" pos:end="101:61">fdt_offset</name></expr></argument>, <argument pos:start="101:64" pos:end="101:72"><expr pos:start="101:64" pos:end="101:72"><operator pos:start="101:64" pos:end="101:64">&amp;</operator><name pos:start="101:65" pos:end="101:72">prop_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:64"><expr pos:start="103:13" pos:end="103:63"><name pos:start="103:13" pos:end="103:16">name</name> <operator pos:start="103:18" pos:end="103:18">=</operator> <call pos:start="103:20" pos:end="103:63"><name pos:start="103:20" pos:end="103:29">fdt_string</name><argument_list pos:start="103:30" pos:end="103:63">(<argument pos:start="103:31" pos:end="103:33"><expr pos:start="103:31" pos:end="103:33"><name pos:start="103:31" pos:end="103:33">fdt</name></expr></argument>, <argument pos:start="103:36" pos:end="103:62"><expr pos:start="103:36" pos:end="103:62"><call pos:start="103:36" pos:end="103:62"><name pos:start="103:36" pos:end="103:47">fdt32_to_cpu</name><argument_list pos:start="103:48" pos:end="103:62">(<argument pos:start="103:49" pos:end="103:61"><expr pos:start="103:49" pos:end="103:61"><name pos:start="103:49" pos:end="103:61"><name pos:start="103:49" pos:end="103:52">prop</name><operator pos:start="103:53" pos:end="103:54">-&gt;</operator><name pos:start="103:55" pos:end="103:61">nameoff</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:44"><expr pos:start="105:13" pos:end="105:43"><call pos:start="105:13" pos:end="105:43"><name pos:start="105:13" pos:end="105:28">visit_start_list</name><argument_list pos:start="105:29" pos:end="105:43">(<argument pos:start="105:30" pos:end="105:30"><expr pos:start="105:30" pos:end="105:30"><name pos:start="105:30" pos:end="105:30">v</name></expr></argument>, <argument pos:start="105:33" pos:end="105:36"><expr pos:start="105:33" pos:end="105:36"><name pos:start="105:33" pos:end="105:36">name</name></expr></argument>, <argument pos:start="105:39" pos:end="105:42"><expr pos:start="105:39" pos:end="105:42"><operator pos:start="105:39" pos:end="105:39">&amp;</operator><name pos:start="105:40" pos:end="105:42">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="107:13" pos:end="113:13"><if pos:start="107:13" pos:end="113:13">if <condition pos:start="107:16" pos:end="107:20">(<expr pos:start="107:17" pos:end="107:19"><name pos:start="107:17" pos:end="107:19">err</name></expr>)</condition> <block pos:start="107:22" pos:end="113:13">{<block_content pos:start="109:17" pos:end="111:23">

                <expr_stmt pos:start="109:17" pos:end="109:43"><expr pos:start="109:17" pos:end="109:42"><call pos:start="109:17" pos:end="109:42"><name pos:start="109:17" pos:end="109:31">error_propagate</name><argument_list pos:start="109:32" pos:end="109:42">(<argument pos:start="109:33" pos:end="109:36"><expr pos:start="109:33" pos:end="109:36"><name pos:start="109:33" pos:end="109:36">errp</name></expr></argument>, <argument pos:start="109:39" pos:end="109:41"><expr pos:start="109:39" pos:end="109:41"><name pos:start="109:39" pos:end="109:41">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="111:17" pos:end="111:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <for pos:start="115:13" pos:end="127:13">for <control pos:start="115:17" pos:end="115:42">(<init pos:start="115:18" pos:end="115:23"><expr pos:start="115:18" pos:end="115:22"><name pos:start="115:18" pos:end="115:18">i</name> <operator pos:start="115:20" pos:end="115:20">=</operator> <literal type="number" pos:start="115:22" pos:end="115:22">0</literal></expr>;</init> <condition pos:start="115:25" pos:end="115:37"><expr pos:start="115:25" pos:end="115:36"><name pos:start="115:25" pos:end="115:25">i</name> <operator pos:start="115:27" pos:end="115:27">&lt;</operator> <name pos:start="115:29" pos:end="115:36">prop_len</name></expr>;</condition> <incr pos:start="115:39" pos:end="115:41"><expr pos:start="115:39" pos:end="115:41"><name pos:start="115:39" pos:end="115:39">i</name><operator pos:start="115:40" pos:end="115:41">++</operator></expr></incr>)</control> <block pos:start="115:44" pos:end="127:13">{<block_content pos:start="117:17" pos:end="125:17">

                <expr_stmt pos:start="117:17" pos:end="117:75"><expr pos:start="117:17" pos:end="117:74"><call pos:start="117:17" pos:end="117:74"><name pos:start="117:17" pos:end="117:32">visit_type_uint8</name><argument_list pos:start="117:33" pos:end="117:74">(<argument pos:start="117:34" pos:end="117:34"><expr pos:start="117:34" pos:end="117:34"><name pos:start="117:34" pos:end="117:34">v</name></expr></argument>, <argument pos:start="117:37" pos:end="117:40"><expr pos:start="117:37" pos:end="117:40"><name pos:start="117:37" pos:end="117:40">NULL</name></expr></argument>, <argument pos:start="117:43" pos:end="117:67"><expr pos:start="117:43" pos:end="117:67"><operator pos:start="117:43" pos:end="117:43">(</operator><name pos:start="117:44" pos:end="117:50">uint8_t</name> <operator pos:start="117:52" pos:end="117:52">*</operator><operator pos:start="117:53" pos:end="117:53">)</operator><operator pos:start="117:54" pos:end="117:54">&amp;</operator><name pos:start="117:55" pos:end="117:67"><name pos:start="117:55" pos:end="117:58">prop</name><operator pos:start="117:59" pos:end="117:60">-&gt;</operator><name pos:start="117:61" pos:end="117:64">data</name><index pos:start="117:65" pos:end="117:67">[<expr pos:start="117:66" pos:end="117:66"><name pos:start="117:66" pos:end="117:66">i</name></expr>]</index></name></expr></argument>, <argument pos:start="117:70" pos:end="117:73"><expr pos:start="117:70" pos:end="117:73"><operator pos:start="117:70" pos:end="117:70">&amp;</operator><name pos:start="117:71" pos:end="117:73">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="119:17" pos:end="125:17"><if pos:start="119:17" pos:end="125:17">if <condition pos:start="119:20" pos:end="119:24">(<expr pos:start="119:21" pos:end="119:23"><name pos:start="119:21" pos:end="119:23">err</name></expr>)</condition> <block pos:start="119:26" pos:end="125:17">{<block_content pos:start="121:21" pos:end="123:27">

                    <expr_stmt pos:start="121:21" pos:end="121:47"><expr pos:start="121:21" pos:end="121:46"><call pos:start="121:21" pos:end="121:46"><name pos:start="121:21" pos:end="121:35">error_propagate</name><argument_list pos:start="121:36" pos:end="121:46">(<argument pos:start="121:37" pos:end="121:40"><expr pos:start="121:37" pos:end="121:40"><name pos:start="121:37" pos:end="121:40">errp</name></expr></argument>, <argument pos:start="121:43" pos:end="121:45"><expr pos:start="121:43" pos:end="121:45"><name pos:start="121:43" pos:end="121:45">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="123:21" pos:end="123:27">return;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="129:13" pos:end="129:30"><expr pos:start="129:13" pos:end="129:29"><call pos:start="129:13" pos:end="129:29"><name pos:start="129:13" pos:end="129:26">visit_end_list</name><argument_list pos:start="129:27" pos:end="129:29">(<argument pos:start="129:28" pos:end="129:28"><expr pos:start="129:28" pos:end="129:28"><name pos:start="129:28" pos:end="129:28">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="131:13" pos:end="131:18">break;</break>

        </block_content>}</block>

        <default pos:start="135:9" pos:end="135:16">default:</default>

            <expr_stmt pos:start="137:13" pos:end="137:80"><expr pos:start="137:13" pos:end="137:79"><call pos:start="137:13" pos:end="137:79"><name pos:start="137:13" pos:end="137:22">error_setg</name><argument_list pos:start="137:23" pos:end="137:79">(<argument pos:start="137:24" pos:end="137:35"><expr pos:start="137:24" pos:end="137:35"><operator pos:start="137:24" pos:end="137:24">&amp;</operator><name pos:start="137:25" pos:end="137:35">error_abort</name></expr></argument>, <argument pos:start="137:38" pos:end="137:73"><expr pos:start="137:38" pos:end="137:73"><literal type="string" pos:start="137:38" pos:end="137:73">"device FDT in unexpected state: %d"</literal></expr></argument>, <argument pos:start="137:76" pos:end="137:78"><expr pos:start="137:76" pos:end="137:78"><name pos:start="137:76" pos:end="137:78">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <expr_stmt pos:start="141:9" pos:end="141:37"><expr pos:start="141:9" pos:end="141:36"><name pos:start="141:9" pos:end="141:18">fdt_offset</name> <operator pos:start="141:20" pos:end="141:20">=</operator> <name pos:start="141:22" pos:end="141:36">fdt_offset_next</name></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="143:13" pos:end="143:28">(<expr pos:start="143:14" pos:end="143:27"><name pos:start="143:14" pos:end="143:22">fdt_depth</name> <operator pos:start="143:24" pos:end="143:25">!=</operator> <literal type="number" pos:start="143:27" pos:end="143:27">0</literal></expr>)</condition>;</do>

</block_content>}</block></function>
</unit>
