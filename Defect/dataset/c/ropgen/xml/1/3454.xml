<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3454.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">rocker_test_dma_ctrl</name><parameter_list pos:start="1:33" pos:end="1:57">(<parameter pos:start="1:34" pos:end="1:42"><decl pos:start="1:34" pos:end="1:42"><type pos:start="1:34" pos:end="1:42"><name pos:start="1:34" pos:end="1:39">Rocker</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">r</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:56"><decl pos:start="1:45" pos:end="1:56"><type pos:start="1:45" pos:end="1:56"><name pos:start="1:45" pos:end="1:52">uint32_t</name></type> <name pos:start="1:54" pos:end="1:56">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:16">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PCIDevice</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:18">dev</name> <init pos:start="5:20" pos:end="5:34">= <expr pos:start="5:22" pos:end="5:34"><call pos:start="5:22" pos:end="5:34"><name pos:start="5:22" pos:end="5:31">PCI_DEVICE</name><argument_list pos:start="5:32" pos:end="5:34">(<argument pos:start="5:33" pos:end="5:33"><expr pos:start="5:33" pos:end="5:33"><name pos:start="5:33" pos:end="5:33">r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:13">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:37"><expr pos:start="13:5" pos:end="13:36"><name pos:start="13:5" pos:end="13:7">buf</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:36"><name pos:start="13:11" pos:end="13:18">g_malloc</name><argument_list pos:start="13:19" pos:end="13:36">(<argument pos:start="13:20" pos:end="13:35"><expr pos:start="13:20" pos:end="13:35"><name pos:start="13:20" pos:end="13:35"><name pos:start="13:20" pos:end="13:20">r</name><operator pos:start="13:21" pos:end="13:22">-&gt;</operator><name pos:start="13:23" pos:end="13:35">test_dma_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:13">(<expr pos:start="17:9" pos:end="17:12"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:12">buf</name></expr>)</condition> <block pos:start="17:15" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:48"><expr pos:start="19:9" pos:end="19:47"><call pos:start="19:9" pos:end="19:47"><name pos:start="19:9" pos:end="19:15">DPRINTF</name><argument_list pos:start="19:16" pos:end="19:47">(<argument pos:start="19:17" pos:end="19:46"><expr pos:start="19:17" pos:end="19:46"><literal type="string" pos:start="19:17" pos:end="19:46">"test dma buffer alloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="27:5" pos:end="59:5">switch <condition pos:start="27:12" pos:end="27:16">(<expr pos:start="27:13" pos:end="27:15"><name pos:start="27:13" pos:end="27:15">val</name></expr>)</condition> <block pos:start="27:18" pos:end="59:5">{<block_content pos:start="29:5" pos:end="57:21">

    <case pos:start="29:5" pos:end="29:36">case <expr pos:start="29:10" pos:end="29:35"><name pos:start="29:10" pos:end="29:35">ROCKER_TEST_DMA_CTRL_CLEAR</name></expr>:</case>

        <expr_stmt pos:start="31:9" pos:end="31:41"><expr pos:start="31:9" pos:end="31:40"><call pos:start="31:9" pos:end="31:40"><name pos:start="31:9" pos:end="31:14">memset</name><argument_list pos:start="31:15" pos:end="31:40">(<argument pos:start="31:16" pos:end="31:18"><expr pos:start="31:16" pos:end="31:18"><name pos:start="31:16" pos:end="31:18">buf</name></expr></argument>, <argument pos:start="31:21" pos:end="31:21"><expr pos:start="31:21" pos:end="31:21"><literal type="number" pos:start="31:21" pos:end="31:21">0</literal></expr></argument>, <argument pos:start="31:24" pos:end="31:39"><expr pos:start="31:24" pos:end="31:39"><name pos:start="31:24" pos:end="31:39"><name pos:start="31:24" pos:end="31:24">r</name><operator pos:start="31:25" pos:end="31:26">-&gt;</operator><name pos:start="31:27" pos:end="31:39">test_dma_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="33:9" pos:end="33:14">break;</break>

    <case pos:start="35:5" pos:end="35:35">case <expr pos:start="35:10" pos:end="35:34"><name pos:start="35:10" pos:end="35:34">ROCKER_TEST_DMA_CTRL_FILL</name></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:44"><expr pos:start="37:9" pos:end="37:43"><call pos:start="37:9" pos:end="37:43"><name pos:start="37:9" pos:end="37:14">memset</name><argument_list pos:start="37:15" pos:end="37:43">(<argument pos:start="37:16" pos:end="37:18"><expr pos:start="37:16" pos:end="37:18"><name pos:start="37:16" pos:end="37:18">buf</name></expr></argument>, <argument pos:start="37:21" pos:end="37:24"><expr pos:start="37:21" pos:end="37:24"><literal type="number" pos:start="37:21" pos:end="37:24">0x96</literal></expr></argument>, <argument pos:start="37:27" pos:end="37:42"><expr pos:start="37:27" pos:end="37:42"><name pos:start="37:27" pos:end="37:42"><name pos:start="37:27" pos:end="37:27">r</name><operator pos:start="37:28" pos:end="37:29">-&gt;</operator><name pos:start="37:30" pos:end="37:42">test_dma_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <case pos:start="41:5" pos:end="41:37">case <expr pos:start="41:10" pos:end="41:36"><name pos:start="41:10" pos:end="41:36">ROCKER_TEST_DMA_CTRL_INVERT</name></expr>:</case>

        <expr_stmt pos:start="43:9" pos:end="43:67"><expr pos:start="43:9" pos:end="43:66"><call pos:start="43:9" pos:end="43:66"><name pos:start="43:9" pos:end="43:20">pci_dma_read</name><argument_list pos:start="43:21" pos:end="43:66">(<argument pos:start="43:22" pos:end="43:24"><expr pos:start="43:22" pos:end="43:24"><name pos:start="43:22" pos:end="43:24">dev</name></expr></argument>, <argument pos:start="43:27" pos:end="43:42"><expr pos:start="43:27" pos:end="43:42"><name pos:start="43:27" pos:end="43:42"><name pos:start="43:27" pos:end="43:27">r</name><operator pos:start="43:28" pos:end="43:29">-&gt;</operator><name pos:start="43:30" pos:end="43:42">test_dma_addr</name></name></expr></argument>, <argument pos:start="43:45" pos:end="43:47"><expr pos:start="43:45" pos:end="43:47"><name pos:start="43:45" pos:end="43:47">buf</name></expr></argument>, <argument pos:start="43:50" pos:end="43:65"><expr pos:start="43:50" pos:end="43:65"><name pos:start="43:50" pos:end="43:65"><name pos:start="43:50" pos:end="43:50">r</name><operator pos:start="43:51" pos:end="43:52">-&gt;</operator><name pos:start="43:53" pos:end="43:65">test_dma_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="45:9" pos:end="49:9">for <control pos:start="45:13" pos:end="45:46">(<init pos:start="45:14" pos:end="45:19"><expr pos:start="45:14" pos:end="45:18"><name pos:start="45:14" pos:end="45:14">i</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <literal type="number" pos:start="45:18" pos:end="45:18">0</literal></expr>;</init> <condition pos:start="45:21" pos:end="45:41"><expr pos:start="45:21" pos:end="45:40"><name pos:start="45:21" pos:end="45:21">i</name> <operator pos:start="45:23" pos:end="45:23">&lt;</operator> <name pos:start="45:25" pos:end="45:40"><name pos:start="45:25" pos:end="45:25">r</name><operator pos:start="45:26" pos:end="45:27">-&gt;</operator><name pos:start="45:28" pos:end="45:40">test_dma_size</name></name></expr>;</condition> <incr pos:start="45:43" pos:end="45:45"><expr pos:start="45:43" pos:end="45:45"><name pos:start="45:43" pos:end="45:43">i</name><operator pos:start="45:44" pos:end="45:45">++</operator></expr></incr>)</control> <block pos:start="45:48" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:29">

            <expr_stmt pos:start="47:13" pos:end="47:29"><expr pos:start="47:13" pos:end="47:28"><name pos:start="47:13" pos:end="47:18"><name pos:start="47:13" pos:end="47:15">buf</name><index pos:start="47:16" pos:end="47:18">[<expr pos:start="47:17" pos:end="47:17"><name pos:start="47:17" pos:end="47:17">i</name></expr>]</index></name> <operator pos:start="47:20" pos:end="47:20">=</operator> <operator pos:start="47:22" pos:end="47:22">~</operator><name pos:start="47:23" pos:end="47:28"><name pos:start="47:23" pos:end="47:25">buf</name><index pos:start="47:26" pos:end="47:28">[<expr pos:start="47:27" pos:end="47:27"><name pos:start="47:27" pos:end="47:27">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    <default pos:start="53:5" pos:end="53:12">default:</default>

        <expr_stmt pos:start="55:9" pos:end="55:58"><expr pos:start="55:9" pos:end="55:57"><call pos:start="55:9" pos:end="55:57"><name pos:start="55:9" pos:end="55:15">DPRINTF</name><argument_list pos:start="55:16" pos:end="55:57">(<argument pos:start="55:17" pos:end="55:51"><expr pos:start="55:17" pos:end="55:51"><literal type="string" pos:start="55:17" pos:end="55:51">"not test dma control val=0x%08x\n"</literal></expr></argument>, <argument pos:start="55:54" pos:end="55:56"><expr pos:start="55:54" pos:end="55:56"><name pos:start="55:54" pos:end="55:56">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:21">goto <name pos:start="57:14" pos:end="57:20">err_out</name>;</goto>

    </block_content>}</block></switch>

    <expr_stmt pos:start="61:5" pos:end="61:64"><expr pos:start="61:5" pos:end="61:63"><call pos:start="61:5" pos:end="61:63"><name pos:start="61:5" pos:end="61:17">pci_dma_write</name><argument_list pos:start="61:18" pos:end="61:63">(<argument pos:start="61:19" pos:end="61:21"><expr pos:start="61:19" pos:end="61:21"><name pos:start="61:19" pos:end="61:21">dev</name></expr></argument>, <argument pos:start="61:24" pos:end="61:39"><expr pos:start="61:24" pos:end="61:39"><name pos:start="61:24" pos:end="61:39"><name pos:start="61:24" pos:end="61:24">r</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:39">test_dma_addr</name></name></expr></argument>, <argument pos:start="61:42" pos:end="61:44"><expr pos:start="61:42" pos:end="61:44"><name pos:start="61:42" pos:end="61:44">buf</name></expr></argument>, <argument pos:start="61:47" pos:end="61:62"><expr pos:start="61:47" pos:end="61:62"><name pos:start="61:47" pos:end="61:62"><name pos:start="61:47" pos:end="61:47">r</name><operator pos:start="61:48" pos:end="61:49">-&gt;</operator><name pos:start="61:50" pos:end="61:62">test_dma_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:45"><expr pos:start="65:5" pos:end="65:44"><call pos:start="65:5" pos:end="65:44"><name pos:start="65:5" pos:end="65:19">rocker_msix_irq</name><argument_list pos:start="65:20" pos:end="65:44">(<argument pos:start="65:21" pos:end="65:21"><expr pos:start="65:21" pos:end="65:21"><name pos:start="65:21" pos:end="65:21">r</name></expr></argument>, <argument pos:start="65:24" pos:end="65:43"><expr pos:start="65:24" pos:end="65:43"><name pos:start="65:24" pos:end="65:43">ROCKER_MSIX_VEC_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="69:1" pos:end="69:8"><name pos:start="69:1" pos:end="69:7">err_out</name>:</label>

    <expr_stmt pos:start="71:5" pos:end="71:16"><expr pos:start="71:5" pos:end="71:15"><call pos:start="71:5" pos:end="71:15"><name pos:start="71:5" pos:end="71:10">g_free</name><argument_list pos:start="71:11" pos:end="71:15">(<argument pos:start="71:12" pos:end="71:14"><expr pos:start="71:12" pos:end="71:14"><name pos:start="71:12" pos:end="71:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
