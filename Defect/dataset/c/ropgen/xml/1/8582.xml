<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8582.c" pos:tabs="8"><function pos:start="1:1" pos:end="573:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int32_t</name></type> <name pos:start="1:16" pos:end="1:40">scsi_disk_emulate_command</name><parameter_list pos:start="1:41" pos:end="1:72">(<parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><name pos:start="1:42" pos:end="1:52">SCSIRequest</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:57">req</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:71"><decl pos:start="1:60" pos:end="1:71"><type pos:start="1:60" pos:end="1:71"><name pos:start="1:60" pos:end="1:66">uint8_t</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:71">buf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="573:1">{<block_content pos:start="5:5" pos:end="571:13">

    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SCSIDiskReq</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">r</name> <init pos:start="5:20" pos:end="5:53">= <expr pos:start="5:22" pos:end="5:53"><call pos:start="5:22" pos:end="5:53"><name pos:start="5:22" pos:end="5:30">DO_UPCAST</name><argument_list pos:start="5:31" pos:end="5:53">(<argument pos:start="5:32" pos:end="5:42"><expr pos:start="5:32" pos:end="5:42"><name pos:start="5:32" pos:end="5:42">SCSIDiskReq</name></expr></argument>, <argument pos:start="5:45" pos:end="5:47"><expr pos:start="5:45" pos:end="5:47"><name pos:start="5:45" pos:end="5:47">req</name></expr></argument>, <argument pos:start="5:50" pos:end="5:52"><expr pos:start="5:50" pos:end="5:52"><name pos:start="5:50" pos:end="5:52">req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:64"><decl pos:start="7:5" pos:end="7:63"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">SCSIDiskState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:63">= <expr pos:start="7:24" pos:end="7:63"><call pos:start="7:24" pos:end="7:63"><name pos:start="7:24" pos:end="7:32">DO_UPCAST</name><argument_list pos:start="7:33" pos:end="7:63">(<argument pos:start="7:34" pos:end="7:46"><expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">SCSIDiskState</name></expr></argument>, <argument pos:start="7:49" pos:end="7:52"><expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">qdev</name></expr></argument>, <argument pos:start="7:55" pos:end="7:62"><expr pos:start="7:55" pos:end="7:62"><name pos:start="7:55" pos:end="7:62"><name pos:start="7:55" pos:end="7:57">req</name><operator pos:start="7:58" pos:end="7:59">-&gt;</operator><name pos:start="7:60" pos:end="7:62">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:23">nb_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:19">outbuf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:14">buflen</name></decl>;</decl_stmt>



    <switch pos:start="17:5" pos:end="61:5">switch <condition pos:start="17:12" pos:end="17:28">(<expr pos:start="17:13" pos:end="17:27"><name pos:start="17:13" pos:end="17:27"><name pos:start="17:13" pos:end="17:15">req</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:20">cmd</name><operator pos:start="17:21" pos:end="17:21">.</operator><name pos:start="17:22" pos:end="17:24">buf</name><index pos:start="17:25" pos:end="17:27">[<expr pos:start="17:26" pos:end="17:26"><literal type="number" pos:start="17:26" pos:end="17:26">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="17:30" pos:end="61:5">{<block_content pos:start="19:5" pos:end="59:14">

    <case pos:start="19:5" pos:end="19:17">case <expr pos:start="19:10" pos:end="19:16"><name pos:start="19:10" pos:end="19:16">INQUIRY</name></expr>:</case>

    <case pos:start="21:5" pos:end="21:20">case <expr pos:start="21:10" pos:end="21:19"><name pos:start="21:10" pos:end="21:19">MODE_SENSE</name></expr>:</case>

    <case pos:start="23:5" pos:end="23:23">case <expr pos:start="23:10" pos:end="23:22"><name pos:start="23:10" pos:end="23:22">MODE_SENSE_10</name></expr>:</case>

    <case pos:start="25:5" pos:end="25:17">case <expr pos:start="25:10" pos:end="25:16"><name pos:start="25:10" pos:end="25:16">RESERVE</name></expr>:</case>

    <case pos:start="27:5" pos:end="27:20">case <expr pos:start="27:10" pos:end="27:19"><name pos:start="27:10" pos:end="27:19">RESERVE_10</name></expr>:</case>

    <case pos:start="29:5" pos:end="29:17">case <expr pos:start="29:10" pos:end="29:16"><name pos:start="29:10" pos:end="29:16">RELEASE</name></expr>:</case>

    <case pos:start="31:5" pos:end="31:20">case <expr pos:start="31:10" pos:end="31:19"><name pos:start="31:10" pos:end="31:19">RELEASE_10</name></expr>:</case>

    <case pos:start="33:5" pos:end="33:20">case <expr pos:start="33:10" pos:end="33:19"><name pos:start="33:10" pos:end="33:19">START_STOP</name></expr>:</case>

    <case pos:start="35:5" pos:end="35:30">case <expr pos:start="35:10" pos:end="35:29"><name pos:start="35:10" pos:end="35:29">ALLOW_MEDIUM_REMOVAL</name></expr>:</case>

    <case pos:start="37:5" pos:end="37:27">case <expr pos:start="37:10" pos:end="37:26"><name pos:start="37:10" pos:end="37:26">GET_CONFIGURATION</name></expr>:</case>

    <case pos:start="39:5" pos:end="39:39">case <expr pos:start="39:10" pos:end="39:38"><name pos:start="39:10" pos:end="39:38">GET_EVENT_STATUS_NOTIFICATION</name></expr>:</case>

    <case pos:start="41:5" pos:end="41:26">case <expr pos:start="41:10" pos:end="41:25"><name pos:start="41:10" pos:end="41:25">MECHANISM_STATUS</name></expr>:</case>

    <case pos:start="43:5" pos:end="43:23">case <expr pos:start="43:10" pos:end="43:22"><name pos:start="43:10" pos:end="43:22">REQUEST_SENSE</name></expr>:</case>

        <break pos:start="45:9" pos:end="45:14">break;</break>



    <default pos:start="49:5" pos:end="49:12">default:</default>

        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:63">(<expr pos:start="51:13" pos:end="51:62"><name pos:start="51:13" pos:end="51:24"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:24">tray_open</name></name> <operator pos:start="51:26" pos:end="51:27">||</operator> <operator pos:start="51:29" pos:end="51:29">!</operator><call pos:start="51:30" pos:end="51:62"><name pos:start="51:30" pos:end="51:45">bdrv_is_inserted</name><argument_list pos:start="51:46" pos:end="51:62">(<argument pos:start="51:47" pos:end="51:61"><expr pos:start="51:47" pos:end="51:61"><name pos:start="51:47" pos:end="51:61"><name pos:start="51:47" pos:end="51:47">s</name><operator pos:start="51:48" pos:end="51:49">-&gt;</operator><name pos:start="51:50" pos:end="51:53">qdev</name><operator pos:start="51:54" pos:end="51:54">.</operator><name pos:start="51:55" pos:end="51:58">conf</name><operator pos:start="51:59" pos:end="51:59">.</operator><name pos:start="51:60" pos:end="51:61">bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:65" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:21">

            <expr_stmt pos:start="53:13" pos:end="53:59"><expr pos:start="53:13" pos:end="53:58"><call pos:start="53:13" pos:end="53:58"><name pos:start="53:13" pos:end="53:32">scsi_check_condition</name><argument_list pos:start="53:33" pos:end="53:58">(<argument pos:start="53:34" pos:end="53:34"><expr pos:start="53:34" pos:end="53:34"><name pos:start="53:34" pos:end="53:34">r</name></expr></argument>, <argument pos:start="53:37" pos:end="53:57"><expr pos:start="53:37" pos:end="53:57"><call pos:start="53:37" pos:end="53:57"><name pos:start="53:37" pos:end="53:46">SENSE_CODE</name><argument_list pos:start="53:47" pos:end="53:57">(<argument pos:start="53:48" pos:end="53:56"><expr pos:start="53:48" pos:end="53:56"><name pos:start="53:48" pos:end="53:56">NO_MEDIUM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:21">return <expr pos:start="55:20" pos:end="55:20"><literal type="number" pos:start="55:20" pos:end="55:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="65:5" pos:end="79:7">/*

     * FIXME: we shouldn't return anything bigger than 4k, but the code

     * requires the buffer to be as big as req-&gt;cmd.xfer in several

     * places.  So, do not allow CDBs with a very large ALLOCATION

     * LENGTH.  The real fix would be to modify scsi_read_data and

     * dma_buf_read, so that they return data beyond the buflen

     * as all zeros.

     */</comment>

    <if_stmt pos:start="81:5" pos:end="85:5"><if pos:start="81:5" pos:end="85:5">if <condition pos:start="81:8" pos:end="81:30">(<expr pos:start="81:9" pos:end="81:29"><name pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:11">req</name><operator pos:start="81:12" pos:end="81:13">-&gt;</operator><name pos:start="81:14" pos:end="81:16">cmd</name><operator pos:start="81:17" pos:end="81:17">.</operator><name pos:start="81:18" pos:end="81:21">xfer</name></name> <operator pos:start="81:23" pos:end="81:23">&gt;</operator> <literal type="number" pos:start="81:25" pos:end="81:29">65536</literal></expr>)</condition> <block pos:start="81:32" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:29">

        <goto pos:start="83:9" pos:end="83:29">goto <name pos:start="83:14" pos:end="83:28">illegal_request</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:41"><expr pos:start="87:5" pos:end="87:40"><name pos:start="87:5" pos:end="87:13"><name pos:start="87:5" pos:end="87:5">r</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:13">buflen</name></name> <operator pos:start="87:15" pos:end="87:15">=</operator> <call pos:start="87:17" pos:end="87:40"><name pos:start="87:17" pos:end="87:19">MAX</name><argument_list pos:start="87:20" pos:end="87:40">(<argument pos:start="87:21" pos:end="87:24"><expr pos:start="87:21" pos:end="87:24"><literal type="number" pos:start="87:21" pos:end="87:24">4096</literal></expr></argument>, <argument pos:start="87:27" pos:end="87:39"><expr pos:start="87:27" pos:end="87:39"><name pos:start="87:27" pos:end="87:39"><name pos:start="87:27" pos:end="87:29">req</name><operator pos:start="87:30" pos:end="87:31">-&gt;</operator><name pos:start="87:32" pos:end="87:34">cmd</name><operator pos:start="87:35" pos:end="87:35">.</operator><name pos:start="87:36" pos:end="87:39">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:25">(<expr pos:start="91:9" pos:end="91:24"><operator pos:start="91:9" pos:end="91:9">!</operator><name pos:start="91:10" pos:end="91:24"><name pos:start="91:10" pos:end="91:10">r</name><operator pos:start="91:11" pos:end="91:12">-&gt;</operator><name pos:start="91:13" pos:end="91:15">iov</name><operator pos:start="91:16" pos:end="91:16">.</operator><name pos:start="91:17" pos:end="91:24">iov_base</name></name></expr>)</condition> <block pos:start="91:27" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:70">

        <expr_stmt pos:start="93:9" pos:end="93:70"><expr pos:start="93:9" pos:end="93:69"><name pos:start="93:9" pos:end="93:23"><name pos:start="93:9" pos:end="93:9">r</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:14">iov</name><operator pos:start="93:15" pos:end="93:15">.</operator><name pos:start="93:16" pos:end="93:23">iov_base</name></name> <operator pos:start="93:25" pos:end="93:25">=</operator> <call pos:start="93:27" pos:end="93:69"><name pos:start="93:27" pos:end="93:41">qemu_blockalign</name><argument_list pos:start="93:42" pos:end="93:69">(<argument pos:start="93:43" pos:end="93:57"><expr pos:start="93:43" pos:end="93:57"><name pos:start="93:43" pos:end="93:57"><name pos:start="93:43" pos:end="93:43">s</name><operator pos:start="93:44" pos:end="93:45">-&gt;</operator><name pos:start="93:46" pos:end="93:49">qdev</name><operator pos:start="93:50" pos:end="93:50">.</operator><name pos:start="93:51" pos:end="93:54">conf</name><operator pos:start="93:55" pos:end="93:55">.</operator><name pos:start="93:56" pos:end="93:57">bs</name></name></expr></argument>, <argument pos:start="93:60" pos:end="93:68"><expr pos:start="93:60" pos:end="93:68"><name pos:start="93:60" pos:end="93:68"><name pos:start="93:60" pos:end="93:60">r</name><operator pos:start="93:61" pos:end="93:62">-&gt;</operator><name pos:start="93:63" pos:end="93:68">buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:27"><expr pos:start="99:5" pos:end="99:26"><name pos:start="99:5" pos:end="99:10">buflen</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <name pos:start="99:14" pos:end="99:26"><name pos:start="99:14" pos:end="99:16">req</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:21">cmd</name><operator pos:start="99:22" pos:end="99:22">.</operator><name pos:start="99:23" pos:end="99:26">xfer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:29"><expr pos:start="101:5" pos:end="101:28"><name pos:start="101:5" pos:end="101:10">outbuf</name> <operator pos:start="101:12" pos:end="101:12">=</operator> <name pos:start="101:14" pos:end="101:28"><name pos:start="101:14" pos:end="101:14">r</name><operator pos:start="101:15" pos:end="101:16">-&gt;</operator><name pos:start="101:17" pos:end="101:19">iov</name><operator pos:start="101:20" pos:end="101:20">.</operator><name pos:start="101:21" pos:end="101:28">iov_base</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:33"><expr pos:start="103:5" pos:end="103:32"><call pos:start="103:5" pos:end="103:32"><name pos:start="103:5" pos:end="103:10">memset</name><argument_list pos:start="103:11" pos:end="103:32">(<argument pos:start="103:12" pos:end="103:17"><expr pos:start="103:12" pos:end="103:17"><name pos:start="103:12" pos:end="103:17">outbuf</name></expr></argument>, <argument pos:start="103:20" pos:end="103:20"><expr pos:start="103:20" pos:end="103:20"><literal type="number" pos:start="103:20" pos:end="103:20">0</literal></expr></argument>, <argument pos:start="103:23" pos:end="103:31"><expr pos:start="103:23" pos:end="103:31"><name pos:start="103:23" pos:end="103:31"><name pos:start="103:23" pos:end="103:23">r</name><operator pos:start="103:24" pos:end="103:25">-&gt;</operator><name pos:start="103:26" pos:end="103:31">buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="105:5" pos:end="529:5">switch <condition pos:start="105:12" pos:end="105:28">(<expr pos:start="105:13" pos:end="105:27"><name pos:start="105:13" pos:end="105:27"><name pos:start="105:13" pos:end="105:15">req</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:20">cmd</name><operator pos:start="105:21" pos:end="105:21">.</operator><name pos:start="105:22" pos:end="105:24">buf</name><index pos:start="105:25" pos:end="105:27">[<expr pos:start="105:26" pos:end="105:26"><literal type="number" pos:start="105:26" pos:end="105:26">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="105:30" pos:end="529:5">{<block_content pos:start="107:5" pos:end="527:17">

    <case pos:start="107:5" pos:end="107:25">case <expr pos:start="107:10" pos:end="107:24"><name pos:start="107:10" pos:end="107:24">TEST_UNIT_READY</name></expr>:</case>

        <expr_stmt pos:start="109:9" pos:end="109:67"><expr pos:start="109:9" pos:end="109:66"><call pos:start="109:9" pos:end="109:66"><name pos:start="109:9" pos:end="109:14">assert</name><argument_list pos:start="109:15" pos:end="109:66">(<argument pos:start="109:16" pos:end="109:65"><expr pos:start="109:16" pos:end="109:65"><operator pos:start="109:16" pos:end="109:16">!</operator><name pos:start="109:17" pos:end="109:28"><name pos:start="109:17" pos:end="109:17">s</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:28">tray_open</name></name> <operator pos:start="109:30" pos:end="109:31">&amp;&amp;</operator> <call pos:start="109:33" pos:end="109:65"><name pos:start="109:33" pos:end="109:48">bdrv_is_inserted</name><argument_list pos:start="109:49" pos:end="109:65">(<argument pos:start="109:50" pos:end="109:64"><expr pos:start="109:50" pos:end="109:64"><name pos:start="109:50" pos:end="109:64"><name pos:start="109:50" pos:end="109:50">s</name><operator pos:start="109:51" pos:end="109:52">-&gt;</operator><name pos:start="109:53" pos:end="109:56">qdev</name><operator pos:start="109:57" pos:end="109:57">.</operator><name pos:start="109:58" pos:end="109:61">conf</name><operator pos:start="109:62" pos:end="109:62">.</operator><name pos:start="109:63" pos:end="109:64">bs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="111:9" pos:end="111:14">break;</break>

    <case pos:start="113:5" pos:end="113:17">case <expr pos:start="113:10" pos:end="113:16"><name pos:start="113:10" pos:end="113:16">INQUIRY</name></expr>:</case>

        <expr_stmt pos:start="115:9" pos:end="115:56"><expr pos:start="115:9" pos:end="115:55"><name pos:start="115:9" pos:end="115:14">buflen</name> <operator pos:start="115:16" pos:end="115:16">=</operator> <call pos:start="115:18" pos:end="115:55"><name pos:start="115:18" pos:end="115:42">scsi_disk_emulate_inquiry</name><argument_list pos:start="115:43" pos:end="115:55">(<argument pos:start="115:44" pos:end="115:46"><expr pos:start="115:44" pos:end="115:46"><name pos:start="115:44" pos:end="115:46">req</name></expr></argument>, <argument pos:start="115:49" pos:end="115:54"><expr pos:start="115:49" pos:end="115:54"><name pos:start="115:49" pos:end="115:54">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="117:9" pos:end="121:9"><if pos:start="117:9" pos:end="121:9">if <condition pos:start="117:12" pos:end="117:23">(<expr pos:start="117:13" pos:end="117:22"><name pos:start="117:13" pos:end="117:18">buflen</name> <operator pos:start="117:20" pos:end="117:20">&lt;</operator> <literal type="number" pos:start="117:22" pos:end="117:22">0</literal></expr>)</condition> <block pos:start="117:25" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:33">

            <goto pos:start="119:13" pos:end="119:33">goto <name pos:start="119:18" pos:end="119:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="123:9" pos:end="123:14">break;</break>

    <case pos:start="125:5" pos:end="125:20">case <expr pos:start="125:10" pos:end="125:19"><name pos:start="125:10" pos:end="125:19">MODE_SENSE</name></expr>:</case>

    <case pos:start="127:5" pos:end="127:23">case <expr pos:start="127:10" pos:end="127:22"><name pos:start="127:10" pos:end="127:22">MODE_SENSE_10</name></expr>:</case>

        <expr_stmt pos:start="129:9" pos:end="129:57"><expr pos:start="129:9" pos:end="129:56"><name pos:start="129:9" pos:end="129:14">buflen</name> <operator pos:start="129:16" pos:end="129:16">=</operator> <call pos:start="129:18" pos:end="129:56"><name pos:start="129:18" pos:end="129:45">scsi_disk_emulate_mode_sense</name><argument_list pos:start="129:46" pos:end="129:56">(<argument pos:start="129:47" pos:end="129:47"><expr pos:start="129:47" pos:end="129:47"><name pos:start="129:47" pos:end="129:47">r</name></expr></argument>, <argument pos:start="129:50" pos:end="129:55"><expr pos:start="129:50" pos:end="129:55"><name pos:start="129:50" pos:end="129:55">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="135:9"><if pos:start="131:9" pos:end="135:9">if <condition pos:start="131:12" pos:end="131:23">(<expr pos:start="131:13" pos:end="131:22"><name pos:start="131:13" pos:end="131:18">buflen</name> <operator pos:start="131:20" pos:end="131:20">&lt;</operator> <literal type="number" pos:start="131:22" pos:end="131:22">0</literal></expr>)</condition> <block pos:start="131:25" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:33">

            <goto pos:start="133:13" pos:end="133:33">goto <name pos:start="133:18" pos:end="133:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="137:9" pos:end="137:14">break;</break>

    <case pos:start="139:5" pos:end="139:18">case <expr pos:start="139:10" pos:end="139:17"><name pos:start="139:10" pos:end="139:17">READ_TOC</name></expr>:</case>

        <expr_stmt pos:start="141:9" pos:end="141:57"><expr pos:start="141:9" pos:end="141:56"><name pos:start="141:9" pos:end="141:14">buflen</name> <operator pos:start="141:16" pos:end="141:16">=</operator> <call pos:start="141:18" pos:end="141:56"><name pos:start="141:18" pos:end="141:43">scsi_disk_emulate_read_toc</name><argument_list pos:start="141:44" pos:end="141:56">(<argument pos:start="141:45" pos:end="141:47"><expr pos:start="141:45" pos:end="141:47"><name pos:start="141:45" pos:end="141:47">req</name></expr></argument>, <argument pos:start="141:50" pos:end="141:55"><expr pos:start="141:50" pos:end="141:55"><name pos:start="141:50" pos:end="141:55">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="143:9" pos:end="147:9"><if pos:start="143:9" pos:end="147:9">if <condition pos:start="143:12" pos:end="143:23">(<expr pos:start="143:13" pos:end="143:22"><name pos:start="143:13" pos:end="143:18">buflen</name> <operator pos:start="143:20" pos:end="143:20">&lt;</operator> <literal type="number" pos:start="143:22" pos:end="143:22">0</literal></expr>)</condition> <block pos:start="143:25" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:33">

            <goto pos:start="145:13" pos:end="145:33">goto <name pos:start="145:18" pos:end="145:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="149:9" pos:end="149:14">break;</break>

    <case pos:start="151:5" pos:end="151:17">case <expr pos:start="151:10" pos:end="151:16"><name pos:start="151:10" pos:end="151:16">RESERVE</name></expr>:</case>

        <if_stmt pos:start="153:9" pos:end="157:9"><if pos:start="153:9" pos:end="157:9">if <condition pos:start="153:12" pos:end="153:32">(<expr pos:start="153:13" pos:end="153:31"><name pos:start="153:13" pos:end="153:27"><name pos:start="153:13" pos:end="153:15">req</name><operator pos:start="153:16" pos:end="153:17">-&gt;</operator><name pos:start="153:18" pos:end="153:20">cmd</name><operator pos:start="153:21" pos:end="153:21">.</operator><name pos:start="153:22" pos:end="153:24">buf</name><index pos:start="153:25" pos:end="153:27">[<expr pos:start="153:26" pos:end="153:26"><literal type="number" pos:start="153:26" pos:end="153:26">1</literal></expr>]</index></name> <operator pos:start="153:29" pos:end="153:29">&amp;</operator> <literal type="number" pos:start="153:31" pos:end="153:31">1</literal></expr>)</condition> <block pos:start="153:34" pos:end="157:9">{<block_content pos:start="155:13" pos:end="155:33">

            <goto pos:start="155:13" pos:end="155:33">goto <name pos:start="155:18" pos:end="155:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="159:9" pos:end="159:14">break;</break>

    <case pos:start="161:5" pos:end="161:20">case <expr pos:start="161:10" pos:end="161:19"><name pos:start="161:10" pos:end="161:19">RESERVE_10</name></expr>:</case>

        <if_stmt pos:start="163:9" pos:end="167:9"><if pos:start="163:9" pos:end="167:9">if <condition pos:start="163:12" pos:end="163:32">(<expr pos:start="163:13" pos:end="163:31"><name pos:start="163:13" pos:end="163:27"><name pos:start="163:13" pos:end="163:15">req</name><operator pos:start="163:16" pos:end="163:17">-&gt;</operator><name pos:start="163:18" pos:end="163:20">cmd</name><operator pos:start="163:21" pos:end="163:21">.</operator><name pos:start="163:22" pos:end="163:24">buf</name><index pos:start="163:25" pos:end="163:27">[<expr pos:start="163:26" pos:end="163:26"><literal type="number" pos:start="163:26" pos:end="163:26">1</literal></expr>]</index></name> <operator pos:start="163:29" pos:end="163:29">&amp;</operator> <literal type="number" pos:start="163:31" pos:end="163:31">3</literal></expr>)</condition> <block pos:start="163:34" pos:end="167:9">{<block_content pos:start="165:13" pos:end="165:33">

            <goto pos:start="165:13" pos:end="165:33">goto <name pos:start="165:18" pos:end="165:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="169:9" pos:end="169:14">break;</break>

    <case pos:start="171:5" pos:end="171:17">case <expr pos:start="171:10" pos:end="171:16"><name pos:start="171:10" pos:end="171:16">RELEASE</name></expr>:</case>

        <if_stmt pos:start="173:9" pos:end="177:9"><if pos:start="173:9" pos:end="177:9">if <condition pos:start="173:12" pos:end="173:32">(<expr pos:start="173:13" pos:end="173:31"><name pos:start="173:13" pos:end="173:27"><name pos:start="173:13" pos:end="173:15">req</name><operator pos:start="173:16" pos:end="173:17">-&gt;</operator><name pos:start="173:18" pos:end="173:20">cmd</name><operator pos:start="173:21" pos:end="173:21">.</operator><name pos:start="173:22" pos:end="173:24">buf</name><index pos:start="173:25" pos:end="173:27">[<expr pos:start="173:26" pos:end="173:26"><literal type="number" pos:start="173:26" pos:end="173:26">1</literal></expr>]</index></name> <operator pos:start="173:29" pos:end="173:29">&amp;</operator> <literal type="number" pos:start="173:31" pos:end="173:31">1</literal></expr>)</condition> <block pos:start="173:34" pos:end="177:9">{<block_content pos:start="175:13" pos:end="175:33">

            <goto pos:start="175:13" pos:end="175:33">goto <name pos:start="175:18" pos:end="175:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="179:9" pos:end="179:14">break;</break>

    <case pos:start="181:5" pos:end="181:20">case <expr pos:start="181:10" pos:end="181:19"><name pos:start="181:10" pos:end="181:19">RELEASE_10</name></expr>:</case>

        <if_stmt pos:start="183:9" pos:end="187:9"><if pos:start="183:9" pos:end="187:9">if <condition pos:start="183:12" pos:end="183:32">(<expr pos:start="183:13" pos:end="183:31"><name pos:start="183:13" pos:end="183:27"><name pos:start="183:13" pos:end="183:15">req</name><operator pos:start="183:16" pos:end="183:17">-&gt;</operator><name pos:start="183:18" pos:end="183:20">cmd</name><operator pos:start="183:21" pos:end="183:21">.</operator><name pos:start="183:22" pos:end="183:24">buf</name><index pos:start="183:25" pos:end="183:27">[<expr pos:start="183:26" pos:end="183:26"><literal type="number" pos:start="183:26" pos:end="183:26">1</literal></expr>]</index></name> <operator pos:start="183:29" pos:end="183:29">&amp;</operator> <literal type="number" pos:start="183:31" pos:end="183:31">3</literal></expr>)</condition> <block pos:start="183:34" pos:end="187:9">{<block_content pos:start="185:13" pos:end="185:33">

            <goto pos:start="185:13" pos:end="185:33">goto <name pos:start="185:18" pos:end="185:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="189:9" pos:end="189:14">break;</break>

    <case pos:start="191:5" pos:end="191:20">case <expr pos:start="191:10" pos:end="191:19"><name pos:start="191:10" pos:end="191:19">START_STOP</name></expr>:</case>

        <if_stmt pos:start="193:9" pos:end="197:9"><if pos:start="193:9" pos:end="197:9">if <condition pos:start="193:12" pos:end="193:48">(<expr pos:start="193:13" pos:end="193:47"><call pos:start="193:13" pos:end="193:43"><name pos:start="193:13" pos:end="193:40">scsi_disk_emulate_start_stop</name><argument_list pos:start="193:41" pos:end="193:43">(<argument pos:start="193:42" pos:end="193:42"><expr pos:start="193:42" pos:end="193:42"><name pos:start="193:42" pos:end="193:42">r</name></expr></argument>)</argument_list></call> <operator pos:start="193:45" pos:end="193:45">&lt;</operator> <literal type="number" pos:start="193:47" pos:end="193:47">0</literal></expr>)</condition> <block pos:start="193:50" pos:end="197:9">{<block_content pos:start="195:13" pos:end="195:21">

            <return pos:start="195:13" pos:end="195:21">return <expr pos:start="195:20" pos:end="195:20"><literal type="number" pos:start="195:20" pos:end="195:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="199:9" pos:end="199:14">break;</break>

    <case pos:start="201:5" pos:end="201:30">case <expr pos:start="201:10" pos:end="201:29"><name pos:start="201:10" pos:end="201:29">ALLOW_MEDIUM_REMOVAL</name></expr>:</case>

        <expr_stmt pos:start="203:9" pos:end="203:45"><expr pos:start="203:9" pos:end="203:44"><name pos:start="203:9" pos:end="203:22"><name pos:start="203:9" pos:end="203:9">s</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:22">tray_locked</name></name> <operator pos:start="203:24" pos:end="203:24">=</operator> <name pos:start="203:26" pos:end="203:40"><name pos:start="203:26" pos:end="203:28">req</name><operator pos:start="203:29" pos:end="203:30">-&gt;</operator><name pos:start="203:31" pos:end="203:33">cmd</name><operator pos:start="203:34" pos:end="203:34">.</operator><name pos:start="203:35" pos:end="203:37">buf</name><index pos:start="203:38" pos:end="203:40">[<expr pos:start="203:39" pos:end="203:39"><literal type="number" pos:start="203:39" pos:end="203:39">4</literal></expr>]</index></name> <operator pos:start="203:42" pos:end="203:42">&amp;</operator> <literal type="number" pos:start="203:44" pos:end="203:44">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:63"><expr pos:start="205:9" pos:end="205:62"><call pos:start="205:9" pos:end="205:62"><name pos:start="205:9" pos:end="205:24">bdrv_lock_medium</name><argument_list pos:start="205:25" pos:end="205:62">(<argument pos:start="205:26" pos:end="205:40"><expr pos:start="205:26" pos:end="205:40"><name pos:start="205:26" pos:end="205:40"><name pos:start="205:26" pos:end="205:26">s</name><operator pos:start="205:27" pos:end="205:28">-&gt;</operator><name pos:start="205:29" pos:end="205:32">qdev</name><operator pos:start="205:33" pos:end="205:33">.</operator><name pos:start="205:34" pos:end="205:37">conf</name><operator pos:start="205:38" pos:end="205:38">.</operator><name pos:start="205:39" pos:end="205:40">bs</name></name></expr></argument>, <argument pos:start="205:43" pos:end="205:61"><expr pos:start="205:43" pos:end="205:61"><name pos:start="205:43" pos:end="205:57"><name pos:start="205:43" pos:end="205:45">req</name><operator pos:start="205:46" pos:end="205:47">-&gt;</operator><name pos:start="205:48" pos:end="205:50">cmd</name><operator pos:start="205:51" pos:end="205:51">.</operator><name pos:start="205:52" pos:end="205:54">buf</name><index pos:start="205:55" pos:end="205:57">[<expr pos:start="205:56" pos:end="205:56"><literal type="number" pos:start="205:56" pos:end="205:56">4</literal></expr>]</index></name> <operator pos:start="205:59" pos:end="205:59">&amp;</operator> <literal type="number" pos:start="205:61" pos:end="205:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="207:9" pos:end="207:14">break;</break>

    <case pos:start="209:5" pos:end="209:26">case <expr pos:start="209:10" pos:end="209:25"><name pos:start="209:10" pos:end="209:25">READ_CAPACITY_10</name></expr>:</case>

        <comment type="block" pos:start="211:9" pos:end="211:61">/* The normal LEN field for this command is zero.  */</comment>

        <expr_stmt pos:start="213:9" pos:end="213:29"><expr pos:start="213:9" pos:end="213:28"><call pos:start="213:9" pos:end="213:28"><name pos:start="213:9" pos:end="213:14">memset</name><argument_list pos:start="213:15" pos:end="213:28">(<argument pos:start="213:16" pos:end="213:21"><expr pos:start="213:16" pos:end="213:21"><name pos:start="213:16" pos:end="213:21">outbuf</name></expr></argument>, <argument pos:start="213:24" pos:end="213:24"><expr pos:start="213:24" pos:end="213:24"><literal type="number" pos:start="213:24" pos:end="213:24">0</literal></expr></argument>, <argument pos:start="213:27" pos:end="213:27"><expr pos:start="213:27" pos:end="213:27"><literal type="number" pos:start="213:27" pos:end="213:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:56"><expr pos:start="215:9" pos:end="215:55"><call pos:start="215:9" pos:end="215:55"><name pos:start="215:9" pos:end="215:25">bdrv_get_geometry</name><argument_list pos:start="215:26" pos:end="215:55">(<argument pos:start="215:27" pos:end="215:41"><expr pos:start="215:27" pos:end="215:41"><name pos:start="215:27" pos:end="215:41"><name pos:start="215:27" pos:end="215:27">s</name><operator pos:start="215:28" pos:end="215:29">-&gt;</operator><name pos:start="215:30" pos:end="215:33">qdev</name><operator pos:start="215:34" pos:end="215:34">.</operator><name pos:start="215:35" pos:end="215:38">conf</name><operator pos:start="215:39" pos:end="215:39">.</operator><name pos:start="215:40" pos:end="215:41">bs</name></name></expr></argument>, <argument pos:start="215:44" pos:end="215:54"><expr pos:start="215:44" pos:end="215:54"><operator pos:start="215:44" pos:end="215:44">&amp;</operator><name pos:start="215:45" pos:end="215:54">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="217:9" pos:end="223:9"><if pos:start="217:9" pos:end="223:9">if <condition pos:start="217:12" pos:end="217:24">(<expr pos:start="217:13" pos:end="217:23"><operator pos:start="217:13" pos:end="217:13">!</operator><name pos:start="217:14" pos:end="217:23">nb_sectors</name></expr>)</condition> <block pos:start="217:26" pos:end="223:9">{<block_content pos:start="219:13" pos:end="221:21">

            <expr_stmt pos:start="219:13" pos:end="219:63"><expr pos:start="219:13" pos:end="219:62"><call pos:start="219:13" pos:end="219:62"><name pos:start="219:13" pos:end="219:32">scsi_check_condition</name><argument_list pos:start="219:33" pos:end="219:62">(<argument pos:start="219:34" pos:end="219:34"><expr pos:start="219:34" pos:end="219:34"><name pos:start="219:34" pos:end="219:34">r</name></expr></argument>, <argument pos:start="219:37" pos:end="219:61"><expr pos:start="219:37" pos:end="219:61"><call pos:start="219:37" pos:end="219:61"><name pos:start="219:37" pos:end="219:46">SENSE_CODE</name><argument_list pos:start="219:47" pos:end="219:61">(<argument pos:start="219:48" pos:end="219:60"><expr pos:start="219:48" pos:end="219:60"><name pos:start="219:48" pos:end="219:60">LUN_NOT_READY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="221:13" pos:end="221:21">return <expr pos:start="221:20" pos:end="221:20"><literal type="number" pos:start="221:20" pos:end="221:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="225:9" pos:end="229:9"><if pos:start="225:9" pos:end="229:9">if <condition pos:start="225:12" pos:end="225:55">(<expr pos:start="225:13" pos:end="225:54"><operator pos:start="225:13" pos:end="225:13">(</operator><name pos:start="225:14" pos:end="225:28"><name pos:start="225:14" pos:end="225:16">req</name><operator pos:start="225:17" pos:end="225:18">-&gt;</operator><name pos:start="225:19" pos:end="225:21">cmd</name><operator pos:start="225:22" pos:end="225:22">.</operator><name pos:start="225:23" pos:end="225:25">buf</name><index pos:start="225:26" pos:end="225:28">[<expr pos:start="225:27" pos:end="225:27"><literal type="number" pos:start="225:27" pos:end="225:27">8</literal></expr>]</index></name> <operator pos:start="225:30" pos:end="225:30">&amp;</operator> <literal type="number" pos:start="225:32" pos:end="225:32">1</literal><operator pos:start="225:33" pos:end="225:33">)</operator> <operator pos:start="225:35" pos:end="225:36">==</operator> <literal type="number" pos:start="225:38" pos:end="225:38">0</literal> <operator pos:start="225:40" pos:end="225:41">&amp;&amp;</operator> <name pos:start="225:43" pos:end="225:54"><name pos:start="225:43" pos:end="225:45">req</name><operator pos:start="225:46" pos:end="225:47">-&gt;</operator><name pos:start="225:48" pos:end="225:50">cmd</name><operator pos:start="225:51" pos:end="225:51">.</operator><name pos:start="225:52" pos:end="225:54">lba</name></name></expr>)</condition> <block pos:start="225:57" pos:end="229:9">{<block_content pos:start="227:13" pos:end="227:33">

            <goto pos:start="227:13" pos:end="227:33">goto <name pos:start="227:18" pos:end="227:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:46"><expr pos:start="231:9" pos:end="231:45"><name pos:start="231:9" pos:end="231:18">nb_sectors</name> <operator pos:start="231:20" pos:end="231:21">/=</operator> <name pos:start="231:23" pos:end="231:39"><name pos:start="231:23" pos:end="231:23">s</name><operator pos:start="231:24" pos:end="231:25">-&gt;</operator><name pos:start="231:26" pos:end="231:29">qdev</name><operator pos:start="231:30" pos:end="231:30">.</operator><name pos:start="231:31" pos:end="231:39">blocksize</name></name> <operator pos:start="231:41" pos:end="231:41">/</operator> <literal type="number" pos:start="231:43" pos:end="231:45">512</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="233:9" pos:end="233:64">/* Returned value is the address of the last sector.  */</comment>

        <expr_stmt pos:start="235:9" pos:end="235:21"><expr pos:start="235:9" pos:end="235:20"><name pos:start="235:9" pos:end="235:18">nb_sectors</name><operator pos:start="235:19" pos:end="235:20">--</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="237:9" pos:end="237:67">/* Remember the new size for read/write sanity checking. */</comment>

        <expr_stmt pos:start="239:9" pos:end="239:37"><expr pos:start="239:9" pos:end="239:36"><name pos:start="239:9" pos:end="239:23"><name pos:start="239:9" pos:end="239:9">s</name><operator pos:start="239:10" pos:end="239:11">-&gt;</operator><name pos:start="239:12" pos:end="239:15">qdev</name><operator pos:start="239:16" pos:end="239:16">.</operator><name pos:start="239:17" pos:end="239:23">max_lba</name></name> <operator pos:start="239:25" pos:end="239:25">=</operator> <name pos:start="239:27" pos:end="239:36">nb_sectors</name></expr>;</expr_stmt>

        <comment type="block" pos:start="241:9" pos:end="241:68">/* Clip to 2TB, instead of returning capacity modulo 2TB. */</comment>

        <if_stmt pos:start="243:9" pos:end="247:9"><if pos:start="243:9" pos:end="247:9">if <condition pos:start="243:12" pos:end="243:36">(<expr pos:start="243:13" pos:end="243:35"><name pos:start="243:13" pos:end="243:22">nb_sectors</name> <operator pos:start="243:24" pos:end="243:24">&gt;</operator> <name pos:start="243:26" pos:end="243:35">UINT32_MAX</name></expr>)</condition> <block pos:start="243:38" pos:end="247:9">{<block_content pos:start="245:13" pos:end="245:36">

            <expr_stmt pos:start="245:13" pos:end="245:36"><expr pos:start="245:13" pos:end="245:35"><name pos:start="245:13" pos:end="245:22">nb_sectors</name> <operator pos:start="245:24" pos:end="245:24">=</operator> <name pos:start="245:26" pos:end="245:35">UINT32_MAX</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:46"><expr pos:start="249:9" pos:end="249:45"><name pos:start="249:9" pos:end="249:17"><name pos:start="249:9" pos:end="249:14">outbuf</name><index pos:start="249:15" pos:end="249:17">[<expr pos:start="249:16" pos:end="249:16"><literal type="number" pos:start="249:16" pos:end="249:16">0</literal></expr>]</index></name> <operator pos:start="249:19" pos:end="249:19">=</operator> <operator pos:start="249:21" pos:end="249:21">(</operator><name pos:start="249:22" pos:end="249:31">nb_sectors</name> <operator pos:start="249:33" pos:end="249:34">&gt;&gt;</operator> <literal type="number" pos:start="249:36" pos:end="249:37">24</literal><operator pos:start="249:38" pos:end="249:38">)</operator> <operator pos:start="249:40" pos:end="249:40">&amp;</operator> <literal type="number" pos:start="249:42" pos:end="249:45">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:46"><expr pos:start="251:9" pos:end="251:45"><name pos:start="251:9" pos:end="251:17"><name pos:start="251:9" pos:end="251:14">outbuf</name><index pos:start="251:15" pos:end="251:17">[<expr pos:start="251:16" pos:end="251:16"><literal type="number" pos:start="251:16" pos:end="251:16">1</literal></expr>]</index></name> <operator pos:start="251:19" pos:end="251:19">=</operator> <operator pos:start="251:21" pos:end="251:21">(</operator><name pos:start="251:22" pos:end="251:31">nb_sectors</name> <operator pos:start="251:33" pos:end="251:34">&gt;&gt;</operator> <literal type="number" pos:start="251:36" pos:end="251:37">16</literal><operator pos:start="251:38" pos:end="251:38">)</operator> <operator pos:start="251:40" pos:end="251:40">&amp;</operator> <literal type="number" pos:start="251:42" pos:end="251:45">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:45"><expr pos:start="253:9" pos:end="253:44"><name pos:start="253:9" pos:end="253:17"><name pos:start="253:9" pos:end="253:14">outbuf</name><index pos:start="253:15" pos:end="253:17">[<expr pos:start="253:16" pos:end="253:16"><literal type="number" pos:start="253:16" pos:end="253:16">2</literal></expr>]</index></name> <operator pos:start="253:19" pos:end="253:19">=</operator> <operator pos:start="253:21" pos:end="253:21">(</operator><name pos:start="253:22" pos:end="253:31">nb_sectors</name> <operator pos:start="253:33" pos:end="253:34">&gt;&gt;</operator> <literal type="number" pos:start="253:36" pos:end="253:36">8</literal><operator pos:start="253:37" pos:end="253:37">)</operator> <operator pos:start="253:39" pos:end="253:39">&amp;</operator> <literal type="number" pos:start="253:41" pos:end="253:44">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:38"><expr pos:start="255:9" pos:end="255:37"><name pos:start="255:9" pos:end="255:17"><name pos:start="255:9" pos:end="255:14">outbuf</name><index pos:start="255:15" pos:end="255:17">[<expr pos:start="255:16" pos:end="255:16"><literal type="number" pos:start="255:16" pos:end="255:16">3</literal></expr>]</index></name> <operator pos:start="255:19" pos:end="255:19">=</operator> <name pos:start="255:21" pos:end="255:30">nb_sectors</name> <operator pos:start="255:32" pos:end="255:32">&amp;</operator> <literal type="number" pos:start="255:34" pos:end="255:37">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:22"><expr pos:start="257:9" pos:end="257:21"><name pos:start="257:9" pos:end="257:17"><name pos:start="257:9" pos:end="257:14">outbuf</name><index pos:start="257:15" pos:end="257:17">[<expr pos:start="257:16" pos:end="257:16"><literal type="number" pos:start="257:16" pos:end="257:16">4</literal></expr>]</index></name> <operator pos:start="257:19" pos:end="257:19">=</operator> <literal type="number" pos:start="257:21" pos:end="257:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:22"><expr pos:start="259:9" pos:end="259:21"><name pos:start="259:9" pos:end="259:17"><name pos:start="259:9" pos:end="259:14">outbuf</name><index pos:start="259:15" pos:end="259:17">[<expr pos:start="259:16" pos:end="259:16"><literal type="number" pos:start="259:16" pos:end="259:16">5</literal></expr>]</index></name> <operator pos:start="259:19" pos:end="259:19">=</operator> <literal type="number" pos:start="259:21" pos:end="259:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:43"><expr pos:start="261:9" pos:end="261:42"><name pos:start="261:9" pos:end="261:17"><name pos:start="261:9" pos:end="261:14">outbuf</name><index pos:start="261:15" pos:end="261:17">[<expr pos:start="261:16" pos:end="261:16"><literal type="number" pos:start="261:16" pos:end="261:16">6</literal></expr>]</index></name> <operator pos:start="261:19" pos:end="261:19">=</operator> <name pos:start="261:21" pos:end="261:37"><name pos:start="261:21" pos:end="261:21">s</name><operator pos:start="261:22" pos:end="261:23">-&gt;</operator><name pos:start="261:24" pos:end="261:27">qdev</name><operator pos:start="261:28" pos:end="261:28">.</operator><name pos:start="261:29" pos:end="261:37">blocksize</name></name> <operator pos:start="261:39" pos:end="261:40">&gt;&gt;</operator> <literal type="number" pos:start="261:42" pos:end="261:42">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:22"><expr pos:start="263:9" pos:end="263:21"><name pos:start="263:9" pos:end="263:17"><name pos:start="263:9" pos:end="263:14">outbuf</name><index pos:start="263:15" pos:end="263:17">[<expr pos:start="263:16" pos:end="263:16"><literal type="number" pos:start="263:16" pos:end="263:16">7</literal></expr>]</index></name> <operator pos:start="263:19" pos:end="263:19">=</operator> <literal type="number" pos:start="263:21" pos:end="263:21">0</literal></expr>;</expr_stmt>

        <break pos:start="265:9" pos:end="265:14">break;</break>

    <case pos:start="267:5" pos:end="267:23">case <expr pos:start="267:10" pos:end="267:22"><name pos:start="267:10" pos:end="267:22">REQUEST_SENSE</name></expr>:</case>

        <comment type="block" pos:start="269:9" pos:end="269:38">/* Just return "NO SENSE".  */</comment>

        <expr_stmt pos:start="271:9" pos:end="273:62"><expr pos:start="271:9" pos:end="273:61"><name pos:start="271:9" pos:end="271:14">buflen</name> <operator pos:start="271:16" pos:end="271:16">=</operator> <call pos:start="271:18" pos:end="273:61"><name pos:start="271:18" pos:end="271:33">scsi_build_sense</name><argument_list pos:start="271:34" pos:end="273:61">(<argument pos:start="271:35" pos:end="271:38"><expr pos:start="271:35" pos:end="271:38"><name pos:start="271:35" pos:end="271:38">NULL</name></expr></argument>, <argument pos:start="271:41" pos:end="271:41"><expr pos:start="271:41" pos:end="271:41"><literal type="number" pos:start="271:41" pos:end="271:41">0</literal></expr></argument>, <argument pos:start="271:44" pos:end="271:49"><expr pos:start="271:44" pos:end="271:49"><name pos:start="271:44" pos:end="271:49">outbuf</name></expr></argument>, <argument pos:start="271:52" pos:end="271:60"><expr pos:start="271:52" pos:end="271:60"><name pos:start="271:52" pos:end="271:60"><name pos:start="271:52" pos:end="271:52">r</name><operator pos:start="271:53" pos:end="271:54">-&gt;</operator><name pos:start="271:55" pos:end="271:60">buflen</name></name></expr></argument>,

                                  <argument pos:start="273:35" pos:end="273:60"><expr pos:start="273:35" pos:end="273:60"><operator pos:start="273:35" pos:end="273:35">(</operator><name pos:start="273:36" pos:end="273:50"><name pos:start="273:36" pos:end="273:38">req</name><operator pos:start="273:39" pos:end="273:40">-&gt;</operator><name pos:start="273:41" pos:end="273:43">cmd</name><operator pos:start="273:44" pos:end="273:44">.</operator><name pos:start="273:45" pos:end="273:47">buf</name><index pos:start="273:48" pos:end="273:50">[<expr pos:start="273:49" pos:end="273:49"><literal type="number" pos:start="273:49" pos:end="273:49">1</literal></expr>]</index></name> <operator pos:start="273:52" pos:end="273:52">&amp;</operator> <literal type="number" pos:start="273:54" pos:end="273:54">1</literal><operator pos:start="273:55" pos:end="273:55">)</operator> <operator pos:start="273:57" pos:end="273:58">==</operator> <literal type="number" pos:start="273:60" pos:end="273:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="275:9" pos:end="279:9"><if pos:start="275:9" pos:end="279:9">if <condition pos:start="275:12" pos:end="275:23">(<expr pos:start="275:13" pos:end="275:22"><name pos:start="275:13" pos:end="275:18">buflen</name> <operator pos:start="275:20" pos:end="275:20">&lt;</operator> <literal type="number" pos:start="275:22" pos:end="275:22">0</literal></expr>)</condition> <block pos:start="275:25" pos:end="279:9">{<block_content pos:start="277:13" pos:end="277:33">

            <goto pos:start="277:13" pos:end="277:33">goto <name pos:start="277:18" pos:end="277:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="281:9" pos:end="281:14">break;</break>

    <case pos:start="283:5" pos:end="283:26">case <expr pos:start="283:10" pos:end="283:25"><name pos:start="283:10" pos:end="283:25">MECHANISM_STATUS</name></expr>:</case>

        <expr_stmt pos:start="285:9" pos:end="285:58"><expr pos:start="285:9" pos:end="285:57"><name pos:start="285:9" pos:end="285:14">buflen</name> <operator pos:start="285:16" pos:end="285:16">=</operator> <call pos:start="285:18" pos:end="285:57"><name pos:start="285:18" pos:end="285:46">scsi_emulate_mechanism_status</name><argument_list pos:start="285:47" pos:end="285:57">(<argument pos:start="285:48" pos:end="285:48"><expr pos:start="285:48" pos:end="285:48"><name pos:start="285:48" pos:end="285:48">s</name></expr></argument>, <argument pos:start="285:51" pos:end="285:56"><expr pos:start="285:51" pos:end="285:56"><name pos:start="285:51" pos:end="285:56">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="287:9" pos:end="291:9"><if pos:start="287:9" pos:end="291:9">if <condition pos:start="287:12" pos:end="287:23">(<expr pos:start="287:13" pos:end="287:22"><name pos:start="287:13" pos:end="287:18">buflen</name> <operator pos:start="287:20" pos:end="287:20">&lt;</operator> <literal type="number" pos:start="287:22" pos:end="287:22">0</literal></expr>)</condition> <block pos:start="287:25" pos:end="291:9">{<block_content pos:start="289:13" pos:end="289:33">

            <goto pos:start="289:13" pos:end="289:33">goto <name pos:start="289:18" pos:end="289:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="293:9" pos:end="293:14">break;</break>

    <case pos:start="295:5" pos:end="295:27">case <expr pos:start="295:10" pos:end="295:26"><name pos:start="295:10" pos:end="295:26">GET_CONFIGURATION</name></expr>:</case>

        <expr_stmt pos:start="297:9" pos:end="297:51"><expr pos:start="297:9" pos:end="297:50"><name pos:start="297:9" pos:end="297:14">buflen</name> <operator pos:start="297:16" pos:end="297:16">=</operator> <call pos:start="297:18" pos:end="297:50"><name pos:start="297:18" pos:end="297:39">scsi_get_configuration</name><argument_list pos:start="297:40" pos:end="297:50">(<argument pos:start="297:41" pos:end="297:41"><expr pos:start="297:41" pos:end="297:41"><name pos:start="297:41" pos:end="297:41">s</name></expr></argument>, <argument pos:start="297:44" pos:end="297:49"><expr pos:start="297:44" pos:end="297:49"><name pos:start="297:44" pos:end="297:49">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="299:9" pos:end="303:9"><if pos:start="299:9" pos:end="303:9">if <condition pos:start="299:12" pos:end="299:23">(<expr pos:start="299:13" pos:end="299:22"><name pos:start="299:13" pos:end="299:18">buflen</name> <operator pos:start="299:20" pos:end="299:20">&lt;</operator> <literal type="number" pos:start="299:22" pos:end="299:22">0</literal></expr>)</condition> <block pos:start="299:25" pos:end="303:9">{<block_content pos:start="301:13" pos:end="301:33">

            <goto pos:start="301:13" pos:end="301:33">goto <name pos:start="301:18" pos:end="301:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="305:9" pos:end="305:14">break;</break>

    <case pos:start="307:5" pos:end="307:39">case <expr pos:start="307:10" pos:end="307:38"><name pos:start="307:10" pos:end="307:38">GET_EVENT_STATUS_NOTIFICATION</name></expr>:</case>

        <expr_stmt pos:start="309:9" pos:end="309:66"><expr pos:start="309:9" pos:end="309:65"><name pos:start="309:9" pos:end="309:14">buflen</name> <operator pos:start="309:16" pos:end="309:16">=</operator> <call pos:start="309:18" pos:end="309:65"><name pos:start="309:18" pos:end="309:51">scsi_get_event_status_notification</name><argument_list pos:start="309:52" pos:end="309:65">(<argument pos:start="309:53" pos:end="309:53"><expr pos:start="309:53" pos:end="309:53"><name pos:start="309:53" pos:end="309:53">s</name></expr></argument>, <argument pos:start="309:56" pos:end="309:56"><expr pos:start="309:56" pos:end="309:56"><name pos:start="309:56" pos:end="309:56">r</name></expr></argument>, <argument pos:start="309:59" pos:end="309:64"><expr pos:start="309:59" pos:end="309:64"><name pos:start="309:59" pos:end="309:64">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="311:9" pos:end="315:9"><if pos:start="311:9" pos:end="315:9">if <condition pos:start="311:12" pos:end="311:23">(<expr pos:start="311:13" pos:end="311:22"><name pos:start="311:13" pos:end="311:18">buflen</name> <operator pos:start="311:20" pos:end="311:20">&lt;</operator> <literal type="number" pos:start="311:22" pos:end="311:22">0</literal></expr>)</condition> <block pos:start="311:25" pos:end="315:9">{<block_content pos:start="313:13" pos:end="313:33">

            <goto pos:start="313:13" pos:end="313:33">goto <name pos:start="313:18" pos:end="313:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="317:9" pos:end="317:14">break;</break>

    <case pos:start="319:5" pos:end="319:31">case <expr pos:start="319:10" pos:end="319:30"><name pos:start="319:10" pos:end="319:30">READ_DISC_INFORMATION</name></expr>:</case>

        <expr_stmt pos:start="321:9" pos:end="321:58"><expr pos:start="321:9" pos:end="321:57"><name pos:start="321:9" pos:end="321:14">buflen</name> <operator pos:start="321:16" pos:end="321:16">=</operator> <call pos:start="321:18" pos:end="321:57"><name pos:start="321:18" pos:end="321:43">scsi_read_disc_information</name><argument_list pos:start="321:44" pos:end="321:57">(<argument pos:start="321:45" pos:end="321:45"><expr pos:start="321:45" pos:end="321:45"><name pos:start="321:45" pos:end="321:45">s</name></expr></argument>, <argument pos:start="321:48" pos:end="321:48"><expr pos:start="321:48" pos:end="321:48"><name pos:start="321:48" pos:end="321:48">r</name></expr></argument>, <argument pos:start="321:51" pos:end="321:56"><expr pos:start="321:51" pos:end="321:56"><name pos:start="321:51" pos:end="321:56">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="323:9" pos:end="327:9"><if pos:start="323:9" pos:end="327:9">if <condition pos:start="323:12" pos:end="323:23">(<expr pos:start="323:13" pos:end="323:22"><name pos:start="323:13" pos:end="323:18">buflen</name> <operator pos:start="323:20" pos:end="323:20">&lt;</operator> <literal type="number" pos:start="323:22" pos:end="323:22">0</literal></expr>)</condition> <block pos:start="323:25" pos:end="327:9">{<block_content pos:start="325:13" pos:end="325:33">

            <goto pos:start="325:13" pos:end="325:33">goto <name pos:start="325:18" pos:end="325:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="329:9" pos:end="329:14">break;</break>

    <case pos:start="331:5" pos:end="331:28">case <expr pos:start="331:10" pos:end="331:27"><name pos:start="331:10" pos:end="331:27">READ_DVD_STRUCTURE</name></expr>:</case>

        <expr_stmt pos:start="333:9" pos:end="333:55"><expr pos:start="333:9" pos:end="333:54"><name pos:start="333:9" pos:end="333:14">buflen</name> <operator pos:start="333:16" pos:end="333:16">=</operator> <call pos:start="333:18" pos:end="333:54"><name pos:start="333:18" pos:end="333:40">scsi_read_dvd_structure</name><argument_list pos:start="333:41" pos:end="333:54">(<argument pos:start="333:42" pos:end="333:42"><expr pos:start="333:42" pos:end="333:42"><name pos:start="333:42" pos:end="333:42">s</name></expr></argument>, <argument pos:start="333:45" pos:end="333:45"><expr pos:start="333:45" pos:end="333:45"><name pos:start="333:45" pos:end="333:45">r</name></expr></argument>, <argument pos:start="333:48" pos:end="333:53"><expr pos:start="333:48" pos:end="333:53"><name pos:start="333:48" pos:end="333:53">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="335:9" pos:end="339:9"><if pos:start="335:9" pos:end="339:9">if <condition pos:start="335:12" pos:end="335:23">(<expr pos:start="335:13" pos:end="335:22"><name pos:start="335:13" pos:end="335:18">buflen</name> <operator pos:start="335:20" pos:end="335:20">&lt;</operator> <literal type="number" pos:start="335:22" pos:end="335:22">0</literal></expr>)</condition> <block pos:start="335:25" pos:end="339:9">{<block_content pos:start="337:13" pos:end="337:33">

            <goto pos:start="337:13" pos:end="337:33">goto <name pos:start="337:18" pos:end="337:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="341:9" pos:end="341:14">break;</break>

    <case pos:start="343:5" pos:end="343:30">case <expr pos:start="343:10" pos:end="343:29"><name pos:start="343:10" pos:end="343:29">SERVICE_ACTION_IN_16</name></expr>:</case>

        <comment type="block" pos:start="345:9" pos:end="345:44">/* Service Action In subcommands. */</comment>

        <if_stmt pos:start="347:9" pos:end="423:9"><if pos:start="347:9" pos:end="423:9">if <condition pos:start="347:12" pos:end="347:59">(<expr pos:start="347:13" pos:end="347:58"><operator pos:start="347:13" pos:end="347:13">(</operator><name pos:start="347:14" pos:end="347:28"><name pos:start="347:14" pos:end="347:16">req</name><operator pos:start="347:17" pos:end="347:18">-&gt;</operator><name pos:start="347:19" pos:end="347:21">cmd</name><operator pos:start="347:22" pos:end="347:22">.</operator><name pos:start="347:23" pos:end="347:25">buf</name><index pos:start="347:26" pos:end="347:28">[<expr pos:start="347:27" pos:end="347:27"><literal type="number" pos:start="347:27" pos:end="347:27">1</literal></expr>]</index></name> <operator pos:start="347:30" pos:end="347:30">&amp;</operator> <literal type="number" pos:start="347:32" pos:end="347:33">31</literal><operator pos:start="347:34" pos:end="347:34">)</operator> <operator pos:start="347:36" pos:end="347:37">==</operator> <name pos:start="347:39" pos:end="347:58">SAI_READ_CAPACITY_16</name></expr>)</condition> <block pos:start="347:61" pos:end="423:9">{<block_content pos:start="349:13" pos:end="421:18">

            <expr_stmt pos:start="349:13" pos:end="349:47"><expr pos:start="349:13" pos:end="349:46"><call pos:start="349:13" pos:end="349:46"><name pos:start="349:13" pos:end="349:19">DPRINTF</name><argument_list pos:start="349:20" pos:end="349:46">(<argument pos:start="349:21" pos:end="349:45"><expr pos:start="349:21" pos:end="349:45"><literal type="string" pos:start="349:21" pos:end="349:45">"SAI READ CAPACITY(16)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="351:13" pos:end="351:45"><expr pos:start="351:13" pos:end="351:44"><call pos:start="351:13" pos:end="351:44"><name pos:start="351:13" pos:end="351:18">memset</name><argument_list pos:start="351:19" pos:end="351:44">(<argument pos:start="351:20" pos:end="351:25"><expr pos:start="351:20" pos:end="351:25"><name pos:start="351:20" pos:end="351:25">outbuf</name></expr></argument>, <argument pos:start="351:28" pos:end="351:28"><expr pos:start="351:28" pos:end="351:28"><literal type="number" pos:start="351:28" pos:end="351:28">0</literal></expr></argument>, <argument pos:start="351:31" pos:end="351:43"><expr pos:start="351:31" pos:end="351:43"><name pos:start="351:31" pos:end="351:43"><name pos:start="351:31" pos:end="351:33">req</name><operator pos:start="351:34" pos:end="351:35">-&gt;</operator><name pos:start="351:36" pos:end="351:38">cmd</name><operator pos:start="351:39" pos:end="351:39">.</operator><name pos:start="351:40" pos:end="351:43">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="353:13" pos:end="353:60"><expr pos:start="353:13" pos:end="353:59"><call pos:start="353:13" pos:end="353:59"><name pos:start="353:13" pos:end="353:29">bdrv_get_geometry</name><argument_list pos:start="353:30" pos:end="353:59">(<argument pos:start="353:31" pos:end="353:45"><expr pos:start="353:31" pos:end="353:45"><name pos:start="353:31" pos:end="353:45"><name pos:start="353:31" pos:end="353:31">s</name><operator pos:start="353:32" pos:end="353:33">-&gt;</operator><name pos:start="353:34" pos:end="353:37">qdev</name><operator pos:start="353:38" pos:end="353:38">.</operator><name pos:start="353:39" pos:end="353:42">conf</name><operator pos:start="353:43" pos:end="353:43">.</operator><name pos:start="353:44" pos:end="353:45">bs</name></name></expr></argument>, <argument pos:start="353:48" pos:end="353:58"><expr pos:start="353:48" pos:end="353:58"><operator pos:start="353:48" pos:end="353:48">&amp;</operator><name pos:start="353:49" pos:end="353:58">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="355:13" pos:end="361:13"><if pos:start="355:13" pos:end="361:13">if <condition pos:start="355:16" pos:end="355:28">(<expr pos:start="355:17" pos:end="355:27"><operator pos:start="355:17" pos:end="355:17">!</operator><name pos:start="355:18" pos:end="355:27">nb_sectors</name></expr>)</condition> <block pos:start="355:30" pos:end="361:13">{<block_content pos:start="357:17" pos:end="359:25">

                <expr_stmt pos:start="357:17" pos:end="357:67"><expr pos:start="357:17" pos:end="357:66"><call pos:start="357:17" pos:end="357:66"><name pos:start="357:17" pos:end="357:36">scsi_check_condition</name><argument_list pos:start="357:37" pos:end="357:66">(<argument pos:start="357:38" pos:end="357:38"><expr pos:start="357:38" pos:end="357:38"><name pos:start="357:38" pos:end="357:38">r</name></expr></argument>, <argument pos:start="357:41" pos:end="357:65"><expr pos:start="357:41" pos:end="357:65"><call pos:start="357:41" pos:end="357:65"><name pos:start="357:41" pos:end="357:50">SENSE_CODE</name><argument_list pos:start="357:51" pos:end="357:65">(<argument pos:start="357:52" pos:end="357:64"><expr pos:start="357:52" pos:end="357:64"><name pos:start="357:52" pos:end="357:64">LUN_NOT_READY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="359:17" pos:end="359:25">return <expr pos:start="359:24" pos:end="359:24"><literal type="number" pos:start="359:24" pos:end="359:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="363:13" pos:end="367:13"><if pos:start="363:13" pos:end="367:13">if <condition pos:start="363:16" pos:end="363:60">(<expr pos:start="363:17" pos:end="363:59"><operator pos:start="363:17" pos:end="363:17">(</operator><name pos:start="363:18" pos:end="363:33"><name pos:start="363:18" pos:end="363:20">req</name><operator pos:start="363:21" pos:end="363:22">-&gt;</operator><name pos:start="363:23" pos:end="363:25">cmd</name><operator pos:start="363:26" pos:end="363:26">.</operator><name pos:start="363:27" pos:end="363:29">buf</name><index pos:start="363:30" pos:end="363:33">[<expr pos:start="363:31" pos:end="363:32"><literal type="number" pos:start="363:31" pos:end="363:32">14</literal></expr>]</index></name> <operator pos:start="363:35" pos:end="363:35">&amp;</operator> <literal type="number" pos:start="363:37" pos:end="363:37">1</literal><operator pos:start="363:38" pos:end="363:38">)</operator> <operator pos:start="363:40" pos:end="363:41">==</operator> <literal type="number" pos:start="363:43" pos:end="363:43">0</literal> <operator pos:start="363:45" pos:end="363:46">&amp;&amp;</operator> <name pos:start="363:48" pos:end="363:59"><name pos:start="363:48" pos:end="363:50">req</name><operator pos:start="363:51" pos:end="363:52">-&gt;</operator><name pos:start="363:53" pos:end="363:55">cmd</name><operator pos:start="363:56" pos:end="363:56">.</operator><name pos:start="363:57" pos:end="363:59">lba</name></name></expr>)</condition> <block pos:start="363:62" pos:end="367:13">{<block_content pos:start="365:17" pos:end="365:37">

                <goto pos:start="365:17" pos:end="365:37">goto <name pos:start="365:22" pos:end="365:36">illegal_request</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="369:13" pos:end="369:50"><expr pos:start="369:13" pos:end="369:49"><name pos:start="369:13" pos:end="369:22">nb_sectors</name> <operator pos:start="369:24" pos:end="369:25">/=</operator> <name pos:start="369:27" pos:end="369:43"><name pos:start="369:27" pos:end="369:27">s</name><operator pos:start="369:28" pos:end="369:29">-&gt;</operator><name pos:start="369:30" pos:end="369:33">qdev</name><operator pos:start="369:34" pos:end="369:34">.</operator><name pos:start="369:35" pos:end="369:43">blocksize</name></name> <operator pos:start="369:45" pos:end="369:45">/</operator> <literal type="number" pos:start="369:47" pos:end="369:49">512</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="371:13" pos:end="371:68">/* Returned value is the address of the last sector.  */</comment>

            <expr_stmt pos:start="373:13" pos:end="373:25"><expr pos:start="373:13" pos:end="373:24"><name pos:start="373:13" pos:end="373:22">nb_sectors</name><operator pos:start="373:23" pos:end="373:24">--</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="375:13" pos:end="375:71">/* Remember the new size for read/write sanity checking. */</comment>

            <expr_stmt pos:start="377:13" pos:end="377:41"><expr pos:start="377:13" pos:end="377:40"><name pos:start="377:13" pos:end="377:27"><name pos:start="377:13" pos:end="377:13">s</name><operator pos:start="377:14" pos:end="377:15">-&gt;</operator><name pos:start="377:16" pos:end="377:19">qdev</name><operator pos:start="377:20" pos:end="377:20">.</operator><name pos:start="377:21" pos:end="377:27">max_lba</name></name> <operator pos:start="377:29" pos:end="377:29">=</operator> <name pos:start="377:31" pos:end="377:40">nb_sectors</name></expr>;</expr_stmt>

            <expr_stmt pos:start="379:13" pos:end="379:50"><expr pos:start="379:13" pos:end="379:49"><name pos:start="379:13" pos:end="379:21"><name pos:start="379:13" pos:end="379:18">outbuf</name><index pos:start="379:19" pos:end="379:21">[<expr pos:start="379:20" pos:end="379:20"><literal type="number" pos:start="379:20" pos:end="379:20">0</literal></expr>]</index></name> <operator pos:start="379:23" pos:end="379:23">=</operator> <operator pos:start="379:25" pos:end="379:25">(</operator><name pos:start="379:26" pos:end="379:35">nb_sectors</name> <operator pos:start="379:37" pos:end="379:38">&gt;&gt;</operator> <literal type="number" pos:start="379:40" pos:end="379:41">56</literal><operator pos:start="379:42" pos:end="379:42">)</operator> <operator pos:start="379:44" pos:end="379:44">&amp;</operator> <literal type="number" pos:start="379:46" pos:end="379:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="381:13" pos:end="381:50"><expr pos:start="381:13" pos:end="381:49"><name pos:start="381:13" pos:end="381:21"><name pos:start="381:13" pos:end="381:18">outbuf</name><index pos:start="381:19" pos:end="381:21">[<expr pos:start="381:20" pos:end="381:20"><literal type="number" pos:start="381:20" pos:end="381:20">1</literal></expr>]</index></name> <operator pos:start="381:23" pos:end="381:23">=</operator> <operator pos:start="381:25" pos:end="381:25">(</operator><name pos:start="381:26" pos:end="381:35">nb_sectors</name> <operator pos:start="381:37" pos:end="381:38">&gt;&gt;</operator> <literal type="number" pos:start="381:40" pos:end="381:41">48</literal><operator pos:start="381:42" pos:end="381:42">)</operator> <operator pos:start="381:44" pos:end="381:44">&amp;</operator> <literal type="number" pos:start="381:46" pos:end="381:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="383:13" pos:end="383:50"><expr pos:start="383:13" pos:end="383:49"><name pos:start="383:13" pos:end="383:21"><name pos:start="383:13" pos:end="383:18">outbuf</name><index pos:start="383:19" pos:end="383:21">[<expr pos:start="383:20" pos:end="383:20"><literal type="number" pos:start="383:20" pos:end="383:20">2</literal></expr>]</index></name> <operator pos:start="383:23" pos:end="383:23">=</operator> <operator pos:start="383:25" pos:end="383:25">(</operator><name pos:start="383:26" pos:end="383:35">nb_sectors</name> <operator pos:start="383:37" pos:end="383:38">&gt;&gt;</operator> <literal type="number" pos:start="383:40" pos:end="383:41">40</literal><operator pos:start="383:42" pos:end="383:42">)</operator> <operator pos:start="383:44" pos:end="383:44">&amp;</operator> <literal type="number" pos:start="383:46" pos:end="383:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="385:13" pos:end="385:50"><expr pos:start="385:13" pos:end="385:49"><name pos:start="385:13" pos:end="385:21"><name pos:start="385:13" pos:end="385:18">outbuf</name><index pos:start="385:19" pos:end="385:21">[<expr pos:start="385:20" pos:end="385:20"><literal type="number" pos:start="385:20" pos:end="385:20">3</literal></expr>]</index></name> <operator pos:start="385:23" pos:end="385:23">=</operator> <operator pos:start="385:25" pos:end="385:25">(</operator><name pos:start="385:26" pos:end="385:35">nb_sectors</name> <operator pos:start="385:37" pos:end="385:38">&gt;&gt;</operator> <literal type="number" pos:start="385:40" pos:end="385:41">32</literal><operator pos:start="385:42" pos:end="385:42">)</operator> <operator pos:start="385:44" pos:end="385:44">&amp;</operator> <literal type="number" pos:start="385:46" pos:end="385:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="387:13" pos:end="387:50"><expr pos:start="387:13" pos:end="387:49"><name pos:start="387:13" pos:end="387:21"><name pos:start="387:13" pos:end="387:18">outbuf</name><index pos:start="387:19" pos:end="387:21">[<expr pos:start="387:20" pos:end="387:20"><literal type="number" pos:start="387:20" pos:end="387:20">4</literal></expr>]</index></name> <operator pos:start="387:23" pos:end="387:23">=</operator> <operator pos:start="387:25" pos:end="387:25">(</operator><name pos:start="387:26" pos:end="387:35">nb_sectors</name> <operator pos:start="387:37" pos:end="387:38">&gt;&gt;</operator> <literal type="number" pos:start="387:40" pos:end="387:41">24</literal><operator pos:start="387:42" pos:end="387:42">)</operator> <operator pos:start="387:44" pos:end="387:44">&amp;</operator> <literal type="number" pos:start="387:46" pos:end="387:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="389:13" pos:end="389:50"><expr pos:start="389:13" pos:end="389:49"><name pos:start="389:13" pos:end="389:21"><name pos:start="389:13" pos:end="389:18">outbuf</name><index pos:start="389:19" pos:end="389:21">[<expr pos:start="389:20" pos:end="389:20"><literal type="number" pos:start="389:20" pos:end="389:20">5</literal></expr>]</index></name> <operator pos:start="389:23" pos:end="389:23">=</operator> <operator pos:start="389:25" pos:end="389:25">(</operator><name pos:start="389:26" pos:end="389:35">nb_sectors</name> <operator pos:start="389:37" pos:end="389:38">&gt;&gt;</operator> <literal type="number" pos:start="389:40" pos:end="389:41">16</literal><operator pos:start="389:42" pos:end="389:42">)</operator> <operator pos:start="389:44" pos:end="389:44">&amp;</operator> <literal type="number" pos:start="389:46" pos:end="389:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="391:13" pos:end="391:49"><expr pos:start="391:13" pos:end="391:48"><name pos:start="391:13" pos:end="391:21"><name pos:start="391:13" pos:end="391:18">outbuf</name><index pos:start="391:19" pos:end="391:21">[<expr pos:start="391:20" pos:end="391:20"><literal type="number" pos:start="391:20" pos:end="391:20">6</literal></expr>]</index></name> <operator pos:start="391:23" pos:end="391:23">=</operator> <operator pos:start="391:25" pos:end="391:25">(</operator><name pos:start="391:26" pos:end="391:35">nb_sectors</name> <operator pos:start="391:37" pos:end="391:38">&gt;&gt;</operator> <literal type="number" pos:start="391:40" pos:end="391:40">8</literal><operator pos:start="391:41" pos:end="391:41">)</operator> <operator pos:start="391:43" pos:end="391:43">&amp;</operator> <literal type="number" pos:start="391:45" pos:end="391:48">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="393:13" pos:end="393:42"><expr pos:start="393:13" pos:end="393:41"><name pos:start="393:13" pos:end="393:21"><name pos:start="393:13" pos:end="393:18">outbuf</name><index pos:start="393:19" pos:end="393:21">[<expr pos:start="393:20" pos:end="393:20"><literal type="number" pos:start="393:20" pos:end="393:20">7</literal></expr>]</index></name> <operator pos:start="393:23" pos:end="393:23">=</operator> <name pos:start="393:25" pos:end="393:34">nb_sectors</name> <operator pos:start="393:36" pos:end="393:36">&amp;</operator> <literal type="number" pos:start="393:38" pos:end="393:41">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="395:13" pos:end="395:26"><expr pos:start="395:13" pos:end="395:25"><name pos:start="395:13" pos:end="395:21"><name pos:start="395:13" pos:end="395:18">outbuf</name><index pos:start="395:19" pos:end="395:21">[<expr pos:start="395:20" pos:end="395:20"><literal type="number" pos:start="395:20" pos:end="395:20">8</literal></expr>]</index></name> <operator pos:start="395:23" pos:end="395:23">=</operator> <literal type="number" pos:start="395:25" pos:end="395:25">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="397:13" pos:end="397:26"><expr pos:start="397:13" pos:end="397:25"><name pos:start="397:13" pos:end="397:21"><name pos:start="397:13" pos:end="397:18">outbuf</name><index pos:start="397:19" pos:end="397:21">[<expr pos:start="397:20" pos:end="397:20"><literal type="number" pos:start="397:20" pos:end="397:20">9</literal></expr>]</index></name> <operator pos:start="397:23" pos:end="397:23">=</operator> <literal type="number" pos:start="397:25" pos:end="397:25">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="399:13" pos:end="399:48"><expr pos:start="399:13" pos:end="399:47"><name pos:start="399:13" pos:end="399:22"><name pos:start="399:13" pos:end="399:18">outbuf</name><index pos:start="399:19" pos:end="399:22">[<expr pos:start="399:20" pos:end="399:21"><literal type="number" pos:start="399:20" pos:end="399:21">10</literal></expr>]</index></name> <operator pos:start="399:24" pos:end="399:24">=</operator> <name pos:start="399:26" pos:end="399:42"><name pos:start="399:26" pos:end="399:26">s</name><operator pos:start="399:27" pos:end="399:28">-&gt;</operator><name pos:start="399:29" pos:end="399:32">qdev</name><operator pos:start="399:33" pos:end="399:33">.</operator><name pos:start="399:34" pos:end="399:42">blocksize</name></name> <operator pos:start="399:44" pos:end="399:45">&gt;&gt;</operator> <literal type="number" pos:start="399:47" pos:end="399:47">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="401:13" pos:end="401:27"><expr pos:start="401:13" pos:end="401:26"><name pos:start="401:13" pos:end="401:22"><name pos:start="401:13" pos:end="401:18">outbuf</name><index pos:start="401:19" pos:end="401:22">[<expr pos:start="401:20" pos:end="401:21"><literal type="number" pos:start="401:20" pos:end="401:21">11</literal></expr>]</index></name> <operator pos:start="401:24" pos:end="401:24">=</operator> <literal type="number" pos:start="401:26" pos:end="401:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="403:13" pos:end="403:27"><expr pos:start="403:13" pos:end="403:26"><name pos:start="403:13" pos:end="403:22"><name pos:start="403:13" pos:end="403:18">outbuf</name><index pos:start="403:19" pos:end="403:22">[<expr pos:start="403:20" pos:end="403:21"><literal type="number" pos:start="403:20" pos:end="403:21">12</literal></expr>]</index></name> <operator pos:start="403:24" pos:end="403:24">=</operator> <literal type="number" pos:start="403:26" pos:end="403:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="405:13" pos:end="405:63"><expr pos:start="405:13" pos:end="405:62"><name pos:start="405:13" pos:end="405:22"><name pos:start="405:13" pos:end="405:18">outbuf</name><index pos:start="405:19" pos:end="405:22">[<expr pos:start="405:20" pos:end="405:21"><literal type="number" pos:start="405:20" pos:end="405:21">13</literal></expr>]</index></name> <operator pos:start="405:24" pos:end="405:24">=</operator> <call pos:start="405:26" pos:end="405:62"><name pos:start="405:26" pos:end="405:47">get_physical_block_exp</name><argument_list pos:start="405:48" pos:end="405:62">(<argument pos:start="405:49" pos:end="405:61"><expr pos:start="405:49" pos:end="405:61"><operator pos:start="405:49" pos:end="405:49">&amp;</operator><name pos:start="405:50" pos:end="405:61"><name pos:start="405:50" pos:end="405:50">s</name><operator pos:start="405:51" pos:end="405:52">-&gt;</operator><name pos:start="405:53" pos:end="405:56">qdev</name><operator pos:start="405:57" pos:end="405:57">.</operator><name pos:start="405:58" pos:end="405:61">conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="409:13" pos:end="409:60">/* set TPE bit if the format supports discard */</comment>

            <if_stmt pos:start="411:13" pos:end="415:13"><if pos:start="411:13" pos:end="415:13">if <condition pos:start="411:16" pos:end="411:49">(<expr pos:start="411:17" pos:end="411:48"><name pos:start="411:17" pos:end="411:48"><name pos:start="411:17" pos:end="411:17">s</name><operator pos:start="411:18" pos:end="411:19">-&gt;</operator><name pos:start="411:20" pos:end="411:23">qdev</name><operator pos:start="411:24" pos:end="411:24">.</operator><name pos:start="411:25" pos:end="411:28">conf</name><operator pos:start="411:29" pos:end="411:29">.</operator><name pos:start="411:30" pos:end="411:48">discard_granularity</name></name></expr>)</condition> <block pos:start="411:51" pos:end="415:13">{<block_content pos:start="413:17" pos:end="413:34">

                <expr_stmt pos:start="413:17" pos:end="413:34"><expr pos:start="413:17" pos:end="413:33"><name pos:start="413:17" pos:end="413:26"><name pos:start="413:17" pos:end="413:22">outbuf</name><index pos:start="413:23" pos:end="413:26">[<expr pos:start="413:24" pos:end="413:25"><literal type="number" pos:start="413:24" pos:end="413:25">14</literal></expr>]</index></name> <operator pos:start="413:28" pos:end="413:28">=</operator> <literal type="number" pos:start="413:30" pos:end="413:33">0x80</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="419:13" pos:end="419:71">/* Protection, exponent and lowest lba field left blank. */</comment>

            <break pos:start="421:13" pos:end="421:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="425:9" pos:end="425:51"><expr pos:start="425:9" pos:end="425:50"><call pos:start="425:9" pos:end="425:50"><name pos:start="425:9" pos:end="425:15">DPRINTF</name><argument_list pos:start="425:16" pos:end="425:50">(<argument pos:start="425:17" pos:end="425:49"><expr pos:start="425:17" pos:end="425:49"><literal type="string" pos:start="425:17" pos:end="425:49">"Unsupported Service Action In\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="427:9" pos:end="427:29">goto <name pos:start="427:14" pos:end="427:28">illegal_request</name>;</goto>

    <case pos:start="429:5" pos:end="429:27">case <expr pos:start="429:10" pos:end="429:26"><name pos:start="429:10" pos:end="429:26">SYNCHRONIZE_CACHE</name></expr>:</case>

        <comment type="block" pos:start="431:9" pos:end="431:73">/* The request is used as the AIO opaque value, so add a ref.  */</comment>

        <expr_stmt pos:start="433:9" pos:end="433:30"><expr pos:start="433:9" pos:end="433:29"><call pos:start="433:9" pos:end="433:29"><name pos:start="433:9" pos:end="433:20">scsi_req_ref</name><argument_list pos:start="433:21" pos:end="433:29">(<argument pos:start="433:22" pos:end="433:28"><expr pos:start="433:22" pos:end="433:28"><operator pos:start="433:22" pos:end="433:22">&amp;</operator><name pos:start="433:23" pos:end="433:28"><name pos:start="433:23" pos:end="433:23">r</name><operator pos:start="433:24" pos:end="433:25">-&gt;</operator><name pos:start="433:26" pos:end="433:28">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="435:9" pos:end="435:71"><expr pos:start="435:9" pos:end="435:70"><call pos:start="435:9" pos:end="435:70"><name pos:start="435:9" pos:end="435:23">bdrv_acct_start</name><argument_list pos:start="435:24" pos:end="435:70">(<argument pos:start="435:25" pos:end="435:39"><expr pos:start="435:25" pos:end="435:39"><name pos:start="435:25" pos:end="435:39"><name pos:start="435:25" pos:end="435:25">s</name><operator pos:start="435:26" pos:end="435:27">-&gt;</operator><name pos:start="435:28" pos:end="435:31">qdev</name><operator pos:start="435:32" pos:end="435:32">.</operator><name pos:start="435:33" pos:end="435:36">conf</name><operator pos:start="435:37" pos:end="435:37">.</operator><name pos:start="435:38" pos:end="435:39">bs</name></name></expr></argument>, <argument pos:start="435:42" pos:end="435:49"><expr pos:start="435:42" pos:end="435:49"><operator pos:start="435:42" pos:end="435:42">&amp;</operator><name pos:start="435:43" pos:end="435:49"><name pos:start="435:43" pos:end="435:43">r</name><operator pos:start="435:44" pos:end="435:45">-&gt;</operator><name pos:start="435:46" pos:end="435:49">acct</name></name></expr></argument>, <argument pos:start="435:52" pos:end="435:52"><expr pos:start="435:52" pos:end="435:52"><literal type="number" pos:start="435:52" pos:end="435:52">0</literal></expr></argument>, <argument pos:start="435:55" pos:end="435:69"><expr pos:start="435:55" pos:end="435:69"><name pos:start="435:55" pos:end="435:69">BDRV_ACCT_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="437:9" pos:end="437:77"><expr pos:start="437:9" pos:end="437:76"><name pos:start="437:9" pos:end="437:20"><name pos:start="437:9" pos:end="437:9">r</name><operator pos:start="437:10" pos:end="437:11">-&gt;</operator><name pos:start="437:12" pos:end="437:14">req</name><operator pos:start="437:15" pos:end="437:15">.</operator><name pos:start="437:16" pos:end="437:20">aiocb</name></name> <operator pos:start="437:22" pos:end="437:22">=</operator> <call pos:start="437:24" pos:end="437:76"><name pos:start="437:24" pos:end="437:37">bdrv_aio_flush</name><argument_list pos:start="437:38" pos:end="437:76">(<argument pos:start="437:39" pos:end="437:53"><expr pos:start="437:39" pos:end="437:53"><name pos:start="437:39" pos:end="437:53"><name pos:start="437:39" pos:end="437:39">s</name><operator pos:start="437:40" pos:end="437:41">-&gt;</operator><name pos:start="437:42" pos:end="437:45">qdev</name><operator pos:start="437:46" pos:end="437:46">.</operator><name pos:start="437:47" pos:end="437:50">conf</name><operator pos:start="437:51" pos:end="437:51">.</operator><name pos:start="437:52" pos:end="437:53">bs</name></name></expr></argument>, <argument pos:start="437:56" pos:end="437:72"><expr pos:start="437:56" pos:end="437:72"><name pos:start="437:56" pos:end="437:72">scsi_aio_complete</name></expr></argument>, <argument pos:start="437:75" pos:end="437:75"><expr pos:start="437:75" pos:end="437:75"><name pos:start="437:75" pos:end="437:75">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="439:9" pos:end="439:17">return <expr pos:start="439:16" pos:end="439:16"><literal type="number" pos:start="439:16" pos:end="439:16">0</literal></expr>;</return>

    <case pos:start="441:5" pos:end="441:17">case <expr pos:start="441:10" pos:end="441:16"><name pos:start="441:10" pos:end="441:16">SEEK_10</name></expr>:</case>

        <expr_stmt pos:start="443:9" pos:end="443:67"><expr pos:start="443:9" pos:end="443:66"><call pos:start="443:9" pos:end="443:66"><name pos:start="443:9" pos:end="443:15">DPRINTF</name><argument_list pos:start="443:16" pos:end="443:66">(<argument pos:start="443:17" pos:end="443:49"><expr pos:start="443:17" pos:end="443:49"><literal type="string" pos:start="443:17" pos:end="443:36">"Seek(10) (sector %"</literal> <name pos:start="443:38" pos:end="443:43">PRId64</name> <literal type="string" pos:start="443:45" pos:end="443:49">")\n"</literal></expr></argument>, <argument pos:start="443:52" pos:end="443:65"><expr pos:start="443:52" pos:end="443:65"><name pos:start="443:52" pos:end="443:65"><name pos:start="443:52" pos:end="443:52">r</name><operator pos:start="443:53" pos:end="443:54">-&gt;</operator><name pos:start="443:55" pos:end="443:57">req</name><operator pos:start="443:58" pos:end="443:58">.</operator><name pos:start="443:59" pos:end="443:61">cmd</name><operator pos:start="443:62" pos:end="443:62">.</operator><name pos:start="443:63" pos:end="443:65">lba</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="445:9" pos:end="449:9"><if pos:start="445:9" pos:end="449:9">if <condition pos:start="445:12" pos:end="445:45">(<expr pos:start="445:13" pos:end="445:44"><name pos:start="445:13" pos:end="445:26"><name pos:start="445:13" pos:end="445:13">r</name><operator pos:start="445:14" pos:end="445:15">-&gt;</operator><name pos:start="445:16" pos:end="445:18">req</name><operator pos:start="445:19" pos:end="445:19">.</operator><name pos:start="445:20" pos:end="445:22">cmd</name><operator pos:start="445:23" pos:end="445:23">.</operator><name pos:start="445:24" pos:end="445:26">lba</name></name> <operator pos:start="445:28" pos:end="445:28">&gt;</operator> <name pos:start="445:30" pos:end="445:44"><name pos:start="445:30" pos:end="445:30">s</name><operator pos:start="445:31" pos:end="445:32">-&gt;</operator><name pos:start="445:33" pos:end="445:36">qdev</name><operator pos:start="445:37" pos:end="445:37">.</operator><name pos:start="445:38" pos:end="445:44">max_lba</name></name></expr>)</condition> <block pos:start="445:47" pos:end="449:9">{<block_content pos:start="447:13" pos:end="447:29">

            <goto pos:start="447:13" pos:end="447:29">goto <name pos:start="447:18" pos:end="447:28">illegal_lba</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="451:9" pos:end="451:14">break;</break>

    <case pos:start="453:5" pos:end="453:21">case <expr pos:start="453:10" pos:end="453:20"><name pos:start="453:10" pos:end="453:20">MODE_SELECT</name></expr>:</case>

        <expr_stmt pos:start="455:9" pos:end="455:69"><expr pos:start="455:9" pos:end="455:68"><call pos:start="455:9" pos:end="455:68"><name pos:start="455:9" pos:end="455:15">DPRINTF</name><argument_list pos:start="455:16" pos:end="455:68">(<argument pos:start="455:17" pos:end="455:44"><expr pos:start="455:17" pos:end="455:44"><literal type="string" pos:start="455:17" pos:end="455:44">"Mode Select(6) (len %lu)\n"</literal></expr></argument>, <argument pos:start="455:47" pos:end="455:67"><expr pos:start="455:47" pos:end="455:67"><operator pos:start="455:47" pos:end="455:47">(</operator><name pos:start="455:48" pos:end="455:51">long</name><operator pos:start="455:52" pos:end="455:52">)</operator><name pos:start="455:53" pos:end="455:67"><name pos:start="455:53" pos:end="455:53">r</name><operator pos:start="455:54" pos:end="455:55">-&gt;</operator><name pos:start="455:56" pos:end="455:58">req</name><operator pos:start="455:59" pos:end="455:59">.</operator><name pos:start="455:60" pos:end="455:62">cmd</name><operator pos:start="455:63" pos:end="455:63">.</operator><name pos:start="455:64" pos:end="455:67">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="457:9" pos:end="457:14">break;</break>

    <case pos:start="459:5" pos:end="459:24">case <expr pos:start="459:10" pos:end="459:23"><name pos:start="459:10" pos:end="459:23">MODE_SELECT_10</name></expr>:</case>

        <expr_stmt pos:start="461:9" pos:end="461:70"><expr pos:start="461:9" pos:end="461:69"><call pos:start="461:9" pos:end="461:69"><name pos:start="461:9" pos:end="461:15">DPRINTF</name><argument_list pos:start="461:16" pos:end="461:69">(<argument pos:start="461:17" pos:end="461:45"><expr pos:start="461:17" pos:end="461:45"><literal type="string" pos:start="461:17" pos:end="461:45">"Mode Select(10) (len %lu)\n"</literal></expr></argument>, <argument pos:start="461:48" pos:end="461:68"><expr pos:start="461:48" pos:end="461:68"><operator pos:start="461:48" pos:end="461:48">(</operator><name pos:start="461:49" pos:end="461:52">long</name><operator pos:start="461:53" pos:end="461:53">)</operator><name pos:start="461:54" pos:end="461:68"><name pos:start="461:54" pos:end="461:54">r</name><operator pos:start="461:55" pos:end="461:56">-&gt;</operator><name pos:start="461:57" pos:end="461:59">req</name><operator pos:start="461:60" pos:end="461:60">.</operator><name pos:start="461:61" pos:end="461:63">cmd</name><operator pos:start="461:64" pos:end="461:64">.</operator><name pos:start="461:65" pos:end="461:68">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="463:9" pos:end="463:14">break;</break>

    <case pos:start="465:5" pos:end="465:15">case <expr pos:start="465:10" pos:end="465:14"><name pos:start="465:10" pos:end="465:14">UNMAP</name></expr>:</case>

        <expr_stmt pos:start="467:9" pos:end="467:60"><expr pos:start="467:9" pos:end="467:59"><call pos:start="467:9" pos:end="467:59"><name pos:start="467:9" pos:end="467:15">DPRINTF</name><argument_list pos:start="467:16" pos:end="467:59">(<argument pos:start="467:17" pos:end="467:35"><expr pos:start="467:17" pos:end="467:35"><literal type="string" pos:start="467:17" pos:end="467:35">"Unmap (len %lu)\n"</literal></expr></argument>, <argument pos:start="467:38" pos:end="467:58"><expr pos:start="467:38" pos:end="467:58"><operator pos:start="467:38" pos:end="467:38">(</operator><name pos:start="467:39" pos:end="467:42">long</name><operator pos:start="467:43" pos:end="467:43">)</operator><name pos:start="467:44" pos:end="467:58"><name pos:start="467:44" pos:end="467:44">r</name><operator pos:start="467:45" pos:end="467:46">-&gt;</operator><name pos:start="467:47" pos:end="467:49">req</name><operator pos:start="467:50" pos:end="467:50">.</operator><name pos:start="467:51" pos:end="467:53">cmd</name><operator pos:start="467:54" pos:end="467:54">.</operator><name pos:start="467:55" pos:end="467:58">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="469:9" pos:end="469:14">break;</break>

    <case pos:start="471:5" pos:end="471:23">case <expr pos:start="471:10" pos:end="471:22"><name pos:start="471:10" pos:end="471:22">WRITE_SAME_10</name></expr>:</case>

    <case pos:start="473:5" pos:end="473:23">case <expr pos:start="473:10" pos:end="473:22"><name pos:start="473:10" pos:end="473:22">WRITE_SAME_16</name></expr>:</case>

        <expr_stmt pos:start="475:9" pos:end="475:58"><expr pos:start="475:9" pos:end="475:57"><name pos:start="475:9" pos:end="475:18">nb_sectors</name> <operator pos:start="475:20" pos:end="475:20">=</operator> <call pos:start="475:22" pos:end="475:57"><name pos:start="475:22" pos:end="475:41">scsi_data_cdb_length</name><argument_list pos:start="475:42" pos:end="475:57">(<argument pos:start="475:43" pos:end="475:56"><expr pos:start="475:43" pos:end="475:56"><name pos:start="475:43" pos:end="475:56"><name pos:start="475:43" pos:end="475:43">r</name><operator pos:start="475:44" pos:end="475:45">-&gt;</operator><name pos:start="475:46" pos:end="475:48">req</name><operator pos:start="475:49" pos:end="475:49">.</operator><name pos:start="475:50" pos:end="475:52">cmd</name><operator pos:start="475:53" pos:end="475:53">.</operator><name pos:start="475:54" pos:end="475:56">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="477:9" pos:end="483:9"><if pos:start="477:9" pos:end="483:9">if <condition pos:start="477:12" pos:end="477:47">(<expr pos:start="477:13" pos:end="477:46"><call pos:start="477:13" pos:end="477:46"><name pos:start="477:13" pos:end="477:29">bdrv_is_read_only</name><argument_list pos:start="477:30" pos:end="477:46">(<argument pos:start="477:31" pos:end="477:45"><expr pos:start="477:31" pos:end="477:45"><name pos:start="477:31" pos:end="477:45"><name pos:start="477:31" pos:end="477:31">s</name><operator pos:start="477:32" pos:end="477:33">-&gt;</operator><name pos:start="477:34" pos:end="477:37">qdev</name><operator pos:start="477:38" pos:end="477:38">.</operator><name pos:start="477:39" pos:end="477:42">conf</name><operator pos:start="477:43" pos:end="477:43">.</operator><name pos:start="477:44" pos:end="477:45">bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="477:49" pos:end="483:9">{<block_content pos:start="479:13" pos:end="481:21">

            <expr_stmt pos:start="479:13" pos:end="479:65"><expr pos:start="479:13" pos:end="479:64"><call pos:start="479:13" pos:end="479:64"><name pos:start="479:13" pos:end="479:32">scsi_check_condition</name><argument_list pos:start="479:33" pos:end="479:64">(<argument pos:start="479:34" pos:end="479:34"><expr pos:start="479:34" pos:end="479:34"><name pos:start="479:34" pos:end="479:34">r</name></expr></argument>, <argument pos:start="479:37" pos:end="479:63"><expr pos:start="479:37" pos:end="479:63"><call pos:start="479:37" pos:end="479:63"><name pos:start="479:37" pos:end="479:46">SENSE_CODE</name><argument_list pos:start="479:47" pos:end="479:63">(<argument pos:start="479:48" pos:end="479:62"><expr pos:start="479:48" pos:end="479:62"><name pos:start="479:48" pos:end="479:62">WRITE_PROTECTED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="481:13" pos:end="481:21">return <expr pos:start="481:20" pos:end="481:20"><literal type="number" pos:start="481:20" pos:end="481:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="485:9" pos:end="489:9"><if pos:start="485:9" pos:end="489:9">if <condition pos:start="485:12" pos:end="485:60">(<expr pos:start="485:13" pos:end="485:59"><operator pos:start="485:13" pos:end="485:13">!</operator><call pos:start="485:14" pos:end="485:59"><name pos:start="485:14" pos:end="485:28">check_lba_range</name><argument_list pos:start="485:29" pos:end="485:59">(<argument pos:start="485:30" pos:end="485:30"><expr pos:start="485:30" pos:end="485:30"><name pos:start="485:30" pos:end="485:30">s</name></expr></argument>, <argument pos:start="485:33" pos:end="485:46"><expr pos:start="485:33" pos:end="485:46"><name pos:start="485:33" pos:end="485:46"><name pos:start="485:33" pos:end="485:33">r</name><operator pos:start="485:34" pos:end="485:35">-&gt;</operator><name pos:start="485:36" pos:end="485:38">req</name><operator pos:start="485:39" pos:end="485:39">.</operator><name pos:start="485:40" pos:end="485:42">cmd</name><operator pos:start="485:43" pos:end="485:43">.</operator><name pos:start="485:44" pos:end="485:46">lba</name></name></expr></argument>, <argument pos:start="485:49" pos:end="485:58"><expr pos:start="485:49" pos:end="485:58"><name pos:start="485:49" pos:end="485:58">nb_sectors</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="485:62" pos:end="489:9">{<block_content pos:start="487:13" pos:end="487:29">

            <goto pos:start="487:13" pos:end="487:29">goto <name pos:start="487:18" pos:end="487:28">illegal_lba</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="493:9" pos:end="497:11">/*

         * We only support WRITE SAME with the unmap bit set for now.

         */</comment>

        <if_stmt pos:start="499:9" pos:end="503:9"><if pos:start="499:9" pos:end="503:9">if <condition pos:start="499:12" pos:end="499:37">(<expr pos:start="499:13" pos:end="499:36"><operator pos:start="499:13" pos:end="499:13">!</operator><operator pos:start="499:14" pos:end="499:14">(</operator><name pos:start="499:15" pos:end="499:29"><name pos:start="499:15" pos:end="499:17">req</name><operator pos:start="499:18" pos:end="499:19">-&gt;</operator><name pos:start="499:20" pos:end="499:22">cmd</name><operator pos:start="499:23" pos:end="499:23">.</operator><name pos:start="499:24" pos:end="499:26">buf</name><index pos:start="499:27" pos:end="499:29">[<expr pos:start="499:28" pos:end="499:28"><literal type="number" pos:start="499:28" pos:end="499:28">1</literal></expr>]</index></name> <operator pos:start="499:31" pos:end="499:31">&amp;</operator> <literal type="number" pos:start="499:33" pos:end="499:35">0x8</literal><operator pos:start="499:36" pos:end="499:36">)</operator></expr>)</condition> <block pos:start="499:39" pos:end="503:9">{<block_content pos:start="501:13" pos:end="501:33">

            <goto pos:start="501:13" pos:end="501:33">goto <name pos:start="501:18" pos:end="501:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="507:9" pos:end="507:73">/* The request is used as the AIO opaque value, so add a ref.  */</comment>

        <expr_stmt pos:start="509:9" pos:end="509:30"><expr pos:start="509:9" pos:end="509:29"><call pos:start="509:9" pos:end="509:29"><name pos:start="509:9" pos:end="509:20">scsi_req_ref</name><argument_list pos:start="509:21" pos:end="509:29">(<argument pos:start="509:22" pos:end="509:28"><expr pos:start="509:22" pos:end="509:28"><operator pos:start="509:22" pos:end="509:22">&amp;</operator><name pos:start="509:23" pos:end="509:28"><name pos:start="509:23" pos:end="509:23">r</name><operator pos:start="509:24" pos:end="509:25">-&gt;</operator><name pos:start="509:26" pos:end="509:28">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="511:9" pos:end="517:62"><expr pos:start="511:9" pos:end="517:61"><name pos:start="511:9" pos:end="511:20"><name pos:start="511:9" pos:end="511:9">r</name><operator pos:start="511:10" pos:end="511:11">-&gt;</operator><name pos:start="511:12" pos:end="511:14">req</name><operator pos:start="511:15" pos:end="511:15">.</operator><name pos:start="511:16" pos:end="511:20">aiocb</name></name> <operator pos:start="511:22" pos:end="511:22">=</operator> <call pos:start="511:24" pos:end="517:61"><name pos:start="511:24" pos:end="511:39">bdrv_aio_discard</name><argument_list pos:start="511:40" pos:end="517:61">(<argument pos:start="511:41" pos:end="511:55"><expr pos:start="511:41" pos:end="511:55"><name pos:start="511:41" pos:end="511:55"><name pos:start="511:41" pos:end="511:41">s</name><operator pos:start="511:42" pos:end="511:43">-&gt;</operator><name pos:start="511:44" pos:end="511:47">qdev</name><operator pos:start="511:48" pos:end="511:48">.</operator><name pos:start="511:49" pos:end="511:52">conf</name><operator pos:start="511:53" pos:end="511:53">.</operator><name pos:start="511:54" pos:end="511:55">bs</name></name></expr></argument>,

                                        <argument pos:start="513:41" pos:end="513:82"><expr pos:start="513:41" pos:end="513:82"><name pos:start="513:41" pos:end="513:54"><name pos:start="513:41" pos:end="513:41">r</name><operator pos:start="513:42" pos:end="513:43">-&gt;</operator><name pos:start="513:44" pos:end="513:46">req</name><operator pos:start="513:47" pos:end="513:47">.</operator><name pos:start="513:48" pos:end="513:50">cmd</name><operator pos:start="513:51" pos:end="513:51">.</operator><name pos:start="513:52" pos:end="513:54">lba</name></name> <operator pos:start="513:56" pos:end="513:56">*</operator> <operator pos:start="513:58" pos:end="513:58">(</operator><name pos:start="513:59" pos:end="513:75"><name pos:start="513:59" pos:end="513:59">s</name><operator pos:start="513:60" pos:end="513:61">-&gt;</operator><name pos:start="513:62" pos:end="513:65">qdev</name><operator pos:start="513:66" pos:end="513:66">.</operator><name pos:start="513:67" pos:end="513:75">blocksize</name></name> <operator pos:start="513:77" pos:end="513:77">/</operator> <literal type="number" pos:start="513:79" pos:end="513:81">512</literal><operator pos:start="513:82" pos:end="513:82">)</operator></expr></argument>,

                                        <argument pos:start="515:41" pos:end="515:78"><expr pos:start="515:41" pos:end="515:78"><name pos:start="515:41" pos:end="515:50">nb_sectors</name> <operator pos:start="515:52" pos:end="515:52">*</operator> <operator pos:start="515:54" pos:end="515:54">(</operator><name pos:start="515:55" pos:end="515:71"><name pos:start="515:55" pos:end="515:55">s</name><operator pos:start="515:56" pos:end="515:57">-&gt;</operator><name pos:start="515:58" pos:end="515:61">qdev</name><operator pos:start="515:62" pos:end="515:62">.</operator><name pos:start="515:63" pos:end="515:71">blocksize</name></name> <operator pos:start="515:73" pos:end="515:73">/</operator> <literal type="number" pos:start="515:75" pos:end="515:77">512</literal><operator pos:start="515:78" pos:end="515:78">)</operator></expr></argument>,

                                        <argument pos:start="517:41" pos:end="517:57"><expr pos:start="517:41" pos:end="517:57"><name pos:start="517:41" pos:end="517:57">scsi_aio_complete</name></expr></argument>, <argument pos:start="517:60" pos:end="517:60"><expr pos:start="517:60" pos:end="517:60"><name pos:start="517:60" pos:end="517:60">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="519:9" pos:end="519:17">return <expr pos:start="519:16" pos:end="519:16"><literal type="number" pos:start="519:16" pos:end="519:16">0</literal></expr>;</return>

    <default pos:start="521:5" pos:end="521:12">default:</default>

        <expr_stmt pos:start="523:9" pos:end="523:58"><expr pos:start="523:9" pos:end="523:57"><call pos:start="523:9" pos:end="523:57"><name pos:start="523:9" pos:end="523:15">DPRINTF</name><argument_list pos:start="523:16" pos:end="523:57">(<argument pos:start="523:17" pos:end="523:48"><expr pos:start="523:17" pos:end="523:48"><literal type="string" pos:start="523:17" pos:end="523:48">"Unknown SCSI command (%2.2x)\n"</literal></expr></argument>, <argument pos:start="523:51" pos:end="523:56"><expr pos:start="523:51" pos:end="523:56"><name pos:start="523:51" pos:end="523:56"><name pos:start="523:51" pos:end="523:53">buf</name><index pos:start="523:54" pos:end="523:56">[<expr pos:start="523:55" pos:end="523:55"><literal type="number" pos:start="523:55" pos:end="523:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="525:9" pos:end="525:60"><expr pos:start="525:9" pos:end="525:59"><call pos:start="525:9" pos:end="525:59"><name pos:start="525:9" pos:end="525:28">scsi_check_condition</name><argument_list pos:start="525:29" pos:end="525:59">(<argument pos:start="525:30" pos:end="525:30"><expr pos:start="525:30" pos:end="525:30"><name pos:start="525:30" pos:end="525:30">r</name></expr></argument>, <argument pos:start="525:33" pos:end="525:58"><expr pos:start="525:33" pos:end="525:58"><call pos:start="525:33" pos:end="525:58"><name pos:start="525:33" pos:end="525:42">SENSE_CODE</name><argument_list pos:start="525:43" pos:end="525:58">(<argument pos:start="525:44" pos:end="525:57"><expr pos:start="525:44" pos:end="525:57"><name pos:start="525:44" pos:end="525:57">INVALID_OPCODE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="527:9" pos:end="527:17">return <expr pos:start="527:16" pos:end="527:16"><literal type="number" pos:start="527:16" pos:end="527:16">0</literal></expr>;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="531:5" pos:end="531:26"><expr pos:start="531:5" pos:end="531:25"><call pos:start="531:5" pos:end="531:25"><name pos:start="531:5" pos:end="531:10">assert</name><argument_list pos:start="531:11" pos:end="531:25">(<argument pos:start="531:12" pos:end="531:24"><expr pos:start="531:12" pos:end="531:24"><operator pos:start="531:12" pos:end="531:12">!</operator><name pos:start="531:13" pos:end="531:24"><name pos:start="531:13" pos:end="531:13">r</name><operator pos:start="531:14" pos:end="531:15">-&gt;</operator><name pos:start="531:16" pos:end="531:18">req</name><operator pos:start="531:19" pos:end="531:19">.</operator><name pos:start="531:20" pos:end="531:24">aiocb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="533:5" pos:end="533:51"><expr pos:start="533:5" pos:end="533:50"><name pos:start="533:5" pos:end="533:18"><name pos:start="533:5" pos:end="533:5">r</name><operator pos:start="533:6" pos:end="533:7">-&gt;</operator><name pos:start="533:8" pos:end="533:10">iov</name><operator pos:start="533:11" pos:end="533:11">.</operator><name pos:start="533:12" pos:end="533:18">iov_len</name></name> <operator pos:start="533:20" pos:end="533:20">=</operator> <call pos:start="533:22" pos:end="533:50"><name pos:start="533:22" pos:end="533:24">MIN</name><argument_list pos:start="533:25" pos:end="533:50">(<argument pos:start="533:26" pos:end="533:34"><expr pos:start="533:26" pos:end="533:34"><name pos:start="533:26" pos:end="533:34"><name pos:start="533:26" pos:end="533:26">r</name><operator pos:start="533:27" pos:end="533:28">-&gt;</operator><name pos:start="533:29" pos:end="533:34">buflen</name></name></expr></argument>, <argument pos:start="533:37" pos:end="533:49"><expr pos:start="533:37" pos:end="533:49"><name pos:start="533:37" pos:end="533:49"><name pos:start="533:37" pos:end="533:39">req</name><operator pos:start="533:40" pos:end="533:41">-&gt;</operator><name pos:start="533:42" pos:end="533:44">cmd</name><operator pos:start="533:45" pos:end="533:45">.</operator><name pos:start="533:46" pos:end="533:49">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="535:5" pos:end="539:5"><if pos:start="535:5" pos:end="539:5">if <condition pos:start="535:8" pos:end="535:28">(<expr pos:start="535:9" pos:end="535:27"><name pos:start="535:9" pos:end="535:22"><name pos:start="535:9" pos:end="535:9">r</name><operator pos:start="535:10" pos:end="535:11">-&gt;</operator><name pos:start="535:12" pos:end="535:14">iov</name><operator pos:start="535:15" pos:end="535:15">.</operator><name pos:start="535:16" pos:end="535:22">iov_len</name></name> <operator pos:start="535:24" pos:end="535:25">==</operator> <literal type="number" pos:start="535:27" pos:end="535:27">0</literal></expr>)</condition> <block pos:start="535:30" pos:end="539:5">{<block_content pos:start="537:9" pos:end="537:41">

        <expr_stmt pos:start="537:9" pos:end="537:41"><expr pos:start="537:9" pos:end="537:40"><call pos:start="537:9" pos:end="537:40"><name pos:start="537:9" pos:end="537:25">scsi_req_complete</name><argument_list pos:start="537:26" pos:end="537:40">(<argument pos:start="537:27" pos:end="537:33"><expr pos:start="537:27" pos:end="537:33"><operator pos:start="537:27" pos:end="537:27">&amp;</operator><name pos:start="537:28" pos:end="537:33"><name pos:start="537:28" pos:end="537:28">r</name><operator pos:start="537:29" pos:end="537:30">-&gt;</operator><name pos:start="537:31" pos:end="537:33">req</name></name></expr></argument>, <argument pos:start="537:36" pos:end="537:39"><expr pos:start="537:36" pos:end="537:39"><name pos:start="537:36" pos:end="537:39">GOOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="541:5" pos:end="551:5"><if pos:start="541:5" pos:end="547:5">if <condition pos:start="541:8" pos:end="541:44">(<expr pos:start="541:9" pos:end="541:43"><name pos:start="541:9" pos:end="541:23"><name pos:start="541:9" pos:end="541:9">r</name><operator pos:start="541:10" pos:end="541:11">-&gt;</operator><name pos:start="541:12" pos:end="541:14">req</name><operator pos:start="541:15" pos:end="541:15">.</operator><name pos:start="541:16" pos:end="541:18">cmd</name><operator pos:start="541:19" pos:end="541:19">.</operator><name pos:start="541:20" pos:end="541:23">mode</name></name> <operator pos:start="541:25" pos:end="541:26">==</operator> <name pos:start="541:28" pos:end="541:43">SCSI_XFER_TO_DEV</name></expr>)</condition> <block pos:start="541:46" pos:end="547:5">{<block_content pos:start="543:9" pos:end="545:31">

        <expr_stmt pos:start="543:9" pos:end="543:48"><expr pos:start="543:9" pos:end="543:47"><call pos:start="543:9" pos:end="543:47"><name pos:start="543:9" pos:end="543:14">assert</name><argument_list pos:start="543:15" pos:end="543:47">(<argument pos:start="543:16" pos:end="543:46"><expr pos:start="543:16" pos:end="543:46"><name pos:start="543:16" pos:end="543:29"><name pos:start="543:16" pos:end="543:16">r</name><operator pos:start="543:17" pos:end="543:18">-&gt;</operator><name pos:start="543:19" pos:end="543:21">iov</name><operator pos:start="543:22" pos:end="543:22">.</operator><name pos:start="543:23" pos:end="543:29">iov_len</name></name> <operator pos:start="543:31" pos:end="543:32">==</operator> <name pos:start="543:34" pos:end="543:46"><name pos:start="543:34" pos:end="543:36">req</name><operator pos:start="543:37" pos:end="543:38">-&gt;</operator><name pos:start="543:39" pos:end="543:41">cmd</name><operator pos:start="543:42" pos:end="543:42">.</operator><name pos:start="543:43" pos:end="543:46">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="545:9" pos:end="545:31">return <expr pos:start="545:16" pos:end="545:30"><operator pos:start="545:16" pos:end="545:16">-</operator><name pos:start="545:17" pos:end="545:30"><name pos:start="545:17" pos:end="545:17">r</name><operator pos:start="545:18" pos:end="545:19">-&gt;</operator><name pos:start="545:20" pos:end="545:22">iov</name><operator pos:start="545:23" pos:end="545:23">.</operator><name pos:start="545:24" pos:end="545:30">iov_len</name></name></expr>;</return>

    </block_content>}</block></if> <else pos:start="547:7" pos:end="551:5">else <block pos:start="547:12" pos:end="551:5">{<block_content pos:start="549:9" pos:end="549:30">

        <return pos:start="549:9" pos:end="549:30">return <expr pos:start="549:16" pos:end="549:29"><name pos:start="549:16" pos:end="549:29"><name pos:start="549:16" pos:end="549:16">r</name><operator pos:start="549:17" pos:end="549:18">-&gt;</operator><name pos:start="549:19" pos:end="549:21">iov</name><operator pos:start="549:22" pos:end="549:22">.</operator><name pos:start="549:23" pos:end="549:29">iov_len</name></name></expr>;</return>

    </block_content>}</block></else></if_stmt>



<label pos:start="555:1" pos:end="555:16"><name pos:start="555:1" pos:end="555:15">illegal_request</name>:</label>

    <if_stmt pos:start="557:5" pos:end="561:5"><if pos:start="557:5" pos:end="561:5">if <condition pos:start="557:8" pos:end="557:28">(<expr pos:start="557:9" pos:end="557:27"><name pos:start="557:9" pos:end="557:21"><name pos:start="557:9" pos:end="557:9">r</name><operator pos:start="557:10" pos:end="557:11">-&gt;</operator><name pos:start="557:12" pos:end="557:14">req</name><operator pos:start="557:15" pos:end="557:15">.</operator><name pos:start="557:16" pos:end="557:21">status</name></name> <operator pos:start="557:23" pos:end="557:24">==</operator> <operator pos:start="557:26" pos:end="557:26">-</operator><literal type="number" pos:start="557:27" pos:end="557:27">1</literal></expr>)</condition> <block pos:start="557:30" pos:end="561:5">{<block_content pos:start="559:9" pos:end="559:59">

        <expr_stmt pos:start="559:9" pos:end="559:59"><expr pos:start="559:9" pos:end="559:58"><call pos:start="559:9" pos:end="559:58"><name pos:start="559:9" pos:end="559:28">scsi_check_condition</name><argument_list pos:start="559:29" pos:end="559:58">(<argument pos:start="559:30" pos:end="559:30"><expr pos:start="559:30" pos:end="559:30"><name pos:start="559:30" pos:end="559:30">r</name></expr></argument>, <argument pos:start="559:33" pos:end="559:57"><expr pos:start="559:33" pos:end="559:57"><call pos:start="559:33" pos:end="559:57"><name pos:start="559:33" pos:end="559:42">SENSE_CODE</name><argument_list pos:start="559:43" pos:end="559:57">(<argument pos:start="559:44" pos:end="559:56"><expr pos:start="559:44" pos:end="559:56"><name pos:start="559:44" pos:end="559:56">INVALID_FIELD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="563:5" pos:end="563:13">return <expr pos:start="563:12" pos:end="563:12"><literal type="number" pos:start="563:12" pos:end="563:12">0</literal></expr>;</return>



<label pos:start="567:1" pos:end="567:12"><name pos:start="567:1" pos:end="567:11">illegal_lba</name>:</label>

    <expr_stmt pos:start="569:5" pos:end="569:58"><expr pos:start="569:5" pos:end="569:57"><call pos:start="569:5" pos:end="569:57"><name pos:start="569:5" pos:end="569:24">scsi_check_condition</name><argument_list pos:start="569:25" pos:end="569:57">(<argument pos:start="569:26" pos:end="569:26"><expr pos:start="569:26" pos:end="569:26"><name pos:start="569:26" pos:end="569:26">r</name></expr></argument>, <argument pos:start="569:29" pos:end="569:56"><expr pos:start="569:29" pos:end="569:56"><call pos:start="569:29" pos:end="569:56"><name pos:start="569:29" pos:end="569:38">SENSE_CODE</name><argument_list pos:start="569:39" pos:end="569:56">(<argument pos:start="569:40" pos:end="569:55"><expr pos:start="569:40" pos:end="569:55"><name pos:start="569:40" pos:end="569:55">LBA_OUT_OF_RANGE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="571:5" pos:end="571:13">return <expr pos:start="571:12" pos:end="571:12"><literal type="number" pos:start="571:12" pos:end="571:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
