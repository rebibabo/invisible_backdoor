<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21590.c" pos:tabs="8"><function pos:start="1:1" pos:end="205:1"><type pos:start="1:1" pos:end="1:17"><name pos:start="1:1" pos:end="1:15">Exynos4210State</name> <modifier pos:start="1:17" pos:end="1:17">*</modifier></type><name pos:start="1:18" pos:end="1:32">exynos4210_init</name><parameter_list pos:start="1:33" pos:end="2:31">(<parameter pos:start="1:34" pos:end="1:57"><decl pos:start="1:34" pos:end="1:57"><type pos:start="1:34" pos:end="1:57"><name pos:start="1:34" pos:end="1:45">MemoryRegion</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:57">system_mem</name></decl></parameter>,
        <parameter pos:start="2:9" pos:end="2:30"><decl pos:start="2:9" pos:end="2:30"><type pos:start="2:9" pos:end="2:30"><name pos:start="2:9" pos:end="2:16">unsigned</name> <name pos:start="2:18" pos:end="2:21">long</name></type> <name pos:start="2:23" pos:end="2:30">ram_size</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="205:1">{<block_content pos:start="4:5" pos:end="204:13">
    <decl_stmt pos:start="4:5" pos:end="4:13"><decl pos:start="4:5" pos:end="4:9"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:9">i</name></decl>, <decl pos:start="4:12" pos:end="4:12"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:12" pos:end="4:12">n</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:50"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">Exynos4210State</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:22">s</name> <init pos:start="5:24" pos:end="5:50">= <expr pos:start="5:26" pos:end="5:50"><call pos:start="5:26" pos:end="5:50"><name pos:start="5:26" pos:end="5:30">g_new</name><argument_list pos:start="5:31" pos:end="5:50">(<argument pos:start="5:32" pos:end="5:46"><expr pos:start="5:32" pos:end="5:46"><name pos:start="5:32" pos:end="5:46">Exynos4210State</name></expr></argument>, <argument pos:start="5:49" pos:end="5:49"><expr pos:start="5:49" pos:end="5:49"><literal type="number" pos:start="5:49" pos:end="5:49">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:69"><decl pos:start="6:5" pos:end="6:68"><type pos:start="6:5" pos:end="6:12"><name pos:start="6:5" pos:end="6:12">qemu_irq</name></type> <name pos:start="6:14" pos:end="6:68"><name pos:start="6:14" pos:end="6:21">gate_irq</name><index pos:start="6:22" pos:end="6:39">[<expr pos:start="6:23" pos:end="6:38"><name pos:start="6:23" pos:end="6:38">EXYNOS4210_NCPUS</name></expr>]</index><index pos:start="6:40" pos:end="6:68">[<expr pos:start="6:41" pos:end="6:67"><name pos:start="6:41" pos:end="6:67">EXYNOS4210_IRQ_GATE_NINPUTS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">long</name></type> <name pos:start="7:19" pos:end="7:26">mem_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:21"><decl pos:start="8:5" pos:end="8:20"><type pos:start="8:5" pos:end="8:17"><name pos:start="8:5" pos:end="8:15">DeviceState</name> <modifier pos:start="8:17" pos:end="8:17">*</modifier></type><name pos:start="8:18" pos:end="8:20">dev</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">SysBusDevice</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:24">busdev</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:24"><decl pos:start="10:5" pos:end="10:23"><type pos:start="10:5" pos:end="10:17"><name pos:start="10:5" pos:end="10:15">ObjectClass</name> <modifier pos:start="10:17" pos:end="10:17">*</modifier></type><name pos:start="10:18" pos:end="10:23">cpu_oc</name></decl>;</decl_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:58"><expr pos:start="11:5" pos:end="11:57"><name pos:start="11:5" pos:end="11:10">cpu_oc</name> <operator pos:start="11:12" pos:end="11:12">=</operator> <call pos:start="11:14" pos:end="11:57"><name pos:start="11:14" pos:end="11:30">cpu_class_by_name</name><argument_list pos:start="11:31" pos:end="11:57">(<argument pos:start="11:32" pos:end="11:43"><expr pos:start="11:32" pos:end="11:43"><name pos:start="11:32" pos:end="11:43">TYPE_ARM_CPU</name></expr></argument>, <argument pos:start="11:46" pos:end="11:56"><expr pos:start="11:46" pos:end="11:56"><literal type="string" pos:start="11:46" pos:end="11:56">"cortex-a9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:19"><expr pos:start="12:5" pos:end="12:18"><call pos:start="12:5" pos:end="12:18"><name pos:start="12:5" pos:end="12:10">assert</name><argument_list pos:start="12:11" pos:end="12:18">(<argument pos:start="12:12" pos:end="12:17"><expr pos:start="12:12" pos:end="12:17"><name pos:start="12:12" pos:end="12:17">cpu_oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="13:5" pos:end="25:5">for <control pos:start="13:9" pos:end="13:42">(<init pos:start="13:10" pos:end="13:15"><expr pos:start="13:10" pos:end="13:14"><name pos:start="13:10" pos:end="13:10">n</name> <operator pos:start="13:12" pos:end="13:12">=</operator> <literal type="number" pos:start="13:14" pos:end="13:14">0</literal></expr>;</init> <condition pos:start="13:17" pos:end="13:37"><expr pos:start="13:17" pos:end="13:36"><name pos:start="13:17" pos:end="13:17">n</name> <operator pos:start="13:19" pos:end="13:19">&lt;</operator> <name pos:start="13:21" pos:end="13:36">EXYNOS4210_NCPUS</name></expr>;</condition> <incr pos:start="13:39" pos:end="13:41"><expr pos:start="13:39" pos:end="13:41"><name pos:start="13:39" pos:end="13:39">n</name><operator pos:start="13:40" pos:end="13:41">++</operator></expr></incr>)</control> <block pos:start="13:44" pos:end="25:5">{<block_content pos:start="14:9" pos:end="24:73">
        <decl_stmt pos:start="14:9" pos:end="14:67"><decl pos:start="14:9" pos:end="14:66"><type pos:start="14:9" pos:end="14:16"><name pos:start="14:9" pos:end="14:14">Object</name> <modifier pos:start="14:16" pos:end="14:16">*</modifier></type><name pos:start="14:17" pos:end="14:22">cpuobj</name> <init pos:start="14:24" pos:end="14:66">= <expr pos:start="14:26" pos:end="14:66"><call pos:start="14:26" pos:end="14:66"><name pos:start="14:26" pos:end="14:35">object_new</name><argument_list pos:start="14:36" pos:end="14:66">(<argument pos:start="14:37" pos:end="14:65"><expr pos:start="14:37" pos:end="14:65"><call pos:start="14:37" pos:end="14:65"><name pos:start="14:37" pos:end="14:57">object_class_get_name</name><argument_list pos:start="14:58" pos:end="14:65">(<argument pos:start="14:59" pos:end="14:64"><expr pos:start="14:59" pos:end="14:64"><name pos:start="14:59" pos:end="14:64">cpu_oc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block" pos:start="15:9" pos:end="17:11">/* By default A9 CPUs have EL3 enabled.  This board does not currently
         * support EL3 so the CPU EL3 property is disabled before realization.
         */</comment>
        <if_stmt pos:start="18:9" pos:end="20:9"><if pos:start="18:9" pos:end="20:9">if <condition pos:start="18:12" pos:end="18:58">(<expr pos:start="18:13" pos:end="18:57"><call pos:start="18:13" pos:end="18:57"><name pos:start="18:13" pos:end="18:32">object_property_find</name><argument_list pos:start="18:33" pos:end="18:57">(<argument pos:start="18:34" pos:end="18:39"><expr pos:start="18:34" pos:end="18:39"><name pos:start="18:34" pos:end="18:39">cpuobj</name></expr></argument>, <argument pos:start="18:42" pos:end="18:50"><expr pos:start="18:42" pos:end="18:50"><literal type="string" pos:start="18:42" pos:end="18:50">"has_el3"</literal></expr></argument>, <argument pos:start="18:53" pos:end="18:56"><expr pos:start="18:53" pos:end="18:56"><name pos:start="18:53" pos:end="18:56">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="18:60" pos:end="20:9">{<block_content pos:start="19:13" pos:end="19:77">
            <expr_stmt pos:start="19:13" pos:end="19:77"><expr pos:start="19:13" pos:end="19:76"><call pos:start="19:13" pos:end="19:76"><name pos:start="19:13" pos:end="19:36">object_property_set_bool</name><argument_list pos:start="19:37" pos:end="19:76">(<argument pos:start="19:38" pos:end="19:43"><expr pos:start="19:38" pos:end="19:43"><name pos:start="19:38" pos:end="19:43">cpuobj</name></expr></argument>, <argument pos:start="19:46" pos:end="19:50"><expr pos:start="19:46" pos:end="19:50"><name pos:start="19:46" pos:end="19:50">false</name></expr></argument>, <argument pos:start="19:53" pos:end="19:61"><expr pos:start="19:53" pos:end="19:61"><literal type="string" pos:start="19:53" pos:end="19:61">"has_el3"</literal></expr></argument>, <argument pos:start="19:64" pos:end="19:75"><expr pos:start="19:64" pos:end="19:75"><operator pos:start="19:64" pos:end="19:64">&amp;</operator><name pos:start="19:65" pos:end="19:75">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="21:9" pos:end="21:36"><expr pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:14">cpu</name><index pos:start="21:15" pos:end="21:17">[<expr pos:start="21:16" pos:end="21:16"><name pos:start="21:16" pos:end="21:16">n</name></expr>]</index></name> <operator pos:start="21:19" pos:end="21:19">=</operator> <call pos:start="21:21" pos:end="21:35"><name pos:start="21:21" pos:end="21:27">ARM_CPU</name><argument_list pos:start="21:28" pos:end="21:35">(<argument pos:start="21:29" pos:end="21:34"><expr pos:start="21:29" pos:end="21:34"><name pos:start="21:29" pos:end="21:34">cpuobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="22:9" pos:end="23:60"><expr pos:start="22:9" pos:end="23:59"><call pos:start="22:9" pos:end="23:59"><name pos:start="22:9" pos:end="22:31">object_property_set_int</name><argument_list pos:start="22:32" pos:end="23:59">(<argument pos:start="22:33" pos:end="22:38"><expr pos:start="22:33" pos:end="22:38"><name pos:start="22:33" pos:end="22:38">cpuobj</name></expr></argument>, <argument pos:start="22:41" pos:end="22:72"><expr pos:start="22:41" pos:end="22:72"><name pos:start="22:41" pos:end="22:72">EXYNOS4210_SMP_PRIVATE_BASE_ADDR</name></expr></argument>,
                                <argument pos:start="23:33" pos:end="23:44"><expr pos:start="23:33" pos:end="23:44"><literal type="string" pos:start="23:33" pos:end="23:44">"reset-cbar"</literal></expr></argument>, <argument pos:start="23:47" pos:end="23:58"><expr pos:start="23:47" pos:end="23:58"><operator pos:start="23:47" pos:end="23:47">&amp;</operator><name pos:start="23:48" pos:end="23:58">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="24:9" pos:end="24:73"><expr pos:start="24:9" pos:end="24:72"><call pos:start="24:9" pos:end="24:72"><name pos:start="24:9" pos:end="24:32">object_property_set_bool</name><argument_list pos:start="24:33" pos:end="24:72">(<argument pos:start="24:34" pos:end="24:39"><expr pos:start="24:34" pos:end="24:39"><name pos:start="24:34" pos:end="24:39">cpuobj</name></expr></argument>, <argument pos:start="24:42" pos:end="24:45"><expr pos:start="24:42" pos:end="24:45"><name pos:start="24:42" pos:end="24:45">true</name></expr></argument>, <argument pos:start="24:48" pos:end="24:57"><expr pos:start="24:48" pos:end="24:57"><literal type="string" pos:start="24:48" pos:end="24:57">"realized"</literal></expr></argument>, <argument pos:start="24:60" pos:end="24:71"><expr pos:start="24:60" pos:end="24:71"><operator pos:start="24:60" pos:end="24:60">&amp;</operator><name pos:start="24:61" pos:end="24:71">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block" format="doxygen" pos:start="26:5" pos:end="26:18">/*** IRQs ***/</comment>
    <expr_stmt pos:start="27:5" pos:end="27:49"><expr pos:start="27:5" pos:end="27:48"><name pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:16">irq_table</name></name> <operator pos:start="27:18" pos:end="27:18">=</operator> <call pos:start="27:20" pos:end="27:48"><name pos:start="27:20" pos:end="27:38">exynos4210_init_irq</name><argument_list pos:start="27:39" pos:end="27:48">(<argument pos:start="27:40" pos:end="27:47"><expr pos:start="27:40" pos:end="27:47"><operator pos:start="27:40" pos:end="27:40">&amp;</operator><name pos:start="27:41" pos:end="27:47"><name pos:start="27:41" pos:end="27:41">s</name><operator pos:start="27:42" pos:end="27:43">-&gt;</operator><name pos:start="27:44" pos:end="27:47">irqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="28:5" pos:end="28:18">/* IRQ Gate */</comment>
    <for pos:start="29:5" pos:end="41:5">for <control pos:start="29:9" pos:end="29:42">(<init pos:start="29:10" pos:end="29:15"><expr pos:start="29:10" pos:end="29:14"><name pos:start="29:10" pos:end="29:10">i</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr>;</init> <condition pos:start="29:17" pos:end="29:37"><expr pos:start="29:17" pos:end="29:36"><name pos:start="29:17" pos:end="29:17">i</name> <operator pos:start="29:19" pos:end="29:19">&lt;</operator> <name pos:start="29:21" pos:end="29:36">EXYNOS4210_NCPUS</name></expr>;</condition> <incr pos:start="29:39" pos:end="29:41"><expr pos:start="29:39" pos:end="29:41"><name pos:start="29:39" pos:end="29:39">i</name><operator pos:start="29:40" pos:end="29:41">++</operator></expr></incr>)</control> <block pos:start="29:44" pos:end="41:5">{<block_content pos:start="30:9" pos:end="40:77">
        <expr_stmt pos:start="30:9" pos:end="30:55"><expr pos:start="30:9" pos:end="30:54"><name pos:start="30:9" pos:end="30:11">dev</name> <operator pos:start="30:13" pos:end="30:13">=</operator> <call pos:start="30:15" pos:end="30:54"><name pos:start="30:15" pos:end="30:25">qdev_create</name><argument_list pos:start="30:26" pos:end="30:54">(<argument pos:start="30:27" pos:end="30:30"><expr pos:start="30:27" pos:end="30:30"><name pos:start="30:27" pos:end="30:30">NULL</name></expr></argument>, <argument pos:start="30:33" pos:end="30:53"><expr pos:start="30:33" pos:end="30:53"><literal type="string" pos:start="30:33" pos:end="30:53">"exynos4210.irq_gate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="31:9" pos:end="31:71"><expr pos:start="31:9" pos:end="31:70"><call pos:start="31:9" pos:end="31:70"><name pos:start="31:9" pos:end="31:28">qdev_prop_set_uint32</name><argument_list pos:start="31:29" pos:end="31:70">(<argument pos:start="31:30" pos:end="31:32"><expr pos:start="31:30" pos:end="31:32"><name pos:start="31:30" pos:end="31:32">dev</name></expr></argument>, <argument pos:start="31:35" pos:end="31:40"><expr pos:start="31:35" pos:end="31:40"><literal type="string" pos:start="31:35" pos:end="31:40">"n_in"</literal></expr></argument>, <argument pos:start="31:43" pos:end="31:69"><expr pos:start="31:43" pos:end="31:69"><name pos:start="31:43" pos:end="31:69">EXYNOS4210_IRQ_GATE_NINPUTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="32:9" pos:end="32:30"><expr pos:start="32:9" pos:end="32:29"><call pos:start="32:9" pos:end="32:29"><name pos:start="32:9" pos:end="32:24">qdev_init_nofail</name><argument_list pos:start="32:25" pos:end="32:29">(<argument pos:start="32:26" pos:end="32:28"><expr pos:start="32:26" pos:end="32:28"><name pos:start="32:26" pos:end="32:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="33:9" pos:end="33:44">/* Get IRQ Gate input in gate_irq */</comment>
        <for pos:start="34:9" pos:end="36:9">for <control pos:start="34:13" pos:end="34:57">(<init pos:start="34:14" pos:end="34:19"><expr pos:start="34:14" pos:end="34:18"><name pos:start="34:14" pos:end="34:14">n</name> <operator pos:start="34:16" pos:end="34:16">=</operator> <literal type="number" pos:start="34:18" pos:end="34:18">0</literal></expr>;</init> <condition pos:start="34:21" pos:end="34:52"><expr pos:start="34:21" pos:end="34:51"><name pos:start="34:21" pos:end="34:21">n</name> <operator pos:start="34:23" pos:end="34:23">&lt;</operator> <name pos:start="34:25" pos:end="34:51">EXYNOS4210_IRQ_GATE_NINPUTS</name></expr>;</condition> <incr pos:start="34:54" pos:end="34:56"><expr pos:start="34:54" pos:end="34:56"><name pos:start="34:54" pos:end="34:54">n</name><operator pos:start="34:55" pos:end="34:56">++</operator></expr></incr>)</control> <block pos:start="34:59" pos:end="36:9">{<block_content pos:start="35:13" pos:end="35:54">
            <expr_stmt pos:start="35:13" pos:end="35:54"><expr pos:start="35:13" pos:end="35:53"><name pos:start="35:13" pos:end="35:26"><name pos:start="35:13" pos:end="35:20">gate_irq</name><index pos:start="35:21" pos:end="35:23">[<expr pos:start="35:22" pos:end="35:22"><name pos:start="35:22" pos:end="35:22">i</name></expr>]</index><index pos:start="35:24" pos:end="35:26">[<expr pos:start="35:25" pos:end="35:25"><name pos:start="35:25" pos:end="35:25">n</name></expr>]</index></name> <operator pos:start="35:28" pos:end="35:28">=</operator> <call pos:start="35:30" pos:end="35:53"><name pos:start="35:30" pos:end="35:45">qdev_get_gpio_in</name><argument_list pos:start="35:46" pos:end="35:53">(<argument pos:start="35:47" pos:end="35:49"><expr pos:start="35:47" pos:end="35:49"><name pos:start="35:47" pos:end="35:49">dev</name></expr></argument>, <argument pos:start="35:52" pos:end="35:52"><expr pos:start="35:52" pos:end="35:52"><name pos:start="35:52" pos:end="35:52">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt pos:start="37:9" pos:end="37:37"><expr pos:start="37:9" pos:end="37:36"><name pos:start="37:9" pos:end="37:14">busdev</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <call pos:start="37:18" pos:end="37:36"><name pos:start="37:18" pos:end="37:31">SYS_BUS_DEVICE</name><argument_list pos:start="37:32" pos:end="37:36">(<argument pos:start="37:33" pos:end="37:35"><expr pos:start="37:33" pos:end="37:35"><name pos:start="37:33" pos:end="37:35">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="38:9" pos:end="38:55">/* Connect IRQ Gate output to CPU's IRQ line */</comment>
        <expr_stmt pos:start="39:9" pos:end="40:77"><expr pos:start="39:9" pos:end="40:76"><call pos:start="39:9" pos:end="40:76"><name pos:start="39:9" pos:end="39:26">sysbus_connect_irq</name><argument_list pos:start="39:27" pos:end="40:76">(<argument pos:start="39:28" pos:end="39:33"><expr pos:start="39:28" pos:end="39:33"><name pos:start="39:28" pos:end="39:33">busdev</name></expr></argument>, <argument pos:start="39:36" pos:end="39:36"><expr pos:start="39:36" pos:end="39:36"><literal type="number" pos:start="39:36" pos:end="39:36">0</literal></expr></argument>,
                           <argument pos:start="40:28" pos:end="40:75"><expr pos:start="40:28" pos:end="40:75"><call pos:start="40:28" pos:end="40:75"><name pos:start="40:28" pos:end="40:43">qdev_get_gpio_in</name><argument_list pos:start="40:44" pos:end="40:75">(<argument pos:start="40:45" pos:end="40:61"><expr pos:start="40:45" pos:end="40:61"><call pos:start="40:45" pos:end="40:61"><name pos:start="40:45" pos:end="40:50">DEVICE</name><argument_list pos:start="40:51" pos:end="40:61">(<argument pos:start="40:52" pos:end="40:60"><expr pos:start="40:52" pos:end="40:60"><name pos:start="40:52" pos:end="40:60"><name pos:start="40:52" pos:end="40:52">s</name><operator pos:start="40:53" pos:end="40:54">-&gt;</operator><name pos:start="40:55" pos:end="40:57">cpu</name><index pos:start="40:58" pos:end="40:60">[<expr pos:start="40:59" pos:end="40:59"><name pos:start="40:59" pos:end="40:59">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="40:64" pos:end="40:74"><expr pos:start="40:64" pos:end="40:74"><name pos:start="40:64" pos:end="40:74">ARM_CPU_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block" pos:start="42:5" pos:end="42:48">/* Private memory region and Internal GIC */</comment>
    <expr_stmt pos:start="43:5" pos:end="43:45"><expr pos:start="43:5" pos:end="43:44"><name pos:start="43:5" pos:end="43:7">dev</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:44"><name pos:start="43:11" pos:end="43:21">qdev_create</name><argument_list pos:start="43:22" pos:end="43:44">(<argument pos:start="43:23" pos:end="43:26"><expr pos:start="43:23" pos:end="43:26"><name pos:start="43:23" pos:end="43:26">NULL</name></expr></argument>, <argument pos:start="43:29" pos:end="43:43"><expr pos:start="43:29" pos:end="43:43"><literal type="string" pos:start="43:29" pos:end="43:43">"a9mpcore_priv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="44:5" pos:end="44:59"><expr pos:start="44:5" pos:end="44:58"><call pos:start="44:5" pos:end="44:58"><name pos:start="44:5" pos:end="44:24">qdev_prop_set_uint32</name><argument_list pos:start="44:25" pos:end="44:58">(<argument pos:start="44:26" pos:end="44:28"><expr pos:start="44:26" pos:end="44:28"><name pos:start="44:26" pos:end="44:28">dev</name></expr></argument>, <argument pos:start="44:31" pos:end="44:39"><expr pos:start="44:31" pos:end="44:39"><literal type="string" pos:start="44:31" pos:end="44:39">"num-cpu"</literal></expr></argument>, <argument pos:start="44:42" pos:end="44:57"><expr pos:start="44:42" pos:end="44:57"><name pos:start="44:42" pos:end="44:57">EXYNOS4210_NCPUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="45:5" pos:end="45:26"><expr pos:start="45:5" pos:end="45:25"><call pos:start="45:5" pos:end="45:25"><name pos:start="45:5" pos:end="45:20">qdev_init_nofail</name><argument_list pos:start="45:21" pos:end="45:25">(<argument pos:start="45:22" pos:end="45:24"><expr pos:start="45:22" pos:end="45:24"><name pos:start="45:22" pos:end="45:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="46:5" pos:end="46:33"><expr pos:start="46:5" pos:end="46:32"><name pos:start="46:5" pos:end="46:10">busdev</name> <operator pos:start="46:12" pos:end="46:12">=</operator> <call pos:start="46:14" pos:end="46:32"><name pos:start="46:14" pos:end="46:27">SYS_BUS_DEVICE</name><argument_list pos:start="46:28" pos:end="46:32">(<argument pos:start="46:29" pos:end="46:31"><expr pos:start="46:29" pos:end="46:31"><name pos:start="46:29" pos:end="46:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="47:5" pos:end="47:65"><expr pos:start="47:5" pos:end="47:64"><call pos:start="47:5" pos:end="47:64"><name pos:start="47:5" pos:end="47:19">sysbus_mmio_map</name><argument_list pos:start="47:20" pos:end="47:64">(<argument pos:start="47:21" pos:end="47:26"><expr pos:start="47:21" pos:end="47:26"><name pos:start="47:21" pos:end="47:26">busdev</name></expr></argument>, <argument pos:start="47:29" pos:end="47:29"><expr pos:start="47:29" pos:end="47:29"><literal type="number" pos:start="47:29" pos:end="47:29">0</literal></expr></argument>, <argument pos:start="47:32" pos:end="47:63"><expr pos:start="47:32" pos:end="47:63"><name pos:start="47:32" pos:end="47:63">EXYNOS4210_SMP_PRIVATE_BASE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="48:5" pos:end="50:5">for <control pos:start="48:9" pos:end="48:42">(<init pos:start="48:10" pos:end="48:15"><expr pos:start="48:10" pos:end="48:14"><name pos:start="48:10" pos:end="48:10">n</name> <operator pos:start="48:12" pos:end="48:12">=</operator> <literal type="number" pos:start="48:14" pos:end="48:14">0</literal></expr>;</init> <condition pos:start="48:17" pos:end="48:37"><expr pos:start="48:17" pos:end="48:36"><name pos:start="48:17" pos:end="48:17">n</name> <operator pos:start="48:19" pos:end="48:19">&lt;</operator> <name pos:start="48:21" pos:end="48:36">EXYNOS4210_NCPUS</name></expr>;</condition> <incr pos:start="48:39" pos:end="48:41"><expr pos:start="48:39" pos:end="48:41"><name pos:start="48:39" pos:end="48:39">n</name><operator pos:start="48:40" pos:end="48:41">++</operator></expr></incr>)</control> <block pos:start="48:44" pos:end="50:5">{<block_content pos:start="49:9" pos:end="49:54">
        <expr_stmt pos:start="49:9" pos:end="49:54"><expr pos:start="49:9" pos:end="49:53"><call pos:start="49:9" pos:end="49:53"><name pos:start="49:9" pos:end="49:26">sysbus_connect_irq</name><argument_list pos:start="49:27" pos:end="49:53">(<argument pos:start="49:28" pos:end="49:33"><expr pos:start="49:28" pos:end="49:33"><name pos:start="49:28" pos:end="49:33">busdev</name></expr></argument>, <argument pos:start="49:36" pos:end="49:36"><expr pos:start="49:36" pos:end="49:36"><name pos:start="49:36" pos:end="49:36">n</name></expr></argument>, <argument pos:start="49:39" pos:end="49:52"><expr pos:start="49:39" pos:end="49:52"><name pos:start="49:39" pos:end="49:52"><name pos:start="49:39" pos:end="49:46">gate_irq</name><index pos:start="49:47" pos:end="49:49">[<expr pos:start="49:48" pos:end="49:48"><name pos:start="49:48" pos:end="49:48">n</name></expr>]</index><index pos:start="49:50" pos:end="49:52">[<expr pos:start="49:51" pos:end="49:51"><literal type="number" pos:start="49:51" pos:end="49:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for pos:start="51:5" pos:end="53:5">for <control pos:start="51:9" pos:end="51:49">(<init pos:start="51:10" pos:end="51:15"><expr pos:start="51:10" pos:end="51:14"><name pos:start="51:10" pos:end="51:10">n</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>;</init> <condition pos:start="51:17" pos:end="51:44"><expr pos:start="51:17" pos:end="51:43"><name pos:start="51:17" pos:end="51:17">n</name> <operator pos:start="51:19" pos:end="51:19">&lt;</operator> <name pos:start="51:21" pos:end="51:43">EXYNOS4210_INT_GIC_NIRQ</name></expr>;</condition> <incr pos:start="51:46" pos:end="51:48"><expr pos:start="51:46" pos:end="51:48"><name pos:start="51:46" pos:end="51:46">n</name><operator pos:start="51:47" pos:end="51:48">++</operator></expr></incr>)</control> <block pos:start="51:51" pos:end="53:5">{<block_content pos:start="52:9" pos:end="52:58">
        <expr_stmt pos:start="52:9" pos:end="52:58"><expr pos:start="52:9" pos:end="52:57"><name pos:start="52:9" pos:end="52:30"><name pos:start="52:9" pos:end="52:9">s</name><operator pos:start="52:10" pos:end="52:11">-&gt;</operator><name pos:start="52:12" pos:end="52:15">irqs</name><operator pos:start="52:16" pos:end="52:16">.</operator><name pos:start="52:17" pos:end="52:27">int_gic_irq</name><index pos:start="52:28" pos:end="52:30">[<expr pos:start="52:29" pos:end="52:29"><name pos:start="52:29" pos:end="52:29">n</name></expr>]</index></name> <operator pos:start="52:32" pos:end="52:32">=</operator> <call pos:start="52:34" pos:end="52:57"><name pos:start="52:34" pos:end="52:49">qdev_get_gpio_in</name><argument_list pos:start="52:50" pos:end="52:57">(<argument pos:start="52:51" pos:end="52:53"><expr pos:start="52:51" pos:end="52:53"><name pos:start="52:51" pos:end="52:53">dev</name></expr></argument>, <argument pos:start="52:56" pos:end="52:56"><expr pos:start="52:56" pos:end="52:56"><name pos:start="52:56" pos:end="52:56">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block" pos:start="54:5" pos:end="54:26">/* Cache controller */</comment>
    <expr_stmt pos:start="55:5" pos:end="55:66"><expr pos:start="55:5" pos:end="55:65"><call pos:start="55:5" pos:end="55:65"><name pos:start="55:5" pos:end="55:24">sysbus_create_simple</name><argument_list pos:start="55:25" pos:end="55:65">(<argument pos:start="55:26" pos:end="55:31"><expr pos:start="55:26" pos:end="55:31"><literal type="string" pos:start="55:26" pos:end="55:31">"l2x0"</literal></expr></argument>, <argument pos:start="55:34" pos:end="55:58"><expr pos:start="55:34" pos:end="55:58"><name pos:start="55:34" pos:end="55:58">EXYNOS4210_L2X0_BASE_ADDR</name></expr></argument>, <argument pos:start="55:61" pos:end="55:64"><expr pos:start="55:61" pos:end="55:64"><name pos:start="55:61" pos:end="55:64">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="56:5" pos:end="56:22">/* External GIC */</comment>
    <expr_stmt pos:start="57:5" pos:end="57:46"><expr pos:start="57:5" pos:end="57:45"><name pos:start="57:5" pos:end="57:7">dev</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="57:45"><name pos:start="57:11" pos:end="57:21">qdev_create</name><argument_list pos:start="57:22" pos:end="57:45">(<argument pos:start="57:23" pos:end="57:26"><expr pos:start="57:23" pos:end="57:26"><name pos:start="57:23" pos:end="57:26">NULL</name></expr></argument>, <argument pos:start="57:29" pos:end="57:44"><expr pos:start="57:29" pos:end="57:44"><literal type="string" pos:start="57:29" pos:end="57:44">"exynos4210.gic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="58:5" pos:end="58:59"><expr pos:start="58:5" pos:end="58:58"><call pos:start="58:5" pos:end="58:58"><name pos:start="58:5" pos:end="58:24">qdev_prop_set_uint32</name><argument_list pos:start="58:25" pos:end="58:58">(<argument pos:start="58:26" pos:end="58:28"><expr pos:start="58:26" pos:end="58:28"><name pos:start="58:26" pos:end="58:28">dev</name></expr></argument>, <argument pos:start="58:31" pos:end="58:39"><expr pos:start="58:31" pos:end="58:39"><literal type="string" pos:start="58:31" pos:end="58:39">"num-cpu"</literal></expr></argument>, <argument pos:start="58:42" pos:end="58:57"><expr pos:start="58:42" pos:end="58:57"><name pos:start="58:42" pos:end="58:57">EXYNOS4210_NCPUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="59:5" pos:end="59:26"><expr pos:start="59:5" pos:end="59:25"><call pos:start="59:5" pos:end="59:25"><name pos:start="59:5" pos:end="59:20">qdev_init_nofail</name><argument_list pos:start="59:21" pos:end="59:25">(<argument pos:start="59:22" pos:end="59:24"><expr pos:start="59:22" pos:end="59:24"><name pos:start="59:22" pos:end="59:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="60:5" pos:end="60:33"><expr pos:start="60:5" pos:end="60:32"><name pos:start="60:5" pos:end="60:10">busdev</name> <operator pos:start="60:12" pos:end="60:12">=</operator> <call pos:start="60:14" pos:end="60:32"><name pos:start="60:14" pos:end="60:27">SYS_BUS_DEVICE</name><argument_list pos:start="60:28" pos:end="60:32">(<argument pos:start="60:29" pos:end="60:31"><expr pos:start="60:29" pos:end="60:31"><name pos:start="60:29" pos:end="60:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="61:5" pos:end="61:27">/* Map CPU interface */</comment>
    <expr_stmt pos:start="62:5" pos:end="62:65"><expr pos:start="62:5" pos:end="62:64"><call pos:start="62:5" pos:end="62:64"><name pos:start="62:5" pos:end="62:19">sysbus_mmio_map</name><argument_list pos:start="62:20" pos:end="62:64">(<argument pos:start="62:21" pos:end="62:26"><expr pos:start="62:21" pos:end="62:26"><name pos:start="62:21" pos:end="62:26">busdev</name></expr></argument>, <argument pos:start="62:29" pos:end="62:29"><expr pos:start="62:29" pos:end="62:29"><literal type="number" pos:start="62:29" pos:end="62:29">0</literal></expr></argument>, <argument pos:start="62:32" pos:end="62:63"><expr pos:start="62:32" pos:end="62:63"><name pos:start="62:32" pos:end="62:63">EXYNOS4210_EXT_GIC_CPU_BASE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="63:5" pos:end="63:35">/* Map Distributer interface */</comment>
    <expr_stmt pos:start="64:5" pos:end="64:66"><expr pos:start="64:5" pos:end="64:65"><call pos:start="64:5" pos:end="64:65"><name pos:start="64:5" pos:end="64:19">sysbus_mmio_map</name><argument_list pos:start="64:20" pos:end="64:65">(<argument pos:start="64:21" pos:end="64:26"><expr pos:start="64:21" pos:end="64:26"><name pos:start="64:21" pos:end="64:26">busdev</name></expr></argument>, <argument pos:start="64:29" pos:end="64:29"><expr pos:start="64:29" pos:end="64:29"><literal type="number" pos:start="64:29" pos:end="64:29">1</literal></expr></argument>, <argument pos:start="64:32" pos:end="64:64"><expr pos:start="64:32" pos:end="64:64"><name pos:start="64:32" pos:end="64:64">EXYNOS4210_EXT_GIC_DIST_BASE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="65:5" pos:end="67:5">for <control pos:start="65:9" pos:end="65:42">(<init pos:start="65:10" pos:end="65:15"><expr pos:start="65:10" pos:end="65:14"><name pos:start="65:10" pos:end="65:10">n</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <literal type="number" pos:start="65:14" pos:end="65:14">0</literal></expr>;</init> <condition pos:start="65:17" pos:end="65:37"><expr pos:start="65:17" pos:end="65:36"><name pos:start="65:17" pos:end="65:17">n</name> <operator pos:start="65:19" pos:end="65:19">&lt;</operator> <name pos:start="65:21" pos:end="65:36">EXYNOS4210_NCPUS</name></expr>;</condition> <incr pos:start="65:39" pos:end="65:41"><expr pos:start="65:39" pos:end="65:41"><name pos:start="65:39" pos:end="65:39">n</name><operator pos:start="65:40" pos:end="65:41">++</operator></expr></incr>)</control> <block pos:start="65:44" pos:end="67:5">{<block_content pos:start="66:9" pos:end="66:54">
        <expr_stmt pos:start="66:9" pos:end="66:54"><expr pos:start="66:9" pos:end="66:53"><call pos:start="66:9" pos:end="66:53"><name pos:start="66:9" pos:end="66:26">sysbus_connect_irq</name><argument_list pos:start="66:27" pos:end="66:53">(<argument pos:start="66:28" pos:end="66:33"><expr pos:start="66:28" pos:end="66:33"><name pos:start="66:28" pos:end="66:33">busdev</name></expr></argument>, <argument pos:start="66:36" pos:end="66:36"><expr pos:start="66:36" pos:end="66:36"><name pos:start="66:36" pos:end="66:36">n</name></expr></argument>, <argument pos:start="66:39" pos:end="66:52"><expr pos:start="66:39" pos:end="66:52"><name pos:start="66:39" pos:end="66:52"><name pos:start="66:39" pos:end="66:46">gate_irq</name><index pos:start="66:47" pos:end="66:49">[<expr pos:start="66:48" pos:end="66:48"><name pos:start="66:48" pos:end="66:48">n</name></expr>]</index><index pos:start="66:50" pos:end="66:52">[<expr pos:start="66:51" pos:end="66:51"><literal type="number" pos:start="66:51" pos:end="66:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for pos:start="68:5" pos:end="70:5">for <control pos:start="68:9" pos:end="68:49">(<init pos:start="68:10" pos:end="68:15"><expr pos:start="68:10" pos:end="68:14"><name pos:start="68:10" pos:end="68:10">n</name> <operator pos:start="68:12" pos:end="68:12">=</operator> <literal type="number" pos:start="68:14" pos:end="68:14">0</literal></expr>;</init> <condition pos:start="68:17" pos:end="68:44"><expr pos:start="68:17" pos:end="68:43"><name pos:start="68:17" pos:end="68:17">n</name> <operator pos:start="68:19" pos:end="68:19">&lt;</operator> <name pos:start="68:21" pos:end="68:43">EXYNOS4210_EXT_GIC_NIRQ</name></expr>;</condition> <incr pos:start="68:46" pos:end="68:48"><expr pos:start="68:46" pos:end="68:48"><name pos:start="68:46" pos:end="68:46">n</name><operator pos:start="68:47" pos:end="68:48">++</operator></expr></incr>)</control> <block pos:start="68:51" pos:end="70:5">{<block_content pos:start="69:9" pos:end="69:58">
        <expr_stmt pos:start="69:9" pos:end="69:58"><expr pos:start="69:9" pos:end="69:57"><name pos:start="69:9" pos:end="69:30"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:15">irqs</name><operator pos:start="69:16" pos:end="69:16">.</operator><name pos:start="69:17" pos:end="69:27">ext_gic_irq</name><index pos:start="69:28" pos:end="69:30">[<expr pos:start="69:29" pos:end="69:29"><name pos:start="69:29" pos:end="69:29">n</name></expr>]</index></name> <operator pos:start="69:32" pos:end="69:32">=</operator> <call pos:start="69:34" pos:end="69:57"><name pos:start="69:34" pos:end="69:49">qdev_get_gpio_in</name><argument_list pos:start="69:50" pos:end="69:57">(<argument pos:start="69:51" pos:end="69:53"><expr pos:start="69:51" pos:end="69:53"><name pos:start="69:51" pos:end="69:53">dev</name></expr></argument>, <argument pos:start="69:56" pos:end="69:56"><expr pos:start="69:56" pos:end="69:56"><name pos:start="69:56" pos:end="69:56">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block" pos:start="71:5" pos:end="71:37">/* Internal Interrupt Combiner */</comment>
    <expr_stmt pos:start="72:5" pos:end="72:51"><expr pos:start="72:5" pos:end="72:50"><name pos:start="72:5" pos:end="72:7">dev</name> <operator pos:start="72:9" pos:end="72:9">=</operator> <call pos:start="72:11" pos:end="72:50"><name pos:start="72:11" pos:end="72:21">qdev_create</name><argument_list pos:start="72:22" pos:end="72:50">(<argument pos:start="72:23" pos:end="72:26"><expr pos:start="72:23" pos:end="72:26"><name pos:start="72:23" pos:end="72:26">NULL</name></expr></argument>, <argument pos:start="72:29" pos:end="72:49"><expr pos:start="72:29" pos:end="72:49"><literal type="string" pos:start="72:29" pos:end="72:49">"exynos4210.combiner"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="73:5" pos:end="73:26"><expr pos:start="73:5" pos:end="73:25"><call pos:start="73:5" pos:end="73:25"><name pos:start="73:5" pos:end="73:20">qdev_init_nofail</name><argument_list pos:start="73:21" pos:end="73:25">(<argument pos:start="73:22" pos:end="73:24"><expr pos:start="73:22" pos:end="73:24"><name pos:start="73:22" pos:end="73:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="74:5" pos:end="74:33"><expr pos:start="74:5" pos:end="74:32"><name pos:start="74:5" pos:end="74:10">busdev</name> <operator pos:start="74:12" pos:end="74:12">=</operator> <call pos:start="74:14" pos:end="74:32"><name pos:start="74:14" pos:end="74:27">SYS_BUS_DEVICE</name><argument_list pos:start="74:28" pos:end="74:32">(<argument pos:start="74:29" pos:end="74:31"><expr pos:start="74:29" pos:end="74:31"><name pos:start="74:29" pos:end="74:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="75:5" pos:end="77:5">for <control pos:start="75:9" pos:end="75:61">(<init pos:start="75:10" pos:end="75:15"><expr pos:start="75:10" pos:end="75:14"><name pos:start="75:10" pos:end="75:10">n</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <literal type="number" pos:start="75:14" pos:end="75:14">0</literal></expr>;</init> <condition pos:start="75:17" pos:end="75:56"><expr pos:start="75:17" pos:end="75:55"><name pos:start="75:17" pos:end="75:17">n</name> <operator pos:start="75:19" pos:end="75:19">&lt;</operator> <name pos:start="75:21" pos:end="75:55">EXYNOS4210_MAX_INT_COMBINER_OUT_IRQ</name></expr>;</condition> <incr pos:start="75:58" pos:end="75:60"><expr pos:start="75:58" pos:end="75:60"><name pos:start="75:58" pos:end="75:58">n</name><operator pos:start="75:59" pos:end="75:60">++</operator></expr></incr>)</control> <block pos:start="75:63" pos:end="77:5">{<block_content pos:start="76:9" pos:end="76:62">
        <expr_stmt pos:start="76:9" pos:end="76:62"><expr pos:start="76:9" pos:end="76:61"><call pos:start="76:9" pos:end="76:61"><name pos:start="76:9" pos:end="76:26">sysbus_connect_irq</name><argument_list pos:start="76:27" pos:end="76:61">(<argument pos:start="76:28" pos:end="76:33"><expr pos:start="76:28" pos:end="76:33"><name pos:start="76:28" pos:end="76:33">busdev</name></expr></argument>, <argument pos:start="76:36" pos:end="76:36"><expr pos:start="76:36" pos:end="76:36"><name pos:start="76:36" pos:end="76:36">n</name></expr></argument>, <argument pos:start="76:39" pos:end="76:60"><expr pos:start="76:39" pos:end="76:60"><name pos:start="76:39" pos:end="76:60"><name pos:start="76:39" pos:end="76:39">s</name><operator pos:start="76:40" pos:end="76:41">-&gt;</operator><name pos:start="76:42" pos:end="76:45">irqs</name><operator pos:start="76:46" pos:end="76:46">.</operator><name pos:start="76:47" pos:end="76:57">int_gic_irq</name><index pos:start="76:58" pos:end="76:60">[<expr pos:start="76:59" pos:end="76:59"><name pos:start="76:59" pos:end="76:59">n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="78:5" pos:end="78:53"><expr pos:start="78:5" pos:end="78:52"><call pos:start="78:5" pos:end="78:52"><name pos:start="78:5" pos:end="78:34">exynos4210_combiner_get_gpioin</name><argument_list pos:start="78:35" pos:end="78:52">(<argument pos:start="78:36" pos:end="78:43"><expr pos:start="78:36" pos:end="78:43"><operator pos:start="78:36" pos:end="78:36">&amp;</operator><name pos:start="78:37" pos:end="78:43"><name pos:start="78:37" pos:end="78:37">s</name><operator pos:start="78:38" pos:end="78:39">-&gt;</operator><name pos:start="78:40" pos:end="78:43">irqs</name></name></expr></argument>, <argument pos:start="78:46" pos:end="78:48"><expr pos:start="78:46" pos:end="78:48"><name pos:start="78:46" pos:end="78:48">dev</name></expr></argument>, <argument pos:start="78:51" pos:end="78:51"><expr pos:start="78:51" pos:end="78:51"><literal type="number" pos:start="78:51" pos:end="78:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="79:5" pos:end="79:66"><expr pos:start="79:5" pos:end="79:65"><call pos:start="79:5" pos:end="79:65"><name pos:start="79:5" pos:end="79:19">sysbus_mmio_map</name><argument_list pos:start="79:20" pos:end="79:65">(<argument pos:start="79:21" pos:end="79:26"><expr pos:start="79:21" pos:end="79:26"><name pos:start="79:21" pos:end="79:26">busdev</name></expr></argument>, <argument pos:start="79:29" pos:end="79:29"><expr pos:start="79:29" pos:end="79:29"><literal type="number" pos:start="79:29" pos:end="79:29">0</literal></expr></argument>, <argument pos:start="79:32" pos:end="79:64"><expr pos:start="79:32" pos:end="79:64"><name pos:start="79:32" pos:end="79:64">EXYNOS4210_INT_COMBINER_BASE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="80:5" pos:end="80:37">/* External Interrupt Combiner */</comment>
    <expr_stmt pos:start="81:5" pos:end="81:51"><expr pos:start="81:5" pos:end="81:50"><name pos:start="81:5" pos:end="81:7">dev</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <call pos:start="81:11" pos:end="81:50"><name pos:start="81:11" pos:end="81:21">qdev_create</name><argument_list pos:start="81:22" pos:end="81:50">(<argument pos:start="81:23" pos:end="81:26"><expr pos:start="81:23" pos:end="81:26"><name pos:start="81:23" pos:end="81:26">NULL</name></expr></argument>, <argument pos:start="81:29" pos:end="81:49"><expr pos:start="81:29" pos:end="81:49"><literal type="string" pos:start="81:29" pos:end="81:49">"exynos4210.combiner"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="82:5" pos:end="82:45"><expr pos:start="82:5" pos:end="82:44"><call pos:start="82:5" pos:end="82:44"><name pos:start="82:5" pos:end="82:24">qdev_prop_set_uint32</name><argument_list pos:start="82:25" pos:end="82:44">(<argument pos:start="82:26" pos:end="82:28"><expr pos:start="82:26" pos:end="82:28"><name pos:start="82:26" pos:end="82:28">dev</name></expr></argument>, <argument pos:start="82:31" pos:end="82:40"><expr pos:start="82:31" pos:end="82:40"><literal type="string" pos:start="82:31" pos:end="82:40">"external"</literal></expr></argument>, <argument pos:start="82:43" pos:end="82:43"><expr pos:start="82:43" pos:end="82:43"><literal type="number" pos:start="82:43" pos:end="82:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="83:5" pos:end="83:26"><expr pos:start="83:5" pos:end="83:25"><call pos:start="83:5" pos:end="83:25"><name pos:start="83:5" pos:end="83:20">qdev_init_nofail</name><argument_list pos:start="83:21" pos:end="83:25">(<argument pos:start="83:22" pos:end="83:24"><expr pos:start="83:22" pos:end="83:24"><name pos:start="83:22" pos:end="83:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="84:5" pos:end="84:33"><expr pos:start="84:5" pos:end="84:32"><name pos:start="84:5" pos:end="84:10">busdev</name> <operator pos:start="84:12" pos:end="84:12">=</operator> <call pos:start="84:14" pos:end="84:32"><name pos:start="84:14" pos:end="84:27">SYS_BUS_DEVICE</name><argument_list pos:start="84:28" pos:end="84:32">(<argument pos:start="84:29" pos:end="84:31"><expr pos:start="84:29" pos:end="84:31"><name pos:start="84:29" pos:end="84:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="85:5" pos:end="87:5">for <control pos:start="85:9" pos:end="85:61">(<init pos:start="85:10" pos:end="85:15"><expr pos:start="85:10" pos:end="85:14"><name pos:start="85:10" pos:end="85:10">n</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <literal type="number" pos:start="85:14" pos:end="85:14">0</literal></expr>;</init> <condition pos:start="85:17" pos:end="85:56"><expr pos:start="85:17" pos:end="85:55"><name pos:start="85:17" pos:end="85:17">n</name> <operator pos:start="85:19" pos:end="85:19">&lt;</operator> <name pos:start="85:21" pos:end="85:55">EXYNOS4210_MAX_INT_COMBINER_OUT_IRQ</name></expr>;</condition> <incr pos:start="85:58" pos:end="85:60"><expr pos:start="85:58" pos:end="85:60"><name pos:start="85:58" pos:end="85:58">n</name><operator pos:start="85:59" pos:end="85:60">++</operator></expr></incr>)</control> <block pos:start="85:63" pos:end="87:5">{<block_content pos:start="86:9" pos:end="86:62">
        <expr_stmt pos:start="86:9" pos:end="86:62"><expr pos:start="86:9" pos:end="86:61"><call pos:start="86:9" pos:end="86:61"><name pos:start="86:9" pos:end="86:26">sysbus_connect_irq</name><argument_list pos:start="86:27" pos:end="86:61">(<argument pos:start="86:28" pos:end="86:33"><expr pos:start="86:28" pos:end="86:33"><name pos:start="86:28" pos:end="86:33">busdev</name></expr></argument>, <argument pos:start="86:36" pos:end="86:36"><expr pos:start="86:36" pos:end="86:36"><name pos:start="86:36" pos:end="86:36">n</name></expr></argument>, <argument pos:start="86:39" pos:end="86:60"><expr pos:start="86:39" pos:end="86:60"><name pos:start="86:39" pos:end="86:60"><name pos:start="86:39" pos:end="86:39">s</name><operator pos:start="86:40" pos:end="86:41">-&gt;</operator><name pos:start="86:42" pos:end="86:45">irqs</name><operator pos:start="86:46" pos:end="86:46">.</operator><name pos:start="86:47" pos:end="86:57">ext_gic_irq</name><index pos:start="86:58" pos:end="86:60">[<expr pos:start="86:59" pos:end="86:59"><name pos:start="86:59" pos:end="86:59">n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="88:5" pos:end="88:53"><expr pos:start="88:5" pos:end="88:52"><call pos:start="88:5" pos:end="88:52"><name pos:start="88:5" pos:end="88:34">exynos4210_combiner_get_gpioin</name><argument_list pos:start="88:35" pos:end="88:52">(<argument pos:start="88:36" pos:end="88:43"><expr pos:start="88:36" pos:end="88:43"><operator pos:start="88:36" pos:end="88:36">&amp;</operator><name pos:start="88:37" pos:end="88:43"><name pos:start="88:37" pos:end="88:37">s</name><operator pos:start="88:38" pos:end="88:39">-&gt;</operator><name pos:start="88:40" pos:end="88:43">irqs</name></name></expr></argument>, <argument pos:start="88:46" pos:end="88:48"><expr pos:start="88:46" pos:end="88:48"><name pos:start="88:46" pos:end="88:48">dev</name></expr></argument>, <argument pos:start="88:51" pos:end="88:51"><expr pos:start="88:51" pos:end="88:51"><literal type="number" pos:start="88:51" pos:end="88:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="89:5" pos:end="89:66"><expr pos:start="89:5" pos:end="89:65"><call pos:start="89:5" pos:end="89:65"><name pos:start="89:5" pos:end="89:19">sysbus_mmio_map</name><argument_list pos:start="89:20" pos:end="89:65">(<argument pos:start="89:21" pos:end="89:26"><expr pos:start="89:21" pos:end="89:26"><name pos:start="89:21" pos:end="89:26">busdev</name></expr></argument>, <argument pos:start="89:29" pos:end="89:29"><expr pos:start="89:29" pos:end="89:29"><literal type="number" pos:start="89:29" pos:end="89:29">0</literal></expr></argument>, <argument pos:start="89:32" pos:end="89:64"><expr pos:start="89:32" pos:end="89:64"><name pos:start="89:32" pos:end="89:64">EXYNOS4210_EXT_COMBINER_BASE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="90:5" pos:end="90:32">/* Initialize board IRQs. */</comment>
    <expr_stmt pos:start="91:5" pos:end="91:41"><expr pos:start="91:5" pos:end="91:40"><call pos:start="91:5" pos:end="91:40"><name pos:start="91:5" pos:end="91:30">exynos4210_init_board_irqs</name><argument_list pos:start="91:31" pos:end="91:40">(<argument pos:start="91:32" pos:end="91:39"><expr pos:start="91:32" pos:end="91:39"><operator pos:start="91:32" pos:end="91:32">&amp;</operator><name pos:start="91:33" pos:end="91:39"><name pos:start="91:33" pos:end="91:33">s</name><operator pos:start="91:34" pos:end="91:35">-&gt;</operator><name pos:start="91:36" pos:end="91:39">irqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" format="doxygen" pos:start="92:5" pos:end="92:20">/*** Memory ***/</comment>
    <comment type="block" pos:start="93:5" pos:end="93:25">/* Chip-ID and OMR */</comment>
    <expr_stmt pos:start="94:5" pos:end="95:59"><expr pos:start="94:5" pos:end="95:58"><call pos:start="94:5" pos:end="95:58"><name pos:start="94:5" pos:end="94:25">memory_region_init_io</name><argument_list pos:start="94:26" pos:end="95:58">(<argument pos:start="94:27" pos:end="94:40"><expr pos:start="94:27" pos:end="94:40"><operator pos:start="94:27" pos:end="94:27">&amp;</operator><name pos:start="94:28" pos:end="94:40"><name pos:start="94:28" pos:end="94:28">s</name><operator pos:start="94:29" pos:end="94:30">-&gt;</operator><name pos:start="94:31" pos:end="94:40">chipid_mem</name></name></expr></argument>, <argument pos:start="94:43" pos:end="94:46"><expr pos:start="94:43" pos:end="94:46"><name pos:start="94:43" pos:end="94:46">NULL</name></expr></argument>, <argument pos:start="94:49" pos:end="94:78"><expr pos:start="94:49" pos:end="94:78"><operator pos:start="94:49" pos:end="94:49">&amp;</operator><name pos:start="94:50" pos:end="94:78">exynos4210_chipid_and_omr_ops</name></expr></argument>,
        <argument pos:start="95:9" pos:end="95:12"><expr pos:start="95:9" pos:end="95:12"><name pos:start="95:9" pos:end="95:12">NULL</name></expr></argument>, <argument pos:start="95:15" pos:end="95:33"><expr pos:start="95:15" pos:end="95:33"><literal type="string" pos:start="95:15" pos:end="95:33">"exynos4210.chipid"</literal></expr></argument>, <argument pos:start="95:36" pos:end="95:57"><expr pos:start="95:36" pos:end="95:57"><sizeof pos:start="95:36" pos:end="95:57">sizeof<argument_list pos:start="95:42" pos:end="95:57">(<argument pos:start="95:43" pos:end="95:56"><expr pos:start="95:43" pos:end="95:56"><name pos:start="95:43" pos:end="95:56">chipid_and_omr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="96:5" pos:end="97:48"><expr pos:start="96:5" pos:end="97:47"><call pos:start="96:5" pos:end="97:47"><name pos:start="96:5" pos:end="96:31">memory_region_add_subregion</name><argument_list pos:start="96:32" pos:end="97:47">(<argument pos:start="96:33" pos:end="96:42"><expr pos:start="96:33" pos:end="96:42"><name pos:start="96:33" pos:end="96:42">system_mem</name></expr></argument>, <argument pos:start="96:45" pos:end="96:66"><expr pos:start="96:45" pos:end="96:66"><name pos:start="96:45" pos:end="96:66">EXYNOS4210_CHIPID_ADDR</name></expr></argument>,
                                <argument pos:start="97:33" pos:end="97:46"><expr pos:start="97:33" pos:end="97:46"><operator pos:start="97:33" pos:end="97:33">&amp;</operator><name pos:start="97:34" pos:end="97:46"><name pos:start="97:34" pos:end="97:34">s</name><operator pos:start="97:35" pos:end="97:36">-&gt;</operator><name pos:start="97:37" pos:end="97:46">chipid_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="98:5" pos:end="98:22">/* Internal ROM */</comment>
    <expr_stmt pos:start="99:5" pos:end="100:63"><expr pos:start="99:5" pos:end="100:62"><call pos:start="99:5" pos:end="100:62"><name pos:start="99:5" pos:end="99:26">memory_region_init_ram</name><argument_list pos:start="99:27" pos:end="100:62">(<argument pos:start="99:28" pos:end="99:39"><expr pos:start="99:28" pos:end="99:39"><operator pos:start="99:28" pos:end="99:28">&amp;</operator><name pos:start="99:29" pos:end="99:39"><name pos:start="99:29" pos:end="99:29">s</name><operator pos:start="99:30" pos:end="99:31">-&gt;</operator><name pos:start="99:32" pos:end="99:39">irom_mem</name></name></expr></argument>, <argument pos:start="99:42" pos:end="99:45"><expr pos:start="99:42" pos:end="99:45"><name pos:start="99:42" pos:end="99:45">NULL</name></expr></argument>, <argument pos:start="99:48" pos:end="99:64"><expr pos:start="99:48" pos:end="99:64"><literal type="string" pos:start="99:48" pos:end="99:64">"exynos4210.irom"</literal></expr></argument>,
                           <argument pos:start="100:28" pos:end="100:47"><expr pos:start="100:28" pos:end="100:47"><name pos:start="100:28" pos:end="100:47">EXYNOS4210_IROM_SIZE</name></expr></argument>, <argument pos:start="100:50" pos:end="100:61"><expr pos:start="100:50" pos:end="100:61"><operator pos:start="100:50" pos:end="100:50">&amp;</operator><name pos:start="100:51" pos:end="100:61">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="101:5" pos:end="101:46"><expr pos:start="101:5" pos:end="101:45"><call pos:start="101:5" pos:end="101:45"><name pos:start="101:5" pos:end="101:31">vmstate_register_ram_global</name><argument_list pos:start="101:32" pos:end="101:45">(<argument pos:start="101:33" pos:end="101:44"><expr pos:start="101:33" pos:end="101:44"><operator pos:start="101:33" pos:end="101:33">&amp;</operator><name pos:start="101:34" pos:end="101:44"><name pos:start="101:34" pos:end="101:34">s</name><operator pos:start="101:35" pos:end="101:36">-&gt;</operator><name pos:start="101:37" pos:end="101:44">irom_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="102:5" pos:end="102:51"><expr pos:start="102:5" pos:end="102:50"><call pos:start="102:5" pos:end="102:50"><name pos:start="102:5" pos:end="102:30">memory_region_set_readonly</name><argument_list pos:start="102:31" pos:end="102:50">(<argument pos:start="102:32" pos:end="102:43"><expr pos:start="102:32" pos:end="102:43"><operator pos:start="102:32" pos:end="102:32">&amp;</operator><name pos:start="102:33" pos:end="102:43"><name pos:start="102:33" pos:end="102:33">s</name><operator pos:start="102:34" pos:end="102:35">-&gt;</operator><name pos:start="102:36" pos:end="102:43">irom_mem</name></name></expr></argument>, <argument pos:start="102:46" pos:end="102:49"><expr pos:start="102:46" pos:end="102:49"><name pos:start="102:46" pos:end="102:49">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="103:5" pos:end="104:46"><expr pos:start="103:5" pos:end="104:45"><call pos:start="103:5" pos:end="104:45"><name pos:start="103:5" pos:end="103:31">memory_region_add_subregion</name><argument_list pos:start="103:32" pos:end="104:45">(<argument pos:start="103:33" pos:end="103:42"><expr pos:start="103:33" pos:end="103:42"><name pos:start="103:33" pos:end="103:42">system_mem</name></expr></argument>, <argument pos:start="103:45" pos:end="103:69"><expr pos:start="103:45" pos:end="103:69"><name pos:start="103:45" pos:end="103:69">EXYNOS4210_IROM_BASE_ADDR</name></expr></argument>,
                                <argument pos:start="104:33" pos:end="104:44"><expr pos:start="104:33" pos:end="104:44"><operator pos:start="104:33" pos:end="104:33">&amp;</operator><name pos:start="104:34" pos:end="104:44"><name pos:start="104:34" pos:end="104:34">s</name><operator pos:start="104:35" pos:end="104:36">-&gt;</operator><name pos:start="104:37" pos:end="104:44">irom_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="105:5" pos:end="105:24">/* mirror of iROM */</comment>
    <expr_stmt pos:start="106:5" pos:end="109:51"><expr pos:start="106:5" pos:end="109:50"><call pos:start="106:5" pos:end="109:50"><name pos:start="106:5" pos:end="106:28">memory_region_init_alias</name><argument_list pos:start="106:29" pos:end="109:50">(<argument pos:start="106:30" pos:end="106:47"><expr pos:start="106:30" pos:end="106:47"><operator pos:start="106:30" pos:end="106:30">&amp;</operator><name pos:start="106:31" pos:end="106:47"><name pos:start="106:31" pos:end="106:31">s</name><operator pos:start="106:32" pos:end="106:33">-&gt;</operator><name pos:start="106:34" pos:end="106:47">irom_alias_mem</name></name></expr></argument>, <argument pos:start="106:50" pos:end="106:53"><expr pos:start="106:50" pos:end="106:53"><name pos:start="106:50" pos:end="106:53">NULL</name></expr></argument>, <argument pos:start="106:56" pos:end="106:78"><expr pos:start="106:56" pos:end="106:78"><literal type="string" pos:start="106:56" pos:end="106:78">"exynos4210.irom_alias"</literal></expr></argument>,
                             <argument pos:start="107:30" pos:end="107:41"><expr pos:start="107:30" pos:end="107:41"><operator pos:start="107:30" pos:end="107:30">&amp;</operator><name pos:start="107:31" pos:end="107:41"><name pos:start="107:31" pos:end="107:31">s</name><operator pos:start="107:32" pos:end="107:33">-&gt;</operator><name pos:start="107:34" pos:end="107:41">irom_mem</name></name></expr></argument>,
                             <argument pos:start="108:30" pos:end="108:30"><expr pos:start="108:30" pos:end="108:30"><literal type="number" pos:start="108:30" pos:end="108:30">0</literal></expr></argument>,
                             <argument pos:start="109:30" pos:end="109:49"><expr pos:start="109:30" pos:end="109:49"><name pos:start="109:30" pos:end="109:49">EXYNOS4210_IROM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="110:5" pos:end="110:57"><expr pos:start="110:5" pos:end="110:56"><call pos:start="110:5" pos:end="110:56"><name pos:start="110:5" pos:end="110:30">memory_region_set_readonly</name><argument_list pos:start="110:31" pos:end="110:56">(<argument pos:start="110:32" pos:end="110:49"><expr pos:start="110:32" pos:end="110:49"><operator pos:start="110:32" pos:end="110:32">&amp;</operator><name pos:start="110:33" pos:end="110:49"><name pos:start="110:33" pos:end="110:33">s</name><operator pos:start="110:34" pos:end="110:35">-&gt;</operator><name pos:start="110:36" pos:end="110:49">irom_alias_mem</name></name></expr></argument>, <argument pos:start="110:52" pos:end="110:55"><expr pos:start="110:52" pos:end="110:55"><name pos:start="110:52" pos:end="110:55">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="111:5" pos:end="112:52"><expr pos:start="111:5" pos:end="112:51"><call pos:start="111:5" pos:end="112:51"><name pos:start="111:5" pos:end="111:31">memory_region_add_subregion</name><argument_list pos:start="111:32" pos:end="112:51">(<argument pos:start="111:33" pos:end="111:42"><expr pos:start="111:33" pos:end="111:42"><name pos:start="111:33" pos:end="111:42">system_mem</name></expr></argument>, <argument pos:start="111:45" pos:end="111:76"><expr pos:start="111:45" pos:end="111:76"><name pos:start="111:45" pos:end="111:76">EXYNOS4210_IROM_MIRROR_BASE_ADDR</name></expr></argument>,
                                <argument pos:start="112:33" pos:end="112:50"><expr pos:start="112:33" pos:end="112:50"><operator pos:start="112:33" pos:end="112:33">&amp;</operator><name pos:start="112:34" pos:end="112:50"><name pos:start="112:34" pos:end="112:34">s</name><operator pos:start="112:35" pos:end="112:36">-&gt;</operator><name pos:start="112:37" pos:end="112:50">irom_alias_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="113:5" pos:end="113:22">/* Internal RAM */</comment>
    <expr_stmt pos:start="114:5" pos:end="115:63"><expr pos:start="114:5" pos:end="115:62"><call pos:start="114:5" pos:end="115:62"><name pos:start="114:5" pos:end="114:26">memory_region_init_ram</name><argument_list pos:start="114:27" pos:end="115:62">(<argument pos:start="114:28" pos:end="114:39"><expr pos:start="114:28" pos:end="114:39"><operator pos:start="114:28" pos:end="114:28">&amp;</operator><name pos:start="114:29" pos:end="114:39"><name pos:start="114:29" pos:end="114:29">s</name><operator pos:start="114:30" pos:end="114:31">-&gt;</operator><name pos:start="114:32" pos:end="114:39">iram_mem</name></name></expr></argument>, <argument pos:start="114:42" pos:end="114:45"><expr pos:start="114:42" pos:end="114:45"><name pos:start="114:42" pos:end="114:45">NULL</name></expr></argument>, <argument pos:start="114:48" pos:end="114:64"><expr pos:start="114:48" pos:end="114:64"><literal type="string" pos:start="114:48" pos:end="114:64">"exynos4210.iram"</literal></expr></argument>,
                           <argument pos:start="115:28" pos:end="115:47"><expr pos:start="115:28" pos:end="115:47"><name pos:start="115:28" pos:end="115:47">EXYNOS4210_IRAM_SIZE</name></expr></argument>, <argument pos:start="115:50" pos:end="115:61"><expr pos:start="115:50" pos:end="115:61"><operator pos:start="115:50" pos:end="115:50">&amp;</operator><name pos:start="115:51" pos:end="115:61">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="116:5" pos:end="116:46"><expr pos:start="116:5" pos:end="116:45"><call pos:start="116:5" pos:end="116:45"><name pos:start="116:5" pos:end="116:31">vmstate_register_ram_global</name><argument_list pos:start="116:32" pos:end="116:45">(<argument pos:start="116:33" pos:end="116:44"><expr pos:start="116:33" pos:end="116:44"><operator pos:start="116:33" pos:end="116:33">&amp;</operator><name pos:start="116:34" pos:end="116:44"><name pos:start="116:34" pos:end="116:34">s</name><operator pos:start="116:35" pos:end="116:36">-&gt;</operator><name pos:start="116:37" pos:end="116:44">iram_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="117:5" pos:end="118:46"><expr pos:start="117:5" pos:end="118:45"><call pos:start="117:5" pos:end="118:45"><name pos:start="117:5" pos:end="117:31">memory_region_add_subregion</name><argument_list pos:start="117:32" pos:end="118:45">(<argument pos:start="117:33" pos:end="117:42"><expr pos:start="117:33" pos:end="117:42"><name pos:start="117:33" pos:end="117:42">system_mem</name></expr></argument>, <argument pos:start="117:45" pos:end="117:69"><expr pos:start="117:45" pos:end="117:69"><name pos:start="117:45" pos:end="117:69">EXYNOS4210_IRAM_BASE_ADDR</name></expr></argument>,
                                <argument pos:start="118:33" pos:end="118:44"><expr pos:start="118:33" pos:end="118:44"><operator pos:start="118:33" pos:end="118:33">&amp;</operator><name pos:start="118:34" pos:end="118:44"><name pos:start="118:34" pos:end="118:34">s</name><operator pos:start="118:35" pos:end="118:36">-&gt;</operator><name pos:start="118:37" pos:end="118:44">iram_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="119:5" pos:end="119:14">/* DRAM */</comment>
    <expr_stmt pos:start="120:5" pos:end="120:24"><expr pos:start="120:5" pos:end="120:23"><name pos:start="120:5" pos:end="120:12">mem_size</name> <operator pos:start="120:14" pos:end="120:14">=</operator> <name pos:start="120:16" pos:end="120:23">ram_size</name></expr>;</expr_stmt>
    <if_stmt pos:start="121:5" pos:end="128:5"><if pos:start="121:5" pos:end="128:5">if <condition pos:start="121:8" pos:end="121:44">(<expr pos:start="121:9" pos:end="121:43"><name pos:start="121:9" pos:end="121:16">mem_size</name> <operator pos:start="121:18" pos:end="121:18">&gt;</operator> <name pos:start="121:20" pos:end="121:43">EXYNOS4210_DRAM_MAX_SIZE</name></expr>)</condition> <block pos:start="121:46" pos:end="128:5">{<block_content pos:start="122:9" pos:end="127:44">
        <expr_stmt pos:start="122:9" pos:end="123:67"><expr pos:start="122:9" pos:end="123:66"><call pos:start="122:9" pos:end="123:66"><name pos:start="122:9" pos:end="122:30">memory_region_init_ram</name><argument_list pos:start="122:31" pos:end="123:66">(<argument pos:start="122:32" pos:end="122:44"><expr pos:start="122:32" pos:end="122:44"><operator pos:start="122:32" pos:end="122:32">&amp;</operator><name pos:start="122:33" pos:end="122:44"><name pos:start="122:33" pos:end="122:33">s</name><operator pos:start="122:34" pos:end="122:35">-&gt;</operator><name pos:start="122:36" pos:end="122:44">dram1_mem</name></name></expr></argument>, <argument pos:start="122:47" pos:end="122:50"><expr pos:start="122:47" pos:end="122:50"><name pos:start="122:47" pos:end="122:50">NULL</name></expr></argument>, <argument pos:start="122:53" pos:end="122:70"><expr pos:start="122:53" pos:end="122:70"><literal type="string" pos:start="122:53" pos:end="122:70">"exynos4210.dram1"</literal></expr></argument>,
                <argument pos:start="123:17" pos:end="123:51"><expr pos:start="123:17" pos:end="123:51"><name pos:start="123:17" pos:end="123:24">mem_size</name> <operator pos:start="123:26" pos:end="123:26">-</operator> <name pos:start="123:28" pos:end="123:51">EXYNOS4210_DRAM_MAX_SIZE</name></expr></argument>, <argument pos:start="123:54" pos:end="123:65"><expr pos:start="123:54" pos:end="123:65"><operator pos:start="123:54" pos:end="123:54">&amp;</operator><name pos:start="123:55" pos:end="123:65">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="124:9" pos:end="124:51"><expr pos:start="124:9" pos:end="124:50"><call pos:start="124:9" pos:end="124:50"><name pos:start="124:9" pos:end="124:35">vmstate_register_ram_global</name><argument_list pos:start="124:36" pos:end="124:50">(<argument pos:start="124:37" pos:end="124:49"><expr pos:start="124:37" pos:end="124:49"><operator pos:start="124:37" pos:end="124:37">&amp;</operator><name pos:start="124:38" pos:end="124:49"><name pos:start="124:38" pos:end="124:38">s</name><operator pos:start="124:39" pos:end="124:40">-&gt;</operator><name pos:start="124:41" pos:end="124:49">dram1_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="125:9" pos:end="126:31"><expr pos:start="125:9" pos:end="126:30"><call pos:start="125:9" pos:end="126:30"><name pos:start="125:9" pos:end="125:35">memory_region_add_subregion</name><argument_list pos:start="125:36" pos:end="126:30">(<argument pos:start="125:37" pos:end="125:46"><expr pos:start="125:37" pos:end="125:46"><name pos:start="125:37" pos:end="125:46">system_mem</name></expr></argument>, <argument pos:start="125:49" pos:end="125:74"><expr pos:start="125:49" pos:end="125:74"><name pos:start="125:49" pos:end="125:74">EXYNOS4210_DRAM1_BASE_ADDR</name></expr></argument>,
                <argument pos:start="126:17" pos:end="126:29"><expr pos:start="126:17" pos:end="126:29"><operator pos:start="126:17" pos:end="126:17">&amp;</operator><name pos:start="126:18" pos:end="126:29"><name pos:start="126:18" pos:end="126:18">s</name><operator pos:start="126:19" pos:end="126:20">-&gt;</operator><name pos:start="126:21" pos:end="126:29">dram1_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="127:9" pos:end="127:44"><expr pos:start="127:9" pos:end="127:43"><name pos:start="127:9" pos:end="127:16">mem_size</name> <operator pos:start="127:18" pos:end="127:18">=</operator> <name pos:start="127:20" pos:end="127:43">EXYNOS4210_DRAM_MAX_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="129:5" pos:end="130:41"><expr pos:start="129:5" pos:end="130:40"><call pos:start="129:5" pos:end="130:40"><name pos:start="129:5" pos:end="129:26">memory_region_init_ram</name><argument_list pos:start="129:27" pos:end="130:40">(<argument pos:start="129:28" pos:end="129:40"><expr pos:start="129:28" pos:end="129:40"><operator pos:start="129:28" pos:end="129:28">&amp;</operator><name pos:start="129:29" pos:end="129:40"><name pos:start="129:29" pos:end="129:29">s</name><operator pos:start="129:30" pos:end="129:31">-&gt;</operator><name pos:start="129:32" pos:end="129:40">dram0_mem</name></name></expr></argument>, <argument pos:start="129:43" pos:end="129:46"><expr pos:start="129:43" pos:end="129:46"><name pos:start="129:43" pos:end="129:46">NULL</name></expr></argument>, <argument pos:start="129:49" pos:end="129:66"><expr pos:start="129:49" pos:end="129:66"><literal type="string" pos:start="129:49" pos:end="129:66">"exynos4210.dram0"</literal></expr></argument>, <argument pos:start="129:69" pos:end="129:76"><expr pos:start="129:69" pos:end="129:76"><name pos:start="129:69" pos:end="129:76">mem_size</name></expr></argument>,
                           <argument pos:start="130:28" pos:end="130:39"><expr pos:start="130:28" pos:end="130:39"><operator pos:start="130:28" pos:end="130:28">&amp;</operator><name pos:start="130:29" pos:end="130:39">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="131:5" pos:end="131:47"><expr pos:start="131:5" pos:end="131:46"><call pos:start="131:5" pos:end="131:46"><name pos:start="131:5" pos:end="131:31">vmstate_register_ram_global</name><argument_list pos:start="131:32" pos:end="131:46">(<argument pos:start="131:33" pos:end="131:45"><expr pos:start="131:33" pos:end="131:45"><operator pos:start="131:33" pos:end="131:33">&amp;</operator><name pos:start="131:34" pos:end="131:45"><name pos:start="131:34" pos:end="131:34">s</name><operator pos:start="131:35" pos:end="131:36">-&gt;</operator><name pos:start="131:37" pos:end="131:45">dram0_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="132:5" pos:end="133:27"><expr pos:start="132:5" pos:end="133:26"><call pos:start="132:5" pos:end="133:26"><name pos:start="132:5" pos:end="132:31">memory_region_add_subregion</name><argument_list pos:start="132:32" pos:end="133:26">(<argument pos:start="132:33" pos:end="132:42"><expr pos:start="132:33" pos:end="132:42"><name pos:start="132:33" pos:end="132:42">system_mem</name></expr></argument>, <argument pos:start="132:45" pos:end="132:70"><expr pos:start="132:45" pos:end="132:70"><name pos:start="132:45" pos:end="132:70">EXYNOS4210_DRAM0_BASE_ADDR</name></expr></argument>,
            <argument pos:start="133:13" pos:end="133:25"><expr pos:start="133:13" pos:end="133:25"><operator pos:start="133:13" pos:end="133:13">&amp;</operator><name pos:start="133:14" pos:end="133:25"><name pos:start="133:14" pos:end="133:14">s</name><operator pos:start="133:15" pos:end="133:16">-&gt;</operator><name pos:start="133:17" pos:end="133:25">dram0_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <comment type="block" pos:start="134:4" pos:end="137:6">/* PMU.
    * The only reason of existence at the moment is that secondary CPU boot
    * loader uses PMU INFORM5 register as a holding pen.
    */</comment>
    <expr_stmt pos:start="138:5" pos:end="138:75"><expr pos:start="138:5" pos:end="138:74"><call pos:start="138:5" pos:end="138:74"><name pos:start="138:5" pos:end="138:24">sysbus_create_simple</name><argument_list pos:start="138:25" pos:end="138:74">(<argument pos:start="138:26" pos:end="138:41"><expr pos:start="138:26" pos:end="138:41"><literal type="string" pos:start="138:26" pos:end="138:41">"exynos4210.pmu"</literal></expr></argument>, <argument pos:start="138:44" pos:end="138:67"><expr pos:start="138:44" pos:end="138:67"><name pos:start="138:44" pos:end="138:67">EXYNOS4210_PMU_BASE_ADDR</name></expr></argument>, <argument pos:start="138:70" pos:end="138:73"><expr pos:start="138:70" pos:end="138:73"><name pos:start="138:70" pos:end="138:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="139:5" pos:end="139:13">/* PWM */</comment>
    <expr_stmt pos:start="140:5" pos:end="146:32"><expr pos:start="140:5" pos:end="146:31"><call pos:start="140:5" pos:end="146:31"><name pos:start="140:5" pos:end="140:25">sysbus_create_varargs</name><argument_list pos:start="140:26" pos:end="146:31">(<argument pos:start="140:27" pos:end="140:42"><expr pos:start="140:27" pos:end="140:42"><literal type="string" pos:start="140:27" pos:end="140:42">"exynos4210.pwm"</literal></expr></argument>, <argument pos:start="140:45" pos:end="140:68"><expr pos:start="140:45" pos:end="140:68"><name pos:start="140:45" pos:end="140:68">EXYNOS4210_PWM_BASE_ADDR</name></expr></argument>,
                          <argument pos:start="141:27" pos:end="141:65"><expr pos:start="141:27" pos:end="141:65"><name pos:start="141:27" pos:end="141:65"><name pos:start="141:27" pos:end="141:27">s</name><operator pos:start="141:28" pos:end="141:29">-&gt;</operator><name pos:start="141:30" pos:end="141:38">irq_table</name><index pos:start="141:39" pos:end="141:65">[<expr pos:start="141:40" pos:end="141:64"><call pos:start="141:40" pos:end="141:64"><name pos:start="141:40" pos:end="141:57">exynos4210_get_irq</name><argument_list pos:start="141:58" pos:end="141:64">(<argument pos:start="141:59" pos:end="141:60"><expr pos:start="141:59" pos:end="141:60"><literal type="number" pos:start="141:59" pos:end="141:60">22</literal></expr></argument>, <argument pos:start="141:63" pos:end="141:63"><expr pos:start="141:63" pos:end="141:63"><literal type="number" pos:start="141:63" pos:end="141:63">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,
                          <argument pos:start="142:27" pos:end="142:65"><expr pos:start="142:27" pos:end="142:65"><name pos:start="142:27" pos:end="142:65"><name pos:start="142:27" pos:end="142:27">s</name><operator pos:start="142:28" pos:end="142:29">-&gt;</operator><name pos:start="142:30" pos:end="142:38">irq_table</name><index pos:start="142:39" pos:end="142:65">[<expr pos:start="142:40" pos:end="142:64"><call pos:start="142:40" pos:end="142:64"><name pos:start="142:40" pos:end="142:57">exynos4210_get_irq</name><argument_list pos:start="142:58" pos:end="142:64">(<argument pos:start="142:59" pos:end="142:60"><expr pos:start="142:59" pos:end="142:60"><literal type="number" pos:start="142:59" pos:end="142:60">22</literal></expr></argument>, <argument pos:start="142:63" pos:end="142:63"><expr pos:start="142:63" pos:end="142:63"><literal type="number" pos:start="142:63" pos:end="142:63">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,
                          <argument pos:start="143:27" pos:end="143:65"><expr pos:start="143:27" pos:end="143:65"><name pos:start="143:27" pos:end="143:65"><name pos:start="143:27" pos:end="143:27">s</name><operator pos:start="143:28" pos:end="143:29">-&gt;</operator><name pos:start="143:30" pos:end="143:38">irq_table</name><index pos:start="143:39" pos:end="143:65">[<expr pos:start="143:40" pos:end="143:64"><call pos:start="143:40" pos:end="143:64"><name pos:start="143:40" pos:end="143:57">exynos4210_get_irq</name><argument_list pos:start="143:58" pos:end="143:64">(<argument pos:start="143:59" pos:end="143:60"><expr pos:start="143:59" pos:end="143:60"><literal type="number" pos:start="143:59" pos:end="143:60">22</literal></expr></argument>, <argument pos:start="143:63" pos:end="143:63"><expr pos:start="143:63" pos:end="143:63"><literal type="number" pos:start="143:63" pos:end="143:63">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,
                          <argument pos:start="144:27" pos:end="144:65"><expr pos:start="144:27" pos:end="144:65"><name pos:start="144:27" pos:end="144:65"><name pos:start="144:27" pos:end="144:27">s</name><operator pos:start="144:28" pos:end="144:29">-&gt;</operator><name pos:start="144:30" pos:end="144:38">irq_table</name><index pos:start="144:39" pos:end="144:65">[<expr pos:start="144:40" pos:end="144:64"><call pos:start="144:40" pos:end="144:64"><name pos:start="144:40" pos:end="144:57">exynos4210_get_irq</name><argument_list pos:start="144:58" pos:end="144:64">(<argument pos:start="144:59" pos:end="144:60"><expr pos:start="144:59" pos:end="144:60"><literal type="number" pos:start="144:59" pos:end="144:60">22</literal></expr></argument>, <argument pos:start="144:63" pos:end="144:63"><expr pos:start="144:63" pos:end="144:63"><literal type="number" pos:start="144:63" pos:end="144:63">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,
                          <argument pos:start="145:27" pos:end="145:65"><expr pos:start="145:27" pos:end="145:65"><name pos:start="145:27" pos:end="145:65"><name pos:start="145:27" pos:end="145:27">s</name><operator pos:start="145:28" pos:end="145:29">-&gt;</operator><name pos:start="145:30" pos:end="145:38">irq_table</name><index pos:start="145:39" pos:end="145:65">[<expr pos:start="145:40" pos:end="145:64"><call pos:start="145:40" pos:end="145:64"><name pos:start="145:40" pos:end="145:57">exynos4210_get_irq</name><argument_list pos:start="145:58" pos:end="145:64">(<argument pos:start="145:59" pos:end="145:60"><expr pos:start="145:59" pos:end="145:60"><literal type="number" pos:start="145:59" pos:end="145:60">22</literal></expr></argument>, <argument pos:start="145:63" pos:end="145:63"><expr pos:start="145:63" pos:end="145:63"><literal type="number" pos:start="145:63" pos:end="145:63">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,
                          <argument pos:start="146:27" pos:end="146:30"><expr pos:start="146:27" pos:end="146:30"><name pos:start="146:27" pos:end="146:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="147:5" pos:end="147:13">/* RTC */</comment>
    <expr_stmt pos:start="148:5" pos:end="151:32"><expr pos:start="148:5" pos:end="151:31"><call pos:start="148:5" pos:end="151:31"><name pos:start="148:5" pos:end="148:25">sysbus_create_varargs</name><argument_list pos:start="148:26" pos:end="151:31">(<argument pos:start="148:27" pos:end="148:42"><expr pos:start="148:27" pos:end="148:42"><literal type="string" pos:start="148:27" pos:end="148:42">"exynos4210.rtc"</literal></expr></argument>, <argument pos:start="148:45" pos:end="148:68"><expr pos:start="148:45" pos:end="148:68"><name pos:start="148:45" pos:end="148:68">EXYNOS4210_RTC_BASE_ADDR</name></expr></argument>,
                          <argument pos:start="149:27" pos:end="149:65"><expr pos:start="149:27" pos:end="149:65"><name pos:start="149:27" pos:end="149:65"><name pos:start="149:27" pos:end="149:27">s</name><operator pos:start="149:28" pos:end="149:29">-&gt;</operator><name pos:start="149:30" pos:end="149:38">irq_table</name><index pos:start="149:39" pos:end="149:65">[<expr pos:start="149:40" pos:end="149:64"><call pos:start="149:40" pos:end="149:64"><name pos:start="149:40" pos:end="149:57">exynos4210_get_irq</name><argument_list pos:start="149:58" pos:end="149:64">(<argument pos:start="149:59" pos:end="149:60"><expr pos:start="149:59" pos:end="149:60"><literal type="number" pos:start="149:59" pos:end="149:60">23</literal></expr></argument>, <argument pos:start="149:63" pos:end="149:63"><expr pos:start="149:63" pos:end="149:63"><literal type="number" pos:start="149:63" pos:end="149:63">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,
                          <argument pos:start="150:27" pos:end="150:65"><expr pos:start="150:27" pos:end="150:65"><name pos:start="150:27" pos:end="150:65"><name pos:start="150:27" pos:end="150:27">s</name><operator pos:start="150:28" pos:end="150:29">-&gt;</operator><name pos:start="150:30" pos:end="150:38">irq_table</name><index pos:start="150:39" pos:end="150:65">[<expr pos:start="150:40" pos:end="150:64"><call pos:start="150:40" pos:end="150:64"><name pos:start="150:40" pos:end="150:57">exynos4210_get_irq</name><argument_list pos:start="150:58" pos:end="150:64">(<argument pos:start="150:59" pos:end="150:60"><expr pos:start="150:59" pos:end="150:60"><literal type="number" pos:start="150:59" pos:end="150:60">23</literal></expr></argument>, <argument pos:start="150:63" pos:end="150:63"><expr pos:start="150:63" pos:end="150:63"><literal type="number" pos:start="150:63" pos:end="150:63">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,
                          <argument pos:start="151:27" pos:end="151:30"><expr pos:start="151:27" pos:end="151:30"><name pos:start="151:27" pos:end="151:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="152:5" pos:end="152:26">/* Multi Core Timer */</comment>
    <expr_stmt pos:start="153:5" pos:end="153:46"><expr pos:start="153:5" pos:end="153:45"><name pos:start="153:5" pos:end="153:7">dev</name> <operator pos:start="153:9" pos:end="153:9">=</operator> <call pos:start="153:11" pos:end="153:45"><name pos:start="153:11" pos:end="153:21">qdev_create</name><argument_list pos:start="153:22" pos:end="153:45">(<argument pos:start="153:23" pos:end="153:26"><expr pos:start="153:23" pos:end="153:26"><name pos:start="153:23" pos:end="153:26">NULL</name></expr></argument>, <argument pos:start="153:29" pos:end="153:44"><expr pos:start="153:29" pos:end="153:44"><literal type="string" pos:start="153:29" pos:end="153:44">"exynos4210.mct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="154:5" pos:end="154:26"><expr pos:start="154:5" pos:end="154:25"><call pos:start="154:5" pos:end="154:25"><name pos:start="154:5" pos:end="154:20">qdev_init_nofail</name><argument_list pos:start="154:21" pos:end="154:25">(<argument pos:start="154:22" pos:end="154:24"><expr pos:start="154:22" pos:end="154:24"><name pos:start="154:22" pos:end="154:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="155:5" pos:end="155:33"><expr pos:start="155:5" pos:end="155:32"><name pos:start="155:5" pos:end="155:10">busdev</name> <operator pos:start="155:12" pos:end="155:12">=</operator> <call pos:start="155:14" pos:end="155:32"><name pos:start="155:14" pos:end="155:27">SYS_BUS_DEVICE</name><argument_list pos:start="155:28" pos:end="155:32">(<argument pos:start="155:29" pos:end="155:31"><expr pos:start="155:29" pos:end="155:31"><name pos:start="155:29" pos:end="155:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="156:5" pos:end="160:5">for <control pos:start="156:9" pos:end="156:27">(<init pos:start="156:10" pos:end="156:15"><expr pos:start="156:10" pos:end="156:14"><name pos:start="156:10" pos:end="156:10">n</name> <operator pos:start="156:12" pos:end="156:12">=</operator> <literal type="number" pos:start="156:14" pos:end="156:14">0</literal></expr>;</init> <condition pos:start="156:17" pos:end="156:22"><expr pos:start="156:17" pos:end="156:21"><name pos:start="156:17" pos:end="156:17">n</name> <operator pos:start="156:19" pos:end="156:19">&lt;</operator> <literal type="number" pos:start="156:21" pos:end="156:21">4</literal></expr>;</condition> <incr pos:start="156:24" pos:end="156:26"><expr pos:start="156:24" pos:end="156:26"><name pos:start="156:24" pos:end="156:24">n</name><operator pos:start="156:25" pos:end="156:26">++</operator></expr></incr>)</control> <block pos:start="156:29" pos:end="160:5">{<block_content pos:start="158:9" pos:end="159:60">
        <comment type="block" pos:start="157:9" pos:end="157:65">/* Connect global timer interrupts to Combiner gpio_in */</comment>
        <expr_stmt pos:start="158:9" pos:end="159:60"><expr pos:start="158:9" pos:end="159:59"><call pos:start="158:9" pos:end="159:59"><name pos:start="158:9" pos:end="158:26">sysbus_connect_irq</name><argument_list pos:start="158:27" pos:end="159:59">(<argument pos:start="158:28" pos:end="158:33"><expr pos:start="158:28" pos:end="158:33"><name pos:start="158:28" pos:end="158:33">busdev</name></expr></argument>, <argument pos:start="158:36" pos:end="158:36"><expr pos:start="158:36" pos:end="158:36"><name pos:start="158:36" pos:end="158:36">n</name></expr></argument>,
                <argument pos:start="159:17" pos:end="159:58"><expr pos:start="159:17" pos:end="159:58"><name pos:start="159:17" pos:end="159:58"><name pos:start="159:17" pos:end="159:17">s</name><operator pos:start="159:18" pos:end="159:19">-&gt;</operator><name pos:start="159:20" pos:end="159:28">irq_table</name><index pos:start="159:29" pos:end="159:58">[<expr pos:start="159:30" pos:end="159:57"><call pos:start="159:30" pos:end="159:57"><name pos:start="159:30" pos:end="159:47">exynos4210_get_irq</name><argument_list pos:start="159:48" pos:end="159:57">(<argument pos:start="159:49" pos:end="159:49"><expr pos:start="159:49" pos:end="159:49"><literal type="number" pos:start="159:49" pos:end="159:49">1</literal></expr></argument>, <argument pos:start="159:52" pos:end="159:56"><expr pos:start="159:52" pos:end="159:56"><literal type="number" pos:start="159:52" pos:end="159:54">4</literal> <operator pos:start="159:54" pos:end="159:54">+</operator> <name pos:start="159:56" pos:end="159:56">n</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block" pos:start="161:5" pos:end="161:60">/* Connect local timer interrupts to Combiner gpio_in */</comment>
    <expr_stmt pos:start="162:5" pos:end="163:53"><expr pos:start="162:5" pos:end="163:52"><call pos:start="162:5" pos:end="163:52"><name pos:start="162:5" pos:end="162:22">sysbus_connect_irq</name><argument_list pos:start="162:23" pos:end="163:52">(<argument pos:start="162:24" pos:end="162:29"><expr pos:start="162:24" pos:end="162:29"><name pos:start="162:24" pos:end="162:29">busdev</name></expr></argument>, <argument pos:start="162:32" pos:end="162:32"><expr pos:start="162:32" pos:end="162:32"><literal type="number" pos:start="162:32" pos:end="162:32">4</literal></expr></argument>,
            <argument pos:start="163:13" pos:end="163:51"><expr pos:start="163:13" pos:end="163:51"><name pos:start="163:13" pos:end="163:51"><name pos:start="163:13" pos:end="163:13">s</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:24">irq_table</name><index pos:start="163:25" pos:end="163:51">[<expr pos:start="163:26" pos:end="163:50"><call pos:start="163:26" pos:end="163:50"><name pos:start="163:26" pos:end="163:43">exynos4210_get_irq</name><argument_list pos:start="163:44" pos:end="163:50">(<argument pos:start="163:45" pos:end="163:46"><expr pos:start="163:45" pos:end="163:46"><literal type="number" pos:start="163:45" pos:end="163:46">51</literal></expr></argument>, <argument pos:start="163:49" pos:end="163:49"><expr pos:start="163:49" pos:end="163:49"><literal type="number" pos:start="163:49" pos:end="163:49">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="164:5" pos:end="165:53"><expr pos:start="164:5" pos:end="165:52"><call pos:start="164:5" pos:end="165:52"><name pos:start="164:5" pos:end="164:22">sysbus_connect_irq</name><argument_list pos:start="164:23" pos:end="165:52">(<argument pos:start="164:24" pos:end="164:29"><expr pos:start="164:24" pos:end="164:29"><name pos:start="164:24" pos:end="164:29">busdev</name></expr></argument>, <argument pos:start="164:32" pos:end="164:32"><expr pos:start="164:32" pos:end="164:32"><literal type="number" pos:start="164:32" pos:end="164:32">5</literal></expr></argument>,
            <argument pos:start="165:13" pos:end="165:51"><expr pos:start="165:13" pos:end="165:51"><name pos:start="165:13" pos:end="165:51"><name pos:start="165:13" pos:end="165:13">s</name><operator pos:start="165:14" pos:end="165:15">-&gt;</operator><name pos:start="165:16" pos:end="165:24">irq_table</name><index pos:start="165:25" pos:end="165:51">[<expr pos:start="165:26" pos:end="165:50"><call pos:start="165:26" pos:end="165:50"><name pos:start="165:26" pos:end="165:43">exynos4210_get_irq</name><argument_list pos:start="165:44" pos:end="165:50">(<argument pos:start="165:45" pos:end="165:46"><expr pos:start="165:45" pos:end="165:46"><literal type="number" pos:start="165:45" pos:end="165:46">35</literal></expr></argument>, <argument pos:start="165:49" pos:end="165:49"><expr pos:start="165:49" pos:end="165:49"><literal type="number" pos:start="165:49" pos:end="165:49">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="166:5" pos:end="166:57"><expr pos:start="166:5" pos:end="166:56"><call pos:start="166:5" pos:end="166:56"><name pos:start="166:5" pos:end="166:19">sysbus_mmio_map</name><argument_list pos:start="166:20" pos:end="166:56">(<argument pos:start="166:21" pos:end="166:26"><expr pos:start="166:21" pos:end="166:26"><name pos:start="166:21" pos:end="166:26">busdev</name></expr></argument>, <argument pos:start="166:29" pos:end="166:29"><expr pos:start="166:29" pos:end="166:29"><literal type="number" pos:start="166:29" pos:end="166:29">0</literal></expr></argument>, <argument pos:start="166:32" pos:end="166:55"><expr pos:start="166:32" pos:end="166:55"><name pos:start="166:32" pos:end="166:55">EXYNOS4210_MCT_BASE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" format="doxygen" pos:start="167:5" pos:end="167:17">/*** I2C ***/</comment>
    <for pos:start="168:5" pos:end="182:5">for <control pos:start="168:9" pos:end="168:47">(<init pos:start="168:10" pos:end="168:15"><expr pos:start="168:10" pos:end="168:14"><name pos:start="168:10" pos:end="168:10">n</name> <operator pos:start="168:12" pos:end="168:12">=</operator> <literal type="number" pos:start="168:14" pos:end="168:14">0</literal></expr>;</init> <condition pos:start="168:17" pos:end="168:42"><expr pos:start="168:17" pos:end="168:41"><name pos:start="168:17" pos:end="168:17">n</name> <operator pos:start="168:19" pos:end="168:19">&lt;</operator> <name pos:start="168:21" pos:end="168:41">EXYNOS4210_I2C_NUMBER</name></expr>;</condition> <incr pos:start="168:44" pos:end="168:46"><expr pos:start="168:44" pos:end="168:46"><name pos:start="168:44" pos:end="168:44">n</name><operator pos:start="168:45" pos:end="168:46">++</operator></expr></incr>)</control> <block pos:start="168:49" pos:end="182:5">{<block_content pos:start="169:9" pos:end="181:64">
        <decl_stmt pos:start="169:9" pos:end="169:76"><decl pos:start="169:9" pos:end="169:75"><type pos:start="169:9" pos:end="169:16"><name pos:start="169:9" pos:end="169:16">uint32_t</name></type> <name pos:start="169:18" pos:end="169:21">addr</name> <init pos:start="169:23" pos:end="169:75">= <expr pos:start="169:25" pos:end="169:75"><name pos:start="169:25" pos:end="169:48">EXYNOS4210_I2C_BASE_ADDR</name> <operator pos:start="169:50" pos:end="169:50">+</operator> <name pos:start="169:52" pos:end="169:71">EXYNOS4210_I2C_SHIFT</name> <operator pos:start="169:73" pos:end="169:73">*</operator> <name pos:start="169:75" pos:end="169:75">n</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="170:9" pos:end="170:25"><decl pos:start="170:9" pos:end="170:24"><type pos:start="170:9" pos:end="170:16"><name pos:start="170:9" pos:end="170:16">qemu_irq</name></type> <name pos:start="170:18" pos:end="170:24">i2c_irq</name></decl>;</decl_stmt>
        <if_stmt pos:start="171:9" pos:end="175:9"><if pos:start="171:9" pos:end="173:9">if <condition pos:start="171:12" pos:end="171:18">(<expr pos:start="171:13" pos:end="171:17"><name pos:start="171:13" pos:end="171:13">n</name> <operator pos:start="171:15" pos:end="171:15">&lt;</operator> <literal type="number" pos:start="171:17" pos:end="171:17">8</literal></expr>)</condition> <block pos:start="171:20" pos:end="173:9">{<block_content pos:start="172:13" pos:end="172:79">
            <expr_stmt pos:start="172:13" pos:end="172:79"><expr pos:start="172:13" pos:end="172:78"><name pos:start="172:13" pos:end="172:19">i2c_irq</name> <operator pos:start="172:21" pos:end="172:21">=</operator> <name pos:start="172:23" pos:end="172:78"><name pos:start="172:23" pos:end="172:23">s</name><operator pos:start="172:24" pos:end="172:25">-&gt;</operator><name pos:start="172:26" pos:end="172:34">irq_table</name><index pos:start="172:35" pos:end="172:78">[<expr pos:start="172:36" pos:end="172:77"><call pos:start="172:36" pos:end="172:77"><name pos:start="172:36" pos:end="172:53">exynos4210_get_irq</name><argument_list pos:start="172:54" pos:end="172:77">(<argument pos:start="172:55" pos:end="172:73"><expr pos:start="172:55" pos:end="172:73"><name pos:start="172:55" pos:end="172:73">EXYNOS4210_I2C_INTG</name></expr></argument>, <argument pos:start="172:76" pos:end="172:76"><expr pos:start="172:76" pos:end="172:76"><name pos:start="172:76" pos:end="172:76">n</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="173:11" pos:end="175:9">else <block pos:start="173:16" pos:end="175:9">{<block_content pos:start="174:13" pos:end="174:80">
            <expr_stmt pos:start="174:13" pos:end="174:80"><expr pos:start="174:13" pos:end="174:79"><name pos:start="174:13" pos:end="174:19">i2c_irq</name> <operator pos:start="174:21" pos:end="174:21">=</operator> <name pos:start="174:23" pos:end="174:79"><name pos:start="174:23" pos:end="174:23">s</name><operator pos:start="174:24" pos:end="174:25">-&gt;</operator><name pos:start="174:26" pos:end="174:34">irq_table</name><index pos:start="174:35" pos:end="174:79">[<expr pos:start="174:36" pos:end="174:78"><call pos:start="174:36" pos:end="174:78"><name pos:start="174:36" pos:end="174:53">exynos4210_get_irq</name><argument_list pos:start="174:54" pos:end="174:78">(<argument pos:start="174:55" pos:end="174:74"><expr pos:start="174:55" pos:end="174:74"><name pos:start="174:55" pos:end="174:74">EXYNOS4210_HDMI_INTG</name></expr></argument>, <argument pos:start="174:77" pos:end="174:77"><expr pos:start="174:77" pos:end="174:77"><literal type="number" pos:start="174:77" pos:end="174:77">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt pos:start="176:9" pos:end="176:50"><expr pos:start="176:9" pos:end="176:49"><name pos:start="176:9" pos:end="176:11">dev</name> <operator pos:start="176:13" pos:end="176:13">=</operator> <call pos:start="176:15" pos:end="176:49"><name pos:start="176:15" pos:end="176:25">qdev_create</name><argument_list pos:start="176:26" pos:end="176:49">(<argument pos:start="176:27" pos:end="176:30"><expr pos:start="176:27" pos:end="176:30"><name pos:start="176:27" pos:end="176:30">NULL</name></expr></argument>, <argument pos:start="176:33" pos:end="176:48"><expr pos:start="176:33" pos:end="176:48"><literal type="string" pos:start="176:33" pos:end="176:48">"exynos4210.i2c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="177:9" pos:end="177:30"><expr pos:start="177:9" pos:end="177:29"><call pos:start="177:9" pos:end="177:29"><name pos:start="177:9" pos:end="177:24">qdev_init_nofail</name><argument_list pos:start="177:25" pos:end="177:29">(<argument pos:start="177:26" pos:end="177:28"><expr pos:start="177:26" pos:end="177:28"><name pos:start="177:26" pos:end="177:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="178:9" pos:end="178:37"><expr pos:start="178:9" pos:end="178:36"><name pos:start="178:9" pos:end="178:14">busdev</name> <operator pos:start="178:16" pos:end="178:16">=</operator> <call pos:start="178:18" pos:end="178:36"><name pos:start="178:18" pos:end="178:31">SYS_BUS_DEVICE</name><argument_list pos:start="178:32" pos:end="178:36">(<argument pos:start="178:33" pos:end="178:35"><expr pos:start="178:33" pos:end="178:35"><name pos:start="178:33" pos:end="178:35">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="179:9" pos:end="179:47"><expr pos:start="179:9" pos:end="179:46"><call pos:start="179:9" pos:end="179:46"><name pos:start="179:9" pos:end="179:26">sysbus_connect_irq</name><argument_list pos:start="179:27" pos:end="179:46">(<argument pos:start="179:28" pos:end="179:33"><expr pos:start="179:28" pos:end="179:33"><name pos:start="179:28" pos:end="179:33">busdev</name></expr></argument>, <argument pos:start="179:36" pos:end="179:36"><expr pos:start="179:36" pos:end="179:36"><literal type="number" pos:start="179:36" pos:end="179:36">0</literal></expr></argument>, <argument pos:start="179:39" pos:end="179:45"><expr pos:start="179:39" pos:end="179:45"><name pos:start="179:39" pos:end="179:45">i2c_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="180:9" pos:end="180:41"><expr pos:start="180:9" pos:end="180:40"><call pos:start="180:9" pos:end="180:40"><name pos:start="180:9" pos:end="180:23">sysbus_mmio_map</name><argument_list pos:start="180:24" pos:end="180:40">(<argument pos:start="180:25" pos:end="180:30"><expr pos:start="180:25" pos:end="180:30"><name pos:start="180:25" pos:end="180:30">busdev</name></expr></argument>, <argument pos:start="180:33" pos:end="180:33"><expr pos:start="180:33" pos:end="180:33"><literal type="number" pos:start="180:33" pos:end="180:33">0</literal></expr></argument>, <argument pos:start="180:36" pos:end="180:39"><expr pos:start="180:36" pos:end="180:39"><name pos:start="180:36" pos:end="180:39">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="181:9" pos:end="181:64"><expr pos:start="181:9" pos:end="181:63"><name pos:start="181:9" pos:end="181:20"><name pos:start="181:9" pos:end="181:9">s</name><operator pos:start="181:10" pos:end="181:11">-&gt;</operator><name pos:start="181:12" pos:end="181:17">i2c_if</name><index pos:start="181:18" pos:end="181:20">[<expr pos:start="181:19" pos:end="181:19"><name pos:start="181:19" pos:end="181:19">n</name></expr>]</index></name> <operator pos:start="181:22" pos:end="181:22">=</operator> <operator pos:start="181:24" pos:end="181:24">(</operator><name pos:start="181:25" pos:end="181:30">I2CBus</name> <operator pos:start="181:32" pos:end="181:32">*</operator><operator pos:start="181:33" pos:end="181:33">)</operator><call pos:start="181:34" pos:end="181:63"><name pos:start="181:34" pos:end="181:51">qdev_get_child_bus</name><argument_list pos:start="181:52" pos:end="181:63">(<argument pos:start="181:53" pos:end="181:55"><expr pos:start="181:53" pos:end="181:55"><name pos:start="181:53" pos:end="181:55">dev</name></expr></argument>, <argument pos:start="181:58" pos:end="181:62"><expr pos:start="181:58" pos:end="181:62"><literal type="string" pos:start="181:58" pos:end="181:62">"i2c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block" format="doxygen" pos:start="183:5" pos:end="183:19">/*** UARTs ***/</comment>
    <expr_stmt pos:start="184:5" pos:end="186:80"><expr pos:start="184:5" pos:end="186:79"><call pos:start="184:5" pos:end="186:79"><name pos:start="184:5" pos:end="184:26">exynos4210_uart_create</name><argument_list pos:start="184:27" pos:end="186:79">(<argument pos:start="184:28" pos:end="184:53"><expr pos:start="184:28" pos:end="184:53"><name pos:start="184:28" pos:end="184:53">EXYNOS4210_UART0_BASE_ADDR</name></expr></argument>,
                           <argument pos:start="185:28" pos:end="185:53"><expr pos:start="185:28" pos:end="185:53"><name pos:start="185:28" pos:end="185:53">EXYNOS4210_UART0_FIFO_SIZE</name></expr></argument>, <argument pos:start="185:56" pos:end="185:56"><expr pos:start="185:56" pos:end="185:56"><literal type="number" pos:start="185:56" pos:end="185:56">0</literal></expr></argument>, <argument pos:start="185:59" pos:end="185:62"><expr pos:start="185:59" pos:end="185:62"><name pos:start="185:59" pos:end="185:62">NULL</name></expr></argument>,
                  <argument pos:start="186:19" pos:end="186:78"><expr pos:start="186:19" pos:end="186:78"><name pos:start="186:19" pos:end="186:78"><name pos:start="186:19" pos:end="186:19">s</name><operator pos:start="186:20" pos:end="186:21">-&gt;</operator><name pos:start="186:22" pos:end="186:30">irq_table</name><index pos:start="186:31" pos:end="186:78">[<expr pos:start="186:32" pos:end="186:77"><call pos:start="186:32" pos:end="186:77"><name pos:start="186:32" pos:end="186:49">exynos4210_get_irq</name><argument_list pos:start="186:50" pos:end="186:77">(<argument pos:start="186:51" pos:end="186:73"><expr pos:start="186:51" pos:end="186:73"><name pos:start="186:51" pos:end="186:73">EXYNOS4210_UART_INT_GRP</name></expr></argument>, <argument pos:start="186:76" pos:end="186:76"><expr pos:start="186:76" pos:end="186:76"><literal type="number" pos:start="186:76" pos:end="186:76">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="187:5" pos:end="189:80"><expr pos:start="187:5" pos:end="189:79"><call pos:start="187:5" pos:end="189:79"><name pos:start="187:5" pos:end="187:26">exynos4210_uart_create</name><argument_list pos:start="187:27" pos:end="189:79">(<argument pos:start="187:28" pos:end="187:53"><expr pos:start="187:28" pos:end="187:53"><name pos:start="187:28" pos:end="187:53">EXYNOS4210_UART1_BASE_ADDR</name></expr></argument>,
                           <argument pos:start="188:28" pos:end="188:53"><expr pos:start="188:28" pos:end="188:53"><name pos:start="188:28" pos:end="188:53">EXYNOS4210_UART1_FIFO_SIZE</name></expr></argument>, <argument pos:start="188:56" pos:end="188:56"><expr pos:start="188:56" pos:end="188:56"><literal type="number" pos:start="188:56" pos:end="188:56">1</literal></expr></argument>, <argument pos:start="188:59" pos:end="188:62"><expr pos:start="188:59" pos:end="188:62"><name pos:start="188:59" pos:end="188:62">NULL</name></expr></argument>,
                  <argument pos:start="189:19" pos:end="189:78"><expr pos:start="189:19" pos:end="189:78"><name pos:start="189:19" pos:end="189:78"><name pos:start="189:19" pos:end="189:19">s</name><operator pos:start="189:20" pos:end="189:21">-&gt;</operator><name pos:start="189:22" pos:end="189:30">irq_table</name><index pos:start="189:31" pos:end="189:78">[<expr pos:start="189:32" pos:end="189:77"><call pos:start="189:32" pos:end="189:77"><name pos:start="189:32" pos:end="189:49">exynos4210_get_irq</name><argument_list pos:start="189:50" pos:end="189:77">(<argument pos:start="189:51" pos:end="189:73"><expr pos:start="189:51" pos:end="189:73"><name pos:start="189:51" pos:end="189:73">EXYNOS4210_UART_INT_GRP</name></expr></argument>, <argument pos:start="189:76" pos:end="189:76"><expr pos:start="189:76" pos:end="189:76"><literal type="number" pos:start="189:76" pos:end="189:76">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="190:5" pos:end="192:80"><expr pos:start="190:5" pos:end="192:79"><call pos:start="190:5" pos:end="192:79"><name pos:start="190:5" pos:end="190:26">exynos4210_uart_create</name><argument_list pos:start="190:27" pos:end="192:79">(<argument pos:start="190:28" pos:end="190:53"><expr pos:start="190:28" pos:end="190:53"><name pos:start="190:28" pos:end="190:53">EXYNOS4210_UART2_BASE_ADDR</name></expr></argument>,
                           <argument pos:start="191:28" pos:end="191:53"><expr pos:start="191:28" pos:end="191:53"><name pos:start="191:28" pos:end="191:53">EXYNOS4210_UART2_FIFO_SIZE</name></expr></argument>, <argument pos:start="191:56" pos:end="191:56"><expr pos:start="191:56" pos:end="191:56"><literal type="number" pos:start="191:56" pos:end="191:56">2</literal></expr></argument>, <argument pos:start="191:59" pos:end="191:62"><expr pos:start="191:59" pos:end="191:62"><name pos:start="191:59" pos:end="191:62">NULL</name></expr></argument>,
                  <argument pos:start="192:19" pos:end="192:78"><expr pos:start="192:19" pos:end="192:78"><name pos:start="192:19" pos:end="192:78"><name pos:start="192:19" pos:end="192:19">s</name><operator pos:start="192:20" pos:end="192:21">-&gt;</operator><name pos:start="192:22" pos:end="192:30">irq_table</name><index pos:start="192:31" pos:end="192:78">[<expr pos:start="192:32" pos:end="192:77"><call pos:start="192:32" pos:end="192:77"><name pos:start="192:32" pos:end="192:49">exynos4210_get_irq</name><argument_list pos:start="192:50" pos:end="192:77">(<argument pos:start="192:51" pos:end="192:73"><expr pos:start="192:51" pos:end="192:73"><name pos:start="192:51" pos:end="192:73">EXYNOS4210_UART_INT_GRP</name></expr></argument>, <argument pos:start="192:76" pos:end="192:76"><expr pos:start="192:76" pos:end="192:76"><literal type="number" pos:start="192:76" pos:end="192:76">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="193:5" pos:end="195:80"><expr pos:start="193:5" pos:end="195:79"><call pos:start="193:5" pos:end="195:79"><name pos:start="193:5" pos:end="193:26">exynos4210_uart_create</name><argument_list pos:start="193:27" pos:end="195:79">(<argument pos:start="193:28" pos:end="193:53"><expr pos:start="193:28" pos:end="193:53"><name pos:start="193:28" pos:end="193:53">EXYNOS4210_UART3_BASE_ADDR</name></expr></argument>,
                           <argument pos:start="194:28" pos:end="194:53"><expr pos:start="194:28" pos:end="194:53"><name pos:start="194:28" pos:end="194:53">EXYNOS4210_UART3_FIFO_SIZE</name></expr></argument>, <argument pos:start="194:56" pos:end="194:56"><expr pos:start="194:56" pos:end="194:56"><literal type="number" pos:start="194:56" pos:end="194:56">3</literal></expr></argument>, <argument pos:start="194:59" pos:end="194:62"><expr pos:start="194:59" pos:end="194:62"><name pos:start="194:59" pos:end="194:62">NULL</name></expr></argument>,
                  <argument pos:start="195:19" pos:end="195:78"><expr pos:start="195:19" pos:end="195:78"><name pos:start="195:19" pos:end="195:78"><name pos:start="195:19" pos:end="195:19">s</name><operator pos:start="195:20" pos:end="195:21">-&gt;</operator><name pos:start="195:22" pos:end="195:30">irq_table</name><index pos:start="195:31" pos:end="195:78">[<expr pos:start="195:32" pos:end="195:77"><call pos:start="195:32" pos:end="195:77"><name pos:start="195:32" pos:end="195:49">exynos4210_get_irq</name><argument_list pos:start="195:50" pos:end="195:77">(<argument pos:start="195:51" pos:end="195:73"><expr pos:start="195:51" pos:end="195:73"><name pos:start="195:51" pos:end="195:73">EXYNOS4210_UART_INT_GRP</name></expr></argument>, <argument pos:start="195:76" pos:end="195:76"><expr pos:start="195:76" pos:end="195:76"><literal type="number" pos:start="195:76" pos:end="195:76">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" format="doxygen" pos:start="196:5" pos:end="196:39">/*** Display controller (FIMD) ***/</comment>
    <expr_stmt pos:start="197:5" pos:end="201:18"><expr pos:start="197:5" pos:end="201:17"><call pos:start="197:5" pos:end="201:17"><name pos:start="197:5" pos:end="197:25">sysbus_create_varargs</name><argument_list pos:start="197:26" pos:end="201:17">(<argument pos:start="197:27" pos:end="197:43"><expr pos:start="197:27" pos:end="197:43"><literal type="string" pos:start="197:27" pos:end="197:43">"exynos4210.fimd"</literal></expr></argument>, <argument pos:start="197:46" pos:end="197:71"><expr pos:start="197:46" pos:end="197:71"><name pos:start="197:46" pos:end="197:71">EXYNOS4210_FIMD0_BASE_ADDR</name></expr></argument>,
            <argument pos:start="198:13" pos:end="198:51"><expr pos:start="198:13" pos:end="198:51"><name pos:start="198:13" pos:end="198:51"><name pos:start="198:13" pos:end="198:13">s</name><operator pos:start="198:14" pos:end="198:15">-&gt;</operator><name pos:start="198:16" pos:end="198:24">irq_table</name><index pos:start="198:25" pos:end="198:51">[<expr pos:start="198:26" pos:end="198:50"><call pos:start="198:26" pos:end="198:50"><name pos:start="198:26" pos:end="198:43">exynos4210_get_irq</name><argument_list pos:start="198:44" pos:end="198:50">(<argument pos:start="198:45" pos:end="198:46"><expr pos:start="198:45" pos:end="198:46"><literal type="number" pos:start="198:45" pos:end="198:46">11</literal></expr></argument>, <argument pos:start="198:49" pos:end="198:49"><expr pos:start="198:49" pos:end="198:49"><literal type="number" pos:start="198:49" pos:end="198:49">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,
            <argument pos:start="199:13" pos:end="199:51"><expr pos:start="199:13" pos:end="199:51"><name pos:start="199:13" pos:end="199:51"><name pos:start="199:13" pos:end="199:13">s</name><operator pos:start="199:14" pos:end="199:15">-&gt;</operator><name pos:start="199:16" pos:end="199:24">irq_table</name><index pos:start="199:25" pos:end="199:51">[<expr pos:start="199:26" pos:end="199:50"><call pos:start="199:26" pos:end="199:50"><name pos:start="199:26" pos:end="199:43">exynos4210_get_irq</name><argument_list pos:start="199:44" pos:end="199:50">(<argument pos:start="199:45" pos:end="199:46"><expr pos:start="199:45" pos:end="199:46"><literal type="number" pos:start="199:45" pos:end="199:46">11</literal></expr></argument>, <argument pos:start="199:49" pos:end="199:49"><expr pos:start="199:49" pos:end="199:49"><literal type="number" pos:start="199:49" pos:end="199:49">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,
            <argument pos:start="200:13" pos:end="200:51"><expr pos:start="200:13" pos:end="200:51"><name pos:start="200:13" pos:end="200:51"><name pos:start="200:13" pos:end="200:13">s</name><operator pos:start="200:14" pos:end="200:15">-&gt;</operator><name pos:start="200:16" pos:end="200:24">irq_table</name><index pos:start="200:25" pos:end="200:51">[<expr pos:start="200:26" pos:end="200:50"><call pos:start="200:26" pos:end="200:50"><name pos:start="200:26" pos:end="200:43">exynos4210_get_irq</name><argument_list pos:start="200:44" pos:end="200:50">(<argument pos:start="200:45" pos:end="200:46"><expr pos:start="200:45" pos:end="200:46"><literal type="number" pos:start="200:45" pos:end="200:46">11</literal></expr></argument>, <argument pos:start="200:49" pos:end="200:49"><expr pos:start="200:49" pos:end="200:49"><literal type="number" pos:start="200:49" pos:end="200:49">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,
            <argument pos:start="201:13" pos:end="201:16"><expr pos:start="201:13" pos:end="201:16"><name pos:start="201:13" pos:end="201:16">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="202:5" pos:end="203:53"><expr pos:start="202:5" pos:end="203:52"><call pos:start="202:5" pos:end="203:52"><name pos:start="202:5" pos:end="202:24">sysbus_create_simple</name><argument_list pos:start="202:25" pos:end="203:52">(<argument pos:start="202:26" pos:end="202:45"><expr pos:start="202:26" pos:end="202:45"><name pos:start="202:26" pos:end="202:45">TYPE_EXYNOS4210_EHCI</name></expr></argument>, <argument pos:start="202:48" pos:end="202:72"><expr pos:start="202:48" pos:end="202:72"><name pos:start="202:48" pos:end="202:72">EXYNOS4210_EHCI_BASE_ADDR</name></expr></argument>,
            <argument pos:start="203:13" pos:end="203:51"><expr pos:start="203:13" pos:end="203:51"><name pos:start="203:13" pos:end="203:51"><name pos:start="203:13" pos:end="203:13">s</name><operator pos:start="203:14" pos:end="203:15">-&gt;</operator><name pos:start="203:16" pos:end="203:24">irq_table</name><index pos:start="203:25" pos:end="203:51">[<expr pos:start="203:26" pos:end="203:50"><call pos:start="203:26" pos:end="203:50"><name pos:start="203:26" pos:end="203:43">exynos4210_get_irq</name><argument_list pos:start="203:44" pos:end="203:50">(<argument pos:start="203:45" pos:end="203:46"><expr pos:start="203:45" pos:end="203:46"><literal type="number" pos:start="203:45" pos:end="203:46">28</literal></expr></argument>, <argument pos:start="203:49" pos:end="203:49"><expr pos:start="203:49" pos:end="203:49"><literal type="number" pos:start="203:49" pos:end="203:49">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="204:5" pos:end="204:13">return <expr pos:start="204:12" pos:end="204:12"><name pos:start="204:12" pos:end="204:12">s</name></expr>;</return>
</block_content>}</block></function></unit>
