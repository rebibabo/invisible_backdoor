<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9199.c" pos:tabs="8"><function pos:start="1:1" pos:end="84:0"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:35">rgb24to32</name>)<parameter_list pos:start="1:37" pos:end="1:83">(<parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><specifier pos:start="1:38" pos:end="1:42">const</specifier> <name pos:start="1:44" pos:end="1:50">uint8_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">src</name></decl></parameter>,<parameter pos:start="1:57" pos:end="1:68"><decl pos:start="1:57" pos:end="1:68"><type pos:start="1:57" pos:end="1:68"><name pos:start="1:57" pos:end="1:63">uint8_t</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">dst</name></decl></parameter>,<parameter pos:start="1:70" pos:end="1:82"><decl pos:start="1:70" pos:end="1:82"><type pos:start="1:70" pos:end="1:82"><name pos:start="1:70" pos:end="1:73">long</name></type> <name pos:start="1:75" pos:end="1:82">src_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="84:0">{<block_content pos:start="5:3" pos:end="75:12">

  <decl_stmt pos:start="5:3" pos:end="5:22"><decl pos:start="5:3" pos:end="5:21"><type pos:start="5:3" pos:end="5:11"><name pos:start="5:3" pos:end="5:9">uint8_t</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:15">dest</name> <init pos:start="5:17" pos:end="5:21">= <expr pos:start="5:19" pos:end="5:21"><name pos:start="5:19" pos:end="5:21">dst</name></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="7:3" pos:end="7:25"><decl pos:start="7:3" pos:end="7:24"><type pos:start="7:3" pos:end="7:17"><specifier pos:start="7:3" pos:end="7:7">const</specifier> <name pos:start="7:9" pos:end="7:15">uint8_t</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">s</name> <init pos:start="7:20" pos:end="7:24">= <expr pos:start="7:22" pos:end="7:24"><name pos:start="7:22" pos:end="7:24">src</name></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="9:3" pos:end="12:0"><decl pos:start="9:3" pos:end="9:20"><type pos:start="9:3" pos:end="9:17"><specifier pos:start="9:3" pos:end="9:7">const</specifier> <name pos:start="9:9" pos:end="9:15">uint8_t</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">end</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="11:1" pos:end="11:15">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:15">HAVE_MMX</name></cpp:ifdef>

  <decl_stmt pos:start="13:3" pos:end="16:0"><decl pos:start="13:3" pos:end="13:23"><type pos:start="13:3" pos:end="13:17"><specifier pos:start="13:3" pos:end="13:7">const</specifier> <name pos:start="13:9" pos:end="13:15">uint8_t</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:23">mm_end</name></decl>;</decl_stmt>

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>

  <expr_stmt pos:start="17:3" pos:end="21:55"><expr pos:start="17:3" pos:end="17:20"><name pos:start="17:3" pos:end="17:5">end</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <name pos:start="17:9" pos:end="17:9">s</name> <operator pos:start="17:11" pos:end="17:11">+</operator> <name pos:start="17:13" pos:end="17:20">src_size</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="19:1" pos:end="19:15">#<cpp:directive pos:start="19:2" pos:end="19:6">ifdef</cpp:directive> <name pos:start="19:8" pos:end="19:15">HAVE_MMX</name></cpp:ifdef>

  <asm pos:start="21:3" pos:end="21:55">__asm __volatile(PREFETCH"	%0"::"m"(*s):"memory");</asm>

  <expr_stmt pos:start="23:3" pos:end="25:66"><expr pos:start="23:3" pos:end="23:19"><name pos:start="23:3" pos:end="23:8">mm_end</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <name pos:start="23:12" pos:end="23:14">end</name> <operator pos:start="23:16" pos:end="23:16">-</operator> <literal type="number" pos:start="23:18" pos:end="23:19">23</literal></expr>;</expr_stmt>

  <asm pos:start="25:3" pos:end="25:66">__asm __volatile("movq	%0, %%mm7"::"m"(mask32):"memory");</asm>

  <while pos:start="27:3" pos:end="71:19">while<condition pos:start="27:8" pos:end="27:19">(<expr pos:start="27:9" pos:end="27:18"><name pos:start="27:9" pos:end="27:9">s</name> <operator pos:start="27:11" pos:end="27:11">&lt;</operator> <name pos:start="27:13" pos:end="27:18">mm_end</name></expr>)</condition>

  <block pos:start="29:3" pos:end="71:18">{<block_content pos:start="33:9" pos:end="71:18">

    <asm pos:start="31:5" pos:end="31:21">__asm __volatile(</asm>

	<expr_stmt pos:start="33:9" pos:end="71:17"><expr pos:start="33:9" pos:end="71:17"><name pos:start="33:9" pos:end="33:16">PREFETCH</name><literal type="string" pos:start="33:17" pos:end="33:33">"	32%1\n\t"</literal>

	<literal type="string" pos:start="35:9" pos:end="35:30">"movd	%1, %%mm0\n\t"</literal>

	<literal type="string" pos:start="37:9" pos:end="37:34">"punpckldq 3%1, %%mm0\n\t"</literal>

	<literal type="string" pos:start="39:9" pos:end="39:31">"movd	6%1, %%mm1\n\t"</literal>

	<literal type="string" pos:start="41:9" pos:end="41:34">"punpckldq 9%1, %%mm1\n\t"</literal>

	<literal type="string" pos:start="43:9" pos:end="43:32">"movd	12%1, %%mm2\n\t"</literal>

	<literal type="string" pos:start="45:9" pos:end="45:35">"punpckldq 15%1, %%mm2\n\t"</literal>

	<literal type="string" pos:start="47:9" pos:end="47:32">"movd	18%1, %%mm3\n\t"</literal>

	<literal type="string" pos:start="49:9" pos:end="49:35">"punpckldq 21%1, %%mm3\n\t"</literal>

	<literal type="string" pos:start="51:9" pos:end="51:33">"pand	%%mm7, %%mm0\n\t"</literal>

	<literal type="string" pos:start="53:9" pos:end="53:33">"pand	%%mm7, %%mm1\n\t"</literal>

	<literal type="string" pos:start="55:9" pos:end="55:33">"pand	%%mm7, %%mm2\n\t"</literal>

	<literal type="string" pos:start="57:9" pos:end="57:33">"pand	%%mm7, %%mm3\n\t"</literal>

	<name pos:start="59:9" pos:end="59:14">MOVNTQ</name><literal type="string" pos:start="59:15" pos:end="59:30">"	%%mm0, %0\n\t"</literal>

	<name pos:start="61:9" pos:end="61:14">MOVNTQ</name><literal type="string" pos:start="61:15" pos:end="61:31">"	%%mm1, 8%0\n\t"</literal>

	<name pos:start="63:9" pos:end="63:14">MOVNTQ</name><literal type="string" pos:start="63:15" pos:end="63:32">"	%%mm2, 16%0\n\t"</literal>

	<name pos:start="65:9" pos:end="65:14">MOVNTQ</name><literal type="string" pos:start="65:15" pos:end="65:28">"	%%mm3, 24%0"</literal>

	<operator pos:start="67:9" pos:end="67:9">:</operator><literal type="string" pos:start="67:10" pos:end="67:13">"=m"</literal><operator pos:start="67:14" pos:end="67:14">(</operator><operator pos:start="67:15" pos:end="67:15">*</operator><name pos:start="67:16" pos:end="67:19">dest</name><operator pos:start="67:20" pos:end="67:20">)</operator>

	<operator pos:start="69:9" pos:end="69:9">:</operator><literal type="string" pos:start="69:10" pos:end="69:12">"m"</literal><operator pos:start="69:13" pos:end="69:13">(</operator><operator pos:start="69:14" pos:end="69:14">*</operator><name pos:start="69:15" pos:end="69:15">s</name><operator pos:start="69:16" pos:end="69:16">)</operator>

	<operator pos:start="71:9" pos:end="71:9">:</operator><literal type="string" pos:start="71:10" pos:end="71:17">"memory"</literal></expr></expr_stmt>)</block_content></block><empty_stmt pos:start="71:19" pos:end="71:19">;</empty_stmt></while>

    <expr_stmt pos:start="73:5" pos:end="73:15"><expr pos:start="73:5" pos:end="73:14"><name pos:start="73:5" pos:end="73:8">dest</name> <operator pos:start="73:10" pos:end="73:11">+=</operator> <literal type="number" pos:start="73:13" pos:end="73:14">32</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:12"><expr pos:start="75:5" pos:end="75:11"><name pos:start="75:5" pos:end="75:5">s</name> <operator pos:start="75:7" pos:end="75:8">+=</operator> <literal type="number" pos:start="75:10" pos:end="75:11">24</literal></expr>;</expr_stmt>

  </block_content>}</block></function>

  <asm pos:start="79:3" pos:end="79:38">__asm __volatile(SFENCE:::"memory");</asm>

  <asm pos:start="81:3" pos:end="81:36">__asm __volatile(EMMS:::"memory");</asm>

<cpp:endif pos:start="83:1" pos:end="83:6">#<cpp:directive pos:start="83:2" pos:end="83:6">endif</cpp:directive></cpp:endif>

  <while pos:start="85:3" pos:end="115:3">while<condition pos:start="85:8" pos:end="85:16">(<expr pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:9">s</name> <operator pos:start="85:11" pos:end="85:11">&lt;</operator> <name pos:start="85:13" pos:end="85:15">end</name></expr>)</condition>

  <block pos:start="87:3" pos:end="115:3">{<block_content pos:start="93:5" pos:end="114:0">

<cpp:ifdef pos:start="89:1" pos:end="89:22">#<cpp:directive pos:start="89:2" pos:end="89:6">ifdef</cpp:directive> <name pos:start="89:8" pos:end="89:22">WORDS_BIGENDIAN</name></cpp:ifdef>

    <comment type="block" pos:start="91:5" pos:end="91:46">/* RGB24 (= R,G,B) -&gt; RGB32 (= A,B,G,R) */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:16"><expr pos:start="93:5" pos:end="93:15"><operator pos:start="93:5" pos:end="93:5">*</operator><name pos:start="93:6" pos:end="93:9">dest</name><operator pos:start="93:10" pos:end="93:11">++</operator> <operator pos:start="93:13" pos:end="93:13">=</operator> <literal type="number" pos:start="93:15" pos:end="93:15">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:19"><expr pos:start="95:5" pos:end="95:18"><operator pos:start="95:5" pos:end="95:5">*</operator><name pos:start="95:6" pos:end="95:9">dest</name><operator pos:start="95:10" pos:end="95:11">++</operator> <operator pos:start="95:13" pos:end="95:13">=</operator> <name pos:start="95:15" pos:end="95:18"><name pos:start="95:15" pos:end="95:15">s</name><index pos:start="95:16" pos:end="95:18">[<expr pos:start="95:17" pos:end="95:17"><literal type="number" pos:start="95:17" pos:end="95:17">2</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:19"><expr pos:start="97:5" pos:end="97:18"><operator pos:start="97:5" pos:end="97:5">*</operator><name pos:start="97:6" pos:end="97:9">dest</name><operator pos:start="97:10" pos:end="97:11">++</operator> <operator pos:start="97:13" pos:end="97:13">=</operator> <name pos:start="97:15" pos:end="97:18"><name pos:start="97:15" pos:end="97:15">s</name><index pos:start="97:16" pos:end="97:18">[<expr pos:start="97:17" pos:end="97:17"><literal type="number" pos:start="97:17" pos:end="97:17">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:19"><expr pos:start="99:5" pos:end="99:18"><operator pos:start="99:5" pos:end="99:5">*</operator><name pos:start="99:6" pos:end="99:9">dest</name><operator pos:start="99:10" pos:end="99:11">++</operator> <operator pos:start="99:13" pos:end="99:13">=</operator> <name pos:start="99:15" pos:end="99:18"><name pos:start="99:15" pos:end="99:15">s</name><index pos:start="99:16" pos:end="99:18">[<expr pos:start="99:17" pos:end="99:17"><literal type="number" pos:start="99:17" pos:end="99:17">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="104:0"><expr pos:start="101:5" pos:end="101:8"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">+=</operator><literal type="number" pos:start="101:8" pos:end="101:8">3</literal></expr>;</expr_stmt>

<cpp:else pos:start="103:1" pos:end="103:5">#<cpp:directive pos:start="103:2" pos:end="103:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="105:5" pos:end="105:19"><expr pos:start="105:5" pos:end="105:18"><operator pos:start="105:5" pos:end="105:5">*</operator><name pos:start="105:6" pos:end="105:9">dest</name><operator pos:start="105:10" pos:end="105:11">++</operator> <operator pos:start="105:13" pos:end="105:13">=</operator> <operator pos:start="105:15" pos:end="105:15">*</operator><name pos:start="105:16" pos:end="105:16">s</name><operator pos:start="105:17" pos:end="105:18">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:19"><expr pos:start="107:5" pos:end="107:18"><operator pos:start="107:5" pos:end="107:5">*</operator><name pos:start="107:6" pos:end="107:9">dest</name><operator pos:start="107:10" pos:end="107:11">++</operator> <operator pos:start="107:13" pos:end="107:13">=</operator> <operator pos:start="107:15" pos:end="107:15">*</operator><name pos:start="107:16" pos:end="107:16">s</name><operator pos:start="107:17" pos:end="107:18">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:19"><expr pos:start="109:5" pos:end="109:18"><operator pos:start="109:5" pos:end="109:5">*</operator><name pos:start="109:6" pos:end="109:9">dest</name><operator pos:start="109:10" pos:end="109:11">++</operator> <operator pos:start="109:13" pos:end="109:13">=</operator> <operator pos:start="109:15" pos:end="109:15">*</operator><name pos:start="109:16" pos:end="109:16">s</name><operator pos:start="109:17" pos:end="109:18">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="114:0"><expr pos:start="111:5" pos:end="111:15"><operator pos:start="111:5" pos:end="111:5">*</operator><name pos:start="111:6" pos:end="111:9">dest</name><operator pos:start="111:10" pos:end="111:11">++</operator> <operator pos:start="111:13" pos:end="111:13">=</operator> <literal type="number" pos:start="111:15" pos:end="111:15">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="113:1" pos:end="113:6">#<cpp:directive pos:start="113:2" pos:end="113:6">endif</cpp:directive></cpp:endif>

  </block_content>}</block></while>

}
</unit>
