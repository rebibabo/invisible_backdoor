<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16055.c" pos:tabs="8"><function pos:start="1:1" pos:end="403:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">init_muxer</name><parameter_list pos:start="1:22" pos:end="1:65">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><name pos:start="1:23" pos:end="1:37">AVFormatContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:64"><decl pos:start="1:43" pos:end="1:64"><type pos:start="1:43" pos:end="1:64"><name pos:start="1:43" pos:end="1:54">AVDictionary</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier><modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:64">options</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="403:1">{<block_content pos:start="5:5" pos:end="401:15">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>, <decl pos:start="5:18" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">AVStream</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">AVDictionary</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">tmp</name> <init pos:start="9:23" pos:end="9:28">= <expr pos:start="9:25" pos:end="9:28"><name pos:start="9:25" pos:end="9:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:21">AVCodecParameters</name> <modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:26">par</name> <init pos:start="11:28" pos:end="11:33">= <expr pos:start="11:30" pos:end="11:33"><name pos:start="11:30" pos:end="11:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">AVOutputFormat</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:22">of</name> <init pos:start="13:24" pos:end="13:35">= <expr pos:start="13:26" pos:end="13:35"><name pos:start="13:26" pos:end="13:35"><name pos:start="13:26" pos:end="13:26">s</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:35">oformat</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:33"><type pos:start="15:5" pos:end="15:29"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:27">AVCodecDescriptor</name> <modifier pos:start="15:29" pos:end="15:29">*</modifier></type><name pos:start="15:30" pos:end="15:33">desc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:21">AVDictionaryEntry</name> <modifier pos:start="17:23" pos:end="17:23">*</modifier></type><name pos:start="17:24" pos:end="17:24">e</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="23:40"><if pos:start="21:5" pos:end="23:40">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:15">options</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:40"><block_content pos:start="23:9" pos:end="23:40">

        <expr_stmt pos:start="23:9" pos:end="23:40"><expr pos:start="23:9" pos:end="23:39"><call pos:start="23:9" pos:end="23:39"><name pos:start="23:9" pos:end="23:20">av_dict_copy</name><argument_list pos:start="23:21" pos:end="23:39">(<argument pos:start="23:22" pos:end="23:25"><expr pos:start="23:22" pos:end="23:25"><operator pos:start="23:22" pos:end="23:22">&amp;</operator><name pos:start="23:23" pos:end="23:25">tmp</name></expr></argument>, <argument pos:start="23:28" pos:end="23:35"><expr pos:start="23:28" pos:end="23:35"><operator pos:start="23:28" pos:end="23:28">*</operator><name pos:start="23:29" pos:end="23:35">options</name></expr></argument>, <argument pos:start="23:38" pos:end="23:38"><expr pos:start="23:38" pos:end="23:38"><literal type="number" pos:start="23:38" pos:end="23:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="29:18"><if pos:start="27:5" pos:end="29:18">if <condition pos:start="27:8" pos:end="27:45">(<expr pos:start="27:9" pos:end="27:44"><operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:12">ret</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <call pos:start="27:16" pos:end="27:39"><name pos:start="27:16" pos:end="27:30">av_opt_set_dict</name><argument_list pos:start="27:31" pos:end="27:39">(<argument pos:start="27:32" pos:end="27:32"><expr pos:start="27:32" pos:end="27:32"><name pos:start="27:32" pos:end="27:32">s</name></expr></argument>, <argument pos:start="27:35" pos:end="27:38"><expr pos:start="27:35" pos:end="27:38"><operator pos:start="27:35" pos:end="27:35">&amp;</operator><name pos:start="27:36" pos:end="27:38">tmp</name></expr></argument>)</argument_list></call><operator pos:start="27:40" pos:end="27:40">)</operator> <operator pos:start="27:42" pos:end="27:42">&lt;</operator> <literal type="number" pos:start="27:44" pos:end="27:44">0</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:18"><block_content pos:start="29:9" pos:end="29:18">

        <goto pos:start="29:9" pos:end="29:18">goto <name pos:start="29:14" pos:end="29:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="40:0"><if pos:start="31:5" pos:end="40:0">if <condition pos:start="31:8" pos:end="33:81">(<expr pos:start="31:9" pos:end="33:80"><name pos:start="31:9" pos:end="31:20"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:20">priv_data</name></name> <operator pos:start="31:22" pos:end="31:23">&amp;&amp;</operator> <name pos:start="31:25" pos:end="31:46"><name pos:start="31:25" pos:end="31:25">s</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:34">oformat</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:46">priv_class</name></name> <operator pos:start="31:48" pos:end="31:49">&amp;&amp;</operator> <operator pos:start="31:51" pos:end="31:51">*</operator><operator pos:start="31:52" pos:end="31:52">(</operator><specifier pos:start="31:53" pos:end="31:57">const</specifier> <name pos:start="31:59" pos:end="31:65">AVClass</name><operator pos:start="31:66" pos:end="31:66">*</operator><operator pos:start="31:67" pos:end="31:67">*</operator><operator pos:start="31:68" pos:end="31:68">)</operator><name pos:start="31:69" pos:end="31:80"><name pos:start="31:69" pos:end="31:69">s</name><operator pos:start="31:70" pos:end="31:71">-&gt;</operator><name pos:start="31:72" pos:end="31:80">priv_data</name></name><operator pos:start="31:81" pos:end="31:82">==</operator><name pos:start="31:83" pos:end="31:104"><name pos:start="31:83" pos:end="31:83">s</name><operator pos:start="31:84" pos:end="31:85">-&gt;</operator><name pos:start="31:86" pos:end="31:92">oformat</name><operator pos:start="31:93" pos:end="31:94">-&gt;</operator><name pos:start="31:95" pos:end="31:104">priv_class</name></name> <operator pos:start="31:106" pos:end="31:107">&amp;&amp;</operator>

        <operator pos:start="33:9" pos:end="33:9">(</operator><name pos:start="33:10" pos:end="33:12">ret</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <call pos:start="33:16" pos:end="33:75"><name pos:start="33:16" pos:end="33:31">av_opt_set_dict2</name><argument_list pos:start="33:32" pos:end="33:75">(<argument pos:start="33:33" pos:end="33:44"><expr pos:start="33:33" pos:end="33:44"><name pos:start="33:33" pos:end="33:44"><name pos:start="33:33" pos:end="33:33">s</name><operator pos:start="33:34" pos:end="33:35">-&gt;</operator><name pos:start="33:36" pos:end="33:44">priv_data</name></name></expr></argument>, <argument pos:start="33:47" pos:end="33:50"><expr pos:start="33:47" pos:end="33:50"><operator pos:start="33:47" pos:end="33:47">&amp;</operator><name pos:start="33:48" pos:end="33:50">tmp</name></expr></argument>, <argument pos:start="33:53" pos:end="33:74"><expr pos:start="33:53" pos:end="33:74"><name pos:start="33:53" pos:end="33:74">AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call><operator pos:start="33:76" pos:end="33:76">)</operator> <operator pos:start="33:78" pos:end="33:78">&lt;</operator> <literal type="number" pos:start="33:80" pos:end="33:80">0</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="40:0"><block_content pos:start="35:9" pos:end="40:0">

        <goto pos:start="35:9" pos:end="40:0">goto <name pos:start="35:14" pos:end="35:17">fail</name>;</goto></block_content></block></if></if_stmt>



<cpp:if pos:start="39:1" pos:end="39:21">#<cpp:directive pos:start="39:2" pos:end="39:3">if</cpp:directive> <expr pos:start="39:5" pos:end="39:21"><name pos:start="39:5" pos:end="39:21">FF_API_LAVF_AVCTX</name></expr></cpp:if>

<macro pos:start="41:1" pos:end="41:31"><name pos:start="41:1" pos:end="41:31">FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

    <if_stmt pos:start="43:5" pos:end="75:5"><if pos:start="43:5" pos:end="75:5">if <condition pos:start="43:8" pos:end="43:78">(<expr pos:start="43:9" pos:end="43:77"><name pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:21">nb_streams</name></name> <operator pos:start="43:23" pos:end="43:24">&amp;&amp;</operator> <name pos:start="43:26" pos:end="43:38"><name pos:start="43:26" pos:end="43:26">s</name><operator pos:start="43:27" pos:end="43:28">-&gt;</operator><name pos:start="43:29" pos:end="43:35">streams</name><index pos:start="43:36" pos:end="43:38">[<expr pos:start="43:37" pos:end="43:37"><literal type="number" pos:start="43:37" pos:end="43:37">0</literal></expr>]</index></name><operator pos:start="43:39" pos:end="43:40">-&gt;</operator><name pos:start="43:41" pos:end="43:52"><name pos:start="43:41" pos:end="43:45">codec</name><operator pos:start="43:46" pos:end="43:47">-&gt;</operator><name pos:start="43:48" pos:end="43:52">flags</name></name> <operator pos:start="43:54" pos:end="43:54">&amp;</operator> <name pos:start="43:56" pos:end="43:77">AV_CODEC_FLAG_BITEXACT</name></expr>)</condition> <block pos:start="43:80" pos:end="75:5">{<block_content pos:start="45:9" pos:end="73:9">

        <if_stmt pos:start="45:9" pos:end="73:9"><if pos:start="45:9" pos:end="73:9">if <condition pos:start="45:12" pos:end="45:46">(<expr pos:start="45:13" pos:end="45:45"><operator pos:start="45:13" pos:end="45:13">!</operator><operator pos:start="45:14" pos:end="45:14">(</operator><name pos:start="45:15" pos:end="45:22"><name pos:start="45:15" pos:end="45:15">s</name><operator pos:start="45:16" pos:end="45:17">-&gt;</operator><name pos:start="45:18" pos:end="45:22">flags</name></name> <operator pos:start="45:24" pos:end="45:24">&amp;</operator> <name pos:start="45:26" pos:end="45:44">AVFMT_FLAG_BITEXACT</name><operator pos:start="45:45" pos:end="45:45">)</operator></expr>)</condition> <block pos:start="45:48" pos:end="73:9">{<block_content pos:start="49:13" pos:end="72:0">

<cpp:if pos:start="47:1" pos:end="47:24">#<cpp:directive pos:start="47:2" pos:end="47:3">if</cpp:directive> <expr pos:start="47:5" pos:end="47:24"><name pos:start="47:5" pos:end="47:24">FF_API_LAVF_BITEXACT</name></expr></cpp:if>

            <expr_stmt pos:start="49:13" pos:end="57:70"><expr pos:start="49:13" pos:end="57:69"><call pos:start="49:13" pos:end="57:69"><name pos:start="49:13" pos:end="49:18">av_log</name><argument_list pos:start="49:19" pos:end="57:69">(<argument pos:start="49:20" pos:end="49:20"><expr pos:start="49:20" pos:end="49:20"><name pos:start="49:20" pos:end="49:20">s</name></expr></argument>, <argument pos:start="49:23" pos:end="49:36"><expr pos:start="49:23" pos:end="49:36"><name pos:start="49:23" pos:end="49:36">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="51:20" pos:end="57:68"><expr pos:start="51:20" pos:end="57:68"><literal type="string" pos:start="51:20" pos:end="51:75">"Setting the AVFormatContext to bitexact mode, because "</literal>

                   <literal type="string" pos:start="53:20" pos:end="53:76">"the AVCodecContext is in that mode. This behavior will "</literal>

                   <literal type="string" pos:start="55:20" pos:end="55:77">"change in the future. To keep the current behavior, set "</literal>

                   <literal type="string" pos:start="57:20" pos:end="57:68">"AVFormatContext.flags |= AVFMT_FLAG_BITEXACT.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="62:0"><expr pos:start="59:13" pos:end="59:43"><name pos:start="59:13" pos:end="59:20"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:20">flags</name></name> <operator pos:start="59:22" pos:end="59:23">|=</operator> <name pos:start="59:25" pos:end="59:43">AVFMT_FLAG_BITEXACT</name></expr>;</expr_stmt>

<cpp:else pos:start="61:1" pos:end="61:5">#<cpp:directive pos:start="61:2" pos:end="61:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="63:13" pos:end="72:0"><expr pos:start="63:13" pos:end="69:69"><call pos:start="63:13" pos:end="69:69"><name pos:start="63:13" pos:end="63:18">av_log</name><argument_list pos:start="63:19" pos:end="69:69">(<argument pos:start="63:20" pos:end="63:20"><expr pos:start="63:20" pos:end="63:20"><name pos:start="63:20" pos:end="63:20">s</name></expr></argument>, <argument pos:start="63:23" pos:end="63:36"><expr pos:start="63:23" pos:end="63:36"><name pos:start="63:23" pos:end="63:36">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="65:20" pos:end="69:68"><expr pos:start="65:20" pos:end="69:68"><literal type="string" pos:start="65:20" pos:end="65:78">"The AVFormatContext is not in set to bitexact mode, only "</literal>

                   <literal type="string" pos:start="67:20" pos:end="67:70">"the AVCodecContext. If this is not intended, set "</literal>

                   <literal type="string" pos:start="69:20" pos:end="69:68">"AVFormatContext.flags |= AVFMT_FLAG_BITEXACT.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<macro pos:start="77:1" pos:end="80:0"><name pos:start="77:1" pos:end="80:0">FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif>



    <comment type="line" pos:start="83:5" pos:end="83:25">// some sanity checks</comment>

    <if_stmt pos:start="85:5" pos:end="93:5"><if pos:start="85:5" pos:end="93:5">if <condition pos:start="85:8" pos:end="85:61">(<expr pos:start="85:9" pos:end="85:60"><name pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:21">nb_streams</name></name> <operator pos:start="85:23" pos:end="85:24">==</operator> <literal type="number" pos:start="85:26" pos:end="85:26">0</literal> <operator pos:start="85:28" pos:end="85:29">&amp;&amp;</operator> <operator pos:start="85:31" pos:end="85:31">!</operator><operator pos:start="85:32" pos:end="85:32">(</operator><name pos:start="85:33" pos:end="85:41"><name pos:start="85:33" pos:end="85:34">of</name><operator pos:start="85:35" pos:end="85:36">-&gt;</operator><name pos:start="85:37" pos:end="85:41">flags</name></name> <operator pos:start="85:43" pos:end="85:43">&amp;</operator> <name pos:start="85:45" pos:end="85:59">AVFMT_NOSTREAMS</name><operator pos:start="85:60" pos:end="85:60">)</operator></expr>)</condition> <block pos:start="85:63" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:18">

        <expr_stmt pos:start="87:9" pos:end="87:70"><expr pos:start="87:9" pos:end="87:69"><call pos:start="87:9" pos:end="87:69"><name pos:start="87:9" pos:end="87:14">av_log</name><argument_list pos:start="87:15" pos:end="87:69">(<argument pos:start="87:16" pos:end="87:16"><expr pos:start="87:16" pos:end="87:16"><name pos:start="87:16" pos:end="87:16">s</name></expr></argument>, <argument pos:start="87:19" pos:end="87:30"><expr pos:start="87:19" pos:end="87:30"><name pos:start="87:19" pos:end="87:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:33" pos:end="87:68"><expr pos:start="87:33" pos:end="87:68"><literal type="string" pos:start="87:33" pos:end="87:68">"No streams to mux were specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:30"><expr pos:start="89:9" pos:end="89:29"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <call pos:start="89:15" pos:end="89:29"><name pos:start="89:15" pos:end="89:21">AVERROR</name><argument_list pos:start="89:22" pos:end="89:29">(<argument pos:start="89:23" pos:end="89:28"><expr pos:start="89:23" pos:end="89:28"><name pos:start="89:23" pos:end="89:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="91:9" pos:end="91:18">goto <name pos:start="91:14" pos:end="91:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="97:5" pos:end="319:5">for <control pos:start="97:9" pos:end="97:39">(<init pos:start="97:10" pos:end="97:15"><expr pos:start="97:10" pos:end="97:14"><name pos:start="97:10" pos:end="97:10">i</name> <operator pos:start="97:12" pos:end="97:12">=</operator> <literal type="number" pos:start="97:14" pos:end="97:14">0</literal></expr>;</init> <condition pos:start="97:17" pos:end="97:34"><expr pos:start="97:17" pos:end="97:33"><name pos:start="97:17" pos:end="97:17">i</name> <operator pos:start="97:19" pos:end="97:19">&lt;</operator> <name pos:start="97:21" pos:end="97:33"><name pos:start="97:21" pos:end="97:21">s</name><operator pos:start="97:22" pos:end="97:23">-&gt;</operator><name pos:start="97:24" pos:end="97:33">nb_streams</name></name></expr>;</condition> <incr pos:start="97:36" pos:end="97:38"><expr pos:start="97:36" pos:end="97:38"><name pos:start="97:36" pos:end="97:36">i</name><operator pos:start="97:37" pos:end="97:38">++</operator></expr></incr>)</control> <block pos:start="97:41" pos:end="319:5">{<block_content pos:start="99:9" pos:end="317:50">

        <expr_stmt pos:start="99:9" pos:end="99:28"><expr pos:start="99:9" pos:end="99:27"><name pos:start="99:9" pos:end="99:10">st</name>  <operator pos:start="99:13" pos:end="99:13">=</operator> <name pos:start="99:15" pos:end="99:27"><name pos:start="99:15" pos:end="99:15">s</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:24">streams</name><index pos:start="99:25" pos:end="99:27">[<expr pos:start="99:26" pos:end="99:26"><name pos:start="99:26" pos:end="99:26">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="106:0"><expr pos:start="101:9" pos:end="101:26"><name pos:start="101:9" pos:end="101:11">par</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <name pos:start="101:15" pos:end="101:26"><name pos:start="101:15" pos:end="101:16">st</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:26">codecpar</name></name></expr>;</expr_stmt>



<cpp:if pos:start="105:1" pos:end="105:24">#<cpp:directive pos:start="105:2" pos:end="105:3">if</cpp:directive> <expr pos:start="105:5" pos:end="105:24"><name pos:start="105:5" pos:end="105:24">FF_API_LAVF_CODEC_TB</name></expr></cpp:if>

<macro pos:start="107:1" pos:end="107:31"><name pos:start="107:1" pos:end="107:31">FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

        <if_stmt pos:start="109:9" pos:end="119:9"><if pos:start="109:9" pos:end="119:9">if <condition pos:start="109:12" pos:end="109:59">(<expr pos:start="109:13" pos:end="109:58"><operator pos:start="109:13" pos:end="109:13">!</operator><name pos:start="109:14" pos:end="109:30"><name pos:start="109:14" pos:end="109:15">st</name><operator pos:start="109:16" pos:end="109:17">-&gt;</operator><name pos:start="109:18" pos:end="109:26">time_base</name><operator pos:start="109:27" pos:end="109:27">.</operator><name pos:start="109:28" pos:end="109:30">num</name></name> <operator pos:start="109:32" pos:end="109:33">&amp;&amp;</operator> <name pos:start="109:35" pos:end="109:58"><name pos:start="109:35" pos:end="109:36">st</name><operator pos:start="109:37" pos:end="109:38">-&gt;</operator><name pos:start="109:39" pos:end="109:43">codec</name><operator pos:start="109:44" pos:end="109:45">-&gt;</operator><name pos:start="109:46" pos:end="109:54">time_base</name><operator pos:start="109:55" pos:end="109:55">.</operator><name pos:start="109:56" pos:end="109:58">num</name></name></expr>)</condition> <block pos:start="109:61" pos:end="119:9">{<block_content pos:start="111:13" pos:end="117:92">

            <expr_stmt pos:start="111:13" pos:end="115:52"><expr pos:start="111:13" pos:end="115:51"><call pos:start="111:13" pos:end="115:51"><name pos:start="111:13" pos:end="111:18">av_log</name><argument_list pos:start="111:19" pos:end="115:51">(<argument pos:start="111:20" pos:end="111:20"><expr pos:start="111:20" pos:end="111:20"><name pos:start="111:20" pos:end="111:20">s</name></expr></argument>, <argument pos:start="111:23" pos:end="111:36"><expr pos:start="111:23" pos:end="111:36"><name pos:start="111:23" pos:end="111:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="111:39" pos:end="115:50"><expr pos:start="111:39" pos:end="115:50"><literal type="string" pos:start="111:39" pos:end="111:76">"Using AVStream.codec.time_base as a "</literal>

                   <literal type="string" pos:start="113:20" pos:end="113:67">"timebase hint to the muxer is deprecated. Set "</literal>

                   <literal type="string" pos:start="115:20" pos:end="115:50">"AVStream.time_base instead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:92"><expr pos:start="117:13" pos:end="117:91"><call pos:start="117:13" pos:end="117:91"><name pos:start="117:13" pos:end="117:31">avpriv_set_pts_info</name><argument_list pos:start="117:32" pos:end="117:91">(<argument pos:start="117:33" pos:end="117:34"><expr pos:start="117:33" pos:end="117:34"><name pos:start="117:33" pos:end="117:34">st</name></expr></argument>, <argument pos:start="117:37" pos:end="117:38"><expr pos:start="117:37" pos:end="117:38"><literal type="number" pos:start="117:37" pos:end="117:38">64</literal></expr></argument>, <argument pos:start="117:41" pos:end="117:64"><expr pos:start="117:41" pos:end="117:64"><name pos:start="117:41" pos:end="117:64"><name pos:start="117:41" pos:end="117:42">st</name><operator pos:start="117:43" pos:end="117:44">-&gt;</operator><name pos:start="117:45" pos:end="117:49">codec</name><operator pos:start="117:50" pos:end="117:51">-&gt;</operator><name pos:start="117:52" pos:end="117:60">time_base</name><operator pos:start="117:61" pos:end="117:61">.</operator><name pos:start="117:62" pos:end="117:64">num</name></name></expr></argument>, <argument pos:start="117:67" pos:end="117:90"><expr pos:start="117:67" pos:end="117:90"><name pos:start="117:67" pos:end="117:90"><name pos:start="117:67" pos:end="117:68">st</name><operator pos:start="117:69" pos:end="117:70">-&gt;</operator><name pos:start="117:71" pos:end="117:75">codec</name><operator pos:start="117:76" pos:end="117:77">-&gt;</operator><name pos:start="117:78" pos:end="117:86">time_base</name><operator pos:start="117:87" pos:end="117:87">.</operator><name pos:start="117:88" pos:end="117:90">den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<expr_stmt pos:start="121:1" pos:end="129:31"><expr pos:start="121:1" pos:end="129:31"><name pos:start="121:1" pos:end="128:0">FF_ENABLE_DEPRECATION_WARNINGS</name>

<cpp:endif pos:start="123:1" pos:end="123:6">#<cpp:directive pos:start="123:2" pos:end="123:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="127:1" pos:end="127:21">#<cpp:directive pos:start="127:2" pos:end="127:3">if</cpp:directive> <expr pos:start="127:5" pos:end="127:21"><name pos:start="127:5" pos:end="127:21">FF_API_LAVF_AVCTX</name></expr></cpp:if>

<name pos:start="129:1" pos:end="129:31">FF_DISABLE_DEPRECATION_WARNINGS</name></expr></expr_stmt>

        <if_stmt pos:start="131:9" pos:end="147:9"><if pos:start="131:9" pos:end="147:9">if <condition pos:start="131:12" pos:end="133:61">(<expr pos:start="131:13" pos:end="133:60"><name pos:start="131:13" pos:end="131:36"><name pos:start="131:13" pos:end="131:14">st</name><operator pos:start="131:15" pos:end="131:16">-&gt;</operator><name pos:start="131:17" pos:end="131:24">codecpar</name><operator pos:start="131:25" pos:end="131:26">-&gt;</operator><name pos:start="131:27" pos:end="131:36">codec_type</name></name> <operator pos:start="131:38" pos:end="131:39">==</operator> <name pos:start="131:41" pos:end="131:60">AVMEDIA_TYPE_UNKNOWN</name> <operator pos:start="131:62" pos:end="131:63">&amp;&amp;</operator>

            <name pos:start="133:13" pos:end="133:33"><name pos:start="133:13" pos:end="133:14">st</name><operator pos:start="133:15" pos:end="133:16">-&gt;</operator><name pos:start="133:17" pos:end="133:21">codec</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:33">codec_type</name></name>    <operator pos:start="133:38" pos:end="133:39">!=</operator> <name pos:start="133:41" pos:end="133:60">AVMEDIA_TYPE_UNKNOWN</name></expr>)</condition> <block pos:start="133:63" pos:end="147:9">{<block_content pos:start="135:13" pos:end="145:26">

            <expr_stmt pos:start="135:13" pos:end="139:33"><expr pos:start="135:13" pos:end="139:32"><call pos:start="135:13" pos:end="139:32"><name pos:start="135:13" pos:end="135:18">av_log</name><argument_list pos:start="135:19" pos:end="139:32">(<argument pos:start="135:20" pos:end="135:20"><expr pos:start="135:20" pos:end="135:20"><name pos:start="135:20" pos:end="135:20">s</name></expr></argument>, <argument pos:start="135:23" pos:end="135:36"><expr pos:start="135:23" pos:end="135:36"><name pos:start="135:23" pos:end="135:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="135:39" pos:end="139:31"><expr pos:start="135:39" pos:end="139:31"><literal type="string" pos:start="135:39" pos:end="135:75">"Using AVStream.codec to pass codec "</literal>

                   <literal type="string" pos:start="137:20" pos:end="137:79">"parameters to muxers is deprecated, use AVStream.codecpar "</literal>

                   <literal type="string" pos:start="139:20" pos:end="139:31">"instead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:75"><expr pos:start="141:13" pos:end="141:74"><name pos:start="141:13" pos:end="141:15">ret</name> <operator pos:start="141:17" pos:end="141:17">=</operator> <call pos:start="141:19" pos:end="141:74"><name pos:start="141:19" pos:end="141:49">avcodec_parameters_from_context</name><argument_list pos:start="141:50" pos:end="141:74">(<argument pos:start="141:51" pos:end="141:62"><expr pos:start="141:51" pos:end="141:62"><name pos:start="141:51" pos:end="141:62"><name pos:start="141:51" pos:end="141:52">st</name><operator pos:start="141:53" pos:end="141:54">-&gt;</operator><name pos:start="141:55" pos:end="141:62">codecpar</name></name></expr></argument>, <argument pos:start="141:65" pos:end="141:73"><expr pos:start="141:65" pos:end="141:73"><name pos:start="141:65" pos:end="141:73"><name pos:start="141:65" pos:end="141:66">st</name><operator pos:start="141:67" pos:end="141:68">-&gt;</operator><name pos:start="141:69" pos:end="141:73">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="143:13" pos:end="145:26"><if pos:start="143:13" pos:end="145:26">if <condition pos:start="143:16" pos:end="143:24">(<expr pos:start="143:17" pos:end="143:23"><name pos:start="143:17" pos:end="143:19">ret</name> <operator pos:start="143:21" pos:end="143:21">&lt;</operator> <literal type="number" pos:start="143:23" pos:end="143:23">0</literal></expr>)</condition><block type="pseudo" pos:start="145:17" pos:end="145:26"><block_content pos:start="145:17" pos:end="145:26">

                <goto pos:start="145:17" pos:end="145:26">goto <name pos:start="145:22" pos:end="145:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

<decl_stmt pos:start="149:1" pos:end="159:79"><decl pos:start="149:1" pos:end="159:78"><type pos:start="149:1" pos:end="152:0"><name pos:start="149:1" pos:end="152:0">FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif pos:start="151:1" pos:end="151:6">#<cpp:directive pos:start="151:2" pos:end="151:6">endif</cpp:directive></cpp:endif>



        <comment type="block" pos:start="155:9" pos:end="157:57">/* update internal context from codecpar, old bsf api needs this

         * FIXME: remove when autobsf uses new bsf API */</comment>

        <name pos:start="159:9" pos:end="159:11">ret</name> <init pos:start="159:13" pos:end="159:78">= <expr pos:start="159:15" pos:end="159:78"><call pos:start="159:15" pos:end="159:78"><name pos:start="159:15" pos:end="159:43">avcodec_parameters_to_context</name><argument_list pos:start="159:44" pos:end="159:78">(<argument pos:start="159:45" pos:end="159:63"><expr pos:start="159:45" pos:end="159:63"><name pos:start="159:45" pos:end="159:63"><name pos:start="159:45" pos:end="159:46">st</name><operator pos:start="159:47" pos:end="159:48">-&gt;</operator><name pos:start="159:49" pos:end="159:56">internal</name><operator pos:start="159:57" pos:end="159:58">-&gt;</operator><name pos:start="159:59" pos:end="159:63">avctx</name></name></expr></argument>, <argument pos:start="159:66" pos:end="159:77"><expr pos:start="159:66" pos:end="159:77"><name pos:start="159:66" pos:end="159:77"><name pos:start="159:66" pos:end="159:67">st</name><operator pos:start="159:68" pos:end="159:69">-&gt;</operator><name pos:start="159:70" pos:end="159:77">codecpar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="161:9" pos:end="163:22"><if pos:start="161:9" pos:end="163:22">if <condition pos:start="161:12" pos:end="161:20">(<expr pos:start="161:13" pos:end="161:19"><name pos:start="161:13" pos:end="161:15">ret</name> <operator pos:start="161:17" pos:end="161:17">&lt;</operator> <literal type="number" pos:start="161:19" pos:end="161:19">0</literal></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:22"><block_content pos:start="163:13" pos:end="163:22">

            <goto pos:start="163:13" pos:end="163:22">goto <name pos:start="163:18" pos:end="163:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="167:9" pos:end="179:9"><if pos:start="167:9" pos:end="179:9">if <condition pos:start="167:12" pos:end="167:31">(<expr pos:start="167:13" pos:end="167:30"><operator pos:start="167:13" pos:end="167:13">!</operator><name pos:start="167:14" pos:end="167:30"><name pos:start="167:14" pos:end="167:15">st</name><operator pos:start="167:16" pos:end="167:17">-&gt;</operator><name pos:start="167:18" pos:end="167:26">time_base</name><operator pos:start="167:27" pos:end="167:27">.</operator><name pos:start="167:28" pos:end="167:30">num</name></name></expr>)</condition> <block pos:start="167:33" pos:end="179:9">{<block_content pos:start="171:13" pos:end="177:54">

            <comment type="block" pos:start="169:13" pos:end="169:58">/* fall back on the default timebase values */</comment>

            <if_stmt pos:start="171:13" pos:end="177:54"><if pos:start="171:13" pos:end="173:65">if <condition pos:start="171:16" pos:end="171:74">(<expr pos:start="171:17" pos:end="171:73"><name pos:start="171:17" pos:end="171:31"><name pos:start="171:17" pos:end="171:19">par</name><operator pos:start="171:20" pos:end="171:21">-&gt;</operator><name pos:start="171:22" pos:end="171:31">codec_type</name></name> <operator pos:start="171:33" pos:end="171:34">==</operator> <name pos:start="171:36" pos:end="171:53">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="171:55" pos:end="171:56">&amp;&amp;</operator> <name pos:start="171:58" pos:end="171:73"><name pos:start="171:58" pos:end="171:60">par</name><operator pos:start="171:61" pos:end="171:62">-&gt;</operator><name pos:start="171:63" pos:end="171:73">sample_rate</name></name></expr>)</condition><block type="pseudo" pos:start="173:17" pos:end="173:65"><block_content pos:start="173:17" pos:end="173:65">

                <expr_stmt pos:start="173:17" pos:end="173:65"><expr pos:start="173:17" pos:end="173:64"><call pos:start="173:17" pos:end="173:64"><name pos:start="173:17" pos:end="173:35">avpriv_set_pts_info</name><argument_list pos:start="173:36" pos:end="173:64">(<argument pos:start="173:37" pos:end="173:38"><expr pos:start="173:37" pos:end="173:38"><name pos:start="173:37" pos:end="173:38">st</name></expr></argument>, <argument pos:start="173:41" pos:end="173:42"><expr pos:start="173:41" pos:end="173:42"><literal type="number" pos:start="173:41" pos:end="173:42">64</literal></expr></argument>, <argument pos:start="173:45" pos:end="173:45"><expr pos:start="173:45" pos:end="173:45"><literal type="number" pos:start="173:45" pos:end="173:45">1</literal></expr></argument>, <argument pos:start="173:48" pos:end="173:63"><expr pos:start="173:48" pos:end="173:63"><name pos:start="173:48" pos:end="173:63"><name pos:start="173:48" pos:end="173:50">par</name><operator pos:start="173:51" pos:end="173:52">-&gt;</operator><name pos:start="173:53" pos:end="173:63">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="175:13" pos:end="177:54">else<block type="pseudo" pos:start="177:17" pos:end="177:54"><block_content pos:start="177:17" pos:end="177:54">

                <expr_stmt pos:start="177:17" pos:end="177:54"><expr pos:start="177:17" pos:end="177:53"><call pos:start="177:17" pos:end="177:53"><name pos:start="177:17" pos:end="177:35">avpriv_set_pts_info</name><argument_list pos:start="177:36" pos:end="177:53">(<argument pos:start="177:37" pos:end="177:38"><expr pos:start="177:37" pos:end="177:38"><name pos:start="177:37" pos:end="177:38">st</name></expr></argument>, <argument pos:start="177:41" pos:end="177:42"><expr pos:start="177:41" pos:end="177:42"><literal type="number" pos:start="177:41" pos:end="177:42">33</literal></expr></argument>, <argument pos:start="177:45" pos:end="177:45"><expr pos:start="177:45" pos:end="177:45"><literal type="number" pos:start="177:45" pos:end="177:45">1</literal></expr></argument>, <argument pos:start="177:48" pos:end="177:52"><expr pos:start="177:48" pos:end="177:52"><literal type="number" pos:start="177:48" pos:end="177:52">90000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="183:9" pos:end="253:9">switch <condition pos:start="183:16" pos:end="183:32">(<expr pos:start="183:17" pos:end="183:31"><name pos:start="183:17" pos:end="183:31"><name pos:start="183:17" pos:end="183:19">par</name><operator pos:start="183:20" pos:end="183:21">-&gt;</operator><name pos:start="183:22" pos:end="183:31">codec_type</name></name></expr>)</condition> <block pos:start="183:34" pos:end="253:9">{<block_content pos:start="185:9" pos:end="251:18">

        <case pos:start="185:9" pos:end="185:32">case <expr pos:start="185:14" pos:end="185:31"><name pos:start="185:14" pos:end="185:31">AVMEDIA_TYPE_AUDIO</name></expr>:</case>

            <if_stmt pos:start="187:13" pos:end="195:13"><if pos:start="187:13" pos:end="195:13">if <condition pos:start="187:16" pos:end="187:38">(<expr pos:start="187:17" pos:end="187:37"><name pos:start="187:17" pos:end="187:32"><name pos:start="187:17" pos:end="187:19">par</name><operator pos:start="187:20" pos:end="187:21">-&gt;</operator><name pos:start="187:22" pos:end="187:32">sample_rate</name></name> <operator pos:start="187:34" pos:end="187:35">&lt;=</operator> <literal type="number" pos:start="187:37" pos:end="187:37">0</literal></expr>)</condition> <block pos:start="187:40" pos:end="195:13">{<block_content pos:start="189:17" pos:end="193:26">

                <expr_stmt pos:start="189:17" pos:end="189:65"><expr pos:start="189:17" pos:end="189:64"><call pos:start="189:17" pos:end="189:64"><name pos:start="189:17" pos:end="189:22">av_log</name><argument_list pos:start="189:23" pos:end="189:64">(<argument pos:start="189:24" pos:end="189:24"><expr pos:start="189:24" pos:end="189:24"><name pos:start="189:24" pos:end="189:24">s</name></expr></argument>, <argument pos:start="189:27" pos:end="189:38"><expr pos:start="189:27" pos:end="189:38"><name pos:start="189:27" pos:end="189:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="189:41" pos:end="189:63"><expr pos:start="189:41" pos:end="189:63"><literal type="string" pos:start="189:41" pos:end="189:63">"sample rate not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="191:17" pos:end="191:38"><expr pos:start="191:17" pos:end="191:37"><name pos:start="191:17" pos:end="191:19">ret</name> <operator pos:start="191:21" pos:end="191:21">=</operator> <call pos:start="191:23" pos:end="191:37"><name pos:start="191:23" pos:end="191:29">AVERROR</name><argument_list pos:start="191:30" pos:end="191:37">(<argument pos:start="191:31" pos:end="191:36"><expr pos:start="191:31" pos:end="191:36"><name pos:start="191:31" pos:end="191:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="193:17" pos:end="193:26">goto <name pos:start="193:22" pos:end="193:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="197:13" pos:end="201:78"><if pos:start="197:13" pos:end="201:78">if <condition pos:start="197:16" pos:end="197:34">(<expr pos:start="197:17" pos:end="197:33"><operator pos:start="197:17" pos:end="197:17">!</operator><name pos:start="197:18" pos:end="197:33"><name pos:start="197:18" pos:end="197:20">par</name><operator pos:start="197:21" pos:end="197:22">-&gt;</operator><name pos:start="197:23" pos:end="197:33">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="199:17" pos:end="201:78"><block_content pos:start="199:17" pos:end="201:78">

                <expr_stmt pos:start="199:17" pos:end="201:78"><expr pos:start="199:17" pos:end="201:77"><name pos:start="199:17" pos:end="199:32"><name pos:start="199:17" pos:end="199:19">par</name><operator pos:start="199:20" pos:end="199:21">-&gt;</operator><name pos:start="199:22" pos:end="199:32">block_align</name></name> <operator pos:start="199:34" pos:end="199:34">=</operator> <name pos:start="199:36" pos:end="199:48"><name pos:start="199:36" pos:end="199:38">par</name><operator pos:start="199:39" pos:end="199:40">-&gt;</operator><name pos:start="199:41" pos:end="199:48">channels</name></name> <operator pos:start="199:50" pos:end="199:50">*</operator>

                                   <call pos:start="201:36" pos:end="201:72"><name pos:start="201:36" pos:end="201:57">av_get_bits_per_sample</name><argument_list pos:start="201:58" pos:end="201:72">(<argument pos:start="201:59" pos:end="201:71"><expr pos:start="201:59" pos:end="201:71"><name pos:start="201:59" pos:end="201:71"><name pos:start="201:59" pos:end="201:61">par</name><operator pos:start="201:62" pos:end="201:63">-&gt;</operator><name pos:start="201:64" pos:end="201:71">codec_id</name></name></expr></argument>)</argument_list></call> <operator pos:start="201:74" pos:end="201:75">&gt;&gt;</operator> <literal type="number" pos:start="201:77" pos:end="201:77">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="203:13" pos:end="203:18">break;</break>

        <case pos:start="205:9" pos:end="205:32">case <expr pos:start="205:14" pos:end="205:31"><name pos:start="205:14" pos:end="205:31">AVMEDIA_TYPE_VIDEO</name></expr>:</case>

            <if_stmt pos:start="207:13" pos:end="217:13"><if pos:start="207:13" pos:end="217:13">if <condition pos:start="207:16" pos:end="209:50">(<expr pos:start="207:17" pos:end="209:49"><operator pos:start="207:17" pos:end="207:17">(</operator><name pos:start="207:18" pos:end="207:27"><name pos:start="207:18" pos:end="207:20">par</name><operator pos:start="207:21" pos:end="207:22">-&gt;</operator><name pos:start="207:23" pos:end="207:27">width</name></name> <operator pos:start="207:29" pos:end="207:30">&lt;=</operator> <literal type="number" pos:start="207:32" pos:end="207:32">0</literal> <operator pos:start="207:34" pos:end="207:35">||</operator> <name pos:start="207:37" pos:end="207:47"><name pos:start="207:37" pos:end="207:39">par</name><operator pos:start="207:40" pos:end="207:41">-&gt;</operator><name pos:start="207:42" pos:end="207:47">height</name></name> <operator pos:start="207:49" pos:end="207:50">&lt;=</operator> <literal type="number" pos:start="207:52" pos:end="207:52">0</literal><operator pos:start="207:53" pos:end="207:53">)</operator> <operator pos:start="207:55" pos:end="207:56">&amp;&amp;</operator>

                <operator pos:start="209:17" pos:end="209:17">!</operator><operator pos:start="209:18" pos:end="209:18">(</operator><name pos:start="209:19" pos:end="209:27"><name pos:start="209:19" pos:end="209:20">of</name><operator pos:start="209:21" pos:end="209:22">-&gt;</operator><name pos:start="209:23" pos:end="209:27">flags</name></name> <operator pos:start="209:29" pos:end="209:29">&amp;</operator> <name pos:start="209:31" pos:end="209:48">AVFMT_NODIMENSIONS</name><operator pos:start="209:49" pos:end="209:49">)</operator></expr>)</condition> <block pos:start="209:52" pos:end="217:13">{<block_content pos:start="211:17" pos:end="215:26">

                <expr_stmt pos:start="211:17" pos:end="211:64"><expr pos:start="211:17" pos:end="211:63"><call pos:start="211:17" pos:end="211:63"><name pos:start="211:17" pos:end="211:22">av_log</name><argument_list pos:start="211:23" pos:end="211:63">(<argument pos:start="211:24" pos:end="211:24"><expr pos:start="211:24" pos:end="211:24"><name pos:start="211:24" pos:end="211:24">s</name></expr></argument>, <argument pos:start="211:27" pos:end="211:38"><expr pos:start="211:27" pos:end="211:38"><name pos:start="211:27" pos:end="211:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="211:41" pos:end="211:62"><expr pos:start="211:41" pos:end="211:62"><literal type="string" pos:start="211:41" pos:end="211:62">"dimensions not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="213:17" pos:end="213:38"><expr pos:start="213:17" pos:end="213:37"><name pos:start="213:17" pos:end="213:19">ret</name> <operator pos:start="213:21" pos:end="213:21">=</operator> <call pos:start="213:23" pos:end="213:37"><name pos:start="213:23" pos:end="213:29">AVERROR</name><argument_list pos:start="213:30" pos:end="213:37">(<argument pos:start="213:31" pos:end="213:36"><expr pos:start="213:31" pos:end="213:36"><name pos:start="213:31" pos:end="213:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="215:17" pos:end="215:26">goto <name pos:start="215:22" pos:end="215:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="219:13" pos:end="249:13"><if pos:start="219:13" pos:end="249:13">if <condition pos:start="219:16" pos:end="223:13">(<expr pos:start="219:17" pos:end="221:131"><call pos:start="219:17" pos:end="219:75"><name pos:start="219:17" pos:end="219:24">av_cmp_q</name><argument_list pos:start="219:25" pos:end="219:75">(<argument pos:start="219:26" pos:end="219:48"><expr pos:start="219:26" pos:end="219:48"><name pos:start="219:26" pos:end="219:48"><name pos:start="219:26" pos:end="219:27">st</name><operator pos:start="219:28" pos:end="219:29">-&gt;</operator><name pos:start="219:30" pos:end="219:48">sample_aspect_ratio</name></name></expr></argument>, <argument pos:start="219:51" pos:end="219:74"><expr pos:start="219:51" pos:end="219:74"><name pos:start="219:51" pos:end="219:74"><name pos:start="219:51" pos:end="219:53">par</name><operator pos:start="219:54" pos:end="219:55">-&gt;</operator><name pos:start="219:56" pos:end="219:74">sample_aspect_ratio</name></name></expr></argument>)</argument_list></call>

                <operator pos:start="221:17" pos:end="221:18">&amp;&amp;</operator> <call pos:start="221:20" pos:end="221:91"><name pos:start="221:20" pos:end="221:23">fabs</name><argument_list pos:start="221:24" pos:end="221:91">(<argument pos:start="221:25" pos:end="221:90"><expr pos:start="221:25" pos:end="221:90"><call pos:start="221:25" pos:end="221:55"><name pos:start="221:25" pos:end="221:30">av_q2d</name><argument_list pos:start="221:31" pos:end="221:55">(<argument pos:start="221:32" pos:end="221:54"><expr pos:start="221:32" pos:end="221:54"><name pos:start="221:32" pos:end="221:54"><name pos:start="221:32" pos:end="221:33">st</name><operator pos:start="221:34" pos:end="221:35">-&gt;</operator><name pos:start="221:36" pos:end="221:54">sample_aspect_ratio</name></name></expr></argument>)</argument_list></call> <operator pos:start="221:57" pos:end="221:57">-</operator> <call pos:start="221:59" pos:end="221:90"><name pos:start="221:59" pos:end="221:64">av_q2d</name><argument_list pos:start="221:65" pos:end="221:90">(<argument pos:start="221:66" pos:end="221:89"><expr pos:start="221:66" pos:end="221:89"><name pos:start="221:66" pos:end="221:89"><name pos:start="221:66" pos:end="221:68">par</name><operator pos:start="221:69" pos:end="221:70">-&gt;</operator><name pos:start="221:71" pos:end="221:89">sample_aspect_ratio</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="221:93" pos:end="221:93">&gt;</operator> <literal type="number" pos:start="221:95" pos:end="221:99">0.004</literal><operator pos:start="221:100" pos:end="221:100">*</operator><call pos:start="221:101" pos:end="221:131"><name pos:start="221:101" pos:end="221:106">av_q2d</name><argument_list pos:start="221:107" pos:end="221:131">(<argument pos:start="221:108" pos:end="221:130"><expr pos:start="221:108" pos:end="221:130"><name pos:start="221:108" pos:end="221:130"><name pos:start="221:108" pos:end="221:109">st</name><operator pos:start="221:110" pos:end="221:111">-&gt;</operator><name pos:start="221:112" pos:end="221:130">sample_aspect_ratio</name></name></expr></argument>)</argument_list></call></expr>

            )</condition> <block pos:start="223:15" pos:end="249:13">{<block_content pos:start="225:17" pos:end="247:17">

                <if_stmt pos:start="225:17" pos:end="247:17"><if pos:start="225:17" pos:end="247:17">if <condition pos:start="225:20" pos:end="231:54">(<expr pos:start="225:21" pos:end="231:53"><name pos:start="225:21" pos:end="225:47"><name pos:start="225:21" pos:end="225:22">st</name><operator pos:start="225:23" pos:end="225:24">-&gt;</operator><name pos:start="225:25" pos:end="225:43">sample_aspect_ratio</name><operator pos:start="225:44" pos:end="225:44">.</operator><name pos:start="225:45" pos:end="225:47">num</name></name> <operator pos:start="225:49" pos:end="225:50">!=</operator> <literal type="number" pos:start="225:52" pos:end="225:52">0</literal> <operator pos:start="225:54" pos:end="225:55">&amp;&amp;</operator>

                    <name pos:start="227:21" pos:end="227:47"><name pos:start="227:21" pos:end="227:22">st</name><operator pos:start="227:23" pos:end="227:24">-&gt;</operator><name pos:start="227:25" pos:end="227:43">sample_aspect_ratio</name><operator pos:start="227:44" pos:end="227:44">.</operator><name pos:start="227:45" pos:end="227:47">den</name></name> <operator pos:start="227:49" pos:end="227:50">!=</operator> <literal type="number" pos:start="227:52" pos:end="227:52">0</literal> <operator pos:start="227:54" pos:end="227:55">&amp;&amp;</operator>

                    <name pos:start="229:21" pos:end="229:48"><name pos:start="229:21" pos:end="229:23">par</name><operator pos:start="229:24" pos:end="229:25">-&gt;</operator><name pos:start="229:26" pos:end="229:44">sample_aspect_ratio</name><operator pos:start="229:45" pos:end="229:45">.</operator><name pos:start="229:46" pos:end="229:48">num</name></name> <operator pos:start="229:50" pos:end="229:51">!=</operator> <literal type="number" pos:start="229:53" pos:end="229:53">0</literal> <operator pos:start="229:55" pos:end="229:56">&amp;&amp;</operator>

                    <name pos:start="231:21" pos:end="231:48"><name pos:start="231:21" pos:end="231:23">par</name><operator pos:start="231:24" pos:end="231:25">-&gt;</operator><name pos:start="231:26" pos:end="231:44">sample_aspect_ratio</name><operator pos:start="231:45" pos:end="231:45">.</operator><name pos:start="231:46" pos:end="231:48">den</name></name> <operator pos:start="231:50" pos:end="231:51">!=</operator> <literal type="number" pos:start="231:53" pos:end="231:53">0</literal></expr>)</condition> <block pos:start="231:56" pos:end="247:17">{<block_content pos:start="233:21" pos:end="245:30">

                    <expr_stmt pos:start="233:21" pos:end="241:57"><expr pos:start="233:21" pos:end="241:56"><call pos:start="233:21" pos:end="241:56"><name pos:start="233:21" pos:end="233:26">av_log</name><argument_list pos:start="233:27" pos:end="241:56">(<argument pos:start="233:28" pos:end="233:28"><expr pos:start="233:28" pos:end="233:28"><name pos:start="233:28" pos:end="233:28">s</name></expr></argument>, <argument pos:start="233:31" pos:end="233:42"><expr pos:start="233:31" pos:end="233:42"><name pos:start="233:31" pos:end="233:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="233:45" pos:end="235:64"><expr pos:start="233:45" pos:end="235:64"><literal type="string" pos:start="233:45" pos:end="233:82">"Aspect ratio mismatch between muxer "</literal>

                           <literal type="string" pos:start="235:28" pos:end="235:64">"(%d/%d) and encoder layer (%d/%d)\n"</literal></expr></argument>,

                           <argument pos:start="237:28" pos:end="237:54"><expr pos:start="237:28" pos:end="237:54"><name pos:start="237:28" pos:end="237:54"><name pos:start="237:28" pos:end="237:29">st</name><operator pos:start="237:30" pos:end="237:31">-&gt;</operator><name pos:start="237:32" pos:end="237:50">sample_aspect_ratio</name><operator pos:start="237:51" pos:end="237:51">.</operator><name pos:start="237:52" pos:end="237:54">num</name></name></expr></argument>, <argument pos:start="237:57" pos:end="237:83"><expr pos:start="237:57" pos:end="237:83"><name pos:start="237:57" pos:end="237:83"><name pos:start="237:57" pos:end="237:58">st</name><operator pos:start="237:59" pos:end="237:60">-&gt;</operator><name pos:start="237:61" pos:end="237:79">sample_aspect_ratio</name><operator pos:start="237:80" pos:end="237:80">.</operator><name pos:start="237:81" pos:end="237:83">den</name></name></expr></argument>,

                           <argument pos:start="239:28" pos:end="239:55"><expr pos:start="239:28" pos:end="239:55"><name pos:start="239:28" pos:end="239:55"><name pos:start="239:28" pos:end="239:30">par</name><operator pos:start="239:31" pos:end="239:32">-&gt;</operator><name pos:start="239:33" pos:end="239:51">sample_aspect_ratio</name><operator pos:start="239:52" pos:end="239:52">.</operator><name pos:start="239:53" pos:end="239:55">num</name></name></expr></argument>,

                           <argument pos:start="241:28" pos:end="241:55"><expr pos:start="241:28" pos:end="241:55"><name pos:start="241:28" pos:end="241:55"><name pos:start="241:28" pos:end="241:30">par</name><operator pos:start="241:31" pos:end="241:32">-&gt;</operator><name pos:start="241:33" pos:end="241:51">sample_aspect_ratio</name><operator pos:start="241:52" pos:end="241:52">.</operator><name pos:start="241:53" pos:end="241:55">den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="243:21" pos:end="243:42"><expr pos:start="243:21" pos:end="243:41"><name pos:start="243:21" pos:end="243:23">ret</name> <operator pos:start="243:25" pos:end="243:25">=</operator> <call pos:start="243:27" pos:end="243:41"><name pos:start="243:27" pos:end="243:33">AVERROR</name><argument_list pos:start="243:34" pos:end="243:41">(<argument pos:start="243:35" pos:end="243:40"><expr pos:start="243:35" pos:end="243:40"><name pos:start="243:35" pos:end="243:40">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="245:21" pos:end="245:30">goto <name pos:start="245:26" pos:end="245:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="251:13" pos:end="251:18">break;</break>

        </block_content>}</block></switch>



        <expr_stmt pos:start="257:9" pos:end="257:53"><expr pos:start="257:9" pos:end="257:52"><name pos:start="257:9" pos:end="257:12">desc</name> <operator pos:start="257:14" pos:end="257:14">=</operator> <call pos:start="257:16" pos:end="257:52"><name pos:start="257:16" pos:end="257:37">avcodec_descriptor_get</name><argument_list pos:start="257:38" pos:end="257:52">(<argument pos:start="257:39" pos:end="257:51"><expr pos:start="257:39" pos:end="257:51"><name pos:start="257:39" pos:end="257:51"><name pos:start="257:39" pos:end="257:41">par</name><operator pos:start="257:42" pos:end="257:43">-&gt;</operator><name pos:start="257:44" pos:end="257:51">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="259:9" pos:end="261:38"><if pos:start="259:9" pos:end="261:38">if <condition pos:start="259:12" pos:end="259:56">(<expr pos:start="259:13" pos:end="259:55"><name pos:start="259:13" pos:end="259:16">desc</name> <operator pos:start="259:18" pos:end="259:19">&amp;&amp;</operator> <name pos:start="259:21" pos:end="259:31"><name pos:start="259:21" pos:end="259:24">desc</name><operator pos:start="259:25" pos:end="259:26">-&gt;</operator><name pos:start="259:27" pos:end="259:31">props</name></name> <operator pos:start="259:33" pos:end="259:33">&amp;</operator> <name pos:start="259:35" pos:end="259:55">AV_CODEC_PROP_REORDER</name></expr>)</condition><block type="pseudo" pos:start="261:13" pos:end="261:38"><block_content pos:start="261:13" pos:end="261:38">

            <expr_stmt pos:start="261:13" pos:end="261:38"><expr pos:start="261:13" pos:end="261:37"><name pos:start="261:13" pos:end="261:33"><name pos:start="261:13" pos:end="261:14">st</name><operator pos:start="261:15" pos:end="261:16">-&gt;</operator><name pos:start="261:17" pos:end="261:24">internal</name><operator pos:start="261:25" pos:end="261:26">-&gt;</operator><name pos:start="261:27" pos:end="261:33">reorder</name></name> <operator pos:start="261:35" pos:end="261:35">=</operator> <literal type="number" pos:start="261:37" pos:end="261:37">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="265:9" pos:end="311:9"><if pos:start="265:9" pos:end="311:9">if <condition pos:start="265:12" pos:end="265:26">(<expr pos:start="265:13" pos:end="265:25"><name pos:start="265:13" pos:end="265:25"><name pos:start="265:13" pos:end="265:14">of</name><operator pos:start="265:15" pos:end="265:16">-&gt;</operator><name pos:start="265:17" pos:end="265:25">codec_tag</name></name></expr>)</condition> <block pos:start="265:28" pos:end="311:9">{<block_content pos:start="267:13" pos:end="309:80">

            <if_stmt pos:start="267:13" pos:end="283:13"><if pos:start="267:13" pos:end="283:13">if <condition pos:start="267:16" pos:end="275:46">(   <expr pos:start="267:20" pos:end="275:45"><name pos:start="267:20" pos:end="267:33"><name pos:start="267:20" pos:end="267:22">par</name><operator pos:start="267:23" pos:end="267:24">-&gt;</operator><name pos:start="267:25" pos:end="267:33">codec_tag</name></name>

                <operator pos:start="269:17" pos:end="269:18">&amp;&amp;</operator> <name pos:start="269:20" pos:end="269:32"><name pos:start="269:20" pos:end="269:22">par</name><operator pos:start="269:23" pos:end="269:24">-&gt;</operator><name pos:start="269:25" pos:end="269:32">codec_id</name></name> <operator pos:start="269:34" pos:end="269:35">==</operator> <name pos:start="269:37" pos:end="269:56">AV_CODEC_ID_RAWVIDEO</name>

                <operator pos:start="271:17" pos:end="271:18">&amp;&amp;</operator> <operator pos:start="271:20" pos:end="271:20">(</operator>   <call pos:start="271:24" pos:end="271:69"><name pos:start="271:24" pos:end="271:39">av_codec_get_tag</name><argument_list pos:start="271:40" pos:end="271:69">(<argument pos:start="271:41" pos:end="271:53"><expr pos:start="271:41" pos:end="271:53"><name pos:start="271:41" pos:end="271:53"><name pos:start="271:41" pos:end="271:42">of</name><operator pos:start="271:43" pos:end="271:44">-&gt;</operator><name pos:start="271:45" pos:end="271:53">codec_tag</name></name></expr></argument>, <argument pos:start="271:56" pos:end="271:68"><expr pos:start="271:56" pos:end="271:68"><name pos:start="271:56" pos:end="271:68"><name pos:start="271:56" pos:end="271:58">par</name><operator pos:start="271:59" pos:end="271:60">-&gt;</operator><name pos:start="271:61" pos:end="271:68">codec_id</name></name></expr></argument>)</argument_list></call> <operator pos:start="271:71" pos:end="271:72">==</operator> <literal type="number" pos:start="271:74" pos:end="271:74">0</literal>

                    <operator pos:start="273:21" pos:end="273:22">||</operator> <call pos:start="273:24" pos:end="273:69"><name pos:start="273:24" pos:end="273:39">av_codec_get_tag</name><argument_list pos:start="273:40" pos:end="273:69">(<argument pos:start="273:41" pos:end="273:53"><expr pos:start="273:41" pos:end="273:53"><name pos:start="273:41" pos:end="273:53"><name pos:start="273:41" pos:end="273:42">of</name><operator pos:start="273:43" pos:end="273:44">-&gt;</operator><name pos:start="273:45" pos:end="273:53">codec_tag</name></name></expr></argument>, <argument pos:start="273:56" pos:end="273:68"><expr pos:start="273:56" pos:end="273:68"><name pos:start="273:56" pos:end="273:68"><name pos:start="273:56" pos:end="273:58">par</name><operator pos:start="273:59" pos:end="273:60">-&gt;</operator><name pos:start="273:61" pos:end="273:68">codec_id</name></name></expr></argument>)</argument_list></call> <operator pos:start="273:71" pos:end="273:72">==</operator> <call pos:start="273:74" pos:end="273:98"><name pos:start="273:74" pos:end="273:78">MKTAG</name><argument_list pos:start="273:79" pos:end="273:98">(<argument pos:start="273:80" pos:end="273:82"><expr pos:start="273:80" pos:end="273:82"><literal type="char" pos:start="273:80" pos:end="273:82">'r'</literal></expr></argument>, <argument pos:start="273:85" pos:end="273:87"><expr pos:start="273:85" pos:end="273:87"><literal type="char" pos:start="273:85" pos:end="273:87">'a'</literal></expr></argument>, <argument pos:start="273:90" pos:end="273:92"><expr pos:start="273:90" pos:end="273:92"><literal type="char" pos:start="273:90" pos:end="273:92">'w'</literal></expr></argument>, <argument pos:start="273:95" pos:end="273:97"><expr pos:start="273:95" pos:end="273:97"><literal type="char" pos:start="273:95" pos:end="273:97">' '</literal></expr></argument>)</argument_list></call><operator pos:start="273:99" pos:end="273:99">)</operator>

                <operator pos:start="275:17" pos:end="275:18">&amp;&amp;</operator> <operator pos:start="275:20" pos:end="275:20">!</operator><call pos:start="275:21" pos:end="275:45"><name pos:start="275:21" pos:end="275:38">validate_codec_tag</name><argument_list pos:start="275:39" pos:end="275:45">(<argument pos:start="275:40" pos:end="275:40"><expr pos:start="275:40" pos:end="275:40"><name pos:start="275:40" pos:end="275:40">s</name></expr></argument>, <argument pos:start="275:43" pos:end="275:44"><expr pos:start="275:43" pos:end="275:44"><name pos:start="275:43" pos:end="275:44">st</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="275:48" pos:end="283:13">{<block_content pos:start="281:17" pos:end="281:35">

                <comment type="line" pos:start="277:17" pos:end="277:71">// the current rawvideo encoding system ends up setting</comment>

                <comment type="line" pos:start="279:17" pos:end="279:71">// the wrong codec_tag for avi/mov, we override it here</comment>

                <expr_stmt pos:start="281:17" pos:end="281:35"><expr pos:start="281:17" pos:end="281:34"><name pos:start="281:17" pos:end="281:30"><name pos:start="281:17" pos:end="281:19">par</name><operator pos:start="281:20" pos:end="281:21">-&gt;</operator><name pos:start="281:22" pos:end="281:30">codec_tag</name></name> <operator pos:start="281:32" pos:end="281:32">=</operator> <literal type="number" pos:start="281:34" pos:end="281:34">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="285:13" pos:end="309:80"><if pos:start="285:13" pos:end="307:13">if <condition pos:start="285:16" pos:end="285:31">(<expr pos:start="285:17" pos:end="285:30"><name pos:start="285:17" pos:end="285:30"><name pos:start="285:17" pos:end="285:19">par</name><operator pos:start="285:20" pos:end="285:21">-&gt;</operator><name pos:start="285:22" pos:end="285:30">codec_tag</name></name></expr>)</condition> <block pos:start="285:33" pos:end="307:13">{<block_content pos:start="287:17" pos:end="305:17">

                <if_stmt pos:start="287:17" pos:end="305:17"><if pos:start="287:17" pos:end="305:17">if <condition pos:start="287:20" pos:end="287:47">(<expr pos:start="287:21" pos:end="287:46"><operator pos:start="287:21" pos:end="287:21">!</operator><call pos:start="287:22" pos:end="287:46"><name pos:start="287:22" pos:end="287:39">validate_codec_tag</name><argument_list pos:start="287:40" pos:end="287:46">(<argument pos:start="287:41" pos:end="287:41"><expr pos:start="287:41" pos:end="287:41"><name pos:start="287:41" pos:end="287:41">s</name></expr></argument>, <argument pos:start="287:44" pos:end="287:45"><expr pos:start="287:44" pos:end="287:45"><name pos:start="287:44" pos:end="287:45">st</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="287:49" pos:end="305:17">{<block_content pos:start="289:21" pos:end="303:30">

                    <decl_stmt pos:start="289:21" pos:end="289:49"><decl pos:start="289:21" pos:end="289:35"><type pos:start="289:21" pos:end="289:24"><name pos:start="289:21" pos:end="289:24">char</name></type> <name pos:start="289:26" pos:end="289:35"><name pos:start="289:26" pos:end="289:31">tagbuf</name><index pos:start="289:32" pos:end="289:35">[<expr pos:start="289:33" pos:end="289:34"><literal type="number" pos:start="289:33" pos:end="289:34">32</literal></expr>]</index></name></decl>, <decl pos:start="289:38" pos:end="289:48"><type ref="prev" pos:start="289:21" pos:end="289:24"/><name pos:start="289:38" pos:end="289:48"><name pos:start="289:38" pos:end="289:44">tagbuf2</name><index pos:start="289:45" pos:end="289:48">[<expr pos:start="289:46" pos:end="289:47"><literal type="number" pos:start="289:46" pos:end="289:47">32</literal></expr>]</index></name></decl>;</decl_stmt>

                    <expr_stmt pos:start="291:21" pos:end="291:84"><expr pos:start="291:21" pos:end="291:83"><call pos:start="291:21" pos:end="291:83"><name pos:start="291:21" pos:end="291:43">av_get_codec_tag_string</name><argument_list pos:start="291:44" pos:end="291:83">(<argument pos:start="291:45" pos:end="291:50"><expr pos:start="291:45" pos:end="291:50"><name pos:start="291:45" pos:end="291:50">tagbuf</name></expr></argument>, <argument pos:start="291:53" pos:end="291:66"><expr pos:start="291:53" pos:end="291:66"><sizeof pos:start="291:53" pos:end="291:66">sizeof<argument_list pos:start="291:59" pos:end="291:66">(<argument pos:start="291:60" pos:end="291:65"><expr pos:start="291:60" pos:end="291:65"><name pos:start="291:60" pos:end="291:65">tagbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="291:69" pos:end="291:82"><expr pos:start="291:69" pos:end="291:82"><name pos:start="291:69" pos:end="291:82"><name pos:start="291:69" pos:end="291:71">par</name><operator pos:start="291:72" pos:end="291:73">-&gt;</operator><name pos:start="291:74" pos:end="291:82">codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="293:21" pos:end="293:126"><expr pos:start="293:21" pos:end="293:125"><call pos:start="293:21" pos:end="293:125"><name pos:start="293:21" pos:end="293:43">av_get_codec_tag_string</name><argument_list pos:start="293:44" pos:end="293:125">(<argument pos:start="293:45" pos:end="293:51"><expr pos:start="293:45" pos:end="293:51"><name pos:start="293:45" pos:end="293:51">tagbuf2</name></expr></argument>, <argument pos:start="293:54" pos:end="293:68"><expr pos:start="293:54" pos:end="293:68"><sizeof pos:start="293:54" pos:end="293:68">sizeof<argument_list pos:start="293:60" pos:end="293:68">(<argument pos:start="293:61" pos:end="293:67"><expr pos:start="293:61" pos:end="293:67"><name pos:start="293:61" pos:end="293:67">tagbuf2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="293:71" pos:end="293:124"><expr pos:start="293:71" pos:end="293:124"><call pos:start="293:71" pos:end="293:124"><name pos:start="293:71" pos:end="293:86">av_codec_get_tag</name><argument_list pos:start="293:87" pos:end="293:124">(<argument pos:start="293:88" pos:end="293:108"><expr pos:start="293:88" pos:end="293:108"><name pos:start="293:88" pos:end="293:108"><name pos:start="293:88" pos:end="293:88">s</name><operator pos:start="293:89" pos:end="293:90">-&gt;</operator><name pos:start="293:91" pos:end="293:97">oformat</name><operator pos:start="293:98" pos:end="293:99">-&gt;</operator><name pos:start="293:100" pos:end="293:108">codec_tag</name></name></expr></argument>, <argument pos:start="293:111" pos:end="293:123"><expr pos:start="293:111" pos:end="293:123"><name pos:start="293:111" pos:end="293:123"><name pos:start="293:111" pos:end="293:113">par</name><operator pos:start="293:114" pos:end="293:115">-&gt;</operator><name pos:start="293:116" pos:end="293:123">codec_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="295:21" pos:end="299:75"><expr pos:start="295:21" pos:end="299:74"><call pos:start="295:21" pos:end="299:74"><name pos:start="295:21" pos:end="295:26">av_log</name><argument_list pos:start="295:27" pos:end="299:74">(<argument pos:start="295:28" pos:end="295:28"><expr pos:start="295:28" pos:end="295:28"><name pos:start="295:28" pos:end="295:28">s</name></expr></argument>, <argument pos:start="295:31" pos:end="295:42"><expr pos:start="295:31" pos:end="295:42"><name pos:start="295:31" pos:end="295:42">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="297:28" pos:end="297:88"><expr pos:start="297:28" pos:end="297:88"><literal type="string" pos:start="297:28" pos:end="297:88">"Tag %s/0x%08x incompatible with output codec id '%d' (%s)\n"</literal></expr></argument>,

                           <argument pos:start="299:28" pos:end="299:33"><expr pos:start="299:28" pos:end="299:33"><name pos:start="299:28" pos:end="299:33">tagbuf</name></expr></argument>, <argument pos:start="299:36" pos:end="299:49"><expr pos:start="299:36" pos:end="299:49"><name pos:start="299:36" pos:end="299:49"><name pos:start="299:36" pos:end="299:38">par</name><operator pos:start="299:39" pos:end="299:40">-&gt;</operator><name pos:start="299:41" pos:end="299:49">codec_tag</name></name></expr></argument>, <argument pos:start="299:52" pos:end="299:64"><expr pos:start="299:52" pos:end="299:64"><name pos:start="299:52" pos:end="299:64"><name pos:start="299:52" pos:end="299:54">par</name><operator pos:start="299:55" pos:end="299:56">-&gt;</operator><name pos:start="299:57" pos:end="299:64">codec_id</name></name></expr></argument>, <argument pos:start="299:67" pos:end="299:73"><expr pos:start="299:67" pos:end="299:73"><name pos:start="299:67" pos:end="299:73">tagbuf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="301:21" pos:end="301:46"><expr pos:start="301:21" pos:end="301:45"><name pos:start="301:21" pos:end="301:23">ret</name> <operator pos:start="301:25" pos:end="301:25">=</operator> <name pos:start="301:27" pos:end="301:45">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                    <goto pos:start="303:21" pos:end="303:30">goto <name pos:start="303:26" pos:end="303:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="307:15" pos:end="309:80">else<block type="pseudo" pos:start="309:17" pos:end="309:80"><block_content pos:start="309:17" pos:end="309:80">

                <expr_stmt pos:start="309:17" pos:end="309:80"><expr pos:start="309:17" pos:end="309:79"><name pos:start="309:17" pos:end="309:30"><name pos:start="309:17" pos:end="309:19">par</name><operator pos:start="309:20" pos:end="309:21">-&gt;</operator><name pos:start="309:22" pos:end="309:30">codec_tag</name></name> <operator pos:start="309:32" pos:end="309:32">=</operator> <call pos:start="309:34" pos:end="309:79"><name pos:start="309:34" pos:end="309:49">av_codec_get_tag</name><argument_list pos:start="309:50" pos:end="309:79">(<argument pos:start="309:51" pos:end="309:63"><expr pos:start="309:51" pos:end="309:63"><name pos:start="309:51" pos:end="309:63"><name pos:start="309:51" pos:end="309:52">of</name><operator pos:start="309:53" pos:end="309:54">-&gt;</operator><name pos:start="309:55" pos:end="309:63">codec_tag</name></name></expr></argument>, <argument pos:start="309:66" pos:end="309:78"><expr pos:start="309:66" pos:end="309:78"><name pos:start="309:66" pos:end="309:78"><name pos:start="309:66" pos:end="309:68">par</name><operator pos:start="309:69" pos:end="309:70">-&gt;</operator><name pos:start="309:71" pos:end="309:78">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="315:9" pos:end="317:50"><if pos:start="315:9" pos:end="317:50">if <condition pos:start="315:12" pos:end="315:55">(<expr pos:start="315:13" pos:end="315:54"><name pos:start="315:13" pos:end="315:27"><name pos:start="315:13" pos:end="315:15">par</name><operator pos:start="315:16" pos:end="315:17">-&gt;</operator><name pos:start="315:18" pos:end="315:27">codec_type</name></name> <operator pos:start="315:29" pos:end="315:30">!=</operator> <name pos:start="315:32" pos:end="315:54">AVMEDIA_TYPE_ATTACHMENT</name></expr>)</condition><block type="pseudo" pos:start="317:13" pos:end="317:50"><block_content pos:start="317:13" pos:end="317:50">

            <expr_stmt pos:start="317:13" pos:end="317:50"><expr pos:start="317:13" pos:end="317:49"><name pos:start="317:13" pos:end="317:47"><name pos:start="317:13" pos:end="317:13">s</name><operator pos:start="317:14" pos:end="317:15">-&gt;</operator><name pos:start="317:16" pos:end="317:23">internal</name><operator pos:start="317:24" pos:end="317:25">-&gt;</operator><name pos:start="317:26" pos:end="317:47">nb_interleaved_streams</name></name><operator pos:start="317:48" pos:end="317:49">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="323:5" pos:end="347:5"><if pos:start="323:5" pos:end="347:5">if <condition pos:start="323:8" pos:end="323:48">(<expr pos:start="323:9" pos:end="323:47"><operator pos:start="323:9" pos:end="323:9">!</operator><name pos:start="323:10" pos:end="323:21"><name pos:start="323:10" pos:end="323:10">s</name><operator pos:start="323:11" pos:end="323:12">-&gt;</operator><name pos:start="323:13" pos:end="323:21">priv_data</name></name> <operator pos:start="323:23" pos:end="323:24">&amp;&amp;</operator> <name pos:start="323:26" pos:end="323:43"><name pos:start="323:26" pos:end="323:27">of</name><operator pos:start="323:28" pos:end="323:29">-&gt;</operator><name pos:start="323:30" pos:end="323:43">priv_data_size</name></name> <operator pos:start="323:45" pos:end="323:45">&gt;</operator> <literal type="number" pos:start="323:47" pos:end="323:47">0</literal></expr>)</condition> <block pos:start="323:50" pos:end="347:5">{<block_content pos:start="325:9" pos:end="345:9">

        <expr_stmt pos:start="325:9" pos:end="325:54"><expr pos:start="325:9" pos:end="325:53"><name pos:start="325:9" pos:end="325:20"><name pos:start="325:9" pos:end="325:9">s</name><operator pos:start="325:10" pos:end="325:11">-&gt;</operator><name pos:start="325:12" pos:end="325:20">priv_data</name></name> <operator pos:start="325:22" pos:end="325:22">=</operator> <call pos:start="325:24" pos:end="325:53"><name pos:start="325:24" pos:end="325:33">av_mallocz</name><argument_list pos:start="325:34" pos:end="325:53">(<argument pos:start="325:35" pos:end="325:52"><expr pos:start="325:35" pos:end="325:52"><name pos:start="325:35" pos:end="325:52"><name pos:start="325:35" pos:end="325:36">of</name><operator pos:start="325:37" pos:end="325:38">-&gt;</operator><name pos:start="325:39" pos:end="325:52">priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="327:9" pos:end="333:9"><if pos:start="327:9" pos:end="333:9">if <condition pos:start="327:12" pos:end="327:26">(<expr pos:start="327:13" pos:end="327:25"><operator pos:start="327:13" pos:end="327:13">!</operator><name pos:start="327:14" pos:end="327:25"><name pos:start="327:14" pos:end="327:14">s</name><operator pos:start="327:15" pos:end="327:16">-&gt;</operator><name pos:start="327:17" pos:end="327:25">priv_data</name></name></expr>)</condition> <block pos:start="327:28" pos:end="333:9">{<block_content pos:start="329:13" pos:end="331:22">

            <expr_stmt pos:start="329:13" pos:end="329:34"><expr pos:start="329:13" pos:end="329:33"><name pos:start="329:13" pos:end="329:15">ret</name> <operator pos:start="329:17" pos:end="329:17">=</operator> <call pos:start="329:19" pos:end="329:33"><name pos:start="329:19" pos:end="329:25">AVERROR</name><argument_list pos:start="329:26" pos:end="329:33">(<argument pos:start="329:27" pos:end="329:32"><expr pos:start="329:27" pos:end="329:32"><name pos:start="329:27" pos:end="329:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="331:13" pos:end="331:22">goto <name pos:start="331:18" pos:end="331:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="335:9" pos:end="345:9"><if pos:start="335:9" pos:end="345:9">if <condition pos:start="335:12" pos:end="335:27">(<expr pos:start="335:13" pos:end="335:26"><name pos:start="335:13" pos:end="335:26"><name pos:start="335:13" pos:end="335:14">of</name><operator pos:start="335:15" pos:end="335:16">-&gt;</operator><name pos:start="335:17" pos:end="335:26">priv_class</name></name></expr>)</condition> <block pos:start="335:29" pos:end="345:9">{<block_content pos:start="337:13" pos:end="343:26">

            <expr_stmt pos:start="337:13" pos:end="337:61"><expr pos:start="337:13" pos:end="337:60"><operator pos:start="337:13" pos:end="337:13">*</operator><operator pos:start="337:14" pos:end="337:14">(</operator><specifier pos:start="337:15" pos:end="337:19">const</specifier> <name pos:start="337:21" pos:end="337:27">AVClass</name> <operator pos:start="337:29" pos:end="337:29">*</operator><operator pos:start="337:30" pos:end="337:30">*</operator><operator pos:start="337:31" pos:end="337:31">)</operator><name pos:start="337:32" pos:end="337:43"><name pos:start="337:32" pos:end="337:32">s</name><operator pos:start="337:33" pos:end="337:34">-&gt;</operator><name pos:start="337:35" pos:end="337:43">priv_data</name></name> <operator pos:start="337:45" pos:end="337:45">=</operator> <name pos:start="337:47" pos:end="337:60"><name pos:start="337:47" pos:end="337:48">of</name><operator pos:start="337:49" pos:end="337:50">-&gt;</operator><name pos:start="337:51" pos:end="337:60">priv_class</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="339:13" pos:end="339:46"><expr pos:start="339:13" pos:end="339:45"><call pos:start="339:13" pos:end="339:45"><name pos:start="339:13" pos:end="339:31">av_opt_set_defaults</name><argument_list pos:start="339:32" pos:end="339:45">(<argument pos:start="339:33" pos:end="339:44"><expr pos:start="339:33" pos:end="339:44"><name pos:start="339:33" pos:end="339:44"><name pos:start="339:33" pos:end="339:33">s</name><operator pos:start="339:34" pos:end="339:35">-&gt;</operator><name pos:start="339:36" pos:end="339:44">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="341:13" pos:end="343:26"><if pos:start="341:13" pos:end="343:26">if <condition pos:start="341:16" pos:end="341:89">(<expr pos:start="341:17" pos:end="341:88"><operator pos:start="341:17" pos:end="341:17">(</operator><name pos:start="341:18" pos:end="341:20">ret</name> <operator pos:start="341:22" pos:end="341:22">=</operator> <call pos:start="341:24" pos:end="341:83"><name pos:start="341:24" pos:end="341:39">av_opt_set_dict2</name><argument_list pos:start="341:40" pos:end="341:83">(<argument pos:start="341:41" pos:end="341:52"><expr pos:start="341:41" pos:end="341:52"><name pos:start="341:41" pos:end="341:52"><name pos:start="341:41" pos:end="341:41">s</name><operator pos:start="341:42" pos:end="341:43">-&gt;</operator><name pos:start="341:44" pos:end="341:52">priv_data</name></name></expr></argument>, <argument pos:start="341:55" pos:end="341:58"><expr pos:start="341:55" pos:end="341:58"><operator pos:start="341:55" pos:end="341:55">&amp;</operator><name pos:start="341:56" pos:end="341:58">tmp</name></expr></argument>, <argument pos:start="341:61" pos:end="341:82"><expr pos:start="341:61" pos:end="341:82"><name pos:start="341:61" pos:end="341:82">AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call><operator pos:start="341:84" pos:end="341:84">)</operator> <operator pos:start="341:86" pos:end="341:86">&lt;</operator> <literal type="number" pos:start="341:88" pos:end="341:88">0</literal></expr>)</condition><block type="pseudo" pos:start="343:17" pos:end="343:26"><block_content pos:start="343:17" pos:end="343:26">

                <goto pos:start="343:17" pos:end="343:26">goto <name pos:start="343:22" pos:end="343:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="351:5" pos:end="351:41">/* set muxer identification string */</comment>

    <if_stmt pos:start="353:5" pos:end="361:5"><if pos:start="353:5" pos:end="357:5">if <condition pos:start="353:8" pos:end="353:42">(<expr pos:start="353:9" pos:end="353:41"><operator pos:start="353:9" pos:end="353:9">!</operator><operator pos:start="353:10" pos:end="353:10">(</operator><name pos:start="353:11" pos:end="353:18"><name pos:start="353:11" pos:end="353:11">s</name><operator pos:start="353:12" pos:end="353:13">-&gt;</operator><name pos:start="353:14" pos:end="353:18">flags</name></name> <operator pos:start="353:20" pos:end="353:20">&amp;</operator> <name pos:start="353:22" pos:end="353:40">AVFMT_FLAG_BITEXACT</name><operator pos:start="353:41" pos:end="353:41">)</operator></expr>)</condition> <block pos:start="353:44" pos:end="357:5">{<block_content pos:start="355:9" pos:end="355:67">

        <expr_stmt pos:start="355:9" pos:end="355:67"><expr pos:start="355:9" pos:end="355:66"><call pos:start="355:9" pos:end="355:66"><name pos:start="355:9" pos:end="355:19">av_dict_set</name><argument_list pos:start="355:20" pos:end="355:66">(<argument pos:start="355:21" pos:end="355:32"><expr pos:start="355:21" pos:end="355:32"><operator pos:start="355:21" pos:end="355:21">&amp;</operator><name pos:start="355:22" pos:end="355:32"><name pos:start="355:22" pos:end="355:22">s</name><operator pos:start="355:23" pos:end="355:24">-&gt;</operator><name pos:start="355:25" pos:end="355:32">metadata</name></name></expr></argument>, <argument pos:start="355:35" pos:end="355:43"><expr pos:start="355:35" pos:end="355:43"><literal type="string" pos:start="355:35" pos:end="355:43">"encoder"</literal></expr></argument>, <argument pos:start="355:46" pos:end="355:62"><expr pos:start="355:46" pos:end="355:62"><name pos:start="355:46" pos:end="355:62">LIBAVFORMAT_IDENT</name></expr></argument>, <argument pos:start="355:65" pos:end="355:65"><expr pos:start="355:65" pos:end="355:65"><literal type="number" pos:start="355:65" pos:end="355:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="357:7" pos:end="361:5">else <block pos:start="357:12" pos:end="361:5">{<block_content pos:start="359:9" pos:end="359:54">

        <expr_stmt pos:start="359:9" pos:end="359:54"><expr pos:start="359:9" pos:end="359:53"><call pos:start="359:9" pos:end="359:53"><name pos:start="359:9" pos:end="359:19">av_dict_set</name><argument_list pos:start="359:20" pos:end="359:53">(<argument pos:start="359:21" pos:end="359:32"><expr pos:start="359:21" pos:end="359:32"><operator pos:start="359:21" pos:end="359:21">&amp;</operator><name pos:start="359:22" pos:end="359:32"><name pos:start="359:22" pos:end="359:22">s</name><operator pos:start="359:23" pos:end="359:24">-&gt;</operator><name pos:start="359:25" pos:end="359:32">metadata</name></name></expr></argument>, <argument pos:start="359:35" pos:end="359:43"><expr pos:start="359:35" pos:end="359:43"><literal type="string" pos:start="359:35" pos:end="359:43">"encoder"</literal></expr></argument>, <argument pos:start="359:46" pos:end="359:49"><expr pos:start="359:46" pos:end="359:49"><name pos:start="359:46" pos:end="359:49">NULL</name></expr></argument>, <argument pos:start="359:52" pos:end="359:52"><expr pos:start="359:52" pos:end="359:52"><literal type="number" pos:start="359:52" pos:end="359:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="365:5" pos:end="369:5">for <control pos:start="365:9" pos:end="365:88">(<init pos:start="365:10" pos:end="365:18"><expr pos:start="365:10" pos:end="365:17"><name pos:start="365:10" pos:end="365:10">e</name> <operator pos:start="365:12" pos:end="365:12">=</operator> <name pos:start="365:14" pos:end="365:17">NULL</name></expr>;</init> <condition pos:start="365:20" pos:end="365:86"><expr pos:start="365:20" pos:end="365:85"><name pos:start="365:20" pos:end="365:20">e</name> <operator pos:start="365:22" pos:end="365:22">=</operator> <call pos:start="365:24" pos:end="365:85"><name pos:start="365:24" pos:end="365:34">av_dict_get</name><argument_list pos:start="365:35" pos:end="365:85">(<argument pos:start="365:36" pos:end="365:46"><expr pos:start="365:36" pos:end="365:46"><name pos:start="365:36" pos:end="365:46"><name pos:start="365:36" pos:end="365:36">s</name><operator pos:start="365:37" pos:end="365:38">-&gt;</operator><name pos:start="365:39" pos:end="365:46">metadata</name></name></expr></argument>, <argument pos:start="365:49" pos:end="365:58"><expr pos:start="365:49" pos:end="365:58"><literal type="string" pos:start="365:49" pos:end="365:58">"encoder-"</literal></expr></argument>, <argument pos:start="365:61" pos:end="365:61"><expr pos:start="365:61" pos:end="365:61"><name pos:start="365:61" pos:end="365:61">e</name></expr></argument>, <argument pos:start="365:64" pos:end="365:84"><expr pos:start="365:64" pos:end="365:84"><name pos:start="365:64" pos:end="365:84">AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</condition> <incr/>)</control> <block pos:start="365:90" pos:end="369:5">{<block_content pos:start="367:9" pos:end="367:51">

        <expr_stmt pos:start="367:9" pos:end="367:51"><expr pos:start="367:9" pos:end="367:50"><call pos:start="367:9" pos:end="367:50"><name pos:start="367:9" pos:end="367:19">av_dict_set</name><argument_list pos:start="367:20" pos:end="367:50">(<argument pos:start="367:21" pos:end="367:32"><expr pos:start="367:21" pos:end="367:32"><operator pos:start="367:21" pos:end="367:21">&amp;</operator><name pos:start="367:22" pos:end="367:32"><name pos:start="367:22" pos:end="367:22">s</name><operator pos:start="367:23" pos:end="367:24">-&gt;</operator><name pos:start="367:25" pos:end="367:32">metadata</name></name></expr></argument>, <argument pos:start="367:35" pos:end="367:40"><expr pos:start="367:35" pos:end="367:40"><name pos:start="367:35" pos:end="367:40"><name pos:start="367:35" pos:end="367:35">e</name><operator pos:start="367:36" pos:end="367:37">-&gt;</operator><name pos:start="367:38" pos:end="367:40">key</name></name></expr></argument>, <argument pos:start="367:43" pos:end="367:46"><expr pos:start="367:43" pos:end="367:46"><name pos:start="367:43" pos:end="367:46">NULL</name></expr></argument>, <argument pos:start="367:49" pos:end="367:49"><expr pos:start="367:49" pos:end="367:49"><literal type="number" pos:start="367:49" pos:end="367:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="373:5" pos:end="379:5"><if pos:start="373:5" pos:end="379:5">if <condition pos:start="373:8" pos:end="373:16">(<expr pos:start="373:9" pos:end="373:15"><name pos:start="373:9" pos:end="373:15">options</name></expr>)</condition> <block pos:start="373:18" pos:end="379:5">{<block_content pos:start="375:10" pos:end="377:24">

         <expr_stmt pos:start="375:10" pos:end="375:31"><expr pos:start="375:10" pos:end="375:30"><call pos:start="375:10" pos:end="375:30"><name pos:start="375:10" pos:end="375:21">av_dict_free</name><argument_list pos:start="375:22" pos:end="375:30">(<argument pos:start="375:23" pos:end="375:29"><expr pos:start="375:23" pos:end="375:29"><name pos:start="375:23" pos:end="375:29">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <expr_stmt pos:start="377:10" pos:end="377:24"><expr pos:start="377:10" pos:end="377:23"><operator pos:start="377:10" pos:end="377:10">*</operator><name pos:start="377:11" pos:end="377:17">options</name> <operator pos:start="377:19" pos:end="377:19">=</operator> <name pos:start="377:21" pos:end="377:23">tmp</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="383:5" pos:end="389:5"><if pos:start="383:5" pos:end="389:5">if <condition pos:start="383:8" pos:end="383:60">(<expr pos:start="383:9" pos:end="383:59"><name pos:start="383:9" pos:end="383:24"><name pos:start="383:9" pos:end="383:9">s</name><operator pos:start="383:10" pos:end="383:11">-&gt;</operator><name pos:start="383:12" pos:end="383:18">oformat</name><operator pos:start="383:19" pos:end="383:20">-&gt;</operator><name pos:start="383:21" pos:end="383:24">init</name></name> <operator pos:start="383:26" pos:end="383:27">&amp;&amp;</operator> <operator pos:start="383:29" pos:end="383:29">(</operator><name pos:start="383:30" pos:end="383:32">ret</name> <operator pos:start="383:34" pos:end="383:34">=</operator> <call pos:start="383:36" pos:end="383:54"><name pos:start="383:36" pos:end="383:51"><name pos:start="383:36" pos:end="383:36">s</name><operator pos:start="383:37" pos:end="383:38">-&gt;</operator><name pos:start="383:39" pos:end="383:45">oformat</name><operator pos:start="383:46" pos:end="383:47">-&gt;</operator><name pos:start="383:48" pos:end="383:51">init</name></name><argument_list pos:start="383:52" pos:end="383:54">(<argument pos:start="383:53" pos:end="383:53"><expr pos:start="383:53" pos:end="383:53"><name pos:start="383:53" pos:end="383:53">s</name></expr></argument>)</argument_list></call><operator pos:start="383:55" pos:end="383:55">)</operator> <operator pos:start="383:57" pos:end="383:57">&lt;</operator> <literal type="number" pos:start="383:59" pos:end="383:59">0</literal></expr>)</condition> <block pos:start="383:62" pos:end="389:5">{<block_content pos:start="385:9" pos:end="387:18">

        <expr_stmt pos:start="385:9" pos:end="385:30"><expr pos:start="385:9" pos:end="385:29"><call pos:start="385:9" pos:end="385:29"><name pos:start="385:9" pos:end="385:26"><name pos:start="385:9" pos:end="385:9">s</name><operator pos:start="385:10" pos:end="385:11">-&gt;</operator><name pos:start="385:12" pos:end="385:18">oformat</name><operator pos:start="385:19" pos:end="385:20">-&gt;</operator><name pos:start="385:21" pos:end="385:26">deinit</name></name><argument_list pos:start="385:27" pos:end="385:29">(<argument pos:start="385:28" pos:end="385:28"><expr pos:start="385:28" pos:end="385:28"><name pos:start="385:28" pos:end="385:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="387:9" pos:end="387:18">goto <name pos:start="387:14" pos:end="387:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="393:5" pos:end="393:13">return <expr pos:start="393:12" pos:end="393:12"><literal type="number" pos:start="393:12" pos:end="393:12">0</literal></expr>;</return>



<label pos:start="397:1" pos:end="397:5"><name pos:start="397:1" pos:end="397:4">fail</name>:</label>

    <expr_stmt pos:start="399:5" pos:end="399:23"><expr pos:start="399:5" pos:end="399:22"><call pos:start="399:5" pos:end="399:22"><name pos:start="399:5" pos:end="399:16">av_dict_free</name><argument_list pos:start="399:17" pos:end="399:22">(<argument pos:start="399:18" pos:end="399:21"><expr pos:start="399:18" pos:end="399:21"><operator pos:start="399:18" pos:end="399:18">&amp;</operator><name pos:start="399:19" pos:end="399:21">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="401:5" pos:end="401:15">return <expr pos:start="401:12" pos:end="401:14"><name pos:start="401:12" pos:end="401:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
