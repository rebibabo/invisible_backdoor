<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9078.c" pos:tabs="8"><function pos:start="1:1" pos:end="88:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">qemu_sem_timedwait</name><parameter_list pos:start="1:23" pos:end="1:50">(<parameter pos:start="1:24" pos:end="1:41"><decl pos:start="1:24" pos:end="1:41"><type pos:start="1:24" pos:end="1:41"><name pos:start="1:24" pos:end="1:36">QemuSemaphore</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">sem</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:49"><decl pos:start="1:44" pos:end="1:49"><type pos:start="1:44" pos:end="1:49"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:49">ms</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="88:1">{<block_content pos:start="5:5" pos:end="87:0">

    <decl_stmt pos:start="5:5" pos:end="5:11"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:19">timespec</name></name></type> <name pos:start="7:21" pos:end="7:22">ts</name></decl>;</decl_stmt>



<cpp:if pos:start="11:1" pos:end="11:45">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:45"><call pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:11">defined</name><argument_list pos:start="11:12" pos:end="11:22">(<argument pos:start="11:13" pos:end="11:21"><expr pos:start="11:13" pos:end="11:21"><name pos:start="11:13" pos:end="11:21">__APPLE__</name></expr></argument>)</argument_list></call> <operator pos:start="11:24" pos:end="11:25">||</operator> <call pos:start="11:27" pos:end="11:45"><name pos:start="11:27" pos:end="11:33">defined</name><argument_list pos:start="11:34" pos:end="11:45">(<argument pos:start="11:35" pos:end="11:44"><expr pos:start="11:35" pos:end="11:44"><name pos:start="11:35" pos:end="11:44">__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="13:5" pos:end="13:34"><expr pos:start="13:5" pos:end="13:33"><call pos:start="13:5" pos:end="13:33"><name pos:start="13:5" pos:end="13:24">compute_abs_deadline</name><argument_list pos:start="13:25" pos:end="13:33">(<argument pos:start="13:26" pos:end="13:28"><expr pos:start="13:26" pos:end="13:28"><operator pos:start="13:26" pos:end="13:26">&amp;</operator><name pos:start="13:27" pos:end="13:28">ts</name></expr></argument>, <argument pos:start="13:31" pos:end="13:32"><expr pos:start="13:31" pos:end="13:32"><name pos:start="13:31" pos:end="13:32">ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:35"><expr pos:start="15:5" pos:end="15:34"><call pos:start="15:5" pos:end="15:34"><name pos:start="15:5" pos:end="15:22">pthread_mutex_lock</name><argument_list pos:start="15:23" pos:end="15:34">(<argument pos:start="15:24" pos:end="15:33"><expr pos:start="15:24" pos:end="15:33"><operator pos:start="15:24" pos:end="15:24">&amp;</operator><name pos:start="15:25" pos:end="15:33"><name pos:start="15:25" pos:end="15:27">sem</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:33">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:17"><expr pos:start="17:5" pos:end="17:16"><operator pos:start="17:5" pos:end="17:6">--</operator><name pos:start="17:7" pos:end="17:16"><name pos:start="17:7" pos:end="17:9">sem</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:16">count</name></name></expr>;</expr_stmt>

    <while pos:start="19:5" pos:end="36:5">while <condition pos:start="19:11" pos:end="19:26">(<expr pos:start="19:12" pos:end="19:25"><name pos:start="19:12" pos:end="19:21"><name pos:start="19:12" pos:end="19:14">sem</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:21">count</name></name> <operator pos:start="19:23" pos:end="19:23">&lt;</operator> <literal type="number" pos:start="19:25" pos:end="19:25">0</literal></expr>)</condition> <block pos:start="19:28" pos:end="36:5">{<block_content pos:start="21:9" pos:end="34:9">

        <expr_stmt pos:start="21:9" pos:end="21:65"><expr pos:start="21:9" pos:end="21:64"><name pos:start="21:9" pos:end="21:10">rc</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <call pos:start="21:14" pos:end="21:64"><name pos:start="21:14" pos:end="21:35">pthread_cond_timedwait</name><argument_list pos:start="21:36" pos:end="21:64">(<argument pos:start="21:37" pos:end="21:46"><expr pos:start="21:37" pos:end="21:46"><operator pos:start="21:37" pos:end="21:37">&amp;</operator><name pos:start="21:38" pos:end="21:46"><name pos:start="21:38" pos:end="21:40">sem</name><operator pos:start="21:41" pos:end="21:42">-&gt;</operator><name pos:start="21:43" pos:end="21:46">cond</name></name></expr></argument>, <argument pos:start="21:49" pos:end="21:58"><expr pos:start="21:49" pos:end="21:58"><operator pos:start="21:49" pos:end="21:49">&amp;</operator><name pos:start="21:50" pos:end="21:58"><name pos:start="21:50" pos:end="21:52">sem</name><operator pos:start="21:53" pos:end="21:54">-&gt;</operator><name pos:start="21:55" pos:end="21:58">lock</name></name></expr></argument>, <argument pos:start="21:61" pos:end="21:63"><expr pos:start="21:61" pos:end="21:63"><operator pos:start="21:61" pos:end="21:61">&amp;</operator><name pos:start="21:62" pos:end="21:63">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="28:9"><if pos:start="23:9" pos:end="28:9">if <condition pos:start="23:12" pos:end="23:28">(<expr pos:start="23:13" pos:end="23:27"><name pos:start="23:13" pos:end="23:14">rc</name> <operator pos:start="23:16" pos:end="23:17">==</operator> <name pos:start="23:19" pos:end="23:27">ETIMEDOUT</name></expr>)</condition> <block pos:start="23:30" pos:end="28:9">{<block_content pos:start="26:13" pos:end="26:18">


            <break pos:start="26:13" pos:end="26:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="30:9" pos:end="34:9"><if pos:start="30:9" pos:end="34:9">if <condition pos:start="30:12" pos:end="30:20">(<expr pos:start="30:13" pos:end="30:19"><name pos:start="30:13" pos:end="30:14">rc</name> <operator pos:start="30:16" pos:end="30:17">!=</operator> <literal type="number" pos:start="30:19" pos:end="30:19">0</literal></expr>)</condition> <block pos:start="30:22" pos:end="34:9">{<block_content pos:start="32:13" pos:end="32:37">

            <expr_stmt pos:start="32:13" pos:end="32:37"><expr pos:start="32:13" pos:end="32:36"><call pos:start="32:13" pos:end="32:36"><name pos:start="32:13" pos:end="32:22">error_exit</name><argument_list pos:start="32:23" pos:end="32:36">(<argument pos:start="32:24" pos:end="32:25"><expr pos:start="32:24" pos:end="32:25"><name pos:start="32:24" pos:end="32:25">rc</name></expr></argument>, <argument pos:start="32:28" pos:end="32:35"><expr pos:start="32:28" pos:end="32:35"><name pos:start="32:28" pos:end="32:35">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="38:5" pos:end="38:37"><expr pos:start="38:5" pos:end="38:36"><call pos:start="38:5" pos:end="38:36"><name pos:start="38:5" pos:end="38:24">pthread_mutex_unlock</name><argument_list pos:start="38:25" pos:end="38:36">(<argument pos:start="38:26" pos:end="38:35"><expr pos:start="38:26" pos:end="38:35"><operator pos:start="38:26" pos:end="38:26">&amp;</operator><name pos:start="38:27" pos:end="38:35"><name pos:start="38:27" pos:end="38:29">sem</name><operator pos:start="38:30" pos:end="38:31">-&gt;</operator><name pos:start="38:32" pos:end="38:35">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="40:5" pos:end="43:0">return <expr pos:start="40:12" pos:end="40:37"><operator pos:start="40:12" pos:end="40:12">(</operator><ternary pos:start="40:13" pos:end="40:36"><condition pos:start="40:13" pos:end="40:29"><expr pos:start="40:13" pos:end="40:27"><name pos:start="40:13" pos:end="40:14">rc</name> <operator pos:start="40:16" pos:end="40:17">==</operator> <name pos:start="40:19" pos:end="40:27">ETIMEDOUT</name></expr> ?</condition><then pos:start="40:31" pos:end="40:32"> <expr pos:start="40:31" pos:end="40:32"><operator pos:start="40:31" pos:end="40:31">-</operator><literal type="number" pos:start="40:32" pos:end="40:32">1</literal></expr> </then><else pos:start="40:34" pos:end="40:36">: <expr pos:start="40:36" pos:end="40:36"><literal type="number" pos:start="40:36" pos:end="40:36">0</literal></expr></else></ternary><operator pos:start="40:37" pos:end="40:37">)</operator></expr>;</return>

<cpp:else pos:start="42:1" pos:end="42:5">#<cpp:directive pos:start="42:2" pos:end="42:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="44:5" pos:end="76:5"><if pos:start="44:5" pos:end="60:5">if <condition pos:start="44:8" pos:end="44:16">(<expr pos:start="44:9" pos:end="44:15"><name pos:start="44:9" pos:end="44:10">ms</name> <operator pos:start="44:12" pos:end="44:13">&lt;=</operator> <literal type="number" pos:start="44:15" pos:end="44:15">0</literal></expr>)</condition> <block pos:start="44:18" pos:end="60:5">{<block_content pos:start="48:9" pos:end="58:9">

        <comment type="block" pos:start="46:9" pos:end="46:50">/* This is cheaper than sem_timedwait.  */</comment>

        <do pos:start="48:9" pos:end="52:45">do <block pos:start="48:12" pos:end="52:9">{<block_content pos:start="50:13" pos:end="50:40">

            <expr_stmt pos:start="50:13" pos:end="50:40"><expr pos:start="50:13" pos:end="50:39"><name pos:start="50:13" pos:end="50:14">rc</name> <operator pos:start="50:16" pos:end="50:16">=</operator> <call pos:start="50:18" pos:end="50:39"><name pos:start="50:18" pos:end="50:28">sem_trywait</name><argument_list pos:start="50:29" pos:end="50:39">(<argument pos:start="50:30" pos:end="50:38"><expr pos:start="50:30" pos:end="50:38"><operator pos:start="50:30" pos:end="50:30">&amp;</operator><name pos:start="50:31" pos:end="50:38"><name pos:start="50:31" pos:end="50:33">sem</name><operator pos:start="50:34" pos:end="50:35">-&gt;</operator><name pos:start="50:36" pos:end="50:38">sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="52:17" pos:end="52:44">(<expr pos:start="52:18" pos:end="52:43"><name pos:start="52:18" pos:end="52:19">rc</name> <operator pos:start="52:21" pos:end="52:22">==</operator> <operator pos:start="52:24" pos:end="52:24">-</operator><literal type="number" pos:start="52:25" pos:end="52:25">1</literal> <operator pos:start="52:27" pos:end="52:28">&amp;&amp;</operator> <name pos:start="52:30" pos:end="52:34">errno</name> <operator pos:start="52:36" pos:end="52:37">==</operator> <name pos:start="52:39" pos:end="52:43">EINTR</name></expr>)</condition>;</do>

        <if_stmt pos:start="54:9" pos:end="58:9"><if pos:start="54:9" pos:end="58:9">if <condition pos:start="54:12" pos:end="54:40">(<expr pos:start="54:13" pos:end="54:39"><name pos:start="54:13" pos:end="54:14">rc</name> <operator pos:start="54:16" pos:end="54:17">==</operator> <operator pos:start="54:19" pos:end="54:19">-</operator><literal type="number" pos:start="54:20" pos:end="54:20">1</literal> <operator pos:start="54:22" pos:end="54:23">&amp;&amp;</operator> <name pos:start="54:25" pos:end="54:29">errno</name> <operator pos:start="54:31" pos:end="54:32">==</operator> <name pos:start="54:34" pos:end="54:39">EAGAIN</name></expr>)</condition> <block pos:start="54:42" pos:end="58:9">{<block_content pos:start="56:13" pos:end="56:22">

            <return pos:start="56:13" pos:end="56:22">return <expr pos:start="56:20" pos:end="56:21"><operator pos:start="56:20" pos:end="56:20">-</operator><literal type="number" pos:start="56:21" pos:end="56:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="60:7" pos:end="76:5">else <block pos:start="60:12" pos:end="76:5">{<block_content pos:start="62:9" pos:end="74:9">

        <expr_stmt pos:start="62:9" pos:end="62:38"><expr pos:start="62:9" pos:end="62:37"><call pos:start="62:9" pos:end="62:37"><name pos:start="62:9" pos:end="62:28">compute_abs_deadline</name><argument_list pos:start="62:29" pos:end="62:37">(<argument pos:start="62:30" pos:end="62:32"><expr pos:start="62:30" pos:end="62:32"><operator pos:start="62:30" pos:end="62:30">&amp;</operator><name pos:start="62:31" pos:end="62:32">ts</name></expr></argument>, <argument pos:start="62:35" pos:end="62:36"><expr pos:start="62:35" pos:end="62:36"><name pos:start="62:35" pos:end="62:36">ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <do pos:start="64:9" pos:end="68:45">do <block pos:start="64:12" pos:end="68:9">{<block_content pos:start="66:13" pos:end="66:47">

            <expr_stmt pos:start="66:13" pos:end="66:47"><expr pos:start="66:13" pos:end="66:46"><name pos:start="66:13" pos:end="66:14">rc</name> <operator pos:start="66:16" pos:end="66:16">=</operator> <call pos:start="66:18" pos:end="66:46"><name pos:start="66:18" pos:end="66:30">sem_timedwait</name><argument_list pos:start="66:31" pos:end="66:46">(<argument pos:start="66:32" pos:end="66:40"><expr pos:start="66:32" pos:end="66:40"><operator pos:start="66:32" pos:end="66:32">&amp;</operator><name pos:start="66:33" pos:end="66:40"><name pos:start="66:33" pos:end="66:35">sem</name><operator pos:start="66:36" pos:end="66:37">-&gt;</operator><name pos:start="66:38" pos:end="66:40">sem</name></name></expr></argument>, <argument pos:start="66:43" pos:end="66:45"><expr pos:start="66:43" pos:end="66:45"><operator pos:start="66:43" pos:end="66:43">&amp;</operator><name pos:start="66:44" pos:end="66:45">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="68:17" pos:end="68:44">(<expr pos:start="68:18" pos:end="68:43"><name pos:start="68:18" pos:end="68:19">rc</name> <operator pos:start="68:21" pos:end="68:22">==</operator> <operator pos:start="68:24" pos:end="68:24">-</operator><literal type="number" pos:start="68:25" pos:end="68:25">1</literal> <operator pos:start="68:27" pos:end="68:28">&amp;&amp;</operator> <name pos:start="68:30" pos:end="68:34">errno</name> <operator pos:start="68:36" pos:end="68:37">==</operator> <name pos:start="68:39" pos:end="68:43">EINTR</name></expr>)</condition>;</do>

        <if_stmt pos:start="70:9" pos:end="74:9"><if pos:start="70:9" pos:end="74:9">if <condition pos:start="70:12" pos:end="70:43">(<expr pos:start="70:13" pos:end="70:42"><name pos:start="70:13" pos:end="70:14">rc</name> <operator pos:start="70:16" pos:end="70:17">==</operator> <operator pos:start="70:19" pos:end="70:19">-</operator><literal type="number" pos:start="70:20" pos:end="70:20">1</literal> <operator pos:start="70:22" pos:end="70:23">&amp;&amp;</operator> <name pos:start="70:25" pos:end="70:29">errno</name> <operator pos:start="70:31" pos:end="70:32">==</operator> <name pos:start="70:34" pos:end="70:42">ETIMEDOUT</name></expr>)</condition> <block pos:start="70:45" pos:end="74:9">{<block_content pos:start="72:13" pos:end="72:22">

            <return pos:start="72:13" pos:end="72:22">return <expr pos:start="72:20" pos:end="72:21"><operator pos:start="72:20" pos:end="72:20">-</operator><literal type="number" pos:start="72:21" pos:end="72:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="78:5" pos:end="82:5"><if pos:start="78:5" pos:end="82:5">if <condition pos:start="78:8" pos:end="78:15">(<expr pos:start="78:9" pos:end="78:14"><name pos:start="78:9" pos:end="78:10">rc</name> <operator pos:start="78:12" pos:end="78:12">&lt;</operator> <literal type="number" pos:start="78:14" pos:end="78:14">0</literal></expr>)</condition> <block pos:start="78:17" pos:end="82:5">{<block_content pos:start="80:9" pos:end="80:36">

        <expr_stmt pos:start="80:9" pos:end="80:36"><expr pos:start="80:9" pos:end="80:35"><call pos:start="80:9" pos:end="80:35"><name pos:start="80:9" pos:end="80:18">error_exit</name><argument_list pos:start="80:19" pos:end="80:35">(<argument pos:start="80:20" pos:end="80:24"><expr pos:start="80:20" pos:end="80:24"><name pos:start="80:20" pos:end="80:24">errno</name></expr></argument>, <argument pos:start="80:27" pos:end="80:34"><expr pos:start="80:27" pos:end="80:34"><name pos:start="80:27" pos:end="80:34">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="84:5" pos:end="87:0">return <expr pos:start="84:12" pos:end="84:12"><literal type="number" pos:start="84:12" pos:end="84:12">0</literal></expr>;</return>

<cpp:endif pos:start="86:1" pos:end="86:6">#<cpp:directive pos:start="86:2" pos:end="86:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function></unit>
