<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10870.c" pos:tabs="8"><function pos:start="1:1" pos:end="283:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">vhost_user_call</name><parameter_list pos:start="1:27" pos:end="3:18">(<parameter pos:start="1:28" pos:end="1:48"><decl pos:start="1:28" pos:end="1:48"><type pos:start="1:28" pos:end="1:48"><name pos:start="1:28" pos:end="1:43"><name pos:start="1:28" pos:end="1:33">struct</name> <name pos:start="1:35" pos:end="1:43">vhost_dev</name></name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dev</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:75"><decl pos:start="1:51" pos:end="1:75"><type pos:start="1:51" pos:end="1:75"><name pos:start="1:51" pos:end="1:58">unsigned</name> <name pos:start="1:60" pos:end="1:63">long</name> <name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:75">request</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:17"><decl pos:start="3:9" pos:end="3:17"><type pos:start="3:9" pos:end="3:17"><name pos:start="3:9" pos:end="3:12">void</name> <modifier pos:start="3:14" pos:end="3:14">*</modifier></type><name pos:start="3:15" pos:end="3:17">arg</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="283:1">{<block_content pos:start="7:5" pos:end="281:13">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">VhostUserMsg</name></type> <name pos:start="7:18" pos:end="7:20">msg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:20">VhostUserRequest</name></type> <name pos:start="9:22" pos:end="9:32">msg_request</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:37"><type pos:start="11:5" pos:end="11:29"><name pos:start="11:5" pos:end="11:27"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:27">vhost_vring_file</name></name> <modifier pos:start="11:29" pos:end="11:29">*</modifier></type><name pos:start="11:30" pos:end="11:33">file</name> <init pos:start="11:35" pos:end="11:37">= <expr pos:start="11:37" pos:end="11:37"><literal type="number" pos:start="11:37" pos:end="11:37">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:18">need_reply</name> <init pos:start="13:20" pos:end="13:22">= <expr pos:start="13:22" pos:end="13:22"><literal type="number" pos:start="13:22" pos:end="13:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:39"><decl pos:start="15:5" pos:end="15:38"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:38"><name pos:start="15:9" pos:end="15:11">fds</name><index pos:start="15:12" pos:end="15:38">[<expr pos:start="15:13" pos:end="15:37"><name pos:start="15:13" pos:end="15:37">VHOST_MEMORY_MAX_NREGIONS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:13"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:13">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">size_t</name></type> <name pos:start="19:12" pos:end="19:17">fd_num</name> <init pos:start="19:19" pos:end="19:21">= <expr pos:start="19:21" pos:end="19:21"><literal type="number" pos:start="19:21" pos:end="19:21">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:68"><expr pos:start="23:5" pos:end="23:67"><call pos:start="23:5" pos:end="23:67"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:67">(<argument pos:start="23:12" pos:end="23:66"><expr pos:start="23:12" pos:end="23:66"><name pos:start="23:12" pos:end="23:39"><name pos:start="23:12" pos:end="23:14">dev</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:25">vhost_ops</name><operator pos:start="23:26" pos:end="23:27">-&gt;</operator><name pos:start="23:28" pos:end="23:39">backend_type</name></name> <operator pos:start="23:41" pos:end="23:42">==</operator> <name pos:start="23:44" pos:end="23:66">VHOST_BACKEND_TYPE_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:56"><expr pos:start="27:5" pos:end="27:55"><name pos:start="27:5" pos:end="27:15">msg_request</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="27:55"><name pos:start="27:19" pos:end="27:46">vhost_user_request_translate</name><argument_list pos:start="27:47" pos:end="27:55">(<argument pos:start="27:48" pos:end="27:54"><expr pos:start="27:48" pos:end="27:54"><name pos:start="27:48" pos:end="27:54">request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:7">msg</name><operator pos:start="29:8" pos:end="29:8">.</operator><name pos:start="29:9" pos:end="29:15">request</name></name> <operator pos:start="29:17" pos:end="29:17">=</operator> <name pos:start="29:19" pos:end="29:29">msg_request</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:35"><expr pos:start="31:5" pos:end="31:34"><name pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:7">msg</name><operator pos:start="31:8" pos:end="31:8">.</operator><name pos:start="31:9" pos:end="31:13">flags</name></name> <operator pos:start="31:15" pos:end="31:15">=</operator> <name pos:start="31:17" pos:end="31:34">VHOST_USER_VERSION</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:17"><expr pos:start="33:5" pos:end="33:16"><name pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:7">msg</name><operator pos:start="33:8" pos:end="33:8">.</operator><name pos:start="33:9" pos:end="33:12">size</name></name> <operator pos:start="33:14" pos:end="33:14">=</operator> <literal type="number" pos:start="33:16" pos:end="33:16">0</literal></expr>;</expr_stmt>



    <switch pos:start="37:5" pos:end="203:5">switch <condition pos:start="37:12" pos:end="37:20">(<expr pos:start="37:13" pos:end="37:19"><name pos:start="37:13" pos:end="37:19">request</name></expr>)</condition> <block pos:start="37:22" pos:end="203:5">{<block_content pos:start="39:5" pos:end="201:14">

    <case pos:start="39:5" pos:end="39:28">case <expr pos:start="39:10" pos:end="39:27"><name pos:start="39:10" pos:end="39:27">VHOST_GET_FEATURES</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:23"><expr pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:18">need_reply</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <literal type="number" pos:start="41:22" pos:end="41:22">1</literal></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>



    <case pos:start="47:5" pos:end="47:28">case <expr pos:start="47:10" pos:end="47:27"><name pos:start="47:10" pos:end="47:27">VHOST_SET_FEATURES</name></expr>:</case>

    <case pos:start="49:5" pos:end="49:28">case <expr pos:start="49:10" pos:end="49:27"><name pos:start="49:10" pos:end="49:27">VHOST_SET_LOG_BASE</name></expr>:</case>

        <expr_stmt pos:start="51:9" pos:end="51:35"><expr pos:start="51:9" pos:end="51:34"><name pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:11">msg</name><operator pos:start="51:12" pos:end="51:12">.</operator><name pos:start="51:13" pos:end="51:15">u64</name></name> <operator pos:start="51:17" pos:end="51:17">=</operator> <operator pos:start="51:19" pos:end="51:19">*</operator><operator pos:start="51:20" pos:end="51:20">(</operator><operator pos:start="51:21" pos:end="51:21">(</operator><name pos:start="51:22" pos:end="51:26">__u64</name> <operator pos:start="51:28" pos:end="51:28">*</operator><operator pos:start="51:29" pos:end="51:29">)</operator> <name pos:start="51:31" pos:end="51:33">arg</name><operator pos:start="51:34" pos:end="51:34">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:33"><expr pos:start="53:9" pos:end="53:32"><name pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:11">msg</name><operator pos:start="53:12" pos:end="53:12">.</operator><name pos:start="53:13" pos:end="53:16">size</name></name> <operator pos:start="53:18" pos:end="53:18">=</operator> <sizeof pos:start="53:20" pos:end="53:32">sizeof<argument_list pos:start="53:26" pos:end="53:32">(<argument pos:start="53:27" pos:end="53:31"><expr pos:start="53:27" pos:end="53:31"><name pos:start="53:27" pos:end="53:31"><name pos:start="53:27" pos:end="53:27">m</name><operator pos:start="53:28" pos:end="53:28">.</operator><name pos:start="53:29" pos:end="53:31">u64</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>



    <case pos:start="59:5" pos:end="59:25">case <expr pos:start="59:10" pos:end="59:24"><name pos:start="59:10" pos:end="59:24">VHOST_SET_OWNER</name></expr>:</case>

    <case pos:start="61:5" pos:end="61:27">case <expr pos:start="61:10" pos:end="61:26"><name pos:start="61:10" pos:end="61:26">VHOST_RESET_OWNER</name></expr>:</case>

        <break pos:start="63:9" pos:end="63:14">break;</break>



    <case pos:start="67:5" pos:end="67:29">case <expr pos:start="67:10" pos:end="67:28"><name pos:start="67:10" pos:end="67:28">VHOST_SET_MEM_TABLE</name></expr>:</case>

        <for pos:start="69:9" pos:end="97:9">for <control pos:start="69:13" pos:end="69:48">(<init pos:start="69:14" pos:end="69:19"><expr pos:start="69:14" pos:end="69:18"><name pos:start="69:14" pos:end="69:14">i</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <literal type="number" pos:start="69:18" pos:end="69:18">0</literal></expr>;</init> <condition pos:start="69:21" pos:end="69:43"><expr pos:start="69:21" pos:end="69:42"><name pos:start="69:21" pos:end="69:21">i</name> <operator pos:start="69:23" pos:end="69:23">&lt;</operator> <name pos:start="69:25" pos:end="69:42"><name pos:start="69:25" pos:end="69:27">dev</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:32">mem</name><operator pos:start="69:33" pos:end="69:34">-&gt;</operator><name pos:start="69:35" pos:end="69:42">nregions</name></name></expr>;</condition> <incr pos:start="69:45" pos:end="69:47"><expr pos:start="69:45" pos:end="69:47"><operator pos:start="69:45" pos:end="69:46">++</operator><name pos:start="69:47" pos:end="69:47">i</name></expr></incr>)</control> <block pos:start="69:50" pos:end="97:9">{<block_content pos:start="71:13" pos:end="95:13">

            <decl_stmt pos:start="71:13" pos:end="71:68"><decl pos:start="71:13" pos:end="71:67"><type pos:start="71:13" pos:end="71:40"><name pos:start="71:13" pos:end="71:38"><name pos:start="71:13" pos:end="71:18">struct</name> <name pos:start="71:20" pos:end="71:38">vhost_memory_region</name></name> <modifier pos:start="71:40" pos:end="71:40">*</modifier></type><name pos:start="71:41" pos:end="71:43">reg</name> <init pos:start="71:45" pos:end="71:67">= <expr pos:start="71:47" pos:end="71:67"><name pos:start="71:47" pos:end="71:63"><name pos:start="71:47" pos:end="71:49">dev</name><operator pos:start="71:50" pos:end="71:51">-&gt;</operator><name pos:start="71:52" pos:end="71:54">mem</name><operator pos:start="71:55" pos:end="71:56">-&gt;</operator><name pos:start="71:57" pos:end="71:63">regions</name></name> <operator pos:start="71:65" pos:end="71:65">+</operator> <name pos:start="71:67" pos:end="71:67">i</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="73:13" pos:end="73:32"><decl pos:start="73:13" pos:end="73:31"><type pos:start="73:13" pos:end="73:22"><name pos:start="73:13" pos:end="73:22">ram_addr_t</name></type> <name pos:start="73:24" pos:end="73:31">ram_addr</name></decl>;</decl_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:76"><expr pos:start="75:13" pos:end="75:75"><call pos:start="75:13" pos:end="75:75"><name pos:start="75:13" pos:end="75:35">qemu_ram_addr_from_host</name><argument_list pos:start="75:36" pos:end="75:75">(<argument pos:start="75:37" pos:end="75:63"><expr pos:start="75:37" pos:end="75:63"><operator pos:start="75:37" pos:end="75:37">(</operator><name pos:start="75:38" pos:end="75:41">void</name> <operator pos:start="75:43" pos:end="75:43">*</operator><operator pos:start="75:44" pos:end="75:44">)</operator><name pos:start="75:45" pos:end="75:63"><name pos:start="75:45" pos:end="75:47">reg</name><operator pos:start="75:48" pos:end="75:49">-&gt;</operator><name pos:start="75:50" pos:end="75:63">userspace_addr</name></name></expr></argument>, <argument pos:start="75:66" pos:end="75:74"><expr pos:start="75:66" pos:end="75:74"><operator pos:start="75:66" pos:end="75:66">&amp;</operator><name pos:start="75:67" pos:end="75:74">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:43"><expr pos:start="77:13" pos:end="77:42"><name pos:start="77:13" pos:end="77:14">fd</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <call pos:start="77:18" pos:end="77:42"><name pos:start="77:18" pos:end="77:32">qemu_get_ram_fd</name><argument_list pos:start="77:33" pos:end="77:42">(<argument pos:start="77:34" pos:end="77:41"><expr pos:start="77:34" pos:end="77:41"><name pos:start="77:34" pos:end="77:41">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="79:13" pos:end="95:13"><if pos:start="79:13" pos:end="95:13">if <condition pos:start="79:16" pos:end="79:23">(<expr pos:start="79:17" pos:end="79:22"><name pos:start="79:17" pos:end="79:18">fd</name> <operator pos:start="79:20" pos:end="79:20">&gt;</operator> <literal type="number" pos:start="79:22" pos:end="79:22">0</literal></expr>)</condition> <block pos:start="79:25" pos:end="95:13">{<block_content pos:start="81:17" pos:end="93:35">

                <expr_stmt pos:start="81:17" pos:end="81:80"><expr pos:start="81:17" pos:end="81:79"><name pos:start="81:17" pos:end="81:42"><name pos:start="81:17" pos:end="81:19">msg</name><operator pos:start="81:20" pos:end="81:20">.</operator><name pos:start="81:21" pos:end="81:26">memory</name><operator pos:start="81:27" pos:end="81:27">.</operator><name pos:start="81:28" pos:end="81:34">regions</name><index pos:start="81:35" pos:end="81:42">[<expr pos:start="81:36" pos:end="81:41"><name pos:start="81:36" pos:end="81:41">fd_num</name></expr>]</index></name><operator pos:start="81:43" pos:end="81:43">.</operator><name pos:start="81:44" pos:end="81:57">userspace_addr</name> <operator pos:start="81:59" pos:end="81:59">=</operator> <name pos:start="81:61" pos:end="81:79"><name pos:start="81:61" pos:end="81:63">reg</name><operator pos:start="81:64" pos:end="81:65">-&gt;</operator><name pos:start="81:66" pos:end="81:79">userspace_addr</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:75"><expr pos:start="83:17" pos:end="83:74"><name pos:start="83:17" pos:end="83:42"><name pos:start="83:17" pos:end="83:19">msg</name><operator pos:start="83:20" pos:end="83:20">.</operator><name pos:start="83:21" pos:end="83:26">memory</name><operator pos:start="83:27" pos:end="83:27">.</operator><name pos:start="83:28" pos:end="83:34">regions</name><index pos:start="83:35" pos:end="83:42">[<expr pos:start="83:36" pos:end="83:41"><name pos:start="83:36" pos:end="83:41">fd_num</name></expr>]</index></name><operator pos:start="83:43" pos:end="83:43">.</operator><name pos:start="83:44" pos:end="83:54">memory_size</name>  <operator pos:start="83:57" pos:end="83:57">=</operator> <name pos:start="83:59" pos:end="83:74"><name pos:start="83:59" pos:end="83:61">reg</name><operator pos:start="83:62" pos:end="83:63">-&gt;</operator><name pos:start="83:64" pos:end="83:74">memory_size</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:82"><expr pos:start="85:17" pos:end="85:81"><name pos:start="85:17" pos:end="85:42"><name pos:start="85:17" pos:end="85:19">msg</name><operator pos:start="85:20" pos:end="85:20">.</operator><name pos:start="85:21" pos:end="85:26">memory</name><operator pos:start="85:27" pos:end="85:27">.</operator><name pos:start="85:28" pos:end="85:34">regions</name><index pos:start="85:35" pos:end="85:42">[<expr pos:start="85:36" pos:end="85:41"><name pos:start="85:36" pos:end="85:41">fd_num</name></expr>]</index></name><operator pos:start="85:43" pos:end="85:43">.</operator><name pos:start="85:44" pos:end="85:58">guest_phys_addr</name> <operator pos:start="85:60" pos:end="85:60">=</operator> <name pos:start="85:62" pos:end="85:81"><name pos:start="85:62" pos:end="85:64">reg</name><operator pos:start="85:65" pos:end="85:66">-&gt;</operator><name pos:start="85:67" pos:end="85:81">guest_phys_addr</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="87:17" pos:end="89:82"><expr pos:start="87:17" pos:end="89:81"><name pos:start="87:17" pos:end="87:42"><name pos:start="87:17" pos:end="87:19">msg</name><operator pos:start="87:20" pos:end="87:20">.</operator><name pos:start="87:21" pos:end="87:26">memory</name><operator pos:start="87:27" pos:end="87:27">.</operator><name pos:start="87:28" pos:end="87:34">regions</name><index pos:start="87:35" pos:end="87:42">[<expr pos:start="87:36" pos:end="87:41"><name pos:start="87:36" pos:end="87:41">fd_num</name></expr>]</index></name><operator pos:start="87:43" pos:end="87:43">.</operator><name pos:start="87:44" pos:end="87:54">mmap_offset</name> <operator pos:start="87:56" pos:end="87:56">=</operator> <name pos:start="87:58" pos:end="87:76"><name pos:start="87:58" pos:end="87:60">reg</name><operator pos:start="87:61" pos:end="87:62">-&gt;</operator><name pos:start="87:63" pos:end="87:76">userspace_addr</name></name> <operator pos:start="87:78" pos:end="87:78">-</operator>

                    <operator pos:start="89:21" pos:end="89:21">(</operator><name pos:start="89:22" pos:end="89:30">uintptr_t</name><operator pos:start="89:31" pos:end="89:31">)</operator> <call pos:start="89:33" pos:end="89:81"><name pos:start="89:33" pos:end="89:59">qemu_get_ram_block_host_ptr</name><argument_list pos:start="89:60" pos:end="89:81">(<argument pos:start="89:61" pos:end="89:80"><expr pos:start="89:61" pos:end="89:80"><name pos:start="89:61" pos:end="89:80"><name pos:start="89:61" pos:end="89:63">reg</name><operator pos:start="89:64" pos:end="89:65">-&gt;</operator><name pos:start="89:66" pos:end="89:80">guest_phys_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:59"><expr pos:start="91:17" pos:end="91:58"><call pos:start="91:17" pos:end="91:58"><name pos:start="91:17" pos:end="91:22">assert</name><argument_list pos:start="91:23" pos:end="91:58">(<argument pos:start="91:24" pos:end="91:57"><expr pos:start="91:24" pos:end="91:57"><name pos:start="91:24" pos:end="91:29">fd_num</name> <operator pos:start="91:31" pos:end="91:31">&lt;</operator> <name pos:start="91:33" pos:end="91:57">VHOST_MEMORY_MAX_NREGIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:35"><expr pos:start="93:17" pos:end="93:34"><name pos:start="93:17" pos:end="93:29"><name pos:start="93:17" pos:end="93:19">fds</name><index pos:start="93:20" pos:end="93:29">[<expr pos:start="93:21" pos:end="93:28"><name pos:start="93:21" pos:end="93:26">fd_num</name><operator pos:start="93:27" pos:end="93:28">++</operator></expr>]</index></name> <operator pos:start="93:31" pos:end="93:31">=</operator> <name pos:start="93:33" pos:end="93:34">fd</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="101:9" pos:end="101:37"><expr pos:start="101:9" pos:end="101:36"><name pos:start="101:9" pos:end="101:27"><name pos:start="101:9" pos:end="101:11">msg</name><operator pos:start="101:12" pos:end="101:12">.</operator><name pos:start="101:13" pos:end="101:18">memory</name><operator pos:start="101:19" pos:end="101:19">.</operator><name pos:start="101:20" pos:end="101:27">nregions</name></name> <operator pos:start="101:29" pos:end="101:29">=</operator> <name pos:start="101:31" pos:end="101:36">fd_num</name></expr>;</expr_stmt>



        <if_stmt pos:start="105:9" pos:end="113:9"><if pos:start="105:9" pos:end="113:9">if <condition pos:start="105:12" pos:end="105:20">(<expr pos:start="105:13" pos:end="105:19"><operator pos:start="105:13" pos:end="105:13">!</operator><name pos:start="105:14" pos:end="105:19">fd_num</name></expr>)</condition> <block pos:start="105:22" pos:end="113:9">{<block_content pos:start="107:13" pos:end="111:22">

            <expr_stmt pos:start="107:13" pos:end="109:77"><expr pos:start="107:13" pos:end="109:76"><call pos:start="107:13" pos:end="109:76"><name pos:start="107:13" pos:end="107:24">error_report</name><argument_list pos:start="107:25" pos:end="109:76">(<argument pos:start="107:26" pos:end="109:75"><expr pos:start="107:26" pos:end="109:75"><literal type="string" pos:start="107:26" pos:end="107:70">"Failed initializing vhost-user memory map\n"</literal>

                    <literal type="string" pos:start="109:21" pos:end="109:75">"consider using -object memory-backend-file share=on\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="111:13" pos:end="111:22">return <expr pos:start="111:20" pos:end="111:21"><operator pos:start="111:20" pos:end="111:20">-</operator><literal type="number" pos:start="111:21" pos:end="111:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="117:9" pos:end="117:45"><expr pos:start="117:9" pos:end="117:44"><name pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:11">msg</name><operator pos:start="117:12" pos:end="117:12">.</operator><name pos:start="117:13" pos:end="117:16">size</name></name> <operator pos:start="117:18" pos:end="117:18">=</operator> <sizeof pos:start="117:20" pos:end="117:44">sizeof<argument_list pos:start="117:26" pos:end="117:44">(<argument pos:start="117:27" pos:end="117:43"><expr pos:start="117:27" pos:end="117:43"><name pos:start="117:27" pos:end="117:43"><name pos:start="117:27" pos:end="117:27">m</name><operator pos:start="117:28" pos:end="117:28">.</operator><name pos:start="117:29" pos:end="117:34">memory</name><operator pos:start="117:35" pos:end="117:35">.</operator><name pos:start="117:36" pos:end="117:43">nregions</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:45"><expr pos:start="119:9" pos:end="119:44"><name pos:start="119:9" pos:end="119:16"><name pos:start="119:9" pos:end="119:11">msg</name><operator pos:start="119:12" pos:end="119:12">.</operator><name pos:start="119:13" pos:end="119:16">size</name></name> <operator pos:start="119:18" pos:end="119:19">+=</operator> <sizeof pos:start="119:21" pos:end="119:44">sizeof<argument_list pos:start="119:27" pos:end="119:44">(<argument pos:start="119:28" pos:end="119:43"><expr pos:start="119:28" pos:end="119:43"><name pos:start="119:28" pos:end="119:43"><name pos:start="119:28" pos:end="119:28">m</name><operator pos:start="119:29" pos:end="119:29">.</operator><name pos:start="119:30" pos:end="119:35">memory</name><operator pos:start="119:36" pos:end="119:36">.</operator><name pos:start="119:37" pos:end="119:43">padding</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:59"><expr pos:start="121:9" pos:end="121:58"><name pos:start="121:9" pos:end="121:16"><name pos:start="121:9" pos:end="121:11">msg</name><operator pos:start="121:12" pos:end="121:12">.</operator><name pos:start="121:13" pos:end="121:16">size</name></name> <operator pos:start="121:18" pos:end="121:19">+=</operator> <name pos:start="121:21" pos:end="121:26">fd_num</name> <operator pos:start="121:28" pos:end="121:28">*</operator> <sizeof pos:start="121:30" pos:end="121:58">sizeof<argument_list pos:start="121:36" pos:end="121:58">(<argument pos:start="121:37" pos:end="121:57"><expr pos:start="121:37" pos:end="121:57"><name pos:start="121:37" pos:end="121:57">VhostUserMemoryRegion</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



        <break pos:start="125:9" pos:end="125:14">break;</break>



    <case pos:start="129:5" pos:end="129:26">case <expr pos:start="129:10" pos:end="129:25"><name pos:start="129:10" pos:end="129:25">VHOST_SET_LOG_FD</name></expr>:</case>

        <expr_stmt pos:start="131:9" pos:end="131:39"><expr pos:start="131:9" pos:end="131:38"><name pos:start="131:9" pos:end="131:21"><name pos:start="131:9" pos:end="131:11">fds</name><index pos:start="131:12" pos:end="131:21">[<expr pos:start="131:13" pos:end="131:20"><name pos:start="131:13" pos:end="131:18">fd_num</name><operator pos:start="131:19" pos:end="131:20">++</operator></expr>]</index></name> <operator pos:start="131:23" pos:end="131:23">=</operator> <operator pos:start="131:25" pos:end="131:25">*</operator><operator pos:start="131:26" pos:end="131:26">(</operator><operator pos:start="131:27" pos:end="131:27">(</operator><name pos:start="131:28" pos:end="131:30">int</name> <operator pos:start="131:32" pos:end="131:32">*</operator><operator pos:start="131:33" pos:end="131:33">)</operator> <name pos:start="131:35" pos:end="131:37">arg</name><operator pos:start="131:38" pos:end="131:38">)</operator></expr>;</expr_stmt>

        <break pos:start="133:9" pos:end="133:14">break;</break>



    <case pos:start="137:5" pos:end="137:29">case <expr pos:start="137:10" pos:end="137:28"><name pos:start="137:10" pos:end="137:28">VHOST_SET_VRING_NUM</name></expr>:</case>

    <case pos:start="139:5" pos:end="139:30">case <expr pos:start="139:10" pos:end="139:29"><name pos:start="139:10" pos:end="139:29">VHOST_SET_VRING_BASE</name></expr>:</case>

        <expr_stmt pos:start="141:9" pos:end="141:66"><expr pos:start="141:9" pos:end="141:65"><call pos:start="141:9" pos:end="141:65"><name pos:start="141:9" pos:end="141:14">memcpy</name><argument_list pos:start="141:15" pos:end="141:65">(<argument pos:start="141:16" pos:end="141:25"><expr pos:start="141:16" pos:end="141:25"><operator pos:start="141:16" pos:end="141:16">&amp;</operator><name pos:start="141:17" pos:end="141:25"><name pos:start="141:17" pos:end="141:19">msg</name><operator pos:start="141:20" pos:end="141:20">.</operator><name pos:start="141:21" pos:end="141:25">state</name></name></expr></argument>, <argument pos:start="141:28" pos:end="141:30"><expr pos:start="141:28" pos:end="141:30"><name pos:start="141:28" pos:end="141:30">arg</name></expr></argument>, <argument pos:start="141:33" pos:end="141:64"><expr pos:start="141:33" pos:end="141:64"><sizeof pos:start="141:33" pos:end="141:64">sizeof<argument_list pos:start="141:39" pos:end="141:64">(<argument pos:start="141:40" pos:end="141:63"><expr pos:start="141:40" pos:end="141:63">struct <name pos:start="141:47" pos:end="141:63">vhost_vring_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:35"><expr pos:start="143:9" pos:end="143:34"><name pos:start="143:9" pos:end="143:16"><name pos:start="143:9" pos:end="143:11">msg</name><operator pos:start="143:12" pos:end="143:12">.</operator><name pos:start="143:13" pos:end="143:16">size</name></name> <operator pos:start="143:18" pos:end="143:18">=</operator> <sizeof pos:start="143:20" pos:end="143:34">sizeof<argument_list pos:start="143:26" pos:end="143:34">(<argument pos:start="143:27" pos:end="143:33"><expr pos:start="143:27" pos:end="143:33"><name pos:start="143:27" pos:end="143:33"><name pos:start="143:27" pos:end="143:27">m</name><operator pos:start="143:28" pos:end="143:28">.</operator><name pos:start="143:29" pos:end="143:33">state</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <break pos:start="145:9" pos:end="145:14">break;</break>



    <case pos:start="149:5" pos:end="149:30">case <expr pos:start="149:10" pos:end="149:29"><name pos:start="149:10" pos:end="149:29">VHOST_GET_VRING_BASE</name></expr>:</case>

        <expr_stmt pos:start="151:9" pos:end="151:66"><expr pos:start="151:9" pos:end="151:65"><call pos:start="151:9" pos:end="151:65"><name pos:start="151:9" pos:end="151:14">memcpy</name><argument_list pos:start="151:15" pos:end="151:65">(<argument pos:start="151:16" pos:end="151:25"><expr pos:start="151:16" pos:end="151:25"><operator pos:start="151:16" pos:end="151:16">&amp;</operator><name pos:start="151:17" pos:end="151:25"><name pos:start="151:17" pos:end="151:19">msg</name><operator pos:start="151:20" pos:end="151:20">.</operator><name pos:start="151:21" pos:end="151:25">state</name></name></expr></argument>, <argument pos:start="151:28" pos:end="151:30"><expr pos:start="151:28" pos:end="151:30"><name pos:start="151:28" pos:end="151:30">arg</name></expr></argument>, <argument pos:start="151:33" pos:end="151:64"><expr pos:start="151:33" pos:end="151:64"><sizeof pos:start="151:33" pos:end="151:64">sizeof<argument_list pos:start="151:39" pos:end="151:64">(<argument pos:start="151:40" pos:end="151:63"><expr pos:start="151:40" pos:end="151:63">struct <name pos:start="151:47" pos:end="151:63">vhost_vring_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:35"><expr pos:start="153:9" pos:end="153:34"><name pos:start="153:9" pos:end="153:16"><name pos:start="153:9" pos:end="153:11">msg</name><operator pos:start="153:12" pos:end="153:12">.</operator><name pos:start="153:13" pos:end="153:16">size</name></name> <operator pos:start="153:18" pos:end="153:18">=</operator> <sizeof pos:start="153:20" pos:end="153:34">sizeof<argument_list pos:start="153:26" pos:end="153:34">(<argument pos:start="153:27" pos:end="153:33"><expr pos:start="153:27" pos:end="153:33"><name pos:start="153:27" pos:end="153:33"><name pos:start="153:27" pos:end="153:27">m</name><operator pos:start="153:28" pos:end="153:28">.</operator><name pos:start="153:29" pos:end="153:33">state</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:23"><expr pos:start="155:9" pos:end="155:22"><name pos:start="155:9" pos:end="155:18">need_reply</name> <operator pos:start="155:20" pos:end="155:20">=</operator> <literal type="number" pos:start="155:22" pos:end="155:22">1</literal></expr>;</expr_stmt>

        <break pos:start="157:9" pos:end="157:14">break;</break>



    <case pos:start="161:5" pos:end="161:30">case <expr pos:start="161:10" pos:end="161:29"><name pos:start="161:10" pos:end="161:29">VHOST_SET_VRING_ADDR</name></expr>:</case>

        <expr_stmt pos:start="163:9" pos:end="163:64"><expr pos:start="163:9" pos:end="163:63"><call pos:start="163:9" pos:end="163:63"><name pos:start="163:9" pos:end="163:14">memcpy</name><argument_list pos:start="163:15" pos:end="163:63">(<argument pos:start="163:16" pos:end="163:24"><expr pos:start="163:16" pos:end="163:24"><operator pos:start="163:16" pos:end="163:16">&amp;</operator><name pos:start="163:17" pos:end="163:24"><name pos:start="163:17" pos:end="163:19">msg</name><operator pos:start="163:20" pos:end="163:20">.</operator><name pos:start="163:21" pos:end="163:24">addr</name></name></expr></argument>, <argument pos:start="163:27" pos:end="163:29"><expr pos:start="163:27" pos:end="163:29"><name pos:start="163:27" pos:end="163:29">arg</name></expr></argument>, <argument pos:start="163:32" pos:end="163:62"><expr pos:start="163:32" pos:end="163:62"><sizeof pos:start="163:32" pos:end="163:62">sizeof<argument_list pos:start="163:38" pos:end="163:62">(<argument pos:start="163:39" pos:end="163:61"><expr pos:start="163:39" pos:end="163:61">struct <name pos:start="163:46" pos:end="163:61">vhost_vring_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:34"><expr pos:start="165:9" pos:end="165:33"><name pos:start="165:9" pos:end="165:16"><name pos:start="165:9" pos:end="165:11">msg</name><operator pos:start="165:12" pos:end="165:12">.</operator><name pos:start="165:13" pos:end="165:16">size</name></name> <operator pos:start="165:18" pos:end="165:18">=</operator> <sizeof pos:start="165:20" pos:end="165:33">sizeof<argument_list pos:start="165:26" pos:end="165:33">(<argument pos:start="165:27" pos:end="165:32"><expr pos:start="165:27" pos:end="165:32"><name pos:start="165:27" pos:end="165:32"><name pos:start="165:27" pos:end="165:27">m</name><operator pos:start="165:28" pos:end="165:28">.</operator><name pos:start="165:29" pos:end="165:32">addr</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <break pos:start="167:9" pos:end="167:14">break;</break>



    <case pos:start="171:5" pos:end="171:30">case <expr pos:start="171:10" pos:end="171:29"><name pos:start="171:10" pos:end="171:29">VHOST_SET_VRING_KICK</name></expr>:</case>

    <case pos:start="173:5" pos:end="173:30">case <expr pos:start="173:10" pos:end="173:29"><name pos:start="173:10" pos:end="173:29">VHOST_SET_VRING_CALL</name></expr>:</case>

    <case pos:start="175:5" pos:end="175:29">case <expr pos:start="175:10" pos:end="175:28"><name pos:start="175:10" pos:end="175:28">VHOST_SET_VRING_ERR</name></expr>:</case>

        <expr_stmt pos:start="177:9" pos:end="177:19"><expr pos:start="177:9" pos:end="177:18"><name pos:start="177:9" pos:end="177:12">file</name> <operator pos:start="177:14" pos:end="177:14">=</operator> <name pos:start="177:16" pos:end="177:18">arg</name></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:58"><expr pos:start="179:9" pos:end="179:57"><name pos:start="179:9" pos:end="179:15"><name pos:start="179:9" pos:end="179:11">msg</name><operator pos:start="179:12" pos:end="179:12">.</operator><name pos:start="179:13" pos:end="179:15">u64</name></name> <operator pos:start="179:17" pos:end="179:17">=</operator> <name pos:start="179:19" pos:end="179:29"><name pos:start="179:19" pos:end="179:22">file</name><operator pos:start="179:23" pos:end="179:24">-&gt;</operator><name pos:start="179:25" pos:end="179:29">index</name></name> <operator pos:start="179:31" pos:end="179:31">&amp;</operator> <name pos:start="179:33" pos:end="179:57">VHOST_USER_VRING_IDX_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:33"><expr pos:start="181:9" pos:end="181:32"><name pos:start="181:9" pos:end="181:16"><name pos:start="181:9" pos:end="181:11">msg</name><operator pos:start="181:12" pos:end="181:12">.</operator><name pos:start="181:13" pos:end="181:16">size</name></name> <operator pos:start="181:18" pos:end="181:18">=</operator> <sizeof pos:start="181:20" pos:end="181:32">sizeof<argument_list pos:start="181:26" pos:end="181:32">(<argument pos:start="181:27" pos:end="181:31"><expr pos:start="181:27" pos:end="181:31"><name pos:start="181:27" pos:end="181:31"><name pos:start="181:27" pos:end="181:27">m</name><operator pos:start="181:28" pos:end="181:28">.</operator><name pos:start="181:29" pos:end="181:31">u64</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <if_stmt pos:start="183:9" pos:end="191:9"><if pos:start="183:9" pos:end="187:9">if <condition pos:start="183:12" pos:end="183:48">(<expr pos:start="183:13" pos:end="183:47"><call pos:start="183:13" pos:end="183:31"><name pos:start="183:13" pos:end="183:29">ioeventfd_enabled</name><argument_list pos:start="183:30" pos:end="183:31">()</argument_list></call> <operator pos:start="183:33" pos:end="183:34">&amp;&amp;</operator> <name pos:start="183:36" pos:end="183:43"><name pos:start="183:36" pos:end="183:39">file</name><operator pos:start="183:40" pos:end="183:41">-&gt;</operator><name pos:start="183:42" pos:end="183:43">fd</name></name> <operator pos:start="183:45" pos:end="183:45">&gt;</operator> <literal type="number" pos:start="183:47" pos:end="183:47">0</literal></expr>)</condition> <block pos:start="183:50" pos:end="187:9">{<block_content pos:start="185:13" pos:end="185:37">

            <expr_stmt pos:start="185:13" pos:end="185:37"><expr pos:start="185:13" pos:end="185:36"><name pos:start="185:13" pos:end="185:25"><name pos:start="185:13" pos:end="185:15">fds</name><index pos:start="185:16" pos:end="185:25">[<expr pos:start="185:17" pos:end="185:24"><name pos:start="185:17" pos:end="185:22">fd_num</name><operator pos:start="185:23" pos:end="185:24">++</operator></expr>]</index></name> <operator pos:start="185:27" pos:end="185:27">=</operator> <name pos:start="185:29" pos:end="185:36"><name pos:start="185:29" pos:end="185:32">file</name><operator pos:start="185:33" pos:end="185:34">-&gt;</operator><name pos:start="185:35" pos:end="185:36">fd</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="187:11" pos:end="191:9">else <block pos:start="187:16" pos:end="191:9">{<block_content pos:start="189:13" pos:end="189:50">

            <expr_stmt pos:start="189:13" pos:end="189:50"><expr pos:start="189:13" pos:end="189:49"><name pos:start="189:13" pos:end="189:19"><name pos:start="189:13" pos:end="189:15">msg</name><operator pos:start="189:16" pos:end="189:16">.</operator><name pos:start="189:17" pos:end="189:19">u64</name></name> <operator pos:start="189:21" pos:end="189:22">|=</operator> <name pos:start="189:24" pos:end="189:49">VHOST_USER_VRING_NOFD_MASK</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="193:9" pos:end="193:14">break;</break>

    <default pos:start="195:5" pos:end="195:12">default:</default>

        <expr_stmt pos:start="197:9" pos:end="197:68"><expr pos:start="197:9" pos:end="197:67"><call pos:start="197:9" pos:end="197:67"><name pos:start="197:9" pos:end="197:20">error_report</name><argument_list pos:start="197:21" pos:end="197:67">(<argument pos:start="197:22" pos:end="197:66"><expr pos:start="197:22" pos:end="197:66"><literal type="string" pos:start="197:22" pos:end="197:66">"vhost-user trying to send unhandled ioctl\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="199:9" pos:end="199:18">return <expr pos:start="199:16" pos:end="199:17"><operator pos:start="199:16" pos:end="199:16">-</operator><literal type="number" pos:start="199:17" pos:end="199:17">1</literal></expr>;</return>

        <break pos:start="201:9" pos:end="201:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="207:5" pos:end="211:5"><if pos:start="207:5" pos:end="211:5">if <condition pos:start="207:8" pos:end="207:53">(<expr pos:start="207:9" pos:end="207:52"><call pos:start="207:9" pos:end="207:48"><name pos:start="207:9" pos:end="207:24">vhost_user_write</name><argument_list pos:start="207:25" pos:end="207:48">(<argument pos:start="207:26" pos:end="207:28"><expr pos:start="207:26" pos:end="207:28"><name pos:start="207:26" pos:end="207:28">dev</name></expr></argument>, <argument pos:start="207:31" pos:end="207:34"><expr pos:start="207:31" pos:end="207:34"><operator pos:start="207:31" pos:end="207:31">&amp;</operator><name pos:start="207:32" pos:end="207:34">msg</name></expr></argument>, <argument pos:start="207:37" pos:end="207:39"><expr pos:start="207:37" pos:end="207:39"><name pos:start="207:37" pos:end="207:39">fds</name></expr></argument>, <argument pos:start="207:42" pos:end="207:47"><expr pos:start="207:42" pos:end="207:47"><name pos:start="207:42" pos:end="207:47">fd_num</name></expr></argument>)</argument_list></call> <operator pos:start="207:50" pos:end="207:50">&lt;</operator> <literal type="number" pos:start="207:52" pos:end="207:52">0</literal></expr>)</condition> <block pos:start="207:55" pos:end="211:5">{<block_content pos:start="209:9" pos:end="209:17">

        <return pos:start="209:9" pos:end="209:17">return <expr pos:start="209:16" pos:end="209:16"><literal type="number" pos:start="209:16" pos:end="209:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="215:5" pos:end="277:5"><if pos:start="215:5" pos:end="277:5">if <condition pos:start="215:8" pos:end="215:19">(<expr pos:start="215:9" pos:end="215:18"><name pos:start="215:9" pos:end="215:18">need_reply</name></expr>)</condition> <block pos:start="215:21" pos:end="277:5">{<block_content pos:start="217:9" pos:end="275:9">

        <if_stmt pos:start="217:9" pos:end="221:9"><if pos:start="217:9" pos:end="221:9">if <condition pos:start="217:12" pos:end="217:43">(<expr pos:start="217:13" pos:end="217:42"><call pos:start="217:13" pos:end="217:38"><name pos:start="217:13" pos:end="217:27">vhost_user_read</name><argument_list pos:start="217:28" pos:end="217:38">(<argument pos:start="217:29" pos:end="217:31"><expr pos:start="217:29" pos:end="217:31"><name pos:start="217:29" pos:end="217:31">dev</name></expr></argument>, <argument pos:start="217:34" pos:end="217:37"><expr pos:start="217:34" pos:end="217:37"><operator pos:start="217:34" pos:end="217:34">&amp;</operator><name pos:start="217:35" pos:end="217:37">msg</name></expr></argument>)</argument_list></call> <operator pos:start="217:40" pos:end="217:40">&lt;</operator> <literal type="number" pos:start="217:42" pos:end="217:42">0</literal></expr>)</condition> <block pos:start="217:45" pos:end="221:9">{<block_content pos:start="219:13" pos:end="219:21">

            <return pos:start="219:13" pos:end="219:21">return <expr pos:start="219:20" pos:end="219:20"><literal type="number" pos:start="219:20" pos:end="219:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="225:9" pos:end="233:9"><if pos:start="225:9" pos:end="233:9">if <condition pos:start="225:12" pos:end="225:39">(<expr pos:start="225:13" pos:end="225:38"><name pos:start="225:13" pos:end="225:23">msg_request</name> <operator pos:start="225:25" pos:end="225:26">!=</operator> <name pos:start="225:28" pos:end="225:38"><name pos:start="225:28" pos:end="225:30">msg</name><operator pos:start="225:31" pos:end="225:31">.</operator><name pos:start="225:32" pos:end="225:38">request</name></name></expr>)</condition> <block pos:start="225:41" pos:end="233:9">{<block_content pos:start="227:13" pos:end="231:22">

            <expr_stmt pos:start="227:13" pos:end="229:76"><expr pos:start="227:13" pos:end="229:75"><call pos:start="227:13" pos:end="229:75"><name pos:start="227:13" pos:end="227:24">error_report</name><argument_list pos:start="227:25" pos:end="229:75">(<argument pos:start="227:26" pos:end="229:48"><expr pos:start="227:26" pos:end="229:48"><literal type="string" pos:start="227:26" pos:end="227:56">"Received unexpected msg type."</literal>

                    <literal type="string" pos:start="229:21" pos:end="229:48">" Expected %d received %d\n"</literal></expr></argument>, <argument pos:start="229:51" pos:end="229:61"><expr pos:start="229:51" pos:end="229:61"><name pos:start="229:51" pos:end="229:61">msg_request</name></expr></argument>, <argument pos:start="229:64" pos:end="229:74"><expr pos:start="229:64" pos:end="229:74"><name pos:start="229:64" pos:end="229:74"><name pos:start="229:64" pos:end="229:66">msg</name><operator pos:start="229:67" pos:end="229:67">.</operator><name pos:start="229:68" pos:end="229:74">request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="231:13" pos:end="231:22">return <expr pos:start="231:20" pos:end="231:21"><operator pos:start="231:20" pos:end="231:20">-</operator><literal type="number" pos:start="231:21" pos:end="231:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="237:9" pos:end="275:9">switch <condition pos:start="237:16" pos:end="237:28">(<expr pos:start="237:17" pos:end="237:27"><name pos:start="237:17" pos:end="237:27">msg_request</name></expr>)</condition> <block pos:start="237:30" pos:end="275:9">{<block_content pos:start="239:9" pos:end="273:18">

        <case pos:start="239:9" pos:end="239:37">case <expr pos:start="239:14" pos:end="239:36"><name pos:start="239:14" pos:end="239:36">VHOST_USER_GET_FEATURES</name></expr>:</case>

            <if_stmt pos:start="241:13" pos:end="247:13"><if pos:start="241:13" pos:end="247:13">if <condition pos:start="241:16" pos:end="241:42">(<expr pos:start="241:17" pos:end="241:41"><name pos:start="241:17" pos:end="241:24"><name pos:start="241:17" pos:end="241:19">msg</name><operator pos:start="241:20" pos:end="241:20">.</operator><name pos:start="241:21" pos:end="241:24">size</name></name> <operator pos:start="241:26" pos:end="241:27">!=</operator> <sizeof pos:start="241:29" pos:end="241:41">sizeof<argument_list pos:start="241:35" pos:end="241:41">(<argument pos:start="241:36" pos:end="241:40"><expr pos:start="241:36" pos:end="241:40"><name pos:start="241:36" pos:end="241:40"><name pos:start="241:36" pos:end="241:36">m</name><operator pos:start="241:37" pos:end="241:37">.</operator><name pos:start="241:38" pos:end="241:40">u64</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="241:44" pos:end="247:13">{<block_content pos:start="243:17" pos:end="245:26">

                <expr_stmt pos:start="243:17" pos:end="243:57"><expr pos:start="243:17" pos:end="243:56"><call pos:start="243:17" pos:end="243:56"><name pos:start="243:17" pos:end="243:28">error_report</name><argument_list pos:start="243:29" pos:end="243:56">(<argument pos:start="243:30" pos:end="243:55"><expr pos:start="243:30" pos:end="243:55"><literal type="string" pos:start="243:30" pos:end="243:55">"Received bad msg size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="245:17" pos:end="245:26">return <expr pos:start="245:24" pos:end="245:25"><operator pos:start="245:24" pos:end="245:24">-</operator><literal type="number" pos:start="245:25" pos:end="245:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:39"><expr pos:start="249:13" pos:end="249:38"><operator pos:start="249:13" pos:end="249:13">*</operator><operator pos:start="249:14" pos:end="249:14">(</operator><operator pos:start="249:15" pos:end="249:15">(</operator><name pos:start="249:16" pos:end="249:20">__u64</name> <operator pos:start="249:22" pos:end="249:22">*</operator><operator pos:start="249:23" pos:end="249:23">)</operator> <name pos:start="249:25" pos:end="249:27">arg</name><operator pos:start="249:28" pos:end="249:28">)</operator> <operator pos:start="249:30" pos:end="249:30">=</operator> <name pos:start="249:32" pos:end="249:38"><name pos:start="249:32" pos:end="249:34">msg</name><operator pos:start="249:35" pos:end="249:35">.</operator><name pos:start="249:36" pos:end="249:38">u64</name></name></expr>;</expr_stmt>

            <break pos:start="251:13" pos:end="251:18">break;</break>

        <case pos:start="253:9" pos:end="253:39">case <expr pos:start="253:14" pos:end="253:38"><name pos:start="253:14" pos:end="253:38">VHOST_USER_GET_VRING_BASE</name></expr>:</case>

            <if_stmt pos:start="255:13" pos:end="261:13"><if pos:start="255:13" pos:end="261:13">if <condition pos:start="255:16" pos:end="255:44">(<expr pos:start="255:17" pos:end="255:43"><name pos:start="255:17" pos:end="255:24"><name pos:start="255:17" pos:end="255:19">msg</name><operator pos:start="255:20" pos:end="255:20">.</operator><name pos:start="255:21" pos:end="255:24">size</name></name> <operator pos:start="255:26" pos:end="255:27">!=</operator> <sizeof pos:start="255:29" pos:end="255:43">sizeof<argument_list pos:start="255:35" pos:end="255:43">(<argument pos:start="255:36" pos:end="255:42"><expr pos:start="255:36" pos:end="255:42"><name pos:start="255:36" pos:end="255:42"><name pos:start="255:36" pos:end="255:36">m</name><operator pos:start="255:37" pos:end="255:37">.</operator><name pos:start="255:38" pos:end="255:42">state</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="255:46" pos:end="261:13">{<block_content pos:start="257:17" pos:end="259:26">

                <expr_stmt pos:start="257:17" pos:end="257:57"><expr pos:start="257:17" pos:end="257:56"><call pos:start="257:17" pos:end="257:56"><name pos:start="257:17" pos:end="257:28">error_report</name><argument_list pos:start="257:29" pos:end="257:56">(<argument pos:start="257:30" pos:end="257:55"><expr pos:start="257:30" pos:end="257:55"><literal type="string" pos:start="257:30" pos:end="257:55">"Received bad msg size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="259:17" pos:end="259:26">return <expr pos:start="259:24" pos:end="259:25"><operator pos:start="259:24" pos:end="259:24">-</operator><literal type="number" pos:start="259:25" pos:end="259:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="263:13" pos:end="263:70"><expr pos:start="263:13" pos:end="263:69"><call pos:start="263:13" pos:end="263:69"><name pos:start="263:13" pos:end="263:18">memcpy</name><argument_list pos:start="263:19" pos:end="263:69">(<argument pos:start="263:20" pos:end="263:22"><expr pos:start="263:20" pos:end="263:22"><name pos:start="263:20" pos:end="263:22">arg</name></expr></argument>, <argument pos:start="263:25" pos:end="263:34"><expr pos:start="263:25" pos:end="263:34"><operator pos:start="263:25" pos:end="263:25">&amp;</operator><name pos:start="263:26" pos:end="263:34"><name pos:start="263:26" pos:end="263:28">msg</name><operator pos:start="263:29" pos:end="263:29">.</operator><name pos:start="263:30" pos:end="263:34">state</name></name></expr></argument>, <argument pos:start="263:37" pos:end="263:68"><expr pos:start="263:37" pos:end="263:68"><sizeof pos:start="263:37" pos:end="263:68">sizeof<argument_list pos:start="263:43" pos:end="263:68">(<argument pos:start="263:44" pos:end="263:67"><expr pos:start="263:44" pos:end="263:67">struct <name pos:start="263:51" pos:end="263:67">vhost_vring_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="265:13" pos:end="265:18">break;</break>

        <default pos:start="267:9" pos:end="267:16">default:</default>

            <expr_stmt pos:start="269:13" pos:end="269:60"><expr pos:start="269:13" pos:end="269:59"><call pos:start="269:13" pos:end="269:59"><name pos:start="269:13" pos:end="269:24">error_report</name><argument_list pos:start="269:25" pos:end="269:59">(<argument pos:start="269:26" pos:end="269:58"><expr pos:start="269:26" pos:end="269:58"><literal type="string" pos:start="269:26" pos:end="269:58">"Received unexpected msg type.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="271:13" pos:end="271:22">return <expr pos:start="271:20" pos:end="271:21"><operator pos:start="271:20" pos:end="271:20">-</operator><literal type="number" pos:start="271:21" pos:end="271:21">1</literal></expr>;</return>

            <break pos:start="273:13" pos:end="273:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <return pos:start="281:5" pos:end="281:13">return <expr pos:start="281:12" pos:end="281:12"><literal type="number" pos:start="281:12" pos:end="281:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
