<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20585.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">parse_cookie</name><parameter_list pos:start="1:24" pos:end="1:78">(<parameter pos:start="1:25" pos:end="1:38"><decl pos:start="1:25" pos:end="1:38"><type pos:start="1:25" pos:end="1:38"><name pos:start="1:25" pos:end="1:35">HTTPContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:53"><decl pos:start="1:41" pos:end="1:53"><type pos:start="1:41" pos:end="1:53"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:50">char</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">p</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:77"><decl pos:start="1:56" pos:end="1:77"><type pos:start="1:56" pos:end="1:77"><name pos:start="1:56" pos:end="1:67">AVDictionary</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier><modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:77">cookies</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:13">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">AVDictionary</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:28">new_params</name> <init pos:start="5:30" pos:end="5:35">= <expr pos:start="5:32" pos:end="5:35"><name pos:start="5:32" pos:end="5:35">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">AVDictionaryEntry</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:24">e</name></decl>, <decl pos:start="7:27" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:23"><modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:39">cookie_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:13">eql</name></decl>, <decl pos:start="9:16" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:10"><modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:20">name</name></decl>;</decl_stmt>



    <comment type="line" pos:start="13:5" pos:end="13:36">// ensure the cookie is parsable</comment>

    <if_stmt pos:start="15:5" pos:end="17:18"><if pos:start="15:5" pos:end="17:18">if <condition pos:start="15:8" pos:end="15:41">(<expr pos:start="15:9" pos:end="15:40"><call pos:start="15:9" pos:end="15:40"><name pos:start="15:9" pos:end="15:24">parse_set_cookie</name><argument_list pos:start="15:25" pos:end="15:40">(<argument pos:start="15:26" pos:end="15:26"><expr pos:start="15:26" pos:end="15:26"><name pos:start="15:26" pos:end="15:26">p</name></expr></argument>, <argument pos:start="15:29" pos:end="15:39"><expr pos:start="15:29" pos:end="15:39"><operator pos:start="15:29" pos:end="15:29">&amp;</operator><name pos:start="15:30" pos:end="15:39">new_params</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:18"><block_content pos:start="17:9" pos:end="17:18">

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="line" pos:start="21:5" pos:end="21:60">// if there is no cookie value there is nothing to parse</comment>

    <expr_stmt pos:start="23:5" pos:end="23:76"><expr pos:start="23:5" pos:end="23:75"><name pos:start="23:5" pos:end="23:16">cookie_entry</name> <operator pos:start="23:18" pos:end="23:18">=</operator> <call pos:start="23:20" pos:end="23:75"><name pos:start="23:20" pos:end="23:30">av_dict_get</name><argument_list pos:start="23:31" pos:end="23:75">(<argument pos:start="23:32" pos:end="23:41"><expr pos:start="23:32" pos:end="23:41"><name pos:start="23:32" pos:end="23:41">new_params</name></expr></argument>, <argument pos:start="23:44" pos:end="23:45"><expr pos:start="23:44" pos:end="23:45"><literal type="string" pos:start="23:44" pos:end="23:45">""</literal></expr></argument>, <argument pos:start="23:48" pos:end="23:51"><expr pos:start="23:48" pos:end="23:51"><name pos:start="23:48" pos:end="23:51">NULL</name></expr></argument>, <argument pos:start="23:54" pos:end="23:74"><expr pos:start="23:54" pos:end="23:74"><name pos:start="23:54" pos:end="23:74">AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="30:5"><if pos:start="25:5" pos:end="30:5">if <condition pos:start="25:8" pos:end="25:46">(<expr pos:start="25:9" pos:end="25:45"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:21">cookie_entry</name> <operator pos:start="25:23" pos:end="25:24">||</operator> <operator pos:start="25:26" pos:end="25:26">!</operator><name pos:start="25:27" pos:end="25:45"><name pos:start="25:27" pos:end="25:38">cookie_entry</name><operator pos:start="25:39" pos:end="25:40">-&gt;</operator><name pos:start="25:41" pos:end="25:45">value</name></name></expr>)</condition> <block pos:start="25:48" pos:end="30:5">{<block_content pos:start="28:9" pos:end="28:18">


        <return pos:start="28:9" pos:end="28:18">return <expr pos:start="28:16" pos:end="28:17"><operator pos:start="28:16" pos:end="28:16">-</operator><literal type="number" pos:start="28:17" pos:end="28:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="34:5" pos:end="34:71">// ensure the cookie is not expired or older than an existing value</comment>

    <if_stmt pos:start="36:5" pos:end="96:5"><if pos:start="36:5" pos:end="96:5">if <condition pos:start="36:8" pos:end="36:70">(<expr pos:start="36:9" pos:end="36:69"><operator pos:start="36:9" pos:end="36:9">(</operator><name pos:start="36:10" pos:end="36:10">e</name> <operator pos:start="36:12" pos:end="36:12">=</operator> <call pos:start="36:14" pos:end="36:56"><name pos:start="36:14" pos:end="36:24">av_dict_get</name><argument_list pos:start="36:25" pos:end="36:56">(<argument pos:start="36:26" pos:end="36:35"><expr pos:start="36:26" pos:end="36:35"><name pos:start="36:26" pos:end="36:35">new_params</name></expr></argument>, <argument pos:start="36:38" pos:end="36:46"><expr pos:start="36:38" pos:end="36:46"><literal type="string" pos:start="36:38" pos:end="36:46">"expires"</literal></expr></argument>, <argument pos:start="36:49" pos:end="36:52"><expr pos:start="36:49" pos:end="36:52"><name pos:start="36:49" pos:end="36:52">NULL</name></expr></argument>, <argument pos:start="36:55" pos:end="36:55"><expr pos:start="36:55" pos:end="36:55"><literal type="number" pos:start="36:55" pos:end="36:55">0</literal></expr></argument>)</argument_list></call><operator pos:start="36:57" pos:end="36:57">)</operator> <operator pos:start="36:59" pos:end="36:60">&amp;&amp;</operator> <name pos:start="36:62" pos:end="36:69"><name pos:start="36:62" pos:end="36:62">e</name><operator pos:start="36:63" pos:end="36:64">-&gt;</operator><name pos:start="36:65" pos:end="36:69">value</name></name></expr>)</condition> <block pos:start="36:72" pos:end="96:5">{<block_content pos:start="38:9" pos:end="94:9">

        <decl_stmt pos:start="38:9" pos:end="38:31"><decl pos:start="38:9" pos:end="38:30"><type pos:start="38:9" pos:end="38:17"><name pos:start="38:9" pos:end="38:17"><name pos:start="38:9" pos:end="38:14">struct</name> <name pos:start="38:16" pos:end="38:17">tm</name></name></type> <name pos:start="38:19" pos:end="38:24">new_tm</name> <init pos:start="38:26" pos:end="38:30">= <expr pos:start="38:28" pos:end="38:30"><block pos:start="38:28" pos:end="38:30">{<expr pos:start="38:29" pos:end="38:29"><literal type="number" pos:start="38:29" pos:end="38:29">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="40:9" pos:end="94:9"><if pos:start="40:9" pos:end="94:9">if <condition pos:start="40:12" pos:end="40:61">(<expr pos:start="40:13" pos:end="40:60"><operator pos:start="40:13" pos:end="40:13">!</operator><call pos:start="40:14" pos:end="40:60"><name pos:start="40:14" pos:end="40:41">parse_set_cookie_expiry_time</name><argument_list pos:start="40:42" pos:end="40:60">(<argument pos:start="40:43" pos:end="40:50"><expr pos:start="40:43" pos:end="40:50"><name pos:start="40:43" pos:end="40:50"><name pos:start="40:43" pos:end="40:43">e</name><operator pos:start="40:44" pos:end="40:45">-&gt;</operator><name pos:start="40:46" pos:end="40:50">value</name></name></expr></argument>, <argument pos:start="40:53" pos:end="40:59"><expr pos:start="40:53" pos:end="40:59"><operator pos:start="40:53" pos:end="40:53">&amp;</operator><name pos:start="40:54" pos:end="40:59">new_tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="40:63" pos:end="94:9">{<block_content pos:start="42:13" pos:end="92:13">

            <decl_stmt pos:start="42:13" pos:end="42:34"><decl pos:start="42:13" pos:end="42:33"><type pos:start="42:13" pos:end="42:31"><name pos:start="42:13" pos:end="42:29">AVDictionaryEntry</name> <modifier pos:start="42:31" pos:end="42:31">*</modifier></type><name pos:start="42:32" pos:end="42:33">e2</name></decl>;</decl_stmt>



            <comment type="line" pos:start="46:13" pos:end="46:58">// if the cookie has already expired ignore it</comment>

            <if_stmt pos:start="48:13" pos:end="53:13"><if pos:start="48:13" pos:end="53:13">if <condition pos:start="48:16" pos:end="48:60">(<expr pos:start="48:17" pos:end="48:59"><call pos:start="48:17" pos:end="48:34"><name pos:start="48:17" pos:end="48:25">av_timegm</name><argument_list pos:start="48:26" pos:end="48:34">(<argument pos:start="48:27" pos:end="48:33"><expr pos:start="48:27" pos:end="48:33"><operator pos:start="48:27" pos:end="48:27">&amp;</operator><name pos:start="48:28" pos:end="48:33">new_tm</name></expr></argument>)</argument_list></call> <operator pos:start="48:36" pos:end="48:36">&lt;</operator> <call pos:start="48:38" pos:end="48:49"><name pos:start="48:38" pos:end="48:47">av_gettime</name><argument_list pos:start="48:48" pos:end="48:49">()</argument_list></call> <operator pos:start="48:51" pos:end="48:51">/</operator> <literal type="number" pos:start="48:53" pos:end="48:59">1000000</literal></expr>)</condition> <block pos:start="48:62" pos:end="53:13">{<block_content pos:start="51:17" pos:end="51:26">


                <return pos:start="51:17" pos:end="51:26">return <expr pos:start="51:24" pos:end="51:25"><operator pos:start="51:24" pos:end="51:24">-</operator><literal type="number" pos:start="51:25" pos:end="51:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="line" pos:start="57:13" pos:end="57:62">// only replace an older cookie with the same name</comment>

            <expr_stmt pos:start="59:13" pos:end="59:67"><expr pos:start="59:13" pos:end="59:66"><name pos:start="59:13" pos:end="59:14">e2</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <call pos:start="59:18" pos:end="59:66"><name pos:start="59:18" pos:end="59:28">av_dict_get</name><argument_list pos:start="59:29" pos:end="59:66">(<argument pos:start="59:30" pos:end="59:37"><expr pos:start="59:30" pos:end="59:37"><operator pos:start="59:30" pos:end="59:30">*</operator><name pos:start="59:31" pos:end="59:37">cookies</name></expr></argument>, <argument pos:start="59:40" pos:end="59:56"><expr pos:start="59:40" pos:end="59:56"><name pos:start="59:40" pos:end="59:56"><name pos:start="59:40" pos:end="59:51">cookie_entry</name><operator pos:start="59:52" pos:end="59:53">-&gt;</operator><name pos:start="59:54" pos:end="59:56">key</name></name></expr></argument>, <argument pos:start="59:59" pos:end="59:62"><expr pos:start="59:59" pos:end="59:62"><name pos:start="59:59" pos:end="59:62">NULL</name></expr></argument>, <argument pos:start="59:65" pos:end="59:65"><expr pos:start="59:65" pos:end="59:65"><literal type="number" pos:start="59:65" pos:end="59:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="92:13"><if pos:start="61:13" pos:end="92:13">if <condition pos:start="61:16" pos:end="61:32">(<expr pos:start="61:17" pos:end="61:31"><name pos:start="61:17" pos:end="61:18">e2</name> <operator pos:start="61:20" pos:end="61:21">&amp;&amp;</operator> <name pos:start="61:23" pos:end="61:31"><name pos:start="61:23" pos:end="61:24">e2</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:31">value</name></name></expr>)</condition> <block pos:start="61:34" pos:end="92:13">{<block_content pos:start="63:17" pos:end="90:42">

                <decl_stmt pos:start="63:17" pos:end="63:48"><decl pos:start="63:17" pos:end="63:47"><type pos:start="63:17" pos:end="63:30"><name pos:start="63:17" pos:end="63:28">AVDictionary</name> <modifier pos:start="63:30" pos:end="63:30">*</modifier></type><name pos:start="63:31" pos:end="63:40">old_params</name> <init pos:start="63:42" pos:end="63:47">= <expr pos:start="63:44" pos:end="63:47"><name pos:start="63:44" pos:end="63:47">NULL</name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="65:17" pos:end="88:17"><if pos:start="65:17" pos:end="88:17">if <condition pos:start="65:20" pos:end="65:54">(<expr pos:start="65:21" pos:end="65:53"><operator pos:start="65:21" pos:end="65:21">!</operator><call pos:start="65:22" pos:end="65:53"><name pos:start="65:22" pos:end="65:37">parse_set_cookie</name><argument_list pos:start="65:38" pos:end="65:53">(<argument pos:start="65:39" pos:end="65:39"><expr pos:start="65:39" pos:end="65:39"><name pos:start="65:39" pos:end="65:39">p</name></expr></argument>, <argument pos:start="65:42" pos:end="65:52"><expr pos:start="65:42" pos:end="65:52"><operator pos:start="65:42" pos:end="65:42">&amp;</operator><name pos:start="65:43" pos:end="65:52">old_params</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:56" pos:end="88:17">{<block_content pos:start="67:21" pos:end="86:21">

                    <expr_stmt pos:start="67:21" pos:end="67:69"><expr pos:start="67:21" pos:end="67:68"><name pos:start="67:21" pos:end="67:22">e2</name> <operator pos:start="67:24" pos:end="67:24">=</operator> <call pos:start="67:26" pos:end="67:68"><name pos:start="67:26" pos:end="67:36">av_dict_get</name><argument_list pos:start="67:37" pos:end="67:68">(<argument pos:start="67:38" pos:end="67:47"><expr pos:start="67:38" pos:end="67:47"><name pos:start="67:38" pos:end="67:47">old_params</name></expr></argument>, <argument pos:start="67:50" pos:end="67:58"><expr pos:start="67:50" pos:end="67:58"><literal type="string" pos:start="67:50" pos:end="67:58">"expires"</literal></expr></argument>, <argument pos:start="67:61" pos:end="67:64"><expr pos:start="67:61" pos:end="67:64"><name pos:start="67:61" pos:end="67:64">NULL</name></expr></argument>, <argument pos:start="67:67" pos:end="67:67"><expr pos:start="67:67" pos:end="67:67"><literal type="number" pos:start="67:67" pos:end="67:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="69:21" pos:end="86:21"><if pos:start="69:21" pos:end="86:21">if <condition pos:start="69:24" pos:end="69:40">(<expr pos:start="69:25" pos:end="69:39"><name pos:start="69:25" pos:end="69:26">e2</name> <operator pos:start="69:28" pos:end="69:29">&amp;&amp;</operator> <name pos:start="69:31" pos:end="69:39"><name pos:start="69:31" pos:end="69:32">e2</name><operator pos:start="69:33" pos:end="69:34">-&gt;</operator><name pos:start="69:35" pos:end="69:39">value</name></name></expr>)</condition> <block pos:start="69:42" pos:end="86:21">{<block_content pos:start="71:25" pos:end="84:25">

                        <decl_stmt pos:start="71:25" pos:end="71:47"><decl pos:start="71:25" pos:end="71:46"><type pos:start="71:25" pos:end="71:33"><name pos:start="71:25" pos:end="71:33"><name pos:start="71:25" pos:end="71:30">struct</name> <name pos:start="71:32" pos:end="71:33">tm</name></name></type> <name pos:start="71:35" pos:end="71:40">old_tm</name> <init pos:start="71:42" pos:end="71:46">= <expr pos:start="71:44" pos:end="71:46"><block pos:start="71:44" pos:end="71:46">{<expr pos:start="71:45" pos:end="71:45"><literal type="number" pos:start="71:45" pos:end="71:45">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="73:25" pos:end="84:25"><if pos:start="73:25" pos:end="84:25">if <condition pos:start="73:28" pos:end="73:77">(<expr pos:start="73:29" pos:end="73:76"><operator pos:start="73:29" pos:end="73:29">!</operator><call pos:start="73:30" pos:end="73:76"><name pos:start="73:30" pos:end="73:57">parse_set_cookie_expiry_time</name><argument_list pos:start="73:58" pos:end="73:76">(<argument pos:start="73:59" pos:end="73:66"><expr pos:start="73:59" pos:end="73:66"><name pos:start="73:59" pos:end="73:66"><name pos:start="73:59" pos:end="73:59">e</name><operator pos:start="73:60" pos:end="73:61">-&gt;</operator><name pos:start="73:62" pos:end="73:66">value</name></name></expr></argument>, <argument pos:start="73:69" pos:end="73:75"><expr pos:start="73:69" pos:end="73:75"><operator pos:start="73:69" pos:end="73:69">&amp;</operator><name pos:start="73:70" pos:end="73:75">old_tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:79" pos:end="84:25">{<block_content pos:start="75:29" pos:end="82:29">

                            <if_stmt pos:start="75:29" pos:end="82:29"><if pos:start="75:29" pos:end="82:29">if <condition pos:start="75:32" pos:end="75:72">(<expr pos:start="75:33" pos:end="75:71"><call pos:start="75:33" pos:end="75:50"><name pos:start="75:33" pos:end="75:41">av_timegm</name><argument_list pos:start="75:42" pos:end="75:50">(<argument pos:start="75:43" pos:end="75:49"><expr pos:start="75:43" pos:end="75:49"><operator pos:start="75:43" pos:end="75:43">&amp;</operator><name pos:start="75:44" pos:end="75:49">new_tm</name></expr></argument>)</argument_list></call> <operator pos:start="75:52" pos:end="75:52">&lt;</operator> <call pos:start="75:54" pos:end="75:71"><name pos:start="75:54" pos:end="75:62">av_timegm</name><argument_list pos:start="75:63" pos:end="75:71">(<argument pos:start="75:64" pos:end="75:70"><expr pos:start="75:64" pos:end="75:70"><operator pos:start="75:64" pos:end="75:64">&amp;</operator><name pos:start="75:65" pos:end="75:70">old_tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:74" pos:end="82:29">{<block_content pos:start="78:33" pos:end="80:42">


                                <expr_stmt pos:start="78:33" pos:end="78:58"><expr pos:start="78:33" pos:end="78:57"><call pos:start="78:33" pos:end="78:57"><name pos:start="78:33" pos:end="78:44">av_dict_free</name><argument_list pos:start="78:45" pos:end="78:57">(<argument pos:start="78:46" pos:end="78:56"><expr pos:start="78:46" pos:end="78:56"><operator pos:start="78:46" pos:end="78:46">&amp;</operator><name pos:start="78:47" pos:end="78:56">old_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <return pos:start="80:33" pos:end="80:42">return <expr pos:start="80:40" pos:end="80:41"><operator pos:start="80:40" pos:end="80:40">-</operator><literal type="number" pos:start="80:41" pos:end="80:41">1</literal></expr>;</return>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="90:17" pos:end="90:42"><expr pos:start="90:17" pos:end="90:41"><call pos:start="90:17" pos:end="90:41"><name pos:start="90:17" pos:end="90:28">av_dict_free</name><argument_list pos:start="90:29" pos:end="90:41">(<argument pos:start="90:30" pos:end="90:40"><expr pos:start="90:30" pos:end="90:40"><operator pos:start="90:30" pos:end="90:30">&amp;</operator><name pos:start="90:31" pos:end="90:40">old_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>




    <comment type="line" pos:start="101:5" pos:end="101:59">// duplicate the cookie name (dict will dupe the value)</comment>

    <if_stmt pos:start="103:5" pos:end="103:56"><if pos:start="103:5" pos:end="103:56">if <condition pos:start="103:8" pos:end="103:32">(<expr pos:start="103:9" pos:end="103:31"><operator pos:start="103:9" pos:end="103:9">!</operator><operator pos:start="103:10" pos:end="103:10">(</operator><name pos:start="103:11" pos:end="103:13">eql</name> <operator pos:start="103:15" pos:end="103:15">=</operator> <call pos:start="103:17" pos:end="103:30"><name pos:start="103:17" pos:end="103:22">strchr</name><argument_list pos:start="103:23" pos:end="103:30">(<argument pos:start="103:24" pos:end="103:24"><expr pos:start="103:24" pos:end="103:24"><name pos:start="103:24" pos:end="103:24">p</name></expr></argument>, <argument pos:start="103:27" pos:end="103:29"><expr pos:start="103:27" pos:end="103:29"><literal type="char" pos:start="103:27" pos:end="103:29">'='</literal></expr></argument>)</argument_list></call><operator pos:start="103:31" pos:end="103:31">)</operator></expr>)</condition><block type="pseudo" pos:start="103:34" pos:end="103:56"><block_content pos:start="103:34" pos:end="103:56"> <return pos:start="103:34" pos:end="103:56">return <expr pos:start="103:41" pos:end="103:55"><call pos:start="103:41" pos:end="103:55"><name pos:start="103:41" pos:end="103:47">AVERROR</name><argument_list pos:start="103:48" pos:end="103:55">(<argument pos:start="103:49" pos:end="103:54"><expr pos:start="103:49" pos:end="103:54"><name pos:start="103:49" pos:end="103:54">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="105:5" pos:end="105:65"><if pos:start="105:5" pos:end="105:65">if <condition pos:start="105:8" pos:end="105:41">(<expr pos:start="105:9" pos:end="105:40"><operator pos:start="105:9" pos:end="105:9">!</operator><operator pos:start="105:10" pos:end="105:10">(</operator><name pos:start="105:11" pos:end="105:14">name</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <call pos:start="105:18" pos:end="105:39"><name pos:start="105:18" pos:end="105:27">av_strndup</name><argument_list pos:start="105:28" pos:end="105:39">(<argument pos:start="105:29" pos:end="105:29"><expr pos:start="105:29" pos:end="105:29"><name pos:start="105:29" pos:end="105:29">p</name></expr></argument>, <argument pos:start="105:32" pos:end="105:38"><expr pos:start="105:32" pos:end="105:38"><name pos:start="105:32" pos:end="105:34">eql</name> <operator pos:start="105:36" pos:end="105:36">-</operator> <name pos:start="105:38" pos:end="105:38">p</name></expr></argument>)</argument_list></call><operator pos:start="105:40" pos:end="105:40">)</operator></expr>)</condition><block type="pseudo" pos:start="105:43" pos:end="105:65"><block_content pos:start="105:43" pos:end="105:65"> <return pos:start="105:43" pos:end="105:65">return <expr pos:start="105:50" pos:end="105:64"><call pos:start="105:50" pos:end="105:64"><name pos:start="105:50" pos:end="105:56">AVERROR</name><argument_list pos:start="105:57" pos:end="105:64">(<argument pos:start="105:58" pos:end="105:63"><expr pos:start="105:58" pos:end="105:63"><name pos:start="105:58" pos:end="105:63">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="line" pos:start="109:5" pos:end="109:39">// add the cookie to the dictionary</comment>

    <expr_stmt pos:start="111:5" pos:end="111:61"><expr pos:start="111:5" pos:end="111:60"><call pos:start="111:5" pos:end="111:60"><name pos:start="111:5" pos:end="111:15">av_dict_set</name><argument_list pos:start="111:16" pos:end="111:60">(<argument pos:start="111:17" pos:end="111:23"><expr pos:start="111:17" pos:end="111:23"><name pos:start="111:17" pos:end="111:23">cookies</name></expr></argument>, <argument pos:start="111:26" pos:end="111:29"><expr pos:start="111:26" pos:end="111:29"><name pos:start="111:26" pos:end="111:29">name</name></expr></argument>, <argument pos:start="111:32" pos:end="111:34"><expr pos:start="111:32" pos:end="111:34"><name pos:start="111:32" pos:end="111:34">eql</name></expr></argument>, <argument pos:start="111:37" pos:end="111:59"><expr pos:start="111:37" pos:end="111:59"><name pos:start="111:37" pos:end="111:59">AV_DICT_DONT_STRDUP_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="115:5" pos:end="115:13">return <expr pos:start="115:12" pos:end="115:12"><literal type="number" pos:start="115:12" pos:end="115:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
