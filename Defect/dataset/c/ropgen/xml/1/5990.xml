<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5990.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:18">get_cod</name><parameter_list pos:start="1:19" pos:end="3:39">(<parameter pos:start="1:20" pos:end="1:44"><decl pos:start="1:20" pos:end="1:44"><type pos:start="1:20" pos:end="1:44"><name pos:start="1:20" pos:end="1:41">Jpeg2000DecoderContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:68"><decl pos:start="1:47" pos:end="1:68"><type pos:start="1:47" pos:end="1:68"><name pos:start="1:47" pos:end="1:65">Jpeg2000CodingStyle</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:68">c</name></decl></parameter>,

                   <parameter pos:start="3:20" pos:end="3:38"><decl pos:start="3:20" pos:end="3:38"><type pos:start="3:20" pos:end="3:38"><name pos:start="3:20" pos:end="3:26">uint8_t</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:38">properties</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="51:1">{<block_content pos:start="7:5" pos:end="49:13">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:23">Jpeg2000CodingStyle</name></type> <name pos:start="7:25" pos:end="7:27">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">compno</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:35"><if pos:start="13:5" pos:end="15:35">if <condition pos:start="13:8" pos:end="13:32">(<expr pos:start="13:9" pos:end="13:31"><name pos:start="13:9" pos:end="13:18"><name pos:start="13:9" pos:end="13:9">s</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:18">buf_end</name></name> <operator pos:start="13:20" pos:end="13:20">-</operator> <name pos:start="13:22" pos:end="13:27"><name pos:start="13:22" pos:end="13:22">s</name><operator pos:start="13:23" pos:end="13:24">-&gt;</operator><name pos:start="13:25" pos:end="13:27">buf</name></name> <operator pos:start="13:29" pos:end="13:29">&lt;</operator> <literal type="number" pos:start="13:31" pos:end="13:31">5</literal></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:35"><block_content pos:start="15:9" pos:end="15:35">

        <return pos:start="15:9" pos:end="15:35">return <expr pos:start="15:16" pos:end="15:34"><name pos:start="15:16" pos:end="15:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:30"><expr pos:start="19:5" pos:end="21:29"><name pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:7">tmp</name><operator pos:start="19:8" pos:end="19:8">.</operator><name pos:start="19:9" pos:end="19:23">log2_prec_width</name></name>  <operator pos:start="19:26" pos:end="19:26">=</operator>

    <name pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:7">tmp</name><operator pos:start="21:8" pos:end="21:8">.</operator><name pos:start="21:9" pos:end="21:24">log2_prec_height</name></name> <operator pos:start="21:26" pos:end="21:26">=</operator> <literal type="number" pos:start="21:28" pos:end="21:29">15</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:44"><expr pos:start="25:5" pos:end="25:43"><name pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:7">tmp</name><operator pos:start="25:8" pos:end="25:8">.</operator><name pos:start="25:9" pos:end="25:12">csty</name></name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:43"><name pos:start="25:16" pos:end="25:34">bytestream_get_byte</name><argument_list pos:start="25:35" pos:end="25:43">(<argument pos:start="25:36" pos:end="25:42"><expr pos:start="25:36" pos:end="25:42"><operator pos:start="25:36" pos:end="25:36">&amp;</operator><name pos:start="25:37" pos:end="25:42"><name pos:start="25:37" pos:end="25:37">s</name><operator pos:start="25:38" pos:end="25:39">-&gt;</operator><name pos:start="25:40" pos:end="25:42">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="29:5" pos:end="29:28">// get progression order</comment>

    <expr_stmt pos:start="31:5" pos:end="31:50"><expr pos:start="31:5" pos:end="31:49"><name pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:7">tmp</name><operator pos:start="31:8" pos:end="31:8">.</operator><name pos:start="31:9" pos:end="31:18">prog_order</name></name> <operator pos:start="31:20" pos:end="31:20">=</operator> <call pos:start="31:22" pos:end="31:49"><name pos:start="31:22" pos:end="31:40">bytestream_get_byte</name><argument_list pos:start="31:41" pos:end="31:49">(<argument pos:start="31:42" pos:end="31:48"><expr pos:start="31:42" pos:end="31:48"><operator pos:start="31:42" pos:end="31:42">&amp;</operator><name pos:start="31:43" pos:end="31:48"><name pos:start="31:43" pos:end="31:43">s</name><operator pos:start="31:44" pos:end="31:45">-&gt;</operator><name pos:start="31:46" pos:end="31:48">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:47"><expr pos:start="35:5" pos:end="35:46"><name pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:7">tmp</name><operator pos:start="35:8" pos:end="35:8">.</operator><name pos:start="35:9" pos:end="35:15">nlayers</name></name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:46"><name pos:start="35:19" pos:end="35:37">bytestream_get_be16</name><argument_list pos:start="35:38" pos:end="35:46">(<argument pos:start="35:39" pos:end="35:45"><expr pos:start="35:39" pos:end="35:45"><operator pos:start="35:39" pos:end="35:39">&amp;</operator><name pos:start="35:40" pos:end="35:45"><name pos:start="35:40" pos:end="35:40">s</name><operator pos:start="35:41" pos:end="35:42">-&gt;</operator><name pos:start="35:43" pos:end="35:45">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:47"><expr pos:start="37:5" pos:end="37:46"><name pos:start="37:5" pos:end="37:11"><name pos:start="37:5" pos:end="37:7">tmp</name><operator pos:start="37:8" pos:end="37:8">.</operator><name pos:start="37:9" pos:end="37:11">mct</name></name>     <operator pos:start="37:17" pos:end="37:17">=</operator> <call pos:start="37:19" pos:end="37:46"><name pos:start="37:19" pos:end="37:37">bytestream_get_byte</name><argument_list pos:start="37:38" pos:end="37:46">(<argument pos:start="37:39" pos:end="37:45"><expr pos:start="37:39" pos:end="37:45"><operator pos:start="37:39" pos:end="37:39">&amp;</operator><name pos:start="37:40" pos:end="37:45"><name pos:start="37:40" pos:end="37:40">s</name><operator pos:start="37:41" pos:end="37:42">-&gt;</operator><name pos:start="37:43" pos:end="37:45">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="37:49" pos:end="37:84">// multiple component transformation</comment>



    <expr_stmt pos:start="41:5" pos:end="41:21"><expr pos:start="41:5" pos:end="41:20"><call pos:start="41:5" pos:end="41:20"><name pos:start="41:5" pos:end="41:11">get_cox</name><argument_list pos:start="41:12" pos:end="41:20">(<argument pos:start="41:13" pos:end="41:13"><expr pos:start="41:13" pos:end="41:13"><name pos:start="41:13" pos:end="41:13">s</name></expr></argument>, <argument pos:start="41:16" pos:end="41:19"><expr pos:start="41:16" pos:end="41:19"><operator pos:start="41:16" pos:end="41:16">&amp;</operator><name pos:start="41:17" pos:end="41:19">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="43:5" pos:end="47:50">for <control pos:start="43:9" pos:end="43:55">(<init pos:start="43:10" pos:end="43:20"><expr pos:start="43:10" pos:end="43:19"><name pos:start="43:10" pos:end="43:15">compno</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>;</init> <condition pos:start="43:22" pos:end="43:45"><expr pos:start="43:22" pos:end="43:44"><name pos:start="43:22" pos:end="43:27">compno</name> <operator pos:start="43:29" pos:end="43:29">&lt;</operator> <name pos:start="43:31" pos:end="43:44"><name pos:start="43:31" pos:end="43:31">s</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:44">ncomponents</name></name></expr>;</condition> <incr pos:start="43:47" pos:end="43:54"><expr pos:start="43:47" pos:end="43:54"><name pos:start="43:47" pos:end="43:52">compno</name><operator pos:start="43:53" pos:end="43:54">++</operator></expr></incr>)</control><block type="pseudo" pos:start="45:9" pos:end="47:50"><block_content pos:start="45:9" pos:end="47:50">

        <if_stmt pos:start="45:9" pos:end="47:50"><if pos:start="45:9" pos:end="47:50">if <condition pos:start="45:12" pos:end="45:44">(<expr pos:start="45:13" pos:end="45:43"><operator pos:start="45:13" pos:end="45:13">!</operator><operator pos:start="45:14" pos:end="45:14">(</operator><name pos:start="45:15" pos:end="45:32"><name pos:start="45:15" pos:end="45:24">properties</name><index pos:start="45:25" pos:end="45:32">[<expr pos:start="45:26" pos:end="45:31"><name pos:start="45:26" pos:end="45:31">compno</name></expr>]</index></name> <operator pos:start="45:34" pos:end="45:34">&amp;</operator> <name pos:start="45:36" pos:end="45:42">HAD_COC</name><operator pos:start="45:43" pos:end="45:43">)</operator></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:50"><block_content pos:start="47:13" pos:end="47:50">

            <expr_stmt pos:start="47:13" pos:end="47:50"><expr pos:start="47:13" pos:end="47:49"><call pos:start="47:13" pos:end="47:49"><name pos:start="47:13" pos:end="47:18">memcpy</name><argument_list pos:start="47:19" pos:end="47:49">(<argument pos:start="47:20" pos:end="47:29"><expr pos:start="47:20" pos:end="47:29"><name pos:start="47:20" pos:end="47:20">c</name> <operator pos:start="47:22" pos:end="47:22">+</operator> <name pos:start="47:24" pos:end="47:29">compno</name></expr></argument>, <argument pos:start="47:32" pos:end="47:35"><expr pos:start="47:32" pos:end="47:35"><operator pos:start="47:32" pos:end="47:32">&amp;</operator><name pos:start="47:33" pos:end="47:35">tmp</name></expr></argument>, <argument pos:start="47:38" pos:end="47:48"><expr pos:start="47:38" pos:end="47:48"><sizeof pos:start="47:38" pos:end="47:48">sizeof<argument_list pos:start="47:44" pos:end="47:48">(<argument pos:start="47:45" pos:end="47:47"><expr pos:start="47:45" pos:end="47:47"><name pos:start="47:45" pos:end="47:47">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

    <return pos:start="49:5" pos:end="49:13">return <expr pos:start="49:12" pos:end="49:12"><literal type="number" pos:start="49:12" pos:end="49:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
