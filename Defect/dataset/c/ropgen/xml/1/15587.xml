<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15587.c" pos:tabs="8"><function pos:start="1:1" pos:end="665:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint32_t</name></type> <name pos:start="1:10" pos:end="1:27">do_arm_semihosting</name><parameter_list pos:start="1:28" pos:end="1:45">(<parameter pos:start="1:29" pos:end="1:44"><decl pos:start="1:29" pos:end="1:44"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:39">CPUARMState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="665:1">{<block_content pos:start="5:5" pos:end="663:5">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:16">target_ulong</name></type> <name pos:start="5:18" pos:end="5:21">args</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type> <name pos:start="7:12" pos:end="7:12">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">nr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:16">len</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="15:1" pos:end="15:23">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:23">CONFIG_USER_ONLY</name></cpp:ifdef>

    <decl_stmt pos:start="17:5" pos:end="20:0"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:13">TaskState</name> <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:17">ts</name> <init pos:start="17:19" pos:end="17:31">= <expr pos:start="17:21" pos:end="17:31"><name pos:start="17:21" pos:end="17:31"><name pos:start="17:21" pos:end="17:23">env</name><operator pos:start="17:24" pos:end="17:25">-&gt;</operator><name pos:start="17:26" pos:end="17:31">opaque</name></name></expr></init></decl>;</decl_stmt>

<cpp:else pos:start="19:1" pos:end="19:5">#<cpp:directive pos:start="19:2" pos:end="19:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="21:5" pos:end="24:0"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">CPUARMState</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:19">ts</name> <init pos:start="21:21" pos:end="21:25">= <expr pos:start="21:23" pos:end="21:25"><name pos:start="21:23" pos:end="21:25">env</name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="27:5" pos:end="27:22"><expr pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:6">nr</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <name pos:start="27:10" pos:end="27:21"><name pos:start="27:10" pos:end="27:12">env</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:18">regs</name><index pos:start="27:19" pos:end="27:21">[<expr pos:start="27:20" pos:end="27:20"><literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:24"><expr pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:8">args</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <name pos:start="29:12" pos:end="29:23"><name pos:start="29:12" pos:end="29:14">env</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:20">regs</name><index pos:start="29:21" pos:end="29:23">[<expr pos:start="29:22" pos:end="29:22"><literal type="number" pos:start="29:22" pos:end="29:22">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <switch pos:start="31:5" pos:end="663:5">switch <condition pos:start="31:12" pos:end="31:15">(<expr pos:start="31:13" pos:end="31:14"><name pos:start="31:13" pos:end="31:14">nr</name></expr>)</condition> <block pos:start="31:17" pos:end="663:5">{<block_content pos:start="33:5" pos:end="661:16">

    <case pos:start="33:5" pos:end="33:25">case <expr pos:start="33:10" pos:end="33:24"><name pos:start="33:10" pos:end="33:24">TARGET_SYS_OPEN</name></expr>:</case>

        <if_stmt pos:start="35:9" pos:end="39:32"><if pos:start="35:9" pos:end="39:32">if <condition pos:start="35:12" pos:end="35:44">(<expr pos:start="35:13" pos:end="35:43"><operator pos:start="35:13" pos:end="35:13">!</operator><operator pos:start="35:14" pos:end="35:14">(</operator><name pos:start="35:15" pos:end="35:15">s</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:42"><name pos:start="35:19" pos:end="35:34">lock_user_string</name><argument_list pos:start="35:35" pos:end="35:42">(<argument pos:start="35:36" pos:end="35:41"><expr pos:start="35:36" pos:end="35:41"><call pos:start="35:36" pos:end="35:41"><name pos:start="35:36" pos:end="35:38">ARG</name><argument_list pos:start="35:39" pos:end="35:41">(<argument pos:start="35:40" pos:end="35:40"><expr pos:start="35:40" pos:end="35:40"><literal type="number" pos:start="35:40" pos:end="35:40">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="35:43" pos:end="35:43">)</operator></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:32"><block_content pos:start="39:13" pos:end="39:32">

            <comment type="block" pos:start="37:13" pos:end="37:68">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

            <return pos:start="39:13" pos:end="39:32">return <expr pos:start="39:20" pos:end="39:31"><operator pos:start="39:20" pos:end="39:20">(</operator><name pos:start="39:21" pos:end="39:28">uint32_t</name><operator pos:start="39:29" pos:end="39:29">)</operator><operator pos:start="39:30" pos:end="39:30">-</operator><literal type="number" pos:start="39:31" pos:end="39:31">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="41:9" pos:end="43:32"><if pos:start="41:9" pos:end="43:32">if <condition pos:start="41:12" pos:end="41:25">(<expr pos:start="41:13" pos:end="41:24"><call pos:start="41:13" pos:end="41:18"><name pos:start="41:13" pos:end="41:15">ARG</name><argument_list pos:start="41:16" pos:end="41:18">(<argument pos:start="41:17" pos:end="41:17"><expr pos:start="41:17" pos:end="41:17"><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr></argument>)</argument_list></call> <operator pos:start="41:20" pos:end="41:21">&gt;=</operator> <literal type="number" pos:start="41:23" pos:end="41:24">12</literal></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:32"><block_content pos:start="43:13" pos:end="43:32">

            <return pos:start="43:13" pos:end="43:32">return <expr pos:start="43:20" pos:end="43:31"><operator pos:start="43:20" pos:end="43:20">(</operator><name pos:start="43:21" pos:end="43:28">uint32_t</name><operator pos:start="43:29" pos:end="43:29">)</operator><operator pos:start="43:30" pos:end="43:30">-</operator><literal type="number" pos:start="43:31" pos:end="43:31">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="45:9" pos:end="55:9"><if pos:start="45:9" pos:end="55:9">if <condition pos:start="45:12" pos:end="45:34">(<expr pos:start="45:13" pos:end="45:33"><call pos:start="45:13" pos:end="45:28"><name pos:start="45:13" pos:end="45:18">strcmp</name><argument_list pos:start="45:19" pos:end="45:28">(<argument pos:start="45:20" pos:end="45:20"><expr pos:start="45:20" pos:end="45:20"><name pos:start="45:20" pos:end="45:20">s</name></expr></argument>, <argument pos:start="45:23" pos:end="45:27"><expr pos:start="45:23" pos:end="45:27"><literal type="string" pos:start="45:23" pos:end="45:27">":tt"</literal></expr></argument>)</argument_list></call> <operator pos:start="45:30" pos:end="45:31">==</operator> <literal type="number" pos:start="45:33" pos:end="45:33">0</literal></expr>)</condition> <block pos:start="45:36" pos:end="55:9">{<block_content pos:start="47:13" pos:end="53:37">

            <if_stmt pos:start="47:13" pos:end="53:37"><if pos:start="47:13" pos:end="49:36">if <condition pos:start="47:16" pos:end="47:27">(<expr pos:start="47:17" pos:end="47:26"><call pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:19">ARG</name><argument_list pos:start="47:20" pos:end="47:22">(<argument pos:start="47:21" pos:end="47:21"><expr pos:start="47:21" pos:end="47:21"><literal type="number" pos:start="47:21" pos:end="47:21">1</literal></expr></argument>)</argument_list></call> <operator pos:start="47:24" pos:end="47:24">&lt;</operator> <literal type="number" pos:start="47:26" pos:end="47:26">4</literal></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:36"><block_content pos:start="49:17" pos:end="49:36">

                <return pos:start="49:17" pos:end="49:36">return <expr pos:start="49:24" pos:end="49:35"><name pos:start="49:24" pos:end="49:35">STDIN_FILENO</name></expr>;</return></block_content></block></if>

            <else pos:start="51:13" pos:end="53:37">else<block type="pseudo" pos:start="53:17" pos:end="53:37"><block_content pos:start="53:17" pos:end="53:37">

                <return pos:start="53:17" pos:end="53:37">return <expr pos:start="53:24" pos:end="53:36"><name pos:start="53:24" pos:end="53:36">STDOUT_FILENO</name></expr>;</return></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="69:9"><if pos:start="57:9" pos:end="65:9">if <condition pos:start="57:12" pos:end="57:31">(<expr pos:start="57:13" pos:end="57:30"><call pos:start="57:13" pos:end="57:30"><name pos:start="57:13" pos:end="57:28">use_gdb_syscalls</name><argument_list pos:start="57:29" pos:end="57:30">()</argument_list></call></expr>)</condition> <block pos:start="57:33" pos:end="65:9">{<block_content pos:start="59:13" pos:end="63:32">

            <expr_stmt pos:start="59:13" pos:end="61:70"><expr pos:start="59:13" pos:end="61:69"><call pos:start="59:13" pos:end="61:69"><name pos:start="59:13" pos:end="59:26">gdb_do_syscall</name><argument_list pos:start="59:27" pos:end="61:69">(<argument pos:start="59:28" pos:end="59:38"><expr pos:start="59:28" pos:end="59:38"><name pos:start="59:28" pos:end="59:38">arm_semi_cb</name></expr></argument>, <argument pos:start="59:41" pos:end="59:56"><expr pos:start="59:41" pos:end="59:56"><literal type="string" pos:start="59:41" pos:end="59:56">"open,%s,%x,1a4"</literal></expr></argument>, <argument pos:start="59:59" pos:end="59:64"><expr pos:start="59:59" pos:end="59:64"><call pos:start="59:59" pos:end="59:64"><name pos:start="59:59" pos:end="59:61">ARG</name><argument_list pos:start="59:62" pos:end="59:64">(<argument pos:start="59:63" pos:end="59:63"><expr pos:start="59:63" pos:end="59:63"><literal type="number" pos:start="59:63" pos:end="59:63">0</literal></expr></argument>)</argument_list></call></expr></argument>,

			   <argument pos:start="61:28" pos:end="61:40"><expr pos:start="61:28" pos:end="61:40"><operator pos:start="61:28" pos:end="61:28">(</operator><name pos:start="61:29" pos:end="61:31">int</name><operator pos:start="61:32" pos:end="61:32">)</operator><call pos:start="61:33" pos:end="61:38"><name pos:start="61:33" pos:end="61:35">ARG</name><argument_list pos:start="61:36" pos:end="61:38">(<argument pos:start="61:37" pos:end="61:37"><expr pos:start="61:37" pos:end="61:37"><literal type="number" pos:start="61:37" pos:end="61:37">2</literal></expr></argument>)</argument_list></call><operator pos:start="61:39" pos:end="61:39">+</operator><literal type="number" pos:start="61:40" pos:end="61:40">1</literal></expr></argument>, <argument pos:start="61:43" pos:end="61:68"><expr pos:start="61:43" pos:end="61:68"><name pos:start="61:43" pos:end="61:68"><name pos:start="61:43" pos:end="61:60">gdb_open_modeflags</name><index pos:start="61:61" pos:end="61:68">[<expr pos:start="61:62" pos:end="61:67"><call pos:start="61:62" pos:end="61:67"><name pos:start="61:62" pos:end="61:64">ARG</name><argument_list pos:start="61:65" pos:end="61:67">(<argument pos:start="61:66" pos:end="61:66"><expr pos:start="61:66" pos:end="61:66"><literal type="number" pos:start="61:66" pos:end="61:66">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="63:13" pos:end="63:32">return <expr pos:start="63:20" pos:end="63:31"><name pos:start="63:20" pos:end="63:31"><name pos:start="63:20" pos:end="63:22">env</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:28">regs</name><index pos:start="63:29" pos:end="63:31">[<expr pos:start="63:30" pos:end="63:30"><literal type="number" pos:start="63:30" pos:end="63:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="65:11" pos:end="69:9">else <block pos:start="65:16" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:75">

            <expr_stmt pos:start="67:13" pos:end="67:75"><expr pos:start="67:13" pos:end="67:74"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:74"><name pos:start="67:19" pos:end="67:31">set_swi_errno</name><argument_list pos:start="67:32" pos:end="67:74">(<argument pos:start="67:33" pos:end="67:34"><expr pos:start="67:33" pos:end="67:34"><name pos:start="67:33" pos:end="67:34">ts</name></expr></argument>, <argument pos:start="67:37" pos:end="67:73"><expr pos:start="67:37" pos:end="67:73"><call pos:start="67:37" pos:end="67:73"><name pos:start="67:37" pos:end="67:40">open</name><argument_list pos:start="67:41" pos:end="67:73">(<argument pos:start="67:42" pos:end="67:42"><expr pos:start="67:42" pos:end="67:42"><name pos:start="67:42" pos:end="67:42">s</name></expr></argument>, <argument pos:start="67:45" pos:end="67:66"><expr pos:start="67:45" pos:end="67:66"><name pos:start="67:45" pos:end="67:66"><name pos:start="67:45" pos:end="67:58">open_modeflags</name><index pos:start="67:59" pos:end="67:66">[<expr pos:start="67:60" pos:end="67:65"><call pos:start="67:60" pos:end="67:65"><name pos:start="67:60" pos:end="67:62">ARG</name><argument_list pos:start="67:63" pos:end="67:65">(<argument pos:start="67:64" pos:end="67:64"><expr pos:start="67:64" pos:end="67:64"><literal type="number" pos:start="67:64" pos:end="67:64">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument pos:start="67:69" pos:end="67:72"><expr pos:start="67:69" pos:end="67:72"><literal type="number" pos:start="67:69" pos:end="67:72">0644</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:34"><expr pos:start="71:9" pos:end="71:33"><call pos:start="71:9" pos:end="71:33"><name pos:start="71:9" pos:end="71:19">unlock_user</name><argument_list pos:start="71:20" pos:end="71:33">(<argument pos:start="71:21" pos:end="71:21"><expr pos:start="71:21" pos:end="71:21"><name pos:start="71:21" pos:end="71:21">s</name></expr></argument>, <argument pos:start="71:24" pos:end="71:29"><expr pos:start="71:24" pos:end="71:29"><call pos:start="71:24" pos:end="71:29"><name pos:start="71:24" pos:end="71:26">ARG</name><argument_list pos:start="71:27" pos:end="71:29">(<argument pos:start="71:28" pos:end="71:28"><expr pos:start="71:28" pos:end="71:28"><literal type="number" pos:start="71:28" pos:end="71:28">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="71:32" pos:end="71:32"><expr pos:start="71:32" pos:end="71:32"><literal type="number" pos:start="71:32" pos:end="71:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:19">return <expr pos:start="73:16" pos:end="73:18"><name pos:start="73:16" pos:end="73:18">ret</name></expr>;</return>

    <case pos:start="75:5" pos:end="75:26">case <expr pos:start="75:10" pos:end="75:25"><name pos:start="75:10" pos:end="75:25">TARGET_SYS_CLOSE</name></expr>:</case>

        <if_stmt pos:start="77:9" pos:end="87:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="77:31">(<expr pos:start="77:13" pos:end="77:30"><call pos:start="77:13" pos:end="77:30"><name pos:start="77:13" pos:end="77:28">use_gdb_syscalls</name><argument_list pos:start="77:29" pos:end="77:30">()</argument_list></call></expr>)</condition> <block pos:start="77:33" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:32">

            <expr_stmt pos:start="79:13" pos:end="79:60"><expr pos:start="79:13" pos:end="79:59"><call pos:start="79:13" pos:end="79:59"><name pos:start="79:13" pos:end="79:26">gdb_do_syscall</name><argument_list pos:start="79:27" pos:end="79:59">(<argument pos:start="79:28" pos:end="79:38"><expr pos:start="79:28" pos:end="79:38"><name pos:start="79:28" pos:end="79:38">arm_semi_cb</name></expr></argument>, <argument pos:start="79:41" pos:end="79:50"><expr pos:start="79:41" pos:end="79:50"><literal type="string" pos:start="79:41" pos:end="79:50">"close,%x"</literal></expr></argument>, <argument pos:start="79:53" pos:end="79:58"><expr pos:start="79:53" pos:end="79:58"><call pos:start="79:53" pos:end="79:58"><name pos:start="79:53" pos:end="79:55">ARG</name><argument_list pos:start="79:56" pos:end="79:58">(<argument pos:start="79:57" pos:end="79:57"><expr pos:start="79:57" pos:end="79:57"><literal type="number" pos:start="79:57" pos:end="79:57">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="81:13" pos:end="81:32">return <expr pos:start="81:20" pos:end="81:31"><name pos:start="81:20" pos:end="81:31"><name pos:start="81:20" pos:end="81:22">env</name><operator pos:start="81:23" pos:end="81:24">-&gt;</operator><name pos:start="81:25" pos:end="81:28">regs</name><index pos:start="81:29" pos:end="81:31">[<expr pos:start="81:30" pos:end="81:30"><literal type="number" pos:start="81:30" pos:end="81:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="83:11" pos:end="87:9">else <block pos:start="83:16" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:52">

            <return pos:start="85:13" pos:end="85:52">return <expr pos:start="85:20" pos:end="85:51"><call pos:start="85:20" pos:end="85:51"><name pos:start="85:20" pos:end="85:32">set_swi_errno</name><argument_list pos:start="85:33" pos:end="85:51">(<argument pos:start="85:34" pos:end="85:35"><expr pos:start="85:34" pos:end="85:35"><name pos:start="85:34" pos:end="85:35">ts</name></expr></argument>, <argument pos:start="85:38" pos:end="85:50"><expr pos:start="85:38" pos:end="85:50"><call pos:start="85:38" pos:end="85:50"><name pos:start="85:38" pos:end="85:42">close</name><argument_list pos:start="85:43" pos:end="85:50">(<argument pos:start="85:44" pos:end="85:49"><expr pos:start="85:44" pos:end="85:49"><call pos:start="85:44" pos:end="85:49"><name pos:start="85:44" pos:end="85:46">ARG</name><argument_list pos:start="85:47" pos:end="85:49">(<argument pos:start="85:48" pos:end="85:48"><expr pos:start="85:48" pos:end="85:48"><literal type="number" pos:start="85:48" pos:end="85:48">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="89:5" pos:end="89:27">case <expr pos:start="89:10" pos:end="89:26"><name pos:start="89:10" pos:end="89:26">TARGET_SYS_WRITEC</name></expr>:</case>

        <block pos:start="91:9" pos:end="117:9">{<block_content pos:start="93:11" pos:end="115:11">

          <decl_stmt pos:start="93:11" pos:end="93:17"><decl pos:start="93:11" pos:end="93:16"><type pos:start="93:11" pos:end="93:14"><name pos:start="93:11" pos:end="93:14">char</name></type> <name pos:start="93:16" pos:end="93:16">c</name></decl>;</decl_stmt>



          <if_stmt pos:start="97:11" pos:end="101:34"><if pos:start="97:11" pos:end="101:34">if <condition pos:start="97:14" pos:end="97:35">(<expr pos:start="97:15" pos:end="97:34"><call pos:start="97:15" pos:end="97:34"><name pos:start="97:15" pos:end="97:25">get_user_u8</name><argument_list pos:start="97:26" pos:end="97:34">(<argument pos:start="97:27" pos:end="97:27"><expr pos:start="97:27" pos:end="97:27"><name pos:start="97:27" pos:end="97:27">c</name></expr></argument>, <argument pos:start="97:30" pos:end="97:33"><expr pos:start="97:30" pos:end="97:33"><name pos:start="97:30" pos:end="97:33">args</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="101:15" pos:end="101:34"><block_content pos:start="101:15" pos:end="101:34">

              <comment type="block" pos:start="99:15" pos:end="99:70">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

              <return pos:start="101:15" pos:end="101:34">return <expr pos:start="101:22" pos:end="101:33"><operator pos:start="101:22" pos:end="101:22">(</operator><name pos:start="101:23" pos:end="101:30">uint32_t</name><operator pos:start="101:31" pos:end="101:31">)</operator><operator pos:start="101:32" pos:end="101:32">-</operator><literal type="number" pos:start="101:33" pos:end="101:33">1</literal></expr>;</return></block_content></block></if></if_stmt>

          <comment type="block" pos:start="103:11" pos:end="103:64">/* Write to debug console.  stderr is near enough.  */</comment>

          <if_stmt pos:start="105:11" pos:end="115:11"><if pos:start="105:11" pos:end="111:11">if <condition pos:start="105:14" pos:end="105:33">(<expr pos:start="105:15" pos:end="105:32"><call pos:start="105:15" pos:end="105:32"><name pos:start="105:15" pos:end="105:30">use_gdb_syscalls</name><argument_list pos:start="105:31" pos:end="105:32">()</argument_list></call></expr>)</condition> <block pos:start="105:35" pos:end="111:11">{<block_content pos:start="107:17" pos:end="109:36">

                <expr_stmt pos:start="107:17" pos:end="107:66"><expr pos:start="107:17" pos:end="107:65"><call pos:start="107:17" pos:end="107:65"><name pos:start="107:17" pos:end="107:30">gdb_do_syscall</name><argument_list pos:start="107:31" pos:end="107:65">(<argument pos:start="107:32" pos:end="107:42"><expr pos:start="107:32" pos:end="107:42"><name pos:start="107:32" pos:end="107:42">arm_semi_cb</name></expr></argument>, <argument pos:start="107:45" pos:end="107:58"><expr pos:start="107:45" pos:end="107:58"><literal type="string" pos:start="107:45" pos:end="107:58">"write,2,%x,1"</literal></expr></argument>, <argument pos:start="107:61" pos:end="107:64"><expr pos:start="107:61" pos:end="107:64"><name pos:start="107:61" pos:end="107:64">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="109:17" pos:end="109:36">return <expr pos:start="109:24" pos:end="109:35"><name pos:start="109:24" pos:end="109:35"><name pos:start="109:24" pos:end="109:26">env</name><operator pos:start="109:27" pos:end="109:28">-&gt;</operator><name pos:start="109:29" pos:end="109:32">regs</name><index pos:start="109:33" pos:end="109:35">[<expr pos:start="109:34" pos:end="109:34"><literal type="number" pos:start="109:34" pos:end="109:34">0</literal></expr>]</index></name></expr>;</return>

          </block_content>}</block></if> <else pos:start="111:13" pos:end="115:11">else <block pos:start="111:18" pos:end="115:11">{<block_content pos:start="113:17" pos:end="113:51">

                <return pos:start="113:17" pos:end="113:51">return <expr pos:start="113:24" pos:end="113:50"><call pos:start="113:24" pos:end="113:50"><name pos:start="113:24" pos:end="113:28">write</name><argument_list pos:start="113:29" pos:end="113:50">(<argument pos:start="113:30" pos:end="113:42"><expr pos:start="113:30" pos:end="113:42"><name pos:start="113:30" pos:end="113:42">STDERR_FILENO</name></expr></argument>, <argument pos:start="113:45" pos:end="113:46"><expr pos:start="113:45" pos:end="113:46"><operator pos:start="113:45" pos:end="113:45">&amp;</operator><name pos:start="113:46" pos:end="113:46">c</name></expr></argument>, <argument pos:start="113:49" pos:end="113:49"><expr pos:start="113:49" pos:end="113:49"><literal type="number" pos:start="113:49" pos:end="113:49">1</literal></expr></argument>)</argument_list></call></expr>;</return>

          </block_content>}</block></else></if_stmt>

        </block_content>}</block>

    <case pos:start="119:5" pos:end="119:27">case <expr pos:start="119:10" pos:end="119:26"><name pos:start="119:10" pos:end="119:26">TARGET_SYS_WRITE0</name></expr>:</case>

        <if_stmt pos:start="121:9" pos:end="125:32"><if pos:start="121:9" pos:end="125:32">if <condition pos:start="121:12" pos:end="121:42">(<expr pos:start="121:13" pos:end="121:41"><operator pos:start="121:13" pos:end="121:13">!</operator><operator pos:start="121:14" pos:end="121:14">(</operator><name pos:start="121:15" pos:end="121:15">s</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <call pos:start="121:19" pos:end="121:40"><name pos:start="121:19" pos:end="121:34">lock_user_string</name><argument_list pos:start="121:35" pos:end="121:40">(<argument pos:start="121:36" pos:end="121:39"><expr pos:start="121:36" pos:end="121:39"><name pos:start="121:36" pos:end="121:39">args</name></expr></argument>)</argument_list></call><operator pos:start="121:41" pos:end="121:41">)</operator></expr>)</condition><block type="pseudo" pos:start="125:13" pos:end="125:32"><block_content pos:start="125:13" pos:end="125:32">

            <comment type="block" pos:start="123:13" pos:end="123:68">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

            <return pos:start="125:13" pos:end="125:32">return <expr pos:start="125:20" pos:end="125:31"><operator pos:start="125:20" pos:end="125:20">(</operator><name pos:start="125:21" pos:end="125:28">uint32_t</name><operator pos:start="125:29" pos:end="125:29">)</operator><operator pos:start="125:30" pos:end="125:30">-</operator><literal type="number" pos:start="125:31" pos:end="125:31">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:24"><expr pos:start="127:9" pos:end="127:23"><name pos:start="127:9" pos:end="127:11">len</name> <operator pos:start="127:13" pos:end="127:13">=</operator> <call pos:start="127:15" pos:end="127:23"><name pos:start="127:15" pos:end="127:20">strlen</name><argument_list pos:start="127:21" pos:end="127:23">(<argument pos:start="127:22" pos:end="127:22"><expr pos:start="127:22" pos:end="127:22"><name pos:start="127:22" pos:end="127:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="129:9" pos:end="139:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:31">(<expr pos:start="129:13" pos:end="129:30"><call pos:start="129:13" pos:end="129:30"><name pos:start="129:13" pos:end="129:28">use_gdb_syscalls</name><argument_list pos:start="129:29" pos:end="129:30">()</argument_list></call></expr>)</condition> <block pos:start="129:33" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:31">

            <expr_stmt pos:start="131:13" pos:end="131:70"><expr pos:start="131:13" pos:end="131:69"><call pos:start="131:13" pos:end="131:69"><name pos:start="131:13" pos:end="131:26">gdb_do_syscall</name><argument_list pos:start="131:27" pos:end="131:69">(<argument pos:start="131:28" pos:end="131:38"><expr pos:start="131:28" pos:end="131:38"><name pos:start="131:28" pos:end="131:38">arm_semi_cb</name></expr></argument>, <argument pos:start="131:41" pos:end="131:57"><expr pos:start="131:41" pos:end="131:57"><literal type="string" pos:start="131:41" pos:end="131:57">"write,2,%x,%x\n"</literal></expr></argument>, <argument pos:start="131:60" pos:end="131:63"><expr pos:start="131:60" pos:end="131:63"><name pos:start="131:60" pos:end="131:63">args</name></expr></argument>, <argument pos:start="131:66" pos:end="131:68"><expr pos:start="131:66" pos:end="131:68"><name pos:start="131:66" pos:end="131:68">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:31"><expr pos:start="133:13" pos:end="133:30"><name pos:start="133:13" pos:end="133:15">ret</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <name pos:start="133:19" pos:end="133:30"><name pos:start="133:19" pos:end="133:21">env</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:27">regs</name><index pos:start="133:28" pos:end="133:30">[<expr pos:start="133:29" pos:end="133:29"><literal type="number" pos:start="133:29" pos:end="133:29">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="135:11" pos:end="139:9">else <block pos:start="135:16" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:47">

            <expr_stmt pos:start="137:13" pos:end="137:47"><expr pos:start="137:13" pos:end="137:46"><name pos:start="137:13" pos:end="137:15">ret</name> <operator pos:start="137:17" pos:end="137:17">=</operator> <call pos:start="137:19" pos:end="137:46"><name pos:start="137:19" pos:end="137:23">write</name><argument_list pos:start="137:24" pos:end="137:46">(<argument pos:start="137:25" pos:end="137:37"><expr pos:start="137:25" pos:end="137:37"><name pos:start="137:25" pos:end="137:37">STDERR_FILENO</name></expr></argument>, <argument pos:start="137:40" pos:end="137:40"><expr pos:start="137:40" pos:end="137:40"><name pos:start="137:40" pos:end="137:40">s</name></expr></argument>, <argument pos:start="137:43" pos:end="137:45"><expr pos:start="137:43" pos:end="137:45"><name pos:start="137:43" pos:end="137:45">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:32"><expr pos:start="141:9" pos:end="141:31"><call pos:start="141:9" pos:end="141:31"><name pos:start="141:9" pos:end="141:19">unlock_user</name><argument_list pos:start="141:20" pos:end="141:31">(<argument pos:start="141:21" pos:end="141:21"><expr pos:start="141:21" pos:end="141:21"><name pos:start="141:21" pos:end="141:21">s</name></expr></argument>, <argument pos:start="141:24" pos:end="141:27"><expr pos:start="141:24" pos:end="141:27"><name pos:start="141:24" pos:end="141:27">args</name></expr></argument>, <argument pos:start="141:30" pos:end="141:30"><expr pos:start="141:30" pos:end="141:30"><literal type="number" pos:start="141:30" pos:end="141:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:19">return <expr pos:start="143:16" pos:end="143:18"><name pos:start="143:16" pos:end="143:18">ret</name></expr>;</return>

    <case pos:start="145:5" pos:end="145:26">case <expr pos:start="145:10" pos:end="145:25"><name pos:start="145:10" pos:end="145:25">TARGET_SYS_WRITE</name></expr>:</case>

        <expr_stmt pos:start="147:9" pos:end="147:21"><expr pos:start="147:9" pos:end="147:20"><name pos:start="147:9" pos:end="147:11">len</name> <operator pos:start="147:13" pos:end="147:13">=</operator> <call pos:start="147:15" pos:end="147:20"><name pos:start="147:15" pos:end="147:17">ARG</name><argument_list pos:start="147:18" pos:end="147:20">(<argument pos:start="147:19" pos:end="147:19"><expr pos:start="147:19" pos:end="147:19"><literal type="number" pos:start="147:19" pos:end="147:19">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="175:9"><if pos:start="149:9" pos:end="157:9">if <condition pos:start="149:12" pos:end="149:31">(<expr pos:start="149:13" pos:end="149:30"><call pos:start="149:13" pos:end="149:30"><name pos:start="149:13" pos:end="149:28">use_gdb_syscalls</name><argument_list pos:start="149:29" pos:end="149:30">()</argument_list></call></expr>)</condition> <block pos:start="149:33" pos:end="157:9">{<block_content pos:start="151:13" pos:end="155:32">

            <expr_stmt pos:start="151:13" pos:end="151:39"><expr pos:start="151:13" pos:end="151:38"><name pos:start="151:13" pos:end="151:32">arm_semi_syscall_len</name> <operator pos:start="151:34" pos:end="151:34">=</operator> <name pos:start="151:36" pos:end="151:38">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:79"><expr pos:start="153:13" pos:end="153:78"><call pos:start="153:13" pos:end="153:78"><name pos:start="153:13" pos:end="153:26">gdb_do_syscall</name><argument_list pos:start="153:27" pos:end="153:78">(<argument pos:start="153:28" pos:end="153:38"><expr pos:start="153:28" pos:end="153:38"><name pos:start="153:28" pos:end="153:38">arm_semi_cb</name></expr></argument>, <argument pos:start="153:41" pos:end="153:56"><expr pos:start="153:41" pos:end="153:56"><literal type="string" pos:start="153:41" pos:end="153:56">"write,%x,%x,%x"</literal></expr></argument>, <argument pos:start="153:59" pos:end="153:64"><expr pos:start="153:59" pos:end="153:64"><call pos:start="153:59" pos:end="153:64"><name pos:start="153:59" pos:end="153:61">ARG</name><argument_list pos:start="153:62" pos:end="153:64">(<argument pos:start="153:63" pos:end="153:63"><expr pos:start="153:63" pos:end="153:63"><literal type="number" pos:start="153:63" pos:end="153:63">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="153:67" pos:end="153:72"><expr pos:start="153:67" pos:end="153:72"><call pos:start="153:67" pos:end="153:72"><name pos:start="153:67" pos:end="153:69">ARG</name><argument_list pos:start="153:70" pos:end="153:72">(<argument pos:start="153:71" pos:end="153:71"><expr pos:start="153:71" pos:end="153:71"><literal type="number" pos:start="153:71" pos:end="153:71">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="153:75" pos:end="153:77"><expr pos:start="153:75" pos:end="153:77"><name pos:start="153:75" pos:end="153:77">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="155:13" pos:end="155:32">return <expr pos:start="155:20" pos:end="155:31"><name pos:start="155:20" pos:end="155:31"><name pos:start="155:20" pos:end="155:22">env</name><operator pos:start="155:23" pos:end="155:24">-&gt;</operator><name pos:start="155:25" pos:end="155:28">regs</name><index pos:start="155:29" pos:end="155:31">[<expr pos:start="155:30" pos:end="155:30"><literal type="number" pos:start="155:30" pos:end="155:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="157:11" pos:end="175:9">else <block pos:start="157:16" pos:end="175:9">{<block_content pos:start="159:13" pos:end="173:29">

            <if_stmt pos:start="159:13" pos:end="163:36"><if pos:start="159:13" pos:end="163:36">if <condition pos:start="159:16" pos:end="159:62">(<expr pos:start="159:17" pos:end="159:61"><operator pos:start="159:17" pos:end="159:17">!</operator><operator pos:start="159:18" pos:end="159:18">(</operator><name pos:start="159:19" pos:end="159:19">s</name> <operator pos:start="159:21" pos:end="159:21">=</operator> <call pos:start="159:23" pos:end="159:60"><name pos:start="159:23" pos:end="159:31">lock_user</name><argument_list pos:start="159:32" pos:end="159:60">(<argument pos:start="159:33" pos:end="159:43"><expr pos:start="159:33" pos:end="159:43"><name pos:start="159:33" pos:end="159:43">VERIFY_READ</name></expr></argument>, <argument pos:start="159:46" pos:end="159:51"><expr pos:start="159:46" pos:end="159:51"><call pos:start="159:46" pos:end="159:51"><name pos:start="159:46" pos:end="159:48">ARG</name><argument_list pos:start="159:49" pos:end="159:51">(<argument pos:start="159:50" pos:end="159:50"><expr pos:start="159:50" pos:end="159:50"><literal type="number" pos:start="159:50" pos:end="159:50">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="159:54" pos:end="159:56"><expr pos:start="159:54" pos:end="159:56"><name pos:start="159:54" pos:end="159:56">len</name></expr></argument>, <argument pos:start="159:59" pos:end="159:59"><expr pos:start="159:59" pos:end="159:59"><literal type="number" pos:start="159:59" pos:end="159:59">1</literal></expr></argument>)</argument_list></call><operator pos:start="159:61" pos:end="159:61">)</operator></expr>)</condition><block type="pseudo" pos:start="163:17" pos:end="163:36"><block_content pos:start="163:17" pos:end="163:36">

                <comment type="block" pos:start="161:17" pos:end="161:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="163:17" pos:end="163:36">return <expr pos:start="163:24" pos:end="163:35"><operator pos:start="163:24" pos:end="163:24">(</operator><name pos:start="163:25" pos:end="163:32">uint32_t</name><operator pos:start="163:33" pos:end="163:33">)</operator><operator pos:start="163:34" pos:end="163:34">-</operator><literal type="number" pos:start="163:35" pos:end="163:35">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:59"><expr pos:start="165:13" pos:end="165:58"><name pos:start="165:13" pos:end="165:15">ret</name> <operator pos:start="165:17" pos:end="165:17">=</operator> <call pos:start="165:19" pos:end="165:58"><name pos:start="165:19" pos:end="165:31">set_swi_errno</name><argument_list pos:start="165:32" pos:end="165:58">(<argument pos:start="165:33" pos:end="165:34"><expr pos:start="165:33" pos:end="165:34"><name pos:start="165:33" pos:end="165:34">ts</name></expr></argument>, <argument pos:start="165:37" pos:end="165:57"><expr pos:start="165:37" pos:end="165:57"><call pos:start="165:37" pos:end="165:57"><name pos:start="165:37" pos:end="165:41">write</name><argument_list pos:start="165:42" pos:end="165:57">(<argument pos:start="165:43" pos:end="165:48"><expr pos:start="165:43" pos:end="165:48"><call pos:start="165:43" pos:end="165:48"><name pos:start="165:43" pos:end="165:45">ARG</name><argument_list pos:start="165:46" pos:end="165:48">(<argument pos:start="165:47" pos:end="165:47"><expr pos:start="165:47" pos:end="165:47"><literal type="number" pos:start="165:47" pos:end="165:47">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="165:51" pos:end="165:51"><expr pos:start="165:51" pos:end="165:51"><name pos:start="165:51" pos:end="165:51">s</name></expr></argument>, <argument pos:start="165:54" pos:end="165:56"><expr pos:start="165:54" pos:end="165:56"><name pos:start="165:54" pos:end="165:56">len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:38"><expr pos:start="167:13" pos:end="167:37"><call pos:start="167:13" pos:end="167:37"><name pos:start="167:13" pos:end="167:23">unlock_user</name><argument_list pos:start="167:24" pos:end="167:37">(<argument pos:start="167:25" pos:end="167:25"><expr pos:start="167:25" pos:end="167:25"><name pos:start="167:25" pos:end="167:25">s</name></expr></argument>, <argument pos:start="167:28" pos:end="167:33"><expr pos:start="167:28" pos:end="167:33"><call pos:start="167:28" pos:end="167:33"><name pos:start="167:28" pos:end="167:30">ARG</name><argument_list pos:start="167:31" pos:end="167:33">(<argument pos:start="167:32" pos:end="167:32"><expr pos:start="167:32" pos:end="167:32"><literal type="number" pos:start="167:32" pos:end="167:32">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="167:36" pos:end="167:36"><expr pos:start="167:36" pos:end="167:36"><literal type="number" pos:start="167:36" pos:end="167:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="169:13" pos:end="171:26"><if pos:start="169:13" pos:end="171:26">if <condition pos:start="169:16" pos:end="169:36">(<expr pos:start="169:17" pos:end="169:35"><name pos:start="169:17" pos:end="169:19">ret</name> <operator pos:start="169:21" pos:end="169:22">==</operator> <operator pos:start="169:24" pos:end="169:24">(</operator><name pos:start="169:25" pos:end="169:32">uint32_t</name><operator pos:start="169:33" pos:end="169:33">)</operator><operator pos:start="169:34" pos:end="169:34">-</operator><literal type="number" pos:start="169:35" pos:end="169:35">1</literal></expr>)</condition><block type="pseudo" pos:start="171:17" pos:end="171:26"><block_content pos:start="171:17" pos:end="171:26">

                <return pos:start="171:17" pos:end="171:26">return <expr pos:start="171:24" pos:end="171:25"><operator pos:start="171:24" pos:end="171:24">-</operator><literal type="number" pos:start="171:25" pos:end="171:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <return pos:start="173:13" pos:end="173:29">return <expr pos:start="173:20" pos:end="173:28"><name pos:start="173:20" pos:end="173:22">len</name> <operator pos:start="173:24" pos:end="173:24">-</operator> <name pos:start="173:26" pos:end="173:28">ret</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="177:5" pos:end="177:25">case <expr pos:start="177:10" pos:end="177:24"><name pos:start="177:10" pos:end="177:24">TARGET_SYS_READ</name></expr>:</case>

        <expr_stmt pos:start="179:9" pos:end="179:21"><expr pos:start="179:9" pos:end="179:20"><name pos:start="179:9" pos:end="179:11">len</name> <operator pos:start="179:13" pos:end="179:13">=</operator> <call pos:start="179:15" pos:end="179:20"><name pos:start="179:15" pos:end="179:17">ARG</name><argument_list pos:start="179:18" pos:end="179:20">(<argument pos:start="179:19" pos:end="179:19"><expr pos:start="179:19" pos:end="179:19"><literal type="number" pos:start="179:19" pos:end="179:19">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="181:9" pos:end="211:9"><if pos:start="181:9" pos:end="189:9">if <condition pos:start="181:12" pos:end="181:31">(<expr pos:start="181:13" pos:end="181:30"><call pos:start="181:13" pos:end="181:30"><name pos:start="181:13" pos:end="181:28">use_gdb_syscalls</name><argument_list pos:start="181:29" pos:end="181:30">()</argument_list></call></expr>)</condition> <block pos:start="181:33" pos:end="189:9">{<block_content pos:start="183:13" pos:end="187:32">

            <expr_stmt pos:start="183:13" pos:end="183:39"><expr pos:start="183:13" pos:end="183:38"><name pos:start="183:13" pos:end="183:32">arm_semi_syscall_len</name> <operator pos:start="183:34" pos:end="183:34">=</operator> <name pos:start="183:36" pos:end="183:38">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:78"><expr pos:start="185:13" pos:end="185:77"><call pos:start="185:13" pos:end="185:77"><name pos:start="185:13" pos:end="185:26">gdb_do_syscall</name><argument_list pos:start="185:27" pos:end="185:77">(<argument pos:start="185:28" pos:end="185:38"><expr pos:start="185:28" pos:end="185:38"><name pos:start="185:28" pos:end="185:38">arm_semi_cb</name></expr></argument>, <argument pos:start="185:41" pos:end="185:55"><expr pos:start="185:41" pos:end="185:55"><literal type="string" pos:start="185:41" pos:end="185:55">"read,%x,%x,%x"</literal></expr></argument>, <argument pos:start="185:58" pos:end="185:63"><expr pos:start="185:58" pos:end="185:63"><call pos:start="185:58" pos:end="185:63"><name pos:start="185:58" pos:end="185:60">ARG</name><argument_list pos:start="185:61" pos:end="185:63">(<argument pos:start="185:62" pos:end="185:62"><expr pos:start="185:62" pos:end="185:62"><literal type="number" pos:start="185:62" pos:end="185:62">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="185:66" pos:end="185:71"><expr pos:start="185:66" pos:end="185:71"><call pos:start="185:66" pos:end="185:71"><name pos:start="185:66" pos:end="185:68">ARG</name><argument_list pos:start="185:69" pos:end="185:71">(<argument pos:start="185:70" pos:end="185:70"><expr pos:start="185:70" pos:end="185:70"><literal type="number" pos:start="185:70" pos:end="185:70">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="185:74" pos:end="185:76"><expr pos:start="185:74" pos:end="185:76"><name pos:start="185:74" pos:end="185:76">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="187:13" pos:end="187:32">return <expr pos:start="187:20" pos:end="187:31"><name pos:start="187:20" pos:end="187:31"><name pos:start="187:20" pos:end="187:22">env</name><operator pos:start="187:23" pos:end="187:24">-&gt;</operator><name pos:start="187:25" pos:end="187:28">regs</name><index pos:start="187:29" pos:end="187:31">[<expr pos:start="187:30" pos:end="187:30"><literal type="number" pos:start="187:30" pos:end="187:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="189:11" pos:end="211:9">else <block pos:start="189:16" pos:end="211:9">{<block_content pos:start="191:13" pos:end="209:29">

            <if_stmt pos:start="191:13" pos:end="195:36"><if pos:start="191:13" pos:end="195:36">if <condition pos:start="191:16" pos:end="191:63">(<expr pos:start="191:17" pos:end="191:62"><operator pos:start="191:17" pos:end="191:17">!</operator><operator pos:start="191:18" pos:end="191:18">(</operator><name pos:start="191:19" pos:end="191:19">s</name> <operator pos:start="191:21" pos:end="191:21">=</operator> <call pos:start="191:23" pos:end="191:61"><name pos:start="191:23" pos:end="191:31">lock_user</name><argument_list pos:start="191:32" pos:end="191:61">(<argument pos:start="191:33" pos:end="191:44"><expr pos:start="191:33" pos:end="191:44"><name pos:start="191:33" pos:end="191:44">VERIFY_WRITE</name></expr></argument>, <argument pos:start="191:47" pos:end="191:52"><expr pos:start="191:47" pos:end="191:52"><call pos:start="191:47" pos:end="191:52"><name pos:start="191:47" pos:end="191:49">ARG</name><argument_list pos:start="191:50" pos:end="191:52">(<argument pos:start="191:51" pos:end="191:51"><expr pos:start="191:51" pos:end="191:51"><literal type="number" pos:start="191:51" pos:end="191:51">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="191:55" pos:end="191:57"><expr pos:start="191:55" pos:end="191:57"><name pos:start="191:55" pos:end="191:57">len</name></expr></argument>, <argument pos:start="191:60" pos:end="191:60"><expr pos:start="191:60" pos:end="191:60"><literal type="number" pos:start="191:60" pos:end="191:60">0</literal></expr></argument>)</argument_list></call><operator pos:start="191:62" pos:end="191:62">)</operator></expr>)</condition><block type="pseudo" pos:start="195:17" pos:end="195:36"><block_content pos:start="195:17" pos:end="195:36">

                <comment type="block" pos:start="193:17" pos:end="193:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="195:17" pos:end="195:36">return <expr pos:start="195:24" pos:end="195:35"><operator pos:start="195:24" pos:end="195:24">(</operator><name pos:start="195:25" pos:end="195:32">uint32_t</name><operator pos:start="195:33" pos:end="195:33">)</operator><operator pos:start="195:34" pos:end="195:34">-</operator><literal type="number" pos:start="195:35" pos:end="195:35">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <do pos:start="197:13" pos:end="201:48">do<block type="pseudo" pos:start="199:15" pos:end="199:60"><block_content pos:start="199:15" pos:end="199:60">

              <expr_stmt pos:start="199:15" pos:end="199:60"><expr pos:start="199:15" pos:end="199:59"><name pos:start="199:15" pos:end="199:17">ret</name> <operator pos:start="199:19" pos:end="199:19">=</operator> <call pos:start="199:21" pos:end="199:59"><name pos:start="199:21" pos:end="199:33">set_swi_errno</name><argument_list pos:start="199:34" pos:end="199:59">(<argument pos:start="199:35" pos:end="199:36"><expr pos:start="199:35" pos:end="199:36"><name pos:start="199:35" pos:end="199:36">ts</name></expr></argument>, <argument pos:start="199:39" pos:end="199:58"><expr pos:start="199:39" pos:end="199:58"><call pos:start="199:39" pos:end="199:58"><name pos:start="199:39" pos:end="199:42">read</name><argument_list pos:start="199:43" pos:end="199:58">(<argument pos:start="199:44" pos:end="199:49"><expr pos:start="199:44" pos:end="199:49"><call pos:start="199:44" pos:end="199:49"><name pos:start="199:44" pos:end="199:46">ARG</name><argument_list pos:start="199:47" pos:end="199:49">(<argument pos:start="199:48" pos:end="199:48"><expr pos:start="199:48" pos:end="199:48"><literal type="number" pos:start="199:48" pos:end="199:48">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="199:52" pos:end="199:52"><expr pos:start="199:52" pos:end="199:52"><name pos:start="199:52" pos:end="199:52">s</name></expr></argument>, <argument pos:start="199:55" pos:end="199:57"><expr pos:start="199:55" pos:end="199:57"><name pos:start="199:55" pos:end="199:57">len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>

            while <condition pos:start="201:19" pos:end="201:47">(<expr pos:start="201:20" pos:end="201:46"><name pos:start="201:20" pos:end="201:22">ret</name> <operator pos:start="201:24" pos:end="201:25">==</operator> <operator pos:start="201:27" pos:end="201:27">-</operator><literal type="number" pos:start="201:28" pos:end="201:28">1</literal> <operator pos:start="201:30" pos:end="201:31">&amp;&amp;</operator> <name pos:start="201:33" pos:end="201:37">errno</name> <operator pos:start="201:39" pos:end="201:40">==</operator> <name pos:start="201:42" pos:end="201:46">EINTR</name></expr>)</condition>;</do>

            <expr_stmt pos:start="203:13" pos:end="203:40"><expr pos:start="203:13" pos:end="203:39"><call pos:start="203:13" pos:end="203:39"><name pos:start="203:13" pos:end="203:23">unlock_user</name><argument_list pos:start="203:24" pos:end="203:39">(<argument pos:start="203:25" pos:end="203:25"><expr pos:start="203:25" pos:end="203:25"><name pos:start="203:25" pos:end="203:25">s</name></expr></argument>, <argument pos:start="203:28" pos:end="203:33"><expr pos:start="203:28" pos:end="203:33"><call pos:start="203:28" pos:end="203:33"><name pos:start="203:28" pos:end="203:30">ARG</name><argument_list pos:start="203:31" pos:end="203:33">(<argument pos:start="203:32" pos:end="203:32"><expr pos:start="203:32" pos:end="203:32"><literal type="number" pos:start="203:32" pos:end="203:32">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="203:36" pos:end="203:38"><expr pos:start="203:36" pos:end="203:38"><name pos:start="203:36" pos:end="203:38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="205:13" pos:end="207:26"><if pos:start="205:13" pos:end="207:26">if <condition pos:start="205:16" pos:end="205:36">(<expr pos:start="205:17" pos:end="205:35"><name pos:start="205:17" pos:end="205:19">ret</name> <operator pos:start="205:21" pos:end="205:22">==</operator> <operator pos:start="205:24" pos:end="205:24">(</operator><name pos:start="205:25" pos:end="205:32">uint32_t</name><operator pos:start="205:33" pos:end="205:33">)</operator><operator pos:start="205:34" pos:end="205:34">-</operator><literal type="number" pos:start="205:35" pos:end="205:35">1</literal></expr>)</condition><block type="pseudo" pos:start="207:17" pos:end="207:26"><block_content pos:start="207:17" pos:end="207:26">

                <return pos:start="207:17" pos:end="207:26">return <expr pos:start="207:24" pos:end="207:25"><operator pos:start="207:24" pos:end="207:24">-</operator><literal type="number" pos:start="207:25" pos:end="207:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <return pos:start="209:13" pos:end="209:29">return <expr pos:start="209:20" pos:end="209:28"><name pos:start="209:20" pos:end="209:22">len</name> <operator pos:start="209:24" pos:end="209:24">-</operator> <name pos:start="209:26" pos:end="209:28">ret</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="213:5" pos:end="213:26">case <expr pos:start="213:10" pos:end="213:25"><name pos:start="213:10" pos:end="213:25">TARGET_SYS_READC</name></expr>:</case>

       <comment type="block" pos:start="215:8" pos:end="215:60">/* XXX: Read from debug console. Not implemented.  */</comment>

        <return pos:start="217:9" pos:end="217:17">return <expr pos:start="217:16" pos:end="217:16"><literal type="number" pos:start="217:16" pos:end="217:16">0</literal></expr>;</return>

    <case pos:start="219:5" pos:end="219:26">case <expr pos:start="219:10" pos:end="219:25"><name pos:start="219:10" pos:end="219:25">TARGET_SYS_ISTTY</name></expr>:</case>

        <if_stmt pos:start="221:9" pos:end="231:9"><if pos:start="221:9" pos:end="227:9">if <condition pos:start="221:12" pos:end="221:31">(<expr pos:start="221:13" pos:end="221:30"><call pos:start="221:13" pos:end="221:30"><name pos:start="221:13" pos:end="221:28">use_gdb_syscalls</name><argument_list pos:start="221:29" pos:end="221:30">()</argument_list></call></expr>)</condition> <block pos:start="221:33" pos:end="227:9">{<block_content pos:start="223:13" pos:end="225:32">

            <expr_stmt pos:start="223:13" pos:end="223:61"><expr pos:start="223:13" pos:end="223:60"><call pos:start="223:13" pos:end="223:60"><name pos:start="223:13" pos:end="223:26">gdb_do_syscall</name><argument_list pos:start="223:27" pos:end="223:60">(<argument pos:start="223:28" pos:end="223:38"><expr pos:start="223:28" pos:end="223:38"><name pos:start="223:28" pos:end="223:38">arm_semi_cb</name></expr></argument>, <argument pos:start="223:41" pos:end="223:51"><expr pos:start="223:41" pos:end="223:51"><literal type="string" pos:start="223:41" pos:end="223:51">"isatty,%x"</literal></expr></argument>, <argument pos:start="223:54" pos:end="223:59"><expr pos:start="223:54" pos:end="223:59"><call pos:start="223:54" pos:end="223:59"><name pos:start="223:54" pos:end="223:56">ARG</name><argument_list pos:start="223:57" pos:end="223:59">(<argument pos:start="223:58" pos:end="223:58"><expr pos:start="223:58" pos:end="223:58"><literal type="number" pos:start="223:58" pos:end="223:58">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="225:13" pos:end="225:32">return <expr pos:start="225:20" pos:end="225:31"><name pos:start="225:20" pos:end="225:31"><name pos:start="225:20" pos:end="225:22">env</name><operator pos:start="225:23" pos:end="225:24">-&gt;</operator><name pos:start="225:25" pos:end="225:28">regs</name><index pos:start="225:29" pos:end="225:31">[<expr pos:start="225:30" pos:end="225:30"><literal type="number" pos:start="225:30" pos:end="225:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="227:11" pos:end="231:9">else <block pos:start="227:16" pos:end="231:9">{<block_content pos:start="229:13" pos:end="229:34">

            <return pos:start="229:13" pos:end="229:34">return <expr pos:start="229:20" pos:end="229:33"><call pos:start="229:20" pos:end="229:33"><name pos:start="229:20" pos:end="229:25">isatty</name><argument_list pos:start="229:26" pos:end="229:33">(<argument pos:start="229:27" pos:end="229:32"><expr pos:start="229:27" pos:end="229:32"><call pos:start="229:27" pos:end="229:32"><name pos:start="229:27" pos:end="229:29">ARG</name><argument_list pos:start="229:30" pos:end="229:32">(<argument pos:start="229:31" pos:end="229:31"><expr pos:start="229:31" pos:end="229:31"><literal type="number" pos:start="229:31" pos:end="229:31">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="233:5" pos:end="233:25">case <expr pos:start="233:10" pos:end="233:24"><name pos:start="233:10" pos:end="233:24">TARGET_SYS_SEEK</name></expr>:</case>

        <if_stmt pos:start="235:9" pos:end="251:9"><if pos:start="235:9" pos:end="241:9">if <condition pos:start="235:12" pos:end="235:31">(<expr pos:start="235:13" pos:end="235:30"><call pos:start="235:13" pos:end="235:30"><name pos:start="235:13" pos:end="235:28">use_gdb_syscalls</name><argument_list pos:start="235:29" pos:end="235:30">()</argument_list></call></expr>)</condition> <block pos:start="235:33" pos:end="241:9">{<block_content pos:start="237:13" pos:end="239:32">

            <expr_stmt pos:start="237:13" pos:end="237:73"><expr pos:start="237:13" pos:end="237:72"><call pos:start="237:13" pos:end="237:72"><name pos:start="237:13" pos:end="237:26">gdb_do_syscall</name><argument_list pos:start="237:27" pos:end="237:72">(<argument pos:start="237:28" pos:end="237:38"><expr pos:start="237:28" pos:end="237:38"><name pos:start="237:28" pos:end="237:38">arm_semi_cb</name></expr></argument>, <argument pos:start="237:41" pos:end="237:55"><expr pos:start="237:41" pos:end="237:55"><literal type="string" pos:start="237:41" pos:end="237:55">"lseek,%x,%x,0"</literal></expr></argument>, <argument pos:start="237:58" pos:end="237:63"><expr pos:start="237:58" pos:end="237:63"><call pos:start="237:58" pos:end="237:63"><name pos:start="237:58" pos:end="237:60">ARG</name><argument_list pos:start="237:61" pos:end="237:63">(<argument pos:start="237:62" pos:end="237:62"><expr pos:start="237:62" pos:end="237:62"><literal type="number" pos:start="237:62" pos:end="237:62">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="237:66" pos:end="237:71"><expr pos:start="237:66" pos:end="237:71"><call pos:start="237:66" pos:end="237:71"><name pos:start="237:66" pos:end="237:68">ARG</name><argument_list pos:start="237:69" pos:end="237:71">(<argument pos:start="237:70" pos:end="237:70"><expr pos:start="237:70" pos:end="237:70"><literal type="number" pos:start="237:70" pos:end="237:70">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="239:13" pos:end="239:32">return <expr pos:start="239:20" pos:end="239:31"><name pos:start="239:20" pos:end="239:31"><name pos:start="239:20" pos:end="239:22">env</name><operator pos:start="239:23" pos:end="239:24">-&gt;</operator><name pos:start="239:25" pos:end="239:28">regs</name><index pos:start="239:29" pos:end="239:31">[<expr pos:start="239:30" pos:end="239:30"><literal type="number" pos:start="239:30" pos:end="239:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="241:11" pos:end="251:9">else <block pos:start="241:16" pos:end="251:9">{<block_content pos:start="243:13" pos:end="249:21">

            <expr_stmt pos:start="243:13" pos:end="243:69"><expr pos:start="243:13" pos:end="243:68"><name pos:start="243:13" pos:end="243:15">ret</name> <operator pos:start="243:17" pos:end="243:17">=</operator> <call pos:start="243:19" pos:end="243:68"><name pos:start="243:19" pos:end="243:31">set_swi_errno</name><argument_list pos:start="243:32" pos:end="243:68">(<argument pos:start="243:33" pos:end="243:34"><expr pos:start="243:33" pos:end="243:34"><name pos:start="243:33" pos:end="243:34">ts</name></expr></argument>, <argument pos:start="243:37" pos:end="243:67"><expr pos:start="243:37" pos:end="243:67"><call pos:start="243:37" pos:end="243:67"><name pos:start="243:37" pos:end="243:41">lseek</name><argument_list pos:start="243:42" pos:end="243:67">(<argument pos:start="243:43" pos:end="243:48"><expr pos:start="243:43" pos:end="243:48"><call pos:start="243:43" pos:end="243:48"><name pos:start="243:43" pos:end="243:45">ARG</name><argument_list pos:start="243:46" pos:end="243:48">(<argument pos:start="243:47" pos:end="243:47"><expr pos:start="243:47" pos:end="243:47"><literal type="number" pos:start="243:47" pos:end="243:47">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="243:51" pos:end="243:56"><expr pos:start="243:51" pos:end="243:56"><call pos:start="243:51" pos:end="243:56"><name pos:start="243:51" pos:end="243:53">ARG</name><argument_list pos:start="243:54" pos:end="243:56">(<argument pos:start="243:55" pos:end="243:55"><expr pos:start="243:55" pos:end="243:55"><literal type="number" pos:start="243:55" pos:end="243:55">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="243:59" pos:end="243:66"><expr pos:start="243:59" pos:end="243:66"><name pos:start="243:59" pos:end="243:66">SEEK_SET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="245:13" pos:end="247:24"><if pos:start="245:13" pos:end="247:24">if <condition pos:start="245:16" pos:end="245:36">(<expr pos:start="245:17" pos:end="245:35"><name pos:start="245:17" pos:end="245:19">ret</name> <operator pos:start="245:21" pos:end="245:22">==</operator> <operator pos:start="245:24" pos:end="245:24">(</operator><name pos:start="245:25" pos:end="245:32">uint32_t</name><operator pos:start="245:33" pos:end="245:33">)</operator><operator pos:start="245:34" pos:end="245:34">-</operator><literal type="number" pos:start="245:35" pos:end="245:35">1</literal></expr>)</condition><block type="pseudo" pos:start="247:15" pos:end="247:24"><block_content pos:start="247:15" pos:end="247:24">

              <return pos:start="247:15" pos:end="247:24">return <expr pos:start="247:22" pos:end="247:23"><operator pos:start="247:22" pos:end="247:22">-</operator><literal type="number" pos:start="247:23" pos:end="247:23">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <return pos:start="249:13" pos:end="249:21">return <expr pos:start="249:20" pos:end="249:20"><literal type="number" pos:start="249:20" pos:end="249:20">0</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="253:5" pos:end="253:25">case <expr pos:start="253:10" pos:end="253:24"><name pos:start="253:10" pos:end="253:24">TARGET_SYS_FLEN</name></expr>:</case>

        <if_stmt pos:start="255:9" pos:end="275:9"><if pos:start="255:9" pos:end="263:9">if <condition pos:start="255:12" pos:end="255:31">(<expr pos:start="255:13" pos:end="255:30"><call pos:start="255:13" pos:end="255:30"><name pos:start="255:13" pos:end="255:28">use_gdb_syscalls</name><argument_list pos:start="255:29" pos:end="255:30">()</argument_list></call></expr>)</condition> <block pos:start="255:33" pos:end="263:9">{<block_content pos:start="257:13" pos:end="261:32">

            <expr_stmt pos:start="257:13" pos:end="259:53"><expr pos:start="257:13" pos:end="259:52"><call pos:start="257:13" pos:end="259:52"><name pos:start="257:13" pos:end="257:26">gdb_do_syscall</name><argument_list pos:start="257:27" pos:end="259:52">(<argument pos:start="257:28" pos:end="257:43"><expr pos:start="257:28" pos:end="257:43"><name pos:start="257:28" pos:end="257:43">arm_semi_flen_cb</name></expr></argument>, <argument pos:start="257:46" pos:end="257:58"><expr pos:start="257:46" pos:end="257:58"><literal type="string" pos:start="257:46" pos:end="257:58">"fstat,%x,%x"</literal></expr></argument>,

			   <argument pos:start="259:28" pos:end="259:33"><expr pos:start="259:28" pos:end="259:33"><call pos:start="259:28" pos:end="259:33"><name pos:start="259:28" pos:end="259:30">ARG</name><argument_list pos:start="259:31" pos:end="259:33">(<argument pos:start="259:32" pos:end="259:32"><expr pos:start="259:32" pos:end="259:32"><literal type="number" pos:start="259:32" pos:end="259:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="259:36" pos:end="259:51"><expr pos:start="259:36" pos:end="259:51"><name pos:start="259:36" pos:end="259:48"><name pos:start="259:36" pos:end="259:38">env</name><operator pos:start="259:39" pos:end="259:40">-&gt;</operator><name pos:start="259:41" pos:end="259:44">regs</name><index pos:start="259:45" pos:end="259:48">[<expr pos:start="259:46" pos:end="259:47"><literal type="number" pos:start="259:46" pos:end="259:47">13</literal></expr>]</index></name><operator pos:start="259:49" pos:end="259:49">-</operator><literal type="number" pos:start="259:50" pos:end="259:51">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="261:13" pos:end="261:32">return <expr pos:start="261:20" pos:end="261:31"><name pos:start="261:20" pos:end="261:31"><name pos:start="261:20" pos:end="261:22">env</name><operator pos:start="261:23" pos:end="261:24">-&gt;</operator><name pos:start="261:25" pos:end="261:28">regs</name><index pos:start="261:29" pos:end="261:31">[<expr pos:start="261:30" pos:end="261:30"><literal type="number" pos:start="261:30" pos:end="261:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="263:11" pos:end="275:9">else <block pos:start="263:16" pos:end="275:9">{<block_content pos:start="265:13" pos:end="273:31">

            <decl_stmt pos:start="265:13" pos:end="265:28"><decl pos:start="265:13" pos:end="265:27"><type pos:start="265:13" pos:end="265:23"><name pos:start="265:13" pos:end="265:23"><name pos:start="265:13" pos:end="265:18">struct</name> <name pos:start="265:20" pos:end="265:23">stat</name></name></type> <name pos:start="265:25" pos:end="265:27">buf</name></decl>;</decl_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:57"><expr pos:start="267:13" pos:end="267:56"><name pos:start="267:13" pos:end="267:15">ret</name> <operator pos:start="267:17" pos:end="267:17">=</operator> <call pos:start="267:19" pos:end="267:56"><name pos:start="267:19" pos:end="267:31">set_swi_errno</name><argument_list pos:start="267:32" pos:end="267:56">(<argument pos:start="267:33" pos:end="267:34"><expr pos:start="267:33" pos:end="267:34"><name pos:start="267:33" pos:end="267:34">ts</name></expr></argument>, <argument pos:start="267:37" pos:end="267:55"><expr pos:start="267:37" pos:end="267:55"><call pos:start="267:37" pos:end="267:55"><name pos:start="267:37" pos:end="267:41">fstat</name><argument_list pos:start="267:42" pos:end="267:55">(<argument pos:start="267:43" pos:end="267:48"><expr pos:start="267:43" pos:end="267:48"><call pos:start="267:43" pos:end="267:48"><name pos:start="267:43" pos:end="267:45">ARG</name><argument_list pos:start="267:46" pos:end="267:48">(<argument pos:start="267:47" pos:end="267:47"><expr pos:start="267:47" pos:end="267:47"><literal type="number" pos:start="267:47" pos:end="267:47">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="267:51" pos:end="267:54"><expr pos:start="267:51" pos:end="267:54"><operator pos:start="267:51" pos:end="267:51">&amp;</operator><name pos:start="267:52" pos:end="267:54">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="269:13" pos:end="271:26"><if pos:start="269:13" pos:end="271:26">if <condition pos:start="269:16" pos:end="269:36">(<expr pos:start="269:17" pos:end="269:35"><name pos:start="269:17" pos:end="269:19">ret</name> <operator pos:start="269:21" pos:end="269:22">==</operator> <operator pos:start="269:24" pos:end="269:24">(</operator><name pos:start="269:25" pos:end="269:32">uint32_t</name><operator pos:start="269:33" pos:end="269:33">)</operator><operator pos:start="269:34" pos:end="269:34">-</operator><literal type="number" pos:start="269:35" pos:end="269:35">1</literal></expr>)</condition><block type="pseudo" pos:start="271:17" pos:end="271:26"><block_content pos:start="271:17" pos:end="271:26">

                <return pos:start="271:17" pos:end="271:26">return <expr pos:start="271:24" pos:end="271:25"><operator pos:start="271:24" pos:end="271:24">-</operator><literal type="number" pos:start="271:25" pos:end="271:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <return pos:start="273:13" pos:end="273:31">return <expr pos:start="273:20" pos:end="273:30"><name pos:start="273:20" pos:end="273:30"><name pos:start="273:20" pos:end="273:22">buf</name><operator pos:start="273:23" pos:end="273:23">.</operator><name pos:start="273:24" pos:end="273:30">st_size</name></name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="277:5" pos:end="277:27">case <expr pos:start="277:10" pos:end="277:26"><name pos:start="277:10" pos:end="277:26">TARGET_SYS_TMPNAM</name></expr>:</case>

        <comment type="block" pos:start="279:9" pos:end="279:36">/* XXX: Not implemented.  */</comment>

        <return pos:start="281:9" pos:end="281:18">return <expr pos:start="281:16" pos:end="281:17"><operator pos:start="281:16" pos:end="281:16">-</operator><literal type="number" pos:start="281:17" pos:end="281:17">1</literal></expr>;</return>

    <case pos:start="283:5" pos:end="283:27">case <expr pos:start="283:10" pos:end="283:26"><name pos:start="283:10" pos:end="283:26">TARGET_SYS_REMOVE</name></expr>:</case>

        <if_stmt pos:start="285:9" pos:end="303:9"><if pos:start="285:9" pos:end="291:9">if <condition pos:start="285:12" pos:end="285:31">(<expr pos:start="285:13" pos:end="285:30"><call pos:start="285:13" pos:end="285:30"><name pos:start="285:13" pos:end="285:28">use_gdb_syscalls</name><argument_list pos:start="285:29" pos:end="285:30">()</argument_list></call></expr>)</condition> <block pos:start="285:33" pos:end="291:9">{<block_content pos:start="287:13" pos:end="289:31">

            <expr_stmt pos:start="287:13" pos:end="287:76"><expr pos:start="287:13" pos:end="287:75"><call pos:start="287:13" pos:end="287:75"><name pos:start="287:13" pos:end="287:26">gdb_do_syscall</name><argument_list pos:start="287:27" pos:end="287:75">(<argument pos:start="287:28" pos:end="287:38"><expr pos:start="287:28" pos:end="287:38"><name pos:start="287:28" pos:end="287:38">arm_semi_cb</name></expr></argument>, <argument pos:start="287:41" pos:end="287:51"><expr pos:start="287:41" pos:end="287:51"><literal type="string" pos:start="287:41" pos:end="287:51">"unlink,%s"</literal></expr></argument>, <argument pos:start="287:54" pos:end="287:59"><expr pos:start="287:54" pos:end="287:59"><call pos:start="287:54" pos:end="287:59"><name pos:start="287:54" pos:end="287:56">ARG</name><argument_list pos:start="287:57" pos:end="287:59">(<argument pos:start="287:58" pos:end="287:58"><expr pos:start="287:58" pos:end="287:58"><literal type="number" pos:start="287:58" pos:end="287:58">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="287:62" pos:end="287:74"><expr pos:start="287:62" pos:end="287:74"><operator pos:start="287:62" pos:end="287:62">(</operator><name pos:start="287:63" pos:end="287:65">int</name><operator pos:start="287:66" pos:end="287:66">)</operator><call pos:start="287:67" pos:end="287:72"><name pos:start="287:67" pos:end="287:69">ARG</name><argument_list pos:start="287:70" pos:end="287:72">(<argument pos:start="287:71" pos:end="287:71"><expr pos:start="287:71" pos:end="287:71"><literal type="number" pos:start="287:71" pos:end="287:71">1</literal></expr></argument>)</argument_list></call><operator pos:start="287:73" pos:end="287:73">+</operator><literal type="number" pos:start="287:74" pos:end="287:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:31"><expr pos:start="289:13" pos:end="289:30"><name pos:start="289:13" pos:end="289:15">ret</name> <operator pos:start="289:17" pos:end="289:17">=</operator> <name pos:start="289:19" pos:end="289:30"><name pos:start="289:19" pos:end="289:21">env</name><operator pos:start="289:22" pos:end="289:23">-&gt;</operator><name pos:start="289:24" pos:end="289:27">regs</name><index pos:start="289:28" pos:end="289:30">[<expr pos:start="289:29" pos:end="289:29"><literal type="number" pos:start="289:29" pos:end="289:29">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="291:11" pos:end="303:9">else <block pos:start="291:16" pos:end="303:9">{<block_content pos:start="293:13" pos:end="301:38">

            <if_stmt pos:start="293:13" pos:end="297:36"><if pos:start="293:13" pos:end="297:36">if <condition pos:start="293:16" pos:end="293:48">(<expr pos:start="293:17" pos:end="293:47"><operator pos:start="293:17" pos:end="293:17">!</operator><operator pos:start="293:18" pos:end="293:18">(</operator><name pos:start="293:19" pos:end="293:19">s</name> <operator pos:start="293:21" pos:end="293:21">=</operator> <call pos:start="293:23" pos:end="293:46"><name pos:start="293:23" pos:end="293:38">lock_user_string</name><argument_list pos:start="293:39" pos:end="293:46">(<argument pos:start="293:40" pos:end="293:45"><expr pos:start="293:40" pos:end="293:45"><call pos:start="293:40" pos:end="293:45"><name pos:start="293:40" pos:end="293:42">ARG</name><argument_list pos:start="293:43" pos:end="293:45">(<argument pos:start="293:44" pos:end="293:44"><expr pos:start="293:44" pos:end="293:44"><literal type="number" pos:start="293:44" pos:end="293:44">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="293:47" pos:end="293:47">)</operator></expr>)</condition><block type="pseudo" pos:start="297:17" pos:end="297:36"><block_content pos:start="297:17" pos:end="297:36">

                <comment type="block" pos:start="295:17" pos:end="295:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="297:17" pos:end="297:36">return <expr pos:start="297:24" pos:end="297:35"><operator pos:start="297:24" pos:end="297:24">(</operator><name pos:start="297:25" pos:end="297:32">uint32_t</name><operator pos:start="297:33" pos:end="297:33">)</operator><operator pos:start="297:34" pos:end="297:34">-</operator><literal type="number" pos:start="297:35" pos:end="297:35">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:48"><expr pos:start="299:13" pos:end="299:47"><name pos:start="299:13" pos:end="299:15">ret</name> <operator pos:start="299:17" pos:end="299:17">=</operator>  <call pos:start="299:20" pos:end="299:47"><name pos:start="299:20" pos:end="299:32">set_swi_errno</name><argument_list pos:start="299:33" pos:end="299:47">(<argument pos:start="299:34" pos:end="299:35"><expr pos:start="299:34" pos:end="299:35"><name pos:start="299:34" pos:end="299:35">ts</name></expr></argument>, <argument pos:start="299:38" pos:end="299:46"><expr pos:start="299:38" pos:end="299:46"><call pos:start="299:38" pos:end="299:46"><name pos:start="299:38" pos:end="299:43">remove</name><argument_list pos:start="299:44" pos:end="299:46">(<argument pos:start="299:45" pos:end="299:45"><expr pos:start="299:45" pos:end="299:45"><name pos:start="299:45" pos:end="299:45">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:38"><expr pos:start="301:13" pos:end="301:37"><call pos:start="301:13" pos:end="301:37"><name pos:start="301:13" pos:end="301:23">unlock_user</name><argument_list pos:start="301:24" pos:end="301:37">(<argument pos:start="301:25" pos:end="301:25"><expr pos:start="301:25" pos:end="301:25"><name pos:start="301:25" pos:end="301:25">s</name></expr></argument>, <argument pos:start="301:28" pos:end="301:33"><expr pos:start="301:28" pos:end="301:33"><call pos:start="301:28" pos:end="301:33"><name pos:start="301:28" pos:end="301:30">ARG</name><argument_list pos:start="301:31" pos:end="301:33">(<argument pos:start="301:32" pos:end="301:32"><expr pos:start="301:32" pos:end="301:32"><literal type="number" pos:start="301:32" pos:end="301:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="301:36" pos:end="301:36"><expr pos:start="301:36" pos:end="301:36"><literal type="number" pos:start="301:36" pos:end="301:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <return pos:start="305:9" pos:end="305:19">return <expr pos:start="305:16" pos:end="305:18"><name pos:start="305:16" pos:end="305:18">ret</name></expr>;</return>

    <case pos:start="307:5" pos:end="307:27">case <expr pos:start="307:10" pos:end="307:26"><name pos:start="307:10" pos:end="307:26">TARGET_SYS_RENAME</name></expr>:</case>

        <if_stmt pos:start="309:9" pos:end="345:9"><if pos:start="309:9" pos:end="317:9">if <condition pos:start="309:12" pos:end="309:31">(<expr pos:start="309:13" pos:end="309:30"><call pos:start="309:13" pos:end="309:30"><name pos:start="309:13" pos:end="309:28">use_gdb_syscalls</name><argument_list pos:start="309:29" pos:end="309:30">()</argument_list></call></expr>)</condition> <block pos:start="309:33" pos:end="317:9">{<block_content pos:start="311:13" pos:end="315:32">

            <expr_stmt pos:start="311:13" pos:end="313:73"><expr pos:start="311:13" pos:end="313:72"><call pos:start="311:13" pos:end="313:72"><name pos:start="311:13" pos:end="311:26">gdb_do_syscall</name><argument_list pos:start="311:27" pos:end="313:72">(<argument pos:start="311:28" pos:end="311:38"><expr pos:start="311:28" pos:end="311:38"><name pos:start="311:28" pos:end="311:38">arm_semi_cb</name></expr></argument>, <argument pos:start="311:41" pos:end="311:54"><expr pos:start="311:41" pos:end="311:54"><literal type="string" pos:start="311:41" pos:end="311:54">"rename,%s,%s"</literal></expr></argument>,

                           <argument pos:start="313:28" pos:end="313:33"><expr pos:start="313:28" pos:end="313:33"><call pos:start="313:28" pos:end="313:33"><name pos:start="313:28" pos:end="313:30">ARG</name><argument_list pos:start="313:31" pos:end="313:33">(<argument pos:start="313:32" pos:end="313:32"><expr pos:start="313:32" pos:end="313:32"><literal type="number" pos:start="313:32" pos:end="313:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="313:36" pos:end="313:48"><expr pos:start="313:36" pos:end="313:48"><operator pos:start="313:36" pos:end="313:36">(</operator><name pos:start="313:37" pos:end="313:39">int</name><operator pos:start="313:40" pos:end="313:40">)</operator><call pos:start="313:41" pos:end="313:46"><name pos:start="313:41" pos:end="313:43">ARG</name><argument_list pos:start="313:44" pos:end="313:46">(<argument pos:start="313:45" pos:end="313:45"><expr pos:start="313:45" pos:end="313:45"><literal type="number" pos:start="313:45" pos:end="313:45">1</literal></expr></argument>)</argument_list></call><operator pos:start="313:47" pos:end="313:47">+</operator><literal type="number" pos:start="313:48" pos:end="313:48">1</literal></expr></argument>, <argument pos:start="313:51" pos:end="313:56"><expr pos:start="313:51" pos:end="313:56"><call pos:start="313:51" pos:end="313:56"><name pos:start="313:51" pos:end="313:53">ARG</name><argument_list pos:start="313:54" pos:end="313:56">(<argument pos:start="313:55" pos:end="313:55"><expr pos:start="313:55" pos:end="313:55"><literal type="number" pos:start="313:55" pos:end="313:55">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="313:59" pos:end="313:71"><expr pos:start="313:59" pos:end="313:71"><operator pos:start="313:59" pos:end="313:59">(</operator><name pos:start="313:60" pos:end="313:62">int</name><operator pos:start="313:63" pos:end="313:63">)</operator><call pos:start="313:64" pos:end="313:69"><name pos:start="313:64" pos:end="313:66">ARG</name><argument_list pos:start="313:67" pos:end="313:69">(<argument pos:start="313:68" pos:end="313:68"><expr pos:start="313:68" pos:end="313:68"><literal type="number" pos:start="313:68" pos:end="313:68">3</literal></expr></argument>)</argument_list></call><operator pos:start="313:70" pos:end="313:70">+</operator><literal type="number" pos:start="313:71" pos:end="313:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="315:13" pos:end="315:32">return <expr pos:start="315:20" pos:end="315:31"><name pos:start="315:20" pos:end="315:31"><name pos:start="315:20" pos:end="315:22">env</name><operator pos:start="315:23" pos:end="315:24">-&gt;</operator><name pos:start="315:25" pos:end="315:28">regs</name><index pos:start="315:29" pos:end="315:31">[<expr pos:start="315:30" pos:end="315:30"><literal type="number" pos:start="315:30" pos:end="315:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="317:11" pos:end="345:9">else <block pos:start="317:16" pos:end="345:9">{<block_content pos:start="319:13" pos:end="343:23">

            <decl_stmt pos:start="319:13" pos:end="319:21"><decl pos:start="319:13" pos:end="319:20"><type pos:start="319:13" pos:end="319:18"><name pos:start="319:13" pos:end="319:16">char</name> <modifier pos:start="319:18" pos:end="319:18">*</modifier></type><name pos:start="319:19" pos:end="319:20">s2</name></decl>;</decl_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:41"><expr pos:start="321:13" pos:end="321:40"><name pos:start="321:13" pos:end="321:13">s</name> <operator pos:start="321:15" pos:end="321:15">=</operator> <call pos:start="321:17" pos:end="321:40"><name pos:start="321:17" pos:end="321:32">lock_user_string</name><argument_list pos:start="321:33" pos:end="321:40">(<argument pos:start="321:34" pos:end="321:39"><expr pos:start="321:34" pos:end="321:39"><call pos:start="321:34" pos:end="321:39"><name pos:start="321:34" pos:end="321:36">ARG</name><argument_list pos:start="321:37" pos:end="321:39">(<argument pos:start="321:38" pos:end="321:38"><expr pos:start="321:38" pos:end="321:38"><literal type="number" pos:start="321:38" pos:end="321:38">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="323:13" pos:end="323:42"><expr pos:start="323:13" pos:end="323:41"><name pos:start="323:13" pos:end="323:14">s2</name> <operator pos:start="323:16" pos:end="323:16">=</operator> <call pos:start="323:18" pos:end="323:41"><name pos:start="323:18" pos:end="323:33">lock_user_string</name><argument_list pos:start="323:34" pos:end="323:41">(<argument pos:start="323:35" pos:end="323:40"><expr pos:start="323:35" pos:end="323:40"><call pos:start="323:35" pos:end="323:40"><name pos:start="323:35" pos:end="323:37">ARG</name><argument_list pos:start="323:38" pos:end="323:40">(<argument pos:start="323:39" pos:end="323:39"><expr pos:start="323:39" pos:end="323:39"><literal type="number" pos:start="323:39" pos:end="323:39">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="325:13" pos:end="333:55"><if pos:start="325:13" pos:end="329:35">if <condition pos:start="325:16" pos:end="325:26">(<expr pos:start="325:17" pos:end="325:25"><operator pos:start="325:17" pos:end="325:17">!</operator><name pos:start="325:18" pos:end="325:18">s</name> <operator pos:start="325:20" pos:end="325:21">||</operator> <operator pos:start="325:23" pos:end="325:23">!</operator><name pos:start="325:24" pos:end="325:25">s2</name></expr>)</condition><block type="pseudo" pos:start="329:17" pos:end="329:35"><block_content pos:start="329:17" pos:end="329:35">

                <comment type="block" pos:start="327:17" pos:end="327:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <expr_stmt pos:start="329:17" pos:end="329:35"><expr pos:start="329:17" pos:end="329:34"><name pos:start="329:17" pos:end="329:19">ret</name> <operator pos:start="329:21" pos:end="329:21">=</operator> <operator pos:start="329:23" pos:end="329:23">(</operator><name pos:start="329:24" pos:end="329:31">uint32_t</name><operator pos:start="329:32" pos:end="329:32">)</operator><operator pos:start="329:33" pos:end="329:33">-</operator><literal type="number" pos:start="329:34" pos:end="329:34">1</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="331:13" pos:end="333:55">else<block type="pseudo" pos:start="333:17" pos:end="333:55"><block_content pos:start="333:17" pos:end="333:55">

                <expr_stmt pos:start="333:17" pos:end="333:55"><expr pos:start="333:17" pos:end="333:54"><name pos:start="333:17" pos:end="333:19">ret</name> <operator pos:start="333:21" pos:end="333:21">=</operator> <call pos:start="333:23" pos:end="333:54"><name pos:start="333:23" pos:end="333:35">set_swi_errno</name><argument_list pos:start="333:36" pos:end="333:54">(<argument pos:start="333:37" pos:end="333:38"><expr pos:start="333:37" pos:end="333:38"><name pos:start="333:37" pos:end="333:38">ts</name></expr></argument>, <argument pos:start="333:41" pos:end="333:53"><expr pos:start="333:41" pos:end="333:53"><call pos:start="333:41" pos:end="333:53"><name pos:start="333:41" pos:end="333:46">rename</name><argument_list pos:start="333:47" pos:end="333:53">(<argument pos:start="333:48" pos:end="333:48"><expr pos:start="333:48" pos:end="333:48"><name pos:start="333:48" pos:end="333:48">s</name></expr></argument>, <argument pos:start="333:51" pos:end="333:52"><expr pos:start="333:51" pos:end="333:52"><name pos:start="333:51" pos:end="333:52">s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="335:13" pos:end="337:43"><if pos:start="335:13" pos:end="337:43">if <condition pos:start="335:16" pos:end="335:19">(<expr pos:start="335:17" pos:end="335:18"><name pos:start="335:17" pos:end="335:18">s2</name></expr>)</condition><block type="pseudo" pos:start="337:17" pos:end="337:43"><block_content pos:start="337:17" pos:end="337:43">

                <expr_stmt pos:start="337:17" pos:end="337:43"><expr pos:start="337:17" pos:end="337:42"><call pos:start="337:17" pos:end="337:42"><name pos:start="337:17" pos:end="337:27">unlock_user</name><argument_list pos:start="337:28" pos:end="337:42">(<argument pos:start="337:29" pos:end="337:30"><expr pos:start="337:29" pos:end="337:30"><name pos:start="337:29" pos:end="337:30">s2</name></expr></argument>, <argument pos:start="337:33" pos:end="337:38"><expr pos:start="337:33" pos:end="337:38"><call pos:start="337:33" pos:end="337:38"><name pos:start="337:33" pos:end="337:35">ARG</name><argument_list pos:start="337:36" pos:end="337:38">(<argument pos:start="337:37" pos:end="337:37"><expr pos:start="337:37" pos:end="337:37"><literal type="number" pos:start="337:37" pos:end="337:37">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="337:41" pos:end="337:41"><expr pos:start="337:41" pos:end="337:41"><literal type="number" pos:start="337:41" pos:end="337:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="339:13" pos:end="341:42"><if pos:start="339:13" pos:end="341:42">if <condition pos:start="339:16" pos:end="339:18">(<expr pos:start="339:17" pos:end="339:17"><name pos:start="339:17" pos:end="339:17">s</name></expr>)</condition><block type="pseudo" pos:start="341:17" pos:end="341:42"><block_content pos:start="341:17" pos:end="341:42">

                <expr_stmt pos:start="341:17" pos:end="341:42"><expr pos:start="341:17" pos:end="341:41"><call pos:start="341:17" pos:end="341:41"><name pos:start="341:17" pos:end="341:27">unlock_user</name><argument_list pos:start="341:28" pos:end="341:41">(<argument pos:start="341:29" pos:end="341:29"><expr pos:start="341:29" pos:end="341:29"><name pos:start="341:29" pos:end="341:29">s</name></expr></argument>, <argument pos:start="341:32" pos:end="341:37"><expr pos:start="341:32" pos:end="341:37"><call pos:start="341:32" pos:end="341:37"><name pos:start="341:32" pos:end="341:34">ARG</name><argument_list pos:start="341:35" pos:end="341:37">(<argument pos:start="341:36" pos:end="341:36"><expr pos:start="341:36" pos:end="341:36"><literal type="number" pos:start="341:36" pos:end="341:36">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="341:40" pos:end="341:40"><expr pos:start="341:40" pos:end="341:40"><literal type="number" pos:start="341:40" pos:end="341:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return pos:start="343:13" pos:end="343:23">return <expr pos:start="343:20" pos:end="343:22"><name pos:start="343:20" pos:end="343:22">ret</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="347:5" pos:end="347:26">case <expr pos:start="347:10" pos:end="347:25"><name pos:start="347:10" pos:end="347:25">TARGET_SYS_CLOCK</name></expr>:</case>

        <return pos:start="349:9" pos:end="349:48">return <expr pos:start="349:16" pos:end="349:47"><call pos:start="349:16" pos:end="349:22"><name pos:start="349:16" pos:end="349:20">clock</name><argument_list pos:start="349:21" pos:end="349:22">()</argument_list></call> <operator pos:start="349:24" pos:end="349:24">/</operator> <operator pos:start="349:26" pos:end="349:26">(</operator><name pos:start="349:27" pos:end="349:40">CLOCKS_PER_SEC</name> <operator pos:start="349:42" pos:end="349:42">/</operator> <literal type="number" pos:start="349:44" pos:end="349:46">100</literal><operator pos:start="349:47" pos:end="349:47">)</operator></expr>;</return>

    <case pos:start="351:5" pos:end="351:25">case <expr pos:start="351:10" pos:end="351:24"><name pos:start="351:10" pos:end="351:24">TARGET_SYS_TIME</name></expr>:</case>

        <return pos:start="353:9" pos:end="353:45">return <expr pos:start="353:16" pos:end="353:44"><call pos:start="353:16" pos:end="353:44"><name pos:start="353:16" pos:end="353:28">set_swi_errno</name><argument_list pos:start="353:29" pos:end="353:44">(<argument pos:start="353:30" pos:end="353:31"><expr pos:start="353:30" pos:end="353:31"><name pos:start="353:30" pos:end="353:31">ts</name></expr></argument>, <argument pos:start="353:34" pos:end="353:43"><expr pos:start="353:34" pos:end="353:43"><call pos:start="353:34" pos:end="353:43"><name pos:start="353:34" pos:end="353:37">time</name><argument_list pos:start="353:38" pos:end="353:43">(<argument pos:start="353:39" pos:end="353:42"><expr pos:start="353:39" pos:end="353:42"><name pos:start="353:39" pos:end="353:42">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    <case pos:start="355:5" pos:end="355:27">case <expr pos:start="355:10" pos:end="355:26"><name pos:start="355:10" pos:end="355:26">TARGET_SYS_SYSTEM</name></expr>:</case>

        <if_stmt pos:start="357:9" pos:end="377:9"><if pos:start="357:9" pos:end="363:9">if <condition pos:start="357:12" pos:end="357:31">(<expr pos:start="357:13" pos:end="357:30"><call pos:start="357:13" pos:end="357:30"><name pos:start="357:13" pos:end="357:28">use_gdb_syscalls</name><argument_list pos:start="357:29" pos:end="357:30">()</argument_list></call></expr>)</condition> <block pos:start="357:33" pos:end="363:9">{<block_content pos:start="359:13" pos:end="361:32">

            <expr_stmt pos:start="359:13" pos:end="359:76"><expr pos:start="359:13" pos:end="359:75"><call pos:start="359:13" pos:end="359:75"><name pos:start="359:13" pos:end="359:26">gdb_do_syscall</name><argument_list pos:start="359:27" pos:end="359:75">(<argument pos:start="359:28" pos:end="359:38"><expr pos:start="359:28" pos:end="359:38"><name pos:start="359:28" pos:end="359:38">arm_semi_cb</name></expr></argument>, <argument pos:start="359:41" pos:end="359:51"><expr pos:start="359:41" pos:end="359:51"><literal type="string" pos:start="359:41" pos:end="359:51">"system,%s"</literal></expr></argument>, <argument pos:start="359:54" pos:end="359:59"><expr pos:start="359:54" pos:end="359:59"><call pos:start="359:54" pos:end="359:59"><name pos:start="359:54" pos:end="359:56">ARG</name><argument_list pos:start="359:57" pos:end="359:59">(<argument pos:start="359:58" pos:end="359:58"><expr pos:start="359:58" pos:end="359:58"><literal type="number" pos:start="359:58" pos:end="359:58">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="359:62" pos:end="359:74"><expr pos:start="359:62" pos:end="359:74"><operator pos:start="359:62" pos:end="359:62">(</operator><name pos:start="359:63" pos:end="359:65">int</name><operator pos:start="359:66" pos:end="359:66">)</operator><call pos:start="359:67" pos:end="359:72"><name pos:start="359:67" pos:end="359:69">ARG</name><argument_list pos:start="359:70" pos:end="359:72">(<argument pos:start="359:71" pos:end="359:71"><expr pos:start="359:71" pos:end="359:71"><literal type="number" pos:start="359:71" pos:end="359:71">1</literal></expr></argument>)</argument_list></call><operator pos:start="359:73" pos:end="359:73">+</operator><literal type="number" pos:start="359:74" pos:end="359:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="361:13" pos:end="361:32">return <expr pos:start="361:20" pos:end="361:31"><name pos:start="361:20" pos:end="361:31"><name pos:start="361:20" pos:end="361:22">env</name><operator pos:start="361:23" pos:end="361:24">-&gt;</operator><name pos:start="361:25" pos:end="361:28">regs</name><index pos:start="361:29" pos:end="361:31">[<expr pos:start="361:30" pos:end="361:30"><literal type="number" pos:start="361:30" pos:end="361:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="363:11" pos:end="377:9">else <block pos:start="363:16" pos:end="377:9">{<block_content pos:start="365:13" pos:end="375:23">

            <if_stmt pos:start="365:13" pos:end="369:36"><if pos:start="365:13" pos:end="369:36">if <condition pos:start="365:16" pos:end="365:48">(<expr pos:start="365:17" pos:end="365:47"><operator pos:start="365:17" pos:end="365:17">!</operator><operator pos:start="365:18" pos:end="365:18">(</operator><name pos:start="365:19" pos:end="365:19">s</name> <operator pos:start="365:21" pos:end="365:21">=</operator> <call pos:start="365:23" pos:end="365:46"><name pos:start="365:23" pos:end="365:38">lock_user_string</name><argument_list pos:start="365:39" pos:end="365:46">(<argument pos:start="365:40" pos:end="365:45"><expr pos:start="365:40" pos:end="365:45"><call pos:start="365:40" pos:end="365:45"><name pos:start="365:40" pos:end="365:42">ARG</name><argument_list pos:start="365:43" pos:end="365:45">(<argument pos:start="365:44" pos:end="365:44"><expr pos:start="365:44" pos:end="365:44"><literal type="number" pos:start="365:44" pos:end="365:44">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="365:47" pos:end="365:47">)</operator></expr>)</condition><block type="pseudo" pos:start="369:17" pos:end="369:36"><block_content pos:start="369:17" pos:end="369:36">

                <comment type="block" pos:start="367:17" pos:end="367:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="369:17" pos:end="369:36">return <expr pos:start="369:24" pos:end="369:35"><operator pos:start="369:24" pos:end="369:24">(</operator><name pos:start="369:25" pos:end="369:32">uint32_t</name><operator pos:start="369:33" pos:end="369:33">)</operator><operator pos:start="369:34" pos:end="369:34">-</operator><literal type="number" pos:start="369:35" pos:end="369:35">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="371:13" pos:end="371:47"><expr pos:start="371:13" pos:end="371:46"><name pos:start="371:13" pos:end="371:15">ret</name> <operator pos:start="371:17" pos:end="371:17">=</operator> <call pos:start="371:19" pos:end="371:46"><name pos:start="371:19" pos:end="371:31">set_swi_errno</name><argument_list pos:start="371:32" pos:end="371:46">(<argument pos:start="371:33" pos:end="371:34"><expr pos:start="371:33" pos:end="371:34"><name pos:start="371:33" pos:end="371:34">ts</name></expr></argument>, <argument pos:start="371:37" pos:end="371:45"><expr pos:start="371:37" pos:end="371:45"><call pos:start="371:37" pos:end="371:45"><name pos:start="371:37" pos:end="371:42">system</name><argument_list pos:start="371:43" pos:end="371:45">(<argument pos:start="371:44" pos:end="371:44"><expr pos:start="371:44" pos:end="371:44"><name pos:start="371:44" pos:end="371:44">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="373:13" pos:end="373:38"><expr pos:start="373:13" pos:end="373:37"><call pos:start="373:13" pos:end="373:37"><name pos:start="373:13" pos:end="373:23">unlock_user</name><argument_list pos:start="373:24" pos:end="373:37">(<argument pos:start="373:25" pos:end="373:25"><expr pos:start="373:25" pos:end="373:25"><name pos:start="373:25" pos:end="373:25">s</name></expr></argument>, <argument pos:start="373:28" pos:end="373:33"><expr pos:start="373:28" pos:end="373:33"><call pos:start="373:28" pos:end="373:33"><name pos:start="373:28" pos:end="373:30">ARG</name><argument_list pos:start="373:31" pos:end="373:33">(<argument pos:start="373:32" pos:end="373:32"><expr pos:start="373:32" pos:end="373:32"><literal type="number" pos:start="373:32" pos:end="373:32">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="373:36" pos:end="373:36"><expr pos:start="373:36" pos:end="373:36"><literal type="number" pos:start="373:36" pos:end="373:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="375:13" pos:end="375:23">return <expr pos:start="375:20" pos:end="375:22"><name pos:start="375:20" pos:end="375:22">ret</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="379:5" pos:end="382:0">case <expr pos:start="379:10" pos:end="379:25"><name pos:start="379:10" pos:end="379:25">TARGET_SYS_ERRNO</name></expr>:</case>

<cpp:ifdef pos:start="381:1" pos:end="381:23">#<cpp:directive pos:start="381:2" pos:end="381:6">ifdef</cpp:directive> <name pos:start="381:8" pos:end="381:23">CONFIG_USER_ONLY</name></cpp:ifdef>

        <return pos:start="383:9" pos:end="386:0">return <expr pos:start="383:16" pos:end="383:28"><name pos:start="383:16" pos:end="383:28"><name pos:start="383:16" pos:end="383:17">ts</name><operator pos:start="383:18" pos:end="383:19">-&gt;</operator><name pos:start="383:20" pos:end="383:28">swi_errno</name></name></expr>;</return>

<cpp:else pos:start="385:1" pos:end="385:5">#<cpp:directive pos:start="385:2" pos:end="385:5">else</cpp:directive></cpp:else>

        <return pos:start="387:9" pos:end="390:0">return <expr pos:start="387:16" pos:end="387:26"><name pos:start="387:16" pos:end="387:26">syscall_err</name></expr>;</return>

<cpp:endif pos:start="389:1" pos:end="389:6">#<cpp:directive pos:start="389:2" pos:end="389:6">endif</cpp:directive></cpp:endif>

    <case pos:start="391:5" pos:end="391:32">case <expr pos:start="391:10" pos:end="391:31"><name pos:start="391:10" pos:end="391:31">TARGET_SYS_GET_CMDLINE</name></expr>:</case>

        <block pos:start="393:9" pos:end="555:9">{<block_content pos:start="423:13" pos:end="553:26">

            <comment type="block" pos:start="395:13" pos:end="419:15">/* Build a command-line from the original argv.

             *

             * The inputs are:

             *     * ARG(0), pointer to a buffer of at least the size

             *               specified in ARG(1).

             *     * ARG(1), size of the buffer pointed to by ARG(0) in

             *               bytes.

             *

             * The outputs are:

             *     * ARG(0), pointer to null-terminated string of the

             *               command line.

             *     * ARG(1), length of the string pointed to by ARG(0).

             */</comment>



            <decl_stmt pos:start="423:13" pos:end="423:32"><decl pos:start="423:13" pos:end="423:31"><type pos:start="423:13" pos:end="423:18"><name pos:start="423:13" pos:end="423:16">char</name> <modifier pos:start="423:18" pos:end="423:18">*</modifier></type><name pos:start="423:19" pos:end="423:31">output_buffer</name></decl>;</decl_stmt>

            <decl_stmt pos:start="425:13" pos:end="425:39"><decl pos:start="425:13" pos:end="425:38"><type pos:start="425:13" pos:end="425:18"><name pos:start="425:13" pos:end="425:18">size_t</name></type> <name pos:start="425:20" pos:end="425:29">input_size</name> <init pos:start="425:31" pos:end="425:38">= <expr pos:start="425:33" pos:end="425:38"><call pos:start="425:33" pos:end="425:38"><name pos:start="425:33" pos:end="425:35">ARG</name><argument_list pos:start="425:36" pos:end="425:38">(<argument pos:start="425:37" pos:end="425:37"><expr pos:start="425:37" pos:end="425:37"><literal type="number" pos:start="425:37" pos:end="425:37">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="427:13" pos:end="427:31"><decl pos:start="427:13" pos:end="427:30"><type pos:start="427:13" pos:end="427:18"><name pos:start="427:13" pos:end="427:18">size_t</name></type> <name pos:start="427:20" pos:end="427:30">output_size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="429:13" pos:end="436:0"><decl pos:start="429:13" pos:end="429:26"><type pos:start="429:13" pos:end="429:15"><name pos:start="429:13" pos:end="429:15">int</name></type> <name pos:start="429:17" pos:end="429:22">status</name> <init pos:start="429:24" pos:end="429:26">= <expr pos:start="429:26" pos:end="429:26"><literal type="number" pos:start="429:26" pos:end="429:26">0</literal></expr></init></decl>;</decl_stmt>



            <comment type="block" pos:start="433:13" pos:end="433:57">/* Compute the size of the output string.  */</comment>

<cpp:if pos:start="435:1" pos:end="435:30">#<cpp:directive pos:start="435:2" pos:end="435:3">if</cpp:directive> <expr pos:start="435:5" pos:end="435:30"><operator pos:start="435:5" pos:end="435:5">!</operator><call pos:start="435:6" pos:end="435:30"><name pos:start="435:6" pos:end="435:12">defined</name><argument_list pos:start="435:13" pos:end="435:30">(<argument pos:start="435:14" pos:end="435:29"><expr pos:start="435:14" pos:end="435:29"><name pos:start="435:14" pos:end="435:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="437:13" pos:end="446:0"><expr pos:start="437:13" pos:end="443:27"><name pos:start="437:13" pos:end="437:23">output_size</name> <operator pos:start="437:25" pos:end="437:25">=</operator> <call pos:start="437:27" pos:end="437:64"><name pos:start="437:27" pos:end="437:32">strlen</name><argument_list pos:start="437:33" pos:end="437:64">(<argument pos:start="437:34" pos:end="437:63"><expr pos:start="437:34" pos:end="437:63"><name pos:start="437:34" pos:end="437:63"><name pos:start="437:34" pos:end="437:35">ts</name><operator pos:start="437:36" pos:end="437:37">-&gt;</operator><name pos:start="437:38" pos:end="437:46">boot_info</name><operator pos:start="437:47" pos:end="437:48">-&gt;</operator><name pos:start="437:49" pos:end="437:63">kernel_filename</name></name></expr></argument>)</argument_list></call>

                        <operator pos:start="439:25" pos:end="439:25">+</operator> <literal type="number" pos:start="439:27" pos:end="441:25">1</literal>  <comment type="block" pos:start="439:30" pos:end="439:53">/* Separating space.  */</comment>

                        <operator pos:start="441:25" pos:end="441:25">+</operator> <call pos:start="441:27" pos:end="441:63"><name pos:start="441:27" pos:end="441:32">strlen</name><argument_list pos:start="441:33" pos:end="441:63">(<argument pos:start="441:34" pos:end="441:62"><expr pos:start="441:34" pos:end="441:62"><name pos:start="441:34" pos:end="441:62"><name pos:start="441:34" pos:end="441:35">ts</name><operator pos:start="441:36" pos:end="441:37">-&gt;</operator><name pos:start="441:38" pos:end="441:46">boot_info</name><operator pos:start="441:47" pos:end="441:48">-&gt;</operator><name pos:start="441:49" pos:end="441:62">kernel_cmdline</name></name></expr></argument>)</argument_list></call>

                        <operator pos:start="443:25" pos:end="443:25">+</operator> <literal type="number" pos:start="443:27" pos:end="443:27">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="443:30" pos:end="443:58">/* Terminating null byte.  */</comment>

<cpp:else pos:start="445:1" pos:end="445:5">#<cpp:directive pos:start="445:2" pos:end="445:5">else</cpp:directive></cpp:else>

            <decl_stmt pos:start="447:13" pos:end="447:27"><decl pos:start="447:13" pos:end="447:26"><type pos:start="447:13" pos:end="447:24"><name pos:start="447:13" pos:end="447:20">unsigned</name> <name pos:start="447:22" pos:end="447:24">int</name></type> <name pos:start="447:26" pos:end="447:26">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="451:13" pos:end="451:66"><expr pos:start="451:13" pos:end="451:65"><name pos:start="451:13" pos:end="451:23">output_size</name> <operator pos:start="451:25" pos:end="451:25">=</operator> <name pos:start="451:27" pos:end="451:43"><name pos:start="451:27" pos:end="451:28">ts</name><operator pos:start="451:29" pos:end="451:30">-&gt;</operator><name pos:start="451:31" pos:end="451:34">info</name><operator pos:start="451:35" pos:end="451:36">-&gt;</operator><name pos:start="451:37" pos:end="451:43">arg_end</name></name> <operator pos:start="451:45" pos:end="451:45">-</operator> <name pos:start="451:47" pos:end="451:65"><name pos:start="451:47" pos:end="451:48">ts</name><operator pos:start="451:49" pos:end="451:50">-&gt;</operator><name pos:start="451:51" pos:end="451:54">info</name><operator pos:start="451:55" pos:end="451:56">-&gt;</operator><name pos:start="451:57" pos:end="451:65">arg_start</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="453:13" pos:end="464:0"><if pos:start="453:13" pos:end="464:0">if <condition pos:start="453:16" pos:end="453:29">(<expr pos:start="453:17" pos:end="453:28"><operator pos:start="453:17" pos:end="453:17">!</operator><name pos:start="453:18" pos:end="453:28">output_size</name></expr>)</condition> <block pos:start="453:31" pos:end="464:0">{<block_content pos:start="459:17" pos:end="459:32">

                <comment type="block" pos:start="455:17" pos:end="457:53">/* We special-case the "empty command line" case (argc==0).

                   Just provide the terminating 0. */</comment>

                <expr_stmt pos:start="459:17" pos:end="459:32"><expr pos:start="459:17" pos:end="459:31"><name pos:start="459:17" pos:end="459:27">output_size</name> <operator pos:start="459:29" pos:end="459:29">=</operator> <literal type="number" pos:start="459:31" pos:end="459:31">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="463:1" pos:end="463:6">#<cpp:directive pos:start="463:2" pos:end="463:6">endif</cpp:directive></cpp:endif>



            <if_stmt pos:start="467:13" pos:end="473:13"><if pos:start="467:13" pos:end="473:13">if <condition pos:start="467:16" pos:end="467:41">(<expr pos:start="467:17" pos:end="467:40"><name pos:start="467:17" pos:end="467:27">output_size</name> <operator pos:start="467:29" pos:end="467:29">&gt;</operator> <name pos:start="467:31" pos:end="467:40">input_size</name></expr>)</condition> <block pos:start="467:43" pos:end="473:13">{<block_content pos:start="471:17" pos:end="471:26">

                 <comment type="block" pos:start="469:18" pos:end="469:73">/* Not enough space to store command-line arguments.  */</comment>

                <return pos:start="471:17" pos:end="471:26">return <expr pos:start="471:24" pos:end="471:25"><operator pos:start="471:24" pos:end="471:24">-</operator><literal type="number" pos:start="471:25" pos:end="471:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="477:13" pos:end="477:50">/* Adjust the command-line length.  */</comment>

            <expr_stmt pos:start="479:13" pos:end="479:40"><expr pos:start="479:13" pos:end="479:39"><call pos:start="479:13" pos:end="479:39"><name pos:start="479:13" pos:end="479:19">SET_ARG</name><argument_list pos:start="479:20" pos:end="479:39">(<argument pos:start="479:21" pos:end="479:21"><expr pos:start="479:21" pos:end="479:21"><literal type="number" pos:start="479:21" pos:end="479:21">1</literal></expr></argument>, <argument pos:start="479:24" pos:end="479:38"><expr pos:start="479:24" pos:end="479:38"><name pos:start="479:24" pos:end="479:34">output_size</name> <operator pos:start="479:36" pos:end="479:36">-</operator> <literal type="number" pos:start="479:38" pos:end="479:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="483:13" pos:end="483:51">/* Lock the buffer on the ARM side.  */</comment>

            <expr_stmt pos:start="485:13" pos:end="485:76"><expr pos:start="485:13" pos:end="485:75"><name pos:start="485:13" pos:end="485:25">output_buffer</name> <operator pos:start="485:27" pos:end="485:27">=</operator> <call pos:start="485:29" pos:end="485:75"><name pos:start="485:29" pos:end="485:37">lock_user</name><argument_list pos:start="485:38" pos:end="485:75">(<argument pos:start="485:39" pos:end="485:50"><expr pos:start="485:39" pos:end="485:50"><name pos:start="485:39" pos:end="485:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="485:53" pos:end="485:58"><expr pos:start="485:53" pos:end="485:58"><call pos:start="485:53" pos:end="485:58"><name pos:start="485:53" pos:end="485:55">ARG</name><argument_list pos:start="485:56" pos:end="485:58">(<argument pos:start="485:57" pos:end="485:57"><expr pos:start="485:57" pos:end="485:57"><literal type="number" pos:start="485:57" pos:end="485:57">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="485:61" pos:end="485:71"><expr pos:start="485:61" pos:end="485:71"><name pos:start="485:61" pos:end="485:71">output_size</name></expr></argument>, <argument pos:start="485:74" pos:end="485:74"><expr pos:start="485:74" pos:end="485:74"><literal type="number" pos:start="485:74" pos:end="485:74">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="487:13" pos:end="498:0"><if pos:start="487:13" pos:end="498:0">if <condition pos:start="487:16" pos:end="487:31">(<expr pos:start="487:17" pos:end="487:30"><operator pos:start="487:17" pos:end="487:17">!</operator><name pos:start="487:18" pos:end="487:30">output_buffer</name></expr>)</condition> <block pos:start="487:33" pos:end="498:0">{<block_content pos:start="489:17" pos:end="489:26">

                <return pos:start="489:17" pos:end="489:26">return <expr pos:start="489:24" pos:end="489:25"><operator pos:start="489:24" pos:end="489:24">-</operator><literal type="number" pos:start="489:25" pos:end="489:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="495:13" pos:end="495:51">/* Copy the command-line arguments.  */</comment>

<cpp:if pos:start="497:1" pos:end="497:30">#<cpp:directive pos:start="497:2" pos:end="497:3">if</cpp:directive> <expr pos:start="497:5" pos:end="497:30"><operator pos:start="497:5" pos:end="497:5">!</operator><call pos:start="497:6" pos:end="497:30"><name pos:start="497:6" pos:end="497:12">defined</name><argument_list pos:start="497:13" pos:end="497:30">(<argument pos:start="497:14" pos:end="497:29"><expr pos:start="497:14" pos:end="497:29"><name pos:start="497:14" pos:end="497:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="499:13" pos:end="499:80"><expr pos:start="499:13" pos:end="499:79"><call pos:start="499:13" pos:end="499:79"><name pos:start="499:13" pos:end="499:19">pstrcpy</name><argument_list pos:start="499:20" pos:end="499:79">(<argument pos:start="499:21" pos:end="499:33"><expr pos:start="499:21" pos:end="499:33"><name pos:start="499:21" pos:end="499:33">output_buffer</name></expr></argument>, <argument pos:start="499:36" pos:end="499:46"><expr pos:start="499:36" pos:end="499:46"><name pos:start="499:36" pos:end="499:46">output_size</name></expr></argument>, <argument pos:start="499:49" pos:end="499:78"><expr pos:start="499:49" pos:end="499:78"><name pos:start="499:49" pos:end="499:78"><name pos:start="499:49" pos:end="499:50">ts</name><operator pos:start="499:51" pos:end="499:52">-&gt;</operator><name pos:start="499:53" pos:end="499:61">boot_info</name><operator pos:start="499:62" pos:end="499:63">-&gt;</operator><name pos:start="499:64" pos:end="499:78">kernel_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="501:13" pos:end="501:53"><expr pos:start="501:13" pos:end="501:52"><call pos:start="501:13" pos:end="501:52"><name pos:start="501:13" pos:end="501:19">pstrcat</name><argument_list pos:start="501:20" pos:end="501:52">(<argument pos:start="501:21" pos:end="501:33"><expr pos:start="501:21" pos:end="501:33"><name pos:start="501:21" pos:end="501:33">output_buffer</name></expr></argument>, <argument pos:start="501:36" pos:end="501:46"><expr pos:start="501:36" pos:end="501:46"><name pos:start="501:36" pos:end="501:46">output_size</name></expr></argument>, <argument pos:start="501:49" pos:end="501:51"><expr pos:start="501:49" pos:end="501:51"><literal type="string" pos:start="501:49" pos:end="501:51">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="503:13" pos:end="506:0"><expr pos:start="503:13" pos:end="503:78"><call pos:start="503:13" pos:end="503:78"><name pos:start="503:13" pos:end="503:19">pstrcat</name><argument_list pos:start="503:20" pos:end="503:78">(<argument pos:start="503:21" pos:end="503:33"><expr pos:start="503:21" pos:end="503:33"><name pos:start="503:21" pos:end="503:33">output_buffer</name></expr></argument>, <argument pos:start="503:36" pos:end="503:46"><expr pos:start="503:36" pos:end="503:46"><name pos:start="503:36" pos:end="503:46">output_size</name></expr></argument>, <argument pos:start="503:49" pos:end="503:77"><expr pos:start="503:49" pos:end="503:77"><name pos:start="503:49" pos:end="503:77"><name pos:start="503:49" pos:end="503:50">ts</name><operator pos:start="503:51" pos:end="503:52">-&gt;</operator><name pos:start="503:53" pos:end="503:61">boot_info</name><operator pos:start="503:62" pos:end="503:63">-&gt;</operator><name pos:start="503:64" pos:end="503:77">kernel_cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="505:1" pos:end="505:5">#<cpp:directive pos:start="505:2" pos:end="505:5">else</cpp:directive></cpp:else>

            <if_stmt pos:start="507:13" pos:end="515:13"><if pos:start="507:13" pos:end="515:13">if <condition pos:start="507:16" pos:end="507:33">(<expr pos:start="507:17" pos:end="507:32"><name pos:start="507:17" pos:end="507:27">output_size</name> <operator pos:start="507:29" pos:end="507:30">==</operator> <literal type="number" pos:start="507:32" pos:end="507:32">1</literal></expr>)</condition> <block pos:start="507:35" pos:end="515:13">{<block_content pos:start="511:17" pos:end="513:25">

                <comment type="block" pos:start="509:17" pos:end="509:42">/* Empty command-line.  */</comment>

                <expr_stmt pos:start="511:17" pos:end="511:40"><expr pos:start="511:17" pos:end="511:39"><name pos:start="511:17" pos:end="511:32"><name pos:start="511:17" pos:end="511:29">output_buffer</name><index pos:start="511:30" pos:end="511:32">[<expr pos:start="511:31" pos:end="511:31"><literal type="number" pos:start="511:31" pos:end="511:31">0</literal></expr>]</index></name> <operator pos:start="511:34" pos:end="511:34">=</operator> <literal type="char" pos:start="511:36" pos:end="511:39">'\0'</literal></expr>;</expr_stmt>

                <goto pos:start="513:17" pos:end="513:25">goto <name pos:start="513:22" pos:end="513:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="519:13" pos:end="527:13"><if pos:start="519:13" pos:end="527:13">if <condition pos:start="519:16" pos:end="521:44">(<expr pos:start="519:17" pos:end="521:43"><call pos:start="519:17" pos:end="521:43"><name pos:start="519:17" pos:end="519:30">copy_from_user</name><argument_list pos:start="519:31" pos:end="521:43">(<argument pos:start="519:32" pos:end="519:44"><expr pos:start="519:32" pos:end="519:44"><name pos:start="519:32" pos:end="519:44">output_buffer</name></expr></argument>, <argument pos:start="519:47" pos:end="519:65"><expr pos:start="519:47" pos:end="519:65"><name pos:start="519:47" pos:end="519:65"><name pos:start="519:47" pos:end="519:48">ts</name><operator pos:start="519:49" pos:end="519:50">-&gt;</operator><name pos:start="519:51" pos:end="519:54">info</name><operator pos:start="519:55" pos:end="519:56">-&gt;</operator><name pos:start="519:57" pos:end="519:65">arg_start</name></name></expr></argument>,

                               <argument pos:start="521:32" pos:end="521:42"><expr pos:start="521:32" pos:end="521:42"><name pos:start="521:32" pos:end="521:42">output_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="521:46" pos:end="527:13">{<block_content pos:start="523:17" pos:end="525:25">

                <expr_stmt pos:start="523:17" pos:end="523:28"><expr pos:start="523:17" pos:end="523:27"><name pos:start="523:17" pos:end="523:22">status</name> <operator pos:start="523:24" pos:end="523:24">=</operator> <operator pos:start="523:26" pos:end="523:26">-</operator><literal type="number" pos:start="523:27" pos:end="523:27">1</literal></expr>;</expr_stmt>

                <goto pos:start="525:17" pos:end="525:25">goto <name pos:start="525:22" pos:end="525:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="531:13" pos:end="531:54">/* Separate arguments by white spaces.  */</comment>

            <for pos:start="533:13" pos:end="541:13">for <control pos:start="533:17" pos:end="533:49">(<init pos:start="533:18" pos:end="533:23"><expr pos:start="533:18" pos:end="533:22"><name pos:start="533:18" pos:end="533:18">i</name> <operator pos:start="533:20" pos:end="533:20">=</operator> <literal type="number" pos:start="533:22" pos:end="533:22">0</literal></expr>;</init> <condition pos:start="533:25" pos:end="533:44"><expr pos:start="533:25" pos:end="533:43"><name pos:start="533:25" pos:end="533:25">i</name> <operator pos:start="533:27" pos:end="533:27">&lt;</operator> <name pos:start="533:29" pos:end="533:39">output_size</name> <operator pos:start="533:41" pos:end="533:41">-</operator> <literal type="number" pos:start="533:43" pos:end="533:43">1</literal></expr>;</condition> <incr pos:start="533:46" pos:end="533:48"><expr pos:start="533:46" pos:end="533:48"><name pos:start="533:46" pos:end="533:46">i</name><operator pos:start="533:47" pos:end="533:48">++</operator></expr></incr>)</control> <block pos:start="533:51" pos:end="541:13">{<block_content pos:start="535:17" pos:end="539:17">

                <if_stmt pos:start="535:17" pos:end="539:17"><if pos:start="535:17" pos:end="539:17">if <condition pos:start="535:20" pos:end="535:42">(<expr pos:start="535:21" pos:end="535:41"><name pos:start="535:21" pos:end="535:36"><name pos:start="535:21" pos:end="535:33">output_buffer</name><index pos:start="535:34" pos:end="535:36">[<expr pos:start="535:35" pos:end="535:35"><name pos:start="535:35" pos:end="535:35">i</name></expr>]</index></name> <operator pos:start="535:38" pos:end="535:39">==</operator> <literal type="number" pos:start="535:41" pos:end="535:41">0</literal></expr>)</condition> <block pos:start="535:44" pos:end="539:17">{<block_content pos:start="537:21" pos:end="537:43">

                    <expr_stmt pos:start="537:21" pos:end="537:43"><expr pos:start="537:21" pos:end="537:42"><name pos:start="537:21" pos:end="537:36"><name pos:start="537:21" pos:end="537:33">output_buffer</name><index pos:start="537:34" pos:end="537:36">[<expr pos:start="537:35" pos:end="537:35"><name pos:start="537:35" pos:end="537:35">i</name></expr>]</index></name> <operator pos:start="537:38" pos:end="537:38">=</operator> <literal type="char" pos:start="537:40" pos:end="537:42">' '</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        <label pos:start="543:9" pos:end="546:0"><name pos:start="543:9" pos:end="543:11">out</name>:</label>

<cpp:endif pos:start="545:1" pos:end="545:6">#<cpp:directive pos:start="545:2" pos:end="545:6">endif</cpp:directive></cpp:endif>

            <comment type="block" pos:start="547:13" pos:end="547:53">/* Unlock the buffer on the ARM side.  */</comment>

            <expr_stmt pos:start="549:13" pos:end="549:60"><expr pos:start="549:13" pos:end="549:59"><call pos:start="549:13" pos:end="549:59"><name pos:start="549:13" pos:end="549:23">unlock_user</name><argument_list pos:start="549:24" pos:end="549:59">(<argument pos:start="549:25" pos:end="549:37"><expr pos:start="549:25" pos:end="549:37"><name pos:start="549:25" pos:end="549:37">output_buffer</name></expr></argument>, <argument pos:start="549:40" pos:end="549:45"><expr pos:start="549:40" pos:end="549:45"><call pos:start="549:40" pos:end="549:45"><name pos:start="549:40" pos:end="549:42">ARG</name><argument_list pos:start="549:43" pos:end="549:45">(<argument pos:start="549:44" pos:end="549:44"><expr pos:start="549:44" pos:end="549:44"><literal type="number" pos:start="549:44" pos:end="549:44">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="549:48" pos:end="549:58"><expr pos:start="549:48" pos:end="549:58"><name pos:start="549:48" pos:end="549:58">output_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <return pos:start="553:13" pos:end="553:26">return <expr pos:start="553:20" pos:end="553:25"><name pos:start="553:20" pos:end="553:25">status</name></expr>;</return>

        </block_content>}</block>

    <case pos:start="557:5" pos:end="557:29">case <expr pos:start="557:10" pos:end="557:28"><name pos:start="557:10" pos:end="557:28">TARGET_SYS_HEAPINFO</name></expr>:</case>

        <block pos:start="559:9" pos:end="647:9">{<block_content pos:start="561:13" pos:end="645:21">

            <decl_stmt pos:start="561:13" pos:end="561:26"><decl pos:start="561:13" pos:end="561:25"><type pos:start="561:13" pos:end="561:22"><name pos:start="561:13" pos:end="561:20">uint32_t</name> <modifier pos:start="561:22" pos:end="561:22">*</modifier></type><name pos:start="561:23" pos:end="561:25">ptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="563:13" pos:end="568:0"><decl pos:start="563:13" pos:end="563:26"><type pos:start="563:13" pos:end="563:20"><name pos:start="563:13" pos:end="563:20">uint32_t</name></type> <name pos:start="563:22" pos:end="563:26">limit</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="567:1" pos:end="567:23">#<cpp:directive pos:start="567:2" pos:end="567:6">ifdef</cpp:directive> <name pos:start="567:8" pos:end="567:23">CONFIG_USER_ONLY</name></cpp:ifdef>

            <comment type="block" pos:start="569:13" pos:end="571:42">/* Some C libraries assume the heap immediately follows .bss, so

               allocate it using sbrk.  */</comment>

            <if_stmt pos:start="573:13" pos:end="601:13"><if pos:start="573:13" pos:end="601:13">if <condition pos:start="573:16" pos:end="573:32">(<expr pos:start="573:17" pos:end="573:31"><operator pos:start="573:17" pos:end="573:17">!</operator><name pos:start="573:18" pos:end="573:31"><name pos:start="573:18" pos:end="573:19">ts</name><operator pos:start="573:20" pos:end="573:21">-&gt;</operator><name pos:start="573:22" pos:end="573:31">heap_limit</name></name></expr>)</condition> <block pos:start="573:34" pos:end="601:13">{<block_content pos:start="575:17" pos:end="599:39">

                <decl_stmt pos:start="575:17" pos:end="575:30"><decl pos:start="575:17" pos:end="575:29"><type pos:start="575:17" pos:end="575:25"><name pos:start="575:17" pos:end="575:25">abi_ulong</name></type> <name pos:start="575:27" pos:end="575:29">ret</name></decl>;</decl_stmt>



                <expr_stmt pos:start="579:17" pos:end="579:42"><expr pos:start="579:17" pos:end="579:41"><name pos:start="579:17" pos:end="579:29"><name pos:start="579:17" pos:end="579:18">ts</name><operator pos:start="579:19" pos:end="579:20">-&gt;</operator><name pos:start="579:21" pos:end="579:29">heap_base</name></name> <operator pos:start="579:31" pos:end="579:31">=</operator> <call pos:start="579:33" pos:end="579:41"><name pos:start="579:33" pos:end="579:38">do_brk</name><argument_list pos:start="579:39" pos:end="579:41">(<argument pos:start="579:40" pos:end="579:40"><expr pos:start="579:40" pos:end="579:40"><literal type="number" pos:start="579:40" pos:end="579:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="581:17" pos:end="581:60"><expr pos:start="581:17" pos:end="581:59"><name pos:start="581:17" pos:end="581:21">limit</name> <operator pos:start="581:23" pos:end="581:23">=</operator> <name pos:start="581:25" pos:end="581:37"><name pos:start="581:25" pos:end="581:26">ts</name><operator pos:start="581:27" pos:end="581:28">-&gt;</operator><name pos:start="581:29" pos:end="581:37">heap_base</name></name> <operator pos:start="581:39" pos:end="581:39">+</operator> <name pos:start="581:41" pos:end="581:59">ARM_ANGEL_HEAP_SIZE</name></expr>;</expr_stmt>

                <comment type="block" pos:start="583:17" pos:end="583:73">/* Try a big heap, and reduce the size if that fails.  */</comment>

                <for pos:start="585:17" pos:end="597:17">for <control pos:start="585:21" pos:end="585:24">(<init pos:start="585:22" pos:end="585:22">;</init><condition pos:start="585:23" pos:end="585:23">;</condition><incr/>)</control> <block pos:start="585:26" pos:end="597:17">{<block_content pos:start="587:21" pos:end="595:64">

                    <expr_stmt pos:start="587:21" pos:end="587:40"><expr pos:start="587:21" pos:end="587:39"><name pos:start="587:21" pos:end="587:23">ret</name> <operator pos:start="587:25" pos:end="587:25">=</operator> <call pos:start="587:27" pos:end="587:39"><name pos:start="587:27" pos:end="587:32">do_brk</name><argument_list pos:start="587:33" pos:end="587:39">(<argument pos:start="587:34" pos:end="587:38"><expr pos:start="587:34" pos:end="587:38"><name pos:start="587:34" pos:end="587:38">limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="589:21" pos:end="593:21"><if pos:start="589:21" pos:end="593:21">if <condition pos:start="589:24" pos:end="589:37">(<expr pos:start="589:25" pos:end="589:36"><name pos:start="589:25" pos:end="589:27">ret</name> <operator pos:start="589:29" pos:end="589:30">&gt;=</operator> <name pos:start="589:32" pos:end="589:36">limit</name></expr>)</condition> <block pos:start="589:39" pos:end="593:21">{<block_content pos:start="591:25" pos:end="591:30">

                        <break pos:start="591:25" pos:end="591:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="595:21" pos:end="595:64"><expr pos:start="595:21" pos:end="595:63"><name pos:start="595:21" pos:end="595:25">limit</name> <operator pos:start="595:27" pos:end="595:27">=</operator> <operator pos:start="595:29" pos:end="595:29">(</operator><name pos:start="595:30" pos:end="595:42"><name pos:start="595:30" pos:end="595:31">ts</name><operator pos:start="595:32" pos:end="595:33">-&gt;</operator><name pos:start="595:34" pos:end="595:42">heap_base</name></name> <operator pos:start="595:44" pos:end="595:45">&gt;&gt;</operator> <literal type="number" pos:start="595:47" pos:end="595:47">1</literal><operator pos:start="595:48" pos:end="595:48">)</operator> <operator pos:start="595:50" pos:end="595:50">+</operator> <operator pos:start="595:52" pos:end="595:52">(</operator><name pos:start="595:53" pos:end="595:57">limit</name> <operator pos:start="595:59" pos:end="595:60">&gt;&gt;</operator> <literal type="number" pos:start="595:62" pos:end="595:62">1</literal><operator pos:start="595:63" pos:end="595:63">)</operator></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="599:17" pos:end="599:39"><expr pos:start="599:17" pos:end="599:38"><name pos:start="599:17" pos:end="599:30"><name pos:start="599:17" pos:end="599:18">ts</name><operator pos:start="599:19" pos:end="599:20">-&gt;</operator><name pos:start="599:21" pos:end="599:30">heap_limit</name></name> <operator pos:start="599:32" pos:end="599:32">=</operator> <name pos:start="599:34" pos:end="599:38">limit</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="605:13" pos:end="609:36"><if pos:start="605:13" pos:end="609:36">if <condition pos:start="605:16" pos:end="605:64">(<expr pos:start="605:17" pos:end="605:63"><operator pos:start="605:17" pos:end="605:17">!</operator><operator pos:start="605:18" pos:end="605:18">(</operator><name pos:start="605:19" pos:end="605:21">ptr</name> <operator pos:start="605:23" pos:end="605:23">=</operator> <call pos:start="605:25" pos:end="605:62"><name pos:start="605:25" pos:end="605:33">lock_user</name><argument_list pos:start="605:34" pos:end="605:62">(<argument pos:start="605:35" pos:end="605:46"><expr pos:start="605:35" pos:end="605:46"><name pos:start="605:35" pos:end="605:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="605:49" pos:end="605:54"><expr pos:start="605:49" pos:end="605:54"><call pos:start="605:49" pos:end="605:54"><name pos:start="605:49" pos:end="605:51">ARG</name><argument_list pos:start="605:52" pos:end="605:54">(<argument pos:start="605:53" pos:end="605:53"><expr pos:start="605:53" pos:end="605:53"><literal type="number" pos:start="605:53" pos:end="605:53">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="605:57" pos:end="605:58"><expr pos:start="605:57" pos:end="605:58"><literal type="number" pos:start="605:57" pos:end="605:58">16</literal></expr></argument>, <argument pos:start="605:61" pos:end="605:61"><expr pos:start="605:61" pos:end="605:61"><literal type="number" pos:start="605:61" pos:end="605:61">0</literal></expr></argument>)</argument_list></call><operator pos:start="605:63" pos:end="605:63">)</operator></expr>)</condition><block type="pseudo" pos:start="609:17" pos:end="609:36"><block_content pos:start="609:17" pos:end="609:36">

                <comment type="block" pos:start="607:17" pos:end="607:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="609:17" pos:end="609:36">return <expr pos:start="609:24" pos:end="609:35"><operator pos:start="609:24" pos:end="609:24">(</operator><name pos:start="609:25" pos:end="609:32">uint32_t</name><operator pos:start="609:33" pos:end="609:33">)</operator><operator pos:start="609:34" pos:end="609:34">-</operator><literal type="number" pos:start="609:35" pos:end="609:35">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="611:13" pos:end="611:44"><expr pos:start="611:13" pos:end="611:43"><name pos:start="611:13" pos:end="611:18"><name pos:start="611:13" pos:end="611:15">ptr</name><index pos:start="611:16" pos:end="611:18">[<expr pos:start="611:17" pos:end="611:17"><literal type="number" pos:start="611:17" pos:end="611:17">0</literal></expr>]</index></name> <operator pos:start="611:20" pos:end="611:20">=</operator> <call pos:start="611:22" pos:end="611:43"><name pos:start="611:22" pos:end="611:28">tswap32</name><argument_list pos:start="611:29" pos:end="611:43">(<argument pos:start="611:30" pos:end="611:42"><expr pos:start="611:30" pos:end="611:42"><name pos:start="611:30" pos:end="611:42"><name pos:start="611:30" pos:end="611:31">ts</name><operator pos:start="611:32" pos:end="611:33">-&gt;</operator><name pos:start="611:34" pos:end="611:42">heap_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="613:13" pos:end="613:45"><expr pos:start="613:13" pos:end="613:44"><name pos:start="613:13" pos:end="613:18"><name pos:start="613:13" pos:end="613:15">ptr</name><index pos:start="613:16" pos:end="613:18">[<expr pos:start="613:17" pos:end="613:17"><literal type="number" pos:start="613:17" pos:end="613:17">1</literal></expr>]</index></name> <operator pos:start="613:20" pos:end="613:20">=</operator> <call pos:start="613:22" pos:end="613:44"><name pos:start="613:22" pos:end="613:28">tswap32</name><argument_list pos:start="613:29" pos:end="613:44">(<argument pos:start="613:30" pos:end="613:43"><expr pos:start="613:30" pos:end="613:43"><name pos:start="613:30" pos:end="613:43"><name pos:start="613:30" pos:end="613:31">ts</name><operator pos:start="613:32" pos:end="613:33">-&gt;</operator><name pos:start="613:34" pos:end="613:43">heap_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="615:13" pos:end="615:45"><expr pos:start="615:13" pos:end="615:44"><name pos:start="615:13" pos:end="615:18"><name pos:start="615:13" pos:end="615:15">ptr</name><index pos:start="615:16" pos:end="615:18">[<expr pos:start="615:17" pos:end="615:17"><literal type="number" pos:start="615:17" pos:end="615:17">2</literal></expr>]</index></name> <operator pos:start="615:20" pos:end="615:20">=</operator> <call pos:start="615:22" pos:end="615:44"><name pos:start="615:22" pos:end="615:28">tswap32</name><argument_list pos:start="615:29" pos:end="615:44">(<argument pos:start="615:30" pos:end="615:43"><expr pos:start="615:30" pos:end="615:43"><name pos:start="615:30" pos:end="615:43"><name pos:start="615:30" pos:end="615:31">ts</name><operator pos:start="615:32" pos:end="615:33">-&gt;</operator><name pos:start="615:34" pos:end="615:43">stack_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="617:13" pos:end="617:32"><expr pos:start="617:13" pos:end="617:31"><name pos:start="617:13" pos:end="617:18"><name pos:start="617:13" pos:end="617:15">ptr</name><index pos:start="617:16" pos:end="617:18">[<expr pos:start="617:17" pos:end="617:17"><literal type="number" pos:start="617:17" pos:end="617:17">3</literal></expr>]</index></name> <operator pos:start="617:20" pos:end="617:20">=</operator> <call pos:start="617:22" pos:end="617:31"><name pos:start="617:22" pos:end="617:28">tswap32</name><argument_list pos:start="617:29" pos:end="617:31">(<argument pos:start="617:30" pos:end="617:30"><expr pos:start="617:30" pos:end="617:30"><literal type="number" pos:start="617:30" pos:end="617:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="617:34" pos:end="617:52">/* Stack limit.  */</comment>

            <expr_stmt pos:start="619:13" pos:end="622:0"><expr pos:start="619:13" pos:end="619:40"><call pos:start="619:13" pos:end="619:40"><name pos:start="619:13" pos:end="619:23">unlock_user</name><argument_list pos:start="619:24" pos:end="619:40">(<argument pos:start="619:25" pos:end="619:27"><expr pos:start="619:25" pos:end="619:27"><name pos:start="619:25" pos:end="619:27">ptr</name></expr></argument>, <argument pos:start="619:30" pos:end="619:35"><expr pos:start="619:30" pos:end="619:35"><call pos:start="619:30" pos:end="619:35"><name pos:start="619:30" pos:end="619:32">ARG</name><argument_list pos:start="619:33" pos:end="619:35">(<argument pos:start="619:34" pos:end="619:34"><expr pos:start="619:34" pos:end="619:34"><literal type="number" pos:start="619:34" pos:end="619:34">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="619:38" pos:end="619:39"><expr pos:start="619:38" pos:end="619:39"><literal type="number" pos:start="619:38" pos:end="619:39">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="621:1" pos:end="621:5">#<cpp:directive pos:start="621:2" pos:end="621:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="623:13" pos:end="623:29"><expr pos:start="623:13" pos:end="623:28"><name pos:start="623:13" pos:end="623:17">limit</name> <operator pos:start="623:19" pos:end="623:19">=</operator> <name pos:start="623:21" pos:end="623:28">ram_size</name></expr>;</expr_stmt>

            <if_stmt pos:start="625:13" pos:end="629:36"><if pos:start="625:13" pos:end="629:36">if <condition pos:start="625:16" pos:end="625:64">(<expr pos:start="625:17" pos:end="625:63"><operator pos:start="625:17" pos:end="625:17">!</operator><operator pos:start="625:18" pos:end="625:18">(</operator><name pos:start="625:19" pos:end="625:21">ptr</name> <operator pos:start="625:23" pos:end="625:23">=</operator> <call pos:start="625:25" pos:end="625:62"><name pos:start="625:25" pos:end="625:33">lock_user</name><argument_list pos:start="625:34" pos:end="625:62">(<argument pos:start="625:35" pos:end="625:46"><expr pos:start="625:35" pos:end="625:46"><name pos:start="625:35" pos:end="625:46">VERIFY_WRITE</name></expr></argument>, <argument pos:start="625:49" pos:end="625:54"><expr pos:start="625:49" pos:end="625:54"><call pos:start="625:49" pos:end="625:54"><name pos:start="625:49" pos:end="625:51">ARG</name><argument_list pos:start="625:52" pos:end="625:54">(<argument pos:start="625:53" pos:end="625:53"><expr pos:start="625:53" pos:end="625:53"><literal type="number" pos:start="625:53" pos:end="625:53">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="625:57" pos:end="625:58"><expr pos:start="625:57" pos:end="625:58"><literal type="number" pos:start="625:57" pos:end="625:58">16</literal></expr></argument>, <argument pos:start="625:61" pos:end="625:61"><expr pos:start="625:61" pos:end="625:61"><literal type="number" pos:start="625:61" pos:end="625:61">0</literal></expr></argument>)</argument_list></call><operator pos:start="625:63" pos:end="625:63">)</operator></expr>)</condition><block type="pseudo" pos:start="629:17" pos:end="629:36"><block_content pos:start="629:17" pos:end="629:36">

                <comment type="block" pos:start="627:17" pos:end="627:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="629:17" pos:end="629:36">return <expr pos:start="629:24" pos:end="629:35"><operator pos:start="629:24" pos:end="629:24">(</operator><name pos:start="629:25" pos:end="629:32">uint32_t</name><operator pos:start="629:33" pos:end="629:33">)</operator><operator pos:start="629:34" pos:end="629:34">-</operator><literal type="number" pos:start="629:35" pos:end="629:35">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block" pos:start="631:13" pos:end="631:75">/* TODO: Make this use the limit of the loaded application.  */</comment>

            <expr_stmt pos:start="633:13" pos:end="633:40"><expr pos:start="633:13" pos:end="633:39"><name pos:start="633:13" pos:end="633:18"><name pos:start="633:13" pos:end="633:15">ptr</name><index pos:start="633:16" pos:end="633:18">[<expr pos:start="633:17" pos:end="633:17"><literal type="number" pos:start="633:17" pos:end="633:17">0</literal></expr>]</index></name> <operator pos:start="633:20" pos:end="633:20">=</operator> <call pos:start="633:22" pos:end="633:39"><name pos:start="633:22" pos:end="633:28">tswap32</name><argument_list pos:start="633:29" pos:end="633:39">(<argument pos:start="633:30" pos:end="633:38"><expr pos:start="633:30" pos:end="633:38"><name pos:start="633:30" pos:end="633:34">limit</name> <operator pos:start="633:36" pos:end="633:36">/</operator> <literal type="number" pos:start="633:38" pos:end="633:38">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="635:13" pos:end="635:36"><expr pos:start="635:13" pos:end="635:35"><name pos:start="635:13" pos:end="635:18"><name pos:start="635:13" pos:end="635:15">ptr</name><index pos:start="635:16" pos:end="635:18">[<expr pos:start="635:17" pos:end="635:17"><literal type="number" pos:start="635:17" pos:end="635:17">1</literal></expr>]</index></name> <operator pos:start="635:20" pos:end="635:20">=</operator> <call pos:start="635:22" pos:end="635:35"><name pos:start="635:22" pos:end="635:28">tswap32</name><argument_list pos:start="635:29" pos:end="635:35">(<argument pos:start="635:30" pos:end="635:34"><expr pos:start="635:30" pos:end="635:34"><name pos:start="635:30" pos:end="635:34">limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="637:13" pos:end="637:36"><expr pos:start="637:13" pos:end="637:35"><name pos:start="637:13" pos:end="637:18"><name pos:start="637:13" pos:end="637:15">ptr</name><index pos:start="637:16" pos:end="637:18">[<expr pos:start="637:17" pos:end="637:17"><literal type="number" pos:start="637:17" pos:end="637:17">2</literal></expr>]</index></name> <operator pos:start="637:20" pos:end="637:20">=</operator> <call pos:start="637:22" pos:end="637:35"><name pos:start="637:22" pos:end="637:28">tswap32</name><argument_list pos:start="637:29" pos:end="637:35">(<argument pos:start="637:30" pos:end="637:34"><expr pos:start="637:30" pos:end="637:34"><name pos:start="637:30" pos:end="637:34">limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="637:38" pos:end="637:53">/* Stack base */</comment>

            <expr_stmt pos:start="639:13" pos:end="639:32"><expr pos:start="639:13" pos:end="639:31"><name pos:start="639:13" pos:end="639:18"><name pos:start="639:13" pos:end="639:15">ptr</name><index pos:start="639:16" pos:end="639:18">[<expr pos:start="639:17" pos:end="639:17"><literal type="number" pos:start="639:17" pos:end="639:17">3</literal></expr>]</index></name> <operator pos:start="639:20" pos:end="639:20">=</operator> <call pos:start="639:22" pos:end="639:31"><name pos:start="639:22" pos:end="639:28">tswap32</name><argument_list pos:start="639:29" pos:end="639:31">(<argument pos:start="639:30" pos:end="639:30"><expr pos:start="639:30" pos:end="639:30"><literal type="number" pos:start="639:30" pos:end="639:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="639:34" pos:end="639:52">/* Stack limit.  */</comment>

            <expr_stmt pos:start="641:13" pos:end="644:0"><expr pos:start="641:13" pos:end="641:40"><call pos:start="641:13" pos:end="641:40"><name pos:start="641:13" pos:end="641:23">unlock_user</name><argument_list pos:start="641:24" pos:end="641:40">(<argument pos:start="641:25" pos:end="641:27"><expr pos:start="641:25" pos:end="641:27"><name pos:start="641:25" pos:end="641:27">ptr</name></expr></argument>, <argument pos:start="641:30" pos:end="641:35"><expr pos:start="641:30" pos:end="641:35"><call pos:start="641:30" pos:end="641:35"><name pos:start="641:30" pos:end="641:32">ARG</name><argument_list pos:start="641:33" pos:end="641:35">(<argument pos:start="641:34" pos:end="641:34"><expr pos:start="641:34" pos:end="641:34"><literal type="number" pos:start="641:34" pos:end="641:34">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="641:38" pos:end="641:39"><expr pos:start="641:38" pos:end="641:39"><literal type="number" pos:start="641:38" pos:end="641:39">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="643:1" pos:end="643:6">#<cpp:directive pos:start="643:2" pos:end="643:6">endif</cpp:directive></cpp:endif>

            <return pos:start="645:13" pos:end="645:21">return <expr pos:start="645:20" pos:end="645:20"><literal type="number" pos:start="645:20" pos:end="645:20">0</literal></expr>;</return>

        </block_content>}</block>

    <case pos:start="649:5" pos:end="649:25">case <expr pos:start="649:10" pos:end="649:24"><name pos:start="649:10" pos:end="649:24">TARGET_SYS_EXIT</name></expr>:</case>

        <expr_stmt pos:start="651:9" pos:end="651:25"><expr pos:start="651:9" pos:end="651:24"><call pos:start="651:9" pos:end="651:24"><name pos:start="651:9" pos:end="651:16">gdb_exit</name><argument_list pos:start="651:17" pos:end="651:24">(<argument pos:start="651:18" pos:end="651:20"><expr pos:start="651:18" pos:end="651:20"><name pos:start="651:18" pos:end="651:20">env</name></expr></argument>, <argument pos:start="651:23" pos:end="651:23"><expr pos:start="651:23" pos:end="651:23"><literal type="number" pos:start="651:23" pos:end="651:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="653:9" pos:end="653:16"><expr pos:start="653:9" pos:end="653:15"><call pos:start="653:9" pos:end="653:15"><name pos:start="653:9" pos:end="653:12">exit</name><argument_list pos:start="653:13" pos:end="653:15">(<argument pos:start="653:14" pos:end="653:14"><expr pos:start="653:14" pos:end="653:14"><literal type="number" pos:start="653:14" pos:end="653:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <default pos:start="655:5" pos:end="655:12">default:</default>

        <expr_stmt pos:start="657:9" pos:end="657:74"><expr pos:start="657:9" pos:end="657:73"><call pos:start="657:9" pos:end="657:73"><name pos:start="657:9" pos:end="657:15">fprintf</name><argument_list pos:start="657:16" pos:end="657:73">(<argument pos:start="657:17" pos:end="657:22"><expr pos:start="657:17" pos:end="657:22"><name pos:start="657:17" pos:end="657:22">stderr</name></expr></argument>, <argument pos:start="657:25" pos:end="657:68"><expr pos:start="657:25" pos:end="657:68"><literal type="string" pos:start="657:25" pos:end="657:68">"qemu: Unsupported SemiHosting SWI 0x%02x\n"</literal></expr></argument>, <argument pos:start="657:71" pos:end="657:72"><expr pos:start="657:71" pos:end="657:72"><name pos:start="657:71" pos:end="657:72">nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="659:9" pos:end="659:48"><expr pos:start="659:9" pos:end="659:47"><call pos:start="659:9" pos:end="659:47"><name pos:start="659:9" pos:end="659:22">cpu_dump_state</name><argument_list pos:start="659:23" pos:end="659:47">(<argument pos:start="659:24" pos:end="659:26"><expr pos:start="659:24" pos:end="659:26"><name pos:start="659:24" pos:end="659:26">env</name></expr></argument>, <argument pos:start="659:29" pos:end="659:34"><expr pos:start="659:29" pos:end="659:34"><name pos:start="659:29" pos:end="659:34">stderr</name></expr></argument>, <argument pos:start="659:37" pos:end="659:43"><expr pos:start="659:37" pos:end="659:43"><name pos:start="659:37" pos:end="659:43">fprintf</name></expr></argument>, <argument pos:start="659:46" pos:end="659:46"><expr pos:start="659:46" pos:end="659:46"><literal type="number" pos:start="659:46" pos:end="659:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="661:9" pos:end="661:16"><expr pos:start="661:9" pos:end="661:15"><call pos:start="661:9" pos:end="661:15"><name pos:start="661:9" pos:end="661:13">abort</name><argument_list pos:start="661:14" pos:end="661:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
