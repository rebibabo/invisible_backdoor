<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12820.c" pos:tabs="8"><function pos:start="1:1" pos:end="479:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">pc_init1</name><parameter_list pos:start="1:21" pos:end="3:65">(<parameter pos:start="1:22" pos:end="1:42"><decl pos:start="1:22" pos:end="1:42"><type pos:start="1:22" pos:end="1:42"><name pos:start="1:22" pos:end="1:33">MachineState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:42">machine</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:42"><decl pos:start="3:22" pos:end="3:42"><type pos:start="3:22" pos:end="3:42"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:31">char</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:42">host_type</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:64"><decl pos:start="3:45" pos:end="3:64"><type pos:start="3:45" pos:end="3:64"><specifier pos:start="3:45" pos:end="3:49">const</specifier> <name pos:start="3:51" pos:end="3:54">char</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:64">pci_type</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="479:1">{<block_content pos:start="7:5" pos:end="477:5">

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">PCMachineState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:24">pcms</name> <init pos:start="7:26" pos:end="7:46">= <expr pos:start="7:28" pos:end="7:46"><call pos:start="7:28" pos:end="7:46"><name pos:start="7:28" pos:end="7:37">PC_MACHINE</name><argument_list pos:start="7:38" pos:end="7:46">(<argument pos:start="7:39" pos:end="7:45"><expr pos:start="7:39" pos:end="7:45"><name pos:start="7:39" pos:end="7:45">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:53"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">PCMachineClass</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:24">pcmc</name> <init pos:start="9:26" pos:end="9:53">= <expr pos:start="9:28" pos:end="9:53"><call pos:start="9:28" pos:end="9:53"><name pos:start="9:28" pos:end="9:47">PC_MACHINE_GET_CLASS</name><argument_list pos:start="9:48" pos:end="9:53">(<argument pos:start="9:49" pos:end="9:52"><expr pos:start="9:49" pos:end="9:52"><name pos:start="9:49" pos:end="9:52">pcms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:53"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:31">system_memory</name> <init pos:start="11:33" pos:end="11:53">= <expr pos:start="11:35" pos:end="11:53"><call pos:start="11:35" pos:end="11:53"><name pos:start="11:35" pos:end="11:51">get_system_memory</name><argument_list pos:start="11:52" pos:end="11:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:45"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:27">system_io</name> <init pos:start="13:29" pos:end="13:45">= <expr pos:start="13:31" pos:end="13:45"><call pos:start="13:31" pos:end="13:45"><name pos:start="13:31" pos:end="13:43">get_system_io</name><argument_list pos:start="13:44" pos:end="13:45">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:10">PCIBus</name> <modifier pos:start="17:12" pos:end="17:12">*</modifier></type><name pos:start="17:13" pos:end="17:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:10">ISABus</name> <modifier pos:start="19:12" pos:end="19:12">*</modifier></type><name pos:start="19:13" pos:end="19:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:18">PCII440FXState</name> <modifier pos:start="21:20" pos:end="21:20">*</modifier></type><name pos:start="21:21" pos:end="21:32">i440fx_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:19">piix3_devfn</name> <init pos:start="23:21" pos:end="23:24">= <expr pos:start="23:23" pos:end="23:24"><operator pos:start="23:23" pos:end="23:23">-</operator><literal type="number" pos:start="23:24" pos:end="23:24">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">qemu_irq</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:17">gsi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">qemu_irq</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:21"><decl pos:start="29:5" pos:end="29:20"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">qemu_irq</name></type> <name pos:start="29:14" pos:end="29:20">smi_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:24"><decl pos:start="31:5" pos:end="31:23"><type pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:12">GSIState</name> <modifier pos:start="31:14" pos:end="31:14">*</modifier></type><name pos:start="31:15" pos:end="31:23">gsi_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:46"><decl pos:start="33:5" pos:end="33:45"><type pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:13">DriveInfo</name> <modifier pos:start="33:15" pos:end="33:15">*</modifier></type><name pos:start="33:16" pos:end="33:45"><name pos:start="33:16" pos:end="33:17">hd</name><index pos:start="33:18" pos:end="33:45">[<expr pos:start="33:19" pos:end="33:44"><name pos:start="33:19" pos:end="33:29">MAX_IDE_BUS</name> <operator pos:start="33:31" pos:end="33:31">*</operator> <name pos:start="33:33" pos:end="33:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:34"><decl pos:start="35:5" pos:end="35:33"><type pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:12">BusState</name> <modifier pos:start="35:14" pos:end="35:14">*</modifier></type><name pos:start="35:15" pos:end="35:33"><name pos:start="35:15" pos:end="35:20">idebus</name><index pos:start="35:21" pos:end="35:33">[<expr pos:start="35:22" pos:end="35:32"><name pos:start="35:22" pos:end="35:32">MAX_IDE_BUS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:25"><decl pos:start="37:5" pos:end="37:24"><type pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:13">ISADevice</name> <modifier pos:start="37:15" pos:end="37:15">*</modifier></type><name pos:start="37:16" pos:end="37:24">rtc_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:29"><decl pos:start="39:5" pos:end="39:28"><type pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:16">MemoryRegion</name> <modifier pos:start="39:18" pos:end="39:18">*</modifier></type><name pos:start="39:19" pos:end="39:28">ram_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:29"><decl pos:start="41:5" pos:end="41:28"><type pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:16">MemoryRegion</name> <modifier pos:start="41:18" pos:end="41:18">*</modifier></type><name pos:start="41:19" pos:end="41:28">pci_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:29"><decl pos:start="43:5" pos:end="43:28"><type pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:16">MemoryRegion</name> <modifier pos:start="43:18" pos:end="43:18">*</modifier></type><name pos:start="43:19" pos:end="43:28">rom_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:22"><decl pos:start="45:5" pos:end="45:21"><type pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:14">ram_addr_t</name></type> <name pos:start="45:16" pos:end="45:21">lowmem</name></decl>;</decl_stmt>



    <comment type="block" pos:start="49:5" pos:end="109:7">/*

     * Calculate ram split, for memory below and above 4G.  It's a bit

     * complicated for backward compatibility reasons ...

     *

     *  - Traditional split is 3.5G (lowmem = 0xe0000000).  This is the

     *    default value for max_ram_below_4g now.

     *

     *  - Then, to gigabyte align the memory, we move the split to 3G

     *    (lowmem = 0xc0000000).  But only in case we have to split in

     *    the first place, i.e. ram_size is larger than (traditional)

     *    lowmem.  And for new machine types (gigabyte_align = true)

     *    only, for live migration compatibility reasons.

     *

     *  - Next the max-ram-below-4g option was added, which allowed to

     *    reduce lowmem to a smaller value, to allow a larger PCI I/O

     *    window below 4G.  qemu doesn't enforce gigabyte alignment here,

     *    but prints a warning.

     *

     *  - Finally max-ram-below-4g got updated to also allow raising lowmem,

     *    so legacy non-PAE guests can get as much memory as possible in

     *    the 32bit address space below 4G.

     *

     *  - Note that Xen has its own ram setp code in xen_ram_init(),

     *    called via xen_hvm_init().

     *

     * Examples:

     *    qemu -M pc-1.7 -m 4G    (old default)    -&gt; 3584M low,  512M high

     *    qemu -M pc -m 4G        (new default)    -&gt; 3072M low, 1024M high

     *    qemu -M pc,max-ram-below-4g=2G -m 4G     -&gt; 2048M low, 2048M high

     *    qemu -M pc,max-ram-below-4g=4G -m 3968M  -&gt; 3968M low (=4G-128M)

     */</comment>

    <if_stmt pos:start="111:5" pos:end="167:5"><if pos:start="111:5" pos:end="115:5">if <condition pos:start="111:8" pos:end="111:22">(<expr pos:start="111:9" pos:end="111:21"><call pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:19">xen_enabled</name><argument_list pos:start="111:20" pos:end="111:21">()</argument_list></call></expr>)</condition> <block pos:start="111:24" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:40">

        <expr_stmt pos:start="113:9" pos:end="113:40"><expr pos:start="113:9" pos:end="113:39"><call pos:start="113:9" pos:end="113:39"><name pos:start="113:9" pos:end="113:20">xen_hvm_init</name><argument_list pos:start="113:21" pos:end="113:39">(<argument pos:start="113:22" pos:end="113:25"><expr pos:start="113:22" pos:end="113:25"><name pos:start="113:22" pos:end="113:25">pcms</name></expr></argument>, <argument pos:start="113:28" pos:end="113:38"><expr pos:start="113:28" pos:end="113:38"><operator pos:start="113:28" pos:end="113:28">&amp;</operator><name pos:start="113:29" pos:end="113:38">ram_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="115:7" pos:end="167:5">else <block pos:start="115:12" pos:end="167:5">{<block_content pos:start="117:9" pos:end="165:9">

        <if_stmt pos:start="117:9" pos:end="121:9"><if pos:start="117:9" pos:end="121:9">if <condition pos:start="117:12" pos:end="117:36">(<expr pos:start="117:13" pos:end="117:35"><operator pos:start="117:13" pos:end="117:13">!</operator><name pos:start="117:14" pos:end="117:35"><name pos:start="117:14" pos:end="117:17">pcms</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:35">max_ram_below_4g</name></name></expr>)</condition> <block pos:start="117:38" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:48">

            <expr_stmt pos:start="119:13" pos:end="119:48"><expr pos:start="119:13" pos:end="119:47"><name pos:start="119:13" pos:end="119:34"><name pos:start="119:13" pos:end="119:16">pcms</name><operator pos:start="119:17" pos:end="119:18">-&gt;</operator><name pos:start="119:19" pos:end="119:34">max_ram_below_4g</name></name> <operator pos:start="119:36" pos:end="119:36">=</operator> <literal type="number" pos:start="119:38" pos:end="119:47">0xe0000000</literal></expr>;</expr_stmt> <comment type="block" pos:start="119:50" pos:end="119:68">/* default: 3.5G */</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:40"><expr pos:start="123:9" pos:end="123:39"><name pos:start="123:9" pos:end="123:14">lowmem</name> <operator pos:start="123:16" pos:end="123:16">=</operator> <name pos:start="123:18" pos:end="123:39"><name pos:start="123:18" pos:end="123:21">pcms</name><operator pos:start="123:22" pos:end="123:23">-&gt;</operator><name pos:start="123:24" pos:end="123:39">max_ram_below_4g</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="125:9" pos:end="149:9"><if pos:start="125:9" pos:end="149:9">if <condition pos:start="125:12" pos:end="125:56">(<expr pos:start="125:13" pos:end="125:55"><name pos:start="125:13" pos:end="125:29"><name pos:start="125:13" pos:end="125:19">machine</name><operator pos:start="125:20" pos:end="125:21">-&gt;</operator><name pos:start="125:22" pos:end="125:29">ram_size</name></name> <operator pos:start="125:31" pos:end="125:32">&gt;=</operator> <name pos:start="125:34" pos:end="125:55"><name pos:start="125:34" pos:end="125:37">pcms</name><operator pos:start="125:38" pos:end="125:39">-&gt;</operator><name pos:start="125:40" pos:end="125:55">max_ram_below_4g</name></name></expr>)</condition> <block pos:start="125:58" pos:end="149:9">{<block_content pos:start="127:13" pos:end="147:13">

            <if_stmt pos:start="127:13" pos:end="147:13"><if pos:start="127:13" pos:end="147:13">if <condition pos:start="127:16" pos:end="127:37">(<expr pos:start="127:17" pos:end="127:36"><name pos:start="127:17" pos:end="127:36"><name pos:start="127:17" pos:end="127:20">pcmc</name><operator pos:start="127:21" pos:end="127:22">-&gt;</operator><name pos:start="127:23" pos:end="127:36">gigabyte_align</name></name></expr>)</condition> <block pos:start="127:39" pos:end="147:13">{<block_content pos:start="129:17" pos:end="145:17">

                <if_stmt pos:start="129:17" pos:end="133:17"><if pos:start="129:17" pos:end="133:17">if <condition pos:start="129:20" pos:end="129:40">(<expr pos:start="129:21" pos:end="129:39"><name pos:start="129:21" pos:end="129:26">lowmem</name> <operator pos:start="129:28" pos:end="129:28">&gt;</operator> <literal type="number" pos:start="129:30" pos:end="129:39">0xc0000000</literal></expr>)</condition> <block pos:start="129:42" pos:end="133:17">{<block_content pos:start="131:21" pos:end="131:40">

                    <expr_stmt pos:start="131:21" pos:end="131:40"><expr pos:start="131:21" pos:end="131:39"><name pos:start="131:21" pos:end="131:26">lowmem</name> <operator pos:start="131:28" pos:end="131:28">=</operator> <literal type="number" pos:start="131:30" pos:end="131:39">0xc0000000</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="135:17" pos:end="145:17"><if pos:start="135:17" pos:end="145:17">if <condition pos:start="135:20" pos:end="135:48">(<expr pos:start="135:21" pos:end="135:47"><name pos:start="135:21" pos:end="135:26">lowmem</name> <operator pos:start="135:28" pos:end="135:28">&amp;</operator> <operator pos:start="135:30" pos:end="135:30">(</operator><operator pos:start="135:31" pos:end="135:31">(</operator><literal type="number" pos:start="135:32" pos:end="135:35">1ULL</literal> <operator pos:start="135:37" pos:end="135:38">&lt;&lt;</operator> <literal type="number" pos:start="135:40" pos:end="135:41">30</literal><operator pos:start="135:42" pos:end="135:42">)</operator> <operator pos:start="135:44" pos:end="135:44">-</operator> <literal type="number" pos:start="135:46" pos:end="135:46">1</literal><operator pos:start="135:47" pos:end="135:47">)</operator></expr>)</condition> <block pos:start="135:50" pos:end="145:17">{<block_content pos:start="137:21" pos:end="143:57">

                    <expr_stmt pos:start="137:21" pos:end="143:57"><expr pos:start="137:21" pos:end="143:56"><call pos:start="137:21" pos:end="143:56"><name pos:start="137:21" pos:end="137:32">error_report</name><argument_list pos:start="137:33" pos:end="143:56">(<argument pos:start="137:34" pos:end="141:60"><expr pos:start="137:34" pos:end="141:60"><literal type="string" pos:start="137:34" pos:end="137:79">"Warning: Large machine and max_ram_below_4g "</literal>

                                 <literal type="string" pos:start="139:34" pos:end="139:37">"(%"</literal> <name pos:start="139:39" pos:end="139:44">PRIu64</name> <literal type="string" pos:start="139:46" pos:end="139:71">") not a multiple of 1G; "</literal>

                                 <literal type="string" pos:start="141:34" pos:end="141:60">"possible bad performance."</literal></expr></argument>,

                                 <argument pos:start="143:34" pos:end="143:55"><expr pos:start="143:34" pos:end="143:55"><name pos:start="143:34" pos:end="143:55"><name pos:start="143:34" pos:end="143:37">pcms</name><operator pos:start="143:38" pos:end="143:39">-&gt;</operator><name pos:start="143:40" pos:end="143:55">max_ram_below_4g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="153:9" pos:end="165:9"><if pos:start="153:9" pos:end="159:9">if <condition pos:start="153:12" pos:end="153:40">(<expr pos:start="153:13" pos:end="153:39"><name pos:start="153:13" pos:end="153:29"><name pos:start="153:13" pos:end="153:19">machine</name><operator pos:start="153:20" pos:end="153:21">-&gt;</operator><name pos:start="153:22" pos:end="153:29">ram_size</name></name> <operator pos:start="153:31" pos:end="153:32">&gt;=</operator> <name pos:start="153:34" pos:end="153:39">lowmem</name></expr>)</condition> <block pos:start="153:42" pos:end="159:9">{<block_content pos:start="155:13" pos:end="157:45">

            <expr_stmt pos:start="155:13" pos:end="155:65"><expr pos:start="155:13" pos:end="155:64"><name pos:start="155:13" pos:end="155:35"><name pos:start="155:13" pos:end="155:16">pcms</name><operator pos:start="155:17" pos:end="155:18">-&gt;</operator><name pos:start="155:19" pos:end="155:35">above_4g_mem_size</name></name> <operator pos:start="155:37" pos:end="155:37">=</operator> <name pos:start="155:39" pos:end="155:55"><name pos:start="155:39" pos:end="155:45">machine</name><operator pos:start="155:46" pos:end="155:47">-&gt;</operator><name pos:start="155:48" pos:end="155:55">ram_size</name></name> <operator pos:start="155:57" pos:end="155:57">-</operator> <name pos:start="155:59" pos:end="155:64">lowmem</name></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:45"><expr pos:start="157:13" pos:end="157:44"><name pos:start="157:13" pos:end="157:35"><name pos:start="157:13" pos:end="157:16">pcms</name><operator pos:start="157:17" pos:end="157:18">-&gt;</operator><name pos:start="157:19" pos:end="157:35">below_4g_mem_size</name></name> <operator pos:start="157:37" pos:end="157:37">=</operator> <name pos:start="157:39" pos:end="157:44">lowmem</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="159:11" pos:end="165:9">else <block pos:start="159:16" pos:end="165:9">{<block_content pos:start="161:13" pos:end="163:56">

            <expr_stmt pos:start="161:13" pos:end="161:40"><expr pos:start="161:13" pos:end="161:39"><name pos:start="161:13" pos:end="161:35"><name pos:start="161:13" pos:end="161:16">pcms</name><operator pos:start="161:17" pos:end="161:18">-&gt;</operator><name pos:start="161:19" pos:end="161:35">above_4g_mem_size</name></name> <operator pos:start="161:37" pos:end="161:37">=</operator> <literal type="number" pos:start="161:39" pos:end="161:39">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:56"><expr pos:start="163:13" pos:end="163:55"><name pos:start="163:13" pos:end="163:35"><name pos:start="163:13" pos:end="163:16">pcms</name><operator pos:start="163:17" pos:end="163:18">-&gt;</operator><name pos:start="163:19" pos:end="163:35">below_4g_mem_size</name></name> <operator pos:start="163:37" pos:end="163:37">=</operator> <name pos:start="163:39" pos:end="163:55"><name pos:start="163:39" pos:end="163:45">machine</name><operator pos:start="163:46" pos:end="163:47">-&gt;</operator><name pos:start="163:48" pos:end="163:55">ram_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:23"><expr pos:start="171:5" pos:end="171:22"><call pos:start="171:5" pos:end="171:22"><name pos:start="171:5" pos:end="171:16">pc_cpus_init</name><argument_list pos:start="171:17" pos:end="171:22">(<argument pos:start="171:18" pos:end="171:21"><expr pos:start="171:18" pos:end="171:21"><name pos:start="171:18" pos:end="171:21">pcms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="175:5" pos:end="179:5"><if pos:start="175:5" pos:end="179:5">if <condition pos:start="175:8" pos:end="175:48">(<expr pos:start="175:9" pos:end="175:47"><call pos:start="175:9" pos:end="175:21"><name pos:start="175:9" pos:end="175:19">kvm_enabled</name><argument_list pos:start="175:20" pos:end="175:21">()</argument_list></call> <operator pos:start="175:23" pos:end="175:24">&amp;&amp;</operator> <name pos:start="175:26" pos:end="175:47"><name pos:start="175:26" pos:end="175:29">pcmc</name><operator pos:start="175:30" pos:end="175:31">-&gt;</operator><name pos:start="175:32" pos:end="175:47">kvmclock_enabled</name></name></expr>)</condition> <block pos:start="175:50" pos:end="179:5">{<block_content pos:start="177:9" pos:end="177:26">

        <expr_stmt pos:start="177:9" pos:end="177:26"><expr pos:start="177:9" pos:end="177:25"><call pos:start="177:9" pos:end="177:25"><name pos:start="177:9" pos:end="177:23">kvmclock_create</name><argument_list pos:start="177:24" pos:end="177:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="183:5" pos:end="197:5"><if pos:start="183:5" pos:end="191:5">if <condition pos:start="183:8" pos:end="183:26">(<expr pos:start="183:9" pos:end="183:25"><name pos:start="183:9" pos:end="183:25"><name pos:start="183:9" pos:end="183:12">pcmc</name><operator pos:start="183:13" pos:end="183:14">-&gt;</operator><name pos:start="183:15" pos:end="183:25">pci_enabled</name></name></expr>)</condition> <block pos:start="183:28" pos:end="191:5">{<block_content pos:start="185:9" pos:end="189:32">

        <expr_stmt pos:start="185:9" pos:end="185:44"><expr pos:start="185:9" pos:end="185:43"><name pos:start="185:9" pos:end="185:18">pci_memory</name> <operator pos:start="185:20" pos:end="185:20">=</operator> <call pos:start="185:22" pos:end="185:43"><name pos:start="185:22" pos:end="185:26">g_new</name><argument_list pos:start="185:27" pos:end="185:43">(<argument pos:start="185:28" pos:end="185:39"><expr pos:start="185:28" pos:end="185:39"><name pos:start="185:28" pos:end="185:39">MemoryRegion</name></expr></argument>, <argument pos:start="185:42" pos:end="185:42"><expr pos:start="185:42" pos:end="185:42"><literal type="number" pos:start="185:42" pos:end="185:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:64"><expr pos:start="187:9" pos:end="187:63"><call pos:start="187:9" pos:end="187:63"><name pos:start="187:9" pos:end="187:26">memory_region_init</name><argument_list pos:start="187:27" pos:end="187:63">(<argument pos:start="187:28" pos:end="187:37"><expr pos:start="187:28" pos:end="187:37"><name pos:start="187:28" pos:end="187:37">pci_memory</name></expr></argument>, <argument pos:start="187:40" pos:end="187:43"><expr pos:start="187:40" pos:end="187:43"><name pos:start="187:40" pos:end="187:43">NULL</name></expr></argument>, <argument pos:start="187:46" pos:end="187:50"><expr pos:start="187:46" pos:end="187:50"><literal type="string" pos:start="187:46" pos:end="187:50">"pci"</literal></expr></argument>, <argument pos:start="187:53" pos:end="187:62"><expr pos:start="187:53" pos:end="187:62"><name pos:start="187:53" pos:end="187:62">UINT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:32"><expr pos:start="189:9" pos:end="189:31"><name pos:start="189:9" pos:end="189:18">rom_memory</name> <operator pos:start="189:20" pos:end="189:20">=</operator> <name pos:start="189:22" pos:end="189:31">pci_memory</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="191:7" pos:end="197:5">else <block pos:start="191:12" pos:end="197:5">{<block_content pos:start="193:9" pos:end="195:35">

        <expr_stmt pos:start="193:9" pos:end="193:26"><expr pos:start="193:9" pos:end="193:25"><name pos:start="193:9" pos:end="193:18">pci_memory</name> <operator pos:start="193:20" pos:end="193:20">=</operator> <name pos:start="193:22" pos:end="193:25">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:35"><expr pos:start="195:9" pos:end="195:34"><name pos:start="195:9" pos:end="195:18">rom_memory</name> <operator pos:start="195:20" pos:end="195:20">=</operator> <name pos:start="195:22" pos:end="195:34">system_memory</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="201:5" pos:end="201:29"><expr pos:start="201:5" pos:end="201:28"><call pos:start="201:5" pos:end="201:28"><name pos:start="201:5" pos:end="201:22">pc_guest_info_init</name><argument_list pos:start="201:23" pos:end="201:28">(<argument pos:start="201:24" pos:end="201:27"><expr pos:start="201:24" pos:end="201:27"><name pos:start="201:24" pos:end="201:27">pcms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="205:5" pos:end="219:5"><if pos:start="205:5" pos:end="219:5">if <condition pos:start="205:8" pos:end="205:30">(<expr pos:start="205:9" pos:end="205:29"><name pos:start="205:9" pos:end="205:29"><name pos:start="205:9" pos:end="205:12">pcmc</name><operator pos:start="205:13" pos:end="205:14">-&gt;</operator><name pos:start="205:15" pos:end="205:29">smbios_defaults</name></name></expr>)</condition> <block pos:start="205:32" pos:end="219:5">{<block_content pos:start="207:9" pos:end="217:51">

        <decl_stmt pos:start="207:9" pos:end="207:54"><decl pos:start="207:9" pos:end="207:53"><type pos:start="207:9" pos:end="207:22"><name pos:start="207:9" pos:end="207:20">MachineClass</name> <modifier pos:start="207:22" pos:end="207:22">*</modifier></type><name pos:start="207:23" pos:end="207:24">mc</name> <init pos:start="207:26" pos:end="207:53">= <expr pos:start="207:28" pos:end="207:53"><call pos:start="207:28" pos:end="207:53"><name pos:start="207:28" pos:end="207:44">MACHINE_GET_CLASS</name><argument_list pos:start="207:45" pos:end="207:53">(<argument pos:start="207:46" pos:end="207:52"><expr pos:start="207:46" pos:end="207:52"><name pos:start="207:46" pos:end="207:52">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="209:9" pos:end="209:55">/* These values are guest ABI, do not change */</comment>

        <expr_stmt pos:start="211:9" pos:end="217:51"><expr pos:start="211:9" pos:end="217:50"><call pos:start="211:9" pos:end="217:50"><name pos:start="211:9" pos:end="211:27">smbios_set_defaults</name><argument_list pos:start="211:28" pos:end="217:50">(<argument pos:start="211:29" pos:end="211:34"><expr pos:start="211:29" pos:end="211:34"><literal type="string" pos:start="211:29" pos:end="211:34">"QEMU"</literal></expr></argument>, <argument pos:start="211:37" pos:end="211:71"><expr pos:start="211:37" pos:end="211:71"><literal type="string" pos:start="211:37" pos:end="211:71">"Standard PC (i440FX + PIIX, 1996)"</literal></expr></argument>,

                            <argument pos:start="213:29" pos:end="213:36"><expr pos:start="213:29" pos:end="213:36"><name pos:start="213:29" pos:end="213:36"><name pos:start="213:29" pos:end="213:30">mc</name><operator pos:start="213:31" pos:end="213:32">-&gt;</operator><name pos:start="213:33" pos:end="213:36">name</name></name></expr></argument>, <argument pos:start="213:39" pos:end="213:62"><expr pos:start="213:39" pos:end="213:62"><name pos:start="213:39" pos:end="213:62"><name pos:start="213:39" pos:end="213:42">pcmc</name><operator pos:start="213:43" pos:end="213:44">-&gt;</operator><name pos:start="213:45" pos:end="213:62">smbios_legacy_mode</name></name></expr></argument>,

                            <argument pos:start="215:29" pos:end="215:53"><expr pos:start="215:29" pos:end="215:53"><name pos:start="215:29" pos:end="215:53"><name pos:start="215:29" pos:end="215:32">pcmc</name><operator pos:start="215:33" pos:end="215:34">-&gt;</operator><name pos:start="215:35" pos:end="215:53">smbios_uuid_encoded</name></name></expr></argument>,

                            <argument pos:start="217:29" pos:end="217:49"><expr pos:start="217:29" pos:end="217:49"><name pos:start="217:29" pos:end="217:49">SMBIOS_ENTRY_POINT_21</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="223:5" pos:end="223:40">/* allocate ram and load rom/bios */</comment>

    <if_stmt pos:start="225:5" pos:end="237:5"><if pos:start="225:5" pos:end="231:5">if <condition pos:start="225:8" pos:end="225:23">(<expr pos:start="225:9" pos:end="225:22"><operator pos:start="225:9" pos:end="225:9">!</operator><call pos:start="225:10" pos:end="225:22"><name pos:start="225:10" pos:end="225:20">xen_enabled</name><argument_list pos:start="225:21" pos:end="225:22">()</argument_list></call></expr>)</condition> <block pos:start="225:25" pos:end="231:5">{<block_content pos:start="227:9" pos:end="229:48">

        <expr_stmt pos:start="227:9" pos:end="229:48"><expr pos:start="227:9" pos:end="229:47"><call pos:start="227:9" pos:end="229:47"><name pos:start="227:9" pos:end="227:22">pc_memory_init</name><argument_list pos:start="227:23" pos:end="229:47">(<argument pos:start="227:24" pos:end="227:27"><expr pos:start="227:24" pos:end="227:27"><name pos:start="227:24" pos:end="227:27">pcms</name></expr></argument>, <argument pos:start="227:30" pos:end="227:42"><expr pos:start="227:30" pos:end="227:42"><name pos:start="227:30" pos:end="227:42">system_memory</name></expr></argument>,

                       <argument pos:start="229:24" pos:end="229:33"><expr pos:start="229:24" pos:end="229:33"><name pos:start="229:24" pos:end="229:33">rom_memory</name></expr></argument>, <argument pos:start="229:36" pos:end="229:46"><expr pos:start="229:36" pos:end="229:46"><operator pos:start="229:36" pos:end="229:36">&amp;</operator><name pos:start="229:37" pos:end="229:46">ram_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="231:7" pos:end="237:5">else if <condition pos:start="231:15" pos:end="231:48">(<expr pos:start="231:16" pos:end="231:47"><name pos:start="231:16" pos:end="231:39"><name pos:start="231:16" pos:end="231:22">machine</name><operator pos:start="231:23" pos:end="231:24">-&gt;</operator><name pos:start="231:25" pos:end="231:39">kernel_filename</name></name> <operator pos:start="231:41" pos:end="231:42">!=</operator> <name pos:start="231:44" pos:end="231:47">NULL</name></expr>)</condition> <block pos:start="231:50" pos:end="237:5">{<block_content pos:start="235:9" pos:end="235:29">

        <comment type="block" pos:start="233:9" pos:end="233:61">/* For xen HVM direct kernel boot, load linux here */</comment>

        <expr_stmt pos:start="235:9" pos:end="235:29"><expr pos:start="235:9" pos:end="235:28"><call pos:start="235:9" pos:end="235:28"><name pos:start="235:9" pos:end="235:22">xen_load_linux</name><argument_list pos:start="235:23" pos:end="235:28">(<argument pos:start="235:24" pos:end="235:27"><expr pos:start="235:24" pos:end="235:27"><name pos:start="235:24" pos:end="235:27">pcms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="241:5" pos:end="241:46"><expr pos:start="241:5" pos:end="241:45"><name pos:start="241:5" pos:end="241:13">gsi_state</name> <operator pos:start="241:15" pos:end="241:15">=</operator> <call pos:start="241:17" pos:end="241:45"><name pos:start="241:17" pos:end="241:25">g_malloc0</name><argument_list pos:start="241:26" pos:end="241:45">(<argument pos:start="241:27" pos:end="241:44"><expr pos:start="241:27" pos:end="241:44"><sizeof pos:start="241:27" pos:end="241:44">sizeof<argument_list pos:start="241:33" pos:end="241:44">(<argument pos:start="241:34" pos:end="241:43"><expr pos:start="241:34" pos:end="241:43"><operator pos:start="241:34" pos:end="241:34">*</operator><name pos:start="241:35" pos:end="241:43">gsi_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="243:5" pos:end="255:5"><if pos:start="243:5" pos:end="251:5">if <condition pos:start="243:8" pos:end="243:31">(<expr pos:start="243:9" pos:end="243:30"><call pos:start="243:9" pos:end="243:30"><name pos:start="243:9" pos:end="243:28">kvm_ioapic_in_kernel</name><argument_list pos:start="243:29" pos:end="243:30">()</argument_list></call></expr>)</condition> <block pos:start="243:33" pos:end="251:5">{<block_content pos:start="245:9" pos:end="249:47">

        <expr_stmt pos:start="245:9" pos:end="245:52"><expr pos:start="245:9" pos:end="245:51"><call pos:start="245:9" pos:end="245:51"><name pos:start="245:9" pos:end="245:32">kvm_pc_setup_irq_routing</name><argument_list pos:start="245:33" pos:end="245:51">(<argument pos:start="245:34" pos:end="245:50"><expr pos:start="245:34" pos:end="245:50"><name pos:start="245:34" pos:end="245:50"><name pos:start="245:34" pos:end="245:37">pcmc</name><operator pos:start="245:38" pos:end="245:39">-&gt;</operator><name pos:start="245:40" pos:end="245:50">pci_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="249:47"><expr pos:start="247:9" pos:end="249:46"><name pos:start="247:9" pos:end="247:11">gsi</name> <operator pos:start="247:13" pos:end="247:13">=</operator> <call pos:start="247:15" pos:end="249:46"><name pos:start="247:15" pos:end="247:32">qemu_allocate_irqs</name><argument_list pos:start="247:33" pos:end="249:46">(<argument pos:start="247:34" pos:end="247:51"><expr pos:start="247:34" pos:end="247:51"><name pos:start="247:34" pos:end="247:51">kvm_pc_gsi_handler</name></expr></argument>, <argument pos:start="247:54" pos:end="247:62"><expr pos:start="247:54" pos:end="247:62"><name pos:start="247:54" pos:end="247:62">gsi_state</name></expr></argument>,

                                 <argument pos:start="249:34" pos:end="249:45"><expr pos:start="249:34" pos:end="249:45"><name pos:start="249:34" pos:end="249:45">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="251:7" pos:end="255:5">else <block pos:start="251:12" pos:end="255:5">{<block_content pos:start="253:9" pos:end="253:71">

        <expr_stmt pos:start="253:9" pos:end="253:71"><expr pos:start="253:9" pos:end="253:70"><name pos:start="253:9" pos:end="253:11">gsi</name> <operator pos:start="253:13" pos:end="253:13">=</operator> <call pos:start="253:15" pos:end="253:70"><name pos:start="253:15" pos:end="253:32">qemu_allocate_irqs</name><argument_list pos:start="253:33" pos:end="253:70">(<argument pos:start="253:34" pos:end="253:44"><expr pos:start="253:34" pos:end="253:44"><name pos:start="253:34" pos:end="253:44">gsi_handler</name></expr></argument>, <argument pos:start="253:47" pos:end="253:55"><expr pos:start="253:47" pos:end="253:55"><name pos:start="253:47" pos:end="253:55">gsi_state</name></expr></argument>, <argument pos:start="253:58" pos:end="253:69"><expr pos:start="253:58" pos:end="253:69"><name pos:start="253:58" pos:end="253:69">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="259:5" pos:end="289:5"><if pos:start="259:5" pos:end="277:5">if <condition pos:start="259:8" pos:end="259:26">(<expr pos:start="259:9" pos:end="259:25"><name pos:start="259:9" pos:end="259:25"><name pos:start="259:9" pos:end="259:12">pcmc</name><operator pos:start="259:13" pos:end="259:14">-&gt;</operator><name pos:start="259:15" pos:end="259:25">pci_enabled</name></name></expr>)</condition> <block pos:start="259:28" pos:end="277:5">{<block_content pos:start="261:9" pos:end="275:28">

        <expr_stmt pos:start="261:9" pos:end="273:54"><expr pos:start="261:9" pos:end="273:53"><name pos:start="261:9" pos:end="261:15">pci_bus</name> <operator pos:start="261:17" pos:end="261:17">=</operator> <call pos:start="261:19" pos:end="273:53"><name pos:start="261:19" pos:end="261:29">i440fx_init</name><argument_list pos:start="261:30" pos:end="273:53">(<argument pos:start="261:31" pos:end="261:39"><expr pos:start="261:31" pos:end="261:39"><name pos:start="261:31" pos:end="261:39">host_type</name></expr></argument>,

                              <argument pos:start="263:31" pos:end="263:38"><expr pos:start="263:31" pos:end="263:38"><name pos:start="263:31" pos:end="263:38">pci_type</name></expr></argument>,

                              <argument pos:start="265:31" pos:end="265:43"><expr pos:start="265:31" pos:end="265:43"><operator pos:start="265:31" pos:end="265:31">&amp;</operator><name pos:start="265:32" pos:end="265:43">i440fx_state</name></expr></argument>, <argument pos:start="265:46" pos:end="265:57"><expr pos:start="265:46" pos:end="265:57"><operator pos:start="265:46" pos:end="265:46">&amp;</operator><name pos:start="265:47" pos:end="265:57">piix3_devfn</name></expr></argument>, <argument pos:start="265:60" pos:end="265:67"><expr pos:start="265:60" pos:end="265:67"><operator pos:start="265:60" pos:end="265:60">&amp;</operator><name pos:start="265:61" pos:end="265:67">isa_bus</name></expr></argument>, <argument pos:start="265:70" pos:end="265:72"><expr pos:start="265:70" pos:end="265:72"><name pos:start="265:70" pos:end="265:72">gsi</name></expr></argument>,

                              <argument pos:start="267:31" pos:end="267:43"><expr pos:start="267:31" pos:end="267:43"><name pos:start="267:31" pos:end="267:43">system_memory</name></expr></argument>, <argument pos:start="267:46" pos:end="267:54"><expr pos:start="267:46" pos:end="267:54"><name pos:start="267:46" pos:end="267:54">system_io</name></expr></argument>, <argument pos:start="267:57" pos:end="267:73"><expr pos:start="267:57" pos:end="267:73"><name pos:start="267:57" pos:end="267:73"><name pos:start="267:57" pos:end="267:63">machine</name><operator pos:start="267:64" pos:end="267:65">-&gt;</operator><name pos:start="267:66" pos:end="267:73">ram_size</name></name></expr></argument>,

                              <argument pos:start="269:31" pos:end="269:53"><expr pos:start="269:31" pos:end="269:53"><name pos:start="269:31" pos:end="269:53"><name pos:start="269:31" pos:end="269:34">pcms</name><operator pos:start="269:35" pos:end="269:36">-&gt;</operator><name pos:start="269:37" pos:end="269:53">below_4g_mem_size</name></name></expr></argument>,

                              <argument pos:start="271:31" pos:end="271:53"><expr pos:start="271:31" pos:end="271:53"><name pos:start="271:31" pos:end="271:53"><name pos:start="271:31" pos:end="271:34">pcms</name><operator pos:start="271:35" pos:end="271:36">-&gt;</operator><name pos:start="271:37" pos:end="271:53">above_4g_mem_size</name></name></expr></argument>,

                              <argument pos:start="273:31" pos:end="273:40"><expr pos:start="273:31" pos:end="273:40"><name pos:start="273:31" pos:end="273:40">pci_memory</name></expr></argument>, <argument pos:start="273:43" pos:end="273:52"><expr pos:start="273:43" pos:end="273:52"><name pos:start="273:43" pos:end="273:52">ram_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:28"><expr pos:start="275:9" pos:end="275:27"><name pos:start="275:9" pos:end="275:17"><name pos:start="275:9" pos:end="275:12">pcms</name><operator pos:start="275:13" pos:end="275:14">-&gt;</operator><name pos:start="275:15" pos:end="275:17">bus</name></name> <operator pos:start="275:19" pos:end="275:19">=</operator> <name pos:start="275:21" pos:end="275:27">pci_bus</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="277:7" pos:end="289:5">else <block pos:start="277:12" pos:end="289:5">{<block_content pos:start="279:9" pos:end="287:20">

        <expr_stmt pos:start="279:9" pos:end="279:23"><expr pos:start="279:9" pos:end="279:22"><name pos:start="279:9" pos:end="279:15">pci_bus</name> <operator pos:start="279:17" pos:end="279:17">=</operator> <name pos:start="279:19" pos:end="279:22">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:28"><expr pos:start="281:9" pos:end="281:27"><name pos:start="281:9" pos:end="281:20">i440fx_state</name> <operator pos:start="281:22" pos:end="281:22">=</operator> <name pos:start="281:24" pos:end="281:27">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="283:9" pos:end="285:44"><expr pos:start="283:9" pos:end="285:43"><name pos:start="283:9" pos:end="283:15">isa_bus</name> <operator pos:start="283:17" pos:end="283:17">=</operator> <call pos:start="283:19" pos:end="285:43"><name pos:start="283:19" pos:end="283:29">isa_bus_new</name><argument_list pos:start="283:30" pos:end="285:43">(<argument pos:start="283:31" pos:end="283:34"><expr pos:start="283:31" pos:end="283:34"><name pos:start="283:31" pos:end="283:34">NULL</name></expr></argument>, <argument pos:start="283:37" pos:end="283:55"><expr pos:start="283:37" pos:end="283:55"><call pos:start="283:37" pos:end="283:55"><name pos:start="283:37" pos:end="283:53">get_system_memory</name><argument_list pos:start="283:54" pos:end="283:55">()</argument_list></call></expr></argument>, <argument pos:start="283:58" pos:end="283:66"><expr pos:start="283:58" pos:end="283:66"><name pos:start="283:58" pos:end="283:66">system_io</name></expr></argument>,

                              <argument pos:start="285:31" pos:end="285:42"><expr pos:start="285:31" pos:end="285:42"><operator pos:start="285:31" pos:end="285:31">&amp;</operator><name pos:start="285:32" pos:end="285:42">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:20"><expr pos:start="287:9" pos:end="287:19"><name pos:start="287:9" pos:end="287:15">no_hpet</name> <operator pos:start="287:17" pos:end="287:17">=</operator> <literal type="number" pos:start="287:19" pos:end="287:19">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:31"><expr pos:start="291:5" pos:end="291:30"><call pos:start="291:5" pos:end="291:30"><name pos:start="291:5" pos:end="291:16">isa_bus_irqs</name><argument_list pos:start="291:17" pos:end="291:30">(<argument pos:start="291:18" pos:end="291:24"><expr pos:start="291:18" pos:end="291:24"><name pos:start="291:18" pos:end="291:24">isa_bus</name></expr></argument>, <argument pos:start="291:27" pos:end="291:29"><expr pos:start="291:27" pos:end="291:29"><name pos:start="291:27" pos:end="291:29">gsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="295:5" pos:end="307:5"><if pos:start="295:5" pos:end="299:5">if <condition pos:start="295:8" pos:end="295:28">(<expr pos:start="295:9" pos:end="295:27"><call pos:start="295:9" pos:end="295:27"><name pos:start="295:9" pos:end="295:25">kvm_pic_in_kernel</name><argument_list pos:start="295:26" pos:end="295:27">()</argument_list></call></expr>)</condition> <block pos:start="295:30" pos:end="299:5">{<block_content pos:start="297:9" pos:end="297:40">

        <expr_stmt pos:start="297:9" pos:end="297:40"><expr pos:start="297:9" pos:end="297:39"><name pos:start="297:9" pos:end="297:13">i8259</name> <operator pos:start="297:15" pos:end="297:15">=</operator> <call pos:start="297:17" pos:end="297:39"><name pos:start="297:17" pos:end="297:30">kvm_i8259_init</name><argument_list pos:start="297:31" pos:end="297:39">(<argument pos:start="297:32" pos:end="297:38"><expr pos:start="297:32" pos:end="297:38"><name pos:start="297:32" pos:end="297:38">isa_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="299:7" pos:end="303:5">else if <condition pos:start="299:15" pos:end="299:29">(<expr pos:start="299:16" pos:end="299:28"><call pos:start="299:16" pos:end="299:28"><name pos:start="299:16" pos:end="299:26">xen_enabled</name><argument_list pos:start="299:27" pos:end="299:28">()</argument_list></call></expr>)</condition> <block pos:start="299:31" pos:end="303:5">{<block_content pos:start="301:9" pos:end="301:48">

        <expr_stmt pos:start="301:9" pos:end="301:48"><expr pos:start="301:9" pos:end="301:47"><name pos:start="301:9" pos:end="301:13">i8259</name> <operator pos:start="301:15" pos:end="301:15">=</operator> <call pos:start="301:17" pos:end="301:47"><name pos:start="301:17" pos:end="301:45">xen_interrupt_controller_init</name><argument_list pos:start="301:46" pos:end="301:47">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="303:7" pos:end="307:5">else <block pos:start="303:12" pos:end="307:5">{<block_content pos:start="305:9" pos:end="305:59">

        <expr_stmt pos:start="305:9" pos:end="305:59"><expr pos:start="305:9" pos:end="305:58"><name pos:start="305:9" pos:end="305:13">i8259</name> <operator pos:start="305:15" pos:end="305:15">=</operator> <call pos:start="305:17" pos:end="305:58"><name pos:start="305:17" pos:end="305:26">i8259_init</name><argument_list pos:start="305:27" pos:end="305:58">(<argument pos:start="305:28" pos:end="305:34"><expr pos:start="305:28" pos:end="305:34"><name pos:start="305:28" pos:end="305:34">isa_bus</name></expr></argument>, <argument pos:start="305:37" pos:end="305:57"><expr pos:start="305:37" pos:end="305:57"><call pos:start="305:37" pos:end="305:57"><name pos:start="305:37" pos:end="305:55">pc_allocate_cpu_irq</name><argument_list pos:start="305:56" pos:end="305:57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="311:5" pos:end="315:5">for <control pos:start="311:9" pos:end="311:38">(<init pos:start="311:10" pos:end="311:15"><expr pos:start="311:10" pos:end="311:14"><name pos:start="311:10" pos:end="311:10">i</name> <operator pos:start="311:12" pos:end="311:12">=</operator> <literal type="number" pos:start="311:14" pos:end="311:14">0</literal></expr>;</init> <condition pos:start="311:17" pos:end="311:33"><expr pos:start="311:17" pos:end="311:32"><name pos:start="311:17" pos:end="311:17">i</name> <operator pos:start="311:19" pos:end="311:19">&lt;</operator> <name pos:start="311:21" pos:end="311:32">ISA_NUM_IRQS</name></expr>;</condition> <incr pos:start="311:35" pos:end="311:37"><expr pos:start="311:35" pos:end="311:37"><name pos:start="311:35" pos:end="311:35">i</name><operator pos:start="311:36" pos:end="311:37">++</operator></expr></incr>)</control> <block pos:start="311:40" pos:end="315:5">{<block_content pos:start="313:9" pos:end="313:43">

        <expr_stmt pos:start="313:9" pos:end="313:43"><expr pos:start="313:9" pos:end="313:42"><name pos:start="313:9" pos:end="313:31"><name pos:start="313:9" pos:end="313:17">gsi_state</name><operator pos:start="313:18" pos:end="313:19">-&gt;</operator><name pos:start="313:20" pos:end="313:28">i8259_irq</name><index pos:start="313:29" pos:end="313:31">[<expr pos:start="313:30" pos:end="313:30"><name pos:start="313:30" pos:end="313:30">i</name></expr>]</index></name> <operator pos:start="313:33" pos:end="313:33">=</operator> <name pos:start="313:35" pos:end="313:42"><name pos:start="313:35" pos:end="313:39">i8259</name><index pos:start="313:40" pos:end="313:42">[<expr pos:start="313:41" pos:end="313:41"><name pos:start="313:41" pos:end="313:41">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="317:5" pos:end="317:18"><expr pos:start="317:5" pos:end="317:17"><call pos:start="317:5" pos:end="317:17"><name pos:start="317:5" pos:end="317:10">g_free</name><argument_list pos:start="317:11" pos:end="317:17">(<argument pos:start="317:12" pos:end="317:16"><expr pos:start="317:12" pos:end="317:16"><name pos:start="317:12" pos:end="317:16">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="319:5" pos:end="323:5"><if pos:start="319:5" pos:end="323:5">if <condition pos:start="319:8" pos:end="319:26">(<expr pos:start="319:9" pos:end="319:25"><name pos:start="319:9" pos:end="319:25"><name pos:start="319:9" pos:end="319:12">pcmc</name><operator pos:start="319:13" pos:end="319:14">-&gt;</operator><name pos:start="319:15" pos:end="319:25">pci_enabled</name></name></expr>)</condition> <block pos:start="319:28" pos:end="323:5">{<block_content pos:start="321:9" pos:end="321:45">

        <expr_stmt pos:start="321:9" pos:end="321:45"><expr pos:start="321:9" pos:end="321:44"><call pos:start="321:9" pos:end="321:44"><name pos:start="321:9" pos:end="321:23">ioapic_init_gsi</name><argument_list pos:start="321:24" pos:end="321:44">(<argument pos:start="321:25" pos:end="321:33"><expr pos:start="321:25" pos:end="321:33"><name pos:start="321:25" pos:end="321:33">gsi_state</name></expr></argument>, <argument pos:start="321:36" pos:end="321:43"><expr pos:start="321:36" pos:end="321:43"><literal type="string" pos:start="321:36" pos:end="321:43">"i440fx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="327:5" pos:end="327:34"><expr pos:start="327:5" pos:end="327:33"><call pos:start="327:5" pos:end="327:33"><name pos:start="327:5" pos:end="327:24">pc_register_ferr_irq</name><argument_list pos:start="327:25" pos:end="327:33">(<argument pos:start="327:26" pos:end="327:32"><expr pos:start="327:26" pos:end="327:32"><name pos:start="327:26" pos:end="327:32"><name pos:start="327:26" pos:end="327:28">gsi</name><index pos:start="327:29" pos:end="327:32">[<expr pos:start="327:30" pos:end="327:31"><literal type="number" pos:start="327:30" pos:end="327:31">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="331:5" pos:end="331:61"><expr pos:start="331:5" pos:end="331:60"><call pos:start="331:5" pos:end="331:60"><name pos:start="331:5" pos:end="331:15">pc_vga_init</name><argument_list pos:start="331:16" pos:end="331:60">(<argument pos:start="331:17" pos:end="331:23"><expr pos:start="331:17" pos:end="331:23"><name pos:start="331:17" pos:end="331:23">isa_bus</name></expr></argument>, <argument pos:start="331:26" pos:end="331:59"><expr pos:start="331:26" pos:end="331:59"><ternary pos:start="331:26" pos:end="331:59"><condition pos:start="331:26" pos:end="331:44"><expr pos:start="331:26" pos:end="331:42"><name pos:start="331:26" pos:end="331:42"><name pos:start="331:26" pos:end="331:29">pcmc</name><operator pos:start="331:30" pos:end="331:31">-&gt;</operator><name pos:start="331:32" pos:end="331:42">pci_enabled</name></name></expr> ?</condition><then pos:start="331:46" pos:end="331:52"> <expr pos:start="331:46" pos:end="331:52"><name pos:start="331:46" pos:end="331:52">pci_bus</name></expr> </then><else pos:start="331:54" pos:end="331:59">: <expr pos:start="331:56" pos:end="331:59"><name pos:start="331:56" pos:end="331:59">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="335:5" pos:end="335:45"><expr pos:start="335:5" pos:end="335:44"><call pos:start="335:5" pos:end="335:44"><name pos:start="335:5" pos:end="335:10">assert</name><argument_list pos:start="335:11" pos:end="335:44">(<argument pos:start="335:12" pos:end="335:43"><expr pos:start="335:12" pos:end="335:43"><name pos:start="335:12" pos:end="335:23"><name pos:start="335:12" pos:end="335:15">pcms</name><operator pos:start="335:16" pos:end="335:17">-&gt;</operator><name pos:start="335:18" pos:end="335:23">vmport</name></name> <operator pos:start="335:25" pos:end="335:26">!=</operator> <name pos:start="335:28" pos:end="335:43">ON_OFF_AUTO__MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="337:5" pos:end="341:5"><if pos:start="337:5" pos:end="341:5">if <condition pos:start="337:8" pos:end="337:41">(<expr pos:start="337:9" pos:end="337:40"><name pos:start="337:9" pos:end="337:20"><name pos:start="337:9" pos:end="337:12">pcms</name><operator pos:start="337:13" pos:end="337:14">-&gt;</operator><name pos:start="337:15" pos:end="337:20">vmport</name></name> <operator pos:start="337:22" pos:end="337:23">==</operator> <name pos:start="337:25" pos:end="337:40">ON_OFF_AUTO_AUTO</name></expr>)</condition> <block pos:start="337:43" pos:end="341:5">{<block_content pos:start="339:9" pos:end="339:72">

        <expr_stmt pos:start="339:9" pos:end="339:72"><expr pos:start="339:9" pos:end="339:71"><name pos:start="339:9" pos:end="339:20"><name pos:start="339:9" pos:end="339:12">pcms</name><operator pos:start="339:13" pos:end="339:14">-&gt;</operator><name pos:start="339:15" pos:end="339:20">vmport</name></name> <operator pos:start="339:22" pos:end="339:22">=</operator> <ternary pos:start="339:24" pos:end="339:71"><condition pos:start="339:24" pos:end="339:38"><expr pos:start="339:24" pos:end="339:36"><call pos:start="339:24" pos:end="339:36"><name pos:start="339:24" pos:end="339:34">xen_enabled</name><argument_list pos:start="339:35" pos:end="339:36">()</argument_list></call></expr> ?</condition><then pos:start="339:40" pos:end="339:54"> <expr pos:start="339:40" pos:end="339:54"><name pos:start="339:40" pos:end="339:54">ON_OFF_AUTO_OFF</name></expr> </then><else pos:start="339:56" pos:end="339:71">: <expr pos:start="339:58" pos:end="339:71"><name pos:start="339:58" pos:end="339:71">ON_OFF_AUTO_ON</name></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="345:5" pos:end="345:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="347:5" pos:end="349:64"><expr pos:start="347:5" pos:end="349:63"><call pos:start="347:5" pos:end="349:63"><name pos:start="347:5" pos:end="347:24">pc_basic_device_init</name><argument_list pos:start="347:25" pos:end="349:63">(<argument pos:start="347:26" pos:end="347:32"><expr pos:start="347:26" pos:end="347:32"><name pos:start="347:26" pos:end="347:32">isa_bus</name></expr></argument>, <argument pos:start="347:35" pos:end="347:37"><expr pos:start="347:35" pos:end="347:37"><name pos:start="347:35" pos:end="347:37">gsi</name></expr></argument>, <argument pos:start="347:40" pos:end="347:49"><expr pos:start="347:40" pos:end="347:49"><operator pos:start="347:40" pos:end="347:40">&amp;</operator><name pos:start="347:41" pos:end="347:49">rtc_state</name></expr></argument>, <argument pos:start="347:52" pos:end="347:55"><expr pos:start="347:52" pos:end="347:55"><name pos:start="347:52" pos:end="347:55">true</name></expr></argument>,

                         <argument pos:start="349:26" pos:end="349:57"><expr pos:start="349:26" pos:end="349:57"><operator pos:start="349:26" pos:end="349:26">(</operator><name pos:start="349:27" pos:end="349:38"><name pos:start="349:27" pos:end="349:30">pcms</name><operator pos:start="349:31" pos:end="349:32">-&gt;</operator><name pos:start="349:33" pos:end="349:38">vmport</name></name> <operator pos:start="349:40" pos:end="349:41">!=</operator> <name pos:start="349:43" pos:end="349:56">ON_OFF_AUTO_ON</name><operator pos:start="349:57" pos:end="349:57">)</operator></expr></argument>, <argument pos:start="349:60" pos:end="349:62"><expr pos:start="349:60" pos:end="349:62"><literal type="number" pos:start="349:60" pos:end="349:62">0x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="353:5" pos:end="353:34"><expr pos:start="353:5" pos:end="353:33"><call pos:start="353:5" pos:end="353:33"><name pos:start="353:5" pos:end="353:15">pc_nic_init</name><argument_list pos:start="353:16" pos:end="353:33">(<argument pos:start="353:17" pos:end="353:23"><expr pos:start="353:17" pos:end="353:23"><name pos:start="353:17" pos:end="353:23">isa_bus</name></expr></argument>, <argument pos:start="353:26" pos:end="353:32"><expr pos:start="353:26" pos:end="353:32"><name pos:start="353:26" pos:end="353:32">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="357:5" pos:end="357:38"><expr pos:start="357:5" pos:end="357:37"><call pos:start="357:5" pos:end="357:37"><name pos:start="357:5" pos:end="357:17">ide_drive_get</name><argument_list pos:start="357:18" pos:end="357:37">(<argument pos:start="357:19" pos:end="357:20"><expr pos:start="357:19" pos:end="357:20"><name pos:start="357:19" pos:end="357:20">hd</name></expr></argument>, <argument pos:start="357:23" pos:end="357:36"><expr pos:start="357:23" pos:end="357:36"><call pos:start="357:23" pos:end="357:36"><name pos:start="357:23" pos:end="357:32">ARRAY_SIZE</name><argument_list pos:start="357:33" pos:end="357:36">(<argument pos:start="357:34" pos:end="357:35"><expr pos:start="357:34" pos:end="357:35"><name pos:start="357:34" pos:end="357:35">hd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="359:5" pos:end="405:5"><if pos:start="359:5" pos:end="377:5">if <condition pos:start="359:8" pos:end="359:26">(<expr pos:start="359:9" pos:end="359:25"><name pos:start="359:9" pos:end="359:25"><name pos:start="359:9" pos:end="359:12">pcmc</name><operator pos:start="359:13" pos:end="359:14">-&gt;</operator><name pos:start="359:15" pos:end="359:25">pci_enabled</name></name></expr>)</condition> <block pos:start="359:28" pos:end="377:5">{<block_content pos:start="361:9" pos:end="375:60">

        <decl_stmt pos:start="361:9" pos:end="361:23"><decl pos:start="361:9" pos:end="361:22"><type pos:start="361:9" pos:end="361:19"><name pos:start="361:9" pos:end="361:17">PCIDevice</name> <modifier pos:start="361:19" pos:end="361:19">*</modifier></type><name pos:start="361:20" pos:end="361:22">dev</name></decl>;</decl_stmt>

        <if_stmt pos:start="363:9" pos:end="371:9"><if pos:start="363:9" pos:end="367:9">if <condition pos:start="363:12" pos:end="363:26">(<expr pos:start="363:13" pos:end="363:25"><call pos:start="363:13" pos:end="363:25"><name pos:start="363:13" pos:end="363:23">xen_enabled</name><argument_list pos:start="363:24" pos:end="363:25">()</argument_list></call></expr>)</condition> <block pos:start="363:28" pos:end="367:9">{<block_content pos:start="365:13" pos:end="365:71">

            <expr_stmt pos:start="365:13" pos:end="365:71"><expr pos:start="365:13" pos:end="365:70"><name pos:start="365:13" pos:end="365:15">dev</name> <operator pos:start="365:17" pos:end="365:17">=</operator> <call pos:start="365:19" pos:end="365:70"><name pos:start="365:19" pos:end="365:40">pci_piix3_xen_ide_init</name><argument_list pos:start="365:41" pos:end="365:70">(<argument pos:start="365:42" pos:end="365:48"><expr pos:start="365:42" pos:end="365:48"><name pos:start="365:42" pos:end="365:48">pci_bus</name></expr></argument>, <argument pos:start="365:51" pos:end="365:52"><expr pos:start="365:51" pos:end="365:52"><name pos:start="365:51" pos:end="365:52">hd</name></expr></argument>, <argument pos:start="365:55" pos:end="365:69"><expr pos:start="365:55" pos:end="365:69"><name pos:start="365:55" pos:end="365:65">piix3_devfn</name> <operator pos:start="365:67" pos:end="365:67">+</operator> <literal type="number" pos:start="365:69" pos:end="365:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="367:11" pos:end="371:9">else <block pos:start="367:16" pos:end="371:9">{<block_content pos:start="369:13" pos:end="369:67">

            <expr_stmt pos:start="369:13" pos:end="369:67"><expr pos:start="369:13" pos:end="369:66"><name pos:start="369:13" pos:end="369:15">dev</name> <operator pos:start="369:17" pos:end="369:17">=</operator> <call pos:start="369:19" pos:end="369:66"><name pos:start="369:19" pos:end="369:36">pci_piix3_ide_init</name><argument_list pos:start="369:37" pos:end="369:66">(<argument pos:start="369:38" pos:end="369:44"><expr pos:start="369:38" pos:end="369:44"><name pos:start="369:38" pos:end="369:44">pci_bus</name></expr></argument>, <argument pos:start="369:47" pos:end="369:48"><expr pos:start="369:47" pos:end="369:48"><name pos:start="369:47" pos:end="369:48">hd</name></expr></argument>, <argument pos:start="369:51" pos:end="369:65"><expr pos:start="369:51" pos:end="369:65"><name pos:start="369:51" pos:end="369:61">piix3_devfn</name> <operator pos:start="369:63" pos:end="369:63">+</operator> <literal type="number" pos:start="369:65" pos:end="369:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="373:9" pos:end="373:60"><expr pos:start="373:9" pos:end="373:59"><name pos:start="373:9" pos:end="373:17"><name pos:start="373:9" pos:end="373:14">idebus</name><index pos:start="373:15" pos:end="373:17">[<expr pos:start="373:16" pos:end="373:16"><literal type="number" pos:start="373:16" pos:end="373:16">0</literal></expr>]</index></name> <operator pos:start="373:19" pos:end="373:19">=</operator> <call pos:start="373:21" pos:end="373:59"><name pos:start="373:21" pos:end="373:38">qdev_get_child_bus</name><argument_list pos:start="373:39" pos:end="373:59">(<argument pos:start="373:40" pos:end="373:49"><expr pos:start="373:40" pos:end="373:49"><operator pos:start="373:40" pos:end="373:40">&amp;</operator><name pos:start="373:41" pos:end="373:49"><name pos:start="373:41" pos:end="373:43">dev</name><operator pos:start="373:44" pos:end="373:45">-&gt;</operator><name pos:start="373:46" pos:end="373:49">qdev</name></name></expr></argument>, <argument pos:start="373:52" pos:end="373:58"><expr pos:start="373:52" pos:end="373:58"><literal type="string" pos:start="373:52" pos:end="373:58">"ide.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:60"><expr pos:start="375:9" pos:end="375:59"><name pos:start="375:9" pos:end="375:17"><name pos:start="375:9" pos:end="375:14">idebus</name><index pos:start="375:15" pos:end="375:17">[<expr pos:start="375:16" pos:end="375:16"><literal type="number" pos:start="375:16" pos:end="375:16">1</literal></expr>]</index></name> <operator pos:start="375:19" pos:end="375:19">=</operator> <call pos:start="375:21" pos:end="375:59"><name pos:start="375:21" pos:end="375:38">qdev_get_child_bus</name><argument_list pos:start="375:39" pos:end="375:59">(<argument pos:start="375:40" pos:end="375:49"><expr pos:start="375:40" pos:end="375:49"><operator pos:start="375:40" pos:end="375:40">&amp;</operator><name pos:start="375:41" pos:end="375:49"><name pos:start="375:41" pos:end="375:43">dev</name><operator pos:start="375:44" pos:end="375:45">-&gt;</operator><name pos:start="375:46" pos:end="375:49">qdev</name></name></expr></argument>, <argument pos:start="375:52" pos:end="375:58"><expr pos:start="375:52" pos:end="375:58"><literal type="string" pos:start="375:52" pos:end="375:58">"ide.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="377:7" pos:end="405:5">else <block pos:start="377:12" pos:end="405:5">{<block_content pos:start="379:9" pos:end="403:9">

        <for pos:start="379:9" pos:end="403:9">for<control pos:start="379:12" pos:end="379:40">(<init pos:start="379:13" pos:end="379:18"><expr pos:start="379:13" pos:end="379:17"><name pos:start="379:13" pos:end="379:13">i</name> <operator pos:start="379:15" pos:end="379:15">=</operator> <literal type="number" pos:start="379:17" pos:end="379:17">0</literal></expr>;</init> <condition pos:start="379:20" pos:end="379:35"><expr pos:start="379:20" pos:end="379:34"><name pos:start="379:20" pos:end="379:20">i</name> <operator pos:start="379:22" pos:end="379:22">&lt;</operator> <name pos:start="379:24" pos:end="379:34">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="379:37" pos:end="379:39"><expr pos:start="379:37" pos:end="379:39"><name pos:start="379:37" pos:end="379:37">i</name><operator pos:start="379:38" pos:end="379:39">++</operator></expr></incr>)</control> <block pos:start="379:42" pos:end="403:9">{<block_content pos:start="381:13" pos:end="401:65">

            <decl_stmt pos:start="381:13" pos:end="381:27"><decl pos:start="381:13" pos:end="381:26"><type pos:start="381:13" pos:end="381:23"><name pos:start="381:13" pos:end="381:21">ISADevice</name> <modifier pos:start="381:23" pos:end="381:23">*</modifier></type><name pos:start="381:24" pos:end="381:26">dev</name></decl>;</decl_stmt>

            <decl_stmt pos:start="383:13" pos:end="383:37"><decl pos:start="383:13" pos:end="383:36"><type pos:start="383:13" pos:end="383:16"><name pos:start="383:13" pos:end="383:16">char</name></type> <name pos:start="383:18" pos:end="383:26"><name pos:start="383:18" pos:end="383:24">busname</name><index pos:start="383:25" pos:end="383:26">[]</index></name> <init pos:start="383:28" pos:end="383:36">= <expr pos:start="383:30" pos:end="383:36"><literal type="string" pos:start="383:30" pos:end="383:36">"ide.0"</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="385:13" pos:end="389:79"><expr pos:start="385:13" pos:end="389:78"><name pos:start="385:13" pos:end="385:15">dev</name> <operator pos:start="385:17" pos:end="385:17">=</operator> <call pos:start="385:19" pos:end="389:78"><name pos:start="385:19" pos:end="385:30">isa_ide_init</name><argument_list pos:start="385:31" pos:end="389:78">(<argument pos:start="385:32" pos:end="385:38"><expr pos:start="385:32" pos:end="385:38"><name pos:start="385:32" pos:end="385:38">isa_bus</name></expr></argument>, <argument pos:start="385:41" pos:end="385:53"><expr pos:start="385:41" pos:end="385:53"><name pos:start="385:41" pos:end="385:53"><name pos:start="385:41" pos:end="385:50">ide_iobase</name><index pos:start="385:51" pos:end="385:53">[<expr pos:start="385:52" pos:end="385:52"><name pos:start="385:52" pos:end="385:52">i</name></expr>]</index></name></expr></argument>, <argument pos:start="385:56" pos:end="385:69"><expr pos:start="385:56" pos:end="385:69"><name pos:start="385:56" pos:end="385:69"><name pos:start="385:56" pos:end="385:66">ide_iobase2</name><index pos:start="385:67" pos:end="385:69">[<expr pos:start="385:68" pos:end="385:68"><name pos:start="385:68" pos:end="385:68">i</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="387:32" pos:end="387:41"><expr pos:start="387:32" pos:end="387:41"><name pos:start="387:32" pos:end="387:41"><name pos:start="387:32" pos:end="387:38">ide_irq</name><index pos:start="387:39" pos:end="387:41">[<expr pos:start="387:40" pos:end="387:40"><name pos:start="387:40" pos:end="387:40">i</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="389:32" pos:end="389:51"><expr pos:start="389:32" pos:end="389:51"><name pos:start="389:32" pos:end="389:51"><name pos:start="389:32" pos:end="389:33">hd</name><index pos:start="389:34" pos:end="389:51">[<expr pos:start="389:35" pos:end="389:50"><name pos:start="389:35" pos:end="389:46">MAX_IDE_DEVS</name> <operator pos:start="389:48" pos:end="389:48">*</operator> <name pos:start="389:50" pos:end="389:50">i</name></expr>]</index></name></expr></argument>, <argument pos:start="389:54" pos:end="389:77"><expr pos:start="389:54" pos:end="389:77"><name pos:start="389:54" pos:end="389:77"><name pos:start="389:54" pos:end="389:55">hd</name><index pos:start="389:56" pos:end="389:77">[<expr pos:start="389:57" pos:end="389:76"><name pos:start="389:57" pos:end="389:68">MAX_IDE_DEVS</name> <operator pos:start="389:70" pos:end="389:70">*</operator> <name pos:start="389:72" pos:end="389:72">i</name> <operator pos:start="389:74" pos:end="389:74">+</operator> <literal type="number" pos:start="389:76" pos:end="389:76">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="391:13" pos:end="397:15">/*

             * The ide bus name is ide.0 for the first bus and ide.1 for the

             * second one.

             */</comment>

            <expr_stmt pos:start="399:13" pos:end="399:33"><expr pos:start="399:13" pos:end="399:32"><name pos:start="399:13" pos:end="399:22"><name pos:start="399:13" pos:end="399:19">busname</name><index pos:start="399:20" pos:end="399:22">[<expr pos:start="399:21" pos:end="399:21"><literal type="number" pos:start="399:21" pos:end="399:21">4</literal></expr>]</index></name> <operator pos:start="399:24" pos:end="399:24">=</operator> <literal type="char" pos:start="399:26" pos:end="399:28">'0'</literal> <operator pos:start="399:30" pos:end="399:30">+</operator> <name pos:start="399:32" pos:end="399:32">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="401:13" pos:end="401:65"><expr pos:start="401:13" pos:end="401:64"><name pos:start="401:13" pos:end="401:21"><name pos:start="401:13" pos:end="401:18">idebus</name><index pos:start="401:19" pos:end="401:21">[<expr pos:start="401:20" pos:end="401:20"><name pos:start="401:20" pos:end="401:20">i</name></expr>]</index></name> <operator pos:start="401:23" pos:end="401:23">=</operator> <call pos:start="401:25" pos:end="401:64"><name pos:start="401:25" pos:end="401:42">qdev_get_child_bus</name><argument_list pos:start="401:43" pos:end="401:64">(<argument pos:start="401:44" pos:end="401:54"><expr pos:start="401:44" pos:end="401:54"><call pos:start="401:44" pos:end="401:54"><name pos:start="401:44" pos:end="401:49">DEVICE</name><argument_list pos:start="401:50" pos:end="401:54">(<argument pos:start="401:51" pos:end="401:53"><expr pos:start="401:51" pos:end="401:53"><name pos:start="401:51" pos:end="401:53">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="401:57" pos:end="401:63"><expr pos:start="401:57" pos:end="401:63"><name pos:start="401:57" pos:end="401:63">busname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="409:5" pos:end="409:56"><expr pos:start="409:5" pos:end="409:55"><call pos:start="409:5" pos:end="409:55"><name pos:start="409:5" pos:end="409:16">pc_cmos_init</name><argument_list pos:start="409:17" pos:end="409:55">(<argument pos:start="409:18" pos:end="409:21"><expr pos:start="409:18" pos:end="409:21"><name pos:start="409:18" pos:end="409:21">pcms</name></expr></argument>, <argument pos:start="409:24" pos:end="409:32"><expr pos:start="409:24" pos:end="409:32"><name pos:start="409:24" pos:end="409:32"><name pos:start="409:24" pos:end="409:29">idebus</name><index pos:start="409:30" pos:end="409:32">[<expr pos:start="409:31" pos:end="409:31"><literal type="number" pos:start="409:31" pos:end="409:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="409:35" pos:end="409:43"><expr pos:start="409:35" pos:end="409:43"><name pos:start="409:35" pos:end="409:43"><name pos:start="409:35" pos:end="409:40">idebus</name><index pos:start="409:41" pos:end="409:43">[<expr pos:start="409:42" pos:end="409:42"><literal type="number" pos:start="409:42" pos:end="409:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="409:46" pos:end="409:54"><expr pos:start="409:46" pos:end="409:54"><name pos:start="409:46" pos:end="409:54">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="413:5" pos:end="417:5"><if pos:start="413:5" pos:end="417:5">if <condition pos:start="413:8" pos:end="413:50">(<expr pos:start="413:9" pos:end="413:49"><name pos:start="413:9" pos:end="413:25"><name pos:start="413:9" pos:end="413:12">pcmc</name><operator pos:start="413:13" pos:end="413:14">-&gt;</operator><name pos:start="413:15" pos:end="413:25">pci_enabled</name></name> <operator pos:start="413:27" pos:end="413:28">&amp;&amp;</operator> <call pos:start="413:30" pos:end="413:49"><name pos:start="413:30" pos:end="413:40">machine_usb</name><argument_list pos:start="413:41" pos:end="413:49">(<argument pos:start="413:42" pos:end="413:48"><expr pos:start="413:42" pos:end="413:48"><name pos:start="413:42" pos:end="413:48">machine</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="413:52" pos:end="417:5">{<block_content pos:start="415:9" pos:end="415:70">

        <expr_stmt pos:start="415:9" pos:end="415:70"><expr pos:start="415:9" pos:end="415:69"><call pos:start="415:9" pos:end="415:69"><name pos:start="415:9" pos:end="415:25">pci_create_simple</name><argument_list pos:start="415:26" pos:end="415:69">(<argument pos:start="415:27" pos:end="415:33"><expr pos:start="415:27" pos:end="415:33"><name pos:start="415:27" pos:end="415:33">pci_bus</name></expr></argument>, <argument pos:start="415:36" pos:end="415:50"><expr pos:start="415:36" pos:end="415:50"><name pos:start="415:36" pos:end="415:46">piix3_devfn</name> <operator pos:start="415:48" pos:end="415:48">+</operator> <literal type="number" pos:start="415:50" pos:end="415:50">2</literal></expr></argument>, <argument pos:start="415:53" pos:end="415:68"><expr pos:start="415:53" pos:end="415:68"><literal type="string" pos:start="415:53" pos:end="415:68">"piix3-usb-uhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="421:5" pos:end="459:5"><if pos:start="421:5" pos:end="459:5">if <condition pos:start="421:8" pos:end="421:42">(<expr pos:start="421:9" pos:end="421:41"><name pos:start="421:9" pos:end="421:25"><name pos:start="421:9" pos:end="421:12">pcmc</name><operator pos:start="421:13" pos:end="421:14">-&gt;</operator><name pos:start="421:15" pos:end="421:25">pci_enabled</name></name> <operator pos:start="421:27" pos:end="421:28">&amp;&amp;</operator> <name pos:start="421:30" pos:end="421:41">acpi_enabled</name></expr>)</condition> <block pos:start="421:44" pos:end="459:5">{<block_content pos:start="423:9" pos:end="457:76">

        <decl_stmt pos:start="423:9" pos:end="423:30"><decl pos:start="423:9" pos:end="423:29"><type pos:start="423:9" pos:end="423:21"><name pos:start="423:9" pos:end="423:19">DeviceState</name> <modifier pos:start="423:21" pos:end="423:21">*</modifier></type><name pos:start="423:22" pos:end="423:29">piix4_pm</name></decl>;</decl_stmt>

        <decl_stmt pos:start="425:9" pos:end="425:22"><decl pos:start="425:9" pos:end="425:21"><type pos:start="425:9" pos:end="425:16"><name pos:start="425:9" pos:end="425:14">I2CBus</name> <modifier pos:start="425:16" pos:end="425:16">*</modifier></type><name pos:start="425:17" pos:end="425:21">smbus</name></decl>;</decl_stmt>



        <expr_stmt pos:start="429:9" pos:end="429:73"><expr pos:start="429:9" pos:end="429:72"><name pos:start="429:9" pos:end="429:15">smi_irq</name> <operator pos:start="429:17" pos:end="429:17">=</operator> <call pos:start="429:19" pos:end="429:72"><name pos:start="429:19" pos:end="429:35">qemu_allocate_irq</name><argument_list pos:start="429:36" pos:end="429:72">(<argument pos:start="429:37" pos:end="429:57"><expr pos:start="429:37" pos:end="429:57"><name pos:start="429:37" pos:end="429:57">pc_acpi_smi_interrupt</name></expr></argument>, <argument pos:start="429:60" pos:end="429:68"><expr pos:start="429:60" pos:end="429:68"><name pos:start="429:60" pos:end="429:68">first_cpu</name></expr></argument>, <argument pos:start="429:71" pos:end="429:71"><expr pos:start="429:71" pos:end="429:71"><literal type="number" pos:start="429:71" pos:end="429:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="431:9" pos:end="431:46">/* TODO: Populate SPD eeprom data.  */</comment>

        <expr_stmt pos:start="433:9" pos:end="439:41"><expr pos:start="433:9" pos:end="439:40"><name pos:start="433:9" pos:end="433:13">smbus</name> <operator pos:start="433:15" pos:end="433:15">=</operator> <call pos:start="433:17" pos:end="439:40"><name pos:start="433:17" pos:end="433:29">piix4_pm_init</name><argument_list pos:start="433:30" pos:end="439:40">(<argument pos:start="433:31" pos:end="433:37"><expr pos:start="433:31" pos:end="433:37"><name pos:start="433:31" pos:end="433:37">pci_bus</name></expr></argument>, <argument pos:start="433:40" pos:end="433:54"><expr pos:start="433:40" pos:end="433:54"><name pos:start="433:40" pos:end="433:50">piix3_devfn</name> <operator pos:start="433:52" pos:end="433:52">+</operator> <literal type="number" pos:start="433:54" pos:end="433:54">3</literal></expr></argument>, <argument pos:start="433:57" pos:end="433:62"><expr pos:start="433:57" pos:end="433:62"><literal type="number" pos:start="433:57" pos:end="433:62">0xb100</literal></expr></argument>,

                              <argument pos:start="435:31" pos:end="435:36"><expr pos:start="435:31" pos:end="435:36"><name pos:start="435:31" pos:end="435:36"><name pos:start="435:31" pos:end="435:33">gsi</name><index pos:start="435:34" pos:end="435:36">[<expr pos:start="435:35" pos:end="435:35"><literal type="number" pos:start="435:35" pos:end="435:35">9</literal></expr>]</index></name></expr></argument>, <argument pos:start="435:39" pos:end="435:45"><expr pos:start="435:39" pos:end="435:45"><name pos:start="435:39" pos:end="435:45">smi_irq</name></expr></argument>,

                              <argument pos:start="437:31" pos:end="437:61"><expr pos:start="437:31" pos:end="437:61"><call pos:start="437:31" pos:end="437:61"><name pos:start="437:31" pos:end="437:55">pc_machine_is_smm_enabled</name><argument_list pos:start="437:56" pos:end="437:61">(<argument pos:start="437:57" pos:end="437:60"><expr pos:start="437:57" pos:end="437:60"><name pos:start="437:57" pos:end="437:60">pcms</name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="439:31" pos:end="439:39"><expr pos:start="439:31" pos:end="439:39"><operator pos:start="439:31" pos:end="439:31">&amp;</operator><name pos:start="439:32" pos:end="439:39">piix4_pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="441:9" pos:end="441:45"><expr pos:start="441:9" pos:end="441:44"><call pos:start="441:9" pos:end="441:44"><name pos:start="441:9" pos:end="441:25">smbus_eeprom_init</name><argument_list pos:start="441:26" pos:end="441:44">(<argument pos:start="441:27" pos:end="441:31"><expr pos:start="441:27" pos:end="441:31"><name pos:start="441:27" pos:end="441:31">smbus</name></expr></argument>, <argument pos:start="441:34" pos:end="441:34"><expr pos:start="441:34" pos:end="441:34"><literal type="number" pos:start="441:34" pos:end="441:34">8</literal></expr></argument>, <argument pos:start="441:37" pos:end="441:40"><expr pos:start="441:37" pos:end="441:40"><name pos:start="441:37" pos:end="441:40">NULL</name></expr></argument>, <argument pos:start="441:43" pos:end="441:43"><expr pos:start="441:43" pos:end="441:43"><literal type="number" pos:start="441:43" pos:end="441:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="445:9" pos:end="453:79"><expr pos:start="445:9" pos:end="453:78"><call pos:start="445:9" pos:end="453:78"><name pos:start="445:9" pos:end="445:32">object_property_add_link</name><argument_list pos:start="445:33" pos:end="453:78">(<argument pos:start="445:34" pos:end="445:48"><expr pos:start="445:34" pos:end="445:48"><call pos:start="445:34" pos:end="445:48"><name pos:start="445:34" pos:end="445:39">OBJECT</name><argument_list pos:start="445:40" pos:end="445:48">(<argument pos:start="445:41" pos:end="445:47"><expr pos:start="445:41" pos:end="445:47"><name pos:start="445:41" pos:end="445:47">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="445:51" pos:end="445:77"><expr pos:start="445:51" pos:end="445:77"><name pos:start="445:51" pos:end="445:77">PC_MACHINE_ACPI_DEVICE_PROP</name></expr></argument>,

                                 <argument pos:start="447:34" pos:end="447:53"><expr pos:start="447:34" pos:end="447:53"><name pos:start="447:34" pos:end="447:53">TYPE_HOTPLUG_HANDLER</name></expr></argument>,

                                 <argument pos:start="449:34" pos:end="449:59"><expr pos:start="449:34" pos:end="449:59"><operator pos:start="449:34" pos:end="449:34">(</operator><name pos:start="449:35" pos:end="449:40">Object</name> <operator pos:start="449:42" pos:end="449:42">*</operator><operator pos:start="449:43" pos:end="449:43">*</operator><operator pos:start="449:44" pos:end="449:44">)</operator><operator pos:start="449:45" pos:end="449:45">&amp;</operator><name pos:start="449:46" pos:end="449:59"><name pos:start="449:46" pos:end="449:49">pcms</name><operator pos:start="449:50" pos:end="449:51">-&gt;</operator><name pos:start="449:52" pos:end="449:59">acpi_dev</name></name></expr></argument>,

                                 <argument pos:start="451:34" pos:end="451:63"><expr pos:start="451:34" pos:end="451:63"><name pos:start="451:34" pos:end="451:63">object_property_allow_set_link</name></expr></argument>,

                                 <argument pos:start="453:34" pos:end="453:63"><expr pos:start="453:34" pos:end="453:63"><name pos:start="453:34" pos:end="453:63">OBJ_PROP_LINK_UNREF_ON_RELEASE</name></expr></argument>, <argument pos:start="453:66" pos:end="453:77"><expr pos:start="453:66" pos:end="453:77"><operator pos:start="453:66" pos:end="453:66">&amp;</operator><name pos:start="453:67" pos:end="453:77">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="455:9" pos:end="457:76"><expr pos:start="455:9" pos:end="457:75"><call pos:start="455:9" pos:end="457:75"><name pos:start="455:9" pos:end="455:32">object_property_set_link</name><argument_list pos:start="455:33" pos:end="457:75">(<argument pos:start="455:34" pos:end="455:48"><expr pos:start="455:34" pos:end="455:48"><call pos:start="455:34" pos:end="455:48"><name pos:start="455:34" pos:end="455:39">OBJECT</name><argument_list pos:start="455:40" pos:end="455:48">(<argument pos:start="455:41" pos:end="455:47"><expr pos:start="455:41" pos:end="455:47"><name pos:start="455:41" pos:end="455:47">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="455:51" pos:end="455:66"><expr pos:start="455:51" pos:end="455:66"><call pos:start="455:51" pos:end="455:66"><name pos:start="455:51" pos:end="455:56">OBJECT</name><argument_list pos:start="455:57" pos:end="455:66">(<argument pos:start="455:58" pos:end="455:65"><expr pos:start="455:58" pos:end="455:65"><name pos:start="455:58" pos:end="455:65">piix4_pm</name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="457:34" pos:end="457:60"><expr pos:start="457:34" pos:end="457:60"><name pos:start="457:34" pos:end="457:60">PC_MACHINE_ACPI_DEVICE_PROP</name></expr></argument>, <argument pos:start="457:63" pos:end="457:74"><expr pos:start="457:63" pos:end="457:74"><operator pos:start="457:63" pos:end="457:63">&amp;</operator><name pos:start="457:64" pos:end="457:74">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="463:5" pos:end="467:5"><if pos:start="463:5" pos:end="467:5">if <condition pos:start="463:8" pos:end="463:26">(<expr pos:start="463:9" pos:end="463:25"><name pos:start="463:9" pos:end="463:25"><name pos:start="463:9" pos:end="463:12">pcmc</name><operator pos:start="463:13" pos:end="463:14">-&gt;</operator><name pos:start="463:15" pos:end="463:25">pci_enabled</name></name></expr>)</condition> <block pos:start="463:28" pos:end="467:5">{<block_content pos:start="465:9" pos:end="465:36">

        <expr_stmt pos:start="465:9" pos:end="465:36"><expr pos:start="465:9" pos:end="465:35"><call pos:start="465:9" pos:end="465:35"><name pos:start="465:9" pos:end="465:26">pc_pci_device_init</name><argument_list pos:start="465:27" pos:end="465:35">(<argument pos:start="465:28" pos:end="465:34"><expr pos:start="465:28" pos:end="465:34"><name pos:start="465:28" pos:end="465:34">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="471:5" pos:end="477:5"><if pos:start="471:5" pos:end="477:5">if <condition pos:start="471:8" pos:end="471:43">(<expr pos:start="471:9" pos:end="471:42"><name pos:start="471:9" pos:end="471:42"><name pos:start="471:9" pos:end="471:12">pcms</name><operator pos:start="471:13" pos:end="471:14">-&gt;</operator><name pos:start="471:15" pos:end="471:31">acpi_nvdimm_state</name><operator pos:start="471:32" pos:end="471:32">.</operator><name pos:start="471:33" pos:end="471:42">is_enabled</name></name></expr>)</condition> <block pos:start="471:45" pos:end="477:5">{<block_content pos:start="473:9" pos:end="475:59">

        <expr_stmt pos:start="473:9" pos:end="475:59"><expr pos:start="473:9" pos:end="475:58"><call pos:start="473:9" pos:end="475:58"><name pos:start="473:9" pos:end="473:30">nvdimm_init_acpi_state</name><argument_list pos:start="473:31" pos:end="475:58">(<argument pos:start="473:32" pos:end="473:55"><expr pos:start="473:32" pos:end="473:55"><operator pos:start="473:32" pos:end="473:32">&amp;</operator><name pos:start="473:33" pos:end="473:55"><name pos:start="473:33" pos:end="473:36">pcms</name><operator pos:start="473:37" pos:end="473:38">-&gt;</operator><name pos:start="473:39" pos:end="473:55">acpi_nvdimm_state</name></name></expr></argument>, <argument pos:start="473:58" pos:end="473:66"><expr pos:start="473:58" pos:end="473:66"><name pos:start="473:58" pos:end="473:66">system_io</name></expr></argument>,

                               <argument pos:start="475:32" pos:end="475:43"><expr pos:start="475:32" pos:end="475:43"><name pos:start="475:32" pos:end="475:43"><name pos:start="475:32" pos:end="475:35">pcms</name><operator pos:start="475:36" pos:end="475:37">-&gt;</operator><name pos:start="475:38" pos:end="475:43">fw_cfg</name></name></expr></argument>, <argument pos:start="475:46" pos:end="475:57"><expr pos:start="475:46" pos:end="475:57"><call pos:start="475:46" pos:end="475:57"><name pos:start="475:46" pos:end="475:51">OBJECT</name><argument_list pos:start="475:52" pos:end="475:57">(<argument pos:start="475:53" pos:end="475:56"><expr pos:start="475:53" pos:end="475:56"><name pos:start="475:53" pos:end="475:56">pcms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
