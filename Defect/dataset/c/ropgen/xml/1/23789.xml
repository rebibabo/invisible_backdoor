<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23789.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:38">resend_aioreq</name><parameter_list pos:start="1:39" pos:end="1:77">(<parameter pos:start="1:40" pos:end="1:59"><decl pos:start="1:40" pos:end="1:59"><type pos:start="1:40" pos:end="1:59"><name pos:start="1:40" pos:end="1:56">BDRVSheepdogState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:59">s</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:76"><decl pos:start="1:62" pos:end="1:76"><type pos:start="1:62" pos:end="1:76"><name pos:start="1:62" pos:end="1:67">AIOReq</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:76">aio_req</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:5">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">SheepdogAIOCB</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">acb</name> <init pos:start="5:24" pos:end="5:39">= <expr pos:start="5:26" pos:end="5:39"><name pos:start="5:26" pos:end="5:39"><name pos:start="5:26" pos:end="5:32">aio_req</name><operator pos:start="5:33" pos:end="5:34">-&gt;</operator><name pos:start="5:35" pos:end="5:39">aiocb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:15">create</name> <init pos:start="7:17" pos:end="7:23">= <expr pos:start="7:19" pos:end="7:23"><name pos:start="7:19" pos:end="7:23">false</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:54">/* check whether this request becomes a CoW one */</comment>

    <if_stmt pos:start="13:5" pos:end="45:5"><if pos:start="13:5" pos:end="45:5">if <condition pos:start="13:8" pos:end="13:74">(<expr pos:start="13:9" pos:end="13:73"><name pos:start="13:9" pos:end="13:23"><name pos:start="13:9" pos:end="13:11">acb</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:23">aiocb_type</name></name> <operator pos:start="13:25" pos:end="13:26">==</operator> <name pos:start="13:28" pos:end="13:44">AIOCB_WRITE_UDATA</name> <operator pos:start="13:46" pos:end="13:47">&amp;&amp;</operator> <call pos:start="13:49" pos:end="13:73"><name pos:start="13:49" pos:end="13:59">is_data_obj</name><argument_list pos:start="13:60" pos:end="13:73">(<argument pos:start="13:61" pos:end="13:72"><expr pos:start="13:61" pos:end="13:72"><name pos:start="13:61" pos:end="13:72"><name pos:start="13:61" pos:end="13:67">aio_req</name><operator pos:start="13:68" pos:end="13:69">-&gt;</operator><name pos:start="13:70" pos:end="13:72">oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:76" pos:end="45:5">{<block_content pos:start="15:9" pos:end="43:22">

        <decl_stmt pos:start="15:9" pos:end="15:48"><decl pos:start="15:9" pos:end="15:47"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:15">idx</name> <init pos:start="15:17" pos:end="15:47">= <expr pos:start="15:19" pos:end="15:47"><call pos:start="15:19" pos:end="15:47"><name pos:start="15:19" pos:end="15:33">data_oid_to_idx</name><argument_list pos:start="15:34" pos:end="15:47">(<argument pos:start="15:35" pos:end="15:46"><expr pos:start="15:35" pos:end="15:46"><name pos:start="15:35" pos:end="15:46"><name pos:start="15:35" pos:end="15:41">aio_req</name><operator pos:start="15:42" pos:end="15:43">-&gt;</operator><name pos:start="15:44" pos:end="15:46">oid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="19:9" pos:end="23:9"><if pos:start="19:9" pos:end="23:9">if <condition pos:start="19:12" pos:end="19:49">(<expr pos:start="19:13" pos:end="19:48"><call pos:start="19:13" pos:end="19:48"><name pos:start="19:13" pos:end="19:32">is_data_obj_writable</name><argument_list pos:start="19:33" pos:end="19:48">(<argument pos:start="19:34" pos:end="19:42"><expr pos:start="19:34" pos:end="19:42"><operator pos:start="19:34" pos:end="19:34">&amp;</operator><name pos:start="19:35" pos:end="19:42"><name pos:start="19:35" pos:end="19:35">s</name><operator pos:start="19:36" pos:end="19:37">-&gt;</operator><name pos:start="19:38" pos:end="19:42">inode</name></name></expr></argument>, <argument pos:start="19:45" pos:end="19:47"><expr pos:start="19:45" pos:end="19:47"><name pos:start="19:45" pos:end="19:47">idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:51" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:21">

            <goto pos:start="21:13" pos:end="21:21">goto <name pos:start="21:18" pos:end="21:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:50">(<expr pos:start="27:13" pos:end="27:49"><call pos:start="27:13" pos:end="27:49"><name pos:start="27:13" pos:end="27:37">check_simultaneous_create</name><argument_list pos:start="27:38" pos:end="27:49">(<argument pos:start="27:39" pos:end="27:39"><expr pos:start="27:39" pos:end="27:39"><name pos:start="27:39" pos:end="27:39">s</name></expr></argument>, <argument pos:start="27:42" pos:end="27:48"><expr pos:start="27:42" pos:end="27:48"><name pos:start="27:42" pos:end="27:48">aio_req</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:52" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:19">

            <return pos:start="29:13" pos:end="29:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:38">(<expr pos:start="35:13" pos:end="35:37"><name pos:start="35:13" pos:end="35:37"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:20">inode</name><operator pos:start="35:21" pos:end="35:21">.</operator><name pos:start="35:22" pos:end="35:32">data_vdi_id</name><index pos:start="35:33" pos:end="35:37">[<expr pos:start="35:34" pos:end="35:36"><name pos:start="35:34" pos:end="35:36">idx</name></expr>]</index></name></expr>)</condition> <block pos:start="35:40" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:46">

            <expr_stmt pos:start="37:13" pos:end="37:80"><expr pos:start="37:13" pos:end="37:79"><name pos:start="37:13" pos:end="37:29"><name pos:start="37:13" pos:end="37:19">aio_req</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:29">base_oid</name></name> <operator pos:start="37:31" pos:end="37:31">=</operator> <call pos:start="37:33" pos:end="37:79"><name pos:start="37:33" pos:end="37:47">vid_to_data_oid</name><argument_list pos:start="37:48" pos:end="37:79">(<argument pos:start="37:49" pos:end="37:73"><expr pos:start="37:49" pos:end="37:73"><name pos:start="37:49" pos:end="37:73"><name pos:start="37:49" pos:end="37:49">s</name><operator pos:start="37:50" pos:end="37:51">-&gt;</operator><name pos:start="37:52" pos:end="37:56">inode</name><operator pos:start="37:57" pos:end="37:57">.</operator><name pos:start="37:58" pos:end="37:68">data_vdi_id</name><index pos:start="37:69" pos:end="37:73">[<expr pos:start="37:70" pos:end="37:72"><name pos:start="37:70" pos:end="37:72">idx</name></expr>]</index></name></expr></argument>, <argument pos:start="37:76" pos:end="37:78"><expr pos:start="37:76" pos:end="37:78"><name pos:start="37:76" pos:end="37:78">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:46"><expr pos:start="39:13" pos:end="39:45"><name pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:19">aio_req</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:26">flags</name></name> <operator pos:start="39:28" pos:end="39:29">|=</operator> <name pos:start="39:31" pos:end="39:45">SD_FLAG_CMD_COW</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:22"><expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:14">create</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <name pos:start="43:18" pos:end="43:21">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="47:1" pos:end="47:4"><name pos:start="47:1" pos:end="47:3">out</name>:</label>

    <if_stmt pos:start="49:5" pos:end="65:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:34">(<expr pos:start="49:9" pos:end="49:33"><call pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:19">is_data_obj</name><argument_list pos:start="49:20" pos:end="49:33">(<argument pos:start="49:21" pos:end="49:32"><expr pos:start="49:21" pos:end="49:32"><name pos:start="49:21" pos:end="49:32"><name pos:start="49:21" pos:end="49:27">aio_req</name><operator pos:start="49:28" pos:end="49:29">-&gt;</operator><name pos:start="49:30" pos:end="49:32">oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:36" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:41">

        <expr_stmt pos:start="51:9" pos:end="53:41"><expr pos:start="51:9" pos:end="53:40"><call pos:start="51:9" pos:end="53:40"><name pos:start="51:9" pos:end="51:23">add_aio_request</name><argument_list pos:start="51:24" pos:end="53:40">(<argument pos:start="51:25" pos:end="51:25"><expr pos:start="51:25" pos:end="51:25"><name pos:start="51:25" pos:end="51:25">s</name></expr></argument>, <argument pos:start="51:28" pos:end="51:34"><expr pos:start="51:28" pos:end="51:34"><name pos:start="51:28" pos:end="51:34">aio_req</name></expr></argument>, <argument pos:start="51:37" pos:end="51:50"><expr pos:start="51:37" pos:end="51:50"><name pos:start="51:37" pos:end="51:50"><name pos:start="51:37" pos:end="51:39">acb</name><operator pos:start="51:40" pos:end="51:41">-&gt;</operator><name pos:start="51:42" pos:end="51:45">qiov</name><operator pos:start="51:46" pos:end="51:47">-&gt;</operator><name pos:start="51:48" pos:end="51:50">iov</name></name></expr></argument>, <argument pos:start="51:53" pos:end="51:67"><expr pos:start="51:53" pos:end="51:67"><name pos:start="51:53" pos:end="51:67"><name pos:start="51:53" pos:end="51:55">acb</name><operator pos:start="51:56" pos:end="51:57">-&gt;</operator><name pos:start="51:58" pos:end="51:61">qiov</name><operator pos:start="51:62" pos:end="51:63">-&gt;</operator><name pos:start="51:64" pos:end="51:67">niov</name></name></expr></argument>, <argument pos:start="51:70" pos:end="51:75"><expr pos:start="51:70" pos:end="51:75"><name pos:start="51:70" pos:end="51:75">create</name></expr></argument>,

                        <argument pos:start="53:25" pos:end="53:39"><expr pos:start="53:25" pos:end="53:39"><name pos:start="53:25" pos:end="53:39"><name pos:start="53:25" pos:end="53:27">acb</name><operator pos:start="53:28" pos:end="53:29">-&gt;</operator><name pos:start="53:30" pos:end="53:39">aiocb_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="65:5">else <block pos:start="55:12" pos:end="65:5">{<block_content pos:start="57:9" pos:end="63:71">

        <decl_stmt pos:start="57:9" pos:end="57:25"><decl pos:start="57:9" pos:end="57:24"><type pos:start="57:9" pos:end="57:20"><name pos:start="57:9" pos:end="57:20"><name pos:start="57:9" pos:end="57:14">struct</name> <name pos:start="57:16" pos:end="57:20">iovec</name></name></type> <name pos:start="57:22" pos:end="57:24">iov</name></decl>;</decl_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:33"><expr pos:start="59:9" pos:end="59:32"><name pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:11">iov</name><operator pos:start="59:12" pos:end="59:12">.</operator><name pos:start="59:13" pos:end="59:20">iov_base</name></name> <operator pos:start="59:22" pos:end="59:22">=</operator> <operator pos:start="59:24" pos:end="59:24">&amp;</operator><name pos:start="59:25" pos:end="59:32"><name pos:start="59:25" pos:end="59:25">s</name><operator pos:start="59:26" pos:end="59:27">-&gt;</operator><name pos:start="59:28" pos:end="59:32">inode</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:39"><expr pos:start="61:9" pos:end="61:38"><name pos:start="61:9" pos:end="61:19"><name pos:start="61:9" pos:end="61:11">iov</name><operator pos:start="61:12" pos:end="61:12">.</operator><name pos:start="61:13" pos:end="61:19">iov_len</name></name> <operator pos:start="61:21" pos:end="61:21">=</operator> <sizeof pos:start="61:23" pos:end="61:38">sizeof<argument_list pos:start="61:29" pos:end="61:38">(<argument pos:start="61:30" pos:end="61:37"><expr pos:start="61:30" pos:end="61:37"><name pos:start="61:30" pos:end="61:37"><name pos:start="61:30" pos:end="61:30">s</name><operator pos:start="61:31" pos:end="61:32">-&gt;</operator><name pos:start="61:33" pos:end="61:37">inode</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:71"><expr pos:start="63:9" pos:end="63:70"><call pos:start="63:9" pos:end="63:70"><name pos:start="63:9" pos:end="63:23">add_aio_request</name><argument_list pos:start="63:24" pos:end="63:70">(<argument pos:start="63:25" pos:end="63:25"><expr pos:start="63:25" pos:end="63:25"><name pos:start="63:25" pos:end="63:25">s</name></expr></argument>, <argument pos:start="63:28" pos:end="63:34"><expr pos:start="63:28" pos:end="63:34"><name pos:start="63:28" pos:end="63:34">aio_req</name></expr></argument>, <argument pos:start="63:37" pos:end="63:40"><expr pos:start="63:37" pos:end="63:40"><operator pos:start="63:37" pos:end="63:37">&amp;</operator><name pos:start="63:38" pos:end="63:40">iov</name></expr></argument>, <argument pos:start="63:43" pos:end="63:43"><expr pos:start="63:43" pos:end="63:43"><literal type="number" pos:start="63:43" pos:end="63:43">1</literal></expr></argument>, <argument pos:start="63:46" pos:end="63:50"><expr pos:start="63:46" pos:end="63:50"><name pos:start="63:46" pos:end="63:50">false</name></expr></argument>, <argument pos:start="63:53" pos:end="63:69"><expr pos:start="63:53" pos:end="63:69"><name pos:start="63:53" pos:end="63:69">AIOCB_WRITE_UDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
