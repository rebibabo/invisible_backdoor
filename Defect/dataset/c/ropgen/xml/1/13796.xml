<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13796.c" pos:tabs="8"><function pos:start="1:1" pos:end="305:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">vfio_initfn</name><parameter_list pos:start="1:23" pos:end="1:39">(<parameter pos:start="1:24" pos:end="1:38"><decl pos:start="1:24" pos:end="1:38"><type pos:start="1:24" pos:end="1:34"><name pos:start="1:24" pos:end="1:32">PCIDevice</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:38">pdev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="305:1">{<block_content pos:start="5:5" pos:end="303:15">

    <decl_stmt pos:start="5:5" pos:end="5:65"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">VFIODevice</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:21">pvdev</name></decl>, <decl pos:start="5:24" pos:end="5:64"><type ref="prev" pos:start="5:5" pos:end="5:16"><modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:28">vdev</name> <init pos:start="5:30" pos:end="5:64">= <expr pos:start="5:32" pos:end="5:64"><call pos:start="5:32" pos:end="5:64"><name pos:start="5:32" pos:end="5:40">DO_UPCAST</name><argument_list pos:start="5:41" pos:end="5:64">(<argument pos:start="5:42" pos:end="5:51"><expr pos:start="5:42" pos:end="5:51"><name pos:start="5:42" pos:end="5:51">VFIODevice</name></expr></argument>, <argument pos:start="5:54" pos:end="5:57"><expr pos:start="5:54" pos:end="5:57"><name pos:start="5:54" pos:end="5:57">pdev</name></expr></argument>, <argument pos:start="5:60" pos:end="5:63"><expr pos:start="5:60" pos:end="5:63"><name pos:start="5:60" pos:end="5:63">pdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">VFIOGroup</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:20">group</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:65"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:23"><name pos:start="9:10" pos:end="9:13">path</name><index pos:start="9:14" pos:end="9:23">[<expr pos:start="9:15" pos:end="9:22"><name pos:start="9:15" pos:end="9:22">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="9:26" pos:end="9:51"><type ref="prev" pos:start="9:5" pos:end="9:8"/><name pos:start="9:26" pos:end="9:51"><name pos:start="9:26" pos:end="9:41">iommu_group_path</name><index pos:start="9:42" pos:end="9:51">[<expr pos:start="9:43" pos:end="9:50"><name pos:start="9:43" pos:end="9:50">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="9:54" pos:end="9:64"><type ref="prev" pos:start="9:5" pos:end="9:8"><modifier pos:start="9:54" pos:end="9:54">*</modifier></type><name pos:start="9:55" pos:end="9:64">group_name</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">ssize_t</name></type> <name pos:start="11:13" pos:end="11:15">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:15">stat</name></name></type> <name pos:start="13:17" pos:end="13:18">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">groupid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:43">/* Check that the host device exists */</comment>

    <expr_stmt pos:start="23:5" pos:end="29:34"><expr pos:start="23:5" pos:end="29:33"><call pos:start="23:5" pos:end="29:33"><name pos:start="23:5" pos:end="23:12">snprintf</name><argument_list pos:start="23:13" pos:end="29:33">(<argument pos:start="23:14" pos:end="23:17"><expr pos:start="23:14" pos:end="23:17"><name pos:start="23:14" pos:end="23:17">path</name></expr></argument>, <argument pos:start="23:20" pos:end="23:31"><expr pos:start="23:20" pos:end="23:31"><sizeof pos:start="23:20" pos:end="23:31">sizeof<argument_list pos:start="23:26" pos:end="23:31">(<argument pos:start="23:27" pos:end="23:30"><expr pos:start="23:27" pos:end="23:30"><name pos:start="23:27" pos:end="23:30">path</name></expr></argument>)</argument_list></sizeof></expr></argument>,

             <argument pos:start="25:14" pos:end="25:56"><expr pos:start="25:14" pos:end="25:56"><literal type="string" pos:start="25:14" pos:end="25:56">"/sys/bus/pci/devices/%04x:%02x:%02x.%01x/"</literal></expr></argument>,

             <argument pos:start="27:14" pos:end="27:30"><expr pos:start="27:14" pos:end="27:30"><name pos:start="27:14" pos:end="27:30"><name pos:start="27:14" pos:end="27:17">vdev</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:23">host</name><operator pos:start="27:24" pos:end="27:24">.</operator><name pos:start="27:25" pos:end="27:30">domain</name></name></expr></argument>, <argument pos:start="27:33" pos:end="27:46"><expr pos:start="27:33" pos:end="27:46"><name pos:start="27:33" pos:end="27:46"><name pos:start="27:33" pos:end="27:36">vdev</name><operator pos:start="27:37" pos:end="27:38">-&gt;</operator><name pos:start="27:39" pos:end="27:42">host</name><operator pos:start="27:43" pos:end="27:43">.</operator><name pos:start="27:44" pos:end="27:46">bus</name></name></expr></argument>, <argument pos:start="27:49" pos:end="27:63"><expr pos:start="27:49" pos:end="27:63"><name pos:start="27:49" pos:end="27:63"><name pos:start="27:49" pos:end="27:52">vdev</name><operator pos:start="27:53" pos:end="27:54">-&gt;</operator><name pos:start="27:55" pos:end="27:58">host</name><operator pos:start="27:59" pos:end="27:59">.</operator><name pos:start="27:60" pos:end="27:63">slot</name></name></expr></argument>,

             <argument pos:start="29:14" pos:end="29:32"><expr pos:start="29:14" pos:end="29:32"><name pos:start="29:14" pos:end="29:32"><name pos:start="29:14" pos:end="29:17">vdev</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:23">host</name><operator pos:start="29:24" pos:end="29:24">.</operator><name pos:start="29:25" pos:end="29:32">function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:28">(<expr pos:start="31:9" pos:end="31:27"><call pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:12">stat</name><argument_list pos:start="31:13" pos:end="31:23">(<argument pos:start="31:14" pos:end="31:17"><expr pos:start="31:14" pos:end="31:17"><name pos:start="31:14" pos:end="31:17">path</name></expr></argument>, <argument pos:start="31:20" pos:end="31:22"><expr pos:start="31:20" pos:end="31:22"><operator pos:start="31:20" pos:end="31:20">&amp;</operator><name pos:start="31:21" pos:end="31:22">st</name></expr></argument>)</argument_list></call> <operator pos:start="31:25" pos:end="31:25">&lt;</operator> <literal type="number" pos:start="31:27" pos:end="31:27">0</literal></expr>)</condition> <block pos:start="31:30" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:22">

        <expr_stmt pos:start="33:9" pos:end="33:67"><expr pos:start="33:9" pos:end="33:66"><call pos:start="33:9" pos:end="33:66"><name pos:start="33:9" pos:end="33:20">error_report</name><argument_list pos:start="33:21" pos:end="33:66">(<argument pos:start="33:22" pos:end="33:59"><expr pos:start="33:22" pos:end="33:59"><literal type="string" pos:start="33:22" pos:end="33:59">"vfio: error: no such host device: %s"</literal></expr></argument>, <argument pos:start="33:62" pos:end="33:65"><expr pos:start="33:62" pos:end="33:65"><name pos:start="33:62" pos:end="33:65">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:22">return <expr pos:start="35:16" pos:end="35:21"><operator pos:start="35:16" pos:end="35:16">-</operator><name pos:start="35:17" pos:end="35:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:66"><expr pos:start="41:5" pos:end="41:65"><call pos:start="41:5" pos:end="41:65"><name pos:start="41:5" pos:end="41:11">strncat</name><argument_list pos:start="41:12" pos:end="41:65">(<argument pos:start="41:13" pos:end="41:16"><expr pos:start="41:13" pos:end="41:16"><name pos:start="41:13" pos:end="41:16">path</name></expr></argument>, <argument pos:start="41:19" pos:end="41:31"><expr pos:start="41:19" pos:end="41:31"><literal type="string" pos:start="41:19" pos:end="41:31">"iommu_group"</literal></expr></argument>, <argument pos:start="41:34" pos:end="41:64"><expr pos:start="41:34" pos:end="41:64"><sizeof pos:start="41:34" pos:end="41:45">sizeof<argument_list pos:start="41:40" pos:end="41:45">(<argument pos:start="41:41" pos:end="41:44"><expr pos:start="41:41" pos:end="41:44"><name pos:start="41:41" pos:end="41:44">path</name></expr></argument>)</argument_list></sizeof> <operator pos:start="41:47" pos:end="41:47">-</operator> <call pos:start="41:49" pos:end="41:60"><name pos:start="41:49" pos:end="41:54">strlen</name><argument_list pos:start="41:55" pos:end="41:60">(<argument pos:start="41:56" pos:end="41:59"><expr pos:start="41:56" pos:end="41:59"><name pos:start="41:56" pos:end="41:59">path</name></expr></argument>)</argument_list></call> <operator pos:start="41:62" pos:end="41:62">-</operator> <literal type="number" pos:start="41:64" pos:end="41:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:53"><expr pos:start="45:5" pos:end="45:52"><name pos:start="45:5" pos:end="45:7">len</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:52"><name pos:start="45:11" pos:end="45:18">readlink</name><argument_list pos:start="45:19" pos:end="45:52">(<argument pos:start="45:20" pos:end="45:23"><expr pos:start="45:20" pos:end="45:23"><name pos:start="45:20" pos:end="45:23">path</name></expr></argument>, <argument pos:start="45:26" pos:end="45:41"><expr pos:start="45:26" pos:end="45:41"><name pos:start="45:26" pos:end="45:41">iommu_group_path</name></expr></argument>, <argument pos:start="45:44" pos:end="45:51"><expr pos:start="45:44" pos:end="45:51"><name pos:start="45:44" pos:end="45:51">PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:17">(<expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:11">len</name> <operator pos:start="47:13" pos:end="47:14">&lt;=</operator> <literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>)</condition> <block pos:start="47:19" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:22">

        <expr_stmt pos:start="49:9" pos:end="49:62"><expr pos:start="49:9" pos:end="49:61"><call pos:start="49:9" pos:end="49:61"><name pos:start="49:9" pos:end="49:20">error_report</name><argument_list pos:start="49:21" pos:end="49:61">(<argument pos:start="49:22" pos:end="49:60"><expr pos:start="49:22" pos:end="49:60"><literal type="string" pos:start="49:22" pos:end="49:60">"vfio: error no iommu_group for device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:22">return <expr pos:start="51:16" pos:end="51:21"><operator pos:start="51:16" pos:end="51:16">-</operator><name pos:start="51:17" pos:end="51:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:30"><expr pos:start="57:5" pos:end="57:29"><name pos:start="57:5" pos:end="57:25"><name pos:start="57:5" pos:end="57:20">iommu_group_path</name><index pos:start="57:21" pos:end="57:25">[<expr pos:start="57:22" pos:end="57:24"><name pos:start="57:22" pos:end="57:24">len</name></expr>]</index></name> <operator pos:start="57:27" pos:end="57:27">=</operator> <literal type="number" pos:start="57:29" pos:end="57:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:44"><expr pos:start="59:5" pos:end="59:43"><name pos:start="59:5" pos:end="59:14">group_name</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <call pos:start="59:18" pos:end="59:43"><name pos:start="59:18" pos:end="59:25">basename</name><argument_list pos:start="59:26" pos:end="59:43">(<argument pos:start="59:27" pos:end="59:42"><expr pos:start="59:27" pos:end="59:42"><name pos:start="59:27" pos:end="59:42">iommu_group_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:48">(<expr pos:start="63:9" pos:end="63:47"><call pos:start="63:9" pos:end="63:42"><name pos:start="63:9" pos:end="63:14">sscanf</name><argument_list pos:start="63:15" pos:end="63:42">(<argument pos:start="63:16" pos:end="63:25"><expr pos:start="63:16" pos:end="63:25"><name pos:start="63:16" pos:end="63:25">group_name</name></expr></argument>, <argument pos:start="63:28" pos:end="63:31"><expr pos:start="63:28" pos:end="63:31"><literal type="string" pos:start="63:28" pos:end="63:31">"%d"</literal></expr></argument>, <argument pos:start="63:34" pos:end="63:41"><expr pos:start="63:34" pos:end="63:41"><operator pos:start="63:34" pos:end="63:34">&amp;</operator><name pos:start="63:35" pos:end="63:41">groupid</name></expr></argument>)</argument_list></call> <operator pos:start="63:44" pos:end="63:45">!=</operator> <literal type="number" pos:start="63:47" pos:end="63:47">1</literal></expr>)</condition> <block pos:start="63:50" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:22">

        <expr_stmt pos:start="65:9" pos:end="65:57"><expr pos:start="65:9" pos:end="65:56"><call pos:start="65:9" pos:end="65:56"><name pos:start="65:9" pos:end="65:20">error_report</name><argument_list pos:start="65:21" pos:end="65:56">(<argument pos:start="65:22" pos:end="65:49"><expr pos:start="65:22" pos:end="65:49"><literal type="string" pos:start="65:22" pos:end="65:49">"vfio: error reading %s: %m"</literal></expr></argument>, <argument pos:start="65:52" pos:end="65:55"><expr pos:start="65:52" pos:end="65:55"><name pos:start="65:52" pos:end="65:55">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:22">return <expr pos:start="67:16" pos:end="67:21"><operator pos:start="67:16" pos:end="67:16">-</operator><name pos:start="67:17" pos:end="67:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="75:75"><expr pos:start="73:5" pos:end="75:74"><call pos:start="73:5" pos:end="75:74"><name pos:start="73:5" pos:end="73:11">DPRINTF</name><argument_list pos:start="73:12" pos:end="75:74">(<argument pos:start="73:13" pos:end="73:46"><expr pos:start="73:13" pos:end="73:46"><literal type="string" pos:start="73:13" pos:end="73:46">"%s(%04x:%02x:%02x.%x) group %d\n"</literal></expr></argument>, <argument pos:start="73:49" pos:end="73:56"><expr pos:start="73:49" pos:end="73:56"><name pos:start="73:49" pos:end="73:56">__func__</name></expr></argument>, <argument pos:start="73:59" pos:end="73:75"><expr pos:start="73:59" pos:end="73:75"><name pos:start="73:59" pos:end="73:75"><name pos:start="73:59" pos:end="73:62">vdev</name><operator pos:start="73:63" pos:end="73:64">-&gt;</operator><name pos:start="73:65" pos:end="73:68">host</name><operator pos:start="73:69" pos:end="73:69">.</operator><name pos:start="73:70" pos:end="73:75">domain</name></name></expr></argument>,

            <argument pos:start="75:13" pos:end="75:26"><expr pos:start="75:13" pos:end="75:26"><name pos:start="75:13" pos:end="75:26"><name pos:start="75:13" pos:end="75:16">vdev</name><operator pos:start="75:17" pos:end="75:18">-&gt;</operator><name pos:start="75:19" pos:end="75:22">host</name><operator pos:start="75:23" pos:end="75:23">.</operator><name pos:start="75:24" pos:end="75:26">bus</name></name></expr></argument>, <argument pos:start="75:29" pos:end="75:43"><expr pos:start="75:29" pos:end="75:43"><name pos:start="75:29" pos:end="75:43"><name pos:start="75:29" pos:end="75:32">vdev</name><operator pos:start="75:33" pos:end="75:34">-&gt;</operator><name pos:start="75:35" pos:end="75:38">host</name><operator pos:start="75:39" pos:end="75:39">.</operator><name pos:start="75:40" pos:end="75:43">slot</name></name></expr></argument>, <argument pos:start="75:46" pos:end="75:64"><expr pos:start="75:46" pos:end="75:64"><name pos:start="75:46" pos:end="75:64"><name pos:start="75:46" pos:end="75:49">vdev</name><operator pos:start="75:50" pos:end="75:51">-&gt;</operator><name pos:start="75:52" pos:end="75:55">host</name><operator pos:start="75:56" pos:end="75:56">.</operator><name pos:start="75:57" pos:end="75:64">function</name></name></expr></argument>, <argument pos:start="75:67" pos:end="75:73"><expr pos:start="75:67" pos:end="75:73"><name pos:start="75:67" pos:end="75:73">groupid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:36"><expr pos:start="79:5" pos:end="79:35"><name pos:start="79:5" pos:end="79:9">group</name> <operator pos:start="79:11" pos:end="79:11">=</operator> <call pos:start="79:13" pos:end="79:35"><name pos:start="79:13" pos:end="79:26">vfio_get_group</name><argument_list pos:start="79:27" pos:end="79:35">(<argument pos:start="79:28" pos:end="79:34"><expr pos:start="79:28" pos:end="79:34"><name pos:start="79:28" pos:end="79:34">groupid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:15">(<expr pos:start="81:9" pos:end="81:14"><operator pos:start="81:9" pos:end="81:9">!</operator><name pos:start="81:10" pos:end="81:14">group</name></expr>)</condition> <block pos:start="81:17" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:23">

        <expr_stmt pos:start="83:9" pos:end="83:62"><expr pos:start="83:9" pos:end="83:61"><call pos:start="83:9" pos:end="83:61"><name pos:start="83:9" pos:end="83:20">error_report</name><argument_list pos:start="83:21" pos:end="83:61">(<argument pos:start="83:22" pos:end="83:51"><expr pos:start="83:22" pos:end="83:51"><literal type="string" pos:start="83:22" pos:end="83:51">"vfio: failed to get group %d"</literal></expr></argument>, <argument pos:start="83:54" pos:end="83:60"><expr pos:start="83:54" pos:end="83:60"><name pos:start="83:54" pos:end="83:60">groupid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:23">return <expr pos:start="85:16" pos:end="85:22"><operator pos:start="85:16" pos:end="85:16">-</operator><name pos:start="85:17" pos:end="85:22">ENOENT</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="95:33"><expr pos:start="91:5" pos:end="95:32"><call pos:start="91:5" pos:end="95:32"><name pos:start="91:5" pos:end="91:12">snprintf</name><argument_list pos:start="91:13" pos:end="95:32">(<argument pos:start="91:14" pos:end="91:17"><expr pos:start="91:14" pos:end="91:17"><name pos:start="91:14" pos:end="91:17">path</name></expr></argument>, <argument pos:start="91:20" pos:end="91:31"><expr pos:start="91:20" pos:end="91:31"><sizeof pos:start="91:20" pos:end="91:31">sizeof<argument_list pos:start="91:26" pos:end="91:31">(<argument pos:start="91:27" pos:end="91:30"><expr pos:start="91:27" pos:end="91:30"><name pos:start="91:27" pos:end="91:30">path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="91:34" pos:end="91:54"><expr pos:start="91:34" pos:end="91:54"><literal type="string" pos:start="91:34" pos:end="91:54">"%04x:%02x:%02x.%01x"</literal></expr></argument>,

            <argument pos:start="93:13" pos:end="93:29"><expr pos:start="93:13" pos:end="93:29"><name pos:start="93:13" pos:end="93:29"><name pos:start="93:13" pos:end="93:16">vdev</name><operator pos:start="93:17" pos:end="93:18">-&gt;</operator><name pos:start="93:19" pos:end="93:22">host</name><operator pos:start="93:23" pos:end="93:23">.</operator><name pos:start="93:24" pos:end="93:29">domain</name></name></expr></argument>, <argument pos:start="93:32" pos:end="93:45"><expr pos:start="93:32" pos:end="93:45"><name pos:start="93:32" pos:end="93:45"><name pos:start="93:32" pos:end="93:35">vdev</name><operator pos:start="93:36" pos:end="93:37">-&gt;</operator><name pos:start="93:38" pos:end="93:41">host</name><operator pos:start="93:42" pos:end="93:42">.</operator><name pos:start="93:43" pos:end="93:45">bus</name></name></expr></argument>, <argument pos:start="93:48" pos:end="93:62"><expr pos:start="93:48" pos:end="93:62"><name pos:start="93:48" pos:end="93:62"><name pos:start="93:48" pos:end="93:51">vdev</name><operator pos:start="93:52" pos:end="93:53">-&gt;</operator><name pos:start="93:54" pos:end="93:57">host</name><operator pos:start="93:58" pos:end="93:58">.</operator><name pos:start="93:59" pos:end="93:62">slot</name></name></expr></argument>,

            <argument pos:start="95:13" pos:end="95:31"><expr pos:start="95:13" pos:end="95:31"><name pos:start="95:13" pos:end="95:31"><name pos:start="95:13" pos:end="95:16">vdev</name><operator pos:start="95:17" pos:end="95:18">-&gt;</operator><name pos:start="95:19" pos:end="95:22">host</name><operator pos:start="95:23" pos:end="95:23">.</operator><name pos:start="95:24" pos:end="95:31">function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="99:5" pos:end="99:51"><name pos:start="99:5" pos:end="99:17">QLIST_FOREACH</name><argument_list pos:start="99:18" pos:end="99:51">(<argument pos:start="99:19" pos:end="99:23">pvdev</argument>, <argument pos:start="99:26" pos:end="99:44">&amp;group-&gt;device_list</argument>, <argument pos:start="99:47" pos:end="99:50">next</argument>)</argument_list></macro> <block pos:start="99:53" pos:end="119:5">{<block_content pos:start="101:9" pos:end="117:9">

        <if_stmt pos:start="101:9" pos:end="117:9"><if pos:start="101:9" pos:end="117:9">if <condition pos:start="101:12" pos:end="107:56">(<expr pos:start="101:13" pos:end="107:55"><name pos:start="101:13" pos:end="101:30"><name pos:start="101:13" pos:end="101:17">pvdev</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:23">host</name><operator pos:start="101:24" pos:end="101:24">.</operator><name pos:start="101:25" pos:end="101:30">domain</name></name> <operator pos:start="101:32" pos:end="101:33">==</operator> <name pos:start="101:35" pos:end="101:51"><name pos:start="101:35" pos:end="101:38">vdev</name><operator pos:start="101:39" pos:end="101:40">-&gt;</operator><name pos:start="101:41" pos:end="101:44">host</name><operator pos:start="101:45" pos:end="101:45">.</operator><name pos:start="101:46" pos:end="101:51">domain</name></name> <operator pos:start="101:53" pos:end="101:54">&amp;&amp;</operator>

            <name pos:start="103:13" pos:end="103:27"><name pos:start="103:13" pos:end="103:17">pvdev</name><operator pos:start="103:18" pos:end="103:19">-&gt;</operator><name pos:start="103:20" pos:end="103:23">host</name><operator pos:start="103:24" pos:end="103:24">.</operator><name pos:start="103:25" pos:end="103:27">bus</name></name> <operator pos:start="103:29" pos:end="103:30">==</operator> <name pos:start="103:32" pos:end="103:45"><name pos:start="103:32" pos:end="103:35">vdev</name><operator pos:start="103:36" pos:end="103:37">-&gt;</operator><name pos:start="103:38" pos:end="103:41">host</name><operator pos:start="103:42" pos:end="103:42">.</operator><name pos:start="103:43" pos:end="103:45">bus</name></name> <operator pos:start="103:47" pos:end="103:48">&amp;&amp;</operator>

            <name pos:start="105:13" pos:end="105:28"><name pos:start="105:13" pos:end="105:17">pvdev</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:23">host</name><operator pos:start="105:24" pos:end="105:24">.</operator><name pos:start="105:25" pos:end="105:28">slot</name></name> <operator pos:start="105:30" pos:end="105:31">==</operator> <name pos:start="105:33" pos:end="105:47"><name pos:start="105:33" pos:end="105:36">vdev</name><operator pos:start="105:37" pos:end="105:38">-&gt;</operator><name pos:start="105:39" pos:end="105:42">host</name><operator pos:start="105:43" pos:end="105:43">.</operator><name pos:start="105:44" pos:end="105:47">slot</name></name> <operator pos:start="105:49" pos:end="105:50">&amp;&amp;</operator>

            <name pos:start="107:13" pos:end="107:32"><name pos:start="107:13" pos:end="107:17">pvdev</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:23">host</name><operator pos:start="107:24" pos:end="107:24">.</operator><name pos:start="107:25" pos:end="107:32">function</name></name> <operator pos:start="107:34" pos:end="107:35">==</operator> <name pos:start="107:37" pos:end="107:55"><name pos:start="107:37" pos:end="107:40">vdev</name><operator pos:start="107:41" pos:end="107:42">-&gt;</operator><name pos:start="107:43" pos:end="107:46">host</name><operator pos:start="107:47" pos:end="107:47">.</operator><name pos:start="107:48" pos:end="107:55">function</name></name></expr>)</condition> <block pos:start="107:58" pos:end="117:9">{<block_content pos:start="111:13" pos:end="115:26">



            <expr_stmt pos:start="111:13" pos:end="111:77"><expr pos:start="111:13" pos:end="111:76"><call pos:start="111:13" pos:end="111:76"><name pos:start="111:13" pos:end="111:24">error_report</name><argument_list pos:start="111:25" pos:end="111:76">(<argument pos:start="111:26" pos:end="111:69"><expr pos:start="111:26" pos:end="111:69"><literal type="string" pos:start="111:26" pos:end="111:69">"vfio: error: device %s is already attached"</literal></expr></argument>, <argument pos:start="111:72" pos:end="111:75"><expr pos:start="111:72" pos:end="111:75"><name pos:start="111:72" pos:end="111:75">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:34"><expr pos:start="113:13" pos:end="113:33"><call pos:start="113:13" pos:end="113:33"><name pos:start="113:13" pos:end="113:26">vfio_put_group</name><argument_list pos:start="113:27" pos:end="113:33">(<argument pos:start="113:28" pos:end="113:32"><expr pos:start="113:28" pos:end="113:32"><name pos:start="113:28" pos:end="113:32">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="115:13" pos:end="115:26">return <expr pos:start="115:20" pos:end="115:25"><operator pos:start="115:20" pos:end="115:20">-</operator><name pos:start="115:21" pos:end="115:25">EBUSY</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <expr_stmt pos:start="123:5" pos:end="123:45"><expr pos:start="123:5" pos:end="123:44"><name pos:start="123:5" pos:end="123:7">ret</name> <operator pos:start="123:9" pos:end="123:9">=</operator> <call pos:start="123:11" pos:end="123:44"><name pos:start="123:11" pos:end="123:25">vfio_get_device</name><argument_list pos:start="123:26" pos:end="123:44">(<argument pos:start="123:27" pos:end="123:31"><expr pos:start="123:27" pos:end="123:31"><name pos:start="123:27" pos:end="123:31">group</name></expr></argument>, <argument pos:start="123:34" pos:end="123:37"><expr pos:start="123:34" pos:end="123:37"><name pos:start="123:34" pos:end="123:37">path</name></expr></argument>, <argument pos:start="123:40" pos:end="123:43"><expr pos:start="123:40" pos:end="123:43"><name pos:start="123:40" pos:end="123:43">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="133:5"><if pos:start="125:5" pos:end="133:5">if <condition pos:start="125:8" pos:end="125:12">(<expr pos:start="125:9" pos:end="125:11"><name pos:start="125:9" pos:end="125:11">ret</name></expr>)</condition> <block pos:start="125:14" pos:end="133:5">{<block_content pos:start="127:9" pos:end="131:19">

        <expr_stmt pos:start="127:9" pos:end="127:60"><expr pos:start="127:9" pos:end="127:59"><call pos:start="127:9" pos:end="127:59"><name pos:start="127:9" pos:end="127:20">error_report</name><argument_list pos:start="127:21" pos:end="127:59">(<argument pos:start="127:22" pos:end="127:52"><expr pos:start="127:22" pos:end="127:52"><literal type="string" pos:start="127:22" pos:end="127:52">"vfio: failed to get device %s"</literal></expr></argument>, <argument pos:start="127:55" pos:end="127:58"><expr pos:start="127:55" pos:end="127:58"><name pos:start="127:55" pos:end="127:58">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:30"><expr pos:start="129:9" pos:end="129:29"><call pos:start="129:9" pos:end="129:29"><name pos:start="129:9" pos:end="129:22">vfio_put_group</name><argument_list pos:start="129:23" pos:end="129:29">(<argument pos:start="129:24" pos:end="129:28"><expr pos:start="129:24" pos:end="129:28"><name pos:start="129:24" pos:end="129:28">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="131:9" pos:end="131:19">return <expr pos:start="131:16" pos:end="131:18"><name pos:start="131:16" pos:end="131:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:36">/* Get a copy of config space */</comment>

    <expr_stmt pos:start="139:5" pos:end="143:37"><expr pos:start="139:5" pos:end="143:36"><name pos:start="139:5" pos:end="139:7">ret</name> <operator pos:start="139:9" pos:end="139:9">=</operator> <call pos:start="139:11" pos:end="143:36"><name pos:start="139:11" pos:end="139:15">pread</name><argument_list pos:start="139:16" pos:end="143:36">(<argument pos:start="139:17" pos:end="139:24"><expr pos:start="139:17" pos:end="139:24"><name pos:start="139:17" pos:end="139:24"><name pos:start="139:17" pos:end="139:20">vdev</name><operator pos:start="139:21" pos:end="139:22">-&gt;</operator><name pos:start="139:23" pos:end="139:24">fd</name></name></expr></argument>, <argument pos:start="139:27" pos:end="139:43"><expr pos:start="139:27" pos:end="139:43"><name pos:start="139:27" pos:end="139:43"><name pos:start="139:27" pos:end="139:30">vdev</name><operator pos:start="139:31" pos:end="139:32">-&gt;</operator><name pos:start="139:33" pos:end="139:36">pdev</name><operator pos:start="139:37" pos:end="139:37">.</operator><name pos:start="139:38" pos:end="139:43">config</name></name></expr></argument>,

                <argument pos:start="141:17" pos:end="141:68"><expr pos:start="141:17" pos:end="141:68"><call pos:start="141:17" pos:end="141:68"><name pos:start="141:17" pos:end="141:19">MIN</name><argument_list pos:start="141:20" pos:end="141:68">(<argument pos:start="141:21" pos:end="141:48"><expr pos:start="141:21" pos:end="141:48"><call pos:start="141:21" pos:end="141:48"><name pos:start="141:21" pos:end="141:35">pci_config_size</name><argument_list pos:start="141:36" pos:end="141:48">(<argument pos:start="141:37" pos:end="141:47"><expr pos:start="141:37" pos:end="141:47"><operator pos:start="141:37" pos:end="141:37">&amp;</operator><name pos:start="141:38" pos:end="141:47"><name pos:start="141:38" pos:end="141:41">vdev</name><operator pos:start="141:42" pos:end="141:43">-&gt;</operator><name pos:start="141:44" pos:end="141:47">pdev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="141:51" pos:end="141:67"><expr pos:start="141:51" pos:end="141:67"><name pos:start="141:51" pos:end="141:67"><name pos:start="141:51" pos:end="141:54">vdev</name><operator pos:start="141:55" pos:end="141:56">-&gt;</operator><name pos:start="141:57" pos:end="141:67">config_size</name></name></expr></argument>)</argument_list></call></expr></argument>,

                <argument pos:start="143:17" pos:end="143:35"><expr pos:start="143:17" pos:end="143:35"><name pos:start="143:17" pos:end="143:35"><name pos:start="143:17" pos:end="143:20">vdev</name><operator pos:start="143:21" pos:end="143:22">-&gt;</operator><name pos:start="143:23" pos:end="143:35">config_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="153:5"><if pos:start="145:5" pos:end="153:5">if <condition pos:start="145:8" pos:end="145:72">(<expr pos:start="145:9" pos:end="145:71"><name pos:start="145:9" pos:end="145:11">ret</name> <operator pos:start="145:13" pos:end="145:13">&lt;</operator> <operator pos:start="145:15" pos:end="145:15">(</operator><name pos:start="145:16" pos:end="145:18">int</name><operator pos:start="145:19" pos:end="145:19">)</operator><call pos:start="145:20" pos:end="145:71"><name pos:start="145:20" pos:end="145:22">MIN</name><argument_list pos:start="145:23" pos:end="145:71">(<argument pos:start="145:24" pos:end="145:51"><expr pos:start="145:24" pos:end="145:51"><call pos:start="145:24" pos:end="145:51"><name pos:start="145:24" pos:end="145:38">pci_config_size</name><argument_list pos:start="145:39" pos:end="145:51">(<argument pos:start="145:40" pos:end="145:50"><expr pos:start="145:40" pos:end="145:50"><operator pos:start="145:40" pos:end="145:40">&amp;</operator><name pos:start="145:41" pos:end="145:50"><name pos:start="145:41" pos:end="145:44">vdev</name><operator pos:start="145:45" pos:end="145:46">-&gt;</operator><name pos:start="145:47" pos:end="145:50">pdev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="145:54" pos:end="145:70"><expr pos:start="145:54" pos:end="145:70"><name pos:start="145:54" pos:end="145:70"><name pos:start="145:54" pos:end="145:57">vdev</name><operator pos:start="145:58" pos:end="145:59">-&gt;</operator><name pos:start="145:60" pos:end="145:70">config_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="145:74" pos:end="153:5">{<block_content pos:start="147:9" pos:end="151:21">

        <expr_stmt pos:start="147:9" pos:end="147:41"><expr pos:start="147:9" pos:end="147:40"><name pos:start="147:9" pos:end="147:11">ret</name> <operator pos:start="147:13" pos:end="147:13">=</operator> <ternary pos:start="147:15" pos:end="147:40"><condition pos:start="147:15" pos:end="147:23"><expr pos:start="147:15" pos:end="147:21"><name pos:start="147:15" pos:end="147:17">ret</name> <operator pos:start="147:19" pos:end="147:19">&lt;</operator> <literal type="number" pos:start="147:21" pos:end="147:21">0</literal></expr> ?</condition><then pos:start="147:25" pos:end="147:30"> <expr pos:start="147:25" pos:end="147:30"><operator pos:start="147:25" pos:end="147:25">-</operator><name pos:start="147:26" pos:end="147:30">errno</name></expr> </then><else pos:start="147:32" pos:end="147:40">: <expr pos:start="147:34" pos:end="147:40"><operator pos:start="147:34" pos:end="147:34">-</operator><name pos:start="147:35" pos:end="147:40">EFAULT</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:65"><expr pos:start="149:9" pos:end="149:64"><call pos:start="149:9" pos:end="149:64"><name pos:start="149:9" pos:end="149:20">error_report</name><argument_list pos:start="149:21" pos:end="149:64">(<argument pos:start="149:22" pos:end="149:63"><expr pos:start="149:22" pos:end="149:63"><literal type="string" pos:start="149:22" pos:end="149:63">"vfio: Failed to read device config space"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="151:9" pos:end="151:21">goto <name pos:start="151:14" pos:end="151:20">out_put</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="157:5" pos:end="157:67">/* vfio emulates a lot for us, but some bits need extra love */</comment>

    <expr_stmt pos:start="159:5" pos:end="159:62"><expr pos:start="159:5" pos:end="159:61"><name pos:start="159:5" pos:end="159:30"><name pos:start="159:5" pos:end="159:8">vdev</name><operator pos:start="159:9" pos:end="159:10">-&gt;</operator><name pos:start="159:11" pos:end="159:30">emulated_config_bits</name></name> <operator pos:start="159:32" pos:end="159:32">=</operator> <call pos:start="159:34" pos:end="159:61"><name pos:start="159:34" pos:end="159:42">g_malloc0</name><argument_list pos:start="159:43" pos:end="159:61">(<argument pos:start="159:44" pos:end="159:60"><expr pos:start="159:44" pos:end="159:60"><name pos:start="159:44" pos:end="159:60"><name pos:start="159:44" pos:end="159:47">vdev</name><operator pos:start="159:48" pos:end="159:49">-&gt;</operator><name pos:start="159:50" pos:end="159:60">config_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="163:5" pos:end="163:50">/* QEMU can choose to expose the ROM or not */</comment>

    <expr_stmt pos:start="165:5" pos:end="165:66"><expr pos:start="165:5" pos:end="165:65"><call pos:start="165:5" pos:end="165:65"><name pos:start="165:5" pos:end="165:10">memset</name><argument_list pos:start="165:11" pos:end="165:65">(<argument pos:start="165:12" pos:end="165:55"><expr pos:start="165:12" pos:end="165:55"><name pos:start="165:12" pos:end="165:37"><name pos:start="165:12" pos:end="165:15">vdev</name><operator pos:start="165:16" pos:end="165:17">-&gt;</operator><name pos:start="165:18" pos:end="165:37">emulated_config_bits</name></name> <operator pos:start="165:39" pos:end="165:39">+</operator> <name pos:start="165:41" pos:end="165:55">PCI_ROM_ADDRESS</name></expr></argument>, <argument pos:start="165:58" pos:end="165:61"><expr pos:start="165:58" pos:end="165:61"><literal type="number" pos:start="165:58" pos:end="165:61">0xff</literal></expr></argument>, <argument pos:start="165:64" pos:end="165:64"><expr pos:start="165:64" pos:end="165:64"><literal type="number" pos:start="165:64" pos:end="165:64">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="169:5" pos:end="169:79">/* QEMU can change multi-function devices to single function, or reverse */</comment>

    <expr_stmt pos:start="171:5" pos:end="173:77"><expr pos:start="171:5" pos:end="173:76"><name pos:start="171:5" pos:end="171:47"><name pos:start="171:5" pos:end="171:8">vdev</name><operator pos:start="171:9" pos:end="171:10">-&gt;</operator><name pos:start="171:11" pos:end="171:30">emulated_config_bits</name><index pos:start="171:31" pos:end="171:47">[<expr pos:start="171:32" pos:end="171:46"><name pos:start="171:32" pos:end="171:46">PCI_HEADER_TYPE</name></expr>]</index></name> <operator pos:start="171:49" pos:end="171:49">=</operator>

                                              <name pos:start="173:47" pos:end="173:76">PCI_HEADER_TYPE_MULTI_FUNCTION</name></expr>;</expr_stmt>



    <comment type="block" pos:start="177:5" pos:end="177:75">/* Restore or clear multifunction, this is always controlled by QEMU */</comment>

    <if_stmt pos:start="179:5" pos:end="187:5"><if pos:start="179:5" pos:end="183:5">if <condition pos:start="179:8" pos:end="179:60">(<expr pos:start="179:9" pos:end="179:59"><name pos:start="179:9" pos:end="179:30"><name pos:start="179:9" pos:end="179:12">vdev</name><operator pos:start="179:13" pos:end="179:14">-&gt;</operator><name pos:start="179:15" pos:end="179:18">pdev</name><operator pos:start="179:19" pos:end="179:19">.</operator><name pos:start="179:20" pos:end="179:30">cap_present</name></name> <operator pos:start="179:32" pos:end="179:32">&amp;</operator> <name pos:start="179:34" pos:end="179:59">QEMU_PCI_CAP_MULTIFUNCTION</name></expr>)</condition> <block pos:start="179:62" pos:end="183:5">{<block_content pos:start="181:9" pos:end="181:77">

        <expr_stmt pos:start="181:9" pos:end="181:77"><expr pos:start="181:9" pos:end="181:76"><name pos:start="181:9" pos:end="181:42"><name pos:start="181:9" pos:end="181:12">vdev</name><operator pos:start="181:13" pos:end="181:14">-&gt;</operator><name pos:start="181:15" pos:end="181:18">pdev</name><operator pos:start="181:19" pos:end="181:19">.</operator><name pos:start="181:20" pos:end="181:25">config</name><index pos:start="181:26" pos:end="181:42">[<expr pos:start="181:27" pos:end="181:41"><name pos:start="181:27" pos:end="181:41">PCI_HEADER_TYPE</name></expr>]</index></name> <operator pos:start="181:44" pos:end="181:45">|=</operator> <name pos:start="181:47" pos:end="181:76">PCI_HEADER_TYPE_MULTI_FUNCTION</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="183:7" pos:end="187:5">else <block pos:start="183:12" pos:end="187:5">{<block_content pos:start="185:9" pos:end="185:78">

        <expr_stmt pos:start="185:9" pos:end="185:78"><expr pos:start="185:9" pos:end="185:77"><name pos:start="185:9" pos:end="185:42"><name pos:start="185:9" pos:end="185:12">vdev</name><operator pos:start="185:13" pos:end="185:14">-&gt;</operator><name pos:start="185:15" pos:end="185:18">pdev</name><operator pos:start="185:19" pos:end="185:19">.</operator><name pos:start="185:20" pos:end="185:25">config</name><index pos:start="185:26" pos:end="185:42">[<expr pos:start="185:27" pos:end="185:41"><name pos:start="185:27" pos:end="185:41">PCI_HEADER_TYPE</name></expr>]</index></name> <operator pos:start="185:44" pos:end="185:45">&amp;=</operator> <operator pos:start="185:47" pos:end="185:47">~</operator><name pos:start="185:48" pos:end="185:77">PCI_HEADER_TYPE_MULTI_FUNCTION</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="191:5" pos:end="199:7">/*

     * Clear host resource mapping info.  If we choose not to register a

     * BAR, such as might be the case with the option ROM, we can get

     * confusing, unwritable, residual addresses from the host here.

     */</comment>

    <expr_stmt pos:start="201:5" pos:end="201:58"><expr pos:start="201:5" pos:end="201:57"><call pos:start="201:5" pos:end="201:57"><name pos:start="201:5" pos:end="201:10">memset</name><argument_list pos:start="201:11" pos:end="201:57">(<argument pos:start="201:12" pos:end="201:49"><expr pos:start="201:12" pos:end="201:49"><operator pos:start="201:12" pos:end="201:12">&amp;</operator><name pos:start="201:13" pos:end="201:49"><name pos:start="201:13" pos:end="201:16">vdev</name><operator pos:start="201:17" pos:end="201:18">-&gt;</operator><name pos:start="201:19" pos:end="201:22">pdev</name><operator pos:start="201:23" pos:end="201:23">.</operator><name pos:start="201:24" pos:end="201:29">config</name><index pos:start="201:30" pos:end="201:49">[<expr pos:start="201:31" pos:end="201:48"><name pos:start="201:31" pos:end="201:48">PCI_BASE_ADDRESS_0</name></expr>]</index></name></expr></argument>, <argument pos:start="201:52" pos:end="201:52"><expr pos:start="201:52" pos:end="201:52"><literal type="number" pos:start="201:52" pos:end="201:52">0</literal></expr></argument>, <argument pos:start="201:55" pos:end="201:56"><expr pos:start="201:55" pos:end="201:56"><literal type="number" pos:start="201:55" pos:end="201:56">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:54"><expr pos:start="203:5" pos:end="203:53"><call pos:start="203:5" pos:end="203:53"><name pos:start="203:5" pos:end="203:10">memset</name><argument_list pos:start="203:11" pos:end="203:53">(<argument pos:start="203:12" pos:end="203:46"><expr pos:start="203:12" pos:end="203:46"><operator pos:start="203:12" pos:end="203:12">&amp;</operator><name pos:start="203:13" pos:end="203:46"><name pos:start="203:13" pos:end="203:16">vdev</name><operator pos:start="203:17" pos:end="203:18">-&gt;</operator><name pos:start="203:19" pos:end="203:22">pdev</name><operator pos:start="203:23" pos:end="203:23">.</operator><name pos:start="203:24" pos:end="203:29">config</name><index pos:start="203:30" pos:end="203:46">[<expr pos:start="203:31" pos:end="203:45"><name pos:start="203:31" pos:end="203:45">PCI_ROM_ADDRESS</name></expr>]</index></name></expr></argument>, <argument pos:start="203:49" pos:end="203:49"><expr pos:start="203:49" pos:end="203:49"><literal type="number" pos:start="203:49" pos:end="203:49">0</literal></expr></argument>, <argument pos:start="203:52" pos:end="203:52"><expr pos:start="203:52" pos:end="203:52"><literal type="number" pos:start="203:52" pos:end="203:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="207:5" pos:end="207:28"><expr pos:start="207:5" pos:end="207:27"><call pos:start="207:5" pos:end="207:27"><name pos:start="207:5" pos:end="207:21">vfio_pci_size_rom</name><argument_list pos:start="207:22" pos:end="207:27">(<argument pos:start="207:23" pos:end="207:26"><expr pos:start="207:23" pos:end="207:26"><name pos:start="207:23" pos:end="207:26">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="211:5" pos:end="211:38"><expr pos:start="211:5" pos:end="211:37"><name pos:start="211:5" pos:end="211:7">ret</name> <operator pos:start="211:9" pos:end="211:9">=</operator> <call pos:start="211:11" pos:end="211:37"><name pos:start="211:11" pos:end="211:31">vfio_early_setup_msix</name><argument_list pos:start="211:32" pos:end="211:37">(<argument pos:start="211:33" pos:end="211:36"><expr pos:start="211:33" pos:end="211:36"><name pos:start="211:33" pos:end="211:36">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="213:5" pos:end="217:5"><if pos:start="213:5" pos:end="217:5">if <condition pos:start="213:8" pos:end="213:12">(<expr pos:start="213:9" pos:end="213:11"><name pos:start="213:9" pos:end="213:11">ret</name></expr>)</condition> <block pos:start="213:14" pos:end="217:5">{<block_content pos:start="215:9" pos:end="215:21">

        <goto pos:start="215:9" pos:end="215:21">goto <name pos:start="215:14" pos:end="215:20">out_put</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="221:5" pos:end="221:24"><expr pos:start="221:5" pos:end="221:23"><call pos:start="221:5" pos:end="221:23"><name pos:start="221:5" pos:end="221:17">vfio_map_bars</name><argument_list pos:start="221:18" pos:end="221:23">(<argument pos:start="221:19" pos:end="221:22"><expr pos:start="221:19" pos:end="221:22"><name pos:start="221:19" pos:end="221:22">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="225:5" pos:end="225:38"><expr pos:start="225:5" pos:end="225:37"><name pos:start="225:5" pos:end="225:7">ret</name> <operator pos:start="225:9" pos:end="225:9">=</operator> <call pos:start="225:11" pos:end="225:37"><name pos:start="225:11" pos:end="225:31">vfio_add_capabilities</name><argument_list pos:start="225:32" pos:end="225:37">(<argument pos:start="225:33" pos:end="225:36"><expr pos:start="225:33" pos:end="225:36"><name pos:start="225:33" pos:end="225:36">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="227:5" pos:end="231:5"><if pos:start="227:5" pos:end="231:5">if <condition pos:start="227:8" pos:end="227:12">(<expr pos:start="227:9" pos:end="227:11"><name pos:start="227:9" pos:end="227:11">ret</name></expr>)</condition> <block pos:start="227:14" pos:end="231:5">{<block_content pos:start="229:9" pos:end="229:26">

        <goto pos:start="229:9" pos:end="229:26">goto <name pos:start="229:14" pos:end="229:25">out_teardown</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="235:5" pos:end="235:41">/* QEMU emulates all of MSI &amp; MSIX */</comment>

    <if_stmt pos:start="237:5" pos:end="243:5"><if pos:start="237:5" pos:end="243:5">if <condition pos:start="237:8" pos:end="237:46">(<expr pos:start="237:9" pos:end="237:45"><name pos:start="237:9" pos:end="237:25"><name pos:start="237:9" pos:end="237:12">pdev</name><operator pos:start="237:13" pos:end="237:14">-&gt;</operator><name pos:start="237:15" pos:end="237:25">cap_present</name></name> <operator pos:start="237:27" pos:end="237:27">&amp;</operator> <name pos:start="237:29" pos:end="237:45">QEMU_PCI_CAP_MSIX</name></expr>)</condition> <block pos:start="237:48" pos:end="243:5">{<block_content pos:start="239:9" pos:end="241:32">

        <expr_stmt pos:start="239:9" pos:end="241:32"><expr pos:start="239:9" pos:end="241:31"><call pos:start="239:9" pos:end="241:31"><name pos:start="239:9" pos:end="239:14">memset</name><argument_list pos:start="239:15" pos:end="241:31">(<argument pos:start="239:16" pos:end="239:58"><expr pos:start="239:16" pos:end="239:58"><name pos:start="239:16" pos:end="239:41"><name pos:start="239:16" pos:end="239:19">vdev</name><operator pos:start="239:20" pos:end="239:21">-&gt;</operator><name pos:start="239:22" pos:end="239:41">emulated_config_bits</name></name> <operator pos:start="239:43" pos:end="239:43">+</operator> <name pos:start="239:45" pos:end="239:58"><name pos:start="239:45" pos:end="239:48">pdev</name><operator pos:start="239:49" pos:end="239:50">-&gt;</operator><name pos:start="239:51" pos:end="239:58">msix_cap</name></name></expr></argument>, <argument pos:start="239:61" pos:end="239:64"><expr pos:start="239:61" pos:end="239:64"><literal type="number" pos:start="239:61" pos:end="239:64">0xff</literal></expr></argument>,

               <argument pos:start="241:16" pos:end="241:30"><expr pos:start="241:16" pos:end="241:30"><name pos:start="241:16" pos:end="241:30">MSIX_CAP_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="247:5" pos:end="253:5"><if pos:start="247:5" pos:end="253:5">if <condition pos:start="247:8" pos:end="247:45">(<expr pos:start="247:9" pos:end="247:44"><name pos:start="247:9" pos:end="247:25"><name pos:start="247:9" pos:end="247:12">pdev</name><operator pos:start="247:13" pos:end="247:14">-&gt;</operator><name pos:start="247:15" pos:end="247:25">cap_present</name></name> <operator pos:start="247:27" pos:end="247:27">&amp;</operator> <name pos:start="247:29" pos:end="247:44">QEMU_PCI_CAP_MSI</name></expr>)</condition> <block pos:start="247:47" pos:end="253:5">{<block_content pos:start="249:9" pos:end="251:35">

        <expr_stmt pos:start="249:9" pos:end="251:35"><expr pos:start="249:9" pos:end="251:34"><call pos:start="249:9" pos:end="251:34"><name pos:start="249:9" pos:end="249:14">memset</name><argument_list pos:start="249:15" pos:end="251:34">(<argument pos:start="249:16" pos:end="249:57"><expr pos:start="249:16" pos:end="249:57"><name pos:start="249:16" pos:end="249:41"><name pos:start="249:16" pos:end="249:19">vdev</name><operator pos:start="249:20" pos:end="249:21">-&gt;</operator><name pos:start="249:22" pos:end="249:41">emulated_config_bits</name></name> <operator pos:start="249:43" pos:end="249:43">+</operator> <name pos:start="249:45" pos:end="249:57"><name pos:start="249:45" pos:end="249:48">pdev</name><operator pos:start="249:49" pos:end="249:50">-&gt;</operator><name pos:start="249:51" pos:end="249:57">msi_cap</name></name></expr></argument>, <argument pos:start="249:60" pos:end="249:63"><expr pos:start="249:60" pos:end="249:63"><literal type="number" pos:start="249:60" pos:end="249:63">0xff</literal></expr></argument>,

               <argument pos:start="251:16" pos:end="251:33"><expr pos:start="251:16" pos:end="251:33"><name pos:start="251:16" pos:end="251:33"><name pos:start="251:16" pos:end="251:19">vdev</name><operator pos:start="251:20" pos:end="251:21">-&gt;</operator><name pos:start="251:22" pos:end="251:33">msi_cap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="257:5" pos:end="273:5"><if pos:start="257:5" pos:end="273:5">if <condition pos:start="257:8" pos:end="257:64">(<expr pos:start="257:9" pos:end="257:63"><call pos:start="257:9" pos:end="257:63"><name pos:start="257:9" pos:end="257:28">vfio_pci_read_config</name><argument_list pos:start="257:29" pos:end="257:63">(<argument pos:start="257:30" pos:end="257:40"><expr pos:start="257:30" pos:end="257:40"><operator pos:start="257:30" pos:end="257:30">&amp;</operator><name pos:start="257:31" pos:end="257:40"><name pos:start="257:31" pos:end="257:34">vdev</name><operator pos:start="257:35" pos:end="257:36">-&gt;</operator><name pos:start="257:37" pos:end="257:40">pdev</name></name></expr></argument>, <argument pos:start="257:43" pos:end="257:59"><expr pos:start="257:43" pos:end="257:59"><name pos:start="257:43" pos:end="257:59">PCI_INTERRUPT_PIN</name></expr></argument>, <argument pos:start="257:62" pos:end="257:62"><expr pos:start="257:62" pos:end="257:62"><literal type="number" pos:start="257:62" pos:end="257:62">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="257:66" pos:end="273:5">{<block_content pos:start="259:9" pos:end="271:9">

        <expr_stmt pos:start="259:9" pos:end="261:79"><expr pos:start="259:9" pos:end="261:78"><name pos:start="259:9" pos:end="259:29"><name pos:start="259:9" pos:end="259:12">vdev</name><operator pos:start="259:13" pos:end="259:14">-&gt;</operator><name pos:start="259:15" pos:end="259:18">intx</name><operator pos:start="259:19" pos:end="259:19">.</operator><name pos:start="259:20" pos:end="259:29">mmap_timer</name></name> <operator pos:start="259:31" pos:end="259:31">=</operator> <call pos:start="259:33" pos:end="261:78"><name pos:start="259:33" pos:end="259:44">timer_new_ms</name><argument_list pos:start="259:45" pos:end="261:78">(<argument pos:start="259:46" pos:end="259:63"><expr pos:start="259:46" pos:end="259:63"><name pos:start="259:46" pos:end="259:63">QEMU_CLOCK_VIRTUAL</name></expr></argument>,

                                                  <argument pos:start="261:51" pos:end="261:71"><expr pos:start="261:51" pos:end="261:71"><name pos:start="261:51" pos:end="261:71">vfio_intx_mmap_enable</name></expr></argument>, <argument pos:start="261:74" pos:end="261:77"><expr pos:start="261:74" pos:end="261:77"><name pos:start="261:74" pos:end="261:77">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:75"><expr pos:start="263:9" pos:end="263:74"><call pos:start="263:9" pos:end="263:74"><name pos:start="263:9" pos:end="263:44">pci_device_set_intx_routing_notifier</name><argument_list pos:start="263:45" pos:end="263:74">(<argument pos:start="263:46" pos:end="263:56"><expr pos:start="263:46" pos:end="263:56"><operator pos:start="263:46" pos:end="263:46">&amp;</operator><name pos:start="263:47" pos:end="263:56"><name pos:start="263:47" pos:end="263:50">vdev</name><operator pos:start="263:51" pos:end="263:52">-&gt;</operator><name pos:start="263:53" pos:end="263:56">pdev</name></name></expr></argument>, <argument pos:start="263:59" pos:end="263:73"><expr pos:start="263:59" pos:end="263:73"><name pos:start="263:59" pos:end="263:73">vfio_update_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="265:37"><expr pos:start="265:9" pos:end="265:36"><name pos:start="265:9" pos:end="265:11">ret</name> <operator pos:start="265:13" pos:end="265:13">=</operator> <call pos:start="265:15" pos:end="265:36"><name pos:start="265:15" pos:end="265:30">vfio_enable_intx</name><argument_list pos:start="265:31" pos:end="265:36">(<argument pos:start="265:32" pos:end="265:35"><expr pos:start="265:32" pos:end="265:35"><name pos:start="265:32" pos:end="265:35">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="267:9" pos:end="271:9"><if pos:start="267:9" pos:end="271:9">if <condition pos:start="267:12" pos:end="267:16">(<expr pos:start="267:13" pos:end="267:15"><name pos:start="267:13" pos:end="267:15">ret</name></expr>)</condition> <block pos:start="267:18" pos:end="271:9">{<block_content pos:start="269:13" pos:end="269:30">

            <goto pos:start="269:13" pos:end="269:30">goto <name pos:start="269:18" pos:end="269:29">out_teardown</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="277:5" pos:end="277:61"><expr pos:start="277:5" pos:end="277:60"><call pos:start="277:5" pos:end="277:60"><name pos:start="277:5" pos:end="277:24">add_boot_device_path</name><argument_list pos:start="277:25" pos:end="277:60">(<argument pos:start="277:26" pos:end="277:40"><expr pos:start="277:26" pos:end="277:40"><name pos:start="277:26" pos:end="277:40"><name pos:start="277:26" pos:end="277:29">vdev</name><operator pos:start="277:30" pos:end="277:31">-&gt;</operator><name pos:start="277:32" pos:end="277:40">bootindex</name></name></expr></argument>, <argument pos:start="277:43" pos:end="277:53"><expr pos:start="277:43" pos:end="277:53"><operator pos:start="277:43" pos:end="277:43">&amp;</operator><name pos:start="277:44" pos:end="277:53"><name pos:start="277:44" pos:end="277:47">pdev</name><operator pos:start="277:48" pos:end="277:49">-&gt;</operator><name pos:start="277:50" pos:end="277:53">qdev</name></name></expr></argument>, <argument pos:start="277:56" pos:end="277:59"><expr pos:start="277:56" pos:end="277:59"><name pos:start="277:56" pos:end="277:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:37"><expr pos:start="279:5" pos:end="279:36"><call pos:start="279:5" pos:end="279:36"><name pos:start="279:5" pos:end="279:30">vfio_register_err_notifier</name><argument_list pos:start="279:31" pos:end="279:36">(<argument pos:start="279:32" pos:end="279:35"><expr pos:start="279:32" pos:end="279:35"><name pos:start="279:32" pos:end="279:35">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="283:5" pos:end="283:13">return <expr pos:start="283:12" pos:end="283:12"><literal type="number" pos:start="283:12" pos:end="283:12">0</literal></expr>;</return>



<label pos:start="287:1" pos:end="287:13"><name pos:start="287:1" pos:end="287:12">out_teardown</name>:</label>

    <expr_stmt pos:start="289:5" pos:end="289:60"><expr pos:start="289:5" pos:end="289:59"><call pos:start="289:5" pos:end="289:59"><name pos:start="289:5" pos:end="289:40">pci_device_set_intx_routing_notifier</name><argument_list pos:start="289:41" pos:end="289:59">(<argument pos:start="289:42" pos:end="289:52"><expr pos:start="289:42" pos:end="289:52"><operator pos:start="289:42" pos:end="289:42">&amp;</operator><name pos:start="289:43" pos:end="289:52"><name pos:start="289:43" pos:end="289:46">vdev</name><operator pos:start="289:47" pos:end="289:48">-&gt;</operator><name pos:start="289:49" pos:end="289:52">pdev</name></name></expr></argument>, <argument pos:start="289:55" pos:end="289:58"><expr pos:start="289:55" pos:end="289:58"><name pos:start="289:55" pos:end="289:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:28"><expr pos:start="291:5" pos:end="291:27"><call pos:start="291:5" pos:end="291:27"><name pos:start="291:5" pos:end="291:21">vfio_teardown_msi</name><argument_list pos:start="291:22" pos:end="291:27">(<argument pos:start="291:23" pos:end="291:26"><expr pos:start="291:23" pos:end="291:26"><name pos:start="291:23" pos:end="291:26">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="293:5" pos:end="293:26"><expr pos:start="293:5" pos:end="293:25"><call pos:start="293:5" pos:end="293:25"><name pos:start="293:5" pos:end="293:19">vfio_unmap_bars</name><argument_list pos:start="293:20" pos:end="293:25">(<argument pos:start="293:21" pos:end="293:24"><expr pos:start="293:21" pos:end="293:24"><name pos:start="293:21" pos:end="293:24">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="295:1" pos:end="295:8"><name pos:start="295:1" pos:end="295:7">out_put</name>:</label>

    <expr_stmt pos:start="297:5" pos:end="297:39"><expr pos:start="297:5" pos:end="297:38"><call pos:start="297:5" pos:end="297:38"><name pos:start="297:5" pos:end="297:10">g_free</name><argument_list pos:start="297:11" pos:end="297:38">(<argument pos:start="297:12" pos:end="297:37"><expr pos:start="297:12" pos:end="297:37"><name pos:start="297:12" pos:end="297:37"><name pos:start="297:12" pos:end="297:15">vdev</name><operator pos:start="297:16" pos:end="297:17">-&gt;</operator><name pos:start="297:18" pos:end="297:37">emulated_config_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:26"><expr pos:start="299:5" pos:end="299:25"><call pos:start="299:5" pos:end="299:25"><name pos:start="299:5" pos:end="299:19">vfio_put_device</name><argument_list pos:start="299:20" pos:end="299:25">(<argument pos:start="299:21" pos:end="299:24"><expr pos:start="299:21" pos:end="299:24"><name pos:start="299:21" pos:end="299:24">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:26"><expr pos:start="301:5" pos:end="301:25"><call pos:start="301:5" pos:end="301:25"><name pos:start="301:5" pos:end="301:18">vfio_put_group</name><argument_list pos:start="301:19" pos:end="301:25">(<argument pos:start="301:20" pos:end="301:24"><expr pos:start="301:20" pos:end="301:24"><name pos:start="301:20" pos:end="301:24">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="303:5" pos:end="303:15">return <expr pos:start="303:12" pos:end="303:14"><name pos:start="303:12" pos:end="303:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
