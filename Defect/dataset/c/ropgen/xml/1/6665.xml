<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6665.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:16"><name pos:start="1:1" pos:end="1:14">MigrationState</name> <modifier pos:start="1:16" pos:end="1:16">*</modifier></type><name pos:start="1:17" pos:end="1:45">unix_start_outgoing_migration</name><parameter_list pos:start="1:46" pos:end="11:54">(<parameter pos:start="1:47" pos:end="1:58"><decl pos:start="1:47" pos:end="1:58"><type pos:start="1:47" pos:end="1:58"><name pos:start="1:47" pos:end="1:53">Monitor</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">mon</name></decl></parameter>,

                                              <parameter pos:start="3:47" pos:end="3:62"><decl pos:start="3:47" pos:end="3:62"><type pos:start="3:47" pos:end="3:62"><specifier pos:start="3:47" pos:end="3:51">const</specifier> <name pos:start="3:53" pos:end="3:56">char</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:62">path</name></decl></parameter>,

					      <parameter pos:start="5:47" pos:end="5:69"><decl pos:start="5:47" pos:end="5:69"><type pos:start="5:47" pos:end="5:69"><name pos:start="5:47" pos:end="5:53">int64_t</name></type> <name pos:start="5:55" pos:end="5:69">bandwidth_limit</name></decl></parameter>,

					      <parameter pos:start="7:47" pos:end="7:56"><decl pos:start="7:47" pos:end="7:56"><type pos:start="7:47" pos:end="7:56"><name pos:start="7:47" pos:end="7:49">int</name></type> <name pos:start="7:51" pos:end="7:56">detach</name></decl></parameter>,

					      <parameter pos:start="9:47" pos:end="9:53"><decl pos:start="9:47" pos:end="9:53"><type pos:start="9:47" pos:end="9:53"><name pos:start="9:47" pos:end="9:49">int</name></type> <name pos:start="9:51" pos:end="9:53">blk</name></decl></parameter>,

					      <parameter pos:start="11:47" pos:end="11:53"><decl pos:start="11:47" pos:end="11:53"><type pos:start="11:47" pos:end="11:53"><name pos:start="11:47" pos:end="11:49">int</name></type> <name pos:start="11:51" pos:end="11:53">inc</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="129:1">{<block_content pos:start="15:5" pos:end="127:16">

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:20">FdMigrationState</name> <modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:23">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:22">sockaddr_un</name></name></type> <name pos:start="17:24" pos:end="17:27">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:30"><expr pos:start="23:5" pos:end="23:29"><name pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:8">addr</name><operator pos:start="23:9" pos:end="23:9">.</operator><name pos:start="23:10" pos:end="23:19">sun_family</name></name> <operator pos:start="23:21" pos:end="23:21">=</operator> <name pos:start="23:23" pos:end="23:29">AF_UNIX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:63"><expr pos:start="25:5" pos:end="25:62"><call pos:start="25:5" pos:end="25:62"><name pos:start="25:5" pos:end="25:12">snprintf</name><argument_list pos:start="25:13" pos:end="25:62">(<argument pos:start="25:14" pos:end="25:26"><expr pos:start="25:14" pos:end="25:26"><name pos:start="25:14" pos:end="25:26"><name pos:start="25:14" pos:end="25:17">addr</name><operator pos:start="25:18" pos:end="25:18">.</operator><name pos:start="25:19" pos:end="25:26">sun_path</name></name></expr></argument>, <argument pos:start="25:29" pos:end="25:49"><expr pos:start="25:29" pos:end="25:49"><sizeof pos:start="25:29" pos:end="25:49">sizeof<argument_list pos:start="25:35" pos:end="25:49">(<argument pos:start="25:36" pos:end="25:48"><expr pos:start="25:36" pos:end="25:48"><name pos:start="25:36" pos:end="25:48"><name pos:start="25:36" pos:end="25:39">addr</name><operator pos:start="25:40" pos:end="25:40">.</operator><name pos:start="25:41" pos:end="25:48">sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="25:52" pos:end="25:55"><expr pos:start="25:52" pos:end="25:55"><literal type="string" pos:start="25:52" pos:end="25:55">"%s"</literal></expr></argument>, <argument pos:start="25:58" pos:end="25:61"><expr pos:start="25:58" pos:end="25:61"><name pos:start="25:58" pos:end="25:61">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:33"><expr pos:start="29:5" pos:end="29:32"><name pos:start="29:5" pos:end="29:5">s</name> <operator pos:start="29:7" pos:end="29:7">=</operator> <call pos:start="29:9" pos:end="29:32"><name pos:start="29:9" pos:end="29:20">qemu_mallocz</name><argument_list pos:start="29:21" pos:end="29:32">(<argument pos:start="29:22" pos:end="29:31"><expr pos:start="29:22" pos:end="29:31"><sizeof pos:start="29:22" pos:end="29:31">sizeof<argument_list pos:start="29:28" pos:end="29:31">(<argument pos:start="29:29" pos:end="29:30"><expr pos:start="29:29" pos:end="29:30"><operator pos:start="29:29" pos:end="29:29">*</operator><name pos:start="29:30" pos:end="29:30">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:30"><expr pos:start="33:5" pos:end="33:29"><name pos:start="33:5" pos:end="33:16"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:16">get_error</name></name> <operator pos:start="33:18" pos:end="33:18">=</operator> <name pos:start="33:20" pos:end="33:29">unix_errno</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:26"><expr pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:12">write</name></name> <operator pos:start="35:14" pos:end="35:14">=</operator> <name pos:start="35:16" pos:end="35:25">unix_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:26"><expr pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:12">close</name></name> <operator pos:start="37:14" pos:end="37:14">=</operator> <name pos:start="37:16" pos:end="37:25">unix_close</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:44"><expr pos:start="39:5" pos:end="39:43"><name pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:16">mig_state</name><operator pos:start="39:17" pos:end="39:17">.</operator><name pos:start="39:18" pos:end="39:23">cancel</name></name> <operator pos:start="39:25" pos:end="39:25">=</operator> <name pos:start="39:27" pos:end="39:43">migrate_fd_cancel</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:52"><expr pos:start="41:5" pos:end="41:51"><name pos:start="41:5" pos:end="41:27"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:16">mig_state</name><operator pos:start="41:17" pos:end="41:17">.</operator><name pos:start="41:18" pos:end="41:27">get_status</name></name> <operator pos:start="41:29" pos:end="41:29">=</operator> <name pos:start="41:31" pos:end="41:51">migrate_fd_get_status</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:46"><expr pos:start="43:5" pos:end="43:45"><name pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:16">mig_state</name><operator pos:start="43:17" pos:end="43:17">.</operator><name pos:start="43:18" pos:end="43:24">release</name></name> <operator pos:start="43:26" pos:end="43:26">=</operator> <name pos:start="43:28" pos:end="43:45">migrate_fd_release</name></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:27"><expr pos:start="47:5" pos:end="47:26"><name pos:start="47:5" pos:end="47:20"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:16">mig_state</name><operator pos:start="47:17" pos:end="47:17">.</operator><name pos:start="47:18" pos:end="47:20">blk</name></name> <operator pos:start="47:22" pos:end="47:22">=</operator> <name pos:start="47:24" pos:end="47:26">blk</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:30"><expr pos:start="49:5" pos:end="49:29"><name pos:start="49:5" pos:end="49:23"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:16">mig_state</name><operator pos:start="49:17" pos:end="49:17">.</operator><name pos:start="49:18" pos:end="49:23">shared</name></name> <operator pos:start="49:25" pos:end="49:25">=</operator> <name pos:start="49:27" pos:end="49:29">inc</name></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:32"><expr pos:start="53:5" pos:end="53:31"><name pos:start="53:5" pos:end="53:12"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:12">state</name></name> <operator pos:start="53:14" pos:end="53:14">=</operator> <name pos:start="53:16" pos:end="53:31">MIG_STATE_ACTIVE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:18"><expr pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:10"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:10">mon</name></name> <operator pos:start="55:12" pos:end="55:12">=</operator> <name pos:start="55:14" pos:end="55:17">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:41"><expr pos:start="57:5" pos:end="57:40"><name pos:start="57:5" pos:end="57:22"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:22">bandwidth_limit</name></name> <operator pos:start="57:24" pos:end="57:24">=</operator> <name pos:start="57:26" pos:end="57:40">bandwidth_limit</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:44"><expr pos:start="59:5" pos:end="59:43"><name pos:start="59:5" pos:end="59:9"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:9">fd</name></name> <operator pos:start="59:11" pos:end="59:11">=</operator> <call pos:start="59:13" pos:end="59:43"><name pos:start="59:13" pos:end="59:18">socket</name><argument_list pos:start="59:19" pos:end="59:43">(<argument pos:start="59:20" pos:end="59:26"><expr pos:start="59:20" pos:end="59:26"><name pos:start="59:20" pos:end="59:26">PF_UNIX</name></expr></argument>, <argument pos:start="59:29" pos:end="59:39"><expr pos:start="59:29" pos:end="59:39"><name pos:start="59:29" pos:end="59:39">SOCK_STREAM</name></expr></argument>, <argument pos:start="59:42" pos:end="59:42"><expr pos:start="59:42" pos:end="59:42"><literal type="number" pos:start="59:42" pos:end="59:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:18">(<expr pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:13"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:13">fd</name></name> <operator pos:start="61:15" pos:end="61:15">&lt;</operator> <literal type="number" pos:start="61:17" pos:end="61:17">0</literal></expr>)</condition> <block pos:start="61:20" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:29">

        <expr_stmt pos:start="63:9" pos:end="63:41"><expr pos:start="63:9" pos:end="63:40"><call pos:start="63:9" pos:end="63:40"><name pos:start="63:9" pos:end="63:15">dprintf</name><argument_list pos:start="63:16" pos:end="63:40">(<argument pos:start="63:17" pos:end="63:39"><expr pos:start="63:17" pos:end="63:39"><literal type="string" pos:start="63:17" pos:end="63:39">"Unable to open socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="65:9" pos:end="65:29">goto <name pos:start="65:14" pos:end="65:28">err_after_alloc</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:31"><expr pos:start="71:5" pos:end="71:30"><call pos:start="71:5" pos:end="71:30"><name pos:start="71:5" pos:end="71:23">socket_set_nonblock</name><argument_list pos:start="71:24" pos:end="71:30">(<argument pos:start="71:25" pos:end="71:29"><expr pos:start="71:25" pos:end="71:29"><name pos:start="71:25" pos:end="71:29"><name pos:start="71:25" pos:end="71:25">s</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:29">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:16">(<expr pos:start="75:9" pos:end="75:15"><operator pos:start="75:9" pos:end="75:9">!</operator><name pos:start="75:10" pos:end="75:15">detach</name></expr>)</condition> <block pos:start="75:18" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:43">

        <expr_stmt pos:start="77:9" pos:end="77:43"><expr pos:start="77:9" pos:end="77:42"><call pos:start="77:9" pos:end="77:42"><name pos:start="77:9" pos:end="77:34">migrate_fd_monitor_suspend</name><argument_list pos:start="77:35" pos:end="77:42">(<argument pos:start="77:36" pos:end="77:36"><expr pos:start="77:36" pos:end="77:36"><name pos:start="77:36" pos:end="77:36">s</name></expr></argument>, <argument pos:start="77:39" pos:end="77:41"><expr pos:start="77:39" pos:end="77:41"><name pos:start="77:39" pos:end="77:41">mon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <do pos:start="83:5" pos:end="97:28">do <block pos:start="83:8" pos:end="97:5">{<block_content pos:start="85:9" pos:end="95:78">

        <expr_stmt pos:start="85:9" pos:end="85:69"><expr pos:start="85:9" pos:end="85:68"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="85:68"><name pos:start="85:15" pos:end="85:21">connect</name><argument_list pos:start="85:22" pos:end="85:68">(<argument pos:start="85:23" pos:end="85:27"><expr pos:start="85:23" pos:end="85:27"><name pos:start="85:23" pos:end="85:27"><name pos:start="85:23" pos:end="85:23">s</name><operator pos:start="85:24" pos:end="85:25">-&gt;</operator><name pos:start="85:26" pos:end="85:27">fd</name></name></expr></argument>, <argument pos:start="85:30" pos:end="85:53"><expr pos:start="85:30" pos:end="85:53"><operator pos:start="85:30" pos:end="85:30">(</operator>struct <name pos:start="85:38" pos:end="85:45">sockaddr</name> <operator pos:start="85:47" pos:end="85:47">*</operator><operator pos:start="85:48" pos:end="85:48">)</operator><operator pos:start="85:49" pos:end="85:49">&amp;</operator><name pos:start="85:50" pos:end="85:53">addr</name></expr></argument>, <argument pos:start="85:56" pos:end="85:67"><expr pos:start="85:56" pos:end="85:67"><sizeof pos:start="85:56" pos:end="85:67">sizeof<argument_list pos:start="85:62" pos:end="85:67">(<argument pos:start="85:63" pos:end="85:66"><expr pos:start="85:63" pos:end="85:66"><name pos:start="85:63" pos:end="85:66">addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="89:37"><if pos:start="87:9" pos:end="89:37">if <condition pos:start="87:12" pos:end="87:22">(<expr pos:start="87:13" pos:end="87:21"><name pos:start="87:13" pos:end="87:15">ret</name> <operator pos:start="87:17" pos:end="87:18">==</operator> <operator pos:start="87:20" pos:end="87:20">-</operator><literal type="number" pos:start="87:21" pos:end="87:21">1</literal></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:37"><block_content pos:start="89:13" pos:end="89:37">

	    <expr_stmt pos:start="89:13" pos:end="89:37"><expr pos:start="89:13" pos:end="89:36"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <operator pos:start="89:19" pos:end="89:19">-</operator><operator pos:start="89:20" pos:end="89:20">(</operator><call pos:start="89:21" pos:end="89:35"><name pos:start="89:21" pos:end="89:32"><name pos:start="89:21" pos:end="89:21">s</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:32">get_error</name></name><argument_list pos:start="89:33" pos:end="89:35">(<argument pos:start="89:34" pos:end="89:34"><expr pos:start="89:34" pos:end="89:34"><name pos:start="89:34" pos:end="89:34">s</name></expr></argument>)</argument_list></call><operator pos:start="89:36" pos:end="89:36">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="93:9" pos:end="95:78"><if pos:start="93:9" pos:end="95:78">if <condition pos:start="93:12" pos:end="93:55">(<expr pos:start="93:13" pos:end="93:54"><name pos:start="93:13" pos:end="93:15">ret</name> <operator pos:start="93:17" pos:end="93:18">==</operator> <operator pos:start="93:20" pos:end="93:20">-</operator><name pos:start="93:21" pos:end="93:31">EINPROGRESS</name> <operator pos:start="93:33" pos:end="93:34">||</operator> <name pos:start="93:36" pos:end="93:38">ret</name> <operator pos:start="93:40" pos:end="93:41">==</operator> <operator pos:start="93:43" pos:end="93:43">-</operator><name pos:start="93:44" pos:end="93:54">EWOULDBLOCK</name></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:78"><block_content pos:start="95:13" pos:end="95:78">

	    <expr_stmt pos:start="95:13" pos:end="95:78"><expr pos:start="95:13" pos:end="95:77"><call pos:start="95:13" pos:end="95:77"><name pos:start="95:13" pos:end="95:32">qemu_set_fd_handler2</name><argument_list pos:start="95:33" pos:end="95:77">(<argument pos:start="95:34" pos:end="95:38"><expr pos:start="95:34" pos:end="95:38"><name pos:start="95:34" pos:end="95:38"><name pos:start="95:34" pos:end="95:34">s</name><operator pos:start="95:35" pos:end="95:36">-&gt;</operator><name pos:start="95:37" pos:end="95:38">fd</name></name></expr></argument>, <argument pos:start="95:41" pos:end="95:44"><expr pos:start="95:41" pos:end="95:44"><name pos:start="95:41" pos:end="95:44">NULL</name></expr></argument>, <argument pos:start="95:47" pos:end="95:50"><expr pos:start="95:47" pos:end="95:50"><name pos:start="95:47" pos:end="95:50">NULL</name></expr></argument>, <argument pos:start="95:53" pos:end="95:73"><expr pos:start="95:53" pos:end="95:73"><name pos:start="95:53" pos:end="95:73">unix_wait_for_connect</name></expr></argument>, <argument pos:start="95:76" pos:end="95:76"><expr pos:start="95:76" pos:end="95:76"><name pos:start="95:76" pos:end="95:76">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="97:13" pos:end="97:27">(<expr pos:start="97:14" pos:end="97:26"><name pos:start="97:14" pos:end="97:16">ret</name> <operator pos:start="97:18" pos:end="97:19">==</operator> <operator pos:start="97:21" pos:end="97:21">-</operator><name pos:start="97:22" pos:end="97:26">EINTR</name></expr>)</condition>;</do>



    <if_stmt pos:start="101:5" pos:end="109:30"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:62">(<expr pos:start="101:9" pos:end="101:61"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">&lt;</operator> <literal type="number" pos:start="101:15" pos:end="101:15">0</literal> <operator pos:start="101:17" pos:end="101:18">&amp;&amp;</operator> <name pos:start="101:20" pos:end="101:22">ret</name> <operator pos:start="101:24" pos:end="101:25">!=</operator> <operator pos:start="101:27" pos:end="101:27">-</operator><name pos:start="101:28" pos:end="101:38">EINPROGRESS</name> <operator pos:start="101:40" pos:end="101:41">&amp;&amp;</operator> <name pos:start="101:43" pos:end="101:45">ret</name> <operator pos:start="101:47" pos:end="101:48">!=</operator> <operator pos:start="101:50" pos:end="101:50">-</operator><name pos:start="101:51" pos:end="101:61">EWOULDBLOCK</name></expr>)</condition> <block pos:start="101:64" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:28">

        <expr_stmt pos:start="103:9" pos:end="103:36"><expr pos:start="103:9" pos:end="103:35"><call pos:start="103:9" pos:end="103:35"><name pos:start="103:9" pos:end="103:15">dprintf</name><argument_list pos:start="103:16" pos:end="103:35">(<argument pos:start="103:17" pos:end="103:34"><expr pos:start="103:17" pos:end="103:34"><literal type="string" pos:start="103:17" pos:end="103:34">"connect failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="105:9" pos:end="105:28">goto <name pos:start="105:14" pos:end="105:27">err_after_open</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="107:7" pos:end="109:30">else if <condition pos:start="107:15" pos:end="107:24">(<expr pos:start="107:16" pos:end="107:23"><name pos:start="107:16" pos:end="107:18">ret</name> <operator pos:start="107:20" pos:end="107:21">&gt;=</operator> <literal type="number" pos:start="107:23" pos:end="107:23">0</literal></expr>)</condition><block type="pseudo" pos:start="109:9" pos:end="109:30"><block_content pos:start="109:9" pos:end="109:30">

        <expr_stmt pos:start="109:9" pos:end="109:30"><expr pos:start="109:9" pos:end="109:29"><call pos:start="109:9" pos:end="109:29"><name pos:start="109:9" pos:end="109:26">migrate_fd_connect</name><argument_list pos:start="109:27" pos:end="109:29">(<argument pos:start="109:28" pos:end="109:28"><expr pos:start="109:28" pos:end="109:28"><name pos:start="109:28" pos:end="109:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="113:5" pos:end="113:25">return <expr pos:start="113:12" pos:end="113:24"><operator pos:start="113:12" pos:end="113:12">&amp;</operator><name pos:start="113:13" pos:end="113:24"><name pos:start="113:13" pos:end="113:13">s</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:24">mig_state</name></name></expr>;</return>



<label pos:start="117:1" pos:end="117:15"><name pos:start="117:1" pos:end="117:14">err_after_open</name>:</label>

    <expr_stmt pos:start="119:5" pos:end="119:17"><expr pos:start="119:5" pos:end="119:16"><call pos:start="119:5" pos:end="119:16"><name pos:start="119:5" pos:end="119:9">close</name><argument_list pos:start="119:10" pos:end="119:16">(<argument pos:start="119:11" pos:end="119:15"><expr pos:start="119:11" pos:end="119:15"><name pos:start="119:11" pos:end="119:15"><name pos:start="119:11" pos:end="119:11">s</name><operator pos:start="119:12" pos:end="119:13">-&gt;</operator><name pos:start="119:14" pos:end="119:15">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="123:1" pos:end="123:16"><name pos:start="123:1" pos:end="123:15">err_after_alloc</name>:</label>

    <expr_stmt pos:start="125:5" pos:end="125:17"><expr pos:start="125:5" pos:end="125:16"><call pos:start="125:5" pos:end="125:16"><name pos:start="125:5" pos:end="125:13">qemu_free</name><argument_list pos:start="125:14" pos:end="125:16">(<argument pos:start="125:15" pos:end="125:15"><expr pos:start="125:15" pos:end="125:15"><name pos:start="125:15" pos:end="125:15">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="127:5" pos:end="127:16">return <expr pos:start="127:12" pos:end="127:15"><name pos:start="127:12" pos:end="127:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
