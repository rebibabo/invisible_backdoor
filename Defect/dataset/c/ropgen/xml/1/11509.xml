<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11509.c" pos:tabs="8"><function pos:start="1:1" pos:end="223:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">read_high_coeffs</name><parameter_list pos:start="1:28" pos:end="5:56">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:58">uint8_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">src</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:77"><decl pos:start="1:66" pos:end="1:77"><type pos:start="1:66" pos:end="1:77"><name pos:start="1:66" pos:end="1:72">int16_t</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:77">dst</name></decl></parameter>, <parameter pos:start="1:80" pos:end="1:87"><decl pos:start="1:80" pos:end="1:87"><type pos:start="1:80" pos:end="1:87"><name pos:start="1:80" pos:end="1:82">int</name></type> <name pos:start="1:84" pos:end="1:87">size</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:33"><decl pos:start="3:29" pos:end="3:33"><type pos:start="3:29" pos:end="3:33"><name pos:start="3:29" pos:end="3:31">int</name></type> <name pos:start="3:33" pos:end="3:33">c</name></decl></parameter>, <parameter pos:start="3:36" pos:end="3:40"><decl pos:start="3:36" pos:end="3:40"><type pos:start="3:36" pos:end="3:40"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:40">a</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:47"><decl pos:start="3:43" pos:end="3:47"><type pos:start="3:43" pos:end="3:47"><name pos:start="3:43" pos:end="3:45">int</name></type> <name pos:start="3:47" pos:end="3:47">d</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:37"><decl pos:start="5:29" pos:end="5:37"><type pos:start="5:29" pos:end="5:37"><name pos:start="5:29" pos:end="5:31">int</name></type> <name pos:start="5:33" pos:end="5:37">width</name></decl></parameter>, <parameter pos:start="5:40" pos:end="5:55"><decl pos:start="5:40" pos:end="5:55"><type pos:start="5:40" pos:end="5:55"><name pos:start="5:40" pos:end="5:48">ptrdiff_t</name></type> <name pos:start="5:50" pos:end="5:55">stride</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="223:1">{<block_content pos:start="9:5" pos:end="221:34">

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">PixletContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">ctx</name> <init pos:start="9:24" pos:end="9:41">= <expr pos:start="9:26" pos:end="9:41"><name pos:start="9:26" pos:end="9:41"><name pos:start="9:26" pos:end="9:30">avctx</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">GetBitContext</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">b</name> <init pos:start="11:22" pos:end="11:33">= <expr pos:start="11:24" pos:end="11:33"><operator pos:start="11:24" pos:end="11:24">&amp;</operator><name pos:start="11:25" pos:end="11:33"><name pos:start="11:25" pos:end="11:27">ctx</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:33">gbit</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:64"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">unsigned</name></type> <name pos:start="13:14" pos:end="13:17">cnt1</name></decl>, <decl pos:start="13:20" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:20" pos:end="13:25">shbits</name></decl>, <decl pos:start="13:28" pos:end="13:31"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:28" pos:end="13:31">rlen</name></decl>, <decl pos:start="13:34" pos:end="13:38"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:34" pos:end="13:38">nbits</name></decl>, <decl pos:start="13:41" pos:end="13:46"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:41" pos:end="13:46">length</name></decl>, <decl pos:start="13:49" pos:end="13:53"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:49" pos:end="13:49">i</name> <init pos:start="13:51" pos:end="13:53">= <expr pos:start="13:53" pos:end="13:53"><literal type="number" pos:start="13:53" pos:end="13:53">0</literal></expr></init></decl>, <decl pos:start="13:56" pos:end="13:60"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:56" pos:end="13:56">j</name> <init pos:start="13:58" pos:end="13:60">= <expr pos:start="13:60" pos:end="13:60"><literal type="number" pos:start="13:60" pos:end="13:60">0</literal></expr></init></decl>, <decl pos:start="13:63" pos:end="13:63"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:63" pos:end="13:63">k</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:56"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>, <decl pos:start="15:14" pos:end="15:19"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:19">escape</name></decl>, <decl pos:start="15:22" pos:end="15:24"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:22" pos:end="15:24">pfx</name></decl>, <decl pos:start="15:27" pos:end="15:31"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:27" pos:end="15:31">value</name></decl>, <decl pos:start="15:34" pos:end="15:38"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:34" pos:end="15:38">yflag</name></decl>, <decl pos:start="15:41" pos:end="15:45"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:41" pos:end="15:45">xflag</name></decl>, <decl pos:start="15:48" pos:end="15:55"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:48" pos:end="15:51">flag</name> <init pos:start="15:53" pos:end="15:55">= <expr pos:start="15:55" pos:end="15:55"><literal type="number" pos:start="15:55" pos:end="15:55">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:17">state</name> <init pos:start="17:19" pos:end="17:21">= <expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">3</literal></expr></init></decl>, <decl pos:start="17:24" pos:end="17:26"><type ref="prev" pos:start="17:5" pos:end="17:11"/><name pos:start="17:24" pos:end="17:26">tmp</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="23:17"><if pos:start="21:5" pos:end="23:17">if <condition pos:start="21:8" pos:end="21:81">(<expr pos:start="21:9" pos:end="21:80"><operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:12">ret</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <call pos:start="21:16" pos:end="21:75"><name pos:start="21:16" pos:end="21:29">init_get_bits8</name><argument_list pos:start="21:30" pos:end="21:75">(<argument pos:start="21:31" pos:end="21:31"><expr pos:start="21:31" pos:end="21:31"><name pos:start="21:31" pos:end="21:31">b</name></expr></argument>, <argument pos:start="21:34" pos:end="21:36"><expr pos:start="21:34" pos:end="21:36"><name pos:start="21:34" pos:end="21:36">src</name></expr></argument>, <argument pos:start="21:39" pos:end="21:74"><expr pos:start="21:39" pos:end="21:74"><call pos:start="21:39" pos:end="21:74"><name pos:start="21:39" pos:end="21:64">bytestream2_get_bytes_left</name><argument_list pos:start="21:65" pos:end="21:74">(<argument pos:start="21:66" pos:end="21:73"><expr pos:start="21:66" pos:end="21:73"><operator pos:start="21:66" pos:end="21:66">&amp;</operator><name pos:start="21:67" pos:end="21:73"><name pos:start="21:67" pos:end="21:69">ctx</name><operator pos:start="21:70" pos:end="21:71">-&gt;</operator><name pos:start="21:72" pos:end="21:73">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="21:76" pos:end="21:76">)</operator> <operator pos:start="21:78" pos:end="21:78">&lt;</operator> <literal type="number" pos:start="21:80" pos:end="21:80">0</literal></expr>)</condition><block type="pseudo" pos:start="23:7" pos:end="23:17"><block_content pos:start="23:7" pos:end="23:17">

      <return pos:start="23:7" pos:end="23:17">return <expr pos:start="23:14" pos:end="23:16"><name pos:start="23:14" pos:end="23:16">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="39:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:52">(<expr pos:start="27:9" pos:end="27:51"><operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:10">a</name> <operator pos:start="27:12" pos:end="27:13">&gt;=</operator> <literal type="number" pos:start="27:15" pos:end="27:15">0</literal><operator pos:start="27:16" pos:end="27:16">)</operator> <operator pos:start="27:18" pos:end="27:18">+</operator> <operator pos:start="27:20" pos:end="27:20">(</operator><name pos:start="27:21" pos:end="27:21">a</name> <operator pos:start="27:23" pos:end="27:23">^</operator> <operator pos:start="27:25" pos:end="27:25">(</operator><name pos:start="27:26" pos:end="27:26">a</name> <operator pos:start="27:28" pos:end="27:29">&gt;&gt;</operator> <literal type="number" pos:start="27:31" pos:end="27:32">31</literal><operator pos:start="27:33" pos:end="27:33">)</operator><operator pos:start="27:34" pos:end="27:34">)</operator> <operator pos:start="27:36" pos:end="27:36">-</operator> <operator pos:start="27:38" pos:end="27:38">(</operator><name pos:start="27:39" pos:end="27:39">a</name> <operator pos:start="27:41" pos:end="27:42">&gt;&gt;</operator> <literal type="number" pos:start="27:44" pos:end="27:45">31</literal><operator pos:start="27:46" pos:end="27:46">)</operator> <operator pos:start="27:48" pos:end="27:49">!=</operator> <literal type="number" pos:start="27:51" pos:end="27:51">1</literal></expr>)</condition> <block pos:start="27:54" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:39">

        <expr_stmt pos:start="29:9" pos:end="29:72"><expr pos:start="29:9" pos:end="29:71"><name pos:start="29:9" pos:end="29:13">nbits</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <literal type="number" pos:start="29:17" pos:end="29:20">33</literal> <operator pos:start="29:20" pos:end="29:20">-</operator> <call pos:start="29:22" pos:end="29:71"><name pos:start="29:22" pos:end="29:27">ff_clz</name><argument_list pos:start="29:28" pos:end="29:71">(<argument pos:start="29:29" pos:end="29:70"><expr pos:start="29:29" pos:end="29:70"><operator pos:start="29:29" pos:end="29:29">(</operator><name pos:start="29:30" pos:end="29:30">a</name> <operator pos:start="29:32" pos:end="29:33">&gt;=</operator> <literal type="number" pos:start="29:35" pos:end="29:35">0</literal><operator pos:start="29:36" pos:end="29:36">)</operator> <operator pos:start="29:38" pos:end="29:38">+</operator> <operator pos:start="29:40" pos:end="29:40">(</operator><name pos:start="29:41" pos:end="29:41">a</name> <operator pos:start="29:43" pos:end="29:43">^</operator> <operator pos:start="29:45" pos:end="29:45">(</operator><name pos:start="29:46" pos:end="29:46">a</name> <operator pos:start="29:48" pos:end="29:49">&gt;&gt;</operator> <literal type="number" pos:start="29:51" pos:end="29:52">31</literal><operator pos:start="29:53" pos:end="29:53">)</operator><operator pos:start="29:54" pos:end="29:54">)</operator> <operator pos:start="29:56" pos:end="29:56">-</operator> <operator pos:start="29:58" pos:end="29:58">(</operator><name pos:start="29:59" pos:end="29:59">a</name> <operator pos:start="29:61" pos:end="29:62">&gt;&gt;</operator> <literal type="number" pos:start="29:64" pos:end="29:65">31</literal><operator pos:start="29:66" pos:end="29:66">)</operator> <operator pos:start="29:68" pos:end="29:68">-</operator> <literal type="number" pos:start="29:70" pos:end="29:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="33:39"><if pos:start="31:9" pos:end="33:39">if <condition pos:start="31:12" pos:end="31:23">(<expr pos:start="31:13" pos:end="31:22"><name pos:start="31:13" pos:end="31:17">nbits</name> <operator pos:start="31:19" pos:end="31:19">&gt;</operator> <literal type="number" pos:start="31:21" pos:end="31:22">16</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:39"><block_content pos:start="33:13" pos:end="33:39">

            <return pos:start="33:13" pos:end="33:39">return <expr pos:start="33:20" pos:end="33:38"><name pos:start="33:20" pos:end="33:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="39:5">else <block pos:start="35:12" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:18">

        <expr_stmt pos:start="37:9" pos:end="37:18"><expr pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:13">nbits</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <literal type="number" pos:start="37:17" pos:end="37:17">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:24"><expr pos:start="43:5" pos:end="43:23"><name pos:start="43:5" pos:end="43:10">length</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="number" pos:start="43:14" pos:end="43:17">25</literal> <operator pos:start="43:17" pos:end="43:17">-</operator> <name pos:start="43:19" pos:end="43:23">nbits</name></expr>;</expr_stmt>



    <while pos:start="47:5" pos:end="215:5">while <condition pos:start="47:11" pos:end="47:20">(<expr pos:start="47:12" pos:end="47:19"><name pos:start="47:12" pos:end="47:12">i</name> <operator pos:start="47:14" pos:end="47:14">&lt;</operator> <name pos:start="47:16" pos:end="47:19">size</name></expr>)</condition> <block pos:start="47:22" pos:end="215:5">{<block_content pos:start="49:9" pos:end="213:37">

        <if_stmt pos:start="49:9" pos:end="57:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:29">(<expr pos:start="49:13" pos:end="49:28"><name pos:start="49:13" pos:end="49:17">state</name> <operator pos:start="49:19" pos:end="49:20">&gt;&gt;</operator> <literal type="number" pos:start="49:22" pos:end="49:22">8</literal> <operator pos:start="49:24" pos:end="49:25">!=</operator> <operator pos:start="49:27" pos:end="49:27">-</operator><literal type="number" pos:start="49:28" pos:end="49:28">3</literal></expr>)</condition> <block pos:start="49:31" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:52">

            <expr_stmt pos:start="51:13" pos:end="51:52"><expr pos:start="51:13" pos:end="51:51"><name pos:start="51:13" pos:end="51:17">value</name> <operator pos:start="51:19" pos:end="51:19">=</operator> <call pos:start="51:21" pos:end="51:44"><name pos:start="51:21" pos:end="51:26">ff_clz</name><argument_list pos:start="51:27" pos:end="51:44">(<argument pos:start="51:28" pos:end="51:43"><expr pos:start="51:28" pos:end="51:43"><operator pos:start="51:28" pos:end="51:28">(</operator><name pos:start="51:29" pos:end="51:33">state</name> <operator pos:start="51:35" pos:end="51:36">&gt;&gt;</operator> <literal type="number" pos:start="51:38" pos:end="51:38">8</literal><operator pos:start="51:39" pos:end="51:39">)</operator> <operator pos:start="51:41" pos:end="51:41">+</operator> <literal type="number" pos:start="51:43" pos:end="51:43">3</literal></expr></argument>)</argument_list></call> <operator pos:start="51:46" pos:end="51:46">^</operator> <literal type="number" pos:start="51:48" pos:end="51:51">0x1F</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="53:11" pos:end="57:9">else <block pos:start="53:16" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:23">

            <expr_stmt pos:start="55:13" pos:end="55:23"><expr pos:start="55:13" pos:end="55:22"><name pos:start="55:13" pos:end="55:17">value</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <operator pos:start="55:21" pos:end="55:21">-</operator><literal type="number" pos:start="55:22" pos:end="55:22">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:39"><expr pos:start="61:9" pos:end="61:38"><name pos:start="61:9" pos:end="61:12">cnt1</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <call pos:start="61:16" pos:end="61:38"><name pos:start="61:16" pos:end="61:24">get_unary</name><argument_list pos:start="61:25" pos:end="61:38">(<argument pos:start="61:26" pos:end="61:26"><expr pos:start="61:26" pos:end="61:26"><name pos:start="61:26" pos:end="61:26">b</name></expr></argument>, <argument pos:start="61:29" pos:end="61:29"><expr pos:start="61:29" pos:end="61:29"><literal type="number" pos:start="61:29" pos:end="61:29">0</literal></expr></argument>, <argument pos:start="61:32" pos:end="61:37"><expr pos:start="61:32" pos:end="61:37"><name pos:start="61:32" pos:end="61:37">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="65:9" pos:end="89:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:27">(<expr pos:start="65:13" pos:end="65:26"><name pos:start="65:13" pos:end="65:16">cnt1</name> <operator pos:start="65:18" pos:end="65:19">&gt;=</operator> <name pos:start="65:21" pos:end="65:26">length</name></expr>)</condition> <block pos:start="65:29" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:38">

            <expr_stmt pos:start="67:13" pos:end="67:38"><expr pos:start="67:13" pos:end="67:37"><name pos:start="67:13" pos:end="67:16">cnt1</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <call pos:start="67:20" pos:end="67:37"><name pos:start="67:20" pos:end="67:27">get_bits</name><argument_list pos:start="67:28" pos:end="67:37">(<argument pos:start="67:29" pos:end="67:29"><expr pos:start="67:29" pos:end="67:29"><name pos:start="67:29" pos:end="67:29">b</name></expr></argument>, <argument pos:start="67:32" pos:end="67:36"><expr pos:start="67:32" pos:end="67:36"><name pos:start="67:32" pos:end="67:36">nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="69:11" pos:end="89:9">else <block pos:start="69:16" pos:end="89:9">{<block_content pos:start="71:13" pos:end="87:13">

            <expr_stmt pos:start="71:13" pos:end="71:73"><expr pos:start="71:13" pos:end="71:72"><name pos:start="71:13" pos:end="71:15">pfx</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <literal type="number" pos:start="71:19" pos:end="71:22">14</literal> <operator pos:start="71:22" pos:end="71:22">+</operator> <operator pos:start="71:24" pos:end="71:24">(</operator><operator pos:start="71:25" pos:end="71:25">(</operator><operator pos:start="71:26" pos:end="71:26">(</operator><operator pos:start="71:27" pos:end="71:27">(</operator><name pos:start="71:28" pos:end="71:35">uint64_t</name><operator pos:start="71:36" pos:end="71:36">)</operator><operator pos:start="71:37" pos:end="71:37">(</operator><name pos:start="71:38" pos:end="71:42">value</name> <operator pos:start="71:44" pos:end="71:44">-</operator> <literal type="number" pos:start="71:46" pos:end="71:47">14</literal><operator pos:start="71:48" pos:end="71:48">)</operator><operator pos:start="71:49" pos:end="71:49">)</operator> <operator pos:start="71:51" pos:end="71:52">&gt;&gt;</operator> <literal type="number" pos:start="71:54" pos:end="71:55">32</literal><operator pos:start="71:56" pos:end="71:56">)</operator> <operator pos:start="71:58" pos:end="71:58">&amp;</operator> <operator pos:start="71:60" pos:end="71:60">(</operator><name pos:start="71:61" pos:end="71:65">value</name> <operator pos:start="71:67" pos:end="71:67">-</operator> <literal type="number" pos:start="71:69" pos:end="71:70">14</literal><operator pos:start="71:71" pos:end="71:71">)</operator><operator pos:start="71:72" pos:end="71:72">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:35"><expr pos:start="73:13" pos:end="73:34"><name pos:start="73:13" pos:end="73:16">cnt1</name> <operator pos:start="73:18" pos:end="73:19">*=</operator> <operator pos:start="73:21" pos:end="73:21">(</operator><literal type="number" pos:start="73:22" pos:end="73:22">1</literal> <operator pos:start="73:24" pos:end="73:25">&lt;&lt;</operator> <name pos:start="73:27" pos:end="73:29">pfx</name><operator pos:start="73:30" pos:end="73:30">)</operator> <operator pos:start="73:32" pos:end="73:32">-</operator> <literal type="number" pos:start="73:34" pos:end="73:34">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:39"><expr pos:start="75:13" pos:end="75:38"><name pos:start="75:13" pos:end="75:18">shbits</name> <operator pos:start="75:20" pos:end="75:20">=</operator> <call pos:start="75:22" pos:end="75:38"><name pos:start="75:22" pos:end="75:30">show_bits</name><argument_list pos:start="75:31" pos:end="75:38">(<argument pos:start="75:32" pos:end="75:32"><expr pos:start="75:32" pos:end="75:32"><name pos:start="75:32" pos:end="75:32">b</name></expr></argument>, <argument pos:start="75:35" pos:end="75:37"><expr pos:start="75:35" pos:end="75:37"><name pos:start="75:35" pos:end="75:37">pfx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="77:13" pos:end="87:13"><if pos:start="77:13" pos:end="81:13">if <condition pos:start="77:16" pos:end="77:28">(<expr pos:start="77:17" pos:end="77:27"><name pos:start="77:17" pos:end="77:22">shbits</name> <operator pos:start="77:24" pos:end="77:25">&lt;=</operator> <literal type="number" pos:start="77:27" pos:end="77:27">1</literal></expr>)</condition> <block pos:start="77:30" pos:end="81:13">{<block_content pos:start="79:17" pos:end="79:38">

                <expr_stmt pos:start="79:17" pos:end="79:38"><expr pos:start="79:17" pos:end="79:37"><call pos:start="79:17" pos:end="79:37"><name pos:start="79:17" pos:end="79:25">skip_bits</name><argument_list pos:start="79:26" pos:end="79:37">(<argument pos:start="79:27" pos:end="79:27"><expr pos:start="79:27" pos:end="79:27"><name pos:start="79:27" pos:end="79:27">b</name></expr></argument>, <argument pos:start="79:30" pos:end="79:36"><expr pos:start="79:30" pos:end="79:36"><name pos:start="79:30" pos:end="79:32">pfx</name> <operator pos:start="79:34" pos:end="79:34">-</operator> <literal type="number" pos:start="79:36" pos:end="79:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="81:15" pos:end="87:13">else <block pos:start="81:20" pos:end="87:13">{<block_content pos:start="83:17" pos:end="85:35">

                <expr_stmt pos:start="83:17" pos:end="83:34"><expr pos:start="83:17" pos:end="83:33"><call pos:start="83:17" pos:end="83:33"><name pos:start="83:17" pos:end="83:25">skip_bits</name><argument_list pos:start="83:26" pos:end="83:33">(<argument pos:start="83:27" pos:end="83:27"><expr pos:start="83:27" pos:end="83:27"><name pos:start="83:27" pos:end="83:27">b</name></expr></argument>, <argument pos:start="83:30" pos:end="83:32"><expr pos:start="83:30" pos:end="83:32"><name pos:start="83:30" pos:end="83:32">pfx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:35"><expr pos:start="85:17" pos:end="85:34"><name pos:start="85:17" pos:end="85:20">cnt1</name> <operator pos:start="85:22" pos:end="85:23">+=</operator> <name pos:start="85:25" pos:end="85:30">shbits</name> <operator pos:start="85:32" pos:end="85:32">-</operator> <literal type="number" pos:start="85:34" pos:end="85:34">1</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:28"><expr pos:start="93:9" pos:end="93:27"><name pos:start="93:9" pos:end="93:13">xflag</name> <operator pos:start="93:15" pos:end="93:15">=</operator> <name pos:start="93:17" pos:end="93:20">flag</name> <operator pos:start="93:22" pos:end="93:22">+</operator> <name pos:start="93:24" pos:end="93:27">cnt1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:22"><expr pos:start="95:9" pos:end="95:21"><name pos:start="95:9" pos:end="95:13">yflag</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <name pos:start="95:17" pos:end="95:21">xflag</name></expr>;</expr_stmt>



        <if_stmt pos:start="99:9" pos:end="111:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:29">(<expr pos:start="99:13" pos:end="99:28"><name pos:start="99:13" pos:end="99:16">flag</name> <operator pos:start="99:18" pos:end="99:18">+</operator> <name pos:start="99:20" pos:end="99:23">cnt1</name> <operator pos:start="99:25" pos:end="99:26">==</operator> <literal type="number" pos:start="99:28" pos:end="99:28">0</literal></expr>)</condition> <block pos:start="99:31" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:22">

            <expr_stmt pos:start="101:13" pos:end="101:22"><expr pos:start="101:13" pos:end="101:21"><name pos:start="101:13" pos:end="101:17">value</name> <operator pos:start="101:19" pos:end="101:19">=</operator> <literal type="number" pos:start="101:21" pos:end="101:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="103:11" pos:end="111:9">else <block pos:start="103:16" pos:end="111:9">{<block_content pos:start="105:13" pos:end="109:43">

            <expr_stmt pos:start="105:13" pos:end="105:24"><expr pos:start="105:13" pos:end="105:23"><name pos:start="105:13" pos:end="105:17">xflag</name> <operator pos:start="105:19" pos:end="105:20">&amp;=</operator> <literal type="number" pos:start="105:22" pos:end="105:23">1u</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:52"><expr pos:start="107:13" pos:end="107:51"><name pos:start="107:13" pos:end="107:15">tmp</name> <operator pos:start="107:17" pos:end="107:17">=</operator> <name pos:start="107:19" pos:end="107:19">c</name> <operator pos:start="107:21" pos:end="107:21">*</operator> <operator pos:start="107:23" pos:end="107:23">(</operator><operator pos:start="107:24" pos:end="107:24">(</operator><name pos:start="107:25" pos:end="107:29">yflag</name> <operator pos:start="107:31" pos:end="107:31">+</operator> <literal type="number" pos:start="107:33" pos:end="107:33">1</literal><operator pos:start="107:34" pos:end="107:34">)</operator> <operator pos:start="107:36" pos:end="107:37">&gt;&gt;</operator> <literal type="number" pos:start="107:39" pos:end="107:39">1</literal><operator pos:start="107:40" pos:end="107:40">)</operator> <operator pos:start="107:42" pos:end="107:42">+</operator> <operator pos:start="107:44" pos:end="107:44">(</operator><name pos:start="107:45" pos:end="107:45">c</name> <operator pos:start="107:47" pos:end="107:48">&gt;&gt;</operator> <literal type="number" pos:start="107:50" pos:end="107:50">1</literal><operator pos:start="107:51" pos:end="107:51">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:43"><expr pos:start="109:13" pos:end="109:42"><name pos:start="109:13" pos:end="109:17">value</name> <operator pos:start="109:19" pos:end="109:19">=</operator> <name pos:start="109:21" pos:end="109:25">xflag</name> <operator pos:start="109:27" pos:end="109:27">+</operator> <operator pos:start="109:29" pos:end="109:29">(</operator><name pos:start="109:30" pos:end="109:32">tmp</name> <operator pos:start="109:34" pos:end="109:34">^</operator> <operator pos:start="109:36" pos:end="109:36">-</operator><name pos:start="109:37" pos:end="109:41">xflag</name><operator pos:start="109:42" pos:end="109:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:12"><expr pos:start="115:9" pos:end="115:11"><name pos:start="115:9" pos:end="115:9">i</name><operator pos:start="115:10" pos:end="115:11">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:25"><expr pos:start="117:9" pos:end="117:24"><name pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:11">dst</name><index pos:start="117:12" pos:end="117:16">[<expr pos:start="117:13" pos:end="117:15"><name pos:start="117:13" pos:end="117:13">j</name><operator pos:start="117:14" pos:end="117:15">++</operator></expr>]</index></name> <operator pos:start="117:18" pos:end="117:18">=</operator> <name pos:start="117:20" pos:end="117:24">value</name></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="125:9"><if pos:start="119:9" pos:end="125:9">if <condition pos:start="119:12" pos:end="119:23">(<expr pos:start="119:13" pos:end="119:22"><name pos:start="119:13" pos:end="119:13">j</name> <operator pos:start="119:15" pos:end="119:16">==</operator> <name pos:start="119:18" pos:end="119:22">width</name></expr>)</condition> <block pos:start="119:25" pos:end="125:9">{<block_content pos:start="121:13" pos:end="123:26">

            <expr_stmt pos:start="121:13" pos:end="121:18"><expr pos:start="121:13" pos:end="121:17"><name pos:start="121:13" pos:end="121:13">j</name> <operator pos:start="121:15" pos:end="121:15">=</operator> <literal type="number" pos:start="121:17" pos:end="121:17">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:26"><expr pos:start="123:13" pos:end="123:25"><name pos:start="123:13" pos:end="123:15">dst</name> <operator pos:start="123:17" pos:end="123:18">+=</operator> <name pos:start="123:20" pos:end="123:25">stride</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:46"><expr pos:start="127:9" pos:end="127:45"><name pos:start="127:9" pos:end="127:13">state</name> <operator pos:start="127:15" pos:end="127:16">+=</operator> <name pos:start="127:18" pos:end="127:18">d</name> <operator pos:start="127:20" pos:end="127:20">*</operator> <name pos:start="127:22" pos:end="127:26">yflag</name> <operator pos:start="127:28" pos:end="127:28">-</operator> <operator pos:start="127:30" pos:end="127:30">(</operator><name pos:start="127:31" pos:end="127:31">d</name> <operator pos:start="127:33" pos:end="127:33">*</operator> <name pos:start="127:35" pos:end="127:39">state</name> <operator pos:start="127:41" pos:end="127:42">&gt;&gt;</operator> <literal type="number" pos:start="127:44" pos:end="127:44">8</literal><operator pos:start="127:45" pos:end="127:45">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="131:9" pos:end="131:17"><expr pos:start="131:9" pos:end="131:16"><name pos:start="131:9" pos:end="131:12">flag</name> <operator pos:start="131:14" pos:end="131:14">=</operator> <literal type="number" pos:start="131:16" pos:end="131:16">0</literal></expr>;</expr_stmt>



        <if_stmt pos:start="135:9" pos:end="137:21"><if pos:start="135:9" pos:end="137:21">if <condition pos:start="135:12" pos:end="135:42">(<expr pos:start="135:13" pos:end="135:41"><name pos:start="135:13" pos:end="135:17">state</name> <operator pos:start="135:19" pos:end="135:19">*</operator> <literal type="number" pos:start="135:21" pos:end="135:21">4</literal> <operator pos:start="135:23" pos:end="135:23">&gt;</operator> <literal type="number" pos:start="135:25" pos:end="135:28">0xFF</literal> <operator pos:start="135:30" pos:end="135:31">||</operator> <name pos:start="135:33" pos:end="135:33">i</name> <operator pos:start="135:35" pos:end="135:36">&gt;=</operator> <name pos:start="135:38" pos:end="135:41">size</name></expr>)</condition><block type="pseudo" pos:start="137:13" pos:end="137:21"><block_content pos:start="137:13" pos:end="137:21">

            <continue pos:start="137:13" pos:end="137:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="141:9" pos:end="141:68"><expr pos:start="141:9" pos:end="141:67"><name pos:start="141:9" pos:end="141:11">pfx</name> <operator pos:start="141:13" pos:end="141:13">=</operator> <operator pos:start="141:15" pos:end="141:15">(</operator><operator pos:start="141:16" pos:end="141:16">(</operator><name pos:start="141:17" pos:end="141:21">state</name> <operator pos:start="141:23" pos:end="141:23">+</operator> <literal type="number" pos:start="141:25" pos:end="141:25">8</literal><operator pos:start="141:26" pos:end="141:26">)</operator> <operator pos:start="141:28" pos:end="141:29">&gt;&gt;</operator> <literal type="number" pos:start="141:31" pos:end="141:31">5</literal><operator pos:start="141:32" pos:end="141:32">)</operator> <operator pos:start="141:34" pos:end="141:34">+</operator> <operator pos:start="141:36" pos:end="141:36">(</operator><ternary pos:start="141:37" pos:end="141:61"><condition pos:start="141:37" pos:end="141:43"><expr pos:start="141:37" pos:end="141:41"><name pos:start="141:37" pos:end="141:41">state</name></expr> ?</condition><then pos:start="141:45" pos:end="141:57"> <expr pos:start="141:45" pos:end="141:57"><call pos:start="141:45" pos:end="141:57"><name pos:start="141:45" pos:end="141:50">ff_clz</name><argument_list pos:start="141:51" pos:end="141:57">(<argument pos:start="141:52" pos:end="141:56"><expr pos:start="141:52" pos:end="141:56"><name pos:start="141:52" pos:end="141:56">state</name></expr></argument>)</argument_list></call></expr></then><else pos:start="141:58" pos:end="141:61">: <expr pos:start="141:60" pos:end="141:61"><literal type="number" pos:start="141:60" pos:end="141:61">32</literal></expr></else></ternary><operator pos:start="141:62" pos:end="141:62">)</operator> <operator pos:start="141:64" pos:end="141:64">-</operator> <literal type="number" pos:start="141:66" pos:end="141:67">24</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:43"><expr pos:start="143:9" pos:end="143:42"><name pos:start="143:9" pos:end="143:14">escape</name> <operator pos:start="143:16" pos:end="143:16">=</operator> <call pos:start="143:18" pos:end="143:42"><name pos:start="143:18" pos:end="143:30">av_mod_uintp2</name><argument_list pos:start="143:31" pos:end="143:42">(<argument pos:start="143:32" pos:end="143:36"><expr pos:start="143:32" pos:end="143:36"><literal type="number" pos:start="143:32" pos:end="143:36">16383</literal></expr></argument>, <argument pos:start="143:39" pos:end="143:41"><expr pos:start="143:39" pos:end="143:41"><name pos:start="143:39" pos:end="143:41">pfx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:34"><expr pos:start="145:9" pos:end="145:33"><name pos:start="145:9" pos:end="145:12">cnt1</name> <operator pos:start="145:14" pos:end="145:14">=</operator> <call pos:start="145:16" pos:end="145:33"><name pos:start="145:16" pos:end="145:24">get_unary</name><argument_list pos:start="145:25" pos:end="145:33">(<argument pos:start="145:26" pos:end="145:26"><expr pos:start="145:26" pos:end="145:26"><name pos:start="145:26" pos:end="145:26">b</name></expr></argument>, <argument pos:start="145:29" pos:end="145:29"><expr pos:start="145:29" pos:end="145:29"><literal type="number" pos:start="145:29" pos:end="145:29">0</literal></expr></argument>, <argument pos:start="145:32" pos:end="145:32"><expr pos:start="145:32" pos:end="145:32"><literal type="number" pos:start="145:32" pos:end="145:32">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="147:9" pos:end="183:9"><if pos:start="147:9" pos:end="169:9">if <condition pos:start="147:12" pos:end="147:21">(<expr pos:start="147:13" pos:end="147:20"><name pos:start="147:13" pos:end="147:16">cnt1</name> <operator pos:start="147:18" pos:end="147:18">&lt;</operator> <literal type="number" pos:start="147:20" pos:end="147:20">8</literal></expr>)</condition> <block pos:start="147:23" pos:end="169:9">{<block_content pos:start="149:13" pos:end="167:13">

            <if_stmt pos:start="149:13" pos:end="151:43"><if pos:start="149:13" pos:end="151:43">if <condition pos:start="149:16" pos:end="149:36">(<expr pos:start="149:17" pos:end="149:35"><name pos:start="149:17" pos:end="149:32"><name pos:start="149:17" pos:end="149:19">pfx</name> <argument_list type="generic" pos:start="149:21" pos:end="149:32">&lt; <argument pos:start="149:23" pos:end="149:30"><expr pos:start="149:23" pos:end="149:30"><literal type="number" pos:start="149:23" pos:end="149:23">1</literal> <operator pos:start="149:25" pos:end="149:26">||</operator> <name pos:start="149:28" pos:end="149:30">pfx</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="149:34" pos:end="149:35">25</literal></expr>)</condition><block type="pseudo" pos:start="151:17" pos:end="151:43"><block_content pos:start="151:17" pos:end="151:43">

                <return pos:start="151:17" pos:end="151:43">return <expr pos:start="151:24" pos:end="151:42"><name pos:start="151:24" pos:end="151:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:38"><expr pos:start="153:13" pos:end="153:37"><name pos:start="153:13" pos:end="153:17">value</name> <operator pos:start="153:19" pos:end="153:19">=</operator> <call pos:start="153:21" pos:end="153:37"><name pos:start="153:21" pos:end="153:29">show_bits</name><argument_list pos:start="153:30" pos:end="153:37">(<argument pos:start="153:31" pos:end="153:31"><expr pos:start="153:31" pos:end="153:31"><name pos:start="153:31" pos:end="153:31">b</name></expr></argument>, <argument pos:start="153:34" pos:end="153:36"><expr pos:start="153:34" pos:end="153:36"><name pos:start="153:34" pos:end="153:36">pfx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="155:13" pos:end="167:13"><if pos:start="155:13" pos:end="161:13">if <condition pos:start="155:16" pos:end="155:26">(<expr pos:start="155:17" pos:end="155:25"><name pos:start="155:17" pos:end="155:21">value</name> <operator pos:start="155:23" pos:end="155:23">&gt;</operator> <literal type="number" pos:start="155:25" pos:end="155:25">1</literal></expr>)</condition> <block pos:start="155:28" pos:end="161:13">{<block_content pos:start="157:17" pos:end="159:49">

                <expr_stmt pos:start="157:17" pos:end="157:34"><expr pos:start="157:17" pos:end="157:33"><call pos:start="157:17" pos:end="157:33"><name pos:start="157:17" pos:end="157:25">skip_bits</name><argument_list pos:start="157:26" pos:end="157:33">(<argument pos:start="157:27" pos:end="157:27"><expr pos:start="157:27" pos:end="157:27"><name pos:start="157:27" pos:end="157:27">b</name></expr></argument>, <argument pos:start="157:30" pos:end="157:32"><expr pos:start="157:30" pos:end="157:32"><name pos:start="157:30" pos:end="157:32">pfx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:49"><expr pos:start="159:17" pos:end="159:48"><name pos:start="159:17" pos:end="159:20">rlen</name> <operator pos:start="159:22" pos:end="159:22">=</operator> <name pos:start="159:24" pos:end="159:28">value</name> <operator pos:start="159:30" pos:end="159:30">+</operator> <name pos:start="159:32" pos:end="159:37">escape</name> <operator pos:start="159:39" pos:end="159:39">*</operator> <name pos:start="159:41" pos:end="159:44">cnt1</name> <operator pos:start="159:46" pos:end="159:46">-</operator> <literal type="number" pos:start="159:48" pos:end="159:48">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="161:15" pos:end="167:13">else <block pos:start="161:20" pos:end="167:13">{<block_content pos:start="163:17" pos:end="165:37">

                <expr_stmt pos:start="163:17" pos:end="163:38"><expr pos:start="163:17" pos:end="163:37"><call pos:start="163:17" pos:end="163:37"><name pos:start="163:17" pos:end="163:25">skip_bits</name><argument_list pos:start="163:26" pos:end="163:37">(<argument pos:start="163:27" pos:end="163:27"><expr pos:start="163:27" pos:end="163:27"><name pos:start="163:27" pos:end="163:27">b</name></expr></argument>, <argument pos:start="163:30" pos:end="163:36"><expr pos:start="163:30" pos:end="163:36"><name pos:start="163:30" pos:end="163:32">pfx</name> <operator pos:start="163:34" pos:end="163:34">-</operator> <literal type="number" pos:start="163:36" pos:end="163:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="165:17" pos:end="165:37"><expr pos:start="165:17" pos:end="165:36"><name pos:start="165:17" pos:end="165:20">rlen</name> <operator pos:start="165:22" pos:end="165:22">=</operator> <name pos:start="165:24" pos:end="165:29">escape</name> <operator pos:start="165:31" pos:end="165:31">*</operator> <name pos:start="165:33" pos:end="165:36">cnt1</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="169:11" pos:end="183:9">else <block pos:start="169:16" pos:end="183:9">{<block_content pos:start="171:13" pos:end="181:38">

            <if_stmt pos:start="171:13" pos:end="177:39"><if pos:start="171:13" pos:end="173:40">if <condition pos:start="171:16" pos:end="171:29">(<expr pos:start="171:17" pos:end="171:28"><call pos:start="171:17" pos:end="171:28"><name pos:start="171:17" pos:end="171:25">get_bits1</name><argument_list pos:start="171:26" pos:end="171:28">(<argument pos:start="171:27" pos:end="171:27"><expr pos:start="171:27" pos:end="171:27"><name pos:start="171:27" pos:end="171:27">b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="173:17" pos:end="173:40"><block_content pos:start="173:17" pos:end="173:40">

                <expr_stmt pos:start="173:17" pos:end="173:40"><expr pos:start="173:17" pos:end="173:39"><name pos:start="173:17" pos:end="173:21">value</name> <operator pos:start="173:23" pos:end="173:23">=</operator> <call pos:start="173:25" pos:end="173:39"><name pos:start="173:25" pos:end="173:32">get_bits</name><argument_list pos:start="173:33" pos:end="173:39">(<argument pos:start="173:34" pos:end="173:34"><expr pos:start="173:34" pos:end="173:34"><name pos:start="173:34" pos:end="173:34">b</name></expr></argument>, <argument pos:start="173:37" pos:end="173:38"><expr pos:start="173:37" pos:end="173:38"><literal type="number" pos:start="173:37" pos:end="173:38">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="175:13" pos:end="177:39">else<block type="pseudo" pos:start="177:17" pos:end="177:39"><block_content pos:start="177:17" pos:end="177:39">

                <expr_stmt pos:start="177:17" pos:end="177:39"><expr pos:start="177:17" pos:end="177:38"><name pos:start="177:17" pos:end="177:21">value</name> <operator pos:start="177:23" pos:end="177:23">=</operator> <call pos:start="177:25" pos:end="177:38"><name pos:start="177:25" pos:end="177:32">get_bits</name><argument_list pos:start="177:33" pos:end="177:38">(<argument pos:start="177:34" pos:end="177:34"><expr pos:start="177:34" pos:end="177:34"><name pos:start="177:34" pos:end="177:34">b</name></expr></argument>, <argument pos:start="177:37" pos:end="177:37"><expr pos:start="177:37" pos:end="177:37"><literal type="number" pos:start="177:37" pos:end="177:37">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="181:13" pos:end="181:38"><expr pos:start="181:13" pos:end="181:37"><name pos:start="181:13" pos:end="181:16">rlen</name> <operator pos:start="181:18" pos:end="181:18">=</operator> <name pos:start="181:20" pos:end="181:24">value</name> <operator pos:start="181:26" pos:end="181:26">+</operator> <literal type="number" pos:start="181:28" pos:end="181:28">8</literal> <operator pos:start="181:30" pos:end="181:30">*</operator> <name pos:start="181:32" pos:end="181:37">escape</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="187:9" pos:end="189:39"><if pos:start="187:9" pos:end="189:39">if <condition pos:start="187:12" pos:end="187:45">(<expr pos:start="187:13" pos:end="187:44"><name pos:start="187:13" pos:end="187:16">rlen</name> <operator pos:start="187:18" pos:end="187:18">&gt;</operator> <literal type="number" pos:start="187:20" pos:end="187:25">0xFFFF</literal> <operator pos:start="187:27" pos:end="187:28">||</operator> <name pos:start="187:30" pos:end="187:30">i</name> <operator pos:start="187:32" pos:end="187:32">+</operator> <name pos:start="187:34" pos:end="187:37">rlen</name> <operator pos:start="187:39" pos:end="187:39">&gt;</operator> <name pos:start="187:41" pos:end="187:44">size</name></expr>)</condition><block type="pseudo" pos:start="189:13" pos:end="189:39"><block_content pos:start="189:13" pos:end="189:39">

            <return pos:start="189:13" pos:end="189:39">return <expr pos:start="189:20" pos:end="189:38"><name pos:start="189:20" pos:end="189:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:18"><expr pos:start="191:9" pos:end="191:17"><name pos:start="191:9" pos:end="191:9">i</name> <operator pos:start="191:11" pos:end="191:12">+=</operator> <name pos:start="191:14" pos:end="191:17">rlen</name></expr>;</expr_stmt>



        <for pos:start="195:9" pos:end="207:9">for <control pos:start="195:13" pos:end="195:34">(<init pos:start="195:14" pos:end="195:19"><expr pos:start="195:14" pos:end="195:18"><name pos:start="195:14" pos:end="195:14">k</name> <operator pos:start="195:16" pos:end="195:16">=</operator> <literal type="number" pos:start="195:18" pos:end="195:18">0</literal></expr>;</init> <condition pos:start="195:21" pos:end="195:29"><expr pos:start="195:21" pos:end="195:28"><name pos:start="195:21" pos:end="195:21">k</name> <operator pos:start="195:23" pos:end="195:23">&lt;</operator> <name pos:start="195:25" pos:end="195:28">rlen</name></expr>;</condition> <incr pos:start="195:31" pos:end="195:33"><expr pos:start="195:31" pos:end="195:33"><name pos:start="195:31" pos:end="195:31">k</name><operator pos:start="195:32" pos:end="195:33">++</operator></expr></incr>)</control> <block pos:start="195:36" pos:end="207:9">{<block_content pos:start="197:13" pos:end="205:13">

            <expr_stmt pos:start="197:13" pos:end="197:25"><expr pos:start="197:13" pos:end="197:24"><name pos:start="197:13" pos:end="197:20"><name pos:start="197:13" pos:end="197:15">dst</name><index pos:start="197:16" pos:end="197:20">[<expr pos:start="197:17" pos:end="197:19"><name pos:start="197:17" pos:end="197:17">j</name><operator pos:start="197:18" pos:end="197:19">++</operator></expr>]</index></name> <operator pos:start="197:22" pos:end="197:22">=</operator> <literal type="number" pos:start="197:24" pos:end="197:24">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="199:13" pos:end="205:13"><if pos:start="199:13" pos:end="205:13">if <condition pos:start="199:16" pos:end="199:27">(<expr pos:start="199:17" pos:end="199:26"><name pos:start="199:17" pos:end="199:17">j</name> <operator pos:start="199:19" pos:end="199:20">==</operator> <name pos:start="199:22" pos:end="199:26">width</name></expr>)</condition> <block pos:start="199:29" pos:end="205:13">{<block_content pos:start="201:17" pos:end="203:30">

                <expr_stmt pos:start="201:17" pos:end="201:22"><expr pos:start="201:17" pos:end="201:21"><name pos:start="201:17" pos:end="201:17">j</name> <operator pos:start="201:19" pos:end="201:19">=</operator> <literal type="number" pos:start="201:21" pos:end="201:21">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="203:17" pos:end="203:30"><expr pos:start="203:17" pos:end="203:29"><name pos:start="203:17" pos:end="203:19">dst</name> <operator pos:start="203:21" pos:end="203:22">+=</operator> <name pos:start="203:24" pos:end="203:29">stride</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="211:9" pos:end="211:18"><expr pos:start="211:9" pos:end="211:17"><name pos:start="211:9" pos:end="211:13">state</name> <operator pos:start="211:15" pos:end="211:15">=</operator> <literal type="number" pos:start="211:17" pos:end="211:17">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:37"><expr pos:start="213:9" pos:end="213:36"><name pos:start="213:9" pos:end="213:12">flag</name> <operator pos:start="213:14" pos:end="213:14">=</operator> <ternary pos:start="213:16" pos:end="213:36"><condition pos:start="213:16" pos:end="213:30"><expr pos:start="213:16" pos:end="213:28"><name pos:start="213:16" pos:end="213:19">rlen</name> <operator pos:start="213:21" pos:end="213:21">&lt;</operator> <literal type="number" pos:start="213:23" pos:end="213:28">0xFFFF</literal></expr> ?</condition><then pos:start="213:32" pos:end="213:32"> <expr pos:start="213:32" pos:end="213:32"><literal type="number" pos:start="213:32" pos:end="213:32">1</literal></expr> </then><else pos:start="213:34" pos:end="213:36">: <expr pos:start="213:36" pos:end="213:36"><literal type="number" pos:start="213:36" pos:end="213:36">0</literal></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="219:5" pos:end="219:22"><expr pos:start="219:5" pos:end="219:21"><call pos:start="219:5" pos:end="219:21"><name pos:start="219:5" pos:end="219:18">align_get_bits</name><argument_list pos:start="219:19" pos:end="219:21">(<argument pos:start="219:20" pos:end="219:20"><expr pos:start="219:20" pos:end="219:20"><name pos:start="219:20" pos:end="219:20">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="221:5" pos:end="221:34">return <expr pos:start="221:12" pos:end="221:33"><call pos:start="221:12" pos:end="221:28"><name pos:start="221:12" pos:end="221:25">get_bits_count</name><argument_list pos:start="221:26" pos:end="221:28">(<argument pos:start="221:27" pos:end="221:27"><expr pos:start="221:27" pos:end="221:27"><name pos:start="221:27" pos:end="221:27">b</name></expr></argument>)</argument_list></call> <operator pos:start="221:30" pos:end="221:31">&gt;&gt;</operator> <literal type="number" pos:start="221:33" pos:end="221:33">3</literal></expr>;</return>

</block_content>}</block></function>
</unit>
