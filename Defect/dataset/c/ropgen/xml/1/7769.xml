<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7769.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">mxf_read_pixel_layout</name><parameter_list pos:start="1:34" pos:end="1:77">(<parameter pos:start="1:35" pos:end="1:49"><decl pos:start="1:35" pos:end="1:49"><type pos:start="1:35" pos:end="1:49"><name pos:start="1:35" pos:end="1:45">AVIOContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">pb</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:76"><decl pos:start="1:52" pos:end="1:76"><type pos:start="1:52" pos:end="1:76"><name pos:start="1:52" pos:end="1:64">MXFDescriptor</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:76">descriptor</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="35:1">{<block_content pos:start="5:5" pos:end="33:61">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">code</name></decl>, <decl pos:start="5:15" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:19">value</name></decl>, <decl pos:start="5:22" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:24">ofs</name> <init pos:start="5:26" pos:end="5:28">= <expr pos:start="5:28" pos:end="5:28"><literal type="number" pos:start="5:28" pos:end="5:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:19"><name pos:start="7:10" pos:end="7:15">layout</name><index pos:start="7:16" pos:end="7:19">[<expr pos:start="7:17" pos:end="7:18"><literal type="number" pos:start="7:17" pos:end="7:18">16</literal></expr>]</index></name> <init pos:start="7:21" pos:end="7:25">= <expr pos:start="7:23" pos:end="7:25"><block pos:start="7:23" pos:end="7:25">{<expr pos:start="7:24" pos:end="7:24"><literal type="number" pos:start="7:24" pos:end="7:24">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="7:28" pos:end="7:87">/* not for printing, may end up not terminated on purpose */</comment>



    <do pos:start="11:5" pos:end="29:24">do <block pos:start="11:8" pos:end="29:5">{<block_content pos:start="13:9" pos:end="27:9">

        <expr_stmt pos:start="13:9" pos:end="13:27"><expr pos:start="13:9" pos:end="13:26"><name pos:start="13:9" pos:end="13:12">code</name> <operator pos:start="13:14" pos:end="13:14">=</operator> <call pos:start="13:16" pos:end="13:26"><name pos:start="13:16" pos:end="13:22">avio_r8</name><argument_list pos:start="13:23" pos:end="13:26">(<argument pos:start="13:24" pos:end="13:25"><expr pos:start="13:24" pos:end="13:25"><name pos:start="13:24" pos:end="13:25">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:28"><expr pos:start="15:9" pos:end="15:27"><name pos:start="15:9" pos:end="15:13">value</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <call pos:start="15:17" pos:end="15:27"><name pos:start="15:17" pos:end="15:23">avio_r8</name><argument_list pos:start="15:24" pos:end="15:27">(<argument pos:start="15:25" pos:end="15:26"><expr pos:start="15:25" pos:end="15:26"><name pos:start="15:25" pos:end="15:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:56"><expr pos:start="17:9" pos:end="17:55"><call pos:start="17:9" pos:end="17:55"><name pos:start="17:9" pos:end="17:15">av_dlog</name><argument_list pos:start="17:16" pos:end="17:55">(<argument pos:start="17:17" pos:end="17:20"><expr pos:start="17:17" pos:end="17:20"><name pos:start="17:17" pos:end="17:20">NULL</name></expr></argument>, <argument pos:start="17:23" pos:end="17:48"><expr pos:start="17:23" pos:end="17:48"><literal type="string" pos:start="17:23" pos:end="17:48">"pixel layout: code %#x\n"</literal></expr></argument>, <argument pos:start="17:51" pos:end="17:54"><expr pos:start="17:51" pos:end="17:54"><name pos:start="17:51" pos:end="17:54">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="21:9" pos:end="27:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:22">(<expr pos:start="21:13" pos:end="21:21"><name pos:start="21:13" pos:end="21:15">ofs</name> <operator pos:start="21:17" pos:end="21:18">&lt;=</operator> <literal type="number" pos:start="21:20" pos:end="21:21">14</literal></expr>)</condition> <block pos:start="21:24" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:34">

            <expr_stmt pos:start="23:13" pos:end="23:33"><expr pos:start="23:13" pos:end="23:32"><name pos:start="23:13" pos:end="23:25"><name pos:start="23:13" pos:end="23:18">layout</name><index pos:start="23:19" pos:end="23:25">[<expr pos:start="23:20" pos:end="23:24"><name pos:start="23:20" pos:end="23:22">ofs</name><operator pos:start="23:23" pos:end="23:24">++</operator></expr>]</index></name> <operator pos:start="23:27" pos:end="23:27">=</operator> <name pos:start="23:29" pos:end="23:32">code</name></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:34"><expr pos:start="25:13" pos:end="25:33"><name pos:start="25:13" pos:end="25:25"><name pos:start="25:13" pos:end="25:18">layout</name><index pos:start="25:19" pos:end="25:25">[<expr pos:start="25:20" pos:end="25:24"><name pos:start="25:20" pos:end="25:22">ofs</name><operator pos:start="25:23" pos:end="25:24">++</operator></expr>]</index></name> <operator pos:start="25:27" pos:end="25:27">=</operator> <name pos:start="25:29" pos:end="25:33">value</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="29:13" pos:end="29:23">(<expr pos:start="29:14" pos:end="29:22"><name pos:start="29:14" pos:end="29:17">code</name> <operator pos:start="29:19" pos:end="29:20">!=</operator> <literal type="number" pos:start="29:22" pos:end="29:22">0</literal></expr>)</condition>;</do> <comment type="block" pos:start="29:26" pos:end="29:48">/* SMPTE 377M E.2.46 */</comment>



    <expr_stmt pos:start="33:5" pos:end="33:61"><expr pos:start="33:5" pos:end="33:60"><call pos:start="33:5" pos:end="33:60"><name pos:start="33:5" pos:end="33:30">ff_mxf_decode_pixel_layout</name><argument_list pos:start="33:31" pos:end="33:60">(<argument pos:start="33:32" pos:end="33:37"><expr pos:start="33:32" pos:end="33:37"><name pos:start="33:32" pos:end="33:37">layout</name></expr></argument>, <argument pos:start="33:40" pos:end="33:59"><expr pos:start="33:40" pos:end="33:59"><operator pos:start="33:40" pos:end="33:40">&amp;</operator><name pos:start="33:41" pos:end="33:59"><name pos:start="33:41" pos:end="33:50">descriptor</name><operator pos:start="33:51" pos:end="33:52">-&gt;</operator><name pos:start="33:53" pos:end="33:59">pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
