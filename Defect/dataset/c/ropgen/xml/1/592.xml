<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/592.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">decode_subband</name><parameter_list pos:start="1:27" pos:end="5:52">(<parameter pos:start="1:28" pos:end="1:42"><decl pos:start="1:28" pos:end="1:42"><type pos:start="1:28" pos:end="1:42"><name pos:start="1:28" pos:end="1:39">DiracContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:61"><decl pos:start="1:45" pos:end="1:61"><type pos:start="1:45" pos:end="1:61"><name pos:start="1:45" pos:end="1:57">GetBitContext</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:61">gb</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:72"><decl pos:start="1:64" pos:end="1:72"><type pos:start="1:64" pos:end="1:72"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:72">quant</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:38"><decl pos:start="3:28" pos:end="3:38"><type pos:start="3:28" pos:end="3:38"><name pos:start="3:28" pos:end="3:30">int</name></type> <name pos:start="3:32" pos:end="3:38">slice_x</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:51"><decl pos:start="3:41" pos:end="3:51"><type pos:start="3:41" pos:end="3:51"><name pos:start="3:41" pos:end="3:43">int</name></type> <name pos:start="3:45" pos:end="3:51">slice_y</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:65"><decl pos:start="3:54" pos:end="3:65"><type pos:start="3:54" pos:end="3:65"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:65">bits_end</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:38"><decl pos:start="5:28" pos:end="5:38"><type pos:start="5:28" pos:end="5:38"><name pos:start="5:28" pos:end="5:34">SubBand</name> <modifier pos:start="5:36" pos:end="5:36">*</modifier></type><name pos:start="5:37" pos:end="5:38">b1</name></decl></parameter>, <parameter pos:start="5:41" pos:end="5:51"><decl pos:start="5:41" pos:end="5:51"><type pos:start="5:41" pos:end="5:51"><name pos:start="5:41" pos:end="5:47">SubBand</name> <modifier pos:start="5:49" pos:end="5:49">*</modifier></type><name pos:start="5:50" pos:end="5:51">b2</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="81:1">{<block_content pos:start="9:5" pos:end="79:5">

    <decl_stmt pos:start="9:5" pos:end="9:52"><decl pos:start="9:5" pos:end="9:51"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">left</name>   <init pos:start="9:16" pos:end="9:51">= <expr pos:start="9:18" pos:end="9:51"><name pos:start="9:18" pos:end="9:26"><name pos:start="9:18" pos:end="9:19">b1</name><operator pos:start="9:20" pos:end="9:21">-&gt;</operator><name pos:start="9:22" pos:end="9:26">width</name></name>  <operator pos:start="9:29" pos:end="9:29">*</operator> <name pos:start="9:31" pos:end="9:37">slice_x</name>    <operator pos:start="9:42" pos:end="9:42">/</operator> <name pos:start="9:44" pos:end="9:51"><name pos:start="9:44" pos:end="9:44">s</name><operator pos:start="9:45" pos:end="9:46">-&gt;</operator><name pos:start="9:47" pos:end="9:51">num_x</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:52"><decl pos:start="11:5" pos:end="11:51"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">right</name>  <init pos:start="11:16" pos:end="11:51">= <expr pos:start="11:18" pos:end="11:51"><name pos:start="11:18" pos:end="11:26"><name pos:start="11:18" pos:end="11:19">b1</name><operator pos:start="11:20" pos:end="11:21">-&gt;</operator><name pos:start="11:22" pos:end="11:26">width</name></name>  <operator pos:start="11:29" pos:end="11:29">*</operator><operator pos:start="11:30" pos:end="11:30">(</operator><name pos:start="11:31" pos:end="11:37">slice_x</name><operator pos:start="11:38" pos:end="11:38">+</operator><literal type="number" pos:start="11:39" pos:end="11:39">1</literal><operator pos:start="11:40" pos:end="11:40">)</operator> <operator pos:start="11:42" pos:end="11:42">/</operator> <name pos:start="11:44" pos:end="11:51"><name pos:start="11:44" pos:end="11:44">s</name><operator pos:start="11:45" pos:end="11:46">-&gt;</operator><name pos:start="11:47" pos:end="11:51">num_x</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:52"><decl pos:start="13:5" pos:end="13:51"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">top</name>    <init pos:start="13:16" pos:end="13:51">= <expr pos:start="13:18" pos:end="13:51"><name pos:start="13:18" pos:end="13:27"><name pos:start="13:18" pos:end="13:19">b1</name><operator pos:start="13:20" pos:end="13:21">-&gt;</operator><name pos:start="13:22" pos:end="13:27">height</name></name> <operator pos:start="13:29" pos:end="13:29">*</operator> <name pos:start="13:31" pos:end="13:37">slice_y</name>    <operator pos:start="13:42" pos:end="13:42">/</operator> <name pos:start="13:44" pos:end="13:51"><name pos:start="13:44" pos:end="13:44">s</name><operator pos:start="13:45" pos:end="13:46">-&gt;</operator><name pos:start="13:47" pos:end="13:51">num_y</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:52"><decl pos:start="15:5" pos:end="15:51"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">bottom</name> <init pos:start="15:16" pos:end="15:51">= <expr pos:start="15:18" pos:end="15:51"><name pos:start="15:18" pos:end="15:27"><name pos:start="15:18" pos:end="15:19">b1</name><operator pos:start="15:20" pos:end="15:21">-&gt;</operator><name pos:start="15:22" pos:end="15:27">height</name></name> <operator pos:start="15:29" pos:end="15:29">*</operator><operator pos:start="15:30" pos:end="15:30">(</operator><name pos:start="15:31" pos:end="15:37">slice_y</name><operator pos:start="15:38" pos:end="15:38">+</operator><literal type="number" pos:start="15:39" pos:end="15:39">1</literal><operator pos:start="15:40" pos:end="15:40">)</operator> <operator pos:start="15:42" pos:end="15:42">/</operator> <name pos:start="15:44" pos:end="15:51"><name pos:start="15:44" pos:end="15:44">s</name><operator pos:start="15:45" pos:end="15:46">-&gt;</operator><name pos:start="15:47" pos:end="15:51">num_y</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="19:5" pos:end="19:43"><decl pos:start="19:5" pos:end="19:42"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:15">qfactor</name> <init pos:start="19:17" pos:end="19:42">= <expr pos:start="19:19" pos:end="19:42"><name pos:start="19:19" pos:end="19:42"><name pos:start="19:19" pos:end="19:28">qscale_tab</name><index pos:start="19:29" pos:end="19:42">[<expr pos:start="19:30" pos:end="19:41"><name pos:start="19:30" pos:end="19:34">quant</name> <operator pos:start="19:36" pos:end="19:36">&amp;</operator> <literal type="number" pos:start="19:38" pos:end="19:41">0x7f</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:54"><decl pos:start="21:5" pos:end="21:53"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:15">qoffset</name> <init pos:start="21:17" pos:end="21:53">= <expr pos:start="21:19" pos:end="21:53"><name pos:start="21:19" pos:end="21:49"><name pos:start="21:19" pos:end="21:35">qoffset_intra_tab</name><index pos:start="21:36" pos:end="21:49">[<expr pos:start="21:37" pos:end="21:48"><name pos:start="21:37" pos:end="21:41">quant</name> <operator pos:start="21:43" pos:end="21:43">&amp;</operator> <literal type="number" pos:start="21:45" pos:end="21:48">0x7f</literal></expr>]</index></name> <operator pos:start="21:51" pos:end="21:51">+</operator> <literal type="number" pos:start="21:53" pos:end="21:53">2</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="25:5" pos:end="25:53"><decl pos:start="25:5" pos:end="25:52"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:11">uint8_t</name> <modifier pos:start="25:13" pos:end="25:13">*</modifier></type><name pos:start="25:14" pos:end="25:17">buf1</name> <init pos:start="25:19" pos:end="25:52">=      <expr pos:start="25:26" pos:end="25:52"><name pos:start="25:26" pos:end="25:33"><name pos:start="25:26" pos:end="25:27">b1</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:33">ibuf</name></name> <operator pos:start="25:35" pos:end="25:35">+</operator> <name pos:start="25:37" pos:end="25:39">top</name> <operator pos:start="25:41" pos:end="25:41">*</operator> <name pos:start="25:43" pos:end="25:52"><name pos:start="25:43" pos:end="25:44">b1</name><operator pos:start="25:45" pos:end="25:46">-&gt;</operator><name pos:start="25:47" pos:end="25:52">stride</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:59"><decl pos:start="27:5" pos:end="27:58"><type pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:11">uint8_t</name> <modifier pos:start="27:13" pos:end="27:13">*</modifier></type><name pos:start="27:14" pos:end="27:17">buf2</name> <init pos:start="27:19" pos:end="27:58">= <expr pos:start="27:21" pos:end="27:58"><ternary pos:start="27:21" pos:end="27:58"><condition pos:start="27:21" pos:end="27:24"><expr pos:start="27:21" pos:end="27:22"><name pos:start="27:21" pos:end="27:22">b2</name></expr> ?</condition><then pos:start="27:26" pos:end="27:52"> <expr pos:start="27:26" pos:end="27:52"><name pos:start="27:26" pos:end="27:33"><name pos:start="27:26" pos:end="27:27">b2</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:33">ibuf</name></name> <operator pos:start="27:35" pos:end="27:35">+</operator> <name pos:start="27:37" pos:end="27:39">top</name> <operator pos:start="27:41" pos:end="27:41">*</operator> <name pos:start="27:43" pos:end="27:52"><name pos:start="27:43" pos:end="27:44">b2</name><operator pos:start="27:45" pos:end="27:46">-&gt;</operator><name pos:start="27:47" pos:end="27:52">stride</name></name></expr></then><else pos:start="27:53" pos:end="27:58">: <expr pos:start="27:55" pos:end="27:58"><name pos:start="27:55" pos:end="27:58">NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:13"><decl pos:start="29:5" pos:end="29:9"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:9">x</name></decl>, <decl pos:start="29:12" pos:end="29:12"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:12" pos:end="29:12">y</name></decl>;</decl_stmt>

    <comment type="block" pos:start="31:5" pos:end="33:80">/* we have to constantly check for overread since the spec explicitly

       requires this, with the meaning that all remaining coeffs are set to 0 */</comment>

    <if_stmt pos:start="35:5" pos:end="37:15"><if pos:start="35:5" pos:end="37:15">if <condition pos:start="35:8" pos:end="35:39">(<expr pos:start="35:9" pos:end="35:38"><call pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:22">get_bits_count</name><argument_list pos:start="35:23" pos:end="35:26">(<argument pos:start="35:24" pos:end="35:25"><expr pos:start="35:24" pos:end="35:25"><name pos:start="35:24" pos:end="35:25">gb</name></expr></argument>)</argument_list></call> <operator pos:start="35:28" pos:end="35:29">&gt;=</operator> <name pos:start="35:31" pos:end="35:38">bits_end</name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:15"><block_content pos:start="37:9" pos:end="37:15">

        <return pos:start="37:9" pos:end="37:15">return;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="79:5"><if pos:start="41:5" pos:end="59:5">if <condition pos:start="41:8" pos:end="41:18">(<expr pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:17">pshift</name></name></expr>)</condition> <block pos:start="41:20" pos:end="59:5">{<block_content pos:start="43:9" pos:end="57:9">

        <for pos:start="43:9" pos:end="57:9">for <control pos:start="43:13" pos:end="43:38">(<init pos:start="43:14" pos:end="43:21"><expr pos:start="43:14" pos:end="43:20"><name pos:start="43:14" pos:end="43:14">y</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <name pos:start="43:18" pos:end="43:20">top</name></expr>;</init> <condition pos:start="43:23" pos:end="43:33"><expr pos:start="43:23" pos:end="43:32"><name pos:start="43:23" pos:end="43:23">y</name> <operator pos:start="43:25" pos:end="43:25">&lt;</operator> <name pos:start="43:27" pos:end="43:32">bottom</name></expr>;</condition> <incr pos:start="43:35" pos:end="43:37"><expr pos:start="43:35" pos:end="43:37"><name pos:start="43:35" pos:end="43:35">y</name><operator pos:start="43:36" pos:end="43:37">++</operator></expr></incr>)</control> <block pos:start="43:40" pos:end="57:9">{<block_content pos:start="45:13" pos:end="55:35">

            <for pos:start="45:13" pos:end="49:13">for <control pos:start="45:17" pos:end="45:42">(<init pos:start="45:18" pos:end="45:26"><expr pos:start="45:18" pos:end="45:25"><name pos:start="45:18" pos:end="45:18">x</name> <operator pos:start="45:20" pos:end="45:20">=</operator> <name pos:start="45:22" pos:end="45:25">left</name></expr>;</init> <condition pos:start="45:28" pos:end="45:37"><expr pos:start="45:28" pos:end="45:36"><name pos:start="45:28" pos:end="45:28">x</name> <operator pos:start="45:30" pos:end="45:30">&lt;</operator> <name pos:start="45:32" pos:end="45:36">right</name></expr>;</condition> <incr pos:start="45:39" pos:end="45:41"><expr pos:start="45:39" pos:end="45:41"><name pos:start="45:39" pos:end="45:39">x</name><operator pos:start="45:40" pos:end="45:41">++</operator></expr></incr>)</control> <block pos:start="45:44" pos:end="49:13">{<block_content pos:start="47:17" pos:end="47:67">

                <expr_stmt pos:start="47:17" pos:end="47:67"><expr pos:start="47:17" pos:end="47:66"><call pos:start="47:17" pos:end="47:66"><name pos:start="47:17" pos:end="47:28">PARSE_VALUES</name><argument_list pos:start="47:29" pos:end="47:66">(<argument pos:start="47:30" pos:end="47:36"><expr pos:start="47:30" pos:end="47:36"><name pos:start="47:30" pos:end="47:36">int32_t</name></expr></argument>, <argument pos:start="47:39" pos:end="47:39"><expr pos:start="47:39" pos:end="47:39"><name pos:start="47:39" pos:end="47:39">x</name></expr></argument>, <argument pos:start="47:42" pos:end="47:43"><expr pos:start="47:42" pos:end="47:43"><name pos:start="47:42" pos:end="47:43">gb</name></expr></argument>, <argument pos:start="47:46" pos:end="47:53"><expr pos:start="47:46" pos:end="47:53"><name pos:start="47:46" pos:end="47:53">bits_end</name></expr></argument>, <argument pos:start="47:56" pos:end="47:59"><expr pos:start="47:56" pos:end="47:59"><name pos:start="47:56" pos:end="47:59">buf1</name></expr></argument>, <argument pos:start="47:62" pos:end="47:65"><expr pos:start="47:62" pos:end="47:65"><name pos:start="47:62" pos:end="47:65">buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="51:13" pos:end="51:31"><expr pos:start="51:13" pos:end="51:30"><name pos:start="51:13" pos:end="51:16">buf1</name> <operator pos:start="51:18" pos:end="51:19">+=</operator> <name pos:start="51:21" pos:end="51:30"><name pos:start="51:21" pos:end="51:22">b1</name><operator pos:start="51:23" pos:end="51:24">-&gt;</operator><name pos:start="51:25" pos:end="51:30">stride</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="53:13" pos:end="55:35"><if pos:start="53:13" pos:end="55:35">if <condition pos:start="53:16" pos:end="53:21">(<expr pos:start="53:17" pos:end="53:20"><name pos:start="53:17" pos:end="53:20">buf2</name></expr>)</condition><block type="pseudo" pos:start="55:17" pos:end="55:35"><block_content pos:start="55:17" pos:end="55:35">

                <expr_stmt pos:start="55:17" pos:end="55:35"><expr pos:start="55:17" pos:end="55:34"><name pos:start="55:17" pos:end="55:20">buf2</name> <operator pos:start="55:22" pos:end="55:23">+=</operator> <name pos:start="55:25" pos:end="55:34"><name pos:start="55:25" pos:end="55:26">b2</name><operator pos:start="55:27" pos:end="55:28">-&gt;</operator><name pos:start="55:29" pos:end="55:34">stride</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if>

    <else pos:start="61:5" pos:end="79:5">else <block pos:start="61:10" pos:end="79:5">{<block_content pos:start="63:9" pos:end="77:9">

        <for pos:start="63:9" pos:end="77:9">for <control pos:start="63:13" pos:end="63:38">(<init pos:start="63:14" pos:end="63:21"><expr pos:start="63:14" pos:end="63:20"><name pos:start="63:14" pos:end="63:14">y</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <name pos:start="63:18" pos:end="63:20">top</name></expr>;</init> <condition pos:start="63:23" pos:end="63:33"><expr pos:start="63:23" pos:end="63:32"><name pos:start="63:23" pos:end="63:23">y</name> <operator pos:start="63:25" pos:end="63:25">&lt;</operator> <name pos:start="63:27" pos:end="63:32">bottom</name></expr>;</condition> <incr pos:start="63:35" pos:end="63:37"><expr pos:start="63:35" pos:end="63:37"><name pos:start="63:35" pos:end="63:35">y</name><operator pos:start="63:36" pos:end="63:37">++</operator></expr></incr>)</control> <block pos:start="63:40" pos:end="77:9">{<block_content pos:start="65:13" pos:end="75:35">

            <for pos:start="65:13" pos:end="69:13">for <control pos:start="65:17" pos:end="65:42">(<init pos:start="65:18" pos:end="65:26"><expr pos:start="65:18" pos:end="65:25"><name pos:start="65:18" pos:end="65:18">x</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <name pos:start="65:22" pos:end="65:25">left</name></expr>;</init> <condition pos:start="65:28" pos:end="65:37"><expr pos:start="65:28" pos:end="65:36"><name pos:start="65:28" pos:end="65:28">x</name> <operator pos:start="65:30" pos:end="65:30">&lt;</operator> <name pos:start="65:32" pos:end="65:36">right</name></expr>;</condition> <incr pos:start="65:39" pos:end="65:41"><expr pos:start="65:39" pos:end="65:41"><name pos:start="65:39" pos:end="65:39">x</name><operator pos:start="65:40" pos:end="65:41">++</operator></expr></incr>)</control> <block pos:start="65:44" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:67">

                <expr_stmt pos:start="67:17" pos:end="67:67"><expr pos:start="67:17" pos:end="67:66"><call pos:start="67:17" pos:end="67:66"><name pos:start="67:17" pos:end="67:28">PARSE_VALUES</name><argument_list pos:start="67:29" pos:end="67:66">(<argument pos:start="67:30" pos:end="67:36"><expr pos:start="67:30" pos:end="67:36"><name pos:start="67:30" pos:end="67:36">int16_t</name></expr></argument>, <argument pos:start="67:39" pos:end="67:39"><expr pos:start="67:39" pos:end="67:39"><name pos:start="67:39" pos:end="67:39">x</name></expr></argument>, <argument pos:start="67:42" pos:end="67:43"><expr pos:start="67:42" pos:end="67:43"><name pos:start="67:42" pos:end="67:43">gb</name></expr></argument>, <argument pos:start="67:46" pos:end="67:53"><expr pos:start="67:46" pos:end="67:53"><name pos:start="67:46" pos:end="67:53">bits_end</name></expr></argument>, <argument pos:start="67:56" pos:end="67:59"><expr pos:start="67:56" pos:end="67:59"><name pos:start="67:56" pos:end="67:59">buf1</name></expr></argument>, <argument pos:start="67:62" pos:end="67:65"><expr pos:start="67:62" pos:end="67:65"><name pos:start="67:62" pos:end="67:65">buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="71:13" pos:end="71:31"><expr pos:start="71:13" pos:end="71:30"><name pos:start="71:13" pos:end="71:16">buf1</name> <operator pos:start="71:18" pos:end="71:19">+=</operator> <name pos:start="71:21" pos:end="71:30"><name pos:start="71:21" pos:end="71:22">b1</name><operator pos:start="71:23" pos:end="71:24">-&gt;</operator><name pos:start="71:25" pos:end="71:30">stride</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="75:35"><if pos:start="73:13" pos:end="75:35">if <condition pos:start="73:16" pos:end="73:21">(<expr pos:start="73:17" pos:end="73:20"><name pos:start="73:17" pos:end="73:20">buf2</name></expr>)</condition><block type="pseudo" pos:start="75:17" pos:end="75:35"><block_content pos:start="75:17" pos:end="75:35">

                <expr_stmt pos:start="75:17" pos:end="75:35"><expr pos:start="75:17" pos:end="75:34"><name pos:start="75:17" pos:end="75:20">buf2</name> <operator pos:start="75:22" pos:end="75:23">+=</operator> <name pos:start="75:25" pos:end="75:34"><name pos:start="75:25" pos:end="75:26">b2</name><operator pos:start="75:27" pos:end="75:28">-&gt;</operator><name pos:start="75:29" pos:end="75:34">stride</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
