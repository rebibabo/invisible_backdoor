<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19749.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">adx_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:62">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

			    <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

			    <parameter pos:start="5:29" pos:end="5:47"><decl pos:start="5:29" pos:end="5:47"><type pos:start="5:29" pos:end="5:47"><specifier pos:start="5:29" pos:end="5:33">const</specifier> <name pos:start="5:35" pos:end="5:41">uint8_t</name> <modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:47">buf0</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:61"><decl pos:start="5:50" pos:end="5:61"><type pos:start="5:50" pos:end="5:61"><name pos:start="5:50" pos:end="5:52">int</name></type> <name pos:start="5:54" pos:end="5:61">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="111:1">{<block_content pos:start="9:9" pos:end="109:24">

	<decl_stmt pos:start="9:9" pos:end="9:41"><decl pos:start="9:9" pos:end="9:40"><type pos:start="9:9" pos:end="9:20"><name pos:start="9:9" pos:end="9:18">ADXContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">c</name> <init pos:start="9:23" pos:end="9:40">= <expr pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:29">avctx</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:30"><decl pos:start="11:9" pos:end="11:29"><type pos:start="11:9" pos:end="11:15"><name pos:start="11:9" pos:end="11:13">short</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:22">samples</name> <init pos:start="11:24" pos:end="11:29">= <expr pos:start="11:26" pos:end="11:29"><name pos:start="11:26" pos:end="11:29">data</name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="13:9" pos:end="13:34"><decl pos:start="13:9" pos:end="13:33"><type pos:start="13:9" pos:end="13:23"><specifier pos:start="13:9" pos:end="13:13">const</specifier> <name pos:start="13:15" pos:end="13:21">uint8_t</name> <modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:26">buf</name> <init pos:start="13:28" pos:end="13:33">= <expr pos:start="13:30" pos:end="13:33"><name pos:start="13:30" pos:end="13:33">buf0</name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="15:9" pos:end="15:28"><decl pos:start="15:9" pos:end="15:27"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:16">rest</name> <init pos:start="15:18" pos:end="15:27">= <expr pos:start="15:20" pos:end="15:27"><name pos:start="15:20" pos:end="15:27">buf_size</name></expr></init></decl>;</decl_stmt>



	<if_stmt pos:start="19:9" pos:end="31:9"><if pos:start="19:9" pos:end="31:9">if <condition pos:start="19:12" pos:end="19:30">(<expr pos:start="19:13" pos:end="19:29"><operator pos:start="19:13" pos:end="19:13">!</operator><name pos:start="19:14" pos:end="19:29"><name pos:start="19:14" pos:end="19:14">c</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:29">header_parsed</name></name></expr>)</condition> <block pos:start="19:32" pos:end="31:9">{<block_content pos:start="21:17" pos:end="29:32">

		<decl_stmt pos:start="21:17" pos:end="21:64"><decl pos:start="21:17" pos:end="21:63"><type pos:start="21:17" pos:end="21:19"><name pos:start="21:17" pos:end="21:19">int</name></type> <name pos:start="21:21" pos:end="21:27">hdrsize</name> <init pos:start="21:29" pos:end="21:63">= <expr pos:start="21:31" pos:end="21:63"><call pos:start="21:31" pos:end="21:63"><name pos:start="21:31" pos:end="21:47">adx_decode_header</name><argument_list pos:start="21:48" pos:end="21:63">(<argument pos:start="21:49" pos:end="21:53"><expr pos:start="21:49" pos:end="21:53"><name pos:start="21:49" pos:end="21:53">avctx</name></expr></argument>,<argument pos:start="21:55" pos:end="21:57"><expr pos:start="21:55" pos:end="21:57"><name pos:start="21:55" pos:end="21:57">buf</name></expr></argument>,<argument pos:start="21:59" pos:end="21:62"><expr pos:start="21:59" pos:end="21:62"><name pos:start="21:59" pos:end="21:62">rest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt pos:start="23:17" pos:end="23:42"><if pos:start="23:17" pos:end="23:42">if <condition pos:start="23:20" pos:end="23:31">(<expr pos:start="23:21" pos:end="23:30"><name pos:start="23:21" pos:end="23:27">hdrsize</name><operator pos:start="23:28" pos:end="23:29">==</operator><literal type="number" pos:start="23:30" pos:end="23:30">0</literal></expr>)</condition><block type="pseudo" pos:start="23:33" pos:end="23:42"><block_content pos:start="23:33" pos:end="23:42"> <return pos:start="23:33" pos:end="23:42">return <expr pos:start="23:40" pos:end="23:41"><operator pos:start="23:40" pos:end="23:40">-</operator><literal type="number" pos:start="23:41" pos:end="23:41">1</literal></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt pos:start="25:17" pos:end="25:37"><expr pos:start="25:17" pos:end="25:36"><name pos:start="25:17" pos:end="25:32"><name pos:start="25:17" pos:end="25:17">c</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:32">header_parsed</name></name> <operator pos:start="25:34" pos:end="25:34">=</operator> <literal type="number" pos:start="25:36" pos:end="25:36">1</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="27:17" pos:end="27:32"><expr pos:start="27:17" pos:end="27:31"><name pos:start="27:17" pos:end="27:19">buf</name>  <operator pos:start="27:22" pos:end="27:23">+=</operator> <name pos:start="27:25" pos:end="27:31">hdrsize</name></expr>;</expr_stmt>

		<expr_stmt pos:start="29:17" pos:end="29:32"><expr pos:start="29:17" pos:end="29:31"><name pos:start="29:17" pos:end="29:20">rest</name> <operator pos:start="29:22" pos:end="29:23">-=</operator> <name pos:start="29:25" pos:end="29:31">hdrsize</name></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="35:9" pos:end="59:9"><if pos:start="35:9" pos:end="59:9">if <condition pos:start="35:12" pos:end="35:23">(<expr pos:start="35:13" pos:end="35:22"><name pos:start="35:13" pos:end="35:22"><name pos:start="35:13" pos:end="35:13">c</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:22">in_temp</name></name></expr>)</condition> <block pos:start="35:25" pos:end="59:9">{<block_content pos:start="37:17" pos:end="57:17">

		<decl_stmt pos:start="37:17" pos:end="37:63"><decl pos:start="37:17" pos:end="37:62"><type pos:start="37:17" pos:end="37:19"><name pos:start="37:17" pos:end="37:19">int</name></type> <name pos:start="37:21" pos:end="37:28">copysize</name> <init pos:start="37:30" pos:end="37:62">= <expr pos:start="37:32" pos:end="37:62"><literal type="number" pos:start="37:32" pos:end="37:33">18</literal><operator pos:start="37:34" pos:end="37:34">*</operator><name pos:start="37:35" pos:end="37:49"><name pos:start="37:35" pos:end="37:39">avctx</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:49">channels</name></name> <operator pos:start="37:51" pos:end="37:51">-</operator> <name pos:start="37:53" pos:end="37:62"><name pos:start="37:53" pos:end="37:53">c</name><operator pos:start="37:54" pos:end="37:55">-&gt;</operator><name pos:start="37:56" pos:end="37:62">in_temp</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="39:17" pos:end="39:60"><expr pos:start="39:17" pos:end="39:59"><call pos:start="39:17" pos:end="39:59"><name pos:start="39:17" pos:end="39:22">memcpy</name><argument_list pos:start="39:23" pos:end="39:59">(<argument pos:start="39:24" pos:end="39:45"><expr pos:start="39:24" pos:end="39:45"><name pos:start="39:24" pos:end="39:34"><name pos:start="39:24" pos:end="39:24">c</name><operator pos:start="39:25" pos:end="39:26">-&gt;</operator><name pos:start="39:27" pos:end="39:34">dec_temp</name></name><operator pos:start="39:35" pos:end="39:35">+</operator><name pos:start="39:36" pos:end="39:45"><name pos:start="39:36" pos:end="39:36">c</name><operator pos:start="39:37" pos:end="39:38">-&gt;</operator><name pos:start="39:39" pos:end="39:45">in_temp</name></name></expr></argument>,<argument pos:start="39:47" pos:end="39:49"><expr pos:start="39:47" pos:end="39:49"><name pos:start="39:47" pos:end="39:49">buf</name></expr></argument>,<argument pos:start="39:51" pos:end="39:58"><expr pos:start="39:51" pos:end="39:58"><name pos:start="39:51" pos:end="39:58">copysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="41:17" pos:end="41:33"><expr pos:start="41:17" pos:end="41:32"><name pos:start="41:17" pos:end="41:20">rest</name> <operator pos:start="41:22" pos:end="41:23">-=</operator> <name pos:start="41:25" pos:end="41:32">copysize</name></expr>;</expr_stmt>

		<expr_stmt pos:start="43:17" pos:end="43:33"><expr pos:start="43:17" pos:end="43:32"><name pos:start="43:17" pos:end="43:19">buf</name>  <operator pos:start="43:22" pos:end="43:23">+=</operator> <name pos:start="43:25" pos:end="43:32">copysize</name></expr>;</expr_stmt>

		<if_stmt pos:start="45:17" pos:end="57:17"><if pos:start="45:17" pos:end="51:17">if <condition pos:start="45:20" pos:end="45:39">(<expr pos:start="45:21" pos:end="45:38"><name pos:start="45:21" pos:end="45:35"><name pos:start="45:21" pos:end="45:25">avctx</name><operator pos:start="45:26" pos:end="45:27">-&gt;</operator><name pos:start="45:28" pos:end="45:35">channels</name></name><operator pos:start="45:36" pos:end="45:37">==</operator><literal type="number" pos:start="45:38" pos:end="45:38">1</literal></expr>)</condition> <block pos:start="45:41" pos:end="51:17">{<block_content pos:start="47:25" pos:end="49:38">

			<expr_stmt pos:start="47:25" pos:end="47:64"><expr pos:start="47:25" pos:end="47:63"><call pos:start="47:25" pos:end="47:63"><name pos:start="47:25" pos:end="47:34">adx_decode</name><argument_list pos:start="47:35" pos:end="47:63">(<argument pos:start="47:36" pos:end="47:42"><expr pos:start="47:36" pos:end="47:42"><name pos:start="47:36" pos:end="47:42">samples</name></expr></argument>,<argument pos:start="47:44" pos:end="47:54"><expr pos:start="47:44" pos:end="47:54"><name pos:start="47:44" pos:end="47:54"><name pos:start="47:44" pos:end="47:44">c</name><operator pos:start="47:45" pos:end="47:46">-&gt;</operator><name pos:start="47:47" pos:end="47:54">dec_temp</name></name></expr></argument>,<argument pos:start="47:56" pos:end="47:62"><expr pos:start="47:56" pos:end="47:62"><name pos:start="47:56" pos:end="47:62"><name pos:start="47:56" pos:end="47:56">c</name><operator pos:start="47:57" pos:end="47:58">-&gt;</operator><name pos:start="47:59" pos:end="47:62">prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="49:25" pos:end="49:38"><expr pos:start="49:25" pos:end="49:37"><name pos:start="49:25" pos:end="49:31">samples</name> <operator pos:start="49:33" pos:end="49:34">+=</operator> <literal type="number" pos:start="49:36" pos:end="49:37">32</literal></expr>;</expr_stmt>

		</block_content>}</block></if> <else pos:start="51:19" pos:end="57:17">else <block pos:start="51:24" pos:end="57:17">{<block_content pos:start="53:25" pos:end="55:40">

			<expr_stmt pos:start="53:25" pos:end="53:71"><expr pos:start="53:25" pos:end="53:70"><call pos:start="53:25" pos:end="53:70"><name pos:start="53:25" pos:end="53:41">adx_decode_stereo</name><argument_list pos:start="53:42" pos:end="53:70">(<argument pos:start="53:43" pos:end="53:49"><expr pos:start="53:43" pos:end="53:49"><name pos:start="53:43" pos:end="53:49">samples</name></expr></argument>,<argument pos:start="53:51" pos:end="53:61"><expr pos:start="53:51" pos:end="53:61"><name pos:start="53:51" pos:end="53:61"><name pos:start="53:51" pos:end="53:51">c</name><operator pos:start="53:52" pos:end="53:53">-&gt;</operator><name pos:start="53:54" pos:end="53:61">dec_temp</name></name></expr></argument>,<argument pos:start="53:63" pos:end="53:69"><expr pos:start="53:63" pos:end="53:69"><name pos:start="53:63" pos:end="53:69"><name pos:start="53:63" pos:end="53:63">c</name><operator pos:start="53:64" pos:end="53:65">-&gt;</operator><name pos:start="53:66" pos:end="53:69">prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="55:25" pos:end="55:40"><expr pos:start="55:25" pos:end="55:39"><name pos:start="55:25" pos:end="55:31">samples</name> <operator pos:start="55:33" pos:end="55:34">+=</operator> <literal type="number" pos:start="55:36" pos:end="55:37">32</literal><operator pos:start="55:38" pos:end="55:38">*</operator><literal type="number" pos:start="55:39" pos:end="55:39">2</literal></expr>;</expr_stmt>

		</block_content>}</block></else></if_stmt>

	</block_content>}</block></if></if_stmt>

	<comment type="line" pos:start="61:9" pos:end="61:10">//</comment>

	<if_stmt pos:start="63:9" pos:end="91:9"><if pos:start="63:9" pos:end="77:9">if <condition pos:start="63:12" pos:end="63:31">(<expr pos:start="63:13" pos:end="63:30"><name pos:start="63:13" pos:end="63:27"><name pos:start="63:13" pos:end="63:17">avctx</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:27">channels</name></name><operator pos:start="63:28" pos:end="63:29">==</operator><literal type="number" pos:start="63:30" pos:end="63:30">1</literal></expr>)</condition> <block pos:start="63:33" pos:end="77:9">{<block_content pos:start="65:17" pos:end="75:17">

		<while pos:start="65:17" pos:end="75:17">while<condition pos:start="65:22" pos:end="65:31">(<expr pos:start="65:23" pos:end="65:30"><name pos:start="65:23" pos:end="65:26">rest</name><operator pos:start="65:27" pos:end="65:28">&gt;=</operator><literal type="number" pos:start="65:29" pos:end="65:30">18</literal></expr>)</condition> <block pos:start="65:33" pos:end="75:17">{<block_content pos:start="67:25" pos:end="73:36">

			<expr_stmt pos:start="67:25" pos:end="67:56"><expr pos:start="67:25" pos:end="67:55"><call pos:start="67:25" pos:end="67:55"><name pos:start="67:25" pos:end="67:34">adx_decode</name><argument_list pos:start="67:35" pos:end="67:55">(<argument pos:start="67:36" pos:end="67:42"><expr pos:start="67:36" pos:end="67:42"><name pos:start="67:36" pos:end="67:42">samples</name></expr></argument>,<argument pos:start="67:44" pos:end="67:46"><expr pos:start="67:44" pos:end="67:46"><name pos:start="67:44" pos:end="67:46">buf</name></expr></argument>,<argument pos:start="67:48" pos:end="67:54"><expr pos:start="67:48" pos:end="67:54"><name pos:start="67:48" pos:end="67:54"><name pos:start="67:48" pos:end="67:48">c</name><operator pos:start="67:49" pos:end="67:50">-&gt;</operator><name pos:start="67:51" pos:end="67:54">prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="69:25" pos:end="69:33"><expr pos:start="69:25" pos:end="69:32"><name pos:start="69:25" pos:end="69:28">rest</name><operator pos:start="69:29" pos:end="69:30">-=</operator><literal type="number" pos:start="69:31" pos:end="69:32">18</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="71:25" pos:end="71:32"><expr pos:start="71:25" pos:end="71:31"><name pos:start="71:25" pos:end="71:27">buf</name><operator pos:start="71:28" pos:end="71:29">+=</operator><literal type="number" pos:start="71:30" pos:end="71:31">18</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="73:25" pos:end="73:36"><expr pos:start="73:25" pos:end="73:35"><name pos:start="73:25" pos:end="73:31">samples</name><operator pos:start="73:32" pos:end="73:33">+=</operator><literal type="number" pos:start="73:34" pos:end="73:35">32</literal></expr>;</expr_stmt>

		</block_content>}</block></while>

	</block_content>}</block></if> <else pos:start="77:11" pos:end="91:9">else <block pos:start="77:16" pos:end="91:9">{<block_content pos:start="79:17" pos:end="89:17">

		<while pos:start="79:17" pos:end="89:17">while<condition pos:start="79:22" pos:end="79:33">(<expr pos:start="79:23" pos:end="79:32"><name pos:start="79:23" pos:end="79:26">rest</name><operator pos:start="79:27" pos:end="79:28">&gt;=</operator><literal type="number" pos:start="79:29" pos:end="79:30">18</literal><operator pos:start="79:31" pos:end="79:31">*</operator><literal type="number" pos:start="79:32" pos:end="79:32">2</literal></expr>)</condition> <block pos:start="79:35" pos:end="89:17">{<block_content pos:start="81:25" pos:end="87:38">

			<expr_stmt pos:start="81:25" pos:end="81:63"><expr pos:start="81:25" pos:end="81:62"><call pos:start="81:25" pos:end="81:62"><name pos:start="81:25" pos:end="81:41">adx_decode_stereo</name><argument_list pos:start="81:42" pos:end="81:62">(<argument pos:start="81:43" pos:end="81:49"><expr pos:start="81:43" pos:end="81:49"><name pos:start="81:43" pos:end="81:49">samples</name></expr></argument>,<argument pos:start="81:51" pos:end="81:53"><expr pos:start="81:51" pos:end="81:53"><name pos:start="81:51" pos:end="81:53">buf</name></expr></argument>,<argument pos:start="81:55" pos:end="81:61"><expr pos:start="81:55" pos:end="81:61"><name pos:start="81:55" pos:end="81:61"><name pos:start="81:55" pos:end="81:55">c</name><operator pos:start="81:56" pos:end="81:57">-&gt;</operator><name pos:start="81:58" pos:end="81:61">prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="83:25" pos:end="83:35"><expr pos:start="83:25" pos:end="83:34"><name pos:start="83:25" pos:end="83:28">rest</name><operator pos:start="83:29" pos:end="83:30">-=</operator><literal type="number" pos:start="83:31" pos:end="83:32">18</literal><operator pos:start="83:33" pos:end="83:33">*</operator><literal type="number" pos:start="83:34" pos:end="83:34">2</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="85:25" pos:end="85:34"><expr pos:start="85:25" pos:end="85:33"><name pos:start="85:25" pos:end="85:27">buf</name><operator pos:start="85:28" pos:end="85:29">+=</operator><literal type="number" pos:start="85:30" pos:end="85:31">18</literal><operator pos:start="85:32" pos:end="85:32">*</operator><literal type="number" pos:start="85:33" pos:end="85:33">2</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="87:25" pos:end="87:38"><expr pos:start="87:25" pos:end="87:37"><name pos:start="87:25" pos:end="87:31">samples</name><operator pos:start="87:32" pos:end="87:33">+=</operator><literal type="number" pos:start="87:34" pos:end="87:35">32</literal><operator pos:start="87:36" pos:end="87:36">*</operator><literal type="number" pos:start="87:37" pos:end="87:37">2</literal></expr>;</expr_stmt>

		</block_content>}</block></while>

	</block_content>}</block></else></if_stmt>

	<comment type="line" pos:start="93:9" pos:end="93:10">//</comment>

	<expr_stmt pos:start="95:9" pos:end="95:26"><expr pos:start="95:9" pos:end="95:25"><name pos:start="95:9" pos:end="95:18"><name pos:start="95:9" pos:end="95:9">c</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:18">in_temp</name></name> <operator pos:start="95:20" pos:end="95:20">=</operator> <name pos:start="95:22" pos:end="95:25">rest</name></expr>;</expr_stmt>

	<if_stmt pos:start="97:9" pos:end="103:9"><if pos:start="97:9" pos:end="103:9">if <condition pos:start="97:12" pos:end="97:17">(<expr pos:start="97:13" pos:end="97:16"><name pos:start="97:13" pos:end="97:16">rest</name></expr>)</condition> <block pos:start="97:19" pos:end="103:9">{<block_content pos:start="99:17" pos:end="101:26">

		<expr_stmt pos:start="99:17" pos:end="99:45"><expr pos:start="99:17" pos:end="99:44"><call pos:start="99:17" pos:end="99:44"><name pos:start="99:17" pos:end="99:22">memcpy</name><argument_list pos:start="99:23" pos:end="99:44">(<argument pos:start="99:24" pos:end="99:34"><expr pos:start="99:24" pos:end="99:34"><name pos:start="99:24" pos:end="99:34"><name pos:start="99:24" pos:end="99:24">c</name><operator pos:start="99:25" pos:end="99:26">-&gt;</operator><name pos:start="99:27" pos:end="99:34">dec_temp</name></name></expr></argument>,<argument pos:start="99:36" pos:end="99:38"><expr pos:start="99:36" pos:end="99:38"><name pos:start="99:36" pos:end="99:38">buf</name></expr></argument>,<argument pos:start="99:40" pos:end="99:43"><expr pos:start="99:40" pos:end="99:43"><name pos:start="99:40" pos:end="99:43">rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="101:17" pos:end="101:26"><expr pos:start="101:17" pos:end="101:25"><name pos:start="101:17" pos:end="101:19">buf</name><operator pos:start="101:20" pos:end="101:21">+=</operator><name pos:start="101:22" pos:end="101:25">rest</name></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="105:9" pos:end="105:56"><expr pos:start="105:9" pos:end="105:55"><operator pos:start="105:9" pos:end="105:9">*</operator><name pos:start="105:10" pos:end="105:18">data_size</name> <operator pos:start="105:20" pos:end="105:20">=</operator> <operator pos:start="105:22" pos:end="105:22">(</operator><name pos:start="105:23" pos:end="105:29">uint8_t</name><operator pos:start="105:30" pos:end="105:30">*</operator><operator pos:start="105:31" pos:end="105:31">)</operator><name pos:start="105:32" pos:end="105:38">samples</name> <operator pos:start="105:40" pos:end="105:40">-</operator> <operator pos:start="105:42" pos:end="105:42">(</operator><name pos:start="105:43" pos:end="105:49">uint8_t</name><operator pos:start="105:50" pos:end="105:50">*</operator><operator pos:start="105:51" pos:end="105:51">)</operator><name pos:start="105:52" pos:end="105:55">data</name></expr>;</expr_stmt>

<comment type="line" pos:start="107:1" pos:end="107:61">//	printf("%d:%d ",buf-buf0,*data_size); fflush(stdout);</comment>

	<return pos:start="109:9" pos:end="109:24">return <expr pos:start="109:16" pos:end="109:23"><name pos:start="109:16" pos:end="109:18">buf</name><operator pos:start="109:19" pos:end="109:19">-</operator><name pos:start="109:20" pos:end="109:23">buf0</name></expr>;</return>

</block_content>}</block></function>
</unit>
