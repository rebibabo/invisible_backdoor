<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1399.c" pos:tabs="8"><decl_stmt pos:start="1:1" pos:end="51:1"><decl pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">do_unassigned_access</name><argument_list pos:start="1:33" pos:end="6:0">(<argument pos:start="1:34" pos:end="1:50"><expr pos:start="1:34" pos:end="1:50"><name pos:start="1:34" pos:end="1:45">target_ulong</name> <name pos:start="1:47" pos:end="1:50">addr</name></expr></argument>, <argument pos:start="1:53" pos:end="1:64"><expr pos:start="1:53" pos:end="1:64"><name pos:start="1:53" pos:end="1:55">int</name> <name pos:start="1:57" pos:end="1:64">is_write</name></expr></argument>, <argument pos:start="1:67" pos:end="1:77"><expr pos:start="1:67" pos:end="1:77"><name pos:start="1:67" pos:end="1:69">int</name> <name pos:start="1:71" pos:end="1:77">is_exec</name></expr></argument>,

                          <argument pos:start="3:27" pos:end="3:36"><expr pos:start="3:27" pos:end="3:36"><name pos:start="3:27" pos:end="3:29">int</name> <name pos:start="3:31" pos:end="3:36">is_asi</name></expr></argument>, <argument pos:start="3:39" pos:end="3:46"><expr pos:start="3:39" pos:end="3:46"><name pos:start="3:39" pos:end="3:41">int</name> <name pos:start="3:43" pos:end="3:46">size</name></expr></argument>)</argument_list>

<cpp:else pos:start="5:1" pos:end="5:5">#<cpp:directive pos:start="5:2" pos:end="5:5">else</cpp:directive></cpp:else>

<name pos:start="7:1" pos:end="7:4">void</name> <name pos:start="7:6" pos:end="7:25">do_unassigned_access</name><argument_list pos:start="7:26" pos:end="12:0">(<argument pos:start="7:27" pos:end="7:49"><expr pos:start="7:27" pos:end="7:49"><name pos:start="7:27" pos:end="7:44">target_phys_addr_t</name> <name pos:start="7:46" pos:end="7:49">addr</name></expr></argument>, <argument pos:start="7:52" pos:end="7:63"><expr pos:start="7:52" pos:end="7:63"><name pos:start="7:52" pos:end="7:54">int</name> <name pos:start="7:56" pos:end="7:63">is_write</name></expr></argument>, <argument pos:start="7:66" pos:end="7:76"><expr pos:start="7:66" pos:end="7:76"><name pos:start="7:66" pos:end="7:68">int</name> <name pos:start="7:70" pos:end="7:76">is_exec</name></expr></argument>,

                          <argument pos:start="9:27" pos:end="9:36"><expr pos:start="9:27" pos:end="9:36"><name pos:start="9:27" pos:end="9:29">int</name> <name pos:start="9:31" pos:end="9:36">is_asi</name></expr></argument>, <argument pos:start="9:39" pos:end="9:46"><expr pos:start="9:39" pos:end="9:46"><name pos:start="9:39" pos:end="9:41">int</name> <name pos:start="9:43" pos:end="9:46">size</name></expr></argument>)</argument_list>

<cpp:endif pos:start="11:1" pos:end="11:6">#<cpp:directive pos:start="11:2" pos:end="11:6">endif</cpp:directive></cpp:endif>

<block pos:start="13:1" pos:end="51:1">{<block_content pos:start="15:5" pos:end="49:20">

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:23">saved_env</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="21:24">/* XXX: hack to restore env in all cases, even if not called from

       generated code */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:20"><expr pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:13">saved_env</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <name pos:start="23:17" pos:end="23:19">env</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="30:0"><expr pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:7">env</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <name pos:start="25:11" pos:end="25:24">cpu_single_env</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="29:1" pos:end="29:23">#<cpp:directive pos:start="29:2" pos:end="29:6">ifdef</cpp:directive> <name pos:start="29:8" pos:end="29:23">DEBUG_UNASSIGNED</name></cpp:ifdef>

    <expr_stmt pos:start="31:5" pos:end="36:0"><expr pos:start="31:5" pos:end="33:31"><call pos:start="31:5" pos:end="33:31"><name pos:start="31:5" pos:end="31:10">printf</name><argument_list pos:start="31:11" pos:end="33:31">(<argument pos:start="31:12" pos:end="33:15"><expr pos:start="31:12" pos:end="33:15"><literal type="string" pos:start="31:12" pos:end="31:38">"Unassigned mem access to "</literal> <name pos:start="31:40" pos:end="31:53">TARGET_FMT_plx</name> <literal type="string" pos:start="31:55" pos:end="31:62">" from "</literal> <name pos:start="31:64" pos:end="31:76">TARGET_FMT_lx</name>

           <literal type="string" pos:start="33:12" pos:end="33:15">"\n"</literal></expr></argument>, <argument pos:start="33:18" pos:end="33:21"><expr pos:start="33:18" pos:end="33:21"><name pos:start="33:18" pos:end="33:21">addr</name></expr></argument>, <argument pos:start="33:24" pos:end="33:30"><expr pos:start="33:24" pos:end="33:30"><name pos:start="33:24" pos:end="33:30"><name pos:start="33:24" pos:end="33:26">env</name><operator pos:start="33:27" pos:end="33:28">-&gt;</operator><name pos:start="33:29" pos:end="33:30">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="39:5" pos:end="45:40"><if pos:start="39:5" pos:end="41:40">if <condition pos:start="39:8" pos:end="39:16">(<expr pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:15">is_exec</name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:40"><block_content pos:start="41:9" pos:end="41:40">

        <expr_stmt pos:start="41:9" pos:end="41:40"><expr pos:start="41:9" pos:end="41:39"><call pos:start="41:9" pos:end="41:39"><name pos:start="41:9" pos:end="41:23">raise_exception</name><argument_list pos:start="41:24" pos:end="41:39">(<argument pos:start="41:25" pos:end="41:38"><expr pos:start="41:25" pos:end="41:38"><name pos:start="41:25" pos:end="41:38">TT_CODE_ACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="43:5" pos:end="45:40">else<block type="pseudo" pos:start="45:9" pos:end="45:40"><block_content pos:start="45:9" pos:end="45:40">

        <expr_stmt pos:start="45:9" pos:end="45:40"><expr pos:start="45:9" pos:end="45:39"><call pos:start="45:9" pos:end="45:39"><name pos:start="45:9" pos:end="45:23">raise_exception</name><argument_list pos:start="45:24" pos:end="45:39">(<argument pos:start="45:25" pos:end="45:38"><expr pos:start="45:25" pos:end="45:38"><name pos:start="45:25" pos:end="45:38">TT_DATA_ACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:20"><expr pos:start="49:5" pos:end="49:19"><name pos:start="49:5" pos:end="49:7">env</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <name pos:start="49:11" pos:end="49:19">saved_env</name></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>
</unit>
