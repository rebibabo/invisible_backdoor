<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14619.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:28">avpriv_adx_decode_header</name><parameter_list pos:start="1:29" pos:end="3:71">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:70"><decl pos:start="1:53" pos:end="1:70"><type pos:start="1:53" pos:end="1:70"><specifier pos:start="1:53" pos:end="1:57">const</specifier> <name pos:start="1:59" pos:end="1:65">uint8_t</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:70">buf</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:40"><decl pos:start="3:30" pos:end="3:40"><type pos:start="3:30" pos:end="3:40"><name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:40">bufsize</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:58"><decl pos:start="3:43" pos:end="3:58"><type pos:start="3:43" pos:end="3:58"><name pos:start="3:43" pos:end="3:45">int</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:58">header_size</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:70"><decl pos:start="3:61" pos:end="3:70"><type pos:start="3:61" pos:end="3:70"><name pos:start="3:61" pos:end="3:63">int</name> <modifier pos:start="3:65" pos:end="3:65">*</modifier></type><name pos:start="3:66" pos:end="3:70">coeff</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="89:1">{<block_content pos:start="7:5" pos:end="87:13">

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">offset</name></decl>, <decl pos:start="7:17" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:22">cutoff</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:35"><if pos:start="11:5" pos:end="13:35">if <condition pos:start="11:8" pos:end="11:21">(<expr pos:start="11:9" pos:end="11:20"><name pos:start="11:9" pos:end="11:15">bufsize</name> <operator pos:start="11:17" pos:end="11:17">&lt;</operator> <literal type="number" pos:start="11:19" pos:end="11:20">24</literal></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:35"><block_content pos:start="13:9" pos:end="13:35">

        <return pos:start="13:9" pos:end="13:35">return <expr pos:start="13:16" pos:end="13:34"><name pos:start="13:16" pos:end="13:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="17:5" pos:end="19:35"><if pos:start="17:5" pos:end="19:35">if <condition pos:start="17:8" pos:end="17:31">(<expr pos:start="17:9" pos:end="17:30"><call pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:15">AV_RB16</name><argument_list pos:start="17:16" pos:end="17:20">(<argument pos:start="17:17" pos:end="17:19"><expr pos:start="17:17" pos:end="17:19"><name pos:start="17:17" pos:end="17:19">buf</name></expr></argument>)</argument_list></call> <operator pos:start="17:22" pos:end="17:23">!=</operator> <literal type="number" pos:start="17:25" pos:end="17:30">0x8000</literal></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:35"><block_content pos:start="19:9" pos:end="19:35">

        <return pos:start="19:9" pos:end="19:35">return <expr pos:start="19:16" pos:end="19:34"><name pos:start="19:16" pos:end="19:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:34"><expr pos:start="21:5" pos:end="21:33"><name pos:start="21:5" pos:end="21:10">offset</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <call pos:start="21:14" pos:end="21:29"><name pos:start="21:14" pos:end="21:20">AV_RB16</name><argument_list pos:start="21:21" pos:end="21:29">(<argument pos:start="21:22" pos:end="21:28"><expr pos:start="21:22" pos:end="21:28"><name pos:start="21:22" pos:end="21:24">buf</name> <operator pos:start="21:26" pos:end="21:26">+</operator> <literal type="number" pos:start="21:28" pos:end="21:28">2</literal></expr></argument>)</argument_list></call> <operator pos:start="21:31" pos:end="21:31">+</operator> <literal type="number" pos:start="21:33" pos:end="21:33">4</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:70">/* if copyright string is within the provided data, validate it */</comment>

    <if_stmt pos:start="27:5" pos:end="29:35"><if pos:start="27:5" pos:end="29:35">if <condition pos:start="27:8" pos:end="27:67">(<expr pos:start="27:9" pos:end="27:66"><name pos:start="27:9" pos:end="27:15">bufsize</name> <operator pos:start="27:17" pos:end="27:18">&gt;=</operator> <name pos:start="27:20" pos:end="27:25">offset</name> <operator pos:start="27:27" pos:end="27:28">&amp;&amp;</operator> <call pos:start="27:30" pos:end="27:66"><name pos:start="27:30" pos:end="27:35">memcmp</name><argument_list pos:start="27:36" pos:end="27:66">(<argument pos:start="27:37" pos:end="27:52"><expr pos:start="27:37" pos:end="27:52"><name pos:start="27:37" pos:end="27:39">buf</name> <operator pos:start="27:41" pos:end="27:41">+</operator> <name pos:start="27:43" pos:end="27:48">offset</name> <operator pos:start="27:50" pos:end="27:50">-</operator> <literal type="number" pos:start="27:52" pos:end="27:52">6</literal></expr></argument>, <argument pos:start="27:55" pos:end="27:62"><expr pos:start="27:55" pos:end="27:62"><literal type="string" pos:start="27:55" pos:end="27:62">"(c)CRI"</literal></expr></argument>, <argument pos:start="27:65" pos:end="27:65"><expr pos:start="27:65" pos:end="27:65"><literal type="number" pos:start="27:65" pos:end="27:65">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:35"><block_content pos:start="29:9" pos:end="29:35">

        <return pos:start="29:9" pos:end="29:35">return <expr pos:start="29:16" pos:end="29:34"><name pos:start="29:16" pos:end="29:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:59">/* check for encoding=3 block_size=18, sample_size=4 */</comment>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:51">(<expr pos:start="35:9" pos:end="35:50"><name pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:11">buf</name><index pos:start="35:12" pos:end="35:14">[<expr pos:start="35:13" pos:end="35:13"><literal type="number" pos:start="35:13" pos:end="35:13">4</literal></expr>]</index></name> <operator pos:start="35:16" pos:end="35:17">!=</operator> <literal type="number" pos:start="35:19" pos:end="35:19">3</literal> <operator pos:start="35:21" pos:end="35:22">||</operator> <name pos:start="35:24" pos:end="35:29"><name pos:start="35:24" pos:end="35:26">buf</name><index pos:start="35:27" pos:end="35:29">[<expr pos:start="35:28" pos:end="35:28"><literal type="number" pos:start="35:28" pos:end="35:28">5</literal></expr>]</index></name> <operator pos:start="35:31" pos:end="35:32">!=</operator> <literal type="number" pos:start="35:34" pos:end="35:35">18</literal> <operator pos:start="35:37" pos:end="35:38">||</operator> <name pos:start="35:40" pos:end="35:45"><name pos:start="35:40" pos:end="35:42">buf</name><index pos:start="35:43" pos:end="35:45">[<expr pos:start="35:44" pos:end="35:44"><literal type="number" pos:start="35:44" pos:end="35:44">6</literal></expr>]</index></name> <operator pos:start="35:47" pos:end="35:48">!=</operator> <literal type="number" pos:start="35:50" pos:end="35:50">4</literal></expr>)</condition> <block pos:start="35:53" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:36">

        <expr_stmt pos:start="37:9" pos:end="37:65"><expr pos:start="37:9" pos:end="37:64"><call pos:start="37:9" pos:end="37:64"><name pos:start="37:9" pos:end="37:29">av_log_ask_for_sample</name><argument_list pos:start="37:30" pos:end="37:64">(<argument pos:start="37:31" pos:end="37:35"><expr pos:start="37:31" pos:end="37:35"><name pos:start="37:31" pos:end="37:35">avctx</name></expr></argument>, <argument pos:start="37:38" pos:end="37:63"><expr pos:start="37:38" pos:end="37:63"><literal type="string" pos:start="37:38" pos:end="37:63">"unsupported ADX format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:36">return <expr pos:start="39:16" pos:end="39:35"><name pos:start="39:16" pos:end="39:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:18">/* channels */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:9">avctx</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:19">channels</name></name> <operator pos:start="47:21" pos:end="47:21">=</operator> <name pos:start="47:23" pos:end="47:28"><name pos:start="47:23" pos:end="47:25">buf</name><index pos:start="47:26" pos:end="47:28">[<expr pos:start="47:27" pos:end="47:27"><literal type="number" pos:start="47:27" pos:end="47:27">7</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="51:35"><if pos:start="49:5" pos:end="51:35">if <condition pos:start="49:8" pos:end="49:28">(<expr pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:13">avctx</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:23">channels</name></name> <operator pos:start="49:25" pos:end="49:25">&gt;</operator> <literal type="number" pos:start="49:27" pos:end="49:27">2</literal></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:35"><block_content pos:start="51:9" pos:end="51:35">

        <return pos:start="51:9" pos:end="51:35">return <expr pos:start="51:16" pos:end="51:34"><name pos:start="51:16" pos:end="51:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:21">/* sample rate */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:42"><expr pos:start="57:5" pos:end="57:41"><name pos:start="57:5" pos:end="57:22"><name pos:start="57:5" pos:end="57:9">avctx</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:22">sample_rate</name></name> <operator pos:start="57:24" pos:end="57:24">=</operator> <call pos:start="57:26" pos:end="57:41"><name pos:start="57:26" pos:end="57:32">AV_RB32</name><argument_list pos:start="57:33" pos:end="57:41">(<argument pos:start="57:34" pos:end="57:40"><expr pos:start="57:34" pos:end="57:40"><name pos:start="57:34" pos:end="57:36">buf</name> <operator pos:start="57:38" pos:end="57:38">+</operator> <literal type="number" pos:start="57:40" pos:end="57:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="63:35"><if pos:start="59:5" pos:end="63:35">if <condition pos:start="59:8" pos:end="61:74">(<expr pos:start="59:9" pos:end="61:73"><name pos:start="59:9" pos:end="59:26"><name pos:start="59:9" pos:end="59:13">avctx</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:26">sample_rate</name></name> <operator pos:start="59:28" pos:end="59:28">&lt;</operator> <literal type="number" pos:start="59:30" pos:end="59:30">1</literal> <operator pos:start="59:32" pos:end="59:33">||</operator>

        <name pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:13">avctx</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:26">sample_rate</name></name> <operator pos:start="61:28" pos:end="61:28">&gt;</operator> <name pos:start="61:30" pos:end="61:36">INT_MAX</name> <operator pos:start="61:38" pos:end="61:38">/</operator> <operator pos:start="61:40" pos:end="61:40">(</operator><name pos:start="61:41" pos:end="61:55"><name pos:start="61:41" pos:end="61:45">avctx</name><operator pos:start="61:46" pos:end="61:47">-&gt;</operator><name pos:start="61:48" pos:end="61:55">channels</name></name> <operator pos:start="61:57" pos:end="61:57">*</operator> <name pos:start="61:59" pos:end="61:68">BLOCK_SIZE</name> <operator pos:start="61:70" pos:end="61:70">*</operator> <literal type="number" pos:start="61:72" pos:end="61:72">8</literal><operator pos:start="61:73" pos:end="61:73">)</operator></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:35"><block_content pos:start="63:9" pos:end="63:35">

        <return pos:start="63:9" pos:end="63:35">return <expr pos:start="63:16" pos:end="63:34"><name pos:start="63:16" pos:end="63:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:18">/* bit rate */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:92"><expr pos:start="69:5" pos:end="69:91"><name pos:start="69:5" pos:end="69:19"><name pos:start="69:5" pos:end="69:9">avctx</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:19">bit_rate</name></name> <operator pos:start="69:21" pos:end="69:21">=</operator> <name pos:start="69:23" pos:end="69:40"><name pos:start="69:23" pos:end="69:27">avctx</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:40">sample_rate</name></name> <operator pos:start="69:42" pos:end="69:42">*</operator> <name pos:start="69:44" pos:end="69:58"><name pos:start="69:44" pos:end="69:48">avctx</name><operator pos:start="69:49" pos:end="69:50">-&gt;</operator><name pos:start="69:51" pos:end="69:58">channels</name></name> <operator pos:start="69:60" pos:end="69:60">*</operator> <name pos:start="69:62" pos:end="69:71">BLOCK_SIZE</name> <operator pos:start="69:73" pos:end="69:73">*</operator> <literal type="number" pos:start="69:75" pos:end="69:75">8</literal> <operator pos:start="69:77" pos:end="69:77">/</operator> <name pos:start="69:79" pos:end="69:91">BLOCK_SAMPLES</name></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:26">/* LPC coefficients */</comment>

    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:14">(<expr pos:start="75:9" pos:end="75:13"><name pos:start="75:9" pos:end="75:13">coeff</name></expr>)</condition> <block pos:start="75:16" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:79">

        <expr_stmt pos:start="77:9" pos:end="77:35"><expr pos:start="77:9" pos:end="77:34"><name pos:start="77:9" pos:end="77:14">cutoff</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <call pos:start="77:18" pos:end="77:34"><name pos:start="77:18" pos:end="77:24">AV_RB16</name><argument_list pos:start="77:25" pos:end="77:34">(<argument pos:start="77:26" pos:end="77:33"><expr pos:start="77:26" pos:end="77:33"><name pos:start="77:26" pos:end="77:28">buf</name> <operator pos:start="77:30" pos:end="77:30">+</operator> <literal type="number" pos:start="77:32" pos:end="77:33">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:79"><expr pos:start="79:9" pos:end="79:78"><call pos:start="79:9" pos:end="79:78"><name pos:start="79:9" pos:end="79:31">ff_adx_calculate_coeffs</name><argument_list pos:start="79:32" pos:end="79:78">(<argument pos:start="79:33" pos:end="79:38"><expr pos:start="79:33" pos:end="79:38"><name pos:start="79:33" pos:end="79:38">cutoff</name></expr></argument>, <argument pos:start="79:41" pos:end="79:58"><expr pos:start="79:41" pos:end="79:58"><name pos:start="79:41" pos:end="79:58"><name pos:start="79:41" pos:end="79:45">avctx</name><operator pos:start="79:46" pos:end="79:47">-&gt;</operator><name pos:start="79:48" pos:end="79:58">sample_rate</name></name></expr></argument>, <argument pos:start="79:61" pos:end="79:70"><expr pos:start="79:61" pos:end="79:70"><name pos:start="79:61" pos:end="79:70">COEFF_BITS</name></expr></argument>, <argument pos:start="79:73" pos:end="79:77"><expr pos:start="79:73" pos:end="79:77"><name pos:start="79:73" pos:end="79:77">coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:26"><expr pos:start="85:5" pos:end="85:25"><operator pos:start="85:5" pos:end="85:5">*</operator><name pos:start="85:6" pos:end="85:16">header_size</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <name pos:start="85:20" pos:end="85:25">offset</name></expr>;</expr_stmt>

    <return pos:start="87:5" pos:end="87:13">return <expr pos:start="87:12" pos:end="87:12"><literal type="number" pos:start="87:12" pos:end="87:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
