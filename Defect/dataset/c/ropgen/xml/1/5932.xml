<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5932.c" pos:tabs="8"><function pos:start="1:1" pos:end="297:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">parallels_open</name><parameter_list pos:start="1:26" pos:end="3:39">(<parameter pos:start="1:27" pos:end="1:46"><decl pos:start="1:27" pos:end="1:46"><type pos:start="1:27" pos:end="1:46"><name pos:start="1:27" pos:end="1:42">BlockDriverState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">bs</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:62"><decl pos:start="1:49" pos:end="1:62"><type pos:start="1:49" pos:end="1:62"><name pos:start="1:49" pos:end="1:53">QDict</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:62">options</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:73"><decl pos:start="1:65" pos:end="1:73"><type pos:start="1:65" pos:end="1:73"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:73">flags</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:38"><decl pos:start="3:27" pos:end="3:38"><type pos:start="3:27" pos:end="3:38"><name pos:start="3:27" pos:end="3:31">Error</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier><modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="297:1">{<block_content pos:start="7:5" pos:end="295:14">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">BDRVParallelsState</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:25">s</name> <init pos:start="7:27" pos:end="7:38">= <expr pos:start="7:29" pos:end="7:38"><name pos:start="7:29" pos:end="7:38"><name pos:start="7:29" pos:end="7:30">bs</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:38">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:19">ParallelsHeader</name></type> <name pos:start="9:21" pos:end="9:22">ph</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>, <decl pos:start="11:14" pos:end="11:17"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:17">size</name></decl>, <decl pos:start="11:20" pos:end="11:20"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:20" pos:end="11:20">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">QemuOpts</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:18">opts</name> <init pos:start="13:20" pos:end="13:25">= <expr pos:start="13:22" pos:end="13:25"><name pos:start="13:22" pos:end="13:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:20">local_err</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:13">buf</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="23:44"><expr pos:start="21:5" pos:end="23:43"><name pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:6">bs</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:12">file</name></name> <operator pos:start="21:14" pos:end="21:14">=</operator> <call pos:start="21:16" pos:end="23:43"><name pos:start="21:16" pos:end="21:30">bdrv_open_child</name><argument_list pos:start="21:31" pos:end="23:43">(<argument pos:start="21:32" pos:end="21:35"><expr pos:start="21:32" pos:end="21:35"><name pos:start="21:32" pos:end="21:35">NULL</name></expr></argument>, <argument pos:start="21:38" pos:end="21:44"><expr pos:start="21:38" pos:end="21:44"><name pos:start="21:38" pos:end="21:44">options</name></expr></argument>, <argument pos:start="21:47" pos:end="21:52"><expr pos:start="21:47" pos:end="21:52"><literal type="string" pos:start="21:47" pos:end="21:52">"file"</literal></expr></argument>, <argument pos:start="21:55" pos:end="21:56"><expr pos:start="21:55" pos:end="21:56"><name pos:start="21:55" pos:end="21:56">bs</name></expr></argument>, <argument pos:start="21:59" pos:end="21:69"><expr pos:start="21:59" pos:end="21:69"><operator pos:start="21:59" pos:end="21:59">&amp;</operator><name pos:start="21:60" pos:end="21:69">child_file</name></expr></argument>,

                               <argument pos:start="23:32" pos:end="23:36"><expr pos:start="23:32" pos:end="23:36"><name pos:start="23:32" pos:end="23:36">false</name></expr></argument>, <argument pos:start="23:39" pos:end="23:42"><expr pos:start="23:39" pos:end="23:42"><name pos:start="23:39" pos:end="23:42">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:18">(<expr pos:start="25:9" pos:end="25:17"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:17"><name pos:start="25:10" pos:end="25:11">bs</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:17">file</name></name></expr>)</condition> <block pos:start="25:20" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:23">

        <return pos:start="27:9" pos:end="27:23">return <expr pos:start="27:16" pos:end="27:22"><operator pos:start="27:16" pos:end="27:16">-</operator><name pos:start="27:17" pos:end="27:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:51"><expr pos:start="33:5" pos:end="33:50"><name pos:start="33:5" pos:end="33:7">ret</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:50"><name pos:start="33:11" pos:end="33:20">bdrv_pread</name><argument_list pos:start="33:21" pos:end="33:50">(<argument pos:start="33:22" pos:end="33:29"><expr pos:start="33:22" pos:end="33:29"><name pos:start="33:22" pos:end="33:29"><name pos:start="33:22" pos:end="33:23">bs</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:29">file</name></name></expr></argument>, <argument pos:start="33:32" pos:end="33:32"><expr pos:start="33:32" pos:end="33:32"><literal type="number" pos:start="33:32" pos:end="33:32">0</literal></expr></argument>, <argument pos:start="33:35" pos:end="33:37"><expr pos:start="33:35" pos:end="33:37"><operator pos:start="33:35" pos:end="33:35">&amp;</operator><name pos:start="33:36" pos:end="33:37">ph</name></expr></argument>, <argument pos:start="33:40" pos:end="33:49"><expr pos:start="33:40" pos:end="33:49"><sizeof pos:start="33:40" pos:end="33:49">sizeof<argument_list pos:start="33:46" pos:end="33:49">(<argument pos:start="33:47" pos:end="33:48"><expr pos:start="33:47" pos:end="33:48"><name pos:start="33:47" pos:end="33:48">ph</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:16">(<expr pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">&lt;</operator> <literal type="number" pos:start="35:15" pos:end="35:15">0</literal></expr>)</condition> <block pos:start="35:18" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:18">

        <goto pos:start="37:9" pos:end="37:18">goto <name pos:start="37:14" pos:end="37:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:51"><expr pos:start="43:5" pos:end="43:50"><name pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:6">bs</name><operator pos:start="43:7" pos:end="43:8">-&gt;</operator><name pos:start="43:9" pos:end="43:21">total_sectors</name></name> <operator pos:start="43:23" pos:end="43:23">=</operator> <call pos:start="43:25" pos:end="43:50"><name pos:start="43:25" pos:end="43:35">le64_to_cpu</name><argument_list pos:start="43:36" pos:end="43:50">(<argument pos:start="43:37" pos:end="43:49"><expr pos:start="43:37" pos:end="43:49"><name pos:start="43:37" pos:end="43:49"><name pos:start="43:37" pos:end="43:38">ph</name><operator pos:start="43:39" pos:end="43:39">.</operator><name pos:start="43:40" pos:end="43:49">nb_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:50">(<expr pos:start="47:9" pos:end="47:49"><call pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:19">le32_to_cpu</name><argument_list pos:start="47:20" pos:end="47:31">(<argument pos:start="47:21" pos:end="47:30"><expr pos:start="47:21" pos:end="47:30"><name pos:start="47:21" pos:end="47:30"><name pos:start="47:21" pos:end="47:22">ph</name><operator pos:start="47:23" pos:end="47:23">.</operator><name pos:start="47:24" pos:end="47:30">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="47:33" pos:end="47:34">!=</operator> <name pos:start="47:36" pos:end="47:49">HEADER_VERSION</name></expr>)</condition> <block pos:start="47:52" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:25">

        <goto pos:start="49:9" pos:end="49:25">goto <name pos:start="49:14" pos:end="49:24">fail_format</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="53:5" pos:end="67:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:44">(<expr pos:start="53:9" pos:end="53:43"><operator pos:start="53:9" pos:end="53:9">!</operator><call pos:start="53:10" pos:end="53:43"><name pos:start="53:10" pos:end="53:15">memcmp</name><argument_list pos:start="53:16" pos:end="53:43">(<argument pos:start="53:17" pos:end="53:24"><expr pos:start="53:17" pos:end="53:24"><name pos:start="53:17" pos:end="53:24"><name pos:start="53:17" pos:end="53:18">ph</name><operator pos:start="53:19" pos:end="53:19">.</operator><name pos:start="53:20" pos:end="53:24">magic</name></name></expr></argument>, <argument pos:start="53:27" pos:end="53:38"><expr pos:start="53:27" pos:end="53:38"><name pos:start="53:27" pos:end="53:38">HEADER_MAGIC</name></expr></argument>, <argument pos:start="53:41" pos:end="53:42"><expr pos:start="53:41" pos:end="53:42"><literal type="number" pos:start="53:41" pos:end="53:42">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:46" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:59">

        <expr_stmt pos:start="55:9" pos:end="55:30"><expr pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:25">off_multiplier</name></name> <operator pos:start="55:27" pos:end="55:27">=</operator> <literal type="number" pos:start="55:29" pos:end="55:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:59"><expr pos:start="57:9" pos:end="57:58"><name pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:10">bs</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:25">total_sectors</name></name> <operator pos:start="57:27" pos:end="57:27">=</operator> <literal type="number" pos:start="57:29" pos:end="57:38">0xffffffff</literal> <operator pos:start="57:40" pos:end="57:40">&amp;</operator> <name pos:start="57:42" pos:end="57:58"><name pos:start="57:42" pos:end="57:43">bs</name><operator pos:start="57:44" pos:end="57:45">-&gt;</operator><name pos:start="57:46" pos:end="57:58">total_sectors</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="59:7" pos:end="63:5">else if <condition pos:start="59:15" pos:end="59:52">(<expr pos:start="59:16" pos:end="59:51"><operator pos:start="59:16" pos:end="59:16">!</operator><call pos:start="59:17" pos:end="59:51"><name pos:start="59:17" pos:end="59:22">memcmp</name><argument_list pos:start="59:23" pos:end="59:51">(<argument pos:start="59:24" pos:end="59:31"><expr pos:start="59:24" pos:end="59:31"><name pos:start="59:24" pos:end="59:31"><name pos:start="59:24" pos:end="59:25">ph</name><operator pos:start="59:26" pos:end="59:26">.</operator><name pos:start="59:27" pos:end="59:31">magic</name></name></expr></argument>, <argument pos:start="59:34" pos:end="59:46"><expr pos:start="59:34" pos:end="59:46"><name pos:start="59:34" pos:end="59:46">HEADER_MAGIC2</name></expr></argument>, <argument pos:start="59:49" pos:end="59:50"><expr pos:start="59:49" pos:end="59:50"><literal type="number" pos:start="59:49" pos:end="59:50">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:54" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:51">

        <expr_stmt pos:start="61:9" pos:end="61:51"><expr pos:start="61:9" pos:end="61:50"><name pos:start="61:9" pos:end="61:25"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:25">off_multiplier</name></name> <operator pos:start="61:27" pos:end="61:27">=</operator> <call pos:start="61:29" pos:end="61:50"><name pos:start="61:29" pos:end="61:39">le32_to_cpu</name><argument_list pos:start="61:40" pos:end="61:50">(<argument pos:start="61:41" pos:end="61:49"><expr pos:start="61:41" pos:end="61:49"><name pos:start="61:41" pos:end="61:49"><name pos:start="61:41" pos:end="61:42">ph</name><operator pos:start="61:43" pos:end="61:43">.</operator><name pos:start="61:44" pos:end="61:49">tracks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="67:5">else <block pos:start="63:12" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:25">

        <goto pos:start="65:9" pos:end="65:25">goto <name pos:start="65:14" pos:end="65:24">fail_format</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:39"><expr pos:start="71:5" pos:end="71:38"><name pos:start="71:5" pos:end="71:13"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:13">tracks</name></name> <operator pos:start="71:15" pos:end="71:15">=</operator> <call pos:start="71:17" pos:end="71:38"><name pos:start="71:17" pos:end="71:27">le32_to_cpu</name><argument_list pos:start="71:28" pos:end="71:38">(<argument pos:start="71:29" pos:end="71:37"><expr pos:start="71:29" pos:end="71:37"><name pos:start="71:29" pos:end="71:37"><name pos:start="71:29" pos:end="71:30">ph</name><operator pos:start="71:31" pos:end="71:31">.</operator><name pos:start="71:32" pos:end="71:37">tracks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="81:5"><if pos:start="73:5" pos:end="81:5">if <condition pos:start="73:8" pos:end="73:23">(<expr pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:17"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:17">tracks</name></name> <operator pos:start="73:19" pos:end="73:20">==</operator> <literal type="number" pos:start="73:22" pos:end="73:22">0</literal></expr>)</condition> <block pos:start="73:25" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:18">

        <expr_stmt pos:start="75:9" pos:end="75:66"><expr pos:start="75:9" pos:end="75:65"><call pos:start="75:9" pos:end="75:65"><name pos:start="75:9" pos:end="75:18">error_setg</name><argument_list pos:start="75:19" pos:end="75:65">(<argument pos:start="75:20" pos:end="75:23"><expr pos:start="75:20" pos:end="75:23"><name pos:start="75:20" pos:end="75:23">errp</name></expr></argument>, <argument pos:start="75:26" pos:end="75:64"><expr pos:start="75:26" pos:end="75:64"><literal type="string" pos:start="75:26" pos:end="75:64">"Invalid image: Zero sectors per track"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:22"><expr pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <operator pos:start="77:15" pos:end="77:15">-</operator><name pos:start="77:16" pos:end="77:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="79:9" pos:end="79:18">goto <name pos:start="79:14" pos:end="79:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="83:5" pos:end="91:5"><if pos:start="83:5" pos:end="91:5">if <condition pos:start="83:8" pos:end="83:34">(<expr pos:start="83:9" pos:end="83:33"><name pos:start="83:9" pos:end="83:17"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:17">tracks</name></name> <operator pos:start="83:19" pos:end="83:19">&gt;</operator> <name pos:start="83:21" pos:end="83:29">INT32_MAX</name><operator pos:start="83:30" pos:end="83:30">/</operator><literal type="number" pos:start="83:31" pos:end="83:33">513</literal></expr>)</condition> <block pos:start="83:36" pos:end="91:5">{<block_content pos:start="85:9" pos:end="89:18">

        <expr_stmt pos:start="85:9" pos:end="85:59"><expr pos:start="85:9" pos:end="85:58"><call pos:start="85:9" pos:end="85:58"><name pos:start="85:9" pos:end="85:18">error_setg</name><argument_list pos:start="85:19" pos:end="85:58">(<argument pos:start="85:20" pos:end="85:23"><expr pos:start="85:20" pos:end="85:23"><name pos:start="85:20" pos:end="85:23">errp</name></expr></argument>, <argument pos:start="85:26" pos:end="85:57"><expr pos:start="85:26" pos:end="85:57"><literal type="string" pos:start="85:26" pos:end="85:57">"Invalid image: Too big cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:21"><expr pos:start="87:9" pos:end="87:20"><name pos:start="87:9" pos:end="87:11">ret</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <operator pos:start="87:15" pos:end="87:15">-</operator><name pos:start="87:16" pos:end="87:20">EFBIG</name></expr>;</expr_stmt>

        <goto pos:start="89:9" pos:end="89:18">goto <name pos:start="89:14" pos:end="89:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:46"><expr pos:start="95:5" pos:end="95:45"><name pos:start="95:5" pos:end="95:15"><name pos:start="95:5" pos:end="95:5">s</name><operator pos:start="95:6" pos:end="95:7">-&gt;</operator><name pos:start="95:8" pos:end="95:15">bat_size</name></name> <operator pos:start="95:17" pos:end="95:17">=</operator> <call pos:start="95:19" pos:end="95:45"><name pos:start="95:19" pos:end="95:29">le32_to_cpu</name><argument_list pos:start="95:30" pos:end="95:45">(<argument pos:start="95:31" pos:end="95:44"><expr pos:start="95:31" pos:end="95:44"><name pos:start="95:31" pos:end="95:44"><name pos:start="95:31" pos:end="95:32">ph</name><operator pos:start="95:33" pos:end="95:33">.</operator><name pos:start="95:34" pos:end="95:44">bat_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="105:5"><if pos:start="97:5" pos:end="105:5">if <condition pos:start="97:8" pos:end="97:49">(<expr pos:start="97:9" pos:end="97:48"><name pos:start="97:9" pos:end="97:19"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:19">bat_size</name></name> <operator pos:start="97:21" pos:end="97:21">&gt;</operator> <name pos:start="97:23" pos:end="97:29">INT_MAX</name> <operator pos:start="97:31" pos:end="97:31">/</operator> <sizeof pos:start="97:33" pos:end="97:48">sizeof<argument_list pos:start="97:39" pos:end="97:48">(<argument pos:start="97:40" pos:end="97:47"><expr pos:start="97:40" pos:end="97:47"><name pos:start="97:40" pos:end="97:47">uint32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="97:51" pos:end="105:5">{<block_content pos:start="99:9" pos:end="103:18">

        <expr_stmt pos:start="99:9" pos:end="99:46"><expr pos:start="99:9" pos:end="99:45"><call pos:start="99:9" pos:end="99:45"><name pos:start="99:9" pos:end="99:18">error_setg</name><argument_list pos:start="99:19" pos:end="99:45">(<argument pos:start="99:20" pos:end="99:23"><expr pos:start="99:20" pos:end="99:23"><name pos:start="99:20" pos:end="99:23">errp</name></expr></argument>, <argument pos:start="99:26" pos:end="99:44"><expr pos:start="99:26" pos:end="99:44"><literal type="string" pos:start="99:26" pos:end="99:44">"Catalog too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:21"><expr pos:start="101:9" pos:end="101:20"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <operator pos:start="101:15" pos:end="101:15">-</operator><name pos:start="101:16" pos:end="101:20">EFBIG</name></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:18">goto <name pos:start="103:14" pos:end="103:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:38"><expr pos:start="109:5" pos:end="109:37"><name pos:start="109:5" pos:end="109:8">size</name> <operator pos:start="109:10" pos:end="109:10">=</operator> <call pos:start="109:12" pos:end="109:37"><name pos:start="109:12" pos:end="109:24">bat_entry_off</name><argument_list pos:start="109:25" pos:end="109:37">(<argument pos:start="109:26" pos:end="109:36"><expr pos:start="109:26" pos:end="109:36"><name pos:start="109:26" pos:end="109:36"><name pos:start="109:26" pos:end="109:26">s</name><operator pos:start="109:27" pos:end="109:28">-&gt;</operator><name pos:start="109:29" pos:end="109:36">bat_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:70"><expr pos:start="111:5" pos:end="111:69"><name pos:start="111:5" pos:end="111:18"><name pos:start="111:5" pos:end="111:5">s</name><operator pos:start="111:6" pos:end="111:7">-&gt;</operator><name pos:start="111:8" pos:end="111:18">header_size</name></name> <operator pos:start="111:20" pos:end="111:20">=</operator> <call pos:start="111:22" pos:end="111:69"><name pos:start="111:22" pos:end="111:29">ROUND_UP</name><argument_list pos:start="111:30" pos:end="111:69">(<argument pos:start="111:31" pos:end="111:34"><expr pos:start="111:31" pos:end="111:34"><name pos:start="111:31" pos:end="111:34">size</name></expr></argument>, <argument pos:start="111:37" pos:end="111:68"><expr pos:start="111:37" pos:end="111:68"><call pos:start="111:37" pos:end="111:68"><name pos:start="111:37" pos:end="111:54">bdrv_opt_mem_align</name><argument_list pos:start="111:55" pos:end="111:68">(<argument pos:start="111:56" pos:end="111:67"><expr pos:start="111:56" pos:end="111:67"><name pos:start="111:56" pos:end="111:67"><name pos:start="111:56" pos:end="111:57">bs</name><operator pos:start="111:58" pos:end="111:59">-&gt;</operator><name pos:start="111:60" pos:end="111:63">file</name><operator pos:start="111:64" pos:end="111:65">-&gt;</operator><name pos:start="111:66" pos:end="111:67">bs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:66"><expr pos:start="113:5" pos:end="113:65"><name pos:start="113:5" pos:end="113:13"><name pos:start="113:5" pos:end="113:5">s</name><operator pos:start="113:6" pos:end="113:7">-&gt;</operator><name pos:start="113:8" pos:end="113:13">header</name></name> <operator pos:start="113:15" pos:end="113:15">=</operator> <call pos:start="113:17" pos:end="113:65"><name pos:start="113:17" pos:end="113:35">qemu_try_blockalign</name><argument_list pos:start="113:36" pos:end="113:65">(<argument pos:start="113:37" pos:end="113:48"><expr pos:start="113:37" pos:end="113:48"><name pos:start="113:37" pos:end="113:48"><name pos:start="113:37" pos:end="113:38">bs</name><operator pos:start="113:39" pos:end="113:40">-&gt;</operator><name pos:start="113:41" pos:end="113:44">file</name><operator pos:start="113:45" pos:end="113:46">-&gt;</operator><name pos:start="113:47" pos:end="113:48">bs</name></name></expr></argument>, <argument pos:start="113:51" pos:end="113:64"><expr pos:start="113:51" pos:end="113:64"><name pos:start="113:51" pos:end="113:64"><name pos:start="113:51" pos:end="113:51">s</name><operator pos:start="113:52" pos:end="113:53">-&gt;</operator><name pos:start="113:54" pos:end="113:64">header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="121:5"><if pos:start="115:5" pos:end="121:5">if <condition pos:start="115:8" pos:end="115:26">(<expr pos:start="115:9" pos:end="115:25"><name pos:start="115:9" pos:end="115:17"><name pos:start="115:9" pos:end="115:9">s</name><operator pos:start="115:10" pos:end="115:11">-&gt;</operator><name pos:start="115:12" pos:end="115:17">header</name></name> <operator pos:start="115:19" pos:end="115:20">==</operator> <name pos:start="115:22" pos:end="115:25">NULL</name></expr>)</condition> <block pos:start="115:28" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:18">

        <expr_stmt pos:start="117:9" pos:end="117:22"><expr pos:start="117:9" pos:end="117:21"><name pos:start="117:9" pos:end="117:11">ret</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <operator pos:start="117:15" pos:end="117:15">-</operator><name pos:start="117:16" pos:end="117:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="119:9" pos:end="119:18">goto <name pos:start="119:14" pos:end="119:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:43"><expr pos:start="123:5" pos:end="123:42"><name pos:start="123:5" pos:end="123:15"><name pos:start="123:5" pos:end="123:5">s</name><operator pos:start="123:6" pos:end="123:7">-&gt;</operator><name pos:start="123:8" pos:end="123:15">data_end</name></name> <operator pos:start="123:17" pos:end="123:17">=</operator> <call pos:start="123:19" pos:end="123:42"><name pos:start="123:19" pos:end="123:29">le32_to_cpu</name><argument_list pos:start="123:30" pos:end="123:42">(<argument pos:start="123:31" pos:end="123:41"><expr pos:start="123:31" pos:end="123:41"><name pos:start="123:31" pos:end="123:41"><name pos:start="123:31" pos:end="123:32">ph</name><operator pos:start="123:33" pos:end="123:33">.</operator><name pos:start="123:34" pos:end="123:41">data_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:25">(<expr pos:start="125:9" pos:end="125:24"><name pos:start="125:9" pos:end="125:19"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:19">data_end</name></name> <operator pos:start="125:21" pos:end="125:22">==</operator> <literal type="number" pos:start="125:24" pos:end="125:24">0</literal></expr>)</condition> <block pos:start="125:27" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:77">

        <expr_stmt pos:start="127:9" pos:end="127:77"><expr pos:start="127:9" pos:end="127:76"><name pos:start="127:9" pos:end="127:19"><name pos:start="127:9" pos:end="127:9">s</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:19">data_end</name></name> <operator pos:start="127:21" pos:end="127:21">=</operator> <call pos:start="127:23" pos:end="127:76"><name pos:start="127:23" pos:end="127:30">ROUND_UP</name><argument_list pos:start="127:31" pos:end="127:76">(<argument pos:start="127:32" pos:end="127:57"><expr pos:start="127:32" pos:end="127:57"><call pos:start="127:32" pos:end="127:57"><name pos:start="127:32" pos:end="127:44">bat_entry_off</name><argument_list pos:start="127:45" pos:end="127:57">(<argument pos:start="127:46" pos:end="127:56"><expr pos:start="127:46" pos:end="127:56"><name pos:start="127:46" pos:end="127:56"><name pos:start="127:46" pos:end="127:46">s</name><operator pos:start="127:47" pos:end="127:48">-&gt;</operator><name pos:start="127:49" pos:end="127:56">bat_size</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="127:60" pos:end="127:75"><expr pos:start="127:60" pos:end="127:75"><name pos:start="127:60" pos:end="127:75">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="131:5" pos:end="139:5"><if pos:start="131:5" pos:end="139:5">if <condition pos:start="131:8" pos:end="131:37">(<expr pos:start="131:9" pos:end="131:36"><name pos:start="131:9" pos:end="131:19"><name pos:start="131:9" pos:end="131:9">s</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:19">data_end</name></name> <operator pos:start="131:21" pos:end="131:21">&lt;</operator> <name pos:start="131:23" pos:end="131:36"><name pos:start="131:23" pos:end="131:23">s</name><operator pos:start="131:24" pos:end="131:25">-&gt;</operator><name pos:start="131:26" pos:end="131:36">header_size</name></name></expr>)</condition> <block pos:start="131:39" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:30">

        <comment type="block" pos:start="133:9" pos:end="135:66">/* there is not enough unused space to fit to block align between BAT

           and actual data. We can't avoid read-modify-write... */</comment>

        <expr_stmt pos:start="137:9" pos:end="137:30"><expr pos:start="137:9" pos:end="137:29"><name pos:start="137:9" pos:end="137:22"><name pos:start="137:9" pos:end="137:9">s</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:22">header_size</name></name> <operator pos:start="137:24" pos:end="137:24">=</operator> <name pos:start="137:26" pos:end="137:29">size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:61"><expr pos:start="143:5" pos:end="143:60"><name pos:start="143:5" pos:end="143:7">ret</name> <operator pos:start="143:9" pos:end="143:9">=</operator> <call pos:start="143:11" pos:end="143:60"><name pos:start="143:11" pos:end="143:20">bdrv_pread</name><argument_list pos:start="143:21" pos:end="143:60">(<argument pos:start="143:22" pos:end="143:29"><expr pos:start="143:22" pos:end="143:29"><name pos:start="143:22" pos:end="143:29"><name pos:start="143:22" pos:end="143:23">bs</name><operator pos:start="143:24" pos:end="143:25">-&gt;</operator><name pos:start="143:26" pos:end="143:29">file</name></name></expr></argument>, <argument pos:start="143:32" pos:end="143:32"><expr pos:start="143:32" pos:end="143:32"><literal type="number" pos:start="143:32" pos:end="143:32">0</literal></expr></argument>, <argument pos:start="143:35" pos:end="143:43"><expr pos:start="143:35" pos:end="143:43"><name pos:start="143:35" pos:end="143:43"><name pos:start="143:35" pos:end="143:35">s</name><operator pos:start="143:36" pos:end="143:37">-&gt;</operator><name pos:start="143:38" pos:end="143:43">header</name></name></expr></argument>, <argument pos:start="143:46" pos:end="143:59"><expr pos:start="143:46" pos:end="143:59"><name pos:start="143:46" pos:end="143:59"><name pos:start="143:46" pos:end="143:46">s</name><operator pos:start="143:47" pos:end="143:48">-&gt;</operator><name pos:start="143:49" pos:end="143:59">header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="149:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:16">(<expr pos:start="145:9" pos:end="145:15"><name pos:start="145:9" pos:end="145:11">ret</name> <operator pos:start="145:13" pos:end="145:13">&lt;</operator> <literal type="number" pos:start="145:15" pos:end="145:15">0</literal></expr>)</condition> <block pos:start="145:18" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:18">

        <goto pos:start="147:9" pos:end="147:18">goto <name pos:start="147:14" pos:end="147:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:48"><expr pos:start="151:5" pos:end="151:47"><name pos:start="151:5" pos:end="151:17"><name pos:start="151:5" pos:end="151:5">s</name><operator pos:start="151:6" pos:end="151:7">-&gt;</operator><name pos:start="151:8" pos:end="151:17">bat_bitmap</name></name> <operator pos:start="151:19" pos:end="151:19">=</operator> <operator pos:start="151:21" pos:end="151:21">(</operator><name pos:start="151:22" pos:end="151:29">uint32_t</name> <operator pos:start="151:31" pos:end="151:31">*</operator><operator pos:start="151:32" pos:end="151:32">)</operator><operator pos:start="151:33" pos:end="151:33">(</operator><name pos:start="151:34" pos:end="151:42"><name pos:start="151:34" pos:end="151:34">s</name><operator pos:start="151:35" pos:end="151:36">-&gt;</operator><name pos:start="151:37" pos:end="151:42">header</name></name> <operator pos:start="151:44" pos:end="151:44">+</operator> <literal type="number" pos:start="151:46" pos:end="151:46">1</literal><operator pos:start="151:47" pos:end="151:47">)</operator></expr>;</expr_stmt>



    <for pos:start="155:5" pos:end="165:5">for <control pos:start="155:9" pos:end="155:37">(<init pos:start="155:10" pos:end="155:15"><expr pos:start="155:10" pos:end="155:14"><name pos:start="155:10" pos:end="155:10">i</name> <operator pos:start="155:12" pos:end="155:12">=</operator> <literal type="number" pos:start="155:14" pos:end="155:14">0</literal></expr>;</init> <condition pos:start="155:17" pos:end="155:32"><expr pos:start="155:17" pos:end="155:31"><name pos:start="155:17" pos:end="155:17">i</name> <operator pos:start="155:19" pos:end="155:19">&lt;</operator> <name pos:start="155:21" pos:end="155:31"><name pos:start="155:21" pos:end="155:21">s</name><operator pos:start="155:22" pos:end="155:23">-&gt;</operator><name pos:start="155:24" pos:end="155:31">bat_size</name></name></expr>;</condition> <incr pos:start="155:34" pos:end="155:36"><expr pos:start="155:34" pos:end="155:36"><name pos:start="155:34" pos:end="155:34">i</name><operator pos:start="155:35" pos:end="155:36">++</operator></expr></incr>)</control> <block pos:start="155:39" pos:end="165:5">{<block_content pos:start="157:9" pos:end="163:9">

        <decl_stmt pos:start="157:9" pos:end="157:37"><decl pos:start="157:9" pos:end="157:36"><type pos:start="157:9" pos:end="157:15"><name pos:start="157:9" pos:end="157:15">int64_t</name></type> <name pos:start="157:17" pos:end="157:19">off</name> <init pos:start="157:21" pos:end="157:36">= <expr pos:start="157:23" pos:end="157:36"><call pos:start="157:23" pos:end="157:36"><name pos:start="157:23" pos:end="157:30">bat2sect</name><argument_list pos:start="157:31" pos:end="157:36">(<argument pos:start="157:32" pos:end="157:32"><expr pos:start="157:32" pos:end="157:32"><name pos:start="157:32" pos:end="157:32">s</name></expr></argument>, <argument pos:start="157:35" pos:end="157:35"><expr pos:start="157:35" pos:end="157:35"><name pos:start="157:35" pos:end="157:35">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="159:9" pos:end="163:9"><if pos:start="159:9" pos:end="163:9">if <condition pos:start="159:12" pos:end="159:31">(<expr pos:start="159:13" pos:end="159:30"><name pos:start="159:13" pos:end="159:15">off</name> <operator pos:start="159:17" pos:end="159:18">&gt;=</operator> <name pos:start="159:20" pos:end="159:30"><name pos:start="159:20" pos:end="159:20">s</name><operator pos:start="159:21" pos:end="159:22">-&gt;</operator><name pos:start="159:23" pos:end="159:30">data_end</name></name></expr>)</condition> <block pos:start="159:33" pos:end="163:9">{<block_content pos:start="161:13" pos:end="161:42">

            <expr_stmt pos:start="161:13" pos:end="161:42"><expr pos:start="161:13" pos:end="161:41"><name pos:start="161:13" pos:end="161:23"><name pos:start="161:13" pos:end="161:13">s</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:23">data_end</name></name> <operator pos:start="161:25" pos:end="161:25">=</operator> <name pos:start="161:27" pos:end="161:29">off</name> <operator pos:start="161:31" pos:end="161:31">+</operator> <name pos:start="161:33" pos:end="161:41"><name pos:start="161:33" pos:end="161:33">s</name><operator pos:start="161:34" pos:end="161:35">-&gt;</operator><name pos:start="161:36" pos:end="161:41">tracks</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="169:5" pos:end="187:5"><if pos:start="169:5" pos:end="187:5">if <condition pos:start="169:8" pos:end="169:52">(<expr pos:start="169:9" pos:end="169:51"><call pos:start="169:9" pos:end="169:29"><name pos:start="169:9" pos:end="169:19">le32_to_cpu</name><argument_list pos:start="169:20" pos:end="169:29">(<argument pos:start="169:21" pos:end="169:28"><expr pos:start="169:21" pos:end="169:28"><name pos:start="169:21" pos:end="169:28"><name pos:start="169:21" pos:end="169:22">ph</name><operator pos:start="169:23" pos:end="169:23">.</operator><name pos:start="169:24" pos:end="169:28">inuse</name></name></expr></argument>)</argument_list></call> <operator pos:start="169:31" pos:end="169:32">==</operator> <name pos:start="169:34" pos:end="169:51">HEADER_INUSE_MAGIC</name></expr>)</condition> <block pos:start="169:54" pos:end="187:5">{<block_content pos:start="173:9" pos:end="185:9">

        <comment type="block" pos:start="171:9" pos:end="171:68">/* Image was not closed correctly. The check is mandatory */</comment>

        <expr_stmt pos:start="173:9" pos:end="173:33"><expr pos:start="173:9" pos:end="173:32"><name pos:start="173:9" pos:end="173:25"><name pos:start="173:9" pos:end="173:9">s</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:25">header_unclean</name></name> <operator pos:start="173:27" pos:end="173:27">=</operator> <name pos:start="173:29" pos:end="173:32">true</name></expr>;</expr_stmt>

        <if_stmt pos:start="175:9" pos:end="185:9"><if pos:start="175:9" pos:end="185:9">if <condition pos:start="175:12" pos:end="175:61">(<expr pos:start="175:13" pos:end="175:60"><operator pos:start="175:13" pos:end="175:13">(</operator><name pos:start="175:14" pos:end="175:18">flags</name> <operator pos:start="175:20" pos:end="175:20">&amp;</operator> <name pos:start="175:22" pos:end="175:32">BDRV_O_RDWR</name><operator pos:start="175:33" pos:end="175:33">)</operator> <operator pos:start="175:35" pos:end="175:36">&amp;&amp;</operator> <operator pos:start="175:38" pos:end="175:38">!</operator><operator pos:start="175:39" pos:end="175:39">(</operator><name pos:start="175:40" pos:end="175:44">flags</name> <operator pos:start="175:46" pos:end="175:46">&amp;</operator> <name pos:start="175:48" pos:end="175:59">BDRV_O_CHECK</name><operator pos:start="175:60" pos:end="175:60">)</operator></expr>)</condition> <block pos:start="175:63" pos:end="185:9">{<block_content pos:start="177:13" pos:end="183:22">

            <expr_stmt pos:start="177:13" pos:end="179:54"><expr pos:start="177:13" pos:end="179:53"><call pos:start="177:13" pos:end="179:53"><name pos:start="177:13" pos:end="177:22">error_setg</name><argument_list pos:start="177:23" pos:end="179:53">(<argument pos:start="177:24" pos:end="177:27"><expr pos:start="177:24" pos:end="177:27"><name pos:start="177:24" pos:end="177:27">errp</name></expr></argument>, <argument pos:start="177:30" pos:end="179:52"><expr pos:start="177:30" pos:end="179:52"><literal type="string" pos:start="177:30" pos:end="177:74">"parallels: Image was not closed correctly; "</literal>

                       <literal type="string" pos:start="179:24" pos:end="179:52">"cannot be opened read/write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:26"><expr pos:start="181:13" pos:end="181:25"><name pos:start="181:13" pos:end="181:15">ret</name> <operator pos:start="181:17" pos:end="181:17">=</operator> <operator pos:start="181:19" pos:end="181:19">-</operator><name pos:start="181:20" pos:end="181:25">EACCES</name></expr>;</expr_stmt>

            <goto pos:start="183:13" pos:end="183:22">goto <name pos:start="183:18" pos:end="183:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="191:5" pos:end="191:74"><expr pos:start="191:5" pos:end="191:73"><name pos:start="191:5" pos:end="191:8">opts</name> <operator pos:start="191:10" pos:end="191:10">=</operator> <call pos:start="191:12" pos:end="191:73"><name pos:start="191:12" pos:end="191:27">qemu_opts_create</name><argument_list pos:start="191:28" pos:end="191:73">(<argument pos:start="191:29" pos:end="191:51"><expr pos:start="191:29" pos:end="191:51"><operator pos:start="191:29" pos:end="191:29">&amp;</operator><name pos:start="191:30" pos:end="191:51">parallels_runtime_opts</name></expr></argument>, <argument pos:start="191:54" pos:end="191:57"><expr pos:start="191:54" pos:end="191:57"><name pos:start="191:54" pos:end="191:57">NULL</name></expr></argument>, <argument pos:start="191:60" pos:end="191:60"><expr pos:start="191:60" pos:end="191:60"><literal type="number" pos:start="191:60" pos:end="191:60">0</literal></expr></argument>, <argument pos:start="191:63" pos:end="191:72"><expr pos:start="191:63" pos:end="191:72"><operator pos:start="191:63" pos:end="191:63">&amp;</operator><name pos:start="191:64" pos:end="191:72">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="193:5" pos:end="197:5"><if pos:start="193:5" pos:end="197:5">if <condition pos:start="193:8" pos:end="193:26">(<expr pos:start="193:9" pos:end="193:25"><name pos:start="193:9" pos:end="193:17">local_err</name> <operator pos:start="193:19" pos:end="193:20">!=</operator> <name pos:start="193:22" pos:end="193:25">NULL</name></expr>)</condition> <block pos:start="193:28" pos:end="197:5">{<block_content pos:start="195:9" pos:end="195:26">

        <goto pos:start="195:9" pos:end="195:26">goto <name pos:start="195:14" pos:end="195:25">fail_options</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="201:5" pos:end="201:54"><expr pos:start="201:5" pos:end="201:53"><call pos:start="201:5" pos:end="201:53"><name pos:start="201:5" pos:end="201:26">qemu_opts_absorb_qdict</name><argument_list pos:start="201:27" pos:end="201:53">(<argument pos:start="201:28" pos:end="201:31"><expr pos:start="201:28" pos:end="201:31"><name pos:start="201:28" pos:end="201:31">opts</name></expr></argument>, <argument pos:start="201:34" pos:end="201:40"><expr pos:start="201:34" pos:end="201:40"><name pos:start="201:34" pos:end="201:40">options</name></expr></argument>, <argument pos:start="201:43" pos:end="201:52"><expr pos:start="201:43" pos:end="201:52"><operator pos:start="201:43" pos:end="201:43">&amp;</operator><name pos:start="201:44" pos:end="201:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="203:5" pos:end="207:5"><if pos:start="203:5" pos:end="207:5">if <condition pos:start="203:8" pos:end="203:26">(<expr pos:start="203:9" pos:end="203:25"><name pos:start="203:9" pos:end="203:17">local_err</name> <operator pos:start="203:19" pos:end="203:20">!=</operator> <name pos:start="203:22" pos:end="203:25">NULL</name></expr>)</condition> <block pos:start="203:28" pos:end="207:5">{<block_content pos:start="205:9" pos:end="205:26">

        <goto pos:start="205:9" pos:end="205:26">goto <name pos:start="205:14" pos:end="205:25">fail_options</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="211:5" pos:end="213:68"><expr pos:start="211:5" pos:end="213:67"><name pos:start="211:5" pos:end="211:20"><name pos:start="211:5" pos:end="211:5">s</name><operator pos:start="211:6" pos:end="211:7">-&gt;</operator><name pos:start="211:8" pos:end="211:20">prealloc_size</name></name> <operator pos:start="211:22" pos:end="211:22">=</operator>

        <call pos:start="213:9" pos:end="213:67"><name pos:start="213:9" pos:end="213:29">qemu_opt_get_size_del</name><argument_list pos:start="213:30" pos:end="213:67">(<argument pos:start="213:31" pos:end="213:34"><expr pos:start="213:31" pos:end="213:34"><name pos:start="213:31" pos:end="213:34">opts</name></expr></argument>, <argument pos:start="213:37" pos:end="213:63"><expr pos:start="213:37" pos:end="213:63"><name pos:start="213:37" pos:end="213:63">PARALLELS_OPT_PREALLOC_SIZE</name></expr></argument>, <argument pos:start="213:66" pos:end="213:66"><expr pos:start="213:66" pos:end="213:66"><literal type="number" pos:start="213:66" pos:end="213:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:76"><expr pos:start="215:5" pos:end="215:75"><name pos:start="215:5" pos:end="215:20"><name pos:start="215:5" pos:end="215:5">s</name><operator pos:start="215:6" pos:end="215:7">-&gt;</operator><name pos:start="215:8" pos:end="215:20">prealloc_size</name></name> <operator pos:start="215:22" pos:end="215:22">=</operator> <call pos:start="215:24" pos:end="215:75"><name pos:start="215:24" pos:end="215:26">MAX</name><argument_list pos:start="215:27" pos:end="215:75">(<argument pos:start="215:28" pos:end="215:36"><expr pos:start="215:28" pos:end="215:36"><name pos:start="215:28" pos:end="215:36"><name pos:start="215:28" pos:end="215:28">s</name><operator pos:start="215:29" pos:end="215:30">-&gt;</operator><name pos:start="215:31" pos:end="215:36">tracks</name></name></expr></argument>, <argument pos:start="215:39" pos:end="215:74"><expr pos:start="215:39" pos:end="215:74"><name pos:start="215:39" pos:end="215:54"><name pos:start="215:39" pos:end="215:39">s</name><operator pos:start="215:40" pos:end="215:41">-&gt;</operator><name pos:start="215:42" pos:end="215:54">prealloc_size</name></name> <operator pos:start="215:56" pos:end="215:57">&gt;&gt;</operator> <name pos:start="215:59" pos:end="215:74">BDRV_SECTOR_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:62"><expr pos:start="217:5" pos:end="217:61"><name pos:start="217:5" pos:end="217:7">buf</name> <operator pos:start="217:9" pos:end="217:9">=</operator> <call pos:start="217:11" pos:end="217:61"><name pos:start="217:11" pos:end="217:26">qemu_opt_get_del</name><argument_list pos:start="217:27" pos:end="217:61">(<argument pos:start="217:28" pos:end="217:31"><expr pos:start="217:28" pos:end="217:31"><name pos:start="217:28" pos:end="217:31">opts</name></expr></argument>, <argument pos:start="217:34" pos:end="217:60"><expr pos:start="217:34" pos:end="217:60"><name pos:start="217:34" pos:end="217:60">PARALLELS_OPT_PREALLOC_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="221:77"><expr pos:start="219:5" pos:end="221:76"><name pos:start="219:5" pos:end="219:20"><name pos:start="219:5" pos:end="219:5">s</name><operator pos:start="219:6" pos:end="219:7">-&gt;</operator><name pos:start="219:8" pos:end="219:20">prealloc_mode</name></name> <operator pos:start="219:22" pos:end="219:22">=</operator> <call pos:start="219:24" pos:end="221:76"><name pos:start="219:24" pos:end="219:38">qapi_enum_parse</name><argument_list pos:start="219:39" pos:end="221:76">(<argument pos:start="219:40" pos:end="219:59"><expr pos:start="219:40" pos:end="219:59"><name pos:start="219:40" pos:end="219:59">prealloc_mode_lookup</name></expr></argument>, <argument pos:start="219:62" pos:end="219:64"><expr pos:start="219:62" pos:end="219:64"><name pos:start="219:62" pos:end="219:64">buf</name></expr></argument>,

            <argument pos:start="221:13" pos:end="221:34"><expr pos:start="221:13" pos:end="221:34"><name pos:start="221:13" pos:end="221:34">PRL_PREALLOC_MODE__MAX</name></expr></argument>, <argument pos:start="221:37" pos:end="221:63"><expr pos:start="221:37" pos:end="221:63"><name pos:start="221:37" pos:end="221:63">PRL_PREALLOC_MODE_FALLOCATE</name></expr></argument>, <argument pos:start="221:66" pos:end="221:75"><expr pos:start="221:66" pos:end="221:75"><operator pos:start="221:66" pos:end="221:66">&amp;</operator><name pos:start="221:67" pos:end="221:75">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:16"><expr pos:start="223:5" pos:end="223:15"><call pos:start="223:5" pos:end="223:15"><name pos:start="223:5" pos:end="223:10">g_free</name><argument_list pos:start="223:11" pos:end="223:15">(<argument pos:start="223:12" pos:end="223:14"><expr pos:start="223:12" pos:end="223:14"><name pos:start="223:12" pos:end="223:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="225:5" pos:end="229:5"><if pos:start="225:5" pos:end="229:5">if <condition pos:start="225:8" pos:end="225:26">(<expr pos:start="225:9" pos:end="225:25"><name pos:start="225:9" pos:end="225:17">local_err</name> <operator pos:start="225:19" pos:end="225:20">!=</operator> <name pos:start="225:22" pos:end="225:25">NULL</name></expr>)</condition> <block pos:start="225:28" pos:end="229:5">{<block_content pos:start="227:9" pos:end="227:26">

        <goto pos:start="227:9" pos:end="227:26">goto <name pos:start="227:14" pos:end="227:25">fail_options</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="233:5" pos:end="241:5"><if pos:start="233:5" pos:end="241:5">if <condition pos:start="233:8" pos:end="237:56">(<expr pos:start="233:9" pos:end="237:55"><operator pos:start="233:9" pos:end="233:9">!</operator><operator pos:start="233:10" pos:end="233:10">(</operator><name pos:start="233:11" pos:end="233:15">flags</name> <operator pos:start="233:17" pos:end="233:17">&amp;</operator> <name pos:start="233:19" pos:end="233:31">BDRV_O_RESIZE</name><operator pos:start="233:32" pos:end="233:32">)</operator> <operator pos:start="233:34" pos:end="233:35">||</operator> <operator pos:start="233:37" pos:end="233:37">!</operator><call pos:start="233:38" pos:end="233:69"><name pos:start="233:38" pos:end="233:55">bdrv_has_zero_init</name><argument_list pos:start="233:56" pos:end="233:69">(<argument pos:start="233:57" pos:end="233:68"><expr pos:start="233:57" pos:end="233:68"><name pos:start="233:57" pos:end="233:68"><name pos:start="233:57" pos:end="233:58">bs</name><operator pos:start="233:59" pos:end="233:60">-&gt;</operator><name pos:start="233:61" pos:end="233:64">file</name><operator pos:start="233:65" pos:end="233:66">-&gt;</operator><name pos:start="233:67" pos:end="233:68">bs</name></name></expr></argument>)</argument_list></call> <operator pos:start="233:71" pos:end="233:72">||</operator>

            <call pos:start="235:13" pos:end="237:50"><name pos:start="235:13" pos:end="235:25">bdrv_truncate</name><argument_list pos:start="235:26" pos:end="237:50">(<argument pos:start="235:27" pos:end="235:34"><expr pos:start="235:27" pos:end="235:34"><name pos:start="235:27" pos:end="235:34"><name pos:start="235:27" pos:end="235:28">bs</name><operator pos:start="235:29" pos:end="235:30">-&gt;</operator><name pos:start="235:31" pos:end="235:34">file</name></name></expr></argument>, <argument pos:start="235:37" pos:end="235:64"><expr pos:start="235:37" pos:end="235:64"><call pos:start="235:37" pos:end="235:64"><name pos:start="235:37" pos:end="235:50">bdrv_getlength</name><argument_list pos:start="235:51" pos:end="235:64">(<argument pos:start="235:52" pos:end="235:63"><expr pos:start="235:52" pos:end="235:63"><name pos:start="235:52" pos:end="235:63"><name pos:start="235:52" pos:end="235:53">bs</name><operator pos:start="235:54" pos:end="235:55">-&gt;</operator><name pos:start="235:56" pos:end="235:59">file</name><operator pos:start="235:60" pos:end="235:61">-&gt;</operator><name pos:start="235:62" pos:end="235:63">bs</name></name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="237:27" pos:end="237:43"><expr pos:start="237:27" pos:end="237:43"><name pos:start="237:27" pos:end="237:43">PREALLOC_MODE_OFF</name></expr></argument>, <argument pos:start="237:46" pos:end="237:49"><expr pos:start="237:46" pos:end="237:49"><name pos:start="237:46" pos:end="237:49">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="237:52" pos:end="237:53">!=</operator> <literal type="number" pos:start="237:55" pos:end="237:55">0</literal></expr>)</condition> <block pos:start="237:58" pos:end="241:5">{<block_content pos:start="239:9" pos:end="239:55">

        <expr_stmt pos:start="239:9" pos:end="239:55"><expr pos:start="239:9" pos:end="239:54"><name pos:start="239:9" pos:end="239:24"><name pos:start="239:9" pos:end="239:9">s</name><operator pos:start="239:10" pos:end="239:11">-&gt;</operator><name pos:start="239:12" pos:end="239:24">prealloc_mode</name></name> <operator pos:start="239:26" pos:end="239:26">=</operator> <name pos:start="239:28" pos:end="239:54">PRL_PREALLOC_MODE_FALLOCATE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="245:5" pos:end="257:5"><if pos:start="245:5" pos:end="257:5">if <condition pos:start="245:8" pos:end="245:28">(<expr pos:start="245:9" pos:end="245:27"><name pos:start="245:9" pos:end="245:13">flags</name> <operator pos:start="245:15" pos:end="245:15">&amp;</operator> <name pos:start="245:17" pos:end="245:27">BDRV_O_RDWR</name></expr>)</condition> <block pos:start="245:30" pos:end="257:5">{<block_content pos:start="247:9" pos:end="255:9">

        <expr_stmt pos:start="247:9" pos:end="247:59"><expr pos:start="247:9" pos:end="247:58"><name pos:start="247:9" pos:end="247:24"><name pos:start="247:9" pos:end="247:9">s</name><operator pos:start="247:10" pos:end="247:11">-&gt;</operator><name pos:start="247:12" pos:end="247:17">header</name><operator pos:start="247:18" pos:end="247:19">-&gt;</operator><name pos:start="247:20" pos:end="247:24">inuse</name></name> <operator pos:start="247:26" pos:end="247:26">=</operator> <call pos:start="247:28" pos:end="247:58"><name pos:start="247:28" pos:end="247:38">cpu_to_le32</name><argument_list pos:start="247:39" pos:end="247:58">(<argument pos:start="247:40" pos:end="247:57"><expr pos:start="247:40" pos:end="247:57"><name pos:start="247:40" pos:end="247:57">HEADER_INUSE_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:42"><expr pos:start="249:9" pos:end="249:41"><name pos:start="249:9" pos:end="249:11">ret</name> <operator pos:start="249:13" pos:end="249:13">=</operator> <call pos:start="249:15" pos:end="249:41"><name pos:start="249:15" pos:end="249:37">parallels_update_header</name><argument_list pos:start="249:38" pos:end="249:41">(<argument pos:start="249:39" pos:end="249:40"><expr pos:start="249:39" pos:end="249:40"><name pos:start="249:39" pos:end="249:40">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="251:9" pos:end="255:9"><if pos:start="251:9" pos:end="255:9">if <condition pos:start="251:12" pos:end="251:20">(<expr pos:start="251:13" pos:end="251:19"><name pos:start="251:13" pos:end="251:15">ret</name> <operator pos:start="251:17" pos:end="251:17">&lt;</operator> <literal type="number" pos:start="251:19" pos:end="251:19">0</literal></expr>)</condition> <block pos:start="251:22" pos:end="255:9">{<block_content pos:start="253:13" pos:end="253:22">

            <goto pos:start="253:13" pos:end="253:22">goto <name pos:start="253:18" pos:end="253:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="261:5" pos:end="261:43"><expr pos:start="261:5" pos:end="261:42"><name pos:start="261:5" pos:end="261:22"><name pos:start="261:5" pos:end="261:5">s</name><operator pos:start="261:6" pos:end="261:7">-&gt;</operator><name pos:start="261:8" pos:end="261:22">bat_dirty_block</name></name> <operator pos:start="261:24" pos:end="261:24">=</operator> <literal type="number" pos:start="261:26" pos:end="261:26">4</literal> <operator pos:start="261:28" pos:end="261:28">*</operator> <call pos:start="261:30" pos:end="261:42"><name pos:start="261:30" pos:end="261:40">getpagesize</name><argument_list pos:start="261:41" pos:end="261:42">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="265:69"><expr pos:start="263:5" pos:end="265:68"><name pos:start="263:5" pos:end="263:21"><name pos:start="263:5" pos:end="263:5">s</name><operator pos:start="263:6" pos:end="263:7">-&gt;</operator><name pos:start="263:8" pos:end="263:21">bat_dirty_bmap</name></name> <operator pos:start="263:23" pos:end="263:23">=</operator>

        <call pos:start="265:9" pos:end="265:68"><name pos:start="265:9" pos:end="265:18">bitmap_new</name><argument_list pos:start="265:19" pos:end="265:68">(<argument pos:start="265:20" pos:end="265:67"><expr pos:start="265:20" pos:end="265:67"><call pos:start="265:20" pos:end="265:67"><name pos:start="265:20" pos:end="265:31">DIV_ROUND_UP</name><argument_list pos:start="265:32" pos:end="265:67">(<argument pos:start="265:33" pos:end="265:46"><expr pos:start="265:33" pos:end="265:46"><name pos:start="265:33" pos:end="265:46"><name pos:start="265:33" pos:end="265:33">s</name><operator pos:start="265:34" pos:end="265:35">-&gt;</operator><name pos:start="265:36" pos:end="265:46">header_size</name></name></expr></argument>, <argument pos:start="265:49" pos:end="265:66"><expr pos:start="265:49" pos:end="265:66"><name pos:start="265:49" pos:end="265:66"><name pos:start="265:49" pos:end="265:49">s</name><operator pos:start="265:50" pos:end="265:51">-&gt;</operator><name pos:start="265:52" pos:end="265:66">bat_dirty_block</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="269:5" pos:end="269:33"><expr pos:start="269:5" pos:end="269:32"><call pos:start="269:5" pos:end="269:32"><name pos:start="269:5" pos:end="269:22">qemu_co_mutex_init</name><argument_list pos:start="269:23" pos:end="269:32">(<argument pos:start="269:24" pos:end="269:31"><expr pos:start="269:24" pos:end="269:31"><operator pos:start="269:24" pos:end="269:24">&amp;</operator><name pos:start="269:25" pos:end="269:31"><name pos:start="269:25" pos:end="269:25">s</name><operator pos:start="269:26" pos:end="269:27">-&gt;</operator><name pos:start="269:28" pos:end="269:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="271:5" pos:end="271:13">return <expr pos:start="271:12" pos:end="271:12"><literal type="number" pos:start="271:12" pos:end="271:12">0</literal></expr>;</return>



<label pos:start="275:1" pos:end="275:12"><name pos:start="275:1" pos:end="275:11">fail_format</name>:</label>

    <expr_stmt pos:start="277:5" pos:end="277:54"><expr pos:start="277:5" pos:end="277:53"><call pos:start="277:5" pos:end="277:53"><name pos:start="277:5" pos:end="277:14">error_setg</name><argument_list pos:start="277:15" pos:end="277:53">(<argument pos:start="277:16" pos:end="277:19"><expr pos:start="277:16" pos:end="277:19"><name pos:start="277:16" pos:end="277:19">errp</name></expr></argument>, <argument pos:start="277:22" pos:end="277:52"><expr pos:start="277:22" pos:end="277:52"><literal type="string" pos:start="277:22" pos:end="277:52">"Image not in Parallels format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:18"><expr pos:start="279:5" pos:end="279:17"><name pos:start="279:5" pos:end="279:7">ret</name> <operator pos:start="279:9" pos:end="279:9">=</operator> <operator pos:start="279:11" pos:end="279:11">-</operator><name pos:start="279:12" pos:end="279:17">EINVAL</name></expr>;</expr_stmt>

<label pos:start="281:1" pos:end="281:5"><name pos:start="281:1" pos:end="281:4">fail</name>:</label>

    <expr_stmt pos:start="283:5" pos:end="283:26"><expr pos:start="283:5" pos:end="283:25"><call pos:start="283:5" pos:end="283:25"><name pos:start="283:5" pos:end="283:14">qemu_vfree</name><argument_list pos:start="283:15" pos:end="283:25">(<argument pos:start="283:16" pos:end="283:24"><expr pos:start="283:16" pos:end="283:24"><name pos:start="283:16" pos:end="283:24"><name pos:start="283:16" pos:end="283:16">s</name><operator pos:start="283:17" pos:end="283:18">-&gt;</operator><name pos:start="283:19" pos:end="283:24">header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="285:5" pos:end="285:15">return <expr pos:start="285:12" pos:end="285:14"><name pos:start="285:12" pos:end="285:14">ret</name></expr>;</return>



<label pos:start="289:1" pos:end="289:13"><name pos:start="289:1" pos:end="289:12">fail_options</name>:</label>

    <expr_stmt pos:start="291:5" pos:end="291:37"><expr pos:start="291:5" pos:end="291:36"><call pos:start="291:5" pos:end="291:36"><name pos:start="291:5" pos:end="291:19">error_propagate</name><argument_list pos:start="291:20" pos:end="291:36">(<argument pos:start="291:21" pos:end="291:24"><expr pos:start="291:21" pos:end="291:24"><name pos:start="291:21" pos:end="291:24">errp</name></expr></argument>, <argument pos:start="291:27" pos:end="291:35"><expr pos:start="291:27" pos:end="291:35"><name pos:start="291:27" pos:end="291:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="293:5" pos:end="293:18"><expr pos:start="293:5" pos:end="293:17"><name pos:start="293:5" pos:end="293:7">ret</name> <operator pos:start="293:9" pos:end="293:9">=</operator> <operator pos:start="293:11" pos:end="293:11">-</operator><name pos:start="293:12" pos:end="293:17">EINVAL</name></expr>;</expr_stmt>

    <goto pos:start="295:5" pos:end="295:14">goto <name pos:start="295:10" pos:end="295:13">fail</name>;</goto>

</block_content>}</block></function>
</unit>
