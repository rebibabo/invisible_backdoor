<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20781.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:39">mov_preroll_write_stbl_atoms</name><parameter_list pos:start="1:40" pos:end="1:73">(<parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:55"><name pos:start="1:41" pos:end="1:51">AVIOContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">pb</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:72"><decl pos:start="1:58" pos:end="1:72"><type pos:start="1:58" pos:end="1:72"><name pos:start="1:58" pos:end="1:65">MOVTrack</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:72">track</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="167:1">{<block_content pos:start="5:5" pos:end="165:13">

    <struct pos:start="5:5" pos:end="13:6">struct <name pos:start="5:12" pos:end="5:21">sgpd_entry</name> <block pos:start="5:23" pos:end="13:5">{

        <decl_stmt pos:start="7:9" pos:end="7:18"><decl pos:start="7:9" pos:end="7:17"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:17">count</name></decl>;</decl_stmt>

        <decl_stmt pos:start="9:9" pos:end="9:30"><decl pos:start="9:9" pos:end="9:29"><type pos:start="9:9" pos:end="9:15"><name pos:start="9:9" pos:end="9:15">int16_t</name></type> <name pos:start="9:17" pos:end="9:29">roll_distance</name></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:36"><decl pos:start="11:9" pos:end="11:35"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:35">group_description_index</name></decl>;</decl_stmt>

    }</block>;</struct>



    <decl_stmt pos:start="17:5" pos:end="17:43"><decl pos:start="17:5" pos:end="17:42"><type pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:21">sgpd_entry</name></name> <modifier pos:start="17:23" pos:end="17:23">*</modifier></type><name pos:start="17:24" pos:end="17:35">sgpd_entries</name> <init pos:start="17:37" pos:end="17:42">= <expr pos:start="17:39" pos:end="17:42"><name pos:start="17:39" pos:end="17:42">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:15">entries</name> <init pos:start="19:17" pos:end="19:20">= <expr pos:start="19:19" pos:end="19:20"><operator pos:start="19:19" pos:end="19:19">-</operator><literal type="number" pos:start="19:20" pos:end="19:20">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:13">group</name> <init pos:start="21:15" pos:end="21:17">= <expr pos:start="21:17" pos:end="21:17"><literal type="number" pos:start="21:17" pos:end="21:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:13"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>, <decl pos:start="23:12" pos:end="23:12"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:12" pos:end="23:12">j</name></decl>;</decl_stmt>



    <decl_stmt pos:start="27:5" pos:end="27:40"><decl pos:start="27:5" pos:end="27:39"><type pos:start="27:5" pos:end="27:13"><specifier pos:start="27:5" pos:end="27:9">const</specifier> <name pos:start="27:11" pos:end="27:13">int</name></type> <name pos:start="27:15" pos:end="27:34">OPUS_SEEK_PREROLL_MS</name> <init pos:start="27:36" pos:end="27:39">= <expr pos:start="27:38" pos:end="27:39"><literal type="number" pos:start="27:38" pos:end="27:39">80</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="33:60"><decl pos:start="29:5" pos:end="33:59"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:20">roll_samples</name> <init pos:start="29:22" pos:end="33:59">= <macro pos:start="29:24" pos:end="33:59"><name pos:start="29:24" pos:end="29:35">av_rescale_q</name><argument_list pos:start="29:36" pos:end="33:59">(<argument pos:start="29:37" pos:end="29:56">OPUS_SEEK_PREROLL_MS</argument>,

                                    <argument pos:start="31:37" pos:end="31:50">(AVRational){<literal type="number" pos:start="31:50" pos:end="31:50">1</literal></argument>, <argument pos:start="31:53" pos:end="31:57"><literal type="number" pos:start="31:53" pos:end="31:56">1000</literal>}</argument>,

                                    <argument pos:start="33:37" pos:end="33:50">(AVRational){<literal type="number" pos:start="33:50" pos:end="33:50">1</literal></argument>, <argument pos:start="33:53" pos:end="33:58"><literal type="number" pos:start="33:53" pos:end="33:57">48000</literal>}</argument>)</argument_list></macro></init></decl>;</decl_stmt>



    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:21">(<expr pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:13">track</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:20">entry</name></name></expr>)</condition> <block pos:start="37:23" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:35">

        <expr_stmt pos:start="39:9" pos:end="39:76"><expr pos:start="39:9" pos:end="39:75"><name pos:start="39:9" pos:end="39:20">sgpd_entries</name> <operator pos:start="39:22" pos:end="39:22">=</operator> <call pos:start="39:24" pos:end="39:75"><name pos:start="39:24" pos:end="39:38">av_malloc_array</name><argument_list pos:start="39:39" pos:end="39:75">(<argument pos:start="39:40" pos:end="39:51"><expr pos:start="39:40" pos:end="39:51"><name pos:start="39:40" pos:end="39:51"><name pos:start="39:40" pos:end="39:44">track</name><operator pos:start="39:45" pos:end="39:46">-&gt;</operator><name pos:start="39:47" pos:end="39:51">entry</name></name></expr></argument>, <argument pos:start="39:54" pos:end="39:74"><expr pos:start="39:54" pos:end="39:74"><sizeof pos:start="39:54" pos:end="39:74">sizeof<argument_list pos:start="39:60" pos:end="39:74">(<argument pos:start="39:61" pos:end="39:73"><expr pos:start="39:61" pos:end="39:73"><operator pos:start="39:61" pos:end="39:61">*</operator><name pos:start="39:62" pos:end="39:73">sgpd_entries</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="43:35"><if pos:start="41:9" pos:end="43:35">if <condition pos:start="41:12" pos:end="41:26">(<expr pos:start="41:13" pos:end="41:25"><operator pos:start="41:13" pos:end="41:13">!</operator><name pos:start="41:14" pos:end="41:25">sgpd_entries</name></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:35"><block_content pos:start="43:13" pos:end="43:35">

            <return pos:start="43:13" pos:end="43:35">return <expr pos:start="43:20" pos:end="43:34"><call pos:start="43:20" pos:end="43:34"><name pos:start="43:20" pos:end="43:26">AVERROR</name><argument_list pos:start="43:27" pos:end="43:34">(<argument pos:start="43:28" pos:end="43:33"><expr pos:start="43:28" pos:end="43:33"><name pos:start="43:28" pos:end="43:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:57"><expr pos:start="49:5" pos:end="49:56"><call pos:start="49:5" pos:end="49:56"><name pos:start="49:5" pos:end="49:14">av_assert0</name><argument_list pos:start="49:15" pos:end="49:56">(<argument pos:start="49:16" pos:end="49:55"><expr pos:start="49:16" pos:end="49:55"><name pos:start="49:16" pos:end="49:35"><name pos:start="49:16" pos:end="49:20">track</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:25">par</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:35">codec_id</name></name> <operator pos:start="49:37" pos:end="49:38">==</operator> <name pos:start="49:40" pos:end="49:55">AV_CODEC_ID_OPUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="53:5" pos:end="103:5">for <control pos:start="53:9" pos:end="53:38">(<init pos:start="53:10" pos:end="53:15"><expr pos:start="53:10" pos:end="53:14"><name pos:start="53:10" pos:end="53:10">i</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>;</init> <condition pos:start="53:17" pos:end="53:33"><expr pos:start="53:17" pos:end="53:32"><name pos:start="53:17" pos:end="53:17">i</name> <operator pos:start="53:19" pos:end="53:19">&lt;</operator> <name pos:start="53:21" pos:end="53:32"><name pos:start="53:21" pos:end="53:25">track</name><operator pos:start="53:26" pos:end="53:27">-&gt;</operator><name pos:start="53:28" pos:end="53:32">entry</name></name></expr>;</condition> <incr pos:start="53:35" pos:end="53:37"><expr pos:start="53:35" pos:end="53:37"><name pos:start="53:35" pos:end="53:35">i</name><operator pos:start="53:36" pos:end="53:37">++</operator></expr></incr>)</control> <block pos:start="53:40" pos:end="103:5">{<block_content pos:start="55:9" pos:end="101:9">

        <decl_stmt pos:start="55:9" pos:end="55:50"><decl pos:start="55:9" pos:end="55:49"><type pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:11">int</name></type> <name pos:start="55:13" pos:end="55:34">roll_samples_remaining</name> <init pos:start="55:36" pos:end="55:49">= <expr pos:start="55:38" pos:end="55:49"><name pos:start="55:38" pos:end="55:49">roll_samples</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:25"><decl pos:start="57:9" pos:end="57:24"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:20">distance</name> <init pos:start="57:22" pos:end="57:24">= <expr pos:start="57:24" pos:end="57:24"><literal type="number" pos:start="57:24" pos:end="57:24">0</literal></expr></init></decl>;</decl_stmt>

        <for pos:start="59:9" pos:end="69:9">for <control pos:start="59:13" pos:end="59:36">(<init pos:start="59:14" pos:end="59:23"><expr pos:start="59:14" pos:end="59:22"><name pos:start="59:14" pos:end="59:14">j</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <name pos:start="59:18" pos:end="59:18">i</name> <operator pos:start="59:20" pos:end="59:20">-</operator> <literal type="number" pos:start="59:22" pos:end="59:22">1</literal></expr>;</init> <condition pos:start="59:25" pos:end="59:31"><expr pos:start="59:25" pos:end="59:30"><name pos:start="59:25" pos:end="59:25">j</name> <operator pos:start="59:27" pos:end="59:28">&gt;=</operator> <literal type="number" pos:start="59:30" pos:end="59:30">0</literal></expr>;</condition> <incr pos:start="59:33" pos:end="59:35"><expr pos:start="59:33" pos:end="59:35"><name pos:start="59:33" pos:end="59:33">j</name><operator pos:start="59:34" pos:end="59:35">--</operator></expr></incr>)</control> <block pos:start="59:38" pos:end="69:9">{<block_content pos:start="61:13" pos:end="67:22">

            <expr_stmt pos:start="61:13" pos:end="61:69"><expr pos:start="61:13" pos:end="61:68"><name pos:start="61:13" pos:end="61:34">roll_samples_remaining</name> <operator pos:start="61:36" pos:end="61:37">-=</operator> <call pos:start="61:39" pos:end="61:68"><name pos:start="61:39" pos:end="61:58">get_cluster_duration</name><argument_list pos:start="61:59" pos:end="61:68">(<argument pos:start="61:60" pos:end="61:64"><expr pos:start="61:60" pos:end="61:64"><name pos:start="61:60" pos:end="61:64">track</name></expr></argument>, <argument pos:start="61:67" pos:end="61:67"><expr pos:start="61:67" pos:end="61:67"><name pos:start="61:67" pos:end="61:67">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:23"><expr pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:20">distance</name><operator pos:start="63:21" pos:end="63:22">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="65:13" pos:end="67:22"><if pos:start="65:13" pos:end="67:22">if <condition pos:start="65:16" pos:end="65:44">(<expr pos:start="65:17" pos:end="65:43"><name pos:start="65:17" pos:end="65:38">roll_samples_remaining</name> <operator pos:start="65:40" pos:end="65:41">&lt;=</operator> <literal type="number" pos:start="65:43" pos:end="65:43">0</literal></expr>)</condition><block type="pseudo" pos:start="67:17" pos:end="67:22"><block_content pos:start="67:17" pos:end="67:22">

                <break pos:start="67:17" pos:end="67:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="71:9" pos:end="75:22">/* We don't have enough preceeding samples to compute a valid

           roll_distance here, so this sample can't be independently

           decoded. */</comment>

        <if_stmt pos:start="77:9" pos:end="79:25"><if pos:start="77:9" pos:end="79:25">if <condition pos:start="77:12" pos:end="77:39">(<expr pos:start="77:13" pos:end="77:38"><name pos:start="77:13" pos:end="77:34">roll_samples_remaining</name> <operator pos:start="77:36" pos:end="77:36">&gt;</operator> <literal type="number" pos:start="77:38" pos:end="77:38">0</literal></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:25"><block_content pos:start="79:13" pos:end="79:25">

            <expr_stmt pos:start="79:13" pos:end="79:25"><expr pos:start="79:13" pos:end="79:24"><name pos:start="79:13" pos:end="79:20">distance</name> <operator pos:start="79:22" pos:end="79:22">=</operator> <literal type="number" pos:start="79:24" pos:end="79:24">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block" pos:start="81:9" pos:end="83:33">/* Verify distance is a minimum of 2 (60ms) packets and a maximum of

           32 (2.5ms) packets. */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:71"><expr pos:start="85:9" pos:end="85:70"><call pos:start="85:9" pos:end="85:70"><name pos:start="85:9" pos:end="85:18">av_assert0</name><argument_list pos:start="85:19" pos:end="85:70">(<argument pos:start="85:20" pos:end="85:69"><expr pos:start="85:20" pos:end="85:69"><name pos:start="85:20" pos:end="85:27">distance</name> <operator pos:start="85:29" pos:end="85:30">==</operator> <literal type="number" pos:start="85:32" pos:end="85:32">0</literal> <operator pos:start="85:34" pos:end="85:35">||</operator> <operator pos:start="85:37" pos:end="85:37">(</operator><name pos:start="85:38" pos:end="85:45">distance</name> <operator pos:start="85:47" pos:end="85:48">&gt;=</operator> <literal type="number" pos:start="85:50" pos:end="85:50">2</literal> <operator pos:start="85:52" pos:end="85:53">&amp;&amp;</operator> <name pos:start="85:55" pos:end="85:62">distance</name> <operator pos:start="85:64" pos:end="85:65">&lt;=</operator> <literal type="number" pos:start="85:67" pos:end="85:68">32</literal><operator pos:start="85:69" pos:end="85:69">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="101:9"><if pos:start="87:9" pos:end="91:9">if <condition pos:start="87:12" pos:end="87:65">(<expr pos:start="87:13" pos:end="87:64"><name pos:start="87:13" pos:end="87:13">i</name> <operator pos:start="87:15" pos:end="87:16">&amp;&amp;</operator> <name pos:start="87:18" pos:end="87:25">distance</name> <operator pos:start="87:27" pos:end="87:28">==</operator> <name pos:start="87:30" pos:end="87:50"><name pos:start="87:30" pos:end="87:41">sgpd_entries</name><index pos:start="87:42" pos:end="87:50">[<expr pos:start="87:43" pos:end="87:49"><name pos:start="87:43" pos:end="87:49">entries</name></expr>]</index></name><operator pos:start="87:51" pos:end="87:51">.</operator><name pos:start="87:52" pos:end="87:64">roll_distance</name></expr>)</condition> <block pos:start="87:67" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:42">

            <expr_stmt pos:start="89:13" pos:end="89:42"><expr pos:start="89:13" pos:end="89:41"><name pos:start="89:13" pos:end="89:33"><name pos:start="89:13" pos:end="89:24">sgpd_entries</name><index pos:start="89:25" pos:end="89:33">[<expr pos:start="89:26" pos:end="89:32"><name pos:start="89:26" pos:end="89:32">entries</name></expr>]</index></name><operator pos:start="89:34" pos:end="89:34">.</operator><name pos:start="89:35" pos:end="89:39">count</name><operator pos:start="89:40" pos:end="89:41">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="91:11" pos:end="101:9">else <block pos:start="91:16" pos:end="101:9">{<block_content pos:start="93:13" pos:end="99:83">

            <expr_stmt pos:start="93:13" pos:end="93:22"><expr pos:start="93:13" pos:end="93:21"><name pos:start="93:13" pos:end="93:19">entries</name><operator pos:start="93:20" pos:end="93:21">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:44"><expr pos:start="95:13" pos:end="95:43"><name pos:start="95:13" pos:end="95:33"><name pos:start="95:13" pos:end="95:24">sgpd_entries</name><index pos:start="95:25" pos:end="95:33">[<expr pos:start="95:26" pos:end="95:32"><name pos:start="95:26" pos:end="95:32">entries</name></expr>]</index></name><operator pos:start="95:34" pos:end="95:34">.</operator><name pos:start="95:35" pos:end="95:39">count</name> <operator pos:start="95:41" pos:end="95:41">=</operator> <literal type="number" pos:start="95:43" pos:end="95:43">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:59"><expr pos:start="97:13" pos:end="97:58"><name pos:start="97:13" pos:end="97:33"><name pos:start="97:13" pos:end="97:24">sgpd_entries</name><index pos:start="97:25" pos:end="97:33">[<expr pos:start="97:26" pos:end="97:32"><name pos:start="97:26" pos:end="97:32">entries</name></expr>]</index></name><operator pos:start="97:34" pos:end="97:34">.</operator><name pos:start="97:35" pos:end="97:47">roll_distance</name> <operator pos:start="97:49" pos:end="97:49">=</operator> <name pos:start="97:51" pos:end="97:58">distance</name></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:83"><expr pos:start="99:13" pos:end="99:82"><name pos:start="99:13" pos:end="99:33"><name pos:start="99:13" pos:end="99:24">sgpd_entries</name><index pos:start="99:25" pos:end="99:33">[<expr pos:start="99:26" pos:end="99:32"><name pos:start="99:26" pos:end="99:32">entries</name></expr>]</index></name><operator pos:start="99:34" pos:end="99:34">.</operator><name pos:start="99:35" pos:end="99:57">group_description_index</name> <operator pos:start="99:59" pos:end="99:59">=</operator> <ternary pos:start="99:61" pos:end="99:82"><condition pos:start="99:61" pos:end="99:70"><expr pos:start="99:61" pos:end="99:68"><name pos:start="99:61" pos:end="99:68">distance</name></expr> ?</condition><then pos:start="99:72" pos:end="99:78"> <expr pos:start="99:72" pos:end="99:78"><operator pos:start="99:72" pos:end="99:73">++</operator><name pos:start="99:74" pos:end="99:78">group</name></expr> </then><else pos:start="99:80" pos:end="99:82">: <expr pos:start="99:82" pos:end="99:82"><literal type="number" pos:start="99:82" pos:end="99:82">0</literal></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="105:5" pos:end="105:14"><expr pos:start="105:5" pos:end="105:13"><name pos:start="105:5" pos:end="105:11">entries</name><operator pos:start="105:12" pos:end="105:13">++</operator></expr>;</expr_stmt>



    <if_stmt pos:start="109:5" pos:end="111:17"><if pos:start="109:5" pos:end="111:17">if <condition pos:start="109:8" pos:end="109:15">(<expr pos:start="109:9" pos:end="109:14"><operator pos:start="109:9" pos:end="109:9">!</operator><name pos:start="109:10" pos:end="109:14">group</name></expr>)</condition><block type="pseudo" pos:start="111:9" pos:end="111:17"><block_content pos:start="111:9" pos:end="111:17">

        <return pos:start="111:9" pos:end="111:17">return <expr pos:start="111:16" pos:end="111:16"><literal type="number" pos:start="111:16" pos:end="111:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:24">/* Write sgpd tag */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:36"><expr pos:start="117:5" pos:end="117:35"><call pos:start="117:5" pos:end="117:35"><name pos:start="117:5" pos:end="117:13">avio_wb32</name><argument_list pos:start="117:14" pos:end="117:35">(<argument pos:start="117:15" pos:end="117:16"><expr pos:start="117:15" pos:end="117:16"><name pos:start="117:15" pos:end="117:16">pb</name></expr></argument>, <argument pos:start="117:19" pos:end="117:34"><expr pos:start="117:19" pos:end="117:34"><literal type="number" pos:start="117:19" pos:end="117:22">24</literal> <operator pos:start="117:22" pos:end="117:22">+</operator> <operator pos:start="117:24" pos:end="117:24">(</operator><name pos:start="117:25" pos:end="117:29">group</name> <operator pos:start="117:31" pos:end="117:31">*</operator> <literal type="number" pos:start="117:33" pos:end="117:33">2</literal><operator pos:start="117:34" pos:end="117:34">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="117:38" pos:end="117:47">/* size */</comment>

    <expr_stmt pos:start="119:5" pos:end="119:29"><expr pos:start="119:5" pos:end="119:28"><call pos:start="119:5" pos:end="119:28"><name pos:start="119:5" pos:end="119:16">ffio_wfourcc</name><argument_list pos:start="119:17" pos:end="119:28">(<argument pos:start="119:18" pos:end="119:19"><expr pos:start="119:18" pos:end="119:19"><name pos:start="119:18" pos:end="119:19">pb</name></expr></argument>, <argument pos:start="119:22" pos:end="119:27"><expr pos:start="119:22" pos:end="119:27"><literal type="string" pos:start="119:22" pos:end="119:27">"sgpd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:27"><expr pos:start="121:5" pos:end="121:26"><call pos:start="121:5" pos:end="121:26"><name pos:start="121:5" pos:end="121:13">avio_wb32</name><argument_list pos:start="121:14" pos:end="121:26">(<argument pos:start="121:15" pos:end="121:16"><expr pos:start="121:15" pos:end="121:16"><name pos:start="121:15" pos:end="121:16">pb</name></expr></argument>, <argument pos:start="121:19" pos:end="121:25"><expr pos:start="121:19" pos:end="121:25"><literal type="number" pos:start="121:19" pos:end="121:19">1</literal> <operator pos:start="121:21" pos:end="121:22">&lt;&lt;</operator> <literal type="number" pos:start="121:24" pos:end="121:25">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="121:29" pos:end="121:41">/* fullbox */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:29"><expr pos:start="123:5" pos:end="123:28"><call pos:start="123:5" pos:end="123:28"><name pos:start="123:5" pos:end="123:16">ffio_wfourcc</name><argument_list pos:start="123:17" pos:end="123:28">(<argument pos:start="123:18" pos:end="123:19"><expr pos:start="123:18" pos:end="123:19"><name pos:start="123:18" pos:end="123:19">pb</name></expr></argument>, <argument pos:start="123:22" pos:end="123:27"><expr pos:start="123:22" pos:end="123:27"><literal type="string" pos:start="123:22" pos:end="123:27">"roll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:21"><expr pos:start="125:5" pos:end="125:20"><call pos:start="125:5" pos:end="125:20"><name pos:start="125:5" pos:end="125:13">avio_wb32</name><argument_list pos:start="125:14" pos:end="125:20">(<argument pos:start="125:15" pos:end="125:16"><expr pos:start="125:15" pos:end="125:16"><name pos:start="125:15" pos:end="125:16">pb</name></expr></argument>, <argument pos:start="125:19" pos:end="125:19"><expr pos:start="125:19" pos:end="125:19"><literal type="number" pos:start="125:19" pos:end="125:19">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="125:23" pos:end="125:42">/* default_length */</comment>

    <expr_stmt pos:start="127:5" pos:end="127:25"><expr pos:start="127:5" pos:end="127:24"><call pos:start="127:5" pos:end="127:24"><name pos:start="127:5" pos:end="127:13">avio_wb32</name><argument_list pos:start="127:14" pos:end="127:24">(<argument pos:start="127:15" pos:end="127:16"><expr pos:start="127:15" pos:end="127:16"><name pos:start="127:15" pos:end="127:16">pb</name></expr></argument>, <argument pos:start="127:19" pos:end="127:23"><expr pos:start="127:19" pos:end="127:23"><name pos:start="127:19" pos:end="127:23">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="127:27" pos:end="127:43">/* entry_count */</comment>

    <for pos:start="129:5" pos:end="137:5">for <control pos:start="129:9" pos:end="129:33">(<init pos:start="129:10" pos:end="129:15"><expr pos:start="129:10" pos:end="129:14"><name pos:start="129:10" pos:end="129:10">i</name> <operator pos:start="129:12" pos:end="129:12">=</operator> <literal type="number" pos:start="129:14" pos:end="129:14">0</literal></expr>;</init> <condition pos:start="129:17" pos:end="129:28"><expr pos:start="129:17" pos:end="129:27"><name pos:start="129:17" pos:end="129:17">i</name> <operator pos:start="129:19" pos:end="129:19">&lt;</operator> <name pos:start="129:21" pos:end="129:27">entries</name></expr>;</condition> <incr pos:start="129:30" pos:end="129:32"><expr pos:start="129:30" pos:end="129:32"><name pos:start="129:30" pos:end="129:30">i</name><operator pos:start="129:31" pos:end="129:32">++</operator></expr></incr>)</control> <block pos:start="129:35" pos:end="137:5">{<block_content pos:start="131:9" pos:end="135:9">

        <if_stmt pos:start="131:9" pos:end="135:9"><if pos:start="131:9" pos:end="135:9">if <condition pos:start="131:12" pos:end="131:52">(<expr pos:start="131:13" pos:end="131:51"><name pos:start="131:13" pos:end="131:27"><name pos:start="131:13" pos:end="131:24">sgpd_entries</name><index pos:start="131:25" pos:end="131:27">[<expr pos:start="131:26" pos:end="131:26"><name pos:start="131:26" pos:end="131:26">i</name></expr>]</index></name><operator pos:start="131:28" pos:end="131:28">.</operator><name pos:start="131:29" pos:end="131:51">group_description_index</name></expr>)</condition> <block pos:start="131:54" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:58">

            <expr_stmt pos:start="133:13" pos:end="133:58"><expr pos:start="133:13" pos:end="133:57"><call pos:start="133:13" pos:end="133:57"><name pos:start="133:13" pos:end="133:21">avio_wb16</name><argument_list pos:start="133:22" pos:end="133:57">(<argument pos:start="133:23" pos:end="133:24"><expr pos:start="133:23" pos:end="133:24"><name pos:start="133:23" pos:end="133:24">pb</name></expr></argument>, <argument pos:start="133:27" pos:end="133:56"><expr pos:start="133:27" pos:end="133:56"><operator pos:start="133:27" pos:end="133:27">-</operator><name pos:start="133:28" pos:end="133:42"><name pos:start="133:28" pos:end="133:39">sgpd_entries</name><index pos:start="133:40" pos:end="133:42">[<expr pos:start="133:41" pos:end="133:41"><name pos:start="133:41" pos:end="133:41">i</name></expr>]</index></name><operator pos:start="133:43" pos:end="133:43">.</operator><name pos:start="133:44" pos:end="133:56">roll_distance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="133:60" pos:end="133:78">/* roll_distance */</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="141:5" pos:end="141:24">/* Write sbgp tag */</comment>

    <expr_stmt pos:start="143:5" pos:end="143:38"><expr pos:start="143:5" pos:end="143:37"><call pos:start="143:5" pos:end="143:37"><name pos:start="143:5" pos:end="143:13">avio_wb32</name><argument_list pos:start="143:14" pos:end="143:37">(<argument pos:start="143:15" pos:end="143:16"><expr pos:start="143:15" pos:end="143:16"><name pos:start="143:15" pos:end="143:16">pb</name></expr></argument>, <argument pos:start="143:19" pos:end="143:36"><expr pos:start="143:19" pos:end="143:36"><literal type="number" pos:start="143:19" pos:end="143:22">20</literal> <operator pos:start="143:22" pos:end="143:22">+</operator> <operator pos:start="143:24" pos:end="143:24">(</operator><name pos:start="143:25" pos:end="143:31">entries</name> <operator pos:start="143:33" pos:end="143:33">*</operator> <literal type="number" pos:start="143:35" pos:end="143:35">8</literal><operator pos:start="143:36" pos:end="143:36">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="143:40" pos:end="143:49">/* size */</comment>

    <expr_stmt pos:start="145:5" pos:end="145:29"><expr pos:start="145:5" pos:end="145:28"><call pos:start="145:5" pos:end="145:28"><name pos:start="145:5" pos:end="145:16">ffio_wfourcc</name><argument_list pos:start="145:17" pos:end="145:28">(<argument pos:start="145:18" pos:end="145:19"><expr pos:start="145:18" pos:end="145:19"><name pos:start="145:18" pos:end="145:19">pb</name></expr></argument>, <argument pos:start="145:22" pos:end="145:27"><expr pos:start="145:22" pos:end="145:27"><literal type="string" pos:start="145:22" pos:end="145:27">"sbgp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:21"><expr pos:start="147:5" pos:end="147:20"><call pos:start="147:5" pos:end="147:20"><name pos:start="147:5" pos:end="147:13">avio_wb32</name><argument_list pos:start="147:14" pos:end="147:20">(<argument pos:start="147:15" pos:end="147:16"><expr pos:start="147:15" pos:end="147:16"><name pos:start="147:15" pos:end="147:16">pb</name></expr></argument>, <argument pos:start="147:19" pos:end="147:19"><expr pos:start="147:19" pos:end="147:19"><literal type="number" pos:start="147:19" pos:end="147:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="147:23" pos:end="147:35">/* fullbox */</comment>

    <expr_stmt pos:start="149:5" pos:end="149:29"><expr pos:start="149:5" pos:end="149:28"><call pos:start="149:5" pos:end="149:28"><name pos:start="149:5" pos:end="149:16">ffio_wfourcc</name><argument_list pos:start="149:17" pos:end="149:28">(<argument pos:start="149:18" pos:end="149:19"><expr pos:start="149:18" pos:end="149:19"><name pos:start="149:18" pos:end="149:19">pb</name></expr></argument>, <argument pos:start="149:22" pos:end="149:27"><expr pos:start="149:22" pos:end="149:27"><literal type="string" pos:start="149:22" pos:end="149:27">"roll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:27"><expr pos:start="151:5" pos:end="151:26"><call pos:start="151:5" pos:end="151:26"><name pos:start="151:5" pos:end="151:13">avio_wb32</name><argument_list pos:start="151:14" pos:end="151:26">(<argument pos:start="151:15" pos:end="151:16"><expr pos:start="151:15" pos:end="151:16"><name pos:start="151:15" pos:end="151:16">pb</name></expr></argument>, <argument pos:start="151:19" pos:end="151:25"><expr pos:start="151:19" pos:end="151:25"><name pos:start="151:19" pos:end="151:25">entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="151:29" pos:end="151:45">/* entry_count */</comment>

    <for pos:start="153:5" pos:end="159:5">for <control pos:start="153:9" pos:end="153:33">(<init pos:start="153:10" pos:end="153:15"><expr pos:start="153:10" pos:end="153:14"><name pos:start="153:10" pos:end="153:10">i</name> <operator pos:start="153:12" pos:end="153:12">=</operator> <literal type="number" pos:start="153:14" pos:end="153:14">0</literal></expr>;</init> <condition pos:start="153:17" pos:end="153:28"><expr pos:start="153:17" pos:end="153:27"><name pos:start="153:17" pos:end="153:17">i</name> <operator pos:start="153:19" pos:end="153:19">&lt;</operator> <name pos:start="153:21" pos:end="153:27">entries</name></expr>;</condition> <incr pos:start="153:30" pos:end="153:32"><expr pos:start="153:30" pos:end="153:32"><name pos:start="153:30" pos:end="153:30">i</name><operator pos:start="153:31" pos:end="153:32">++</operator></expr></incr>)</control> <block pos:start="153:35" pos:end="159:5">{<block_content pos:start="155:9" pos:end="157:63">

        <expr_stmt pos:start="155:9" pos:end="155:45"><expr pos:start="155:9" pos:end="155:44"><call pos:start="155:9" pos:end="155:44"><name pos:start="155:9" pos:end="155:17">avio_wb32</name><argument_list pos:start="155:18" pos:end="155:44">(<argument pos:start="155:19" pos:end="155:20"><expr pos:start="155:19" pos:end="155:20"><name pos:start="155:19" pos:end="155:20">pb</name></expr></argument>, <argument pos:start="155:23" pos:end="155:43"><expr pos:start="155:23" pos:end="155:43"><name pos:start="155:23" pos:end="155:37"><name pos:start="155:23" pos:end="155:34">sgpd_entries</name><index pos:start="155:35" pos:end="155:37">[<expr pos:start="155:36" pos:end="155:36"><name pos:start="155:36" pos:end="155:36">i</name></expr>]</index></name><operator pos:start="155:38" pos:end="155:38">.</operator><name pos:start="155:39" pos:end="155:43">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="155:47" pos:end="155:64">/* sample_count */</comment>

        <expr_stmt pos:start="157:9" pos:end="157:63"><expr pos:start="157:9" pos:end="157:62"><call pos:start="157:9" pos:end="157:62"><name pos:start="157:9" pos:end="157:17">avio_wb32</name><argument_list pos:start="157:18" pos:end="157:62">(<argument pos:start="157:19" pos:end="157:20"><expr pos:start="157:19" pos:end="157:20"><name pos:start="157:19" pos:end="157:20">pb</name></expr></argument>, <argument pos:start="157:23" pos:end="157:61"><expr pos:start="157:23" pos:end="157:61"><name pos:start="157:23" pos:end="157:37"><name pos:start="157:23" pos:end="157:34">sgpd_entries</name><index pos:start="157:35" pos:end="157:37">[<expr pos:start="157:36" pos:end="157:36"><name pos:start="157:36" pos:end="157:36">i</name></expr>]</index></name><operator pos:start="157:38" pos:end="157:38">.</operator><name pos:start="157:39" pos:end="157:61">group_description_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="157:65" pos:end="157:93">/* group_description_index */</comment>

    </block_content>}</block></for>



    <expr_stmt pos:start="163:5" pos:end="163:26"><expr pos:start="163:5" pos:end="163:25"><call pos:start="163:5" pos:end="163:25"><name pos:start="163:5" pos:end="163:11">av_free</name><argument_list pos:start="163:12" pos:end="163:25">(<argument pos:start="163:13" pos:end="163:24"><expr pos:start="163:13" pos:end="163:24"><name pos:start="163:13" pos:end="163:24">sgpd_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="165:5" pos:end="165:13">return <expr pos:start="165:12" pos:end="165:12"><literal type="number" pos:start="165:12" pos:end="165:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
