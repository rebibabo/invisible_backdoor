<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25215.c" pos:tabs="8"><function pos:start="1:1" pos:end="199:1"><type pos:start="1:1" pos:end="1:34"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:34">QEMU_WARN_UNUSED_RESULT</name></type> <name pos:start="1:36" pos:end="1:50">update_refcount</name><parameter_list pos:start="1:51" pos:end="3:47">(<parameter pos:start="1:52" pos:end="1:71"><decl pos:start="1:52" pos:end="1:71"><type pos:start="1:52" pos:end="1:71"><name pos:start="1:52" pos:end="1:67">BlockDriverState</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:71">bs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:18"><decl pos:start="3:5" pos:end="3:18"><type pos:start="3:5" pos:end="3:18"><name pos:start="3:5" pos:end="3:11">int64_t</name></type> <name pos:start="3:13" pos:end="3:18">offset</name></decl></parameter>, <parameter pos:start="3:21" pos:end="3:34"><decl pos:start="3:21" pos:end="3:34"><type pos:start="3:21" pos:end="3:34"><name pos:start="3:21" pos:end="3:27">int64_t</name></type> <name pos:start="3:29" pos:end="3:34">length</name></decl></parameter>, <parameter pos:start="3:37" pos:end="3:46"><decl pos:start="3:37" pos:end="3:46"><type pos:start="3:37" pos:end="3:46"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:46">addend</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="199:1">{<block_content pos:start="7:5" pos:end="197:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:17">start</name></decl>, <decl pos:start="9:20" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:11"/><name pos:start="9:20" pos:end="9:23">last</name></decl>, <decl pos:start="9:26" pos:end="9:39"><type ref="prev" pos:start="9:5" pos:end="9:11"/><name pos:start="9:26" pos:end="9:39">cluster_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:37"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:33">refcount_block_offset</name> <init pos:start="11:35" pos:end="11:37">= <expr pos:start="11:37" pos:end="11:37"><literal type="number" pos:start="11:37" pos:end="11:37">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:23">table_index</name> <init pos:start="13:25" pos:end="13:28">= <expr pos:start="13:27" pos:end="13:28"><operator pos:start="13:27" pos:end="13:27">-</operator><literal type="number" pos:start="13:28" pos:end="13:28">1</literal></expr></init></decl>, <decl pos:start="13:31" pos:end="13:45"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:31" pos:end="13:45">old_table_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:42"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">first_index</name> <init pos:start="15:21" pos:end="15:24">= <expr pos:start="15:23" pos:end="15:24"><operator pos:start="15:23" pos:end="15:23">-</operator><literal type="number" pos:start="15:24" pos:end="15:24">1</literal></expr></init></decl>, <decl pos:start="15:27" pos:end="15:41"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:27" pos:end="15:36">last_index</name> <init pos:start="15:38" pos:end="15:41">= <expr pos:start="15:40" pos:end="15:41"><operator pos:start="15:40" pos:end="15:40">-</operator><literal type="number" pos:start="15:41" pos:end="15:41">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="22:0"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="21:1" pos:end="21:19">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:19">DEBUG_ALLOC2</name></cpp:ifdef>

    <expr_stmt pos:start="23:5" pos:end="28:0"><expr pos:start="23:5" pos:end="25:34"><call pos:start="23:5" pos:end="25:34"><name pos:start="23:5" pos:end="23:10">printf</name><argument_list pos:start="23:11" pos:end="25:34">(<argument pos:start="23:12" pos:end="23:77"><expr pos:start="23:12" pos:end="23:77"><literal type="string" pos:start="23:12" pos:end="23:38">"update_refcount: offset=%"</literal> <name pos:start="23:40" pos:end="23:45">PRId64</name> <literal type="string" pos:start="23:47" pos:end="23:55">" size=%"</literal> <name pos:start="23:57" pos:end="23:62">PRId64</name> <literal type="string" pos:start="23:64" pos:end="23:77">" addend=%d\n"</literal></expr></argument>,

           <argument pos:start="25:12" pos:end="25:17"><expr pos:start="25:12" pos:end="25:17"><name pos:start="25:12" pos:end="25:17">offset</name></expr></argument>, <argument pos:start="25:20" pos:end="25:25"><expr pos:start="25:20" pos:end="25:25"><name pos:start="25:20" pos:end="25:25">length</name></expr></argument>, <argument pos:start="25:28" pos:end="25:33"><expr pos:start="25:28" pos:end="25:33"><name pos:start="25:28" pos:end="25:33">addend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:19">(<expr pos:start="29:9" pos:end="29:18"><name pos:start="29:9" pos:end="29:14">length</name> <operator pos:start="29:16" pos:end="29:16">&lt;</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>)</condition> <block pos:start="29:21" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:23">

        <return pos:start="31:9" pos:end="31:23">return <expr pos:start="31:16" pos:end="31:22"><operator pos:start="31:16" pos:end="31:16">-</operator><name pos:start="31:17" pos:end="31:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="33:7" pos:end="37:5">else if <condition pos:start="33:15" pos:end="33:27">(<expr pos:start="33:16" pos:end="33:26"><name pos:start="33:16" pos:end="33:21">length</name> <operator pos:start="33:23" pos:end="33:24">==</operator> <literal type="number" pos:start="33:26" pos:end="33:26">0</literal></expr>)</condition> <block pos:start="33:29" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:17">

        <return pos:start="35:9" pos:end="35:17">return <expr pos:start="35:16" pos:end="35:16"><literal type="number" pos:start="35:16" pos:end="35:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:44"><expr pos:start="41:5" pos:end="41:43"><name pos:start="41:5" pos:end="41:9">start</name> <operator pos:start="41:11" pos:end="41:11">=</operator> <name pos:start="41:13" pos:end="41:18">offset</name> <operator pos:start="41:20" pos:end="41:20">&amp;</operator> <operator pos:start="41:22" pos:end="41:22">~</operator><operator pos:start="41:23" pos:end="41:23">(</operator><name pos:start="41:24" pos:end="41:38"><name pos:start="41:24" pos:end="41:24">s</name><operator pos:start="41:25" pos:end="41:26">-&gt;</operator><name pos:start="41:27" pos:end="41:38">cluster_size</name></name> <operator pos:start="41:40" pos:end="41:40">-</operator> <literal type="number" pos:start="41:42" pos:end="41:42">1</literal><operator pos:start="41:43" pos:end="41:43">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:58"><expr pos:start="43:5" pos:end="43:57"><name pos:start="43:5" pos:end="43:8">last</name> <operator pos:start="43:10" pos:end="43:10">=</operator> <operator pos:start="43:12" pos:end="43:12">(</operator><name pos:start="43:13" pos:end="43:18">offset</name> <operator pos:start="43:20" pos:end="43:20">+</operator> <name pos:start="43:22" pos:end="43:27">length</name> <operator pos:start="43:29" pos:end="43:29">-</operator> <literal type="number" pos:start="43:31" pos:end="43:31">1</literal><operator pos:start="43:32" pos:end="43:32">)</operator> <operator pos:start="43:34" pos:end="43:34">&amp;</operator> <operator pos:start="43:36" pos:end="43:36">~</operator><operator pos:start="43:37" pos:end="43:37">(</operator><name pos:start="43:38" pos:end="43:52"><name pos:start="43:38" pos:end="43:38">s</name><operator pos:start="43:39" pos:end="43:40">-&gt;</operator><name pos:start="43:41" pos:end="43:52">cluster_size</name></name> <operator pos:start="43:54" pos:end="43:54">-</operator> <literal type="number" pos:start="43:56" pos:end="43:56">1</literal><operator pos:start="43:57" pos:end="43:57">)</operator></expr>;</expr_stmt>

    <for pos:start="45:5" pos:end="145:5">for<control pos:start="45:8" pos:end="47:42">(<init pos:start="45:9" pos:end="45:31"><expr pos:start="45:9" pos:end="45:30"><name pos:start="45:9" pos:end="45:22">cluster_offset</name> <operator pos:start="45:24" pos:end="45:24">=</operator> <name pos:start="45:26" pos:end="45:30">start</name></expr>;</init> <condition pos:start="45:33" pos:end="45:55"><expr pos:start="45:33" pos:end="45:54"><name pos:start="45:33" pos:end="45:46">cluster_offset</name> <operator pos:start="45:48" pos:end="45:49">&lt;=</operator> <name pos:start="45:51" pos:end="45:54">last</name></expr>;</condition>

        <incr pos:start="47:9" pos:end="47:41"><expr pos:start="47:9" pos:end="47:41"><name pos:start="47:9" pos:end="47:22">cluster_offset</name> <operator pos:start="47:24" pos:end="47:25">+=</operator> <name pos:start="47:27" pos:end="47:41"><name pos:start="47:27" pos:end="47:27">s</name><operator pos:start="47:28" pos:end="47:29">-&gt;</operator><name pos:start="47:30" pos:end="47:41">cluster_size</name></name></expr></incr>)</control>

    <block pos:start="49:5" pos:end="145:5">{<block_content pos:start="51:9" pos:end="143:69">

        <decl_stmt pos:start="51:9" pos:end="51:34"><decl pos:start="51:9" pos:end="51:23"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:23">block_index</name></decl>, <decl pos:start="51:26" pos:end="51:33"><type ref="prev" pos:start="51:9" pos:end="51:11"/><name pos:start="51:26" pos:end="51:33">refcount</name></decl>;</decl_stmt>

        <decl_stmt pos:start="53:9" pos:end="53:66"><decl pos:start="53:9" pos:end="53:65"><type pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:15">int64_t</name></type> <name pos:start="53:17" pos:end="53:29">cluster_index</name> <init pos:start="53:31" pos:end="53:65">= <expr pos:start="53:33" pos:end="53:65"><name pos:start="53:33" pos:end="53:46">cluster_offset</name> <operator pos:start="53:48" pos:end="53:49">&gt;&gt;</operator> <name pos:start="53:51" pos:end="53:65"><name pos:start="53:51" pos:end="53:51">s</name><operator pos:start="53:52" pos:end="53:53">-&gt;</operator><name pos:start="53:54" pos:end="53:65">cluster_bits</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:26"><decl pos:start="55:9" pos:end="55:25"><type pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:15">int64_t</name></type> <name pos:start="55:17" pos:end="55:25">new_block</name></decl>;</decl_stmt>



        <comment type="block" pos:start="59:9" pos:end="59:72">/* Only write refcount block to disk when we are done with it */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:38"><expr pos:start="61:9" pos:end="61:37"><name pos:start="61:9" pos:end="61:23">old_table_index</name> <operator pos:start="61:25" pos:end="61:25">=</operator> <name pos:start="61:27" pos:end="61:37">table_index</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:74"><expr pos:start="63:9" pos:end="63:73"><name pos:start="63:9" pos:end="63:19">table_index</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <name pos:start="63:23" pos:end="63:35">cluster_index</name> <operator pos:start="63:37" pos:end="63:38">&gt;&gt;</operator> <operator pos:start="63:40" pos:end="63:40">(</operator><name pos:start="63:41" pos:end="63:55"><name pos:start="63:41" pos:end="63:41">s</name><operator pos:start="63:42" pos:end="63:43">-&gt;</operator><name pos:start="63:44" pos:end="63:55">cluster_bits</name></name> <operator pos:start="63:57" pos:end="63:57">-</operator> <name pos:start="63:59" pos:end="63:72">REFCOUNT_SHIFT</name><operator pos:start="63:73" pos:end="63:73">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="85:9"><if pos:start="65:9" pos:end="85:9">if <condition pos:start="65:12" pos:end="65:71">(<expr pos:start="65:13" pos:end="65:70"><operator pos:start="65:13" pos:end="65:13">(</operator><name pos:start="65:14" pos:end="65:28">old_table_index</name> <operator pos:start="65:30" pos:end="65:31">&gt;=</operator> <literal type="number" pos:start="65:33" pos:end="65:33">0</literal><operator pos:start="65:34" pos:end="65:34">)</operator> <operator pos:start="65:36" pos:end="65:37">&amp;&amp;</operator> <operator pos:start="65:39" pos:end="65:39">(</operator><name pos:start="65:40" pos:end="65:50">table_index</name> <operator pos:start="65:52" pos:end="65:53">!=</operator> <name pos:start="65:55" pos:end="65:69">old_table_index</name><operator pos:start="65:70" pos:end="65:70">)</operator></expr>)</condition> <block pos:start="65:73" pos:end="85:9">{<block_content pos:start="69:13" pos:end="83:28">



            <expr_stmt pos:start="69:13" pos:end="71:41"><expr pos:start="69:13" pos:end="71:40"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <call pos:start="69:19" pos:end="71:40"><name pos:start="69:19" pos:end="69:46">write_refcount_block_entries</name><argument_list pos:start="69:47" pos:end="71:40">(<argument pos:start="69:48" pos:end="69:49"><expr pos:start="69:48" pos:end="69:49"><name pos:start="69:48" pos:end="69:49">bs</name></expr></argument>, <argument pos:start="69:52" pos:end="69:72"><expr pos:start="69:52" pos:end="69:72"><name pos:start="69:52" pos:end="69:72">refcount_block_offset</name></expr></argument>,

                <argument pos:start="71:17" pos:end="71:27"><expr pos:start="71:17" pos:end="71:27"><name pos:start="71:17" pos:end="71:27">first_index</name></expr></argument>, <argument pos:start="71:30" pos:end="71:39"><expr pos:start="71:30" pos:end="71:39"><name pos:start="71:30" pos:end="71:39">last_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="77:13"><if pos:start="73:13" pos:end="77:13">if <condition pos:start="73:16" pos:end="73:24">(<expr pos:start="73:17" pos:end="73:23"><name pos:start="73:17" pos:end="73:19">ret</name> <operator pos:start="73:21" pos:end="73:21">&lt;</operator> <literal type="number" pos:start="73:23" pos:end="73:23">0</literal></expr>)</condition> <block pos:start="73:26" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:27">

                <return pos:start="75:17" pos:end="75:27">return <expr pos:start="75:24" pos:end="75:26"><name pos:start="75:24" pos:end="75:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="81:13" pos:end="81:29"><expr pos:start="81:13" pos:end="81:28"><name pos:start="81:13" pos:end="81:23">first_index</name> <operator pos:start="81:25" pos:end="81:25">=</operator> <operator pos:start="81:27" pos:end="81:27">-</operator><literal type="number" pos:start="81:28" pos:end="81:28">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:28"><expr pos:start="83:13" pos:end="83:27"><name pos:start="83:13" pos:end="83:22">last_index</name> <operator pos:start="83:24" pos:end="83:24">=</operator> <operator pos:start="83:26" pos:end="83:26">-</operator><literal type="number" pos:start="83:27" pos:end="83:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="89:9" pos:end="89:63">/* Load the refcount block and allocate it if needed */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:60"><expr pos:start="91:9" pos:end="91:59"><name pos:start="91:9" pos:end="91:17">new_block</name> <operator pos:start="91:19" pos:end="91:19">=</operator> <call pos:start="91:21" pos:end="91:59"><name pos:start="91:21" pos:end="91:40">alloc_refcount_block</name><argument_list pos:start="91:41" pos:end="91:59">(<argument pos:start="91:42" pos:end="91:43"><expr pos:start="91:42" pos:end="91:43"><name pos:start="91:42" pos:end="91:43">bs</name></expr></argument>, <argument pos:start="91:46" pos:end="91:58"><expr pos:start="91:46" pos:end="91:58"><name pos:start="91:46" pos:end="91:58">cluster_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="99:9"><if pos:start="93:9" pos:end="99:9">if <condition pos:start="93:12" pos:end="93:26">(<expr pos:start="93:13" pos:end="93:25"><name pos:start="93:13" pos:end="93:21">new_block</name> <operator pos:start="93:23" pos:end="93:23">&lt;</operator> <literal type="number" pos:start="93:25" pos:end="93:25">0</literal></expr>)</condition> <block pos:start="93:28" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:22">

            <expr_stmt pos:start="95:13" pos:end="95:28"><expr pos:start="95:13" pos:end="95:27"><name pos:start="95:13" pos:end="95:15">ret</name> <operator pos:start="95:17" pos:end="95:17">=</operator> <name pos:start="95:19" pos:end="95:27">new_block</name></expr>;</expr_stmt>

            <goto pos:start="97:13" pos:end="97:22">goto <name pos:start="97:18" pos:end="97:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:42"><expr pos:start="101:9" pos:end="101:41"><name pos:start="101:9" pos:end="101:29">refcount_block_offset</name> <operator pos:start="101:31" pos:end="101:31">=</operator> <name pos:start="101:33" pos:end="101:41">new_block</name></expr>;</expr_stmt>



        <comment type="block" pos:start="105:9" pos:end="105:49">/* we can update the count and save it */</comment>

        <expr_stmt pos:start="107:9" pos:end="109:60"><expr pos:start="107:9" pos:end="109:59"><name pos:start="107:9" pos:end="107:19">block_index</name> <operator pos:start="107:21" pos:end="107:21">=</operator> <name pos:start="107:23" pos:end="107:35">cluster_index</name> <operator pos:start="107:37" pos:end="107:37">&amp;</operator>

            <operator pos:start="109:13" pos:end="109:13">(</operator><operator pos:start="109:14" pos:end="109:14">(</operator><literal type="number" pos:start="109:15" pos:end="109:15">1</literal> <operator pos:start="109:17" pos:end="109:18">&lt;&lt;</operator> <operator pos:start="109:20" pos:end="109:20">(</operator><name pos:start="109:21" pos:end="109:35"><name pos:start="109:21" pos:end="109:21">s</name><operator pos:start="109:22" pos:end="109:23">-&gt;</operator><name pos:start="109:24" pos:end="109:35">cluster_bits</name></name> <operator pos:start="109:37" pos:end="109:37">-</operator> <name pos:start="109:39" pos:end="109:52">REFCOUNT_SHIFT</name><operator pos:start="109:53" pos:end="109:53">)</operator><operator pos:start="109:54" pos:end="109:54">)</operator> <operator pos:start="109:56" pos:end="109:56">-</operator> <literal type="number" pos:start="109:58" pos:end="109:58">1</literal><operator pos:start="109:59" pos:end="109:59">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="115:9"><if pos:start="111:9" pos:end="115:9">if <condition pos:start="111:12" pos:end="111:59">(<expr pos:start="111:13" pos:end="111:58"><name pos:start="111:13" pos:end="111:23">first_index</name> <operator pos:start="111:25" pos:end="111:26">==</operator> <operator pos:start="111:28" pos:end="111:28">-</operator><literal type="number" pos:start="111:29" pos:end="111:29">1</literal> <operator pos:start="111:31" pos:end="111:32">||</operator> <name pos:start="111:34" pos:end="111:44">block_index</name> <operator pos:start="111:46" pos:end="111:46">&lt;</operator> <name pos:start="111:48" pos:end="111:58">first_index</name></expr>)</condition> <block pos:start="111:61" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:38">

            <expr_stmt pos:start="113:13" pos:end="113:38"><expr pos:start="113:13" pos:end="113:37"><name pos:start="113:13" pos:end="113:23">first_index</name> <operator pos:start="113:25" pos:end="113:25">=</operator> <name pos:start="113:27" pos:end="113:37">block_index</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="117:9" pos:end="121:9"><if pos:start="117:9" pos:end="121:9">if <condition pos:start="117:12" pos:end="117:37">(<expr pos:start="117:13" pos:end="117:36"><name pos:start="117:13" pos:end="117:23">block_index</name> <operator pos:start="117:25" pos:end="117:25">&gt;</operator> <name pos:start="117:27" pos:end="117:36">last_index</name></expr>)</condition> <block pos:start="117:39" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:37">

            <expr_stmt pos:start="119:13" pos:end="119:37"><expr pos:start="119:13" pos:end="119:36"><name pos:start="119:13" pos:end="119:22">last_index</name> <operator pos:start="119:24" pos:end="119:24">=</operator> <name pos:start="119:26" pos:end="119:36">block_index</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:69"><expr pos:start="125:9" pos:end="125:68"><name pos:start="125:9" pos:end="125:16">refcount</name> <operator pos:start="125:18" pos:end="125:18">=</operator> <call pos:start="125:20" pos:end="125:68"><name pos:start="125:20" pos:end="125:30">be16_to_cpu</name><argument_list pos:start="125:31" pos:end="125:68">(<argument pos:start="125:32" pos:end="125:67"><expr pos:start="125:32" pos:end="125:67"><name pos:start="125:32" pos:end="125:67"><name pos:start="125:32" pos:end="125:32">s</name><operator pos:start="125:33" pos:end="125:34">-&gt;</operator><name pos:start="125:35" pos:end="125:54">refcount_block_cache</name><index pos:start="125:55" pos:end="125:67">[<expr pos:start="125:56" pos:end="125:66"><name pos:start="125:56" pos:end="125:66">block_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:27"><expr pos:start="127:9" pos:end="127:26"><name pos:start="127:9" pos:end="127:16">refcount</name> <operator pos:start="127:18" pos:end="127:19">+=</operator> <name pos:start="127:21" pos:end="127:26">addend</name></expr>;</expr_stmt>

        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:46">(<expr pos:start="129:13" pos:end="129:45"><name pos:start="129:13" pos:end="129:38"><name pos:start="129:13" pos:end="129:20">refcount</name> <argument_list type="generic" pos:start="129:22" pos:end="129:38">&lt; <argument pos:start="129:24" pos:end="129:36"><expr pos:start="129:24" pos:end="129:36"><literal type="number" pos:start="129:24" pos:end="129:24">0</literal> <operator pos:start="129:26" pos:end="129:27">||</operator> <name pos:start="129:29" pos:end="129:36">refcount</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="129:40" pos:end="129:45">0xffff</literal></expr>)</condition> <block pos:start="129:48" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:22">

            <expr_stmt pos:start="131:13" pos:end="131:26"><expr pos:start="131:13" pos:end="131:25"><name pos:start="131:13" pos:end="131:15">ret</name> <operator pos:start="131:17" pos:end="131:17">=</operator> <operator pos:start="131:19" pos:end="131:19">-</operator><name pos:start="131:20" pos:end="131:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="133:13" pos:end="133:22">goto <name pos:start="133:18" pos:end="133:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="137:9" pos:end="141:9"><if pos:start="137:9" pos:end="141:9">if <condition pos:start="137:12" pos:end="137:67">(<expr pos:start="137:13" pos:end="137:66"><name pos:start="137:13" pos:end="137:20">refcount</name> <operator pos:start="137:22" pos:end="137:23">==</operator> <literal type="number" pos:start="137:25" pos:end="137:25">0</literal> <operator pos:start="137:27" pos:end="137:28">&amp;&amp;</operator> <name pos:start="137:30" pos:end="137:42">cluster_index</name> <operator pos:start="137:44" pos:end="137:44">&lt;</operator> <name pos:start="137:46" pos:end="137:66"><name pos:start="137:46" pos:end="137:46">s</name><operator pos:start="137:47" pos:end="137:48">-&gt;</operator><name pos:start="137:49" pos:end="137:66">free_cluster_index</name></name></expr>)</condition> <block pos:start="137:69" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:50">

            <expr_stmt pos:start="139:13" pos:end="139:50"><expr pos:start="139:13" pos:end="139:49"><name pos:start="139:13" pos:end="139:33"><name pos:start="139:13" pos:end="139:13">s</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:33">free_cluster_index</name></name> <operator pos:start="139:35" pos:end="139:35">=</operator> <name pos:start="139:37" pos:end="139:49">cluster_index</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:69"><expr pos:start="143:9" pos:end="143:68"><name pos:start="143:9" pos:end="143:44"><name pos:start="143:9" pos:end="143:9">s</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:31">refcount_block_cache</name><index pos:start="143:32" pos:end="143:44">[<expr pos:start="143:33" pos:end="143:43"><name pos:start="143:33" pos:end="143:43">block_index</name></expr>]</index></name> <operator pos:start="143:46" pos:end="143:46">=</operator> <call pos:start="143:48" pos:end="143:68"><name pos:start="143:48" pos:end="143:58">cpu_to_be16</name><argument_list pos:start="143:59" pos:end="143:68">(<argument pos:start="143:60" pos:end="143:67"><expr pos:start="143:60" pos:end="143:67"><name pos:start="143:60" pos:end="143:67">refcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="149:5" pos:end="149:12"><expr pos:start="149:5" pos:end="149:11"><name pos:start="149:5" pos:end="149:7">ret</name> <operator pos:start="149:9" pos:end="149:9">=</operator> <literal type="number" pos:start="149:11" pos:end="149:11">0</literal></expr>;</expr_stmt>

<label pos:start="151:1" pos:end="151:5"><name pos:start="151:1" pos:end="151:4">fail</name>:</label>



    <comment type="block" pos:start="155:5" pos:end="155:42">/* Write last changed block to disk */</comment>

    <if_stmt pos:start="157:5" pos:end="171:5"><if pos:start="157:5" pos:end="171:5">if <condition pos:start="157:8" pos:end="157:35">(<expr pos:start="157:9" pos:end="157:34"><name pos:start="157:9" pos:end="157:29">refcount_block_offset</name> <operator pos:start="157:31" pos:end="157:32">!=</operator> <literal type="number" pos:start="157:34" pos:end="157:34">0</literal></expr>)</condition> <block pos:start="157:37" pos:end="171:5">{<block_content pos:start="159:9" pos:end="169:9">

        <decl_stmt pos:start="159:9" pos:end="159:17"><decl pos:start="159:9" pos:end="159:16"><type pos:start="159:9" pos:end="159:11"><name pos:start="159:9" pos:end="159:11">int</name></type> <name pos:start="159:13" pos:end="159:16">wret</name></decl>;</decl_stmt>

        <expr_stmt pos:start="161:9" pos:end="163:37"><expr pos:start="161:9" pos:end="163:36"><name pos:start="161:9" pos:end="161:12">wret</name> <operator pos:start="161:14" pos:end="161:14">=</operator> <call pos:start="161:16" pos:end="163:36"><name pos:start="161:16" pos:end="161:43">write_refcount_block_entries</name><argument_list pos:start="161:44" pos:end="163:36">(<argument pos:start="161:45" pos:end="161:46"><expr pos:start="161:45" pos:end="161:46"><name pos:start="161:45" pos:end="161:46">bs</name></expr></argument>, <argument pos:start="161:49" pos:end="161:69"><expr pos:start="161:49" pos:end="161:69"><name pos:start="161:49" pos:end="161:69">refcount_block_offset</name></expr></argument>,

            <argument pos:start="163:13" pos:end="163:23"><expr pos:start="163:13" pos:end="163:23"><name pos:start="163:13" pos:end="163:23">first_index</name></expr></argument>, <argument pos:start="163:26" pos:end="163:35"><expr pos:start="163:26" pos:end="163:35"><name pos:start="163:26" pos:end="163:35">last_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="165:9" pos:end="169:9"><if pos:start="165:9" pos:end="169:9">if <condition pos:start="165:12" pos:end="165:21">(<expr pos:start="165:13" pos:end="165:20"><name pos:start="165:13" pos:end="165:16">wret</name> <operator pos:start="165:18" pos:end="165:18">&lt;</operator> <literal type="number" pos:start="165:20" pos:end="165:20">0</literal></expr>)</condition> <block pos:start="165:23" pos:end="169:9">{<block_content pos:start="167:13" pos:end="167:40">

            <return pos:start="167:13" pos:end="167:40">return <expr pos:start="167:20" pos:end="167:39"><ternary pos:start="167:20" pos:end="167:39"><condition pos:start="167:20" pos:end="167:28"><expr pos:start="167:20" pos:end="167:26"><name pos:start="167:20" pos:end="167:22">ret</name> <operator pos:start="167:24" pos:end="167:24">&lt;</operator> <literal type="number" pos:start="167:26" pos:end="167:26">0</literal></expr> ?</condition><then pos:start="167:30" pos:end="167:32"> <expr pos:start="167:30" pos:end="167:32"><name pos:start="167:30" pos:end="167:32">ret</name></expr> </then><else pos:start="167:34" pos:end="167:39">: <expr pos:start="167:36" pos:end="167:39"><name pos:start="167:36" pos:end="167:39">wret</name></expr></else></ternary></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="175:5" pos:end="181:7">/*

     * Try do undo any updates if an error is returned (This may succeed in

     * some cases like ENOSPC for allocating a new refcount block)

     */</comment>

    <if_stmt pos:start="183:5" pos:end="189:5"><if pos:start="183:5" pos:end="189:5">if <condition pos:start="183:8" pos:end="183:16">(<expr pos:start="183:9" pos:end="183:15"><name pos:start="183:9" pos:end="183:11">ret</name> <operator pos:start="183:13" pos:end="183:13">&lt;</operator> <literal type="number" pos:start="183:15" pos:end="183:15">0</literal></expr>)</condition> <block pos:start="183:18" pos:end="189:5">{<block_content pos:start="185:9" pos:end="187:78">

        <decl_stmt pos:start="185:9" pos:end="185:18"><decl pos:start="185:9" pos:end="185:17"><type pos:start="185:9" pos:end="185:11"><name pos:start="185:9" pos:end="185:11">int</name></type> <name pos:start="185:13" pos:end="185:17">dummy</name></decl>;</decl_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:78"><expr pos:start="187:9" pos:end="187:77"><name pos:start="187:9" pos:end="187:13">dummy</name> <operator pos:start="187:15" pos:end="187:15">=</operator> <call pos:start="187:17" pos:end="187:77"><name pos:start="187:17" pos:end="187:31">update_refcount</name><argument_list pos:start="187:32" pos:end="187:77">(<argument pos:start="187:33" pos:end="187:34"><expr pos:start="187:33" pos:end="187:34"><name pos:start="187:33" pos:end="187:34">bs</name></expr></argument>, <argument pos:start="187:37" pos:end="187:42"><expr pos:start="187:37" pos:end="187:42"><name pos:start="187:37" pos:end="187:42">offset</name></expr></argument>, <argument pos:start="187:45" pos:end="187:67"><expr pos:start="187:45" pos:end="187:67"><name pos:start="187:45" pos:end="187:58">cluster_offset</name> <operator pos:start="187:60" pos:end="187:60">-</operator> <name pos:start="187:62" pos:end="187:67">offset</name></expr></argument>, <argument pos:start="187:70" pos:end="187:76"><expr pos:start="187:70" pos:end="187:76"><operator pos:start="187:70" pos:end="187:70">-</operator><name pos:start="187:71" pos:end="187:76">addend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:25"><expr pos:start="193:5" pos:end="193:24"><call pos:start="193:5" pos:end="193:24"><name pos:start="193:5" pos:end="193:14">bdrv_flush</name><argument_list pos:start="193:15" pos:end="193:24">(<argument pos:start="193:16" pos:end="193:23"><expr pos:start="193:16" pos:end="193:23"><name pos:start="193:16" pos:end="193:23"><name pos:start="193:16" pos:end="193:17">bs</name><operator pos:start="193:18" pos:end="193:19">-&gt;</operator><name pos:start="193:20" pos:end="193:23">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="197:5" pos:end="197:15">return <expr pos:start="197:12" pos:end="197:14"><name pos:start="197:12" pos:end="197:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
