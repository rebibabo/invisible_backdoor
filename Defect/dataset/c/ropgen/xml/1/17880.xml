<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17880.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:62"><name pos:start="1:1" pos:end="1:34">host_memory_backend_get_host_nodes</name><argument_list pos:start="1:35" pos:end="3:62">(<argument pos:start="1:36" pos:end="1:46">Object *obj</argument>, <argument pos:start="1:49" pos:end="1:58">Visitor *v</argument>, <argument pos:start="1:61" pos:end="1:76">const char *name</argument>,

                                   <argument pos:start="3:36" pos:end="3:47">void *opaque</argument>, <argument pos:start="3:50" pos:end="3:61">Error **errp</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="55:1">{<block_content pos:start="7:5" pos:end="53:54">

    <decl_stmt pos:start="7:5" pos:end="7:53"><decl pos:start="7:5" pos:end="7:52"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">HostMemoryBackend</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:30">backend</name> <init pos:start="7:32" pos:end="7:52">= <expr pos:start="7:34" pos:end="7:52"><call pos:start="7:34" pos:end="7:52"><name pos:start="7:34" pos:end="7:47">MEMORY_BACKEND</name><argument_list pos:start="7:48" pos:end="7:52">(<argument pos:start="7:49" pos:end="7:51"><expr pos:start="7:49" pos:end="7:51"><name pos:start="7:49" pos:end="7:51">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">uint16List</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:26">host_nodes</name> <init pos:start="9:28" pos:end="9:33">= <expr pos:start="9:30" pos:end="9:33"><name pos:start="9:30" pos:end="9:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:14">uint16List</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier><modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:21">node</name> <init pos:start="11:23" pos:end="11:35">= <expr pos:start="11:25" pos:end="11:35"><operator pos:start="11:25" pos:end="11:25">&amp;</operator><name pos:start="11:26" pos:end="11:35">host_nodes</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">long</name></type> <name pos:start="13:19" pos:end="13:23">value</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:59"><expr pos:start="17:5" pos:end="17:58"><name pos:start="17:5" pos:end="17:9">value</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <call pos:start="17:13" pos:end="17:58"><name pos:start="17:13" pos:end="17:26">find_first_bit</name><argument_list pos:start="17:27" pos:end="17:58">(<argument pos:start="17:28" pos:end="17:46"><expr pos:start="17:28" pos:end="17:46"><name pos:start="17:28" pos:end="17:46"><name pos:start="17:28" pos:end="17:34">backend</name><operator pos:start="17:35" pos:end="17:36">-&gt;</operator><name pos:start="17:37" pos:end="17:46">host_nodes</name></name></expr></argument>, <argument pos:start="17:49" pos:end="17:57"><expr pos:start="17:49" pos:end="17:57"><name pos:start="17:49" pos:end="17:57">MAX_NODES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:48"><expr pos:start="21:5" pos:end="21:47"><name pos:start="21:5" pos:end="21:8">node</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <call pos:start="21:12" pos:end="21:47"><name pos:start="21:12" pos:end="21:34">host_memory_append_node</name><argument_list pos:start="21:35" pos:end="21:47">(<argument pos:start="21:36" pos:end="21:39"><expr pos:start="21:36" pos:end="21:39"><name pos:start="21:36" pos:end="21:39">node</name></expr></argument>, <argument pos:start="21:42" pos:end="21:46"><expr pos:start="21:42" pos:end="21:46"><name pos:start="21:42" pos:end="21:46">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:27">(<expr pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:13">value</name> <operator pos:start="25:15" pos:end="25:16">==</operator> <name pos:start="25:18" pos:end="25:26">MAX_NODES</name></expr>)</condition> <block pos:start="25:29" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:17">

        <goto pos:start="27:9" pos:end="27:17">goto <name pos:start="27:14" pos:end="27:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <do pos:start="33:5" pos:end="47:19">do <block pos:start="33:8" pos:end="47:5">{<block_content pos:start="35:9" pos:end="45:52">

        <expr_stmt pos:start="35:9" pos:end="35:73"><expr pos:start="35:9" pos:end="35:72"><name pos:start="35:9" pos:end="35:13">value</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <call pos:start="35:17" pos:end="35:72"><name pos:start="35:17" pos:end="35:29">find_next_bit</name><argument_list pos:start="35:30" pos:end="35:72">(<argument pos:start="35:31" pos:end="35:49"><expr pos:start="35:31" pos:end="35:49"><name pos:start="35:31" pos:end="35:49"><name pos:start="35:31" pos:end="35:37">backend</name><operator pos:start="35:38" pos:end="35:39">-&gt;</operator><name pos:start="35:40" pos:end="35:49">host_nodes</name></name></expr></argument>, <argument pos:start="35:52" pos:end="35:60"><expr pos:start="35:52" pos:end="35:60"><name pos:start="35:52" pos:end="35:60">MAX_NODES</name></expr></argument>, <argument pos:start="35:63" pos:end="35:71"><expr pos:start="35:63" pos:end="35:71"><name pos:start="35:63" pos:end="35:67">value</name> <operator pos:start="35:69" pos:end="35:69">+</operator> <literal type="number" pos:start="35:71" pos:end="35:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:31">(<expr pos:start="37:13" pos:end="37:30"><name pos:start="37:13" pos:end="37:17">value</name> <operator pos:start="37:19" pos:end="37:20">==</operator> <name pos:start="37:22" pos:end="37:30">MAX_NODES</name></expr>)</condition> <block pos:start="37:33" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:18">

            <break pos:start="39:13" pos:end="39:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:52"><expr pos:start="45:9" pos:end="45:51"><name pos:start="45:9" pos:end="45:12">node</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:51"><name pos:start="45:16" pos:end="45:38">host_memory_append_node</name><argument_list pos:start="45:39" pos:end="45:51">(<argument pos:start="45:40" pos:end="45:43"><expr pos:start="45:40" pos:end="45:43"><name pos:start="45:40" pos:end="45:43">node</name></expr></argument>, <argument pos:start="45:46" pos:end="45:50"><expr pos:start="45:46" pos:end="45:50"><name pos:start="45:46" pos:end="45:50">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="47:13" pos:end="47:18">(<expr pos:start="47:14" pos:end="47:17"><name pos:start="47:14" pos:end="47:17">true</name></expr>)</condition>;</do>



<label pos:start="51:1" pos:end="51:4"><name pos:start="51:1" pos:end="51:3">out</name>:</label>

    <expr_stmt pos:start="53:5" pos:end="53:54"><expr pos:start="53:5" pos:end="53:53"><call pos:start="53:5" pos:end="53:53"><name pos:start="53:5" pos:end="53:25">visit_type_uint16List</name><argument_list pos:start="53:26" pos:end="53:53">(<argument pos:start="53:27" pos:end="53:27"><expr pos:start="53:27" pos:end="53:27"><name pos:start="53:27" pos:end="53:27">v</name></expr></argument>, <argument pos:start="53:30" pos:end="53:33"><expr pos:start="53:30" pos:end="53:33"><name pos:start="53:30" pos:end="53:33">name</name></expr></argument>, <argument pos:start="53:36" pos:end="53:46"><expr pos:start="53:36" pos:end="53:46"><operator pos:start="53:36" pos:end="53:36">&amp;</operator><name pos:start="53:37" pos:end="53:46">host_nodes</name></expr></argument>, <argument pos:start="53:49" pos:end="53:52"><expr pos:start="53:49" pos:end="53:52"><name pos:start="53:49" pos:end="53:52">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
