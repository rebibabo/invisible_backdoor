<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6952.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">ff_hevc_cu_qp_delta_abs</name><parameter_list pos:start="1:28" pos:end="1:43">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:39">HEVCContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:35">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:18">prefix_val</name> <init pos:start="5:20" pos:end="5:22">= <expr pos:start="5:22" pos:end="5:22"><literal type="number" pos:start="5:22" pos:end="5:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">suffix_val</name> <init pos:start="7:20" pos:end="7:22">= <expr pos:start="7:22" pos:end="7:22"><literal type="number" pos:start="7:22" pos:end="7:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">inc</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="13:5" pos:end="19:5">while <condition pos:start="13:11" pos:end="13:71">(<expr pos:start="13:12" pos:end="13:70"><name pos:start="13:12" pos:end="13:21">prefix_val</name> <operator pos:start="13:23" pos:end="13:23">&lt;</operator> <literal type="number" pos:start="13:25" pos:end="13:25">5</literal> <operator pos:start="13:27" pos:end="13:28">&amp;&amp;</operator> <call pos:start="13:30" pos:end="13:70"><name pos:start="13:30" pos:end="13:38">GET_CABAC</name><argument_list pos:start="13:39" pos:end="13:70">(<argument pos:start="13:40" pos:end="13:69"><expr pos:start="13:40" pos:end="13:69"><name pos:start="13:40" pos:end="13:63"><name pos:start="13:40" pos:end="13:50">elem_offset</name><index pos:start="13:51" pos:end="13:63">[<expr pos:start="13:52" pos:end="13:62"><name pos:start="13:52" pos:end="13:62">CU_QP_DELTA</name></expr>]</index></name> <operator pos:start="13:65" pos:end="13:65">+</operator> <name pos:start="13:67" pos:end="13:69">inc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:73" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:16">

        <expr_stmt pos:start="15:9" pos:end="15:21"><expr pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:18">prefix_val</name><operator pos:start="15:19" pos:end="15:20">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:16"><expr pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:11">inc</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <literal type="number" pos:start="17:15" pos:end="17:15">1</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="21:5" pos:end="43:5"><if pos:start="21:5" pos:end="43:5">if <condition pos:start="21:8" pos:end="21:24">(<expr pos:start="21:9" pos:end="21:23"><name pos:start="21:9" pos:end="21:18">prefix_val</name> <operator pos:start="21:20" pos:end="21:21">&gt;=</operator> <literal type="number" pos:start="21:23" pos:end="21:23">5</literal></expr>)</condition> <block pos:start="21:26" pos:end="43:5">{<block_content pos:start="23:9" pos:end="41:64">

        <decl_stmt pos:start="23:9" pos:end="23:18"><decl pos:start="23:9" pos:end="23:17"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:13">k</name> <init pos:start="23:15" pos:end="23:17">= <expr pos:start="23:17" pos:end="23:17"><literal type="number" pos:start="23:17" pos:end="23:17">0</literal></expr></init></decl>;</decl_stmt>

        <while pos:start="25:9" pos:end="31:9">while <condition pos:start="25:15" pos:end="25:69">(<expr pos:start="25:16" pos:end="25:68"><name pos:start="25:16" pos:end="25:16">k</name> <operator pos:start="25:18" pos:end="25:18">&lt;</operator> <name pos:start="25:20" pos:end="25:32">CABAC_MAX_BIN</name> <operator pos:start="25:34" pos:end="25:35">&amp;&amp;</operator> <call pos:start="25:37" pos:end="25:68"><name pos:start="25:37" pos:end="25:52">get_cabac_bypass</name><argument_list pos:start="25:53" pos:end="25:68">(<argument pos:start="25:54" pos:end="25:67"><expr pos:start="25:54" pos:end="25:67"><operator pos:start="25:54" pos:end="25:54">&amp;</operator><name pos:start="25:55" pos:end="25:67"><name pos:start="25:55" pos:end="25:55">s</name><operator pos:start="25:56" pos:end="25:57">-&gt;</operator><name pos:start="25:58" pos:end="25:63">HEVClc</name><operator pos:start="25:64" pos:end="25:65">-&gt;</operator><name pos:start="25:66" pos:end="25:67">cc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:71" pos:end="31:9">{<block_content pos:start="27:13" pos:end="29:16">

            <expr_stmt pos:start="27:13" pos:end="27:33"><expr pos:start="27:13" pos:end="27:32"><name pos:start="27:13" pos:end="27:22">suffix_val</name> <operator pos:start="27:24" pos:end="27:25">+=</operator> <literal type="number" pos:start="27:27" pos:end="27:27">1</literal> <operator pos:start="27:29" pos:end="27:30">&lt;&lt;</operator> <name pos:start="27:32" pos:end="27:32">k</name></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:16"><expr pos:start="29:13" pos:end="29:15"><name pos:start="29:13" pos:end="29:13">k</name><operator pos:start="29:14" pos:end="29:15">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <if_stmt pos:start="33:9" pos:end="35:70"><if pos:start="33:9" pos:end="35:70">if <condition pos:start="33:12" pos:end="33:31">(<expr pos:start="33:13" pos:end="33:30"><name pos:start="33:13" pos:end="33:13">k</name> <operator pos:start="33:15" pos:end="33:16">==</operator> <name pos:start="33:18" pos:end="33:30">CABAC_MAX_BIN</name></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:70"><block_content pos:start="35:13" pos:end="35:70">

            <expr_stmt pos:start="35:13" pos:end="35:70"><expr pos:start="35:13" pos:end="35:69"><call pos:start="35:13" pos:end="35:69"><name pos:start="35:13" pos:end="35:18">av_log</name><argument_list pos:start="35:19" pos:end="35:69">(<argument pos:start="35:20" pos:end="35:27"><expr pos:start="35:20" pos:end="35:27"><name pos:start="35:20" pos:end="35:27"><name pos:start="35:20" pos:end="35:20">s</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:27">avctx</name></name></expr></argument>, <argument pos:start="35:30" pos:end="35:41"><expr pos:start="35:30" pos:end="35:41"><name pos:start="35:30" pos:end="35:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:44" pos:end="35:65"><expr pos:start="35:44" pos:end="35:65"><literal type="string" pos:start="35:44" pos:end="35:65">"CABAC_MAX_BIN : %d\n"</literal></expr></argument>, <argument pos:start="35:68" pos:end="35:68"><expr pos:start="35:68" pos:end="35:68"><name pos:start="35:68" pos:end="35:68">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <while pos:start="39:9" pos:end="41:64">while <condition pos:start="39:15" pos:end="39:19">(<expr pos:start="39:16" pos:end="39:18"><name pos:start="39:16" pos:end="39:16">k</name><operator pos:start="39:17" pos:end="39:18">--</operator></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:64"><block_content pos:start="41:13" pos:end="41:64">

            <expr_stmt pos:start="41:13" pos:end="41:64"><expr pos:start="41:13" pos:end="41:63"><name pos:start="41:13" pos:end="41:22">suffix_val</name> <operator pos:start="41:24" pos:end="41:25">+=</operator> <call pos:start="41:27" pos:end="41:58"><name pos:start="41:27" pos:end="41:42">get_cabac_bypass</name><argument_list pos:start="41:43" pos:end="41:58">(<argument pos:start="41:44" pos:end="41:57"><expr pos:start="41:44" pos:end="41:57"><operator pos:start="41:44" pos:end="41:44">&amp;</operator><name pos:start="41:45" pos:end="41:57"><name pos:start="41:45" pos:end="41:45">s</name><operator pos:start="41:46" pos:end="41:47">-&gt;</operator><name pos:start="41:48" pos:end="41:53">HEVClc</name><operator pos:start="41:54" pos:end="41:55">-&gt;</operator><name pos:start="41:56" pos:end="41:57">cc</name></name></expr></argument>)</argument_list></call> <operator pos:start="41:60" pos:end="41:61">&lt;&lt;</operator> <name pos:start="41:63" pos:end="41:63">k</name></expr>;</expr_stmt></block_content></block></while>

    </block_content>}</block></if></if_stmt>

    <return pos:start="45:5" pos:end="45:35">return <expr pos:start="45:12" pos:end="45:34"><name pos:start="45:12" pos:end="45:21">prefix_val</name> <operator pos:start="45:23" pos:end="45:23">+</operator> <name pos:start="45:25" pos:end="45:34">suffix_val</name></expr>;</return>

</block_content>}</block></function>
</unit>
