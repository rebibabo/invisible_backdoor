<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10617.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">cavs_decode_frame</name><parameter_list pos:start="1:29" pos:end="3:45">(<parameter pos:start="1:30" pos:end="1:51"><decl pos:start="1:30" pos:end="1:51"><type pos:start="1:30" pos:end="1:51"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type> <name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>,<parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:78"><decl pos:start="1:65" pos:end="1:78"><type pos:start="1:65" pos:end="1:78"><name pos:start="1:65" pos:end="1:67">int</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:78">data_size</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:44"><decl pos:start="3:30" pos:end="3:44"><type pos:start="3:30" pos:end="3:44"><name pos:start="3:30" pos:end="3:37">AVPacket</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:44">avpkt</name></decl></parameter>)</parameter_list> <block pos:start="3:47" pos:end="149:1">{<block_content pos:start="5:5" pos:end="147:5">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">buf</name> <init pos:start="5:24" pos:end="5:36">= <expr pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:30">avpkt</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">buf_size</name> <init pos:start="7:18" pos:end="7:30">= <expr pos:start="7:20" pos:end="7:30"><name pos:start="7:20" pos:end="7:30"><name pos:start="7:20" pos:end="7:24">avpkt</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">AVSContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">h</name> <init pos:start="9:19" pos:end="9:36">= <expr pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:25">avctx</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">MpegEncContext</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:21">s</name> <init pos:start="11:23" pos:end="11:29">= <expr pos:start="11:25" pos:end="11:29"><operator pos:start="11:25" pos:end="11:25">&amp;</operator><name pos:start="11:26" pos:end="11:29"><name pos:start="11:26" pos:end="11:26">h</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:29">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:18">input_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:26">buf_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:19"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:17">uint8_t</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:26">buf_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">AVFrame</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:20">picture</name> <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:16">stc</name> <init pos:start="21:18" pos:end="21:21">= <expr pos:start="21:20" pos:end="21:21"><operator pos:start="21:20" pos:end="21:20">-</operator><literal type="number" pos:start="21:21" pos:end="21:21">1</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:21"><expr pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:12">avctx</name></name> <operator pos:start="25:14" pos:end="25:14">=</operator> <name pos:start="25:16" pos:end="25:20">avctx</name></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="41:5"><if pos:start="29:5" pos:end="41:5">if <condition pos:start="29:8" pos:end="29:22">(<expr pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:16">buf_size</name> <operator pos:start="29:18" pos:end="29:19">==</operator> <literal type="number" pos:start="29:21" pos:end="29:21">0</literal></expr>)</condition> <block pos:start="29:24" pos:end="41:5">{<block_content pos:start="31:9" pos:end="39:17">

        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:49">(<expr pos:start="31:13" pos:end="31:48"><operator pos:start="31:13" pos:end="31:13">!</operator><name pos:start="31:14" pos:end="31:25"><name pos:start="31:14" pos:end="31:14">s</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:25">low_delay</name></name> <operator pos:start="31:27" pos:end="31:28">&amp;&amp;</operator> <name pos:start="31:30" pos:end="31:38"><name pos:start="31:30" pos:end="31:30">h</name><operator pos:start="31:31" pos:end="31:32">-&gt;</operator><name pos:start="31:33" pos:end="31:35">DPB</name><index pos:start="31:36" pos:end="31:38">[<expr pos:start="31:37" pos:end="31:37"><literal type="number" pos:start="31:37" pos:end="31:37">0</literal></expr>]</index></name><operator pos:start="31:39" pos:end="31:39">.</operator><name pos:start="31:40" pos:end="31:48"><name pos:start="31:40" pos:end="31:40">f</name><operator pos:start="31:41" pos:end="31:41">.</operator><name pos:start="31:42" pos:end="31:45">data</name><index pos:start="31:46" pos:end="31:48">[<expr pos:start="31:47" pos:end="31:47"><literal type="number" pos:start="31:47" pos:end="31:47">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="31:51" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:47">

            <expr_stmt pos:start="33:13" pos:end="33:43"><expr pos:start="33:13" pos:end="33:42"><operator pos:start="33:13" pos:end="33:13">*</operator><name pos:start="33:14" pos:end="33:22">data_size</name> <operator pos:start="33:24" pos:end="33:24">=</operator> <sizeof pos:start="33:26" pos:end="33:42">sizeof<argument_list pos:start="33:32" pos:end="33:42">(<argument pos:start="33:33" pos:end="33:41"><expr pos:start="33:33" pos:end="33:41"><name pos:start="33:33" pos:end="33:41">AVPicture</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:47"><expr pos:start="35:13" pos:end="35:46"><operator pos:start="35:13" pos:end="35:13">*</operator><name pos:start="35:14" pos:end="35:20">picture</name> <operator pos:start="35:22" pos:end="35:22">=</operator> <operator pos:start="35:24" pos:end="35:24">*</operator><operator pos:start="35:25" pos:end="35:25">(</operator><name pos:start="35:26" pos:end="35:32">AVFrame</name> <operator pos:start="35:34" pos:end="35:34">*</operator><operator pos:start="35:35" pos:end="35:35">)</operator> <operator pos:start="35:37" pos:end="35:37">&amp;</operator><name pos:start="35:38" pos:end="35:46"><name pos:start="35:38" pos:end="35:38">h</name><operator pos:start="35:39" pos:end="35:40">-&gt;</operator><name pos:start="35:41" pos:end="35:43">DPB</name><index pos:start="35:44" pos:end="35:46">[<expr pos:start="35:45" pos:end="35:45"><literal type="number" pos:start="35:45" pos:end="35:45">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="39:9" pos:end="39:17">return <expr pos:start="39:16" pos:end="39:16"><literal type="number" pos:start="39:16" pos:end="39:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:18"><expr pos:start="45:5" pos:end="45:17"><name pos:start="45:5" pos:end="45:11">buf_ptr</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <name pos:start="45:15" pos:end="45:17">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:11">buf_end</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <name pos:start="47:15" pos:end="47:17">buf</name> <operator pos:start="47:19" pos:end="47:19">+</operator> <name pos:start="47:21" pos:end="47:28">buf_size</name></expr>;</expr_stmt>

    <for pos:start="49:5" pos:end="147:5">for<control pos:start="49:8" pos:end="49:11">(<init pos:start="49:9" pos:end="49:9">;</init><condition pos:start="49:10" pos:end="49:10">;</condition><incr/>)</control> <block pos:start="49:13" pos:end="147:5">{<block_content pos:start="51:9" pos:end="145:9">

        <expr_stmt pos:start="51:9" pos:end="51:60"><expr pos:start="51:9" pos:end="51:59"><name pos:start="51:9" pos:end="51:15">buf_ptr</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <call pos:start="51:19" pos:end="51:59"><name pos:start="51:19" pos:end="51:36">ff_find_start_code</name><argument_list pos:start="51:37" pos:end="51:59">(<argument pos:start="51:38" pos:end="51:44"><expr pos:start="51:38" pos:end="51:44"><name pos:start="51:38" pos:end="51:44">buf_ptr</name></expr></argument>,<argument pos:start="51:46" pos:end="51:52"><expr pos:start="51:46" pos:end="51:52"><name pos:start="51:46" pos:end="51:52">buf_end</name></expr></argument>, <argument pos:start="51:55" pos:end="51:58"><expr pos:start="51:55" pos:end="51:58"><operator pos:start="51:55" pos:end="51:55">&amp;</operator><name pos:start="51:56" pos:end="51:58">stc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="55:73"><if pos:start="53:9" pos:end="55:73">if<condition pos:start="53:11" pos:end="53:28">(<expr pos:start="53:12" pos:end="53:27"><name pos:start="53:12" pos:end="53:14">stc</name> <operator pos:start="53:16" pos:end="53:16">&amp;</operator> <literal type="number" pos:start="53:18" pos:end="53:27">0xFFFFFE00</literal></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:73"><block_content pos:start="55:13" pos:end="55:73">

            <return pos:start="55:13" pos:end="55:73">return <expr pos:start="55:20" pos:end="55:72"><call pos:start="55:20" pos:end="55:72"><name pos:start="55:20" pos:end="55:24">FFMAX</name><argument_list pos:start="55:25" pos:end="55:72">(<argument pos:start="55:26" pos:end="55:26"><expr pos:start="55:26" pos:end="55:26"><literal type="number" pos:start="55:26" pos:end="55:26">0</literal></expr></argument>, <argument pos:start="55:29" pos:end="55:71"><expr pos:start="55:29" pos:end="55:71"><name pos:start="55:29" pos:end="55:35">buf_ptr</name> <operator pos:start="55:37" pos:end="55:37">-</operator> <name pos:start="55:39" pos:end="55:41">buf</name> <operator pos:start="55:43" pos:end="55:43">-</operator> <name pos:start="55:45" pos:end="55:71"><name pos:start="55:45" pos:end="55:45">s</name><operator pos:start="55:46" pos:end="55:47">-&gt;</operator><name pos:start="55:48" pos:end="55:60">parse_context</name><operator pos:start="55:61" pos:end="55:61">.</operator><name pos:start="55:62" pos:end="55:71">last_index</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:43"><expr pos:start="57:9" pos:end="57:42"><name pos:start="57:9" pos:end="57:18">input_size</name> <operator pos:start="57:20" pos:end="57:20">=</operator> <operator pos:start="57:22" pos:end="57:22">(</operator><name pos:start="57:23" pos:end="57:29">buf_end</name> <operator pos:start="57:31" pos:end="57:31">-</operator> <name pos:start="57:33" pos:end="57:39">buf_ptr</name><operator pos:start="57:40" pos:end="57:40">)</operator><operator pos:start="57:41" pos:end="57:41">*</operator><literal type="number" pos:start="57:42" pos:end="57:42">8</literal></expr>;</expr_stmt>

        <switch pos:start="59:9" pos:end="145:9">switch<condition pos:start="59:15" pos:end="59:19">(<expr pos:start="59:16" pos:end="59:18"><name pos:start="59:16" pos:end="59:18">stc</name></expr>)</condition> <block pos:start="59:21" pos:end="145:9">{<block_content pos:start="61:9" pos:end="143:18">

        <case pos:start="61:9" pos:end="61:29">case <expr pos:start="61:14" pos:end="61:28"><name pos:start="61:14" pos:end="61:28">CAVS_START_CODE</name></expr>:</case>

            <expr_stmt pos:start="63:13" pos:end="63:55"><expr pos:start="63:13" pos:end="63:54"><call pos:start="63:13" pos:end="63:54"><name pos:start="63:13" pos:end="63:25">init_get_bits</name><argument_list pos:start="63:26" pos:end="63:54">(<argument pos:start="63:27" pos:end="63:32"><expr pos:start="63:27" pos:end="63:32"><operator pos:start="63:27" pos:end="63:27">&amp;</operator><name pos:start="63:28" pos:end="63:32"><name pos:start="63:28" pos:end="63:28">s</name><operator pos:start="63:29" pos:end="63:30">-&gt;</operator><name pos:start="63:31" pos:end="63:32">gb</name></name></expr></argument>, <argument pos:start="63:35" pos:end="63:41"><expr pos:start="63:35" pos:end="63:41"><name pos:start="63:35" pos:end="63:41">buf_ptr</name></expr></argument>, <argument pos:start="63:44" pos:end="63:53"><expr pos:start="63:44" pos:end="63:53"><name pos:start="63:44" pos:end="63:53">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:33"><expr pos:start="65:13" pos:end="65:32"><call pos:start="65:13" pos:end="65:32"><name pos:start="65:13" pos:end="65:29">decode_seq_header</name><argument_list pos:start="65:30" pos:end="65:32">(<argument pos:start="65:31" pos:end="65:31"><expr pos:start="65:31" pos:end="65:31"><name pos:start="65:31" pos:end="65:31">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        <case pos:start="69:9" pos:end="69:30">case <expr pos:start="69:14" pos:end="69:29"><name pos:start="69:14" pos:end="69:29">PIC_I_START_CODE</name></expr>:</case>

            <if_stmt pos:start="71:13" pos:end="83:13"><if pos:start="71:13" pos:end="83:13">if<condition pos:start="71:15" pos:end="71:32">(<expr pos:start="71:16" pos:end="71:31"><operator pos:start="71:16" pos:end="71:16">!</operator><name pos:start="71:17" pos:end="71:31"><name pos:start="71:17" pos:end="71:17">h</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:31">got_keyframe</name></name></expr>)</condition> <block pos:start="71:34" pos:end="83:13">{<block_content pos:start="73:17" pos:end="81:36">

                <if_stmt pos:start="73:17" pos:end="75:72"><if pos:start="73:17" pos:end="75:72">if<condition pos:start="73:19" pos:end="73:39">(<expr pos:start="73:20" pos:end="73:38"><name pos:start="73:20" pos:end="73:28"><name pos:start="73:20" pos:end="73:20">h</name><operator pos:start="73:21" pos:end="73:22">-&gt;</operator><name pos:start="73:23" pos:end="73:25">DPB</name><index pos:start="73:26" pos:end="73:28">[<expr pos:start="73:27" pos:end="73:27"><literal type="number" pos:start="73:27" pos:end="73:27">0</literal></expr>]</index></name><operator pos:start="73:29" pos:end="73:29">.</operator><name pos:start="73:30" pos:end="73:38"><name pos:start="73:30" pos:end="73:30">f</name><operator pos:start="73:31" pos:end="73:31">.</operator><name pos:start="73:32" pos:end="73:35">data</name><index pos:start="73:36" pos:end="73:38">[<expr pos:start="73:37" pos:end="73:37"><literal type="number" pos:start="73:37" pos:end="73:37">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="75:21" pos:end="75:72"><block_content pos:start="75:21" pos:end="75:72">

                    <expr_stmt pos:start="75:21" pos:end="75:72"><expr pos:start="75:21" pos:end="75:71"><call pos:start="75:21" pos:end="75:71"><name pos:start="75:21" pos:end="75:41"><name pos:start="75:21" pos:end="75:25">avctx</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:41">release_buffer</name></name><argument_list pos:start="75:42" pos:end="75:71">(<argument pos:start="75:43" pos:end="75:47"><expr pos:start="75:43" pos:end="75:47"><name pos:start="75:43" pos:end="75:47">avctx</name></expr></argument>, <argument pos:start="75:50" pos:end="75:70"><expr pos:start="75:50" pos:end="75:70"><operator pos:start="75:50" pos:end="75:50">(</operator><name pos:start="75:51" pos:end="75:57">AVFrame</name> <operator pos:start="75:59" pos:end="75:59">*</operator><operator pos:start="75:60" pos:end="75:60">)</operator><operator pos:start="75:61" pos:end="75:61">&amp;</operator><name pos:start="75:62" pos:end="75:70"><name pos:start="75:62" pos:end="75:62">h</name><operator pos:start="75:63" pos:end="75:64">-&gt;</operator><name pos:start="75:65" pos:end="75:67">DPB</name><index pos:start="75:68" pos:end="75:70">[<expr pos:start="75:69" pos:end="75:69"><literal type="number" pos:start="75:69" pos:end="75:69">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="77:17" pos:end="79:72"><if pos:start="77:17" pos:end="79:72">if<condition pos:start="77:19" pos:end="77:39">(<expr pos:start="77:20" pos:end="77:38"><name pos:start="77:20" pos:end="77:28"><name pos:start="77:20" pos:end="77:20">h</name><operator pos:start="77:21" pos:end="77:22">-&gt;</operator><name pos:start="77:23" pos:end="77:25">DPB</name><index pos:start="77:26" pos:end="77:28">[<expr pos:start="77:27" pos:end="77:27"><literal type="number" pos:start="77:27" pos:end="77:27">1</literal></expr>]</index></name><operator pos:start="77:29" pos:end="77:29">.</operator><name pos:start="77:30" pos:end="77:38"><name pos:start="77:30" pos:end="77:30">f</name><operator pos:start="77:31" pos:end="77:31">.</operator><name pos:start="77:32" pos:end="77:35">data</name><index pos:start="77:36" pos:end="77:38">[<expr pos:start="77:37" pos:end="77:37"><literal type="number" pos:start="77:37" pos:end="77:37">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="79:21" pos:end="79:72"><block_content pos:start="79:21" pos:end="79:72">

                    <expr_stmt pos:start="79:21" pos:end="79:72"><expr pos:start="79:21" pos:end="79:71"><call pos:start="79:21" pos:end="79:71"><name pos:start="79:21" pos:end="79:41"><name pos:start="79:21" pos:end="79:25">avctx</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:41">release_buffer</name></name><argument_list pos:start="79:42" pos:end="79:71">(<argument pos:start="79:43" pos:end="79:47"><expr pos:start="79:43" pos:end="79:47"><name pos:start="79:43" pos:end="79:47">avctx</name></expr></argument>, <argument pos:start="79:50" pos:end="79:70"><expr pos:start="79:50" pos:end="79:70"><operator pos:start="79:50" pos:end="79:50">(</operator><name pos:start="79:51" pos:end="79:57">AVFrame</name> <operator pos:start="79:59" pos:end="79:59">*</operator><operator pos:start="79:60" pos:end="79:60">)</operator><operator pos:start="79:61" pos:end="79:61">&amp;</operator><name pos:start="79:62" pos:end="79:70"><name pos:start="79:62" pos:end="79:62">h</name><operator pos:start="79:63" pos:end="79:64">-&gt;</operator><name pos:start="79:65" pos:end="79:67">DPB</name><index pos:start="79:68" pos:end="79:70">[<expr pos:start="79:69" pos:end="79:69"><literal type="number" pos:start="79:69" pos:end="79:69">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:36"><expr pos:start="81:17" pos:end="81:35"><name pos:start="81:17" pos:end="81:31"><name pos:start="81:17" pos:end="81:17">h</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:31">got_keyframe</name></name> <operator pos:start="81:33" pos:end="81:33">=</operator> <literal type="number" pos:start="81:35" pos:end="81:35">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        <case pos:start="85:9" pos:end="85:31">case <expr pos:start="85:14" pos:end="85:30"><name pos:start="85:14" pos:end="85:30">PIC_PB_START_CODE</name></expr>:</case>

            <expr_stmt pos:start="87:13" pos:end="87:27"><expr pos:start="87:13" pos:end="87:26"><operator pos:start="87:13" pos:end="87:13">*</operator><name pos:start="87:14" pos:end="87:22">data_size</name> <operator pos:start="87:24" pos:end="87:24">=</operator> <literal type="number" pos:start="87:26" pos:end="87:26">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="89:13" pos:end="91:22"><if pos:start="89:13" pos:end="91:22">if<condition pos:start="89:15" pos:end="89:32">(<expr pos:start="89:16" pos:end="89:31"><operator pos:start="89:16" pos:end="89:16">!</operator><name pos:start="89:17" pos:end="89:31"><name pos:start="89:17" pos:end="89:17">h</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:31">got_keyframe</name></name></expr>)</condition><block type="pseudo" pos:start="91:17" pos:end="91:22"><block_content pos:start="91:17" pos:end="91:22">

                <break pos:start="91:17" pos:end="91:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:55"><expr pos:start="93:13" pos:end="93:54"><call pos:start="93:13" pos:end="93:54"><name pos:start="93:13" pos:end="93:25">init_get_bits</name><argument_list pos:start="93:26" pos:end="93:54">(<argument pos:start="93:27" pos:end="93:32"><expr pos:start="93:27" pos:end="93:32"><operator pos:start="93:27" pos:end="93:27">&amp;</operator><name pos:start="93:28" pos:end="93:32"><name pos:start="93:28" pos:end="93:28">s</name><operator pos:start="93:29" pos:end="93:30">-&gt;</operator><name pos:start="93:31" pos:end="93:32">gb</name></name></expr></argument>, <argument pos:start="93:35" pos:end="93:41"><expr pos:start="93:35" pos:end="93:41"><name pos:start="93:35" pos:end="93:41">buf_ptr</name></expr></argument>, <argument pos:start="93:44" pos:end="93:53"><expr pos:start="93:44" pos:end="93:53"><name pos:start="93:44" pos:end="93:53">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:25"><expr pos:start="95:13" pos:end="95:24"><name pos:start="95:13" pos:end="95:18"><name pos:start="95:13" pos:end="95:13">h</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:18">stc</name></name> <operator pos:start="95:20" pos:end="95:20">=</operator> <name pos:start="95:22" pos:end="95:24">stc</name></expr>;</expr_stmt>

            <if_stmt pos:start="97:13" pos:end="99:22"><if pos:start="97:13" pos:end="99:22">if<condition pos:start="97:15" pos:end="97:29">(<expr pos:start="97:16" pos:end="97:28"><call pos:start="97:16" pos:end="97:28"><name pos:start="97:16" pos:end="97:25">decode_pic</name><argument_list pos:start="97:26" pos:end="97:28">(<argument pos:start="97:27" pos:end="97:27"><expr pos:start="97:27" pos:end="97:27"><name pos:start="97:27" pos:end="97:27">h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="99:17" pos:end="99:22"><block_content pos:start="99:17" pos:end="99:22">

                <break pos:start="99:17" pos:end="99:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:43"><expr pos:start="101:13" pos:end="101:42"><operator pos:start="101:13" pos:end="101:13">*</operator><name pos:start="101:14" pos:end="101:22">data_size</name> <operator pos:start="101:24" pos:end="101:24">=</operator> <sizeof pos:start="101:26" pos:end="101:42">sizeof<argument_list pos:start="101:32" pos:end="101:42">(<argument pos:start="101:33" pos:end="101:41"><expr pos:start="101:33" pos:end="101:41"><name pos:start="101:33" pos:end="101:41">AVPicture</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <if_stmt pos:start="103:13" pos:end="117:52"><if pos:start="103:13" pos:end="115:13">if<condition pos:start="103:15" pos:end="103:48">(<expr pos:start="103:16" pos:end="103:47"><name pos:start="103:16" pos:end="103:26"><name pos:start="103:16" pos:end="103:16">h</name><operator pos:start="103:17" pos:end="103:18">-&gt;</operator><name pos:start="103:19" pos:end="103:26">pic_type</name></name> <operator pos:start="103:28" pos:end="103:29">!=</operator> <name pos:start="103:31" pos:end="103:47">AV_PICTURE_TYPE_B</name></expr>)</condition> <block pos:start="103:50" pos:end="115:13">{<block_content pos:start="105:17" pos:end="113:17">

                <if_stmt pos:start="105:17" pos:end="113:17"><if pos:start="105:17" pos:end="109:17">if<condition pos:start="105:19" pos:end="105:39">(<expr pos:start="105:20" pos:end="105:38"><name pos:start="105:20" pos:end="105:28"><name pos:start="105:20" pos:end="105:20">h</name><operator pos:start="105:21" pos:end="105:22">-&gt;</operator><name pos:start="105:23" pos:end="105:25">DPB</name><index pos:start="105:26" pos:end="105:28">[<expr pos:start="105:27" pos:end="105:27"><literal type="number" pos:start="105:27" pos:end="105:27">1</literal></expr>]</index></name><operator pos:start="105:29" pos:end="105:29">.</operator><name pos:start="105:30" pos:end="105:38"><name pos:start="105:30" pos:end="105:30">f</name><operator pos:start="105:31" pos:end="105:31">.</operator><name pos:start="105:32" pos:end="105:35">data</name><index pos:start="105:36" pos:end="105:38">[<expr pos:start="105:37" pos:end="105:37"><literal type="number" pos:start="105:37" pos:end="105:37">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="105:41" pos:end="109:17">{<block_content pos:start="107:21" pos:end="107:55">

                    <expr_stmt pos:start="107:21" pos:end="107:55"><expr pos:start="107:21" pos:end="107:54"><operator pos:start="107:21" pos:end="107:21">*</operator><name pos:start="107:22" pos:end="107:28">picture</name> <operator pos:start="107:30" pos:end="107:30">=</operator> <operator pos:start="107:32" pos:end="107:32">*</operator><operator pos:start="107:33" pos:end="107:33">(</operator><name pos:start="107:34" pos:end="107:40">AVFrame</name> <operator pos:start="107:42" pos:end="107:42">*</operator><operator pos:start="107:43" pos:end="107:43">)</operator> <operator pos:start="107:45" pos:end="107:45">&amp;</operator><name pos:start="107:46" pos:end="107:54"><name pos:start="107:46" pos:end="107:46">h</name><operator pos:start="107:47" pos:end="107:48">-&gt;</operator><name pos:start="107:49" pos:end="107:51">DPB</name><index pos:start="107:52" pos:end="107:54">[<expr pos:start="107:53" pos:end="107:53"><literal type="number" pos:start="107:53" pos:end="107:53">1</literal></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="109:19" pos:end="113:17">else <block pos:start="109:24" pos:end="113:17">{<block_content pos:start="111:21" pos:end="111:35">

                    <expr_stmt pos:start="111:21" pos:end="111:35"><expr pos:start="111:21" pos:end="111:34"><operator pos:start="111:21" pos:end="111:21">*</operator><name pos:start="111:22" pos:end="111:30">data_size</name> <operator pos:start="111:32" pos:end="111:32">=</operator> <literal type="number" pos:start="111:34" pos:end="111:34">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="115:15" pos:end="117:52">else<block type="pseudo" pos:start="117:17" pos:end="117:52"><block_content pos:start="117:17" pos:end="117:52">

                <expr_stmt pos:start="117:17" pos:end="117:52"><expr pos:start="117:17" pos:end="117:51"><operator pos:start="117:17" pos:end="117:17">*</operator><name pos:start="117:18" pos:end="117:24">picture</name> <operator pos:start="117:26" pos:end="117:26">=</operator> <operator pos:start="117:28" pos:end="117:28">*</operator><operator pos:start="117:29" pos:end="117:29">(</operator><name pos:start="117:30" pos:end="117:36">AVFrame</name> <operator pos:start="117:38" pos:end="117:38">*</operator><operator pos:start="117:39" pos:end="117:39">)</operator> <operator pos:start="117:41" pos:end="117:41">&amp;</operator><name pos:start="117:42" pos:end="117:51"><name pos:start="117:42" pos:end="117:42">h</name><operator pos:start="117:43" pos:end="117:44">-&gt;</operator><name pos:start="117:45" pos:end="117:51">picture</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="119:13" pos:end="119:18">break;</break>

        <case pos:start="121:9" pos:end="121:28">case <expr pos:start="121:14" pos:end="121:27"><name pos:start="121:14" pos:end="121:27">EXT_START_CODE</name></expr>:</case>

            <comment type="line" pos:start="123:13" pos:end="123:63">//mpeg_decode_extension(avctx,buf_ptr, input_size);</comment>

            <break pos:start="125:13" pos:end="125:18">break;</break>

        <case pos:start="127:9" pos:end="127:29">case <expr pos:start="127:14" pos:end="127:28"><name pos:start="127:14" pos:end="127:28">USER_START_CODE</name></expr>:</case>

            <comment type="line" pos:start="129:13" pos:end="129:63">//mpeg_decode_user_data(avctx,buf_ptr, input_size);</comment>

            <break pos:start="131:13" pos:end="131:18">break;</break>

        <default pos:start="133:9" pos:end="133:16">default:</default>

            <if_stmt pos:start="135:13" pos:end="141:13"><if pos:start="135:13" pos:end="141:13">if <condition pos:start="135:16" pos:end="135:44">(<expr pos:start="135:17" pos:end="135:43"><name pos:start="135:17" pos:end="135:19">stc</name> <operator pos:start="135:21" pos:end="135:22">&lt;=</operator> <name pos:start="135:24" pos:end="135:43">SLICE_MAX_START_CODE</name></expr>)</condition> <block pos:start="135:46" pos:end="141:13">{<block_content pos:start="137:17" pos:end="139:47">

                <expr_stmt pos:start="137:17" pos:end="137:59"><expr pos:start="137:17" pos:end="137:58"><call pos:start="137:17" pos:end="137:58"><name pos:start="137:17" pos:end="137:29">init_get_bits</name><argument_list pos:start="137:30" pos:end="137:58">(<argument pos:start="137:31" pos:end="137:36"><expr pos:start="137:31" pos:end="137:36"><operator pos:start="137:31" pos:end="137:31">&amp;</operator><name pos:start="137:32" pos:end="137:36"><name pos:start="137:32" pos:end="137:32">s</name><operator pos:start="137:33" pos:end="137:34">-&gt;</operator><name pos:start="137:35" pos:end="137:36">gb</name></name></expr></argument>, <argument pos:start="137:39" pos:end="137:45"><expr pos:start="137:39" pos:end="137:45"><name pos:start="137:39" pos:end="137:45">buf_ptr</name></expr></argument>, <argument pos:start="137:48" pos:end="137:57"><expr pos:start="137:48" pos:end="137:57"><name pos:start="137:48" pos:end="137:57">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="139:17" pos:end="139:47"><expr pos:start="139:17" pos:end="139:46"><call pos:start="139:17" pos:end="139:46"><name pos:start="139:17" pos:end="139:35">decode_slice_header</name><argument_list pos:start="139:36" pos:end="139:46">(<argument pos:start="139:37" pos:end="139:37"><expr pos:start="139:37" pos:end="139:37"><name pos:start="139:37" pos:end="139:37">h</name></expr></argument>, <argument pos:start="139:40" pos:end="139:45"><expr pos:start="139:40" pos:end="139:45"><operator pos:start="139:40" pos:end="139:40">&amp;</operator><name pos:start="139:41" pos:end="139:45"><name pos:start="139:41" pos:end="139:41">s</name><operator pos:start="139:42" pos:end="139:43">-&gt;</operator><name pos:start="139:44" pos:end="139:45">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="143:13" pos:end="143:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
