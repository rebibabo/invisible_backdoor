<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21941.c" pos:tabs="8"><function pos:start="1:1" pos:end="197:1"><type pos:start="1:1" pos:end="1:7"><name pos:start="1:1" pos:end="1:7">ssize_t</name></type> <name pos:start="1:9" pos:end="1:22">ne2000_receive</name><parameter_list pos:start="1:23" pos:end="1:76">(<parameter pos:start="1:24" pos:end="1:41"><decl pos:start="1:24" pos:end="1:41"><type pos:start="1:24" pos:end="1:41"><name pos:start="1:24" pos:end="1:37">NetClientState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">nc</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:61"><decl pos:start="1:44" pos:end="1:61"><type pos:start="1:44" pos:end="1:61"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:56">uint8_t</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">buf</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:75"><decl pos:start="1:64" pos:end="1:75"><type pos:start="1:64" pos:end="1:75"><name pos:start="1:64" pos:end="1:69">size_t</name></type> <name pos:start="1:71" pos:end="1:75">size_</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="197:1">{<block_content pos:start="5:5" pos:end="195:17">

    <decl_stmt pos:start="5:5" pos:end="5:45"><decl pos:start="5:5" pos:end="5:44"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">NE2000State</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">s</name> <init pos:start="5:20" pos:end="5:44">= <expr pos:start="5:22" pos:end="5:44"><call pos:start="5:22" pos:end="5:44"><name pos:start="5:22" pos:end="5:40">qemu_get_nic_opaque</name><argument_list pos:start="5:41" pos:end="5:44">(<argument pos:start="5:42" pos:end="5:43"><expr pos:start="5:42" pos:end="5:43"><name pos:start="5:42" pos:end="5:43">nc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">size</name> <init pos:start="7:14" pos:end="7:20">= <expr pos:start="7:16" pos:end="7:20"><name pos:start="7:16" pos:end="7:20">size_</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:14">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:63"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:26">total_len</name></decl>, <decl pos:start="11:29" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:29" pos:end="11:32">next</name></decl>, <decl pos:start="11:35" pos:end="11:39"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:35" pos:end="11:39">avail</name></decl>, <decl pos:start="11:42" pos:end="11:44"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:42" pos:end="11:44">len</name></decl>, <decl pos:start="11:47" pos:end="11:51"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:47" pos:end="11:51">index</name></decl>, <decl pos:start="11:54" pos:end="11:62"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:54" pos:end="11:62">mcast_idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:20"><name pos:start="13:13" pos:end="13:16">buf1</name><index pos:start="13:17" pos:end="13:20">[<expr pos:start="13:18" pos:end="13:19"><literal type="number" pos:start="13:18" pos:end="13:19">60</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="22:0"><decl pos:start="15:5" pos:end="17:46"><type pos:start="15:5" pos:end="15:24"><specifier pos:start="15:5" pos:end="15:10">static</specifier> <specifier pos:start="15:12" pos:end="15:16">const</specifier> <name pos:start="15:18" pos:end="15:24">uint8_t</name></type> <name pos:start="15:26" pos:end="15:45"><name pos:start="15:26" pos:end="15:42">broadcast_macaddr</name><index pos:start="15:43" pos:end="15:45">[<expr pos:start="15:44" pos:end="15:44"><literal type="number" pos:start="15:44" pos:end="15:44">6</literal></expr>]</index></name> <init pos:start="15:47" pos:end="17:46">=

        <expr pos:start="17:9" pos:end="17:46"><block pos:start="17:9" pos:end="17:46">{ <expr pos:start="17:11" pos:end="17:14"><literal type="number" pos:start="17:11" pos:end="17:14">0xff</literal></expr>, <expr pos:start="17:17" pos:end="17:20"><literal type="number" pos:start="17:17" pos:end="17:20">0xff</literal></expr>, <expr pos:start="17:23" pos:end="17:26"><literal type="number" pos:start="17:23" pos:end="17:26">0xff</literal></expr>, <expr pos:start="17:29" pos:end="17:32"><literal type="number" pos:start="17:29" pos:end="17:32">0xff</literal></expr>, <expr pos:start="17:35" pos:end="17:38"><literal type="number" pos:start="17:35" pos:end="17:38">0xff</literal></expr>, <expr pos:start="17:41" pos:end="17:44"><literal type="number" pos:start="17:41" pos:end="17:44">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="21:1" pos:end="21:25">#<cpp:directive pos:start="21:2" pos:end="21:3">if</cpp:directive> <expr pos:start="21:5" pos:end="21:25"><call pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:11">defined</name><argument_list pos:start="21:12" pos:end="21:25">(<argument pos:start="21:13" pos:end="21:24"><expr pos:start="21:13" pos:end="21:24"><name pos:start="21:13" pos:end="21:24">DEBUG_NE2000</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="23:5" pos:end="26:0"><expr pos:start="23:5" pos:end="23:45"><call pos:start="23:5" pos:end="23:45"><name pos:start="23:5" pos:end="23:10">printf</name><argument_list pos:start="23:11" pos:end="23:45">(<argument pos:start="23:12" pos:end="23:38"><expr pos:start="23:12" pos:end="23:38"><literal type="string" pos:start="23:12" pos:end="23:38">"NE2000: received len=%d\n"</literal></expr></argument>, <argument pos:start="23:41" pos:end="23:44"><expr pos:start="23:41" pos:end="23:44"><name pos:start="23:41" pos:end="23:44">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="29:5" pos:end="31:18"><if pos:start="29:5" pos:end="31:18">if <condition pos:start="29:8" pos:end="29:53">(<expr pos:start="29:9" pos:end="29:52"><name pos:start="29:9" pos:end="29:14"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:14">cmd</name></name> <operator pos:start="29:16" pos:end="29:16">&amp;</operator> <name pos:start="29:18" pos:end="29:27">E8390_STOP</name> <operator pos:start="29:29" pos:end="29:30">||</operator> <call pos:start="29:32" pos:end="29:52"><name pos:start="29:32" pos:end="29:49">ne2000_buffer_full</name><argument_list pos:start="29:50" pos:end="29:52">(<argument pos:start="29:51" pos:end="29:51"><expr pos:start="29:51" pos:end="29:51"><name pos:start="29:51" pos:end="29:51">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:18"><block_content pos:start="31:9" pos:end="31:18">

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:25">/* XXX: check this */</comment>

    <if_stmt pos:start="37:5" pos:end="85:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:23">(<expr pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:15">rxcr</name></name> <operator pos:start="37:17" pos:end="37:17">&amp;</operator> <literal type="number" pos:start="37:19" pos:end="37:22">0x10</literal></expr>)</condition> <block pos:start="37:25" pos:end="41:5">{<block_content>

        <comment type="block" pos:start="39:9" pos:end="39:38">/* promiscuous: receive all */</comment>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="85:5">else <block pos:start="41:12" pos:end="85:5">{<block_content pos:start="43:9" pos:end="83:9">

        <if_stmt pos:start="43:9" pos:end="83:9"><if pos:start="43:9" pos:end="51:9">if <condition pos:start="43:12" pos:end="43:48">(<expr pos:start="43:13" pos:end="43:47"><operator pos:start="43:13" pos:end="43:13">!</operator><call pos:start="43:14" pos:end="43:47"><name pos:start="43:14" pos:end="43:19">memcmp</name><argument_list pos:start="43:20" pos:end="43:47">(<argument pos:start="43:21" pos:end="43:23"><expr pos:start="43:21" pos:end="43:23"><name pos:start="43:21" pos:end="43:23">buf</name></expr></argument>,  <argument pos:start="43:27" pos:end="43:43"><expr pos:start="43:27" pos:end="43:43"><name pos:start="43:27" pos:end="43:43">broadcast_macaddr</name></expr></argument>, <argument pos:start="43:46" pos:end="43:46"><expr pos:start="43:46" pos:end="43:46"><literal type="number" pos:start="43:46" pos:end="43:46">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:50" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:28">

            <comment type="block" pos:start="45:13" pos:end="45:35">/* broadcast address */</comment>

            <if_stmt pos:start="47:13" pos:end="49:28"><if pos:start="47:13" pos:end="49:28">if <condition pos:start="47:16" pos:end="47:34">(<expr pos:start="47:17" pos:end="47:33"><operator pos:start="47:17" pos:end="47:17">!</operator><operator pos:start="47:18" pos:end="47:18">(</operator><name pos:start="47:19" pos:end="47:25"><name pos:start="47:19" pos:end="47:19">s</name><operator pos:start="47:20" pos:end="47:21">-&gt;</operator><name pos:start="47:22" pos:end="47:25">rxcr</name></name> <operator pos:start="47:27" pos:end="47:27">&amp;</operator> <literal type="number" pos:start="47:29" pos:end="47:32">0x04</literal><operator pos:start="47:33" pos:end="47:33">)</operator></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:28"><block_content pos:start="49:17" pos:end="49:28">

                <return pos:start="49:17" pos:end="49:28">return <expr pos:start="49:24" pos:end="49:27"><name pos:start="49:24" pos:end="49:27">size</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="51:11" pos:end="65:9">else if <condition pos:start="51:19" pos:end="51:33">(<expr pos:start="51:20" pos:end="51:32"><name pos:start="51:20" pos:end="51:25"><name pos:start="51:20" pos:end="51:22">buf</name><index pos:start="51:23" pos:end="51:25">[<expr pos:start="51:24" pos:end="51:24"><literal type="number" pos:start="51:24" pos:end="51:24">0</literal></expr>]</index></name> <operator pos:start="51:27" pos:end="51:27">&amp;</operator> <literal type="number" pos:start="51:29" pos:end="51:32">0x01</literal></expr>)</condition> <block pos:start="51:35" pos:end="65:9">{<block_content pos:start="55:13" pos:end="63:28">

            <comment type="block" pos:start="53:13" pos:end="53:27">/* multicast */</comment>

            <if_stmt pos:start="55:13" pos:end="57:28"><if pos:start="55:13" pos:end="57:28">if <condition pos:start="55:16" pos:end="55:34">(<expr pos:start="55:17" pos:end="55:33"><operator pos:start="55:17" pos:end="55:17">!</operator><operator pos:start="55:18" pos:end="55:18">(</operator><name pos:start="55:19" pos:end="55:25"><name pos:start="55:19" pos:end="55:19">s</name><operator pos:start="55:20" pos:end="55:21">-&gt;</operator><name pos:start="55:22" pos:end="55:25">rxcr</name></name> <operator pos:start="55:27" pos:end="55:27">&amp;</operator> <literal type="number" pos:start="55:29" pos:end="55:32">0x08</literal><operator pos:start="55:33" pos:end="55:33">)</operator></expr>)</condition><block type="pseudo" pos:start="57:17" pos:end="57:28"><block_content pos:start="57:17" pos:end="57:28">

                <return pos:start="57:17" pos:end="57:28">return <expr pos:start="57:24" pos:end="57:27"><name pos:start="57:24" pos:end="57:27">size</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:47"><expr pos:start="59:13" pos:end="59:46"><name pos:start="59:13" pos:end="59:21">mcast_idx</name> <operator pos:start="59:23" pos:end="59:23">=</operator> <call pos:start="59:25" pos:end="59:46"><name pos:start="59:25" pos:end="59:41">compute_mcast_idx</name><argument_list pos:start="59:42" pos:end="59:46">(<argument pos:start="59:43" pos:end="59:45"><expr pos:start="59:43" pos:end="59:45"><name pos:start="59:43" pos:end="59:45">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="63:28"><if pos:start="61:13" pos:end="63:28">if <condition pos:start="61:16" pos:end="61:68">(<expr pos:start="61:17" pos:end="61:67"><operator pos:start="61:17" pos:end="61:17">!</operator><operator pos:start="61:18" pos:end="61:18">(</operator><name pos:start="61:19" pos:end="61:41"><name pos:start="61:19" pos:end="61:19">s</name><operator pos:start="61:20" pos:end="61:21">-&gt;</operator><name pos:start="61:22" pos:end="61:25">mult</name><index pos:start="61:26" pos:end="61:41">[<expr pos:start="61:27" pos:end="61:40"><name pos:start="61:27" pos:end="61:35">mcast_idx</name> <operator pos:start="61:37" pos:end="61:38">&gt;&gt;</operator> <literal type="number" pos:start="61:40" pos:end="61:40">3</literal></expr>]</index></name> <operator pos:start="61:43" pos:end="61:43">&amp;</operator> <operator pos:start="61:45" pos:end="61:45">(</operator><literal type="number" pos:start="61:46" pos:end="61:46">1</literal> <operator pos:start="61:48" pos:end="61:49">&lt;&lt;</operator> <operator pos:start="61:51" pos:end="61:51">(</operator><name pos:start="61:52" pos:end="61:60">mcast_idx</name> <operator pos:start="61:62" pos:end="61:62">&amp;</operator> <literal type="number" pos:start="61:64" pos:end="61:64">7</literal><operator pos:start="61:65" pos:end="61:65">)</operator><operator pos:start="61:66" pos:end="61:66">)</operator><operator pos:start="61:67" pos:end="61:67">)</operator></expr>)</condition><block type="pseudo" pos:start="63:17" pos:end="63:28"><block_content pos:start="63:17" pos:end="63:28">

                <return pos:start="63:17" pos:end="63:28">return <expr pos:start="63:24" pos:end="63:27"><name pos:start="63:24" pos:end="63:27">size</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="65:11" pos:end="79:9">else if <condition pos:start="65:19" pos:end="75:40">(<expr pos:start="65:20" pos:end="75:39"><name pos:start="65:20" pos:end="65:28"><name pos:start="65:20" pos:end="65:20">s</name><operator pos:start="65:21" pos:end="65:22">-&gt;</operator><name pos:start="65:23" pos:end="65:25">mem</name><index pos:start="65:26" pos:end="65:28">[<expr pos:start="65:27" pos:end="65:27"><literal type="number" pos:start="65:27" pos:end="65:27">0</literal></expr>]</index></name> <operator pos:start="65:30" pos:end="65:31">==</operator> <name pos:start="65:33" pos:end="65:38"><name pos:start="65:33" pos:end="65:35">buf</name><index pos:start="65:36" pos:end="65:38">[<expr pos:start="65:37" pos:end="65:37"><literal type="number" pos:start="65:37" pos:end="65:37">0</literal></expr>]</index></name> <operator pos:start="65:40" pos:end="65:41">&amp;&amp;</operator>

                   <name pos:start="67:20" pos:end="67:28"><name pos:start="67:20" pos:end="67:20">s</name><operator pos:start="67:21" pos:end="67:22">-&gt;</operator><name pos:start="67:23" pos:end="67:25">mem</name><index pos:start="67:26" pos:end="67:28">[<expr pos:start="67:27" pos:end="67:27"><literal type="number" pos:start="67:27" pos:end="67:27">2</literal></expr>]</index></name> <operator pos:start="67:30" pos:end="67:31">==</operator> <name pos:start="67:33" pos:end="67:38"><name pos:start="67:33" pos:end="67:35">buf</name><index pos:start="67:36" pos:end="67:38">[<expr pos:start="67:37" pos:end="67:37"><literal type="number" pos:start="67:37" pos:end="67:37">1</literal></expr>]</index></name> <operator pos:start="67:40" pos:end="67:41">&amp;&amp;</operator>

                   <name pos:start="69:20" pos:end="69:28"><name pos:start="69:20" pos:end="69:20">s</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:25">mem</name><index pos:start="69:26" pos:end="69:28">[<expr pos:start="69:27" pos:end="69:27"><literal type="number" pos:start="69:27" pos:end="69:27">4</literal></expr>]</index></name> <operator pos:start="69:30" pos:end="69:31">==</operator> <name pos:start="69:33" pos:end="69:38"><name pos:start="69:33" pos:end="69:35">buf</name><index pos:start="69:36" pos:end="69:38">[<expr pos:start="69:37" pos:end="69:37"><literal type="number" pos:start="69:37" pos:end="69:37">2</literal></expr>]</index></name> <operator pos:start="69:40" pos:end="69:41">&amp;&amp;</operator>

                   <name pos:start="71:20" pos:end="71:28"><name pos:start="71:20" pos:end="71:20">s</name><operator pos:start="71:21" pos:end="71:22">-&gt;</operator><name pos:start="71:23" pos:end="71:25">mem</name><index pos:start="71:26" pos:end="71:28">[<expr pos:start="71:27" pos:end="71:27"><literal type="number" pos:start="71:27" pos:end="71:27">6</literal></expr>]</index></name> <operator pos:start="71:30" pos:end="71:31">==</operator> <name pos:start="71:33" pos:end="71:38"><name pos:start="71:33" pos:end="71:35">buf</name><index pos:start="71:36" pos:end="71:38">[<expr pos:start="71:37" pos:end="71:37"><literal type="number" pos:start="71:37" pos:end="71:37">3</literal></expr>]</index></name> <operator pos:start="71:40" pos:end="71:41">&amp;&amp;</operator>

                   <name pos:start="73:20" pos:end="73:28"><name pos:start="73:20" pos:end="73:20">s</name><operator pos:start="73:21" pos:end="73:22">-&gt;</operator><name pos:start="73:23" pos:end="73:25">mem</name><index pos:start="73:26" pos:end="73:28">[<expr pos:start="73:27" pos:end="73:27"><literal type="number" pos:start="73:27" pos:end="73:27">8</literal></expr>]</index></name> <operator pos:start="73:30" pos:end="73:31">==</operator> <name pos:start="73:33" pos:end="73:38"><name pos:start="73:33" pos:end="73:35">buf</name><index pos:start="73:36" pos:end="73:38">[<expr pos:start="73:37" pos:end="73:37"><literal type="number" pos:start="73:37" pos:end="73:37">4</literal></expr>]</index></name> <operator pos:start="73:40" pos:end="73:41">&amp;&amp;</operator>

                   <name pos:start="75:20" pos:end="75:29"><name pos:start="75:20" pos:end="75:20">s</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:25">mem</name><index pos:start="75:26" pos:end="75:29">[<expr pos:start="75:27" pos:end="75:28"><literal type="number" pos:start="75:27" pos:end="75:28">10</literal></expr>]</index></name> <operator pos:start="75:31" pos:end="75:32">==</operator> <name pos:start="75:34" pos:end="75:39"><name pos:start="75:34" pos:end="75:36">buf</name><index pos:start="75:37" pos:end="75:39">[<expr pos:start="75:38" pos:end="75:38"><literal type="number" pos:start="75:38" pos:end="75:38">5</literal></expr>]</index></name></expr>)</condition> <block pos:start="75:42" pos:end="79:9">{<block_content>

            <comment type="block" pos:start="77:13" pos:end="77:23">/* match */</comment>

        </block_content>}</block></if> <else pos:start="79:11" pos:end="83:9">else <block pos:start="79:16" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:24">

            <return pos:start="81:13" pos:end="81:24">return <expr pos:start="81:20" pos:end="81:23"><name pos:start="81:20" pos:end="81:23">size</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>





    <comment type="block" pos:start="91:5" pos:end="91:45">/* if too small buffer, then expand it */</comment>

    <if_stmt pos:start="93:5" pos:end="103:5"><if pos:start="93:5" pos:end="103:5">if <condition pos:start="93:8" pos:end="93:28">(<expr pos:start="93:9" pos:end="93:27"><name pos:start="93:9" pos:end="93:12">size</name> <operator pos:start="93:14" pos:end="93:14">&lt;</operator> <name pos:start="93:16" pos:end="93:27">MIN_BUF_SIZE</name></expr>)</condition> <block pos:start="93:30" pos:end="103:5">{<block_content pos:start="95:9" pos:end="101:28">

        <expr_stmt pos:start="95:9" pos:end="95:32"><expr pos:start="95:9" pos:end="95:31"><call pos:start="95:9" pos:end="95:31"><name pos:start="95:9" pos:end="95:14">memcpy</name><argument_list pos:start="95:15" pos:end="95:31">(<argument pos:start="95:16" pos:end="95:19"><expr pos:start="95:16" pos:end="95:19"><name pos:start="95:16" pos:end="95:19">buf1</name></expr></argument>, <argument pos:start="95:22" pos:end="95:24"><expr pos:start="95:22" pos:end="95:24"><name pos:start="95:22" pos:end="95:24">buf</name></expr></argument>, <argument pos:start="95:27" pos:end="95:30"><expr pos:start="95:27" pos:end="95:30"><name pos:start="95:27" pos:end="95:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:52"><expr pos:start="97:9" pos:end="97:51"><call pos:start="97:9" pos:end="97:51"><name pos:start="97:9" pos:end="97:14">memset</name><argument_list pos:start="97:15" pos:end="97:51">(<argument pos:start="97:16" pos:end="97:26"><expr pos:start="97:16" pos:end="97:26"><name pos:start="97:16" pos:end="97:19">buf1</name> <operator pos:start="97:21" pos:end="97:21">+</operator> <name pos:start="97:23" pos:end="97:26">size</name></expr></argument>, <argument pos:start="97:29" pos:end="97:29"><expr pos:start="97:29" pos:end="97:29"><literal type="number" pos:start="97:29" pos:end="97:29">0</literal></expr></argument>, <argument pos:start="97:32" pos:end="97:50"><expr pos:start="97:32" pos:end="97:50"><name pos:start="97:32" pos:end="97:43">MIN_BUF_SIZE</name> <operator pos:start="97:45" pos:end="97:45">-</operator> <name pos:start="97:47" pos:end="97:50">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:19"><expr pos:start="99:9" pos:end="99:18"><name pos:start="99:9" pos:end="99:11">buf</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <name pos:start="99:15" pos:end="99:18">buf1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:28"><expr pos:start="101:9" pos:end="101:27"><name pos:start="101:9" pos:end="101:12">size</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <name pos:start="101:16" pos:end="101:27">MIN_BUF_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:27"><expr pos:start="107:5" pos:end="107:26"><name pos:start="107:5" pos:end="107:9">index</name> <operator pos:start="107:11" pos:end="107:11">=</operator> <name pos:start="107:13" pos:end="107:21"><name pos:start="107:13" pos:end="107:13">s</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:21">curpag</name></name> <operator pos:start="107:23" pos:end="107:24">&lt;&lt;</operator> <literal type="number" pos:start="107:26" pos:end="107:26">8</literal></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="113:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:33">(<expr pos:start="109:9" pos:end="109:32"><name pos:start="109:9" pos:end="109:13">index</name> <operator pos:start="109:15" pos:end="109:16">&gt;=</operator> <name pos:start="109:18" pos:end="109:32">NE2000_PMEM_END</name></expr>)</condition> <block pos:start="109:35" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:25">

        <expr_stmt pos:start="111:9" pos:end="111:25"><expr pos:start="111:9" pos:end="111:24"><name pos:start="111:9" pos:end="111:13">index</name> <operator pos:start="111:15" pos:end="111:15">=</operator> <name pos:start="111:17" pos:end="111:24"><name pos:start="111:17" pos:end="111:17">s</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:24">start</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="115:5" pos:end="115:28">/* 4 bytes for header */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:25"><expr pos:start="117:5" pos:end="117:24"><name pos:start="117:5" pos:end="117:13">total_len</name> <operator pos:start="117:15" pos:end="117:15">=</operator> <name pos:start="117:17" pos:end="117:20">size</name> <operator pos:start="117:22" pos:end="117:22">+</operator> <literal type="number" pos:start="117:24" pos:end="117:24">4</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="119:5" pos:end="119:51">/* address for next packet (4 bytes for CRC) */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:51"><expr pos:start="121:5" pos:end="121:50"><name pos:start="121:5" pos:end="121:8">next</name> <operator pos:start="121:10" pos:end="121:10">=</operator> <name pos:start="121:12" pos:end="121:16">index</name> <operator pos:start="121:18" pos:end="121:18">+</operator> <operator pos:start="121:20" pos:end="121:20">(</operator><operator pos:start="121:21" pos:end="121:21">(</operator><name pos:start="121:22" pos:end="121:30">total_len</name> <operator pos:start="121:32" pos:end="121:32">+</operator> <literal type="number" pos:start="121:34" pos:end="121:36">4</literal> <operator pos:start="121:36" pos:end="121:36">+</operator> <literal type="number" pos:start="121:38" pos:end="121:40">255</literal><operator pos:start="121:41" pos:end="121:41">)</operator> <operator pos:start="121:43" pos:end="121:43">&amp;</operator> <operator pos:start="121:45" pos:end="121:45">~</operator><literal type="number" pos:start="121:46" pos:end="121:49">0xff</literal><operator pos:start="121:50" pos:end="121:50">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="125:37"><if pos:start="123:5" pos:end="125:37">if <condition pos:start="123:8" pos:end="123:24">(<expr pos:start="123:9" pos:end="123:23"><name pos:start="123:9" pos:end="123:12">next</name> <operator pos:start="123:14" pos:end="123:15">&gt;=</operator> <name pos:start="123:17" pos:end="123:23"><name pos:start="123:17" pos:end="123:17">s</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:23">stop</name></name></expr>)</condition><block type="pseudo" pos:start="125:9" pos:end="125:37"><block_content pos:start="125:9" pos:end="125:37">

        <expr_stmt pos:start="125:9" pos:end="125:37"><expr pos:start="125:9" pos:end="125:36"><name pos:start="125:9" pos:end="125:12">next</name> <operator pos:start="125:14" pos:end="125:15">-=</operator> <operator pos:start="125:17" pos:end="125:17">(</operator><name pos:start="125:18" pos:end="125:24"><name pos:start="125:18" pos:end="125:18">s</name><operator pos:start="125:19" pos:end="125:20">-&gt;</operator><name pos:start="125:21" pos:end="125:24">stop</name></name> <operator pos:start="125:26" pos:end="125:26">-</operator> <name pos:start="125:28" pos:end="125:35"><name pos:start="125:28" pos:end="125:28">s</name><operator pos:start="125:29" pos:end="125:30">-&gt;</operator><name pos:start="125:31" pos:end="125:35">start</name></name><operator pos:start="125:36" pos:end="125:36">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="127:5" pos:end="127:31">/* prepare packet header */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:23"><expr pos:start="129:5" pos:end="129:22"><name pos:start="129:5" pos:end="129:5">p</name> <operator pos:start="129:7" pos:end="129:7">=</operator> <name pos:start="129:9" pos:end="129:14"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:14">mem</name></name> <operator pos:start="129:16" pos:end="129:16">+</operator> <name pos:start="129:18" pos:end="129:22">index</name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:24"><expr pos:start="131:5" pos:end="131:23"><name pos:start="131:5" pos:end="131:10"><name pos:start="131:5" pos:end="131:5">s</name><operator pos:start="131:6" pos:end="131:7">-&gt;</operator><name pos:start="131:8" pos:end="131:10">rsr</name></name> <operator pos:start="131:12" pos:end="131:12">=</operator> <name pos:start="131:14" pos:end="131:23">ENRSR_RXOK</name></expr>;</expr_stmt> <comment type="block" pos:start="131:26" pos:end="131:45">/* receive status */</comment>

    <comment type="block" pos:start="133:5" pos:end="133:25">/* XXX: check this */</comment>

    <if_stmt pos:start="135:5" pos:end="137:28"><if pos:start="135:5" pos:end="137:28">if <condition pos:start="135:8" pos:end="135:22">(<expr pos:start="135:9" pos:end="135:21"><name pos:start="135:9" pos:end="135:14"><name pos:start="135:9" pos:end="135:11">buf</name><index pos:start="135:12" pos:end="135:14">[<expr pos:start="135:13" pos:end="135:13"><literal type="number" pos:start="135:13" pos:end="135:13">0</literal></expr>]</index></name> <operator pos:start="135:16" pos:end="135:16">&amp;</operator> <literal type="number" pos:start="135:18" pos:end="135:21">0x01</literal></expr>)</condition><block type="pseudo" pos:start="137:9" pos:end="137:28"><block_content pos:start="137:9" pos:end="137:28">

        <expr_stmt pos:start="137:9" pos:end="137:28"><expr pos:start="137:9" pos:end="137:27"><name pos:start="137:9" pos:end="137:14"><name pos:start="137:9" pos:end="137:9">s</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:14">rsr</name></name> <operator pos:start="137:16" pos:end="137:17">|=</operator> <name pos:start="137:19" pos:end="137:27">ENRSR_PHY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:18"><expr pos:start="139:5" pos:end="139:17"><name pos:start="139:5" pos:end="139:8"><name pos:start="139:5" pos:end="139:5">p</name><index pos:start="139:6" pos:end="139:8">[<expr pos:start="139:7" pos:end="139:7"><literal type="number" pos:start="139:7" pos:end="139:7">0</literal></expr>]</index></name> <operator pos:start="139:10" pos:end="139:10">=</operator> <name pos:start="139:12" pos:end="139:17"><name pos:start="139:12" pos:end="139:12">s</name><operator pos:start="139:13" pos:end="139:14">-&gt;</operator><name pos:start="139:15" pos:end="139:17">rsr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:21"><expr pos:start="141:5" pos:end="141:20"><name pos:start="141:5" pos:end="141:8"><name pos:start="141:5" pos:end="141:5">p</name><index pos:start="141:6" pos:end="141:8">[<expr pos:start="141:7" pos:end="141:7"><literal type="number" pos:start="141:7" pos:end="141:7">1</literal></expr>]</index></name> <operator pos:start="141:10" pos:end="141:10">=</operator> <name pos:start="141:12" pos:end="141:15">next</name> <operator pos:start="141:17" pos:end="141:18">&gt;&gt;</operator> <literal type="number" pos:start="141:20" pos:end="141:20">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:21"><expr pos:start="143:5" pos:end="143:20"><name pos:start="143:5" pos:end="143:8"><name pos:start="143:5" pos:end="143:5">p</name><index pos:start="143:6" pos:end="143:8">[<expr pos:start="143:7" pos:end="143:7"><literal type="number" pos:start="143:7" pos:end="143:7">2</literal></expr>]</index></name> <operator pos:start="143:10" pos:end="143:10">=</operator> <name pos:start="143:12" pos:end="143:20">total_len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:26"><expr pos:start="145:5" pos:end="145:25"><name pos:start="145:5" pos:end="145:8"><name pos:start="145:5" pos:end="145:5">p</name><index pos:start="145:6" pos:end="145:8">[<expr pos:start="145:7" pos:end="145:7"><literal type="number" pos:start="145:7" pos:end="145:7">3</literal></expr>]</index></name> <operator pos:start="145:10" pos:end="145:10">=</operator> <name pos:start="145:12" pos:end="145:20">total_len</name> <operator pos:start="145:22" pos:end="145:23">&gt;&gt;</operator> <literal type="number" pos:start="145:25" pos:end="145:25">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:15"><expr pos:start="147:5" pos:end="147:14"><name pos:start="147:5" pos:end="147:9">index</name> <operator pos:start="147:11" pos:end="147:12">+=</operator> <literal type="number" pos:start="147:14" pos:end="147:14">4</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="151:5" pos:end="151:27">/* write packet data */</comment>

    <while pos:start="153:5" pos:end="181:5">while <condition pos:start="153:11" pos:end="153:20">(<expr pos:start="153:12" pos:end="153:19"><name pos:start="153:12" pos:end="153:15">size</name> <operator pos:start="153:17" pos:end="153:17">&gt;</operator> <literal type="number" pos:start="153:19" pos:end="153:19">0</literal></expr>)</condition> <block pos:start="153:22" pos:end="181:5">{<block_content pos:start="155:9" pos:end="179:20">

        <if_stmt pos:start="155:9" pos:end="161:22"><if pos:start="155:9" pos:end="157:36">if <condition pos:start="155:12" pos:end="155:29">(<expr pos:start="155:13" pos:end="155:28"><name pos:start="155:13" pos:end="155:17">index</name> <operator pos:start="155:19" pos:end="155:20">&lt;=</operator> <name pos:start="155:22" pos:end="155:28"><name pos:start="155:22" pos:end="155:22">s</name><operator pos:start="155:23" pos:end="155:24">-&gt;</operator><name pos:start="155:25" pos:end="155:28">stop</name></name></expr>)</condition><block type="pseudo" pos:start="157:13" pos:end="157:36"><block_content pos:start="157:13" pos:end="157:36">

            <expr_stmt pos:start="157:13" pos:end="157:36"><expr pos:start="157:13" pos:end="157:35"><name pos:start="157:13" pos:end="157:17">avail</name> <operator pos:start="157:19" pos:end="157:19">=</operator> <name pos:start="157:21" pos:end="157:27"><name pos:start="157:21" pos:end="157:21">s</name><operator pos:start="157:22" pos:end="157:23">-&gt;</operator><name pos:start="157:24" pos:end="157:27">stop</name></name> <operator pos:start="157:29" pos:end="157:29">-</operator> <name pos:start="157:31" pos:end="157:35">index</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="159:9" pos:end="161:22">else<block type="pseudo" pos:start="161:13" pos:end="161:22"><block_content pos:start="161:13" pos:end="161:22">

            <expr_stmt pos:start="161:13" pos:end="161:22"><expr pos:start="161:13" pos:end="161:21"><name pos:start="161:13" pos:end="161:17">avail</name> <operator pos:start="161:19" pos:end="161:19">=</operator> <literal type="number" pos:start="161:21" pos:end="161:21">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:19"><expr pos:start="163:9" pos:end="163:18"><name pos:start="163:9" pos:end="163:11">len</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <name pos:start="163:15" pos:end="163:18">size</name></expr>;</expr_stmt>

        <if_stmt pos:start="165:9" pos:end="167:24"><if pos:start="165:9" pos:end="167:24">if <condition pos:start="165:12" pos:end="165:24">(<expr pos:start="165:13" pos:end="165:23"><name pos:start="165:13" pos:end="165:15">len</name> <operator pos:start="165:17" pos:end="165:17">&gt;</operator> <name pos:start="165:19" pos:end="165:23">avail</name></expr>)</condition><block type="pseudo" pos:start="167:13" pos:end="167:24"><block_content pos:start="167:13" pos:end="167:24">

            <expr_stmt pos:start="167:13" pos:end="167:24"><expr pos:start="167:13" pos:end="167:23"><name pos:start="167:13" pos:end="167:15">len</name> <operator pos:start="167:17" pos:end="167:17">=</operator> <name pos:start="167:19" pos:end="167:23">avail</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:41"><expr pos:start="169:9" pos:end="169:40"><call pos:start="169:9" pos:end="169:40"><name pos:start="169:9" pos:end="169:14">memcpy</name><argument_list pos:start="169:15" pos:end="169:40">(<argument pos:start="169:16" pos:end="169:29"><expr pos:start="169:16" pos:end="169:29"><name pos:start="169:16" pos:end="169:21"><name pos:start="169:16" pos:end="169:16">s</name><operator pos:start="169:17" pos:end="169:18">-&gt;</operator><name pos:start="169:19" pos:end="169:21">mem</name></name> <operator pos:start="169:23" pos:end="169:23">+</operator> <name pos:start="169:25" pos:end="169:29">index</name></expr></argument>, <argument pos:start="169:32" pos:end="169:34"><expr pos:start="169:32" pos:end="169:34"><name pos:start="169:32" pos:end="169:34">buf</name></expr></argument>, <argument pos:start="169:37" pos:end="169:39"><expr pos:start="169:37" pos:end="169:39"><name pos:start="169:37" pos:end="169:39">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:19"><expr pos:start="171:9" pos:end="171:18"><name pos:start="171:9" pos:end="171:11">buf</name> <operator pos:start="171:13" pos:end="171:14">+=</operator> <name pos:start="171:16" pos:end="171:18">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:21"><expr pos:start="173:9" pos:end="173:20"><name pos:start="173:9" pos:end="173:13">index</name> <operator pos:start="173:15" pos:end="173:16">+=</operator> <name pos:start="173:18" pos:end="173:20">len</name></expr>;</expr_stmt>

        <if_stmt pos:start="175:9" pos:end="177:29"><if pos:start="175:9" pos:end="177:29">if <condition pos:start="175:12" pos:end="175:29">(<expr pos:start="175:13" pos:end="175:28"><name pos:start="175:13" pos:end="175:17">index</name> <operator pos:start="175:19" pos:end="175:20">==</operator> <name pos:start="175:22" pos:end="175:28"><name pos:start="175:22" pos:end="175:22">s</name><operator pos:start="175:23" pos:end="175:24">-&gt;</operator><name pos:start="175:25" pos:end="175:28">stop</name></name></expr>)</condition><block type="pseudo" pos:start="177:13" pos:end="177:29"><block_content pos:start="177:13" pos:end="177:29">

            <expr_stmt pos:start="177:13" pos:end="177:29"><expr pos:start="177:13" pos:end="177:28"><name pos:start="177:13" pos:end="177:17">index</name> <operator pos:start="177:19" pos:end="177:19">=</operator> <name pos:start="177:21" pos:end="177:28"><name pos:start="177:21" pos:end="177:21">s</name><operator pos:start="177:22" pos:end="177:23">-&gt;</operator><name pos:start="177:24" pos:end="177:28">start</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:20"><expr pos:start="179:9" pos:end="179:19"><name pos:start="179:9" pos:end="179:12">size</name> <operator pos:start="179:14" pos:end="179:15">-=</operator> <name pos:start="179:17" pos:end="179:19">len</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="183:5" pos:end="183:26"><expr pos:start="183:5" pos:end="183:25"><name pos:start="183:5" pos:end="183:13"><name pos:start="183:5" pos:end="183:5">s</name><operator pos:start="183:6" pos:end="183:7">-&gt;</operator><name pos:start="183:8" pos:end="183:13">curpag</name></name> <operator pos:start="183:15" pos:end="183:15">=</operator> <name pos:start="183:17" pos:end="183:20">next</name> <operator pos:start="183:22" pos:end="183:23">&gt;&gt;</operator> <literal type="number" pos:start="183:25" pos:end="183:25">8</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="187:5" pos:end="187:54">/* now we can signal we have received something */</comment>

    <expr_stmt pos:start="189:5" pos:end="189:23"><expr pos:start="189:5" pos:end="189:22"><name pos:start="189:5" pos:end="189:10"><name pos:start="189:5" pos:end="189:5">s</name><operator pos:start="189:6" pos:end="189:7">-&gt;</operator><name pos:start="189:8" pos:end="189:10">isr</name></name> <operator pos:start="189:12" pos:end="189:13">|=</operator> <name pos:start="189:15" pos:end="189:22">ENISR_RX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:25"><expr pos:start="191:5" pos:end="191:24"><call pos:start="191:5" pos:end="191:24"><name pos:start="191:5" pos:end="191:21">ne2000_update_irq</name><argument_list pos:start="191:22" pos:end="191:24">(<argument pos:start="191:23" pos:end="191:23"><expr pos:start="191:23" pos:end="191:23"><name pos:start="191:23" pos:end="191:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="195:5" pos:end="195:17">return <expr pos:start="195:12" pos:end="195:16"><name pos:start="195:12" pos:end="195:16">size_</name></expr>;</return>

</block_content>}</block></function>
</unit>
