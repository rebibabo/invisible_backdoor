<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26348.c" pos:tabs="8"><function pos:start="1:1" pos:end="255:1"><type pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:23">attribute_align_arg</name></type> <name pos:start="1:25" pos:end="1:45">avcodec_encode_audio2</name><parameter_list pos:start="1:46" pos:end="7:66">(<parameter pos:start="1:47" pos:end="1:67"><decl pos:start="1:47" pos:end="1:67"><type pos:start="1:47" pos:end="1:67"><name pos:start="1:47" pos:end="1:60">AVCodecContext</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:67">avctx</name></decl></parameter>,

                                              <parameter pos:start="3:47" pos:end="3:61"><decl pos:start="3:47" pos:end="3:61"><type pos:start="3:47" pos:end="3:61"><name pos:start="3:47" pos:end="3:54">AVPacket</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:61">avpkt</name></decl></parameter>,

                                              <parameter pos:start="5:47" pos:end="5:66"><decl pos:start="5:47" pos:end="5:66"><type pos:start="5:47" pos:end="5:66"><specifier pos:start="5:47" pos:end="5:51">const</specifier> <name pos:start="5:53" pos:end="5:59">AVFrame</name> <modifier pos:start="5:61" pos:end="5:61">*</modifier></type><name pos:start="5:62" pos:end="5:66">frame</name></decl></parameter>,

                                              <parameter pos:start="7:47" pos:end="7:65"><decl pos:start="7:47" pos:end="7:65"><type pos:start="7:47" pos:end="7:65"><name pos:start="7:47" pos:end="7:49">int</name> <modifier pos:start="7:51" pos:end="7:51">*</modifier></type><name pos:start="7:52" pos:end="7:65">got_packet_ptr</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="255:1">{<block_content pos:start="11:5" pos:end="253:15">

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:19">user_packet</name> <init pos:start="13:21" pos:end="13:35">= <expr pos:start="13:23" pos:end="13:35"><operator pos:start="13:23" pos:end="13:23">!</operator><operator pos:start="13:24" pos:end="13:24">!</operator><name pos:start="13:25" pos:end="13:35"><name pos:start="13:25" pos:end="13:29">avpkt</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:35">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">nb_samples</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:24"><expr pos:start="19:5" pos:end="19:23"><operator pos:start="19:5" pos:end="19:5">*</operator><name pos:start="19:6" pos:end="19:19">got_packet_ptr</name> <operator pos:start="19:21" pos:end="19:21">=</operator> <literal type="number" pos:start="19:23" pos:end="19:23">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="33:5"><if pos:start="23:5" pos:end="33:5">if <condition pos:start="23:8" pos:end="23:66">(<expr pos:start="23:9" pos:end="23:65"><operator pos:start="23:9" pos:end="23:9">!</operator><operator pos:start="23:10" pos:end="23:10">(</operator><name pos:start="23:11" pos:end="23:36"><name pos:start="23:11" pos:end="23:15">avctx</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:22">codec</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:36">capabilities</name></name> <operator pos:start="23:38" pos:end="23:38">&amp;</operator> <name pos:start="23:40" pos:end="23:54">CODEC_CAP_DELAY</name><operator pos:start="23:55" pos:end="23:55">)</operator> <operator pos:start="23:57" pos:end="23:58">&amp;&amp;</operator> <operator pos:start="23:60" pos:end="23:60">!</operator><name pos:start="23:61" pos:end="23:65">frame</name></expr>)</condition> <block pos:start="23:68" pos:end="33:5">{<block_content pos:start="25:9" pos:end="31:17">

        <expr_stmt pos:start="25:9" pos:end="25:30"><expr pos:start="25:9" pos:end="25:29"><call pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:22">av_free_packet</name><argument_list pos:start="25:23" pos:end="25:29">(<argument pos:start="25:24" pos:end="25:28"><expr pos:start="25:24" pos:end="25:28"><name pos:start="25:24" pos:end="25:28">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:30"><expr pos:start="27:9" pos:end="27:29"><call pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:22">av_init_packet</name><argument_list pos:start="27:23" pos:end="27:29">(<argument pos:start="27:24" pos:end="27:28"><expr pos:start="27:24" pos:end="27:28"><name pos:start="27:24" pos:end="27:28">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:24"><expr pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:19"><name pos:start="29:9" pos:end="29:13">avpkt</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:19">size</name></name> <operator pos:start="29:21" pos:end="29:21">=</operator> <literal type="number" pos:start="29:23" pos:end="29:23">0</literal></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:36">/* check for valid frame size */</comment>

    <if_stmt pos:start="39:5" pos:end="61:5"><if pos:start="39:5" pos:end="57:5">if <condition pos:start="39:8" pos:end="39:14">(<expr pos:start="39:9" pos:end="39:13"><name pos:start="39:9" pos:end="39:13">frame</name></expr>)</condition> <block pos:start="39:16" pos:end="57:5">{<block_content pos:start="41:9" pos:end="55:9">

        <expr_stmt pos:start="41:9" pos:end="41:39"><expr pos:start="41:9" pos:end="41:38"><name pos:start="41:9" pos:end="41:18">nb_samples</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <name pos:start="41:22" pos:end="41:38"><name pos:start="41:22" pos:end="41:26">frame</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:38">nb_samples</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="55:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:68">(<expr pos:start="43:13" pos:end="43:67"><name pos:start="43:13" pos:end="43:38"><name pos:start="43:13" pos:end="43:17">avctx</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:24">codec</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:38">capabilities</name></name> <operator pos:start="43:40" pos:end="43:40">&amp;</operator> <name pos:start="43:42" pos:end="43:67">CODEC_CAP_SMALL_LAST_FRAME</name></expr>)</condition> <block pos:start="43:70" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:39">

            <if_stmt pos:start="45:13" pos:end="47:39"><if pos:start="45:13" pos:end="47:39">if <condition pos:start="45:16" pos:end="45:47">(<expr pos:start="45:17" pos:end="45:46"><name pos:start="45:17" pos:end="45:26">nb_samples</name> <operator pos:start="45:28" pos:end="45:28">&gt;</operator> <name pos:start="45:30" pos:end="45:46"><name pos:start="45:30" pos:end="45:34">avctx</name><operator pos:start="45:35" pos:end="45:36">-&gt;</operator><name pos:start="45:37" pos:end="45:46">frame_size</name></name></expr>)</condition><block type="pseudo" pos:start="47:17" pos:end="47:39"><block_content pos:start="47:17" pos:end="47:39">

                <return pos:start="47:17" pos:end="47:39">return <expr pos:start="47:24" pos:end="47:38"><call pos:start="47:24" pos:end="47:38"><name pos:start="47:24" pos:end="47:30">AVERROR</name><argument_list pos:start="47:31" pos:end="47:38">(<argument pos:start="47:32" pos:end="47:37"><expr pos:start="47:32" pos:end="47:37"><name pos:start="47:32" pos:end="47:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="49:11" pos:end="55:9">else if <condition pos:start="49:19" pos:end="49:81">(<expr pos:start="49:20" pos:end="49:80"><operator pos:start="49:20" pos:end="49:20">!</operator><operator pos:start="49:21" pos:end="49:21">(</operator><name pos:start="49:22" pos:end="49:47"><name pos:start="49:22" pos:end="49:26">avctx</name><operator pos:start="49:27" pos:end="49:28">-&gt;</operator><name pos:start="49:29" pos:end="49:33">codec</name><operator pos:start="49:34" pos:end="49:35">-&gt;</operator><name pos:start="49:36" pos:end="49:47">capabilities</name></name> <operator pos:start="49:49" pos:end="49:49">&amp;</operator> <name pos:start="49:51" pos:end="49:79">CODEC_CAP_VARIABLE_FRAME_SIZE</name><operator pos:start="49:80" pos:end="49:80">)</operator></expr>)</condition> <block pos:start="49:83" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:39">

            <if_stmt pos:start="51:13" pos:end="53:39"><if pos:start="51:13" pos:end="53:39">if <condition pos:start="51:16" pos:end="51:48">(<expr pos:start="51:17" pos:end="51:47"><name pos:start="51:17" pos:end="51:26">nb_samples</name> <operator pos:start="51:28" pos:end="51:29">!=</operator> <name pos:start="51:31" pos:end="51:47"><name pos:start="51:31" pos:end="51:35">avctx</name><operator pos:start="51:36" pos:end="51:37">-&gt;</operator><name pos:start="51:38" pos:end="51:47">frame_size</name></name></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:39"><block_content pos:start="53:17" pos:end="53:39">

                <return pos:start="53:17" pos:end="53:39">return <expr pos:start="53:24" pos:end="53:38"><call pos:start="53:24" pos:end="53:38"><name pos:start="53:24" pos:end="53:30">AVERROR</name><argument_list pos:start="53:31" pos:end="53:38">(<argument pos:start="53:32" pos:end="53:37"><expr pos:start="53:32" pos:end="53:37"><name pos:start="53:32" pos:end="53:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="61:5">else <block pos:start="57:12" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:39">

        <expr_stmt pos:start="59:9" pos:end="59:39"><expr pos:start="59:9" pos:end="59:38"><name pos:start="59:9" pos:end="59:18">nb_samples</name> <operator pos:start="59:20" pos:end="59:20">=</operator> <name pos:start="59:22" pos:end="59:38"><name pos:start="59:22" pos:end="59:26">avctx</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:38">frame_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="65:5" pos:end="215:5"><if pos:start="65:5" pos:end="93:5">if <condition pos:start="65:8" pos:end="65:30">(<expr pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:13">avctx</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:20">codec</name><operator pos:start="65:21" pos:end="65:22">-&gt;</operator><name pos:start="65:23" pos:end="65:29">encode2</name></name></expr>)</condition> <block pos:start="65:32" pos:end="93:5">{<block_content pos:start="67:9" pos:end="91:9">

        <expr_stmt pos:start="67:9" pos:end="67:73"><expr pos:start="67:9" pos:end="67:72"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="67:72"><name pos:start="67:15" pos:end="67:35"><name pos:start="67:15" pos:end="67:19">avctx</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:26">codec</name><operator pos:start="67:27" pos:end="67:28">-&gt;</operator><name pos:start="67:29" pos:end="67:35">encode2</name></name><argument_list pos:start="67:36" pos:end="67:72">(<argument pos:start="67:37" pos:end="67:41"><expr pos:start="67:37" pos:end="67:41"><name pos:start="67:37" pos:end="67:41">avctx</name></expr></argument>, <argument pos:start="67:44" pos:end="67:48"><expr pos:start="67:44" pos:end="67:48"><name pos:start="67:44" pos:end="67:48">avpkt</name></expr></argument>, <argument pos:start="67:51" pos:end="67:55"><expr pos:start="67:51" pos:end="67:55"><name pos:start="67:51" pos:end="67:55">frame</name></expr></argument>, <argument pos:start="67:58" pos:end="67:71"><expr pos:start="67:58" pos:end="67:71"><name pos:start="67:58" pos:end="67:71">got_packet_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="91:9"><if pos:start="69:9" pos:end="87:9">if <condition pos:start="69:12" pos:end="69:36">(<expr pos:start="69:13" pos:end="69:35"><operator pos:start="69:13" pos:end="69:13">!</operator><name pos:start="69:14" pos:end="69:16">ret</name> <operator pos:start="69:18" pos:end="69:19">&amp;&amp;</operator> <operator pos:start="69:21" pos:end="69:21">*</operator><name pos:start="69:22" pos:end="69:35">got_packet_ptr</name></expr>)</condition> <block pos:start="69:38" pos:end="87:9">{<block_content pos:start="71:13" pos:end="85:36">

            <if_stmt pos:start="71:13" pos:end="83:13"><if pos:start="71:13" pos:end="83:13">if <condition pos:start="71:16" pos:end="71:64">(<expr pos:start="71:17" pos:end="71:63"><operator pos:start="71:17" pos:end="71:17">!</operator><operator pos:start="71:18" pos:end="71:18">(</operator><name pos:start="71:19" pos:end="71:44"><name pos:start="71:19" pos:end="71:23">avctx</name><operator pos:start="71:24" pos:end="71:25">-&gt;</operator><name pos:start="71:26" pos:end="71:30">codec</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:44">capabilities</name></name> <operator pos:start="71:46" pos:end="71:46">&amp;</operator> <name pos:start="71:48" pos:end="71:62">CODEC_CAP_DELAY</name><operator pos:start="71:63" pos:end="71:63">)</operator></expr>)</condition> <block pos:start="71:66" pos:end="83:13">{<block_content pos:start="73:17" pos:end="81:81">

                <if_stmt pos:start="73:17" pos:end="75:44"><if pos:start="73:17" pos:end="75:44">if <condition pos:start="73:20" pos:end="73:49">(<expr pos:start="73:21" pos:end="73:48"><name pos:start="73:21" pos:end="73:30"><name pos:start="73:21" pos:end="73:25">avpkt</name><operator pos:start="73:26" pos:end="73:27">-&gt;</operator><name pos:start="73:28" pos:end="73:30">pts</name></name> <operator pos:start="73:32" pos:end="73:33">==</operator> <name pos:start="73:35" pos:end="73:48">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="75:21" pos:end="75:44"><block_content pos:start="75:21" pos:end="75:44">

                    <expr_stmt pos:start="75:21" pos:end="75:44"><expr pos:start="75:21" pos:end="75:43"><name pos:start="75:21" pos:end="75:30"><name pos:start="75:21" pos:end="75:25">avpkt</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:30">pts</name></name> <operator pos:start="75:32" pos:end="75:32">=</operator> <name pos:start="75:34" pos:end="75:43"><name pos:start="75:34" pos:end="75:38">frame</name><operator pos:start="75:39" pos:end="75:40">-&gt;</operator><name pos:start="75:41" pos:end="75:43">pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="77:17" pos:end="81:81"><if pos:start="77:17" pos:end="81:81">if <condition pos:start="77:20" pos:end="77:37">(<expr pos:start="77:21" pos:end="77:36"><operator pos:start="77:21" pos:end="77:21">!</operator><name pos:start="77:22" pos:end="77:36"><name pos:start="77:22" pos:end="77:26">avpkt</name><operator pos:start="77:27" pos:end="77:28">-&gt;</operator><name pos:start="77:29" pos:end="77:36">duration</name></name></expr>)</condition><block type="pseudo" pos:start="79:21" pos:end="81:81"><block_content pos:start="79:21" pos:end="81:81">

                    <expr_stmt pos:start="79:21" pos:end="81:81"><expr pos:start="79:21" pos:end="81:80"><name pos:start="79:21" pos:end="79:35"><name pos:start="79:21" pos:end="79:25">avpkt</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:35">duration</name></name> <operator pos:start="79:37" pos:end="79:37">=</operator> <call pos:start="79:39" pos:end="81:80"><name pos:start="79:39" pos:end="79:61">ff_samples_to_time_base</name><argument_list pos:start="79:62" pos:end="81:80">(<argument pos:start="79:63" pos:end="79:67"><expr pos:start="79:63" pos:end="79:67"><name pos:start="79:63" pos:end="79:67">avctx</name></expr></argument>,

                                                              <argument pos:start="81:63" pos:end="81:79"><expr pos:start="81:63" pos:end="81:79"><name pos:start="81:63" pos:end="81:79"><name pos:start="81:63" pos:end="81:67">frame</name><operator pos:start="81:68" pos:end="81:69">-&gt;</operator><name pos:start="81:70" pos:end="81:79">nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:36"><expr pos:start="85:13" pos:end="85:35"><name pos:start="85:13" pos:end="85:22"><name pos:start="85:13" pos:end="85:17">avpkt</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:22">dts</name></name> <operator pos:start="85:24" pos:end="85:24">=</operator> <name pos:start="85:26" pos:end="85:35"><name pos:start="85:26" pos:end="85:30">avpkt</name><operator pos:start="85:31" pos:end="85:32">-&gt;</operator><name pos:start="85:33" pos:end="85:35">pts</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="87:11" pos:end="91:9">else <block pos:start="87:16" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:28">

            <expr_stmt pos:start="89:13" pos:end="89:28"><expr pos:start="89:13" pos:end="89:27"><name pos:start="89:13" pos:end="89:23"><name pos:start="89:13" pos:end="89:17">avpkt</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:23">size</name></name> <operator pos:start="89:25" pos:end="89:25">=</operator> <literal type="number" pos:start="89:27" pos:end="89:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="215:5">else <block pos:start="93:12" pos:end="215:5">{<block_content pos:start="101:9" pos:end="213:39">

        <comment type="block" pos:start="95:9" pos:end="99:32">/* for compatibility with encoders not supporting encode2(), we need to

           allocate a packet buffer if the user has not provided one or check

           the size otherwise */</comment>

        <decl_stmt pos:start="101:9" pos:end="101:25"><decl pos:start="101:9" pos:end="101:24"><type pos:start="101:9" pos:end="101:11"><name pos:start="101:9" pos:end="101:11">int</name></type> <name pos:start="101:13" pos:end="101:18">fs_tmp</name>   <init pos:start="101:22" pos:end="101:24">= <expr pos:start="101:24" pos:end="101:24"><literal type="number" pos:start="101:24" pos:end="101:24">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="103:9" pos:end="103:35"><decl pos:start="103:9" pos:end="103:34"><type pos:start="103:9" pos:end="103:11"><name pos:start="103:9" pos:end="103:11">int</name></type> <name pos:start="103:13" pos:end="103:20">buf_size</name> <init pos:start="103:22" pos:end="103:34">= <expr pos:start="103:24" pos:end="103:34"><name pos:start="103:24" pos:end="103:34"><name pos:start="103:24" pos:end="103:28">avpkt</name><operator pos:start="103:29" pos:end="103:30">-&gt;</operator><name pos:start="103:31" pos:end="103:34">size</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="105:9" pos:end="131:9"><if pos:start="105:9" pos:end="131:9">if <condition pos:start="105:12" pos:end="105:25">(<expr pos:start="105:13" pos:end="105:24"><operator pos:start="105:13" pos:end="105:13">!</operator><name pos:start="105:14" pos:end="105:24">user_packet</name></expr>)</condition> <block pos:start="105:27" pos:end="131:9">{<block_content pos:start="107:13" pos:end="129:13">

            <if_stmt pos:start="107:13" pos:end="129:13"><if pos:start="107:13" pos:end="115:13">if <condition pos:start="107:16" pos:end="107:75">(<expr pos:start="107:17" pos:end="107:74"><name pos:start="107:17" pos:end="107:42"><name pos:start="107:17" pos:end="107:21">avctx</name><operator pos:start="107:22" pos:end="107:23">-&gt;</operator><name pos:start="107:24" pos:end="107:28">codec</name><operator pos:start="107:29" pos:end="107:30">-&gt;</operator><name pos:start="107:31" pos:end="107:42">capabilities</name></name> <operator pos:start="107:44" pos:end="107:44">&amp;</operator> <name pos:start="107:46" pos:end="107:74">CODEC_CAP_VARIABLE_FRAME_SIZE</name></expr>)</condition> <block pos:start="107:77" pos:end="115:13">{<block_content pos:start="109:17" pos:end="113:71">

                <expr_stmt pos:start="109:17" pos:end="109:73"><expr pos:start="109:17" pos:end="109:72"><call pos:start="109:17" pos:end="109:72"><name pos:start="109:17" pos:end="109:26">av_assert0</name><argument_list pos:start="109:27" pos:end="109:72">(<argument pos:start="109:28" pos:end="109:71"><expr pos:start="109:28" pos:end="109:71"><call pos:start="109:28" pos:end="109:66"><name pos:start="109:28" pos:end="109:49">av_get_bits_per_sample</name><argument_list pos:start="109:50" pos:end="109:66">(<argument pos:start="109:51" pos:end="109:65"><expr pos:start="109:51" pos:end="109:65"><name pos:start="109:51" pos:end="109:65"><name pos:start="109:51" pos:end="109:55">avctx</name><operator pos:start="109:56" pos:end="109:57">-&gt;</operator><name pos:start="109:58" pos:end="109:65">codec_id</name></name></expr></argument>)</argument_list></call> <operator pos:start="109:68" pos:end="109:69">!=</operator> <literal type="number" pos:start="109:71" pos:end="109:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="113:71"><expr pos:start="111:17" pos:end="113:70"><name pos:start="111:17" pos:end="111:24">buf_size</name> <operator pos:start="111:26" pos:end="111:26">=</operator> <name pos:start="111:28" pos:end="111:37">nb_samples</name> <operator pos:start="111:39" pos:end="111:39">*</operator> <name pos:start="111:41" pos:end="111:55"><name pos:start="111:41" pos:end="111:45">avctx</name><operator pos:start="111:46" pos:end="111:47">-&gt;</operator><name pos:start="111:48" pos:end="111:55">channels</name></name> <operator pos:start="111:57" pos:end="111:57">*</operator>

                           <call pos:start="113:28" pos:end="113:66"><name pos:start="113:28" pos:end="113:49">av_get_bits_per_sample</name><argument_list pos:start="113:50" pos:end="113:66">(<argument pos:start="113:51" pos:end="113:65"><expr pos:start="113:51" pos:end="113:65"><name pos:start="113:51" pos:end="113:65"><name pos:start="113:51" pos:end="113:55">avctx</name><operator pos:start="113:56" pos:end="113:57">-&gt;</operator><name pos:start="113:58" pos:end="113:65">codec_id</name></name></expr></argument>)</argument_list></call> <operator pos:start="113:68" pos:end="113:68">/</operator> <literal type="number" pos:start="113:70" pos:end="113:70">8</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="115:15" pos:end="129:13">else <block pos:start="115:20" pos:end="129:13">{<block_content pos:start="123:17" pos:end="127:47">

                <comment type="block" pos:start="117:17" pos:end="121:41">/* this is a guess as to the required size.

                   if an encoder needs more than this, it should probably

                   implement encode2() */</comment>

                <expr_stmt pos:start="123:17" pos:end="125:70"><expr pos:start="123:17" pos:end="125:69"><name pos:start="123:17" pos:end="123:24">buf_size</name> <operator pos:start="123:26" pos:end="123:26">=</operator> <literal type="number" pos:start="123:28" pos:end="123:28">2</literal> <operator pos:start="123:30" pos:end="123:30">*</operator> <name pos:start="123:32" pos:end="123:48"><name pos:start="123:32" pos:end="123:36">avctx</name><operator pos:start="123:37" pos:end="123:38">-&gt;</operator><name pos:start="123:39" pos:end="123:48">frame_size</name></name> <operator pos:start="123:50" pos:end="123:50">*</operator> <name pos:start="123:52" pos:end="123:66"><name pos:start="123:52" pos:end="123:56">avctx</name><operator pos:start="123:57" pos:end="123:58">-&gt;</operator><name pos:start="123:59" pos:end="123:66">channels</name></name> <operator pos:start="123:68" pos:end="123:68">*</operator>

                           <call pos:start="125:28" pos:end="125:69"><name pos:start="125:28" pos:end="125:50">av_get_bytes_per_sample</name><argument_list pos:start="125:51" pos:end="125:69">(<argument pos:start="125:52" pos:end="125:68"><expr pos:start="125:52" pos:end="125:68"><name pos:start="125:52" pos:end="125:68"><name pos:start="125:52" pos:end="125:56">avctx</name><operator pos:start="125:57" pos:end="125:58">-&gt;</operator><name pos:start="125:59" pos:end="125:68">sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:47"><expr pos:start="127:17" pos:end="127:46"><name pos:start="127:17" pos:end="127:24">buf_size</name> <operator pos:start="127:26" pos:end="127:27">+=</operator> <name pos:start="127:29" pos:end="127:46">FF_MIN_BUFFER_SIZE</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="133:9" pos:end="135:23"><if pos:start="133:9" pos:end="135:23">if <condition pos:start="133:12" pos:end="133:53">(<expr pos:start="133:13" pos:end="133:52"><operator pos:start="133:13" pos:end="133:13">(</operator><name pos:start="133:14" pos:end="133:16">ret</name> <operator pos:start="133:18" pos:end="133:18">=</operator> <call pos:start="133:20" pos:end="133:51"><name pos:start="133:20" pos:end="133:34">ff_alloc_packet</name><argument_list pos:start="133:35" pos:end="133:51">(<argument pos:start="133:36" pos:end="133:40"><expr pos:start="133:36" pos:end="133:40"><name pos:start="133:36" pos:end="133:40">avpkt</name></expr></argument>, <argument pos:start="133:43" pos:end="133:50"><expr pos:start="133:43" pos:end="133:50"><name pos:start="133:43" pos:end="133:50">buf_size</name></expr></argument>)</argument_list></call><operator pos:start="133:52" pos:end="133:52">)</operator></expr>)</condition><block type="pseudo" pos:start="135:13" pos:end="135:23"><block_content pos:start="135:13" pos:end="135:23">

            <return pos:start="135:13" pos:end="135:23">return <expr pos:start="135:20" pos:end="135:22"><name pos:start="135:20" pos:end="135:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="139:9" pos:end="147:54">/* Encoders using AVCodec.encode() that support

           CODEC_CAP_SMALL_LAST_FRAME require avctx-&gt;frame_size to be set to

           the smaller size when encoding the last frame.

           This code can be removed once all encoders supporting

           CODEC_CAP_SMALL_LAST_FRAME use encode2() */</comment>

        <if_stmt pos:start="149:9" pos:end="157:9"><if pos:start="149:9" pos:end="157:9">if <condition pos:start="149:12" pos:end="151:43">(<expr pos:start="149:13" pos:end="151:42"><operator pos:start="149:13" pos:end="149:13">(</operator><name pos:start="149:14" pos:end="149:39"><name pos:start="149:14" pos:end="149:18">avctx</name><operator pos:start="149:19" pos:end="149:20">-&gt;</operator><name pos:start="149:21" pos:end="149:25">codec</name><operator pos:start="149:26" pos:end="149:27">-&gt;</operator><name pos:start="149:28" pos:end="149:39">capabilities</name></name> <operator pos:start="149:41" pos:end="149:41">&amp;</operator> <name pos:start="149:43" pos:end="149:68">CODEC_CAP_SMALL_LAST_FRAME</name><operator pos:start="149:69" pos:end="149:69">)</operator> <operator pos:start="149:71" pos:end="149:72">&amp;&amp;</operator>

            <name pos:start="151:13" pos:end="151:22">nb_samples</name> <operator pos:start="151:24" pos:end="151:24">&lt;</operator> <name pos:start="151:26" pos:end="151:42"><name pos:start="151:26" pos:end="151:30">avctx</name><operator pos:start="151:31" pos:end="151:32">-&gt;</operator><name pos:start="151:33" pos:end="151:42">frame_size</name></name></expr>)</condition> <block pos:start="151:45" pos:end="157:9">{<block_content pos:start="153:13" pos:end="155:43">

            <expr_stmt pos:start="153:13" pos:end="153:39"><expr pos:start="153:13" pos:end="153:38"><name pos:start="153:13" pos:end="153:18">fs_tmp</name> <operator pos:start="153:20" pos:end="153:20">=</operator> <name pos:start="153:22" pos:end="153:38"><name pos:start="153:22" pos:end="153:26">avctx</name><operator pos:start="153:27" pos:end="153:28">-&gt;</operator><name pos:start="153:29" pos:end="153:38">frame_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:43"><expr pos:start="155:13" pos:end="155:42"><name pos:start="155:13" pos:end="155:29"><name pos:start="155:13" pos:end="155:17">avctx</name><operator pos:start="155:18" pos:end="155:19">-&gt;</operator><name pos:start="155:20" pos:end="155:29">frame_size</name></name> <operator pos:start="155:31" pos:end="155:31">=</operator> <name pos:start="155:33" pos:end="155:42">nb_samples</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="161:9" pos:end="161:30">/* encode the frame */</comment>

        <expr_stmt pos:start="163:9" pos:end="165:66"><expr pos:start="163:9" pos:end="165:65"><name pos:start="163:9" pos:end="163:11">ret</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <call pos:start="163:15" pos:end="165:65"><name pos:start="163:15" pos:end="163:34"><name pos:start="163:15" pos:end="163:19">avctx</name><operator pos:start="163:20" pos:end="163:21">-&gt;</operator><name pos:start="163:22" pos:end="163:26">codec</name><operator pos:start="163:27" pos:end="163:28">-&gt;</operator><name pos:start="163:29" pos:end="163:34">encode</name></name><argument_list pos:start="163:35" pos:end="165:65">(<argument pos:start="163:36" pos:end="163:40"><expr pos:start="163:36" pos:end="163:40"><name pos:start="163:36" pos:end="163:40">avctx</name></expr></argument>, <argument pos:start="163:43" pos:end="163:53"><expr pos:start="163:43" pos:end="163:53"><name pos:start="163:43" pos:end="163:53"><name pos:start="163:43" pos:end="163:47">avpkt</name><operator pos:start="163:48" pos:end="163:49">-&gt;</operator><name pos:start="163:50" pos:end="163:53">data</name></name></expr></argument>, <argument pos:start="163:56" pos:end="163:66"><expr pos:start="163:56" pos:end="163:66"><name pos:start="163:56" pos:end="163:66"><name pos:start="163:56" pos:end="163:60">avpkt</name><operator pos:start="163:61" pos:end="163:62">-&gt;</operator><name pos:start="163:63" pos:end="163:66">size</name></name></expr></argument>,

                                   <argument pos:start="165:36" pos:end="165:64"><expr pos:start="165:36" pos:end="165:64"><ternary pos:start="165:36" pos:end="165:64"><condition pos:start="165:36" pos:end="165:42"><expr pos:start="165:36" pos:end="165:40"><name pos:start="165:36" pos:end="165:40">frame</name></expr> ?</condition><then pos:start="165:44" pos:end="165:57"> <expr pos:start="165:44" pos:end="165:57"><name pos:start="165:44" pos:end="165:57"><name pos:start="165:44" pos:end="165:48">frame</name><operator pos:start="165:49" pos:end="165:50">-&gt;</operator><name pos:start="165:51" pos:end="165:54">data</name><index pos:start="165:55" pos:end="165:57">[<expr pos:start="165:56" pos:end="165:56"><literal type="number" pos:start="165:56" pos:end="165:56">0</literal></expr>]</index></name></expr> </then><else pos:start="165:59" pos:end="165:64">: <expr pos:start="165:61" pos:end="165:64"><name pos:start="165:61" pos:end="165:64">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="167:9" pos:end="207:9"><if pos:start="167:9" pos:end="207:9">if <condition pos:start="167:12" pos:end="167:21">(<expr pos:start="167:13" pos:end="167:20"><name pos:start="167:13" pos:end="167:15">ret</name> <operator pos:start="167:17" pos:end="167:18">&gt;=</operator> <literal type="number" pos:start="167:20" pos:end="167:20">0</literal></expr>)</condition> <block pos:start="167:23" pos:end="207:9">{<block_content pos:start="169:13" pos:end="205:20">

            <if_stmt pos:start="169:13" pos:end="199:13"><if pos:start="169:13" pos:end="179:13">if <condition pos:start="169:16" pos:end="169:21">(<expr pos:start="169:17" pos:end="169:20"><operator pos:start="169:17" pos:end="169:17">!</operator><name pos:start="169:18" pos:end="169:20">ret</name></expr>)</condition> <block pos:start="169:23" pos:end="179:13">{<block_content pos:start="175:17" pos:end="177:43">

                <comment type="block" pos:start="171:17" pos:end="173:29">/* no output. if the packet data was allocated by libavcodec,

                   free it */</comment>

                <if_stmt pos:start="175:17" pos:end="177:43"><if pos:start="175:17" pos:end="177:43">if <condition pos:start="175:20" pos:end="175:33">(<expr pos:start="175:21" pos:end="175:32"><operator pos:start="175:21" pos:end="175:21">!</operator><name pos:start="175:22" pos:end="175:32">user_packet</name></expr>)</condition><block type="pseudo" pos:start="177:21" pos:end="177:43"><block_content pos:start="177:21" pos:end="177:43">

                    <expr_stmt pos:start="177:21" pos:end="177:43"><expr pos:start="177:21" pos:end="177:42"><call pos:start="177:21" pos:end="177:42"><name pos:start="177:21" pos:end="177:28">av_freep</name><argument_list pos:start="177:29" pos:end="177:42">(<argument pos:start="177:30" pos:end="177:41"><expr pos:start="177:30" pos:end="177:41"><operator pos:start="177:30" pos:end="177:30">&amp;</operator><name pos:start="177:31" pos:end="177:41"><name pos:start="177:31" pos:end="177:35">avpkt</name><operator pos:start="177:36" pos:end="177:37">-&gt;</operator><name pos:start="177:38" pos:end="177:41">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="179:15" pos:end="199:13">else <block pos:start="179:20" pos:end="199:13">{<block_content pos:start="181:17" pos:end="197:17">

                <if_stmt pos:start="181:17" pos:end="183:70"><if pos:start="181:17" pos:end="183:70">if <condition pos:start="181:20" pos:end="181:39">(<expr pos:start="181:21" pos:end="181:38"><name pos:start="181:21" pos:end="181:38"><name pos:start="181:21" pos:end="181:25">avctx</name><operator pos:start="181:26" pos:end="181:27">-&gt;</operator><name pos:start="181:28" pos:end="181:38">coded_frame</name></name></expr>)</condition><block type="pseudo" pos:start="183:21" pos:end="183:70"><block_content pos:start="183:21" pos:end="183:70">

                    <expr_stmt pos:start="183:21" pos:end="183:70"><expr pos:start="183:21" pos:end="183:69"><name pos:start="183:21" pos:end="183:30"><name pos:start="183:21" pos:end="183:25">avpkt</name><operator pos:start="183:26" pos:end="183:27">-&gt;</operator><name pos:start="183:28" pos:end="183:30">pts</name></name> <operator pos:start="183:32" pos:end="183:32">=</operator> <name pos:start="183:34" pos:end="183:43"><name pos:start="183:34" pos:end="183:38">avpkt</name><operator pos:start="183:39" pos:end="183:40">-&gt;</operator><name pos:start="183:41" pos:end="183:43">dts</name></name> <operator pos:start="183:45" pos:end="183:45">=</operator> <name pos:start="183:47" pos:end="183:69"><name pos:start="183:47" pos:end="183:51">avctx</name><operator pos:start="183:52" pos:end="183:53">-&gt;</operator><name pos:start="183:54" pos:end="183:64">coded_frame</name><operator pos:start="183:65" pos:end="183:66">-&gt;</operator><name pos:start="183:67" pos:end="183:69">pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="block" pos:start="185:17" pos:end="189:31">/* Set duration for final small packet. This can be removed

                   once all encoders supporting CODEC_CAP_SMALL_LAST_FRAME use

                   encode2() */</comment>

                <if_stmt pos:start="191:17" pos:end="197:17"><if pos:start="191:17" pos:end="197:17">if <condition pos:start="191:20" pos:end="191:27">(<expr pos:start="191:21" pos:end="191:26"><name pos:start="191:21" pos:end="191:26">fs_tmp</name></expr>)</condition> <block pos:start="191:29" pos:end="197:17">{<block_content pos:start="193:21" pos:end="195:81">

                    <expr_stmt pos:start="193:21" pos:end="195:81"><expr pos:start="193:21" pos:end="195:80"><name pos:start="193:21" pos:end="193:35"><name pos:start="193:21" pos:end="193:25">avpkt</name><operator pos:start="193:26" pos:end="193:27">-&gt;</operator><name pos:start="193:28" pos:end="193:35">duration</name></name> <operator pos:start="193:37" pos:end="193:37">=</operator> <call pos:start="193:39" pos:end="195:80"><name pos:start="193:39" pos:end="193:61">ff_samples_to_time_base</name><argument_list pos:start="193:62" pos:end="195:80">(<argument pos:start="193:63" pos:end="193:67"><expr pos:start="193:63" pos:end="193:67"><name pos:start="193:63" pos:end="193:67">avctx</name></expr></argument>,

                                                              <argument pos:start="195:63" pos:end="195:79"><expr pos:start="195:63" pos:end="195:79"><name pos:start="195:63" pos:end="195:79"><name pos:start="195:63" pos:end="195:67">avctx</name><operator pos:start="195:68" pos:end="195:69">-&gt;</operator><name pos:start="195:70" pos:end="195:79">frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:30"><expr pos:start="201:13" pos:end="201:29"><name pos:start="201:13" pos:end="201:23"><name pos:start="201:13" pos:end="201:17">avpkt</name><operator pos:start="201:18" pos:end="201:19">-&gt;</operator><name pos:start="201:20" pos:end="201:23">size</name></name> <operator pos:start="201:25" pos:end="201:25">=</operator> <name pos:start="201:27" pos:end="201:29">ret</name></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:40"><expr pos:start="203:13" pos:end="203:39"><operator pos:start="203:13" pos:end="203:13">*</operator><name pos:start="203:14" pos:end="203:27">got_packet_ptr</name> <operator pos:start="203:29" pos:end="203:29">=</operator> <operator pos:start="203:31" pos:end="203:31">(</operator><name pos:start="203:32" pos:end="203:34">ret</name> <operator pos:start="203:36" pos:end="203:36">&gt;</operator> <literal type="number" pos:start="203:38" pos:end="203:38">0</literal><operator pos:start="203:39" pos:end="203:39">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:20"><expr pos:start="205:13" pos:end="205:19"><name pos:start="205:13" pos:end="205:15">ret</name> <operator pos:start="205:17" pos:end="205:17">=</operator> <literal type="number" pos:start="205:19" pos:end="205:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="211:9" pos:end="213:39"><if pos:start="211:9" pos:end="213:39">if <condition pos:start="211:12" pos:end="211:19">(<expr pos:start="211:13" pos:end="211:18"><name pos:start="211:13" pos:end="211:18">fs_tmp</name></expr>)</condition><block type="pseudo" pos:start="213:13" pos:end="213:39"><block_content pos:start="213:13" pos:end="213:39">

            <expr_stmt pos:start="213:13" pos:end="213:39"><expr pos:start="213:13" pos:end="213:38"><name pos:start="213:13" pos:end="213:29"><name pos:start="213:13" pos:end="213:17">avctx</name><operator pos:start="213:18" pos:end="213:19">-&gt;</operator><name pos:start="213:20" pos:end="213:29">frame_size</name></name> <operator pos:start="213:31" pos:end="213:31">=</operator> <name pos:start="213:33" pos:end="213:38">fs_tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="217:5" pos:end="233:5"><if pos:start="217:5" pos:end="233:5">if <condition pos:start="217:8" pos:end="217:13">(<expr pos:start="217:9" pos:end="217:12"><operator pos:start="217:9" pos:end="217:9">!</operator><name pos:start="217:10" pos:end="217:12">ret</name></expr>)</condition> <block pos:start="217:15" pos:end="233:5">{<block_content pos:start="219:9" pos:end="231:30">

        <if_stmt pos:start="219:9" pos:end="227:9"><if pos:start="219:9" pos:end="227:9">if <condition pos:start="219:12" pos:end="219:40">(<expr pos:start="219:13" pos:end="219:39"><operator pos:start="219:13" pos:end="219:13">!</operator><name pos:start="219:14" pos:end="219:24">user_packet</name> <operator pos:start="219:26" pos:end="219:27">&amp;&amp;</operator> <name pos:start="219:29" pos:end="219:39"><name pos:start="219:29" pos:end="219:33">avpkt</name><operator pos:start="219:34" pos:end="219:35">-&gt;</operator><name pos:start="219:36" pos:end="219:39">data</name></name></expr>)</condition> <block pos:start="219:42" pos:end="227:9">{<block_content pos:start="221:13" pos:end="225:39">

            <decl_stmt pos:start="221:13" pos:end="221:69"><decl pos:start="221:13" pos:end="221:68"><type pos:start="221:13" pos:end="221:21"><name pos:start="221:13" pos:end="221:19">uint8_t</name> <modifier pos:start="221:21" pos:end="221:21">*</modifier></type><name pos:start="221:22" pos:end="221:29">new_data</name> <init pos:start="221:31" pos:end="221:68">= <expr pos:start="221:33" pos:end="221:68"><call pos:start="221:33" pos:end="221:68"><name pos:start="221:33" pos:end="221:42">av_realloc</name><argument_list pos:start="221:43" pos:end="221:68">(<argument pos:start="221:44" pos:end="221:54"><expr pos:start="221:44" pos:end="221:54"><name pos:start="221:44" pos:end="221:54"><name pos:start="221:44" pos:end="221:48">avpkt</name><operator pos:start="221:49" pos:end="221:50">-&gt;</operator><name pos:start="221:51" pos:end="221:54">data</name></name></expr></argument>, <argument pos:start="221:57" pos:end="221:67"><expr pos:start="221:57" pos:end="221:67"><name pos:start="221:57" pos:end="221:67"><name pos:start="221:57" pos:end="221:61">avpkt</name><operator pos:start="221:62" pos:end="221:63">-&gt;</operator><name pos:start="221:64" pos:end="221:67">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="223:13" pos:end="225:39"><if pos:start="223:13" pos:end="225:39">if <condition pos:start="223:16" pos:end="223:25">(<expr pos:start="223:17" pos:end="223:24"><name pos:start="223:17" pos:end="223:24">new_data</name></expr>)</condition><block type="pseudo" pos:start="225:17" pos:end="225:39"><block_content pos:start="225:17" pos:end="225:39">

                <expr_stmt pos:start="225:17" pos:end="225:39"><expr pos:start="225:17" pos:end="225:38"><name pos:start="225:17" pos:end="225:27"><name pos:start="225:17" pos:end="225:21">avpkt</name><operator pos:start="225:22" pos:end="225:23">-&gt;</operator><name pos:start="225:24" pos:end="225:27">data</name></name> <operator pos:start="225:29" pos:end="225:29">=</operator> <name pos:start="225:31" pos:end="225:38">new_data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="231:9" pos:end="231:30"><expr pos:start="231:9" pos:end="231:29"><name pos:start="231:9" pos:end="231:27"><name pos:start="231:9" pos:end="231:13">avctx</name><operator pos:start="231:14" pos:end="231:15">-&gt;</operator><name pos:start="231:16" pos:end="231:27">frame_number</name></name><operator pos:start="231:28" pos:end="231:29">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="237:5" pos:end="239:30"><if pos:start="237:5" pos:end="239:30">if <condition pos:start="237:8" pos:end="237:36">(<expr pos:start="237:9" pos:end="237:35"><name pos:start="237:9" pos:end="237:11">ret</name> <operator pos:start="237:13" pos:end="237:13">&lt;</operator> <literal type="number" pos:start="237:15" pos:end="237:15">0</literal> <operator pos:start="237:17" pos:end="237:18">||</operator> <operator pos:start="237:20" pos:end="237:20">!</operator><operator pos:start="237:21" pos:end="237:21">*</operator><name pos:start="237:22" pos:end="237:35">got_packet_ptr</name></expr>)</condition><block type="pseudo" pos:start="239:9" pos:end="239:30"><block_content pos:start="239:9" pos:end="239:30">

        <expr_stmt pos:start="239:9" pos:end="239:30"><expr pos:start="239:9" pos:end="239:29"><call pos:start="239:9" pos:end="239:29"><name pos:start="239:9" pos:end="239:22">av_free_packet</name><argument_list pos:start="239:23" pos:end="239:29">(<argument pos:start="239:24" pos:end="239:28"><expr pos:start="239:24" pos:end="239:28"><name pos:start="239:24" pos:end="239:28">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="243:5" pos:end="247:39">/* NOTE: if we add any audio encoders which output non-keyframe packets,

             this needs to be moved to the encoders, but for now we can do it

             here to simplify things */</comment>

    <expr_stmt pos:start="249:5" pos:end="249:36"><expr pos:start="249:5" pos:end="249:35"><name pos:start="249:5" pos:end="249:16"><name pos:start="249:5" pos:end="249:9">avpkt</name><operator pos:start="249:10" pos:end="249:11">-&gt;</operator><name pos:start="249:12" pos:end="249:16">flags</name></name> <operator pos:start="249:18" pos:end="249:19">|=</operator> <name pos:start="249:21" pos:end="249:35">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>



    <return pos:start="253:5" pos:end="253:15">return <expr pos:start="253:12" pos:end="253:14"><name pos:start="253:12" pos:end="253:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
