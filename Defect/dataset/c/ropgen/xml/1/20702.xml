<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20702.c" pos:tabs="8"><function pos:start="1:1" pos:end="417:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">abi_long</name></type> <name pos:start="1:10" pos:end="1:20">target_mmap</name><parameter_list pos:start="1:21" pos:end="3:57">(<parameter pos:start="1:22" pos:end="1:36"><decl pos:start="1:22" pos:end="1:36"><type pos:start="1:22" pos:end="1:36"><name pos:start="1:22" pos:end="1:30">abi_ulong</name></type> <name pos:start="1:32" pos:end="1:36">start</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:47">abi_ulong</name></type> <name pos:start="1:49" pos:end="1:51">len</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:61"><decl pos:start="1:54" pos:end="1:61"><type pos:start="1:54" pos:end="1:61"><name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:61">prot</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:30"><decl pos:start="3:22" pos:end="3:30"><type pos:start="3:22" pos:end="3:30"><name pos:start="3:22" pos:end="3:24">int</name></type> <name pos:start="3:26" pos:end="3:30">flags</name></decl></parameter>, <parameter pos:start="3:33" pos:end="3:38"><decl pos:start="3:33" pos:end="3:38"><type pos:start="3:33" pos:end="3:38"><name pos:start="3:33" pos:end="3:35">int</name></type> <name pos:start="3:37" pos:end="3:38">fd</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:56"><decl pos:start="3:41" pos:end="3:56"><type pos:start="3:41" pos:end="3:56"><name pos:start="3:41" pos:end="3:49">abi_ulong</name></type> <name pos:start="3:51" pos:end="3:56">offset</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="417:1">{<block_content pos:start="7:5" pos:end="415:14">

    <decl_stmt pos:start="7:5" pos:end="7:77"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">abi_ulong</name></type> <name pos:start="7:15" pos:end="7:17">ret</name></decl>, <decl pos:start="7:20" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:13"/><name pos:start="7:20" pos:end="7:22">end</name></decl>, <decl pos:start="7:25" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:13"/><name pos:start="7:25" pos:end="7:34">real_start</name></decl>, <decl pos:start="7:37" pos:end="7:44"><type ref="prev" pos:start="7:5" pos:end="7:13"/><name pos:start="7:37" pos:end="7:44">real_end</name></decl>, <decl pos:start="7:47" pos:end="7:53"><type ref="prev" pos:start="7:5" pos:end="7:13"/><name pos:start="7:47" pos:end="7:53">retaddr</name></decl>, <decl pos:start="7:56" pos:end="7:66"><type ref="prev" pos:start="7:5" pos:end="7:13"/><name pos:start="7:56" pos:end="7:66">host_offset</name></decl>, <decl pos:start="7:69" pos:end="7:76"><type ref="prev" pos:start="7:5" pos:end="7:13"/><name pos:start="7:69" pos:end="7:76">host_len</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="14:0"><expr pos:start="11:5" pos:end="11:15"><call pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">mmap_lock</name><argument_list pos:start="11:14" pos:end="11:15">()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="13:1" pos:end="13:17">#<cpp:directive pos:start="13:2" pos:end="13:6">ifdef</cpp:directive> <name pos:start="13:8" pos:end="13:17">DEBUG_MMAP</name></cpp:ifdef>

    <block pos:start="15:5" pos:end="64:0">{<block_content pos:start="17:9" pos:end="59:67">

        <expr_stmt pos:start="17:9" pos:end="27:45"><expr pos:start="17:9" pos:end="27:44"><call pos:start="17:9" pos:end="27:44"><name pos:start="17:9" pos:end="17:14">printf</name><argument_list pos:start="17:15" pos:end="27:44">(<argument pos:start="17:16" pos:end="19:64"><expr pos:start="17:16" pos:end="19:64"><literal type="string" pos:start="17:16" pos:end="17:31">"mmap: start=0x"</literal> <name pos:start="17:33" pos:end="17:49">TARGET_ABI_FMT_lx</name>

               <literal type="string" pos:start="19:16" pos:end="19:24">" len=0x"</literal> <name pos:start="19:26" pos:end="19:42">TARGET_ABI_FMT_lx</name> <literal type="string" pos:start="19:44" pos:end="19:64">" prot=%c%c%c flags="</literal></expr></argument>,

               <argument pos:start="21:16" pos:end="21:20"><expr pos:start="21:16" pos:end="21:20"><name pos:start="21:16" pos:end="21:20">start</name></expr></argument>, <argument pos:start="21:23" pos:end="21:25"><expr pos:start="21:23" pos:end="21:25"><name pos:start="21:23" pos:end="21:25">len</name></expr></argument>,

               <argument pos:start="23:16" pos:end="23:43"><expr pos:start="23:16" pos:end="23:43"><ternary pos:start="23:16" pos:end="23:43"><condition pos:start="23:16" pos:end="23:33"><expr pos:start="23:16" pos:end="23:31"><name pos:start="23:16" pos:end="23:19">prot</name> <operator pos:start="23:21" pos:end="23:21">&amp;</operator> <name pos:start="23:23" pos:end="23:31">PROT_READ</name></expr> ?</condition><then pos:start="23:35" pos:end="23:37"> <expr pos:start="23:35" pos:end="23:37"><literal type="char" pos:start="23:35" pos:end="23:37">'r'</literal></expr> </then><else pos:start="23:39" pos:end="23:43">: <expr pos:start="23:41" pos:end="23:43"><literal type="char" pos:start="23:41" pos:end="23:43">'-'</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="25:16" pos:end="25:44"><expr pos:start="25:16" pos:end="25:44"><ternary pos:start="25:16" pos:end="25:44"><condition pos:start="25:16" pos:end="25:34"><expr pos:start="25:16" pos:end="25:32"><name pos:start="25:16" pos:end="25:19">prot</name> <operator pos:start="25:21" pos:end="25:21">&amp;</operator> <name pos:start="25:23" pos:end="25:32">PROT_WRITE</name></expr> ?</condition><then pos:start="25:36" pos:end="25:38"> <expr pos:start="25:36" pos:end="25:38"><literal type="char" pos:start="25:36" pos:end="25:38">'w'</literal></expr> </then><else pos:start="25:40" pos:end="25:44">: <expr pos:start="25:42" pos:end="25:44"><literal type="char" pos:start="25:42" pos:end="25:44">'-'</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="27:16" pos:end="27:43"><expr pos:start="27:16" pos:end="27:43"><ternary pos:start="27:16" pos:end="27:43"><condition pos:start="27:16" pos:end="27:33"><expr pos:start="27:16" pos:end="27:31"><name pos:start="27:16" pos:end="27:19">prot</name> <operator pos:start="27:21" pos:end="27:21">&amp;</operator> <name pos:start="27:23" pos:end="27:31">PROT_EXEC</name></expr> ?</condition><then pos:start="27:35" pos:end="27:37"> <expr pos:start="27:35" pos:end="27:37"><literal type="char" pos:start="27:35" pos:end="27:37">'x'</literal></expr> </then><else pos:start="27:39" pos:end="27:43">: <expr pos:start="27:41" pos:end="27:43"><literal type="char" pos:start="27:41" pos:end="27:43">'-'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="31:33"><if pos:start="29:9" pos:end="31:33">if <condition pos:start="29:12" pos:end="29:30">(<expr pos:start="29:13" pos:end="29:29"><name pos:start="29:13" pos:end="29:17">flags</name> <operator pos:start="29:19" pos:end="29:19">&amp;</operator> <name pos:start="29:21" pos:end="29:29">MAP_FIXED</name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:33"><block_content pos:start="31:13" pos:end="31:33">

            <expr_stmt pos:start="31:13" pos:end="31:33"><expr pos:start="31:13" pos:end="31:32"><call pos:start="31:13" pos:end="31:32"><name pos:start="31:13" pos:end="31:18">printf</name><argument_list pos:start="31:19" pos:end="31:32">(<argument pos:start="31:20" pos:end="31:31"><expr pos:start="31:20" pos:end="31:31"><literal type="string" pos:start="31:20" pos:end="31:31">"MAP_FIXED "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="33:9" pos:end="35:32"><if pos:start="33:9" pos:end="35:32">if <condition pos:start="33:12" pos:end="33:34">(<expr pos:start="33:13" pos:end="33:33"><name pos:start="33:13" pos:end="33:17">flags</name> <operator pos:start="33:19" pos:end="33:19">&amp;</operator> <name pos:start="33:21" pos:end="33:33">MAP_ANONYMOUS</name></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:32"><block_content pos:start="35:13" pos:end="35:32">

            <expr_stmt pos:start="35:13" pos:end="35:32"><expr pos:start="35:13" pos:end="35:31"><call pos:start="35:13" pos:end="35:31"><name pos:start="35:13" pos:end="35:18">printf</name><argument_list pos:start="35:19" pos:end="35:31">(<argument pos:start="35:20" pos:end="35:30"><expr pos:start="35:20" pos:end="35:30"><literal type="string" pos:start="35:20" pos:end="35:30">"MAP_ANON "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <switch pos:start="37:9" pos:end="57:9">switch<condition pos:start="37:15" pos:end="37:32">(<expr pos:start="37:16" pos:end="37:31"><name pos:start="37:16" pos:end="37:20">flags</name> <operator pos:start="37:22" pos:end="37:22">&amp;</operator> <name pos:start="37:24" pos:end="37:31">MAP_TYPE</name></expr>)</condition> <block pos:start="37:34" pos:end="57:9">{<block_content pos:start="39:9" pos:end="55:18">

        <case pos:start="39:9" pos:end="39:25">case <expr pos:start="39:14" pos:end="39:24"><name pos:start="39:14" pos:end="39:24">MAP_PRIVATE</name></expr>:</case>

            <expr_stmt pos:start="41:13" pos:end="41:35"><expr pos:start="41:13" pos:end="41:34"><call pos:start="41:13" pos:end="41:34"><name pos:start="41:13" pos:end="41:18">printf</name><argument_list pos:start="41:19" pos:end="41:34">(<argument pos:start="41:20" pos:end="41:33"><expr pos:start="41:20" pos:end="41:33"><literal type="string" pos:start="41:20" pos:end="41:33">"MAP_PRIVATE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="43:13" pos:end="43:18">break;</break>

        <case pos:start="45:9" pos:end="45:24">case <expr pos:start="45:14" pos:end="45:23"><name pos:start="45:14" pos:end="45:23">MAP_SHARED</name></expr>:</case>

            <expr_stmt pos:start="47:13" pos:end="47:34"><expr pos:start="47:13" pos:end="47:33"><call pos:start="47:13" pos:end="47:33"><name pos:start="47:13" pos:end="47:18">printf</name><argument_list pos:start="47:19" pos:end="47:33">(<argument pos:start="47:20" pos:end="47:32"><expr pos:start="47:20" pos:end="47:32"><literal type="string" pos:start="47:20" pos:end="47:32">"MAP_SHARED "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>

        <default pos:start="51:9" pos:end="51:16">default:</default>

            <expr_stmt pos:start="53:13" pos:end="53:57"><expr pos:start="53:13" pos:end="53:56"><call pos:start="53:13" pos:end="53:56"><name pos:start="53:13" pos:end="53:18">printf</name><argument_list pos:start="53:19" pos:end="53:56">(<argument pos:start="53:20" pos:end="53:37"><expr pos:start="53:20" pos:end="53:37"><literal type="string" pos:start="53:20" pos:end="53:37">"[MAP_TYPE=0x%x] "</literal></expr></argument>, <argument pos:start="53:40" pos:end="53:55"><expr pos:start="53:40" pos:end="53:55"><name pos:start="53:40" pos:end="53:44">flags</name> <operator pos:start="53:46" pos:end="53:46">&amp;</operator> <name pos:start="53:48" pos:end="53:55">MAP_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="59:9" pos:end="59:67"><expr pos:start="59:9" pos:end="59:66"><call pos:start="59:9" pos:end="59:66"><name pos:start="59:9" pos:end="59:14">printf</name><argument_list pos:start="59:15" pos:end="59:66">(<argument pos:start="59:16" pos:end="59:53"><expr pos:start="59:16" pos:end="59:53"><literal type="string" pos:start="59:16" pos:end="59:30">"fd=%d offset="</literal> <name pos:start="59:32" pos:end="59:48">TARGET_ABI_FMT_lx</name> <literal type="string" pos:start="59:50" pos:end="59:53">"\n"</literal></expr></argument>, <argument pos:start="59:56" pos:end="59:57"><expr pos:start="59:56" pos:end="59:57"><name pos:start="59:56" pos:end="59:57">fd</name></expr></argument>, <argument pos:start="59:60" pos:end="59:65"><expr pos:start="59:60" pos:end="59:65"><name pos:start="59:60" pos:end="59:65">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:35">(<expr pos:start="67:9" pos:end="67:34"><name pos:start="67:9" pos:end="67:14">offset</name> <operator pos:start="67:16" pos:end="67:16">&amp;</operator> <operator pos:start="67:18" pos:end="67:18">~</operator><name pos:start="67:19" pos:end="67:34">TARGET_PAGE_MASK</name></expr>)</condition> <block pos:start="67:37" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:18">

        <expr_stmt pos:start="69:9" pos:end="69:23"><expr pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:13">errno</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <name pos:start="69:17" pos:end="69:22">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="71:9" pos:end="71:18">goto <name pos:start="71:14" pos:end="71:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:33"><expr pos:start="77:5" pos:end="77:32"><name pos:start="77:5" pos:end="77:7">len</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <call pos:start="77:11" pos:end="77:32"><name pos:start="77:11" pos:end="77:27">TARGET_PAGE_ALIGN</name><argument_list pos:start="77:28" pos:end="77:32">(<argument pos:start="77:29" pos:end="77:31"><expr pos:start="77:29" pos:end="77:31"><name pos:start="77:29" pos:end="77:31">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="81:21"><if pos:start="79:5" pos:end="81:21">if <condition pos:start="79:8" pos:end="79:17">(<expr pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:11">len</name> <operator pos:start="79:13" pos:end="79:14">==</operator> <literal type="number" pos:start="79:16" pos:end="79:16">0</literal></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:21"><block_content pos:start="81:9" pos:end="81:21">

        <goto pos:start="81:9" pos:end="81:21">goto <name pos:start="81:14" pos:end="81:20">the_end</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:45"><expr pos:start="83:5" pos:end="83:44"><name pos:start="83:5" pos:end="83:14">real_start</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <name pos:start="83:18" pos:end="83:22">start</name> <operator pos:start="83:24" pos:end="83:24">&amp;</operator> <name pos:start="83:26" pos:end="83:44">qemu_host_page_mask</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:47"><expr pos:start="85:5" pos:end="85:46"><name pos:start="85:5" pos:end="85:15">host_offset</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <name pos:start="85:19" pos:end="85:24">offset</name> <operator pos:start="85:26" pos:end="85:26">&amp;</operator> <name pos:start="85:28" pos:end="85:46">qemu_host_page_mask</name></expr>;</expr_stmt>



    <comment type="block" pos:start="89:5" pos:end="91:65">/* If the user is asking for the kernel to find a location, do that

       before we truncate the length for mapping files below.  */</comment>

    <if_stmt pos:start="93:5" pos:end="109:5"><if pos:start="93:5" pos:end="109:5">if <condition pos:start="93:8" pos:end="93:29">(<expr pos:start="93:9" pos:end="93:28"><operator pos:start="93:9" pos:end="93:9">!</operator><operator pos:start="93:10" pos:end="93:10">(</operator><name pos:start="93:11" pos:end="93:15">flags</name> <operator pos:start="93:17" pos:end="93:17">&amp;</operator> <name pos:start="93:19" pos:end="93:27">MAP_FIXED</name><operator pos:start="93:28" pos:end="93:28">)</operator></expr>)</condition> <block pos:start="93:31" pos:end="109:5">{<block_content pos:start="95:9" pos:end="107:9">

        <expr_stmt pos:start="95:9" pos:end="95:46"><expr pos:start="95:9" pos:end="95:45"><name pos:start="95:9" pos:end="95:16">host_len</name> <operator pos:start="95:18" pos:end="95:18">=</operator> <name pos:start="95:20" pos:end="95:22">len</name> <operator pos:start="95:24" pos:end="95:24">+</operator> <name pos:start="95:26" pos:end="95:31">offset</name> <operator pos:start="95:33" pos:end="95:33">-</operator> <name pos:start="95:35" pos:end="95:45">host_offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:45"><expr pos:start="97:9" pos:end="97:44"><name pos:start="97:9" pos:end="97:16">host_len</name> <operator pos:start="97:18" pos:end="97:18">=</operator> <call pos:start="97:20" pos:end="97:44"><name pos:start="97:20" pos:end="97:34">HOST_PAGE_ALIGN</name><argument_list pos:start="97:35" pos:end="97:44">(<argument pos:start="97:36" pos:end="97:43"><expr pos:start="97:36" pos:end="97:43"><name pos:start="97:36" pos:end="97:43">host_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:52"><expr pos:start="99:9" pos:end="99:51"><name pos:start="99:9" pos:end="99:13">start</name> <operator pos:start="99:15" pos:end="99:15">=</operator> <call pos:start="99:17" pos:end="99:51"><name pos:start="99:17" pos:end="99:29">mmap_find_vma</name><argument_list pos:start="99:30" pos:end="99:51">(<argument pos:start="99:31" pos:end="99:40"><expr pos:start="99:31" pos:end="99:40"><name pos:start="99:31" pos:end="99:40">real_start</name></expr></argument>, <argument pos:start="99:43" pos:end="99:50"><expr pos:start="99:43" pos:end="99:50"><name pos:start="99:43" pos:end="99:50">host_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="101:9" pos:end="107:9"><if pos:start="101:9" pos:end="107:9">if <condition pos:start="101:12" pos:end="101:35">(<expr pos:start="101:13" pos:end="101:34"><name pos:start="101:13" pos:end="101:17">start</name> <operator pos:start="101:19" pos:end="101:20">==</operator> <operator pos:start="101:22" pos:end="101:22">(</operator><name pos:start="101:23" pos:end="101:31">abi_ulong</name><operator pos:start="101:32" pos:end="101:32">)</operator><operator pos:start="101:33" pos:end="101:33">-</operator><literal type="number" pos:start="101:34" pos:end="101:34">1</literal></expr>)</condition> <block pos:start="101:37" pos:end="107:9">{<block_content pos:start="103:13" pos:end="105:22">

            <expr_stmt pos:start="103:13" pos:end="103:27"><expr pos:start="103:13" pos:end="103:26"><name pos:start="103:13" pos:end="103:17">errno</name> <operator pos:start="103:19" pos:end="103:19">=</operator> <name pos:start="103:21" pos:end="103:26">ENOMEM</name></expr>;</expr_stmt>

            <goto pos:start="105:13" pos:end="105:22">goto <name pos:start="105:18" pos:end="105:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="113:5" pos:end="133:43">/* When mapping files into a memory area larger than the file, accesses

       to pages beyond the file size will cause a SIGBUS. 



       For example, if mmaping a file of 100 bytes on a host with 4K pages

       emulating a target with 8K pages, the target expects to be able to

       access the first 8K. But the host will trap us on any access beyond

       4K.  



       When emulating a target with a larger page-size than the hosts, we

       may need to truncate file maps at EOF and add extra anonymous pages

       up to the targets page boundary.  */</comment>



    <if_stmt pos:start="137:5" pos:end="165:5"><if pos:start="137:5" pos:end="165:5">if <condition pos:start="137:8" pos:end="139:36">(<expr pos:start="137:9" pos:end="139:35"><operator pos:start="137:9" pos:end="137:9">(</operator><name pos:start="137:10" pos:end="137:33">qemu_real_host_page_size</name> <operator pos:start="137:35" pos:end="137:35">&lt;</operator> <name pos:start="137:37" pos:end="137:52">TARGET_PAGE_SIZE</name><operator pos:start="137:53" pos:end="137:53">)</operator>

        <operator pos:start="139:9" pos:end="139:10">&amp;&amp;</operator> <operator pos:start="139:12" pos:end="139:12">!</operator><operator pos:start="139:13" pos:end="139:13">(</operator><name pos:start="139:14" pos:end="139:18">flags</name> <operator pos:start="139:20" pos:end="139:20">&amp;</operator> <name pos:start="139:22" pos:end="139:34">MAP_ANONYMOUS</name><operator pos:start="139:35" pos:end="139:35">)</operator></expr>)</condition> <block pos:start="139:38" pos:end="165:5">{<block_content pos:start="141:8" pos:end="163:8">

       <decl_stmt pos:start="141:8" pos:end="141:22"><decl pos:start="141:8" pos:end="141:21"><type pos:start="141:8" pos:end="141:18"><name pos:start="141:8" pos:end="141:18"><name pos:start="141:8" pos:end="141:13">struct</name> <name pos:start="141:15" pos:end="141:18">stat</name></name></type> <name pos:start="141:20" pos:end="141:21">sb</name></decl>;</decl_stmt>



       <if_stmt pos:start="145:8" pos:end="147:21"><if pos:start="145:8" pos:end="147:21">if <condition pos:start="145:11" pos:end="145:33">(<expr pos:start="145:12" pos:end="145:32"><call pos:start="145:12" pos:end="145:26"><name pos:start="145:12" pos:end="145:16">fstat</name> <argument_list pos:start="145:18" pos:end="145:26">(<argument pos:start="145:19" pos:end="145:20"><expr pos:start="145:19" pos:end="145:20"><name pos:start="145:19" pos:end="145:20">fd</name></expr></argument>, <argument pos:start="145:23" pos:end="145:25"><expr pos:start="145:23" pos:end="145:25"><operator pos:start="145:23" pos:end="145:23">&amp;</operator><name pos:start="145:24" pos:end="145:25">sb</name></expr></argument>)</argument_list></call> <operator pos:start="145:28" pos:end="145:29">==</operator> <operator pos:start="145:31" pos:end="145:31">-</operator><literal type="number" pos:start="145:32" pos:end="145:32">1</literal></expr>)</condition><block type="pseudo" pos:start="147:12" pos:end="147:21"><block_content pos:start="147:12" pos:end="147:21">

           <goto pos:start="147:12" pos:end="147:21">goto <name pos:start="147:17" pos:end="147:20">fail</name>;</goto></block_content></block></if></if_stmt>



       <comment type="block" pos:start="151:8" pos:end="151:56">/* Are we trying to create a map beyond EOF?.  */</comment>

       <if_stmt pos:start="153:8" pos:end="163:8"><if pos:start="153:8" pos:end="163:8">if <condition pos:start="153:11" pos:end="153:37">(<expr pos:start="153:12" pos:end="153:36"><name pos:start="153:12" pos:end="153:17">offset</name> <operator pos:start="153:19" pos:end="153:19">+</operator> <name pos:start="153:21" pos:end="153:23">len</name> <operator pos:start="153:25" pos:end="153:25">&gt;</operator> <name pos:start="153:27" pos:end="153:36"><name pos:start="153:27" pos:end="153:28">sb</name><operator pos:start="153:29" pos:end="153:29">.</operator><name pos:start="153:30" pos:end="153:36">st_size</name></name></expr>)</condition> <block pos:start="153:39" pos:end="163:8">{<block_content pos:start="161:12" pos:end="161:59">

           <comment type="block" pos:start="155:12" pos:end="159:45">/* If so, truncate the file map at eof aligned with 

              the hosts real pagesize. Additional anonymous maps

              will be created beyond EOF.  */</comment>

           <expr_stmt pos:start="161:12" pos:end="161:59"><expr pos:start="161:12" pos:end="161:58"><name pos:start="161:12" pos:end="161:14">len</name> <operator pos:start="161:16" pos:end="161:16">=</operator> <call pos:start="161:18" pos:end="161:58"><name pos:start="161:18" pos:end="161:37">REAL_HOST_PAGE_ALIGN</name><argument_list pos:start="161:38" pos:end="161:58">(<argument pos:start="161:39" pos:end="161:57"><expr pos:start="161:39" pos:end="161:57"><name pos:start="161:39" pos:end="161:48"><name pos:start="161:39" pos:end="161:40">sb</name><operator pos:start="161:41" pos:end="161:41">.</operator><name pos:start="161:42" pos:end="161:48">st_size</name></name> <operator pos:start="161:50" pos:end="161:50">-</operator> <name pos:start="161:52" pos:end="161:57">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="169:5" pos:end="387:5"><if pos:start="169:5" pos:end="221:5">if <condition pos:start="169:8" pos:end="169:29">(<expr pos:start="169:9" pos:end="169:28"><operator pos:start="169:9" pos:end="169:9">!</operator><operator pos:start="169:10" pos:end="169:10">(</operator><name pos:start="169:11" pos:end="169:15">flags</name> <operator pos:start="169:17" pos:end="169:17">&amp;</operator> <name pos:start="169:19" pos:end="169:27">MAP_FIXED</name><operator pos:start="169:28" pos:end="169:28">)</operator></expr>)</condition> <block pos:start="169:31" pos:end="221:5">{<block_content pos:start="171:9" pos:end="219:32">

        <decl_stmt pos:start="171:9" pos:end="171:33"><decl pos:start="171:9" pos:end="171:32"><type pos:start="171:9" pos:end="171:21"><name pos:start="171:9" pos:end="171:16">unsigned</name> <name pos:start="171:18" pos:end="171:21">long</name></type> <name pos:start="171:23" pos:end="171:32">host_start</name></decl>;</decl_stmt>

        <decl_stmt pos:start="173:9" pos:end="173:16"><decl pos:start="173:9" pos:end="173:15"><type pos:start="173:9" pos:end="173:14"><name pos:start="173:9" pos:end="173:12">void</name> <modifier pos:start="173:14" pos:end="173:14">*</modifier></type><name pos:start="173:15" pos:end="173:15">p</name></decl>;</decl_stmt>



        <expr_stmt pos:start="177:9" pos:end="177:46"><expr pos:start="177:9" pos:end="177:45"><name pos:start="177:9" pos:end="177:16">host_len</name> <operator pos:start="177:18" pos:end="177:18">=</operator> <name pos:start="177:20" pos:end="177:22">len</name> <operator pos:start="177:24" pos:end="177:24">+</operator> <name pos:start="177:26" pos:end="177:31">offset</name> <operator pos:start="177:33" pos:end="177:33">-</operator> <name pos:start="177:35" pos:end="177:45">host_offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:45"><expr pos:start="179:9" pos:end="179:44"><name pos:start="179:9" pos:end="179:16">host_len</name> <operator pos:start="179:18" pos:end="179:18">=</operator> <call pos:start="179:20" pos:end="179:44"><name pos:start="179:20" pos:end="179:34">HOST_PAGE_ALIGN</name><argument_list pos:start="179:35" pos:end="179:44">(<argument pos:start="179:36" pos:end="179:43"><expr pos:start="179:36" pos:end="179:43"><name pos:start="179:36" pos:end="179:43">host_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="183:9" pos:end="187:38">/* Note: we prefer to control the mapping address. It is

           especially important if qemu_host_page_size &gt;

           qemu_real_host_page_size */</comment>

        <expr_stmt pos:start="189:9" pos:end="191:59"><expr pos:start="189:9" pos:end="191:58"><name pos:start="189:9" pos:end="189:9">p</name> <operator pos:start="189:11" pos:end="189:11">=</operator> <call pos:start="189:13" pos:end="191:58"><name pos:start="189:13" pos:end="189:16">mmap</name><argument_list pos:start="189:17" pos:end="191:58">(<argument pos:start="189:18" pos:end="189:27"><expr pos:start="189:18" pos:end="189:27"><call pos:start="189:18" pos:end="189:27"><name pos:start="189:18" pos:end="189:20">g2h</name><argument_list pos:start="189:21" pos:end="189:27">(<argument pos:start="189:22" pos:end="189:26"><expr pos:start="189:22" pos:end="189:26"><name pos:start="189:22" pos:end="189:26">start</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="189:30" pos:end="189:37"><expr pos:start="189:30" pos:end="189:37"><name pos:start="189:30" pos:end="189:37">host_len</name></expr></argument>, <argument pos:start="189:40" pos:end="189:43"><expr pos:start="189:40" pos:end="189:43"><name pos:start="189:40" pos:end="189:43">prot</name></expr></argument>,

                 <argument pos:start="191:18" pos:end="191:50"><expr pos:start="191:18" pos:end="191:50"><name pos:start="191:18" pos:end="191:22">flags</name> <operator pos:start="191:24" pos:end="191:24">|</operator> <name pos:start="191:26" pos:end="191:34">MAP_FIXED</name> <operator pos:start="191:36" pos:end="191:36">|</operator> <name pos:start="191:38" pos:end="191:50">MAP_ANONYMOUS</name></expr></argument>, <argument pos:start="191:53" pos:end="191:54"><expr pos:start="191:53" pos:end="191:54"><operator pos:start="191:53" pos:end="191:53">-</operator><literal type="number" pos:start="191:54" pos:end="191:54">1</literal></expr></argument>, <argument pos:start="191:57" pos:end="191:57"><expr pos:start="191:57" pos:end="191:57"><literal type="number" pos:start="191:57" pos:end="191:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="193:9" pos:end="195:22"><if pos:start="193:9" pos:end="195:22">if <condition pos:start="193:12" pos:end="193:28">(<expr pos:start="193:13" pos:end="193:27"><name pos:start="193:13" pos:end="193:13">p</name> <operator pos:start="193:15" pos:end="193:16">==</operator> <name pos:start="193:18" pos:end="193:27">MAP_FAILED</name></expr>)</condition><block type="pseudo" pos:start="195:13" pos:end="195:22"><block_content pos:start="195:13" pos:end="195:22">

            <goto pos:start="195:13" pos:end="195:22">goto <name pos:start="195:18" pos:end="195:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block" pos:start="197:9" pos:end="197:77">/* update start so that it points to the file position at 'offset' */</comment>

        <expr_stmt pos:start="199:9" pos:end="199:38"><expr pos:start="199:9" pos:end="199:37"><name pos:start="199:9" pos:end="199:18">host_start</name> <operator pos:start="199:20" pos:end="199:20">=</operator> <operator pos:start="199:22" pos:end="199:22">(</operator><name pos:start="199:23" pos:end="199:30">unsigned</name> <name pos:start="199:32" pos:end="199:35">long</name><operator pos:start="199:36" pos:end="199:36">)</operator><name pos:start="199:37" pos:end="199:37">p</name></expr>;</expr_stmt>

        <if_stmt pos:start="201:9" pos:end="217:9"><if pos:start="201:9" pos:end="217:9">if <condition pos:start="201:12" pos:end="201:37">(<expr pos:start="201:13" pos:end="201:36"><operator pos:start="201:13" pos:end="201:13">!</operator><operator pos:start="201:14" pos:end="201:14">(</operator><name pos:start="201:15" pos:end="201:19">flags</name> <operator pos:start="201:21" pos:end="201:21">&amp;</operator> <name pos:start="201:23" pos:end="201:35">MAP_ANONYMOUS</name><operator pos:start="201:36" pos:end="201:36">)</operator></expr>)</condition> <block pos:start="201:39" pos:end="217:9">{<block_content pos:start="203:13" pos:end="215:47">

            <expr_stmt pos:start="203:13" pos:end="205:57"><expr pos:start="203:13" pos:end="205:56"><name pos:start="203:13" pos:end="203:13">p</name> <operator pos:start="203:15" pos:end="203:15">=</operator> <call pos:start="203:17" pos:end="205:56"><name pos:start="203:17" pos:end="203:20">mmap</name><argument_list pos:start="203:21" pos:end="205:56">(<argument pos:start="203:22" pos:end="203:31"><expr pos:start="203:22" pos:end="203:31"><call pos:start="203:22" pos:end="203:31"><name pos:start="203:22" pos:end="203:24">g2h</name><argument_list pos:start="203:25" pos:end="203:31">(<argument pos:start="203:26" pos:end="203:30"><expr pos:start="203:26" pos:end="203:30"><name pos:start="203:26" pos:end="203:30">start</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="203:34" pos:end="203:36"><expr pos:start="203:34" pos:end="203:36"><name pos:start="203:34" pos:end="203:36">len</name></expr></argument>, <argument pos:start="203:39" pos:end="203:42"><expr pos:start="203:39" pos:end="203:42"><name pos:start="203:39" pos:end="203:42">prot</name></expr></argument>,

                     <argument pos:start="205:22" pos:end="205:38"><expr pos:start="205:22" pos:end="205:38"><name pos:start="205:22" pos:end="205:26">flags</name> <operator pos:start="205:28" pos:end="205:28">|</operator> <name pos:start="205:30" pos:end="205:38">MAP_FIXED</name></expr></argument>, <argument pos:start="205:41" pos:end="205:42"><expr pos:start="205:41" pos:end="205:42"><name pos:start="205:41" pos:end="205:42">fd</name></expr></argument>, <argument pos:start="205:45" pos:end="205:55"><expr pos:start="205:45" pos:end="205:55"><name pos:start="205:45" pos:end="205:55">host_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="207:13" pos:end="213:13"><if pos:start="207:13" pos:end="213:13">if <condition pos:start="207:16" pos:end="207:32">(<expr pos:start="207:17" pos:end="207:31"><name pos:start="207:17" pos:end="207:17">p</name> <operator pos:start="207:19" pos:end="207:20">==</operator> <name pos:start="207:22" pos:end="207:31">MAP_FAILED</name></expr>)</condition> <block pos:start="207:34" pos:end="213:13">{<block_content pos:start="209:17" pos:end="211:26">

                <expr_stmt pos:start="209:17" pos:end="209:45"><expr pos:start="209:17" pos:end="209:44"><call pos:start="209:17" pos:end="209:44"><name pos:start="209:17" pos:end="209:22">munmap</name><argument_list pos:start="209:23" pos:end="209:44">(<argument pos:start="209:24" pos:end="209:33"><expr pos:start="209:24" pos:end="209:33"><call pos:start="209:24" pos:end="209:33"><name pos:start="209:24" pos:end="209:26">g2h</name><argument_list pos:start="209:27" pos:end="209:33">(<argument pos:start="209:28" pos:end="209:32"><expr pos:start="209:28" pos:end="209:32"><name pos:start="209:28" pos:end="209:32">start</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="209:36" pos:end="209:43"><expr pos:start="209:36" pos:end="209:43"><name pos:start="209:36" pos:end="209:43">host_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="211:17" pos:end="211:26">goto <name pos:start="211:22" pos:end="211:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:47"><expr pos:start="215:13" pos:end="215:46"><name pos:start="215:13" pos:end="215:22">host_start</name> <operator pos:start="215:24" pos:end="215:25">+=</operator> <name pos:start="215:27" pos:end="215:32">offset</name> <operator pos:start="215:34" pos:end="215:34">-</operator> <name pos:start="215:36" pos:end="215:46">host_offset</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:32"><expr pos:start="219:9" pos:end="219:31"><name pos:start="219:9" pos:end="219:13">start</name> <operator pos:start="219:15" pos:end="219:15">=</operator> <call pos:start="219:17" pos:end="219:31"><name pos:start="219:17" pos:end="219:19">h2g</name><argument_list pos:start="219:20" pos:end="219:31">(<argument pos:start="219:21" pos:end="219:30"><expr pos:start="219:21" pos:end="219:30"><name pos:start="219:21" pos:end="219:30">host_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="221:7" pos:end="387:5">else <block pos:start="221:12" pos:end="387:5">{<block_content pos:start="223:9" pos:end="385:9">

        <if_stmt pos:start="223:9" pos:end="229:9"><if pos:start="223:9" pos:end="229:9">if <condition pos:start="223:12" pos:end="223:38">(<expr pos:start="223:13" pos:end="223:37"><name pos:start="223:13" pos:end="223:17">start</name> <operator pos:start="223:19" pos:end="223:19">&amp;</operator> <operator pos:start="223:21" pos:end="223:21">~</operator><name pos:start="223:22" pos:end="223:37">TARGET_PAGE_MASK</name></expr>)</condition> <block pos:start="223:40" pos:end="229:9">{<block_content pos:start="225:13" pos:end="227:22">

            <expr_stmt pos:start="225:13" pos:end="225:27"><expr pos:start="225:13" pos:end="225:26"><name pos:start="225:13" pos:end="225:17">errno</name> <operator pos:start="225:19" pos:end="225:19">=</operator> <name pos:start="225:21" pos:end="225:26">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="227:13" pos:end="227:22">goto <name pos:start="227:18" pos:end="227:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:26"><expr pos:start="231:9" pos:end="231:25"><name pos:start="231:9" pos:end="231:11">end</name> <operator pos:start="231:13" pos:end="231:13">=</operator> <name pos:start="231:15" pos:end="231:19">start</name> <operator pos:start="231:21" pos:end="231:21">+</operator> <name pos:start="231:23" pos:end="231:25">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:40"><expr pos:start="233:9" pos:end="233:39"><name pos:start="233:9" pos:end="233:16">real_end</name> <operator pos:start="233:18" pos:end="233:18">=</operator> <call pos:start="233:20" pos:end="233:39"><name pos:start="233:20" pos:end="233:34">HOST_PAGE_ALIGN</name><argument_list pos:start="233:35" pos:end="233:39">(<argument pos:start="233:36" pos:end="233:38"><expr pos:start="233:36" pos:end="233:38"><name pos:start="233:36" pos:end="233:38">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<comment type="block" pos:start="237:9" pos:end="245:11">/*

	 * Test if requested memory area fits target address space

	 * It can fail only on 64-bit host with 32-bit target.

	 * On any other target/host host mmap() handles this error correctly.

	 */</comment>

        <if_stmt pos:start="247:9" pos:end="253:9"><if pos:start="247:9" pos:end="253:9">if <condition pos:start="247:12" pos:end="247:60">(<expr pos:start="247:13" pos:end="247:59"><operator pos:start="247:13" pos:end="247:13">(</operator><name pos:start="247:14" pos:end="247:21">unsigned</name> <name pos:start="247:23" pos:end="247:26">long</name><operator pos:start="247:27" pos:end="247:27">)</operator><name pos:start="247:28" pos:end="247:32">start</name> <operator pos:start="247:34" pos:end="247:34">+</operator> <name pos:start="247:36" pos:end="247:38">len</name> <operator pos:start="247:40" pos:end="247:40">-</operator> <literal type="number" pos:start="247:42" pos:end="247:42">1</literal> <operator pos:start="247:44" pos:end="247:44">&gt;</operator> <operator pos:start="247:46" pos:end="247:46">(</operator><name pos:start="247:47" pos:end="247:55">abi_ulong</name><operator pos:start="247:56" pos:end="247:56">)</operator> <operator pos:start="247:58" pos:end="247:58">-</operator><literal type="number" pos:start="247:59" pos:end="247:59">1</literal></expr>)</condition> <block pos:start="247:62" pos:end="253:9">{<block_content pos:start="249:13" pos:end="251:22">

            <expr_stmt pos:start="249:13" pos:end="249:27"><expr pos:start="249:13" pos:end="249:26"><name pos:start="249:13" pos:end="249:17">errno</name> <operator pos:start="249:19" pos:end="249:19">=</operator> <name pos:start="249:21" pos:end="249:26">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="251:13" pos:end="251:22">goto <name pos:start="251:18" pos:end="251:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="257:9" pos:end="259:36">/* worst case: we cannot map the file because the offset is not

           aligned, so we read it */</comment>

        <if_stmt pos:start="261:9" pos:end="303:9"><if pos:start="261:9" pos:end="303:9">if <condition pos:start="261:12" pos:end="263:78">(<expr pos:start="261:13" pos:end="263:77"><operator pos:start="261:13" pos:end="261:13">!</operator><operator pos:start="261:14" pos:end="261:14">(</operator><name pos:start="261:15" pos:end="261:19">flags</name> <operator pos:start="261:21" pos:end="261:21">&amp;</operator> <name pos:start="261:23" pos:end="261:35">MAP_ANONYMOUS</name><operator pos:start="261:36" pos:end="261:36">)</operator> <operator pos:start="261:38" pos:end="261:39">&amp;&amp;</operator>

            <operator pos:start="263:13" pos:end="263:13">(</operator><name pos:start="263:14" pos:end="263:19">offset</name> <operator pos:start="263:21" pos:end="263:21">&amp;</operator> <operator pos:start="263:23" pos:end="263:23">~</operator><name pos:start="263:24" pos:end="263:42">qemu_host_page_mask</name><operator pos:start="263:43" pos:end="263:43">)</operator> <operator pos:start="263:45" pos:end="263:46">!=</operator> <operator pos:start="263:48" pos:end="263:48">(</operator><name pos:start="263:49" pos:end="263:53">start</name> <operator pos:start="263:55" pos:end="263:55">&amp;</operator> <operator pos:start="263:57" pos:end="263:57">~</operator><name pos:start="263:58" pos:end="263:76">qemu_host_page_mask</name><operator pos:start="263:77" pos:end="263:77">)</operator></expr>)</condition> <block pos:start="263:80" pos:end="303:9">{<block_content pos:start="269:13" pos:end="301:25">

            <comment type="block" pos:start="265:13" pos:end="267:55">/* msync() won't work here, so we return an error if write is

               possible while it is a shared mapping */</comment>

            <if_stmt pos:start="269:13" pos:end="277:13"><if pos:start="269:13" pos:end="277:13">if <condition pos:start="269:16" pos:end="271:36">(<expr pos:start="269:17" pos:end="271:35"><operator pos:start="269:17" pos:end="269:17">(</operator><name pos:start="269:18" pos:end="269:22">flags</name> <operator pos:start="269:24" pos:end="269:24">&amp;</operator> <name pos:start="269:26" pos:end="269:33">MAP_TYPE</name><operator pos:start="269:34" pos:end="269:34">)</operator> <operator pos:start="269:36" pos:end="269:37">==</operator> <name pos:start="269:39" pos:end="269:48">MAP_SHARED</name> <operator pos:start="269:50" pos:end="269:51">&amp;&amp;</operator>

                <operator pos:start="271:17" pos:end="271:17">(</operator><name pos:start="271:18" pos:end="271:21">prot</name> <operator pos:start="271:23" pos:end="271:23">&amp;</operator> <name pos:start="271:25" pos:end="271:34">PROT_WRITE</name><operator pos:start="271:35" pos:end="271:35">)</operator></expr>)</condition> <block pos:start="271:38" pos:end="277:13">{<block_content pos:start="273:17" pos:end="275:26">

                <expr_stmt pos:start="273:17" pos:end="273:31"><expr pos:start="273:17" pos:end="273:30"><name pos:start="273:17" pos:end="273:21">errno</name> <operator pos:start="273:23" pos:end="273:23">=</operator> <name pos:start="273:25" pos:end="273:30">EINVAL</name></expr>;</expr_stmt>

                <goto pos:start="275:17" pos:end="275:26">goto <name pos:start="275:22" pos:end="275:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="279:13" pos:end="283:41"><expr pos:start="279:13" pos:end="283:40"><name pos:start="279:13" pos:end="279:19">retaddr</name> <operator pos:start="279:21" pos:end="279:21">=</operator> <call pos:start="279:23" pos:end="283:40"><name pos:start="279:23" pos:end="279:33">target_mmap</name><argument_list pos:start="279:34" pos:end="283:40">(<argument pos:start="279:35" pos:end="279:39"><expr pos:start="279:35" pos:end="279:39"><name pos:start="279:35" pos:end="279:39">start</name></expr></argument>, <argument pos:start="279:42" pos:end="279:44"><expr pos:start="279:42" pos:end="279:44"><name pos:start="279:42" pos:end="279:44">len</name></expr></argument>, <argument pos:start="279:47" pos:end="279:63"><expr pos:start="279:47" pos:end="279:63"><name pos:start="279:47" pos:end="279:50">prot</name> <operator pos:start="279:52" pos:end="279:52">|</operator> <name pos:start="279:54" pos:end="279:63">PROT_WRITE</name></expr></argument>,

                                  <argument pos:start="281:35" pos:end="281:73"><expr pos:start="281:35" pos:end="281:73"><name pos:start="281:35" pos:end="281:43">MAP_FIXED</name> <operator pos:start="281:45" pos:end="281:45">|</operator> <name pos:start="281:47" pos:end="281:57">MAP_PRIVATE</name> <operator pos:start="281:59" pos:end="281:59">|</operator> <name pos:start="281:61" pos:end="281:73">MAP_ANONYMOUS</name></expr></argument>,

                                  <argument pos:start="283:35" pos:end="283:36"><expr pos:start="283:35" pos:end="283:36"><operator pos:start="283:35" pos:end="283:35">-</operator><literal type="number" pos:start="283:36" pos:end="283:36">1</literal></expr></argument>, <argument pos:start="283:39" pos:end="283:39"><expr pos:start="283:39" pos:end="283:39"><literal type="number" pos:start="283:39" pos:end="283:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="285:13" pos:end="287:26"><if pos:start="285:13" pos:end="287:26">if <condition pos:start="285:16" pos:end="285:30">(<expr pos:start="285:17" pos:end="285:29"><name pos:start="285:17" pos:end="285:23">retaddr</name> <operator pos:start="285:25" pos:end="285:26">==</operator> <operator pos:start="285:28" pos:end="285:28">-</operator><literal type="number" pos:start="285:29" pos:end="285:29">1</literal></expr>)</condition><block type="pseudo" pos:start="287:17" pos:end="287:26"><block_content pos:start="287:17" pos:end="287:26">

                <goto pos:start="287:17" pos:end="287:26">goto <name pos:start="287:22" pos:end="287:25">fail</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="289:13" pos:end="291:26"><if pos:start="289:13" pos:end="291:26">if <condition pos:start="289:16" pos:end="289:57">(<expr pos:start="289:17" pos:end="289:56"><call pos:start="289:17" pos:end="289:50"><name pos:start="289:17" pos:end="289:21">pread</name><argument_list pos:start="289:22" pos:end="289:50">(<argument pos:start="289:23" pos:end="289:24"><expr pos:start="289:23" pos:end="289:24"><name pos:start="289:23" pos:end="289:24">fd</name></expr></argument>, <argument pos:start="289:27" pos:end="289:36"><expr pos:start="289:27" pos:end="289:36"><call pos:start="289:27" pos:end="289:36"><name pos:start="289:27" pos:end="289:29">g2h</name><argument_list pos:start="289:30" pos:end="289:36">(<argument pos:start="289:31" pos:end="289:35"><expr pos:start="289:31" pos:end="289:35"><name pos:start="289:31" pos:end="289:35">start</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="289:39" pos:end="289:41"><expr pos:start="289:39" pos:end="289:41"><name pos:start="289:39" pos:end="289:41">len</name></expr></argument>, <argument pos:start="289:44" pos:end="289:49"><expr pos:start="289:44" pos:end="289:49"><name pos:start="289:44" pos:end="289:49">offset</name></expr></argument>)</argument_list></call> <operator pos:start="289:52" pos:end="289:53">==</operator> <operator pos:start="289:55" pos:end="289:55">-</operator><literal type="number" pos:start="289:56" pos:end="289:56">1</literal></expr>)</condition><block type="pseudo" pos:start="291:17" pos:end="291:26"><block_content pos:start="291:17" pos:end="291:26">

                <goto pos:start="291:17" pos:end="291:26">goto <name pos:start="291:22" pos:end="291:25">fail</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="293:13" pos:end="299:13"><if pos:start="293:13" pos:end="299:13">if <condition pos:start="293:16" pos:end="293:37">(<expr pos:start="293:17" pos:end="293:36"><operator pos:start="293:17" pos:end="293:17">!</operator><operator pos:start="293:18" pos:end="293:18">(</operator><name pos:start="293:19" pos:end="293:22">prot</name> <operator pos:start="293:24" pos:end="293:24">&amp;</operator> <name pos:start="293:26" pos:end="293:35">PROT_WRITE</name><operator pos:start="293:36" pos:end="293:36">)</operator></expr>)</condition> <block pos:start="293:39" pos:end="299:13">{<block_content pos:start="295:17" pos:end="297:33">

                <expr_stmt pos:start="295:17" pos:end="295:56"><expr pos:start="295:17" pos:end="295:55"><name pos:start="295:17" pos:end="295:19">ret</name> <operator pos:start="295:21" pos:end="295:21">=</operator> <call pos:start="295:23" pos:end="295:55"><name pos:start="295:23" pos:end="295:37">target_mprotect</name><argument_list pos:start="295:38" pos:end="295:55">(<argument pos:start="295:39" pos:end="295:43"><expr pos:start="295:39" pos:end="295:43"><name pos:start="295:39" pos:end="295:43">start</name></expr></argument>, <argument pos:start="295:46" pos:end="295:48"><expr pos:start="295:46" pos:end="295:48"><name pos:start="295:46" pos:end="295:48">len</name></expr></argument>, <argument pos:start="295:51" pos:end="295:54"><expr pos:start="295:51" pos:end="295:54"><name pos:start="295:51" pos:end="295:54">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="297:17" pos:end="297:33"><expr pos:start="297:17" pos:end="297:32"><call pos:start="297:17" pos:end="297:32"><name pos:start="297:17" pos:end="297:22">assert</name><argument_list pos:start="297:23" pos:end="297:32">(<argument pos:start="297:24" pos:end="297:31"><expr pos:start="297:24" pos:end="297:31"><name pos:start="297:24" pos:end="297:26">ret</name> <operator pos:start="297:28" pos:end="297:29">==</operator> <literal type="number" pos:start="297:31" pos:end="297:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <goto pos:start="301:13" pos:end="301:25">goto <name pos:start="301:18" pos:end="301:24">the_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        

        <comment type="block" pos:start="307:9" pos:end="307:45">/* handle the start of the mapping */</comment>

        <if_stmt pos:start="309:9" pos:end="337:9"><if pos:start="309:9" pos:end="337:9">if <condition pos:start="309:12" pos:end="309:31">(<expr pos:start="309:13" pos:end="309:30"><name pos:start="309:13" pos:end="309:17">start</name> <operator pos:start="309:19" pos:end="309:19">&gt;</operator> <name pos:start="309:21" pos:end="309:30">real_start</name></expr>)</condition> <block pos:start="309:33" pos:end="337:9">{<block_content pos:start="311:13" pos:end="335:46">

            <if_stmt pos:start="311:13" pos:end="325:13"><if pos:start="311:13" pos:end="325:13">if <condition pos:start="311:16" pos:end="311:61">(<expr pos:start="311:17" pos:end="311:60"><name pos:start="311:17" pos:end="311:24">real_end</name> <operator pos:start="311:26" pos:end="311:27">==</operator> <name pos:start="311:29" pos:end="311:38">real_start</name> <operator pos:start="311:40" pos:end="311:40">+</operator> <name pos:start="311:42" pos:end="311:60">qemu_host_page_size</name></expr>)</condition> <block pos:start="311:63" pos:end="325:13">{<block_content pos:start="315:17" pos:end="323:30">

                <comment type="block" pos:start="313:17" pos:end="313:42">/* one single host page */</comment>

                <expr_stmt pos:start="315:17" pos:end="317:57"><expr pos:start="315:17" pos:end="317:56"><name pos:start="315:17" pos:end="315:19">ret</name> <operator pos:start="315:21" pos:end="315:21">=</operator> <call pos:start="315:23" pos:end="317:56"><name pos:start="315:23" pos:end="315:31">mmap_frag</name><argument_list pos:start="315:32" pos:end="317:56">(<argument pos:start="315:33" pos:end="315:42"><expr pos:start="315:33" pos:end="315:42"><name pos:start="315:33" pos:end="315:42">real_start</name></expr></argument>, <argument pos:start="315:45" pos:end="315:49"><expr pos:start="315:45" pos:end="315:49"><name pos:start="315:45" pos:end="315:49">start</name></expr></argument>, <argument pos:start="315:52" pos:end="315:54"><expr pos:start="315:52" pos:end="315:54"><name pos:start="315:52" pos:end="315:54">end</name></expr></argument>,

                                <argument pos:start="317:33" pos:end="317:36"><expr pos:start="317:33" pos:end="317:36"><name pos:start="317:33" pos:end="317:36">prot</name></expr></argument>, <argument pos:start="317:39" pos:end="317:43"><expr pos:start="317:39" pos:end="317:43"><name pos:start="317:39" pos:end="317:43">flags</name></expr></argument>, <argument pos:start="317:46" pos:end="317:47"><expr pos:start="317:46" pos:end="317:47"><name pos:start="317:46" pos:end="317:47">fd</name></expr></argument>, <argument pos:start="317:50" pos:end="317:55"><expr pos:start="317:50" pos:end="317:55"><name pos:start="317:50" pos:end="317:55">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="319:17" pos:end="321:30"><if pos:start="319:17" pos:end="321:30">if <condition pos:start="319:20" pos:end="319:30">(<expr pos:start="319:21" pos:end="319:29"><name pos:start="319:21" pos:end="319:23">ret</name> <operator pos:start="319:25" pos:end="319:26">==</operator> <operator pos:start="319:28" pos:end="319:28">-</operator><literal type="number" pos:start="319:29" pos:end="319:29">1</literal></expr>)</condition><block type="pseudo" pos:start="321:21" pos:end="321:30"><block_content pos:start="321:21" pos:end="321:30">

                    <goto pos:start="321:21" pos:end="321:30">goto <name pos:start="321:26" pos:end="321:29">fail</name>;</goto></block_content></block></if></if_stmt>

                <goto pos:start="323:17" pos:end="323:30">goto <name pos:start="323:22" pos:end="323:29">the_end1</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="327:13" pos:end="329:53"><expr pos:start="327:13" pos:end="329:52"><name pos:start="327:13" pos:end="327:15">ret</name> <operator pos:start="327:17" pos:end="327:17">=</operator> <call pos:start="327:19" pos:end="329:52"><name pos:start="327:19" pos:end="327:27">mmap_frag</name><argument_list pos:start="327:28" pos:end="329:52">(<argument pos:start="327:29" pos:end="327:38"><expr pos:start="327:29" pos:end="327:38"><name pos:start="327:29" pos:end="327:38">real_start</name></expr></argument>, <argument pos:start="327:41" pos:end="327:45"><expr pos:start="327:41" pos:end="327:45"><name pos:start="327:41" pos:end="327:45">start</name></expr></argument>, <argument pos:start="327:48" pos:end="327:79"><expr pos:start="327:48" pos:end="327:79"><name pos:start="327:48" pos:end="327:57">real_start</name> <operator pos:start="327:59" pos:end="327:59">+</operator> <name pos:start="327:61" pos:end="327:79">qemu_host_page_size</name></expr></argument>,

                            <argument pos:start="329:29" pos:end="329:32"><expr pos:start="329:29" pos:end="329:32"><name pos:start="329:29" pos:end="329:32">prot</name></expr></argument>, <argument pos:start="329:35" pos:end="329:39"><expr pos:start="329:35" pos:end="329:39"><name pos:start="329:35" pos:end="329:39">flags</name></expr></argument>, <argument pos:start="329:42" pos:end="329:43"><expr pos:start="329:42" pos:end="329:43"><name pos:start="329:42" pos:end="329:43">fd</name></expr></argument>, <argument pos:start="329:46" pos:end="329:51"><expr pos:start="329:46" pos:end="329:51"><name pos:start="329:46" pos:end="329:51">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="331:13" pos:end="333:26"><if pos:start="331:13" pos:end="333:26">if <condition pos:start="331:16" pos:end="331:26">(<expr pos:start="331:17" pos:end="331:25"><name pos:start="331:17" pos:end="331:19">ret</name> <operator pos:start="331:21" pos:end="331:22">==</operator> <operator pos:start="331:24" pos:end="331:24">-</operator><literal type="number" pos:start="331:25" pos:end="331:25">1</literal></expr>)</condition><block type="pseudo" pos:start="333:17" pos:end="333:26"><block_content pos:start="333:17" pos:end="333:26">

                <goto pos:start="333:17" pos:end="333:26">goto <name pos:start="333:22" pos:end="333:25">fail</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="335:13" pos:end="335:46"><expr pos:start="335:13" pos:end="335:45"><name pos:start="335:13" pos:end="335:22">real_start</name> <operator pos:start="335:24" pos:end="335:25">+=</operator> <name pos:start="335:27" pos:end="335:45">qemu_host_page_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="339:9" pos:end="339:43">/* handle the end of the mapping */</comment>

        <if_stmt pos:start="341:9" pos:end="357:9"><if pos:start="341:9" pos:end="357:9">if <condition pos:start="341:12" pos:end="341:27">(<expr pos:start="341:13" pos:end="341:26"><name pos:start="341:13" pos:end="341:15">end</name> <operator pos:start="341:17" pos:end="341:17">&lt;</operator> <name pos:start="341:19" pos:end="341:26">real_end</name></expr>)</condition> <block pos:start="341:29" pos:end="357:9">{<block_content pos:start="343:13" pos:end="355:44">

            <expr_stmt pos:start="343:13" pos:end="349:77"><expr pos:start="343:13" pos:end="349:76"><name pos:start="343:13" pos:end="343:15">ret</name> <operator pos:start="343:17" pos:end="343:17">=</operator> <call pos:start="343:19" pos:end="349:76"><name pos:start="343:19" pos:end="343:27">mmap_frag</name><argument_list pos:start="343:28" pos:end="349:76">(<argument pos:start="343:29" pos:end="343:58"><expr pos:start="343:29" pos:end="343:58"><name pos:start="343:29" pos:end="343:36">real_end</name> <operator pos:start="343:38" pos:end="343:38">-</operator> <name pos:start="343:40" pos:end="343:58">qemu_host_page_size</name></expr></argument>,

                            <argument pos:start="345:29" pos:end="345:58"><expr pos:start="345:29" pos:end="345:58"><name pos:start="345:29" pos:end="345:36">real_end</name> <operator pos:start="345:38" pos:end="345:38">-</operator> <name pos:start="345:40" pos:end="345:58">qemu_host_page_size</name></expr></argument>, <argument pos:start="345:61" pos:end="345:63"><expr pos:start="345:61" pos:end="345:63"><name pos:start="345:61" pos:end="345:63">end</name></expr></argument>,

                            <argument pos:start="347:29" pos:end="347:32"><expr pos:start="347:29" pos:end="347:32"><name pos:start="347:29" pos:end="347:32">prot</name></expr></argument>, <argument pos:start="347:35" pos:end="347:39"><expr pos:start="347:35" pos:end="347:39"><name pos:start="347:35" pos:end="347:39">flags</name></expr></argument>, <argument pos:start="347:42" pos:end="347:43"><expr pos:start="347:42" pos:end="347:43"><name pos:start="347:42" pos:end="347:43">fd</name></expr></argument>,

                            <argument pos:start="349:29" pos:end="349:75"><expr pos:start="349:29" pos:end="349:75"><name pos:start="349:29" pos:end="349:34">offset</name> <operator pos:start="349:36" pos:end="349:36">+</operator> <name pos:start="349:38" pos:end="349:45">real_end</name> <operator pos:start="349:47" pos:end="349:47">-</operator> <name pos:start="349:49" pos:end="349:67">qemu_host_page_size</name> <operator pos:start="349:69" pos:end="349:69">-</operator> <name pos:start="349:71" pos:end="349:75">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="351:13" pos:end="353:26"><if pos:start="351:13" pos:end="353:26">if <condition pos:start="351:16" pos:end="351:26">(<expr pos:start="351:17" pos:end="351:25"><name pos:start="351:17" pos:end="351:19">ret</name> <operator pos:start="351:21" pos:end="351:22">==</operator> <operator pos:start="351:24" pos:end="351:24">-</operator><literal type="number" pos:start="351:25" pos:end="351:25">1</literal></expr>)</condition><block type="pseudo" pos:start="353:17" pos:end="353:26"><block_content pos:start="353:17" pos:end="353:26">

                <goto pos:start="353:17" pos:end="353:26">goto <name pos:start="353:22" pos:end="353:25">fail</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="355:13" pos:end="355:44"><expr pos:start="355:13" pos:end="355:43"><name pos:start="355:13" pos:end="355:20">real_end</name> <operator pos:start="355:22" pos:end="355:23">-=</operator> <name pos:start="355:25" pos:end="355:43">qemu_host_page_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="361:9" pos:end="361:37">/* map the middle (easier) */</comment>

        <if_stmt pos:start="363:9" pos:end="385:9"><if pos:start="363:9" pos:end="385:9">if <condition pos:start="363:12" pos:end="363:34">(<expr pos:start="363:13" pos:end="363:33"><name pos:start="363:13" pos:end="363:22">real_start</name> <operator pos:start="363:24" pos:end="363:24">&lt;</operator> <name pos:start="363:26" pos:end="363:33">real_end</name></expr>)</condition> <block pos:start="363:36" pos:end="385:9">{<block_content pos:start="365:13" pos:end="383:26">

            <decl_stmt pos:start="365:13" pos:end="365:20"><decl pos:start="365:13" pos:end="365:19"><type pos:start="365:13" pos:end="365:18"><name pos:start="365:13" pos:end="365:16">void</name> <modifier pos:start="365:18" pos:end="365:18">*</modifier></type><name pos:start="365:19" pos:end="365:19">p</name></decl>;</decl_stmt>

            <decl_stmt pos:start="367:13" pos:end="367:34"><decl pos:start="367:13" pos:end="367:33"><type pos:start="367:13" pos:end="367:25"><name pos:start="367:13" pos:end="367:20">unsigned</name> <name pos:start="367:22" pos:end="367:25">long</name></type> <name pos:start="367:27" pos:end="367:33">offset1</name></decl>;</decl_stmt>

            <if_stmt pos:start="369:13" pos:end="375:54"><if pos:start="369:13" pos:end="371:28">if <condition pos:start="369:16" pos:end="369:38">(<expr pos:start="369:17" pos:end="369:37"><name pos:start="369:17" pos:end="369:21">flags</name> <operator pos:start="369:23" pos:end="369:23">&amp;</operator> <name pos:start="369:25" pos:end="369:37">MAP_ANONYMOUS</name></expr>)</condition><block type="pseudo" pos:start="371:17" pos:end="371:28"><block_content pos:start="371:17" pos:end="371:28">

                <expr_stmt pos:start="371:17" pos:end="371:28"><expr pos:start="371:17" pos:end="371:27"><name pos:start="371:17" pos:end="371:23">offset1</name> <operator pos:start="371:25" pos:end="371:25">=</operator> <literal type="number" pos:start="371:27" pos:end="371:27">0</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="373:13" pos:end="375:54">else<block type="pseudo" pos:start="375:17" pos:end="375:54"><block_content pos:start="375:17" pos:end="375:54">

                <expr_stmt pos:start="375:17" pos:end="375:54"><expr pos:start="375:17" pos:end="375:53"><name pos:start="375:17" pos:end="375:23">offset1</name> <operator pos:start="375:25" pos:end="375:25">=</operator> <name pos:start="375:27" pos:end="375:32">offset</name> <operator pos:start="375:34" pos:end="375:34">+</operator> <name pos:start="375:36" pos:end="375:45">real_start</name> <operator pos:start="375:47" pos:end="375:47">-</operator> <name pos:start="375:49" pos:end="375:53">start</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="377:13" pos:end="379:47"><expr pos:start="377:13" pos:end="379:46"><name pos:start="377:13" pos:end="377:13">p</name> <operator pos:start="377:15" pos:end="377:15">=</operator> <call pos:start="377:17" pos:end="379:46"><name pos:start="377:17" pos:end="377:20">mmap</name><argument_list pos:start="377:21" pos:end="379:46">(<argument pos:start="377:22" pos:end="377:36"><expr pos:start="377:22" pos:end="377:36"><call pos:start="377:22" pos:end="377:36"><name pos:start="377:22" pos:end="377:24">g2h</name><argument_list pos:start="377:25" pos:end="377:36">(<argument pos:start="377:26" pos:end="377:35"><expr pos:start="377:26" pos:end="377:35"><name pos:start="377:26" pos:end="377:35">real_start</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="377:39" pos:end="377:59"><expr pos:start="377:39" pos:end="377:59"><name pos:start="377:39" pos:end="377:46">real_end</name> <operator pos:start="377:48" pos:end="377:48">-</operator> <name pos:start="377:50" pos:end="377:59">real_start</name></expr></argument>,

                     <argument pos:start="379:22" pos:end="379:25"><expr pos:start="379:22" pos:end="379:25"><name pos:start="379:22" pos:end="379:25">prot</name></expr></argument>, <argument pos:start="379:28" pos:end="379:32"><expr pos:start="379:28" pos:end="379:32"><name pos:start="379:28" pos:end="379:32">flags</name></expr></argument>, <argument pos:start="379:35" pos:end="379:36"><expr pos:start="379:35" pos:end="379:36"><name pos:start="379:35" pos:end="379:36">fd</name></expr></argument>, <argument pos:start="379:39" pos:end="379:45"><expr pos:start="379:39" pos:end="379:45"><name pos:start="379:39" pos:end="379:45">offset1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="381:13" pos:end="383:26"><if pos:start="381:13" pos:end="383:26">if <condition pos:start="381:16" pos:end="381:32">(<expr pos:start="381:17" pos:end="381:31"><name pos:start="381:17" pos:end="381:17">p</name> <operator pos:start="381:19" pos:end="381:20">==</operator> <name pos:start="381:22" pos:end="381:31">MAP_FAILED</name></expr>)</condition><block type="pseudo" pos:start="383:17" pos:end="383:26"><block_content pos:start="383:17" pos:end="383:26">

                <goto pos:start="383:17" pos:end="383:26">goto <name pos:start="383:22" pos:end="383:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

 <label pos:start="389:2" pos:end="389:10"><name pos:start="389:2" pos:end="389:9">the_end1</name>:</label>

    <expr_stmt pos:start="391:5" pos:end="391:58"><expr pos:start="391:5" pos:end="391:57"><call pos:start="391:5" pos:end="391:57"><name pos:start="391:5" pos:end="391:18">page_set_flags</name><argument_list pos:start="391:19" pos:end="391:57">(<argument pos:start="391:20" pos:end="391:24"><expr pos:start="391:20" pos:end="391:24"><name pos:start="391:20" pos:end="391:24">start</name></expr></argument>, <argument pos:start="391:27" pos:end="391:37"><expr pos:start="391:27" pos:end="391:37"><name pos:start="391:27" pos:end="391:31">start</name> <operator pos:start="391:33" pos:end="391:33">+</operator> <name pos:start="391:35" pos:end="391:37">len</name></expr></argument>, <argument pos:start="391:40" pos:end="391:56"><expr pos:start="391:40" pos:end="391:56"><name pos:start="391:40" pos:end="391:43">prot</name> <operator pos:start="391:45" pos:end="391:45">|</operator> <name pos:start="391:47" pos:end="391:56">PAGE_VALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <label pos:start="393:2" pos:end="396:0"><name pos:start="393:2" pos:end="393:8">the_end</name>:</label>

<cpp:ifdef pos:start="395:1" pos:end="395:17">#<cpp:directive pos:start="395:2" pos:end="395:6">ifdef</cpp:directive> <name pos:start="395:8" pos:end="395:17">DEBUG_MMAP</name></cpp:ifdef>

    <expr_stmt pos:start="397:5" pos:end="397:51"><expr pos:start="397:5" pos:end="397:50"><call pos:start="397:5" pos:end="397:50"><name pos:start="397:5" pos:end="397:10">printf</name><argument_list pos:start="397:11" pos:end="397:50">(<argument pos:start="397:12" pos:end="397:42"><expr pos:start="397:12" pos:end="397:42"><literal type="string" pos:start="397:12" pos:end="397:19">"ret=0x"</literal> <name pos:start="397:21" pos:end="397:37">TARGET_ABI_FMT_lx</name> <literal type="string" pos:start="397:39" pos:end="397:42">"\n"</literal></expr></argument>, <argument pos:start="397:45" pos:end="397:49"><expr pos:start="397:45" pos:end="397:49"><name pos:start="397:45" pos:end="397:49">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="399:5" pos:end="399:22"><expr pos:start="399:5" pos:end="399:21"><call pos:start="399:5" pos:end="399:21"><name pos:start="399:5" pos:end="399:13">page_dump</name><argument_list pos:start="399:14" pos:end="399:21">(<argument pos:start="399:15" pos:end="399:20"><expr pos:start="399:15" pos:end="399:20"><name pos:start="399:15" pos:end="399:20">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="401:5" pos:end="404:0"><expr pos:start="401:5" pos:end="401:16"><call pos:start="401:5" pos:end="401:16"><name pos:start="401:5" pos:end="401:10">printf</name><argument_list pos:start="401:11" pos:end="401:16">(<argument pos:start="401:12" pos:end="401:15"><expr pos:start="401:12" pos:end="401:15"><literal type="string" pos:start="401:12" pos:end="401:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="403:1" pos:end="403:6">#<cpp:directive pos:start="403:2" pos:end="403:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="405:5" pos:end="405:49"><expr pos:start="405:5" pos:end="405:48"><call pos:start="405:5" pos:end="405:48"><name pos:start="405:5" pos:end="405:28">tb_invalidate_phys_range</name><argument_list pos:start="405:29" pos:end="405:48">(<argument pos:start="405:30" pos:end="405:34"><expr pos:start="405:30" pos:end="405:34"><name pos:start="405:30" pos:end="405:34">start</name></expr></argument>, <argument pos:start="405:37" pos:end="405:47"><expr pos:start="405:37" pos:end="405:47"><name pos:start="405:37" pos:end="405:41">start</name> <operator pos:start="405:43" pos:end="405:43">+</operator> <name pos:start="405:45" pos:end="405:47">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="407:5" pos:end="407:18"><expr pos:start="407:5" pos:end="407:17"><call pos:start="407:5" pos:end="407:17"><name pos:start="407:5" pos:end="407:15">mmap_unlock</name><argument_list pos:start="407:16" pos:end="407:17">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="409:5" pos:end="409:17">return <expr pos:start="409:12" pos:end="409:16"><name pos:start="409:12" pos:end="409:16">start</name></expr>;</return>

<label pos:start="411:1" pos:end="411:5"><name pos:start="411:1" pos:end="411:4">fail</name>:</label>

    <expr_stmt pos:start="413:5" pos:end="413:18"><expr pos:start="413:5" pos:end="413:17"><call pos:start="413:5" pos:end="413:17"><name pos:start="413:5" pos:end="413:15">mmap_unlock</name><argument_list pos:start="413:16" pos:end="413:17">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="415:5" pos:end="415:14">return <expr pos:start="415:12" pos:end="415:13"><operator pos:start="415:12" pos:end="415:12">-</operator><literal type="number" pos:start="415:13" pos:end="415:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
