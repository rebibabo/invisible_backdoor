<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18029.c" pos:tabs="8"><function pos:start="1:1" pos:end="531:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">flic_decode_frame_15_16BPP</name><parameter_list pos:start="1:38" pos:end="5:65">(<parameter pos:start="1:39" pos:end="1:59"><decl pos:start="1:39" pos:end="1:59"><type pos:start="1:39" pos:end="1:59"><name pos:start="1:39" pos:end="1:52">AVCodecContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:59">avctx</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:48"><decl pos:start="3:39" pos:end="3:48"><type pos:start="3:39" pos:end="3:48"><name pos:start="3:39" pos:end="3:42">void</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:48">data</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:64"><decl pos:start="3:51" pos:end="3:64"><type pos:start="3:51" pos:end="3:64"><name pos:start="3:51" pos:end="3:53">int</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:64">data_size</name></decl></parameter>,

                                      <parameter pos:start="5:39" pos:end="5:50"><decl pos:start="5:39" pos:end="5:50"><type pos:start="5:39" pos:end="5:50"><name pos:start="5:39" pos:end="5:45">uint8_t</name> <modifier pos:start="5:47" pos:end="5:47">*</modifier></type><name pos:start="5:48" pos:end="5:50">buf</name></decl></parameter>, <parameter pos:start="5:53" pos:end="5:64"><decl pos:start="5:53" pos:end="5:64"><type pos:start="5:53" pos:end="5:64"><name pos:start="5:53" pos:end="5:55">int</name></type> <name pos:start="5:57" pos:end="5:64">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="531:1">{<block_content pos:start="13:5" pos:end="529:20">

    <comment type="block" pos:start="9:5" pos:end="9:63">/* Note, the only difference between the 15Bpp and 16Bpp */</comment>

    <comment type="block" pos:start="11:5" pos:end="11:73">/* Format is the pixel format, the packets are processed the same. */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:65"><decl pos:start="13:5" pos:end="13:64"><type pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:21">FlicDecodeContext</name> <modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:24">s</name> <init pos:start="13:26" pos:end="13:64">= <expr pos:start="13:28" pos:end="13:64"><operator pos:start="13:28" pos:end="13:28">(</operator><name pos:start="13:29" pos:end="13:45">FlicDecodeContext</name> <operator pos:start="13:47" pos:end="13:47">*</operator><operator pos:start="13:48" pos:end="13:48">)</operator><name pos:start="13:49" pos:end="13:64"><name pos:start="13:49" pos:end="13:53">avctx</name><operator pos:start="13:54" pos:end="13:55">-&gt;</operator><name pos:start="13:56" pos:end="13:64">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">stream_ptr</name> <init pos:start="17:20" pos:end="17:22">= <expr pos:start="17:22" pos:end="17:22"><literal type="number" pos:start="17:22" pos:end="17:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">pixel_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:17">char</name></type> <name pos:start="21:19" pos:end="21:30">palette_idx1</name></decl>;</decl_stmt>



    <decl_stmt pos:start="25:5" pos:end="25:28"><decl pos:start="25:5" pos:end="25:27"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:12">unsigned</name> <name pos:start="25:14" pos:end="25:16">int</name></type> <name pos:start="25:18" pos:end="25:27">frame_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:19"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:18">num_chunks</name></decl>;</decl_stmt>



    <decl_stmt pos:start="31:5" pos:end="31:28"><decl pos:start="31:5" pos:end="31:27"><type pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:12">unsigned</name> <name pos:start="31:14" pos:end="31:16">int</name></type> <name pos:start="31:18" pos:end="31:27">chunk_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:19"><decl pos:start="33:5" pos:end="33:18"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:18">chunk_type</name></decl>;</decl_stmt>



    <decl_stmt pos:start="37:5" pos:end="37:13"><decl pos:start="37:5" pos:end="37:9"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:9">i</name></decl>, <decl pos:start="37:12" pos:end="37:12"><type ref="prev" pos:start="37:5" pos:end="37:7"/><name pos:start="37:12" pos:end="37:12">j</name></decl>;</decl_stmt>



    <decl_stmt pos:start="41:5" pos:end="41:14"><decl pos:start="41:5" pos:end="41:13"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:13">lines</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:25"><decl pos:start="43:5" pos:end="43:24"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:24">compressed_lines</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:30"><decl pos:start="45:5" pos:end="45:29"><type pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:10">signed</name> <name pos:start="45:12" pos:end="45:16">short</name></type> <name pos:start="45:18" pos:end="45:29">line_packets</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:14"><decl pos:start="47:5" pos:end="47:13"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:13">y_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:17"><decl pos:start="49:5" pos:end="49:16"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:16">byte_run</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:19"><decl pos:start="51:5" pos:end="51:18"><type pos:start="51:5" pos:end="51:7"><name pos:start="51:5" pos:end="51:7">int</name></type> <name pos:start="51:9" pos:end="51:18">pixel_skip</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:24"><decl pos:start="53:5" pos:end="53:23"><type pos:start="53:5" pos:end="53:7"><name pos:start="53:5" pos:end="53:7">int</name></type> <name pos:start="53:9" pos:end="53:23">pixel_countdown</name></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:26"><decl pos:start="55:5" pos:end="55:25"><type pos:start="55:5" pos:end="55:19"><name pos:start="55:5" pos:end="55:12">unsigned</name> <name pos:start="55:14" pos:end="55:17">char</name> <modifier pos:start="55:19" pos:end="55:19">*</modifier></type><name pos:start="55:20" pos:end="55:25">pixels</name></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:14"><decl pos:start="57:5" pos:end="57:13"><type pos:start="57:5" pos:end="57:7"><name pos:start="57:5" pos:end="57:7">int</name></type> <name pos:start="57:9" pos:end="57:13">pixel</name></decl>;</decl_stmt>

    <decl_stmt pos:start="59:5" pos:end="59:20"><decl pos:start="59:5" pos:end="59:19"><type pos:start="59:5" pos:end="59:7"><name pos:start="59:5" pos:end="59:7">int</name></type> <name pos:start="59:9" pos:end="59:19">pixel_limit</name></decl>;</decl_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:27"><expr pos:start="63:5" pos:end="63:26"><name pos:start="63:5" pos:end="63:22"><name pos:start="63:5" pos:end="63:5">s</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:12">frame</name><operator pos:start="63:13" pos:end="63:13">.</operator><name pos:start="63:14" pos:end="63:22">reference</name></name> <operator pos:start="63:24" pos:end="63:24">=</operator> <literal type="number" pos:start="63:26" pos:end="63:26">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:104"><expr pos:start="65:5" pos:end="65:103"><name pos:start="65:5" pos:end="65:25"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:12">frame</name><operator pos:start="65:13" pos:end="65:13">.</operator><name pos:start="65:14" pos:end="65:25">buffer_hints</name></name> <operator pos:start="65:27" pos:end="65:27">=</operator> <name pos:start="65:29" pos:end="65:49">FF_BUFFER_HINTS_VALID</name> <operator pos:start="65:51" pos:end="65:51">|</operator> <name pos:start="65:53" pos:end="65:76">FF_BUFFER_HINTS_PRESERVE</name> <operator pos:start="65:78" pos:end="65:78">|</operator> <name pos:start="65:80" pos:end="65:103">FF_BUFFER_HINTS_REUSABLE</name></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:50">(<expr pos:start="67:9" pos:end="67:49"><call pos:start="67:9" pos:end="67:45"><name pos:start="67:9" pos:end="67:27"><name pos:start="67:9" pos:end="67:13">avctx</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:27">reget_buffer</name></name><argument_list pos:start="67:28" pos:end="67:45">(<argument pos:start="67:29" pos:end="67:33"><expr pos:start="67:29" pos:end="67:33"><name pos:start="67:29" pos:end="67:33">avctx</name></expr></argument>, <argument pos:start="67:36" pos:end="67:44"><expr pos:start="67:36" pos:end="67:44"><operator pos:start="67:36" pos:end="67:36">&amp;</operator><name pos:start="67:37" pos:end="67:44"><name pos:start="67:37" pos:end="67:37">s</name><operator pos:start="67:38" pos:end="67:39">-&gt;</operator><name pos:start="67:40" pos:end="67:44">frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="67:47" pos:end="67:47">&lt;</operator> <literal type="number" pos:start="67:49" pos:end="67:49">0</literal></expr>)</condition> <block pos:start="67:52" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:18">

        <expr_stmt pos:start="69:9" pos:end="69:63"><expr pos:start="69:9" pos:end="69:62"><call pos:start="69:9" pos:end="69:62"><name pos:start="69:9" pos:end="69:14">av_log</name><argument_list pos:start="69:15" pos:end="69:62">(<argument pos:start="69:16" pos:end="69:20"><expr pos:start="69:16" pos:end="69:20"><name pos:start="69:16" pos:end="69:20">avctx</name></expr></argument>, <argument pos:start="69:23" pos:end="69:34"><expr pos:start="69:23" pos:end="69:34"><name pos:start="69:23" pos:end="69:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:37" pos:end="69:61"><expr pos:start="69:37" pos:end="69:61"><literal type="string" pos:start="69:37" pos:end="69:61">"reget_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:18">return <expr pos:start="71:16" pos:end="71:17"><operator pos:start="71:16" pos:end="71:16">-</operator><literal type="number" pos:start="71:17" pos:end="71:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:30"><expr pos:start="77:5" pos:end="77:29"><name pos:start="77:5" pos:end="77:10">pixels</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <name pos:start="77:14" pos:end="77:29"><name pos:start="77:14" pos:end="77:14">s</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:21">frame</name><operator pos:start="77:22" pos:end="77:22">.</operator><name pos:start="77:23" pos:end="77:26">data</name><index pos:start="77:27" pos:end="77:29">[<expr pos:start="77:28" pos:end="77:28"><literal type="number" pos:start="77:28" pos:end="77:28">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:58"><expr pos:start="79:5" pos:end="79:57"><name pos:start="79:5" pos:end="79:15">pixel_limit</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <name pos:start="79:19" pos:end="79:34"><name pos:start="79:19" pos:end="79:19">s</name><operator pos:start="79:20" pos:end="79:21">-&gt;</operator><name pos:start="79:22" pos:end="79:26">avctx</name><operator pos:start="79:27" pos:end="79:28">-&gt;</operator><name pos:start="79:29" pos:end="79:34">height</name></name> <operator pos:start="79:36" pos:end="79:36">*</operator> <name pos:start="79:38" pos:end="79:57"><name pos:start="79:38" pos:end="79:38">s</name><operator pos:start="79:39" pos:end="79:40">-&gt;</operator><name pos:start="79:41" pos:end="79:45">frame</name><operator pos:start="79:46" pos:end="79:46">.</operator><name pos:start="79:47" pos:end="79:54">linesize</name><index pos:start="79:55" pos:end="79:57">[<expr pos:start="79:56" pos:end="79:56"><literal type="number" pos:start="79:56" pos:end="79:56">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:41"><expr pos:start="83:5" pos:end="83:40"><name pos:start="83:5" pos:end="83:14">frame_size</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <call pos:start="83:18" pos:end="83:40"><name pos:start="83:18" pos:end="83:22">LE_32</name><argument_list pos:start="83:23" pos:end="83:40">(<argument pos:start="83:24" pos:end="83:39"><expr pos:start="83:24" pos:end="83:39"><operator pos:start="83:24" pos:end="83:24">&amp;</operator><name pos:start="83:25" pos:end="83:39"><name pos:start="83:25" pos:end="83:27">buf</name><index pos:start="83:28" pos:end="83:39">[<expr pos:start="83:29" pos:end="83:38"><name pos:start="83:29" pos:end="83:38">stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:20"><expr pos:start="85:5" pos:end="85:19"><name pos:start="85:5" pos:end="85:14">stream_ptr</name> <operator pos:start="85:16" pos:end="85:17">+=</operator> <literal type="number" pos:start="85:19" pos:end="85:19">6</literal></expr>;</expr_stmt>  <comment type="block" pos:start="85:23" pos:end="85:49">/* skip the magic number */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:41"><expr pos:start="87:5" pos:end="87:40"><name pos:start="87:5" pos:end="87:14">num_chunks</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <call pos:start="87:18" pos:end="87:40"><name pos:start="87:18" pos:end="87:22">LE_16</name><argument_list pos:start="87:23" pos:end="87:40">(<argument pos:start="87:24" pos:end="87:39"><expr pos:start="87:24" pos:end="87:39"><operator pos:start="87:24" pos:end="87:24">&amp;</operator><name pos:start="87:25" pos:end="87:39"><name pos:start="87:25" pos:end="87:27">buf</name><index pos:start="87:28" pos:end="87:39">[<expr pos:start="87:29" pos:end="87:38"><name pos:start="87:29" pos:end="87:38">stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:21"><expr pos:start="89:5" pos:end="89:20"><name pos:start="89:5" pos:end="89:14">stream_ptr</name> <operator pos:start="89:16" pos:end="89:17">+=</operator> <literal type="number" pos:start="89:19" pos:end="89:20">10</literal></expr>;</expr_stmt>  <comment type="block" pos:start="89:24" pos:end="89:41">/* skip padding */</comment>



    <expr_stmt pos:start="93:5" pos:end="93:21"><expr pos:start="93:5" pos:end="93:20"><name pos:start="93:5" pos:end="93:14">frame_size</name> <operator pos:start="93:16" pos:end="93:17">-=</operator> <literal type="number" pos:start="93:19" pos:end="93:20">16</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:36">/* iterate through the chunks */</comment>

    <while pos:start="99:5" pos:end="505:5">while <condition pos:start="99:11" pos:end="99:48">(<expr pos:start="99:12" pos:end="99:47"><operator pos:start="99:12" pos:end="99:12">(</operator><name pos:start="99:13" pos:end="99:22">frame_size</name> <operator pos:start="99:24" pos:end="99:24">&gt;</operator> <literal type="number" pos:start="99:26" pos:end="99:26">0</literal><operator pos:start="99:27" pos:end="99:27">)</operator> <operator pos:start="99:29" pos:end="99:30">&amp;&amp;</operator> <operator pos:start="99:32" pos:end="99:32">(</operator><name pos:start="99:33" pos:end="99:42">num_chunks</name> <operator pos:start="99:44" pos:end="99:44">&gt;</operator> <literal type="number" pos:start="99:46" pos:end="99:46">0</literal><operator pos:start="99:47" pos:end="99:47">)</operator></expr>)</condition> <block pos:start="99:50" pos:end="505:5">{<block_content pos:start="101:9" pos:end="503:21">

        <expr_stmt pos:start="101:9" pos:end="101:45"><expr pos:start="101:9" pos:end="101:44"><name pos:start="101:9" pos:end="101:18">chunk_size</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <call pos:start="101:22" pos:end="101:44"><name pos:start="101:22" pos:end="101:26">LE_32</name><argument_list pos:start="101:27" pos:end="101:44">(<argument pos:start="101:28" pos:end="101:43"><expr pos:start="101:28" pos:end="101:43"><operator pos:start="101:28" pos:end="101:28">&amp;</operator><name pos:start="101:29" pos:end="101:43"><name pos:start="101:29" pos:end="101:31">buf</name><index pos:start="101:32" pos:end="101:43">[<expr pos:start="101:33" pos:end="101:42"><name pos:start="101:33" pos:end="101:42">stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:24"><expr pos:start="103:9" pos:end="103:23"><name pos:start="103:9" pos:end="103:18">stream_ptr</name> <operator pos:start="103:20" pos:end="103:21">+=</operator> <literal type="number" pos:start="103:23" pos:end="103:23">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:45"><expr pos:start="105:9" pos:end="105:44"><name pos:start="105:9" pos:end="105:18">chunk_type</name> <operator pos:start="105:20" pos:end="105:20">=</operator> <call pos:start="105:22" pos:end="105:44"><name pos:start="105:22" pos:end="105:26">LE_16</name><argument_list pos:start="105:27" pos:end="105:44">(<argument pos:start="105:28" pos:end="105:43"><expr pos:start="105:28" pos:end="105:43"><operator pos:start="105:28" pos:end="105:28">&amp;</operator><name pos:start="105:29" pos:end="105:43"><name pos:start="105:29" pos:end="105:31">buf</name><index pos:start="105:32" pos:end="105:43">[<expr pos:start="105:33" pos:end="105:42"><name pos:start="105:33" pos:end="105:42">stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:24"><expr pos:start="107:9" pos:end="107:23"><name pos:start="107:9" pos:end="107:18">stream_ptr</name> <operator pos:start="107:20" pos:end="107:21">+=</operator> <literal type="number" pos:start="107:23" pos:end="107:23">2</literal></expr>;</expr_stmt>



        <switch pos:start="111:9" pos:end="497:9">switch <condition pos:start="111:16" pos:end="111:27">(<expr pos:start="111:17" pos:end="111:26"><name pos:start="111:17" pos:end="111:26">chunk_type</name></expr>)</condition> <block pos:start="111:29" pos:end="497:9">{<block_content pos:start="113:9" pos:end="495:18">

        <case pos:start="113:9" pos:end="113:27">case <expr pos:start="113:14" pos:end="113:26"><name pos:start="113:14" pos:end="113:26">FLI_256_COLOR</name></expr>:</case>

        <case pos:start="115:9" pos:end="115:23">case <expr pos:start="115:14" pos:end="115:22"><name pos:start="115:14" pos:end="115:22">FLI_COLOR</name></expr>:</case>

            <comment type="block" pos:start="117:13" pos:end="117:92">/* For some reason, it seems that non-paletised flics do include one of these */</comment>

            <comment type="block" pos:start="119:13" pos:end="119:93">/* chunks in their first frame.  Why i do not know, it seems rather extraneous */</comment>

<comment type="block" pos:start="121:1" pos:end="121:109">/*            av_log(avctx, AV_LOG_ERROR, "Unexpected Palette chunk %d in non-paletised FLC\n",chunk_type);*/</comment>

            <expr_stmt pos:start="123:13" pos:end="123:53"><expr pos:start="123:13" pos:end="123:52"><name pos:start="123:13" pos:end="123:22">stream_ptr</name> <operator pos:start="123:24" pos:end="123:24">=</operator> <name pos:start="123:26" pos:end="123:35">stream_ptr</name> <operator pos:start="123:37" pos:end="123:37">+</operator> <name pos:start="123:39" pos:end="123:48">chunk_size</name> <operator pos:start="123:50" pos:end="123:50">-</operator> <literal type="number" pos:start="123:52" pos:end="123:52">6</literal></expr>;</expr_stmt>

            <break pos:start="125:13" pos:end="125:18">break;</break>



        <case pos:start="129:9" pos:end="129:23">case <expr pos:start="129:14" pos:end="129:22"><name pos:start="129:14" pos:end="129:22">FLI_DELTA</name></expr>:</case>

        <case pos:start="131:9" pos:end="131:24">case <expr pos:start="131:14" pos:end="131:23"><name pos:start="131:14" pos:end="131:23">FLI_DTA_LC</name></expr>:</case>

            <expr_stmt pos:start="133:13" pos:end="133:22"><expr pos:start="133:13" pos:end="133:21"><name pos:start="133:13" pos:end="133:17">y_ptr</name> <operator pos:start="133:19" pos:end="133:19">=</operator> <literal type="number" pos:start="133:21" pos:end="133:21">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:55"><expr pos:start="135:13" pos:end="135:54"><name pos:start="135:13" pos:end="135:28">compressed_lines</name> <operator pos:start="135:30" pos:end="135:30">=</operator> <call pos:start="135:32" pos:end="135:54"><name pos:start="135:32" pos:end="135:36">LE_16</name><argument_list pos:start="135:37" pos:end="135:54">(<argument pos:start="135:38" pos:end="135:53"><expr pos:start="135:38" pos:end="135:53"><operator pos:start="135:38" pos:end="135:38">&amp;</operator><name pos:start="135:39" pos:end="135:53"><name pos:start="135:39" pos:end="135:41">buf</name><index pos:start="135:42" pos:end="135:53">[<expr pos:start="135:43" pos:end="135:52"><name pos:start="135:43" pos:end="135:52">stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:28"><expr pos:start="137:13" pos:end="137:27"><name pos:start="137:13" pos:end="137:22">stream_ptr</name> <operator pos:start="137:24" pos:end="137:25">+=</operator> <literal type="number" pos:start="137:27" pos:end="137:27">2</literal></expr>;</expr_stmt>

            <while pos:start="139:13" pos:end="213:13">while <condition pos:start="139:19" pos:end="139:40">(<expr pos:start="139:20" pos:end="139:39"><name pos:start="139:20" pos:end="139:35">compressed_lines</name> <operator pos:start="139:37" pos:end="139:37">&gt;</operator> <literal type="number" pos:start="139:39" pos:end="139:39">0</literal></expr>)</condition> <block pos:start="139:42" pos:end="213:13">{<block_content pos:start="141:17" pos:end="211:17">

                <expr_stmt pos:start="141:17" pos:end="141:55"><expr pos:start="141:17" pos:end="141:54"><name pos:start="141:17" pos:end="141:28">line_packets</name> <operator pos:start="141:30" pos:end="141:30">=</operator> <call pos:start="141:32" pos:end="141:54"><name pos:start="141:32" pos:end="141:36">LE_16</name><argument_list pos:start="141:37" pos:end="141:54">(<argument pos:start="141:38" pos:end="141:53"><expr pos:start="141:38" pos:end="141:53"><operator pos:start="141:38" pos:end="141:38">&amp;</operator><name pos:start="141:39" pos:end="141:53"><name pos:start="141:39" pos:end="141:41">buf</name><index pos:start="141:42" pos:end="141:53">[<expr pos:start="141:43" pos:end="141:52"><name pos:start="141:43" pos:end="141:52">stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="143:32"><expr pos:start="143:17" pos:end="143:31"><name pos:start="143:17" pos:end="143:26">stream_ptr</name> <operator pos:start="143:28" pos:end="143:29">+=</operator> <literal type="number" pos:start="143:31" pos:end="143:31">2</literal></expr>;</expr_stmt>

                <if_stmt pos:start="145:17" pos:end="211:17"><if pos:start="145:17" pos:end="151:17">if <condition pos:start="145:20" pos:end="145:37">(<expr pos:start="145:21" pos:end="145:36"><name pos:start="145:21" pos:end="145:32">line_packets</name> <operator pos:start="145:34" pos:end="145:34">&lt;</operator> <literal type="number" pos:start="145:36" pos:end="145:36">0</literal></expr>)</condition> <block pos:start="145:39" pos:end="151:17">{<block_content pos:start="147:21" pos:end="149:65">

                    <expr_stmt pos:start="147:21" pos:end="147:49"><expr pos:start="147:21" pos:end="147:48"><name pos:start="147:21" pos:end="147:32">line_packets</name> <operator pos:start="147:34" pos:end="147:34">=</operator> <operator pos:start="147:36" pos:end="147:36">-</operator><name pos:start="147:37" pos:end="147:48">line_packets</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="149:21" pos:end="149:65"><expr pos:start="149:21" pos:end="149:64"><name pos:start="149:21" pos:end="149:25">y_ptr</name> <operator pos:start="149:27" pos:end="149:28">+=</operator> <name pos:start="149:30" pos:end="149:41">line_packets</name> <operator pos:start="149:43" pos:end="149:43">*</operator> <name pos:start="149:45" pos:end="149:64"><name pos:start="149:45" pos:end="149:45">s</name><operator pos:start="149:46" pos:end="149:47">-&gt;</operator><name pos:start="149:48" pos:end="149:52">frame</name><operator pos:start="149:53" pos:end="149:53">.</operator><name pos:start="149:54" pos:end="149:61">linesize</name><index pos:start="149:62" pos:end="149:64">[<expr pos:start="149:63" pos:end="149:63"><literal type="number" pos:start="149:63" pos:end="149:63">0</literal></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="151:19" pos:end="211:17">else <block pos:start="151:24" pos:end="211:17">{<block_content pos:start="153:21" pos:end="209:50">

                    <expr_stmt pos:start="153:21" pos:end="153:39"><expr pos:start="153:21" pos:end="153:38"><name pos:start="153:21" pos:end="153:36">compressed_lines</name><operator pos:start="153:37" pos:end="153:38">--</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="155:21" pos:end="155:38"><expr pos:start="155:21" pos:end="155:37"><name pos:start="155:21" pos:end="155:29">pixel_ptr</name> <operator pos:start="155:31" pos:end="155:31">=</operator> <name pos:start="155:33" pos:end="155:37">y_ptr</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="157:21" pos:end="157:54"><expr pos:start="157:21" pos:end="157:53"><name pos:start="157:21" pos:end="157:35">pixel_countdown</name> <operator pos:start="157:37" pos:end="157:37">=</operator> <name pos:start="157:39" pos:end="157:53"><name pos:start="157:39" pos:end="157:39">s</name><operator pos:start="157:40" pos:end="157:41">-&gt;</operator><name pos:start="157:42" pos:end="157:46">avctx</name><operator pos:start="157:47" pos:end="157:48">-&gt;</operator><name pos:start="157:49" pos:end="157:53">width</name></name></expr>;</expr_stmt>

                    <for pos:start="159:21" pos:end="205:21">for <control pos:start="159:25" pos:end="159:54">(<init pos:start="159:26" pos:end="159:31"><expr pos:start="159:26" pos:end="159:30"><name pos:start="159:26" pos:end="159:26">i</name> <operator pos:start="159:28" pos:end="159:28">=</operator> <literal type="number" pos:start="159:30" pos:end="159:30">0</literal></expr>;</init> <condition pos:start="159:33" pos:end="159:49"><expr pos:start="159:33" pos:end="159:48"><name pos:start="159:33" pos:end="159:33">i</name> <operator pos:start="159:35" pos:end="159:35">&lt;</operator> <name pos:start="159:37" pos:end="159:48">line_packets</name></expr>;</condition> <incr pos:start="159:51" pos:end="159:53"><expr pos:start="159:51" pos:end="159:53"><name pos:start="159:51" pos:end="159:51">i</name><operator pos:start="159:52" pos:end="159:53">++</operator></expr></incr>)</control> <block pos:start="159:56" pos:end="205:21">{<block_content pos:start="163:25" pos:end="203:25">

                        <comment type="block" pos:start="161:25" pos:end="161:56">/* account for the skip bytes */</comment>

                        <expr_stmt pos:start="163:25" pos:end="163:55"><expr pos:start="163:25" pos:end="163:54"><name pos:start="163:25" pos:end="163:34">pixel_skip</name> <operator pos:start="163:36" pos:end="163:36">=</operator> <name pos:start="163:38" pos:end="163:54"><name pos:start="163:38" pos:end="163:40">buf</name><index pos:start="163:41" pos:end="163:54">[<expr pos:start="163:42" pos:end="163:53"><name pos:start="163:42" pos:end="163:51">stream_ptr</name><operator pos:start="163:52" pos:end="163:53">++</operator></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="165:25" pos:end="165:52"><expr pos:start="165:25" pos:end="165:51"><name pos:start="165:25" pos:end="165:33">pixel_ptr</name> <operator pos:start="165:35" pos:end="165:36">+=</operator> <operator pos:start="165:38" pos:end="165:38">(</operator><name pos:start="165:39" pos:end="165:48">pixel_skip</name><operator pos:start="165:49" pos:end="165:49">*</operator><literal type="number" pos:start="165:50" pos:end="165:50">2</literal><operator pos:start="165:51" pos:end="165:51">)</operator></expr>;</expr_stmt> <comment type="block" pos:start="165:54" pos:end="165:80">/* Pixel is 2 bytes wide */</comment>

                        <expr_stmt pos:start="167:25" pos:end="167:54"><expr pos:start="167:25" pos:end="167:53"><name pos:start="167:25" pos:end="167:39">pixel_countdown</name> <operator pos:start="167:41" pos:end="167:42">-=</operator> <name pos:start="167:44" pos:end="167:53">pixel_skip</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="169:25" pos:end="169:68"><expr pos:start="169:25" pos:end="169:67"><name pos:start="169:25" pos:end="169:32">byte_run</name> <operator pos:start="169:34" pos:end="169:34">=</operator> <operator pos:start="169:36" pos:end="169:36">(</operator><name pos:start="169:37" pos:end="169:42">signed</name> <name pos:start="169:44" pos:end="169:47">char</name><operator pos:start="169:48" pos:end="169:48">)</operator><operator pos:start="169:49" pos:end="169:49">(</operator><name pos:start="169:50" pos:end="169:66"><name pos:start="169:50" pos:end="169:52">buf</name><index pos:start="169:53" pos:end="169:66">[<expr pos:start="169:54" pos:end="169:65"><name pos:start="169:54" pos:end="169:63">stream_ptr</name><operator pos:start="169:64" pos:end="169:65">++</operator></expr>]</index></name><operator pos:start="169:67" pos:end="169:67">)</operator></expr>;</expr_stmt>

                        <if_stmt pos:start="171:25" pos:end="203:25"><if pos:start="171:25" pos:end="189:25">if <condition pos:start="171:28" pos:end="171:41">(<expr pos:start="171:29" pos:end="171:40"><name pos:start="171:29" pos:end="171:36">byte_run</name> <operator pos:start="171:38" pos:end="171:38">&lt;</operator> <literal type="number" pos:start="171:40" pos:end="171:40">0</literal></expr>)</condition> <block pos:start="171:43" pos:end="189:25">{<block_content pos:start="173:29" pos:end="187:29">

                            <expr_stmt pos:start="173:29" pos:end="173:49"><expr pos:start="173:29" pos:end="173:48"><name pos:start="173:29" pos:end="173:36">byte_run</name> <operator pos:start="173:38" pos:end="173:38">=</operator> <operator pos:start="173:40" pos:end="173:40">-</operator><name pos:start="173:41" pos:end="173:48">byte_run</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="175:29" pos:end="175:63"><expr pos:start="175:29" pos:end="175:62"><name pos:start="175:29" pos:end="175:33">pixel</name>    <operator pos:start="175:38" pos:end="175:38">=</operator> <call pos:start="175:40" pos:end="175:62"><name pos:start="175:40" pos:end="175:44">LE_16</name><argument_list pos:start="175:45" pos:end="175:62">(<argument pos:start="175:46" pos:end="175:61"><expr pos:start="175:46" pos:end="175:61"><operator pos:start="175:46" pos:end="175:46">&amp;</operator><name pos:start="175:47" pos:end="175:61"><name pos:start="175:47" pos:end="175:49">buf</name><index pos:start="175:50" pos:end="175:61">[<expr pos:start="175:51" pos:end="175:60"><name pos:start="175:51" pos:end="175:60">stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="177:29" pos:end="177:44"><expr pos:start="177:29" pos:end="177:43"><name pos:start="177:29" pos:end="177:38">stream_ptr</name> <operator pos:start="177:40" pos:end="177:41">+=</operator> <literal type="number" pos:start="177:43" pos:end="177:43">2</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="179:29" pos:end="179:54"><expr pos:start="179:29" pos:end="179:53"><call pos:start="179:29" pos:end="179:53"><name pos:start="179:29" pos:end="179:43">CHECK_PIXEL_PTR</name><argument_list pos:start="179:44" pos:end="179:53">(<argument pos:start="179:45" pos:end="179:52"><expr pos:start="179:45" pos:end="179:52"><name pos:start="179:45" pos:end="179:52">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="181:29" pos:end="187:29">for <control pos:start="181:33" pos:end="181:80">(<init pos:start="181:34" pos:end="181:39"><expr pos:start="181:34" pos:end="181:38"><name pos:start="181:34" pos:end="181:34">j</name> <operator pos:start="181:36" pos:end="181:36">=</operator> <literal type="number" pos:start="181:38" pos:end="181:38">0</literal></expr>;</init> <condition pos:start="181:41" pos:end="181:53"><expr pos:start="181:41" pos:end="181:52"><name pos:start="181:41" pos:end="181:41">j</name> <operator pos:start="181:43" pos:end="181:43">&lt;</operator> <name pos:start="181:45" pos:end="181:52">byte_run</name></expr>;</condition> <incr pos:start="181:55" pos:end="181:79"><expr pos:start="181:55" pos:end="181:57"><name pos:start="181:55" pos:end="181:55">j</name><operator pos:start="181:56" pos:end="181:57">++</operator></expr><operator pos:start="181:58" pos:end="181:58">,</operator> <expr pos:start="181:60" pos:end="181:79"><name pos:start="181:60" pos:end="181:74">pixel_countdown</name> <operator pos:start="181:76" pos:end="181:77">-=</operator> <literal type="number" pos:start="181:79" pos:end="181:79">2</literal></expr></incr>)</control> <block pos:start="181:82" pos:end="187:29">{<block_content pos:start="183:33" pos:end="185:47">

                                <expr_stmt pos:start="183:33" pos:end="183:79"><expr pos:start="183:33" pos:end="183:78"><operator pos:start="183:33" pos:end="183:33">*</operator><operator pos:start="183:34" pos:end="183:34">(</operator><operator pos:start="183:35" pos:end="183:35">(</operator><name pos:start="183:36" pos:end="183:41">signed</name> <name pos:start="183:43" pos:end="183:47">short</name><operator pos:start="183:48" pos:end="183:48">*</operator><operator pos:start="183:49" pos:end="183:49">)</operator><operator pos:start="183:50" pos:end="183:50">(</operator><operator pos:start="183:51" pos:end="183:51">&amp;</operator><name pos:start="183:52" pos:end="183:68"><name pos:start="183:52" pos:end="183:57">pixels</name><index pos:start="183:58" pos:end="183:68">[<expr pos:start="183:59" pos:end="183:67"><name pos:start="183:59" pos:end="183:67">pixel_ptr</name></expr>]</index></name><operator pos:start="183:69" pos:end="183:69">)</operator><operator pos:start="183:70" pos:end="183:70">)</operator> <operator pos:start="183:72" pos:end="183:72">=</operator> <name pos:start="183:74" pos:end="183:78">pixel</name></expr>;</expr_stmt>

                                <expr_stmt pos:start="185:33" pos:end="185:47"><expr pos:start="185:33" pos:end="185:46"><name pos:start="185:33" pos:end="185:41">pixel_ptr</name> <operator pos:start="185:43" pos:end="185:44">+=</operator> <literal type="number" pos:start="185:46" pos:end="185:46">2</literal></expr>;</expr_stmt>

                            </block_content>}</block></for>

                        </block_content>}</block></if> <else pos:start="189:27" pos:end="203:25">else <block pos:start="189:32" pos:end="203:25">{<block_content pos:start="191:29" pos:end="201:29">

                            <expr_stmt pos:start="191:29" pos:end="191:54"><expr pos:start="191:29" pos:end="191:53"><call pos:start="191:29" pos:end="191:53"><name pos:start="191:29" pos:end="191:43">CHECK_PIXEL_PTR</name><argument_list pos:start="191:44" pos:end="191:53">(<argument pos:start="191:45" pos:end="191:52"><expr pos:start="191:45" pos:end="191:52"><name pos:start="191:45" pos:end="191:52">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="193:29" pos:end="201:29">for <control pos:start="193:33" pos:end="193:77">(<init pos:start="193:34" pos:end="193:39"><expr pos:start="193:34" pos:end="193:38"><name pos:start="193:34" pos:end="193:34">j</name> <operator pos:start="193:36" pos:end="193:36">=</operator> <literal type="number" pos:start="193:38" pos:end="193:38">0</literal></expr>;</init> <condition pos:start="193:41" pos:end="193:53"><expr pos:start="193:41" pos:end="193:52"><name pos:start="193:41" pos:end="193:41">j</name> <operator pos:start="193:43" pos:end="193:43">&lt;</operator> <name pos:start="193:45" pos:end="193:52">byte_run</name></expr>;</condition> <incr pos:start="193:55" pos:end="193:76"><expr pos:start="193:55" pos:end="193:57"><name pos:start="193:55" pos:end="193:55">j</name><operator pos:start="193:56" pos:end="193:57">++</operator></expr><operator pos:start="193:58" pos:end="193:58">,</operator> <expr pos:start="193:60" pos:end="193:76"><name pos:start="193:60" pos:end="193:74">pixel_countdown</name><operator pos:start="193:75" pos:end="193:76">--</operator></expr></incr>)</control> <block pos:start="193:79" pos:end="201:29">{<block_content pos:start="195:33" pos:end="199:47">

                                <expr_stmt pos:start="195:33" pos:end="195:97"><expr pos:start="195:33" pos:end="195:96"><operator pos:start="195:33" pos:end="195:33">*</operator><operator pos:start="195:34" pos:end="195:34">(</operator><operator pos:start="195:35" pos:end="195:35">(</operator><name pos:start="195:36" pos:end="195:41">signed</name> <name pos:start="195:43" pos:end="195:47">short</name><operator pos:start="195:48" pos:end="195:48">*</operator><operator pos:start="195:49" pos:end="195:49">)</operator><operator pos:start="195:50" pos:end="195:50">(</operator><operator pos:start="195:51" pos:end="195:51">&amp;</operator><name pos:start="195:52" pos:end="195:68"><name pos:start="195:52" pos:end="195:57">pixels</name><index pos:start="195:58" pos:end="195:68">[<expr pos:start="195:59" pos:end="195:67"><name pos:start="195:59" pos:end="195:67">pixel_ptr</name></expr>]</index></name><operator pos:start="195:69" pos:end="195:69">)</operator><operator pos:start="195:70" pos:end="195:70">)</operator> <operator pos:start="195:72" pos:end="195:72">=</operator> <call pos:start="195:74" pos:end="195:96"><name pos:start="195:74" pos:end="195:78">LE_16</name><argument_list pos:start="195:79" pos:end="195:96">(<argument pos:start="195:80" pos:end="195:95"><expr pos:start="195:80" pos:end="195:95"><operator pos:start="195:80" pos:end="195:80">&amp;</operator><name pos:start="195:81" pos:end="195:95"><name pos:start="195:81" pos:end="195:83">buf</name><index pos:start="195:84" pos:end="195:95">[<expr pos:start="195:85" pos:end="195:94"><name pos:start="195:85" pos:end="195:94">stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="197:33" pos:end="197:48"><expr pos:start="197:33" pos:end="197:47"><name pos:start="197:33" pos:end="197:42">stream_ptr</name> <operator pos:start="197:44" pos:end="197:45">+=</operator> <literal type="number" pos:start="197:47" pos:end="197:47">2</literal></expr>;</expr_stmt>

                                <expr_stmt pos:start="199:33" pos:end="199:47"><expr pos:start="199:33" pos:end="199:46"><name pos:start="199:33" pos:end="199:41">pixel_ptr</name> <operator pos:start="199:43" pos:end="199:44">+=</operator> <literal type="number" pos:start="199:46" pos:end="199:46">2</literal></expr>;</expr_stmt>

                            </block_content>}</block></for>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></for>



                    <expr_stmt pos:start="209:21" pos:end="209:50"><expr pos:start="209:21" pos:end="209:49"><name pos:start="209:21" pos:end="209:25">y_ptr</name> <operator pos:start="209:27" pos:end="209:28">+=</operator> <name pos:start="209:30" pos:end="209:49"><name pos:start="209:30" pos:end="209:30">s</name><operator pos:start="209:31" pos:end="209:32">-&gt;</operator><name pos:start="209:33" pos:end="209:37">frame</name><operator pos:start="209:38" pos:end="209:38">.</operator><name pos:start="209:39" pos:end="209:46">linesize</name><index pos:start="209:47" pos:end="209:49">[<expr pos:start="209:48" pos:end="209:48"><literal type="number" pos:start="209:48" pos:end="209:48">0</literal></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></while>

            <break pos:start="215:13" pos:end="215:18">break;</break>



        <case pos:start="219:9" pos:end="219:20">case <expr pos:start="219:14" pos:end="219:19"><name pos:start="219:14" pos:end="219:19">FLI_LC</name></expr>:</case>

            <expr_stmt pos:start="221:13" pos:end="221:90"><expr pos:start="221:13" pos:end="221:89"><call pos:start="221:13" pos:end="221:89"><name pos:start="221:13" pos:end="221:18">av_log</name><argument_list pos:start="221:19" pos:end="221:89">(<argument pos:start="221:20" pos:end="221:24"><expr pos:start="221:20" pos:end="221:24"><name pos:start="221:20" pos:end="221:24">avctx</name></expr></argument>, <argument pos:start="221:27" pos:end="221:38"><expr pos:start="221:27" pos:end="221:38"><name pos:start="221:27" pos:end="221:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="221:41" pos:end="221:88"><expr pos:start="221:41" pos:end="221:88"><literal type="string" pos:start="221:41" pos:end="221:88">"Unexpected FLI_LC chunk in non-paletised FLC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:53"><expr pos:start="223:13" pos:end="223:52"><name pos:start="223:13" pos:end="223:22">stream_ptr</name> <operator pos:start="223:24" pos:end="223:24">=</operator> <name pos:start="223:26" pos:end="223:35">stream_ptr</name> <operator pos:start="223:37" pos:end="223:37">+</operator> <name pos:start="223:39" pos:end="223:48">chunk_size</name> <operator pos:start="223:50" pos:end="223:50">-</operator> <literal type="number" pos:start="223:52" pos:end="223:52">6</literal></expr>;</expr_stmt>

            <break pos:start="225:13" pos:end="225:18">break;</break>



        <case pos:start="229:9" pos:end="229:23">case <expr pos:start="229:14" pos:end="229:22"><name pos:start="229:14" pos:end="229:22">FLI_BLACK</name></expr>:</case>

            <comment type="block" pos:start="231:13" pos:end="231:93">/* set the whole frame to 0x0000 which is balck in both 15Bpp and 16Bpp modes. */</comment>

            <expr_stmt pos:start="233:13" pos:end="235:64"><expr pos:start="233:13" pos:end="235:63"><call pos:start="233:13" pos:end="235:63"><name pos:start="233:13" pos:end="233:18">memset</name><argument_list pos:start="233:19" pos:end="235:63">(<argument pos:start="233:20" pos:end="233:25"><expr pos:start="233:20" pos:end="233:25"><name pos:start="233:20" pos:end="233:25">pixels</name></expr></argument>, <argument pos:start="233:28" pos:end="233:33"><expr pos:start="233:28" pos:end="233:33"><literal type="number" pos:start="233:28" pos:end="233:33">0x0000</literal></expr></argument>,

                   <argument pos:start="235:20" pos:end="235:62"><expr pos:start="235:20" pos:end="235:62"><name pos:start="235:20" pos:end="235:39"><name pos:start="235:20" pos:end="235:20">s</name><operator pos:start="235:21" pos:end="235:22">-&gt;</operator><name pos:start="235:23" pos:end="235:27">frame</name><operator pos:start="235:28" pos:end="235:28">.</operator><name pos:start="235:29" pos:end="235:36">linesize</name><index pos:start="235:37" pos:end="235:39">[<expr pos:start="235:38" pos:end="235:38"><literal type="number" pos:start="235:38" pos:end="235:38">0</literal></expr>]</index></name> <operator pos:start="235:41" pos:end="235:41">*</operator> <name pos:start="235:43" pos:end="235:58"><name pos:start="235:43" pos:end="235:43">s</name><operator pos:start="235:44" pos:end="235:45">-&gt;</operator><name pos:start="235:46" pos:end="235:50">avctx</name><operator pos:start="235:51" pos:end="235:52">-&gt;</operator><name pos:start="235:53" pos:end="235:58">height</name></name> <operator pos:start="235:60" pos:end="235:60">*</operator> <literal type="number" pos:start="235:62" pos:end="235:62">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="237:13" pos:end="237:18">break;</break>



        <case pos:start="241:9" pos:end="241:22">case <expr pos:start="241:14" pos:end="241:21"><name pos:start="241:14" pos:end="241:21">FLI_BRUN</name></expr>:</case>

            <expr_stmt pos:start="243:13" pos:end="243:22"><expr pos:start="243:13" pos:end="243:21"><name pos:start="243:13" pos:end="243:17">y_ptr</name> <operator pos:start="243:19" pos:end="243:19">=</operator> <literal type="number" pos:start="243:21" pos:end="243:21">0</literal></expr>;</expr_stmt>

            <for pos:start="245:13" pos:end="343:13">for <control pos:start="245:17" pos:end="245:62">(<init pos:start="245:18" pos:end="245:27"><expr pos:start="245:18" pos:end="245:26"><name pos:start="245:18" pos:end="245:22">lines</name> <operator pos:start="245:24" pos:end="245:24">=</operator> <literal type="number" pos:start="245:26" pos:end="245:26">0</literal></expr>;</init> <condition pos:start="245:29" pos:end="245:53"><expr pos:start="245:29" pos:end="245:52"><name pos:start="245:29" pos:end="245:33">lines</name> <operator pos:start="245:35" pos:end="245:35">&lt;</operator> <name pos:start="245:37" pos:end="245:52"><name pos:start="245:37" pos:end="245:37">s</name><operator pos:start="245:38" pos:end="245:39">-&gt;</operator><name pos:start="245:40" pos:end="245:44">avctx</name><operator pos:start="245:45" pos:end="245:46">-&gt;</operator><name pos:start="245:47" pos:end="245:52">height</name></name></expr>;</condition> <incr pos:start="245:55" pos:end="245:61"><expr pos:start="245:55" pos:end="245:61"><name pos:start="245:55" pos:end="245:59">lines</name><operator pos:start="245:60" pos:end="245:61">++</operator></expr></incr>)</control> <block pos:start="245:64" pos:end="343:13">{<block_content pos:start="247:17" pos:end="341:46">

                <expr_stmt pos:start="247:17" pos:end="247:34"><expr pos:start="247:17" pos:end="247:33"><name pos:start="247:17" pos:end="247:25">pixel_ptr</name> <operator pos:start="247:27" pos:end="247:27">=</operator> <name pos:start="247:29" pos:end="247:33">y_ptr</name></expr>;</expr_stmt>

                <comment type="block" pos:start="249:17" pos:end="251:37">/* disregard the line packets; instead, iterate through all

                 * pixels on a row */</comment>

                <expr_stmt pos:start="253:17" pos:end="253:29"><expr pos:start="253:17" pos:end="253:28"><name pos:start="253:17" pos:end="253:26">stream_ptr</name><operator pos:start="253:27" pos:end="253:28">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:56"><expr pos:start="255:17" pos:end="255:55"><name pos:start="255:17" pos:end="255:31">pixel_countdown</name> <operator pos:start="255:33" pos:end="255:33">=</operator> <operator pos:start="255:35" pos:end="255:35">(</operator><name pos:start="255:36" pos:end="255:50"><name pos:start="255:36" pos:end="255:36">s</name><operator pos:start="255:37" pos:end="255:38">-&gt;</operator><name pos:start="255:39" pos:end="255:43">avctx</name><operator pos:start="255:44" pos:end="255:45">-&gt;</operator><name pos:start="255:46" pos:end="255:50">width</name></name> <operator pos:start="255:52" pos:end="255:52">*</operator> <literal type="number" pos:start="255:54" pos:end="255:54">2</literal><operator pos:start="255:55" pos:end="255:55">)</operator></expr>;</expr_stmt>



                <while pos:start="259:17" pos:end="307:17">while <condition pos:start="259:23" pos:end="259:43">(<expr pos:start="259:24" pos:end="259:42"><name pos:start="259:24" pos:end="259:38">pixel_countdown</name> <operator pos:start="259:40" pos:end="259:40">&gt;</operator> <literal type="number" pos:start="259:42" pos:end="259:42">0</literal></expr>)</condition> <block pos:start="259:45" pos:end="307:17">{<block_content pos:start="261:21" pos:end="305:21">

                    <expr_stmt pos:start="261:21" pos:end="261:64"><expr pos:start="261:21" pos:end="261:63"><name pos:start="261:21" pos:end="261:28">byte_run</name> <operator pos:start="261:30" pos:end="261:30">=</operator> <operator pos:start="261:32" pos:end="261:32">(</operator><name pos:start="261:33" pos:end="261:38">signed</name> <name pos:start="261:40" pos:end="261:43">char</name><operator pos:start="261:44" pos:end="261:44">)</operator><operator pos:start="261:45" pos:end="261:45">(</operator><name pos:start="261:46" pos:end="261:62"><name pos:start="261:46" pos:end="261:48">buf</name><index pos:start="261:49" pos:end="261:62">[<expr pos:start="261:50" pos:end="261:61"><name pos:start="261:50" pos:end="261:59">stream_ptr</name><operator pos:start="261:60" pos:end="261:61">++</operator></expr>]</index></name><operator pos:start="261:63" pos:end="261:63">)</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="263:21" pos:end="305:21"><if pos:start="263:21" pos:end="283:21">if <condition pos:start="263:24" pos:end="263:37">(<expr pos:start="263:25" pos:end="263:36"><name pos:start="263:25" pos:end="263:32">byte_run</name> <operator pos:start="263:34" pos:end="263:34">&gt;</operator> <literal type="number" pos:start="263:36" pos:end="263:36">0</literal></expr>)</condition> <block pos:start="263:39" pos:end="283:21">{<block_content pos:start="265:25" pos:end="281:25">

                        <expr_stmt pos:start="265:25" pos:end="265:57"><expr pos:start="265:25" pos:end="265:56"><name pos:start="265:25" pos:end="265:36">palette_idx1</name> <operator pos:start="265:38" pos:end="265:38">=</operator> <name pos:start="265:40" pos:end="265:56"><name pos:start="265:40" pos:end="265:42">buf</name><index pos:start="265:43" pos:end="265:56">[<expr pos:start="265:44" pos:end="265:55"><name pos:start="265:44" pos:end="265:53">stream_ptr</name><operator pos:start="265:54" pos:end="265:55">++</operator></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="267:25" pos:end="267:50"><expr pos:start="267:25" pos:end="267:49"><call pos:start="267:25" pos:end="267:49"><name pos:start="267:25" pos:end="267:39">CHECK_PIXEL_PTR</name><argument_list pos:start="267:40" pos:end="267:49">(<argument pos:start="267:41" pos:end="267:48"><expr pos:start="267:41" pos:end="267:48"><name pos:start="267:41" pos:end="267:48">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="269:25" pos:end="281:25">for <control pos:start="269:29" pos:end="269:54">(<init pos:start="269:30" pos:end="269:35"><expr pos:start="269:30" pos:end="269:34"><name pos:start="269:30" pos:end="269:30">j</name> <operator pos:start="269:32" pos:end="269:32">=</operator> <literal type="number" pos:start="269:34" pos:end="269:34">0</literal></expr>;</init> <condition pos:start="269:37" pos:end="269:49"><expr pos:start="269:37" pos:end="269:48"><name pos:start="269:37" pos:end="269:37">j</name> <operator pos:start="269:39" pos:end="269:39">&lt;</operator> <name pos:start="269:41" pos:end="269:48">byte_run</name></expr>;</condition> <incr pos:start="269:51" pos:end="269:53"><expr pos:start="269:51" pos:end="269:53"><name pos:start="269:51" pos:end="269:51">j</name><operator pos:start="269:52" pos:end="269:53">++</operator></expr></incr>)</control> <block pos:start="269:56" pos:end="281:25">{<block_content pos:start="271:29" pos:end="279:56">

                            <expr_stmt pos:start="271:29" pos:end="271:63"><expr pos:start="271:29" pos:end="271:62"><name pos:start="271:29" pos:end="271:47"><name pos:start="271:29" pos:end="271:34">pixels</name><index pos:start="271:35" pos:end="271:47">[<expr pos:start="271:36" pos:end="271:46"><name pos:start="271:36" pos:end="271:44">pixel_ptr</name><operator pos:start="271:45" pos:end="271:46">++</operator></expr>]</index></name> <operator pos:start="271:49" pos:end="271:49">=</operator> <name pos:start="271:51" pos:end="271:62">palette_idx1</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="273:29" pos:end="273:46"><expr pos:start="273:29" pos:end="273:45"><name pos:start="273:29" pos:end="273:43">pixel_countdown</name><operator pos:start="273:44" pos:end="273:45">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="275:29" pos:end="279:56"><if pos:start="275:29" pos:end="279:56">if <condition pos:start="275:32" pos:end="275:52">(<expr pos:start="275:33" pos:end="275:51"><name pos:start="275:33" pos:end="275:47">pixel_countdown</name> <operator pos:start="275:49" pos:end="275:49">&lt;</operator> <literal type="number" pos:start="275:51" pos:end="275:51">0</literal></expr>)</condition><block type="pseudo" pos:start="277:33" pos:end="279:56"><block_content pos:start="277:33" pos:end="279:56">

                                <expr_stmt pos:start="277:33" pos:end="279:56"><expr pos:start="277:33" pos:end="279:55"><call pos:start="277:33" pos:end="279:55"><name pos:start="277:33" pos:end="277:38">av_log</name><argument_list pos:start="277:39" pos:end="279:55">(<argument pos:start="277:40" pos:end="277:44"><expr pos:start="277:40" pos:end="277:44"><name pos:start="277:40" pos:end="277:44">avctx</name></expr></argument>, <argument pos:start="277:47" pos:end="277:58"><expr pos:start="277:47" pos:end="277:58"><name pos:start="277:47" pos:end="277:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="277:61" pos:end="277:88"><expr pos:start="277:61" pos:end="277:88"><literal type="string" pos:start="277:61" pos:end="277:88">"pixel_countdown &lt; 0 (%d)\n"</literal></expr></argument>,

                                       <argument pos:start="279:40" pos:end="279:54"><expr pos:start="279:40" pos:end="279:54"><name pos:start="279:40" pos:end="279:54">pixel_countdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if> <else pos:start="283:23" pos:end="305:21">else <block pos:start="283:28" pos:end="305:21">{<block_content pos:start="285:25" pos:end="303:25">  <comment type="block" pos:start="283:31" pos:end="283:62">/* copy bytes if byte_run &lt; 0 */</comment>

                        <expr_stmt pos:start="285:25" pos:end="285:45"><expr pos:start="285:25" pos:end="285:44"><name pos:start="285:25" pos:end="285:32">byte_run</name> <operator pos:start="285:34" pos:end="285:34">=</operator> <operator pos:start="285:36" pos:end="285:36">-</operator><name pos:start="285:37" pos:end="285:44">byte_run</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="287:25" pos:end="287:50"><expr pos:start="287:25" pos:end="287:49"><call pos:start="287:25" pos:end="287:49"><name pos:start="287:25" pos:end="287:39">CHECK_PIXEL_PTR</name><argument_list pos:start="287:40" pos:end="287:49">(<argument pos:start="287:41" pos:end="287:48"><expr pos:start="287:41" pos:end="287:48"><name pos:start="287:41" pos:end="287:48">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="289:25" pos:end="303:25">for <control pos:start="289:29" pos:end="289:54">(<init pos:start="289:30" pos:end="289:35"><expr pos:start="289:30" pos:end="289:34"><name pos:start="289:30" pos:end="289:30">j</name> <operator pos:start="289:32" pos:end="289:32">=</operator> <literal type="number" pos:start="289:34" pos:end="289:34">0</literal></expr>;</init> <condition pos:start="289:37" pos:end="289:49"><expr pos:start="289:37" pos:end="289:48"><name pos:start="289:37" pos:end="289:37">j</name> <operator pos:start="289:39" pos:end="289:39">&lt;</operator> <name pos:start="289:41" pos:end="289:48">byte_run</name></expr>;</condition> <incr pos:start="289:51" pos:end="289:53"><expr pos:start="289:51" pos:end="289:53"><name pos:start="289:51" pos:end="289:51">j</name><operator pos:start="289:52" pos:end="289:53">++</operator></expr></incr>)</control> <block pos:start="289:56" pos:end="303:25">{<block_content pos:start="291:29" pos:end="301:56">

                            <expr_stmt pos:start="291:29" pos:end="291:61"><expr pos:start="291:29" pos:end="291:60"><name pos:start="291:29" pos:end="291:40">palette_idx1</name> <operator pos:start="291:42" pos:end="291:42">=</operator> <name pos:start="291:44" pos:end="291:60"><name pos:start="291:44" pos:end="291:46">buf</name><index pos:start="291:47" pos:end="291:60">[<expr pos:start="291:48" pos:end="291:59"><name pos:start="291:48" pos:end="291:57">stream_ptr</name><operator pos:start="291:58" pos:end="291:59">++</operator></expr>]</index></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="293:29" pos:end="293:63"><expr pos:start="293:29" pos:end="293:62"><name pos:start="293:29" pos:end="293:47"><name pos:start="293:29" pos:end="293:34">pixels</name><index pos:start="293:35" pos:end="293:47">[<expr pos:start="293:36" pos:end="293:46"><name pos:start="293:36" pos:end="293:44">pixel_ptr</name><operator pos:start="293:45" pos:end="293:46">++</operator></expr>]</index></name> <operator pos:start="293:49" pos:end="293:49">=</operator> <name pos:start="293:51" pos:end="293:62">palette_idx1</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="295:29" pos:end="295:46"><expr pos:start="295:29" pos:end="295:45"><name pos:start="295:29" pos:end="295:43">pixel_countdown</name><operator pos:start="295:44" pos:end="295:45">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="297:29" pos:end="301:56"><if pos:start="297:29" pos:end="301:56">if <condition pos:start="297:32" pos:end="297:52">(<expr pos:start="297:33" pos:end="297:51"><name pos:start="297:33" pos:end="297:47">pixel_countdown</name> <operator pos:start="297:49" pos:end="297:49">&lt;</operator> <literal type="number" pos:start="297:51" pos:end="297:51">0</literal></expr>)</condition><block type="pseudo" pos:start="299:33" pos:end="301:56"><block_content pos:start="299:33" pos:end="301:56">

                                <expr_stmt pos:start="299:33" pos:end="301:56"><expr pos:start="299:33" pos:end="301:55"><call pos:start="299:33" pos:end="301:55"><name pos:start="299:33" pos:end="299:38">av_log</name><argument_list pos:start="299:39" pos:end="301:55">(<argument pos:start="299:40" pos:end="299:44"><expr pos:start="299:40" pos:end="299:44"><name pos:start="299:40" pos:end="299:44">avctx</name></expr></argument>, <argument pos:start="299:47" pos:end="299:58"><expr pos:start="299:47" pos:end="299:58"><name pos:start="299:47" pos:end="299:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="299:61" pos:end="299:88"><expr pos:start="299:61" pos:end="299:88"><literal type="string" pos:start="299:61" pos:end="299:88">"pixel_countdown &lt; 0 (%d)\n"</literal></expr></argument>,

                                       <argument pos:start="301:40" pos:end="301:54"><expr pos:start="301:40" pos:end="301:54"><name pos:start="301:40" pos:end="301:54">pixel_countdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></while>



                <comment type="block" pos:start="311:17" pos:end="319:19">/* Now FLX is strange, in that it is "byte" as opposed to "pixel" run length compressed.

                 * This doesnt give us any good oportunity to perform word endian conversion

                 * during decompression. So if its requried (ie, this isnt a LE target, we do

                 * a second pass over the line here, swapping the bytes.

                 */</comment>

                <expr_stmt pos:start="321:17" pos:end="321:31"><expr pos:start="321:17" pos:end="321:30"><name pos:start="321:17" pos:end="321:21">pixel</name> <operator pos:start="321:23" pos:end="321:23">=</operator> <literal type="number" pos:start="321:25" pos:end="321:30">0xFF00</literal></expr>;</expr_stmt>

                <if_stmt pos:start="323:17" pos:end="339:17"><if pos:start="323:17" pos:end="339:17">if <condition pos:start="323:20" pos:end="323:44">(<expr pos:start="323:21" pos:end="323:43"><literal type="number" pos:start="323:21" pos:end="323:26">0xFF00</literal> <operator pos:start="323:28" pos:end="323:29">!=</operator> <call pos:start="323:31" pos:end="323:43"><name pos:start="323:31" pos:end="323:35">LE_16</name><argument_list pos:start="323:36" pos:end="323:43">(<argument pos:start="323:37" pos:end="323:42"><expr pos:start="323:37" pos:end="323:42"><operator pos:start="323:37" pos:end="323:37">&amp;</operator><name pos:start="323:38" pos:end="323:42">pixel</name></expr></argument>)</argument_list></call></expr>)</condition> <comment type="block" pos:start="323:46" pos:end="323:80">/* Check if its not an LE Target */</comment>

                <block pos:start="325:17" pos:end="339:17">{<block_content pos:start="327:19" pos:end="337:19">

                  <expr_stmt pos:start="327:19" pos:end="327:36"><expr pos:start="327:19" pos:end="327:35"><name pos:start="327:19" pos:end="327:27">pixel_ptr</name> <operator pos:start="327:29" pos:end="327:29">=</operator> <name pos:start="327:31" pos:end="327:35">y_ptr</name></expr>;</expr_stmt>

                  <expr_stmt pos:start="329:19" pos:end="329:52"><expr pos:start="329:19" pos:end="329:51"><name pos:start="329:19" pos:end="329:33">pixel_countdown</name> <operator pos:start="329:35" pos:end="329:35">=</operator> <name pos:start="329:37" pos:end="329:51"><name pos:start="329:37" pos:end="329:37">s</name><operator pos:start="329:38" pos:end="329:39">-&gt;</operator><name pos:start="329:40" pos:end="329:44">avctx</name><operator pos:start="329:45" pos:end="329:46">-&gt;</operator><name pos:start="329:47" pos:end="329:51">width</name></name></expr>;</expr_stmt>

                  <while pos:start="331:19" pos:end="337:19">while <condition pos:start="331:25" pos:end="331:45">(<expr pos:start="331:26" pos:end="331:44"><name pos:start="331:26" pos:end="331:40">pixel_countdown</name> <operator pos:start="331:42" pos:end="331:42">&gt;</operator> <literal type="number" pos:start="331:44" pos:end="331:44">0</literal></expr>)</condition> <block pos:start="331:47" pos:end="337:19">{<block_content pos:start="333:21" pos:end="335:35">

                    <expr_stmt pos:start="333:21" pos:end="333:84"><expr pos:start="333:21" pos:end="333:83"><operator pos:start="333:21" pos:end="333:21">*</operator><operator pos:start="333:22" pos:end="333:22">(</operator><operator pos:start="333:23" pos:end="333:23">(</operator><name pos:start="333:24" pos:end="333:29">signed</name> <name pos:start="333:31" pos:end="333:35">short</name><operator pos:start="333:36" pos:end="333:36">*</operator><operator pos:start="333:37" pos:end="333:37">)</operator><operator pos:start="333:38" pos:end="333:38">(</operator><operator pos:start="333:39" pos:end="333:39">&amp;</operator><name pos:start="333:40" pos:end="333:56"><name pos:start="333:40" pos:end="333:45">pixels</name><index pos:start="333:46" pos:end="333:56">[<expr pos:start="333:47" pos:end="333:55"><name pos:start="333:47" pos:end="333:55">pixel_ptr</name></expr>]</index></name><operator pos:start="333:57" pos:end="333:57">)</operator><operator pos:start="333:58" pos:end="333:58">)</operator> <operator pos:start="333:60" pos:end="333:60">=</operator> <call pos:start="333:62" pos:end="333:83"><name pos:start="333:62" pos:end="333:66">LE_16</name><argument_list pos:start="333:67" pos:end="333:83">(<argument pos:start="333:68" pos:end="333:82"><expr pos:start="333:68" pos:end="333:82"><operator pos:start="333:68" pos:end="333:68">&amp;</operator><name pos:start="333:69" pos:end="333:82"><name pos:start="333:69" pos:end="333:71">buf</name><index pos:start="333:72" pos:end="333:82">[<expr pos:start="333:73" pos:end="333:81"><name pos:start="333:73" pos:end="333:81">pixel_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="335:21" pos:end="335:35"><expr pos:start="335:21" pos:end="335:34"><name pos:start="335:21" pos:end="335:29">pixel_ptr</name> <operator pos:start="335:31" pos:end="335:32">+=</operator> <literal type="number" pos:start="335:34" pos:end="335:34">2</literal></expr>;</expr_stmt>

                  </block_content>}</block></while>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="341:17" pos:end="341:46"><expr pos:start="341:17" pos:end="341:45"><name pos:start="341:17" pos:end="341:21">y_ptr</name> <operator pos:start="341:23" pos:end="341:24">+=</operator> <name pos:start="341:26" pos:end="341:45"><name pos:start="341:26" pos:end="341:26">s</name><operator pos:start="341:27" pos:end="341:28">-&gt;</operator><name pos:start="341:29" pos:end="341:33">frame</name><operator pos:start="341:34" pos:end="341:34">.</operator><name pos:start="341:35" pos:end="341:42">linesize</name><index pos:start="341:43" pos:end="341:45">[<expr pos:start="341:44" pos:end="341:44"><literal type="number" pos:start="341:44" pos:end="341:44">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="345:13" pos:end="345:18">break;</break>



        <case pos:start="349:9" pos:end="349:26">case <expr pos:start="349:14" pos:end="349:25"><name pos:start="349:14" pos:end="349:25">FLI_DTA_BRUN</name></expr>:</case>

            <expr_stmt pos:start="351:13" pos:end="351:22"><expr pos:start="351:13" pos:end="351:21"><name pos:start="351:13" pos:end="351:17">y_ptr</name> <operator pos:start="351:19" pos:end="351:19">=</operator> <literal type="number" pos:start="351:21" pos:end="351:21">0</literal></expr>;</expr_stmt>

            <for pos:start="353:13" pos:end="427:13">for <control pos:start="353:17" pos:end="353:62">(<init pos:start="353:18" pos:end="353:27"><expr pos:start="353:18" pos:end="353:26"><name pos:start="353:18" pos:end="353:22">lines</name> <operator pos:start="353:24" pos:end="353:24">=</operator> <literal type="number" pos:start="353:26" pos:end="353:26">0</literal></expr>;</init> <condition pos:start="353:29" pos:end="353:53"><expr pos:start="353:29" pos:end="353:52"><name pos:start="353:29" pos:end="353:33">lines</name> <operator pos:start="353:35" pos:end="353:35">&lt;</operator> <name pos:start="353:37" pos:end="353:52"><name pos:start="353:37" pos:end="353:37">s</name><operator pos:start="353:38" pos:end="353:39">-&gt;</operator><name pos:start="353:40" pos:end="353:44">avctx</name><operator pos:start="353:45" pos:end="353:46">-&gt;</operator><name pos:start="353:47" pos:end="353:52">height</name></name></expr>;</condition> <incr pos:start="353:55" pos:end="353:61"><expr pos:start="353:55" pos:end="353:61"><name pos:start="353:55" pos:end="353:59">lines</name><operator pos:start="353:60" pos:end="353:61">++</operator></expr></incr>)</control> <block pos:start="353:64" pos:end="427:13">{<block_content pos:start="355:17" pos:end="425:46">

                <expr_stmt pos:start="355:17" pos:end="355:34"><expr pos:start="355:17" pos:end="355:33"><name pos:start="355:17" pos:end="355:25">pixel_ptr</name> <operator pos:start="355:27" pos:end="355:27">=</operator> <name pos:start="355:29" pos:end="355:33">y_ptr</name></expr>;</expr_stmt>

                <comment type="block" pos:start="357:17" pos:end="359:37">/* disregard the line packets; instead, iterate through all

                 * pixels on a row */</comment>

                <expr_stmt pos:start="361:17" pos:end="361:29"><expr pos:start="361:17" pos:end="361:28"><name pos:start="361:17" pos:end="361:26">stream_ptr</name><operator pos:start="361:27" pos:end="361:28">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="363:17" pos:end="363:50"><expr pos:start="363:17" pos:end="363:49"><name pos:start="363:17" pos:end="363:31">pixel_countdown</name> <operator pos:start="363:33" pos:end="363:33">=</operator> <name pos:start="363:35" pos:end="363:49"><name pos:start="363:35" pos:end="363:35">s</name><operator pos:start="363:36" pos:end="363:37">-&gt;</operator><name pos:start="363:38" pos:end="363:42">avctx</name><operator pos:start="363:43" pos:end="363:44">-&gt;</operator><name pos:start="363:45" pos:end="363:49">width</name></name></expr>;</expr_stmt> <comment type="block" pos:start="363:52" pos:end="363:86">/* Width is in pixels, not bytes */</comment>



                <while pos:start="367:17" pos:end="421:17">while <condition pos:start="367:23" pos:end="367:43">(<expr pos:start="367:24" pos:end="367:42"><name pos:start="367:24" pos:end="367:38">pixel_countdown</name> <operator pos:start="367:40" pos:end="367:40">&gt;</operator> <literal type="number" pos:start="367:42" pos:end="367:42">0</literal></expr>)</condition> <block pos:start="367:45" pos:end="421:17">{<block_content pos:start="369:21" pos:end="419:21">

                    <expr_stmt pos:start="369:21" pos:end="369:64"><expr pos:start="369:21" pos:end="369:63"><name pos:start="369:21" pos:end="369:28">byte_run</name> <operator pos:start="369:30" pos:end="369:30">=</operator> <operator pos:start="369:32" pos:end="369:32">(</operator><name pos:start="369:33" pos:end="369:38">signed</name> <name pos:start="369:40" pos:end="369:43">char</name><operator pos:start="369:44" pos:end="369:44">)</operator><operator pos:start="369:45" pos:end="369:45">(</operator><name pos:start="369:46" pos:end="369:62"><name pos:start="369:46" pos:end="369:48">buf</name><index pos:start="369:49" pos:end="369:62">[<expr pos:start="369:50" pos:end="369:61"><name pos:start="369:50" pos:end="369:59">stream_ptr</name><operator pos:start="369:60" pos:end="369:61">++</operator></expr>]</index></name><operator pos:start="369:63" pos:end="369:63">)</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="371:21" pos:end="419:21"><if pos:start="371:21" pos:end="395:21">if <condition pos:start="371:24" pos:end="371:37">(<expr pos:start="371:25" pos:end="371:36"><name pos:start="371:25" pos:end="371:32">byte_run</name> <operator pos:start="371:34" pos:end="371:34">&gt;</operator> <literal type="number" pos:start="371:36" pos:end="371:36">0</literal></expr>)</condition> <block pos:start="371:39" pos:end="395:21">{<block_content pos:start="373:25" pos:end="393:25">

                        <expr_stmt pos:start="373:25" pos:end="373:59"><expr pos:start="373:25" pos:end="373:58"><name pos:start="373:25" pos:end="373:29">pixel</name>    <operator pos:start="373:34" pos:end="373:34">=</operator> <call pos:start="373:36" pos:end="373:58"><name pos:start="373:36" pos:end="373:40">LE_16</name><argument_list pos:start="373:41" pos:end="373:58">(<argument pos:start="373:42" pos:end="373:57"><expr pos:start="373:42" pos:end="373:57"><operator pos:start="373:42" pos:end="373:42">&amp;</operator><name pos:start="373:43" pos:end="373:57"><name pos:start="373:43" pos:end="373:45">buf</name><index pos:start="373:46" pos:end="373:57">[<expr pos:start="373:47" pos:end="373:56"><name pos:start="373:47" pos:end="373:56">stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="375:25" pos:end="375:40"><expr pos:start="375:25" pos:end="375:39"><name pos:start="375:25" pos:end="375:34">stream_ptr</name> <operator pos:start="375:36" pos:end="375:37">+=</operator> <literal type="number" pos:start="375:39" pos:end="375:39">2</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="377:25" pos:end="377:50"><expr pos:start="377:25" pos:end="377:49"><call pos:start="377:25" pos:end="377:49"><name pos:start="377:25" pos:end="377:39">CHECK_PIXEL_PTR</name><argument_list pos:start="377:40" pos:end="377:49">(<argument pos:start="377:41" pos:end="377:48"><expr pos:start="377:41" pos:end="377:48"><name pos:start="377:41" pos:end="377:48">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="379:25" pos:end="393:25">for <control pos:start="379:29" pos:end="379:54">(<init pos:start="379:30" pos:end="379:35"><expr pos:start="379:30" pos:end="379:34"><name pos:start="379:30" pos:end="379:30">j</name> <operator pos:start="379:32" pos:end="379:32">=</operator> <literal type="number" pos:start="379:34" pos:end="379:34">0</literal></expr>;</init> <condition pos:start="379:37" pos:end="379:49"><expr pos:start="379:37" pos:end="379:48"><name pos:start="379:37" pos:end="379:37">j</name> <operator pos:start="379:39" pos:end="379:39">&lt;</operator> <name pos:start="379:41" pos:end="379:48">byte_run</name></expr>;</condition> <incr pos:start="379:51" pos:end="379:53"><expr pos:start="379:51" pos:end="379:53"><name pos:start="379:51" pos:end="379:51">j</name><operator pos:start="379:52" pos:end="379:53">++</operator></expr></incr>)</control> <block pos:start="379:56" pos:end="393:25">{<block_content pos:start="381:29" pos:end="391:56">

                            <expr_stmt pos:start="381:29" pos:end="381:75"><expr pos:start="381:29" pos:end="381:74"><operator pos:start="381:29" pos:end="381:29">*</operator><operator pos:start="381:30" pos:end="381:30">(</operator><operator pos:start="381:31" pos:end="381:31">(</operator><name pos:start="381:32" pos:end="381:37">signed</name> <name pos:start="381:39" pos:end="381:43">short</name><operator pos:start="381:44" pos:end="381:44">*</operator><operator pos:start="381:45" pos:end="381:45">)</operator><operator pos:start="381:46" pos:end="381:46">(</operator><operator pos:start="381:47" pos:end="381:47">&amp;</operator><name pos:start="381:48" pos:end="381:64"><name pos:start="381:48" pos:end="381:53">pixels</name><index pos:start="381:54" pos:end="381:64">[<expr pos:start="381:55" pos:end="381:63"><name pos:start="381:55" pos:end="381:63">pixel_ptr</name></expr>]</index></name><operator pos:start="381:65" pos:end="381:65">)</operator><operator pos:start="381:66" pos:end="381:66">)</operator> <operator pos:start="381:68" pos:end="381:68">=</operator> <name pos:start="381:70" pos:end="381:74">pixel</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="383:29" pos:end="383:43"><expr pos:start="383:29" pos:end="383:42"><name pos:start="383:29" pos:end="383:37">pixel_ptr</name> <operator pos:start="383:39" pos:end="383:40">+=</operator> <literal type="number" pos:start="383:42" pos:end="383:42">2</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="385:29" pos:end="385:46"><expr pos:start="385:29" pos:end="385:45"><name pos:start="385:29" pos:end="385:43">pixel_countdown</name><operator pos:start="385:44" pos:end="385:45">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="387:29" pos:end="391:56"><if pos:start="387:29" pos:end="391:56">if <condition pos:start="387:32" pos:end="387:52">(<expr pos:start="387:33" pos:end="387:51"><name pos:start="387:33" pos:end="387:47">pixel_countdown</name> <operator pos:start="387:49" pos:end="387:49">&lt;</operator> <literal type="number" pos:start="387:51" pos:end="387:51">0</literal></expr>)</condition><block type="pseudo" pos:start="389:33" pos:end="391:56"><block_content pos:start="389:33" pos:end="391:56">

                                <expr_stmt pos:start="389:33" pos:end="391:56"><expr pos:start="389:33" pos:end="391:55"><call pos:start="389:33" pos:end="391:55"><name pos:start="389:33" pos:end="389:38">av_log</name><argument_list pos:start="389:39" pos:end="391:55">(<argument pos:start="389:40" pos:end="389:44"><expr pos:start="389:40" pos:end="389:44"><name pos:start="389:40" pos:end="389:44">avctx</name></expr></argument>, <argument pos:start="389:47" pos:end="389:58"><expr pos:start="389:47" pos:end="389:58"><name pos:start="389:47" pos:end="389:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="389:61" pos:end="389:88"><expr pos:start="389:61" pos:end="389:88"><literal type="string" pos:start="389:61" pos:end="389:88">"pixel_countdown &lt; 0 (%d)\n"</literal></expr></argument>,

                                       <argument pos:start="391:40" pos:end="391:54"><expr pos:start="391:40" pos:end="391:54"><name pos:start="391:40" pos:end="391:54">pixel_countdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if> <else pos:start="395:23" pos:end="419:21">else <block pos:start="395:28" pos:end="419:21">{<block_content pos:start="397:25" pos:end="417:25">  <comment type="block" pos:start="395:31" pos:end="395:63">/* copy pixels if byte_run &lt; 0 */</comment>

                        <expr_stmt pos:start="397:25" pos:end="397:45"><expr pos:start="397:25" pos:end="397:44"><name pos:start="397:25" pos:end="397:32">byte_run</name> <operator pos:start="397:34" pos:end="397:34">=</operator> <operator pos:start="397:36" pos:end="397:36">-</operator><name pos:start="397:37" pos:end="397:44">byte_run</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="399:25" pos:end="399:50"><expr pos:start="399:25" pos:end="399:49"><call pos:start="399:25" pos:end="399:49"><name pos:start="399:25" pos:end="399:39">CHECK_PIXEL_PTR</name><argument_list pos:start="399:40" pos:end="399:49">(<argument pos:start="399:41" pos:end="399:48"><expr pos:start="399:41" pos:end="399:48"><name pos:start="399:41" pos:end="399:48">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="401:25" pos:end="417:25">for <control pos:start="401:29" pos:end="401:54">(<init pos:start="401:30" pos:end="401:35"><expr pos:start="401:30" pos:end="401:34"><name pos:start="401:30" pos:end="401:30">j</name> <operator pos:start="401:32" pos:end="401:32">=</operator> <literal type="number" pos:start="401:34" pos:end="401:34">0</literal></expr>;</init> <condition pos:start="401:37" pos:end="401:49"><expr pos:start="401:37" pos:end="401:48"><name pos:start="401:37" pos:end="401:37">j</name> <operator pos:start="401:39" pos:end="401:39">&lt;</operator> <name pos:start="401:41" pos:end="401:48">byte_run</name></expr>;</condition> <incr pos:start="401:51" pos:end="401:53"><expr pos:start="401:51" pos:end="401:53"><name pos:start="401:51" pos:end="401:51">j</name><operator pos:start="401:52" pos:end="401:53">++</operator></expr></incr>)</control> <block pos:start="401:56" pos:end="417:25">{<block_content pos:start="403:29" pos:end="415:56">

                            <expr_stmt pos:start="403:29" pos:end="403:93"><expr pos:start="403:29" pos:end="403:92"><operator pos:start="403:29" pos:end="403:29">*</operator><operator pos:start="403:30" pos:end="403:30">(</operator><operator pos:start="403:31" pos:end="403:31">(</operator><name pos:start="403:32" pos:end="403:37">signed</name> <name pos:start="403:39" pos:end="403:43">short</name><operator pos:start="403:44" pos:end="403:44">*</operator><operator pos:start="403:45" pos:end="403:45">)</operator><operator pos:start="403:46" pos:end="403:46">(</operator><operator pos:start="403:47" pos:end="403:47">&amp;</operator><name pos:start="403:48" pos:end="403:64"><name pos:start="403:48" pos:end="403:53">pixels</name><index pos:start="403:54" pos:end="403:64">[<expr pos:start="403:55" pos:end="403:63"><name pos:start="403:55" pos:end="403:63">pixel_ptr</name></expr>]</index></name><operator pos:start="403:65" pos:end="403:65">)</operator><operator pos:start="403:66" pos:end="403:66">)</operator> <operator pos:start="403:68" pos:end="403:68">=</operator> <call pos:start="403:70" pos:end="403:92"><name pos:start="403:70" pos:end="403:74">LE_16</name><argument_list pos:start="403:75" pos:end="403:92">(<argument pos:start="403:76" pos:end="403:91"><expr pos:start="403:76" pos:end="403:91"><operator pos:start="403:76" pos:end="403:76">&amp;</operator><name pos:start="403:77" pos:end="403:91"><name pos:start="403:77" pos:end="403:79">buf</name><index pos:start="403:80" pos:end="403:91">[<expr pos:start="403:81" pos:end="403:90"><name pos:start="403:81" pos:end="403:90">stream_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="405:29" pos:end="405:44"><expr pos:start="405:29" pos:end="405:43"><name pos:start="405:29" pos:end="405:38">stream_ptr</name> <operator pos:start="405:40" pos:end="405:41">+=</operator> <literal type="number" pos:start="405:43" pos:end="405:43">2</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="407:29" pos:end="407:44"><expr pos:start="407:29" pos:end="407:43"><name pos:start="407:29" pos:end="407:37">pixel_ptr</name>  <operator pos:start="407:40" pos:end="407:41">+=</operator> <literal type="number" pos:start="407:43" pos:end="407:43">2</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="409:29" pos:end="409:46"><expr pos:start="409:29" pos:end="409:45"><name pos:start="409:29" pos:end="409:43">pixel_countdown</name><operator pos:start="409:44" pos:end="409:45">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="411:29" pos:end="415:56"><if pos:start="411:29" pos:end="415:56">if <condition pos:start="411:32" pos:end="411:52">(<expr pos:start="411:33" pos:end="411:51"><name pos:start="411:33" pos:end="411:47">pixel_countdown</name> <operator pos:start="411:49" pos:end="411:49">&lt;</operator> <literal type="number" pos:start="411:51" pos:end="411:51">0</literal></expr>)</condition><block type="pseudo" pos:start="413:33" pos:end="415:56"><block_content pos:start="413:33" pos:end="415:56">

                                <expr_stmt pos:start="413:33" pos:end="415:56"><expr pos:start="413:33" pos:end="415:55"><call pos:start="413:33" pos:end="415:55"><name pos:start="413:33" pos:end="413:38">av_log</name><argument_list pos:start="413:39" pos:end="415:55">(<argument pos:start="413:40" pos:end="413:44"><expr pos:start="413:40" pos:end="413:44"><name pos:start="413:40" pos:end="413:44">avctx</name></expr></argument>, <argument pos:start="413:47" pos:end="413:58"><expr pos:start="413:47" pos:end="413:58"><name pos:start="413:47" pos:end="413:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="413:61" pos:end="413:88"><expr pos:start="413:61" pos:end="413:88"><literal type="string" pos:start="413:61" pos:end="413:88">"pixel_countdown &lt; 0 (%d)\n"</literal></expr></argument>,

                                       <argument pos:start="415:40" pos:end="415:54"><expr pos:start="415:40" pos:end="415:54"><name pos:start="415:40" pos:end="415:54">pixel_countdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></while>



                <expr_stmt pos:start="425:17" pos:end="425:46"><expr pos:start="425:17" pos:end="425:45"><name pos:start="425:17" pos:end="425:21">y_ptr</name> <operator pos:start="425:23" pos:end="425:24">+=</operator> <name pos:start="425:26" pos:end="425:45"><name pos:start="425:26" pos:end="425:26">s</name><operator pos:start="425:27" pos:end="425:28">-&gt;</operator><name pos:start="425:29" pos:end="425:33">frame</name><operator pos:start="425:34" pos:end="425:34">.</operator><name pos:start="425:35" pos:end="425:42">linesize</name><index pos:start="425:43" pos:end="425:45">[<expr pos:start="425:44" pos:end="425:44"><literal type="number" pos:start="425:44" pos:end="425:44">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="429:13" pos:end="429:18">break;</break>



        <case pos:start="433:9" pos:end="433:22">case <expr pos:start="433:14" pos:end="433:21"><name pos:start="433:14" pos:end="433:21">FLI_COPY</name></expr>:</case>

        <case pos:start="435:9" pos:end="435:26">case <expr pos:start="435:14" pos:end="435:25"><name pos:start="435:14" pos:end="435:25">FLI_DTA_COPY</name></expr>:</case>

            <comment type="block" pos:start="437:13" pos:end="437:53">/* copy the chunk (uncompressed frame) */</comment>

            <if_stmt pos:start="439:13" pos:end="475:13"><if pos:start="439:13" pos:end="447:13">if <condition pos:start="439:16" pos:end="439:86">(<expr pos:start="439:17" pos:end="439:85"><name pos:start="439:17" pos:end="439:26">chunk_size</name> <operator pos:start="439:28" pos:end="439:28">-</operator> <literal type="number" pos:start="439:30" pos:end="439:30">6</literal> <operator pos:start="439:32" pos:end="439:32">&gt;</operator> <operator pos:start="439:34" pos:end="439:34">(</operator><name pos:start="439:35" pos:end="439:42">unsigned</name> <name pos:start="439:44" pos:end="439:46">int</name><operator pos:start="439:47" pos:end="439:47">)</operator><operator pos:start="439:48" pos:end="439:48">(</operator><name pos:start="439:49" pos:end="439:63"><name pos:start="439:49" pos:end="439:49">s</name><operator pos:start="439:50" pos:end="439:51">-&gt;</operator><name pos:start="439:52" pos:end="439:56">avctx</name><operator pos:start="439:57" pos:end="439:58">-&gt;</operator><name pos:start="439:59" pos:end="439:63">width</name></name> <operator pos:start="439:65" pos:end="439:65">*</operator> <name pos:start="439:67" pos:end="439:82"><name pos:start="439:67" pos:end="439:67">s</name><operator pos:start="439:68" pos:end="439:69">-&gt;</operator><name pos:start="439:70" pos:end="439:74">avctx</name><operator pos:start="439:75" pos:end="439:76">-&gt;</operator><name pos:start="439:77" pos:end="439:82">height</name></name><operator pos:start="439:83" pos:end="439:83">)</operator><operator pos:start="439:84" pos:end="439:84">*</operator><literal type="number" pos:start="439:85" pos:end="439:85">2</literal></expr>)</condition> <block pos:start="439:88" pos:end="447:13">{<block_content pos:start="441:17" pos:end="445:45">

                <expr_stmt pos:start="441:17" pos:end="443:78"><expr pos:start="441:17" pos:end="443:77"><call pos:start="441:17" pos:end="443:77"><name pos:start="441:17" pos:end="441:22">av_log</name><argument_list pos:start="441:23" pos:end="443:77">(<argument pos:start="441:24" pos:end="441:28"><expr pos:start="441:24" pos:end="441:28"><name pos:start="441:24" pos:end="441:28">avctx</name></expr></argument>, <argument pos:start="441:31" pos:end="441:42"><expr pos:start="441:31" pos:end="441:42"><name pos:start="441:31" pos:end="441:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="441:45" pos:end="443:60"><expr pos:start="441:45" pos:end="443:60"><literal type="string" pos:start="441:45" pos:end="441:89">"In chunk FLI_COPY : source data (%d bytes) "</literal> \

                       <literal type="string" pos:start="443:24" pos:end="443:60">"bigger than image, skipping chunk\n"</literal></expr></argument>, <argument pos:start="443:63" pos:end="443:76"><expr pos:start="443:63" pos:end="443:76"><name pos:start="443:63" pos:end="443:72">chunk_size</name> <operator pos:start="443:74" pos:end="443:74">-</operator> <literal type="number" pos:start="443:76" pos:end="443:76">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="445:17" pos:end="445:45"><expr pos:start="445:17" pos:end="445:44"><name pos:start="445:17" pos:end="445:26">stream_ptr</name> <operator pos:start="445:28" pos:end="445:29">+=</operator> <name pos:start="445:31" pos:end="445:40">chunk_size</name> <operator pos:start="445:42" pos:end="445:42">-</operator> <literal type="number" pos:start="445:44" pos:end="445:44">6</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="447:15" pos:end="475:13">else <block pos:start="447:20" pos:end="475:13">{<block_content pos:start="451:17" pos:end="473:17">



                <for pos:start="451:17" pos:end="473:17">for <control pos:start="451:21" pos:end="453:51">(<init pos:start="451:22" pos:end="451:31"><expr pos:start="451:22" pos:end="451:30"><name pos:start="451:22" pos:end="451:26">y_ptr</name> <operator pos:start="451:28" pos:end="451:28">=</operator> <literal type="number" pos:start="451:30" pos:end="451:30">0</literal></expr>;</init> <condition pos:start="451:33" pos:end="451:80"><expr pos:start="451:33" pos:end="451:79"><name pos:start="451:33" pos:end="451:37">y_ptr</name> <operator pos:start="451:39" pos:end="451:39">&lt;</operator> <name pos:start="451:41" pos:end="451:60"><name pos:start="451:41" pos:end="451:41">s</name><operator pos:start="451:42" pos:end="451:43">-&gt;</operator><name pos:start="451:44" pos:end="451:48">frame</name><operator pos:start="451:49" pos:end="451:49">.</operator><name pos:start="451:50" pos:end="451:57">linesize</name><index pos:start="451:58" pos:end="451:60">[<expr pos:start="451:59" pos:end="451:59"><literal type="number" pos:start="451:59" pos:end="451:59">0</literal></expr>]</index></name> <operator pos:start="451:62" pos:end="451:62">*</operator> <name pos:start="451:64" pos:end="451:79"><name pos:start="451:64" pos:end="451:64">s</name><operator pos:start="451:65" pos:end="451:66">-&gt;</operator><name pos:start="451:67" pos:end="451:71">avctx</name><operator pos:start="451:72" pos:end="451:73">-&gt;</operator><name pos:start="451:74" pos:end="451:79">height</name></name></expr>;</condition>

                     <incr pos:start="453:22" pos:end="453:50"><expr pos:start="453:22" pos:end="453:50"><name pos:start="453:22" pos:end="453:26">y_ptr</name> <operator pos:start="453:28" pos:end="453:29">+=</operator> <name pos:start="453:31" pos:end="453:50"><name pos:start="453:31" pos:end="453:31">s</name><operator pos:start="453:32" pos:end="453:33">-&gt;</operator><name pos:start="453:34" pos:end="453:38">frame</name><operator pos:start="453:39" pos:end="453:39">.</operator><name pos:start="453:40" pos:end="453:47">linesize</name><index pos:start="453:48" pos:end="453:50">[<expr pos:start="453:49" pos:end="453:49"><literal type="number" pos:start="453:49" pos:end="453:49">0</literal></expr>]</index></name></expr></incr>)</control> <block pos:start="453:53" pos:end="473:17">{<block_content pos:start="457:21" pos:end="471:52">



                    <expr_stmt pos:start="457:21" pos:end="457:54"><expr pos:start="457:21" pos:end="457:53"><name pos:start="457:21" pos:end="457:35">pixel_countdown</name> <operator pos:start="457:37" pos:end="457:37">=</operator> <name pos:start="457:39" pos:end="457:53"><name pos:start="457:39" pos:end="457:39">s</name><operator pos:start="457:40" pos:end="457:41">-&gt;</operator><name pos:start="457:42" pos:end="457:46">avctx</name><operator pos:start="457:47" pos:end="457:48">-&gt;</operator><name pos:start="457:49" pos:end="457:53">width</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="459:21" pos:end="459:34"><expr pos:start="459:21" pos:end="459:33"><name pos:start="459:21" pos:end="459:29">pixel_ptr</name> <operator pos:start="459:31" pos:end="459:31">=</operator> <literal type="number" pos:start="459:33" pos:end="459:33">0</literal></expr>;</expr_stmt>

                    <while pos:start="461:21" pos:end="469:21">while <condition pos:start="461:27" pos:end="461:47">(<expr pos:start="461:28" pos:end="461:46"><name pos:start="461:28" pos:end="461:42">pixel_countdown</name> <operator pos:start="461:44" pos:end="461:44">&gt;</operator> <literal type="number" pos:start="461:46" pos:end="461:46">0</literal></expr>)</condition> <block pos:start="461:49" pos:end="469:21">{<block_content pos:start="463:23" pos:end="467:40">

                      <expr_stmt pos:start="463:23" pos:end="463:105"><expr pos:start="463:23" pos:end="463:104"><operator pos:start="463:23" pos:end="463:23">*</operator><operator pos:start="463:24" pos:end="463:24">(</operator><operator pos:start="463:25" pos:end="463:25">(</operator><name pos:start="463:26" pos:end="463:31">signed</name> <name pos:start="463:33" pos:end="463:37">short</name><operator pos:start="463:38" pos:end="463:38">*</operator><operator pos:start="463:39" pos:end="463:39">)</operator><operator pos:start="463:40" pos:end="463:40">(</operator><operator pos:start="463:41" pos:end="463:41">&amp;</operator><name pos:start="463:42" pos:end="463:66"><name pos:start="463:42" pos:end="463:47">pixels</name><index pos:start="463:48" pos:end="463:66">[<expr pos:start="463:49" pos:end="463:65"><name pos:start="463:49" pos:end="463:53">y_ptr</name> <operator pos:start="463:55" pos:end="463:55">+</operator> <name pos:start="463:57" pos:end="463:65">pixel_ptr</name></expr>]</index></name><operator pos:start="463:67" pos:end="463:67">)</operator><operator pos:start="463:68" pos:end="463:68">)</operator> <operator pos:start="463:70" pos:end="463:70">=</operator> <call pos:start="463:72" pos:end="463:104"><name pos:start="463:72" pos:end="463:76">LE_16</name><argument_list pos:start="463:77" pos:end="463:104">(<argument pos:start="463:78" pos:end="463:103"><expr pos:start="463:78" pos:end="463:103"><operator pos:start="463:78" pos:end="463:78">&amp;</operator><name pos:start="463:79" pos:end="463:103"><name pos:start="463:79" pos:end="463:81">buf</name><index pos:start="463:82" pos:end="463:103">[<expr pos:start="463:83" pos:end="463:102"><name pos:start="463:83" pos:end="463:92">stream_ptr</name><operator pos:start="463:93" pos:end="463:93">+</operator><name pos:start="463:94" pos:end="463:102">pixel_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                      <expr_stmt pos:start="465:23" pos:end="465:37"><expr pos:start="465:23" pos:end="465:36"><name pos:start="465:23" pos:end="465:31">pixel_ptr</name> <operator pos:start="465:33" pos:end="465:34">+=</operator> <literal type="number" pos:start="465:36" pos:end="465:36">2</literal></expr>;</expr_stmt>

                      <expr_stmt pos:start="467:23" pos:end="467:40"><expr pos:start="467:23" pos:end="467:39"><name pos:start="467:23" pos:end="467:37">pixel_countdown</name><operator pos:start="467:38" pos:end="467:39">--</operator></expr>;</expr_stmt>

                    </block_content>}</block></while>

                    <expr_stmt pos:start="471:21" pos:end="471:52"><expr pos:start="471:21" pos:end="471:51"><name pos:start="471:21" pos:end="471:30">stream_ptr</name> <operator pos:start="471:32" pos:end="471:33">+=</operator> <name pos:start="471:35" pos:end="471:49"><name pos:start="471:35" pos:end="471:35">s</name><operator pos:start="471:36" pos:end="471:37">-&gt;</operator><name pos:start="471:38" pos:end="471:42">avctx</name><operator pos:start="471:43" pos:end="471:44">-&gt;</operator><name pos:start="471:45" pos:end="471:49">width</name></name><operator pos:start="471:50" pos:end="471:50">*</operator><literal type="number" pos:start="471:51" pos:end="471:51">2</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <break pos:start="477:13" pos:end="477:18">break;</break>



        <case pos:start="481:9" pos:end="481:22">case <expr pos:start="481:14" pos:end="481:21"><name pos:start="481:14" pos:end="481:21">FLI_MINI</name></expr>:</case>

            <comment type="block" pos:start="483:13" pos:end="483:67">/* some sort of a thumbnail? disregard this chunk... */</comment>

            <expr_stmt pos:start="485:13" pos:end="485:41"><expr pos:start="485:13" pos:end="485:40"><name pos:start="485:13" pos:end="485:22">stream_ptr</name> <operator pos:start="485:24" pos:end="485:25">+=</operator> <name pos:start="485:27" pos:end="485:36">chunk_size</name> <operator pos:start="485:38" pos:end="485:38">-</operator> <literal type="number" pos:start="485:40" pos:end="485:40">6</literal></expr>;</expr_stmt>

            <break pos:start="487:13" pos:end="487:18">break;</break>



        <default pos:start="491:9" pos:end="491:16">default:</default>

            <expr_stmt pos:start="493:13" pos:end="493:85"><expr pos:start="493:13" pos:end="493:84"><call pos:start="493:13" pos:end="493:84"><name pos:start="493:13" pos:end="493:18">av_log</name><argument_list pos:start="493:19" pos:end="493:84">(<argument pos:start="493:20" pos:end="493:24"><expr pos:start="493:20" pos:end="493:24"><name pos:start="493:20" pos:end="493:24">avctx</name></expr></argument>, <argument pos:start="493:27" pos:end="493:38"><expr pos:start="493:27" pos:end="493:38"><name pos:start="493:27" pos:end="493:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="493:41" pos:end="493:71"><expr pos:start="493:41" pos:end="493:71"><literal type="string" pos:start="493:41" pos:end="493:71">"Unrecognized chunk type: %d\n"</literal></expr></argument>, <argument pos:start="493:74" pos:end="493:83"><expr pos:start="493:74" pos:end="493:83"><name pos:start="493:74" pos:end="493:83">chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="495:13" pos:end="495:18">break;</break>

        </block_content>}</block></switch>



        <expr_stmt pos:start="501:9" pos:end="501:33"><expr pos:start="501:9" pos:end="501:32"><name pos:start="501:9" pos:end="501:18">frame_size</name> <operator pos:start="501:20" pos:end="501:21">-=</operator> <name pos:start="501:23" pos:end="501:32">chunk_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="503:9" pos:end="503:21"><expr pos:start="503:9" pos:end="503:20"><name pos:start="503:9" pos:end="503:18">num_chunks</name><operator pos:start="503:19" pos:end="503:20">--</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="509:5" pos:end="511:66">/* by the end of the chunk, the stream ptr should equal the frame

     * size (minus 1, possibly); if it doesn't, issue a warning */</comment>

    <if_stmt pos:start="513:5" pos:end="517:67"><if pos:start="513:5" pos:end="517:67">if <condition pos:start="513:8" pos:end="513:65">(<expr pos:start="513:9" pos:end="513:64"><operator pos:start="513:9" pos:end="513:9">(</operator><name pos:start="513:10" pos:end="513:19">stream_ptr</name> <operator pos:start="513:21" pos:end="513:22">!=</operator> <name pos:start="513:24" pos:end="513:31">buf_size</name><operator pos:start="513:32" pos:end="513:32">)</operator> <operator pos:start="513:34" pos:end="513:35">&amp;&amp;</operator> <operator pos:start="513:37" pos:end="513:37">(</operator><name pos:start="513:38" pos:end="513:47">stream_ptr</name> <operator pos:start="513:49" pos:end="513:50">!=</operator> <name pos:start="513:52" pos:end="513:59">buf_size</name> <operator pos:start="513:61" pos:end="513:61">-</operator> <literal type="number" pos:start="513:63" pos:end="513:63">1</literal><operator pos:start="513:64" pos:end="513:64">)</operator></expr>)</condition><block type="pseudo" pos:start="515:9" pos:end="517:67"><block_content pos:start="515:9" pos:end="517:67">

        <expr_stmt pos:start="515:9" pos:end="517:67"><expr pos:start="515:9" pos:end="517:66"><call pos:start="515:9" pos:end="517:66"><name pos:start="515:9" pos:end="515:14">av_log</name><argument_list pos:start="515:15" pos:end="517:66">(<argument pos:start="515:16" pos:end="515:20"><expr pos:start="515:16" pos:end="515:20"><name pos:start="515:16" pos:end="515:20">avctx</name></expr></argument>, <argument pos:start="515:23" pos:end="515:34"><expr pos:start="515:23" pos:end="515:34"><name pos:start="515:23" pos:end="515:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="515:37" pos:end="517:43"><expr pos:start="515:37" pos:end="517:43"><literal type="string" pos:start="515:37" pos:end="515:80">"Processed FLI chunk where chunk size = %d "</literal> \

               <literal type="string" pos:start="517:16" pos:end="517:43">"and final chunk ptr = %d\n"</literal></expr></argument>, <argument pos:start="517:46" pos:end="517:53"><expr pos:start="517:46" pos:end="517:53"><name pos:start="517:46" pos:end="517:53">buf_size</name></expr></argument>, <argument pos:start="517:56" pos:end="517:65"><expr pos:start="517:56" pos:end="517:65"><name pos:start="517:56" pos:end="517:65">stream_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





    <expr_stmt pos:start="523:5" pos:end="523:31"><expr pos:start="523:5" pos:end="523:30"><operator pos:start="523:5" pos:end="523:5">*</operator><name pos:start="523:6" pos:end="523:14">data_size</name><operator pos:start="523:15" pos:end="523:15">=</operator><sizeof pos:start="523:16" pos:end="523:30">sizeof<argument_list pos:start="523:22" pos:end="523:30">(<argument pos:start="523:23" pos:end="523:29"><expr pos:start="523:23" pos:end="523:29"><name pos:start="523:23" pos:end="523:29">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="525:5" pos:end="525:31"><expr pos:start="525:5" pos:end="525:30"><operator pos:start="525:5" pos:end="525:5">*</operator><operator pos:start="525:6" pos:end="525:6">(</operator><name pos:start="525:7" pos:end="525:13">AVFrame</name><operator pos:start="525:14" pos:end="525:14">*</operator><operator pos:start="525:15" pos:end="525:15">)</operator><name pos:start="525:16" pos:end="525:19">data</name> <operator pos:start="525:21" pos:end="525:21">=</operator> <name pos:start="525:23" pos:end="525:30"><name pos:start="525:23" pos:end="525:23">s</name><operator pos:start="525:24" pos:end="525:25">-&gt;</operator><name pos:start="525:26" pos:end="525:30">frame</name></name></expr>;</expr_stmt>



    <return pos:start="529:5" pos:end="529:20">return <expr pos:start="529:12" pos:end="529:19"><name pos:start="529:12" pos:end="529:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
