<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17196.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">xtensa_sim_init</name><parameter_list pos:start="1:28" pos:end="1:50">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:40">MachineState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:49">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="119:1">{<block_content pos:start="5:5" pos:end="117:5">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">XtensaCPU</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:18">cpu</name> <init pos:start="5:20" pos:end="5:25">= <expr pos:start="5:22" pos:end="5:25"><name pos:start="5:22" pos:end="5:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">CPUXtensaState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:23">env</name> <init pos:start="7:25" pos:end="7:30">= <expr pos:start="7:27" pos:end="7:30"><name pos:start="7:27" pos:end="7:30">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:43"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:14">ram_addr_t</name></type> <name pos:start="9:16" pos:end="9:23">ram_size</name> <init pos:start="9:25" pos:end="9:43">= <expr pos:start="9:27" pos:end="9:43"><name pos:start="9:27" pos:end="9:43"><name pos:start="9:27" pos:end="9:33">machine</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:47"><decl pos:start="11:5" pos:end="11:46"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:25">cpu_model</name> <init pos:start="11:27" pos:end="11:46">= <expr pos:start="11:29" pos:end="11:46"><name pos:start="11:29" pos:end="11:46"><name pos:start="11:29" pos:end="11:35">machine</name><operator pos:start="11:36" pos:end="11:37">-&gt;</operator><name pos:start="11:38" pos:end="11:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">kernel_filename</name> <init pos:start="13:33" pos:end="13:58">= <expr pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:41">machine</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">n</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:19">(<expr pos:start="19:9" pos:end="19:18"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:18">cpu_model</name></expr>)</condition> <block pos:start="19:21" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:45">

        <expr_stmt pos:start="21:9" pos:end="21:45"><expr pos:start="21:9" pos:end="21:44"><name pos:start="21:9" pos:end="21:17">cpu_model</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <name pos:start="21:21" pos:end="21:44">XTENSA_DEFAULT_CPU_MODEL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="27:5" pos:end="57:5">for <control pos:start="27:9" pos:end="27:34">(<init pos:start="27:10" pos:end="27:15"><expr pos:start="27:10" pos:end="27:14"><name pos:start="27:10" pos:end="27:10">n</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</init> <condition pos:start="27:17" pos:end="27:29"><expr pos:start="27:17" pos:end="27:28"><name pos:start="27:17" pos:end="27:17">n</name> <operator pos:start="27:19" pos:end="27:19">&lt;</operator> <name pos:start="27:21" pos:end="27:28">smp_cpus</name></expr>;</condition> <incr pos:start="27:31" pos:end="27:33"><expr pos:start="27:31" pos:end="27:33"><name pos:start="27:31" pos:end="27:31">n</name><operator pos:start="27:32" pos:end="27:33">++</operator></expr></incr>)</control> <block pos:start="27:36" pos:end="57:5">{<block_content pos:start="29:9" pos:end="55:23">

        <expr_stmt pos:start="29:9" pos:end="29:71"><expr pos:start="29:9" pos:end="29:70"><name pos:start="29:9" pos:end="29:11">cpu</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:70"><name pos:start="29:15" pos:end="29:24">XTENSA_CPU</name><argument_list pos:start="29:25" pos:end="29:70">(<argument pos:start="29:26" pos:end="29:69"><expr pos:start="29:26" pos:end="29:69"><call pos:start="29:26" pos:end="29:69"><name pos:start="29:26" pos:end="29:41">cpu_generic_init</name><argument_list pos:start="29:42" pos:end="29:69">(<argument pos:start="29:43" pos:end="29:57"><expr pos:start="29:43" pos:end="29:57"><name pos:start="29:43" pos:end="29:57">TYPE_XTENSA_CPU</name></expr></argument>, <argument pos:start="29:60" pos:end="29:68"><expr pos:start="29:60" pos:end="29:68"><name pos:start="29:60" pos:end="29:68">cpu_model</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="39:9"><if pos:start="31:9" pos:end="39:9">if <condition pos:start="31:12" pos:end="31:24">(<expr pos:start="31:13" pos:end="31:23"><name pos:start="31:13" pos:end="31:15">cpu</name> <operator pos:start="31:17" pos:end="31:18">==</operator> <name pos:start="31:20" pos:end="31:23">NULL</name></expr>)</condition> <block pos:start="31:26" pos:end="39:9">{<block_content pos:start="33:13" pos:end="37:31">

            <expr_stmt pos:start="33:13" pos:end="35:36"><expr pos:start="33:13" pos:end="35:35"><call pos:start="33:13" pos:end="35:35"><name pos:start="33:13" pos:end="33:24">error_report</name><argument_list pos:start="33:25" pos:end="35:35">(<argument pos:start="33:26" pos:end="33:61"><expr pos:start="33:26" pos:end="33:61"><literal type="string" pos:start="33:26" pos:end="33:61">"unable to find CPU definition '%s'"</literal></expr></argument>,

                         <argument pos:start="35:26" pos:end="35:34"><expr pos:start="35:26" pos:end="35:34"><name pos:start="35:26" pos:end="35:34">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:31"><expr pos:start="37:13" pos:end="37:30"><call pos:start="37:13" pos:end="37:30"><name pos:start="37:13" pos:end="37:16">exit</name><argument_list pos:start="37:17" pos:end="37:30">(<argument pos:start="37:18" pos:end="37:29"><expr pos:start="37:18" pos:end="37:29"><name pos:start="37:18" pos:end="37:29">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:24"><expr pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:11">env</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <operator pos:start="41:15" pos:end="41:15">&amp;</operator><name pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:18">cpu</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:23">env</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:29"><expr pos:start="45:9" pos:end="45:28"><name pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:11">env</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:18">sregs</name><index pos:start="45:19" pos:end="45:24">[<expr pos:start="45:20" pos:end="45:23"><name pos:start="45:20" pos:end="45:23">PRID</name></expr>]</index></name> <operator pos:start="45:26" pos:end="45:26">=</operator> <name pos:start="45:28" pos:end="45:28">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:44"><expr pos:start="47:9" pos:end="47:43"><call pos:start="47:9" pos:end="47:43"><name pos:start="47:9" pos:end="47:27">qemu_register_reset</name><argument_list pos:start="47:28" pos:end="47:43">(<argument pos:start="47:29" pos:end="47:37"><expr pos:start="47:29" pos:end="47:37"><name pos:start="47:29" pos:end="47:37">sim_reset</name></expr></argument>, <argument pos:start="47:40" pos:end="47:42"><expr pos:start="47:40" pos:end="47:42"><name pos:start="47:40" pos:end="47:42">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="49:9" pos:end="53:11">/* Need MMU initialized prior to ELF loading,

         * so that ELF gets loaded into virtual addresses

         */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:23"><expr pos:start="55:9" pos:end="55:22"><call pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:17">sim_reset</name><argument_list pos:start="55:18" pos:end="55:22">(<argument pos:start="55:19" pos:end="55:21"><expr pos:start="55:19" pos:end="55:21"><name pos:start="55:19" pos:end="55:21">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="61:5" pos:end="81:5"><if pos:start="61:5" pos:end="81:5">if <condition pos:start="61:8" pos:end="61:12">(<expr pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">env</name></expr>)</condition> <block pos:start="61:14" pos:end="81:5">{<block_content pos:start="63:9" pos:end="79:63">

        <decl_stmt pos:start="63:9" pos:end="63:50"><decl pos:start="63:9" pos:end="63:49"><type pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:20">XtensaMemory</name></type> <name pos:start="63:22" pos:end="63:27">sysram</name> <init pos:start="63:29" pos:end="63:49">= <expr pos:start="63:31" pos:end="63:49"><name pos:start="63:31" pos:end="63:49"><name pos:start="63:31" pos:end="63:33">env</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:41">config</name><operator pos:start="63:42" pos:end="63:43">-&gt;</operator><name pos:start="63:44" pos:end="63:49">sysram</name></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:43"><expr pos:start="67:9" pos:end="67:42"><name pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:14">sysram</name><operator pos:start="67:15" pos:end="67:15">.</operator><name pos:start="67:16" pos:end="67:23">location</name><index pos:start="67:24" pos:end="67:26">[<expr pos:start="67:25" pos:end="67:25"><literal type="number" pos:start="67:25" pos:end="67:25">0</literal></expr>]</index></name><operator pos:start="67:27" pos:end="67:27">.</operator><name pos:start="67:28" pos:end="67:31">size</name> <operator pos:start="67:33" pos:end="67:33">=</operator> <name pos:start="67:35" pos:end="67:42">ram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:78"><expr pos:start="69:9" pos:end="69:77"><call pos:start="69:9" pos:end="69:77"><name pos:start="69:9" pos:end="69:36">xtensa_create_memory_regions</name><argument_list pos:start="69:37" pos:end="69:77">(<argument pos:start="69:38" pos:end="69:58"><expr pos:start="69:38" pos:end="69:58"><operator pos:start="69:38" pos:end="69:38">&amp;</operator><name pos:start="69:39" pos:end="69:58"><name pos:start="69:39" pos:end="69:41">env</name><operator pos:start="69:42" pos:end="69:43">-&gt;</operator><name pos:start="69:44" pos:end="69:49">config</name><operator pos:start="69:50" pos:end="69:51">-&gt;</operator><name pos:start="69:52" pos:end="69:58">instrom</name></name></expr></argument>, <argument pos:start="69:61" pos:end="69:76"><expr pos:start="69:61" pos:end="69:76"><literal type="string" pos:start="69:61" pos:end="69:76">"xtensa.instrom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:78"><expr pos:start="71:9" pos:end="71:77"><call pos:start="71:9" pos:end="71:77"><name pos:start="71:9" pos:end="71:36">xtensa_create_memory_regions</name><argument_list pos:start="71:37" pos:end="71:77">(<argument pos:start="71:38" pos:end="71:58"><expr pos:start="71:38" pos:end="71:58"><operator pos:start="71:38" pos:end="71:38">&amp;</operator><name pos:start="71:39" pos:end="71:58"><name pos:start="71:39" pos:end="71:41">env</name><operator pos:start="71:42" pos:end="71:43">-&gt;</operator><name pos:start="71:44" pos:end="71:49">config</name><operator pos:start="71:50" pos:end="71:51">-&gt;</operator><name pos:start="71:52" pos:end="71:58">instram</name></name></expr></argument>, <argument pos:start="71:61" pos:end="71:76"><expr pos:start="71:61" pos:end="71:76"><literal type="string" pos:start="71:61" pos:end="71:76">"xtensa.instram"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:78"><expr pos:start="73:9" pos:end="73:77"><call pos:start="73:9" pos:end="73:77"><name pos:start="73:9" pos:end="73:36">xtensa_create_memory_regions</name><argument_list pos:start="73:37" pos:end="73:77">(<argument pos:start="73:38" pos:end="73:58"><expr pos:start="73:38" pos:end="73:58"><operator pos:start="73:38" pos:end="73:38">&amp;</operator><name pos:start="73:39" pos:end="73:58"><name pos:start="73:39" pos:end="73:41">env</name><operator pos:start="73:42" pos:end="73:43">-&gt;</operator><name pos:start="73:44" pos:end="73:49">config</name><operator pos:start="73:50" pos:end="73:51">-&gt;</operator><name pos:start="73:52" pos:end="73:58">datarom</name></name></expr></argument>, <argument pos:start="73:61" pos:end="73:76"><expr pos:start="73:61" pos:end="73:76"><literal type="string" pos:start="73:61" pos:end="73:76">"xtensa.datarom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:78"><expr pos:start="75:9" pos:end="75:77"><call pos:start="75:9" pos:end="75:77"><name pos:start="75:9" pos:end="75:36">xtensa_create_memory_regions</name><argument_list pos:start="75:37" pos:end="75:77">(<argument pos:start="75:38" pos:end="75:58"><expr pos:start="75:38" pos:end="75:58"><operator pos:start="75:38" pos:end="75:38">&amp;</operator><name pos:start="75:39" pos:end="75:58"><name pos:start="75:39" pos:end="75:41">env</name><operator pos:start="75:42" pos:end="75:43">-&gt;</operator><name pos:start="75:44" pos:end="75:49">config</name><operator pos:start="75:50" pos:end="75:51">-&gt;</operator><name pos:start="75:52" pos:end="75:58">dataram</name></name></expr></argument>, <argument pos:start="75:61" pos:end="75:76"><expr pos:start="75:61" pos:end="75:76"><literal type="string" pos:start="75:61" pos:end="75:76">"xtensa.dataram"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:76"><expr pos:start="77:9" pos:end="77:75"><call pos:start="77:9" pos:end="77:75"><name pos:start="77:9" pos:end="77:36">xtensa_create_memory_regions</name><argument_list pos:start="77:37" pos:end="77:75">(<argument pos:start="77:38" pos:end="77:57"><expr pos:start="77:38" pos:end="77:57"><operator pos:start="77:38" pos:end="77:38">&amp;</operator><name pos:start="77:39" pos:end="77:57"><name pos:start="77:39" pos:end="77:41">env</name><operator pos:start="77:42" pos:end="77:43">-&gt;</operator><name pos:start="77:44" pos:end="77:49">config</name><operator pos:start="77:50" pos:end="77:51">-&gt;</operator><name pos:start="77:52" pos:end="77:57">sysrom</name></name></expr></argument>, <argument pos:start="77:60" pos:end="77:74"><expr pos:start="77:60" pos:end="77:74"><literal type="string" pos:start="77:60" pos:end="77:74">"xtensa.sysrom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:63"><expr pos:start="79:9" pos:end="79:62"><call pos:start="79:9" pos:end="79:62"><name pos:start="79:9" pos:end="79:36">xtensa_create_memory_regions</name><argument_list pos:start="79:37" pos:end="79:62">(<argument pos:start="79:38" pos:end="79:44"><expr pos:start="79:38" pos:end="79:44"><operator pos:start="79:38" pos:end="79:38">&amp;</operator><name pos:start="79:39" pos:end="79:44">sysram</name></expr></argument>, <argument pos:start="79:47" pos:end="79:61"><expr pos:start="79:47" pos:end="79:61"><literal type="string" pos:start="79:47" pos:end="79:61">"xtensa.sysram"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:22">(<expr pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:18">serial_hds</name><index pos:start="85:19" pos:end="85:21">[<expr pos:start="85:20" pos:end="85:20"><literal type="number" pos:start="85:20" pos:end="85:20">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="85:24" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:47">

        <expr_stmt pos:start="87:9" pos:end="87:47"><expr pos:start="87:9" pos:end="87:46"><call pos:start="87:9" pos:end="87:46"><name pos:start="87:9" pos:end="87:31">xtensa_sim_open_console</name><argument_list pos:start="87:32" pos:end="87:46">(<argument pos:start="87:33" pos:end="87:45"><expr pos:start="87:33" pos:end="87:45"><name pos:start="87:33" pos:end="87:45"><name pos:start="87:33" pos:end="87:42">serial_hds</name><index pos:start="87:43" pos:end="87:45">[<expr pos:start="87:44" pos:end="87:44"><literal type="number" pos:start="87:44" pos:end="87:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="91:5" pos:end="117:5"><if pos:start="91:5" pos:end="117:5">if <condition pos:start="91:8" pos:end="91:24">(<expr pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:23">kernel_filename</name></expr>)</condition> <block pos:start="91:26" pos:end="117:5">{<block_content pos:start="93:9" pos:end="115:9">

        <decl_stmt pos:start="93:9" pos:end="93:27"><decl pos:start="93:9" pos:end="93:26"><type pos:start="93:9" pos:end="93:16"><name pos:start="93:9" pos:end="93:16">uint64_t</name></type> <name pos:start="93:18" pos:end="93:26">elf_entry</name></decl>;</decl_stmt>

        <decl_stmt pos:start="95:9" pos:end="98:0"><decl pos:start="95:9" pos:end="95:28"><type pos:start="95:9" pos:end="95:16"><name pos:start="95:9" pos:end="95:16">uint64_t</name></type> <name pos:start="95:18" pos:end="95:28">elf_lowaddr</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="97:1" pos:end="97:29">#<cpp:directive pos:start="97:2" pos:end="97:6">ifdef</cpp:directive> <name pos:start="97:8" pos:end="97:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

        <decl_stmt pos:start="99:9" pos:end="104:0"><decl pos:start="99:9" pos:end="101:67"><type pos:start="99:9" pos:end="99:11"><name pos:start="99:9" pos:end="99:11">int</name></type> <name pos:start="99:13" pos:end="99:19">success</name> <init pos:start="99:21" pos:end="101:67">= <expr pos:start="99:23" pos:end="101:67"><call pos:start="99:23" pos:end="101:67"><name pos:start="99:23" pos:end="99:30">load_elf</name><argument_list pos:start="99:31" pos:end="101:67">(<argument pos:start="99:32" pos:end="99:46"><expr pos:start="99:32" pos:end="99:46"><name pos:start="99:32" pos:end="99:46">kernel_filename</name></expr></argument>, <argument pos:start="99:49" pos:end="99:67"><expr pos:start="99:49" pos:end="99:67"><name pos:start="99:49" pos:end="99:67">translate_phys_addr</name></expr></argument>, <argument pos:start="99:70" pos:end="99:72"><expr pos:start="99:70" pos:end="99:72"><name pos:start="99:70" pos:end="99:72">cpu</name></expr></argument>,

                <argument pos:start="101:17" pos:end="101:26"><expr pos:start="101:17" pos:end="101:26"><operator pos:start="101:17" pos:end="101:17">&amp;</operator><name pos:start="101:18" pos:end="101:26">elf_entry</name></expr></argument>, <argument pos:start="101:29" pos:end="101:40"><expr pos:start="101:29" pos:end="101:40"><operator pos:start="101:29" pos:end="101:29">&amp;</operator><name pos:start="101:30" pos:end="101:40">elf_lowaddr</name></expr></argument>, <argument pos:start="101:43" pos:end="101:46"><expr pos:start="101:43" pos:end="101:46"><name pos:start="101:43" pos:end="101:46">NULL</name></expr></argument>, <argument pos:start="101:49" pos:end="101:49"><expr pos:start="101:49" pos:end="101:49"><literal type="number" pos:start="101:49" pos:end="101:49">1</literal></expr></argument>, <argument pos:start="101:52" pos:end="101:60"><expr pos:start="101:52" pos:end="101:60"><name pos:start="101:52" pos:end="101:60">EM_XTENSA</name></expr></argument>, <argument pos:start="101:63" pos:end="101:63"><expr pos:start="101:63" pos:end="101:63"><literal type="number" pos:start="101:63" pos:end="101:63">0</literal></expr></argument>, <argument pos:start="101:66" pos:end="101:66"><expr pos:start="101:66" pos:end="101:66"><literal type="number" pos:start="101:66" pos:end="101:66">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:else pos:start="103:1" pos:end="103:5">#<cpp:directive pos:start="103:2" pos:end="103:5">else</cpp:directive></cpp:else>

        <decl_stmt pos:start="105:9" pos:end="110:0"><decl pos:start="105:9" pos:end="107:67"><type pos:start="105:9" pos:end="105:11"><name pos:start="105:9" pos:end="105:11">int</name></type> <name pos:start="105:13" pos:end="105:19">success</name> <init pos:start="105:21" pos:end="107:67">= <expr pos:start="105:23" pos:end="107:67"><call pos:start="105:23" pos:end="107:67"><name pos:start="105:23" pos:end="105:30">load_elf</name><argument_list pos:start="105:31" pos:end="107:67">(<argument pos:start="105:32" pos:end="105:46"><expr pos:start="105:32" pos:end="105:46"><name pos:start="105:32" pos:end="105:46">kernel_filename</name></expr></argument>, <argument pos:start="105:49" pos:end="105:67"><expr pos:start="105:49" pos:end="105:67"><name pos:start="105:49" pos:end="105:67">translate_phys_addr</name></expr></argument>, <argument pos:start="105:70" pos:end="105:72"><expr pos:start="105:70" pos:end="105:72"><name pos:start="105:70" pos:end="105:72">cpu</name></expr></argument>,

                <argument pos:start="107:17" pos:end="107:26"><expr pos:start="107:17" pos:end="107:26"><operator pos:start="107:17" pos:end="107:17">&amp;</operator><name pos:start="107:18" pos:end="107:26">elf_entry</name></expr></argument>, <argument pos:start="107:29" pos:end="107:40"><expr pos:start="107:29" pos:end="107:40"><operator pos:start="107:29" pos:end="107:29">&amp;</operator><name pos:start="107:30" pos:end="107:40">elf_lowaddr</name></expr></argument>, <argument pos:start="107:43" pos:end="107:46"><expr pos:start="107:43" pos:end="107:46"><name pos:start="107:43" pos:end="107:46">NULL</name></expr></argument>, <argument pos:start="107:49" pos:end="107:49"><expr pos:start="107:49" pos:end="107:49"><literal type="number" pos:start="107:49" pos:end="107:49">0</literal></expr></argument>, <argument pos:start="107:52" pos:end="107:60"><expr pos:start="107:52" pos:end="107:60"><name pos:start="107:52" pos:end="107:60">EM_XTENSA</name></expr></argument>, <argument pos:start="107:63" pos:end="107:63"><expr pos:start="107:63" pos:end="107:63"><literal type="number" pos:start="107:63" pos:end="107:63">0</literal></expr></argument>, <argument pos:start="107:66" pos:end="107:66"><expr pos:start="107:66" pos:end="107:66"><literal type="number" pos:start="107:66" pos:end="107:66">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="109:1" pos:end="109:6">#<cpp:directive pos:start="109:2" pos:end="109:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="111:9" pos:end="115:9"><if pos:start="111:9" pos:end="115:9">if <condition pos:start="111:12" pos:end="111:24">(<expr pos:start="111:13" pos:end="111:23"><name pos:start="111:13" pos:end="111:19">success</name> <operator pos:start="111:21" pos:end="111:21">&gt;</operator> <literal type="number" pos:start="111:23" pos:end="111:23">0</literal></expr>)</condition> <block pos:start="111:26" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:32">

            <expr_stmt pos:start="113:13" pos:end="113:32"><expr pos:start="113:13" pos:end="113:31"><name pos:start="113:13" pos:end="113:19"><name pos:start="113:13" pos:end="113:15">env</name><operator pos:start="113:16" pos:end="113:17">-&gt;</operator><name pos:start="113:18" pos:end="113:19">pc</name></name> <operator pos:start="113:21" pos:end="113:21">=</operator> <name pos:start="113:23" pos:end="113:31">elf_entry</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
