<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11294.c" pos:tabs="8"><function pos:start="1:1" pos:end="150:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">get_physical_address</name><parameter_list pos:start="1:25" pos:end="3:49">(<parameter pos:start="1:26" pos:end="1:41"><decl pos:start="1:26" pos:end="1:41"><type pos:start="1:26" pos:end="1:41"><name pos:start="1:26" pos:end="1:36">CPUPPCState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">env</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:52">mmu_ctx_t</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:57">ctx</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:77"><decl pos:start="1:60" pos:end="1:77"><type pos:start="1:60" pos:end="1:77"><name pos:start="1:60" pos:end="1:71">target_ulong</name></type> <name pos:start="1:73" pos:end="1:77">eaddr</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:31"><decl pos:start="3:26" pos:end="3:31"><type pos:start="3:26" pos:end="3:31"><name pos:start="3:26" pos:end="3:28">int</name></type> <name pos:start="3:30" pos:end="3:31">rw</name></decl></parameter>, <parameter pos:start="3:34" pos:end="3:48"><decl pos:start="3:34" pos:end="3:48"><type pos:start="3:34" pos:end="3:48"><name pos:start="3:34" pos:end="3:36">int</name></type> <name pos:start="3:38" pos:end="3:48">access_type</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="150:1">{<block_content pos:start="7:5" pos:end="148:15">

    <decl_stmt pos:start="7:5" pos:end="16:0"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>



<cpp:if pos:start="11:1" pos:end="11:5">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:5"><literal type="number" pos:start="11:5" pos:end="11:5">0</literal></expr></cpp:if>

    qemu_log("%s\n", __func__);

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="17:5" pos:end="145:0"><if pos:start="17:5" pos:end="45:5">if <condition pos:start="17:8" pos:end="19:52">(<expr pos:start="17:9" pos:end="19:51"><operator pos:start="17:9" pos:end="17:9">(</operator><name pos:start="17:10" pos:end="17:20">access_type</name> <operator pos:start="17:22" pos:end="17:23">==</operator> <name pos:start="17:25" pos:end="17:35">ACCESS_CODE</name> <operator pos:start="17:37" pos:end="17:38">&amp;&amp;</operator> <name pos:start="17:40" pos:end="17:45">msr_ir</name> <operator pos:start="17:47" pos:end="17:48">==</operator> <literal type="number" pos:start="17:50" pos:end="17:50">0</literal><operator pos:start="17:51" pos:end="17:51">)</operator> <operator pos:start="17:53" pos:end="17:54">||</operator>

        <operator pos:start="19:9" pos:end="19:9">(</operator><name pos:start="19:10" pos:end="19:20">access_type</name> <operator pos:start="19:22" pos:end="19:23">!=</operator> <name pos:start="19:25" pos:end="19:35">ACCESS_CODE</name> <operator pos:start="19:37" pos:end="19:38">&amp;&amp;</operator> <name pos:start="19:40" pos:end="19:45">msr_dr</name> <operator pos:start="19:47" pos:end="19:48">==</operator> <literal type="number" pos:start="19:50" pos:end="19:50">0</literal><operator pos:start="19:51" pos:end="19:51">)</operator></expr>)</condition> <block pos:start="19:54" pos:end="45:5">{<block_content pos:start="21:9" pos:end="43:9">

        <if_stmt pos:start="21:9" pos:end="43:9"><if pos:start="21:9" pos:end="31:9">if <condition pos:start="21:12" pos:end="21:48">(<expr pos:start="21:13" pos:end="21:47"><name pos:start="21:13" pos:end="21:26"><name pos:start="21:13" pos:end="21:15">env</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:26">mmu_model</name></name> <operator pos:start="21:28" pos:end="21:29">==</operator> <name pos:start="21:31" pos:end="21:47">POWERPC_MMU_BOOKE</name></expr>)</condition> <block pos:start="21:50" pos:end="31:9">{<block_content pos:start="27:13" pos:end="29:65">

            <comment type="block" pos:start="23:13" pos:end="25:64">/* The BookE MMU always performs address translation. The

               IS and DS bits only affect the address space.  */</comment>

            <expr_stmt pos:start="27:13" pos:end="29:65"><expr pos:start="27:13" pos:end="29:64"><name pos:start="27:13" pos:end="27:15">ret</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="29:64"><name pos:start="27:19" pos:end="27:47">mmubooke_get_physical_address</name><argument_list pos:start="27:48" pos:end="29:64">(<argument pos:start="27:49" pos:end="27:51"><expr pos:start="27:49" pos:end="27:51"><name pos:start="27:49" pos:end="27:51">env</name></expr></argument>, <argument pos:start="27:54" pos:end="27:56"><expr pos:start="27:54" pos:end="27:56"><name pos:start="27:54" pos:end="27:56">ctx</name></expr></argument>, <argument pos:start="27:59" pos:end="27:63"><expr pos:start="27:59" pos:end="27:63"><name pos:start="27:59" pos:end="27:63">eaddr</name></expr></argument>,

                                                <argument pos:start="29:49" pos:end="29:50"><expr pos:start="29:49" pos:end="29:50"><name pos:start="29:49" pos:end="29:50">rw</name></expr></argument>, <argument pos:start="29:53" pos:end="29:63"><expr pos:start="29:53" pos:end="29:63"><name pos:start="29:53" pos:end="29:63">access_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="31:11" pos:end="37:9">else if <condition pos:start="31:19" pos:end="31:58">(<expr pos:start="31:20" pos:end="31:57"><name pos:start="31:20" pos:end="31:33"><name pos:start="31:20" pos:end="31:22">env</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:33">mmu_model</name></name> <operator pos:start="31:35" pos:end="31:36">==</operator> <name pos:start="31:38" pos:end="31:57">POWERPC_MMU_BOOKE206</name></expr>)</condition> <block pos:start="31:60" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:64">

            <expr_stmt pos:start="33:13" pos:end="35:64"><expr pos:start="33:13" pos:end="35:63"><name pos:start="33:13" pos:end="33:15">ret</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="35:63"><name pos:start="33:19" pos:end="33:50">mmubooke206_get_physical_address</name><argument_list pos:start="33:51" pos:end="35:63">(<argument pos:start="33:52" pos:end="33:54"><expr pos:start="33:52" pos:end="33:54"><name pos:start="33:52" pos:end="33:54">env</name></expr></argument>, <argument pos:start="33:57" pos:end="33:59"><expr pos:start="33:57" pos:end="33:59"><name pos:start="33:57" pos:end="33:59">ctx</name></expr></argument>, <argument pos:start="33:62" pos:end="33:66"><expr pos:start="33:62" pos:end="33:66"><name pos:start="33:62" pos:end="33:66">eaddr</name></expr></argument>, <argument pos:start="33:69" pos:end="33:70"><expr pos:start="33:69" pos:end="33:70"><name pos:start="33:69" pos:end="33:70">rw</name></expr></argument>,

                                                   <argument pos:start="35:52" pos:end="35:62"><expr pos:start="35:52" pos:end="35:62"><name pos:start="35:52" pos:end="35:62">access_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="43:9">else <block pos:start="37:16" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:54">

            <comment type="block" pos:start="39:13" pos:end="39:42">/* No address translation.  */</comment>

            <expr_stmt pos:start="41:13" pos:end="41:54"><expr pos:start="41:13" pos:end="41:53"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:53"><name pos:start="41:19" pos:end="41:32">check_physical</name><argument_list pos:start="41:33" pos:end="41:53">(<argument pos:start="41:34" pos:end="41:36"><expr pos:start="41:34" pos:end="41:36"><name pos:start="41:34" pos:end="41:36">env</name></expr></argument>, <argument pos:start="41:39" pos:end="41:41"><expr pos:start="41:39" pos:end="41:41"><name pos:start="41:39" pos:end="41:41">ctx</name></expr></argument>, <argument pos:start="41:44" pos:end="41:48"><expr pos:start="41:44" pos:end="41:48"><name pos:start="41:44" pos:end="41:48">eaddr</name></expr></argument>, <argument pos:start="41:51" pos:end="41:52"><expr pos:start="41:51" pos:end="41:52"><name pos:start="41:51" pos:end="41:52">rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="145:0">else <block pos:start="45:12" pos:end="145:0">{<block_content pos:start="47:9" pos:end="134:9">

        <expr_stmt pos:start="47:9" pos:end="47:17"><expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <operator pos:start="47:15" pos:end="47:15">-</operator><literal type="number" pos:start="47:16" pos:end="47:16">1</literal></expr>;</expr_stmt>

        <switch pos:start="49:9" pos:end="134:9">switch <condition pos:start="49:16" pos:end="49:31">(<expr pos:start="49:17" pos:end="49:30"><name pos:start="49:17" pos:end="49:30"><name pos:start="49:17" pos:end="49:19">env</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:30">mmu_model</name></name></expr>)</condition> <block pos:start="49:33" pos:end="134:9">{<block_content pos:start="51:9" pos:end="132:22">

        <case pos:start="51:9" pos:end="51:29">case <expr pos:start="51:14" pos:end="51:28"><name pos:start="51:14" pos:end="51:28">POWERPC_MMU_32B</name></expr>:</case>

        <case pos:start="53:9" pos:end="53:29">case <expr pos:start="53:14" pos:end="53:28"><name pos:start="53:14" pos:end="53:28">POWERPC_MMU_601</name></expr>:</case>

        <case pos:start="55:9" pos:end="55:34">case <expr pos:start="55:14" pos:end="55:33"><name pos:start="55:14" pos:end="55:33">POWERPC_MMU_SOFT_6xx</name></expr>:</case>

        <case pos:start="57:9" pos:end="57:35">case <expr pos:start="57:14" pos:end="57:34"><name pos:start="57:14" pos:end="57:34">POWERPC_MMU_SOFT_74xx</name></expr>:</case>

            <comment type="block" pos:start="59:13" pos:end="59:35">/* Try to find a BAT */</comment>

            <if_stmt pos:start="61:13" pos:end="68:0"><if pos:start="61:13" pos:end="68:0">if <condition pos:start="61:16" pos:end="61:34">(<expr pos:start="61:17" pos:end="61:33"><name pos:start="61:17" pos:end="61:28"><name pos:start="61:17" pos:end="61:19">env</name><operator pos:start="61:20" pos:end="61:21">-&gt;</operator><name pos:start="61:22" pos:end="61:28">nb_BATs</name></name> <operator pos:start="61:30" pos:end="61:31">!=</operator> <literal type="number" pos:start="61:33" pos:end="61:33">0</literal></expr>)</condition> <block pos:start="61:36" pos:end="68:0">{<block_content pos:start="63:17" pos:end="63:64">

                <expr_stmt pos:start="63:17" pos:end="63:64"><expr pos:start="63:17" pos:end="63:63"><name pos:start="63:17" pos:end="63:19">ret</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <call pos:start="63:23" pos:end="63:63"><name pos:start="63:23" pos:end="63:29">get_bat</name><argument_list pos:start="63:30" pos:end="63:63">(<argument pos:start="63:31" pos:end="63:33"><expr pos:start="63:31" pos:end="63:33"><name pos:start="63:31" pos:end="63:33">env</name></expr></argument>, <argument pos:start="63:36" pos:end="63:38"><expr pos:start="63:36" pos:end="63:38"><name pos:start="63:36" pos:end="63:38">ctx</name></expr></argument>, <argument pos:start="63:41" pos:end="63:45"><expr pos:start="63:41" pos:end="63:45"><name pos:start="63:41" pos:end="63:45">eaddr</name></expr></argument>, <argument pos:start="63:48" pos:end="63:49"><expr pos:start="63:48" pos:end="63:49"><name pos:start="63:48" pos:end="63:49">rw</name></expr></argument>, <argument pos:start="63:52" pos:end="63:62"><expr pos:start="63:52" pos:end="63:62"><name pos:start="63:52" pos:end="63:62">access_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:if pos:start="67:1" pos:end="67:25">#<cpp:directive pos:start="67:2" pos:end="67:3">if</cpp:directive> <expr pos:start="67:5" pos:end="67:25"><call pos:start="67:5" pos:end="67:25"><name pos:start="67:5" pos:end="67:11">defined</name><argument_list pos:start="67:12" pos:end="67:25">(<argument pos:start="67:13" pos:end="67:24"><expr pos:start="67:13" pos:end="67:24"><name pos:start="67:13" pos:end="67:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="69:9" pos:end="69:29">case <expr pos:start="69:14" pos:end="69:28"><name pos:start="69:14" pos:end="69:28">POWERPC_MMU_620</name></expr>:</case>

        <case pos:start="71:9" pos:end="71:29">case <expr pos:start="71:14" pos:end="71:28"><name pos:start="71:14" pos:end="71:28">POWERPC_MMU_64B</name></expr>:</case>

        <case pos:start="73:9" pos:end="77:0">case <expr pos:start="73:14" pos:end="73:29"><name pos:start="73:14" pos:end="73:29">POWERPC_MMU_2_06</name></expr>:</case>


<cpp:endif pos:start="76:1" pos:end="76:6">#<cpp:directive pos:start="76:2" pos:end="76:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="78:13" pos:end="84:13"><if pos:start="78:13" pos:end="84:13">if <condition pos:start="78:16" pos:end="78:24">(<expr pos:start="78:17" pos:end="78:23"><name pos:start="78:17" pos:end="78:19">ret</name> <operator pos:start="78:21" pos:end="78:21">&lt;</operator> <literal type="number" pos:start="78:23" pos:end="78:23">0</literal></expr>)</condition> <block pos:start="78:26" pos:end="84:13">{<block_content pos:start="82:17" pos:end="82:68">

                <comment type="block" pos:start="80:17" pos:end="80:70">/* We didn't match any BAT entry or don't have BATs */</comment>

                <expr_stmt pos:start="82:17" pos:end="82:68"><expr pos:start="82:17" pos:end="82:67"><name pos:start="82:17" pos:end="82:19">ret</name> <operator pos:start="82:21" pos:end="82:21">=</operator> <call pos:start="82:23" pos:end="82:67"><name pos:start="82:23" pos:end="82:33">get_segment</name><argument_list pos:start="82:34" pos:end="82:67">(<argument pos:start="82:35" pos:end="82:37"><expr pos:start="82:35" pos:end="82:37"><name pos:start="82:35" pos:end="82:37">env</name></expr></argument>, <argument pos:start="82:40" pos:end="82:42"><expr pos:start="82:40" pos:end="82:42"><name pos:start="82:40" pos:end="82:42">ctx</name></expr></argument>, <argument pos:start="82:45" pos:end="82:49"><expr pos:start="82:45" pos:end="82:49"><name pos:start="82:45" pos:end="82:49">eaddr</name></expr></argument>, <argument pos:start="82:52" pos:end="82:53"><expr pos:start="82:52" pos:end="82:53"><name pos:start="82:52" pos:end="82:53">rw</name></expr></argument>, <argument pos:start="82:56" pos:end="82:66"><expr pos:start="82:56" pos:end="82:66"><name pos:start="82:56" pos:end="82:66">access_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="86:13" pos:end="86:18">break;</break>

        <case pos:start="88:9" pos:end="88:34">case <expr pos:start="88:14" pos:end="88:33"><name pos:start="88:14" pos:end="88:33">POWERPC_MMU_SOFT_4xx</name></expr>:</case>

        <case pos:start="90:9" pos:end="90:36">case <expr pos:start="90:14" pos:end="90:35"><name pos:start="90:14" pos:end="90:35">POWERPC_MMU_SOFT_4xx_Z</name></expr>:</case>

            <expr_stmt pos:start="92:13" pos:end="94:63"><expr pos:start="92:13" pos:end="94:62"><name pos:start="92:13" pos:end="92:15">ret</name> <operator pos:start="92:17" pos:end="92:17">=</operator> <call pos:start="92:19" pos:end="94:62"><name pos:start="92:19" pos:end="92:45">mmu40x_get_physical_address</name><argument_list pos:start="92:46" pos:end="94:62">(<argument pos:start="92:47" pos:end="92:49"><expr pos:start="92:47" pos:end="92:49"><name pos:start="92:47" pos:end="92:49">env</name></expr></argument>, <argument pos:start="92:52" pos:end="92:54"><expr pos:start="92:52" pos:end="92:54"><name pos:start="92:52" pos:end="92:54">ctx</name></expr></argument>, <argument pos:start="92:57" pos:end="92:61"><expr pos:start="92:57" pos:end="92:61"><name pos:start="92:57" pos:end="92:61">eaddr</name></expr></argument>,

                                              <argument pos:start="94:47" pos:end="94:48"><expr pos:start="94:47" pos:end="94:48"><name pos:start="94:47" pos:end="94:48">rw</name></expr></argument>, <argument pos:start="94:51" pos:end="94:61"><expr pos:start="94:51" pos:end="94:61"><name pos:start="94:51" pos:end="94:61">access_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="96:13" pos:end="96:18">break;</break>

        <case pos:start="98:9" pos:end="98:31">case <expr pos:start="98:14" pos:end="98:30"><name pos:start="98:14" pos:end="98:30">POWERPC_MMU_BOOKE</name></expr>:</case>

            <expr_stmt pos:start="100:13" pos:end="102:65"><expr pos:start="100:13" pos:end="102:64"><name pos:start="100:13" pos:end="100:15">ret</name> <operator pos:start="100:17" pos:end="100:17">=</operator> <call pos:start="100:19" pos:end="102:64"><name pos:start="100:19" pos:end="100:47">mmubooke_get_physical_address</name><argument_list pos:start="100:48" pos:end="102:64">(<argument pos:start="100:49" pos:end="100:51"><expr pos:start="100:49" pos:end="100:51"><name pos:start="100:49" pos:end="100:51">env</name></expr></argument>, <argument pos:start="100:54" pos:end="100:56"><expr pos:start="100:54" pos:end="100:56"><name pos:start="100:54" pos:end="100:56">ctx</name></expr></argument>, <argument pos:start="100:59" pos:end="100:63"><expr pos:start="100:59" pos:end="100:63"><name pos:start="100:59" pos:end="100:63">eaddr</name></expr></argument>,

                                                <argument pos:start="102:49" pos:end="102:50"><expr pos:start="102:49" pos:end="102:50"><name pos:start="102:49" pos:end="102:50">rw</name></expr></argument>, <argument pos:start="102:53" pos:end="102:63"><expr pos:start="102:53" pos:end="102:63"><name pos:start="102:53" pos:end="102:63">access_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="104:13" pos:end="104:18">break;</break>

        <case pos:start="106:9" pos:end="106:34">case <expr pos:start="106:14" pos:end="106:33"><name pos:start="106:14" pos:end="106:33">POWERPC_MMU_BOOKE206</name></expr>:</case>

            <expr_stmt pos:start="108:13" pos:end="110:60"><expr pos:start="108:13" pos:end="110:59"><name pos:start="108:13" pos:end="108:15">ret</name> <operator pos:start="108:17" pos:end="108:17">=</operator> <call pos:start="108:19" pos:end="110:59"><name pos:start="108:19" pos:end="108:50">mmubooke206_get_physical_address</name><argument_list pos:start="108:51" pos:end="110:59">(<argument pos:start="108:52" pos:end="108:54"><expr pos:start="108:52" pos:end="108:54"><name pos:start="108:52" pos:end="108:54">env</name></expr></argument>, <argument pos:start="108:57" pos:end="108:59"><expr pos:start="108:57" pos:end="108:59"><name pos:start="108:57" pos:end="108:59">ctx</name></expr></argument>, <argument pos:start="108:62" pos:end="108:66"><expr pos:start="108:62" pos:end="108:66"><name pos:start="108:62" pos:end="108:66">eaddr</name></expr></argument>, <argument pos:start="108:69" pos:end="108:70"><expr pos:start="108:69" pos:end="108:70"><name pos:start="108:69" pos:end="108:70">rw</name></expr></argument>,

                                               <argument pos:start="110:48" pos:end="110:58"><expr pos:start="110:48" pos:end="110:58"><name pos:start="110:48" pos:end="110:58">access_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="112:13" pos:end="112:18">break;</break>

        <case pos:start="114:9" pos:end="114:32">case <expr pos:start="114:14" pos:end="114:31"><name pos:start="114:14" pos:end="114:31">POWERPC_MMU_MPC8xx</name></expr>:</case>

            <comment type="block" pos:start="116:13" pos:end="116:27">/* XXX: TODO */</comment>

            <expr_stmt pos:start="118:13" pos:end="118:68"><expr pos:start="118:13" pos:end="118:67"><call pos:start="118:13" pos:end="118:67"><name pos:start="118:13" pos:end="118:21">cpu_abort</name><argument_list pos:start="118:22" pos:end="118:67">(<argument pos:start="118:23" pos:end="118:25"><expr pos:start="118:23" pos:end="118:25"><name pos:start="118:23" pos:end="118:25">env</name></expr></argument>, <argument pos:start="118:28" pos:end="118:66"><expr pos:start="118:28" pos:end="118:66"><literal type="string" pos:start="118:28" pos:end="118:66">"MPC8xx MMU model is not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="120:13" pos:end="120:18">break;</break>

        <case pos:start="122:9" pos:end="122:30">case <expr pos:start="122:14" pos:end="122:29"><name pos:start="122:14" pos:end="122:29">POWERPC_MMU_REAL</name></expr>:</case>

            <expr_stmt pos:start="124:13" pos:end="124:79"><expr pos:start="124:13" pos:end="124:78"><call pos:start="124:13" pos:end="124:78"><name pos:start="124:13" pos:end="124:21">cpu_abort</name><argument_list pos:start="124:22" pos:end="124:78">(<argument pos:start="124:23" pos:end="124:25"><expr pos:start="124:23" pos:end="124:25"><name pos:start="124:23" pos:end="124:25">env</name></expr></argument>, <argument pos:start="124:28" pos:end="124:77"><expr pos:start="124:28" pos:end="124:77"><literal type="string" pos:start="124:28" pos:end="124:77">"PowerPC in real mode do not do any translation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="126:13" pos:end="126:22">return <expr pos:start="126:20" pos:end="126:21"><operator pos:start="126:20" pos:end="126:20">-</operator><literal type="number" pos:start="126:21" pos:end="126:21">1</literal></expr>;</return>

        <default pos:start="128:9" pos:end="128:16">default:</default>

            <expr_stmt pos:start="130:13" pos:end="130:61"><expr pos:start="130:13" pos:end="130:60"><call pos:start="130:13" pos:end="130:60"><name pos:start="130:13" pos:end="130:21">cpu_abort</name><argument_list pos:start="130:22" pos:end="130:60">(<argument pos:start="130:23" pos:end="130:25"><expr pos:start="130:23" pos:end="130:25"><name pos:start="130:23" pos:end="130:25">env</name></expr></argument>, <argument pos:start="130:28" pos:end="130:59"><expr pos:start="130:28" pos:end="130:59"><literal type="string" pos:start="130:28" pos:end="130:59">"Unknown or invalid MMU model\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="132:13" pos:end="132:22">return <expr pos:start="132:20" pos:end="132:21"><operator pos:start="132:20" pos:end="132:20">-</operator><literal type="number" pos:start="132:21" pos:end="132:21">1</literal></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>

<cpp:if pos:start="138:1" pos:end="138:5">#<cpp:directive pos:start="138:2" pos:end="138:3">if</cpp:directive> <expr pos:start="138:5" pos:end="138:5"><literal type="number" pos:start="138:5" pos:end="138:5">0</literal></expr></cpp:if>

    qemu_log("%s address " TARGET_FMT_lx " =&gt; %d " TARGET_FMT_plx "\n",

             __func__, eaddr, ret, ctx-&gt;raddr);

<cpp:endif pos:start="144:1" pos:end="144:6">#<cpp:directive pos:start="144:2" pos:end="144:6">endif</cpp:directive></cpp:endif>



    <return pos:start="148:5" pos:end="148:15">return <expr pos:start="148:12" pos:end="148:14"><name pos:start="148:12" pos:end="148:14">ret</name></expr>;</return>

</block_content>}</block></function></unit>
