<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11096.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">vhost_user_read</name><parameter_list pos:start="1:27" pos:end="1:68">(<parameter pos:start="1:28" pos:end="1:48"><decl pos:start="1:28" pos:end="1:48"><type pos:start="1:28" pos:end="1:48"><name pos:start="1:28" pos:end="1:43"><name pos:start="1:28" pos:end="1:33">struct</name> <name pos:start="1:35" pos:end="1:43">vhost_dev</name></name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dev</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:67"><decl pos:start="1:51" pos:end="1:67"><type pos:start="1:51" pos:end="1:67"><name pos:start="1:51" pos:end="1:62">VhostUserMsg</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:67">msg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:14">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">CharDriverState</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:24">chr</name> <init pos:start="5:26" pos:end="5:38">= <expr pos:start="5:28" pos:end="5:38"><name pos:start="5:28" pos:end="5:38"><name pos:start="5:28" pos:end="5:30">dev</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:38">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:14">p</name> <init pos:start="7:16" pos:end="7:32">= <expr pos:start="7:18" pos:end="7:32"><operator pos:start="7:18" pos:end="7:18">(</operator><name pos:start="7:19" pos:end="7:25">uint8_t</name> <operator pos:start="7:27" pos:end="7:27">*</operator><operator pos:start="7:28" pos:end="7:28">)</operator> <name pos:start="7:30" pos:end="7:32">msg</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">r</name></decl>, <decl pos:start="9:12" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:15">size</name> <init pos:start="9:17" pos:end="9:37">= <expr pos:start="9:19" pos:end="9:37"><name pos:start="9:19" pos:end="9:37">VHOST_USER_HDR_SIZE</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:43"><expr pos:start="13:5" pos:end="13:42"><name pos:start="13:5" pos:end="13:5">r</name> <operator pos:start="13:7" pos:end="13:7">=</operator> <call pos:start="13:9" pos:end="13:42"><name pos:start="13:9" pos:end="13:28">qemu_chr_fe_read_all</name><argument_list pos:start="13:29" pos:end="13:42">(<argument pos:start="13:30" pos:end="13:32"><expr pos:start="13:30" pos:end="13:32"><name pos:start="13:30" pos:end="13:32">chr</name></expr></argument>, <argument pos:start="13:35" pos:end="13:35"><expr pos:start="13:35" pos:end="13:35"><name pos:start="13:35" pos:end="13:35">p</name></expr></argument>, <argument pos:start="13:38" pos:end="13:41"><expr pos:start="13:38" pos:end="13:41"><name pos:start="13:38" pos:end="13:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:18">(<expr pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:9">r</name> <operator pos:start="15:11" pos:end="15:12">!=</operator> <name pos:start="15:14" pos:end="15:17">size</name></expr>)</condition> <block pos:start="15:20" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:18">

        <expr_stmt pos:start="17:9" pos:end="19:22"><expr pos:start="17:9" pos:end="19:21"><call pos:start="17:9" pos:end="19:21"><name pos:start="17:9" pos:end="17:20">error_report</name><argument_list pos:start="17:21" pos:end="19:21">(<argument pos:start="17:22" pos:end="17:72"><expr pos:start="17:22" pos:end="17:72"><literal type="string" pos:start="17:22" pos:end="17:72">"Failed to read msg header. Read %d instead of %d."</literal></expr></argument>, <argument pos:start="17:75" pos:end="17:75"><expr pos:start="17:75" pos:end="17:75"><name pos:start="17:75" pos:end="17:75">r</name></expr></argument>,

                <argument pos:start="19:17" pos:end="19:20"><expr pos:start="19:17" pos:end="19:20"><name pos:start="19:17" pos:end="19:20">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="21:9" pos:end="21:18">goto <name pos:start="21:14" pos:end="21:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:33">/* validate received flags */</comment>

    <if_stmt pos:start="29:5" pos:end="39:5"><if pos:start="29:5" pos:end="39:5">if <condition pos:start="29:8" pos:end="29:67">(<expr pos:start="29:9" pos:end="29:66"><name pos:start="29:9" pos:end="29:18"><name pos:start="29:9" pos:end="29:11">msg</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:18">flags</name></name> <operator pos:start="29:20" pos:end="29:21">!=</operator> <operator pos:start="29:23" pos:end="29:23">(</operator><name pos:start="29:24" pos:end="29:44">VHOST_USER_REPLY_MASK</name> <operator pos:start="29:46" pos:end="29:46">|</operator> <name pos:start="29:48" pos:end="29:65">VHOST_USER_VERSION</name><operator pos:start="29:66" pos:end="29:66">)</operator></expr>)</condition> <block pos:start="29:69" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:18">

        <expr_stmt pos:start="31:9" pos:end="35:60"><expr pos:start="31:9" pos:end="35:59"><call pos:start="31:9" pos:end="35:59"><name pos:start="31:9" pos:end="31:20">error_report</name><argument_list pos:start="31:21" pos:end="35:59">(<argument pos:start="31:22" pos:end="33:46"><expr pos:start="31:22" pos:end="33:46"><literal type="string" pos:start="31:22" pos:end="31:49">"Failed to read msg header."</literal>

                <literal type="string" pos:start="33:17" pos:end="33:46">" Flags 0x%x instead of 0x%x."</literal></expr></argument>, <argument pos:start="33:49" pos:end="33:58"><expr pos:start="33:49" pos:end="33:58"><name pos:start="33:49" pos:end="33:58"><name pos:start="33:49" pos:end="33:51">msg</name><operator pos:start="33:52" pos:end="33:53">-&gt;</operator><name pos:start="33:54" pos:end="33:58">flags</name></name></expr></argument>,

                <argument pos:start="35:17" pos:end="35:58"><expr pos:start="35:17" pos:end="35:58"><name pos:start="35:17" pos:end="35:37">VHOST_USER_REPLY_MASK</name> <operator pos:start="35:39" pos:end="35:39">|</operator> <name pos:start="35:41" pos:end="35:58">VHOST_USER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="37:9" pos:end="37:18">goto <name pos:start="37:14" pos:end="37:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:39">/* validate message size is sane */</comment>

    <if_stmt pos:start="45:5" pos:end="55:5"><if pos:start="45:5" pos:end="55:5">if <condition pos:start="45:8" pos:end="45:44">(<expr pos:start="45:9" pos:end="45:43"><name pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:11">msg</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:17">size</name></name> <operator pos:start="45:19" pos:end="45:19">&gt;</operator> <name pos:start="45:21" pos:end="45:43">VHOST_USER_PAYLOAD_SIZE</name></expr>)</condition> <block pos:start="45:46" pos:end="55:5">{<block_content pos:start="47:9" pos:end="53:18">

        <expr_stmt pos:start="47:9" pos:end="51:41"><expr pos:start="47:9" pos:end="51:40"><call pos:start="47:9" pos:end="51:40"><name pos:start="47:9" pos:end="47:20">error_report</name><argument_list pos:start="47:21" pos:end="51:40">(<argument pos:start="47:22" pos:end="49:51"><expr pos:start="47:22" pos:end="49:51"><literal type="string" pos:start="47:22" pos:end="47:49">"Failed to read msg header."</literal>

                <literal type="string" pos:start="49:17" pos:end="49:51">" Size %d exceeds the maximum %zu."</literal></expr></argument>, <argument pos:start="49:54" pos:end="49:62"><expr pos:start="49:54" pos:end="49:62"><name pos:start="49:54" pos:end="49:62"><name pos:start="49:54" pos:end="49:56">msg</name><operator pos:start="49:57" pos:end="49:58">-&gt;</operator><name pos:start="49:59" pos:end="49:62">size</name></name></expr></argument>,

                <argument pos:start="51:17" pos:end="51:39"><expr pos:start="51:17" pos:end="51:39"><name pos:start="51:17" pos:end="51:39">VHOST_USER_PAYLOAD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="53:9" pos:end="53:18">goto <name pos:start="53:14" pos:end="53:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="77:5"><if pos:start="59:5" pos:end="77:5">if <condition pos:start="59:8" pos:end="59:18">(<expr pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:11">msg</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:17">size</name></name></expr>)</condition> <block pos:start="59:20" pos:end="77:5">{<block_content pos:start="61:9" pos:end="75:9">

        <expr_stmt pos:start="61:9" pos:end="61:33"><expr pos:start="61:9" pos:end="61:32"><name pos:start="61:9" pos:end="61:9">p</name> <operator pos:start="61:11" pos:end="61:12">+=</operator> <name pos:start="61:14" pos:end="61:32">VHOST_USER_HDR_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:25"><expr pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:12">size</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <name pos:start="63:16" pos:end="63:24"><name pos:start="63:16" pos:end="63:18">msg</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:24">size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:47"><expr pos:start="65:9" pos:end="65:46"><name pos:start="65:9" pos:end="65:9">r</name> <operator pos:start="65:11" pos:end="65:11">=</operator> <call pos:start="65:13" pos:end="65:46"><name pos:start="65:13" pos:end="65:32">qemu_chr_fe_read_all</name><argument_list pos:start="65:33" pos:end="65:46">(<argument pos:start="65:34" pos:end="65:36"><expr pos:start="65:34" pos:end="65:36"><name pos:start="65:34" pos:end="65:36">chr</name></expr></argument>, <argument pos:start="65:39" pos:end="65:39"><expr pos:start="65:39" pos:end="65:39"><name pos:start="65:39" pos:end="65:39">p</name></expr></argument>, <argument pos:start="65:42" pos:end="65:45"><expr pos:start="65:42" pos:end="65:45"><name pos:start="65:42" pos:end="65:45">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="75:9"><if pos:start="67:9" pos:end="75:9">if <condition pos:start="67:12" pos:end="67:22">(<expr pos:start="67:13" pos:end="67:21"><name pos:start="67:13" pos:end="67:13">r</name> <operator pos:start="67:15" pos:end="67:16">!=</operator> <name pos:start="67:18" pos:end="67:21">size</name></expr>)</condition> <block pos:start="67:24" pos:end="75:9">{<block_content pos:start="69:13" pos:end="73:22">

            <expr_stmt pos:start="69:13" pos:end="71:66"><expr pos:start="69:13" pos:end="71:65"><call pos:start="69:13" pos:end="71:65"><name pos:start="69:13" pos:end="69:24">error_report</name><argument_list pos:start="69:25" pos:end="71:65">(<argument pos:start="69:26" pos:end="71:50"><expr pos:start="69:26" pos:end="71:50"><literal type="string" pos:start="69:26" pos:end="69:54">"Failed to read msg payload."</literal>

                         <literal type="string" pos:start="71:26" pos:end="71:50">" Read %d instead of %d."</literal></expr></argument>, <argument pos:start="71:53" pos:end="71:53"><expr pos:start="71:53" pos:end="71:53"><name pos:start="71:53" pos:end="71:53">r</name></expr></argument>, <argument pos:start="71:56" pos:end="71:64"><expr pos:start="71:56" pos:end="71:64"><name pos:start="71:56" pos:end="71:64"><name pos:start="71:56" pos:end="71:58">msg</name><operator pos:start="71:59" pos:end="71:60">-&gt;</operator><name pos:start="71:61" pos:end="71:64">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="73:13" pos:end="73:22">goto <name pos:start="73:18" pos:end="73:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="81:5" pos:end="81:13">return <expr pos:start="81:12" pos:end="81:12"><literal type="number" pos:start="81:12" pos:end="81:12">0</literal></expr>;</return>



<label pos:start="85:1" pos:end="85:5"><name pos:start="85:1" pos:end="85:4">fail</name>:</label>

    <return pos:start="87:5" pos:end="87:14">return <expr pos:start="87:12" pos:end="87:13"><operator pos:start="87:12" pos:end="87:12">-</operator><literal type="number" pos:start="87:13" pos:end="87:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
