<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25392.c" pos:tabs="8"><function pos:start="1:1" pos:end="217:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">decode_packet</name><parameter_list pos:start="1:25" pos:end="3:69">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:35"><decl pos:start="3:26" pos:end="3:35"><type pos:start="3:26" pos:end="3:35"><name pos:start="3:26" pos:end="3:29">void</name> <modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:35">data</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:51"><decl pos:start="3:38" pos:end="3:51"><type pos:start="3:38" pos:end="3:51"><name pos:start="3:38" pos:end="3:40">int</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:51">data_size</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:68"><decl pos:start="3:54" pos:end="3:68"><type pos:start="3:54" pos:end="3:68"><name pos:start="3:54" pos:end="3:61">AVPacket</name><modifier pos:start="3:62" pos:end="3:62">*</modifier></type> <name pos:start="3:64" pos:end="3:68">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="217:1">{<block_content pos:start="7:5" pos:end="215:76">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">WmallDecodeCtx</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:40">= <expr pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:29">avctx</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:17">GetBitContext</name><modifier pos:start="9:18" pos:end="9:18">*</modifier></type> <name pos:start="9:20" pos:end="9:21">gb</name>  <init pos:start="9:24" pos:end="9:32">= <expr pos:start="9:26" pos:end="9:32"><operator pos:start="9:26" pos:end="9:26">&amp;</operator><name pos:start="9:27" pos:end="9:32"><name pos:start="9:27" pos:end="9:27">s</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:32">pgb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:18"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name><modifier pos:start="11:18" pos:end="11:18">*</modifier></type> <name pos:start="11:20" pos:end="11:22">buf</name> <init pos:start="11:24" pos:end="11:36">= <expr pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:30">avpkt</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:16">buf_size</name>       <init pos:start="13:24" pos:end="13:36">= <expr pos:start="13:26" pos:end="13:36"><name pos:start="13:26" pos:end="13:36"><name pos:start="13:26" pos:end="13:30">avpkt</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:27">num_bits_prev_frame</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:30">packet_sequence_number</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:28"><expr pos:start="21:5" pos:end="21:27"><name pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:14">samples</name></name>       <operator pos:start="21:22" pos:end="21:22">=</operator> <name pos:start="21:24" pos:end="21:27">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:60"><expr pos:start="23:5" pos:end="23:59"><name pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:18">samples_end</name></name>   <operator pos:start="23:22" pos:end="23:22">=</operator> <operator pos:start="23:24" pos:end="23:24">(</operator><name pos:start="23:25" pos:end="23:29">float</name><operator pos:start="23:30" pos:end="23:30">*</operator><operator pos:start="23:31" pos:end="23:31">)</operator><operator pos:start="23:32" pos:end="23:32">(</operator><operator pos:start="23:33" pos:end="23:33">(</operator><name pos:start="23:34" pos:end="23:39">int8_t</name><operator pos:start="23:40" pos:end="23:40">*</operator><operator pos:start="23:41" pos:end="23:41">)</operator><name pos:start="23:42" pos:end="23:45">data</name> <operator pos:start="23:47" pos:end="23:47">+</operator> <operator pos:start="23:49" pos:end="23:49">*</operator><name pos:start="23:50" pos:end="23:58">data_size</name><operator pos:start="23:59" pos:end="23:59">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:19"><expr pos:start="25:5" pos:end="25:18"><operator pos:start="25:5" pos:end="25:5">*</operator><name pos:start="25:6" pos:end="25:14">data_size</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="191:5"><if pos:start="29:5" pos:end="141:5">if <condition pos:start="29:8" pos:end="29:41">(<expr pos:start="29:9" pos:end="29:40"><name pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:22">packet_done</name></name> <operator pos:start="29:24" pos:end="29:25">||</operator> <name pos:start="29:27" pos:end="29:40"><name pos:start="29:27" pos:end="29:27">s</name><operator pos:start="29:28" pos:end="29:29">-&gt;</operator><name pos:start="29:30" pos:end="29:40">packet_loss</name></name></expr>)</condition> <block pos:start="29:43" pos:end="141:5">{<block_content pos:start="31:9" pos:end="137:9">

        <expr_stmt pos:start="31:9" pos:end="31:27"><expr pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:22">packet_done</name></name> <operator pos:start="31:24" pos:end="31:24">=</operator> <literal type="number" pos:start="31:26" pos:end="31:26">0</literal></expr>;</expr_stmt>



        <comment type="block" format="doxygen" pos:start="35:9" pos:end="35:49">/** sanity check for the buffer length */</comment>

        <if_stmt pos:start="37:9" pos:end="39:21"><if pos:start="37:9" pos:end="39:21">if <condition pos:start="37:12" pos:end="37:42">(<expr pos:start="37:13" pos:end="37:41"><name pos:start="37:13" pos:end="37:20">buf_size</name> <operator pos:start="37:22" pos:end="37:22">&lt;</operator> <name pos:start="37:24" pos:end="37:41"><name pos:start="37:24" pos:end="37:28">avctx</name><operator pos:start="37:29" pos:end="37:30">-&gt;</operator><name pos:start="37:31" pos:end="37:41">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:21"><block_content pos:start="39:13" pos:end="39:21">

            <return pos:start="39:13" pos:end="39:21">return <expr pos:start="39:20" pos:end="39:20"><literal type="number" pos:start="39:20" pos:end="39:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:61"><expr pos:start="43:9" pos:end="43:60"><name pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:28">next_packet_start</name></name> <operator pos:start="43:30" pos:end="43:30">=</operator> <name pos:start="43:32" pos:end="43:39">buf_size</name> <operator pos:start="43:41" pos:end="43:41">-</operator> <name pos:start="43:43" pos:end="43:60"><name pos:start="43:43" pos:end="43:47">avctx</name><operator pos:start="43:48" pos:end="43:49">-&gt;</operator><name pos:start="43:50" pos:end="43:60">block_align</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:38"><expr pos:start="45:9" pos:end="45:37"><name pos:start="45:9" pos:end="45:16">buf_size</name> <operator pos:start="45:18" pos:end="45:18">=</operator> <name pos:start="45:20" pos:end="45:37"><name pos:start="45:20" pos:end="45:24">avctx</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:37">block_align</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:40"><expr pos:start="47:9" pos:end="47:39"><name pos:start="47:9" pos:end="47:23"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:23">buf_bit_size</name></name> <operator pos:start="47:25" pos:end="47:25">=</operator> <name pos:start="47:27" pos:end="47:34">buf_size</name> <operator pos:start="47:36" pos:end="47:37">&lt;&lt;</operator> <literal type="number" pos:start="47:39" pos:end="47:39">3</literal></expr>;</expr_stmt>



        <comment type="block" format="doxygen" pos:start="51:9" pos:end="51:34">/** parse packet header */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:48"><expr pos:start="53:9" pos:end="53:47"><call pos:start="53:9" pos:end="53:47"><name pos:start="53:9" pos:end="53:21">init_get_bits</name><argument_list pos:start="53:22" pos:end="53:47">(<argument pos:start="53:23" pos:end="53:24"><expr pos:start="53:23" pos:end="53:24"><name pos:start="53:23" pos:end="53:24">gb</name></expr></argument>, <argument pos:start="53:27" pos:end="53:29"><expr pos:start="53:27" pos:end="53:29"><name pos:start="53:27" pos:end="53:29">buf</name></expr></argument>, <argument pos:start="53:32" pos:end="53:46"><expr pos:start="53:32" pos:end="53:46"><name pos:start="53:32" pos:end="53:46"><name pos:start="53:32" pos:end="53:32">s</name><operator pos:start="53:33" pos:end="53:34">-&gt;</operator><name pos:start="53:35" pos:end="53:46">buf_bit_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:49"><expr pos:start="55:9" pos:end="55:48"><name pos:start="55:9" pos:end="55:30">packet_sequence_number</name> <operator pos:start="55:32" pos:end="55:32">=</operator> <call pos:start="55:34" pos:end="55:48"><name pos:start="55:34" pos:end="55:41">get_bits</name><argument_list pos:start="55:42" pos:end="55:48">(<argument pos:start="55:43" pos:end="55:44"><expr pos:start="55:43" pos:end="55:44"><name pos:start="55:43" pos:end="55:44">gb</name></expr></argument>, <argument pos:start="55:47" pos:end="55:47"><expr pos:start="55:47" pos:end="55:47"><literal type="number" pos:start="55:47" pos:end="55:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt pos:start="57:9" pos:end="57:53"><decl pos:start="57:9" pos:end="57:52"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:36">seekable_frame_in_packet</name> <init pos:start="57:38" pos:end="57:52">= <expr pos:start="57:40" pos:end="57:52"><call pos:start="57:40" pos:end="57:52"><name pos:start="57:40" pos:end="57:48">get_bits1</name><argument_list pos:start="57:49" pos:end="57:52">(<argument pos:start="57:50" pos:end="57:51"><expr pos:start="57:50" pos:end="57:51"><name pos:start="57:50" pos:end="57:51">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="59:9" pos:end="59:43"><decl pos:start="59:9" pos:end="59:42"><type pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">int</name></type> <name pos:start="59:13" pos:end="59:26">spliced_packet</name> <init pos:start="59:28" pos:end="59:42">= <expr pos:start="59:30" pos:end="59:42"><call pos:start="59:30" pos:end="59:42"><name pos:start="59:30" pos:end="59:38">get_bits1</name><argument_list pos:start="59:39" pos:end="59:42">(<argument pos:start="59:40" pos:end="59:41"><expr pos:start="59:40" pos:end="59:41"><name pos:start="59:40" pos:end="59:41">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <comment type="block" format="doxygen" pos:start="63:9" pos:end="63:77">/** get number of bits that need to be added to the previous frame */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:63"><expr pos:start="65:9" pos:end="65:62"><name pos:start="65:9" pos:end="65:27">num_bits_prev_frame</name> <operator pos:start="65:29" pos:end="65:29">=</operator> <call pos:start="65:31" pos:end="65:62"><name pos:start="65:31" pos:end="65:38">get_bits</name><argument_list pos:start="65:39" pos:end="65:62">(<argument pos:start="65:40" pos:end="65:41"><expr pos:start="65:40" pos:end="65:41"><name pos:start="65:40" pos:end="65:41">gb</name></expr></argument>, <argument pos:start="65:44" pos:end="65:61"><expr pos:start="65:44" pos:end="65:61"><name pos:start="65:44" pos:end="65:61"><name pos:start="65:44" pos:end="65:44">s</name><operator pos:start="65:45" pos:end="65:46">-&gt;</operator><name pos:start="65:47" pos:end="65:61">log2_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" format="doxygen" pos:start="69:9" pos:end="69:36">/** check for packet loss */</comment>

        <if_stmt pos:start="71:9" pos:end="81:9"><if pos:start="71:9" pos:end="81:9">if <condition pos:start="71:12" pos:end="73:78">(<expr pos:start="71:13" pos:end="73:77"><operator pos:start="71:13" pos:end="71:13">!</operator><name pos:start="71:14" pos:end="71:27"><name pos:start="71:14" pos:end="71:14">s</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:27">packet_loss</name></name> <operator pos:start="71:29" pos:end="71:30">&amp;&amp;</operator>

            <operator pos:start="73:13" pos:end="73:13">(</operator><operator pos:start="73:14" pos:end="73:14">(</operator><name pos:start="73:15" pos:end="73:39"><name pos:start="73:15" pos:end="73:15">s</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:39">packet_sequence_number</name></name> <operator pos:start="73:41" pos:end="73:41">+</operator> <literal type="number" pos:start="73:43" pos:end="73:43">1</literal><operator pos:start="73:44" pos:end="73:44">)</operator> <operator pos:start="73:46" pos:end="73:46">&amp;</operator> <literal type="number" pos:start="73:48" pos:end="73:50">0xF</literal><operator pos:start="73:51" pos:end="73:51">)</operator> <operator pos:start="73:53" pos:end="73:54">!=</operator> <name pos:start="73:56" pos:end="73:77">packet_sequence_number</name></expr>)</condition> <block pos:start="73:80" pos:end="81:9">{<block_content pos:start="75:13" pos:end="79:70">

            <expr_stmt pos:start="75:13" pos:end="75:31"><expr pos:start="75:13" pos:end="75:30"><name pos:start="75:13" pos:end="75:26"><name pos:start="75:13" pos:end="75:13">s</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:26">packet_loss</name></name> <operator pos:start="75:28" pos:end="75:28">=</operator> <literal type="number" pos:start="75:30" pos:end="75:30">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="79:70"><expr pos:start="77:13" pos:end="79:69"><call pos:start="77:13" pos:end="79:69"><name pos:start="77:13" pos:end="77:18">av_log</name><argument_list pos:start="77:19" pos:end="79:69">(<argument pos:start="77:20" pos:end="77:24"><expr pos:start="77:20" pos:end="77:24"><name pos:start="77:20" pos:end="77:24">avctx</name></expr></argument>, <argument pos:start="77:27" pos:end="77:38"><expr pos:start="77:27" pos:end="77:38"><name pos:start="77:27" pos:end="77:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:41" pos:end="77:78"><expr pos:start="77:41" pos:end="77:78"><literal type="string" pos:start="77:41" pos:end="77:78">"Packet loss detected! seq %x vs %x\n"</literal></expr></argument>,

                   <argument pos:start="79:20" pos:end="79:44"><expr pos:start="79:20" pos:end="79:44"><name pos:start="79:20" pos:end="79:44"><name pos:start="79:20" pos:end="79:20">s</name><operator pos:start="79:21" pos:end="79:22">-&gt;</operator><name pos:start="79:23" pos:end="79:44">packet_sequence_number</name></name></expr></argument>, <argument pos:start="79:47" pos:end="79:68"><expr pos:start="79:47" pos:end="79:68"><name pos:start="79:47" pos:end="79:68">packet_sequence_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:59"><expr pos:start="83:9" pos:end="83:58"><name pos:start="83:9" pos:end="83:33"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:33">packet_sequence_number</name></name> <operator pos:start="83:35" pos:end="83:35">=</operator> <name pos:start="83:37" pos:end="83:58">packet_sequence_number</name></expr>;</expr_stmt>



        <if_stmt pos:start="87:9" pos:end="121:9"><if pos:start="87:9" pos:end="115:9">if <condition pos:start="87:12" pos:end="87:36">(<expr pos:start="87:13" pos:end="87:35"><name pos:start="87:13" pos:end="87:31">num_bits_prev_frame</name> <operator pos:start="87:33" pos:end="87:33">&gt;</operator> <literal type="number" pos:start="87:35" pos:end="87:35">0</literal></expr>)</condition> <block pos:start="87:38" pos:end="115:9">{<block_content pos:start="89:13" pos:end="113:32">

            <decl_stmt pos:start="89:13" pos:end="89:77"><decl pos:start="89:13" pos:end="89:76"><type pos:start="89:13" pos:end="89:15"><name pos:start="89:13" pos:end="89:15">int</name></type> <name pos:start="89:17" pos:end="89:37">remaining_packet_bits</name> <init pos:start="89:39" pos:end="89:76">= <expr pos:start="89:41" pos:end="89:76"><name pos:start="89:41" pos:end="89:55"><name pos:start="89:41" pos:end="89:41">s</name><operator pos:start="89:42" pos:end="89:43">-&gt;</operator><name pos:start="89:44" pos:end="89:55">buf_bit_size</name></name> <operator pos:start="89:57" pos:end="89:57">-</operator> <call pos:start="89:59" pos:end="89:76"><name pos:start="89:59" pos:end="89:72">get_bits_count</name><argument_list pos:start="89:73" pos:end="89:76">(<argument pos:start="89:74" pos:end="89:75"><expr pos:start="89:74" pos:end="89:75"><name pos:start="89:74" pos:end="89:75">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="91:13" pos:end="97:13"><if pos:start="91:13" pos:end="97:13">if <condition pos:start="91:16" pos:end="91:61">(<expr pos:start="91:17" pos:end="91:60"><name pos:start="91:17" pos:end="91:35">num_bits_prev_frame</name> <operator pos:start="91:37" pos:end="91:38">&gt;=</operator> <name pos:start="91:40" pos:end="91:60">remaining_packet_bits</name></expr>)</condition> <block pos:start="91:63" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:35">

                <expr_stmt pos:start="93:17" pos:end="93:60"><expr pos:start="93:17" pos:end="93:59"><name pos:start="93:17" pos:end="93:35">num_bits_prev_frame</name> <operator pos:start="93:37" pos:end="93:37">=</operator> <name pos:start="93:39" pos:end="93:59">remaining_packet_bits</name></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:35"><expr pos:start="95:17" pos:end="95:34"><name pos:start="95:17" pos:end="95:30"><name pos:start="95:17" pos:end="95:17">s</name><operator pos:start="95:18" pos:end="95:19">-&gt;</operator><name pos:start="95:20" pos:end="95:30">packet_done</name></name> <operator pos:start="95:32" pos:end="95:32">=</operator> <literal type="number" pos:start="95:34" pos:end="95:34">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" format="doxygen" pos:start="101:13" pos:end="103:57">/** append the previous frame data to the remaining data from the

                previous packet to create a full frame */</comment>

            <expr_stmt pos:start="105:13" pos:end="105:53"><expr pos:start="105:13" pos:end="105:52"><call pos:start="105:13" pos:end="105:52"><name pos:start="105:13" pos:end="105:21">save_bits</name><argument_list pos:start="105:22" pos:end="105:52">(<argument pos:start="105:23" pos:end="105:23"><expr pos:start="105:23" pos:end="105:23"><name pos:start="105:23" pos:end="105:23">s</name></expr></argument>, <argument pos:start="105:26" pos:end="105:27"><expr pos:start="105:26" pos:end="105:27"><name pos:start="105:26" pos:end="105:27">gb</name></expr></argument>, <argument pos:start="105:30" pos:end="105:48"><expr pos:start="105:30" pos:end="105:48"><name pos:start="105:30" pos:end="105:48">num_bits_prev_frame</name></expr></argument>, <argument pos:start="105:51" pos:end="105:51"><expr pos:start="105:51" pos:end="105:51"><literal type="number" pos:start="105:51" pos:end="105:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" format="doxygen" pos:start="109:13" pos:end="109:63">/** decode the cross packet frame if it is valid */</comment>

            <if_stmt pos:start="111:13" pos:end="113:32"><if pos:start="111:13" pos:end="113:32">if <condition pos:start="111:16" pos:end="111:32">(<expr pos:start="111:17" pos:end="111:31"><operator pos:start="111:17" pos:end="111:17">!</operator><name pos:start="111:18" pos:end="111:31"><name pos:start="111:18" pos:end="111:18">s</name><operator pos:start="111:19" pos:end="111:20">-&gt;</operator><name pos:start="111:21" pos:end="111:31">packet_loss</name></name></expr>)</condition><block type="pseudo" pos:start="113:17" pos:end="113:32"><block_content pos:start="113:17" pos:end="113:32">

		<expr_stmt pos:start="113:17" pos:end="113:32"><expr pos:start="113:17" pos:end="113:31"><call pos:start="113:17" pos:end="113:31"><name pos:start="113:17" pos:end="113:28">decode_frame</name><argument_list pos:start="113:29" pos:end="113:31">(<argument pos:start="113:30" pos:end="113:30"><expr pos:start="113:30" pos:end="113:30"><name pos:start="113:30" pos:end="113:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="115:11" pos:end="121:9">else if <condition pos:start="115:19" pos:end="115:55">(<expr pos:start="115:20" pos:end="115:54"><name pos:start="115:20" pos:end="115:36"><name pos:start="115:20" pos:end="115:20">s</name><operator pos:start="115:21" pos:end="115:22">-&gt;</operator><name pos:start="115:23" pos:end="115:36">num_saved_bits</name></name> <operator pos:start="115:38" pos:end="115:38">-</operator> <name pos:start="115:40" pos:end="115:54"><name pos:start="115:40" pos:end="115:40">s</name><operator pos:start="115:41" pos:end="115:42">-&gt;</operator><name pos:start="115:43" pos:end="115:54">frame_offset</name></name></expr>)</condition> <block pos:start="115:57" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:57">

            <expr_stmt pos:start="117:13" pos:end="119:57"><expr pos:start="117:13" pos:end="119:56"><call pos:start="117:13" pos:end="119:56"><name pos:start="117:13" pos:end="117:19">dprintf</name><argument_list pos:start="117:20" pos:end="119:56">(<argument pos:start="117:21" pos:end="117:25"><expr pos:start="117:21" pos:end="117:25"><name pos:start="117:21" pos:end="117:25">avctx</name></expr></argument>, <argument pos:start="117:28" pos:end="117:64"><expr pos:start="117:28" pos:end="117:64"><literal type="string" pos:start="117:28" pos:end="117:64">"ignoring %x previously saved bits\n"</literal></expr></argument>,

                    <argument pos:start="119:21" pos:end="119:55"><expr pos:start="119:21" pos:end="119:55"><name pos:start="119:21" pos:end="119:37"><name pos:start="119:21" pos:end="119:21">s</name><operator pos:start="119:22" pos:end="119:23">-&gt;</operator><name pos:start="119:24" pos:end="119:37">num_saved_bits</name></name> <operator pos:start="119:39" pos:end="119:39">-</operator> <name pos:start="119:41" pos:end="119:55"><name pos:start="119:41" pos:end="119:41">s</name><operator pos:start="119:42" pos:end="119:43">-&gt;</operator><name pos:start="119:44" pos:end="119:55">frame_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="125:9" pos:end="137:9"><if pos:start="125:9" pos:end="137:9">if <condition pos:start="125:12" pos:end="125:27">(<expr pos:start="125:13" pos:end="125:26"><name pos:start="125:13" pos:end="125:26"><name pos:start="125:13" pos:end="125:13">s</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:26">packet_loss</name></name></expr>)</condition> <block pos:start="125:29" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:31">

            <comment type="block" format="doxygen" pos:start="127:13" pos:end="131:42">/** reset number of saved bits so that the decoder

                does not start to decode incomplete frames in the

                s-&gt;len_prefix == 0 case */</comment>

            <expr_stmt pos:start="133:13" pos:end="133:34"><expr pos:start="133:13" pos:end="133:33"><name pos:start="133:13" pos:end="133:29"><name pos:start="133:13" pos:end="133:13">s</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:29">num_saved_bits</name></name> <operator pos:start="133:31" pos:end="133:31">=</operator> <literal type="number" pos:start="133:33" pos:end="133:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:31"><expr pos:start="135:13" pos:end="135:30"><name pos:start="135:13" pos:end="135:26"><name pos:start="135:13" pos:end="135:13">s</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:26">packet_loss</name></name> <operator pos:start="135:28" pos:end="135:28">=</operator> <literal type="number" pos:start="135:30" pos:end="135:30">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



    </block_content>}</block></if> <else pos:start="141:7" pos:end="191:5">else <block pos:start="141:12" pos:end="191:5">{<block_content pos:start="143:9" pos:end="189:9">

        <decl_stmt pos:start="143:9" pos:end="143:23"><decl pos:start="143:9" pos:end="143:22"><type pos:start="143:9" pos:end="143:11"><name pos:start="143:9" pos:end="143:11">int</name></type> <name pos:start="143:13" pos:end="143:22">frame_size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="147:9" pos:end="147:68"><expr pos:start="147:9" pos:end="147:67"><name pos:start="147:9" pos:end="147:23"><name pos:start="147:9" pos:end="147:9">s</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:23">buf_bit_size</name></name> <operator pos:start="147:25" pos:end="147:25">=</operator> <operator pos:start="147:27" pos:end="147:27">(</operator><name pos:start="147:28" pos:end="147:38"><name pos:start="147:28" pos:end="147:32">avpkt</name><operator pos:start="147:33" pos:end="147:34">-&gt;</operator><name pos:start="147:35" pos:end="147:38">size</name></name> <operator pos:start="147:40" pos:end="147:40">-</operator> <name pos:start="147:42" pos:end="147:61"><name pos:start="147:42" pos:end="147:42">s</name><operator pos:start="147:43" pos:end="147:44">-&gt;</operator><name pos:start="147:45" pos:end="147:61">next_packet_start</name></name><operator pos:start="147:62" pos:end="147:62">)</operator> <operator pos:start="147:64" pos:end="147:65">&lt;&lt;</operator> <literal type="number" pos:start="147:67" pos:end="147:67">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:56"><expr pos:start="149:9" pos:end="149:55"><call pos:start="149:9" pos:end="149:55"><name pos:start="149:9" pos:end="149:21">init_get_bits</name><argument_list pos:start="149:22" pos:end="149:55">(<argument pos:start="149:23" pos:end="149:24"><expr pos:start="149:23" pos:end="149:24"><name pos:start="149:23" pos:end="149:24">gb</name></expr></argument>, <argument pos:start="149:27" pos:end="149:37"><expr pos:start="149:27" pos:end="149:37"><name pos:start="149:27" pos:end="149:37"><name pos:start="149:27" pos:end="149:31">avpkt</name><operator pos:start="149:32" pos:end="149:33">-&gt;</operator><name pos:start="149:34" pos:end="149:37">data</name></name></expr></argument>, <argument pos:start="149:40" pos:end="149:54"><expr pos:start="149:40" pos:end="149:54"><name pos:start="149:40" pos:end="149:54"><name pos:start="149:40" pos:end="149:40">s</name><operator pos:start="149:41" pos:end="149:42">-&gt;</operator><name pos:start="149:43" pos:end="149:54">buf_bit_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:40"><expr pos:start="151:9" pos:end="151:39"><call pos:start="151:9" pos:end="151:39"><name pos:start="151:9" pos:end="151:17">skip_bits</name><argument_list pos:start="151:18" pos:end="151:39">(<argument pos:start="151:19" pos:end="151:20"><expr pos:start="151:19" pos:end="151:20"><name pos:start="151:19" pos:end="151:20">gb</name></expr></argument>, <argument pos:start="151:23" pos:end="151:38"><expr pos:start="151:23" pos:end="151:38"><name pos:start="151:23" pos:end="151:38"><name pos:start="151:23" pos:end="151:23">s</name><operator pos:start="151:24" pos:end="151:25">-&gt;</operator><name pos:start="151:26" pos:end="151:38">packet_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="155:9" pos:end="189:9"><if pos:start="155:9" pos:end="165:9">if <condition pos:start="155:12" pos:end="159:48">(<expr pos:start="155:13" pos:end="159:47"><name pos:start="155:13" pos:end="155:25"><name pos:start="155:13" pos:end="155:13">s</name><operator pos:start="155:14" pos:end="155:15">-&gt;</operator><name pos:start="155:16" pos:end="155:25">len_prefix</name></name> <operator pos:start="155:27" pos:end="155:28">&amp;&amp;</operator> <call pos:start="155:30" pos:end="155:50"><name pos:start="155:30" pos:end="155:43">remaining_bits</name><argument_list pos:start="155:44" pos:end="155:50">(<argument pos:start="155:45" pos:end="155:45"><expr pos:start="155:45" pos:end="155:45"><name pos:start="155:45" pos:end="155:45">s</name></expr></argument>, <argument pos:start="155:48" pos:end="155:49"><expr pos:start="155:48" pos:end="155:49"><name pos:start="155:48" pos:end="155:49">gb</name></expr></argument>)</argument_list></call> <operator pos:start="155:52" pos:end="155:52">&gt;</operator> <name pos:start="155:54" pos:end="155:71"><name pos:start="155:54" pos:end="155:54">s</name><operator pos:start="155:55" pos:end="155:56">-&gt;</operator><name pos:start="155:57" pos:end="155:71">log2_frame_size</name></name> <operator pos:start="155:73" pos:end="155:74">&amp;&amp;</operator>

            <operator pos:start="157:13" pos:end="157:13">(</operator><name pos:start="157:14" pos:end="157:23">frame_size</name> <operator pos:start="157:25" pos:end="157:25">=</operator> <call pos:start="157:27" pos:end="157:59"><name pos:start="157:27" pos:end="157:35">show_bits</name><argument_list pos:start="157:36" pos:end="157:59">(<argument pos:start="157:37" pos:end="157:38"><expr pos:start="157:37" pos:end="157:38"><name pos:start="157:37" pos:end="157:38">gb</name></expr></argument>, <argument pos:start="157:41" pos:end="157:58"><expr pos:start="157:41" pos:end="157:58"><name pos:start="157:41" pos:end="157:58"><name pos:start="157:41" pos:end="157:41">s</name><operator pos:start="157:42" pos:end="157:43">-&gt;</operator><name pos:start="157:44" pos:end="157:58">log2_frame_size</name></name></expr></argument>)</argument_list></call><operator pos:start="157:60" pos:end="157:60">)</operator> <operator pos:start="157:62" pos:end="157:63">&amp;&amp;</operator>

            <name pos:start="159:13" pos:end="159:22">frame_size</name> <operator pos:start="159:24" pos:end="159:25">&lt;=</operator> <call pos:start="159:27" pos:end="159:47"><name pos:start="159:27" pos:end="159:40">remaining_bits</name><argument_list pos:start="159:41" pos:end="159:47">(<argument pos:start="159:42" pos:end="159:42"><expr pos:start="159:42" pos:end="159:42"><name pos:start="159:42" pos:end="159:42">s</name></expr></argument>, <argument pos:start="159:45" pos:end="159:46"><expr pos:start="159:45" pos:end="159:46"><name pos:start="159:45" pos:end="159:46">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="159:50" pos:end="165:9">{<block_content pos:start="161:13" pos:end="163:46">

            <expr_stmt pos:start="161:13" pos:end="161:44"><expr pos:start="161:13" pos:end="161:43"><call pos:start="161:13" pos:end="161:43"><name pos:start="161:13" pos:end="161:21">save_bits</name><argument_list pos:start="161:22" pos:end="161:43">(<argument pos:start="161:23" pos:end="161:23"><expr pos:start="161:23" pos:end="161:23"><name pos:start="161:23" pos:end="161:23">s</name></expr></argument>, <argument pos:start="161:26" pos:end="161:27"><expr pos:start="161:26" pos:end="161:27"><name pos:start="161:26" pos:end="161:27">gb</name></expr></argument>, <argument pos:start="161:30" pos:end="161:39"><expr pos:start="161:30" pos:end="161:39"><name pos:start="161:30" pos:end="161:39">frame_size</name></expr></argument>, <argument pos:start="161:42" pos:end="161:42"><expr pos:start="161:42" pos:end="161:42"><literal type="number" pos:start="161:42" pos:end="161:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:46"><expr pos:start="163:13" pos:end="163:45"><name pos:start="163:13" pos:end="163:26"><name pos:start="163:13" pos:end="163:13">s</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:26">packet_done</name></name> <operator pos:start="163:28" pos:end="163:28">=</operator> <operator pos:start="163:30" pos:end="163:30">!</operator><call pos:start="163:31" pos:end="163:45"><name pos:start="163:31" pos:end="163:42">decode_frame</name><argument_list pos:start="163:43" pos:end="163:45">(<argument pos:start="163:44" pos:end="163:44"><expr pos:start="163:44" pos:end="163:44"><name pos:start="163:44" pos:end="163:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="165:11" pos:end="185:9">else if <condition pos:start="165:19" pos:end="167:65">(<expr pos:start="165:20" pos:end="167:64"><operator pos:start="165:20" pos:end="165:20">!</operator><name pos:start="165:21" pos:end="165:33"><name pos:start="165:21" pos:end="165:21">s</name><operator pos:start="165:22" pos:end="165:23">-&gt;</operator><name pos:start="165:24" pos:end="165:33">len_prefix</name></name>

                   <operator pos:start="167:20" pos:end="167:21">&amp;&amp;</operator> <name pos:start="167:23" pos:end="167:39"><name pos:start="167:23" pos:end="167:23">s</name><operator pos:start="167:24" pos:end="167:25">-&gt;</operator><name pos:start="167:26" pos:end="167:39">num_saved_bits</name></name> <operator pos:start="167:41" pos:end="167:41">&gt;</operator> <call pos:start="167:43" pos:end="167:64"><name pos:start="167:43" pos:end="167:56">get_bits_count</name><argument_list pos:start="167:57" pos:end="167:64">(<argument pos:start="167:58" pos:end="167:63"><expr pos:start="167:58" pos:end="167:63"><operator pos:start="167:58" pos:end="167:58">&amp;</operator><name pos:start="167:59" pos:end="167:63"><name pos:start="167:59" pos:end="167:59">s</name><operator pos:start="167:60" pos:end="167:61">-&gt;</operator><name pos:start="167:62" pos:end="167:63">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="167:67" pos:end="185:9">{<block_content pos:start="183:13" pos:end="183:46">

            <comment type="block" format="doxygen" pos:start="169:13" pos:end="181:65">/** when the frames do not have a length prefix, we don't know

                the compressed length of the individual frames

                however, we know what part of a new packet belongs to the

                previous frame

                therefore we save the incoming packet first, then we append

                the "previous frame" data from the next packet so that

                we get a buffer that only contains full frames */</comment>

            <expr_stmt pos:start="183:13" pos:end="183:46"><expr pos:start="183:13" pos:end="183:45"><name pos:start="183:13" pos:end="183:26"><name pos:start="183:13" pos:end="183:13">s</name><operator pos:start="183:14" pos:end="183:15">-&gt;</operator><name pos:start="183:16" pos:end="183:26">packet_done</name></name> <operator pos:start="183:28" pos:end="183:28">=</operator> <operator pos:start="183:30" pos:end="183:30">!</operator><call pos:start="183:31" pos:end="183:45"><name pos:start="183:31" pos:end="183:42">decode_frame</name><argument_list pos:start="183:43" pos:end="183:45">(<argument pos:start="183:44" pos:end="183:44"><expr pos:start="183:44" pos:end="183:44"><name pos:start="183:44" pos:end="183:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="185:11" pos:end="189:9">else <block pos:start="185:16" pos:end="189:9">{<block_content pos:start="187:13" pos:end="187:31">

            <expr_stmt pos:start="187:13" pos:end="187:31"><expr pos:start="187:13" pos:end="187:30"><name pos:start="187:13" pos:end="187:26"><name pos:start="187:13" pos:end="187:13">s</name><operator pos:start="187:14" pos:end="187:15">-&gt;</operator><name pos:start="187:16" pos:end="187:26">packet_done</name></name> <operator pos:start="187:28" pos:end="187:28">=</operator> <literal type="number" pos:start="187:30" pos:end="187:30">1</literal></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="195:5" pos:end="205:5"><if pos:start="195:5" pos:end="205:5">if <condition pos:start="195:8" pos:end="197:34">(<expr pos:start="195:9" pos:end="197:33"><name pos:start="195:9" pos:end="195:22"><name pos:start="195:9" pos:end="195:9">s</name><operator pos:start="195:10" pos:end="195:11">-&gt;</operator><name pos:start="195:12" pos:end="195:22">packet_done</name></name> <operator pos:start="195:24" pos:end="195:25">&amp;&amp;</operator> <operator pos:start="195:27" pos:end="195:27">!</operator><name pos:start="195:28" pos:end="195:41"><name pos:start="195:28" pos:end="195:28">s</name><operator pos:start="195:29" pos:end="195:30">-&gt;</operator><name pos:start="195:31" pos:end="195:41">packet_loss</name></name> <operator pos:start="195:43" pos:end="195:44">&amp;&amp;</operator>

        <call pos:start="197:9" pos:end="197:29"><name pos:start="197:9" pos:end="197:22">remaining_bits</name><argument_list pos:start="197:23" pos:end="197:29">(<argument pos:start="197:24" pos:end="197:24"><expr pos:start="197:24" pos:end="197:24"><name pos:start="197:24" pos:end="197:24">s</name></expr></argument>, <argument pos:start="197:27" pos:end="197:28"><expr pos:start="197:27" pos:end="197:28"><name pos:start="197:27" pos:end="197:28">gb</name></expr></argument>)</argument_list></call> <operator pos:start="197:31" pos:end="197:31">&gt;</operator> <literal type="number" pos:start="197:33" pos:end="197:33">0</literal></expr>)</condition> <block pos:start="197:36" pos:end="205:5">{<block_content pos:start="203:9" pos:end="203:51">

        <comment type="block" format="doxygen" pos:start="199:9" pos:end="201:35">/** save the rest of the data so that it can be decoded

            with the next packet */</comment>

        <expr_stmt pos:start="203:9" pos:end="203:51"><expr pos:start="203:9" pos:end="203:50"><call pos:start="203:9" pos:end="203:50"><name pos:start="203:9" pos:end="203:17">save_bits</name><argument_list pos:start="203:18" pos:end="203:50">(<argument pos:start="203:19" pos:end="203:19"><expr pos:start="203:19" pos:end="203:19"><name pos:start="203:19" pos:end="203:19">s</name></expr></argument>, <argument pos:start="203:22" pos:end="203:23"><expr pos:start="203:22" pos:end="203:23"><name pos:start="203:22" pos:end="203:23">gb</name></expr></argument>, <argument pos:start="203:26" pos:end="203:46"><expr pos:start="203:26" pos:end="203:46"><call pos:start="203:26" pos:end="203:46"><name pos:start="203:26" pos:end="203:39">remaining_bits</name><argument_list pos:start="203:40" pos:end="203:46">(<argument pos:start="203:41" pos:end="203:41"><expr pos:start="203:41" pos:end="203:41"><name pos:start="203:41" pos:end="203:41">s</name></expr></argument>, <argument pos:start="203:44" pos:end="203:45"><expr pos:start="203:44" pos:end="203:45"><name pos:start="203:44" pos:end="203:45">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="203:49" pos:end="203:49"><expr pos:start="203:49" pos:end="203:49"><literal type="number" pos:start="203:49" pos:end="203:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="209:5" pos:end="209:19"><expr pos:start="209:5" pos:end="209:18"><operator pos:start="209:5" pos:end="209:5">*</operator><name pos:start="209:6" pos:end="209:14">data_size</name> <operator pos:start="209:16" pos:end="209:16">=</operator> <literal type="number" pos:start="209:18" pos:end="209:18">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="209:21" pos:end="209:61">// (int8_t *)s-&gt;samples - (int8_t *)data;</comment>

    <expr_stmt pos:start="211:5" pos:end="211:46"><expr pos:start="211:5" pos:end="211:45"><name pos:start="211:5" pos:end="211:20"><name pos:start="211:5" pos:end="211:5">s</name><operator pos:start="211:6" pos:end="211:7">-&gt;</operator><name pos:start="211:8" pos:end="211:20">packet_offset</name></name> <operator pos:start="211:22" pos:end="211:22">=</operator> <call pos:start="211:24" pos:end="211:41"><name pos:start="211:24" pos:end="211:37">get_bits_count</name><argument_list pos:start="211:38" pos:end="211:41">(<argument pos:start="211:39" pos:end="211:40"><expr pos:start="211:39" pos:end="211:40"><name pos:start="211:39" pos:end="211:40">gb</name></expr></argument>)</argument_list></call> <operator pos:start="211:43" pos:end="211:43">&amp;</operator> <literal type="number" pos:start="211:45" pos:end="211:45">7</literal></expr>;</expr_stmt>



    <return pos:start="215:5" pos:end="215:76">return <expr pos:start="215:12" pos:end="215:75"><ternary pos:start="215:12" pos:end="215:75"><condition pos:start="215:12" pos:end="215:29"><expr pos:start="215:12" pos:end="215:27"><operator pos:start="215:12" pos:end="215:12">(</operator><name pos:start="215:13" pos:end="215:26"><name pos:start="215:13" pos:end="215:13">s</name><operator pos:start="215:14" pos:end="215:15">-&gt;</operator><name pos:start="215:16" pos:end="215:26">packet_loss</name></name><operator pos:start="215:27" pos:end="215:27">)</operator></expr> ?</condition><then pos:start="215:31" pos:end="215:49"> <expr pos:start="215:31" pos:end="215:49"><name pos:start="215:31" pos:end="215:49">AVERROR_INVALIDDATA</name></expr> </then><else pos:start="215:51" pos:end="215:75">: <expr pos:start="215:53" pos:end="215:75"><call pos:start="215:53" pos:end="215:70"><name pos:start="215:53" pos:end="215:66">get_bits_count</name><argument_list pos:start="215:67" pos:end="215:70">(<argument pos:start="215:68" pos:end="215:69"><expr pos:start="215:68" pos:end="215:69"><name pos:start="215:68" pos:end="215:69">gb</name></expr></argument>)</argument_list></call> <operator pos:start="215:72" pos:end="215:73">&gt;&gt;</operator> <literal type="number" pos:start="215:75" pos:end="215:75">3</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
