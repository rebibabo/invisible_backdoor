<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6.c" pos:tabs="8"><function pos:start="1:1" pos:end="281:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">dds_decode</name><parameter_list pos:start="1:22" pos:end="3:54">(<parameter pos:start="1:23" pos:end="1:43"><decl pos:start="1:23" pos:end="1:43"><type pos:start="1:23" pos:end="1:43"><name pos:start="1:23" pos:end="1:36">AVCodecContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:43">avctx</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:55"><decl pos:start="1:46" pos:end="1:55"><type pos:start="1:46" pos:end="1:55"><name pos:start="1:46" pos:end="1:49">void</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">data</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:36"><decl pos:start="3:23" pos:end="3:36"><type pos:start="3:23" pos:end="3:36"><name pos:start="3:23" pos:end="3:25">int</name> <modifier pos:start="3:27" pos:end="3:27">*</modifier></type><name pos:start="3:28" pos:end="3:36">got_frame</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:53"><decl pos:start="3:39" pos:end="3:53"><type pos:start="3:39" pos:end="3:53"><name pos:start="3:39" pos:end="3:46">AVPacket</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:53">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="281:1">{<block_content pos:start="7:5" pos:end="279:23">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">DDSContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">ctx</name> <init pos:start="7:21" pos:end="7:38">= <expr pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:27">avctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">GetByteContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:23">gbc</name> <init pos:start="9:25" pos:end="9:35">= <expr pos:start="9:27" pos:end="9:35"><operator pos:start="9:27" pos:end="9:27">&amp;</operator><name pos:start="9:28" pos:end="9:35"><name pos:start="9:28" pos:end="9:30">ctx</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:35">gbc</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:18">frame</name> <init pos:start="11:20" pos:end="11:25">= <expr pos:start="11:22" pos:end="11:25"><name pos:start="11:22" pos:end="11:25">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:14">mipmap</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:37"><expr pos:start="19:5" pos:end="19:36"><call pos:start="19:5" pos:end="19:36"><name pos:start="19:5" pos:end="19:22">ff_texturedsp_init</name><argument_list pos:start="19:23" pos:end="19:36">(<argument pos:start="19:24" pos:end="19:35"><expr pos:start="19:24" pos:end="19:35"><operator pos:start="19:24" pos:end="19:24">&amp;</operator><name pos:start="19:25" pos:end="19:35"><name pos:start="19:25" pos:end="19:27">ctx</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:35">texdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:52"><expr pos:start="21:5" pos:end="21:51"><call pos:start="21:5" pos:end="21:51"><name pos:start="21:5" pos:end="21:20">bytestream2_init</name><argument_list pos:start="21:21" pos:end="21:51">(<argument pos:start="21:22" pos:end="21:24"><expr pos:start="21:22" pos:end="21:24"><name pos:start="21:22" pos:end="21:24">gbc</name></expr></argument>, <argument pos:start="21:27" pos:end="21:37"><expr pos:start="21:27" pos:end="21:37"><name pos:start="21:27" pos:end="21:37"><name pos:start="21:27" pos:end="21:31">avpkt</name><operator pos:start="21:32" pos:end="21:33">-&gt;</operator><name pos:start="21:34" pos:end="21:37">data</name></name></expr></argument>, <argument pos:start="21:40" pos:end="21:50"><expr pos:start="21:40" pos:end="21:50"><name pos:start="21:40" pos:end="21:50"><name pos:start="21:40" pos:end="21:44">avpkt</name><operator pos:start="21:45" pos:end="21:46">-&gt;</operator><name pos:start="21:47" pos:end="21:50">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:46">(<expr pos:start="25:9" pos:end="25:45"><call pos:start="25:9" pos:end="25:39"><name pos:start="25:9" pos:end="25:34">bytestream2_get_bytes_left</name><argument_list pos:start="25:35" pos:end="25:39">(<argument pos:start="25:36" pos:end="25:38"><expr pos:start="25:36" pos:end="25:38"><name pos:start="25:36" pos:end="25:38">gbc</name></expr></argument>)</argument_list></call> <operator pos:start="25:41" pos:end="25:41">&lt;</operator> <literal type="number" pos:start="25:43" pos:end="25:45">128</literal></expr>)</condition> <block pos:start="25:48" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:35">

        <expr_stmt pos:start="27:9" pos:end="29:48"><expr pos:start="27:9" pos:end="29:47"><call pos:start="27:9" pos:end="29:47"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="29:47">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:37" pos:end="27:64"><expr pos:start="27:37" pos:end="27:64"><literal type="string" pos:start="27:37" pos:end="27:64">"Frame is too small (%d).\n"</literal></expr></argument>,

               <argument pos:start="29:16" pos:end="29:46"><expr pos:start="29:16" pos:end="29:46"><call pos:start="29:16" pos:end="29:46"><name pos:start="29:16" pos:end="29:41">bytestream2_get_bytes_left</name><argument_list pos:start="29:42" pos:end="29:46">(<argument pos:start="29:43" pos:end="29:45"><expr pos:start="29:43" pos:end="29:45"><name pos:start="29:43" pos:end="29:45">gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:35">return <expr pos:start="31:16" pos:end="31:34"><name pos:start="31:16" pos:end="31:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="39:41">(<expr pos:start="37:9" pos:end="39:40"><call pos:start="37:9" pos:end="37:33"><name pos:start="37:9" pos:end="37:28">bytestream2_get_le32</name><argument_list pos:start="37:29" pos:end="37:33">(<argument pos:start="37:30" pos:end="37:32"><expr pos:start="37:30" pos:end="37:32"><name pos:start="37:30" pos:end="37:32">gbc</name></expr></argument>)</argument_list></call> <operator pos:start="37:35" pos:end="37:36">!=</operator> <call pos:start="37:38" pos:end="37:62"><name pos:start="37:38" pos:end="37:42">MKTAG</name><argument_list pos:start="37:43" pos:end="37:62">(<argument pos:start="37:44" pos:end="37:46"><expr pos:start="37:44" pos:end="37:46"><literal type="char" pos:start="37:44" pos:end="37:46">'D'</literal></expr></argument>, <argument pos:start="37:49" pos:end="37:51"><expr pos:start="37:49" pos:end="37:51"><literal type="char" pos:start="37:49" pos:end="37:51">'D'</literal></expr></argument>, <argument pos:start="37:54" pos:end="37:56"><expr pos:start="37:54" pos:end="37:56"><literal type="char" pos:start="37:54" pos:end="37:56">'S'</literal></expr></argument>, <argument pos:start="37:59" pos:end="37:61"><expr pos:start="37:59" pos:end="37:61"><literal type="char" pos:start="37:59" pos:end="37:61">' '</literal></expr></argument>)</argument_list></call> <operator pos:start="37:64" pos:end="37:65">||</operator>

        <call pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:28">bytestream2_get_le32</name><argument_list pos:start="39:29" pos:end="39:33">(<argument pos:start="39:30" pos:end="39:32"><expr pos:start="39:30" pos:end="39:32"><name pos:start="39:30" pos:end="39:32">gbc</name></expr></argument>)</argument_list></call> <operator pos:start="39:35" pos:end="39:36">!=</operator> <literal type="number" pos:start="39:38" pos:end="39:40">124</literal></expr>)</condition> <block pos:start="39:43" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:35"> <comment type="line" pos:start="39:45" pos:end="39:58">// header size</comment>

        <expr_stmt pos:start="41:9" pos:end="41:61"><expr pos:start="41:9" pos:end="41:60"><call pos:start="41:9" pos:end="41:60"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:60">(<argument pos:start="41:16" pos:end="41:20"><expr pos:start="41:16" pos:end="41:20"><name pos:start="41:16" pos:end="41:20">avctx</name></expr></argument>, <argument pos:start="41:23" pos:end="41:34"><expr pos:start="41:23" pos:end="41:34"><name pos:start="41:23" pos:end="41:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:37" pos:end="41:59"><expr pos:start="41:37" pos:end="41:59"><literal type="string" pos:start="41:37" pos:end="41:59">"Invalid DDS header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:35">return <expr pos:start="43:16" pos:end="43:34"><name pos:start="43:16" pos:end="43:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:29"><expr pos:start="49:5" pos:end="49:28"><call pos:start="49:5" pos:end="49:28"><name pos:start="49:5" pos:end="49:20">bytestream2_skip</name><argument_list pos:start="49:21" pos:end="49:28">(<argument pos:start="49:22" pos:end="49:24"><expr pos:start="49:22" pos:end="49:24"><name pos:start="49:22" pos:end="49:24">gbc</name></expr></argument>, <argument pos:start="49:27" pos:end="49:27"><expr pos:start="49:27" pos:end="49:27"><literal type="number" pos:start="49:27" pos:end="49:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="49:31" pos:end="49:38">// flags</comment>



    <expr_stmt pos:start="53:5" pos:end="53:46"><expr pos:start="53:5" pos:end="53:45"><name pos:start="53:5" pos:end="53:17"><name pos:start="53:5" pos:end="53:9">avctx</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:17">height</name></name> <operator pos:start="53:19" pos:end="53:19">=</operator> <call pos:start="53:21" pos:end="53:45"><name pos:start="53:21" pos:end="53:40">bytestream2_get_le32</name><argument_list pos:start="53:41" pos:end="53:45">(<argument pos:start="53:42" pos:end="53:44"><expr pos:start="53:42" pos:end="53:44"><name pos:start="53:42" pos:end="53:44">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:46"><expr pos:start="55:5" pos:end="55:45"><name pos:start="55:5" pos:end="55:16"><name pos:start="55:5" pos:end="55:9">avctx</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:16">width</name></name>  <operator pos:start="55:19" pos:end="55:19">=</operator> <call pos:start="55:21" pos:end="55:45"><name pos:start="55:21" pos:end="55:40">bytestream2_get_le32</name><argument_list pos:start="55:41" pos:end="55:45">(<argument pos:start="55:42" pos:end="55:44"><expr pos:start="55:42" pos:end="55:44"><name pos:start="55:42" pos:end="55:44">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:69"><expr pos:start="57:5" pos:end="57:68"><name pos:start="57:5" pos:end="57:7">ret</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="57:68"><name pos:start="57:11" pos:end="57:29">av_image_check_size</name><argument_list pos:start="57:30" pos:end="57:68">(<argument pos:start="57:31" pos:end="57:42"><expr pos:start="57:31" pos:end="57:42"><name pos:start="57:31" pos:end="57:42"><name pos:start="57:31" pos:end="57:35">avctx</name><operator pos:start="57:36" pos:end="57:37">-&gt;</operator><name pos:start="57:38" pos:end="57:42">width</name></name></expr></argument>, <argument pos:start="57:45" pos:end="57:57"><expr pos:start="57:45" pos:end="57:57"><name pos:start="57:45" pos:end="57:57"><name pos:start="57:45" pos:end="57:49">avctx</name><operator pos:start="57:50" pos:end="57:51">-&gt;</operator><name pos:start="57:52" pos:end="57:57">height</name></name></expr></argument>, <argument pos:start="57:60" pos:end="57:60"><expr pos:start="57:60" pos:end="57:60"><literal type="number" pos:start="57:60" pos:end="57:60">0</literal></expr></argument>, <argument pos:start="57:63" pos:end="57:67"><expr pos:start="57:63" pos:end="57:67"><name pos:start="57:63" pos:end="57:67">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:16">(<expr pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">&lt;</operator> <literal type="number" pos:start="59:15" pos:end="59:15">0</literal></expr>)</condition> <block pos:start="59:18" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:19">

        <expr_stmt pos:start="61:9" pos:end="63:44"><expr pos:start="61:9" pos:end="63:43"><call pos:start="61:9" pos:end="63:43"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="63:43">(<argument pos:start="61:16" pos:end="61:20"><expr pos:start="61:16" pos:end="61:20"><name pos:start="61:16" pos:end="61:20">avctx</name></expr></argument>, <argument pos:start="61:23" pos:end="61:34"><expr pos:start="61:23" pos:end="61:34"><name pos:start="61:23" pos:end="61:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:37" pos:end="61:65"><expr pos:start="61:37" pos:end="61:65"><literal type="string" pos:start="61:37" pos:end="61:65">"Invalid image size %dx%d.\n"</literal></expr></argument>,

               <argument pos:start="63:16" pos:end="63:27"><expr pos:start="63:16" pos:end="63:27"><name pos:start="63:16" pos:end="63:27"><name pos:start="63:16" pos:end="63:20">avctx</name><operator pos:start="63:21" pos:end="63:22">-&gt;</operator><name pos:start="63:23" pos:end="63:27">width</name></name></expr></argument>, <argument pos:start="63:30" pos:end="63:42"><expr pos:start="63:30" pos:end="63:42"><name pos:start="63:30" pos:end="63:42"><name pos:start="63:30" pos:end="63:34">avctx</name><operator pos:start="63:35" pos:end="63:36">-&gt;</operator><name pos:start="63:37" pos:end="63:42">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:19">return <expr pos:start="65:16" pos:end="65:18"><name pos:start="65:16" pos:end="65:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:67">/* Since codec is based on 4x4 blocks, size is aligned to 4. */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:66"><expr pos:start="73:5" pos:end="73:65"><name pos:start="73:5" pos:end="73:22"><name pos:start="73:5" pos:end="73:9">avctx</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:22">coded_width</name></name>  <operator pos:start="73:25" pos:end="73:25">=</operator> <call pos:start="73:27" pos:end="73:65"><name pos:start="73:27" pos:end="73:33">FFALIGN</name><argument_list pos:start="73:34" pos:end="73:65">(<argument pos:start="73:35" pos:end="73:46"><expr pos:start="73:35" pos:end="73:46"><name pos:start="73:35" pos:end="73:46"><name pos:start="73:35" pos:end="73:39">avctx</name><operator pos:start="73:40" pos:end="73:41">-&gt;</operator><name pos:start="73:42" pos:end="73:46">width</name></name></expr></argument>,  <argument pos:start="73:50" pos:end="73:64"><expr pos:start="73:50" pos:end="73:64"><name pos:start="73:50" pos:end="73:64">TEXTURE_BLOCK_W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:66"><expr pos:start="75:5" pos:end="75:65"><name pos:start="75:5" pos:end="75:23"><name pos:start="75:5" pos:end="75:9">avctx</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:23">coded_height</name></name> <operator pos:start="75:25" pos:end="75:25">=</operator> <call pos:start="75:27" pos:end="75:65"><name pos:start="75:27" pos:end="75:33">FFALIGN</name><argument_list pos:start="75:34" pos:end="75:65">(<argument pos:start="75:35" pos:end="75:47"><expr pos:start="75:35" pos:end="75:47"><name pos:start="75:35" pos:end="75:47"><name pos:start="75:35" pos:end="75:39">avctx</name><operator pos:start="75:40" pos:end="75:41">-&gt;</operator><name pos:start="75:42" pos:end="75:47">height</name></name></expr></argument>, <argument pos:start="75:50" pos:end="75:64"><expr pos:start="75:50" pos:end="75:64"><name pos:start="75:50" pos:end="75:64">TEXTURE_BLOCK_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:29"><expr pos:start="79:5" pos:end="79:28"><call pos:start="79:5" pos:end="79:28"><name pos:start="79:5" pos:end="79:20">bytestream2_skip</name><argument_list pos:start="79:21" pos:end="79:28">(<argument pos:start="79:22" pos:end="79:24"><expr pos:start="79:22" pos:end="79:24"><name pos:start="79:22" pos:end="79:24">gbc</name></expr></argument>, <argument pos:start="79:27" pos:end="79:27"><expr pos:start="79:27" pos:end="79:27"><literal type="number" pos:start="79:27" pos:end="79:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="79:31" pos:end="79:38">// pitch</comment>

    <expr_stmt pos:start="81:5" pos:end="81:29"><expr pos:start="81:5" pos:end="81:28"><call pos:start="81:5" pos:end="81:28"><name pos:start="81:5" pos:end="81:20">bytestream2_skip</name><argument_list pos:start="81:21" pos:end="81:28">(<argument pos:start="81:22" pos:end="81:24"><expr pos:start="81:22" pos:end="81:24"><name pos:start="81:22" pos:end="81:24">gbc</name></expr></argument>, <argument pos:start="81:27" pos:end="81:27"><expr pos:start="81:27" pos:end="81:27"><literal type="number" pos:start="81:27" pos:end="81:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="81:31" pos:end="81:38">// depth</comment>

    <expr_stmt pos:start="83:5" pos:end="83:39"><expr pos:start="83:5" pos:end="83:38"><name pos:start="83:5" pos:end="83:10">mipmap</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <call pos:start="83:14" pos:end="83:38"><name pos:start="83:14" pos:end="83:33">bytestream2_get_le32</name><argument_list pos:start="83:34" pos:end="83:38">(<argument pos:start="83:35" pos:end="83:37"><expr pos:start="83:35" pos:end="83:37"><name pos:start="83:35" pos:end="83:37">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="87:79"><if pos:start="85:5" pos:end="87:79">if <condition pos:start="85:8" pos:end="85:20">(<expr pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:14">mipmap</name> <operator pos:start="85:16" pos:end="85:17">!=</operator> <literal type="number" pos:start="85:19" pos:end="85:19">0</literal></expr>)</condition><block type="pseudo" pos:start="87:9" pos:end="87:79"><block_content pos:start="87:9" pos:end="87:79">

        <expr_stmt pos:start="87:9" pos:end="87:79"><expr pos:start="87:9" pos:end="87:78"><call pos:start="87:9" pos:end="87:78"><name pos:start="87:9" pos:end="87:14">av_log</name><argument_list pos:start="87:15" pos:end="87:78">(<argument pos:start="87:16" pos:end="87:20"><expr pos:start="87:16" pos:end="87:20"><name pos:start="87:16" pos:end="87:20">avctx</name></expr></argument>, <argument pos:start="87:23" pos:end="87:36"><expr pos:start="87:23" pos:end="87:36"><name pos:start="87:23" pos:end="87:36">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="87:39" pos:end="87:69"><expr pos:start="87:39" pos:end="87:69"><literal type="string" pos:start="87:39" pos:end="87:69">"Found %d mipmaps (ignored).\n"</literal></expr></argument>, <argument pos:start="87:72" pos:end="87:77"><expr pos:start="87:72" pos:end="87:77"><name pos:start="87:72" pos:end="87:77">mipmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="91:5" pos:end="93:37">/* Extract pixel format information, considering additional elements

     * in reserved1 and reserved2. */</comment>

    <expr_stmt pos:start="95:5" pos:end="95:36"><expr pos:start="95:5" pos:end="95:35"><name pos:start="95:5" pos:end="95:7">ret</name> <operator pos:start="95:9" pos:end="95:9">=</operator> <call pos:start="95:11" pos:end="95:35"><name pos:start="95:11" pos:end="95:28">parse_pixel_format</name><argument_list pos:start="95:29" pos:end="95:35">(<argument pos:start="95:30" pos:end="95:34"><expr pos:start="95:30" pos:end="95:34"><name pos:start="95:30" pos:end="95:34">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="99:19"><if pos:start="97:5" pos:end="99:19">if <condition pos:start="97:8" pos:end="97:16">(<expr pos:start="97:9" pos:end="97:15"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">&lt;</operator> <literal type="number" pos:start="97:15" pos:end="97:15">0</literal></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="99:19"><block_content pos:start="99:9" pos:end="99:19">

        <return pos:start="99:9" pos:end="99:19">return <expr pos:start="99:16" pos:end="99:18"><name pos:start="99:16" pos:end="99:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:41"><expr pos:start="103:5" pos:end="103:40"><name pos:start="103:5" pos:end="103:7">ret</name> <operator pos:start="103:9" pos:end="103:9">=</operator> <call pos:start="103:11" pos:end="103:40"><name pos:start="103:11" pos:end="103:23">ff_get_buffer</name><argument_list pos:start="103:24" pos:end="103:40">(<argument pos:start="103:25" pos:end="103:29"><expr pos:start="103:25" pos:end="103:29"><name pos:start="103:25" pos:end="103:29">avctx</name></expr></argument>, <argument pos:start="103:32" pos:end="103:36"><expr pos:start="103:32" pos:end="103:36"><name pos:start="103:32" pos:end="103:36">frame</name></expr></argument>, <argument pos:start="103:39" pos:end="103:39"><expr pos:start="103:39" pos:end="103:39"><literal type="number" pos:start="103:39" pos:end="103:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="107:19"><if pos:start="105:5" pos:end="107:19">if <condition pos:start="105:8" pos:end="105:16">(<expr pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:11">ret</name> <operator pos:start="105:13" pos:end="105:13">&lt;</operator> <literal type="number" pos:start="105:15" pos:end="105:15">0</literal></expr>)</condition><block type="pseudo" pos:start="107:9" pos:end="107:19"><block_content pos:start="107:9" pos:end="107:19">

        <return pos:start="107:9" pos:end="107:19">return <expr pos:start="107:16" pos:end="107:18"><name pos:start="107:16" pos:end="107:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="257:5"><if pos:start="111:5" pos:end="143:5">if <condition pos:start="111:8" pos:end="111:24">(<expr pos:start="111:9" pos:end="111:23"><name pos:start="111:9" pos:end="111:23"><name pos:start="111:9" pos:end="111:11">ctx</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:23">compressed</name></name></expr>)</condition> <block pos:start="111:26" pos:end="143:5">{<block_content pos:start="113:9" pos:end="141:89">

        <decl_stmt pos:start="113:9" pos:end="115:75"><decl pos:start="113:9" pos:end="115:74"><type pos:start="113:9" pos:end="113:11"><name pos:start="113:9" pos:end="113:11">int</name></type> <name pos:start="113:13" pos:end="113:16">size</name> <init pos:start="113:18" pos:end="115:74">= <expr pos:start="113:20" pos:end="115:74"><operator pos:start="113:20" pos:end="113:20">(</operator><name pos:start="113:21" pos:end="113:39"><name pos:start="113:21" pos:end="113:25">avctx</name><operator pos:start="113:26" pos:end="113:27">-&gt;</operator><name pos:start="113:28" pos:end="113:39">coded_height</name></name> <operator pos:start="113:41" pos:end="113:41">/</operator> <name pos:start="113:43" pos:end="113:57">TEXTURE_BLOCK_H</name><operator pos:start="113:58" pos:end="113:58">)</operator> <operator pos:start="113:60" pos:end="113:60">*</operator>

                   <operator pos:start="115:20" pos:end="115:20">(</operator><name pos:start="115:21" pos:end="115:38"><name pos:start="115:21" pos:end="115:25">avctx</name><operator pos:start="115:26" pos:end="115:27">-&gt;</operator><name pos:start="115:28" pos:end="115:38">coded_width</name></name> <operator pos:start="115:40" pos:end="115:40">/</operator> <name pos:start="115:42" pos:end="115:56">TEXTURE_BLOCK_W</name><operator pos:start="115:57" pos:end="115:57">)</operator> <operator pos:start="115:59" pos:end="115:59">*</operator> <name pos:start="115:61" pos:end="115:74"><name pos:start="115:61" pos:end="115:63">ctx</name><operator pos:start="115:64" pos:end="115:65">-&gt;</operator><name pos:start="115:66" pos:end="115:74">tex_ratio</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="117:9" pos:end="119:74"><expr pos:start="117:9" pos:end="119:73"><name pos:start="117:9" pos:end="117:24"><name pos:start="117:9" pos:end="117:11">ctx</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:24">slice_count</name></name> <operator pos:start="117:26" pos:end="117:26">=</operator> <call pos:start="117:28" pos:end="119:73"><name pos:start="117:28" pos:end="117:34">av_clip</name><argument_list pos:start="117:35" pos:end="119:73">(<argument pos:start="117:36" pos:end="117:54"><expr pos:start="117:36" pos:end="117:54"><name pos:start="117:36" pos:end="117:54"><name pos:start="117:36" pos:end="117:40">avctx</name><operator pos:start="117:41" pos:end="117:42">-&gt;</operator><name pos:start="117:43" pos:end="117:54">thread_count</name></name></expr></argument>, <argument pos:start="117:57" pos:end="117:57"><expr pos:start="117:57" pos:end="117:57"><literal type="number" pos:start="117:57" pos:end="117:57">1</literal></expr></argument>,

                                   <argument pos:start="119:36" pos:end="119:72"><expr pos:start="119:36" pos:end="119:72"><name pos:start="119:36" pos:end="119:54"><name pos:start="119:36" pos:end="119:40">avctx</name><operator pos:start="119:41" pos:end="119:42">-&gt;</operator><name pos:start="119:43" pos:end="119:54">coded_height</name></name> <operator pos:start="119:56" pos:end="119:56">/</operator> <name pos:start="119:58" pos:end="119:72">TEXTURE_BLOCK_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="123:9" pos:end="133:9"><if pos:start="123:9" pos:end="133:9">if <condition pos:start="123:12" pos:end="123:51">(<expr pos:start="123:13" pos:end="123:50"><call pos:start="123:13" pos:end="123:43"><name pos:start="123:13" pos:end="123:38">bytestream2_get_bytes_left</name><argument_list pos:start="123:39" pos:end="123:43">(<argument pos:start="123:40" pos:end="123:42"><expr pos:start="123:40" pos:end="123:42"><name pos:start="123:40" pos:end="123:42">gbc</name></expr></argument>)</argument_list></call> <operator pos:start="123:45" pos:end="123:45">&lt;</operator> <name pos:start="123:47" pos:end="123:50">size</name></expr>)</condition> <block pos:start="123:53" pos:end="133:9">{<block_content pos:start="125:13" pos:end="131:39">

            <expr_stmt pos:start="125:13" pos:end="129:58"><expr pos:start="125:13" pos:end="129:57"><call pos:start="125:13" pos:end="129:57"><name pos:start="125:13" pos:end="125:18">av_log</name><argument_list pos:start="125:19" pos:end="129:57">(<argument pos:start="125:20" pos:end="125:24"><expr pos:start="125:20" pos:end="125:24"><name pos:start="125:20" pos:end="125:24">avctx</name></expr></argument>, <argument pos:start="125:27" pos:end="125:38"><expr pos:start="125:27" pos:end="125:38"><name pos:start="125:27" pos:end="125:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="127:20" pos:end="127:64"><expr pos:start="127:20" pos:end="127:64"><literal type="string" pos:start="127:20" pos:end="127:64">"Compressed Buffer is too small (%d &lt; %d).\n"</literal></expr></argument>,

                   <argument pos:start="129:20" pos:end="129:50"><expr pos:start="129:20" pos:end="129:50"><call pos:start="129:20" pos:end="129:50"><name pos:start="129:20" pos:end="129:45">bytestream2_get_bytes_left</name><argument_list pos:start="129:46" pos:end="129:50">(<argument pos:start="129:47" pos:end="129:49"><expr pos:start="129:47" pos:end="129:49"><name pos:start="129:47" pos:end="129:49">gbc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="129:53" pos:end="129:56"><expr pos:start="129:53" pos:end="129:56"><name pos:start="129:53" pos:end="129:56">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="131:13" pos:end="131:39">return <expr pos:start="131:20" pos:end="131:38"><name pos:start="131:20" pos:end="131:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="137:9" pos:end="137:79">/* Use the decompress function on the texture, one block per thread. */</comment>

        <expr_stmt pos:start="139:9" pos:end="139:36"><expr pos:start="139:9" pos:end="139:35"><name pos:start="139:9" pos:end="139:21"><name pos:start="139:9" pos:end="139:11">ctx</name><operator pos:start="139:12" pos:end="139:13">-&gt;</operator><name pos:start="139:14" pos:end="139:21">tex_data</name></name> <operator pos:start="139:23" pos:end="139:23">=</operator> <name pos:start="139:25" pos:end="139:35"><name pos:start="139:25" pos:end="139:27">gbc</name><operator pos:start="139:28" pos:end="139:29">-&gt;</operator><name pos:start="139:30" pos:end="139:35">buffer</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:89"><expr pos:start="141:9" pos:end="141:88"><call pos:start="141:9" pos:end="141:88"><name pos:start="141:9" pos:end="141:23"><name pos:start="141:9" pos:end="141:13">avctx</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:23">execute2</name></name><argument_list pos:start="141:24" pos:end="141:88">(<argument pos:start="141:25" pos:end="141:29"><expr pos:start="141:25" pos:end="141:29"><name pos:start="141:25" pos:end="141:29">avctx</name></expr></argument>, <argument pos:start="141:32" pos:end="141:56"><expr pos:start="141:32" pos:end="141:56"><name pos:start="141:32" pos:end="141:56">decompress_texture_thread</name></expr></argument>, <argument pos:start="141:59" pos:end="141:63"><expr pos:start="141:59" pos:end="141:63"><name pos:start="141:59" pos:end="141:63">frame</name></expr></argument>, <argument pos:start="141:66" pos:end="141:69"><expr pos:start="141:66" pos:end="141:69"><name pos:start="141:66" pos:end="141:69">NULL</name></expr></argument>, <argument pos:start="141:72" pos:end="141:87"><expr pos:start="141:72" pos:end="141:87"><name pos:start="141:72" pos:end="141:87"><name pos:start="141:72" pos:end="141:74">ctx</name><operator pos:start="141:75" pos:end="141:76">-&gt;</operator><name pos:start="141:77" pos:end="141:87">slice_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="143:7" pos:end="203:5">else if <condition pos:start="143:15" pos:end="143:84">(<expr pos:start="143:16" pos:end="143:83"><operator pos:start="143:16" pos:end="143:16">!</operator><name pos:start="143:17" pos:end="143:29"><name pos:start="143:17" pos:end="143:19">ctx</name><operator pos:start="143:20" pos:end="143:21">-&gt;</operator><name pos:start="143:22" pos:end="143:29">paletted</name></name> <operator pos:start="143:31" pos:end="143:32">&amp;&amp;</operator> <name pos:start="143:34" pos:end="143:41"><name pos:start="143:34" pos:end="143:36">ctx</name><operator pos:start="143:37" pos:end="143:38">-&gt;</operator><name pos:start="143:39" pos:end="143:41">bpp</name></name> <operator pos:start="143:43" pos:end="143:44">==</operator> <literal type="number" pos:start="143:46" pos:end="143:46">4</literal> <operator pos:start="143:48" pos:end="143:49">&amp;&amp;</operator> <name pos:start="143:51" pos:end="143:64"><name pos:start="143:51" pos:end="143:55">avctx</name><operator pos:start="143:56" pos:end="143:57">-&gt;</operator><name pos:start="143:58" pos:end="143:64">pix_fmt</name></name> <operator pos:start="143:66" pos:end="143:67">==</operator> <name pos:start="143:69" pos:end="143:83">AV_PIX_FMT_PAL8</name></expr>)</condition> <block pos:start="143:86" pos:end="203:5">{<block_content pos:start="145:9" pos:end="201:9">

        <decl_stmt pos:start="145:9" pos:end="145:38"><decl pos:start="145:9" pos:end="145:37"><type pos:start="145:9" pos:end="145:17"><name pos:start="145:9" pos:end="145:15">uint8_t</name> <modifier pos:start="145:17" pos:end="145:17">*</modifier></type><name pos:start="145:18" pos:end="145:20">dst</name> <init pos:start="145:22" pos:end="145:37">= <expr pos:start="145:24" pos:end="145:37"><name pos:start="145:24" pos:end="145:37"><name pos:start="145:24" pos:end="145:28">frame</name><operator pos:start="145:29" pos:end="145:30">-&gt;</operator><name pos:start="145:31" pos:end="145:34">data</name><index pos:start="145:35" pos:end="145:37">[<expr pos:start="145:36" pos:end="145:36"><literal type="number" pos:start="145:36" pos:end="145:36">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="147:9" pos:end="147:20"><decl pos:start="147:9" pos:end="147:13"><type pos:start="147:9" pos:end="147:11"><name pos:start="147:9" pos:end="147:11">int</name></type> <name pos:start="147:13" pos:end="147:13">x</name></decl>, <decl pos:start="147:16" pos:end="147:16"><type ref="prev" pos:start="147:9" pos:end="147:11"/><name pos:start="147:16" pos:end="147:16">y</name></decl>, <decl pos:start="147:19" pos:end="147:19"><type ref="prev" pos:start="147:9" pos:end="147:11"/><name pos:start="147:19" pos:end="147:19">i</name></decl>;</decl_stmt>



        <comment type="block" pos:start="151:9" pos:end="151:68">/* Use the first 64 bytes as palette, then copy the rest. */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:60"><expr pos:start="153:9" pos:end="153:59"><call pos:start="153:9" pos:end="153:59"><name pos:start="153:9" pos:end="153:30">bytestream2_get_buffer</name><argument_list pos:start="153:31" pos:end="153:59">(<argument pos:start="153:32" pos:end="153:34"><expr pos:start="153:32" pos:end="153:34"><name pos:start="153:32" pos:end="153:34">gbc</name></expr></argument>, <argument pos:start="153:37" pos:end="153:50"><expr pos:start="153:37" pos:end="153:50"><name pos:start="153:37" pos:end="153:50"><name pos:start="153:37" pos:end="153:41">frame</name><operator pos:start="153:42" pos:end="153:43">-&gt;</operator><name pos:start="153:44" pos:end="153:47">data</name><index pos:start="153:48" pos:end="153:50">[<expr pos:start="153:49" pos:end="153:49"><literal type="number" pos:start="153:49" pos:end="153:49">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="153:53" pos:end="153:58"><expr pos:start="153:53" pos:end="153:58"><literal type="number" pos:start="153:53" pos:end="153:54">16</literal> <operator pos:start="153:56" pos:end="153:56">*</operator> <literal type="number" pos:start="153:58" pos:end="153:58">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="155:9" pos:end="169:9">for <control pos:start="155:13" pos:end="155:32">(<init pos:start="155:14" pos:end="155:19"><expr pos:start="155:14" pos:end="155:18"><name pos:start="155:14" pos:end="155:14">i</name> <operator pos:start="155:16" pos:end="155:16">=</operator> <literal type="number" pos:start="155:18" pos:end="155:18">0</literal></expr>;</init> <condition pos:start="155:21" pos:end="155:27"><expr pos:start="155:21" pos:end="155:26"><name pos:start="155:21" pos:end="155:21">i</name> <operator pos:start="155:23" pos:end="155:23">&lt;</operator> <literal type="number" pos:start="155:25" pos:end="155:26">16</literal></expr>;</condition> <incr pos:start="155:29" pos:end="155:31"><expr pos:start="155:29" pos:end="155:31"><name pos:start="155:29" pos:end="155:29">i</name><operator pos:start="155:30" pos:end="155:31">++</operator></expr></incr>)</control> <block pos:start="155:34" pos:end="169:9">{<block_content pos:start="157:13" pos:end="167:14">

            <expr_stmt pos:start="157:13" pos:end="167:14"><expr pos:start="157:13" pos:end="167:13"><call pos:start="157:13" pos:end="167:13"><name pos:start="157:13" pos:end="157:19">AV_WN32</name><argument_list pos:start="157:20" pos:end="167:13">(<argument pos:start="157:21" pos:end="157:40"><expr pos:start="157:21" pos:end="157:40"><name pos:start="157:21" pos:end="157:34"><name pos:start="157:21" pos:end="157:25">frame</name><operator pos:start="157:26" pos:end="157:27">-&gt;</operator><name pos:start="157:28" pos:end="157:31">data</name><index pos:start="157:32" pos:end="157:34">[<expr pos:start="157:33" pos:end="157:33"><literal type="number" pos:start="157:33" pos:end="157:33">1</literal></expr>]</index></name> <operator pos:start="157:36" pos:end="157:36">+</operator> <name pos:start="157:38" pos:end="157:38">i</name><operator pos:start="157:39" pos:end="157:39">*</operator><literal type="number" pos:start="157:40" pos:end="157:40">4</literal></expr></argument>,

                    <argument pos:start="159:21" pos:end="165:47"><expr pos:start="159:21" pos:end="165:47"><operator pos:start="159:21" pos:end="159:21">(</operator><name pos:start="159:22" pos:end="159:42"><name pos:start="159:22" pos:end="159:26">frame</name><operator pos:start="159:27" pos:end="159:28">-&gt;</operator><name pos:start="159:29" pos:end="159:32">data</name><index pos:start="159:33" pos:end="159:35">[<expr pos:start="159:34" pos:end="159:34"><literal type="number" pos:start="159:34" pos:end="159:34">1</literal></expr>]</index><index pos:start="159:36" pos:end="159:42">[<expr pos:start="159:37" pos:end="159:41"><literal type="number" pos:start="159:37" pos:end="159:38">2</literal><operator pos:start="159:38" pos:end="159:38">+</operator><name pos:start="159:39" pos:end="159:39">i</name><operator pos:start="159:40" pos:end="159:40">*</operator><literal type="number" pos:start="159:41" pos:end="159:41">4</literal></expr>]</index></name><operator pos:start="159:43" pos:end="159:44">&lt;&lt;</operator><literal type="number" pos:start="159:45" pos:end="159:45">0</literal><operator pos:start="159:46" pos:end="159:46">)</operator><operator pos:start="159:47" pos:end="159:47">+</operator>

                    <operator pos:start="161:21" pos:end="161:21">(</operator><name pos:start="161:22" pos:end="161:42"><name pos:start="161:22" pos:end="161:26">frame</name><operator pos:start="161:27" pos:end="161:28">-&gt;</operator><name pos:start="161:29" pos:end="161:32">data</name><index pos:start="161:33" pos:end="161:35">[<expr pos:start="161:34" pos:end="161:34"><literal type="number" pos:start="161:34" pos:end="161:34">1</literal></expr>]</index><index pos:start="161:36" pos:end="161:42">[<expr pos:start="161:37" pos:end="161:41"><literal type="number" pos:start="161:37" pos:end="161:38">1</literal><operator pos:start="161:38" pos:end="161:38">+</operator><name pos:start="161:39" pos:end="161:39">i</name><operator pos:start="161:40" pos:end="161:40">*</operator><literal type="number" pos:start="161:41" pos:end="161:41">4</literal></expr>]</index></name><operator pos:start="161:43" pos:end="161:44">&lt;&lt;</operator><literal type="number" pos:start="161:45" pos:end="161:45">8</literal><operator pos:start="161:46" pos:end="161:46">)</operator><operator pos:start="161:47" pos:end="161:47">+</operator>

                    <operator pos:start="163:21" pos:end="163:21">(</operator><name pos:start="163:22" pos:end="163:42"><name pos:start="163:22" pos:end="163:26">frame</name><operator pos:start="163:27" pos:end="163:28">-&gt;</operator><name pos:start="163:29" pos:end="163:32">data</name><index pos:start="163:33" pos:end="163:35">[<expr pos:start="163:34" pos:end="163:34"><literal type="number" pos:start="163:34" pos:end="163:34">1</literal></expr>]</index><index pos:start="163:36" pos:end="163:42">[<expr pos:start="163:37" pos:end="163:41"><literal type="number" pos:start="163:37" pos:end="163:38">0</literal><operator pos:start="163:38" pos:end="163:38">+</operator><name pos:start="163:39" pos:end="163:39">i</name><operator pos:start="163:40" pos:end="163:40">*</operator><literal type="number" pos:start="163:41" pos:end="163:41">4</literal></expr>]</index></name><operator pos:start="163:43" pos:end="163:44">&lt;&lt;</operator><literal type="number" pos:start="163:45" pos:end="163:46">16</literal><operator pos:start="163:47" pos:end="163:47">)</operator><operator pos:start="163:48" pos:end="163:48">+</operator>

                    <operator pos:start="165:21" pos:end="165:21">(</operator><name pos:start="165:22" pos:end="165:42"><name pos:start="165:22" pos:end="165:26">frame</name><operator pos:start="165:27" pos:end="165:28">-&gt;</operator><name pos:start="165:29" pos:end="165:32">data</name><index pos:start="165:33" pos:end="165:35">[<expr pos:start="165:34" pos:end="165:34"><literal type="number" pos:start="165:34" pos:end="165:34">1</literal></expr>]</index><index pos:start="165:36" pos:end="165:42">[<expr pos:start="165:37" pos:end="165:41"><literal type="number" pos:start="165:37" pos:end="165:38">3</literal><operator pos:start="165:38" pos:end="165:38">+</operator><name pos:start="165:39" pos:end="165:39">i</name><operator pos:start="165:40" pos:end="165:40">*</operator><literal type="number" pos:start="165:41" pos:end="165:41">4</literal></expr>]</index></name><operator pos:start="165:43" pos:end="165:44">&lt;&lt;</operator><literal type="number" pos:start="165:45" pos:end="165:46">24</literal><operator pos:start="165:47" pos:end="165:47">)</operator></expr></argument>

            )</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="171:9" pos:end="171:39"><expr pos:start="171:9" pos:end="171:38"><name pos:start="171:9" pos:end="171:34"><name pos:start="171:9" pos:end="171:13">frame</name><operator pos:start="171:14" pos:end="171:15">-&gt;</operator><name pos:start="171:16" pos:end="171:34">palette_has_changed</name></name> <operator pos:start="171:36" pos:end="171:36">=</operator> <literal type="number" pos:start="171:38" pos:end="171:38">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="175:9" pos:end="183:9"><if pos:start="175:9" pos:end="183:9">if <condition pos:start="175:12" pos:end="175:79">(<expr pos:start="175:13" pos:end="175:78"><call pos:start="175:13" pos:end="175:43"><name pos:start="175:13" pos:end="175:38">bytestream2_get_bytes_left</name><argument_list pos:start="175:39" pos:end="175:43">(<argument pos:start="175:40" pos:end="175:42"><expr pos:start="175:40" pos:end="175:42"><name pos:start="175:40" pos:end="175:42">gbc</name></expr></argument>)</argument_list></call> <operator pos:start="175:45" pos:end="175:45">&lt;</operator> <name pos:start="175:47" pos:end="175:59"><name pos:start="175:47" pos:end="175:51">frame</name><operator pos:start="175:52" pos:end="175:53">-&gt;</operator><name pos:start="175:54" pos:end="175:59">height</name></name> <operator pos:start="175:61" pos:end="175:61">*</operator> <name pos:start="175:63" pos:end="175:74"><name pos:start="175:63" pos:end="175:67">frame</name><operator pos:start="175:68" pos:end="175:69">-&gt;</operator><name pos:start="175:70" pos:end="175:74">width</name></name> <operator pos:start="175:76" pos:end="175:76">/</operator> <literal type="number" pos:start="175:78" pos:end="175:78">2</literal></expr>)</condition> <block pos:start="175:81" pos:end="183:9">{<block_content pos:start="177:13" pos:end="181:39">

            <expr_stmt pos:start="177:13" pos:end="179:86"><expr pos:start="177:13" pos:end="179:85"><call pos:start="177:13" pos:end="179:85"><name pos:start="177:13" pos:end="177:18">av_log</name><argument_list pos:start="177:19" pos:end="179:85">(<argument pos:start="177:20" pos:end="177:24"><expr pos:start="177:20" pos:end="177:24"><name pos:start="177:20" pos:end="177:24">avctx</name></expr></argument>, <argument pos:start="177:27" pos:end="177:38"><expr pos:start="177:27" pos:end="177:38"><name pos:start="177:27" pos:end="177:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="177:41" pos:end="177:74"><expr pos:start="177:41" pos:end="177:74"><literal type="string" pos:start="177:41" pos:end="177:74">"Buffer is too small (%d &lt; %d).\n"</literal></expr></argument>,

                   <argument pos:start="179:20" pos:end="179:50"><expr pos:start="179:20" pos:end="179:50"><call pos:start="179:20" pos:end="179:50"><name pos:start="179:20" pos:end="179:45">bytestream2_get_bytes_left</name><argument_list pos:start="179:46" pos:end="179:50">(<argument pos:start="179:47" pos:end="179:49"><expr pos:start="179:47" pos:end="179:49"><name pos:start="179:47" pos:end="179:49">gbc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="179:53" pos:end="179:84"><expr pos:start="179:53" pos:end="179:84"><name pos:start="179:53" pos:end="179:65"><name pos:start="179:53" pos:end="179:57">frame</name><operator pos:start="179:58" pos:end="179:59">-&gt;</operator><name pos:start="179:60" pos:end="179:65">height</name></name> <operator pos:start="179:67" pos:end="179:67">*</operator> <name pos:start="179:69" pos:end="179:80"><name pos:start="179:69" pos:end="179:73">frame</name><operator pos:start="179:74" pos:end="179:75">-&gt;</operator><name pos:start="179:76" pos:end="179:80">width</name></name> <operator pos:start="179:82" pos:end="179:82">/</operator> <literal type="number" pos:start="179:84" pos:end="179:84">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="181:13" pos:end="181:39">return <expr pos:start="181:20" pos:end="181:38"><name pos:start="181:20" pos:end="181:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <for pos:start="187:9" pos:end="201:9">for <control pos:start="187:13" pos:end="187:43">(<init pos:start="187:14" pos:end="187:19"><expr pos:start="187:14" pos:end="187:18"><name pos:start="187:14" pos:end="187:14">y</name> <operator pos:start="187:16" pos:end="187:16">=</operator> <literal type="number" pos:start="187:18" pos:end="187:18">0</literal></expr>;</init> <condition pos:start="187:21" pos:end="187:38"><expr pos:start="187:21" pos:end="187:37"><name pos:start="187:21" pos:end="187:21">y</name> <operator pos:start="187:23" pos:end="187:23">&lt;</operator> <name pos:start="187:25" pos:end="187:37"><name pos:start="187:25" pos:end="187:29">frame</name><operator pos:start="187:30" pos:end="187:31">-&gt;</operator><name pos:start="187:32" pos:end="187:37">height</name></name></expr>;</condition> <incr pos:start="187:40" pos:end="187:42"><expr pos:start="187:40" pos:end="187:42"><name pos:start="187:40" pos:end="187:40">y</name><operator pos:start="187:41" pos:end="187:42">++</operator></expr></incr>)</control> <block pos:start="187:45" pos:end="201:9">{<block_content pos:start="189:13" pos:end="199:38">

            <for pos:start="189:13" pos:end="197:13">for <control pos:start="189:17" pos:end="189:49">(<init pos:start="189:18" pos:end="189:23"><expr pos:start="189:18" pos:end="189:22"><name pos:start="189:18" pos:end="189:18">x</name> <operator pos:start="189:20" pos:end="189:20">=</operator> <literal type="number" pos:start="189:22" pos:end="189:22">0</literal></expr>;</init> <condition pos:start="189:25" pos:end="189:41"><expr pos:start="189:25" pos:end="189:40"><name pos:start="189:25" pos:end="189:25">x</name> <operator pos:start="189:27" pos:end="189:27">&lt;</operator> <name pos:start="189:29" pos:end="189:40"><name pos:start="189:29" pos:end="189:33">frame</name><operator pos:start="189:34" pos:end="189:35">-&gt;</operator><name pos:start="189:36" pos:end="189:40">width</name></name></expr>;</condition> <incr pos:start="189:43" pos:end="189:48"><expr pos:start="189:43" pos:end="189:48"><name pos:start="189:43" pos:end="189:43">x</name> <operator pos:start="189:45" pos:end="189:46">+=</operator> <literal type="number" pos:start="189:48" pos:end="189:48">2</literal></expr></incr>)</control> <block pos:start="189:51" pos:end="197:13">{<block_content pos:start="191:17" pos:end="195:38">

                <decl_stmt pos:start="191:17" pos:end="191:56"><decl pos:start="191:17" pos:end="191:55"><type pos:start="191:17" pos:end="191:23"><name pos:start="191:17" pos:end="191:23">uint8_t</name></type> <name pos:start="191:25" pos:end="191:27">val</name> <init pos:start="191:29" pos:end="191:55">= <expr pos:start="191:31" pos:end="191:55"><call pos:start="191:31" pos:end="191:55"><name pos:start="191:31" pos:end="191:50">bytestream2_get_byte</name><argument_list pos:start="191:51" pos:end="191:55">(<argument pos:start="191:52" pos:end="191:54"><expr pos:start="191:52" pos:end="191:54"><name pos:start="191:52" pos:end="191:54">gbc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:39"><expr pos:start="193:17" pos:end="193:38"><name pos:start="193:17" pos:end="193:26"><name pos:start="193:17" pos:end="193:19">dst</name><index pos:start="193:20" pos:end="193:26">[<expr pos:start="193:21" pos:end="193:21"><name pos:start="193:21" pos:end="193:21">x</name></expr>    ]</index></name> <operator pos:start="193:28" pos:end="193:28">=</operator> <name pos:start="193:30" pos:end="193:32">val</name> <operator pos:start="193:34" pos:end="193:34">&amp;</operator> <literal type="number" pos:start="193:36" pos:end="193:38">0xF</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="195:17" pos:end="195:38"><expr pos:start="195:17" pos:end="195:37"><name pos:start="195:17" pos:end="195:26"><name pos:start="195:17" pos:end="195:19">dst</name><index pos:start="195:20" pos:end="195:26">[<expr pos:start="195:21" pos:end="195:25"><name pos:start="195:21" pos:end="195:21">x</name> <operator pos:start="195:23" pos:end="195:23">+</operator> <literal type="number" pos:start="195:25" pos:end="195:25">1</literal></expr>]</index></name> <operator pos:start="195:28" pos:end="195:28">=</operator> <name pos:start="195:30" pos:end="195:32">val</name> <operator pos:start="195:34" pos:end="195:35">&gt;&gt;</operator> <literal type="number" pos:start="195:37" pos:end="195:37">4</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="199:13" pos:end="199:38"><expr pos:start="199:13" pos:end="199:37"><name pos:start="199:13" pos:end="199:15">dst</name> <operator pos:start="199:17" pos:end="199:18">+=</operator> <name pos:start="199:20" pos:end="199:37"><name pos:start="199:20" pos:end="199:24">frame</name><operator pos:start="199:25" pos:end="199:26">-&gt;</operator><name pos:start="199:27" pos:end="199:34">linesize</name><index pos:start="199:35" pos:end="199:37">[<expr pos:start="199:36" pos:end="199:36"><literal type="number" pos:start="199:36" pos:end="199:36">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="203:7" pos:end="257:5">else <block pos:start="203:12" pos:end="257:5">{<block_content pos:start="205:9" pos:end="255:53">

        <decl_stmt pos:start="205:9" pos:end="205:78"><decl pos:start="205:9" pos:end="205:77"><type pos:start="205:9" pos:end="205:11"><name pos:start="205:9" pos:end="205:11">int</name></type> <name pos:start="205:13" pos:end="205:20">linesize</name> <init pos:start="205:22" pos:end="205:77">= <expr pos:start="205:24" pos:end="205:77"><call pos:start="205:24" pos:end="205:77"><name pos:start="205:24" pos:end="205:44">av_image_get_linesize</name><argument_list pos:start="205:45" pos:end="205:77">(<argument pos:start="205:46" pos:end="205:59"><expr pos:start="205:46" pos:end="205:59"><name pos:start="205:46" pos:end="205:59"><name pos:start="205:46" pos:end="205:50">avctx</name><operator pos:start="205:51" pos:end="205:52">-&gt;</operator><name pos:start="205:53" pos:end="205:59">pix_fmt</name></name></expr></argument>, <argument pos:start="205:62" pos:end="205:73"><expr pos:start="205:62" pos:end="205:73"><name pos:start="205:62" pos:end="205:73"><name pos:start="205:62" pos:end="205:66">frame</name><operator pos:start="205:67" pos:end="205:68">-&gt;</operator><name pos:start="205:69" pos:end="205:73">width</name></name></expr></argument>, <argument pos:start="205:76" pos:end="205:76"><expr pos:start="205:76" pos:end="205:76"><literal type="number" pos:start="205:76" pos:end="205:76">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="209:9" pos:end="235:9"><if pos:start="209:9" pos:end="235:9">if <condition pos:start="209:12" pos:end="209:26">(<expr pos:start="209:13" pos:end="209:25"><name pos:start="209:13" pos:end="209:25"><name pos:start="209:13" pos:end="209:15">ctx</name><operator pos:start="209:16" pos:end="209:17">-&gt;</operator><name pos:start="209:18" pos:end="209:25">paletted</name></name></expr>)</condition> <block pos:start="209:28" pos:end="235:9">{<block_content pos:start="211:13" pos:end="233:43">

            <decl_stmt pos:start="211:13" pos:end="211:18"><decl pos:start="211:13" pos:end="211:17"><type pos:start="211:13" pos:end="211:15"><name pos:start="211:13" pos:end="211:15">int</name></type> <name pos:start="211:17" pos:end="211:17">i</name></decl>;</decl_stmt>

            <comment type="block" pos:start="213:13" pos:end="213:74">/* Use the first 1024 bytes as palette, then copy the rest. */</comment>

            <expr_stmt pos:start="215:13" pos:end="215:65"><expr pos:start="215:13" pos:end="215:64"><call pos:start="215:13" pos:end="215:64"><name pos:start="215:13" pos:end="215:34">bytestream2_get_buffer</name><argument_list pos:start="215:35" pos:end="215:64">(<argument pos:start="215:36" pos:end="215:38"><expr pos:start="215:36" pos:end="215:38"><name pos:start="215:36" pos:end="215:38">gbc</name></expr></argument>, <argument pos:start="215:41" pos:end="215:54"><expr pos:start="215:41" pos:end="215:54"><name pos:start="215:41" pos:end="215:54"><name pos:start="215:41" pos:end="215:45">frame</name><operator pos:start="215:46" pos:end="215:47">-&gt;</operator><name pos:start="215:48" pos:end="215:51">data</name><index pos:start="215:52" pos:end="215:54">[<expr pos:start="215:53" pos:end="215:53"><literal type="number" pos:start="215:53" pos:end="215:53">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="215:57" pos:end="215:63"><expr pos:start="215:57" pos:end="215:63"><literal type="number" pos:start="215:57" pos:end="215:59">256</literal> <operator pos:start="215:61" pos:end="215:61">*</operator> <literal type="number" pos:start="215:63" pos:end="215:63">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="217:13" pos:end="229:18">for <control pos:start="217:17" pos:end="217:37">(<init pos:start="217:18" pos:end="217:23"><expr pos:start="217:18" pos:end="217:22"><name pos:start="217:18" pos:end="217:18">i</name> <operator pos:start="217:20" pos:end="217:20">=</operator> <literal type="number" pos:start="217:22" pos:end="217:22">0</literal></expr>;</init> <condition pos:start="217:25" pos:end="217:32"><expr pos:start="217:25" pos:end="217:31"><name pos:start="217:25" pos:end="217:25">i</name> <operator pos:start="217:27" pos:end="217:27">&lt;</operator> <literal type="number" pos:start="217:29" pos:end="217:31">256</literal></expr>;</condition> <incr pos:start="217:34" pos:end="217:36"><expr pos:start="217:34" pos:end="217:36"><name pos:start="217:34" pos:end="217:34">i</name><operator pos:start="217:35" pos:end="217:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="219:17" pos:end="229:18"><block_content pos:start="219:17" pos:end="229:18">

                <expr_stmt pos:start="219:17" pos:end="229:18"><expr pos:start="219:17" pos:end="229:17"><call pos:start="219:17" pos:end="229:17"><name pos:start="219:17" pos:end="219:23">AV_WN32</name><argument_list pos:start="219:24" pos:end="229:17">(<argument pos:start="219:25" pos:end="219:44"><expr pos:start="219:25" pos:end="219:44"><name pos:start="219:25" pos:end="219:38"><name pos:start="219:25" pos:end="219:29">frame</name><operator pos:start="219:30" pos:end="219:31">-&gt;</operator><name pos:start="219:32" pos:end="219:35">data</name><index pos:start="219:36" pos:end="219:38">[<expr pos:start="219:37" pos:end="219:37"><literal type="number" pos:start="219:37" pos:end="219:37">1</literal></expr>]</index></name> <operator pos:start="219:40" pos:end="219:40">+</operator> <name pos:start="219:42" pos:end="219:42">i</name><operator pos:start="219:43" pos:end="219:43">*</operator><literal type="number" pos:start="219:44" pos:end="219:44">4</literal></expr></argument>,

                        <argument pos:start="221:25" pos:end="227:51"><expr pos:start="221:25" pos:end="227:51"><operator pos:start="221:25" pos:end="221:25">(</operator><name pos:start="221:26" pos:end="221:46"><name pos:start="221:26" pos:end="221:30">frame</name><operator pos:start="221:31" pos:end="221:32">-&gt;</operator><name pos:start="221:33" pos:end="221:36">data</name><index pos:start="221:37" pos:end="221:39">[<expr pos:start="221:38" pos:end="221:38"><literal type="number" pos:start="221:38" pos:end="221:38">1</literal></expr>]</index><index pos:start="221:40" pos:end="221:46">[<expr pos:start="221:41" pos:end="221:45"><literal type="number" pos:start="221:41" pos:end="221:42">2</literal><operator pos:start="221:42" pos:end="221:42">+</operator><name pos:start="221:43" pos:end="221:43">i</name><operator pos:start="221:44" pos:end="221:44">*</operator><literal type="number" pos:start="221:45" pos:end="221:45">4</literal></expr>]</index></name><operator pos:start="221:47" pos:end="221:48">&lt;&lt;</operator><literal type="number" pos:start="221:49" pos:end="221:49">0</literal><operator pos:start="221:50" pos:end="221:50">)</operator><operator pos:start="221:51" pos:end="221:51">+</operator>

                        <operator pos:start="223:25" pos:end="223:25">(</operator><name pos:start="223:26" pos:end="223:46"><name pos:start="223:26" pos:end="223:30">frame</name><operator pos:start="223:31" pos:end="223:32">-&gt;</operator><name pos:start="223:33" pos:end="223:36">data</name><index pos:start="223:37" pos:end="223:39">[<expr pos:start="223:38" pos:end="223:38"><literal type="number" pos:start="223:38" pos:end="223:38">1</literal></expr>]</index><index pos:start="223:40" pos:end="223:46">[<expr pos:start="223:41" pos:end="223:45"><literal type="number" pos:start="223:41" pos:end="223:42">1</literal><operator pos:start="223:42" pos:end="223:42">+</operator><name pos:start="223:43" pos:end="223:43">i</name><operator pos:start="223:44" pos:end="223:44">*</operator><literal type="number" pos:start="223:45" pos:end="223:45">4</literal></expr>]</index></name><operator pos:start="223:47" pos:end="223:48">&lt;&lt;</operator><literal type="number" pos:start="223:49" pos:end="223:49">8</literal><operator pos:start="223:50" pos:end="223:50">)</operator><operator pos:start="223:51" pos:end="223:51">+</operator>

                        <operator pos:start="225:25" pos:end="225:25">(</operator><name pos:start="225:26" pos:end="225:46"><name pos:start="225:26" pos:end="225:30">frame</name><operator pos:start="225:31" pos:end="225:32">-&gt;</operator><name pos:start="225:33" pos:end="225:36">data</name><index pos:start="225:37" pos:end="225:39">[<expr pos:start="225:38" pos:end="225:38"><literal type="number" pos:start="225:38" pos:end="225:38">1</literal></expr>]</index><index pos:start="225:40" pos:end="225:46">[<expr pos:start="225:41" pos:end="225:45"><literal type="number" pos:start="225:41" pos:end="225:42">0</literal><operator pos:start="225:42" pos:end="225:42">+</operator><name pos:start="225:43" pos:end="225:43">i</name><operator pos:start="225:44" pos:end="225:44">*</operator><literal type="number" pos:start="225:45" pos:end="225:45">4</literal></expr>]</index></name><operator pos:start="225:47" pos:end="225:48">&lt;&lt;</operator><literal type="number" pos:start="225:49" pos:end="225:50">16</literal><operator pos:start="225:51" pos:end="225:51">)</operator><operator pos:start="225:52" pos:end="225:52">+</operator>

                        <operator pos:start="227:25" pos:end="227:25">(</operator><name pos:start="227:26" pos:end="227:46"><name pos:start="227:26" pos:end="227:30">frame</name><operator pos:start="227:31" pos:end="227:32">-&gt;</operator><name pos:start="227:33" pos:end="227:36">data</name><index pos:start="227:37" pos:end="227:39">[<expr pos:start="227:38" pos:end="227:38"><literal type="number" pos:start="227:38" pos:end="227:38">1</literal></expr>]</index><index pos:start="227:40" pos:end="227:46">[<expr pos:start="227:41" pos:end="227:45"><literal type="number" pos:start="227:41" pos:end="227:42">3</literal><operator pos:start="227:42" pos:end="227:42">+</operator><name pos:start="227:43" pos:end="227:43">i</name><operator pos:start="227:44" pos:end="227:44">*</operator><literal type="number" pos:start="227:45" pos:end="227:45">4</literal></expr>]</index></name><operator pos:start="227:47" pos:end="227:48">&lt;&lt;</operator><literal type="number" pos:start="227:49" pos:end="227:50">24</literal><operator pos:start="227:51" pos:end="227:51">)</operator></expr></argument>

                )</argument_list></call></expr>;</expr_stmt></block_content></block></for>



            <expr_stmt pos:start="233:13" pos:end="233:43"><expr pos:start="233:13" pos:end="233:42"><name pos:start="233:13" pos:end="233:38"><name pos:start="233:13" pos:end="233:17">frame</name><operator pos:start="233:18" pos:end="233:19">-&gt;</operator><name pos:start="233:20" pos:end="233:38">palette_has_changed</name></name> <operator pos:start="233:40" pos:end="233:40">=</operator> <literal type="number" pos:start="233:42" pos:end="233:42">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="239:9" pos:end="247:9"><if pos:start="239:9" pos:end="247:9">if <condition pos:start="239:12" pos:end="239:71">(<expr pos:start="239:13" pos:end="239:70"><call pos:start="239:13" pos:end="239:43"><name pos:start="239:13" pos:end="239:38">bytestream2_get_bytes_left</name><argument_list pos:start="239:39" pos:end="239:43">(<argument pos:start="239:40" pos:end="239:42"><expr pos:start="239:40" pos:end="239:42"><name pos:start="239:40" pos:end="239:42">gbc</name></expr></argument>)</argument_list></call> <operator pos:start="239:45" pos:end="239:45">&lt;</operator> <name pos:start="239:47" pos:end="239:59"><name pos:start="239:47" pos:end="239:51">frame</name><operator pos:start="239:52" pos:end="239:53">-&gt;</operator><name pos:start="239:54" pos:end="239:59">height</name></name> <operator pos:start="239:61" pos:end="239:61">*</operator> <name pos:start="239:63" pos:end="239:70">linesize</name></expr>)</condition> <block pos:start="239:73" pos:end="247:9">{<block_content pos:start="241:13" pos:end="245:39">

            <expr_stmt pos:start="241:13" pos:end="243:78"><expr pos:start="241:13" pos:end="243:77"><call pos:start="241:13" pos:end="243:77"><name pos:start="241:13" pos:end="241:18">av_log</name><argument_list pos:start="241:19" pos:end="243:77">(<argument pos:start="241:20" pos:end="241:24"><expr pos:start="241:20" pos:end="241:24"><name pos:start="241:20" pos:end="241:24">avctx</name></expr></argument>, <argument pos:start="241:27" pos:end="241:38"><expr pos:start="241:27" pos:end="241:38"><name pos:start="241:27" pos:end="241:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="241:41" pos:end="241:74"><expr pos:start="241:41" pos:end="241:74"><literal type="string" pos:start="241:41" pos:end="241:74">"Buffer is too small (%d &lt; %d).\n"</literal></expr></argument>,

                   <argument pos:start="243:20" pos:end="243:50"><expr pos:start="243:20" pos:end="243:50"><call pos:start="243:20" pos:end="243:50"><name pos:start="243:20" pos:end="243:45">bytestream2_get_bytes_left</name><argument_list pos:start="243:46" pos:end="243:50">(<argument pos:start="243:47" pos:end="243:49"><expr pos:start="243:47" pos:end="243:49"><name pos:start="243:47" pos:end="243:49">gbc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="243:53" pos:end="243:76"><expr pos:start="243:53" pos:end="243:76"><name pos:start="243:53" pos:end="243:65"><name pos:start="243:53" pos:end="243:57">frame</name><operator pos:start="243:58" pos:end="243:59">-&gt;</operator><name pos:start="243:60" pos:end="243:65">height</name></name> <operator pos:start="243:67" pos:end="243:67">*</operator> <name pos:start="243:69" pos:end="243:76">linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="245:13" pos:end="245:39">return <expr pos:start="245:20" pos:end="245:38"><name pos:start="245:20" pos:end="245:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="251:9" pos:end="255:53"><expr pos:start="251:9" pos:end="255:52"><call pos:start="251:9" pos:end="255:52"><name pos:start="251:9" pos:end="251:27">av_image_copy_plane</name><argument_list pos:start="251:28" pos:end="255:52">(<argument pos:start="251:29" pos:end="251:42"><expr pos:start="251:29" pos:end="251:42"><name pos:start="251:29" pos:end="251:42"><name pos:start="251:29" pos:end="251:33">frame</name><operator pos:start="251:34" pos:end="251:35">-&gt;</operator><name pos:start="251:36" pos:end="251:39">data</name><index pos:start="251:40" pos:end="251:42">[<expr pos:start="251:41" pos:end="251:41"><literal type="number" pos:start="251:41" pos:end="251:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="251:45" pos:end="251:62"><expr pos:start="251:45" pos:end="251:62"><name pos:start="251:45" pos:end="251:62"><name pos:start="251:45" pos:end="251:49">frame</name><operator pos:start="251:50" pos:end="251:51">-&gt;</operator><name pos:start="251:52" pos:end="251:59">linesize</name><index pos:start="251:60" pos:end="251:62">[<expr pos:start="251:61" pos:end="251:61"><literal type="number" pos:start="251:61" pos:end="251:61">0</literal></expr>]</index></name></expr></argument>,

                            <argument pos:start="253:29" pos:end="253:39"><expr pos:start="253:29" pos:end="253:39"><name pos:start="253:29" pos:end="253:39"><name pos:start="253:29" pos:end="253:31">gbc</name><operator pos:start="253:32" pos:end="253:33">-&gt;</operator><name pos:start="253:34" pos:end="253:39">buffer</name></name></expr></argument>, <argument pos:start="253:42" pos:end="253:49"><expr pos:start="253:42" pos:end="253:49"><name pos:start="253:42" pos:end="253:49">linesize</name></expr></argument>,

                            <argument pos:start="255:29" pos:end="255:36"><expr pos:start="255:29" pos:end="255:36"><name pos:start="255:29" pos:end="255:36">linesize</name></expr></argument>, <argument pos:start="255:39" pos:end="255:51"><expr pos:start="255:39" pos:end="255:51"><name pos:start="255:39" pos:end="255:51"><name pos:start="255:39" pos:end="255:43">frame</name><operator pos:start="255:44" pos:end="255:45">-&gt;</operator><name pos:start="255:46" pos:end="255:51">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="261:5" pos:end="261:49">/* Run any post processing here if needed. */</comment>

    <if_stmt pos:start="263:5" pos:end="265:35"><if pos:start="263:5" pos:end="265:35">if <condition pos:start="263:8" pos:end="263:34">(<expr pos:start="263:9" pos:end="263:33"><name pos:start="263:9" pos:end="263:21"><name pos:start="263:9" pos:end="263:11">ctx</name><operator pos:start="263:12" pos:end="263:13">-&gt;</operator><name pos:start="263:14" pos:end="263:21">postproc</name></name> <operator pos:start="263:23" pos:end="263:24">!=</operator> <name pos:start="263:26" pos:end="263:33">DDS_NONE</name></expr>)</condition><block type="pseudo" pos:start="265:9" pos:end="265:35"><block_content pos:start="265:9" pos:end="265:35">

        <expr_stmt pos:start="265:9" pos:end="265:35"><expr pos:start="265:9" pos:end="265:34"><call pos:start="265:9" pos:end="265:34"><name pos:start="265:9" pos:end="265:20">run_postproc</name><argument_list pos:start="265:21" pos:end="265:34">(<argument pos:start="265:22" pos:end="265:26"><expr pos:start="265:22" pos:end="265:26"><name pos:start="265:22" pos:end="265:26">avctx</name></expr></argument>, <argument pos:start="265:29" pos:end="265:33"><expr pos:start="265:29" pos:end="265:33"><name pos:start="265:29" pos:end="265:33">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="269:5" pos:end="269:38">/* Frame is ready to be output. */</comment>

    <expr_stmt pos:start="271:5" pos:end="271:41"><expr pos:start="271:5" pos:end="271:40"><name pos:start="271:5" pos:end="271:20"><name pos:start="271:5" pos:end="271:9">frame</name><operator pos:start="271:10" pos:end="271:11">-&gt;</operator><name pos:start="271:12" pos:end="271:20">pict_type</name></name> <operator pos:start="271:22" pos:end="271:22">=</operator> <name pos:start="271:24" pos:end="271:40">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:25"><expr pos:start="273:5" pos:end="273:24"><name pos:start="273:5" pos:end="273:20"><name pos:start="273:5" pos:end="273:9">frame</name><operator pos:start="273:10" pos:end="273:11">-&gt;</operator><name pos:start="273:12" pos:end="273:20">key_frame</name></name> <operator pos:start="273:22" pos:end="273:22">=</operator> <literal type="number" pos:start="273:24" pos:end="273:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:19"><expr pos:start="275:5" pos:end="275:18"><operator pos:start="275:5" pos:end="275:5">*</operator><name pos:start="275:6" pos:end="275:14">got_frame</name> <operator pos:start="275:16" pos:end="275:16">=</operator> <literal type="number" pos:start="275:18" pos:end="275:18">1</literal></expr>;</expr_stmt>



    <return pos:start="279:5" pos:end="279:23">return <expr pos:start="279:12" pos:end="279:22"><name pos:start="279:12" pos:end="279:22"><name pos:start="279:12" pos:end="279:16">avpkt</name><operator pos:start="279:17" pos:end="279:18">-&gt;</operator><name pos:start="279:19" pos:end="279:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
