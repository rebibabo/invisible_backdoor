<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/441.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">handle_pending_signal</name><parameter_list pos:start="1:34" pos:end="3:62">(<parameter pos:start="1:35" pos:end="1:55"><decl pos:start="1:35" pos:end="1:55"><type pos:start="1:35" pos:end="1:55"><name pos:start="1:35" pos:end="1:46">CPUArchState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:55">cpu_env</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:64"><decl pos:start="1:58" pos:end="1:64"><type pos:start="1:58" pos:end="1:64"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:64">sig</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:61"><decl pos:start="3:35" pos:end="3:61"><type pos:start="3:35" pos:end="3:61"><name pos:start="3:35" pos:end="3:58"><name pos:start="3:35" pos:end="3:40">struct</name> <name pos:start="3:42" pos:end="3:58">emulated_sigtable</name></name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:61">k</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="169:1">{<block_content pos:start="7:5" pos:end="167:5">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">cpu</name> <init pos:start="7:19" pos:end="7:40">= <expr pos:start="7:21" pos:end="7:40"><call pos:start="7:21" pos:end="7:40"><name pos:start="7:21" pos:end="7:31">ENV_GET_CPU</name><argument_list pos:start="7:32" pos:end="7:40">(<argument pos:start="7:33" pos:end="7:39"><expr pos:start="7:33" pos:end="7:39"><name pos:start="7:33" pos:end="7:39">cpu_env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">abi_ulong</name></type> <name pos:start="9:15" pos:end="9:21">handler</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">sigset_t</name></type> <name pos:start="11:14" pos:end="11:16">set</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:19">target_sigset_t</name></type> <name pos:start="13:21" pos:end="13:34">target_old_set</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:29"><name pos:start="15:5" pos:end="15:27"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:27">target_sigaction</name></name> <modifier pos:start="15:29" pos:end="15:29">*</modifier></type><name pos:start="15:30" pos:end="15:31">sa</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:13">TaskState</name> <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:17">ts</name> <init pos:start="17:19" pos:end="17:31">= <expr pos:start="17:21" pos:end="17:31"><name pos:start="17:21" pos:end="17:31"><name pos:start="17:21" pos:end="17:23">cpu</name><operator pos:start="17:24" pos:end="17:25">-&gt;</operator><name pos:start="17:26" pos:end="17:31">opaque</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:43"><expr pos:start="21:5" pos:end="21:42"><call pos:start="21:5" pos:end="21:42"><name pos:start="21:5" pos:end="21:28">trace_user_handle_signal</name><argument_list pos:start="21:29" pos:end="21:42">(<argument pos:start="21:30" pos:end="21:36"><expr pos:start="21:30" pos:end="21:36"><name pos:start="21:30" pos:end="21:36">cpu_env</name></expr></argument>, <argument pos:start="21:39" pos:end="21:41"><expr pos:start="21:39" pos:end="21:41"><name pos:start="21:39" pos:end="21:41">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="23:5" pos:end="23:24">/* dequeue signal */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:19"><expr pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:5">k</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:14">pending</name></name> <operator pos:start="25:16" pos:end="25:16">=</operator> <literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:34"><expr pos:start="29:5" pos:end="29:33"><name pos:start="29:5" pos:end="29:7">sig</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:33"><name pos:start="29:11" pos:end="29:23">gdb_handlesig</name><argument_list pos:start="29:24" pos:end="29:33">(<argument pos:start="29:25" pos:end="29:27"><expr pos:start="29:25" pos:end="29:27"><name pos:start="29:25" pos:end="29:27">cpu</name></expr></argument>, <argument pos:start="29:30" pos:end="29:32"><expr pos:start="29:30" pos:end="29:32"><name pos:start="29:30" pos:end="29:32">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="43:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:13">(<expr pos:start="31:9" pos:end="31:12"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:12">sig</name></expr>)</condition> <block pos:start="31:15" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:33">

        <expr_stmt pos:start="33:9" pos:end="33:18"><expr pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:10">sa</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <name pos:start="33:14" pos:end="33:17">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:33"><expr pos:start="35:9" pos:end="35:32"><name pos:start="35:9" pos:end="35:15">handler</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <name pos:start="35:19" pos:end="35:32">TARGET_SIG_IGN</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="43:5">else <block pos:start="37:12" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:34">

        <expr_stmt pos:start="39:9" pos:end="39:36"><expr pos:start="39:9" pos:end="39:35"><name pos:start="39:9" pos:end="39:10">sa</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <operator pos:start="39:14" pos:end="39:14">&amp;</operator><name pos:start="39:15" pos:end="39:35"><name pos:start="39:15" pos:end="39:26">sigact_table</name><index pos:start="39:27" pos:end="39:35">[<expr pos:start="39:28" pos:end="39:34"><name pos:start="39:28" pos:end="39:30">sig</name> <operator pos:start="39:32" pos:end="39:32">-</operator> <literal type="number" pos:start="39:34" pos:end="39:34">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:34"><expr pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:15">handler</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <name pos:start="41:19" pos:end="41:33"><name pos:start="41:19" pos:end="41:20">sa</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:33">_sa_handler</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:18">(<expr pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:17">do_strace</name></expr>)</condition> <block pos:start="47:20" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:42">

        <expr_stmt pos:start="49:9" pos:end="49:42"><expr pos:start="49:9" pos:end="49:41"><call pos:start="49:9" pos:end="49:41"><name pos:start="49:9" pos:end="49:26">print_taken_signal</name><argument_list pos:start="49:27" pos:end="49:41">(<argument pos:start="49:28" pos:end="49:30"><expr pos:start="49:28" pos:end="49:30"><name pos:start="49:28" pos:end="49:30">sig</name></expr></argument>, <argument pos:start="49:33" pos:end="49:40"><expr pos:start="49:33" pos:end="49:40"><operator pos:start="49:33" pos:end="49:33">&amp;</operator><name pos:start="49:34" pos:end="49:40"><name pos:start="49:34" pos:end="49:34">k</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:40">info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="167:5"><if pos:start="55:5" pos:end="75:5">if <condition pos:start="55:8" pos:end="55:34">(<expr pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:15">handler</name> <operator pos:start="55:17" pos:end="55:18">==</operator> <name pos:start="55:20" pos:end="55:33">TARGET_SIG_DFL</name></expr>)</condition> <block pos:start="55:36" pos:end="75:5">{<block_content pos:start="59:9" pos:end="73:9">

        <comment type="block" pos:start="57:9" pos:end="57:86">/* default handler : ignore some signal. The other are job control or fatal */</comment>

        <if_stmt pos:start="59:9" pos:end="73:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:84">(<expr pos:start="59:13" pos:end="59:83"><name pos:start="59:13" pos:end="59:15">sig</name> <operator pos:start="59:17" pos:end="59:18">==</operator> <name pos:start="59:20" pos:end="59:33">TARGET_SIGTSTP</name> <operator pos:start="59:35" pos:end="59:36">||</operator> <name pos:start="59:38" pos:end="59:40">sig</name> <operator pos:start="59:42" pos:end="59:43">==</operator> <name pos:start="59:45" pos:end="59:58">TARGET_SIGTTIN</name> <operator pos:start="59:60" pos:end="59:61">||</operator> <name pos:start="59:63" pos:end="59:65">sig</name> <operator pos:start="59:67" pos:end="59:68">==</operator> <name pos:start="59:70" pos:end="59:83">TARGET_SIGTTOU</name></expr>)</condition> <block pos:start="59:86" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:35">

            <expr_stmt pos:start="61:13" pos:end="61:35"><expr pos:start="61:13" pos:end="61:34"><call pos:start="61:13" pos:end="61:34"><name pos:start="61:13" pos:end="61:16">kill</name><argument_list pos:start="61:17" pos:end="61:34">(<argument pos:start="61:18" pos:end="61:25"><expr pos:start="61:18" pos:end="61:25"><call pos:start="61:18" pos:end="61:25"><name pos:start="61:18" pos:end="61:23">getpid</name><argument_list pos:start="61:24" pos:end="61:25">()</argument_list></call></expr></argument>,<argument pos:start="61:27" pos:end="61:33"><expr pos:start="61:27" pos:end="61:33"><name pos:start="61:27" pos:end="61:33">SIGSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="63:11" pos:end="73:9">else if <condition pos:start="63:19" pos:end="69:41">(<expr pos:start="63:20" pos:end="69:40"><name pos:start="63:20" pos:end="63:22">sig</name> <operator pos:start="63:24" pos:end="63:25">!=</operator> <name pos:start="63:27" pos:end="63:40">TARGET_SIGCHLD</name> <operator pos:start="63:42" pos:end="63:43">&amp;&amp;</operator>

                   <name pos:start="65:20" pos:end="65:22">sig</name> <operator pos:start="65:24" pos:end="65:25">!=</operator> <name pos:start="65:27" pos:end="65:39">TARGET_SIGURG</name> <operator pos:start="65:41" pos:end="65:42">&amp;&amp;</operator>

                   <name pos:start="67:20" pos:end="67:22">sig</name> <operator pos:start="67:24" pos:end="67:25">!=</operator> <name pos:start="67:27" pos:end="67:41">TARGET_SIGWINCH</name> <operator pos:start="67:43" pos:end="67:44">&amp;&amp;</operator>

                   <name pos:start="69:20" pos:end="69:22">sig</name> <operator pos:start="69:24" pos:end="69:25">!=</operator> <name pos:start="69:27" pos:end="69:40">TARGET_SIGCONT</name></expr>)</condition> <block pos:start="69:43" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:27">

            <expr_stmt pos:start="71:13" pos:end="71:27"><expr pos:start="71:13" pos:end="71:26"><call pos:start="71:13" pos:end="71:26"><name pos:start="71:13" pos:end="71:21">force_sig</name><argument_list pos:start="71:22" pos:end="71:26">(<argument pos:start="71:23" pos:end="71:25"><expr pos:start="71:23" pos:end="71:25"><name pos:start="71:23" pos:end="71:25">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="75:7" pos:end="79:5">else if <condition pos:start="75:15" pos:end="75:41">(<expr pos:start="75:16" pos:end="75:40"><name pos:start="75:16" pos:end="75:22">handler</name> <operator pos:start="75:24" pos:end="75:25">==</operator> <name pos:start="75:27" pos:end="75:40">TARGET_SIG_IGN</name></expr>)</condition> <block pos:start="75:43" pos:end="79:5">{<block_content>

        <comment type="block" pos:start="77:9" pos:end="77:24">/* ignore sig */</comment>

    </block_content>}</block></if> <if type="elseif" pos:start="79:7" pos:end="83:5">else if <condition pos:start="79:15" pos:end="79:41">(<expr pos:start="79:16" pos:end="79:40"><name pos:start="79:16" pos:end="79:22">handler</name> <operator pos:start="79:24" pos:end="79:25">==</operator> <name pos:start="79:27" pos:end="79:40">TARGET_SIG_ERR</name></expr>)</condition> <block pos:start="79:43" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:23">

        <expr_stmt pos:start="81:9" pos:end="81:23"><expr pos:start="81:9" pos:end="81:22"><call pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:17">force_sig</name><argument_list pos:start="81:18" pos:end="81:22">(<argument pos:start="81:19" pos:end="81:21"><expr pos:start="81:19" pos:end="81:21"><name pos:start="81:19" pos:end="81:21">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="83:7" pos:end="167:5">else <block pos:start="83:12" pos:end="167:5">{<block_content pos:start="87:9" pos:end="165:9">

        <comment type="block" pos:start="85:9" pos:end="85:70">/* compute the blocked signals during the handler execution */</comment>

        <decl_stmt pos:start="87:9" pos:end="87:30"><decl pos:start="87:9" pos:end="87:29"><type pos:start="87:9" pos:end="87:18"><name pos:start="87:9" pos:end="87:16">sigset_t</name> <modifier pos:start="87:18" pos:end="87:18">*</modifier></type><name pos:start="87:19" pos:end="87:29">blocked_set</name></decl>;</decl_stmt>



        <expr_stmt pos:start="91:9" pos:end="91:50"><expr pos:start="91:9" pos:end="91:49"><call pos:start="91:9" pos:end="91:49"><name pos:start="91:9" pos:end="91:29">target_to_host_sigset</name><argument_list pos:start="91:30" pos:end="91:49">(<argument pos:start="91:31" pos:end="91:34"><expr pos:start="91:31" pos:end="91:34"><operator pos:start="91:31" pos:end="91:31">&amp;</operator><name pos:start="91:32" pos:end="91:34">set</name></expr></argument>, <argument pos:start="91:37" pos:end="91:48"><expr pos:start="91:37" pos:end="91:48"><operator pos:start="91:37" pos:end="91:37">&amp;</operator><name pos:start="91:38" pos:end="91:48"><name pos:start="91:38" pos:end="91:39">sa</name><operator pos:start="91:40" pos:end="91:41">-&gt;</operator><name pos:start="91:42" pos:end="91:48">sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="93:9" pos:end="95:40">/* SA_NODEFER indicates that the current signal should not be

           blocked during the handler */</comment>

        <if_stmt pos:start="97:9" pos:end="99:56"><if pos:start="97:9" pos:end="99:56">if <condition pos:start="97:12" pos:end="97:48">(<expr pos:start="97:13" pos:end="97:47"><operator pos:start="97:13" pos:end="97:13">!</operator><operator pos:start="97:14" pos:end="97:14">(</operator><name pos:start="97:15" pos:end="97:26"><name pos:start="97:15" pos:end="97:16">sa</name><operator pos:start="97:17" pos:end="97:18">-&gt;</operator><name pos:start="97:19" pos:end="97:26">sa_flags</name></name> <operator pos:start="97:28" pos:end="97:28">&amp;</operator> <name pos:start="97:30" pos:end="97:46">TARGET_SA_NODEFER</name><operator pos:start="97:47" pos:end="97:47">)</operator></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:56"><block_content pos:start="99:13" pos:end="99:56">

            <expr_stmt pos:start="99:13" pos:end="99:56"><expr pos:start="99:13" pos:end="99:55"><call pos:start="99:13" pos:end="99:55"><name pos:start="99:13" pos:end="99:21">sigaddset</name><argument_list pos:start="99:22" pos:end="99:55">(<argument pos:start="99:23" pos:end="99:26"><expr pos:start="99:23" pos:end="99:26"><operator pos:start="99:23" pos:end="99:23">&amp;</operator><name pos:start="99:24" pos:end="99:26">set</name></expr></argument>, <argument pos:start="99:29" pos:end="99:54"><expr pos:start="99:29" pos:end="99:54"><call pos:start="99:29" pos:end="99:54"><name pos:start="99:29" pos:end="99:49">target_to_host_signal</name><argument_list pos:start="99:50" pos:end="99:54">(<argument pos:start="99:51" pos:end="99:53"><expr pos:start="99:51" pos:end="99:53"><name pos:start="99:51" pos:end="99:53">sig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="103:9" pos:end="105:60">/* save the previous blocked signal state to restore it at the

           end of the signal execution (see do_sigreturn) */</comment>

        <expr_stmt pos:start="107:9" pos:end="107:74"><expr pos:start="107:9" pos:end="107:73"><call pos:start="107:9" pos:end="107:73"><name pos:start="107:9" pos:end="107:38">host_to_target_sigset_internal</name><argument_list pos:start="107:39" pos:end="107:73">(<argument pos:start="107:40" pos:end="107:54"><expr pos:start="107:40" pos:end="107:54"><operator pos:start="107:40" pos:end="107:40">&amp;</operator><name pos:start="107:41" pos:end="107:54">target_old_set</name></expr></argument>, <argument pos:start="107:57" pos:end="107:72"><expr pos:start="107:57" pos:end="107:72"><operator pos:start="107:57" pos:end="107:57">&amp;</operator><name pos:start="107:58" pos:end="107:72"><name pos:start="107:58" pos:end="107:59">ts</name><operator pos:start="107:60" pos:end="107:61">-&gt;</operator><name pos:start="107:62" pos:end="107:72">signal_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="111:9" pos:end="111:42">/* block signals in the handler */</comment>

        <expr_stmt pos:start="113:9" pos:end="115:52"><expr pos:start="113:9" pos:end="115:51"><name pos:start="113:9" pos:end="113:19">blocked_set</name> <operator pos:start="113:21" pos:end="113:21">=</operator> <ternary pos:start="113:23" pos:end="115:51"><condition pos:start="113:23" pos:end="113:41"><expr pos:start="113:23" pos:end="113:39"><name pos:start="113:23" pos:end="113:39"><name pos:start="113:23" pos:end="113:24">ts</name><operator pos:start="113:25" pos:end="113:26">-&gt;</operator><name pos:start="113:27" pos:end="113:39">in_sigsuspend</name></name></expr> ?</condition><then pos:start="115:13" pos:end="115:32">

            <expr pos:start="115:13" pos:end="115:32"><operator pos:start="115:13" pos:end="115:13">&amp;</operator><name pos:start="115:14" pos:end="115:32"><name pos:start="115:14" pos:end="115:15">ts</name><operator pos:start="115:16" pos:end="115:17">-&gt;</operator><name pos:start="115:18" pos:end="115:32">sigsuspend_mask</name></name></expr> </then><else pos:start="115:34" pos:end="115:51">: <expr pos:start="115:36" pos:end="115:51"><operator pos:start="115:36" pos:end="115:36">&amp;</operator><name pos:start="115:37" pos:end="115:51"><name pos:start="115:37" pos:end="115:38">ts</name><operator pos:start="115:39" pos:end="115:40">-&gt;</operator><name pos:start="115:41" pos:end="115:51">signal_mask</name></name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:54"><expr pos:start="117:9" pos:end="117:53"><call pos:start="117:9" pos:end="117:53"><name pos:start="117:9" pos:end="117:16">sigorset</name><argument_list pos:start="117:17" pos:end="117:53">(<argument pos:start="117:18" pos:end="117:33"><expr pos:start="117:18" pos:end="117:33"><operator pos:start="117:18" pos:end="117:18">&amp;</operator><name pos:start="117:19" pos:end="117:33"><name pos:start="117:19" pos:end="117:20">ts</name><operator pos:start="117:21" pos:end="117:22">-&gt;</operator><name pos:start="117:23" pos:end="117:33">signal_mask</name></name></expr></argument>, <argument pos:start="117:36" pos:end="117:46"><expr pos:start="117:36" pos:end="117:46"><name pos:start="117:36" pos:end="117:46">blocked_set</name></expr></argument>, <argument pos:start="117:49" pos:end="117:52"><expr pos:start="117:49" pos:end="117:52"><operator pos:start="117:49" pos:end="117:49">&amp;</operator><name pos:start="117:50" pos:end="117:52">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="126:0"><expr pos:start="119:9" pos:end="119:29"><name pos:start="119:9" pos:end="119:25"><name pos:start="119:9" pos:end="119:10">ts</name><operator pos:start="119:11" pos:end="119:12">-&gt;</operator><name pos:start="119:13" pos:end="119:25">in_sigsuspend</name></name> <operator pos:start="119:27" pos:end="119:27">=</operator> <literal type="number" pos:start="119:29" pos:end="119:29">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="123:9" pos:end="123:70">/* if the CPU is in VM86 mode, we restore the 32 bit values */</comment>

<cpp:if pos:start="125:1" pos:end="125:51">#<cpp:directive pos:start="125:2" pos:end="125:3">if</cpp:directive> <expr pos:start="125:5" pos:end="125:51"><call pos:start="125:5" pos:end="125:24"><name pos:start="125:5" pos:end="125:11">defined</name><argument_list pos:start="125:12" pos:end="125:24">(<argument pos:start="125:13" pos:end="125:23"><expr pos:start="125:13" pos:end="125:23"><name pos:start="125:13" pos:end="125:23">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="125:26" pos:end="125:27">&amp;&amp;</operator> <operator pos:start="125:29" pos:end="125:29">!</operator><call pos:start="125:30" pos:end="125:51"><name pos:start="125:30" pos:end="125:36">defined</name><argument_list pos:start="125:37" pos:end="125:51">(<argument pos:start="125:38" pos:end="125:50"><expr pos:start="125:38" pos:end="125:50"><name pos:start="125:38" pos:end="125:50">TARGET_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <block pos:start="127:9" pos:end="144:0">{<block_content pos:start="129:13" pos:end="133:36">

            <decl_stmt pos:start="129:13" pos:end="129:39"><decl pos:start="129:13" pos:end="129:38"><type pos:start="129:13" pos:end="129:25"><name pos:start="129:13" pos:end="129:23">CPUX86State</name> <modifier pos:start="129:25" pos:end="129:25">*</modifier></type><name pos:start="129:26" pos:end="129:28">env</name> <init pos:start="129:30" pos:end="129:38">= <expr pos:start="129:32" pos:end="129:38"><name pos:start="129:32" pos:end="129:38">cpu_env</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="131:13" pos:end="133:36"><if pos:start="131:13" pos:end="133:36">if <condition pos:start="131:16" pos:end="131:38">(<expr pos:start="131:17" pos:end="131:37"><name pos:start="131:17" pos:end="131:27"><name pos:start="131:17" pos:end="131:19">env</name><operator pos:start="131:20" pos:end="131:21">-&gt;</operator><name pos:start="131:22" pos:end="131:27">eflags</name></name> <operator pos:start="131:29" pos:end="131:29">&amp;</operator> <name pos:start="131:31" pos:end="131:37">VM_MASK</name></expr>)</condition><block type="pseudo" pos:start="133:17" pos:end="133:36"><block_content pos:start="133:17" pos:end="133:36">

                <expr_stmt pos:start="133:17" pos:end="133:36"><expr pos:start="133:17" pos:end="133:35"><call pos:start="133:17" pos:end="133:35"><name pos:start="133:17" pos:end="133:30">save_v86_state</name><argument_list pos:start="133:31" pos:end="133:35">(<argument pos:start="133:32" pos:end="133:34"><expr pos:start="133:32" pos:end="133:34"><name pos:start="133:32" pos:end="133:34">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block>

<cpp:endif pos:start="137:1" pos:end="137:6">#<cpp:directive pos:start="137:2" pos:end="137:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="139:9" pos:end="139:56">/* prepare the stack frame of the virtual CPU */</comment>

<cpp:if pos:start="141:1" pos:end="143:57">#<cpp:directive pos:start="141:2" pos:end="141:3">if</cpp:directive> <expr pos:start="141:5" pos:end="143:57"><call pos:start="141:5" pos:end="141:31"><name pos:start="141:5" pos:end="141:11">defined</name><argument_list pos:start="141:12" pos:end="141:31">(<argument pos:start="141:13" pos:end="141:30"><expr pos:start="141:13" pos:end="141:30"><name pos:start="141:13" pos:end="141:30">TARGET_ABI_MIPSN32</name></expr></argument>)</argument_list></call> <operator pos:start="141:33" pos:end="141:34">||</operator> <call pos:start="141:36" pos:end="141:62"><name pos:start="141:36" pos:end="141:42">defined</name><argument_list pos:start="141:43" pos:end="141:62">(<argument pos:start="141:44" pos:end="141:61"><expr pos:start="141:44" pos:end="141:61"><name pos:start="141:44" pos:end="141:61">TARGET_ABI_MIPSN64</name></expr></argument>)</argument_list></call> \

    <operator pos:start="143:5" pos:end="143:6">||</operator> <call pos:start="143:8" pos:end="143:31"><name pos:start="143:8" pos:end="143:14">defined</name><argument_list pos:start="143:15" pos:end="143:31">(<argument pos:start="143:16" pos:end="143:30"><expr pos:start="143:16" pos:end="143:30"><name pos:start="143:16" pos:end="143:30">TARGET_OPENRISC</name></expr></argument>)</argument_list></call> <operator pos:start="143:33" pos:end="143:34">||</operator> <call pos:start="143:36" pos:end="143:57"><name pos:start="143:36" pos:end="143:42">defined</name><argument_list pos:start="143:43" pos:end="143:57">(<argument pos:start="143:44" pos:end="143:56"><expr pos:start="143:44" pos:end="143:56"><name pos:start="143:44" pos:end="143:56">TARGET_TILEGX</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <comment type="block" pos:start="145:9" pos:end="145:61">/* These targets do not have traditional signals.  */</comment>

        <expr_stmt pos:start="147:9" pos:end="150:0"><expr pos:start="147:9" pos:end="147:67"><call pos:start="147:9" pos:end="147:67"><name pos:start="147:9" pos:end="147:22">setup_rt_frame</name><argument_list pos:start="147:23" pos:end="147:67">(<argument pos:start="147:24" pos:end="147:26"><expr pos:start="147:24" pos:end="147:26"><name pos:start="147:24" pos:end="147:26">sig</name></expr></argument>, <argument pos:start="147:29" pos:end="147:30"><expr pos:start="147:29" pos:end="147:30"><name pos:start="147:29" pos:end="147:30">sa</name></expr></argument>, <argument pos:start="147:33" pos:end="147:40"><expr pos:start="147:33" pos:end="147:40"><operator pos:start="147:33" pos:end="147:33">&amp;</operator><name pos:start="147:34" pos:end="147:40"><name pos:start="147:34" pos:end="147:34">k</name><operator pos:start="147:35" pos:end="147:36">-&gt;</operator><name pos:start="147:37" pos:end="147:40">info</name></name></expr></argument>, <argument pos:start="147:43" pos:end="147:57"><expr pos:start="147:43" pos:end="147:57"><operator pos:start="147:43" pos:end="147:43">&amp;</operator><name pos:start="147:44" pos:end="147:57">target_old_set</name></expr></argument>, <argument pos:start="147:60" pos:end="147:66"><expr pos:start="147:60" pos:end="147:66"><name pos:start="147:60" pos:end="147:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="149:1" pos:end="149:5">#<cpp:directive pos:start="149:2" pos:end="149:5">else</cpp:directive></cpp:else>

        <if_stmt pos:start="151:9" pos:end="160:0"><if pos:start="151:9" pos:end="153:72">if <condition pos:start="151:12" pos:end="151:45">(<expr pos:start="151:13" pos:end="151:44"><name pos:start="151:13" pos:end="151:24"><name pos:start="151:13" pos:end="151:14">sa</name><operator pos:start="151:15" pos:end="151:16">-&gt;</operator><name pos:start="151:17" pos:end="151:24">sa_flags</name></name> <operator pos:start="151:26" pos:end="151:26">&amp;</operator> <name pos:start="151:28" pos:end="151:44">TARGET_SA_SIGINFO</name></expr>)</condition><block type="pseudo" pos:start="153:13" pos:end="153:72"><block_content pos:start="153:13" pos:end="153:72">

            <expr_stmt pos:start="153:13" pos:end="153:72"><expr pos:start="153:13" pos:end="153:71"><call pos:start="153:13" pos:end="153:71"><name pos:start="153:13" pos:end="153:26">setup_rt_frame</name><argument_list pos:start="153:27" pos:end="153:71">(<argument pos:start="153:28" pos:end="153:30"><expr pos:start="153:28" pos:end="153:30"><name pos:start="153:28" pos:end="153:30">sig</name></expr></argument>, <argument pos:start="153:33" pos:end="153:34"><expr pos:start="153:33" pos:end="153:34"><name pos:start="153:33" pos:end="153:34">sa</name></expr></argument>, <argument pos:start="153:37" pos:end="153:44"><expr pos:start="153:37" pos:end="153:44"><operator pos:start="153:37" pos:end="153:37">&amp;</operator><name pos:start="153:38" pos:end="153:44"><name pos:start="153:38" pos:end="153:38">k</name><operator pos:start="153:39" pos:end="153:40">-&gt;</operator><name pos:start="153:41" pos:end="153:44">info</name></name></expr></argument>, <argument pos:start="153:47" pos:end="153:61"><expr pos:start="153:47" pos:end="153:61"><operator pos:start="153:47" pos:end="153:47">&amp;</operator><name pos:start="153:48" pos:end="153:61">target_old_set</name></expr></argument>, <argument pos:start="153:64" pos:end="153:70"><expr pos:start="153:64" pos:end="153:70"><name pos:start="153:64" pos:end="153:70">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="155:9" pos:end="160:0">else<block type="pseudo" pos:start="157:13" pos:end="160:0"><block_content pos:start="157:13" pos:end="160:0">

            <expr_stmt pos:start="157:13" pos:end="160:0"><expr pos:start="157:13" pos:end="157:58"><call pos:start="157:13" pos:end="157:58"><name pos:start="157:13" pos:end="157:23">setup_frame</name><argument_list pos:start="157:24" pos:end="157:58">(<argument pos:start="157:25" pos:end="157:27"><expr pos:start="157:25" pos:end="157:27"><name pos:start="157:25" pos:end="157:27">sig</name></expr></argument>, <argument pos:start="157:30" pos:end="157:31"><expr pos:start="157:30" pos:end="157:31"><name pos:start="157:30" pos:end="157:31">sa</name></expr></argument>, <argument pos:start="157:34" pos:end="157:48"><expr pos:start="157:34" pos:end="157:48"><operator pos:start="157:34" pos:end="157:34">&amp;</operator><name pos:start="157:35" pos:end="157:48">target_old_set</name></expr></argument>, <argument pos:start="157:51" pos:end="157:57"><expr pos:start="157:51" pos:end="157:57"><name pos:start="157:51" pos:end="157:57">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif pos:start="159:1" pos:end="159:6">#<cpp:directive pos:start="159:2" pos:end="159:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="161:9" pos:end="165:9"><if pos:start="161:9" pos:end="165:9">if <condition pos:start="161:12" pos:end="161:47">(<expr pos:start="161:13" pos:end="161:46"><name pos:start="161:13" pos:end="161:24"><name pos:start="161:13" pos:end="161:14">sa</name><operator pos:start="161:15" pos:end="161:16">-&gt;</operator><name pos:start="161:17" pos:end="161:24">sa_flags</name></name> <operator pos:start="161:26" pos:end="161:26">&amp;</operator> <name pos:start="161:28" pos:end="161:46">TARGET_SA_RESETHAND</name></expr>)</condition> <block pos:start="161:49" pos:end="165:9">{<block_content pos:start="163:13" pos:end="163:45">

            <expr_stmt pos:start="163:13" pos:end="163:45"><expr pos:start="163:13" pos:end="163:44"><name pos:start="163:13" pos:end="163:27"><name pos:start="163:13" pos:end="163:14">sa</name><operator pos:start="163:15" pos:end="163:16">-&gt;</operator><name pos:start="163:17" pos:end="163:27">_sa_handler</name></name> <operator pos:start="163:29" pos:end="163:29">=</operator> <name pos:start="163:31" pos:end="163:44">TARGET_SIG_DFL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
