<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24247.c" pos:tabs="8"><function pos:start="1:1" pos:end="207:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">wsvqa_read_packet</name><parameter_list pos:start="1:29" pos:end="3:43">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><name pos:start="1:30" pos:end="1:44">AVFormatContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:42"><decl pos:start="3:30" pos:end="3:42"><type pos:start="3:30" pos:end="3:42"><name pos:start="3:30" pos:end="3:37">AVPacket</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:42">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="207:1">{<block_content pos:start="7:5" pos:end="205:15">

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">WsVqaDemuxContext</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:28">wsvqa</name> <init pos:start="7:30" pos:end="7:43">= <expr pos:start="7:32" pos:end="7:43"><name pos:start="7:32" pos:end="7:43"><name pos:start="7:32" pos:end="7:32">s</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:43">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">AVIOContext</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:19">pb</name> <init pos:start="9:21" pos:end="9:27">= <expr pos:start="9:23" pos:end="9:27"><name pos:start="9:23" pos:end="9:27"><name pos:start="9:23" pos:end="9:23">s</name><operator pos:start="9:24" pos:end="9:25">-&gt;</operator><name pos:start="9:26" pos:end="9:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name> <init pos:start="11:13" pos:end="11:16">= <expr pos:start="11:15" pos:end="11:16"><operator pos:start="11:15" pos:end="11:15">-</operator><literal type="number" pos:start="11:16" pos:end="11:16">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:45"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">char</name></type> <name pos:start="13:19" pos:end="13:45"><name pos:start="13:19" pos:end="13:26">preamble</name><index pos:start="13:27" pos:end="13:45">[<expr pos:start="13:28" pos:end="13:44"><name pos:start="13:28" pos:end="13:44">VQA_PREAMBLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:27">chunk_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:27">chunk_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">skip_byte</name></decl>;</decl_stmt>



    <while pos:start="23:5" pos:end="201:5">while <condition pos:start="23:11" pos:end="23:75">(<expr pos:start="23:12" pos:end="23:74"><call pos:start="23:12" pos:end="23:53"><name pos:start="23:12" pos:end="23:20">avio_read</name><argument_list pos:start="23:21" pos:end="23:53">(<argument pos:start="23:22" pos:end="23:23"><expr pos:start="23:22" pos:end="23:23"><name pos:start="23:22" pos:end="23:23">pb</name></expr></argument>, <argument pos:start="23:26" pos:end="23:33"><expr pos:start="23:26" pos:end="23:33"><name pos:start="23:26" pos:end="23:33">preamble</name></expr></argument>, <argument pos:start="23:36" pos:end="23:52"><expr pos:start="23:36" pos:end="23:52"><name pos:start="23:36" pos:end="23:52">VQA_PREAMBLE_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="23:55" pos:end="23:56">==</operator> <name pos:start="23:58" pos:end="23:74">VQA_PREAMBLE_SIZE</name></expr>)</condition> <block pos:start="23:77" pos:end="201:5">{<block_content pos:start="25:9" pos:end="199:9">

        <expr_stmt pos:start="25:9" pos:end="25:43"><expr pos:start="25:9" pos:end="25:42"><name pos:start="25:9" pos:end="25:18">chunk_type</name> <operator pos:start="25:20" pos:end="25:20">=</operator> <call pos:start="25:22" pos:end="25:42"><name pos:start="25:22" pos:end="25:28">AV_RB32</name><argument_list pos:start="25:29" pos:end="25:42">(<argument pos:start="25:30" pos:end="25:41"><expr pos:start="25:30" pos:end="25:41"><operator pos:start="25:30" pos:end="25:30">&amp;</operator><name pos:start="25:31" pos:end="25:41"><name pos:start="25:31" pos:end="25:38">preamble</name><index pos:start="25:39" pos:end="25:41">[<expr pos:start="25:40" pos:end="25:40"><literal type="number" pos:start="25:40" pos:end="25:40">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:43"><expr pos:start="27:9" pos:end="27:42"><name pos:start="27:9" pos:end="27:18">chunk_size</name> <operator pos:start="27:20" pos:end="27:20">=</operator> <call pos:start="27:22" pos:end="27:42"><name pos:start="27:22" pos:end="27:28">AV_RB32</name><argument_list pos:start="27:29" pos:end="27:42">(<argument pos:start="27:30" pos:end="27:41"><expr pos:start="27:30" pos:end="27:41"><operator pos:start="27:30" pos:end="27:30">&amp;</operator><name pos:start="27:31" pos:end="27:41"><name pos:start="27:31" pos:end="27:38">preamble</name><index pos:start="27:39" pos:end="27:41">[<expr pos:start="27:40" pos:end="27:40"><literal type="number" pos:start="27:40" pos:end="27:40">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="31:9" pos:end="31:38"><expr pos:start="31:9" pos:end="31:37"><name pos:start="31:9" pos:end="31:17">skip_byte</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <name pos:start="31:21" pos:end="31:30">chunk_size</name> <operator pos:start="31:32" pos:end="31:32">&amp;</operator> <literal type="number" pos:start="31:34" pos:end="31:37">0x01</literal></expr>;</expr_stmt>



        <if_stmt pos:start="35:9" pos:end="199:9"><if pos:start="35:9" pos:end="183:9">if <condition pos:start="35:12" pos:end="37:65">(<expr pos:start="35:13" pos:end="37:64"><operator pos:start="35:13" pos:end="35:13">(</operator><name pos:start="35:14" pos:end="35:23">chunk_type</name> <operator pos:start="35:25" pos:end="35:26">==</operator> <name pos:start="35:28" pos:end="35:35">SND0_TAG</name><operator pos:start="35:36" pos:end="35:36">)</operator> <operator pos:start="35:38" pos:end="35:39">||</operator> <operator pos:start="35:41" pos:end="35:41">(</operator><name pos:start="35:42" pos:end="35:51">chunk_type</name> <operator pos:start="35:53" pos:end="35:54">==</operator> <name pos:start="35:56" pos:end="35:63">SND1_TAG</name><operator pos:start="35:64" pos:end="35:64">)</operator> <operator pos:start="35:66" pos:end="35:67">||</operator>

            <operator pos:start="37:13" pos:end="37:13">(</operator><name pos:start="37:14" pos:end="37:23">chunk_type</name> <operator pos:start="37:25" pos:end="37:26">==</operator> <name pos:start="37:28" pos:end="37:35">SND2_TAG</name><operator pos:start="37:36" pos:end="37:36">)</operator> <operator pos:start="37:38" pos:end="37:39">||</operator> <operator pos:start="37:41" pos:end="37:41">(</operator><name pos:start="37:42" pos:end="37:51">chunk_type</name> <operator pos:start="37:53" pos:end="37:54">==</operator> <name pos:start="37:56" pos:end="37:63">VQFR_TAG</name><operator pos:start="37:64" pos:end="37:64">)</operator></expr>)</condition> <block pos:start="37:67" pos:end="183:9">{<block_content pos:start="41:13" pos:end="181:23">



            <expr_stmt pos:start="41:13" pos:end="41:52"><expr pos:start="41:13" pos:end="41:51"><name pos:start="41:13" pos:end="41:15">ret</name><operator pos:start="41:16" pos:end="41:16">=</operator> <call pos:start="41:18" pos:end="41:51"><name pos:start="41:18" pos:end="41:30">av_get_packet</name><argument_list pos:start="41:31" pos:end="41:51">(<argument pos:start="41:32" pos:end="41:33"><expr pos:start="41:32" pos:end="41:33"><name pos:start="41:32" pos:end="41:33">pb</name></expr></argument>, <argument pos:start="41:36" pos:end="41:38"><expr pos:start="41:36" pos:end="41:38"><name pos:start="41:36" pos:end="41:38">pkt</name></expr></argument>, <argument pos:start="41:41" pos:end="41:50"><expr pos:start="41:41" pos:end="41:50"><name pos:start="41:41" pos:end="41:50">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="45:36"><if pos:start="43:13" pos:end="45:36">if <condition pos:start="43:16" pos:end="43:22">(<expr pos:start="43:17" pos:end="43:21"><name pos:start="43:17" pos:end="43:19">ret</name><operator pos:start="43:20" pos:end="43:20">&lt;</operator><literal type="number" pos:start="43:21" pos:end="43:21">0</literal></expr>)</condition><block type="pseudo" pos:start="45:17" pos:end="45:36"><block_content pos:start="45:17" pos:end="45:36">

                <return pos:start="45:17" pos:end="45:36">return <expr pos:start="45:24" pos:end="45:35"><call pos:start="45:24" pos:end="45:35"><name pos:start="45:24" pos:end="45:30">AVERROR</name><argument_list pos:start="45:31" pos:end="45:35">(<argument pos:start="45:32" pos:end="45:34"><expr pos:start="45:32" pos:end="45:34"><name pos:start="45:32" pos:end="45:34">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



            <switch pos:start="49:13" pos:end="169:13">switch <condition pos:start="49:20" pos:end="49:31">(<expr pos:start="49:21" pos:end="49:30"><name pos:start="49:21" pos:end="49:30">chunk_type</name></expr>)</condition> <block pos:start="49:33" pos:end="169:13">{<block_content pos:start="51:13" pos:end="167:22">

            <case pos:start="51:13" pos:end="51:26">case <expr pos:start="51:18" pos:end="51:25"><name pos:start="51:18" pos:end="51:25">SND0_TAG</name></expr>:</case>

            <case pos:start="53:13" pos:end="53:26">case <expr pos:start="53:18" pos:end="53:25"><name pos:start="53:18" pos:end="53:25">SND1_TAG</name></expr>:</case>

            <case pos:start="55:13" pos:end="55:26">case <expr pos:start="55:18" pos:end="55:25"><name pos:start="55:18" pos:end="55:25">SND2_TAG</name></expr>:</case>

                <if_stmt pos:start="57:17" pos:end="133:17"><if pos:start="57:17" pos:end="133:17">if <condition pos:start="57:20" pos:end="57:52">(<expr pos:start="57:21" pos:end="57:51"><name pos:start="57:21" pos:end="57:45"><name pos:start="57:21" pos:end="57:25">wsvqa</name><operator pos:start="57:26" pos:end="57:27">-&gt;</operator><name pos:start="57:28" pos:end="57:45">audio_stream_index</name></name> <operator pos:start="57:47" pos:end="57:48">==</operator> <operator pos:start="57:50" pos:end="57:50">-</operator><literal type="number" pos:start="57:51" pos:end="57:51">1</literal></expr>)</condition> <block pos:start="57:54" pos:end="133:17">{<block_content pos:start="59:21" pos:end="131:21">

                    <decl_stmt pos:start="59:21" pos:end="59:64"><decl pos:start="59:21" pos:end="59:63"><type pos:start="59:21" pos:end="59:30"><name pos:start="59:21" pos:end="59:28">AVStream</name> <modifier pos:start="59:30" pos:end="59:30">*</modifier></type><name pos:start="59:31" pos:end="59:32">st</name> <init pos:start="59:34" pos:end="59:63">= <expr pos:start="59:36" pos:end="59:63"><call pos:start="59:36" pos:end="59:63"><name pos:start="59:36" pos:end="59:54">avformat_new_stream</name><argument_list pos:start="59:55" pos:end="59:63">(<argument pos:start="59:56" pos:end="59:56"><expr pos:start="59:56" pos:end="59:56"><name pos:start="59:56" pos:end="59:56">s</name></expr></argument>, <argument pos:start="59:59" pos:end="59:62"><expr pos:start="59:59" pos:end="59:62"><name pos:start="59:59" pos:end="59:62">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="61:21" pos:end="63:47"><if pos:start="61:21" pos:end="63:47">if <condition pos:start="61:24" pos:end="61:28">(<expr pos:start="61:25" pos:end="61:27"><operator pos:start="61:25" pos:end="61:25">!</operator><name pos:start="61:26" pos:end="61:27">st</name></expr>)</condition><block type="pseudo" pos:start="63:25" pos:end="63:47"><block_content pos:start="63:25" pos:end="63:47">

                        <return pos:start="63:25" pos:end="63:47">return <expr pos:start="63:32" pos:end="63:46"><call pos:start="63:32" pos:end="63:46"><name pos:start="63:32" pos:end="63:38">AVERROR</name><argument_list pos:start="63:39" pos:end="63:46">(<argument pos:start="63:40" pos:end="63:45"><expr pos:start="63:40" pos:end="63:45"><name pos:start="63:40" pos:end="63:45">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="67:21" pos:end="67:58"><expr pos:start="67:21" pos:end="67:57"><name pos:start="67:21" pos:end="67:45"><name pos:start="67:21" pos:end="67:25">wsvqa</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:45">audio_stream_index</name></name> <operator pos:start="67:47" pos:end="67:47">=</operator> <name pos:start="67:49" pos:end="67:57"><name pos:start="67:49" pos:end="67:50">st</name><operator pos:start="67:51" pos:end="67:52">-&gt;</operator><name pos:start="67:53" pos:end="67:57">index</name></name></expr>;</expr_stmt>

                    <if_stmt pos:start="69:21" pos:end="71:51"><if pos:start="69:21" pos:end="71:51">if <condition pos:start="69:24" pos:end="69:44">(<expr pos:start="69:25" pos:end="69:43"><operator pos:start="69:25" pos:end="69:25">!</operator><name pos:start="69:26" pos:end="69:43"><name pos:start="69:26" pos:end="69:30">wsvqa</name><operator pos:start="69:31" pos:end="69:32">-&gt;</operator><name pos:start="69:33" pos:end="69:43">sample_rate</name></name></expr>)</condition><block type="pseudo" pos:start="71:25" pos:end="71:51"><block_content pos:start="71:25" pos:end="71:51">

                        <expr_stmt pos:start="71:25" pos:end="71:51"><expr pos:start="71:25" pos:end="71:50"><name pos:start="71:25" pos:end="71:42"><name pos:start="71:25" pos:end="71:29">wsvqa</name><operator pos:start="71:30" pos:end="71:31">-&gt;</operator><name pos:start="71:32" pos:end="71:42">sample_rate</name></name> <operator pos:start="71:44" pos:end="71:44">=</operator> <literal type="number" pos:start="71:46" pos:end="71:50">22050</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="73:21" pos:end="75:44"><if pos:start="73:21" pos:end="75:44">if <condition pos:start="73:24" pos:end="73:41">(<expr pos:start="73:25" pos:end="73:40"><operator pos:start="73:25" pos:end="73:25">!</operator><name pos:start="73:26" pos:end="73:40"><name pos:start="73:26" pos:end="73:30">wsvqa</name><operator pos:start="73:31" pos:end="73:32">-&gt;</operator><name pos:start="73:33" pos:end="73:40">channels</name></name></expr>)</condition><block type="pseudo" pos:start="75:25" pos:end="75:44"><block_content pos:start="75:25" pos:end="75:44">

                        <expr_stmt pos:start="75:25" pos:end="75:44"><expr pos:start="75:25" pos:end="75:43"><name pos:start="75:25" pos:end="75:39"><name pos:start="75:25" pos:end="75:29">wsvqa</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:39">channels</name></name> <operator pos:start="75:41" pos:end="75:41">=</operator> <literal type="number" pos:start="75:43" pos:end="75:43">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="77:21" pos:end="79:39"><if pos:start="77:21" pos:end="79:39">if <condition pos:start="77:24" pos:end="77:36">(<expr pos:start="77:25" pos:end="77:35"><operator pos:start="77:25" pos:end="77:25">!</operator><name pos:start="77:26" pos:end="77:35"><name pos:start="77:26" pos:end="77:30">wsvqa</name><operator pos:start="77:31" pos:end="77:32">-&gt;</operator><name pos:start="77:33" pos:end="77:35">bps</name></name></expr>)</condition><block type="pseudo" pos:start="79:25" pos:end="79:39"><block_content pos:start="79:25" pos:end="79:39">

                        <expr_stmt pos:start="79:25" pos:end="79:39"><expr pos:start="79:25" pos:end="79:38"><name pos:start="79:25" pos:end="79:34"><name pos:start="79:25" pos:end="79:29">wsvqa</name><operator pos:start="79:30" pos:end="79:31">-&gt;</operator><name pos:start="79:32" pos:end="79:34">bps</name></name> <operator pos:start="79:36" pos:end="79:36">=</operator> <literal type="number" pos:start="79:38" pos:end="79:38">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="81:21" pos:end="81:64"><expr pos:start="81:21" pos:end="81:63"><name pos:start="81:21" pos:end="81:42"><name pos:start="81:21" pos:end="81:22">st</name><operator pos:start="81:23" pos:end="81:24">-&gt;</operator><name pos:start="81:25" pos:end="81:29">codec</name><operator pos:start="81:30" pos:end="81:31">-&gt;</operator><name pos:start="81:32" pos:end="81:42">sample_rate</name></name> <operator pos:start="81:44" pos:end="81:44">=</operator> <name pos:start="81:46" pos:end="81:63"><name pos:start="81:46" pos:end="81:50">wsvqa</name><operator pos:start="81:51" pos:end="81:52">-&gt;</operator><name pos:start="81:53" pos:end="81:63">sample_rate</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="83:21" pos:end="83:66"><expr pos:start="83:21" pos:end="83:65"><name pos:start="83:21" pos:end="83:52"><name pos:start="83:21" pos:end="83:22">st</name><operator pos:start="83:23" pos:end="83:24">-&gt;</operator><name pos:start="83:25" pos:end="83:29">codec</name><operator pos:start="83:30" pos:end="83:31">-&gt;</operator><name pos:start="83:32" pos:end="83:52">bits_per_coded_sample</name></name> <operator pos:start="83:54" pos:end="83:54">=</operator> <name pos:start="83:56" pos:end="83:65"><name pos:start="83:56" pos:end="83:60">wsvqa</name><operator pos:start="83:61" pos:end="83:62">-&gt;</operator><name pos:start="83:63" pos:end="83:65">bps</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="85:21" pos:end="85:58"><expr pos:start="85:21" pos:end="85:57"><name pos:start="85:21" pos:end="85:39"><name pos:start="85:21" pos:end="85:22">st</name><operator pos:start="85:23" pos:end="85:24">-&gt;</operator><name pos:start="85:25" pos:end="85:29">codec</name><operator pos:start="85:30" pos:end="85:31">-&gt;</operator><name pos:start="85:32" pos:end="85:39">channels</name></name> <operator pos:start="85:41" pos:end="85:41">=</operator> <name pos:start="85:43" pos:end="85:57"><name pos:start="85:43" pos:end="85:47">wsvqa</name><operator pos:start="85:48" pos:end="85:49">-&gt;</operator><name pos:start="85:50" pos:end="85:57">channels</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="87:21" pos:end="87:63"><expr pos:start="87:21" pos:end="87:62"><name pos:start="87:21" pos:end="87:41"><name pos:start="87:21" pos:end="87:22">st</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:29">codec</name><operator pos:start="87:30" pos:end="87:31">-&gt;</operator><name pos:start="87:32" pos:end="87:41">codec_type</name></name> <operator pos:start="87:43" pos:end="87:43">=</operator> <name pos:start="87:45" pos:end="87:62">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>



                    <expr_stmt pos:start="91:21" pos:end="91:75"><expr pos:start="91:21" pos:end="91:74"><call pos:start="91:21" pos:end="91:74"><name pos:start="91:21" pos:end="91:39">avpriv_set_pts_info</name><argument_list pos:start="91:40" pos:end="91:74">(<argument pos:start="91:41" pos:end="91:42"><expr pos:start="91:41" pos:end="91:42"><name pos:start="91:41" pos:end="91:42">st</name></expr></argument>, <argument pos:start="91:45" pos:end="91:46"><expr pos:start="91:45" pos:end="91:46"><literal type="number" pos:start="91:45" pos:end="91:46">64</literal></expr></argument>, <argument pos:start="91:49" pos:end="91:49"><expr pos:start="91:49" pos:end="91:49"><literal type="number" pos:start="91:49" pos:end="91:49">1</literal></expr></argument>, <argument pos:start="91:52" pos:end="91:73"><expr pos:start="91:52" pos:end="91:73"><name pos:start="91:52" pos:end="91:73"><name pos:start="91:52" pos:end="91:53">st</name><operator pos:start="91:54" pos:end="91:55">-&gt;</operator><name pos:start="91:56" pos:end="91:60">codec</name><operator pos:start="91:61" pos:end="91:62">-&gt;</operator><name pos:start="91:63" pos:end="91:73">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <switch pos:start="95:21" pos:end="131:21">switch <condition pos:start="95:28" pos:end="95:39">(<expr pos:start="95:29" pos:end="95:38"><name pos:start="95:29" pos:end="95:38">chunk_type</name></expr>)</condition> <block pos:start="95:41" pos:end="131:21">{<block_content pos:start="97:21" pos:end="129:30">

                    <case pos:start="97:21" pos:end="97:34">case <expr pos:start="97:26" pos:end="97:33"><name pos:start="97:26" pos:end="97:33">SND0_TAG</name></expr>:</case>

                        <if_stmt pos:start="99:25" pos:end="105:69"><if pos:start="99:25" pos:end="101:72">if <condition pos:start="99:28" pos:end="99:45">(<expr pos:start="99:29" pos:end="99:44"><name pos:start="99:29" pos:end="99:38"><name pos:start="99:29" pos:end="99:33">wsvqa</name><operator pos:start="99:34" pos:end="99:35">-&gt;</operator><name pos:start="99:36" pos:end="99:38">bps</name></name> <operator pos:start="99:40" pos:end="99:41">==</operator> <literal type="number" pos:start="99:43" pos:end="99:44">16</literal></expr>)</condition><block type="pseudo" pos:start="101:29" pos:end="101:72"><block_content pos:start="101:29" pos:end="101:72">

                            <expr_stmt pos:start="101:29" pos:end="101:72"><expr pos:start="101:29" pos:end="101:71"><name pos:start="101:29" pos:end="101:47"><name pos:start="101:29" pos:end="101:30">st</name><operator pos:start="101:31" pos:end="101:32">-&gt;</operator><name pos:start="101:33" pos:end="101:37">codec</name><operator pos:start="101:38" pos:end="101:39">-&gt;</operator><name pos:start="101:40" pos:end="101:47">codec_id</name></name> <operator pos:start="101:49" pos:end="101:49">=</operator> <name pos:start="101:51" pos:end="101:71">AV_CODEC_ID_PCM_S16LE</name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="103:25" pos:end="105:69">else<block type="pseudo" pos:start="105:29" pos:end="105:69"><block_content pos:start="105:29" pos:end="105:69">

                            <expr_stmt pos:start="105:29" pos:end="105:69"><expr pos:start="105:29" pos:end="105:68"><name pos:start="105:29" pos:end="105:47"><name pos:start="105:29" pos:end="105:30">st</name><operator pos:start="105:31" pos:end="105:32">-&gt;</operator><name pos:start="105:33" pos:end="105:37">codec</name><operator pos:start="105:38" pos:end="105:39">-&gt;</operator><name pos:start="105:40" pos:end="105:47">codec_id</name></name> <operator pos:start="105:49" pos:end="105:49">=</operator> <name pos:start="105:51" pos:end="105:68">AV_CODEC_ID_PCM_U8</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <break pos:start="107:25" pos:end="107:30">break;</break>

                    <case pos:start="109:21" pos:end="109:34">case <expr pos:start="109:26" pos:end="109:33"><name pos:start="109:26" pos:end="109:33">SND1_TAG</name></expr>:</case>

                        <expr_stmt pos:start="111:25" pos:end="111:72"><expr pos:start="111:25" pos:end="111:71"><name pos:start="111:25" pos:end="111:43"><name pos:start="111:25" pos:end="111:26">st</name><operator pos:start="111:27" pos:end="111:28">-&gt;</operator><name pos:start="111:29" pos:end="111:33">codec</name><operator pos:start="111:34" pos:end="111:35">-&gt;</operator><name pos:start="111:36" pos:end="111:43">codec_id</name></name> <operator pos:start="111:45" pos:end="111:45">=</operator> <name pos:start="111:47" pos:end="111:71">AV_CODEC_ID_WESTWOOD_SND1</name></expr>;</expr_stmt>

                        <break pos:start="113:25" pos:end="113:30">break;</break>

                    <case pos:start="115:21" pos:end="115:34">case <expr pos:start="115:26" pos:end="115:33"><name pos:start="115:26" pos:end="115:33">SND2_TAG</name></expr>:</case>

                        <expr_stmt pos:start="117:25" pos:end="117:71"><expr pos:start="117:25" pos:end="117:70"><name pos:start="117:25" pos:end="117:43"><name pos:start="117:25" pos:end="117:26">st</name><operator pos:start="117:27" pos:end="117:28">-&gt;</operator><name pos:start="117:29" pos:end="117:33">codec</name><operator pos:start="117:34" pos:end="117:35">-&gt;</operator><name pos:start="117:36" pos:end="117:43">codec_id</name></name> <operator pos:start="117:45" pos:end="117:45">=</operator> <name pos:start="117:47" pos:end="117:70">AV_CODEC_ID_ADPCM_IMA_WS</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="119:25" pos:end="119:54"><expr pos:start="119:25" pos:end="119:53"><name pos:start="119:25" pos:end="119:49"><name pos:start="119:25" pos:end="119:26">st</name><operator pos:start="119:27" pos:end="119:28">-&gt;</operator><name pos:start="119:29" pos:end="119:33">codec</name><operator pos:start="119:34" pos:end="119:35">-&gt;</operator><name pos:start="119:36" pos:end="119:49">extradata_size</name></name> <operator pos:start="119:51" pos:end="119:51">=</operator> <literal type="number" pos:start="119:53" pos:end="119:53">2</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="121:25" pos:end="121:92"><expr pos:start="121:25" pos:end="121:91"><name pos:start="121:25" pos:end="121:44"><name pos:start="121:25" pos:end="121:26">st</name><operator pos:start="121:27" pos:end="121:28">-&gt;</operator><name pos:start="121:29" pos:end="121:33">codec</name><operator pos:start="121:34" pos:end="121:35">-&gt;</operator><name pos:start="121:36" pos:end="121:44">extradata</name></name> <operator pos:start="121:46" pos:end="121:46">=</operator> <call pos:start="121:48" pos:end="121:91"><name pos:start="121:48" pos:end="121:57">av_mallocz</name><argument_list pos:start="121:58" pos:end="121:91">(<argument pos:start="121:59" pos:end="121:90"><expr pos:start="121:59" pos:end="121:90"><literal type="number" pos:start="121:59" pos:end="121:61">2</literal> <operator pos:start="121:61" pos:end="121:61">+</operator> <name pos:start="121:63" pos:end="121:90">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="123:25" pos:end="125:51"><if pos:start="123:25" pos:end="125:51">if <condition pos:start="123:28" pos:end="123:50">(<expr pos:start="123:29" pos:end="123:49"><operator pos:start="123:29" pos:end="123:29">!</operator><name pos:start="123:30" pos:end="123:49"><name pos:start="123:30" pos:end="123:31">st</name><operator pos:start="123:32" pos:end="123:33">-&gt;</operator><name pos:start="123:34" pos:end="123:38">codec</name><operator pos:start="123:39" pos:end="123:40">-&gt;</operator><name pos:start="123:41" pos:end="123:49">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="125:29" pos:end="125:51"><block_content pos:start="125:29" pos:end="125:51">

                            <return pos:start="125:29" pos:end="125:51">return <expr pos:start="125:36" pos:end="125:50"><call pos:start="125:36" pos:end="125:50"><name pos:start="125:36" pos:end="125:42">AVERROR</name><argument_list pos:start="125:43" pos:end="125:50">(<argument pos:start="125:44" pos:end="125:49"><expr pos:start="125:44" pos:end="125:49"><name pos:start="125:44" pos:end="125:49">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="127:25" pos:end="127:70"><expr pos:start="127:25" pos:end="127:69"><call pos:start="127:25" pos:end="127:69"><name pos:start="127:25" pos:end="127:31">AV_WL16</name><argument_list pos:start="127:32" pos:end="127:69">(<argument pos:start="127:33" pos:end="127:52"><expr pos:start="127:33" pos:end="127:52"><name pos:start="127:33" pos:end="127:52"><name pos:start="127:33" pos:end="127:34">st</name><operator pos:start="127:35" pos:end="127:36">-&gt;</operator><name pos:start="127:37" pos:end="127:41">codec</name><operator pos:start="127:42" pos:end="127:43">-&gt;</operator><name pos:start="127:44" pos:end="127:52">extradata</name></name></expr></argument>, <argument pos:start="127:55" pos:end="127:68"><expr pos:start="127:55" pos:end="127:68"><name pos:start="127:55" pos:end="127:68"><name pos:start="127:55" pos:end="127:59">wsvqa</name><operator pos:start="127:60" pos:end="127:61">-&gt;</operator><name pos:start="127:62" pos:end="127:68">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="129:25" pos:end="129:30">break;</break>

                    </block_content>}</block></switch>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="137:17" pos:end="137:62"><expr pos:start="137:17" pos:end="137:61"><name pos:start="137:17" pos:end="137:33"><name pos:start="137:17" pos:end="137:19">pkt</name><operator pos:start="137:20" pos:end="137:21">-&gt;</operator><name pos:start="137:22" pos:end="137:33">stream_index</name></name> <operator pos:start="137:35" pos:end="137:35">=</operator> <name pos:start="137:37" pos:end="137:61"><name pos:start="137:37" pos:end="137:41">wsvqa</name><operator pos:start="137:42" pos:end="137:43">-&gt;</operator><name pos:start="137:44" pos:end="137:61">audio_stream_index</name></name></expr>;</expr_stmt>

                <switch pos:start="139:17" pos:end="157:17">switch <condition pos:start="139:24" pos:end="139:35">(<expr pos:start="139:25" pos:end="139:34"><name pos:start="139:25" pos:end="139:34">chunk_type</name></expr>)</condition> <block pos:start="139:37" pos:end="157:17">{<block_content pos:start="141:17" pos:end="155:26">

                <case pos:start="141:17" pos:end="141:30">case <expr pos:start="141:22" pos:end="141:29"><name pos:start="141:22" pos:end="141:29">SND1_TAG</name></expr>:</case>

                    <comment type="block" pos:start="143:21" pos:end="143:59">/* unpacked size is stored in header */</comment>

                    <expr_stmt pos:start="145:21" pos:end="145:73"><expr pos:start="145:21" pos:end="145:72"><name pos:start="145:21" pos:end="145:33"><name pos:start="145:21" pos:end="145:23">pkt</name><operator pos:start="145:24" pos:end="145:25">-&gt;</operator><name pos:start="145:26" pos:end="145:33">duration</name></name> <operator pos:start="145:35" pos:end="145:35">=</operator> <call pos:start="145:37" pos:end="145:54"><name pos:start="145:37" pos:end="145:43">AV_RL16</name><argument_list pos:start="145:44" pos:end="145:54">(<argument pos:start="145:45" pos:end="145:53"><expr pos:start="145:45" pos:end="145:53"><name pos:start="145:45" pos:end="145:53"><name pos:start="145:45" pos:end="145:47">pkt</name><operator pos:start="145:48" pos:end="145:49">-&gt;</operator><name pos:start="145:50" pos:end="145:53">data</name></name></expr></argument>)</argument_list></call> <operator pos:start="145:56" pos:end="145:56">/</operator> <name pos:start="145:58" pos:end="145:72"><name pos:start="145:58" pos:end="145:62">wsvqa</name><operator pos:start="145:63" pos:end="145:64">-&gt;</operator><name pos:start="145:65" pos:end="145:72">channels</name></name></expr>;</expr_stmt>

                    <break pos:start="147:21" pos:end="147:26">break;</break>

                <case pos:start="149:17" pos:end="149:30">case <expr pos:start="149:22" pos:end="149:29"><name pos:start="149:22" pos:end="149:29">SND2_TAG</name></expr>:</case>

                    <comment type="block" pos:start="151:21" pos:end="151:86">/* 2 samples/byte, 1 or 2 samples per frame depending on stereo */</comment>

                    <expr_stmt pos:start="153:21" pos:end="153:71"><expr pos:start="153:21" pos:end="153:70"><name pos:start="153:21" pos:end="153:33"><name pos:start="153:21" pos:end="153:23">pkt</name><operator pos:start="153:24" pos:end="153:25">-&gt;</operator><name pos:start="153:26" pos:end="153:33">duration</name></name> <operator pos:start="153:35" pos:end="153:35">=</operator> <operator pos:start="153:37" pos:end="153:37">(</operator><name pos:start="153:38" pos:end="153:47">chunk_size</name> <operator pos:start="153:49" pos:end="153:49">*</operator> <literal type="number" pos:start="153:51" pos:end="153:51">2</literal><operator pos:start="153:52" pos:end="153:52">)</operator> <operator pos:start="153:54" pos:end="153:54">/</operator> <name pos:start="153:56" pos:end="153:70"><name pos:start="153:56" pos:end="153:60">wsvqa</name><operator pos:start="153:61" pos:end="153:62">-&gt;</operator><name pos:start="153:63" pos:end="153:70">channels</name></name></expr>;</expr_stmt>

                    <break pos:start="155:21" pos:end="155:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="159:17" pos:end="159:22">break;</break>

            <case pos:start="161:13" pos:end="161:26">case <expr pos:start="161:18" pos:end="161:25"><name pos:start="161:18" pos:end="161:25">VQFR_TAG</name></expr>:</case>

                <expr_stmt pos:start="163:17" pos:end="163:62"><expr pos:start="163:17" pos:end="163:61"><name pos:start="163:17" pos:end="163:33"><name pos:start="163:17" pos:end="163:19">pkt</name><operator pos:start="163:20" pos:end="163:21">-&gt;</operator><name pos:start="163:22" pos:end="163:33">stream_index</name></name> <operator pos:start="163:35" pos:end="163:35">=</operator> <name pos:start="163:37" pos:end="163:61"><name pos:start="163:37" pos:end="163:41">wsvqa</name><operator pos:start="163:42" pos:end="163:43">-&gt;</operator><name pos:start="163:44" pos:end="163:61">video_stream_index</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="165:17" pos:end="165:34"><expr pos:start="165:17" pos:end="165:33"><name pos:start="165:17" pos:end="165:29"><name pos:start="165:17" pos:end="165:19">pkt</name><operator pos:start="165:20" pos:end="165:21">-&gt;</operator><name pos:start="165:22" pos:end="165:29">duration</name></name> <operator pos:start="165:31" pos:end="165:31">=</operator> <literal type="number" pos:start="165:33" pos:end="165:33">1</literal></expr>;</expr_stmt>

                <break pos:start="167:17" pos:end="167:22">break;</break>

            </block_content>}</block></switch>



            <comment type="block" pos:start="173:13" pos:end="173:42">/* stay on 16-bit alignment */</comment>

            <if_stmt pos:start="175:13" pos:end="177:33"><if pos:start="175:13" pos:end="177:33">if <condition pos:start="175:16" pos:end="175:26">(<expr pos:start="175:17" pos:end="175:25"><name pos:start="175:17" pos:end="175:25">skip_byte</name></expr>)</condition><block type="pseudo" pos:start="177:17" pos:end="177:33"><block_content pos:start="177:17" pos:end="177:33">

                <expr_stmt pos:start="177:17" pos:end="177:33"><expr pos:start="177:17" pos:end="177:32"><call pos:start="177:17" pos:end="177:32"><name pos:start="177:17" pos:end="177:25">avio_skip</name><argument_list pos:start="177:26" pos:end="177:32">(<argument pos:start="177:27" pos:end="177:28"><expr pos:start="177:27" pos:end="177:28"><name pos:start="177:27" pos:end="177:28">pb</name></expr></argument>, <argument pos:start="177:31" pos:end="177:31"><expr pos:start="177:31" pos:end="177:31"><literal type="number" pos:start="177:31" pos:end="177:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <return pos:start="181:13" pos:end="181:23">return <expr pos:start="181:20" pos:end="181:22"><name pos:start="181:20" pos:end="181:22">ret</name></expr>;</return>

        </block_content>}</block></if> <else pos:start="183:11" pos:end="199:9">else <block pos:start="183:16" pos:end="199:9">{<block_content pos:start="185:13" pos:end="197:50">

            <switch pos:start="185:13" pos:end="195:13">switch<condition pos:start="185:19" pos:end="185:30">(<expr pos:start="185:20" pos:end="185:29"><name pos:start="185:20" pos:end="185:29">chunk_type</name></expr>)</condition><block pos:start="185:31" pos:end="195:13">{<block_content pos:start="187:13" pos:end="193:86">

            <case pos:start="187:13" pos:end="187:26">case <expr pos:start="187:18" pos:end="187:25"><name pos:start="187:18" pos:end="187:25">CMDS_TAG</name></expr>:</case>

                <break pos:start="189:17" pos:end="189:22">break;</break>

            <default pos:start="191:13" pos:end="191:20">default:</default>

                <expr_stmt pos:start="193:17" pos:end="193:86"><expr pos:start="193:17" pos:end="193:85"><call pos:start="193:17" pos:end="193:85"><name pos:start="193:17" pos:end="193:22">av_log</name><argument_list pos:start="193:23" pos:end="193:85">(<argument pos:start="193:24" pos:end="193:24"><expr pos:start="193:24" pos:end="193:24"><name pos:start="193:24" pos:end="193:24">s</name></expr></argument>, <argument pos:start="193:27" pos:end="193:37"><expr pos:start="193:27" pos:end="193:37"><name pos:start="193:27" pos:end="193:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="193:40" pos:end="193:72"><expr pos:start="193:40" pos:end="193:72"><literal type="string" pos:start="193:40" pos:end="193:72">"Skipping unknown chunk 0x%08X\n"</literal></expr></argument>, <argument pos:start="193:75" pos:end="193:84"><expr pos:start="193:75" pos:end="193:84"><name pos:start="193:75" pos:end="193:84">chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <expr_stmt pos:start="197:13" pos:end="197:50"><expr pos:start="197:13" pos:end="197:49"><call pos:start="197:13" pos:end="197:49"><name pos:start="197:13" pos:end="197:21">avio_skip</name><argument_list pos:start="197:22" pos:end="197:49">(<argument pos:start="197:23" pos:end="197:24"><expr pos:start="197:23" pos:end="197:24"><name pos:start="197:23" pos:end="197:24">pb</name></expr></argument>, <argument pos:start="197:27" pos:end="197:48"><expr pos:start="197:27" pos:end="197:48"><name pos:start="197:27" pos:end="197:36">chunk_size</name> <operator pos:start="197:38" pos:end="197:38">+</operator> <name pos:start="197:40" pos:end="197:48">skip_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <return pos:start="205:5" pos:end="205:15">return <expr pos:start="205:12" pos:end="205:14"><name pos:start="205:12" pos:end="205:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
