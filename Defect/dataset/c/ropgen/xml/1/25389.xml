<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25389.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">host_pci_config_read</name><parameter_list pos:start="1:32" pos:end="1:63">(<parameter pos:start="1:33" pos:end="1:39"><decl pos:start="1:33" pos:end="1:39"><type pos:start="1:33" pos:end="1:39"><name pos:start="1:33" pos:end="1:35">int</name></type> <name pos:start="1:37" pos:end="1:39">pos</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:48"><decl pos:start="1:42" pos:end="1:48"><type pos:start="1:42" pos:end="1:48"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:48">len</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:58">uint32_t</name></type> <name pos:start="1:60" pos:end="1:62">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:13">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:23"><name pos:start="5:10" pos:end="5:13">path</name><index pos:start="5:14" pos:end="5:23">[<expr pos:start="5:15" pos:end="5:22"><name pos:start="5:15" pos:end="5:22">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">config_fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">ssize_t</name></type> <name pos:start="9:13" pos:end="9:16">size</name> <init pos:start="9:18" pos:end="9:31">= <expr pos:start="9:20" pos:end="9:31"><sizeof pos:start="9:20" pos:end="9:31">sizeof<argument_list pos:start="9:26" pos:end="9:31">(<argument pos:start="9:27" pos:end="9:30"><expr pos:start="9:27" pos:end="9:30"><name pos:start="9:27" pos:end="9:30">path</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="11:5" pos:end="11:34">/* Access real host bridge. */</comment>

    <decl_stmt pos:start="13:5" pos:end="15:44"><decl pos:start="13:5" pos:end="15:43"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:10">rc</name> <init pos:start="13:12" pos:end="15:43">= <expr pos:start="13:14" pos:end="15:43"><call pos:start="13:14" pos:end="15:43"><name pos:start="13:14" pos:end="13:21">snprintf</name><argument_list pos:start="13:22" pos:end="15:43">(<argument pos:start="13:23" pos:end="13:26"><expr pos:start="13:23" pos:end="13:26"><name pos:start="13:23" pos:end="13:26">path</name></expr></argument>, <argument pos:start="13:29" pos:end="13:32"><expr pos:start="13:29" pos:end="13:32"><name pos:start="13:29" pos:end="13:32">size</name></expr></argument>, <argument pos:start="13:35" pos:end="13:77"><expr pos:start="13:35" pos:end="13:77"><literal type="string" pos:start="13:35" pos:end="13:77">"/sys/bus/pci/devices/%04x:%02x:%02x.%d/%s"</literal></expr></argument>,

                      <argument pos:start="15:23" pos:end="15:23"><expr pos:start="15:23" pos:end="15:23"><literal type="number" pos:start="15:23" pos:end="15:23">0</literal></expr></argument>, <argument pos:start="15:26" pos:end="15:26"><expr pos:start="15:26" pos:end="15:26"><literal type="number" pos:start="15:26" pos:end="15:26">0</literal></expr></argument>, <argument pos:start="15:29" pos:end="15:29"><expr pos:start="15:29" pos:end="15:29"><literal type="number" pos:start="15:29" pos:end="15:29">0</literal></expr></argument>, <argument pos:start="15:32" pos:end="15:32"><expr pos:start="15:32" pos:end="15:32"><literal type="number" pos:start="15:32" pos:end="15:32">0</literal></expr></argument>, <argument pos:start="15:35" pos:end="15:42"><expr pos:start="15:35" pos:end="15:42"><literal type="string" pos:start="15:35" pos:end="15:42">"config"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:29">(<expr pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:10">rc</name> <operator pos:start="19:12" pos:end="19:13">&gt;=</operator> <name pos:start="19:15" pos:end="19:18">size</name> <operator pos:start="19:20" pos:end="19:21">||</operator> <name pos:start="19:23" pos:end="19:24">rc</name> <operator pos:start="19:26" pos:end="19:26">&lt;</operator> <literal type="number" pos:start="19:28" pos:end="19:28">0</literal></expr>)</condition> <block pos:start="19:31" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:23">

        <return pos:start="21:9" pos:end="21:23">return <expr pos:start="21:16" pos:end="21:22"><operator pos:start="21:16" pos:end="21:16">-</operator><name pos:start="21:17" pos:end="21:22">ENODEV</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:35"><expr pos:start="27:5" pos:end="27:34"><name pos:start="27:5" pos:end="27:13">config_fd</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:34"><name pos:start="27:17" pos:end="27:20">open</name><argument_list pos:start="27:21" pos:end="27:34">(<argument pos:start="27:22" pos:end="27:25"><expr pos:start="27:22" pos:end="27:25"><name pos:start="27:22" pos:end="27:25">path</name></expr></argument>, <argument pos:start="27:28" pos:end="27:33"><expr pos:start="27:28" pos:end="27:33"><name pos:start="27:28" pos:end="27:33">O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:22">(<expr pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:17">config_fd</name> <operator pos:start="29:19" pos:end="29:19">&lt;</operator> <literal type="number" pos:start="29:21" pos:end="29:21">0</literal></expr>)</condition> <block pos:start="29:24" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:23">

        <return pos:start="31:9" pos:end="31:23">return <expr pos:start="31:16" pos:end="31:22"><operator pos:start="31:16" pos:end="31:16">-</operator><name pos:start="31:17" pos:end="31:22">ENODEV</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:47">(<expr pos:start="37:9" pos:end="37:46"><call pos:start="37:9" pos:end="37:39"><name pos:start="37:9" pos:end="37:13">lseek</name><argument_list pos:start="37:14" pos:end="37:39">(<argument pos:start="37:15" pos:end="37:23"><expr pos:start="37:15" pos:end="37:23"><name pos:start="37:15" pos:end="37:23">config_fd</name></expr></argument>, <argument pos:start="37:26" pos:end="37:28"><expr pos:start="37:26" pos:end="37:28"><name pos:start="37:26" pos:end="37:28">pos</name></expr></argument>, <argument pos:start="37:31" pos:end="37:38"><expr pos:start="37:31" pos:end="37:38"><name pos:start="37:31" pos:end="37:38">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="37:41" pos:end="37:42">!=</operator> <name pos:start="37:44" pos:end="37:46">pos</name></expr>)</condition> <block pos:start="37:49" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:22">

        <return pos:start="39:9" pos:end="39:22">return <expr pos:start="39:16" pos:end="39:21"><operator pos:start="39:16" pos:end="39:16">-</operator><name pos:start="39:17" pos:end="39:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <do pos:start="43:5" pos:end="47:60">do <block pos:start="43:8" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:51">

        <expr_stmt pos:start="45:9" pos:end="45:51"><expr pos:start="45:9" pos:end="45:50"><name pos:start="45:9" pos:end="45:10">rc</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <call pos:start="45:14" pos:end="45:50"><name pos:start="45:14" pos:end="45:17">read</name><argument_list pos:start="45:18" pos:end="45:50">(<argument pos:start="45:19" pos:end="45:27"><expr pos:start="45:19" pos:end="45:27"><name pos:start="45:19" pos:end="45:27">config_fd</name></expr></argument>, <argument pos:start="45:30" pos:end="45:44"><expr pos:start="45:30" pos:end="45:44"><operator pos:start="45:30" pos:end="45:30">(</operator><name pos:start="45:31" pos:end="45:37">uint8_t</name> <operator pos:start="45:39" pos:end="45:39">*</operator><operator pos:start="45:40" pos:end="45:40">)</operator><operator pos:start="45:41" pos:end="45:41">&amp;</operator><name pos:start="45:42" pos:end="45:44">val</name></expr></argument>, <argument pos:start="45:47" pos:end="45:49"><expr pos:start="45:47" pos:end="45:49"><name pos:start="45:47" pos:end="45:49">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="47:13" pos:end="47:59">(<expr pos:start="47:14" pos:end="47:58"><name pos:start="47:14" pos:end="47:15">rc</name> <operator pos:start="47:17" pos:end="47:17">&lt;</operator> <literal type="number" pos:start="47:19" pos:end="47:19">0</literal> <operator pos:start="47:21" pos:end="47:22">&amp;&amp;</operator> <operator pos:start="47:24" pos:end="47:24">(</operator><name pos:start="47:25" pos:end="47:29">errno</name> <operator pos:start="47:31" pos:end="47:32">==</operator> <name pos:start="47:34" pos:end="47:38">EINTR</name> <operator pos:start="47:40" pos:end="47:41">||</operator> <name pos:start="47:43" pos:end="47:47">errno</name> <operator pos:start="47:49" pos:end="47:50">==</operator> <name pos:start="47:52" pos:end="47:57">EAGAIN</name><operator pos:start="47:58" pos:end="47:58">)</operator></expr>)</condition>;</do>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:18">(<expr pos:start="49:9" pos:end="49:17"><name pos:start="49:9" pos:end="49:10">rc</name> <operator pos:start="49:12" pos:end="49:13">!=</operator> <name pos:start="49:15" pos:end="49:17">len</name></expr>)</condition> <block pos:start="49:20" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:22">

        <return pos:start="51:9" pos:end="51:22">return <expr pos:start="51:16" pos:end="51:21"><operator pos:start="51:16" pos:end="51:16">-</operator><name pos:start="51:17" pos:end="51:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="57:5" pos:end="57:13">return <expr pos:start="57:12" pos:end="57:12"><literal type="number" pos:start="57:12" pos:end="57:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
