<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2308.c" pos:tabs="8"><function pos:start="1:1" pos:end="409:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">ppc_spapr_init</name><parameter_list pos:start="1:27" pos:end="11:49">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:46"><name pos:start="1:28" pos:end="1:37">ram_addr_t</name></type> <name pos:start="1:39" pos:end="1:46">ram_size</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:50"><decl pos:start="3:28" pos:end="3:50"><type pos:start="3:28" pos:end="3:50"><specifier pos:start="3:28" pos:end="3:32">const</specifier> <name pos:start="3:34" pos:end="3:37">char</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:50">boot_device</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:54"><decl pos:start="5:28" pos:end="5:54"><type pos:start="5:28" pos:end="5:54"><specifier pos:start="5:28" pos:end="5:32">const</specifier> <name pos:start="5:34" pos:end="5:37">char</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:54">kernel_filename</name></decl></parameter>,

                           <parameter pos:start="7:28" pos:end="7:53"><decl pos:start="7:28" pos:end="7:53"><type pos:start="7:28" pos:end="7:53"><specifier pos:start="7:28" pos:end="7:32">const</specifier> <name pos:start="7:34" pos:end="7:37">char</name> <modifier pos:start="7:39" pos:end="7:39">*</modifier></type><name pos:start="7:40" pos:end="7:53">kernel_cmdline</name></decl></parameter>,

                           <parameter pos:start="9:28" pos:end="9:54"><decl pos:start="9:28" pos:end="9:54"><type pos:start="9:28" pos:end="9:54"><specifier pos:start="9:28" pos:end="9:32">const</specifier> <name pos:start="9:34" pos:end="9:37">char</name> <modifier pos:start="9:39" pos:end="9:39">*</modifier></type><name pos:start="9:40" pos:end="9:54">initrd_filename</name></decl></parameter>,

                           <parameter pos:start="11:28" pos:end="11:48"><decl pos:start="11:28" pos:end="11:48"><type pos:start="11:28" pos:end="11:48"><specifier pos:start="11:28" pos:end="11:32">const</specifier> <name pos:start="11:34" pos:end="11:37">char</name> <modifier pos:start="11:39" pos:end="11:39">*</modifier></type><name pos:start="11:40" pos:end="11:48">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="409:1">{<block_content pos:start="15:5" pos:end="407:44">

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:47"><decl pos:start="19:5" pos:end="19:46"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:24">sysmem</name> <init pos:start="19:26" pos:end="19:46">= <expr pos:start="19:28" pos:end="19:46"><call pos:start="19:28" pos:end="19:46"><name pos:start="19:28" pos:end="19:44">get_system_memory</name><argument_list pos:start="19:45" pos:end="19:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:47"><decl pos:start="21:5" pos:end="21:46"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:21">ram</name> <init pos:start="21:23" pos:end="21:46">= <expr pos:start="21:25" pos:end="21:46"><call pos:start="21:25" pos:end="21:46"><name pos:start="21:25" pos:end="21:29">g_new</name><argument_list pos:start="21:30" pos:end="21:46">(<argument pos:start="21:31" pos:end="21:42"><expr pos:start="21:31" pos:end="21:42"><name pos:start="21:31" pos:end="21:42">MemoryRegion</name></expr></argument>, <argument pos:start="21:45" pos:end="21:45"><expr pos:start="21:45" pos:end="21:45"><literal type="number" pos:start="21:45" pos:end="21:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:48"><decl pos:start="23:5" pos:end="23:37"><type pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:22">target_phys_addr_t</name></type> <name pos:start="23:24" pos:end="23:37">rma_alloc_size</name></decl>, <decl pos:start="23:40" pos:end="23:47"><type ref="prev" pos:start="23:5" pos:end="23:22"/><name pos:start="23:40" pos:end="23:47">rma_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:25"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint32_t</name></type> <name pos:start="25:14" pos:end="25:24">initrd_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:43"><decl pos:start="27:5" pos:end="27:20"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">long</name></type> <name pos:start="27:10" pos:end="27:20">kernel_size</name></decl>, <decl pos:start="27:23" pos:end="27:33"><type ref="prev" pos:start="27:5" pos:end="27:8"/><name pos:start="27:23" pos:end="27:33">initrd_size</name></decl>, <decl pos:start="27:36" pos:end="27:42"><type ref="prev" pos:start="27:5" pos:end="27:8"/><name pos:start="27:36" pos:end="27:42">fw_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:25"><decl pos:start="29:5" pos:end="29:24"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">long</name></type> <name pos:start="29:10" pos:end="29:19">pteg_shift</name> <init pos:start="29:21" pos:end="29:24">= <expr pos:start="29:23" pos:end="29:24"><literal type="number" pos:start="29:23" pos:end="29:24">17</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:19"><decl pos:start="31:5" pos:end="31:18"><type pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:8">char</name> <modifier pos:start="31:10" pos:end="31:10">*</modifier></type><name pos:start="31:11" pos:end="31:18">filename</name></decl>;</decl_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:38"><expr pos:start="35:5" pos:end="35:37"><name pos:start="35:5" pos:end="35:9">spapr</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <call pos:start="35:13" pos:end="35:37"><name pos:start="35:13" pos:end="35:21">g_malloc0</name><argument_list pos:start="35:22" pos:end="35:37">(<argument pos:start="35:23" pos:end="35:36"><expr pos:start="35:23" pos:end="35:36"><sizeof pos:start="35:23" pos:end="35:36">sizeof<argument_list pos:start="35:29" pos:end="35:36">(<argument pos:start="35:30" pos:end="35:35"><expr pos:start="35:30" pos:end="35:35"><operator pos:start="35:30" pos:end="35:30">*</operator><name pos:start="35:31" pos:end="35:35">spapr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><call pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:14">QLIST_INIT</name><argument_list pos:start="37:15" pos:end="37:28">(<argument pos:start="37:16" pos:end="37:27"><expr pos:start="37:16" pos:end="37:27"><operator pos:start="37:16" pos:end="37:16">&amp;</operator><name pos:start="37:17" pos:end="37:27"><name pos:start="37:17" pos:end="37:21">spapr</name><operator pos:start="37:22" pos:end="37:23">-&gt;</operator><name pos:start="37:24" pos:end="37:27">phbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:48"><expr pos:start="41:5" pos:end="41:47"><name pos:start="41:5" pos:end="41:21">cpu_ppc_hypercall</name> <operator pos:start="41:23" pos:end="41:23">=</operator> <name pos:start="41:25" pos:end="41:47">emulate_spapr_hypercall</name></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:35">/* Allocate RMA if necessary */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:63"><expr pos:start="47:5" pos:end="47:62"><name pos:start="47:5" pos:end="47:18">rma_alloc_size</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <call pos:start="47:22" pos:end="47:62"><name pos:start="47:22" pos:end="47:37">kvmppc_alloc_rma</name><argument_list pos:start="47:38" pos:end="47:62">(<argument pos:start="47:39" pos:end="47:53"><expr pos:start="47:39" pos:end="47:53"><literal type="string" pos:start="47:39" pos:end="47:53">"ppc_spapr.rma"</literal></expr></argument>, <argument pos:start="47:56" pos:end="47:61"><expr pos:start="47:56" pos:end="47:61"><name pos:start="47:56" pos:end="47:61">sysmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:29">(<expr pos:start="51:9" pos:end="51:28"><name pos:start="51:9" pos:end="51:22">rma_alloc_size</name> <operator pos:start="51:24" pos:end="51:25">==</operator> <operator pos:start="51:27" pos:end="51:27">-</operator><literal type="number" pos:start="51:28" pos:end="51:28">1</literal></expr>)</condition> <block pos:start="51:31" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:16">

        <expr_stmt pos:start="53:9" pos:end="53:49"><expr pos:start="53:9" pos:end="53:48"><call pos:start="53:9" pos:end="53:48"><name pos:start="53:9" pos:end="53:16">hw_error</name><argument_list pos:start="53:17" pos:end="53:48">(<argument pos:start="53:18" pos:end="53:47"><expr pos:start="53:18" pos:end="53:47"><literal type="string" pos:start="53:18" pos:end="53:47">"qemu: Unable to create RMA\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:16"><expr pos:start="55:9" pos:end="55:15"><call pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:12">exit</name><argument_list pos:start="55:13" pos:end="55:15">(<argument pos:start="55:14" pos:end="55:14"><expr pos:start="55:14" pos:end="55:14"><literal type="number" pos:start="55:14" pos:end="55:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:54">(<expr pos:start="59:9" pos:end="59:53"><name pos:start="59:9" pos:end="59:22">rma_alloc_size</name> <operator pos:start="59:24" pos:end="59:25">&amp;&amp;</operator> <operator pos:start="59:27" pos:end="59:27">(</operator><name pos:start="59:28" pos:end="59:41">rma_alloc_size</name> <operator pos:start="59:43" pos:end="59:43">&lt;</operator> <name pos:start="59:45" pos:end="59:52">ram_size</name><operator pos:start="59:53" pos:end="59:53">)</operator></expr>)</condition> <block pos:start="59:56" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:34">

        <expr_stmt pos:start="61:9" pos:end="61:34"><expr pos:start="61:9" pos:end="61:33"><name pos:start="61:9" pos:end="61:16">rma_size</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <name pos:start="61:20" pos:end="61:33">rma_alloc_size</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="67:5">else <block pos:start="63:12" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:28">

        <expr_stmt pos:start="65:9" pos:end="65:28"><expr pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:16">rma_size</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:27">ram_size</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="75:59">/* We place the device tree just below either the top of the RMA,

     * or just below 2GB, whichever is lowere, so that it can be

     * processed with 32-bit real mode code if necessary */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:63"><expr pos:start="77:5" pos:end="77:62"><name pos:start="77:5" pos:end="77:19"><name pos:start="77:5" pos:end="77:9">spapr</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:19">fdt_addr</name></name> <operator pos:start="77:21" pos:end="77:21">=</operator> <call pos:start="77:23" pos:end="77:47"><name pos:start="77:23" pos:end="77:25">MIN</name><argument_list pos:start="77:26" pos:end="77:47">(<argument pos:start="77:27" pos:end="77:34"><expr pos:start="77:27" pos:end="77:34"><name pos:start="77:27" pos:end="77:34">rma_size</name></expr></argument>, <argument pos:start="77:37" pos:end="77:46"><expr pos:start="77:37" pos:end="77:46"><literal type="number" pos:start="77:37" pos:end="77:46">0x80000000</literal></expr></argument>)</argument_list></call> <operator pos:start="77:49" pos:end="77:49">-</operator> <name pos:start="77:51" pos:end="77:62">FDT_MAX_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:55"><expr pos:start="79:5" pos:end="79:54"><name pos:start="79:5" pos:end="79:20"><name pos:start="79:5" pos:end="79:9">spapr</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:20">rtas_addr</name></name> <operator pos:start="79:22" pos:end="79:22">=</operator> <name pos:start="79:24" pos:end="79:38"><name pos:start="79:24" pos:end="79:28">spapr</name><operator pos:start="79:29" pos:end="79:30">-&gt;</operator><name pos:start="79:31" pos:end="79:38">fdt_addr</name></name> <operator pos:start="79:40" pos:end="79:40">-</operator> <name pos:start="79:42" pos:end="79:54">RTAS_MAX_SIZE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:19">/* init CPUs */</comment>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:26">(<expr pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:17">cpu_model</name> <operator pos:start="85:19" pos:end="85:20">==</operator> <name pos:start="85:22" pos:end="85:25">NULL</name></expr>)</condition> <block pos:start="85:28" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:54">

        <expr_stmt pos:start="87:9" pos:end="87:54"><expr pos:start="87:9" pos:end="87:53"><name pos:start="87:9" pos:end="87:17">cpu_model</name> <operator pos:start="87:19" pos:end="87:19">=</operator> <ternary pos:start="87:21" pos:end="87:53"><condition pos:start="87:21" pos:end="87:35"><expr pos:start="87:21" pos:end="87:33"><call pos:start="87:21" pos:end="87:33"><name pos:start="87:21" pos:end="87:31">kvm_enabled</name><argument_list pos:start="87:32" pos:end="87:33">()</argument_list></call></expr> ?</condition><then pos:start="87:37" pos:end="87:42"> <expr pos:start="87:37" pos:end="87:42"><literal type="string" pos:start="87:37" pos:end="87:42">"host"</literal></expr> </then><else pos:start="87:44" pos:end="87:53">: <expr pos:start="87:46" pos:end="87:53"><literal type="string" pos:start="87:46" pos:end="87:53">"POWER7"</literal></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="91:5" pos:end="119:5">for <control pos:start="91:9" pos:end="91:34">(<init pos:start="91:10" pos:end="91:15"><expr pos:start="91:10" pos:end="91:14"><name pos:start="91:10" pos:end="91:10">i</name> <operator pos:start="91:12" pos:end="91:12">=</operator> <literal type="number" pos:start="91:14" pos:end="91:14">0</literal></expr>;</init> <condition pos:start="91:17" pos:end="91:29"><expr pos:start="91:17" pos:end="91:28"><name pos:start="91:17" pos:end="91:17">i</name> <operator pos:start="91:19" pos:end="91:19">&lt;</operator> <name pos:start="91:21" pos:end="91:28">smp_cpus</name></expr>;</condition> <incr pos:start="91:31" pos:end="91:33"><expr pos:start="91:31" pos:end="91:33"><name pos:start="91:31" pos:end="91:31">i</name><operator pos:start="91:32" pos:end="91:33">++</operator></expr></incr>)</control> <block pos:start="91:36" pos:end="119:5">{<block_content pos:start="93:9" pos:end="117:37">

        <expr_stmt pos:start="93:9" pos:end="93:34"><expr pos:start="93:9" pos:end="93:33"><name pos:start="93:9" pos:end="93:11">env</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <call pos:start="93:15" pos:end="93:33"><name pos:start="93:15" pos:end="93:22">cpu_init</name><argument_list pos:start="93:23" pos:end="93:33">(<argument pos:start="93:24" pos:end="93:32"><expr pos:start="93:24" pos:end="93:32"><name pos:start="93:24" pos:end="93:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="97:9" pos:end="103:9"><if pos:start="97:9" pos:end="103:9">if <condition pos:start="97:12" pos:end="97:17">(<expr pos:start="97:13" pos:end="97:16"><operator pos:start="97:13" pos:end="97:13">!</operator><name pos:start="97:14" pos:end="97:16">env</name></expr>)</condition> <block pos:start="97:19" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:20">

            <expr_stmt pos:start="99:13" pos:end="99:71"><expr pos:start="99:13" pos:end="99:70"><call pos:start="99:13" pos:end="99:70"><name pos:start="99:13" pos:end="99:19">fprintf</name><argument_list pos:start="99:20" pos:end="99:70">(<argument pos:start="99:21" pos:end="99:26"><expr pos:start="99:21" pos:end="99:26"><name pos:start="99:21" pos:end="99:26">stderr</name></expr></argument>, <argument pos:start="99:29" pos:end="99:69"><expr pos:start="99:29" pos:end="99:69"><literal type="string" pos:start="99:29" pos:end="99:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:20"><expr pos:start="101:13" pos:end="101:19"><call pos:start="101:13" pos:end="101:19"><name pos:start="101:13" pos:end="101:16">exit</name><argument_list pos:start="101:17" pos:end="101:19">(<argument pos:start="101:18" pos:end="101:18"><expr pos:start="101:18" pos:end="101:18"><literal type="number" pos:start="101:18" pos:end="101:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="105:9" pos:end="105:48">/* Set time-base frequency to 512 MHz */</comment>

        <expr_stmt pos:start="107:9" pos:end="107:44"><expr pos:start="107:9" pos:end="107:43"><call pos:start="107:9" pos:end="107:43"><name pos:start="107:9" pos:end="107:23">cpu_ppc_tb_init</name><argument_list pos:start="107:24" pos:end="107:43">(<argument pos:start="107:25" pos:end="107:27"><expr pos:start="107:25" pos:end="107:27"><name pos:start="107:25" pos:end="107:27">env</name></expr></argument>, <argument pos:start="107:30" pos:end="107:42"><expr pos:start="107:30" pos:end="107:42"><name pos:start="107:30" pos:end="107:42">TIMEBASE_FREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:65"><expr pos:start="109:9" pos:end="109:64"><call pos:start="109:9" pos:end="109:64"><name pos:start="109:9" pos:end="109:27">qemu_register_reset</name><argument_list pos:start="109:28" pos:end="109:64">(<argument pos:start="109:29" pos:end="109:58"><expr pos:start="109:29" pos:end="109:58"><operator pos:start="109:29" pos:end="109:29">(</operator><name pos:start="109:30" pos:end="109:45">QEMUResetHandler</name> <operator pos:start="109:47" pos:end="109:47">*</operator><operator pos:start="109:48" pos:end="109:48">)</operator><operator pos:start="109:49" pos:end="109:49">&amp;</operator><name pos:start="109:50" pos:end="109:58">cpu_reset</name></expr></argument>, <argument pos:start="109:61" pos:end="109:63"><expr pos:start="109:61" pos:end="109:63"><name pos:start="109:61" pos:end="109:63">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:34"><expr pos:start="113:9" pos:end="113:33"><name pos:start="113:9" pos:end="113:26"><name pos:start="113:9" pos:end="113:11">env</name><operator pos:start="113:12" pos:end="113:13">-&gt;</operator><name pos:start="113:14" pos:end="113:26">hreset_vector</name></name> <operator pos:start="113:28" pos:end="113:28">=</operator> <literal type="number" pos:start="113:30" pos:end="113:33">0x60</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:36"><expr pos:start="115:9" pos:end="115:35"><name pos:start="115:9" pos:end="115:31"><name pos:start="115:9" pos:end="115:11">env</name><operator pos:start="115:12" pos:end="115:13">-&gt;</operator><name pos:start="115:14" pos:end="115:31">hreset_excp_prefix</name></name> <operator pos:start="115:33" pos:end="115:33">=</operator> <literal type="number" pos:start="115:35" pos:end="115:35">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:37"><expr pos:start="117:9" pos:end="117:36"><name pos:start="117:9" pos:end="117:19"><name pos:start="117:9" pos:end="117:11">env</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:16">gpr</name><index pos:start="117:17" pos:end="117:19">[<expr pos:start="117:18" pos:end="117:18"><literal type="number" pos:start="117:18" pos:end="117:18">3</literal></expr>]</index></name> <operator pos:start="117:21" pos:end="117:21">=</operator> <name pos:start="117:23" pos:end="117:36"><name pos:start="117:23" pos:end="117:25">env</name><operator pos:start="117:26" pos:end="117:27">-&gt;</operator><name pos:start="117:28" pos:end="117:36">cpu_index</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="123:5" pos:end="123:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:32"><expr pos:start="125:5" pos:end="125:31"><name pos:start="125:5" pos:end="125:20"><name pos:start="125:5" pos:end="125:9">spapr</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:20">ram_limit</name></name> <operator pos:start="125:22" pos:end="125:22">=</operator> <name pos:start="125:24" pos:end="125:31">ram_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="141:5"><if pos:start="127:5" pos:end="141:5">if <condition pos:start="127:8" pos:end="127:42">(<expr pos:start="127:9" pos:end="127:41"><name pos:start="127:9" pos:end="127:24"><name pos:start="127:9" pos:end="127:13">spapr</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:24">ram_limit</name></name> <operator pos:start="127:26" pos:end="127:26">&gt;</operator> <name pos:start="127:28" pos:end="127:41">rma_alloc_size</name></expr>)</condition> <block pos:start="127:44" pos:end="141:5">{<block_content pos:start="129:9" pos:end="139:62">

        <decl_stmt pos:start="129:9" pos:end="129:48"><decl pos:start="129:9" pos:end="129:47"><type pos:start="129:9" pos:end="129:18"><name pos:start="129:9" pos:end="129:18">ram_addr_t</name></type> <name pos:start="129:20" pos:end="129:30">nonrma_base</name> <init pos:start="129:32" pos:end="129:47">= <expr pos:start="129:34" pos:end="129:47"><name pos:start="129:34" pos:end="129:47">rma_alloc_size</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="131:9" pos:end="131:67"><decl pos:start="131:9" pos:end="131:66"><type pos:start="131:9" pos:end="131:18"><name pos:start="131:9" pos:end="131:18">ram_addr_t</name></type> <name pos:start="131:20" pos:end="131:30">nonrma_size</name> <init pos:start="131:32" pos:end="131:66">= <expr pos:start="131:34" pos:end="131:66"><name pos:start="131:34" pos:end="131:49"><name pos:start="131:34" pos:end="131:38">spapr</name><operator pos:start="131:39" pos:end="131:40">-&gt;</operator><name pos:start="131:41" pos:end="131:49">ram_limit</name></name> <operator pos:start="131:51" pos:end="131:51">-</operator> <name pos:start="131:53" pos:end="131:66">rma_alloc_size</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="135:9" pos:end="135:66"><expr pos:start="135:9" pos:end="135:65"><call pos:start="135:9" pos:end="135:65"><name pos:start="135:9" pos:end="135:30">memory_region_init_ram</name><argument_list pos:start="135:31" pos:end="135:65">(<argument pos:start="135:32" pos:end="135:34"><expr pos:start="135:32" pos:end="135:34"><name pos:start="135:32" pos:end="135:34">ram</name></expr></argument>, <argument pos:start="135:37" pos:end="135:51"><expr pos:start="135:37" pos:end="135:51"><literal type="string" pos:start="135:37" pos:end="135:51">"ppc_spapr.ram"</literal></expr></argument>, <argument pos:start="135:54" pos:end="135:64"><expr pos:start="135:54" pos:end="135:64"><name pos:start="135:54" pos:end="135:64">nonrma_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:41"><expr pos:start="137:9" pos:end="137:40"><call pos:start="137:9" pos:end="137:40"><name pos:start="137:9" pos:end="137:35">vmstate_register_ram_global</name><argument_list pos:start="137:36" pos:end="137:40">(<argument pos:start="137:37" pos:end="137:39"><expr pos:start="137:37" pos:end="137:39"><name pos:start="137:37" pos:end="137:39">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:62"><expr pos:start="139:9" pos:end="139:61"><call pos:start="139:9" pos:end="139:61"><name pos:start="139:9" pos:end="139:35">memory_region_add_subregion</name><argument_list pos:start="139:36" pos:end="139:61">(<argument pos:start="139:37" pos:end="139:42"><expr pos:start="139:37" pos:end="139:42"><name pos:start="139:37" pos:end="139:42">sysmem</name></expr></argument>, <argument pos:start="139:45" pos:end="139:55"><expr pos:start="139:45" pos:end="139:55"><name pos:start="139:45" pos:end="139:55">nonrma_base</name></expr></argument>, <argument pos:start="139:58" pos:end="139:60"><expr pos:start="139:58" pos:end="139:60"><name pos:start="139:58" pos:end="139:60">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="145:5" pos:end="149:13">/* allocate hash page table.  For now we always make this 16mb,

     * later we should probably make it scale to the size of guest

     * RAM */</comment>

    <expr_stmt pos:start="151:5" pos:end="151:48"><expr pos:start="151:5" pos:end="151:47"><name pos:start="151:5" pos:end="151:20"><name pos:start="151:5" pos:end="151:9">spapr</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:20">htab_size</name></name> <operator pos:start="151:22" pos:end="151:22">=</operator> <literal type="number" pos:start="151:24" pos:end="151:27">1ULL</literal> <operator pos:start="151:29" pos:end="151:30">&lt;&lt;</operator> <operator pos:start="151:32" pos:end="151:32">(</operator><name pos:start="151:33" pos:end="151:42">pteg_shift</name> <operator pos:start="151:44" pos:end="151:44">+</operator> <literal type="number" pos:start="151:46" pos:end="151:46">7</literal><operator pos:start="151:47" pos:end="151:47">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:68"><expr pos:start="153:5" pos:end="153:67"><name pos:start="153:5" pos:end="153:15"><name pos:start="153:5" pos:end="153:9">spapr</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:15">htab</name></name> <operator pos:start="153:17" pos:end="153:17">=</operator> <call pos:start="153:19" pos:end="153:67"><name pos:start="153:19" pos:end="153:31">qemu_memalign</name><argument_list pos:start="153:32" pos:end="153:67">(<argument pos:start="153:33" pos:end="153:48"><expr pos:start="153:33" pos:end="153:48"><name pos:start="153:33" pos:end="153:48"><name pos:start="153:33" pos:end="153:37">spapr</name><operator pos:start="153:38" pos:end="153:39">-&gt;</operator><name pos:start="153:40" pos:end="153:48">htab_size</name></name></expr></argument>, <argument pos:start="153:51" pos:end="153:66"><expr pos:start="153:51" pos:end="153:66"><name pos:start="153:51" pos:end="153:66"><name pos:start="153:51" pos:end="153:55">spapr</name><operator pos:start="153:56" pos:end="153:57">-&gt;</operator><name pos:start="153:58" pos:end="153:66">htab_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="157:5" pos:end="183:5">for <control pos:start="157:9" pos:end="157:59">(<init pos:start="157:10" pos:end="157:25"><expr pos:start="157:10" pos:end="157:24"><name pos:start="157:10" pos:end="157:12">env</name> <operator pos:start="157:14" pos:end="157:14">=</operator> <name pos:start="157:16" pos:end="157:24">first_cpu</name></expr>;</init> <condition pos:start="157:27" pos:end="157:38"><expr pos:start="157:27" pos:end="157:37"><name pos:start="157:27" pos:end="157:29">env</name> <operator pos:start="157:31" pos:end="157:32">!=</operator> <name pos:start="157:34" pos:end="157:37">NULL</name></expr>;</condition> <incr pos:start="157:40" pos:end="157:58"><expr pos:start="157:40" pos:end="157:58"><name pos:start="157:40" pos:end="157:42">env</name> <operator pos:start="157:44" pos:end="157:44">=</operator> <name pos:start="157:46" pos:end="157:58"><name pos:start="157:46" pos:end="157:48">env</name><operator pos:start="157:49" pos:end="157:50">-&gt;</operator><name pos:start="157:51" pos:end="157:58">next_cpu</name></name></expr></incr>)</control> <block pos:start="157:61" pos:end="183:5">{<block_content pos:start="159:9" pos:end="181:9">

        <expr_stmt pos:start="159:9" pos:end="159:41"><expr pos:start="159:9" pos:end="159:40"><name pos:start="159:9" pos:end="159:26"><name pos:start="159:9" pos:end="159:11">env</name><operator pos:start="159:12" pos:end="159:13">-&gt;</operator><name pos:start="159:14" pos:end="159:26">external_htab</name></name> <operator pos:start="159:28" pos:end="159:28">=</operator> <name pos:start="159:30" pos:end="159:40"><name pos:start="159:30" pos:end="159:34">spapr</name><operator pos:start="159:35" pos:end="159:36">-&gt;</operator><name pos:start="159:37" pos:end="159:40">htab</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:28"><expr pos:start="161:9" pos:end="161:27"><name pos:start="161:9" pos:end="161:22"><name pos:start="161:9" pos:end="161:11">env</name><operator pos:start="161:12" pos:end="161:13">-&gt;</operator><name pos:start="161:14" pos:end="161:22">htab_base</name></name> <operator pos:start="161:24" pos:end="161:24">=</operator> <operator pos:start="161:26" pos:end="161:26">-</operator><literal type="number" pos:start="161:27" pos:end="161:27">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:46"><expr pos:start="163:9" pos:end="163:45"><name pos:start="163:9" pos:end="163:22"><name pos:start="163:9" pos:end="163:11">env</name><operator pos:start="163:12" pos:end="163:13">-&gt;</operator><name pos:start="163:14" pos:end="163:22">htab_mask</name></name> <operator pos:start="163:24" pos:end="163:24">=</operator> <name pos:start="163:26" pos:end="163:41"><name pos:start="163:26" pos:end="163:30">spapr</name><operator pos:start="163:31" pos:end="163:32">-&gt;</operator><name pos:start="163:33" pos:end="163:41">htab_size</name></name> <operator pos:start="163:43" pos:end="163:43">-</operator> <literal type="number" pos:start="163:45" pos:end="163:45">1</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="167:9" pos:end="167:46">/* Tell KVM that we're in PAPR mode */</comment>

        <expr_stmt pos:start="169:9" pos:end="171:53"><expr pos:start="169:9" pos:end="171:52"><name pos:start="169:9" pos:end="169:26"><name pos:start="169:9" pos:end="169:11">env</name><operator pos:start="169:12" pos:end="169:13">-&gt;</operator><name pos:start="169:14" pos:end="169:16">spr</name><index pos:start="169:17" pos:end="169:26">[<expr pos:start="169:18" pos:end="169:25"><name pos:start="169:18" pos:end="169:25">SPR_SDR1</name></expr>]</index></name> <operator pos:start="169:28" pos:end="169:28">=</operator> <operator pos:start="169:30" pos:end="169:30">(</operator><name pos:start="169:31" pos:end="169:38">unsigned</name> <name pos:start="169:40" pos:end="169:43">long</name><operator pos:start="169:44" pos:end="169:44">)</operator><name pos:start="169:45" pos:end="169:55"><name pos:start="169:45" pos:end="169:49">spapr</name><operator pos:start="169:50" pos:end="169:51">-&gt;</operator><name pos:start="169:52" pos:end="169:55">htab</name></name> <operator pos:start="169:57" pos:end="169:57">|</operator>

                             <operator pos:start="171:30" pos:end="171:30">(</operator><operator pos:start="171:31" pos:end="171:31">(</operator><name pos:start="171:32" pos:end="171:41">pteg_shift</name> <operator pos:start="171:43" pos:end="171:43">+</operator> <literal type="number" pos:start="171:45" pos:end="171:45">7</literal><operator pos:start="171:46" pos:end="171:46">)</operator> <operator pos:start="171:48" pos:end="171:48">-</operator> <literal type="number" pos:start="171:50" pos:end="171:51">18</literal><operator pos:start="171:52" pos:end="171:52">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:31"><expr pos:start="173:9" pos:end="173:30"><name pos:start="173:9" pos:end="173:26"><name pos:start="173:9" pos:end="173:11">env</name><operator pos:start="173:12" pos:end="173:13">-&gt;</operator><name pos:start="173:14" pos:end="173:16">spr</name><index pos:start="173:17" pos:end="173:26">[<expr pos:start="173:18" pos:end="173:25"><name pos:start="173:18" pos:end="173:25">SPR_HIOR</name></expr>]</index></name> <operator pos:start="173:28" pos:end="173:28">=</operator> <literal type="number" pos:start="173:30" pos:end="173:30">0</literal></expr>;</expr_stmt>



        <if_stmt pos:start="177:9" pos:end="181:9"><if pos:start="177:9" pos:end="181:9">if <condition pos:start="177:12" pos:end="177:26">(<expr pos:start="177:13" pos:end="177:25"><call pos:start="177:13" pos:end="177:25"><name pos:start="177:13" pos:end="177:23">kvm_enabled</name><argument_list pos:start="177:24" pos:end="177:25">()</argument_list></call></expr>)</condition> <block pos:start="177:28" pos:end="181:9">{<block_content pos:start="179:13" pos:end="179:33">

            <expr_stmt pos:start="179:13" pos:end="179:33"><expr pos:start="179:13" pos:end="179:32"><call pos:start="179:13" pos:end="179:32"><name pos:start="179:13" pos:end="179:27">kvmppc_set_papr</name><argument_list pos:start="179:28" pos:end="179:32">(<argument pos:start="179:29" pos:end="179:31"><expr pos:start="179:29" pos:end="179:31"><name pos:start="179:29" pos:end="179:31">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="187:5" pos:end="187:69"><expr pos:start="187:5" pos:end="187:68"><name pos:start="187:5" pos:end="187:12">filename</name> <operator pos:start="187:14" pos:end="187:14">=</operator> <call pos:start="187:16" pos:end="187:68"><name pos:start="187:16" pos:end="187:29">qemu_find_file</name><argument_list pos:start="187:30" pos:end="187:68">(<argument pos:start="187:31" pos:end="187:49"><expr pos:start="187:31" pos:end="187:49"><name pos:start="187:31" pos:end="187:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="187:52" pos:end="187:67"><expr pos:start="187:52" pos:end="187:67"><literal type="string" pos:start="187:52" pos:end="187:67">"spapr-rtas.bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="191:72"><expr pos:start="189:5" pos:end="191:71"><name pos:start="189:5" pos:end="189:20"><name pos:start="189:5" pos:end="189:9">spapr</name><operator pos:start="189:10" pos:end="189:11">-&gt;</operator><name pos:start="189:12" pos:end="189:20">rtas_size</name></name> <operator pos:start="189:22" pos:end="189:22">=</operator> <call pos:start="189:24" pos:end="191:71"><name pos:start="189:24" pos:end="189:42">load_image_targphys</name><argument_list pos:start="189:43" pos:end="191:71">(<argument pos:start="189:44" pos:end="189:51"><expr pos:start="189:44" pos:end="189:51"><name pos:start="189:44" pos:end="189:51">filename</name></expr></argument>, <argument pos:start="189:54" pos:end="189:69"><expr pos:start="189:54" pos:end="189:69"><name pos:start="189:54" pos:end="189:69"><name pos:start="189:54" pos:end="189:58">spapr</name><operator pos:start="189:59" pos:end="189:60">-&gt;</operator><name pos:start="189:61" pos:end="189:69">rtas_addr</name></name></expr></argument>,

                                           <argument pos:start="191:44" pos:end="191:70"><expr pos:start="191:44" pos:end="191:70"><name pos:start="191:44" pos:end="191:51">ram_size</name> <operator pos:start="191:53" pos:end="191:53">-</operator> <name pos:start="191:55" pos:end="191:70"><name pos:start="191:55" pos:end="191:59">spapr</name><operator pos:start="191:60" pos:end="191:61">-&gt;</operator><name pos:start="191:62" pos:end="191:70">rtas_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="193:5" pos:end="199:5"><if pos:start="193:5" pos:end="199:5">if <condition pos:start="193:8" pos:end="193:29">(<expr pos:start="193:9" pos:end="193:28"><name pos:start="193:9" pos:end="193:24"><name pos:start="193:9" pos:end="193:13">spapr</name><operator pos:start="193:14" pos:end="193:15">-&gt;</operator><name pos:start="193:16" pos:end="193:24">rtas_size</name></name> <operator pos:start="193:26" pos:end="193:26">&lt;</operator> <literal type="number" pos:start="193:28" pos:end="193:28">0</literal></expr>)</condition> <block pos:start="193:31" pos:end="199:5">{<block_content pos:start="195:9" pos:end="197:16">

        <expr_stmt pos:start="195:9" pos:end="195:68"><expr pos:start="195:9" pos:end="195:67"><call pos:start="195:9" pos:end="195:67"><name pos:start="195:9" pos:end="195:16">hw_error</name><argument_list pos:start="195:17" pos:end="195:67">(<argument pos:start="195:18" pos:end="195:56"><expr pos:start="195:18" pos:end="195:56"><literal type="string" pos:start="195:18" pos:end="195:56">"qemu: could not load LPAR rtas '%s'\n"</literal></expr></argument>, <argument pos:start="195:59" pos:end="195:66"><expr pos:start="195:59" pos:end="195:66"><name pos:start="195:59" pos:end="195:66">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:16"><expr pos:start="197:9" pos:end="197:15"><call pos:start="197:9" pos:end="197:15"><name pos:start="197:9" pos:end="197:12">exit</name><argument_list pos:start="197:13" pos:end="197:15">(<argument pos:start="197:14" pos:end="197:14"><expr pos:start="197:14" pos:end="197:14"><literal type="number" pos:start="197:14" pos:end="197:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:21"><expr pos:start="201:5" pos:end="201:20"><call pos:start="201:5" pos:end="201:20"><name pos:start="201:5" pos:end="201:10">g_free</name><argument_list pos:start="201:11" pos:end="201:20">(<argument pos:start="201:12" pos:end="201:19"><expr pos:start="201:12" pos:end="201:19"><name pos:start="201:12" pos:end="201:19">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="205:5" pos:end="205:37">/* Set up Interrupt Controller */</comment>

    <expr_stmt pos:start="207:5" pos:end="207:45"><expr pos:start="207:5" pos:end="207:44"><name pos:start="207:5" pos:end="207:14"><name pos:start="207:5" pos:end="207:9">spapr</name><operator pos:start="207:10" pos:end="207:11">-&gt;</operator><name pos:start="207:12" pos:end="207:14">icp</name></name> <operator pos:start="207:16" pos:end="207:16">=</operator> <call pos:start="207:18" pos:end="207:44"><name pos:start="207:18" pos:end="207:33">xics_system_init</name><argument_list pos:start="207:34" pos:end="207:44">(<argument pos:start="207:35" pos:end="207:43"><expr pos:start="207:35" pos:end="207:43"><name pos:start="207:35" pos:end="207:43">XICS_IRQS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:25"><expr pos:start="209:5" pos:end="209:24"><name pos:start="209:5" pos:end="209:19"><name pos:start="209:5" pos:end="209:9">spapr</name><operator pos:start="209:10" pos:end="209:11">-&gt;</operator><name pos:start="209:12" pos:end="209:19">next_irq</name></name> <operator pos:start="209:21" pos:end="209:21">=</operator> <literal type="number" pos:start="209:23" pos:end="209:24">16</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="213:5" pos:end="213:24">/* Set up VIO bus */</comment>

    <expr_stmt pos:start="215:5" pos:end="215:42"><expr pos:start="215:5" pos:end="215:41"><name pos:start="215:5" pos:end="215:18"><name pos:start="215:5" pos:end="215:9">spapr</name><operator pos:start="215:10" pos:end="215:11">-&gt;</operator><name pos:start="215:12" pos:end="215:18">vio_bus</name></name> <operator pos:start="215:20" pos:end="215:20">=</operator> <call pos:start="215:22" pos:end="215:41"><name pos:start="215:22" pos:end="215:39">spapr_vio_bus_init</name><argument_list pos:start="215:40" pos:end="215:41">()</argument_list></call></expr>;</expr_stmt>



    <for pos:start="219:5" pos:end="229:5">for <control pos:start="219:9" pos:end="219:42">(<init pos:start="219:10" pos:end="219:15"><expr pos:start="219:10" pos:end="219:14"><name pos:start="219:10" pos:end="219:10">i</name> <operator pos:start="219:12" pos:end="219:12">=</operator> <literal type="number" pos:start="219:14" pos:end="219:14">0</literal></expr>;</init> <condition pos:start="219:17" pos:end="219:37"><expr pos:start="219:17" pos:end="219:36"><name pos:start="219:17" pos:end="219:17">i</name> <operator pos:start="219:19" pos:end="219:19">&lt;</operator> <name pos:start="219:21" pos:end="219:36">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="219:39" pos:end="219:41"><expr pos:start="219:39" pos:end="219:41"><name pos:start="219:39" pos:end="219:39">i</name><operator pos:start="219:40" pos:end="219:41">++</operator></expr></incr>)</control> <block pos:start="219:44" pos:end="229:5">{<block_content pos:start="221:9" pos:end="227:9">

        <if_stmt pos:start="221:9" pos:end="227:9"><if pos:start="221:9" pos:end="227:9">if <condition pos:start="221:12" pos:end="221:26">(<expr pos:start="221:13" pos:end="221:25"><name pos:start="221:13" pos:end="221:25"><name pos:start="221:13" pos:end="221:22">serial_hds</name><index pos:start="221:23" pos:end="221:25">[<expr pos:start="221:24" pos:end="221:24"><name pos:start="221:24" pos:end="221:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="221:28" pos:end="227:9">{<block_content pos:start="223:13" pos:end="225:44">

            <expr_stmt pos:start="223:13" pos:end="225:44"><expr pos:start="223:13" pos:end="225:43"><call pos:start="223:13" pos:end="225:43"><name pos:start="223:13" pos:end="223:28">spapr_vty_create</name><argument_list pos:start="223:29" pos:end="225:43">(<argument pos:start="223:30" pos:end="223:43"><expr pos:start="223:30" pos:end="223:43"><name pos:start="223:30" pos:end="223:43"><name pos:start="223:30" pos:end="223:34">spapr</name><operator pos:start="223:35" pos:end="223:36">-&gt;</operator><name pos:start="223:37" pos:end="223:43">vio_bus</name></name></expr></argument>, <argument pos:start="223:46" pos:end="223:71"><expr pos:start="223:46" pos:end="223:71"><name pos:start="223:46" pos:end="223:67">SPAPR_VTY_BASE_ADDRESS</name> <operator pos:start="223:69" pos:end="223:69">+</operator> <name pos:start="223:71" pos:end="223:71">i</name></expr></argument>,

                             <argument pos:start="225:30" pos:end="225:42"><expr pos:start="225:30" pos:end="225:42"><name pos:start="225:30" pos:end="225:42"><name pos:start="225:30" pos:end="225:39">serial_hds</name><index pos:start="225:40" pos:end="225:42">[<expr pos:start="225:41" pos:end="225:41"><name pos:start="225:41" pos:end="225:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="233:5" pos:end="233:20">/* Set up PCI */</comment>

    <expr_stmt pos:start="235:5" pos:end="241:44"><expr pos:start="235:5" pos:end="241:43"><call pos:start="235:5" pos:end="241:43"><name pos:start="235:5" pos:end="235:20">spapr_create_phb</name><argument_list pos:start="235:21" pos:end="241:43">(<argument pos:start="235:22" pos:end="235:26"><expr pos:start="235:22" pos:end="235:26"><name pos:start="235:22" pos:end="235:26">spapr</name></expr></argument>, <argument pos:start="235:29" pos:end="235:33"><expr pos:start="235:29" pos:end="235:33"><literal type="string" pos:start="235:29" pos:end="235:33">"pci"</literal></expr></argument>, <argument pos:start="235:36" pos:end="235:49"><expr pos:start="235:36" pos:end="235:49"><name pos:start="235:36" pos:end="235:49">SPAPR_PCI_BUID</name></expr></argument>,

                     <argument pos:start="237:22" pos:end="237:43"><expr pos:start="237:22" pos:end="237:43"><name pos:start="237:22" pos:end="237:43">SPAPR_PCI_MEM_WIN_ADDR</name></expr></argument>,

                     <argument pos:start="239:22" pos:end="239:43"><expr pos:start="239:22" pos:end="239:43"><name pos:start="239:22" pos:end="239:43">SPAPR_PCI_MEM_WIN_SIZE</name></expr></argument>,

                     <argument pos:start="241:22" pos:end="241:42"><expr pos:start="241:22" pos:end="241:42"><name pos:start="241:22" pos:end="241:42">SPAPR_PCI_IO_WIN_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="245:5" pos:end="269:5">for <control pos:start="245:9" pos:end="245:33">(<init pos:start="245:10" pos:end="245:15"><expr pos:start="245:10" pos:end="245:14"><name pos:start="245:10" pos:end="245:10">i</name> <operator pos:start="245:12" pos:end="245:12">=</operator> <literal type="number" pos:start="245:14" pos:end="245:14">0</literal></expr>;</init> <condition pos:start="245:17" pos:end="245:28"><expr pos:start="245:17" pos:end="245:27"><name pos:start="245:17" pos:end="245:17">i</name> <operator pos:start="245:19" pos:end="245:19">&lt;</operator> <name pos:start="245:21" pos:end="245:27">nb_nics</name></expr>;</condition> <incr pos:start="245:30" pos:end="245:32"><expr pos:start="245:30" pos:end="245:32"><name pos:start="245:30" pos:end="245:30">i</name><operator pos:start="245:31" pos:end="245:32">++</operator></expr></incr>)</control> <block pos:start="245:35" pos:end="269:5">{<block_content pos:start="247:9" pos:end="267:9">

        <decl_stmt pos:start="247:9" pos:end="247:35"><decl pos:start="247:9" pos:end="247:34"><type pos:start="247:9" pos:end="247:17"><name pos:start="247:9" pos:end="247:15">NICInfo</name> <modifier pos:start="247:17" pos:end="247:17">*</modifier></type><name pos:start="247:18" pos:end="247:19">nd</name> <init pos:start="247:21" pos:end="247:34">= <expr pos:start="247:23" pos:end="247:34"><operator pos:start="247:23" pos:end="247:23">&amp;</operator><name pos:start="247:24" pos:end="247:34"><name pos:start="247:24" pos:end="247:31">nd_table</name><index pos:start="247:32" pos:end="247:34">[<expr pos:start="247:33" pos:end="247:33"><name pos:start="247:33" pos:end="247:33">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="251:9" pos:end="255:9"><if pos:start="251:9" pos:end="255:9">if <condition pos:start="251:12" pos:end="251:23">(<expr pos:start="251:13" pos:end="251:22"><operator pos:start="251:13" pos:end="251:13">!</operator><name pos:start="251:14" pos:end="251:22"><name pos:start="251:14" pos:end="251:15">nd</name><operator pos:start="251:16" pos:end="251:17">-&gt;</operator><name pos:start="251:18" pos:end="251:22">model</name></name></expr>)</condition> <block pos:start="251:25" pos:end="255:9">{<block_content pos:start="253:13" pos:end="253:44">

            <expr_stmt pos:start="253:13" pos:end="253:44"><expr pos:start="253:13" pos:end="253:43"><name pos:start="253:13" pos:end="253:21"><name pos:start="253:13" pos:end="253:14">nd</name><operator pos:start="253:15" pos:end="253:16">-&gt;</operator><name pos:start="253:17" pos:end="253:21">model</name></name> <operator pos:start="253:23" pos:end="253:23">=</operator> <call pos:start="253:25" pos:end="253:43"><name pos:start="253:25" pos:end="253:32">g_strdup</name><argument_list pos:start="253:33" pos:end="253:43">(<argument pos:start="253:34" pos:end="253:42"><expr pos:start="253:34" pos:end="253:42"><literal type="string" pos:start="253:34" pos:end="253:42">"ibmveth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="259:9" pos:end="267:9"><if pos:start="259:9" pos:end="263:9">if <condition pos:start="259:12" pos:end="259:46">(<expr pos:start="259:13" pos:end="259:45"><call pos:start="259:13" pos:end="259:40"><name pos:start="259:13" pos:end="259:18">strcmp</name><argument_list pos:start="259:19" pos:end="259:40">(<argument pos:start="259:20" pos:end="259:28"><expr pos:start="259:20" pos:end="259:28"><name pos:start="259:20" pos:end="259:28"><name pos:start="259:20" pos:end="259:21">nd</name><operator pos:start="259:22" pos:end="259:23">-&gt;</operator><name pos:start="259:24" pos:end="259:28">model</name></name></expr></argument>, <argument pos:start="259:31" pos:end="259:39"><expr pos:start="259:31" pos:end="259:39"><literal type="string" pos:start="259:31" pos:end="259:39">"ibmveth"</literal></expr></argument>)</argument_list></call> <operator pos:start="259:42" pos:end="259:43">==</operator> <literal type="number" pos:start="259:45" pos:end="259:45">0</literal></expr>)</condition> <block pos:start="259:48" pos:end="263:9">{<block_content pos:start="261:13" pos:end="261:62">

            <expr_stmt pos:start="261:13" pos:end="261:62"><expr pos:start="261:13" pos:end="261:61"><call pos:start="261:13" pos:end="261:61"><name pos:start="261:13" pos:end="261:29">spapr_vlan_create</name><argument_list pos:start="261:30" pos:end="261:61">(<argument pos:start="261:31" pos:end="261:44"><expr pos:start="261:31" pos:end="261:44"><name pos:start="261:31" pos:end="261:44"><name pos:start="261:31" pos:end="261:35">spapr</name><operator pos:start="261:36" pos:end="261:37">-&gt;</operator><name pos:start="261:38" pos:end="261:44">vio_bus</name></name></expr></argument>, <argument pos:start="261:47" pos:end="261:56"><expr pos:start="261:47" pos:end="261:56"><literal type="number" pos:start="261:47" pos:end="261:54">0x1000</literal> <operator pos:start="261:54" pos:end="261:54">+</operator> <name pos:start="261:56" pos:end="261:56">i</name></expr></argument>, <argument pos:start="261:59" pos:end="261:60"><expr pos:start="261:59" pos:end="261:60"><name pos:start="261:59" pos:end="261:60">nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="263:11" pos:end="267:9">else <block pos:start="263:16" pos:end="267:9">{<block_content pos:start="265:13" pos:end="265:63">

            <expr_stmt pos:start="265:13" pos:end="265:63"><expr pos:start="265:13" pos:end="265:62"><call pos:start="265:13" pos:end="265:62"><name pos:start="265:13" pos:end="265:31">pci_nic_init_nofail</name><argument_list pos:start="265:32" pos:end="265:62">(<argument pos:start="265:33" pos:end="265:44"><expr pos:start="265:33" pos:end="265:44"><operator pos:start="265:33" pos:end="265:33">&amp;</operator><name pos:start="265:34" pos:end="265:44"><name pos:start="265:34" pos:end="265:41">nd_table</name><index pos:start="265:42" pos:end="265:44">[<expr pos:start="265:43" pos:end="265:43"><name pos:start="265:43" pos:end="265:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="265:47" pos:end="265:55"><expr pos:start="265:47" pos:end="265:55"><name pos:start="265:47" pos:end="265:55"><name pos:start="265:47" pos:end="265:48">nd</name><operator pos:start="265:49" pos:end="265:50">-&gt;</operator><name pos:start="265:51" pos:end="265:55">model</name></name></expr></argument>, <argument pos:start="265:58" pos:end="265:61"><expr pos:start="265:58" pos:end="265:61"><name pos:start="265:58" pos:end="265:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <for pos:start="273:5" pos:end="277:5">for <control pos:start="273:9" pos:end="273:53">(<init pos:start="273:10" pos:end="273:15"><expr pos:start="273:10" pos:end="273:14"><name pos:start="273:10" pos:end="273:10">i</name> <operator pos:start="273:12" pos:end="273:12">=</operator> <literal type="number" pos:start="273:14" pos:end="273:14">0</literal></expr>;</init> <condition pos:start="273:17" pos:end="273:48"><expr pos:start="273:17" pos:end="273:47"><name pos:start="273:17" pos:end="273:17">i</name> <operator pos:start="273:19" pos:end="273:20">&lt;=</operator> <call pos:start="273:22" pos:end="273:47"><name pos:start="273:22" pos:end="273:38">drive_get_max_bus</name><argument_list pos:start="273:39" pos:end="273:47">(<argument pos:start="273:40" pos:end="273:46"><expr pos:start="273:40" pos:end="273:46"><name pos:start="273:40" pos:end="273:46">IF_SCSI</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="273:50" pos:end="273:52"><expr pos:start="273:50" pos:end="273:52"><name pos:start="273:50" pos:end="273:50">i</name><operator pos:start="273:51" pos:end="273:52">++</operator></expr></incr>)</control> <block pos:start="273:55" pos:end="277:5">{<block_content pos:start="275:9" pos:end="275:55">

        <expr_stmt pos:start="275:9" pos:end="275:55"><expr pos:start="275:9" pos:end="275:54"><call pos:start="275:9" pos:end="275:54"><name pos:start="275:9" pos:end="275:26">spapr_vscsi_create</name><argument_list pos:start="275:27" pos:end="275:54">(<argument pos:start="275:28" pos:end="275:41"><expr pos:start="275:28" pos:end="275:41"><name pos:start="275:28" pos:end="275:41"><name pos:start="275:28" pos:end="275:32">spapr</name><operator pos:start="275:33" pos:end="275:34">-&gt;</operator><name pos:start="275:35" pos:end="275:41">vio_bus</name></name></expr></argument>, <argument pos:start="275:44" pos:end="275:53"><expr pos:start="275:44" pos:end="275:53"><literal type="number" pos:start="275:44" pos:end="275:51">0x2000</literal> <operator pos:start="275:51" pos:end="275:51">+</operator> <name pos:start="275:53" pos:end="275:53">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="281:5" pos:end="389:5"><if pos:start="281:5" pos:end="345:5">if <condition pos:start="281:8" pos:end="281:24">(<expr pos:start="281:9" pos:end="281:23"><name pos:start="281:9" pos:end="281:23">kernel_filename</name></expr>)</condition> <block pos:start="281:26" pos:end="345:5">{<block_content pos:start="283:9" pos:end="343:46">

        <decl_stmt pos:start="283:9" pos:end="283:29"><decl pos:start="283:9" pos:end="283:28"><type pos:start="283:9" pos:end="283:16"><name pos:start="283:9" pos:end="283:16">uint64_t</name></type> <name pos:start="283:18" pos:end="283:24">lowaddr</name> <init pos:start="283:26" pos:end="283:28">= <expr pos:start="283:28" pos:end="283:28"><literal type="number" pos:start="283:28" pos:end="283:28">0</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="287:9" pos:end="289:72"><expr pos:start="287:9" pos:end="289:71"><name pos:start="287:9" pos:end="287:19">kernel_size</name> <operator pos:start="287:21" pos:end="287:21">=</operator> <call pos:start="287:23" pos:end="289:71"><name pos:start="287:23" pos:end="287:30">load_elf</name><argument_list pos:start="287:31" pos:end="289:71">(<argument pos:start="287:32" pos:end="287:46"><expr pos:start="287:32" pos:end="287:46"><name pos:start="287:32" pos:end="287:46">kernel_filename</name></expr></argument>, <argument pos:start="287:49" pos:end="287:72"><expr pos:start="287:49" pos:end="287:72"><name pos:start="287:49" pos:end="287:72">translate_kernel_address</name></expr></argument>, <argument pos:start="287:75" pos:end="287:78"><expr pos:start="287:75" pos:end="287:78"><name pos:start="287:75" pos:end="287:78">NULL</name></expr></argument>,

                               <argument pos:start="289:32" pos:end="289:35"><expr pos:start="289:32" pos:end="289:35"><name pos:start="289:32" pos:end="289:35">NULL</name></expr></argument>, <argument pos:start="289:38" pos:end="289:45"><expr pos:start="289:38" pos:end="289:45"><operator pos:start="289:38" pos:end="289:38">&amp;</operator><name pos:start="289:39" pos:end="289:45">lowaddr</name></expr></argument>, <argument pos:start="289:48" pos:end="289:51"><expr pos:start="289:48" pos:end="289:51"><name pos:start="289:48" pos:end="289:51">NULL</name></expr></argument>, <argument pos:start="289:54" pos:end="289:54"><expr pos:start="289:54" pos:end="289:54"><literal type="number" pos:start="289:54" pos:end="289:54">1</literal></expr></argument>, <argument pos:start="289:57" pos:end="289:67"><expr pos:start="289:57" pos:end="289:67"><name pos:start="289:57" pos:end="289:67">ELF_MACHINE</name></expr></argument>, <argument pos:start="289:70" pos:end="289:70"><expr pos:start="289:70" pos:end="289:70"><literal type="number" pos:start="289:70" pos:end="289:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="291:9" pos:end="299:9"><if pos:start="291:9" pos:end="299:9">if <condition pos:start="291:12" pos:end="291:28">(<expr pos:start="291:13" pos:end="291:27"><name pos:start="291:13" pos:end="291:23">kernel_size</name> <operator pos:start="291:25" pos:end="291:25">&lt;</operator> <literal type="number" pos:start="291:27" pos:end="291:27">0</literal></expr>)</condition> <block pos:start="291:30" pos:end="299:9">{<block_content pos:start="293:13" pos:end="297:75">

            <expr_stmt pos:start="293:13" pos:end="297:75"><expr pos:start="293:13" pos:end="297:74"><name pos:start="293:13" pos:end="293:23">kernel_size</name> <operator pos:start="293:25" pos:end="293:25">=</operator> <call pos:start="293:27" pos:end="297:74"><name pos:start="293:27" pos:end="293:45">load_image_targphys</name><argument_list pos:start="293:46" pos:end="297:74">(<argument pos:start="293:47" pos:end="293:61"><expr pos:start="293:47" pos:end="293:61"><name pos:start="293:47" pos:end="293:61">kernel_filename</name></expr></argument>,

                                              <argument pos:start="295:47" pos:end="295:62"><expr pos:start="295:47" pos:end="295:62"><name pos:start="295:47" pos:end="295:62">KERNEL_LOAD_ADDR</name></expr></argument>,

                                              <argument pos:start="297:47" pos:end="297:73"><expr pos:start="297:47" pos:end="297:73"><name pos:start="297:47" pos:end="297:54">ram_size</name> <operator pos:start="297:56" pos:end="297:56">-</operator> <name pos:start="297:58" pos:end="297:73">KERNEL_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="301:9" pos:end="309:9"><if pos:start="301:9" pos:end="309:9">if <condition pos:start="301:12" pos:end="301:28">(<expr pos:start="301:13" pos:end="301:27"><name pos:start="301:13" pos:end="301:23">kernel_size</name> <operator pos:start="301:25" pos:end="301:25">&lt;</operator> <literal type="number" pos:start="301:27" pos:end="301:27">0</literal></expr>)</condition> <block pos:start="301:30" pos:end="309:9">{<block_content pos:start="303:13" pos:end="307:20">

            <expr_stmt pos:start="303:13" pos:end="305:37"><expr pos:start="303:13" pos:end="305:36"><call pos:start="303:13" pos:end="305:36"><name pos:start="303:13" pos:end="303:19">fprintf</name><argument_list pos:start="303:20" pos:end="305:36">(<argument pos:start="303:21" pos:end="303:26"><expr pos:start="303:21" pos:end="303:26"><name pos:start="303:21" pos:end="303:26">stderr</name></expr></argument>, <argument pos:start="303:29" pos:end="303:64"><expr pos:start="303:29" pos:end="303:64"><literal type="string" pos:start="303:29" pos:end="303:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="305:21" pos:end="305:35"><expr pos:start="305:21" pos:end="305:35"><name pos:start="305:21" pos:end="305:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="307:13" pos:end="307:20"><expr pos:start="307:13" pos:end="307:19"><call pos:start="307:13" pos:end="307:19"><name pos:start="307:13" pos:end="307:16">exit</name><argument_list pos:start="307:17" pos:end="307:19">(<argument pos:start="307:18" pos:end="307:18"><expr pos:start="307:18" pos:end="307:18"><literal type="number" pos:start="307:18" pos:end="307:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="313:9" pos:end="313:25">/* load initrd */</comment>

        <if_stmt pos:start="315:9" pos:end="339:9"><if pos:start="315:9" pos:end="333:9">if <condition pos:start="315:12" pos:end="315:28">(<expr pos:start="315:13" pos:end="315:27"><name pos:start="315:13" pos:end="315:27">initrd_filename</name></expr>)</condition> <block pos:start="315:30" pos:end="333:9">{<block_content pos:start="317:13" pos:end="331:13">

            <expr_stmt pos:start="317:13" pos:end="317:43"><expr pos:start="317:13" pos:end="317:42"><name pos:start="317:13" pos:end="317:23">initrd_base</name> <operator pos:start="317:25" pos:end="317:25">=</operator> <name pos:start="317:27" pos:end="317:42">INITRD_LOAD_ADDR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="321:70"><expr pos:start="319:13" pos:end="321:69"><name pos:start="319:13" pos:end="319:23">initrd_size</name> <operator pos:start="319:25" pos:end="319:25">=</operator> <call pos:start="319:27" pos:end="321:69"><name pos:start="319:27" pos:end="319:45">load_image_targphys</name><argument_list pos:start="319:46" pos:end="321:69">(<argument pos:start="319:47" pos:end="319:61"><expr pos:start="319:47" pos:end="319:61"><name pos:start="319:47" pos:end="319:61">initrd_filename</name></expr></argument>, <argument pos:start="319:64" pos:end="319:74"><expr pos:start="319:64" pos:end="319:74"><name pos:start="319:64" pos:end="319:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="321:47" pos:end="321:68"><expr pos:start="321:47" pos:end="321:68"><name pos:start="321:47" pos:end="321:54">ram_size</name> <operator pos:start="321:56" pos:end="321:56">-</operator> <name pos:start="321:58" pos:end="321:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="323:13" pos:end="331:13"><if pos:start="323:13" pos:end="331:13">if <condition pos:start="323:16" pos:end="323:32">(<expr pos:start="323:17" pos:end="323:31"><name pos:start="323:17" pos:end="323:27">initrd_size</name> <operator pos:start="323:29" pos:end="323:29">&lt;</operator> <literal type="number" pos:start="323:31" pos:end="323:31">0</literal></expr>)</condition> <block pos:start="323:34" pos:end="331:13">{<block_content pos:start="325:17" pos:end="329:24">

                <expr_stmt pos:start="325:17" pos:end="327:41"><expr pos:start="325:17" pos:end="327:40"><call pos:start="325:17" pos:end="327:40"><name pos:start="325:17" pos:end="325:23">fprintf</name><argument_list pos:start="325:24" pos:end="327:40">(<argument pos:start="325:25" pos:end="325:30"><expr pos:start="325:25" pos:end="325:30"><name pos:start="325:25" pos:end="325:30">stderr</name></expr></argument>, <argument pos:start="325:33" pos:end="325:78"><expr pos:start="325:33" pos:end="325:78"><literal type="string" pos:start="325:33" pos:end="325:78">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                        <argument pos:start="327:25" pos:end="327:39"><expr pos:start="327:25" pos:end="327:39"><name pos:start="327:25" pos:end="327:39">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="329:17" pos:end="329:24"><expr pos:start="329:17" pos:end="329:23"><call pos:start="329:17" pos:end="329:23"><name pos:start="329:17" pos:end="329:20">exit</name><argument_list pos:start="329:21" pos:end="329:23">(<argument pos:start="329:22" pos:end="329:22"><expr pos:start="329:22" pos:end="329:22"><literal type="number" pos:start="329:22" pos:end="329:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="333:11" pos:end="339:9">else <block pos:start="333:16" pos:end="339:9">{<block_content pos:start="335:13" pos:end="337:28">

            <expr_stmt pos:start="335:13" pos:end="335:28"><expr pos:start="335:13" pos:end="335:27"><name pos:start="335:13" pos:end="335:23">initrd_base</name> <operator pos:start="335:25" pos:end="335:25">=</operator> <literal type="number" pos:start="335:27" pos:end="335:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="337:13" pos:end="337:28"><expr pos:start="337:13" pos:end="337:27"><name pos:start="337:13" pos:end="337:23">initrd_size</name> <operator pos:start="337:25" pos:end="337:25">=</operator> <literal type="number" pos:start="337:27" pos:end="337:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="343:9" pos:end="343:46"><expr pos:start="343:9" pos:end="343:45"><name pos:start="343:9" pos:end="343:26"><name pos:start="343:9" pos:end="343:13">spapr</name><operator pos:start="343:14" pos:end="343:15">-&gt;</operator><name pos:start="343:16" pos:end="343:26">entry_point</name></name> <operator pos:start="343:28" pos:end="343:28">=</operator> <name pos:start="343:30" pos:end="343:45">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="345:7" pos:end="389:5">else <block pos:start="345:12" pos:end="389:5">{<block_content pos:start="347:9" pos:end="387:9">

        <if_stmt pos:start="347:9" pos:end="355:9"><if pos:start="347:9" pos:end="355:9">if <condition pos:start="347:12" pos:end="347:44">(<expr pos:start="347:13" pos:end="347:43"><name pos:start="347:13" pos:end="347:20">rma_size</name> <operator pos:start="347:22" pos:end="347:22">&lt;</operator> <operator pos:start="347:24" pos:end="347:24">(</operator><name pos:start="347:25" pos:end="347:36">MIN_RMA_SLOF</name> <operator pos:start="347:38" pos:end="347:39">&lt;&lt;</operator> <literal type="number" pos:start="347:41" pos:end="347:42">20</literal><operator pos:start="347:43" pos:end="347:43">)</operator></expr>)</condition> <block pos:start="347:46" pos:end="355:9">{<block_content pos:start="349:13" pos:end="353:20">

            <expr_stmt pos:start="349:13" pos:end="351:78"><expr pos:start="349:13" pos:end="351:77"><call pos:start="349:13" pos:end="351:77"><name pos:start="349:13" pos:end="349:19">fprintf</name><argument_list pos:start="349:20" pos:end="351:77">(<argument pos:start="349:21" pos:end="349:26"><expr pos:start="349:21" pos:end="349:26"><name pos:start="349:21" pos:end="349:26">stderr</name></expr></argument>, <argument pos:start="349:29" pos:end="351:62"><expr pos:start="349:29" pos:end="351:62"><literal type="string" pos:start="349:29" pos:end="349:70">"qemu: pSeries SLOF firmware requires &gt;= "</literal>

                    <literal type="string" pos:start="351:21" pos:end="351:62">"%ldM guest RMA (Real Mode Area memory)\n"</literal></expr></argument>, <argument pos:start="351:65" pos:end="351:76"><expr pos:start="351:65" pos:end="351:76"><name pos:start="351:65" pos:end="351:76">MIN_RMA_SLOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="353:13" pos:end="353:20"><expr pos:start="353:13" pos:end="353:19"><call pos:start="353:13" pos:end="353:19"><name pos:start="353:13" pos:end="353:16">exit</name><argument_list pos:start="353:17" pos:end="353:19">(<argument pos:start="353:18" pos:end="353:18"><expr pos:start="353:18" pos:end="353:18"><literal type="number" pos:start="353:18" pos:end="353:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="357:9" pos:end="357:69"><expr pos:start="357:9" pos:end="357:68"><name pos:start="357:9" pos:end="357:16">filename</name> <operator pos:start="357:18" pos:end="357:18">=</operator> <call pos:start="357:20" pos:end="357:68"><name pos:start="357:20" pos:end="357:33">qemu_find_file</name><argument_list pos:start="357:34" pos:end="357:68">(<argument pos:start="357:35" pos:end="357:53"><expr pos:start="357:35" pos:end="357:53"><name pos:start="357:35" pos:end="357:53">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="357:56" pos:end="357:67"><expr pos:start="357:56" pos:end="357:67"><name pos:start="357:56" pos:end="357:67">FW_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="359:9" pos:end="359:64"><expr pos:start="359:9" pos:end="359:63"><name pos:start="359:9" pos:end="359:15">fw_size</name> <operator pos:start="359:17" pos:end="359:17">=</operator> <call pos:start="359:19" pos:end="359:63"><name pos:start="359:19" pos:end="359:37">load_image_targphys</name><argument_list pos:start="359:38" pos:end="359:63">(<argument pos:start="359:39" pos:end="359:46"><expr pos:start="359:39" pos:end="359:46"><name pos:start="359:39" pos:end="359:46">filename</name></expr></argument>, <argument pos:start="359:49" pos:end="359:49"><expr pos:start="359:49" pos:end="359:49"><literal type="number" pos:start="359:49" pos:end="359:49">0</literal></expr></argument>, <argument pos:start="359:52" pos:end="359:62"><expr pos:start="359:52" pos:end="359:62"><name pos:start="359:52" pos:end="359:62">FW_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="361:9" pos:end="367:9"><if pos:start="361:9" pos:end="367:9">if <condition pos:start="361:12" pos:end="361:24">(<expr pos:start="361:13" pos:end="361:23"><name pos:start="361:13" pos:end="361:19">fw_size</name> <operator pos:start="361:21" pos:end="361:21">&lt;</operator> <literal type="number" pos:start="361:23" pos:end="361:23">0</literal></expr>)</condition> <block pos:start="361:26" pos:end="367:9">{<block_content pos:start="363:13" pos:end="365:20">

            <expr_stmt pos:start="363:13" pos:end="363:72"><expr pos:start="363:13" pos:end="363:71"><call pos:start="363:13" pos:end="363:71"><name pos:start="363:13" pos:end="363:20">hw_error</name><argument_list pos:start="363:21" pos:end="363:71">(<argument pos:start="363:22" pos:end="363:60"><expr pos:start="363:22" pos:end="363:60"><literal type="string" pos:start="363:22" pos:end="363:60">"qemu: could not load LPAR rtas '%s'\n"</literal></expr></argument>, <argument pos:start="363:63" pos:end="363:70"><expr pos:start="363:63" pos:end="363:70"><name pos:start="363:63" pos:end="363:70">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="365:13" pos:end="365:20"><expr pos:start="365:13" pos:end="365:19"><call pos:start="365:13" pos:end="365:19"><name pos:start="365:13" pos:end="365:16">exit</name><argument_list pos:start="365:17" pos:end="365:19">(<argument pos:start="365:18" pos:end="365:18"><expr pos:start="365:18" pos:end="365:18"><literal type="number" pos:start="365:18" pos:end="365:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="369:9" pos:end="369:25"><expr pos:start="369:9" pos:end="369:24"><call pos:start="369:9" pos:end="369:24"><name pos:start="369:9" pos:end="369:14">g_free</name><argument_list pos:start="369:15" pos:end="369:24">(<argument pos:start="369:16" pos:end="369:23"><expr pos:start="369:16" pos:end="369:23"><name pos:start="369:16" pos:end="369:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="371:9" pos:end="371:35"><expr pos:start="371:9" pos:end="371:34"><name pos:start="371:9" pos:end="371:26"><name pos:start="371:9" pos:end="371:13">spapr</name><operator pos:start="371:14" pos:end="371:15">-&gt;</operator><name pos:start="371:16" pos:end="371:26">entry_point</name></name> <operator pos:start="371:28" pos:end="371:28">=</operator> <literal type="number" pos:start="371:30" pos:end="371:34">0x100</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="373:9" pos:end="373:24"><expr pos:start="373:9" pos:end="373:23"><name pos:start="373:9" pos:end="373:19">initrd_base</name> <operator pos:start="373:21" pos:end="373:21">=</operator> <literal type="number" pos:start="373:23" pos:end="373:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:24"><expr pos:start="375:9" pos:end="375:23"><name pos:start="375:9" pos:end="375:19">initrd_size</name> <operator pos:start="375:21" pos:end="375:21">=</operator> <literal type="number" pos:start="375:23" pos:end="375:23">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="379:9" pos:end="381:57">/* SLOF will startup the secondary CPUs using RTAS,

           rather than expecting a kexec() style entry */</comment>

        <for pos:start="383:9" pos:end="387:9">for <control pos:start="383:13" pos:end="383:63">(<init pos:start="383:14" pos:end="383:29"><expr pos:start="383:14" pos:end="383:28"><name pos:start="383:14" pos:end="383:16">env</name> <operator pos:start="383:18" pos:end="383:18">=</operator> <name pos:start="383:20" pos:end="383:28">first_cpu</name></expr>;</init> <condition pos:start="383:31" pos:end="383:42"><expr pos:start="383:31" pos:end="383:41"><name pos:start="383:31" pos:end="383:33">env</name> <operator pos:start="383:35" pos:end="383:36">!=</operator> <name pos:start="383:38" pos:end="383:41">NULL</name></expr>;</condition> <incr pos:start="383:44" pos:end="383:62"><expr pos:start="383:44" pos:end="383:62"><name pos:start="383:44" pos:end="383:46">env</name> <operator pos:start="383:48" pos:end="383:48">=</operator> <name pos:start="383:50" pos:end="383:62"><name pos:start="383:50" pos:end="383:52">env</name><operator pos:start="383:53" pos:end="383:54">-&gt;</operator><name pos:start="383:55" pos:end="383:62">next_cpu</name></name></expr></incr>)</control> <block pos:start="383:65" pos:end="387:9">{<block_content pos:start="385:13" pos:end="385:28">

            <expr_stmt pos:start="385:13" pos:end="385:28"><expr pos:start="385:13" pos:end="385:27"><name pos:start="385:13" pos:end="385:23"><name pos:start="385:13" pos:end="385:15">env</name><operator pos:start="385:16" pos:end="385:17">-&gt;</operator><name pos:start="385:18" pos:end="385:23">halted</name></name> <operator pos:start="385:25" pos:end="385:25">=</operator> <literal type="number" pos:start="385:27" pos:end="385:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="393:5" pos:end="393:33">/* Prepare the device tree */</comment>

    <expr_stmt pos:start="395:5" pos:end="401:60"><expr pos:start="395:5" pos:end="401:59"><name pos:start="395:5" pos:end="395:19"><name pos:start="395:5" pos:end="395:9">spapr</name><operator pos:start="395:10" pos:end="395:11">-&gt;</operator><name pos:start="395:12" pos:end="395:19">fdt_skel</name></name> <operator pos:start="395:21" pos:end="395:21">=</operator> <call pos:start="395:23" pos:end="401:59"><name pos:start="395:23" pos:end="395:43">spapr_create_fdt_skel</name><argument_list pos:start="395:44" pos:end="401:59">(<argument pos:start="395:45" pos:end="395:53"><expr pos:start="395:45" pos:end="395:53"><name pos:start="395:45" pos:end="395:53">cpu_model</name></expr></argument>, <argument pos:start="395:56" pos:end="395:63"><expr pos:start="395:56" pos:end="395:63"><name pos:start="395:56" pos:end="395:63">rma_size</name></expr></argument>,

                                            <argument pos:start="397:45" pos:end="397:55"><expr pos:start="397:45" pos:end="397:55"><name pos:start="397:45" pos:end="397:55">initrd_base</name></expr></argument>, <argument pos:start="397:58" pos:end="397:68"><expr pos:start="397:58" pos:end="397:68"><name pos:start="397:58" pos:end="397:68">initrd_size</name></expr></argument>,

                                            <argument pos:start="399:45" pos:end="399:55"><expr pos:start="399:45" pos:end="399:55"><name pos:start="399:45" pos:end="399:55">boot_device</name></expr></argument>, <argument pos:start="399:58" pos:end="399:71"><expr pos:start="399:58" pos:end="399:71"><name pos:start="399:58" pos:end="399:71">kernel_cmdline</name></expr></argument>,

                                            <argument pos:start="401:45" pos:end="401:58"><expr pos:start="401:45" pos:end="401:58"><name pos:start="401:45" pos:end="401:54">pteg_shift</name> <operator pos:start="401:56" pos:end="401:56">+</operator> <literal type="number" pos:start="401:58" pos:end="401:58">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:36"><expr pos:start="403:5" pos:end="403:35"><call pos:start="403:5" pos:end="403:35"><name pos:start="403:5" pos:end="403:10">assert</name><argument_list pos:start="403:11" pos:end="403:35">(<argument pos:start="403:12" pos:end="403:34"><expr pos:start="403:12" pos:end="403:34"><name pos:start="403:12" pos:end="403:26"><name pos:start="403:12" pos:end="403:16">spapr</name><operator pos:start="403:17" pos:end="403:18">-&gt;</operator><name pos:start="403:19" pos:end="403:26">fdt_skel</name></name> <operator pos:start="403:28" pos:end="403:29">!=</operator> <name pos:start="403:31" pos:end="403:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="407:5" pos:end="407:44"><expr pos:start="407:5" pos:end="407:43"><call pos:start="407:5" pos:end="407:43"><name pos:start="407:5" pos:end="407:23">qemu_register_reset</name><argument_list pos:start="407:24" pos:end="407:43">(<argument pos:start="407:25" pos:end="407:35"><expr pos:start="407:25" pos:end="407:35"><name pos:start="407:25" pos:end="407:35">spapr_reset</name></expr></argument>, <argument pos:start="407:38" pos:end="407:42"><expr pos:start="407:38" pos:end="407:42"><name pos:start="407:38" pos:end="407:42">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
