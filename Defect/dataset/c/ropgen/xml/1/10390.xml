<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10390.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">arm_gic_init</name><parameter_list pos:start="1:24" pos:end="1:42">(<parameter pos:start="1:25" pos:end="1:41"><decl pos:start="1:25" pos:end="1:41"><type pos:start="1:25" pos:end="1:38"><name pos:start="1:25" pos:end="1:36">SysBusDevice</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="7:5" pos:end="65:13">

    <comment type="block" pos:start="5:5" pos:end="5:65">/* Device instance init function for the GIC sysbus device */</comment>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">GICState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:15">s</name> <init pos:start="9:17" pos:end="9:44">= <expr pos:start="9:19" pos:end="9:44"><call pos:start="9:19" pos:end="9:44"><name pos:start="9:19" pos:end="9:29">FROM_SYSBUS</name><argument_list pos:start="9:30" pos:end="9:44">(<argument pos:start="9:31" pos:end="9:38"><expr pos:start="9:31" pos:end="9:38"><name pos:start="9:31" pos:end="9:38">GICState</name></expr></argument>, <argument pos:start="9:41" pos:end="9:43"><expr pos:start="9:41" pos:end="9:43"><name pos:start="9:41" pos:end="9:43">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:43"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">ARMGICClass</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">agc</name> <init pos:start="11:22" pos:end="11:43">= <expr pos:start="11:24" pos:end="11:43"><call pos:start="11:24" pos:end="11:43"><name pos:start="11:24" pos:end="11:40">ARM_GIC_GET_CLASS</name><argument_list pos:start="11:41" pos:end="11:43">(<argument pos:start="11:42" pos:end="11:42"><expr pos:start="11:42" pos:end="11:42"><name pos:start="11:42" pos:end="11:42">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:26"><expr pos:start="15:5" pos:end="15:25"><call pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:7">agc</name><operator pos:start="15:8" pos:end="15:9">-&gt;</operator><name pos:start="15:10" pos:end="15:20">parent_init</name></name><argument_list pos:start="15:21" pos:end="15:25">(<argument pos:start="15:22" pos:end="15:24"><expr pos:start="15:22" pos:end="15:24"><name pos:start="15:22" pos:end="15:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:49"><expr pos:start="19:5" pos:end="19:48"><call pos:start="19:5" pos:end="19:48"><name pos:start="19:5" pos:end="19:33">gic_init_irqs_and_distributor</name><argument_list pos:start="19:34" pos:end="19:48">(<argument pos:start="19:35" pos:end="19:35"><expr pos:start="19:35" pos:end="19:35"><name pos:start="19:35" pos:end="19:35">s</name></expr></argument>, <argument pos:start="19:38" pos:end="19:47"><expr pos:start="19:38" pos:end="19:47"><name pos:start="19:38" pos:end="19:47"><name pos:start="19:38" pos:end="19:38">s</name><operator pos:start="19:39" pos:end="19:40">-&gt;</operator><name pos:start="19:41" pos:end="19:47">num_irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="37:7">/* Memory regions for the CPU interfaces (NVIC doesn't have these):

     * a region for "CPU interface for this core", then a region for

     * "CPU interface for core 0", "for core 1", ...

     * NB that the memory region size of 0x100 applies for the 11MPCore

     * and also cores following the GIC v1 spec (ie A9).

     * GIC v2 defines a larger memory region (0x1000) so this will need

     * to be extended when we implement A15.

     */</comment>

    <expr_stmt pos:start="39:5" pos:end="41:44"><expr pos:start="39:5" pos:end="41:43"><call pos:start="39:5" pos:end="41:43"><name pos:start="39:5" pos:end="39:25">memory_region_init_io</name><argument_list pos:start="39:26" pos:end="41:43">(<argument pos:start="39:27" pos:end="39:41"><expr pos:start="39:27" pos:end="39:41"><operator pos:start="39:27" pos:end="39:27">&amp;</operator><name pos:start="39:28" pos:end="39:41"><name pos:start="39:28" pos:end="39:28">s</name><operator pos:start="39:29" pos:end="39:30">-&gt;</operator><name pos:start="39:31" pos:end="39:38">cpuiomem</name><index pos:start="39:39" pos:end="39:41">[<expr pos:start="39:40" pos:end="39:40"><literal type="number" pos:start="39:40" pos:end="39:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="39:44" pos:end="39:59"><expr pos:start="39:44" pos:end="39:59"><operator pos:start="39:44" pos:end="39:44">&amp;</operator><name pos:start="39:45" pos:end="39:59">gic_thiscpu_ops</name></expr></argument>, <argument pos:start="39:62" pos:end="39:62"><expr pos:start="39:62" pos:end="39:62"><name pos:start="39:62" pos:end="39:62">s</name></expr></argument>,

                          <argument pos:start="41:27" pos:end="41:35"><expr pos:start="41:27" pos:end="41:35"><literal type="string" pos:start="41:27" pos:end="41:35">"gic_cpu"</literal></expr></argument>, <argument pos:start="41:38" pos:end="41:42"><expr pos:start="41:38" pos:end="41:42"><literal type="number" pos:start="41:38" pos:end="41:42">0x100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="43:5" pos:end="51:5">for <control pos:start="43:9" pos:end="43:36">(<init pos:start="43:10" pos:end="43:15"><expr pos:start="43:10" pos:end="43:14"><name pos:start="43:10" pos:end="43:10">i</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="number" pos:start="43:14" pos:end="43:14">0</literal></expr>;</init> <condition pos:start="43:17" pos:end="43:31"><expr pos:start="43:17" pos:end="43:30"><name pos:start="43:17" pos:end="43:17">i</name> <operator pos:start="43:19" pos:end="43:19">&lt;</operator> <call pos:start="43:21" pos:end="43:30"><name pos:start="43:21" pos:end="43:27">NUM_CPU</name><argument_list pos:start="43:28" pos:end="43:30">(<argument pos:start="43:29" pos:end="43:29"><expr pos:start="43:29" pos:end="43:29"><name pos:start="43:29" pos:end="43:29">s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="43:33" pos:end="43:35"><expr pos:start="43:33" pos:end="43:35"><name pos:start="43:33" pos:end="43:33">i</name><operator pos:start="43:34" pos:end="43:35">++</operator></expr></incr>)</control> <block pos:start="43:38" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:48">

        <expr_stmt pos:start="45:9" pos:end="45:26"><expr pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:18">backref</name><index pos:start="45:19" pos:end="45:21">[<expr pos:start="45:20" pos:end="45:20"><name pos:start="45:20" pos:end="45:20">i</name></expr>]</index></name> <operator pos:start="45:23" pos:end="45:23">=</operator> <name pos:start="45:25" pos:end="45:25">s</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="49:48"><expr pos:start="47:9" pos:end="49:47"><call pos:start="47:9" pos:end="49:47"><name pos:start="47:9" pos:end="47:29">memory_region_init_io</name><argument_list pos:start="47:30" pos:end="49:47">(<argument pos:start="47:31" pos:end="47:47"><expr pos:start="47:31" pos:end="47:47"><operator pos:start="47:31" pos:end="47:31">&amp;</operator><name pos:start="47:32" pos:end="47:47"><name pos:start="47:32" pos:end="47:32">s</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:42">cpuiomem</name><index pos:start="47:43" pos:end="47:47">[<expr pos:start="47:44" pos:end="47:46"><name pos:start="47:44" pos:end="47:44">i</name><operator pos:start="47:45" pos:end="47:45">+</operator><literal type="number" pos:start="47:46" pos:end="47:46">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="47:50" pos:end="47:61"><expr pos:start="47:50" pos:end="47:61"><operator pos:start="47:50" pos:end="47:50">&amp;</operator><name pos:start="47:51" pos:end="47:61">gic_cpu_ops</name></expr></argument>, <argument pos:start="47:64" pos:end="47:77"><expr pos:start="47:64" pos:end="47:77"><operator pos:start="47:64" pos:end="47:64">&amp;</operator><name pos:start="47:65" pos:end="47:77"><name pos:start="47:65" pos:end="47:65">s</name><operator pos:start="47:66" pos:end="47:67">-&gt;</operator><name pos:start="47:68" pos:end="47:74">backref</name><index pos:start="47:75" pos:end="47:77">[<expr pos:start="47:76" pos:end="47:76"><name pos:start="47:76" pos:end="47:76">i</name></expr>]</index></name></expr></argument>,

                              <argument pos:start="49:31" pos:end="49:39"><expr pos:start="49:31" pos:end="49:39"><literal type="string" pos:start="49:31" pos:end="49:39">"gic_cpu"</literal></expr></argument>, <argument pos:start="49:42" pos:end="49:46"><expr pos:start="49:42" pos:end="49:46"><literal type="number" pos:start="49:42" pos:end="49:46">0x100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="53:5" pos:end="53:21">/* Distributor */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:37"><expr pos:start="55:5" pos:end="55:36"><call pos:start="55:5" pos:end="55:36"><name pos:start="55:5" pos:end="55:20">sysbus_init_mmio</name><argument_list pos:start="55:21" pos:end="55:36">(<argument pos:start="55:22" pos:end="55:24"><expr pos:start="55:22" pos:end="55:24"><name pos:start="55:22" pos:end="55:24">dev</name></expr></argument>, <argument pos:start="55:27" pos:end="55:35"><expr pos:start="55:27" pos:end="55:35"><operator pos:start="55:27" pos:end="55:27">&amp;</operator><name pos:start="55:28" pos:end="55:35"><name pos:start="55:28" pos:end="55:28">s</name><operator pos:start="55:29" pos:end="55:30">-&gt;</operator><name pos:start="55:31" pos:end="55:35">iomem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="57:5" pos:end="57:65">/* cpu interfaces (one for "current cpu" plus one per cpu) */</comment>

    <for pos:start="59:5" pos:end="63:5">for <control pos:start="59:9" pos:end="59:37">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">i</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:32"><expr pos:start="59:17" pos:end="59:31"><name pos:start="59:17" pos:end="59:17">i</name> <operator pos:start="59:19" pos:end="59:20">&lt;=</operator> <call pos:start="59:22" pos:end="59:31"><name pos:start="59:22" pos:end="59:28">NUM_CPU</name><argument_list pos:start="59:29" pos:end="59:31">(<argument pos:start="59:30" pos:end="59:30"><expr pos:start="59:30" pos:end="59:30"><name pos:start="59:30" pos:end="59:30">s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="59:34" pos:end="59:36"><expr pos:start="59:34" pos:end="59:36"><name pos:start="59:34" pos:end="59:34">i</name><operator pos:start="59:35" pos:end="59:36">++</operator></expr></incr>)</control> <block pos:start="59:39" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:47">

        <expr_stmt pos:start="61:9" pos:end="61:47"><expr pos:start="61:9" pos:end="61:46"><call pos:start="61:9" pos:end="61:46"><name pos:start="61:9" pos:end="61:24">sysbus_init_mmio</name><argument_list pos:start="61:25" pos:end="61:46">(<argument pos:start="61:26" pos:end="61:28"><expr pos:start="61:26" pos:end="61:28"><name pos:start="61:26" pos:end="61:28">dev</name></expr></argument>, <argument pos:start="61:31" pos:end="61:45"><expr pos:start="61:31" pos:end="61:45"><operator pos:start="61:31" pos:end="61:31">&amp;</operator><name pos:start="61:32" pos:end="61:45"><name pos:start="61:32" pos:end="61:32">s</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:42">cpuiomem</name><index pos:start="61:43" pos:end="61:45">[<expr pos:start="61:44" pos:end="61:44"><name pos:start="61:44" pos:end="61:44">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="65:5" pos:end="65:13">return <expr pos:start="65:12" pos:end="65:12"><literal type="number" pos:start="65:12" pos:end="65:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
