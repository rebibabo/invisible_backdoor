<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11512.c" pos:tabs="8"><function pos:start="1:1" pos:end="28:12"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:29">qemu_aio_coroutine_enter</name><parameter_list pos:start="1:30" pos:end="1:61">(<parameter pos:start="1:31" pos:end="1:45"><decl pos:start="1:31" pos:end="1:45"><type pos:start="1:31" pos:end="1:45"><name pos:start="1:31" pos:end="1:40">AioContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">ctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:60"><decl pos:start="1:48" pos:end="1:60"><type pos:start="1:48" pos:end="1:60"><name pos:start="1:48" pos:end="1:56">Coroutine</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:60">co</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="28:12">{<block_content pos:start="3:5" pos:end="28:12">
    <decl_stmt pos:start="3:5" pos:end="3:44"><decl pos:start="3:5" pos:end="3:43"><type pos:start="3:5" pos:end="3:15"><name pos:start="3:5" pos:end="3:13">Coroutine</name> <modifier pos:start="3:15" pos:end="3:15">*</modifier></type><name pos:start="3:16" pos:end="3:19">self</name> <init pos:start="3:21" pos:end="3:43">= <expr pos:start="3:23" pos:end="3:43"><call pos:start="3:23" pos:end="3:43"><name pos:start="3:23" pos:end="3:41">qemu_coroutine_self</name><argument_list pos:start="3:42" pos:end="3:43">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:24"><decl pos:start="4:5" pos:end="4:23"><type pos:start="4:5" pos:end="4:19"><name pos:start="4:5" pos:end="4:19">CoroutineAction</name></type> <name pos:start="4:21" pos:end="4:23">ret</name></decl>;</decl_stmt>
    <expr_stmt pos:start="5:5" pos:end="5:65"><expr pos:start="5:5" pos:end="5:64"><call pos:start="5:5" pos:end="5:64"><name pos:start="5:5" pos:end="5:34">trace_qemu_aio_coroutine_enter</name><argument_list pos:start="5:35" pos:end="5:64">(<argument pos:start="5:36" pos:end="5:38"><expr pos:start="5:36" pos:end="5:38"><name pos:start="5:36" pos:end="5:38">ctx</name></expr></argument>, <argument pos:start="5:41" pos:end="5:44"><expr pos:start="5:41" pos:end="5:44"><name pos:start="5:41" pos:end="5:44">self</name></expr></argument>, <argument pos:start="5:47" pos:end="5:48"><expr pos:start="5:47" pos:end="5:48"><name pos:start="5:47" pos:end="5:48">co</name></expr></argument>, <argument pos:start="5:51" pos:end="5:63"><expr pos:start="5:51" pos:end="5:63"><name pos:start="5:51" pos:end="5:63"><name pos:start="5:51" pos:end="5:52">co</name><operator pos:start="5:53" pos:end="5:54">-&gt;</operator><name pos:start="5:55" pos:end="5:63">entry_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="6:5" pos:end="28:12"><if pos:start="6:5" pos:end="28:12">if <condition pos:start="6:8" pos:end="6:19">(<expr pos:start="6:9" pos:end="6:18"><name pos:start="6:9" pos:end="6:18"><name pos:start="6:9" pos:end="6:10">co</name><operator pos:start="6:11" pos:end="6:12">-&gt;</operator><name pos:start="6:13" pos:end="6:18">caller</name></name></expr>)</condition> <block pos:start="6:21" pos:end="28:12">{<block_content pos:start="7:9" pos:end="28:12">
        <expr_stmt pos:start="7:9" pos:end="7:63"><expr pos:start="7:9" pos:end="7:62"><call pos:start="7:9" pos:end="7:62"><name pos:start="7:9" pos:end="7:15">fprintf</name><argument_list pos:start="7:16" pos:end="7:62">(<argument pos:start="7:17" pos:end="7:22"><expr pos:start="7:17" pos:end="7:22"><name pos:start="7:17" pos:end="7:22">stderr</name></expr></argument>, <argument pos:start="7:25" pos:end="7:61"><expr pos:start="7:25" pos:end="7:61"><literal type="string" pos:start="7:25" pos:end="7:61">"Co-routine re-entered recursively\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="8:5" pos:end="8:22"><expr pos:start="8:5" pos:end="8:21"><name pos:start="8:5" pos:end="8:14"><name pos:start="8:5" pos:end="8:6">co</name><operator pos:start="8:7" pos:end="8:8">-&gt;</operator><name pos:start="8:9" pos:end="8:14">caller</name></name> <operator pos:start="8:16" pos:end="8:16">=</operator> <name pos:start="8:18" pos:end="8:21">self</name></expr>;</expr_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:18"><expr pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:6">co</name><operator pos:start="9:7" pos:end="9:8">-&gt;</operator><name pos:start="9:9" pos:end="9:11">ctx</name></name> <operator pos:start="9:13" pos:end="9:13">=</operator> <name pos:start="9:15" pos:end="9:17">ctx</name></expr>;</expr_stmt>
    <comment type="block" pos:start="10:5" pos:end="12:7">/* Store co-&gt;ctx before anything that stores co.  Matches
     * barrier in aio_co_wake and qemu_co_mutex_wake.
     */</comment>
    <expr_stmt pos:start="13:5" pos:end="13:14"><expr pos:start="13:5" pos:end="13:13"><call pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">smp_wmb</name><argument_list pos:start="13:12" pos:end="13:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:59"><expr pos:start="14:5" pos:end="14:58"><name pos:start="14:5" pos:end="14:7">ret</name> <operator pos:start="14:9" pos:end="14:9">=</operator> <call pos:start="14:11" pos:end="14:58"><name pos:start="14:11" pos:end="14:31">qemu_coroutine_switch</name><argument_list pos:start="14:32" pos:end="14:58">(<argument pos:start="14:33" pos:end="14:36"><expr pos:start="14:33" pos:end="14:36"><name pos:start="14:33" pos:end="14:36">self</name></expr></argument>, <argument pos:start="14:39" pos:end="14:40"><expr pos:start="14:39" pos:end="14:40"><name pos:start="14:39" pos:end="14:40">co</name></expr></argument>, <argument pos:start="14:43" pos:end="14:57"><expr pos:start="14:43" pos:end="14:57"><name pos:start="14:43" pos:end="14:57">COROUTINE_ENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:34"><expr pos:start="15:5" pos:end="15:33"><call pos:start="15:5" pos:end="15:33"><name pos:start="15:5" pos:end="15:29">qemu_co_queue_run_restart</name><argument_list pos:start="15:30" pos:end="15:33">(<argument pos:start="15:31" pos:end="15:32"><expr pos:start="15:31" pos:end="15:32"><name pos:start="15:31" pos:end="15:32">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="16:5" pos:end="19:7">/* Beware, if ret == COROUTINE_YIELD and qemu_co_queue_run_restart()
     * has started any other coroutine, "co" might have been reentered
     * and even freed by now!  So be careful and do not touch it.
     */</comment>
    <switch pos:start="20:5" pos:end="28:12">switch <condition pos:start="20:12" pos:end="20:16">(<expr pos:start="20:13" pos:end="20:15"><name pos:start="20:13" pos:end="20:15">ret</name></expr>)</condition> <block pos:start="20:18" pos:end="28:12">{<block_content pos:start="21:5" pos:end="28:12">
    <case pos:start="21:5" pos:end="21:25">case <expr pos:start="21:10" pos:end="21:24"><name pos:start="21:10" pos:end="21:24">COROUTINE_YIELD</name></expr>:</case>
        <return pos:start="22:9" pos:end="22:15">return;</return>
    <case pos:start="23:5" pos:end="23:29">case <expr pos:start="23:10" pos:end="23:28"><name pos:start="23:10" pos:end="23:28">COROUTINE_TERMINATE</name></expr>:</case>
        <expr_stmt pos:start="24:9" pos:end="24:32"><expr pos:start="24:9" pos:end="24:31"><call pos:start="24:9" pos:end="24:31"><name pos:start="24:9" pos:end="24:14">assert</name><argument_list pos:start="24:15" pos:end="24:31">(<argument pos:start="24:16" pos:end="24:30"><expr pos:start="24:16" pos:end="24:30"><operator pos:start="24:16" pos:end="24:16">!</operator><name pos:start="24:17" pos:end="24:30"><name pos:start="24:17" pos:end="24:18">co</name><operator pos:start="24:19" pos:end="24:20">-&gt;</operator><name pos:start="24:21" pos:end="24:30">locks_held</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="25:9" pos:end="25:43"><expr pos:start="25:9" pos:end="25:42"><call pos:start="25:9" pos:end="25:42"><name pos:start="25:9" pos:end="25:38">trace_qemu_coroutine_terminate</name><argument_list pos:start="25:39" pos:end="25:42">(<argument pos:start="25:40" pos:end="25:41"><expr pos:start="25:40" pos:end="25:41"><name pos:start="25:40" pos:end="25:41">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="26:9" pos:end="26:29"><expr pos:start="26:9" pos:end="26:28"><call pos:start="26:9" pos:end="26:28"><name pos:start="26:9" pos:end="26:24">coroutine_delete</name><argument_list pos:start="26:25" pos:end="26:28">(<argument pos:start="26:26" pos:end="26:27"><expr pos:start="26:26" pos:end="26:27"><name pos:start="26:26" pos:end="26:27">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="27:9" pos:end="27:15">return;</return>
    <default pos:start="28:5" pos:end="28:12">default:</default></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></function></unit>
