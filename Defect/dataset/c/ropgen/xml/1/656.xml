<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/656.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">pci_bridge_dev_initfn</name><parameter_list pos:start="1:33" pos:end="1:48">(<parameter pos:start="1:34" pos:end="1:47"><decl pos:start="1:34" pos:end="1:47"><type pos:start="1:34" pos:end="1:44"><name pos:start="1:34" pos:end="1:42">PCIDevice</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:15">

    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:50"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PCIBridge</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:17">br</name> <init pos:start="5:19" pos:end="5:50">= <expr pos:start="5:21" pos:end="5:50"><call pos:start="5:21" pos:end="5:50"><name pos:start="5:21" pos:end="5:29">DO_UPCAST</name><argument_list pos:start="5:30" pos:end="5:50">(<argument pos:start="5:31" pos:end="5:39"><expr pos:start="5:31" pos:end="5:39"><name pos:start="5:31" pos:end="5:39">PCIBridge</name></expr></argument>, <argument pos:start="5:42" pos:end="5:44"><expr pos:start="5:42" pos:end="5:44"><name pos:start="5:42" pos:end="5:44">dev</name></expr></argument>, <argument pos:start="5:47" pos:end="5:49"><expr pos:start="5:47" pos:end="5:49"><name pos:start="5:47" pos:end="5:49">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:67"><decl pos:start="7:5" pos:end="7:66"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">PCIBridgeDev</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:28">bridge_dev</name> <init pos:start="7:30" pos:end="7:66">= <expr pos:start="7:32" pos:end="7:66"><call pos:start="7:32" pos:end="7:66"><name pos:start="7:32" pos:end="7:40">DO_UPCAST</name><argument_list pos:start="7:41" pos:end="7:66">(<argument pos:start="7:42" pos:end="7:53"><expr pos:start="7:42" pos:end="7:53"><name pos:start="7:42" pos:end="7:53">PCIBridgeDev</name></expr></argument>, <argument pos:start="7:56" pos:end="7:61"><expr pos:start="7:56" pos:end="7:61"><name pos:start="7:56" pos:end="7:61">bridge</name></expr></argument>, <argument pos:start="7:64" pos:end="7:65"><expr pos:start="7:64" pos:end="7:65"><name pos:start="7:64" pos:end="7:65">br</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">err</name></decl>;</decl_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:60"><expr pos:start="11:5" pos:end="11:59"><call pos:start="11:5" pos:end="11:59"><name pos:start="11:5" pos:end="11:22">pci_bridge_map_irq</name><argument_list pos:start="11:23" pos:end="11:59">(<argument pos:start="11:24" pos:end="11:25"><expr pos:start="11:24" pos:end="11:25"><name pos:start="11:24" pos:end="11:25">br</name></expr></argument>, <argument pos:start="11:28" pos:end="11:31"><expr pos:start="11:28" pos:end="11:31"><name pos:start="11:28" pos:end="11:31">NULL</name></expr></argument>, <argument pos:start="11:34" pos:end="11:58"><expr pos:start="11:34" pos:end="11:58"><name pos:start="11:34" pos:end="11:58">pci_bridge_dev_map_irq_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:33"><expr pos:start="13:5" pos:end="13:32"><name pos:start="13:5" pos:end="13:7">err</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:32"><name pos:start="13:11" pos:end="13:27">pci_bridge_initfn</name><argument_list pos:start="13:28" pos:end="13:32">(<argument pos:start="13:29" pos:end="13:31"><expr pos:start="13:29" pos:end="13:31"><name pos:start="13:29" pos:end="13:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:12">(<expr pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">err</name></expr>)</condition> <block pos:start="15:14" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:26">

        <goto pos:start="17:9" pos:end="17:26">goto <name pos:start="17:14" pos:end="17:25">bridge_error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:73"><expr pos:start="21:5" pos:end="21:72"><call pos:start="21:5" pos:end="21:72"><name pos:start="21:5" pos:end="21:22">memory_region_init</name><argument_list pos:start="21:23" pos:end="21:72">(<argument pos:start="21:24" pos:end="21:39"><expr pos:start="21:24" pos:end="21:39"><operator pos:start="21:24" pos:end="21:24">&amp;</operator><name pos:start="21:25" pos:end="21:39"><name pos:start="21:25" pos:end="21:34">bridge_dev</name><operator pos:start="21:35" pos:end="21:36">-&gt;</operator><name pos:start="21:37" pos:end="21:39">bar</name></name></expr></argument>, <argument pos:start="21:42" pos:end="21:51"><expr pos:start="21:42" pos:end="21:51"><literal type="string" pos:start="21:42" pos:end="21:51">"shpc-bar"</literal></expr></argument>, <argument pos:start="21:54" pos:end="21:71"><expr pos:start="21:54" pos:end="21:71"><call pos:start="21:54" pos:end="21:71"><name pos:start="21:54" pos:end="21:66">shpc_bar_size</name><argument_list pos:start="21:67" pos:end="21:71">(<argument pos:start="21:68" pos:end="21:70"><expr pos:start="21:68" pos:end="21:70"><name pos:start="21:68" pos:end="21:70">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:60"><expr pos:start="23:5" pos:end="23:59"><name pos:start="23:5" pos:end="23:7">err</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:59"><name pos:start="23:11" pos:end="23:19">shpc_init</name><argument_list pos:start="23:20" pos:end="23:59">(<argument pos:start="23:21" pos:end="23:23"><expr pos:start="23:21" pos:end="23:23"><name pos:start="23:21" pos:end="23:23">dev</name></expr></argument>, <argument pos:start="23:26" pos:end="23:37"><expr pos:start="23:26" pos:end="23:37"><operator pos:start="23:26" pos:end="23:26">&amp;</operator><name pos:start="23:27" pos:end="23:37"><name pos:start="23:27" pos:end="23:28">br</name><operator pos:start="23:29" pos:end="23:30">-&gt;</operator><name pos:start="23:31" pos:end="23:37">sec_bus</name></name></expr></argument>, <argument pos:start="23:40" pos:end="23:55"><expr pos:start="23:40" pos:end="23:55"><operator pos:start="23:40" pos:end="23:40">&amp;</operator><name pos:start="23:41" pos:end="23:55"><name pos:start="23:41" pos:end="23:50">bridge_dev</name><operator pos:start="23:51" pos:end="23:52">-&gt;</operator><name pos:start="23:53" pos:end="23:55">bar</name></name></expr></argument>, <argument pos:start="23:58" pos:end="23:58"><expr pos:start="23:58" pos:end="23:58"><literal type="number" pos:start="23:58" pos:end="23:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:12">(<expr pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">err</name></expr>)</condition> <block pos:start="25:14" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:24">

        <goto pos:start="27:9" pos:end="27:24">goto <name pos:start="27:14" pos:end="27:23">shpc_error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:61"><expr pos:start="31:5" pos:end="31:60"><name pos:start="31:5" pos:end="31:7">err</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:60"><name pos:start="31:11" pos:end="31:25">slotid_cap_init</name><argument_list pos:start="31:26" pos:end="31:60">(<argument pos:start="31:27" pos:end="31:29"><expr pos:start="31:27" pos:end="31:29"><name pos:start="31:27" pos:end="31:29">dev</name></expr></argument>, <argument pos:start="31:32" pos:end="31:32"><expr pos:start="31:32" pos:end="31:32"><literal type="number" pos:start="31:32" pos:end="31:32">0</literal></expr></argument>, <argument pos:start="31:35" pos:end="31:56"><expr pos:start="31:35" pos:end="31:56"><name pos:start="31:35" pos:end="31:56"><name pos:start="31:35" pos:end="31:44">bridge_dev</name><operator pos:start="31:45" pos:end="31:46">-&gt;</operator><name pos:start="31:47" pos:end="31:56">chassis_nr</name></name></expr></argument>, <argument pos:start="31:59" pos:end="31:59"><expr pos:start="31:59" pos:end="31:59"><literal type="number" pos:start="31:59" pos:end="31:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:12">(<expr pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">err</name></expr>)</condition> <block pos:start="33:14" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:26">

        <goto pos:start="35:9" pos:end="35:26">goto <name pos:start="35:14" pos:end="35:25">slotid_error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="51:5"><if pos:start="39:5" pos:end="51:5">if <condition pos:start="39:8" pos:end="41:22">(<expr pos:start="39:9" pos:end="41:21"><operator pos:start="39:9" pos:end="39:9">(</operator><name pos:start="39:10" pos:end="39:26"><name pos:start="39:10" pos:end="39:19">bridge_dev</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:26">flags</name></name> <operator pos:start="39:28" pos:end="39:28">&amp;</operator> <operator pos:start="39:30" pos:end="39:30">(</operator><literal type="number" pos:start="39:31" pos:end="39:31">1</literal> <operator pos:start="39:33" pos:end="39:34">&lt;&lt;</operator> <name pos:start="39:36" pos:end="39:59">PCI_BRIDGE_DEV_F_MSI_REQ</name><operator pos:start="39:60" pos:end="39:60">)</operator><operator pos:start="39:61" pos:end="39:61">)</operator> <operator pos:start="39:63" pos:end="39:64">&amp;&amp;</operator>

        <name pos:start="41:9" pos:end="41:21">msi_supported</name></expr>)</condition> <block pos:start="41:24" pos:end="51:5">{<block_content pos:start="43:9" pos:end="49:9">

        <expr_stmt pos:start="43:9" pos:end="43:46"><expr pos:start="43:9" pos:end="43:45"><name pos:start="43:9" pos:end="43:11">err</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:45"><name pos:start="43:15" pos:end="43:22">msi_init</name><argument_list pos:start="43:23" pos:end="43:45">(<argument pos:start="43:24" pos:end="43:26"><expr pos:start="43:24" pos:end="43:26"><name pos:start="43:24" pos:end="43:26">dev</name></expr></argument>, <argument pos:start="43:29" pos:end="43:29"><expr pos:start="43:29" pos:end="43:29"><literal type="number" pos:start="43:29" pos:end="43:29">0</literal></expr></argument>, <argument pos:start="43:32" pos:end="43:32"><expr pos:start="43:32" pos:end="43:32"><literal type="number" pos:start="43:32" pos:end="43:32">1</literal></expr></argument>, <argument pos:start="43:35" pos:end="43:38"><expr pos:start="43:35" pos:end="43:38"><name pos:start="43:35" pos:end="43:38">true</name></expr></argument>, <argument pos:start="43:41" pos:end="43:44"><expr pos:start="43:41" pos:end="43:44"><name pos:start="43:41" pos:end="43:44">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="49:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:20">(<expr pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:15">err</name> <operator pos:start="45:17" pos:end="45:17">&lt;</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>)</condition> <block pos:start="45:22" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:27">

            <goto pos:start="47:13" pos:end="47:27">goto <name pos:start="47:18" pos:end="47:26">msi_error</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="53:5" pos:end="55:40">/* TODO: spec recommends using 64 bit prefetcheable BAR.

     * Check whether that works well. */</comment>

    <expr_stmt pos:start="57:5" pos:end="59:69"><expr pos:start="57:5" pos:end="59:68"><call pos:start="57:5" pos:end="59:68"><name pos:start="57:5" pos:end="57:20">pci_register_bar</name><argument_list pos:start="57:21" pos:end="59:68">(<argument pos:start="57:22" pos:end="57:24"><expr pos:start="57:22" pos:end="57:24"><name pos:start="57:22" pos:end="57:24">dev</name></expr></argument>, <argument pos:start="57:27" pos:end="57:27"><expr pos:start="57:27" pos:end="57:27"><literal type="number" pos:start="57:27" pos:end="57:27">0</literal></expr></argument>, <argument pos:start="57:30" pos:end="59:49"><expr pos:start="57:30" pos:end="59:49"><name pos:start="57:30" pos:end="57:58">PCI_BASE_ADDRESS_SPACE_MEMORY</name> <operator pos:start="57:60" pos:end="57:60">|</operator>

		     <name pos:start="59:22" pos:end="59:49">PCI_BASE_ADDRESS_MEM_TYPE_64</name></expr></argument>, <argument pos:start="59:52" pos:end="59:67"><expr pos:start="59:52" pos:end="59:67"><operator pos:start="59:52" pos:end="59:52">&amp;</operator><name pos:start="59:53" pos:end="59:67"><name pos:start="59:53" pos:end="59:62">bridge_dev</name><operator pos:start="59:63" pos:end="59:64">-&gt;</operator><name pos:start="59:65" pos:end="59:67">bar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:41"><expr pos:start="61:5" pos:end="61:40"><name pos:start="61:5" pos:end="61:34"><name pos:start="61:5" pos:end="61:7">dev</name><operator pos:start="61:8" pos:end="61:9">-&gt;</operator><name pos:start="61:10" pos:end="61:15">config</name><index pos:start="61:16" pos:end="61:34">[<expr pos:start="61:17" pos:end="61:33"><name pos:start="61:17" pos:end="61:33">PCI_INTERRUPT_PIN</name></expr>]</index></name> <operator pos:start="61:36" pos:end="61:36">=</operator> <literal type="number" pos:start="61:38" pos:end="61:40">0x1</literal></expr>;</expr_stmt>

    <return pos:start="63:5" pos:end="63:13">return <expr pos:start="63:12" pos:end="63:12"><literal type="number" pos:start="63:12" pos:end="63:12">0</literal></expr>;</return>

<label pos:start="65:1" pos:end="65:10"><name pos:start="65:1" pos:end="65:9">msi_error</name>:</label>

    <expr_stmt pos:start="67:5" pos:end="67:28"><expr pos:start="67:5" pos:end="67:27"><call pos:start="67:5" pos:end="67:27"><name pos:start="67:5" pos:end="67:22">slotid_cap_cleanup</name><argument_list pos:start="67:23" pos:end="67:27">(<argument pos:start="67:24" pos:end="67:26"><expr pos:start="67:24" pos:end="67:26"><name pos:start="67:24" pos:end="67:26">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="69:1" pos:end="69:13"><name pos:start="69:1" pos:end="69:12">slotid_error</name>:</label>

    <expr_stmt pos:start="71:5" pos:end="71:40"><expr pos:start="71:5" pos:end="71:39"><call pos:start="71:5" pos:end="71:39"><name pos:start="71:5" pos:end="71:16">shpc_cleanup</name><argument_list pos:start="71:17" pos:end="71:39">(<argument pos:start="71:18" pos:end="71:20"><expr pos:start="71:18" pos:end="71:20"><name pos:start="71:18" pos:end="71:20">dev</name></expr></argument>, <argument pos:start="71:23" pos:end="71:38"><expr pos:start="71:23" pos:end="71:38"><operator pos:start="71:23" pos:end="71:23">&amp;</operator><name pos:start="71:24" pos:end="71:38"><name pos:start="71:24" pos:end="71:33">bridge_dev</name><operator pos:start="71:34" pos:end="71:35">-&gt;</operator><name pos:start="71:36" pos:end="71:38">bar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="73:1" pos:end="73:11"><name pos:start="73:1" pos:end="73:10">shpc_error</name>:</label>

    <expr_stmt pos:start="75:5" pos:end="75:44"><expr pos:start="75:5" pos:end="75:43"><call pos:start="75:5" pos:end="75:43"><name pos:start="75:5" pos:end="75:25">memory_region_destroy</name><argument_list pos:start="75:26" pos:end="75:43">(<argument pos:start="75:27" pos:end="75:42"><expr pos:start="75:27" pos:end="75:42"><operator pos:start="75:27" pos:end="75:27">&amp;</operator><name pos:start="75:28" pos:end="75:42"><name pos:start="75:28" pos:end="75:37">bridge_dev</name><operator pos:start="75:38" pos:end="75:39">-&gt;</operator><name pos:start="75:40" pos:end="75:42">bar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="77:1" pos:end="77:13"><name pos:start="77:1" pos:end="77:12">bridge_error</name>:</label>

    <return pos:start="79:5" pos:end="79:15">return <expr pos:start="79:12" pos:end="79:14"><name pos:start="79:12" pos:end="79:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
