<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/933.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:15">slirp_init</name><parameter_list pos:start="1:16" pos:end="9:43">(<parameter pos:start="1:17" pos:end="1:30"><decl pos:start="1:17" pos:end="1:30"><type pos:start="1:17" pos:end="1:30"><name pos:start="1:17" pos:end="1:19">int</name></type> <name pos:start="1:21" pos:end="1:30">restricted</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:55"><decl pos:start="1:33" pos:end="1:55"><type pos:start="1:33" pos:end="1:55"><name pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:38">struct</name> <name pos:start="1:40" pos:end="1:46">in_addr</name></name></type> <name pos:start="1:48" pos:end="1:55">vnetwork</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:39"><decl pos:start="3:17" pos:end="3:39"><type pos:start="3:17" pos:end="3:39"><name pos:start="3:17" pos:end="3:30"><name pos:start="3:17" pos:end="3:22">struct</name> <name pos:start="3:24" pos:end="3:30">in_addr</name></name></type> <name pos:start="3:32" pos:end="3:39">vnetmask</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:61"><decl pos:start="3:42" pos:end="3:61"><type pos:start="3:42" pos:end="3:61"><name pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:47">struct</name> <name pos:start="3:49" pos:end="3:55">in_addr</name></name></type> <name pos:start="3:57" pos:end="3:61">vhost</name></decl></parameter>,

                <parameter pos:start="5:17" pos:end="5:37"><decl pos:start="5:17" pos:end="5:37"><type pos:start="5:17" pos:end="5:37"><specifier pos:start="5:17" pos:end="5:21">const</specifier> <name pos:start="5:23" pos:end="5:26">char</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:37">vhostname</name></decl></parameter>, <parameter pos:start="5:40" pos:end="5:60"><decl pos:start="5:40" pos:end="5:60"><type pos:start="5:40" pos:end="5:60"><specifier pos:start="5:40" pos:end="5:44">const</specifier> <name pos:start="5:46" pos:end="5:49">char</name> <modifier pos:start="5:51" pos:end="5:51">*</modifier></type><name pos:start="5:52" pos:end="5:60">tftp_path</name></decl></parameter>,

                <parameter pos:start="7:17" pos:end="7:36"><decl pos:start="7:17" pos:end="7:36"><type pos:start="7:17" pos:end="7:36"><specifier pos:start="7:17" pos:end="7:21">const</specifier> <name pos:start="7:23" pos:end="7:26">char</name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:36">bootfile</name></decl></parameter>, <parameter pos:start="7:39" pos:end="7:64"><decl pos:start="7:39" pos:end="7:64"><type pos:start="7:39" pos:end="7:64"><name pos:start="7:39" pos:end="7:52"><name pos:start="7:39" pos:end="7:44">struct</name> <name pos:start="7:46" pos:end="7:52">in_addr</name></name></type> <name pos:start="7:54" pos:end="7:64">vdhcp_start</name></decl></parameter>,

                <parameter pos:start="9:17" pos:end="9:42"><decl pos:start="9:17" pos:end="9:42"><type pos:start="9:17" pos:end="9:42"><name pos:start="9:17" pos:end="9:30"><name pos:start="9:17" pos:end="9:22">struct</name> <name pos:start="9:24" pos:end="9:30">in_addr</name></name></type> <name pos:start="9:32" pos:end="9:42">vnameserver</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="103:1">{<block_content pos:start="15:5" pos:end="101:77">

<cpp:ifdef pos:start="13:1" pos:end="13:13">#<cpp:directive pos:start="13:2" pos:end="13:6">ifdef</cpp:directive> <name pos:start="13:8" pos:end="13:13">_WIN32</name></cpp:ifdef>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">WSADATA</name></type> <name pos:start="15:13" pos:end="15:16">Data</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:37"><expr pos:start="19:5" pos:end="19:36"><call pos:start="19:5" pos:end="19:36"><name pos:start="19:5" pos:end="19:14">WSAStartup</name><argument_list pos:start="19:15" pos:end="19:36">(<argument pos:start="19:16" pos:end="19:28"><expr pos:start="19:16" pos:end="19:28"><call pos:start="19:16" pos:end="19:28"><name pos:start="19:16" pos:end="19:23">MAKEWORD</name><argument_list pos:start="19:24" pos:end="19:28">(<argument pos:start="19:25" pos:end="19:25"><expr pos:start="19:25" pos:end="19:25"><literal type="number" pos:start="19:25" pos:end="19:25">2</literal></expr></argument>,<argument pos:start="19:27" pos:end="19:27"><expr pos:start="19:27" pos:end="19:27"><literal type="number" pos:start="19:27" pos:end="19:27">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="19:31" pos:end="19:35"><expr pos:start="19:31" pos:end="19:35"><operator pos:start="19:31" pos:end="19:31">&amp;</operator><name pos:start="19:32" pos:end="19:35">Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="24:0"><expr pos:start="21:5" pos:end="21:25"><call pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:10">atexit</name><argument_list pos:start="21:11" pos:end="21:25">(<argument pos:start="21:12" pos:end="21:24"><expr pos:start="21:12" pos:end="21:24"><name pos:start="21:12" pos:end="21:24">slirp_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="27:5" pos:end="27:16"><expr pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:11">link_up</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <literal type="number" pos:start="27:15" pos:end="27:15">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:32"><expr pos:start="29:5" pos:end="29:31"><name pos:start="29:5" pos:end="29:18">slirp_restrict</name> <operator pos:start="29:20" pos:end="29:20">=</operator> <name pos:start="29:22" pos:end="29:31">restricted</name></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:14"><expr pos:start="33:5" pos:end="33:13"><call pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:11">if_init</name><argument_list pos:start="33:12" pos:end="33:13">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:14"><expr pos:start="35:5" pos:end="35:13"><call pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:11">ip_init</name><argument_list pos:start="35:12" pos:end="35:13">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:50">/* Initialise mbufs *after* setting the MTU */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:13"><expr pos:start="41:5" pos:end="41:12"><call pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:10">m_init</name><argument_list pos:start="41:11" pos:end="41:12">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:31">/* set default addresses */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:43"><expr pos:start="47:5" pos:end="47:42"><call pos:start="47:5" pos:end="47:42"><name pos:start="47:5" pos:end="47:13">inet_aton</name><argument_list pos:start="47:14" pos:end="47:42">(<argument pos:start="47:15" pos:end="47:25"><expr pos:start="47:15" pos:end="47:25"><literal type="string" pos:start="47:15" pos:end="47:25">"127.0.0.1"</literal></expr></argument>, <argument pos:start="47:28" pos:end="47:41"><expr pos:start="47:28" pos:end="47:41"><operator pos:start="47:28" pos:end="47:28">&amp;</operator><name pos:start="47:29" pos:end="47:41">loopback_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:36">(<expr pos:start="51:9" pos:end="51:35"><call pos:start="51:9" pos:end="51:31"><name pos:start="51:9" pos:end="51:20">get_dns_addr</name><argument_list pos:start="51:21" pos:end="51:31">(<argument pos:start="51:22" pos:end="51:30"><expr pos:start="51:22" pos:end="51:30"><operator pos:start="51:22" pos:end="51:22">&amp;</operator><name pos:start="51:23" pos:end="51:30">dns_addr</name></expr></argument>)</argument_list></call> <operator pos:start="51:33" pos:end="51:33">&lt;</operator> <literal type="number" pos:start="51:35" pos:end="51:35">0</literal></expr>)</condition> <block pos:start="51:38" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:60">

        <expr_stmt pos:start="53:9" pos:end="53:33"><expr pos:start="53:9" pos:end="53:32"><name pos:start="53:9" pos:end="53:16">dns_addr</name> <operator pos:start="53:18" pos:end="53:18">=</operator> <name pos:start="53:20" pos:end="53:32">loopback_addr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:60"><expr pos:start="55:9" pos:end="55:59"><call pos:start="55:9" pos:end="55:59"><name pos:start="55:9" pos:end="55:15">fprintf</name> <argument_list pos:start="55:17" pos:end="55:59">(<argument pos:start="55:18" pos:end="55:23"><expr pos:start="55:18" pos:end="55:23"><name pos:start="55:18" pos:end="55:23">stderr</name></expr></argument>, <argument pos:start="55:26" pos:end="55:58"><expr pos:start="55:26" pos:end="55:58"><literal type="string" pos:start="55:26" pos:end="55:58">"Warning: No DNS servers found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:29"><expr pos:start="61:5" pos:end="61:28"><name pos:start="61:5" pos:end="61:17">vnetwork_addr</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <name pos:start="61:21" pos:end="61:28">vnetwork</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:29"><expr pos:start="63:5" pos:end="63:28"><name pos:start="63:5" pos:end="63:17">vnetwork_mask</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <name pos:start="63:21" pos:end="63:28">vnetmask</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:23"><expr pos:start="65:5" pos:end="65:22"><name pos:start="65:5" pos:end="65:14">vhost_addr</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <name pos:start="65:18" pos:end="65:22">vhost</name></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:18">(<expr pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:17">vhostname</name></expr>)</condition> <block pos:start="67:20" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:67">

        <expr_stmt pos:start="69:9" pos:end="69:67"><expr pos:start="69:9" pos:end="69:66"><call pos:start="69:9" pos:end="69:66"><name pos:start="69:9" pos:end="69:15">pstrcpy</name><argument_list pos:start="69:16" pos:end="69:66">(<argument pos:start="69:17" pos:end="69:30"><expr pos:start="69:17" pos:end="69:30"><name pos:start="69:17" pos:end="69:30">slirp_hostname</name></expr></argument>, <argument pos:start="69:33" pos:end="69:54"><expr pos:start="69:33" pos:end="69:54"><sizeof pos:start="69:33" pos:end="69:54">sizeof<argument_list pos:start="69:39" pos:end="69:54">(<argument pos:start="69:40" pos:end="69:53"><expr pos:start="69:40" pos:end="69:53"><name pos:start="69:40" pos:end="69:53">slirp_hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="69:57" pos:end="69:65"><expr pos:start="69:57" pos:end="69:65"><name pos:start="69:57" pos:end="69:65">vhostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:27"><expr pos:start="73:5" pos:end="73:26"><call pos:start="73:5" pos:end="73:26"><name pos:start="73:5" pos:end="73:13">qemu_free</name><argument_list pos:start="73:14" pos:end="73:26">(<argument pos:start="73:15" pos:end="73:25"><expr pos:start="73:15" pos:end="73:25"><name pos:start="73:15" pos:end="73:25">tftp_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:23"><expr pos:start="75:5" pos:end="75:22"><name pos:start="75:5" pos:end="75:15">tftp_prefix</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <name pos:start="75:19" pos:end="75:22">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:18">(<expr pos:start="77:9" pos:end="77:17"><name pos:start="77:9" pos:end="77:17">tftp_path</name></expr>)</condition> <block pos:start="77:20" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:45">

        <expr_stmt pos:start="79:9" pos:end="79:45"><expr pos:start="79:9" pos:end="79:44"><name pos:start="79:9" pos:end="79:19">tftp_prefix</name> <operator pos:start="79:21" pos:end="79:21">=</operator> <call pos:start="79:23" pos:end="79:44"><name pos:start="79:23" pos:end="79:33">qemu_strdup</name><argument_list pos:start="79:34" pos:end="79:44">(<argument pos:start="79:35" pos:end="79:43"><expr pos:start="79:35" pos:end="79:43"><name pos:start="79:35" pos:end="79:43">tftp_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:30"><expr pos:start="83:5" pos:end="83:29"><call pos:start="83:5" pos:end="83:29"><name pos:start="83:5" pos:end="83:13">qemu_free</name><argument_list pos:start="83:14" pos:end="83:29">(<argument pos:start="83:15" pos:end="83:28"><expr pos:start="83:15" pos:end="83:28"><name pos:start="83:15" pos:end="83:28">bootp_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:26"><expr pos:start="85:5" pos:end="85:25"><name pos:start="85:5" pos:end="85:18">bootp_filename</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <name pos:start="85:22" pos:end="85:25">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="91:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:17">(<expr pos:start="87:9" pos:end="87:16"><name pos:start="87:9" pos:end="87:16">bootfile</name></expr>)</condition> <block pos:start="87:19" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:47">

        <expr_stmt pos:start="89:9" pos:end="89:47"><expr pos:start="89:9" pos:end="89:46"><name pos:start="89:9" pos:end="89:22">bootp_filename</name> <operator pos:start="89:24" pos:end="89:24">=</operator> <call pos:start="89:26" pos:end="89:46"><name pos:start="89:26" pos:end="89:36">qemu_strdup</name><argument_list pos:start="89:37" pos:end="89:46">(<argument pos:start="89:38" pos:end="89:45"><expr pos:start="89:38" pos:end="89:45"><name pos:start="89:38" pos:end="89:45">bootfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:34"><expr pos:start="93:5" pos:end="93:33"><name pos:start="93:5" pos:end="93:19">vdhcp_startaddr</name> <operator pos:start="93:21" pos:end="93:21">=</operator> <name pos:start="93:23" pos:end="93:33">vdhcp_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:35"><expr pos:start="95:5" pos:end="95:34"><name pos:start="95:5" pos:end="95:20">vnameserver_addr</name> <operator pos:start="95:22" pos:end="95:22">=</operator> <name pos:start="95:24" pos:end="95:34">vnameserver</name></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:17"><expr pos:start="99:5" pos:end="99:16"><call pos:start="99:5" pos:end="99:16"><name pos:start="99:5" pos:end="99:14">getouraddr</name><argument_list pos:start="99:15" pos:end="99:16">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:77"><expr pos:start="101:5" pos:end="101:76"><call pos:start="101:5" pos:end="101:76"><name pos:start="101:5" pos:end="101:19">register_savevm</name><argument_list pos:start="101:20" pos:end="101:76">(<argument pos:start="101:21" pos:end="101:27"><expr pos:start="101:21" pos:end="101:27"><literal type="string" pos:start="101:21" pos:end="101:27">"slirp"</literal></expr></argument>, <argument pos:start="101:30" pos:end="101:30"><expr pos:start="101:30" pos:end="101:30"><literal type="number" pos:start="101:30" pos:end="101:30">0</literal></expr></argument>, <argument pos:start="101:33" pos:end="101:33"><expr pos:start="101:33" pos:end="101:33"><literal type="number" pos:start="101:33" pos:end="101:33">1</literal></expr></argument>, <argument pos:start="101:36" pos:end="101:51"><expr pos:start="101:36" pos:end="101:51"><name pos:start="101:36" pos:end="101:51">slirp_state_save</name></expr></argument>, <argument pos:start="101:54" pos:end="101:69"><expr pos:start="101:54" pos:end="101:69"><name pos:start="101:54" pos:end="101:69">slirp_state_load</name></expr></argument>, <argument pos:start="101:72" pos:end="101:75"><expr pos:start="101:72" pos:end="101:75"><name pos:start="101:72" pos:end="101:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
