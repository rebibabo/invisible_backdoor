<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23032.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">tcp_wait_for_connect</name><parameter_list pos:start="1:33" pos:end="1:46">(<parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:39"><name pos:start="1:34" pos:end="1:37">void</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:45">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="49:1">{<block_content pos:start="5:5" pos:end="47:5">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">MigrationState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">val</name></decl>, <decl pos:start="7:14" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:16">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">socklen_t</name></type> <name pos:start="9:15" pos:end="9:21">valsize</name> <init pos:start="9:23" pos:end="9:35">= <expr pos:start="9:25" pos:end="9:35"><sizeof pos:start="9:25" pos:end="9:35">sizeof<argument_list pos:start="9:31" pos:end="9:35">(<argument pos:start="9:32" pos:end="9:34"><expr pos:start="9:32" pos:end="9:34"><name pos:start="9:32" pos:end="9:34">val</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:35"><expr pos:start="13:5" pos:end="13:34"><call pos:start="13:5" pos:end="13:34"><name pos:start="13:5" pos:end="13:11">DPRINTF</name><argument_list pos:start="13:12" pos:end="13:34">(<argument pos:start="13:13" pos:end="13:33"><expr pos:start="13:13" pos:end="13:33"><literal type="string" pos:start="13:13" pos:end="13:33">"connect completed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do pos:start="15:5" pos:end="19:53">do <block pos:start="15:8" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:79">

        <expr_stmt pos:start="17:9" pos:end="17:79"><expr pos:start="17:9" pos:end="17:78"><name pos:start="17:9" pos:end="17:11">ret</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <call pos:start="17:15" pos:end="17:78"><name pos:start="17:15" pos:end="17:24">getsockopt</name><argument_list pos:start="17:25" pos:end="17:78">(<argument pos:start="17:26" pos:end="17:30"><expr pos:start="17:26" pos:end="17:30"><name pos:start="17:26" pos:end="17:30"><name pos:start="17:26" pos:end="17:26">s</name><operator pos:start="17:27" pos:end="17:28">-&gt;</operator><name pos:start="17:29" pos:end="17:30">fd</name></name></expr></argument>, <argument pos:start="17:33" pos:end="17:42"><expr pos:start="17:33" pos:end="17:42"><name pos:start="17:33" pos:end="17:42">SOL_SOCKET</name></expr></argument>, <argument pos:start="17:45" pos:end="17:52"><expr pos:start="17:45" pos:end="17:52"><name pos:start="17:45" pos:end="17:52">SO_ERROR</name></expr></argument>, <argument pos:start="17:55" pos:end="17:67"><expr pos:start="17:55" pos:end="17:67"><operator pos:start="17:55" pos:end="17:55">(</operator><name pos:start="17:56" pos:end="17:59">void</name> <operator pos:start="17:61" pos:end="17:61">*</operator><operator pos:start="17:62" pos:end="17:62">)</operator> <operator pos:start="17:64" pos:end="17:64">&amp;</operator><name pos:start="17:65" pos:end="17:67">val</name></expr></argument>, <argument pos:start="17:70" pos:end="17:77"><expr pos:start="17:70" pos:end="17:77"><operator pos:start="17:70" pos:end="17:70">&amp;</operator><name pos:start="17:71" pos:end="17:77">valsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="19:13" pos:end="19:52">(<expr pos:start="19:14" pos:end="19:51"><name pos:start="19:14" pos:end="19:16">ret</name> <operator pos:start="19:18" pos:end="19:19">==</operator> <operator pos:start="19:21" pos:end="19:21">-</operator><literal type="number" pos:start="19:22" pos:end="19:22">1</literal> <operator pos:start="19:24" pos:end="19:25">&amp;&amp;</operator> <operator pos:start="19:27" pos:end="19:27">(</operator><call pos:start="19:28" pos:end="19:41"><name pos:start="19:28" pos:end="19:39">socket_error</name><argument_list pos:start="19:40" pos:end="19:41">()</argument_list></call><operator pos:start="19:42" pos:end="19:42">)</operator> <operator pos:start="19:44" pos:end="19:45">==</operator> <name pos:start="19:47" pos:end="19:51">EINTR</name></expr>)</condition>;</do>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:16">(<expr pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">&lt;</operator> <literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr>)</condition> <block pos:start="23:18" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:15">

        <expr_stmt pos:start="25:9" pos:end="25:28"><expr pos:start="25:9" pos:end="25:27"><call pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:24">migrate_fd_error</name><argument_list pos:start="25:25" pos:end="25:27">(<argument pos:start="25:26" pos:end="25:26"><expr pos:start="25:26" pos:end="25:26"><name pos:start="25:26" pos:end="25:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:56"><expr pos:start="33:5" pos:end="33:55"><call pos:start="33:5" pos:end="33:55"><name pos:start="33:5" pos:end="33:24">qemu_set_fd_handler2</name><argument_list pos:start="33:25" pos:end="33:55">(<argument pos:start="33:26" pos:end="33:30"><expr pos:start="33:26" pos:end="33:30"><name pos:start="33:26" pos:end="33:30"><name pos:start="33:26" pos:end="33:26">s</name><operator pos:start="33:27" pos:end="33:28">-&gt;</operator><name pos:start="33:29" pos:end="33:30">fd</name></name></expr></argument>, <argument pos:start="33:33" pos:end="33:36"><expr pos:start="33:33" pos:end="33:36"><name pos:start="33:33" pos:end="33:36">NULL</name></expr></argument>, <argument pos:start="33:39" pos:end="33:42"><expr pos:start="33:39" pos:end="33:42"><name pos:start="33:39" pos:end="33:42">NULL</name></expr></argument>, <argument pos:start="33:45" pos:end="33:48"><expr pos:start="33:45" pos:end="33:48"><name pos:start="33:45" pos:end="33:48">NULL</name></expr></argument>, <argument pos:start="33:51" pos:end="33:54"><expr pos:start="33:51" pos:end="33:54"><name pos:start="33:51" pos:end="33:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="47:5"><if pos:start="37:5" pos:end="39:30">if <condition pos:start="37:8" pos:end="37:17">(<expr pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:11">val</name> <operator pos:start="37:13" pos:end="37:14">==</operator> <literal type="number" pos:start="37:16" pos:end="37:16">0</literal></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:30"><block_content pos:start="39:9" pos:end="39:30">

        <expr_stmt pos:start="39:9" pos:end="39:30"><expr pos:start="39:9" pos:end="39:29"><call pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:26">migrate_fd_connect</name><argument_list pos:start="39:27" pos:end="39:29">(<argument pos:start="39:28" pos:end="39:28"><expr pos:start="39:28" pos:end="39:28"><name pos:start="39:28" pos:end="39:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="41:5" pos:end="47:5">else <block pos:start="41:10" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:28">

        <expr_stmt pos:start="43:9" pos:end="43:46"><expr pos:start="43:9" pos:end="43:45"><call pos:start="43:9" pos:end="43:45"><name pos:start="43:9" pos:end="43:15">DPRINTF</name><argument_list pos:start="43:16" pos:end="43:45">(<argument pos:start="43:17" pos:end="43:39"><expr pos:start="43:17" pos:end="43:39"><literal type="string" pos:start="43:17" pos:end="43:39">"error connecting %d\n"</literal></expr></argument>, <argument pos:start="43:42" pos:end="43:44"><expr pos:start="43:42" pos:end="43:44"><name pos:start="43:42" pos:end="43:44">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:28"><expr pos:start="45:9" pos:end="45:27"><call pos:start="45:9" pos:end="45:27"><name pos:start="45:9" pos:end="45:24">migrate_fd_error</name><argument_list pos:start="45:25" pos:end="45:27">(<argument pos:start="45:26" pos:end="45:26"><expr pos:start="45:26" pos:end="45:26"><name pos:start="45:26" pos:end="45:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
