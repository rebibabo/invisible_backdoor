<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15385.c" pos:tabs="8"><function pos:start="1:1" pos:end="475:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:17">decode</name><parameter_list pos:start="1:18" pos:end="1:85">(<parameter pos:start="1:19" pos:end="1:39"><decl pos:start="1:19" pos:end="1:39"><type pos:start="1:19" pos:end="1:39"><name pos:start="1:19" pos:end="1:32">AVCodecContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:39">avctx</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:51"><decl pos:start="1:42" pos:end="1:51"><type pos:start="1:42" pos:end="1:51"><name pos:start="1:42" pos:end="1:45">void</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:51">data</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:67"><decl pos:start="1:54" pos:end="1:67"><type pos:start="1:54" pos:end="1:67"><name pos:start="1:54" pos:end="1:56">int</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:67">got_frame</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:84"><decl pos:start="1:70" pos:end="1:84"><type pos:start="1:70" pos:end="1:84"><name pos:start="1:70" pos:end="1:77">AVPacket</name> <modifier pos:start="1:79" pos:end="1:79">*</modifier></type><name pos:start="1:80" pos:end="1:84">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="475:1">{<block_content pos:start="5:5" pos:end="473:15">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:13">BC_STATUS</name></type> <name pos:start="5:15" pos:end="5:17">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">BC_DTS_STATUS</name></type> <name pos:start="7:19" pos:end="7:32">decoder_status</name> <init pos:start="7:34" pos:end="7:41">= <expr pos:start="7:36" pos:end="7:41"><block pos:start="7:36" pos:end="7:41">{ <expr pos:start="7:38" pos:end="7:38"><literal type="number" pos:start="7:38" pos:end="7:38">0</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">CopyRet</name></type> <name pos:start="9:13" pos:end="9:19">rec_ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:42"><decl pos:start="11:5" pos:end="11:41"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">CHDContext</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:20">priv</name>   <init pos:start="11:24" pos:end="11:41">= <expr pos:start="11:26" pos:end="11:41"><name pos:start="11:26" pos:end="11:41"><name pos:start="11:26" pos:end="11:30">avctx</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">HANDLE</name></type> <name pos:start="13:12" pos:end="13:14">dev</name>         <init pos:start="13:24" pos:end="13:34">= <expr pos:start="13:26" pos:end="13:34"><name pos:start="13:26" pos:end="13:34"><name pos:start="13:26" pos:end="13:29">priv</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:34">dev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:36"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:20">in_data</name>   <init pos:start="15:24" pos:end="15:36">= <expr pos:start="15:26" pos:end="15:36"><name pos:start="15:26" pos:end="15:36"><name pos:start="15:26" pos:end="15:30">avpkt</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:36"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">len</name>            <init pos:start="17:24" pos:end="17:36">= <expr pos:start="17:26" pos:end="17:36"><name pos:start="17:26" pos:end="17:36"><name pos:start="17:26" pos:end="17:30">avpkt</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">free_data</name>      <init pos:start="19:24" pos:end="19:26">= <expr pos:start="19:26" pos:end="19:26"><literal type="number" pos:start="19:26" pos:end="19:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:27"><decl pos:start="21:5" pos:end="21:26"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">uint8_t</name></type> <name pos:start="21:13" pos:end="21:20">pic_type</name>   <init pos:start="21:24" pos:end="21:26">= <expr pos:start="21:26" pos:end="21:26"><literal type="number" pos:start="21:26" pos:end="21:26">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:63"><expr pos:start="25:5" pos:end="25:62"><call pos:start="25:5" pos:end="25:62"><name pos:start="25:5" pos:end="25:10">av_log</name><argument_list pos:start="25:11" pos:end="25:62">(<argument pos:start="25:12" pos:end="25:16"><expr pos:start="25:12" pos:end="25:16"><name pos:start="25:12" pos:end="25:16">avctx</name></expr></argument>, <argument pos:start="25:19" pos:end="25:32"><expr pos:start="25:19" pos:end="25:32"><name pos:start="25:19" pos:end="25:32">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="25:35" pos:end="25:61"><expr pos:start="25:35" pos:end="25:61"><literal type="string" pos:start="25:35" pos:end="25:61">"CrystalHD: decode_frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="57:5"><if pos:start="29:5" pos:end="43:5">if <condition pos:start="29:8" pos:end="29:46">(<expr pos:start="29:9" pos:end="29:45"><name pos:start="29:9" pos:end="29:19"><name pos:start="29:9" pos:end="29:13">avpkt</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:19">size</name></name> <operator pos:start="29:21" pos:end="29:22">==</operator> <literal type="number" pos:start="29:24" pos:end="29:24">7</literal> <operator pos:start="29:26" pos:end="29:27">&amp;&amp;</operator> <operator pos:start="29:29" pos:end="29:29">!</operator><name pos:start="29:30" pos:end="29:45"><name pos:start="29:30" pos:end="29:33">priv</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:45">bframe_bug</name></name></expr>)</condition> <block pos:start="29:48" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:29">

        <comment type="block" pos:start="31:9" pos:end="35:11">/*

         * The use of a drop frame triggers the bug

         */</comment>

        <expr_stmt pos:start="37:9" pos:end="39:75"><expr pos:start="37:9" pos:end="39:74"><call pos:start="37:9" pos:end="39:74"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="39:74">(<argument pos:start="37:16" pos:end="37:20"><expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">avctx</name></expr></argument>, <argument pos:start="37:23" pos:end="37:33"><expr pos:start="37:23" pos:end="37:33"><name pos:start="37:23" pos:end="37:33">AV_LOG_INFO</name></expr></argument>,

               <argument pos:start="39:16" pos:end="39:73"><expr pos:start="39:16" pos:end="39:73"><literal type="string" pos:start="39:16" pos:end="39:73">"CrystalHD: Enabling work-around for packed b-frame bug\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:29"><expr pos:start="41:9" pos:end="41:28"><name pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:12">priv</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:24">bframe_bug</name></name> <operator pos:start="41:26" pos:end="41:26">=</operator> <literal type="number" pos:start="41:28" pos:end="41:28">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="43:7" pos:end="57:5">else if <condition pos:start="43:15" pos:end="43:52">(<expr pos:start="43:16" pos:end="43:51"><name pos:start="43:16" pos:end="43:26"><name pos:start="43:16" pos:end="43:20">avpkt</name><operator pos:start="43:21" pos:end="43:22">-&gt;</operator><name pos:start="43:23" pos:end="43:26">size</name></name> <operator pos:start="43:28" pos:end="43:29">==</operator> <literal type="number" pos:start="43:31" pos:end="43:31">8</literal> <operator pos:start="43:33" pos:end="43:34">&amp;&amp;</operator> <name pos:start="43:36" pos:end="43:51"><name pos:start="43:36" pos:end="43:39">priv</name><operator pos:start="43:40" pos:end="43:41">-&gt;</operator><name pos:start="43:42" pos:end="43:51">bframe_bug</name></name></expr>)</condition> <block pos:start="43:54" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:29">

        <comment type="block" pos:start="45:9" pos:end="49:11">/*

         * Delay frames don't trigger the bug

         */</comment>

        <expr_stmt pos:start="51:9" pos:end="53:76"><expr pos:start="51:9" pos:end="53:75"><call pos:start="51:9" pos:end="53:75"><name pos:start="51:9" pos:end="51:14">av_log</name><argument_list pos:start="51:15" pos:end="53:75">(<argument pos:start="51:16" pos:end="51:20"><expr pos:start="51:16" pos:end="51:20"><name pos:start="51:16" pos:end="51:20">avctx</name></expr></argument>, <argument pos:start="51:23" pos:end="51:33"><expr pos:start="51:23" pos:end="51:33"><name pos:start="51:23" pos:end="51:33">AV_LOG_INFO</name></expr></argument>,

               <argument pos:start="53:16" pos:end="53:74"><expr pos:start="53:16" pos:end="53:74"><literal type="string" pos:start="53:16" pos:end="53:74">"CrystalHD: Disabling work-around for packed b-frame bug\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:29"><expr pos:start="55:9" pos:end="55:28"><name pos:start="55:9" pos:end="55:24"><name pos:start="55:9" pos:end="55:12">priv</name><operator pos:start="55:13" pos:end="55:14">-&gt;</operator><name pos:start="55:15" pos:end="55:24">bframe_bug</name></name> <operator pos:start="55:26" pos:end="55:26">=</operator> <literal type="number" pos:start="55:28" pos:end="55:28">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="285:5"><if pos:start="61:5" pos:end="281:5">if <condition pos:start="61:8" pos:end="61:12">(<expr pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">len</name></expr>)</condition> <block pos:start="61:14" pos:end="281:5">{<block_content pos:start="63:9" pos:end="279:9">

        <decl_stmt pos:start="63:9" pos:end="63:54"><decl pos:start="63:9" pos:end="63:53"><type pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:15">int32_t</name></type> <name pos:start="63:17" pos:end="63:23">tx_free</name> <init pos:start="63:25" pos:end="63:53">= <expr pos:start="63:27" pos:end="63:53"><operator pos:start="63:27" pos:end="63:27">(</operator><name pos:start="63:28" pos:end="63:34">int32_t</name><operator pos:start="63:35" pos:end="63:35">)</operator><call pos:start="63:36" pos:end="63:53"><name pos:start="63:36" pos:end="63:48">DtsTxFreeSize</name><argument_list pos:start="63:49" pos:end="63:53">(<argument pos:start="63:50" pos:end="63:52"><expr pos:start="63:50" pos:end="63:52"><name pos:start="63:50" pos:end="63:52">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="67:9" pos:end="127:9"><if pos:start="67:9" pos:end="127:9">if <condition pos:start="67:12" pos:end="67:23">(<expr pos:start="67:13" pos:end="67:22"><name pos:start="67:13" pos:end="67:22"><name pos:start="67:13" pos:end="67:16">priv</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:22">bsfc</name></name></expr>)</condition> <block pos:start="67:25" pos:end="127:9">{<block_content pos:start="69:13" pos:end="125:44">

            <decl_stmt pos:start="69:13" pos:end="69:24"><decl pos:start="69:13" pos:end="69:23"><type pos:start="69:13" pos:end="69:15"><name pos:start="69:13" pos:end="69:15">int</name></type> <name pos:start="69:17" pos:end="69:19">ret</name> <init pos:start="69:21" pos:end="69:23">= <expr pos:start="69:23" pos:end="69:23"><literal type="number" pos:start="69:23" pos:end="69:23">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="71:13" pos:end="71:43"><decl pos:start="71:13" pos:end="71:42"><type pos:start="71:13" pos:end="71:20"><name pos:start="71:13" pos:end="71:20">AVPacket</name></type> <name pos:start="71:22" pos:end="71:34">filter_packet</name> <init pos:start="71:36" pos:end="71:42">= <expr pos:start="71:38" pos:end="71:42"><block pos:start="71:38" pos:end="71:42">{ <expr pos:start="71:40" pos:end="71:40"><literal type="number" pos:start="71:40" pos:end="71:40">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="73:13" pos:end="73:45"><decl pos:start="73:13" pos:end="73:44"><type pos:start="73:13" pos:end="73:20"><name pos:start="73:13" pos:end="73:20">AVPacket</name></type> <name pos:start="73:22" pos:end="73:36">filtered_packet</name> <init pos:start="73:38" pos:end="73:44">= <expr pos:start="73:40" pos:end="73:44"><block pos:start="73:40" pos:end="73:44">{ <expr pos:start="73:42" pos:end="73:42"><literal type="number" pos:start="73:42" pos:end="73:42">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="77:13" pos:end="77:55"><expr pos:start="77:13" pos:end="77:54"><name pos:start="77:13" pos:end="77:15">ret</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <call pos:start="77:19" pos:end="77:54"><name pos:start="77:19" pos:end="77:31">av_packet_ref</name><argument_list pos:start="77:32" pos:end="77:54">(<argument pos:start="77:33" pos:end="77:46"><expr pos:start="77:33" pos:end="77:46"><operator pos:start="77:33" pos:end="77:33">&amp;</operator><name pos:start="77:34" pos:end="77:46">filter_packet</name></expr></argument>, <argument pos:start="77:49" pos:end="77:53"><expr pos:start="77:49" pos:end="77:53"><name pos:start="77:49" pos:end="77:53">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="79:13" pos:end="87:13"><if pos:start="79:13" pos:end="87:13">if <condition pos:start="79:16" pos:end="79:24">(<expr pos:start="79:17" pos:end="79:23"><name pos:start="79:17" pos:end="79:19">ret</name> <operator pos:start="79:21" pos:end="79:21">&lt;</operator> <literal type="number" pos:start="79:23" pos:end="79:23">0</literal></expr>)</condition> <block pos:start="79:26" pos:end="87:13">{<block_content pos:start="81:17" pos:end="85:27">

                <expr_stmt pos:start="81:17" pos:end="83:55"><expr pos:start="81:17" pos:end="83:54"><call pos:start="81:17" pos:end="83:54"><name pos:start="81:17" pos:end="81:22">av_log</name><argument_list pos:start="81:23" pos:end="83:54">(<argument pos:start="81:24" pos:end="81:28"><expr pos:start="81:24" pos:end="81:28"><name pos:start="81:24" pos:end="81:28">avctx</name></expr></argument>, <argument pos:start="81:31" pos:end="81:42"><expr pos:start="81:31" pos:end="81:42"><name pos:start="81:31" pos:end="81:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="81:45" pos:end="83:53"><expr pos:start="81:45" pos:end="83:53"><literal type="string" pos:start="81:45" pos:end="81:77">"CrystalHD: mpv4toannexb filter "</literal>

                       <literal type="string" pos:start="83:24" pos:end="83:53">"failed to ref input packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="85:17" pos:end="85:27">return <expr pos:start="85:24" pos:end="85:26"><name pos:start="85:24" pos:end="85:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



              <expr_stmt pos:start="91:15" pos:end="91:67"><expr pos:start="91:15" pos:end="91:66"><name pos:start="91:15" pos:end="91:17">ret</name> <operator pos:start="91:19" pos:end="91:19">=</operator> <call pos:start="91:21" pos:end="91:66"><name pos:start="91:21" pos:end="91:38">av_bsf_send_packet</name><argument_list pos:start="91:39" pos:end="91:66">(<argument pos:start="91:40" pos:end="91:49"><expr pos:start="91:40" pos:end="91:49"><name pos:start="91:40" pos:end="91:49"><name pos:start="91:40" pos:end="91:43">priv</name><operator pos:start="91:44" pos:end="91:45">-&gt;</operator><name pos:start="91:46" pos:end="91:49">bsfc</name></name></expr></argument>, <argument pos:start="91:52" pos:end="91:65"><expr pos:start="91:52" pos:end="91:65"><operator pos:start="91:52" pos:end="91:52">&amp;</operator><name pos:start="91:53" pos:end="91:65">filter_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <if_stmt pos:start="93:15" pos:end="101:13"><if pos:start="93:15" pos:end="101:13">if <condition pos:start="93:18" pos:end="93:26">(<expr pos:start="93:19" pos:end="93:25"><name pos:start="93:19" pos:end="93:21">ret</name> <operator pos:start="93:23" pos:end="93:23">&lt;</operator> <literal type="number" pos:start="93:25" pos:end="93:25">0</literal></expr>)</condition> <block pos:start="93:28" pos:end="101:13">{<block_content pos:start="95:17" pos:end="99:27">

                <expr_stmt pos:start="95:17" pos:end="97:56"><expr pos:start="95:17" pos:end="97:55"><call pos:start="95:17" pos:end="97:55"><name pos:start="95:17" pos:end="95:22">av_log</name><argument_list pos:start="95:23" pos:end="97:55">(<argument pos:start="95:24" pos:end="95:28"><expr pos:start="95:24" pos:end="95:28"><name pos:start="95:24" pos:end="95:28">avctx</name></expr></argument>, <argument pos:start="95:31" pos:end="95:42"><expr pos:start="95:31" pos:end="95:42"><name pos:start="95:31" pos:end="95:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="95:45" pos:end="97:54"><expr pos:start="95:45" pos:end="97:54"><literal type="string" pos:start="95:45" pos:end="95:77">"CrystalHD: mpv4toannexb filter "</literal>

                       <literal type="string" pos:start="97:24" pos:end="97:54">"failed to send input packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="99:17" pos:end="99:27">return <expr pos:start="99:24" pos:end="99:26"><name pos:start="99:24" pos:end="99:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="105:13" pos:end="105:70"><expr pos:start="105:13" pos:end="105:69"><name pos:start="105:13" pos:end="105:15">ret</name> <operator pos:start="105:17" pos:end="105:17">=</operator> <call pos:start="105:19" pos:end="105:69"><name pos:start="105:19" pos:end="105:39">av_bsf_receive_packet</name><argument_list pos:start="105:40" pos:end="105:69">(<argument pos:start="105:41" pos:end="105:50"><expr pos:start="105:41" pos:end="105:50"><name pos:start="105:41" pos:end="105:50"><name pos:start="105:41" pos:end="105:44">priv</name><operator pos:start="105:45" pos:end="105:46">-&gt;</operator><name pos:start="105:47" pos:end="105:50">bsfc</name></name></expr></argument>, <argument pos:start="105:53" pos:end="105:68"><expr pos:start="105:53" pos:end="105:68"><operator pos:start="105:53" pos:end="105:53">&amp;</operator><name pos:start="105:54" pos:end="105:68">filtered_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="107:13" pos:end="115:13"><if pos:start="107:13" pos:end="115:13">if <condition pos:start="107:16" pos:end="107:24">(<expr pos:start="107:17" pos:end="107:23"><name pos:start="107:17" pos:end="107:19">ret</name> <operator pos:start="107:21" pos:end="107:21">&lt;</operator> <literal type="number" pos:start="107:23" pos:end="107:23">0</literal></expr>)</condition> <block pos:start="107:26" pos:end="115:13">{<block_content pos:start="109:17" pos:end="113:27">

                <expr_stmt pos:start="109:17" pos:end="111:60"><expr pos:start="109:17" pos:end="111:59"><call pos:start="109:17" pos:end="111:59"><name pos:start="109:17" pos:end="109:22">av_log</name><argument_list pos:start="109:23" pos:end="111:59">(<argument pos:start="109:24" pos:end="109:28"><expr pos:start="109:24" pos:end="109:28"><name pos:start="109:24" pos:end="109:28">avctx</name></expr></argument>, <argument pos:start="109:31" pos:end="109:42"><expr pos:start="109:31" pos:end="109:42"><name pos:start="109:31" pos:end="109:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:45" pos:end="111:58"><expr pos:start="109:45" pos:end="111:58"><literal type="string" pos:start="109:45" pos:end="109:77">"CrystalHD: mpv4toannexb filter "</literal>

                       <literal type="string" pos:start="111:24" pos:end="111:58">"failed to receive output packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="113:17" pos:end="113:27">return <expr pos:start="113:24" pos:end="113:26"><name pos:start="113:24" pos:end="113:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="119:13" pos:end="119:43"><expr pos:start="119:13" pos:end="119:42"><name pos:start="119:13" pos:end="119:19">in_data</name> <operator pos:start="119:21" pos:end="119:21">=</operator> <name pos:start="119:23" pos:end="119:42"><name pos:start="119:23" pos:end="119:37">filtered_packet</name><operator pos:start="119:38" pos:end="119:38">.</operator><name pos:start="119:39" pos:end="119:42">data</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:39"><expr pos:start="121:13" pos:end="121:38"><name pos:start="121:13" pos:end="121:15">len</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <name pos:start="121:19" pos:end="121:38"><name pos:start="121:19" pos:end="121:33">filtered_packet</name><operator pos:start="121:34" pos:end="121:34">.</operator><name pos:start="121:35" pos:end="121:38">size</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="125:13" pos:end="125:44"><expr pos:start="125:13" pos:end="125:43"><call pos:start="125:13" pos:end="125:43"><name pos:start="125:13" pos:end="125:27">av_packet_unref</name><argument_list pos:start="125:28" pos:end="125:43">(<argument pos:start="125:29" pos:end="125:42"><expr pos:start="125:29" pos:end="125:42"><operator pos:start="125:29" pos:end="125:29">&amp;</operator><name pos:start="125:30" pos:end="125:42">filter_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="131:9" pos:end="201:9"><if pos:start="131:9" pos:end="201:9">if <condition pos:start="131:12" pos:end="131:25">(<expr pos:start="131:13" pos:end="131:24"><name pos:start="131:13" pos:end="131:24"><name pos:start="131:13" pos:end="131:16">priv</name><operator pos:start="131:17" pos:end="131:18">-&gt;</operator><name pos:start="131:19" pos:end="131:24">parser</name></name></expr>)</condition> <block pos:start="131:27" pos:end="201:9">{<block_content pos:start="133:13" pos:end="199:13">

            <decl_stmt pos:start="133:13" pos:end="133:24"><decl pos:start="133:13" pos:end="133:23"><type pos:start="133:13" pos:end="133:15"><name pos:start="133:13" pos:end="133:15">int</name></type> <name pos:start="133:17" pos:end="133:19">ret</name> <init pos:start="133:21" pos:end="133:23">= <expr pos:start="133:23" pos:end="133:23"><literal type="number" pos:start="133:23" pos:end="133:23">0</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="137:13" pos:end="137:32"><expr pos:start="137:13" pos:end="137:31"><name pos:start="137:13" pos:end="137:21">free_data</name> <operator pos:start="137:23" pos:end="137:23">=</operator> <name pos:start="137:25" pos:end="137:27">ret</name> <operator pos:start="137:29" pos:end="137:29">&gt;</operator> <literal type="number" pos:start="137:31" pos:end="137:31">0</literal></expr>;</expr_stmt>



            <if_stmt pos:start="141:13" pos:end="199:13"><if pos:start="141:13" pos:end="189:13">if <condition pos:start="141:16" pos:end="141:25">(<expr pos:start="141:17" pos:end="141:24"><name pos:start="141:17" pos:end="141:19">ret</name> <operator pos:start="141:21" pos:end="141:22">&gt;=</operator> <literal type="number" pos:start="141:24" pos:end="141:24">0</literal></expr>)</condition> <block pos:start="141:27" pos:end="189:13">{<block_content pos:start="143:17" pos:end="187:17">

                <decl_stmt pos:start="143:17" pos:end="143:30"><decl pos:start="143:17" pos:end="143:29"><type pos:start="143:17" pos:end="143:25"><name pos:start="143:17" pos:end="143:23">uint8_t</name> <modifier pos:start="143:25" pos:end="143:25">*</modifier></type><name pos:start="143:26" pos:end="143:29">pout</name></decl>;</decl_stmt>

                <decl_stmt pos:start="145:17" pos:end="145:26"><decl pos:start="145:17" pos:end="145:25"><type pos:start="145:17" pos:end="145:19"><name pos:start="145:17" pos:end="145:19">int</name></type> <name pos:start="145:21" pos:end="145:25">psize</name></decl>;</decl_stmt>

                <decl_stmt pos:start="147:17" pos:end="147:26"><decl pos:start="147:17" pos:end="147:25"><type pos:start="147:17" pos:end="147:19"><name pos:start="147:17" pos:end="147:19">int</name></type> <name pos:start="147:21" pos:end="147:25">index</name></decl>;</decl_stmt>

                <decl_stmt pos:start="149:17" pos:end="149:57"><decl pos:start="149:17" pos:end="149:56"><type pos:start="149:17" pos:end="149:29"><name pos:start="149:17" pos:end="149:27">H264Context</name> <modifier pos:start="149:29" pos:end="149:29">*</modifier></type><name pos:start="149:30" pos:end="149:30">h</name> <init pos:start="149:32" pos:end="149:56">= <expr pos:start="149:34" pos:end="149:56"><name pos:start="149:34" pos:end="149:56"><name pos:start="149:34" pos:end="149:37">priv</name><operator pos:start="149:38" pos:end="149:39">-&gt;</operator><name pos:start="149:40" pos:end="149:45">parser</name><operator pos:start="149:46" pos:end="149:47">-&gt;</operator><name pos:start="149:48" pos:end="149:56">priv_data</name></name></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="153:17" pos:end="157:71"><expr pos:start="153:17" pos:end="157:70"><name pos:start="153:17" pos:end="153:21">index</name> <operator pos:start="153:23" pos:end="153:23">=</operator> <call pos:start="153:25" pos:end="157:70"><name pos:start="153:25" pos:end="153:40">av_parser_parse2</name><argument_list pos:start="153:41" pos:end="157:70">(<argument pos:start="153:42" pos:end="153:53"><expr pos:start="153:42" pos:end="153:53"><name pos:start="153:42" pos:end="153:53"><name pos:start="153:42" pos:end="153:45">priv</name><operator pos:start="153:46" pos:end="153:47">-&gt;</operator><name pos:start="153:48" pos:end="153:53">parser</name></name></expr></argument>, <argument pos:start="153:56" pos:end="153:60"><expr pos:start="153:56" pos:end="153:60"><name pos:start="153:56" pos:end="153:60">avctx</name></expr></argument>, <argument pos:start="153:63" pos:end="153:67"><expr pos:start="153:63" pos:end="153:67"><operator pos:start="153:63" pos:end="153:63">&amp;</operator><name pos:start="153:64" pos:end="153:67">pout</name></expr></argument>, <argument pos:start="153:70" pos:end="153:75"><expr pos:start="153:70" pos:end="153:75"><operator pos:start="153:70" pos:end="153:70">&amp;</operator><name pos:start="153:71" pos:end="153:75">psize</name></expr></argument>,

                                         <argument pos:start="155:42" pos:end="155:48"><expr pos:start="155:42" pos:end="155:48"><name pos:start="155:42" pos:end="155:48">in_data</name></expr></argument>, <argument pos:start="155:51" pos:end="155:53"><expr pos:start="155:51" pos:end="155:53"><name pos:start="155:51" pos:end="155:53">len</name></expr></argument>, <argument pos:start="155:56" pos:end="155:80"><expr pos:start="155:56" pos:end="155:80"><name pos:start="155:56" pos:end="155:80"><name pos:start="155:56" pos:end="155:60">avctx</name><operator pos:start="155:61" pos:end="155:62">-&gt;</operator><name pos:start="155:63" pos:end="155:70">internal</name><operator pos:start="155:71" pos:end="155:72">-&gt;</operator><name pos:start="155:73" pos:end="155:75">pkt</name><operator pos:start="155:76" pos:end="155:77">-&gt;</operator><name pos:start="155:78" pos:end="155:80">pts</name></name></expr></argument>,

                                         <argument pos:start="157:42" pos:end="157:66"><expr pos:start="157:42" pos:end="157:66"><name pos:start="157:42" pos:end="157:66"><name pos:start="157:42" pos:end="157:46">avctx</name><operator pos:start="157:47" pos:end="157:48">-&gt;</operator><name pos:start="157:49" pos:end="157:56">internal</name><operator pos:start="157:57" pos:end="157:58">-&gt;</operator><name pos:start="157:59" pos:end="157:61">pkt</name><operator pos:start="157:62" pos:end="157:63">-&gt;</operator><name pos:start="157:64" pos:end="157:66">dts</name></name></expr></argument>, <argument pos:start="157:69" pos:end="157:69"><expr pos:start="157:69" pos:end="157:69"><literal type="number" pos:start="157:69" pos:end="157:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="159:17" pos:end="187:17"><if pos:start="159:17" pos:end="167:17">if <condition pos:start="159:20" pos:end="159:30">(<expr pos:start="159:21" pos:end="159:29"><name pos:start="159:21" pos:end="159:25">index</name> <operator pos:start="159:27" pos:end="159:27">&lt;</operator> <literal type="number" pos:start="159:29" pos:end="159:29">0</literal></expr>)</condition> <block pos:start="159:32" pos:end="167:17">{<block_content pos:start="161:21" pos:end="165:52">

                    <expr_stmt pos:start="161:21" pos:end="165:52"><expr pos:start="161:21" pos:end="165:51"><call pos:start="161:21" pos:end="165:51"><name pos:start="161:21" pos:end="161:26">av_log</name><argument_list pos:start="161:27" pos:end="165:51">(<argument pos:start="161:28" pos:end="161:32"><expr pos:start="161:28" pos:end="161:32"><name pos:start="161:28" pos:end="161:32">avctx</name></expr></argument>, <argument pos:start="161:35" pos:end="161:48"><expr pos:start="161:35" pos:end="161:48"><name pos:start="161:35" pos:end="161:48">AV_LOG_WARNING</name></expr></argument>,

                           <argument pos:start="163:28" pos:end="165:50"><expr pos:start="163:28" pos:end="165:50"><literal type="string" pos:start="163:28" pos:end="163:72">"CrystalHD: Failed to parse h.264 packet to "</literal>

                           <literal type="string" pos:start="165:28" pos:end="165:50">"detect interlacing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="167:19" pos:end="177:17">else if <condition pos:start="167:27" pos:end="167:40">(<expr pos:start="167:28" pos:end="167:39"><name pos:start="167:28" pos:end="167:32">index</name> <operator pos:start="167:34" pos:end="167:35">!=</operator> <name pos:start="167:37" pos:end="167:39">len</name></expr>)</condition> <block pos:start="167:42" pos:end="177:17">{<block_content pos:start="169:21" pos:end="175:54">

                    <expr_stmt pos:start="169:21" pos:end="175:54"><expr pos:start="169:21" pos:end="175:53"><call pos:start="169:21" pos:end="175:53"><name pos:start="169:21" pos:end="169:26">av_log</name><argument_list pos:start="169:27" pos:end="175:53">(<argument pos:start="169:28" pos:end="169:32"><expr pos:start="169:28" pos:end="169:32"><name pos:start="169:28" pos:end="169:32">avctx</name></expr></argument>, <argument pos:start="169:35" pos:end="169:48"><expr pos:start="169:35" pos:end="169:48"><name pos:start="169:35" pos:end="169:48">AV_LOG_WARNING</name></expr></argument>,

                           <argument pos:start="171:28" pos:end="175:52"><expr pos:start="171:28" pos:end="175:52"><literal type="string" pos:start="171:28" pos:end="171:69">"CrystalHD: Failed to parse h.264 packet "</literal>

                           <literal type="string" pos:start="173:28" pos:end="173:66">"completely. Interlaced frames may be "</literal>

                           <literal type="string" pos:start="175:28" pos:end="175:52">"incorrectly detected.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="177:19" pos:end="187:17">else <block pos:start="177:24" pos:end="187:17">{<block_content pos:start="179:21" pos:end="185:52">

                    <expr_stmt pos:start="179:21" pos:end="183:49"><expr pos:start="179:21" pos:end="183:48"><call pos:start="179:21" pos:end="183:48"><name pos:start="179:21" pos:end="179:26">av_log</name><argument_list pos:start="179:27" pos:end="183:48">(<argument pos:start="179:28" pos:end="179:32"><expr pos:start="179:28" pos:end="179:32"><name pos:start="179:28" pos:end="179:32">avctx</name></expr></argument>, <argument pos:start="179:35" pos:end="179:48"><expr pos:start="179:35" pos:end="179:48"><name pos:start="179:35" pos:end="179:48">AV_LOG_VERBOSE</name></expr></argument>,

                           <argument pos:start="181:28" pos:end="181:64"><expr pos:start="181:28" pos:end="181:64"><literal type="string" pos:start="181:28" pos:end="181:64">"CrystalHD: parser picture type %d\n"</literal></expr></argument>,

                           <argument pos:start="183:28" pos:end="183:47"><expr pos:start="183:28" pos:end="183:47"><name pos:start="183:28" pos:end="183:47"><name pos:start="183:28" pos:end="183:28">h</name><operator pos:start="183:29" pos:end="183:30">-&gt;</operator><name pos:start="183:31" pos:end="183:47">picture_structure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="185:21" pos:end="185:52"><expr pos:start="185:21" pos:end="185:51"><name pos:start="185:21" pos:end="185:28">pic_type</name> <operator pos:start="185:30" pos:end="185:30">=</operator> <name pos:start="185:32" pos:end="185:51"><name pos:start="185:32" pos:end="185:32">h</name><operator pos:start="185:33" pos:end="185:34">-&gt;</operator><name pos:start="185:35" pos:end="185:51">picture_structure</name></name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="189:15" pos:end="199:13">else <block pos:start="189:20" pos:end="199:13">{<block_content pos:start="191:17" pos:end="197:38">

                <expr_stmt pos:start="191:17" pos:end="197:38"><expr pos:start="191:17" pos:end="197:37"><call pos:start="191:17" pos:end="197:37"><name pos:start="191:17" pos:end="191:22">av_log</name><argument_list pos:start="191:23" pos:end="197:37">(<argument pos:start="191:24" pos:end="191:28"><expr pos:start="191:24" pos:end="191:28"><name pos:start="191:24" pos:end="191:28">avctx</name></expr></argument>, <argument pos:start="191:31" pos:end="191:44"><expr pos:start="191:31" pos:end="191:44"><name pos:start="191:31" pos:end="191:44">AV_LOG_WARNING</name></expr></argument>,

                       <argument pos:start="193:24" pos:end="197:36"><expr pos:start="193:24" pos:end="197:36"><literal type="string" pos:start="193:24" pos:end="193:72">"CrystalHD: mp4toannexb filter failed to filter "</literal>

                       <literal type="string" pos:start="195:24" pos:end="195:70">"packet. Interlaced frames may be incorrectly "</literal>

                       <literal type="string" pos:start="197:24" pos:end="197:36">"detected.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="205:9" pos:end="279:9"><if pos:start="205:9" pos:end="273:9">if <condition pos:start="205:12" pos:end="205:33">(<expr pos:start="205:13" pos:end="205:32"><name pos:start="205:13" pos:end="205:15">len</name> <operator pos:start="205:17" pos:end="205:17">&lt;</operator> <name pos:start="205:19" pos:end="205:25">tx_free</name> <operator pos:start="205:27" pos:end="205:27">-</operator> <literal type="number" pos:start="205:29" pos:end="205:32">1024</literal></expr>)</condition> <block pos:start="205:35" pos:end="273:9">{<block_content pos:start="225:13" pos:end="271:34">

            <comment type="block" pos:start="207:13" pos:end="223:15">/*

             * Despite being notionally opaque, either libcrystalhd or

             * the hardware itself will mangle pts values that are too

             * small or too large. The docs claim it should be in units

             * of 100ns. Given that we're nominally dealing with a black

             * box on both sides, any transform we do has no guarantee of

             * avoiding mangling so we need to build a mapping to values

             * we know will not be mangled.

             */</comment>

            <decl_stmt pos:start="225:13" pos:end="225:87"><decl pos:start="225:13" pos:end="225:86"><type pos:start="225:13" pos:end="225:20"><name pos:start="225:13" pos:end="225:20">uint64_t</name></type> <name pos:start="225:22" pos:end="225:24">pts</name> <init pos:start="225:26" pos:end="225:86">= <expr pos:start="225:28" pos:end="225:86"><call pos:start="225:28" pos:end="225:86"><name pos:start="225:28" pos:end="225:43">opaque_list_push</name><argument_list pos:start="225:44" pos:end="225:86">(<argument pos:start="225:45" pos:end="225:48"><expr pos:start="225:45" pos:end="225:48"><name pos:start="225:45" pos:end="225:48">priv</name></expr></argument>, <argument pos:start="225:51" pos:end="225:75"><expr pos:start="225:51" pos:end="225:75"><name pos:start="225:51" pos:end="225:75"><name pos:start="225:51" pos:end="225:55">avctx</name><operator pos:start="225:56" pos:end="225:57">-&gt;</operator><name pos:start="225:58" pos:end="225:65">internal</name><operator pos:start="225:66" pos:end="225:67">-&gt;</operator><name pos:start="225:68" pos:end="225:70">pkt</name><operator pos:start="225:71" pos:end="225:72">-&gt;</operator><name pos:start="225:73" pos:end="225:75">pts</name></name></expr></argument>, <argument pos:start="225:78" pos:end="225:85"><expr pos:start="225:78" pos:end="225:85"><name pos:start="225:78" pos:end="225:85">pic_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="227:13" pos:end="237:13"><if pos:start="227:13" pos:end="237:13">if <condition pos:start="227:16" pos:end="227:21">(<expr pos:start="227:17" pos:end="227:20"><operator pos:start="227:17" pos:end="227:17">!</operator><name pos:start="227:18" pos:end="227:20">pts</name></expr>)</condition> <block pos:start="227:23" pos:end="237:13">{<block_content pos:start="229:17" pos:end="235:39">

                <if_stmt pos:start="229:17" pos:end="233:17"><if pos:start="229:17" pos:end="233:17">if <condition pos:start="229:20" pos:end="229:30">(<expr pos:start="229:21" pos:end="229:29"><name pos:start="229:21" pos:end="229:29">free_data</name></expr>)</condition> <block pos:start="229:32" pos:end="233:17">{<block_content pos:start="231:21" pos:end="231:39">

                    <expr_stmt pos:start="231:21" pos:end="231:39"><expr pos:start="231:21" pos:end="231:38"><call pos:start="231:21" pos:end="231:38"><name pos:start="231:21" pos:end="231:28">av_freep</name><argument_list pos:start="231:29" pos:end="231:38">(<argument pos:start="231:30" pos:end="231:37"><expr pos:start="231:30" pos:end="231:37"><operator pos:start="231:30" pos:end="231:30">&amp;</operator><name pos:start="231:31" pos:end="231:37">in_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <return pos:start="235:17" pos:end="235:39">return <expr pos:start="235:24" pos:end="235:38"><call pos:start="235:24" pos:end="235:38"><name pos:start="235:24" pos:end="235:30">AVERROR</name><argument_list pos:start="235:31" pos:end="235:38">(<argument pos:start="235:32" pos:end="235:37"><expr pos:start="235:32" pos:end="235:37"><name pos:start="235:32" pos:end="235:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="239:13" pos:end="241:54"><expr pos:start="239:13" pos:end="241:53"><call pos:start="239:13" pos:end="241:53"><name pos:start="239:13" pos:end="239:18">av_log</name><argument_list pos:start="239:19" pos:end="241:53">(<argument pos:start="239:20" pos:end="239:30"><expr pos:start="239:20" pos:end="239:30"><name pos:start="239:20" pos:end="239:30"><name pos:start="239:20" pos:end="239:23">priv</name><operator pos:start="239:24" pos:end="239:25">-&gt;</operator><name pos:start="239:26" pos:end="239:30">avctx</name></name></expr></argument>, <argument pos:start="239:33" pos:end="239:46"><expr pos:start="239:33" pos:end="239:46"><name pos:start="239:33" pos:end="239:46">AV_LOG_VERBOSE</name></expr></argument>,

                   <argument pos:start="241:20" pos:end="241:47"><expr pos:start="241:20" pos:end="241:47"><literal type="string" pos:start="241:20" pos:end="241:37">"input \"pts\": %"</literal><name pos:start="241:38" pos:end="241:43">PRIu64</name><literal type="string" pos:start="241:44" pos:end="241:47">"\n"</literal></expr></argument>, <argument pos:start="241:50" pos:end="241:52"><expr pos:start="241:50" pos:end="241:52"><name pos:start="241:50" pos:end="241:52">pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:58"><expr pos:start="243:13" pos:end="243:57"><name pos:start="243:13" pos:end="243:15">ret</name> <operator pos:start="243:17" pos:end="243:17">=</operator> <call pos:start="243:19" pos:end="243:57"><name pos:start="243:19" pos:end="243:30">DtsProcInput</name><argument_list pos:start="243:31" pos:end="243:57">(<argument pos:start="243:32" pos:end="243:34"><expr pos:start="243:32" pos:end="243:34"><name pos:start="243:32" pos:end="243:34">dev</name></expr></argument>, <argument pos:start="243:37" pos:end="243:43"><expr pos:start="243:37" pos:end="243:43"><name pos:start="243:37" pos:end="243:43">in_data</name></expr></argument>, <argument pos:start="243:46" pos:end="243:48"><expr pos:start="243:46" pos:end="243:48"><name pos:start="243:46" pos:end="243:48">len</name></expr></argument>, <argument pos:start="243:51" pos:end="243:53"><expr pos:start="243:51" pos:end="243:53"><name pos:start="243:51" pos:end="243:53">pts</name></expr></argument>, <argument pos:start="243:56" pos:end="243:56"><expr pos:start="243:56" pos:end="243:56"><literal type="number" pos:start="243:56" pos:end="243:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="245:13" pos:end="249:13"><if pos:start="245:13" pos:end="249:13">if <condition pos:start="245:16" pos:end="245:26">(<expr pos:start="245:17" pos:end="245:25"><name pos:start="245:17" pos:end="245:25">free_data</name></expr>)</condition> <block pos:start="245:28" pos:end="249:13">{<block_content pos:start="247:17" pos:end="247:35">

                <expr_stmt pos:start="247:17" pos:end="247:35"><expr pos:start="247:17" pos:end="247:34"><call pos:start="247:17" pos:end="247:34"><name pos:start="247:17" pos:end="247:24">av_freep</name><argument_list pos:start="247:25" pos:end="247:34">(<argument pos:start="247:26" pos:end="247:33"><expr pos:start="247:26" pos:end="247:33"><operator pos:start="247:26" pos:end="247:26">&amp;</operator><name pos:start="247:27" pos:end="247:33">in_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="251:13" pos:end="269:13"><if pos:start="251:13" pos:end="261:13">if <condition pos:start="251:16" pos:end="251:35">(<expr pos:start="251:17" pos:end="251:34"><name pos:start="251:17" pos:end="251:19">ret</name> <operator pos:start="251:21" pos:end="251:22">==</operator> <name pos:start="251:24" pos:end="251:34">BC_STS_BUSY</name></expr>)</condition> <block pos:start="251:37" pos:end="261:13">{<block_content pos:start="253:17" pos:end="259:38">

                <expr_stmt pos:start="253:17" pos:end="255:63"><expr pos:start="253:17" pos:end="255:62"><call pos:start="253:17" pos:end="255:62"><name pos:start="253:17" pos:end="253:22">av_log</name><argument_list pos:start="253:23" pos:end="255:62">(<argument pos:start="253:24" pos:end="253:28"><expr pos:start="253:24" pos:end="253:28"><name pos:start="253:24" pos:end="253:28">avctx</name></expr></argument>, <argument pos:start="253:31" pos:end="253:44"><expr pos:start="253:31" pos:end="253:44"><name pos:start="253:31" pos:end="253:44">AV_LOG_WARNING</name></expr></argument>,

                       <argument pos:start="255:24" pos:end="255:61"><expr pos:start="255:24" pos:end="255:61"><literal type="string" pos:start="255:24" pos:end="255:61">"CrystalHD: ProcInput returned busy\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="257:17" pos:end="257:34"><expr pos:start="257:17" pos:end="257:33"><call pos:start="257:17" pos:end="257:33"><name pos:start="257:17" pos:end="257:22">usleep</name><argument_list pos:start="257:23" pos:end="257:33">(<argument pos:start="257:24" pos:end="257:32"><expr pos:start="257:24" pos:end="257:32"><name pos:start="257:24" pos:end="257:32">BASE_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="259:17" pos:end="259:38">return <expr pos:start="259:24" pos:end="259:37"><call pos:start="259:24" pos:end="259:37"><name pos:start="259:24" pos:end="259:30">AVERROR</name><argument_list pos:start="259:31" pos:end="259:37">(<argument pos:start="259:32" pos:end="259:36"><expr pos:start="259:32" pos:end="259:36"><name pos:start="259:32" pos:end="259:36">EBUSY</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if> <if type="elseif" pos:start="261:15" pos:end="269:13">else if <condition pos:start="261:23" pos:end="261:45">(<expr pos:start="261:24" pos:end="261:44"><name pos:start="261:24" pos:end="261:26">ret</name> <operator pos:start="261:28" pos:end="261:29">!=</operator> <name pos:start="261:31" pos:end="261:44">BC_STS_SUCCESS</name></expr>)</condition> <block pos:start="261:47" pos:end="269:13">{<block_content pos:start="263:17" pos:end="267:26">

                <expr_stmt pos:start="263:17" pos:end="265:65"><expr pos:start="263:17" pos:end="265:64"><call pos:start="263:17" pos:end="265:64"><name pos:start="263:17" pos:end="263:22">av_log</name><argument_list pos:start="263:23" pos:end="265:64">(<argument pos:start="263:24" pos:end="263:28"><expr pos:start="263:24" pos:end="263:28"><name pos:start="263:24" pos:end="263:28">avctx</name></expr></argument>, <argument pos:start="263:31" pos:end="263:42"><expr pos:start="263:31" pos:end="263:42"><name pos:start="263:31" pos:end="263:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="265:24" pos:end="265:58"><expr pos:start="265:24" pos:end="265:58"><literal type="string" pos:start="265:24" pos:end="265:58">"CrystalHD: ProcInput failed: %u\n"</literal></expr></argument>, <argument pos:start="265:61" pos:end="265:63"><expr pos:start="265:61" pos:end="265:63"><name pos:start="265:61" pos:end="265:63">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="267:17" pos:end="267:26">return <expr pos:start="267:24" pos:end="267:25"><operator pos:start="267:24" pos:end="267:24">-</operator><literal type="number" pos:start="267:25" pos:end="267:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:34"><expr pos:start="271:13" pos:end="271:33"><name pos:start="271:13" pos:end="271:31"><name pos:start="271:13" pos:end="271:17">avctx</name><operator pos:start="271:18" pos:end="271:19">-&gt;</operator><name pos:start="271:20" pos:end="271:31">has_b_frames</name></name><operator pos:start="271:32" pos:end="271:33">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="273:11" pos:end="279:9">else <block pos:start="273:16" pos:end="279:9">{<block_content pos:start="275:13" pos:end="277:20">

            <expr_stmt pos:start="275:13" pos:end="275:76"><expr pos:start="275:13" pos:end="275:75"><call pos:start="275:13" pos:end="275:75"><name pos:start="275:13" pos:end="275:18">av_log</name><argument_list pos:start="275:19" pos:end="275:75">(<argument pos:start="275:20" pos:end="275:24"><expr pos:start="275:20" pos:end="275:24"><name pos:start="275:20" pos:end="275:24">avctx</name></expr></argument>, <argument pos:start="275:27" pos:end="275:40"><expr pos:start="275:27" pos:end="275:40"><name pos:start="275:27" pos:end="275:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="275:43" pos:end="275:74"><expr pos:start="275:43" pos:end="275:74"><literal type="string" pos:start="275:43" pos:end="275:74">"CrystalHD: Input buffer full\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:20"><expr pos:start="277:13" pos:end="277:19"><name pos:start="277:13" pos:end="277:15">len</name> <operator pos:start="277:17" pos:end="277:17">=</operator> <literal type="number" pos:start="277:19" pos:end="277:19">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="277:22" pos:end="277:52">// We didn't consume any bytes.</comment>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="281:7" pos:end="285:5">else <block pos:start="281:12" pos:end="285:5">{<block_content pos:start="283:9" pos:end="283:70">

        <expr_stmt pos:start="283:9" pos:end="283:70"><expr pos:start="283:9" pos:end="283:69"><call pos:start="283:9" pos:end="283:69"><name pos:start="283:9" pos:end="283:14">av_log</name><argument_list pos:start="283:15" pos:end="283:69">(<argument pos:start="283:16" pos:end="283:20"><expr pos:start="283:16" pos:end="283:20"><name pos:start="283:16" pos:end="283:20">avctx</name></expr></argument>, <argument pos:start="283:23" pos:end="283:33"><expr pos:start="283:23" pos:end="283:33"><name pos:start="283:23" pos:end="283:33">AV_LOG_INFO</name></expr></argument>, <argument pos:start="283:36" pos:end="283:68"><expr pos:start="283:36" pos:end="283:68"><literal type="string" pos:start="283:36" pos:end="283:68">"CrystalHD: No more input data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="289:5" pos:end="299:5"><if pos:start="289:5" pos:end="299:5">if <condition pos:start="289:8" pos:end="289:31">(<expr pos:start="289:9" pos:end="289:30"><name pos:start="289:9" pos:end="289:30"><name pos:start="289:9" pos:end="289:12">priv</name><operator pos:start="289:13" pos:end="289:14">-&gt;</operator><name pos:start="289:15" pos:end="289:30">skip_next_output</name></name></expr>)</condition> <block pos:start="289:33" pos:end="299:5">{<block_content pos:start="291:9" pos:end="297:19">

        <expr_stmt pos:start="291:9" pos:end="291:76"><expr pos:start="291:9" pos:end="291:75"><call pos:start="291:9" pos:end="291:75"><name pos:start="291:9" pos:end="291:14">av_log</name><argument_list pos:start="291:15" pos:end="291:75">(<argument pos:start="291:16" pos:end="291:20"><expr pos:start="291:16" pos:end="291:20"><name pos:start="291:16" pos:end="291:20">avctx</name></expr></argument>, <argument pos:start="291:23" pos:end="291:36"><expr pos:start="291:23" pos:end="291:36"><name pos:start="291:23" pos:end="291:36">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="291:39" pos:end="291:74"><expr pos:start="291:39" pos:end="291:74"><literal type="string" pos:start="291:39" pos:end="291:74">"CrystalHD: Skipping next output.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:35"><expr pos:start="293:9" pos:end="293:34"><name pos:start="293:9" pos:end="293:30"><name pos:start="293:9" pos:end="293:12">priv</name><operator pos:start="293:13" pos:end="293:14">-&gt;</operator><name pos:start="293:15" pos:end="293:30">skip_next_output</name></name> <operator pos:start="293:32" pos:end="293:32">=</operator> <literal type="number" pos:start="293:34" pos:end="293:34">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="295:9" pos:end="295:30"><expr pos:start="295:9" pos:end="295:29"><name pos:start="295:9" pos:end="295:27"><name pos:start="295:9" pos:end="295:13">avctx</name><operator pos:start="295:14" pos:end="295:15">-&gt;</operator><name pos:start="295:16" pos:end="295:27">has_b_frames</name></name><operator pos:start="295:28" pos:end="295:29">--</operator></expr>;</expr_stmt>

        <return pos:start="297:9" pos:end="297:19">return <expr pos:start="297:16" pos:end="297:18"><name pos:start="297:16" pos:end="297:18">len</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="303:5" pos:end="303:51"><expr pos:start="303:5" pos:end="303:50"><name pos:start="303:5" pos:end="303:7">ret</name> <operator pos:start="303:9" pos:end="303:9">=</operator> <call pos:start="303:11" pos:end="303:50"><name pos:start="303:11" pos:end="303:28">DtsGetDriverStatus</name><argument_list pos:start="303:29" pos:end="303:50">(<argument pos:start="303:30" pos:end="303:32"><expr pos:start="303:30" pos:end="303:32"><name pos:start="303:30" pos:end="303:32">dev</name></expr></argument>, <argument pos:start="303:35" pos:end="303:49"><expr pos:start="303:35" pos:end="303:49"><operator pos:start="303:35" pos:end="303:35">&amp;</operator><name pos:start="303:36" pos:end="303:49">decoder_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="305:5" pos:end="311:5"><if pos:start="305:5" pos:end="311:5">if <condition pos:start="305:8" pos:end="305:30">(<expr pos:start="305:9" pos:end="305:29"><name pos:start="305:9" pos:end="305:11">ret</name> <operator pos:start="305:13" pos:end="305:14">!=</operator> <name pos:start="305:16" pos:end="305:29">BC_STS_SUCCESS</name></expr>)</condition> <block pos:start="305:32" pos:end="311:5">{<block_content pos:start="307:9" pos:end="309:18">

        <expr_stmt pos:start="307:9" pos:end="307:75"><expr pos:start="307:9" pos:end="307:74"><call pos:start="307:9" pos:end="307:74"><name pos:start="307:9" pos:end="307:14">av_log</name><argument_list pos:start="307:15" pos:end="307:74">(<argument pos:start="307:16" pos:end="307:20"><expr pos:start="307:16" pos:end="307:20"><name pos:start="307:16" pos:end="307:20">avctx</name></expr></argument>, <argument pos:start="307:23" pos:end="307:34"><expr pos:start="307:23" pos:end="307:34"><name pos:start="307:23" pos:end="307:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="307:37" pos:end="307:73"><expr pos:start="307:37" pos:end="307:73"><literal type="string" pos:start="307:37" pos:end="307:73">"CrystalHD: GetDriverStatus failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="309:9" pos:end="309:18">return <expr pos:start="309:16" pos:end="309:17"><operator pos:start="309:16" pos:end="309:16">-</operator><literal type="number" pos:start="309:17" pos:end="309:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="315:5" pos:end="329:7">/*

     * No frames ready. Don't try to extract.

     *

     * Empirical testing shows that ReadyListCount can be a damn lie,

     * and ProcOut still fails when count &gt; 0. The same testing showed

     * that two more iterations were needed before ProcOutput would

     * succeed.

     */</comment>

    <if_stmt pos:start="331:5" pos:end="365:5"><if pos:start="331:5" pos:end="343:5">if <condition pos:start="331:8" pos:end="331:31">(<expr pos:start="331:9" pos:end="331:30"><name pos:start="331:9" pos:end="331:26"><name pos:start="331:9" pos:end="331:12">priv</name><operator pos:start="331:13" pos:end="331:14">-&gt;</operator><name pos:start="331:15" pos:end="331:26">output_ready</name></name> <operator pos:start="331:28" pos:end="331:28">&lt;</operator> <literal type="number" pos:start="331:30" pos:end="331:30">2</literal></expr>)</condition> <block pos:start="331:33" pos:end="343:5">{<block_content pos:start="333:9" pos:end="341:19">

        <if_stmt pos:start="333:9" pos:end="335:33"><if pos:start="333:9" pos:end="335:33">if <condition pos:start="333:12" pos:end="333:47">(<expr pos:start="333:13" pos:end="333:46"><name pos:start="333:13" pos:end="333:41"><name pos:start="333:13" pos:end="333:26">decoder_status</name><operator pos:start="333:27" pos:end="333:27">.</operator><name pos:start="333:28" pos:end="333:41">ReadyListCount</name></name> <operator pos:start="333:43" pos:end="333:44">!=</operator> <literal type="number" pos:start="333:46" pos:end="333:46">0</literal></expr>)</condition><block type="pseudo" pos:start="335:13" pos:end="335:33"><block_content pos:start="335:13" pos:end="335:33">

            <expr_stmt pos:start="335:13" pos:end="335:33"><expr pos:start="335:13" pos:end="335:32"><name pos:start="335:13" pos:end="335:30"><name pos:start="335:13" pos:end="335:16">priv</name><operator pos:start="335:17" pos:end="335:18">-&gt;</operator><name pos:start="335:19" pos:end="335:30">output_ready</name></name><operator pos:start="335:31" pos:end="335:32">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="337:9" pos:end="337:26"><expr pos:start="337:9" pos:end="337:25"><call pos:start="337:9" pos:end="337:25"><name pos:start="337:9" pos:end="337:14">usleep</name><argument_list pos:start="337:15" pos:end="337:25">(<argument pos:start="337:16" pos:end="337:24"><expr pos:start="337:16" pos:end="337:24"><name pos:start="337:16" pos:end="337:24">BASE_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="339:9" pos:end="339:69"><expr pos:start="339:9" pos:end="339:68"><call pos:start="339:9" pos:end="339:68"><name pos:start="339:9" pos:end="339:14">av_log</name><argument_list pos:start="339:15" pos:end="339:68">(<argument pos:start="339:16" pos:end="339:20"><expr pos:start="339:16" pos:end="339:20"><name pos:start="339:16" pos:end="339:20">avctx</name></expr></argument>, <argument pos:start="339:23" pos:end="339:33"><expr pos:start="339:23" pos:end="339:33"><name pos:start="339:23" pos:end="339:33">AV_LOG_INFO</name></expr></argument>, <argument pos:start="339:36" pos:end="339:67"><expr pos:start="339:36" pos:end="339:67"><literal type="string" pos:start="339:36" pos:end="339:67">"CrystalHD: Filling pipeline.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="341:9" pos:end="341:19">return <expr pos:start="341:16" pos:end="341:18"><name pos:start="341:16" pos:end="341:18">len</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="343:7" pos:end="365:5">else if <condition pos:start="343:15" pos:end="343:50">(<expr pos:start="343:16" pos:end="343:49"><name pos:start="343:16" pos:end="343:44"><name pos:start="343:16" pos:end="343:29">decoder_status</name><operator pos:start="343:30" pos:end="343:30">.</operator><name pos:start="343:31" pos:end="343:44">ReadyListCount</name></name> <operator pos:start="343:46" pos:end="343:47">==</operator> <literal type="number" pos:start="343:49" pos:end="343:49">0</literal></expr>)</condition> <block pos:start="343:52" pos:end="365:5">{<block_content pos:start="357:9" pos:end="363:19">

        <comment type="block" pos:start="345:9" pos:end="355:11">/*

         * After the pipeline is established, if we encounter a lack of frames

         * that probably means we're not giving the hardware enough time to

         * decode them, so start increasing the wait time at the end of a

         * decode call.

         */</comment>

        <expr_stmt pos:start="357:9" pos:end="357:26"><expr pos:start="357:9" pos:end="357:25"><call pos:start="357:9" pos:end="357:25"><name pos:start="357:9" pos:end="357:14">usleep</name><argument_list pos:start="357:15" pos:end="357:25">(<argument pos:start="357:16" pos:end="357:24"><expr pos:start="357:16" pos:end="357:24"><name pos:start="357:16" pos:end="357:24">BASE_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="359:9" pos:end="359:39"><expr pos:start="359:9" pos:end="359:38"><name pos:start="359:9" pos:end="359:25"><name pos:start="359:9" pos:end="359:12">priv</name><operator pos:start="359:13" pos:end="359:14">-&gt;</operator><name pos:start="359:15" pos:end="359:25">decode_wait</name></name> <operator pos:start="359:27" pos:end="359:28">+=</operator> <name pos:start="359:30" pos:end="359:38">WAIT_UNIT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="361:9" pos:end="361:78"><expr pos:start="361:9" pos:end="361:77"><call pos:start="361:9" pos:end="361:77"><name pos:start="361:9" pos:end="361:14">av_log</name><argument_list pos:start="361:15" pos:end="361:77">(<argument pos:start="361:16" pos:end="361:20"><expr pos:start="361:16" pos:end="361:20"><name pos:start="361:16" pos:end="361:20">avctx</name></expr></argument>, <argument pos:start="361:23" pos:end="361:33"><expr pos:start="361:23" pos:end="361:33"><name pos:start="361:23" pos:end="361:33">AV_LOG_INFO</name></expr></argument>, <argument pos:start="361:36" pos:end="361:76"><expr pos:start="361:36" pos:end="361:76"><literal type="string" pos:start="361:36" pos:end="361:76">"CrystalHD: No frames ready. Returning\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="363:9" pos:end="363:19">return <expr pos:start="363:16" pos:end="363:18"><name pos:start="363:16" pos:end="363:18">len</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <do pos:start="369:5" pos:end="469:40">do <block pos:start="369:8" pos:end="469:5">{<block_content pos:start="371:9" pos:end="451:9">

        <expr_stmt pos:start="371:9" pos:end="371:56"><expr pos:start="371:9" pos:end="371:55"><name pos:start="371:9" pos:end="371:15">rec_ret</name> <operator pos:start="371:17" pos:end="371:17">=</operator> <call pos:start="371:19" pos:end="371:55"><name pos:start="371:19" pos:end="371:31">receive_frame</name><argument_list pos:start="371:32" pos:end="371:55">(<argument pos:start="371:33" pos:end="371:37"><expr pos:start="371:33" pos:end="371:37"><name pos:start="371:33" pos:end="371:37">avctx</name></expr></argument>, <argument pos:start="371:40" pos:end="371:43"><expr pos:start="371:40" pos:end="371:43"><name pos:start="371:40" pos:end="371:43">data</name></expr></argument>, <argument pos:start="371:46" pos:end="371:54"><expr pos:start="371:46" pos:end="371:54"><name pos:start="371:46" pos:end="371:54">got_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="373:9" pos:end="451:9"><if pos:start="373:9" pos:end="393:9">if <condition pos:start="373:12" pos:end="373:49">(<expr pos:start="373:13" pos:end="373:48"><name pos:start="373:13" pos:end="373:19">rec_ret</name> <operator pos:start="373:21" pos:end="373:22">==</operator> <name pos:start="373:24" pos:end="373:29">RET_OK</name> <operator pos:start="373:31" pos:end="373:32">&amp;&amp;</operator> <operator pos:start="373:34" pos:end="373:34">*</operator><name pos:start="373:35" pos:end="373:43">got_frame</name> <operator pos:start="373:45" pos:end="373:46">==</operator> <literal type="number" pos:start="373:48" pos:end="373:48">0</literal></expr>)</condition> <block pos:start="373:51" pos:end="393:9">{<block_content pos:start="389:13" pos:end="391:34">

            <comment type="block" pos:start="375:13" pos:end="387:15">/*

             * This case is for when the encoded fields are stored

             * separately and we get a separate avpkt for each one. To keep

             * the pipeline stable, we should return nothing and wait for

             * the next time round to grab the second field.

             * H.264 PAFF is an example of this.

             */</comment>

            <expr_stmt pos:start="389:13" pos:end="389:76"><expr pos:start="389:13" pos:end="389:75"><call pos:start="389:13" pos:end="389:75"><name pos:start="389:13" pos:end="389:18">av_log</name><argument_list pos:start="389:19" pos:end="389:75">(<argument pos:start="389:20" pos:end="389:24"><expr pos:start="389:20" pos:end="389:24"><name pos:start="389:20" pos:end="389:24">avctx</name></expr></argument>, <argument pos:start="389:27" pos:end="389:40"><expr pos:start="389:27" pos:end="389:40"><name pos:start="389:27" pos:end="389:40">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="389:43" pos:end="389:74"><expr pos:start="389:43" pos:end="389:74"><literal type="string" pos:start="389:43" pos:end="389:74">"Returning after first field.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="391:13" pos:end="391:34"><expr pos:start="391:13" pos:end="391:33"><name pos:start="391:13" pos:end="391:31"><name pos:start="391:13" pos:end="391:17">avctx</name><operator pos:start="391:18" pos:end="391:19">-&gt;</operator><name pos:start="391:20" pos:end="391:31">has_b_frames</name></name><operator pos:start="391:32" pos:end="391:33">--</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="393:11" pos:end="437:9">else if <condition pos:start="393:19" pos:end="393:50">(<expr pos:start="393:20" pos:end="393:49"><name pos:start="393:20" pos:end="393:26">rec_ret</name> <operator pos:start="393:28" pos:end="393:29">==</operator> <name pos:start="393:31" pos:end="393:49">RET_COPY_NEXT_FIELD</name></expr>)</condition> <block pos:start="393:52" pos:end="437:9">{<block_content pos:start="411:13" pos:end="435:76">

            <comment type="block" pos:start="395:13" pos:end="409:15">/*

             * This case is for when the encoded fields are stored in a

             * single avpkt but the hardware returns then separately. Unless

             * we grab the second field before returning, we'll slip another

             * frame in the pipeline and if that happens a lot, we're sunk.

             * So we have to get that second field now.

             * Interlaced mpeg2 and vc1 are examples of this.

             */</comment>

            <expr_stmt pos:start="411:13" pos:end="411:75"><expr pos:start="411:13" pos:end="411:74"><call pos:start="411:13" pos:end="411:74"><name pos:start="411:13" pos:end="411:18">av_log</name><argument_list pos:start="411:19" pos:end="411:74">(<argument pos:start="411:20" pos:end="411:24"><expr pos:start="411:20" pos:end="411:24"><name pos:start="411:20" pos:end="411:24">avctx</name></expr></argument>, <argument pos:start="411:27" pos:end="411:40"><expr pos:start="411:27" pos:end="411:40"><name pos:start="411:27" pos:end="411:40">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="411:43" pos:end="411:73"><expr pos:start="411:43" pos:end="411:73"><literal type="string" pos:start="411:43" pos:end="411:73">"Trying to get second field.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="413:13" pos:end="433:13">while <condition pos:start="413:19" pos:end="413:21">(<expr pos:start="413:20" pos:end="413:20"><literal type="number" pos:start="413:20" pos:end="413:20">1</literal></expr>)</condition> <block pos:start="413:23" pos:end="433:13">{<block_content pos:start="415:17" pos:end="431:17">

                <expr_stmt pos:start="415:17" pos:end="415:42"><expr pos:start="415:17" pos:end="415:41"><call pos:start="415:17" pos:end="415:41"><name pos:start="415:17" pos:end="415:22">usleep</name><argument_list pos:start="415:23" pos:end="415:41">(<argument pos:start="415:24" pos:end="415:40"><expr pos:start="415:24" pos:end="415:40"><name pos:start="415:24" pos:end="415:40"><name pos:start="415:24" pos:end="415:27">priv</name><operator pos:start="415:28" pos:end="415:29">-&gt;</operator><name pos:start="415:30" pos:end="415:40">decode_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="417:17" pos:end="417:63"><expr pos:start="417:17" pos:end="417:62"><name pos:start="417:17" pos:end="417:19">ret</name> <operator pos:start="417:21" pos:end="417:21">=</operator> <call pos:start="417:23" pos:end="417:62"><name pos:start="417:23" pos:end="417:40">DtsGetDriverStatus</name><argument_list pos:start="417:41" pos:end="417:62">(<argument pos:start="417:42" pos:end="417:44"><expr pos:start="417:42" pos:end="417:44"><name pos:start="417:42" pos:end="417:44">dev</name></expr></argument>, <argument pos:start="417:47" pos:end="417:61"><expr pos:start="417:47" pos:end="417:61"><operator pos:start="417:47" pos:end="417:47">&amp;</operator><name pos:start="417:48" pos:end="417:61">decoder_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="419:17" pos:end="431:17"><if pos:start="419:17" pos:end="431:17">if <condition pos:start="419:20" pos:end="421:54">(<expr pos:start="419:21" pos:end="421:53"><name pos:start="419:21" pos:end="419:23">ret</name> <operator pos:start="419:25" pos:end="419:26">==</operator> <name pos:start="419:28" pos:end="419:41">BC_STS_SUCCESS</name> <operator pos:start="419:43" pos:end="419:44">&amp;&amp;</operator>

                    <name pos:start="421:21" pos:end="421:49"><name pos:start="421:21" pos:end="421:34">decoder_status</name><operator pos:start="421:35" pos:end="421:35">.</operator><name pos:start="421:36" pos:end="421:49">ReadyListCount</name></name> <operator pos:start="421:51" pos:end="421:51">&gt;</operator> <literal type="number" pos:start="421:53" pos:end="421:53">0</literal></expr>)</condition> <block pos:start="421:56" pos:end="431:17">{<block_content pos:start="423:21" pos:end="429:30">

                    <expr_stmt pos:start="423:21" pos:end="423:68"><expr pos:start="423:21" pos:end="423:67"><name pos:start="423:21" pos:end="423:27">rec_ret</name> <operator pos:start="423:29" pos:end="423:29">=</operator> <call pos:start="423:31" pos:end="423:67"><name pos:start="423:31" pos:end="423:43">receive_frame</name><argument_list pos:start="423:44" pos:end="423:67">(<argument pos:start="423:45" pos:end="423:49"><expr pos:start="423:45" pos:end="423:49"><name pos:start="423:45" pos:end="423:49">avctx</name></expr></argument>, <argument pos:start="423:52" pos:end="423:55"><expr pos:start="423:52" pos:end="423:55"><name pos:start="423:52" pos:end="423:55">data</name></expr></argument>, <argument pos:start="423:58" pos:end="423:66"><expr pos:start="423:58" pos:end="423:66"><name pos:start="423:58" pos:end="423:66">got_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="425:21" pos:end="429:30"><if pos:start="425:21" pos:end="429:30">if <condition pos:start="425:24" pos:end="427:45">(<expr pos:start="425:25" pos:end="427:44"><operator pos:start="425:25" pos:end="425:25">(</operator><name pos:start="425:26" pos:end="425:32">rec_ret</name> <operator pos:start="425:34" pos:end="425:35">==</operator> <name pos:start="425:37" pos:end="425:42">RET_OK</name> <operator pos:start="425:44" pos:end="425:45">&amp;&amp;</operator> <operator pos:start="425:47" pos:end="425:47">*</operator><name pos:start="425:48" pos:end="425:56">got_frame</name> <operator pos:start="425:58" pos:end="425:58">&gt;</operator> <literal type="number" pos:start="425:60" pos:end="425:60">0</literal><operator pos:start="425:61" pos:end="425:61">)</operator> <operator pos:start="425:63" pos:end="425:64">||</operator>

                        <name pos:start="427:25" pos:end="427:31">rec_ret</name> <operator pos:start="427:33" pos:end="427:34">==</operator> <name pos:start="427:36" pos:end="427:44">RET_ERROR</name></expr>)</condition><block type="pseudo" pos:start="429:25" pos:end="429:30"><block_content pos:start="429:25" pos:end="429:30">

                        <break pos:start="429:25" pos:end="429:30">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="435:13" pos:end="435:76"><expr pos:start="435:13" pos:end="435:75"><call pos:start="435:13" pos:end="435:75"><name pos:start="435:13" pos:end="435:18">av_log</name><argument_list pos:start="435:19" pos:end="435:75">(<argument pos:start="435:20" pos:end="435:24"><expr pos:start="435:20" pos:end="435:24"><name pos:start="435:20" pos:end="435:24">avctx</name></expr></argument>, <argument pos:start="435:27" pos:end="435:40"><expr pos:start="435:27" pos:end="435:40"><name pos:start="435:27" pos:end="435:40">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="435:43" pos:end="435:74"><expr pos:start="435:43" pos:end="435:74"><literal type="string" pos:start="435:43" pos:end="435:74">"CrystalHD: Got second field.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="437:11" pos:end="451:9">else if <condition pos:start="437:19" pos:end="437:49">(<expr pos:start="437:20" pos:end="437:48"><name pos:start="437:20" pos:end="437:26">rec_ret</name> <operator pos:start="437:28" pos:end="437:29">==</operator> <name pos:start="437:31" pos:end="437:48">RET_SKIP_NEXT_COPY</name></expr>)</condition> <block pos:start="437:51" pos:end="451:9">{<block_content pos:start="445:13" pos:end="449:39">

            <comment type="block" pos:start="439:13" pos:end="443:15">/*

             * Two input packets got turned into a field pair. Gawd.

             */</comment>

            <expr_stmt pos:start="445:13" pos:end="447:58"><expr pos:start="445:13" pos:end="447:57"><call pos:start="445:13" pos:end="447:57"><name pos:start="445:13" pos:end="445:18">av_log</name><argument_list pos:start="445:19" pos:end="447:57">(<argument pos:start="445:20" pos:end="445:24"><expr pos:start="445:20" pos:end="445:24"><name pos:start="445:20" pos:end="445:24">avctx</name></expr></argument>, <argument pos:start="445:27" pos:end="445:40"><expr pos:start="445:27" pos:end="445:40"><name pos:start="445:27" pos:end="445:40">AV_LOG_VERBOSE</name></expr></argument>,

                   <argument pos:start="447:20" pos:end="447:56"><expr pos:start="447:20" pos:end="447:56"><literal type="string" pos:start="447:20" pos:end="447:56">"Don't output on next decode call.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="449:13" pos:end="449:39"><expr pos:start="449:13" pos:end="449:38"><name pos:start="449:13" pos:end="449:34"><name pos:start="449:13" pos:end="449:16">priv</name><operator pos:start="449:17" pos:end="449:18">-&gt;</operator><name pos:start="449:19" pos:end="449:34">skip_next_output</name></name> <operator pos:start="449:36" pos:end="449:36">=</operator> <literal type="number" pos:start="449:38" pos:end="449:38">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="453:9" pos:end="467:11">/*

         * If rec_ret == RET_COPY_AGAIN, that means that either we just handled

         * a FMT_CHANGE event and need to go around again for the actual frame,

         * we got a busy status and need to try again, or we're dealing with

         * packed b-frames, where the hardware strangely returns the packed

         * p-frame twice. We choose to keep the second copy as it carries the

         * valid pts.

         */</comment>

    </block_content>}</block> while <condition pos:start="469:13" pos:end="469:39">(<expr pos:start="469:14" pos:end="469:38"><name pos:start="469:14" pos:end="469:20">rec_ret</name> <operator pos:start="469:22" pos:end="469:23">==</operator> <name pos:start="469:25" pos:end="469:38">RET_COPY_AGAIN</name></expr>)</condition>;</do>

    <expr_stmt pos:start="471:5" pos:end="471:30"><expr pos:start="471:5" pos:end="471:29"><call pos:start="471:5" pos:end="471:29"><name pos:start="471:5" pos:end="471:10">usleep</name><argument_list pos:start="471:11" pos:end="471:29">(<argument pos:start="471:12" pos:end="471:28"><expr pos:start="471:12" pos:end="471:28"><name pos:start="471:12" pos:end="471:28"><name pos:start="471:12" pos:end="471:15">priv</name><operator pos:start="471:16" pos:end="471:17">-&gt;</operator><name pos:start="471:18" pos:end="471:28">decode_wait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="473:5" pos:end="473:15">return <expr pos:start="473:12" pos:end="473:14"><name pos:start="473:12" pos:end="473:14">len</name></expr>;</return>

</block_content>}</block></function>
</unit>
