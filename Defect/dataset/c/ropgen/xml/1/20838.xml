<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20838.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">numa_add</name><parameter_list pos:start="1:21" pos:end="1:40">(<parameter pos:start="1:22" pos:end="1:39"><decl pos:start="1:22" pos:end="1:39"><type pos:start="1:22" pos:end="1:33"><specifier pos:start="1:22" pos:end="1:26">const</specifier> <name pos:start="1:28" pos:end="1:31">char</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">optarg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="129:1">{<block_content pos:start="5:5" pos:end="127:5">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:20"><name pos:start="5:10" pos:end="5:15">option</name><index pos:start="5:16" pos:end="5:20">[<expr pos:start="5:17" pos:end="5:19"><literal type="number" pos:start="5:17" pos:end="5:19">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:16">endptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">long</name> <name pos:start="9:19" pos:end="9:22">long</name></type> <name pos:start="9:24" pos:end="9:28">value</name></decl>, <decl pos:start="9:31" pos:end="9:38"><type ref="prev" pos:start="9:5" pos:end="9:22"/><name pos:start="9:31" pos:end="9:38">endvalue</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">long</name> <name pos:start="11:19" pos:end="11:22">long</name></type> <name pos:start="11:24" pos:end="11:29">nodenr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:28"><expr pos:start="15:5" pos:end="15:27"><name pos:start="15:5" pos:end="15:9">value</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <name pos:start="15:13" pos:end="15:20">endvalue</name> <operator pos:start="15:22" pos:end="15:22">=</operator> <literal type="number" pos:start="15:24" pos:end="15:27">0ULL</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:52"><expr pos:start="19:5" pos:end="19:51"><name pos:start="19:5" pos:end="19:10">optarg</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <call pos:start="19:14" pos:end="19:51"><name pos:start="19:14" pos:end="19:25">get_opt_name</name><argument_list pos:start="19:26" pos:end="19:51">(<argument pos:start="19:27" pos:end="19:32"><expr pos:start="19:27" pos:end="19:32"><name pos:start="19:27" pos:end="19:32">option</name></expr></argument>, <argument pos:start="19:35" pos:end="19:37"><expr pos:start="19:35" pos:end="19:37"><literal type="number" pos:start="19:35" pos:end="19:37">128</literal></expr></argument>, <argument pos:start="19:40" pos:end="19:45"><expr pos:start="19:40" pos:end="19:45"><name pos:start="19:40" pos:end="19:45">optarg</name></expr></argument>, <argument pos:start="19:48" pos:end="19:50"><expr pos:start="19:48" pos:end="19:50"><literal type="char" pos:start="19:48" pos:end="19:50">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:23">(<expr pos:start="21:9" pos:end="21:22"><operator pos:start="21:9" pos:end="21:9">*</operator><name pos:start="21:10" pos:end="21:15">optarg</name> <operator pos:start="21:17" pos:end="21:18">==</operator> <literal type="char" pos:start="21:20" pos:end="21:22">','</literal></expr>)</condition> <block pos:start="21:25" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:17">

        <expr_stmt pos:start="23:9" pos:end="23:17"><expr pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:14">optarg</name><operator pos:start="23:15" pos:end="23:16">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="27:5" pos:end="127:5"><if pos:start="27:5" pos:end="121:5">if <condition pos:start="27:8" pos:end="27:32">(<expr pos:start="27:9" pos:end="27:31"><operator pos:start="27:9" pos:end="27:9">!</operator><call pos:start="27:10" pos:end="27:31"><name pos:start="27:10" pos:end="27:15">strcmp</name><argument_list pos:start="27:16" pos:end="27:31">(<argument pos:start="27:17" pos:end="27:22"><expr pos:start="27:17" pos:end="27:22"><name pos:start="27:17" pos:end="27:22">option</name></expr></argument>, <argument pos:start="27:25" pos:end="27:30"><expr pos:start="27:25" pos:end="27:30"><literal type="string" pos:start="27:25" pos:end="27:30">"node"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:34" pos:end="121:5">{<block_content pos:start="31:9" pos:end="119:24">



        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:39">(<expr pos:start="31:13" pos:end="31:38"><name pos:start="31:13" pos:end="31:25">nb_numa_nodes</name> <operator pos:start="31:27" pos:end="31:28">&gt;=</operator> <name pos:start="31:30" pos:end="31:38">MAX_NODES</name></expr>)</condition> <block pos:start="31:41" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:20">

            <expr_stmt pos:start="33:13" pos:end="33:59"><expr pos:start="33:13" pos:end="33:58"><call pos:start="33:13" pos:end="33:58"><name pos:start="33:13" pos:end="33:19">fprintf</name><argument_list pos:start="33:20" pos:end="33:58">(<argument pos:start="33:21" pos:end="33:26"><expr pos:start="33:21" pos:end="33:26"><name pos:start="33:21" pos:end="33:26">stderr</name></expr></argument>, <argument pos:start="33:29" pos:end="33:57"><expr pos:start="33:29" pos:end="33:57"><literal type="string" pos:start="33:29" pos:end="33:57">"qemu: too many NUMA nodes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:20"><expr pos:start="35:13" pos:end="35:19"><call pos:start="35:13" pos:end="35:19"><name pos:start="35:13" pos:end="35:16">exit</name><argument_list pos:start="35:17" pos:end="35:19">(<argument pos:start="35:18" pos:end="35:18"><expr pos:start="35:18" pos:end="35:18"><literal type="number" pos:start="35:18" pos:end="35:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="41:9" pos:end="49:9"><if pos:start="41:9" pos:end="45:9">if <condition pos:start="41:12" pos:end="41:64">(<expr pos:start="41:13" pos:end="41:63"><call pos:start="41:13" pos:end="41:58"><name pos:start="41:13" pos:end="41:27">get_param_value</name><argument_list pos:start="41:28" pos:end="41:58">(<argument pos:start="41:29" pos:end="41:34"><expr pos:start="41:29" pos:end="41:34"><name pos:start="41:29" pos:end="41:34">option</name></expr></argument>, <argument pos:start="41:37" pos:end="41:39"><expr pos:start="41:37" pos:end="41:39"><literal type="number" pos:start="41:37" pos:end="41:39">128</literal></expr></argument>, <argument pos:start="41:42" pos:end="41:49"><expr pos:start="41:42" pos:end="41:49"><literal type="string" pos:start="41:42" pos:end="41:49">"nodeid"</literal></expr></argument>, <argument pos:start="41:52" pos:end="41:57"><expr pos:start="41:52" pos:end="41:57"><name pos:start="41:52" pos:end="41:57">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="41:60" pos:end="41:61">==</operator> <literal type="number" pos:start="41:63" pos:end="41:63">0</literal></expr>)</condition> <block pos:start="41:66" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:35">

            <expr_stmt pos:start="43:13" pos:end="43:35"><expr pos:start="43:13" pos:end="43:34"><name pos:start="43:13" pos:end="43:18">nodenr</name> <operator pos:start="43:20" pos:end="43:20">=</operator> <name pos:start="43:22" pos:end="43:34">nb_numa_nodes</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="45:11" pos:end="49:9">else <block pos:start="45:16" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:48">

            <expr_stmt pos:start="47:13" pos:end="47:48"><expr pos:start="47:13" pos:end="47:47"><name pos:start="47:13" pos:end="47:18">nodenr</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <call pos:start="47:22" pos:end="47:47"><name pos:start="47:22" pos:end="47:29">strtoull</name><argument_list pos:start="47:30" pos:end="47:47">(<argument pos:start="47:31" pos:end="47:36"><expr pos:start="47:31" pos:end="47:36"><name pos:start="47:31" pos:end="47:36">option</name></expr></argument>, <argument pos:start="47:39" pos:end="47:42"><expr pos:start="47:39" pos:end="47:42"><name pos:start="47:39" pos:end="47:42">NULL</name></expr></argument>, <argument pos:start="47:45" pos:end="47:46"><expr pos:start="47:45" pos:end="47:46"><literal type="number" pos:start="47:45" pos:end="47:46">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="53:9" pos:end="59:9"><if pos:start="53:9" pos:end="59:9">if <condition pos:start="53:12" pos:end="53:32">(<expr pos:start="53:13" pos:end="53:31"><name pos:start="53:13" pos:end="53:18">nodenr</name> <operator pos:start="53:20" pos:end="53:21">&gt;=</operator> <name pos:start="53:23" pos:end="53:31">MAX_NODES</name></expr>)</condition> <block pos:start="53:34" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:20">

            <expr_stmt pos:start="55:13" pos:end="55:73"><expr pos:start="55:13" pos:end="55:72"><call pos:start="55:13" pos:end="55:72"><name pos:start="55:13" pos:end="55:19">fprintf</name><argument_list pos:start="55:20" pos:end="55:72">(<argument pos:start="55:21" pos:end="55:26"><expr pos:start="55:21" pos:end="55:26"><name pos:start="55:21" pos:end="55:26">stderr</name></expr></argument>, <argument pos:start="55:29" pos:end="55:63"><expr pos:start="55:29" pos:end="55:63"><literal type="string" pos:start="55:29" pos:end="55:63">"qemu: invalid NUMA nodeid: %llu\n"</literal></expr></argument>, <argument pos:start="55:66" pos:end="55:71"><expr pos:start="55:66" pos:end="55:71"><name pos:start="55:66" pos:end="55:71">nodenr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:20"><expr pos:start="57:13" pos:end="57:19"><call pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:16">exit</name><argument_list pos:start="57:17" pos:end="57:19">(<argument pos:start="57:18" pos:end="57:18"><expr pos:start="57:18" pos:end="57:18"><literal type="number" pos:start="57:18" pos:end="57:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="63:9" pos:end="83:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:61">(<expr pos:start="63:13" pos:end="63:60"><call pos:start="63:13" pos:end="63:55"><name pos:start="63:13" pos:end="63:27">get_param_value</name><argument_list pos:start="63:28" pos:end="63:55">(<argument pos:start="63:29" pos:end="63:34"><expr pos:start="63:29" pos:end="63:34"><name pos:start="63:29" pos:end="63:34">option</name></expr></argument>, <argument pos:start="63:37" pos:end="63:39"><expr pos:start="63:37" pos:end="63:39"><literal type="number" pos:start="63:37" pos:end="63:39">128</literal></expr></argument>, <argument pos:start="63:42" pos:end="63:46"><expr pos:start="63:42" pos:end="63:46"><literal type="string" pos:start="63:42" pos:end="63:46">"mem"</literal></expr></argument>, <argument pos:start="63:49" pos:end="63:54"><expr pos:start="63:49" pos:end="63:54"><name pos:start="63:49" pos:end="63:54">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="63:57" pos:end="63:58">==</operator> <literal type="number" pos:start="63:60" pos:end="63:60">0</literal></expr>)</condition> <block pos:start="63:63" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:33">

            <expr_stmt pos:start="65:13" pos:end="65:33"><expr pos:start="65:13" pos:end="65:32"><name pos:start="65:13" pos:end="65:28"><name pos:start="65:13" pos:end="65:20">node_mem</name><index pos:start="65:21" pos:end="65:28">[<expr pos:start="65:22" pos:end="65:27"><name pos:start="65:22" pos:end="65:27">nodenr</name></expr>]</index></name> <operator pos:start="65:30" pos:end="65:30">=</operator> <literal type="number" pos:start="65:32" pos:end="65:32">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="67:11" pos:end="83:9">else <block pos:start="67:16" pos:end="83:9">{<block_content pos:start="69:13" pos:end="81:36">

            <decl_stmt pos:start="69:13" pos:end="69:25"><decl pos:start="69:13" pos:end="69:24"><type pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:19">int64_t</name></type> <name pos:start="69:21" pos:end="69:24">sval</name></decl>;</decl_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:44"><expr pos:start="71:13" pos:end="71:43"><name pos:start="71:13" pos:end="71:16">sval</name> <operator pos:start="71:18" pos:end="71:18">=</operator> <call pos:start="71:20" pos:end="71:43"><name pos:start="71:20" pos:end="71:26">strtosz</name><argument_list pos:start="71:27" pos:end="71:43">(<argument pos:start="71:28" pos:end="71:33"><expr pos:start="71:28" pos:end="71:33"><name pos:start="71:28" pos:end="71:33">option</name></expr></argument>, <argument pos:start="71:36" pos:end="71:42"><expr pos:start="71:36" pos:end="71:42"><operator pos:start="71:36" pos:end="71:36">&amp;</operator><name pos:start="71:37" pos:end="71:42">endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="79:13"><if pos:start="73:13" pos:end="79:13">if <condition pos:start="73:16" pos:end="73:36">(<expr pos:start="73:17" pos:end="73:35"><name pos:start="73:17" pos:end="73:20">sval</name> <operator pos:start="73:22" pos:end="73:22">&lt;</operator> <literal type="number" pos:start="73:24" pos:end="73:24">0</literal> <operator pos:start="73:26" pos:end="73:27">||</operator> <operator pos:start="73:29" pos:end="73:29">*</operator><name pos:start="73:30" pos:end="73:35">endptr</name></expr>)</condition> <block pos:start="73:38" pos:end="79:13">{<block_content pos:start="75:17" pos:end="77:24">

                <expr_stmt pos:start="75:17" pos:end="75:77"><expr pos:start="75:17" pos:end="75:76"><call pos:start="75:17" pos:end="75:76"><name pos:start="75:17" pos:end="75:23">fprintf</name><argument_list pos:start="75:24" pos:end="75:76">(<argument pos:start="75:25" pos:end="75:30"><expr pos:start="75:25" pos:end="75:30"><name pos:start="75:25" pos:end="75:30">stderr</name></expr></argument>, <argument pos:start="75:33" pos:end="75:67"><expr pos:start="75:33" pos:end="75:67"><literal type="string" pos:start="75:33" pos:end="75:67">"qemu: invalid numa mem size: %s\n"</literal></expr></argument>, <argument pos:start="75:70" pos:end="75:75"><expr pos:start="75:70" pos:end="75:75"><name pos:start="75:70" pos:end="75:75">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:24"><expr pos:start="77:17" pos:end="77:23"><call pos:start="77:17" pos:end="77:23"><name pos:start="77:17" pos:end="77:20">exit</name><argument_list pos:start="77:21" pos:end="77:23">(<argument pos:start="77:22" pos:end="77:22"><expr pos:start="77:22" pos:end="77:22"><literal type="number" pos:start="77:22" pos:end="77:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:36"><expr pos:start="81:13" pos:end="81:35"><name pos:start="81:13" pos:end="81:28"><name pos:start="81:13" pos:end="81:20">node_mem</name><index pos:start="81:21" pos:end="81:28">[<expr pos:start="81:22" pos:end="81:27"><name pos:start="81:22" pos:end="81:27">nodenr</name></expr>]</index></name> <operator pos:start="81:30" pos:end="81:30">=</operator> <name pos:start="81:32" pos:end="81:35">sval</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="85:9" pos:end="117:9"><if pos:start="85:9" pos:end="117:9">if <condition pos:start="85:12" pos:end="85:62">(<expr pos:start="85:13" pos:end="85:61"><call pos:start="85:13" pos:end="85:56"><name pos:start="85:13" pos:end="85:27">get_param_value</name><argument_list pos:start="85:28" pos:end="85:56">(<argument pos:start="85:29" pos:end="85:34"><expr pos:start="85:29" pos:end="85:34"><name pos:start="85:29" pos:end="85:34">option</name></expr></argument>, <argument pos:start="85:37" pos:end="85:39"><expr pos:start="85:37" pos:end="85:39"><literal type="number" pos:start="85:37" pos:end="85:39">128</literal></expr></argument>, <argument pos:start="85:42" pos:end="85:47"><expr pos:start="85:42" pos:end="85:47"><literal type="string" pos:start="85:42" pos:end="85:47">"cpus"</literal></expr></argument>, <argument pos:start="85:50" pos:end="85:55"><expr pos:start="85:50" pos:end="85:55"><name pos:start="85:50" pos:end="85:55">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="85:58" pos:end="85:59">!=</operator> <literal type="number" pos:start="85:61" pos:end="85:61">0</literal></expr>)</condition> <block pos:start="85:64" pos:end="117:9">{<block_content pos:start="87:13" pos:end="115:70">

            <expr_stmt pos:start="87:13" pos:end="87:50"><expr pos:start="87:13" pos:end="87:49"><name pos:start="87:13" pos:end="87:17">value</name> <operator pos:start="87:19" pos:end="87:19">=</operator> <call pos:start="87:21" pos:end="87:49"><name pos:start="87:21" pos:end="87:28">strtoull</name><argument_list pos:start="87:29" pos:end="87:49">(<argument pos:start="87:30" pos:end="87:35"><expr pos:start="87:30" pos:end="87:35"><name pos:start="87:30" pos:end="87:35">option</name></expr></argument>, <argument pos:start="87:38" pos:end="87:44"><expr pos:start="87:38" pos:end="87:44"><operator pos:start="87:38" pos:end="87:38">&amp;</operator><name pos:start="87:39" pos:end="87:44">endptr</name></expr></argument>, <argument pos:start="87:47" pos:end="87:48"><expr pos:start="87:47" pos:end="87:48"><literal type="number" pos:start="87:47" pos:end="87:48">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="89:13" pos:end="97:13"><if pos:start="89:13" pos:end="93:13">if <condition pos:start="89:16" pos:end="89:31">(<expr pos:start="89:17" pos:end="89:30"><operator pos:start="89:17" pos:end="89:17">*</operator><name pos:start="89:18" pos:end="89:23">endptr</name> <operator pos:start="89:25" pos:end="89:26">==</operator> <literal type="char" pos:start="89:28" pos:end="89:30">'-'</literal></expr>)</condition> <block pos:start="89:33" pos:end="93:13">{<block_content pos:start="91:17" pos:end="91:59">

                <expr_stmt pos:start="91:17" pos:end="91:59"><expr pos:start="91:17" pos:end="91:58"><name pos:start="91:17" pos:end="91:24">endvalue</name> <operator pos:start="91:26" pos:end="91:26">=</operator> <call pos:start="91:28" pos:end="91:58"><name pos:start="91:28" pos:end="91:35">strtoull</name><argument_list pos:start="91:36" pos:end="91:58">(<argument pos:start="91:37" pos:end="91:44"><expr pos:start="91:37" pos:end="91:44"><name pos:start="91:37" pos:end="91:42">endptr</name><operator pos:start="91:43" pos:end="91:43">+</operator><literal type="number" pos:start="91:44" pos:end="91:44">1</literal></expr></argument>, <argument pos:start="91:47" pos:end="91:53"><expr pos:start="91:47" pos:end="91:53"><operator pos:start="91:47" pos:end="91:47">&amp;</operator><name pos:start="91:48" pos:end="91:53">endptr</name></expr></argument>, <argument pos:start="91:56" pos:end="91:57"><expr pos:start="91:56" pos:end="91:57"><literal type="number" pos:start="91:56" pos:end="91:57">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="93:15" pos:end="97:13">else <block pos:start="93:20" pos:end="97:13">{<block_content pos:start="95:17" pos:end="95:33">

                <expr_stmt pos:start="95:17" pos:end="95:33"><expr pos:start="95:17" pos:end="95:32"><name pos:start="95:17" pos:end="95:24">endvalue</name> <operator pos:start="95:26" pos:end="95:26">=</operator> <name pos:start="95:28" pos:end="95:32">value</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="101:13" pos:end="111:13"><if pos:start="101:13" pos:end="111:13">if <condition pos:start="101:16" pos:end="101:47">(<expr pos:start="101:17" pos:end="101:46"><operator pos:start="101:17" pos:end="101:17">!</operator><operator pos:start="101:18" pos:end="101:18">(</operator><name pos:start="101:19" pos:end="101:26">endvalue</name> <operator pos:start="101:28" pos:end="101:28">&lt;</operator> <name pos:start="101:30" pos:end="101:45">MAX_CPUMASK_BITS</name><operator pos:start="101:46" pos:end="101:46">)</operator></expr>)</condition> <block pos:start="101:49" pos:end="111:13">{<block_content pos:start="103:17" pos:end="109:39">

                <expr_stmt pos:start="103:17" pos:end="103:48"><expr pos:start="103:17" pos:end="103:47"><name pos:start="103:17" pos:end="103:24">endvalue</name> <operator pos:start="103:26" pos:end="103:26">=</operator> <name pos:start="103:28" pos:end="103:43">MAX_CPUMASK_BITS</name> <operator pos:start="103:45" pos:end="103:45">-</operator> <literal type="number" pos:start="103:47" pos:end="103:47">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="109:39"><expr pos:start="105:17" pos:end="109:38"><call pos:start="105:17" pos:end="109:38"><name pos:start="105:17" pos:end="105:23">fprintf</name><argument_list pos:start="105:24" pos:end="109:38">(<argument pos:start="105:25" pos:end="105:30"><expr pos:start="105:25" pos:end="105:30"><name pos:start="105:25" pos:end="105:30">stderr</name></expr></argument>,

                    <argument pos:start="107:21" pos:end="107:65"><expr pos:start="107:21" pos:end="107:65"><literal type="string" pos:start="107:21" pos:end="107:65">"A max of %d CPUs are supported in a guest\n"</literal></expr></argument>,

                     <argument pos:start="109:22" pos:end="109:37"><expr pos:start="109:22" pos:end="109:37"><name pos:start="109:22" pos:end="109:37">MAX_CPUMASK_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="115:13" pos:end="115:70"><expr pos:start="115:13" pos:end="115:69"><call pos:start="115:13" pos:end="115:69"><name pos:start="115:13" pos:end="115:22">bitmap_set</name><argument_list pos:start="115:23" pos:end="115:69">(<argument pos:start="115:24" pos:end="115:43"><expr pos:start="115:24" pos:end="115:43"><name pos:start="115:24" pos:end="115:43"><name pos:start="115:24" pos:end="115:35">node_cpumask</name><index pos:start="115:36" pos:end="115:43">[<expr pos:start="115:37" pos:end="115:42"><name pos:start="115:37" pos:end="115:42">nodenr</name></expr>]</index></name></expr></argument>, <argument pos:start="115:46" pos:end="115:50"><expr pos:start="115:46" pos:end="115:50"><name pos:start="115:46" pos:end="115:50">value</name></expr></argument>, <argument pos:start="115:53" pos:end="115:68"><expr pos:start="115:53" pos:end="115:68"><name pos:start="115:53" pos:end="115:60">endvalue</name><operator pos:start="115:61" pos:end="115:61">-</operator><name pos:start="115:62" pos:end="115:66">value</name><operator pos:start="115:67" pos:end="115:67">+</operator><literal type="number" pos:start="115:68" pos:end="115:68">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:24"><expr pos:start="119:9" pos:end="119:23"><name pos:start="119:9" pos:end="119:21">nb_numa_nodes</name><operator pos:start="119:22" pos:end="119:23">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="121:7" pos:end="127:5">else <block pos:start="121:12" pos:end="127:5">{<block_content pos:start="123:9" pos:end="125:16">

        <expr_stmt pos:start="123:9" pos:end="123:62"><expr pos:start="123:9" pos:end="123:61"><call pos:start="123:9" pos:end="123:61"><name pos:start="123:9" pos:end="123:15">fprintf</name><argument_list pos:start="123:16" pos:end="123:61">(<argument pos:start="123:17" pos:end="123:22"><expr pos:start="123:17" pos:end="123:22"><name pos:start="123:17" pos:end="123:22">stderr</name></expr></argument>, <argument pos:start="123:25" pos:end="123:52"><expr pos:start="123:25" pos:end="123:52"><literal type="string" pos:start="123:25" pos:end="123:52">"Invalid -numa option: %s\n"</literal></expr></argument>, <argument pos:start="123:55" pos:end="123:60"><expr pos:start="123:55" pos:end="123:60"><name pos:start="123:55" pos:end="123:60">option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:16"><expr pos:start="125:9" pos:end="125:15"><call pos:start="125:9" pos:end="125:15"><name pos:start="125:9" pos:end="125:12">exit</name><argument_list pos:start="125:13" pos:end="125:15">(<argument pos:start="125:14" pos:end="125:14"><expr pos:start="125:14" pos:end="125:14"><literal type="number" pos:start="125:14" pos:end="125:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
