<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6779.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">blkverify_aio_cb</name><parameter_list pos:start="1:29" pos:end="1:51">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:50"><decl pos:start="1:44" pos:end="1:50"><type pos:start="1:44" pos:end="1:50"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:50">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="5:5" pos:end="43:5">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">BlkverifyAIOCB</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">acb</name> <init pos:start="5:25" pos:end="5:32">= <expr pos:start="5:27" pos:end="5:32"><name pos:start="5:27" pos:end="5:32">opaque</name></expr></init></decl>;</decl_stmt>



    <switch pos:start="9:5" pos:end="43:5">switch <condition pos:start="9:12" pos:end="9:24">(<expr pos:start="9:13" pos:end="9:23"><operator pos:start="9:13" pos:end="9:14">++</operator><name pos:start="9:15" pos:end="9:23"><name pos:start="9:15" pos:end="9:17">acb</name><operator pos:start="9:18" pos:end="9:19">-&gt;</operator><name pos:start="9:20" pos:end="9:23">done</name></name></expr>)</condition> <block pos:start="9:26" pos:end="43:5">{<block_content pos:start="11:5" pos:end="41:14">

    <case pos:start="11:5" pos:end="11:11">case <expr pos:start="11:10" pos:end="11:10"><literal type="number" pos:start="11:10" pos:end="11:10">1</literal></expr>:</case>

        <expr_stmt pos:start="13:9" pos:end="13:23"><expr pos:start="13:9" pos:end="13:22"><name pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:11">acb</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:16">ret</name></name> <operator pos:start="13:18" pos:end="13:18">=</operator> <name pos:start="13:20" pos:end="13:22">ret</name></expr>;</expr_stmt>

        <break pos:start="15:9" pos:end="15:14">break;</break>



    <case pos:start="19:5" pos:end="19:11">case <expr pos:start="19:10" pos:end="19:10"><literal type="number" pos:start="19:10" pos:end="19:10">2</literal></expr>:</case>

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:28">(<expr pos:start="21:13" pos:end="21:27"><name pos:start="21:13" pos:end="21:20"><name pos:start="21:13" pos:end="21:15">acb</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:20">ret</name></name> <operator pos:start="21:22" pos:end="21:23">!=</operator> <name pos:start="21:25" pos:end="21:27">ret</name></expr>)</condition> <block pos:start="21:30" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:80">

            <expr_stmt pos:start="23:13" pos:end="23:80"><expr pos:start="23:13" pos:end="23:79"><call pos:start="23:13" pos:end="23:79"><name pos:start="23:13" pos:end="23:25">blkverify_err</name><argument_list pos:start="23:26" pos:end="23:79">(<argument pos:start="23:27" pos:end="23:29"><expr pos:start="23:27" pos:end="23:29"><name pos:start="23:27" pos:end="23:29">acb</name></expr></argument>, <argument pos:start="23:32" pos:end="23:63"><expr pos:start="23:32" pos:end="23:63"><literal type="string" pos:start="23:32" pos:end="23:63">"return value mismatch %d != %d"</literal></expr></argument>, <argument pos:start="23:66" pos:end="23:73"><expr pos:start="23:66" pos:end="23:73"><name pos:start="23:66" pos:end="23:73"><name pos:start="23:66" pos:end="23:68">acb</name><operator pos:start="23:69" pos:end="23:70">-&gt;</operator><name pos:start="23:71" pos:end="23:73">ret</name></name></expr></argument>, <argument pos:start="23:76" pos:end="23:78"><expr pos:start="23:76" pos:end="23:78"><name pos:start="23:76" pos:end="23:78">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:24">(<expr pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:15">acb</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:23">verify</name></name></expr>)</condition> <block pos:start="29:26" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:29">

            <expr_stmt pos:start="31:13" pos:end="31:29"><expr pos:start="31:13" pos:end="31:28"><call pos:start="31:13" pos:end="31:28"><name pos:start="31:13" pos:end="31:23"><name pos:start="31:13" pos:end="31:15">acb</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:23">verify</name></name><argument_list pos:start="31:24" pos:end="31:28">(<argument pos:start="31:25" pos:end="31:27"><expr pos:start="31:25" pos:end="31:27"><name pos:start="31:25" pos:end="31:27">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="37:9" pos:end="39:55"><expr pos:start="37:9" pos:end="39:54"><call pos:start="37:9" pos:end="39:54"><name pos:start="37:9" pos:end="37:31">aio_bh_schedule_oneshot</name><argument_list pos:start="37:32" pos:end="39:54">(<argument pos:start="37:33" pos:end="37:68"><expr pos:start="37:33" pos:end="37:68"><call pos:start="37:33" pos:end="37:68"><name pos:start="37:33" pos:end="37:52">bdrv_get_aio_context</name><argument_list pos:start="37:53" pos:end="37:68">(<argument pos:start="37:54" pos:end="37:67"><expr pos:start="37:54" pos:end="37:67"><name pos:start="37:54" pos:end="37:67"><name pos:start="37:54" pos:end="37:56">acb</name><operator pos:start="37:57" pos:end="37:58">-&gt;</operator><name pos:start="37:59" pos:end="37:64">common</name><operator pos:start="37:65" pos:end="37:65">.</operator><name pos:start="37:66" pos:end="37:67">bs</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                <argument pos:start="39:33" pos:end="39:48"><expr pos:start="39:33" pos:end="39:48"><name pos:start="39:33" pos:end="39:48">blkverify_aio_bh</name></expr></argument>, <argument pos:start="39:51" pos:end="39:53"><expr pos:start="39:51" pos:end="39:53"><name pos:start="39:51" pos:end="39:53">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
