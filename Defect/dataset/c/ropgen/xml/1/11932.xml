<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11932.c" pos:tabs="8"><function pos:start="1:1" pos:end="29:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:32">kvm_arm_sync_mpstate_to_qemu</name><parameter_list pos:start="1:33" pos:end="1:45">(<parameter pos:start="1:34" pos:end="1:44"><decl pos:start="1:34" pos:end="1:44"><type pos:start="1:34" pos:end="1:41"><name pos:start="1:34" pos:end="1:39">ARMCPU</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="29:1">{<block_content pos:start="5:5" pos:end="27:13">

    <if_stmt pos:start="5:5" pos:end="23:5"><if pos:start="5:5" pos:end="23:5">if <condition pos:start="5:8" pos:end="5:25">(<expr pos:start="5:9" pos:end="5:24"><name pos:start="5:9" pos:end="5:24">cap_has_mp_state</name></expr>)</condition> <block pos:start="5:27" pos:end="23:5">{<block_content pos:start="7:9" pos:end="21:71">

        <decl_stmt pos:start="7:9" pos:end="7:37"><decl pos:start="7:9" pos:end="7:36"><type pos:start="7:9" pos:end="7:27"><name pos:start="7:9" pos:end="7:27"><name pos:start="7:9" pos:end="7:14">struct</name> <name pos:start="7:16" pos:end="7:27">kvm_mp_state</name></name></type> <name pos:start="7:29" pos:end="7:36">mp_state</name></decl>;</decl_stmt>

        <decl_stmt pos:start="9:9" pos:end="9:72"><decl pos:start="9:9" pos:end="9:71"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:15">ret</name> <init pos:start="9:17" pos:end="9:71">= <expr pos:start="9:19" pos:end="9:71"><call pos:start="9:19" pos:end="9:71"><name pos:start="9:19" pos:end="9:32">kvm_vcpu_ioctl</name><argument_list pos:start="9:33" pos:end="9:71">(<argument pos:start="9:34" pos:end="9:41"><expr pos:start="9:34" pos:end="9:41"><call pos:start="9:34" pos:end="9:41"><name pos:start="9:34" pos:end="9:36">CPU</name><argument_list pos:start="9:37" pos:end="9:41">(<argument pos:start="9:38" pos:end="9:40"><expr pos:start="9:38" pos:end="9:40"><name pos:start="9:38" pos:end="9:40">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="9:44" pos:end="9:59"><expr pos:start="9:44" pos:end="9:59"><name pos:start="9:44" pos:end="9:59">KVM_GET_MP_STATE</name></expr></argument>, <argument pos:start="9:62" pos:end="9:70"><expr pos:start="9:62" pos:end="9:70"><operator pos:start="9:62" pos:end="9:62">&amp;</operator><name pos:start="9:63" pos:end="9:70">mp_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="11:9" pos:end="19:9"><if pos:start="11:9" pos:end="19:9">if <condition pos:start="11:12" pos:end="11:16">(<expr pos:start="11:13" pos:end="11:15"><name pos:start="11:13" pos:end="11:15">ret</name></expr>)</condition> <block pos:start="11:18" pos:end="19:9">{<block_content pos:start="13:13" pos:end="17:20">

            <expr_stmt pos:start="13:13" pos:end="15:51"><expr pos:start="13:13" pos:end="15:50"><call pos:start="13:13" pos:end="15:50"><name pos:start="13:13" pos:end="13:19">fprintf</name><argument_list pos:start="13:20" pos:end="15:50">(<argument pos:start="13:21" pos:end="13:26"><expr pos:start="13:21" pos:end="13:26"><name pos:start="13:21" pos:end="13:26">stderr</name></expr></argument>, <argument pos:start="13:29" pos:end="13:64"><expr pos:start="13:29" pos:end="13:64"><literal type="string" pos:start="13:29" pos:end="13:64">"%s: failed to get MP_STATE %d/%s\n"</literal></expr></argument>,

                    <argument pos:start="15:21" pos:end="15:28"><expr pos:start="15:21" pos:end="15:28"><name pos:start="15:21" pos:end="15:28">__func__</name></expr></argument>, <argument pos:start="15:31" pos:end="15:33"><expr pos:start="15:31" pos:end="15:33"><name pos:start="15:31" pos:end="15:33">ret</name></expr></argument>, <argument pos:start="15:36" pos:end="15:49"><expr pos:start="15:36" pos:end="15:49"><call pos:start="15:36" pos:end="15:49"><name pos:start="15:36" pos:end="15:43">strerror</name><argument_list pos:start="15:44" pos:end="15:49">(<argument pos:start="15:45" pos:end="15:48"><expr pos:start="15:45" pos:end="15:48"><operator pos:start="15:45" pos:end="15:45">-</operator><name pos:start="15:46" pos:end="15:48">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="17:13" pos:end="17:20"><expr pos:start="17:13" pos:end="17:19"><call pos:start="17:13" pos:end="17:19"><name pos:start="17:13" pos:end="17:17">abort</name><argument_list pos:start="17:18" pos:end="17:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:71"><expr pos:start="21:9" pos:end="21:70"><name pos:start="21:9" pos:end="21:24"><name pos:start="21:9" pos:end="21:11">cpu</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:24">powered_off</name></name> <operator pos:start="21:26" pos:end="21:26">=</operator> <operator pos:start="21:28" pos:end="21:28">(</operator><name pos:start="21:29" pos:end="21:45"><name pos:start="21:29" pos:end="21:36">mp_state</name><operator pos:start="21:37" pos:end="21:37">.</operator><name pos:start="21:38" pos:end="21:45">mp_state</name></name> <operator pos:start="21:47" pos:end="21:48">==</operator> <name pos:start="21:50" pos:end="21:69">KVM_MP_STATE_STOPPED</name><operator pos:start="21:70" pos:end="21:70">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="27:5" pos:end="27:13">return <expr pos:start="27:12" pos:end="27:12"><literal type="number" pos:start="27:12" pos:end="27:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
