<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6907.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:22">PageDesc</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:39">page_find_alloc</name><parameter_list pos:start="1:40" pos:end="1:59">(<parameter pos:start="1:41" pos:end="1:58"><decl pos:start="1:41" pos:end="1:58"><type pos:start="1:41" pos:end="1:52"><name pos:start="1:41" pos:end="1:52">target_ulong</name></type> <name pos:start="1:54" pos:end="1:58">index</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:39">

    <decl_stmt pos:start="5:5" pos:end="10:0"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:12">PageDesc</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier><modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:17">lp</name></decl>, <decl pos:start="5:20" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:15"><modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">p</name></decl>;</decl_stmt>



<cpp:if pos:start="9:1" pos:end="9:25">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:20">TARGET_LONG_BITS</name> <operator pos:start="9:22" pos:end="9:22">&gt;</operator> <literal type="number" pos:start="9:24" pos:end="9:25">32</literal></expr></cpp:if>

    <comment type="block" pos:start="11:5" pos:end="13:35">/* Host memory outside guest VM.  For 32-bit targets we have already

       excluded high addresses.  */</comment>

    <if_stmt pos:start="15:5" pos:end="20:0"><if pos:start="15:5" pos:end="20:0">if <condition pos:start="15:8" pos:end="15:50">(<expr pos:start="15:9" pos:end="15:49"><name pos:start="15:9" pos:end="15:13">index</name> <operator pos:start="15:15" pos:end="15:15">&gt;</operator> <operator pos:start="15:17" pos:end="15:17">(</operator><operator pos:start="15:18" pos:end="15:18">(</operator><name pos:start="15:19" pos:end="15:30">target_ulong</name><operator pos:start="15:31" pos:end="15:31">)</operator><name pos:start="15:32" pos:end="15:38">L2_SIZE</name> <operator pos:start="15:40" pos:end="15:40">*</operator> <name pos:start="15:42" pos:end="15:48">L1_SIZE</name><operator pos:start="15:49" pos:end="15:49">)</operator></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="20:0"><block_content pos:start="17:9" pos:end="20:0">

        <return pos:start="17:9" pos:end="20:0">return <expr pos:start="17:16" pos:end="17:19"><name pos:start="17:16" pos:end="17:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="21:5" pos:end="21:35"><expr pos:start="21:5" pos:end="21:34"><name pos:start="21:5" pos:end="21:6">lp</name> <operator pos:start="21:8" pos:end="21:8">=</operator> <operator pos:start="21:10" pos:end="21:10">&amp;</operator><name pos:start="21:11" pos:end="21:34"><name pos:start="21:11" pos:end="21:16">l1_map</name><index pos:start="21:17" pos:end="21:34">[<expr pos:start="21:18" pos:end="21:33"><name pos:start="21:18" pos:end="21:22">index</name> <operator pos:start="21:24" pos:end="21:25">&gt;&gt;</operator> <name pos:start="21:27" pos:end="21:33">L2_BITS</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:12"><expr pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:5">p</name> <operator pos:start="23:7" pos:end="23:7">=</operator> <operator pos:start="23:9" pos:end="23:9">*</operator><name pos:start="23:10" pos:end="23:11">lp</name></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="63:5"><if pos:start="25:5" pos:end="63:5">if <condition pos:start="25:8" pos:end="25:11">(<expr pos:start="25:9" pos:end="25:10"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:10">p</name></expr>)</condition> <block pos:start="25:13" pos:end="63:5">{<block_content pos:start="31:9" pos:end="62:0">

        <comment type="block" pos:start="27:9" pos:end="27:35">/* allocate if not found */</comment>

<cpp:if pos:start="29:1" pos:end="29:29">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:29"><call pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:11">defined</name><argument_list pos:start="29:12" pos:end="29:29">(<argument pos:start="29:13" pos:end="29:28"><expr pos:start="29:13" pos:end="29:28"><name pos:start="29:13" pos:end="29:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <decl_stmt pos:start="31:9" pos:end="31:27"><decl pos:start="31:9" pos:end="31:26"><type pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:16">unsigned</name> <name pos:start="31:18" pos:end="31:21">long</name></type> <name pos:start="31:23" pos:end="31:26">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:48"><decl pos:start="33:9" pos:end="33:47"><type pos:start="33:9" pos:end="33:14"><name pos:start="33:9" pos:end="33:14">size_t</name></type> <name pos:start="33:16" pos:end="33:18">len</name> <init pos:start="33:20" pos:end="33:47">= <expr pos:start="33:22" pos:end="33:47"><sizeof pos:start="33:22" pos:end="33:37">sizeof<argument_list pos:start="33:28" pos:end="33:37">(<argument pos:start="33:29" pos:end="33:36"><expr pos:start="33:29" pos:end="33:36"><name pos:start="33:29" pos:end="33:36">PageDesc</name></expr></argument>)</argument_list></sizeof> <operator pos:start="33:39" pos:end="33:39">*</operator> <name pos:start="33:41" pos:end="33:47">L2_SIZE</name></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="35:9" pos:end="35:60">/* Don't use qemu_malloc because it may recurse.  */</comment>

        <expr_stmt pos:start="37:9" pos:end="39:53"><expr pos:start="37:9" pos:end="39:52"><name pos:start="37:9" pos:end="37:9">p</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <call pos:start="37:13" pos:end="39:52"><name pos:start="37:13" pos:end="37:16">mmap</name><argument_list pos:start="37:17" pos:end="39:52">(<argument pos:start="37:18" pos:end="37:18"><expr pos:start="37:18" pos:end="37:18"><literal type="number" pos:start="37:18" pos:end="37:18">0</literal></expr></argument>, <argument pos:start="37:21" pos:end="37:23"><expr pos:start="37:21" pos:end="37:23"><name pos:start="37:21" pos:end="37:23">len</name></expr></argument>, <argument pos:start="37:26" pos:end="37:47"><expr pos:start="37:26" pos:end="37:47"><name pos:start="37:26" pos:end="37:34">PROT_READ</name> <operator pos:start="37:36" pos:end="37:36">|</operator> <name pos:start="37:38" pos:end="37:47">PROT_WRITE</name></expr></argument>,

                 <argument pos:start="39:18" pos:end="39:44"><expr pos:start="39:18" pos:end="39:44"><name pos:start="39:18" pos:end="39:28">MAP_PRIVATE</name> <operator pos:start="39:30" pos:end="39:30">|</operator> <name pos:start="39:32" pos:end="39:44">MAP_ANONYMOUS</name></expr></argument>, <argument pos:start="39:47" pos:end="39:48"><expr pos:start="39:47" pos:end="39:48"><operator pos:start="39:47" pos:end="39:47">-</operator><literal type="number" pos:start="39:48" pos:end="39:48">1</literal></expr></argument>, <argument pos:start="39:51" pos:end="39:51"><expr pos:start="39:51" pos:end="39:51"><literal type="number" pos:start="39:51" pos:end="39:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:16"><expr pos:start="41:9" pos:end="41:15"><operator pos:start="41:9" pos:end="41:9">*</operator><name pos:start="41:10" pos:end="41:11">lp</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <name pos:start="41:15" pos:end="41:15">p</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:22"><expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:12">addr</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <call pos:start="43:16" pos:end="43:21"><name pos:start="43:16" pos:end="43:18">h2g</name><argument_list pos:start="43:19" pos:end="43:21">(<argument pos:start="43:20" pos:end="43:20"><expr pos:start="43:20" pos:end="43:20"><name pos:start="43:20" pos:end="43:20">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="56:0"><if pos:start="45:9" pos:end="56:0">if <condition pos:start="45:12" pos:end="45:39">(<expr pos:start="45:13" pos:end="45:38"><name pos:start="45:13" pos:end="45:16">addr</name> <operator pos:start="45:18" pos:end="45:19">==</operator> <operator pos:start="45:21" pos:end="45:21">(</operator><name pos:start="45:22" pos:end="45:33">target_ulong</name><operator pos:start="45:34" pos:end="45:34">)</operator><name pos:start="45:35" pos:end="45:38">addr</name></expr>)</condition> <block pos:start="45:41" pos:end="56:0">{<block_content pos:start="47:13" pos:end="51:42">

            <expr_stmt pos:start="47:13" pos:end="51:42"><expr pos:start="47:13" pos:end="51:41"><call pos:start="47:13" pos:end="51:41"><name pos:start="47:13" pos:end="47:26">page_set_flags</name><argument_list pos:start="47:27" pos:end="51:41">(<argument pos:start="47:28" pos:end="47:50"><expr pos:start="47:28" pos:end="47:50"><name pos:start="47:28" pos:end="47:31">addr</name> <operator pos:start="47:33" pos:end="47:33">&amp;</operator> <name pos:start="47:35" pos:end="47:50">TARGET_PAGE_MASK</name></expr></argument>,

                           <argument pos:start="49:28" pos:end="49:56"><expr pos:start="49:28" pos:end="49:56"><call pos:start="49:28" pos:end="49:56"><name pos:start="49:28" pos:end="49:44">TARGET_PAGE_ALIGN</name><argument_list pos:start="49:45" pos:end="49:56">(<argument pos:start="49:46" pos:end="49:55"><expr pos:start="49:46" pos:end="49:55"><name pos:start="49:46" pos:end="49:49">addr</name> <operator pos:start="49:51" pos:end="49:51">+</operator> <name pos:start="49:53" pos:end="49:55">len</name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="51:28" pos:end="51:40"><expr pos:start="51:28" pos:end="51:40"><name pos:start="51:28" pos:end="51:40">PAGE_RESERVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

        </block_content>}</block></if></if_stmt>

<cpp:else pos:start="55:1" pos:end="55:5">#<cpp:directive pos:start="55:2" pos:end="55:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="57:9" pos:end="57:53"><expr pos:start="57:9" pos:end="57:52"><name pos:start="57:9" pos:end="57:9">p</name> <operator pos:start="57:11" pos:end="57:11">=</operator> <call pos:start="57:13" pos:end="57:52"><name pos:start="57:13" pos:end="57:24">qemu_mallocz</name><argument_list pos:start="57:25" pos:end="57:52">(<argument pos:start="57:26" pos:end="57:51"><expr pos:start="57:26" pos:end="57:51"><sizeof pos:start="57:26" pos:end="57:41">sizeof<argument_list pos:start="57:32" pos:end="57:41">(<argument pos:start="57:33" pos:end="57:40"><expr pos:start="57:33" pos:end="57:40"><name pos:start="57:33" pos:end="57:40">PageDesc</name></expr></argument>)</argument_list></sizeof> <operator pos:start="57:43" pos:end="57:43">*</operator> <name pos:start="57:45" pos:end="57:51">L2_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="62:0"><expr pos:start="59:9" pos:end="59:15"><operator pos:start="59:9" pos:end="59:9">*</operator><name pos:start="59:10" pos:end="59:11">lp</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <name pos:start="59:15" pos:end="59:15">p</name></expr>;</expr_stmt>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <return pos:start="65:5" pos:end="65:39">return <expr pos:start="65:12" pos:end="65:38"><name pos:start="65:12" pos:end="65:12">p</name> <operator pos:start="65:14" pos:end="65:14">+</operator> <operator pos:start="65:16" pos:end="65:16">(</operator><name pos:start="65:17" pos:end="65:21">index</name> <operator pos:start="65:23" pos:end="65:23">&amp;</operator> <operator pos:start="65:25" pos:end="65:25">(</operator><name pos:start="65:26" pos:end="65:32">L2_SIZE</name> <operator pos:start="65:34" pos:end="65:34">-</operator> <literal type="number" pos:start="65:36" pos:end="65:36">1</literal><operator pos:start="65:37" pos:end="65:37">)</operator><operator pos:start="65:38" pos:end="65:38">)</operator></expr>;</return>

</block_content>}</block></function>
</unit>
