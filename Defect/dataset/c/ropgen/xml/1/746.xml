<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/746.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">vdi_check</name><parameter_list pos:start="1:21" pos:end="1:42">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:39"><name pos:start="1:22" pos:end="1:37">BlockDriverState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">bs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="7:5" pos:end="83:20">

    <comment type="block" pos:start="5:5" pos:end="5:43">/* TODO: additional checks possible. */</comment>

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:48"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVVdiState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:48">= <expr pos:start="7:23" pos:end="7:48"><operator pos:start="7:23" pos:end="7:23">(</operator><name pos:start="7:24" pos:end="7:35">BDRVVdiState</name> <operator pos:start="7:37" pos:end="7:37">*</operator><operator pos:start="7:38" pos:end="7:38">)</operator><name pos:start="7:39" pos:end="7:48"><name pos:start="7:39" pos:end="7:40">bs</name><operator pos:start="7:41" pos:end="7:42">-&gt;</operator><name pos:start="7:43" pos:end="7:48">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">n_errors</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:29">blocks_allocated</name> <init pos:start="11:31" pos:end="11:33">= <expr pos:start="11:33" pos:end="11:33"><literal type="number" pos:start="11:33" pos:end="11:33">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:18">block</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">uint32_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:18">bmap</name></decl>;</decl_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:17"><expr pos:start="17:5" pos:end="17:16"><call pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:10">logout</name><argument_list pos:start="17:11" pos:end="17:16">(<argument pos:start="17:12" pos:end="17:15"><expr pos:start="17:12" pos:end="17:15"><literal type="string" pos:start="17:12" pos:end="17:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:69"><expr pos:start="21:5" pos:end="21:68"><name pos:start="21:5" pos:end="21:8">bmap</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <call pos:start="21:12" pos:end="21:68"><name pos:start="21:12" pos:end="21:22">qemu_malloc</name><argument_list pos:start="21:23" pos:end="21:68">(<argument pos:start="21:24" pos:end="21:67"><expr pos:start="21:24" pos:end="21:67"><name pos:start="21:24" pos:end="21:48"><name pos:start="21:24" pos:end="21:24">s</name><operator pos:start="21:25" pos:end="21:26">-&gt;</operator><name pos:start="21:27" pos:end="21:32">header</name><operator pos:start="21:33" pos:end="21:33">.</operator><name pos:start="21:34" pos:end="21:48">blocks_in_image</name></name> <operator pos:start="21:50" pos:end="21:50">*</operator> <sizeof pos:start="21:52" pos:end="21:67">sizeof<argument_list pos:start="21:58" pos:end="21:67">(<argument pos:start="21:59" pos:end="21:66"><expr pos:start="21:59" pos:end="21:66"><name pos:start="21:59" pos:end="21:66">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:69"><expr pos:start="23:5" pos:end="23:68"><call pos:start="23:5" pos:end="23:68"><name pos:start="23:5" pos:end="23:10">memset</name><argument_list pos:start="23:11" pos:end="23:68">(<argument pos:start="23:12" pos:end="23:15"><expr pos:start="23:12" pos:end="23:15"><name pos:start="23:12" pos:end="23:15">bmap</name></expr></argument>, <argument pos:start="23:18" pos:end="23:21"><expr pos:start="23:18" pos:end="23:21"><literal type="number" pos:start="23:18" pos:end="23:21">0xff</literal></expr></argument>, <argument pos:start="23:24" pos:end="23:67"><expr pos:start="23:24" pos:end="23:67"><name pos:start="23:24" pos:end="23:48"><name pos:start="23:24" pos:end="23:24">s</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:32">header</name><operator pos:start="23:33" pos:end="23:33">.</operator><name pos:start="23:34" pos:end="23:48">blocks_in_image</name></name> <operator pos:start="23:50" pos:end="23:50">*</operator> <sizeof pos:start="23:52" pos:end="23:67">sizeof<argument_list pos:start="23:58" pos:end="23:67">(<argument pos:start="23:59" pos:end="23:66"><expr pos:start="23:59" pos:end="23:66"><name pos:start="23:59" pos:end="23:66">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:56">/* Check block map and value of blocks_allocated. */</comment>

    <for pos:start="29:5" pos:end="63:5">for <control pos:start="29:9" pos:end="29:63">(<init pos:start="29:10" pos:end="29:19"><expr pos:start="29:10" pos:end="29:18"><name pos:start="29:10" pos:end="29:14">block</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>;</init> <condition pos:start="29:21" pos:end="29:54"><expr pos:start="29:21" pos:end="29:53"><name pos:start="29:21" pos:end="29:25">block</name> <operator pos:start="29:27" pos:end="29:27">&lt;</operator> <name pos:start="29:29" pos:end="29:53"><name pos:start="29:29" pos:end="29:29">s</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:37">header</name><operator pos:start="29:38" pos:end="29:38">.</operator><name pos:start="29:39" pos:end="29:53">blocks_in_image</name></name></expr>;</condition> <incr pos:start="29:56" pos:end="29:62"><expr pos:start="29:56" pos:end="29:62"><name pos:start="29:56" pos:end="29:60">block</name><operator pos:start="29:61" pos:end="29:62">++</operator></expr></incr>)</control> <block pos:start="29:65" pos:end="63:5">{<block_content pos:start="31:9" pos:end="61:9">

        <decl_stmt pos:start="31:9" pos:end="31:58"><decl pos:start="31:9" pos:end="31:57"><type pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:16">uint32_t</name></type> <name pos:start="31:18" pos:end="31:27">bmap_entry</name> <init pos:start="31:29" pos:end="31:57">= <expr pos:start="31:31" pos:end="31:57"><call pos:start="31:31" pos:end="31:57"><name pos:start="31:31" pos:end="31:41">le32_to_cpu</name><argument_list pos:start="31:42" pos:end="31:57">(<argument pos:start="31:43" pos:end="31:56"><expr pos:start="31:43" pos:end="31:56"><name pos:start="31:43" pos:end="31:56"><name pos:start="31:43" pos:end="31:43">s</name><operator pos:start="31:44" pos:end="31:45">-&gt;</operator><name pos:start="31:46" pos:end="31:49">bmap</name><index pos:start="31:50" pos:end="31:56">[<expr pos:start="31:51" pos:end="31:55"><name pos:start="31:51" pos:end="31:55">block</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="33:9" pos:end="61:9"><if pos:start="33:9" pos:end="61:9">if <condition pos:start="33:12" pos:end="33:42">(<expr pos:start="33:13" pos:end="33:41"><name pos:start="33:13" pos:end="33:22">bmap_entry</name> <operator pos:start="33:24" pos:end="33:25">!=</operator> <name pos:start="33:27" pos:end="33:41">VDI_UNALLOCATED</name></expr>)</condition> <block pos:start="33:44" pos:end="61:9">{<block_content pos:start="35:13" pos:end="59:13">

            <if_stmt pos:start="35:13" pos:end="59:13"><if pos:start="35:13" pos:end="51:13">if <condition pos:start="35:16" pos:end="35:55">(<expr pos:start="35:17" pos:end="35:54"><name pos:start="35:17" pos:end="35:26">bmap_entry</name> <operator pos:start="35:28" pos:end="35:28">&lt;</operator> <name pos:start="35:30" pos:end="35:54"><name pos:start="35:30" pos:end="35:30">s</name><operator pos:start="35:31" pos:end="35:32">-&gt;</operator><name pos:start="35:33" pos:end="35:38">header</name><operator pos:start="35:39" pos:end="35:39">.</operator><name pos:start="35:40" pos:end="35:54">blocks_in_image</name></name></expr>)</condition> <block pos:start="35:57" pos:end="51:13">{<block_content pos:start="37:17" pos:end="49:17">

                <expr_stmt pos:start="37:17" pos:end="37:35"><expr pos:start="37:17" pos:end="37:34"><name pos:start="37:17" pos:end="37:32">blocks_allocated</name><operator pos:start="37:33" pos:end="37:34">++</operator></expr>;</expr_stmt>

                <if_stmt pos:start="39:17" pos:end="49:17"><if pos:start="39:17" pos:end="43:17">if <condition pos:start="39:20" pos:end="39:56">(<expr pos:start="39:21" pos:end="39:55"><name pos:start="39:21" pos:end="39:36"><name pos:start="39:21" pos:end="39:24">bmap</name><index pos:start="39:25" pos:end="39:36">[<expr pos:start="39:26" pos:end="39:35"><name pos:start="39:26" pos:end="39:35">bmap_entry</name></expr>]</index></name> <operator pos:start="39:38" pos:end="39:39">==</operator> <name pos:start="39:41" pos:end="39:55">VDI_UNALLOCATED</name></expr>)</condition> <block pos:start="39:58" pos:end="43:17">{<block_content pos:start="41:21" pos:end="41:50">

                    <expr_stmt pos:start="41:21" pos:end="41:50"><expr pos:start="41:21" pos:end="41:49"><name pos:start="41:21" pos:end="41:36"><name pos:start="41:21" pos:end="41:24">bmap</name><index pos:start="41:25" pos:end="41:36">[<expr pos:start="41:26" pos:end="41:35"><name pos:start="41:26" pos:end="41:35">bmap_entry</name></expr>]</index></name> <operator pos:start="41:38" pos:end="41:38">=</operator> <name pos:start="41:40" pos:end="41:49">bmap_entry</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="43:19" pos:end="49:17">else <block pos:start="43:24" pos:end="49:17">{<block_content pos:start="45:21" pos:end="47:89">

                    <expr_stmt pos:start="45:21" pos:end="47:89"><expr pos:start="45:21" pos:end="47:88"><call pos:start="45:21" pos:end="47:88"><name pos:start="45:21" pos:end="45:27">fprintf</name><argument_list pos:start="45:28" pos:end="47:88">(<argument pos:start="45:29" pos:end="45:34"><expr pos:start="45:29" pos:end="45:34"><name pos:start="45:29" pos:end="45:34">stderr</name></expr></argument>, <argument pos:start="45:37" pos:end="47:57"><expr pos:start="45:37" pos:end="47:57"><literal type="string" pos:start="45:37" pos:end="45:58">"ERROR: block index %"</literal> <name pos:start="45:60" pos:end="45:65">PRIu32</name>

                            <literal type="string" pos:start="47:29" pos:end="47:45">" also used by %"</literal> <name pos:start="47:47" pos:end="47:52">PRIu32</name> <literal type="string" pos:start="47:54" pos:end="47:57">"\n"</literal></expr></argument>, <argument pos:start="47:60" pos:end="47:75"><expr pos:start="47:60" pos:end="47:75"><name pos:start="47:60" pos:end="47:75"><name pos:start="47:60" pos:end="47:63">bmap</name><index pos:start="47:64" pos:end="47:75">[<expr pos:start="47:65" pos:end="47:74"><name pos:start="47:65" pos:end="47:74">bmap_entry</name></expr>]</index></name></expr></argument>, <argument pos:start="47:78" pos:end="47:87"><expr pos:start="47:78" pos:end="47:87"><name pos:start="47:78" pos:end="47:87">bmap_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="51:15" pos:end="59:13">else <block pos:start="51:20" pos:end="59:13">{<block_content pos:start="53:17" pos:end="57:27">

                <expr_stmt pos:start="53:17" pos:end="55:75"><expr pos:start="53:17" pos:end="55:74"><call pos:start="53:17" pos:end="55:74"><name pos:start="53:17" pos:end="53:23">fprintf</name><argument_list pos:start="53:24" pos:end="55:74">(<argument pos:start="53:25" pos:end="53:30"><expr pos:start="53:25" pos:end="53:30"><name pos:start="53:25" pos:end="53:30">stderr</name></expr></argument>, <argument pos:start="53:33" pos:end="55:54"><expr pos:start="53:33" pos:end="55:54"><literal type="string" pos:start="53:33" pos:end="53:54">"ERROR: block index %"</literal> <name pos:start="53:56" pos:end="53:61">PRIu32</name>

                        <literal type="string" pos:start="55:25" pos:end="55:42">" too large, is %"</literal> <name pos:start="55:44" pos:end="55:49">PRIu32</name> <literal type="string" pos:start="55:51" pos:end="55:54">"\n"</literal></expr></argument>, <argument pos:start="55:57" pos:end="55:61"><expr pos:start="55:57" pos:end="55:61"><name pos:start="55:57" pos:end="55:61">block</name></expr></argument>, <argument pos:start="55:64" pos:end="55:73"><expr pos:start="55:64" pos:end="55:73"><name pos:start="55:64" pos:end="55:73">bmap_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:27"><expr pos:start="57:17" pos:end="57:26"><name pos:start="57:17" pos:end="57:24">n_errors</name><operator pos:start="57:25" pos:end="57:26">++</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="65:5" pos:end="75:5"><if pos:start="65:5" pos:end="75:5">if <condition pos:start="65:8" pos:end="65:55">(<expr pos:start="65:9" pos:end="65:54"><name pos:start="65:9" pos:end="65:24">blocks_allocated</name> <operator pos:start="65:26" pos:end="65:27">!=</operator> <name pos:start="65:29" pos:end="65:54"><name pos:start="65:29" pos:end="65:29">s</name><operator pos:start="65:30" pos:end="65:31">-&gt;</operator><name pos:start="65:32" pos:end="65:37">header</name><operator pos:start="65:38" pos:end="65:38">.</operator><name pos:start="65:39" pos:end="65:54">blocks_allocated</name></name></expr>)</condition> <block pos:start="65:57" pos:end="75:5">{<block_content pos:start="67:9" pos:end="73:19">

        <expr_stmt pos:start="67:9" pos:end="71:61"><expr pos:start="67:9" pos:end="71:60"><call pos:start="67:9" pos:end="71:60"><name pos:start="67:9" pos:end="67:15">fprintf</name><argument_list pos:start="67:16" pos:end="71:60">(<argument pos:start="67:17" pos:end="67:22"><expr pos:start="67:17" pos:end="67:22"><name pos:start="67:17" pos:end="67:22">stderr</name></expr></argument>, <argument pos:start="67:25" pos:end="69:42"><expr pos:start="67:25" pos:end="69:42"><literal type="string" pos:start="67:25" pos:end="67:64">"ERROR: allocated blocks mismatch, is %"</literal> <name pos:start="67:66" pos:end="67:71">PRIu32</name>

               <literal type="string" pos:start="69:16" pos:end="69:30">", should be %"</literal> <name pos:start="69:32" pos:end="69:37">PRIu32</name> <literal type="string" pos:start="69:39" pos:end="69:42">"\n"</literal></expr></argument>,

               <argument pos:start="71:16" pos:end="71:31"><expr pos:start="71:16" pos:end="71:31"><name pos:start="71:16" pos:end="71:31">blocks_allocated</name></expr></argument>, <argument pos:start="71:34" pos:end="71:59"><expr pos:start="71:34" pos:end="71:59"><name pos:start="71:34" pos:end="71:59"><name pos:start="71:34" pos:end="71:34">s</name><operator pos:start="71:35" pos:end="71:36">-&gt;</operator><name pos:start="71:37" pos:end="71:42">header</name><operator pos:start="71:43" pos:end="71:43">.</operator><name pos:start="71:44" pos:end="71:59">blocks_allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:19"><expr pos:start="73:9" pos:end="73:18"><name pos:start="73:9" pos:end="73:16">n_errors</name><operator pos:start="73:17" pos:end="73:18">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:20"><expr pos:start="79:5" pos:end="79:19"><call pos:start="79:5" pos:end="79:19"><name pos:start="79:5" pos:end="79:13">qemu_free</name><argument_list pos:start="79:14" pos:end="79:19">(<argument pos:start="79:15" pos:end="79:18"><expr pos:start="79:15" pos:end="79:18"><name pos:start="79:15" pos:end="79:18">bmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="83:5" pos:end="83:20">return <expr pos:start="83:12" pos:end="83:19"><name pos:start="83:12" pos:end="83:19">n_errors</name></expr>;</return>

</block_content>}</block></function>
</unit>
