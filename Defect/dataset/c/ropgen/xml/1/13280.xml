<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13280.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">tiff_unpack_strip</name><parameter_list pos:start="1:29" pos:end="3:69">(<parameter pos:start="1:30" pos:end="1:43"><decl pos:start="1:30" pos:end="1:43"><type pos:start="1:30" pos:end="1:43"><name pos:start="1:30" pos:end="1:40">TiffContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">s</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:57"><decl pos:start="1:46" pos:end="1:57"><type pos:start="1:46" pos:end="1:57"><name pos:start="1:46" pos:end="1:52">uint8_t</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:57">dst</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:69"><decl pos:start="1:60" pos:end="1:69"><type pos:start="1:60" pos:end="1:69"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:69">stride</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:47"><decl pos:start="3:30" pos:end="3:47"><type pos:start="3:30" pos:end="3:47"><specifier pos:start="3:30" pos:end="3:34">const</specifier> <name pos:start="3:36" pos:end="3:42">uint8_t</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:47">src</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:57"><decl pos:start="3:50" pos:end="3:57"><type pos:start="3:50" pos:end="3:57"><name pos:start="3:50" pos:end="3:52">int</name></type> <name pos:start="3:54" pos:end="3:57">size</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:68"><decl pos:start="3:60" pos:end="3:68"><type pos:start="3:60" pos:end="3:68"><name pos:start="3:60" pos:end="3:62">int</name></type> <name pos:start="3:64" pos:end="3:68">lines</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="175:1">{<block_content pos:start="7:5" pos:end="173:13">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">c</name></decl>, <decl pos:start="7:12" pos:end="7:15"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:15">line</name></decl>, <decl pos:start="7:18" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:23">pixels</name></decl>, <decl pos:start="7:26" pos:end="7:29"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:26" pos:end="7:29">code</name></decl>, <decl pos:start="7:32" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:32" pos:end="7:34">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:23">ssrc</name> <init pos:start="9:25" pos:end="9:29">= <expr pos:start="9:27" pos:end="9:29"><name pos:start="9:27" pos:end="9:29">src</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:57"><decl pos:start="11:5" pos:end="11:56"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">width</name>           <init pos:start="11:25" pos:end="11:56">= <expr pos:start="11:27" pos:end="11:56"><operator pos:start="11:27" pos:end="11:27">(</operator><operator pos:start="11:28" pos:end="11:28">(</operator><name pos:start="11:29" pos:end="11:36"><name pos:start="11:29" pos:end="11:29">s</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:36">width</name></name> <operator pos:start="11:38" pos:end="11:38">*</operator> <name pos:start="11:40" pos:end="11:45"><name pos:start="11:40" pos:end="11:40">s</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:45">bpp</name></name><operator pos:start="11:46" pos:end="11:46">)</operator> <operator pos:start="11:48" pos:end="11:48">+</operator> <literal type="number" pos:start="11:50" pos:end="11:50">7</literal><operator pos:start="11:51" pos:end="11:51">)</operator> <operator pos:start="11:53" pos:end="11:54">&gt;&gt;</operator> <literal type="number" pos:start="11:56" pos:end="11:56">3</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:35"><if pos:start="15:5" pos:end="17:35">if <condition pos:start="15:8" pos:end="15:18">(<expr pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:12">size</name> <operator pos:start="15:14" pos:end="15:15">&lt;=</operator> <literal type="number" pos:start="15:17" pos:end="15:17">0</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:35"><block_content pos:start="17:9" pos:end="17:35">

        <return pos:start="17:9" pos:end="17:35">return <expr pos:start="17:16" pos:end="17:34"><name pos:start="17:16" pos:end="17:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="39:5"><if pos:start="21:5" pos:end="39:5">if <condition pos:start="21:8" pos:end="21:67">(<expr pos:start="21:9" pos:end="21:66"><name pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:16">compr</name></name> <operator pos:start="21:18" pos:end="21:19">==</operator> <name pos:start="21:21" pos:end="21:32">TIFF_DEFLATE</name> <operator pos:start="21:34" pos:end="21:35">||</operator> <name pos:start="21:37" pos:end="21:44"><name pos:start="21:37" pos:end="21:37">s</name><operator pos:start="21:38" pos:end="21:39">-&gt;</operator><name pos:start="21:40" pos:end="21:44">compr</name></name> <operator pos:start="21:46" pos:end="21:47">==</operator> <name pos:start="21:49" pos:end="21:66">TIFF_ADOBE_DEFLATE</name></expr>)</condition> <block pos:start="21:69" pos:end="39:5">{<block_content pos:start="25:9" pos:end="38:0">

<cpp:if pos:start="23:1" pos:end="23:15">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:15">CONFIG_ZLIB</name></expr></cpp:if>

        <return pos:start="25:9" pos:end="28:0">return <expr pos:start="25:16" pos:end="25:72"><call pos:start="25:16" pos:end="25:72"><name pos:start="25:16" pos:end="25:31">tiff_unpack_zlib</name><argument_list pos:start="25:32" pos:end="25:72">(<argument pos:start="25:33" pos:end="25:33"><expr pos:start="25:33" pos:end="25:33"><name pos:start="25:33" pos:end="25:33">s</name></expr></argument>, <argument pos:start="25:36" pos:end="25:38"><expr pos:start="25:36" pos:end="25:38"><name pos:start="25:36" pos:end="25:38">dst</name></expr></argument>, <argument pos:start="25:41" pos:end="25:46"><expr pos:start="25:41" pos:end="25:46"><name pos:start="25:41" pos:end="25:46">stride</name></expr></argument>, <argument pos:start="25:49" pos:end="25:51"><expr pos:start="25:49" pos:end="25:51"><name pos:start="25:49" pos:end="25:51">src</name></expr></argument>, <argument pos:start="25:54" pos:end="25:57"><expr pos:start="25:54" pos:end="25:57"><name pos:start="25:54" pos:end="25:57">size</name></expr></argument>, <argument pos:start="25:60" pos:end="25:64"><expr pos:start="25:60" pos:end="25:64"><name pos:start="25:60" pos:end="25:64">width</name></expr></argument>, <argument pos:start="25:67" pos:end="25:71"><expr pos:start="25:67" pos:end="25:71"><name pos:start="25:67" pos:end="25:71">lines</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else pos:start="27:1" pos:end="27:5">#<cpp:directive pos:start="27:2" pos:end="27:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="29:9" pos:end="33:54"><expr pos:start="29:9" pos:end="33:53"><call pos:start="29:9" pos:end="33:53"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="33:53">(<argument pos:start="29:16" pos:end="29:23"><expr pos:start="29:16" pos:end="29:23"><name pos:start="29:16" pos:end="29:23"><name pos:start="29:16" pos:end="29:16">s</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:23">avctx</name></name></expr></argument>, <argument pos:start="29:26" pos:end="29:37"><expr pos:start="29:26" pos:end="29:37"><name pos:start="29:26" pos:end="29:37">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="31:16" pos:end="33:52"><expr pos:start="31:16" pos:end="33:52"><literal type="string" pos:start="31:16" pos:end="31:43">"zlib support not enabled, "</literal>

               <literal type="string" pos:start="33:16" pos:end="33:52">"deflate compression not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="38:0">return <expr pos:start="35:16" pos:end="35:30"><call pos:start="35:16" pos:end="35:30"><name pos:start="35:16" pos:end="35:22">AVERROR</name><argument_list pos:start="35:23" pos:end="35:30">(<argument pos:start="35:24" pos:end="35:29"><expr pos:start="35:24" pos:end="35:29"><name pos:start="35:24" pos:end="35:29">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="51:5"><if pos:start="41:5" pos:end="51:5">if <condition pos:start="41:8" pos:end="41:29">(<expr pos:start="41:9" pos:end="41:28"><name pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:16">compr</name></name> <operator pos:start="41:18" pos:end="41:19">==</operator> <name pos:start="41:21" pos:end="41:28">TIFF_LZW</name></expr>)</condition> <block pos:start="41:31" pos:end="51:5">{<block_content pos:start="43:9" pos:end="49:9">

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:78">(<expr pos:start="43:13" pos:end="43:77"><operator pos:start="43:13" pos:end="43:13">(</operator><name pos:start="43:14" pos:end="43:16">ret</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <call pos:start="43:20" pos:end="43:72"><name pos:start="43:20" pos:end="43:37">ff_lzw_decode_init</name><argument_list pos:start="43:38" pos:end="43:72">(<argument pos:start="43:39" pos:end="43:44"><expr pos:start="43:39" pos:end="43:44"><name pos:start="43:39" pos:end="43:44"><name pos:start="43:39" pos:end="43:39">s</name><operator pos:start="43:40" pos:end="43:41">-&gt;</operator><name pos:start="43:42" pos:end="43:44">lzw</name></name></expr></argument>, <argument pos:start="43:47" pos:end="43:47"><expr pos:start="43:47" pos:end="43:47"><literal type="number" pos:start="43:47" pos:end="43:47">8</literal></expr></argument>, <argument pos:start="43:50" pos:end="43:52"><expr pos:start="43:50" pos:end="43:52"><name pos:start="43:50" pos:end="43:52">src</name></expr></argument>, <argument pos:start="43:55" pos:end="43:58"><expr pos:start="43:55" pos:end="43:58"><name pos:start="43:55" pos:end="43:58">size</name></expr></argument>, <argument pos:start="43:61" pos:end="43:71"><expr pos:start="43:61" pos:end="43:71"><name pos:start="43:61" pos:end="43:71">FF_LZW_TIFF</name></expr></argument>)</argument_list></call><operator pos:start="43:73" pos:end="43:73">)</operator> <operator pos:start="43:75" pos:end="43:75">&lt;</operator> <literal type="number" pos:start="43:77" pos:end="43:77">0</literal></expr>)</condition> <block pos:start="43:80" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:23">

            <expr_stmt pos:start="45:13" pos:end="45:79"><expr pos:start="45:13" pos:end="45:78"><call pos:start="45:13" pos:end="45:78"><name pos:start="45:13" pos:end="45:18">av_log</name><argument_list pos:start="45:19" pos:end="45:78">(<argument pos:start="45:20" pos:end="45:27"><expr pos:start="45:20" pos:end="45:27"><name pos:start="45:20" pos:end="45:27"><name pos:start="45:20" pos:end="45:20">s</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:27">avctx</name></name></expr></argument>, <argument pos:start="45:30" pos:end="45:41"><expr pos:start="45:30" pos:end="45:41"><name pos:start="45:30" pos:end="45:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:44" pos:end="45:77"><expr pos:start="45:44" pos:end="45:77"><literal type="string" pos:start="45:44" pos:end="45:77">"Error initializing LZW decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:23">return <expr pos:start="47:20" pos:end="47:22"><name pos:start="47:20" pos:end="47:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="57:28">(<expr pos:start="53:9" pos:end="57:27"><name pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:16">compr</name></name> <operator pos:start="53:18" pos:end="53:19">==</operator> <name pos:start="53:21" pos:end="53:34">TIFF_CCITT_RLE</name> <operator pos:start="53:36" pos:end="53:37">||</operator>

        <name pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:16">compr</name></name> <operator pos:start="55:18" pos:end="55:19">==</operator> <name pos:start="55:21" pos:end="55:27">TIFF_G3</name>        <operator pos:start="55:36" pos:end="55:37">||</operator>

        <name pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:16">compr</name></name> <operator pos:start="57:18" pos:end="57:19">==</operator> <name pos:start="57:21" pos:end="57:27">TIFF_G4</name></expr>)</condition> <block pos:start="57:30" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:65">

        <return pos:start="59:9" pos:end="59:65">return <expr pos:start="59:16" pos:end="59:64"><call pos:start="59:16" pos:end="59:64"><name pos:start="59:16" pos:end="59:30">tiff_unpack_fax</name><argument_list pos:start="59:31" pos:end="59:64">(<argument pos:start="59:32" pos:end="59:32"><expr pos:start="59:32" pos:end="59:32"><name pos:start="59:32" pos:end="59:32">s</name></expr></argument>, <argument pos:start="59:35" pos:end="59:37"><expr pos:start="59:35" pos:end="59:37"><name pos:start="59:35" pos:end="59:37">dst</name></expr></argument>, <argument pos:start="59:40" pos:end="59:45"><expr pos:start="59:40" pos:end="59:45"><name pos:start="59:40" pos:end="59:45">stride</name></expr></argument>, <argument pos:start="59:48" pos:end="59:50"><expr pos:start="59:48" pos:end="59:50"><name pos:start="59:48" pos:end="59:50">src</name></expr></argument>, <argument pos:start="59:53" pos:end="59:56"><expr pos:start="59:53" pos:end="59:56"><name pos:start="59:53" pos:end="59:56">size</name></expr></argument>, <argument pos:start="59:59" pos:end="59:63"><expr pos:start="59:59" pos:end="59:63"><name pos:start="59:59" pos:end="59:63">lines</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <for pos:start="63:5" pos:end="171:5">for <control pos:start="63:9" pos:end="63:40">(<init pos:start="63:10" pos:end="63:18"><expr pos:start="63:10" pos:end="63:17"><name pos:start="63:10" pos:end="63:13">line</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <literal type="number" pos:start="63:17" pos:end="63:17">0</literal></expr>;</init> <condition pos:start="63:20" pos:end="63:32"><expr pos:start="63:20" pos:end="63:31"><name pos:start="63:20" pos:end="63:23">line</name> <operator pos:start="63:25" pos:end="63:25">&lt;</operator> <name pos:start="63:27" pos:end="63:31">lines</name></expr>;</condition> <incr pos:start="63:34" pos:end="63:39"><expr pos:start="63:34" pos:end="63:39"><name pos:start="63:34" pos:end="63:37">line</name><operator pos:start="63:38" pos:end="63:39">++</operator></expr></incr>)</control> <block pos:start="63:42" pos:end="171:5">{<block_content pos:start="65:9" pos:end="169:22">

        <if_stmt pos:start="65:9" pos:end="71:9"><if pos:start="65:9" pos:end="71:9">if <condition pos:start="65:12" pos:end="65:30">(<expr pos:start="65:13" pos:end="65:29"><name pos:start="65:13" pos:end="65:15">src</name> <operator pos:start="65:17" pos:end="65:17">-</operator> <name pos:start="65:19" pos:end="65:22">ssrc</name> <operator pos:start="65:24" pos:end="65:24">&gt;</operator> <name pos:start="65:26" pos:end="65:29">size</name></expr>)</condition> <block pos:start="65:32" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:39">

            <expr_stmt pos:start="67:13" pos:end="67:69"><expr pos:start="67:13" pos:end="67:68"><call pos:start="67:13" pos:end="67:68"><name pos:start="67:13" pos:end="67:18">av_log</name><argument_list pos:start="67:19" pos:end="67:68">(<argument pos:start="67:20" pos:end="67:27"><expr pos:start="67:20" pos:end="67:27"><name pos:start="67:20" pos:end="67:27"><name pos:start="67:20" pos:end="67:20">s</name><operator pos:start="67:21" pos:end="67:22">-&gt;</operator><name pos:start="67:23" pos:end="67:27">avctx</name></name></expr></argument>, <argument pos:start="67:30" pos:end="67:41"><expr pos:start="67:30" pos:end="67:41"><name pos:start="67:30" pos:end="67:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="67:44" pos:end="67:67"><expr pos:start="67:44" pos:end="67:67"><literal type="string" pos:start="67:44" pos:end="67:67">"Source data overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="69:13" pos:end="69:39">return <expr pos:start="69:20" pos:end="69:38"><name pos:start="69:20" pos:end="69:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="73:9" pos:end="167:9">switch <condition pos:start="73:16" pos:end="73:25">(<expr pos:start="73:17" pos:end="73:24"><name pos:start="73:17" pos:end="73:24"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:24">compr</name></name></expr>)</condition> <block pos:start="73:27" pos:end="167:9">{<block_content pos:start="75:9" pos:end="165:18">

        <case pos:start="75:9" pos:end="75:22">case <expr pos:start="75:14" pos:end="75:21"><name pos:start="75:14" pos:end="75:21">TIFF_RAW</name></expr>:</case>

            <if_stmt pos:start="77:13" pos:end="79:43"><if pos:start="77:13" pos:end="79:43">if <condition pos:start="77:16" pos:end="77:42">(<expr pos:start="77:17" pos:end="77:41"><name pos:start="77:17" pos:end="77:20">ssrc</name> <operator pos:start="77:22" pos:end="77:22">+</operator> <name pos:start="77:24" pos:end="77:27">size</name> <operator pos:start="77:29" pos:end="77:29">-</operator> <name pos:start="77:31" pos:end="77:33">src</name> <operator pos:start="77:35" pos:end="77:35">&lt;</operator> <name pos:start="77:37" pos:end="77:41">width</name></expr>)</condition><block type="pseudo" pos:start="79:17" pos:end="79:43"><block_content pos:start="79:17" pos:end="79:43">

                <return pos:start="79:17" pos:end="79:43">return <expr pos:start="79:24" pos:end="79:42"><name pos:start="79:24" pos:end="79:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="81:13" pos:end="93:13"><if pos:start="81:13" pos:end="85:13">if <condition pos:start="81:16" pos:end="81:31">(<expr pos:start="81:17" pos:end="81:30"><operator pos:start="81:17" pos:end="81:17">!</operator><name pos:start="81:18" pos:end="81:30"><name pos:start="81:18" pos:end="81:18">s</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:30">fill_order</name></name></expr>)</condition> <block pos:start="81:33" pos:end="85:13">{<block_content pos:start="83:17" pos:end="83:40">

                <expr_stmt pos:start="83:17" pos:end="83:40"><expr pos:start="83:17" pos:end="83:39"><call pos:start="83:17" pos:end="83:39"><name pos:start="83:17" pos:end="83:22">memcpy</name><argument_list pos:start="83:23" pos:end="83:39">(<argument pos:start="83:24" pos:end="83:26"><expr pos:start="83:24" pos:end="83:26"><name pos:start="83:24" pos:end="83:26">dst</name></expr></argument>, <argument pos:start="83:29" pos:end="83:31"><expr pos:start="83:29" pos:end="83:31"><name pos:start="83:29" pos:end="83:31">src</name></expr></argument>, <argument pos:start="83:34" pos:end="83:38"><expr pos:start="83:34" pos:end="83:38"><name pos:start="83:34" pos:end="83:38">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="85:15" pos:end="93:13">else <block pos:start="85:20" pos:end="93:13">{<block_content pos:start="87:17" pos:end="91:48">

                <decl_stmt pos:start="87:17" pos:end="87:22"><decl pos:start="87:17" pos:end="87:21"><type pos:start="87:17" pos:end="87:19"><name pos:start="87:17" pos:end="87:19">int</name></type> <name pos:start="87:21" pos:end="87:21">i</name></decl>;</decl_stmt>

                <for pos:start="89:17" pos:end="91:48">for <control pos:start="89:21" pos:end="89:43">(<init pos:start="89:22" pos:end="89:27"><expr pos:start="89:22" pos:end="89:26"><name pos:start="89:22" pos:end="89:22">i</name> <operator pos:start="89:24" pos:end="89:24">=</operator> <literal type="number" pos:start="89:26" pos:end="89:26">0</literal></expr>;</init> <condition pos:start="89:29" pos:end="89:38"><expr pos:start="89:29" pos:end="89:37"><name pos:start="89:29" pos:end="89:29">i</name> <operator pos:start="89:31" pos:end="89:31">&lt;</operator> <name pos:start="89:33" pos:end="89:37">width</name></expr>;</condition> <incr pos:start="89:40" pos:end="89:42"><expr pos:start="89:40" pos:end="89:42"><name pos:start="89:40" pos:end="89:40">i</name><operator pos:start="89:41" pos:end="89:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="91:21" pos:end="91:48"><block_content pos:start="91:21" pos:end="91:48">

                    <expr_stmt pos:start="91:21" pos:end="91:48"><expr pos:start="91:21" pos:end="91:47"><name pos:start="91:21" pos:end="91:26"><name pos:start="91:21" pos:end="91:23">dst</name><index pos:start="91:24" pos:end="91:26">[<expr pos:start="91:25" pos:end="91:25"><name pos:start="91:25" pos:end="91:25">i</name></expr>]</index></name> <operator pos:start="91:28" pos:end="91:28">=</operator> <name pos:start="91:30" pos:end="91:47"><name pos:start="91:30" pos:end="91:39">ff_reverse</name><index pos:start="91:40" pos:end="91:47">[<expr pos:start="91:41" pos:end="91:46"><name pos:start="91:41" pos:end="91:46"><name pos:start="91:41" pos:end="91:43">src</name><index pos:start="91:44" pos:end="91:46">[<expr pos:start="91:45" pos:end="91:45"><name pos:start="91:45" pos:end="91:45">i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:25"><expr pos:start="95:13" pos:end="95:24"><name pos:start="95:13" pos:end="95:15">src</name> <operator pos:start="95:17" pos:end="95:18">+=</operator> <name pos:start="95:20" pos:end="95:24">width</name></expr>;</expr_stmt>

            <break pos:start="97:13" pos:end="97:18">break;</break>

        <case pos:start="99:9" pos:end="99:27">case <expr pos:start="99:14" pos:end="99:26"><name pos:start="99:14" pos:end="99:26">TIFF_PACKBITS</name></expr>:</case>

            <for pos:start="101:13" pos:end="147:13">for <control pos:start="101:17" pos:end="101:45">(<init pos:start="101:18" pos:end="101:28"><expr pos:start="101:18" pos:end="101:27"><name pos:start="101:18" pos:end="101:23">pixels</name> <operator pos:start="101:25" pos:end="101:25">=</operator> <literal type="number" pos:start="101:27" pos:end="101:27">0</literal></expr>;</init> <condition pos:start="101:30" pos:end="101:44"><expr pos:start="101:30" pos:end="101:43"><name pos:start="101:30" pos:end="101:35">pixels</name> <operator pos:start="101:37" pos:end="101:37">&lt;</operator> <name pos:start="101:39" pos:end="101:43">width</name></expr>;</condition><incr/>)</control> <block pos:start="101:47" pos:end="147:13">{<block_content pos:start="103:17" pos:end="145:17">

                <expr_stmt pos:start="103:17" pos:end="103:39"><expr pos:start="103:17" pos:end="103:38"><name pos:start="103:17" pos:end="103:20">code</name> <operator pos:start="103:22" pos:end="103:22">=</operator> <operator pos:start="103:24" pos:end="103:24">(</operator><name pos:start="103:25" pos:end="103:30">int8_t</name><operator pos:start="103:31" pos:end="103:31">)</operator> <operator pos:start="103:33" pos:end="103:33">*</operator><name pos:start="103:34" pos:end="103:36">src</name><operator pos:start="103:37" pos:end="103:38">++</operator></expr>;</expr_stmt>

                <if_stmt pos:start="105:17" pos:end="145:17"><if pos:start="105:17" pos:end="125:17">if <condition pos:start="105:20" pos:end="105:30">(<expr pos:start="105:21" pos:end="105:29"><name pos:start="105:21" pos:end="105:24">code</name> <operator pos:start="105:26" pos:end="105:27">&gt;=</operator> <literal type="number" pos:start="105:29" pos:end="105:29">0</literal></expr>)</condition> <block pos:start="105:32" pos:end="125:17">{<block_content pos:start="107:21" pos:end="123:35">

                    <expr_stmt pos:start="107:21" pos:end="107:27"><expr pos:start="107:21" pos:end="107:26"><name pos:start="107:21" pos:end="107:24">code</name><operator pos:start="107:25" pos:end="107:26">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="109:21" pos:end="117:21"><if pos:start="109:21" pos:end="117:21">if <condition pos:start="109:24" pos:end="109:46">(<expr pos:start="109:25" pos:end="109:45"><name pos:start="109:25" pos:end="109:30">pixels</name> <operator pos:start="109:32" pos:end="109:32">+</operator> <name pos:start="109:34" pos:end="109:37">code</name> <operator pos:start="109:39" pos:end="109:39">&gt;</operator> <name pos:start="109:41" pos:end="109:45">width</name></expr>)</condition> <block pos:start="109:48" pos:end="117:21">{<block_content pos:start="111:25" pos:end="115:51">

                        <expr_stmt pos:start="111:25" pos:end="113:60"><expr pos:start="111:25" pos:end="113:59"><call pos:start="111:25" pos:end="113:59"><name pos:start="111:25" pos:end="111:30">av_log</name><argument_list pos:start="111:31" pos:end="113:59">(<argument pos:start="111:32" pos:end="111:39"><expr pos:start="111:32" pos:end="111:39"><name pos:start="111:32" pos:end="111:39"><name pos:start="111:32" pos:end="111:32">s</name><operator pos:start="111:33" pos:end="111:34">-&gt;</operator><name pos:start="111:35" pos:end="111:39">avctx</name></name></expr></argument>, <argument pos:start="111:42" pos:end="111:53"><expr pos:start="111:42" pos:end="111:53"><name pos:start="111:42" pos:end="111:53">AV_LOG_ERROR</name></expr></argument>,

                               <argument pos:start="113:32" pos:end="113:58"><expr pos:start="113:32" pos:end="113:58"><literal type="string" pos:start="113:32" pos:end="113:58">"Copy went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="115:25" pos:end="115:51">return <expr pos:start="115:32" pos:end="115:50"><name pos:start="115:32" pos:end="115:50">AVERROR_INVALIDDATA</name></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="119:21" pos:end="119:52"><expr pos:start="119:21" pos:end="119:51"><call pos:start="119:21" pos:end="119:51"><name pos:start="119:21" pos:end="119:26">memcpy</name><argument_list pos:start="119:27" pos:end="119:51">(<argument pos:start="119:28" pos:end="119:39"><expr pos:start="119:28" pos:end="119:39"><name pos:start="119:28" pos:end="119:30">dst</name> <operator pos:start="119:32" pos:end="119:32">+</operator> <name pos:start="119:34" pos:end="119:39">pixels</name></expr></argument>, <argument pos:start="119:42" pos:end="119:44"><expr pos:start="119:42" pos:end="119:44"><name pos:start="119:42" pos:end="119:44">src</name></expr></argument>, <argument pos:start="119:47" pos:end="119:50"><expr pos:start="119:47" pos:end="119:50"><name pos:start="119:47" pos:end="119:50">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="121:21" pos:end="121:35"><expr pos:start="121:21" pos:end="121:34"><name pos:start="121:21" pos:end="121:23">src</name>    <operator pos:start="121:28" pos:end="121:29">+=</operator> <name pos:start="121:31" pos:end="121:34">code</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="123:21" pos:end="123:35"><expr pos:start="123:21" pos:end="123:34"><name pos:start="123:21" pos:end="123:26">pixels</name> <operator pos:start="123:28" pos:end="123:29">+=</operator> <name pos:start="123:31" pos:end="123:34">code</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="125:19" pos:end="145:17">else if <condition pos:start="125:27" pos:end="125:40">(<expr pos:start="125:28" pos:end="125:39"><name pos:start="125:28" pos:end="125:31">code</name> <operator pos:start="125:33" pos:end="125:34">!=</operator> <operator pos:start="125:36" pos:end="125:36">-</operator><literal type="number" pos:start="125:37" pos:end="125:39">128</literal></expr>)</condition> <block pos:start="125:42" pos:end="145:17">{<block_content pos:start="127:21" pos:end="143:35"> <comment type="line" pos:start="125:44" pos:end="125:54">// -127..-1</comment>

                    <expr_stmt pos:start="127:21" pos:end="127:39"><expr pos:start="127:21" pos:end="127:38"><name pos:start="127:21" pos:end="127:24">code</name> <operator pos:start="127:26" pos:end="127:26">=</operator> <operator pos:start="127:28" pos:end="127:28">(</operator><operator pos:start="127:29" pos:end="127:29">-</operator><name pos:start="127:30" pos:end="127:33">code</name><operator pos:start="127:34" pos:end="127:34">)</operator> <operator pos:start="127:36" pos:end="127:36">+</operator> <literal type="number" pos:start="127:38" pos:end="127:38">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="129:21" pos:end="137:21"><if pos:start="129:21" pos:end="137:21">if <condition pos:start="129:24" pos:end="129:46">(<expr pos:start="129:25" pos:end="129:45"><name pos:start="129:25" pos:end="129:30">pixels</name> <operator pos:start="129:32" pos:end="129:32">+</operator> <name pos:start="129:34" pos:end="129:37">code</name> <operator pos:start="129:39" pos:end="129:39">&gt;</operator> <name pos:start="129:41" pos:end="129:45">width</name></expr>)</condition> <block pos:start="129:48" pos:end="137:21">{<block_content pos:start="131:25" pos:end="135:51">

                        <expr_stmt pos:start="131:25" pos:end="133:59"><expr pos:start="131:25" pos:end="133:58"><call pos:start="131:25" pos:end="133:58"><name pos:start="131:25" pos:end="131:30">av_log</name><argument_list pos:start="131:31" pos:end="133:58">(<argument pos:start="131:32" pos:end="131:39"><expr pos:start="131:32" pos:end="131:39"><name pos:start="131:32" pos:end="131:39"><name pos:start="131:32" pos:end="131:32">s</name><operator pos:start="131:33" pos:end="131:34">-&gt;</operator><name pos:start="131:35" pos:end="131:39">avctx</name></name></expr></argument>, <argument pos:start="131:42" pos:end="131:53"><expr pos:start="131:42" pos:end="131:53"><name pos:start="131:42" pos:end="131:53">AV_LOG_ERROR</name></expr></argument>,

                               <argument pos:start="133:32" pos:end="133:57"><expr pos:start="133:32" pos:end="133:57"><literal type="string" pos:start="133:32" pos:end="133:57">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="135:25" pos:end="135:51">return <expr pos:start="135:32" pos:end="135:50"><name pos:start="135:32" pos:end="135:50">AVERROR_INVALIDDATA</name></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="139:21" pos:end="139:31"><expr pos:start="139:21" pos:end="139:30"><name pos:start="139:21" pos:end="139:21">c</name> <operator pos:start="139:23" pos:end="139:23">=</operator> <operator pos:start="139:25" pos:end="139:25">*</operator><name pos:start="139:26" pos:end="139:28">src</name><operator pos:start="139:29" pos:end="139:30">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="141:21" pos:end="141:50"><expr pos:start="141:21" pos:end="141:49"><call pos:start="141:21" pos:end="141:49"><name pos:start="141:21" pos:end="141:26">memset</name><argument_list pos:start="141:27" pos:end="141:49">(<argument pos:start="141:28" pos:end="141:39"><expr pos:start="141:28" pos:end="141:39"><name pos:start="141:28" pos:end="141:30">dst</name> <operator pos:start="141:32" pos:end="141:32">+</operator> <name pos:start="141:34" pos:end="141:39">pixels</name></expr></argument>, <argument pos:start="141:42" pos:end="141:42"><expr pos:start="141:42" pos:end="141:42"><name pos:start="141:42" pos:end="141:42">c</name></expr></argument>, <argument pos:start="141:45" pos:end="141:48"><expr pos:start="141:45" pos:end="141:48"><name pos:start="141:45" pos:end="141:48">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="143:21" pos:end="143:35"><expr pos:start="143:21" pos:end="143:34"><name pos:start="143:21" pos:end="143:26">pixels</name> <operator pos:start="143:28" pos:end="143:29">+=</operator> <name pos:start="143:31" pos:end="143:34">code</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        <case pos:start="151:9" pos:end="151:22">case <expr pos:start="151:14" pos:end="151:21"><name pos:start="151:14" pos:end="151:21">TIFF_LZW</name></expr>:</case>

            <expr_stmt pos:start="153:13" pos:end="153:55"><expr pos:start="153:13" pos:end="153:54"><name pos:start="153:13" pos:end="153:18">pixels</name> <operator pos:start="153:20" pos:end="153:20">=</operator> <call pos:start="153:22" pos:end="153:54"><name pos:start="153:22" pos:end="153:34">ff_lzw_decode</name><argument_list pos:start="153:35" pos:end="153:54">(<argument pos:start="153:36" pos:end="153:41"><expr pos:start="153:36" pos:end="153:41"><name pos:start="153:36" pos:end="153:41"><name pos:start="153:36" pos:end="153:36">s</name><operator pos:start="153:37" pos:end="153:38">-&gt;</operator><name pos:start="153:39" pos:end="153:41">lzw</name></name></expr></argument>, <argument pos:start="153:44" pos:end="153:46"><expr pos:start="153:44" pos:end="153:46"><name pos:start="153:44" pos:end="153:46">dst</name></expr></argument>, <argument pos:start="153:49" pos:end="153:53"><expr pos:start="153:49" pos:end="153:53"><name pos:start="153:49" pos:end="153:53">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="155:13" pos:end="163:13"><if pos:start="155:13" pos:end="163:13">if <condition pos:start="155:16" pos:end="155:31">(<expr pos:start="155:17" pos:end="155:30"><name pos:start="155:17" pos:end="155:22">pixels</name> <operator pos:start="155:24" pos:end="155:24">&lt;</operator> <name pos:start="155:26" pos:end="155:30">width</name></expr>)</condition> <block pos:start="155:33" pos:end="163:13">{<block_content pos:start="157:17" pos:end="161:43">

                <expr_stmt pos:start="157:17" pos:end="159:38"><expr pos:start="157:17" pos:end="159:37"><call pos:start="157:17" pos:end="159:37"><name pos:start="157:17" pos:end="157:22">av_log</name><argument_list pos:start="157:23" pos:end="159:37">(<argument pos:start="157:24" pos:end="157:31"><expr pos:start="157:24" pos:end="157:31"><name pos:start="157:24" pos:end="157:31"><name pos:start="157:24" pos:end="157:24">s</name><operator pos:start="157:25" pos:end="157:26">-&gt;</operator><name pos:start="157:27" pos:end="157:31">avctx</name></name></expr></argument>, <argument pos:start="157:34" pos:end="157:45"><expr pos:start="157:34" pos:end="157:45"><name pos:start="157:34" pos:end="157:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="157:48" pos:end="157:78"><expr pos:start="157:48" pos:end="157:78"><literal type="string" pos:start="157:48" pos:end="157:78">"Decoded only %i bytes of %i\n"</literal></expr></argument>,

                       <argument pos:start="159:24" pos:end="159:29"><expr pos:start="159:24" pos:end="159:29"><name pos:start="159:24" pos:end="159:29">pixels</name></expr></argument>, <argument pos:start="159:32" pos:end="159:36"><expr pos:start="159:32" pos:end="159:36"><name pos:start="159:32" pos:end="159:36">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="161:17" pos:end="161:43">return <expr pos:start="161:24" pos:end="161:42"><name pos:start="161:24" pos:end="161:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="169:9" pos:end="169:22"><expr pos:start="169:9" pos:end="169:21"><name pos:start="169:9" pos:end="169:11">dst</name> <operator pos:start="169:13" pos:end="169:14">+=</operator> <name pos:start="169:16" pos:end="169:21">stride</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="173:5" pos:end="173:13">return <expr pos:start="173:12" pos:end="173:12"><literal type="number" pos:start="173:12" pos:end="173:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
