<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19464.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:5"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:7">av_cold</name> <name pos:start="1:9" pos:end="1:12">void</name></type> <name pos:start="1:14" pos:end="1:22">INIT_FUNC</name><parameter_list pos:start="1:23" pos:end="1:56">(<parameter pos:start="1:24" pos:end="1:41"><decl pos:start="1:24" pos:end="1:41"><type pos:start="1:24" pos:end="1:41"><name pos:start="1:24" pos:end="1:36">VP9DSPContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">dsp</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:55">bitexact</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:5">{<block_content pos:start="7:5" pos:end="103:9">

<cpp:if pos:start="5:1" pos:end="5:13">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:13">HAVE_YASM</name></expr></cpp:if>

    <decl_stmt pos:start="7:5" pos:end="90:0"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">cpu_flags</name> <init pos:start="7:19" pos:end="7:38">= <expr pos:start="7:21" pos:end="7:38"><call pos:start="7:21" pos:end="7:38"><name pos:start="7:21" pos:end="7:36">av_get_cpu_flags</name><argument_list pos:start="7:37" pos:end="7:38">()</argument_list></call></expr></init></decl>;</decl_stmt>



<cpp:define pos:start="11:1" pos:end="13:84">#<cpp:directive pos:start="11:2" pos:end="11:7">define</cpp:directive> <cpp:macro pos:start="11:9" pos:end="11:54"><name pos:start="11:9" pos:end="11:23">init_lpf_8_func</name><parameter_list pos:start="11:24" pos:end="11:54">(<parameter pos:start="11:25" pos:end="11:28"><type pos:start="11:25" pos:end="11:28"><name pos:start="11:25" pos:end="11:28">idx1</name></type></parameter>, <parameter pos:start="11:31" pos:end="11:34"><type pos:start="11:31" pos:end="11:34"><name pos:start="11:31" pos:end="11:34">idx2</name></type></parameter>, <parameter pos:start="11:37" pos:end="11:39"><type pos:start="11:37" pos:end="11:39"><name pos:start="11:37" pos:end="11:39">dir</name></type></parameter>, <parameter pos:start="11:42" pos:end="11:43"><type pos:start="11:42" pos:end="11:43"><name pos:start="11:42" pos:end="11:43">wd</name></type></parameter>, <parameter pos:start="11:46" pos:end="11:48"><type pos:start="11:46" pos:end="11:48"><name pos:start="11:46" pos:end="11:48">bpp</name></type></parameter>, <parameter pos:start="11:51" pos:end="11:53"><type pos:start="11:51" pos:end="11:53"><name pos:start="11:51" pos:end="11:53">opt</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="13:5" pos:end="13:84">dsp-&gt;loop_filter_8[idx1][idx2] = ff_vp9_loop_filter_##dir##_##wd##_##bpp##_##opt</cpp:value></cpp:define>

<cpp:define pos:start="15:1" pos:end="17:67">#<cpp:directive pos:start="15:2" pos:end="15:7">define</cpp:directive> <cpp:macro pos:start="15:9" pos:end="15:44"><name pos:start="15:9" pos:end="15:24">init_lpf_16_func</name><parameter_list pos:start="15:25" pos:end="15:44">(<parameter pos:start="15:26" pos:end="15:28"><type pos:start="15:26" pos:end="15:28"><name pos:start="15:26" pos:end="15:28">idx</name></type></parameter>, <parameter pos:start="15:31" pos:end="15:33"><type pos:start="15:31" pos:end="15:33"><name pos:start="15:31" pos:end="15:33">dir</name></type></parameter>, <parameter pos:start="15:36" pos:end="15:38"><type pos:start="15:36" pos:end="15:38"><name pos:start="15:36" pos:end="15:38">bpp</name></type></parameter>, <parameter pos:start="15:41" pos:end="15:43"><type pos:start="15:41" pos:end="15:43"><name pos:start="15:41" pos:end="15:43">opt</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="17:5" pos:end="17:67">dsp-&gt;loop_filter_16[idx] = loop_filter_##dir##_16_##bpp##_##opt</cpp:value></cpp:define>

<cpp:define pos:start="19:1" pos:end="21:92">#<cpp:directive pos:start="19:2" pos:end="19:7">define</cpp:directive> <cpp:macro pos:start="19:9" pos:end="19:69"><name pos:start="19:9" pos:end="19:26">init_lpf_mix2_func</name><parameter_list pos:start="19:27" pos:end="19:69">(<parameter pos:start="19:28" pos:end="19:31"><type pos:start="19:28" pos:end="19:31"><name pos:start="19:28" pos:end="19:31">idx1</name></type></parameter>, <parameter pos:start="19:34" pos:end="19:37"><type pos:start="19:34" pos:end="19:37"><name pos:start="19:34" pos:end="19:37">idx2</name></type></parameter>, <parameter pos:start="19:40" pos:end="19:43"><type pos:start="19:40" pos:end="19:43"><name pos:start="19:40" pos:end="19:43">idx3</name></type></parameter>, <parameter pos:start="19:46" pos:end="19:48"><type pos:start="19:46" pos:end="19:48"><name pos:start="19:46" pos:end="19:48">dir</name></type></parameter>, <parameter pos:start="19:51" pos:end="19:53"><type pos:start="19:51" pos:end="19:53"><name pos:start="19:51" pos:end="19:53">wd1</name></type></parameter>, <parameter pos:start="19:56" pos:end="19:58"><type pos:start="19:56" pos:end="19:58"><name pos:start="19:56" pos:end="19:58">wd2</name></type></parameter>, <parameter pos:start="19:61" pos:end="19:63"><type pos:start="19:61" pos:end="19:63"><name pos:start="19:61" pos:end="19:63">bpp</name></type></parameter>, <parameter pos:start="19:66" pos:end="19:68"><type pos:start="19:66" pos:end="19:68"><name pos:start="19:66" pos:end="19:68">opt</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="21:5" pos:end="21:92">dsp-&gt;loop_filter_mix2[idx1][idx2][idx3] = loop_filter_##dir##_##wd1##wd2##_##bpp##_##opt</cpp:value></cpp:define>



<cpp:define pos:start="25:1" pos:end="57:50">#<cpp:directive pos:start="25:2" pos:end="25:7">define</cpp:directive> <cpp:macro pos:start="25:9" pos:end="25:32"><name pos:start="25:9" pos:end="25:22">init_lpf_funcs</name><parameter_list pos:start="25:23" pos:end="25:32">(<parameter pos:start="25:24" pos:end="25:26"><type pos:start="25:24" pos:end="25:26"><name pos:start="25:24" pos:end="25:26">bpp</name></type></parameter>, <parameter pos:start="25:29" pos:end="25:31"><type pos:start="25:29" pos:end="25:31"><name pos:start="25:29" pos:end="25:31">opt</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="27:5" pos:end="57:50">init_lpf_8_func(0, 0, h,  4, bpp, opt); \

    init_lpf_8_func(0, 1, v,  4, bpp, opt); \

    init_lpf_8_func(1, 0, h,  8, bpp, opt); \

    init_lpf_8_func(1, 1, v,  8, bpp, opt); \

    init_lpf_8_func(2, 0, h, 16, bpp, opt); \

    init_lpf_8_func(2, 1, v, 16, bpp, opt); \

    init_lpf_16_func(0, h, bpp, opt); \

    init_lpf_16_func(1, v, bpp, opt); \

    init_lpf_mix2_func(0, 0, 0, h, 4, 4, bpp, opt); \

    init_lpf_mix2_func(0, 1, 0, h, 4, 8, bpp, opt); \

    init_lpf_mix2_func(1, 0, 0, h, 8, 4, bpp, opt); \

    init_lpf_mix2_func(1, 1, 0, h, 8, 8, bpp, opt); \

    init_lpf_mix2_func(0, 0, 1, v, 4, 4, bpp, opt); \

    init_lpf_mix2_func(0, 1, 1, v, 4, 8, bpp, opt); \

    init_lpf_mix2_func(1, 0, 1, v, 8, 4, bpp, opt); \

    init_lpf_mix2_func(1, 1, 1, v, 8, 8, bpp, opt)</cpp:value></cpp:define>



<cpp:define pos:start="61:1" pos:end="65:71">#<cpp:directive pos:start="61:2" pos:end="61:7">define</cpp:directive> <cpp:macro pos:start="61:9" pos:end="61:63"><name pos:start="61:9" pos:end="61:21">init_itx_func</name><parameter_list pos:start="61:22" pos:end="61:63">(<parameter pos:start="61:23" pos:end="61:26"><type pos:start="61:23" pos:end="61:26"><name pos:start="61:23" pos:end="61:26">idxa</name></type></parameter>, <parameter pos:start="61:29" pos:end="61:32"><type pos:start="61:29" pos:end="61:32"><name pos:start="61:29" pos:end="61:32">idxb</name></type></parameter>, <parameter pos:start="61:35" pos:end="61:39"><type pos:start="61:35" pos:end="61:39"><name pos:start="61:35" pos:end="61:39">typea</name></type></parameter>, <parameter pos:start="61:42" pos:end="61:46"><type pos:start="61:42" pos:end="61:46"><name pos:start="61:42" pos:end="61:46">typeb</name></type></parameter>, <parameter pos:start="61:49" pos:end="61:52"><type pos:start="61:49" pos:end="61:52"><name pos:start="61:49" pos:end="61:52">size</name></type></parameter>, <parameter pos:start="61:55" pos:end="61:57"><type pos:start="61:55" pos:end="61:57"><name pos:start="61:55" pos:end="61:57">bpp</name></type></parameter>, <parameter pos:start="61:60" pos:end="61:62"><type pos:start="61:60" pos:end="61:62"><name pos:start="61:60" pos:end="61:62">opt</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="63:5" pos:end="65:71">dsp-&gt;itxfm_add[idxa][idxb] = \

        ff_vp9_##typea##_##typeb##_##size##x##size##_add_##bpp##_##opt;</cpp:value></cpp:define>

<cpp:define pos:start="67:1" pos:end="75:63">#<cpp:directive pos:start="67:2" pos:end="67:7">define</cpp:directive> <cpp:macro pos:start="67:9" pos:end="67:60"><name pos:start="67:9" pos:end="67:25">init_itx_func_one</name><parameter_list pos:start="67:26" pos:end="67:60">(<parameter pos:start="67:27" pos:end="67:29"><type pos:start="67:27" pos:end="67:29"><name pos:start="67:27" pos:end="67:29">idx</name></type></parameter>, <parameter pos:start="67:32" pos:end="67:36"><type pos:start="67:32" pos:end="67:36"><name pos:start="67:32" pos:end="67:36">typea</name></type></parameter>, <parameter pos:start="67:39" pos:end="67:43"><type pos:start="67:39" pos:end="67:43"><name pos:start="67:39" pos:end="67:43">typeb</name></type></parameter>, <parameter pos:start="67:46" pos:end="67:49"><type pos:start="67:46" pos:end="67:49"><name pos:start="67:46" pos:end="67:49">size</name></type></parameter>, <parameter pos:start="67:52" pos:end="67:54"><type pos:start="67:52" pos:end="67:54"><name pos:start="67:52" pos:end="67:54">bpp</name></type></parameter>, <parameter pos:start="67:57" pos:end="67:59"><type pos:start="67:57" pos:end="67:59"><name pos:start="67:57" pos:end="67:59">opt</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="69:5" pos:end="75:63">init_itx_func(idx, DCT_DCT,   typea, typeb, size, bpp, opt); \

    init_itx_func(idx, ADST_DCT,  typea, typeb, size, bpp, opt); \

    init_itx_func(idx, DCT_ADST,  typea, typeb, size, bpp, opt); \

    init_itx_func(idx, ADST_ADST, typea, typeb, size, bpp, opt)</cpp:value></cpp:define>

<cpp:define pos:start="77:1" pos:end="89:37">#<cpp:directive pos:start="77:2" pos:end="77:7">define</cpp:directive> <cpp:macro pos:start="77:9" pos:end="77:43"><name pos:start="77:9" pos:end="77:22">init_itx_funcs</name><parameter_list pos:start="77:23" pos:end="77:43">(<parameter pos:start="77:24" pos:end="77:26"><type pos:start="77:24" pos:end="77:26"><name pos:start="77:24" pos:end="77:26">idx</name></type></parameter>, <parameter pos:start="77:29" pos:end="77:32"><type pos:start="77:29" pos:end="77:32"><name pos:start="77:29" pos:end="77:32">size</name></type></parameter>, <parameter pos:start="77:35" pos:end="77:37"><type pos:start="77:35" pos:end="77:37"><name pos:start="77:35" pos:end="77:37">bpp</name></type></parameter>, <parameter pos:start="77:40" pos:end="77:42"><type pos:start="77:40" pos:end="77:42"><name pos:start="77:40" pos:end="77:42">opt</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="79:5" pos:end="89:37">init_itx_func(idx, DCT_DCT,   idct,  idct,  size, bpp, opt); \

    init_itx_func(idx, ADST_DCT,  idct,  iadst, size, bpp, opt); \

    init_itx_func(idx, DCT_ADST,  iadst, idct,  size, bpp, opt); \

    init_itx_func(idx, ADST_ADST, iadst, iadst, size, bpp, opt); \



    if (EXTERNAL_MMXEXT(cpu_flags)) {</cpp:value></cpp:define>

        <expr_stmt pos:start="91:9" pos:end="91:52"><expr pos:start="91:9" pos:end="91:51"><call pos:start="91:9" pos:end="91:51"><name pos:start="91:9" pos:end="91:23">init_ipred_func</name><argument_list pos:start="91:24" pos:end="91:51">(<argument pos:start="91:25" pos:end="91:26"><expr pos:start="91:25" pos:end="91:26"><name pos:start="91:25" pos:end="91:26">tm</name></expr></argument>, <argument pos:start="91:29" pos:end="91:34"><expr pos:start="91:29" pos:end="91:34"><name pos:start="91:29" pos:end="91:34">TM_VP8</name></expr></argument>, <argument pos:start="91:37" pos:end="91:37"><expr pos:start="91:37" pos:end="91:37"><literal type="number" pos:start="91:37" pos:end="91:37">4</literal></expr></argument>, <argument pos:start="91:40" pos:end="91:42"><expr pos:start="91:40" pos:end="91:42"><name pos:start="91:40" pos:end="91:42">BPC</name></expr></argument>, <argument pos:start="91:45" pos:end="91:50"><expr pos:start="91:45" pos:end="91:50"><name pos:start="91:45" pos:end="91:50">mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="103:9"><if pos:start="93:9" pos:end="103:9">if <condition pos:start="93:12" pos:end="93:22">(<expr pos:start="93:13" pos:end="93:21"><operator pos:start="93:13" pos:end="93:13">!</operator><name pos:start="93:14" pos:end="93:21">bitexact</name></expr>)</condition> <block pos:start="93:24" pos:end="103:9">{<block_content pos:start="95:13" pos:end="102:0">

            <expr_stmt pos:start="95:13" pos:end="98:0"><expr pos:start="95:13" pos:end="95:75"><call pos:start="95:13" pos:end="95:75"><name pos:start="95:13" pos:end="95:29">init_itx_func_one</name><argument_list pos:start="95:30" pos:end="95:75">(<argument pos:start="95:31" pos:end="95:31"><expr pos:start="95:31" pos:end="95:31"><literal type="number" pos:start="95:31" pos:end="95:31">4</literal></expr></argument> <comment type="block" pos:start="95:33" pos:end="95:46">/* lossless */</comment>, <argument pos:start="95:49" pos:end="95:52"><expr pos:start="95:49" pos:end="95:52"><name pos:start="95:49" pos:end="95:52">iwht</name></expr></argument>, <argument pos:start="95:55" pos:end="95:58"><expr pos:start="95:55" pos:end="95:58"><name pos:start="95:55" pos:end="95:58">iwht</name></expr></argument>, <argument pos:start="95:61" pos:end="95:61"><expr pos:start="95:61" pos:end="95:61"><literal type="number" pos:start="95:61" pos:end="95:61">4</literal></expr></argument>, <argument pos:start="95:64" pos:end="95:66"><expr pos:start="95:64" pos:end="95:66"><name pos:start="95:64" pos:end="95:66">BPC</name></expr></argument>, <argument pos:start="95:69" pos:end="95:74"><expr pos:start="95:69" pos:end="95:74"><name pos:start="95:69" pos:end="95:74">mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="97:1" pos:end="97:13">#<cpp:directive pos:start="97:2" pos:end="97:3">if</cpp:directive> <expr pos:start="97:5" pos:end="97:13"><name pos:start="97:5" pos:end="97:7">BPC</name> <operator pos:start="97:9" pos:end="97:10">==</operator> <literal type="number" pos:start="97:12" pos:end="97:13">10</literal></expr></cpp:if>

            <expr_stmt pos:start="99:13" pos:end="102:0"><expr pos:start="99:13" pos:end="99:69"><call pos:start="99:13" pos:end="99:69"><name pos:start="99:13" pos:end="99:25">init_itx_func</name><argument_list pos:start="99:26" pos:end="99:69">(<argument pos:start="99:27" pos:end="99:32"><expr pos:start="99:27" pos:end="99:32"><name pos:start="99:27" pos:end="99:32">TX_4X4</name></expr></argument>, <argument pos:start="99:35" pos:end="99:41"><expr pos:start="99:35" pos:end="99:41"><name pos:start="99:35" pos:end="99:41">DCT_DCT</name></expr></argument>, <argument pos:start="99:44" pos:end="99:47"><expr pos:start="99:44" pos:end="99:47"><name pos:start="99:44" pos:end="99:47">idct</name></expr></argument>, <argument pos:start="99:50" pos:end="99:53"><expr pos:start="99:50" pos:end="99:53"><name pos:start="99:50" pos:end="99:53">idct</name></expr></argument>, <argument pos:start="99:56" pos:end="99:56"><expr pos:start="99:56" pos:end="99:56"><literal type="number" pos:start="99:56" pos:end="99:56">4</literal></expr></argument>, <argument pos:start="99:59" pos:end="99:60"><expr pos:start="99:59" pos:end="99:60"><literal type="number" pos:start="99:59" pos:end="99:60">10</literal></expr></argument>, <argument pos:start="99:63" pos:end="99:68"><expr pos:start="99:63" pos:end="99:68"><name pos:start="99:63" pos:end="99:68">mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="101:1" pos:end="101:6">#<cpp:directive pos:start="101:2" pos:end="101:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></function>



    <if_stmt pos:start="109:5" pos:end="135:5"><if pos:start="109:5" pos:end="135:5">if <condition pos:start="109:8" pos:end="109:33">(<expr pos:start="109:9" pos:end="109:32"><call pos:start="109:9" pos:end="109:32"><name pos:start="109:9" pos:end="109:21">EXTERNAL_SSE2</name><argument_list pos:start="109:22" pos:end="109:32">(<argument pos:start="109:23" pos:end="109:31"><expr pos:start="109:23" pos:end="109:31"><name pos:start="109:23" pos:end="109:31">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:35" pos:end="135:5">{<block_content pos:start="111:9" pos:end="134:0">

        <expr_stmt pos:start="111:9" pos:end="111:40"><expr pos:start="111:9" pos:end="111:39"><call pos:start="111:9" pos:end="111:39"><name pos:start="111:9" pos:end="111:20">init_subpel3</name><argument_list pos:start="111:21" pos:end="111:39">(<argument pos:start="111:22" pos:end="111:22"><expr pos:start="111:22" pos:end="111:22"><literal type="number" pos:start="111:22" pos:end="111:22">0</literal></expr></argument>, <argument pos:start="111:25" pos:end="111:27"><expr pos:start="111:25" pos:end="111:27"><name pos:start="111:25" pos:end="111:27">put</name></expr></argument>, <argument pos:start="111:30" pos:end="111:32"><expr pos:start="111:30" pos:end="111:32"><name pos:start="111:30" pos:end="111:32">BPC</name></expr></argument>, <argument pos:start="111:35" pos:end="111:38"><expr pos:start="111:35" pos:end="111:38"><name pos:start="111:35" pos:end="111:38">sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:40"><expr pos:start="113:9" pos:end="113:39"><call pos:start="113:9" pos:end="113:39"><name pos:start="113:9" pos:end="113:20">init_subpel3</name><argument_list pos:start="113:21" pos:end="113:39">(<argument pos:start="113:22" pos:end="113:22"><expr pos:start="113:22" pos:end="113:22"><literal type="number" pos:start="113:22" pos:end="113:22">1</literal></expr></argument>, <argument pos:start="113:25" pos:end="113:27"><expr pos:start="113:25" pos:end="113:27"><name pos:start="113:25" pos:end="113:27">avg</name></expr></argument>, <argument pos:start="113:30" pos:end="113:32"><expr pos:start="113:30" pos:end="113:32"><name pos:start="113:30" pos:end="113:32">BPC</name></expr></argument>, <argument pos:start="113:35" pos:end="113:38"><expr pos:start="113:35" pos:end="113:38"><name pos:start="113:35" pos:end="113:38">sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:34"><expr pos:start="115:9" pos:end="115:33"><call pos:start="115:9" pos:end="115:33"><name pos:start="115:9" pos:end="115:22">init_lpf_funcs</name><argument_list pos:start="115:23" pos:end="115:33">(<argument pos:start="115:24" pos:end="115:26"><expr pos:start="115:24" pos:end="115:26"><name pos:start="115:24" pos:end="115:26">BPC</name></expr></argument>, <argument pos:start="115:29" pos:end="115:32"><expr pos:start="115:29" pos:end="115:32"><name pos:start="115:29" pos:end="115:32">sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="120:0"><expr pos:start="117:9" pos:end="117:55"><call pos:start="117:9" pos:end="117:55"><name pos:start="117:9" pos:end="117:32">init_8_16_32_ipred_funcs</name><argument_list pos:start="117:33" pos:end="117:55">(<argument pos:start="117:34" pos:end="117:35"><expr pos:start="117:34" pos:end="117:35"><name pos:start="117:34" pos:end="117:35">tm</name></expr></argument>, <argument pos:start="117:38" pos:end="117:43"><expr pos:start="117:38" pos:end="117:43"><name pos:start="117:38" pos:end="117:43">TM_VP8</name></expr></argument>, <argument pos:start="117:46" pos:end="117:48"><expr pos:start="117:46" pos:end="117:48"><name pos:start="117:46" pos:end="117:48">BPC</name></expr></argument>, <argument pos:start="117:51" pos:end="117:54"><expr pos:start="117:51" pos:end="117:54"><name pos:start="117:51" pos:end="117:54">sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="119:1" pos:end="119:13">#<cpp:directive pos:start="119:2" pos:end="119:3">if</cpp:directive> <expr pos:start="119:5" pos:end="119:13"><name pos:start="119:5" pos:end="119:7">BPC</name> <operator pos:start="119:9" pos:end="119:10">==</operator> <literal type="number" pos:start="119:12" pos:end="119:13">10</literal></expr></cpp:if>

        <if_stmt pos:start="121:9" pos:end="134:0"><if pos:start="121:9" pos:end="134:0">if <condition pos:start="121:12" pos:end="121:22">(<expr pos:start="121:13" pos:end="121:21"><operator pos:start="121:13" pos:end="121:13">!</operator><name pos:start="121:14" pos:end="121:21">bitexact</name></expr>)</condition> <block pos:start="121:24" pos:end="134:0">{<block_content pos:start="123:13" pos:end="127:72">

            <expr_stmt pos:start="123:13" pos:end="123:72"><expr pos:start="123:13" pos:end="123:71"><call pos:start="123:13" pos:end="123:71"><name pos:start="123:13" pos:end="123:25">init_itx_func</name><argument_list pos:start="123:26" pos:end="123:71">(<argument pos:start="123:27" pos:end="123:32"><expr pos:start="123:27" pos:end="123:32"><name pos:start="123:27" pos:end="123:32">TX_4X4</name></expr></argument>, <argument pos:start="123:35" pos:end="123:42"><expr pos:start="123:35" pos:end="123:42"><name pos:start="123:35" pos:end="123:42">ADST_DCT</name></expr></argument>,  <argument pos:start="123:46" pos:end="123:49"><expr pos:start="123:46" pos:end="123:49"><name pos:start="123:46" pos:end="123:49">idct</name></expr></argument>,  <argument pos:start="123:53" pos:end="123:57"><expr pos:start="123:53" pos:end="123:57"><name pos:start="123:53" pos:end="123:57">iadst</name></expr></argument>, <argument pos:start="123:60" pos:end="123:60"><expr pos:start="123:60" pos:end="123:60"><literal type="number" pos:start="123:60" pos:end="123:60">4</literal></expr></argument>, <argument pos:start="123:63" pos:end="123:64"><expr pos:start="123:63" pos:end="123:64"><literal type="number" pos:start="123:63" pos:end="123:64">10</literal></expr></argument>, <argument pos:start="123:67" pos:end="123:70"><expr pos:start="123:67" pos:end="123:70"><name pos:start="123:67" pos:end="123:70">sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:72"><expr pos:start="125:13" pos:end="125:71"><call pos:start="125:13" pos:end="125:71"><name pos:start="125:13" pos:end="125:25">init_itx_func</name><argument_list pos:start="125:26" pos:end="125:71">(<argument pos:start="125:27" pos:end="125:32"><expr pos:start="125:27" pos:end="125:32"><name pos:start="125:27" pos:end="125:32">TX_4X4</name></expr></argument>, <argument pos:start="125:35" pos:end="125:42"><expr pos:start="125:35" pos:end="125:42"><name pos:start="125:35" pos:end="125:42">DCT_ADST</name></expr></argument>,  <argument pos:start="125:46" pos:end="125:50"><expr pos:start="125:46" pos:end="125:50"><name pos:start="125:46" pos:end="125:50">iadst</name></expr></argument>, <argument pos:start="125:53" pos:end="125:56"><expr pos:start="125:53" pos:end="125:56"><name pos:start="125:53" pos:end="125:56">idct</name></expr></argument>,  <argument pos:start="125:60" pos:end="125:60"><expr pos:start="125:60" pos:end="125:60"><literal type="number" pos:start="125:60" pos:end="125:60">4</literal></expr></argument>, <argument pos:start="125:63" pos:end="125:64"><expr pos:start="125:63" pos:end="125:64"><literal type="number" pos:start="125:63" pos:end="125:64">10</literal></expr></argument>, <argument pos:start="125:67" pos:end="125:70"><expr pos:start="125:67" pos:end="125:70"><name pos:start="125:67" pos:end="125:70">sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:72"><expr pos:start="127:13" pos:end="127:71"><call pos:start="127:13" pos:end="127:71"><name pos:start="127:13" pos:end="127:25">init_itx_func</name><argument_list pos:start="127:26" pos:end="127:71">(<argument pos:start="127:27" pos:end="127:32"><expr pos:start="127:27" pos:end="127:32"><name pos:start="127:27" pos:end="127:32">TX_4X4</name></expr></argument>, <argument pos:start="127:35" pos:end="127:43"><expr pos:start="127:35" pos:end="127:43"><name pos:start="127:35" pos:end="127:43">ADST_ADST</name></expr></argument>, <argument pos:start="127:46" pos:end="127:50"><expr pos:start="127:46" pos:end="127:50"><name pos:start="127:46" pos:end="127:50">iadst</name></expr></argument>, <argument pos:start="127:53" pos:end="127:57"><expr pos:start="127:53" pos:end="127:57"><name pos:start="127:53" pos:end="127:57">iadst</name></expr></argument>, <argument pos:start="127:60" pos:end="127:60"><expr pos:start="127:60" pos:end="127:60"><literal type="number" pos:start="127:60" pos:end="127:60">4</literal></expr></argument>, <argument pos:start="127:63" pos:end="127:64"><expr pos:start="127:63" pos:end="127:64"><literal type="number" pos:start="127:63" pos:end="127:64">10</literal></expr></argument>, <argument pos:start="127:67" pos:end="127:70"><expr pos:start="127:67" pos:end="127:70"><name pos:start="127:67" pos:end="127:70">sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



<cpp:endif pos:start="133:1" pos:end="133:6">#<cpp:directive pos:start="133:2" pos:end="133:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="139:5" pos:end="153:5"><if pos:start="139:5" pos:end="153:5">if <condition pos:start="139:8" pos:end="139:34">(<expr pos:start="139:9" pos:end="139:33"><call pos:start="139:9" pos:end="139:33"><name pos:start="139:9" pos:end="139:22">EXTERNAL_SSSE3</name><argument_list pos:start="139:23" pos:end="139:33">(<argument pos:start="139:24" pos:end="139:32"><expr pos:start="139:24" pos:end="139:32"><name pos:start="139:24" pos:end="139:32">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:36" pos:end="153:5">{<block_content pos:start="141:9" pos:end="152:0">

        <expr_stmt pos:start="141:9" pos:end="144:0"><expr pos:start="141:9" pos:end="141:34"><call pos:start="141:9" pos:end="141:34"><name pos:start="141:9" pos:end="141:22">init_lpf_funcs</name><argument_list pos:start="141:23" pos:end="141:34">(<argument pos:start="141:24" pos:end="141:26"><expr pos:start="141:24" pos:end="141:26"><name pos:start="141:24" pos:end="141:26">BPC</name></expr></argument>, <argument pos:start="141:29" pos:end="141:33"><expr pos:start="141:29" pos:end="141:33"><name pos:start="141:29" pos:end="141:33">ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="143:1" pos:end="143:13">#<cpp:directive pos:start="143:2" pos:end="143:3">if</cpp:directive> <expr pos:start="143:5" pos:end="143:13"><name pos:start="143:5" pos:end="143:7">BPC</name> <operator pos:start="143:9" pos:end="143:10">==</operator> <literal type="number" pos:start="143:12" pos:end="143:13">10</literal></expr></cpp:if>

        <if_stmt pos:start="145:9" pos:end="152:0"><if pos:start="145:9" pos:end="152:0">if <condition pos:start="145:12" pos:end="145:22">(<expr pos:start="145:13" pos:end="145:21"><operator pos:start="145:13" pos:end="145:13">!</operator><name pos:start="145:14" pos:end="145:21">bitexact</name></expr>)</condition> <block pos:start="145:24" pos:end="152:0">{<block_content pos:start="147:13" pos:end="147:50">

            <expr_stmt pos:start="147:13" pos:end="147:50"><expr pos:start="147:13" pos:end="147:49"><call pos:start="147:13" pos:end="147:49"><name pos:start="147:13" pos:end="147:26">init_itx_funcs</name><argument_list pos:start="147:27" pos:end="147:49">(<argument pos:start="147:28" pos:end="147:33"><expr pos:start="147:28" pos:end="147:33"><name pos:start="147:28" pos:end="147:33">TX_4X4</name></expr></argument>, <argument pos:start="147:36" pos:end="147:36"><expr pos:start="147:36" pos:end="147:36"><literal type="number" pos:start="147:36" pos:end="147:36">4</literal></expr></argument>, <argument pos:start="147:39" pos:end="147:41"><expr pos:start="147:39" pos:end="147:41"><name pos:start="147:39" pos:end="147:41">BPC</name></expr></argument>, <argument pos:start="147:44" pos:end="147:48"><expr pos:start="147:44" pos:end="147:48"><name pos:start="147:44" pos:end="147:48">ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="151:1" pos:end="151:6">#<cpp:directive pos:start="151:2" pos:end="151:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="157:5" pos:end="161:5"><if pos:start="157:5" pos:end="161:5">if <condition pos:start="157:8" pos:end="157:32">(<expr pos:start="157:9" pos:end="157:31"><call pos:start="157:9" pos:end="157:31"><name pos:start="157:9" pos:end="157:20">EXTERNAL_AVX</name><argument_list pos:start="157:21" pos:end="157:31">(<argument pos:start="157:22" pos:end="157:30"><expr pos:start="157:22" pos:end="157:30"><name pos:start="157:22" pos:end="157:30">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="157:34" pos:end="161:5">{<block_content pos:start="159:9" pos:end="159:33">

        <expr_stmt pos:start="159:9" pos:end="159:33"><expr pos:start="159:9" pos:end="159:32"><call pos:start="159:9" pos:end="159:32"><name pos:start="159:9" pos:end="159:22">init_lpf_funcs</name><argument_list pos:start="159:23" pos:end="159:32">(<argument pos:start="159:24" pos:end="159:26"><expr pos:start="159:24" pos:end="159:26"><name pos:start="159:24" pos:end="159:26">BPC</name></expr></argument>, <argument pos:start="159:29" pos:end="159:31"><expr pos:start="159:29" pos:end="159:31"><name pos:start="159:29" pos:end="159:31">avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="165:5" pos:end="184:0"><if pos:start="165:5" pos:end="184:0">if <condition pos:start="165:8" pos:end="165:33">(<expr pos:start="165:9" pos:end="165:32"><call pos:start="165:9" pos:end="165:32"><name pos:start="165:9" pos:end="165:21">EXTERNAL_AVX2</name><argument_list pos:start="165:22" pos:end="165:32">(<argument pos:start="165:23" pos:end="165:31"><expr pos:start="165:23" pos:end="165:31"><name pos:start="165:23" pos:end="165:31">cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="165:35" pos:end="184:0">{<block_content pos:start="169:9" pos:end="178:0">

<cpp:if pos:start="167:1" pos:end="167:22">#<cpp:directive pos:start="167:2" pos:end="167:3">if</cpp:directive> <expr pos:start="167:5" pos:end="167:22"><name pos:start="167:5" pos:end="167:22">HAVE_AVX2_EXTERNAL</name></expr></cpp:if>

        <expr_stmt pos:start="169:9" pos:end="169:47"><expr pos:start="169:9" pos:end="169:46"><call pos:start="169:9" pos:end="169:46"><name pos:start="169:9" pos:end="169:26">init_subpel3_32_64</name><argument_list pos:start="169:27" pos:end="169:46">(<argument pos:start="169:28" pos:end="169:28"><expr pos:start="169:28" pos:end="169:28"><literal type="number" pos:start="169:28" pos:end="169:28">0</literal></expr></argument>,  <argument pos:start="169:32" pos:end="169:34"><expr pos:start="169:32" pos:end="169:34"><name pos:start="169:32" pos:end="169:34">put</name></expr></argument>, <argument pos:start="169:37" pos:end="169:39"><expr pos:start="169:37" pos:end="169:39"><name pos:start="169:37" pos:end="169:39">BPC</name></expr></argument>, <argument pos:start="169:42" pos:end="169:45"><expr pos:start="169:42" pos:end="169:45"><name pos:start="169:42" pos:end="169:45">avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:47"><expr pos:start="171:9" pos:end="171:46"><call pos:start="171:9" pos:end="171:46"><name pos:start="171:9" pos:end="171:26">init_subpel3_32_64</name><argument_list pos:start="171:27" pos:end="171:46">(<argument pos:start="171:28" pos:end="171:28"><expr pos:start="171:28" pos:end="171:28"><literal type="number" pos:start="171:28" pos:end="171:28">1</literal></expr></argument>,  <argument pos:start="171:32" pos:end="171:34"><expr pos:start="171:32" pos:end="171:34"><name pos:start="171:32" pos:end="171:34">avg</name></expr></argument>, <argument pos:start="171:37" pos:end="171:39"><expr pos:start="171:37" pos:end="171:39"><name pos:start="171:37" pos:end="171:39">BPC</name></expr></argument>, <argument pos:start="171:42" pos:end="171:45"><expr pos:start="171:42" pos:end="171:45"><name pos:start="171:42" pos:end="171:45">avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:47"><expr pos:start="173:9" pos:end="173:46"><call pos:start="173:9" pos:end="173:46"><name pos:start="173:9" pos:end="173:20">init_subpel2</name><argument_list pos:start="173:21" pos:end="173:46">(<argument pos:start="173:22" pos:end="173:22"><expr pos:start="173:22" pos:end="173:22"><literal type="number" pos:start="173:22" pos:end="173:22">2</literal></expr></argument>, <argument pos:start="173:25" pos:end="173:25"><expr pos:start="173:25" pos:end="173:25"><literal type="number" pos:start="173:25" pos:end="173:25">0</literal></expr></argument>, <argument pos:start="173:28" pos:end="173:29"><expr pos:start="173:28" pos:end="173:29"><literal type="number" pos:start="173:28" pos:end="173:29">16</literal></expr></argument>, <argument pos:start="173:32" pos:end="173:34"><expr pos:start="173:32" pos:end="173:34"><name pos:start="173:32" pos:end="173:34">put</name></expr></argument>, <argument pos:start="173:37" pos:end="173:39"><expr pos:start="173:37" pos:end="173:39"><name pos:start="173:37" pos:end="173:39">BPC</name></expr></argument>, <argument pos:start="173:42" pos:end="173:45"><expr pos:start="173:42" pos:end="173:45"><name pos:start="173:42" pos:end="173:45">avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="178:0"><expr pos:start="175:9" pos:end="175:46"><call pos:start="175:9" pos:end="175:46"><name pos:start="175:9" pos:end="175:20">init_subpel2</name><argument_list pos:start="175:21" pos:end="175:46">(<argument pos:start="175:22" pos:end="175:22"><expr pos:start="175:22" pos:end="175:22"><literal type="number" pos:start="175:22" pos:end="175:22">2</literal></expr></argument>, <argument pos:start="175:25" pos:end="175:25"><expr pos:start="175:25" pos:end="175:25"><literal type="number" pos:start="175:25" pos:end="175:25">1</literal></expr></argument>, <argument pos:start="175:28" pos:end="175:29"><expr pos:start="175:28" pos:end="175:29"><literal type="number" pos:start="175:28" pos:end="175:29">16</literal></expr></argument>, <argument pos:start="175:32" pos:end="175:34"><expr pos:start="175:32" pos:end="175:34"><name pos:start="175:32" pos:end="175:34">avg</name></expr></argument>, <argument pos:start="175:37" pos:end="175:39"><expr pos:start="175:37" pos:end="175:39"><name pos:start="175:37" pos:end="175:39">BPC</name></expr></argument>, <argument pos:start="175:42" pos:end="175:45"><expr pos:start="175:42" pos:end="175:45"><name pos:start="175:42" pos:end="175:45">avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="177:1" pos:end="177:6">#<cpp:directive pos:start="177:2" pos:end="177:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



<cpp:endif pos:start="183:1" pos:end="183:6">#<cpp:directive pos:start="183:2" pos:end="183:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="183:8" pos:end="183:22">/* HAVE_YASM */</comment>



    <expr_stmt pos:start="187:5" pos:end="187:34"><expr pos:start="187:5" pos:end="187:33"><call pos:start="187:5" pos:end="187:33"><name pos:start="187:5" pos:end="187:28">ff_vp9dsp_init_16bpp_x86</name><argument_list pos:start="187:29" pos:end="187:33">(<argument pos:start="187:30" pos:end="187:32"><expr pos:start="187:30" pos:end="187:32"><name pos:start="187:30" pos:end="187:32">dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</unit>
