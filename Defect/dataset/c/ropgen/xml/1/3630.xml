<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3630.c" pos:tabs="8"><function pos:start="1:1" pos:end="199:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">get_aiff_header</name><parameter_list pos:start="1:27" pos:end="3:53">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:55"><decl pos:start="1:48" pos:end="1:55"><type pos:start="1:48" pos:end="1:55"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:55">size</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:52"><decl pos:start="3:37" pos:end="3:52"><type pos:start="3:37" pos:end="3:52"><name pos:start="3:37" pos:end="3:44">unsigned</name></type> <name pos:start="3:46" pos:end="3:52">version</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="199:1">{<block_content pos:start="7:5" pos:end="197:22">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">AVIOContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">pb</name>        <init pos:start="7:28" pos:end="7:34">= <expr pos:start="7:30" pos:end="7:34"><name pos:start="7:30" pos:end="7:34"><name pos:start="7:30" pos:end="7:30">s</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:34">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:53"><decl pos:start="9:5" pos:end="9:52"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">AVCodecParameters</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:26">par</name> <init pos:start="9:28" pos:end="9:52">= <expr pos:start="9:30" pos:end="9:52"><name pos:start="9:30" pos:end="9:42"><name pos:start="9:30" pos:end="9:30">s</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:39">streams</name><index pos:start="9:40" pos:end="9:42">[<expr pos:start="9:41" pos:end="9:41"><literal type="number" pos:start="9:41" pos:end="9:41">0</literal></expr>]</index></name><operator pos:start="9:43" pos:end="9:44">-&gt;</operator><name pos:start="9:45" pos:end="9:52">codecpar</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:42"><decl pos:start="11:5" pos:end="11:41"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">AIFFInputContext</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:26">aiff</name> <init pos:start="11:28" pos:end="11:41">= <expr pos:start="11:30" pos:end="11:41"><name pos:start="11:30" pos:end="11:41"><name pos:start="11:30" pos:end="11:30">s</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">exp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:16">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:19">sample_rate</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:27">num_frames</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="25:15"><if pos:start="23:5" pos:end="25:15">if <condition pos:start="23:8" pos:end="23:17">(<expr pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:12">size</name> <operator pos:start="23:14" pos:end="23:14">&amp;</operator> <literal type="number" pos:start="23:16" pos:end="23:16">1</literal></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:15"><block_content pos:start="25:9" pos:end="25:15">

        <expr_stmt pos:start="25:9" pos:end="25:15"><expr pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:12">size</name><operator pos:start="25:13" pos:end="25:14">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:41"><expr pos:start="27:5" pos:end="27:40"><name pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:7">par</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:19">codec_type</name></name> <operator pos:start="27:21" pos:end="27:21">=</operator> <name pos:start="27:23" pos:end="27:40">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:34"><expr pos:start="29:5" pos:end="29:33"><name pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:7">par</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:17">channels</name></name> <operator pos:start="29:19" pos:end="29:19">=</operator> <call pos:start="29:21" pos:end="29:33"><name pos:start="29:21" pos:end="29:29">avio_rb16</name><argument_list pos:start="29:30" pos:end="29:33">(<argument pos:start="29:31" pos:end="29:32"><expr pos:start="29:31" pos:end="29:32"><name pos:start="29:31" pos:end="29:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:31"><expr pos:start="31:5" pos:end="31:30"><name pos:start="31:5" pos:end="31:14">num_frames</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <call pos:start="31:18" pos:end="31:30"><name pos:start="31:18" pos:end="31:26">avio_rb32</name><argument_list pos:start="31:27" pos:end="31:30">(<argument pos:start="31:28" pos:end="31:29"><expr pos:start="31:28" pos:end="31:29"><name pos:start="31:28" pos:end="31:29">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:47"><expr pos:start="33:5" pos:end="33:46"><name pos:start="33:5" pos:end="33:30"><name pos:start="33:5" pos:end="33:7">par</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:30">bits_per_coded_sample</name></name> <operator pos:start="33:32" pos:end="33:32">=</operator> <call pos:start="33:34" pos:end="33:46"><name pos:start="33:34" pos:end="33:42">avio_rb16</name><argument_list pos:start="33:43" pos:end="33:46">(<argument pos:start="33:44" pos:end="33:45"><expr pos:start="33:44" pos:end="33:45"><name pos:start="33:44" pos:end="33:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:37"><expr pos:start="37:5" pos:end="37:36"><name pos:start="37:5" pos:end="37:7">exp</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:23"><name pos:start="37:11" pos:end="37:19">avio_rb16</name><argument_list pos:start="37:20" pos:end="37:23">(<argument pos:start="37:21" pos:end="37:22"><expr pos:start="37:21" pos:end="37:22"><name pos:start="37:21" pos:end="37:22">pb</name></expr></argument>)</argument_list></call> <operator pos:start="37:25" pos:end="37:25">-</operator> <literal type="number" pos:start="37:27" pos:end="37:33">16383</literal> <operator pos:start="37:33" pos:end="37:33">-</operator> <literal type="number" pos:start="37:35" pos:end="37:36">63</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:24"><expr pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:7">val</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:23"><name pos:start="39:11" pos:end="39:19">avio_rb64</name><argument_list pos:start="39:20" pos:end="39:23">(<argument pos:start="39:21" pos:end="39:22"><expr pos:start="39:21" pos:end="39:22"><name pos:start="39:21" pos:end="39:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:28">(<expr pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:11">exp</name> <argument_list type="generic" pos:start="41:13" pos:end="41:25">&lt;<argument pos:start="41:14" pos:end="41:23"><expr pos:start="41:14" pos:end="41:23"><operator pos:start="41:14" pos:end="41:14">-</operator><literal type="number" pos:start="41:15" pos:end="41:16">63</literal> <operator pos:start="41:18" pos:end="41:19">||</operator> <name pos:start="41:21" pos:end="41:23">exp</name></expr></argument> &gt;</argument_list></name><literal type="number" pos:start="41:26" pos:end="41:27">63</literal></expr>)</condition> <block pos:start="41:30" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:35">

        <expr_stmt pos:start="43:9" pos:end="43:65"><expr pos:start="43:9" pos:end="43:64"><call pos:start="43:9" pos:end="43:64"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:64">(<argument pos:start="43:16" pos:end="43:16"><expr pos:start="43:16" pos:end="43:16"><name pos:start="43:16" pos:end="43:16">s</name></expr></argument>, <argument pos:start="43:19" pos:end="43:30"><expr pos:start="43:19" pos:end="43:30"><name pos:start="43:19" pos:end="43:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:33" pos:end="43:58"><expr pos:start="43:33" pos:end="43:58"><literal type="string" pos:start="43:33" pos:end="43:58">"exp %d is out of range\n"</literal></expr></argument>, <argument pos:start="43:61" pos:end="43:63"><expr pos:start="43:61" pos:end="43:63"><name pos:start="43:61" pos:end="43:63">exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:35">return <expr pos:start="45:16" pos:end="45:34"><name pos:start="45:16" pos:end="45:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="49:5" pos:end="55:55"><if pos:start="49:5" pos:end="51:33">if <condition pos:start="49:8" pos:end="49:17">(<expr pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:11">exp</name> <operator pos:start="49:13" pos:end="49:14">&gt;=</operator> <literal type="number" pos:start="49:16" pos:end="49:16">0</literal></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:33"><block_content pos:start="51:9" pos:end="51:33">

        <expr_stmt pos:start="51:9" pos:end="51:33"><expr pos:start="51:9" pos:end="51:32"><name pos:start="51:9" pos:end="51:19">sample_rate</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <name pos:start="51:23" pos:end="51:25">val</name> <operator pos:start="51:27" pos:end="51:28">&lt;&lt;</operator> <name pos:start="51:30" pos:end="51:32">exp</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="53:5" pos:end="55:55">else<block type="pseudo" pos:start="55:9" pos:end="55:55"><block_content pos:start="55:9" pos:end="55:55">

        <expr_stmt pos:start="55:9" pos:end="55:55"><expr pos:start="55:9" pos:end="55:54"><name pos:start="55:9" pos:end="55:19">sample_rate</name> <operator pos:start="55:21" pos:end="55:21">=</operator> <operator pos:start="55:23" pos:end="55:23">(</operator><name pos:start="55:24" pos:end="55:26">val</name> <operator pos:start="55:28" pos:end="55:28">+</operator> <operator pos:start="55:30" pos:end="55:30">(</operator><literal type="number" pos:start="55:31" pos:end="55:34">1ULL</literal><operator pos:start="55:35" pos:end="55:36">&lt;&lt;</operator><operator pos:start="55:37" pos:end="55:37">(</operator><operator pos:start="55:38" pos:end="55:38">-</operator><name pos:start="55:39" pos:end="55:41">exp</name><operator pos:start="55:42" pos:end="55:42">-</operator><literal type="number" pos:start="55:43" pos:end="55:43">1</literal><operator pos:start="55:44" pos:end="55:44">)</operator><operator pos:start="55:45" pos:end="55:45">)</operator><operator pos:start="55:46" pos:end="55:46">)</operator> <operator pos:start="55:48" pos:end="55:49">&gt;&gt;</operator> <operator pos:start="55:51" pos:end="55:51">-</operator><name pos:start="55:52" pos:end="55:54">exp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:35"><expr pos:start="57:5" pos:end="57:34"><name pos:start="57:5" pos:end="57:20"><name pos:start="57:5" pos:end="57:7">par</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:20">sample_rate</name></name> <operator pos:start="57:22" pos:end="57:22">=</operator> <name pos:start="57:24" pos:end="57:34">sample_rate</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:15"><expr pos:start="59:5" pos:end="59:14"><name pos:start="59:5" pos:end="59:8">size</name> <operator pos:start="59:10" pos:end="59:11">-=</operator> <literal type="number" pos:start="59:13" pos:end="59:14">18</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:33">/* get codec id for AIFF-C */</comment>

    <if_stmt pos:start="65:5" pos:end="87:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:17">(<expr pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:12">size</name> <operator pos:start="65:14" pos:end="65:14">&lt;</operator> <literal type="number" pos:start="65:16" pos:end="65:16">4</literal></expr>)</condition> <block pos:start="65:19" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:23">

        <expr_stmt pos:start="67:9" pos:end="67:23"><expr pos:start="67:9" pos:end="67:22"><name pos:start="67:9" pos:end="67:15">version</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <name pos:start="67:19" pos:end="67:22">AIFF</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="69:7" pos:end="87:5">else if <condition pos:start="69:15" pos:end="69:42">(<expr pos:start="69:16" pos:end="69:41"><name pos:start="69:16" pos:end="69:22">version</name> <operator pos:start="69:24" pos:end="69:25">==</operator> <name pos:start="69:27" pos:end="69:41">AIFF_C_VERSION1</name></expr>)</condition> <block pos:start="69:44" pos:end="87:5">{<block_content pos:start="71:9" pos:end="85:18">

        <expr_stmt pos:start="71:9" pos:end="71:39"><expr pos:start="71:9" pos:end="71:38"><name pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:11">par</name><operator pos:start="71:12" pos:end="71:13">-&gt;</operator><name pos:start="71:14" pos:end="71:22">codec_tag</name></name> <operator pos:start="71:24" pos:end="71:24">=</operator> <call pos:start="71:26" pos:end="71:38"><name pos:start="71:26" pos:end="71:34">avio_rl32</name><argument_list pos:start="71:35" pos:end="71:38">(<argument pos:start="71:36" pos:end="71:37"><expr pos:start="71:36" pos:end="71:37"><name pos:start="71:36" pos:end="71:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:77"><expr pos:start="73:9" pos:end="73:76"><name pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:11">par</name><operator pos:start="73:12" pos:end="73:13">-&gt;</operator><name pos:start="73:14" pos:end="73:21">codec_id</name></name>  <operator pos:start="73:24" pos:end="73:24">=</operator> <call pos:start="73:26" pos:end="73:76"><name pos:start="73:26" pos:end="73:40">ff_codec_get_id</name><argument_list pos:start="73:41" pos:end="73:76">(<argument pos:start="73:42" pos:end="73:59"><expr pos:start="73:42" pos:end="73:59"><name pos:start="73:42" pos:end="73:59">ff_codec_aiff_tags</name></expr></argument>, <argument pos:start="73:62" pos:end="73:75"><expr pos:start="73:62" pos:end="73:75"><name pos:start="73:62" pos:end="73:75"><name pos:start="73:62" pos:end="73:64">par</name><operator pos:start="73:65" pos:end="73:66">-&gt;</operator><name pos:start="73:67" pos:end="73:75">codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="83:9"><if pos:start="75:9" pos:end="83:9">if <condition pos:start="75:12" pos:end="75:46">(<expr pos:start="75:13" pos:end="75:45"><name pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:15">par</name><operator pos:start="75:16" pos:end="75:17">-&gt;</operator><name pos:start="75:18" pos:end="75:25">codec_id</name></name> <operator pos:start="75:27" pos:end="75:28">==</operator> <name pos:start="75:30" pos:end="75:45">AV_CODEC_ID_NONE</name></expr>)</condition> <block pos:start="75:48" pos:end="83:9">{<block_content pos:start="77:13" pos:end="81:82">

            <decl_stmt pos:start="77:13" pos:end="77:25"><decl pos:start="77:13" pos:end="77:24"><type pos:start="77:13" pos:end="77:16"><name pos:start="77:13" pos:end="77:16">char</name></type> <name pos:start="77:18" pos:end="77:24"><name pos:start="77:18" pos:end="77:20">tag</name><index pos:start="77:21" pos:end="77:24">[<expr pos:start="77:22" pos:end="77:23"><literal type="number" pos:start="77:22" pos:end="77:23">32</literal></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:70"><expr pos:start="79:13" pos:end="79:69"><call pos:start="79:13" pos:end="79:69"><name pos:start="79:13" pos:end="79:35">av_get_codec_tag_string</name><argument_list pos:start="79:36" pos:end="79:69">(<argument pos:start="79:37" pos:end="79:39"><expr pos:start="79:37" pos:end="79:39"><name pos:start="79:37" pos:end="79:39">tag</name></expr></argument>, <argument pos:start="79:42" pos:end="79:52"><expr pos:start="79:42" pos:end="79:52"><sizeof pos:start="79:42" pos:end="79:52">sizeof<argument_list pos:start="79:48" pos:end="79:52">(<argument pos:start="79:49" pos:end="79:51"><expr pos:start="79:49" pos:end="79:51"><name pos:start="79:49" pos:end="79:51">tag</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="79:55" pos:end="79:68"><expr pos:start="79:55" pos:end="79:68"><name pos:start="79:55" pos:end="79:68"><name pos:start="79:55" pos:end="79:57">par</name><operator pos:start="79:58" pos:end="79:59">-&gt;</operator><name pos:start="79:60" pos:end="79:68">codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:82"><expr pos:start="81:13" pos:end="81:81"><call pos:start="81:13" pos:end="81:81"><name pos:start="81:13" pos:end="81:33">avpriv_request_sample</name><argument_list pos:start="81:34" pos:end="81:81">(<argument pos:start="81:35" pos:end="81:35"><expr pos:start="81:35" pos:end="81:35"><name pos:start="81:35" pos:end="81:35">s</name></expr></argument>, <argument pos:start="81:38" pos:end="81:75"><expr pos:start="81:38" pos:end="81:75"><literal type="string" pos:start="81:38" pos:end="81:75">"unknown or unsupported codec tag: %s"</literal></expr></argument>, <argument pos:start="81:78" pos:end="81:80"><expr pos:start="81:78" pos:end="81:80"><name pos:start="81:78" pos:end="81:80">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:18"><expr pos:start="85:9" pos:end="85:17"><name pos:start="85:9" pos:end="85:12">size</name> <operator pos:start="85:14" pos:end="85:15">-=</operator> <literal type="number" pos:start="85:17" pos:end="85:17">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="165:5"><if pos:start="91:5" pos:end="99:5">if <condition pos:start="91:8" pos:end="91:77">(<expr pos:start="91:9" pos:end="91:76"><name pos:start="91:9" pos:end="91:15">version</name> <operator pos:start="91:17" pos:end="91:18">!=</operator> <name pos:start="91:20" pos:end="91:34">AIFF_C_VERSION1</name> <operator pos:start="91:36" pos:end="91:37">||</operator> <name pos:start="91:39" pos:end="91:51"><name pos:start="91:39" pos:end="91:41">par</name><operator pos:start="91:42" pos:end="91:43">-&gt;</operator><name pos:start="91:44" pos:end="91:51">codec_id</name></name> <operator pos:start="91:53" pos:end="91:54">==</operator> <name pos:start="91:56" pos:end="91:76">AV_CODEC_ID_PCM_S16BE</name></expr>)</condition> <block pos:start="91:79" pos:end="99:5">{<block_content pos:start="93:9" pos:end="97:33">

        <expr_stmt pos:start="93:9" pos:end="93:70"><expr pos:start="93:9" pos:end="93:69"><name pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:11">par</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:21">codec_id</name></name> <operator pos:start="93:23" pos:end="93:23">=</operator> <call pos:start="93:25" pos:end="93:69"><name pos:start="93:25" pos:end="93:41">aiff_codec_get_id</name><argument_list pos:start="93:42" pos:end="93:69">(<argument pos:start="93:43" pos:end="93:68"><expr pos:start="93:43" pos:end="93:68"><name pos:start="93:43" pos:end="93:68"><name pos:start="93:43" pos:end="93:45">par</name><operator pos:start="93:46" pos:end="93:47">-&gt;</operator><name pos:start="93:48" pos:end="93:68">bits_per_coded_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:75"><expr pos:start="95:9" pos:end="95:74"><name pos:start="95:9" pos:end="95:34"><name pos:start="95:9" pos:end="95:11">par</name><operator pos:start="95:12" pos:end="95:13">-&gt;</operator><name pos:start="95:14" pos:end="95:34">bits_per_coded_sample</name></name> <operator pos:start="95:36" pos:end="95:36">=</operator> <call pos:start="95:38" pos:end="95:74"><name pos:start="95:38" pos:end="95:59">av_get_bits_per_sample</name><argument_list pos:start="95:60" pos:end="95:74">(<argument pos:start="95:61" pos:end="95:73"><expr pos:start="95:61" pos:end="95:73"><name pos:start="95:61" pos:end="95:73"><name pos:start="95:61" pos:end="95:63">par</name><operator pos:start="95:64" pos:end="95:65">-&gt;</operator><name pos:start="95:66" pos:end="95:73">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:33"><expr pos:start="97:9" pos:end="97:32"><name pos:start="97:9" pos:end="97:28"><name pos:start="97:9" pos:end="97:12">aiff</name><operator pos:start="97:13" pos:end="97:14">-&gt;</operator><name pos:start="97:15" pos:end="97:28">block_duration</name></name> <operator pos:start="97:30" pos:end="97:30">=</operator> <literal type="number" pos:start="97:32" pos:end="97:32">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="99:7" pos:end="165:5">else <block pos:start="99:12" pos:end="165:5">{<block_content pos:start="101:9" pos:end="163:82">

        <switch pos:start="101:9" pos:end="157:9">switch <condition pos:start="101:16" pos:end="101:30">(<expr pos:start="101:17" pos:end="101:29"><name pos:start="101:17" pos:end="101:29"><name pos:start="101:17" pos:end="101:19">par</name><operator pos:start="101:20" pos:end="101:21">-&gt;</operator><name pos:start="101:22" pos:end="101:29">codec_id</name></name></expr>)</condition> <block pos:start="101:32" pos:end="157:9">{<block_content pos:start="103:9" pos:end="155:18">

        <case pos:start="103:9" pos:end="103:35">case <expr pos:start="103:14" pos:end="103:34"><name pos:start="103:14" pos:end="103:34">AV_CODEC_ID_PCM_F32BE</name></expr>:</case>

        <case pos:start="105:9" pos:end="105:35">case <expr pos:start="105:14" pos:end="105:34"><name pos:start="105:14" pos:end="105:34">AV_CODEC_ID_PCM_F64BE</name></expr>:</case>

        <case pos:start="107:9" pos:end="107:35">case <expr pos:start="107:14" pos:end="107:34"><name pos:start="107:14" pos:end="107:34">AV_CODEC_ID_PCM_S16LE</name></expr>:</case>

        <case pos:start="109:9" pos:end="109:34">case <expr pos:start="109:14" pos:end="109:33"><name pos:start="109:14" pos:end="109:33">AV_CODEC_ID_PCM_ALAW</name></expr>:</case>

        <case pos:start="111:9" pos:end="111:35">case <expr pos:start="111:14" pos:end="111:34"><name pos:start="111:14" pos:end="111:34">AV_CODEC_ID_PCM_MULAW</name></expr>:</case>

            <expr_stmt pos:start="113:13" pos:end="113:37"><expr pos:start="113:13" pos:end="113:36"><name pos:start="113:13" pos:end="113:32"><name pos:start="113:13" pos:end="113:16">aiff</name><operator pos:start="113:17" pos:end="113:18">-&gt;</operator><name pos:start="113:19" pos:end="113:32">block_duration</name></name> <operator pos:start="113:34" pos:end="113:34">=</operator> <literal type="number" pos:start="113:36" pos:end="113:36">1</literal></expr>;</expr_stmt>

            <break pos:start="115:13" pos:end="115:18">break;</break>

        <case pos:start="117:9" pos:end="117:38">case <expr pos:start="117:14" pos:end="117:37"><name pos:start="117:14" pos:end="117:37">AV_CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>

            <expr_stmt pos:start="119:13" pos:end="119:50"><expr pos:start="119:13" pos:end="119:49"><name pos:start="119:13" pos:end="119:28"><name pos:start="119:13" pos:end="119:15">par</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:28">block_align</name></name> <operator pos:start="119:30" pos:end="119:30">=</operator> <literal type="number" pos:start="119:32" pos:end="119:33">34</literal> <operator pos:start="119:35" pos:end="119:35">*</operator> <name pos:start="119:37" pos:end="119:49"><name pos:start="119:37" pos:end="119:39">par</name><operator pos:start="119:40" pos:end="119:41">-&gt;</operator><name pos:start="119:42" pos:end="119:49">channels</name></name></expr>;</expr_stmt>

            <break pos:start="121:13" pos:end="121:18">break;</break>

        <case pos:start="123:9" pos:end="123:31">case <expr pos:start="123:14" pos:end="123:30"><name pos:start="123:14" pos:end="123:30">AV_CODEC_ID_MACE3</name></expr>:</case>

            <expr_stmt pos:start="125:13" pos:end="125:49"><expr pos:start="125:13" pos:end="125:48"><name pos:start="125:13" pos:end="125:28"><name pos:start="125:13" pos:end="125:15">par</name><operator pos:start="125:16" pos:end="125:17">-&gt;</operator><name pos:start="125:18" pos:end="125:28">block_align</name></name> <operator pos:start="125:30" pos:end="125:30">=</operator> <literal type="number" pos:start="125:32" pos:end="125:32">2</literal> <operator pos:start="125:34" pos:end="125:34">*</operator> <name pos:start="125:36" pos:end="125:48"><name pos:start="125:36" pos:end="125:38">par</name><operator pos:start="125:39" pos:end="125:40">-&gt;</operator><name pos:start="125:41" pos:end="125:48">channels</name></name></expr>;</expr_stmt>

            <break pos:start="127:13" pos:end="127:18">break;</break>

        <case pos:start="129:9" pos:end="129:38">case <expr pos:start="129:14" pos:end="129:37"><name pos:start="129:14" pos:end="129:37">AV_CODEC_ID_ADPCM_G726LE</name></expr>:</case>

            <expr_stmt pos:start="131:13" pos:end="131:43"><expr pos:start="131:13" pos:end="131:42"><name pos:start="131:13" pos:end="131:38"><name pos:start="131:13" pos:end="131:15">par</name><operator pos:start="131:16" pos:end="131:17">-&gt;</operator><name pos:start="131:18" pos:end="131:38">bits_per_coded_sample</name></name> <operator pos:start="131:40" pos:end="131:40">=</operator> <literal type="number" pos:start="131:42" pos:end="131:42">5</literal></expr>;</expr_stmt>

        <case pos:start="133:9" pos:end="133:38">case <expr pos:start="133:14" pos:end="133:37"><name pos:start="133:14" pos:end="133:37">AV_CODEC_ID_ADPCM_IMA_WS</name></expr>:</case>

        <case pos:start="135:9" pos:end="135:36">case <expr pos:start="135:14" pos:end="135:35"><name pos:start="135:14" pos:end="135:35">AV_CODEC_ID_ADPCM_G722</name></expr>:</case>

        <case pos:start="137:9" pos:end="137:31">case <expr pos:start="137:14" pos:end="137:30"><name pos:start="137:14" pos:end="137:30">AV_CODEC_ID_MACE6</name></expr>:</case>

        <case pos:start="139:9" pos:end="139:35">case <expr pos:start="139:14" pos:end="139:34"><name pos:start="139:14" pos:end="139:34">AV_CODEC_ID_SDX2_DPCM</name></expr>:</case>

            <expr_stmt pos:start="141:13" pos:end="141:49"><expr pos:start="141:13" pos:end="141:48"><name pos:start="141:13" pos:end="141:28"><name pos:start="141:13" pos:end="141:15">par</name><operator pos:start="141:16" pos:end="141:17">-&gt;</operator><name pos:start="141:18" pos:end="141:28">block_align</name></name> <operator pos:start="141:30" pos:end="141:30">=</operator> <literal type="number" pos:start="141:32" pos:end="141:32">1</literal> <operator pos:start="141:34" pos:end="141:34">*</operator> <name pos:start="141:36" pos:end="141:48"><name pos:start="141:36" pos:end="141:38">par</name><operator pos:start="141:39" pos:end="141:40">-&gt;</operator><name pos:start="141:41" pos:end="141:48">channels</name></name></expr>;</expr_stmt>

            <break pos:start="143:13" pos:end="143:18">break;</break>

        <case pos:start="145:9" pos:end="145:29">case <expr pos:start="145:14" pos:end="145:28"><name pos:start="145:14" pos:end="145:28">AV_CODEC_ID_GSM</name></expr>:</case>

            <expr_stmt pos:start="147:13" pos:end="147:34"><expr pos:start="147:13" pos:end="147:33"><name pos:start="147:13" pos:end="147:28"><name pos:start="147:13" pos:end="147:15">par</name><operator pos:start="147:16" pos:end="147:17">-&gt;</operator><name pos:start="147:18" pos:end="147:28">block_align</name></name> <operator pos:start="147:30" pos:end="147:30">=</operator> <literal type="number" pos:start="147:32" pos:end="147:33">33</literal></expr>;</expr_stmt>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        <default pos:start="151:9" pos:end="151:16">default:</default>

            <expr_stmt pos:start="153:13" pos:end="153:37"><expr pos:start="153:13" pos:end="153:36"><name pos:start="153:13" pos:end="153:32"><name pos:start="153:13" pos:end="153:16">aiff</name><operator pos:start="153:17" pos:end="153:18">-&gt;</operator><name pos:start="153:19" pos:end="153:32">block_duration</name></name> <operator pos:start="153:34" pos:end="153:34">=</operator> <literal type="number" pos:start="153:36" pos:end="153:36">1</literal></expr>;</expr_stmt>

            <break pos:start="155:13" pos:end="155:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="159:9" pos:end="163:82"><if pos:start="159:9" pos:end="163:82">if <condition pos:start="159:12" pos:end="159:33">(<expr pos:start="159:13" pos:end="159:32"><name pos:start="159:13" pos:end="159:28"><name pos:start="159:13" pos:end="159:15">par</name><operator pos:start="159:16" pos:end="159:17">-&gt;</operator><name pos:start="159:18" pos:end="159:28">block_align</name></name> <operator pos:start="159:30" pos:end="159:30">&gt;</operator> <literal type="number" pos:start="159:32" pos:end="159:32">0</literal></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="163:82"><block_content pos:start="161:13" pos:end="163:82">

            <expr_stmt pos:start="161:13" pos:end="163:82"><expr pos:start="161:13" pos:end="163:81"><name pos:start="161:13" pos:end="161:32"><name pos:start="161:13" pos:end="161:16">aiff</name><operator pos:start="161:17" pos:end="161:18">-&gt;</operator><name pos:start="161:19" pos:end="161:32">block_duration</name></name> <operator pos:start="161:34" pos:end="161:34">=</operator> <call pos:start="161:36" pos:end="163:81"><name pos:start="161:36" pos:end="161:63">av_get_audio_frame_duration2</name><argument_list pos:start="161:64" pos:end="163:81">(<argument pos:start="161:65" pos:end="161:67"><expr pos:start="161:65" pos:end="161:67"><name pos:start="161:65" pos:end="161:67">par</name></expr></argument>,

                                                                <argument pos:start="163:65" pos:end="163:80"><expr pos:start="163:65" pos:end="163:80"><name pos:start="163:65" pos:end="163:80"><name pos:start="163:65" pos:end="163:67">par</name><operator pos:start="163:68" pos:end="163:69">-&gt;</operator><name pos:start="163:70" pos:end="163:80">block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="169:5" pos:end="171:79">/* Block align needs to be computed in all cases, as the definition

     * is specific to applications -&gt; here we use the WAVE format definition */</comment>

    <if_stmt pos:start="173:5" pos:end="175:88"><if pos:start="173:5" pos:end="175:88">if <condition pos:start="173:8" pos:end="173:26">(<expr pos:start="173:9" pos:end="173:25"><operator pos:start="173:9" pos:end="173:9">!</operator><name pos:start="173:10" pos:end="173:25"><name pos:start="173:10" pos:end="173:12">par</name><operator pos:start="173:13" pos:end="173:14">-&gt;</operator><name pos:start="173:15" pos:end="173:25">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="175:9" pos:end="175:88"><block_content pos:start="175:9" pos:end="175:88">

        <expr_stmt pos:start="175:9" pos:end="175:88"><expr pos:start="175:9" pos:end="175:87"><name pos:start="175:9" pos:end="175:24"><name pos:start="175:9" pos:end="175:11">par</name><operator pos:start="175:12" pos:end="175:13">-&gt;</operator><name pos:start="175:14" pos:end="175:24">block_align</name></name> <operator pos:start="175:26" pos:end="175:26">=</operator> <operator pos:start="175:28" pos:end="175:28">(</operator><call pos:start="175:29" pos:end="175:65"><name pos:start="175:29" pos:end="175:50">av_get_bits_per_sample</name><argument_list pos:start="175:51" pos:end="175:65">(<argument pos:start="175:52" pos:end="175:64"><expr pos:start="175:52" pos:end="175:64"><name pos:start="175:52" pos:end="175:64"><name pos:start="175:52" pos:end="175:54">par</name><operator pos:start="175:55" pos:end="175:56">-&gt;</operator><name pos:start="175:57" pos:end="175:64">codec_id</name></name></expr></argument>)</argument_list></call> <operator pos:start="175:67" pos:end="175:67">*</operator> <name pos:start="175:69" pos:end="175:81"><name pos:start="175:69" pos:end="175:71">par</name><operator pos:start="175:72" pos:end="175:73">-&gt;</operator><name pos:start="175:74" pos:end="175:81">channels</name></name><operator pos:start="175:82" pos:end="175:82">)</operator> <operator pos:start="175:84" pos:end="175:85">&gt;&gt;</operator> <literal type="number" pos:start="175:87" pos:end="175:87">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="179:5" pos:end="185:5"><if pos:start="179:5" pos:end="185:5">if <condition pos:start="179:8" pos:end="179:29">(<expr pos:start="179:9" pos:end="179:28"><name pos:start="179:9" pos:end="179:28"><name pos:start="179:9" pos:end="179:12">aiff</name><operator pos:start="179:13" pos:end="179:14">-&gt;</operator><name pos:start="179:15" pos:end="179:28">block_duration</name></name></expr>)</condition> <block pos:start="179:31" pos:end="185:5">{<block_content pos:start="181:9" pos:end="183:45">

        <expr_stmt pos:start="181:9" pos:end="183:45"><expr pos:start="181:9" pos:end="183:44"><name pos:start="181:9" pos:end="181:21"><name pos:start="181:9" pos:end="181:11">par</name><operator pos:start="181:12" pos:end="181:13">-&gt;</operator><name pos:start="181:14" pos:end="181:21">bit_rate</name></name> <operator pos:start="181:23" pos:end="181:23">=</operator> <name pos:start="181:25" pos:end="181:40"><name pos:start="181:25" pos:end="181:27">par</name><operator pos:start="181:28" pos:end="181:29">-&gt;</operator><name pos:start="181:30" pos:end="181:40">sample_rate</name></name> <operator pos:start="181:42" pos:end="181:42">*</operator> <operator pos:start="181:44" pos:end="181:44">(</operator><name pos:start="181:45" pos:end="181:60"><name pos:start="181:45" pos:end="181:47">par</name><operator pos:start="181:48" pos:end="181:49">-&gt;</operator><name pos:start="181:50" pos:end="181:60">block_align</name></name> <operator pos:start="181:62" pos:end="181:63">&lt;&lt;</operator> <literal type="number" pos:start="181:65" pos:end="181:65">3</literal><operator pos:start="181:66" pos:end="181:66">)</operator> <operator pos:start="181:68" pos:end="181:68">/</operator>

                        <name pos:start="183:25" pos:end="183:44"><name pos:start="183:25" pos:end="183:28">aiff</name><operator pos:start="183:29" pos:end="183:30">-&gt;</operator><name pos:start="183:31" pos:end="183:44">block_duration</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="189:5" pos:end="189:23">/* Chunk is over */</comment>

    <if_stmt pos:start="191:5" pos:end="193:28"><if pos:start="191:5" pos:end="193:28">if <condition pos:start="191:8" pos:end="191:13">(<expr pos:start="191:9" pos:end="191:12"><name pos:start="191:9" pos:end="191:12">size</name></expr>)</condition><block type="pseudo" pos:start="193:9" pos:end="193:28"><block_content pos:start="193:9" pos:end="193:28">

        <expr_stmt pos:start="193:9" pos:end="193:28"><expr pos:start="193:9" pos:end="193:27"><call pos:start="193:9" pos:end="193:27"><name pos:start="193:9" pos:end="193:17">avio_skip</name><argument_list pos:start="193:18" pos:end="193:27">(<argument pos:start="193:19" pos:end="193:20"><expr pos:start="193:19" pos:end="193:20"><name pos:start="193:19" pos:end="193:20">pb</name></expr></argument>, <argument pos:start="193:23" pos:end="193:26"><expr pos:start="193:23" pos:end="193:26"><name pos:start="193:23" pos:end="193:26">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="197:5" pos:end="197:22">return <expr pos:start="197:12" pos:end="197:21"><name pos:start="197:12" pos:end="197:21">num_frames</name></expr>;</return>

</block_content>}</block></function>
</unit>
