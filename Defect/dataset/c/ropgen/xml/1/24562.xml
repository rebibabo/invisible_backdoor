<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24562.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">omap_i2c_recv</name><parameter_list pos:start="1:26" pos:end="3:53">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:36">I2CAdapter</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">i2c</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:50">uint8_t</name></type> <name pos:start="1:52" pos:end="1:55">addr</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:38"><decl pos:start="3:27" pos:end="3:38"><type pos:start="3:27" pos:end="3:38"><name pos:start="3:27" pos:end="3:33">uint8_t</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:38">buf</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:52"><decl pos:start="3:41" pos:end="3:52"><type pos:start="3:41" pos:end="3:52"><name pos:start="3:41" pos:end="3:48">uint16_t</name></type> <name pos:start="3:50" pos:end="3:52">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="93:1">{<block_content pos:start="7:5" pos:end="91:45">

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">OMAPI2C</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:14">s</name> <init pos:start="7:16" pos:end="7:31">= <expr pos:start="7:18" pos:end="7:31"><operator pos:start="7:18" pos:end="7:18">(</operator><name pos:start="7:19" pos:end="7:25">OMAPI2C</name> <operator pos:start="7:27" pos:end="7:27">*</operator><operator pos:start="7:28" pos:end="7:28">)</operator><name pos:start="7:29" pos:end="7:31">i2c</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint16_t</name></type> <name pos:start="9:14" pos:end="9:17">data</name></decl>, <decl pos:start="9:20" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:20" pos:end="9:23">stat</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:37"><expr pos:start="13:5" pos:end="13:36"><call pos:start="13:5" pos:end="13:36"><name pos:start="13:5" pos:end="13:27">omap_i2c_set_slave_addr</name><argument_list pos:start="13:28" pos:end="13:36">(<argument pos:start="13:29" pos:end="13:29"><expr pos:start="13:29" pos:end="13:29"><name pos:start="13:29" pos:end="13:29">s</name></expr></argument>, <argument pos:start="13:32" pos:end="13:35"><expr pos:start="13:32" pos:end="13:35"><name pos:start="13:32" pos:end="13:35">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:15"><expr pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:8">data</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <name pos:start="17:12" pos:end="17:14">len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:47"><expr pos:start="19:5" pos:end="19:46"><call pos:start="19:5" pos:end="19:46"><name pos:start="19:5" pos:end="19:12">memwrite</name><argument_list pos:start="19:13" pos:end="19:46">(<argument pos:start="19:14" pos:end="19:35"><expr pos:start="19:14" pos:end="19:35"><name pos:start="19:14" pos:end="19:20"><name pos:start="19:14" pos:end="19:14">s</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:20">addr</name></name> <operator pos:start="19:22" pos:end="19:22">+</operator> <name pos:start="19:24" pos:end="19:35">OMAP_I2C_CNT</name></expr></argument>, <argument pos:start="19:38" pos:end="19:42"><expr pos:start="19:38" pos:end="19:42"><operator pos:start="19:38" pos:end="19:38">&amp;</operator><name pos:start="19:39" pos:end="19:42">data</name></expr></argument>, <argument pos:start="19:45" pos:end="19:45"><expr pos:start="19:45" pos:end="19:45"><literal type="number" pos:start="19:45" pos:end="19:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="29:28"><expr pos:start="23:5" pos:end="29:27"><name pos:start="23:5" pos:end="23:8">data</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <name pos:start="23:12" pos:end="23:30">OMAP_I2C_CON_I2C_EN</name> <operator pos:start="23:32" pos:end="23:32">|</operator>

           <name pos:start="25:12" pos:end="25:27">OMAP_I2C_CON_MST</name> <operator pos:start="25:29" pos:end="25:29">|</operator>

           <name pos:start="27:12" pos:end="27:27">OMAP_I2C_CON_STT</name> <operator pos:start="27:29" pos:end="27:29">|</operator>

           <name pos:start="29:12" pos:end="29:27">OMAP_I2C_CON_STP</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:47"><expr pos:start="31:5" pos:end="31:46"><call pos:start="31:5" pos:end="31:46"><name pos:start="31:5" pos:end="31:12">memwrite</name><argument_list pos:start="31:13" pos:end="31:46">(<argument pos:start="31:14" pos:end="31:35"><expr pos:start="31:14" pos:end="31:35"><name pos:start="31:14" pos:end="31:20"><name pos:start="31:14" pos:end="31:14">s</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:20">addr</name></name> <operator pos:start="31:22" pos:end="31:22">+</operator> <name pos:start="31:24" pos:end="31:35">OMAP_I2C_CON</name></expr></argument>, <argument pos:start="31:38" pos:end="31:42"><expr pos:start="31:38" pos:end="31:42"><operator pos:start="31:38" pos:end="31:38">&amp;</operator><name pos:start="31:39" pos:end="31:42">data</name></expr></argument>, <argument pos:start="31:45" pos:end="31:45"><expr pos:start="31:45" pos:end="31:45"><literal type="number" pos:start="31:45" pos:end="31:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:46"><expr pos:start="33:5" pos:end="33:45"><call pos:start="33:5" pos:end="33:45"><name pos:start="33:5" pos:end="33:11">memread</name><argument_list pos:start="33:12" pos:end="33:45">(<argument pos:start="33:13" pos:end="33:34"><expr pos:start="33:13" pos:end="33:34"><name pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:19">addr</name></name> <operator pos:start="33:21" pos:end="33:21">+</operator> <name pos:start="33:23" pos:end="33:34">OMAP_I2C_CON</name></expr></argument>, <argument pos:start="33:37" pos:end="33:41"><expr pos:start="33:37" pos:end="33:41"><operator pos:start="33:37" pos:end="33:37">&amp;</operator><name pos:start="33:38" pos:end="33:41">data</name></expr></argument>, <argument pos:start="33:44" pos:end="33:44"><expr pos:start="33:44" pos:end="33:44"><literal type="number" pos:start="33:44" pos:end="33:44">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:45"><expr pos:start="35:5" pos:end="35:44"><call pos:start="35:5" pos:end="35:44"><name pos:start="35:5" pos:end="35:12">g_assert</name><argument_list pos:start="35:13" pos:end="35:44">(<argument pos:start="35:14" pos:end="35:43"><expr pos:start="35:14" pos:end="35:43"><operator pos:start="35:14" pos:end="35:14">(</operator><name pos:start="35:15" pos:end="35:18">data</name> <operator pos:start="35:20" pos:end="35:20">&amp;</operator> <name pos:start="35:22" pos:end="35:37">OMAP_I2C_CON_STP</name><operator pos:start="35:38" pos:end="35:38">)</operator> <operator pos:start="35:40" pos:end="35:41">==</operator> <literal type="number" pos:start="35:43" pos:end="35:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:47"><expr pos:start="39:5" pos:end="39:46"><call pos:start="39:5" pos:end="39:46"><name pos:start="39:5" pos:end="39:11">memread</name><argument_list pos:start="39:12" pos:end="39:46">(<argument pos:start="39:13" pos:end="39:35"><expr pos:start="39:13" pos:end="39:35"><name pos:start="39:13" pos:end="39:19"><name pos:start="39:13" pos:end="39:13">s</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:19">addr</name></name> <operator pos:start="39:21" pos:end="39:21">+</operator> <name pos:start="39:23" pos:end="39:35">OMAP_I2C_STAT</name></expr></argument>, <argument pos:start="39:38" pos:end="39:42"><expr pos:start="39:38" pos:end="39:42"><operator pos:start="39:38" pos:end="39:38">&amp;</operator><name pos:start="39:39" pos:end="39:42">data</name></expr></argument>, <argument pos:start="39:45" pos:end="39:45"><expr pos:start="39:45" pos:end="39:45"><literal type="number" pos:start="39:45" pos:end="39:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:47"><expr pos:start="41:5" pos:end="41:46"><call pos:start="41:5" pos:end="41:46"><name pos:start="41:5" pos:end="41:12">g_assert</name><argument_list pos:start="41:13" pos:end="41:46">(<argument pos:start="41:14" pos:end="41:45"><expr pos:start="41:14" pos:end="41:45"><operator pos:start="41:14" pos:end="41:14">(</operator><name pos:start="41:15" pos:end="41:18">data</name> <operator pos:start="41:20" pos:end="41:20">&amp;</operator> <name pos:start="41:22" pos:end="41:39">OMAP_I2C_STAT_NACK</name><operator pos:start="41:40" pos:end="41:40">)</operator> <operator pos:start="41:42" pos:end="41:43">==</operator> <literal type="number" pos:start="41:45" pos:end="41:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:46"><expr pos:start="45:5" pos:end="45:45"><call pos:start="45:5" pos:end="45:45"><name pos:start="45:5" pos:end="45:11">memread</name><argument_list pos:start="45:12" pos:end="45:45">(<argument pos:start="45:13" pos:end="45:34"><expr pos:start="45:13" pos:end="45:34"><name pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:19">addr</name></name> <operator pos:start="45:21" pos:end="45:21">+</operator> <name pos:start="45:23" pos:end="45:34">OMAP_I2C_CNT</name></expr></argument>, <argument pos:start="45:37" pos:end="45:41"><expr pos:start="45:37" pos:end="45:41"><operator pos:start="45:37" pos:end="45:37">&amp;</operator><name pos:start="45:38" pos:end="45:41">data</name></expr></argument>, <argument pos:start="45:44" pos:end="45:44"><expr pos:start="45:44" pos:end="45:44"><literal type="number" pos:start="45:44" pos:end="45:44">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:36"><expr pos:start="47:5" pos:end="47:35"><call pos:start="47:5" pos:end="47:35"><name pos:start="47:5" pos:end="47:20">g_assert_cmpuint</name><argument_list pos:start="47:21" pos:end="47:35">(<argument pos:start="47:22" pos:end="47:25"><expr pos:start="47:22" pos:end="47:25"><name pos:start="47:22" pos:end="47:25">data</name></expr></argument>, <argument pos:start="47:28" pos:end="47:29"><expr pos:start="47:28" pos:end="47:29"><operator pos:start="47:28" pos:end="47:29">==</operator></expr></argument>, <argument pos:start="47:32" pos:end="47:34"><expr pos:start="47:32" pos:end="47:34"><name pos:start="47:32" pos:end="47:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="51:5" pos:end="85:5">while <condition pos:start="51:11" pos:end="51:19">(<expr pos:start="51:12" pos:end="51:18"><name pos:start="51:12" pos:end="51:14">len</name> <operator pos:start="51:16" pos:end="51:16">&gt;</operator> <literal type="number" pos:start="51:18" pos:end="51:18">0</literal></expr>)</condition> <block pos:start="51:21" pos:end="85:5">{<block_content pos:start="53:9" pos:end="83:9">

        <expr_stmt pos:start="53:9" pos:end="53:51"><expr pos:start="53:9" pos:end="53:50"><call pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:15">memread</name><argument_list pos:start="53:16" pos:end="53:50">(<argument pos:start="53:17" pos:end="53:39"><expr pos:start="53:17" pos:end="53:39"><name pos:start="53:17" pos:end="53:23"><name pos:start="53:17" pos:end="53:17">s</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:23">addr</name></name> <operator pos:start="53:25" pos:end="53:25">+</operator> <name pos:start="53:27" pos:end="53:39">OMAP_I2C_STAT</name></expr></argument>, <argument pos:start="53:42" pos:end="53:46"><expr pos:start="53:42" pos:end="53:46"><operator pos:start="53:42" pos:end="53:42">&amp;</operator><name pos:start="53:43" pos:end="53:46">data</name></expr></argument>, <argument pos:start="53:49" pos:end="53:49"><expr pos:start="53:49" pos:end="53:49"><literal type="number" pos:start="53:49" pos:end="53:49">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:51"><expr pos:start="55:9" pos:end="55:50"><call pos:start="55:9" pos:end="55:50"><name pos:start="55:9" pos:end="55:16">g_assert</name><argument_list pos:start="55:17" pos:end="55:50">(<argument pos:start="55:18" pos:end="55:49"><expr pos:start="55:18" pos:end="55:49"><operator pos:start="55:18" pos:end="55:18">(</operator><name pos:start="55:19" pos:end="55:22">data</name> <operator pos:start="55:24" pos:end="55:24">&amp;</operator> <name pos:start="55:26" pos:end="55:43">OMAP_I2C_STAT_RRDY</name><operator pos:start="55:44" pos:end="55:44">)</operator> <operator pos:start="55:46" pos:end="55:47">!=</operator> <literal type="number" pos:start="55:49" pos:end="55:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:51"><expr pos:start="57:9" pos:end="57:50"><call pos:start="57:9" pos:end="57:50"><name pos:start="57:9" pos:end="57:16">g_assert</name><argument_list pos:start="57:17" pos:end="57:50">(<argument pos:start="57:18" pos:end="57:49"><expr pos:start="57:18" pos:end="57:49"><operator pos:start="57:18" pos:end="57:18">(</operator><name pos:start="57:19" pos:end="57:22">data</name> <operator pos:start="57:24" pos:end="57:24">&amp;</operator> <name pos:start="57:26" pos:end="57:43">OMAP_I2C_STAT_ROVR</name><operator pos:start="57:44" pos:end="57:44">)</operator> <operator pos:start="57:46" pos:end="57:47">==</operator> <literal type="number" pos:start="57:49" pos:end="57:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:51"><expr pos:start="61:9" pos:end="61:50"><call pos:start="61:9" pos:end="61:50"><name pos:start="61:9" pos:end="61:15">memread</name><argument_list pos:start="61:16" pos:end="61:50">(<argument pos:start="61:17" pos:end="61:39"><expr pos:start="61:17" pos:end="61:39"><name pos:start="61:17" pos:end="61:23"><name pos:start="61:17" pos:end="61:17">s</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:23">addr</name></name> <operator pos:start="61:25" pos:end="61:25">+</operator> <name pos:start="61:27" pos:end="61:39">OMAP_I2C_DATA</name></expr></argument>, <argument pos:start="61:42" pos:end="61:46"><expr pos:start="61:42" pos:end="61:46"><operator pos:start="61:42" pos:end="61:42">&amp;</operator><name pos:start="61:43" pos:end="61:46">data</name></expr></argument>, <argument pos:start="61:49" pos:end="61:49"><expr pos:start="61:49" pos:end="61:49"><literal type="number" pos:start="61:49" pos:end="61:49">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:51"><expr pos:start="65:9" pos:end="65:50"><call pos:start="65:9" pos:end="65:50"><name pos:start="65:9" pos:end="65:15">memread</name><argument_list pos:start="65:16" pos:end="65:50">(<argument pos:start="65:17" pos:end="65:39"><expr pos:start="65:17" pos:end="65:39"><name pos:start="65:17" pos:end="65:23"><name pos:start="65:17" pos:end="65:17">s</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:23">addr</name></name> <operator pos:start="65:25" pos:end="65:25">+</operator> <name pos:start="65:27" pos:end="65:39">OMAP_I2C_STAT</name></expr></argument>, <argument pos:start="65:42" pos:end="65:46"><expr pos:start="65:42" pos:end="65:46"><operator pos:start="65:42" pos:end="65:42">&amp;</operator><name pos:start="65:43" pos:end="65:46">stat</name></expr></argument>, <argument pos:start="65:49" pos:end="65:49"><expr pos:start="65:49" pos:end="65:49"><literal type="number" pos:start="65:49" pos:end="65:49">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="83:9"><if pos:start="67:9" pos:end="75:9">if <condition pos:start="67:12" pos:end="67:31">(<expr pos:start="67:13" pos:end="67:30"><call pos:start="67:13" pos:end="67:30"><name pos:start="67:13" pos:end="67:20">unlikely</name><argument_list pos:start="67:21" pos:end="67:30">(<argument pos:start="67:22" pos:end="67:29"><expr pos:start="67:22" pos:end="67:29"><name pos:start="67:22" pos:end="67:24">len</name> <operator pos:start="67:26" pos:end="67:27">==</operator> <literal type="number" pos:start="67:29" pos:end="67:29">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:33" pos:end="75:9">{<block_content pos:start="69:13" pos:end="73:18">

            <expr_stmt pos:start="69:13" pos:end="69:30"><expr pos:start="69:13" pos:end="69:29"><operator pos:start="69:13" pos:end="69:13">*</operator><name pos:start="69:14" pos:end="69:16">buf</name> <operator pos:start="69:18" pos:end="69:18">=</operator> <name pos:start="69:20" pos:end="69:23">data</name> <operator pos:start="69:25" pos:end="69:25">&amp;</operator> <literal type="number" pos:start="69:27" pos:end="69:29">0xf</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:18"><expr pos:start="71:13" pos:end="71:17"><name pos:start="71:13" pos:end="71:15">buf</name><operator pos:start="71:16" pos:end="71:17">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:18"><expr pos:start="73:13" pos:end="73:17"><name pos:start="73:13" pos:end="73:15">len</name><operator pos:start="73:16" pos:end="73:17">--</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="75:11" pos:end="83:9">else <block pos:start="75:16" pos:end="83:9">{<block_content pos:start="77:13" pos:end="81:21">

            <expr_stmt pos:start="77:13" pos:end="77:34"><expr pos:start="77:13" pos:end="77:33"><call pos:start="77:13" pos:end="77:33"><name pos:start="77:13" pos:end="77:18">memcpy</name><argument_list pos:start="77:19" pos:end="77:33">(<argument pos:start="77:20" pos:end="77:22"><expr pos:start="77:20" pos:end="77:22"><name pos:start="77:20" pos:end="77:22">buf</name></expr></argument>, <argument pos:start="77:25" pos:end="77:29"><expr pos:start="77:25" pos:end="77:29"><operator pos:start="77:25" pos:end="77:25">&amp;</operator><name pos:start="77:26" pos:end="77:29">data</name></expr></argument>, <argument pos:start="77:32" pos:end="77:32"><expr pos:start="77:32" pos:end="77:32"><literal type="number" pos:start="77:32" pos:end="77:32">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:21"><expr pos:start="79:13" pos:end="79:20"><name pos:start="79:13" pos:end="79:15">buf</name> <operator pos:start="79:17" pos:end="79:18">+=</operator> <literal type="number" pos:start="79:20" pos:end="79:20">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:21"><expr pos:start="81:13" pos:end="81:20"><name pos:start="81:13" pos:end="81:15">len</name> <operator pos:start="81:17" pos:end="81:18">-=</operator> <literal type="number" pos:start="81:20" pos:end="81:20">2</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="89:5" pos:end="89:46"><expr pos:start="89:5" pos:end="89:45"><call pos:start="89:5" pos:end="89:45"><name pos:start="89:5" pos:end="89:11">memread</name><argument_list pos:start="89:12" pos:end="89:45">(<argument pos:start="89:13" pos:end="89:34"><expr pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:19"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:19">addr</name></name> <operator pos:start="89:21" pos:end="89:21">+</operator> <name pos:start="89:23" pos:end="89:34">OMAP_I2C_CON</name></expr></argument>, <argument pos:start="89:37" pos:end="89:41"><expr pos:start="89:37" pos:end="89:41"><operator pos:start="89:37" pos:end="89:37">&amp;</operator><name pos:start="89:38" pos:end="89:41">data</name></expr></argument>, <argument pos:start="89:44" pos:end="89:44"><expr pos:start="89:44" pos:end="89:44"><literal type="number" pos:start="89:44" pos:end="89:44">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:45"><expr pos:start="91:5" pos:end="91:44"><call pos:start="91:5" pos:end="91:44"><name pos:start="91:5" pos:end="91:12">g_assert</name><argument_list pos:start="91:13" pos:end="91:44">(<argument pos:start="91:14" pos:end="91:43"><expr pos:start="91:14" pos:end="91:43"><operator pos:start="91:14" pos:end="91:14">(</operator><name pos:start="91:15" pos:end="91:18">data</name> <operator pos:start="91:20" pos:end="91:20">&amp;</operator> <name pos:start="91:22" pos:end="91:37">OMAP_I2C_CON_STP</name><operator pos:start="91:38" pos:end="91:38">)</operator> <operator pos:start="91:40" pos:end="91:41">==</operator> <literal type="number" pos:start="91:43" pos:end="91:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
