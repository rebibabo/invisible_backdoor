<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/333.c" pos:tabs="8"><function pos:start="1:1" pos:end="459:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">decode_subframe</name><parameter_list pos:start="1:27" pos:end="1:46">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:42">WMAProDecodeCtx</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="459:1">{<block_content pos:start="5:5" pos:end="457:13">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:14">offset</name> <init pos:start="5:16" pos:end="5:37">= <expr pos:start="5:18" pos:end="5:37"><name pos:start="5:18" pos:end="5:37"><name pos:start="5:18" pos:end="5:18">s</name><operator pos:start="5:19" pos:end="5:20">-&gt;</operator><name pos:start="5:21" pos:end="5:37">samples_per_frame</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:20">subframe_len</name> <init pos:start="7:22" pos:end="7:43">= <expr pos:start="7:24" pos:end="7:43"><name pos:start="7:24" pos:end="7:43"><name pos:start="7:24" pos:end="7:24">s</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:43">samples_per_frame</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:68"><decl pos:start="11:5" pos:end="11:67"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:21">total_samples</name>   <init pos:start="11:25" pos:end="11:67">= <expr pos:start="11:27" pos:end="11:67"><name pos:start="11:27" pos:end="11:46"><name pos:start="11:27" pos:end="11:27">s</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:46">samples_per_frame</name></name> <operator pos:start="11:48" pos:end="11:48">*</operator> <name pos:start="11:50" pos:end="11:67"><name pos:start="11:50" pos:end="11:50">s</name><operator pos:start="11:51" pos:end="11:52">-&gt;</operator><name pos:start="11:53" pos:end="11:57">avctx</name><operator pos:start="11:58" pos:end="11:59">-&gt;</operator><name pos:start="11:60" pos:end="11:67">channels</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:23">transmit_coeffs</name> <init pos:start="13:25" pos:end="13:27">= <expr pos:start="13:27" pos:end="13:27"><literal type="number" pos:start="13:27" pos:end="13:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:28">cur_subwoofer_cutoff</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:48"><expr pos:start="19:5" pos:end="19:47"><name pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:22">subframe_offset</name></name> <operator pos:start="19:24" pos:end="19:24">=</operator> <call pos:start="19:26" pos:end="19:47"><name pos:start="19:26" pos:end="19:39">get_bits_count</name><argument_list pos:start="19:40" pos:end="19:47">(<argument pos:start="19:41" pos:end="19:46"><expr pos:start="19:41" pos:end="19:46"><operator pos:start="19:41" pos:end="19:41">&amp;</operator><name pos:start="19:42" pos:end="19:46"><name pos:start="19:42" pos:end="19:42">s</name><operator pos:start="19:43" pos:end="19:44">-&gt;</operator><name pos:start="19:45" pos:end="19:46">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="23:5" pos:end="29:6">/** reset channel context and find the next block offset and size

        == the next block of the channel with the smallest number of

        decoded samples

    */</comment>

    <for pos:start="31:5" pos:end="45:5">for <control pos:start="31:9" pos:end="31:44">(<init pos:start="31:10" pos:end="31:15"><expr pos:start="31:10" pos:end="31:14"><name pos:start="31:10" pos:end="31:10">i</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>;</init> <condition pos:start="31:17" pos:end="31:39"><expr pos:start="31:17" pos:end="31:38"><name pos:start="31:17" pos:end="31:17">i</name> <operator pos:start="31:19" pos:end="31:19">&lt;</operator> <name pos:start="31:21" pos:end="31:38"><name pos:start="31:21" pos:end="31:21">s</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:28">avctx</name><operator pos:start="31:29" pos:end="31:30">-&gt;</operator><name pos:start="31:31" pos:end="31:38">channels</name></name></expr>;</condition> <incr pos:start="31:41" pos:end="31:43"><expr pos:start="31:41" pos:end="31:43"><name pos:start="31:41" pos:end="31:41">i</name><operator pos:start="31:42" pos:end="31:43">++</operator></expr></incr>)</control> <block pos:start="31:46" pos:end="45:5">{<block_content pos:start="33:9" pos:end="43:9">

        <expr_stmt pos:start="33:9" pos:end="33:34"><expr pos:start="33:9" pos:end="33:33"><name pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:18">channel</name><index pos:start="33:19" pos:end="33:21">[<expr pos:start="33:20" pos:end="33:20"><name pos:start="33:20" pos:end="33:20">i</name></expr>]</index></name><operator pos:start="33:22" pos:end="33:22">.</operator><name pos:start="33:23" pos:end="33:29">grouped</name> <operator pos:start="33:31" pos:end="33:31">=</operator> <literal type="number" pos:start="33:33" pos:end="33:33">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="43:9"><if pos:start="35:9" pos:end="43:9">if <condition pos:start="35:12" pos:end="35:51">(<expr pos:start="35:13" pos:end="35:50"><name pos:start="35:13" pos:end="35:18">offset</name> <operator pos:start="35:20" pos:end="35:20">&gt;</operator> <name pos:start="35:22" pos:end="35:34"><name pos:start="35:22" pos:end="35:22">s</name><operator pos:start="35:23" pos:end="35:24">-&gt;</operator><name pos:start="35:25" pos:end="35:31">channel</name><index pos:start="35:32" pos:end="35:34">[<expr pos:start="35:33" pos:end="35:33"><name pos:start="35:33" pos:end="35:33">i</name></expr>]</index></name><operator pos:start="35:35" pos:end="35:35">.</operator><name pos:start="35:36" pos:end="35:50">decoded_samples</name></expr>)</condition> <block pos:start="35:53" pos:end="43:9">{<block_content pos:start="37:13" pos:end="41:71">

            <expr_stmt pos:start="37:13" pos:end="37:51"><expr pos:start="37:13" pos:end="37:50"><name pos:start="37:13" pos:end="37:18">offset</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <name pos:start="37:22" pos:end="37:34"><name pos:start="37:22" pos:end="37:22">s</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:31">channel</name><index pos:start="37:32" pos:end="37:34">[<expr pos:start="37:33" pos:end="37:33"><name pos:start="37:33" pos:end="37:33">i</name></expr>]</index></name><operator pos:start="37:35" pos:end="37:35">.</operator><name pos:start="37:36" pos:end="37:50">decoded_samples</name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="41:71"><expr pos:start="39:13" pos:end="41:70"><name pos:start="39:13" pos:end="39:24">subframe_len</name> <operator pos:start="39:26" pos:end="39:26">=</operator>

                <name pos:start="41:17" pos:end="41:29"><name pos:start="41:17" pos:end="41:17">s</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:26">channel</name><index pos:start="41:27" pos:end="41:29">[<expr pos:start="41:28" pos:end="41:28"><name pos:start="41:28" pos:end="41:28">i</name></expr>]</index></name><operator pos:start="41:30" pos:end="41:30">.</operator><name pos:start="41:31" pos:end="41:70"><name pos:start="41:31" pos:end="41:42">subframe_len</name><index pos:start="41:43" pos:end="41:70">[<expr pos:start="41:44" pos:end="41:69"><name pos:start="41:44" pos:end="41:56"><name pos:start="41:44" pos:end="41:44">s</name><operator pos:start="41:45" pos:end="41:46">-&gt;</operator><name pos:start="41:47" pos:end="41:53">channel</name><index pos:start="41:54" pos:end="41:56">[<expr pos:start="41:55" pos:end="41:55"><name pos:start="41:55" pos:end="41:55">i</name></expr>]</index></name><operator pos:start="41:57" pos:end="41:57">.</operator><name pos:start="41:58" pos:end="41:69">cur_subframe</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="49:5" pos:end="51:81"><expr pos:start="49:5" pos:end="51:80"><call pos:start="49:5" pos:end="51:80"><name pos:start="49:5" pos:end="49:11">av_dlog</name><argument_list pos:start="49:12" pos:end="51:80">(<argument pos:start="49:13" pos:end="49:20"><expr pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:20">avctx</name></name></expr></argument>,

            <argument pos:start="51:13" pos:end="51:57"><expr pos:start="51:13" pos:end="51:57"><literal type="string" pos:start="51:13" pos:end="51:57">"processing subframe with offset %i len %i\n"</literal></expr></argument>, <argument pos:start="51:60" pos:end="51:65"><expr pos:start="51:60" pos:end="51:65"><name pos:start="51:60" pos:end="51:65">offset</name></expr></argument>, <argument pos:start="51:68" pos:end="51:79"><expr pos:start="51:68" pos:end="51:79"><name pos:start="51:68" pos:end="51:79">subframe_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="55:5" pos:end="55:70">/** get a list of all channels that contain the estimated block */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:37"><expr pos:start="57:5" pos:end="57:36"><name pos:start="57:5" pos:end="57:32"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:32">channels_for_cur_subframe</name></name> <operator pos:start="57:34" pos:end="57:34">=</operator> <literal type="number" pos:start="57:36" pos:end="57:36">0</literal></expr>;</expr_stmt>

    <for pos:start="59:5" pos:end="87:5">for <control pos:start="59:9" pos:end="59:44">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">i</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:39"><expr pos:start="59:17" pos:end="59:38"><name pos:start="59:17" pos:end="59:17">i</name> <operator pos:start="59:19" pos:end="59:19">&lt;</operator> <name pos:start="59:21" pos:end="59:38"><name pos:start="59:21" pos:end="59:21">s</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:28">avctx</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:38">channels</name></name></expr>;</condition> <incr pos:start="59:41" pos:end="59:43"><expr pos:start="59:41" pos:end="59:43"><name pos:start="59:41" pos:end="59:41">i</name><operator pos:start="59:42" pos:end="59:43">++</operator></expr></incr>)</control> <block pos:start="59:46" pos:end="87:5">{<block_content pos:start="61:9" pos:end="85:9">

        <decl_stmt pos:start="61:9" pos:end="61:60"><decl pos:start="61:9" pos:end="61:59"><type pos:start="61:9" pos:end="61:17"><specifier pos:start="61:9" pos:end="61:13">const</specifier> <name pos:start="61:15" pos:end="61:17">int</name></type> <name pos:start="61:19" pos:end="61:30">cur_subframe</name> <init pos:start="61:32" pos:end="61:59">= <expr pos:start="61:34" pos:end="61:59"><name pos:start="61:34" pos:end="61:46"><name pos:start="61:34" pos:end="61:34">s</name><operator pos:start="61:35" pos:end="61:36">-&gt;</operator><name pos:start="61:37" pos:end="61:43">channel</name><index pos:start="61:44" pos:end="61:46">[<expr pos:start="61:45" pos:end="61:45"><name pos:start="61:45" pos:end="61:45">i</name></expr>]</index></name><operator pos:start="61:47" pos:end="61:47">.</operator><name pos:start="61:48" pos:end="61:59">cur_subframe</name></expr></init></decl>;</decl_stmt>

        <comment type="block" format="doxygen" pos:start="63:9" pos:end="63:49">/** subtract already processed samples */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:55"><expr pos:start="65:9" pos:end="65:54"><name pos:start="65:9" pos:end="65:21">total_samples</name> <operator pos:start="65:23" pos:end="65:24">-=</operator> <name pos:start="65:26" pos:end="65:38"><name pos:start="65:26" pos:end="65:26">s</name><operator pos:start="65:27" pos:end="65:28">-&gt;</operator><name pos:start="65:29" pos:end="65:35">channel</name><index pos:start="65:36" pos:end="65:38">[<expr pos:start="65:37" pos:end="65:37"><name pos:start="65:37" pos:end="65:37">i</name></expr>]</index></name><operator pos:start="65:39" pos:end="65:39">.</operator><name pos:start="65:40" pos:end="65:54">decoded_samples</name></expr>;</expr_stmt>



        <comment type="block" format="doxygen" pos:start="69:9" pos:end="69:79">/** and count if there are multiple subframes that match our profile */</comment>

        <if_stmt pos:start="71:9" pos:end="85:9"><if pos:start="71:9" pos:end="85:9">if <condition pos:start="71:12" pos:end="73:69">(<expr pos:start="71:13" pos:end="73:68"><name pos:start="71:13" pos:end="71:18">offset</name> <operator pos:start="71:20" pos:end="71:21">==</operator> <name pos:start="71:23" pos:end="71:35"><name pos:start="71:23" pos:end="71:23">s</name><operator pos:start="71:24" pos:end="71:25">-&gt;</operator><name pos:start="71:26" pos:end="71:32">channel</name><index pos:start="71:33" pos:end="71:35">[<expr pos:start="71:34" pos:end="71:34"><name pos:start="71:34" pos:end="71:34">i</name></expr>]</index></name><operator pos:start="71:36" pos:end="71:36">.</operator><name pos:start="71:37" pos:end="71:51">decoded_samples</name> <operator pos:start="71:53" pos:end="71:54">&amp;&amp;</operator>

            <name pos:start="73:13" pos:end="73:24">subframe_len</name> <operator pos:start="73:26" pos:end="73:27">==</operator> <name pos:start="73:29" pos:end="73:41"><name pos:start="73:29" pos:end="73:29">s</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:38">channel</name><index pos:start="73:39" pos:end="73:41">[<expr pos:start="73:40" pos:end="73:40"><name pos:start="73:40" pos:end="73:40">i</name></expr>]</index></name><operator pos:start="73:42" pos:end="73:42">.</operator><name pos:start="73:43" pos:end="73:68"><name pos:start="73:43" pos:end="73:54">subframe_len</name><index pos:start="73:55" pos:end="73:68">[<expr pos:start="73:56" pos:end="73:67"><name pos:start="73:56" pos:end="73:67">cur_subframe</name></expr>]</index></name></expr>)</condition> <block pos:start="73:71" pos:end="85:9">{<block_content pos:start="75:13" pos:end="83:43">

            <expr_stmt pos:start="75:13" pos:end="75:70"><expr pos:start="75:13" pos:end="75:69"><name pos:start="75:13" pos:end="75:25">total_samples</name> <operator pos:start="75:27" pos:end="75:28">-=</operator> <name pos:start="75:30" pos:end="75:42"><name pos:start="75:30" pos:end="75:30">s</name><operator pos:start="75:31" pos:end="75:32">-&gt;</operator><name pos:start="75:33" pos:end="75:39">channel</name><index pos:start="75:40" pos:end="75:42">[<expr pos:start="75:41" pos:end="75:41"><name pos:start="75:41" pos:end="75:41">i</name></expr>]</index></name><operator pos:start="75:43" pos:end="75:43">.</operator><name pos:start="75:44" pos:end="75:69"><name pos:start="75:44" pos:end="75:55">subframe_len</name><index pos:start="75:56" pos:end="75:69">[<expr pos:start="75:57" pos:end="75:68"><name pos:start="75:57" pos:end="75:68">cur_subframe</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="79:57"><expr pos:start="77:13" pos:end="79:56"><name pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:22">channel</name><index pos:start="77:23" pos:end="77:25">[<expr pos:start="77:24" pos:end="77:24"><name pos:start="77:24" pos:end="77:24">i</name></expr>]</index></name><operator pos:start="77:26" pos:end="77:26">.</operator><name pos:start="77:27" pos:end="77:41">decoded_samples</name> <operator pos:start="77:43" pos:end="77:44">+=</operator>

                <name pos:start="79:17" pos:end="79:29"><name pos:start="79:17" pos:end="79:17">s</name><operator pos:start="79:18" pos:end="79:19">-&gt;</operator><name pos:start="79:20" pos:end="79:26">channel</name><index pos:start="79:27" pos:end="79:29">[<expr pos:start="79:28" pos:end="79:28"><name pos:start="79:28" pos:end="79:28">i</name></expr>]</index></name><operator pos:start="79:30" pos:end="79:30">.</operator><name pos:start="79:31" pos:end="79:56"><name pos:start="79:31" pos:end="79:42">subframe_len</name><index pos:start="79:43" pos:end="79:56">[<expr pos:start="79:44" pos:end="79:55"><name pos:start="79:44" pos:end="79:55">cur_subframe</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:82"><expr pos:start="81:13" pos:end="81:81"><name pos:start="81:13" pos:end="81:77"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:47">channel_indexes_for_cur_subframe</name><index pos:start="81:48" pos:end="81:77">[<expr pos:start="81:49" pos:end="81:76"><name pos:start="81:49" pos:end="81:76"><name pos:start="81:49" pos:end="81:49">s</name><operator pos:start="81:50" pos:end="81:51">-&gt;</operator><name pos:start="81:52" pos:end="81:76">channels_for_cur_subframe</name></name></expr>]</index></name> <operator pos:start="81:79" pos:end="81:79">=</operator> <name pos:start="81:81" pos:end="81:81">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:43"><expr pos:start="83:13" pos:end="83:42"><operator pos:start="83:13" pos:end="83:14">++</operator><name pos:start="83:15" pos:end="83:42"><name pos:start="83:15" pos:end="83:15">s</name><operator pos:start="83:16" pos:end="83:17">-&gt;</operator><name pos:start="83:18" pos:end="83:42">channels_for_cur_subframe</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" format="doxygen" pos:start="91:5" pos:end="93:26">/** check if the frame will be complete after processing the

        estimated block */</comment>

    <if_stmt pos:start="95:5" pos:end="97:36"><if pos:start="95:5" pos:end="97:36">if <condition pos:start="95:8" pos:end="95:23">(<expr pos:start="95:9" pos:end="95:22"><operator pos:start="95:9" pos:end="95:9">!</operator><name pos:start="95:10" pos:end="95:22">total_samples</name></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="97:36"><block_content pos:start="97:9" pos:end="97:36">

        <expr_stmt pos:start="97:9" pos:end="97:36"><expr pos:start="97:9" pos:end="97:35"><name pos:start="97:9" pos:end="97:31"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:31">parsed_all_subframes</name></name> <operator pos:start="97:33" pos:end="97:33">=</operator> <literal type="number" pos:start="97:35" pos:end="97:35">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>





    <expr_stmt pos:start="103:5" pos:end="105:42"><expr pos:start="103:5" pos:end="105:41"><call pos:start="103:5" pos:end="105:41"><name pos:start="103:5" pos:end="103:11">av_dlog</name><argument_list pos:start="103:12" pos:end="105:41">(<argument pos:start="103:13" pos:end="103:20"><expr pos:start="103:13" pos:end="103:20"><name pos:start="103:13" pos:end="103:20"><name pos:start="103:13" pos:end="103:13">s</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:20">avctx</name></name></expr></argument>, <argument pos:start="103:23" pos:end="103:57"><expr pos:start="103:23" pos:end="103:57"><literal type="string" pos:start="103:23" pos:end="103:57">"subframe is part of %i channels\n"</literal></expr></argument>,

            <argument pos:start="105:13" pos:end="105:40"><expr pos:start="105:13" pos:end="105:40"><name pos:start="105:13" pos:end="105:40"><name pos:start="105:13" pos:end="105:13">s</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:40">channels_for_cur_subframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="109:5" pos:end="109:67">/** calculate number of scale factor bands and their offsets */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:70"><expr pos:start="111:5" pos:end="111:69"><name pos:start="111:5" pos:end="111:16"><name pos:start="111:5" pos:end="111:5">s</name><operator pos:start="111:6" pos:end="111:7">-&gt;</operator><name pos:start="111:8" pos:end="111:16">table_idx</name></name>         <operator pos:start="111:26" pos:end="111:26">=</operator> <call pos:start="111:28" pos:end="111:69"><name pos:start="111:28" pos:end="111:34">av_log2</name><argument_list pos:start="111:35" pos:end="111:69">(<argument pos:start="111:36" pos:end="111:68"><expr pos:start="111:36" pos:end="111:68"><name pos:start="111:36" pos:end="111:55"><name pos:start="111:36" pos:end="111:36">s</name><operator pos:start="111:37" pos:end="111:38">-&gt;</operator><name pos:start="111:39" pos:end="111:55">samples_per_frame</name></name><operator pos:start="111:56" pos:end="111:56">/</operator><name pos:start="111:57" pos:end="111:68">subframe_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:52"><expr pos:start="113:5" pos:end="113:51"><name pos:start="113:5" pos:end="113:16"><name pos:start="113:5" pos:end="113:5">s</name><operator pos:start="113:6" pos:end="113:7">-&gt;</operator><name pos:start="113:8" pos:end="113:16">num_bands</name></name>         <operator pos:start="113:26" pos:end="113:26">=</operator> <name pos:start="113:28" pos:end="113:51"><name pos:start="113:28" pos:end="113:28">s</name><operator pos:start="113:29" pos:end="113:30">-&gt;</operator><name pos:start="113:31" pos:end="113:37">num_sfb</name><index pos:start="113:38" pos:end="113:51">[<expr pos:start="113:39" pos:end="113:50"><name pos:start="113:39" pos:end="113:50"><name pos:start="113:39" pos:end="113:39">s</name><operator pos:start="113:40" pos:end="113:41">-&gt;</operator><name pos:start="113:42" pos:end="113:50">table_idx</name></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:56"><expr pos:start="115:5" pos:end="115:55"><name pos:start="115:5" pos:end="115:22"><name pos:start="115:5" pos:end="115:5">s</name><operator pos:start="115:6" pos:end="115:7">-&gt;</operator><name pos:start="115:8" pos:end="115:22">cur_sfb_offsets</name></name>   <operator pos:start="115:26" pos:end="115:26">=</operator> <name pos:start="115:28" pos:end="115:55"><name pos:start="115:28" pos:end="115:28">s</name><operator pos:start="115:29" pos:end="115:30">-&gt;</operator><name pos:start="115:31" pos:end="115:41">sfb_offsets</name><index pos:start="115:42" pos:end="115:55">[<expr pos:start="115:43" pos:end="115:54"><name pos:start="115:43" pos:end="115:54"><name pos:start="115:43" pos:end="115:43">s</name><operator pos:start="115:44" pos:end="115:45">-&gt;</operator><name pos:start="115:46" pos:end="115:54">table_idx</name></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:62"><expr pos:start="117:5" pos:end="117:61"><name pos:start="117:5" pos:end="117:24">cur_subwoofer_cutoff</name> <operator pos:start="117:26" pos:end="117:26">=</operator> <name pos:start="117:28" pos:end="117:61"><name pos:start="117:28" pos:end="117:28">s</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:47">subwoofer_cutoffs</name><index pos:start="117:48" pos:end="117:61">[<expr pos:start="117:49" pos:end="117:60"><name pos:start="117:49" pos:end="117:60"><name pos:start="117:49" pos:end="117:49">s</name><operator pos:start="117:50" pos:end="117:51">-&gt;</operator><name pos:start="117:52" pos:end="117:60">table_idx</name></name></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="121:5" pos:end="121:57">/** configure the decoder for the current subframe */</comment>

    <for pos:start="123:5" pos:end="133:5">for <control pos:start="123:9" pos:end="123:54">(<init pos:start="123:10" pos:end="123:15"><expr pos:start="123:10" pos:end="123:14"><name pos:start="123:10" pos:end="123:10">i</name> <operator pos:start="123:12" pos:end="123:12">=</operator> <literal type="number" pos:start="123:14" pos:end="123:14">0</literal></expr>;</init> <condition pos:start="123:17" pos:end="123:49"><expr pos:start="123:17" pos:end="123:48"><name pos:start="123:17" pos:end="123:17">i</name> <operator pos:start="123:19" pos:end="123:19">&lt;</operator> <name pos:start="123:21" pos:end="123:48"><name pos:start="123:21" pos:end="123:21">s</name><operator pos:start="123:22" pos:end="123:23">-&gt;</operator><name pos:start="123:24" pos:end="123:48">channels_for_cur_subframe</name></name></expr>;</condition> <incr pos:start="123:51" pos:end="123:53"><expr pos:start="123:51" pos:end="123:53"><name pos:start="123:51" pos:end="123:51">i</name><operator pos:start="123:52" pos:end="123:53">++</operator></expr></incr>)</control> <block pos:start="123:56" pos:end="133:5">{<block_content pos:start="125:9" pos:end="131:60">

        <decl_stmt pos:start="125:9" pos:end="125:55"><decl pos:start="125:9" pos:end="125:54"><type pos:start="125:9" pos:end="125:11"><name pos:start="125:9" pos:end="125:11">int</name></type> <name pos:start="125:13" pos:end="125:13">c</name> <init pos:start="125:15" pos:end="125:54">= <expr pos:start="125:17" pos:end="125:54"><name pos:start="125:17" pos:end="125:54"><name pos:start="125:17" pos:end="125:17">s</name><operator pos:start="125:18" pos:end="125:19">-&gt;</operator><name pos:start="125:20" pos:end="125:51">channel_indexes_for_cur_subframe</name><index pos:start="125:52" pos:end="125:54">[<expr pos:start="125:53" pos:end="125:53"><name pos:start="125:53" pos:end="125:53">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="129:9" pos:end="131:60"><expr pos:start="129:9" pos:end="131:59"><name pos:start="129:9" pos:end="129:21"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:18">channel</name><index pos:start="129:19" pos:end="129:21">[<expr pos:start="129:20" pos:end="129:20"><name pos:start="129:20" pos:end="129:20">c</name></expr>]</index></name><operator pos:start="129:22" pos:end="129:22">.</operator><name pos:start="129:23" pos:end="129:28">coeffs</name> <operator pos:start="129:30" pos:end="129:30">=</operator> <operator pos:start="129:32" pos:end="129:32">&amp;</operator><name pos:start="129:33" pos:end="129:45"><name pos:start="129:33" pos:end="129:33">s</name><operator pos:start="129:34" pos:end="129:35">-&gt;</operator><name pos:start="129:36" pos:end="129:42">channel</name><index pos:start="129:43" pos:end="129:45">[<expr pos:start="129:44" pos:end="129:44"><name pos:start="129:44" pos:end="129:44">c</name></expr>]</index></name><operator pos:start="129:46" pos:end="129:46">.</operator><name pos:start="129:47" pos:end="131:59"><name pos:start="129:47" pos:end="129:49">out</name><index pos:start="129:50" pos:end="131:59">[<expr pos:start="129:51" pos:end="131:58"><operator pos:start="129:51" pos:end="129:51">(</operator><name pos:start="129:52" pos:end="129:71"><name pos:start="129:52" pos:end="129:52">s</name><operator pos:start="129:53" pos:end="129:54">-&gt;</operator><name pos:start="129:55" pos:end="129:71">samples_per_frame</name></name> <operator pos:start="129:73" pos:end="129:74">&gt;&gt;</operator> <literal type="number" pos:start="129:76" pos:end="129:76">1</literal><operator pos:start="129:77" pos:end="129:77">)</operator>

                                                  <operator pos:start="131:51" pos:end="131:51">+</operator> <name pos:start="131:53" pos:end="131:58">offset</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="137:5" pos:end="137:35"><expr pos:start="137:5" pos:end="137:34"><name pos:start="137:5" pos:end="137:19"><name pos:start="137:5" pos:end="137:5">s</name><operator pos:start="137:6" pos:end="137:7">-&gt;</operator><name pos:start="137:8" pos:end="137:19">subframe_len</name></name> <operator pos:start="137:21" pos:end="137:21">=</operator> <name pos:start="137:23" pos:end="137:34">subframe_len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:50"><expr pos:start="139:5" pos:end="139:49"><name pos:start="139:5" pos:end="139:14"><name pos:start="139:5" pos:end="139:5">s</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:14">esc_len</name></name> <operator pos:start="139:16" pos:end="139:16">=</operator> <call pos:start="139:18" pos:end="139:45"><name pos:start="139:18" pos:end="139:24">av_log2</name><argument_list pos:start="139:25" pos:end="139:45">(<argument pos:start="139:26" pos:end="139:44"><expr pos:start="139:26" pos:end="139:44"><name pos:start="139:26" pos:end="139:40"><name pos:start="139:26" pos:end="139:26">s</name><operator pos:start="139:27" pos:end="139:28">-&gt;</operator><name pos:start="139:29" pos:end="139:40">subframe_len</name></name> <operator pos:start="139:42" pos:end="139:42">-</operator> <literal type="number" pos:start="139:44" pos:end="139:44">1</literal></expr></argument>)</argument_list></call> <operator pos:start="139:47" pos:end="139:47">+</operator> <literal type="number" pos:start="139:49" pos:end="139:49">1</literal></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="143:5" pos:end="143:38">/** skip extended header if any */</comment>

    <if_stmt pos:start="145:5" pos:end="175:5"><if pos:start="145:5" pos:end="175:5">if <condition pos:start="145:8" pos:end="145:26">(<expr pos:start="145:9" pos:end="145:25"><call pos:start="145:9" pos:end="145:25"><name pos:start="145:9" pos:end="145:17">get_bits1</name><argument_list pos:start="145:18" pos:end="145:25">(<argument pos:start="145:19" pos:end="145:24"><expr pos:start="145:19" pos:end="145:24"><operator pos:start="145:19" pos:end="145:19">&amp;</operator><name pos:start="145:20" pos:end="145:24"><name pos:start="145:20" pos:end="145:20">s</name><operator pos:start="145:21" pos:end="145:22">-&gt;</operator><name pos:start="145:23" pos:end="145:24">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="145:28" pos:end="175:5">{<block_content pos:start="147:9" pos:end="173:9">

        <decl_stmt pos:start="147:9" pos:end="147:26"><decl pos:start="147:9" pos:end="147:25"><type pos:start="147:9" pos:end="147:11"><name pos:start="147:9" pos:end="147:11">int</name></type> <name pos:start="147:13" pos:end="147:25">num_fill_bits</name></decl>;</decl_stmt>

        <if_stmt pos:start="149:9" pos:end="155:9"><if pos:start="149:9" pos:end="155:9">if <condition pos:start="149:12" pos:end="149:51">(<expr pos:start="149:13" pos:end="149:50"><operator pos:start="149:13" pos:end="149:13">!</operator><operator pos:start="149:14" pos:end="149:14">(</operator><name pos:start="149:15" pos:end="149:27">num_fill_bits</name> <operator pos:start="149:29" pos:end="149:29">=</operator> <call pos:start="149:31" pos:end="149:49"><name pos:start="149:31" pos:end="149:38">get_bits</name><argument_list pos:start="149:39" pos:end="149:49">(<argument pos:start="149:40" pos:end="149:45"><expr pos:start="149:40" pos:end="149:45"><operator pos:start="149:40" pos:end="149:40">&amp;</operator><name pos:start="149:41" pos:end="149:45"><name pos:start="149:41" pos:end="149:41">s</name><operator pos:start="149:42" pos:end="149:43">-&gt;</operator><name pos:start="149:44" pos:end="149:45">gb</name></name></expr></argument>, <argument pos:start="149:48" pos:end="149:48"><expr pos:start="149:48" pos:end="149:48"><literal type="number" pos:start="149:48" pos:end="149:48">2</literal></expr></argument>)</argument_list></call><operator pos:start="149:50" pos:end="149:50">)</operator></expr>)</condition> <block pos:start="149:53" pos:end="155:9">{<block_content pos:start="151:13" pos:end="153:54">

            <decl_stmt pos:start="151:13" pos:end="151:42"><decl pos:start="151:13" pos:end="151:41"><type pos:start="151:13" pos:end="151:15"><name pos:start="151:13" pos:end="151:15">int</name></type> <name pos:start="151:17" pos:end="151:19">len</name> <init pos:start="151:21" pos:end="151:41">= <expr pos:start="151:23" pos:end="151:41"><call pos:start="151:23" pos:end="151:41"><name pos:start="151:23" pos:end="151:30">get_bits</name><argument_list pos:start="151:31" pos:end="151:41">(<argument pos:start="151:32" pos:end="151:37"><expr pos:start="151:32" pos:end="151:37"><operator pos:start="151:32" pos:end="151:32">&amp;</operator><name pos:start="151:33" pos:end="151:37"><name pos:start="151:33" pos:end="151:33">s</name><operator pos:start="151:34" pos:end="151:35">-&gt;</operator><name pos:start="151:36" pos:end="151:37">gb</name></name></expr></argument>, <argument pos:start="151:40" pos:end="151:40"><expr pos:start="151:40" pos:end="151:40"><literal type="number" pos:start="151:40" pos:end="151:40">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:54"><expr pos:start="153:13" pos:end="153:53"><name pos:start="153:13" pos:end="153:25">num_fill_bits</name> <operator pos:start="153:27" pos:end="153:27">=</operator> <call pos:start="153:29" pos:end="153:49"><name pos:start="153:29" pos:end="153:36">get_bits</name><argument_list pos:start="153:37" pos:end="153:49">(<argument pos:start="153:38" pos:end="153:43"><expr pos:start="153:38" pos:end="153:43"><operator pos:start="153:38" pos:end="153:38">&amp;</operator><name pos:start="153:39" pos:end="153:43"><name pos:start="153:39" pos:end="153:39">s</name><operator pos:start="153:40" pos:end="153:41">-&gt;</operator><name pos:start="153:42" pos:end="153:43">gb</name></name></expr></argument>, <argument pos:start="153:46" pos:end="153:48"><expr pos:start="153:46" pos:end="153:48"><name pos:start="153:46" pos:end="153:48">len</name></expr></argument>)</argument_list></call> <operator pos:start="153:51" pos:end="153:51">+</operator> <literal type="number" pos:start="153:53" pos:end="153:53">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="159:9" pos:end="173:9"><if pos:start="159:9" pos:end="173:9">if <condition pos:start="159:12" pos:end="159:31">(<expr pos:start="159:13" pos:end="159:30"><name pos:start="159:13" pos:end="159:25">num_fill_bits</name> <operator pos:start="159:27" pos:end="159:28">&gt;=</operator> <literal type="number" pos:start="159:30" pos:end="159:30">0</literal></expr>)</condition> <block pos:start="159:33" pos:end="173:9">{<block_content pos:start="161:13" pos:end="171:50">

            <if_stmt pos:start="161:13" pos:end="167:13"><if pos:start="161:13" pos:end="167:13">if <condition pos:start="161:16" pos:end="161:75">(<expr pos:start="161:17" pos:end="161:74"><call pos:start="161:17" pos:end="161:38"><name pos:start="161:17" pos:end="161:30">get_bits_count</name><argument_list pos:start="161:31" pos:end="161:38">(<argument pos:start="161:32" pos:end="161:37"><expr pos:start="161:32" pos:end="161:37"><operator pos:start="161:32" pos:end="161:32">&amp;</operator><name pos:start="161:33" pos:end="161:37"><name pos:start="161:33" pos:end="161:33">s</name><operator pos:start="161:34" pos:end="161:35">-&gt;</operator><name pos:start="161:36" pos:end="161:37">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="161:40" pos:end="161:40">+</operator> <name pos:start="161:42" pos:end="161:54">num_fill_bits</name> <operator pos:start="161:56" pos:end="161:56">&gt;</operator> <name pos:start="161:58" pos:end="161:74"><name pos:start="161:58" pos:end="161:58">s</name><operator pos:start="161:59" pos:end="161:60">-&gt;</operator><name pos:start="161:61" pos:end="161:74">num_saved_bits</name></name></expr>)</condition> <block pos:start="161:77" pos:end="167:13">{<block_content pos:start="163:17" pos:end="165:43">

                <expr_stmt pos:start="163:17" pos:end="163:80"><expr pos:start="163:17" pos:end="163:79"><call pos:start="163:17" pos:end="163:79"><name pos:start="163:17" pos:end="163:22">av_log</name><argument_list pos:start="163:23" pos:end="163:79">(<argument pos:start="163:24" pos:end="163:31"><expr pos:start="163:24" pos:end="163:31"><name pos:start="163:24" pos:end="163:31"><name pos:start="163:24" pos:end="163:24">s</name><operator pos:start="163:25" pos:end="163:26">-&gt;</operator><name pos:start="163:27" pos:end="163:31">avctx</name></name></expr></argument>, <argument pos:start="163:34" pos:end="163:45"><expr pos:start="163:34" pos:end="163:45"><name pos:start="163:34" pos:end="163:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="163:48" pos:end="163:78"><expr pos:start="163:48" pos:end="163:78"><literal type="string" pos:start="163:48" pos:end="163:78">"invalid number of fill bits\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="165:17" pos:end="165:43">return <expr pos:start="165:24" pos:end="165:42"><name pos:start="165:24" pos:end="165:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="171:13" pos:end="171:50"><expr pos:start="171:13" pos:end="171:49"><call pos:start="171:13" pos:end="171:49"><name pos:start="171:13" pos:end="171:26">skip_bits_long</name><argument_list pos:start="171:27" pos:end="171:49">(<argument pos:start="171:28" pos:end="171:33"><expr pos:start="171:28" pos:end="171:33"><operator pos:start="171:28" pos:end="171:28">&amp;</operator><name pos:start="171:29" pos:end="171:33"><name pos:start="171:29" pos:end="171:29">s</name><operator pos:start="171:30" pos:end="171:31">-&gt;</operator><name pos:start="171:32" pos:end="171:33">gb</name></name></expr></argument>, <argument pos:start="171:36" pos:end="171:48"><expr pos:start="171:36" pos:end="171:48"><name pos:start="171:36" pos:end="171:48">num_fill_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" format="doxygen" pos:start="179:5" pos:end="179:53">/** no idea for what the following bit is used */</comment>

    <if_stmt pos:start="181:5" pos:end="187:5"><if pos:start="181:5" pos:end="187:5">if <condition pos:start="181:8" pos:end="181:26">(<expr pos:start="181:9" pos:end="181:25"><call pos:start="181:9" pos:end="181:25"><name pos:start="181:9" pos:end="181:17">get_bits1</name><argument_list pos:start="181:18" pos:end="181:25">(<argument pos:start="181:19" pos:end="181:24"><expr pos:start="181:19" pos:end="181:24"><operator pos:start="181:19" pos:end="181:19">&amp;</operator><name pos:start="181:20" pos:end="181:24"><name pos:start="181:20" pos:end="181:20">s</name><operator pos:start="181:21" pos:end="181:22">-&gt;</operator><name pos:start="181:23" pos:end="181:24">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="181:28" pos:end="187:5">{<block_content pos:start="183:9" pos:end="185:36">

        <expr_stmt pos:start="183:9" pos:end="183:56"><expr pos:start="183:9" pos:end="183:55"><call pos:start="183:9" pos:end="183:55"><name pos:start="183:9" pos:end="183:29">avpriv_request_sample</name><argument_list pos:start="183:30" pos:end="183:55">(<argument pos:start="183:31" pos:end="183:38"><expr pos:start="183:31" pos:end="183:38"><name pos:start="183:31" pos:end="183:38"><name pos:start="183:31" pos:end="183:31">s</name><operator pos:start="183:32" pos:end="183:33">-&gt;</operator><name pos:start="183:34" pos:end="183:38">avctx</name></name></expr></argument>, <argument pos:start="183:41" pos:end="183:54"><expr pos:start="183:41" pos:end="183:54"><literal type="string" pos:start="183:41" pos:end="183:54">"Reserved bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="185:9" pos:end="185:36">return <expr pos:start="185:16" pos:end="185:35"><name pos:start="185:16" pos:end="185:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>





    <if_stmt pos:start="193:5" pos:end="195:35"><if pos:start="193:5" pos:end="195:35">if <condition pos:start="193:8" pos:end="193:40">(<expr pos:start="193:9" pos:end="193:39"><call pos:start="193:9" pos:end="193:35"><name pos:start="193:9" pos:end="193:32">decode_channel_transform</name><argument_list pos:start="193:33" pos:end="193:35">(<argument pos:start="193:34" pos:end="193:34"><expr pos:start="193:34" pos:end="193:34"><name pos:start="193:34" pos:end="193:34">s</name></expr></argument>)</argument_list></call> <operator pos:start="193:37" pos:end="193:37">&lt;</operator> <literal type="number" pos:start="193:39" pos:end="193:39">0</literal></expr>)</condition><block type="pseudo" pos:start="195:9" pos:end="195:35"><block_content pos:start="195:9" pos:end="195:35">

        <return pos:start="195:9" pos:end="195:35">return <expr pos:start="195:16" pos:end="195:34"><name pos:start="195:16" pos:end="195:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>





    <for pos:start="201:5" pos:end="209:5">for <control pos:start="201:9" pos:end="201:54">(<init pos:start="201:10" pos:end="201:15"><expr pos:start="201:10" pos:end="201:14"><name pos:start="201:10" pos:end="201:10">i</name> <operator pos:start="201:12" pos:end="201:12">=</operator> <literal type="number" pos:start="201:14" pos:end="201:14">0</literal></expr>;</init> <condition pos:start="201:17" pos:end="201:49"><expr pos:start="201:17" pos:end="201:48"><name pos:start="201:17" pos:end="201:17">i</name> <operator pos:start="201:19" pos:end="201:19">&lt;</operator> <name pos:start="201:21" pos:end="201:48"><name pos:start="201:21" pos:end="201:21">s</name><operator pos:start="201:22" pos:end="201:23">-&gt;</operator><name pos:start="201:24" pos:end="201:48">channels_for_cur_subframe</name></name></expr>;</condition> <incr pos:start="201:51" pos:end="201:53"><expr pos:start="201:51" pos:end="201:53"><name pos:start="201:51" pos:end="201:51">i</name><operator pos:start="201:52" pos:end="201:53">++</operator></expr></incr>)</control> <block pos:start="201:56" pos:end="209:5">{<block_content pos:start="203:9" pos:end="207:32">

        <decl_stmt pos:start="203:9" pos:end="203:55"><decl pos:start="203:9" pos:end="203:54"><type pos:start="203:9" pos:end="203:11"><name pos:start="203:9" pos:end="203:11">int</name></type> <name pos:start="203:13" pos:end="203:13">c</name> <init pos:start="203:15" pos:end="203:54">= <expr pos:start="203:17" pos:end="203:54"><name pos:start="203:17" pos:end="203:54"><name pos:start="203:17" pos:end="203:17">s</name><operator pos:start="203:18" pos:end="203:19">-&gt;</operator><name pos:start="203:20" pos:end="203:51">channel_indexes_for_cur_subframe</name><index pos:start="203:52" pos:end="203:54">[<expr pos:start="203:53" pos:end="203:53"><name pos:start="203:53" pos:end="203:53">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="205:9" pos:end="207:32"><if pos:start="205:9" pos:end="207:32">if <condition pos:start="205:12" pos:end="205:63">(<expr pos:start="205:13" pos:end="205:62"><operator pos:start="205:13" pos:end="205:13">(</operator><name pos:start="205:14" pos:end="205:26"><name pos:start="205:14" pos:end="205:14">s</name><operator pos:start="205:15" pos:end="205:16">-&gt;</operator><name pos:start="205:17" pos:end="205:23">channel</name><index pos:start="205:24" pos:end="205:26">[<expr pos:start="205:25" pos:end="205:25"><name pos:start="205:25" pos:end="205:25">c</name></expr>]</index></name><operator pos:start="205:27" pos:end="205:27">.</operator><name pos:start="205:28" pos:end="205:41">transmit_coefs</name> <operator pos:start="205:43" pos:end="205:43">=</operator> <call pos:start="205:45" pos:end="205:61"><name pos:start="205:45" pos:end="205:53">get_bits1</name><argument_list pos:start="205:54" pos:end="205:61">(<argument pos:start="205:55" pos:end="205:60"><expr pos:start="205:55" pos:end="205:60"><operator pos:start="205:55" pos:end="205:55">&amp;</operator><name pos:start="205:56" pos:end="205:60"><name pos:start="205:56" pos:end="205:56">s</name><operator pos:start="205:57" pos:end="205:58">-&gt;</operator><name pos:start="205:59" pos:end="205:60">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="205:62" pos:end="205:62">)</operator></expr>)</condition><block type="pseudo" pos:start="207:13" pos:end="207:32"><block_content pos:start="207:13" pos:end="207:32">

            <expr_stmt pos:start="207:13" pos:end="207:32"><expr pos:start="207:13" pos:end="207:31"><name pos:start="207:13" pos:end="207:27">transmit_coeffs</name> <operator pos:start="207:29" pos:end="207:29">=</operator> <literal type="number" pos:start="207:31" pos:end="207:31">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="213:5" pos:end="331:5"><if pos:start="213:5" pos:end="331:5">if <condition pos:start="213:8" pos:end="213:24">(<expr pos:start="213:9" pos:end="213:23"><name pos:start="213:9" pos:end="213:23">transmit_coeffs</name></expr>)</condition> <block pos:start="213:26" pos:end="331:5">{<block_content pos:start="215:9" pos:end="329:39">

        <decl_stmt pos:start="215:9" pos:end="215:17"><decl pos:start="215:9" pos:end="215:16"><type pos:start="215:9" pos:end="215:11"><name pos:start="215:9" pos:end="215:11">int</name></type> <name pos:start="215:13" pos:end="215:16">step</name></decl>;</decl_stmt>

        <decl_stmt pos:start="217:9" pos:end="217:54"><decl pos:start="217:9" pos:end="217:53"><type pos:start="217:9" pos:end="217:11"><name pos:start="217:9" pos:end="217:11">int</name></type> <name pos:start="217:13" pos:end="217:22">quant_step</name> <init pos:start="217:24" pos:end="217:53">= <expr pos:start="217:26" pos:end="217:53"><literal type="number" pos:start="217:26" pos:end="217:27">90</literal> <operator pos:start="217:29" pos:end="217:29">*</operator> <name pos:start="217:31" pos:end="217:48"><name pos:start="217:31" pos:end="217:31">s</name><operator pos:start="217:32" pos:end="217:33">-&gt;</operator><name pos:start="217:34" pos:end="217:48">bits_per_sample</name></name> <operator pos:start="217:50" pos:end="217:51">&gt;&gt;</operator> <literal type="number" pos:start="217:53" pos:end="217:53">4</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" format="doxygen" pos:start="221:9" pos:end="221:57">/** decode number of vector coded coefficients */</comment>

        <if_stmt pos:start="223:9" pos:end="255:9"><if pos:start="223:9" pos:end="245:9">if <condition pos:start="223:12" pos:end="223:61">(<expr pos:start="223:13" pos:end="223:60"><operator pos:start="223:13" pos:end="223:13">(</operator><name pos:start="223:14" pos:end="223:39"><name pos:start="223:14" pos:end="223:14">s</name><operator pos:start="223:15" pos:end="223:16">-&gt;</operator><name pos:start="223:17" pos:end="223:39">transmit_num_vec_coeffs</name></name> <operator pos:start="223:41" pos:end="223:41">=</operator> <call pos:start="223:43" pos:end="223:59"><name pos:start="223:43" pos:end="223:51">get_bits1</name><argument_list pos:start="223:52" pos:end="223:59">(<argument pos:start="223:53" pos:end="223:58"><expr pos:start="223:53" pos:end="223:58"><operator pos:start="223:53" pos:end="223:53">&amp;</operator><name pos:start="223:54" pos:end="223:58"><name pos:start="223:54" pos:end="223:54">s</name><operator pos:start="223:55" pos:end="223:56">-&gt;</operator><name pos:start="223:57" pos:end="223:58">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="223:60" pos:end="223:60">)</operator></expr>)</condition> <block pos:start="223:63" pos:end="245:9">{<block_content pos:start="225:13" pos:end="243:13">

            <decl_stmt pos:start="225:13" pos:end="225:64"><decl pos:start="225:13" pos:end="225:63"><type pos:start="225:13" pos:end="225:15"><name pos:start="225:13" pos:end="225:15">int</name></type> <name pos:start="225:17" pos:end="225:24">num_bits</name> <init pos:start="225:26" pos:end="225:63">= <expr pos:start="225:28" pos:end="225:63"><call pos:start="225:28" pos:end="225:59"><name pos:start="225:28" pos:end="225:34">av_log2</name><argument_list pos:start="225:35" pos:end="225:59">(<argument pos:start="225:36" pos:end="225:58"><expr pos:start="225:36" pos:end="225:58"><operator pos:start="225:36" pos:end="225:36">(</operator><name pos:start="225:37" pos:end="225:51"><name pos:start="225:37" pos:end="225:37">s</name><operator pos:start="225:38" pos:end="225:39">-&gt;</operator><name pos:start="225:40" pos:end="225:51">subframe_len</name></name> <operator pos:start="225:53" pos:end="225:53">+</operator> <literal type="number" pos:start="225:55" pos:end="225:55">3</literal><operator pos:start="225:56" pos:end="225:56">)</operator><operator pos:start="225:57" pos:end="225:57">/</operator><literal type="number" pos:start="225:58" pos:end="225:58">4</literal></expr></argument>)</argument_list></call> <operator pos:start="225:61" pos:end="225:61">+</operator> <literal type="number" pos:start="225:63" pos:end="225:63">1</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="227:13" pos:end="243:13">for <control pos:start="227:17" pos:end="227:62">(<init pos:start="227:18" pos:end="227:23"><expr pos:start="227:18" pos:end="227:22"><name pos:start="227:18" pos:end="227:18">i</name> <operator pos:start="227:20" pos:end="227:20">=</operator> <literal type="number" pos:start="227:22" pos:end="227:22">0</literal></expr>;</init> <condition pos:start="227:25" pos:end="227:57"><expr pos:start="227:25" pos:end="227:56"><name pos:start="227:25" pos:end="227:25">i</name> <operator pos:start="227:27" pos:end="227:27">&lt;</operator> <name pos:start="227:29" pos:end="227:56"><name pos:start="227:29" pos:end="227:29">s</name><operator pos:start="227:30" pos:end="227:31">-&gt;</operator><name pos:start="227:32" pos:end="227:56">channels_for_cur_subframe</name></name></expr>;</condition> <incr pos:start="227:59" pos:end="227:61"><expr pos:start="227:59" pos:end="227:61"><name pos:start="227:59" pos:end="227:59">i</name><operator pos:start="227:60" pos:end="227:61">++</operator></expr></incr>)</control> <block pos:start="227:64" pos:end="243:13">{<block_content pos:start="229:17" pos:end="241:62">

                <decl_stmt pos:start="229:17" pos:end="229:63"><decl pos:start="229:17" pos:end="229:62"><type pos:start="229:17" pos:end="229:19"><name pos:start="229:17" pos:end="229:19">int</name></type> <name pos:start="229:21" pos:end="229:21">c</name> <init pos:start="229:23" pos:end="229:62">= <expr pos:start="229:25" pos:end="229:62"><name pos:start="229:25" pos:end="229:62"><name pos:start="229:25" pos:end="229:25">s</name><operator pos:start="229:26" pos:end="229:27">-&gt;</operator><name pos:start="229:28" pos:end="229:59">channel_indexes_for_cur_subframe</name><index pos:start="229:60" pos:end="229:62">[<expr pos:start="229:61" pos:end="229:61"><name pos:start="229:61" pos:end="229:61">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="231:17" pos:end="231:69"><decl pos:start="231:17" pos:end="231:68"><type pos:start="231:17" pos:end="231:19"><name pos:start="231:17" pos:end="231:19">int</name></type> <name pos:start="231:21" pos:end="231:34">num_vec_coeffs</name> <init pos:start="231:36" pos:end="231:68">= <expr pos:start="231:38" pos:end="231:68"><call pos:start="231:38" pos:end="231:63"><name pos:start="231:38" pos:end="231:45">get_bits</name><argument_list pos:start="231:46" pos:end="231:63">(<argument pos:start="231:47" pos:end="231:52"><expr pos:start="231:47" pos:end="231:52"><operator pos:start="231:47" pos:end="231:47">&amp;</operator><name pos:start="231:48" pos:end="231:52"><name pos:start="231:48" pos:end="231:48">s</name><operator pos:start="231:49" pos:end="231:50">-&gt;</operator><name pos:start="231:51" pos:end="231:52">gb</name></name></expr></argument>, <argument pos:start="231:55" pos:end="231:62"><expr pos:start="231:55" pos:end="231:62"><name pos:start="231:55" pos:end="231:62">num_bits</name></expr></argument>)</argument_list></call> <operator pos:start="231:65" pos:end="231:66">&lt;&lt;</operator> <literal type="number" pos:start="231:68" pos:end="231:68">2</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="233:17" pos:end="239:17"><if pos:start="233:17" pos:end="239:17">if <condition pos:start="233:20" pos:end="233:59">(<expr pos:start="233:21" pos:end="233:58"><name pos:start="233:21" pos:end="233:34">num_vec_coeffs</name> <operator pos:start="233:36" pos:end="233:36">&gt;</operator> <name pos:start="233:38" pos:end="233:58">WMAPRO_BLOCK_MAX_SIZE</name></expr>)</condition> <block pos:start="233:61" pos:end="239:17">{<block_content pos:start="235:21" pos:end="237:47">

                    <expr_stmt pos:start="235:21" pos:end="235:103"><expr pos:start="235:21" pos:end="235:102"><call pos:start="235:21" pos:end="235:102"><name pos:start="235:21" pos:end="235:26">av_log</name><argument_list pos:start="235:27" pos:end="235:102">(<argument pos:start="235:28" pos:end="235:35"><expr pos:start="235:28" pos:end="235:35"><name pos:start="235:28" pos:end="235:35"><name pos:start="235:28" pos:end="235:28">s</name><operator pos:start="235:29" pos:end="235:30">-&gt;</operator><name pos:start="235:31" pos:end="235:35">avctx</name></name></expr></argument>, <argument pos:start="235:38" pos:end="235:49"><expr pos:start="235:38" pos:end="235:49"><name pos:start="235:38" pos:end="235:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="235:52" pos:end="235:85"><expr pos:start="235:52" pos:end="235:85"><literal type="string" pos:start="235:52" pos:end="235:85">"num_vec_coeffs %d is too large\n"</literal></expr></argument>, <argument pos:start="235:88" pos:end="235:101"><expr pos:start="235:88" pos:end="235:101"><name pos:start="235:88" pos:end="235:101">num_vec_coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="237:21" pos:end="237:47">return <expr pos:start="237:28" pos:end="237:46"><name pos:start="237:28" pos:end="237:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="241:17" pos:end="241:62"><expr pos:start="241:17" pos:end="241:61"><name pos:start="241:17" pos:end="241:29"><name pos:start="241:17" pos:end="241:17">s</name><operator pos:start="241:18" pos:end="241:19">-&gt;</operator><name pos:start="241:20" pos:end="241:26">channel</name><index pos:start="241:27" pos:end="241:29">[<expr pos:start="241:28" pos:end="241:28"><name pos:start="241:28" pos:end="241:28">c</name></expr>]</index></name><operator pos:start="241:30" pos:end="241:30">.</operator><name pos:start="241:31" pos:end="241:44">num_vec_coeffs</name> <operator pos:start="241:46" pos:end="241:46">=</operator> <name pos:start="241:48" pos:end="241:61">num_vec_coeffs</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="245:11" pos:end="255:9">else <block pos:start="245:16" pos:end="255:9">{<block_content pos:start="247:13" pos:end="253:13">

            <for pos:start="247:13" pos:end="253:13">for <control pos:start="247:17" pos:end="247:62">(<init pos:start="247:18" pos:end="247:23"><expr pos:start="247:18" pos:end="247:22"><name pos:start="247:18" pos:end="247:18">i</name> <operator pos:start="247:20" pos:end="247:20">=</operator> <literal type="number" pos:start="247:22" pos:end="247:22">0</literal></expr>;</init> <condition pos:start="247:25" pos:end="247:57"><expr pos:start="247:25" pos:end="247:56"><name pos:start="247:25" pos:end="247:25">i</name> <operator pos:start="247:27" pos:end="247:27">&lt;</operator> <name pos:start="247:29" pos:end="247:56"><name pos:start="247:29" pos:end="247:29">s</name><operator pos:start="247:30" pos:end="247:31">-&gt;</operator><name pos:start="247:32" pos:end="247:56">channels_for_cur_subframe</name></name></expr>;</condition> <incr pos:start="247:59" pos:end="247:61"><expr pos:start="247:59" pos:end="247:61"><name pos:start="247:59" pos:end="247:59">i</name><operator pos:start="247:60" pos:end="247:61">++</operator></expr></incr>)</control> <block pos:start="247:64" pos:end="253:13">{<block_content pos:start="249:17" pos:end="251:63">

                <decl_stmt pos:start="249:17" pos:end="249:63"><decl pos:start="249:17" pos:end="249:62"><type pos:start="249:17" pos:end="249:19"><name pos:start="249:17" pos:end="249:19">int</name></type> <name pos:start="249:21" pos:end="249:21">c</name> <init pos:start="249:23" pos:end="249:62">= <expr pos:start="249:25" pos:end="249:62"><name pos:start="249:25" pos:end="249:62"><name pos:start="249:25" pos:end="249:25">s</name><operator pos:start="249:26" pos:end="249:27">-&gt;</operator><name pos:start="249:28" pos:end="249:59">channel_indexes_for_cur_subframe</name><index pos:start="249:60" pos:end="249:62">[<expr pos:start="249:61" pos:end="249:61"><name pos:start="249:61" pos:end="249:61">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="251:17" pos:end="251:63"><expr pos:start="251:17" pos:end="251:62"><name pos:start="251:17" pos:end="251:29"><name pos:start="251:17" pos:end="251:17">s</name><operator pos:start="251:18" pos:end="251:19">-&gt;</operator><name pos:start="251:20" pos:end="251:26">channel</name><index pos:start="251:27" pos:end="251:29">[<expr pos:start="251:28" pos:end="251:28"><name pos:start="251:28" pos:end="251:28">c</name></expr>]</index></name><operator pos:start="251:30" pos:end="251:30">.</operator><name pos:start="251:31" pos:end="251:44">num_vec_coeffs</name> <operator pos:start="251:46" pos:end="251:46">=</operator> <name pos:start="251:48" pos:end="251:62"><name pos:start="251:48" pos:end="251:48">s</name><operator pos:start="251:49" pos:end="251:50">-&gt;</operator><name pos:start="251:51" pos:end="251:62">subframe_len</name></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <comment type="block" format="doxygen" pos:start="257:9" pos:end="257:39">/** decode quantization step */</comment>

        <expr_stmt pos:start="259:9" pos:end="259:36"><expr pos:start="259:9" pos:end="259:35"><name pos:start="259:9" pos:end="259:12">step</name> <operator pos:start="259:14" pos:end="259:14">=</operator> <call pos:start="259:16" pos:end="259:35"><name pos:start="259:16" pos:end="259:24">get_sbits</name><argument_list pos:start="259:25" pos:end="259:35">(<argument pos:start="259:26" pos:end="259:31"><expr pos:start="259:26" pos:end="259:31"><operator pos:start="259:26" pos:end="259:26">&amp;</operator><name pos:start="259:27" pos:end="259:31"><name pos:start="259:27" pos:end="259:27">s</name><operator pos:start="259:28" pos:end="259:29">-&gt;</operator><name pos:start="259:30" pos:end="259:31">gb</name></name></expr></argument>, <argument pos:start="259:34" pos:end="259:34"><expr pos:start="259:34" pos:end="259:34"><literal type="number" pos:start="259:34" pos:end="259:34">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:27"><expr pos:start="261:9" pos:end="261:26"><name pos:start="261:9" pos:end="261:18">quant_step</name> <operator pos:start="261:20" pos:end="261:21">+=</operator> <name pos:start="261:23" pos:end="261:26">step</name></expr>;</expr_stmt>

        <if_stmt pos:start="263:9" pos:end="279:9"><if pos:start="263:9" pos:end="279:9">if <condition pos:start="263:12" pos:end="263:38">(<expr pos:start="263:13" pos:end="263:37"><name pos:start="263:13" pos:end="263:16">step</name> <operator pos:start="263:18" pos:end="263:19">==</operator> <operator pos:start="263:21" pos:end="263:21">-</operator><literal type="number" pos:start="263:22" pos:end="263:23">32</literal> <operator pos:start="263:25" pos:end="263:26">||</operator> <name pos:start="263:28" pos:end="263:31">step</name> <operator pos:start="263:33" pos:end="263:34">==</operator> <literal type="number" pos:start="263:36" pos:end="263:37">31</literal></expr>)</condition> <block pos:start="263:40" pos:end="279:9">{<block_content pos:start="265:13" pos:end="277:57">

            <decl_stmt pos:start="265:13" pos:end="265:46"><decl pos:start="265:13" pos:end="265:45"><type pos:start="265:13" pos:end="265:21"><specifier pos:start="265:13" pos:end="265:17">const</specifier> <name pos:start="265:19" pos:end="265:21">int</name></type> <name pos:start="265:23" pos:end="265:26">sign</name> <init pos:start="265:28" pos:end="265:45">= <expr pos:start="265:30" pos:end="265:45"><operator pos:start="265:30" pos:end="265:30">(</operator><name pos:start="265:31" pos:end="265:34">step</name> <operator pos:start="265:36" pos:end="265:37">==</operator> <literal type="number" pos:start="265:39" pos:end="265:40">31</literal><operator pos:start="265:41" pos:end="265:41">)</operator> <operator pos:start="265:43" pos:end="265:43">-</operator> <literal type="number" pos:start="265:45" pos:end="265:45">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="267:13" pos:end="267:26"><decl pos:start="267:13" pos:end="267:25"><type pos:start="267:13" pos:end="267:15"><name pos:start="267:13" pos:end="267:15">int</name></type> <name pos:start="267:17" pos:end="267:21">quant</name> <init pos:start="267:23" pos:end="267:25">= <expr pos:start="267:25" pos:end="267:25"><literal type="number" pos:start="267:25" pos:end="267:25">0</literal></expr></init></decl>;</decl_stmt>

            <while pos:start="269:13" pos:end="275:13">while <condition pos:start="269:19" pos:end="271:54">(<expr pos:start="269:20" pos:end="271:53"><call pos:start="269:20" pos:end="269:41"><name pos:start="269:20" pos:end="269:33">get_bits_count</name><argument_list pos:start="269:34" pos:end="269:41">(<argument pos:start="269:35" pos:end="269:40"><expr pos:start="269:35" pos:end="269:40"><operator pos:start="269:35" pos:end="269:35">&amp;</operator><name pos:start="269:36" pos:end="269:40"><name pos:start="269:36" pos:end="269:36">s</name><operator pos:start="269:37" pos:end="269:38">-&gt;</operator><name pos:start="269:39" pos:end="269:40">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="269:43" pos:end="269:43">+</operator> <literal type="number" pos:start="269:45" pos:end="269:45">5</literal> <operator pos:start="269:47" pos:end="269:47">&lt;</operator> <name pos:start="269:49" pos:end="269:65"><name pos:start="269:49" pos:end="269:49">s</name><operator pos:start="269:50" pos:end="269:51">-&gt;</operator><name pos:start="269:52" pos:end="269:65">num_saved_bits</name></name> <operator pos:start="269:67" pos:end="269:68">&amp;&amp;</operator>

                   <operator pos:start="271:20" pos:end="271:20">(</operator><name pos:start="271:21" pos:end="271:24">step</name> <operator pos:start="271:26" pos:end="271:26">=</operator> <call pos:start="271:28" pos:end="271:46"><name pos:start="271:28" pos:end="271:35">get_bits</name><argument_list pos:start="271:36" pos:end="271:46">(<argument pos:start="271:37" pos:end="271:42"><expr pos:start="271:37" pos:end="271:42"><operator pos:start="271:37" pos:end="271:37">&amp;</operator><name pos:start="271:38" pos:end="271:42"><name pos:start="271:38" pos:end="271:38">s</name><operator pos:start="271:39" pos:end="271:40">-&gt;</operator><name pos:start="271:41" pos:end="271:42">gb</name></name></expr></argument>, <argument pos:start="271:45" pos:end="271:45"><expr pos:start="271:45" pos:end="271:45"><literal type="number" pos:start="271:45" pos:end="271:45">5</literal></expr></argument>)</argument_list></call><operator pos:start="271:47" pos:end="271:47">)</operator> <operator pos:start="271:49" pos:end="271:50">==</operator> <literal type="number" pos:start="271:52" pos:end="271:53">31</literal></expr>)</condition> <block pos:start="271:56" pos:end="275:13">{<block_content pos:start="273:17" pos:end="273:28">

                <expr_stmt pos:start="273:17" pos:end="273:28"><expr pos:start="273:17" pos:end="273:27"><name pos:start="273:17" pos:end="273:21">quant</name> <operator pos:start="273:23" pos:end="273:24">+=</operator> <literal type="number" pos:start="273:26" pos:end="273:27">31</literal></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="277:13" pos:end="277:57"><expr pos:start="277:13" pos:end="277:56"><name pos:start="277:13" pos:end="277:22">quant_step</name> <operator pos:start="277:24" pos:end="277:25">+=</operator> <operator pos:start="277:27" pos:end="277:27">(</operator><operator pos:start="277:28" pos:end="277:28">(</operator><name pos:start="277:29" pos:end="277:33">quant</name> <operator pos:start="277:35" pos:end="277:35">+</operator> <name pos:start="277:37" pos:end="277:40">step</name><operator pos:start="277:41" pos:end="277:41">)</operator> <operator pos:start="277:43" pos:end="277:43">^</operator> <name pos:start="277:45" pos:end="277:48">sign</name><operator pos:start="277:49" pos:end="277:49">)</operator> <operator pos:start="277:51" pos:end="277:51">-</operator> <name pos:start="277:53" pos:end="277:56">sign</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="281:9" pos:end="285:9"><if pos:start="281:9" pos:end="285:9">if <condition pos:start="281:12" pos:end="281:27">(<expr pos:start="281:13" pos:end="281:26"><name pos:start="281:13" pos:end="281:22">quant_step</name> <operator pos:start="281:24" pos:end="281:24">&lt;</operator> <literal type="number" pos:start="281:26" pos:end="281:26">0</literal></expr>)</condition> <block pos:start="281:29" pos:end="285:9">{<block_content pos:start="283:13" pos:end="283:68">

            <expr_stmt pos:start="283:13" pos:end="283:68"><expr pos:start="283:13" pos:end="283:67"><call pos:start="283:13" pos:end="283:67"><name pos:start="283:13" pos:end="283:18">av_log</name><argument_list pos:start="283:19" pos:end="283:67">(<argument pos:start="283:20" pos:end="283:27"><expr pos:start="283:20" pos:end="283:27"><name pos:start="283:20" pos:end="283:27"><name pos:start="283:20" pos:end="283:20">s</name><operator pos:start="283:21" pos:end="283:22">-&gt;</operator><name pos:start="283:23" pos:end="283:27">avctx</name></name></expr></argument>, <argument pos:start="283:30" pos:end="283:41"><expr pos:start="283:30" pos:end="283:41"><name pos:start="283:30" pos:end="283:41">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="283:44" pos:end="283:66"><expr pos:start="283:44" pos:end="283:66"><literal type="string" pos:start="283:44" pos:end="283:66">"negative quant step\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" format="doxygen" pos:start="289:9" pos:end="289:67">/** decode quantization step modifiers for every channel */</comment>



        <if_stmt pos:start="293:9" pos:end="321:9"><if pos:start="293:9" pos:end="297:9">if <condition pos:start="293:12" pos:end="293:46">(<expr pos:start="293:13" pos:end="293:45"><name pos:start="293:13" pos:end="293:40"><name pos:start="293:13" pos:end="293:13">s</name><operator pos:start="293:14" pos:end="293:15">-&gt;</operator><name pos:start="293:16" pos:end="293:40">channels_for_cur_subframe</name></name> <operator pos:start="293:42" pos:end="293:43">==</operator> <literal type="number" pos:start="293:45" pos:end="293:45">1</literal></expr>)</condition> <block pos:start="293:48" pos:end="297:9">{<block_content pos:start="295:13" pos:end="295:87">

            <expr_stmt pos:start="295:13" pos:end="295:87"><expr pos:start="295:13" pos:end="295:86"><name pos:start="295:13" pos:end="295:62"><name pos:start="295:13" pos:end="295:13">s</name><operator pos:start="295:14" pos:end="295:15">-&gt;</operator><name pos:start="295:16" pos:end="295:22">channel</name><index pos:start="295:23" pos:end="295:62">[<expr pos:start="295:24" pos:end="295:61"><name pos:start="295:24" pos:end="295:61"><name pos:start="295:24" pos:end="295:24">s</name><operator pos:start="295:25" pos:end="295:26">-&gt;</operator><name pos:start="295:27" pos:end="295:58">channel_indexes_for_cur_subframe</name><index pos:start="295:59" pos:end="295:61">[<expr pos:start="295:60" pos:end="295:60"><literal type="number" pos:start="295:60" pos:end="295:60">0</literal></expr>]</index></name></expr>]</index></name><operator pos:start="295:63" pos:end="295:63">.</operator><name pos:start="295:64" pos:end="295:73">quant_step</name> <operator pos:start="295:75" pos:end="295:75">=</operator> <name pos:start="295:77" pos:end="295:86">quant_step</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="297:11" pos:end="321:9">else <block pos:start="297:16" pos:end="321:9">{<block_content pos:start="299:13" pos:end="319:13">

            <decl_stmt pos:start="299:13" pos:end="299:51"><decl pos:start="299:13" pos:end="299:50"><type pos:start="299:13" pos:end="299:15"><name pos:start="299:13" pos:end="299:15">int</name></type> <name pos:start="299:17" pos:end="299:28">modifier_len</name> <init pos:start="299:30" pos:end="299:50">= <expr pos:start="299:32" pos:end="299:50"><call pos:start="299:32" pos:end="299:50"><name pos:start="299:32" pos:end="299:39">get_bits</name><argument_list pos:start="299:40" pos:end="299:50">(<argument pos:start="299:41" pos:end="299:46"><expr pos:start="299:41" pos:end="299:46"><operator pos:start="299:41" pos:end="299:41">&amp;</operator><name pos:start="299:42" pos:end="299:46"><name pos:start="299:42" pos:end="299:42">s</name><operator pos:start="299:43" pos:end="299:44">-&gt;</operator><name pos:start="299:45" pos:end="299:46">gb</name></name></expr></argument>, <argument pos:start="299:49" pos:end="299:49"><expr pos:start="299:49" pos:end="299:49"><literal type="number" pos:start="299:49" pos:end="299:49">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:start="301:13" pos:end="319:13">for <control pos:start="301:17" pos:end="301:62">(<init pos:start="301:18" pos:end="301:23"><expr pos:start="301:18" pos:end="301:22"><name pos:start="301:18" pos:end="301:18">i</name> <operator pos:start="301:20" pos:end="301:20">=</operator> <literal type="number" pos:start="301:22" pos:end="301:22">0</literal></expr>;</init> <condition pos:start="301:25" pos:end="301:57"><expr pos:start="301:25" pos:end="301:56"><name pos:start="301:25" pos:end="301:25">i</name> <operator pos:start="301:27" pos:end="301:27">&lt;</operator> <name pos:start="301:29" pos:end="301:56"><name pos:start="301:29" pos:end="301:29">s</name><operator pos:start="301:30" pos:end="301:31">-&gt;</operator><name pos:start="301:32" pos:end="301:56">channels_for_cur_subframe</name></name></expr>;</condition> <incr pos:start="301:59" pos:end="301:61"><expr pos:start="301:59" pos:end="301:61"><name pos:start="301:59" pos:end="301:59">i</name><operator pos:start="301:60" pos:end="301:61">++</operator></expr></incr>)</control> <block pos:start="301:64" pos:end="319:13">{<block_content pos:start="303:17" pos:end="317:17">

                <decl_stmt pos:start="303:17" pos:end="303:63"><decl pos:start="303:17" pos:end="303:62"><type pos:start="303:17" pos:end="303:19"><name pos:start="303:17" pos:end="303:19">int</name></type> <name pos:start="303:21" pos:end="303:21">c</name> <init pos:start="303:23" pos:end="303:62">= <expr pos:start="303:25" pos:end="303:62"><name pos:start="303:25" pos:end="303:62"><name pos:start="303:25" pos:end="303:25">s</name><operator pos:start="303:26" pos:end="303:27">-&gt;</operator><name pos:start="303:28" pos:end="303:59">channel_indexes_for_cur_subframe</name><index pos:start="303:60" pos:end="303:62">[<expr pos:start="303:61" pos:end="303:61"><name pos:start="303:61" pos:end="303:61">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="305:17" pos:end="305:54"><expr pos:start="305:17" pos:end="305:53"><name pos:start="305:17" pos:end="305:29"><name pos:start="305:17" pos:end="305:17">s</name><operator pos:start="305:18" pos:end="305:19">-&gt;</operator><name pos:start="305:20" pos:end="305:26">channel</name><index pos:start="305:27" pos:end="305:29">[<expr pos:start="305:28" pos:end="305:28"><name pos:start="305:28" pos:end="305:28">c</name></expr>]</index></name><operator pos:start="305:30" pos:end="305:30">.</operator><name pos:start="305:31" pos:end="305:40">quant_step</name> <operator pos:start="305:42" pos:end="305:42">=</operator> <name pos:start="305:44" pos:end="305:53">quant_step</name></expr>;</expr_stmt>

                <if_stmt pos:start="307:17" pos:end="317:17"><if pos:start="307:17" pos:end="317:17">if <condition pos:start="307:20" pos:end="307:38">(<expr pos:start="307:21" pos:end="307:37"><call pos:start="307:21" pos:end="307:37"><name pos:start="307:21" pos:end="307:29">get_bits1</name><argument_list pos:start="307:30" pos:end="307:37">(<argument pos:start="307:31" pos:end="307:36"><expr pos:start="307:31" pos:end="307:36"><operator pos:start="307:31" pos:end="307:31">&amp;</operator><name pos:start="307:32" pos:end="307:36"><name pos:start="307:32" pos:end="307:32">s</name><operator pos:start="307:33" pos:end="307:34">-&gt;</operator><name pos:start="307:35" pos:end="307:36">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="307:40" pos:end="317:17">{<block_content pos:start="309:21" pos:end="315:51">

                    <if_stmt pos:start="309:21" pos:end="315:51"><if pos:start="309:21" pos:end="313:21">if <condition pos:start="309:24" pos:end="309:37">(<expr pos:start="309:25" pos:end="309:36"><name pos:start="309:25" pos:end="309:36">modifier_len</name></expr>)</condition> <block pos:start="309:39" pos:end="313:21">{<block_content pos:start="311:25" pos:end="311:87">

                        <expr_stmt pos:start="311:25" pos:end="311:87"><expr pos:start="311:25" pos:end="311:86"><name pos:start="311:25" pos:end="311:37"><name pos:start="311:25" pos:end="311:25">s</name><operator pos:start="311:26" pos:end="311:27">-&gt;</operator><name pos:start="311:28" pos:end="311:34">channel</name><index pos:start="311:35" pos:end="311:37">[<expr pos:start="311:36" pos:end="311:36"><name pos:start="311:36" pos:end="311:36">c</name></expr>]</index></name><operator pos:start="311:38" pos:end="311:38">.</operator><name pos:start="311:39" pos:end="311:48">quant_step</name> <operator pos:start="311:50" pos:end="311:51">+=</operator> <call pos:start="311:53" pos:end="311:82"><name pos:start="311:53" pos:end="311:60">get_bits</name><argument_list pos:start="311:61" pos:end="311:82">(<argument pos:start="311:62" pos:end="311:67"><expr pos:start="311:62" pos:end="311:67"><operator pos:start="311:62" pos:end="311:62">&amp;</operator><name pos:start="311:63" pos:end="311:67"><name pos:start="311:63" pos:end="311:63">s</name><operator pos:start="311:64" pos:end="311:65">-&gt;</operator><name pos:start="311:66" pos:end="311:67">gb</name></name></expr></argument>, <argument pos:start="311:70" pos:end="311:81"><expr pos:start="311:70" pos:end="311:81"><name pos:start="311:70" pos:end="311:81">modifier_len</name></expr></argument>)</argument_list></call> <operator pos:start="311:84" pos:end="311:84">+</operator> <literal type="number" pos:start="311:86" pos:end="311:86">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="313:23" pos:end="315:51">else<block type="pseudo" pos:start="315:25" pos:end="315:51"><block_content pos:start="315:25" pos:end="315:51">

                        <expr_stmt pos:start="315:25" pos:end="315:51"><expr pos:start="315:25" pos:end="315:50"><operator pos:start="315:25" pos:end="315:26">++</operator><name pos:start="315:27" pos:end="315:39"><name pos:start="315:27" pos:end="315:27">s</name><operator pos:start="315:28" pos:end="315:29">-&gt;</operator><name pos:start="315:30" pos:end="315:36">channel</name><index pos:start="315:37" pos:end="315:39">[<expr pos:start="315:38" pos:end="315:38"><name pos:start="315:38" pos:end="315:38">c</name></expr>]</index></name><operator pos:start="315:40" pos:end="315:40">.</operator><name pos:start="315:41" pos:end="315:50">quant_step</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>



        <comment type="block" format="doxygen" pos:start="325:9" pos:end="325:35">/** decode scale factors */</comment>

        <if_stmt pos:start="327:9" pos:end="329:39"><if pos:start="327:9" pos:end="329:39">if <condition pos:start="327:12" pos:end="327:40">(<expr pos:start="327:13" pos:end="327:39"><call pos:start="327:13" pos:end="327:35"><name pos:start="327:13" pos:end="327:32">decode_scale_factors</name><argument_list pos:start="327:33" pos:end="327:35">(<argument pos:start="327:34" pos:end="327:34"><expr pos:start="327:34" pos:end="327:34"><name pos:start="327:34" pos:end="327:34">s</name></expr></argument>)</argument_list></call> <operator pos:start="327:37" pos:end="327:37">&lt;</operator> <literal type="number" pos:start="327:39" pos:end="327:39">0</literal></expr>)</condition><block type="pseudo" pos:start="329:13" pos:end="329:39"><block_content pos:start="329:13" pos:end="329:39">

            <return pos:start="329:13" pos:end="329:39">return <expr pos:start="329:20" pos:end="329:38"><name pos:start="329:20" pos:end="329:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="335:5" pos:end="337:57"><expr pos:start="335:5" pos:end="337:56"><call pos:start="335:5" pos:end="337:56"><name pos:start="335:5" pos:end="335:11">av_dlog</name><argument_list pos:start="335:12" pos:end="337:56">(<argument pos:start="335:13" pos:end="335:20"><expr pos:start="335:13" pos:end="335:20"><name pos:start="335:13" pos:end="335:20"><name pos:start="335:13" pos:end="335:13">s</name><operator pos:start="335:14" pos:end="335:15">-&gt;</operator><name pos:start="335:16" pos:end="335:20">avctx</name></name></expr></argument>, <argument pos:start="335:23" pos:end="335:66"><expr pos:start="335:23" pos:end="335:66"><literal type="string" pos:start="335:23" pos:end="335:66">"BITSTREAM: subframe header length was %i\n"</literal></expr></argument>,

            <argument pos:start="337:13" pos:end="337:55"><expr pos:start="337:13" pos:end="337:55"><call pos:start="337:13" pos:end="337:34"><name pos:start="337:13" pos:end="337:26">get_bits_count</name><argument_list pos:start="337:27" pos:end="337:34">(<argument pos:start="337:28" pos:end="337:33"><expr pos:start="337:28" pos:end="337:33"><operator pos:start="337:28" pos:end="337:28">&amp;</operator><name pos:start="337:29" pos:end="337:33"><name pos:start="337:29" pos:end="337:29">s</name><operator pos:start="337:30" pos:end="337:31">-&gt;</operator><name pos:start="337:32" pos:end="337:33">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="337:36" pos:end="337:36">-</operator> <name pos:start="337:38" pos:end="337:55"><name pos:start="337:38" pos:end="337:38">s</name><operator pos:start="337:39" pos:end="337:40">-&gt;</operator><name pos:start="337:41" pos:end="337:55">subframe_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="341:5" pos:end="341:29">/** parse coefficients */</comment>

    <for pos:start="343:5" pos:end="359:5">for <control pos:start="343:9" pos:end="343:54">(<init pos:start="343:10" pos:end="343:15"><expr pos:start="343:10" pos:end="343:14"><name pos:start="343:10" pos:end="343:10">i</name> <operator pos:start="343:12" pos:end="343:12">=</operator> <literal type="number" pos:start="343:14" pos:end="343:14">0</literal></expr>;</init> <condition pos:start="343:17" pos:end="343:49"><expr pos:start="343:17" pos:end="343:48"><name pos:start="343:17" pos:end="343:17">i</name> <operator pos:start="343:19" pos:end="343:19">&lt;</operator> <name pos:start="343:21" pos:end="343:48"><name pos:start="343:21" pos:end="343:21">s</name><operator pos:start="343:22" pos:end="343:23">-&gt;</operator><name pos:start="343:24" pos:end="343:48">channels_for_cur_subframe</name></name></expr>;</condition> <incr pos:start="343:51" pos:end="343:53"><expr pos:start="343:51" pos:end="343:53"><name pos:start="343:51" pos:end="343:51">i</name><operator pos:start="343:52" pos:end="343:53">++</operator></expr></incr>)</control> <block pos:start="343:56" pos:end="359:5">{<block_content pos:start="345:9" pos:end="357:65">

        <decl_stmt pos:start="345:9" pos:end="345:55"><decl pos:start="345:9" pos:end="345:54"><type pos:start="345:9" pos:end="345:11"><name pos:start="345:9" pos:end="345:11">int</name></type> <name pos:start="345:13" pos:end="345:13">c</name> <init pos:start="345:15" pos:end="345:54">= <expr pos:start="345:17" pos:end="345:54"><name pos:start="345:17" pos:end="345:54"><name pos:start="345:17" pos:end="345:17">s</name><operator pos:start="345:18" pos:end="345:19">-&gt;</operator><name pos:start="345:20" pos:end="345:51">channel_indexes_for_cur_subframe</name><index pos:start="345:52" pos:end="345:54">[<expr pos:start="345:53" pos:end="345:53"><name pos:start="345:53" pos:end="345:53">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="347:9" pos:end="357:65"><if pos:start="347:9" pos:end="353:9">if <condition pos:start="347:12" pos:end="349:55">(<expr pos:start="347:13" pos:end="349:54"><name pos:start="347:13" pos:end="347:25"><name pos:start="347:13" pos:end="347:13">s</name><operator pos:start="347:14" pos:end="347:15">-&gt;</operator><name pos:start="347:16" pos:end="347:22">channel</name><index pos:start="347:23" pos:end="347:25">[<expr pos:start="347:24" pos:end="347:24"><name pos:start="347:24" pos:end="347:24">c</name></expr>]</index></name><operator pos:start="347:26" pos:end="347:26">.</operator><name pos:start="347:27" pos:end="347:40">transmit_coefs</name> <operator pos:start="347:42" pos:end="347:43">&amp;&amp;</operator>

            <call pos:start="349:13" pos:end="349:34"><name pos:start="349:13" pos:end="349:26">get_bits_count</name><argument_list pos:start="349:27" pos:end="349:34">(<argument pos:start="349:28" pos:end="349:33"><expr pos:start="349:28" pos:end="349:33"><operator pos:start="349:28" pos:end="349:28">&amp;</operator><name pos:start="349:29" pos:end="349:33"><name pos:start="349:29" pos:end="349:29">s</name><operator pos:start="349:30" pos:end="349:31">-&gt;</operator><name pos:start="349:32" pos:end="349:33">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="349:36" pos:end="349:36">&lt;</operator> <name pos:start="349:38" pos:end="349:54"><name pos:start="349:38" pos:end="349:38">s</name><operator pos:start="349:39" pos:end="349:40">-&gt;</operator><name pos:start="349:41" pos:end="349:54">num_saved_bits</name></name></expr>)</condition> <block pos:start="349:57" pos:end="353:9">{<block_content pos:start="351:13" pos:end="351:32">

            <expr_stmt pos:start="351:13" pos:end="351:32"><expr pos:start="351:13" pos:end="351:31"><call pos:start="351:13" pos:end="351:31"><name pos:start="351:13" pos:end="351:25">decode_coeffs</name><argument_list pos:start="351:26" pos:end="351:31">(<argument pos:start="351:27" pos:end="351:27"><expr pos:start="351:27" pos:end="351:27"><name pos:start="351:27" pos:end="351:27">s</name></expr></argument>, <argument pos:start="351:30" pos:end="351:30"><expr pos:start="351:30" pos:end="351:30"><name pos:start="351:30" pos:end="351:30">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="353:11" pos:end="357:65">else<block type="pseudo" pos:start="355:13" pos:end="357:65"><block_content pos:start="355:13" pos:end="357:65">

            <expr_stmt pos:start="355:13" pos:end="357:65"><expr pos:start="355:13" pos:end="357:64"><call pos:start="355:13" pos:end="357:64"><name pos:start="355:13" pos:end="355:18">memset</name><argument_list pos:start="355:19" pos:end="357:64">(<argument pos:start="355:20" pos:end="355:39"><expr pos:start="355:20" pos:end="355:39"><name pos:start="355:20" pos:end="355:32"><name pos:start="355:20" pos:end="355:20">s</name><operator pos:start="355:21" pos:end="355:22">-&gt;</operator><name pos:start="355:23" pos:end="355:29">channel</name><index pos:start="355:30" pos:end="355:32">[<expr pos:start="355:31" pos:end="355:31"><name pos:start="355:31" pos:end="355:31">c</name></expr>]</index></name><operator pos:start="355:33" pos:end="355:33">.</operator><name pos:start="355:34" pos:end="355:39">coeffs</name></expr></argument>, <argument pos:start="355:42" pos:end="355:42"><expr pos:start="355:42" pos:end="355:42"><literal type="number" pos:start="355:42" pos:end="355:42">0</literal></expr></argument>,

                   <argument pos:start="357:20" pos:end="357:63"><expr pos:start="357:20" pos:end="357:63"><sizeof pos:start="357:20" pos:end="357:48">sizeof<argument_list pos:start="357:26" pos:end="357:48">(<argument pos:start="357:27" pos:end="357:47"><expr pos:start="357:27" pos:end="357:47"><operator pos:start="357:27" pos:end="357:27">*</operator><name pos:start="357:28" pos:end="357:40"><name pos:start="357:28" pos:end="357:28">s</name><operator pos:start="357:29" pos:end="357:30">-&gt;</operator><name pos:start="357:31" pos:end="357:37">channel</name><index pos:start="357:38" pos:end="357:40">[<expr pos:start="357:39" pos:end="357:39"><name pos:start="357:39" pos:end="357:39">c</name></expr>]</index></name><operator pos:start="357:41" pos:end="357:41">.</operator><name pos:start="357:42" pos:end="357:47">coeffs</name></expr></argument>)</argument_list></sizeof> <operator pos:start="357:50" pos:end="357:50">*</operator> <name pos:start="357:52" pos:end="357:63">subframe_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="363:5" pos:end="365:57"><expr pos:start="363:5" pos:end="365:56"><call pos:start="363:5" pos:end="365:56"><name pos:start="363:5" pos:end="363:11">av_dlog</name><argument_list pos:start="363:12" pos:end="365:56">(<argument pos:start="363:13" pos:end="363:20"><expr pos:start="363:13" pos:end="363:20"><name pos:start="363:13" pos:end="363:20"><name pos:start="363:13" pos:end="363:13">s</name><operator pos:start="363:14" pos:end="363:15">-&gt;</operator><name pos:start="363:16" pos:end="363:20">avctx</name></name></expr></argument>, <argument pos:start="363:23" pos:end="363:59"><expr pos:start="363:23" pos:end="363:59"><literal type="string" pos:start="363:23" pos:end="363:59">"BITSTREAM: subframe length was %i\n"</literal></expr></argument>,

            <argument pos:start="365:13" pos:end="365:55"><expr pos:start="365:13" pos:end="365:55"><call pos:start="365:13" pos:end="365:34"><name pos:start="365:13" pos:end="365:26">get_bits_count</name><argument_list pos:start="365:27" pos:end="365:34">(<argument pos:start="365:28" pos:end="365:33"><expr pos:start="365:28" pos:end="365:33"><operator pos:start="365:28" pos:end="365:28">&amp;</operator><name pos:start="365:29" pos:end="365:33"><name pos:start="365:29" pos:end="365:29">s</name><operator pos:start="365:30" pos:end="365:31">-&gt;</operator><name pos:start="365:32" pos:end="365:33">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="365:36" pos:end="365:36">-</operator> <name pos:start="365:38" pos:end="365:55"><name pos:start="365:38" pos:end="365:38">s</name><operator pos:start="365:39" pos:end="365:40">-&gt;</operator><name pos:start="365:41" pos:end="365:55">subframe_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="369:5" pos:end="427:5"><if pos:start="369:5" pos:end="427:5">if <condition pos:start="369:8" pos:end="369:24">(<expr pos:start="369:9" pos:end="369:23"><name pos:start="369:9" pos:end="369:23">transmit_coeffs</name></expr>)</condition> <block pos:start="369:26" pos:end="427:5">{<block_content pos:start="371:9" pos:end="425:9">

        <decl_stmt pos:start="371:9" pos:end="371:87"><decl pos:start="371:9" pos:end="371:86"><type pos:start="371:9" pos:end="371:20"><name pos:start="371:9" pos:end="371:18">FFTContext</name> <modifier pos:start="371:20" pos:end="371:20">*</modifier></type><name pos:start="371:21" pos:end="371:24">mdct</name> <init pos:start="371:26" pos:end="371:86">= <expr pos:start="371:28" pos:end="371:86"><operator pos:start="371:28" pos:end="371:28">&amp;</operator><name pos:start="371:29" pos:end="371:86"><name pos:start="371:29" pos:end="371:29">s</name><operator pos:start="371:30" pos:end="371:31">-&gt;</operator><name pos:start="371:32" pos:end="371:39">mdct_ctx</name><index pos:start="371:40" pos:end="371:86">[<expr pos:start="371:41" pos:end="371:85"><call pos:start="371:41" pos:end="371:61"><name pos:start="371:41" pos:end="371:47">av_log2</name><argument_list pos:start="371:48" pos:end="371:61">(<argument pos:start="371:49" pos:end="371:60"><expr pos:start="371:49" pos:end="371:60"><name pos:start="371:49" pos:end="371:60">subframe_len</name></expr></argument>)</argument_list></call> <operator pos:start="371:63" pos:end="371:63">-</operator> <name pos:start="371:65" pos:end="371:85">WMAPRO_BLOCK_MIN_BITS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="block" format="doxygen" pos:start="373:9" pos:end="373:47">/** reconstruct the per channel data */</comment>

        <expr_stmt pos:start="375:9" pos:end="375:37"><expr pos:start="375:9" pos:end="375:36"><call pos:start="375:9" pos:end="375:36"><name pos:start="375:9" pos:end="375:33">inverse_channel_transform</name><argument_list pos:start="375:34" pos:end="375:36">(<argument pos:start="375:35" pos:end="375:35"><expr pos:start="375:35" pos:end="375:35"><name pos:start="375:35" pos:end="375:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="377:9" pos:end="425:9">for <control pos:start="377:13" pos:end="377:58">(<init pos:start="377:14" pos:end="377:19"><expr pos:start="377:14" pos:end="377:18"><name pos:start="377:14" pos:end="377:14">i</name> <operator pos:start="377:16" pos:end="377:16">=</operator> <literal type="number" pos:start="377:18" pos:end="377:18">0</literal></expr>;</init> <condition pos:start="377:21" pos:end="377:53"><expr pos:start="377:21" pos:end="377:52"><name pos:start="377:21" pos:end="377:21">i</name> <operator pos:start="377:23" pos:end="377:23">&lt;</operator> <name pos:start="377:25" pos:end="377:52"><name pos:start="377:25" pos:end="377:25">s</name><operator pos:start="377:26" pos:end="377:27">-&gt;</operator><name pos:start="377:28" pos:end="377:52">channels_for_cur_subframe</name></name></expr>;</condition> <incr pos:start="377:55" pos:end="377:57"><expr pos:start="377:55" pos:end="377:57"><name pos:start="377:55" pos:end="377:55">i</name><operator pos:start="377:56" pos:end="377:57">++</operator></expr></incr>)</control> <block pos:start="377:60" pos:end="425:9">{<block_content pos:start="379:13" pos:end="423:65">

            <decl_stmt pos:start="379:13" pos:end="379:59"><decl pos:start="379:13" pos:end="379:58"><type pos:start="379:13" pos:end="379:15"><name pos:start="379:13" pos:end="379:15">int</name></type> <name pos:start="379:17" pos:end="379:17">c</name> <init pos:start="379:19" pos:end="379:58">= <expr pos:start="379:21" pos:end="379:58"><name pos:start="379:21" pos:end="379:58"><name pos:start="379:21" pos:end="379:21">s</name><operator pos:start="379:22" pos:end="379:23">-&gt;</operator><name pos:start="379:24" pos:end="379:55">channel_indexes_for_cur_subframe</name><index pos:start="379:56" pos:end="379:58">[<expr pos:start="379:57" pos:end="379:57"><name pos:start="379:57" pos:end="379:57">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="381:13" pos:end="381:56"><decl pos:start="381:13" pos:end="381:55"><type pos:start="381:13" pos:end="381:22"><specifier pos:start="381:13" pos:end="381:17">const</specifier> <name pos:start="381:19" pos:end="381:21">int</name><modifier pos:start="381:22" pos:end="381:22">*</modifier></type> <name pos:start="381:24" pos:end="381:25">sf</name> <init pos:start="381:27" pos:end="381:55">= <expr pos:start="381:29" pos:end="381:55"><name pos:start="381:29" pos:end="381:41"><name pos:start="381:29" pos:end="381:29">s</name><operator pos:start="381:30" pos:end="381:31">-&gt;</operator><name pos:start="381:32" pos:end="381:38">channel</name><index pos:start="381:39" pos:end="381:41">[<expr pos:start="381:40" pos:end="381:40"><name pos:start="381:40" pos:end="381:40">c</name></expr>]</index></name><operator pos:start="381:42" pos:end="381:42">.</operator><name pos:start="381:43" pos:end="381:55">scale_factors</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="383:13" pos:end="383:18"><decl pos:start="383:13" pos:end="383:17"><type pos:start="383:13" pos:end="383:15"><name pos:start="383:13" pos:end="383:15">int</name></type> <name pos:start="383:17" pos:end="383:17">b</name></decl>;</decl_stmt>



            <if_stmt pos:start="387:13" pos:end="391:62"><if pos:start="387:13" pos:end="391:62">if <condition pos:start="387:16" pos:end="387:36">(<expr pos:start="387:17" pos:end="387:35"><name pos:start="387:17" pos:end="387:17">c</name> <operator pos:start="387:19" pos:end="387:20">==</operator> <name pos:start="387:22" pos:end="387:35"><name pos:start="387:22" pos:end="387:22">s</name><operator pos:start="387:23" pos:end="387:24">-&gt;</operator><name pos:start="387:25" pos:end="387:35">lfe_channel</name></name></expr>)</condition><block type="pseudo" pos:start="389:17" pos:end="391:62"><block_content pos:start="389:17" pos:end="391:62">

                <expr_stmt pos:start="389:17" pos:end="391:62"><expr pos:start="389:17" pos:end="391:61"><call pos:start="389:17" pos:end="391:61"><name pos:start="389:17" pos:end="389:22">memset</name><argument_list pos:start="389:23" pos:end="391:61">(<argument pos:start="389:24" pos:end="389:52"><expr pos:start="389:24" pos:end="389:52"><operator pos:start="389:24" pos:end="389:24">&amp;</operator><name pos:start="389:25" pos:end="389:52"><name pos:start="389:25" pos:end="389:25">s</name><operator pos:start="389:26" pos:end="389:27">-&gt;</operator><name pos:start="389:28" pos:end="389:30">tmp</name><index pos:start="389:31" pos:end="389:52">[<expr pos:start="389:32" pos:end="389:51"><name pos:start="389:32" pos:end="389:51">cur_subwoofer_cutoff</name></expr>]</index></name></expr></argument>, <argument pos:start="389:55" pos:end="389:55"><expr pos:start="389:55" pos:end="389:55"><literal type="number" pos:start="389:55" pos:end="389:55">0</literal></expr></argument>, <argument pos:start="389:58" pos:end="391:60"><expr pos:start="389:58" pos:end="391:60"><sizeof pos:start="389:58" pos:end="389:72">sizeof<argument_list pos:start="389:64" pos:end="389:72">(<argument pos:start="389:65" pos:end="389:71"><expr pos:start="389:65" pos:end="389:71"><operator pos:start="389:65" pos:end="389:65">*</operator><name pos:start="389:66" pos:end="389:71"><name pos:start="389:66" pos:end="389:66">s</name><operator pos:start="389:67" pos:end="389:68">-&gt;</operator><name pos:start="389:69" pos:end="389:71">tmp</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="389:74" pos:end="389:74">*</operator>

                       <operator pos:start="391:24" pos:end="391:24">(</operator><name pos:start="391:25" pos:end="391:36">subframe_len</name> <operator pos:start="391:38" pos:end="391:38">-</operator> <name pos:start="391:40" pos:end="391:59">cur_subwoofer_cutoff</name><operator pos:start="391:60" pos:end="391:60">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="block" format="doxygen" pos:start="395:13" pos:end="395:53">/** inverse quantization and rescaling */</comment>

            <for pos:start="397:13" pos:end="417:13">for <control pos:start="397:17" pos:end="397:46">(<init pos:start="397:18" pos:end="397:23"><expr pos:start="397:18" pos:end="397:22"><name pos:start="397:18" pos:end="397:18">b</name> <operator pos:start="397:20" pos:end="397:20">=</operator> <literal type="number" pos:start="397:22" pos:end="397:22">0</literal></expr>;</init> <condition pos:start="397:25" pos:end="397:41"><expr pos:start="397:25" pos:end="397:40"><name pos:start="397:25" pos:end="397:25">b</name> <operator pos:start="397:27" pos:end="397:27">&lt;</operator> <name pos:start="397:29" pos:end="397:40"><name pos:start="397:29" pos:end="397:29">s</name><operator pos:start="397:30" pos:end="397:31">-&gt;</operator><name pos:start="397:32" pos:end="397:40">num_bands</name></name></expr>;</condition> <incr pos:start="397:43" pos:end="397:45"><expr pos:start="397:43" pos:end="397:45"><name pos:start="397:43" pos:end="397:43">b</name><operator pos:start="397:44" pos:end="397:45">++</operator></expr></incr>)</control> <block pos:start="397:48" pos:end="417:13">{<block_content pos:start="399:17" pos:end="415:63">

                <decl_stmt pos:start="399:17" pos:end="399:80"><decl pos:start="399:17" pos:end="399:79"><type pos:start="399:17" pos:end="399:25"><specifier pos:start="399:17" pos:end="399:21">const</specifier> <name pos:start="399:23" pos:end="399:25">int</name></type> <name pos:start="399:27" pos:end="399:29">end</name> <init pos:start="399:31" pos:end="399:79">= <expr pos:start="399:33" pos:end="399:79"><call pos:start="399:33" pos:end="399:79"><name pos:start="399:33" pos:end="399:37">FFMIN</name><argument_list pos:start="399:38" pos:end="399:79">(<argument pos:start="399:39" pos:end="399:61"><expr pos:start="399:39" pos:end="399:61"><name pos:start="399:39" pos:end="399:61"><name pos:start="399:39" pos:end="399:39">s</name><operator pos:start="399:40" pos:end="399:41">-&gt;</operator><name pos:start="399:42" pos:end="399:56">cur_sfb_offsets</name><index pos:start="399:57" pos:end="399:61">[<expr pos:start="399:58" pos:end="399:60"><name pos:start="399:58" pos:end="399:58">b</name><operator pos:start="399:59" pos:end="399:59">+</operator><literal type="number" pos:start="399:60" pos:end="399:60">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="399:64" pos:end="399:78"><expr pos:start="399:64" pos:end="399:78"><name pos:start="399:64" pos:end="399:78"><name pos:start="399:64" pos:end="399:64">s</name><operator pos:start="399:65" pos:end="399:66">-&gt;</operator><name pos:start="399:67" pos:end="399:78">subframe_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="401:17" pos:end="405:60"><decl pos:start="401:17" pos:end="405:59"><type pos:start="401:17" pos:end="401:25"><specifier pos:start="401:17" pos:end="401:21">const</specifier> <name pos:start="401:23" pos:end="401:25">int</name></type> <name pos:start="401:27" pos:end="401:29">exp</name> <init pos:start="401:31" pos:end="405:59">= <expr pos:start="401:33" pos:end="405:59"><name pos:start="401:33" pos:end="401:45"><name pos:start="401:33" pos:end="401:33">s</name><operator pos:start="401:34" pos:end="401:35">-&gt;</operator><name pos:start="401:36" pos:end="401:42">channel</name><index pos:start="401:43" pos:end="401:45">[<expr pos:start="401:44" pos:end="401:44"><name pos:start="401:44" pos:end="401:44">c</name></expr>]</index></name><operator pos:start="401:46" pos:end="401:46">.</operator><name pos:start="401:47" pos:end="401:56">quant_step</name> <operator pos:start="401:58" pos:end="401:58">-</operator>

                            <operator pos:start="403:29" pos:end="403:29">(</operator><name pos:start="403:30" pos:end="403:42"><name pos:start="403:30" pos:end="403:30">s</name><operator pos:start="403:31" pos:end="403:32">-&gt;</operator><name pos:start="403:33" pos:end="403:39">channel</name><index pos:start="403:40" pos:end="403:42">[<expr pos:start="403:41" pos:end="403:41"><name pos:start="403:41" pos:end="403:41">c</name></expr>]</index></name><operator pos:start="403:43" pos:end="403:43">.</operator><name pos:start="403:44" pos:end="403:59">max_scale_factor</name> <operator pos:start="403:61" pos:end="403:61">-</operator> <operator pos:start="403:63" pos:end="403:63">*</operator><name pos:start="403:64" pos:end="403:65">sf</name><operator pos:start="403:66" pos:end="403:67">++</operator><operator pos:start="403:68" pos:end="403:68">)</operator> <operator pos:start="403:70" pos:end="403:70">*</operator>

                            <name pos:start="405:29" pos:end="405:41"><name pos:start="405:29" pos:end="405:29">s</name><operator pos:start="405:30" pos:end="405:31">-&gt;</operator><name pos:start="405:32" pos:end="405:38">channel</name><index pos:start="405:39" pos:end="405:41">[<expr pos:start="405:40" pos:end="405:40"><name pos:start="405:40" pos:end="405:40">c</name></expr>]</index></name><operator pos:start="405:42" pos:end="405:42">.</operator><name pos:start="405:43" pos:end="405:59">scale_factor_step</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="407:17" pos:end="407:58"><decl pos:start="407:17" pos:end="407:57"><type pos:start="407:17" pos:end="407:27"><specifier pos:start="407:17" pos:end="407:21">const</specifier> <name pos:start="407:23" pos:end="407:27">float</name></type> <name pos:start="407:29" pos:end="407:33">quant</name> <init pos:start="407:35" pos:end="407:57">= <expr pos:start="407:37" pos:end="407:57"><call pos:start="407:37" pos:end="407:57"><name pos:start="407:37" pos:end="407:39">pow</name><argument_list pos:start="407:40" pos:end="407:57">(<argument pos:start="407:41" pos:end="407:44"><expr pos:start="407:41" pos:end="407:44"><literal type="number" pos:start="407:41" pos:end="407:44">10.0</literal></expr></argument>, <argument pos:start="407:47" pos:end="407:56"><expr pos:start="407:47" pos:end="407:56"><name pos:start="407:47" pos:end="407:49">exp</name> <operator pos:start="407:51" pos:end="407:51">/</operator> <literal type="number" pos:start="407:53" pos:end="407:56">20.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="409:17" pos:end="409:50"><decl pos:start="409:17" pos:end="409:49"><type pos:start="409:17" pos:end="409:19"><name pos:start="409:17" pos:end="409:19">int</name></type> <name pos:start="409:21" pos:end="409:25">start</name> <init pos:start="409:27" pos:end="409:49">= <expr pos:start="409:29" pos:end="409:49"><name pos:start="409:29" pos:end="409:49"><name pos:start="409:29" pos:end="409:29">s</name><operator pos:start="409:30" pos:end="409:31">-&gt;</operator><name pos:start="409:32" pos:end="409:46">cur_sfb_offsets</name><index pos:start="409:47" pos:end="409:49">[<expr pos:start="409:48" pos:end="409:48"><name pos:start="409:48" pos:end="409:48">b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="411:17" pos:end="415:63"><expr pos:start="411:17" pos:end="415:62"><call pos:start="411:17" pos:end="415:62"><name pos:start="411:17" pos:end="411:42"><name pos:start="411:17" pos:end="411:17">s</name><operator pos:start="411:18" pos:end="411:19">-&gt;</operator><name pos:start="411:20" pos:end="411:23">fdsp</name><operator pos:start="411:24" pos:end="411:24">.</operator><name pos:start="411:25" pos:end="411:42">vector_fmul_scalar</name></name><argument_list pos:start="411:43" pos:end="415:62">(<argument pos:start="411:44" pos:end="411:57"><expr pos:start="411:44" pos:end="411:57"><name pos:start="411:44" pos:end="411:49"><name pos:start="411:44" pos:end="411:44">s</name><operator pos:start="411:45" pos:end="411:46">-&gt;</operator><name pos:start="411:47" pos:end="411:49">tmp</name></name> <operator pos:start="411:51" pos:end="411:51">+</operator> <name pos:start="411:53" pos:end="411:57">start</name></expr></argument>,

                                           <argument pos:start="413:44" pos:end="413:71"><expr pos:start="413:44" pos:end="413:71"><name pos:start="413:44" pos:end="413:56"><name pos:start="413:44" pos:end="413:44">s</name><operator pos:start="413:45" pos:end="413:46">-&gt;</operator><name pos:start="413:47" pos:end="413:53">channel</name><index pos:start="413:54" pos:end="413:56">[<expr pos:start="413:55" pos:end="413:55"><name pos:start="413:55" pos:end="413:55">c</name></expr>]</index></name><operator pos:start="413:57" pos:end="413:57">.</operator><name pos:start="413:58" pos:end="413:63">coeffs</name> <operator pos:start="413:65" pos:end="413:65">+</operator> <name pos:start="413:67" pos:end="413:71">start</name></expr></argument>,

                                           <argument pos:start="415:44" pos:end="415:48"><expr pos:start="415:44" pos:end="415:48"><name pos:start="415:44" pos:end="415:48">quant</name></expr></argument>, <argument pos:start="415:51" pos:end="415:61"><expr pos:start="415:51" pos:end="415:61"><name pos:start="415:51" pos:end="415:53">end</name> <operator pos:start="415:55" pos:end="415:55">-</operator> <name pos:start="415:57" pos:end="415:61">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>



            <comment type="block" format="doxygen" pos:start="421:13" pos:end="421:65">/** apply imdct (imdct_half == DCTIV with reverse) */</comment>

            <expr_stmt pos:start="423:13" pos:end="423:65"><expr pos:start="423:13" pos:end="423:64"><call pos:start="423:13" pos:end="423:64"><name pos:start="423:13" pos:end="423:28"><name pos:start="423:13" pos:end="423:16">mdct</name><operator pos:start="423:17" pos:end="423:18">-&gt;</operator><name pos:start="423:19" pos:end="423:28">imdct_half</name></name><argument_list pos:start="423:29" pos:end="423:64">(<argument pos:start="423:30" pos:end="423:33"><expr pos:start="423:30" pos:end="423:33"><name pos:start="423:30" pos:end="423:33">mdct</name></expr></argument>, <argument pos:start="423:36" pos:end="423:55"><expr pos:start="423:36" pos:end="423:55"><name pos:start="423:36" pos:end="423:48"><name pos:start="423:36" pos:end="423:36">s</name><operator pos:start="423:37" pos:end="423:38">-&gt;</operator><name pos:start="423:39" pos:end="423:45">channel</name><index pos:start="423:46" pos:end="423:48">[<expr pos:start="423:47" pos:end="423:47"><name pos:start="423:47" pos:end="423:47">c</name></expr>]</index></name><operator pos:start="423:49" pos:end="423:49">.</operator><name pos:start="423:50" pos:end="423:55">coeffs</name></expr></argument>, <argument pos:start="423:58" pos:end="423:63"><expr pos:start="423:58" pos:end="423:63"><name pos:start="423:58" pos:end="423:63"><name pos:start="423:58" pos:end="423:58">s</name><operator pos:start="423:59" pos:end="423:60">-&gt;</operator><name pos:start="423:61" pos:end="423:63">tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" format="doxygen" pos:start="431:5" pos:end="431:34">/** window and overlapp-add */</comment>

    <expr_stmt pos:start="433:5" pos:end="433:21"><expr pos:start="433:5" pos:end="433:20"><call pos:start="433:5" pos:end="433:20"><name pos:start="433:5" pos:end="433:17">wmapro_window</name><argument_list pos:start="433:18" pos:end="433:20">(<argument pos:start="433:19" pos:end="433:19"><expr pos:start="433:19" pos:end="433:19"><name pos:start="433:19" pos:end="433:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="437:5" pos:end="437:31">/** handled one subframe */</comment>

    <for pos:start="439:5" pos:end="453:5">for <control pos:start="439:9" pos:end="439:54">(<init pos:start="439:10" pos:end="439:15"><expr pos:start="439:10" pos:end="439:14"><name pos:start="439:10" pos:end="439:10">i</name> <operator pos:start="439:12" pos:end="439:12">=</operator> <literal type="number" pos:start="439:14" pos:end="439:14">0</literal></expr>;</init> <condition pos:start="439:17" pos:end="439:49"><expr pos:start="439:17" pos:end="439:48"><name pos:start="439:17" pos:end="439:17">i</name> <operator pos:start="439:19" pos:end="439:19">&lt;</operator> <name pos:start="439:21" pos:end="439:48"><name pos:start="439:21" pos:end="439:21">s</name><operator pos:start="439:22" pos:end="439:23">-&gt;</operator><name pos:start="439:24" pos:end="439:48">channels_for_cur_subframe</name></name></expr>;</condition> <incr pos:start="439:51" pos:end="439:53"><expr pos:start="439:51" pos:end="439:53"><name pos:start="439:51" pos:end="439:51">i</name><operator pos:start="439:52" pos:end="439:53">++</operator></expr></incr>)</control> <block pos:start="439:56" pos:end="453:5">{<block_content pos:start="441:9" pos:end="451:37">

        <decl_stmt pos:start="441:9" pos:end="441:55"><decl pos:start="441:9" pos:end="441:54"><type pos:start="441:9" pos:end="441:11"><name pos:start="441:9" pos:end="441:11">int</name></type> <name pos:start="441:13" pos:end="441:13">c</name> <init pos:start="441:15" pos:end="441:54">= <expr pos:start="441:17" pos:end="441:54"><name pos:start="441:17" pos:end="441:54"><name pos:start="441:17" pos:end="441:17">s</name><operator pos:start="441:18" pos:end="441:19">-&gt;</operator><name pos:start="441:20" pos:end="441:51">channel_indexes_for_cur_subframe</name><index pos:start="441:52" pos:end="441:54">[<expr pos:start="441:53" pos:end="441:53"><name pos:start="441:53" pos:end="441:53">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="443:9" pos:end="449:9"><if pos:start="443:9" pos:end="449:9">if <condition pos:start="443:12" pos:end="443:70">(<expr pos:start="443:13" pos:end="443:69"><name pos:start="443:13" pos:end="443:25"><name pos:start="443:13" pos:end="443:13">s</name><operator pos:start="443:14" pos:end="443:15">-&gt;</operator><name pos:start="443:16" pos:end="443:22">channel</name><index pos:start="443:23" pos:end="443:25">[<expr pos:start="443:24" pos:end="443:24"><name pos:start="443:24" pos:end="443:24">c</name></expr>]</index></name><operator pos:start="443:26" pos:end="443:26">.</operator><name pos:start="443:27" pos:end="443:38">cur_subframe</name> <operator pos:start="443:40" pos:end="443:41">&gt;=</operator> <name pos:start="443:43" pos:end="443:55"><name pos:start="443:43" pos:end="443:43">s</name><operator pos:start="443:44" pos:end="443:45">-&gt;</operator><name pos:start="443:46" pos:end="443:52">channel</name><index pos:start="443:53" pos:end="443:55">[<expr pos:start="443:54" pos:end="443:54"><name pos:start="443:54" pos:end="443:54">c</name></expr>]</index></name><operator pos:start="443:56" pos:end="443:56">.</operator><name pos:start="443:57" pos:end="443:69">num_subframes</name></expr>)</condition> <block pos:start="443:72" pos:end="449:9">{<block_content pos:start="445:13" pos:end="447:39">

            <expr_stmt pos:start="445:13" pos:end="445:64"><expr pos:start="445:13" pos:end="445:63"><call pos:start="445:13" pos:end="445:63"><name pos:start="445:13" pos:end="445:18">av_log</name><argument_list pos:start="445:19" pos:end="445:63">(<argument pos:start="445:20" pos:end="445:27"><expr pos:start="445:20" pos:end="445:27"><name pos:start="445:20" pos:end="445:27"><name pos:start="445:20" pos:end="445:20">s</name><operator pos:start="445:21" pos:end="445:22">-&gt;</operator><name pos:start="445:23" pos:end="445:27">avctx</name></name></expr></argument>, <argument pos:start="445:30" pos:end="445:41"><expr pos:start="445:30" pos:end="445:41"><name pos:start="445:30" pos:end="445:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="445:44" pos:end="445:62"><expr pos:start="445:44" pos:end="445:62"><literal type="string" pos:start="445:44" pos:end="445:62">"broken subframe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="447:13" pos:end="447:39">return <expr pos:start="447:20" pos:end="447:38"><name pos:start="447:20" pos:end="447:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="451:9" pos:end="451:37"><expr pos:start="451:9" pos:end="451:36"><operator pos:start="451:9" pos:end="451:10">++</operator><name pos:start="451:11" pos:end="451:23"><name pos:start="451:11" pos:end="451:11">s</name><operator pos:start="451:12" pos:end="451:13">-&gt;</operator><name pos:start="451:14" pos:end="451:20">channel</name><index pos:start="451:21" pos:end="451:23">[<expr pos:start="451:22" pos:end="451:22"><name pos:start="451:22" pos:end="451:22">c</name></expr>]</index></name><operator pos:start="451:24" pos:end="451:24">.</operator><name pos:start="451:25" pos:end="451:36">cur_subframe</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="457:5" pos:end="457:13">return <expr pos:start="457:12" pos:end="457:12"><literal type="number" pos:start="457:12" pos:end="457:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
