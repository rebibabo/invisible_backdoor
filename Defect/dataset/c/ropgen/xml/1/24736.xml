<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24736.c" pos:tabs="8"><function pos:start="1:1" pos:end="2851:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:19">gen_sse</name><parameter_list pos:start="1:20" pos:end="3:53">(<parameter pos:start="1:21" pos:end="1:36"><decl pos:start="1:21" pos:end="1:36"><type pos:start="1:21" pos:end="1:36"><name pos:start="1:21" pos:end="1:31">CPUX86State</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">env</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:53"><decl pos:start="1:39" pos:end="1:53"><type pos:start="1:39" pos:end="1:53"><name pos:start="1:39" pos:end="1:50">DisasContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">s</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:60"><decl pos:start="1:56" pos:end="1:60"><type pos:start="1:56" pos:end="1:60"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:60">b</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:41"><decl pos:start="3:21" pos:end="3:41"><type pos:start="3:21" pos:end="3:41"><name pos:start="3:21" pos:end="3:32">target_ulong</name></type> <name pos:start="3:34" pos:end="3:41">pc_start</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:52"><decl pos:start="3:44" pos:end="3:52"><type pos:start="3:44" pos:end="3:52"><name pos:start="3:44" pos:end="3:46">int</name></type> <name pos:start="3:48" pos:end="3:52">rex_r</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="2851:1">{<block_content pos:start="7:5" pos:end="2849:5">

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">b1</name></decl>, <decl pos:start="7:13" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:22">op1_offset</name></decl>, <decl pos:start="7:25" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:25" pos:end="7:34">op2_offset</name></decl>, <decl pos:start="7:37" pos:end="7:42"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:37" pos:end="7:42">is_xmm</name></decl>, <decl pos:start="7:45" pos:end="7:47"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:45" pos:end="7:47">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">modrm</name></decl>, <decl pos:start="9:16" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:18">mod</name></decl>, <decl pos:start="9:21" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:22">rm</name></decl>, <decl pos:start="9:25" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:25" pos:end="9:27">reg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">SSEFunc_0_epp</name></type> <name pos:start="11:19" pos:end="11:28">sse_fn_epp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18">SSEFunc_0_eppi</name></type> <name pos:start="13:20" pos:end="13:30">sse_fn_eppi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17">SSEFunc_0_ppi</name></type> <name pos:start="15:19" pos:end="15:28">sse_fn_ppi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:18">SSEFunc_0_eppt</name></type> <name pos:start="17:20" pos:end="17:30">sse_fn_eppt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">TCGMemOp</name></type> <name pos:start="19:14" pos:end="19:15">ot</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:14"><expr pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:5">b</name> <operator pos:start="23:7" pos:end="23:8">&amp;=</operator> <literal type="number" pos:start="23:10" pos:end="23:13">0xff</literal></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="39:15"><if pos:start="25:5" pos:end="27:15">if <condition pos:start="25:8" pos:end="25:32">(<expr pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:17">prefix</name></name> <operator pos:start="25:19" pos:end="25:19">&amp;</operator> <name pos:start="25:21" pos:end="25:31">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:15"><block_content pos:start="27:9" pos:end="27:15">

        <expr_stmt pos:start="27:9" pos:end="27:15"><expr pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:10">b1</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">1</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="29:5" pos:end="31:15">else if <condition pos:start="29:13" pos:end="29:37">(<expr pos:start="29:14" pos:end="29:36"><name pos:start="29:14" pos:end="29:22"><name pos:start="29:14" pos:end="29:14">s</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:22">prefix</name></name> <operator pos:start="29:24" pos:end="29:24">&amp;</operator> <name pos:start="29:26" pos:end="29:36">PREFIX_REPZ</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:15"><block_content pos:start="31:9" pos:end="31:15">

        <expr_stmt pos:start="31:9" pos:end="31:15"><expr pos:start="31:9" pos:end="31:14"><name pos:start="31:9" pos:end="31:10">b1</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">2</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="33:5" pos:end="35:15">else if <condition pos:start="33:13" pos:end="33:38">(<expr pos:start="33:14" pos:end="33:37"><name pos:start="33:14" pos:end="33:22"><name pos:start="33:14" pos:end="33:14">s</name><operator pos:start="33:15" pos:end="33:16">-&gt;</operator><name pos:start="33:17" pos:end="33:22">prefix</name></name> <operator pos:start="33:24" pos:end="33:24">&amp;</operator> <name pos:start="33:26" pos:end="33:37">PREFIX_REPNZ</name></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:15"><block_content pos:start="35:9" pos:end="35:15">

        <expr_stmt pos:start="35:9" pos:end="35:15"><expr pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:10">b1</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">3</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="37:5" pos:end="39:15">else<block type="pseudo" pos:start="39:9" pos:end="39:15"><block_content pos:start="39:9" pos:end="39:15">

        <expr_stmt pos:start="39:9" pos:end="39:15"><expr pos:start="39:9" pos:end="39:14"><name pos:start="39:9" pos:end="39:10">b1</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:38"><expr pos:start="41:5" pos:end="41:37"><name pos:start="41:5" pos:end="41:14">sse_fn_epp</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <name pos:start="41:18" pos:end="41:37"><name pos:start="41:18" pos:end="41:30">sse_op_table1</name><index pos:start="41:31" pos:end="41:33">[<expr pos:start="41:32" pos:end="41:32"><name pos:start="41:32" pos:end="41:32">b</name></expr>]</index><index pos:start="41:34" pos:end="41:37">[<expr pos:start="41:35" pos:end="41:36"><name pos:start="41:35" pos:end="41:36">b1</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:20">(<expr pos:start="43:9" pos:end="43:19"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:19">sse_fn_epp</name></expr>)</condition> <block pos:start="43:22" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:24">

        <goto pos:start="45:9" pos:end="45:24">goto <name pos:start="45:14" pos:end="45:23">illegal_op</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="49:5" pos:end="67:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:59">(<expr pos:start="49:9" pos:end="49:58"><operator pos:start="49:9" pos:end="49:9">(</operator><name pos:start="49:10" pos:end="49:10">b</name> <operator pos:start="49:12" pos:end="49:13">&lt;=</operator> <literal type="number" pos:start="49:15" pos:end="49:18">0x5f</literal> <operator pos:start="49:20" pos:end="49:21">&amp;&amp;</operator> <name pos:start="49:23" pos:end="49:23">b</name> <operator pos:start="49:25" pos:end="49:26">&gt;=</operator> <literal type="number" pos:start="49:28" pos:end="49:31">0x10</literal><operator pos:start="49:32" pos:end="49:32">)</operator> <operator pos:start="49:34" pos:end="49:35">||</operator> <name pos:start="49:37" pos:end="49:37">b</name> <operator pos:start="49:39" pos:end="49:40">==</operator> <literal type="number" pos:start="49:42" pos:end="49:45">0xc6</literal> <operator pos:start="49:47" pos:end="49:48">||</operator> <name pos:start="49:50" pos:end="49:50">b</name> <operator pos:start="49:52" pos:end="49:53">==</operator> <literal type="number" pos:start="49:55" pos:end="49:58">0xc2</literal></expr>)</condition> <block pos:start="49:61" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:19">

        <expr_stmt pos:start="51:9" pos:end="51:19"><expr pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:14">is_xmm</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <literal type="number" pos:start="51:18" pos:end="51:18">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="67:5">else <block pos:start="53:12" pos:end="67:5">{<block_content pos:start="55:9" pos:end="65:9">

        <if_stmt pos:start="55:9" pos:end="65:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:20">(<expr pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:14">b1</name> <operator pos:start="55:16" pos:end="55:17">==</operator> <literal type="number" pos:start="55:19" pos:end="55:19">0</literal></expr>)</condition> <block pos:start="55:22" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:23">

            <comment type="block" pos:start="57:13" pos:end="57:26">/* MMX case */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:23"><expr pos:start="59:13" pos:end="59:22"><name pos:start="59:13" pos:end="59:18">is_xmm</name> <operator pos:start="59:20" pos:end="59:20">=</operator> <literal type="number" pos:start="59:22" pos:end="59:22">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="61:11" pos:end="65:9">else <block pos:start="61:16" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:23">

            <expr_stmt pos:start="63:13" pos:end="63:23"><expr pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:18">is_xmm</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <literal type="number" pos:start="63:22" pos:end="63:22">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="69:5" pos:end="69:34">/* simple MMX/SSE operation */</comment>

    <if_stmt pos:start="71:5" pos:end="77:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:30">(<expr pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:16">flags</name></name> <operator pos:start="71:18" pos:end="71:18">&amp;</operator> <name pos:start="71:20" pos:end="71:29">HF_TS_MASK</name></expr>)</condition> <block pos:start="71:32" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:15">

        <expr_stmt pos:start="73:9" pos:end="73:61"><expr pos:start="73:9" pos:end="73:60"><call pos:start="73:9" pos:end="73:60"><name pos:start="73:9" pos:end="73:21">gen_exception</name><argument_list pos:start="73:22" pos:end="73:60">(<argument pos:start="73:23" pos:end="73:23"><expr pos:start="73:23" pos:end="73:23"><name pos:start="73:23" pos:end="73:23">s</name></expr></argument>, <argument pos:start="73:26" pos:end="73:36"><expr pos:start="73:26" pos:end="73:36"><name pos:start="73:26" pos:end="73:36">EXCP07_PREX</name></expr></argument>, <argument pos:start="73:39" pos:end="73:59"><expr pos:start="73:39" pos:end="73:59"><name pos:start="73:39" pos:end="73:46">pc_start</name> <operator pos:start="73:48" pos:end="73:48">-</operator> <name pos:start="73:50" pos:end="73:59"><name pos:start="73:50" pos:end="73:50">s</name><operator pos:start="73:51" pos:end="73:52">-&gt;</operator><name pos:start="73:53" pos:end="73:59">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="79:5" pos:end="87:5"><if pos:start="79:5" pos:end="87:5">if <condition pos:start="79:8" pos:end="79:30">(<expr pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:16">flags</name></name> <operator pos:start="79:18" pos:end="79:18">&amp;</operator> <name pos:start="79:20" pos:end="79:29">HF_EM_MASK</name></expr>)</condition> <block pos:start="79:32" pos:end="87:5">{<block_content pos:start="81:5" pos:end="85:15">

    <label pos:start="81:5" pos:end="81:15"><name pos:start="81:5" pos:end="81:14">illegal_op</name>:</label>

        <expr_stmt pos:start="83:9" pos:end="83:62"><expr pos:start="83:9" pos:end="83:61"><call pos:start="83:9" pos:end="83:61"><name pos:start="83:9" pos:end="83:21">gen_exception</name><argument_list pos:start="83:22" pos:end="83:61">(<argument pos:start="83:23" pos:end="83:23"><expr pos:start="83:23" pos:end="83:23"><name pos:start="83:23" pos:end="83:23">s</name></expr></argument>, <argument pos:start="83:26" pos:end="83:37"><expr pos:start="83:26" pos:end="83:37"><name pos:start="83:26" pos:end="83:37">EXCP06_ILLOP</name></expr></argument>, <argument pos:start="83:40" pos:end="83:60"><expr pos:start="83:40" pos:end="83:60"><name pos:start="83:40" pos:end="83:47">pc_start</name> <operator pos:start="83:49" pos:end="83:49">-</operator> <name pos:start="83:51" pos:end="83:60"><name pos:start="83:51" pos:end="83:51">s</name><operator pos:start="83:52" pos:end="83:53">-&gt;</operator><name pos:start="83:54" pos:end="83:60">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="89:5" pos:end="93:28"><if pos:start="89:5" pos:end="93:28">if <condition pos:start="89:8" pos:end="89:47">(<expr pos:start="89:9" pos:end="89:46"><name pos:start="89:9" pos:end="89:14">is_xmm</name> <operator pos:start="89:16" pos:end="89:17">&amp;&amp;</operator> <operator pos:start="89:19" pos:end="89:19">!</operator><operator pos:start="89:20" pos:end="89:20">(</operator><name pos:start="89:21" pos:end="89:28"><name pos:start="89:21" pos:end="89:21">s</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:28">flags</name></name> <operator pos:start="89:30" pos:end="89:30">&amp;</operator> <name pos:start="89:32" pos:end="89:45">HF_OSFXSR_MASK</name><operator pos:start="89:46" pos:end="89:46">)</operator></expr>)</condition><block type="pseudo" pos:start="91:9" pos:end="93:28"><block_content pos:start="91:9" pos:end="93:28">

        <if_stmt pos:start="91:9" pos:end="93:28"><if pos:start="91:9" pos:end="93:28">if <condition pos:start="91:12" pos:end="91:66">(<expr pos:start="91:13" pos:end="91:65"><operator pos:start="91:13" pos:end="91:13">(</operator><name pos:start="91:14" pos:end="91:14">b</name> <operator pos:start="91:16" pos:end="91:17">!=</operator> <literal type="number" pos:start="91:19" pos:end="91:22">0x38</literal> <operator pos:start="91:24" pos:end="91:25">&amp;&amp;</operator> <name pos:start="91:27" pos:end="91:27">b</name> <operator pos:start="91:29" pos:end="91:30">!=</operator> <literal type="number" pos:start="91:32" pos:end="91:35">0x3a</literal><operator pos:start="91:36" pos:end="91:36">)</operator> <operator pos:start="91:38" pos:end="91:39">||</operator> <operator pos:start="91:41" pos:end="91:41">(</operator><name pos:start="91:42" pos:end="91:50"><name pos:start="91:42" pos:end="91:42">s</name><operator pos:start="91:43" pos:end="91:44">-&gt;</operator><name pos:start="91:45" pos:end="91:50">prefix</name></name> <operator pos:start="91:52" pos:end="91:52">&amp;</operator> <name pos:start="91:54" pos:end="91:64">PREFIX_DATA</name><operator pos:start="91:65" pos:end="91:65">)</operator></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:28"><block_content pos:start="93:13" pos:end="93:28">

            <goto pos:start="93:13" pos:end="93:28">goto <name pos:start="93:18" pos:end="93:27">illegal_op</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="95:5" pos:end="107:5"><if pos:start="95:5" pos:end="107:5">if <condition pos:start="95:8" pos:end="95:18">(<expr pos:start="95:9" pos:end="95:17"><name pos:start="95:9" pos:end="95:9">b</name> <operator pos:start="95:11" pos:end="95:12">==</operator> <literal type="number" pos:start="95:14" pos:end="95:17">0x0e</literal></expr>)</condition> <block pos:start="95:20" pos:end="107:5">{<block_content pos:start="97:9" pos:end="105:15">

        <if_stmt pos:start="97:9" pos:end="99:28"><if pos:start="97:9" pos:end="99:28">if <condition pos:start="97:12" pos:end="97:57">(<expr pos:start="97:13" pos:end="97:56"><operator pos:start="97:13" pos:end="97:13">!</operator><operator pos:start="97:14" pos:end="97:14">(</operator><name pos:start="97:15" pos:end="97:36"><name pos:start="97:15" pos:end="97:15">s</name><operator pos:start="97:16" pos:end="97:17">-&gt;</operator><name pos:start="97:18" pos:end="97:36">cpuid_ext2_features</name></name> <operator pos:start="97:38" pos:end="97:38">&amp;</operator> <name pos:start="97:40" pos:end="97:55">CPUID_EXT2_3DNOW</name><operator pos:start="97:56" pos:end="97:56">)</operator></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:28"><block_content pos:start="99:13" pos:end="99:28">

            <goto pos:start="99:13" pos:end="99:28">goto <name pos:start="99:18" pos:end="99:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block" pos:start="101:9" pos:end="101:19">/* femms */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:33"><expr pos:start="103:9" pos:end="103:32"><call pos:start="103:9" pos:end="103:32"><name pos:start="103:9" pos:end="103:23">gen_helper_emms</name><argument_list pos:start="103:24" pos:end="103:32">(<argument pos:start="103:25" pos:end="103:31"><expr pos:start="103:25" pos:end="103:31"><name pos:start="103:25" pos:end="103:31">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="105:9" pos:end="105:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="109:5" pos:end="117:5"><if pos:start="109:5" pos:end="117:5">if <condition pos:start="109:8" pos:end="109:18">(<expr pos:start="109:9" pos:end="109:17"><name pos:start="109:9" pos:end="109:9">b</name> <operator pos:start="109:11" pos:end="109:12">==</operator> <literal type="number" pos:start="109:14" pos:end="109:17">0x77</literal></expr>)</condition> <block pos:start="109:20" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:15">

        <comment type="block" pos:start="111:9" pos:end="111:18">/* emms */</comment>

        <expr_stmt pos:start="113:9" pos:end="113:33"><expr pos:start="113:9" pos:end="113:32"><call pos:start="113:9" pos:end="113:32"><name pos:start="113:9" pos:end="113:23">gen_helper_emms</name><argument_list pos:start="113:24" pos:end="113:32">(<argument pos:start="113:25" pos:end="113:31"><expr pos:start="113:25" pos:end="113:31"><name pos:start="113:25" pos:end="113:31">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="115:9" pos:end="115:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="119:5" pos:end="121:31">/* prepare MMX state (XXX: optimize by storing fptt and fptags in

       the static cpu state) */</comment>

    <if_stmt pos:start="123:5" pos:end="127:5"><if pos:start="123:5" pos:end="127:5">if <condition pos:start="123:8" pos:end="123:16">(<expr pos:start="123:9" pos:end="123:15"><operator pos:start="123:9" pos:end="123:9">!</operator><name pos:start="123:10" pos:end="123:15">is_xmm</name></expr>)</condition> <block pos:start="123:18" pos:end="127:5">{<block_content pos:start="125:9" pos:end="125:38">

        <expr_stmt pos:start="125:9" pos:end="125:38"><expr pos:start="125:9" pos:end="125:37"><call pos:start="125:9" pos:end="125:37"><name pos:start="125:9" pos:end="125:28">gen_helper_enter_mmx</name><argument_list pos:start="125:29" pos:end="125:37">(<argument pos:start="125:30" pos:end="125:36"><expr pos:start="125:30" pos:end="125:36"><name pos:start="125:30" pos:end="125:36">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:40"><expr pos:start="131:5" pos:end="131:39"><name pos:start="131:5" pos:end="131:9">modrm</name> <operator pos:start="131:11" pos:end="131:11">=</operator> <call pos:start="131:13" pos:end="131:39"><name pos:start="131:13" pos:end="131:25">cpu_ldub_code</name><argument_list pos:start="131:26" pos:end="131:39">(<argument pos:start="131:27" pos:end="131:29"><expr pos:start="131:27" pos:end="131:29"><name pos:start="131:27" pos:end="131:29">env</name></expr></argument>, <argument pos:start="131:32" pos:end="131:38"><expr pos:start="131:32" pos:end="131:38"><name pos:start="131:32" pos:end="131:36"><name pos:start="131:32" pos:end="131:32">s</name><operator pos:start="131:33" pos:end="131:34">-&gt;</operator><name pos:start="131:35" pos:end="131:36">pc</name></name><operator pos:start="131:37" pos:end="131:38">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:29"><expr pos:start="133:5" pos:end="133:28"><name pos:start="133:5" pos:end="133:7">reg</name> <operator pos:start="133:9" pos:end="133:9">=</operator> <operator pos:start="133:11" pos:end="133:11">(</operator><operator pos:start="133:12" pos:end="133:12">(</operator><name pos:start="133:13" pos:end="133:17">modrm</name> <operator pos:start="133:19" pos:end="133:20">&gt;&gt;</operator> <literal type="number" pos:start="133:22" pos:end="133:22">3</literal><operator pos:start="133:23" pos:end="133:23">)</operator> <operator pos:start="133:25" pos:end="133:25">&amp;</operator> <literal type="number" pos:start="133:27" pos:end="133:27">7</literal><operator pos:start="133:28" pos:end="133:28">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="135:5" pos:end="137:21"><if pos:start="135:5" pos:end="137:21">if <condition pos:start="135:8" pos:end="135:15">(<expr pos:start="135:9" pos:end="135:14"><name pos:start="135:9" pos:end="135:14">is_xmm</name></expr>)</condition><block type="pseudo" pos:start="137:9" pos:end="137:21"><block_content pos:start="137:9" pos:end="137:21">

        <expr_stmt pos:start="137:9" pos:end="137:21"><expr pos:start="137:9" pos:end="137:20"><name pos:start="137:9" pos:end="137:11">reg</name> <operator pos:start="137:13" pos:end="137:14">|=</operator> <name pos:start="137:16" pos:end="137:20">rex_r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:27"><expr pos:start="139:5" pos:end="139:26"><name pos:start="139:5" pos:end="139:7">mod</name> <operator pos:start="139:9" pos:end="139:9">=</operator> <operator pos:start="139:11" pos:end="139:11">(</operator><name pos:start="139:12" pos:end="139:16">modrm</name> <operator pos:start="139:18" pos:end="139:19">&gt;&gt;</operator> <literal type="number" pos:start="139:21" pos:end="139:21">6</literal><operator pos:start="139:22" pos:end="139:22">)</operator> <operator pos:start="139:24" pos:end="139:24">&amp;</operator> <literal type="number" pos:start="139:26" pos:end="139:26">3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="2849:5"><if pos:start="141:5" pos:end="2593:5">if <condition pos:start="141:8" pos:end="141:34">(<expr pos:start="141:9" pos:end="141:33"><name pos:start="141:9" pos:end="141:18">sse_fn_epp</name> <operator pos:start="141:20" pos:end="141:21">==</operator> <name pos:start="141:23" pos:end="141:33">SSE_SPECIAL</name></expr>)</condition> <block pos:start="141:36" pos:end="2593:5">{<block_content pos:start="143:9" pos:end="2591:9">

        <expr_stmt pos:start="143:9" pos:end="143:23"><expr pos:start="143:9" pos:end="143:22"><name pos:start="143:9" pos:end="143:9">b</name> <operator pos:start="143:11" pos:end="143:12">|=</operator> <operator pos:start="143:14" pos:end="143:14">(</operator><name pos:start="143:15" pos:end="143:16">b1</name> <operator pos:start="143:18" pos:end="143:19">&lt;&lt;</operator> <literal type="number" pos:start="143:21" pos:end="143:21">8</literal><operator pos:start="143:22" pos:end="143:22">)</operator></expr>;</expr_stmt>

        <switch pos:start="145:9" pos:end="2591:9">switch<condition pos:start="145:15" pos:end="145:17">(<expr pos:start="145:16" pos:end="145:16"><name pos:start="145:16" pos:end="145:16">b</name></expr>)</condition> <block pos:start="145:19" pos:end="2591:9">{<block_content pos:start="147:9" pos:end="2589:28">

        <case pos:start="147:9" pos:end="147:19">case <expr pos:start="147:14" pos:end="147:18"><literal type="number" pos:start="147:14" pos:end="147:18">0x0e7</literal></expr>:</case> <comment type="block" pos:start="147:21" pos:end="147:32">/* movntq */</comment>

            <if_stmt pos:start="149:13" pos:end="151:32"><if pos:start="149:13" pos:end="151:32">if <condition pos:start="149:16" pos:end="149:25">(<expr pos:start="149:17" pos:end="149:24"><name pos:start="149:17" pos:end="149:19">mod</name> <operator pos:start="149:21" pos:end="149:22">==</operator> <literal type="number" pos:start="149:24" pos:end="149:24">3</literal></expr>)</condition><block type="pseudo" pos:start="151:17" pos:end="151:32"><block_content pos:start="151:17" pos:end="151:32">

                <goto pos:start="151:17" pos:end="151:32">goto <name pos:start="151:22" pos:end="151:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:41"><expr pos:start="153:13" pos:end="153:40"><call pos:start="153:13" pos:end="153:40"><name pos:start="153:13" pos:end="153:25">gen_lea_modrm</name><argument_list pos:start="153:26" pos:end="153:40">(<argument pos:start="153:27" pos:end="153:29"><expr pos:start="153:27" pos:end="153:29"><name pos:start="153:27" pos:end="153:29">env</name></expr></argument>, <argument pos:start="153:32" pos:end="153:32"><expr pos:start="153:32" pos:end="153:32"><name pos:start="153:32" pos:end="153:32">s</name></expr></argument>, <argument pos:start="153:35" pos:end="153:39"><expr pos:start="153:35" pos:end="153:39"><name pos:start="153:35" pos:end="153:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:70"><expr pos:start="155:13" pos:end="155:69"><call pos:start="155:13" pos:end="155:69"><name pos:start="155:13" pos:end="155:26">gen_stq_env_A0</name><argument_list pos:start="155:27" pos:end="155:69">(<argument pos:start="155:28" pos:end="155:28"><expr pos:start="155:28" pos:end="155:28"><name pos:start="155:28" pos:end="155:28">s</name></expr></argument>, <argument pos:start="155:31" pos:end="155:68"><expr pos:start="155:31" pos:end="155:68"><call pos:start="155:31" pos:end="155:68"><name pos:start="155:31" pos:end="155:38">offsetof</name><argument_list pos:start="155:39" pos:end="155:68">(<argument pos:start="155:40" pos:end="155:50"><expr pos:start="155:40" pos:end="155:50"><name pos:start="155:40" pos:end="155:50">CPUX86State</name></expr></argument>, <argument pos:start="155:53" pos:end="155:67"><expr pos:start="155:53" pos:end="155:67"><name pos:start="155:53" pos:end="155:63"><name pos:start="155:53" pos:end="155:58">fpregs</name><index pos:start="155:59" pos:end="155:63">[<expr pos:start="155:60" pos:end="155:62"><name pos:start="155:60" pos:end="155:62">reg</name></expr>]</index></name><operator pos:start="155:64" pos:end="155:64">.</operator><name pos:start="155:65" pos:end="155:67">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="157:13" pos:end="157:18">break;</break>

        <case pos:start="159:9" pos:end="159:19">case <expr pos:start="159:14" pos:end="159:18"><literal type="number" pos:start="159:14" pos:end="159:18">0x1e7</literal></expr>:</case> <comment type="block" pos:start="159:21" pos:end="159:33">/* movntdq */</comment>

        <case pos:start="161:9" pos:end="161:19">case <expr pos:start="161:14" pos:end="161:18"><literal type="number" pos:start="161:14" pos:end="161:18">0x02b</literal></expr>:</case> <comment type="block" pos:start="161:21" pos:end="161:33">/* movntps */</comment>

        <case pos:start="163:9" pos:end="163:19">case <expr pos:start="163:14" pos:end="163:18"><literal type="number" pos:start="163:14" pos:end="163:18">0x12b</literal></expr>:</case> <comment type="block" pos:start="163:21" pos:end="163:33">/* movntps */</comment>

            <if_stmt pos:start="165:13" pos:end="167:32"><if pos:start="165:13" pos:end="167:32">if <condition pos:start="165:16" pos:end="165:25">(<expr pos:start="165:17" pos:end="165:24"><name pos:start="165:17" pos:end="165:19">mod</name> <operator pos:start="165:21" pos:end="165:22">==</operator> <literal type="number" pos:start="165:24" pos:end="165:24">3</literal></expr>)</condition><block type="pseudo" pos:start="167:17" pos:end="167:32"><block_content pos:start="167:17" pos:end="167:32">

                <goto pos:start="167:17" pos:end="167:32">goto <name pos:start="167:22" pos:end="167:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:41"><expr pos:start="169:13" pos:end="169:40"><call pos:start="169:13" pos:end="169:40"><name pos:start="169:13" pos:end="169:25">gen_lea_modrm</name><argument_list pos:start="169:26" pos:end="169:40">(<argument pos:start="169:27" pos:end="169:29"><expr pos:start="169:27" pos:end="169:29"><name pos:start="169:27" pos:end="169:29">env</name></expr></argument>, <argument pos:start="169:32" pos:end="169:32"><expr pos:start="169:32" pos:end="169:32"><name pos:start="169:32" pos:end="169:32">s</name></expr></argument>, <argument pos:start="169:35" pos:end="169:39"><expr pos:start="169:35" pos:end="169:39"><name pos:start="169:35" pos:end="169:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:68"><expr pos:start="171:13" pos:end="171:67"><call pos:start="171:13" pos:end="171:67"><name pos:start="171:13" pos:end="171:26">gen_sto_env_A0</name><argument_list pos:start="171:27" pos:end="171:67">(<argument pos:start="171:28" pos:end="171:28"><expr pos:start="171:28" pos:end="171:28"><name pos:start="171:28" pos:end="171:28">s</name></expr></argument>, <argument pos:start="171:31" pos:end="171:66"><expr pos:start="171:31" pos:end="171:66"><call pos:start="171:31" pos:end="171:66"><name pos:start="171:31" pos:end="171:38">offsetof</name><argument_list pos:start="171:39" pos:end="171:66">(<argument pos:start="171:40" pos:end="171:50"><expr pos:start="171:40" pos:end="171:50"><name pos:start="171:40" pos:end="171:50">CPUX86State</name></expr></argument>, <argument pos:start="171:53" pos:end="171:65"><expr pos:start="171:53" pos:end="171:65"><name pos:start="171:53" pos:end="171:65"><name pos:start="171:53" pos:end="171:60">xmm_regs</name><index pos:start="171:61" pos:end="171:65">[<expr pos:start="171:62" pos:end="171:64"><name pos:start="171:62" pos:end="171:64">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="173:13" pos:end="173:18">break;</break>

        <case pos:start="175:9" pos:end="175:19">case <expr pos:start="175:14" pos:end="175:18"><literal type="number" pos:start="175:14" pos:end="175:18">0x3f0</literal></expr>:</case> <comment type="block" pos:start="175:21" pos:end="175:31">/* lddqu */</comment>

            <if_stmt pos:start="177:13" pos:end="179:32"><if pos:start="177:13" pos:end="179:32">if <condition pos:start="177:16" pos:end="177:25">(<expr pos:start="177:17" pos:end="177:24"><name pos:start="177:17" pos:end="177:19">mod</name> <operator pos:start="177:21" pos:end="177:22">==</operator> <literal type="number" pos:start="177:24" pos:end="177:24">3</literal></expr>)</condition><block type="pseudo" pos:start="179:17" pos:end="179:32"><block_content pos:start="179:17" pos:end="179:32">

                <goto pos:start="179:17" pos:end="179:32">goto <name pos:start="179:22" pos:end="179:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:41"><expr pos:start="181:13" pos:end="181:40"><call pos:start="181:13" pos:end="181:40"><name pos:start="181:13" pos:end="181:25">gen_lea_modrm</name><argument_list pos:start="181:26" pos:end="181:40">(<argument pos:start="181:27" pos:end="181:29"><expr pos:start="181:27" pos:end="181:29"><name pos:start="181:27" pos:end="181:29">env</name></expr></argument>, <argument pos:start="181:32" pos:end="181:32"><expr pos:start="181:32" pos:end="181:32"><name pos:start="181:32" pos:end="181:32">s</name></expr></argument>, <argument pos:start="181:35" pos:end="181:39"><expr pos:start="181:35" pos:end="181:39"><name pos:start="181:35" pos:end="181:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:68"><expr pos:start="183:13" pos:end="183:67"><call pos:start="183:13" pos:end="183:67"><name pos:start="183:13" pos:end="183:26">gen_ldo_env_A0</name><argument_list pos:start="183:27" pos:end="183:67">(<argument pos:start="183:28" pos:end="183:28"><expr pos:start="183:28" pos:end="183:28"><name pos:start="183:28" pos:end="183:28">s</name></expr></argument>, <argument pos:start="183:31" pos:end="183:66"><expr pos:start="183:31" pos:end="183:66"><call pos:start="183:31" pos:end="183:66"><name pos:start="183:31" pos:end="183:38">offsetof</name><argument_list pos:start="183:39" pos:end="183:66">(<argument pos:start="183:40" pos:end="183:50"><expr pos:start="183:40" pos:end="183:50"><name pos:start="183:40" pos:end="183:50">CPUX86State</name></expr></argument>, <argument pos:start="183:53" pos:end="183:65"><expr pos:start="183:53" pos:end="183:65"><name pos:start="183:53" pos:end="183:65"><name pos:start="183:53" pos:end="183:60">xmm_regs</name><index pos:start="183:61" pos:end="183:65">[<expr pos:start="183:62" pos:end="183:64"><name pos:start="183:62" pos:end="183:64">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="185:13" pos:end="185:18">break;</break>

        <case pos:start="187:9" pos:end="187:19">case <expr pos:start="187:14" pos:end="187:18"><literal type="number" pos:start="187:14" pos:end="187:18">0x22b</literal></expr>:</case> <comment type="block" pos:start="187:21" pos:end="187:33">/* movntss */</comment>

        <case pos:start="189:9" pos:end="189:19">case <expr pos:start="189:14" pos:end="189:18"><literal type="number" pos:start="189:14" pos:end="189:18">0x32b</literal></expr>:</case> <comment type="block" pos:start="189:21" pos:end="189:33">/* movntsd */</comment>

            <if_stmt pos:start="191:13" pos:end="193:32"><if pos:start="191:13" pos:end="193:32">if <condition pos:start="191:16" pos:end="191:25">(<expr pos:start="191:17" pos:end="191:24"><name pos:start="191:17" pos:end="191:19">mod</name> <operator pos:start="191:21" pos:end="191:22">==</operator> <literal type="number" pos:start="191:24" pos:end="191:24">3</literal></expr>)</condition><block type="pseudo" pos:start="193:17" pos:end="193:32"><block_content pos:start="193:17" pos:end="193:32">

                <goto pos:start="193:17" pos:end="193:32">goto <name pos:start="193:22" pos:end="193:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:41"><expr pos:start="195:13" pos:end="195:40"><call pos:start="195:13" pos:end="195:40"><name pos:start="195:13" pos:end="195:25">gen_lea_modrm</name><argument_list pos:start="195:26" pos:end="195:40">(<argument pos:start="195:27" pos:end="195:29"><expr pos:start="195:27" pos:end="195:29"><name pos:start="195:27" pos:end="195:29">env</name></expr></argument>, <argument pos:start="195:32" pos:end="195:32"><expr pos:start="195:32" pos:end="195:32"><name pos:start="195:32" pos:end="195:32">s</name></expr></argument>, <argument pos:start="195:35" pos:end="195:39"><expr pos:start="195:35" pos:end="195:39"><name pos:start="195:35" pos:end="195:39">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="197:13" pos:end="211:13"><if pos:start="197:13" pos:end="203:13">if <condition pos:start="197:16" pos:end="197:23">(<expr pos:start="197:17" pos:end="197:22"><name pos:start="197:17" pos:end="197:18">b1</name> <operator pos:start="197:20" pos:end="197:20">&amp;</operator> <literal type="number" pos:start="197:22" pos:end="197:22">1</literal></expr>)</condition> <block pos:start="197:25" pos:end="203:13">{<block_content pos:start="199:17" pos:end="201:68">

                <expr_stmt pos:start="199:17" pos:end="201:68"><expr pos:start="199:17" pos:end="201:67"><call pos:start="199:17" pos:end="201:67"><name pos:start="199:17" pos:end="199:30">gen_stq_env_A0</name><argument_list pos:start="199:31" pos:end="201:67">(<argument pos:start="199:32" pos:end="199:32"><expr pos:start="199:32" pos:end="199:32"><name pos:start="199:32" pos:end="199:32">s</name></expr></argument>, <argument pos:start="199:35" pos:end="201:66"><expr pos:start="199:35" pos:end="201:66"><call pos:start="199:35" pos:end="201:66"><name pos:start="199:35" pos:end="199:42">offsetof</name><argument_list pos:start="199:43" pos:end="201:66">(<argument pos:start="199:44" pos:end="199:54"><expr pos:start="199:44" pos:end="199:54"><name pos:start="199:44" pos:end="199:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="201:44" pos:end="201:65"><expr pos:start="201:44" pos:end="201:65"><name pos:start="201:44" pos:end="201:56"><name pos:start="201:44" pos:end="201:51">xmm_regs</name><index pos:start="201:52" pos:end="201:56">[<expr pos:start="201:53" pos:end="201:55"><name pos:start="201:53" pos:end="201:55">reg</name></expr>]</index></name><operator pos:start="201:57" pos:end="201:57">.</operator><call pos:start="201:58" pos:end="201:65"><name pos:start="201:58" pos:end="201:62">XMM_Q</name><argument_list pos:start="201:63" pos:end="201:65">(<argument pos:start="201:64" pos:end="201:64"><expr pos:start="201:64" pos:end="201:64"><literal type="number" pos:start="201:64" pos:end="201:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="203:15" pos:end="211:13">else <block pos:start="203:20" pos:end="211:13">{<block_content pos:start="205:17" pos:end="209:56">

                <expr_stmt pos:start="205:17" pos:end="207:45"><expr pos:start="205:17" pos:end="207:44"><call pos:start="205:17" pos:end="207:44"><name pos:start="205:17" pos:end="205:32">tcg_gen_ld32u_tl</name><argument_list pos:start="205:33" pos:end="207:44">(<argument pos:start="205:34" pos:end="205:41"><expr pos:start="205:34" pos:end="205:41"><name pos:start="205:34" pos:end="205:41"><name pos:start="205:34" pos:end="205:38">cpu_T</name><index pos:start="205:39" pos:end="205:41">[<expr pos:start="205:40" pos:end="205:40"><literal type="number" pos:start="205:40" pos:end="205:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="205:44" pos:end="205:50"><expr pos:start="205:44" pos:end="205:50"><name pos:start="205:44" pos:end="205:50">cpu_env</name></expr></argument>, <argument pos:start="205:53" pos:end="207:43"><expr pos:start="205:53" pos:end="207:43"><call pos:start="205:53" pos:end="207:43"><name pos:start="205:53" pos:end="205:60">offsetof</name><argument_list pos:start="205:61" pos:end="207:43">(<argument pos:start="205:62" pos:end="205:72"><expr pos:start="205:62" pos:end="205:72"><name pos:start="205:62" pos:end="205:72">CPUX86State</name></expr></argument>,

                    <argument pos:start="207:21" pos:end="207:42"><expr pos:start="207:21" pos:end="207:42"><name pos:start="207:21" pos:end="207:33"><name pos:start="207:21" pos:end="207:28">xmm_regs</name><index pos:start="207:29" pos:end="207:33">[<expr pos:start="207:30" pos:end="207:32"><name pos:start="207:30" pos:end="207:32">reg</name></expr>]</index></name><operator pos:start="207:34" pos:end="207:34">.</operator><call pos:start="207:35" pos:end="207:42"><name pos:start="207:35" pos:end="207:39">XMM_L</name><argument_list pos:start="207:40" pos:end="207:42">(<argument pos:start="207:41" pos:end="207:41"><expr pos:start="207:41" pos:end="207:41"><literal type="number" pos:start="207:41" pos:end="207:41">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:56"><expr pos:start="209:17" pos:end="209:55"><call pos:start="209:17" pos:end="209:55"><name pos:start="209:17" pos:end="209:27">gen_op_st_v</name><argument_list pos:start="209:28" pos:end="209:55">(<argument pos:start="209:29" pos:end="209:29"><expr pos:start="209:29" pos:end="209:29"><name pos:start="209:29" pos:end="209:29">s</name></expr></argument>, <argument pos:start="209:32" pos:end="209:36"><expr pos:start="209:32" pos:end="209:36"><name pos:start="209:32" pos:end="209:36">MO_32</name></expr></argument>, <argument pos:start="209:39" pos:end="209:46"><expr pos:start="209:39" pos:end="209:46"><name pos:start="209:39" pos:end="209:46"><name pos:start="209:39" pos:end="209:43">cpu_T</name><index pos:start="209:44" pos:end="209:46">[<expr pos:start="209:45" pos:end="209:45"><literal type="number" pos:start="209:45" pos:end="209:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="209:49" pos:end="209:54"><expr pos:start="209:49" pos:end="209:54"><name pos:start="209:49" pos:end="209:54">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="213:13" pos:end="213:18">break;</break>

        <case pos:start="215:9" pos:end="218:0">case <expr pos:start="215:14" pos:end="215:17"><literal type="number" pos:start="215:14" pos:end="215:17">0x6e</literal></expr>:</case> <comment type="block" pos:start="215:20" pos:end="215:36">/* movd mm, ea */</comment>

<cpp:ifdef pos:start="217:1" pos:end="217:20">#<cpp:directive pos:start="217:2" pos:end="217:6">ifdef</cpp:directive> <name pos:start="217:8" pos:end="217:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="219:13" pos:end="241:13"><if pos:start="219:13" pos:end="225:13">if <condition pos:start="219:16" pos:end="219:34">(<expr pos:start="219:17" pos:end="219:33"><name pos:start="219:17" pos:end="219:24"><name pos:start="219:17" pos:end="219:17">s</name><operator pos:start="219:18" pos:end="219:19">-&gt;</operator><name pos:start="219:20" pos:end="219:24">dflag</name></name> <operator pos:start="219:26" pos:end="219:27">==</operator> <name pos:start="219:29" pos:end="219:33">MO_64</name></expr>)</condition> <block pos:start="219:36" pos:end="225:13">{<block_content pos:start="221:17" pos:end="223:88">

                <expr_stmt pos:start="221:17" pos:end="221:65"><expr pos:start="221:17" pos:end="221:64"><call pos:start="221:17" pos:end="221:64"><name pos:start="221:17" pos:end="221:30">gen_ldst_modrm</name><argument_list pos:start="221:31" pos:end="221:64">(<argument pos:start="221:32" pos:end="221:34"><expr pos:start="221:32" pos:end="221:34"><name pos:start="221:32" pos:end="221:34">env</name></expr></argument>, <argument pos:start="221:37" pos:end="221:37"><expr pos:start="221:37" pos:end="221:37"><name pos:start="221:37" pos:end="221:37">s</name></expr></argument>, <argument pos:start="221:40" pos:end="221:44"><expr pos:start="221:40" pos:end="221:44"><name pos:start="221:40" pos:end="221:44">modrm</name></expr></argument>, <argument pos:start="221:47" pos:end="221:51"><expr pos:start="221:47" pos:end="221:51"><name pos:start="221:47" pos:end="221:51">MO_64</name></expr></argument>, <argument pos:start="221:54" pos:end="221:60"><expr pos:start="221:54" pos:end="221:60"><name pos:start="221:54" pos:end="221:60">OR_TMP0</name></expr></argument>, <argument pos:start="221:63" pos:end="221:63"><expr pos:start="221:63" pos:end="221:63"><literal type="number" pos:start="221:63" pos:end="221:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="223:17" pos:end="223:88"><expr pos:start="223:17" pos:end="223:87"><call pos:start="223:17" pos:end="223:87"><name pos:start="223:17" pos:end="223:29">tcg_gen_st_tl</name><argument_list pos:start="223:30" pos:end="223:87">(<argument pos:start="223:31" pos:end="223:38"><expr pos:start="223:31" pos:end="223:38"><name pos:start="223:31" pos:end="223:38"><name pos:start="223:31" pos:end="223:35">cpu_T</name><index pos:start="223:36" pos:end="223:38">[<expr pos:start="223:37" pos:end="223:37"><literal type="number" pos:start="223:37" pos:end="223:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="223:41" pos:end="223:47"><expr pos:start="223:41" pos:end="223:47"><name pos:start="223:41" pos:end="223:47">cpu_env</name></expr></argument>, <argument pos:start="223:50" pos:end="223:86"><expr pos:start="223:50" pos:end="223:86"><call pos:start="223:50" pos:end="223:86"><name pos:start="223:50" pos:end="223:57">offsetof</name><argument_list pos:start="223:58" pos:end="223:86">(<argument pos:start="223:59" pos:end="223:69"><expr pos:start="223:59" pos:end="223:69"><name pos:start="223:59" pos:end="223:69">CPUX86State</name></expr></argument>,<argument pos:start="223:71" pos:end="223:85"><expr pos:start="223:71" pos:end="223:85"><name pos:start="223:71" pos:end="223:81"><name pos:start="223:71" pos:end="223:76">fpregs</name><index pos:start="223:77" pos:end="223:81">[<expr pos:start="223:78" pos:end="223:80"><name pos:start="223:78" pos:end="223:80">reg</name></expr>]</index></name><operator pos:start="223:82" pos:end="223:82">.</operator><name pos:start="223:83" pos:end="223:85">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="225:15" pos:end="241:13">else

<cpp:endif pos:start="227:1" pos:end="227:6">#<cpp:directive pos:start="227:2" pos:end="227:6">endif</cpp:directive></cpp:endif>

            <block pos:start="229:13" pos:end="241:13">{<block_content pos:start="231:17" pos:end="239:66">

                <expr_stmt pos:start="231:17" pos:end="231:65"><expr pos:start="231:17" pos:end="231:64"><call pos:start="231:17" pos:end="231:64"><name pos:start="231:17" pos:end="231:30">gen_ldst_modrm</name><argument_list pos:start="231:31" pos:end="231:64">(<argument pos:start="231:32" pos:end="231:34"><expr pos:start="231:32" pos:end="231:34"><name pos:start="231:32" pos:end="231:34">env</name></expr></argument>, <argument pos:start="231:37" pos:end="231:37"><expr pos:start="231:37" pos:end="231:37"><name pos:start="231:37" pos:end="231:37">s</name></expr></argument>, <argument pos:start="231:40" pos:end="231:44"><expr pos:start="231:40" pos:end="231:44"><name pos:start="231:40" pos:end="231:44">modrm</name></expr></argument>, <argument pos:start="231:47" pos:end="231:51"><expr pos:start="231:47" pos:end="231:51"><name pos:start="231:47" pos:end="231:51">MO_32</name></expr></argument>, <argument pos:start="231:54" pos:end="231:60"><expr pos:start="231:54" pos:end="231:60"><name pos:start="231:54" pos:end="231:60">OR_TMP0</name></expr></argument>, <argument pos:start="231:63" pos:end="231:63"><expr pos:start="231:63" pos:end="231:63"><literal type="number" pos:start="231:63" pos:end="231:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="233:17" pos:end="235:72"><expr pos:start="233:17" pos:end="235:71"><call pos:start="233:17" pos:end="235:71"><name pos:start="233:17" pos:end="233:32">tcg_gen_addi_ptr</name><argument_list pos:start="233:33" pos:end="235:71">(<argument pos:start="233:34" pos:end="233:41"><expr pos:start="233:34" pos:end="233:41"><name pos:start="233:34" pos:end="233:41">cpu_ptr0</name></expr></argument>, <argument pos:start="233:44" pos:end="233:50"><expr pos:start="233:44" pos:end="233:50"><name pos:start="233:44" pos:end="233:50">cpu_env</name></expr></argument>, 

                                 <argument pos:start="235:34" pos:end="235:70"><expr pos:start="235:34" pos:end="235:70"><call pos:start="235:34" pos:end="235:70"><name pos:start="235:34" pos:end="235:41">offsetof</name><argument_list pos:start="235:42" pos:end="235:70">(<argument pos:start="235:43" pos:end="235:53"><expr pos:start="235:43" pos:end="235:53"><name pos:start="235:43" pos:end="235:53">CPUX86State</name></expr></argument>,<argument pos:start="235:55" pos:end="235:69"><expr pos:start="235:55" pos:end="235:69"><name pos:start="235:55" pos:end="235:65"><name pos:start="235:55" pos:end="235:60">fpregs</name><index pos:start="235:61" pos:end="235:65">[<expr pos:start="235:62" pos:end="235:64"><name pos:start="235:62" pos:end="235:64">reg</name></expr>]</index></name><operator pos:start="235:66" pos:end="235:66">.</operator><name pos:start="235:67" pos:end="235:69">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="237:17" pos:end="237:61"><expr pos:start="237:17" pos:end="237:60"><call pos:start="237:17" pos:end="237:60"><name pos:start="237:17" pos:end="237:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="237:37" pos:end="237:60">(<argument pos:start="237:38" pos:end="237:49"><expr pos:start="237:38" pos:end="237:49"><name pos:start="237:38" pos:end="237:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="237:52" pos:end="237:59"><expr pos:start="237:52" pos:end="237:59"><name pos:start="237:52" pos:end="237:59"><name pos:start="237:52" pos:end="237:56">cpu_T</name><index pos:start="237:57" pos:end="237:59">[<expr pos:start="237:58" pos:end="237:58"><literal type="number" pos:start="237:58" pos:end="237:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="239:17" pos:end="239:66"><expr pos:start="239:17" pos:end="239:65"><call pos:start="239:17" pos:end="239:65"><name pos:start="239:17" pos:end="239:41">gen_helper_movl_mm_T0_mmx</name><argument_list pos:start="239:42" pos:end="239:65">(<argument pos:start="239:43" pos:end="239:50"><expr pos:start="239:43" pos:end="239:50"><name pos:start="239:43" pos:end="239:50">cpu_ptr0</name></expr></argument>, <argument pos:start="239:53" pos:end="239:64"><expr pos:start="239:53" pos:end="239:64"><name pos:start="239:53" pos:end="239:64">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="243:13" pos:end="243:18">break;</break>

        <case pos:start="245:9" pos:end="248:0">case <expr pos:start="245:14" pos:end="245:18"><literal type="number" pos:start="245:14" pos:end="245:18">0x16e</literal></expr>:</case> <comment type="block" pos:start="245:21" pos:end="245:38">/* movd xmm, ea */</comment>

<cpp:ifdef pos:start="247:1" pos:end="247:20">#<cpp:directive pos:start="247:2" pos:end="247:6">ifdef</cpp:directive> <name pos:start="247:8" pos:end="247:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="249:13" pos:end="275:13"><if pos:start="249:13" pos:end="259:13">if <condition pos:start="249:16" pos:end="249:34">(<expr pos:start="249:17" pos:end="249:33"><name pos:start="249:17" pos:end="249:24"><name pos:start="249:17" pos:end="249:17">s</name><operator pos:start="249:18" pos:end="249:19">-&gt;</operator><name pos:start="249:20" pos:end="249:24">dflag</name></name> <operator pos:start="249:26" pos:end="249:27">==</operator> <name pos:start="249:29" pos:end="249:33">MO_64</name></expr>)</condition> <block pos:start="249:36" pos:end="259:13">{<block_content pos:start="251:17" pos:end="257:62">

                <expr_stmt pos:start="251:17" pos:end="251:65"><expr pos:start="251:17" pos:end="251:64"><call pos:start="251:17" pos:end="251:64"><name pos:start="251:17" pos:end="251:30">gen_ldst_modrm</name><argument_list pos:start="251:31" pos:end="251:64">(<argument pos:start="251:32" pos:end="251:34"><expr pos:start="251:32" pos:end="251:34"><name pos:start="251:32" pos:end="251:34">env</name></expr></argument>, <argument pos:start="251:37" pos:end="251:37"><expr pos:start="251:37" pos:end="251:37"><name pos:start="251:37" pos:end="251:37">s</name></expr></argument>, <argument pos:start="251:40" pos:end="251:44"><expr pos:start="251:40" pos:end="251:44"><name pos:start="251:40" pos:end="251:44">modrm</name></expr></argument>, <argument pos:start="251:47" pos:end="251:51"><expr pos:start="251:47" pos:end="251:51"><name pos:start="251:47" pos:end="251:51">MO_64</name></expr></argument>, <argument pos:start="251:54" pos:end="251:60"><expr pos:start="251:54" pos:end="251:60"><name pos:start="251:54" pos:end="251:60">OR_TMP0</name></expr></argument>, <argument pos:start="251:63" pos:end="251:63"><expr pos:start="251:63" pos:end="251:63"><literal type="number" pos:start="251:63" pos:end="251:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="255:70"><expr pos:start="253:17" pos:end="255:69"><call pos:start="253:17" pos:end="255:69"><name pos:start="253:17" pos:end="253:32">tcg_gen_addi_ptr</name><argument_list pos:start="253:33" pos:end="255:69">(<argument pos:start="253:34" pos:end="253:41"><expr pos:start="253:34" pos:end="253:41"><name pos:start="253:34" pos:end="253:41">cpu_ptr0</name></expr></argument>, <argument pos:start="253:44" pos:end="253:50"><expr pos:start="253:44" pos:end="253:50"><name pos:start="253:44" pos:end="253:50">cpu_env</name></expr></argument>, 

                                 <argument pos:start="255:34" pos:end="255:68"><expr pos:start="255:34" pos:end="255:68"><call pos:start="255:34" pos:end="255:68"><name pos:start="255:34" pos:end="255:41">offsetof</name><argument_list pos:start="255:42" pos:end="255:68">(<argument pos:start="255:43" pos:end="255:53"><expr pos:start="255:43" pos:end="255:53"><name pos:start="255:43" pos:end="255:53">CPUX86State</name></expr></argument>,<argument pos:start="255:55" pos:end="255:67"><expr pos:start="255:55" pos:end="255:67"><name pos:start="255:55" pos:end="255:67"><name pos:start="255:55" pos:end="255:62">xmm_regs</name><index pos:start="255:63" pos:end="255:67">[<expr pos:start="255:64" pos:end="255:66"><name pos:start="255:64" pos:end="255:66">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="257:17" pos:end="257:62"><expr pos:start="257:17" pos:end="257:61"><call pos:start="257:17" pos:end="257:61"><name pos:start="257:17" pos:end="257:41">gen_helper_movq_mm_T0_xmm</name><argument_list pos:start="257:42" pos:end="257:61">(<argument pos:start="257:43" pos:end="257:50"><expr pos:start="257:43" pos:end="257:50"><name pos:start="257:43" pos:end="257:50">cpu_ptr0</name></expr></argument>, <argument pos:start="257:53" pos:end="257:60"><expr pos:start="257:53" pos:end="257:60"><name pos:start="257:53" pos:end="257:60"><name pos:start="257:53" pos:end="257:57">cpu_T</name><index pos:start="257:58" pos:end="257:60">[<expr pos:start="257:59" pos:end="257:59"><literal type="number" pos:start="257:59" pos:end="257:59">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="259:15" pos:end="275:13">else

<cpp:endif pos:start="261:1" pos:end="261:6">#<cpp:directive pos:start="261:2" pos:end="261:6">endif</cpp:directive></cpp:endif>

            <block pos:start="263:13" pos:end="275:13">{<block_content pos:start="265:17" pos:end="273:66">

                <expr_stmt pos:start="265:17" pos:end="265:65"><expr pos:start="265:17" pos:end="265:64"><call pos:start="265:17" pos:end="265:64"><name pos:start="265:17" pos:end="265:30">gen_ldst_modrm</name><argument_list pos:start="265:31" pos:end="265:64">(<argument pos:start="265:32" pos:end="265:34"><expr pos:start="265:32" pos:end="265:34"><name pos:start="265:32" pos:end="265:34">env</name></expr></argument>, <argument pos:start="265:37" pos:end="265:37"><expr pos:start="265:37" pos:end="265:37"><name pos:start="265:37" pos:end="265:37">s</name></expr></argument>, <argument pos:start="265:40" pos:end="265:44"><expr pos:start="265:40" pos:end="265:44"><name pos:start="265:40" pos:end="265:44">modrm</name></expr></argument>, <argument pos:start="265:47" pos:end="265:51"><expr pos:start="265:47" pos:end="265:51"><name pos:start="265:47" pos:end="265:51">MO_32</name></expr></argument>, <argument pos:start="265:54" pos:end="265:60"><expr pos:start="265:54" pos:end="265:60"><name pos:start="265:54" pos:end="265:60">OR_TMP0</name></expr></argument>, <argument pos:start="265:63" pos:end="265:63"><expr pos:start="265:63" pos:end="265:63"><literal type="number" pos:start="265:63" pos:end="265:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="267:17" pos:end="269:70"><expr pos:start="267:17" pos:end="269:69"><call pos:start="267:17" pos:end="269:69"><name pos:start="267:17" pos:end="267:32">tcg_gen_addi_ptr</name><argument_list pos:start="267:33" pos:end="269:69">(<argument pos:start="267:34" pos:end="267:41"><expr pos:start="267:34" pos:end="267:41"><name pos:start="267:34" pos:end="267:41">cpu_ptr0</name></expr></argument>, <argument pos:start="267:44" pos:end="267:50"><expr pos:start="267:44" pos:end="267:50"><name pos:start="267:44" pos:end="267:50">cpu_env</name></expr></argument>, 

                                 <argument pos:start="269:34" pos:end="269:68"><expr pos:start="269:34" pos:end="269:68"><call pos:start="269:34" pos:end="269:68"><name pos:start="269:34" pos:end="269:41">offsetof</name><argument_list pos:start="269:42" pos:end="269:68">(<argument pos:start="269:43" pos:end="269:53"><expr pos:start="269:43" pos:end="269:53"><name pos:start="269:43" pos:end="269:53">CPUX86State</name></expr></argument>,<argument pos:start="269:55" pos:end="269:67"><expr pos:start="269:55" pos:end="269:67"><name pos:start="269:55" pos:end="269:67"><name pos:start="269:55" pos:end="269:62">xmm_regs</name><index pos:start="269:63" pos:end="269:67">[<expr pos:start="269:64" pos:end="269:66"><name pos:start="269:64" pos:end="269:66">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="271:17" pos:end="271:61"><expr pos:start="271:17" pos:end="271:60"><call pos:start="271:17" pos:end="271:60"><name pos:start="271:17" pos:end="271:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="271:37" pos:end="271:60">(<argument pos:start="271:38" pos:end="271:49"><expr pos:start="271:38" pos:end="271:49"><name pos:start="271:38" pos:end="271:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="271:52" pos:end="271:59"><expr pos:start="271:52" pos:end="271:59"><name pos:start="271:52" pos:end="271:59"><name pos:start="271:52" pos:end="271:56">cpu_T</name><index pos:start="271:57" pos:end="271:59">[<expr pos:start="271:58" pos:end="271:58"><literal type="number" pos:start="271:58" pos:end="271:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="273:17" pos:end="273:66"><expr pos:start="273:17" pos:end="273:65"><call pos:start="273:17" pos:end="273:65"><name pos:start="273:17" pos:end="273:41">gen_helper_movl_mm_T0_xmm</name><argument_list pos:start="273:42" pos:end="273:65">(<argument pos:start="273:43" pos:end="273:50"><expr pos:start="273:43" pos:end="273:50"><name pos:start="273:43" pos:end="273:50">cpu_ptr0</name></expr></argument>, <argument pos:start="273:53" pos:end="273:64"><expr pos:start="273:53" pos:end="273:64"><name pos:start="273:53" pos:end="273:64">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="277:13" pos:end="277:18">break;</break>

        <case pos:start="279:9" pos:end="279:18">case <expr pos:start="279:14" pos:end="279:17"><literal type="number" pos:start="279:14" pos:end="279:17">0x6f</literal></expr>:</case> <comment type="block" pos:start="279:20" pos:end="279:36">/* movq mm, ea */</comment>

            <if_stmt pos:start="281:13" pos:end="299:13"><if pos:start="281:13" pos:end="287:13">if <condition pos:start="281:16" pos:end="281:25">(<expr pos:start="281:17" pos:end="281:24"><name pos:start="281:17" pos:end="281:19">mod</name> <operator pos:start="281:21" pos:end="281:22">!=</operator> <literal type="number" pos:start="281:24" pos:end="281:24">3</literal></expr>)</condition> <block pos:start="281:27" pos:end="287:13">{<block_content pos:start="283:17" pos:end="285:74">

                <expr_stmt pos:start="283:17" pos:end="283:45"><expr pos:start="283:17" pos:end="283:44"><call pos:start="283:17" pos:end="283:44"><name pos:start="283:17" pos:end="283:29">gen_lea_modrm</name><argument_list pos:start="283:30" pos:end="283:44">(<argument pos:start="283:31" pos:end="283:33"><expr pos:start="283:31" pos:end="283:33"><name pos:start="283:31" pos:end="283:33">env</name></expr></argument>, <argument pos:start="283:36" pos:end="283:36"><expr pos:start="283:36" pos:end="283:36"><name pos:start="283:36" pos:end="283:36">s</name></expr></argument>, <argument pos:start="283:39" pos:end="283:43"><expr pos:start="283:39" pos:end="283:43"><name pos:start="283:39" pos:end="283:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="285:17" pos:end="285:74"><expr pos:start="285:17" pos:end="285:73"><call pos:start="285:17" pos:end="285:73"><name pos:start="285:17" pos:end="285:30">gen_ldq_env_A0</name><argument_list pos:start="285:31" pos:end="285:73">(<argument pos:start="285:32" pos:end="285:32"><expr pos:start="285:32" pos:end="285:32"><name pos:start="285:32" pos:end="285:32">s</name></expr></argument>, <argument pos:start="285:35" pos:end="285:72"><expr pos:start="285:35" pos:end="285:72"><call pos:start="285:35" pos:end="285:72"><name pos:start="285:35" pos:end="285:42">offsetof</name><argument_list pos:start="285:43" pos:end="285:72">(<argument pos:start="285:44" pos:end="285:54"><expr pos:start="285:44" pos:end="285:54"><name pos:start="285:44" pos:end="285:54">CPUX86State</name></expr></argument>, <argument pos:start="285:57" pos:end="285:71"><expr pos:start="285:57" pos:end="285:71"><name pos:start="285:57" pos:end="285:67"><name pos:start="285:57" pos:end="285:62">fpregs</name><index pos:start="285:63" pos:end="285:67">[<expr pos:start="285:64" pos:end="285:66"><name pos:start="285:64" pos:end="285:66">reg</name></expr>]</index></name><operator pos:start="285:68" pos:end="285:68">.</operator><name pos:start="285:69" pos:end="285:71">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="287:15" pos:end="299:13">else <block pos:start="287:20" pos:end="299:13">{<block_content pos:start="289:17" pos:end="297:70">

                <expr_stmt pos:start="289:17" pos:end="289:33"><expr pos:start="289:17" pos:end="289:32"><name pos:start="289:17" pos:end="289:18">rm</name> <operator pos:start="289:20" pos:end="289:20">=</operator> <operator pos:start="289:22" pos:end="289:22">(</operator><name pos:start="289:23" pos:end="289:27">modrm</name> <operator pos:start="289:29" pos:end="289:29">&amp;</operator> <literal type="number" pos:start="289:31" pos:end="289:31">7</literal><operator pos:start="289:32" pos:end="289:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="291:17" pos:end="293:69"><expr pos:start="291:17" pos:end="293:68"><call pos:start="291:17" pos:end="293:68"><name pos:start="291:17" pos:end="291:30">tcg_gen_ld_i64</name><argument_list pos:start="291:31" pos:end="293:68">(<argument pos:start="291:32" pos:end="291:43"><expr pos:start="291:32" pos:end="291:43"><name pos:start="291:32" pos:end="291:43">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="291:46" pos:end="291:52"><expr pos:start="291:46" pos:end="291:52"><name pos:start="291:46" pos:end="291:52">cpu_env</name></expr></argument>,

                               <argument pos:start="293:32" pos:end="293:67"><expr pos:start="293:32" pos:end="293:67"><call pos:start="293:32" pos:end="293:67"><name pos:start="293:32" pos:end="293:39">offsetof</name><argument_list pos:start="293:40" pos:end="293:67">(<argument pos:start="293:41" pos:end="293:51"><expr pos:start="293:41" pos:end="293:51"><name pos:start="293:41" pos:end="293:51">CPUX86State</name></expr></argument>,<argument pos:start="293:53" pos:end="293:66"><expr pos:start="293:53" pos:end="293:66"><name pos:start="293:53" pos:end="293:62"><name pos:start="293:53" pos:end="293:58">fpregs</name><index pos:start="293:59" pos:end="293:62">[<expr pos:start="293:60" pos:end="293:61"><name pos:start="293:60" pos:end="293:61">rm</name></expr>]</index></name><operator pos:start="293:63" pos:end="293:63">.</operator><name pos:start="293:64" pos:end="293:66">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="295:17" pos:end="297:70"><expr pos:start="295:17" pos:end="297:69"><call pos:start="295:17" pos:end="297:69"><name pos:start="295:17" pos:end="295:30">tcg_gen_st_i64</name><argument_list pos:start="295:31" pos:end="297:69">(<argument pos:start="295:32" pos:end="295:43"><expr pos:start="295:32" pos:end="295:43"><name pos:start="295:32" pos:end="295:43">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="295:46" pos:end="295:52"><expr pos:start="295:46" pos:end="295:52"><name pos:start="295:46" pos:end="295:52">cpu_env</name></expr></argument>,

                               <argument pos:start="297:32" pos:end="297:68"><expr pos:start="297:32" pos:end="297:68"><call pos:start="297:32" pos:end="297:68"><name pos:start="297:32" pos:end="297:39">offsetof</name><argument_list pos:start="297:40" pos:end="297:68">(<argument pos:start="297:41" pos:end="297:51"><expr pos:start="297:41" pos:end="297:51"><name pos:start="297:41" pos:end="297:51">CPUX86State</name></expr></argument>,<argument pos:start="297:53" pos:end="297:67"><expr pos:start="297:53" pos:end="297:67"><name pos:start="297:53" pos:end="297:63"><name pos:start="297:53" pos:end="297:58">fpregs</name><index pos:start="297:59" pos:end="297:63">[<expr pos:start="297:60" pos:end="297:62"><name pos:start="297:60" pos:end="297:62">reg</name></expr>]</index></name><operator pos:start="297:64" pos:end="297:64">.</operator><name pos:start="297:65" pos:end="297:67">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="301:13" pos:end="301:18">break;</break>

        <case pos:start="303:9" pos:end="303:19">case <expr pos:start="303:14" pos:end="303:18"><literal type="number" pos:start="303:14" pos:end="303:18">0x010</literal></expr>:</case> <comment type="block" pos:start="303:21" pos:end="303:32">/* movups */</comment>

        <case pos:start="305:9" pos:end="305:19">case <expr pos:start="305:14" pos:end="305:18"><literal type="number" pos:start="305:14" pos:end="305:18">0x110</literal></expr>:</case> <comment type="block" pos:start="305:21" pos:end="305:32">/* movupd */</comment>

        <case pos:start="307:9" pos:end="307:19">case <expr pos:start="307:14" pos:end="307:18"><literal type="number" pos:start="307:14" pos:end="307:18">0x028</literal></expr>:</case> <comment type="block" pos:start="307:21" pos:end="307:32">/* movaps */</comment>

        <case pos:start="309:9" pos:end="309:19">case <expr pos:start="309:14" pos:end="309:18"><literal type="number" pos:start="309:14" pos:end="309:18">0x128</literal></expr>:</case> <comment type="block" pos:start="309:21" pos:end="309:32">/* movapd */</comment>

        <case pos:start="311:9" pos:end="311:19">case <expr pos:start="311:14" pos:end="311:18"><literal type="number" pos:start="311:14" pos:end="311:18">0x16f</literal></expr>:</case> <comment type="block" pos:start="311:21" pos:end="311:40">/* movdqa xmm, ea */</comment>

        <case pos:start="313:9" pos:end="313:19">case <expr pos:start="313:14" pos:end="313:18"><literal type="number" pos:start="313:14" pos:end="313:18">0x26f</literal></expr>:</case> <comment type="block" pos:start="313:21" pos:end="313:40">/* movdqu xmm, ea */</comment>

            <if_stmt pos:start="315:13" pos:end="329:13"><if pos:start="315:13" pos:end="321:13">if <condition pos:start="315:16" pos:end="315:25">(<expr pos:start="315:17" pos:end="315:24"><name pos:start="315:17" pos:end="315:19">mod</name> <operator pos:start="315:21" pos:end="315:22">!=</operator> <literal type="number" pos:start="315:24" pos:end="315:24">3</literal></expr>)</condition> <block pos:start="315:27" pos:end="321:13">{<block_content pos:start="317:17" pos:end="319:72">

                <expr_stmt pos:start="317:17" pos:end="317:45"><expr pos:start="317:17" pos:end="317:44"><call pos:start="317:17" pos:end="317:44"><name pos:start="317:17" pos:end="317:29">gen_lea_modrm</name><argument_list pos:start="317:30" pos:end="317:44">(<argument pos:start="317:31" pos:end="317:33"><expr pos:start="317:31" pos:end="317:33"><name pos:start="317:31" pos:end="317:33">env</name></expr></argument>, <argument pos:start="317:36" pos:end="317:36"><expr pos:start="317:36" pos:end="317:36"><name pos:start="317:36" pos:end="317:36">s</name></expr></argument>, <argument pos:start="317:39" pos:end="317:43"><expr pos:start="317:39" pos:end="317:43"><name pos:start="317:39" pos:end="317:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="319:17" pos:end="319:72"><expr pos:start="319:17" pos:end="319:71"><call pos:start="319:17" pos:end="319:71"><name pos:start="319:17" pos:end="319:30">gen_ldo_env_A0</name><argument_list pos:start="319:31" pos:end="319:71">(<argument pos:start="319:32" pos:end="319:32"><expr pos:start="319:32" pos:end="319:32"><name pos:start="319:32" pos:end="319:32">s</name></expr></argument>, <argument pos:start="319:35" pos:end="319:70"><expr pos:start="319:35" pos:end="319:70"><call pos:start="319:35" pos:end="319:70"><name pos:start="319:35" pos:end="319:42">offsetof</name><argument_list pos:start="319:43" pos:end="319:70">(<argument pos:start="319:44" pos:end="319:54"><expr pos:start="319:44" pos:end="319:54"><name pos:start="319:44" pos:end="319:54">CPUX86State</name></expr></argument>, <argument pos:start="319:57" pos:end="319:69"><expr pos:start="319:57" pos:end="319:69"><name pos:start="319:57" pos:end="319:69"><name pos:start="319:57" pos:end="319:64">xmm_regs</name><index pos:start="319:65" pos:end="319:69">[<expr pos:start="319:66" pos:end="319:68"><name pos:start="319:66" pos:end="319:68">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="321:15" pos:end="329:13">else <block pos:start="321:20" pos:end="329:13">{<block_content pos:start="323:17" pos:end="327:64">

                <expr_stmt pos:start="323:17" pos:end="323:44"><expr pos:start="323:17" pos:end="323:43"><name pos:start="323:17" pos:end="323:18">rm</name> <operator pos:start="323:20" pos:end="323:20">=</operator> <operator pos:start="323:22" pos:end="323:22">(</operator><name pos:start="323:23" pos:end="323:27">modrm</name> <operator pos:start="323:29" pos:end="323:29">&amp;</operator> <literal type="number" pos:start="323:31" pos:end="323:31">7</literal><operator pos:start="323:32" pos:end="323:32">)</operator> <operator pos:start="323:34" pos:end="323:34">|</operator> <call pos:start="323:36" pos:end="323:43"><name pos:start="323:36" pos:end="323:40">REX_B</name><argument_list pos:start="323:41" pos:end="323:43">(<argument pos:start="323:42" pos:end="323:42"><expr pos:start="323:42" pos:end="323:42"><name pos:start="323:42" pos:end="323:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="325:17" pos:end="327:64"><expr pos:start="325:17" pos:end="327:63"><call pos:start="325:17" pos:end="327:63"><name pos:start="325:17" pos:end="325:27">gen_op_movo</name><argument_list pos:start="325:28" pos:end="327:63">(<argument pos:start="325:29" pos:end="325:63"><expr pos:start="325:29" pos:end="325:63"><call pos:start="325:29" pos:end="325:63"><name pos:start="325:29" pos:end="325:36">offsetof</name><argument_list pos:start="325:37" pos:end="325:63">(<argument pos:start="325:38" pos:end="325:48"><expr pos:start="325:38" pos:end="325:48"><name pos:start="325:38" pos:end="325:48">CPUX86State</name></expr></argument>,<argument pos:start="325:50" pos:end="325:62"><expr pos:start="325:50" pos:end="325:62"><name pos:start="325:50" pos:end="325:62"><name pos:start="325:50" pos:end="325:57">xmm_regs</name><index pos:start="325:58" pos:end="325:62">[<expr pos:start="325:59" pos:end="325:61"><name pos:start="325:59" pos:end="325:61">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="327:29" pos:end="327:62"><expr pos:start="327:29" pos:end="327:62"><call pos:start="327:29" pos:end="327:62"><name pos:start="327:29" pos:end="327:36">offsetof</name><argument_list pos:start="327:37" pos:end="327:62">(<argument pos:start="327:38" pos:end="327:48"><expr pos:start="327:38" pos:end="327:48"><name pos:start="327:38" pos:end="327:48">CPUX86State</name></expr></argument>,<argument pos:start="327:50" pos:end="327:61"><expr pos:start="327:50" pos:end="327:61"><name pos:start="327:50" pos:end="327:61"><name pos:start="327:50" pos:end="327:57">xmm_regs</name><index pos:start="327:58" pos:end="327:61">[<expr pos:start="327:59" pos:end="327:60"><name pos:start="327:59" pos:end="327:60">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="331:13" pos:end="331:18">break;</break>

        <case pos:start="333:9" pos:end="333:19">case <expr pos:start="333:14" pos:end="333:18"><literal type="number" pos:start="333:14" pos:end="333:18">0x210</literal></expr>:</case> <comment type="block" pos:start="333:21" pos:end="333:39">/* movss xmm, ea */</comment>

            <if_stmt pos:start="335:13" pos:end="359:13"><if pos:start="335:13" pos:end="351:13">if <condition pos:start="335:16" pos:end="335:25">(<expr pos:start="335:17" pos:end="335:24"><name pos:start="335:17" pos:end="335:19">mod</name> <operator pos:start="335:21" pos:end="335:22">!=</operator> <literal type="number" pos:start="335:24" pos:end="335:24">3</literal></expr>)</condition> <block pos:start="335:27" pos:end="351:13">{<block_content pos:start="337:17" pos:end="349:97">

                <expr_stmt pos:start="337:17" pos:end="337:45"><expr pos:start="337:17" pos:end="337:44"><call pos:start="337:17" pos:end="337:44"><name pos:start="337:17" pos:end="337:29">gen_lea_modrm</name><argument_list pos:start="337:30" pos:end="337:44">(<argument pos:start="337:31" pos:end="337:33"><expr pos:start="337:31" pos:end="337:33"><name pos:start="337:31" pos:end="337:33">env</name></expr></argument>, <argument pos:start="337:36" pos:end="337:36"><expr pos:start="337:36" pos:end="337:36"><name pos:start="337:36" pos:end="337:36">s</name></expr></argument>, <argument pos:start="337:39" pos:end="337:43"><expr pos:start="337:39" pos:end="337:43"><name pos:start="337:39" pos:end="337:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="339:17" pos:end="339:56"><expr pos:start="339:17" pos:end="339:55"><call pos:start="339:17" pos:end="339:55"><name pos:start="339:17" pos:end="339:27">gen_op_ld_v</name><argument_list pos:start="339:28" pos:end="339:55">(<argument pos:start="339:29" pos:end="339:29"><expr pos:start="339:29" pos:end="339:29"><name pos:start="339:29" pos:end="339:29">s</name></expr></argument>, <argument pos:start="339:32" pos:end="339:36"><expr pos:start="339:32" pos:end="339:36"><name pos:start="339:32" pos:end="339:36">MO_32</name></expr></argument>, <argument pos:start="339:39" pos:end="339:46"><expr pos:start="339:39" pos:end="339:46"><name pos:start="339:39" pos:end="339:46"><name pos:start="339:39" pos:end="339:43">cpu_T</name><index pos:start="339:44" pos:end="339:46">[<expr pos:start="339:45" pos:end="339:45"><literal type="number" pos:start="339:45" pos:end="339:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="339:49" pos:end="339:54"><expr pos:start="339:49" pos:end="339:54"><name pos:start="339:49" pos:end="339:54">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="341:17" pos:end="341:97"><expr pos:start="341:17" pos:end="341:96"><call pos:start="341:17" pos:end="341:96"><name pos:start="341:17" pos:end="341:31">tcg_gen_st32_tl</name><argument_list pos:start="341:32" pos:end="341:96">(<argument pos:start="341:33" pos:end="341:40"><expr pos:start="341:33" pos:end="341:40"><name pos:start="341:33" pos:end="341:40"><name pos:start="341:33" pos:end="341:37">cpu_T</name><index pos:start="341:38" pos:end="341:40">[<expr pos:start="341:39" pos:end="341:39"><literal type="number" pos:start="341:39" pos:end="341:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="341:43" pos:end="341:49"><expr pos:start="341:43" pos:end="341:49"><name pos:start="341:43" pos:end="341:49">cpu_env</name></expr></argument>, <argument pos:start="341:52" pos:end="341:95"><expr pos:start="341:52" pos:end="341:95"><call pos:start="341:52" pos:end="341:95"><name pos:start="341:52" pos:end="341:59">offsetof</name><argument_list pos:start="341:60" pos:end="341:95">(<argument pos:start="341:61" pos:end="341:71"><expr pos:start="341:61" pos:end="341:71"><name pos:start="341:61" pos:end="341:71">CPUX86State</name></expr></argument>,<argument pos:start="341:73" pos:end="341:94"><expr pos:start="341:73" pos:end="341:94"><name pos:start="341:73" pos:end="341:85"><name pos:start="341:73" pos:end="341:80">xmm_regs</name><index pos:start="341:81" pos:end="341:85">[<expr pos:start="341:82" pos:end="341:84"><name pos:start="341:82" pos:end="341:84">reg</name></expr>]</index></name><operator pos:start="341:86" pos:end="341:86">.</operator><call pos:start="341:87" pos:end="341:94"><name pos:start="341:87" pos:end="341:91">XMM_L</name><argument_list pos:start="341:92" pos:end="341:94">(<argument pos:start="341:93" pos:end="341:93"><expr pos:start="341:93" pos:end="341:93"><literal type="number" pos:start="341:93" pos:end="341:93">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="343:17" pos:end="343:45"><expr pos:start="343:17" pos:end="343:44"><call pos:start="343:17" pos:end="343:44"><name pos:start="343:17" pos:end="343:31">tcg_gen_movi_tl</name><argument_list pos:start="343:32" pos:end="343:44">(<argument pos:start="343:33" pos:end="343:40"><expr pos:start="343:33" pos:end="343:40"><name pos:start="343:33" pos:end="343:40"><name pos:start="343:33" pos:end="343:37">cpu_T</name><index pos:start="343:38" pos:end="343:40">[<expr pos:start="343:39" pos:end="343:39"><literal type="number" pos:start="343:39" pos:end="343:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="343:43" pos:end="343:43"><expr pos:start="343:43" pos:end="343:43"><literal type="number" pos:start="343:43" pos:end="343:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="345:17" pos:end="345:97"><expr pos:start="345:17" pos:end="345:96"><call pos:start="345:17" pos:end="345:96"><name pos:start="345:17" pos:end="345:31">tcg_gen_st32_tl</name><argument_list pos:start="345:32" pos:end="345:96">(<argument pos:start="345:33" pos:end="345:40"><expr pos:start="345:33" pos:end="345:40"><name pos:start="345:33" pos:end="345:40"><name pos:start="345:33" pos:end="345:37">cpu_T</name><index pos:start="345:38" pos:end="345:40">[<expr pos:start="345:39" pos:end="345:39"><literal type="number" pos:start="345:39" pos:end="345:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="345:43" pos:end="345:49"><expr pos:start="345:43" pos:end="345:49"><name pos:start="345:43" pos:end="345:49">cpu_env</name></expr></argument>, <argument pos:start="345:52" pos:end="345:95"><expr pos:start="345:52" pos:end="345:95"><call pos:start="345:52" pos:end="345:95"><name pos:start="345:52" pos:end="345:59">offsetof</name><argument_list pos:start="345:60" pos:end="345:95">(<argument pos:start="345:61" pos:end="345:71"><expr pos:start="345:61" pos:end="345:71"><name pos:start="345:61" pos:end="345:71">CPUX86State</name></expr></argument>,<argument pos:start="345:73" pos:end="345:94"><expr pos:start="345:73" pos:end="345:94"><name pos:start="345:73" pos:end="345:85"><name pos:start="345:73" pos:end="345:80">xmm_regs</name><index pos:start="345:81" pos:end="345:85">[<expr pos:start="345:82" pos:end="345:84"><name pos:start="345:82" pos:end="345:84">reg</name></expr>]</index></name><operator pos:start="345:86" pos:end="345:86">.</operator><call pos:start="345:87" pos:end="345:94"><name pos:start="345:87" pos:end="345:91">XMM_L</name><argument_list pos:start="345:92" pos:end="345:94">(<argument pos:start="345:93" pos:end="345:93"><expr pos:start="345:93" pos:end="345:93"><literal type="number" pos:start="345:93" pos:end="345:93">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="347:17" pos:end="347:97"><expr pos:start="347:17" pos:end="347:96"><call pos:start="347:17" pos:end="347:96"><name pos:start="347:17" pos:end="347:31">tcg_gen_st32_tl</name><argument_list pos:start="347:32" pos:end="347:96">(<argument pos:start="347:33" pos:end="347:40"><expr pos:start="347:33" pos:end="347:40"><name pos:start="347:33" pos:end="347:40"><name pos:start="347:33" pos:end="347:37">cpu_T</name><index pos:start="347:38" pos:end="347:40">[<expr pos:start="347:39" pos:end="347:39"><literal type="number" pos:start="347:39" pos:end="347:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="347:43" pos:end="347:49"><expr pos:start="347:43" pos:end="347:49"><name pos:start="347:43" pos:end="347:49">cpu_env</name></expr></argument>, <argument pos:start="347:52" pos:end="347:95"><expr pos:start="347:52" pos:end="347:95"><call pos:start="347:52" pos:end="347:95"><name pos:start="347:52" pos:end="347:59">offsetof</name><argument_list pos:start="347:60" pos:end="347:95">(<argument pos:start="347:61" pos:end="347:71"><expr pos:start="347:61" pos:end="347:71"><name pos:start="347:61" pos:end="347:71">CPUX86State</name></expr></argument>,<argument pos:start="347:73" pos:end="347:94"><expr pos:start="347:73" pos:end="347:94"><name pos:start="347:73" pos:end="347:85"><name pos:start="347:73" pos:end="347:80">xmm_regs</name><index pos:start="347:81" pos:end="347:85">[<expr pos:start="347:82" pos:end="347:84"><name pos:start="347:82" pos:end="347:84">reg</name></expr>]</index></name><operator pos:start="347:86" pos:end="347:86">.</operator><call pos:start="347:87" pos:end="347:94"><name pos:start="347:87" pos:end="347:91">XMM_L</name><argument_list pos:start="347:92" pos:end="347:94">(<argument pos:start="347:93" pos:end="347:93"><expr pos:start="347:93" pos:end="347:93"><literal type="number" pos:start="347:93" pos:end="347:93">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="349:17" pos:end="349:97"><expr pos:start="349:17" pos:end="349:96"><call pos:start="349:17" pos:end="349:96"><name pos:start="349:17" pos:end="349:31">tcg_gen_st32_tl</name><argument_list pos:start="349:32" pos:end="349:96">(<argument pos:start="349:33" pos:end="349:40"><expr pos:start="349:33" pos:end="349:40"><name pos:start="349:33" pos:end="349:40"><name pos:start="349:33" pos:end="349:37">cpu_T</name><index pos:start="349:38" pos:end="349:40">[<expr pos:start="349:39" pos:end="349:39"><literal type="number" pos:start="349:39" pos:end="349:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="349:43" pos:end="349:49"><expr pos:start="349:43" pos:end="349:49"><name pos:start="349:43" pos:end="349:49">cpu_env</name></expr></argument>, <argument pos:start="349:52" pos:end="349:95"><expr pos:start="349:52" pos:end="349:95"><call pos:start="349:52" pos:end="349:95"><name pos:start="349:52" pos:end="349:59">offsetof</name><argument_list pos:start="349:60" pos:end="349:95">(<argument pos:start="349:61" pos:end="349:71"><expr pos:start="349:61" pos:end="349:71"><name pos:start="349:61" pos:end="349:71">CPUX86State</name></expr></argument>,<argument pos:start="349:73" pos:end="349:94"><expr pos:start="349:73" pos:end="349:94"><name pos:start="349:73" pos:end="349:85"><name pos:start="349:73" pos:end="349:80">xmm_regs</name><index pos:start="349:81" pos:end="349:85">[<expr pos:start="349:82" pos:end="349:84"><name pos:start="349:82" pos:end="349:84">reg</name></expr>]</index></name><operator pos:start="349:86" pos:end="349:86">.</operator><call pos:start="349:87" pos:end="349:94"><name pos:start="349:87" pos:end="349:91">XMM_L</name><argument_list pos:start="349:92" pos:end="349:94">(<argument pos:start="349:93" pos:end="349:93"><expr pos:start="349:93" pos:end="349:93"><literal type="number" pos:start="349:93" pos:end="349:93">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="351:15" pos:end="359:13">else <block pos:start="351:20" pos:end="359:13">{<block_content pos:start="353:17" pos:end="357:73">

                <expr_stmt pos:start="353:17" pos:end="353:44"><expr pos:start="353:17" pos:end="353:43"><name pos:start="353:17" pos:end="353:18">rm</name> <operator pos:start="353:20" pos:end="353:20">=</operator> <operator pos:start="353:22" pos:end="353:22">(</operator><name pos:start="353:23" pos:end="353:27">modrm</name> <operator pos:start="353:29" pos:end="353:29">&amp;</operator> <literal type="number" pos:start="353:31" pos:end="353:31">7</literal><operator pos:start="353:32" pos:end="353:32">)</operator> <operator pos:start="353:34" pos:end="353:34">|</operator> <call pos:start="353:36" pos:end="353:43"><name pos:start="353:36" pos:end="353:40">REX_B</name><argument_list pos:start="353:41" pos:end="353:43">(<argument pos:start="353:42" pos:end="353:42"><expr pos:start="353:42" pos:end="353:42"><name pos:start="353:42" pos:end="353:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="355:17" pos:end="357:73"><expr pos:start="355:17" pos:end="357:72"><call pos:start="355:17" pos:end="357:72"><name pos:start="355:17" pos:end="355:27">gen_op_movl</name><argument_list pos:start="355:28" pos:end="357:72">(<argument pos:start="355:29" pos:end="355:72"><expr pos:start="355:29" pos:end="355:72"><call pos:start="355:29" pos:end="355:72"><name pos:start="355:29" pos:end="355:36">offsetof</name><argument_list pos:start="355:37" pos:end="355:72">(<argument pos:start="355:38" pos:end="355:48"><expr pos:start="355:38" pos:end="355:48"><name pos:start="355:38" pos:end="355:48">CPUX86State</name></expr></argument>,<argument pos:start="355:50" pos:end="355:71"><expr pos:start="355:50" pos:end="355:71"><name pos:start="355:50" pos:end="355:62"><name pos:start="355:50" pos:end="355:57">xmm_regs</name><index pos:start="355:58" pos:end="355:62">[<expr pos:start="355:59" pos:end="355:61"><name pos:start="355:59" pos:end="355:61">reg</name></expr>]</index></name><operator pos:start="355:63" pos:end="355:63">.</operator><call pos:start="355:64" pos:end="355:71"><name pos:start="355:64" pos:end="355:68">XMM_L</name><argument_list pos:start="355:69" pos:end="355:71">(<argument pos:start="355:70" pos:end="355:70"><expr pos:start="355:70" pos:end="355:70"><literal type="number" pos:start="355:70" pos:end="355:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="357:29" pos:end="357:71"><expr pos:start="357:29" pos:end="357:71"><call pos:start="357:29" pos:end="357:71"><name pos:start="357:29" pos:end="357:36">offsetof</name><argument_list pos:start="357:37" pos:end="357:71">(<argument pos:start="357:38" pos:end="357:48"><expr pos:start="357:38" pos:end="357:48"><name pos:start="357:38" pos:end="357:48">CPUX86State</name></expr></argument>,<argument pos:start="357:50" pos:end="357:70"><expr pos:start="357:50" pos:end="357:70"><name pos:start="357:50" pos:end="357:61"><name pos:start="357:50" pos:end="357:57">xmm_regs</name><index pos:start="357:58" pos:end="357:61">[<expr pos:start="357:59" pos:end="357:60"><name pos:start="357:59" pos:end="357:60">rm</name></expr>]</index></name><operator pos:start="357:62" pos:end="357:62">.</operator><call pos:start="357:63" pos:end="357:70"><name pos:start="357:63" pos:end="357:67">XMM_L</name><argument_list pos:start="357:68" pos:end="357:70">(<argument pos:start="357:69" pos:end="357:69"><expr pos:start="357:69" pos:end="357:69"><literal type="number" pos:start="357:69" pos:end="357:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="361:13" pos:end="361:18">break;</break>

        <case pos:start="363:9" pos:end="363:19">case <expr pos:start="363:14" pos:end="363:18"><literal type="number" pos:start="363:14" pos:end="363:18">0x310</literal></expr>:</case> <comment type="block" pos:start="363:21" pos:end="363:39">/* movsd xmm, ea */</comment>

            <if_stmt pos:start="365:13" pos:end="387:13"><if pos:start="365:13" pos:end="379:13">if <condition pos:start="365:16" pos:end="365:25">(<expr pos:start="365:17" pos:end="365:24"><name pos:start="365:17" pos:end="365:19">mod</name> <operator pos:start="365:21" pos:end="365:22">!=</operator> <literal type="number" pos:start="365:24" pos:end="365:24">3</literal></expr>)</condition> <block pos:start="365:27" pos:end="379:13">{<block_content pos:start="367:17" pos:end="377:97">

                <expr_stmt pos:start="367:17" pos:end="367:45"><expr pos:start="367:17" pos:end="367:44"><call pos:start="367:17" pos:end="367:44"><name pos:start="367:17" pos:end="367:29">gen_lea_modrm</name><argument_list pos:start="367:30" pos:end="367:44">(<argument pos:start="367:31" pos:end="367:33"><expr pos:start="367:31" pos:end="367:33"><name pos:start="367:31" pos:end="367:33">env</name></expr></argument>, <argument pos:start="367:36" pos:end="367:36"><expr pos:start="367:36" pos:end="367:36"><name pos:start="367:36" pos:end="367:36">s</name></expr></argument>, <argument pos:start="367:39" pos:end="367:43"><expr pos:start="367:39" pos:end="367:43"><name pos:start="367:39" pos:end="367:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="369:17" pos:end="371:68"><expr pos:start="369:17" pos:end="371:67"><call pos:start="369:17" pos:end="371:67"><name pos:start="369:17" pos:end="369:30">gen_ldq_env_A0</name><argument_list pos:start="369:31" pos:end="371:67">(<argument pos:start="369:32" pos:end="369:32"><expr pos:start="369:32" pos:end="369:32"><name pos:start="369:32" pos:end="369:32">s</name></expr></argument>, <argument pos:start="369:35" pos:end="371:66"><expr pos:start="369:35" pos:end="371:66"><call pos:start="369:35" pos:end="371:66"><name pos:start="369:35" pos:end="369:42">offsetof</name><argument_list pos:start="369:43" pos:end="371:66">(<argument pos:start="369:44" pos:end="369:54"><expr pos:start="369:44" pos:end="369:54"><name pos:start="369:44" pos:end="369:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="371:44" pos:end="371:65"><expr pos:start="371:44" pos:end="371:65"><name pos:start="371:44" pos:end="371:56"><name pos:start="371:44" pos:end="371:51">xmm_regs</name><index pos:start="371:52" pos:end="371:56">[<expr pos:start="371:53" pos:end="371:55"><name pos:start="371:53" pos:end="371:55">reg</name></expr>]</index></name><operator pos:start="371:57" pos:end="371:57">.</operator><call pos:start="371:58" pos:end="371:65"><name pos:start="371:58" pos:end="371:62">XMM_Q</name><argument_list pos:start="371:63" pos:end="371:65">(<argument pos:start="371:64" pos:end="371:64"><expr pos:start="371:64" pos:end="371:64"><literal type="number" pos:start="371:64" pos:end="371:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="373:17" pos:end="373:45"><expr pos:start="373:17" pos:end="373:44"><call pos:start="373:17" pos:end="373:44"><name pos:start="373:17" pos:end="373:31">tcg_gen_movi_tl</name><argument_list pos:start="373:32" pos:end="373:44">(<argument pos:start="373:33" pos:end="373:40"><expr pos:start="373:33" pos:end="373:40"><name pos:start="373:33" pos:end="373:40"><name pos:start="373:33" pos:end="373:37">cpu_T</name><index pos:start="373:38" pos:end="373:40">[<expr pos:start="373:39" pos:end="373:39"><literal type="number" pos:start="373:39" pos:end="373:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="373:43" pos:end="373:43"><expr pos:start="373:43" pos:end="373:43"><literal type="number" pos:start="373:43" pos:end="373:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="375:17" pos:end="375:97"><expr pos:start="375:17" pos:end="375:96"><call pos:start="375:17" pos:end="375:96"><name pos:start="375:17" pos:end="375:31">tcg_gen_st32_tl</name><argument_list pos:start="375:32" pos:end="375:96">(<argument pos:start="375:33" pos:end="375:40"><expr pos:start="375:33" pos:end="375:40"><name pos:start="375:33" pos:end="375:40"><name pos:start="375:33" pos:end="375:37">cpu_T</name><index pos:start="375:38" pos:end="375:40">[<expr pos:start="375:39" pos:end="375:39"><literal type="number" pos:start="375:39" pos:end="375:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="375:43" pos:end="375:49"><expr pos:start="375:43" pos:end="375:49"><name pos:start="375:43" pos:end="375:49">cpu_env</name></expr></argument>, <argument pos:start="375:52" pos:end="375:95"><expr pos:start="375:52" pos:end="375:95"><call pos:start="375:52" pos:end="375:95"><name pos:start="375:52" pos:end="375:59">offsetof</name><argument_list pos:start="375:60" pos:end="375:95">(<argument pos:start="375:61" pos:end="375:71"><expr pos:start="375:61" pos:end="375:71"><name pos:start="375:61" pos:end="375:71">CPUX86State</name></expr></argument>,<argument pos:start="375:73" pos:end="375:94"><expr pos:start="375:73" pos:end="375:94"><name pos:start="375:73" pos:end="375:85"><name pos:start="375:73" pos:end="375:80">xmm_regs</name><index pos:start="375:81" pos:end="375:85">[<expr pos:start="375:82" pos:end="375:84"><name pos:start="375:82" pos:end="375:84">reg</name></expr>]</index></name><operator pos:start="375:86" pos:end="375:86">.</operator><call pos:start="375:87" pos:end="375:94"><name pos:start="375:87" pos:end="375:91">XMM_L</name><argument_list pos:start="375:92" pos:end="375:94">(<argument pos:start="375:93" pos:end="375:93"><expr pos:start="375:93" pos:end="375:93"><literal type="number" pos:start="375:93" pos:end="375:93">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="377:17" pos:end="377:97"><expr pos:start="377:17" pos:end="377:96"><call pos:start="377:17" pos:end="377:96"><name pos:start="377:17" pos:end="377:31">tcg_gen_st32_tl</name><argument_list pos:start="377:32" pos:end="377:96">(<argument pos:start="377:33" pos:end="377:40"><expr pos:start="377:33" pos:end="377:40"><name pos:start="377:33" pos:end="377:40"><name pos:start="377:33" pos:end="377:37">cpu_T</name><index pos:start="377:38" pos:end="377:40">[<expr pos:start="377:39" pos:end="377:39"><literal type="number" pos:start="377:39" pos:end="377:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="377:43" pos:end="377:49"><expr pos:start="377:43" pos:end="377:49"><name pos:start="377:43" pos:end="377:49">cpu_env</name></expr></argument>, <argument pos:start="377:52" pos:end="377:95"><expr pos:start="377:52" pos:end="377:95"><call pos:start="377:52" pos:end="377:95"><name pos:start="377:52" pos:end="377:59">offsetof</name><argument_list pos:start="377:60" pos:end="377:95">(<argument pos:start="377:61" pos:end="377:71"><expr pos:start="377:61" pos:end="377:71"><name pos:start="377:61" pos:end="377:71">CPUX86State</name></expr></argument>,<argument pos:start="377:73" pos:end="377:94"><expr pos:start="377:73" pos:end="377:94"><name pos:start="377:73" pos:end="377:85"><name pos:start="377:73" pos:end="377:80">xmm_regs</name><index pos:start="377:81" pos:end="377:85">[<expr pos:start="377:82" pos:end="377:84"><name pos:start="377:82" pos:end="377:84">reg</name></expr>]</index></name><operator pos:start="377:86" pos:end="377:86">.</operator><call pos:start="377:87" pos:end="377:94"><name pos:start="377:87" pos:end="377:91">XMM_L</name><argument_list pos:start="377:92" pos:end="377:94">(<argument pos:start="377:93" pos:end="377:93"><expr pos:start="377:93" pos:end="377:93"><literal type="number" pos:start="377:93" pos:end="377:93">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="379:15" pos:end="387:13">else <block pos:start="379:20" pos:end="387:13">{<block_content pos:start="381:17" pos:end="385:73">

                <expr_stmt pos:start="381:17" pos:end="381:44"><expr pos:start="381:17" pos:end="381:43"><name pos:start="381:17" pos:end="381:18">rm</name> <operator pos:start="381:20" pos:end="381:20">=</operator> <operator pos:start="381:22" pos:end="381:22">(</operator><name pos:start="381:23" pos:end="381:27">modrm</name> <operator pos:start="381:29" pos:end="381:29">&amp;</operator> <literal type="number" pos:start="381:31" pos:end="381:31">7</literal><operator pos:start="381:32" pos:end="381:32">)</operator> <operator pos:start="381:34" pos:end="381:34">|</operator> <call pos:start="381:36" pos:end="381:43"><name pos:start="381:36" pos:end="381:40">REX_B</name><argument_list pos:start="381:41" pos:end="381:43">(<argument pos:start="381:42" pos:end="381:42"><expr pos:start="381:42" pos:end="381:42"><name pos:start="381:42" pos:end="381:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="383:17" pos:end="385:73"><expr pos:start="383:17" pos:end="385:72"><call pos:start="383:17" pos:end="385:72"><name pos:start="383:17" pos:end="383:27">gen_op_movq</name><argument_list pos:start="383:28" pos:end="385:72">(<argument pos:start="383:29" pos:end="383:72"><expr pos:start="383:29" pos:end="383:72"><call pos:start="383:29" pos:end="383:72"><name pos:start="383:29" pos:end="383:36">offsetof</name><argument_list pos:start="383:37" pos:end="383:72">(<argument pos:start="383:38" pos:end="383:48"><expr pos:start="383:38" pos:end="383:48"><name pos:start="383:38" pos:end="383:48">CPUX86State</name></expr></argument>,<argument pos:start="383:50" pos:end="383:71"><expr pos:start="383:50" pos:end="383:71"><name pos:start="383:50" pos:end="383:62"><name pos:start="383:50" pos:end="383:57">xmm_regs</name><index pos:start="383:58" pos:end="383:62">[<expr pos:start="383:59" pos:end="383:61"><name pos:start="383:59" pos:end="383:61">reg</name></expr>]</index></name><operator pos:start="383:63" pos:end="383:63">.</operator><call pos:start="383:64" pos:end="383:71"><name pos:start="383:64" pos:end="383:68">XMM_Q</name><argument_list pos:start="383:69" pos:end="383:71">(<argument pos:start="383:70" pos:end="383:70"><expr pos:start="383:70" pos:end="383:70"><literal type="number" pos:start="383:70" pos:end="383:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="385:29" pos:end="385:71"><expr pos:start="385:29" pos:end="385:71"><call pos:start="385:29" pos:end="385:71"><name pos:start="385:29" pos:end="385:36">offsetof</name><argument_list pos:start="385:37" pos:end="385:71">(<argument pos:start="385:38" pos:end="385:48"><expr pos:start="385:38" pos:end="385:48"><name pos:start="385:38" pos:end="385:48">CPUX86State</name></expr></argument>,<argument pos:start="385:50" pos:end="385:70"><expr pos:start="385:50" pos:end="385:70"><name pos:start="385:50" pos:end="385:61"><name pos:start="385:50" pos:end="385:57">xmm_regs</name><index pos:start="385:58" pos:end="385:61">[<expr pos:start="385:59" pos:end="385:60"><name pos:start="385:59" pos:end="385:60">rm</name></expr>]</index></name><operator pos:start="385:62" pos:end="385:62">.</operator><call pos:start="385:63" pos:end="385:70"><name pos:start="385:63" pos:end="385:67">XMM_Q</name><argument_list pos:start="385:68" pos:end="385:70">(<argument pos:start="385:69" pos:end="385:69"><expr pos:start="385:69" pos:end="385:69"><literal type="number" pos:start="385:69" pos:end="385:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="389:13" pos:end="389:18">break;</break>

        <case pos:start="391:9" pos:end="391:19">case <expr pos:start="391:14" pos:end="391:18"><literal type="number" pos:start="391:14" pos:end="391:18">0x012</literal></expr>:</case> <comment type="block" pos:start="391:21" pos:end="391:32">/* movlps */</comment>

        <case pos:start="393:9" pos:end="393:19">case <expr pos:start="393:14" pos:end="393:18"><literal type="number" pos:start="393:14" pos:end="393:18">0x112</literal></expr>:</case> <comment type="block" pos:start="393:21" pos:end="393:32">/* movlpd */</comment>

            <if_stmt pos:start="395:13" pos:end="413:13"><if pos:start="395:13" pos:end="403:13">if <condition pos:start="395:16" pos:end="395:25">(<expr pos:start="395:17" pos:end="395:24"><name pos:start="395:17" pos:end="395:19">mod</name> <operator pos:start="395:21" pos:end="395:22">!=</operator> <literal type="number" pos:start="395:24" pos:end="395:24">3</literal></expr>)</condition> <block pos:start="395:27" pos:end="403:13">{<block_content pos:start="397:17" pos:end="401:68">

                <expr_stmt pos:start="397:17" pos:end="397:45"><expr pos:start="397:17" pos:end="397:44"><call pos:start="397:17" pos:end="397:44"><name pos:start="397:17" pos:end="397:29">gen_lea_modrm</name><argument_list pos:start="397:30" pos:end="397:44">(<argument pos:start="397:31" pos:end="397:33"><expr pos:start="397:31" pos:end="397:33"><name pos:start="397:31" pos:end="397:33">env</name></expr></argument>, <argument pos:start="397:36" pos:end="397:36"><expr pos:start="397:36" pos:end="397:36"><name pos:start="397:36" pos:end="397:36">s</name></expr></argument>, <argument pos:start="397:39" pos:end="397:43"><expr pos:start="397:39" pos:end="397:43"><name pos:start="397:39" pos:end="397:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="399:17" pos:end="401:68"><expr pos:start="399:17" pos:end="401:67"><call pos:start="399:17" pos:end="401:67"><name pos:start="399:17" pos:end="399:30">gen_ldq_env_A0</name><argument_list pos:start="399:31" pos:end="401:67">(<argument pos:start="399:32" pos:end="399:32"><expr pos:start="399:32" pos:end="399:32"><name pos:start="399:32" pos:end="399:32">s</name></expr></argument>, <argument pos:start="399:35" pos:end="401:66"><expr pos:start="399:35" pos:end="401:66"><call pos:start="399:35" pos:end="401:66"><name pos:start="399:35" pos:end="399:42">offsetof</name><argument_list pos:start="399:43" pos:end="401:66">(<argument pos:start="399:44" pos:end="399:54"><expr pos:start="399:44" pos:end="399:54"><name pos:start="399:44" pos:end="399:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="401:44" pos:end="401:65"><expr pos:start="401:44" pos:end="401:65"><name pos:start="401:44" pos:end="401:56"><name pos:start="401:44" pos:end="401:51">xmm_regs</name><index pos:start="401:52" pos:end="401:56">[<expr pos:start="401:53" pos:end="401:55"><name pos:start="401:53" pos:end="401:55">reg</name></expr>]</index></name><operator pos:start="401:57" pos:end="401:57">.</operator><call pos:start="401:58" pos:end="401:65"><name pos:start="401:58" pos:end="401:62">XMM_Q</name><argument_list pos:start="401:63" pos:end="401:65">(<argument pos:start="401:64" pos:end="401:64"><expr pos:start="401:64" pos:end="401:64"><literal type="number" pos:start="401:64" pos:end="401:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="403:15" pos:end="413:13">else <block pos:start="403:20" pos:end="413:13">{<block_content pos:start="407:17" pos:end="411:73">

                <comment type="block" pos:start="405:17" pos:end="405:29">/* movhlps */</comment>

                <expr_stmt pos:start="407:17" pos:end="407:44"><expr pos:start="407:17" pos:end="407:43"><name pos:start="407:17" pos:end="407:18">rm</name> <operator pos:start="407:20" pos:end="407:20">=</operator> <operator pos:start="407:22" pos:end="407:22">(</operator><name pos:start="407:23" pos:end="407:27">modrm</name> <operator pos:start="407:29" pos:end="407:29">&amp;</operator> <literal type="number" pos:start="407:31" pos:end="407:31">7</literal><operator pos:start="407:32" pos:end="407:32">)</operator> <operator pos:start="407:34" pos:end="407:34">|</operator> <call pos:start="407:36" pos:end="407:43"><name pos:start="407:36" pos:end="407:40">REX_B</name><argument_list pos:start="407:41" pos:end="407:43">(<argument pos:start="407:42" pos:end="407:42"><expr pos:start="407:42" pos:end="407:42"><name pos:start="407:42" pos:end="407:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="409:17" pos:end="411:73"><expr pos:start="409:17" pos:end="411:72"><call pos:start="409:17" pos:end="411:72"><name pos:start="409:17" pos:end="409:27">gen_op_movq</name><argument_list pos:start="409:28" pos:end="411:72">(<argument pos:start="409:29" pos:end="409:72"><expr pos:start="409:29" pos:end="409:72"><call pos:start="409:29" pos:end="409:72"><name pos:start="409:29" pos:end="409:36">offsetof</name><argument_list pos:start="409:37" pos:end="409:72">(<argument pos:start="409:38" pos:end="409:48"><expr pos:start="409:38" pos:end="409:48"><name pos:start="409:38" pos:end="409:48">CPUX86State</name></expr></argument>,<argument pos:start="409:50" pos:end="409:71"><expr pos:start="409:50" pos:end="409:71"><name pos:start="409:50" pos:end="409:62"><name pos:start="409:50" pos:end="409:57">xmm_regs</name><index pos:start="409:58" pos:end="409:62">[<expr pos:start="409:59" pos:end="409:61"><name pos:start="409:59" pos:end="409:61">reg</name></expr>]</index></name><operator pos:start="409:63" pos:end="409:63">.</operator><call pos:start="409:64" pos:end="409:71"><name pos:start="409:64" pos:end="409:68">XMM_Q</name><argument_list pos:start="409:69" pos:end="409:71">(<argument pos:start="409:70" pos:end="409:70"><expr pos:start="409:70" pos:end="409:70"><literal type="number" pos:start="409:70" pos:end="409:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="411:29" pos:end="411:71"><expr pos:start="411:29" pos:end="411:71"><call pos:start="411:29" pos:end="411:71"><name pos:start="411:29" pos:end="411:36">offsetof</name><argument_list pos:start="411:37" pos:end="411:71">(<argument pos:start="411:38" pos:end="411:48"><expr pos:start="411:38" pos:end="411:48"><name pos:start="411:38" pos:end="411:48">CPUX86State</name></expr></argument>,<argument pos:start="411:50" pos:end="411:70"><expr pos:start="411:50" pos:end="411:70"><name pos:start="411:50" pos:end="411:61"><name pos:start="411:50" pos:end="411:57">xmm_regs</name><index pos:start="411:58" pos:end="411:61">[<expr pos:start="411:59" pos:end="411:60"><name pos:start="411:59" pos:end="411:60">rm</name></expr>]</index></name><operator pos:start="411:62" pos:end="411:62">.</operator><call pos:start="411:63" pos:end="411:70"><name pos:start="411:63" pos:end="411:67">XMM_Q</name><argument_list pos:start="411:68" pos:end="411:70">(<argument pos:start="411:69" pos:end="411:69"><expr pos:start="411:69" pos:end="411:69"><literal type="number" pos:start="411:69" pos:end="411:69">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="415:13" pos:end="415:18">break;</break>

        <case pos:start="417:9" pos:end="417:19">case <expr pos:start="417:14" pos:end="417:18"><literal type="number" pos:start="417:14" pos:end="417:18">0x212</literal></expr>:</case> <comment type="block" pos:start="417:21" pos:end="417:34">/* movsldup */</comment>

            <if_stmt pos:start="419:13" pos:end="437:13"><if pos:start="419:13" pos:end="425:13">if <condition pos:start="419:16" pos:end="419:25">(<expr pos:start="419:17" pos:end="419:24"><name pos:start="419:17" pos:end="419:19">mod</name> <operator pos:start="419:21" pos:end="419:22">!=</operator> <literal type="number" pos:start="419:24" pos:end="419:24">3</literal></expr>)</condition> <block pos:start="419:27" pos:end="425:13">{<block_content pos:start="421:17" pos:end="423:72">

                <expr_stmt pos:start="421:17" pos:end="421:45"><expr pos:start="421:17" pos:end="421:44"><call pos:start="421:17" pos:end="421:44"><name pos:start="421:17" pos:end="421:29">gen_lea_modrm</name><argument_list pos:start="421:30" pos:end="421:44">(<argument pos:start="421:31" pos:end="421:33"><expr pos:start="421:31" pos:end="421:33"><name pos:start="421:31" pos:end="421:33">env</name></expr></argument>, <argument pos:start="421:36" pos:end="421:36"><expr pos:start="421:36" pos:end="421:36"><name pos:start="421:36" pos:end="421:36">s</name></expr></argument>, <argument pos:start="421:39" pos:end="421:43"><expr pos:start="421:39" pos:end="421:43"><name pos:start="421:39" pos:end="421:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="423:17" pos:end="423:72"><expr pos:start="423:17" pos:end="423:71"><call pos:start="423:17" pos:end="423:71"><name pos:start="423:17" pos:end="423:30">gen_ldo_env_A0</name><argument_list pos:start="423:31" pos:end="423:71">(<argument pos:start="423:32" pos:end="423:32"><expr pos:start="423:32" pos:end="423:32"><name pos:start="423:32" pos:end="423:32">s</name></expr></argument>, <argument pos:start="423:35" pos:end="423:70"><expr pos:start="423:35" pos:end="423:70"><call pos:start="423:35" pos:end="423:70"><name pos:start="423:35" pos:end="423:42">offsetof</name><argument_list pos:start="423:43" pos:end="423:70">(<argument pos:start="423:44" pos:end="423:54"><expr pos:start="423:44" pos:end="423:54"><name pos:start="423:44" pos:end="423:54">CPUX86State</name></expr></argument>, <argument pos:start="423:57" pos:end="423:69"><expr pos:start="423:57" pos:end="423:69"><name pos:start="423:57" pos:end="423:69"><name pos:start="423:57" pos:end="423:64">xmm_regs</name><index pos:start="423:65" pos:end="423:69">[<expr pos:start="423:66" pos:end="423:68"><name pos:start="423:66" pos:end="423:68">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="425:15" pos:end="437:13">else <block pos:start="425:20" pos:end="437:13">{<block_content pos:start="427:17" pos:end="435:73">

                <expr_stmt pos:start="427:17" pos:end="427:44"><expr pos:start="427:17" pos:end="427:43"><name pos:start="427:17" pos:end="427:18">rm</name> <operator pos:start="427:20" pos:end="427:20">=</operator> <operator pos:start="427:22" pos:end="427:22">(</operator><name pos:start="427:23" pos:end="427:27">modrm</name> <operator pos:start="427:29" pos:end="427:29">&amp;</operator> <literal type="number" pos:start="427:31" pos:end="427:31">7</literal><operator pos:start="427:32" pos:end="427:32">)</operator> <operator pos:start="427:34" pos:end="427:34">|</operator> <call pos:start="427:36" pos:end="427:43"><name pos:start="427:36" pos:end="427:40">REX_B</name><argument_list pos:start="427:41" pos:end="427:43">(<argument pos:start="427:42" pos:end="427:42"><expr pos:start="427:42" pos:end="427:42"><name pos:start="427:42" pos:end="427:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="429:17" pos:end="431:73"><expr pos:start="429:17" pos:end="431:72"><call pos:start="429:17" pos:end="431:72"><name pos:start="429:17" pos:end="429:27">gen_op_movl</name><argument_list pos:start="429:28" pos:end="431:72">(<argument pos:start="429:29" pos:end="429:72"><expr pos:start="429:29" pos:end="429:72"><call pos:start="429:29" pos:end="429:72"><name pos:start="429:29" pos:end="429:36">offsetof</name><argument_list pos:start="429:37" pos:end="429:72">(<argument pos:start="429:38" pos:end="429:48"><expr pos:start="429:38" pos:end="429:48"><name pos:start="429:38" pos:end="429:48">CPUX86State</name></expr></argument>,<argument pos:start="429:50" pos:end="429:71"><expr pos:start="429:50" pos:end="429:71"><name pos:start="429:50" pos:end="429:62"><name pos:start="429:50" pos:end="429:57">xmm_regs</name><index pos:start="429:58" pos:end="429:62">[<expr pos:start="429:59" pos:end="429:61"><name pos:start="429:59" pos:end="429:61">reg</name></expr>]</index></name><operator pos:start="429:63" pos:end="429:63">.</operator><call pos:start="429:64" pos:end="429:71"><name pos:start="429:64" pos:end="429:68">XMM_L</name><argument_list pos:start="429:69" pos:end="429:71">(<argument pos:start="429:70" pos:end="429:70"><expr pos:start="429:70" pos:end="429:70"><literal type="number" pos:start="429:70" pos:end="429:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="431:29" pos:end="431:71"><expr pos:start="431:29" pos:end="431:71"><call pos:start="431:29" pos:end="431:71"><name pos:start="431:29" pos:end="431:36">offsetof</name><argument_list pos:start="431:37" pos:end="431:71">(<argument pos:start="431:38" pos:end="431:48"><expr pos:start="431:38" pos:end="431:48"><name pos:start="431:38" pos:end="431:48">CPUX86State</name></expr></argument>,<argument pos:start="431:50" pos:end="431:70"><expr pos:start="431:50" pos:end="431:70"><name pos:start="431:50" pos:end="431:61"><name pos:start="431:50" pos:end="431:57">xmm_regs</name><index pos:start="431:58" pos:end="431:61">[<expr pos:start="431:59" pos:end="431:60"><name pos:start="431:59" pos:end="431:60">rm</name></expr>]</index></name><operator pos:start="431:62" pos:end="431:62">.</operator><call pos:start="431:63" pos:end="431:70"><name pos:start="431:63" pos:end="431:67">XMM_L</name><argument_list pos:start="431:68" pos:end="431:70">(<argument pos:start="431:69" pos:end="431:69"><expr pos:start="431:69" pos:end="431:69"><literal type="number" pos:start="431:69" pos:end="431:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="433:17" pos:end="435:73"><expr pos:start="433:17" pos:end="435:72"><call pos:start="433:17" pos:end="435:72"><name pos:start="433:17" pos:end="433:27">gen_op_movl</name><argument_list pos:start="433:28" pos:end="435:72">(<argument pos:start="433:29" pos:end="433:72"><expr pos:start="433:29" pos:end="433:72"><call pos:start="433:29" pos:end="433:72"><name pos:start="433:29" pos:end="433:36">offsetof</name><argument_list pos:start="433:37" pos:end="433:72">(<argument pos:start="433:38" pos:end="433:48"><expr pos:start="433:38" pos:end="433:48"><name pos:start="433:38" pos:end="433:48">CPUX86State</name></expr></argument>,<argument pos:start="433:50" pos:end="433:71"><expr pos:start="433:50" pos:end="433:71"><name pos:start="433:50" pos:end="433:62"><name pos:start="433:50" pos:end="433:57">xmm_regs</name><index pos:start="433:58" pos:end="433:62">[<expr pos:start="433:59" pos:end="433:61"><name pos:start="433:59" pos:end="433:61">reg</name></expr>]</index></name><operator pos:start="433:63" pos:end="433:63">.</operator><call pos:start="433:64" pos:end="433:71"><name pos:start="433:64" pos:end="433:68">XMM_L</name><argument_list pos:start="433:69" pos:end="433:71">(<argument pos:start="433:70" pos:end="433:70"><expr pos:start="433:70" pos:end="433:70"><literal type="number" pos:start="433:70" pos:end="433:70">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="435:29" pos:end="435:71"><expr pos:start="435:29" pos:end="435:71"><call pos:start="435:29" pos:end="435:71"><name pos:start="435:29" pos:end="435:36">offsetof</name><argument_list pos:start="435:37" pos:end="435:71">(<argument pos:start="435:38" pos:end="435:48"><expr pos:start="435:38" pos:end="435:48"><name pos:start="435:38" pos:end="435:48">CPUX86State</name></expr></argument>,<argument pos:start="435:50" pos:end="435:70"><expr pos:start="435:50" pos:end="435:70"><name pos:start="435:50" pos:end="435:61"><name pos:start="435:50" pos:end="435:57">xmm_regs</name><index pos:start="435:58" pos:end="435:61">[<expr pos:start="435:59" pos:end="435:60"><name pos:start="435:59" pos:end="435:60">rm</name></expr>]</index></name><operator pos:start="435:62" pos:end="435:62">.</operator><call pos:start="435:63" pos:end="435:70"><name pos:start="435:63" pos:end="435:67">XMM_L</name><argument_list pos:start="435:68" pos:end="435:70">(<argument pos:start="435:69" pos:end="435:69"><expr pos:start="435:69" pos:end="435:69"><literal type="number" pos:start="435:69" pos:end="435:69">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="439:13" pos:end="441:70"><expr pos:start="439:13" pos:end="441:69"><call pos:start="439:13" pos:end="441:69"><name pos:start="439:13" pos:end="439:23">gen_op_movl</name><argument_list pos:start="439:24" pos:end="441:69">(<argument pos:start="439:25" pos:end="439:68"><expr pos:start="439:25" pos:end="439:68"><call pos:start="439:25" pos:end="439:68"><name pos:start="439:25" pos:end="439:32">offsetof</name><argument_list pos:start="439:33" pos:end="439:68">(<argument pos:start="439:34" pos:end="439:44"><expr pos:start="439:34" pos:end="439:44"><name pos:start="439:34" pos:end="439:44">CPUX86State</name></expr></argument>,<argument pos:start="439:46" pos:end="439:67"><expr pos:start="439:46" pos:end="439:67"><name pos:start="439:46" pos:end="439:58"><name pos:start="439:46" pos:end="439:53">xmm_regs</name><index pos:start="439:54" pos:end="439:58">[<expr pos:start="439:55" pos:end="439:57"><name pos:start="439:55" pos:end="439:57">reg</name></expr>]</index></name><operator pos:start="439:59" pos:end="439:59">.</operator><call pos:start="439:60" pos:end="439:67"><name pos:start="439:60" pos:end="439:64">XMM_L</name><argument_list pos:start="439:65" pos:end="439:67">(<argument pos:start="439:66" pos:end="439:66"><expr pos:start="439:66" pos:end="439:66"><literal type="number" pos:start="439:66" pos:end="439:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="441:25" pos:end="441:68"><expr pos:start="441:25" pos:end="441:68"><call pos:start="441:25" pos:end="441:68"><name pos:start="441:25" pos:end="441:32">offsetof</name><argument_list pos:start="441:33" pos:end="441:68">(<argument pos:start="441:34" pos:end="441:44"><expr pos:start="441:34" pos:end="441:44"><name pos:start="441:34" pos:end="441:44">CPUX86State</name></expr></argument>,<argument pos:start="441:46" pos:end="441:67"><expr pos:start="441:46" pos:end="441:67"><name pos:start="441:46" pos:end="441:58"><name pos:start="441:46" pos:end="441:53">xmm_regs</name><index pos:start="441:54" pos:end="441:58">[<expr pos:start="441:55" pos:end="441:57"><name pos:start="441:55" pos:end="441:57">reg</name></expr>]</index></name><operator pos:start="441:59" pos:end="441:59">.</operator><call pos:start="441:60" pos:end="441:67"><name pos:start="441:60" pos:end="441:64">XMM_L</name><argument_list pos:start="441:65" pos:end="441:67">(<argument pos:start="441:66" pos:end="441:66"><expr pos:start="441:66" pos:end="441:66"><literal type="number" pos:start="441:66" pos:end="441:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="443:13" pos:end="445:70"><expr pos:start="443:13" pos:end="445:69"><call pos:start="443:13" pos:end="445:69"><name pos:start="443:13" pos:end="443:23">gen_op_movl</name><argument_list pos:start="443:24" pos:end="445:69">(<argument pos:start="443:25" pos:end="443:68"><expr pos:start="443:25" pos:end="443:68"><call pos:start="443:25" pos:end="443:68"><name pos:start="443:25" pos:end="443:32">offsetof</name><argument_list pos:start="443:33" pos:end="443:68">(<argument pos:start="443:34" pos:end="443:44"><expr pos:start="443:34" pos:end="443:44"><name pos:start="443:34" pos:end="443:44">CPUX86State</name></expr></argument>,<argument pos:start="443:46" pos:end="443:67"><expr pos:start="443:46" pos:end="443:67"><name pos:start="443:46" pos:end="443:58"><name pos:start="443:46" pos:end="443:53">xmm_regs</name><index pos:start="443:54" pos:end="443:58">[<expr pos:start="443:55" pos:end="443:57"><name pos:start="443:55" pos:end="443:57">reg</name></expr>]</index></name><operator pos:start="443:59" pos:end="443:59">.</operator><call pos:start="443:60" pos:end="443:67"><name pos:start="443:60" pos:end="443:64">XMM_L</name><argument_list pos:start="443:65" pos:end="443:67">(<argument pos:start="443:66" pos:end="443:66"><expr pos:start="443:66" pos:end="443:66"><literal type="number" pos:start="443:66" pos:end="443:66">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="445:25" pos:end="445:68"><expr pos:start="445:25" pos:end="445:68"><call pos:start="445:25" pos:end="445:68"><name pos:start="445:25" pos:end="445:32">offsetof</name><argument_list pos:start="445:33" pos:end="445:68">(<argument pos:start="445:34" pos:end="445:44"><expr pos:start="445:34" pos:end="445:44"><name pos:start="445:34" pos:end="445:44">CPUX86State</name></expr></argument>,<argument pos:start="445:46" pos:end="445:67"><expr pos:start="445:46" pos:end="445:67"><name pos:start="445:46" pos:end="445:58"><name pos:start="445:46" pos:end="445:53">xmm_regs</name><index pos:start="445:54" pos:end="445:58">[<expr pos:start="445:55" pos:end="445:57"><name pos:start="445:55" pos:end="445:57">reg</name></expr>]</index></name><operator pos:start="445:59" pos:end="445:59">.</operator><call pos:start="445:60" pos:end="445:67"><name pos:start="445:60" pos:end="445:64">XMM_L</name><argument_list pos:start="445:65" pos:end="445:67">(<argument pos:start="445:66" pos:end="445:66"><expr pos:start="445:66" pos:end="445:66"><literal type="number" pos:start="445:66" pos:end="445:66">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="447:13" pos:end="447:18">break;</break>

        <case pos:start="449:9" pos:end="449:19">case <expr pos:start="449:14" pos:end="449:18"><literal type="number" pos:start="449:14" pos:end="449:18">0x312</literal></expr>:</case> <comment type="block" pos:start="449:21" pos:end="449:33">/* movddup */</comment>

            <if_stmt pos:start="451:13" pos:end="467:13"><if pos:start="451:13" pos:end="459:13">if <condition pos:start="451:16" pos:end="451:25">(<expr pos:start="451:17" pos:end="451:24"><name pos:start="451:17" pos:end="451:19">mod</name> <operator pos:start="451:21" pos:end="451:22">!=</operator> <literal type="number" pos:start="451:24" pos:end="451:24">3</literal></expr>)</condition> <block pos:start="451:27" pos:end="459:13">{<block_content pos:start="453:17" pos:end="457:68">

                <expr_stmt pos:start="453:17" pos:end="453:45"><expr pos:start="453:17" pos:end="453:44"><call pos:start="453:17" pos:end="453:44"><name pos:start="453:17" pos:end="453:29">gen_lea_modrm</name><argument_list pos:start="453:30" pos:end="453:44">(<argument pos:start="453:31" pos:end="453:33"><expr pos:start="453:31" pos:end="453:33"><name pos:start="453:31" pos:end="453:33">env</name></expr></argument>, <argument pos:start="453:36" pos:end="453:36"><expr pos:start="453:36" pos:end="453:36"><name pos:start="453:36" pos:end="453:36">s</name></expr></argument>, <argument pos:start="453:39" pos:end="453:43"><expr pos:start="453:39" pos:end="453:43"><name pos:start="453:39" pos:end="453:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="455:17" pos:end="457:68"><expr pos:start="455:17" pos:end="457:67"><call pos:start="455:17" pos:end="457:67"><name pos:start="455:17" pos:end="455:30">gen_ldq_env_A0</name><argument_list pos:start="455:31" pos:end="457:67">(<argument pos:start="455:32" pos:end="455:32"><expr pos:start="455:32" pos:end="455:32"><name pos:start="455:32" pos:end="455:32">s</name></expr></argument>, <argument pos:start="455:35" pos:end="457:66"><expr pos:start="455:35" pos:end="457:66"><call pos:start="455:35" pos:end="457:66"><name pos:start="455:35" pos:end="455:42">offsetof</name><argument_list pos:start="455:43" pos:end="457:66">(<argument pos:start="455:44" pos:end="455:54"><expr pos:start="455:44" pos:end="455:54"><name pos:start="455:44" pos:end="455:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="457:44" pos:end="457:65"><expr pos:start="457:44" pos:end="457:65"><name pos:start="457:44" pos:end="457:56"><name pos:start="457:44" pos:end="457:51">xmm_regs</name><index pos:start="457:52" pos:end="457:56">[<expr pos:start="457:53" pos:end="457:55"><name pos:start="457:53" pos:end="457:55">reg</name></expr>]</index></name><operator pos:start="457:57" pos:end="457:57">.</operator><call pos:start="457:58" pos:end="457:65"><name pos:start="457:58" pos:end="457:62">XMM_Q</name><argument_list pos:start="457:63" pos:end="457:65">(<argument pos:start="457:64" pos:end="457:64"><expr pos:start="457:64" pos:end="457:64"><literal type="number" pos:start="457:64" pos:end="457:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="459:15" pos:end="467:13">else <block pos:start="459:20" pos:end="467:13">{<block_content pos:start="461:17" pos:end="465:73">

                <expr_stmt pos:start="461:17" pos:end="461:44"><expr pos:start="461:17" pos:end="461:43"><name pos:start="461:17" pos:end="461:18">rm</name> <operator pos:start="461:20" pos:end="461:20">=</operator> <operator pos:start="461:22" pos:end="461:22">(</operator><name pos:start="461:23" pos:end="461:27">modrm</name> <operator pos:start="461:29" pos:end="461:29">&amp;</operator> <literal type="number" pos:start="461:31" pos:end="461:31">7</literal><operator pos:start="461:32" pos:end="461:32">)</operator> <operator pos:start="461:34" pos:end="461:34">|</operator> <call pos:start="461:36" pos:end="461:43"><name pos:start="461:36" pos:end="461:40">REX_B</name><argument_list pos:start="461:41" pos:end="461:43">(<argument pos:start="461:42" pos:end="461:42"><expr pos:start="461:42" pos:end="461:42"><name pos:start="461:42" pos:end="461:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="463:17" pos:end="465:73"><expr pos:start="463:17" pos:end="465:72"><call pos:start="463:17" pos:end="465:72"><name pos:start="463:17" pos:end="463:27">gen_op_movq</name><argument_list pos:start="463:28" pos:end="465:72">(<argument pos:start="463:29" pos:end="463:72"><expr pos:start="463:29" pos:end="463:72"><call pos:start="463:29" pos:end="463:72"><name pos:start="463:29" pos:end="463:36">offsetof</name><argument_list pos:start="463:37" pos:end="463:72">(<argument pos:start="463:38" pos:end="463:48"><expr pos:start="463:38" pos:end="463:48"><name pos:start="463:38" pos:end="463:48">CPUX86State</name></expr></argument>,<argument pos:start="463:50" pos:end="463:71"><expr pos:start="463:50" pos:end="463:71"><name pos:start="463:50" pos:end="463:62"><name pos:start="463:50" pos:end="463:57">xmm_regs</name><index pos:start="463:58" pos:end="463:62">[<expr pos:start="463:59" pos:end="463:61"><name pos:start="463:59" pos:end="463:61">reg</name></expr>]</index></name><operator pos:start="463:63" pos:end="463:63">.</operator><call pos:start="463:64" pos:end="463:71"><name pos:start="463:64" pos:end="463:68">XMM_Q</name><argument_list pos:start="463:69" pos:end="463:71">(<argument pos:start="463:70" pos:end="463:70"><expr pos:start="463:70" pos:end="463:70"><literal type="number" pos:start="463:70" pos:end="463:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="465:29" pos:end="465:71"><expr pos:start="465:29" pos:end="465:71"><call pos:start="465:29" pos:end="465:71"><name pos:start="465:29" pos:end="465:36">offsetof</name><argument_list pos:start="465:37" pos:end="465:71">(<argument pos:start="465:38" pos:end="465:48"><expr pos:start="465:38" pos:end="465:48"><name pos:start="465:38" pos:end="465:48">CPUX86State</name></expr></argument>,<argument pos:start="465:50" pos:end="465:70"><expr pos:start="465:50" pos:end="465:70"><name pos:start="465:50" pos:end="465:61"><name pos:start="465:50" pos:end="465:57">xmm_regs</name><index pos:start="465:58" pos:end="465:61">[<expr pos:start="465:59" pos:end="465:60"><name pos:start="465:59" pos:end="465:60">rm</name></expr>]</index></name><operator pos:start="465:62" pos:end="465:62">.</operator><call pos:start="465:63" pos:end="465:70"><name pos:start="465:63" pos:end="465:67">XMM_Q</name><argument_list pos:start="465:68" pos:end="465:70">(<argument pos:start="465:69" pos:end="465:69"><expr pos:start="465:69" pos:end="465:69"><literal type="number" pos:start="465:69" pos:end="465:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="469:13" pos:end="471:70"><expr pos:start="469:13" pos:end="471:69"><call pos:start="469:13" pos:end="471:69"><name pos:start="469:13" pos:end="469:23">gen_op_movq</name><argument_list pos:start="469:24" pos:end="471:69">(<argument pos:start="469:25" pos:end="469:68"><expr pos:start="469:25" pos:end="469:68"><call pos:start="469:25" pos:end="469:68"><name pos:start="469:25" pos:end="469:32">offsetof</name><argument_list pos:start="469:33" pos:end="469:68">(<argument pos:start="469:34" pos:end="469:44"><expr pos:start="469:34" pos:end="469:44"><name pos:start="469:34" pos:end="469:44">CPUX86State</name></expr></argument>,<argument pos:start="469:46" pos:end="469:67"><expr pos:start="469:46" pos:end="469:67"><name pos:start="469:46" pos:end="469:58"><name pos:start="469:46" pos:end="469:53">xmm_regs</name><index pos:start="469:54" pos:end="469:58">[<expr pos:start="469:55" pos:end="469:57"><name pos:start="469:55" pos:end="469:57">reg</name></expr>]</index></name><operator pos:start="469:59" pos:end="469:59">.</operator><call pos:start="469:60" pos:end="469:67"><name pos:start="469:60" pos:end="469:64">XMM_Q</name><argument_list pos:start="469:65" pos:end="469:67">(<argument pos:start="469:66" pos:end="469:66"><expr pos:start="469:66" pos:end="469:66"><literal type="number" pos:start="469:66" pos:end="469:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="471:25" pos:end="471:68"><expr pos:start="471:25" pos:end="471:68"><call pos:start="471:25" pos:end="471:68"><name pos:start="471:25" pos:end="471:32">offsetof</name><argument_list pos:start="471:33" pos:end="471:68">(<argument pos:start="471:34" pos:end="471:44"><expr pos:start="471:34" pos:end="471:44"><name pos:start="471:34" pos:end="471:44">CPUX86State</name></expr></argument>,<argument pos:start="471:46" pos:end="471:67"><expr pos:start="471:46" pos:end="471:67"><name pos:start="471:46" pos:end="471:58"><name pos:start="471:46" pos:end="471:53">xmm_regs</name><index pos:start="471:54" pos:end="471:58">[<expr pos:start="471:55" pos:end="471:57"><name pos:start="471:55" pos:end="471:57">reg</name></expr>]</index></name><operator pos:start="471:59" pos:end="471:59">.</operator><call pos:start="471:60" pos:end="471:67"><name pos:start="471:60" pos:end="471:64">XMM_Q</name><argument_list pos:start="471:65" pos:end="471:67">(<argument pos:start="471:66" pos:end="471:66"><expr pos:start="471:66" pos:end="471:66"><literal type="number" pos:start="471:66" pos:end="471:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="473:13" pos:end="473:18">break;</break>

        <case pos:start="475:9" pos:end="475:19">case <expr pos:start="475:14" pos:end="475:18"><literal type="number" pos:start="475:14" pos:end="475:18">0x016</literal></expr>:</case> <comment type="block" pos:start="475:21" pos:end="475:32">/* movhps */</comment>

        <case pos:start="477:9" pos:end="477:19">case <expr pos:start="477:14" pos:end="477:18"><literal type="number" pos:start="477:14" pos:end="477:18">0x116</literal></expr>:</case> <comment type="block" pos:start="477:21" pos:end="477:32">/* movhpd */</comment>

            <if_stmt pos:start="479:13" pos:end="497:13"><if pos:start="479:13" pos:end="487:13">if <condition pos:start="479:16" pos:end="479:25">(<expr pos:start="479:17" pos:end="479:24"><name pos:start="479:17" pos:end="479:19">mod</name> <operator pos:start="479:21" pos:end="479:22">!=</operator> <literal type="number" pos:start="479:24" pos:end="479:24">3</literal></expr>)</condition> <block pos:start="479:27" pos:end="487:13">{<block_content pos:start="481:17" pos:end="485:68">

                <expr_stmt pos:start="481:17" pos:end="481:45"><expr pos:start="481:17" pos:end="481:44"><call pos:start="481:17" pos:end="481:44"><name pos:start="481:17" pos:end="481:29">gen_lea_modrm</name><argument_list pos:start="481:30" pos:end="481:44">(<argument pos:start="481:31" pos:end="481:33"><expr pos:start="481:31" pos:end="481:33"><name pos:start="481:31" pos:end="481:33">env</name></expr></argument>, <argument pos:start="481:36" pos:end="481:36"><expr pos:start="481:36" pos:end="481:36"><name pos:start="481:36" pos:end="481:36">s</name></expr></argument>, <argument pos:start="481:39" pos:end="481:43"><expr pos:start="481:39" pos:end="481:43"><name pos:start="481:39" pos:end="481:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="483:17" pos:end="485:68"><expr pos:start="483:17" pos:end="485:67"><call pos:start="483:17" pos:end="485:67"><name pos:start="483:17" pos:end="483:30">gen_ldq_env_A0</name><argument_list pos:start="483:31" pos:end="485:67">(<argument pos:start="483:32" pos:end="483:32"><expr pos:start="483:32" pos:end="483:32"><name pos:start="483:32" pos:end="483:32">s</name></expr></argument>, <argument pos:start="483:35" pos:end="485:66"><expr pos:start="483:35" pos:end="485:66"><call pos:start="483:35" pos:end="485:66"><name pos:start="483:35" pos:end="483:42">offsetof</name><argument_list pos:start="483:43" pos:end="485:66">(<argument pos:start="483:44" pos:end="483:54"><expr pos:start="483:44" pos:end="483:54"><name pos:start="483:44" pos:end="483:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="485:44" pos:end="485:65"><expr pos:start="485:44" pos:end="485:65"><name pos:start="485:44" pos:end="485:56"><name pos:start="485:44" pos:end="485:51">xmm_regs</name><index pos:start="485:52" pos:end="485:56">[<expr pos:start="485:53" pos:end="485:55"><name pos:start="485:53" pos:end="485:55">reg</name></expr>]</index></name><operator pos:start="485:57" pos:end="485:57">.</operator><call pos:start="485:58" pos:end="485:65"><name pos:start="485:58" pos:end="485:62">XMM_Q</name><argument_list pos:start="485:63" pos:end="485:65">(<argument pos:start="485:64" pos:end="485:64"><expr pos:start="485:64" pos:end="485:64"><literal type="number" pos:start="485:64" pos:end="485:64">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="487:15" pos:end="497:13">else <block pos:start="487:20" pos:end="497:13">{<block_content pos:start="491:17" pos:end="495:73">

                <comment type="block" pos:start="489:17" pos:end="489:29">/* movlhps */</comment>

                <expr_stmt pos:start="491:17" pos:end="491:44"><expr pos:start="491:17" pos:end="491:43"><name pos:start="491:17" pos:end="491:18">rm</name> <operator pos:start="491:20" pos:end="491:20">=</operator> <operator pos:start="491:22" pos:end="491:22">(</operator><name pos:start="491:23" pos:end="491:27">modrm</name> <operator pos:start="491:29" pos:end="491:29">&amp;</operator> <literal type="number" pos:start="491:31" pos:end="491:31">7</literal><operator pos:start="491:32" pos:end="491:32">)</operator> <operator pos:start="491:34" pos:end="491:34">|</operator> <call pos:start="491:36" pos:end="491:43"><name pos:start="491:36" pos:end="491:40">REX_B</name><argument_list pos:start="491:41" pos:end="491:43">(<argument pos:start="491:42" pos:end="491:42"><expr pos:start="491:42" pos:end="491:42"><name pos:start="491:42" pos:end="491:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="493:17" pos:end="495:73"><expr pos:start="493:17" pos:end="495:72"><call pos:start="493:17" pos:end="495:72"><name pos:start="493:17" pos:end="493:27">gen_op_movq</name><argument_list pos:start="493:28" pos:end="495:72">(<argument pos:start="493:29" pos:end="493:72"><expr pos:start="493:29" pos:end="493:72"><call pos:start="493:29" pos:end="493:72"><name pos:start="493:29" pos:end="493:36">offsetof</name><argument_list pos:start="493:37" pos:end="493:72">(<argument pos:start="493:38" pos:end="493:48"><expr pos:start="493:38" pos:end="493:48"><name pos:start="493:38" pos:end="493:48">CPUX86State</name></expr></argument>,<argument pos:start="493:50" pos:end="493:71"><expr pos:start="493:50" pos:end="493:71"><name pos:start="493:50" pos:end="493:62"><name pos:start="493:50" pos:end="493:57">xmm_regs</name><index pos:start="493:58" pos:end="493:62">[<expr pos:start="493:59" pos:end="493:61"><name pos:start="493:59" pos:end="493:61">reg</name></expr>]</index></name><operator pos:start="493:63" pos:end="493:63">.</operator><call pos:start="493:64" pos:end="493:71"><name pos:start="493:64" pos:end="493:68">XMM_Q</name><argument_list pos:start="493:69" pos:end="493:71">(<argument pos:start="493:70" pos:end="493:70"><expr pos:start="493:70" pos:end="493:70"><literal type="number" pos:start="493:70" pos:end="493:70">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="495:29" pos:end="495:71"><expr pos:start="495:29" pos:end="495:71"><call pos:start="495:29" pos:end="495:71"><name pos:start="495:29" pos:end="495:36">offsetof</name><argument_list pos:start="495:37" pos:end="495:71">(<argument pos:start="495:38" pos:end="495:48"><expr pos:start="495:38" pos:end="495:48"><name pos:start="495:38" pos:end="495:48">CPUX86State</name></expr></argument>,<argument pos:start="495:50" pos:end="495:70"><expr pos:start="495:50" pos:end="495:70"><name pos:start="495:50" pos:end="495:61"><name pos:start="495:50" pos:end="495:57">xmm_regs</name><index pos:start="495:58" pos:end="495:61">[<expr pos:start="495:59" pos:end="495:60"><name pos:start="495:59" pos:end="495:60">rm</name></expr>]</index></name><operator pos:start="495:62" pos:end="495:62">.</operator><call pos:start="495:63" pos:end="495:70"><name pos:start="495:63" pos:end="495:67">XMM_Q</name><argument_list pos:start="495:68" pos:end="495:70">(<argument pos:start="495:69" pos:end="495:69"><expr pos:start="495:69" pos:end="495:69"><literal type="number" pos:start="495:69" pos:end="495:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="499:13" pos:end="499:18">break;</break>

        <case pos:start="501:9" pos:end="501:19">case <expr pos:start="501:14" pos:end="501:18"><literal type="number" pos:start="501:14" pos:end="501:18">0x216</literal></expr>:</case> <comment type="block" pos:start="501:21" pos:end="501:34">/* movshdup */</comment>

            <if_stmt pos:start="503:13" pos:end="521:13"><if pos:start="503:13" pos:end="509:13">if <condition pos:start="503:16" pos:end="503:25">(<expr pos:start="503:17" pos:end="503:24"><name pos:start="503:17" pos:end="503:19">mod</name> <operator pos:start="503:21" pos:end="503:22">!=</operator> <literal type="number" pos:start="503:24" pos:end="503:24">3</literal></expr>)</condition> <block pos:start="503:27" pos:end="509:13">{<block_content pos:start="505:17" pos:end="507:72">

                <expr_stmt pos:start="505:17" pos:end="505:45"><expr pos:start="505:17" pos:end="505:44"><call pos:start="505:17" pos:end="505:44"><name pos:start="505:17" pos:end="505:29">gen_lea_modrm</name><argument_list pos:start="505:30" pos:end="505:44">(<argument pos:start="505:31" pos:end="505:33"><expr pos:start="505:31" pos:end="505:33"><name pos:start="505:31" pos:end="505:33">env</name></expr></argument>, <argument pos:start="505:36" pos:end="505:36"><expr pos:start="505:36" pos:end="505:36"><name pos:start="505:36" pos:end="505:36">s</name></expr></argument>, <argument pos:start="505:39" pos:end="505:43"><expr pos:start="505:39" pos:end="505:43"><name pos:start="505:39" pos:end="505:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="507:17" pos:end="507:72"><expr pos:start="507:17" pos:end="507:71"><call pos:start="507:17" pos:end="507:71"><name pos:start="507:17" pos:end="507:30">gen_ldo_env_A0</name><argument_list pos:start="507:31" pos:end="507:71">(<argument pos:start="507:32" pos:end="507:32"><expr pos:start="507:32" pos:end="507:32"><name pos:start="507:32" pos:end="507:32">s</name></expr></argument>, <argument pos:start="507:35" pos:end="507:70"><expr pos:start="507:35" pos:end="507:70"><call pos:start="507:35" pos:end="507:70"><name pos:start="507:35" pos:end="507:42">offsetof</name><argument_list pos:start="507:43" pos:end="507:70">(<argument pos:start="507:44" pos:end="507:54"><expr pos:start="507:44" pos:end="507:54"><name pos:start="507:44" pos:end="507:54">CPUX86State</name></expr></argument>, <argument pos:start="507:57" pos:end="507:69"><expr pos:start="507:57" pos:end="507:69"><name pos:start="507:57" pos:end="507:69"><name pos:start="507:57" pos:end="507:64">xmm_regs</name><index pos:start="507:65" pos:end="507:69">[<expr pos:start="507:66" pos:end="507:68"><name pos:start="507:66" pos:end="507:68">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="509:15" pos:end="521:13">else <block pos:start="509:20" pos:end="521:13">{<block_content pos:start="511:17" pos:end="519:73">

                <expr_stmt pos:start="511:17" pos:end="511:44"><expr pos:start="511:17" pos:end="511:43"><name pos:start="511:17" pos:end="511:18">rm</name> <operator pos:start="511:20" pos:end="511:20">=</operator> <operator pos:start="511:22" pos:end="511:22">(</operator><name pos:start="511:23" pos:end="511:27">modrm</name> <operator pos:start="511:29" pos:end="511:29">&amp;</operator> <literal type="number" pos:start="511:31" pos:end="511:31">7</literal><operator pos:start="511:32" pos:end="511:32">)</operator> <operator pos:start="511:34" pos:end="511:34">|</operator> <call pos:start="511:36" pos:end="511:43"><name pos:start="511:36" pos:end="511:40">REX_B</name><argument_list pos:start="511:41" pos:end="511:43">(<argument pos:start="511:42" pos:end="511:42"><expr pos:start="511:42" pos:end="511:42"><name pos:start="511:42" pos:end="511:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="513:17" pos:end="515:73"><expr pos:start="513:17" pos:end="515:72"><call pos:start="513:17" pos:end="515:72"><name pos:start="513:17" pos:end="513:27">gen_op_movl</name><argument_list pos:start="513:28" pos:end="515:72">(<argument pos:start="513:29" pos:end="513:72"><expr pos:start="513:29" pos:end="513:72"><call pos:start="513:29" pos:end="513:72"><name pos:start="513:29" pos:end="513:36">offsetof</name><argument_list pos:start="513:37" pos:end="513:72">(<argument pos:start="513:38" pos:end="513:48"><expr pos:start="513:38" pos:end="513:48"><name pos:start="513:38" pos:end="513:48">CPUX86State</name></expr></argument>,<argument pos:start="513:50" pos:end="513:71"><expr pos:start="513:50" pos:end="513:71"><name pos:start="513:50" pos:end="513:62"><name pos:start="513:50" pos:end="513:57">xmm_regs</name><index pos:start="513:58" pos:end="513:62">[<expr pos:start="513:59" pos:end="513:61"><name pos:start="513:59" pos:end="513:61">reg</name></expr>]</index></name><operator pos:start="513:63" pos:end="513:63">.</operator><call pos:start="513:64" pos:end="513:71"><name pos:start="513:64" pos:end="513:68">XMM_L</name><argument_list pos:start="513:69" pos:end="513:71">(<argument pos:start="513:70" pos:end="513:70"><expr pos:start="513:70" pos:end="513:70"><literal type="number" pos:start="513:70" pos:end="513:70">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="515:29" pos:end="515:71"><expr pos:start="515:29" pos:end="515:71"><call pos:start="515:29" pos:end="515:71"><name pos:start="515:29" pos:end="515:36">offsetof</name><argument_list pos:start="515:37" pos:end="515:71">(<argument pos:start="515:38" pos:end="515:48"><expr pos:start="515:38" pos:end="515:48"><name pos:start="515:38" pos:end="515:48">CPUX86State</name></expr></argument>,<argument pos:start="515:50" pos:end="515:70"><expr pos:start="515:50" pos:end="515:70"><name pos:start="515:50" pos:end="515:61"><name pos:start="515:50" pos:end="515:57">xmm_regs</name><index pos:start="515:58" pos:end="515:61">[<expr pos:start="515:59" pos:end="515:60"><name pos:start="515:59" pos:end="515:60">rm</name></expr>]</index></name><operator pos:start="515:62" pos:end="515:62">.</operator><call pos:start="515:63" pos:end="515:70"><name pos:start="515:63" pos:end="515:67">XMM_L</name><argument_list pos:start="515:68" pos:end="515:70">(<argument pos:start="515:69" pos:end="515:69"><expr pos:start="515:69" pos:end="515:69"><literal type="number" pos:start="515:69" pos:end="515:69">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="517:17" pos:end="519:73"><expr pos:start="517:17" pos:end="519:72"><call pos:start="517:17" pos:end="519:72"><name pos:start="517:17" pos:end="517:27">gen_op_movl</name><argument_list pos:start="517:28" pos:end="519:72">(<argument pos:start="517:29" pos:end="517:72"><expr pos:start="517:29" pos:end="517:72"><call pos:start="517:29" pos:end="517:72"><name pos:start="517:29" pos:end="517:36">offsetof</name><argument_list pos:start="517:37" pos:end="517:72">(<argument pos:start="517:38" pos:end="517:48"><expr pos:start="517:38" pos:end="517:48"><name pos:start="517:38" pos:end="517:48">CPUX86State</name></expr></argument>,<argument pos:start="517:50" pos:end="517:71"><expr pos:start="517:50" pos:end="517:71"><name pos:start="517:50" pos:end="517:62"><name pos:start="517:50" pos:end="517:57">xmm_regs</name><index pos:start="517:58" pos:end="517:62">[<expr pos:start="517:59" pos:end="517:61"><name pos:start="517:59" pos:end="517:61">reg</name></expr>]</index></name><operator pos:start="517:63" pos:end="517:63">.</operator><call pos:start="517:64" pos:end="517:71"><name pos:start="517:64" pos:end="517:68">XMM_L</name><argument_list pos:start="517:69" pos:end="517:71">(<argument pos:start="517:70" pos:end="517:70"><expr pos:start="517:70" pos:end="517:70"><literal type="number" pos:start="517:70" pos:end="517:70">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="519:29" pos:end="519:71"><expr pos:start="519:29" pos:end="519:71"><call pos:start="519:29" pos:end="519:71"><name pos:start="519:29" pos:end="519:36">offsetof</name><argument_list pos:start="519:37" pos:end="519:71">(<argument pos:start="519:38" pos:end="519:48"><expr pos:start="519:38" pos:end="519:48"><name pos:start="519:38" pos:end="519:48">CPUX86State</name></expr></argument>,<argument pos:start="519:50" pos:end="519:70"><expr pos:start="519:50" pos:end="519:70"><name pos:start="519:50" pos:end="519:61"><name pos:start="519:50" pos:end="519:57">xmm_regs</name><index pos:start="519:58" pos:end="519:61">[<expr pos:start="519:59" pos:end="519:60"><name pos:start="519:59" pos:end="519:60">rm</name></expr>]</index></name><operator pos:start="519:62" pos:end="519:62">.</operator><call pos:start="519:63" pos:end="519:70"><name pos:start="519:63" pos:end="519:67">XMM_L</name><argument_list pos:start="519:68" pos:end="519:70">(<argument pos:start="519:69" pos:end="519:69"><expr pos:start="519:69" pos:end="519:69"><literal type="number" pos:start="519:69" pos:end="519:69">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="523:13" pos:end="525:70"><expr pos:start="523:13" pos:end="525:69"><call pos:start="523:13" pos:end="525:69"><name pos:start="523:13" pos:end="523:23">gen_op_movl</name><argument_list pos:start="523:24" pos:end="525:69">(<argument pos:start="523:25" pos:end="523:68"><expr pos:start="523:25" pos:end="523:68"><call pos:start="523:25" pos:end="523:68"><name pos:start="523:25" pos:end="523:32">offsetof</name><argument_list pos:start="523:33" pos:end="523:68">(<argument pos:start="523:34" pos:end="523:44"><expr pos:start="523:34" pos:end="523:44"><name pos:start="523:34" pos:end="523:44">CPUX86State</name></expr></argument>,<argument pos:start="523:46" pos:end="523:67"><expr pos:start="523:46" pos:end="523:67"><name pos:start="523:46" pos:end="523:58"><name pos:start="523:46" pos:end="523:53">xmm_regs</name><index pos:start="523:54" pos:end="523:58">[<expr pos:start="523:55" pos:end="523:57"><name pos:start="523:55" pos:end="523:57">reg</name></expr>]</index></name><operator pos:start="523:59" pos:end="523:59">.</operator><call pos:start="523:60" pos:end="523:67"><name pos:start="523:60" pos:end="523:64">XMM_L</name><argument_list pos:start="523:65" pos:end="523:67">(<argument pos:start="523:66" pos:end="523:66"><expr pos:start="523:66" pos:end="523:66"><literal type="number" pos:start="523:66" pos:end="523:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="525:25" pos:end="525:68"><expr pos:start="525:25" pos:end="525:68"><call pos:start="525:25" pos:end="525:68"><name pos:start="525:25" pos:end="525:32">offsetof</name><argument_list pos:start="525:33" pos:end="525:68">(<argument pos:start="525:34" pos:end="525:44"><expr pos:start="525:34" pos:end="525:44"><name pos:start="525:34" pos:end="525:44">CPUX86State</name></expr></argument>,<argument pos:start="525:46" pos:end="525:67"><expr pos:start="525:46" pos:end="525:67"><name pos:start="525:46" pos:end="525:58"><name pos:start="525:46" pos:end="525:53">xmm_regs</name><index pos:start="525:54" pos:end="525:58">[<expr pos:start="525:55" pos:end="525:57"><name pos:start="525:55" pos:end="525:57">reg</name></expr>]</index></name><operator pos:start="525:59" pos:end="525:59">.</operator><call pos:start="525:60" pos:end="525:67"><name pos:start="525:60" pos:end="525:64">XMM_L</name><argument_list pos:start="525:65" pos:end="525:67">(<argument pos:start="525:66" pos:end="525:66"><expr pos:start="525:66" pos:end="525:66"><literal type="number" pos:start="525:66" pos:end="525:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="527:13" pos:end="529:70"><expr pos:start="527:13" pos:end="529:69"><call pos:start="527:13" pos:end="529:69"><name pos:start="527:13" pos:end="527:23">gen_op_movl</name><argument_list pos:start="527:24" pos:end="529:69">(<argument pos:start="527:25" pos:end="527:68"><expr pos:start="527:25" pos:end="527:68"><call pos:start="527:25" pos:end="527:68"><name pos:start="527:25" pos:end="527:32">offsetof</name><argument_list pos:start="527:33" pos:end="527:68">(<argument pos:start="527:34" pos:end="527:44"><expr pos:start="527:34" pos:end="527:44"><name pos:start="527:34" pos:end="527:44">CPUX86State</name></expr></argument>,<argument pos:start="527:46" pos:end="527:67"><expr pos:start="527:46" pos:end="527:67"><name pos:start="527:46" pos:end="527:58"><name pos:start="527:46" pos:end="527:53">xmm_regs</name><index pos:start="527:54" pos:end="527:58">[<expr pos:start="527:55" pos:end="527:57"><name pos:start="527:55" pos:end="527:57">reg</name></expr>]</index></name><operator pos:start="527:59" pos:end="527:59">.</operator><call pos:start="527:60" pos:end="527:67"><name pos:start="527:60" pos:end="527:64">XMM_L</name><argument_list pos:start="527:65" pos:end="527:67">(<argument pos:start="527:66" pos:end="527:66"><expr pos:start="527:66" pos:end="527:66"><literal type="number" pos:start="527:66" pos:end="527:66">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="529:25" pos:end="529:68"><expr pos:start="529:25" pos:end="529:68"><call pos:start="529:25" pos:end="529:68"><name pos:start="529:25" pos:end="529:32">offsetof</name><argument_list pos:start="529:33" pos:end="529:68">(<argument pos:start="529:34" pos:end="529:44"><expr pos:start="529:34" pos:end="529:44"><name pos:start="529:34" pos:end="529:44">CPUX86State</name></expr></argument>,<argument pos:start="529:46" pos:end="529:67"><expr pos:start="529:46" pos:end="529:67"><name pos:start="529:46" pos:end="529:58"><name pos:start="529:46" pos:end="529:53">xmm_regs</name><index pos:start="529:54" pos:end="529:58">[<expr pos:start="529:55" pos:end="529:57"><name pos:start="529:55" pos:end="529:57">reg</name></expr>]</index></name><operator pos:start="529:59" pos:end="529:59">.</operator><call pos:start="529:60" pos:end="529:67"><name pos:start="529:60" pos:end="529:64">XMM_L</name><argument_list pos:start="529:65" pos:end="529:67">(<argument pos:start="529:66" pos:end="529:66"><expr pos:start="529:66" pos:end="529:66"><literal type="number" pos:start="529:66" pos:end="529:66">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="531:13" pos:end="531:18">break;</break>

        <case pos:start="533:9" pos:end="533:19">case <expr pos:start="533:14" pos:end="533:18"><literal type="number" pos:start="533:14" pos:end="533:18">0x178</literal></expr>:</case>

        <case pos:start="535:9" pos:end="535:19">case <expr pos:start="535:14" pos:end="535:18"><literal type="number" pos:start="535:14" pos:end="535:18">0x378</literal></expr>:</case>

            <block pos:start="537:13" pos:end="571:13">{<block_content pos:start="539:17" pos:end="569:70">

                <decl_stmt pos:start="539:17" pos:end="539:44"><decl pos:start="539:17" pos:end="539:29"><type pos:start="539:17" pos:end="539:19"><name pos:start="539:17" pos:end="539:19">int</name></type> <name pos:start="539:21" pos:end="539:29">bit_index</name></decl>, <decl pos:start="539:32" pos:end="539:43"><type ref="prev" pos:start="539:17" pos:end="539:19"/><name pos:start="539:32" pos:end="539:43">field_length</name></decl>;</decl_stmt>



                <if_stmt pos:start="543:17" pos:end="545:36"><if pos:start="543:17" pos:end="545:36">if <condition pos:start="543:20" pos:end="543:40">(<expr pos:start="543:21" pos:end="543:39"><name pos:start="543:21" pos:end="543:22">b1</name> <operator pos:start="543:24" pos:end="543:25">==</operator> <literal type="number" pos:start="543:27" pos:end="543:27">1</literal> <operator pos:start="543:29" pos:end="543:30">&amp;&amp;</operator> <name pos:start="543:32" pos:end="543:34">reg</name> <operator pos:start="543:36" pos:end="543:37">!=</operator> <literal type="number" pos:start="543:39" pos:end="543:39">0</literal></expr>)</condition><block type="pseudo" pos:start="545:21" pos:end="545:36"><block_content pos:start="545:21" pos:end="545:36">

                    <goto pos:start="545:21" pos:end="545:36">goto <name pos:start="545:26" pos:end="545:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="547:17" pos:end="547:66"><expr pos:start="547:17" pos:end="547:65"><name pos:start="547:17" pos:end="547:28">field_length</name> <operator pos:start="547:30" pos:end="547:30">=</operator> <call pos:start="547:32" pos:end="547:58"><name pos:start="547:32" pos:end="547:44">cpu_ldub_code</name><argument_list pos:start="547:45" pos:end="547:58">(<argument pos:start="547:46" pos:end="547:48"><expr pos:start="547:46" pos:end="547:48"><name pos:start="547:46" pos:end="547:48">env</name></expr></argument>, <argument pos:start="547:51" pos:end="547:57"><expr pos:start="547:51" pos:end="547:57"><name pos:start="547:51" pos:end="547:55"><name pos:start="547:51" pos:end="547:51">s</name><operator pos:start="547:52" pos:end="547:53">-&gt;</operator><name pos:start="547:54" pos:end="547:55">pc</name></name><operator pos:start="547:56" pos:end="547:57">++</operator></expr></argument>)</argument_list></call> <operator pos:start="547:60" pos:end="547:60">&amp;</operator> <literal type="number" pos:start="547:62" pos:end="547:65">0x3F</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="549:17" pos:end="549:63"><expr pos:start="549:17" pos:end="549:62"><name pos:start="549:17" pos:end="549:25">bit_index</name> <operator pos:start="549:27" pos:end="549:27">=</operator> <call pos:start="549:29" pos:end="549:55"><name pos:start="549:29" pos:end="549:41">cpu_ldub_code</name><argument_list pos:start="549:42" pos:end="549:55">(<argument pos:start="549:43" pos:end="549:45"><expr pos:start="549:43" pos:end="549:45"><name pos:start="549:43" pos:end="549:45">env</name></expr></argument>, <argument pos:start="549:48" pos:end="549:54"><expr pos:start="549:48" pos:end="549:54"><name pos:start="549:48" pos:end="549:52"><name pos:start="549:48" pos:end="549:48">s</name><operator pos:start="549:49" pos:end="549:50">-&gt;</operator><name pos:start="549:51" pos:end="549:52">pc</name></name><operator pos:start="549:53" pos:end="549:54">++</operator></expr></argument>)</argument_list></call> <operator pos:start="549:57" pos:end="549:57">&amp;</operator> <literal type="number" pos:start="549:59" pos:end="549:62">0x3F</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="551:17" pos:end="553:57"><expr pos:start="551:17" pos:end="553:56"><call pos:start="551:17" pos:end="553:56"><name pos:start="551:17" pos:end="551:32">tcg_gen_addi_ptr</name><argument_list pos:start="551:33" pos:end="553:56">(<argument pos:start="551:34" pos:end="551:41"><expr pos:start="551:34" pos:end="551:41"><name pos:start="551:34" pos:end="551:41">cpu_ptr0</name></expr></argument>, <argument pos:start="551:44" pos:end="551:50"><expr pos:start="551:44" pos:end="551:50"><name pos:start="551:44" pos:end="551:50">cpu_env</name></expr></argument>,

                    <argument pos:start="553:21" pos:end="553:55"><expr pos:start="553:21" pos:end="553:55"><call pos:start="553:21" pos:end="553:55"><name pos:start="553:21" pos:end="553:28">offsetof</name><argument_list pos:start="553:29" pos:end="553:55">(<argument pos:start="553:30" pos:end="553:40"><expr pos:start="553:30" pos:end="553:40"><name pos:start="553:30" pos:end="553:40">CPUX86State</name></expr></argument>,<argument pos:start="553:42" pos:end="553:54"><expr pos:start="553:42" pos:end="553:54"><name pos:start="553:42" pos:end="553:54"><name pos:start="553:42" pos:end="553:49">xmm_regs</name><index pos:start="553:50" pos:end="553:54">[<expr pos:start="553:51" pos:end="553:53"><name pos:start="553:51" pos:end="553:53">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="555:17" pos:end="569:70"><if pos:start="555:17" pos:end="561:68">if <condition pos:start="555:20" pos:end="555:28">(<expr pos:start="555:21" pos:end="555:27"><name pos:start="555:21" pos:end="555:22">b1</name> <operator pos:start="555:24" pos:end="555:25">==</operator> <literal type="number" pos:start="555:27" pos:end="555:27">1</literal></expr>)</condition><block type="pseudo" pos:start="557:21" pos:end="561:68"><block_content pos:start="557:21" pos:end="561:68">

                    <expr_stmt pos:start="557:21" pos:end="561:68"><expr pos:start="557:21" pos:end="561:67"><call pos:start="557:21" pos:end="561:67"><name pos:start="557:21" pos:end="557:38">gen_helper_extrq_i</name><argument_list pos:start="557:39" pos:end="561:67">(<argument pos:start="557:40" pos:end="557:46"><expr pos:start="557:40" pos:end="557:46"><name pos:start="557:40" pos:end="557:46">cpu_env</name></expr></argument>, <argument pos:start="557:49" pos:end="557:56"><expr pos:start="557:49" pos:end="557:56"><name pos:start="557:49" pos:end="557:56">cpu_ptr0</name></expr></argument>,

                                       <argument pos:start="559:40" pos:end="559:63"><expr pos:start="559:40" pos:end="559:63"><call pos:start="559:40" pos:end="559:63"><name pos:start="559:40" pos:end="559:52">tcg_const_i32</name><argument_list pos:start="559:53" pos:end="559:63">(<argument pos:start="559:54" pos:end="559:62"><expr pos:start="559:54" pos:end="559:62"><name pos:start="559:54" pos:end="559:62">bit_index</name></expr></argument>)</argument_list></call></expr></argument>,

                                       <argument pos:start="561:40" pos:end="561:66"><expr pos:start="561:40" pos:end="561:66"><call pos:start="561:40" pos:end="561:66"><name pos:start="561:40" pos:end="561:52">tcg_const_i32</name><argument_list pos:start="561:53" pos:end="561:66">(<argument pos:start="561:54" pos:end="561:65"><expr pos:start="561:54" pos:end="561:65"><name pos:start="561:54" pos:end="561:65">field_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="563:17" pos:end="569:70">else<block type="pseudo" pos:start="565:21" pos:end="569:70"><block_content pos:start="565:21" pos:end="569:70">

                    <expr_stmt pos:start="565:21" pos:end="569:70"><expr pos:start="565:21" pos:end="569:69"><call pos:start="565:21" pos:end="569:69"><name pos:start="565:21" pos:end="565:40">gen_helper_insertq_i</name><argument_list pos:start="565:41" pos:end="569:69">(<argument pos:start="565:42" pos:end="565:48"><expr pos:start="565:42" pos:end="565:48"><name pos:start="565:42" pos:end="565:48">cpu_env</name></expr></argument>, <argument pos:start="565:51" pos:end="565:58"><expr pos:start="565:51" pos:end="565:58"><name pos:start="565:51" pos:end="565:58">cpu_ptr0</name></expr></argument>,

                                         <argument pos:start="567:42" pos:end="567:65"><expr pos:start="567:42" pos:end="567:65"><call pos:start="567:42" pos:end="567:65"><name pos:start="567:42" pos:end="567:54">tcg_const_i32</name><argument_list pos:start="567:55" pos:end="567:65">(<argument pos:start="567:56" pos:end="567:64"><expr pos:start="567:56" pos:end="567:64"><name pos:start="567:56" pos:end="567:64">bit_index</name></expr></argument>)</argument_list></call></expr></argument>,

                                         <argument pos:start="569:42" pos:end="569:68"><expr pos:start="569:42" pos:end="569:68"><call pos:start="569:42" pos:end="569:68"><name pos:start="569:42" pos:end="569:54">tcg_const_i32</name><argument_list pos:start="569:55" pos:end="569:68">(<argument pos:start="569:56" pos:end="569:67"><expr pos:start="569:56" pos:end="569:67"><name pos:start="569:56" pos:end="569:67">field_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block>

            <break pos:start="573:13" pos:end="573:18">break;</break>

        <case pos:start="575:9" pos:end="578:0">case <expr pos:start="575:14" pos:end="575:17"><literal type="number" pos:start="575:14" pos:end="575:17">0x7e</literal></expr>:</case> <comment type="block" pos:start="575:20" pos:end="575:36">/* movd ea, mm */</comment>

<cpp:ifdef pos:start="577:1" pos:end="577:20">#<cpp:directive pos:start="577:2" pos:end="577:6">ifdef</cpp:directive> <name pos:start="577:8" pos:end="577:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="579:13" pos:end="599:13"><if pos:start="579:13" pos:end="587:13">if <condition pos:start="579:16" pos:end="579:34">(<expr pos:start="579:17" pos:end="579:33"><name pos:start="579:17" pos:end="579:24"><name pos:start="579:17" pos:end="579:17">s</name><operator pos:start="579:18" pos:end="579:19">-&gt;</operator><name pos:start="579:20" pos:end="579:24">dflag</name></name> <operator pos:start="579:26" pos:end="579:27">==</operator> <name pos:start="579:29" pos:end="579:33">MO_64</name></expr>)</condition> <block pos:start="579:36" pos:end="587:13">{<block_content pos:start="581:17" pos:end="585:65">

                <expr_stmt pos:start="581:17" pos:end="583:70"><expr pos:start="581:17" pos:end="583:69"><call pos:start="581:17" pos:end="583:69"><name pos:start="581:17" pos:end="581:30">tcg_gen_ld_i64</name><argument_list pos:start="581:31" pos:end="583:69">(<argument pos:start="581:32" pos:end="581:39"><expr pos:start="581:32" pos:end="581:39"><name pos:start="581:32" pos:end="581:39"><name pos:start="581:32" pos:end="581:36">cpu_T</name><index pos:start="581:37" pos:end="581:39">[<expr pos:start="581:38" pos:end="581:38"><literal type="number" pos:start="581:38" pos:end="581:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="581:42" pos:end="581:48"><expr pos:start="581:42" pos:end="581:48"><name pos:start="581:42" pos:end="581:48">cpu_env</name></expr></argument>, 

                               <argument pos:start="583:32" pos:end="583:68"><expr pos:start="583:32" pos:end="583:68"><call pos:start="583:32" pos:end="583:68"><name pos:start="583:32" pos:end="583:39">offsetof</name><argument_list pos:start="583:40" pos:end="583:68">(<argument pos:start="583:41" pos:end="583:51"><expr pos:start="583:41" pos:end="583:51"><name pos:start="583:41" pos:end="583:51">CPUX86State</name></expr></argument>,<argument pos:start="583:53" pos:end="583:67"><expr pos:start="583:53" pos:end="583:67"><name pos:start="583:53" pos:end="583:63"><name pos:start="583:53" pos:end="583:58">fpregs</name><index pos:start="583:59" pos:end="583:63">[<expr pos:start="583:60" pos:end="583:62"><name pos:start="583:60" pos:end="583:62">reg</name></expr>]</index></name><operator pos:start="583:64" pos:end="583:64">.</operator><name pos:start="583:65" pos:end="583:67">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="585:17" pos:end="585:65"><expr pos:start="585:17" pos:end="585:64"><call pos:start="585:17" pos:end="585:64"><name pos:start="585:17" pos:end="585:30">gen_ldst_modrm</name><argument_list pos:start="585:31" pos:end="585:64">(<argument pos:start="585:32" pos:end="585:34"><expr pos:start="585:32" pos:end="585:34"><name pos:start="585:32" pos:end="585:34">env</name></expr></argument>, <argument pos:start="585:37" pos:end="585:37"><expr pos:start="585:37" pos:end="585:37"><name pos:start="585:37" pos:end="585:37">s</name></expr></argument>, <argument pos:start="585:40" pos:end="585:44"><expr pos:start="585:40" pos:end="585:44"><name pos:start="585:40" pos:end="585:44">modrm</name></expr></argument>, <argument pos:start="585:47" pos:end="585:51"><expr pos:start="585:47" pos:end="585:51"><name pos:start="585:47" pos:end="585:51">MO_64</name></expr></argument>, <argument pos:start="585:54" pos:end="585:60"><expr pos:start="585:54" pos:end="585:60"><name pos:start="585:54" pos:end="585:60">OR_TMP0</name></expr></argument>, <argument pos:start="585:63" pos:end="585:63"><expr pos:start="585:63" pos:end="585:63"><literal type="number" pos:start="585:63" pos:end="585:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="587:15" pos:end="599:13">else

<cpp:endif pos:start="589:1" pos:end="589:6">#<cpp:directive pos:start="589:2" pos:end="589:6">endif</cpp:directive></cpp:endif>

            <block pos:start="591:13" pos:end="599:13">{<block_content pos:start="593:17" pos:end="597:65">

                <expr_stmt pos:start="593:17" pos:end="595:81"><expr pos:start="593:17" pos:end="595:80"><call pos:start="593:17" pos:end="595:80"><name pos:start="593:17" pos:end="593:32">tcg_gen_ld32u_tl</name><argument_list pos:start="593:33" pos:end="595:80">(<argument pos:start="593:34" pos:end="593:41"><expr pos:start="593:34" pos:end="593:41"><name pos:start="593:34" pos:end="593:41"><name pos:start="593:34" pos:end="593:38">cpu_T</name><index pos:start="593:39" pos:end="593:41">[<expr pos:start="593:40" pos:end="593:40"><literal type="number" pos:start="593:40" pos:end="593:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="593:44" pos:end="593:50"><expr pos:start="593:44" pos:end="593:50"><name pos:start="593:44" pos:end="593:50">cpu_env</name></expr></argument>, 

                                 <argument pos:start="595:34" pos:end="595:79"><expr pos:start="595:34" pos:end="595:79"><call pos:start="595:34" pos:end="595:79"><name pos:start="595:34" pos:end="595:41">offsetof</name><argument_list pos:start="595:42" pos:end="595:79">(<argument pos:start="595:43" pos:end="595:53"><expr pos:start="595:43" pos:end="595:53"><name pos:start="595:43" pos:end="595:53">CPUX86State</name></expr></argument>,<argument pos:start="595:55" pos:end="595:78"><expr pos:start="595:55" pos:end="595:78"><name pos:start="595:55" pos:end="595:65"><name pos:start="595:55" pos:end="595:60">fpregs</name><index pos:start="595:61" pos:end="595:65">[<expr pos:start="595:62" pos:end="595:64"><name pos:start="595:62" pos:end="595:64">reg</name></expr>]</index></name><operator pos:start="595:66" pos:end="595:66">.</operator><call pos:start="595:67" pos:end="595:78"><name pos:start="595:67" pos:end="595:75"><name pos:start="595:67" pos:end="595:69">mmx</name><operator pos:start="595:70" pos:end="595:70">.</operator><name pos:start="595:71" pos:end="595:75">MMX_L</name></name><argument_list pos:start="595:76" pos:end="595:78">(<argument pos:start="595:77" pos:end="595:77"><expr pos:start="595:77" pos:end="595:77"><literal type="number" pos:start="595:77" pos:end="595:77">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="597:17" pos:end="597:65"><expr pos:start="597:17" pos:end="597:64"><call pos:start="597:17" pos:end="597:64"><name pos:start="597:17" pos:end="597:30">gen_ldst_modrm</name><argument_list pos:start="597:31" pos:end="597:64">(<argument pos:start="597:32" pos:end="597:34"><expr pos:start="597:32" pos:end="597:34"><name pos:start="597:32" pos:end="597:34">env</name></expr></argument>, <argument pos:start="597:37" pos:end="597:37"><expr pos:start="597:37" pos:end="597:37"><name pos:start="597:37" pos:end="597:37">s</name></expr></argument>, <argument pos:start="597:40" pos:end="597:44"><expr pos:start="597:40" pos:end="597:44"><name pos:start="597:40" pos:end="597:44">modrm</name></expr></argument>, <argument pos:start="597:47" pos:end="597:51"><expr pos:start="597:47" pos:end="597:51"><name pos:start="597:47" pos:end="597:51">MO_32</name></expr></argument>, <argument pos:start="597:54" pos:end="597:60"><expr pos:start="597:54" pos:end="597:60"><name pos:start="597:54" pos:end="597:60">OR_TMP0</name></expr></argument>, <argument pos:start="597:63" pos:end="597:63"><expr pos:start="597:63" pos:end="597:63"><literal type="number" pos:start="597:63" pos:end="597:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="601:13" pos:end="601:18">break;</break>

        <case pos:start="603:9" pos:end="606:0">case <expr pos:start="603:14" pos:end="603:18"><literal type="number" pos:start="603:14" pos:end="603:18">0x17e</literal></expr>:</case> <comment type="block" pos:start="603:21" pos:end="603:38">/* movd ea, xmm */</comment>

<cpp:ifdef pos:start="605:1" pos:end="605:20">#<cpp:directive pos:start="605:2" pos:end="605:6">ifdef</cpp:directive> <name pos:start="605:8" pos:end="605:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="607:13" pos:end="627:13"><if pos:start="607:13" pos:end="615:13">if <condition pos:start="607:16" pos:end="607:34">(<expr pos:start="607:17" pos:end="607:33"><name pos:start="607:17" pos:end="607:24"><name pos:start="607:17" pos:end="607:17">s</name><operator pos:start="607:18" pos:end="607:19">-&gt;</operator><name pos:start="607:20" pos:end="607:24">dflag</name></name> <operator pos:start="607:26" pos:end="607:27">==</operator> <name pos:start="607:29" pos:end="607:33">MO_64</name></expr>)</condition> <block pos:start="607:36" pos:end="615:13">{<block_content pos:start="609:17" pos:end="613:65">

                <expr_stmt pos:start="609:17" pos:end="611:77"><expr pos:start="609:17" pos:end="611:76"><call pos:start="609:17" pos:end="611:76"><name pos:start="609:17" pos:end="609:30">tcg_gen_ld_i64</name><argument_list pos:start="609:31" pos:end="611:76">(<argument pos:start="609:32" pos:end="609:39"><expr pos:start="609:32" pos:end="609:39"><name pos:start="609:32" pos:end="609:39"><name pos:start="609:32" pos:end="609:36">cpu_T</name><index pos:start="609:37" pos:end="609:39">[<expr pos:start="609:38" pos:end="609:38"><literal type="number" pos:start="609:38" pos:end="609:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="609:42" pos:end="609:48"><expr pos:start="609:42" pos:end="609:48"><name pos:start="609:42" pos:end="609:48">cpu_env</name></expr></argument>, 

                               <argument pos:start="611:32" pos:end="611:75"><expr pos:start="611:32" pos:end="611:75"><call pos:start="611:32" pos:end="611:75"><name pos:start="611:32" pos:end="611:39">offsetof</name><argument_list pos:start="611:40" pos:end="611:75">(<argument pos:start="611:41" pos:end="611:51"><expr pos:start="611:41" pos:end="611:51"><name pos:start="611:41" pos:end="611:51">CPUX86State</name></expr></argument>,<argument pos:start="611:53" pos:end="611:74"><expr pos:start="611:53" pos:end="611:74"><name pos:start="611:53" pos:end="611:65"><name pos:start="611:53" pos:end="611:60">xmm_regs</name><index pos:start="611:61" pos:end="611:65">[<expr pos:start="611:62" pos:end="611:64"><name pos:start="611:62" pos:end="611:64">reg</name></expr>]</index></name><operator pos:start="611:66" pos:end="611:66">.</operator><call pos:start="611:67" pos:end="611:74"><name pos:start="611:67" pos:end="611:71">XMM_Q</name><argument_list pos:start="611:72" pos:end="611:74">(<argument pos:start="611:73" pos:end="611:73"><expr pos:start="611:73" pos:end="611:73"><literal type="number" pos:start="611:73" pos:end="611:73">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="613:17" pos:end="613:65"><expr pos:start="613:17" pos:end="613:64"><call pos:start="613:17" pos:end="613:64"><name pos:start="613:17" pos:end="613:30">gen_ldst_modrm</name><argument_list pos:start="613:31" pos:end="613:64">(<argument pos:start="613:32" pos:end="613:34"><expr pos:start="613:32" pos:end="613:34"><name pos:start="613:32" pos:end="613:34">env</name></expr></argument>, <argument pos:start="613:37" pos:end="613:37"><expr pos:start="613:37" pos:end="613:37"><name pos:start="613:37" pos:end="613:37">s</name></expr></argument>, <argument pos:start="613:40" pos:end="613:44"><expr pos:start="613:40" pos:end="613:44"><name pos:start="613:40" pos:end="613:44">modrm</name></expr></argument>, <argument pos:start="613:47" pos:end="613:51"><expr pos:start="613:47" pos:end="613:51"><name pos:start="613:47" pos:end="613:51">MO_64</name></expr></argument>, <argument pos:start="613:54" pos:end="613:60"><expr pos:start="613:54" pos:end="613:60"><name pos:start="613:54" pos:end="613:60">OR_TMP0</name></expr></argument>, <argument pos:start="613:63" pos:end="613:63"><expr pos:start="613:63" pos:end="613:63"><literal type="number" pos:start="613:63" pos:end="613:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="615:15" pos:end="627:13">else

<cpp:endif pos:start="617:1" pos:end="617:6">#<cpp:directive pos:start="617:2" pos:end="617:6">endif</cpp:directive></cpp:endif>

            <block pos:start="619:13" pos:end="627:13">{<block_content pos:start="621:17" pos:end="625:65">

                <expr_stmt pos:start="621:17" pos:end="623:79"><expr pos:start="621:17" pos:end="623:78"><call pos:start="621:17" pos:end="623:78"><name pos:start="621:17" pos:end="621:32">tcg_gen_ld32u_tl</name><argument_list pos:start="621:33" pos:end="623:78">(<argument pos:start="621:34" pos:end="621:41"><expr pos:start="621:34" pos:end="621:41"><name pos:start="621:34" pos:end="621:41"><name pos:start="621:34" pos:end="621:38">cpu_T</name><index pos:start="621:39" pos:end="621:41">[<expr pos:start="621:40" pos:end="621:40"><literal type="number" pos:start="621:40" pos:end="621:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="621:44" pos:end="621:50"><expr pos:start="621:44" pos:end="621:50"><name pos:start="621:44" pos:end="621:50">cpu_env</name></expr></argument>, 

                                 <argument pos:start="623:34" pos:end="623:77"><expr pos:start="623:34" pos:end="623:77"><call pos:start="623:34" pos:end="623:77"><name pos:start="623:34" pos:end="623:41">offsetof</name><argument_list pos:start="623:42" pos:end="623:77">(<argument pos:start="623:43" pos:end="623:53"><expr pos:start="623:43" pos:end="623:53"><name pos:start="623:43" pos:end="623:53">CPUX86State</name></expr></argument>,<argument pos:start="623:55" pos:end="623:76"><expr pos:start="623:55" pos:end="623:76"><name pos:start="623:55" pos:end="623:67"><name pos:start="623:55" pos:end="623:62">xmm_regs</name><index pos:start="623:63" pos:end="623:67">[<expr pos:start="623:64" pos:end="623:66"><name pos:start="623:64" pos:end="623:66">reg</name></expr>]</index></name><operator pos:start="623:68" pos:end="623:68">.</operator><call pos:start="623:69" pos:end="623:76"><name pos:start="623:69" pos:end="623:73">XMM_L</name><argument_list pos:start="623:74" pos:end="623:76">(<argument pos:start="623:75" pos:end="623:75"><expr pos:start="623:75" pos:end="623:75"><literal type="number" pos:start="623:75" pos:end="623:75">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="625:17" pos:end="625:65"><expr pos:start="625:17" pos:end="625:64"><call pos:start="625:17" pos:end="625:64"><name pos:start="625:17" pos:end="625:30">gen_ldst_modrm</name><argument_list pos:start="625:31" pos:end="625:64">(<argument pos:start="625:32" pos:end="625:34"><expr pos:start="625:32" pos:end="625:34"><name pos:start="625:32" pos:end="625:34">env</name></expr></argument>, <argument pos:start="625:37" pos:end="625:37"><expr pos:start="625:37" pos:end="625:37"><name pos:start="625:37" pos:end="625:37">s</name></expr></argument>, <argument pos:start="625:40" pos:end="625:44"><expr pos:start="625:40" pos:end="625:44"><name pos:start="625:40" pos:end="625:44">modrm</name></expr></argument>, <argument pos:start="625:47" pos:end="625:51"><expr pos:start="625:47" pos:end="625:51"><name pos:start="625:47" pos:end="625:51">MO_32</name></expr></argument>, <argument pos:start="625:54" pos:end="625:60"><expr pos:start="625:54" pos:end="625:60"><name pos:start="625:54" pos:end="625:60">OR_TMP0</name></expr></argument>, <argument pos:start="625:63" pos:end="625:63"><expr pos:start="625:63" pos:end="625:63"><literal type="number" pos:start="625:63" pos:end="625:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="629:13" pos:end="629:18">break;</break>

        <case pos:start="631:9" pos:end="631:19">case <expr pos:start="631:14" pos:end="631:18"><literal type="number" pos:start="631:14" pos:end="631:18">0x27e</literal></expr>:</case> <comment type="block" pos:start="631:21" pos:end="631:38">/* movq xmm, ea */</comment>

            <if_stmt pos:start="633:13" pos:end="649:13"><if pos:start="633:13" pos:end="641:13">if <condition pos:start="633:16" pos:end="633:25">(<expr pos:start="633:17" pos:end="633:24"><name pos:start="633:17" pos:end="633:19">mod</name> <operator pos:start="633:21" pos:end="633:22">!=</operator> <literal type="number" pos:start="633:24" pos:end="633:24">3</literal></expr>)</condition> <block pos:start="633:27" pos:end="641:13">{<block_content pos:start="635:17" pos:end="639:68">

                <expr_stmt pos:start="635:17" pos:end="635:45"><expr pos:start="635:17" pos:end="635:44"><call pos:start="635:17" pos:end="635:44"><name pos:start="635:17" pos:end="635:29">gen_lea_modrm</name><argument_list pos:start="635:30" pos:end="635:44">(<argument pos:start="635:31" pos:end="635:33"><expr pos:start="635:31" pos:end="635:33"><name pos:start="635:31" pos:end="635:33">env</name></expr></argument>, <argument pos:start="635:36" pos:end="635:36"><expr pos:start="635:36" pos:end="635:36"><name pos:start="635:36" pos:end="635:36">s</name></expr></argument>, <argument pos:start="635:39" pos:end="635:43"><expr pos:start="635:39" pos:end="635:43"><name pos:start="635:39" pos:end="635:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="637:17" pos:end="639:68"><expr pos:start="637:17" pos:end="639:67"><call pos:start="637:17" pos:end="639:67"><name pos:start="637:17" pos:end="637:30">gen_ldq_env_A0</name><argument_list pos:start="637:31" pos:end="639:67">(<argument pos:start="637:32" pos:end="637:32"><expr pos:start="637:32" pos:end="637:32"><name pos:start="637:32" pos:end="637:32">s</name></expr></argument>, <argument pos:start="637:35" pos:end="639:66"><expr pos:start="637:35" pos:end="639:66"><call pos:start="637:35" pos:end="639:66"><name pos:start="637:35" pos:end="637:42">offsetof</name><argument_list pos:start="637:43" pos:end="639:66">(<argument pos:start="637:44" pos:end="637:54"><expr pos:start="637:44" pos:end="637:54"><name pos:start="637:44" pos:end="637:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="639:44" pos:end="639:65"><expr pos:start="639:44" pos:end="639:65"><name pos:start="639:44" pos:end="639:56"><name pos:start="639:44" pos:end="639:51">xmm_regs</name><index pos:start="639:52" pos:end="639:56">[<expr pos:start="639:53" pos:end="639:55"><name pos:start="639:53" pos:end="639:55">reg</name></expr>]</index></name><operator pos:start="639:57" pos:end="639:57">.</operator><call pos:start="639:58" pos:end="639:65"><name pos:start="639:58" pos:end="639:62">XMM_Q</name><argument_list pos:start="639:63" pos:end="639:65">(<argument pos:start="639:64" pos:end="639:64"><expr pos:start="639:64" pos:end="639:64"><literal type="number" pos:start="639:64" pos:end="639:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="641:15" pos:end="649:13">else <block pos:start="641:20" pos:end="649:13">{<block_content pos:start="643:17" pos:end="647:73">

                <expr_stmt pos:start="643:17" pos:end="643:44"><expr pos:start="643:17" pos:end="643:43"><name pos:start="643:17" pos:end="643:18">rm</name> <operator pos:start="643:20" pos:end="643:20">=</operator> <operator pos:start="643:22" pos:end="643:22">(</operator><name pos:start="643:23" pos:end="643:27">modrm</name> <operator pos:start="643:29" pos:end="643:29">&amp;</operator> <literal type="number" pos:start="643:31" pos:end="643:31">7</literal><operator pos:start="643:32" pos:end="643:32">)</operator> <operator pos:start="643:34" pos:end="643:34">|</operator> <call pos:start="643:36" pos:end="643:43"><name pos:start="643:36" pos:end="643:40">REX_B</name><argument_list pos:start="643:41" pos:end="643:43">(<argument pos:start="643:42" pos:end="643:42"><expr pos:start="643:42" pos:end="643:42"><name pos:start="643:42" pos:end="643:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="645:17" pos:end="647:73"><expr pos:start="645:17" pos:end="647:72"><call pos:start="645:17" pos:end="647:72"><name pos:start="645:17" pos:end="645:27">gen_op_movq</name><argument_list pos:start="645:28" pos:end="647:72">(<argument pos:start="645:29" pos:end="645:72"><expr pos:start="645:29" pos:end="645:72"><call pos:start="645:29" pos:end="645:72"><name pos:start="645:29" pos:end="645:36">offsetof</name><argument_list pos:start="645:37" pos:end="645:72">(<argument pos:start="645:38" pos:end="645:48"><expr pos:start="645:38" pos:end="645:48"><name pos:start="645:38" pos:end="645:48">CPUX86State</name></expr></argument>,<argument pos:start="645:50" pos:end="645:71"><expr pos:start="645:50" pos:end="645:71"><name pos:start="645:50" pos:end="645:62"><name pos:start="645:50" pos:end="645:57">xmm_regs</name><index pos:start="645:58" pos:end="645:62">[<expr pos:start="645:59" pos:end="645:61"><name pos:start="645:59" pos:end="645:61">reg</name></expr>]</index></name><operator pos:start="645:63" pos:end="645:63">.</operator><call pos:start="645:64" pos:end="645:71"><name pos:start="645:64" pos:end="645:68">XMM_Q</name><argument_list pos:start="645:69" pos:end="645:71">(<argument pos:start="645:70" pos:end="645:70"><expr pos:start="645:70" pos:end="645:70"><literal type="number" pos:start="645:70" pos:end="645:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="647:29" pos:end="647:71"><expr pos:start="647:29" pos:end="647:71"><call pos:start="647:29" pos:end="647:71"><name pos:start="647:29" pos:end="647:36">offsetof</name><argument_list pos:start="647:37" pos:end="647:71">(<argument pos:start="647:38" pos:end="647:48"><expr pos:start="647:38" pos:end="647:48"><name pos:start="647:38" pos:end="647:48">CPUX86State</name></expr></argument>,<argument pos:start="647:50" pos:end="647:70"><expr pos:start="647:50" pos:end="647:70"><name pos:start="647:50" pos:end="647:61"><name pos:start="647:50" pos:end="647:57">xmm_regs</name><index pos:start="647:58" pos:end="647:61">[<expr pos:start="647:59" pos:end="647:60"><name pos:start="647:59" pos:end="647:60">rm</name></expr>]</index></name><operator pos:start="647:62" pos:end="647:62">.</operator><call pos:start="647:63" pos:end="647:70"><name pos:start="647:63" pos:end="647:67">XMM_Q</name><argument_list pos:start="647:68" pos:end="647:70">(<argument pos:start="647:69" pos:end="647:69"><expr pos:start="647:69" pos:end="647:69"><literal type="number" pos:start="647:69" pos:end="647:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="651:13" pos:end="651:76"><expr pos:start="651:13" pos:end="651:75"><call pos:start="651:13" pos:end="651:75"><name pos:start="651:13" pos:end="651:29">gen_op_movq_env_0</name><argument_list pos:start="651:30" pos:end="651:75">(<argument pos:start="651:31" pos:end="651:74"><expr pos:start="651:31" pos:end="651:74"><call pos:start="651:31" pos:end="651:74"><name pos:start="651:31" pos:end="651:38">offsetof</name><argument_list pos:start="651:39" pos:end="651:74">(<argument pos:start="651:40" pos:end="651:50"><expr pos:start="651:40" pos:end="651:50"><name pos:start="651:40" pos:end="651:50">CPUX86State</name></expr></argument>,<argument pos:start="651:52" pos:end="651:73"><expr pos:start="651:52" pos:end="651:73"><name pos:start="651:52" pos:end="651:64"><name pos:start="651:52" pos:end="651:59">xmm_regs</name><index pos:start="651:60" pos:end="651:64">[<expr pos:start="651:61" pos:end="651:63"><name pos:start="651:61" pos:end="651:63">reg</name></expr>]</index></name><operator pos:start="651:65" pos:end="651:65">.</operator><call pos:start="651:66" pos:end="651:73"><name pos:start="651:66" pos:end="651:70">XMM_Q</name><argument_list pos:start="651:71" pos:end="651:73">(<argument pos:start="651:72" pos:end="651:72"><expr pos:start="651:72" pos:end="651:72"><literal type="number" pos:start="651:72" pos:end="651:72">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="653:13" pos:end="653:18">break;</break>

        <case pos:start="655:9" pos:end="655:18">case <expr pos:start="655:14" pos:end="655:17"><literal type="number" pos:start="655:14" pos:end="655:17">0x7f</literal></expr>:</case> <comment type="block" pos:start="655:20" pos:end="655:36">/* movq ea, mm */</comment>

            <if_stmt pos:start="657:13" pos:end="671:13"><if pos:start="657:13" pos:end="663:13">if <condition pos:start="657:16" pos:end="657:25">(<expr pos:start="657:17" pos:end="657:24"><name pos:start="657:17" pos:end="657:19">mod</name> <operator pos:start="657:21" pos:end="657:22">!=</operator> <literal type="number" pos:start="657:24" pos:end="657:24">3</literal></expr>)</condition> <block pos:start="657:27" pos:end="663:13">{<block_content pos:start="659:17" pos:end="661:74">

                <expr_stmt pos:start="659:17" pos:end="659:45"><expr pos:start="659:17" pos:end="659:44"><call pos:start="659:17" pos:end="659:44"><name pos:start="659:17" pos:end="659:29">gen_lea_modrm</name><argument_list pos:start="659:30" pos:end="659:44">(<argument pos:start="659:31" pos:end="659:33"><expr pos:start="659:31" pos:end="659:33"><name pos:start="659:31" pos:end="659:33">env</name></expr></argument>, <argument pos:start="659:36" pos:end="659:36"><expr pos:start="659:36" pos:end="659:36"><name pos:start="659:36" pos:end="659:36">s</name></expr></argument>, <argument pos:start="659:39" pos:end="659:43"><expr pos:start="659:39" pos:end="659:43"><name pos:start="659:39" pos:end="659:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="661:17" pos:end="661:74"><expr pos:start="661:17" pos:end="661:73"><call pos:start="661:17" pos:end="661:73"><name pos:start="661:17" pos:end="661:30">gen_stq_env_A0</name><argument_list pos:start="661:31" pos:end="661:73">(<argument pos:start="661:32" pos:end="661:32"><expr pos:start="661:32" pos:end="661:32"><name pos:start="661:32" pos:end="661:32">s</name></expr></argument>, <argument pos:start="661:35" pos:end="661:72"><expr pos:start="661:35" pos:end="661:72"><call pos:start="661:35" pos:end="661:72"><name pos:start="661:35" pos:end="661:42">offsetof</name><argument_list pos:start="661:43" pos:end="661:72">(<argument pos:start="661:44" pos:end="661:54"><expr pos:start="661:44" pos:end="661:54"><name pos:start="661:44" pos:end="661:54">CPUX86State</name></expr></argument>, <argument pos:start="661:57" pos:end="661:71"><expr pos:start="661:57" pos:end="661:71"><name pos:start="661:57" pos:end="661:67"><name pos:start="661:57" pos:end="661:62">fpregs</name><index pos:start="661:63" pos:end="661:67">[<expr pos:start="661:64" pos:end="661:66"><name pos:start="661:64" pos:end="661:66">reg</name></expr>]</index></name><operator pos:start="661:68" pos:end="661:68">.</operator><name pos:start="661:69" pos:end="661:71">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="663:15" pos:end="671:13">else <block pos:start="663:20" pos:end="671:13">{<block_content pos:start="665:17" pos:end="669:67">

                <expr_stmt pos:start="665:17" pos:end="665:33"><expr pos:start="665:17" pos:end="665:32"><name pos:start="665:17" pos:end="665:18">rm</name> <operator pos:start="665:20" pos:end="665:20">=</operator> <operator pos:start="665:22" pos:end="665:22">(</operator><name pos:start="665:23" pos:end="665:27">modrm</name> <operator pos:start="665:29" pos:end="665:29">&amp;</operator> <literal type="number" pos:start="665:31" pos:end="665:31">7</literal><operator pos:start="665:32" pos:end="665:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="667:17" pos:end="669:67"><expr pos:start="667:17" pos:end="669:66"><call pos:start="667:17" pos:end="669:66"><name pos:start="667:17" pos:end="667:27">gen_op_movq</name><argument_list pos:start="667:28" pos:end="669:66">(<argument pos:start="667:29" pos:end="667:64"><expr pos:start="667:29" pos:end="667:64"><call pos:start="667:29" pos:end="667:64"><name pos:start="667:29" pos:end="667:36">offsetof</name><argument_list pos:start="667:37" pos:end="667:64">(<argument pos:start="667:38" pos:end="667:48"><expr pos:start="667:38" pos:end="667:48"><name pos:start="667:38" pos:end="667:48">CPUX86State</name></expr></argument>,<argument pos:start="667:50" pos:end="667:63"><expr pos:start="667:50" pos:end="667:63"><name pos:start="667:50" pos:end="667:59"><name pos:start="667:50" pos:end="667:55">fpregs</name><index pos:start="667:56" pos:end="667:59">[<expr pos:start="667:57" pos:end="667:58"><name pos:start="667:57" pos:end="667:58">rm</name></expr>]</index></name><operator pos:start="667:60" pos:end="667:60">.</operator><name pos:start="667:61" pos:end="667:63">mmx</name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="669:29" pos:end="669:65"><expr pos:start="669:29" pos:end="669:65"><call pos:start="669:29" pos:end="669:65"><name pos:start="669:29" pos:end="669:36">offsetof</name><argument_list pos:start="669:37" pos:end="669:65">(<argument pos:start="669:38" pos:end="669:48"><expr pos:start="669:38" pos:end="669:48"><name pos:start="669:38" pos:end="669:48">CPUX86State</name></expr></argument>,<argument pos:start="669:50" pos:end="669:64"><expr pos:start="669:50" pos:end="669:64"><name pos:start="669:50" pos:end="669:60"><name pos:start="669:50" pos:end="669:55">fpregs</name><index pos:start="669:56" pos:end="669:60">[<expr pos:start="669:57" pos:end="669:59"><name pos:start="669:57" pos:end="669:59">reg</name></expr>]</index></name><operator pos:start="669:61" pos:end="669:61">.</operator><name pos:start="669:62" pos:end="669:64">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="673:13" pos:end="673:18">break;</break>

        <case pos:start="675:9" pos:end="675:19">case <expr pos:start="675:14" pos:end="675:18"><literal type="number" pos:start="675:14" pos:end="675:18">0x011</literal></expr>:</case> <comment type="block" pos:start="675:21" pos:end="675:32">/* movups */</comment>

        <case pos:start="677:9" pos:end="677:19">case <expr pos:start="677:14" pos:end="677:18"><literal type="number" pos:start="677:14" pos:end="677:18">0x111</literal></expr>:</case> <comment type="block" pos:start="677:21" pos:end="677:32">/* movupd */</comment>

        <case pos:start="679:9" pos:end="679:19">case <expr pos:start="679:14" pos:end="679:18"><literal type="number" pos:start="679:14" pos:end="679:18">0x029</literal></expr>:</case> <comment type="block" pos:start="679:21" pos:end="679:32">/* movaps */</comment>

        <case pos:start="681:9" pos:end="681:19">case <expr pos:start="681:14" pos:end="681:18"><literal type="number" pos:start="681:14" pos:end="681:18">0x129</literal></expr>:</case> <comment type="block" pos:start="681:21" pos:end="681:32">/* movapd */</comment>

        <case pos:start="683:9" pos:end="683:19">case <expr pos:start="683:14" pos:end="683:18"><literal type="number" pos:start="683:14" pos:end="683:18">0x17f</literal></expr>:</case> <comment type="block" pos:start="683:21" pos:end="683:40">/* movdqa ea, xmm */</comment>

        <case pos:start="685:9" pos:end="685:19">case <expr pos:start="685:14" pos:end="685:18"><literal type="number" pos:start="685:14" pos:end="685:18">0x27f</literal></expr>:</case> <comment type="block" pos:start="685:21" pos:end="685:40">/* movdqu ea, xmm */</comment>

            <if_stmt pos:start="687:13" pos:end="701:13"><if pos:start="687:13" pos:end="693:13">if <condition pos:start="687:16" pos:end="687:25">(<expr pos:start="687:17" pos:end="687:24"><name pos:start="687:17" pos:end="687:19">mod</name> <operator pos:start="687:21" pos:end="687:22">!=</operator> <literal type="number" pos:start="687:24" pos:end="687:24">3</literal></expr>)</condition> <block pos:start="687:27" pos:end="693:13">{<block_content pos:start="689:17" pos:end="691:72">

                <expr_stmt pos:start="689:17" pos:end="689:45"><expr pos:start="689:17" pos:end="689:44"><call pos:start="689:17" pos:end="689:44"><name pos:start="689:17" pos:end="689:29">gen_lea_modrm</name><argument_list pos:start="689:30" pos:end="689:44">(<argument pos:start="689:31" pos:end="689:33"><expr pos:start="689:31" pos:end="689:33"><name pos:start="689:31" pos:end="689:33">env</name></expr></argument>, <argument pos:start="689:36" pos:end="689:36"><expr pos:start="689:36" pos:end="689:36"><name pos:start="689:36" pos:end="689:36">s</name></expr></argument>, <argument pos:start="689:39" pos:end="689:43"><expr pos:start="689:39" pos:end="689:43"><name pos:start="689:39" pos:end="689:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="691:17" pos:end="691:72"><expr pos:start="691:17" pos:end="691:71"><call pos:start="691:17" pos:end="691:71"><name pos:start="691:17" pos:end="691:30">gen_sto_env_A0</name><argument_list pos:start="691:31" pos:end="691:71">(<argument pos:start="691:32" pos:end="691:32"><expr pos:start="691:32" pos:end="691:32"><name pos:start="691:32" pos:end="691:32">s</name></expr></argument>, <argument pos:start="691:35" pos:end="691:70"><expr pos:start="691:35" pos:end="691:70"><call pos:start="691:35" pos:end="691:70"><name pos:start="691:35" pos:end="691:42">offsetof</name><argument_list pos:start="691:43" pos:end="691:70">(<argument pos:start="691:44" pos:end="691:54"><expr pos:start="691:44" pos:end="691:54"><name pos:start="691:44" pos:end="691:54">CPUX86State</name></expr></argument>, <argument pos:start="691:57" pos:end="691:69"><expr pos:start="691:57" pos:end="691:69"><name pos:start="691:57" pos:end="691:69"><name pos:start="691:57" pos:end="691:64">xmm_regs</name><index pos:start="691:65" pos:end="691:69">[<expr pos:start="691:66" pos:end="691:68"><name pos:start="691:66" pos:end="691:68">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="693:15" pos:end="701:13">else <block pos:start="693:20" pos:end="701:13">{<block_content pos:start="695:17" pos:end="699:65">

                <expr_stmt pos:start="695:17" pos:end="695:44"><expr pos:start="695:17" pos:end="695:43"><name pos:start="695:17" pos:end="695:18">rm</name> <operator pos:start="695:20" pos:end="695:20">=</operator> <operator pos:start="695:22" pos:end="695:22">(</operator><name pos:start="695:23" pos:end="695:27">modrm</name> <operator pos:start="695:29" pos:end="695:29">&amp;</operator> <literal type="number" pos:start="695:31" pos:end="695:31">7</literal><operator pos:start="695:32" pos:end="695:32">)</operator> <operator pos:start="695:34" pos:end="695:34">|</operator> <call pos:start="695:36" pos:end="695:43"><name pos:start="695:36" pos:end="695:40">REX_B</name><argument_list pos:start="695:41" pos:end="695:43">(<argument pos:start="695:42" pos:end="695:42"><expr pos:start="695:42" pos:end="695:42"><name pos:start="695:42" pos:end="695:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="697:17" pos:end="699:65"><expr pos:start="697:17" pos:end="699:64"><call pos:start="697:17" pos:end="699:64"><name pos:start="697:17" pos:end="697:27">gen_op_movo</name><argument_list pos:start="697:28" pos:end="699:64">(<argument pos:start="697:29" pos:end="697:62"><expr pos:start="697:29" pos:end="697:62"><call pos:start="697:29" pos:end="697:62"><name pos:start="697:29" pos:end="697:36">offsetof</name><argument_list pos:start="697:37" pos:end="697:62">(<argument pos:start="697:38" pos:end="697:48"><expr pos:start="697:38" pos:end="697:48"><name pos:start="697:38" pos:end="697:48">CPUX86State</name></expr></argument>,<argument pos:start="697:50" pos:end="697:61"><expr pos:start="697:50" pos:end="697:61"><name pos:start="697:50" pos:end="697:61"><name pos:start="697:50" pos:end="697:57">xmm_regs</name><index pos:start="697:58" pos:end="697:61">[<expr pos:start="697:59" pos:end="697:60"><name pos:start="697:59" pos:end="697:60">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="699:29" pos:end="699:63"><expr pos:start="699:29" pos:end="699:63"><call pos:start="699:29" pos:end="699:63"><name pos:start="699:29" pos:end="699:36">offsetof</name><argument_list pos:start="699:37" pos:end="699:63">(<argument pos:start="699:38" pos:end="699:48"><expr pos:start="699:38" pos:end="699:48"><name pos:start="699:38" pos:end="699:48">CPUX86State</name></expr></argument>,<argument pos:start="699:50" pos:end="699:62"><expr pos:start="699:50" pos:end="699:62"><name pos:start="699:50" pos:end="699:62"><name pos:start="699:50" pos:end="699:57">xmm_regs</name><index pos:start="699:58" pos:end="699:62">[<expr pos:start="699:59" pos:end="699:61"><name pos:start="699:59" pos:end="699:61">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="703:13" pos:end="703:18">break;</break>

        <case pos:start="705:9" pos:end="705:19">case <expr pos:start="705:14" pos:end="705:18"><literal type="number" pos:start="705:14" pos:end="705:18">0x211</literal></expr>:</case> <comment type="block" pos:start="705:21" pos:end="705:39">/* movss ea, xmm */</comment>

            <if_stmt pos:start="707:13" pos:end="723:13"><if pos:start="707:13" pos:end="715:13">if <condition pos:start="707:16" pos:end="707:25">(<expr pos:start="707:17" pos:end="707:24"><name pos:start="707:17" pos:end="707:19">mod</name> <operator pos:start="707:21" pos:end="707:22">!=</operator> <literal type="number" pos:start="707:24" pos:end="707:24">3</literal></expr>)</condition> <block pos:start="707:27" pos:end="715:13">{<block_content pos:start="709:17" pos:end="713:56">

                <expr_stmt pos:start="709:17" pos:end="709:45"><expr pos:start="709:17" pos:end="709:44"><call pos:start="709:17" pos:end="709:44"><name pos:start="709:17" pos:end="709:29">gen_lea_modrm</name><argument_list pos:start="709:30" pos:end="709:44">(<argument pos:start="709:31" pos:end="709:33"><expr pos:start="709:31" pos:end="709:33"><name pos:start="709:31" pos:end="709:33">env</name></expr></argument>, <argument pos:start="709:36" pos:end="709:36"><expr pos:start="709:36" pos:end="709:36"><name pos:start="709:36" pos:end="709:36">s</name></expr></argument>, <argument pos:start="709:39" pos:end="709:43"><expr pos:start="709:39" pos:end="709:43"><name pos:start="709:39" pos:end="709:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="711:17" pos:end="711:98"><expr pos:start="711:17" pos:end="711:97"><call pos:start="711:17" pos:end="711:97"><name pos:start="711:17" pos:end="711:32">tcg_gen_ld32u_tl</name><argument_list pos:start="711:33" pos:end="711:97">(<argument pos:start="711:34" pos:end="711:41"><expr pos:start="711:34" pos:end="711:41"><name pos:start="711:34" pos:end="711:41"><name pos:start="711:34" pos:end="711:38">cpu_T</name><index pos:start="711:39" pos:end="711:41">[<expr pos:start="711:40" pos:end="711:40"><literal type="number" pos:start="711:40" pos:end="711:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="711:44" pos:end="711:50"><expr pos:start="711:44" pos:end="711:50"><name pos:start="711:44" pos:end="711:50">cpu_env</name></expr></argument>, <argument pos:start="711:53" pos:end="711:96"><expr pos:start="711:53" pos:end="711:96"><call pos:start="711:53" pos:end="711:96"><name pos:start="711:53" pos:end="711:60">offsetof</name><argument_list pos:start="711:61" pos:end="711:96">(<argument pos:start="711:62" pos:end="711:72"><expr pos:start="711:62" pos:end="711:72"><name pos:start="711:62" pos:end="711:72">CPUX86State</name></expr></argument>,<argument pos:start="711:74" pos:end="711:95"><expr pos:start="711:74" pos:end="711:95"><name pos:start="711:74" pos:end="711:86"><name pos:start="711:74" pos:end="711:81">xmm_regs</name><index pos:start="711:82" pos:end="711:86">[<expr pos:start="711:83" pos:end="711:85"><name pos:start="711:83" pos:end="711:85">reg</name></expr>]</index></name><operator pos:start="711:87" pos:end="711:87">.</operator><call pos:start="711:88" pos:end="711:95"><name pos:start="711:88" pos:end="711:92">XMM_L</name><argument_list pos:start="711:93" pos:end="711:95">(<argument pos:start="711:94" pos:end="711:94"><expr pos:start="711:94" pos:end="711:94"><literal type="number" pos:start="711:94" pos:end="711:94">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="713:17" pos:end="713:56"><expr pos:start="713:17" pos:end="713:55"><call pos:start="713:17" pos:end="713:55"><name pos:start="713:17" pos:end="713:27">gen_op_st_v</name><argument_list pos:start="713:28" pos:end="713:55">(<argument pos:start="713:29" pos:end="713:29"><expr pos:start="713:29" pos:end="713:29"><name pos:start="713:29" pos:end="713:29">s</name></expr></argument>, <argument pos:start="713:32" pos:end="713:36"><expr pos:start="713:32" pos:end="713:36"><name pos:start="713:32" pos:end="713:36">MO_32</name></expr></argument>, <argument pos:start="713:39" pos:end="713:46"><expr pos:start="713:39" pos:end="713:46"><name pos:start="713:39" pos:end="713:46"><name pos:start="713:39" pos:end="713:43">cpu_T</name><index pos:start="713:44" pos:end="713:46">[<expr pos:start="713:45" pos:end="713:45"><literal type="number" pos:start="713:45" pos:end="713:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="713:49" pos:end="713:54"><expr pos:start="713:49" pos:end="713:54"><name pos:start="713:49" pos:end="713:54">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="715:15" pos:end="723:13">else <block pos:start="715:20" pos:end="723:13">{<block_content pos:start="717:17" pos:end="721:74">

                <expr_stmt pos:start="717:17" pos:end="717:44"><expr pos:start="717:17" pos:end="717:43"><name pos:start="717:17" pos:end="717:18">rm</name> <operator pos:start="717:20" pos:end="717:20">=</operator> <operator pos:start="717:22" pos:end="717:22">(</operator><name pos:start="717:23" pos:end="717:27">modrm</name> <operator pos:start="717:29" pos:end="717:29">&amp;</operator> <literal type="number" pos:start="717:31" pos:end="717:31">7</literal><operator pos:start="717:32" pos:end="717:32">)</operator> <operator pos:start="717:34" pos:end="717:34">|</operator> <call pos:start="717:36" pos:end="717:43"><name pos:start="717:36" pos:end="717:40">REX_B</name><argument_list pos:start="717:41" pos:end="717:43">(<argument pos:start="717:42" pos:end="717:42"><expr pos:start="717:42" pos:end="717:42"><name pos:start="717:42" pos:end="717:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="719:17" pos:end="721:74"><expr pos:start="719:17" pos:end="721:73"><call pos:start="719:17" pos:end="721:73"><name pos:start="719:17" pos:end="719:27">gen_op_movl</name><argument_list pos:start="719:28" pos:end="721:73">(<argument pos:start="719:29" pos:end="719:71"><expr pos:start="719:29" pos:end="719:71"><call pos:start="719:29" pos:end="719:71"><name pos:start="719:29" pos:end="719:36">offsetof</name><argument_list pos:start="719:37" pos:end="719:71">(<argument pos:start="719:38" pos:end="719:48"><expr pos:start="719:38" pos:end="719:48"><name pos:start="719:38" pos:end="719:48">CPUX86State</name></expr></argument>,<argument pos:start="719:50" pos:end="719:70"><expr pos:start="719:50" pos:end="719:70"><name pos:start="719:50" pos:end="719:61"><name pos:start="719:50" pos:end="719:57">xmm_regs</name><index pos:start="719:58" pos:end="719:61">[<expr pos:start="719:59" pos:end="719:60"><name pos:start="719:59" pos:end="719:60">rm</name></expr>]</index></name><operator pos:start="719:62" pos:end="719:62">.</operator><call pos:start="719:63" pos:end="719:70"><name pos:start="719:63" pos:end="719:67">XMM_L</name><argument_list pos:start="719:68" pos:end="719:70">(<argument pos:start="719:69" pos:end="719:69"><expr pos:start="719:69" pos:end="719:69"><literal type="number" pos:start="719:69" pos:end="719:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="721:29" pos:end="721:72"><expr pos:start="721:29" pos:end="721:72"><call pos:start="721:29" pos:end="721:72"><name pos:start="721:29" pos:end="721:36">offsetof</name><argument_list pos:start="721:37" pos:end="721:72">(<argument pos:start="721:38" pos:end="721:48"><expr pos:start="721:38" pos:end="721:48"><name pos:start="721:38" pos:end="721:48">CPUX86State</name></expr></argument>,<argument pos:start="721:50" pos:end="721:71"><expr pos:start="721:50" pos:end="721:71"><name pos:start="721:50" pos:end="721:62"><name pos:start="721:50" pos:end="721:57">xmm_regs</name><index pos:start="721:58" pos:end="721:62">[<expr pos:start="721:59" pos:end="721:61"><name pos:start="721:59" pos:end="721:61">reg</name></expr>]</index></name><operator pos:start="721:63" pos:end="721:63">.</operator><call pos:start="721:64" pos:end="721:71"><name pos:start="721:64" pos:end="721:68">XMM_L</name><argument_list pos:start="721:69" pos:end="721:71">(<argument pos:start="721:70" pos:end="721:70"><expr pos:start="721:70" pos:end="721:70"><literal type="number" pos:start="721:70" pos:end="721:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="725:13" pos:end="725:18">break;</break>

        <case pos:start="727:9" pos:end="727:19">case <expr pos:start="727:14" pos:end="727:18"><literal type="number" pos:start="727:14" pos:end="727:18">0x311</literal></expr>:</case> <comment type="block" pos:start="727:21" pos:end="727:39">/* movsd ea, xmm */</comment>

            <if_stmt pos:start="729:13" pos:end="745:13"><if pos:start="729:13" pos:end="737:13">if <condition pos:start="729:16" pos:end="729:25">(<expr pos:start="729:17" pos:end="729:24"><name pos:start="729:17" pos:end="729:19">mod</name> <operator pos:start="729:21" pos:end="729:22">!=</operator> <literal type="number" pos:start="729:24" pos:end="729:24">3</literal></expr>)</condition> <block pos:start="729:27" pos:end="737:13">{<block_content pos:start="731:17" pos:end="735:68">

                <expr_stmt pos:start="731:17" pos:end="731:45"><expr pos:start="731:17" pos:end="731:44"><call pos:start="731:17" pos:end="731:44"><name pos:start="731:17" pos:end="731:29">gen_lea_modrm</name><argument_list pos:start="731:30" pos:end="731:44">(<argument pos:start="731:31" pos:end="731:33"><expr pos:start="731:31" pos:end="731:33"><name pos:start="731:31" pos:end="731:33">env</name></expr></argument>, <argument pos:start="731:36" pos:end="731:36"><expr pos:start="731:36" pos:end="731:36"><name pos:start="731:36" pos:end="731:36">s</name></expr></argument>, <argument pos:start="731:39" pos:end="731:43"><expr pos:start="731:39" pos:end="731:43"><name pos:start="731:39" pos:end="731:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="733:17" pos:end="735:68"><expr pos:start="733:17" pos:end="735:67"><call pos:start="733:17" pos:end="735:67"><name pos:start="733:17" pos:end="733:30">gen_stq_env_A0</name><argument_list pos:start="733:31" pos:end="735:67">(<argument pos:start="733:32" pos:end="733:32"><expr pos:start="733:32" pos:end="733:32"><name pos:start="733:32" pos:end="733:32">s</name></expr></argument>, <argument pos:start="733:35" pos:end="735:66"><expr pos:start="733:35" pos:end="735:66"><call pos:start="733:35" pos:end="735:66"><name pos:start="733:35" pos:end="733:42">offsetof</name><argument_list pos:start="733:43" pos:end="735:66">(<argument pos:start="733:44" pos:end="733:54"><expr pos:start="733:44" pos:end="733:54"><name pos:start="733:44" pos:end="733:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="735:44" pos:end="735:65"><expr pos:start="735:44" pos:end="735:65"><name pos:start="735:44" pos:end="735:56"><name pos:start="735:44" pos:end="735:51">xmm_regs</name><index pos:start="735:52" pos:end="735:56">[<expr pos:start="735:53" pos:end="735:55"><name pos:start="735:53" pos:end="735:55">reg</name></expr>]</index></name><operator pos:start="735:57" pos:end="735:57">.</operator><call pos:start="735:58" pos:end="735:65"><name pos:start="735:58" pos:end="735:62">XMM_Q</name><argument_list pos:start="735:63" pos:end="735:65">(<argument pos:start="735:64" pos:end="735:64"><expr pos:start="735:64" pos:end="735:64"><literal type="number" pos:start="735:64" pos:end="735:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="737:15" pos:end="745:13">else <block pos:start="737:20" pos:end="745:13">{<block_content pos:start="739:17" pos:end="743:74">

                <expr_stmt pos:start="739:17" pos:end="739:44"><expr pos:start="739:17" pos:end="739:43"><name pos:start="739:17" pos:end="739:18">rm</name> <operator pos:start="739:20" pos:end="739:20">=</operator> <operator pos:start="739:22" pos:end="739:22">(</operator><name pos:start="739:23" pos:end="739:27">modrm</name> <operator pos:start="739:29" pos:end="739:29">&amp;</operator> <literal type="number" pos:start="739:31" pos:end="739:31">7</literal><operator pos:start="739:32" pos:end="739:32">)</operator> <operator pos:start="739:34" pos:end="739:34">|</operator> <call pos:start="739:36" pos:end="739:43"><name pos:start="739:36" pos:end="739:40">REX_B</name><argument_list pos:start="739:41" pos:end="739:43">(<argument pos:start="739:42" pos:end="739:42"><expr pos:start="739:42" pos:end="739:42"><name pos:start="739:42" pos:end="739:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="741:17" pos:end="743:74"><expr pos:start="741:17" pos:end="743:73"><call pos:start="741:17" pos:end="743:73"><name pos:start="741:17" pos:end="741:27">gen_op_movq</name><argument_list pos:start="741:28" pos:end="743:73">(<argument pos:start="741:29" pos:end="741:71"><expr pos:start="741:29" pos:end="741:71"><call pos:start="741:29" pos:end="741:71"><name pos:start="741:29" pos:end="741:36">offsetof</name><argument_list pos:start="741:37" pos:end="741:71">(<argument pos:start="741:38" pos:end="741:48"><expr pos:start="741:38" pos:end="741:48"><name pos:start="741:38" pos:end="741:48">CPUX86State</name></expr></argument>,<argument pos:start="741:50" pos:end="741:70"><expr pos:start="741:50" pos:end="741:70"><name pos:start="741:50" pos:end="741:61"><name pos:start="741:50" pos:end="741:57">xmm_regs</name><index pos:start="741:58" pos:end="741:61">[<expr pos:start="741:59" pos:end="741:60"><name pos:start="741:59" pos:end="741:60">rm</name></expr>]</index></name><operator pos:start="741:62" pos:end="741:62">.</operator><call pos:start="741:63" pos:end="741:70"><name pos:start="741:63" pos:end="741:67">XMM_Q</name><argument_list pos:start="741:68" pos:end="741:70">(<argument pos:start="741:69" pos:end="741:69"><expr pos:start="741:69" pos:end="741:69"><literal type="number" pos:start="741:69" pos:end="741:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="743:29" pos:end="743:72"><expr pos:start="743:29" pos:end="743:72"><call pos:start="743:29" pos:end="743:72"><name pos:start="743:29" pos:end="743:36">offsetof</name><argument_list pos:start="743:37" pos:end="743:72">(<argument pos:start="743:38" pos:end="743:48"><expr pos:start="743:38" pos:end="743:48"><name pos:start="743:38" pos:end="743:48">CPUX86State</name></expr></argument>,<argument pos:start="743:50" pos:end="743:71"><expr pos:start="743:50" pos:end="743:71"><name pos:start="743:50" pos:end="743:62"><name pos:start="743:50" pos:end="743:57">xmm_regs</name><index pos:start="743:58" pos:end="743:62">[<expr pos:start="743:59" pos:end="743:61"><name pos:start="743:59" pos:end="743:61">reg</name></expr>]</index></name><operator pos:start="743:63" pos:end="743:63">.</operator><call pos:start="743:64" pos:end="743:71"><name pos:start="743:64" pos:end="743:68">XMM_Q</name><argument_list pos:start="743:69" pos:end="743:71">(<argument pos:start="743:70" pos:end="743:70"><expr pos:start="743:70" pos:end="743:70"><literal type="number" pos:start="743:70" pos:end="743:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="747:13" pos:end="747:18">break;</break>

        <case pos:start="749:9" pos:end="749:19">case <expr pos:start="749:14" pos:end="749:18"><literal type="number" pos:start="749:14" pos:end="749:18">0x013</literal></expr>:</case> <comment type="block" pos:start="749:21" pos:end="749:32">/* movlps */</comment>

        <case pos:start="751:9" pos:end="751:19">case <expr pos:start="751:14" pos:end="751:18"><literal type="number" pos:start="751:14" pos:end="751:18">0x113</literal></expr>:</case> <comment type="block" pos:start="751:21" pos:end="751:32">/* movlpd */</comment>

            <if_stmt pos:start="753:13" pos:end="765:13"><if pos:start="753:13" pos:end="761:13">if <condition pos:start="753:16" pos:end="753:25">(<expr pos:start="753:17" pos:end="753:24"><name pos:start="753:17" pos:end="753:19">mod</name> <operator pos:start="753:21" pos:end="753:22">!=</operator> <literal type="number" pos:start="753:24" pos:end="753:24">3</literal></expr>)</condition> <block pos:start="753:27" pos:end="761:13">{<block_content pos:start="755:17" pos:end="759:68">

                <expr_stmt pos:start="755:17" pos:end="755:45"><expr pos:start="755:17" pos:end="755:44"><call pos:start="755:17" pos:end="755:44"><name pos:start="755:17" pos:end="755:29">gen_lea_modrm</name><argument_list pos:start="755:30" pos:end="755:44">(<argument pos:start="755:31" pos:end="755:33"><expr pos:start="755:31" pos:end="755:33"><name pos:start="755:31" pos:end="755:33">env</name></expr></argument>, <argument pos:start="755:36" pos:end="755:36"><expr pos:start="755:36" pos:end="755:36"><name pos:start="755:36" pos:end="755:36">s</name></expr></argument>, <argument pos:start="755:39" pos:end="755:43"><expr pos:start="755:39" pos:end="755:43"><name pos:start="755:39" pos:end="755:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="757:17" pos:end="759:68"><expr pos:start="757:17" pos:end="759:67"><call pos:start="757:17" pos:end="759:67"><name pos:start="757:17" pos:end="757:30">gen_stq_env_A0</name><argument_list pos:start="757:31" pos:end="759:67">(<argument pos:start="757:32" pos:end="757:32"><expr pos:start="757:32" pos:end="757:32"><name pos:start="757:32" pos:end="757:32">s</name></expr></argument>, <argument pos:start="757:35" pos:end="759:66"><expr pos:start="757:35" pos:end="759:66"><call pos:start="757:35" pos:end="759:66"><name pos:start="757:35" pos:end="757:42">offsetof</name><argument_list pos:start="757:43" pos:end="759:66">(<argument pos:start="757:44" pos:end="757:54"><expr pos:start="757:44" pos:end="757:54"><name pos:start="757:44" pos:end="757:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="759:44" pos:end="759:65"><expr pos:start="759:44" pos:end="759:65"><name pos:start="759:44" pos:end="759:56"><name pos:start="759:44" pos:end="759:51">xmm_regs</name><index pos:start="759:52" pos:end="759:56">[<expr pos:start="759:53" pos:end="759:55"><name pos:start="759:53" pos:end="759:55">reg</name></expr>]</index></name><operator pos:start="759:57" pos:end="759:57">.</operator><call pos:start="759:58" pos:end="759:65"><name pos:start="759:58" pos:end="759:62">XMM_Q</name><argument_list pos:start="759:63" pos:end="759:65">(<argument pos:start="759:64" pos:end="759:64"><expr pos:start="759:64" pos:end="759:64"><literal type="number" pos:start="759:64" pos:end="759:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="761:15" pos:end="765:13">else <block pos:start="761:20" pos:end="765:13">{<block_content pos:start="763:17" pos:end="763:32">

                <goto pos:start="763:17" pos:end="763:32">goto <name pos:start="763:22" pos:end="763:31">illegal_op</name>;</goto>

            </block_content>}</block></else></if_stmt>

            <break pos:start="767:13" pos:end="767:18">break;</break>

        <case pos:start="769:9" pos:end="769:19">case <expr pos:start="769:14" pos:end="769:18"><literal type="number" pos:start="769:14" pos:end="769:18">0x017</literal></expr>:</case> <comment type="block" pos:start="769:21" pos:end="769:32">/* movhps */</comment>

        <case pos:start="771:9" pos:end="771:19">case <expr pos:start="771:14" pos:end="771:18"><literal type="number" pos:start="771:14" pos:end="771:18">0x117</literal></expr>:</case> <comment type="block" pos:start="771:21" pos:end="771:32">/* movhpd */</comment>

            <if_stmt pos:start="773:13" pos:end="785:13"><if pos:start="773:13" pos:end="781:13">if <condition pos:start="773:16" pos:end="773:25">(<expr pos:start="773:17" pos:end="773:24"><name pos:start="773:17" pos:end="773:19">mod</name> <operator pos:start="773:21" pos:end="773:22">!=</operator> <literal type="number" pos:start="773:24" pos:end="773:24">3</literal></expr>)</condition> <block pos:start="773:27" pos:end="781:13">{<block_content pos:start="775:17" pos:end="779:68">

                <expr_stmt pos:start="775:17" pos:end="775:45"><expr pos:start="775:17" pos:end="775:44"><call pos:start="775:17" pos:end="775:44"><name pos:start="775:17" pos:end="775:29">gen_lea_modrm</name><argument_list pos:start="775:30" pos:end="775:44">(<argument pos:start="775:31" pos:end="775:33"><expr pos:start="775:31" pos:end="775:33"><name pos:start="775:31" pos:end="775:33">env</name></expr></argument>, <argument pos:start="775:36" pos:end="775:36"><expr pos:start="775:36" pos:end="775:36"><name pos:start="775:36" pos:end="775:36">s</name></expr></argument>, <argument pos:start="775:39" pos:end="775:43"><expr pos:start="775:39" pos:end="775:43"><name pos:start="775:39" pos:end="775:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="777:17" pos:end="779:68"><expr pos:start="777:17" pos:end="779:67"><call pos:start="777:17" pos:end="779:67"><name pos:start="777:17" pos:end="777:30">gen_stq_env_A0</name><argument_list pos:start="777:31" pos:end="779:67">(<argument pos:start="777:32" pos:end="777:32"><expr pos:start="777:32" pos:end="777:32"><name pos:start="777:32" pos:end="777:32">s</name></expr></argument>, <argument pos:start="777:35" pos:end="779:66"><expr pos:start="777:35" pos:end="779:66"><call pos:start="777:35" pos:end="779:66"><name pos:start="777:35" pos:end="777:42">offsetof</name><argument_list pos:start="777:43" pos:end="779:66">(<argument pos:start="777:44" pos:end="777:54"><expr pos:start="777:44" pos:end="777:54"><name pos:start="777:44" pos:end="777:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="779:44" pos:end="779:65"><expr pos:start="779:44" pos:end="779:65"><name pos:start="779:44" pos:end="779:56"><name pos:start="779:44" pos:end="779:51">xmm_regs</name><index pos:start="779:52" pos:end="779:56">[<expr pos:start="779:53" pos:end="779:55"><name pos:start="779:53" pos:end="779:55">reg</name></expr>]</index></name><operator pos:start="779:57" pos:end="779:57">.</operator><call pos:start="779:58" pos:end="779:65"><name pos:start="779:58" pos:end="779:62">XMM_Q</name><argument_list pos:start="779:63" pos:end="779:65">(<argument pos:start="779:64" pos:end="779:64"><expr pos:start="779:64" pos:end="779:64"><literal type="number" pos:start="779:64" pos:end="779:64">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="781:15" pos:end="785:13">else <block pos:start="781:20" pos:end="785:13">{<block_content pos:start="783:17" pos:end="783:32">

                <goto pos:start="783:17" pos:end="783:32">goto <name pos:start="783:22" pos:end="783:31">illegal_op</name>;</goto>

            </block_content>}</block></else></if_stmt>

            <break pos:start="787:13" pos:end="787:18">break;</break>

        <case pos:start="789:9" pos:end="789:18">case <expr pos:start="789:14" pos:end="789:17"><literal type="number" pos:start="789:14" pos:end="789:17">0x71</literal></expr>:</case> <comment type="block" pos:start="789:20" pos:end="789:37">/* shift mm, im */</comment>

        <case pos:start="791:9" pos:end="791:18">case <expr pos:start="791:14" pos:end="791:17"><literal type="number" pos:start="791:14" pos:end="791:17">0x72</literal></expr>:</case>

        <case pos:start="793:9" pos:end="793:18">case <expr pos:start="793:14" pos:end="793:17"><literal type="number" pos:start="793:14" pos:end="793:17">0x73</literal></expr>:</case>

        <case pos:start="795:9" pos:end="795:19">case <expr pos:start="795:14" pos:end="795:18"><literal type="number" pos:start="795:14" pos:end="795:18">0x171</literal></expr>:</case> <comment type="block" pos:start="795:21" pos:end="795:39">/* shift xmm, im */</comment>

        <case pos:start="797:9" pos:end="797:19">case <expr pos:start="797:14" pos:end="797:18"><literal type="number" pos:start="797:14" pos:end="797:18">0x172</literal></expr>:</case>

        <case pos:start="799:9" pos:end="799:19">case <expr pos:start="799:14" pos:end="799:18"><literal type="number" pos:start="799:14" pos:end="799:18">0x173</literal></expr>:</case>

            <if_stmt pos:start="801:13" pos:end="805:13"><if pos:start="801:13" pos:end="805:13">if <condition pos:start="801:16" pos:end="801:24">(<expr pos:start="801:17" pos:end="801:23"><name pos:start="801:17" pos:end="801:18">b1</name> <operator pos:start="801:20" pos:end="801:21">&gt;=</operator> <literal type="number" pos:start="801:23" pos:end="801:23">2</literal></expr>)</condition> <block pos:start="801:26" pos:end="805:13">{<block_content pos:start="803:17" pos:end="803:32">

	        <goto pos:start="803:17" pos:end="803:32">goto <name pos:start="803:22" pos:end="803:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="807:13" pos:end="807:46"><expr pos:start="807:13" pos:end="807:45"><name pos:start="807:13" pos:end="807:15">val</name> <operator pos:start="807:17" pos:end="807:17">=</operator> <call pos:start="807:19" pos:end="807:45"><name pos:start="807:19" pos:end="807:31">cpu_ldub_code</name><argument_list pos:start="807:32" pos:end="807:45">(<argument pos:start="807:33" pos:end="807:35"><expr pos:start="807:33" pos:end="807:35"><name pos:start="807:33" pos:end="807:35">env</name></expr></argument>, <argument pos:start="807:38" pos:end="807:44"><expr pos:start="807:38" pos:end="807:44"><name pos:start="807:38" pos:end="807:42"><name pos:start="807:38" pos:end="807:38">s</name><operator pos:start="807:39" pos:end="807:40">-&gt;</operator><name pos:start="807:41" pos:end="807:42">pc</name></name><operator pos:start="807:43" pos:end="807:44">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="809:13" pos:end="833:13"><if pos:start="809:13" pos:end="821:13">if <condition pos:start="809:16" pos:end="809:23">(<expr pos:start="809:17" pos:end="809:22"><name pos:start="809:17" pos:end="809:22">is_xmm</name></expr>)</condition> <block pos:start="809:25" pos:end="821:13">{<block_content pos:start="811:17" pos:end="819:58">

                <expr_stmt pos:start="811:17" pos:end="811:47"><expr pos:start="811:17" pos:end="811:46"><call pos:start="811:17" pos:end="811:46"><name pos:start="811:17" pos:end="811:31">tcg_gen_movi_tl</name><argument_list pos:start="811:32" pos:end="811:46">(<argument pos:start="811:33" pos:end="811:40"><expr pos:start="811:33" pos:end="811:40"><name pos:start="811:33" pos:end="811:40"><name pos:start="811:33" pos:end="811:37">cpu_T</name><index pos:start="811:38" pos:end="811:40">[<expr pos:start="811:39" pos:end="811:39"><literal type="number" pos:start="811:39" pos:end="811:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="811:43" pos:end="811:45"><expr pos:start="811:43" pos:end="811:45"><name pos:start="811:43" pos:end="811:45">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="813:17" pos:end="813:90"><expr pos:start="813:17" pos:end="813:89"><call pos:start="813:17" pos:end="813:89"><name pos:start="813:17" pos:end="813:31">tcg_gen_st32_tl</name><argument_list pos:start="813:32" pos:end="813:89">(<argument pos:start="813:33" pos:end="813:40"><expr pos:start="813:33" pos:end="813:40"><name pos:start="813:33" pos:end="813:40"><name pos:start="813:33" pos:end="813:37">cpu_T</name><index pos:start="813:38" pos:end="813:40">[<expr pos:start="813:39" pos:end="813:39"><literal type="number" pos:start="813:39" pos:end="813:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="813:43" pos:end="813:49"><expr pos:start="813:43" pos:end="813:49"><name pos:start="813:43" pos:end="813:49">cpu_env</name></expr></argument>, <argument pos:start="813:52" pos:end="813:88"><expr pos:start="813:52" pos:end="813:88"><call pos:start="813:52" pos:end="813:88"><name pos:start="813:52" pos:end="813:59">offsetof</name><argument_list pos:start="813:60" pos:end="813:88">(<argument pos:start="813:61" pos:end="813:71"><expr pos:start="813:61" pos:end="813:71"><name pos:start="813:61" pos:end="813:71">CPUX86State</name></expr></argument>,<argument pos:start="813:73" pos:end="813:87"><expr pos:start="813:73" pos:end="813:87"><call pos:start="813:73" pos:end="813:87"><name pos:start="813:73" pos:end="813:84"><name pos:start="813:73" pos:end="813:78">xmm_t0</name><operator pos:start="813:79" pos:end="813:79">.</operator><name pos:start="813:80" pos:end="813:84">XMM_L</name></name><argument_list pos:start="813:85" pos:end="813:87">(<argument pos:start="813:86" pos:end="813:86"><expr pos:start="813:86" pos:end="813:86"><literal type="number" pos:start="813:86" pos:end="813:86">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="815:17" pos:end="815:45"><expr pos:start="815:17" pos:end="815:44"><call pos:start="815:17" pos:end="815:44"><name pos:start="815:17" pos:end="815:31">tcg_gen_movi_tl</name><argument_list pos:start="815:32" pos:end="815:44">(<argument pos:start="815:33" pos:end="815:40"><expr pos:start="815:33" pos:end="815:40"><name pos:start="815:33" pos:end="815:40"><name pos:start="815:33" pos:end="815:37">cpu_T</name><index pos:start="815:38" pos:end="815:40">[<expr pos:start="815:39" pos:end="815:39"><literal type="number" pos:start="815:39" pos:end="815:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="815:43" pos:end="815:43"><expr pos:start="815:43" pos:end="815:43"><literal type="number" pos:start="815:43" pos:end="815:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="817:17" pos:end="817:90"><expr pos:start="817:17" pos:end="817:89"><call pos:start="817:17" pos:end="817:89"><name pos:start="817:17" pos:end="817:31">tcg_gen_st32_tl</name><argument_list pos:start="817:32" pos:end="817:89">(<argument pos:start="817:33" pos:end="817:40"><expr pos:start="817:33" pos:end="817:40"><name pos:start="817:33" pos:end="817:40"><name pos:start="817:33" pos:end="817:37">cpu_T</name><index pos:start="817:38" pos:end="817:40">[<expr pos:start="817:39" pos:end="817:39"><literal type="number" pos:start="817:39" pos:end="817:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="817:43" pos:end="817:49"><expr pos:start="817:43" pos:end="817:49"><name pos:start="817:43" pos:end="817:49">cpu_env</name></expr></argument>, <argument pos:start="817:52" pos:end="817:88"><expr pos:start="817:52" pos:end="817:88"><call pos:start="817:52" pos:end="817:88"><name pos:start="817:52" pos:end="817:59">offsetof</name><argument_list pos:start="817:60" pos:end="817:88">(<argument pos:start="817:61" pos:end="817:71"><expr pos:start="817:61" pos:end="817:71"><name pos:start="817:61" pos:end="817:71">CPUX86State</name></expr></argument>,<argument pos:start="817:73" pos:end="817:87"><expr pos:start="817:73" pos:end="817:87"><call pos:start="817:73" pos:end="817:87"><name pos:start="817:73" pos:end="817:84"><name pos:start="817:73" pos:end="817:78">xmm_t0</name><operator pos:start="817:79" pos:end="817:79">.</operator><name pos:start="817:80" pos:end="817:84">XMM_L</name></name><argument_list pos:start="817:85" pos:end="817:87">(<argument pos:start="817:86" pos:end="817:86"><expr pos:start="817:86" pos:end="817:86"><literal type="number" pos:start="817:86" pos:end="817:86">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="819:17" pos:end="819:58"><expr pos:start="819:17" pos:end="819:57"><name pos:start="819:17" pos:end="819:26">op1_offset</name> <operator pos:start="819:28" pos:end="819:28">=</operator> <call pos:start="819:30" pos:end="819:57"><name pos:start="819:30" pos:end="819:37">offsetof</name><argument_list pos:start="819:38" pos:end="819:57">(<argument pos:start="819:39" pos:end="819:49"><expr pos:start="819:39" pos:end="819:49"><name pos:start="819:39" pos:end="819:49">CPUX86State</name></expr></argument>,<argument pos:start="819:51" pos:end="819:56"><expr pos:start="819:51" pos:end="819:56"><name pos:start="819:51" pos:end="819:56">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="821:15" pos:end="833:13">else <block pos:start="821:20" pos:end="833:13">{<block_content pos:start="823:17" pos:end="831:58">

                <expr_stmt pos:start="823:17" pos:end="823:47"><expr pos:start="823:17" pos:end="823:46"><call pos:start="823:17" pos:end="823:46"><name pos:start="823:17" pos:end="823:31">tcg_gen_movi_tl</name><argument_list pos:start="823:32" pos:end="823:46">(<argument pos:start="823:33" pos:end="823:40"><expr pos:start="823:33" pos:end="823:40"><name pos:start="823:33" pos:end="823:40"><name pos:start="823:33" pos:end="823:37">cpu_T</name><index pos:start="823:38" pos:end="823:40">[<expr pos:start="823:39" pos:end="823:39"><literal type="number" pos:start="823:39" pos:end="823:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="823:43" pos:end="823:45"><expr pos:start="823:43" pos:end="823:45"><name pos:start="823:43" pos:end="823:45">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="825:17" pos:end="825:90"><expr pos:start="825:17" pos:end="825:89"><call pos:start="825:17" pos:end="825:89"><name pos:start="825:17" pos:end="825:31">tcg_gen_st32_tl</name><argument_list pos:start="825:32" pos:end="825:89">(<argument pos:start="825:33" pos:end="825:40"><expr pos:start="825:33" pos:end="825:40"><name pos:start="825:33" pos:end="825:40"><name pos:start="825:33" pos:end="825:37">cpu_T</name><index pos:start="825:38" pos:end="825:40">[<expr pos:start="825:39" pos:end="825:39"><literal type="number" pos:start="825:39" pos:end="825:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="825:43" pos:end="825:49"><expr pos:start="825:43" pos:end="825:49"><name pos:start="825:43" pos:end="825:49">cpu_env</name></expr></argument>, <argument pos:start="825:52" pos:end="825:88"><expr pos:start="825:52" pos:end="825:88"><call pos:start="825:52" pos:end="825:88"><name pos:start="825:52" pos:end="825:59">offsetof</name><argument_list pos:start="825:60" pos:end="825:88">(<argument pos:start="825:61" pos:end="825:71"><expr pos:start="825:61" pos:end="825:71"><name pos:start="825:61" pos:end="825:71">CPUX86State</name></expr></argument>,<argument pos:start="825:73" pos:end="825:87"><expr pos:start="825:73" pos:end="825:87"><call pos:start="825:73" pos:end="825:87"><name pos:start="825:73" pos:end="825:84"><name pos:start="825:73" pos:end="825:78">mmx_t0</name><operator pos:start="825:79" pos:end="825:79">.</operator><name pos:start="825:80" pos:end="825:84">MMX_L</name></name><argument_list pos:start="825:85" pos:end="825:87">(<argument pos:start="825:86" pos:end="825:86"><expr pos:start="825:86" pos:end="825:86"><literal type="number" pos:start="825:86" pos:end="825:86">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="827:17" pos:end="827:45"><expr pos:start="827:17" pos:end="827:44"><call pos:start="827:17" pos:end="827:44"><name pos:start="827:17" pos:end="827:31">tcg_gen_movi_tl</name><argument_list pos:start="827:32" pos:end="827:44">(<argument pos:start="827:33" pos:end="827:40"><expr pos:start="827:33" pos:end="827:40"><name pos:start="827:33" pos:end="827:40"><name pos:start="827:33" pos:end="827:37">cpu_T</name><index pos:start="827:38" pos:end="827:40">[<expr pos:start="827:39" pos:end="827:39"><literal type="number" pos:start="827:39" pos:end="827:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="827:43" pos:end="827:43"><expr pos:start="827:43" pos:end="827:43"><literal type="number" pos:start="827:43" pos:end="827:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="829:17" pos:end="829:90"><expr pos:start="829:17" pos:end="829:89"><call pos:start="829:17" pos:end="829:89"><name pos:start="829:17" pos:end="829:31">tcg_gen_st32_tl</name><argument_list pos:start="829:32" pos:end="829:89">(<argument pos:start="829:33" pos:end="829:40"><expr pos:start="829:33" pos:end="829:40"><name pos:start="829:33" pos:end="829:40"><name pos:start="829:33" pos:end="829:37">cpu_T</name><index pos:start="829:38" pos:end="829:40">[<expr pos:start="829:39" pos:end="829:39"><literal type="number" pos:start="829:39" pos:end="829:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="829:43" pos:end="829:49"><expr pos:start="829:43" pos:end="829:49"><name pos:start="829:43" pos:end="829:49">cpu_env</name></expr></argument>, <argument pos:start="829:52" pos:end="829:88"><expr pos:start="829:52" pos:end="829:88"><call pos:start="829:52" pos:end="829:88"><name pos:start="829:52" pos:end="829:59">offsetof</name><argument_list pos:start="829:60" pos:end="829:88">(<argument pos:start="829:61" pos:end="829:71"><expr pos:start="829:61" pos:end="829:71"><name pos:start="829:61" pos:end="829:71">CPUX86State</name></expr></argument>,<argument pos:start="829:73" pos:end="829:87"><expr pos:start="829:73" pos:end="829:87"><call pos:start="829:73" pos:end="829:87"><name pos:start="829:73" pos:end="829:84"><name pos:start="829:73" pos:end="829:78">mmx_t0</name><operator pos:start="829:79" pos:end="829:79">.</operator><name pos:start="829:80" pos:end="829:84">MMX_L</name></name><argument_list pos:start="829:85" pos:end="829:87">(<argument pos:start="829:86" pos:end="829:86"><expr pos:start="829:86" pos:end="829:86"><literal type="number" pos:start="829:86" pos:end="829:86">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="831:17" pos:end="831:58"><expr pos:start="831:17" pos:end="831:57"><name pos:start="831:17" pos:end="831:26">op1_offset</name> <operator pos:start="831:28" pos:end="831:28">=</operator> <call pos:start="831:30" pos:end="831:57"><name pos:start="831:30" pos:end="831:37">offsetof</name><argument_list pos:start="831:38" pos:end="831:57">(<argument pos:start="831:39" pos:end="831:49"><expr pos:start="831:39" pos:end="831:49"><name pos:start="831:39" pos:end="831:49">CPUX86State</name></expr></argument>,<argument pos:start="831:51" pos:end="831:56"><expr pos:start="831:51" pos:end="831:56"><name pos:start="831:51" pos:end="831:56">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="835:13" pos:end="837:65"><expr pos:start="835:13" pos:end="837:64"><name pos:start="835:13" pos:end="835:22">sse_fn_epp</name> <operator pos:start="835:24" pos:end="835:24">=</operator> <name pos:start="835:26" pos:end="837:64"><name pos:start="835:26" pos:end="835:38">sse_op_table2</name><index pos:start="835:39" pos:end="837:60">[<expr pos:start="835:40" pos:end="837:59"><operator pos:start="835:40" pos:end="835:40">(</operator><operator pos:start="835:41" pos:end="835:41">(</operator><name pos:start="835:42" pos:end="835:42">b</name> <operator pos:start="835:44" pos:end="835:44">-</operator> <literal type="number" pos:start="835:46" pos:end="835:46">1</literal><operator pos:start="835:47" pos:end="835:47">)</operator> <operator pos:start="835:49" pos:end="835:49">&amp;</operator> <literal type="number" pos:start="835:51" pos:end="835:51">3</literal><operator pos:start="835:52" pos:end="835:52">)</operator> <operator pos:start="835:54" pos:end="835:54">*</operator> <literal type="number" pos:start="835:56" pos:end="835:58">8</literal> <operator pos:start="835:58" pos:end="835:58">+</operator>

                                       <operator pos:start="837:40" pos:end="837:40">(</operator><operator pos:start="837:41" pos:end="837:41">(</operator><operator pos:start="837:42" pos:end="837:42">(</operator><name pos:start="837:43" pos:end="837:47">modrm</name> <operator pos:start="837:49" pos:end="837:50">&gt;&gt;</operator> <literal type="number" pos:start="837:52" pos:end="837:52">3</literal><operator pos:start="837:53" pos:end="837:53">)</operator><operator pos:start="837:54" pos:end="837:54">)</operator> <operator pos:start="837:56" pos:end="837:56">&amp;</operator> <literal type="number" pos:start="837:58" pos:end="837:58">7</literal><operator pos:start="837:59" pos:end="837:59">)</operator></expr>]</index><index pos:start="837:61" pos:end="837:64">[<expr pos:start="837:62" pos:end="837:63"><name pos:start="837:62" pos:end="837:63">b1</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="839:13" pos:end="843:13"><if pos:start="839:13" pos:end="843:13">if <condition pos:start="839:16" pos:end="839:28">(<expr pos:start="839:17" pos:end="839:27"><operator pos:start="839:17" pos:end="839:17">!</operator><name pos:start="839:18" pos:end="839:27">sse_fn_epp</name></expr>)</condition> <block pos:start="839:30" pos:end="843:13">{<block_content pos:start="841:17" pos:end="841:32">

                <goto pos:start="841:17" pos:end="841:32">goto <name pos:start="841:22" pos:end="841:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="845:13" pos:end="857:13"><if pos:start="845:13" pos:end="851:13">if <condition pos:start="845:16" pos:end="845:23">(<expr pos:start="845:17" pos:end="845:22"><name pos:start="845:17" pos:end="845:22">is_xmm</name></expr>)</condition> <block pos:start="845:25" pos:end="851:13">{<block_content pos:start="847:17" pos:end="849:64">

                <expr_stmt pos:start="847:17" pos:end="847:44"><expr pos:start="847:17" pos:end="847:43"><name pos:start="847:17" pos:end="847:18">rm</name> <operator pos:start="847:20" pos:end="847:20">=</operator> <operator pos:start="847:22" pos:end="847:22">(</operator><name pos:start="847:23" pos:end="847:27">modrm</name> <operator pos:start="847:29" pos:end="847:29">&amp;</operator> <literal type="number" pos:start="847:31" pos:end="847:31">7</literal><operator pos:start="847:32" pos:end="847:32">)</operator> <operator pos:start="847:34" pos:end="847:34">|</operator> <call pos:start="847:36" pos:end="847:43"><name pos:start="847:36" pos:end="847:40">REX_B</name><argument_list pos:start="847:41" pos:end="847:43">(<argument pos:start="847:42" pos:end="847:42"><expr pos:start="847:42" pos:end="847:42"><name pos:start="847:42" pos:end="847:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="849:17" pos:end="849:64"><expr pos:start="849:17" pos:end="849:63"><name pos:start="849:17" pos:end="849:26">op2_offset</name> <operator pos:start="849:28" pos:end="849:28">=</operator> <call pos:start="849:30" pos:end="849:63"><name pos:start="849:30" pos:end="849:37">offsetof</name><argument_list pos:start="849:38" pos:end="849:63">(<argument pos:start="849:39" pos:end="849:49"><expr pos:start="849:39" pos:end="849:49"><name pos:start="849:39" pos:end="849:49">CPUX86State</name></expr></argument>,<argument pos:start="849:51" pos:end="849:62"><expr pos:start="849:51" pos:end="849:62"><name pos:start="849:51" pos:end="849:62"><name pos:start="849:51" pos:end="849:58">xmm_regs</name><index pos:start="849:59" pos:end="849:62">[<expr pos:start="849:60" pos:end="849:61"><name pos:start="849:60" pos:end="849:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="851:15" pos:end="857:13">else <block pos:start="851:20" pos:end="857:13">{<block_content pos:start="853:17" pos:end="855:66">

                <expr_stmt pos:start="853:17" pos:end="853:33"><expr pos:start="853:17" pos:end="853:32"><name pos:start="853:17" pos:end="853:18">rm</name> <operator pos:start="853:20" pos:end="853:20">=</operator> <operator pos:start="853:22" pos:end="853:22">(</operator><name pos:start="853:23" pos:end="853:27">modrm</name> <operator pos:start="853:29" pos:end="853:29">&amp;</operator> <literal type="number" pos:start="853:31" pos:end="853:31">7</literal><operator pos:start="853:32" pos:end="853:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="855:17" pos:end="855:66"><expr pos:start="855:17" pos:end="855:65"><name pos:start="855:17" pos:end="855:26">op2_offset</name> <operator pos:start="855:28" pos:end="855:28">=</operator> <call pos:start="855:30" pos:end="855:65"><name pos:start="855:30" pos:end="855:37">offsetof</name><argument_list pos:start="855:38" pos:end="855:65">(<argument pos:start="855:39" pos:end="855:49"><expr pos:start="855:39" pos:end="855:49"><name pos:start="855:39" pos:end="855:49">CPUX86State</name></expr></argument>,<argument pos:start="855:51" pos:end="855:64"><expr pos:start="855:51" pos:end="855:64"><name pos:start="855:51" pos:end="855:60"><name pos:start="855:51" pos:end="855:56">fpregs</name><index pos:start="855:57" pos:end="855:60">[<expr pos:start="855:58" pos:end="855:59"><name pos:start="855:58" pos:end="855:59">rm</name></expr>]</index></name><operator pos:start="855:61" pos:end="855:61">.</operator><name pos:start="855:62" pos:end="855:64">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="859:13" pos:end="859:60"><expr pos:start="859:13" pos:end="859:59"><call pos:start="859:13" pos:end="859:59"><name pos:start="859:13" pos:end="859:28">tcg_gen_addi_ptr</name><argument_list pos:start="859:29" pos:end="859:59">(<argument pos:start="859:30" pos:end="859:37"><expr pos:start="859:30" pos:end="859:37"><name pos:start="859:30" pos:end="859:37">cpu_ptr0</name></expr></argument>, <argument pos:start="859:40" pos:end="859:46"><expr pos:start="859:40" pos:end="859:46"><name pos:start="859:40" pos:end="859:46">cpu_env</name></expr></argument>, <argument pos:start="859:49" pos:end="859:58"><expr pos:start="859:49" pos:end="859:58"><name pos:start="859:49" pos:end="859:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="861:13" pos:end="861:60"><expr pos:start="861:13" pos:end="861:59"><call pos:start="861:13" pos:end="861:59"><name pos:start="861:13" pos:end="861:28">tcg_gen_addi_ptr</name><argument_list pos:start="861:29" pos:end="861:59">(<argument pos:start="861:30" pos:end="861:37"><expr pos:start="861:30" pos:end="861:37"><name pos:start="861:30" pos:end="861:37">cpu_ptr1</name></expr></argument>, <argument pos:start="861:40" pos:end="861:46"><expr pos:start="861:40" pos:end="861:46"><name pos:start="861:40" pos:end="861:46">cpu_env</name></expr></argument>, <argument pos:start="861:49" pos:end="861:58"><expr pos:start="861:49" pos:end="861:58"><name pos:start="861:49" pos:end="861:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="863:13" pos:end="863:52"><expr pos:start="863:13" pos:end="863:51"><call pos:start="863:13" pos:end="863:51"><name pos:start="863:13" pos:end="863:22">sse_fn_epp</name><argument_list pos:start="863:23" pos:end="863:51">(<argument pos:start="863:24" pos:end="863:30"><expr pos:start="863:24" pos:end="863:30"><name pos:start="863:24" pos:end="863:30">cpu_env</name></expr></argument>, <argument pos:start="863:33" pos:end="863:40"><expr pos:start="863:33" pos:end="863:40"><name pos:start="863:33" pos:end="863:40">cpu_ptr0</name></expr></argument>, <argument pos:start="863:43" pos:end="863:50"><expr pos:start="863:43" pos:end="863:50"><name pos:start="863:43" pos:end="863:50">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="865:13" pos:end="865:18">break;</break>

        <case pos:start="867:9" pos:end="867:19">case <expr pos:start="867:14" pos:end="867:18"><literal type="number" pos:start="867:14" pos:end="867:18">0x050</literal></expr>:</case> <comment type="block" pos:start="867:21" pos:end="867:34">/* movmskps */</comment>

            <expr_stmt pos:start="869:13" pos:end="869:40"><expr pos:start="869:13" pos:end="869:39"><name pos:start="869:13" pos:end="869:14">rm</name> <operator pos:start="869:16" pos:end="869:16">=</operator> <operator pos:start="869:18" pos:end="869:18">(</operator><name pos:start="869:19" pos:end="869:23">modrm</name> <operator pos:start="869:25" pos:end="869:25">&amp;</operator> <literal type="number" pos:start="869:27" pos:end="869:27">7</literal><operator pos:start="869:28" pos:end="869:28">)</operator> <operator pos:start="869:30" pos:end="869:30">|</operator> <call pos:start="869:32" pos:end="869:39"><name pos:start="869:32" pos:end="869:36">REX_B</name><argument_list pos:start="869:37" pos:end="869:39">(<argument pos:start="869:38" pos:end="869:38"><expr pos:start="869:38" pos:end="869:38"><name pos:start="869:38" pos:end="869:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="871:13" pos:end="873:65"><expr pos:start="871:13" pos:end="873:64"><call pos:start="871:13" pos:end="873:64"><name pos:start="871:13" pos:end="871:28">tcg_gen_addi_ptr</name><argument_list pos:start="871:29" pos:end="873:64">(<argument pos:start="871:30" pos:end="871:37"><expr pos:start="871:30" pos:end="871:37"><name pos:start="871:30" pos:end="871:37">cpu_ptr0</name></expr></argument>, <argument pos:start="871:40" pos:end="871:46"><expr pos:start="871:40" pos:end="871:46"><name pos:start="871:40" pos:end="871:46">cpu_env</name></expr></argument>, 

                             <argument pos:start="873:30" pos:end="873:63"><expr pos:start="873:30" pos:end="873:63"><call pos:start="873:30" pos:end="873:63"><name pos:start="873:30" pos:end="873:37">offsetof</name><argument_list pos:start="873:38" pos:end="873:63">(<argument pos:start="873:39" pos:end="873:49"><expr pos:start="873:39" pos:end="873:49"><name pos:start="873:39" pos:end="873:49">CPUX86State</name></expr></argument>,<argument pos:start="873:51" pos:end="873:62"><expr pos:start="873:51" pos:end="873:62"><name pos:start="873:51" pos:end="873:62"><name pos:start="873:51" pos:end="873:58">xmm_regs</name><index pos:start="873:59" pos:end="873:62">[<expr pos:start="873:60" pos:end="873:61"><name pos:start="873:60" pos:end="873:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="875:13" pos:end="875:65"><expr pos:start="875:13" pos:end="875:64"><call pos:start="875:13" pos:end="875:64"><name pos:start="875:13" pos:end="875:31">gen_helper_movmskps</name><argument_list pos:start="875:32" pos:end="875:64">(<argument pos:start="875:33" pos:end="875:44"><expr pos:start="875:33" pos:end="875:44"><name pos:start="875:33" pos:end="875:44">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="875:47" pos:end="875:53"><expr pos:start="875:47" pos:end="875:53"><name pos:start="875:47" pos:end="875:53">cpu_env</name></expr></argument>, <argument pos:start="875:56" pos:end="875:63"><expr pos:start="875:56" pos:end="875:63"><name pos:start="875:56" pos:end="875:63">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="877:13" pos:end="877:61"><expr pos:start="877:13" pos:end="877:60"><call pos:start="877:13" pos:end="877:60"><name pos:start="877:13" pos:end="877:31">tcg_gen_extu_i32_tl</name><argument_list pos:start="877:32" pos:end="877:60">(<argument pos:start="877:33" pos:end="877:45"><expr pos:start="877:33" pos:end="877:45"><name pos:start="877:33" pos:end="877:45"><name pos:start="877:33" pos:end="877:40">cpu_regs</name><index pos:start="877:41" pos:end="877:45">[<expr pos:start="877:42" pos:end="877:44"><name pos:start="877:42" pos:end="877:44">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="877:48" pos:end="877:59"><expr pos:start="877:48" pos:end="877:59"><name pos:start="877:48" pos:end="877:59">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="879:13" pos:end="879:18">break;</break>

        <case pos:start="881:9" pos:end="881:19">case <expr pos:start="881:14" pos:end="881:18"><literal type="number" pos:start="881:14" pos:end="881:18">0x150</literal></expr>:</case> <comment type="block" pos:start="881:21" pos:end="881:34">/* movmskpd */</comment>

            <expr_stmt pos:start="883:13" pos:end="883:40"><expr pos:start="883:13" pos:end="883:39"><name pos:start="883:13" pos:end="883:14">rm</name> <operator pos:start="883:16" pos:end="883:16">=</operator> <operator pos:start="883:18" pos:end="883:18">(</operator><name pos:start="883:19" pos:end="883:23">modrm</name> <operator pos:start="883:25" pos:end="883:25">&amp;</operator> <literal type="number" pos:start="883:27" pos:end="883:27">7</literal><operator pos:start="883:28" pos:end="883:28">)</operator> <operator pos:start="883:30" pos:end="883:30">|</operator> <call pos:start="883:32" pos:end="883:39"><name pos:start="883:32" pos:end="883:36">REX_B</name><argument_list pos:start="883:37" pos:end="883:39">(<argument pos:start="883:38" pos:end="883:38"><expr pos:start="883:38" pos:end="883:38"><name pos:start="883:38" pos:end="883:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="885:13" pos:end="887:65"><expr pos:start="885:13" pos:end="887:64"><call pos:start="885:13" pos:end="887:64"><name pos:start="885:13" pos:end="885:28">tcg_gen_addi_ptr</name><argument_list pos:start="885:29" pos:end="887:64">(<argument pos:start="885:30" pos:end="885:37"><expr pos:start="885:30" pos:end="885:37"><name pos:start="885:30" pos:end="885:37">cpu_ptr0</name></expr></argument>, <argument pos:start="885:40" pos:end="885:46"><expr pos:start="885:40" pos:end="885:46"><name pos:start="885:40" pos:end="885:46">cpu_env</name></expr></argument>, 

                             <argument pos:start="887:30" pos:end="887:63"><expr pos:start="887:30" pos:end="887:63"><call pos:start="887:30" pos:end="887:63"><name pos:start="887:30" pos:end="887:37">offsetof</name><argument_list pos:start="887:38" pos:end="887:63">(<argument pos:start="887:39" pos:end="887:49"><expr pos:start="887:39" pos:end="887:49"><name pos:start="887:39" pos:end="887:49">CPUX86State</name></expr></argument>,<argument pos:start="887:51" pos:end="887:62"><expr pos:start="887:51" pos:end="887:62"><name pos:start="887:51" pos:end="887:62"><name pos:start="887:51" pos:end="887:58">xmm_regs</name><index pos:start="887:59" pos:end="887:62">[<expr pos:start="887:60" pos:end="887:61"><name pos:start="887:60" pos:end="887:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="889:13" pos:end="889:65"><expr pos:start="889:13" pos:end="889:64"><call pos:start="889:13" pos:end="889:64"><name pos:start="889:13" pos:end="889:31">gen_helper_movmskpd</name><argument_list pos:start="889:32" pos:end="889:64">(<argument pos:start="889:33" pos:end="889:44"><expr pos:start="889:33" pos:end="889:44"><name pos:start="889:33" pos:end="889:44">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="889:47" pos:end="889:53"><expr pos:start="889:47" pos:end="889:53"><name pos:start="889:47" pos:end="889:53">cpu_env</name></expr></argument>, <argument pos:start="889:56" pos:end="889:63"><expr pos:start="889:56" pos:end="889:63"><name pos:start="889:56" pos:end="889:63">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="891:13" pos:end="891:61"><expr pos:start="891:13" pos:end="891:60"><call pos:start="891:13" pos:end="891:60"><name pos:start="891:13" pos:end="891:31">tcg_gen_extu_i32_tl</name><argument_list pos:start="891:32" pos:end="891:60">(<argument pos:start="891:33" pos:end="891:45"><expr pos:start="891:33" pos:end="891:45"><name pos:start="891:33" pos:end="891:45"><name pos:start="891:33" pos:end="891:40">cpu_regs</name><index pos:start="891:41" pos:end="891:45">[<expr pos:start="891:42" pos:end="891:44"><name pos:start="891:42" pos:end="891:44">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="891:48" pos:end="891:59"><expr pos:start="891:48" pos:end="891:59"><name pos:start="891:48" pos:end="891:59">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="893:13" pos:end="893:18">break;</break>

        <case pos:start="895:9" pos:end="895:19">case <expr pos:start="895:14" pos:end="895:18"><literal type="number" pos:start="895:14" pos:end="895:18">0x02a</literal></expr>:</case> <comment type="block" pos:start="895:21" pos:end="895:34">/* cvtpi2ps */</comment>

        <case pos:start="897:9" pos:end="897:19">case <expr pos:start="897:14" pos:end="897:18"><literal type="number" pos:start="897:14" pos:end="897:18">0x12a</literal></expr>:</case> <comment type="block" pos:start="897:21" pos:end="897:34">/* cvtpi2pd */</comment>

            <expr_stmt pos:start="899:13" pos:end="899:42"><expr pos:start="899:13" pos:end="899:41"><call pos:start="899:13" pos:end="899:41"><name pos:start="899:13" pos:end="899:32">gen_helper_enter_mmx</name><argument_list pos:start="899:33" pos:end="899:41">(<argument pos:start="899:34" pos:end="899:40"><expr pos:start="899:34" pos:end="899:40"><name pos:start="899:34" pos:end="899:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="901:13" pos:end="915:13"><if pos:start="901:13" pos:end="909:13">if <condition pos:start="901:16" pos:end="901:25">(<expr pos:start="901:17" pos:end="901:24"><name pos:start="901:17" pos:end="901:19">mod</name> <operator pos:start="901:21" pos:end="901:22">!=</operator> <literal type="number" pos:start="901:24" pos:end="901:24">3</literal></expr>)</condition> <block pos:start="901:27" pos:end="909:13">{<block_content pos:start="903:17" pos:end="907:46">

                <expr_stmt pos:start="903:17" pos:end="903:45"><expr pos:start="903:17" pos:end="903:44"><call pos:start="903:17" pos:end="903:44"><name pos:start="903:17" pos:end="903:29">gen_lea_modrm</name><argument_list pos:start="903:30" pos:end="903:44">(<argument pos:start="903:31" pos:end="903:33"><expr pos:start="903:31" pos:end="903:33"><name pos:start="903:31" pos:end="903:33">env</name></expr></argument>, <argument pos:start="903:36" pos:end="903:36"><expr pos:start="903:36" pos:end="903:36"><name pos:start="903:36" pos:end="903:36">s</name></expr></argument>, <argument pos:start="903:39" pos:end="903:43"><expr pos:start="903:39" pos:end="903:43"><name pos:start="903:39" pos:end="903:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="905:17" pos:end="905:58"><expr pos:start="905:17" pos:end="905:57"><name pos:start="905:17" pos:end="905:26">op2_offset</name> <operator pos:start="905:28" pos:end="905:28">=</operator> <call pos:start="905:30" pos:end="905:57"><name pos:start="905:30" pos:end="905:37">offsetof</name><argument_list pos:start="905:38" pos:end="905:57">(<argument pos:start="905:39" pos:end="905:49"><expr pos:start="905:39" pos:end="905:49"><name pos:start="905:39" pos:end="905:49">CPUX86State</name></expr></argument>,<argument pos:start="905:51" pos:end="905:56"><expr pos:start="905:51" pos:end="905:56"><name pos:start="905:51" pos:end="905:56">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="907:17" pos:end="907:46"><expr pos:start="907:17" pos:end="907:45"><call pos:start="907:17" pos:end="907:45"><name pos:start="907:17" pos:end="907:30">gen_ldq_env_A0</name><argument_list pos:start="907:31" pos:end="907:45">(<argument pos:start="907:32" pos:end="907:32"><expr pos:start="907:32" pos:end="907:32"><name pos:start="907:32" pos:end="907:32">s</name></expr></argument>, <argument pos:start="907:35" pos:end="907:44"><expr pos:start="907:35" pos:end="907:44"><name pos:start="907:35" pos:end="907:44">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="909:15" pos:end="915:13">else <block pos:start="909:20" pos:end="915:13">{<block_content pos:start="911:17" pos:end="913:66">

                <expr_stmt pos:start="911:17" pos:end="911:33"><expr pos:start="911:17" pos:end="911:32"><name pos:start="911:17" pos:end="911:18">rm</name> <operator pos:start="911:20" pos:end="911:20">=</operator> <operator pos:start="911:22" pos:end="911:22">(</operator><name pos:start="911:23" pos:end="911:27">modrm</name> <operator pos:start="911:29" pos:end="911:29">&amp;</operator> <literal type="number" pos:start="911:31" pos:end="911:31">7</literal><operator pos:start="911:32" pos:end="911:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="913:17" pos:end="913:66"><expr pos:start="913:17" pos:end="913:65"><name pos:start="913:17" pos:end="913:26">op2_offset</name> <operator pos:start="913:28" pos:end="913:28">=</operator> <call pos:start="913:30" pos:end="913:65"><name pos:start="913:30" pos:end="913:37">offsetof</name><argument_list pos:start="913:38" pos:end="913:65">(<argument pos:start="913:39" pos:end="913:49"><expr pos:start="913:39" pos:end="913:49"><name pos:start="913:39" pos:end="913:49">CPUX86State</name></expr></argument>,<argument pos:start="913:51" pos:end="913:64"><expr pos:start="913:51" pos:end="913:64"><name pos:start="913:51" pos:end="913:60"><name pos:start="913:51" pos:end="913:56">fpregs</name><index pos:start="913:57" pos:end="913:60">[<expr pos:start="913:58" pos:end="913:59"><name pos:start="913:58" pos:end="913:59">rm</name></expr>]</index></name><operator pos:start="913:61" pos:end="913:61">.</operator><name pos:start="913:62" pos:end="913:64">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="917:13" pos:end="917:61"><expr pos:start="917:13" pos:end="917:60"><name pos:start="917:13" pos:end="917:22">op1_offset</name> <operator pos:start="917:24" pos:end="917:24">=</operator> <call pos:start="917:26" pos:end="917:60"><name pos:start="917:26" pos:end="917:33">offsetof</name><argument_list pos:start="917:34" pos:end="917:60">(<argument pos:start="917:35" pos:end="917:45"><expr pos:start="917:35" pos:end="917:45"><name pos:start="917:35" pos:end="917:45">CPUX86State</name></expr></argument>,<argument pos:start="917:47" pos:end="917:59"><expr pos:start="917:47" pos:end="917:59"><name pos:start="917:47" pos:end="917:59"><name pos:start="917:47" pos:end="917:54">xmm_regs</name><index pos:start="917:55" pos:end="917:59">[<expr pos:start="917:56" pos:end="917:58"><name pos:start="917:56" pos:end="917:58">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="919:13" pos:end="919:60"><expr pos:start="919:13" pos:end="919:59"><call pos:start="919:13" pos:end="919:59"><name pos:start="919:13" pos:end="919:28">tcg_gen_addi_ptr</name><argument_list pos:start="919:29" pos:end="919:59">(<argument pos:start="919:30" pos:end="919:37"><expr pos:start="919:30" pos:end="919:37"><name pos:start="919:30" pos:end="919:37">cpu_ptr0</name></expr></argument>, <argument pos:start="919:40" pos:end="919:46"><expr pos:start="919:40" pos:end="919:46"><name pos:start="919:40" pos:end="919:46">cpu_env</name></expr></argument>, <argument pos:start="919:49" pos:end="919:58"><expr pos:start="919:49" pos:end="919:58"><name pos:start="919:49" pos:end="919:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="921:13" pos:end="921:60"><expr pos:start="921:13" pos:end="921:59"><call pos:start="921:13" pos:end="921:59"><name pos:start="921:13" pos:end="921:28">tcg_gen_addi_ptr</name><argument_list pos:start="921:29" pos:end="921:59">(<argument pos:start="921:30" pos:end="921:37"><expr pos:start="921:30" pos:end="921:37"><name pos:start="921:30" pos:end="921:37">cpu_ptr1</name></expr></argument>, <argument pos:start="921:40" pos:end="921:46"><expr pos:start="921:40" pos:end="921:46"><name pos:start="921:40" pos:end="921:46">cpu_env</name></expr></argument>, <argument pos:start="921:49" pos:end="921:58"><expr pos:start="921:49" pos:end="921:58"><name pos:start="921:49" pos:end="921:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="923:13" pos:end="939:13">switch<condition pos:start="923:19" pos:end="923:26">(<expr pos:start="923:20" pos:end="923:25"><name pos:start="923:20" pos:end="923:20">b</name> <operator pos:start="923:22" pos:end="923:23">&gt;&gt;</operator> <literal type="number" pos:start="923:25" pos:end="923:25">8</literal></expr>)</condition> <block pos:start="923:28" pos:end="939:13">{<block_content pos:start="925:13" pos:end="937:22">

            <case pos:start="925:13" pos:end="925:21">case <expr pos:start="925:18" pos:end="925:20"><literal type="number" pos:start="925:18" pos:end="925:20">0x0</literal></expr>:</case>

                <expr_stmt pos:start="927:17" pos:end="927:65"><expr pos:start="927:17" pos:end="927:64"><call pos:start="927:17" pos:end="927:64"><name pos:start="927:17" pos:end="927:35">gen_helper_cvtpi2ps</name><argument_list pos:start="927:36" pos:end="927:64">(<argument pos:start="927:37" pos:end="927:43"><expr pos:start="927:37" pos:end="927:43"><name pos:start="927:37" pos:end="927:43">cpu_env</name></expr></argument>, <argument pos:start="927:46" pos:end="927:53"><expr pos:start="927:46" pos:end="927:53"><name pos:start="927:46" pos:end="927:53">cpu_ptr0</name></expr></argument>, <argument pos:start="927:56" pos:end="927:63"><expr pos:start="927:56" pos:end="927:63"><name pos:start="927:56" pos:end="927:63">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="929:17" pos:end="929:22">break;</break>

            <default pos:start="931:13" pos:end="931:20">default:</default>

            <case pos:start="933:13" pos:end="933:21">case <expr pos:start="933:18" pos:end="933:20"><literal type="number" pos:start="933:18" pos:end="933:20">0x1</literal></expr>:</case>

                <expr_stmt pos:start="935:17" pos:end="935:65"><expr pos:start="935:17" pos:end="935:64"><call pos:start="935:17" pos:end="935:64"><name pos:start="935:17" pos:end="935:35">gen_helper_cvtpi2pd</name><argument_list pos:start="935:36" pos:end="935:64">(<argument pos:start="935:37" pos:end="935:43"><expr pos:start="935:37" pos:end="935:43"><name pos:start="935:37" pos:end="935:43">cpu_env</name></expr></argument>, <argument pos:start="935:46" pos:end="935:53"><expr pos:start="935:46" pos:end="935:53"><name pos:start="935:46" pos:end="935:53">cpu_ptr0</name></expr></argument>, <argument pos:start="935:56" pos:end="935:63"><expr pos:start="935:56" pos:end="935:63"><name pos:start="935:56" pos:end="935:63">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="937:17" pos:end="937:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="941:13" pos:end="941:18">break;</break>

        <case pos:start="943:9" pos:end="943:19">case <expr pos:start="943:14" pos:end="943:18"><literal type="number" pos:start="943:14" pos:end="943:18">0x22a</literal></expr>:</case> <comment type="block" pos:start="943:21" pos:end="943:34">/* cvtsi2ss */</comment>

        <case pos:start="945:9" pos:end="945:19">case <expr pos:start="945:14" pos:end="945:18"><literal type="number" pos:start="945:14" pos:end="945:18">0x32a</literal></expr>:</case> <comment type="block" pos:start="945:21" pos:end="945:34">/* cvtsi2sd */</comment>

            <expr_stmt pos:start="947:13" pos:end="947:36"><expr pos:start="947:13" pos:end="947:35"><name pos:start="947:13" pos:end="947:14">ot</name> <operator pos:start="947:16" pos:end="947:16">=</operator> <call pos:start="947:18" pos:end="947:35"><name pos:start="947:18" pos:end="947:25">mo_64_32</name><argument_list pos:start="947:26" pos:end="947:35">(<argument pos:start="947:27" pos:end="947:34"><expr pos:start="947:27" pos:end="947:34"><name pos:start="947:27" pos:end="947:34"><name pos:start="947:27" pos:end="947:27">s</name><operator pos:start="947:28" pos:end="947:29">-&gt;</operator><name pos:start="947:30" pos:end="947:34">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="949:13" pos:end="949:58"><expr pos:start="949:13" pos:end="949:57"><call pos:start="949:13" pos:end="949:57"><name pos:start="949:13" pos:end="949:26">gen_ldst_modrm</name><argument_list pos:start="949:27" pos:end="949:57">(<argument pos:start="949:28" pos:end="949:30"><expr pos:start="949:28" pos:end="949:30"><name pos:start="949:28" pos:end="949:30">env</name></expr></argument>, <argument pos:start="949:33" pos:end="949:33"><expr pos:start="949:33" pos:end="949:33"><name pos:start="949:33" pos:end="949:33">s</name></expr></argument>, <argument pos:start="949:36" pos:end="949:40"><expr pos:start="949:36" pos:end="949:40"><name pos:start="949:36" pos:end="949:40">modrm</name></expr></argument>, <argument pos:start="949:43" pos:end="949:44"><expr pos:start="949:43" pos:end="949:44"><name pos:start="949:43" pos:end="949:44">ot</name></expr></argument>, <argument pos:start="949:47" pos:end="949:53"><expr pos:start="949:47" pos:end="949:53"><name pos:start="949:47" pos:end="949:53">OR_TMP0</name></expr></argument>, <argument pos:start="949:56" pos:end="949:56"><expr pos:start="949:56" pos:end="949:56"><literal type="number" pos:start="949:56" pos:end="949:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="951:13" pos:end="951:61"><expr pos:start="951:13" pos:end="951:60"><name pos:start="951:13" pos:end="951:22">op1_offset</name> <operator pos:start="951:24" pos:end="951:24">=</operator> <call pos:start="951:26" pos:end="951:60"><name pos:start="951:26" pos:end="951:33">offsetof</name><argument_list pos:start="951:34" pos:end="951:60">(<argument pos:start="951:35" pos:end="951:45"><expr pos:start="951:35" pos:end="951:45"><name pos:start="951:35" pos:end="951:45">CPUX86State</name></expr></argument>,<argument pos:start="951:47" pos:end="951:59"><expr pos:start="951:47" pos:end="951:59"><name pos:start="951:47" pos:end="951:59"><name pos:start="951:47" pos:end="951:54">xmm_regs</name><index pos:start="951:55" pos:end="951:59">[<expr pos:start="951:56" pos:end="951:58"><name pos:start="951:56" pos:end="951:58">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="953:13" pos:end="953:60"><expr pos:start="953:13" pos:end="953:59"><call pos:start="953:13" pos:end="953:59"><name pos:start="953:13" pos:end="953:28">tcg_gen_addi_ptr</name><argument_list pos:start="953:29" pos:end="953:59">(<argument pos:start="953:30" pos:end="953:37"><expr pos:start="953:30" pos:end="953:37"><name pos:start="953:30" pos:end="953:37">cpu_ptr0</name></expr></argument>, <argument pos:start="953:40" pos:end="953:46"><expr pos:start="953:40" pos:end="953:46"><name pos:start="953:40" pos:end="953:46">cpu_env</name></expr></argument>, <argument pos:start="953:49" pos:end="953:58"><expr pos:start="953:49" pos:end="953:58"><name pos:start="953:49" pos:end="953:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="955:13" pos:end="977:13"><if pos:start="955:13" pos:end="963:13">if <condition pos:start="955:16" pos:end="955:28">(<expr pos:start="955:17" pos:end="955:27"><name pos:start="955:17" pos:end="955:18">ot</name> <operator pos:start="955:20" pos:end="955:21">==</operator> <name pos:start="955:23" pos:end="955:27">MO_32</name></expr>)</condition> <block pos:start="955:30" pos:end="963:13">{<block_content pos:start="957:17" pos:end="961:60">

                <decl_stmt pos:start="957:17" pos:end="957:73"><decl pos:start="957:17" pos:end="957:72"><type pos:start="957:17" pos:end="957:29"><name pos:start="957:17" pos:end="957:29">SSEFunc_0_epi</name></type> <name pos:start="957:31" pos:end="957:40">sse_fn_epi</name> <init pos:start="957:42" pos:end="957:72">= <expr pos:start="957:44" pos:end="957:72"><name pos:start="957:44" pos:end="957:72"><name pos:start="957:44" pos:end="957:58">sse_op_table3ai</name><index pos:start="957:59" pos:end="957:72">[<expr pos:start="957:60" pos:end="957:71"><operator pos:start="957:60" pos:end="957:60">(</operator><name pos:start="957:61" pos:end="957:61">b</name> <operator pos:start="957:63" pos:end="957:64">&gt;&gt;</operator> <literal type="number" pos:start="957:66" pos:end="957:66">8</literal><operator pos:start="957:67" pos:end="957:67">)</operator> <operator pos:start="957:69" pos:end="957:69">&amp;</operator> <literal type="number" pos:start="957:71" pos:end="957:71">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="959:17" pos:end="959:61"><expr pos:start="959:17" pos:end="959:60"><call pos:start="959:17" pos:end="959:60"><name pos:start="959:17" pos:end="959:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="959:37" pos:end="959:60">(<argument pos:start="959:38" pos:end="959:49"><expr pos:start="959:38" pos:end="959:49"><name pos:start="959:38" pos:end="959:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="959:52" pos:end="959:59"><expr pos:start="959:52" pos:end="959:59"><name pos:start="959:52" pos:end="959:59"><name pos:start="959:52" pos:end="959:56">cpu_T</name><index pos:start="959:57" pos:end="959:59">[<expr pos:start="959:58" pos:end="959:58"><literal type="number" pos:start="959:58" pos:end="959:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="961:17" pos:end="961:60"><expr pos:start="961:17" pos:end="961:59"><call pos:start="961:17" pos:end="961:59"><name pos:start="961:17" pos:end="961:26">sse_fn_epi</name><argument_list pos:start="961:27" pos:end="961:59">(<argument pos:start="961:28" pos:end="961:34"><expr pos:start="961:28" pos:end="961:34"><name pos:start="961:28" pos:end="961:34">cpu_env</name></expr></argument>, <argument pos:start="961:37" pos:end="961:44"><expr pos:start="961:37" pos:end="961:44"><name pos:start="961:37" pos:end="961:44">cpu_ptr0</name></expr></argument>, <argument pos:start="961:47" pos:end="961:58"><expr pos:start="961:47" pos:end="961:58"><name pos:start="961:47" pos:end="961:58">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="963:15" pos:end="977:13">else <block pos:start="963:20" pos:end="977:13">{<block_content pos:start="967:17" pos:end="976:0">

<cpp:ifdef pos:start="965:1" pos:end="965:20">#<cpp:directive pos:start="965:2" pos:end="965:6">ifdef</cpp:directive> <name pos:start="965:8" pos:end="965:20">TARGET_X86_64</name></cpp:ifdef>

                <decl_stmt pos:start="967:17" pos:end="967:73"><decl pos:start="967:17" pos:end="967:72"><type pos:start="967:17" pos:end="967:29"><name pos:start="967:17" pos:end="967:29">SSEFunc_0_epl</name></type> <name pos:start="967:31" pos:end="967:40">sse_fn_epl</name> <init pos:start="967:42" pos:end="967:72">= <expr pos:start="967:44" pos:end="967:72"><name pos:start="967:44" pos:end="967:72"><name pos:start="967:44" pos:end="967:58">sse_op_table3aq</name><index pos:start="967:59" pos:end="967:72">[<expr pos:start="967:60" pos:end="967:71"><operator pos:start="967:60" pos:end="967:60">(</operator><name pos:start="967:61" pos:end="967:61">b</name> <operator pos:start="967:63" pos:end="967:64">&gt;&gt;</operator> <literal type="number" pos:start="967:66" pos:end="967:66">8</literal><operator pos:start="967:67" pos:end="967:67">)</operator> <operator pos:start="967:69" pos:end="967:69">&amp;</operator> <literal type="number" pos:start="967:71" pos:end="967:71">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="969:17" pos:end="972:0"><expr pos:start="969:17" pos:end="969:55"><call pos:start="969:17" pos:end="969:55"><name pos:start="969:17" pos:end="969:26">sse_fn_epl</name><argument_list pos:start="969:27" pos:end="969:55">(<argument pos:start="969:28" pos:end="969:34"><expr pos:start="969:28" pos:end="969:34"><name pos:start="969:28" pos:end="969:34">cpu_env</name></expr></argument>, <argument pos:start="969:37" pos:end="969:44"><expr pos:start="969:37" pos:end="969:44"><name pos:start="969:37" pos:end="969:44">cpu_ptr0</name></expr></argument>, <argument pos:start="969:47" pos:end="969:54"><expr pos:start="969:47" pos:end="969:54"><name pos:start="969:47" pos:end="969:54"><name pos:start="969:47" pos:end="969:51">cpu_T</name><index pos:start="969:52" pos:end="969:54">[<expr pos:start="969:53" pos:end="969:53"><literal type="number" pos:start="969:53" pos:end="969:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="971:1" pos:end="971:5">#<cpp:directive pos:start="971:2" pos:end="971:5">else</cpp:directive></cpp:else>

                <goto pos:start="973:17" pos:end="976:0">goto <name pos:start="973:22" pos:end="973:31">illegal_op</name>;</goto>

<cpp:endif pos:start="975:1" pos:end="975:6">#<cpp:directive pos:start="975:2" pos:end="975:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></else></if_stmt>

            <break pos:start="979:13" pos:end="979:18">break;</break>

        <case pos:start="981:9" pos:end="981:19">case <expr pos:start="981:14" pos:end="981:18"><literal type="number" pos:start="981:14" pos:end="981:18">0x02c</literal></expr>:</case> <comment type="block" pos:start="981:21" pos:end="981:35">/* cvttps2pi */</comment>

        <case pos:start="983:9" pos:end="983:19">case <expr pos:start="983:14" pos:end="983:18"><literal type="number" pos:start="983:14" pos:end="983:18">0x12c</literal></expr>:</case> <comment type="block" pos:start="983:21" pos:end="983:35">/* cvttpd2pi */</comment>

        <case pos:start="985:9" pos:end="985:19">case <expr pos:start="985:14" pos:end="985:18"><literal type="number" pos:start="985:14" pos:end="985:18">0x02d</literal></expr>:</case> <comment type="block" pos:start="985:21" pos:end="985:34">/* cvtps2pi */</comment>

        <case pos:start="987:9" pos:end="987:19">case <expr pos:start="987:14" pos:end="987:18"><literal type="number" pos:start="987:14" pos:end="987:18">0x12d</literal></expr>:</case> <comment type="block" pos:start="987:21" pos:end="987:34">/* cvtpd2pi */</comment>

            <expr_stmt pos:start="989:13" pos:end="989:42"><expr pos:start="989:13" pos:end="989:41"><call pos:start="989:13" pos:end="989:41"><name pos:start="989:13" pos:end="989:32">gen_helper_enter_mmx</name><argument_list pos:start="989:33" pos:end="989:41">(<argument pos:start="989:34" pos:end="989:40"><expr pos:start="989:34" pos:end="989:40"><name pos:start="989:34" pos:end="989:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="991:13" pos:end="1005:13"><if pos:start="991:13" pos:end="999:13">if <condition pos:start="991:16" pos:end="991:25">(<expr pos:start="991:17" pos:end="991:24"><name pos:start="991:17" pos:end="991:19">mod</name> <operator pos:start="991:21" pos:end="991:22">!=</operator> <literal type="number" pos:start="991:24" pos:end="991:24">3</literal></expr>)</condition> <block pos:start="991:27" pos:end="999:13">{<block_content pos:start="993:17" pos:end="997:46">

                <expr_stmt pos:start="993:17" pos:end="993:45"><expr pos:start="993:17" pos:end="993:44"><call pos:start="993:17" pos:end="993:44"><name pos:start="993:17" pos:end="993:29">gen_lea_modrm</name><argument_list pos:start="993:30" pos:end="993:44">(<argument pos:start="993:31" pos:end="993:33"><expr pos:start="993:31" pos:end="993:33"><name pos:start="993:31" pos:end="993:33">env</name></expr></argument>, <argument pos:start="993:36" pos:end="993:36"><expr pos:start="993:36" pos:end="993:36"><name pos:start="993:36" pos:end="993:36">s</name></expr></argument>, <argument pos:start="993:39" pos:end="993:43"><expr pos:start="993:39" pos:end="993:43"><name pos:start="993:39" pos:end="993:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="995:17" pos:end="995:58"><expr pos:start="995:17" pos:end="995:57"><name pos:start="995:17" pos:end="995:26">op2_offset</name> <operator pos:start="995:28" pos:end="995:28">=</operator> <call pos:start="995:30" pos:end="995:57"><name pos:start="995:30" pos:end="995:37">offsetof</name><argument_list pos:start="995:38" pos:end="995:57">(<argument pos:start="995:39" pos:end="995:49"><expr pos:start="995:39" pos:end="995:49"><name pos:start="995:39" pos:end="995:49">CPUX86State</name></expr></argument>,<argument pos:start="995:51" pos:end="995:56"><expr pos:start="995:51" pos:end="995:56"><name pos:start="995:51" pos:end="995:56">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="997:17" pos:end="997:46"><expr pos:start="997:17" pos:end="997:45"><call pos:start="997:17" pos:end="997:45"><name pos:start="997:17" pos:end="997:30">gen_ldo_env_A0</name><argument_list pos:start="997:31" pos:end="997:45">(<argument pos:start="997:32" pos:end="997:32"><expr pos:start="997:32" pos:end="997:32"><name pos:start="997:32" pos:end="997:32">s</name></expr></argument>, <argument pos:start="997:35" pos:end="997:44"><expr pos:start="997:35" pos:end="997:44"><name pos:start="997:35" pos:end="997:44">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="999:15" pos:end="1005:13">else <block pos:start="999:20" pos:end="1005:13">{<block_content pos:start="1001:17" pos:end="1003:64">

                <expr_stmt pos:start="1001:17" pos:end="1001:44"><expr pos:start="1001:17" pos:end="1001:43"><name pos:start="1001:17" pos:end="1001:18">rm</name> <operator pos:start="1001:20" pos:end="1001:20">=</operator> <operator pos:start="1001:22" pos:end="1001:22">(</operator><name pos:start="1001:23" pos:end="1001:27">modrm</name> <operator pos:start="1001:29" pos:end="1001:29">&amp;</operator> <literal type="number" pos:start="1001:31" pos:end="1001:31">7</literal><operator pos:start="1001:32" pos:end="1001:32">)</operator> <operator pos:start="1001:34" pos:end="1001:34">|</operator> <call pos:start="1001:36" pos:end="1001:43"><name pos:start="1001:36" pos:end="1001:40">REX_B</name><argument_list pos:start="1001:41" pos:end="1001:43">(<argument pos:start="1001:42" pos:end="1001:42"><expr pos:start="1001:42" pos:end="1001:42"><name pos:start="1001:42" pos:end="1001:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1003:17" pos:end="1003:64"><expr pos:start="1003:17" pos:end="1003:63"><name pos:start="1003:17" pos:end="1003:26">op2_offset</name> <operator pos:start="1003:28" pos:end="1003:28">=</operator> <call pos:start="1003:30" pos:end="1003:63"><name pos:start="1003:30" pos:end="1003:37">offsetof</name><argument_list pos:start="1003:38" pos:end="1003:63">(<argument pos:start="1003:39" pos:end="1003:49"><expr pos:start="1003:39" pos:end="1003:49"><name pos:start="1003:39" pos:end="1003:49">CPUX86State</name></expr></argument>,<argument pos:start="1003:51" pos:end="1003:62"><expr pos:start="1003:51" pos:end="1003:62"><name pos:start="1003:51" pos:end="1003:62"><name pos:start="1003:51" pos:end="1003:58">xmm_regs</name><index pos:start="1003:59" pos:end="1003:62">[<expr pos:start="1003:60" pos:end="1003:61"><name pos:start="1003:60" pos:end="1003:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1007:13" pos:end="1007:67"><expr pos:start="1007:13" pos:end="1007:66"><name pos:start="1007:13" pos:end="1007:22">op1_offset</name> <operator pos:start="1007:24" pos:end="1007:24">=</operator> <call pos:start="1007:26" pos:end="1007:66"><name pos:start="1007:26" pos:end="1007:33">offsetof</name><argument_list pos:start="1007:34" pos:end="1007:66">(<argument pos:start="1007:35" pos:end="1007:45"><expr pos:start="1007:35" pos:end="1007:45"><name pos:start="1007:35" pos:end="1007:45">CPUX86State</name></expr></argument>,<argument pos:start="1007:47" pos:end="1007:65"><expr pos:start="1007:47" pos:end="1007:65"><name pos:start="1007:47" pos:end="1007:61"><name pos:start="1007:47" pos:end="1007:52">fpregs</name><index pos:start="1007:53" pos:end="1007:61">[<expr pos:start="1007:54" pos:end="1007:60"><name pos:start="1007:54" pos:end="1007:56">reg</name> <operator pos:start="1007:58" pos:end="1007:58">&amp;</operator> <literal type="number" pos:start="1007:60" pos:end="1007:60">7</literal></expr>]</index></name><operator pos:start="1007:62" pos:end="1007:62">.</operator><name pos:start="1007:63" pos:end="1007:65">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1009:13" pos:end="1009:60"><expr pos:start="1009:13" pos:end="1009:59"><call pos:start="1009:13" pos:end="1009:59"><name pos:start="1009:13" pos:end="1009:28">tcg_gen_addi_ptr</name><argument_list pos:start="1009:29" pos:end="1009:59">(<argument pos:start="1009:30" pos:end="1009:37"><expr pos:start="1009:30" pos:end="1009:37"><name pos:start="1009:30" pos:end="1009:37">cpu_ptr0</name></expr></argument>, <argument pos:start="1009:40" pos:end="1009:46"><expr pos:start="1009:40" pos:end="1009:46"><name pos:start="1009:40" pos:end="1009:46">cpu_env</name></expr></argument>, <argument pos:start="1009:49" pos:end="1009:58"><expr pos:start="1009:49" pos:end="1009:58"><name pos:start="1009:49" pos:end="1009:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1011:13" pos:end="1011:60"><expr pos:start="1011:13" pos:end="1011:59"><call pos:start="1011:13" pos:end="1011:59"><name pos:start="1011:13" pos:end="1011:28">tcg_gen_addi_ptr</name><argument_list pos:start="1011:29" pos:end="1011:59">(<argument pos:start="1011:30" pos:end="1011:37"><expr pos:start="1011:30" pos:end="1011:37"><name pos:start="1011:30" pos:end="1011:37">cpu_ptr1</name></expr></argument>, <argument pos:start="1011:40" pos:end="1011:46"><expr pos:start="1011:40" pos:end="1011:46"><name pos:start="1011:40" pos:end="1011:46">cpu_env</name></expr></argument>, <argument pos:start="1011:49" pos:end="1011:58"><expr pos:start="1011:49" pos:end="1011:58"><name pos:start="1011:49" pos:end="1011:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="1013:13" pos:end="1039:13">switch<condition pos:start="1013:19" pos:end="1013:21">(<expr pos:start="1013:20" pos:end="1013:20"><name pos:start="1013:20" pos:end="1013:20">b</name></expr>)</condition> <block pos:start="1013:23" pos:end="1039:13">{<block_content pos:start="1015:13" pos:end="1037:22">

            <case pos:start="1015:13" pos:end="1015:23">case <expr pos:start="1015:18" pos:end="1015:22"><literal type="number" pos:start="1015:18" pos:end="1015:22">0x02c</literal></expr>:</case>

                <expr_stmt pos:start="1017:17" pos:end="1017:66"><expr pos:start="1017:17" pos:end="1017:65"><call pos:start="1017:17" pos:end="1017:65"><name pos:start="1017:17" pos:end="1017:36">gen_helper_cvttps2pi</name><argument_list pos:start="1017:37" pos:end="1017:65">(<argument pos:start="1017:38" pos:end="1017:44"><expr pos:start="1017:38" pos:end="1017:44"><name pos:start="1017:38" pos:end="1017:44">cpu_env</name></expr></argument>, <argument pos:start="1017:47" pos:end="1017:54"><expr pos:start="1017:47" pos:end="1017:54"><name pos:start="1017:47" pos:end="1017:54">cpu_ptr0</name></expr></argument>, <argument pos:start="1017:57" pos:end="1017:64"><expr pos:start="1017:57" pos:end="1017:64"><name pos:start="1017:57" pos:end="1017:64">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1019:17" pos:end="1019:22">break;</break>

            <case pos:start="1021:13" pos:end="1021:23">case <expr pos:start="1021:18" pos:end="1021:22"><literal type="number" pos:start="1021:18" pos:end="1021:22">0x12c</literal></expr>:</case>

                <expr_stmt pos:start="1023:17" pos:end="1023:66"><expr pos:start="1023:17" pos:end="1023:65"><call pos:start="1023:17" pos:end="1023:65"><name pos:start="1023:17" pos:end="1023:36">gen_helper_cvttpd2pi</name><argument_list pos:start="1023:37" pos:end="1023:65">(<argument pos:start="1023:38" pos:end="1023:44"><expr pos:start="1023:38" pos:end="1023:44"><name pos:start="1023:38" pos:end="1023:44">cpu_env</name></expr></argument>, <argument pos:start="1023:47" pos:end="1023:54"><expr pos:start="1023:47" pos:end="1023:54"><name pos:start="1023:47" pos:end="1023:54">cpu_ptr0</name></expr></argument>, <argument pos:start="1023:57" pos:end="1023:64"><expr pos:start="1023:57" pos:end="1023:64"><name pos:start="1023:57" pos:end="1023:64">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1025:17" pos:end="1025:22">break;</break>

            <case pos:start="1027:13" pos:end="1027:23">case <expr pos:start="1027:18" pos:end="1027:22"><literal type="number" pos:start="1027:18" pos:end="1027:22">0x02d</literal></expr>:</case>

                <expr_stmt pos:start="1029:17" pos:end="1029:65"><expr pos:start="1029:17" pos:end="1029:64"><call pos:start="1029:17" pos:end="1029:64"><name pos:start="1029:17" pos:end="1029:35">gen_helper_cvtps2pi</name><argument_list pos:start="1029:36" pos:end="1029:64">(<argument pos:start="1029:37" pos:end="1029:43"><expr pos:start="1029:37" pos:end="1029:43"><name pos:start="1029:37" pos:end="1029:43">cpu_env</name></expr></argument>, <argument pos:start="1029:46" pos:end="1029:53"><expr pos:start="1029:46" pos:end="1029:53"><name pos:start="1029:46" pos:end="1029:53">cpu_ptr0</name></expr></argument>, <argument pos:start="1029:56" pos:end="1029:63"><expr pos:start="1029:56" pos:end="1029:63"><name pos:start="1029:56" pos:end="1029:63">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1031:17" pos:end="1031:22">break;</break>

            <case pos:start="1033:13" pos:end="1033:23">case <expr pos:start="1033:18" pos:end="1033:22"><literal type="number" pos:start="1033:18" pos:end="1033:22">0x12d</literal></expr>:</case>

                <expr_stmt pos:start="1035:17" pos:end="1035:65"><expr pos:start="1035:17" pos:end="1035:64"><call pos:start="1035:17" pos:end="1035:64"><name pos:start="1035:17" pos:end="1035:35">gen_helper_cvtpd2pi</name><argument_list pos:start="1035:36" pos:end="1035:64">(<argument pos:start="1035:37" pos:end="1035:43"><expr pos:start="1035:37" pos:end="1035:43"><name pos:start="1035:37" pos:end="1035:43">cpu_env</name></expr></argument>, <argument pos:start="1035:46" pos:end="1035:53"><expr pos:start="1035:46" pos:end="1035:53"><name pos:start="1035:46" pos:end="1035:53">cpu_ptr0</name></expr></argument>, <argument pos:start="1035:56" pos:end="1035:63"><expr pos:start="1035:56" pos:end="1035:63"><name pos:start="1035:56" pos:end="1035:63">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1037:17" pos:end="1037:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="1041:13" pos:end="1041:18">break;</break>

        <case pos:start="1043:9" pos:end="1043:19">case <expr pos:start="1043:14" pos:end="1043:18"><literal type="number" pos:start="1043:14" pos:end="1043:18">0x22c</literal></expr>:</case> <comment type="block" pos:start="1043:21" pos:end="1043:35">/* cvttss2si */</comment>

        <case pos:start="1045:9" pos:end="1045:19">case <expr pos:start="1045:14" pos:end="1045:18"><literal type="number" pos:start="1045:14" pos:end="1045:18">0x32c</literal></expr>:</case> <comment type="block" pos:start="1045:21" pos:end="1045:35">/* cvttsd2si */</comment>

        <case pos:start="1047:9" pos:end="1047:19">case <expr pos:start="1047:14" pos:end="1047:18"><literal type="number" pos:start="1047:14" pos:end="1047:18">0x22d</literal></expr>:</case> <comment type="block" pos:start="1047:21" pos:end="1047:34">/* cvtss2si */</comment>

        <case pos:start="1049:9" pos:end="1049:19">case <expr pos:start="1049:14" pos:end="1049:18"><literal type="number" pos:start="1049:14" pos:end="1049:18">0x32d</literal></expr>:</case> <comment type="block" pos:start="1049:21" pos:end="1049:34">/* cvtsd2si */</comment>

            <expr_stmt pos:start="1051:13" pos:end="1051:36"><expr pos:start="1051:13" pos:end="1051:35"><name pos:start="1051:13" pos:end="1051:14">ot</name> <operator pos:start="1051:16" pos:end="1051:16">=</operator> <call pos:start="1051:18" pos:end="1051:35"><name pos:start="1051:18" pos:end="1051:25">mo_64_32</name><argument_list pos:start="1051:26" pos:end="1051:35">(<argument pos:start="1051:27" pos:end="1051:34"><expr pos:start="1051:27" pos:end="1051:34"><name pos:start="1051:27" pos:end="1051:34"><name pos:start="1051:27" pos:end="1051:27">s</name><operator pos:start="1051:28" pos:end="1051:29">-&gt;</operator><name pos:start="1051:30" pos:end="1051:34">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1053:13" pos:end="1077:13"><if pos:start="1053:13" pos:end="1071:13">if <condition pos:start="1053:16" pos:end="1053:25">(<expr pos:start="1053:17" pos:end="1053:24"><name pos:start="1053:17" pos:end="1053:19">mod</name> <operator pos:start="1053:21" pos:end="1053:22">!=</operator> <literal type="number" pos:start="1053:24" pos:end="1053:24">3</literal></expr>)</condition> <block pos:start="1053:27" pos:end="1071:13">{<block_content pos:start="1055:17" pos:end="1069:58">

                <expr_stmt pos:start="1055:17" pos:end="1055:45"><expr pos:start="1055:17" pos:end="1055:44"><call pos:start="1055:17" pos:end="1055:44"><name pos:start="1055:17" pos:end="1055:29">gen_lea_modrm</name><argument_list pos:start="1055:30" pos:end="1055:44">(<argument pos:start="1055:31" pos:end="1055:33"><expr pos:start="1055:31" pos:end="1055:33"><name pos:start="1055:31" pos:end="1055:33">env</name></expr></argument>, <argument pos:start="1055:36" pos:end="1055:36"><expr pos:start="1055:36" pos:end="1055:36"><name pos:start="1055:36" pos:end="1055:36">s</name></expr></argument>, <argument pos:start="1055:39" pos:end="1055:43"><expr pos:start="1055:39" pos:end="1055:43"><name pos:start="1055:39" pos:end="1055:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1057:17" pos:end="1067:17"><if pos:start="1057:17" pos:end="1061:17">if <condition pos:start="1057:20" pos:end="1057:33">(<expr pos:start="1057:21" pos:end="1057:32"><operator pos:start="1057:21" pos:end="1057:21">(</operator><name pos:start="1057:22" pos:end="1057:22">b</name> <operator pos:start="1057:24" pos:end="1057:25">&gt;&gt;</operator> <literal type="number" pos:start="1057:27" pos:end="1057:27">8</literal><operator pos:start="1057:28" pos:end="1057:28">)</operator> <operator pos:start="1057:30" pos:end="1057:30">&amp;</operator> <literal type="number" pos:start="1057:32" pos:end="1057:32">1</literal></expr>)</condition> <block pos:start="1057:35" pos:end="1061:17">{<block_content pos:start="1059:21" pos:end="1059:78">

                    <expr_stmt pos:start="1059:21" pos:end="1059:78"><expr pos:start="1059:21" pos:end="1059:77"><call pos:start="1059:21" pos:end="1059:77"><name pos:start="1059:21" pos:end="1059:34">gen_ldq_env_A0</name><argument_list pos:start="1059:35" pos:end="1059:77">(<argument pos:start="1059:36" pos:end="1059:36"><expr pos:start="1059:36" pos:end="1059:36"><name pos:start="1059:36" pos:end="1059:36">s</name></expr></argument>, <argument pos:start="1059:39" pos:end="1059:76"><expr pos:start="1059:39" pos:end="1059:76"><call pos:start="1059:39" pos:end="1059:76"><name pos:start="1059:39" pos:end="1059:46">offsetof</name><argument_list pos:start="1059:47" pos:end="1059:76">(<argument pos:start="1059:48" pos:end="1059:58"><expr pos:start="1059:48" pos:end="1059:58"><name pos:start="1059:48" pos:end="1059:58">CPUX86State</name></expr></argument>, <argument pos:start="1059:61" pos:end="1059:75"><expr pos:start="1059:61" pos:end="1059:75"><call pos:start="1059:61" pos:end="1059:75"><name pos:start="1059:61" pos:end="1059:72"><name pos:start="1059:61" pos:end="1059:66">xmm_t0</name><operator pos:start="1059:67" pos:end="1059:67">.</operator><name pos:start="1059:68" pos:end="1059:72">XMM_Q</name></name><argument_list pos:start="1059:73" pos:end="1059:75">(<argument pos:start="1059:74" pos:end="1059:74"><expr pos:start="1059:74" pos:end="1059:74"><literal type="number" pos:start="1059:74" pos:end="1059:74">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1061:19" pos:end="1067:17">else <block pos:start="1061:24" pos:end="1067:17">{<block_content pos:start="1063:21" pos:end="1065:94">

                    <expr_stmt pos:start="1063:21" pos:end="1063:60"><expr pos:start="1063:21" pos:end="1063:59"><call pos:start="1063:21" pos:end="1063:59"><name pos:start="1063:21" pos:end="1063:31">gen_op_ld_v</name><argument_list pos:start="1063:32" pos:end="1063:59">(<argument pos:start="1063:33" pos:end="1063:33"><expr pos:start="1063:33" pos:end="1063:33"><name pos:start="1063:33" pos:end="1063:33">s</name></expr></argument>, <argument pos:start="1063:36" pos:end="1063:40"><expr pos:start="1063:36" pos:end="1063:40"><name pos:start="1063:36" pos:end="1063:40">MO_32</name></expr></argument>, <argument pos:start="1063:43" pos:end="1063:50"><expr pos:start="1063:43" pos:end="1063:50"><name pos:start="1063:43" pos:end="1063:50"><name pos:start="1063:43" pos:end="1063:47">cpu_T</name><index pos:start="1063:48" pos:end="1063:50">[<expr pos:start="1063:49" pos:end="1063:49"><literal type="number" pos:start="1063:49" pos:end="1063:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1063:53" pos:end="1063:58"><expr pos:start="1063:53" pos:end="1063:58"><name pos:start="1063:53" pos:end="1063:58">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1065:21" pos:end="1065:94"><expr pos:start="1065:21" pos:end="1065:93"><call pos:start="1065:21" pos:end="1065:93"><name pos:start="1065:21" pos:end="1065:35">tcg_gen_st32_tl</name><argument_list pos:start="1065:36" pos:end="1065:93">(<argument pos:start="1065:37" pos:end="1065:44"><expr pos:start="1065:37" pos:end="1065:44"><name pos:start="1065:37" pos:end="1065:44"><name pos:start="1065:37" pos:end="1065:41">cpu_T</name><index pos:start="1065:42" pos:end="1065:44">[<expr pos:start="1065:43" pos:end="1065:43"><literal type="number" pos:start="1065:43" pos:end="1065:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1065:47" pos:end="1065:53"><expr pos:start="1065:47" pos:end="1065:53"><name pos:start="1065:47" pos:end="1065:53">cpu_env</name></expr></argument>, <argument pos:start="1065:56" pos:end="1065:92"><expr pos:start="1065:56" pos:end="1065:92"><call pos:start="1065:56" pos:end="1065:92"><name pos:start="1065:56" pos:end="1065:63">offsetof</name><argument_list pos:start="1065:64" pos:end="1065:92">(<argument pos:start="1065:65" pos:end="1065:75"><expr pos:start="1065:65" pos:end="1065:75"><name pos:start="1065:65" pos:end="1065:75">CPUX86State</name></expr></argument>,<argument pos:start="1065:77" pos:end="1065:91"><expr pos:start="1065:77" pos:end="1065:91"><call pos:start="1065:77" pos:end="1065:91"><name pos:start="1065:77" pos:end="1065:88"><name pos:start="1065:77" pos:end="1065:82">xmm_t0</name><operator pos:start="1065:83" pos:end="1065:83">.</operator><name pos:start="1065:84" pos:end="1065:88">XMM_L</name></name><argument_list pos:start="1065:89" pos:end="1065:91">(<argument pos:start="1065:90" pos:end="1065:90"><expr pos:start="1065:90" pos:end="1065:90"><literal type="number" pos:start="1065:90" pos:end="1065:90">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1069:17" pos:end="1069:58"><expr pos:start="1069:17" pos:end="1069:57"><name pos:start="1069:17" pos:end="1069:26">op2_offset</name> <operator pos:start="1069:28" pos:end="1069:28">=</operator> <call pos:start="1069:30" pos:end="1069:57"><name pos:start="1069:30" pos:end="1069:37">offsetof</name><argument_list pos:start="1069:38" pos:end="1069:57">(<argument pos:start="1069:39" pos:end="1069:49"><expr pos:start="1069:39" pos:end="1069:49"><name pos:start="1069:39" pos:end="1069:49">CPUX86State</name></expr></argument>,<argument pos:start="1069:51" pos:end="1069:56"><expr pos:start="1069:51" pos:end="1069:56"><name pos:start="1069:51" pos:end="1069:56">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1071:15" pos:end="1077:13">else <block pos:start="1071:20" pos:end="1077:13">{<block_content pos:start="1073:17" pos:end="1075:64">

                <expr_stmt pos:start="1073:17" pos:end="1073:44"><expr pos:start="1073:17" pos:end="1073:43"><name pos:start="1073:17" pos:end="1073:18">rm</name> <operator pos:start="1073:20" pos:end="1073:20">=</operator> <operator pos:start="1073:22" pos:end="1073:22">(</operator><name pos:start="1073:23" pos:end="1073:27">modrm</name> <operator pos:start="1073:29" pos:end="1073:29">&amp;</operator> <literal type="number" pos:start="1073:31" pos:end="1073:31">7</literal><operator pos:start="1073:32" pos:end="1073:32">)</operator> <operator pos:start="1073:34" pos:end="1073:34">|</operator> <call pos:start="1073:36" pos:end="1073:43"><name pos:start="1073:36" pos:end="1073:40">REX_B</name><argument_list pos:start="1073:41" pos:end="1073:43">(<argument pos:start="1073:42" pos:end="1073:42"><expr pos:start="1073:42" pos:end="1073:42"><name pos:start="1073:42" pos:end="1073:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1075:17" pos:end="1075:64"><expr pos:start="1075:17" pos:end="1075:63"><name pos:start="1075:17" pos:end="1075:26">op2_offset</name> <operator pos:start="1075:28" pos:end="1075:28">=</operator> <call pos:start="1075:30" pos:end="1075:63"><name pos:start="1075:30" pos:end="1075:37">offsetof</name><argument_list pos:start="1075:38" pos:end="1075:63">(<argument pos:start="1075:39" pos:end="1075:49"><expr pos:start="1075:39" pos:end="1075:49"><name pos:start="1075:39" pos:end="1075:49">CPUX86State</name></expr></argument>,<argument pos:start="1075:51" pos:end="1075:62"><expr pos:start="1075:51" pos:end="1075:62"><name pos:start="1075:51" pos:end="1075:62"><name pos:start="1075:51" pos:end="1075:58">xmm_regs</name><index pos:start="1075:59" pos:end="1075:62">[<expr pos:start="1075:60" pos:end="1075:61"><name pos:start="1075:60" pos:end="1075:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1079:13" pos:end="1079:60"><expr pos:start="1079:13" pos:end="1079:59"><call pos:start="1079:13" pos:end="1079:59"><name pos:start="1079:13" pos:end="1079:28">tcg_gen_addi_ptr</name><argument_list pos:start="1079:29" pos:end="1079:59">(<argument pos:start="1079:30" pos:end="1079:37"><expr pos:start="1079:30" pos:end="1079:37"><name pos:start="1079:30" pos:end="1079:37">cpu_ptr0</name></expr></argument>, <argument pos:start="1079:40" pos:end="1079:46"><expr pos:start="1079:40" pos:end="1079:46"><name pos:start="1079:40" pos:end="1079:46">cpu_env</name></expr></argument>, <argument pos:start="1079:49" pos:end="1079:58"><expr pos:start="1079:49" pos:end="1079:58"><name pos:start="1079:49" pos:end="1079:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1081:13" pos:end="1107:13"><if pos:start="1081:13" pos:end="1091:13">if <condition pos:start="1081:16" pos:end="1081:28">(<expr pos:start="1081:17" pos:end="1081:27"><name pos:start="1081:17" pos:end="1081:18">ot</name> <operator pos:start="1081:20" pos:end="1081:21">==</operator> <name pos:start="1081:23" pos:end="1081:27">MO_32</name></expr>)</condition> <block pos:start="1081:30" pos:end="1091:13">{<block_content pos:start="1083:17" pos:end="1089:60">

                <decl_stmt pos:start="1083:17" pos:end="1085:62"><decl pos:start="1083:17" pos:end="1085:61"><type pos:start="1083:17" pos:end="1083:28"><name pos:start="1083:17" pos:end="1083:28">SSEFunc_i_ep</name></type> <name pos:start="1083:30" pos:end="1083:40">sse_fn_i_ep</name> <init pos:start="1083:42" pos:end="1085:61">=

                    <expr pos:start="1085:21" pos:end="1085:61"><name pos:start="1085:21" pos:end="1085:61"><name pos:start="1085:21" pos:end="1085:35">sse_op_table3bi</name><index pos:start="1085:36" pos:end="1085:61">[<expr pos:start="1085:37" pos:end="1085:60"><operator pos:start="1085:37" pos:end="1085:37">(</operator><operator pos:start="1085:38" pos:end="1085:38">(</operator><name pos:start="1085:39" pos:end="1085:39">b</name> <operator pos:start="1085:41" pos:end="1085:42">&gt;&gt;</operator> <literal type="number" pos:start="1085:44" pos:end="1085:44">7</literal><operator pos:start="1085:45" pos:end="1085:45">)</operator> <operator pos:start="1085:47" pos:end="1085:47">&amp;</operator> <literal type="number" pos:start="1085:49" pos:end="1085:49">2</literal><operator pos:start="1085:50" pos:end="1085:50">)</operator> <operator pos:start="1085:52" pos:end="1085:52">|</operator> <operator pos:start="1085:54" pos:end="1085:54">(</operator><name pos:start="1085:55" pos:end="1085:55">b</name> <operator pos:start="1085:57" pos:end="1085:57">&amp;</operator> <literal type="number" pos:start="1085:59" pos:end="1085:59">1</literal><operator pos:start="1085:60" pos:end="1085:60">)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="1087:17" pos:end="1087:61"><expr pos:start="1087:17" pos:end="1087:60"><call pos:start="1087:17" pos:end="1087:60"><name pos:start="1087:17" pos:end="1087:27">sse_fn_i_ep</name><argument_list pos:start="1087:28" pos:end="1087:60">(<argument pos:start="1087:29" pos:end="1087:40"><expr pos:start="1087:29" pos:end="1087:40"><name pos:start="1087:29" pos:end="1087:40">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1087:43" pos:end="1087:49"><expr pos:start="1087:43" pos:end="1087:49"><name pos:start="1087:43" pos:end="1087:49">cpu_env</name></expr></argument>, <argument pos:start="1087:52" pos:end="1087:59"><expr pos:start="1087:52" pos:end="1087:59"><name pos:start="1087:52" pos:end="1087:59">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1089:17" pos:end="1089:60"><expr pos:start="1089:17" pos:end="1089:59"><call pos:start="1089:17" pos:end="1089:59"><name pos:start="1089:17" pos:end="1089:35">tcg_gen_extu_i32_tl</name><argument_list pos:start="1089:36" pos:end="1089:59">(<argument pos:start="1089:37" pos:end="1089:44"><expr pos:start="1089:37" pos:end="1089:44"><name pos:start="1089:37" pos:end="1089:44"><name pos:start="1089:37" pos:end="1089:41">cpu_T</name><index pos:start="1089:42" pos:end="1089:44">[<expr pos:start="1089:43" pos:end="1089:43"><literal type="number" pos:start="1089:43" pos:end="1089:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1089:47" pos:end="1089:58"><expr pos:start="1089:47" pos:end="1089:58"><name pos:start="1089:47" pos:end="1089:58">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1091:15" pos:end="1107:13">else <block pos:start="1091:20" pos:end="1107:13">{<block_content pos:start="1095:17" pos:end="1106:0">

<cpp:ifdef pos:start="1093:1" pos:end="1093:20">#<cpp:directive pos:start="1093:2" pos:end="1093:6">ifdef</cpp:directive> <name pos:start="1093:8" pos:end="1093:20">TARGET_X86_64</name></cpp:ifdef>

                <decl_stmt pos:start="1095:17" pos:end="1097:62"><decl pos:start="1095:17" pos:end="1097:61"><type pos:start="1095:17" pos:end="1095:28"><name pos:start="1095:17" pos:end="1095:28">SSEFunc_l_ep</name></type> <name pos:start="1095:30" pos:end="1095:40">sse_fn_l_ep</name> <init pos:start="1095:42" pos:end="1097:61">=

                    <expr pos:start="1097:21" pos:end="1097:61"><name pos:start="1097:21" pos:end="1097:61"><name pos:start="1097:21" pos:end="1097:35">sse_op_table3bq</name><index pos:start="1097:36" pos:end="1097:61">[<expr pos:start="1097:37" pos:end="1097:60"><operator pos:start="1097:37" pos:end="1097:37">(</operator><operator pos:start="1097:38" pos:end="1097:38">(</operator><name pos:start="1097:39" pos:end="1097:39">b</name> <operator pos:start="1097:41" pos:end="1097:42">&gt;&gt;</operator> <literal type="number" pos:start="1097:44" pos:end="1097:44">7</literal><operator pos:start="1097:45" pos:end="1097:45">)</operator> <operator pos:start="1097:47" pos:end="1097:47">&amp;</operator> <literal type="number" pos:start="1097:49" pos:end="1097:49">2</literal><operator pos:start="1097:50" pos:end="1097:50">)</operator> <operator pos:start="1097:52" pos:end="1097:52">|</operator> <operator pos:start="1097:54" pos:end="1097:54">(</operator><name pos:start="1097:55" pos:end="1097:55">b</name> <operator pos:start="1097:57" pos:end="1097:57">&amp;</operator> <literal type="number" pos:start="1097:59" pos:end="1097:59">1</literal><operator pos:start="1097:60" pos:end="1097:60">)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="1099:17" pos:end="1102:0"><expr pos:start="1099:17" pos:end="1099:56"><call pos:start="1099:17" pos:end="1099:56"><name pos:start="1099:17" pos:end="1099:27">sse_fn_l_ep</name><argument_list pos:start="1099:28" pos:end="1099:56">(<argument pos:start="1099:29" pos:end="1099:36"><expr pos:start="1099:29" pos:end="1099:36"><name pos:start="1099:29" pos:end="1099:36"><name pos:start="1099:29" pos:end="1099:33">cpu_T</name><index pos:start="1099:34" pos:end="1099:36">[<expr pos:start="1099:35" pos:end="1099:35"><literal type="number" pos:start="1099:35" pos:end="1099:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1099:39" pos:end="1099:45"><expr pos:start="1099:39" pos:end="1099:45"><name pos:start="1099:39" pos:end="1099:45">cpu_env</name></expr></argument>, <argument pos:start="1099:48" pos:end="1099:55"><expr pos:start="1099:48" pos:end="1099:55"><name pos:start="1099:48" pos:end="1099:55">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1101:1" pos:end="1101:5">#<cpp:directive pos:start="1101:2" pos:end="1101:5">else</cpp:directive></cpp:else>

                <goto pos:start="1103:17" pos:end="1106:0">goto <name pos:start="1103:22" pos:end="1103:31">illegal_op</name>;</goto>

<cpp:endif pos:start="1105:1" pos:end="1105:6">#<cpp:directive pos:start="1105:2" pos:end="1105:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1109:13" pos:end="1109:48"><expr pos:start="1109:13" pos:end="1109:47"><call pos:start="1109:13" pos:end="1109:47"><name pos:start="1109:13" pos:end="1109:28">gen_op_mov_reg_v</name><argument_list pos:start="1109:29" pos:end="1109:47">(<argument pos:start="1109:30" pos:end="1109:31"><expr pos:start="1109:30" pos:end="1109:31"><name pos:start="1109:30" pos:end="1109:31">ot</name></expr></argument>, <argument pos:start="1109:34" pos:end="1109:36"><expr pos:start="1109:34" pos:end="1109:36"><name pos:start="1109:34" pos:end="1109:36">reg</name></expr></argument>, <argument pos:start="1109:39" pos:end="1109:46"><expr pos:start="1109:39" pos:end="1109:46"><name pos:start="1109:39" pos:end="1109:46"><name pos:start="1109:39" pos:end="1109:43">cpu_T</name><index pos:start="1109:44" pos:end="1109:46">[<expr pos:start="1109:45" pos:end="1109:45"><literal type="number" pos:start="1109:45" pos:end="1109:45">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1111:13" pos:end="1111:18">break;</break>

        <case pos:start="1113:9" pos:end="1113:18">case <expr pos:start="1113:14" pos:end="1113:17"><literal type="number" pos:start="1113:14" pos:end="1113:17">0xc4</literal></expr>:</case> <comment type="block" pos:start="1113:20" pos:end="1113:31">/* pinsrw */</comment>

        <case pos:start="1115:9" pos:end="1115:19">case <expr pos:start="1115:14" pos:end="1115:18"><literal type="number" pos:start="1115:14" pos:end="1115:18">0x1c4</literal></expr>:</case>

            <expr_stmt pos:start="1117:13" pos:end="1117:30"><expr pos:start="1117:13" pos:end="1117:29"><name pos:start="1117:13" pos:end="1117:25"><name pos:start="1117:13" pos:end="1117:13">s</name><operator pos:start="1117:14" pos:end="1117:15">-&gt;</operator><name pos:start="1117:16" pos:end="1117:25">rip_offset</name></name> <operator pos:start="1117:27" pos:end="1117:27">=</operator> <literal type="number" pos:start="1117:29" pos:end="1117:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1119:13" pos:end="1119:61"><expr pos:start="1119:13" pos:end="1119:60"><call pos:start="1119:13" pos:end="1119:60"><name pos:start="1119:13" pos:end="1119:26">gen_ldst_modrm</name><argument_list pos:start="1119:27" pos:end="1119:60">(<argument pos:start="1119:28" pos:end="1119:30"><expr pos:start="1119:28" pos:end="1119:30"><name pos:start="1119:28" pos:end="1119:30">env</name></expr></argument>, <argument pos:start="1119:33" pos:end="1119:33"><expr pos:start="1119:33" pos:end="1119:33"><name pos:start="1119:33" pos:end="1119:33">s</name></expr></argument>, <argument pos:start="1119:36" pos:end="1119:40"><expr pos:start="1119:36" pos:end="1119:40"><name pos:start="1119:36" pos:end="1119:40">modrm</name></expr></argument>, <argument pos:start="1119:43" pos:end="1119:47"><expr pos:start="1119:43" pos:end="1119:47"><name pos:start="1119:43" pos:end="1119:47">MO_16</name></expr></argument>, <argument pos:start="1119:50" pos:end="1119:56"><expr pos:start="1119:50" pos:end="1119:56"><name pos:start="1119:50" pos:end="1119:56">OR_TMP0</name></expr></argument>, <argument pos:start="1119:59" pos:end="1119:59"><expr pos:start="1119:59" pos:end="1119:59"><literal type="number" pos:start="1119:59" pos:end="1119:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1121:13" pos:end="1121:46"><expr pos:start="1121:13" pos:end="1121:45"><name pos:start="1121:13" pos:end="1121:15">val</name> <operator pos:start="1121:17" pos:end="1121:17">=</operator> <call pos:start="1121:19" pos:end="1121:45"><name pos:start="1121:19" pos:end="1121:31">cpu_ldub_code</name><argument_list pos:start="1121:32" pos:end="1121:45">(<argument pos:start="1121:33" pos:end="1121:35"><expr pos:start="1121:33" pos:end="1121:35"><name pos:start="1121:33" pos:end="1121:35">env</name></expr></argument>, <argument pos:start="1121:38" pos:end="1121:44"><expr pos:start="1121:38" pos:end="1121:44"><name pos:start="1121:38" pos:end="1121:42"><name pos:start="1121:38" pos:end="1121:38">s</name><operator pos:start="1121:39" pos:end="1121:40">-&gt;</operator><name pos:start="1121:41" pos:end="1121:42">pc</name></name><operator pos:start="1121:43" pos:end="1121:44">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1123:13" pos:end="1139:13"><if pos:start="1123:13" pos:end="1131:13">if <condition pos:start="1123:16" pos:end="1123:19">(<expr pos:start="1123:17" pos:end="1123:18"><name pos:start="1123:17" pos:end="1123:18">b1</name></expr>)</condition> <block pos:start="1123:21" pos:end="1131:13">{<block_content pos:start="1125:17" pos:end="1129:80">

                <expr_stmt pos:start="1125:17" pos:end="1125:25"><expr pos:start="1125:17" pos:end="1125:24"><name pos:start="1125:17" pos:end="1125:19">val</name> <operator pos:start="1125:21" pos:end="1125:22">&amp;=</operator> <literal type="number" pos:start="1125:24" pos:end="1125:24">7</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1127:17" pos:end="1129:80"><expr pos:start="1127:17" pos:end="1129:79"><call pos:start="1127:17" pos:end="1129:79"><name pos:start="1127:17" pos:end="1127:31">tcg_gen_st16_tl</name><argument_list pos:start="1127:32" pos:end="1129:79">(<argument pos:start="1127:33" pos:end="1127:40"><expr pos:start="1127:33" pos:end="1127:40"><name pos:start="1127:33" pos:end="1127:40"><name pos:start="1127:33" pos:end="1127:37">cpu_T</name><index pos:start="1127:38" pos:end="1127:40">[<expr pos:start="1127:39" pos:end="1127:39"><literal type="number" pos:start="1127:39" pos:end="1127:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1127:43" pos:end="1127:49"><expr pos:start="1127:43" pos:end="1127:49"><name pos:start="1127:43" pos:end="1127:49">cpu_env</name></expr></argument>,

                                <argument pos:start="1129:33" pos:end="1129:78"><expr pos:start="1129:33" pos:end="1129:78"><call pos:start="1129:33" pos:end="1129:78"><name pos:start="1129:33" pos:end="1129:40">offsetof</name><argument_list pos:start="1129:41" pos:end="1129:78">(<argument pos:start="1129:42" pos:end="1129:52"><expr pos:start="1129:42" pos:end="1129:52"><name pos:start="1129:42" pos:end="1129:52">CPUX86State</name></expr></argument>,<argument pos:start="1129:54" pos:end="1129:77"><expr pos:start="1129:54" pos:end="1129:77"><name pos:start="1129:54" pos:end="1129:66"><name pos:start="1129:54" pos:end="1129:61">xmm_regs</name><index pos:start="1129:62" pos:end="1129:66">[<expr pos:start="1129:63" pos:end="1129:65"><name pos:start="1129:63" pos:end="1129:65">reg</name></expr>]</index></name><operator pos:start="1129:67" pos:end="1129:67">.</operator><call pos:start="1129:68" pos:end="1129:77"><name pos:start="1129:68" pos:end="1129:72">XMM_W</name><argument_list pos:start="1129:73" pos:end="1129:77">(<argument pos:start="1129:74" pos:end="1129:76"><expr pos:start="1129:74" pos:end="1129:76"><name pos:start="1129:74" pos:end="1129:76">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1131:15" pos:end="1139:13">else <block pos:start="1131:20" pos:end="1139:13">{<block_content pos:start="1133:17" pos:end="1137:82">

                <expr_stmt pos:start="1133:17" pos:end="1133:25"><expr pos:start="1133:17" pos:end="1133:24"><name pos:start="1133:17" pos:end="1133:19">val</name> <operator pos:start="1133:21" pos:end="1133:22">&amp;=</operator> <literal type="number" pos:start="1133:24" pos:end="1133:24">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1135:17" pos:end="1137:82"><expr pos:start="1135:17" pos:end="1137:81"><call pos:start="1135:17" pos:end="1137:81"><name pos:start="1135:17" pos:end="1135:31">tcg_gen_st16_tl</name><argument_list pos:start="1135:32" pos:end="1137:81">(<argument pos:start="1135:33" pos:end="1135:40"><expr pos:start="1135:33" pos:end="1135:40"><name pos:start="1135:33" pos:end="1135:40"><name pos:start="1135:33" pos:end="1135:37">cpu_T</name><index pos:start="1135:38" pos:end="1135:40">[<expr pos:start="1135:39" pos:end="1135:39"><literal type="number" pos:start="1135:39" pos:end="1135:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1135:43" pos:end="1135:49"><expr pos:start="1135:43" pos:end="1135:49"><name pos:start="1135:43" pos:end="1135:49">cpu_env</name></expr></argument>,

                                <argument pos:start="1137:33" pos:end="1137:80"><expr pos:start="1137:33" pos:end="1137:80"><call pos:start="1137:33" pos:end="1137:80"><name pos:start="1137:33" pos:end="1137:40">offsetof</name><argument_list pos:start="1137:41" pos:end="1137:80">(<argument pos:start="1137:42" pos:end="1137:52"><expr pos:start="1137:42" pos:end="1137:52"><name pos:start="1137:42" pos:end="1137:52">CPUX86State</name></expr></argument>,<argument pos:start="1137:54" pos:end="1137:79"><expr pos:start="1137:54" pos:end="1137:79"><name pos:start="1137:54" pos:end="1137:64"><name pos:start="1137:54" pos:end="1137:59">fpregs</name><index pos:start="1137:60" pos:end="1137:64">[<expr pos:start="1137:61" pos:end="1137:63"><name pos:start="1137:61" pos:end="1137:63">reg</name></expr>]</index></name><operator pos:start="1137:65" pos:end="1137:65">.</operator><call pos:start="1137:66" pos:end="1137:79"><name pos:start="1137:66" pos:end="1137:74"><name pos:start="1137:66" pos:end="1137:68">mmx</name><operator pos:start="1137:69" pos:end="1137:69">.</operator><name pos:start="1137:70" pos:end="1137:74">MMX_W</name></name><argument_list pos:start="1137:75" pos:end="1137:79">(<argument pos:start="1137:76" pos:end="1137:78"><expr pos:start="1137:76" pos:end="1137:78"><name pos:start="1137:76" pos:end="1137:78">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="1141:13" pos:end="1141:18">break;</break>

        <case pos:start="1143:9" pos:end="1143:18">case <expr pos:start="1143:14" pos:end="1143:17"><literal type="number" pos:start="1143:14" pos:end="1143:17">0xc5</literal></expr>:</case> <comment type="block" pos:start="1143:20" pos:end="1143:31">/* pextrw */</comment>

        <case pos:start="1145:9" pos:end="1145:19">case <expr pos:start="1145:14" pos:end="1145:18"><literal type="number" pos:start="1145:14" pos:end="1145:18">0x1c5</literal></expr>:</case>

            <if_stmt pos:start="1147:13" pos:end="1149:32"><if pos:start="1147:13" pos:end="1149:32">if <condition pos:start="1147:16" pos:end="1147:25">(<expr pos:start="1147:17" pos:end="1147:24"><name pos:start="1147:17" pos:end="1147:19">mod</name> <operator pos:start="1147:21" pos:end="1147:22">!=</operator> <literal type="number" pos:start="1147:24" pos:end="1147:24">3</literal></expr>)</condition><block type="pseudo" pos:start="1149:17" pos:end="1149:32"><block_content pos:start="1149:17" pos:end="1149:32">

                <goto pos:start="1149:17" pos:end="1149:32">goto <name pos:start="1149:22" pos:end="1149:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1151:13" pos:end="1151:36"><expr pos:start="1151:13" pos:end="1151:35"><name pos:start="1151:13" pos:end="1151:14">ot</name> <operator pos:start="1151:16" pos:end="1151:16">=</operator> <call pos:start="1151:18" pos:end="1151:35"><name pos:start="1151:18" pos:end="1151:25">mo_64_32</name><argument_list pos:start="1151:26" pos:end="1151:35">(<argument pos:start="1151:27" pos:end="1151:34"><expr pos:start="1151:27" pos:end="1151:34"><name pos:start="1151:27" pos:end="1151:34"><name pos:start="1151:27" pos:end="1151:27">s</name><operator pos:start="1151:28" pos:end="1151:29">-&gt;</operator><name pos:start="1151:30" pos:end="1151:34">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1153:13" pos:end="1153:46"><expr pos:start="1153:13" pos:end="1153:45"><name pos:start="1153:13" pos:end="1153:15">val</name> <operator pos:start="1153:17" pos:end="1153:17">=</operator> <call pos:start="1153:19" pos:end="1153:45"><name pos:start="1153:19" pos:end="1153:31">cpu_ldub_code</name><argument_list pos:start="1153:32" pos:end="1153:45">(<argument pos:start="1153:33" pos:end="1153:35"><expr pos:start="1153:33" pos:end="1153:35"><name pos:start="1153:33" pos:end="1153:35">env</name></expr></argument>, <argument pos:start="1153:38" pos:end="1153:44"><expr pos:start="1153:38" pos:end="1153:44"><name pos:start="1153:38" pos:end="1153:42"><name pos:start="1153:38" pos:end="1153:38">s</name><operator pos:start="1153:39" pos:end="1153:40">-&gt;</operator><name pos:start="1153:41" pos:end="1153:42">pc</name></name><operator pos:start="1153:43" pos:end="1153:44">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1155:13" pos:end="1175:13"><if pos:start="1155:13" pos:end="1165:13">if <condition pos:start="1155:16" pos:end="1155:19">(<expr pos:start="1155:17" pos:end="1155:18"><name pos:start="1155:17" pos:end="1155:18">b1</name></expr>)</condition> <block pos:start="1155:21" pos:end="1165:13">{<block_content pos:start="1157:17" pos:end="1163:80">

                <expr_stmt pos:start="1157:17" pos:end="1157:25"><expr pos:start="1157:17" pos:end="1157:24"><name pos:start="1157:17" pos:end="1157:19">val</name> <operator pos:start="1157:21" pos:end="1157:22">&amp;=</operator> <literal type="number" pos:start="1157:24" pos:end="1157:24">7</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1159:17" pos:end="1159:44"><expr pos:start="1159:17" pos:end="1159:43"><name pos:start="1159:17" pos:end="1159:18">rm</name> <operator pos:start="1159:20" pos:end="1159:20">=</operator> <operator pos:start="1159:22" pos:end="1159:22">(</operator><name pos:start="1159:23" pos:end="1159:27">modrm</name> <operator pos:start="1159:29" pos:end="1159:29">&amp;</operator> <literal type="number" pos:start="1159:31" pos:end="1159:31">7</literal><operator pos:start="1159:32" pos:end="1159:32">)</operator> <operator pos:start="1159:34" pos:end="1159:34">|</operator> <call pos:start="1159:36" pos:end="1159:43"><name pos:start="1159:36" pos:end="1159:40">REX_B</name><argument_list pos:start="1159:41" pos:end="1159:43">(<argument pos:start="1159:42" pos:end="1159:42"><expr pos:start="1159:42" pos:end="1159:42"><name pos:start="1159:42" pos:end="1159:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1161:17" pos:end="1163:80"><expr pos:start="1161:17" pos:end="1163:79"><call pos:start="1161:17" pos:end="1163:79"><name pos:start="1161:17" pos:end="1161:32">tcg_gen_ld16u_tl</name><argument_list pos:start="1161:33" pos:end="1163:79">(<argument pos:start="1161:34" pos:end="1161:41"><expr pos:start="1161:34" pos:end="1161:41"><name pos:start="1161:34" pos:end="1161:41"><name pos:start="1161:34" pos:end="1161:38">cpu_T</name><index pos:start="1161:39" pos:end="1161:41">[<expr pos:start="1161:40" pos:end="1161:40"><literal type="number" pos:start="1161:40" pos:end="1161:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1161:44" pos:end="1161:50"><expr pos:start="1161:44" pos:end="1161:50"><name pos:start="1161:44" pos:end="1161:50">cpu_env</name></expr></argument>,

                                 <argument pos:start="1163:34" pos:end="1163:78"><expr pos:start="1163:34" pos:end="1163:78"><call pos:start="1163:34" pos:end="1163:78"><name pos:start="1163:34" pos:end="1163:41">offsetof</name><argument_list pos:start="1163:42" pos:end="1163:78">(<argument pos:start="1163:43" pos:end="1163:53"><expr pos:start="1163:43" pos:end="1163:53"><name pos:start="1163:43" pos:end="1163:53">CPUX86State</name></expr></argument>,<argument pos:start="1163:55" pos:end="1163:77"><expr pos:start="1163:55" pos:end="1163:77"><name pos:start="1163:55" pos:end="1163:66"><name pos:start="1163:55" pos:end="1163:62">xmm_regs</name><index pos:start="1163:63" pos:end="1163:66">[<expr pos:start="1163:64" pos:end="1163:65"><name pos:start="1163:64" pos:end="1163:65">rm</name></expr>]</index></name><operator pos:start="1163:67" pos:end="1163:67">.</operator><call pos:start="1163:68" pos:end="1163:77"><name pos:start="1163:68" pos:end="1163:72">XMM_W</name><argument_list pos:start="1163:73" pos:end="1163:77">(<argument pos:start="1163:74" pos:end="1163:76"><expr pos:start="1163:74" pos:end="1163:76"><name pos:start="1163:74" pos:end="1163:76">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1165:15" pos:end="1175:13">else <block pos:start="1165:20" pos:end="1175:13">{<block_content pos:start="1167:17" pos:end="1173:81">

                <expr_stmt pos:start="1167:17" pos:end="1167:25"><expr pos:start="1167:17" pos:end="1167:24"><name pos:start="1167:17" pos:end="1167:19">val</name> <operator pos:start="1167:21" pos:end="1167:22">&amp;=</operator> <literal type="number" pos:start="1167:24" pos:end="1167:24">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1169:17" pos:end="1169:33"><expr pos:start="1169:17" pos:end="1169:32"><name pos:start="1169:17" pos:end="1169:18">rm</name> <operator pos:start="1169:20" pos:end="1169:20">=</operator> <operator pos:start="1169:22" pos:end="1169:22">(</operator><name pos:start="1169:23" pos:end="1169:27">modrm</name> <operator pos:start="1169:29" pos:end="1169:29">&amp;</operator> <literal type="number" pos:start="1169:31" pos:end="1169:31">7</literal><operator pos:start="1169:32" pos:end="1169:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1171:17" pos:end="1173:81"><expr pos:start="1171:17" pos:end="1173:80"><call pos:start="1171:17" pos:end="1173:80"><name pos:start="1171:17" pos:end="1171:32">tcg_gen_ld16u_tl</name><argument_list pos:start="1171:33" pos:end="1173:80">(<argument pos:start="1171:34" pos:end="1171:41"><expr pos:start="1171:34" pos:end="1171:41"><name pos:start="1171:34" pos:end="1171:41"><name pos:start="1171:34" pos:end="1171:38">cpu_T</name><index pos:start="1171:39" pos:end="1171:41">[<expr pos:start="1171:40" pos:end="1171:40"><literal type="number" pos:start="1171:40" pos:end="1171:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1171:44" pos:end="1171:50"><expr pos:start="1171:44" pos:end="1171:50"><name pos:start="1171:44" pos:end="1171:50">cpu_env</name></expr></argument>,

                                <argument pos:start="1173:33" pos:end="1173:79"><expr pos:start="1173:33" pos:end="1173:79"><call pos:start="1173:33" pos:end="1173:79"><name pos:start="1173:33" pos:end="1173:40">offsetof</name><argument_list pos:start="1173:41" pos:end="1173:79">(<argument pos:start="1173:42" pos:end="1173:52"><expr pos:start="1173:42" pos:end="1173:52"><name pos:start="1173:42" pos:end="1173:52">CPUX86State</name></expr></argument>,<argument pos:start="1173:54" pos:end="1173:78"><expr pos:start="1173:54" pos:end="1173:78"><name pos:start="1173:54" pos:end="1173:63"><name pos:start="1173:54" pos:end="1173:59">fpregs</name><index pos:start="1173:60" pos:end="1173:63">[<expr pos:start="1173:61" pos:end="1173:62"><name pos:start="1173:61" pos:end="1173:62">rm</name></expr>]</index></name><operator pos:start="1173:64" pos:end="1173:64">.</operator><call pos:start="1173:65" pos:end="1173:78"><name pos:start="1173:65" pos:end="1173:73"><name pos:start="1173:65" pos:end="1173:67">mmx</name><operator pos:start="1173:68" pos:end="1173:68">.</operator><name pos:start="1173:69" pos:end="1173:73">MMX_W</name></name><argument_list pos:start="1173:74" pos:end="1173:78">(<argument pos:start="1173:75" pos:end="1173:77"><expr pos:start="1173:75" pos:end="1173:77"><name pos:start="1173:75" pos:end="1173:77">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1177:13" pos:end="1177:45"><expr pos:start="1177:13" pos:end="1177:44"><name pos:start="1177:13" pos:end="1177:15">reg</name> <operator pos:start="1177:17" pos:end="1177:17">=</operator> <operator pos:start="1177:19" pos:end="1177:19">(</operator><operator pos:start="1177:20" pos:end="1177:20">(</operator><name pos:start="1177:21" pos:end="1177:25">modrm</name> <operator pos:start="1177:27" pos:end="1177:28">&gt;&gt;</operator> <literal type="number" pos:start="1177:30" pos:end="1177:30">3</literal><operator pos:start="1177:31" pos:end="1177:31">)</operator> <operator pos:start="1177:33" pos:end="1177:33">&amp;</operator> <literal type="number" pos:start="1177:35" pos:end="1177:35">7</literal><operator pos:start="1177:36" pos:end="1177:36">)</operator> <operator pos:start="1177:38" pos:end="1177:38">|</operator> <name pos:start="1177:40" pos:end="1177:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1179:13" pos:end="1179:48"><expr pos:start="1179:13" pos:end="1179:47"><call pos:start="1179:13" pos:end="1179:47"><name pos:start="1179:13" pos:end="1179:28">gen_op_mov_reg_v</name><argument_list pos:start="1179:29" pos:end="1179:47">(<argument pos:start="1179:30" pos:end="1179:31"><expr pos:start="1179:30" pos:end="1179:31"><name pos:start="1179:30" pos:end="1179:31">ot</name></expr></argument>, <argument pos:start="1179:34" pos:end="1179:36"><expr pos:start="1179:34" pos:end="1179:36"><name pos:start="1179:34" pos:end="1179:36">reg</name></expr></argument>, <argument pos:start="1179:39" pos:end="1179:46"><expr pos:start="1179:39" pos:end="1179:46"><name pos:start="1179:39" pos:end="1179:46"><name pos:start="1179:39" pos:end="1179:43">cpu_T</name><index pos:start="1179:44" pos:end="1179:46">[<expr pos:start="1179:45" pos:end="1179:45"><literal type="number" pos:start="1179:45" pos:end="1179:45">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1181:13" pos:end="1181:18">break;</break>

        <case pos:start="1183:9" pos:end="1183:19">case <expr pos:start="1183:14" pos:end="1183:18"><literal type="number" pos:start="1183:14" pos:end="1183:18">0x1d6</literal></expr>:</case> <comment type="block" pos:start="1183:21" pos:end="1183:38">/* movq ea, xmm */</comment>

            <if_stmt pos:start="1185:13" pos:end="1203:13"><if pos:start="1185:13" pos:end="1193:13">if <condition pos:start="1185:16" pos:end="1185:25">(<expr pos:start="1185:17" pos:end="1185:24"><name pos:start="1185:17" pos:end="1185:19">mod</name> <operator pos:start="1185:21" pos:end="1185:22">!=</operator> <literal type="number" pos:start="1185:24" pos:end="1185:24">3</literal></expr>)</condition> <block pos:start="1185:27" pos:end="1193:13">{<block_content pos:start="1187:17" pos:end="1191:68">

                <expr_stmt pos:start="1187:17" pos:end="1187:45"><expr pos:start="1187:17" pos:end="1187:44"><call pos:start="1187:17" pos:end="1187:44"><name pos:start="1187:17" pos:end="1187:29">gen_lea_modrm</name><argument_list pos:start="1187:30" pos:end="1187:44">(<argument pos:start="1187:31" pos:end="1187:33"><expr pos:start="1187:31" pos:end="1187:33"><name pos:start="1187:31" pos:end="1187:33">env</name></expr></argument>, <argument pos:start="1187:36" pos:end="1187:36"><expr pos:start="1187:36" pos:end="1187:36"><name pos:start="1187:36" pos:end="1187:36">s</name></expr></argument>, <argument pos:start="1187:39" pos:end="1187:43"><expr pos:start="1187:39" pos:end="1187:43"><name pos:start="1187:39" pos:end="1187:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1189:17" pos:end="1191:68"><expr pos:start="1189:17" pos:end="1191:67"><call pos:start="1189:17" pos:end="1191:67"><name pos:start="1189:17" pos:end="1189:30">gen_stq_env_A0</name><argument_list pos:start="1189:31" pos:end="1191:67">(<argument pos:start="1189:32" pos:end="1189:32"><expr pos:start="1189:32" pos:end="1189:32"><name pos:start="1189:32" pos:end="1189:32">s</name></expr></argument>, <argument pos:start="1189:35" pos:end="1191:66"><expr pos:start="1189:35" pos:end="1191:66"><call pos:start="1189:35" pos:end="1191:66"><name pos:start="1189:35" pos:end="1189:42">offsetof</name><argument_list pos:start="1189:43" pos:end="1191:66">(<argument pos:start="1189:44" pos:end="1189:54"><expr pos:start="1189:44" pos:end="1189:54"><name pos:start="1189:44" pos:end="1189:54">CPUX86State</name></expr></argument>,

                                           <argument pos:start="1191:44" pos:end="1191:65"><expr pos:start="1191:44" pos:end="1191:65"><name pos:start="1191:44" pos:end="1191:56"><name pos:start="1191:44" pos:end="1191:51">xmm_regs</name><index pos:start="1191:52" pos:end="1191:56">[<expr pos:start="1191:53" pos:end="1191:55"><name pos:start="1191:53" pos:end="1191:55">reg</name></expr>]</index></name><operator pos:start="1191:57" pos:end="1191:57">.</operator><call pos:start="1191:58" pos:end="1191:65"><name pos:start="1191:58" pos:end="1191:62">XMM_Q</name><argument_list pos:start="1191:63" pos:end="1191:65">(<argument pos:start="1191:64" pos:end="1191:64"><expr pos:start="1191:64" pos:end="1191:64"><literal type="number" pos:start="1191:64" pos:end="1191:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1193:15" pos:end="1203:13">else <block pos:start="1193:20" pos:end="1203:13">{<block_content pos:start="1195:17" pos:end="1201:79">

                <expr_stmt pos:start="1195:17" pos:end="1195:44"><expr pos:start="1195:17" pos:end="1195:43"><name pos:start="1195:17" pos:end="1195:18">rm</name> <operator pos:start="1195:20" pos:end="1195:20">=</operator> <operator pos:start="1195:22" pos:end="1195:22">(</operator><name pos:start="1195:23" pos:end="1195:27">modrm</name> <operator pos:start="1195:29" pos:end="1195:29">&amp;</operator> <literal type="number" pos:start="1195:31" pos:end="1195:31">7</literal><operator pos:start="1195:32" pos:end="1195:32">)</operator> <operator pos:start="1195:34" pos:end="1195:34">|</operator> <call pos:start="1195:36" pos:end="1195:43"><name pos:start="1195:36" pos:end="1195:40">REX_B</name><argument_list pos:start="1195:41" pos:end="1195:43">(<argument pos:start="1195:42" pos:end="1195:42"><expr pos:start="1195:42" pos:end="1195:42"><name pos:start="1195:42" pos:end="1195:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1197:17" pos:end="1199:74"><expr pos:start="1197:17" pos:end="1199:73"><call pos:start="1197:17" pos:end="1199:73"><name pos:start="1197:17" pos:end="1197:27">gen_op_movq</name><argument_list pos:start="1197:28" pos:end="1199:73">(<argument pos:start="1197:29" pos:end="1197:71"><expr pos:start="1197:29" pos:end="1197:71"><call pos:start="1197:29" pos:end="1197:71"><name pos:start="1197:29" pos:end="1197:36">offsetof</name><argument_list pos:start="1197:37" pos:end="1197:71">(<argument pos:start="1197:38" pos:end="1197:48"><expr pos:start="1197:38" pos:end="1197:48"><name pos:start="1197:38" pos:end="1197:48">CPUX86State</name></expr></argument>,<argument pos:start="1197:50" pos:end="1197:70"><expr pos:start="1197:50" pos:end="1197:70"><name pos:start="1197:50" pos:end="1197:61"><name pos:start="1197:50" pos:end="1197:57">xmm_regs</name><index pos:start="1197:58" pos:end="1197:61">[<expr pos:start="1197:59" pos:end="1197:60"><name pos:start="1197:59" pos:end="1197:60">rm</name></expr>]</index></name><operator pos:start="1197:62" pos:end="1197:62">.</operator><call pos:start="1197:63" pos:end="1197:70"><name pos:start="1197:63" pos:end="1197:67">XMM_Q</name><argument_list pos:start="1197:68" pos:end="1197:70">(<argument pos:start="1197:69" pos:end="1197:69"><expr pos:start="1197:69" pos:end="1197:69"><literal type="number" pos:start="1197:69" pos:end="1197:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="1199:29" pos:end="1199:72"><expr pos:start="1199:29" pos:end="1199:72"><call pos:start="1199:29" pos:end="1199:72"><name pos:start="1199:29" pos:end="1199:36">offsetof</name><argument_list pos:start="1199:37" pos:end="1199:72">(<argument pos:start="1199:38" pos:end="1199:48"><expr pos:start="1199:38" pos:end="1199:48"><name pos:start="1199:38" pos:end="1199:48">CPUX86State</name></expr></argument>,<argument pos:start="1199:50" pos:end="1199:71"><expr pos:start="1199:50" pos:end="1199:71"><name pos:start="1199:50" pos:end="1199:62"><name pos:start="1199:50" pos:end="1199:57">xmm_regs</name><index pos:start="1199:58" pos:end="1199:62">[<expr pos:start="1199:59" pos:end="1199:61"><name pos:start="1199:59" pos:end="1199:61">reg</name></expr>]</index></name><operator pos:start="1199:63" pos:end="1199:63">.</operator><call pos:start="1199:64" pos:end="1199:71"><name pos:start="1199:64" pos:end="1199:68">XMM_Q</name><argument_list pos:start="1199:69" pos:end="1199:71">(<argument pos:start="1199:70" pos:end="1199:70"><expr pos:start="1199:70" pos:end="1199:70"><literal type="number" pos:start="1199:70" pos:end="1199:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1201:17" pos:end="1201:79"><expr pos:start="1201:17" pos:end="1201:78"><call pos:start="1201:17" pos:end="1201:78"><name pos:start="1201:17" pos:end="1201:33">gen_op_movq_env_0</name><argument_list pos:start="1201:34" pos:end="1201:78">(<argument pos:start="1201:35" pos:end="1201:77"><expr pos:start="1201:35" pos:end="1201:77"><call pos:start="1201:35" pos:end="1201:77"><name pos:start="1201:35" pos:end="1201:42">offsetof</name><argument_list pos:start="1201:43" pos:end="1201:77">(<argument pos:start="1201:44" pos:end="1201:54"><expr pos:start="1201:44" pos:end="1201:54"><name pos:start="1201:44" pos:end="1201:54">CPUX86State</name></expr></argument>,<argument pos:start="1201:56" pos:end="1201:76"><expr pos:start="1201:56" pos:end="1201:76"><name pos:start="1201:56" pos:end="1201:67"><name pos:start="1201:56" pos:end="1201:63">xmm_regs</name><index pos:start="1201:64" pos:end="1201:67">[<expr pos:start="1201:65" pos:end="1201:66"><name pos:start="1201:65" pos:end="1201:66">rm</name></expr>]</index></name><operator pos:start="1201:68" pos:end="1201:68">.</operator><call pos:start="1201:69" pos:end="1201:76"><name pos:start="1201:69" pos:end="1201:73">XMM_Q</name><argument_list pos:start="1201:74" pos:end="1201:76">(<argument pos:start="1201:75" pos:end="1201:75"><expr pos:start="1201:75" pos:end="1201:75"><literal type="number" pos:start="1201:75" pos:end="1201:75">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="1205:13" pos:end="1205:18">break;</break>

        <case pos:start="1207:9" pos:end="1207:19">case <expr pos:start="1207:14" pos:end="1207:18"><literal type="number" pos:start="1207:14" pos:end="1207:18">0x2d6</literal></expr>:</case> <comment type="block" pos:start="1207:21" pos:end="1207:33">/* movq2dq */</comment>

            <expr_stmt pos:start="1209:13" pos:end="1209:42"><expr pos:start="1209:13" pos:end="1209:41"><call pos:start="1209:13" pos:end="1209:41"><name pos:start="1209:13" pos:end="1209:32">gen_helper_enter_mmx</name><argument_list pos:start="1209:33" pos:end="1209:41">(<argument pos:start="1209:34" pos:end="1209:40"><expr pos:start="1209:34" pos:end="1209:40"><name pos:start="1209:34" pos:end="1209:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1211:13" pos:end="1211:29"><expr pos:start="1211:13" pos:end="1211:28"><name pos:start="1211:13" pos:end="1211:14">rm</name> <operator pos:start="1211:16" pos:end="1211:16">=</operator> <operator pos:start="1211:18" pos:end="1211:18">(</operator><name pos:start="1211:19" pos:end="1211:23">modrm</name> <operator pos:start="1211:25" pos:end="1211:25">&amp;</operator> <literal type="number" pos:start="1211:27" pos:end="1211:27">7</literal><operator pos:start="1211:28" pos:end="1211:28">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1213:13" pos:end="1215:62"><expr pos:start="1213:13" pos:end="1215:61"><call pos:start="1213:13" pos:end="1215:61"><name pos:start="1213:13" pos:end="1213:23">gen_op_movq</name><argument_list pos:start="1213:24" pos:end="1215:61">(<argument pos:start="1213:25" pos:end="1213:68"><expr pos:start="1213:25" pos:end="1213:68"><call pos:start="1213:25" pos:end="1213:68"><name pos:start="1213:25" pos:end="1213:32">offsetof</name><argument_list pos:start="1213:33" pos:end="1213:68">(<argument pos:start="1213:34" pos:end="1213:44"><expr pos:start="1213:34" pos:end="1213:44"><name pos:start="1213:34" pos:end="1213:44">CPUX86State</name></expr></argument>,<argument pos:start="1213:46" pos:end="1213:67"><expr pos:start="1213:46" pos:end="1213:67"><name pos:start="1213:46" pos:end="1213:58"><name pos:start="1213:46" pos:end="1213:53">xmm_regs</name><index pos:start="1213:54" pos:end="1213:58">[<expr pos:start="1213:55" pos:end="1213:57"><name pos:start="1213:55" pos:end="1213:57">reg</name></expr>]</index></name><operator pos:start="1213:59" pos:end="1213:59">.</operator><call pos:start="1213:60" pos:end="1213:67"><name pos:start="1213:60" pos:end="1213:64">XMM_Q</name><argument_list pos:start="1213:65" pos:end="1213:67">(<argument pos:start="1213:66" pos:end="1213:66"><expr pos:start="1213:66" pos:end="1213:66"><literal type="number" pos:start="1213:66" pos:end="1213:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="1215:25" pos:end="1215:60"><expr pos:start="1215:25" pos:end="1215:60"><call pos:start="1215:25" pos:end="1215:60"><name pos:start="1215:25" pos:end="1215:32">offsetof</name><argument_list pos:start="1215:33" pos:end="1215:60">(<argument pos:start="1215:34" pos:end="1215:44"><expr pos:start="1215:34" pos:end="1215:44"><name pos:start="1215:34" pos:end="1215:44">CPUX86State</name></expr></argument>,<argument pos:start="1215:46" pos:end="1215:59"><expr pos:start="1215:46" pos:end="1215:59"><name pos:start="1215:46" pos:end="1215:55"><name pos:start="1215:46" pos:end="1215:51">fpregs</name><index pos:start="1215:52" pos:end="1215:55">[<expr pos:start="1215:53" pos:end="1215:54"><name pos:start="1215:53" pos:end="1215:54">rm</name></expr>]</index></name><operator pos:start="1215:56" pos:end="1215:56">.</operator><name pos:start="1215:57" pos:end="1215:59">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1217:13" pos:end="1217:76"><expr pos:start="1217:13" pos:end="1217:75"><call pos:start="1217:13" pos:end="1217:75"><name pos:start="1217:13" pos:end="1217:29">gen_op_movq_env_0</name><argument_list pos:start="1217:30" pos:end="1217:75">(<argument pos:start="1217:31" pos:end="1217:74"><expr pos:start="1217:31" pos:end="1217:74"><call pos:start="1217:31" pos:end="1217:74"><name pos:start="1217:31" pos:end="1217:38">offsetof</name><argument_list pos:start="1217:39" pos:end="1217:74">(<argument pos:start="1217:40" pos:end="1217:50"><expr pos:start="1217:40" pos:end="1217:50"><name pos:start="1217:40" pos:end="1217:50">CPUX86State</name></expr></argument>,<argument pos:start="1217:52" pos:end="1217:73"><expr pos:start="1217:52" pos:end="1217:73"><name pos:start="1217:52" pos:end="1217:64"><name pos:start="1217:52" pos:end="1217:59">xmm_regs</name><index pos:start="1217:60" pos:end="1217:64">[<expr pos:start="1217:61" pos:end="1217:63"><name pos:start="1217:61" pos:end="1217:63">reg</name></expr>]</index></name><operator pos:start="1217:65" pos:end="1217:65">.</operator><call pos:start="1217:66" pos:end="1217:73"><name pos:start="1217:66" pos:end="1217:70">XMM_Q</name><argument_list pos:start="1217:71" pos:end="1217:73">(<argument pos:start="1217:72" pos:end="1217:72"><expr pos:start="1217:72" pos:end="1217:72"><literal type="number" pos:start="1217:72" pos:end="1217:72">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1219:13" pos:end="1219:18">break;</break>

        <case pos:start="1221:9" pos:end="1221:19">case <expr pos:start="1221:14" pos:end="1221:18"><literal type="number" pos:start="1221:14" pos:end="1221:18">0x3d6</literal></expr>:</case> <comment type="block" pos:start="1221:21" pos:end="1221:33">/* movdq2q */</comment>

            <expr_stmt pos:start="1223:13" pos:end="1223:42"><expr pos:start="1223:13" pos:end="1223:41"><call pos:start="1223:13" pos:end="1223:41"><name pos:start="1223:13" pos:end="1223:32">gen_helper_enter_mmx</name><argument_list pos:start="1223:33" pos:end="1223:41">(<argument pos:start="1223:34" pos:end="1223:40"><expr pos:start="1223:34" pos:end="1223:40"><name pos:start="1223:34" pos:end="1223:40">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1225:13" pos:end="1225:40"><expr pos:start="1225:13" pos:end="1225:39"><name pos:start="1225:13" pos:end="1225:14">rm</name> <operator pos:start="1225:16" pos:end="1225:16">=</operator> <operator pos:start="1225:18" pos:end="1225:18">(</operator><name pos:start="1225:19" pos:end="1225:23">modrm</name> <operator pos:start="1225:25" pos:end="1225:25">&amp;</operator> <literal type="number" pos:start="1225:27" pos:end="1225:27">7</literal><operator pos:start="1225:28" pos:end="1225:28">)</operator> <operator pos:start="1225:30" pos:end="1225:30">|</operator> <call pos:start="1225:32" pos:end="1225:39"><name pos:start="1225:32" pos:end="1225:36">REX_B</name><argument_list pos:start="1225:37" pos:end="1225:39">(<argument pos:start="1225:38" pos:end="1225:38"><expr pos:start="1225:38" pos:end="1225:38"><name pos:start="1225:38" pos:end="1225:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1227:13" pos:end="1229:69"><expr pos:start="1227:13" pos:end="1229:68"><call pos:start="1227:13" pos:end="1229:68"><name pos:start="1227:13" pos:end="1227:23">gen_op_movq</name><argument_list pos:start="1227:24" pos:end="1229:68">(<argument pos:start="1227:25" pos:end="1227:65"><expr pos:start="1227:25" pos:end="1227:65"><call pos:start="1227:25" pos:end="1227:65"><name pos:start="1227:25" pos:end="1227:32">offsetof</name><argument_list pos:start="1227:33" pos:end="1227:65">(<argument pos:start="1227:34" pos:end="1227:44"><expr pos:start="1227:34" pos:end="1227:44"><name pos:start="1227:34" pos:end="1227:44">CPUX86State</name></expr></argument>,<argument pos:start="1227:46" pos:end="1227:64"><expr pos:start="1227:46" pos:end="1227:64"><name pos:start="1227:46" pos:end="1227:60"><name pos:start="1227:46" pos:end="1227:51">fpregs</name><index pos:start="1227:52" pos:end="1227:60">[<expr pos:start="1227:53" pos:end="1227:59"><name pos:start="1227:53" pos:end="1227:55">reg</name> <operator pos:start="1227:57" pos:end="1227:57">&amp;</operator> <literal type="number" pos:start="1227:59" pos:end="1227:59">7</literal></expr>]</index></name><operator pos:start="1227:61" pos:end="1227:61">.</operator><name pos:start="1227:62" pos:end="1227:64">mmx</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="1229:25" pos:end="1229:67"><expr pos:start="1229:25" pos:end="1229:67"><call pos:start="1229:25" pos:end="1229:67"><name pos:start="1229:25" pos:end="1229:32">offsetof</name><argument_list pos:start="1229:33" pos:end="1229:67">(<argument pos:start="1229:34" pos:end="1229:44"><expr pos:start="1229:34" pos:end="1229:44"><name pos:start="1229:34" pos:end="1229:44">CPUX86State</name></expr></argument>,<argument pos:start="1229:46" pos:end="1229:66"><expr pos:start="1229:46" pos:end="1229:66"><name pos:start="1229:46" pos:end="1229:57"><name pos:start="1229:46" pos:end="1229:53">xmm_regs</name><index pos:start="1229:54" pos:end="1229:57">[<expr pos:start="1229:55" pos:end="1229:56"><name pos:start="1229:55" pos:end="1229:56">rm</name></expr>]</index></name><operator pos:start="1229:58" pos:end="1229:58">.</operator><call pos:start="1229:59" pos:end="1229:66"><name pos:start="1229:59" pos:end="1229:63">XMM_Q</name><argument_list pos:start="1229:64" pos:end="1229:66">(<argument pos:start="1229:65" pos:end="1229:65"><expr pos:start="1229:65" pos:end="1229:65"><literal type="number" pos:start="1229:65" pos:end="1229:65">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1231:13" pos:end="1231:18">break;</break>

        <case pos:start="1233:9" pos:end="1233:18">case <expr pos:start="1233:14" pos:end="1233:17"><literal type="number" pos:start="1233:14" pos:end="1233:17">0xd7</literal></expr>:</case> <comment type="block" pos:start="1233:20" pos:end="1233:33">/* pmovmskb */</comment>

        <case pos:start="1235:9" pos:end="1235:19">case <expr pos:start="1235:14" pos:end="1235:18"><literal type="number" pos:start="1235:14" pos:end="1235:18">0x1d7</literal></expr>:</case>

            <if_stmt pos:start="1237:13" pos:end="1239:32"><if pos:start="1237:13" pos:end="1239:32">if <condition pos:start="1237:16" pos:end="1237:25">(<expr pos:start="1237:17" pos:end="1237:24"><name pos:start="1237:17" pos:end="1237:19">mod</name> <operator pos:start="1237:21" pos:end="1237:22">!=</operator> <literal type="number" pos:start="1237:24" pos:end="1237:24">3</literal></expr>)</condition><block type="pseudo" pos:start="1239:17" pos:end="1239:32"><block_content pos:start="1239:17" pos:end="1239:32">

                <goto pos:start="1239:17" pos:end="1239:32">goto <name pos:start="1239:22" pos:end="1239:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="1241:13" pos:end="1257:13"><if pos:start="1241:13" pos:end="1249:13">if <condition pos:start="1241:16" pos:end="1241:19">(<expr pos:start="1241:17" pos:end="1241:18"><name pos:start="1241:17" pos:end="1241:18">b1</name></expr>)</condition> <block pos:start="1241:21" pos:end="1249:13">{<block_content pos:start="1243:17" pos:end="1247:73">

                <expr_stmt pos:start="1243:17" pos:end="1243:44"><expr pos:start="1243:17" pos:end="1243:43"><name pos:start="1243:17" pos:end="1243:18">rm</name> <operator pos:start="1243:20" pos:end="1243:20">=</operator> <operator pos:start="1243:22" pos:end="1243:22">(</operator><name pos:start="1243:23" pos:end="1243:27">modrm</name> <operator pos:start="1243:29" pos:end="1243:29">&amp;</operator> <literal type="number" pos:start="1243:31" pos:end="1243:31">7</literal><operator pos:start="1243:32" pos:end="1243:32">)</operator> <operator pos:start="1243:34" pos:end="1243:34">|</operator> <call pos:start="1243:36" pos:end="1243:43"><name pos:start="1243:36" pos:end="1243:40">REX_B</name><argument_list pos:start="1243:41" pos:end="1243:43">(<argument pos:start="1243:42" pos:end="1243:42"><expr pos:start="1243:42" pos:end="1243:42"><name pos:start="1243:42" pos:end="1243:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1245:17" pos:end="1245:88"><expr pos:start="1245:17" pos:end="1245:87"><call pos:start="1245:17" pos:end="1245:87"><name pos:start="1245:17" pos:end="1245:32">tcg_gen_addi_ptr</name><argument_list pos:start="1245:33" pos:end="1245:87">(<argument pos:start="1245:34" pos:end="1245:41"><expr pos:start="1245:34" pos:end="1245:41"><name pos:start="1245:34" pos:end="1245:41">cpu_ptr0</name></expr></argument>, <argument pos:start="1245:44" pos:end="1245:50"><expr pos:start="1245:44" pos:end="1245:50"><name pos:start="1245:44" pos:end="1245:50">cpu_env</name></expr></argument>, <argument pos:start="1245:53" pos:end="1245:86"><expr pos:start="1245:53" pos:end="1245:86"><call pos:start="1245:53" pos:end="1245:86"><name pos:start="1245:53" pos:end="1245:60">offsetof</name><argument_list pos:start="1245:61" pos:end="1245:86">(<argument pos:start="1245:62" pos:end="1245:72"><expr pos:start="1245:62" pos:end="1245:72"><name pos:start="1245:62" pos:end="1245:72">CPUX86State</name></expr></argument>,<argument pos:start="1245:74" pos:end="1245:85"><expr pos:start="1245:74" pos:end="1245:85"><name pos:start="1245:74" pos:end="1245:85"><name pos:start="1245:74" pos:end="1245:81">xmm_regs</name><index pos:start="1245:82" pos:end="1245:85">[<expr pos:start="1245:83" pos:end="1245:84"><name pos:start="1245:83" pos:end="1245:84">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1247:17" pos:end="1247:73"><expr pos:start="1247:17" pos:end="1247:72"><call pos:start="1247:17" pos:end="1247:72"><name pos:start="1247:17" pos:end="1247:39">gen_helper_pmovmskb_xmm</name><argument_list pos:start="1247:40" pos:end="1247:72">(<argument pos:start="1247:41" pos:end="1247:52"><expr pos:start="1247:41" pos:end="1247:52"><name pos:start="1247:41" pos:end="1247:52">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1247:55" pos:end="1247:61"><expr pos:start="1247:55" pos:end="1247:61"><name pos:start="1247:55" pos:end="1247:61">cpu_env</name></expr></argument>, <argument pos:start="1247:64" pos:end="1247:71"><expr pos:start="1247:64" pos:end="1247:71"><name pos:start="1247:64" pos:end="1247:71">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1249:15" pos:end="1257:13">else <block pos:start="1249:20" pos:end="1257:13">{<block_content pos:start="1251:17" pos:end="1255:73">

                <expr_stmt pos:start="1251:17" pos:end="1251:33"><expr pos:start="1251:17" pos:end="1251:32"><name pos:start="1251:17" pos:end="1251:18">rm</name> <operator pos:start="1251:20" pos:end="1251:20">=</operator> <operator pos:start="1251:22" pos:end="1251:22">(</operator><name pos:start="1251:23" pos:end="1251:27">modrm</name> <operator pos:start="1251:29" pos:end="1251:29">&amp;</operator> <literal type="number" pos:start="1251:31" pos:end="1251:31">7</literal><operator pos:start="1251:32" pos:end="1251:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1253:17" pos:end="1253:90"><expr pos:start="1253:17" pos:end="1253:89"><call pos:start="1253:17" pos:end="1253:89"><name pos:start="1253:17" pos:end="1253:32">tcg_gen_addi_ptr</name><argument_list pos:start="1253:33" pos:end="1253:89">(<argument pos:start="1253:34" pos:end="1253:41"><expr pos:start="1253:34" pos:end="1253:41"><name pos:start="1253:34" pos:end="1253:41">cpu_ptr0</name></expr></argument>, <argument pos:start="1253:44" pos:end="1253:50"><expr pos:start="1253:44" pos:end="1253:50"><name pos:start="1253:44" pos:end="1253:50">cpu_env</name></expr></argument>, <argument pos:start="1253:53" pos:end="1253:88"><expr pos:start="1253:53" pos:end="1253:88"><call pos:start="1253:53" pos:end="1253:88"><name pos:start="1253:53" pos:end="1253:60">offsetof</name><argument_list pos:start="1253:61" pos:end="1253:88">(<argument pos:start="1253:62" pos:end="1253:72"><expr pos:start="1253:62" pos:end="1253:72"><name pos:start="1253:62" pos:end="1253:72">CPUX86State</name></expr></argument>,<argument pos:start="1253:74" pos:end="1253:87"><expr pos:start="1253:74" pos:end="1253:87"><name pos:start="1253:74" pos:end="1253:83"><name pos:start="1253:74" pos:end="1253:79">fpregs</name><index pos:start="1253:80" pos:end="1253:83">[<expr pos:start="1253:81" pos:end="1253:82"><name pos:start="1253:81" pos:end="1253:82">rm</name></expr>]</index></name><operator pos:start="1253:84" pos:end="1253:84">.</operator><name pos:start="1253:85" pos:end="1253:87">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1255:17" pos:end="1255:73"><expr pos:start="1255:17" pos:end="1255:72"><call pos:start="1255:17" pos:end="1255:72"><name pos:start="1255:17" pos:end="1255:39">gen_helper_pmovmskb_mmx</name><argument_list pos:start="1255:40" pos:end="1255:72">(<argument pos:start="1255:41" pos:end="1255:52"><expr pos:start="1255:41" pos:end="1255:52"><name pos:start="1255:41" pos:end="1255:52">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1255:55" pos:end="1255:61"><expr pos:start="1255:55" pos:end="1255:61"><name pos:start="1255:55" pos:end="1255:61">cpu_env</name></expr></argument>, <argument pos:start="1255:64" pos:end="1255:71"><expr pos:start="1255:64" pos:end="1255:71"><name pos:start="1255:64" pos:end="1255:71">cpu_ptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1259:13" pos:end="1259:45"><expr pos:start="1259:13" pos:end="1259:44"><name pos:start="1259:13" pos:end="1259:15">reg</name> <operator pos:start="1259:17" pos:end="1259:17">=</operator> <operator pos:start="1259:19" pos:end="1259:19">(</operator><operator pos:start="1259:20" pos:end="1259:20">(</operator><name pos:start="1259:21" pos:end="1259:25">modrm</name> <operator pos:start="1259:27" pos:end="1259:28">&gt;&gt;</operator> <literal type="number" pos:start="1259:30" pos:end="1259:30">3</literal><operator pos:start="1259:31" pos:end="1259:31">)</operator> <operator pos:start="1259:33" pos:end="1259:33">&amp;</operator> <literal type="number" pos:start="1259:35" pos:end="1259:35">7</literal><operator pos:start="1259:36" pos:end="1259:36">)</operator> <operator pos:start="1259:38" pos:end="1259:38">|</operator> <name pos:start="1259:40" pos:end="1259:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1261:13" pos:end="1261:61"><expr pos:start="1261:13" pos:end="1261:60"><call pos:start="1261:13" pos:end="1261:60"><name pos:start="1261:13" pos:end="1261:31">tcg_gen_extu_i32_tl</name><argument_list pos:start="1261:32" pos:end="1261:60">(<argument pos:start="1261:33" pos:end="1261:45"><expr pos:start="1261:33" pos:end="1261:45"><name pos:start="1261:33" pos:end="1261:45"><name pos:start="1261:33" pos:end="1261:40">cpu_regs</name><index pos:start="1261:41" pos:end="1261:45">[<expr pos:start="1261:42" pos:end="1261:44"><name pos:start="1261:42" pos:end="1261:44">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1261:48" pos:end="1261:59"><expr pos:start="1261:48" pos:end="1261:59"><name pos:start="1261:48" pos:end="1261:59">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1263:13" pos:end="1263:18">break;</break>



        <case pos:start="1267:9" pos:end="1267:19">case <expr pos:start="1267:14" pos:end="1267:18"><literal type="number" pos:start="1267:14" pos:end="1267:18">0x138</literal></expr>:</case>

        <case pos:start="1269:9" pos:end="1269:19">case <expr pos:start="1269:14" pos:end="1269:18"><literal type="number" pos:start="1269:14" pos:end="1269:18">0x038</literal></expr>:</case>

            <expr_stmt pos:start="1271:13" pos:end="1271:22"><expr pos:start="1271:13" pos:end="1271:21"><name pos:start="1271:13" pos:end="1271:13">b</name> <operator pos:start="1271:15" pos:end="1271:15">=</operator> <name pos:start="1271:17" pos:end="1271:21">modrm</name></expr>;</expr_stmt>

            <if_stmt pos:start="1273:13" pos:end="1277:13"><if pos:start="1273:13" pos:end="1277:13">if <condition pos:start="1273:16" pos:end="1273:35">(<expr pos:start="1273:17" pos:end="1273:34"><operator pos:start="1273:17" pos:end="1273:17">(</operator><name pos:start="1273:18" pos:end="1273:18">b</name> <operator pos:start="1273:20" pos:end="1273:20">&amp;</operator> <literal type="number" pos:start="1273:22" pos:end="1273:25">0xf0</literal><operator pos:start="1273:26" pos:end="1273:26">)</operator> <operator pos:start="1273:28" pos:end="1273:29">==</operator> <literal type="number" pos:start="1273:31" pos:end="1273:34">0xf0</literal></expr>)</condition> <block pos:start="1273:37" pos:end="1277:13">{<block_content pos:start="1275:17" pos:end="1275:33">

                <goto pos:start="1275:17" pos:end="1275:33">goto <name pos:start="1275:22" pos:end="1275:32">do_0f_38_fx</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="1279:13" pos:end="1279:48"><expr pos:start="1279:13" pos:end="1279:47"><name pos:start="1279:13" pos:end="1279:17">modrm</name> <operator pos:start="1279:19" pos:end="1279:19">=</operator> <call pos:start="1279:21" pos:end="1279:47"><name pos:start="1279:21" pos:end="1279:33">cpu_ldub_code</name><argument_list pos:start="1279:34" pos:end="1279:47">(<argument pos:start="1279:35" pos:end="1279:37"><expr pos:start="1279:35" pos:end="1279:37"><name pos:start="1279:35" pos:end="1279:37">env</name></expr></argument>, <argument pos:start="1279:40" pos:end="1279:46"><expr pos:start="1279:40" pos:end="1279:46"><name pos:start="1279:40" pos:end="1279:44"><name pos:start="1279:40" pos:end="1279:40">s</name><operator pos:start="1279:41" pos:end="1279:42">-&gt;</operator><name pos:start="1279:43" pos:end="1279:44">pc</name></name><operator pos:start="1279:45" pos:end="1279:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1281:13" pos:end="1281:27"><expr pos:start="1281:13" pos:end="1281:26"><name pos:start="1281:13" pos:end="1281:14">rm</name> <operator pos:start="1281:16" pos:end="1281:16">=</operator> <name pos:start="1281:18" pos:end="1281:22">modrm</name> <operator pos:start="1281:24" pos:end="1281:24">&amp;</operator> <literal type="number" pos:start="1281:26" pos:end="1281:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1283:13" pos:end="1283:45"><expr pos:start="1283:13" pos:end="1283:44"><name pos:start="1283:13" pos:end="1283:15">reg</name> <operator pos:start="1283:17" pos:end="1283:17">=</operator> <operator pos:start="1283:19" pos:end="1283:19">(</operator><operator pos:start="1283:20" pos:end="1283:20">(</operator><name pos:start="1283:21" pos:end="1283:25">modrm</name> <operator pos:start="1283:27" pos:end="1283:28">&gt;&gt;</operator> <literal type="number" pos:start="1283:30" pos:end="1283:30">3</literal><operator pos:start="1283:31" pos:end="1283:31">)</operator> <operator pos:start="1283:33" pos:end="1283:33">&amp;</operator> <literal type="number" pos:start="1283:35" pos:end="1283:35">7</literal><operator pos:start="1283:36" pos:end="1283:36">)</operator> <operator pos:start="1283:38" pos:end="1283:38">|</operator> <name pos:start="1283:40" pos:end="1283:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1285:13" pos:end="1285:35"><expr pos:start="1285:13" pos:end="1285:34"><name pos:start="1285:13" pos:end="1285:15">mod</name> <operator pos:start="1285:17" pos:end="1285:17">=</operator> <operator pos:start="1285:19" pos:end="1285:19">(</operator><name pos:start="1285:20" pos:end="1285:24">modrm</name> <operator pos:start="1285:26" pos:end="1285:27">&gt;&gt;</operator> <literal type="number" pos:start="1285:29" pos:end="1285:29">6</literal><operator pos:start="1285:30" pos:end="1285:30">)</operator> <operator pos:start="1285:32" pos:end="1285:32">&amp;</operator> <literal type="number" pos:start="1285:34" pos:end="1285:34">3</literal></expr>;</expr_stmt>

            <if_stmt pos:start="1287:13" pos:end="1291:13"><if pos:start="1287:13" pos:end="1291:13">if <condition pos:start="1287:16" pos:end="1287:24">(<expr pos:start="1287:17" pos:end="1287:23"><name pos:start="1287:17" pos:end="1287:18">b1</name> <operator pos:start="1287:20" pos:end="1287:21">&gt;=</operator> <literal type="number" pos:start="1287:23" pos:end="1287:23">2</literal></expr>)</condition> <block pos:start="1287:26" pos:end="1291:13">{<block_content pos:start="1289:17" pos:end="1289:32">

                <goto pos:start="1289:17" pos:end="1289:32">goto <name pos:start="1289:22" pos:end="1289:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="1295:13" pos:end="1295:49"><expr pos:start="1295:13" pos:end="1295:48"><name pos:start="1295:13" pos:end="1295:22">sse_fn_epp</name> <operator pos:start="1295:24" pos:end="1295:24">=</operator> <name pos:start="1295:26" pos:end="1295:41"><name pos:start="1295:26" pos:end="1295:38">sse_op_table6</name><index pos:start="1295:39" pos:end="1295:41">[<expr pos:start="1295:40" pos:end="1295:40"><name pos:start="1295:40" pos:end="1295:40">b</name></expr>]</index></name><operator pos:start="1295:42" pos:end="1295:42">.</operator><name pos:start="1295:43" pos:end="1295:48"><name pos:start="1295:43" pos:end="1295:44">op</name><index pos:start="1295:45" pos:end="1295:48">[<expr pos:start="1295:46" pos:end="1295:47"><name pos:start="1295:46" pos:end="1295:47">b1</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="1297:13" pos:end="1301:13"><if pos:start="1297:13" pos:end="1301:13">if <condition pos:start="1297:16" pos:end="1297:28">(<expr pos:start="1297:17" pos:end="1297:27"><operator pos:start="1297:17" pos:end="1297:17">!</operator><name pos:start="1297:18" pos:end="1297:27">sse_fn_epp</name></expr>)</condition> <block pos:start="1297:30" pos:end="1301:13">{<block_content pos:start="1299:17" pos:end="1299:32">

                <goto pos:start="1299:17" pos:end="1299:32">goto <name pos:start="1299:22" pos:end="1299:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="1303:13" pos:end="1305:32"><if pos:start="1303:13" pos:end="1305:32">if <condition pos:start="1303:16" pos:end="1303:69">(<expr pos:start="1303:17" pos:end="1303:68"><operator pos:start="1303:17" pos:end="1303:17">!</operator><operator pos:start="1303:18" pos:end="1303:18">(</operator><name pos:start="1303:19" pos:end="1303:39"><name pos:start="1303:19" pos:end="1303:19">s</name><operator pos:start="1303:20" pos:end="1303:21">-&gt;</operator><name pos:start="1303:22" pos:end="1303:39">cpuid_ext_features</name></name> <operator pos:start="1303:41" pos:end="1303:41">&amp;</operator> <name pos:start="1303:43" pos:end="1303:58"><name pos:start="1303:43" pos:end="1303:55">sse_op_table6</name><index pos:start="1303:56" pos:end="1303:58">[<expr pos:start="1303:57" pos:end="1303:57"><name pos:start="1303:57" pos:end="1303:57">b</name></expr>]</index></name><operator pos:start="1303:59" pos:end="1303:59">.</operator><name pos:start="1303:60" pos:end="1303:67">ext_mask</name><operator pos:start="1303:68" pos:end="1303:68">)</operator></expr>)</condition><block type="pseudo" pos:start="1305:17" pos:end="1305:32"><block_content pos:start="1305:17" pos:end="1305:32">

                <goto pos:start="1305:17" pos:end="1305:32">goto <name pos:start="1305:22" pos:end="1305:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>



            <if_stmt pos:start="1309:13" pos:end="1395:13"><if pos:start="1309:13" pos:end="1377:13">if <condition pos:start="1309:16" pos:end="1309:19">(<expr pos:start="1309:17" pos:end="1309:18"><name pos:start="1309:17" pos:end="1309:18">b1</name></expr>)</condition> <block pos:start="1309:21" pos:end="1377:13">{<block_content pos:start="1311:17" pos:end="1375:17">

                <expr_stmt pos:start="1311:17" pos:end="1311:65"><expr pos:start="1311:17" pos:end="1311:64"><name pos:start="1311:17" pos:end="1311:26">op1_offset</name> <operator pos:start="1311:28" pos:end="1311:28">=</operator> <call pos:start="1311:30" pos:end="1311:64"><name pos:start="1311:30" pos:end="1311:37">offsetof</name><argument_list pos:start="1311:38" pos:end="1311:64">(<argument pos:start="1311:39" pos:end="1311:49"><expr pos:start="1311:39" pos:end="1311:49"><name pos:start="1311:39" pos:end="1311:49">CPUX86State</name></expr></argument>,<argument pos:start="1311:51" pos:end="1311:63"><expr pos:start="1311:51" pos:end="1311:63"><name pos:start="1311:51" pos:end="1311:63"><name pos:start="1311:51" pos:end="1311:58">xmm_regs</name><index pos:start="1311:59" pos:end="1311:63">[<expr pos:start="1311:60" pos:end="1311:62"><name pos:start="1311:60" pos:end="1311:62">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1313:17" pos:end="1375:17"><if pos:start="1313:17" pos:end="1317:17">if <condition pos:start="1313:20" pos:end="1313:29">(<expr pos:start="1313:21" pos:end="1313:28"><name pos:start="1313:21" pos:end="1313:23">mod</name> <operator pos:start="1313:25" pos:end="1313:26">==</operator> <literal type="number" pos:start="1313:28" pos:end="1313:28">3</literal></expr>)</condition> <block pos:start="1313:31" pos:end="1317:17">{<block_content pos:start="1315:21" pos:end="1315:79">

                    <expr_stmt pos:start="1315:21" pos:end="1315:79"><expr pos:start="1315:21" pos:end="1315:78"><name pos:start="1315:21" pos:end="1315:30">op2_offset</name> <operator pos:start="1315:32" pos:end="1315:32">=</operator> <call pos:start="1315:34" pos:end="1315:78"><name pos:start="1315:34" pos:end="1315:41">offsetof</name><argument_list pos:start="1315:42" pos:end="1315:78">(<argument pos:start="1315:43" pos:end="1315:53"><expr pos:start="1315:43" pos:end="1315:53"><name pos:start="1315:43" pos:end="1315:53">CPUX86State</name></expr></argument>,<argument pos:start="1315:55" pos:end="1315:77"><expr pos:start="1315:55" pos:end="1315:77"><name pos:start="1315:55" pos:end="1315:77"><name pos:start="1315:55" pos:end="1315:62">xmm_regs</name><index pos:start="1315:63" pos:end="1315:77">[<expr pos:start="1315:64" pos:end="1315:76"><name pos:start="1315:64" pos:end="1315:65">rm</name> <operator pos:start="1315:67" pos:end="1315:67">|</operator> <call pos:start="1315:69" pos:end="1315:76"><name pos:start="1315:69" pos:end="1315:73">REX_B</name><argument_list pos:start="1315:74" pos:end="1315:76">(<argument pos:start="1315:75" pos:end="1315:75"><expr pos:start="1315:75" pos:end="1315:75"><name pos:start="1315:75" pos:end="1315:75">s</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1317:19" pos:end="1375:17">else <block pos:start="1317:24" pos:end="1375:17">{<block_content pos:start="1319:21" pos:end="1373:21">

                    <expr_stmt pos:start="1319:21" pos:end="1319:62"><expr pos:start="1319:21" pos:end="1319:61"><name pos:start="1319:21" pos:end="1319:30">op2_offset</name> <operator pos:start="1319:32" pos:end="1319:32">=</operator> <call pos:start="1319:34" pos:end="1319:61"><name pos:start="1319:34" pos:end="1319:41">offsetof</name><argument_list pos:start="1319:42" pos:end="1319:61">(<argument pos:start="1319:43" pos:end="1319:53"><expr pos:start="1319:43" pos:end="1319:53"><name pos:start="1319:43" pos:end="1319:53">CPUX86State</name></expr></argument>,<argument pos:start="1319:55" pos:end="1319:60"><expr pos:start="1319:55" pos:end="1319:60"><name pos:start="1319:55" pos:end="1319:60">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1321:21" pos:end="1321:49"><expr pos:start="1321:21" pos:end="1321:48"><call pos:start="1321:21" pos:end="1321:48"><name pos:start="1321:21" pos:end="1321:33">gen_lea_modrm</name><argument_list pos:start="1321:34" pos:end="1321:48">(<argument pos:start="1321:35" pos:end="1321:37"><expr pos:start="1321:35" pos:end="1321:37"><name pos:start="1321:35" pos:end="1321:37">env</name></expr></argument>, <argument pos:start="1321:40" pos:end="1321:40"><expr pos:start="1321:40" pos:end="1321:40"><name pos:start="1321:40" pos:end="1321:40">s</name></expr></argument>, <argument pos:start="1321:43" pos:end="1321:47"><expr pos:start="1321:43" pos:end="1321:47"><name pos:start="1321:43" pos:end="1321:47">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <switch pos:start="1323:21" pos:end="1373:21">switch <condition pos:start="1323:28" pos:end="1323:30">(<expr pos:start="1323:29" pos:end="1323:29"><name pos:start="1323:29" pos:end="1323:29">b</name></expr>)</condition> <block pos:start="1323:32" pos:end="1373:21">{<block_content pos:start="1325:21" pos:end="1371:54">

                    <case pos:start="1325:21" pos:end="1325:30">case <expr pos:start="1325:26" pos:end="1325:29"><literal type="number" pos:start="1325:26" pos:end="1325:29">0x20</literal></expr>:</case> <case pos:start="1325:32" pos:end="1325:41">case <expr pos:start="1325:37" pos:end="1325:40"><literal type="number" pos:start="1325:37" pos:end="1325:40">0x30</literal></expr>:</case> <comment type="block" pos:start="1325:43" pos:end="1325:66">/* pmovsxbw, pmovzxbw */</comment>

                    <case pos:start="1327:21" pos:end="1327:30">case <expr pos:start="1327:26" pos:end="1327:29"><literal type="number" pos:start="1327:26" pos:end="1327:29">0x23</literal></expr>:</case> <case pos:start="1327:32" pos:end="1327:41">case <expr pos:start="1327:37" pos:end="1327:40"><literal type="number" pos:start="1327:37" pos:end="1327:40">0x33</literal></expr>:</case> <comment type="block" pos:start="1327:43" pos:end="1327:66">/* pmovsxwd, pmovzxwd */</comment>

                    <case pos:start="1329:21" pos:end="1329:30">case <expr pos:start="1329:26" pos:end="1329:29"><literal type="number" pos:start="1329:26" pos:end="1329:29">0x25</literal></expr>:</case> <case pos:start="1329:32" pos:end="1329:41">case <expr pos:start="1329:37" pos:end="1329:40"><literal type="number" pos:start="1329:37" pos:end="1329:40">0x35</literal></expr>:</case> <comment type="block" pos:start="1329:43" pos:end="1329:66">/* pmovsxdq, pmovzxdq */</comment>

                        <expr_stmt pos:start="1331:25" pos:end="1333:68"><expr pos:start="1331:25" pos:end="1333:67"><call pos:start="1331:25" pos:end="1333:67"><name pos:start="1331:25" pos:end="1331:38">gen_ldq_env_A0</name><argument_list pos:start="1331:39" pos:end="1333:67">(<argument pos:start="1331:40" pos:end="1331:40"><expr pos:start="1331:40" pos:end="1331:40"><name pos:start="1331:40" pos:end="1331:40">s</name></expr></argument>, <argument pos:start="1331:43" pos:end="1333:66"><expr pos:start="1331:43" pos:end="1333:66"><name pos:start="1331:43" pos:end="1331:52">op2_offset</name> <operator pos:start="1331:54" pos:end="1331:54">+</operator>

                                        <call pos:start="1333:41" pos:end="1333:66"><name pos:start="1333:41" pos:end="1333:48">offsetof</name><argument_list pos:start="1333:49" pos:end="1333:66">(<argument pos:start="1333:50" pos:end="1333:55"><expr pos:start="1333:50" pos:end="1333:55"><name pos:start="1333:50" pos:end="1333:55">XMMReg</name></expr></argument>, <argument pos:start="1333:58" pos:end="1333:65"><expr pos:start="1333:58" pos:end="1333:65"><call pos:start="1333:58" pos:end="1333:65"><name pos:start="1333:58" pos:end="1333:62">XMM_Q</name><argument_list pos:start="1333:63" pos:end="1333:65">(<argument pos:start="1333:64" pos:end="1333:64"><expr pos:start="1333:64" pos:end="1333:64"><literal type="number" pos:start="1333:64" pos:end="1333:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1335:25" pos:end="1335:30">break;</break>

                    <case pos:start="1337:21" pos:end="1337:30">case <expr pos:start="1337:26" pos:end="1337:29"><literal type="number" pos:start="1337:26" pos:end="1337:29">0x21</literal></expr>:</case> <case pos:start="1337:32" pos:end="1337:41">case <expr pos:start="1337:37" pos:end="1337:40"><literal type="number" pos:start="1337:37" pos:end="1337:40">0x31</literal></expr>:</case> <comment type="block" pos:start="1337:43" pos:end="1337:66">/* pmovsxbd, pmovzxbd */</comment>

                    <case pos:start="1339:21" pos:end="1339:30">case <expr pos:start="1339:26" pos:end="1339:29"><literal type="number" pos:start="1339:26" pos:end="1339:29">0x24</literal></expr>:</case> <case pos:start="1339:32" pos:end="1339:41">case <expr pos:start="1339:37" pos:end="1339:40"><literal type="number" pos:start="1339:37" pos:end="1339:40">0x34</literal></expr>:</case> <comment type="block" pos:start="1339:43" pos:end="1339:66">/* pmovsxwq, pmovzxwq */</comment>

                        <expr_stmt pos:start="1341:25" pos:end="1343:67"><expr pos:start="1341:25" pos:end="1343:66"><call pos:start="1341:25" pos:end="1343:66"><name pos:start="1341:25" pos:end="1341:43">tcg_gen_qemu_ld_i32</name><argument_list pos:start="1341:44" pos:end="1343:66">(<argument pos:start="1341:45" pos:end="1341:56"><expr pos:start="1341:45" pos:end="1341:56"><name pos:start="1341:45" pos:end="1341:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1341:59" pos:end="1341:64"><expr pos:start="1341:59" pos:end="1341:64"><name pos:start="1341:59" pos:end="1341:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="1343:45" pos:end="1343:56"><expr pos:start="1343:45" pos:end="1343:56"><name pos:start="1343:45" pos:end="1343:56"><name pos:start="1343:45" pos:end="1343:45">s</name><operator pos:start="1343:46" pos:end="1343:47">-&gt;</operator><name pos:start="1343:48" pos:end="1343:56">mem_index</name></name></expr></argument>, <argument pos:start="1343:59" pos:end="1343:65"><expr pos:start="1343:59" pos:end="1343:65"><name pos:start="1343:59" pos:end="1343:65">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1345:25" pos:end="1347:68"><expr pos:start="1345:25" pos:end="1347:67"><call pos:start="1345:25" pos:end="1347:67"><name pos:start="1345:25" pos:end="1345:38">tcg_gen_st_i32</name><argument_list pos:start="1345:39" pos:end="1347:67">(<argument pos:start="1345:40" pos:end="1345:51"><expr pos:start="1345:40" pos:end="1345:51"><name pos:start="1345:40" pos:end="1345:51">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1345:54" pos:end="1345:60"><expr pos:start="1345:54" pos:end="1345:60"><name pos:start="1345:54" pos:end="1345:60">cpu_env</name></expr></argument>, <argument pos:start="1345:63" pos:end="1347:66"><expr pos:start="1345:63" pos:end="1347:66"><name pos:start="1345:63" pos:end="1345:72">op2_offset</name> <operator pos:start="1345:74" pos:end="1345:74">+</operator>

                                        <call pos:start="1347:41" pos:end="1347:66"><name pos:start="1347:41" pos:end="1347:48">offsetof</name><argument_list pos:start="1347:49" pos:end="1347:66">(<argument pos:start="1347:50" pos:end="1347:55"><expr pos:start="1347:50" pos:end="1347:55"><name pos:start="1347:50" pos:end="1347:55">XMMReg</name></expr></argument>, <argument pos:start="1347:58" pos:end="1347:65"><expr pos:start="1347:58" pos:end="1347:65"><call pos:start="1347:58" pos:end="1347:65"><name pos:start="1347:58" pos:end="1347:62">XMM_L</name><argument_list pos:start="1347:63" pos:end="1347:65">(<argument pos:start="1347:64" pos:end="1347:64"><expr pos:start="1347:64" pos:end="1347:64"><literal type="number" pos:start="1347:64" pos:end="1347:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1349:25" pos:end="1349:30">break;</break>

                    <case pos:start="1351:21" pos:end="1351:30">case <expr pos:start="1351:26" pos:end="1351:29"><literal type="number" pos:start="1351:26" pos:end="1351:29">0x22</literal></expr>:</case> <case pos:start="1351:32" pos:end="1351:41">case <expr pos:start="1351:37" pos:end="1351:40"><literal type="number" pos:start="1351:37" pos:end="1351:40">0x32</literal></expr>:</case> <comment type="block" pos:start="1351:43" pos:end="1351:66">/* pmovsxbq, pmovzxbq */</comment>

                        <expr_stmt pos:start="1353:25" pos:end="1355:66"><expr pos:start="1353:25" pos:end="1355:65"><call pos:start="1353:25" pos:end="1355:65"><name pos:start="1353:25" pos:end="1353:42">tcg_gen_qemu_ld_tl</name><argument_list pos:start="1353:43" pos:end="1355:65">(<argument pos:start="1353:44" pos:end="1353:51"><expr pos:start="1353:44" pos:end="1353:51"><name pos:start="1353:44" pos:end="1353:51">cpu_tmp0</name></expr></argument>, <argument pos:start="1353:54" pos:end="1353:59"><expr pos:start="1353:54" pos:end="1353:59"><name pos:start="1353:54" pos:end="1353:59">cpu_A0</name></expr></argument>,

                                           <argument pos:start="1355:44" pos:end="1355:55"><expr pos:start="1355:44" pos:end="1355:55"><name pos:start="1355:44" pos:end="1355:55"><name pos:start="1355:44" pos:end="1355:44">s</name><operator pos:start="1355:45" pos:end="1355:46">-&gt;</operator><name pos:start="1355:47" pos:end="1355:55">mem_index</name></name></expr></argument>, <argument pos:start="1355:58" pos:end="1355:64"><expr pos:start="1355:58" pos:end="1355:64"><name pos:start="1355:58" pos:end="1355:64">MO_LEUW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1357:25" pos:end="1359:68"><expr pos:start="1357:25" pos:end="1359:67"><call pos:start="1357:25" pos:end="1359:67"><name pos:start="1357:25" pos:end="1357:39">tcg_gen_st16_tl</name><argument_list pos:start="1357:40" pos:end="1359:67">(<argument pos:start="1357:41" pos:end="1357:48"><expr pos:start="1357:41" pos:end="1357:48"><name pos:start="1357:41" pos:end="1357:48">cpu_tmp0</name></expr></argument>, <argument pos:start="1357:51" pos:end="1357:57"><expr pos:start="1357:51" pos:end="1357:57"><name pos:start="1357:51" pos:end="1357:57">cpu_env</name></expr></argument>, <argument pos:start="1357:60" pos:end="1359:66"><expr pos:start="1357:60" pos:end="1359:66"><name pos:start="1357:60" pos:end="1357:69">op2_offset</name> <operator pos:start="1357:71" pos:end="1357:71">+</operator>

                                        <call pos:start="1359:41" pos:end="1359:66"><name pos:start="1359:41" pos:end="1359:48">offsetof</name><argument_list pos:start="1359:49" pos:end="1359:66">(<argument pos:start="1359:50" pos:end="1359:55"><expr pos:start="1359:50" pos:end="1359:55"><name pos:start="1359:50" pos:end="1359:55">XMMReg</name></expr></argument>, <argument pos:start="1359:58" pos:end="1359:65"><expr pos:start="1359:58" pos:end="1359:65"><call pos:start="1359:58" pos:end="1359:65"><name pos:start="1359:58" pos:end="1359:62">XMM_W</name><argument_list pos:start="1359:63" pos:end="1359:65">(<argument pos:start="1359:64" pos:end="1359:64"><expr pos:start="1359:64" pos:end="1359:64"><literal type="number" pos:start="1359:64" pos:end="1359:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1361:25" pos:end="1361:30">break;</break>

                    <case pos:start="1363:21" pos:end="1363:30">case <expr pos:start="1363:26" pos:end="1363:29"><literal type="number" pos:start="1363:26" pos:end="1363:29">0x2a</literal></expr>:</case>            <comment type="block" pos:start="1363:43" pos:end="1363:56">/* movntqda */</comment>

                        <expr_stmt pos:start="1365:25" pos:end="1365:54"><expr pos:start="1365:25" pos:end="1365:53"><call pos:start="1365:25" pos:end="1365:53"><name pos:start="1365:25" pos:end="1365:38">gen_ldo_env_A0</name><argument_list pos:start="1365:39" pos:end="1365:53">(<argument pos:start="1365:40" pos:end="1365:40"><expr pos:start="1365:40" pos:end="1365:40"><name pos:start="1365:40" pos:end="1365:40">s</name></expr></argument>, <argument pos:start="1365:43" pos:end="1365:52"><expr pos:start="1365:43" pos:end="1365:52"><name pos:start="1365:43" pos:end="1365:52">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="1367:25" pos:end="1367:31">return;</return>

                    <default pos:start="1369:21" pos:end="1369:28">default:</default>

                        <expr_stmt pos:start="1371:25" pos:end="1371:54"><expr pos:start="1371:25" pos:end="1371:53"><call pos:start="1371:25" pos:end="1371:53"><name pos:start="1371:25" pos:end="1371:38">gen_ldo_env_A0</name><argument_list pos:start="1371:39" pos:end="1371:53">(<argument pos:start="1371:40" pos:end="1371:40"><expr pos:start="1371:40" pos:end="1371:40"><name pos:start="1371:40" pos:end="1371:40">s</name></expr></argument>, <argument pos:start="1371:43" pos:end="1371:52"><expr pos:start="1371:43" pos:end="1371:52"><name pos:start="1371:43" pos:end="1371:52">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></switch>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="1377:15" pos:end="1395:13">else <block pos:start="1377:20" pos:end="1395:13">{<block_content pos:start="1379:17" pos:end="1393:17">

                <expr_stmt pos:start="1379:17" pos:end="1379:67"><expr pos:start="1379:17" pos:end="1379:66"><name pos:start="1379:17" pos:end="1379:26">op1_offset</name> <operator pos:start="1379:28" pos:end="1379:28">=</operator> <call pos:start="1379:30" pos:end="1379:66"><name pos:start="1379:30" pos:end="1379:37">offsetof</name><argument_list pos:start="1379:38" pos:end="1379:66">(<argument pos:start="1379:39" pos:end="1379:49"><expr pos:start="1379:39" pos:end="1379:49"><name pos:start="1379:39" pos:end="1379:49">CPUX86State</name></expr></argument>,<argument pos:start="1379:51" pos:end="1379:65"><expr pos:start="1379:51" pos:end="1379:65"><name pos:start="1379:51" pos:end="1379:61"><name pos:start="1379:51" pos:end="1379:56">fpregs</name><index pos:start="1379:57" pos:end="1379:61">[<expr pos:start="1379:58" pos:end="1379:60"><name pos:start="1379:58" pos:end="1379:60">reg</name></expr>]</index></name><operator pos:start="1379:62" pos:end="1379:62">.</operator><name pos:start="1379:63" pos:end="1379:65">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1381:17" pos:end="1393:17"><if pos:start="1381:17" pos:end="1385:17">if <condition pos:start="1381:20" pos:end="1381:29">(<expr pos:start="1381:21" pos:end="1381:28"><name pos:start="1381:21" pos:end="1381:23">mod</name> <operator pos:start="1381:25" pos:end="1381:26">==</operator> <literal type="number" pos:start="1381:28" pos:end="1381:28">3</literal></expr>)</condition> <block pos:start="1381:31" pos:end="1385:17">{<block_content pos:start="1383:21" pos:end="1383:70">

                    <expr_stmt pos:start="1383:21" pos:end="1383:70"><expr pos:start="1383:21" pos:end="1383:69"><name pos:start="1383:21" pos:end="1383:30">op2_offset</name> <operator pos:start="1383:32" pos:end="1383:32">=</operator> <call pos:start="1383:34" pos:end="1383:69"><name pos:start="1383:34" pos:end="1383:41">offsetof</name><argument_list pos:start="1383:42" pos:end="1383:69">(<argument pos:start="1383:43" pos:end="1383:53"><expr pos:start="1383:43" pos:end="1383:53"><name pos:start="1383:43" pos:end="1383:53">CPUX86State</name></expr></argument>,<argument pos:start="1383:55" pos:end="1383:68"><expr pos:start="1383:55" pos:end="1383:68"><name pos:start="1383:55" pos:end="1383:64"><name pos:start="1383:55" pos:end="1383:60">fpregs</name><index pos:start="1383:61" pos:end="1383:64">[<expr pos:start="1383:62" pos:end="1383:63"><name pos:start="1383:62" pos:end="1383:63">rm</name></expr>]</index></name><operator pos:start="1383:65" pos:end="1383:65">.</operator><name pos:start="1383:66" pos:end="1383:68">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1385:19" pos:end="1393:17">else <block pos:start="1385:24" pos:end="1393:17">{<block_content pos:start="1387:21" pos:end="1391:50">

                    <expr_stmt pos:start="1387:21" pos:end="1387:62"><expr pos:start="1387:21" pos:end="1387:61"><name pos:start="1387:21" pos:end="1387:30">op2_offset</name> <operator pos:start="1387:32" pos:end="1387:32">=</operator> <call pos:start="1387:34" pos:end="1387:61"><name pos:start="1387:34" pos:end="1387:41">offsetof</name><argument_list pos:start="1387:42" pos:end="1387:61">(<argument pos:start="1387:43" pos:end="1387:53"><expr pos:start="1387:43" pos:end="1387:53"><name pos:start="1387:43" pos:end="1387:53">CPUX86State</name></expr></argument>,<argument pos:start="1387:55" pos:end="1387:60"><expr pos:start="1387:55" pos:end="1387:60"><name pos:start="1387:55" pos:end="1387:60">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1389:21" pos:end="1389:49"><expr pos:start="1389:21" pos:end="1389:48"><call pos:start="1389:21" pos:end="1389:48"><name pos:start="1389:21" pos:end="1389:33">gen_lea_modrm</name><argument_list pos:start="1389:34" pos:end="1389:48">(<argument pos:start="1389:35" pos:end="1389:37"><expr pos:start="1389:35" pos:end="1389:37"><name pos:start="1389:35" pos:end="1389:37">env</name></expr></argument>, <argument pos:start="1389:40" pos:end="1389:40"><expr pos:start="1389:40" pos:end="1389:40"><name pos:start="1389:40" pos:end="1389:40">s</name></expr></argument>, <argument pos:start="1389:43" pos:end="1389:47"><expr pos:start="1389:43" pos:end="1389:47"><name pos:start="1389:43" pos:end="1389:47">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1391:21" pos:end="1391:50"><expr pos:start="1391:21" pos:end="1391:49"><call pos:start="1391:21" pos:end="1391:49"><name pos:start="1391:21" pos:end="1391:34">gen_ldq_env_A0</name><argument_list pos:start="1391:35" pos:end="1391:49">(<argument pos:start="1391:36" pos:end="1391:36"><expr pos:start="1391:36" pos:end="1391:36"><name pos:start="1391:36" pos:end="1391:36">s</name></expr></argument>, <argument pos:start="1391:39" pos:end="1391:48"><expr pos:start="1391:39" pos:end="1391:48"><name pos:start="1391:39" pos:end="1391:48">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="1397:13" pos:end="1401:13"><if pos:start="1397:13" pos:end="1401:13">if <condition pos:start="1397:16" pos:end="1397:42">(<expr pos:start="1397:17" pos:end="1397:41"><name pos:start="1397:17" pos:end="1397:26">sse_fn_epp</name> <operator pos:start="1397:28" pos:end="1397:29">==</operator> <name pos:start="1397:31" pos:end="1397:41">SSE_SPECIAL</name></expr>)</condition> <block pos:start="1397:44" pos:end="1401:13">{<block_content pos:start="1399:17" pos:end="1399:32">

                <goto pos:start="1399:17" pos:end="1399:32">goto <name pos:start="1399:22" pos:end="1399:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="1405:13" pos:end="1405:60"><expr pos:start="1405:13" pos:end="1405:59"><call pos:start="1405:13" pos:end="1405:59"><name pos:start="1405:13" pos:end="1405:28">tcg_gen_addi_ptr</name><argument_list pos:start="1405:29" pos:end="1405:59">(<argument pos:start="1405:30" pos:end="1405:37"><expr pos:start="1405:30" pos:end="1405:37"><name pos:start="1405:30" pos:end="1405:37">cpu_ptr0</name></expr></argument>, <argument pos:start="1405:40" pos:end="1405:46"><expr pos:start="1405:40" pos:end="1405:46"><name pos:start="1405:40" pos:end="1405:46">cpu_env</name></expr></argument>, <argument pos:start="1405:49" pos:end="1405:58"><expr pos:start="1405:49" pos:end="1405:58"><name pos:start="1405:49" pos:end="1405:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1407:13" pos:end="1407:60"><expr pos:start="1407:13" pos:end="1407:59"><call pos:start="1407:13" pos:end="1407:59"><name pos:start="1407:13" pos:end="1407:28">tcg_gen_addi_ptr</name><argument_list pos:start="1407:29" pos:end="1407:59">(<argument pos:start="1407:30" pos:end="1407:37"><expr pos:start="1407:30" pos:end="1407:37"><name pos:start="1407:30" pos:end="1407:37">cpu_ptr1</name></expr></argument>, <argument pos:start="1407:40" pos:end="1407:46"><expr pos:start="1407:40" pos:end="1407:46"><name pos:start="1407:40" pos:end="1407:46">cpu_env</name></expr></argument>, <argument pos:start="1407:49" pos:end="1407:58"><expr pos:start="1407:49" pos:end="1407:58"><name pos:start="1407:49" pos:end="1407:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1409:13" pos:end="1409:52"><expr pos:start="1409:13" pos:end="1409:51"><call pos:start="1409:13" pos:end="1409:51"><name pos:start="1409:13" pos:end="1409:22">sse_fn_epp</name><argument_list pos:start="1409:23" pos:end="1409:51">(<argument pos:start="1409:24" pos:end="1409:30"><expr pos:start="1409:24" pos:end="1409:30"><name pos:start="1409:24" pos:end="1409:30">cpu_env</name></expr></argument>, <argument pos:start="1409:33" pos:end="1409:40"><expr pos:start="1409:33" pos:end="1409:40"><name pos:start="1409:33" pos:end="1409:40">cpu_ptr0</name></expr></argument>, <argument pos:start="1409:43" pos:end="1409:50"><expr pos:start="1409:43" pos:end="1409:50"><name pos:start="1409:43" pos:end="1409:50">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="1413:13" pos:end="1417:13"><if pos:start="1413:13" pos:end="1417:13">if <condition pos:start="1413:16" pos:end="1413:26">(<expr pos:start="1413:17" pos:end="1413:25"><name pos:start="1413:17" pos:end="1413:17">b</name> <operator pos:start="1413:19" pos:end="1413:20">==</operator> <literal type="number" pos:start="1413:22" pos:end="1413:25">0x17</literal></expr>)</condition> <block pos:start="1413:28" pos:end="1417:13">{<block_content pos:start="1415:17" pos:end="1415:43">

                <expr_stmt pos:start="1415:17" pos:end="1415:43"><expr pos:start="1415:17" pos:end="1415:42"><call pos:start="1415:17" pos:end="1415:42"><name pos:start="1415:17" pos:end="1415:25">set_cc_op</name><argument_list pos:start="1415:26" pos:end="1415:42">(<argument pos:start="1415:27" pos:end="1415:27"><expr pos:start="1415:27" pos:end="1415:27"><name pos:start="1415:27" pos:end="1415:27">s</name></expr></argument>, <argument pos:start="1415:30" pos:end="1415:41"><expr pos:start="1415:30" pos:end="1415:41"><name pos:start="1415:30" pos:end="1415:41">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="1419:13" pos:end="1419:18">break;</break>



        <case pos:start="1423:9" pos:end="1423:19">case <expr pos:start="1423:14" pos:end="1423:18"><literal type="number" pos:start="1423:14" pos:end="1423:18">0x238</literal></expr>:</case>

        <case pos:start="1425:9" pos:end="1425:19">case <expr pos:start="1425:14" pos:end="1425:18"><literal type="number" pos:start="1425:14" pos:end="1425:18">0x338</literal></expr>:</case>

        <label pos:start="1427:9" pos:end="1427:20"><name pos:start="1427:9" pos:end="1427:19">do_0f_38_fx</name>:</label>

            <comment type="block" pos:start="1429:13" pos:end="1429:62">/* Various integer extensions at 0f 38 f[0-f].  */</comment>

            <expr_stmt pos:start="1431:13" pos:end="1431:34"><expr pos:start="1431:13" pos:end="1431:33"><name pos:start="1431:13" pos:end="1431:13">b</name> <operator pos:start="1431:15" pos:end="1431:15">=</operator> <name pos:start="1431:17" pos:end="1431:21">modrm</name> <operator pos:start="1431:23" pos:end="1431:23">|</operator> <operator pos:start="1431:25" pos:end="1431:25">(</operator><name pos:start="1431:26" pos:end="1431:27">b1</name> <operator pos:start="1431:29" pos:end="1431:30">&lt;&lt;</operator> <literal type="number" pos:start="1431:32" pos:end="1431:32">8</literal><operator pos:start="1431:33" pos:end="1431:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1433:13" pos:end="1433:48"><expr pos:start="1433:13" pos:end="1433:47"><name pos:start="1433:13" pos:end="1433:17">modrm</name> <operator pos:start="1433:19" pos:end="1433:19">=</operator> <call pos:start="1433:21" pos:end="1433:47"><name pos:start="1433:21" pos:end="1433:33">cpu_ldub_code</name><argument_list pos:start="1433:34" pos:end="1433:47">(<argument pos:start="1433:35" pos:end="1433:37"><expr pos:start="1433:35" pos:end="1433:37"><name pos:start="1433:35" pos:end="1433:37">env</name></expr></argument>, <argument pos:start="1433:40" pos:end="1433:46"><expr pos:start="1433:40" pos:end="1433:46"><name pos:start="1433:40" pos:end="1433:44"><name pos:start="1433:40" pos:end="1433:40">s</name><operator pos:start="1433:41" pos:end="1433:42">-&gt;</operator><name pos:start="1433:43" pos:end="1433:44">pc</name></name><operator pos:start="1433:45" pos:end="1433:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1435:13" pos:end="1435:45"><expr pos:start="1435:13" pos:end="1435:44"><name pos:start="1435:13" pos:end="1435:15">reg</name> <operator pos:start="1435:17" pos:end="1435:17">=</operator> <operator pos:start="1435:19" pos:end="1435:19">(</operator><operator pos:start="1435:20" pos:end="1435:20">(</operator><name pos:start="1435:21" pos:end="1435:25">modrm</name> <operator pos:start="1435:27" pos:end="1435:28">&gt;&gt;</operator> <literal type="number" pos:start="1435:30" pos:end="1435:30">3</literal><operator pos:start="1435:31" pos:end="1435:31">)</operator> <operator pos:start="1435:33" pos:end="1435:33">&amp;</operator> <literal type="number" pos:start="1435:35" pos:end="1435:35">7</literal><operator pos:start="1435:36" pos:end="1435:36">)</operator> <operator pos:start="1435:38" pos:end="1435:38">|</operator> <name pos:start="1435:40" pos:end="1435:44">rex_r</name></expr>;</expr_stmt>



            <switch pos:start="1439:13" pos:end="2143:13">switch <condition pos:start="1439:20" pos:end="1439:22">(<expr pos:start="1439:21" pos:end="1439:21"><name pos:start="1439:21" pos:end="1439:21">b</name></expr>)</condition> <block pos:start="1439:24" pos:end="2143:13">{<block_content pos:start="1441:13" pos:end="2141:32">

            <case pos:start="1441:13" pos:end="1441:23">case <expr pos:start="1441:18" pos:end="1441:22"><literal type="number" pos:start="1441:18" pos:end="1441:22">0x3f0</literal></expr>:</case> <comment type="block" pos:start="1441:25" pos:end="1441:41">/* crc32 Gd,Eb */</comment>

            <case pos:start="1443:13" pos:end="1443:23">case <expr pos:start="1443:18" pos:end="1443:22"><literal type="number" pos:start="1443:18" pos:end="1443:22">0x3f1</literal></expr>:</case> <comment type="block" pos:start="1443:25" pos:end="1443:41">/* crc32 Gd,Ey */</comment>

            <label pos:start="1445:13" pos:end="1445:21"><name pos:start="1445:13" pos:end="1445:20">do_crc32</name>:</label>

                <if_stmt pos:start="1447:17" pos:end="1451:17"><if pos:start="1447:17" pos:end="1451:17">if <condition pos:start="1447:20" pos:end="1447:63">(<expr pos:start="1447:21" pos:end="1447:62"><operator pos:start="1447:21" pos:end="1447:21">!</operator><operator pos:start="1447:22" pos:end="1447:22">(</operator><name pos:start="1447:23" pos:end="1447:43"><name pos:start="1447:23" pos:end="1447:23">s</name><operator pos:start="1447:24" pos:end="1447:25">-&gt;</operator><name pos:start="1447:26" pos:end="1447:43">cpuid_ext_features</name></name> <operator pos:start="1447:45" pos:end="1447:45">&amp;</operator> <name pos:start="1447:47" pos:end="1447:61">CPUID_EXT_SSE42</name><operator pos:start="1447:62" pos:end="1447:62">)</operator></expr>)</condition> <block pos:start="1447:65" pos:end="1451:17">{<block_content pos:start="1449:21" pos:end="1449:36">

                    <goto pos:start="1449:21" pos:end="1449:36">goto <name pos:start="1449:26" pos:end="1449:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1453:17" pos:end="1465:17"><if pos:start="1453:17" pos:end="1457:17">if <condition pos:start="1453:20" pos:end="1453:39">(<expr pos:start="1453:21" pos:end="1453:38"><operator pos:start="1453:21" pos:end="1453:21">(</operator><name pos:start="1453:22" pos:end="1453:22">b</name> <operator pos:start="1453:24" pos:end="1453:24">&amp;</operator> <literal type="number" pos:start="1453:26" pos:end="1453:29">0xff</literal><operator pos:start="1453:30" pos:end="1453:30">)</operator> <operator pos:start="1453:32" pos:end="1453:33">==</operator> <literal type="number" pos:start="1453:35" pos:end="1453:38">0xf0</literal></expr>)</condition> <block pos:start="1453:41" pos:end="1457:17">{<block_content pos:start="1455:21" pos:end="1455:30">

                    <expr_stmt pos:start="1455:21" pos:end="1455:30"><expr pos:start="1455:21" pos:end="1455:29"><name pos:start="1455:21" pos:end="1455:22">ot</name> <operator pos:start="1455:24" pos:end="1455:24">=</operator> <name pos:start="1455:26" pos:end="1455:29">MO_8</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="1457:19" pos:end="1461:17">else if <condition pos:start="1457:27" pos:end="1457:45">(<expr pos:start="1457:28" pos:end="1457:44"><name pos:start="1457:28" pos:end="1457:35"><name pos:start="1457:28" pos:end="1457:28">s</name><operator pos:start="1457:29" pos:end="1457:30">-&gt;</operator><name pos:start="1457:31" pos:end="1457:35">dflag</name></name> <operator pos:start="1457:37" pos:end="1457:38">!=</operator> <name pos:start="1457:40" pos:end="1457:44">MO_64</name></expr>)</condition> <block pos:start="1457:47" pos:end="1461:17">{<block_content pos:start="1459:21" pos:end="1459:67">

                    <expr_stmt pos:start="1459:21" pos:end="1459:67"><expr pos:start="1459:21" pos:end="1459:66"><name pos:start="1459:21" pos:end="1459:22">ot</name> <operator pos:start="1459:24" pos:end="1459:24">=</operator> <operator pos:start="1459:26" pos:end="1459:26">(</operator><ternary pos:start="1459:27" pos:end="1459:65"><condition pos:start="1459:27" pos:end="1459:51"><expr pos:start="1459:27" pos:end="1459:49"><name pos:start="1459:27" pos:end="1459:35"><name pos:start="1459:27" pos:end="1459:27">s</name><operator pos:start="1459:28" pos:end="1459:29">-&gt;</operator><name pos:start="1459:30" pos:end="1459:35">prefix</name></name> <operator pos:start="1459:37" pos:end="1459:37">&amp;</operator> <name pos:start="1459:39" pos:end="1459:49">PREFIX_DATA</name></expr> ?</condition><then pos:start="1459:53" pos:end="1459:57"> <expr pos:start="1459:53" pos:end="1459:57"><name pos:start="1459:53" pos:end="1459:57">MO_16</name></expr> </then><else pos:start="1459:59" pos:end="1459:65">: <expr pos:start="1459:61" pos:end="1459:65"><name pos:start="1459:61" pos:end="1459:65">MO_32</name></expr></else></ternary><operator pos:start="1459:66" pos:end="1459:66">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1461:19" pos:end="1465:17">else <block pos:start="1461:24" pos:end="1465:17">{<block_content pos:start="1463:21" pos:end="1463:31">

                    <expr_stmt pos:start="1463:21" pos:end="1463:31"><expr pos:start="1463:21" pos:end="1463:30"><name pos:start="1463:21" pos:end="1463:22">ot</name> <operator pos:start="1463:24" pos:end="1463:24">=</operator> <name pos:start="1463:26" pos:end="1463:30">MO_64</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="1469:17" pos:end="1469:66"><expr pos:start="1469:17" pos:end="1469:65"><call pos:start="1469:17" pos:end="1469:65"><name pos:start="1469:17" pos:end="1469:36">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1469:37" pos:end="1469:65">(<argument pos:start="1469:38" pos:end="1469:49"><expr pos:start="1469:38" pos:end="1469:49"><name pos:start="1469:38" pos:end="1469:49">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1469:52" pos:end="1469:64"><expr pos:start="1469:52" pos:end="1469:64"><name pos:start="1469:52" pos:end="1469:64"><name pos:start="1469:52" pos:end="1469:59">cpu_regs</name><index pos:start="1469:60" pos:end="1469:64">[<expr pos:start="1469:61" pos:end="1469:63"><name pos:start="1469:61" pos:end="1469:63">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1471:17" pos:end="1471:62"><expr pos:start="1471:17" pos:end="1471:61"><call pos:start="1471:17" pos:end="1471:61"><name pos:start="1471:17" pos:end="1471:30">gen_ldst_modrm</name><argument_list pos:start="1471:31" pos:end="1471:61">(<argument pos:start="1471:32" pos:end="1471:34"><expr pos:start="1471:32" pos:end="1471:34"><name pos:start="1471:32" pos:end="1471:34">env</name></expr></argument>, <argument pos:start="1471:37" pos:end="1471:37"><expr pos:start="1471:37" pos:end="1471:37"><name pos:start="1471:37" pos:end="1471:37">s</name></expr></argument>, <argument pos:start="1471:40" pos:end="1471:44"><expr pos:start="1471:40" pos:end="1471:44"><name pos:start="1471:40" pos:end="1471:44">modrm</name></expr></argument>, <argument pos:start="1471:47" pos:end="1471:48"><expr pos:start="1471:47" pos:end="1471:48"><name pos:start="1471:47" pos:end="1471:48">ot</name></expr></argument>, <argument pos:start="1471:51" pos:end="1471:57"><expr pos:start="1471:51" pos:end="1471:57"><name pos:start="1471:51" pos:end="1471:57">OR_TMP0</name></expr></argument>, <argument pos:start="1471:60" pos:end="1471:60"><expr pos:start="1471:60" pos:end="1471:60"><literal type="number" pos:start="1471:60" pos:end="1471:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1473:17" pos:end="1475:67"><expr pos:start="1473:17" pos:end="1475:66"><call pos:start="1473:17" pos:end="1475:66"><name pos:start="1473:17" pos:end="1473:32">gen_helper_crc32</name><argument_list pos:start="1473:33" pos:end="1475:66">(<argument pos:start="1473:34" pos:end="1473:41"><expr pos:start="1473:34" pos:end="1473:41"><name pos:start="1473:34" pos:end="1473:41"><name pos:start="1473:34" pos:end="1473:38">cpu_T</name><index pos:start="1473:39" pos:end="1473:41">[<expr pos:start="1473:40" pos:end="1473:40"><literal type="number" pos:start="1473:40" pos:end="1473:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1473:44" pos:end="1473:55"><expr pos:start="1473:44" pos:end="1473:55"><name pos:start="1473:44" pos:end="1473:55">cpu_tmp2_i32</name></expr></argument>,

                                 <argument pos:start="1475:34" pos:end="1475:41"><expr pos:start="1475:34" pos:end="1475:41"><name pos:start="1475:34" pos:end="1475:41"><name pos:start="1475:34" pos:end="1475:38">cpu_T</name><index pos:start="1475:39" pos:end="1475:41">[<expr pos:start="1475:40" pos:end="1475:40"><literal type="number" pos:start="1475:40" pos:end="1475:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1475:44" pos:end="1475:65"><expr pos:start="1475:44" pos:end="1475:65"><call pos:start="1475:44" pos:end="1475:65"><name pos:start="1475:44" pos:end="1475:56">tcg_const_i32</name><argument_list pos:start="1475:57" pos:end="1475:65">(<argument pos:start="1475:58" pos:end="1475:64"><expr pos:start="1475:58" pos:end="1475:64"><literal type="number" pos:start="1475:58" pos:end="1475:58">8</literal> <operator pos:start="1475:60" pos:end="1475:61">&lt;&lt;</operator> <name pos:start="1475:63" pos:end="1475:64">ot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="1479:17" pos:end="1479:40"><expr pos:start="1479:17" pos:end="1479:39"><name pos:start="1479:17" pos:end="1479:18">ot</name> <operator pos:start="1479:20" pos:end="1479:20">=</operator> <call pos:start="1479:22" pos:end="1479:39"><name pos:start="1479:22" pos:end="1479:29">mo_64_32</name><argument_list pos:start="1479:30" pos:end="1479:39">(<argument pos:start="1479:31" pos:end="1479:38"><expr pos:start="1479:31" pos:end="1479:38"><name pos:start="1479:31" pos:end="1479:38"><name pos:start="1479:31" pos:end="1479:31">s</name><operator pos:start="1479:32" pos:end="1479:33">-&gt;</operator><name pos:start="1479:34" pos:end="1479:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1481:17" pos:end="1481:52"><expr pos:start="1481:17" pos:end="1481:51"><call pos:start="1481:17" pos:end="1481:51"><name pos:start="1481:17" pos:end="1481:32">gen_op_mov_reg_v</name><argument_list pos:start="1481:33" pos:end="1481:51">(<argument pos:start="1481:34" pos:end="1481:35"><expr pos:start="1481:34" pos:end="1481:35"><name pos:start="1481:34" pos:end="1481:35">ot</name></expr></argument>, <argument pos:start="1481:38" pos:end="1481:40"><expr pos:start="1481:38" pos:end="1481:40"><name pos:start="1481:38" pos:end="1481:40">reg</name></expr></argument>, <argument pos:start="1481:43" pos:end="1481:50"><expr pos:start="1481:43" pos:end="1481:50"><name pos:start="1481:43" pos:end="1481:50"><name pos:start="1481:43" pos:end="1481:47">cpu_T</name><index pos:start="1481:48" pos:end="1481:50">[<expr pos:start="1481:49" pos:end="1481:49"><literal type="number" pos:start="1481:49" pos:end="1481:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1483:17" pos:end="1483:22">break;</break>



            <case pos:start="1487:13" pos:end="1487:23">case <expr pos:start="1487:18" pos:end="1487:22"><literal type="number" pos:start="1487:18" pos:end="1487:22">0x1f0</literal></expr>:</case> <comment type="block" pos:start="1487:25" pos:end="1487:44">/* crc32 or movbe */</comment>

            <case pos:start="1489:13" pos:end="1489:23">case <expr pos:start="1489:18" pos:end="1489:22"><literal type="number" pos:start="1489:18" pos:end="1489:22">0x1f1</literal></expr>:</case>

                <comment type="block" pos:start="1491:17" pos:end="1495:34">/* For these insns, the f3 prefix is supposed to have priority

                   over the 66 prefix, but that's not what we implement above

                   setting b1.  */</comment>

                <if_stmt pos:start="1497:17" pos:end="1501:17"><if pos:start="1497:17" pos:end="1501:17">if <condition pos:start="1497:20" pos:end="1497:45">(<expr pos:start="1497:21" pos:end="1497:44"><name pos:start="1497:21" pos:end="1497:29"><name pos:start="1497:21" pos:end="1497:21">s</name><operator pos:start="1497:22" pos:end="1497:23">-&gt;</operator><name pos:start="1497:24" pos:end="1497:29">prefix</name></name> <operator pos:start="1497:31" pos:end="1497:31">&amp;</operator> <name pos:start="1497:33" pos:end="1497:44">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="1497:47" pos:end="1501:17">{<block_content pos:start="1499:21" pos:end="1499:34">

                    <goto pos:start="1499:21" pos:end="1499:34">goto <name pos:start="1499:26" pos:end="1499:33">do_crc32</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="1503:17" pos:end="1503:30">/* FALLTHRU */</comment>

            <case pos:start="1505:13" pos:end="1505:23">case <expr pos:start="1505:18" pos:end="1505:22"><literal type="number" pos:start="1505:18" pos:end="1505:22">0x0f0</literal></expr>:</case> <comment type="block" pos:start="1505:25" pos:end="1505:41">/* movbe Gy,My */</comment>

            <case pos:start="1507:13" pos:end="1507:23">case <expr pos:start="1507:18" pos:end="1507:22"><literal type="number" pos:start="1507:18" pos:end="1507:22">0x0f1</literal></expr>:</case> <comment type="block" pos:start="1507:25" pos:end="1507:41">/* movbe My,Gy */</comment>

                <if_stmt pos:start="1509:17" pos:end="1513:17"><if pos:start="1509:17" pos:end="1513:17">if <condition pos:start="1509:20" pos:end="1509:63">(<expr pos:start="1509:21" pos:end="1509:62"><operator pos:start="1509:21" pos:end="1509:21">!</operator><operator pos:start="1509:22" pos:end="1509:22">(</operator><name pos:start="1509:23" pos:end="1509:43"><name pos:start="1509:23" pos:end="1509:23">s</name><operator pos:start="1509:24" pos:end="1509:25">-&gt;</operator><name pos:start="1509:26" pos:end="1509:43">cpuid_ext_features</name></name> <operator pos:start="1509:45" pos:end="1509:45">&amp;</operator> <name pos:start="1509:47" pos:end="1509:61">CPUID_EXT_MOVBE</name><operator pos:start="1509:62" pos:end="1509:62">)</operator></expr>)</condition> <block pos:start="1509:65" pos:end="1513:17">{<block_content pos:start="1511:21" pos:end="1511:36">

                    <goto pos:start="1511:21" pos:end="1511:36">goto <name pos:start="1511:26" pos:end="1511:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1515:17" pos:end="1523:17"><if pos:start="1515:17" pos:end="1519:17">if <condition pos:start="1515:20" pos:end="1515:38">(<expr pos:start="1515:21" pos:end="1515:37"><name pos:start="1515:21" pos:end="1515:28"><name pos:start="1515:21" pos:end="1515:21">s</name><operator pos:start="1515:22" pos:end="1515:23">-&gt;</operator><name pos:start="1515:24" pos:end="1515:28">dflag</name></name> <operator pos:start="1515:30" pos:end="1515:31">!=</operator> <name pos:start="1515:33" pos:end="1515:37">MO_64</name></expr>)</condition> <block pos:start="1515:40" pos:end="1519:17">{<block_content pos:start="1517:21" pos:end="1517:67">

                    <expr_stmt pos:start="1517:21" pos:end="1517:67"><expr pos:start="1517:21" pos:end="1517:66"><name pos:start="1517:21" pos:end="1517:22">ot</name> <operator pos:start="1517:24" pos:end="1517:24">=</operator> <operator pos:start="1517:26" pos:end="1517:26">(</operator><ternary pos:start="1517:27" pos:end="1517:65"><condition pos:start="1517:27" pos:end="1517:51"><expr pos:start="1517:27" pos:end="1517:49"><name pos:start="1517:27" pos:end="1517:35"><name pos:start="1517:27" pos:end="1517:27">s</name><operator pos:start="1517:28" pos:end="1517:29">-&gt;</operator><name pos:start="1517:30" pos:end="1517:35">prefix</name></name> <operator pos:start="1517:37" pos:end="1517:37">&amp;</operator> <name pos:start="1517:39" pos:end="1517:49">PREFIX_DATA</name></expr> ?</condition><then pos:start="1517:53" pos:end="1517:57"> <expr pos:start="1517:53" pos:end="1517:57"><name pos:start="1517:53" pos:end="1517:57">MO_16</name></expr> </then><else pos:start="1517:59" pos:end="1517:65">: <expr pos:start="1517:61" pos:end="1517:65"><name pos:start="1517:61" pos:end="1517:65">MO_32</name></expr></else></ternary><operator pos:start="1517:66" pos:end="1517:66">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1519:19" pos:end="1523:17">else <block pos:start="1519:24" pos:end="1523:17">{<block_content pos:start="1521:21" pos:end="1521:31">

                    <expr_stmt pos:start="1521:21" pos:end="1521:31"><expr pos:start="1521:21" pos:end="1521:30"><name pos:start="1521:21" pos:end="1521:22">ot</name> <operator pos:start="1521:24" pos:end="1521:24">=</operator> <name pos:start="1521:26" pos:end="1521:30">MO_64</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="1527:17" pos:end="1527:45"><expr pos:start="1527:17" pos:end="1527:44"><call pos:start="1527:17" pos:end="1527:44"><name pos:start="1527:17" pos:end="1527:29">gen_lea_modrm</name><argument_list pos:start="1527:30" pos:end="1527:44">(<argument pos:start="1527:31" pos:end="1527:33"><expr pos:start="1527:31" pos:end="1527:33"><name pos:start="1527:31" pos:end="1527:33">env</name></expr></argument>, <argument pos:start="1527:36" pos:end="1527:36"><expr pos:start="1527:36" pos:end="1527:36"><name pos:start="1527:36" pos:end="1527:36">s</name></expr></argument>, <argument pos:start="1527:39" pos:end="1527:43"><expr pos:start="1527:39" pos:end="1527:43"><name pos:start="1527:39" pos:end="1527:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1529:17" pos:end="1543:17"><if pos:start="1529:17" pos:end="1537:17">if <condition pos:start="1529:20" pos:end="1529:33">(<expr pos:start="1529:21" pos:end="1529:32"><operator pos:start="1529:21" pos:end="1529:21">(</operator><name pos:start="1529:22" pos:end="1529:22">b</name> <operator pos:start="1529:24" pos:end="1529:24">&amp;</operator> <literal type="number" pos:start="1529:26" pos:end="1529:26">1</literal><operator pos:start="1529:27" pos:end="1529:27">)</operator> <operator pos:start="1529:29" pos:end="1529:30">==</operator> <literal type="number" pos:start="1529:32" pos:end="1529:32">0</literal></expr>)</condition> <block pos:start="1529:35" pos:end="1537:17">{<block_content pos:start="1531:21" pos:end="1535:56">

                    <expr_stmt pos:start="1531:21" pos:end="1533:65"><expr pos:start="1531:21" pos:end="1533:64"><call pos:start="1531:21" pos:end="1533:64"><name pos:start="1531:21" pos:end="1531:38">tcg_gen_qemu_ld_tl</name><argument_list pos:start="1531:39" pos:end="1533:64">(<argument pos:start="1531:40" pos:end="1531:47"><expr pos:start="1531:40" pos:end="1531:47"><name pos:start="1531:40" pos:end="1531:47"><name pos:start="1531:40" pos:end="1531:44">cpu_T</name><index pos:start="1531:45" pos:end="1531:47">[<expr pos:start="1531:46" pos:end="1531:46"><literal type="number" pos:start="1531:46" pos:end="1531:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1531:50" pos:end="1531:55"><expr pos:start="1531:50" pos:end="1531:55"><name pos:start="1531:50" pos:end="1531:55">cpu_A0</name></expr></argument>,

                                       <argument pos:start="1533:40" pos:end="1533:51"><expr pos:start="1533:40" pos:end="1533:51"><name pos:start="1533:40" pos:end="1533:51"><name pos:start="1533:40" pos:end="1533:40">s</name><operator pos:start="1533:41" pos:end="1533:42">-&gt;</operator><name pos:start="1533:43" pos:end="1533:51">mem_index</name></name></expr></argument>, <argument pos:start="1533:54" pos:end="1533:63"><expr pos:start="1533:54" pos:end="1533:63"><name pos:start="1533:54" pos:end="1533:55">ot</name> <operator pos:start="1533:57" pos:end="1533:57">|</operator> <name pos:start="1533:59" pos:end="1533:63">MO_BE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1535:21" pos:end="1535:56"><expr pos:start="1535:21" pos:end="1535:55"><call pos:start="1535:21" pos:end="1535:55"><name pos:start="1535:21" pos:end="1535:36">gen_op_mov_reg_v</name><argument_list pos:start="1535:37" pos:end="1535:55">(<argument pos:start="1535:38" pos:end="1535:39"><expr pos:start="1535:38" pos:end="1535:39"><name pos:start="1535:38" pos:end="1535:39">ot</name></expr></argument>, <argument pos:start="1535:42" pos:end="1535:44"><expr pos:start="1535:42" pos:end="1535:44"><name pos:start="1535:42" pos:end="1535:44">reg</name></expr></argument>, <argument pos:start="1535:47" pos:end="1535:54"><expr pos:start="1535:47" pos:end="1535:54"><name pos:start="1535:47" pos:end="1535:54"><name pos:start="1535:47" pos:end="1535:51">cpu_T</name><index pos:start="1535:52" pos:end="1535:54">[<expr pos:start="1535:53" pos:end="1535:53"><literal type="number" pos:start="1535:53" pos:end="1535:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1537:19" pos:end="1543:17">else <block pos:start="1537:24" pos:end="1543:17">{<block_content pos:start="1539:21" pos:end="1541:65">

                    <expr_stmt pos:start="1539:21" pos:end="1541:65"><expr pos:start="1539:21" pos:end="1541:64"><call pos:start="1539:21" pos:end="1541:64"><name pos:start="1539:21" pos:end="1539:38">tcg_gen_qemu_st_tl</name><argument_list pos:start="1539:39" pos:end="1541:64">(<argument pos:start="1539:40" pos:end="1539:52"><expr pos:start="1539:40" pos:end="1539:52"><name pos:start="1539:40" pos:end="1539:52"><name pos:start="1539:40" pos:end="1539:47">cpu_regs</name><index pos:start="1539:48" pos:end="1539:52">[<expr pos:start="1539:49" pos:end="1539:51"><name pos:start="1539:49" pos:end="1539:51">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1539:55" pos:end="1539:60"><expr pos:start="1539:55" pos:end="1539:60"><name pos:start="1539:55" pos:end="1539:60">cpu_A0</name></expr></argument>,

                                       <argument pos:start="1541:40" pos:end="1541:51"><expr pos:start="1541:40" pos:end="1541:51"><name pos:start="1541:40" pos:end="1541:51"><name pos:start="1541:40" pos:end="1541:40">s</name><operator pos:start="1541:41" pos:end="1541:42">-&gt;</operator><name pos:start="1541:43" pos:end="1541:51">mem_index</name></name></expr></argument>, <argument pos:start="1541:54" pos:end="1541:63"><expr pos:start="1541:54" pos:end="1541:63"><name pos:start="1541:54" pos:end="1541:55">ot</name> <operator pos:start="1541:57" pos:end="1541:57">|</operator> <name pos:start="1541:59" pos:end="1541:63">MO_BE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="1545:17" pos:end="1545:22">break;</break>



            <case pos:start="1549:13" pos:end="1549:23">case <expr pos:start="1549:18" pos:end="1549:22"><literal type="number" pos:start="1549:18" pos:end="1549:22">0x0f2</literal></expr>:</case> <comment type="block" pos:start="1549:25" pos:end="1549:45">/* andn Gy, By, Ey */</comment>

                <if_stmt pos:start="1551:17" pos:end="1559:17"><if pos:start="1551:17" pos:end="1559:17">if <condition pos:start="1551:20" pos:end="1555:37">(<expr pos:start="1551:21" pos:end="1555:36"><operator pos:start="1551:21" pos:end="1551:21">!</operator><operator pos:start="1551:22" pos:end="1551:22">(</operator><name pos:start="1551:23" pos:end="1551:47"><name pos:start="1551:23" pos:end="1551:23">s</name><operator pos:start="1551:24" pos:end="1551:25">-&gt;</operator><name pos:start="1551:26" pos:end="1551:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="1551:49" pos:end="1551:49">&amp;</operator> <name pos:start="1551:51" pos:end="1551:68">CPUID_7_0_EBX_BMI1</name><operator pos:start="1551:69" pos:end="1551:69">)</operator>

                    <operator pos:start="1553:21" pos:end="1553:22">||</operator> <operator pos:start="1553:24" pos:end="1553:24">!</operator><operator pos:start="1553:25" pos:end="1553:25">(</operator><name pos:start="1553:26" pos:end="1553:34"><name pos:start="1553:26" pos:end="1553:26">s</name><operator pos:start="1553:27" pos:end="1553:28">-&gt;</operator><name pos:start="1553:29" pos:end="1553:34">prefix</name></name> <operator pos:start="1553:36" pos:end="1553:36">&amp;</operator> <name pos:start="1553:38" pos:end="1553:47">PREFIX_VEX</name><operator pos:start="1553:48" pos:end="1553:48">)</operator>

                    <operator pos:start="1555:21" pos:end="1555:22">||</operator> <name pos:start="1555:24" pos:end="1555:31"><name pos:start="1555:24" pos:end="1555:24">s</name><operator pos:start="1555:25" pos:end="1555:26">-&gt;</operator><name pos:start="1555:27" pos:end="1555:31">vex_l</name></name> <operator pos:start="1555:33" pos:end="1555:34">!=</operator> <literal type="number" pos:start="1555:36" pos:end="1555:36">0</literal></expr>)</condition> <block pos:start="1555:39" pos:end="1559:17">{<block_content pos:start="1557:21" pos:end="1557:36">

                    <goto pos:start="1557:21" pos:end="1557:36">goto <name pos:start="1557:26" pos:end="1557:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1561:17" pos:end="1561:40"><expr pos:start="1561:17" pos:end="1561:39"><name pos:start="1561:17" pos:end="1561:18">ot</name> <operator pos:start="1561:20" pos:end="1561:20">=</operator> <call pos:start="1561:22" pos:end="1561:39"><name pos:start="1561:22" pos:end="1561:29">mo_64_32</name><argument_list pos:start="1561:30" pos:end="1561:39">(<argument pos:start="1561:31" pos:end="1561:38"><expr pos:start="1561:31" pos:end="1561:38"><name pos:start="1561:31" pos:end="1561:38"><name pos:start="1561:31" pos:end="1561:31">s</name><operator pos:start="1561:32" pos:end="1561:33">-&gt;</operator><name pos:start="1561:34" pos:end="1561:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1563:17" pos:end="1563:62"><expr pos:start="1563:17" pos:end="1563:61"><call pos:start="1563:17" pos:end="1563:61"><name pos:start="1563:17" pos:end="1563:30">gen_ldst_modrm</name><argument_list pos:start="1563:31" pos:end="1563:61">(<argument pos:start="1563:32" pos:end="1563:34"><expr pos:start="1563:32" pos:end="1563:34"><name pos:start="1563:32" pos:end="1563:34">env</name></expr></argument>, <argument pos:start="1563:37" pos:end="1563:37"><expr pos:start="1563:37" pos:end="1563:37"><name pos:start="1563:37" pos:end="1563:37">s</name></expr></argument>, <argument pos:start="1563:40" pos:end="1563:44"><expr pos:start="1563:40" pos:end="1563:44"><name pos:start="1563:40" pos:end="1563:44">modrm</name></expr></argument>, <argument pos:start="1563:47" pos:end="1563:48"><expr pos:start="1563:47" pos:end="1563:48"><name pos:start="1563:47" pos:end="1563:48">ot</name></expr></argument>, <argument pos:start="1563:51" pos:end="1563:57"><expr pos:start="1563:51" pos:end="1563:57"><name pos:start="1563:51" pos:end="1563:57">OR_TMP0</name></expr></argument>, <argument pos:start="1563:60" pos:end="1563:60"><expr pos:start="1563:60" pos:end="1563:60"><literal type="number" pos:start="1563:60" pos:end="1563:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1565:17" pos:end="1565:72"><expr pos:start="1565:17" pos:end="1565:71"><call pos:start="1565:17" pos:end="1565:71"><name pos:start="1565:17" pos:end="1565:31">tcg_gen_andc_tl</name><argument_list pos:start="1565:32" pos:end="1565:71">(<argument pos:start="1565:33" pos:end="1565:40"><expr pos:start="1565:33" pos:end="1565:40"><name pos:start="1565:33" pos:end="1565:40"><name pos:start="1565:33" pos:end="1565:37">cpu_T</name><index pos:start="1565:38" pos:end="1565:40">[<expr pos:start="1565:39" pos:end="1565:39"><literal type="number" pos:start="1565:39" pos:end="1565:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1565:43" pos:end="1565:60"><expr pos:start="1565:43" pos:end="1565:60"><name pos:start="1565:43" pos:end="1565:60"><name pos:start="1565:43" pos:end="1565:50">cpu_regs</name><index pos:start="1565:51" pos:end="1565:60">[<expr pos:start="1565:52" pos:end="1565:59"><name pos:start="1565:52" pos:end="1565:59"><name pos:start="1565:52" pos:end="1565:52">s</name><operator pos:start="1565:53" pos:end="1565:54">-&gt;</operator><name pos:start="1565:55" pos:end="1565:59">vex_v</name></name></expr>]</index></name></expr></argument>, <argument pos:start="1565:63" pos:end="1565:70"><expr pos:start="1565:63" pos:end="1565:70"><name pos:start="1565:63" pos:end="1565:70"><name pos:start="1565:63" pos:end="1565:67">cpu_T</name><index pos:start="1565:68" pos:end="1565:70">[<expr pos:start="1565:69" pos:end="1565:69"><literal type="number" pos:start="1565:69" pos:end="1565:69">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1567:17" pos:end="1567:52"><expr pos:start="1567:17" pos:end="1567:51"><call pos:start="1567:17" pos:end="1567:51"><name pos:start="1567:17" pos:end="1567:32">gen_op_mov_reg_v</name><argument_list pos:start="1567:33" pos:end="1567:51">(<argument pos:start="1567:34" pos:end="1567:35"><expr pos:start="1567:34" pos:end="1567:35"><name pos:start="1567:34" pos:end="1567:35">ot</name></expr></argument>, <argument pos:start="1567:38" pos:end="1567:40"><expr pos:start="1567:38" pos:end="1567:40"><name pos:start="1567:38" pos:end="1567:40">reg</name></expr></argument>, <argument pos:start="1567:43" pos:end="1567:50"><expr pos:start="1567:43" pos:end="1567:50"><name pos:start="1567:43" pos:end="1567:50"><name pos:start="1567:43" pos:end="1567:47">cpu_T</name><index pos:start="1567:48" pos:end="1567:50">[<expr pos:start="1567:49" pos:end="1567:49"><literal type="number" pos:start="1567:49" pos:end="1567:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1569:17" pos:end="1569:36"><expr pos:start="1569:17" pos:end="1569:35"><call pos:start="1569:17" pos:end="1569:35"><name pos:start="1569:17" pos:end="1569:33">gen_op_update1_cc</name><argument_list pos:start="1569:34" pos:end="1569:35">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1571:17" pos:end="1571:48"><expr pos:start="1571:17" pos:end="1571:47"><call pos:start="1571:17" pos:end="1571:47"><name pos:start="1571:17" pos:end="1571:25">set_cc_op</name><argument_list pos:start="1571:26" pos:end="1571:47">(<argument pos:start="1571:27" pos:end="1571:27"><expr pos:start="1571:27" pos:end="1571:27"><name pos:start="1571:27" pos:end="1571:27">s</name></expr></argument>, <argument pos:start="1571:30" pos:end="1571:46"><expr pos:start="1571:30" pos:end="1571:46"><name pos:start="1571:30" pos:end="1571:41">CC_OP_LOGICB</name> <operator pos:start="1571:43" pos:end="1571:43">+</operator> <name pos:start="1571:45" pos:end="1571:46">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1573:17" pos:end="1573:22">break;</break>



            <case pos:start="1577:13" pos:end="1577:23">case <expr pos:start="1577:18" pos:end="1577:22"><literal type="number" pos:start="1577:18" pos:end="1577:22">0x0f7</literal></expr>:</case> <comment type="block" pos:start="1577:25" pos:end="1577:46">/* bextr Gy, Ey, By */</comment>

                <if_stmt pos:start="1579:17" pos:end="1587:17"><if pos:start="1579:17" pos:end="1587:17">if <condition pos:start="1579:20" pos:end="1583:37">(<expr pos:start="1579:21" pos:end="1583:36"><operator pos:start="1579:21" pos:end="1579:21">!</operator><operator pos:start="1579:22" pos:end="1579:22">(</operator><name pos:start="1579:23" pos:end="1579:47"><name pos:start="1579:23" pos:end="1579:23">s</name><operator pos:start="1579:24" pos:end="1579:25">-&gt;</operator><name pos:start="1579:26" pos:end="1579:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="1579:49" pos:end="1579:49">&amp;</operator> <name pos:start="1579:51" pos:end="1579:68">CPUID_7_0_EBX_BMI1</name><operator pos:start="1579:69" pos:end="1579:69">)</operator>

                    <operator pos:start="1581:21" pos:end="1581:22">||</operator> <operator pos:start="1581:24" pos:end="1581:24">!</operator><operator pos:start="1581:25" pos:end="1581:25">(</operator><name pos:start="1581:26" pos:end="1581:34"><name pos:start="1581:26" pos:end="1581:26">s</name><operator pos:start="1581:27" pos:end="1581:28">-&gt;</operator><name pos:start="1581:29" pos:end="1581:34">prefix</name></name> <operator pos:start="1581:36" pos:end="1581:36">&amp;</operator> <name pos:start="1581:38" pos:end="1581:47">PREFIX_VEX</name><operator pos:start="1581:48" pos:end="1581:48">)</operator>

                    <operator pos:start="1583:21" pos:end="1583:22">||</operator> <name pos:start="1583:24" pos:end="1583:31"><name pos:start="1583:24" pos:end="1583:24">s</name><operator pos:start="1583:25" pos:end="1583:26">-&gt;</operator><name pos:start="1583:27" pos:end="1583:31">vex_l</name></name> <operator pos:start="1583:33" pos:end="1583:34">!=</operator> <literal type="number" pos:start="1583:36" pos:end="1583:36">0</literal></expr>)</condition> <block pos:start="1583:39" pos:end="1587:17">{<block_content pos:start="1585:21" pos:end="1585:36">

                    <goto pos:start="1585:21" pos:end="1585:36">goto <name pos:start="1585:26" pos:end="1585:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1589:17" pos:end="1589:40"><expr pos:start="1589:17" pos:end="1589:39"><name pos:start="1589:17" pos:end="1589:18">ot</name> <operator pos:start="1589:20" pos:end="1589:20">=</operator> <call pos:start="1589:22" pos:end="1589:39"><name pos:start="1589:22" pos:end="1589:29">mo_64_32</name><argument_list pos:start="1589:30" pos:end="1589:39">(<argument pos:start="1589:31" pos:end="1589:38"><expr pos:start="1589:31" pos:end="1589:38"><name pos:start="1589:31" pos:end="1589:38"><name pos:start="1589:31" pos:end="1589:31">s</name><operator pos:start="1589:32" pos:end="1589:33">-&gt;</operator><name pos:start="1589:34" pos:end="1589:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="1591:17" pos:end="1651:17">{<block_content pos:start="1593:21" pos:end="1649:52">

                    <decl_stmt pos:start="1593:21" pos:end="1593:37"><decl pos:start="1593:21" pos:end="1593:30"><type pos:start="1593:21" pos:end="1593:24"><name pos:start="1593:21" pos:end="1593:24">TCGv</name></type> <name pos:start="1593:26" pos:end="1593:30">bound</name></decl>, <decl pos:start="1593:33" pos:end="1593:36"><type ref="prev" pos:start="1593:21" pos:end="1593:24"/><name pos:start="1593:33" pos:end="1593:36">zero</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="1597:21" pos:end="1597:66"><expr pos:start="1597:21" pos:end="1597:65"><call pos:start="1597:21" pos:end="1597:65"><name pos:start="1597:21" pos:end="1597:34">gen_ldst_modrm</name><argument_list pos:start="1597:35" pos:end="1597:65">(<argument pos:start="1597:36" pos:end="1597:38"><expr pos:start="1597:36" pos:end="1597:38"><name pos:start="1597:36" pos:end="1597:38">env</name></expr></argument>, <argument pos:start="1597:41" pos:end="1597:41"><expr pos:start="1597:41" pos:end="1597:41"><name pos:start="1597:41" pos:end="1597:41">s</name></expr></argument>, <argument pos:start="1597:44" pos:end="1597:48"><expr pos:start="1597:44" pos:end="1597:48"><name pos:start="1597:44" pos:end="1597:48">modrm</name></expr></argument>, <argument pos:start="1597:51" pos:end="1597:52"><expr pos:start="1597:51" pos:end="1597:52"><name pos:start="1597:51" pos:end="1597:52">ot</name></expr></argument>, <argument pos:start="1597:55" pos:end="1597:61"><expr pos:start="1597:55" pos:end="1597:61"><name pos:start="1597:55" pos:end="1597:61">OR_TMP0</name></expr></argument>, <argument pos:start="1597:64" pos:end="1597:64"><expr pos:start="1597:64" pos:end="1597:64"><literal type="number" pos:start="1597:64" pos:end="1597:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="1599:21" pos:end="1601:69">/* Extract START, and shift the operand.

                       Shifts larger than operand size get zeros.  */</comment>

                    <expr_stmt pos:start="1603:21" pos:end="1603:65"><expr pos:start="1603:21" pos:end="1603:64"><call pos:start="1603:21" pos:end="1603:64"><name pos:start="1603:21" pos:end="1603:36">tcg_gen_ext8u_tl</name><argument_list pos:start="1603:37" pos:end="1603:64">(<argument pos:start="1603:38" pos:end="1603:43"><expr pos:start="1603:38" pos:end="1603:43"><name pos:start="1603:38" pos:end="1603:43">cpu_A0</name></expr></argument>, <argument pos:start="1603:46" pos:end="1603:63"><expr pos:start="1603:46" pos:end="1603:63"><name pos:start="1603:46" pos:end="1603:63"><name pos:start="1603:46" pos:end="1603:53">cpu_regs</name><index pos:start="1603:54" pos:end="1603:63">[<expr pos:start="1603:55" pos:end="1603:62"><name pos:start="1603:55" pos:end="1603:62"><name pos:start="1603:55" pos:end="1603:55">s</name><operator pos:start="1603:56" pos:end="1603:57">-&gt;</operator><name pos:start="1603:58" pos:end="1603:62">vex_v</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1605:21" pos:end="1605:63"><expr pos:start="1605:21" pos:end="1605:62"><call pos:start="1605:21" pos:end="1605:62"><name pos:start="1605:21" pos:end="1605:34">tcg_gen_shr_tl</name><argument_list pos:start="1605:35" pos:end="1605:62">(<argument pos:start="1605:36" pos:end="1605:43"><expr pos:start="1605:36" pos:end="1605:43"><name pos:start="1605:36" pos:end="1605:43"><name pos:start="1605:36" pos:end="1605:40">cpu_T</name><index pos:start="1605:41" pos:end="1605:43">[<expr pos:start="1605:42" pos:end="1605:42"><literal type="number" pos:start="1605:42" pos:end="1605:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1605:46" pos:end="1605:53"><expr pos:start="1605:46" pos:end="1605:53"><name pos:start="1605:46" pos:end="1605:53"><name pos:start="1605:46" pos:end="1605:50">cpu_T</name><index pos:start="1605:51" pos:end="1605:53">[<expr pos:start="1605:52" pos:end="1605:52"><literal type="number" pos:start="1605:52" pos:end="1605:52">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1605:56" pos:end="1605:61"><expr pos:start="1605:56" pos:end="1605:61"><name pos:start="1605:56" pos:end="1605:61">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="1609:21" pos:end="1609:64"><expr pos:start="1609:21" pos:end="1609:63"><name pos:start="1609:21" pos:end="1609:25">bound</name> <operator pos:start="1609:27" pos:end="1609:27">=</operator> <call pos:start="1609:29" pos:end="1609:63"><name pos:start="1609:29" pos:end="1609:40">tcg_const_tl</name><argument_list pos:start="1609:41" pos:end="1609:63">(<argument pos:start="1609:42" pos:end="1609:62"><expr pos:start="1609:42" pos:end="1609:62"><ternary pos:start="1609:42" pos:end="1609:62"><condition pos:start="1609:42" pos:end="1609:54"><expr pos:start="1609:42" pos:end="1609:52"><name pos:start="1609:42" pos:end="1609:43">ot</name> <operator pos:start="1609:45" pos:end="1609:46">==</operator> <name pos:start="1609:48" pos:end="1609:52">MO_64</name></expr> ?</condition><then pos:start="1609:56" pos:end="1609:57"> <expr pos:start="1609:56" pos:end="1609:57"><literal type="number" pos:start="1609:56" pos:end="1609:57">63</literal></expr> </then><else pos:start="1609:59" pos:end="1609:62">: <expr pos:start="1609:61" pos:end="1609:62"><literal type="number" pos:start="1609:61" pos:end="1609:62">31</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1611:21" pos:end="1611:43"><expr pos:start="1611:21" pos:end="1611:42"><name pos:start="1611:21" pos:end="1611:24">zero</name> <operator pos:start="1611:26" pos:end="1611:26">=</operator> <call pos:start="1611:28" pos:end="1611:42"><name pos:start="1611:28" pos:end="1611:39">tcg_const_tl</name><argument_list pos:start="1611:40" pos:end="1611:42">(<argument pos:start="1611:41" pos:end="1611:41"><expr pos:start="1611:41" pos:end="1611:41"><literal type="number" pos:start="1611:41" pos:end="1611:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1613:21" pos:end="1615:55"><expr pos:start="1613:21" pos:end="1615:54"><call pos:start="1613:21" pos:end="1615:54"><name pos:start="1613:21" pos:end="1613:38">tcg_gen_movcond_tl</name><argument_list pos:start="1613:39" pos:end="1615:54">(<argument pos:start="1613:40" pos:end="1613:51"><expr pos:start="1613:40" pos:end="1613:51"><name pos:start="1613:40" pos:end="1613:51">TCG_COND_LEU</name></expr></argument>, <argument pos:start="1613:54" pos:end="1613:61"><expr pos:start="1613:54" pos:end="1613:61"><name pos:start="1613:54" pos:end="1613:61"><name pos:start="1613:54" pos:end="1613:58">cpu_T</name><index pos:start="1613:59" pos:end="1613:61">[<expr pos:start="1613:60" pos:end="1613:60"><literal type="number" pos:start="1613:60" pos:end="1613:60">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1613:64" pos:end="1613:69"><expr pos:start="1613:64" pos:end="1613:69"><name pos:start="1613:64" pos:end="1613:69">cpu_A0</name></expr></argument>, <argument pos:start="1613:72" pos:end="1613:76"><expr pos:start="1613:72" pos:end="1613:76"><name pos:start="1613:72" pos:end="1613:76">bound</name></expr></argument>,

                                       <argument pos:start="1615:40" pos:end="1615:47"><expr pos:start="1615:40" pos:end="1615:47"><name pos:start="1615:40" pos:end="1615:47"><name pos:start="1615:40" pos:end="1615:44">cpu_T</name><index pos:start="1615:45" pos:end="1615:47">[<expr pos:start="1615:46" pos:end="1615:46"><literal type="number" pos:start="1615:46" pos:end="1615:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1615:50" pos:end="1615:53"><expr pos:start="1615:50" pos:end="1615:53"><name pos:start="1615:50" pos:end="1615:53">zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1617:21" pos:end="1617:40"><expr pos:start="1617:21" pos:end="1617:39"><call pos:start="1617:21" pos:end="1617:39"><name pos:start="1617:21" pos:end="1617:33">tcg_temp_free</name><argument_list pos:start="1617:34" pos:end="1617:39">(<argument pos:start="1617:35" pos:end="1617:38"><expr pos:start="1617:35" pos:end="1617:38"><name pos:start="1617:35" pos:end="1617:38">zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <comment type="block" pos:start="1621:21" pos:end="1623:53">/* Extract the LEN into a mask.  Lengths larger than

                       operand size get all ones.  */</comment>

                    <expr_stmt pos:start="1625:21" pos:end="1625:67"><expr pos:start="1625:21" pos:end="1625:66"><call pos:start="1625:21" pos:end="1625:66"><name pos:start="1625:21" pos:end="1625:35">tcg_gen_shri_tl</name><argument_list pos:start="1625:36" pos:end="1625:66">(<argument pos:start="1625:37" pos:end="1625:42"><expr pos:start="1625:37" pos:end="1625:42"><name pos:start="1625:37" pos:end="1625:42">cpu_A0</name></expr></argument>, <argument pos:start="1625:45" pos:end="1625:62"><expr pos:start="1625:45" pos:end="1625:62"><name pos:start="1625:45" pos:end="1625:62"><name pos:start="1625:45" pos:end="1625:52">cpu_regs</name><index pos:start="1625:53" pos:end="1625:62">[<expr pos:start="1625:54" pos:end="1625:61"><name pos:start="1625:54" pos:end="1625:61"><name pos:start="1625:54" pos:end="1625:54">s</name><operator pos:start="1625:55" pos:end="1625:56">-&gt;</operator><name pos:start="1625:57" pos:end="1625:61">vex_v</name></name></expr>]</index></name></expr></argument>, <argument pos:start="1625:65" pos:end="1625:65"><expr pos:start="1625:65" pos:end="1625:65"><literal type="number" pos:start="1625:65" pos:end="1625:65">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1627:21" pos:end="1627:53"><expr pos:start="1627:21" pos:end="1627:52"><call pos:start="1627:21" pos:end="1627:52"><name pos:start="1627:21" pos:end="1627:36">tcg_gen_ext8u_tl</name><argument_list pos:start="1627:37" pos:end="1627:52">(<argument pos:start="1627:38" pos:end="1627:43"><expr pos:start="1627:38" pos:end="1627:43"><name pos:start="1627:38" pos:end="1627:43">cpu_A0</name></expr></argument>, <argument pos:start="1627:46" pos:end="1627:51"><expr pos:start="1627:46" pos:end="1627:51"><name pos:start="1627:46" pos:end="1627:51">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1629:21" pos:end="1631:54"><expr pos:start="1629:21" pos:end="1631:53"><call pos:start="1629:21" pos:end="1631:53"><name pos:start="1629:21" pos:end="1629:38">tcg_gen_movcond_tl</name><argument_list pos:start="1629:39" pos:end="1631:53">(<argument pos:start="1629:40" pos:end="1629:51"><expr pos:start="1629:40" pos:end="1629:51"><name pos:start="1629:40" pos:end="1629:51">TCG_COND_LEU</name></expr></argument>, <argument pos:start="1629:54" pos:end="1629:59"><expr pos:start="1629:54" pos:end="1629:59"><name pos:start="1629:54" pos:end="1629:59">cpu_A0</name></expr></argument>, <argument pos:start="1629:62" pos:end="1629:67"><expr pos:start="1629:62" pos:end="1629:67"><name pos:start="1629:62" pos:end="1629:67">cpu_A0</name></expr></argument>, <argument pos:start="1629:70" pos:end="1629:74"><expr pos:start="1629:70" pos:end="1629:74"><name pos:start="1629:70" pos:end="1629:74">bound</name></expr></argument>,

                                       <argument pos:start="1631:40" pos:end="1631:45"><expr pos:start="1631:40" pos:end="1631:45"><name pos:start="1631:40" pos:end="1631:45">cpu_A0</name></expr></argument>, <argument pos:start="1631:48" pos:end="1631:52"><expr pos:start="1631:48" pos:end="1631:52"><name pos:start="1631:48" pos:end="1631:52">bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1633:21" pos:end="1633:41"><expr pos:start="1633:21" pos:end="1633:40"><call pos:start="1633:21" pos:end="1633:40"><name pos:start="1633:21" pos:end="1633:33">tcg_temp_free</name><argument_list pos:start="1633:34" pos:end="1633:40">(<argument pos:start="1633:35" pos:end="1633:39"><expr pos:start="1633:35" pos:end="1633:39"><name pos:start="1633:35" pos:end="1633:39">bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1635:21" pos:end="1635:49"><expr pos:start="1635:21" pos:end="1635:48"><call pos:start="1635:21" pos:end="1635:48"><name pos:start="1635:21" pos:end="1635:35">tcg_gen_movi_tl</name><argument_list pos:start="1635:36" pos:end="1635:48">(<argument pos:start="1635:37" pos:end="1635:44"><expr pos:start="1635:37" pos:end="1635:44"><name pos:start="1635:37" pos:end="1635:44"><name pos:start="1635:37" pos:end="1635:41">cpu_T</name><index pos:start="1635:42" pos:end="1635:44">[<expr pos:start="1635:43" pos:end="1635:43"><literal type="number" pos:start="1635:43" pos:end="1635:43">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1635:47" pos:end="1635:47"><expr pos:start="1635:47" pos:end="1635:47"><literal type="number" pos:start="1635:47" pos:end="1635:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1637:21" pos:end="1637:63"><expr pos:start="1637:21" pos:end="1637:62"><call pos:start="1637:21" pos:end="1637:62"><name pos:start="1637:21" pos:end="1637:34">tcg_gen_shl_tl</name><argument_list pos:start="1637:35" pos:end="1637:62">(<argument pos:start="1637:36" pos:end="1637:43"><expr pos:start="1637:36" pos:end="1637:43"><name pos:start="1637:36" pos:end="1637:43"><name pos:start="1637:36" pos:end="1637:40">cpu_T</name><index pos:start="1637:41" pos:end="1637:43">[<expr pos:start="1637:42" pos:end="1637:42"><literal type="number" pos:start="1637:42" pos:end="1637:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1637:46" pos:end="1637:53"><expr pos:start="1637:46" pos:end="1637:53"><name pos:start="1637:46" pos:end="1637:53"><name pos:start="1637:46" pos:end="1637:50">cpu_T</name><index pos:start="1637:51" pos:end="1637:53">[<expr pos:start="1637:52" pos:end="1637:52"><literal type="number" pos:start="1637:52" pos:end="1637:52">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1637:56" pos:end="1637:61"><expr pos:start="1637:56" pos:end="1637:61"><name pos:start="1637:56" pos:end="1637:61">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1639:21" pos:end="1639:59"><expr pos:start="1639:21" pos:end="1639:58"><call pos:start="1639:21" pos:end="1639:58"><name pos:start="1639:21" pos:end="1639:35">tcg_gen_subi_tl</name><argument_list pos:start="1639:36" pos:end="1639:58">(<argument pos:start="1639:37" pos:end="1639:44"><expr pos:start="1639:37" pos:end="1639:44"><name pos:start="1639:37" pos:end="1639:44"><name pos:start="1639:37" pos:end="1639:41">cpu_T</name><index pos:start="1639:42" pos:end="1639:44">[<expr pos:start="1639:43" pos:end="1639:43"><literal type="number" pos:start="1639:43" pos:end="1639:43">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1639:47" pos:end="1639:54"><expr pos:start="1639:47" pos:end="1639:54"><name pos:start="1639:47" pos:end="1639:54"><name pos:start="1639:47" pos:end="1639:51">cpu_T</name><index pos:start="1639:52" pos:end="1639:54">[<expr pos:start="1639:53" pos:end="1639:53"><literal type="number" pos:start="1639:53" pos:end="1639:53">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1639:57" pos:end="1639:57"><expr pos:start="1639:57" pos:end="1639:57"><literal type="number" pos:start="1639:57" pos:end="1639:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1641:21" pos:end="1641:65"><expr pos:start="1641:21" pos:end="1641:64"><call pos:start="1641:21" pos:end="1641:64"><name pos:start="1641:21" pos:end="1641:34">tcg_gen_and_tl</name><argument_list pos:start="1641:35" pos:end="1641:64">(<argument pos:start="1641:36" pos:end="1641:43"><expr pos:start="1641:36" pos:end="1641:43"><name pos:start="1641:36" pos:end="1641:43"><name pos:start="1641:36" pos:end="1641:40">cpu_T</name><index pos:start="1641:41" pos:end="1641:43">[<expr pos:start="1641:42" pos:end="1641:42"><literal type="number" pos:start="1641:42" pos:end="1641:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1641:46" pos:end="1641:53"><expr pos:start="1641:46" pos:end="1641:53"><name pos:start="1641:46" pos:end="1641:53"><name pos:start="1641:46" pos:end="1641:50">cpu_T</name><index pos:start="1641:51" pos:end="1641:53">[<expr pos:start="1641:52" pos:end="1641:52"><literal type="number" pos:start="1641:52" pos:end="1641:52">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1641:56" pos:end="1641:63"><expr pos:start="1641:56" pos:end="1641:63"><name pos:start="1641:56" pos:end="1641:63"><name pos:start="1641:56" pos:end="1641:60">cpu_T</name><index pos:start="1641:61" pos:end="1641:63">[<expr pos:start="1641:62" pos:end="1641:62"><literal type="number" pos:start="1641:62" pos:end="1641:62">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="1645:21" pos:end="1645:56"><expr pos:start="1645:21" pos:end="1645:55"><call pos:start="1645:21" pos:end="1645:55"><name pos:start="1645:21" pos:end="1645:36">gen_op_mov_reg_v</name><argument_list pos:start="1645:37" pos:end="1645:55">(<argument pos:start="1645:38" pos:end="1645:39"><expr pos:start="1645:38" pos:end="1645:39"><name pos:start="1645:38" pos:end="1645:39">ot</name></expr></argument>, <argument pos:start="1645:42" pos:end="1645:44"><expr pos:start="1645:42" pos:end="1645:44"><name pos:start="1645:42" pos:end="1645:44">reg</name></expr></argument>, <argument pos:start="1645:47" pos:end="1645:54"><expr pos:start="1645:47" pos:end="1645:54"><name pos:start="1645:47" pos:end="1645:54"><name pos:start="1645:47" pos:end="1645:51">cpu_T</name><index pos:start="1645:52" pos:end="1645:54">[<expr pos:start="1645:53" pos:end="1645:53"><literal type="number" pos:start="1645:53" pos:end="1645:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1647:21" pos:end="1647:40"><expr pos:start="1647:21" pos:end="1647:39"><call pos:start="1647:21" pos:end="1647:39"><name pos:start="1647:21" pos:end="1647:37">gen_op_update1_cc</name><argument_list pos:start="1647:38" pos:end="1647:39">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1649:21" pos:end="1649:52"><expr pos:start="1649:21" pos:end="1649:51"><call pos:start="1649:21" pos:end="1649:51"><name pos:start="1649:21" pos:end="1649:29">set_cc_op</name><argument_list pos:start="1649:30" pos:end="1649:51">(<argument pos:start="1649:31" pos:end="1649:31"><expr pos:start="1649:31" pos:end="1649:31"><name pos:start="1649:31" pos:end="1649:31">s</name></expr></argument>, <argument pos:start="1649:34" pos:end="1649:50"><expr pos:start="1649:34" pos:end="1649:50"><name pos:start="1649:34" pos:end="1649:45">CC_OP_LOGICB</name> <operator pos:start="1649:47" pos:end="1649:47">+</operator> <name pos:start="1649:49" pos:end="1649:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="1653:17" pos:end="1653:22">break;</break>



            <case pos:start="1657:13" pos:end="1657:23">case <expr pos:start="1657:18" pos:end="1657:22"><literal type="number" pos:start="1657:18" pos:end="1657:22">0x0f5</literal></expr>:</case> <comment type="block" pos:start="1657:25" pos:end="1657:45">/* bzhi Gy, Ey, By */</comment>

                <if_stmt pos:start="1659:17" pos:end="1667:17"><if pos:start="1659:17" pos:end="1667:17">if <condition pos:start="1659:20" pos:end="1663:37">(<expr pos:start="1659:21" pos:end="1663:36"><operator pos:start="1659:21" pos:end="1659:21">!</operator><operator pos:start="1659:22" pos:end="1659:22">(</operator><name pos:start="1659:23" pos:end="1659:47"><name pos:start="1659:23" pos:end="1659:23">s</name><operator pos:start="1659:24" pos:end="1659:25">-&gt;</operator><name pos:start="1659:26" pos:end="1659:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="1659:49" pos:end="1659:49">&amp;</operator> <name pos:start="1659:51" pos:end="1659:68">CPUID_7_0_EBX_BMI2</name><operator pos:start="1659:69" pos:end="1659:69">)</operator>

                    <operator pos:start="1661:21" pos:end="1661:22">||</operator> <operator pos:start="1661:24" pos:end="1661:24">!</operator><operator pos:start="1661:25" pos:end="1661:25">(</operator><name pos:start="1661:26" pos:end="1661:34"><name pos:start="1661:26" pos:end="1661:26">s</name><operator pos:start="1661:27" pos:end="1661:28">-&gt;</operator><name pos:start="1661:29" pos:end="1661:34">prefix</name></name> <operator pos:start="1661:36" pos:end="1661:36">&amp;</operator> <name pos:start="1661:38" pos:end="1661:47">PREFIX_VEX</name><operator pos:start="1661:48" pos:end="1661:48">)</operator>

                    <operator pos:start="1663:21" pos:end="1663:22">||</operator> <name pos:start="1663:24" pos:end="1663:31"><name pos:start="1663:24" pos:end="1663:24">s</name><operator pos:start="1663:25" pos:end="1663:26">-&gt;</operator><name pos:start="1663:27" pos:end="1663:31">vex_l</name></name> <operator pos:start="1663:33" pos:end="1663:34">!=</operator> <literal type="number" pos:start="1663:36" pos:end="1663:36">0</literal></expr>)</condition> <block pos:start="1663:39" pos:end="1667:17">{<block_content pos:start="1665:21" pos:end="1665:36">

                    <goto pos:start="1665:21" pos:end="1665:36">goto <name pos:start="1665:26" pos:end="1665:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1669:17" pos:end="1669:40"><expr pos:start="1669:17" pos:end="1669:39"><name pos:start="1669:17" pos:end="1669:18">ot</name> <operator pos:start="1669:20" pos:end="1669:20">=</operator> <call pos:start="1669:22" pos:end="1669:39"><name pos:start="1669:22" pos:end="1669:29">mo_64_32</name><argument_list pos:start="1669:30" pos:end="1669:39">(<argument pos:start="1669:31" pos:end="1669:38"><expr pos:start="1669:31" pos:end="1669:38"><name pos:start="1669:31" pos:end="1669:38"><name pos:start="1669:31" pos:end="1669:31">s</name><operator pos:start="1669:32" pos:end="1669:33">-&gt;</operator><name pos:start="1669:34" pos:end="1669:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1671:17" pos:end="1671:62"><expr pos:start="1671:17" pos:end="1671:61"><call pos:start="1671:17" pos:end="1671:61"><name pos:start="1671:17" pos:end="1671:30">gen_ldst_modrm</name><argument_list pos:start="1671:31" pos:end="1671:61">(<argument pos:start="1671:32" pos:end="1671:34"><expr pos:start="1671:32" pos:end="1671:34"><name pos:start="1671:32" pos:end="1671:34">env</name></expr></argument>, <argument pos:start="1671:37" pos:end="1671:37"><expr pos:start="1671:37" pos:end="1671:37"><name pos:start="1671:37" pos:end="1671:37">s</name></expr></argument>, <argument pos:start="1671:40" pos:end="1671:44"><expr pos:start="1671:40" pos:end="1671:44"><name pos:start="1671:40" pos:end="1671:44">modrm</name></expr></argument>, <argument pos:start="1671:47" pos:end="1671:48"><expr pos:start="1671:47" pos:end="1671:48"><name pos:start="1671:47" pos:end="1671:48">ot</name></expr></argument>, <argument pos:start="1671:51" pos:end="1671:57"><expr pos:start="1671:51" pos:end="1671:57"><name pos:start="1671:51" pos:end="1671:57">OR_TMP0</name></expr></argument>, <argument pos:start="1671:60" pos:end="1671:60"><expr pos:start="1671:60" pos:end="1671:60"><literal type="number" pos:start="1671:60" pos:end="1671:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1673:17" pos:end="1673:63"><expr pos:start="1673:17" pos:end="1673:62"><call pos:start="1673:17" pos:end="1673:62"><name pos:start="1673:17" pos:end="1673:32">tcg_gen_ext8u_tl</name><argument_list pos:start="1673:33" pos:end="1673:62">(<argument pos:start="1673:34" pos:end="1673:41"><expr pos:start="1673:34" pos:end="1673:41"><name pos:start="1673:34" pos:end="1673:41"><name pos:start="1673:34" pos:end="1673:38">cpu_T</name><index pos:start="1673:39" pos:end="1673:41">[<expr pos:start="1673:40" pos:end="1673:40"><literal type="number" pos:start="1673:40" pos:end="1673:40">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1673:44" pos:end="1673:61"><expr pos:start="1673:44" pos:end="1673:61"><name pos:start="1673:44" pos:end="1673:61"><name pos:start="1673:44" pos:end="1673:51">cpu_regs</name><index pos:start="1673:52" pos:end="1673:61">[<expr pos:start="1673:53" pos:end="1673:60"><name pos:start="1673:53" pos:end="1673:60"><name pos:start="1673:53" pos:end="1673:53">s</name><operator pos:start="1673:54" pos:end="1673:55">-&gt;</operator><name pos:start="1673:56" pos:end="1673:60">vex_v</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <block pos:start="1675:17" pos:end="1693:17">{<block_content pos:start="1677:21" pos:end="1691:41">

                    <decl_stmt pos:start="1677:21" pos:end="1677:69"><decl pos:start="1677:21" pos:end="1677:68"><type pos:start="1677:21" pos:end="1677:24"><name pos:start="1677:21" pos:end="1677:24">TCGv</name></type> <name pos:start="1677:26" pos:end="1677:30">bound</name> <init pos:start="1677:32" pos:end="1677:68">= <expr pos:start="1677:34" pos:end="1677:68"><call pos:start="1677:34" pos:end="1677:68"><name pos:start="1677:34" pos:end="1677:45">tcg_const_tl</name><argument_list pos:start="1677:46" pos:end="1677:68">(<argument pos:start="1677:47" pos:end="1677:67"><expr pos:start="1677:47" pos:end="1677:67"><ternary pos:start="1677:47" pos:end="1677:67"><condition pos:start="1677:47" pos:end="1677:59"><expr pos:start="1677:47" pos:end="1677:57"><name pos:start="1677:47" pos:end="1677:48">ot</name> <operator pos:start="1677:50" pos:end="1677:51">==</operator> <name pos:start="1677:53" pos:end="1677:57">MO_64</name></expr> ?</condition><then pos:start="1677:61" pos:end="1677:62"> <expr pos:start="1677:61" pos:end="1677:62"><literal type="number" pos:start="1677:61" pos:end="1677:62">63</literal></expr> </then><else pos:start="1677:64" pos:end="1677:67">: <expr pos:start="1677:66" pos:end="1677:67"><literal type="number" pos:start="1677:66" pos:end="1677:67">31</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="block" pos:start="1679:21" pos:end="1681:72">/* Note that since we're using BMILG (in order to get O

                       cleared) we need to store the inverse into C.  */</comment>

                    <expr_stmt pos:start="1683:21" pos:end="1685:56"><expr pos:start="1683:21" pos:end="1685:55"><call pos:start="1683:21" pos:end="1685:55"><name pos:start="1683:21" pos:end="1683:38">tcg_gen_setcond_tl</name><argument_list pos:start="1683:39" pos:end="1685:55">(<argument pos:start="1683:40" pos:end="1683:50"><expr pos:start="1683:40" pos:end="1683:50"><name pos:start="1683:40" pos:end="1683:50">TCG_COND_LT</name></expr></argument>, <argument pos:start="1683:53" pos:end="1683:62"><expr pos:start="1683:53" pos:end="1683:62"><name pos:start="1683:53" pos:end="1683:62">cpu_cc_src</name></expr></argument>,

                                       <argument pos:start="1685:40" pos:end="1685:47"><expr pos:start="1685:40" pos:end="1685:47"><name pos:start="1685:40" pos:end="1685:47"><name pos:start="1685:40" pos:end="1685:44">cpu_T</name><index pos:start="1685:45" pos:end="1685:47">[<expr pos:start="1685:46" pos:end="1685:46"><literal type="number" pos:start="1685:46" pos:end="1685:46">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1685:50" pos:end="1685:54"><expr pos:start="1685:50" pos:end="1685:54"><name pos:start="1685:50" pos:end="1685:54">bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1687:21" pos:end="1689:63"><expr pos:start="1687:21" pos:end="1689:62"><call pos:start="1687:21" pos:end="1689:62"><name pos:start="1687:21" pos:end="1687:38">tcg_gen_movcond_tl</name><argument_list pos:start="1687:39" pos:end="1689:62">(<argument pos:start="1687:40" pos:end="1687:50"><expr pos:start="1687:40" pos:end="1687:50"><name pos:start="1687:40" pos:end="1687:50">TCG_COND_GT</name></expr></argument>, <argument pos:start="1687:53" pos:end="1687:60"><expr pos:start="1687:53" pos:end="1687:60"><name pos:start="1687:53" pos:end="1687:60"><name pos:start="1687:53" pos:end="1687:57">cpu_T</name><index pos:start="1687:58" pos:end="1687:60">[<expr pos:start="1687:59" pos:end="1687:59"><literal type="number" pos:start="1687:59" pos:end="1687:59">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1687:63" pos:end="1687:70"><expr pos:start="1687:63" pos:end="1687:70"><name pos:start="1687:63" pos:end="1687:70"><name pos:start="1687:63" pos:end="1687:67">cpu_T</name><index pos:start="1687:68" pos:end="1687:70">[<expr pos:start="1687:69" pos:end="1687:69"><literal type="number" pos:start="1687:69" pos:end="1687:69">1</literal></expr>]</index></name></expr></argument>,

                                       <argument pos:start="1689:40" pos:end="1689:44"><expr pos:start="1689:40" pos:end="1689:44"><name pos:start="1689:40" pos:end="1689:44">bound</name></expr></argument>, <argument pos:start="1689:47" pos:end="1689:51"><expr pos:start="1689:47" pos:end="1689:51"><name pos:start="1689:47" pos:end="1689:51">bound</name></expr></argument>, <argument pos:start="1689:54" pos:end="1689:61"><expr pos:start="1689:54" pos:end="1689:61"><name pos:start="1689:54" pos:end="1689:61"><name pos:start="1689:54" pos:end="1689:58">cpu_T</name><index pos:start="1689:59" pos:end="1689:61">[<expr pos:start="1689:60" pos:end="1689:60"><literal type="number" pos:start="1689:60" pos:end="1689:60">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1691:21" pos:end="1691:41"><expr pos:start="1691:21" pos:end="1691:40"><call pos:start="1691:21" pos:end="1691:40"><name pos:start="1691:21" pos:end="1691:33">tcg_temp_free</name><argument_list pos:start="1691:34" pos:end="1691:40">(<argument pos:start="1691:35" pos:end="1691:39"><expr pos:start="1691:35" pos:end="1691:39"><name pos:start="1691:35" pos:end="1691:39">bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <expr_stmt pos:start="1695:17" pos:end="1695:44"><expr pos:start="1695:17" pos:end="1695:43"><call pos:start="1695:17" pos:end="1695:43"><name pos:start="1695:17" pos:end="1695:31">tcg_gen_movi_tl</name><argument_list pos:start="1695:32" pos:end="1695:43">(<argument pos:start="1695:33" pos:end="1695:38"><expr pos:start="1695:33" pos:end="1695:38"><name pos:start="1695:33" pos:end="1695:38">cpu_A0</name></expr></argument>, <argument pos:start="1695:41" pos:end="1695:42"><expr pos:start="1695:41" pos:end="1695:42"><operator pos:start="1695:41" pos:end="1695:41">-</operator><literal type="number" pos:start="1695:42" pos:end="1695:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1697:17" pos:end="1697:57"><expr pos:start="1697:17" pos:end="1697:56"><call pos:start="1697:17" pos:end="1697:56"><name pos:start="1697:17" pos:end="1697:30">tcg_gen_shl_tl</name><argument_list pos:start="1697:31" pos:end="1697:56">(<argument pos:start="1697:32" pos:end="1697:37"><expr pos:start="1697:32" pos:end="1697:37"><name pos:start="1697:32" pos:end="1697:37">cpu_A0</name></expr></argument>, <argument pos:start="1697:40" pos:end="1697:45"><expr pos:start="1697:40" pos:end="1697:45"><name pos:start="1697:40" pos:end="1697:45">cpu_A0</name></expr></argument>, <argument pos:start="1697:48" pos:end="1697:55"><expr pos:start="1697:48" pos:end="1697:55"><name pos:start="1697:48" pos:end="1697:55"><name pos:start="1697:48" pos:end="1697:52">cpu_T</name><index pos:start="1697:53" pos:end="1697:55">[<expr pos:start="1697:54" pos:end="1697:54"><literal type="number" pos:start="1697:54" pos:end="1697:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1699:17" pos:end="1699:60"><expr pos:start="1699:17" pos:end="1699:59"><call pos:start="1699:17" pos:end="1699:59"><name pos:start="1699:17" pos:end="1699:31">tcg_gen_andc_tl</name><argument_list pos:start="1699:32" pos:end="1699:59">(<argument pos:start="1699:33" pos:end="1699:40"><expr pos:start="1699:33" pos:end="1699:40"><name pos:start="1699:33" pos:end="1699:40"><name pos:start="1699:33" pos:end="1699:37">cpu_T</name><index pos:start="1699:38" pos:end="1699:40">[<expr pos:start="1699:39" pos:end="1699:39"><literal type="number" pos:start="1699:39" pos:end="1699:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1699:43" pos:end="1699:50"><expr pos:start="1699:43" pos:end="1699:50"><name pos:start="1699:43" pos:end="1699:50"><name pos:start="1699:43" pos:end="1699:47">cpu_T</name><index pos:start="1699:48" pos:end="1699:50">[<expr pos:start="1699:49" pos:end="1699:49"><literal type="number" pos:start="1699:49" pos:end="1699:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1699:53" pos:end="1699:58"><expr pos:start="1699:53" pos:end="1699:58"><name pos:start="1699:53" pos:end="1699:58">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1701:17" pos:end="1701:52"><expr pos:start="1701:17" pos:end="1701:51"><call pos:start="1701:17" pos:end="1701:51"><name pos:start="1701:17" pos:end="1701:32">gen_op_mov_reg_v</name><argument_list pos:start="1701:33" pos:end="1701:51">(<argument pos:start="1701:34" pos:end="1701:35"><expr pos:start="1701:34" pos:end="1701:35"><name pos:start="1701:34" pos:end="1701:35">ot</name></expr></argument>, <argument pos:start="1701:38" pos:end="1701:40"><expr pos:start="1701:38" pos:end="1701:40"><name pos:start="1701:38" pos:end="1701:40">reg</name></expr></argument>, <argument pos:start="1701:43" pos:end="1701:50"><expr pos:start="1701:43" pos:end="1701:50"><name pos:start="1701:43" pos:end="1701:50"><name pos:start="1701:43" pos:end="1701:47">cpu_T</name><index pos:start="1701:48" pos:end="1701:50">[<expr pos:start="1701:49" pos:end="1701:49"><literal type="number" pos:start="1701:49" pos:end="1701:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1703:17" pos:end="1703:36"><expr pos:start="1703:17" pos:end="1703:35"><call pos:start="1703:17" pos:end="1703:35"><name pos:start="1703:17" pos:end="1703:33">gen_op_update1_cc</name><argument_list pos:start="1703:34" pos:end="1703:35">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1705:17" pos:end="1705:48"><expr pos:start="1705:17" pos:end="1705:47"><call pos:start="1705:17" pos:end="1705:47"><name pos:start="1705:17" pos:end="1705:25">set_cc_op</name><argument_list pos:start="1705:26" pos:end="1705:47">(<argument pos:start="1705:27" pos:end="1705:27"><expr pos:start="1705:27" pos:end="1705:27"><name pos:start="1705:27" pos:end="1705:27">s</name></expr></argument>, <argument pos:start="1705:30" pos:end="1705:46"><expr pos:start="1705:30" pos:end="1705:46"><name pos:start="1705:30" pos:end="1705:41">CC_OP_BMILGB</name> <operator pos:start="1705:43" pos:end="1705:43">+</operator> <name pos:start="1705:45" pos:end="1705:46">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1707:17" pos:end="1707:22">break;</break>



            <case pos:start="1711:13" pos:end="1711:23">case <expr pos:start="1711:18" pos:end="1711:22"><literal type="number" pos:start="1711:18" pos:end="1711:22">0x3f6</literal></expr>:</case> <comment type="block" pos:start="1711:25" pos:end="1711:50">/* mulx By, Gy, rdx, Ey */</comment>

                <if_stmt pos:start="1713:17" pos:end="1721:17"><if pos:start="1713:17" pos:end="1721:17">if <condition pos:start="1713:20" pos:end="1717:37">(<expr pos:start="1713:21" pos:end="1717:36"><operator pos:start="1713:21" pos:end="1713:21">!</operator><operator pos:start="1713:22" pos:end="1713:22">(</operator><name pos:start="1713:23" pos:end="1713:47"><name pos:start="1713:23" pos:end="1713:23">s</name><operator pos:start="1713:24" pos:end="1713:25">-&gt;</operator><name pos:start="1713:26" pos:end="1713:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="1713:49" pos:end="1713:49">&amp;</operator> <name pos:start="1713:51" pos:end="1713:68">CPUID_7_0_EBX_BMI2</name><operator pos:start="1713:69" pos:end="1713:69">)</operator>

                    <operator pos:start="1715:21" pos:end="1715:22">||</operator> <operator pos:start="1715:24" pos:end="1715:24">!</operator><operator pos:start="1715:25" pos:end="1715:25">(</operator><name pos:start="1715:26" pos:end="1715:34"><name pos:start="1715:26" pos:end="1715:26">s</name><operator pos:start="1715:27" pos:end="1715:28">-&gt;</operator><name pos:start="1715:29" pos:end="1715:34">prefix</name></name> <operator pos:start="1715:36" pos:end="1715:36">&amp;</operator> <name pos:start="1715:38" pos:end="1715:47">PREFIX_VEX</name><operator pos:start="1715:48" pos:end="1715:48">)</operator>

                    <operator pos:start="1717:21" pos:end="1717:22">||</operator> <name pos:start="1717:24" pos:end="1717:31"><name pos:start="1717:24" pos:end="1717:24">s</name><operator pos:start="1717:25" pos:end="1717:26">-&gt;</operator><name pos:start="1717:27" pos:end="1717:31">vex_l</name></name> <operator pos:start="1717:33" pos:end="1717:34">!=</operator> <literal type="number" pos:start="1717:36" pos:end="1717:36">0</literal></expr>)</condition> <block pos:start="1717:39" pos:end="1721:17">{<block_content pos:start="1719:21" pos:end="1719:36">

                    <goto pos:start="1719:21" pos:end="1719:36">goto <name pos:start="1719:26" pos:end="1719:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1723:17" pos:end="1723:40"><expr pos:start="1723:17" pos:end="1723:39"><name pos:start="1723:17" pos:end="1723:18">ot</name> <operator pos:start="1723:20" pos:end="1723:20">=</operator> <call pos:start="1723:22" pos:end="1723:39"><name pos:start="1723:22" pos:end="1723:29">mo_64_32</name><argument_list pos:start="1723:30" pos:end="1723:39">(<argument pos:start="1723:31" pos:end="1723:38"><expr pos:start="1723:31" pos:end="1723:38"><name pos:start="1723:31" pos:end="1723:38"><name pos:start="1723:31" pos:end="1723:31">s</name><operator pos:start="1723:32" pos:end="1723:33">-&gt;</operator><name pos:start="1723:34" pos:end="1723:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1725:17" pos:end="1725:62"><expr pos:start="1725:17" pos:end="1725:61"><call pos:start="1725:17" pos:end="1725:61"><name pos:start="1725:17" pos:end="1725:30">gen_ldst_modrm</name><argument_list pos:start="1725:31" pos:end="1725:61">(<argument pos:start="1725:32" pos:end="1725:34"><expr pos:start="1725:32" pos:end="1725:34"><name pos:start="1725:32" pos:end="1725:34">env</name></expr></argument>, <argument pos:start="1725:37" pos:end="1725:37"><expr pos:start="1725:37" pos:end="1725:37"><name pos:start="1725:37" pos:end="1725:37">s</name></expr></argument>, <argument pos:start="1725:40" pos:end="1725:44"><expr pos:start="1725:40" pos:end="1725:44"><name pos:start="1725:40" pos:end="1725:44">modrm</name></expr></argument>, <argument pos:start="1725:47" pos:end="1725:48"><expr pos:start="1725:47" pos:end="1725:48"><name pos:start="1725:47" pos:end="1725:48">ot</name></expr></argument>, <argument pos:start="1725:51" pos:end="1725:57"><expr pos:start="1725:51" pos:end="1725:57"><name pos:start="1725:51" pos:end="1725:57">OR_TMP0</name></expr></argument>, <argument pos:start="1725:60" pos:end="1725:60"><expr pos:start="1725:60" pos:end="1725:60"><literal type="number" pos:start="1725:60" pos:end="1725:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="1727:17" pos:end="1757:17">switch <condition pos:start="1727:24" pos:end="1727:27">(<expr pos:start="1727:25" pos:end="1727:26"><name pos:start="1727:25" pos:end="1727:26">ot</name></expr>)</condition> <block pos:start="1727:29" pos:end="1757:17">{<block_content pos:start="1729:17" pos:end="1756:0">

                <default pos:start="1729:17" pos:end="1729:24">default:</default>

                    <expr_stmt pos:start="1731:21" pos:end="1731:65"><expr pos:start="1731:21" pos:end="1731:64"><call pos:start="1731:21" pos:end="1731:64"><name pos:start="1731:21" pos:end="1731:40">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1731:41" pos:end="1731:64">(<argument pos:start="1731:42" pos:end="1731:53"><expr pos:start="1731:42" pos:end="1731:53"><name pos:start="1731:42" pos:end="1731:53">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1731:56" pos:end="1731:63"><expr pos:start="1731:56" pos:end="1731:63"><name pos:start="1731:56" pos:end="1731:63"><name pos:start="1731:56" pos:end="1731:60">cpu_T</name><index pos:start="1731:61" pos:end="1731:63">[<expr pos:start="1731:62" pos:end="1731:62"><literal type="number" pos:start="1731:62" pos:end="1731:62">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1733:21" pos:end="1733:72"><expr pos:start="1733:21" pos:end="1733:71"><call pos:start="1733:21" pos:end="1733:71"><name pos:start="1733:21" pos:end="1733:40">tcg_gen_trunc_tl_i32</name><argument_list pos:start="1733:41" pos:end="1733:71">(<argument pos:start="1733:42" pos:end="1733:53"><expr pos:start="1733:42" pos:end="1733:53"><name pos:start="1733:42" pos:end="1733:53">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="1733:56" pos:end="1733:70"><expr pos:start="1733:56" pos:end="1733:70"><name pos:start="1733:56" pos:end="1733:70"><name pos:start="1733:56" pos:end="1733:63">cpu_regs</name><index pos:start="1733:64" pos:end="1733:70">[<expr pos:start="1733:65" pos:end="1733:69"><name pos:start="1733:65" pos:end="1733:69">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1735:21" pos:end="1737:66"><expr pos:start="1735:21" pos:end="1737:65"><call pos:start="1735:21" pos:end="1737:65"><name pos:start="1735:21" pos:end="1735:37">tcg_gen_mulu2_i32</name><argument_list pos:start="1735:38" pos:end="1737:65">(<argument pos:start="1735:39" pos:end="1735:50"><expr pos:start="1735:39" pos:end="1735:50"><name pos:start="1735:39" pos:end="1735:50">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1735:53" pos:end="1735:64"><expr pos:start="1735:53" pos:end="1735:64"><name pos:start="1735:53" pos:end="1735:64">cpu_tmp3_i32</name></expr></argument>,

                                      <argument pos:start="1737:39" pos:end="1737:50"><expr pos:start="1737:39" pos:end="1737:50"><name pos:start="1737:39" pos:end="1737:50">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="1737:53" pos:end="1737:64"><expr pos:start="1737:53" pos:end="1737:64"><name pos:start="1737:53" pos:end="1737:64">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1739:21" pos:end="1739:74"><expr pos:start="1739:21" pos:end="1739:73"><call pos:start="1739:21" pos:end="1739:73"><name pos:start="1739:21" pos:end="1739:39">tcg_gen_extu_i32_tl</name><argument_list pos:start="1739:40" pos:end="1739:73">(<argument pos:start="1739:41" pos:end="1739:58"><expr pos:start="1739:41" pos:end="1739:58"><name pos:start="1739:41" pos:end="1739:58"><name pos:start="1739:41" pos:end="1739:48">cpu_regs</name><index pos:start="1739:49" pos:end="1739:58">[<expr pos:start="1739:50" pos:end="1739:57"><name pos:start="1739:50" pos:end="1739:57"><name pos:start="1739:50" pos:end="1739:50">s</name><operator pos:start="1739:51" pos:end="1739:52">-&gt;</operator><name pos:start="1739:53" pos:end="1739:57">vex_v</name></name></expr>]</index></name></expr></argument>, <argument pos:start="1739:61" pos:end="1739:72"><expr pos:start="1739:61" pos:end="1739:72"><name pos:start="1739:61" pos:end="1739:72">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1741:21" pos:end="1741:69"><expr pos:start="1741:21" pos:end="1741:68"><call pos:start="1741:21" pos:end="1741:68"><name pos:start="1741:21" pos:end="1741:39">tcg_gen_extu_i32_tl</name><argument_list pos:start="1741:40" pos:end="1741:68">(<argument pos:start="1741:41" pos:end="1741:53"><expr pos:start="1741:41" pos:end="1741:53"><name pos:start="1741:41" pos:end="1741:53"><name pos:start="1741:41" pos:end="1741:48">cpu_regs</name><index pos:start="1741:49" pos:end="1741:53">[<expr pos:start="1741:50" pos:end="1741:52"><name pos:start="1741:50" pos:end="1741:52">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1741:56" pos:end="1741:67"><expr pos:start="1741:56" pos:end="1741:67"><name pos:start="1741:56" pos:end="1741:67">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1743:21" pos:end="1746:0">break;</break>

<cpp:ifdef pos:start="1745:1" pos:end="1745:20">#<cpp:directive pos:start="1745:2" pos:end="1745:6">ifdef</cpp:directive> <name pos:start="1745:8" pos:end="1745:20">TARGET_X86_64</name></cpp:ifdef>

                <case pos:start="1747:17" pos:end="1747:27">case <expr pos:start="1747:22" pos:end="1747:26"><name pos:start="1747:22" pos:end="1747:26">MO_64</name></expr>:</case>

                    <expr_stmt pos:start="1749:21" pos:end="1751:65"><expr pos:start="1749:21" pos:end="1751:64"><call pos:start="1749:21" pos:end="1751:64"><name pos:start="1749:21" pos:end="1749:37">tcg_gen_mulu2_i64</name><argument_list pos:start="1749:38" pos:end="1751:64">(<argument pos:start="1749:39" pos:end="1749:56"><expr pos:start="1749:39" pos:end="1749:56"><name pos:start="1749:39" pos:end="1749:56"><name pos:start="1749:39" pos:end="1749:46">cpu_regs</name><index pos:start="1749:47" pos:end="1749:56">[<expr pos:start="1749:48" pos:end="1749:55"><name pos:start="1749:48" pos:end="1749:55"><name pos:start="1749:48" pos:end="1749:48">s</name><operator pos:start="1749:49" pos:end="1749:50">-&gt;</operator><name pos:start="1749:51" pos:end="1749:55">vex_v</name></name></expr>]</index></name></expr></argument>, <argument pos:start="1749:59" pos:end="1749:71"><expr pos:start="1749:59" pos:end="1749:71"><name pos:start="1749:59" pos:end="1749:71"><name pos:start="1749:59" pos:end="1749:66">cpu_regs</name><index pos:start="1749:67" pos:end="1749:71">[<expr pos:start="1749:68" pos:end="1749:70"><name pos:start="1749:68" pos:end="1749:70">reg</name></expr>]</index></name></expr></argument>,

                                      <argument pos:start="1751:39" pos:end="1751:46"><expr pos:start="1751:39" pos:end="1751:46"><name pos:start="1751:39" pos:end="1751:46"><name pos:start="1751:39" pos:end="1751:43">cpu_T</name><index pos:start="1751:44" pos:end="1751:46">[<expr pos:start="1751:45" pos:end="1751:45"><literal type="number" pos:start="1751:45" pos:end="1751:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1751:49" pos:end="1751:63"><expr pos:start="1751:49" pos:end="1751:63"><name pos:start="1751:49" pos:end="1751:63"><name pos:start="1751:49" pos:end="1751:56">cpu_regs</name><index pos:start="1751:57" pos:end="1751:63">[<expr pos:start="1751:58" pos:end="1751:62"><name pos:start="1751:58" pos:end="1751:62">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1753:21" pos:end="1756:0">break;</break>

<cpp:endif pos:start="1755:1" pos:end="1755:6">#<cpp:directive pos:start="1755:2" pos:end="1755:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></switch>

                <break pos:start="1759:17" pos:end="1759:22">break;</break>



            <case pos:start="1763:13" pos:end="1763:23">case <expr pos:start="1763:18" pos:end="1763:22"><literal type="number" pos:start="1763:18" pos:end="1763:22">0x3f5</literal></expr>:</case> <comment type="block" pos:start="1763:25" pos:end="1763:45">/* pdep Gy, By, Ey */</comment>

                <if_stmt pos:start="1765:17" pos:end="1773:17"><if pos:start="1765:17" pos:end="1773:17">if <condition pos:start="1765:20" pos:end="1769:37">(<expr pos:start="1765:21" pos:end="1769:36"><operator pos:start="1765:21" pos:end="1765:21">!</operator><operator pos:start="1765:22" pos:end="1765:22">(</operator><name pos:start="1765:23" pos:end="1765:47"><name pos:start="1765:23" pos:end="1765:23">s</name><operator pos:start="1765:24" pos:end="1765:25">-&gt;</operator><name pos:start="1765:26" pos:end="1765:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="1765:49" pos:end="1765:49">&amp;</operator> <name pos:start="1765:51" pos:end="1765:68">CPUID_7_0_EBX_BMI2</name><operator pos:start="1765:69" pos:end="1765:69">)</operator>

                    <operator pos:start="1767:21" pos:end="1767:22">||</operator> <operator pos:start="1767:24" pos:end="1767:24">!</operator><operator pos:start="1767:25" pos:end="1767:25">(</operator><name pos:start="1767:26" pos:end="1767:34"><name pos:start="1767:26" pos:end="1767:26">s</name><operator pos:start="1767:27" pos:end="1767:28">-&gt;</operator><name pos:start="1767:29" pos:end="1767:34">prefix</name></name> <operator pos:start="1767:36" pos:end="1767:36">&amp;</operator> <name pos:start="1767:38" pos:end="1767:47">PREFIX_VEX</name><operator pos:start="1767:48" pos:end="1767:48">)</operator>

                    <operator pos:start="1769:21" pos:end="1769:22">||</operator> <name pos:start="1769:24" pos:end="1769:31"><name pos:start="1769:24" pos:end="1769:24">s</name><operator pos:start="1769:25" pos:end="1769:26">-&gt;</operator><name pos:start="1769:27" pos:end="1769:31">vex_l</name></name> <operator pos:start="1769:33" pos:end="1769:34">!=</operator> <literal type="number" pos:start="1769:36" pos:end="1769:36">0</literal></expr>)</condition> <block pos:start="1769:39" pos:end="1773:17">{<block_content pos:start="1771:21" pos:end="1771:36">

                    <goto pos:start="1771:21" pos:end="1771:36">goto <name pos:start="1771:26" pos:end="1771:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1775:17" pos:end="1775:40"><expr pos:start="1775:17" pos:end="1775:39"><name pos:start="1775:17" pos:end="1775:18">ot</name> <operator pos:start="1775:20" pos:end="1775:20">=</operator> <call pos:start="1775:22" pos:end="1775:39"><name pos:start="1775:22" pos:end="1775:29">mo_64_32</name><argument_list pos:start="1775:30" pos:end="1775:39">(<argument pos:start="1775:31" pos:end="1775:38"><expr pos:start="1775:31" pos:end="1775:38"><name pos:start="1775:31" pos:end="1775:38"><name pos:start="1775:31" pos:end="1775:31">s</name><operator pos:start="1775:32" pos:end="1775:33">-&gt;</operator><name pos:start="1775:34" pos:end="1775:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1777:17" pos:end="1777:62"><expr pos:start="1777:17" pos:end="1777:61"><call pos:start="1777:17" pos:end="1777:61"><name pos:start="1777:17" pos:end="1777:30">gen_ldst_modrm</name><argument_list pos:start="1777:31" pos:end="1777:61">(<argument pos:start="1777:32" pos:end="1777:34"><expr pos:start="1777:32" pos:end="1777:34"><name pos:start="1777:32" pos:end="1777:34">env</name></expr></argument>, <argument pos:start="1777:37" pos:end="1777:37"><expr pos:start="1777:37" pos:end="1777:37"><name pos:start="1777:37" pos:end="1777:37">s</name></expr></argument>, <argument pos:start="1777:40" pos:end="1777:44"><expr pos:start="1777:40" pos:end="1777:44"><name pos:start="1777:40" pos:end="1777:44">modrm</name></expr></argument>, <argument pos:start="1777:47" pos:end="1777:48"><expr pos:start="1777:47" pos:end="1777:48"><name pos:start="1777:47" pos:end="1777:48">ot</name></expr></argument>, <argument pos:start="1777:51" pos:end="1777:57"><expr pos:start="1777:51" pos:end="1777:57"><name pos:start="1777:51" pos:end="1777:57">OR_TMP0</name></expr></argument>, <argument pos:start="1777:60" pos:end="1777:60"><expr pos:start="1777:60" pos:end="1777:60"><literal type="number" pos:start="1777:60" pos:end="1777:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1779:17" pos:end="1781:70">/* Note that by zero-extending the mask operand, we

                   automatically handle zero-extending the result.  */</comment>

                <if_stmt pos:start="1783:17" pos:end="1791:17"><if pos:start="1783:17" pos:end="1787:17">if <condition pos:start="1783:20" pos:end="1783:32">(<expr pos:start="1783:21" pos:end="1783:31"><name pos:start="1783:21" pos:end="1783:22">ot</name> <operator pos:start="1783:24" pos:end="1783:25">==</operator> <name pos:start="1783:27" pos:end="1783:31">MO_64</name></expr>)</condition> <block pos:start="1783:34" pos:end="1787:17">{<block_content pos:start="1785:21" pos:end="1785:65">

                    <expr_stmt pos:start="1785:21" pos:end="1785:65"><expr pos:start="1785:21" pos:end="1785:64"><call pos:start="1785:21" pos:end="1785:64"><name pos:start="1785:21" pos:end="1785:34">tcg_gen_mov_tl</name><argument_list pos:start="1785:35" pos:end="1785:64">(<argument pos:start="1785:36" pos:end="1785:43"><expr pos:start="1785:36" pos:end="1785:43"><name pos:start="1785:36" pos:end="1785:43"><name pos:start="1785:36" pos:end="1785:40">cpu_T</name><index pos:start="1785:41" pos:end="1785:43">[<expr pos:start="1785:42" pos:end="1785:42"><literal type="number" pos:start="1785:42" pos:end="1785:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1785:46" pos:end="1785:63"><expr pos:start="1785:46" pos:end="1785:63"><name pos:start="1785:46" pos:end="1785:63"><name pos:start="1785:46" pos:end="1785:53">cpu_regs</name><index pos:start="1785:54" pos:end="1785:63">[<expr pos:start="1785:55" pos:end="1785:62"><name pos:start="1785:55" pos:end="1785:62"><name pos:start="1785:55" pos:end="1785:55">s</name><operator pos:start="1785:56" pos:end="1785:57">-&gt;</operator><name pos:start="1785:58" pos:end="1785:62">vex_v</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1787:19" pos:end="1791:17">else <block pos:start="1787:24" pos:end="1791:17">{<block_content pos:start="1789:21" pos:end="1789:68">

                    <expr_stmt pos:start="1789:21" pos:end="1789:68"><expr pos:start="1789:21" pos:end="1789:67"><call pos:start="1789:21" pos:end="1789:67"><name pos:start="1789:21" pos:end="1789:37">tcg_gen_ext32u_tl</name><argument_list pos:start="1789:38" pos:end="1789:67">(<argument pos:start="1789:39" pos:end="1789:46"><expr pos:start="1789:39" pos:end="1789:46"><name pos:start="1789:39" pos:end="1789:46"><name pos:start="1789:39" pos:end="1789:43">cpu_T</name><index pos:start="1789:44" pos:end="1789:46">[<expr pos:start="1789:45" pos:end="1789:45"><literal type="number" pos:start="1789:45" pos:end="1789:45">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1789:49" pos:end="1789:66"><expr pos:start="1789:49" pos:end="1789:66"><name pos:start="1789:49" pos:end="1789:66"><name pos:start="1789:49" pos:end="1789:56">cpu_regs</name><index pos:start="1789:57" pos:end="1789:66">[<expr pos:start="1789:58" pos:end="1789:65"><name pos:start="1789:58" pos:end="1789:65"><name pos:start="1789:58" pos:end="1789:58">s</name><operator pos:start="1789:59" pos:end="1789:60">-&gt;</operator><name pos:start="1789:61" pos:end="1789:65">vex_v</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1793:17" pos:end="1793:67"><expr pos:start="1793:17" pos:end="1793:66"><call pos:start="1793:17" pos:end="1793:66"><name pos:start="1793:17" pos:end="1793:31">gen_helper_pdep</name><argument_list pos:start="1793:32" pos:end="1793:66">(<argument pos:start="1793:33" pos:end="1793:45"><expr pos:start="1793:33" pos:end="1793:45"><name pos:start="1793:33" pos:end="1793:45"><name pos:start="1793:33" pos:end="1793:40">cpu_regs</name><index pos:start="1793:41" pos:end="1793:45">[<expr pos:start="1793:42" pos:end="1793:44"><name pos:start="1793:42" pos:end="1793:44">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1793:48" pos:end="1793:55"><expr pos:start="1793:48" pos:end="1793:55"><name pos:start="1793:48" pos:end="1793:55"><name pos:start="1793:48" pos:end="1793:52">cpu_T</name><index pos:start="1793:53" pos:end="1793:55">[<expr pos:start="1793:54" pos:end="1793:54"><literal type="number" pos:start="1793:54" pos:end="1793:54">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1793:58" pos:end="1793:65"><expr pos:start="1793:58" pos:end="1793:65"><name pos:start="1793:58" pos:end="1793:65"><name pos:start="1793:58" pos:end="1793:62">cpu_T</name><index pos:start="1793:63" pos:end="1793:65">[<expr pos:start="1793:64" pos:end="1793:64"><literal type="number" pos:start="1793:64" pos:end="1793:64">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1795:17" pos:end="1795:22">break;</break>



            <case pos:start="1799:13" pos:end="1799:23">case <expr pos:start="1799:18" pos:end="1799:22"><literal type="number" pos:start="1799:18" pos:end="1799:22">0x2f5</literal></expr>:</case> <comment type="block" pos:start="1799:25" pos:end="1799:45">/* pext Gy, By, Ey */</comment>

                <if_stmt pos:start="1801:17" pos:end="1809:17"><if pos:start="1801:17" pos:end="1809:17">if <condition pos:start="1801:20" pos:end="1805:37">(<expr pos:start="1801:21" pos:end="1805:36"><operator pos:start="1801:21" pos:end="1801:21">!</operator><operator pos:start="1801:22" pos:end="1801:22">(</operator><name pos:start="1801:23" pos:end="1801:47"><name pos:start="1801:23" pos:end="1801:23">s</name><operator pos:start="1801:24" pos:end="1801:25">-&gt;</operator><name pos:start="1801:26" pos:end="1801:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="1801:49" pos:end="1801:49">&amp;</operator> <name pos:start="1801:51" pos:end="1801:68">CPUID_7_0_EBX_BMI2</name><operator pos:start="1801:69" pos:end="1801:69">)</operator>

                    <operator pos:start="1803:21" pos:end="1803:22">||</operator> <operator pos:start="1803:24" pos:end="1803:24">!</operator><operator pos:start="1803:25" pos:end="1803:25">(</operator><name pos:start="1803:26" pos:end="1803:34"><name pos:start="1803:26" pos:end="1803:26">s</name><operator pos:start="1803:27" pos:end="1803:28">-&gt;</operator><name pos:start="1803:29" pos:end="1803:34">prefix</name></name> <operator pos:start="1803:36" pos:end="1803:36">&amp;</operator> <name pos:start="1803:38" pos:end="1803:47">PREFIX_VEX</name><operator pos:start="1803:48" pos:end="1803:48">)</operator>

                    <operator pos:start="1805:21" pos:end="1805:22">||</operator> <name pos:start="1805:24" pos:end="1805:31"><name pos:start="1805:24" pos:end="1805:24">s</name><operator pos:start="1805:25" pos:end="1805:26">-&gt;</operator><name pos:start="1805:27" pos:end="1805:31">vex_l</name></name> <operator pos:start="1805:33" pos:end="1805:34">!=</operator> <literal type="number" pos:start="1805:36" pos:end="1805:36">0</literal></expr>)</condition> <block pos:start="1805:39" pos:end="1809:17">{<block_content pos:start="1807:21" pos:end="1807:36">

                    <goto pos:start="1807:21" pos:end="1807:36">goto <name pos:start="1807:26" pos:end="1807:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1811:17" pos:end="1811:40"><expr pos:start="1811:17" pos:end="1811:39"><name pos:start="1811:17" pos:end="1811:18">ot</name> <operator pos:start="1811:20" pos:end="1811:20">=</operator> <call pos:start="1811:22" pos:end="1811:39"><name pos:start="1811:22" pos:end="1811:29">mo_64_32</name><argument_list pos:start="1811:30" pos:end="1811:39">(<argument pos:start="1811:31" pos:end="1811:38"><expr pos:start="1811:31" pos:end="1811:38"><name pos:start="1811:31" pos:end="1811:38"><name pos:start="1811:31" pos:end="1811:31">s</name><operator pos:start="1811:32" pos:end="1811:33">-&gt;</operator><name pos:start="1811:34" pos:end="1811:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1813:17" pos:end="1813:62"><expr pos:start="1813:17" pos:end="1813:61"><call pos:start="1813:17" pos:end="1813:61"><name pos:start="1813:17" pos:end="1813:30">gen_ldst_modrm</name><argument_list pos:start="1813:31" pos:end="1813:61">(<argument pos:start="1813:32" pos:end="1813:34"><expr pos:start="1813:32" pos:end="1813:34"><name pos:start="1813:32" pos:end="1813:34">env</name></expr></argument>, <argument pos:start="1813:37" pos:end="1813:37"><expr pos:start="1813:37" pos:end="1813:37"><name pos:start="1813:37" pos:end="1813:37">s</name></expr></argument>, <argument pos:start="1813:40" pos:end="1813:44"><expr pos:start="1813:40" pos:end="1813:44"><name pos:start="1813:40" pos:end="1813:44">modrm</name></expr></argument>, <argument pos:start="1813:47" pos:end="1813:48"><expr pos:start="1813:47" pos:end="1813:48"><name pos:start="1813:47" pos:end="1813:48">ot</name></expr></argument>, <argument pos:start="1813:51" pos:end="1813:57"><expr pos:start="1813:51" pos:end="1813:57"><name pos:start="1813:51" pos:end="1813:57">OR_TMP0</name></expr></argument>, <argument pos:start="1813:60" pos:end="1813:60"><expr pos:start="1813:60" pos:end="1813:60"><literal type="number" pos:start="1813:60" pos:end="1813:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1815:17" pos:end="1817:70">/* Note that by zero-extending the mask operand, we

                   automatically handle zero-extending the result.  */</comment>

                <if_stmt pos:start="1819:17" pos:end="1827:17"><if pos:start="1819:17" pos:end="1823:17">if <condition pos:start="1819:20" pos:end="1819:32">(<expr pos:start="1819:21" pos:end="1819:31"><name pos:start="1819:21" pos:end="1819:22">ot</name> <operator pos:start="1819:24" pos:end="1819:25">==</operator> <name pos:start="1819:27" pos:end="1819:31">MO_64</name></expr>)</condition> <block pos:start="1819:34" pos:end="1823:17">{<block_content pos:start="1821:21" pos:end="1821:65">

                    <expr_stmt pos:start="1821:21" pos:end="1821:65"><expr pos:start="1821:21" pos:end="1821:64"><call pos:start="1821:21" pos:end="1821:64"><name pos:start="1821:21" pos:end="1821:34">tcg_gen_mov_tl</name><argument_list pos:start="1821:35" pos:end="1821:64">(<argument pos:start="1821:36" pos:end="1821:43"><expr pos:start="1821:36" pos:end="1821:43"><name pos:start="1821:36" pos:end="1821:43"><name pos:start="1821:36" pos:end="1821:40">cpu_T</name><index pos:start="1821:41" pos:end="1821:43">[<expr pos:start="1821:42" pos:end="1821:42"><literal type="number" pos:start="1821:42" pos:end="1821:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1821:46" pos:end="1821:63"><expr pos:start="1821:46" pos:end="1821:63"><name pos:start="1821:46" pos:end="1821:63"><name pos:start="1821:46" pos:end="1821:53">cpu_regs</name><index pos:start="1821:54" pos:end="1821:63">[<expr pos:start="1821:55" pos:end="1821:62"><name pos:start="1821:55" pos:end="1821:62"><name pos:start="1821:55" pos:end="1821:55">s</name><operator pos:start="1821:56" pos:end="1821:57">-&gt;</operator><name pos:start="1821:58" pos:end="1821:62">vex_v</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1823:19" pos:end="1827:17">else <block pos:start="1823:24" pos:end="1827:17">{<block_content pos:start="1825:21" pos:end="1825:68">

                    <expr_stmt pos:start="1825:21" pos:end="1825:68"><expr pos:start="1825:21" pos:end="1825:67"><call pos:start="1825:21" pos:end="1825:67"><name pos:start="1825:21" pos:end="1825:37">tcg_gen_ext32u_tl</name><argument_list pos:start="1825:38" pos:end="1825:67">(<argument pos:start="1825:39" pos:end="1825:46"><expr pos:start="1825:39" pos:end="1825:46"><name pos:start="1825:39" pos:end="1825:46"><name pos:start="1825:39" pos:end="1825:43">cpu_T</name><index pos:start="1825:44" pos:end="1825:46">[<expr pos:start="1825:45" pos:end="1825:45"><literal type="number" pos:start="1825:45" pos:end="1825:45">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1825:49" pos:end="1825:66"><expr pos:start="1825:49" pos:end="1825:66"><name pos:start="1825:49" pos:end="1825:66"><name pos:start="1825:49" pos:end="1825:56">cpu_regs</name><index pos:start="1825:57" pos:end="1825:66">[<expr pos:start="1825:58" pos:end="1825:65"><name pos:start="1825:58" pos:end="1825:65"><name pos:start="1825:58" pos:end="1825:58">s</name><operator pos:start="1825:59" pos:end="1825:60">-&gt;</operator><name pos:start="1825:61" pos:end="1825:65">vex_v</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1829:17" pos:end="1829:67"><expr pos:start="1829:17" pos:end="1829:66"><call pos:start="1829:17" pos:end="1829:66"><name pos:start="1829:17" pos:end="1829:31">gen_helper_pext</name><argument_list pos:start="1829:32" pos:end="1829:66">(<argument pos:start="1829:33" pos:end="1829:45"><expr pos:start="1829:33" pos:end="1829:45"><name pos:start="1829:33" pos:end="1829:45"><name pos:start="1829:33" pos:end="1829:40">cpu_regs</name><index pos:start="1829:41" pos:end="1829:45">[<expr pos:start="1829:42" pos:end="1829:44"><name pos:start="1829:42" pos:end="1829:44">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1829:48" pos:end="1829:55"><expr pos:start="1829:48" pos:end="1829:55"><name pos:start="1829:48" pos:end="1829:55"><name pos:start="1829:48" pos:end="1829:52">cpu_T</name><index pos:start="1829:53" pos:end="1829:55">[<expr pos:start="1829:54" pos:end="1829:54"><literal type="number" pos:start="1829:54" pos:end="1829:54">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1829:58" pos:end="1829:65"><expr pos:start="1829:58" pos:end="1829:65"><name pos:start="1829:58" pos:end="1829:65"><name pos:start="1829:58" pos:end="1829:62">cpu_T</name><index pos:start="1829:63" pos:end="1829:65">[<expr pos:start="1829:64" pos:end="1829:64"><literal type="number" pos:start="1829:64" pos:end="1829:64">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1831:17" pos:end="1831:22">break;</break>



            <case pos:start="1835:13" pos:end="1835:23">case <expr pos:start="1835:18" pos:end="1835:22"><literal type="number" pos:start="1835:18" pos:end="1835:22">0x1f6</literal></expr>:</case> <comment type="block" pos:start="1835:25" pos:end="1835:41">/* adcx Gy, Ey */</comment>

            <case pos:start="1837:13" pos:end="1837:23">case <expr pos:start="1837:18" pos:end="1837:22"><literal type="number" pos:start="1837:18" pos:end="1837:22">0x2f6</literal></expr>:</case> <comment type="block" pos:start="1837:25" pos:end="1837:41">/* adox Gy, Ey */</comment>

                <if_stmt pos:start="1839:17" pos:end="1987:17"><if pos:start="1839:17" pos:end="1843:17">if <condition pos:start="1839:20" pos:end="1839:69">(<expr pos:start="1839:21" pos:end="1839:68"><operator pos:start="1839:21" pos:end="1839:21">!</operator><operator pos:start="1839:22" pos:end="1839:22">(</operator><name pos:start="1839:23" pos:end="1839:47"><name pos:start="1839:23" pos:end="1839:23">s</name><operator pos:start="1839:24" pos:end="1839:25">-&gt;</operator><name pos:start="1839:26" pos:end="1839:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="1839:49" pos:end="1839:49">&amp;</operator> <name pos:start="1839:51" pos:end="1839:67">CPUID_7_0_EBX_ADX</name><operator pos:start="1839:68" pos:end="1839:68">)</operator></expr>)</condition> <block pos:start="1839:71" pos:end="1843:17">{<block_content pos:start="1841:21" pos:end="1841:36">

                    <goto pos:start="1841:21" pos:end="1841:36">goto <name pos:start="1841:26" pos:end="1841:35">illegal_op</name>;</goto>

                </block_content>}</block></if> <else pos:start="1843:19" pos:end="1987:17">else <block pos:start="1843:24" pos:end="1987:17">{<block_content pos:start="1845:21" pos:end="1985:41">

                    <decl_stmt pos:start="1845:21" pos:end="1845:51"><decl pos:start="1845:21" pos:end="1845:33"><type pos:start="1845:21" pos:end="1845:24"><name pos:start="1845:21" pos:end="1845:24">TCGv</name></type> <name pos:start="1845:26" pos:end="1845:33">carry_in</name></decl>, <decl pos:start="1845:36" pos:end="1845:44"><type ref="prev" pos:start="1845:21" pos:end="1845:24"/><name pos:start="1845:36" pos:end="1845:44">carry_out</name></decl>, <decl pos:start="1845:47" pos:end="1845:50"><type ref="prev" pos:start="1845:21" pos:end="1845:24"/><name pos:start="1845:47" pos:end="1845:50">zero</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="1847:21" pos:end="1847:31"><decl pos:start="1847:21" pos:end="1847:30"><type pos:start="1847:21" pos:end="1847:23"><name pos:start="1847:21" pos:end="1847:23">int</name></type> <name pos:start="1847:25" pos:end="1847:30">end_op</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="1851:21" pos:end="1851:44"><expr pos:start="1851:21" pos:end="1851:43"><name pos:start="1851:21" pos:end="1851:22">ot</name> <operator pos:start="1851:24" pos:end="1851:24">=</operator> <call pos:start="1851:26" pos:end="1851:43"><name pos:start="1851:26" pos:end="1851:33">mo_64_32</name><argument_list pos:start="1851:34" pos:end="1851:43">(<argument pos:start="1851:35" pos:end="1851:42"><expr pos:start="1851:35" pos:end="1851:42"><name pos:start="1851:35" pos:end="1851:42"><name pos:start="1851:35" pos:end="1851:35">s</name><operator pos:start="1851:36" pos:end="1851:37">-&gt;</operator><name pos:start="1851:38" pos:end="1851:42">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1853:21" pos:end="1853:66"><expr pos:start="1853:21" pos:end="1853:65"><call pos:start="1853:21" pos:end="1853:65"><name pos:start="1853:21" pos:end="1853:34">gen_ldst_modrm</name><argument_list pos:start="1853:35" pos:end="1853:65">(<argument pos:start="1853:36" pos:end="1853:38"><expr pos:start="1853:36" pos:end="1853:38"><name pos:start="1853:36" pos:end="1853:38">env</name></expr></argument>, <argument pos:start="1853:41" pos:end="1853:41"><expr pos:start="1853:41" pos:end="1853:41"><name pos:start="1853:41" pos:end="1853:41">s</name></expr></argument>, <argument pos:start="1853:44" pos:end="1853:48"><expr pos:start="1853:44" pos:end="1853:48"><name pos:start="1853:44" pos:end="1853:48">modrm</name></expr></argument>, <argument pos:start="1853:51" pos:end="1853:52"><expr pos:start="1853:51" pos:end="1853:52"><name pos:start="1853:51" pos:end="1853:52">ot</name></expr></argument>, <argument pos:start="1853:55" pos:end="1853:61"><expr pos:start="1853:55" pos:end="1853:61"><name pos:start="1853:55" pos:end="1853:61">OR_TMP0</name></expr></argument>, <argument pos:start="1853:64" pos:end="1853:64"><expr pos:start="1853:64" pos:end="1853:64"><literal type="number" pos:start="1853:64" pos:end="1853:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <comment type="block" pos:start="1857:21" pos:end="1857:70">/* Re-use the carry-out from a previous round.  */</comment>

                    <expr_stmt pos:start="1859:21" pos:end="1859:42"><expr pos:start="1859:21" pos:end="1859:41"><call pos:start="1859:21" pos:end="1859:41"><name pos:start="1859:21" pos:end="1859:31">TCGV_UNUSED</name><argument_list pos:start="1859:32" pos:end="1859:41">(<argument pos:start="1859:33" pos:end="1859:40"><expr pos:start="1859:33" pos:end="1859:40"><name pos:start="1859:33" pos:end="1859:40">carry_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1861:21" pos:end="1861:72"><expr pos:start="1861:21" pos:end="1861:71"><name pos:start="1861:21" pos:end="1861:29">carry_out</name> <operator pos:start="1861:31" pos:end="1861:31">=</operator> <operator pos:start="1861:33" pos:end="1861:33">(</operator><ternary pos:start="1861:34" pos:end="1861:70"><condition pos:start="1861:34" pos:end="1861:45"><expr pos:start="1861:34" pos:end="1861:43"><name pos:start="1861:34" pos:end="1861:34">b</name> <operator pos:start="1861:36" pos:end="1861:37">==</operator> <literal type="number" pos:start="1861:39" pos:end="1861:43">0x1f6</literal></expr> ?</condition><then pos:start="1861:47" pos:end="1861:56"> <expr pos:start="1861:47" pos:end="1861:56"><name pos:start="1861:47" pos:end="1861:56">cpu_cc_dst</name></expr> </then><else pos:start="1861:58" pos:end="1861:70">: <expr pos:start="1861:60" pos:end="1861:70"><name pos:start="1861:60" pos:end="1861:70">cpu_cc_src2</name></expr></else></ternary><operator pos:start="1861:71" pos:end="1861:71">)</operator></expr>;</expr_stmt>

                    <switch pos:start="1863:21" pos:end="1911:21">switch <condition pos:start="1863:28" pos:end="1863:37">(<expr pos:start="1863:29" pos:end="1863:36"><name pos:start="1863:29" pos:end="1863:36"><name pos:start="1863:29" pos:end="1863:29">s</name><operator pos:start="1863:30" pos:end="1863:31">-&gt;</operator><name pos:start="1863:32" pos:end="1863:36">cc_op</name></name></expr>)</condition> <block pos:start="1863:39" pos:end="1911:21">{<block_content pos:start="1865:21" pos:end="1909:30">

                    <case pos:start="1865:21" pos:end="1865:36">case <expr pos:start="1865:26" pos:end="1865:35"><name pos:start="1865:26" pos:end="1865:35">CC_OP_ADCX</name></expr>:</case>

                        <if_stmt pos:start="1867:25" pos:end="1877:25"><if pos:start="1867:25" pos:end="1873:25">if <condition pos:start="1867:28" pos:end="1867:39">(<expr pos:start="1867:29" pos:end="1867:38"><name pos:start="1867:29" pos:end="1867:29">b</name> <operator pos:start="1867:31" pos:end="1867:32">==</operator> <literal type="number" pos:start="1867:34" pos:end="1867:38">0x1f6</literal></expr>)</condition> <block pos:start="1867:41" pos:end="1873:25">{<block_content pos:start="1869:29" pos:end="1871:48">

                            <expr_stmt pos:start="1869:29" pos:end="1869:50"><expr pos:start="1869:29" pos:end="1869:49"><name pos:start="1869:29" pos:end="1869:36">carry_in</name> <operator pos:start="1869:38" pos:end="1869:38">=</operator> <name pos:start="1869:40" pos:end="1869:49">cpu_cc_dst</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="1871:29" pos:end="1871:48"><expr pos:start="1871:29" pos:end="1871:47"><name pos:start="1871:29" pos:end="1871:34">end_op</name> <operator pos:start="1871:36" pos:end="1871:36">=</operator> <name pos:start="1871:38" pos:end="1871:47">CC_OP_ADCX</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1873:27" pos:end="1877:25">else <block pos:start="1873:32" pos:end="1877:25">{<block_content pos:start="1875:29" pos:end="1875:49">

                            <expr_stmt pos:start="1875:29" pos:end="1875:49"><expr pos:start="1875:29" pos:end="1875:48"><name pos:start="1875:29" pos:end="1875:34">end_op</name> <operator pos:start="1875:36" pos:end="1875:36">=</operator> <name pos:start="1875:38" pos:end="1875:48">CC_OP_ADCOX</name></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <break pos:start="1879:25" pos:end="1879:30">break;</break>

                    <case pos:start="1881:21" pos:end="1881:36">case <expr pos:start="1881:26" pos:end="1881:35"><name pos:start="1881:26" pos:end="1881:35">CC_OP_ADOX</name></expr>:</case>

                        <if_stmt pos:start="1883:25" pos:end="1893:25"><if pos:start="1883:25" pos:end="1887:25">if <condition pos:start="1883:28" pos:end="1883:39">(<expr pos:start="1883:29" pos:end="1883:38"><name pos:start="1883:29" pos:end="1883:29">b</name> <operator pos:start="1883:31" pos:end="1883:32">==</operator> <literal type="number" pos:start="1883:34" pos:end="1883:38">0x1f6</literal></expr>)</condition> <block pos:start="1883:41" pos:end="1887:25">{<block_content pos:start="1885:29" pos:end="1885:49">

                            <expr_stmt pos:start="1885:29" pos:end="1885:49"><expr pos:start="1885:29" pos:end="1885:48"><name pos:start="1885:29" pos:end="1885:34">end_op</name> <operator pos:start="1885:36" pos:end="1885:36">=</operator> <name pos:start="1885:38" pos:end="1885:48">CC_OP_ADCOX</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1887:27" pos:end="1893:25">else <block pos:start="1887:32" pos:end="1893:25">{<block_content pos:start="1889:29" pos:end="1891:48">

                            <expr_stmt pos:start="1889:29" pos:end="1889:51"><expr pos:start="1889:29" pos:end="1889:50"><name pos:start="1889:29" pos:end="1889:36">carry_in</name> <operator pos:start="1889:38" pos:end="1889:38">=</operator> <name pos:start="1889:40" pos:end="1889:50">cpu_cc_src2</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="1891:29" pos:end="1891:48"><expr pos:start="1891:29" pos:end="1891:47"><name pos:start="1891:29" pos:end="1891:34">end_op</name> <operator pos:start="1891:36" pos:end="1891:36">=</operator> <name pos:start="1891:38" pos:end="1891:47">CC_OP_ADOX</name></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <break pos:start="1895:25" pos:end="1895:30">break;</break>

                    <case pos:start="1897:21" pos:end="1897:37">case <expr pos:start="1897:26" pos:end="1897:36"><name pos:start="1897:26" pos:end="1897:36">CC_OP_ADCOX</name></expr>:</case>

                        <expr_stmt pos:start="1899:25" pos:end="1899:45"><expr pos:start="1899:25" pos:end="1899:44"><name pos:start="1899:25" pos:end="1899:30">end_op</name> <operator pos:start="1899:32" pos:end="1899:32">=</operator> <name pos:start="1899:34" pos:end="1899:44">CC_OP_ADCOX</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="1901:25" pos:end="1901:45"><expr pos:start="1901:25" pos:end="1901:44"><name pos:start="1901:25" pos:end="1901:32">carry_in</name> <operator pos:start="1901:34" pos:end="1901:34">=</operator> <name pos:start="1901:36" pos:end="1901:44">carry_out</name></expr>;</expr_stmt>

                        <break pos:start="1903:25" pos:end="1903:30">break;</break>

                    <default pos:start="1905:21" pos:end="1905:28">default:</default>

                        <expr_stmt pos:start="1907:25" pos:end="1907:72"><expr pos:start="1907:25" pos:end="1907:71"><name pos:start="1907:25" pos:end="1907:30">end_op</name> <operator pos:start="1907:32" pos:end="1907:32">=</operator> <operator pos:start="1907:34" pos:end="1907:34">(</operator><ternary pos:start="1907:35" pos:end="1907:70"><condition pos:start="1907:35" pos:end="1907:46"><expr pos:start="1907:35" pos:end="1907:44"><name pos:start="1907:35" pos:end="1907:35">b</name> <operator pos:start="1907:37" pos:end="1907:38">==</operator> <literal type="number" pos:start="1907:40" pos:end="1907:44">0x1f6</literal></expr> ?</condition><then pos:start="1907:48" pos:end="1907:57"> <expr pos:start="1907:48" pos:end="1907:57"><name pos:start="1907:48" pos:end="1907:57">CC_OP_ADCX</name></expr> </then><else pos:start="1907:59" pos:end="1907:70">: <expr pos:start="1907:61" pos:end="1907:70"><name pos:start="1907:61" pos:end="1907:70">CC_OP_ADOX</name></expr></else></ternary><operator pos:start="1907:71" pos:end="1907:71">)</operator></expr>;</expr_stmt>

                        <break pos:start="1909:25" pos:end="1909:30">break;</break>

                    </block_content>}</block></switch>

                    <comment type="block" pos:start="1913:21" pos:end="1913:77">/* If we can't reuse carry-out, get it out of EFLAGS.  */</comment>

                    <if_stmt pos:start="1915:21" pos:end="1931:21"><if pos:start="1915:21" pos:end="1931:21">if <condition pos:start="1915:24" pos:end="1915:49">(<expr pos:start="1915:25" pos:end="1915:48"><call pos:start="1915:25" pos:end="1915:48"><name pos:start="1915:25" pos:end="1915:38">TCGV_IS_UNUSED</name><argument_list pos:start="1915:39" pos:end="1915:48">(<argument pos:start="1915:40" pos:end="1915:47"><expr pos:start="1915:40" pos:end="1915:47"><name pos:start="1915:40" pos:end="1915:47">carry_in</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1915:51" pos:end="1931:21">{<block_content pos:start="1917:25" pos:end="1929:63">

                        <if_stmt pos:start="1917:25" pos:end="1921:25"><if pos:start="1917:25" pos:end="1921:25">if <condition pos:start="1917:28" pos:end="1917:77">(<expr pos:start="1917:29" pos:end="1917:76"><name pos:start="1917:29" pos:end="1917:36"><name pos:start="1917:29" pos:end="1917:29">s</name><operator pos:start="1917:30" pos:end="1917:31">-&gt;</operator><name pos:start="1917:32" pos:end="1917:36">cc_op</name></name> <operator pos:start="1917:38" pos:end="1917:39">!=</operator> <name pos:start="1917:41" pos:end="1917:50">CC_OP_ADCX</name> <operator pos:start="1917:52" pos:end="1917:53">&amp;&amp;</operator> <name pos:start="1917:55" pos:end="1917:62"><name pos:start="1917:55" pos:end="1917:55">s</name><operator pos:start="1917:56" pos:end="1917:57">-&gt;</operator><name pos:start="1917:58" pos:end="1917:62">cc_op</name></name> <operator pos:start="1917:64" pos:end="1917:65">!=</operator> <name pos:start="1917:67" pos:end="1917:76">CC_OP_ADOX</name></expr>)</condition> <block pos:start="1917:79" pos:end="1921:25">{<block_content pos:start="1919:29" pos:end="1919:50">

                            <expr_stmt pos:start="1919:29" pos:end="1919:50"><expr pos:start="1919:29" pos:end="1919:49"><call pos:start="1919:29" pos:end="1919:49"><name pos:start="1919:29" pos:end="1919:46">gen_compute_eflags</name><argument_list pos:start="1919:47" pos:end="1919:49">(<argument pos:start="1919:48" pos:end="1919:48"><expr pos:start="1919:48" pos:end="1919:48"><name pos:start="1919:48" pos:end="1919:48">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1923:25" pos:end="1923:44"><expr pos:start="1923:25" pos:end="1923:43"><name pos:start="1923:25" pos:end="1923:32">carry_in</name> <operator pos:start="1923:34" pos:end="1923:34">=</operator> <name pos:start="1923:36" pos:end="1923:43">cpu_tmp0</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="1925:25" pos:end="1927:73"><expr pos:start="1925:25" pos:end="1927:72"><call pos:start="1925:25" pos:end="1927:72"><name pos:start="1925:25" pos:end="1925:39">tcg_gen_shri_tl</name><argument_list pos:start="1925:40" pos:end="1927:72">(<argument pos:start="1925:41" pos:end="1925:48"><expr pos:start="1925:41" pos:end="1925:48"><name pos:start="1925:41" pos:end="1925:48">carry_in</name></expr></argument>, <argument pos:start="1925:51" pos:end="1925:60"><expr pos:start="1925:51" pos:end="1925:60"><name pos:start="1925:51" pos:end="1925:60">cpu_cc_src</name></expr></argument>,

                                        <argument pos:start="1927:41" pos:end="1927:71"><expr pos:start="1927:41" pos:end="1927:71"><call pos:start="1927:41" pos:end="1927:71"><name pos:start="1927:41" pos:end="1927:45">ctz32</name><argument_list pos:start="1927:46" pos:end="1927:71">(<argument pos:start="1927:47" pos:end="1927:70"><expr pos:start="1927:47" pos:end="1927:70"><ternary pos:start="1927:47" pos:end="1927:70"><condition pos:start="1927:47" pos:end="1927:58"><expr pos:start="1927:47" pos:end="1927:56"><name pos:start="1927:47" pos:end="1927:47">b</name> <operator pos:start="1927:49" pos:end="1927:50">==</operator> <literal type="number" pos:start="1927:52" pos:end="1927:56">0x1f6</literal></expr> ?</condition><then pos:start="1927:60" pos:end="1927:63"> <expr pos:start="1927:60" pos:end="1927:63"><name pos:start="1927:60" pos:end="1927:63">CC_C</name></expr> </then><else pos:start="1927:65" pos:end="1927:70">: <expr pos:start="1927:67" pos:end="1927:70"><name pos:start="1927:67" pos:end="1927:70">CC_O</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1929:25" pos:end="1929:63"><expr pos:start="1929:25" pos:end="1929:62"><call pos:start="1929:25" pos:end="1929:62"><name pos:start="1929:25" pos:end="1929:39">tcg_gen_andi_tl</name><argument_list pos:start="1929:40" pos:end="1929:62">(<argument pos:start="1929:41" pos:end="1929:48"><expr pos:start="1929:41" pos:end="1929:48"><name pos:start="1929:41" pos:end="1929:48">carry_in</name></expr></argument>, <argument pos:start="1929:51" pos:end="1929:58"><expr pos:start="1929:51" pos:end="1929:58"><name pos:start="1929:51" pos:end="1929:58">carry_in</name></expr></argument>, <argument pos:start="1929:61" pos:end="1929:61"><expr pos:start="1929:61" pos:end="1929:61"><literal type="number" pos:start="1929:61" pos:end="1929:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>



                    <switch pos:start="1935:21" pos:end="1983:21">switch <condition pos:start="1935:28" pos:end="1935:31">(<expr pos:start="1935:29" pos:end="1935:30"><name pos:start="1935:29" pos:end="1935:30">ot</name></expr>)</condition> <block pos:start="1935:33" pos:end="1983:21">{<block_content pos:start="1939:21" pos:end="1981:30">

<cpp:ifdef pos:start="1937:1" pos:end="1937:20">#<cpp:directive pos:start="1937:2" pos:end="1937:6">ifdef</cpp:directive> <name pos:start="1937:8" pos:end="1937:20">TARGET_X86_64</name></cpp:ifdef>

                    <case pos:start="1939:21" pos:end="1939:31">case <expr pos:start="1939:26" pos:end="1939:30"><name pos:start="1939:26" pos:end="1939:30">MO_32</name></expr>:</case>

                        <comment type="block" pos:start="1941:25" pos:end="1943:79">/* If we know TL is 64-bit, and we want a 32-bit

                           result, just do everything in 64-bit arithmetic.  */</comment>

                        <expr_stmt pos:start="1945:25" pos:end="1945:73"><expr pos:start="1945:25" pos:end="1945:72"><call pos:start="1945:25" pos:end="1945:72"><name pos:start="1945:25" pos:end="1945:42">tcg_gen_ext32u_i64</name><argument_list pos:start="1945:43" pos:end="1945:72">(<argument pos:start="1945:44" pos:end="1945:56"><expr pos:start="1945:44" pos:end="1945:56"><name pos:start="1945:44" pos:end="1945:56"><name pos:start="1945:44" pos:end="1945:51">cpu_regs</name><index pos:start="1945:52" pos:end="1945:56">[<expr pos:start="1945:53" pos:end="1945:55"><name pos:start="1945:53" pos:end="1945:55">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1945:59" pos:end="1945:71"><expr pos:start="1945:59" pos:end="1945:71"><name pos:start="1945:59" pos:end="1945:71"><name pos:start="1945:59" pos:end="1945:66">cpu_regs</name><index pos:start="1945:67" pos:end="1945:71">[<expr pos:start="1945:68" pos:end="1945:70"><name pos:start="1945:68" pos:end="1945:70">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1947:25" pos:end="1947:63"><expr pos:start="1947:25" pos:end="1947:62"><call pos:start="1947:25" pos:end="1947:62"><name pos:start="1947:25" pos:end="1947:42">tcg_gen_ext32u_i64</name><argument_list pos:start="1947:43" pos:end="1947:62">(<argument pos:start="1947:44" pos:end="1947:51"><expr pos:start="1947:44" pos:end="1947:51"><name pos:start="1947:44" pos:end="1947:51"><name pos:start="1947:44" pos:end="1947:48">cpu_T</name><index pos:start="1947:49" pos:end="1947:51">[<expr pos:start="1947:50" pos:end="1947:50"><literal type="number" pos:start="1947:50" pos:end="1947:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1947:54" pos:end="1947:61"><expr pos:start="1947:54" pos:end="1947:61"><name pos:start="1947:54" pos:end="1947:61"><name pos:start="1947:54" pos:end="1947:58">cpu_T</name><index pos:start="1947:59" pos:end="1947:61">[<expr pos:start="1947:60" pos:end="1947:60"><literal type="number" pos:start="1947:60" pos:end="1947:60">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1949:25" pos:end="1949:75"><expr pos:start="1949:25" pos:end="1949:74"><call pos:start="1949:25" pos:end="1949:74"><name pos:start="1949:25" pos:end="1949:39">tcg_gen_add_i64</name><argument_list pos:start="1949:40" pos:end="1949:74">(<argument pos:start="1949:41" pos:end="1949:48"><expr pos:start="1949:41" pos:end="1949:48"><name pos:start="1949:41" pos:end="1949:48"><name pos:start="1949:41" pos:end="1949:45">cpu_T</name><index pos:start="1949:46" pos:end="1949:48">[<expr pos:start="1949:47" pos:end="1949:47"><literal type="number" pos:start="1949:47" pos:end="1949:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1949:51" pos:end="1949:58"><expr pos:start="1949:51" pos:end="1949:58"><name pos:start="1949:51" pos:end="1949:58"><name pos:start="1949:51" pos:end="1949:55">cpu_T</name><index pos:start="1949:56" pos:end="1949:58">[<expr pos:start="1949:57" pos:end="1949:57"><literal type="number" pos:start="1949:57" pos:end="1949:57">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1949:61" pos:end="1949:73"><expr pos:start="1949:61" pos:end="1949:73"><name pos:start="1949:61" pos:end="1949:73"><name pos:start="1949:61" pos:end="1949:68">cpu_regs</name><index pos:start="1949:69" pos:end="1949:73">[<expr pos:start="1949:70" pos:end="1949:72"><name pos:start="1949:70" pos:end="1949:72">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1951:25" pos:end="1951:70"><expr pos:start="1951:25" pos:end="1951:69"><call pos:start="1951:25" pos:end="1951:69"><name pos:start="1951:25" pos:end="1951:39">tcg_gen_add_i64</name><argument_list pos:start="1951:40" pos:end="1951:69">(<argument pos:start="1951:41" pos:end="1951:48"><expr pos:start="1951:41" pos:end="1951:48"><name pos:start="1951:41" pos:end="1951:48"><name pos:start="1951:41" pos:end="1951:45">cpu_T</name><index pos:start="1951:46" pos:end="1951:48">[<expr pos:start="1951:47" pos:end="1951:47"><literal type="number" pos:start="1951:47" pos:end="1951:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1951:51" pos:end="1951:58"><expr pos:start="1951:51" pos:end="1951:58"><name pos:start="1951:51" pos:end="1951:58"><name pos:start="1951:51" pos:end="1951:55">cpu_T</name><index pos:start="1951:56" pos:end="1951:58">[<expr pos:start="1951:57" pos:end="1951:57"><literal type="number" pos:start="1951:57" pos:end="1951:57">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1951:61" pos:end="1951:68"><expr pos:start="1951:61" pos:end="1951:68"><name pos:start="1951:61" pos:end="1951:68">carry_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1953:25" pos:end="1953:68"><expr pos:start="1953:25" pos:end="1953:67"><call pos:start="1953:25" pos:end="1953:67"><name pos:start="1953:25" pos:end="1953:42">tcg_gen_ext32u_i64</name><argument_list pos:start="1953:43" pos:end="1953:67">(<argument pos:start="1953:44" pos:end="1953:56"><expr pos:start="1953:44" pos:end="1953:56"><name pos:start="1953:44" pos:end="1953:56"><name pos:start="1953:44" pos:end="1953:51">cpu_regs</name><index pos:start="1953:52" pos:end="1953:56">[<expr pos:start="1953:53" pos:end="1953:55"><name pos:start="1953:53" pos:end="1953:55">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1953:59" pos:end="1953:66"><expr pos:start="1953:59" pos:end="1953:66"><name pos:start="1953:59" pos:end="1953:66"><name pos:start="1953:59" pos:end="1953:63">cpu_T</name><index pos:start="1953:64" pos:end="1953:66">[<expr pos:start="1953:65" pos:end="1953:65"><literal type="number" pos:start="1953:65" pos:end="1953:65">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1955:25" pos:end="1955:66"><expr pos:start="1955:25" pos:end="1955:65"><call pos:start="1955:25" pos:end="1955:65"><name pos:start="1955:25" pos:end="1955:40">tcg_gen_shri_i64</name><argument_list pos:start="1955:41" pos:end="1955:65">(<argument pos:start="1955:42" pos:end="1955:50"><expr pos:start="1955:42" pos:end="1955:50"><name pos:start="1955:42" pos:end="1955:50">carry_out</name></expr></argument>, <argument pos:start="1955:53" pos:end="1955:60"><expr pos:start="1955:53" pos:end="1955:60"><name pos:start="1955:53" pos:end="1955:60"><name pos:start="1955:53" pos:end="1955:57">cpu_T</name><index pos:start="1955:58" pos:end="1955:60">[<expr pos:start="1955:59" pos:end="1955:59"><literal type="number" pos:start="1955:59" pos:end="1955:59">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1955:63" pos:end="1955:64"><expr pos:start="1955:63" pos:end="1955:64"><literal type="number" pos:start="1955:63" pos:end="1955:64">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1957:25" pos:end="1960:0">break;</break>

<cpp:endif pos:start="1959:1" pos:end="1959:6">#<cpp:directive pos:start="1959:2" pos:end="1959:6">endif</cpp:directive></cpp:endif>

                    <default pos:start="1961:21" pos:end="1961:28">default:</default>

                        <comment type="block" pos:start="1963:25" pos:end="1963:76">/* Otherwise compute the carry-out in two steps.  */</comment>

                        <expr_stmt pos:start="1965:25" pos:end="1965:47"><expr pos:start="1965:25" pos:end="1965:46"><name pos:start="1965:25" pos:end="1965:28">zero</name> <operator pos:start="1965:30" pos:end="1965:30">=</operator> <call pos:start="1965:32" pos:end="1965:46"><name pos:start="1965:32" pos:end="1965:43">tcg_const_tl</name><argument_list pos:start="1965:44" pos:end="1965:46">(<argument pos:start="1965:45" pos:end="1965:45"><expr pos:start="1965:45" pos:end="1965:45"><literal type="number" pos:start="1965:45" pos:end="1965:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1967:25" pos:end="1971:56"><expr pos:start="1967:25" pos:end="1971:55"><call pos:start="1967:25" pos:end="1971:55"><name pos:start="1967:25" pos:end="1967:39">tcg_gen_add2_tl</name><argument_list pos:start="1967:40" pos:end="1971:55">(<argument pos:start="1967:41" pos:end="1967:48"><expr pos:start="1967:41" pos:end="1967:48"><name pos:start="1967:41" pos:end="1967:48"><name pos:start="1967:41" pos:end="1967:45">cpu_T</name><index pos:start="1967:46" pos:end="1967:48">[<expr pos:start="1967:47" pos:end="1967:47"><literal type="number" pos:start="1967:47" pos:end="1967:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1967:51" pos:end="1967:59"><expr pos:start="1967:51" pos:end="1967:59"><name pos:start="1967:51" pos:end="1967:59">carry_out</name></expr></argument>,

                                        <argument pos:start="1969:41" pos:end="1969:48"><expr pos:start="1969:41" pos:end="1969:48"><name pos:start="1969:41" pos:end="1969:48"><name pos:start="1969:41" pos:end="1969:45">cpu_T</name><index pos:start="1969:46" pos:end="1969:48">[<expr pos:start="1969:47" pos:end="1969:47"><literal type="number" pos:start="1969:47" pos:end="1969:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1969:51" pos:end="1969:54"><expr pos:start="1969:51" pos:end="1969:54"><name pos:start="1969:51" pos:end="1969:54">zero</name></expr></argument>,

                                        <argument pos:start="1971:41" pos:end="1971:48"><expr pos:start="1971:41" pos:end="1971:48"><name pos:start="1971:41" pos:end="1971:48">carry_in</name></expr></argument>, <argument pos:start="1971:51" pos:end="1971:54"><expr pos:start="1971:51" pos:end="1971:54"><name pos:start="1971:51" pos:end="1971:54">zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1973:25" pos:end="1977:56"><expr pos:start="1973:25" pos:end="1977:55"><call pos:start="1973:25" pos:end="1977:55"><name pos:start="1973:25" pos:end="1973:39">tcg_gen_add2_tl</name><argument_list pos:start="1973:40" pos:end="1977:55">(<argument pos:start="1973:41" pos:end="1973:53"><expr pos:start="1973:41" pos:end="1973:53"><name pos:start="1973:41" pos:end="1973:53"><name pos:start="1973:41" pos:end="1973:48">cpu_regs</name><index pos:start="1973:49" pos:end="1973:53">[<expr pos:start="1973:50" pos:end="1973:52"><name pos:start="1973:50" pos:end="1973:52">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1973:56" pos:end="1973:64"><expr pos:start="1973:56" pos:end="1973:64"><name pos:start="1973:56" pos:end="1973:64">carry_out</name></expr></argument>,

                                        <argument pos:start="1975:41" pos:end="1975:53"><expr pos:start="1975:41" pos:end="1975:53"><name pos:start="1975:41" pos:end="1975:53"><name pos:start="1975:41" pos:end="1975:48">cpu_regs</name><index pos:start="1975:49" pos:end="1975:53">[<expr pos:start="1975:50" pos:end="1975:52"><name pos:start="1975:50" pos:end="1975:52">reg</name></expr>]</index></name></expr></argument>, <argument pos:start="1975:56" pos:end="1975:64"><expr pos:start="1975:56" pos:end="1975:64"><name pos:start="1975:56" pos:end="1975:64">carry_out</name></expr></argument>,

                                        <argument pos:start="1977:41" pos:end="1977:48"><expr pos:start="1977:41" pos:end="1977:48"><name pos:start="1977:41" pos:end="1977:48"><name pos:start="1977:41" pos:end="1977:45">cpu_T</name><index pos:start="1977:46" pos:end="1977:48">[<expr pos:start="1977:47" pos:end="1977:47"><literal type="number" pos:start="1977:47" pos:end="1977:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1977:51" pos:end="1977:54"><expr pos:start="1977:51" pos:end="1977:54"><name pos:start="1977:51" pos:end="1977:54">zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1979:25" pos:end="1979:44"><expr pos:start="1979:25" pos:end="1979:43"><call pos:start="1979:25" pos:end="1979:43"><name pos:start="1979:25" pos:end="1979:37">tcg_temp_free</name><argument_list pos:start="1979:38" pos:end="1979:43">(<argument pos:start="1979:39" pos:end="1979:42"><expr pos:start="1979:39" pos:end="1979:42"><name pos:start="1979:39" pos:end="1979:42">zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1981:25" pos:end="1981:30">break;</break>

                    </block_content>}</block></switch>

                    <expr_stmt pos:start="1985:21" pos:end="1985:41"><expr pos:start="1985:21" pos:end="1985:40"><call pos:start="1985:21" pos:end="1985:40"><name pos:start="1985:21" pos:end="1985:29">set_cc_op</name><argument_list pos:start="1985:30" pos:end="1985:40">(<argument pos:start="1985:31" pos:end="1985:31"><expr pos:start="1985:31" pos:end="1985:31"><name pos:start="1985:31" pos:end="1985:31">s</name></expr></argument>, <argument pos:start="1985:34" pos:end="1985:39"><expr pos:start="1985:34" pos:end="1985:39"><name pos:start="1985:34" pos:end="1985:39">end_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="1989:17" pos:end="1989:22">break;</break>



            <case pos:start="1993:13" pos:end="1993:23">case <expr pos:start="1993:18" pos:end="1993:22"><literal type="number" pos:start="1993:18" pos:end="1993:22">0x1f7</literal></expr>:</case> <comment type="block" pos:start="1993:25" pos:end="1993:45">/* shlx Gy, Ey, By */</comment>

            <case pos:start="1995:13" pos:end="1995:23">case <expr pos:start="1995:18" pos:end="1995:22"><literal type="number" pos:start="1995:18" pos:end="1995:22">0x2f7</literal></expr>:</case> <comment type="block" pos:start="1995:25" pos:end="1995:45">/* sarx Gy, Ey, By */</comment>

            <case pos:start="1997:13" pos:end="1997:23">case <expr pos:start="1997:18" pos:end="1997:22"><literal type="number" pos:start="1997:18" pos:end="1997:22">0x3f7</literal></expr>:</case> <comment type="block" pos:start="1997:25" pos:end="1997:45">/* shrx Gy, Ey, By */</comment>

                <if_stmt pos:start="1999:17" pos:end="2007:17"><if pos:start="1999:17" pos:end="2007:17">if <condition pos:start="1999:20" pos:end="2003:37">(<expr pos:start="1999:21" pos:end="2003:36"><operator pos:start="1999:21" pos:end="1999:21">!</operator><operator pos:start="1999:22" pos:end="1999:22">(</operator><name pos:start="1999:23" pos:end="1999:47"><name pos:start="1999:23" pos:end="1999:23">s</name><operator pos:start="1999:24" pos:end="1999:25">-&gt;</operator><name pos:start="1999:26" pos:end="1999:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="1999:49" pos:end="1999:49">&amp;</operator> <name pos:start="1999:51" pos:end="1999:68">CPUID_7_0_EBX_BMI2</name><operator pos:start="1999:69" pos:end="1999:69">)</operator>

                    <operator pos:start="2001:21" pos:end="2001:22">||</operator> <operator pos:start="2001:24" pos:end="2001:24">!</operator><operator pos:start="2001:25" pos:end="2001:25">(</operator><name pos:start="2001:26" pos:end="2001:34"><name pos:start="2001:26" pos:end="2001:26">s</name><operator pos:start="2001:27" pos:end="2001:28">-&gt;</operator><name pos:start="2001:29" pos:end="2001:34">prefix</name></name> <operator pos:start="2001:36" pos:end="2001:36">&amp;</operator> <name pos:start="2001:38" pos:end="2001:47">PREFIX_VEX</name><operator pos:start="2001:48" pos:end="2001:48">)</operator>

                    <operator pos:start="2003:21" pos:end="2003:22">||</operator> <name pos:start="2003:24" pos:end="2003:31"><name pos:start="2003:24" pos:end="2003:24">s</name><operator pos:start="2003:25" pos:end="2003:26">-&gt;</operator><name pos:start="2003:27" pos:end="2003:31">vex_l</name></name> <operator pos:start="2003:33" pos:end="2003:34">!=</operator> <literal type="number" pos:start="2003:36" pos:end="2003:36">0</literal></expr>)</condition> <block pos:start="2003:39" pos:end="2007:17">{<block_content pos:start="2005:21" pos:end="2005:36">

                    <goto pos:start="2005:21" pos:end="2005:36">goto <name pos:start="2005:26" pos:end="2005:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2009:17" pos:end="2009:40"><expr pos:start="2009:17" pos:end="2009:39"><name pos:start="2009:17" pos:end="2009:18">ot</name> <operator pos:start="2009:20" pos:end="2009:20">=</operator> <call pos:start="2009:22" pos:end="2009:39"><name pos:start="2009:22" pos:end="2009:29">mo_64_32</name><argument_list pos:start="2009:30" pos:end="2009:39">(<argument pos:start="2009:31" pos:end="2009:38"><expr pos:start="2009:31" pos:end="2009:38"><name pos:start="2009:31" pos:end="2009:38"><name pos:start="2009:31" pos:end="2009:31">s</name><operator pos:start="2009:32" pos:end="2009:33">-&gt;</operator><name pos:start="2009:34" pos:end="2009:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2011:17" pos:end="2011:62"><expr pos:start="2011:17" pos:end="2011:61"><call pos:start="2011:17" pos:end="2011:61"><name pos:start="2011:17" pos:end="2011:30">gen_ldst_modrm</name><argument_list pos:start="2011:31" pos:end="2011:61">(<argument pos:start="2011:32" pos:end="2011:34"><expr pos:start="2011:32" pos:end="2011:34"><name pos:start="2011:32" pos:end="2011:34">env</name></expr></argument>, <argument pos:start="2011:37" pos:end="2011:37"><expr pos:start="2011:37" pos:end="2011:37"><name pos:start="2011:37" pos:end="2011:37">s</name></expr></argument>, <argument pos:start="2011:40" pos:end="2011:44"><expr pos:start="2011:40" pos:end="2011:44"><name pos:start="2011:40" pos:end="2011:44">modrm</name></expr></argument>, <argument pos:start="2011:47" pos:end="2011:48"><expr pos:start="2011:47" pos:end="2011:48"><name pos:start="2011:47" pos:end="2011:48">ot</name></expr></argument>, <argument pos:start="2011:51" pos:end="2011:57"><expr pos:start="2011:51" pos:end="2011:57"><name pos:start="2011:51" pos:end="2011:57">OR_TMP0</name></expr></argument>, <argument pos:start="2011:60" pos:end="2011:60"><expr pos:start="2011:60" pos:end="2011:60"><literal type="number" pos:start="2011:60" pos:end="2011:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2013:17" pos:end="2021:17"><if pos:start="2013:17" pos:end="2017:17">if <condition pos:start="2013:20" pos:end="2013:32">(<expr pos:start="2013:21" pos:end="2013:31"><name pos:start="2013:21" pos:end="2013:22">ot</name> <operator pos:start="2013:24" pos:end="2013:25">==</operator> <name pos:start="2013:27" pos:end="2013:31">MO_64</name></expr>)</condition> <block pos:start="2013:34" pos:end="2017:17">{<block_content pos:start="2015:21" pos:end="2015:70">

                    <expr_stmt pos:start="2015:21" pos:end="2015:70"><expr pos:start="2015:21" pos:end="2015:69"><call pos:start="2015:21" pos:end="2015:69"><name pos:start="2015:21" pos:end="2015:35">tcg_gen_andi_tl</name><argument_list pos:start="2015:36" pos:end="2015:69">(<argument pos:start="2015:37" pos:end="2015:44"><expr pos:start="2015:37" pos:end="2015:44"><name pos:start="2015:37" pos:end="2015:44"><name pos:start="2015:37" pos:end="2015:41">cpu_T</name><index pos:start="2015:42" pos:end="2015:44">[<expr pos:start="2015:43" pos:end="2015:43"><literal type="number" pos:start="2015:43" pos:end="2015:43">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="2015:47" pos:end="2015:64"><expr pos:start="2015:47" pos:end="2015:64"><name pos:start="2015:47" pos:end="2015:64"><name pos:start="2015:47" pos:end="2015:54">cpu_regs</name><index pos:start="2015:55" pos:end="2015:64">[<expr pos:start="2015:56" pos:end="2015:63"><name pos:start="2015:56" pos:end="2015:63"><name pos:start="2015:56" pos:end="2015:56">s</name><operator pos:start="2015:57" pos:end="2015:58">-&gt;</operator><name pos:start="2015:59" pos:end="2015:63">vex_v</name></name></expr>]</index></name></expr></argument>, <argument pos:start="2015:67" pos:end="2015:68"><expr pos:start="2015:67" pos:end="2015:68"><literal type="number" pos:start="2015:67" pos:end="2015:68">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2017:19" pos:end="2021:17">else <block pos:start="2017:24" pos:end="2021:17">{<block_content pos:start="2019:21" pos:end="2019:70">

                    <expr_stmt pos:start="2019:21" pos:end="2019:70"><expr pos:start="2019:21" pos:end="2019:69"><call pos:start="2019:21" pos:end="2019:69"><name pos:start="2019:21" pos:end="2019:35">tcg_gen_andi_tl</name><argument_list pos:start="2019:36" pos:end="2019:69">(<argument pos:start="2019:37" pos:end="2019:44"><expr pos:start="2019:37" pos:end="2019:44"><name pos:start="2019:37" pos:end="2019:44"><name pos:start="2019:37" pos:end="2019:41">cpu_T</name><index pos:start="2019:42" pos:end="2019:44">[<expr pos:start="2019:43" pos:end="2019:43"><literal type="number" pos:start="2019:43" pos:end="2019:43">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="2019:47" pos:end="2019:64"><expr pos:start="2019:47" pos:end="2019:64"><name pos:start="2019:47" pos:end="2019:64"><name pos:start="2019:47" pos:end="2019:54">cpu_regs</name><index pos:start="2019:55" pos:end="2019:64">[<expr pos:start="2019:56" pos:end="2019:63"><name pos:start="2019:56" pos:end="2019:63"><name pos:start="2019:56" pos:end="2019:56">s</name><operator pos:start="2019:57" pos:end="2019:58">-&gt;</operator><name pos:start="2019:59" pos:end="2019:63">vex_v</name></name></expr>]</index></name></expr></argument>, <argument pos:start="2019:67" pos:end="2019:68"><expr pos:start="2019:67" pos:end="2019:68"><literal type="number" pos:start="2019:67" pos:end="2019:68">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="2023:17" pos:end="2047:17"><if pos:start="2023:17" pos:end="2027:17">if <condition pos:start="2023:20" pos:end="2023:31">(<expr pos:start="2023:21" pos:end="2023:30"><name pos:start="2023:21" pos:end="2023:21">b</name> <operator pos:start="2023:23" pos:end="2023:24">==</operator> <literal type="number" pos:start="2023:26" pos:end="2023:30">0x1f7</literal></expr>)</condition> <block pos:start="2023:33" pos:end="2027:17">{<block_content pos:start="2025:21" pos:end="2025:65">

                    <expr_stmt pos:start="2025:21" pos:end="2025:65"><expr pos:start="2025:21" pos:end="2025:64"><call pos:start="2025:21" pos:end="2025:64"><name pos:start="2025:21" pos:end="2025:34">tcg_gen_shl_tl</name><argument_list pos:start="2025:35" pos:end="2025:64">(<argument pos:start="2025:36" pos:end="2025:43"><expr pos:start="2025:36" pos:end="2025:43"><name pos:start="2025:36" pos:end="2025:43"><name pos:start="2025:36" pos:end="2025:40">cpu_T</name><index pos:start="2025:41" pos:end="2025:43">[<expr pos:start="2025:42" pos:end="2025:42"><literal type="number" pos:start="2025:42" pos:end="2025:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2025:46" pos:end="2025:53"><expr pos:start="2025:46" pos:end="2025:53"><name pos:start="2025:46" pos:end="2025:53"><name pos:start="2025:46" pos:end="2025:50">cpu_T</name><index pos:start="2025:51" pos:end="2025:53">[<expr pos:start="2025:52" pos:end="2025:52"><literal type="number" pos:start="2025:52" pos:end="2025:52">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2025:56" pos:end="2025:63"><expr pos:start="2025:56" pos:end="2025:63"><name pos:start="2025:56" pos:end="2025:63"><name pos:start="2025:56" pos:end="2025:60">cpu_T</name><index pos:start="2025:61" pos:end="2025:63">[<expr pos:start="2025:62" pos:end="2025:62"><literal type="number" pos:start="2025:62" pos:end="2025:62">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="2027:19" pos:end="2037:17">else if <condition pos:start="2027:27" pos:end="2027:38">(<expr pos:start="2027:28" pos:end="2027:37"><name pos:start="2027:28" pos:end="2027:28">b</name> <operator pos:start="2027:30" pos:end="2027:31">==</operator> <literal type="number" pos:start="2027:33" pos:end="2027:37">0x2f7</literal></expr>)</condition> <block pos:start="2027:40" pos:end="2037:17">{<block_content pos:start="2029:21" pos:end="2035:65">

                    <if_stmt pos:start="2029:21" pos:end="2033:21"><if pos:start="2029:21" pos:end="2033:21">if <condition pos:start="2029:24" pos:end="2029:36">(<expr pos:start="2029:25" pos:end="2029:35"><name pos:start="2029:25" pos:end="2029:26">ot</name> <operator pos:start="2029:28" pos:end="2029:29">!=</operator> <name pos:start="2029:31" pos:end="2029:35">MO_64</name></expr>)</condition> <block pos:start="2029:38" pos:end="2033:21">{<block_content pos:start="2031:25" pos:end="2031:62">

                        <expr_stmt pos:start="2031:25" pos:end="2031:62"><expr pos:start="2031:25" pos:end="2031:61"><call pos:start="2031:25" pos:end="2031:61"><name pos:start="2031:25" pos:end="2031:41">tcg_gen_ext32s_tl</name><argument_list pos:start="2031:42" pos:end="2031:61">(<argument pos:start="2031:43" pos:end="2031:50"><expr pos:start="2031:43" pos:end="2031:50"><name pos:start="2031:43" pos:end="2031:50"><name pos:start="2031:43" pos:end="2031:47">cpu_T</name><index pos:start="2031:48" pos:end="2031:50">[<expr pos:start="2031:49" pos:end="2031:49"><literal type="number" pos:start="2031:49" pos:end="2031:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2031:53" pos:end="2031:60"><expr pos:start="2031:53" pos:end="2031:60"><name pos:start="2031:53" pos:end="2031:60"><name pos:start="2031:53" pos:end="2031:57">cpu_T</name><index pos:start="2031:58" pos:end="2031:60">[<expr pos:start="2031:59" pos:end="2031:59"><literal type="number" pos:start="2031:59" pos:end="2031:59">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2035:21" pos:end="2035:65"><expr pos:start="2035:21" pos:end="2035:64"><call pos:start="2035:21" pos:end="2035:64"><name pos:start="2035:21" pos:end="2035:34">tcg_gen_sar_tl</name><argument_list pos:start="2035:35" pos:end="2035:64">(<argument pos:start="2035:36" pos:end="2035:43"><expr pos:start="2035:36" pos:end="2035:43"><name pos:start="2035:36" pos:end="2035:43"><name pos:start="2035:36" pos:end="2035:40">cpu_T</name><index pos:start="2035:41" pos:end="2035:43">[<expr pos:start="2035:42" pos:end="2035:42"><literal type="number" pos:start="2035:42" pos:end="2035:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2035:46" pos:end="2035:53"><expr pos:start="2035:46" pos:end="2035:53"><name pos:start="2035:46" pos:end="2035:53"><name pos:start="2035:46" pos:end="2035:50">cpu_T</name><index pos:start="2035:51" pos:end="2035:53">[<expr pos:start="2035:52" pos:end="2035:52"><literal type="number" pos:start="2035:52" pos:end="2035:52">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2035:56" pos:end="2035:63"><expr pos:start="2035:56" pos:end="2035:63"><name pos:start="2035:56" pos:end="2035:63"><name pos:start="2035:56" pos:end="2035:60">cpu_T</name><index pos:start="2035:61" pos:end="2035:63">[<expr pos:start="2035:62" pos:end="2035:62"><literal type="number" pos:start="2035:62" pos:end="2035:62">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2037:19" pos:end="2047:17">else <block pos:start="2037:24" pos:end="2047:17">{<block_content pos:start="2039:21" pos:end="2045:65">

                    <if_stmt pos:start="2039:21" pos:end="2043:21"><if pos:start="2039:21" pos:end="2043:21">if <condition pos:start="2039:24" pos:end="2039:36">(<expr pos:start="2039:25" pos:end="2039:35"><name pos:start="2039:25" pos:end="2039:26">ot</name> <operator pos:start="2039:28" pos:end="2039:29">!=</operator> <name pos:start="2039:31" pos:end="2039:35">MO_64</name></expr>)</condition> <block pos:start="2039:38" pos:end="2043:21">{<block_content pos:start="2041:25" pos:end="2041:62">

                        <expr_stmt pos:start="2041:25" pos:end="2041:62"><expr pos:start="2041:25" pos:end="2041:61"><call pos:start="2041:25" pos:end="2041:61"><name pos:start="2041:25" pos:end="2041:41">tcg_gen_ext32u_tl</name><argument_list pos:start="2041:42" pos:end="2041:61">(<argument pos:start="2041:43" pos:end="2041:50"><expr pos:start="2041:43" pos:end="2041:50"><name pos:start="2041:43" pos:end="2041:50"><name pos:start="2041:43" pos:end="2041:47">cpu_T</name><index pos:start="2041:48" pos:end="2041:50">[<expr pos:start="2041:49" pos:end="2041:49"><literal type="number" pos:start="2041:49" pos:end="2041:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2041:53" pos:end="2041:60"><expr pos:start="2041:53" pos:end="2041:60"><name pos:start="2041:53" pos:end="2041:60"><name pos:start="2041:53" pos:end="2041:57">cpu_T</name><index pos:start="2041:58" pos:end="2041:60">[<expr pos:start="2041:59" pos:end="2041:59"><literal type="number" pos:start="2041:59" pos:end="2041:59">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2045:21" pos:end="2045:65"><expr pos:start="2045:21" pos:end="2045:64"><call pos:start="2045:21" pos:end="2045:64"><name pos:start="2045:21" pos:end="2045:34">tcg_gen_shr_tl</name><argument_list pos:start="2045:35" pos:end="2045:64">(<argument pos:start="2045:36" pos:end="2045:43"><expr pos:start="2045:36" pos:end="2045:43"><name pos:start="2045:36" pos:end="2045:43"><name pos:start="2045:36" pos:end="2045:40">cpu_T</name><index pos:start="2045:41" pos:end="2045:43">[<expr pos:start="2045:42" pos:end="2045:42"><literal type="number" pos:start="2045:42" pos:end="2045:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2045:46" pos:end="2045:53"><expr pos:start="2045:46" pos:end="2045:53"><name pos:start="2045:46" pos:end="2045:53"><name pos:start="2045:46" pos:end="2045:50">cpu_T</name><index pos:start="2045:51" pos:end="2045:53">[<expr pos:start="2045:52" pos:end="2045:52"><literal type="number" pos:start="2045:52" pos:end="2045:52">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2045:56" pos:end="2045:63"><expr pos:start="2045:56" pos:end="2045:63"><name pos:start="2045:56" pos:end="2045:63"><name pos:start="2045:56" pos:end="2045:60">cpu_T</name><index pos:start="2045:61" pos:end="2045:63">[<expr pos:start="2045:62" pos:end="2045:62"><literal type="number" pos:start="2045:62" pos:end="2045:62">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="2049:17" pos:end="2049:52"><expr pos:start="2049:17" pos:end="2049:51"><call pos:start="2049:17" pos:end="2049:51"><name pos:start="2049:17" pos:end="2049:32">gen_op_mov_reg_v</name><argument_list pos:start="2049:33" pos:end="2049:51">(<argument pos:start="2049:34" pos:end="2049:35"><expr pos:start="2049:34" pos:end="2049:35"><name pos:start="2049:34" pos:end="2049:35">ot</name></expr></argument>, <argument pos:start="2049:38" pos:end="2049:40"><expr pos:start="2049:38" pos:end="2049:40"><name pos:start="2049:38" pos:end="2049:40">reg</name></expr></argument>, <argument pos:start="2049:43" pos:end="2049:50"><expr pos:start="2049:43" pos:end="2049:50"><name pos:start="2049:43" pos:end="2049:50"><name pos:start="2049:43" pos:end="2049:47">cpu_T</name><index pos:start="2049:48" pos:end="2049:50">[<expr pos:start="2049:49" pos:end="2049:49"><literal type="number" pos:start="2049:49" pos:end="2049:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2051:17" pos:end="2051:22">break;</break>



            <case pos:start="2055:13" pos:end="2055:23">case <expr pos:start="2055:18" pos:end="2055:22"><literal type="number" pos:start="2055:18" pos:end="2055:22">0x0f3</literal></expr>:</case>

            <case pos:start="2057:13" pos:end="2057:23">case <expr pos:start="2057:18" pos:end="2057:22"><literal type="number" pos:start="2057:18" pos:end="2057:22">0x1f3</literal></expr>:</case>

            <case pos:start="2059:13" pos:end="2059:23">case <expr pos:start="2059:18" pos:end="2059:22"><literal type="number" pos:start="2059:18" pos:end="2059:22">0x2f3</literal></expr>:</case>

            <case pos:start="2061:13" pos:end="2061:23">case <expr pos:start="2061:18" pos:end="2061:22"><literal type="number" pos:start="2061:18" pos:end="2061:22">0x3f3</literal></expr>:</case> <comment type="block" pos:start="2061:25" pos:end="2061:38">/* Group 17 */</comment>

                <if_stmt pos:start="2063:17" pos:end="2071:17"><if pos:start="2063:17" pos:end="2071:17">if <condition pos:start="2063:20" pos:end="2067:37">(<expr pos:start="2063:21" pos:end="2067:36"><operator pos:start="2063:21" pos:end="2063:21">!</operator><operator pos:start="2063:22" pos:end="2063:22">(</operator><name pos:start="2063:23" pos:end="2063:47"><name pos:start="2063:23" pos:end="2063:23">s</name><operator pos:start="2063:24" pos:end="2063:25">-&gt;</operator><name pos:start="2063:26" pos:end="2063:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="2063:49" pos:end="2063:49">&amp;</operator> <name pos:start="2063:51" pos:end="2063:68">CPUID_7_0_EBX_BMI1</name><operator pos:start="2063:69" pos:end="2063:69">)</operator>

                    <operator pos:start="2065:21" pos:end="2065:22">||</operator> <operator pos:start="2065:24" pos:end="2065:24">!</operator><operator pos:start="2065:25" pos:end="2065:25">(</operator><name pos:start="2065:26" pos:end="2065:34"><name pos:start="2065:26" pos:end="2065:26">s</name><operator pos:start="2065:27" pos:end="2065:28">-&gt;</operator><name pos:start="2065:29" pos:end="2065:34">prefix</name></name> <operator pos:start="2065:36" pos:end="2065:36">&amp;</operator> <name pos:start="2065:38" pos:end="2065:47">PREFIX_VEX</name><operator pos:start="2065:48" pos:end="2065:48">)</operator>

                    <operator pos:start="2067:21" pos:end="2067:22">||</operator> <name pos:start="2067:24" pos:end="2067:31"><name pos:start="2067:24" pos:end="2067:24">s</name><operator pos:start="2067:25" pos:end="2067:26">-&gt;</operator><name pos:start="2067:27" pos:end="2067:31">vex_l</name></name> <operator pos:start="2067:33" pos:end="2067:34">!=</operator> <literal type="number" pos:start="2067:36" pos:end="2067:36">0</literal></expr>)</condition> <block pos:start="2067:39" pos:end="2071:17">{<block_content pos:start="2069:21" pos:end="2069:36">

                    <goto pos:start="2069:21" pos:end="2069:36">goto <name pos:start="2069:26" pos:end="2069:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2073:17" pos:end="2073:40"><expr pos:start="2073:17" pos:end="2073:39"><name pos:start="2073:17" pos:end="2073:18">ot</name> <operator pos:start="2073:20" pos:end="2073:20">=</operator> <call pos:start="2073:22" pos:end="2073:39"><name pos:start="2073:22" pos:end="2073:29">mo_64_32</name><argument_list pos:start="2073:30" pos:end="2073:39">(<argument pos:start="2073:31" pos:end="2073:38"><expr pos:start="2073:31" pos:end="2073:38"><name pos:start="2073:31" pos:end="2073:38"><name pos:start="2073:31" pos:end="2073:31">s</name><operator pos:start="2073:32" pos:end="2073:33">-&gt;</operator><name pos:start="2073:34" pos:end="2073:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2075:17" pos:end="2075:62"><expr pos:start="2075:17" pos:end="2075:61"><call pos:start="2075:17" pos:end="2075:61"><name pos:start="2075:17" pos:end="2075:30">gen_ldst_modrm</name><argument_list pos:start="2075:31" pos:end="2075:61">(<argument pos:start="2075:32" pos:end="2075:34"><expr pos:start="2075:32" pos:end="2075:34"><name pos:start="2075:32" pos:end="2075:34">env</name></expr></argument>, <argument pos:start="2075:37" pos:end="2075:37"><expr pos:start="2075:37" pos:end="2075:37"><name pos:start="2075:37" pos:end="2075:37">s</name></expr></argument>, <argument pos:start="2075:40" pos:end="2075:44"><expr pos:start="2075:40" pos:end="2075:44"><name pos:start="2075:40" pos:end="2075:44">modrm</name></expr></argument>, <argument pos:start="2075:47" pos:end="2075:48"><expr pos:start="2075:47" pos:end="2075:48"><name pos:start="2075:47" pos:end="2075:48">ot</name></expr></argument>, <argument pos:start="2075:51" pos:end="2075:57"><expr pos:start="2075:51" pos:end="2075:57"><name pos:start="2075:51" pos:end="2075:57">OR_TMP0</name></expr></argument>, <argument pos:start="2075:60" pos:end="2075:60"><expr pos:start="2075:60" pos:end="2075:60"><literal type="number" pos:start="2075:60" pos:end="2075:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <switch pos:start="2079:17" pos:end="2133:17">switch <condition pos:start="2079:24" pos:end="2079:32">(<expr pos:start="2079:25" pos:end="2079:31"><name pos:start="2079:25" pos:end="2079:27">reg</name> <operator pos:start="2079:29" pos:end="2079:29">&amp;</operator> <literal type="number" pos:start="2079:31" pos:end="2079:31">7</literal></expr>)</condition> <block pos:start="2079:34" pos:end="2133:17">{<block_content pos:start="2081:17" pos:end="2131:36">

                <case pos:start="2081:17" pos:end="2081:23">case <expr pos:start="2081:22" pos:end="2081:22"><literal type="number" pos:start="2081:22" pos:end="2081:22">1</literal></expr>:</case> <comment type="block" pos:start="2081:25" pos:end="2081:40">/* blsr By,Ey */</comment>

                    <expr_stmt pos:start="2083:21" pos:end="2083:55"><expr pos:start="2083:21" pos:end="2083:54"><call pos:start="2083:21" pos:end="2083:54"><name pos:start="2083:21" pos:end="2083:34">tcg_gen_neg_tl</name><argument_list pos:start="2083:35" pos:end="2083:54">(<argument pos:start="2083:36" pos:end="2083:43"><expr pos:start="2083:36" pos:end="2083:43"><name pos:start="2083:36" pos:end="2083:43"><name pos:start="2083:36" pos:end="2083:40">cpu_T</name><index pos:start="2083:41" pos:end="2083:43">[<expr pos:start="2083:42" pos:end="2083:42"><literal type="number" pos:start="2083:42" pos:end="2083:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="2083:46" pos:end="2083:53"><expr pos:start="2083:46" pos:end="2083:53"><name pos:start="2083:46" pos:end="2083:53"><name pos:start="2083:46" pos:end="2083:50">cpu_T</name><index pos:start="2083:51" pos:end="2083:53">[<expr pos:start="2083:52" pos:end="2083:52"><literal type="number" pos:start="2083:52" pos:end="2083:52">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2085:21" pos:end="2085:65"><expr pos:start="2085:21" pos:end="2085:64"><call pos:start="2085:21" pos:end="2085:64"><name pos:start="2085:21" pos:end="2085:34">tcg_gen_and_tl</name><argument_list pos:start="2085:35" pos:end="2085:64">(<argument pos:start="2085:36" pos:end="2085:43"><expr pos:start="2085:36" pos:end="2085:43"><name pos:start="2085:36" pos:end="2085:43"><name pos:start="2085:36" pos:end="2085:40">cpu_T</name><index pos:start="2085:41" pos:end="2085:43">[<expr pos:start="2085:42" pos:end="2085:42"><literal type="number" pos:start="2085:42" pos:end="2085:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2085:46" pos:end="2085:53"><expr pos:start="2085:46" pos:end="2085:53"><name pos:start="2085:46" pos:end="2085:53"><name pos:start="2085:46" pos:end="2085:50">cpu_T</name><index pos:start="2085:51" pos:end="2085:53">[<expr pos:start="2085:52" pos:end="2085:52"><literal type="number" pos:start="2085:52" pos:end="2085:52">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2085:56" pos:end="2085:63"><expr pos:start="2085:56" pos:end="2085:63"><name pos:start="2085:56" pos:end="2085:63"><name pos:start="2085:56" pos:end="2085:60">cpu_T</name><index pos:start="2085:61" pos:end="2085:63">[<expr pos:start="2085:62" pos:end="2085:62"><literal type="number" pos:start="2085:62" pos:end="2085:62">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2087:21" pos:end="2087:61"><expr pos:start="2087:21" pos:end="2087:60"><call pos:start="2087:21" pos:end="2087:60"><name pos:start="2087:21" pos:end="2087:36">gen_op_mov_reg_v</name><argument_list pos:start="2087:37" pos:end="2087:60">(<argument pos:start="2087:38" pos:end="2087:39"><expr pos:start="2087:38" pos:end="2087:39"><name pos:start="2087:38" pos:end="2087:39">ot</name></expr></argument>, <argument pos:start="2087:42" pos:end="2087:49"><expr pos:start="2087:42" pos:end="2087:49"><name pos:start="2087:42" pos:end="2087:49"><name pos:start="2087:42" pos:end="2087:42">s</name><operator pos:start="2087:43" pos:end="2087:44">-&gt;</operator><name pos:start="2087:45" pos:end="2087:49">vex_v</name></name></expr></argument>, <argument pos:start="2087:52" pos:end="2087:59"><expr pos:start="2087:52" pos:end="2087:59"><name pos:start="2087:52" pos:end="2087:59"><name pos:start="2087:52" pos:end="2087:56">cpu_T</name><index pos:start="2087:57" pos:end="2087:59">[<expr pos:start="2087:58" pos:end="2087:58"><literal type="number" pos:start="2087:58" pos:end="2087:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2089:21" pos:end="2089:40"><expr pos:start="2089:21" pos:end="2089:39"><call pos:start="2089:21" pos:end="2089:39"><name pos:start="2089:21" pos:end="2089:37">gen_op_update2_cc</name><argument_list pos:start="2089:38" pos:end="2089:39">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2091:21" pos:end="2091:52"><expr pos:start="2091:21" pos:end="2091:51"><call pos:start="2091:21" pos:end="2091:51"><name pos:start="2091:21" pos:end="2091:29">set_cc_op</name><argument_list pos:start="2091:30" pos:end="2091:51">(<argument pos:start="2091:31" pos:end="2091:31"><expr pos:start="2091:31" pos:end="2091:31"><name pos:start="2091:31" pos:end="2091:31">s</name></expr></argument>, <argument pos:start="2091:34" pos:end="2091:50"><expr pos:start="2091:34" pos:end="2091:50"><name pos:start="2091:34" pos:end="2091:45">CC_OP_BMILGB</name> <operator pos:start="2091:47" pos:end="2091:47">+</operator> <name pos:start="2091:49" pos:end="2091:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2093:21" pos:end="2093:26">break;</break>



                <case pos:start="2097:17" pos:end="2097:23">case <expr pos:start="2097:22" pos:end="2097:22"><literal type="number" pos:start="2097:22" pos:end="2097:22">2</literal></expr>:</case> <comment type="block" pos:start="2097:25" pos:end="2097:42">/* blsmsk By,Ey */</comment>

                    <expr_stmt pos:start="2099:21" pos:end="2099:57"><expr pos:start="2099:21" pos:end="2099:56"><call pos:start="2099:21" pos:end="2099:56"><name pos:start="2099:21" pos:end="2099:34">tcg_gen_mov_tl</name><argument_list pos:start="2099:35" pos:end="2099:56">(<argument pos:start="2099:36" pos:end="2099:45"><expr pos:start="2099:36" pos:end="2099:45"><name pos:start="2099:36" pos:end="2099:45">cpu_cc_src</name></expr></argument>, <argument pos:start="2099:48" pos:end="2099:55"><expr pos:start="2099:48" pos:end="2099:55"><name pos:start="2099:48" pos:end="2099:55"><name pos:start="2099:48" pos:end="2099:52">cpu_T</name><index pos:start="2099:53" pos:end="2099:55">[<expr pos:start="2099:54" pos:end="2099:54"><literal type="number" pos:start="2099:54" pos:end="2099:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2101:21" pos:end="2101:59"><expr pos:start="2101:21" pos:end="2101:58"><call pos:start="2101:21" pos:end="2101:58"><name pos:start="2101:21" pos:end="2101:35">tcg_gen_subi_tl</name><argument_list pos:start="2101:36" pos:end="2101:58">(<argument pos:start="2101:37" pos:end="2101:44"><expr pos:start="2101:37" pos:end="2101:44"><name pos:start="2101:37" pos:end="2101:44"><name pos:start="2101:37" pos:end="2101:41">cpu_T</name><index pos:start="2101:42" pos:end="2101:44">[<expr pos:start="2101:43" pos:end="2101:43"><literal type="number" pos:start="2101:43" pos:end="2101:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2101:47" pos:end="2101:54"><expr pos:start="2101:47" pos:end="2101:54"><name pos:start="2101:47" pos:end="2101:54"><name pos:start="2101:47" pos:end="2101:51">cpu_T</name><index pos:start="2101:52" pos:end="2101:54">[<expr pos:start="2101:53" pos:end="2101:53"><literal type="number" pos:start="2101:53" pos:end="2101:53">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2101:57" pos:end="2101:57"><expr pos:start="2101:57" pos:end="2101:57"><literal type="number" pos:start="2101:57" pos:end="2101:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2103:21" pos:end="2103:67"><expr pos:start="2103:21" pos:end="2103:66"><call pos:start="2103:21" pos:end="2103:66"><name pos:start="2103:21" pos:end="2103:34">tcg_gen_xor_tl</name><argument_list pos:start="2103:35" pos:end="2103:66">(<argument pos:start="2103:36" pos:end="2103:43"><expr pos:start="2103:36" pos:end="2103:43"><name pos:start="2103:36" pos:end="2103:43"><name pos:start="2103:36" pos:end="2103:40">cpu_T</name><index pos:start="2103:41" pos:end="2103:43">[<expr pos:start="2103:42" pos:end="2103:42"><literal type="number" pos:start="2103:42" pos:end="2103:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2103:46" pos:end="2103:53"><expr pos:start="2103:46" pos:end="2103:53"><name pos:start="2103:46" pos:end="2103:53"><name pos:start="2103:46" pos:end="2103:50">cpu_T</name><index pos:start="2103:51" pos:end="2103:53">[<expr pos:start="2103:52" pos:end="2103:52"><literal type="number" pos:start="2103:52" pos:end="2103:52">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2103:56" pos:end="2103:65"><expr pos:start="2103:56" pos:end="2103:65"><name pos:start="2103:56" pos:end="2103:65">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2105:21" pos:end="2105:57"><expr pos:start="2105:21" pos:end="2105:56"><call pos:start="2105:21" pos:end="2105:56"><name pos:start="2105:21" pos:end="2105:34">tcg_gen_mov_tl</name><argument_list pos:start="2105:35" pos:end="2105:56">(<argument pos:start="2105:36" pos:end="2105:45"><expr pos:start="2105:36" pos:end="2105:45"><name pos:start="2105:36" pos:end="2105:45">cpu_cc_dst</name></expr></argument>, <argument pos:start="2105:48" pos:end="2105:55"><expr pos:start="2105:48" pos:end="2105:55"><name pos:start="2105:48" pos:end="2105:55"><name pos:start="2105:48" pos:end="2105:52">cpu_T</name><index pos:start="2105:53" pos:end="2105:55">[<expr pos:start="2105:54" pos:end="2105:54"><literal type="number" pos:start="2105:54" pos:end="2105:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2107:21" pos:end="2107:52"><expr pos:start="2107:21" pos:end="2107:51"><call pos:start="2107:21" pos:end="2107:51"><name pos:start="2107:21" pos:end="2107:29">set_cc_op</name><argument_list pos:start="2107:30" pos:end="2107:51">(<argument pos:start="2107:31" pos:end="2107:31"><expr pos:start="2107:31" pos:end="2107:31"><name pos:start="2107:31" pos:end="2107:31">s</name></expr></argument>, <argument pos:start="2107:34" pos:end="2107:50"><expr pos:start="2107:34" pos:end="2107:50"><name pos:start="2107:34" pos:end="2107:45">CC_OP_BMILGB</name> <operator pos:start="2107:47" pos:end="2107:47">+</operator> <name pos:start="2107:49" pos:end="2107:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2109:21" pos:end="2109:26">break;</break>



                <case pos:start="2113:17" pos:end="2113:23">case <expr pos:start="2113:22" pos:end="2113:22"><literal type="number" pos:start="2113:22" pos:end="2113:22">3</literal></expr>:</case> <comment type="block" pos:start="2113:25" pos:end="2113:41">/* blsi By, Ey */</comment>

                    <expr_stmt pos:start="2115:21" pos:end="2115:57"><expr pos:start="2115:21" pos:end="2115:56"><call pos:start="2115:21" pos:end="2115:56"><name pos:start="2115:21" pos:end="2115:34">tcg_gen_mov_tl</name><argument_list pos:start="2115:35" pos:end="2115:56">(<argument pos:start="2115:36" pos:end="2115:45"><expr pos:start="2115:36" pos:end="2115:45"><name pos:start="2115:36" pos:end="2115:45">cpu_cc_src</name></expr></argument>, <argument pos:start="2115:48" pos:end="2115:55"><expr pos:start="2115:48" pos:end="2115:55"><name pos:start="2115:48" pos:end="2115:55"><name pos:start="2115:48" pos:end="2115:52">cpu_T</name><index pos:start="2115:53" pos:end="2115:55">[<expr pos:start="2115:54" pos:end="2115:54"><literal type="number" pos:start="2115:54" pos:end="2115:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2117:21" pos:end="2117:59"><expr pos:start="2117:21" pos:end="2117:58"><call pos:start="2117:21" pos:end="2117:58"><name pos:start="2117:21" pos:end="2117:35">tcg_gen_subi_tl</name><argument_list pos:start="2117:36" pos:end="2117:58">(<argument pos:start="2117:37" pos:end="2117:44"><expr pos:start="2117:37" pos:end="2117:44"><name pos:start="2117:37" pos:end="2117:44"><name pos:start="2117:37" pos:end="2117:41">cpu_T</name><index pos:start="2117:42" pos:end="2117:44">[<expr pos:start="2117:43" pos:end="2117:43"><literal type="number" pos:start="2117:43" pos:end="2117:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2117:47" pos:end="2117:54"><expr pos:start="2117:47" pos:end="2117:54"><name pos:start="2117:47" pos:end="2117:54"><name pos:start="2117:47" pos:end="2117:51">cpu_T</name><index pos:start="2117:52" pos:end="2117:54">[<expr pos:start="2117:53" pos:end="2117:53"><literal type="number" pos:start="2117:53" pos:end="2117:53">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2117:57" pos:end="2117:57"><expr pos:start="2117:57" pos:end="2117:57"><literal type="number" pos:start="2117:57" pos:end="2117:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2119:21" pos:end="2119:67"><expr pos:start="2119:21" pos:end="2119:66"><call pos:start="2119:21" pos:end="2119:66"><name pos:start="2119:21" pos:end="2119:34">tcg_gen_and_tl</name><argument_list pos:start="2119:35" pos:end="2119:66">(<argument pos:start="2119:36" pos:end="2119:43"><expr pos:start="2119:36" pos:end="2119:43"><name pos:start="2119:36" pos:end="2119:43"><name pos:start="2119:36" pos:end="2119:40">cpu_T</name><index pos:start="2119:41" pos:end="2119:43">[<expr pos:start="2119:42" pos:end="2119:42"><literal type="number" pos:start="2119:42" pos:end="2119:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2119:46" pos:end="2119:53"><expr pos:start="2119:46" pos:end="2119:53"><name pos:start="2119:46" pos:end="2119:53"><name pos:start="2119:46" pos:end="2119:50">cpu_T</name><index pos:start="2119:51" pos:end="2119:53">[<expr pos:start="2119:52" pos:end="2119:52"><literal type="number" pos:start="2119:52" pos:end="2119:52">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2119:56" pos:end="2119:65"><expr pos:start="2119:56" pos:end="2119:65"><name pos:start="2119:56" pos:end="2119:65">cpu_cc_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2121:21" pos:end="2121:57"><expr pos:start="2121:21" pos:end="2121:56"><call pos:start="2121:21" pos:end="2121:56"><name pos:start="2121:21" pos:end="2121:34">tcg_gen_mov_tl</name><argument_list pos:start="2121:35" pos:end="2121:56">(<argument pos:start="2121:36" pos:end="2121:45"><expr pos:start="2121:36" pos:end="2121:45"><name pos:start="2121:36" pos:end="2121:45">cpu_cc_dst</name></expr></argument>, <argument pos:start="2121:48" pos:end="2121:55"><expr pos:start="2121:48" pos:end="2121:55"><name pos:start="2121:48" pos:end="2121:55"><name pos:start="2121:48" pos:end="2121:52">cpu_T</name><index pos:start="2121:53" pos:end="2121:55">[<expr pos:start="2121:54" pos:end="2121:54"><literal type="number" pos:start="2121:54" pos:end="2121:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2123:21" pos:end="2123:52"><expr pos:start="2123:21" pos:end="2123:51"><call pos:start="2123:21" pos:end="2123:51"><name pos:start="2123:21" pos:end="2123:29">set_cc_op</name><argument_list pos:start="2123:30" pos:end="2123:51">(<argument pos:start="2123:31" pos:end="2123:31"><expr pos:start="2123:31" pos:end="2123:31"><name pos:start="2123:31" pos:end="2123:31">s</name></expr></argument>, <argument pos:start="2123:34" pos:end="2123:50"><expr pos:start="2123:34" pos:end="2123:50"><name pos:start="2123:34" pos:end="2123:45">CC_OP_BMILGB</name> <operator pos:start="2123:47" pos:end="2123:47">+</operator> <name pos:start="2123:49" pos:end="2123:50">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2125:21" pos:end="2125:26">break;</break>



                <default pos:start="2129:17" pos:end="2129:24">default:</default>

                    <goto pos:start="2131:21" pos:end="2131:36">goto <name pos:start="2131:26" pos:end="2131:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2135:17" pos:end="2135:22">break;</break>



            <default pos:start="2139:13" pos:end="2139:20">default:</default>

                <goto pos:start="2141:17" pos:end="2141:32">goto <name pos:start="2141:22" pos:end="2141:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

            <break pos:start="2145:13" pos:end="2145:18">break;</break>



        <case pos:start="2149:9" pos:end="2149:19">case <expr pos:start="2149:14" pos:end="2149:18"><literal type="number" pos:start="2149:14" pos:end="2149:18">0x03a</literal></expr>:</case>

        <case pos:start="2151:9" pos:end="2151:19">case <expr pos:start="2151:14" pos:end="2151:18"><literal type="number" pos:start="2151:14" pos:end="2151:18">0x13a</literal></expr>:</case>

            <expr_stmt pos:start="2153:13" pos:end="2153:22"><expr pos:start="2153:13" pos:end="2153:21"><name pos:start="2153:13" pos:end="2153:13">b</name> <operator pos:start="2153:15" pos:end="2153:15">=</operator> <name pos:start="2153:17" pos:end="2153:21">modrm</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2155:13" pos:end="2155:48"><expr pos:start="2155:13" pos:end="2155:47"><name pos:start="2155:13" pos:end="2155:17">modrm</name> <operator pos:start="2155:19" pos:end="2155:19">=</operator> <call pos:start="2155:21" pos:end="2155:47"><name pos:start="2155:21" pos:end="2155:33">cpu_ldub_code</name><argument_list pos:start="2155:34" pos:end="2155:47">(<argument pos:start="2155:35" pos:end="2155:37"><expr pos:start="2155:35" pos:end="2155:37"><name pos:start="2155:35" pos:end="2155:37">env</name></expr></argument>, <argument pos:start="2155:40" pos:end="2155:46"><expr pos:start="2155:40" pos:end="2155:46"><name pos:start="2155:40" pos:end="2155:44"><name pos:start="2155:40" pos:end="2155:40">s</name><operator pos:start="2155:41" pos:end="2155:42">-&gt;</operator><name pos:start="2155:43" pos:end="2155:44">pc</name></name><operator pos:start="2155:45" pos:end="2155:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2157:13" pos:end="2157:27"><expr pos:start="2157:13" pos:end="2157:26"><name pos:start="2157:13" pos:end="2157:14">rm</name> <operator pos:start="2157:16" pos:end="2157:16">=</operator> <name pos:start="2157:18" pos:end="2157:22">modrm</name> <operator pos:start="2157:24" pos:end="2157:24">&amp;</operator> <literal type="number" pos:start="2157:26" pos:end="2157:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="2159:13" pos:end="2159:45"><expr pos:start="2159:13" pos:end="2159:44"><name pos:start="2159:13" pos:end="2159:15">reg</name> <operator pos:start="2159:17" pos:end="2159:17">=</operator> <operator pos:start="2159:19" pos:end="2159:19">(</operator><operator pos:start="2159:20" pos:end="2159:20">(</operator><name pos:start="2159:21" pos:end="2159:25">modrm</name> <operator pos:start="2159:27" pos:end="2159:28">&gt;&gt;</operator> <literal type="number" pos:start="2159:30" pos:end="2159:30">3</literal><operator pos:start="2159:31" pos:end="2159:31">)</operator> <operator pos:start="2159:33" pos:end="2159:33">&amp;</operator> <literal type="number" pos:start="2159:35" pos:end="2159:35">7</literal><operator pos:start="2159:36" pos:end="2159:36">)</operator> <operator pos:start="2159:38" pos:end="2159:38">|</operator> <name pos:start="2159:40" pos:end="2159:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2161:13" pos:end="2161:35"><expr pos:start="2161:13" pos:end="2161:34"><name pos:start="2161:13" pos:end="2161:15">mod</name> <operator pos:start="2161:17" pos:end="2161:17">=</operator> <operator pos:start="2161:19" pos:end="2161:19">(</operator><name pos:start="2161:20" pos:end="2161:24">modrm</name> <operator pos:start="2161:26" pos:end="2161:27">&gt;&gt;</operator> <literal type="number" pos:start="2161:29" pos:end="2161:29">6</literal><operator pos:start="2161:30" pos:end="2161:30">)</operator> <operator pos:start="2161:32" pos:end="2161:32">&amp;</operator> <literal type="number" pos:start="2161:34" pos:end="2161:34">3</literal></expr>;</expr_stmt>

            <if_stmt pos:start="2163:13" pos:end="2167:13"><if pos:start="2163:13" pos:end="2167:13">if <condition pos:start="2163:16" pos:end="2163:24">(<expr pos:start="2163:17" pos:end="2163:23"><name pos:start="2163:17" pos:end="2163:18">b1</name> <operator pos:start="2163:20" pos:end="2163:21">&gt;=</operator> <literal type="number" pos:start="2163:23" pos:end="2163:23">2</literal></expr>)</condition> <block pos:start="2163:26" pos:end="2167:13">{<block_content pos:start="2165:17" pos:end="2165:32">

                <goto pos:start="2165:17" pos:end="2165:32">goto <name pos:start="2165:22" pos:end="2165:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="2171:13" pos:end="2171:50"><expr pos:start="2171:13" pos:end="2171:49"><name pos:start="2171:13" pos:end="2171:23">sse_fn_eppi</name> <operator pos:start="2171:25" pos:end="2171:25">=</operator> <name pos:start="2171:27" pos:end="2171:42"><name pos:start="2171:27" pos:end="2171:39">sse_op_table7</name><index pos:start="2171:40" pos:end="2171:42">[<expr pos:start="2171:41" pos:end="2171:41"><name pos:start="2171:41" pos:end="2171:41">b</name></expr>]</index></name><operator pos:start="2171:43" pos:end="2171:43">.</operator><name pos:start="2171:44" pos:end="2171:49"><name pos:start="2171:44" pos:end="2171:45">op</name><index pos:start="2171:46" pos:end="2171:49">[<expr pos:start="2171:47" pos:end="2171:48"><name pos:start="2171:47" pos:end="2171:48">b1</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="2173:13" pos:end="2177:13"><if pos:start="2173:13" pos:end="2177:13">if <condition pos:start="2173:16" pos:end="2173:29">(<expr pos:start="2173:17" pos:end="2173:28"><operator pos:start="2173:17" pos:end="2173:17">!</operator><name pos:start="2173:18" pos:end="2173:28">sse_fn_eppi</name></expr>)</condition> <block pos:start="2173:31" pos:end="2177:13">{<block_content pos:start="2175:17" pos:end="2175:32">

                <goto pos:start="2175:17" pos:end="2175:32">goto <name pos:start="2175:22" pos:end="2175:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="2179:13" pos:end="2181:32"><if pos:start="2179:13" pos:end="2181:32">if <condition pos:start="2179:16" pos:end="2179:69">(<expr pos:start="2179:17" pos:end="2179:68"><operator pos:start="2179:17" pos:end="2179:17">!</operator><operator pos:start="2179:18" pos:end="2179:18">(</operator><name pos:start="2179:19" pos:end="2179:39"><name pos:start="2179:19" pos:end="2179:19">s</name><operator pos:start="2179:20" pos:end="2179:21">-&gt;</operator><name pos:start="2179:22" pos:end="2179:39">cpuid_ext_features</name></name> <operator pos:start="2179:41" pos:end="2179:41">&amp;</operator> <name pos:start="2179:43" pos:end="2179:58"><name pos:start="2179:43" pos:end="2179:55">sse_op_table7</name><index pos:start="2179:56" pos:end="2179:58">[<expr pos:start="2179:57" pos:end="2179:57"><name pos:start="2179:57" pos:end="2179:57">b</name></expr>]</index></name><operator pos:start="2179:59" pos:end="2179:59">.</operator><name pos:start="2179:60" pos:end="2179:67">ext_mask</name><operator pos:start="2179:68" pos:end="2179:68">)</operator></expr>)</condition><block type="pseudo" pos:start="2181:17" pos:end="2181:32"><block_content pos:start="2181:17" pos:end="2181:32">

                <goto pos:start="2181:17" pos:end="2181:32">goto <name pos:start="2181:22" pos:end="2181:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>



            <if_stmt pos:start="2185:13" pos:end="2451:13"><if pos:start="2185:13" pos:end="2451:13">if <condition pos:start="2185:16" pos:end="2185:43">(<expr pos:start="2185:17" pos:end="2185:42"><name pos:start="2185:17" pos:end="2185:27">sse_fn_eppi</name> <operator pos:start="2185:29" pos:end="2185:30">==</operator> <name pos:start="2185:32" pos:end="2185:42">SSE_SPECIAL</name></expr>)</condition> <block pos:start="2185:45" pos:end="2451:13">{<block_content pos:start="2187:17" pos:end="2449:23">

                <expr_stmt pos:start="2187:17" pos:end="2187:40"><expr pos:start="2187:17" pos:end="2187:39"><name pos:start="2187:17" pos:end="2187:18">ot</name> <operator pos:start="2187:20" pos:end="2187:20">=</operator> <call pos:start="2187:22" pos:end="2187:39"><name pos:start="2187:22" pos:end="2187:29">mo_64_32</name><argument_list pos:start="2187:30" pos:end="2187:39">(<argument pos:start="2187:31" pos:end="2187:38"><expr pos:start="2187:31" pos:end="2187:38"><name pos:start="2187:31" pos:end="2187:38"><name pos:start="2187:31" pos:end="2187:31">s</name><operator pos:start="2187:32" pos:end="2187:33">-&gt;</operator><name pos:start="2187:34" pos:end="2187:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2189:17" pos:end="2189:44"><expr pos:start="2189:17" pos:end="2189:43"><name pos:start="2189:17" pos:end="2189:18">rm</name> <operator pos:start="2189:20" pos:end="2189:20">=</operator> <operator pos:start="2189:22" pos:end="2189:22">(</operator><name pos:start="2189:23" pos:end="2189:27">modrm</name> <operator pos:start="2189:29" pos:end="2189:29">&amp;</operator> <literal type="number" pos:start="2189:31" pos:end="2189:31">7</literal><operator pos:start="2189:32" pos:end="2189:32">)</operator> <operator pos:start="2189:34" pos:end="2189:34">|</operator> <call pos:start="2189:36" pos:end="2189:43"><name pos:start="2189:36" pos:end="2189:40">REX_B</name><argument_list pos:start="2189:41" pos:end="2189:43">(<argument pos:start="2189:42" pos:end="2189:42"><expr pos:start="2189:42" pos:end="2189:42"><name pos:start="2189:42" pos:end="2189:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2191:17" pos:end="2193:49"><if pos:start="2191:17" pos:end="2193:49">if <condition pos:start="2191:20" pos:end="2191:29">(<expr pos:start="2191:21" pos:end="2191:28"><name pos:start="2191:21" pos:end="2191:23">mod</name> <operator pos:start="2191:25" pos:end="2191:26">!=</operator> <literal type="number" pos:start="2191:28" pos:end="2191:28">3</literal></expr>)</condition><block type="pseudo" pos:start="2193:21" pos:end="2193:49"><block_content pos:start="2193:21" pos:end="2193:49">

                    <expr_stmt pos:start="2193:21" pos:end="2193:49"><expr pos:start="2193:21" pos:end="2193:48"><call pos:start="2193:21" pos:end="2193:48"><name pos:start="2193:21" pos:end="2193:33">gen_lea_modrm</name><argument_list pos:start="2193:34" pos:end="2193:48">(<argument pos:start="2193:35" pos:end="2193:37"><expr pos:start="2193:35" pos:end="2193:37"><name pos:start="2193:35" pos:end="2193:37">env</name></expr></argument>, <argument pos:start="2193:40" pos:end="2193:40"><expr pos:start="2193:40" pos:end="2193:40"><name pos:start="2193:40" pos:end="2193:40">s</name></expr></argument>, <argument pos:start="2193:43" pos:end="2193:47"><expr pos:start="2193:43" pos:end="2193:47"><name pos:start="2193:43" pos:end="2193:47">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="2195:17" pos:end="2195:49"><expr pos:start="2195:17" pos:end="2195:48"><name pos:start="2195:17" pos:end="2195:19">reg</name> <operator pos:start="2195:21" pos:end="2195:21">=</operator> <operator pos:start="2195:23" pos:end="2195:23">(</operator><operator pos:start="2195:24" pos:end="2195:24">(</operator><name pos:start="2195:25" pos:end="2195:29">modrm</name> <operator pos:start="2195:31" pos:end="2195:32">&gt;&gt;</operator> <literal type="number" pos:start="2195:34" pos:end="2195:34">3</literal><operator pos:start="2195:35" pos:end="2195:35">)</operator> <operator pos:start="2195:37" pos:end="2195:37">&amp;</operator> <literal type="number" pos:start="2195:39" pos:end="2195:39">7</literal><operator pos:start="2195:40" pos:end="2195:40">)</operator> <operator pos:start="2195:42" pos:end="2195:42">|</operator> <name pos:start="2195:44" pos:end="2195:48">rex_r</name></expr>;</expr_stmt>

                <expr_stmt pos:start="2197:17" pos:end="2197:50"><expr pos:start="2197:17" pos:end="2197:49"><name pos:start="2197:17" pos:end="2197:19">val</name> <operator pos:start="2197:21" pos:end="2197:21">=</operator> <call pos:start="2197:23" pos:end="2197:49"><name pos:start="2197:23" pos:end="2197:35">cpu_ldub_code</name><argument_list pos:start="2197:36" pos:end="2197:49">(<argument pos:start="2197:37" pos:end="2197:39"><expr pos:start="2197:37" pos:end="2197:39"><name pos:start="2197:37" pos:end="2197:39">env</name></expr></argument>, <argument pos:start="2197:42" pos:end="2197:48"><expr pos:start="2197:42" pos:end="2197:48"><name pos:start="2197:42" pos:end="2197:46"><name pos:start="2197:42" pos:end="2197:42">s</name><operator pos:start="2197:43" pos:end="2197:44">-&gt;</operator><name pos:start="2197:45" pos:end="2197:46">pc</name></name><operator pos:start="2197:47" pos:end="2197:48">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="2199:17" pos:end="2447:17">switch <condition pos:start="2199:24" pos:end="2199:26">(<expr pos:start="2199:25" pos:end="2199:25"><name pos:start="2199:25" pos:end="2199:25">b</name></expr>)</condition> <block pos:start="2199:28" pos:end="2447:17">{<block_content pos:start="2201:17" pos:end="2445:26">

                <case pos:start="2201:17" pos:end="2201:26">case <expr pos:start="2201:22" pos:end="2201:25"><literal type="number" pos:start="2201:22" pos:end="2201:25">0x14</literal></expr>:</case> <comment type="block" pos:start="2201:28" pos:end="2201:39">/* pextrb */</comment>

                    <expr_stmt pos:start="2203:21" pos:end="2205:76"><expr pos:start="2203:21" pos:end="2205:75"><call pos:start="2203:21" pos:end="2205:75"><name pos:start="2203:21" pos:end="2203:35">tcg_gen_ld8u_tl</name><argument_list pos:start="2203:36" pos:end="2205:75">(<argument pos:start="2203:37" pos:end="2203:44"><expr pos:start="2203:37" pos:end="2203:44"><name pos:start="2203:37" pos:end="2203:44"><name pos:start="2203:37" pos:end="2203:41">cpu_T</name><index pos:start="2203:42" pos:end="2203:44">[<expr pos:start="2203:43" pos:end="2203:43"><literal type="number" pos:start="2203:43" pos:end="2203:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2203:47" pos:end="2203:53"><expr pos:start="2203:47" pos:end="2203:53"><name pos:start="2203:47" pos:end="2203:53">cpu_env</name></expr></argument>, <argument pos:start="2203:56" pos:end="2205:74"><expr pos:start="2203:56" pos:end="2205:74"><call pos:start="2203:56" pos:end="2205:74"><name pos:start="2203:56" pos:end="2203:63">offsetof</name><argument_list pos:start="2203:64" pos:end="2205:74">(<argument pos:start="2203:65" pos:end="2203:75"><expr pos:start="2203:65" pos:end="2203:75"><name pos:start="2203:65" pos:end="2203:75">CPUX86State</name></expr></argument>,

                                            <argument pos:start="2205:45" pos:end="2205:73"><expr pos:start="2205:45" pos:end="2205:73"><name pos:start="2205:45" pos:end="2205:57"><name pos:start="2205:45" pos:end="2205:52">xmm_regs</name><index pos:start="2205:53" pos:end="2205:57">[<expr pos:start="2205:54" pos:end="2205:56"><name pos:start="2205:54" pos:end="2205:56">reg</name></expr>]</index></name><operator pos:start="2205:58" pos:end="2205:58">.</operator><call pos:start="2205:59" pos:end="2205:73"><name pos:start="2205:59" pos:end="2205:63">XMM_B</name><argument_list pos:start="2205:64" pos:end="2205:73">(<argument pos:start="2205:65" pos:end="2205:72"><expr pos:start="2205:65" pos:end="2205:72"><name pos:start="2205:65" pos:end="2205:67">val</name> <operator pos:start="2205:69" pos:end="2205:69">&amp;</operator> <literal type="number" pos:start="2205:71" pos:end="2205:72">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2207:21" pos:end="2217:21"><if pos:start="2207:21" pos:end="2211:21">if <condition pos:start="2207:24" pos:end="2207:33">(<expr pos:start="2207:25" pos:end="2207:32"><name pos:start="2207:25" pos:end="2207:27">mod</name> <operator pos:start="2207:29" pos:end="2207:30">==</operator> <literal type="number" pos:start="2207:32" pos:end="2207:32">3</literal></expr>)</condition> <block pos:start="2207:35" pos:end="2211:21">{<block_content pos:start="2209:25" pos:end="2209:59">

                        <expr_stmt pos:start="2209:25" pos:end="2209:59"><expr pos:start="2209:25" pos:end="2209:58"><call pos:start="2209:25" pos:end="2209:58"><name pos:start="2209:25" pos:end="2209:40">gen_op_mov_reg_v</name><argument_list pos:start="2209:41" pos:end="2209:58">(<argument pos:start="2209:42" pos:end="2209:43"><expr pos:start="2209:42" pos:end="2209:43"><name pos:start="2209:42" pos:end="2209:43">ot</name></expr></argument>, <argument pos:start="2209:46" pos:end="2209:47"><expr pos:start="2209:46" pos:end="2209:47"><name pos:start="2209:46" pos:end="2209:47">rm</name></expr></argument>, <argument pos:start="2209:50" pos:end="2209:57"><expr pos:start="2209:50" pos:end="2209:57"><name pos:start="2209:50" pos:end="2209:57"><name pos:start="2209:50" pos:end="2209:54">cpu_T</name><index pos:start="2209:55" pos:end="2209:57">[<expr pos:start="2209:56" pos:end="2209:56"><literal type="number" pos:start="2209:56" pos:end="2209:56">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2211:23" pos:end="2217:21">else <block pos:start="2211:28" pos:end="2217:21">{<block_content pos:start="2213:25" pos:end="2215:64">

                        <expr_stmt pos:start="2213:25" pos:end="2215:64"><expr pos:start="2213:25" pos:end="2215:63"><call pos:start="2213:25" pos:end="2215:63"><name pos:start="2213:25" pos:end="2213:42">tcg_gen_qemu_st_tl</name><argument_list pos:start="2213:43" pos:end="2215:63">(<argument pos:start="2213:44" pos:end="2213:51"><expr pos:start="2213:44" pos:end="2213:51"><name pos:start="2213:44" pos:end="2213:51"><name pos:start="2213:44" pos:end="2213:48">cpu_T</name><index pos:start="2213:49" pos:end="2213:51">[<expr pos:start="2213:50" pos:end="2213:50"><literal type="number" pos:start="2213:50" pos:end="2213:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2213:54" pos:end="2213:59"><expr pos:start="2213:54" pos:end="2213:59"><name pos:start="2213:54" pos:end="2213:59">cpu_A0</name></expr></argument>,

                                           <argument pos:start="2215:44" pos:end="2215:55"><expr pos:start="2215:44" pos:end="2215:55"><name pos:start="2215:44" pos:end="2215:55"><name pos:start="2215:44" pos:end="2215:44">s</name><operator pos:start="2215:45" pos:end="2215:46">-&gt;</operator><name pos:start="2215:47" pos:end="2215:55">mem_index</name></name></expr></argument>, <argument pos:start="2215:58" pos:end="2215:62"><expr pos:start="2215:58" pos:end="2215:62"><name pos:start="2215:58" pos:end="2215:62">MO_UB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="2219:21" pos:end="2219:26">break;</break>

                <case pos:start="2221:17" pos:end="2221:26">case <expr pos:start="2221:22" pos:end="2221:25"><literal type="number" pos:start="2221:22" pos:end="2221:25">0x15</literal></expr>:</case> <comment type="block" pos:start="2221:28" pos:end="2221:39">/* pextrw */</comment>

                    <expr_stmt pos:start="2223:21" pos:end="2225:75"><expr pos:start="2223:21" pos:end="2225:74"><call pos:start="2223:21" pos:end="2225:74"><name pos:start="2223:21" pos:end="2223:36">tcg_gen_ld16u_tl</name><argument_list pos:start="2223:37" pos:end="2225:74">(<argument pos:start="2223:38" pos:end="2223:45"><expr pos:start="2223:38" pos:end="2223:45"><name pos:start="2223:38" pos:end="2223:45"><name pos:start="2223:38" pos:end="2223:42">cpu_T</name><index pos:start="2223:43" pos:end="2223:45">[<expr pos:start="2223:44" pos:end="2223:44"><literal type="number" pos:start="2223:44" pos:end="2223:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2223:48" pos:end="2223:54"><expr pos:start="2223:48" pos:end="2223:54"><name pos:start="2223:48" pos:end="2223:54">cpu_env</name></expr></argument>, <argument pos:start="2223:57" pos:end="2225:73"><expr pos:start="2223:57" pos:end="2225:73"><call pos:start="2223:57" pos:end="2225:73"><name pos:start="2223:57" pos:end="2223:64">offsetof</name><argument_list pos:start="2223:65" pos:end="2225:73">(<argument pos:start="2223:66" pos:end="2223:76"><expr pos:start="2223:66" pos:end="2223:76"><name pos:start="2223:66" pos:end="2223:76">CPUX86State</name></expr></argument>,

                                            <argument pos:start="2225:45" pos:end="2225:72"><expr pos:start="2225:45" pos:end="2225:72"><name pos:start="2225:45" pos:end="2225:57"><name pos:start="2225:45" pos:end="2225:52">xmm_regs</name><index pos:start="2225:53" pos:end="2225:57">[<expr pos:start="2225:54" pos:end="2225:56"><name pos:start="2225:54" pos:end="2225:56">reg</name></expr>]</index></name><operator pos:start="2225:58" pos:end="2225:58">.</operator><call pos:start="2225:59" pos:end="2225:72"><name pos:start="2225:59" pos:end="2225:63">XMM_W</name><argument_list pos:start="2225:64" pos:end="2225:72">(<argument pos:start="2225:65" pos:end="2225:71"><expr pos:start="2225:65" pos:end="2225:71"><name pos:start="2225:65" pos:end="2225:67">val</name> <operator pos:start="2225:69" pos:end="2225:69">&amp;</operator> <literal type="number" pos:start="2225:71" pos:end="2225:71">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2227:21" pos:end="2237:21"><if pos:start="2227:21" pos:end="2231:21">if <condition pos:start="2227:24" pos:end="2227:33">(<expr pos:start="2227:25" pos:end="2227:32"><name pos:start="2227:25" pos:end="2227:27">mod</name> <operator pos:start="2227:29" pos:end="2227:30">==</operator> <literal type="number" pos:start="2227:32" pos:end="2227:32">3</literal></expr>)</condition> <block pos:start="2227:35" pos:end="2231:21">{<block_content pos:start="2229:25" pos:end="2229:59">

                        <expr_stmt pos:start="2229:25" pos:end="2229:59"><expr pos:start="2229:25" pos:end="2229:58"><call pos:start="2229:25" pos:end="2229:58"><name pos:start="2229:25" pos:end="2229:40">gen_op_mov_reg_v</name><argument_list pos:start="2229:41" pos:end="2229:58">(<argument pos:start="2229:42" pos:end="2229:43"><expr pos:start="2229:42" pos:end="2229:43"><name pos:start="2229:42" pos:end="2229:43">ot</name></expr></argument>, <argument pos:start="2229:46" pos:end="2229:47"><expr pos:start="2229:46" pos:end="2229:47"><name pos:start="2229:46" pos:end="2229:47">rm</name></expr></argument>, <argument pos:start="2229:50" pos:end="2229:57"><expr pos:start="2229:50" pos:end="2229:57"><name pos:start="2229:50" pos:end="2229:57"><name pos:start="2229:50" pos:end="2229:54">cpu_T</name><index pos:start="2229:55" pos:end="2229:57">[<expr pos:start="2229:56" pos:end="2229:56"><literal type="number" pos:start="2229:56" pos:end="2229:56">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2231:23" pos:end="2237:21">else <block pos:start="2231:28" pos:end="2237:21">{<block_content pos:start="2233:25" pos:end="2235:66">

                        <expr_stmt pos:start="2233:25" pos:end="2235:66"><expr pos:start="2233:25" pos:end="2235:65"><call pos:start="2233:25" pos:end="2235:65"><name pos:start="2233:25" pos:end="2233:42">tcg_gen_qemu_st_tl</name><argument_list pos:start="2233:43" pos:end="2235:65">(<argument pos:start="2233:44" pos:end="2233:51"><expr pos:start="2233:44" pos:end="2233:51"><name pos:start="2233:44" pos:end="2233:51"><name pos:start="2233:44" pos:end="2233:48">cpu_T</name><index pos:start="2233:49" pos:end="2233:51">[<expr pos:start="2233:50" pos:end="2233:50"><literal type="number" pos:start="2233:50" pos:end="2233:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2233:54" pos:end="2233:59"><expr pos:start="2233:54" pos:end="2233:59"><name pos:start="2233:54" pos:end="2233:59">cpu_A0</name></expr></argument>,

                                           <argument pos:start="2235:44" pos:end="2235:55"><expr pos:start="2235:44" pos:end="2235:55"><name pos:start="2235:44" pos:end="2235:55"><name pos:start="2235:44" pos:end="2235:44">s</name><operator pos:start="2235:45" pos:end="2235:46">-&gt;</operator><name pos:start="2235:47" pos:end="2235:55">mem_index</name></name></expr></argument>, <argument pos:start="2235:58" pos:end="2235:64"><expr pos:start="2235:58" pos:end="2235:64"><name pos:start="2235:58" pos:end="2235:64">MO_LEUW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="2239:21" pos:end="2239:26">break;</break>

                <case pos:start="2241:17" pos:end="2241:26">case <expr pos:start="2241:22" pos:end="2241:25"><literal type="number" pos:start="2241:22" pos:end="2241:25">0x16</literal></expr>:</case>

                    <if_stmt pos:start="2243:21" pos:end="2291:21"><if pos:start="2243:21" pos:end="2263:21">if <condition pos:start="2243:24" pos:end="2243:36">(<expr pos:start="2243:25" pos:end="2243:35"><name pos:start="2243:25" pos:end="2243:26">ot</name> <operator pos:start="2243:28" pos:end="2243:29">==</operator> <name pos:start="2243:31" pos:end="2243:35">MO_32</name></expr>)</condition> <block pos:start="2243:38" pos:end="2263:21">{<block_content pos:start="2245:25" pos:end="2261:25"> <comment type="block" pos:start="2243:40" pos:end="2243:51">/* pextrd */</comment>

                        <expr_stmt pos:start="2245:25" pos:end="2249:79"><expr pos:start="2245:25" pos:end="2249:78"><call pos:start="2245:25" pos:end="2249:78"><name pos:start="2245:25" pos:end="2245:38">tcg_gen_ld_i32</name><argument_list pos:start="2245:39" pos:end="2249:78">(<argument pos:start="2245:40" pos:end="2245:51"><expr pos:start="2245:40" pos:end="2245:51"><name pos:start="2245:40" pos:end="2245:51">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2245:54" pos:end="2245:60"><expr pos:start="2245:54" pos:end="2245:60"><name pos:start="2245:54" pos:end="2245:60">cpu_env</name></expr></argument>,

                                        <argument pos:start="2247:41" pos:end="2249:77"><expr pos:start="2247:41" pos:end="2249:77"><call pos:start="2247:41" pos:end="2249:77"><name pos:start="2247:41" pos:end="2247:48">offsetof</name><argument_list pos:start="2247:49" pos:end="2249:77">(<argument pos:start="2247:50" pos:end="2247:60"><expr pos:start="2247:50" pos:end="2247:60"><name pos:start="2247:50" pos:end="2247:60">CPUX86State</name></expr></argument>,

                                                <argument pos:start="2249:49" pos:end="2249:76"><expr pos:start="2249:49" pos:end="2249:76"><name pos:start="2249:49" pos:end="2249:61"><name pos:start="2249:49" pos:end="2249:56">xmm_regs</name><index pos:start="2249:57" pos:end="2249:61">[<expr pos:start="2249:58" pos:end="2249:60"><name pos:start="2249:58" pos:end="2249:60">reg</name></expr>]</index></name><operator pos:start="2249:62" pos:end="2249:62">.</operator><call pos:start="2249:63" pos:end="2249:76"><name pos:start="2249:63" pos:end="2249:67">XMM_L</name><argument_list pos:start="2249:68" pos:end="2249:76">(<argument pos:start="2249:69" pos:end="2249:75"><expr pos:start="2249:69" pos:end="2249:75"><name pos:start="2249:69" pos:end="2249:71">val</name> <operator pos:start="2249:73" pos:end="2249:73">&amp;</operator> <literal type="number" pos:start="2249:75" pos:end="2249:75">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2251:25" pos:end="2261:25"><if pos:start="2251:25" pos:end="2255:25">if <condition pos:start="2251:28" pos:end="2251:37">(<expr pos:start="2251:29" pos:end="2251:36"><name pos:start="2251:29" pos:end="2251:31">mod</name> <operator pos:start="2251:33" pos:end="2251:34">==</operator> <literal type="number" pos:start="2251:36" pos:end="2251:36">3</literal></expr>)</condition> <block pos:start="2251:39" pos:end="2255:25">{<block_content pos:start="2253:29" pos:end="2253:76">

                            <expr_stmt pos:start="2253:29" pos:end="2253:76"><expr pos:start="2253:29" pos:end="2253:75"><call pos:start="2253:29" pos:end="2253:75"><name pos:start="2253:29" pos:end="2253:47">tcg_gen_extu_i32_tl</name><argument_list pos:start="2253:48" pos:end="2253:75">(<argument pos:start="2253:49" pos:end="2253:60"><expr pos:start="2253:49" pos:end="2253:60"><name pos:start="2253:49" pos:end="2253:60"><name pos:start="2253:49" pos:end="2253:56">cpu_regs</name><index pos:start="2253:57" pos:end="2253:60">[<expr pos:start="2253:58" pos:end="2253:59"><name pos:start="2253:58" pos:end="2253:59">rm</name></expr>]</index></name></expr></argument>, <argument pos:start="2253:63" pos:end="2253:74"><expr pos:start="2253:63" pos:end="2253:74"><name pos:start="2253:63" pos:end="2253:74">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2255:27" pos:end="2261:25">else <block pos:start="2255:32" pos:end="2261:25">{<block_content pos:start="2257:29" pos:end="2259:71">

                            <expr_stmt pos:start="2257:29" pos:end="2259:71"><expr pos:start="2257:29" pos:end="2259:70"><call pos:start="2257:29" pos:end="2259:70"><name pos:start="2257:29" pos:end="2257:47">tcg_gen_qemu_st_i32</name><argument_list pos:start="2257:48" pos:end="2259:70">(<argument pos:start="2257:49" pos:end="2257:60"><expr pos:start="2257:49" pos:end="2257:60"><name pos:start="2257:49" pos:end="2257:60">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2257:63" pos:end="2257:68"><expr pos:start="2257:63" pos:end="2257:68"><name pos:start="2257:63" pos:end="2257:68">cpu_A0</name></expr></argument>,

                                                <argument pos:start="2259:49" pos:end="2259:60"><expr pos:start="2259:49" pos:end="2259:60"><name pos:start="2259:49" pos:end="2259:60"><name pos:start="2259:49" pos:end="2259:49">s</name><operator pos:start="2259:50" pos:end="2259:51">-&gt;</operator><name pos:start="2259:52" pos:end="2259:60">mem_index</name></name></expr></argument>, <argument pos:start="2259:63" pos:end="2259:69"><expr pos:start="2259:63" pos:end="2259:69"><name pos:start="2259:63" pos:end="2259:69">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="2263:23" pos:end="2291:21">else <block pos:start="2263:28" pos:end="2291:21">{<block_content pos:start="2267:25" pos:end="2290:0"> <comment type="block" pos:start="2263:30" pos:end="2263:41">/* pextrq */</comment>

<cpp:ifdef pos:start="2265:1" pos:end="2265:20">#<cpp:directive pos:start="2265:2" pos:end="2265:6">ifdef</cpp:directive> <name pos:start="2265:8" pos:end="2265:20">TARGET_X86_64</name></cpp:ifdef>

                        <expr_stmt pos:start="2267:25" pos:end="2271:79"><expr pos:start="2267:25" pos:end="2271:78"><call pos:start="2267:25" pos:end="2271:78"><name pos:start="2267:25" pos:end="2267:38">tcg_gen_ld_i64</name><argument_list pos:start="2267:39" pos:end="2271:78">(<argument pos:start="2267:40" pos:end="2267:51"><expr pos:start="2267:40" pos:end="2267:51"><name pos:start="2267:40" pos:end="2267:51">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2267:54" pos:end="2267:60"><expr pos:start="2267:54" pos:end="2267:60"><name pos:start="2267:54" pos:end="2267:60">cpu_env</name></expr></argument>,

                                        <argument pos:start="2269:41" pos:end="2271:77"><expr pos:start="2269:41" pos:end="2271:77"><call pos:start="2269:41" pos:end="2271:77"><name pos:start="2269:41" pos:end="2269:48">offsetof</name><argument_list pos:start="2269:49" pos:end="2271:77">(<argument pos:start="2269:50" pos:end="2269:60"><expr pos:start="2269:50" pos:end="2269:60"><name pos:start="2269:50" pos:end="2269:60">CPUX86State</name></expr></argument>,

                                                <argument pos:start="2271:49" pos:end="2271:76"><expr pos:start="2271:49" pos:end="2271:76"><name pos:start="2271:49" pos:end="2271:61"><name pos:start="2271:49" pos:end="2271:56">xmm_regs</name><index pos:start="2271:57" pos:end="2271:61">[<expr pos:start="2271:58" pos:end="2271:60"><name pos:start="2271:58" pos:end="2271:60">reg</name></expr>]</index></name><operator pos:start="2271:62" pos:end="2271:62">.</operator><call pos:start="2271:63" pos:end="2271:76"><name pos:start="2271:63" pos:end="2271:67">XMM_Q</name><argument_list pos:start="2271:68" pos:end="2271:76">(<argument pos:start="2271:69" pos:end="2271:75"><expr pos:start="2271:69" pos:end="2271:75"><name pos:start="2271:69" pos:end="2271:71">val</name> <operator pos:start="2271:73" pos:end="2271:73">&amp;</operator> <literal type="number" pos:start="2271:75" pos:end="2271:75">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2273:25" pos:end="2286:0"><if pos:start="2273:25" pos:end="2277:25">if <condition pos:start="2273:28" pos:end="2273:37">(<expr pos:start="2273:29" pos:end="2273:36"><name pos:start="2273:29" pos:end="2273:31">mod</name> <operator pos:start="2273:33" pos:end="2273:34">==</operator> <literal type="number" pos:start="2273:36" pos:end="2273:36">3</literal></expr>)</condition> <block pos:start="2273:39" pos:end="2277:25">{<block_content pos:start="2275:29" pos:end="2275:72">

                            <expr_stmt pos:start="2275:29" pos:end="2275:72"><expr pos:start="2275:29" pos:end="2275:71"><call pos:start="2275:29" pos:end="2275:71"><name pos:start="2275:29" pos:end="2275:43">tcg_gen_mov_i64</name><argument_list pos:start="2275:44" pos:end="2275:71">(<argument pos:start="2275:45" pos:end="2275:56"><expr pos:start="2275:45" pos:end="2275:56"><name pos:start="2275:45" pos:end="2275:56"><name pos:start="2275:45" pos:end="2275:52">cpu_regs</name><index pos:start="2275:53" pos:end="2275:56">[<expr pos:start="2275:54" pos:end="2275:55"><name pos:start="2275:54" pos:end="2275:55">rm</name></expr>]</index></name></expr></argument>, <argument pos:start="2275:59" pos:end="2275:70"><expr pos:start="2275:59" pos:end="2275:70"><name pos:start="2275:59" pos:end="2275:70">cpu_tmp1_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2277:27" pos:end="2286:0">else <block pos:start="2277:32" pos:end="2286:0">{<block_content pos:start="2279:29" pos:end="2281:70">

                            <expr_stmt pos:start="2279:29" pos:end="2281:70"><expr pos:start="2279:29" pos:end="2281:69"><call pos:start="2279:29" pos:end="2281:69"><name pos:start="2279:29" pos:end="2279:47">tcg_gen_qemu_st_i64</name><argument_list pos:start="2279:48" pos:end="2281:69">(<argument pos:start="2279:49" pos:end="2279:60"><expr pos:start="2279:49" pos:end="2279:60"><name pos:start="2279:49" pos:end="2279:60">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2279:63" pos:end="2279:68"><expr pos:start="2279:63" pos:end="2279:68"><name pos:start="2279:63" pos:end="2279:68">cpu_A0</name></expr></argument>,

                                                <argument pos:start="2281:49" pos:end="2281:60"><expr pos:start="2281:49" pos:end="2281:60"><name pos:start="2281:49" pos:end="2281:60"><name pos:start="2281:49" pos:end="2281:49">s</name><operator pos:start="2281:50" pos:end="2281:51">-&gt;</operator><name pos:start="2281:52" pos:end="2281:60">mem_index</name></name></expr></argument>, <argument pos:start="2281:63" pos:end="2281:68"><expr pos:start="2281:63" pos:end="2281:68"><name pos:start="2281:63" pos:end="2281:68">MO_LEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

<cpp:else pos:start="2285:1" pos:end="2285:5">#<cpp:directive pos:start="2285:2" pos:end="2285:5">else</cpp:directive></cpp:else>

                        <goto pos:start="2287:25" pos:end="2290:0">goto <name pos:start="2287:30" pos:end="2287:39">illegal_op</name>;</goto>

<cpp:endif pos:start="2289:1" pos:end="2289:6">#<cpp:directive pos:start="2289:2" pos:end="2289:6">endif</cpp:directive></cpp:endif>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="2293:21" pos:end="2293:26">break;</break>

                <case pos:start="2295:17" pos:end="2295:26">case <expr pos:start="2295:22" pos:end="2295:25"><literal type="number" pos:start="2295:22" pos:end="2295:25">0x17</literal></expr>:</case> <comment type="block" pos:start="2295:28" pos:end="2295:42">/* extractps */</comment>

                    <expr_stmt pos:start="2297:21" pos:end="2299:75"><expr pos:start="2297:21" pos:end="2299:74"><call pos:start="2297:21" pos:end="2299:74"><name pos:start="2297:21" pos:end="2297:36">tcg_gen_ld32u_tl</name><argument_list pos:start="2297:37" pos:end="2299:74">(<argument pos:start="2297:38" pos:end="2297:45"><expr pos:start="2297:38" pos:end="2297:45"><name pos:start="2297:38" pos:end="2297:45"><name pos:start="2297:38" pos:end="2297:42">cpu_T</name><index pos:start="2297:43" pos:end="2297:45">[<expr pos:start="2297:44" pos:end="2297:44"><literal type="number" pos:start="2297:44" pos:end="2297:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2297:48" pos:end="2297:54"><expr pos:start="2297:48" pos:end="2297:54"><name pos:start="2297:48" pos:end="2297:54">cpu_env</name></expr></argument>, <argument pos:start="2297:57" pos:end="2299:73"><expr pos:start="2297:57" pos:end="2299:73"><call pos:start="2297:57" pos:end="2299:73"><name pos:start="2297:57" pos:end="2297:64">offsetof</name><argument_list pos:start="2297:65" pos:end="2299:73">(<argument pos:start="2297:66" pos:end="2297:76"><expr pos:start="2297:66" pos:end="2297:76"><name pos:start="2297:66" pos:end="2297:76">CPUX86State</name></expr></argument>,

                                            <argument pos:start="2299:45" pos:end="2299:72"><expr pos:start="2299:45" pos:end="2299:72"><name pos:start="2299:45" pos:end="2299:57"><name pos:start="2299:45" pos:end="2299:52">xmm_regs</name><index pos:start="2299:53" pos:end="2299:57">[<expr pos:start="2299:54" pos:end="2299:56"><name pos:start="2299:54" pos:end="2299:56">reg</name></expr>]</index></name><operator pos:start="2299:58" pos:end="2299:58">.</operator><call pos:start="2299:59" pos:end="2299:72"><name pos:start="2299:59" pos:end="2299:63">XMM_L</name><argument_list pos:start="2299:64" pos:end="2299:72">(<argument pos:start="2299:65" pos:end="2299:71"><expr pos:start="2299:65" pos:end="2299:71"><name pos:start="2299:65" pos:end="2299:67">val</name> <operator pos:start="2299:69" pos:end="2299:69">&amp;</operator> <literal type="number" pos:start="2299:71" pos:end="2299:71">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2301:21" pos:end="2311:21"><if pos:start="2301:21" pos:end="2305:21">if <condition pos:start="2301:24" pos:end="2301:33">(<expr pos:start="2301:25" pos:end="2301:32"><name pos:start="2301:25" pos:end="2301:27">mod</name> <operator pos:start="2301:29" pos:end="2301:30">==</operator> <literal type="number" pos:start="2301:32" pos:end="2301:32">3</literal></expr>)</condition> <block pos:start="2301:35" pos:end="2305:21">{<block_content pos:start="2303:25" pos:end="2303:59">

                        <expr_stmt pos:start="2303:25" pos:end="2303:59"><expr pos:start="2303:25" pos:end="2303:58"><call pos:start="2303:25" pos:end="2303:58"><name pos:start="2303:25" pos:end="2303:40">gen_op_mov_reg_v</name><argument_list pos:start="2303:41" pos:end="2303:58">(<argument pos:start="2303:42" pos:end="2303:43"><expr pos:start="2303:42" pos:end="2303:43"><name pos:start="2303:42" pos:end="2303:43">ot</name></expr></argument>, <argument pos:start="2303:46" pos:end="2303:47"><expr pos:start="2303:46" pos:end="2303:47"><name pos:start="2303:46" pos:end="2303:47">rm</name></expr></argument>, <argument pos:start="2303:50" pos:end="2303:57"><expr pos:start="2303:50" pos:end="2303:57"><name pos:start="2303:50" pos:end="2303:57"><name pos:start="2303:50" pos:end="2303:54">cpu_T</name><index pos:start="2303:55" pos:end="2303:57">[<expr pos:start="2303:56" pos:end="2303:56"><literal type="number" pos:start="2303:56" pos:end="2303:56">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2305:23" pos:end="2311:21">else <block pos:start="2305:28" pos:end="2311:21">{<block_content pos:start="2307:25" pos:end="2309:66">

                        <expr_stmt pos:start="2307:25" pos:end="2309:66"><expr pos:start="2307:25" pos:end="2309:65"><call pos:start="2307:25" pos:end="2309:65"><name pos:start="2307:25" pos:end="2307:42">tcg_gen_qemu_st_tl</name><argument_list pos:start="2307:43" pos:end="2309:65">(<argument pos:start="2307:44" pos:end="2307:51"><expr pos:start="2307:44" pos:end="2307:51"><name pos:start="2307:44" pos:end="2307:51"><name pos:start="2307:44" pos:end="2307:48">cpu_T</name><index pos:start="2307:49" pos:end="2307:51">[<expr pos:start="2307:50" pos:end="2307:50"><literal type="number" pos:start="2307:50" pos:end="2307:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2307:54" pos:end="2307:59"><expr pos:start="2307:54" pos:end="2307:59"><name pos:start="2307:54" pos:end="2307:59">cpu_A0</name></expr></argument>,

                                           <argument pos:start="2309:44" pos:end="2309:55"><expr pos:start="2309:44" pos:end="2309:55"><name pos:start="2309:44" pos:end="2309:55"><name pos:start="2309:44" pos:end="2309:44">s</name><operator pos:start="2309:45" pos:end="2309:46">-&gt;</operator><name pos:start="2309:47" pos:end="2309:55">mem_index</name></name></expr></argument>, <argument pos:start="2309:58" pos:end="2309:64"><expr pos:start="2309:58" pos:end="2309:64"><name pos:start="2309:58" pos:end="2309:64">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="2313:21" pos:end="2313:26">break;</break>

                <case pos:start="2315:17" pos:end="2315:26">case <expr pos:start="2315:22" pos:end="2315:25"><literal type="number" pos:start="2315:22" pos:end="2315:25">0x20</literal></expr>:</case> <comment type="block" pos:start="2315:28" pos:end="2315:39">/* pinsrb */</comment>

                    <if_stmt pos:start="2317:21" pos:end="2327:21"><if pos:start="2317:21" pos:end="2321:21">if <condition pos:start="2317:24" pos:end="2317:33">(<expr pos:start="2317:25" pos:end="2317:32"><name pos:start="2317:25" pos:end="2317:27">mod</name> <operator pos:start="2317:29" pos:end="2317:30">==</operator> <literal type="number" pos:start="2317:32" pos:end="2317:32">3</literal></expr>)</condition> <block pos:start="2317:35" pos:end="2321:21">{<block_content pos:start="2319:25" pos:end="2319:62">

                        <expr_stmt pos:start="2319:25" pos:end="2319:62"><expr pos:start="2319:25" pos:end="2319:61"><call pos:start="2319:25" pos:end="2319:61"><name pos:start="2319:25" pos:end="2319:40">gen_op_mov_v_reg</name><argument_list pos:start="2319:41" pos:end="2319:61">(<argument pos:start="2319:42" pos:end="2319:46"><expr pos:start="2319:42" pos:end="2319:46"><name pos:start="2319:42" pos:end="2319:46">MO_32</name></expr></argument>, <argument pos:start="2319:49" pos:end="2319:56"><expr pos:start="2319:49" pos:end="2319:56"><name pos:start="2319:49" pos:end="2319:56"><name pos:start="2319:49" pos:end="2319:53">cpu_T</name><index pos:start="2319:54" pos:end="2319:56">[<expr pos:start="2319:55" pos:end="2319:55"><literal type="number" pos:start="2319:55" pos:end="2319:55">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2319:59" pos:end="2319:60"><expr pos:start="2319:59" pos:end="2319:60"><name pos:start="2319:59" pos:end="2319:60">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2321:23" pos:end="2327:21">else <block pos:start="2321:28" pos:end="2327:21">{<block_content pos:start="2323:25" pos:end="2325:64">

                        <expr_stmt pos:start="2323:25" pos:end="2325:64"><expr pos:start="2323:25" pos:end="2325:63"><call pos:start="2323:25" pos:end="2325:63"><name pos:start="2323:25" pos:end="2323:42">tcg_gen_qemu_ld_tl</name><argument_list pos:start="2323:43" pos:end="2325:63">(<argument pos:start="2323:44" pos:end="2323:51"><expr pos:start="2323:44" pos:end="2323:51"><name pos:start="2323:44" pos:end="2323:51"><name pos:start="2323:44" pos:end="2323:48">cpu_T</name><index pos:start="2323:49" pos:end="2323:51">[<expr pos:start="2323:50" pos:end="2323:50"><literal type="number" pos:start="2323:50" pos:end="2323:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2323:54" pos:end="2323:59"><expr pos:start="2323:54" pos:end="2323:59"><name pos:start="2323:54" pos:end="2323:59">cpu_A0</name></expr></argument>,

                                           <argument pos:start="2325:44" pos:end="2325:55"><expr pos:start="2325:44" pos:end="2325:55"><name pos:start="2325:44" pos:end="2325:55"><name pos:start="2325:44" pos:end="2325:44">s</name><operator pos:start="2325:45" pos:end="2325:46">-&gt;</operator><name pos:start="2325:47" pos:end="2325:55">mem_index</name></name></expr></argument>, <argument pos:start="2325:58" pos:end="2325:62"><expr pos:start="2325:58" pos:end="2325:62"><name pos:start="2325:58" pos:end="2325:62">MO_UB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="2329:21" pos:end="2331:76"><expr pos:start="2329:21" pos:end="2331:75"><call pos:start="2329:21" pos:end="2331:75"><name pos:start="2329:21" pos:end="2329:34">tcg_gen_st8_tl</name><argument_list pos:start="2329:35" pos:end="2331:75">(<argument pos:start="2329:36" pos:end="2329:43"><expr pos:start="2329:36" pos:end="2329:43"><name pos:start="2329:36" pos:end="2329:43"><name pos:start="2329:36" pos:end="2329:40">cpu_T</name><index pos:start="2329:41" pos:end="2329:43">[<expr pos:start="2329:42" pos:end="2329:42"><literal type="number" pos:start="2329:42" pos:end="2329:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2329:46" pos:end="2329:52"><expr pos:start="2329:46" pos:end="2329:52"><name pos:start="2329:46" pos:end="2329:52">cpu_env</name></expr></argument>, <argument pos:start="2329:55" pos:end="2331:74"><expr pos:start="2329:55" pos:end="2331:74"><call pos:start="2329:55" pos:end="2331:74"><name pos:start="2329:55" pos:end="2329:62">offsetof</name><argument_list pos:start="2329:63" pos:end="2331:74">(<argument pos:start="2329:64" pos:end="2329:74"><expr pos:start="2329:64" pos:end="2329:74"><name pos:start="2329:64" pos:end="2329:74">CPUX86State</name></expr></argument>,

                                            <argument pos:start="2331:45" pos:end="2331:73"><expr pos:start="2331:45" pos:end="2331:73"><name pos:start="2331:45" pos:end="2331:57"><name pos:start="2331:45" pos:end="2331:52">xmm_regs</name><index pos:start="2331:53" pos:end="2331:57">[<expr pos:start="2331:54" pos:end="2331:56"><name pos:start="2331:54" pos:end="2331:56">reg</name></expr>]</index></name><operator pos:start="2331:58" pos:end="2331:58">.</operator><call pos:start="2331:59" pos:end="2331:73"><name pos:start="2331:59" pos:end="2331:63">XMM_B</name><argument_list pos:start="2331:64" pos:end="2331:73">(<argument pos:start="2331:65" pos:end="2331:72"><expr pos:start="2331:65" pos:end="2331:72"><name pos:start="2331:65" pos:end="2331:67">val</name> <operator pos:start="2331:69" pos:end="2331:69">&amp;</operator> <literal type="number" pos:start="2331:71" pos:end="2331:72">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2333:21" pos:end="2333:26">break;</break>

                <case pos:start="2335:17" pos:end="2335:26">case <expr pos:start="2335:22" pos:end="2335:25"><literal type="number" pos:start="2335:22" pos:end="2335:25">0x21</literal></expr>:</case> <comment type="block" pos:start="2335:28" pos:end="2335:41">/* insertps */</comment>

                    <if_stmt pos:start="2337:21" pos:end="2351:21"><if pos:start="2337:21" pos:end="2345:21">if <condition pos:start="2337:24" pos:end="2337:33">(<expr pos:start="2337:25" pos:end="2337:32"><name pos:start="2337:25" pos:end="2337:27">mod</name> <operator pos:start="2337:29" pos:end="2337:30">==</operator> <literal type="number" pos:start="2337:32" pos:end="2337:32">3</literal></expr>)</condition> <block pos:start="2337:35" pos:end="2345:21">{<block_content pos:start="2339:25" pos:end="2343:73">

                        <expr_stmt pos:start="2339:25" pos:end="2343:73"><expr pos:start="2339:25" pos:end="2343:72"><call pos:start="2339:25" pos:end="2343:72"><name pos:start="2339:25" pos:end="2339:38">tcg_gen_ld_i32</name><argument_list pos:start="2339:39" pos:end="2343:72">(<argument pos:start="2339:40" pos:end="2339:51"><expr pos:start="2339:40" pos:end="2339:51"><name pos:start="2339:40" pos:end="2339:51">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2339:54" pos:end="2339:60"><expr pos:start="2339:54" pos:end="2339:60"><name pos:start="2339:54" pos:end="2339:60">cpu_env</name></expr></argument>,

                                        <argument pos:start="2341:41" pos:end="2343:71"><expr pos:start="2341:41" pos:end="2343:71"><call pos:start="2341:41" pos:end="2343:71"><name pos:start="2341:41" pos:end="2341:48">offsetof</name><argument_list pos:start="2341:49" pos:end="2343:71">(<argument pos:start="2341:50" pos:end="2341:60"><expr pos:start="2341:50" pos:end="2341:60"><name pos:start="2341:50" pos:end="2341:60">CPUX86State</name></expr></argument>,<argument pos:start="2341:62" pos:end="2343:70"><expr pos:start="2341:62" pos:end="2343:70"><name pos:start="2341:62" pos:end="2341:73"><name pos:start="2341:62" pos:end="2341:69">xmm_regs</name><index pos:start="2341:70" pos:end="2341:73">[<expr pos:start="2341:71" pos:end="2341:72"><name pos:start="2341:71" pos:end="2341:72">rm</name></expr>]</index></name>

                                                <operator pos:start="2343:49" pos:end="2343:49">.</operator><call pos:start="2343:50" pos:end="2343:70"><name pos:start="2343:50" pos:end="2343:54">XMM_L</name><argument_list pos:start="2343:55" pos:end="2343:70">(<argument pos:start="2343:56" pos:end="2343:69"><expr pos:start="2343:56" pos:end="2343:69"><operator pos:start="2343:56" pos:end="2343:56">(</operator><name pos:start="2343:57" pos:end="2343:59">val</name> <operator pos:start="2343:61" pos:end="2343:62">&gt;&gt;</operator> <literal type="number" pos:start="2343:64" pos:end="2343:64">6</literal><operator pos:start="2343:65" pos:end="2343:65">)</operator> <operator pos:start="2343:67" pos:end="2343:67">&amp;</operator> <literal type="number" pos:start="2343:69" pos:end="2343:69">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2345:23" pos:end="2351:21">else <block pos:start="2345:28" pos:end="2351:21">{<block_content pos:start="2347:25" pos:end="2349:67">

                        <expr_stmt pos:start="2347:25" pos:end="2349:67"><expr pos:start="2347:25" pos:end="2349:66"><call pos:start="2347:25" pos:end="2349:66"><name pos:start="2347:25" pos:end="2347:43">tcg_gen_qemu_ld_i32</name><argument_list pos:start="2347:44" pos:end="2349:66">(<argument pos:start="2347:45" pos:end="2347:56"><expr pos:start="2347:45" pos:end="2347:56"><name pos:start="2347:45" pos:end="2347:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2347:59" pos:end="2347:64"><expr pos:start="2347:59" pos:end="2347:64"><name pos:start="2347:59" pos:end="2347:64">cpu_A0</name></expr></argument>,

                                            <argument pos:start="2349:45" pos:end="2349:56"><expr pos:start="2349:45" pos:end="2349:56"><name pos:start="2349:45" pos:end="2349:56"><name pos:start="2349:45" pos:end="2349:45">s</name><operator pos:start="2349:46" pos:end="2349:47">-&gt;</operator><name pos:start="2349:48" pos:end="2349:56">mem_index</name></name></expr></argument>, <argument pos:start="2349:59" pos:end="2349:65"><expr pos:start="2349:59" pos:end="2349:65"><name pos:start="2349:59" pos:end="2349:65">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="2353:21" pos:end="2357:69"><expr pos:start="2353:21" pos:end="2357:68"><call pos:start="2353:21" pos:end="2357:68"><name pos:start="2353:21" pos:end="2353:34">tcg_gen_st_i32</name><argument_list pos:start="2353:35" pos:end="2357:68">(<argument pos:start="2353:36" pos:end="2353:47"><expr pos:start="2353:36" pos:end="2353:47"><name pos:start="2353:36" pos:end="2353:47">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2353:50" pos:end="2353:56"><expr pos:start="2353:50" pos:end="2353:56"><name pos:start="2353:50" pos:end="2353:56">cpu_env</name></expr></argument>,

                                    <argument pos:start="2355:37" pos:end="2357:67"><expr pos:start="2355:37" pos:end="2357:67"><call pos:start="2355:37" pos:end="2357:67"><name pos:start="2355:37" pos:end="2355:44">offsetof</name><argument_list pos:start="2355:45" pos:end="2357:67">(<argument pos:start="2355:46" pos:end="2355:56"><expr pos:start="2355:46" pos:end="2355:56"><name pos:start="2355:46" pos:end="2355:56">CPUX86State</name></expr></argument>,<argument pos:start="2355:58" pos:end="2357:66"><expr pos:start="2355:58" pos:end="2357:66"><name pos:start="2355:58" pos:end="2355:70"><name pos:start="2355:58" pos:end="2355:65">xmm_regs</name><index pos:start="2355:66" pos:end="2355:70">[<expr pos:start="2355:67" pos:end="2355:69"><name pos:start="2355:67" pos:end="2355:69">reg</name></expr>]</index></name>

                                            <operator pos:start="2357:45" pos:end="2357:45">.</operator><call pos:start="2357:46" pos:end="2357:66"><name pos:start="2357:46" pos:end="2357:50">XMM_L</name><argument_list pos:start="2357:51" pos:end="2357:66">(<argument pos:start="2357:52" pos:end="2357:65"><expr pos:start="2357:52" pos:end="2357:65"><operator pos:start="2357:52" pos:end="2357:52">(</operator><name pos:start="2357:53" pos:end="2357:55">val</name> <operator pos:start="2357:57" pos:end="2357:58">&gt;&gt;</operator> <literal type="number" pos:start="2357:60" pos:end="2357:60">4</literal><operator pos:start="2357:61" pos:end="2357:61">)</operator> <operator pos:start="2357:63" pos:end="2357:63">&amp;</operator> <literal type="number" pos:start="2357:65" pos:end="2357:65">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2359:21" pos:end="2365:73"><if pos:start="2359:21" pos:end="2365:73">if <condition pos:start="2359:24" pos:end="2359:39">(<expr pos:start="2359:25" pos:end="2359:38"><operator pos:start="2359:25" pos:end="2359:25">(</operator><name pos:start="2359:26" pos:end="2359:28">val</name> <operator pos:start="2359:30" pos:end="2359:31">&gt;&gt;</operator> <literal type="number" pos:start="2359:33" pos:end="2359:33">0</literal><operator pos:start="2359:34" pos:end="2359:34">)</operator> <operator pos:start="2359:36" pos:end="2359:36">&amp;</operator> <literal type="number" pos:start="2359:38" pos:end="2359:38">1</literal></expr>)</condition><block type="pseudo" pos:start="2361:25" pos:end="2365:73"><block_content pos:start="2361:25" pos:end="2365:73">

                        <expr_stmt pos:start="2361:25" pos:end="2365:73"><expr pos:start="2361:25" pos:end="2365:72"><call pos:start="2361:25" pos:end="2365:72"><name pos:start="2361:25" pos:end="2361:38">tcg_gen_st_i32</name><argument_list pos:start="2361:39" pos:end="2365:72">(<argument pos:start="2361:40" pos:end="2361:72"><expr pos:start="2361:40" pos:end="2361:72"><call pos:start="2361:40" pos:end="2361:72"><name pos:start="2361:40" pos:end="2361:52">tcg_const_i32</name><argument_list pos:start="2361:53" pos:end="2361:72">(<argument pos:start="2361:54" pos:end="2361:54"><expr pos:start="2361:54" pos:end="2361:54"><literal type="number" pos:start="2361:54" pos:end="2361:54">0</literal></expr></argument> <comment type="block" pos:start="2361:56" pos:end="2361:71">/*float32_zero*/</comment>)</argument_list></call></expr></argument>,

                                        <argument pos:start="2363:41" pos:end="2363:47"><expr pos:start="2363:41" pos:end="2363:47"><name pos:start="2363:41" pos:end="2363:47">cpu_env</name></expr></argument>, <argument pos:start="2363:50" pos:end="2365:71"><expr pos:start="2363:50" pos:end="2365:71"><call pos:start="2363:50" pos:end="2365:71"><name pos:start="2363:50" pos:end="2363:57">offsetof</name><argument_list pos:start="2363:58" pos:end="2365:71">(<argument pos:start="2363:59" pos:end="2363:69"><expr pos:start="2363:59" pos:end="2363:69"><name pos:start="2363:59" pos:end="2363:69">CPUX86State</name></expr></argument>,

                                                <argument pos:start="2365:49" pos:end="2365:70"><expr pos:start="2365:49" pos:end="2365:70"><name pos:start="2365:49" pos:end="2365:61"><name pos:start="2365:49" pos:end="2365:56">xmm_regs</name><index pos:start="2365:57" pos:end="2365:61">[<expr pos:start="2365:58" pos:end="2365:60"><name pos:start="2365:58" pos:end="2365:60">reg</name></expr>]</index></name><operator pos:start="2365:62" pos:end="2365:62">.</operator><call pos:start="2365:63" pos:end="2365:70"><name pos:start="2365:63" pos:end="2365:67">XMM_L</name><argument_list pos:start="2365:68" pos:end="2365:70">(<argument pos:start="2365:69" pos:end="2365:69"><expr pos:start="2365:69" pos:end="2365:69"><literal type="number" pos:start="2365:69" pos:end="2365:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="2367:21" pos:end="2373:73"><if pos:start="2367:21" pos:end="2373:73">if <condition pos:start="2367:24" pos:end="2367:39">(<expr pos:start="2367:25" pos:end="2367:38"><operator pos:start="2367:25" pos:end="2367:25">(</operator><name pos:start="2367:26" pos:end="2367:28">val</name> <operator pos:start="2367:30" pos:end="2367:31">&gt;&gt;</operator> <literal type="number" pos:start="2367:33" pos:end="2367:33">1</literal><operator pos:start="2367:34" pos:end="2367:34">)</operator> <operator pos:start="2367:36" pos:end="2367:36">&amp;</operator> <literal type="number" pos:start="2367:38" pos:end="2367:38">1</literal></expr>)</condition><block type="pseudo" pos:start="2369:25" pos:end="2373:73"><block_content pos:start="2369:25" pos:end="2373:73">

                        <expr_stmt pos:start="2369:25" pos:end="2373:73"><expr pos:start="2369:25" pos:end="2373:72"><call pos:start="2369:25" pos:end="2373:72"><name pos:start="2369:25" pos:end="2369:38">tcg_gen_st_i32</name><argument_list pos:start="2369:39" pos:end="2373:72">(<argument pos:start="2369:40" pos:end="2369:72"><expr pos:start="2369:40" pos:end="2369:72"><call pos:start="2369:40" pos:end="2369:72"><name pos:start="2369:40" pos:end="2369:52">tcg_const_i32</name><argument_list pos:start="2369:53" pos:end="2369:72">(<argument pos:start="2369:54" pos:end="2369:54"><expr pos:start="2369:54" pos:end="2369:54"><literal type="number" pos:start="2369:54" pos:end="2369:54">0</literal></expr></argument> <comment type="block" pos:start="2369:56" pos:end="2369:71">/*float32_zero*/</comment>)</argument_list></call></expr></argument>,

                                        <argument pos:start="2371:41" pos:end="2371:47"><expr pos:start="2371:41" pos:end="2371:47"><name pos:start="2371:41" pos:end="2371:47">cpu_env</name></expr></argument>, <argument pos:start="2371:50" pos:end="2373:71"><expr pos:start="2371:50" pos:end="2373:71"><call pos:start="2371:50" pos:end="2373:71"><name pos:start="2371:50" pos:end="2371:57">offsetof</name><argument_list pos:start="2371:58" pos:end="2373:71">(<argument pos:start="2371:59" pos:end="2371:69"><expr pos:start="2371:59" pos:end="2371:69"><name pos:start="2371:59" pos:end="2371:69">CPUX86State</name></expr></argument>,

                                                <argument pos:start="2373:49" pos:end="2373:70"><expr pos:start="2373:49" pos:end="2373:70"><name pos:start="2373:49" pos:end="2373:61"><name pos:start="2373:49" pos:end="2373:56">xmm_regs</name><index pos:start="2373:57" pos:end="2373:61">[<expr pos:start="2373:58" pos:end="2373:60"><name pos:start="2373:58" pos:end="2373:60">reg</name></expr>]</index></name><operator pos:start="2373:62" pos:end="2373:62">.</operator><call pos:start="2373:63" pos:end="2373:70"><name pos:start="2373:63" pos:end="2373:67">XMM_L</name><argument_list pos:start="2373:68" pos:end="2373:70">(<argument pos:start="2373:69" pos:end="2373:69"><expr pos:start="2373:69" pos:end="2373:69"><literal type="number" pos:start="2373:69" pos:end="2373:69">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="2375:21" pos:end="2381:73"><if pos:start="2375:21" pos:end="2381:73">if <condition pos:start="2375:24" pos:end="2375:39">(<expr pos:start="2375:25" pos:end="2375:38"><operator pos:start="2375:25" pos:end="2375:25">(</operator><name pos:start="2375:26" pos:end="2375:28">val</name> <operator pos:start="2375:30" pos:end="2375:31">&gt;&gt;</operator> <literal type="number" pos:start="2375:33" pos:end="2375:33">2</literal><operator pos:start="2375:34" pos:end="2375:34">)</operator> <operator pos:start="2375:36" pos:end="2375:36">&amp;</operator> <literal type="number" pos:start="2375:38" pos:end="2375:38">1</literal></expr>)</condition><block type="pseudo" pos:start="2377:25" pos:end="2381:73"><block_content pos:start="2377:25" pos:end="2381:73">

                        <expr_stmt pos:start="2377:25" pos:end="2381:73"><expr pos:start="2377:25" pos:end="2381:72"><call pos:start="2377:25" pos:end="2381:72"><name pos:start="2377:25" pos:end="2377:38">tcg_gen_st_i32</name><argument_list pos:start="2377:39" pos:end="2381:72">(<argument pos:start="2377:40" pos:end="2377:72"><expr pos:start="2377:40" pos:end="2377:72"><call pos:start="2377:40" pos:end="2377:72"><name pos:start="2377:40" pos:end="2377:52">tcg_const_i32</name><argument_list pos:start="2377:53" pos:end="2377:72">(<argument pos:start="2377:54" pos:end="2377:54"><expr pos:start="2377:54" pos:end="2377:54"><literal type="number" pos:start="2377:54" pos:end="2377:54">0</literal></expr></argument> <comment type="block" pos:start="2377:56" pos:end="2377:71">/*float32_zero*/</comment>)</argument_list></call></expr></argument>,

                                        <argument pos:start="2379:41" pos:end="2379:47"><expr pos:start="2379:41" pos:end="2379:47"><name pos:start="2379:41" pos:end="2379:47">cpu_env</name></expr></argument>, <argument pos:start="2379:50" pos:end="2381:71"><expr pos:start="2379:50" pos:end="2381:71"><call pos:start="2379:50" pos:end="2381:71"><name pos:start="2379:50" pos:end="2379:57">offsetof</name><argument_list pos:start="2379:58" pos:end="2381:71">(<argument pos:start="2379:59" pos:end="2379:69"><expr pos:start="2379:59" pos:end="2379:69"><name pos:start="2379:59" pos:end="2379:69">CPUX86State</name></expr></argument>,

                                                <argument pos:start="2381:49" pos:end="2381:70"><expr pos:start="2381:49" pos:end="2381:70"><name pos:start="2381:49" pos:end="2381:61"><name pos:start="2381:49" pos:end="2381:56">xmm_regs</name><index pos:start="2381:57" pos:end="2381:61">[<expr pos:start="2381:58" pos:end="2381:60"><name pos:start="2381:58" pos:end="2381:60">reg</name></expr>]</index></name><operator pos:start="2381:62" pos:end="2381:62">.</operator><call pos:start="2381:63" pos:end="2381:70"><name pos:start="2381:63" pos:end="2381:67">XMM_L</name><argument_list pos:start="2381:68" pos:end="2381:70">(<argument pos:start="2381:69" pos:end="2381:69"><expr pos:start="2381:69" pos:end="2381:69"><literal type="number" pos:start="2381:69" pos:end="2381:69">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="2383:21" pos:end="2389:73"><if pos:start="2383:21" pos:end="2389:73">if <condition pos:start="2383:24" pos:end="2383:39">(<expr pos:start="2383:25" pos:end="2383:38"><operator pos:start="2383:25" pos:end="2383:25">(</operator><name pos:start="2383:26" pos:end="2383:28">val</name> <operator pos:start="2383:30" pos:end="2383:31">&gt;&gt;</operator> <literal type="number" pos:start="2383:33" pos:end="2383:33">3</literal><operator pos:start="2383:34" pos:end="2383:34">)</operator> <operator pos:start="2383:36" pos:end="2383:36">&amp;</operator> <literal type="number" pos:start="2383:38" pos:end="2383:38">1</literal></expr>)</condition><block type="pseudo" pos:start="2385:25" pos:end="2389:73"><block_content pos:start="2385:25" pos:end="2389:73">

                        <expr_stmt pos:start="2385:25" pos:end="2389:73"><expr pos:start="2385:25" pos:end="2389:72"><call pos:start="2385:25" pos:end="2389:72"><name pos:start="2385:25" pos:end="2385:38">tcg_gen_st_i32</name><argument_list pos:start="2385:39" pos:end="2389:72">(<argument pos:start="2385:40" pos:end="2385:72"><expr pos:start="2385:40" pos:end="2385:72"><call pos:start="2385:40" pos:end="2385:72"><name pos:start="2385:40" pos:end="2385:52">tcg_const_i32</name><argument_list pos:start="2385:53" pos:end="2385:72">(<argument pos:start="2385:54" pos:end="2385:54"><expr pos:start="2385:54" pos:end="2385:54"><literal type="number" pos:start="2385:54" pos:end="2385:54">0</literal></expr></argument> <comment type="block" pos:start="2385:56" pos:end="2385:71">/*float32_zero*/</comment>)</argument_list></call></expr></argument>,

                                        <argument pos:start="2387:41" pos:end="2387:47"><expr pos:start="2387:41" pos:end="2387:47"><name pos:start="2387:41" pos:end="2387:47">cpu_env</name></expr></argument>, <argument pos:start="2387:50" pos:end="2389:71"><expr pos:start="2387:50" pos:end="2389:71"><call pos:start="2387:50" pos:end="2389:71"><name pos:start="2387:50" pos:end="2387:57">offsetof</name><argument_list pos:start="2387:58" pos:end="2389:71">(<argument pos:start="2387:59" pos:end="2387:69"><expr pos:start="2387:59" pos:end="2387:69"><name pos:start="2387:59" pos:end="2387:69">CPUX86State</name></expr></argument>,

                                                <argument pos:start="2389:49" pos:end="2389:70"><expr pos:start="2389:49" pos:end="2389:70"><name pos:start="2389:49" pos:end="2389:61"><name pos:start="2389:49" pos:end="2389:56">xmm_regs</name><index pos:start="2389:57" pos:end="2389:61">[<expr pos:start="2389:58" pos:end="2389:60"><name pos:start="2389:58" pos:end="2389:60">reg</name></expr>]</index></name><operator pos:start="2389:62" pos:end="2389:62">.</operator><call pos:start="2389:63" pos:end="2389:70"><name pos:start="2389:63" pos:end="2389:67">XMM_L</name><argument_list pos:start="2389:68" pos:end="2389:70">(<argument pos:start="2389:69" pos:end="2389:69"><expr pos:start="2389:69" pos:end="2389:69"><literal type="number" pos:start="2389:69" pos:end="2389:69">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break pos:start="2391:21" pos:end="2391:26">break;</break>

                <case pos:start="2393:17" pos:end="2393:26">case <expr pos:start="2393:22" pos:end="2393:25"><literal type="number" pos:start="2393:22" pos:end="2393:25">0x22</literal></expr>:</case>

                    <if_stmt pos:start="2395:21" pos:end="2443:21"><if pos:start="2395:21" pos:end="2415:21">if <condition pos:start="2395:24" pos:end="2395:36">(<expr pos:start="2395:25" pos:end="2395:35"><name pos:start="2395:25" pos:end="2395:26">ot</name> <operator pos:start="2395:28" pos:end="2395:29">==</operator> <name pos:start="2395:31" pos:end="2395:35">MO_32</name></expr>)</condition> <block pos:start="2395:38" pos:end="2415:21">{<block_content pos:start="2397:25" pos:end="2413:79"> <comment type="block" pos:start="2395:40" pos:end="2395:51">/* pinsrd */</comment>

                        <if_stmt pos:start="2397:25" pos:end="2407:25"><if pos:start="2397:25" pos:end="2401:25">if <condition pos:start="2397:28" pos:end="2397:37">(<expr pos:start="2397:29" pos:end="2397:36"><name pos:start="2397:29" pos:end="2397:31">mod</name> <operator pos:start="2397:33" pos:end="2397:34">==</operator> <literal type="number" pos:start="2397:36" pos:end="2397:36">3</literal></expr>)</condition> <block pos:start="2397:39" pos:end="2401:25">{<block_content pos:start="2399:29" pos:end="2399:77">

                            <expr_stmt pos:start="2399:29" pos:end="2399:77"><expr pos:start="2399:29" pos:end="2399:76"><call pos:start="2399:29" pos:end="2399:76"><name pos:start="2399:29" pos:end="2399:48">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2399:49" pos:end="2399:76">(<argument pos:start="2399:50" pos:end="2399:61"><expr pos:start="2399:50" pos:end="2399:61"><name pos:start="2399:50" pos:end="2399:61">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2399:64" pos:end="2399:75"><expr pos:start="2399:64" pos:end="2399:75"><name pos:start="2399:64" pos:end="2399:75"><name pos:start="2399:64" pos:end="2399:71">cpu_regs</name><index pos:start="2399:72" pos:end="2399:75">[<expr pos:start="2399:73" pos:end="2399:74"><name pos:start="2399:73" pos:end="2399:74">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2401:27" pos:end="2407:25">else <block pos:start="2401:32" pos:end="2407:25">{<block_content pos:start="2403:29" pos:end="2405:71">

                            <expr_stmt pos:start="2403:29" pos:end="2405:71"><expr pos:start="2403:29" pos:end="2405:70"><call pos:start="2403:29" pos:end="2405:70"><name pos:start="2403:29" pos:end="2403:47">tcg_gen_qemu_ld_i32</name><argument_list pos:start="2403:48" pos:end="2405:70">(<argument pos:start="2403:49" pos:end="2403:60"><expr pos:start="2403:49" pos:end="2403:60"><name pos:start="2403:49" pos:end="2403:60">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2403:63" pos:end="2403:68"><expr pos:start="2403:63" pos:end="2403:68"><name pos:start="2403:63" pos:end="2403:68">cpu_A0</name></expr></argument>,

                                                <argument pos:start="2405:49" pos:end="2405:60"><expr pos:start="2405:49" pos:end="2405:60"><name pos:start="2405:49" pos:end="2405:60"><name pos:start="2405:49" pos:end="2405:49">s</name><operator pos:start="2405:50" pos:end="2405:51">-&gt;</operator><name pos:start="2405:52" pos:end="2405:60">mem_index</name></name></expr></argument>, <argument pos:start="2405:63" pos:end="2405:69"><expr pos:start="2405:63" pos:end="2405:69"><name pos:start="2405:63" pos:end="2405:69">MO_LEUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2409:25" pos:end="2413:79"><expr pos:start="2409:25" pos:end="2413:78"><call pos:start="2409:25" pos:end="2413:78"><name pos:start="2409:25" pos:end="2409:38">tcg_gen_st_i32</name><argument_list pos:start="2409:39" pos:end="2413:78">(<argument pos:start="2409:40" pos:end="2409:51"><expr pos:start="2409:40" pos:end="2409:51"><name pos:start="2409:40" pos:end="2409:51">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2409:54" pos:end="2409:60"><expr pos:start="2409:54" pos:end="2409:60"><name pos:start="2409:54" pos:end="2409:60">cpu_env</name></expr></argument>,

                                        <argument pos:start="2411:41" pos:end="2413:77"><expr pos:start="2411:41" pos:end="2413:77"><call pos:start="2411:41" pos:end="2413:77"><name pos:start="2411:41" pos:end="2411:48">offsetof</name><argument_list pos:start="2411:49" pos:end="2413:77">(<argument pos:start="2411:50" pos:end="2411:60"><expr pos:start="2411:50" pos:end="2411:60"><name pos:start="2411:50" pos:end="2411:60">CPUX86State</name></expr></argument>,

                                                <argument pos:start="2413:49" pos:end="2413:76"><expr pos:start="2413:49" pos:end="2413:76"><name pos:start="2413:49" pos:end="2413:61"><name pos:start="2413:49" pos:end="2413:56">xmm_regs</name><index pos:start="2413:57" pos:end="2413:61">[<expr pos:start="2413:58" pos:end="2413:60"><name pos:start="2413:58" pos:end="2413:60">reg</name></expr>]</index></name><operator pos:start="2413:62" pos:end="2413:62">.</operator><call pos:start="2413:63" pos:end="2413:76"><name pos:start="2413:63" pos:end="2413:67">XMM_L</name><argument_list pos:start="2413:68" pos:end="2413:76">(<argument pos:start="2413:69" pos:end="2413:75"><expr pos:start="2413:69" pos:end="2413:75"><name pos:start="2413:69" pos:end="2413:71">val</name> <operator pos:start="2413:73" pos:end="2413:73">&amp;</operator> <literal type="number" pos:start="2413:75" pos:end="2413:75">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2415:23" pos:end="2443:21">else <block pos:start="2415:28" pos:end="2443:21">{<block_content pos:start="2419:25" pos:end="2442:0"> <comment type="block" pos:start="2415:30" pos:end="2415:41">/* pinsrq */</comment>

<cpp:ifdef pos:start="2417:1" pos:end="2417:20">#<cpp:directive pos:start="2417:2" pos:end="2417:6">ifdef</cpp:directive> <name pos:start="2417:8" pos:end="2417:20">TARGET_X86_64</name></cpp:ifdef>

                        <if_stmt pos:start="2419:25" pos:end="2429:25"><if pos:start="2419:25" pos:end="2423:25">if <condition pos:start="2419:28" pos:end="2419:37">(<expr pos:start="2419:29" pos:end="2419:36"><name pos:start="2419:29" pos:end="2419:31">mod</name> <operator pos:start="2419:33" pos:end="2419:34">==</operator> <literal type="number" pos:start="2419:36" pos:end="2419:36">3</literal></expr>)</condition> <block pos:start="2419:39" pos:end="2423:25">{<block_content pos:start="2421:29" pos:end="2421:67">

                            <expr_stmt pos:start="2421:29" pos:end="2421:67"><expr pos:start="2421:29" pos:end="2421:66"><call pos:start="2421:29" pos:end="2421:66"><name pos:start="2421:29" pos:end="2421:44">gen_op_mov_v_reg</name><argument_list pos:start="2421:45" pos:end="2421:66">(<argument pos:start="2421:46" pos:end="2421:47"><expr pos:start="2421:46" pos:end="2421:47"><name pos:start="2421:46" pos:end="2421:47">ot</name></expr></argument>, <argument pos:start="2421:50" pos:end="2421:61"><expr pos:start="2421:50" pos:end="2421:61"><name pos:start="2421:50" pos:end="2421:61">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2421:64" pos:end="2421:65"><expr pos:start="2421:64" pos:end="2421:65"><name pos:start="2421:64" pos:end="2421:65">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2423:27" pos:end="2429:25">else <block pos:start="2423:32" pos:end="2429:25">{<block_content pos:start="2425:29" pos:end="2427:70">

                            <expr_stmt pos:start="2425:29" pos:end="2427:70"><expr pos:start="2425:29" pos:end="2427:69"><call pos:start="2425:29" pos:end="2427:69"><name pos:start="2425:29" pos:end="2425:47">tcg_gen_qemu_ld_i64</name><argument_list pos:start="2425:48" pos:end="2427:69">(<argument pos:start="2425:49" pos:end="2425:60"><expr pos:start="2425:49" pos:end="2425:60"><name pos:start="2425:49" pos:end="2425:60">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2425:63" pos:end="2425:68"><expr pos:start="2425:63" pos:end="2425:68"><name pos:start="2425:63" pos:end="2425:68">cpu_A0</name></expr></argument>,

                                                <argument pos:start="2427:49" pos:end="2427:60"><expr pos:start="2427:49" pos:end="2427:60"><name pos:start="2427:49" pos:end="2427:60"><name pos:start="2427:49" pos:end="2427:49">s</name><operator pos:start="2427:50" pos:end="2427:51">-&gt;</operator><name pos:start="2427:52" pos:end="2427:60">mem_index</name></name></expr></argument>, <argument pos:start="2427:63" pos:end="2427:68"><expr pos:start="2427:63" pos:end="2427:68"><name pos:start="2427:63" pos:end="2427:68">MO_LEQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2431:25" pos:end="2438:0"><expr pos:start="2431:25" pos:end="2435:78"><call pos:start="2431:25" pos:end="2435:78"><name pos:start="2431:25" pos:end="2431:38">tcg_gen_st_i64</name><argument_list pos:start="2431:39" pos:end="2435:78">(<argument pos:start="2431:40" pos:end="2431:51"><expr pos:start="2431:40" pos:end="2431:51"><name pos:start="2431:40" pos:end="2431:51">cpu_tmp1_i64</name></expr></argument>, <argument pos:start="2431:54" pos:end="2431:60"><expr pos:start="2431:54" pos:end="2431:60"><name pos:start="2431:54" pos:end="2431:60">cpu_env</name></expr></argument>,

                                        <argument pos:start="2433:41" pos:end="2435:77"><expr pos:start="2433:41" pos:end="2435:77"><call pos:start="2433:41" pos:end="2435:77"><name pos:start="2433:41" pos:end="2433:48">offsetof</name><argument_list pos:start="2433:49" pos:end="2435:77">(<argument pos:start="2433:50" pos:end="2433:60"><expr pos:start="2433:50" pos:end="2433:60"><name pos:start="2433:50" pos:end="2433:60">CPUX86State</name></expr></argument>,

                                                <argument pos:start="2435:49" pos:end="2435:76"><expr pos:start="2435:49" pos:end="2435:76"><name pos:start="2435:49" pos:end="2435:61"><name pos:start="2435:49" pos:end="2435:56">xmm_regs</name><index pos:start="2435:57" pos:end="2435:61">[<expr pos:start="2435:58" pos:end="2435:60"><name pos:start="2435:58" pos:end="2435:60">reg</name></expr>]</index></name><operator pos:start="2435:62" pos:end="2435:62">.</operator><call pos:start="2435:63" pos:end="2435:76"><name pos:start="2435:63" pos:end="2435:67">XMM_Q</name><argument_list pos:start="2435:68" pos:end="2435:76">(<argument pos:start="2435:69" pos:end="2435:75"><expr pos:start="2435:69" pos:end="2435:75"><name pos:start="2435:69" pos:end="2435:71">val</name> <operator pos:start="2435:73" pos:end="2435:73">&amp;</operator> <literal type="number" pos:start="2435:75" pos:end="2435:75">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="2437:1" pos:end="2437:5">#<cpp:directive pos:start="2437:2" pos:end="2437:5">else</cpp:directive></cpp:else>

                        <goto pos:start="2439:25" pos:end="2442:0">goto <name pos:start="2439:30" pos:end="2439:39">illegal_op</name>;</goto>

<cpp:endif pos:start="2441:1" pos:end="2441:6">#<cpp:directive pos:start="2441:2" pos:end="2441:6">endif</cpp:directive></cpp:endif>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="2445:21" pos:end="2445:26">break;</break>

                </block_content>}</block></switch>

                <return pos:start="2449:17" pos:end="2449:23">return;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="2455:13" pos:end="2491:13"><if pos:start="2455:13" pos:end="2473:13">if <condition pos:start="2455:16" pos:end="2455:19">(<expr pos:start="2455:17" pos:end="2455:18"><name pos:start="2455:17" pos:end="2455:18">b1</name></expr>)</condition> <block pos:start="2455:21" pos:end="2473:13">{<block_content pos:start="2457:17" pos:end="2471:17">

                <expr_stmt pos:start="2457:17" pos:end="2457:65"><expr pos:start="2457:17" pos:end="2457:64"><name pos:start="2457:17" pos:end="2457:26">op1_offset</name> <operator pos:start="2457:28" pos:end="2457:28">=</operator> <call pos:start="2457:30" pos:end="2457:64"><name pos:start="2457:30" pos:end="2457:37">offsetof</name><argument_list pos:start="2457:38" pos:end="2457:64">(<argument pos:start="2457:39" pos:end="2457:49"><expr pos:start="2457:39" pos:end="2457:49"><name pos:start="2457:39" pos:end="2457:49">CPUX86State</name></expr></argument>,<argument pos:start="2457:51" pos:end="2457:63"><expr pos:start="2457:51" pos:end="2457:63"><name pos:start="2457:51" pos:end="2457:63"><name pos:start="2457:51" pos:end="2457:58">xmm_regs</name><index pos:start="2457:59" pos:end="2457:63">[<expr pos:start="2457:60" pos:end="2457:62"><name pos:start="2457:60" pos:end="2457:62">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2459:17" pos:end="2471:17"><if pos:start="2459:17" pos:end="2463:17">if <condition pos:start="2459:20" pos:end="2459:29">(<expr pos:start="2459:21" pos:end="2459:28"><name pos:start="2459:21" pos:end="2459:23">mod</name> <operator pos:start="2459:25" pos:end="2459:26">==</operator> <literal type="number" pos:start="2459:28" pos:end="2459:28">3</literal></expr>)</condition> <block pos:start="2459:31" pos:end="2463:17">{<block_content pos:start="2461:21" pos:end="2461:79">

                    <expr_stmt pos:start="2461:21" pos:end="2461:79"><expr pos:start="2461:21" pos:end="2461:78"><name pos:start="2461:21" pos:end="2461:30">op2_offset</name> <operator pos:start="2461:32" pos:end="2461:32">=</operator> <call pos:start="2461:34" pos:end="2461:78"><name pos:start="2461:34" pos:end="2461:41">offsetof</name><argument_list pos:start="2461:42" pos:end="2461:78">(<argument pos:start="2461:43" pos:end="2461:53"><expr pos:start="2461:43" pos:end="2461:53"><name pos:start="2461:43" pos:end="2461:53">CPUX86State</name></expr></argument>,<argument pos:start="2461:55" pos:end="2461:77"><expr pos:start="2461:55" pos:end="2461:77"><name pos:start="2461:55" pos:end="2461:77"><name pos:start="2461:55" pos:end="2461:62">xmm_regs</name><index pos:start="2461:63" pos:end="2461:77">[<expr pos:start="2461:64" pos:end="2461:76"><name pos:start="2461:64" pos:end="2461:65">rm</name> <operator pos:start="2461:67" pos:end="2461:67">|</operator> <call pos:start="2461:69" pos:end="2461:76"><name pos:start="2461:69" pos:end="2461:73">REX_B</name><argument_list pos:start="2461:74" pos:end="2461:76">(<argument pos:start="2461:75" pos:end="2461:75"><expr pos:start="2461:75" pos:end="2461:75"><name pos:start="2461:75" pos:end="2461:75">s</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2463:19" pos:end="2471:17">else <block pos:start="2463:24" pos:end="2471:17">{<block_content pos:start="2465:21" pos:end="2469:50">

                    <expr_stmt pos:start="2465:21" pos:end="2465:62"><expr pos:start="2465:21" pos:end="2465:61"><name pos:start="2465:21" pos:end="2465:30">op2_offset</name> <operator pos:start="2465:32" pos:end="2465:32">=</operator> <call pos:start="2465:34" pos:end="2465:61"><name pos:start="2465:34" pos:end="2465:41">offsetof</name><argument_list pos:start="2465:42" pos:end="2465:61">(<argument pos:start="2465:43" pos:end="2465:53"><expr pos:start="2465:43" pos:end="2465:53"><name pos:start="2465:43" pos:end="2465:53">CPUX86State</name></expr></argument>,<argument pos:start="2465:55" pos:end="2465:60"><expr pos:start="2465:55" pos:end="2465:60"><name pos:start="2465:55" pos:end="2465:60">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2467:21" pos:end="2467:49"><expr pos:start="2467:21" pos:end="2467:48"><call pos:start="2467:21" pos:end="2467:48"><name pos:start="2467:21" pos:end="2467:33">gen_lea_modrm</name><argument_list pos:start="2467:34" pos:end="2467:48">(<argument pos:start="2467:35" pos:end="2467:37"><expr pos:start="2467:35" pos:end="2467:37"><name pos:start="2467:35" pos:end="2467:37">env</name></expr></argument>, <argument pos:start="2467:40" pos:end="2467:40"><expr pos:start="2467:40" pos:end="2467:40"><name pos:start="2467:40" pos:end="2467:40">s</name></expr></argument>, <argument pos:start="2467:43" pos:end="2467:47"><expr pos:start="2467:43" pos:end="2467:47"><name pos:start="2467:43" pos:end="2467:47">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2469:21" pos:end="2469:50"><expr pos:start="2469:21" pos:end="2469:49"><call pos:start="2469:21" pos:end="2469:49"><name pos:start="2469:21" pos:end="2469:34">gen_ldo_env_A0</name><argument_list pos:start="2469:35" pos:end="2469:49">(<argument pos:start="2469:36" pos:end="2469:36"><expr pos:start="2469:36" pos:end="2469:36"><name pos:start="2469:36" pos:end="2469:36">s</name></expr></argument>, <argument pos:start="2469:39" pos:end="2469:48"><expr pos:start="2469:39" pos:end="2469:48"><name pos:start="2469:39" pos:end="2469:48">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="2473:15" pos:end="2491:13">else <block pos:start="2473:20" pos:end="2491:13">{<block_content pos:start="2475:17" pos:end="2489:17">

                <expr_stmt pos:start="2475:17" pos:end="2475:67"><expr pos:start="2475:17" pos:end="2475:66"><name pos:start="2475:17" pos:end="2475:26">op1_offset</name> <operator pos:start="2475:28" pos:end="2475:28">=</operator> <call pos:start="2475:30" pos:end="2475:66"><name pos:start="2475:30" pos:end="2475:37">offsetof</name><argument_list pos:start="2475:38" pos:end="2475:66">(<argument pos:start="2475:39" pos:end="2475:49"><expr pos:start="2475:39" pos:end="2475:49"><name pos:start="2475:39" pos:end="2475:49">CPUX86State</name></expr></argument>,<argument pos:start="2475:51" pos:end="2475:65"><expr pos:start="2475:51" pos:end="2475:65"><name pos:start="2475:51" pos:end="2475:61"><name pos:start="2475:51" pos:end="2475:56">fpregs</name><index pos:start="2475:57" pos:end="2475:61">[<expr pos:start="2475:58" pos:end="2475:60"><name pos:start="2475:58" pos:end="2475:60">reg</name></expr>]</index></name><operator pos:start="2475:62" pos:end="2475:62">.</operator><name pos:start="2475:63" pos:end="2475:65">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2477:17" pos:end="2489:17"><if pos:start="2477:17" pos:end="2481:17">if <condition pos:start="2477:20" pos:end="2477:29">(<expr pos:start="2477:21" pos:end="2477:28"><name pos:start="2477:21" pos:end="2477:23">mod</name> <operator pos:start="2477:25" pos:end="2477:26">==</operator> <literal type="number" pos:start="2477:28" pos:end="2477:28">3</literal></expr>)</condition> <block pos:start="2477:31" pos:end="2481:17">{<block_content pos:start="2479:21" pos:end="2479:70">

                    <expr_stmt pos:start="2479:21" pos:end="2479:70"><expr pos:start="2479:21" pos:end="2479:69"><name pos:start="2479:21" pos:end="2479:30">op2_offset</name> <operator pos:start="2479:32" pos:end="2479:32">=</operator> <call pos:start="2479:34" pos:end="2479:69"><name pos:start="2479:34" pos:end="2479:41">offsetof</name><argument_list pos:start="2479:42" pos:end="2479:69">(<argument pos:start="2479:43" pos:end="2479:53"><expr pos:start="2479:43" pos:end="2479:53"><name pos:start="2479:43" pos:end="2479:53">CPUX86State</name></expr></argument>,<argument pos:start="2479:55" pos:end="2479:68"><expr pos:start="2479:55" pos:end="2479:68"><name pos:start="2479:55" pos:end="2479:64"><name pos:start="2479:55" pos:end="2479:60">fpregs</name><index pos:start="2479:61" pos:end="2479:64">[<expr pos:start="2479:62" pos:end="2479:63"><name pos:start="2479:62" pos:end="2479:63">rm</name></expr>]</index></name><operator pos:start="2479:65" pos:end="2479:65">.</operator><name pos:start="2479:66" pos:end="2479:68">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2481:19" pos:end="2489:17">else <block pos:start="2481:24" pos:end="2489:17">{<block_content pos:start="2483:21" pos:end="2487:50">

                    <expr_stmt pos:start="2483:21" pos:end="2483:62"><expr pos:start="2483:21" pos:end="2483:61"><name pos:start="2483:21" pos:end="2483:30">op2_offset</name> <operator pos:start="2483:32" pos:end="2483:32">=</operator> <call pos:start="2483:34" pos:end="2483:61"><name pos:start="2483:34" pos:end="2483:41">offsetof</name><argument_list pos:start="2483:42" pos:end="2483:61">(<argument pos:start="2483:43" pos:end="2483:53"><expr pos:start="2483:43" pos:end="2483:53"><name pos:start="2483:43" pos:end="2483:53">CPUX86State</name></expr></argument>,<argument pos:start="2483:55" pos:end="2483:60"><expr pos:start="2483:55" pos:end="2483:60"><name pos:start="2483:55" pos:end="2483:60">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2485:21" pos:end="2485:49"><expr pos:start="2485:21" pos:end="2485:48"><call pos:start="2485:21" pos:end="2485:48"><name pos:start="2485:21" pos:end="2485:33">gen_lea_modrm</name><argument_list pos:start="2485:34" pos:end="2485:48">(<argument pos:start="2485:35" pos:end="2485:37"><expr pos:start="2485:35" pos:end="2485:37"><name pos:start="2485:35" pos:end="2485:37">env</name></expr></argument>, <argument pos:start="2485:40" pos:end="2485:40"><expr pos:start="2485:40" pos:end="2485:40"><name pos:start="2485:40" pos:end="2485:40">s</name></expr></argument>, <argument pos:start="2485:43" pos:end="2485:47"><expr pos:start="2485:43" pos:end="2485:47"><name pos:start="2485:43" pos:end="2485:47">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2487:21" pos:end="2487:50"><expr pos:start="2487:21" pos:end="2487:49"><call pos:start="2487:21" pos:end="2487:49"><name pos:start="2487:21" pos:end="2487:34">gen_ldq_env_A0</name><argument_list pos:start="2487:35" pos:end="2487:49">(<argument pos:start="2487:36" pos:end="2487:36"><expr pos:start="2487:36" pos:end="2487:36"><name pos:start="2487:36" pos:end="2487:36">s</name></expr></argument>, <argument pos:start="2487:39" pos:end="2487:48"><expr pos:start="2487:39" pos:end="2487:48"><name pos:start="2487:39" pos:end="2487:48">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="2493:13" pos:end="2493:46"><expr pos:start="2493:13" pos:end="2493:45"><name pos:start="2493:13" pos:end="2493:15">val</name> <operator pos:start="2493:17" pos:end="2493:17">=</operator> <call pos:start="2493:19" pos:end="2493:45"><name pos:start="2493:19" pos:end="2493:31">cpu_ldub_code</name><argument_list pos:start="2493:32" pos:end="2493:45">(<argument pos:start="2493:33" pos:end="2493:35"><expr pos:start="2493:33" pos:end="2493:35"><name pos:start="2493:33" pos:end="2493:35">env</name></expr></argument>, <argument pos:start="2493:38" pos:end="2493:44"><expr pos:start="2493:38" pos:end="2493:44"><name pos:start="2493:38" pos:end="2493:42"><name pos:start="2493:38" pos:end="2493:38">s</name><operator pos:start="2493:39" pos:end="2493:40">-&gt;</operator><name pos:start="2493:41" pos:end="2493:42">pc</name></name><operator pos:start="2493:43" pos:end="2493:44">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="2497:13" pos:end="2511:13"><if pos:start="2497:13" pos:end="2511:13">if <condition pos:start="2497:16" pos:end="2497:35">(<expr pos:start="2497:17" pos:end="2497:34"><operator pos:start="2497:17" pos:end="2497:17">(</operator><name pos:start="2497:18" pos:end="2497:18">b</name> <operator pos:start="2497:20" pos:end="2497:20">&amp;</operator> <literal type="number" pos:start="2497:22" pos:end="2497:25">0xfc</literal><operator pos:start="2497:26" pos:end="2497:26">)</operator> <operator pos:start="2497:28" pos:end="2497:29">==</operator> <literal type="number" pos:start="2497:31" pos:end="2497:34">0x60</literal></expr>)</condition> <block pos:start="2497:37" pos:end="2511:13">{<block_content pos:start="2499:17" pos:end="2509:17"> <comment type="block" pos:start="2497:39" pos:end="2497:53">/* pcmpXstrX */</comment>

                <expr_stmt pos:start="2499:17" pos:end="2499:43"><expr pos:start="2499:17" pos:end="2499:42"><call pos:start="2499:17" pos:end="2499:42"><name pos:start="2499:17" pos:end="2499:25">set_cc_op</name><argument_list pos:start="2499:26" pos:end="2499:42">(<argument pos:start="2499:27" pos:end="2499:27"><expr pos:start="2499:27" pos:end="2499:27"><name pos:start="2499:27" pos:end="2499:27">s</name></expr></argument>, <argument pos:start="2499:30" pos:end="2499:41"><expr pos:start="2499:30" pos:end="2499:41"><name pos:start="2499:30" pos:end="2499:41">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="2503:17" pos:end="2509:17"><if pos:start="2503:17" pos:end="2509:17">if <condition pos:start="2503:20" pos:end="2503:38">(<expr pos:start="2503:21" pos:end="2503:37"><name pos:start="2503:21" pos:end="2503:28"><name pos:start="2503:21" pos:end="2503:21">s</name><operator pos:start="2503:22" pos:end="2503:23">-&gt;</operator><name pos:start="2503:24" pos:end="2503:28">dflag</name></name> <operator pos:start="2503:30" pos:end="2503:31">==</operator> <name pos:start="2503:33" pos:end="2503:37">MO_64</name></expr>)</condition> <block pos:start="2503:40" pos:end="2509:17">{<block_content pos:start="2507:21" pos:end="2507:34">

                    <comment type="block" pos:start="2505:21" pos:end="2505:72">/* The helper must use entire 64-bit gp registers */</comment>

                    <expr_stmt pos:start="2507:21" pos:end="2507:34"><expr pos:start="2507:21" pos:end="2507:33"><name pos:start="2507:21" pos:end="2507:23">val</name> <operator pos:start="2507:25" pos:end="2507:26">|=</operator> <literal type="number" pos:start="2507:28" pos:end="2507:28">1</literal> <operator pos:start="2507:30" pos:end="2507:31">&lt;&lt;</operator> <literal type="number" pos:start="2507:33" pos:end="2507:33">8</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="2515:13" pos:end="2515:60"><expr pos:start="2515:13" pos:end="2515:59"><call pos:start="2515:13" pos:end="2515:59"><name pos:start="2515:13" pos:end="2515:28">tcg_gen_addi_ptr</name><argument_list pos:start="2515:29" pos:end="2515:59">(<argument pos:start="2515:30" pos:end="2515:37"><expr pos:start="2515:30" pos:end="2515:37"><name pos:start="2515:30" pos:end="2515:37">cpu_ptr0</name></expr></argument>, <argument pos:start="2515:40" pos:end="2515:46"><expr pos:start="2515:40" pos:end="2515:46"><name pos:start="2515:40" pos:end="2515:46">cpu_env</name></expr></argument>, <argument pos:start="2515:49" pos:end="2515:58"><expr pos:start="2515:49" pos:end="2515:58"><name pos:start="2515:49" pos:end="2515:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2517:13" pos:end="2517:60"><expr pos:start="2517:13" pos:end="2517:59"><call pos:start="2517:13" pos:end="2517:59"><name pos:start="2517:13" pos:end="2517:28">tcg_gen_addi_ptr</name><argument_list pos:start="2517:29" pos:end="2517:59">(<argument pos:start="2517:30" pos:end="2517:37"><expr pos:start="2517:30" pos:end="2517:37"><name pos:start="2517:30" pos:end="2517:37">cpu_ptr1</name></expr></argument>, <argument pos:start="2517:40" pos:end="2517:46"><expr pos:start="2517:40" pos:end="2517:46"><name pos:start="2517:40" pos:end="2517:46">cpu_env</name></expr></argument>, <argument pos:start="2517:49" pos:end="2517:58"><expr pos:start="2517:49" pos:end="2517:58"><name pos:start="2517:49" pos:end="2517:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2519:13" pos:end="2519:73"><expr pos:start="2519:13" pos:end="2519:72"><call pos:start="2519:13" pos:end="2519:72"><name pos:start="2519:13" pos:end="2519:23">sse_fn_eppi</name><argument_list pos:start="2519:24" pos:end="2519:72">(<argument pos:start="2519:25" pos:end="2519:31"><expr pos:start="2519:25" pos:end="2519:31"><name pos:start="2519:25" pos:end="2519:31">cpu_env</name></expr></argument>, <argument pos:start="2519:34" pos:end="2519:41"><expr pos:start="2519:34" pos:end="2519:41"><name pos:start="2519:34" pos:end="2519:41">cpu_ptr0</name></expr></argument>, <argument pos:start="2519:44" pos:end="2519:51"><expr pos:start="2519:44" pos:end="2519:51"><name pos:start="2519:44" pos:end="2519:51">cpu_ptr1</name></expr></argument>, <argument pos:start="2519:54" pos:end="2519:71"><expr pos:start="2519:54" pos:end="2519:71"><call pos:start="2519:54" pos:end="2519:71"><name pos:start="2519:54" pos:end="2519:66">tcg_const_i32</name><argument_list pos:start="2519:67" pos:end="2519:71">(<argument pos:start="2519:68" pos:end="2519:70"><expr pos:start="2519:68" pos:end="2519:70"><name pos:start="2519:68" pos:end="2519:70">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2521:13" pos:end="2521:18">break;</break>



        <case pos:start="2525:9" pos:end="2525:19">case <expr pos:start="2525:14" pos:end="2525:18"><literal type="number" pos:start="2525:14" pos:end="2525:18">0x33a</literal></expr>:</case>

            <comment type="block" pos:start="2527:13" pos:end="2527:62">/* Various integer extensions at 0f 3a f[0-f].  */</comment>

            <expr_stmt pos:start="2529:13" pos:end="2529:34"><expr pos:start="2529:13" pos:end="2529:33"><name pos:start="2529:13" pos:end="2529:13">b</name> <operator pos:start="2529:15" pos:end="2529:15">=</operator> <name pos:start="2529:17" pos:end="2529:21">modrm</name> <operator pos:start="2529:23" pos:end="2529:23">|</operator> <operator pos:start="2529:25" pos:end="2529:25">(</operator><name pos:start="2529:26" pos:end="2529:27">b1</name> <operator pos:start="2529:29" pos:end="2529:30">&lt;&lt;</operator> <literal type="number" pos:start="2529:32" pos:end="2529:32">8</literal><operator pos:start="2529:33" pos:end="2529:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="2531:13" pos:end="2531:48"><expr pos:start="2531:13" pos:end="2531:47"><name pos:start="2531:13" pos:end="2531:17">modrm</name> <operator pos:start="2531:19" pos:end="2531:19">=</operator> <call pos:start="2531:21" pos:end="2531:47"><name pos:start="2531:21" pos:end="2531:33">cpu_ldub_code</name><argument_list pos:start="2531:34" pos:end="2531:47">(<argument pos:start="2531:35" pos:end="2531:37"><expr pos:start="2531:35" pos:end="2531:37"><name pos:start="2531:35" pos:end="2531:37">env</name></expr></argument>, <argument pos:start="2531:40" pos:end="2531:46"><expr pos:start="2531:40" pos:end="2531:46"><name pos:start="2531:40" pos:end="2531:44"><name pos:start="2531:40" pos:end="2531:40">s</name><operator pos:start="2531:41" pos:end="2531:42">-&gt;</operator><name pos:start="2531:43" pos:end="2531:44">pc</name></name><operator pos:start="2531:45" pos:end="2531:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2533:13" pos:end="2533:45"><expr pos:start="2533:13" pos:end="2533:44"><name pos:start="2533:13" pos:end="2533:15">reg</name> <operator pos:start="2533:17" pos:end="2533:17">=</operator> <operator pos:start="2533:19" pos:end="2533:19">(</operator><operator pos:start="2533:20" pos:end="2533:20">(</operator><name pos:start="2533:21" pos:end="2533:25">modrm</name> <operator pos:start="2533:27" pos:end="2533:28">&gt;&gt;</operator> <literal type="number" pos:start="2533:30" pos:end="2533:30">3</literal><operator pos:start="2533:31" pos:end="2533:31">)</operator> <operator pos:start="2533:33" pos:end="2533:33">&amp;</operator> <literal type="number" pos:start="2533:35" pos:end="2533:35">7</literal><operator pos:start="2533:36" pos:end="2533:36">)</operator> <operator pos:start="2533:38" pos:end="2533:38">|</operator> <name pos:start="2533:40" pos:end="2533:44">rex_r</name></expr>;</expr_stmt>



            <switch pos:start="2537:13" pos:end="2581:13">switch <condition pos:start="2537:20" pos:end="2537:22">(<expr pos:start="2537:21" pos:end="2537:21"><name pos:start="2537:21" pos:end="2537:21">b</name></expr>)</condition> <block pos:start="2537:24" pos:end="2581:13">{<block_content pos:start="2539:13" pos:end="2579:32">

            <case pos:start="2539:13" pos:end="2539:23">case <expr pos:start="2539:18" pos:end="2539:22"><literal type="number" pos:start="2539:18" pos:end="2539:22">0x3f0</literal></expr>:</case> <comment type="block" pos:start="2539:25" pos:end="2539:44">/* rorx Gy,Ey, Ib */</comment>

                <if_stmt pos:start="2541:17" pos:end="2549:17"><if pos:start="2541:17" pos:end="2549:17">if <condition pos:start="2541:20" pos:end="2545:37">(<expr pos:start="2541:21" pos:end="2545:36"><operator pos:start="2541:21" pos:end="2541:21">!</operator><operator pos:start="2541:22" pos:end="2541:22">(</operator><name pos:start="2541:23" pos:end="2541:47"><name pos:start="2541:23" pos:end="2541:23">s</name><operator pos:start="2541:24" pos:end="2541:25">-&gt;</operator><name pos:start="2541:26" pos:end="2541:47">cpuid_7_0_ebx_features</name></name> <operator pos:start="2541:49" pos:end="2541:49">&amp;</operator> <name pos:start="2541:51" pos:end="2541:68">CPUID_7_0_EBX_BMI2</name><operator pos:start="2541:69" pos:end="2541:69">)</operator>

                    <operator pos:start="2543:21" pos:end="2543:22">||</operator> <operator pos:start="2543:24" pos:end="2543:24">!</operator><operator pos:start="2543:25" pos:end="2543:25">(</operator><name pos:start="2543:26" pos:end="2543:34"><name pos:start="2543:26" pos:end="2543:26">s</name><operator pos:start="2543:27" pos:end="2543:28">-&gt;</operator><name pos:start="2543:29" pos:end="2543:34">prefix</name></name> <operator pos:start="2543:36" pos:end="2543:36">&amp;</operator> <name pos:start="2543:38" pos:end="2543:47">PREFIX_VEX</name><operator pos:start="2543:48" pos:end="2543:48">)</operator>

                    <operator pos:start="2545:21" pos:end="2545:22">||</operator> <name pos:start="2545:24" pos:end="2545:31"><name pos:start="2545:24" pos:end="2545:24">s</name><operator pos:start="2545:25" pos:end="2545:26">-&gt;</operator><name pos:start="2545:27" pos:end="2545:31">vex_l</name></name> <operator pos:start="2545:33" pos:end="2545:34">!=</operator> <literal type="number" pos:start="2545:36" pos:end="2545:36">0</literal></expr>)</condition> <block pos:start="2545:39" pos:end="2549:17">{<block_content pos:start="2547:21" pos:end="2547:36">

                    <goto pos:start="2547:21" pos:end="2547:36">goto <name pos:start="2547:26" pos:end="2547:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="2551:17" pos:end="2551:40"><expr pos:start="2551:17" pos:end="2551:39"><name pos:start="2551:17" pos:end="2551:18">ot</name> <operator pos:start="2551:20" pos:end="2551:20">=</operator> <call pos:start="2551:22" pos:end="2551:39"><name pos:start="2551:22" pos:end="2551:29">mo_64_32</name><argument_list pos:start="2551:30" pos:end="2551:39">(<argument pos:start="2551:31" pos:end="2551:38"><expr pos:start="2551:31" pos:end="2551:38"><name pos:start="2551:31" pos:end="2551:38"><name pos:start="2551:31" pos:end="2551:31">s</name><operator pos:start="2551:32" pos:end="2551:33">-&gt;</operator><name pos:start="2551:34" pos:end="2551:38">dflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2553:17" pos:end="2553:62"><expr pos:start="2553:17" pos:end="2553:61"><call pos:start="2553:17" pos:end="2553:61"><name pos:start="2553:17" pos:end="2553:30">gen_ldst_modrm</name><argument_list pos:start="2553:31" pos:end="2553:61">(<argument pos:start="2553:32" pos:end="2553:34"><expr pos:start="2553:32" pos:end="2553:34"><name pos:start="2553:32" pos:end="2553:34">env</name></expr></argument>, <argument pos:start="2553:37" pos:end="2553:37"><expr pos:start="2553:37" pos:end="2553:37"><name pos:start="2553:37" pos:end="2553:37">s</name></expr></argument>, <argument pos:start="2553:40" pos:end="2553:44"><expr pos:start="2553:40" pos:end="2553:44"><name pos:start="2553:40" pos:end="2553:44">modrm</name></expr></argument>, <argument pos:start="2553:47" pos:end="2553:48"><expr pos:start="2553:47" pos:end="2553:48"><name pos:start="2553:47" pos:end="2553:48">ot</name></expr></argument>, <argument pos:start="2553:51" pos:end="2553:57"><expr pos:start="2553:51" pos:end="2553:57"><name pos:start="2553:51" pos:end="2553:57">OR_TMP0</name></expr></argument>, <argument pos:start="2553:60" pos:end="2553:60"><expr pos:start="2553:60" pos:end="2553:60"><literal type="number" pos:start="2553:60" pos:end="2553:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2555:17" pos:end="2555:48"><expr pos:start="2555:17" pos:end="2555:47"><name pos:start="2555:17" pos:end="2555:17">b</name> <operator pos:start="2555:19" pos:end="2555:19">=</operator> <call pos:start="2555:21" pos:end="2555:47"><name pos:start="2555:21" pos:end="2555:33">cpu_ldub_code</name><argument_list pos:start="2555:34" pos:end="2555:47">(<argument pos:start="2555:35" pos:end="2555:37"><expr pos:start="2555:35" pos:end="2555:37"><name pos:start="2555:35" pos:end="2555:37">env</name></expr></argument>, <argument pos:start="2555:40" pos:end="2555:46"><expr pos:start="2555:40" pos:end="2555:46"><name pos:start="2555:40" pos:end="2555:44"><name pos:start="2555:40" pos:end="2555:40">s</name><operator pos:start="2555:41" pos:end="2555:42">-&gt;</operator><name pos:start="2555:43" pos:end="2555:44">pc</name></name><operator pos:start="2555:45" pos:end="2555:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2557:17" pos:end="2569:17"><if pos:start="2557:17" pos:end="2561:17">if <condition pos:start="2557:20" pos:end="2557:32">(<expr pos:start="2557:21" pos:end="2557:31"><name pos:start="2557:21" pos:end="2557:22">ot</name> <operator pos:start="2557:24" pos:end="2557:25">==</operator> <name pos:start="2557:27" pos:end="2557:31">MO_64</name></expr>)</condition> <block pos:start="2557:34" pos:end="2561:17">{<block_content pos:start="2559:21" pos:end="2559:65">

                    <expr_stmt pos:start="2559:21" pos:end="2559:65"><expr pos:start="2559:21" pos:end="2559:64"><call pos:start="2559:21" pos:end="2559:64"><name pos:start="2559:21" pos:end="2559:36">tcg_gen_rotri_tl</name><argument_list pos:start="2559:37" pos:end="2559:64">(<argument pos:start="2559:38" pos:end="2559:45"><expr pos:start="2559:38" pos:end="2559:45"><name pos:start="2559:38" pos:end="2559:45"><name pos:start="2559:38" pos:end="2559:42">cpu_T</name><index pos:start="2559:43" pos:end="2559:45">[<expr pos:start="2559:44" pos:end="2559:44"><literal type="number" pos:start="2559:44" pos:end="2559:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2559:48" pos:end="2559:55"><expr pos:start="2559:48" pos:end="2559:55"><name pos:start="2559:48" pos:end="2559:55"><name pos:start="2559:48" pos:end="2559:52">cpu_T</name><index pos:start="2559:53" pos:end="2559:55">[<expr pos:start="2559:54" pos:end="2559:54"><literal type="number" pos:start="2559:54" pos:end="2559:54">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2559:58" pos:end="2559:63"><expr pos:start="2559:58" pos:end="2559:63"><name pos:start="2559:58" pos:end="2559:58">b</name> <operator pos:start="2559:60" pos:end="2559:60">&amp;</operator> <literal type="number" pos:start="2559:62" pos:end="2559:63">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2561:19" pos:end="2569:17">else <block pos:start="2561:24" pos:end="2569:17">{<block_content pos:start="2563:21" pos:end="2567:64">

                    <expr_stmt pos:start="2563:21" pos:end="2563:65"><expr pos:start="2563:21" pos:end="2563:64"><call pos:start="2563:21" pos:end="2563:64"><name pos:start="2563:21" pos:end="2563:40">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2563:41" pos:end="2563:64">(<argument pos:start="2563:42" pos:end="2563:53"><expr pos:start="2563:42" pos:end="2563:53"><name pos:start="2563:42" pos:end="2563:53">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2563:56" pos:end="2563:63"><expr pos:start="2563:56" pos:end="2563:63"><name pos:start="2563:56" pos:end="2563:63"><name pos:start="2563:56" pos:end="2563:60">cpu_T</name><index pos:start="2563:61" pos:end="2563:63">[<expr pos:start="2563:62" pos:end="2563:62"><literal type="number" pos:start="2563:62" pos:end="2563:62">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2565:21" pos:end="2565:74"><expr pos:start="2565:21" pos:end="2565:73"><call pos:start="2565:21" pos:end="2565:73"><name pos:start="2565:21" pos:end="2565:37">tcg_gen_rotri_i32</name><argument_list pos:start="2565:38" pos:end="2565:73">(<argument pos:start="2565:39" pos:end="2565:50"><expr pos:start="2565:39" pos:end="2565:50"><name pos:start="2565:39" pos:end="2565:50">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2565:53" pos:end="2565:64"><expr pos:start="2565:53" pos:end="2565:64"><name pos:start="2565:53" pos:end="2565:64">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="2565:67" pos:end="2565:72"><expr pos:start="2565:67" pos:end="2565:72"><name pos:start="2565:67" pos:end="2565:67">b</name> <operator pos:start="2565:69" pos:end="2565:69">&amp;</operator> <literal type="number" pos:start="2565:71" pos:end="2565:72">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2567:21" pos:end="2567:64"><expr pos:start="2567:21" pos:end="2567:63"><call pos:start="2567:21" pos:end="2567:63"><name pos:start="2567:21" pos:end="2567:39">tcg_gen_extu_i32_tl</name><argument_list pos:start="2567:40" pos:end="2567:63">(<argument pos:start="2567:41" pos:end="2567:48"><expr pos:start="2567:41" pos:end="2567:48"><name pos:start="2567:41" pos:end="2567:48"><name pos:start="2567:41" pos:end="2567:45">cpu_T</name><index pos:start="2567:46" pos:end="2567:48">[<expr pos:start="2567:47" pos:end="2567:47"><literal type="number" pos:start="2567:47" pos:end="2567:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2567:51" pos:end="2567:62"><expr pos:start="2567:51" pos:end="2567:62"><name pos:start="2567:51" pos:end="2567:62">cpu_tmp2_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="2571:17" pos:end="2571:52"><expr pos:start="2571:17" pos:end="2571:51"><call pos:start="2571:17" pos:end="2571:51"><name pos:start="2571:17" pos:end="2571:32">gen_op_mov_reg_v</name><argument_list pos:start="2571:33" pos:end="2571:51">(<argument pos:start="2571:34" pos:end="2571:35"><expr pos:start="2571:34" pos:end="2571:35"><name pos:start="2571:34" pos:end="2571:35">ot</name></expr></argument>, <argument pos:start="2571:38" pos:end="2571:40"><expr pos:start="2571:38" pos:end="2571:40"><name pos:start="2571:38" pos:end="2571:40">reg</name></expr></argument>, <argument pos:start="2571:43" pos:end="2571:50"><expr pos:start="2571:43" pos:end="2571:50"><name pos:start="2571:43" pos:end="2571:50"><name pos:start="2571:43" pos:end="2571:47">cpu_T</name><index pos:start="2571:48" pos:end="2571:50">[<expr pos:start="2571:49" pos:end="2571:49"><literal type="number" pos:start="2571:49" pos:end="2571:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2573:17" pos:end="2573:22">break;</break>



            <default pos:start="2577:13" pos:end="2577:20">default:</default>

                <goto pos:start="2579:17" pos:end="2579:32">goto <name pos:start="2579:22" pos:end="2579:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

            <break pos:start="2583:13" pos:end="2583:18">break;</break>



        <default pos:start="2587:9" pos:end="2587:16">default:</default>

            <goto pos:start="2589:13" pos:end="2589:28">goto <name pos:start="2589:18" pos:end="2589:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

    </block_content>}</block></if> <else pos:start="2593:7" pos:end="2849:5">else <block pos:start="2593:12" pos:end="2849:5">{<block_content pos:start="2597:9" pos:end="2847:9">

        <comment type="block" pos:start="2595:9" pos:end="2595:42">/* generic MMX or SSE operation */</comment>

        <switch pos:start="2597:9" pos:end="2613:9">switch<condition pos:start="2597:15" pos:end="2597:17">(<expr pos:start="2597:16" pos:end="2597:16"><name pos:start="2597:16" pos:end="2597:16">b</name></expr>)</condition> <block pos:start="2597:19" pos:end="2613:9">{<block_content pos:start="2599:9" pos:end="2611:18">

        <case pos:start="2599:9" pos:end="2599:18">case <expr pos:start="2599:14" pos:end="2599:17"><literal type="number" pos:start="2599:14" pos:end="2599:17">0x70</literal></expr>:</case> <comment type="block" pos:start="2599:20" pos:end="2599:36">/* pshufx insn */</comment>

        <case pos:start="2601:9" pos:end="2601:18">case <expr pos:start="2601:14" pos:end="2601:17"><literal type="number" pos:start="2601:14" pos:end="2601:17">0xc6</literal></expr>:</case> <comment type="block" pos:start="2601:20" pos:end="2601:36">/* pshufx insn */</comment>

        <case pos:start="2603:9" pos:end="2603:18">case <expr pos:start="2603:14" pos:end="2603:17"><literal type="number" pos:start="2603:14" pos:end="2603:17">0xc2</literal></expr>:</case> <comment type="block" pos:start="2603:20" pos:end="2603:38">/* compare insns */</comment>

            <expr_stmt pos:start="2605:13" pos:end="2605:30"><expr pos:start="2605:13" pos:end="2605:29"><name pos:start="2605:13" pos:end="2605:25"><name pos:start="2605:13" pos:end="2605:13">s</name><operator pos:start="2605:14" pos:end="2605:15">-&gt;</operator><name pos:start="2605:16" pos:end="2605:25">rip_offset</name></name> <operator pos:start="2605:27" pos:end="2605:27">=</operator> <literal type="number" pos:start="2605:29" pos:end="2605:29">1</literal></expr>;</expr_stmt>

            <break pos:start="2607:13" pos:end="2607:18">break;</break>

        <default pos:start="2609:9" pos:end="2609:16">default:</default>

            <break pos:start="2611:13" pos:end="2611:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="2615:9" pos:end="2735:9"><if pos:start="2615:9" pos:end="2715:9">if <condition pos:start="2615:12" pos:end="2615:19">(<expr pos:start="2615:13" pos:end="2615:18"><name pos:start="2615:13" pos:end="2615:18">is_xmm</name></expr>)</condition> <block pos:start="2615:21" pos:end="2715:9">{<block_content pos:start="2617:13" pos:end="2713:13">

            <expr_stmt pos:start="2617:13" pos:end="2617:61"><expr pos:start="2617:13" pos:end="2617:60"><name pos:start="2617:13" pos:end="2617:22">op1_offset</name> <operator pos:start="2617:24" pos:end="2617:24">=</operator> <call pos:start="2617:26" pos:end="2617:60"><name pos:start="2617:26" pos:end="2617:33">offsetof</name><argument_list pos:start="2617:34" pos:end="2617:60">(<argument pos:start="2617:35" pos:end="2617:45"><expr pos:start="2617:35" pos:end="2617:45"><name pos:start="2617:35" pos:end="2617:45">CPUX86State</name></expr></argument>,<argument pos:start="2617:47" pos:end="2617:59"><expr pos:start="2617:47" pos:end="2617:59"><name pos:start="2617:47" pos:end="2617:59"><name pos:start="2617:47" pos:end="2617:54">xmm_regs</name><index pos:start="2617:55" pos:end="2617:59">[<expr pos:start="2617:56" pos:end="2617:58"><name pos:start="2617:56" pos:end="2617:58">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2619:13" pos:end="2713:13"><if pos:start="2619:13" pos:end="2707:13">if <condition pos:start="2619:16" pos:end="2619:25">(<expr pos:start="2619:17" pos:end="2619:24"><name pos:start="2619:17" pos:end="2619:19">mod</name> <operator pos:start="2619:21" pos:end="2619:22">!=</operator> <literal type="number" pos:start="2619:24" pos:end="2619:24">3</literal></expr>)</condition> <block pos:start="2619:27" pos:end="2707:13">{<block_content pos:start="2621:17" pos:end="2705:17">

                <decl_stmt pos:start="2621:17" pos:end="2621:27"><decl pos:start="2621:17" pos:end="2621:26"><type pos:start="2621:17" pos:end="2621:19"><name pos:start="2621:17" pos:end="2621:19">int</name></type> <name pos:start="2621:21" pos:end="2621:22">sz</name> <init pos:start="2621:24" pos:end="2621:26">= <expr pos:start="2621:26" pos:end="2621:26"><literal type="number" pos:start="2621:26" pos:end="2621:26">4</literal></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="2625:17" pos:end="2625:45"><expr pos:start="2625:17" pos:end="2625:44"><call pos:start="2625:17" pos:end="2625:44"><name pos:start="2625:17" pos:end="2625:29">gen_lea_modrm</name><argument_list pos:start="2625:30" pos:end="2625:44">(<argument pos:start="2625:31" pos:end="2625:33"><expr pos:start="2625:31" pos:end="2625:33"><name pos:start="2625:31" pos:end="2625:33">env</name></expr></argument>, <argument pos:start="2625:36" pos:end="2625:36"><expr pos:start="2625:36" pos:end="2625:36"><name pos:start="2625:36" pos:end="2625:36">s</name></expr></argument>, <argument pos:start="2625:39" pos:end="2625:43"><expr pos:start="2625:39" pos:end="2625:43"><name pos:start="2625:39" pos:end="2625:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2627:17" pos:end="2627:58"><expr pos:start="2627:17" pos:end="2627:57"><name pos:start="2627:17" pos:end="2627:26">op2_offset</name> <operator pos:start="2627:28" pos:end="2627:28">=</operator> <call pos:start="2627:30" pos:end="2627:57"><name pos:start="2627:30" pos:end="2627:37">offsetof</name><argument_list pos:start="2627:38" pos:end="2627:57">(<argument pos:start="2627:39" pos:end="2627:49"><expr pos:start="2627:39" pos:end="2627:49"><name pos:start="2627:39" pos:end="2627:49">CPUX86State</name></expr></argument>,<argument pos:start="2627:51" pos:end="2627:56"><expr pos:start="2627:51" pos:end="2627:56"><name pos:start="2627:51" pos:end="2627:56">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <switch pos:start="2631:17" pos:end="2671:17">switch <condition pos:start="2631:24" pos:end="2631:26">(<expr pos:start="2631:25" pos:end="2631:25"><name pos:start="2631:25" pos:end="2631:25">b</name></expr>)</condition> <block pos:start="2631:28" pos:end="2671:17">{<block_content pos:start="2633:17" pos:end="2669:26">

                <case pos:start="2633:17" pos:end="2633:35">case <expr pos:start="2633:22" pos:end="2633:34"><literal type="number" pos:start="2633:22" pos:end="2633:25">0x50</literal> <operator pos:start="2633:27" pos:end="2633:29">...</operator> <literal type="number" pos:start="2633:31" pos:end="2633:34">0x5a</literal></expr>:</case>

                <case pos:start="2635:17" pos:end="2635:35">case <expr pos:start="2635:22" pos:end="2635:34"><literal type="number" pos:start="2635:22" pos:end="2635:25">0x5c</literal> <operator pos:start="2635:27" pos:end="2635:29">...</operator> <literal type="number" pos:start="2635:31" pos:end="2635:34">0x5f</literal></expr>:</case>

                <case pos:start="2637:17" pos:end="2637:26">case <expr pos:start="2637:22" pos:end="2637:25"><literal type="number" pos:start="2637:22" pos:end="2637:25">0xc2</literal></expr>:</case>

                    <comment type="block" pos:start="2639:21" pos:end="2639:54">/* Most sse scalar operations.  */</comment>

                    <if_stmt pos:start="2641:21" pos:end="2649:21"><if pos:start="2641:21" pos:end="2645:21">if <condition pos:start="2641:24" pos:end="2641:32">(<expr pos:start="2641:25" pos:end="2641:31"><name pos:start="2641:25" pos:end="2641:26">b1</name> <operator pos:start="2641:28" pos:end="2641:29">==</operator> <literal type="number" pos:start="2641:31" pos:end="2641:31">2</literal></expr>)</condition> <block pos:start="2641:34" pos:end="2645:21">{<block_content pos:start="2643:25" pos:end="2643:31">

                        <expr_stmt pos:start="2643:25" pos:end="2643:31"><expr pos:start="2643:25" pos:end="2643:30"><name pos:start="2643:25" pos:end="2643:26">sz</name> <operator pos:start="2643:28" pos:end="2643:28">=</operator> <literal type="number" pos:start="2643:30" pos:end="2643:30">2</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="2645:23" pos:end="2649:21">else if <condition pos:start="2645:31" pos:end="2645:39">(<expr pos:start="2645:32" pos:end="2645:38"><name pos:start="2645:32" pos:end="2645:33">b1</name> <operator pos:start="2645:35" pos:end="2645:36">==</operator> <literal type="number" pos:start="2645:38" pos:end="2645:38">3</literal></expr>)</condition> <block pos:start="2645:41" pos:end="2649:21">{<block_content pos:start="2647:25" pos:end="2647:31">

                        <expr_stmt pos:start="2647:25" pos:end="2647:31"><expr pos:start="2647:25" pos:end="2647:30"><name pos:start="2647:25" pos:end="2647:26">sz</name> <operator pos:start="2647:28" pos:end="2647:28">=</operator> <literal type="number" pos:start="2647:30" pos:end="2647:30">3</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="2651:21" pos:end="2651:26">break;</break>



                <case pos:start="2655:17" pos:end="2655:26">case <expr pos:start="2655:22" pos:end="2655:25"><literal type="number" pos:start="2655:22" pos:end="2655:25">0x2e</literal></expr>:</case>  <comment type="block" pos:start="2655:29" pos:end="2655:44">/* ucomis[sd] */</comment>

                <case pos:start="2657:17" pos:end="2657:26">case <expr pos:start="2657:22" pos:end="2657:25"><literal type="number" pos:start="2657:22" pos:end="2657:25">0x2f</literal></expr>:</case>  <comment type="block" pos:start="2657:29" pos:end="2657:43">/* comis[sd] */</comment>

                    <if_stmt pos:start="2659:21" pos:end="2667:21"><if pos:start="2659:21" pos:end="2663:21">if <condition pos:start="2659:24" pos:end="2659:32">(<expr pos:start="2659:25" pos:end="2659:31"><name pos:start="2659:25" pos:end="2659:26">b1</name> <operator pos:start="2659:28" pos:end="2659:29">==</operator> <literal type="number" pos:start="2659:31" pos:end="2659:31">0</literal></expr>)</condition> <block pos:start="2659:34" pos:end="2663:21">{<block_content pos:start="2661:25" pos:end="2661:31">

                        <expr_stmt pos:start="2661:25" pos:end="2661:31"><expr pos:start="2661:25" pos:end="2661:30"><name pos:start="2661:25" pos:end="2661:26">sz</name> <operator pos:start="2661:28" pos:end="2661:28">=</operator> <literal type="number" pos:start="2661:30" pos:end="2661:30">2</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2663:23" pos:end="2667:21">else <block pos:start="2663:28" pos:end="2667:21">{<block_content pos:start="2665:25" pos:end="2665:31">

                        <expr_stmt pos:start="2665:25" pos:end="2665:31"><expr pos:start="2665:25" pos:end="2665:30"><name pos:start="2665:25" pos:end="2665:26">sz</name> <operator pos:start="2665:28" pos:end="2665:28">=</operator> <literal type="number" pos:start="2665:30" pos:end="2665:30">3</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="2669:21" pos:end="2669:26">break;</break>

                </block_content>}</block></switch>



                <switch pos:start="2675:17" pos:end="2705:17">switch <condition pos:start="2675:24" pos:end="2675:27">(<expr pos:start="2675:25" pos:end="2675:26"><name pos:start="2675:25" pos:end="2675:26">sz</name></expr>)</condition> <block pos:start="2675:29" pos:end="2705:17">{<block_content pos:start="2677:17" pos:end="2703:26">

                <case pos:start="2677:17" pos:end="2677:23">case <expr pos:start="2677:22" pos:end="2677:22"><literal type="number" pos:start="2677:22" pos:end="2677:22">2</literal></expr>:</case>

                    <comment type="block" pos:start="2679:21" pos:end="2679:39">/* 32 bit access */</comment>

                    <expr_stmt pos:start="2681:21" pos:end="2681:60"><expr pos:start="2681:21" pos:end="2681:59"><call pos:start="2681:21" pos:end="2681:59"><name pos:start="2681:21" pos:end="2681:31">gen_op_ld_v</name><argument_list pos:start="2681:32" pos:end="2681:59">(<argument pos:start="2681:33" pos:end="2681:33"><expr pos:start="2681:33" pos:end="2681:33"><name pos:start="2681:33" pos:end="2681:33">s</name></expr></argument>, <argument pos:start="2681:36" pos:end="2681:40"><expr pos:start="2681:36" pos:end="2681:40"><name pos:start="2681:36" pos:end="2681:40">MO_32</name></expr></argument>, <argument pos:start="2681:43" pos:end="2681:50"><expr pos:start="2681:43" pos:end="2681:50"><name pos:start="2681:43" pos:end="2681:50"><name pos:start="2681:43" pos:end="2681:47">cpu_T</name><index pos:start="2681:48" pos:end="2681:50">[<expr pos:start="2681:49" pos:end="2681:49"><literal type="number" pos:start="2681:49" pos:end="2681:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2681:53" pos:end="2681:58"><expr pos:start="2681:53" pos:end="2681:58"><name pos:start="2681:53" pos:end="2681:58">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2683:21" pos:end="2685:75"><expr pos:start="2683:21" pos:end="2685:74"><call pos:start="2683:21" pos:end="2685:74"><name pos:start="2683:21" pos:end="2683:35">tcg_gen_st32_tl</name><argument_list pos:start="2683:36" pos:end="2685:74">(<argument pos:start="2683:37" pos:end="2683:44"><expr pos:start="2683:37" pos:end="2683:44"><name pos:start="2683:37" pos:end="2683:44"><name pos:start="2683:37" pos:end="2683:41">cpu_T</name><index pos:start="2683:42" pos:end="2683:44">[<expr pos:start="2683:43" pos:end="2683:43"><literal type="number" pos:start="2683:43" pos:end="2683:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="2683:47" pos:end="2683:53"><expr pos:start="2683:47" pos:end="2683:53"><name pos:start="2683:47" pos:end="2683:53">cpu_env</name></expr></argument>,

                                    <argument pos:start="2685:37" pos:end="2685:73"><expr pos:start="2685:37" pos:end="2685:73"><call pos:start="2685:37" pos:end="2685:73"><name pos:start="2685:37" pos:end="2685:44">offsetof</name><argument_list pos:start="2685:45" pos:end="2685:73">(<argument pos:start="2685:46" pos:end="2685:56"><expr pos:start="2685:46" pos:end="2685:56"><name pos:start="2685:46" pos:end="2685:56">CPUX86State</name></expr></argument>,<argument pos:start="2685:58" pos:end="2685:72"><expr pos:start="2685:58" pos:end="2685:72"><call pos:start="2685:58" pos:end="2685:72"><name pos:start="2685:58" pos:end="2685:69"><name pos:start="2685:58" pos:end="2685:63">xmm_t0</name><operator pos:start="2685:64" pos:end="2685:64">.</operator><name pos:start="2685:65" pos:end="2685:69">XMM_L</name></name><argument_list pos:start="2685:70" pos:end="2685:72">(<argument pos:start="2685:71" pos:end="2685:71"><expr pos:start="2685:71" pos:end="2685:71"><literal type="number" pos:start="2685:71" pos:end="2685:71">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2687:21" pos:end="2687:26">break;</break>

                <case pos:start="2689:17" pos:end="2689:23">case <expr pos:start="2689:22" pos:end="2689:22"><literal type="number" pos:start="2689:22" pos:end="2689:22">3</literal></expr>:</case>

                    <comment type="block" pos:start="2691:21" pos:end="2691:39">/* 64 bit access */</comment>

                    <expr_stmt pos:start="2693:21" pos:end="2693:78"><expr pos:start="2693:21" pos:end="2693:77"><call pos:start="2693:21" pos:end="2693:77"><name pos:start="2693:21" pos:end="2693:34">gen_ldq_env_A0</name><argument_list pos:start="2693:35" pos:end="2693:77">(<argument pos:start="2693:36" pos:end="2693:36"><expr pos:start="2693:36" pos:end="2693:36"><name pos:start="2693:36" pos:end="2693:36">s</name></expr></argument>, <argument pos:start="2693:39" pos:end="2693:76"><expr pos:start="2693:39" pos:end="2693:76"><call pos:start="2693:39" pos:end="2693:76"><name pos:start="2693:39" pos:end="2693:46">offsetof</name><argument_list pos:start="2693:47" pos:end="2693:76">(<argument pos:start="2693:48" pos:end="2693:58"><expr pos:start="2693:48" pos:end="2693:58"><name pos:start="2693:48" pos:end="2693:58">CPUX86State</name></expr></argument>, <argument pos:start="2693:61" pos:end="2693:75"><expr pos:start="2693:61" pos:end="2693:75"><call pos:start="2693:61" pos:end="2693:75"><name pos:start="2693:61" pos:end="2693:72"><name pos:start="2693:61" pos:end="2693:66">xmm_t0</name><operator pos:start="2693:67" pos:end="2693:67">.</operator><name pos:start="2693:68" pos:end="2693:72">XMM_D</name></name><argument_list pos:start="2693:73" pos:end="2693:75">(<argument pos:start="2693:74" pos:end="2693:74"><expr pos:start="2693:74" pos:end="2693:74"><literal type="number" pos:start="2693:74" pos:end="2693:74">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2695:21" pos:end="2695:26">break;</break>

                <default pos:start="2697:17" pos:end="2697:24">default:</default>

                    <comment type="block" pos:start="2699:21" pos:end="2699:40">/* 128 bit access */</comment>

                    <expr_stmt pos:start="2701:21" pos:end="2701:50"><expr pos:start="2701:21" pos:end="2701:49"><call pos:start="2701:21" pos:end="2701:49"><name pos:start="2701:21" pos:end="2701:34">gen_ldo_env_A0</name><argument_list pos:start="2701:35" pos:end="2701:49">(<argument pos:start="2701:36" pos:end="2701:36"><expr pos:start="2701:36" pos:end="2701:36"><name pos:start="2701:36" pos:end="2701:36">s</name></expr></argument>, <argument pos:start="2701:39" pos:end="2701:48"><expr pos:start="2701:39" pos:end="2701:48"><name pos:start="2701:39" pos:end="2701:48">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2703:21" pos:end="2703:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="2707:15" pos:end="2713:13">else <block pos:start="2707:20" pos:end="2713:13">{<block_content pos:start="2709:17" pos:end="2711:64">

                <expr_stmt pos:start="2709:17" pos:end="2709:44"><expr pos:start="2709:17" pos:end="2709:43"><name pos:start="2709:17" pos:end="2709:18">rm</name> <operator pos:start="2709:20" pos:end="2709:20">=</operator> <operator pos:start="2709:22" pos:end="2709:22">(</operator><name pos:start="2709:23" pos:end="2709:27">modrm</name> <operator pos:start="2709:29" pos:end="2709:29">&amp;</operator> <literal type="number" pos:start="2709:31" pos:end="2709:31">7</literal><operator pos:start="2709:32" pos:end="2709:32">)</operator> <operator pos:start="2709:34" pos:end="2709:34">|</operator> <call pos:start="2709:36" pos:end="2709:43"><name pos:start="2709:36" pos:end="2709:40">REX_B</name><argument_list pos:start="2709:41" pos:end="2709:43">(<argument pos:start="2709:42" pos:end="2709:42"><expr pos:start="2709:42" pos:end="2709:42"><name pos:start="2709:42" pos:end="2709:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2711:17" pos:end="2711:64"><expr pos:start="2711:17" pos:end="2711:63"><name pos:start="2711:17" pos:end="2711:26">op2_offset</name> <operator pos:start="2711:28" pos:end="2711:28">=</operator> <call pos:start="2711:30" pos:end="2711:63"><name pos:start="2711:30" pos:end="2711:37">offsetof</name><argument_list pos:start="2711:38" pos:end="2711:63">(<argument pos:start="2711:39" pos:end="2711:49"><expr pos:start="2711:39" pos:end="2711:49"><name pos:start="2711:39" pos:end="2711:49">CPUX86State</name></expr></argument>,<argument pos:start="2711:51" pos:end="2711:62"><expr pos:start="2711:51" pos:end="2711:62"><name pos:start="2711:51" pos:end="2711:62"><name pos:start="2711:51" pos:end="2711:58">xmm_regs</name><index pos:start="2711:59" pos:end="2711:62">[<expr pos:start="2711:60" pos:end="2711:61"><name pos:start="2711:60" pos:end="2711:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="2715:11" pos:end="2735:9">else <block pos:start="2715:16" pos:end="2735:9">{<block_content pos:start="2717:13" pos:end="2733:13">

            <expr_stmt pos:start="2717:13" pos:end="2717:63"><expr pos:start="2717:13" pos:end="2717:62"><name pos:start="2717:13" pos:end="2717:22">op1_offset</name> <operator pos:start="2717:24" pos:end="2717:24">=</operator> <call pos:start="2717:26" pos:end="2717:62"><name pos:start="2717:26" pos:end="2717:33">offsetof</name><argument_list pos:start="2717:34" pos:end="2717:62">(<argument pos:start="2717:35" pos:end="2717:45"><expr pos:start="2717:35" pos:end="2717:45"><name pos:start="2717:35" pos:end="2717:45">CPUX86State</name></expr></argument>,<argument pos:start="2717:47" pos:end="2717:61"><expr pos:start="2717:47" pos:end="2717:61"><name pos:start="2717:47" pos:end="2717:57"><name pos:start="2717:47" pos:end="2717:52">fpregs</name><index pos:start="2717:53" pos:end="2717:57">[<expr pos:start="2717:54" pos:end="2717:56"><name pos:start="2717:54" pos:end="2717:56">reg</name></expr>]</index></name><operator pos:start="2717:58" pos:end="2717:58">.</operator><name pos:start="2717:59" pos:end="2717:61">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2719:13" pos:end="2733:13"><if pos:start="2719:13" pos:end="2727:13">if <condition pos:start="2719:16" pos:end="2719:25">(<expr pos:start="2719:17" pos:end="2719:24"><name pos:start="2719:17" pos:end="2719:19">mod</name> <operator pos:start="2719:21" pos:end="2719:22">!=</operator> <literal type="number" pos:start="2719:24" pos:end="2719:24">3</literal></expr>)</condition> <block pos:start="2719:27" pos:end="2727:13">{<block_content pos:start="2721:17" pos:end="2725:46">

                <expr_stmt pos:start="2721:17" pos:end="2721:45"><expr pos:start="2721:17" pos:end="2721:44"><call pos:start="2721:17" pos:end="2721:44"><name pos:start="2721:17" pos:end="2721:29">gen_lea_modrm</name><argument_list pos:start="2721:30" pos:end="2721:44">(<argument pos:start="2721:31" pos:end="2721:33"><expr pos:start="2721:31" pos:end="2721:33"><name pos:start="2721:31" pos:end="2721:33">env</name></expr></argument>, <argument pos:start="2721:36" pos:end="2721:36"><expr pos:start="2721:36" pos:end="2721:36"><name pos:start="2721:36" pos:end="2721:36">s</name></expr></argument>, <argument pos:start="2721:39" pos:end="2721:43"><expr pos:start="2721:39" pos:end="2721:43"><name pos:start="2721:39" pos:end="2721:43">modrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2723:17" pos:end="2723:58"><expr pos:start="2723:17" pos:end="2723:57"><name pos:start="2723:17" pos:end="2723:26">op2_offset</name> <operator pos:start="2723:28" pos:end="2723:28">=</operator> <call pos:start="2723:30" pos:end="2723:57"><name pos:start="2723:30" pos:end="2723:37">offsetof</name><argument_list pos:start="2723:38" pos:end="2723:57">(<argument pos:start="2723:39" pos:end="2723:49"><expr pos:start="2723:39" pos:end="2723:49"><name pos:start="2723:39" pos:end="2723:49">CPUX86State</name></expr></argument>,<argument pos:start="2723:51" pos:end="2723:56"><expr pos:start="2723:51" pos:end="2723:56"><name pos:start="2723:51" pos:end="2723:56">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2725:17" pos:end="2725:46"><expr pos:start="2725:17" pos:end="2725:45"><call pos:start="2725:17" pos:end="2725:45"><name pos:start="2725:17" pos:end="2725:30">gen_ldq_env_A0</name><argument_list pos:start="2725:31" pos:end="2725:45">(<argument pos:start="2725:32" pos:end="2725:32"><expr pos:start="2725:32" pos:end="2725:32"><name pos:start="2725:32" pos:end="2725:32">s</name></expr></argument>, <argument pos:start="2725:35" pos:end="2725:44"><expr pos:start="2725:35" pos:end="2725:44"><name pos:start="2725:35" pos:end="2725:44">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2727:15" pos:end="2733:13">else <block pos:start="2727:20" pos:end="2733:13">{<block_content pos:start="2729:17" pos:end="2731:66">

                <expr_stmt pos:start="2729:17" pos:end="2729:33"><expr pos:start="2729:17" pos:end="2729:32"><name pos:start="2729:17" pos:end="2729:18">rm</name> <operator pos:start="2729:20" pos:end="2729:20">=</operator> <operator pos:start="2729:22" pos:end="2729:22">(</operator><name pos:start="2729:23" pos:end="2729:27">modrm</name> <operator pos:start="2729:29" pos:end="2729:29">&amp;</operator> <literal type="number" pos:start="2729:31" pos:end="2729:31">7</literal><operator pos:start="2729:32" pos:end="2729:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="2731:17" pos:end="2731:66"><expr pos:start="2731:17" pos:end="2731:65"><name pos:start="2731:17" pos:end="2731:26">op2_offset</name> <operator pos:start="2731:28" pos:end="2731:28">=</operator> <call pos:start="2731:30" pos:end="2731:65"><name pos:start="2731:30" pos:end="2731:37">offsetof</name><argument_list pos:start="2731:38" pos:end="2731:65">(<argument pos:start="2731:39" pos:end="2731:49"><expr pos:start="2731:39" pos:end="2731:49"><name pos:start="2731:39" pos:end="2731:49">CPUX86State</name></expr></argument>,<argument pos:start="2731:51" pos:end="2731:64"><expr pos:start="2731:51" pos:end="2731:64"><name pos:start="2731:51" pos:end="2731:60"><name pos:start="2731:51" pos:end="2731:56">fpregs</name><index pos:start="2731:57" pos:end="2731:60">[<expr pos:start="2731:58" pos:end="2731:59"><name pos:start="2731:58" pos:end="2731:59">rm</name></expr>]</index></name><operator pos:start="2731:61" pos:end="2731:61">.</operator><name pos:start="2731:62" pos:end="2731:64">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <switch pos:start="2737:9" pos:end="2841:9">switch<condition pos:start="2737:15" pos:end="2737:17">(<expr pos:start="2737:16" pos:end="2737:16"><name pos:start="2737:16" pos:end="2737:16">b</name></expr>)</condition> <block pos:start="2737:19" pos:end="2841:9">{<block_content pos:start="2739:9" pos:end="2839:18">

        <case pos:start="2739:9" pos:end="2739:18">case <expr pos:start="2739:14" pos:end="2739:17"><literal type="number" pos:start="2739:14" pos:end="2739:17">0x0f</literal></expr>:</case> <comment type="block" pos:start="2739:20" pos:end="2739:42">/* 3DNow! data insns */</comment>

            <if_stmt pos:start="2741:13" pos:end="2743:32"><if pos:start="2741:13" pos:end="2743:32">if <condition pos:start="2741:16" pos:end="2741:61">(<expr pos:start="2741:17" pos:end="2741:60"><operator pos:start="2741:17" pos:end="2741:17">!</operator><operator pos:start="2741:18" pos:end="2741:18">(</operator><name pos:start="2741:19" pos:end="2741:40"><name pos:start="2741:19" pos:end="2741:19">s</name><operator pos:start="2741:20" pos:end="2741:21">-&gt;</operator><name pos:start="2741:22" pos:end="2741:40">cpuid_ext2_features</name></name> <operator pos:start="2741:42" pos:end="2741:42">&amp;</operator> <name pos:start="2741:44" pos:end="2741:59">CPUID_EXT2_3DNOW</name><operator pos:start="2741:60" pos:end="2741:60">)</operator></expr>)</condition><block type="pseudo" pos:start="2743:17" pos:end="2743:32"><block_content pos:start="2743:17" pos:end="2743:32">

                <goto pos:start="2743:17" pos:end="2743:32">goto <name pos:start="2743:22" pos:end="2743:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2745:13" pos:end="2745:46"><expr pos:start="2745:13" pos:end="2745:45"><name pos:start="2745:13" pos:end="2745:15">val</name> <operator pos:start="2745:17" pos:end="2745:17">=</operator> <call pos:start="2745:19" pos:end="2745:45"><name pos:start="2745:19" pos:end="2745:31">cpu_ldub_code</name><argument_list pos:start="2745:32" pos:end="2745:45">(<argument pos:start="2745:33" pos:end="2745:35"><expr pos:start="2745:33" pos:end="2745:35"><name pos:start="2745:33" pos:end="2745:35">env</name></expr></argument>, <argument pos:start="2745:38" pos:end="2745:44"><expr pos:start="2745:38" pos:end="2745:44"><name pos:start="2745:38" pos:end="2745:42"><name pos:start="2745:38" pos:end="2745:38">s</name><operator pos:start="2745:39" pos:end="2745:40">-&gt;</operator><name pos:start="2745:41" pos:end="2745:42">pc</name></name><operator pos:start="2745:43" pos:end="2745:44">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2747:13" pos:end="2747:44"><expr pos:start="2747:13" pos:end="2747:43"><name pos:start="2747:13" pos:end="2747:22">sse_fn_epp</name> <operator pos:start="2747:24" pos:end="2747:24">=</operator> <name pos:start="2747:26" pos:end="2747:43"><name pos:start="2747:26" pos:end="2747:38">sse_op_table5</name><index pos:start="2747:39" pos:end="2747:43">[<expr pos:start="2747:40" pos:end="2747:42"><name pos:start="2747:40" pos:end="2747:42">val</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="2749:13" pos:end="2753:13"><if pos:start="2749:13" pos:end="2753:13">if <condition pos:start="2749:16" pos:end="2749:28">(<expr pos:start="2749:17" pos:end="2749:27"><operator pos:start="2749:17" pos:end="2749:17">!</operator><name pos:start="2749:18" pos:end="2749:27">sse_fn_epp</name></expr>)</condition> <block pos:start="2749:30" pos:end="2753:13">{<block_content pos:start="2751:17" pos:end="2751:32">

                <goto pos:start="2751:17" pos:end="2751:32">goto <name pos:start="2751:22" pos:end="2751:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="2755:13" pos:end="2755:60"><expr pos:start="2755:13" pos:end="2755:59"><call pos:start="2755:13" pos:end="2755:59"><name pos:start="2755:13" pos:end="2755:28">tcg_gen_addi_ptr</name><argument_list pos:start="2755:29" pos:end="2755:59">(<argument pos:start="2755:30" pos:end="2755:37"><expr pos:start="2755:30" pos:end="2755:37"><name pos:start="2755:30" pos:end="2755:37">cpu_ptr0</name></expr></argument>, <argument pos:start="2755:40" pos:end="2755:46"><expr pos:start="2755:40" pos:end="2755:46"><name pos:start="2755:40" pos:end="2755:46">cpu_env</name></expr></argument>, <argument pos:start="2755:49" pos:end="2755:58"><expr pos:start="2755:49" pos:end="2755:58"><name pos:start="2755:49" pos:end="2755:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2757:13" pos:end="2757:60"><expr pos:start="2757:13" pos:end="2757:59"><call pos:start="2757:13" pos:end="2757:59"><name pos:start="2757:13" pos:end="2757:28">tcg_gen_addi_ptr</name><argument_list pos:start="2757:29" pos:end="2757:59">(<argument pos:start="2757:30" pos:end="2757:37"><expr pos:start="2757:30" pos:end="2757:37"><name pos:start="2757:30" pos:end="2757:37">cpu_ptr1</name></expr></argument>, <argument pos:start="2757:40" pos:end="2757:46"><expr pos:start="2757:40" pos:end="2757:46"><name pos:start="2757:40" pos:end="2757:46">cpu_env</name></expr></argument>, <argument pos:start="2757:49" pos:end="2757:58"><expr pos:start="2757:49" pos:end="2757:58"><name pos:start="2757:49" pos:end="2757:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2759:13" pos:end="2759:52"><expr pos:start="2759:13" pos:end="2759:51"><call pos:start="2759:13" pos:end="2759:51"><name pos:start="2759:13" pos:end="2759:22">sse_fn_epp</name><argument_list pos:start="2759:23" pos:end="2759:51">(<argument pos:start="2759:24" pos:end="2759:30"><expr pos:start="2759:24" pos:end="2759:30"><name pos:start="2759:24" pos:end="2759:30">cpu_env</name></expr></argument>, <argument pos:start="2759:33" pos:end="2759:40"><expr pos:start="2759:33" pos:end="2759:40"><name pos:start="2759:33" pos:end="2759:40">cpu_ptr0</name></expr></argument>, <argument pos:start="2759:43" pos:end="2759:50"><expr pos:start="2759:43" pos:end="2759:50"><name pos:start="2759:43" pos:end="2759:50">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2761:13" pos:end="2761:18">break;</break>

        <case pos:start="2763:9" pos:end="2763:18">case <expr pos:start="2763:14" pos:end="2763:17"><literal type="number" pos:start="2763:14" pos:end="2763:17">0x70</literal></expr>:</case> <comment type="block" pos:start="2763:20" pos:end="2763:36">/* pshufx insn */</comment>

        <case pos:start="2765:9" pos:end="2765:18">case <expr pos:start="2765:14" pos:end="2765:17"><literal type="number" pos:start="2765:14" pos:end="2765:17">0xc6</literal></expr>:</case> <comment type="block" pos:start="2765:20" pos:end="2765:36">/* pshufx insn */</comment>

            <expr_stmt pos:start="2767:13" pos:end="2767:46"><expr pos:start="2767:13" pos:end="2767:45"><name pos:start="2767:13" pos:end="2767:15">val</name> <operator pos:start="2767:17" pos:end="2767:17">=</operator> <call pos:start="2767:19" pos:end="2767:45"><name pos:start="2767:19" pos:end="2767:31">cpu_ldub_code</name><argument_list pos:start="2767:32" pos:end="2767:45">(<argument pos:start="2767:33" pos:end="2767:35"><expr pos:start="2767:33" pos:end="2767:35"><name pos:start="2767:33" pos:end="2767:35">env</name></expr></argument>, <argument pos:start="2767:38" pos:end="2767:44"><expr pos:start="2767:38" pos:end="2767:44"><name pos:start="2767:38" pos:end="2767:42"><name pos:start="2767:38" pos:end="2767:38">s</name><operator pos:start="2767:39" pos:end="2767:40">-&gt;</operator><name pos:start="2767:41" pos:end="2767:42">pc</name></name><operator pos:start="2767:43" pos:end="2767:44">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2769:13" pos:end="2769:60"><expr pos:start="2769:13" pos:end="2769:59"><call pos:start="2769:13" pos:end="2769:59"><name pos:start="2769:13" pos:end="2769:28">tcg_gen_addi_ptr</name><argument_list pos:start="2769:29" pos:end="2769:59">(<argument pos:start="2769:30" pos:end="2769:37"><expr pos:start="2769:30" pos:end="2769:37"><name pos:start="2769:30" pos:end="2769:37">cpu_ptr0</name></expr></argument>, <argument pos:start="2769:40" pos:end="2769:46"><expr pos:start="2769:40" pos:end="2769:46"><name pos:start="2769:40" pos:end="2769:46">cpu_env</name></expr></argument>, <argument pos:start="2769:49" pos:end="2769:58"><expr pos:start="2769:49" pos:end="2769:58"><name pos:start="2769:49" pos:end="2769:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2771:13" pos:end="2771:60"><expr pos:start="2771:13" pos:end="2771:59"><call pos:start="2771:13" pos:end="2771:59"><name pos:start="2771:13" pos:end="2771:28">tcg_gen_addi_ptr</name><argument_list pos:start="2771:29" pos:end="2771:59">(<argument pos:start="2771:30" pos:end="2771:37"><expr pos:start="2771:30" pos:end="2771:37"><name pos:start="2771:30" pos:end="2771:37">cpu_ptr1</name></expr></argument>, <argument pos:start="2771:40" pos:end="2771:46"><expr pos:start="2771:40" pos:end="2771:46"><name pos:start="2771:40" pos:end="2771:46">cpu_env</name></expr></argument>, <argument pos:start="2771:49" pos:end="2771:58"><expr pos:start="2771:49" pos:end="2771:58"><name pos:start="2771:49" pos:end="2771:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="2773:13" pos:end="2773:45">/* XXX: introduce a new table? */</comment>

            <expr_stmt pos:start="2775:13" pos:end="2775:51"><expr pos:start="2775:13" pos:end="2775:50"><name pos:start="2775:13" pos:end="2775:22">sse_fn_ppi</name> <operator pos:start="2775:24" pos:end="2775:24">=</operator> <operator pos:start="2775:26" pos:end="2775:26">(</operator><name pos:start="2775:27" pos:end="2775:39">SSEFunc_0_ppi</name><operator pos:start="2775:40" pos:end="2775:40">)</operator><name pos:start="2775:41" pos:end="2775:50">sse_fn_epp</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2777:13" pos:end="2777:63"><expr pos:start="2777:13" pos:end="2777:62"><call pos:start="2777:13" pos:end="2777:62"><name pos:start="2777:13" pos:end="2777:22">sse_fn_ppi</name><argument_list pos:start="2777:23" pos:end="2777:62">(<argument pos:start="2777:24" pos:end="2777:31"><expr pos:start="2777:24" pos:end="2777:31"><name pos:start="2777:24" pos:end="2777:31">cpu_ptr0</name></expr></argument>, <argument pos:start="2777:34" pos:end="2777:41"><expr pos:start="2777:34" pos:end="2777:41"><name pos:start="2777:34" pos:end="2777:41">cpu_ptr1</name></expr></argument>, <argument pos:start="2777:44" pos:end="2777:61"><expr pos:start="2777:44" pos:end="2777:61"><call pos:start="2777:44" pos:end="2777:61"><name pos:start="2777:44" pos:end="2777:56">tcg_const_i32</name><argument_list pos:start="2777:57" pos:end="2777:61">(<argument pos:start="2777:58" pos:end="2777:60"><expr pos:start="2777:58" pos:end="2777:60"><name pos:start="2777:58" pos:end="2777:60">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2779:13" pos:end="2779:18">break;</break>

        <case pos:start="2781:9" pos:end="2781:18">case <expr pos:start="2781:14" pos:end="2781:17"><literal type="number" pos:start="2781:14" pos:end="2781:17">0xc2</literal></expr>:</case>

            <comment type="block" pos:start="2783:13" pos:end="2783:31">/* compare insns */</comment>

            <expr_stmt pos:start="2785:13" pos:end="2785:46"><expr pos:start="2785:13" pos:end="2785:45"><name pos:start="2785:13" pos:end="2785:15">val</name> <operator pos:start="2785:17" pos:end="2785:17">=</operator> <call pos:start="2785:19" pos:end="2785:45"><name pos:start="2785:19" pos:end="2785:31">cpu_ldub_code</name><argument_list pos:start="2785:32" pos:end="2785:45">(<argument pos:start="2785:33" pos:end="2785:35"><expr pos:start="2785:33" pos:end="2785:35"><name pos:start="2785:33" pos:end="2785:35">env</name></expr></argument>, <argument pos:start="2785:38" pos:end="2785:44"><expr pos:start="2785:38" pos:end="2785:44"><name pos:start="2785:38" pos:end="2785:42"><name pos:start="2785:38" pos:end="2785:38">s</name><operator pos:start="2785:39" pos:end="2785:40">-&gt;</operator><name pos:start="2785:41" pos:end="2785:42">pc</name></name><operator pos:start="2785:43" pos:end="2785:44">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2787:13" pos:end="2789:32"><if pos:start="2787:13" pos:end="2789:32">if <condition pos:start="2787:16" pos:end="2787:25">(<expr pos:start="2787:17" pos:end="2787:24"><name pos:start="2787:17" pos:end="2787:19">val</name> <operator pos:start="2787:21" pos:end="2787:22">&gt;=</operator> <literal type="number" pos:start="2787:24" pos:end="2787:24">8</literal></expr>)</condition><block type="pseudo" pos:start="2789:17" pos:end="2789:32"><block_content pos:start="2789:17" pos:end="2789:32">

                <goto pos:start="2789:17" pos:end="2789:32">goto <name pos:start="2789:22" pos:end="2789:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2791:13" pos:end="2791:48"><expr pos:start="2791:13" pos:end="2791:47"><name pos:start="2791:13" pos:end="2791:22">sse_fn_epp</name> <operator pos:start="2791:24" pos:end="2791:24">=</operator> <name pos:start="2791:26" pos:end="2791:47"><name pos:start="2791:26" pos:end="2791:38">sse_op_table4</name><index pos:start="2791:39" pos:end="2791:43">[<expr pos:start="2791:40" pos:end="2791:42"><name pos:start="2791:40" pos:end="2791:42">val</name></expr>]</index><index pos:start="2791:44" pos:end="2791:47">[<expr pos:start="2791:45" pos:end="2791:46"><name pos:start="2791:45" pos:end="2791:46">b1</name></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="2795:13" pos:end="2795:60"><expr pos:start="2795:13" pos:end="2795:59"><call pos:start="2795:13" pos:end="2795:59"><name pos:start="2795:13" pos:end="2795:28">tcg_gen_addi_ptr</name><argument_list pos:start="2795:29" pos:end="2795:59">(<argument pos:start="2795:30" pos:end="2795:37"><expr pos:start="2795:30" pos:end="2795:37"><name pos:start="2795:30" pos:end="2795:37">cpu_ptr0</name></expr></argument>, <argument pos:start="2795:40" pos:end="2795:46"><expr pos:start="2795:40" pos:end="2795:46"><name pos:start="2795:40" pos:end="2795:46">cpu_env</name></expr></argument>, <argument pos:start="2795:49" pos:end="2795:58"><expr pos:start="2795:49" pos:end="2795:58"><name pos:start="2795:49" pos:end="2795:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2797:13" pos:end="2797:60"><expr pos:start="2797:13" pos:end="2797:59"><call pos:start="2797:13" pos:end="2797:59"><name pos:start="2797:13" pos:end="2797:28">tcg_gen_addi_ptr</name><argument_list pos:start="2797:29" pos:end="2797:59">(<argument pos:start="2797:30" pos:end="2797:37"><expr pos:start="2797:30" pos:end="2797:37"><name pos:start="2797:30" pos:end="2797:37">cpu_ptr1</name></expr></argument>, <argument pos:start="2797:40" pos:end="2797:46"><expr pos:start="2797:40" pos:end="2797:46"><name pos:start="2797:40" pos:end="2797:46">cpu_env</name></expr></argument>, <argument pos:start="2797:49" pos:end="2797:58"><expr pos:start="2797:49" pos:end="2797:58"><name pos:start="2797:49" pos:end="2797:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2799:13" pos:end="2799:52"><expr pos:start="2799:13" pos:end="2799:51"><call pos:start="2799:13" pos:end="2799:51"><name pos:start="2799:13" pos:end="2799:22">sse_fn_epp</name><argument_list pos:start="2799:23" pos:end="2799:51">(<argument pos:start="2799:24" pos:end="2799:30"><expr pos:start="2799:24" pos:end="2799:30"><name pos:start="2799:24" pos:end="2799:30">cpu_env</name></expr></argument>, <argument pos:start="2799:33" pos:end="2799:40"><expr pos:start="2799:33" pos:end="2799:40"><name pos:start="2799:33" pos:end="2799:40">cpu_ptr0</name></expr></argument>, <argument pos:start="2799:43" pos:end="2799:50"><expr pos:start="2799:43" pos:end="2799:50"><name pos:start="2799:43" pos:end="2799:50">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2801:13" pos:end="2801:18">break;</break>

        <case pos:start="2803:9" pos:end="2803:18">case <expr pos:start="2803:14" pos:end="2803:17"><literal type="number" pos:start="2803:14" pos:end="2803:17">0xf7</literal></expr>:</case>

            <comment type="block" pos:start="2805:13" pos:end="2805:46">/* maskmov : we must prepare A0 */</comment>

            <if_stmt pos:start="2807:13" pos:end="2809:32"><if pos:start="2807:13" pos:end="2809:32">if <condition pos:start="2807:16" pos:end="2807:25">(<expr pos:start="2807:17" pos:end="2807:24"><name pos:start="2807:17" pos:end="2807:19">mod</name> <operator pos:start="2807:21" pos:end="2807:22">!=</operator> <literal type="number" pos:start="2807:24" pos:end="2807:24">3</literal></expr>)</condition><block type="pseudo" pos:start="2809:17" pos:end="2809:32"><block_content pos:start="2809:17" pos:end="2809:32">

                <goto pos:start="2809:17" pos:end="2809:32">goto <name pos:start="2809:22" pos:end="2809:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2811:13" pos:end="2811:52"><expr pos:start="2811:13" pos:end="2811:51"><call pos:start="2811:13" pos:end="2811:51"><name pos:start="2811:13" pos:end="2811:26">tcg_gen_mov_tl</name><argument_list pos:start="2811:27" pos:end="2811:51">(<argument pos:start="2811:28" pos:end="2811:33"><expr pos:start="2811:28" pos:end="2811:33"><name pos:start="2811:28" pos:end="2811:33">cpu_A0</name></expr></argument>, <argument pos:start="2811:36" pos:end="2811:50"><expr pos:start="2811:36" pos:end="2811:50"><name pos:start="2811:36" pos:end="2811:50"><name pos:start="2811:36" pos:end="2811:43">cpu_regs</name><index pos:start="2811:44" pos:end="2811:50">[<expr pos:start="2811:45" pos:end="2811:49"><name pos:start="2811:45" pos:end="2811:49">R_EDI</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2813:13" pos:end="2813:39"><expr pos:start="2813:13" pos:end="2813:38"><call pos:start="2813:13" pos:end="2813:38"><name pos:start="2813:13" pos:end="2813:20">gen_extu</name><argument_list pos:start="2813:21" pos:end="2813:38">(<argument pos:start="2813:22" pos:end="2813:29"><expr pos:start="2813:22" pos:end="2813:29"><name pos:start="2813:22" pos:end="2813:29"><name pos:start="2813:22" pos:end="2813:22">s</name><operator pos:start="2813:23" pos:end="2813:24">-&gt;</operator><name pos:start="2813:25" pos:end="2813:29">aflag</name></name></expr></argument>, <argument pos:start="2813:32" pos:end="2813:37"><expr pos:start="2813:32" pos:end="2813:37"><name pos:start="2813:32" pos:end="2813:37">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2815:13" pos:end="2815:33"><expr pos:start="2815:13" pos:end="2815:32"><call pos:start="2815:13" pos:end="2815:32"><name pos:start="2815:13" pos:end="2815:29">gen_add_A0_ds_seg</name><argument_list pos:start="2815:30" pos:end="2815:32">(<argument pos:start="2815:31" pos:end="2815:31"><expr pos:start="2815:31" pos:end="2815:31"><name pos:start="2815:31" pos:end="2815:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="2819:13" pos:end="2819:60"><expr pos:start="2819:13" pos:end="2819:59"><call pos:start="2819:13" pos:end="2819:59"><name pos:start="2819:13" pos:end="2819:28">tcg_gen_addi_ptr</name><argument_list pos:start="2819:29" pos:end="2819:59">(<argument pos:start="2819:30" pos:end="2819:37"><expr pos:start="2819:30" pos:end="2819:37"><name pos:start="2819:30" pos:end="2819:37">cpu_ptr0</name></expr></argument>, <argument pos:start="2819:40" pos:end="2819:46"><expr pos:start="2819:40" pos:end="2819:46"><name pos:start="2819:40" pos:end="2819:46">cpu_env</name></expr></argument>, <argument pos:start="2819:49" pos:end="2819:58"><expr pos:start="2819:49" pos:end="2819:58"><name pos:start="2819:49" pos:end="2819:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2821:13" pos:end="2821:60"><expr pos:start="2821:13" pos:end="2821:59"><call pos:start="2821:13" pos:end="2821:59"><name pos:start="2821:13" pos:end="2821:28">tcg_gen_addi_ptr</name><argument_list pos:start="2821:29" pos:end="2821:59">(<argument pos:start="2821:30" pos:end="2821:37"><expr pos:start="2821:30" pos:end="2821:37"><name pos:start="2821:30" pos:end="2821:37">cpu_ptr1</name></expr></argument>, <argument pos:start="2821:40" pos:end="2821:46"><expr pos:start="2821:40" pos:end="2821:46"><name pos:start="2821:40" pos:end="2821:46">cpu_env</name></expr></argument>, <argument pos:start="2821:49" pos:end="2821:58"><expr pos:start="2821:49" pos:end="2821:58"><name pos:start="2821:49" pos:end="2821:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="2823:13" pos:end="2823:45">/* XXX: introduce a new table? */</comment>

            <expr_stmt pos:start="2825:13" pos:end="2825:53"><expr pos:start="2825:13" pos:end="2825:52"><name pos:start="2825:13" pos:end="2825:23">sse_fn_eppt</name> <operator pos:start="2825:25" pos:end="2825:25">=</operator> <operator pos:start="2825:27" pos:end="2825:27">(</operator><name pos:start="2825:28" pos:end="2825:41">SSEFunc_0_eppt</name><operator pos:start="2825:42" pos:end="2825:42">)</operator><name pos:start="2825:43" pos:end="2825:52">sse_fn_epp</name></expr>;</expr_stmt>

            <expr_stmt pos:start="2827:13" pos:end="2827:61"><expr pos:start="2827:13" pos:end="2827:60"><call pos:start="2827:13" pos:end="2827:60"><name pos:start="2827:13" pos:end="2827:23">sse_fn_eppt</name><argument_list pos:start="2827:24" pos:end="2827:60">(<argument pos:start="2827:25" pos:end="2827:31"><expr pos:start="2827:25" pos:end="2827:31"><name pos:start="2827:25" pos:end="2827:31">cpu_env</name></expr></argument>, <argument pos:start="2827:34" pos:end="2827:41"><expr pos:start="2827:34" pos:end="2827:41"><name pos:start="2827:34" pos:end="2827:41">cpu_ptr0</name></expr></argument>, <argument pos:start="2827:44" pos:end="2827:51"><expr pos:start="2827:44" pos:end="2827:51"><name pos:start="2827:44" pos:end="2827:51">cpu_ptr1</name></expr></argument>, <argument pos:start="2827:54" pos:end="2827:59"><expr pos:start="2827:54" pos:end="2827:59"><name pos:start="2827:54" pos:end="2827:59">cpu_A0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2829:13" pos:end="2829:18">break;</break>

        <default pos:start="2831:9" pos:end="2831:16">default:</default>

            <expr_stmt pos:start="2833:13" pos:end="2833:60"><expr pos:start="2833:13" pos:end="2833:59"><call pos:start="2833:13" pos:end="2833:59"><name pos:start="2833:13" pos:end="2833:28">tcg_gen_addi_ptr</name><argument_list pos:start="2833:29" pos:end="2833:59">(<argument pos:start="2833:30" pos:end="2833:37"><expr pos:start="2833:30" pos:end="2833:37"><name pos:start="2833:30" pos:end="2833:37">cpu_ptr0</name></expr></argument>, <argument pos:start="2833:40" pos:end="2833:46"><expr pos:start="2833:40" pos:end="2833:46"><name pos:start="2833:40" pos:end="2833:46">cpu_env</name></expr></argument>, <argument pos:start="2833:49" pos:end="2833:58"><expr pos:start="2833:49" pos:end="2833:58"><name pos:start="2833:49" pos:end="2833:58">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2835:13" pos:end="2835:60"><expr pos:start="2835:13" pos:end="2835:59"><call pos:start="2835:13" pos:end="2835:59"><name pos:start="2835:13" pos:end="2835:28">tcg_gen_addi_ptr</name><argument_list pos:start="2835:29" pos:end="2835:59">(<argument pos:start="2835:30" pos:end="2835:37"><expr pos:start="2835:30" pos:end="2835:37"><name pos:start="2835:30" pos:end="2835:37">cpu_ptr1</name></expr></argument>, <argument pos:start="2835:40" pos:end="2835:46"><expr pos:start="2835:40" pos:end="2835:46"><name pos:start="2835:40" pos:end="2835:46">cpu_env</name></expr></argument>, <argument pos:start="2835:49" pos:end="2835:58"><expr pos:start="2835:49" pos:end="2835:58"><name pos:start="2835:49" pos:end="2835:58">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2837:13" pos:end="2837:52"><expr pos:start="2837:13" pos:end="2837:51"><call pos:start="2837:13" pos:end="2837:51"><name pos:start="2837:13" pos:end="2837:22">sse_fn_epp</name><argument_list pos:start="2837:23" pos:end="2837:51">(<argument pos:start="2837:24" pos:end="2837:30"><expr pos:start="2837:24" pos:end="2837:30"><name pos:start="2837:24" pos:end="2837:30">cpu_env</name></expr></argument>, <argument pos:start="2837:33" pos:end="2837:40"><expr pos:start="2837:33" pos:end="2837:40"><name pos:start="2837:33" pos:end="2837:40">cpu_ptr0</name></expr></argument>, <argument pos:start="2837:43" pos:end="2837:50"><expr pos:start="2837:43" pos:end="2837:50"><name pos:start="2837:43" pos:end="2837:50">cpu_ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2839:13" pos:end="2839:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="2843:9" pos:end="2847:9"><if pos:start="2843:9" pos:end="2847:9">if <condition pos:start="2843:12" pos:end="2843:35">(<expr pos:start="2843:13" pos:end="2843:34"><name pos:start="2843:13" pos:end="2843:13">b</name> <operator pos:start="2843:15" pos:end="2843:16">==</operator> <literal type="number" pos:start="2843:18" pos:end="2843:21">0x2e</literal> <operator pos:start="2843:23" pos:end="2843:24">||</operator> <name pos:start="2843:26" pos:end="2843:26">b</name> <operator pos:start="2843:28" pos:end="2843:29">==</operator> <literal type="number" pos:start="2843:31" pos:end="2843:34">0x2f</literal></expr>)</condition> <block pos:start="2843:37" pos:end="2847:9">{<block_content pos:start="2845:13" pos:end="2845:39">

            <expr_stmt pos:start="2845:13" pos:end="2845:39"><expr pos:start="2845:13" pos:end="2845:38"><call pos:start="2845:13" pos:end="2845:38"><name pos:start="2845:13" pos:end="2845:21">set_cc_op</name><argument_list pos:start="2845:22" pos:end="2845:38">(<argument pos:start="2845:23" pos:end="2845:23"><expr pos:start="2845:23" pos:end="2845:23"><name pos:start="2845:23" pos:end="2845:23">s</name></expr></argument>, <argument pos:start="2845:26" pos:end="2845:37"><expr pos:start="2845:26" pos:end="2845:37"><name pos:start="2845:26" pos:end="2845:37">CC_OP_EFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
