<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26759.c" pos:tabs="8"><function pos:start="1:1" pos:end="263:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:26">nic_receive</name><parameter_list pos:start="1:27" pos:end="1:81">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:46"><name pos:start="1:28" pos:end="1:42">VLANClientState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">nc</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:67"><decl pos:start="1:49" pos:end="1:67"><type pos:start="1:49" pos:end="1:67"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:61">uint8_t</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type> <name pos:start="1:65" pos:end="1:67">buf</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:80"><decl pos:start="1:70" pos:end="1:80"><type pos:start="1:70" pos:end="1:80"><name pos:start="1:70" pos:end="1:75">size_t</name></type> <name pos:start="1:77" pos:end="1:80">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="263:1">{<block_content pos:start="13:5" pos:end="261:16">

    <comment type="block" pos:start="5:5" pos:end="11:7">/* TODO:

     * - Magic packets should set bit 30 in power management driver register.

     * - Interesting packets should set bit 29 in power management driver register.

     */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">EEPRO100State</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:20">s</name> <init pos:start="13:22" pos:end="13:58">= <expr pos:start="13:24" pos:end="13:58"><call pos:start="13:24" pos:end="13:50"><name pos:start="13:24" pos:end="13:32">DO_UPCAST</name><argument_list pos:start="13:33" pos:end="13:50">(<argument pos:start="13:34" pos:end="13:41"><expr pos:start="13:34" pos:end="13:41"><name pos:start="13:34" pos:end="13:41">NICState</name></expr></argument>, <argument pos:start="13:44" pos:end="13:45"><expr pos:start="13:44" pos:end="13:45"><name pos:start="13:44" pos:end="13:45">nc</name></expr></argument>, <argument pos:start="13:48" pos:end="13:49"><expr pos:start="13:48" pos:end="13:49"><name pos:start="13:48" pos:end="13:49">nc</name></expr></argument>)</argument_list></call><operator pos:start="13:51" pos:end="13:52">-&gt;</operator><name pos:start="13:53" pos:end="13:58">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint16_t</name></type> <name pos:start="15:14" pos:end="15:23">rfd_status</name> <init pos:start="15:25" pos:end="15:32">= <expr pos:start="15:27" pos:end="15:32"><literal type="number" pos:start="15:27" pos:end="15:32">0xa000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="19:47"><decl pos:start="17:5" pos:end="19:46"><type pos:start="17:5" pos:end="17:24"><specifier pos:start="17:5" pos:end="17:10">static</specifier> <specifier pos:start="17:12" pos:end="17:16">const</specifier> <name pos:start="17:18" pos:end="17:24">uint8_t</name></type> <name pos:start="17:26" pos:end="17:45"><name pos:start="17:26" pos:end="17:42">broadcast_macaddr</name><index pos:start="17:43" pos:end="17:45">[<expr pos:start="17:44" pos:end="17:44"><literal type="number" pos:start="17:44" pos:end="17:44">6</literal></expr>]</index></name> <init pos:start="17:47" pos:end="19:46">=

        <expr pos:start="19:9" pos:end="19:46"><block pos:start="19:9" pos:end="19:46">{ <expr pos:start="19:11" pos:end="19:14"><literal type="number" pos:start="19:11" pos:end="19:14">0xff</literal></expr>, <expr pos:start="19:17" pos:end="19:20"><literal type="number" pos:start="19:17" pos:end="19:20">0xff</literal></expr>, <expr pos:start="19:23" pos:end="19:26"><literal type="number" pos:start="19:23" pos:end="19:26">0xff</literal></expr>, <expr pos:start="19:29" pos:end="19:32"><literal type="number" pos:start="19:29" pos:end="19:32">0xff</literal></expr>, <expr pos:start="19:35" pos:end="19:38"><literal type="number" pos:start="19:35" pos:end="19:38">0xff</literal></expr>, <expr pos:start="19:41" pos:end="19:44"><literal type="number" pos:start="19:41" pos:end="19:44">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:38">/* TODO: check multiple IA bit. */</comment>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:38">(<expr pos:start="25:9" pos:end="25:37"><name pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:24">configuration</name><index pos:start="25:25" pos:end="25:28">[<expr pos:start="25:26" pos:end="25:27"><literal type="number" pos:start="25:26" pos:end="25:27">20</literal></expr>]</index></name> <operator pos:start="25:30" pos:end="25:30">&amp;</operator> <call pos:start="25:32" pos:end="25:37"><name pos:start="25:32" pos:end="25:34">BIT</name><argument_list pos:start="25:35" pos:end="25:37">(<argument pos:start="25:36" pos:end="25:36"><expr pos:start="25:36" pos:end="25:36"><literal type="number" pos:start="25:36" pos:end="25:36">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:40" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:35"><expr pos:start="27:9" pos:end="27:34"><call pos:start="27:9" pos:end="27:34"><name pos:start="27:9" pos:end="27:15">missing</name><argument_list pos:start="27:16" pos:end="27:34">(<argument pos:start="27:17" pos:end="27:33"><expr pos:start="27:17" pos:end="27:33"><literal type="string" pos:start="27:17" pos:end="27:33">"Multiple IA bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="141:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:35">(<expr pos:start="35:9" pos:end="35:34"><name pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:24">configuration</name><index pos:start="35:25" pos:end="35:27">[<expr pos:start="35:26" pos:end="35:26"><literal type="number" pos:start="35:26" pos:end="35:26">8</literal></expr>]</index></name> <operator pos:start="35:29" pos:end="35:29">&amp;</operator> <literal type="number" pos:start="35:31" pos:end="35:34">0x80</literal></expr>)</condition> <block pos:start="35:37" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:18">

        <comment type="block" pos:start="37:9" pos:end="37:31">/* CSMA is disabled. */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:58"><expr pos:start="39:9" pos:end="39:57"><call pos:start="39:9" pos:end="39:57"><name pos:start="39:9" pos:end="39:14">logout</name><argument_list pos:start="39:15" pos:end="39:57">(<argument pos:start="39:16" pos:end="39:53"><expr pos:start="39:16" pos:end="39:53"><literal type="string" pos:start="39:16" pos:end="39:53">"%p received while CSMA is disabled\n"</literal></expr></argument>, <argument pos:start="39:56" pos:end="39:56"><expr pos:start="39:56" pos:end="39:56"><name pos:start="39:56" pos:end="39:56">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="43:7" pos:end="59:5">else if <condition pos:start="43:15" pos:end="43:59">(<expr pos:start="43:16" pos:end="43:58"><name pos:start="43:16" pos:end="43:19">size</name> <operator pos:start="43:21" pos:end="43:21">&lt;</operator> <literal type="number" pos:start="43:23" pos:end="43:24">64</literal> <operator pos:start="43:26" pos:end="43:27">&amp;&amp;</operator> <operator pos:start="43:29" pos:end="43:29">(</operator><name pos:start="43:30" pos:end="43:48"><name pos:start="43:30" pos:end="43:30">s</name><operator pos:start="43:31" pos:end="43:32">-&gt;</operator><name pos:start="43:33" pos:end="43:45">configuration</name><index pos:start="43:46" pos:end="43:48">[<expr pos:start="43:47" pos:end="43:47"><literal type="number" pos:start="43:47" pos:end="43:47">7</literal></expr>]</index></name> <operator pos:start="43:50" pos:end="43:50">&amp;</operator> <call pos:start="43:52" pos:end="43:57"><name pos:start="43:52" pos:end="43:54">BIT</name><argument_list pos:start="43:55" pos:end="43:57">(<argument pos:start="43:56" pos:end="43:56"><expr pos:start="43:56" pos:end="43:56"><literal type="number" pos:start="43:56" pos:end="43:56">0</literal></expr></argument>)</argument_list></call><operator pos:start="43:58" pos:end="43:58">)</operator></expr>)</condition> <block pos:start="43:61" pos:end="59:5">{<block_content pos:start="49:9" pos:end="58:0">

        <comment type="block" pos:start="45:9" pos:end="47:38">/* Short frame and configuration byte 7/0 (discard short receive) set:

         * Short frame is discarded */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:64"><expr pos:start="49:9" pos:end="49:63"><call pos:start="49:9" pos:end="49:63"><name pos:start="49:9" pos:end="49:14">logout</name><argument_list pos:start="49:15" pos:end="49:63">(<argument pos:start="49:16" pos:end="49:53"><expr pos:start="49:16" pos:end="49:53"><literal type="string" pos:start="49:16" pos:end="49:53">"%p received short frame (%zu byte)\n"</literal></expr></argument>, <argument pos:start="49:56" pos:end="49:56"><expr pos:start="49:56" pos:end="49:56"><name pos:start="49:56" pos:end="49:56">s</name></expr></argument>, <argument pos:start="49:59" pos:end="49:62"><expr pos:start="49:59" pos:end="49:62"><name pos:start="49:59" pos:end="49:62">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="58:0"><expr pos:start="51:9" pos:end="51:45"><name pos:start="51:9" pos:end="51:43"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:21">statistics</name><operator pos:start="51:22" pos:end="51:22">.</operator><name pos:start="51:23" pos:end="51:43">rx_short_frame_errors</name></name><operator pos:start="51:44" pos:end="51:45">++</operator></expr>;</expr_stmt>

<cpp:if pos:start="53:1" pos:end="53:5">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:5"><literal type="number" pos:start="53:5" pos:end="53:5">0</literal></expr></cpp:if>

        return -1;

<cpp:endif pos:start="57:1" pos:end="57:6">#<cpp:directive pos:start="57:2" pos:end="57:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <if type="elseif" pos:start="59:7" pos:end="69:5">else if <condition pos:start="59:15" pos:end="59:83">(<expr pos:start="59:16" pos:end="59:82"><operator pos:start="59:16" pos:end="59:16">(</operator><name pos:start="59:17" pos:end="59:20">size</name> <operator pos:start="59:22" pos:end="59:22">&gt;</operator> <name pos:start="59:24" pos:end="59:41">MAX_ETH_FRAME_SIZE</name> <operator pos:start="59:43" pos:end="59:43">+</operator> <literal type="number" pos:start="59:45" pos:end="59:45">4</literal><operator pos:start="59:46" pos:end="59:46">)</operator> <operator pos:start="59:48" pos:end="59:49">&amp;&amp;</operator> <operator pos:start="59:51" pos:end="59:51">!</operator><operator pos:start="59:52" pos:end="59:52">(</operator><name pos:start="59:53" pos:end="59:72"><name pos:start="59:53" pos:end="59:53">s</name><operator pos:start="59:54" pos:end="59:55">-&gt;</operator><name pos:start="59:56" pos:end="59:68">configuration</name><index pos:start="59:69" pos:end="59:72">[<expr pos:start="59:70" pos:end="59:71"><literal type="number" pos:start="59:70" pos:end="59:71">18</literal></expr>]</index></name> <operator pos:start="59:74" pos:end="59:74">&amp;</operator> <call pos:start="59:76" pos:end="59:81"><name pos:start="59:76" pos:end="59:78">BIT</name><argument_list pos:start="59:79" pos:end="59:81">(<argument pos:start="59:80" pos:end="59:80"><expr pos:start="59:80" pos:end="59:80"><literal type="number" pos:start="59:80" pos:end="59:80">3</literal></expr></argument>)</argument_list></call><operator pos:start="59:82" pos:end="59:82">)</operator></expr>)</condition> <block pos:start="59:85" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:18">

        <comment type="block" pos:start="61:9" pos:end="63:40">/* Long frame and configuration byte 18/3 (long receive ok) not set:

         * Long frames are discarded. */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:72"><expr pos:start="65:9" pos:end="65:71"><call pos:start="65:9" pos:end="65:71"><name pos:start="65:9" pos:end="65:14">logout</name><argument_list pos:start="65:15" pos:end="65:71">(<argument pos:start="65:16" pos:end="65:61"><expr pos:start="65:16" pos:end="65:61"><literal type="string" pos:start="65:16" pos:end="65:61">"%p received long frame (%zu byte), ignored\n"</literal></expr></argument>, <argument pos:start="65:64" pos:end="65:64"><expr pos:start="65:64" pos:end="65:64"><name pos:start="65:64" pos:end="65:64">s</name></expr></argument>, <argument pos:start="65:67" pos:end="65:70"><expr pos:start="65:67" pos:end="65:70"><name pos:start="65:67" pos:end="65:70">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:18">return <expr pos:start="67:16" pos:end="67:17"><operator pos:start="67:16" pos:end="67:16">-</operator><literal type="number" pos:start="67:17" pos:end="67:17">1</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="69:7" pos:end="77:5">else if <condition pos:start="69:15" pos:end="69:54">(<expr pos:start="69:16" pos:end="69:53"><call pos:start="69:16" pos:end="69:48"><name pos:start="69:16" pos:end="69:21">memcmp</name><argument_list pos:start="69:22" pos:end="69:48">(<argument pos:start="69:23" pos:end="69:25"><expr pos:start="69:23" pos:end="69:25"><name pos:start="69:23" pos:end="69:25">buf</name></expr></argument>, <argument pos:start="69:28" pos:end="69:44"><expr pos:start="69:28" pos:end="69:44"><name pos:start="69:28" pos:end="69:44"><name pos:start="69:28" pos:end="69:28">s</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:34">conf</name><operator pos:start="69:35" pos:end="69:35">.</operator><name pos:start="69:36" pos:end="69:42">macaddr</name><operator pos:start="69:43" pos:end="69:43">.</operator><name pos:start="69:44" pos:end="69:44">a</name></name></expr></argument>, <argument pos:start="69:47" pos:end="69:47"><expr pos:start="69:47" pos:end="69:47"><literal type="number" pos:start="69:47" pos:end="69:47">6</literal></expr></argument>)</argument_list></call> <operator pos:start="69:50" pos:end="69:51">==</operator> <literal type="number" pos:start="69:53" pos:end="69:53">0</literal></expr>)</condition> <block pos:start="69:56" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:76">       <comment type="block" pos:start="69:64" pos:end="69:72">/* !!! */</comment>

        <comment type="block" pos:start="71:9" pos:end="71:47">/* Frame matches individual address. */</comment>

        <comment type="block" pos:start="73:9" pos:end="73:63">/* TODO: check configuration byte 15/4 (ignore U/L). */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:76"><expr pos:start="75:9" pos:end="75:75"><call pos:start="75:9" pos:end="75:75"><name pos:start="75:9" pos:end="75:13">TRACE</name><argument_list pos:start="75:14" pos:end="75:75">(<argument pos:start="75:15" pos:end="75:18"><expr pos:start="75:15" pos:end="75:18"><name pos:start="75:15" pos:end="75:18">RXTX</name></expr></argument>, <argument pos:start="75:21" pos:end="75:74"><expr pos:start="75:21" pos:end="75:74"><call pos:start="75:21" pos:end="75:74"><name pos:start="75:21" pos:end="75:26">logout</name><argument_list pos:start="75:27" pos:end="75:74">(<argument pos:start="75:28" pos:end="75:64"><expr pos:start="75:28" pos:end="75:64"><literal type="string" pos:start="75:28" pos:end="75:64">"%p received frame for me, len=%zu\n"</literal></expr></argument>, <argument pos:start="75:67" pos:end="75:67"><expr pos:start="75:67" pos:end="75:67"><name pos:start="75:67" pos:end="75:67">s</name></expr></argument>, <argument pos:start="75:70" pos:end="75:73"><expr pos:start="75:70" pos:end="75:73"><name pos:start="75:70" pos:end="75:73">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="77:7" pos:end="85:5">else if <condition pos:start="77:15" pos:end="77:54">(<expr pos:start="77:16" pos:end="77:53"><call pos:start="77:16" pos:end="77:48"><name pos:start="77:16" pos:end="77:21">memcmp</name><argument_list pos:start="77:22" pos:end="77:48">(<argument pos:start="77:23" pos:end="77:25"><expr pos:start="77:23" pos:end="77:25"><name pos:start="77:23" pos:end="77:25">buf</name></expr></argument>, <argument pos:start="77:28" pos:end="77:44"><expr pos:start="77:28" pos:end="77:44"><name pos:start="77:28" pos:end="77:44">broadcast_macaddr</name></expr></argument>, <argument pos:start="77:47" pos:end="77:47"><expr pos:start="77:47" pos:end="77:47"><literal type="number" pos:start="77:47" pos:end="77:47">6</literal></expr></argument>)</argument_list></call> <operator pos:start="77:50" pos:end="77:51">==</operator> <literal type="number" pos:start="77:53" pos:end="77:53">0</literal></expr>)</condition> <block pos:start="77:56" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:29">

        <comment type="block" pos:start="79:9" pos:end="79:30">/* Broadcast frame. */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:73"><expr pos:start="81:9" pos:end="81:72"><call pos:start="81:9" pos:end="81:72"><name pos:start="81:9" pos:end="81:13">TRACE</name><argument_list pos:start="81:14" pos:end="81:72">(<argument pos:start="81:15" pos:end="81:18"><expr pos:start="81:15" pos:end="81:18"><name pos:start="81:15" pos:end="81:18">RXTX</name></expr></argument>, <argument pos:start="81:21" pos:end="81:71"><expr pos:start="81:21" pos:end="81:71"><call pos:start="81:21" pos:end="81:71"><name pos:start="81:21" pos:end="81:26">logout</name><argument_list pos:start="81:27" pos:end="81:71">(<argument pos:start="81:28" pos:end="81:61"><expr pos:start="81:28" pos:end="81:61"><literal type="string" pos:start="81:28" pos:end="81:61">"%p received broadcast, len=%zu\n"</literal></expr></argument>, <argument pos:start="81:64" pos:end="81:64"><expr pos:start="81:64" pos:end="81:64"><name pos:start="81:64" pos:end="81:64">s</name></expr></argument>, <argument pos:start="81:67" pos:end="81:70"><expr pos:start="81:67" pos:end="81:70"><name pos:start="81:67" pos:end="81:70">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:29"><expr pos:start="83:9" pos:end="83:28"><name pos:start="83:9" pos:end="83:18">rfd_status</name> <operator pos:start="83:20" pos:end="83:21">|=</operator> <literal type="number" pos:start="83:23" pos:end="83:28">0x0002</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="85:7" pos:end="125:5">else if <condition pos:start="85:15" pos:end="85:29">(<expr pos:start="85:16" pos:end="85:28"><name pos:start="85:16" pos:end="85:21"><name pos:start="85:16" pos:end="85:18">buf</name><index pos:start="85:19" pos:end="85:21">[<expr pos:start="85:20" pos:end="85:20"><literal type="number" pos:start="85:20" pos:end="85:20">0</literal></expr>]</index></name> <operator pos:start="85:23" pos:end="85:23">&amp;</operator> <literal type="number" pos:start="85:25" pos:end="85:28">0x01</literal></expr>)</condition> <block pos:start="85:31" pos:end="125:5">{<block_content pos:start="89:9" pos:end="123:29">

        <comment type="block" pos:start="87:9" pos:end="87:30">/* Multicast frame. */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:97"><expr pos:start="89:9" pos:end="89:96"><call pos:start="89:9" pos:end="89:96"><name pos:start="89:9" pos:end="89:13">TRACE</name><argument_list pos:start="89:14" pos:end="89:96">(<argument pos:start="89:15" pos:end="89:18"><expr pos:start="89:15" pos:end="89:18"><name pos:start="89:15" pos:end="89:18">RXTX</name></expr></argument>, <argument pos:start="89:21" pos:end="89:95"><expr pos:start="89:21" pos:end="89:95"><call pos:start="89:21" pos:end="89:95"><name pos:start="89:21" pos:end="89:26">logout</name><argument_list pos:start="89:27" pos:end="89:95">(<argument pos:start="89:28" pos:end="89:64"><expr pos:start="89:28" pos:end="89:64"><literal type="string" pos:start="89:28" pos:end="89:64">"%p received multicast, len=%zu,%s\n"</literal></expr></argument>, <argument pos:start="89:67" pos:end="89:67"><expr pos:start="89:67" pos:end="89:67"><name pos:start="89:67" pos:end="89:67">s</name></expr></argument>, <argument pos:start="89:70" pos:end="89:73"><expr pos:start="89:70" pos:end="89:73"><name pos:start="89:70" pos:end="89:73">size</name></expr></argument>, <argument pos:start="89:76" pos:end="89:94"><expr pos:start="89:76" pos:end="89:94"><call pos:start="89:76" pos:end="89:94"><name pos:start="89:76" pos:end="89:83">nic_dump</name><argument_list pos:start="89:84" pos:end="89:94">(<argument pos:start="89:85" pos:end="89:87"><expr pos:start="89:85" pos:end="89:87"><name pos:start="89:85" pos:end="89:87">buf</name></expr></argument>, <argument pos:start="89:90" pos:end="89:93"><expr pos:start="89:90" pos:end="89:93"><name pos:start="89:90" pos:end="89:93">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="119:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:42">(<expr pos:start="91:13" pos:end="91:41"><name pos:start="91:13" pos:end="91:32"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:28">configuration</name><index pos:start="91:29" pos:end="91:32">[<expr pos:start="91:30" pos:end="91:31"><literal type="number" pos:start="91:30" pos:end="91:31">21</literal></expr>]</index></name> <operator pos:start="91:34" pos:end="91:34">&amp;</operator> <call pos:start="91:36" pos:end="91:41"><name pos:start="91:36" pos:end="91:38">BIT</name><argument_list pos:start="91:39" pos:end="91:41">(<argument pos:start="91:40" pos:end="91:40"><expr pos:start="91:40" pos:end="91:40"><literal type="number" pos:start="91:40" pos:end="91:40">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:44" pos:end="95:9">{<block_content>

          <comment type="block" pos:start="93:11" pos:end="93:71">/* Multicast all bit is set, receive all multicast frames. */</comment>

        </block_content>}</block></if> <else pos:start="95:11" pos:end="119:9">else <block pos:start="95:16" pos:end="119:9">{<block_content pos:start="97:11" pos:end="117:11">

          <decl_stmt pos:start="97:11" pos:end="97:54"><decl pos:start="97:11" pos:end="97:53"><type pos:start="97:11" pos:end="97:18"><name pos:start="97:11" pos:end="97:18">unsigned</name></type> <name pos:start="97:20" pos:end="97:28">mcast_idx</name> <init pos:start="97:30" pos:end="97:53">= <expr pos:start="97:32" pos:end="97:53"><call pos:start="97:32" pos:end="97:53"><name pos:start="97:32" pos:end="97:48">compute_mcast_idx</name><argument_list pos:start="97:49" pos:end="97:53">(<argument pos:start="97:50" pos:end="97:52"><expr pos:start="97:50" pos:end="97:52"><name pos:start="97:50" pos:end="97:52">buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt pos:start="99:11" pos:end="99:33"><expr pos:start="99:11" pos:end="99:32"><call pos:start="99:11" pos:end="99:32"><name pos:start="99:11" pos:end="99:16">assert</name><argument_list pos:start="99:17" pos:end="99:32">(<argument pos:start="99:18" pos:end="99:31"><expr pos:start="99:18" pos:end="99:31"><name pos:start="99:18" pos:end="99:26">mcast_idx</name> <operator pos:start="99:28" pos:end="99:28">&lt;</operator> <literal type="number" pos:start="99:30" pos:end="99:31">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if_stmt pos:start="101:11" pos:end="117:11"><if pos:start="101:11" pos:end="105:11">if <condition pos:start="101:14" pos:end="101:63">(<expr pos:start="101:15" pos:end="101:62"><name pos:start="101:15" pos:end="101:37"><name pos:start="101:15" pos:end="101:15">s</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:21">mult</name><index pos:start="101:22" pos:end="101:37">[<expr pos:start="101:23" pos:end="101:36"><name pos:start="101:23" pos:end="101:31">mcast_idx</name> <operator pos:start="101:33" pos:end="101:34">&gt;&gt;</operator> <literal type="number" pos:start="101:36" pos:end="101:36">3</literal></expr>]</index></name> <operator pos:start="101:39" pos:end="101:39">&amp;</operator> <operator pos:start="101:41" pos:end="101:41">(</operator><literal type="number" pos:start="101:42" pos:end="101:42">1</literal> <operator pos:start="101:44" pos:end="101:45">&lt;&lt;</operator> <operator pos:start="101:47" pos:end="101:47">(</operator><name pos:start="101:48" pos:end="101:56">mcast_idx</name> <operator pos:start="101:58" pos:end="101:58">&amp;</operator> <literal type="number" pos:start="101:60" pos:end="101:60">7</literal><operator pos:start="101:61" pos:end="101:61">)</operator><operator pos:start="101:62" pos:end="101:62">)</operator></expr>)</condition> <block pos:start="101:65" pos:end="105:11">{<block_content>

            <comment type="block" pos:start="103:13" pos:end="103:59">/* Multicast frame is allowed in hash table. */</comment>

          </block_content>}</block></if> <if type="elseif" pos:start="105:13" pos:end="111:11">else if <condition pos:start="105:21" pos:end="105:51">(<expr pos:start="105:22" pos:end="105:50"><name pos:start="105:22" pos:end="105:41"><name pos:start="105:22" pos:end="105:22">s</name><operator pos:start="105:23" pos:end="105:24">-&gt;</operator><name pos:start="105:25" pos:end="105:37">configuration</name><index pos:start="105:38" pos:end="105:41">[<expr pos:start="105:39" pos:end="105:40"><literal type="number" pos:start="105:39" pos:end="105:40">15</literal></expr>]</index></name> <operator pos:start="105:43" pos:end="105:43">&amp;</operator> <call pos:start="105:45" pos:end="105:50"><name pos:start="105:45" pos:end="105:47">BIT</name><argument_list pos:start="105:48" pos:end="105:50">(<argument pos:start="105:49" pos:end="105:49"><expr pos:start="105:49" pos:end="105:49"><literal type="number" pos:start="105:49" pos:end="105:49">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:53" pos:end="111:11">{<block_content pos:start="109:15" pos:end="109:35">

              <comment type="block" pos:start="107:15" pos:end="107:45">/* Promiscuous: receive all. */</comment>

              <expr_stmt pos:start="109:15" pos:end="109:35"><expr pos:start="109:15" pos:end="109:34"><name pos:start="109:15" pos:end="109:24">rfd_status</name> <operator pos:start="109:26" pos:end="109:27">|=</operator> <literal type="number" pos:start="109:29" pos:end="109:34">0x0004</literal></expr>;</expr_stmt>

          </block_content>}</block></if> <else pos:start="111:13" pos:end="117:11">else <block pos:start="111:18" pos:end="117:11">{<block_content pos:start="113:15" pos:end="115:24">

              <expr_stmt pos:start="113:15" pos:end="113:63"><expr pos:start="113:15" pos:end="113:62"><call pos:start="113:15" pos:end="113:62"><name pos:start="113:15" pos:end="113:19">TRACE</name><argument_list pos:start="113:20" pos:end="113:62">(<argument pos:start="113:21" pos:end="113:24"><expr pos:start="113:21" pos:end="113:24"><name pos:start="113:21" pos:end="113:24">RXTX</name></expr></argument>, <argument pos:start="113:27" pos:end="113:61"><expr pos:start="113:27" pos:end="113:61"><call pos:start="113:27" pos:end="113:61"><name pos:start="113:27" pos:end="113:32">logout</name><argument_list pos:start="113:33" pos:end="113:61">(<argument pos:start="113:34" pos:end="113:57"><expr pos:start="113:34" pos:end="113:57"><literal type="string" pos:start="113:34" pos:end="113:57">"%p multicast ignored\n"</literal></expr></argument>, <argument pos:start="113:60" pos:end="113:60"><expr pos:start="113:60" pos:end="113:60"><name pos:start="113:60" pos:end="113:60">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <return pos:start="115:15" pos:end="115:24">return <expr pos:start="115:22" pos:end="115:23"><operator pos:start="115:22" pos:end="115:22">-</operator><literal type="number" pos:start="115:23" pos:end="115:23">1</literal></expr>;</return>

          </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="121:9" pos:end="121:50">/* TODO: Next not for promiscuous mode? */</comment>

        <expr_stmt pos:start="123:9" pos:end="123:29"><expr pos:start="123:9" pos:end="123:28"><name pos:start="123:9" pos:end="123:18">rfd_status</name> <operator pos:start="123:20" pos:end="123:21">|=</operator> <literal type="number" pos:start="123:23" pos:end="123:28">0x0002</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="125:7" pos:end="133:5">else if <condition pos:start="125:15" pos:end="125:45">(<expr pos:start="125:16" pos:end="125:44"><name pos:start="125:16" pos:end="125:35"><name pos:start="125:16" pos:end="125:16">s</name><operator pos:start="125:17" pos:end="125:18">-&gt;</operator><name pos:start="125:19" pos:end="125:31">configuration</name><index pos:start="125:32" pos:end="125:35">[<expr pos:start="125:33" pos:end="125:34"><literal type="number" pos:start="125:33" pos:end="125:34">15</literal></expr>]</index></name> <operator pos:start="125:37" pos:end="125:37">&amp;</operator> <call pos:start="125:39" pos:end="125:44"><name pos:start="125:39" pos:end="125:41">BIT</name><argument_list pos:start="125:42" pos:end="125:44">(<argument pos:start="125:43" pos:end="125:43"><expr pos:start="125:43" pos:end="125:43"><literal type="number" pos:start="125:43" pos:end="125:43">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="125:47" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:29">

        <comment type="block" pos:start="127:9" pos:end="127:39">/* Promiscuous: receive all. */</comment>

        <expr_stmt pos:start="129:9" pos:end="129:89"><expr pos:start="129:9" pos:end="129:88"><call pos:start="129:9" pos:end="129:88"><name pos:start="129:9" pos:end="129:13">TRACE</name><argument_list pos:start="129:14" pos:end="129:88">(<argument pos:start="129:15" pos:end="129:18"><expr pos:start="129:15" pos:end="129:18"><name pos:start="129:15" pos:end="129:18">RXTX</name></expr></argument>, <argument pos:start="129:21" pos:end="129:87"><expr pos:start="129:21" pos:end="129:87"><call pos:start="129:21" pos:end="129:87"><name pos:start="129:21" pos:end="129:26">logout</name><argument_list pos:start="129:27" pos:end="129:87">(<argument pos:start="129:28" pos:end="129:77"><expr pos:start="129:28" pos:end="129:77"><literal type="string" pos:start="129:28" pos:end="129:77">"%p received frame in promiscuous mode, len=%zu\n"</literal></expr></argument>, <argument pos:start="129:80" pos:end="129:80"><expr pos:start="129:80" pos:end="129:80"><name pos:start="129:80" pos:end="129:80">s</name></expr></argument>, <argument pos:start="129:83" pos:end="129:86"><expr pos:start="129:83" pos:end="129:86"><name pos:start="129:83" pos:end="129:86">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:29"><expr pos:start="131:9" pos:end="131:28"><name pos:start="131:9" pos:end="131:18">rfd_status</name> <operator pos:start="131:20" pos:end="131:21">|=</operator> <literal type="number" pos:start="131:23" pos:end="131:28">0x0004</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="133:7" pos:end="141:5">else <block pos:start="133:12" pos:end="141:5">{<block_content pos:start="135:9" pos:end="139:20">

        <expr_stmt pos:start="135:9" pos:end="137:36"><expr pos:start="135:9" pos:end="137:35"><call pos:start="135:9" pos:end="137:35"><name pos:start="135:9" pos:end="135:13">TRACE</name><argument_list pos:start="135:14" pos:end="137:35">(<argument pos:start="135:15" pos:end="135:18"><expr pos:start="135:15" pos:end="135:18"><name pos:start="135:15" pos:end="135:18">RXTX</name></expr></argument>, <argument pos:start="135:21" pos:end="137:34"><expr pos:start="135:21" pos:end="137:34"><call pos:start="135:21" pos:end="137:34"><name pos:start="135:21" pos:end="135:26">logout</name><argument_list pos:start="135:27" pos:end="137:34">(<argument pos:start="135:28" pos:end="135:69"><expr pos:start="135:28" pos:end="135:69"><literal type="string" pos:start="135:28" pos:end="135:69">"%p received frame, ignored, len=%zu,%s\n"</literal></expr></argument>, <argument pos:start="135:72" pos:end="135:72"><expr pos:start="135:72" pos:end="135:72"><name pos:start="135:72" pos:end="135:72">s</name></expr></argument>, <argument pos:start="135:75" pos:end="135:78"><expr pos:start="135:75" pos:end="135:78"><name pos:start="135:75" pos:end="135:78">size</name></expr></argument>,

              <argument pos:start="137:15" pos:end="137:33"><expr pos:start="137:15" pos:end="137:33"><call pos:start="137:15" pos:end="137:33"><name pos:start="137:15" pos:end="137:22">nic_dump</name><argument_list pos:start="137:23" pos:end="137:33">(<argument pos:start="137:24" pos:end="137:26"><expr pos:start="137:24" pos:end="137:26"><name pos:start="137:24" pos:end="137:26">buf</name></expr></argument>, <argument pos:start="137:29" pos:end="137:32"><expr pos:start="137:29" pos:end="137:32"><name pos:start="137:29" pos:end="137:32">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="139:9" pos:end="139:20">return <expr pos:start="139:16" pos:end="139:19"><name pos:start="139:16" pos:end="139:19">size</name></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="145:5" pos:end="165:5"><if pos:start="145:5" pos:end="165:5">if <condition pos:start="145:8" pos:end="145:36">(<expr pos:start="145:9" pos:end="145:35"><call pos:start="145:9" pos:end="145:23"><name pos:start="145:9" pos:end="145:20">get_ru_state</name><argument_list pos:start="145:21" pos:end="145:23">(<argument pos:start="145:22" pos:end="145:22"><expr pos:start="145:22" pos:end="145:22"><name pos:start="145:22" pos:end="145:22">s</name></expr></argument>)</argument_list></call> <operator pos:start="145:25" pos:end="145:26">!=</operator> <name pos:start="145:28" pos:end="145:35">ru_ready</name></expr>)</condition> <block pos:start="145:38" pos:end="165:5">{<block_content pos:start="149:9" pos:end="163:18">

        <comment type="block" pos:start="147:9" pos:end="147:37">/* No resources available. */</comment>

        <expr_stmt pos:start="149:9" pos:end="149:60"><expr pos:start="149:9" pos:end="149:59"><call pos:start="149:9" pos:end="149:59"><name pos:start="149:9" pos:end="149:14">logout</name><argument_list pos:start="149:15" pos:end="149:59">(<argument pos:start="149:16" pos:end="149:41"><expr pos:start="149:16" pos:end="149:41"><literal type="string" pos:start="149:16" pos:end="149:41">"no resources, state=%u\n"</literal></expr></argument>, <argument pos:start="149:44" pos:end="149:58"><expr pos:start="149:44" pos:end="149:58"><call pos:start="149:44" pos:end="149:58"><name pos:start="149:44" pos:end="149:55">get_ru_state</name><argument_list pos:start="149:56" pos:end="149:58">(<argument pos:start="149:57" pos:end="149:57"><expr pos:start="149:57" pos:end="149:57"><name pos:start="149:57" pos:end="149:57">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="151:9" pos:end="151:61">/* TODO: RNR interrupt only at first failed frame? */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:34"><expr pos:start="153:9" pos:end="153:33"><call pos:start="153:9" pos:end="153:33"><name pos:start="153:9" pos:end="153:30">eepro100_rnr_interrupt</name><argument_list pos:start="153:31" pos:end="153:33">(<argument pos:start="153:32" pos:end="153:32"><expr pos:start="153:32" pos:end="153:32"><name pos:start="153:32" pos:end="153:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="162:0"><expr pos:start="155:9" pos:end="155:42"><name pos:start="155:9" pos:end="155:40"><name pos:start="155:9" pos:end="155:9">s</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:21">statistics</name><operator pos:start="155:22" pos:end="155:22">.</operator><name pos:start="155:23" pos:end="155:40">rx_resource_errors</name></name><operator pos:start="155:41" pos:end="155:42">++</operator></expr>;</expr_stmt>

<cpp:if pos:start="157:1" pos:end="157:5">#<cpp:directive pos:start="157:2" pos:end="157:3">if</cpp:directive> <expr pos:start="157:5" pos:end="157:5"><literal type="number" pos:start="157:5" pos:end="157:5">0</literal></expr></cpp:if>

        assert(!"no resources");

<cpp:endif pos:start="161:1" pos:end="161:6">#<cpp:directive pos:start="161:2" pos:end="161:6">endif</cpp:directive></cpp:endif>

        <return pos:start="163:9" pos:end="163:18">return <expr pos:start="163:16" pos:end="163:17"><operator pos:start="163:16" pos:end="163:16">-</operator><literal type="number" pos:start="163:17" pos:end="163:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="167:5" pos:end="167:13">/* !!! */</comment>

    <decl_stmt pos:start="169:5" pos:end="169:21"><decl pos:start="169:5" pos:end="169:20"><type pos:start="169:5" pos:end="169:17"><name pos:start="169:5" pos:end="169:17">eepro100_rx_t</name></type> <name pos:start="169:19" pos:end="169:20">rx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="171:5" pos:end="173:62"><expr pos:start="171:5" pos:end="173:61"><call pos:start="171:5" pos:end="173:61"><name pos:start="171:5" pos:end="171:28">cpu_physical_memory_read</name><argument_list pos:start="171:29" pos:end="173:61">(<argument pos:start="171:30" pos:end="171:54"><expr pos:start="171:30" pos:end="171:54"><name pos:start="171:30" pos:end="171:39"><name pos:start="171:30" pos:end="171:30">s</name><operator pos:start="171:31" pos:end="171:32">-&gt;</operator><name pos:start="171:33" pos:end="171:39">ru_base</name></name> <operator pos:start="171:41" pos:end="171:41">+</operator> <name pos:start="171:43" pos:end="171:54"><name pos:start="171:43" pos:end="171:43">s</name><operator pos:start="171:44" pos:end="171:45">-&gt;</operator><name pos:start="171:46" pos:end="171:54">ru_offset</name></name></expr></argument>, <argument pos:start="171:57" pos:end="171:72"><expr pos:start="171:57" pos:end="171:72"><operator pos:start="171:57" pos:end="171:57">(</operator><name pos:start="171:58" pos:end="171:64">uint8_t</name> <operator pos:start="171:66" pos:end="171:66">*</operator><operator pos:start="171:67" pos:end="171:67">)</operator> <operator pos:start="171:69" pos:end="171:69">&amp;</operator> <name pos:start="171:71" pos:end="171:72">rx</name></expr></argument>,

                             <argument pos:start="173:30" pos:end="173:60"><expr pos:start="173:30" pos:end="173:60"><call pos:start="173:30" pos:end="173:60"><name pos:start="173:30" pos:end="173:37">offsetof</name><argument_list pos:start="173:38" pos:end="173:60">(<argument pos:start="173:39" pos:end="173:51"><expr pos:start="173:39" pos:end="173:51"><name pos:start="173:39" pos:end="173:51">eepro100_rx_t</name></expr></argument>, <argument pos:start="173:54" pos:end="173:59"><expr pos:start="173:54" pos:end="173:59"><name pos:start="173:54" pos:end="173:59">packet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="175:5" pos:end="175:51"><decl pos:start="175:5" pos:end="175:50"><type pos:start="175:5" pos:end="175:12"><name pos:start="175:5" pos:end="175:12">uint16_t</name></type> <name pos:start="175:14" pos:end="175:24">rfd_command</name> <init pos:start="175:26" pos:end="175:50">= <expr pos:start="175:28" pos:end="175:50"><call pos:start="175:28" pos:end="175:50"><name pos:start="175:28" pos:end="175:38">le16_to_cpu</name><argument_list pos:start="175:39" pos:end="175:50">(<argument pos:start="175:40" pos:end="175:49"><expr pos:start="175:40" pos:end="175:49"><name pos:start="175:40" pos:end="175:49"><name pos:start="175:40" pos:end="175:41">rx</name><operator pos:start="175:42" pos:end="175:42">.</operator><name pos:start="175:43" pos:end="175:49">command</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="177:5" pos:end="177:45"><decl pos:start="177:5" pos:end="177:44"><type pos:start="177:5" pos:end="177:12"><name pos:start="177:5" pos:end="177:12">uint16_t</name></type> <name pos:start="177:14" pos:end="177:21">rfd_size</name> <init pos:start="177:23" pos:end="177:44">= <expr pos:start="177:25" pos:end="177:44"><call pos:start="177:25" pos:end="177:44"><name pos:start="177:25" pos:end="177:35">le16_to_cpu</name><argument_list pos:start="177:36" pos:end="177:44">(<argument pos:start="177:37" pos:end="177:43"><expr pos:start="177:37" pos:end="177:43"><name pos:start="177:37" pos:end="177:43"><name pos:start="177:37" pos:end="177:38">rx</name><operator pos:start="177:39" pos:end="177:39">.</operator><name pos:start="177:40" pos:end="177:43">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="181:5" pos:end="189:5"><if pos:start="181:5" pos:end="189:5">if <condition pos:start="181:8" pos:end="181:24">(<expr pos:start="181:9" pos:end="181:23"><name pos:start="181:9" pos:end="181:12">size</name> <operator pos:start="181:14" pos:end="181:14">&gt;</operator> <name pos:start="181:16" pos:end="181:23">rfd_size</name></expr>)</condition> <block pos:start="181:26" pos:end="189:5">{<block_content pos:start="183:9" pos:end="187:24">

        <expr_stmt pos:start="183:9" pos:end="185:61"><expr pos:start="183:9" pos:end="185:60"><call pos:start="183:9" pos:end="185:60"><name pos:start="183:9" pos:end="183:14">logout</name><argument_list pos:start="183:15" pos:end="185:60">(<argument pos:start="183:16" pos:end="185:43"><expr pos:start="183:16" pos:end="185:43"><literal type="string" pos:start="183:16" pos:end="183:34">"Receive buffer (%"</literal> <name pos:start="183:36" pos:end="183:41">PRId16</name> <literal type="string" pos:start="183:43" pos:end="183:71">" bytes) too small for data "</literal>

            <literal type="string" pos:start="185:13" pos:end="185:43">"(%zu bytes); data truncated\n"</literal></expr></argument>, <argument pos:start="185:46" pos:end="185:53"><expr pos:start="185:46" pos:end="185:53"><name pos:start="185:46" pos:end="185:53">rfd_size</name></expr></argument>, <argument pos:start="185:56" pos:end="185:59"><expr pos:start="185:56" pos:end="185:59"><name pos:start="185:56" pos:end="185:59">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:24"><expr pos:start="187:9" pos:end="187:23"><name pos:start="187:9" pos:end="187:12">size</name> <operator pos:start="187:14" pos:end="187:14">=</operator> <name pos:start="187:16" pos:end="187:23">rfd_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="191:5" pos:end="195:5"><if pos:start="191:5" pos:end="195:5">if <condition pos:start="191:8" pos:end="191:18">(<expr pos:start="191:9" pos:end="191:17"><name pos:start="191:9" pos:end="191:12">size</name> <operator pos:start="191:14" pos:end="191:14">&lt;</operator> <literal type="number" pos:start="191:16" pos:end="191:17">64</literal></expr>)</condition> <block pos:start="191:20" pos:end="195:5">{<block_content pos:start="193:9" pos:end="193:29">

        <expr_stmt pos:start="193:9" pos:end="193:29"><expr pos:start="193:9" pos:end="193:28"><name pos:start="193:9" pos:end="193:18">rfd_status</name> <operator pos:start="193:20" pos:end="193:21">|=</operator> <literal type="number" pos:start="193:23" pos:end="193:28">0x0080</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="197:5" pos:end="199:59"><expr pos:start="197:5" pos:end="199:58"><call pos:start="197:5" pos:end="199:58"><name pos:start="197:5" pos:end="197:9">TRACE</name><argument_list pos:start="197:10" pos:end="199:58">(<argument pos:start="197:11" pos:end="197:15"><expr pos:start="197:11" pos:end="197:15"><name pos:start="197:11" pos:end="197:15">OTHER</name></expr></argument>, <argument pos:start="197:18" pos:end="199:57"><expr pos:start="197:18" pos:end="199:57"><call pos:start="197:18" pos:end="199:57"><name pos:start="197:18" pos:end="197:23">logout</name><argument_list pos:start="197:24" pos:end="199:57">(<argument pos:start="197:25" pos:end="197:77"><expr pos:start="197:25" pos:end="197:77"><literal type="string" pos:start="197:25" pos:end="197:77">"command 0x%04x, link 0x%08x, addr 0x%08x, size %u\n"</literal></expr></argument>,

          <argument pos:start="199:11" pos:end="199:21"><expr pos:start="199:11" pos:end="199:21"><name pos:start="199:11" pos:end="199:21">rfd_command</name></expr></argument>, <argument pos:start="199:24" pos:end="199:30"><expr pos:start="199:24" pos:end="199:30"><name pos:start="199:24" pos:end="199:30"><name pos:start="199:24" pos:end="199:25">rx</name><operator pos:start="199:26" pos:end="199:26">.</operator><name pos:start="199:27" pos:end="199:30">link</name></name></expr></argument>, <argument pos:start="199:33" pos:end="199:46"><expr pos:start="199:33" pos:end="199:46"><name pos:start="199:33" pos:end="199:46"><name pos:start="199:33" pos:end="199:34">rx</name><operator pos:start="199:35" pos:end="199:35">.</operator><name pos:start="199:36" pos:end="199:46">rx_buf_addr</name></name></expr></argument>, <argument pos:start="199:49" pos:end="199:56"><expr pos:start="199:49" pos:end="199:56"><name pos:start="199:49" pos:end="199:56">rfd_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="203:25"><expr pos:start="201:5" pos:end="203:24"><call pos:start="201:5" pos:end="203:24"><name pos:start="201:5" pos:end="201:12">stw_phys</name><argument_list pos:start="201:13" pos:end="203:24">(<argument pos:start="201:14" pos:end="201:72"><expr pos:start="201:14" pos:end="201:72"><name pos:start="201:14" pos:end="201:23"><name pos:start="201:14" pos:end="201:14">s</name><operator pos:start="201:15" pos:end="201:16">-&gt;</operator><name pos:start="201:17" pos:end="201:23">ru_base</name></name> <operator pos:start="201:25" pos:end="201:25">+</operator> <name pos:start="201:27" pos:end="201:38"><name pos:start="201:27" pos:end="201:27">s</name><operator pos:start="201:28" pos:end="201:29">-&gt;</operator><name pos:start="201:30" pos:end="201:38">ru_offset</name></name> <operator pos:start="201:40" pos:end="201:40">+</operator> <call pos:start="201:42" pos:end="201:72"><name pos:start="201:42" pos:end="201:49">offsetof</name><argument_list pos:start="201:50" pos:end="201:72">(<argument pos:start="201:51" pos:end="201:63"><expr pos:start="201:51" pos:end="201:63"><name pos:start="201:51" pos:end="201:63">eepro100_rx_t</name></expr></argument>, <argument pos:start="201:66" pos:end="201:71"><expr pos:start="201:66" pos:end="201:71"><name pos:start="201:66" pos:end="201:71">status</name></expr></argument>)</argument_list></call></expr></argument>,

             <argument pos:start="203:14" pos:end="203:23"><expr pos:start="203:14" pos:end="203:23"><name pos:start="203:14" pos:end="203:23">rfd_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="214:0"><expr pos:start="205:5" pos:end="205:78"><call pos:start="205:5" pos:end="205:78"><name pos:start="205:5" pos:end="205:12">stw_phys</name><argument_list pos:start="205:13" pos:end="205:78">(<argument pos:start="205:14" pos:end="205:71"><expr pos:start="205:14" pos:end="205:71"><name pos:start="205:14" pos:end="205:23"><name pos:start="205:14" pos:end="205:14">s</name><operator pos:start="205:15" pos:end="205:16">-&gt;</operator><name pos:start="205:17" pos:end="205:23">ru_base</name></name> <operator pos:start="205:25" pos:end="205:25">+</operator> <name pos:start="205:27" pos:end="205:38"><name pos:start="205:27" pos:end="205:27">s</name><operator pos:start="205:28" pos:end="205:29">-&gt;</operator><name pos:start="205:30" pos:end="205:38">ru_offset</name></name> <operator pos:start="205:40" pos:end="205:40">+</operator> <call pos:start="205:42" pos:end="205:71"><name pos:start="205:42" pos:end="205:49">offsetof</name><argument_list pos:start="205:50" pos:end="205:71">(<argument pos:start="205:51" pos:end="205:63"><expr pos:start="205:51" pos:end="205:63"><name pos:start="205:51" pos:end="205:63">eepro100_rx_t</name></expr></argument>, <argument pos:start="205:66" pos:end="205:70"><expr pos:start="205:66" pos:end="205:70"><name pos:start="205:66" pos:end="205:70">count</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="205:74" pos:end="205:77"><expr pos:start="205:74" pos:end="205:77"><name pos:start="205:74" pos:end="205:77">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="207:5" pos:end="207:48">/* Early receive interrupt not supported. */</comment>

<cpp:if pos:start="209:1" pos:end="209:5">#<cpp:directive pos:start="209:2" pos:end="209:3">if</cpp:directive> <expr pos:start="209:5" pos:end="209:5"><literal type="number" pos:start="209:5" pos:end="209:5">0</literal></expr></cpp:if>

    eepro100_er_interrupt(s);

<cpp:endif pos:start="213:1" pos:end="213:6">#<cpp:directive pos:start="213:2" pos:end="213:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="215:5" pos:end="215:45">/* Receive CRC Transfer not supported. */</comment>

    <if_stmt pos:start="217:5" pos:end="232:0"><if pos:start="217:5" pos:end="232:0">if <condition pos:start="217:8" pos:end="217:38">(<expr pos:start="217:9" pos:end="217:37"><name pos:start="217:9" pos:end="217:28"><name pos:start="217:9" pos:end="217:9">s</name><operator pos:start="217:10" pos:end="217:11">-&gt;</operator><name pos:start="217:12" pos:end="217:24">configuration</name><index pos:start="217:25" pos:end="217:28">[<expr pos:start="217:26" pos:end="217:27"><literal type="number" pos:start="217:26" pos:end="217:27">18</literal></expr>]</index></name> <operator pos:start="217:30" pos:end="217:30">&amp;</operator> <call pos:start="217:32" pos:end="217:37"><name pos:start="217:32" pos:end="217:34">BIT</name><argument_list pos:start="217:35" pos:end="217:37">(<argument pos:start="217:36" pos:end="217:36"><expr pos:start="217:36" pos:end="217:36"><literal type="number" pos:start="217:36" pos:end="217:36">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="217:40" pos:end="232:0">{<block_content pos:start="219:9" pos:end="221:18">

        <expr_stmt pos:start="219:9" pos:end="219:40"><expr pos:start="219:9" pos:end="219:39"><call pos:start="219:9" pos:end="219:39"><name pos:start="219:9" pos:end="219:15">missing</name><argument_list pos:start="219:16" pos:end="219:39">(<argument pos:start="219:17" pos:end="219:38"><expr pos:start="219:17" pos:end="219:38"><literal type="string" pos:start="219:17" pos:end="219:38">"Receive CRC Transfer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="221:9" pos:end="221:18">return <expr pos:start="221:16" pos:end="221:17"><operator pos:start="221:16" pos:end="221:16">-</operator><literal type="number" pos:start="221:17" pos:end="221:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="225:5" pos:end="225:43">/* TODO: check stripping enable bit. */</comment>

<cpp:if pos:start="227:1" pos:end="227:5">#<cpp:directive pos:start="227:2" pos:end="227:3">if</cpp:directive> <expr pos:start="227:5" pos:end="227:5"><literal type="number" pos:start="227:5" pos:end="227:5">0</literal></expr></cpp:if>

    assert(!(s-&gt;configuration[17] &amp; BIT(0)));

<cpp:endif pos:start="231:1" pos:end="231:6">#<cpp:directive pos:start="231:2" pos:end="231:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="233:5" pos:end="235:74"><expr pos:start="233:5" pos:end="235:73"><call pos:start="233:5" pos:end="235:73"><name pos:start="233:5" pos:end="233:29">cpu_physical_memory_write</name><argument_list pos:start="233:30" pos:end="235:73">(<argument pos:start="233:31" pos:end="235:61"><expr pos:start="233:31" pos:end="235:61"><name pos:start="233:31" pos:end="233:40"><name pos:start="233:31" pos:end="233:31">s</name><operator pos:start="233:32" pos:end="233:33">-&gt;</operator><name pos:start="233:34" pos:end="233:40">ru_base</name></name> <operator pos:start="233:42" pos:end="233:42">+</operator> <name pos:start="233:44" pos:end="233:55"><name pos:start="233:44" pos:end="233:44">s</name><operator pos:start="233:45" pos:end="233:46">-&gt;</operator><name pos:start="233:47" pos:end="233:55">ru_offset</name></name> <operator pos:start="233:57" pos:end="233:57">+</operator>

                              <call pos:start="235:31" pos:end="235:61"><name pos:start="235:31" pos:end="235:38">offsetof</name><argument_list pos:start="235:39" pos:end="235:61">(<argument pos:start="235:40" pos:end="235:52"><expr pos:start="235:40" pos:end="235:52"><name pos:start="235:40" pos:end="235:52">eepro100_rx_t</name></expr></argument>, <argument pos:start="235:55" pos:end="235:60"><expr pos:start="235:55" pos:end="235:60"><name pos:start="235:55" pos:end="235:60">packet</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="235:64" pos:end="235:66"><expr pos:start="235:64" pos:end="235:66"><name pos:start="235:64" pos:end="235:66">buf</name></expr></argument>, <argument pos:start="235:69" pos:end="235:72"><expr pos:start="235:69" pos:end="235:72"><name pos:start="235:69" pos:end="235:72">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:35"><expr pos:start="237:5" pos:end="237:34"><name pos:start="237:5" pos:end="237:32"><name pos:start="237:5" pos:end="237:5">s</name><operator pos:start="237:6" pos:end="237:7">-&gt;</operator><name pos:start="237:8" pos:end="237:17">statistics</name><operator pos:start="237:18" pos:end="237:18">.</operator><name pos:start="237:19" pos:end="237:32">rx_good_frames</name></name><operator pos:start="237:33" pos:end="237:34">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:29"><expr pos:start="239:5" pos:end="239:28"><call pos:start="239:5" pos:end="239:28"><name pos:start="239:5" pos:end="239:25">eepro100_fr_interrupt</name><argument_list pos:start="239:26" pos:end="239:28">(<argument pos:start="239:27" pos:end="239:27"><expr pos:start="239:27" pos:end="239:27"><name pos:start="239:27" pos:end="239:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:40"><expr pos:start="241:5" pos:end="241:39"><name pos:start="241:5" pos:end="241:16"><name pos:start="241:5" pos:end="241:5">s</name><operator pos:start="241:6" pos:end="241:7">-&gt;</operator><name pos:start="241:8" pos:end="241:16">ru_offset</name></name> <operator pos:start="241:18" pos:end="241:18">=</operator> <call pos:start="241:20" pos:end="241:39"><name pos:start="241:20" pos:end="241:30">le32_to_cpu</name><argument_list pos:start="241:31" pos:end="241:39">(<argument pos:start="241:32" pos:end="241:38"><expr pos:start="241:32" pos:end="241:38"><name pos:start="241:32" pos:end="241:38"><name pos:start="241:32" pos:end="241:33">rx</name><operator pos:start="241:34" pos:end="241:34">.</operator><name pos:start="241:35" pos:end="241:38">link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="243:5" pos:end="251:5"><if pos:start="243:5" pos:end="251:5">if <condition pos:start="243:8" pos:end="243:33">(<expr pos:start="243:9" pos:end="243:32"><name pos:start="243:9" pos:end="243:19">rfd_command</name> <operator pos:start="243:21" pos:end="243:21">&amp;</operator> <name pos:start="243:23" pos:end="243:32">COMMAND_EL</name></expr>)</condition> <block pos:start="243:35" pos:end="251:5">{<block_content pos:start="247:9" pos:end="249:38">

        <comment type="block" pos:start="245:9" pos:end="245:56">/* EL bit is set, so this was the last frame. */</comment>

        <expr_stmt pos:start="247:9" pos:end="247:51"><expr pos:start="247:9" pos:end="247:50"><call pos:start="247:9" pos:end="247:50"><name pos:start="247:9" pos:end="247:14">logout</name><argument_list pos:start="247:15" pos:end="247:50">(<argument pos:start="247:16" pos:end="247:49"><expr pos:start="247:16" pos:end="247:49"><literal type="string" pos:start="247:16" pos:end="247:49">"receive: Running out of frames\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:38"><expr pos:start="249:9" pos:end="249:37"><call pos:start="249:9" pos:end="249:37"><name pos:start="249:9" pos:end="249:20">set_ru_state</name><argument_list pos:start="249:21" pos:end="249:37">(<argument pos:start="249:22" pos:end="249:22"><expr pos:start="249:22" pos:end="249:22"><name pos:start="249:22" pos:end="249:22">s</name></expr></argument>, <argument pos:start="249:25" pos:end="249:36"><expr pos:start="249:25" pos:end="249:36"><name pos:start="249:25" pos:end="249:36">ru_suspended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="253:5" pos:end="259:5"><if pos:start="253:5" pos:end="259:5">if <condition pos:start="253:8" pos:end="253:32">(<expr pos:start="253:9" pos:end="253:31"><name pos:start="253:9" pos:end="253:19">rfd_command</name> <operator pos:start="253:21" pos:end="253:21">&amp;</operator> <name pos:start="253:23" pos:end="253:31">COMMAND_S</name></expr>)</condition> <block pos:start="253:34" pos:end="259:5">{<block_content pos:start="257:9" pos:end="257:38">

        <comment type="block" pos:start="255:9" pos:end="255:27">/* S bit is set. */</comment>

        <expr_stmt pos:start="257:9" pos:end="257:38"><expr pos:start="257:9" pos:end="257:37"><call pos:start="257:9" pos:end="257:37"><name pos:start="257:9" pos:end="257:20">set_ru_state</name><argument_list pos:start="257:21" pos:end="257:37">(<argument pos:start="257:22" pos:end="257:22"><expr pos:start="257:22" pos:end="257:22"><name pos:start="257:22" pos:end="257:22">s</name></expr></argument>, <argument pos:start="257:25" pos:end="257:36"><expr pos:start="257:25" pos:end="257:36"><name pos:start="257:25" pos:end="257:36">ru_suspended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="261:5" pos:end="261:16">return <expr pos:start="261:12" pos:end="261:15"><name pos:start="261:12" pos:end="261:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
