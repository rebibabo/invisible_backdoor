<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26374.c" pos:tabs="8"><function pos:start="1:1" pos:end="263:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">net_client_init</name><parameter_list pos:start="1:27" pos:end="1:43">(<parameter pos:start="1:28" pos:end="1:42"><decl pos:start="1:28" pos:end="1:42"><type pos:start="1:28" pos:end="1:39"><specifier pos:start="1:28" pos:end="1:32">const</specifier> <name pos:start="1:34" pos:end="1:37">char</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">str</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="263:1">{<block_content pos:start="5:5" pos:end="261:15">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:11">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:19"><name pos:start="9:10" pos:end="9:15">device</name><index pos:start="9:16" pos:end="9:19">[<expr pos:start="9:17" pos:end="9:18"><literal type="number" pos:start="9:17" pos:end="9:18">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:18"><name pos:start="11:10" pos:end="11:12">buf</name><index pos:start="11:13" pos:end="11:18">[<expr pos:start="11:14" pos:end="11:17"><literal type="number" pos:start="11:14" pos:end="11:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:15">vlan_id</name></decl>, <decl pos:start="13:18" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:20">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">VLANState</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:19">vlan</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:12"><expr pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:5">p</name> <operator pos:start="19:7" pos:end="19:7">=</operator> <name pos:start="19:9" pos:end="19:11">str</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:15"><expr pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:5">q</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <name pos:start="21:9" pos:end="21:14">device</name></expr>;</expr_stmt>

    <while pos:start="23:5" pos:end="31:5">while <condition pos:start="23:11" pos:end="23:35">(<expr pos:start="23:12" pos:end="23:34"><operator pos:start="23:12" pos:end="23:12">*</operator><name pos:start="23:13" pos:end="23:13">p</name> <operator pos:start="23:15" pos:end="23:16">!=</operator> <literal type="char" pos:start="23:18" pos:end="23:21">'\0'</literal> <operator pos:start="23:23" pos:end="23:24">&amp;&amp;</operator> <operator pos:start="23:26" pos:end="23:26">*</operator><name pos:start="23:27" pos:end="23:27">p</name> <operator pos:start="23:29" pos:end="23:30">!=</operator> <literal type="char" pos:start="23:32" pos:end="23:34">','</literal></expr>)</condition> <block pos:start="23:37" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:12">

        <if_stmt pos:start="25:9" pos:end="27:22"><if pos:start="25:9" pos:end="27:22">if <condition pos:start="25:12" pos:end="25:46">(<expr pos:start="25:13" pos:end="25:45"><operator pos:start="25:13" pos:end="25:13">(</operator><name pos:start="25:14" pos:end="25:14">q</name> <operator pos:start="25:16" pos:end="25:16">-</operator> <name pos:start="25:18" pos:end="25:23">device</name><operator pos:start="25:24" pos:end="25:24">)</operator> <operator pos:start="25:26" pos:end="25:26">&lt;</operator> <sizeof pos:start="25:28" pos:end="25:41">sizeof<argument_list pos:start="25:34" pos:end="25:41">(<argument pos:start="25:35" pos:end="25:40"><expr pos:start="25:35" pos:end="25:40"><name pos:start="25:35" pos:end="25:40">device</name></expr></argument>)</argument_list></sizeof> <operator pos:start="25:43" pos:end="25:43">-</operator> <literal type="number" pos:start="25:45" pos:end="25:45">1</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:22"><block_content pos:start="27:13" pos:end="27:22">

            <expr_stmt pos:start="27:13" pos:end="27:22"><expr pos:start="27:13" pos:end="27:21"><operator pos:start="27:13" pos:end="27:13">*</operator><name pos:start="27:14" pos:end="27:14">q</name><operator pos:start="27:15" pos:end="27:16">++</operator> <operator pos:start="27:18" pos:end="27:18">=</operator> <operator pos:start="27:20" pos:end="27:20">*</operator><name pos:start="27:21" pos:end="27:21">p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:12"><expr pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:9">p</name><operator pos:start="29:10" pos:end="29:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="33:5" pos:end="33:14"><expr pos:start="33:5" pos:end="33:13"><operator pos:start="33:5" pos:end="33:5">*</operator><name pos:start="33:6" pos:end="33:6">q</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <literal type="char" pos:start="33:10" pos:end="33:13">'\0'</literal></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="37:12"><if pos:start="35:5" pos:end="37:12">if <condition pos:start="35:8" pos:end="35:18">(<expr pos:start="35:9" pos:end="35:17"><operator pos:start="35:9" pos:end="35:9">*</operator><name pos:start="35:10" pos:end="35:10">p</name> <operator pos:start="35:12" pos:end="35:13">==</operator> <literal type="char" pos:start="35:15" pos:end="35:17">','</literal></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:12"><block_content pos:start="37:9" pos:end="37:12">

        <expr_stmt pos:start="37:9" pos:end="37:12"><expr pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:9">p</name><operator pos:start="37:10" pos:end="37:11">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:16"><expr pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:11">vlan_id</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:53">(<expr pos:start="41:9" pos:end="41:52"><call pos:start="41:9" pos:end="41:52"><name pos:start="41:9" pos:end="41:23">get_param_value</name><argument_list pos:start="41:24" pos:end="41:52">(<argument pos:start="41:25" pos:end="41:27"><expr pos:start="41:25" pos:end="41:27"><name pos:start="41:25" pos:end="41:27">buf</name></expr></argument>, <argument pos:start="41:30" pos:end="41:40"><expr pos:start="41:30" pos:end="41:40"><sizeof pos:start="41:30" pos:end="41:40">sizeof<argument_list pos:start="41:36" pos:end="41:40">(<argument pos:start="41:37" pos:end="41:39"><expr pos:start="41:37" pos:end="41:39"><name pos:start="41:37" pos:end="41:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="41:43" pos:end="41:48"><expr pos:start="41:43" pos:end="41:48"><literal type="string" pos:start="41:43" pos:end="41:48">"vlan"</literal></expr></argument>, <argument pos:start="41:51" pos:end="41:51"><expr pos:start="41:51" pos:end="41:51"><name pos:start="41:51" pos:end="41:51">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:55" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:39">

        <expr_stmt pos:start="43:9" pos:end="43:39"><expr pos:start="43:9" pos:end="43:38"><name pos:start="43:9" pos:end="43:15">vlan_id</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <call pos:start="43:19" pos:end="43:38"><name pos:start="43:19" pos:end="43:24">strtol</name><argument_list pos:start="43:25" pos:end="43:38">(<argument pos:start="43:26" pos:end="43:28"><expr pos:start="43:26" pos:end="43:28"><name pos:start="43:26" pos:end="43:28">buf</name></expr></argument>, <argument pos:start="43:31" pos:end="43:34"><expr pos:start="43:31" pos:end="43:34"><name pos:start="43:31" pos:end="43:34">NULL</name></expr></argument>, <argument pos:start="43:37" pos:end="43:37"><expr pos:start="43:37" pos:end="43:37"><literal type="number" pos:start="43:37" pos:end="43:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:35"><expr pos:start="47:5" pos:end="47:34"><name pos:start="47:5" pos:end="47:8">vlan</name> <operator pos:start="47:10" pos:end="47:10">=</operator> <call pos:start="47:12" pos:end="47:34"><name pos:start="47:12" pos:end="47:25">qemu_find_vlan</name><argument_list pos:start="47:26" pos:end="47:34">(<argument pos:start="47:27" pos:end="47:33"><expr pos:start="47:27" pos:end="47:33"><name pos:start="47:27" pos:end="47:33">vlan_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:14">(<expr pos:start="49:9" pos:end="49:13"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:13">vlan</name></expr>)</condition> <block pos:start="49:16" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:18">

        <expr_stmt pos:start="51:9" pos:end="51:63"><expr pos:start="51:9" pos:end="51:62"><call pos:start="51:9" pos:end="51:62"><name pos:start="51:9" pos:end="51:15">fprintf</name><argument_list pos:start="51:16" pos:end="51:62">(<argument pos:start="51:17" pos:end="51:22"><expr pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:22">stderr</name></expr></argument>, <argument pos:start="51:25" pos:end="51:52"><expr pos:start="51:25" pos:end="51:52"><literal type="string" pos:start="51:25" pos:end="51:52">"Could not create vlan %d\n"</literal></expr></argument>, <argument pos:start="51:55" pos:end="51:61"><expr pos:start="51:55" pos:end="51:61"><name pos:start="51:55" pos:end="51:61">vlan_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:18">return <expr pos:start="53:16" pos:end="53:17"><operator pos:start="53:16" pos:end="53:16">-</operator><literal type="number" pos:start="53:17" pos:end="53:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="251:5"><if pos:start="57:5" pos:end="117:5">if <condition pos:start="57:8" pos:end="57:31">(<expr pos:start="57:9" pos:end="57:30"><operator pos:start="57:9" pos:end="57:9">!</operator><call pos:start="57:10" pos:end="57:30"><name pos:start="57:10" pos:end="57:15">strcmp</name><argument_list pos:start="57:16" pos:end="57:30">(<argument pos:start="57:17" pos:end="57:22"><expr pos:start="57:17" pos:end="57:22"><name pos:start="57:17" pos:end="57:22">device</name></expr></argument>, <argument pos:start="57:25" pos:end="57:29"><expr pos:start="57:25" pos:end="57:29"><literal type="string" pos:start="57:25" pos:end="57:29">"nic"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:33" pos:end="117:5">{<block_content pos:start="59:9" pos:end="115:16">

        <decl_stmt pos:start="59:9" pos:end="59:20"><decl pos:start="59:9" pos:end="59:19"><type pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:15">NICInfo</name> <modifier pos:start="59:17" pos:end="59:17">*</modifier></type><name pos:start="59:18" pos:end="59:19">nd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="61:9" pos:end="61:25"><decl pos:start="61:9" pos:end="61:24"><type pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:15">uint8_t</name> <modifier pos:start="61:17" pos:end="61:17">*</modifier></type><name pos:start="61:18" pos:end="61:24">macaddr</name></decl>;</decl_stmt>



        <if_stmt pos:start="65:9" pos:end="71:9"><if pos:start="65:9" pos:end="71:9">if <condition pos:start="65:12" pos:end="65:32">(<expr pos:start="65:13" pos:end="65:31"><name pos:start="65:13" pos:end="65:19">nb_nics</name> <operator pos:start="65:21" pos:end="65:22">&gt;=</operator> <name pos:start="65:24" pos:end="65:31">MAX_NICS</name></expr>)</condition> <block pos:start="65:34" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:22">

            <expr_stmt pos:start="67:13" pos:end="67:47"><expr pos:start="67:13" pos:end="67:46"><call pos:start="67:13" pos:end="67:46"><name pos:start="67:13" pos:end="67:19">fprintf</name><argument_list pos:start="67:20" pos:end="67:46">(<argument pos:start="67:21" pos:end="67:26"><expr pos:start="67:21" pos:end="67:26"><name pos:start="67:21" pos:end="67:26">stderr</name></expr></argument>, <argument pos:start="67:29" pos:end="67:45"><expr pos:start="67:29" pos:end="67:45"><literal type="string" pos:start="67:29" pos:end="67:45">"Too Many NICs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="69:13" pos:end="69:22">return <expr pos:start="69:20" pos:end="69:21"><operator pos:start="69:20" pos:end="69:20">-</operator><literal type="number" pos:start="69:21" pos:end="69:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:32"><expr pos:start="73:9" pos:end="73:31"><name pos:start="73:9" pos:end="73:10">nd</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <operator pos:start="73:14" pos:end="73:14">&amp;</operator><name pos:start="73:15" pos:end="73:31"><name pos:start="73:15" pos:end="73:22">nd_table</name><index pos:start="73:23" pos:end="73:31">[<expr pos:start="73:24" pos:end="73:30"><name pos:start="73:24" pos:end="73:30">nb_nics</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:30"><expr pos:start="75:9" pos:end="75:29"><name pos:start="75:9" pos:end="75:15">macaddr</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <name pos:start="75:19" pos:end="75:29"><name pos:start="75:19" pos:end="75:20">nd</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:29">macaddr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:26"><expr pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:15">macaddr</name><index pos:start="77:16" pos:end="77:18">[<expr pos:start="77:17" pos:end="77:17"><literal type="number" pos:start="77:17" pos:end="77:17">0</literal></expr>]</index></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <literal type="number" pos:start="77:22" pos:end="77:25">0x52</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:26"><expr pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:15">macaddr</name><index pos:start="79:16" pos:end="79:18">[<expr pos:start="79:17" pos:end="79:17"><literal type="number" pos:start="79:17" pos:end="79:17">1</literal></expr>]</index></name> <operator pos:start="79:20" pos:end="79:20">=</operator> <literal type="number" pos:start="79:22" pos:end="79:25">0x54</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:26"><expr pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:18"><name pos:start="81:9" pos:end="81:15">macaddr</name><index pos:start="81:16" pos:end="81:18">[<expr pos:start="81:17" pos:end="81:17"><literal type="number" pos:start="81:17" pos:end="81:17">2</literal></expr>]</index></name> <operator pos:start="81:20" pos:end="81:20">=</operator> <literal type="number" pos:start="81:22" pos:end="81:25">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:26"><expr pos:start="83:9" pos:end="83:25"><name pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:15">macaddr</name><index pos:start="83:16" pos:end="83:18">[<expr pos:start="83:17" pos:end="83:17"><literal type="number" pos:start="83:17" pos:end="83:17">3</literal></expr>]</index></name> <operator pos:start="83:20" pos:end="83:20">=</operator> <literal type="number" pos:start="83:22" pos:end="83:25">0x12</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:26"><expr pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:18"><name pos:start="85:9" pos:end="85:15">macaddr</name><index pos:start="85:16" pos:end="85:18">[<expr pos:start="85:17" pos:end="85:17"><literal type="number" pos:start="85:17" pos:end="85:17">4</literal></expr>]</index></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <literal type="number" pos:start="85:22" pos:end="85:25">0x34</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:36"><expr pos:start="87:9" pos:end="87:35"><name pos:start="87:9" pos:end="87:18"><name pos:start="87:9" pos:end="87:15">macaddr</name><index pos:start="87:16" pos:end="87:18">[<expr pos:start="87:17" pos:end="87:17"><literal type="number" pos:start="87:17" pos:end="87:17">5</literal></expr>]</index></name> <operator pos:start="87:20" pos:end="87:20">=</operator> <literal type="number" pos:start="87:22" pos:end="87:27">0x56</literal> <operator pos:start="87:27" pos:end="87:27">+</operator> <name pos:start="87:29" pos:end="87:35">nb_nics</name></expr>;</expr_stmt>



        <if_stmt pos:start="91:9" pos:end="101:9"><if pos:start="91:9" pos:end="101:9">if <condition pos:start="91:12" pos:end="91:60">(<expr pos:start="91:13" pos:end="91:59"><call pos:start="91:13" pos:end="91:59"><name pos:start="91:13" pos:end="91:27">get_param_value</name><argument_list pos:start="91:28" pos:end="91:59">(<argument pos:start="91:29" pos:end="91:31"><expr pos:start="91:29" pos:end="91:31"><name pos:start="91:29" pos:end="91:31">buf</name></expr></argument>, <argument pos:start="91:34" pos:end="91:44"><expr pos:start="91:34" pos:end="91:44"><sizeof pos:start="91:34" pos:end="91:44">sizeof<argument_list pos:start="91:40" pos:end="91:44">(<argument pos:start="91:41" pos:end="91:43"><expr pos:start="91:41" pos:end="91:43"><name pos:start="91:41" pos:end="91:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="91:47" pos:end="91:55"><expr pos:start="91:47" pos:end="91:55"><literal type="string" pos:start="91:47" pos:end="91:55">"macaddr"</literal></expr></argument>, <argument pos:start="91:58" pos:end="91:58"><expr pos:start="91:58" pos:end="91:58"><name pos:start="91:58" pos:end="91:58">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:62" pos:end="101:9">{<block_content pos:start="93:13" pos:end="99:13">

            <if_stmt pos:start="93:13" pos:end="99:13"><if pos:start="93:13" pos:end="99:13">if <condition pos:start="93:16" pos:end="93:48">(<expr pos:start="93:17" pos:end="93:47"><call pos:start="93:17" pos:end="93:43"><name pos:start="93:17" pos:end="93:29">parse_macaddr</name><argument_list pos:start="93:30" pos:end="93:43">(<argument pos:start="93:31" pos:end="93:37"><expr pos:start="93:31" pos:end="93:37"><name pos:start="93:31" pos:end="93:37">macaddr</name></expr></argument>, <argument pos:start="93:40" pos:end="93:42"><expr pos:start="93:40" pos:end="93:42"><name pos:start="93:40" pos:end="93:42">buf</name></expr></argument>)</argument_list></call> <operator pos:start="93:45" pos:end="93:45">&lt;</operator> <literal type="number" pos:start="93:47" pos:end="93:47">0</literal></expr>)</condition> <block pos:start="93:50" pos:end="99:13">{<block_content pos:start="95:17" pos:end="97:26">

                <expr_stmt pos:start="95:17" pos:end="95:73"><expr pos:start="95:17" pos:end="95:72"><call pos:start="95:17" pos:end="95:72"><name pos:start="95:17" pos:end="95:23">fprintf</name><argument_list pos:start="95:24" pos:end="95:72">(<argument pos:start="95:25" pos:end="95:30"><expr pos:start="95:25" pos:end="95:30"><name pos:start="95:25" pos:end="95:30">stderr</name></expr></argument>, <argument pos:start="95:33" pos:end="95:71"><expr pos:start="95:33" pos:end="95:71"><literal type="string" pos:start="95:33" pos:end="95:71">"invalid syntax for ethernet address\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="97:17" pos:end="97:26">return <expr pos:start="97:24" pos:end="97:25"><operator pos:start="97:24" pos:end="97:24">-</operator><literal type="number" pos:start="97:25" pos:end="97:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="103:9" pos:end="107:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:58">(<expr pos:start="103:13" pos:end="103:57"><call pos:start="103:13" pos:end="103:57"><name pos:start="103:13" pos:end="103:27">get_param_value</name><argument_list pos:start="103:28" pos:end="103:57">(<argument pos:start="103:29" pos:end="103:31"><expr pos:start="103:29" pos:end="103:31"><name pos:start="103:29" pos:end="103:31">buf</name></expr></argument>, <argument pos:start="103:34" pos:end="103:44"><expr pos:start="103:34" pos:end="103:44"><sizeof pos:start="103:34" pos:end="103:44">sizeof<argument_list pos:start="103:40" pos:end="103:44">(<argument pos:start="103:41" pos:end="103:43"><expr pos:start="103:41" pos:end="103:43"><name pos:start="103:41" pos:end="103:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="103:47" pos:end="103:53"><expr pos:start="103:47" pos:end="103:53"><literal type="string" pos:start="103:47" pos:end="103:53">"model"</literal></expr></argument>, <argument pos:start="103:56" pos:end="103:56"><expr pos:start="103:56" pos:end="103:56"><name pos:start="103:56" pos:end="103:56">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:60" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:36">

            <expr_stmt pos:start="105:13" pos:end="105:36"><expr pos:start="105:13" pos:end="105:35"><name pos:start="105:13" pos:end="105:21"><name pos:start="105:13" pos:end="105:14">nd</name><operator pos:start="105:15" pos:end="105:16">-&gt;</operator><name pos:start="105:17" pos:end="105:21">model</name></name> <operator pos:start="105:23" pos:end="105:23">=</operator> <call pos:start="105:25" pos:end="105:35"><name pos:start="105:25" pos:end="105:30">strdup</name><argument_list pos:start="105:31" pos:end="105:35">(<argument pos:start="105:32" pos:end="105:34"><expr pos:start="105:32" pos:end="105:34"><name pos:start="105:32" pos:end="105:34">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:24"><expr pos:start="109:9" pos:end="109:23"><name pos:start="109:9" pos:end="109:16"><name pos:start="109:9" pos:end="109:10">nd</name><operator pos:start="109:11" pos:end="109:12">-&gt;</operator><name pos:start="109:13" pos:end="109:16">vlan</name></name> <operator pos:start="109:18" pos:end="109:18">=</operator> <name pos:start="109:20" pos:end="109:23">vlan</name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:18"><expr pos:start="111:9" pos:end="111:17"><name pos:start="111:9" pos:end="111:15">nb_nics</name><operator pos:start="111:16" pos:end="111:17">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:30"><expr pos:start="113:9" pos:end="113:29"><name pos:start="113:9" pos:end="113:27"><name pos:start="113:9" pos:end="113:12">vlan</name><operator pos:start="113:13" pos:end="113:14">-&gt;</operator><name pos:start="113:15" pos:end="113:27">nb_guest_devs</name></name><operator pos:start="113:28" pos:end="113:29">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:16"><expr pos:start="115:9" pos:end="115:15"><name pos:start="115:9" pos:end="115:11">ret</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <literal type="number" pos:start="115:15" pos:end="115:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="117:7" pos:end="127:5">else

    if <condition pos:start="119:8" pos:end="119:32">(<expr pos:start="119:9" pos:end="119:31"><operator pos:start="119:9" pos:end="119:9">!</operator><call pos:start="119:10" pos:end="119:31"><name pos:start="119:10" pos:end="119:15">strcmp</name><argument_list pos:start="119:16" pos:end="119:31">(<argument pos:start="119:17" pos:end="119:22"><expr pos:start="119:17" pos:end="119:22"><name pos:start="119:17" pos:end="119:22">device</name></expr></argument>, <argument pos:start="119:25" pos:end="119:30"><expr pos:start="119:25" pos:end="119:30"><literal type="string" pos:start="119:25" pos:end="119:30">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:34" pos:end="127:5">{<block_content pos:start="125:9" pos:end="125:16">

        <comment type="block" pos:start="121:9" pos:end="123:24">/* does nothing. It is needed to signal that no network cards

           are wanted */</comment>

        <expr_stmt pos:start="125:9" pos:end="125:16"><expr pos:start="125:9" pos:end="125:15"><name pos:start="125:9" pos:end="125:11">ret</name> <operator pos:start="125:13" pos:end="125:13">=</operator> <literal type="number" pos:start="125:15" pos:end="125:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="127:7" pos:end="142:5">else

<cpp:ifdef pos:start="129:1" pos:end="129:19">#<cpp:directive pos:start="129:2" pos:end="129:6">ifdef</cpp:directive> <name pos:start="129:8" pos:end="129:19">CONFIG_SLIRP</name></cpp:ifdef>

    if <condition pos:start="131:8" pos:end="131:32">(<expr pos:start="131:9" pos:end="131:31"><operator pos:start="131:9" pos:end="131:9">!</operator><call pos:start="131:10" pos:end="131:31"><name pos:start="131:10" pos:end="131:15">strcmp</name><argument_list pos:start="131:16" pos:end="131:31">(<argument pos:start="131:17" pos:end="131:22"><expr pos:start="131:17" pos:end="131:22"><name pos:start="131:17" pos:end="131:22">device</name></expr></argument>, <argument pos:start="131:25" pos:end="131:30"><expr pos:start="131:25" pos:end="131:30"><literal type="string" pos:start="131:25" pos:end="131:30">"user"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="131:34" pos:end="142:5">{<block_content pos:start="133:9" pos:end="140:35">

        <if_stmt pos:start="133:9" pos:end="137:9"><if pos:start="133:9" pos:end="137:9">if <condition pos:start="133:12" pos:end="133:61">(<expr pos:start="133:13" pos:end="133:60"><call pos:start="133:13" pos:end="133:60"><name pos:start="133:13" pos:end="133:27">get_param_value</name><argument_list pos:start="133:28" pos:end="133:60">(<argument pos:start="133:29" pos:end="133:31"><expr pos:start="133:29" pos:end="133:31"><name pos:start="133:29" pos:end="133:31">buf</name></expr></argument>, <argument pos:start="133:34" pos:end="133:44"><expr pos:start="133:34" pos:end="133:44"><sizeof pos:start="133:34" pos:end="133:44">sizeof<argument_list pos:start="133:40" pos:end="133:44">(<argument pos:start="133:41" pos:end="133:43"><expr pos:start="133:41" pos:end="133:43"><name pos:start="133:41" pos:end="133:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="133:47" pos:end="133:56"><expr pos:start="133:47" pos:end="133:56"><literal type="string" pos:start="133:47" pos:end="133:56">"hostname"</literal></expr></argument>, <argument pos:start="133:59" pos:end="133:59"><expr pos:start="133:59" pos:end="133:59"><name pos:start="133:59" pos:end="133:59">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="133:63" pos:end="137:9">{<block_content pos:start="135:13" pos:end="135:65">

            <expr_stmt pos:start="135:13" pos:end="135:65"><expr pos:start="135:13" pos:end="135:64"><call pos:start="135:13" pos:end="135:64"><name pos:start="135:13" pos:end="135:19">pstrcpy</name><argument_list pos:start="135:20" pos:end="135:64">(<argument pos:start="135:21" pos:end="135:34"><expr pos:start="135:21" pos:end="135:34"><name pos:start="135:21" pos:end="135:34">slirp_hostname</name></expr></argument>, <argument pos:start="135:37" pos:end="135:58"><expr pos:start="135:37" pos:end="135:58"><sizeof pos:start="135:37" pos:end="135:58">sizeof<argument_list pos:start="135:43" pos:end="135:58">(<argument pos:start="135:44" pos:end="135:57"><expr pos:start="135:44" pos:end="135:57"><name pos:start="135:44" pos:end="135:57">slirp_hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="135:61" pos:end="135:63"><expr pos:start="135:61" pos:end="135:63"><name pos:start="135:61" pos:end="135:63">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>


        <expr_stmt pos:start="140:9" pos:end="140:35"><expr pos:start="140:9" pos:end="140:34"><name pos:start="140:9" pos:end="140:11">ret</name> <operator pos:start="140:13" pos:end="140:13">=</operator> <call pos:start="140:15" pos:end="140:34"><name pos:start="140:15" pos:end="140:28">net_slirp_init</name><argument_list pos:start="140:29" pos:end="140:34">(<argument pos:start="140:30" pos:end="140:33"><expr pos:start="140:30" pos:end="140:33"><name pos:start="140:30" pos:end="140:33">vlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="142:7" pos:end="163:5">else

<cpp:endif pos:start="144:1" pos:end="144:6">#<cpp:directive pos:start="144:2" pos:end="144:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="146:1" pos:end="146:13">#<cpp:directive pos:start="146:2" pos:end="146:6">ifdef</cpp:directive> <name pos:start="146:8" pos:end="146:13">_WIN32</name></cpp:ifdef>

    if <condition pos:start="148:8" pos:end="148:31">(<expr pos:start="148:9" pos:end="148:30"><operator pos:start="148:9" pos:end="148:9">!</operator><call pos:start="148:10" pos:end="148:30"><name pos:start="148:10" pos:end="148:15">strcmp</name><argument_list pos:start="148:16" pos:end="148:30">(<argument pos:start="148:17" pos:end="148:22"><expr pos:start="148:17" pos:end="148:22"><name pos:start="148:17" pos:end="148:22">device</name></expr></argument>, <argument pos:start="148:25" pos:end="148:29"><expr pos:start="148:25" pos:end="148:29"><literal type="string" pos:start="148:25" pos:end="148:29">"tap"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="148:33" pos:end="163:5">{<block_content pos:start="150:9" pos:end="161:43">

        <decl_stmt pos:start="150:9" pos:end="150:24"><decl pos:start="150:9" pos:end="150:23"><type pos:start="150:9" pos:end="150:12"><name pos:start="150:9" pos:end="150:12">char</name></type> <name pos:start="150:14" pos:end="150:23"><name pos:start="150:14" pos:end="150:19">ifname</name><index pos:start="150:20" pos:end="150:23">[<expr pos:start="150:21" pos:end="150:22"><literal type="number" pos:start="150:21" pos:end="150:22">64</literal></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt pos:start="152:9" pos:end="158:9"><if pos:start="152:9" pos:end="158:9">if <condition pos:start="152:12" pos:end="152:70">(<expr pos:start="152:13" pos:end="152:69"><call pos:start="152:13" pos:end="152:64"><name pos:start="152:13" pos:end="152:27">get_param_value</name><argument_list pos:start="152:28" pos:end="152:64">(<argument pos:start="152:29" pos:end="152:34"><expr pos:start="152:29" pos:end="152:34"><name pos:start="152:29" pos:end="152:34">ifname</name></expr></argument>, <argument pos:start="152:37" pos:end="152:50"><expr pos:start="152:37" pos:end="152:50"><sizeof pos:start="152:37" pos:end="152:50">sizeof<argument_list pos:start="152:43" pos:end="152:50">(<argument pos:start="152:44" pos:end="152:49"><expr pos:start="152:44" pos:end="152:49"><name pos:start="152:44" pos:end="152:49">ifname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="152:53" pos:end="152:60"><expr pos:start="152:53" pos:end="152:60"><literal type="string" pos:start="152:53" pos:end="152:60">"ifname"</literal></expr></argument>, <argument pos:start="152:63" pos:end="152:63"><expr pos:start="152:63" pos:end="152:63"><name pos:start="152:63" pos:end="152:63">p</name></expr></argument>)</argument_list></call> <operator pos:start="152:66" pos:end="152:67">&lt;=</operator> <literal type="number" pos:start="152:69" pos:end="152:69">0</literal></expr>)</condition> <block pos:start="152:72" pos:end="158:9">{<block_content pos:start="154:13" pos:end="156:22">

            <expr_stmt pos:start="154:13" pos:end="154:56"><expr pos:start="154:13" pos:end="154:55"><call pos:start="154:13" pos:end="154:55"><name pos:start="154:13" pos:end="154:19">fprintf</name><argument_list pos:start="154:20" pos:end="154:55">(<argument pos:start="154:21" pos:end="154:26"><expr pos:start="154:21" pos:end="154:26"><name pos:start="154:21" pos:end="154:26">stderr</name></expr></argument>, <argument pos:start="154:29" pos:end="154:54"><expr pos:start="154:29" pos:end="154:54"><literal type="string" pos:start="154:29" pos:end="154:54">"tap: no interface name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="156:13" pos:end="156:22">return <expr pos:start="156:20" pos:end="156:21"><operator pos:start="156:20" pos:end="156:20">-</operator><literal type="number" pos:start="156:21" pos:end="156:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>


        <expr_stmt pos:start="161:9" pos:end="161:43"><expr pos:start="161:9" pos:end="161:42"><name pos:start="161:9" pos:end="161:11">ret</name> <operator pos:start="161:13" pos:end="161:13">=</operator> <call pos:start="161:15" pos:end="161:42"><name pos:start="161:15" pos:end="161:28">tap_win32_init</name><argument_list pos:start="161:29" pos:end="161:42">(<argument pos:start="161:30" pos:end="161:33"><expr pos:start="161:30" pos:end="161:33"><name pos:start="161:30" pos:end="161:33">vlan</name></expr></argument>, <argument pos:start="161:36" pos:end="161:41"><expr pos:start="161:36" pos:end="161:41"><name pos:start="161:36" pos:end="161:41">ifname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="163:7" pos:end="204:5">else

<cpp:else pos:start="165:1" pos:end="165:5">#<cpp:directive pos:start="165:2" pos:end="165:5">else</cpp:directive></cpp:else>

    if <condition pos:start="167:8" pos:end="167:31">(<expr pos:start="167:9" pos:end="167:30"><operator pos:start="167:9" pos:end="167:9">!</operator><call pos:start="167:10" pos:end="167:30"><name pos:start="167:10" pos:end="167:15">strcmp</name><argument_list pos:start="167:16" pos:end="167:30">(<argument pos:start="167:17" pos:end="167:22"><expr pos:start="167:17" pos:end="167:22"><name pos:start="167:17" pos:end="167:22">device</name></expr></argument>, <argument pos:start="167:25" pos:end="167:29"><expr pos:start="167:25" pos:end="167:29"><literal type="string" pos:start="167:25" pos:end="167:29">"tap"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="167:33" pos:end="204:5">{<block_content pos:start="169:9" pos:end="202:9">

        <decl_stmt pos:start="169:9" pos:end="169:24"><decl pos:start="169:9" pos:end="169:23"><type pos:start="169:9" pos:end="169:12"><name pos:start="169:9" pos:end="169:12">char</name></type> <name pos:start="169:14" pos:end="169:23"><name pos:start="169:14" pos:end="169:19">ifname</name><index pos:start="169:20" pos:end="169:23">[<expr pos:start="169:21" pos:end="169:22"><literal type="number" pos:start="169:21" pos:end="169:22">64</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="171:9" pos:end="171:32"><decl pos:start="171:9" pos:end="171:31"><type pos:start="171:9" pos:end="171:12"><name pos:start="171:9" pos:end="171:12">char</name></type> <name pos:start="171:14" pos:end="171:31"><name pos:start="171:14" pos:end="171:25">setup_script</name><index pos:start="171:26" pos:end="171:31">[<expr pos:start="171:27" pos:end="171:30"><literal type="number" pos:start="171:27" pos:end="171:30">1024</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="173:9" pos:end="173:15"><decl pos:start="173:9" pos:end="173:14"><type pos:start="173:9" pos:end="173:11"><name pos:start="173:9" pos:end="173:11">int</name></type> <name pos:start="173:13" pos:end="173:14">fd</name></decl>;</decl_stmt>

        <if_stmt pos:start="175:9" pos:end="202:9"><if pos:start="175:9" pos:end="185:9">if <condition pos:start="175:12" pos:end="175:59">(<expr pos:start="175:13" pos:end="175:58"><call pos:start="175:13" pos:end="175:54"><name pos:start="175:13" pos:end="175:27">get_param_value</name><argument_list pos:start="175:28" pos:end="175:54">(<argument pos:start="175:29" pos:end="175:31"><expr pos:start="175:29" pos:end="175:31"><name pos:start="175:29" pos:end="175:31">buf</name></expr></argument>, <argument pos:start="175:34" pos:end="175:44"><expr pos:start="175:34" pos:end="175:44"><sizeof pos:start="175:34" pos:end="175:44">sizeof<argument_list pos:start="175:40" pos:end="175:44">(<argument pos:start="175:41" pos:end="175:43"><expr pos:start="175:41" pos:end="175:43"><name pos:start="175:41" pos:end="175:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="175:47" pos:end="175:50"><expr pos:start="175:47" pos:end="175:50"><literal type="string" pos:start="175:47" pos:end="175:50">"fd"</literal></expr></argument>, <argument pos:start="175:53" pos:end="175:53"><expr pos:start="175:53" pos:end="175:53"><name pos:start="175:53" pos:end="175:53">p</name></expr></argument>)</argument_list></call> <operator pos:start="175:56" pos:end="175:56">&gt;</operator> <literal type="number" pos:start="175:58" pos:end="175:58">0</literal></expr>)</condition> <block pos:start="175:61" pos:end="185:9">{<block_content pos:start="177:13" pos:end="183:24">

            <expr_stmt pos:start="177:13" pos:end="177:38"><expr pos:start="177:13" pos:end="177:37"><name pos:start="177:13" pos:end="177:14">fd</name> <operator pos:start="177:16" pos:end="177:16">=</operator> <call pos:start="177:18" pos:end="177:37"><name pos:start="177:18" pos:end="177:23">strtol</name><argument_list pos:start="177:24" pos:end="177:37">(<argument pos:start="177:25" pos:end="177:27"><expr pos:start="177:25" pos:end="177:27"><name pos:start="177:25" pos:end="177:27">buf</name></expr></argument>, <argument pos:start="177:30" pos:end="177:33"><expr pos:start="177:30" pos:end="177:33"><name pos:start="177:30" pos:end="177:33">NULL</name></expr></argument>, <argument pos:start="177:36" pos:end="177:36"><expr pos:start="177:36" pos:end="177:36"><literal type="number" pos:start="177:36" pos:end="177:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:21"><expr pos:start="179:13" pos:end="179:20"><name pos:start="179:13" pos:end="179:15">ret</name> <operator pos:start="179:17" pos:end="179:17">=</operator> <operator pos:start="179:19" pos:end="179:19">-</operator><literal type="number" pos:start="179:20" pos:end="179:20">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="181:13" pos:end="183:24"><if pos:start="181:13" pos:end="183:24">if <condition pos:start="181:16" pos:end="181:42">(<expr pos:start="181:17" pos:end="181:41"><call pos:start="181:17" pos:end="181:41"><name pos:start="181:17" pos:end="181:31">net_tap_fd_init</name><argument_list pos:start="181:32" pos:end="181:41">(<argument pos:start="181:33" pos:end="181:36"><expr pos:start="181:33" pos:end="181:36"><name pos:start="181:33" pos:end="181:36">vlan</name></expr></argument>, <argument pos:start="181:39" pos:end="181:40"><expr pos:start="181:39" pos:end="181:40"><name pos:start="181:39" pos:end="181:40">fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="183:17" pos:end="183:24"><block_content pos:start="183:17" pos:end="183:24">

                <expr_stmt pos:start="183:17" pos:end="183:24"><expr pos:start="183:17" pos:end="183:23"><name pos:start="183:17" pos:end="183:19">ret</name> <operator pos:start="183:21" pos:end="183:21">=</operator> <literal type="number" pos:start="183:23" pos:end="183:23">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="185:11" pos:end="202:9">else <block pos:start="185:16" pos:end="202:9">{<block_content pos:start="187:13" pos:end="200:59">

            <if_stmt pos:start="187:13" pos:end="191:13"><if pos:start="187:13" pos:end="191:13">if <condition pos:start="187:16" pos:end="187:74">(<expr pos:start="187:17" pos:end="187:73"><call pos:start="187:17" pos:end="187:68"><name pos:start="187:17" pos:end="187:31">get_param_value</name><argument_list pos:start="187:32" pos:end="187:68">(<argument pos:start="187:33" pos:end="187:38"><expr pos:start="187:33" pos:end="187:38"><name pos:start="187:33" pos:end="187:38">ifname</name></expr></argument>, <argument pos:start="187:41" pos:end="187:54"><expr pos:start="187:41" pos:end="187:54"><sizeof pos:start="187:41" pos:end="187:54">sizeof<argument_list pos:start="187:47" pos:end="187:54">(<argument pos:start="187:48" pos:end="187:53"><expr pos:start="187:48" pos:end="187:53"><name pos:start="187:48" pos:end="187:53">ifname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="187:57" pos:end="187:64"><expr pos:start="187:57" pos:end="187:64"><literal type="string" pos:start="187:57" pos:end="187:64">"ifname"</literal></expr></argument>, <argument pos:start="187:67" pos:end="187:67"><expr pos:start="187:67" pos:end="187:67"><name pos:start="187:67" pos:end="187:67">p</name></expr></argument>)</argument_list></call> <operator pos:start="187:70" pos:end="187:71">&lt;=</operator> <literal type="number" pos:start="187:73" pos:end="187:73">0</literal></expr>)</condition> <block pos:start="187:76" pos:end="191:13">{<block_content pos:start="189:17" pos:end="189:33">

                <expr_stmt pos:start="189:17" pos:end="189:33"><expr pos:start="189:17" pos:end="189:32"><name pos:start="189:17" pos:end="189:25"><name pos:start="189:17" pos:end="189:22">ifname</name><index pos:start="189:23" pos:end="189:25">[<expr pos:start="189:24" pos:end="189:24"><literal type="number" pos:start="189:24" pos:end="189:24">0</literal></expr>]</index></name> <operator pos:start="189:27" pos:end="189:27">=</operator> <literal type="char" pos:start="189:29" pos:end="189:32">'\0'</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="193:13" pos:end="197:13"><if pos:start="193:13" pos:end="197:13">if <condition pos:start="193:16" pos:end="193:86">(<expr pos:start="193:17" pos:end="193:85"><call pos:start="193:17" pos:end="193:80"><name pos:start="193:17" pos:end="193:31">get_param_value</name><argument_list pos:start="193:32" pos:end="193:80">(<argument pos:start="193:33" pos:end="193:44"><expr pos:start="193:33" pos:end="193:44"><name pos:start="193:33" pos:end="193:44">setup_script</name></expr></argument>, <argument pos:start="193:47" pos:end="193:66"><expr pos:start="193:47" pos:end="193:66"><sizeof pos:start="193:47" pos:end="193:66">sizeof<argument_list pos:start="193:53" pos:end="193:66">(<argument pos:start="193:54" pos:end="193:65"><expr pos:start="193:54" pos:end="193:65"><name pos:start="193:54" pos:end="193:65">setup_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="193:69" pos:end="193:76"><expr pos:start="193:69" pos:end="193:76"><literal type="string" pos:start="193:69" pos:end="193:76">"script"</literal></expr></argument>, <argument pos:start="193:79" pos:end="193:79"><expr pos:start="193:79" pos:end="193:79"><name pos:start="193:79" pos:end="193:79">p</name></expr></argument>)</argument_list></call> <operator pos:start="193:82" pos:end="193:83">==</operator> <literal type="number" pos:start="193:85" pos:end="193:85">0</literal></expr>)</condition> <block pos:start="193:88" pos:end="197:13">{<block_content pos:start="195:17" pos:end="195:84">

                <expr_stmt pos:start="195:17" pos:end="195:84"><expr pos:start="195:17" pos:end="195:83"><call pos:start="195:17" pos:end="195:83"><name pos:start="195:17" pos:end="195:23">pstrcpy</name><argument_list pos:start="195:24" pos:end="195:83">(<argument pos:start="195:25" pos:end="195:36"><expr pos:start="195:25" pos:end="195:36"><name pos:start="195:25" pos:end="195:36">setup_script</name></expr></argument>, <argument pos:start="195:39" pos:end="195:58"><expr pos:start="195:39" pos:end="195:58"><sizeof pos:start="195:39" pos:end="195:58">sizeof<argument_list pos:start="195:45" pos:end="195:58">(<argument pos:start="195:46" pos:end="195:57"><expr pos:start="195:46" pos:end="195:57"><name pos:start="195:46" pos:end="195:57">setup_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="195:61" pos:end="195:82"><expr pos:start="195:61" pos:end="195:82"><name pos:start="195:61" pos:end="195:82">DEFAULT_NETWORK_SCRIPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>


            <expr_stmt pos:start="200:13" pos:end="200:59"><expr pos:start="200:13" pos:end="200:58"><name pos:start="200:13" pos:end="200:15">ret</name> <operator pos:start="200:17" pos:end="200:17">=</operator> <call pos:start="200:19" pos:end="200:58"><name pos:start="200:19" pos:end="200:30">net_tap_init</name><argument_list pos:start="200:31" pos:end="200:58">(<argument pos:start="200:32" pos:end="200:35"><expr pos:start="200:32" pos:end="200:35"><name pos:start="200:32" pos:end="200:35">vlan</name></expr></argument>, <argument pos:start="200:38" pos:end="200:43"><expr pos:start="200:38" pos:end="200:43"><name pos:start="200:38" pos:end="200:43">ifname</name></expr></argument>, <argument pos:start="200:46" pos:end="200:57"><expr pos:start="200:46" pos:end="200:57"><name pos:start="200:46" pos:end="200:57">setup_script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="204:7" pos:end="243:5">else

<cpp:endif pos:start="206:1" pos:end="206:6">#<cpp:directive pos:start="206:2" pos:end="206:6">endif</cpp:directive></cpp:endif>

    if <condition pos:start="208:8" pos:end="208:34">(<expr pos:start="208:9" pos:end="208:33"><operator pos:start="208:9" pos:end="208:9">!</operator><call pos:start="208:10" pos:end="208:33"><name pos:start="208:10" pos:end="208:15">strcmp</name><argument_list pos:start="208:16" pos:end="208:33">(<argument pos:start="208:17" pos:end="208:22"><expr pos:start="208:17" pos:end="208:22"><name pos:start="208:17" pos:end="208:22">device</name></expr></argument>, <argument pos:start="208:25" pos:end="208:32"><expr pos:start="208:25" pos:end="208:32"><literal type="string" pos:start="208:25" pos:end="208:32">"socket"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="208:36" pos:end="243:5">{<block_content pos:start="210:9" pos:end="240:9">

        <if_stmt pos:start="210:9" pos:end="240:9"><if pos:start="210:9" pos:end="222:9">if <condition pos:start="210:12" pos:end="210:59">(<expr pos:start="210:13" pos:end="210:58"><call pos:start="210:13" pos:end="210:54"><name pos:start="210:13" pos:end="210:27">get_param_value</name><argument_list pos:start="210:28" pos:end="210:54">(<argument pos:start="210:29" pos:end="210:31"><expr pos:start="210:29" pos:end="210:31"><name pos:start="210:29" pos:end="210:31">buf</name></expr></argument>, <argument pos:start="210:34" pos:end="210:44"><expr pos:start="210:34" pos:end="210:44"><sizeof pos:start="210:34" pos:end="210:44">sizeof<argument_list pos:start="210:40" pos:end="210:44">(<argument pos:start="210:41" pos:end="210:43"><expr pos:start="210:41" pos:end="210:43"><name pos:start="210:41" pos:end="210:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="210:47" pos:end="210:50"><expr pos:start="210:47" pos:end="210:50"><literal type="string" pos:start="210:47" pos:end="210:50">"fd"</literal></expr></argument>, <argument pos:start="210:53" pos:end="210:53"><expr pos:start="210:53" pos:end="210:53"><name pos:start="210:53" pos:end="210:53">p</name></expr></argument>)</argument_list></call> <operator pos:start="210:56" pos:end="210:56">&gt;</operator> <literal type="number" pos:start="210:58" pos:end="210:58">0</literal></expr>)</condition> <block pos:start="210:61" pos:end="222:9">{<block_content pos:start="212:13" pos:end="220:24">

            <decl_stmt pos:start="212:13" pos:end="212:19"><decl pos:start="212:13" pos:end="212:18"><type pos:start="212:13" pos:end="212:15"><name pos:start="212:13" pos:end="212:15">int</name></type> <name pos:start="212:17" pos:end="212:18">fd</name></decl>;</decl_stmt>

            <expr_stmt pos:start="214:13" pos:end="214:38"><expr pos:start="214:13" pos:end="214:37"><name pos:start="214:13" pos:end="214:14">fd</name> <operator pos:start="214:16" pos:end="214:16">=</operator> <call pos:start="214:18" pos:end="214:37"><name pos:start="214:18" pos:end="214:23">strtol</name><argument_list pos:start="214:24" pos:end="214:37">(<argument pos:start="214:25" pos:end="214:27"><expr pos:start="214:25" pos:end="214:27"><name pos:start="214:25" pos:end="214:27">buf</name></expr></argument>, <argument pos:start="214:30" pos:end="214:33"><expr pos:start="214:30" pos:end="214:33"><name pos:start="214:30" pos:end="214:33">NULL</name></expr></argument>, <argument pos:start="214:36" pos:end="214:36"><expr pos:start="214:36" pos:end="214:36"><literal type="number" pos:start="214:36" pos:end="214:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="216:13" pos:end="216:21"><expr pos:start="216:13" pos:end="216:20"><name pos:start="216:13" pos:end="216:15">ret</name> <operator pos:start="216:17" pos:end="216:17">=</operator> <operator pos:start="216:19" pos:end="216:19">-</operator><literal type="number" pos:start="216:20" pos:end="216:20">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="218:13" pos:end="220:24"><if pos:start="218:13" pos:end="220:24">if <condition pos:start="218:16" pos:end="218:48">(<expr pos:start="218:17" pos:end="218:47"><call pos:start="218:17" pos:end="218:47"><name pos:start="218:17" pos:end="218:34">net_socket_fd_init</name><argument_list pos:start="218:35" pos:end="218:47">(<argument pos:start="218:36" pos:end="218:39"><expr pos:start="218:36" pos:end="218:39"><name pos:start="218:36" pos:end="218:39">vlan</name></expr></argument>, <argument pos:start="218:42" pos:end="218:43"><expr pos:start="218:42" pos:end="218:43"><name pos:start="218:42" pos:end="218:43">fd</name></expr></argument>, <argument pos:start="218:46" pos:end="218:46"><expr pos:start="218:46" pos:end="218:46"><literal type="number" pos:start="218:46" pos:end="218:46">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="220:17" pos:end="220:24"><block_content pos:start="220:17" pos:end="220:24">

                <expr_stmt pos:start="220:17" pos:end="220:24"><expr pos:start="220:17" pos:end="220:23"><name pos:start="220:17" pos:end="220:19">ret</name> <operator pos:start="220:21" pos:end="220:21">=</operator> <literal type="number" pos:start="220:23" pos:end="220:23">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="222:11" pos:end="226:9">else if <condition pos:start="222:19" pos:end="222:70">(<expr pos:start="222:20" pos:end="222:69"><call pos:start="222:20" pos:end="222:65"><name pos:start="222:20" pos:end="222:34">get_param_value</name><argument_list pos:start="222:35" pos:end="222:65">(<argument pos:start="222:36" pos:end="222:38"><expr pos:start="222:36" pos:end="222:38"><name pos:start="222:36" pos:end="222:38">buf</name></expr></argument>, <argument pos:start="222:41" pos:end="222:51"><expr pos:start="222:41" pos:end="222:51"><sizeof pos:start="222:41" pos:end="222:51">sizeof<argument_list pos:start="222:47" pos:end="222:51">(<argument pos:start="222:48" pos:end="222:50"><expr pos:start="222:48" pos:end="222:50"><name pos:start="222:48" pos:end="222:50">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="222:54" pos:end="222:61"><expr pos:start="222:54" pos:end="222:61"><literal type="string" pos:start="222:54" pos:end="222:61">"listen"</literal></expr></argument>, <argument pos:start="222:64" pos:end="222:64"><expr pos:start="222:64" pos:end="222:64"><name pos:start="222:64" pos:end="222:64">p</name></expr></argument>)</argument_list></call> <operator pos:start="222:67" pos:end="222:67">&gt;</operator> <literal type="number" pos:start="222:69" pos:end="222:69">0</literal></expr>)</condition> <block pos:start="222:72" pos:end="226:9">{<block_content pos:start="224:13" pos:end="224:52">

            <expr_stmt pos:start="224:13" pos:end="224:52"><expr pos:start="224:13" pos:end="224:51"><name pos:start="224:13" pos:end="224:15">ret</name> <operator pos:start="224:17" pos:end="224:17">=</operator> <call pos:start="224:19" pos:end="224:51"><name pos:start="224:19" pos:end="224:40">net_socket_listen_init</name><argument_list pos:start="224:41" pos:end="224:51">(<argument pos:start="224:42" pos:end="224:45"><expr pos:start="224:42" pos:end="224:45"><name pos:start="224:42" pos:end="224:45">vlan</name></expr></argument>, <argument pos:start="224:48" pos:end="224:50"><expr pos:start="224:48" pos:end="224:50"><name pos:start="224:48" pos:end="224:50">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="226:11" pos:end="230:9">else if <condition pos:start="226:19" pos:end="226:71">(<expr pos:start="226:20" pos:end="226:70"><call pos:start="226:20" pos:end="226:66"><name pos:start="226:20" pos:end="226:34">get_param_value</name><argument_list pos:start="226:35" pos:end="226:66">(<argument pos:start="226:36" pos:end="226:38"><expr pos:start="226:36" pos:end="226:38"><name pos:start="226:36" pos:end="226:38">buf</name></expr></argument>, <argument pos:start="226:41" pos:end="226:51"><expr pos:start="226:41" pos:end="226:51"><sizeof pos:start="226:41" pos:end="226:51">sizeof<argument_list pos:start="226:47" pos:end="226:51">(<argument pos:start="226:48" pos:end="226:50"><expr pos:start="226:48" pos:end="226:50"><name pos:start="226:48" pos:end="226:50">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="226:54" pos:end="226:62"><expr pos:start="226:54" pos:end="226:62"><literal type="string" pos:start="226:54" pos:end="226:62">"connect"</literal></expr></argument>, <argument pos:start="226:65" pos:end="226:65"><expr pos:start="226:65" pos:end="226:65"><name pos:start="226:65" pos:end="226:65">p</name></expr></argument>)</argument_list></call> <operator pos:start="226:68" pos:end="226:68">&gt;</operator> <literal type="number" pos:start="226:70" pos:end="226:70">0</literal></expr>)</condition> <block pos:start="226:73" pos:end="230:9">{<block_content pos:start="228:13" pos:end="228:53">

            <expr_stmt pos:start="228:13" pos:end="228:53"><expr pos:start="228:13" pos:end="228:52"><name pos:start="228:13" pos:end="228:15">ret</name> <operator pos:start="228:17" pos:end="228:17">=</operator> <call pos:start="228:19" pos:end="228:52"><name pos:start="228:19" pos:end="228:41">net_socket_connect_init</name><argument_list pos:start="228:42" pos:end="228:52">(<argument pos:start="228:43" pos:end="228:46"><expr pos:start="228:43" pos:end="228:46"><name pos:start="228:43" pos:end="228:46">vlan</name></expr></argument>, <argument pos:start="228:49" pos:end="228:51"><expr pos:start="228:49" pos:end="228:51"><name pos:start="228:49" pos:end="228:51">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="230:11" pos:end="234:9">else if <condition pos:start="230:19" pos:end="230:69">(<expr pos:start="230:20" pos:end="230:68"><call pos:start="230:20" pos:end="230:64"><name pos:start="230:20" pos:end="230:34">get_param_value</name><argument_list pos:start="230:35" pos:end="230:64">(<argument pos:start="230:36" pos:end="230:38"><expr pos:start="230:36" pos:end="230:38"><name pos:start="230:36" pos:end="230:38">buf</name></expr></argument>, <argument pos:start="230:41" pos:end="230:51"><expr pos:start="230:41" pos:end="230:51"><sizeof pos:start="230:41" pos:end="230:51">sizeof<argument_list pos:start="230:47" pos:end="230:51">(<argument pos:start="230:48" pos:end="230:50"><expr pos:start="230:48" pos:end="230:50"><name pos:start="230:48" pos:end="230:50">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="230:54" pos:end="230:60"><expr pos:start="230:54" pos:end="230:60"><literal type="string" pos:start="230:54" pos:end="230:60">"mcast"</literal></expr></argument>, <argument pos:start="230:63" pos:end="230:63"><expr pos:start="230:63" pos:end="230:63"><name pos:start="230:63" pos:end="230:63">p</name></expr></argument>)</argument_list></call> <operator pos:start="230:66" pos:end="230:66">&gt;</operator> <literal type="number" pos:start="230:68" pos:end="230:68">0</literal></expr>)</condition> <block pos:start="230:71" pos:end="234:9">{<block_content pos:start="232:13" pos:end="232:51">

            <expr_stmt pos:start="232:13" pos:end="232:51"><expr pos:start="232:13" pos:end="232:50"><name pos:start="232:13" pos:end="232:15">ret</name> <operator pos:start="232:17" pos:end="232:17">=</operator> <call pos:start="232:19" pos:end="232:50"><name pos:start="232:19" pos:end="232:39">net_socket_mcast_init</name><argument_list pos:start="232:40" pos:end="232:50">(<argument pos:start="232:41" pos:end="232:44"><expr pos:start="232:41" pos:end="232:44"><name pos:start="232:41" pos:end="232:44">vlan</name></expr></argument>, <argument pos:start="232:47" pos:end="232:49"><expr pos:start="232:47" pos:end="232:49"><name pos:start="232:47" pos:end="232:49">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="234:11" pos:end="240:9">else <block pos:start="234:16" pos:end="240:9">{<block_content pos:start="236:13" pos:end="238:22">

            <expr_stmt pos:start="236:13" pos:end="236:63"><expr pos:start="236:13" pos:end="236:62"><call pos:start="236:13" pos:end="236:62"><name pos:start="236:13" pos:end="236:19">fprintf</name><argument_list pos:start="236:20" pos:end="236:62">(<argument pos:start="236:21" pos:end="236:26"><expr pos:start="236:21" pos:end="236:26"><name pos:start="236:21" pos:end="236:26">stderr</name></expr></argument>, <argument pos:start="236:29" pos:end="236:58"><expr pos:start="236:29" pos:end="236:58"><literal type="string" pos:start="236:29" pos:end="236:58">"Unknown socket options: %s\n"</literal></expr></argument>, <argument pos:start="236:61" pos:end="236:61"><expr pos:start="236:61" pos:end="236:61"><name pos:start="236:61" pos:end="236:61">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="238:13" pos:end="238:22">return <expr pos:start="238:20" pos:end="238:21"><operator pos:start="238:20" pos:end="238:20">-</operator><literal type="number" pos:start="238:21" pos:end="238:21">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>


    </block_content>}</block></if> <else pos:start="243:7" pos:end="251:5">else

    <block pos:start="245:5" pos:end="251:5">{<block_content pos:start="247:9" pos:end="249:18">

        <expr_stmt pos:start="247:9" pos:end="247:64"><expr pos:start="247:9" pos:end="247:63"><call pos:start="247:9" pos:end="247:63"><name pos:start="247:9" pos:end="247:15">fprintf</name><argument_list pos:start="247:16" pos:end="247:63">(<argument pos:start="247:17" pos:end="247:22"><expr pos:start="247:17" pos:end="247:22"><name pos:start="247:17" pos:end="247:22">stderr</name></expr></argument>, <argument pos:start="247:25" pos:end="247:54"><expr pos:start="247:25" pos:end="247:54"><literal type="string" pos:start="247:25" pos:end="247:54">"Unknown network device: %s\n"</literal></expr></argument>, <argument pos:start="247:57" pos:end="247:62"><expr pos:start="247:57" pos:end="247:62"><name pos:start="247:57" pos:end="247:62">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="249:9" pos:end="249:18">return <expr pos:start="249:16" pos:end="249:17"><operator pos:start="249:16" pos:end="249:16">-</operator><literal type="number" pos:start="249:17" pos:end="249:17">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="253:5" pos:end="257:5"><if pos:start="253:5" pos:end="257:5">if <condition pos:start="253:8" pos:end="253:16">(<expr pos:start="253:9" pos:end="253:15"><name pos:start="253:9" pos:end="253:11">ret</name> <operator pos:start="253:13" pos:end="253:13">&lt;</operator> <literal type="number" pos:start="253:15" pos:end="253:15">0</literal></expr>)</condition> <block pos:start="253:18" pos:end="257:5">{<block_content pos:start="255:9" pos:end="255:70">

        <expr_stmt pos:start="255:9" pos:end="255:70"><expr pos:start="255:9" pos:end="255:69"><call pos:start="255:9" pos:end="255:69"><name pos:start="255:9" pos:end="255:15">fprintf</name><argument_list pos:start="255:16" pos:end="255:69">(<argument pos:start="255:17" pos:end="255:22"><expr pos:start="255:17" pos:end="255:22"><name pos:start="255:17" pos:end="255:22">stderr</name></expr></argument>, <argument pos:start="255:25" pos:end="255:60"><expr pos:start="255:25" pos:end="255:60"><literal type="string" pos:start="255:25" pos:end="255:60">"Could not initialize device '%s'\n"</literal></expr></argument>, <argument pos:start="255:63" pos:end="255:68"><expr pos:start="255:63" pos:end="255:68"><name pos:start="255:63" pos:end="255:68">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    

    <return pos:start="261:5" pos:end="261:15">return <expr pos:start="261:12" pos:end="261:14"><name pos:start="261:12" pos:end="261:14">ret</name></expr>;</return>

</block_content>}</block></function></unit>
