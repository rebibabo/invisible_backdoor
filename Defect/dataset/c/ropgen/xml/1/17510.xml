<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17510.c" pos:tabs="8"><function pos:start="1:1" pos:end="28:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">hmp_chardev_add</name><parameter_list pos:start="1:21" pos:end="1:54">(<parameter pos:start="1:22" pos:end="1:33"><decl pos:start="1:22" pos:end="1:33"><type pos:start="1:22" pos:end="1:33"><name pos:start="1:22" pos:end="1:28">Monitor</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:33">mon</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:53"><decl pos:start="1:36" pos:end="1:53"><type pos:start="1:36" pos:end="1:53"><specifier pos:start="1:36" pos:end="1:40">const</specifier> <name pos:start="1:42" pos:end="1:46">QDict</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">qdict</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="28:1">{<block_content pos:start="5:5" pos:end="26:32">

    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:51"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:20">args</name> <init pos:start="5:22" pos:end="5:51">= <expr pos:start="5:24" pos:end="5:51"><call pos:start="5:24" pos:end="5:51"><name pos:start="5:24" pos:end="5:36">qdict_get_str</name><argument_list pos:start="5:37" pos:end="5:51">(<argument pos:start="5:38" pos:end="5:42"><expr pos:start="5:38" pos:end="5:42"><name pos:start="5:38" pos:end="5:42">qdict</name></expr></argument>, <argument pos:start="5:45" pos:end="5:50"><expr pos:start="5:45" pos:end="5:50"><literal type="string" pos:start="5:45" pos:end="5:50">"args"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:14">err</name> <init pos:start="7:16" pos:end="7:21">= <expr pos:start="7:18" pos:end="7:21"><name pos:start="7:18" pos:end="7:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">QemuOpts</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:18">opts</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:74"><expr pos:start="13:5" pos:end="13:73"><name pos:start="13:5" pos:end="13:8">opts</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <call pos:start="13:12" pos:end="13:73"><name pos:start="13:12" pos:end="13:34">qemu_opts_parse_noisily</name><argument_list pos:start="13:35" pos:end="13:73">(<argument pos:start="13:36" pos:end="13:60"><expr pos:start="13:36" pos:end="13:60"><call pos:start="13:36" pos:end="13:60"><name pos:start="13:36" pos:end="13:49">qemu_find_opts</name><argument_list pos:start="13:50" pos:end="13:60">(<argument pos:start="13:51" pos:end="13:59"><expr pos:start="13:51" pos:end="13:59"><literal type="string" pos:start="13:51" pos:end="13:59">"chardev"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="13:63" pos:end="13:66"><expr pos:start="13:63" pos:end="13:66"><name pos:start="13:63" pos:end="13:66">args</name></expr></argument>, <argument pos:start="13:69" pos:end="13:72"><expr pos:start="13:69" pos:end="13:72"><name pos:start="13:69" pos:end="13:72">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="24:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:21">(<expr pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:12">opts</name> <operator pos:start="15:14" pos:end="15:15">==</operator> <name pos:start="15:17" pos:end="15:20">NULL</name></expr>)</condition> <block pos:start="15:23" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:56">

        <expr_stmt pos:start="17:9" pos:end="17:56"><expr pos:start="17:9" pos:end="17:55"><call pos:start="17:9" pos:end="17:55"><name pos:start="17:9" pos:end="17:18">error_setg</name><argument_list pos:start="17:19" pos:end="17:55">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><operator pos:start="17:20" pos:end="17:20">&amp;</operator><name pos:start="17:21" pos:end="17:23">err</name></expr></argument>, <argument pos:start="17:26" pos:end="17:54"><expr pos:start="17:26" pos:end="17:54"><literal type="string" pos:start="17:26" pos:end="17:54">"Parsing chardev args failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="24:5">else <block pos:start="19:12" pos:end="24:5">{<block_content pos:start="21:9" pos:end="21:49">

        <expr_stmt pos:start="21:9" pos:end="21:49"><expr pos:start="21:9" pos:end="21:48"><call pos:start="21:9" pos:end="21:48"><name pos:start="21:9" pos:end="21:30">qemu_chr_new_from_opts</name><argument_list pos:start="21:31" pos:end="21:48">(<argument pos:start="21:32" pos:end="21:35"><expr pos:start="21:32" pos:end="21:35"><name pos:start="21:32" pos:end="21:35">opts</name></expr></argument>, <argument pos:start="21:38" pos:end="21:41"><expr pos:start="21:38" pos:end="21:41"><name pos:start="21:38" pos:end="21:41">NULL</name></expr></argument>, <argument pos:start="21:44" pos:end="21:47"><expr pos:start="21:44" pos:end="21:47"><operator pos:start="21:44" pos:end="21:44">&amp;</operator><name pos:start="21:45" pos:end="21:47">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="26:5" pos:end="26:32"><expr pos:start="26:5" pos:end="26:31"><call pos:start="26:5" pos:end="26:31"><name pos:start="26:5" pos:end="26:20">hmp_handle_error</name><argument_list pos:start="26:21" pos:end="26:31">(<argument pos:start="26:22" pos:end="26:24"><expr pos:start="26:22" pos:end="26:24"><name pos:start="26:22" pos:end="26:24">mon</name></expr></argument>, <argument pos:start="26:27" pos:end="26:30"><expr pos:start="26:27" pos:end="26:30"><operator pos:start="26:27" pos:end="26:27">&amp;</operator><name pos:start="26:28" pos:end="26:30">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
