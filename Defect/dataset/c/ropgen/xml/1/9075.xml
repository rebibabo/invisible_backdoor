<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9075.c" pos:tabs="8"><function pos:start="1:1" pos:end="179:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">assign_intx</name><parameter_list pos:start="1:23" pos:end="1:57">(<parameter pos:start="1:24" pos:end="1:42"><decl pos:start="1:24" pos:end="1:42"><type pos:start="1:24" pos:end="1:42"><name pos:start="1:24" pos:end="1:37">AssignedDevice</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">dev</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:56"><decl pos:start="1:45" pos:end="1:56"><type pos:start="1:45" pos:end="1:56"><name pos:start="1:45" pos:end="1:49">Error</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier><modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:56">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="179:1">{<block_content pos:start="5:5" pos:end="177:13">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:19">AssignedIRQType</name></type> <name pos:start="5:21" pos:end="5:28">new_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">PCIINTxRoute</name></type> <name pos:start="7:18" pos:end="7:27">intx_route</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:22">intx_host_msi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">r</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">local_err</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:46">/* Interrupt PIN 0 means don't use INTx */</comment>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:70">(<expr pos:start="19:9" pos:end="19:69"><call pos:start="19:9" pos:end="19:64"><name pos:start="19:9" pos:end="19:34">assigned_dev_pci_read_byte</name><argument_list pos:start="19:35" pos:end="19:64">(<argument pos:start="19:36" pos:end="19:44"><expr pos:start="19:36" pos:end="19:44"><operator pos:start="19:36" pos:end="19:36">&amp;</operator><name pos:start="19:37" pos:end="19:44"><name pos:start="19:37" pos:end="19:39">dev</name><operator pos:start="19:40" pos:end="19:41">-&gt;</operator><name pos:start="19:42" pos:end="19:44">dev</name></name></expr></argument>, <argument pos:start="19:47" pos:end="19:63"><expr pos:start="19:47" pos:end="19:63"><name pos:start="19:47" pos:end="19:63">PCI_INTERRUPT_PIN</name></expr></argument>)</argument_list></call> <operator pos:start="19:66" pos:end="19:67">==</operator> <literal type="number" pos:start="19:69" pos:end="19:69">0</literal></expr>)</condition> <block pos:start="19:72" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:17">

        <expr_stmt pos:start="21:9" pos:end="21:62"><expr pos:start="21:9" pos:end="21:61"><call pos:start="21:9" pos:end="21:61"><name pos:start="21:9" pos:end="21:44">pci_device_set_intx_routing_notifier</name><argument_list pos:start="21:45" pos:end="21:61">(<argument pos:start="21:46" pos:end="21:54"><expr pos:start="21:46" pos:end="21:54"><operator pos:start="21:46" pos:end="21:46">&amp;</operator><name pos:start="21:47" pos:end="21:54"><name pos:start="21:47" pos:end="21:49">dev</name><operator pos:start="21:50" pos:end="21:51">-&gt;</operator><name pos:start="21:52" pos:end="21:54">dev</name></name></expr></argument>, <argument pos:start="21:57" pos:end="21:60"><expr pos:start="21:57" pos:end="21:60"><name pos:start="21:57" pos:end="21:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:17">return <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:41"><expr pos:start="29:5" pos:end="29:40"><call pos:start="29:5" pos:end="29:40"><name pos:start="29:5" pos:end="29:28">verify_irqchip_in_kernel</name><argument_list pos:start="29:29" pos:end="29:40">(<argument pos:start="29:30" pos:end="29:39"><expr pos:start="29:30" pos:end="29:39"><operator pos:start="29:30" pos:end="29:30">&amp;</operator><name pos:start="29:31" pos:end="29:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:18">(<expr pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:17">local_err</name></expr>)</condition> <block pos:start="31:20" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:24">

        <expr_stmt pos:start="33:9" pos:end="33:41"><expr pos:start="33:9" pos:end="33:40"><call pos:start="33:9" pos:end="33:40"><name pos:start="33:9" pos:end="33:23">error_propagate</name><argument_list pos:start="33:24" pos:end="33:40">(<argument pos:start="33:25" pos:end="33:28"><expr pos:start="33:25" pos:end="33:28"><name pos:start="33:25" pos:end="33:28">errp</name></expr></argument>, <argument pos:start="33:31" pos:end="33:39"><expr pos:start="33:31" pos:end="33:39"><name pos:start="33:31" pos:end="33:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:24">return <expr pos:start="35:16" pos:end="35:23"><operator pos:start="35:16" pos:end="35:16">-</operator><name pos:start="35:17" pos:end="35:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="43:74"><expr pos:start="41:5" pos:end="43:73"><call pos:start="41:5" pos:end="43:73"><name pos:start="41:5" pos:end="41:40">pci_device_set_intx_routing_notifier</name><argument_list pos:start="41:41" pos:end="43:73">(<argument pos:start="41:42" pos:end="41:50"><expr pos:start="41:42" pos:end="41:50"><operator pos:start="41:42" pos:end="41:42">&amp;</operator><name pos:start="41:43" pos:end="41:50"><name pos:start="41:43" pos:end="41:45">dev</name><operator pos:start="41:46" pos:end="41:47">-&gt;</operator><name pos:start="41:48" pos:end="41:50">dev</name></name></expr></argument>,

                                         <argument pos:start="43:42" pos:end="43:72"><expr pos:start="43:42" pos:end="43:72"><name pos:start="43:42" pos:end="43:72">assigned_dev_update_irq_routing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:70"><expr pos:start="47:5" pos:end="47:69"><name pos:start="47:5" pos:end="47:14">intx_route</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <call pos:start="47:18" pos:end="47:69"><name pos:start="47:18" pos:end="47:45">pci_device_route_intx_to_irq</name><argument_list pos:start="47:46" pos:end="47:69">(<argument pos:start="47:47" pos:end="47:55"><expr pos:start="47:47" pos:end="47:55"><operator pos:start="47:47" pos:end="47:47">&amp;</operator><name pos:start="47:48" pos:end="47:55"><name pos:start="47:48" pos:end="47:50">dev</name><operator pos:start="47:51" pos:end="47:52">-&gt;</operator><name pos:start="47:53" pos:end="47:55">dev</name></name></expr></argument>, <argument pos:start="47:58" pos:end="47:68"><expr pos:start="47:58" pos:end="47:68"><name pos:start="47:58" pos:end="47:68"><name pos:start="47:58" pos:end="47:60">dev</name><operator pos:start="47:61" pos:end="47:62">-&gt;</operator><name pos:start="47:63" pos:end="47:68">intpin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:49"><expr pos:start="49:5" pos:end="49:48"><call pos:start="49:5" pos:end="49:48"><name pos:start="49:5" pos:end="49:10">assert</name><argument_list pos:start="49:11" pos:end="49:48">(<argument pos:start="49:12" pos:end="49:47"><expr pos:start="49:12" pos:end="49:47"><name pos:start="49:12" pos:end="49:26"><name pos:start="49:12" pos:end="49:21">intx_route</name><operator pos:start="49:22" pos:end="49:22">.</operator><name pos:start="49:23" pos:end="49:26">mode</name></name> <operator pos:start="49:28" pos:end="49:29">!=</operator> <name pos:start="49:31" pos:end="49:47">PCI_INTX_INVERTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:63">(<expr pos:start="53:9" pos:end="53:62"><operator pos:start="53:9" pos:end="53:9">!</operator><call pos:start="53:10" pos:end="53:62"><name pos:start="53:10" pos:end="53:31">pci_intx_route_changed</name><argument_list pos:start="53:32" pos:end="53:62">(<argument pos:start="53:33" pos:end="53:48"><expr pos:start="53:33" pos:end="53:48"><operator pos:start="53:33" pos:end="53:33">&amp;</operator><name pos:start="53:34" pos:end="53:48"><name pos:start="53:34" pos:end="53:36">dev</name><operator pos:start="53:37" pos:end="53:38">-&gt;</operator><name pos:start="53:39" pos:end="53:48">intx_route</name></name></expr></argument>, <argument pos:start="53:51" pos:end="53:61"><expr pos:start="53:51" pos:end="53:61"><operator pos:start="53:51" pos:end="53:51">&amp;</operator><name pos:start="53:52" pos:end="53:61">intx_route</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:65" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:17">

        <return pos:start="55:9" pos:end="55:17">return <expr pos:start="55:16" pos:end="55:16"><literal type="number" pos:start="55:16" pos:end="55:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="61:5" pos:end="91:5">switch <condition pos:start="61:12" pos:end="61:35">(<expr pos:start="61:13" pos:end="61:34"><name pos:start="61:13" pos:end="61:34"><name pos:start="61:13" pos:end="61:15">dev</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:34">assigned_irq_type</name></name></expr>)</condition> <block pos:start="61:37" pos:end="91:5">{<block_content pos:start="63:5" pos:end="89:14">

    <case pos:start="63:5" pos:end="63:37">case <expr pos:start="63:10" pos:end="63:36"><name pos:start="63:10" pos:end="63:36">ASSIGNED_IRQ_INTX_HOST_INTX</name></expr>:</case>

    <case pos:start="65:5" pos:end="65:36">case <expr pos:start="65:10" pos:end="65:35"><name pos:start="65:10" pos:end="65:35">ASSIGNED_IRQ_INTX_HOST_MSI</name></expr>:</case>

        <expr_stmt pos:start="67:9" pos:end="67:77"><expr pos:start="67:9" pos:end="67:76"><name pos:start="67:9" pos:end="67:21">intx_host_msi</name> <operator pos:start="67:23" pos:end="67:23">=</operator> <name pos:start="67:25" pos:end="67:46"><name pos:start="67:25" pos:end="67:27">dev</name><operator pos:start="67:28" pos:end="67:29">-&gt;</operator><name pos:start="67:30" pos:end="67:46">assigned_irq_type</name></name> <operator pos:start="67:48" pos:end="67:49">==</operator> <name pos:start="67:51" pos:end="67:76">ASSIGNED_IRQ_INTX_HOST_MSI</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:76"><expr pos:start="69:9" pos:end="69:75"><name pos:start="69:9" pos:end="69:9">r</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <call pos:start="69:13" pos:end="69:75"><name pos:start="69:13" pos:end="69:36">kvm_device_intx_deassign</name><argument_list pos:start="69:37" pos:end="69:75">(<argument pos:start="69:38" pos:end="69:46"><expr pos:start="69:38" pos:end="69:46"><name pos:start="69:38" pos:end="69:46">kvm_state</name></expr></argument>, <argument pos:start="69:49" pos:end="69:59"><expr pos:start="69:49" pos:end="69:59"><name pos:start="69:49" pos:end="69:59"><name pos:start="69:49" pos:end="69:51">dev</name><operator pos:start="69:52" pos:end="69:53">-&gt;</operator><name pos:start="69:54" pos:end="69:59">dev_id</name></name></expr></argument>, <argument pos:start="69:62" pos:end="69:74"><expr pos:start="69:62" pos:end="69:74"><name pos:start="69:62" pos:end="69:74">intx_host_msi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    <case pos:start="73:5" pos:end="73:26">case <expr pos:start="73:10" pos:end="73:25"><name pos:start="73:10" pos:end="73:25">ASSIGNED_IRQ_MSI</name></expr>:</case>

        <expr_stmt pos:start="75:9" pos:end="75:60"><expr pos:start="75:9" pos:end="75:59"><name pos:start="75:9" pos:end="75:9">r</name> <operator pos:start="75:11" pos:end="75:11">=</operator> <call pos:start="75:13" pos:end="75:59"><name pos:start="75:13" pos:end="75:35">kvm_device_msi_deassign</name><argument_list pos:start="75:36" pos:end="75:59">(<argument pos:start="75:37" pos:end="75:45"><expr pos:start="75:37" pos:end="75:45"><name pos:start="75:37" pos:end="75:45">kvm_state</name></expr></argument>, <argument pos:start="75:48" pos:end="75:58"><expr pos:start="75:48" pos:end="75:58"><name pos:start="75:48" pos:end="75:58"><name pos:start="75:48" pos:end="75:50">dev</name><operator pos:start="75:51" pos:end="75:52">-&gt;</operator><name pos:start="75:53" pos:end="75:58">dev_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:27">case <expr pos:start="79:10" pos:end="79:26"><name pos:start="79:10" pos:end="79:26">ASSIGNED_IRQ_MSIX</name></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:61"><expr pos:start="81:9" pos:end="81:60"><name pos:start="81:9" pos:end="81:9">r</name> <operator pos:start="81:11" pos:end="81:11">=</operator> <call pos:start="81:13" pos:end="81:60"><name pos:start="81:13" pos:end="81:36">kvm_device_msix_deassign</name><argument_list pos:start="81:37" pos:end="81:60">(<argument pos:start="81:38" pos:end="81:46"><expr pos:start="81:38" pos:end="81:46"><name pos:start="81:38" pos:end="81:46">kvm_state</name></expr></argument>, <argument pos:start="81:49" pos:end="81:59"><expr pos:start="81:49" pos:end="81:59"><name pos:start="81:49" pos:end="81:59"><name pos:start="81:49" pos:end="81:51">dev</name><operator pos:start="81:52" pos:end="81:53">-&gt;</operator><name pos:start="81:54" pos:end="81:59">dev_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    <default pos:start="85:5" pos:end="85:12">default:</default>

        <expr_stmt pos:start="87:9" pos:end="87:14"><expr pos:start="87:9" pos:end="87:13"><name pos:start="87:9" pos:end="87:9">r</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <literal type="number" pos:start="87:13" pos:end="87:13">0</literal></expr>;</expr_stmt>

        <break pos:start="89:9" pos:end="89:14">break;</break>

    </block_content>}</block></switch>

    <if_stmt pos:start="93:5" pos:end="97:5"><if pos:start="93:5" pos:end="97:5">if <condition pos:start="93:8" pos:end="93:10">(<expr pos:start="93:9" pos:end="93:9"><name pos:start="93:9" pos:end="93:9">r</name></expr>)</condition> <block pos:start="93:12" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:73">

        <expr_stmt pos:start="95:9" pos:end="95:73"><expr pos:start="95:9" pos:end="95:72"><call pos:start="95:9" pos:end="95:72"><name pos:start="95:9" pos:end="95:14">perror</name><argument_list pos:start="95:15" pos:end="95:72">(<argument pos:start="95:16" pos:end="95:71"><expr pos:start="95:16" pos:end="95:71"><literal type="string" pos:start="95:16" pos:end="95:71">"assign_intx: deassignment of previous interrupt failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:47"><expr pos:start="99:5" pos:end="99:46"><name pos:start="99:5" pos:end="99:26"><name pos:start="99:5" pos:end="99:7">dev</name><operator pos:start="99:8" pos:end="99:9">-&gt;</operator><name pos:start="99:10" pos:end="99:26">assigned_irq_type</name></name> <operator pos:start="99:28" pos:end="99:28">=</operator> <name pos:start="99:30" pos:end="99:46">ASSIGNED_IRQ_NONE</name></expr>;</expr_stmt>



    <if_stmt pos:start="103:5" pos:end="109:5"><if pos:start="103:5" pos:end="109:5">if <condition pos:start="103:8" pos:end="103:45">(<expr pos:start="103:9" pos:end="103:44"><name pos:start="103:9" pos:end="103:23"><name pos:start="103:9" pos:end="103:18">intx_route</name><operator pos:start="103:19" pos:end="103:19">.</operator><name pos:start="103:20" pos:end="103:23">mode</name></name> <operator pos:start="103:25" pos:end="103:26">==</operator> <name pos:start="103:28" pos:end="103:44">PCI_INTX_DISABLED</name></expr>)</condition> <block pos:start="103:47" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:17">

        <expr_stmt pos:start="105:9" pos:end="105:37"><expr pos:start="105:9" pos:end="105:36"><name pos:start="105:9" pos:end="105:23"><name pos:start="105:9" pos:end="105:11">dev</name><operator pos:start="105:12" pos:end="105:13">-&gt;</operator><name pos:start="105:14" pos:end="105:23">intx_route</name></name> <operator pos:start="105:25" pos:end="105:25">=</operator> <name pos:start="105:27" pos:end="105:36">intx_route</name></expr>;</expr_stmt>

        <return pos:start="107:9" pos:end="107:17">return <expr pos:start="107:16" pos:end="107:16"><literal type="number" pos:start="107:16" pos:end="107:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



<label pos:start="113:1" pos:end="113:6"><name pos:start="113:1" pos:end="113:5">retry</name>:</label>

    <if_stmt pos:start="115:5" pos:end="129:5"><if pos:start="115:5" pos:end="123:5">if <condition pos:start="115:8" pos:end="117:53">(<expr pos:start="115:9" pos:end="117:52"><name pos:start="115:9" pos:end="115:21"><name pos:start="115:9" pos:end="115:11">dev</name><operator pos:start="115:12" pos:end="115:13">-&gt;</operator><name pos:start="115:14" pos:end="115:21">features</name></name> <operator pos:start="115:23" pos:end="115:23">&amp;</operator> <name pos:start="115:25" pos:end="115:55">ASSIGNED_DEVICE_PREFER_MSI_MASK</name> <operator pos:start="115:57" pos:end="115:58">&amp;&amp;</operator>

        <name pos:start="117:9" pos:end="117:26"><name pos:start="117:9" pos:end="117:11">dev</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:16">cap</name><operator pos:start="117:17" pos:end="117:17">.</operator><name pos:start="117:18" pos:end="117:26">available</name></name> <operator pos:start="117:28" pos:end="117:28">&amp;</operator> <name pos:start="117:30" pos:end="117:52">ASSIGNED_DEVICE_CAP_MSI</name></expr>)</condition> <block pos:start="117:55" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:46">

        <expr_stmt pos:start="119:9" pos:end="119:29"><expr pos:start="119:9" pos:end="119:28"><name pos:start="119:9" pos:end="119:21">intx_host_msi</name> <operator pos:start="119:23" pos:end="119:23">=</operator> <name pos:start="119:25" pos:end="119:28">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:46"><expr pos:start="121:9" pos:end="121:45"><name pos:start="121:9" pos:end="121:16">new_type</name> <operator pos:start="121:18" pos:end="121:18">=</operator> <name pos:start="121:20" pos:end="121:45">ASSIGNED_IRQ_INTX_HOST_MSI</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="123:7" pos:end="129:5">else <block pos:start="123:12" pos:end="129:5">{<block_content pos:start="125:9" pos:end="127:47">

        <expr_stmt pos:start="125:9" pos:end="125:30"><expr pos:start="125:9" pos:end="125:29"><name pos:start="125:9" pos:end="125:21">intx_host_msi</name> <operator pos:start="125:23" pos:end="125:23">=</operator> <name pos:start="125:25" pos:end="125:29">false</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:47"><expr pos:start="127:9" pos:end="127:46"><name pos:start="127:9" pos:end="127:16">new_type</name> <operator pos:start="127:18" pos:end="127:18">=</operator> <name pos:start="127:20" pos:end="127:46">ASSIGNED_IRQ_INTX_HOST_INTX</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="135:47"><expr pos:start="133:5" pos:end="135:46"><name pos:start="133:5" pos:end="133:5">r</name> <operator pos:start="133:7" pos:end="133:7">=</operator> <call pos:start="133:9" pos:end="135:46"><name pos:start="133:9" pos:end="133:30">kvm_device_intx_assign</name><argument_list pos:start="133:31" pos:end="135:46">(<argument pos:start="133:32" pos:end="133:40"><expr pos:start="133:32" pos:end="133:40"><name pos:start="133:32" pos:end="133:40">kvm_state</name></expr></argument>, <argument pos:start="133:43" pos:end="133:53"><expr pos:start="133:43" pos:end="133:53"><name pos:start="133:43" pos:end="133:53"><name pos:start="133:43" pos:end="133:45">dev</name><operator pos:start="133:46" pos:end="133:47">-&gt;</operator><name pos:start="133:48" pos:end="133:53">dev_id</name></name></expr></argument>, <argument pos:start="133:56" pos:end="133:68"><expr pos:start="133:56" pos:end="133:68"><name pos:start="133:56" pos:end="133:68">intx_host_msi</name></expr></argument>,

                               <argument pos:start="135:32" pos:end="135:45"><expr pos:start="135:32" pos:end="135:45"><name pos:start="135:32" pos:end="135:45"><name pos:start="135:32" pos:end="135:41">intx_route</name><operator pos:start="135:42" pos:end="135:42">.</operator><name pos:start="135:43" pos:end="135:45">irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="169:5"><if pos:start="137:5" pos:end="169:5">if <condition pos:start="137:8" pos:end="137:14">(<expr pos:start="137:9" pos:end="137:13"><name pos:start="137:9" pos:end="137:9">r</name> <operator pos:start="137:11" pos:end="137:11">&lt;</operator> <literal type="number" pos:start="137:13" pos:end="137:13">0</literal></expr>)</condition> <block pos:start="137:16" pos:end="169:5">{<block_content pos:start="139:9" pos:end="167:17">

        <if_stmt pos:start="139:9" pos:end="157:9"><if pos:start="139:9" pos:end="157:9">if <condition pos:start="139:12" pos:end="141:57">(<expr pos:start="139:13" pos:end="141:56"><name pos:start="139:13" pos:end="139:13">r</name> <operator pos:start="139:15" pos:end="139:16">==</operator> <operator pos:start="139:18" pos:end="139:18">-</operator><name pos:start="139:19" pos:end="139:21">EIO</name> <operator pos:start="139:23" pos:end="139:24">&amp;&amp;</operator> <operator pos:start="139:26" pos:end="139:26">!</operator><operator pos:start="139:27" pos:end="139:27">(</operator><name pos:start="139:28" pos:end="139:40"><name pos:start="139:28" pos:end="139:30">dev</name><operator pos:start="139:31" pos:end="139:32">-&gt;</operator><name pos:start="139:33" pos:end="139:40">features</name></name> <operator pos:start="139:42" pos:end="139:42">&amp;</operator> <name pos:start="139:44" pos:end="139:74">ASSIGNED_DEVICE_PREFER_MSI_MASK</name><operator pos:start="139:75" pos:end="139:75">)</operator> <operator pos:start="139:77" pos:end="139:78">&amp;&amp;</operator>

            <name pos:start="141:13" pos:end="141:30"><name pos:start="141:13" pos:end="141:15">dev</name><operator pos:start="141:16" pos:end="141:17">-&gt;</operator><name pos:start="141:18" pos:end="141:20">cap</name><operator pos:start="141:21" pos:end="141:21">.</operator><name pos:start="141:22" pos:end="141:30">available</name></name> <operator pos:start="141:32" pos:end="141:32">&amp;</operator> <name pos:start="141:34" pos:end="141:56">ASSIGNED_DEVICE_CAP_MSI</name></expr>)</condition> <block pos:start="141:59" pos:end="157:9">{<block_content pos:start="147:13" pos:end="155:23">

            <comment type="block" pos:start="143:13" pos:end="145:74">/* Retry with host-side MSI. There might be an IRQ conflict and

             * either the kernel or the device doesn't support sharing. */</comment>

            <expr_stmt pos:start="147:13" pos:end="149:46"><expr pos:start="147:13" pos:end="149:45"><call pos:start="147:13" pos:end="149:45"><name pos:start="147:13" pos:end="147:24">error_report</name><argument_list pos:start="147:25" pos:end="149:45">(<argument pos:start="147:26" pos:end="149:44"><expr pos:start="147:26" pos:end="149:44"><literal type="string" pos:start="147:26" pos:end="147:65">"Host-side INTx sharing not supported, "</literal>

                         <literal type="string" pos:start="149:26" pos:end="149:44">"using MSI instead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:78"><expr pos:start="151:13" pos:end="151:77"><call pos:start="151:13" pos:end="151:77"><name pos:start="151:13" pos:end="151:24">error_printf</name><argument_list pos:start="151:25" pos:end="151:77">(<argument pos:start="151:26" pos:end="151:76"><expr pos:start="151:26" pos:end="151:76"><literal type="string" pos:start="151:26" pos:end="151:76">"Some devices do not work properly in this mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:61"><expr pos:start="153:13" pos:end="153:60"><name pos:start="153:13" pos:end="153:25"><name pos:start="153:13" pos:end="153:15">dev</name><operator pos:start="153:16" pos:end="153:17">-&gt;</operator><name pos:start="153:18" pos:end="153:25">features</name></name> <operator pos:start="153:27" pos:end="153:28">|=</operator> <name pos:start="153:30" pos:end="153:60">ASSIGNED_DEVICE_PREFER_MSI_MASK</name></expr>;</expr_stmt>

            <goto pos:start="155:13" pos:end="155:23">goto <name pos:start="155:18" pos:end="155:22">retry</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="159:9" pos:end="161:43"><expr pos:start="159:9" pos:end="161:42"><call pos:start="159:9" pos:end="161:42"><name pos:start="159:9" pos:end="159:24">error_setg_errno</name><argument_list pos:start="159:25" pos:end="161:42">(<argument pos:start="159:26" pos:end="159:29"><expr pos:start="159:26" pos:end="159:29"><name pos:start="159:26" pos:end="159:29">errp</name></expr></argument>, <argument pos:start="159:32" pos:end="159:33"><expr pos:start="159:32" pos:end="159:33"><operator pos:start="159:32" pos:end="159:32">-</operator><name pos:start="159:33" pos:end="159:33">r</name></expr></argument>, <argument pos:start="159:36" pos:end="159:68"><expr pos:start="159:36" pos:end="159:68"><literal type="string" pos:start="159:36" pos:end="159:68">"Failed to assign irq for \"%s\""</literal></expr></argument>,

                         <argument pos:start="161:26" pos:end="161:41"><expr pos:start="161:26" pos:end="161:41"><name pos:start="161:26" pos:end="161:41"><name pos:start="161:26" pos:end="161:28">dev</name><operator pos:start="161:29" pos:end="161:30">-&gt;</operator><name pos:start="161:31" pos:end="161:33">dev</name><operator pos:start="161:34" pos:end="161:34">.</operator><name pos:start="161:35" pos:end="161:38">qdev</name><operator pos:start="161:39" pos:end="161:39">.</operator><name pos:start="161:40" pos:end="161:41">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="165:71"><expr pos:start="163:9" pos:end="165:70"><call pos:start="163:9" pos:end="165:70"><name pos:start="163:9" pos:end="163:25">error_append_hint</name><argument_list pos:start="163:26" pos:end="165:70">(<argument pos:start="163:27" pos:end="163:30"><expr pos:start="163:27" pos:end="163:30"><name pos:start="163:27" pos:end="163:30">errp</name></expr></argument>, <argument pos:start="163:33" pos:end="165:69"><expr pos:start="163:33" pos:end="165:69"><literal type="string" pos:start="163:33" pos:end="163:69">"Perhaps you are assigning a device "</literal>

                          <literal type="string" pos:start="165:27" pos:end="165:69">"that shares an IRQ with another device?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="167:9" pos:end="167:17">return <expr pos:start="167:16" pos:end="167:16"><name pos:start="167:16" pos:end="167:16">r</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:33"><expr pos:start="173:5" pos:end="173:32"><name pos:start="173:5" pos:end="173:19"><name pos:start="173:5" pos:end="173:7">dev</name><operator pos:start="173:8" pos:end="173:9">-&gt;</operator><name pos:start="173:10" pos:end="173:19">intx_route</name></name> <operator pos:start="173:21" pos:end="173:21">=</operator> <name pos:start="173:23" pos:end="173:32">intx_route</name></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:38"><expr pos:start="175:5" pos:end="175:37"><name pos:start="175:5" pos:end="175:26"><name pos:start="175:5" pos:end="175:7">dev</name><operator pos:start="175:8" pos:end="175:9">-&gt;</operator><name pos:start="175:10" pos:end="175:26">assigned_irq_type</name></name> <operator pos:start="175:28" pos:end="175:28">=</operator> <name pos:start="175:30" pos:end="175:37">new_type</name></expr>;</expr_stmt>

    <return pos:start="177:5" pos:end="177:13">return <expr pos:start="177:12" pos:end="177:12"><name pos:start="177:12" pos:end="177:12">r</name></expr>;</return>

</block_content>}</block></function>
</unit>
