<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24140.c" pos:tabs="8"><function pos:start="1:1" pos:end="25:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:13">size_t</name></type> <name pos:start="1:15" pos:end="1:38">refcount_array_byte_size</name><parameter_list pos:start="1:39" pos:end="1:75">(<parameter pos:start="1:40" pos:end="1:56"><decl pos:start="1:40" pos:end="1:56"><type pos:start="1:40" pos:end="1:56"><name pos:start="1:40" pos:end="1:53">BDRVQcow2State</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">s</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:74"><decl pos:start="1:59" pos:end="1:74"><type pos:start="1:59" pos:end="1:74"><name pos:start="1:59" pos:end="1:66">uint64_t</name></type> <name pos:start="1:68" pos:end="1:74">entries</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="25:1">{<block_content pos:start="13:5" pos:end="23:57">

    <comment type="block" pos:start="5:5" pos:end="11:75">/* This assertion holds because there is no way we can address more than

     * 2^(64 - 9) clusters at once (with cluster size 512 = 2^9, and because

     * offsets have to be representable in bytes); due to every cluster

     * corresponding to one refcount entry, we are well below that limit */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:48"><expr pos:start="13:5" pos:end="13:47"><call pos:start="13:5" pos:end="13:47"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:47">(<argument pos:start="13:12" pos:end="13:46"><expr pos:start="13:12" pos:end="13:46"><name pos:start="13:12" pos:end="13:18">entries</name> <operator pos:start="13:20" pos:end="13:20">&lt;</operator> <operator pos:start="13:22" pos:end="13:22">(</operator><call pos:start="13:23" pos:end="13:33"><name pos:start="13:23" pos:end="13:30">UINT64_C</name><argument_list pos:start="13:31" pos:end="13:33">(<argument pos:start="13:32" pos:end="13:32"><expr pos:start="13:32" pos:end="13:32"><literal type="number" pos:start="13:32" pos:end="13:32">1</literal></expr></argument>)</argument_list></call> <operator pos:start="13:35" pos:end="13:36">&lt;&lt;</operator> <operator pos:start="13:38" pos:end="13:38">(</operator><literal type="number" pos:start="13:39" pos:end="13:42">64</literal> <operator pos:start="13:42" pos:end="13:42">-</operator> <literal type="number" pos:start="13:44" pos:end="13:44">9</literal><operator pos:start="13:45" pos:end="13:45">)</operator><operator pos:start="13:46" pos:end="13:46">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="21:64">/* Thanks to the assertion this will not overflow, because

     * s-&gt;refcount_order &lt; 7.

     * (note: x &lt;&lt; s-&gt;refcount_order == x * s-&gt;refcount_bits) */</comment>

    <return pos:start="23:5" pos:end="23:57">return <expr pos:start="23:12" pos:end="23:56"><call pos:start="23:12" pos:end="23:56"><name pos:start="23:12" pos:end="23:23">DIV_ROUND_UP</name><argument_list pos:start="23:24" pos:end="23:56">(<argument pos:start="23:25" pos:end="23:52"><expr pos:start="23:25" pos:end="23:52"><name pos:start="23:25" pos:end="23:31">entries</name> <operator pos:start="23:33" pos:end="23:34">&lt;&lt;</operator> <name pos:start="23:36" pos:end="23:52"><name pos:start="23:36" pos:end="23:36">s</name><operator pos:start="23:37" pos:end="23:38">-&gt;</operator><name pos:start="23:39" pos:end="23:52">refcount_order</name></name></expr></argument>, <argument pos:start="23:55" pos:end="23:55"><expr pos:start="23:55" pos:end="23:55"><literal type="number" pos:start="23:55" pos:end="23:55">8</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
