<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14946.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:36">xvid_encode_close</name><parameter_list pos:start="1:37" pos:end="1:59">(<parameter pos:start="1:38" pos:end="1:58"><decl pos:start="1:38" pos:end="1:58"><type pos:start="1:38" pos:end="1:53"><name pos:start="1:38" pos:end="1:51">AVCodecContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:58">avctx</name></decl></parameter>)</parameter_list> <block pos:start="1:61" pos:end="39:1">{<block_content pos:start="3:5" pos:end="37:13">

    <decl_stmt pos:start="3:5" pos:end="3:46"><decl pos:start="3:5" pos:end="3:45"><type pos:start="3:5" pos:end="3:25"><name pos:start="3:5" pos:end="3:23"><name pos:start="3:5" pos:end="3:10">struct</name> <name pos:start="3:12" pos:end="3:23">xvid_context</name></name> <modifier pos:start="3:25" pos:end="3:25">*</modifier></type><name pos:start="3:26" pos:end="3:26">x</name> <init pos:start="3:28" pos:end="3:45">= <expr pos:start="3:30" pos:end="3:45"><name pos:start="3:30" pos:end="3:45"><name pos:start="3:30" pos:end="3:34">avctx</name><operator pos:start="3:35" pos:end="3:36">-&gt;</operator><name pos:start="3:37" pos:end="3:45">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="7:5" pos:end="7:65"><expr pos:start="7:5" pos:end="7:64"><call pos:start="7:5" pos:end="7:64"><name pos:start="7:5" pos:end="7:15">xvid_encore</name><argument_list pos:start="7:16" pos:end="7:64">(<argument pos:start="7:17" pos:end="7:33"><expr pos:start="7:17" pos:end="7:33"><name pos:start="7:17" pos:end="7:33"><name pos:start="7:17" pos:end="7:17">x</name><operator pos:start="7:18" pos:end="7:19">-&gt;</operator><name pos:start="7:20" pos:end="7:33">encoder_handle</name></name></expr></argument>, <argument pos:start="7:36" pos:end="7:51"><expr pos:start="7:36" pos:end="7:51"><name pos:start="7:36" pos:end="7:51">XVID_ENC_DESTROY</name></expr></argument>, <argument pos:start="7:54" pos:end="7:57"><expr pos:start="7:54" pos:end="7:57"><name pos:start="7:54" pos:end="7:57">NULL</name></expr></argument>, <argument pos:start="7:60" pos:end="7:63"><expr pos:start="7:60" pos:end="7:63"><name pos:start="7:60" pos:end="7:63">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="11:5" pos:end="13:34"><if pos:start="11:5" pos:end="13:34">if<condition pos:start="11:7" pos:end="11:34">( <expr pos:start="11:9" pos:end="11:32"><name pos:start="11:9" pos:end="11:24"><name pos:start="11:9" pos:end="11:13">avctx</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:24">extradata</name></name> <operator pos:start="11:26" pos:end="11:27">!=</operator> <name pos:start="11:29" pos:end="11:32">NULL</name></expr> )</condition><block type="pseudo" pos:start="13:9" pos:end="13:34"><block_content pos:start="13:9" pos:end="13:34">

        <expr_stmt pos:start="13:9" pos:end="13:34"><expr pos:start="13:9" pos:end="13:33"><call pos:start="13:9" pos:end="13:33"><name pos:start="13:9" pos:end="13:15">av_free</name><argument_list pos:start="13:16" pos:end="13:33">(<argument pos:start="13:17" pos:end="13:32"><expr pos:start="13:17" pos:end="13:32"><name pos:start="13:17" pos:end="13:32"><name pos:start="13:17" pos:end="13:21">avctx</name><operator pos:start="13:22" pos:end="13:23">-&gt;</operator><name pos:start="13:24" pos:end="13:32">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if<condition pos:start="15:7" pos:end="15:34">( <expr pos:start="15:9" pos:end="15:32"><name pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:9">x</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:24">twopassbuffer</name></name> <operator pos:start="15:26" pos:end="15:27">!=</operator> <name pos:start="15:29" pos:end="15:32">NULL</name></expr> )</condition> <block pos:start="15:36" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:38">

        <expr_stmt pos:start="17:9" pos:end="17:34"><expr pos:start="17:9" pos:end="17:33"><call pos:start="17:9" pos:end="17:33"><name pos:start="17:9" pos:end="17:15">av_free</name><argument_list pos:start="17:16" pos:end="17:33">(<argument pos:start="17:17" pos:end="17:32"><expr pos:start="17:17" pos:end="17:32"><name pos:start="17:17" pos:end="17:32"><name pos:start="17:17" pos:end="17:17">x</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:32">twopassbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:38"><expr pos:start="19:9" pos:end="19:37"><call pos:start="19:9" pos:end="19:37"><name pos:start="19:9" pos:end="19:15">av_free</name><argument_list pos:start="19:16" pos:end="19:37">(<argument pos:start="19:17" pos:end="19:36"><expr pos:start="19:17" pos:end="19:36"><name pos:start="19:17" pos:end="19:36"><name pos:start="19:17" pos:end="19:17">x</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:36">old_twopassbuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="23:5" pos:end="25:32"><if pos:start="23:5" pos:end="25:32">if<condition pos:start="23:7" pos:end="23:32">( <expr pos:start="23:9" pos:end="23:30"><name pos:start="23:9" pos:end="23:22"><name pos:start="23:9" pos:end="23:9">x</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:22">twopassfile</name></name> <operator pos:start="23:24" pos:end="23:25">!=</operator> <name pos:start="23:27" pos:end="23:30">NULL</name></expr> )</condition><block type="pseudo" pos:start="25:9" pos:end="25:32"><block_content pos:start="25:9" pos:end="25:32">

        <expr_stmt pos:start="25:9" pos:end="25:32"><expr pos:start="25:9" pos:end="25:31"><call pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:15">av_free</name><argument_list pos:start="25:16" pos:end="25:31">(<argument pos:start="25:17" pos:end="25:30"><expr pos:start="25:17" pos:end="25:30"><name pos:start="25:17" pos:end="25:30"><name pos:start="25:17" pos:end="25:17">x</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:30">twopassfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="27:5" pos:end="29:33"><if pos:start="27:5" pos:end="29:33">if<condition pos:start="27:7" pos:end="27:33">( <expr pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:9">x</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:23">intra_matrix</name></name> <operator pos:start="27:25" pos:end="27:26">!=</operator> <name pos:start="27:28" pos:end="27:31">NULL</name></expr> )</condition><block type="pseudo" pos:start="29:9" pos:end="29:33"><block_content pos:start="29:9" pos:end="29:33">

        <expr_stmt pos:start="29:9" pos:end="29:33"><expr pos:start="29:9" pos:end="29:32"><call pos:start="29:9" pos:end="29:32"><name pos:start="29:9" pos:end="29:15">av_free</name><argument_list pos:start="29:16" pos:end="29:32">(<argument pos:start="29:17" pos:end="29:31"><expr pos:start="29:17" pos:end="29:31"><name pos:start="29:17" pos:end="29:31"><name pos:start="29:17" pos:end="29:17">x</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:31">intra_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="33:33"><if pos:start="31:5" pos:end="33:33">if<condition pos:start="31:7" pos:end="31:33">( <expr pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:9">x</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:23">inter_matrix</name></name> <operator pos:start="31:25" pos:end="31:26">!=</operator> <name pos:start="31:28" pos:end="31:31">NULL</name></expr> )</condition><block type="pseudo" pos:start="33:9" pos:end="33:33"><block_content pos:start="33:9" pos:end="33:33">

        <expr_stmt pos:start="33:9" pos:end="33:33"><expr pos:start="33:9" pos:end="33:32"><call pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:15">av_free</name><argument_list pos:start="33:16" pos:end="33:32">(<argument pos:start="33:17" pos:end="33:31"><expr pos:start="33:17" pos:end="33:31"><name pos:start="33:17" pos:end="33:31"><name pos:start="33:17" pos:end="33:17">x</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:31">inter_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="37:5" pos:end="37:13">return <expr pos:start="37:12" pos:end="37:12"><literal type="number" pos:start="37:12" pos:end="37:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
