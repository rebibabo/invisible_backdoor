<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24030.c" pos:tabs="8"><function pos:start="1:1" pos:end="134:16"><type pos:start="1:1" pos:end="1:13"><name pos:start="1:1" pos:end="1:11">CpuInfoList</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:27">qmp_query_cpus</name><parameter_list pos:start="1:28" pos:end="1:41">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:36"><name pos:start="1:29" pos:end="1:33">Error</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier><modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:40">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="134:16">{<block_content pos:start="5:5" pos:end="134:16">

    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:50"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">MachineState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:20">ms</name> <init pos:start="5:22" pos:end="5:50">= <expr pos:start="5:24" pos:end="5:50"><call pos:start="5:24" pos:end="5:50"><name pos:start="5:24" pos:end="5:30">MACHINE</name><argument_list pos:start="5:31" pos:end="5:50">(<argument pos:start="5:32" pos:end="5:49"><expr pos:start="5:32" pos:end="5:49"><call pos:start="5:32" pos:end="5:49"><name pos:start="5:32" pos:end="5:47">qdev_get_machine</name><argument_list pos:start="5:48" pos:end="5:49">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MachineClass</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:20">mc</name> <init pos:start="7:22" pos:end="7:44">= <expr pos:start="7:24" pos:end="7:44"><call pos:start="7:24" pos:end="7:44"><name pos:start="7:24" pos:end="7:40">MACHINE_GET_CLASS</name><argument_list pos:start="7:41" pos:end="7:44">(<argument pos:start="7:42" pos:end="7:43"><expr pos:start="7:42" pos:end="7:43"><name pos:start="7:42" pos:end="7:43">ms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:47"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">CpuInfoList</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:21">head</name> <init pos:start="9:23" pos:end="9:28">= <expr pos:start="9:25" pos:end="9:28"><name pos:start="9:25" pos:end="9:28">NULL</name></expr></init></decl>, <decl pos:start="9:31" pos:end="9:46"><type ref="prev" pos:start="9:5" pos:end="9:17"><modifier pos:start="9:31" pos:end="9:31">*</modifier></type><name pos:start="9:32" pos:end="9:39">cur_item</name> <init pos:start="9:41" pos:end="9:46">= <expr pos:start="9:43" pos:end="9:46"><name pos:start="9:43" pos:end="9:46">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">cpu</name></decl>;</decl_stmt>



    <macro pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:15">CPU_FOREACH</name><argument_list pos:start="15:16" pos:end="15:20">(<argument pos:start="15:17" pos:end="15:19">cpu</argument>)</argument_list></macro> <block pos:start="15:22" pos:end="134:16">{<block_content pos:start="17:9" pos:end="134:16">

        <decl_stmt pos:start="17:9" pos:end="20:0"><decl pos:start="17:9" pos:end="17:25"><type pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:19">CpuInfoList</name> <modifier pos:start="17:21" pos:end="17:21">*</modifier></type><name pos:start="17:22" pos:end="17:25">info</name></decl>;</decl_stmt>

<cpp:if pos:start="19:1" pos:end="19:24">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:24"><call pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:11">defined</name><argument_list pos:start="19:12" pos:end="19:24">(<argument pos:start="19:13" pos:end="19:23"><expr pos:start="19:13" pos:end="19:23"><name pos:start="19:13" pos:end="19:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <decl_stmt pos:start="21:9" pos:end="21:39"><decl pos:start="21:9" pos:end="21:38"><type pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:14">X86CPU</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:23">x86_cpu</name> <init pos:start="21:25" pos:end="21:38">= <expr pos:start="21:27" pos:end="21:38"><call pos:start="21:27" pos:end="21:38"><name pos:start="21:27" pos:end="21:33">X86_CPU</name><argument_list pos:start="21:34" pos:end="21:38">(<argument pos:start="21:35" pos:end="21:37"><expr pos:start="21:35" pos:end="21:37"><name pos:start="21:35" pos:end="21:37">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="26:0"><decl pos:start="23:9" pos:end="23:40"><type pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:19">CPUX86State</name> <modifier pos:start="23:21" pos:end="23:21">*</modifier></type><name pos:start="23:22" pos:end="23:24">env</name> <init pos:start="23:26" pos:end="23:40">= <expr pos:start="23:28" pos:end="23:40"><operator pos:start="23:28" pos:end="23:28">&amp;</operator><name pos:start="23:29" pos:end="23:40"><name pos:start="23:29" pos:end="23:35">x86_cpu</name><operator pos:start="23:36" pos:end="23:37">-&gt;</operator><name pos:start="23:38" pos:end="23:40">env</name></name></expr></init></decl>;</decl_stmt>

<cpp:elif pos:start="25:1" pos:end="25:25">#<cpp:directive pos:start="25:2" pos:end="25:5">elif</cpp:directive> <expr pos:start="25:7" pos:end="25:25"><call pos:start="25:7" pos:end="25:25"><name pos:start="25:7" pos:end="25:13">defined</name><argument_list pos:start="25:14" pos:end="25:25">(<argument pos:start="25:15" pos:end="25:24"><expr pos:start="25:15" pos:end="25:24"><name pos:start="25:15" pos:end="25:24">TARGET_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <decl_stmt pos:start="27:9" pos:end="27:47"><decl pos:start="27:9" pos:end="27:46"><type pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:18">PowerPCCPU</name> <modifier pos:start="27:20" pos:end="27:20">*</modifier></type><name pos:start="27:21" pos:end="27:27">ppc_cpu</name> <init pos:start="27:29" pos:end="27:46">= <expr pos:start="27:31" pos:end="27:46"><call pos:start="27:31" pos:end="27:46"><name pos:start="27:31" pos:end="27:41">POWERPC_CPU</name><argument_list pos:start="27:42" pos:end="27:46">(<argument pos:start="27:43" pos:end="27:45"><expr pos:start="27:43" pos:end="27:45"><name pos:start="27:43" pos:end="27:45">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="32:0"><decl pos:start="29:9" pos:end="29:40"><type pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:19">CPUPPCState</name> <modifier pos:start="29:21" pos:end="29:21">*</modifier></type><name pos:start="29:22" pos:end="29:24">env</name> <init pos:start="29:26" pos:end="29:40">= <expr pos:start="29:28" pos:end="29:40"><operator pos:start="29:28" pos:end="29:28">&amp;</operator><name pos:start="29:29" pos:end="29:40"><name pos:start="29:29" pos:end="29:35">ppc_cpu</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:40">env</name></name></expr></init></decl>;</decl_stmt>

<cpp:elif pos:start="31:1" pos:end="31:27">#<cpp:directive pos:start="31:2" pos:end="31:5">elif</cpp:directive> <expr pos:start="31:7" pos:end="31:27"><call pos:start="31:7" pos:end="31:27"><name pos:start="31:7" pos:end="31:13">defined</name><argument_list pos:start="31:14" pos:end="31:27">(<argument pos:start="31:15" pos:end="31:26"><expr pos:start="31:15" pos:end="31:26"><name pos:start="31:15" pos:end="31:26">TARGET_SPARC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <decl_stmt pos:start="33:9" pos:end="33:45"><decl pos:start="33:9" pos:end="33:44"><type pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:16">SPARCCPU</name> <modifier pos:start="33:18" pos:end="33:18">*</modifier></type><name pos:start="33:19" pos:end="33:27">sparc_cpu</name> <init pos:start="33:29" pos:end="33:44">= <expr pos:start="33:31" pos:end="33:44"><call pos:start="33:31" pos:end="33:44"><name pos:start="33:31" pos:end="33:39">SPARC_CPU</name><argument_list pos:start="33:40" pos:end="33:44">(<argument pos:start="33:41" pos:end="33:43"><expr pos:start="33:41" pos:end="33:43"><name pos:start="33:41" pos:end="33:43">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="38:0"><decl pos:start="35:9" pos:end="35:44"><type pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:21">CPUSPARCState</name> <modifier pos:start="35:23" pos:end="35:23">*</modifier></type><name pos:start="35:24" pos:end="35:26">env</name> <init pos:start="35:28" pos:end="35:44">= <expr pos:start="35:30" pos:end="35:44"><operator pos:start="35:30" pos:end="35:30">&amp;</operator><name pos:start="35:31" pos:end="35:44"><name pos:start="35:31" pos:end="35:39">sparc_cpu</name><operator pos:start="35:40" pos:end="35:41">-&gt;</operator><name pos:start="35:42" pos:end="35:44">env</name></name></expr></init></decl>;</decl_stmt>

<cpp:elif pos:start="37:1" pos:end="37:26">#<cpp:directive pos:start="37:2" pos:end="37:5">elif</cpp:directive> <expr pos:start="37:7" pos:end="37:26"><call pos:start="37:7" pos:end="37:26"><name pos:start="37:7" pos:end="37:13">defined</name><argument_list pos:start="37:14" pos:end="37:26">(<argument pos:start="37:15" pos:end="37:25"><expr pos:start="37:15" pos:end="37:25"><name pos:start="37:15" pos:end="37:25">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <decl_stmt pos:start="39:9" pos:end="39:42"><decl pos:start="39:9" pos:end="39:41"><type pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:15">MIPSCPU</name> <modifier pos:start="39:17" pos:end="39:17">*</modifier></type><name pos:start="39:18" pos:end="39:25">mips_cpu</name> <init pos:start="39:27" pos:end="39:41">= <expr pos:start="39:29" pos:end="39:41"><call pos:start="39:29" pos:end="39:41"><name pos:start="39:29" pos:end="39:36">MIPS_CPU</name><argument_list pos:start="39:37" pos:end="39:41">(<argument pos:start="39:38" pos:end="39:40"><expr pos:start="39:38" pos:end="39:40"><name pos:start="39:38" pos:end="39:40">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="44:0"><decl pos:start="41:9" pos:end="41:42"><type pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:20">CPUMIPSState</name> <modifier pos:start="41:22" pos:end="41:22">*</modifier></type><name pos:start="41:23" pos:end="41:25">env</name> <init pos:start="41:27" pos:end="41:42">= <expr pos:start="41:29" pos:end="41:42"><operator pos:start="41:29" pos:end="41:29">&amp;</operator><name pos:start="41:30" pos:end="41:42"><name pos:start="41:30" pos:end="41:37">mips_cpu</name><operator pos:start="41:38" pos:end="41:39">-&gt;</operator><name pos:start="41:40" pos:end="41:42">env</name></name></expr></init></decl>;</decl_stmt>

<cpp:elif pos:start="43:1" pos:end="43:29">#<cpp:directive pos:start="43:2" pos:end="43:5">elif</cpp:directive> <expr pos:start="43:7" pos:end="43:29"><call pos:start="43:7" pos:end="43:29"><name pos:start="43:7" pos:end="43:13">defined</name><argument_list pos:start="43:14" pos:end="43:29">(<argument pos:start="43:15" pos:end="43:28"><expr pos:start="43:15" pos:end="43:28"><name pos:start="43:15" pos:end="43:28">TARGET_TRICORE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <decl_stmt pos:start="45:9" pos:end="45:51"><decl pos:start="45:9" pos:end="45:50"><type pos:start="45:9" pos:end="45:20"><name pos:start="45:9" pos:end="45:18">TriCoreCPU</name> <modifier pos:start="45:20" pos:end="45:20">*</modifier></type><name pos:start="45:21" pos:end="45:31">tricore_cpu</name> <init pos:start="45:33" pos:end="45:50">= <expr pos:start="45:35" pos:end="45:50"><call pos:start="45:35" pos:end="45:50"><name pos:start="45:35" pos:end="45:45">TRICORE_CPU</name><argument_list pos:start="45:46" pos:end="45:50">(<argument pos:start="45:47" pos:end="45:49"><expr pos:start="45:47" pos:end="45:49"><name pos:start="45:47" pos:end="45:49">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="50:0"><decl pos:start="47:9" pos:end="47:48"><type pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:23">CPUTriCoreState</name> <modifier pos:start="47:25" pos:end="47:25">*</modifier></type><name pos:start="47:26" pos:end="47:28">env</name> <init pos:start="47:30" pos:end="47:48">= <expr pos:start="47:32" pos:end="47:48"><operator pos:start="47:32" pos:end="47:32">&amp;</operator><name pos:start="47:33" pos:end="47:48"><name pos:start="47:33" pos:end="47:43">tricore_cpu</name><operator pos:start="47:44" pos:end="47:45">-&gt;</operator><name pos:start="47:46" pos:end="47:48">env</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>



        <expr_stmt pos:start="53:9" pos:end="53:35"><expr pos:start="53:9" pos:end="53:34"><call pos:start="53:9" pos:end="53:34"><name pos:start="53:9" pos:end="53:29">cpu_synchronize_state</name><argument_list pos:start="53:30" pos:end="53:34">(<argument pos:start="53:31" pos:end="53:33"><expr pos:start="53:31" pos:end="53:33"><name pos:start="53:31" pos:end="53:33">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:40"><expr pos:start="57:9" pos:end="57:39"><name pos:start="57:9" pos:end="57:12">info</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <call pos:start="57:16" pos:end="57:39"><name pos:start="57:16" pos:end="57:24">g_malloc0</name><argument_list pos:start="57:25" pos:end="57:39">(<argument pos:start="57:26" pos:end="57:38"><expr pos:start="57:26" pos:end="57:38"><sizeof pos:start="57:26" pos:end="57:38">sizeof<argument_list pos:start="57:32" pos:end="57:38">(<argument pos:start="57:33" pos:end="57:37"><expr pos:start="57:33" pos:end="57:37"><operator pos:start="57:33" pos:end="57:33">*</operator><name pos:start="57:34" pos:end="57:37">info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:54"><expr pos:start="59:9" pos:end="59:53"><name pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:12">info</name><operator pos:start="59:13" pos:end="59:14">-&gt;</operator><name pos:start="59:15" pos:end="59:19">value</name></name> <operator pos:start="59:21" pos:end="59:21">=</operator> <call pos:start="59:23" pos:end="59:53"><name pos:start="59:23" pos:end="59:31">g_malloc0</name><argument_list pos:start="59:32" pos:end="59:53">(<argument pos:start="59:33" pos:end="59:52"><expr pos:start="59:33" pos:end="59:52"><sizeof pos:start="59:33" pos:end="59:52">sizeof<argument_list pos:start="59:39" pos:end="59:52">(<argument pos:start="59:40" pos:end="59:51"><expr pos:start="59:40" pos:end="59:51"><operator pos:start="59:40" pos:end="59:40">*</operator><name pos:start="59:41" pos:end="59:51"><name pos:start="59:41" pos:end="59:44">info</name><operator pos:start="59:45" pos:end="59:46">-&gt;</operator><name pos:start="59:47" pos:end="59:51">value</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:42"><expr pos:start="61:9" pos:end="61:41"><name pos:start="61:9" pos:end="61:24"><name pos:start="61:9" pos:end="61:12">info</name><operator pos:start="61:13" pos:end="61:14">-&gt;</operator><name pos:start="61:15" pos:end="61:19">value</name><operator pos:start="61:20" pos:end="61:21">-&gt;</operator><name pos:start="61:22" pos:end="61:24">CPU</name></name> <operator pos:start="61:26" pos:end="61:26">=</operator> <name pos:start="61:28" pos:end="61:41"><name pos:start="61:28" pos:end="61:30">cpu</name><operator pos:start="61:31" pos:end="61:32">-&gt;</operator><name pos:start="61:33" pos:end="61:41">cpu_index</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:50"><expr pos:start="63:9" pos:end="63:49"><name pos:start="63:9" pos:end="63:28"><name pos:start="63:9" pos:end="63:12">info</name><operator pos:start="63:13" pos:end="63:14">-&gt;</operator><name pos:start="63:15" pos:end="63:19">value</name><operator pos:start="63:20" pos:end="63:21">-&gt;</operator><name pos:start="63:22" pos:end="63:28">current</name></name> <operator pos:start="63:30" pos:end="63:30">=</operator> <operator pos:start="63:32" pos:end="63:32">(</operator><name pos:start="63:33" pos:end="63:35">cpu</name> <operator pos:start="63:37" pos:end="63:38">==</operator> <name pos:start="63:40" pos:end="63:48">first_cpu</name><operator pos:start="63:49" pos:end="63:49">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:42"><expr pos:start="65:9" pos:end="65:41"><name pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:12">info</name><operator pos:start="65:13" pos:end="65:14">-&gt;</operator><name pos:start="65:15" pos:end="65:19">value</name><operator pos:start="65:20" pos:end="65:21">-&gt;</operator><name pos:start="65:22" pos:end="65:27">halted</name></name> <operator pos:start="65:29" pos:end="65:29">=</operator> <name pos:start="65:31" pos:end="65:41"><name pos:start="65:31" pos:end="65:33">cpu</name><operator pos:start="65:34" pos:end="65:35">-&gt;</operator><name pos:start="65:36" pos:end="65:41">halted</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:71"><expr pos:start="67:9" pos:end="67:70"><name pos:start="67:9" pos:end="67:29"><name pos:start="67:9" pos:end="67:12">info</name><operator pos:start="67:13" pos:end="67:14">-&gt;</operator><name pos:start="67:15" pos:end="67:19">value</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:29">qom_path</name></name> <operator pos:start="67:31" pos:end="67:31">=</operator> <call pos:start="67:33" pos:end="67:70"><name pos:start="67:33" pos:end="67:57">object_get_canonical_path</name><argument_list pos:start="67:58" pos:end="67:70">(<argument pos:start="67:59" pos:end="67:69"><expr pos:start="67:59" pos:end="67:69"><call pos:start="67:59" pos:end="67:69"><name pos:start="67:59" pos:end="67:64">OBJECT</name><argument_list pos:start="67:65" pos:end="67:69">(<argument pos:start="67:66" pos:end="67:68"><expr pos:start="67:66" pos:end="67:68"><name pos:start="67:66" pos:end="67:68">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="72:0"><expr pos:start="69:9" pos:end="69:47"><name pos:start="69:9" pos:end="69:30"><name pos:start="69:9" pos:end="69:12">info</name><operator pos:start="69:13" pos:end="69:14">-&gt;</operator><name pos:start="69:15" pos:end="69:19">value</name><operator pos:start="69:20" pos:end="69:21">-&gt;</operator><name pos:start="69:22" pos:end="69:30">thread_id</name></name> <operator pos:start="69:32" pos:end="69:32">=</operator> <name pos:start="69:34" pos:end="69:47"><name pos:start="69:34" pos:end="69:36">cpu</name><operator pos:start="69:37" pos:end="69:38">-&gt;</operator><name pos:start="69:39" pos:end="69:47">thread_id</name></name></expr>;</expr_stmt>

<cpp:if pos:start="71:1" pos:end="71:24">#<cpp:directive pos:start="71:2" pos:end="71:3">if</cpp:directive> <expr pos:start="71:5" pos:end="71:24"><call pos:start="71:5" pos:end="71:24"><name pos:start="71:5" pos:end="71:11">defined</name><argument_list pos:start="71:12" pos:end="71:24">(<argument pos:start="71:13" pos:end="71:23"><expr pos:start="71:13" pos:end="71:23"><name pos:start="71:13" pos:end="71:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="73:9" pos:end="73:46"><expr pos:start="73:9" pos:end="73:45"><name pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:12">info</name><operator pos:start="73:13" pos:end="73:14">-&gt;</operator><name pos:start="73:15" pos:end="73:19">value</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:25">arch</name></name> <operator pos:start="73:27" pos:end="73:27">=</operator> <name pos:start="73:29" pos:end="73:45">CPU_INFO_ARCH_X86</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="78:0"><expr pos:start="75:9" pos:end="75:63"><name pos:start="75:9" pos:end="75:29"><name pos:start="75:9" pos:end="75:12">info</name><operator pos:start="75:13" pos:end="75:14">-&gt;</operator><name pos:start="75:15" pos:end="75:19">value</name><operator pos:start="75:20" pos:end="75:21">-&gt;</operator><name pos:start="75:22" pos:end="75:22">u</name><operator pos:start="75:23" pos:end="75:23">.</operator><name pos:start="75:24" pos:end="75:26">x86</name><operator pos:start="75:27" pos:end="75:27">.</operator><name pos:start="75:28" pos:end="75:29">pc</name></name> <operator pos:start="75:31" pos:end="75:31">=</operator> <name pos:start="75:33" pos:end="75:40"><name pos:start="75:33" pos:end="75:35">env</name><operator pos:start="75:36" pos:end="75:37">-&gt;</operator><name pos:start="75:38" pos:end="75:40">eip</name></name> <operator pos:start="75:42" pos:end="75:42">+</operator> <name pos:start="75:44" pos:end="75:58"><name pos:start="75:44" pos:end="75:46">env</name><operator pos:start="75:47" pos:end="75:48">-&gt;</operator><name pos:start="75:49" pos:end="75:52">segs</name><index pos:start="75:53" pos:end="75:58">[<expr pos:start="75:54" pos:end="75:57"><name pos:start="75:54" pos:end="75:57">R_CS</name></expr>]</index></name><operator pos:start="75:59" pos:end="75:59">.</operator><name pos:start="75:60" pos:end="75:63">base</name></expr>;</expr_stmt>

<cpp:elif pos:start="77:1" pos:end="77:25">#<cpp:directive pos:start="77:2" pos:end="77:5">elif</cpp:directive> <expr pos:start="77:7" pos:end="77:25"><call pos:start="77:7" pos:end="77:25"><name pos:start="77:7" pos:end="77:13">defined</name><argument_list pos:start="77:14" pos:end="77:25">(<argument pos:start="77:15" pos:end="77:24"><expr pos:start="77:15" pos:end="77:24"><name pos:start="77:15" pos:end="77:24">TARGET_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <expr_stmt pos:start="79:9" pos:end="79:46"><expr pos:start="79:9" pos:end="79:45"><name pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:12">info</name><operator pos:start="79:13" pos:end="79:14">-&gt;</operator><name pos:start="79:15" pos:end="79:19">value</name><operator pos:start="79:20" pos:end="79:21">-&gt;</operator><name pos:start="79:22" pos:end="79:25">arch</name></name> <operator pos:start="79:27" pos:end="79:27">=</operator> <name pos:start="79:29" pos:end="79:45">CPU_INFO_ARCH_PPC</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="84:0"><expr pos:start="81:9" pos:end="81:41"><name pos:start="81:9" pos:end="81:30"><name pos:start="81:9" pos:end="81:12">info</name><operator pos:start="81:13" pos:end="81:14">-&gt;</operator><name pos:start="81:15" pos:end="81:19">value</name><operator pos:start="81:20" pos:end="81:21">-&gt;</operator><name pos:start="81:22" pos:end="81:22">u</name><operator pos:start="81:23" pos:end="81:23">.</operator><name pos:start="81:24" pos:end="81:26">ppc</name><operator pos:start="81:27" pos:end="81:27">.</operator><name pos:start="81:28" pos:end="81:30">nip</name></name> <operator pos:start="81:32" pos:end="81:32">=</operator> <name pos:start="81:34" pos:end="81:41"><name pos:start="81:34" pos:end="81:36">env</name><operator pos:start="81:37" pos:end="81:38">-&gt;</operator><name pos:start="81:39" pos:end="81:41">nip</name></name></expr>;</expr_stmt>

<cpp:elif pos:start="83:1" pos:end="83:27">#<cpp:directive pos:start="83:2" pos:end="83:5">elif</cpp:directive> <expr pos:start="83:7" pos:end="83:27"><call pos:start="83:7" pos:end="83:27"><name pos:start="83:7" pos:end="83:13">defined</name><argument_list pos:start="83:14" pos:end="83:27">(<argument pos:start="83:15" pos:end="83:26"><expr pos:start="83:15" pos:end="83:26"><name pos:start="83:15" pos:end="83:26">TARGET_SPARC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <expr_stmt pos:start="85:9" pos:end="85:48"><expr pos:start="85:9" pos:end="85:47"><name pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:12">info</name><operator pos:start="85:13" pos:end="85:14">-&gt;</operator><name pos:start="85:15" pos:end="85:19">value</name><operator pos:start="85:20" pos:end="85:21">-&gt;</operator><name pos:start="85:22" pos:end="85:25">arch</name></name> <operator pos:start="85:27" pos:end="85:27">=</operator> <name pos:start="85:29" pos:end="85:47">CPU_INFO_ARCH_SPARC</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:44"><expr pos:start="87:9" pos:end="87:43"><name pos:start="87:9" pos:end="87:33"><name pos:start="87:9" pos:end="87:12">info</name><operator pos:start="87:13" pos:end="87:14">-&gt;</operator><name pos:start="87:15" pos:end="87:19">value</name><operator pos:start="87:20" pos:end="87:21">-&gt;</operator><name pos:start="87:22" pos:end="87:22">u</name><operator pos:start="87:23" pos:end="87:23">.</operator><name pos:start="87:24" pos:end="87:30">q_sparc</name><operator pos:start="87:31" pos:end="87:31">.</operator><name pos:start="87:32" pos:end="87:33">pc</name></name> <operator pos:start="87:35" pos:end="87:35">=</operator> <name pos:start="87:37" pos:end="87:43"><name pos:start="87:37" pos:end="87:39">env</name><operator pos:start="87:40" pos:end="87:41">-&gt;</operator><name pos:start="87:42" pos:end="87:43">pc</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="92:0"><expr pos:start="89:9" pos:end="89:45"><name pos:start="89:9" pos:end="89:34"><name pos:start="89:9" pos:end="89:12">info</name><operator pos:start="89:13" pos:end="89:14">-&gt;</operator><name pos:start="89:15" pos:end="89:19">value</name><operator pos:start="89:20" pos:end="89:21">-&gt;</operator><name pos:start="89:22" pos:end="89:22">u</name><operator pos:start="89:23" pos:end="89:23">.</operator><name pos:start="89:24" pos:end="89:30">q_sparc</name><operator pos:start="89:31" pos:end="89:31">.</operator><name pos:start="89:32" pos:end="89:34">npc</name></name> <operator pos:start="89:36" pos:end="89:36">=</operator> <name pos:start="89:38" pos:end="89:45"><name pos:start="89:38" pos:end="89:40">env</name><operator pos:start="89:41" pos:end="89:42">-&gt;</operator><name pos:start="89:43" pos:end="89:45">npc</name></name></expr>;</expr_stmt>

<cpp:elif pos:start="91:1" pos:end="91:26">#<cpp:directive pos:start="91:2" pos:end="91:5">elif</cpp:directive> <expr pos:start="91:7" pos:end="91:26"><call pos:start="91:7" pos:end="91:26"><name pos:start="91:7" pos:end="91:13">defined</name><argument_list pos:start="91:14" pos:end="91:26">(<argument pos:start="91:15" pos:end="91:25"><expr pos:start="91:15" pos:end="91:25"><name pos:start="91:15" pos:end="91:25">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <expr_stmt pos:start="93:9" pos:end="93:47"><expr pos:start="93:9" pos:end="93:46"><name pos:start="93:9" pos:end="93:25"><name pos:start="93:9" pos:end="93:12">info</name><operator pos:start="93:13" pos:end="93:14">-&gt;</operator><name pos:start="93:15" pos:end="93:19">value</name><operator pos:start="93:20" pos:end="93:21">-&gt;</operator><name pos:start="93:22" pos:end="93:25">arch</name></name> <operator pos:start="93:27" pos:end="93:27">=</operator> <name pos:start="93:29" pos:end="93:46">CPU_INFO_ARCH_MIPS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="98:0"><expr pos:start="95:9" pos:end="95:52"><name pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:12">info</name><operator pos:start="95:13" pos:end="95:14">-&gt;</operator><name pos:start="95:15" pos:end="95:19">value</name><operator pos:start="95:20" pos:end="95:21">-&gt;</operator><name pos:start="95:22" pos:end="95:22">u</name><operator pos:start="95:23" pos:end="95:23">.</operator><name pos:start="95:24" pos:end="95:29">q_mips</name><operator pos:start="95:30" pos:end="95:30">.</operator><name pos:start="95:31" pos:end="95:32">PC</name></name> <operator pos:start="95:34" pos:end="95:34">=</operator> <name pos:start="95:36" pos:end="95:52"><name pos:start="95:36" pos:end="95:38">env</name><operator pos:start="95:39" pos:end="95:40">-&gt;</operator><name pos:start="95:41" pos:end="95:49">active_tc</name><operator pos:start="95:50" pos:end="95:50">.</operator><name pos:start="95:51" pos:end="95:52">PC</name></name></expr>;</expr_stmt>

<cpp:elif pos:start="97:1" pos:end="97:29">#<cpp:directive pos:start="97:2" pos:end="97:5">elif</cpp:directive> <expr pos:start="97:7" pos:end="97:29"><call pos:start="97:7" pos:end="97:29"><name pos:start="97:7" pos:end="97:13">defined</name><argument_list pos:start="97:14" pos:end="97:29">(<argument pos:start="97:15" pos:end="97:28"><expr pos:start="97:15" pos:end="97:28"><name pos:start="97:15" pos:end="97:28">TARGET_TRICORE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <expr_stmt pos:start="99:9" pos:end="99:50"><expr pos:start="99:9" pos:end="99:49"><name pos:start="99:9" pos:end="99:25"><name pos:start="99:9" pos:end="99:12">info</name><operator pos:start="99:13" pos:end="99:14">-&gt;</operator><name pos:start="99:15" pos:end="99:19">value</name><operator pos:start="99:20" pos:end="99:21">-&gt;</operator><name pos:start="99:22" pos:end="99:25">arch</name></name> <operator pos:start="99:27" pos:end="99:27">=</operator> <name pos:start="99:29" pos:end="99:49">CPU_INFO_ARCH_TRICORE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="104:0"><expr pos:start="101:9" pos:end="101:43"><name pos:start="101:9" pos:end="101:33"><name pos:start="101:9" pos:end="101:12">info</name><operator pos:start="101:13" pos:end="101:14">-&gt;</operator><name pos:start="101:15" pos:end="101:19">value</name><operator pos:start="101:20" pos:end="101:21">-&gt;</operator><name pos:start="101:22" pos:end="101:22">u</name><operator pos:start="101:23" pos:end="101:23">.</operator><name pos:start="101:24" pos:end="101:30">tricore</name><operator pos:start="101:31" pos:end="101:31">.</operator><name pos:start="101:32" pos:end="101:33">PC</name></name> <operator pos:start="101:35" pos:end="101:35">=</operator> <name pos:start="101:37" pos:end="101:43"><name pos:start="101:37" pos:end="101:39">env</name><operator pos:start="101:40" pos:end="101:41">-&gt;</operator><name pos:start="101:42" pos:end="101:43">PC</name></name></expr>;</expr_stmt>

<cpp:else pos:start="103:1" pos:end="103:5">#<cpp:directive pos:start="103:2" pos:end="103:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="105:9" pos:end="108:0"><expr pos:start="105:9" pos:end="105:47"><name pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:12">info</name><operator pos:start="105:13" pos:end="105:14">-&gt;</operator><name pos:start="105:15" pos:end="105:19">value</name><operator pos:start="105:20" pos:end="105:21">-&gt;</operator><name pos:start="105:22" pos:end="105:25">arch</name></name> <operator pos:start="105:27" pos:end="105:27">=</operator> <name pos:start="105:29" pos:end="105:47">CPU_INFO_ARCH_OTHER</name></expr>;</expr_stmt>

<cpp:endif pos:start="107:1" pos:end="107:6">#<cpp:directive pos:start="107:2" pos:end="107:6">endif</cpp:directive></cpp:endif>










        <comment type="block" pos:start="118:9" pos:end="118:57">/* XXX: waiting for the qapi to support GSList */</comment>

        <if_stmt pos:start="120:9" pos:end="134:16"><if pos:start="120:9" pos:end="124:9">if <condition pos:start="120:12" pos:end="120:22">(<expr pos:start="120:13" pos:end="120:21"><operator pos:start="120:13" pos:end="120:13">!</operator><name pos:start="120:14" pos:end="120:21">cur_item</name></expr>)</condition> <block pos:start="120:24" pos:end="124:9">{<block_content pos:start="122:13" pos:end="122:35">

            <expr_stmt pos:start="122:13" pos:end="122:35"><expr pos:start="122:13" pos:end="122:34"><name pos:start="122:13" pos:end="122:16">head</name> <operator pos:start="122:18" pos:end="122:18">=</operator> <name pos:start="122:20" pos:end="122:27">cur_item</name> <operator pos:start="122:29" pos:end="122:29">=</operator> <name pos:start="122:31" pos:end="122:34">info</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="124:11" pos:end="134:16">else <block pos:start="124:16" pos:end="134:16">{<block_content pos:start="126:13" pos:end="134:16">

            <expr_stmt pos:start="126:13" pos:end="126:34"><expr pos:start="126:13" pos:end="126:33"><name pos:start="126:13" pos:end="126:26"><name pos:start="126:13" pos:end="126:20">cur_item</name><operator pos:start="126:21" pos:end="126:22">-&gt;</operator><name pos:start="126:23" pos:end="126:26">next</name></name> <operator pos:start="126:28" pos:end="126:28">=</operator> <name pos:start="126:30" pos:end="126:33">info</name></expr>;</expr_stmt>

            <expr_stmt pos:start="128:13" pos:end="128:28"><expr pos:start="128:13" pos:end="128:27"><name pos:start="128:13" pos:end="128:20">cur_item</name> <operator pos:start="128:22" pos:end="128:22">=</operator> <name pos:start="128:24" pos:end="128:27">info</name></expr>;</expr_stmt>





    <return pos:start="134:5" pos:end="134:16">return <expr pos:start="134:12" pos:end="134:15"><name pos:start="134:12" pos:end="134:15">head</name></expr>;</return></block_content></block></else></if_stmt></block_content></block></block_content></block></function>
</unit>
