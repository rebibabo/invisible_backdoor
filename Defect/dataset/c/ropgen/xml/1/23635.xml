<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23635.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:55"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">avui_encode_frame</name><parameter_list pos:start="1:29" pos:end="3:65">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:65"><decl pos:start="1:53" pos:end="1:65"><type pos:start="1:53" pos:end="1:65"><name pos:start="1:53" pos:end="1:60">AVPacket</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">pkt</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:47"><decl pos:start="3:30" pos:end="3:47"><type pos:start="3:30" pos:end="3:47"><specifier pos:start="3:30" pos:end="3:34">const</specifier> <name pos:start="3:36" pos:end="3:42">AVFrame</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:47">pic</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:64"><decl pos:start="3:50" pos:end="3:64"><type pos:start="3:50" pos:end="3:64"><name pos:start="3:50" pos:end="3:52">int</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:64">got_packet</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="41:55">{<block_content pos:start="7:5" pos:end="41:55">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">dst</name></decl>, <decl pos:start="7:19" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:13"><modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">src</name> <init pos:start="7:24" pos:end="7:37">= <expr pos:start="7:26" pos:end="7:37"><name pos:start="7:26" pos:end="7:37"><name pos:start="7:26" pos:end="7:28">pic</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:34">data</name><index pos:start="7:35" pos:end="7:37">[<expr pos:start="7:36" pos:end="7:36"><literal type="number" pos:start="7:36" pos:end="7:36">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">j</name></decl>, <decl pos:start="9:15" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:18">skip</name></decl>, <decl pos:start="9:21" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:23">ret</name></decl>, <decl pos:start="9:26" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:26" pos:end="9:29">size</name></decl>, <decl pos:start="9:32" pos:end="9:41"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:32" pos:end="9:41">interlaced</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:59"><expr pos:start="13:5" pos:end="13:58"><name pos:start="13:5" pos:end="13:14">interlaced</name> <operator pos:start="13:16" pos:end="13:16">=</operator> <name pos:start="13:18" pos:end="13:35"><name pos:start="13:18" pos:end="13:22">avctx</name><operator pos:start="13:23" pos:end="13:24">-&gt;</operator><name pos:start="13:25" pos:end="13:35">field_order</name></name> <operator pos:start="13:37" pos:end="13:37">&gt;</operator> <name pos:start="13:39" pos:end="13:58">AV_FIELD_PROGRESSIVE</name></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:29">(<expr pos:start="17:9" pos:end="17:28"><name pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:13">avctx</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:21">height</name></name> <operator pos:start="17:23" pos:end="17:24">==</operator> <literal type="number" pos:start="17:26" pos:end="17:28">486</literal></expr>)</condition> <block pos:start="17:31" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:18">

        <expr_stmt pos:start="19:9" pos:end="19:18"><expr pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:12">skip</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <literal type="number" pos:start="19:16" pos:end="19:17">10</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="21:7" pos:end="25:5">else <block pos:start="21:12" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:18">

        <expr_stmt pos:start="23:9" pos:end="23:18"><expr pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:12">skip</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <literal type="number" pos:start="23:16" pos:end="23:17">16</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:70"><expr pos:start="27:5" pos:end="27:69"><name pos:start="27:5" pos:end="27:8">size</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <literal type="number" pos:start="27:12" pos:end="27:12">2</literal> <operator pos:start="27:14" pos:end="27:14">*</operator> <name pos:start="27:16" pos:end="27:27"><name pos:start="27:16" pos:end="27:20">avctx</name><operator pos:start="27:21" pos:end="27:22">-&gt;</operator><name pos:start="27:23" pos:end="27:27">width</name></name> <operator pos:start="27:29" pos:end="27:29">*</operator> <operator pos:start="27:31" pos:end="27:31">(</operator><name pos:start="27:32" pos:end="27:44"><name pos:start="27:32" pos:end="27:36">avctx</name><operator pos:start="27:37" pos:end="27:38">-&gt;</operator><name pos:start="27:39" pos:end="27:44">height</name></name> <operator pos:start="27:46" pos:end="27:46">+</operator> <name pos:start="27:48" pos:end="27:51">skip</name><operator pos:start="27:52" pos:end="27:52">)</operator> <operator pos:start="27:54" pos:end="27:54">+</operator> <literal type="number" pos:start="27:56" pos:end="27:56">8</literal> <operator pos:start="27:58" pos:end="27:58">*</operator> <name pos:start="27:60" pos:end="27:69">interlaced</name></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="31:19"><if pos:start="29:5" pos:end="31:19">if <condition pos:start="29:8" pos:end="29:55">(<expr pos:start="29:9" pos:end="29:54"><operator pos:start="29:9" pos:end="29:9">(</operator><name pos:start="29:10" pos:end="29:12">ret</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <call pos:start="29:16" pos:end="29:49"><name pos:start="29:16" pos:end="29:31">ff_alloc_packet2</name><argument_list pos:start="29:32" pos:end="29:49">(<argument pos:start="29:33" pos:end="29:37"><expr pos:start="29:33" pos:end="29:37"><name pos:start="29:33" pos:end="29:37">avctx</name></expr></argument>, <argument pos:start="29:40" pos:end="29:42"><expr pos:start="29:40" pos:end="29:42"><name pos:start="29:40" pos:end="29:42">pkt</name></expr></argument>, <argument pos:start="29:45" pos:end="29:48"><expr pos:start="29:45" pos:end="29:48"><name pos:start="29:45" pos:end="29:48">size</name></expr></argument>)</argument_list></call><operator pos:start="29:50" pos:end="29:50">)</operator> <operator pos:start="29:52" pos:end="29:52">&lt;</operator> <literal type="number" pos:start="29:54" pos:end="29:54">0</literal></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:19"><block_content pos:start="31:9" pos:end="31:19">

        <return pos:start="31:9" pos:end="31:19">return <expr pos:start="31:16" pos:end="31:18"><name pos:start="31:16" pos:end="31:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:20"><expr pos:start="33:5" pos:end="33:19"><name pos:start="33:5" pos:end="33:7">dst</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <name pos:start="33:11" pos:end="33:19"><name pos:start="33:11" pos:end="33:13">pkt</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:19">data</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="37:31"><if pos:start="35:5" pos:end="37:31">if <condition pos:start="35:8" pos:end="35:76">(<expr pos:start="35:9" pos:end="35:75"><operator pos:start="35:9" pos:end="35:9">!</operator><operator pos:start="35:10" pos:end="35:10">(</operator><name pos:start="35:11" pos:end="35:26"><name pos:start="35:11" pos:end="35:15">avctx</name><operator pos:start="35:16" pos:end="35:17">-&gt;</operator><name pos:start="35:18" pos:end="35:26">extradata</name></name> <operator pos:start="35:28" pos:end="35:28">=</operator> <call pos:start="35:30" pos:end="35:74"><name pos:start="35:30" pos:end="35:39">av_mallocz</name><argument_list pos:start="35:40" pos:end="35:74">(<argument pos:start="35:41" pos:end="35:73"><expr pos:start="35:41" pos:end="35:73"><literal type="number" pos:start="35:41" pos:end="35:44">24</literal> <operator pos:start="35:44" pos:end="35:44">+</operator> <name pos:start="35:46" pos:end="35:73">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call><operator pos:start="35:75" pos:end="35:75">)</operator></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:31"><block_content pos:start="37:9" pos:end="37:31">

        <return pos:start="37:9" pos:end="37:31">return <expr pos:start="37:16" pos:end="37:30"><call pos:start="37:16" pos:end="37:30"><name pos:start="37:16" pos:end="37:22">AVERROR</name><argument_list pos:start="37:23" pos:end="37:30">(<argument pos:start="37:24" pos:end="37:29"><expr pos:start="37:24" pos:end="37:29"><name pos:start="37:24" pos:end="37:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:31"><expr pos:start="39:5" pos:end="39:30"><name pos:start="39:5" pos:end="39:25"><name pos:start="39:5" pos:end="39:9">avctx</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:25">extradata_size</name></name> <operator pos:start="39:27" pos:end="39:27">=</operator> <literal type="number" pos:start="39:29" pos:end="39:30">24</literal></expr>;</expr_stmt>

    <macro pos:start="41:5" pos:end="41:55"><name pos:start="41:5" pos:end="41:10">memcpy</name><argument_list pos:start="41:11" pos:end="41:55">(<argument pos:start="41:12" pos:end="41:27">avctx-&gt;extradata</argument>, <argument pos:start="41:30" pos:end="41:55"><literal type="string" pos:start="41:30" pos:end="41:42">"\0\0\0\x18""</literal>APRGAPRG0001<literal type="string" pos:start="41:55" pos:end="41:55">"</literal></argument></argument_list></macro></block_content></block></function>, 16);

    if (interlaced) {

        avctx-&gt;extradata[19] = 2;

    } else {

        avctx-&gt;extradata[19] = 1;

        dst += avctx-&gt;width * skip;

    }



    avctx-&gt;coded_frame-&gt;reference = 0;

    avctx-&gt;coded_frame-&gt;key_frame = 1;

    avctx-&gt;coded_frame-&gt;pict_type = AV_PICTURE_TYPE_I;



    for (i = 0; i &lt;= interlaced; i++) {

        if (interlaced &amp;&amp; avctx-&gt;height == 486) {

            src = pic-&gt;data[0] + (1 - i) * pic-&gt;linesize[0];

        } else {

            src = pic-&gt;data[0] + i * pic-&gt;linesize[0];

        }

        dst += avctx-&gt;width * skip + 4 * i;

        for (j = 0; j &lt; avctx-&gt;height; j += interlaced + 1) {

            memcpy(dst, src, avctx-&gt;width * 2);

            src += (interlaced + 1) * pic-&gt;linesize[0];

            dst += avctx-&gt;width * 2;

        }

    }



    pkt-&gt;flags |= AV_PKT_FLAG_KEY;

    *got_packet = 1;

    return 0;

}
</unit>
