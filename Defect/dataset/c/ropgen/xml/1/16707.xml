<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16707.c" pos:tabs="8"><function pos:start="1:1" pos:end="187:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">raw_reopen_prepare</name><parameter_list pos:start="1:30" pos:end="3:68">(<parameter pos:start="1:31" pos:end="1:52"><decl pos:start="1:31" pos:end="1:52"><type pos:start="1:31" pos:end="1:52"><name pos:start="1:31" pos:end="1:45">BDRVReopenState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">state</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:53"><decl pos:start="3:31" pos:end="3:53"><type pos:start="3:31" pos:end="3:53"><name pos:start="3:31" pos:end="3:46">BlockReopenQueue</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:53">queue</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:67"><decl pos:start="3:56" pos:end="3:67"><type pos:start="3:56" pos:end="3:67"><name pos:start="3:56" pos:end="3:60">Error</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier><modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:67">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="187:1">{<block_content pos:start="7:5" pos:end="185:15">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVRawState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:22">BDRVRawReopenState</name> <modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:29">raw_s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">local_err</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:26"><expr pos:start="17:5" pos:end="17:25"><call pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:25">(<argument pos:start="17:12" pos:end="17:24"><expr pos:start="17:12" pos:end="17:24"><name pos:start="17:12" pos:end="17:16">state</name> <operator pos:start="17:18" pos:end="17:19">!=</operator> <name pos:start="17:21" pos:end="17:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:30"><expr pos:start="19:5" pos:end="19:29"><call pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:29">(<argument pos:start="19:12" pos:end="19:28"><expr pos:start="19:12" pos:end="19:28"><name pos:start="19:12" pos:end="19:20"><name pos:start="19:12" pos:end="19:16">state</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:20">bs</name></name> <operator pos:start="19:22" pos:end="19:23">!=</operator> <name pos:start="19:25" pos:end="19:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:26"><expr pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:5">s</name> <operator pos:start="23:7" pos:end="23:7">=</operator> <name pos:start="23:9" pos:end="23:25"><name pos:start="23:9" pos:end="23:13">state</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:17">bs</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:25">opaque</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:58"><expr pos:start="27:5" pos:end="27:57"><name pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:9">state</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:17">opaque</name></name> <operator pos:start="27:19" pos:end="27:19">=</operator> <call pos:start="27:21" pos:end="27:57"><name pos:start="27:21" pos:end="27:29">g_malloc0</name><argument_list pos:start="27:30" pos:end="27:57">(<argument pos:start="27:31" pos:end="27:56"><expr pos:start="27:31" pos:end="27:56"><sizeof pos:start="27:31" pos:end="27:56">sizeof<argument_list pos:start="27:37" pos:end="27:56">(<argument pos:start="27:38" pos:end="27:55"><expr pos:start="27:38" pos:end="27:55"><name pos:start="27:38" pos:end="27:55">BDRVRawReopenState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="34:0"><expr pos:start="29:5" pos:end="29:25"><name pos:start="29:5" pos:end="29:9">raw_s</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <name pos:start="29:13" pos:end="29:25"><name pos:start="29:13" pos:end="29:17">state</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:25">opaque</name></name></expr>;</expr_stmt>



<cpp:ifdef pos:start="33:1" pos:end="33:23">#<cpp:directive pos:start="33:2" pos:end="33:6">ifdef</cpp:directive> <name pos:start="33:8" pos:end="33:23">CONFIG_LINUX_AIO</name></cpp:ifdef>

    <expr_stmt pos:start="35:5" pos:end="35:32"><expr pos:start="35:5" pos:end="35:31"><name pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:9">raw_s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:18">use_aio</name></name> <operator pos:start="35:20" pos:end="35:20">=</operator> <name pos:start="35:22" pos:end="35:31"><name pos:start="35:22" pos:end="35:22">s</name><operator pos:start="35:23" pos:end="35:24">-&gt;</operator><name pos:start="35:25" pos:end="35:31">use_aio</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="43:55">/* we can use s-&gt;aio_ctx instead of a copy, because the use_aio flag is

     * valid in the 'false' condition even if aio_ctx is set, and raw_set_aio()

     * won't override aio_ctx if aio_ctx is non-NULL */</comment>

    <if_stmt pos:start="45:5" pos:end="54:0"><if pos:start="45:5" pos:end="54:0">if <condition pos:start="45:8" pos:end="45:64">(<expr pos:start="45:9" pos:end="45:63"><call pos:start="45:9" pos:end="45:63"><name pos:start="45:9" pos:end="45:19">raw_set_aio</name><argument_list pos:start="45:20" pos:end="45:63">(<argument pos:start="45:21" pos:end="45:31"><expr pos:start="45:21" pos:end="45:31"><operator pos:start="45:21" pos:end="45:21">&amp;</operator><name pos:start="45:22" pos:end="45:31"><name pos:start="45:22" pos:end="45:22">s</name><operator pos:start="45:23" pos:end="45:24">-&gt;</operator><name pos:start="45:25" pos:end="45:31">aio_ctx</name></name></expr></argument>, <argument pos:start="45:34" pos:end="45:48"><expr pos:start="45:34" pos:end="45:48"><operator pos:start="45:34" pos:end="45:34">&amp;</operator><name pos:start="45:35" pos:end="45:48"><name pos:start="45:35" pos:end="45:39">raw_s</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:48">use_aio</name></name></expr></argument>, <argument pos:start="45:51" pos:end="45:62"><expr pos:start="45:51" pos:end="45:62"><name pos:start="45:51" pos:end="45:62"><name pos:start="45:51" pos:end="45:55">state</name><operator pos:start="45:56" pos:end="45:57">-&gt;</operator><name pos:start="45:58" pos:end="45:62">flags</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:66" pos:end="54:0">{<block_content pos:start="47:9" pos:end="49:18">

        <expr_stmt pos:start="47:9" pos:end="47:52"><expr pos:start="47:9" pos:end="47:51"><call pos:start="47:9" pos:end="47:51"><name pos:start="47:9" pos:end="47:18">error_setg</name><argument_list pos:start="47:19" pos:end="47:51">(<argument pos:start="47:20" pos:end="47:23"><expr pos:start="47:20" pos:end="47:23"><name pos:start="47:20" pos:end="47:23">errp</name></expr></argument>, <argument pos:start="47:26" pos:end="47:50"><expr pos:start="47:26" pos:end="47:50"><literal type="string" pos:start="47:26" pos:end="47:50">"Could not set AIO state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:18">return <expr pos:start="49:16" pos:end="49:17"><operator pos:start="49:16" pos:end="49:16">-</operator><literal type="number" pos:start="49:17" pos:end="49:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:51">(<expr pos:start="57:9" pos:end="57:50"><name pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:15">type</name></name> <operator pos:start="57:17" pos:end="57:18">==</operator> <name pos:start="57:20" pos:end="57:27">FTYPE_FD</name> <operator pos:start="57:29" pos:end="57:30">||</operator> <name pos:start="57:32" pos:end="57:38"><name pos:start="57:32" pos:end="57:32">s</name><operator pos:start="57:33" pos:end="57:34">-&gt;</operator><name pos:start="57:35" pos:end="57:38">type</name></name> <operator pos:start="57:40" pos:end="57:41">==</operator> <name pos:start="57:43" pos:end="57:50">FTYPE_CD</name></expr>)</condition> <block pos:start="57:53" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:40">

        <expr_stmt pos:start="59:9" pos:end="59:40"><expr pos:start="59:9" pos:end="59:39"><name pos:start="59:9" pos:end="59:25"><name pos:start="59:9" pos:end="59:13">raw_s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:25">open_flags</name></name> <operator pos:start="59:27" pos:end="59:28">|=</operator> <name pos:start="59:30" pos:end="59:39">O_NONBLOCK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:54"><expr pos:start="65:5" pos:end="65:53"><call pos:start="65:5" pos:end="65:53"><name pos:start="65:5" pos:end="65:19">raw_parse_flags</name><argument_list pos:start="65:20" pos:end="65:53">(<argument pos:start="65:21" pos:end="65:32"><expr pos:start="65:21" pos:end="65:32"><name pos:start="65:21" pos:end="65:32"><name pos:start="65:21" pos:end="65:25">state</name><operator pos:start="65:26" pos:end="65:27">-&gt;</operator><name pos:start="65:28" pos:end="65:32">flags</name></name></expr></argument>, <argument pos:start="65:35" pos:end="65:52"><expr pos:start="65:35" pos:end="65:52"><operator pos:start="65:35" pos:end="65:35">&amp;</operator><name pos:start="65:36" pos:end="65:52"><name pos:start="65:36" pos:end="65:40">raw_s</name><operator pos:start="65:41" pos:end="65:42">-&gt;</operator><name pos:start="65:43" pos:end="65:52">open_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:19"><expr pos:start="69:5" pos:end="69:18"><name pos:start="69:5" pos:end="69:13"><name pos:start="69:5" pos:end="69:9">raw_s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:13">fd</name></name> <operator pos:start="69:15" pos:end="69:15">=</operator> <operator pos:start="69:17" pos:end="69:17">-</operator><literal type="number" pos:start="69:18" pos:end="69:18">1</literal></expr>;</expr_stmt>



    <decl_stmt pos:start="73:5" pos:end="76:0"><decl pos:start="73:5" pos:end="73:43"><type pos:start="73:5" pos:end="73:7"><name pos:start="73:5" pos:end="73:7">int</name></type> <name pos:start="73:9" pos:end="73:19">fcntl_flags</name> <init pos:start="73:21" pos:end="73:43">= <expr pos:start="73:23" pos:end="73:43"><name pos:start="73:23" pos:end="73:30">O_APPEND</name> <operator pos:start="73:32" pos:end="73:32">|</operator> <name pos:start="73:34" pos:end="73:43">O_NONBLOCK</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="75:1" pos:end="75:16">#<cpp:directive pos:start="75:2" pos:end="75:6">ifdef</cpp:directive> <name pos:start="75:8" pos:end="75:16">O_NOATIME</name></cpp:ifdef>

    <expr_stmt pos:start="77:5" pos:end="84:0"><expr pos:start="77:5" pos:end="77:28"><name pos:start="77:5" pos:end="77:15">fcntl_flags</name> <operator pos:start="77:17" pos:end="77:18">|=</operator> <name pos:start="77:20" pos:end="77:28">O_NOATIME</name></expr>;</expr_stmt>

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="83:1" pos:end="83:14">#<cpp:directive pos:start="83:2" pos:end="83:6">ifdef</cpp:directive> <name pos:start="83:8" pos:end="83:14">O_ASYNC</name></cpp:ifdef>

    <comment type="block" pos:start="85:5" pos:end="93:7">/* Not all operating systems have O_ASYNC, and those that don't

     * will not let us track the state into raw_s-&gt;open_flags (typically

     * you achieve the same effect with an ioctl, for example I_SETSIG

     * on Solaris). But we do not use O_ASYNC, so that's fine.

     */</comment>

    <expr_stmt pos:start="95:5" pos:end="98:0"><expr pos:start="95:5" pos:end="95:42"><call pos:start="95:5" pos:end="95:42"><name pos:start="95:5" pos:end="95:10">assert</name><argument_list pos:start="95:11" pos:end="95:42">(<argument pos:start="95:12" pos:end="95:41"><expr pos:start="95:12" pos:end="95:41"><operator pos:start="95:12" pos:end="95:12">(</operator><name pos:start="95:13" pos:end="95:25"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:25">open_flags</name></name> <operator pos:start="95:27" pos:end="95:27">&amp;</operator> <name pos:start="95:29" pos:end="95:35">O_ASYNC</name><operator pos:start="95:36" pos:end="95:36">)</operator> <operator pos:start="95:38" pos:end="95:39">==</operator> <literal type="number" pos:start="95:41" pos:end="95:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="101:5" pos:end="137:5"><if pos:start="101:5" pos:end="137:5">if <condition pos:start="101:8" pos:end="101:77">(<expr pos:start="101:9" pos:end="101:76"><operator pos:start="101:9" pos:end="101:9">(</operator><name pos:start="101:10" pos:end="101:26"><name pos:start="101:10" pos:end="101:14">raw_s</name><operator pos:start="101:15" pos:end="101:16">-&gt;</operator><name pos:start="101:17" pos:end="101:26">open_flags</name></name> <operator pos:start="101:28" pos:end="101:28">&amp;</operator> <operator pos:start="101:30" pos:end="101:30">~</operator><name pos:start="101:31" pos:end="101:41">fcntl_flags</name><operator pos:start="101:42" pos:end="101:42">)</operator> <operator pos:start="101:44" pos:end="101:45">==</operator> <operator pos:start="101:47" pos:end="101:47">(</operator><name pos:start="101:48" pos:end="101:60"><name pos:start="101:48" pos:end="101:48">s</name><operator pos:start="101:49" pos:end="101:50">-&gt;</operator><name pos:start="101:51" pos:end="101:60">open_flags</name></name> <operator pos:start="101:62" pos:end="101:62">&amp;</operator> <operator pos:start="101:64" pos:end="101:64">~</operator><name pos:start="101:65" pos:end="101:75">fcntl_flags</name><operator pos:start="101:76" pos:end="101:76">)</operator></expr>)</condition> <block pos:start="101:79" pos:end="137:5">{<block_content pos:start="109:9" pos:end="135:9">

        <comment type="block" pos:start="103:9" pos:end="103:33">/* dup the original fd */</comment>

        <comment type="block" pos:start="105:9" pos:end="105:42">/* TODO: use qemu fcntl wrapper */</comment>

<cpp:ifdef pos:start="107:1" pos:end="107:22">#<cpp:directive pos:start="107:2" pos:end="107:6">ifdef</cpp:directive> <name pos:start="107:8" pos:end="107:22">F_DUPFD_CLOEXEC</name></cpp:ifdef>

        <expr_stmt pos:start="109:9" pos:end="112:0"><expr pos:start="109:9" pos:end="109:52"><name pos:start="109:9" pos:end="109:17"><name pos:start="109:9" pos:end="109:13">raw_s</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:17">fd</name></name> <operator pos:start="109:19" pos:end="109:19">=</operator> <call pos:start="109:21" pos:end="109:52"><name pos:start="109:21" pos:end="109:25">fcntl</name><argument_list pos:start="109:26" pos:end="109:52">(<argument pos:start="109:27" pos:end="109:31"><expr pos:start="109:27" pos:end="109:31"><name pos:start="109:27" pos:end="109:31"><name pos:start="109:27" pos:end="109:27">s</name><operator pos:start="109:28" pos:end="109:29">-&gt;</operator><name pos:start="109:30" pos:end="109:31">fd</name></name></expr></argument>, <argument pos:start="109:34" pos:end="109:48"><expr pos:start="109:34" pos:end="109:48"><name pos:start="109:34" pos:end="109:48">F_DUPFD_CLOEXEC</name></expr></argument>, <argument pos:start="109:51" pos:end="109:51"><expr pos:start="109:51" pos:end="109:51"><literal type="number" pos:start="109:51" pos:end="109:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="111:1" pos:end="111:5">#<cpp:directive pos:start="111:2" pos:end="111:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="113:9" pos:end="113:31"><expr pos:start="113:9" pos:end="113:30"><name pos:start="113:9" pos:end="113:17"><name pos:start="113:9" pos:end="113:13">raw_s</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:17">fd</name></name> <operator pos:start="113:19" pos:end="113:19">=</operator> <call pos:start="113:21" pos:end="113:30"><name pos:start="113:21" pos:end="113:23">dup</name><argument_list pos:start="113:24" pos:end="113:30">(<argument pos:start="113:25" pos:end="113:29"><expr pos:start="113:25" pos:end="113:29"><name pos:start="113:25" pos:end="113:29"><name pos:start="113:25" pos:end="113:25">s</name><operator pos:start="113:26" pos:end="113:27">-&gt;</operator><name pos:start="113:28" pos:end="113:29">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="122:0"><if pos:start="115:9" pos:end="122:0">if <condition pos:start="115:12" pos:end="115:28">(<expr pos:start="115:13" pos:end="115:27"><name pos:start="115:13" pos:end="115:21"><name pos:start="115:13" pos:end="115:17">raw_s</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:21">fd</name></name> <operator pos:start="115:23" pos:end="115:24">!=</operator> <operator pos:start="115:26" pos:end="115:26">-</operator><literal type="number" pos:start="115:27" pos:end="115:27">1</literal></expr>)</condition> <block pos:start="115:30" pos:end="122:0">{<block_content pos:start="117:13" pos:end="117:40">

            <expr_stmt pos:start="117:13" pos:end="117:40"><expr pos:start="117:13" pos:end="117:39"><call pos:start="117:13" pos:end="117:39"><name pos:start="117:13" pos:end="117:28">qemu_set_cloexec</name><argument_list pos:start="117:29" pos:end="117:39">(<argument pos:start="117:30" pos:end="117:38"><expr pos:start="117:30" pos:end="117:38"><name pos:start="117:30" pos:end="117:38"><name pos:start="117:30" pos:end="117:34">raw_s</name><operator pos:start="117:35" pos:end="117:36">-&gt;</operator><name pos:start="117:37" pos:end="117:38">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="121:1" pos:end="121:6">#<cpp:directive pos:start="121:2" pos:end="121:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="123:9" pos:end="135:9"><if pos:start="123:9" pos:end="135:9">if <condition pos:start="123:12" pos:end="123:27">(<expr pos:start="123:13" pos:end="123:26"><name pos:start="123:13" pos:end="123:21"><name pos:start="123:13" pos:end="123:17">raw_s</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:21">fd</name></name> <operator pos:start="123:23" pos:end="123:24">&gt;=</operator> <literal type="number" pos:start="123:26" pos:end="123:26">0</literal></expr>)</condition> <block pos:start="123:29" pos:end="135:9">{<block_content pos:start="125:13" pos:end="133:13">

            <expr_stmt pos:start="125:13" pos:end="125:60"><expr pos:start="125:13" pos:end="125:59"><name pos:start="125:13" pos:end="125:15">ret</name> <operator pos:start="125:17" pos:end="125:17">=</operator> <call pos:start="125:19" pos:end="125:59"><name pos:start="125:19" pos:end="125:29">fcntl_setfl</name><argument_list pos:start="125:30" pos:end="125:59">(<argument pos:start="125:31" pos:end="125:39"><expr pos:start="125:31" pos:end="125:39"><name pos:start="125:31" pos:end="125:39"><name pos:start="125:31" pos:end="125:35">raw_s</name><operator pos:start="125:36" pos:end="125:37">-&gt;</operator><name pos:start="125:38" pos:end="125:39">fd</name></name></expr></argument>, <argument pos:start="125:42" pos:end="125:58"><expr pos:start="125:42" pos:end="125:58"><name pos:start="125:42" pos:end="125:58"><name pos:start="125:42" pos:end="125:46">raw_s</name><operator pos:start="125:47" pos:end="125:48">-&gt;</operator><name pos:start="125:49" pos:end="125:58">open_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="127:13" pos:end="133:13"><if pos:start="127:13" pos:end="133:13">if <condition pos:start="127:16" pos:end="127:20">(<expr pos:start="127:17" pos:end="127:19"><name pos:start="127:17" pos:end="127:19">ret</name></expr>)</condition> <block pos:start="127:22" pos:end="133:13">{<block_content pos:start="129:17" pos:end="131:31">

                <expr_stmt pos:start="129:17" pos:end="129:38"><expr pos:start="129:17" pos:end="129:37"><call pos:start="129:17" pos:end="129:37"><name pos:start="129:17" pos:end="129:26">qemu_close</name><argument_list pos:start="129:27" pos:end="129:37">(<argument pos:start="129:28" pos:end="129:36"><expr pos:start="129:28" pos:end="129:36"><name pos:start="129:28" pos:end="129:36"><name pos:start="129:28" pos:end="129:32">raw_s</name><operator pos:start="129:33" pos:end="129:34">-&gt;</operator><name pos:start="129:35" pos:end="129:36">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:31"><expr pos:start="131:17" pos:end="131:30"><name pos:start="131:17" pos:end="131:25"><name pos:start="131:17" pos:end="131:21">raw_s</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:25">fd</name></name> <operator pos:start="131:27" pos:end="131:27">=</operator> <operator pos:start="131:29" pos:end="131:29">-</operator><literal type="number" pos:start="131:30" pos:end="131:30">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="141:5" pos:end="141:75">/* If we cannot use fcntl, or fcntl failed, fall back to qemu_open() */</comment>

    <if_stmt pos:start="143:5" pos:end="157:5"><if pos:start="143:5" pos:end="157:5">if <condition pos:start="143:8" pos:end="143:24">(<expr pos:start="143:9" pos:end="143:23"><name pos:start="143:9" pos:end="143:17"><name pos:start="143:9" pos:end="143:13">raw_s</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:17">fd</name></name> <operator pos:start="143:19" pos:end="143:20">==</operator> <operator pos:start="143:22" pos:end="143:22">-</operator><literal type="number" pos:start="143:23" pos:end="143:23">1</literal></expr>)</condition> <block pos:start="143:26" pos:end="157:5">{<block_content pos:start="145:9" pos:end="155:9">

        <expr_stmt pos:start="145:9" pos:end="145:47"><expr pos:start="145:9" pos:end="145:46"><call pos:start="145:9" pos:end="145:46"><name pos:start="145:9" pos:end="145:14">assert</name><argument_list pos:start="145:15" pos:end="145:46">(<argument pos:start="145:16" pos:end="145:45"><expr pos:start="145:16" pos:end="145:45"><operator pos:start="145:16" pos:end="145:16">!</operator><operator pos:start="145:17" pos:end="145:17">(</operator><name pos:start="145:18" pos:end="145:34"><name pos:start="145:18" pos:end="145:22">raw_s</name><operator pos:start="145:23" pos:end="145:24">-&gt;</operator><name pos:start="145:25" pos:end="145:34">open_flags</name></name> <operator pos:start="145:36" pos:end="145:36">&amp;</operator> <name pos:start="145:38" pos:end="145:44">O_CREAT</name><operator pos:start="145:45" pos:end="145:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:70"><expr pos:start="147:9" pos:end="147:69"><name pos:start="147:9" pos:end="147:17"><name pos:start="147:9" pos:end="147:13">raw_s</name><operator pos:start="147:14" pos:end="147:15">-&gt;</operator><name pos:start="147:16" pos:end="147:17">fd</name></name> <operator pos:start="147:19" pos:end="147:19">=</operator> <call pos:start="147:21" pos:end="147:69"><name pos:start="147:21" pos:end="147:29">qemu_open</name><argument_list pos:start="147:30" pos:end="147:69">(<argument pos:start="147:31" pos:end="147:49"><expr pos:start="147:31" pos:end="147:49"><name pos:start="147:31" pos:end="147:49"><name pos:start="147:31" pos:end="147:35">state</name><operator pos:start="147:36" pos:end="147:37">-&gt;</operator><name pos:start="147:38" pos:end="147:39">bs</name><operator pos:start="147:40" pos:end="147:41">-&gt;</operator><name pos:start="147:42" pos:end="147:49">filename</name></name></expr></argument>, <argument pos:start="147:52" pos:end="147:68"><expr pos:start="147:52" pos:end="147:68"><name pos:start="147:52" pos:end="147:68"><name pos:start="147:52" pos:end="147:56">raw_s</name><operator pos:start="147:57" pos:end="147:58">-&gt;</operator><name pos:start="147:59" pos:end="147:68">open_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="155:9"><if pos:start="149:9" pos:end="155:9">if <condition pos:start="149:12" pos:end="149:28">(<expr pos:start="149:13" pos:end="149:27"><name pos:start="149:13" pos:end="149:21"><name pos:start="149:13" pos:end="149:17">raw_s</name><operator pos:start="149:18" pos:end="149:19">-&gt;</operator><name pos:start="149:20" pos:end="149:21">fd</name></name> <operator pos:start="149:23" pos:end="149:24">==</operator> <operator pos:start="149:26" pos:end="149:26">-</operator><literal type="number" pos:start="149:27" pos:end="149:27">1</literal></expr>)</condition> <block pos:start="149:30" pos:end="155:9">{<block_content pos:start="151:13" pos:end="153:21">

            <expr_stmt pos:start="151:13" pos:end="151:67"><expr pos:start="151:13" pos:end="151:66"><call pos:start="151:13" pos:end="151:66"><name pos:start="151:13" pos:end="151:28">error_setg_errno</name><argument_list pos:start="151:29" pos:end="151:66">(<argument pos:start="151:30" pos:end="151:33"><expr pos:start="151:30" pos:end="151:33"><name pos:start="151:30" pos:end="151:33">errp</name></expr></argument>, <argument pos:start="151:36" pos:end="151:40"><expr pos:start="151:36" pos:end="151:40"><name pos:start="151:36" pos:end="151:40">errno</name></expr></argument>, <argument pos:start="151:43" pos:end="151:65"><expr pos:start="151:43" pos:end="151:65"><literal type="string" pos:start="151:43" pos:end="151:65">"Could not reopen file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:21"><expr pos:start="153:13" pos:end="153:20"><name pos:start="153:13" pos:end="153:15">ret</name> <operator pos:start="153:17" pos:end="153:17">=</operator> <operator pos:start="153:19" pos:end="153:19">-</operator><literal type="number" pos:start="153:20" pos:end="153:20">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="161:5" pos:end="163:36">/* Fail already reopen_prepare() if we can't get a working O_DIRECT

     * alignment with the new fd. */</comment>

    <if_stmt pos:start="165:5" pos:end="181:5"><if pos:start="165:5" pos:end="181:5">if <condition pos:start="165:8" pos:end="165:24">(<expr pos:start="165:9" pos:end="165:23"><name pos:start="165:9" pos:end="165:17"><name pos:start="165:9" pos:end="165:13">raw_s</name><operator pos:start="165:14" pos:end="165:15">-&gt;</operator><name pos:start="165:16" pos:end="165:17">fd</name></name> <operator pos:start="165:19" pos:end="165:20">!=</operator> <operator pos:start="165:22" pos:end="165:22">-</operator><literal type="number" pos:start="165:23" pos:end="165:23">1</literal></expr>)</condition> <block pos:start="165:26" pos:end="181:5">{<block_content pos:start="167:9" pos:end="179:9">

        <expr_stmt pos:start="167:9" pos:end="167:62"><expr pos:start="167:9" pos:end="167:61"><call pos:start="167:9" pos:end="167:61"><name pos:start="167:9" pos:end="167:27">raw_probe_alignment</name><argument_list pos:start="167:28" pos:end="167:61">(<argument pos:start="167:29" pos:end="167:37"><expr pos:start="167:29" pos:end="167:37"><name pos:start="167:29" pos:end="167:37"><name pos:start="167:29" pos:end="167:33">state</name><operator pos:start="167:34" pos:end="167:35">-&gt;</operator><name pos:start="167:36" pos:end="167:37">bs</name></name></expr></argument>, <argument pos:start="167:40" pos:end="167:48"><expr pos:start="167:40" pos:end="167:48"><name pos:start="167:40" pos:end="167:48"><name pos:start="167:40" pos:end="167:44">raw_s</name><operator pos:start="167:45" pos:end="167:46">-&gt;</operator><name pos:start="167:47" pos:end="167:48">fd</name></name></expr></argument>, <argument pos:start="167:51" pos:end="167:60"><expr pos:start="167:51" pos:end="167:60"><operator pos:start="167:51" pos:end="167:51">&amp;</operator><name pos:start="167:52" pos:end="167:60">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="179:9"><if pos:start="169:9" pos:end="179:9">if <condition pos:start="169:12" pos:end="169:22">(<expr pos:start="169:13" pos:end="169:21"><name pos:start="169:13" pos:end="169:21">local_err</name></expr>)</condition> <block pos:start="169:24" pos:end="179:9">{<block_content pos:start="171:13" pos:end="177:26">

            <expr_stmt pos:start="171:13" pos:end="171:34"><expr pos:start="171:13" pos:end="171:33"><call pos:start="171:13" pos:end="171:33"><name pos:start="171:13" pos:end="171:22">qemu_close</name><argument_list pos:start="171:23" pos:end="171:33">(<argument pos:start="171:24" pos:end="171:32"><expr pos:start="171:24" pos:end="171:32"><name pos:start="171:24" pos:end="171:32"><name pos:start="171:24" pos:end="171:28">raw_s</name><operator pos:start="171:29" pos:end="171:30">-&gt;</operator><name pos:start="171:31" pos:end="171:32">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:27"><expr pos:start="173:13" pos:end="173:26"><name pos:start="173:13" pos:end="173:21"><name pos:start="173:13" pos:end="173:17">raw_s</name><operator pos:start="173:18" pos:end="173:19">-&gt;</operator><name pos:start="173:20" pos:end="173:21">fd</name></name> <operator pos:start="173:23" pos:end="173:23">=</operator> <operator pos:start="173:25" pos:end="173:25">-</operator><literal type="number" pos:start="173:26" pos:end="173:26">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:45"><expr pos:start="175:13" pos:end="175:44"><call pos:start="175:13" pos:end="175:44"><name pos:start="175:13" pos:end="175:27">error_propagate</name><argument_list pos:start="175:28" pos:end="175:44">(<argument pos:start="175:29" pos:end="175:32"><expr pos:start="175:29" pos:end="175:32"><name pos:start="175:29" pos:end="175:32">errp</name></expr></argument>, <argument pos:start="175:35" pos:end="175:43"><expr pos:start="175:35" pos:end="175:43"><name pos:start="175:35" pos:end="175:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:26"><expr pos:start="177:13" pos:end="177:25"><name pos:start="177:13" pos:end="177:15">ret</name> <operator pos:start="177:17" pos:end="177:17">=</operator> <operator pos:start="177:19" pos:end="177:19">-</operator><name pos:start="177:20" pos:end="177:25">EINVAL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="185:5" pos:end="185:15">return <expr pos:start="185:12" pos:end="185:14"><name pos:start="185:12" pos:end="185:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
