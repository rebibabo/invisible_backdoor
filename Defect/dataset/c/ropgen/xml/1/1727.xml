<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1727.c" pos:tabs="8"><function pos:start="1:1" pos:end="162:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">ff_ivi_decode_frame</name><parameter_list pos:start="1:24" pos:end="3:40">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:57"><decl pos:start="1:48" pos:end="1:57"><type pos:start="1:48" pos:end="1:57"><name pos:start="1:48" pos:end="1:51">void</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">data</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:73"><decl pos:start="1:60" pos:end="1:73"><type pos:start="1:60" pos:end="1:73"><name pos:start="1:60" pos:end="1:62">int</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:73">data_size</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:39"><decl pos:start="3:25" pos:end="3:39"><type pos:start="3:25" pos:end="3:39"><name pos:start="3:25" pos:end="3:32">AVPacket</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:39">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="162:1">{<block_content pos:start="7:5" pos:end="160:20">

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">IVI45DecContext</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:24">ctx</name> <init pos:start="7:26" pos:end="7:43">= <expr pos:start="7:28" pos:end="7:43"><name pos:start="7:28" pos:end="7:43"><name pos:start="7:28" pos:end="7:32">avctx</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:43">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:21"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name>   <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:24">buf</name> <init pos:start="9:26" pos:end="9:38">= <expr pos:start="9:28" pos:end="9:38"><name pos:start="9:28" pos:end="9:38"><name pos:start="9:28" pos:end="9:32">avpkt</name><operator pos:start="9:33" pos:end="9:34">-&gt;</operator><name pos:start="9:35" pos:end="9:38">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type>             <name pos:start="11:21" pos:end="11:28">buf_size</name> <init pos:start="11:30" pos:end="11:42">= <expr pos:start="11:32" pos:end="11:42"><name pos:start="11:32" pos:end="11:42"><name pos:start="11:32" pos:end="11:36">avpkt</name><operator pos:start="11:37" pos:end="11:38">-&gt;</operator><name pos:start="11:39" pos:end="11:42">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type>             <name pos:start="13:21" pos:end="13:26">result</name></decl>, <decl pos:start="13:29" pos:end="13:29"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:29" pos:end="13:29">p</name></decl>, <decl pos:start="13:32" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:32" pos:end="13:32">b</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:47"><expr pos:start="17:5" pos:end="17:46"><call pos:start="17:5" pos:end="17:46"><name pos:start="17:5" pos:end="17:17">init_get_bits</name><argument_list pos:start="17:18" pos:end="17:46">(<argument pos:start="17:19" pos:end="17:26"><expr pos:start="17:19" pos:end="17:26"><operator pos:start="17:19" pos:end="17:19">&amp;</operator><name pos:start="17:20" pos:end="17:26"><name pos:start="17:20" pos:end="17:22">ctx</name><operator pos:start="17:23" pos:end="17:24">-&gt;</operator><name pos:start="17:25" pos:end="17:26">gb</name></name></expr></argument>, <argument pos:start="17:29" pos:end="17:31"><expr pos:start="17:29" pos:end="17:31"><name pos:start="17:29" pos:end="17:31">buf</name></expr></argument>, <argument pos:start="17:34" pos:end="17:45"><expr pos:start="17:34" pos:end="17:45"><name pos:start="17:34" pos:end="17:41">buf_size</name> <operator pos:start="17:43" pos:end="17:43">*</operator> <literal type="number" pos:start="17:45" pos:end="17:45">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:26"><expr pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:7">ctx</name><operator pos:start="19:8" pos:end="19:9">-&gt;</operator><name pos:start="19:10" pos:end="19:19">frame_data</name></name> <operator pos:start="19:21" pos:end="19:21">=</operator> <name pos:start="19:23" pos:end="19:25">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:31"><expr pos:start="21:5" pos:end="21:30"><name pos:start="21:5" pos:end="21:19"><name pos:start="21:5" pos:end="21:7">ctx</name><operator pos:start="21:8" pos:end="21:9">-&gt;</operator><name pos:start="21:10" pos:end="21:19">frame_size</name></name> <operator pos:start="21:21" pos:end="21:21">=</operator> <name pos:start="21:23" pos:end="21:30">buf_size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:45"><expr pos:start="25:5" pos:end="25:44"><name pos:start="25:5" pos:end="25:10">result</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <call pos:start="25:14" pos:end="25:44"><name pos:start="25:14" pos:end="25:32"><name pos:start="25:14" pos:end="25:16">ctx</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:32">decode_pic_hdr</name></name><argument_list pos:start="25:33" pos:end="25:44">(<argument pos:start="25:34" pos:end="25:36"><expr pos:start="25:34" pos:end="25:36"><name pos:start="25:34" pos:end="25:36">ctx</name></expr></argument>, <argument pos:start="25:39" pos:end="25:43"><expr pos:start="25:39" pos:end="25:43"><name pos:start="25:39" pos:end="25:43">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:15">(<expr pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:14">result</name></expr>)</condition> <block pos:start="27:17" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:18">

        <expr_stmt pos:start="29:9" pos:end="31:68"><expr pos:start="29:9" pos:end="31:67"><call pos:start="29:9" pos:end="31:67"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="31:67">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="31:16" pos:end="31:58"><expr pos:start="31:16" pos:end="31:58"><literal type="string" pos:start="31:16" pos:end="31:58">"Error while decoding picture header: %d\n"</literal></expr></argument>, <argument pos:start="31:61" pos:end="31:66"><expr pos:start="31:61" pos:end="31:66"><name pos:start="31:61" pos:end="31:66">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:18">return <expr pos:start="33:16" pos:end="33:17"><operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="39:35"><if pos:start="37:5" pos:end="39:35">if <condition pos:start="37:8" pos:end="37:25">(<expr pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:11">ctx</name><operator pos:start="37:12" pos:end="37:13">-&gt;</operator><name pos:start="37:14" pos:end="37:24">gop_invalid</name></name></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:35"><block_content pos:start="39:9" pos:end="39:35">

        <return pos:start="39:9" pos:end="39:35">return <expr pos:start="39:16" pos:end="39:34"><name pos:start="39:16" pos:end="39:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:43">(<expr pos:start="43:9" pos:end="43:42"><name pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:11">ctx</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:22">gop_flags</name></name> <operator pos:start="43:24" pos:end="43:24">&amp;</operator> <name pos:start="43:26" pos:end="43:42">IVI5_IS_PROTECTED</name></expr>)</condition> <block pos:start="43:45" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:18">

        <expr_stmt pos:start="45:9" pos:end="45:66"><expr pos:start="45:9" pos:end="45:65"><call pos:start="45:9" pos:end="45:65"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="45:65">(<argument pos:start="45:16" pos:end="45:20"><expr pos:start="45:16" pos:end="45:20"><name pos:start="45:16" pos:end="45:20">avctx</name></expr></argument>, <argument pos:start="45:23" pos:end="45:34"><expr pos:start="45:23" pos:end="45:34"><name pos:start="45:23" pos:end="45:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:37" pos:end="45:64"><expr pos:start="45:37" pos:end="45:64"><literal type="string" pos:start="45:37" pos:end="45:64">"Password-protected clip!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:18">return <expr pos:start="47:16" pos:end="47:17"><operator pos:start="47:16" pos:end="47:16">-</operator><literal type="number" pos:start="47:17" pos:end="47:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:29"><expr pos:start="53:5" pos:end="53:28"><call pos:start="53:5" pos:end="53:28"><name pos:start="53:5" pos:end="53:23"><name pos:start="53:5" pos:end="53:7">ctx</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:23">switch_buffers</name></name><argument_list pos:start="53:24" pos:end="53:28">(<argument pos:start="53:25" pos:end="53:27"><expr pos:start="53:25" pos:end="53:27"><name pos:start="53:25" pos:end="53:27">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="57:5" pos:end="57:20">//{ START_TIMER;</comment>



    <if_stmt pos:start="61:5" pos:end="83:5"><if pos:start="61:5" pos:end="83:5">if <condition pos:start="61:8" pos:end="61:35">(<expr pos:start="61:9" pos:end="61:34"><call pos:start="61:9" pos:end="61:34"><name pos:start="61:9" pos:end="61:29"><name pos:start="61:9" pos:end="61:11">ctx</name><operator pos:start="61:12" pos:end="61:13">-&gt;</operator><name pos:start="61:14" pos:end="61:29">is_nonnull_frame</name></name><argument_list pos:start="61:30" pos:end="61:34">(<argument pos:start="61:31" pos:end="61:33"><expr pos:start="61:31" pos:end="61:33"><name pos:start="61:31" pos:end="61:33">ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:37" pos:end="83:5">{<block_content pos:start="63:9" pos:end="81:9">

        <for pos:start="63:9" pos:end="81:9">for <control pos:start="63:13" pos:end="63:31">(<init pos:start="63:14" pos:end="63:19"><expr pos:start="63:14" pos:end="63:18"><name pos:start="63:14" pos:end="63:14">p</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <literal type="number" pos:start="63:18" pos:end="63:18">0</literal></expr>;</init> <condition pos:start="63:21" pos:end="63:26"><expr pos:start="63:21" pos:end="63:25"><name pos:start="63:21" pos:end="63:21">p</name> <operator pos:start="63:23" pos:end="63:23">&lt;</operator> <literal type="number" pos:start="63:25" pos:end="63:25">3</literal></expr>;</condition> <incr pos:start="63:28" pos:end="63:30"><expr pos:start="63:28" pos:end="63:30"><name pos:start="63:28" pos:end="63:28">p</name><operator pos:start="63:29" pos:end="63:30">++</operator></expr></incr>)</control> <block pos:start="63:33" pos:end="81:9">{<block_content pos:start="65:13" pos:end="79:13">

            <for pos:start="65:13" pos:end="79:13">for <control pos:start="65:17" pos:end="65:58">(<init pos:start="65:18" pos:end="65:23"><expr pos:start="65:18" pos:end="65:22"><name pos:start="65:18" pos:end="65:18">b</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <literal type="number" pos:start="65:22" pos:end="65:22">0</literal></expr>;</init> <condition pos:start="65:25" pos:end="65:53"><expr pos:start="65:25" pos:end="65:52"><name pos:start="65:25" pos:end="65:25">b</name> <operator pos:start="65:27" pos:end="65:27">&lt;</operator> <name pos:start="65:29" pos:end="65:42"><name pos:start="65:29" pos:end="65:31">ctx</name><operator pos:start="65:32" pos:end="65:33">-&gt;</operator><name pos:start="65:34" pos:end="65:39">planes</name><index pos:start="65:40" pos:end="65:42">[<expr pos:start="65:41" pos:end="65:41"><name pos:start="65:41" pos:end="65:41">p</name></expr>]</index></name><operator pos:start="65:43" pos:end="65:43">.</operator><name pos:start="65:44" pos:end="65:52">num_bands</name></expr>;</condition> <incr pos:start="65:55" pos:end="65:57"><expr pos:start="65:55" pos:end="65:57"><name pos:start="65:55" pos:end="65:55">b</name><operator pos:start="65:56" pos:end="65:57">++</operator></expr></incr>)</control> <block pos:start="65:60" pos:end="79:13">{<block_content pos:start="67:17" pos:end="77:17">

                <expr_stmt pos:start="67:17" pos:end="67:78"><expr pos:start="67:17" pos:end="67:77"><name pos:start="67:17" pos:end="67:22">result</name> <operator pos:start="67:24" pos:end="67:24">=</operator> <call pos:start="67:26" pos:end="67:77"><name pos:start="67:26" pos:end="67:36">decode_band</name><argument_list pos:start="67:37" pos:end="67:77">(<argument pos:start="67:38" pos:end="67:40"><expr pos:start="67:38" pos:end="67:40"><name pos:start="67:38" pos:end="67:40">ctx</name></expr></argument>, <argument pos:start="67:43" pos:end="67:43"><expr pos:start="67:43" pos:end="67:43"><name pos:start="67:43" pos:end="67:43">p</name></expr></argument>, <argument pos:start="67:46" pos:end="67:69"><expr pos:start="67:46" pos:end="67:69"><operator pos:start="67:46" pos:end="67:46">&amp;</operator><name pos:start="67:47" pos:end="67:60"><name pos:start="67:47" pos:end="67:49">ctx</name><operator pos:start="67:50" pos:end="67:51">-&gt;</operator><name pos:start="67:52" pos:end="67:57">planes</name><index pos:start="67:58" pos:end="67:60">[<expr pos:start="67:59" pos:end="67:59"><name pos:start="67:59" pos:end="67:59">p</name></expr>]</index></name><operator pos:start="67:61" pos:end="67:61">.</operator><name pos:start="67:62" pos:end="67:69"><name pos:start="67:62" pos:end="67:66">bands</name><index pos:start="67:67" pos:end="67:69">[<expr pos:start="67:68" pos:end="67:68"><name pos:start="67:68" pos:end="67:68">b</name></expr>]</index></name></expr></argument>, <argument pos:start="67:72" pos:end="67:76"><expr pos:start="67:72" pos:end="67:76"><name pos:start="67:72" pos:end="67:76">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="69:17" pos:end="77:17"><if pos:start="69:17" pos:end="77:17">if <condition pos:start="69:20" pos:end="69:27">(<expr pos:start="69:21" pos:end="69:26"><name pos:start="69:21" pos:end="69:26">result</name></expr>)</condition> <block pos:start="69:29" pos:end="77:17">{<block_content pos:start="71:21" pos:end="75:30">

                    <expr_stmt pos:start="71:21" pos:end="73:79"><expr pos:start="71:21" pos:end="73:78"><call pos:start="71:21" pos:end="73:78"><name pos:start="71:21" pos:end="71:26">av_log</name><argument_list pos:start="71:27" pos:end="73:78">(<argument pos:start="71:28" pos:end="71:32"><expr pos:start="71:28" pos:end="71:32"><name pos:start="71:28" pos:end="71:32">avctx</name></expr></argument>, <argument pos:start="71:35" pos:end="71:46"><expr pos:start="71:35" pos:end="71:46"><name pos:start="71:35" pos:end="71:46">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="73:28" pos:end="73:71"><expr pos:start="73:28" pos:end="73:71"><literal type="string" pos:start="73:28" pos:end="73:71">"Error while decoding band: %d, plane: %d\n"</literal></expr></argument>, <argument pos:start="73:74" pos:end="73:74"><expr pos:start="73:74" pos:end="73:74"><name pos:start="73:74" pos:end="73:74">b</name></expr></argument>, <argument pos:start="73:77" pos:end="73:77"><expr pos:start="73:77" pos:end="73:77"><name pos:start="73:77" pos:end="73:77">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="75:21" pos:end="75:30">return <expr pos:start="75:28" pos:end="75:29"><operator pos:start="75:28" pos:end="75:28">-</operator><literal type="number" pos:start="75:29" pos:end="75:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="87:5" pos:end="87:36">//STOP_TIMER("decode_planes"); }</comment>



    <comment type="block" pos:start="91:5" pos:end="91:85">/* If the bidirectional mode is enabled, next I and the following P frame will */</comment>

    <comment type="block" pos:start="93:5" pos:end="93:85">/* be sent together. Unfortunately the approach below seems to be the only way */</comment>

    <comment type="block" pos:start="95:5" pos:end="95:85">/* to handle the B-frames mode. That's exactly the same Intel decoders do.     */</comment>

    <if_stmt pos:start="97:5" pos:end="107:5"><if pos:start="97:5" pos:end="107:5">if <condition pos:start="97:8" pos:end="97:89">(<expr pos:start="97:9" pos:end="97:69"><name pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:13">avctx</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:23">codec_id</name></name> <operator pos:start="97:25" pos:end="97:26">==</operator> <name pos:start="97:28" pos:end="97:45">AV_CODEC_ID_INDEO4</name> <operator pos:start="97:47" pos:end="97:48">&amp;&amp;</operator> <name pos:start="97:50" pos:end="97:64"><name pos:start="97:50" pos:end="97:52">ctx</name><operator pos:start="97:53" pos:end="97:54">-&gt;</operator><name pos:start="97:55" pos:end="97:64">frame_type</name></name> <operator pos:start="97:66" pos:end="97:67">==</operator> <literal type="number" pos:start="97:69" pos:end="97:69">0</literal></expr><comment type="block" pos:start="97:70" pos:end="97:88">/*FRAMETYPE_INTRA*/</comment>)</condition> <block pos:start="97:91" pos:end="107:5">{<block_content pos:start="99:9" pos:end="105:72">

        <while pos:start="99:9" pos:end="99:38">while <condition pos:start="99:15" pos:end="99:37">(<expr pos:start="99:16" pos:end="99:36"><call pos:start="99:16" pos:end="99:36"><name pos:start="99:16" pos:end="99:23">get_bits</name><argument_list pos:start="99:24" pos:end="99:36">(<argument pos:start="99:25" pos:end="99:32"><expr pos:start="99:25" pos:end="99:32"><operator pos:start="99:25" pos:end="99:25">&amp;</operator><name pos:start="99:26" pos:end="99:32"><name pos:start="99:26" pos:end="99:28">ctx</name><operator pos:start="99:29" pos:end="99:30">-&gt;</operator><name pos:start="99:31" pos:end="99:32">gb</name></name></expr></argument>, <argument pos:start="99:35" pos:end="99:35"><expr pos:start="99:35" pos:end="99:35"><literal type="number" pos:start="99:35" pos:end="99:35">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="99:38" pos:end="99:38"><block_content pos:start="99:38" pos:end="99:38"><empty_stmt pos:start="99:38" pos:end="99:38">;</empty_stmt></block_content></block></while> <comment type="line" pos:start="99:40" pos:end="99:61">// skip version string</comment>

        <expr_stmt pos:start="101:9" pos:end="101:37"><expr pos:start="101:9" pos:end="101:36"><call pos:start="101:9" pos:end="101:36"><name pos:start="101:9" pos:end="101:22">skip_bits_long</name><argument_list pos:start="101:23" pos:end="101:36">(<argument pos:start="101:24" pos:end="101:31"><expr pos:start="101:24" pos:end="101:31"><operator pos:start="101:24" pos:end="101:24">&amp;</operator><name pos:start="101:25" pos:end="101:31"><name pos:start="101:25" pos:end="101:27">ctx</name><operator pos:start="101:28" pos:end="101:29">-&gt;</operator><name pos:start="101:30" pos:end="101:31">gb</name></name></expr></argument>, <argument pos:start="101:34" pos:end="101:35"><expr pos:start="101:34" pos:end="101:35"><literal type="number" pos:start="101:34" pos:end="101:35">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="101:40" pos:end="101:97">// skip padding, TODO: implement correct 8-bytes alignment</comment>

        <if_stmt pos:start="103:9" pos:end="105:72"><if pos:start="103:9" pos:end="105:72">if <condition pos:start="103:12" pos:end="103:79">(<expr pos:start="103:13" pos:end="103:78"><call pos:start="103:13" pos:end="103:35"><name pos:start="103:13" pos:end="103:25">get_bits_left</name><argument_list pos:start="103:26" pos:end="103:35">(<argument pos:start="103:27" pos:end="103:34"><expr pos:start="103:27" pos:end="103:34"><operator pos:start="103:27" pos:end="103:27">&amp;</operator><name pos:start="103:28" pos:end="103:34"><name pos:start="103:28" pos:end="103:30">ctx</name><operator pos:start="103:31" pos:end="103:32">-&gt;</operator><name pos:start="103:33" pos:end="103:34">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="103:37" pos:end="103:37">&gt;</operator> <literal type="number" pos:start="103:39" pos:end="103:40">18</literal> <operator pos:start="103:42" pos:end="103:43">&amp;&amp;</operator> <call pos:start="103:45" pos:end="103:67"><name pos:start="103:45" pos:end="103:53">show_bits</name><argument_list pos:start="103:54" pos:end="103:67">(<argument pos:start="103:55" pos:end="103:62"><expr pos:start="103:55" pos:end="103:62"><operator pos:start="103:55" pos:end="103:55">&amp;</operator><name pos:start="103:56" pos:end="103:62"><name pos:start="103:56" pos:end="103:58">ctx</name><operator pos:start="103:59" pos:end="103:60">-&gt;</operator><name pos:start="103:61" pos:end="103:62">gb</name></name></expr></argument>, <argument pos:start="103:65" pos:end="103:66"><expr pos:start="103:65" pos:end="103:66"><literal type="number" pos:start="103:65" pos:end="103:66">18</literal></expr></argument>)</argument_list></call> <operator pos:start="103:69" pos:end="103:70">==</operator> <literal type="number" pos:start="103:72" pos:end="103:78">0x3FFF8</literal></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:72"><block_content pos:start="105:13" pos:end="105:72">

            <expr_stmt pos:start="105:13" pos:end="105:72"><expr pos:start="105:13" pos:end="105:71"><call pos:start="105:13" pos:end="105:71"><name pos:start="105:13" pos:end="105:18">av_log</name><argument_list pos:start="105:19" pos:end="105:71">(<argument pos:start="105:20" pos:end="105:24"><expr pos:start="105:20" pos:end="105:24"><name pos:start="105:20" pos:end="105:24">avctx</name></expr></argument>, <argument pos:start="105:27" pos:end="105:38"><expr pos:start="105:27" pos:end="105:38"><name pos:start="105:27" pos:end="105:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="105:41" pos:end="105:70"><expr pos:start="105:41" pos:end="105:70"><literal type="string" pos:start="105:41" pos:end="105:70">"Buffer contains IP frames!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="113:50"><if pos:start="111:5" pos:end="113:50">if <condition pos:start="111:8" pos:end="111:27">(<expr pos:start="111:9" pos:end="111:26"><name pos:start="111:9" pos:end="111:26"><name pos:start="111:9" pos:end="111:11">ctx</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:18">frame</name><operator pos:start="111:19" pos:end="111:19">.</operator><name pos:start="111:20" pos:end="111:23">data</name><index pos:start="111:24" pos:end="111:26">[<expr pos:start="111:25" pos:end="111:25"><literal type="number" pos:start="111:25" pos:end="111:25">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="113:9" pos:end="113:50"><block_content pos:start="113:9" pos:end="113:50">

        <expr_stmt pos:start="113:9" pos:end="113:50"><expr pos:start="113:9" pos:end="113:49"><call pos:start="113:9" pos:end="113:49"><name pos:start="113:9" pos:end="113:29"><name pos:start="113:9" pos:end="113:13">avctx</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:29">release_buffer</name></name><argument_list pos:start="113:30" pos:end="113:49">(<argument pos:start="113:31" pos:end="113:35"><expr pos:start="113:31" pos:end="113:35"><name pos:start="113:31" pos:end="113:35">avctx</name></expr></argument>, <argument pos:start="113:38" pos:end="113:48"><expr pos:start="113:38" pos:end="113:48"><operator pos:start="113:38" pos:end="113:38">&amp;</operator><name pos:start="113:39" pos:end="113:48"><name pos:start="113:39" pos:end="113:41">ctx</name><operator pos:start="113:42" pos:end="113:43">-&gt;</operator><name pos:start="113:44" pos:end="113:48">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:29"><expr pos:start="117:5" pos:end="117:28"><name pos:start="117:5" pos:end="117:24"><name pos:start="117:5" pos:end="117:7">ctx</name><operator pos:start="117:8" pos:end="117:9">-&gt;</operator><name pos:start="117:10" pos:end="117:14">frame</name><operator pos:start="117:15" pos:end="117:15">.</operator><name pos:start="117:16" pos:end="117:24">reference</name></name> <operator pos:start="117:26" pos:end="117:26">=</operator> <literal type="number" pos:start="117:28" pos:end="117:28">0</literal></expr>;</expr_stmt>


    <if_stmt pos:start="120:5" pos:end="126:5"><if pos:start="120:5" pos:end="126:5">if <condition pos:start="120:8" pos:end="120:61">(<expr pos:start="120:9" pos:end="120:60"><operator pos:start="120:9" pos:end="120:9">(</operator><name pos:start="120:10" pos:end="120:15">result</name> <operator pos:start="120:17" pos:end="120:17">=</operator> <call pos:start="120:19" pos:end="120:55"><name pos:start="120:19" pos:end="120:35"><name pos:start="120:19" pos:end="120:23">avctx</name><operator pos:start="120:24" pos:end="120:25">-&gt;</operator><name pos:start="120:26" pos:end="120:35">get_buffer</name></name><argument_list pos:start="120:36" pos:end="120:55">(<argument pos:start="120:37" pos:end="120:41"><expr pos:start="120:37" pos:end="120:41"><name pos:start="120:37" pos:end="120:41">avctx</name></expr></argument>, <argument pos:start="120:44" pos:end="120:54"><expr pos:start="120:44" pos:end="120:54"><operator pos:start="120:44" pos:end="120:44">&amp;</operator><name pos:start="120:45" pos:end="120:54"><name pos:start="120:45" pos:end="120:47">ctx</name><operator pos:start="120:48" pos:end="120:49">-&gt;</operator><name pos:start="120:50" pos:end="120:54">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="120:56" pos:end="120:56">)</operator> <operator pos:start="120:58" pos:end="120:58">&lt;</operator> <literal type="number" pos:start="120:60" pos:end="120:60">0</literal></expr>)</condition> <block pos:start="120:63" pos:end="126:5">{<block_content pos:start="122:9" pos:end="124:22">

        <expr_stmt pos:start="122:9" pos:end="122:61"><expr pos:start="122:9" pos:end="122:60"><call pos:start="122:9" pos:end="122:60"><name pos:start="122:9" pos:end="122:14">av_log</name><argument_list pos:start="122:15" pos:end="122:60">(<argument pos:start="122:16" pos:end="122:20"><expr pos:start="122:16" pos:end="122:20"><name pos:start="122:16" pos:end="122:20">avctx</name></expr></argument>, <argument pos:start="122:23" pos:end="122:34"><expr pos:start="122:23" pos:end="122:34"><name pos:start="122:23" pos:end="122:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="122:37" pos:end="122:59"><expr pos:start="122:37" pos:end="122:59"><literal type="string" pos:start="122:37" pos:end="122:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="124:9" pos:end="124:22">return <expr pos:start="124:16" pos:end="124:21"><name pos:start="124:16" pos:end="124:21">result</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="130:5" pos:end="144:5"><if pos:start="130:5" pos:end="140:5">if <condition pos:start="130:8" pos:end="130:25">(<expr pos:start="130:9" pos:end="130:24"><name pos:start="130:9" pos:end="130:24"><name pos:start="130:9" pos:end="130:11">ctx</name><operator pos:start="130:12" pos:end="130:13">-&gt;</operator><name pos:start="130:14" pos:end="130:24">is_scalable</name></name></expr>)</condition> <block pos:start="130:27" pos:end="140:5">{<block_content pos:start="132:9" pos:end="138:98">

        <if_stmt pos:start="132:9" pos:end="138:98"><if pos:start="132:9" pos:end="134:98">if <condition pos:start="132:12" pos:end="132:50">(<expr pos:start="132:13" pos:end="132:49"><name pos:start="132:13" pos:end="132:27"><name pos:start="132:13" pos:end="132:17">avctx</name><operator pos:start="132:18" pos:end="132:19">-&gt;</operator><name pos:start="132:20" pos:end="132:27">codec_id</name></name> <operator pos:start="132:29" pos:end="132:30">==</operator> <name pos:start="132:32" pos:end="132:49">AV_CODEC_ID_INDEO4</name></expr>)</condition><block type="pseudo" pos:start="134:13" pos:end="134:98"><block_content pos:start="134:13" pos:end="134:98">

            <expr_stmt pos:start="134:13" pos:end="134:98"><expr pos:start="134:13" pos:end="134:97"><call pos:start="134:13" pos:end="134:97"><name pos:start="134:13" pos:end="134:33">ff_ivi_recompose_haar</name><argument_list pos:start="134:34" pos:end="134:97">(<argument pos:start="134:35" pos:end="134:49"><expr pos:start="134:35" pos:end="134:49"><operator pos:start="134:35" pos:end="134:35">&amp;</operator><name pos:start="134:36" pos:end="134:49"><name pos:start="134:36" pos:end="134:38">ctx</name><operator pos:start="134:39" pos:end="134:40">-&gt;</operator><name pos:start="134:41" pos:end="134:46">planes</name><index pos:start="134:47" pos:end="134:49">[<expr pos:start="134:48" pos:end="134:48"><literal type="number" pos:start="134:48" pos:end="134:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="134:52" pos:end="134:69"><expr pos:start="134:52" pos:end="134:69"><name pos:start="134:52" pos:end="134:69"><name pos:start="134:52" pos:end="134:54">ctx</name><operator pos:start="134:55" pos:end="134:56">-&gt;</operator><name pos:start="134:57" pos:end="134:61">frame</name><operator pos:start="134:62" pos:end="134:62">.</operator><name pos:start="134:63" pos:end="134:66">data</name><index pos:start="134:67" pos:end="134:69">[<expr pos:start="134:68" pos:end="134:68"><literal type="number" pos:start="134:68" pos:end="134:68">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="134:72" pos:end="134:93"><expr pos:start="134:72" pos:end="134:93"><name pos:start="134:72" pos:end="134:93"><name pos:start="134:72" pos:end="134:74">ctx</name><operator pos:start="134:75" pos:end="134:76">-&gt;</operator><name pos:start="134:77" pos:end="134:81">frame</name><operator pos:start="134:82" pos:end="134:82">.</operator><name pos:start="134:83" pos:end="134:90">linesize</name><index pos:start="134:91" pos:end="134:93">[<expr pos:start="134:92" pos:end="134:92"><literal type="number" pos:start="134:92" pos:end="134:92">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="134:96" pos:end="134:96"><expr pos:start="134:96" pos:end="134:96"><literal type="number" pos:start="134:96" pos:end="134:96">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="136:9" pos:end="138:98">else<block type="pseudo" pos:start="138:13" pos:end="138:98"><block_content pos:start="138:13" pos:end="138:98">

            <expr_stmt pos:start="138:13" pos:end="138:98"><expr pos:start="138:13" pos:end="138:97"><call pos:start="138:13" pos:end="138:97"><name pos:start="138:13" pos:end="138:30">ff_ivi_recompose53</name>   <argument_list pos:start="138:34" pos:end="138:97">(<argument pos:start="138:35" pos:end="138:49"><expr pos:start="138:35" pos:end="138:49"><operator pos:start="138:35" pos:end="138:35">&amp;</operator><name pos:start="138:36" pos:end="138:49"><name pos:start="138:36" pos:end="138:38">ctx</name><operator pos:start="138:39" pos:end="138:40">-&gt;</operator><name pos:start="138:41" pos:end="138:46">planes</name><index pos:start="138:47" pos:end="138:49">[<expr pos:start="138:48" pos:end="138:48"><literal type="number" pos:start="138:48" pos:end="138:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="138:52" pos:end="138:69"><expr pos:start="138:52" pos:end="138:69"><name pos:start="138:52" pos:end="138:69"><name pos:start="138:52" pos:end="138:54">ctx</name><operator pos:start="138:55" pos:end="138:56">-&gt;</operator><name pos:start="138:57" pos:end="138:61">frame</name><operator pos:start="138:62" pos:end="138:62">.</operator><name pos:start="138:63" pos:end="138:66">data</name><index pos:start="138:67" pos:end="138:69">[<expr pos:start="138:68" pos:end="138:68"><literal type="number" pos:start="138:68" pos:end="138:68">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="138:72" pos:end="138:93"><expr pos:start="138:72" pos:end="138:93"><name pos:start="138:72" pos:end="138:93"><name pos:start="138:72" pos:end="138:74">ctx</name><operator pos:start="138:75" pos:end="138:76">-&gt;</operator><name pos:start="138:77" pos:end="138:81">frame</name><operator pos:start="138:82" pos:end="138:82">.</operator><name pos:start="138:83" pos:end="138:90">linesize</name><index pos:start="138:91" pos:end="138:93">[<expr pos:start="138:92" pos:end="138:92"><literal type="number" pos:start="138:92" pos:end="138:92">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="138:96" pos:end="138:96"><expr pos:start="138:96" pos:end="138:96"><literal type="number" pos:start="138:96" pos:end="138:96">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="140:7" pos:end="144:5">else <block pos:start="140:12" pos:end="144:5">{<block_content pos:start="142:9" pos:end="142:89">

        <expr_stmt pos:start="142:9" pos:end="142:89"><expr pos:start="142:9" pos:end="142:88"><call pos:start="142:9" pos:end="142:88"><name pos:start="142:9" pos:end="142:27">ff_ivi_output_plane</name><argument_list pos:start="142:28" pos:end="142:88">(<argument pos:start="142:29" pos:end="142:43"><expr pos:start="142:29" pos:end="142:43"><operator pos:start="142:29" pos:end="142:29">&amp;</operator><name pos:start="142:30" pos:end="142:43"><name pos:start="142:30" pos:end="142:32">ctx</name><operator pos:start="142:33" pos:end="142:34">-&gt;</operator><name pos:start="142:35" pos:end="142:40">planes</name><index pos:start="142:41" pos:end="142:43">[<expr pos:start="142:42" pos:end="142:42"><literal type="number" pos:start="142:42" pos:end="142:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="142:46" pos:end="142:63"><expr pos:start="142:46" pos:end="142:63"><name pos:start="142:46" pos:end="142:63"><name pos:start="142:46" pos:end="142:48">ctx</name><operator pos:start="142:49" pos:end="142:50">-&gt;</operator><name pos:start="142:51" pos:end="142:55">frame</name><operator pos:start="142:56" pos:end="142:56">.</operator><name pos:start="142:57" pos:end="142:60">data</name><index pos:start="142:61" pos:end="142:63">[<expr pos:start="142:62" pos:end="142:62"><literal type="number" pos:start="142:62" pos:end="142:62">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="142:66" pos:end="142:87"><expr pos:start="142:66" pos:end="142:87"><name pos:start="142:66" pos:end="142:87"><name pos:start="142:66" pos:end="142:68">ctx</name><operator pos:start="142:69" pos:end="142:70">-&gt;</operator><name pos:start="142:71" pos:end="142:75">frame</name><operator pos:start="142:76" pos:end="142:76">.</operator><name pos:start="142:77" pos:end="142:84">linesize</name><index pos:start="142:85" pos:end="142:87">[<expr pos:start="142:86" pos:end="142:86"><literal type="number" pos:start="142:86" pos:end="142:86">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="148:5" pos:end="148:85"><expr pos:start="148:5" pos:end="148:84"><call pos:start="148:5" pos:end="148:84"><name pos:start="148:5" pos:end="148:23">ff_ivi_output_plane</name><argument_list pos:start="148:24" pos:end="148:84">(<argument pos:start="148:25" pos:end="148:39"><expr pos:start="148:25" pos:end="148:39"><operator pos:start="148:25" pos:end="148:25">&amp;</operator><name pos:start="148:26" pos:end="148:39"><name pos:start="148:26" pos:end="148:28">ctx</name><operator pos:start="148:29" pos:end="148:30">-&gt;</operator><name pos:start="148:31" pos:end="148:36">planes</name><index pos:start="148:37" pos:end="148:39">[<expr pos:start="148:38" pos:end="148:38"><literal type="number" pos:start="148:38" pos:end="148:38">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="148:42" pos:end="148:59"><expr pos:start="148:42" pos:end="148:59"><name pos:start="148:42" pos:end="148:59"><name pos:start="148:42" pos:end="148:44">ctx</name><operator pos:start="148:45" pos:end="148:46">-&gt;</operator><name pos:start="148:47" pos:end="148:51">frame</name><operator pos:start="148:52" pos:end="148:52">.</operator><name pos:start="148:53" pos:end="148:56">data</name><index pos:start="148:57" pos:end="148:59">[<expr pos:start="148:58" pos:end="148:58"><literal type="number" pos:start="148:58" pos:end="148:58">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="148:62" pos:end="148:83"><expr pos:start="148:62" pos:end="148:83"><name pos:start="148:62" pos:end="148:83"><name pos:start="148:62" pos:end="148:64">ctx</name><operator pos:start="148:65" pos:end="148:66">-&gt;</operator><name pos:start="148:67" pos:end="148:71">frame</name><operator pos:start="148:72" pos:end="148:72">.</operator><name pos:start="148:73" pos:end="148:80">linesize</name><index pos:start="148:81" pos:end="148:83">[<expr pos:start="148:82" pos:end="148:82"><literal type="number" pos:start="148:82" pos:end="148:82">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="150:5" pos:end="150:85"><expr pos:start="150:5" pos:end="150:84"><call pos:start="150:5" pos:end="150:84"><name pos:start="150:5" pos:end="150:23">ff_ivi_output_plane</name><argument_list pos:start="150:24" pos:end="150:84">(<argument pos:start="150:25" pos:end="150:39"><expr pos:start="150:25" pos:end="150:39"><operator pos:start="150:25" pos:end="150:25">&amp;</operator><name pos:start="150:26" pos:end="150:39"><name pos:start="150:26" pos:end="150:28">ctx</name><operator pos:start="150:29" pos:end="150:30">-&gt;</operator><name pos:start="150:31" pos:end="150:36">planes</name><index pos:start="150:37" pos:end="150:39">[<expr pos:start="150:38" pos:end="150:38"><literal type="number" pos:start="150:38" pos:end="150:38">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="150:42" pos:end="150:59"><expr pos:start="150:42" pos:end="150:59"><name pos:start="150:42" pos:end="150:59"><name pos:start="150:42" pos:end="150:44">ctx</name><operator pos:start="150:45" pos:end="150:46">-&gt;</operator><name pos:start="150:47" pos:end="150:51">frame</name><operator pos:start="150:52" pos:end="150:52">.</operator><name pos:start="150:53" pos:end="150:56">data</name><index pos:start="150:57" pos:end="150:59">[<expr pos:start="150:58" pos:end="150:58"><literal type="number" pos:start="150:58" pos:end="150:58">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="150:62" pos:end="150:83"><expr pos:start="150:62" pos:end="150:83"><name pos:start="150:62" pos:end="150:83"><name pos:start="150:62" pos:end="150:64">ctx</name><operator pos:start="150:65" pos:end="150:66">-&gt;</operator><name pos:start="150:67" pos:end="150:71">frame</name><operator pos:start="150:72" pos:end="150:72">.</operator><name pos:start="150:73" pos:end="150:80">linesize</name><index pos:start="150:81" pos:end="150:83">[<expr pos:start="150:82" pos:end="150:82"><literal type="number" pos:start="150:82" pos:end="150:82">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="154:5" pos:end="154:33"><expr pos:start="154:5" pos:end="154:32"><operator pos:start="154:5" pos:end="154:5">*</operator><name pos:start="154:6" pos:end="154:14">data_size</name> <operator pos:start="154:16" pos:end="154:16">=</operator> <sizeof pos:start="154:18" pos:end="154:32">sizeof<argument_list pos:start="154:24" pos:end="154:32">(<argument pos:start="154:25" pos:end="154:31"><expr pos:start="154:25" pos:end="154:31"><name pos:start="154:25" pos:end="154:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="156:5" pos:end="156:33"><expr pos:start="156:5" pos:end="156:32"><operator pos:start="156:5" pos:end="156:5">*</operator><operator pos:start="156:6" pos:end="156:6">(</operator><name pos:start="156:7" pos:end="156:13">AVFrame</name><operator pos:start="156:14" pos:end="156:14">*</operator><operator pos:start="156:15" pos:end="156:15">)</operator><name pos:start="156:16" pos:end="156:19">data</name> <operator pos:start="156:21" pos:end="156:21">=</operator> <name pos:start="156:23" pos:end="156:32"><name pos:start="156:23" pos:end="156:25">ctx</name><operator pos:start="156:26" pos:end="156:27">-&gt;</operator><name pos:start="156:28" pos:end="156:32">frame</name></name></expr>;</expr_stmt>



    <return pos:start="160:5" pos:end="160:20">return <expr pos:start="160:12" pos:end="160:19"><name pos:start="160:12" pos:end="160:19">buf_size</name></expr>;</return>

</block_content>}</block></function></unit>
