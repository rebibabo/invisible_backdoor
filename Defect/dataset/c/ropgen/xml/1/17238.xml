<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17238.c" pos:tabs="8"><function pos:start="1:1" pos:end="52:81"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">smacker_decode_tree</name><parameter_list pos:start="1:31" pos:end="1:95">(<parameter pos:start="1:32" pos:end="1:48"><decl pos:start="1:32" pos:end="1:48"><type pos:start="1:32" pos:end="1:48"><name pos:start="1:32" pos:end="1:44">GetBitContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">gb</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:61">HuffContext</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:65">hc</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:82"><decl pos:start="1:68" pos:end="1:82"><type pos:start="1:68" pos:end="1:82"><name pos:start="1:68" pos:end="1:75">uint32_t</name></type> <name pos:start="1:77" pos:end="1:82">prefix</name></decl></parameter>, <parameter pos:start="1:85" pos:end="1:94"><decl pos:start="1:85" pos:end="1:94"><type pos:start="1:85" pos:end="1:94"><name pos:start="1:85" pos:end="1:87">int</name></type> <name pos:start="1:89" pos:end="1:94">length</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="52:81">{<block_content pos:start="9:5" pos:end="52:81">





    <if_stmt pos:start="9:5" pos:end="52:81"><if pos:start="9:5" pos:end="52:81">if<condition pos:start="9:7" pos:end="9:22">(<expr pos:start="9:8" pos:end="9:21"><operator pos:start="9:8" pos:end="9:8">!</operator><call pos:start="9:9" pos:end="9:21"><name pos:start="9:9" pos:end="9:17">get_bits1</name><argument_list pos:start="9:18" pos:end="9:21">(<argument pos:start="9:19" pos:end="9:20"><expr pos:start="9:19" pos:end="9:20"><name pos:start="9:19" pos:end="9:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="9:23" pos:end="52:81">{<block_content pos:start="11:9" pos:end="52:81"> <comment type="line" pos:start="9:25" pos:end="9:30">//Leaf</comment>

        <if_stmt pos:start="11:9" pos:end="52:81"><if pos:start="11:9" pos:end="52:81">if<condition pos:start="11:11" pos:end="11:30">(<expr pos:start="11:12" pos:end="11:29"><name pos:start="11:12" pos:end="11:22"><name pos:start="11:12" pos:end="11:13">hc</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:22">current</name></name> <operator pos:start="11:24" pos:end="11:25">&gt;=</operator> <literal type="number" pos:start="11:27" pos:end="11:29">256</literal></expr>)</condition><block pos:start="11:31" pos:end="52:81">{<block_content pos:start="13:13" pos:end="52:81">

            <expr_stmt pos:start="13:13" pos:end="13:64"><expr pos:start="13:13" pos:end="13:63"><call pos:start="13:13" pos:end="13:63"><name pos:start="13:13" pos:end="13:18">av_log</name><argument_list pos:start="13:19" pos:end="13:63">(<argument pos:start="13:20" pos:end="13:23"><expr pos:start="13:20" pos:end="13:23"><name pos:start="13:20" pos:end="13:23">NULL</name></expr></argument>, <argument pos:start="13:26" pos:end="13:37"><expr pos:start="13:26" pos:end="13:37"><name pos:start="13:26" pos:end="13:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="13:40" pos:end="13:62"><expr pos:start="13:40" pos:end="13:62"><literal type="string" pos:start="13:40" pos:end="13:62">"Tree size exceeded!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="17:9" pos:end="40:5"><if pos:start="17:9" pos:end="23:9">if<condition pos:start="17:11" pos:end="17:18">(<expr pos:start="17:12" pos:end="17:17"><name pos:start="17:12" pos:end="17:17">length</name></expr>)</condition><block pos:start="17:19" pos:end="23:9">{<block_content pos:start="19:13" pos:end="21:46">

            <expr_stmt pos:start="19:13" pos:end="19:43"><expr pos:start="19:13" pos:end="19:42"><name pos:start="19:13" pos:end="19:33"><name pos:start="19:13" pos:end="19:14">hc</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:20">bits</name><index pos:start="19:21" pos:end="19:33">[<expr pos:start="19:22" pos:end="19:32"><name pos:start="19:22" pos:end="19:32"><name pos:start="19:22" pos:end="19:23">hc</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:32">current</name></name></expr>]</index></name> <operator pos:start="19:35" pos:end="19:35">=</operator> <name pos:start="19:37" pos:end="19:42">prefix</name></expr>;</expr_stmt>

            <expr_stmt pos:start="21:13" pos:end="21:46"><expr pos:start="21:13" pos:end="21:45"><name pos:start="21:13" pos:end="21:36"><name pos:start="21:13" pos:end="21:14">hc</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:23">lengths</name><index pos:start="21:24" pos:end="21:36">[<expr pos:start="21:25" pos:end="21:35"><name pos:start="21:25" pos:end="21:35"><name pos:start="21:25" pos:end="21:26">hc</name><operator pos:start="21:27" pos:end="21:28">-&gt;</operator><name pos:start="21:29" pos:end="21:35">current</name></name></expr>]</index></name> <operator pos:start="21:38" pos:end="21:38">=</operator> <name pos:start="21:40" pos:end="21:45">length</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="23:11" pos:end="40:5">else <block pos:start="23:16" pos:end="40:5">{<block_content pos:start="25:13" pos:end="38:17">

            <expr_stmt pos:start="25:13" pos:end="25:38"><expr pos:start="25:13" pos:end="25:37"><name pos:start="25:13" pos:end="25:33"><name pos:start="25:13" pos:end="25:14">hc</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:20">bits</name><index pos:start="25:21" pos:end="25:33">[<expr pos:start="25:22" pos:end="25:32"><name pos:start="25:22" pos:end="25:32"><name pos:start="25:22" pos:end="25:23">hc</name><operator pos:start="25:24" pos:end="25:25">-&gt;</operator><name pos:start="25:26" pos:end="25:32">current</name></name></expr>]</index></name> <operator pos:start="25:35" pos:end="25:35">=</operator> <literal type="number" pos:start="25:37" pos:end="25:37">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:41"><expr pos:start="27:13" pos:end="27:40"><name pos:start="27:13" pos:end="27:36"><name pos:start="27:13" pos:end="27:14">hc</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:23">lengths</name><index pos:start="27:24" pos:end="27:36">[<expr pos:start="27:25" pos:end="27:35"><name pos:start="27:25" pos:end="27:35"><name pos:start="27:25" pos:end="27:26">hc</name><operator pos:start="27:27" pos:end="27:28">-&gt;</operator><name pos:start="27:29" pos:end="27:35">current</name></name></expr>]</index></name> <operator pos:start="27:38" pos:end="27:38">=</operator> <literal type="number" pos:start="27:40" pos:end="27:40">0</literal></expr>;</expr_stmt>


        <expr_stmt pos:start="30:9" pos:end="30:50"><expr pos:start="30:9" pos:end="30:49"><name pos:start="30:9" pos:end="30:31"><name pos:start="30:9" pos:end="30:10">hc</name><operator pos:start="30:11" pos:end="30:12">-&gt;</operator><name pos:start="30:13" pos:end="30:18">values</name><index pos:start="30:19" pos:end="30:31">[<expr pos:start="30:20" pos:end="30:30"><name pos:start="30:20" pos:end="30:30"><name pos:start="30:20" pos:end="30:21">hc</name><operator pos:start="30:22" pos:end="30:23">-&gt;</operator><name pos:start="30:24" pos:end="30:30">current</name></name></expr>]</index></name> <operator pos:start="30:33" pos:end="30:33">=</operator> <call pos:start="30:35" pos:end="30:49"><name pos:start="30:35" pos:end="30:42">get_bits</name><argument_list pos:start="30:43" pos:end="30:49">(<argument pos:start="30:44" pos:end="30:45"><expr pos:start="30:44" pos:end="30:45"><name pos:start="30:44" pos:end="30:45">gb</name></expr></argument>, <argument pos:start="30:48" pos:end="30:48"><expr pos:start="30:48" pos:end="30:48"><literal type="number" pos:start="30:48" pos:end="30:48">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="32:9" pos:end="32:22"><expr pos:start="32:9" pos:end="32:21"><name pos:start="32:9" pos:end="32:19"><name pos:start="32:9" pos:end="32:10">hc</name><operator pos:start="32:11" pos:end="32:12">-&gt;</operator><name pos:start="32:13" pos:end="32:19">current</name></name><operator pos:start="32:20" pos:end="32:21">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="34:9" pos:end="36:35"><if pos:start="34:9" pos:end="36:35">if<condition pos:start="34:11" pos:end="34:34">(<expr pos:start="34:12" pos:end="34:33"><name pos:start="34:12" pos:end="34:24"><name pos:start="34:12" pos:end="34:13">hc</name><operator pos:start="34:14" pos:end="34:15">-&gt;</operator><name pos:start="34:16" pos:end="34:24">maxlength</name></name> <operator pos:start="34:26" pos:end="34:26">&lt;</operator> <name pos:start="34:28" pos:end="34:33">length</name></expr>)</condition><block type="pseudo" pos:start="36:13" pos:end="36:35"><block_content pos:start="36:13" pos:end="36:35">

            <expr_stmt pos:start="36:13" pos:end="36:35"><expr pos:start="36:13" pos:end="36:34"><name pos:start="36:13" pos:end="36:25"><name pos:start="36:13" pos:end="36:14">hc</name><operator pos:start="36:15" pos:end="36:16">-&gt;</operator><name pos:start="36:17" pos:end="36:25">maxlength</name></name> <operator pos:start="36:27" pos:end="36:27">=</operator> <name pos:start="36:29" pos:end="36:34">length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="38:9" pos:end="38:17">return <expr pos:start="38:16" pos:end="38:16"><literal type="number" pos:start="38:16" pos:end="38:16">0</literal></expr>;</return>

    </block_content>}</block></else></if_stmt> <if_stmt pos:start="40:7" pos:end="52:81"><else pos:start="40:7" pos:end="52:81">else <block pos:start="40:12" pos:end="52:81">{<block_content pos:start="42:9" pos:end="52:81"> <comment type="line" pos:start="40:14" pos:end="40:19">//Node</comment>

        <decl_stmt pos:start="42:9" pos:end="42:14"><decl pos:start="42:9" pos:end="42:13"><type pos:start="42:9" pos:end="42:11"><name pos:start="42:9" pos:end="42:11">int</name></type> <name pos:start="42:13" pos:end="42:13">r</name></decl>;</decl_stmt>

        <expr_stmt pos:start="44:9" pos:end="44:17"><expr pos:start="44:9" pos:end="44:16"><name pos:start="44:9" pos:end="44:14">length</name><operator pos:start="44:15" pos:end="44:16">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="46:9" pos:end="46:56"><expr pos:start="46:9" pos:end="46:55"><name pos:start="46:9" pos:end="46:9">r</name> <operator pos:start="46:11" pos:end="46:11">=</operator> <call pos:start="46:13" pos:end="46:55"><name pos:start="46:13" pos:end="46:31">smacker_decode_tree</name><argument_list pos:start="46:32" pos:end="46:55">(<argument pos:start="46:33" pos:end="46:34"><expr pos:start="46:33" pos:end="46:34"><name pos:start="46:33" pos:end="46:34">gb</name></expr></argument>, <argument pos:start="46:37" pos:end="46:38"><expr pos:start="46:37" pos:end="46:38"><name pos:start="46:37" pos:end="46:38">hc</name></expr></argument>, <argument pos:start="46:41" pos:end="46:46"><expr pos:start="46:41" pos:end="46:46"><name pos:start="46:41" pos:end="46:46">prefix</name></expr></argument>, <argument pos:start="46:49" pos:end="46:54"><expr pos:start="46:49" pos:end="46:54"><name pos:start="46:49" pos:end="46:54">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="48:9" pos:end="50:21"><if pos:start="48:9" pos:end="50:21">if<condition pos:start="48:11" pos:end="48:13">(<expr pos:start="48:12" pos:end="48:12"><name pos:start="48:12" pos:end="48:12">r</name></expr>)</condition><block type="pseudo" pos:start="50:13" pos:end="50:21"><block_content pos:start="50:13" pos:end="50:21">

            <return pos:start="50:13" pos:end="50:21">return <expr pos:start="50:20" pos:end="50:20"><name pos:start="50:20" pos:end="50:20">r</name></expr>;</return></block_content></block></if></if_stmt>

        <return pos:start="52:9" pos:end="52:81">return <expr pos:start="52:16" pos:end="52:80"><call pos:start="52:16" pos:end="52:80"><name pos:start="52:16" pos:end="52:34">smacker_decode_tree</name><argument_list pos:start="52:35" pos:end="52:80">(<argument pos:start="52:36" pos:end="52:37"><expr pos:start="52:36" pos:end="52:37"><name pos:start="52:36" pos:end="52:37">gb</name></expr></argument>, <argument pos:start="52:40" pos:end="52:41"><expr pos:start="52:40" pos:end="52:41"><name pos:start="52:40" pos:end="52:41">hc</name></expr></argument>, <argument pos:start="52:44" pos:end="52:71"><expr pos:start="52:44" pos:end="52:71"><name pos:start="52:44" pos:end="52:49">prefix</name> <operator pos:start="52:51" pos:end="52:51">|</operator> <operator pos:start="52:53" pos:end="52:53">(</operator><literal type="number" pos:start="52:54" pos:end="52:54">1</literal> <operator pos:start="52:56" pos:end="52:57">&lt;&lt;</operator> <operator pos:start="52:59" pos:end="52:59">(</operator><name pos:start="52:60" pos:end="52:65">length</name> <operator pos:start="52:67" pos:end="52:67">-</operator> <literal type="number" pos:start="52:69" pos:end="52:69">1</literal><operator pos:start="52:70" pos:end="52:70">)</operator><operator pos:start="52:71" pos:end="52:71">)</operator></expr></argument>, <argument pos:start="52:74" pos:end="52:79"><expr pos:start="52:74" pos:end="52:79"><name pos:start="52:74" pos:end="52:79">length</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>

</unit>
