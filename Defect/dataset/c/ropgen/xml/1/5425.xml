<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5425.c" pos:tabs="8"><function pos:start="1:1" pos:end="781:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:10">SwsContext</name> <modifier pos:start="1:12" pos:end="1:12">*</modifier></type><name pos:start="1:13" pos:end="1:25">getSwsContext</name><parameter_list pos:start="1:26" pos:end="3:68">(<parameter pos:start="1:27" pos:end="1:34"><decl pos:start="1:27" pos:end="1:34"><type pos:start="1:27" pos:end="1:34"><name pos:start="1:27" pos:end="1:29">int</name></type> <name pos:start="1:31" pos:end="1:34">srcW</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:44"><decl pos:start="1:37" pos:end="1:44"><type pos:start="1:37" pos:end="1:44"><name pos:start="1:37" pos:end="1:39">int</name></type> <name pos:start="1:41" pos:end="1:44">srcH</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:59"><decl pos:start="1:47" pos:end="1:59"><type pos:start="1:47" pos:end="1:59"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:59">srcFormat</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:69"><decl pos:start="1:62" pos:end="1:69"><type pos:start="1:62" pos:end="1:69"><name pos:start="1:62" pos:end="1:64">int</name></type> <name pos:start="1:66" pos:end="1:69">dstW</name></decl></parameter>, <parameter pos:start="1:72" pos:end="1:79"><decl pos:start="1:72" pos:end="1:79"><type pos:start="1:72" pos:end="1:79"><name pos:start="1:72" pos:end="1:74">int</name></type> <name pos:start="1:76" pos:end="1:79">dstH</name></decl></parameter>, <parameter pos:start="1:82" pos:end="1:94"><decl pos:start="1:82" pos:end="1:94"><type pos:start="1:82" pos:end="1:94"><name pos:start="1:82" pos:end="1:84">int</name></type> <name pos:start="1:86" pos:end="1:94">dstFormat</name></decl></parameter>, <parameter pos:start="1:97" pos:end="1:105"><decl pos:start="1:97" pos:end="1:105"><type pos:start="1:97" pos:end="1:105"><name pos:start="1:97" pos:end="1:99">int</name></type> <name pos:start="1:101" pos:end="1:105">flags</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:45"><decl pos:start="3:26" pos:end="3:45"><type pos:start="3:26" pos:end="3:45"><name pos:start="3:26" pos:end="3:34">SwsFilter</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:45">srcFilter</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:67"><decl pos:start="3:48" pos:end="3:67"><type pos:start="3:48" pos:end="3:67"><name pos:start="3:48" pos:end="3:56">SwsFilter</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:67">dstFilter</name></decl></parameter>)</parameter_list><block pos:start="3:69" pos:end="781:1">{<block_content pos:start="7:9" pos:end="779:17">



	<decl_stmt pos:start="7:9" pos:end="7:22"><decl pos:start="7:9" pos:end="7:21"><type pos:start="7:9" pos:end="7:20"><name pos:start="7:9" pos:end="7:18">SwsContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">c</name></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:14"><decl pos:start="9:9" pos:end="9:13"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:13">i</name></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:23"><decl pos:start="11:9" pos:end="11:22"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:22">usesFilter</name></decl>;</decl_stmt>

	<decl_stmt pos:start="13:9" pos:end="18:0"><decl pos:start="13:9" pos:end="13:55"><type pos:start="13:9" pos:end="13:17"><name pos:start="13:9" pos:end="13:17">SwsFilter</name></type> <name pos:start="13:19" pos:end="13:29">dummyFilter</name><init pos:start="13:30" pos:end="13:55">= <expr pos:start="13:32" pos:end="13:55"><block pos:start="13:32" pos:end="13:55">{<expr pos:start="13:33" pos:end="13:36"><name pos:start="13:33" pos:end="13:36">NULL</name></expr>, <expr pos:start="13:39" pos:end="13:42"><name pos:start="13:39" pos:end="13:42">NULL</name></expr>, <expr pos:start="13:45" pos:end="13:48"><name pos:start="13:45" pos:end="13:48">NULL</name></expr>, <expr pos:start="13:51" pos:end="13:54"><name pos:start="13:51" pos:end="13:54">NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>



<cpp:ifdef pos:start="17:1" pos:end="17:15">#<cpp:directive pos:start="17:2" pos:end="17:6">ifdef</cpp:directive> <name pos:start="17:8" pos:end="17:15">ARCH_X86</name></cpp:ifdef>

	<if_stmt pos:start="19:9" pos:end="24:0"><if pos:start="19:9" pos:end="24:0">if<condition pos:start="19:11" pos:end="19:27">(<expr pos:start="19:12" pos:end="19:26"><name pos:start="19:12" pos:end="19:26"><name pos:start="19:12" pos:end="19:19">gCpuCaps</name><operator pos:start="19:20" pos:end="19:20">.</operator><name pos:start="19:21" pos:end="19:26">hasMMX</name></name></expr>)</condition><block type="pseudo" pos:start="21:17" pos:end="24:0"><block_content pos:start="21:17" pos:end="24:0">

		<asm pos:start="21:17" pos:end="24:0">asm <specifier pos:start="21:21" pos:end="21:28">volatile</specifier>("emms\n\t"::: "memory");</asm></block_content></block></if></if_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>



	<if_stmt pos:start="27:9" pos:end="27:39"><if pos:start="27:9" pos:end="27:39">if<condition pos:start="27:11" pos:end="27:25">(<expr pos:start="27:12" pos:end="27:24"><name pos:start="27:12" pos:end="27:18">swScale</name><operator pos:start="27:19" pos:end="27:20">==</operator><name pos:start="27:21" pos:end="27:24">NULL</name></expr>)</condition><block type="pseudo" pos:start="27:27" pos:end="27:39"><block_content pos:start="27:27" pos:end="27:39"> <expr_stmt pos:start="27:27" pos:end="27:39"><expr pos:start="27:27" pos:end="27:38"><call pos:start="27:27" pos:end="27:38"><name pos:start="27:27" pos:end="27:36">globalInit</name><argument_list pos:start="27:37" pos:end="27:38">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<comment type="block" pos:start="31:9" pos:end="31:72">/* avoid dupplicate Formats, so we dont need to check to much */</comment>

	<if_stmt pos:start="33:9" pos:end="33:57"><if pos:start="33:9" pos:end="33:57">if<condition pos:start="33:11" pos:end="33:34">(<expr pos:start="33:12" pos:end="33:33"><name pos:start="33:12" pos:end="33:20">srcFormat</name><operator pos:start="33:21" pos:end="33:22">==</operator><name pos:start="33:23" pos:end="33:33">IMGFMT_IYUV</name></expr>)</condition><block type="pseudo" pos:start="33:36" pos:end="33:57"><block_content pos:start="33:36" pos:end="33:57"> <expr_stmt pos:start="33:36" pos:end="33:57"><expr pos:start="33:36" pos:end="33:56"><name pos:start="33:36" pos:end="33:44">srcFormat</name><operator pos:start="33:45" pos:end="33:45">=</operator><name pos:start="33:46" pos:end="33:56">IMGFMT_I420</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt pos:start="35:9" pos:end="35:57"><if pos:start="35:9" pos:end="35:57">if<condition pos:start="35:11" pos:end="35:32">(<expr pos:start="35:12" pos:end="35:31"><name pos:start="35:12" pos:end="35:20">srcFormat</name><operator pos:start="35:21" pos:end="35:22">==</operator><name pos:start="35:23" pos:end="35:31">IMGFMT_Y8</name></expr>)</condition><block type="pseudo" pos:start="35:36" pos:end="35:57"><block_content pos:start="35:36" pos:end="35:57">   <expr_stmt pos:start="35:36" pos:end="35:57"><expr pos:start="35:36" pos:end="35:56"><name pos:start="35:36" pos:end="35:44">srcFormat</name><operator pos:start="35:45" pos:end="35:45">=</operator><name pos:start="35:46" pos:end="35:56">IMGFMT_Y800</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt pos:start="37:9" pos:end="37:57"><if pos:start="37:9" pos:end="37:57">if<condition pos:start="37:11" pos:end="37:32">(<expr pos:start="37:12" pos:end="37:31"><name pos:start="37:12" pos:end="37:20">dstFormat</name><operator pos:start="37:21" pos:end="37:22">==</operator><name pos:start="37:23" pos:end="37:31">IMGFMT_Y8</name></expr>)</condition><block type="pseudo" pos:start="37:36" pos:end="37:57"><block_content pos:start="37:36" pos:end="37:57">   <expr_stmt pos:start="37:36" pos:end="37:57"><expr pos:start="37:36" pos:end="37:56"><name pos:start="37:36" pos:end="37:44">dstFormat</name><operator pos:start="37:45" pos:end="37:45">=</operator><name pos:start="37:46" pos:end="37:56">IMGFMT_Y800</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<if_stmt pos:start="41:9" pos:end="49:9"><if pos:start="41:9" pos:end="49:9">if<condition pos:start="41:11" pos:end="41:37">(<expr pos:start="41:12" pos:end="41:36"><operator pos:start="41:12" pos:end="41:12">!</operator><call pos:start="41:13" pos:end="41:36"><name pos:start="41:13" pos:end="41:25">isSupportedIn</name><argument_list pos:start="41:26" pos:end="41:36">(<argument pos:start="41:27" pos:end="41:35"><expr pos:start="41:27" pos:end="41:35"><name pos:start="41:27" pos:end="41:35">srcFormat</name></expr></argument>)</argument_list></call></expr>)</condition> 

	<block pos:start="43:9" pos:end="49:9">{<block_content pos:start="45:17" pos:end="47:28">

		<expr_stmt pos:start="45:17" pos:end="45:110"><expr pos:start="45:17" pos:end="45:109"><call pos:start="45:17" pos:end="45:109"><name pos:start="45:17" pos:end="45:23">fprintf</name><argument_list pos:start="45:24" pos:end="45:109">(<argument pos:start="45:25" pos:end="45:30"><expr pos:start="45:25" pos:end="45:30"><name pos:start="45:25" pos:end="45:30">stderr</name></expr></argument>, <argument pos:start="45:33" pos:end="45:81"><expr pos:start="45:33" pos:end="45:81"><literal type="string" pos:start="45:33" pos:end="45:81">"swScaler: %s is not supported as input format\n"</literal></expr></argument>, <argument pos:start="45:84" pos:end="45:108"><expr pos:start="45:84" pos:end="45:108"><call pos:start="45:84" pos:end="45:108"><name pos:start="45:84" pos:end="45:97">vo_format_name</name><argument_list pos:start="45:98" pos:end="45:108">(<argument pos:start="45:99" pos:end="45:107"><expr pos:start="45:99" pos:end="45:107"><name pos:start="45:99" pos:end="45:107">srcFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="47:17" pos:end="47:28">return <expr pos:start="47:24" pos:end="47:27"><name pos:start="47:24" pos:end="47:27">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

	<if_stmt pos:start="51:9" pos:end="59:9"><if pos:start="51:9" pos:end="59:9">if<condition pos:start="51:11" pos:end="51:38">(<expr pos:start="51:12" pos:end="51:37"><operator pos:start="51:12" pos:end="51:12">!</operator><call pos:start="51:13" pos:end="51:37"><name pos:start="51:13" pos:end="51:26">isSupportedOut</name><argument_list pos:start="51:27" pos:end="51:37">(<argument pos:start="51:28" pos:end="51:36"><expr pos:start="51:28" pos:end="51:36"><name pos:start="51:28" pos:end="51:36">dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition>

	<block pos:start="53:9" pos:end="59:9">{<block_content pos:start="55:17" pos:end="57:28">

		<expr_stmt pos:start="55:17" pos:end="55:111"><expr pos:start="55:17" pos:end="55:110"><call pos:start="55:17" pos:end="55:110"><name pos:start="55:17" pos:end="55:23">fprintf</name><argument_list pos:start="55:24" pos:end="55:110">(<argument pos:start="55:25" pos:end="55:30"><expr pos:start="55:25" pos:end="55:30"><name pos:start="55:25" pos:end="55:30">stderr</name></expr></argument>, <argument pos:start="55:33" pos:end="55:82"><expr pos:start="55:33" pos:end="55:82"><literal type="string" pos:start="55:33" pos:end="55:82">"swScaler: %s is not supported as output format\n"</literal></expr></argument>, <argument pos:start="55:85" pos:end="55:109"><expr pos:start="55:85" pos:end="55:109"><call pos:start="55:85" pos:end="55:109"><name pos:start="55:85" pos:end="55:98">vo_format_name</name><argument_list pos:start="55:99" pos:end="55:109">(<argument pos:start="55:100" pos:end="55:108"><expr pos:start="55:100" pos:end="55:108"><name pos:start="55:100" pos:end="55:108">dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="57:17" pos:end="57:28">return <expr pos:start="57:24" pos:end="57:27"><name pos:start="57:24" pos:end="57:27">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="63:9" pos:end="63:26">/* sanity check */</comment>

	<if_stmt pos:start="65:9" pos:end="75:9"><if pos:start="65:9" pos:end="75:9">if<condition pos:start="65:11" pos:end="65:48">(<expr pos:start="65:12" pos:end="65:47"><name pos:start="65:12" pos:end="65:15">srcW</name><operator pos:start="65:16" pos:end="65:16">&lt;</operator><literal type="number" pos:start="65:17" pos:end="65:17">4</literal> <operator pos:start="65:19" pos:end="65:20">||</operator> <name pos:start="65:22" pos:end="65:25">srcH</name><operator pos:start="65:26" pos:end="65:26">&lt;</operator><literal type="number" pos:start="65:27" pos:end="65:27">1</literal> <operator pos:start="65:29" pos:end="65:30">||</operator> <name pos:start="65:32" pos:end="65:35">dstW</name><operator pos:start="65:36" pos:end="65:36">&lt;</operator><literal type="number" pos:start="65:37" pos:end="65:37">8</literal> <operator pos:start="65:39" pos:end="65:40">||</operator> <name pos:start="65:42" pos:end="65:45">dstH</name><operator pos:start="65:46" pos:end="65:46">&lt;</operator><literal type="number" pos:start="65:47" pos:end="65:47">1</literal></expr>)</condition> <comment type="line" pos:start="65:50" pos:end="65:149">//FIXME check if these are enough and try to lowwer them after fixing the relevant parts of the code</comment>

	<block pos:start="67:9" pos:end="75:9">{<block_content pos:start="69:17" pos:end="73:28">

		<expr_stmt pos:start="69:17" pos:end="71:48"><expr pos:start="69:17" pos:end="71:47"><call pos:start="69:17" pos:end="71:47"><name pos:start="69:17" pos:end="69:23">fprintf</name><argument_list pos:start="69:24" pos:end="71:47">(<argument pos:start="69:25" pos:end="69:30"><expr pos:start="69:25" pos:end="69:30"><name pos:start="69:25" pos:end="69:30">stderr</name></expr></argument>, <argument pos:start="69:33" pos:end="69:89"><expr pos:start="69:33" pos:end="69:89"><literal type="string" pos:start="69:33" pos:end="69:89">"swScaler: %dx%d -&gt; %dx%d is invalid scaling dimension\n"</literal></expr></argument>, 

			<argument pos:start="71:25" pos:end="71:28"><expr pos:start="71:25" pos:end="71:28"><name pos:start="71:25" pos:end="71:28">srcW</name></expr></argument>, <argument pos:start="71:31" pos:end="71:34"><expr pos:start="71:31" pos:end="71:34"><name pos:start="71:31" pos:end="71:34">srcH</name></expr></argument>, <argument pos:start="71:37" pos:end="71:40"><expr pos:start="71:37" pos:end="71:40"><name pos:start="71:37" pos:end="71:40">dstW</name></expr></argument>, <argument pos:start="71:43" pos:end="71:46"><expr pos:start="71:43" pos:end="71:46"><name pos:start="71:43" pos:end="71:46">dstH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="73:17" pos:end="73:28">return <expr pos:start="73:24" pos:end="73:27"><name pos:start="73:24" pos:end="73:27">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="79:9" pos:end="79:47"><if pos:start="79:9" pos:end="79:47">if<condition pos:start="79:11" pos:end="79:22">(<expr pos:start="79:12" pos:end="79:21"><operator pos:start="79:12" pos:end="79:12">!</operator><name pos:start="79:13" pos:end="79:21">dstFilter</name></expr>)</condition><block type="pseudo" pos:start="79:24" pos:end="79:47"><block_content pos:start="79:24" pos:end="79:47"> <expr_stmt pos:start="79:24" pos:end="79:47"><expr pos:start="79:24" pos:end="79:46"><name pos:start="79:24" pos:end="79:32">dstFilter</name><operator pos:start="79:33" pos:end="79:33">=</operator> <operator pos:start="79:35" pos:end="79:35">&amp;</operator><name pos:start="79:36" pos:end="79:46">dummyFilter</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt pos:start="81:9" pos:end="81:47"><if pos:start="81:9" pos:end="81:47">if<condition pos:start="81:11" pos:end="81:22">(<expr pos:start="81:12" pos:end="81:21"><operator pos:start="81:12" pos:end="81:12">!</operator><name pos:start="81:13" pos:end="81:21">srcFilter</name></expr>)</condition><block type="pseudo" pos:start="81:24" pos:end="81:47"><block_content pos:start="81:24" pos:end="81:47"> <expr_stmt pos:start="81:24" pos:end="81:47"><expr pos:start="81:24" pos:end="81:46"><name pos:start="81:24" pos:end="81:32">srcFilter</name><operator pos:start="81:33" pos:end="81:33">=</operator> <operator pos:start="81:35" pos:end="81:35">&amp;</operator><name pos:start="81:36" pos:end="81:46">dummyFilter</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<expr_stmt pos:start="85:9" pos:end="85:44"><expr pos:start="85:9" pos:end="85:43"><name pos:start="85:9" pos:end="85:9">c</name><operator pos:start="85:10" pos:end="85:10">=</operator> <call pos:start="85:12" pos:end="85:43"><name pos:start="85:12" pos:end="85:19">memalign</name><argument_list pos:start="85:20" pos:end="85:43">(<argument pos:start="85:21" pos:end="85:22"><expr pos:start="85:21" pos:end="85:22"><literal type="number" pos:start="85:21" pos:end="85:22">64</literal></expr></argument>, <argument pos:start="85:25" pos:end="85:42"><expr pos:start="85:25" pos:end="85:42"><sizeof pos:start="85:25" pos:end="85:42">sizeof<argument_list pos:start="85:31" pos:end="85:42">(<argument pos:start="85:32" pos:end="85:41"><expr pos:start="85:32" pos:end="85:41"><name pos:start="85:32" pos:end="85:41">SwsContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="87:9" pos:end="87:41"><expr pos:start="87:9" pos:end="87:40"><call pos:start="87:9" pos:end="87:40"><name pos:start="87:9" pos:end="87:14">memset</name><argument_list pos:start="87:15" pos:end="87:40">(<argument pos:start="87:16" pos:end="87:16"><expr pos:start="87:16" pos:end="87:16"><name pos:start="87:16" pos:end="87:16">c</name></expr></argument>, <argument pos:start="87:19" pos:end="87:19"><expr pos:start="87:19" pos:end="87:19"><literal type="number" pos:start="87:19" pos:end="87:19">0</literal></expr></argument>, <argument pos:start="87:22" pos:end="87:39"><expr pos:start="87:22" pos:end="87:39"><sizeof pos:start="87:22" pos:end="87:39">sizeof<argument_list pos:start="87:28" pos:end="87:39">(<argument pos:start="87:29" pos:end="87:38"><expr pos:start="87:29" pos:end="87:38"><name pos:start="87:29" pos:end="87:38">SwsContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="91:9" pos:end="91:22"><expr pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:15"><name pos:start="91:9" pos:end="91:9">c</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:15">srcW</name></name><operator pos:start="91:16" pos:end="91:16">=</operator> <name pos:start="91:18" pos:end="91:21">srcW</name></expr>;</expr_stmt>

	<expr_stmt pos:start="93:9" pos:end="93:22"><expr pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:15"><name pos:start="93:9" pos:end="93:9">c</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:15">srcH</name></name><operator pos:start="93:16" pos:end="93:16">=</operator> <name pos:start="93:18" pos:end="93:21">srcH</name></expr>;</expr_stmt>

	<expr_stmt pos:start="95:9" pos:end="95:22"><expr pos:start="95:9" pos:end="95:21"><name pos:start="95:9" pos:end="95:15"><name pos:start="95:9" pos:end="95:9">c</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:15">dstW</name></name><operator pos:start="95:16" pos:end="95:16">=</operator> <name pos:start="95:18" pos:end="95:21">dstW</name></expr>;</expr_stmt>

	<expr_stmt pos:start="97:9" pos:end="97:22"><expr pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:15"><name pos:start="97:9" pos:end="97:9">c</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:15">dstH</name></name><operator pos:start="97:16" pos:end="97:16">=</operator> <name pos:start="97:18" pos:end="97:21">dstH</name></expr>;</expr_stmt>

	<expr_stmt pos:start="99:9" pos:end="99:50"><expr pos:start="99:9" pos:end="99:49"><name pos:start="99:9" pos:end="99:18"><name pos:start="99:9" pos:end="99:9">c</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:18">lumXInc</name></name><operator pos:start="99:19" pos:end="99:19">=</operator> <operator pos:start="99:21" pos:end="99:21">(</operator><operator pos:start="99:22" pos:end="99:22">(</operator><name pos:start="99:23" pos:end="99:26">srcW</name><operator pos:start="99:27" pos:end="99:28">&lt;&lt;</operator><literal type="number" pos:start="99:29" pos:end="99:30">16</literal><operator pos:start="99:31" pos:end="99:31">)</operator> <operator pos:start="99:33" pos:end="99:33">+</operator> <operator pos:start="99:35" pos:end="99:35">(</operator><name pos:start="99:36" pos:end="99:39">dstW</name><operator pos:start="99:40" pos:end="99:41">&gt;&gt;</operator><literal type="number" pos:start="99:42" pos:end="99:42">1</literal><operator pos:start="99:43" pos:end="99:43">)</operator><operator pos:start="99:44" pos:end="99:44">)</operator><operator pos:start="99:45" pos:end="99:45">/</operator><name pos:start="99:46" pos:end="99:49">dstW</name></expr>;</expr_stmt>

	<expr_stmt pos:start="101:9" pos:end="101:50"><expr pos:start="101:9" pos:end="101:49"><name pos:start="101:9" pos:end="101:18"><name pos:start="101:9" pos:end="101:9">c</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:18">lumYInc</name></name><operator pos:start="101:19" pos:end="101:19">=</operator> <operator pos:start="101:21" pos:end="101:21">(</operator><operator pos:start="101:22" pos:end="101:22">(</operator><name pos:start="101:23" pos:end="101:26">srcH</name><operator pos:start="101:27" pos:end="101:28">&lt;&lt;</operator><literal type="number" pos:start="101:29" pos:end="101:30">16</literal><operator pos:start="101:31" pos:end="101:31">)</operator> <operator pos:start="101:33" pos:end="101:33">+</operator> <operator pos:start="101:35" pos:end="101:35">(</operator><name pos:start="101:36" pos:end="101:39">dstH</name><operator pos:start="101:40" pos:end="101:41">&gt;&gt;</operator><literal type="number" pos:start="101:42" pos:end="101:42">1</literal><operator pos:start="101:43" pos:end="101:43">)</operator><operator pos:start="101:44" pos:end="101:44">)</operator><operator pos:start="101:45" pos:end="101:45">/</operator><name pos:start="101:46" pos:end="101:49">dstH</name></expr>;</expr_stmt>

	<expr_stmt pos:start="103:9" pos:end="103:24"><expr pos:start="103:9" pos:end="103:23"><name pos:start="103:9" pos:end="103:16"><name pos:start="103:9" pos:end="103:9">c</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:16">flags</name></name><operator pos:start="103:17" pos:end="103:17">=</operator> <name pos:start="103:19" pos:end="103:23">flags</name></expr>;</expr_stmt>

	<expr_stmt pos:start="105:9" pos:end="105:32"><expr pos:start="105:9" pos:end="105:31"><name pos:start="105:9" pos:end="105:20"><name pos:start="105:9" pos:end="105:9">c</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:20">dstFormat</name></name><operator pos:start="105:21" pos:end="105:21">=</operator> <name pos:start="105:23" pos:end="105:31">dstFormat</name></expr>;</expr_stmt>

	<expr_stmt pos:start="107:9" pos:end="107:32"><expr pos:start="107:9" pos:end="107:31"><name pos:start="107:9" pos:end="107:20"><name pos:start="107:9" pos:end="107:9">c</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:20">srcFormat</name></name><operator pos:start="107:21" pos:end="107:21">=</operator> <name pos:start="107:23" pos:end="107:31">srcFormat</name></expr>;</expr_stmt>



	<expr_stmt pos:start="111:9" pos:end="111:21"><expr pos:start="111:9" pos:end="111:20"><name pos:start="111:9" pos:end="111:18">usesFilter</name><operator pos:start="111:19" pos:end="111:19">=</operator><literal type="number" pos:start="111:20" pos:end="111:20">0</literal></expr>;</expr_stmt>

	<if_stmt pos:start="113:9" pos:end="113:76"><if pos:start="113:9" pos:end="113:76">if<condition pos:start="113:11" pos:end="113:62">(<expr pos:start="113:12" pos:end="113:61"><name pos:start="113:12" pos:end="113:26"><name pos:start="113:12" pos:end="113:20">dstFilter</name><operator pos:start="113:21" pos:end="113:22">-&gt;</operator><name pos:start="113:23" pos:end="113:26">lumV</name></name><operator pos:start="113:27" pos:end="113:28">!=</operator><name pos:start="113:29" pos:end="113:32">NULL</name> <operator pos:start="113:34" pos:end="113:35">&amp;&amp;</operator> <name pos:start="113:37" pos:end="113:59"><name pos:start="113:37" pos:end="113:45">dstFilter</name><operator pos:start="113:46" pos:end="113:47">-&gt;</operator><name pos:start="113:48" pos:end="113:51">lumV</name><operator pos:start="113:52" pos:end="113:53">-&gt;</operator><name pos:start="113:54" pos:end="113:59">length</name></name><operator pos:start="113:60" pos:end="113:60">&gt;</operator><literal type="number" pos:start="113:61" pos:end="113:61">1</literal></expr>)</condition><block type="pseudo" pos:start="113:64" pos:end="113:76"><block_content pos:start="113:64" pos:end="113:76"> <expr_stmt pos:start="113:64" pos:end="113:76"><expr pos:start="113:64" pos:end="113:75"><name pos:start="113:64" pos:end="113:73">usesFilter</name><operator pos:start="113:74" pos:end="113:74">=</operator><literal type="number" pos:start="113:75" pos:end="113:75">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt pos:start="115:9" pos:end="115:76"><if pos:start="115:9" pos:end="115:76">if<condition pos:start="115:11" pos:end="115:62">(<expr pos:start="115:12" pos:end="115:61"><name pos:start="115:12" pos:end="115:26"><name pos:start="115:12" pos:end="115:20">dstFilter</name><operator pos:start="115:21" pos:end="115:22">-&gt;</operator><name pos:start="115:23" pos:end="115:26">lumH</name></name><operator pos:start="115:27" pos:end="115:28">!=</operator><name pos:start="115:29" pos:end="115:32">NULL</name> <operator pos:start="115:34" pos:end="115:35">&amp;&amp;</operator> <name pos:start="115:37" pos:end="115:59"><name pos:start="115:37" pos:end="115:45">dstFilter</name><operator pos:start="115:46" pos:end="115:47">-&gt;</operator><name pos:start="115:48" pos:end="115:51">lumH</name><operator pos:start="115:52" pos:end="115:53">-&gt;</operator><name pos:start="115:54" pos:end="115:59">length</name></name><operator pos:start="115:60" pos:end="115:60">&gt;</operator><literal type="number" pos:start="115:61" pos:end="115:61">1</literal></expr>)</condition><block type="pseudo" pos:start="115:64" pos:end="115:76"><block_content pos:start="115:64" pos:end="115:76"> <expr_stmt pos:start="115:64" pos:end="115:76"><expr pos:start="115:64" pos:end="115:75"><name pos:start="115:64" pos:end="115:73">usesFilter</name><operator pos:start="115:74" pos:end="115:74">=</operator><literal type="number" pos:start="115:75" pos:end="115:75">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt pos:start="117:9" pos:end="117:76"><if pos:start="117:9" pos:end="117:76">if<condition pos:start="117:11" pos:end="117:62">(<expr pos:start="117:12" pos:end="117:61"><name pos:start="117:12" pos:end="117:26"><name pos:start="117:12" pos:end="117:20">dstFilter</name><operator pos:start="117:21" pos:end="117:22">-&gt;</operator><name pos:start="117:23" pos:end="117:26">chrV</name></name><operator pos:start="117:27" pos:end="117:28">!=</operator><name pos:start="117:29" pos:end="117:32">NULL</name> <operator pos:start="117:34" pos:end="117:35">&amp;&amp;</operator> <name pos:start="117:37" pos:end="117:59"><name pos:start="117:37" pos:end="117:45">dstFilter</name><operator pos:start="117:46" pos:end="117:47">-&gt;</operator><name pos:start="117:48" pos:end="117:51">chrV</name><operator pos:start="117:52" pos:end="117:53">-&gt;</operator><name pos:start="117:54" pos:end="117:59">length</name></name><operator pos:start="117:60" pos:end="117:60">&gt;</operator><literal type="number" pos:start="117:61" pos:end="117:61">1</literal></expr>)</condition><block type="pseudo" pos:start="117:64" pos:end="117:76"><block_content pos:start="117:64" pos:end="117:76"> <expr_stmt pos:start="117:64" pos:end="117:76"><expr pos:start="117:64" pos:end="117:75"><name pos:start="117:64" pos:end="117:73">usesFilter</name><operator pos:start="117:74" pos:end="117:74">=</operator><literal type="number" pos:start="117:75" pos:end="117:75">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt pos:start="119:9" pos:end="119:76"><if pos:start="119:9" pos:end="119:76">if<condition pos:start="119:11" pos:end="119:62">(<expr pos:start="119:12" pos:end="119:61"><name pos:start="119:12" pos:end="119:26"><name pos:start="119:12" pos:end="119:20">dstFilter</name><operator pos:start="119:21" pos:end="119:22">-&gt;</operator><name pos:start="119:23" pos:end="119:26">chrH</name></name><operator pos:start="119:27" pos:end="119:28">!=</operator><name pos:start="119:29" pos:end="119:32">NULL</name> <operator pos:start="119:34" pos:end="119:35">&amp;&amp;</operator> <name pos:start="119:37" pos:end="119:59"><name pos:start="119:37" pos:end="119:45">dstFilter</name><operator pos:start="119:46" pos:end="119:47">-&gt;</operator><name pos:start="119:48" pos:end="119:51">chrH</name><operator pos:start="119:52" pos:end="119:53">-&gt;</operator><name pos:start="119:54" pos:end="119:59">length</name></name><operator pos:start="119:60" pos:end="119:60">&gt;</operator><literal type="number" pos:start="119:61" pos:end="119:61">1</literal></expr>)</condition><block type="pseudo" pos:start="119:64" pos:end="119:76"><block_content pos:start="119:64" pos:end="119:76"> <expr_stmt pos:start="119:64" pos:end="119:76"><expr pos:start="119:64" pos:end="119:75"><name pos:start="119:64" pos:end="119:73">usesFilter</name><operator pos:start="119:74" pos:end="119:74">=</operator><literal type="number" pos:start="119:75" pos:end="119:75">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt pos:start="121:9" pos:end="121:76"><if pos:start="121:9" pos:end="121:76">if<condition pos:start="121:11" pos:end="121:62">(<expr pos:start="121:12" pos:end="121:61"><name pos:start="121:12" pos:end="121:26"><name pos:start="121:12" pos:end="121:20">srcFilter</name><operator pos:start="121:21" pos:end="121:22">-&gt;</operator><name pos:start="121:23" pos:end="121:26">lumV</name></name><operator pos:start="121:27" pos:end="121:28">!=</operator><name pos:start="121:29" pos:end="121:32">NULL</name> <operator pos:start="121:34" pos:end="121:35">&amp;&amp;</operator> <name pos:start="121:37" pos:end="121:59"><name pos:start="121:37" pos:end="121:45">srcFilter</name><operator pos:start="121:46" pos:end="121:47">-&gt;</operator><name pos:start="121:48" pos:end="121:51">lumV</name><operator pos:start="121:52" pos:end="121:53">-&gt;</operator><name pos:start="121:54" pos:end="121:59">length</name></name><operator pos:start="121:60" pos:end="121:60">&gt;</operator><literal type="number" pos:start="121:61" pos:end="121:61">1</literal></expr>)</condition><block type="pseudo" pos:start="121:64" pos:end="121:76"><block_content pos:start="121:64" pos:end="121:76"> <expr_stmt pos:start="121:64" pos:end="121:76"><expr pos:start="121:64" pos:end="121:75"><name pos:start="121:64" pos:end="121:73">usesFilter</name><operator pos:start="121:74" pos:end="121:74">=</operator><literal type="number" pos:start="121:75" pos:end="121:75">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt pos:start="123:9" pos:end="123:76"><if pos:start="123:9" pos:end="123:76">if<condition pos:start="123:11" pos:end="123:62">(<expr pos:start="123:12" pos:end="123:61"><name pos:start="123:12" pos:end="123:26"><name pos:start="123:12" pos:end="123:20">srcFilter</name><operator pos:start="123:21" pos:end="123:22">-&gt;</operator><name pos:start="123:23" pos:end="123:26">lumH</name></name><operator pos:start="123:27" pos:end="123:28">!=</operator><name pos:start="123:29" pos:end="123:32">NULL</name> <operator pos:start="123:34" pos:end="123:35">&amp;&amp;</operator> <name pos:start="123:37" pos:end="123:59"><name pos:start="123:37" pos:end="123:45">srcFilter</name><operator pos:start="123:46" pos:end="123:47">-&gt;</operator><name pos:start="123:48" pos:end="123:51">lumH</name><operator pos:start="123:52" pos:end="123:53">-&gt;</operator><name pos:start="123:54" pos:end="123:59">length</name></name><operator pos:start="123:60" pos:end="123:60">&gt;</operator><literal type="number" pos:start="123:61" pos:end="123:61">1</literal></expr>)</condition><block type="pseudo" pos:start="123:64" pos:end="123:76"><block_content pos:start="123:64" pos:end="123:76"> <expr_stmt pos:start="123:64" pos:end="123:76"><expr pos:start="123:64" pos:end="123:75"><name pos:start="123:64" pos:end="123:73">usesFilter</name><operator pos:start="123:74" pos:end="123:74">=</operator><literal type="number" pos:start="123:75" pos:end="123:75">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt pos:start="125:9" pos:end="125:76"><if pos:start="125:9" pos:end="125:76">if<condition pos:start="125:11" pos:end="125:62">(<expr pos:start="125:12" pos:end="125:61"><name pos:start="125:12" pos:end="125:26"><name pos:start="125:12" pos:end="125:20">srcFilter</name><operator pos:start="125:21" pos:end="125:22">-&gt;</operator><name pos:start="125:23" pos:end="125:26">chrV</name></name><operator pos:start="125:27" pos:end="125:28">!=</operator><name pos:start="125:29" pos:end="125:32">NULL</name> <operator pos:start="125:34" pos:end="125:35">&amp;&amp;</operator> <name pos:start="125:37" pos:end="125:59"><name pos:start="125:37" pos:end="125:45">srcFilter</name><operator pos:start="125:46" pos:end="125:47">-&gt;</operator><name pos:start="125:48" pos:end="125:51">chrV</name><operator pos:start="125:52" pos:end="125:53">-&gt;</operator><name pos:start="125:54" pos:end="125:59">length</name></name><operator pos:start="125:60" pos:end="125:60">&gt;</operator><literal type="number" pos:start="125:61" pos:end="125:61">1</literal></expr>)</condition><block type="pseudo" pos:start="125:64" pos:end="125:76"><block_content pos:start="125:64" pos:end="125:76"> <expr_stmt pos:start="125:64" pos:end="125:76"><expr pos:start="125:64" pos:end="125:75"><name pos:start="125:64" pos:end="125:73">usesFilter</name><operator pos:start="125:74" pos:end="125:74">=</operator><literal type="number" pos:start="125:75" pos:end="125:75">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt pos:start="127:9" pos:end="127:76"><if pos:start="127:9" pos:end="127:76">if<condition pos:start="127:11" pos:end="127:62">(<expr pos:start="127:12" pos:end="127:61"><name pos:start="127:12" pos:end="127:26"><name pos:start="127:12" pos:end="127:20">srcFilter</name><operator pos:start="127:21" pos:end="127:22">-&gt;</operator><name pos:start="127:23" pos:end="127:26">chrH</name></name><operator pos:start="127:27" pos:end="127:28">!=</operator><name pos:start="127:29" pos:end="127:32">NULL</name> <operator pos:start="127:34" pos:end="127:35">&amp;&amp;</operator> <name pos:start="127:37" pos:end="127:59"><name pos:start="127:37" pos:end="127:45">srcFilter</name><operator pos:start="127:46" pos:end="127:47">-&gt;</operator><name pos:start="127:48" pos:end="127:51">chrH</name><operator pos:start="127:52" pos:end="127:53">-&gt;</operator><name pos:start="127:54" pos:end="127:59">length</name></name><operator pos:start="127:60" pos:end="127:60">&gt;</operator><literal type="number" pos:start="127:61" pos:end="127:61">1</literal></expr>)</condition><block type="pseudo" pos:start="127:64" pos:end="127:76"><block_content pos:start="127:64" pos:end="127:76"> <expr_stmt pos:start="127:64" pos:end="127:76"><expr pos:start="127:64" pos:end="127:75"><name pos:start="127:64" pos:end="127:73">usesFilter</name><operator pos:start="127:74" pos:end="127:74">=</operator><literal type="number" pos:start="127:75" pos:end="127:75">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	

	<comment type="block" pos:start="131:9" pos:end="131:36">/* unscaled special Cases */</comment>

	<if_stmt pos:start="133:9" pos:end="289:9"><if pos:start="133:9" pos:end="289:9">if<condition pos:start="133:11" pos:end="133:51">(<expr pos:start="133:12" pos:end="133:50"><name pos:start="133:12" pos:end="133:15">srcW</name><operator pos:start="133:16" pos:end="133:17">==</operator><name pos:start="133:18" pos:end="133:21">dstW</name> <operator pos:start="133:23" pos:end="133:24">&amp;&amp;</operator> <name pos:start="133:26" pos:end="133:29">srcH</name><operator pos:start="133:30" pos:end="133:31">==</operator><name pos:start="133:32" pos:end="133:35">dstH</name> <operator pos:start="133:37" pos:end="133:38">&amp;&amp;</operator> <operator pos:start="133:40" pos:end="133:40">!</operator><name pos:start="133:41" pos:end="133:50">usesFilter</name></expr>)</condition>

	<block pos:start="135:9" pos:end="289:9">{<block_content pos:start="139:17" pos:end="287:17">

		<comment type="block" pos:start="137:17" pos:end="137:29">/* yuv2bgr */</comment>

		<if_stmt pos:start="139:17" pos:end="173:17"><if pos:start="139:17" pos:end="173:17">if<condition pos:start="139:19" pos:end="139:62">(<expr pos:start="139:20" pos:end="139:61"><call pos:start="139:20" pos:end="139:41"><name pos:start="139:20" pos:end="139:30">isPlanarYUV</name><argument_list pos:start="139:31" pos:end="139:41">(<argument pos:start="139:32" pos:end="139:40"><expr pos:start="139:32" pos:end="139:40"><name pos:start="139:32" pos:end="139:40">srcFormat</name></expr></argument>)</argument_list></call> <operator pos:start="139:43" pos:end="139:44">&amp;&amp;</operator> <call pos:start="139:46" pos:end="139:61"><name pos:start="139:46" pos:end="139:50">isBGR</name><argument_list pos:start="139:51" pos:end="139:61">(<argument pos:start="139:52" pos:end="139:60"><expr pos:start="139:52" pos:end="139:60"><name pos:start="139:52" pos:end="139:60">dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition>

		<block pos:start="141:17" pos:end="173:17">{<block_content pos:start="147:25" pos:end="171:33">

			<comment type="line" pos:start="143:25" pos:end="143:121">// FIXME multiple yuv2rgb converters wont work that way cuz that thing is full of globals&amp;statics</comment>

<cpp:ifdef pos:start="145:1" pos:end="145:22">#<cpp:directive pos:start="145:2" pos:end="145:6">ifdef</cpp:directive> <name pos:start="145:8" pos:end="145:22">WORDS_BIGENDIAN</name></cpp:ifdef>

			<if_stmt pos:start="147:25" pos:end="156:0"><if pos:start="147:25" pos:end="149:83">if<condition pos:start="147:27" pos:end="147:51">(<expr pos:start="147:28" pos:end="147:50"><name pos:start="147:28" pos:end="147:36">dstFormat</name><operator pos:start="147:37" pos:end="147:38">==</operator><name pos:start="147:39" pos:end="147:50">IMGFMT_BGR32</name></expr>)</condition><block type="pseudo" pos:start="149:33" pos:end="149:83"><block_content pos:start="149:33" pos:end="149:83">

				<expr_stmt pos:start="149:33" pos:end="149:83"><expr pos:start="149:33" pos:end="149:82"><call pos:start="149:33" pos:end="149:82"><name pos:start="149:33" pos:end="149:44">yuv2rgb_init</name><argument_list pos:start="149:45" pos:end="149:82">( <argument pos:start="149:47" pos:end="149:60"><expr pos:start="149:47" pos:end="149:60"><name pos:start="149:47" pos:end="149:55">dstFormat</name><operator pos:start="149:56" pos:end="149:56">&amp;</operator><literal type="number" pos:start="149:57" pos:end="149:60">0xFF</literal></expr></argument> <comment type="block" pos:start="149:62" pos:end="149:71">/* =bpp */</comment>, <argument pos:start="149:74" pos:end="149:81"><expr pos:start="149:74" pos:end="149:81"><name pos:start="149:74" pos:end="149:81">MODE_BGR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

			<else pos:start="151:25" pos:end="156:0">else<block type="pseudo" pos:start="153:33" pos:end="156:0"><block_content pos:start="153:33" pos:end="156:0">

				<expr_stmt pos:start="153:33" pos:end="156:0"><expr pos:start="153:33" pos:end="153:82"><call pos:start="153:33" pos:end="153:82"><name pos:start="153:33" pos:end="153:44">yuv2rgb_init</name><argument_list pos:start="153:45" pos:end="153:82">( <argument pos:start="153:47" pos:end="153:60"><expr pos:start="153:47" pos:end="153:60"><name pos:start="153:47" pos:end="153:55">dstFormat</name><operator pos:start="153:56" pos:end="153:56">&amp;</operator><literal type="number" pos:start="153:57" pos:end="153:60">0xFF</literal></expr></argument> <comment type="block" pos:start="153:62" pos:end="153:71">/* =bpp */</comment>, <argument pos:start="153:74" pos:end="153:81"><expr pos:start="153:74" pos:end="153:81"><name pos:start="153:74" pos:end="153:81">MODE_RGB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else pos:start="155:1" pos:end="155:5">#<cpp:directive pos:start="155:2" pos:end="155:5">else</cpp:directive></cpp:else>

			<expr_stmt pos:start="157:25" pos:end="160:0"><expr pos:start="157:25" pos:end="157:74"><call pos:start="157:25" pos:end="157:74"><name pos:start="157:25" pos:end="157:36">yuv2rgb_init</name><argument_list pos:start="157:37" pos:end="157:74">( <argument pos:start="157:39" pos:end="157:52"><expr pos:start="157:39" pos:end="157:52"><name pos:start="157:39" pos:end="157:47">dstFormat</name><operator pos:start="157:48" pos:end="157:48">&amp;</operator><literal type="number" pos:start="157:49" pos:end="157:52">0xFF</literal></expr></argument> <comment type="block" pos:start="157:54" pos:end="157:63">/* =bpp */</comment>, <argument pos:start="157:66" pos:end="157:73"><expr pos:start="157:66" pos:end="157:73"><name pos:start="157:66" pos:end="157:73">MODE_RGB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="159:1" pos:end="159:6">#<cpp:directive pos:start="159:2" pos:end="159:6">endif</cpp:directive></cpp:endif>

			<expr_stmt pos:start="161:25" pos:end="161:51"><expr pos:start="161:25" pos:end="161:50"><name pos:start="161:25" pos:end="161:34"><name pos:start="161:25" pos:end="161:25">c</name><operator pos:start="161:26" pos:end="161:27">-&gt;</operator><name pos:start="161:28" pos:end="161:34">swScale</name></name><operator pos:start="161:35" pos:end="161:35">=</operator> <name pos:start="161:37" pos:end="161:50">planarYuvToBgr</name></expr>;</expr_stmt>



			<if_stmt pos:start="165:25" pos:end="169:94"><if pos:start="165:25" pos:end="169:94">if<condition pos:start="165:27" pos:end="165:48">(<expr pos:start="165:28" pos:end="165:47"><name pos:start="165:28" pos:end="165:32">flags</name><operator pos:start="165:33" pos:end="165:33">&amp;</operator><name pos:start="165:34" pos:end="165:47">SWS_PRINT_INFO</name></expr>)</condition><block type="pseudo" pos:start="167:33" pos:end="169:94"><block_content pos:start="167:33" pos:end="169:94">

				<expr_stmt pos:start="167:33" pos:end="169:94"><expr pos:start="167:33" pos:end="169:93"><call pos:start="167:33" pos:end="169:93"><name pos:start="167:33" pos:end="167:38">printf</name><argument_list pos:start="167:39" pos:end="169:93">(<argument pos:start="167:40" pos:end="167:94"><expr pos:start="167:40" pos:end="167:94"><literal type="string" pos:start="167:40" pos:end="167:94">"SwScaler: using unscaled %s -&gt; %s special converter\n"</literal></expr></argument>, 

					<argument pos:start="169:41" pos:end="169:65"><expr pos:start="169:41" pos:end="169:65"><call pos:start="169:41" pos:end="169:65"><name pos:start="169:41" pos:end="169:54">vo_format_name</name><argument_list pos:start="169:55" pos:end="169:65">(<argument pos:start="169:56" pos:end="169:64"><expr pos:start="169:56" pos:end="169:64"><name pos:start="169:56" pos:end="169:64">srcFormat</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="169:68" pos:end="169:92"><expr pos:start="169:68" pos:end="169:92"><call pos:start="169:68" pos:end="169:92"><name pos:start="169:68" pos:end="169:81">vo_format_name</name><argument_list pos:start="169:82" pos:end="169:92">(<argument pos:start="169:83" pos:end="169:91"><expr pos:start="169:83" pos:end="169:91"><name pos:start="169:83" pos:end="169:91">dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<return pos:start="171:25" pos:end="171:33">return <expr pos:start="171:32" pos:end="171:32"><name pos:start="171:32" pos:end="171:32">c</name></expr>;</return>

		</block_content>}</block></if></if_stmt>



		<comment type="block" pos:start="177:17" pos:end="177:33">/* simple copy */</comment>

		<if_stmt pos:start="179:17" pos:end="195:17"><if pos:start="179:17" pos:end="195:17">if<condition pos:start="179:19" pos:end="179:96">(<expr pos:start="179:20" pos:end="179:95"><name pos:start="179:20" pos:end="179:28">srcFormat</name> <operator pos:start="179:30" pos:end="179:31">==</operator> <name pos:start="179:33" pos:end="179:41">dstFormat</name> <operator pos:start="179:43" pos:end="179:44">||</operator> <operator pos:start="179:46" pos:end="179:46">(</operator><call pos:start="179:47" pos:end="179:68"><name pos:start="179:47" pos:end="179:57">isPlanarYUV</name><argument_list pos:start="179:58" pos:end="179:68">(<argument pos:start="179:59" pos:end="179:67"><expr pos:start="179:59" pos:end="179:67"><name pos:start="179:59" pos:end="179:67">srcFormat</name></expr></argument>)</argument_list></call> <operator pos:start="179:70" pos:end="179:71">&amp;&amp;</operator> <call pos:start="179:73" pos:end="179:94"><name pos:start="179:73" pos:end="179:83">isPlanarYUV</name><argument_list pos:start="179:84" pos:end="179:94">(<argument pos:start="179:85" pos:end="179:93"><expr pos:start="179:85" pos:end="179:93"><name pos:start="179:85" pos:end="179:93">dstFormat</name></expr></argument>)</argument_list></call><operator pos:start="179:95" pos:end="179:95">)</operator></expr>)</condition>

		<block pos:start="181:17" pos:end="195:17">{<block_content pos:start="183:25" pos:end="193:33">

			<expr_stmt pos:start="183:25" pos:end="183:47"><expr pos:start="183:25" pos:end="183:46"><name pos:start="183:25" pos:end="183:34"><name pos:start="183:25" pos:end="183:25">c</name><operator pos:start="183:26" pos:end="183:27">-&gt;</operator><name pos:start="183:28" pos:end="183:34">swScale</name></name><operator pos:start="183:35" pos:end="183:35">=</operator> <name pos:start="183:37" pos:end="183:46">simpleCopy</name></expr>;</expr_stmt>



			<if_stmt pos:start="187:25" pos:end="191:94"><if pos:start="187:25" pos:end="191:94">if<condition pos:start="187:27" pos:end="187:48">(<expr pos:start="187:28" pos:end="187:47"><name pos:start="187:28" pos:end="187:32">flags</name><operator pos:start="187:33" pos:end="187:33">&amp;</operator><name pos:start="187:34" pos:end="187:47">SWS_PRINT_INFO</name></expr>)</condition><block type="pseudo" pos:start="189:33" pos:end="191:94"><block_content pos:start="189:33" pos:end="191:94">

				<expr_stmt pos:start="189:33" pos:end="191:94"><expr pos:start="189:33" pos:end="191:93"><call pos:start="189:33" pos:end="191:93"><name pos:start="189:33" pos:end="189:38">printf</name><argument_list pos:start="189:39" pos:end="191:93">(<argument pos:start="189:40" pos:end="189:94"><expr pos:start="189:40" pos:end="189:94"><literal type="string" pos:start="189:40" pos:end="189:94">"SwScaler: using unscaled %s -&gt; %s special converter\n"</literal></expr></argument>, 

					<argument pos:start="191:41" pos:end="191:65"><expr pos:start="191:41" pos:end="191:65"><call pos:start="191:41" pos:end="191:65"><name pos:start="191:41" pos:end="191:54">vo_format_name</name><argument_list pos:start="191:55" pos:end="191:65">(<argument pos:start="191:56" pos:end="191:64"><expr pos:start="191:56" pos:end="191:64"><name pos:start="191:56" pos:end="191:64">srcFormat</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="191:68" pos:end="191:92"><expr pos:start="191:68" pos:end="191:92"><call pos:start="191:68" pos:end="191:92"><name pos:start="191:68" pos:end="191:81">vo_format_name</name><argument_list pos:start="191:82" pos:end="191:92">(<argument pos:start="191:83" pos:end="191:91"><expr pos:start="191:83" pos:end="191:91"><name pos:start="191:83" pos:end="191:91">dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<return pos:start="193:25" pos:end="193:33">return <expr pos:start="193:32" pos:end="193:32"><name pos:start="193:32" pos:end="193:32">c</name></expr>;</return>

		</block_content>}</block></if></if_stmt>

		

		<comment type="block" pos:start="199:17" pos:end="199:42">/* bgr32to24 &amp; rgb32to24*/</comment>

		<if_stmt pos:start="201:17" pos:end="219:17"><if pos:start="201:17" pos:end="219:17">if<condition pos:start="201:19" pos:end="203:72">(<expr pos:start="201:20" pos:end="203:71"><operator pos:start="201:20" pos:end="201:20">(</operator><name pos:start="201:21" pos:end="201:29">srcFormat</name><operator pos:start="201:30" pos:end="201:31">==</operator><name pos:start="201:32" pos:end="201:43">IMGFMT_BGR32</name> <operator pos:start="201:45" pos:end="201:46">&amp;&amp;</operator> <name pos:start="201:48" pos:end="201:56">dstFormat</name><operator pos:start="201:57" pos:end="201:58">==</operator><name pos:start="201:59" pos:end="201:70">IMGFMT_BGR24</name><operator pos:start="201:71" pos:end="201:71">)</operator>

		 <operator pos:start="203:18" pos:end="203:19">||</operator><operator pos:start="203:20" pos:end="203:20">(</operator><name pos:start="203:21" pos:end="203:29">srcFormat</name><operator pos:start="203:30" pos:end="203:31">==</operator><name pos:start="203:32" pos:end="203:43">IMGFMT_RGB32</name> <operator pos:start="203:45" pos:end="203:46">&amp;&amp;</operator> <name pos:start="203:48" pos:end="203:56">dstFormat</name><operator pos:start="203:57" pos:end="203:58">==</operator><name pos:start="203:59" pos:end="203:70">IMGFMT_RGB24</name><operator pos:start="203:71" pos:end="203:71">)</operator></expr>)</condition>

		<block pos:start="205:17" pos:end="219:17">{<block_content pos:start="207:25" pos:end="217:33">

			<expr_stmt pos:start="207:25" pos:end="207:53"><expr pos:start="207:25" pos:end="207:52"><name pos:start="207:25" pos:end="207:34"><name pos:start="207:25" pos:end="207:25">c</name><operator pos:start="207:26" pos:end="207:27">-&gt;</operator><name pos:start="207:28" pos:end="207:34">swScale</name></name><operator pos:start="207:35" pos:end="207:35">=</operator> <name pos:start="207:37" pos:end="207:52">bgr32to24Wrapper</name></expr>;</expr_stmt>



			<if_stmt pos:start="211:25" pos:end="215:94"><if pos:start="211:25" pos:end="215:94">if<condition pos:start="211:27" pos:end="211:48">(<expr pos:start="211:28" pos:end="211:47"><name pos:start="211:28" pos:end="211:32">flags</name><operator pos:start="211:33" pos:end="211:33">&amp;</operator><name pos:start="211:34" pos:end="211:47">SWS_PRINT_INFO</name></expr>)</condition><block type="pseudo" pos:start="213:33" pos:end="215:94"><block_content pos:start="213:33" pos:end="215:94">

				<expr_stmt pos:start="213:33" pos:end="215:94"><expr pos:start="213:33" pos:end="215:93"><call pos:start="213:33" pos:end="215:93"><name pos:start="213:33" pos:end="213:38">printf</name><argument_list pos:start="213:39" pos:end="215:93">(<argument pos:start="213:40" pos:end="213:94"><expr pos:start="213:40" pos:end="213:94"><literal type="string" pos:start="213:40" pos:end="213:94">"SwScaler: using unscaled %s -&gt; %s special converter\n"</literal></expr></argument>, 

					<argument pos:start="215:41" pos:end="215:65"><expr pos:start="215:41" pos:end="215:65"><call pos:start="215:41" pos:end="215:65"><name pos:start="215:41" pos:end="215:54">vo_format_name</name><argument_list pos:start="215:55" pos:end="215:65">(<argument pos:start="215:56" pos:end="215:64"><expr pos:start="215:56" pos:end="215:64"><name pos:start="215:56" pos:end="215:64">srcFormat</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="215:68" pos:end="215:92"><expr pos:start="215:68" pos:end="215:92"><call pos:start="215:68" pos:end="215:92"><name pos:start="215:68" pos:end="215:81">vo_format_name</name><argument_list pos:start="215:82" pos:end="215:92">(<argument pos:start="215:83" pos:end="215:91"><expr pos:start="215:83" pos:end="215:91"><name pos:start="215:83" pos:end="215:91">dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<return pos:start="217:25" pos:end="217:33">return <expr pos:start="217:32" pos:end="217:32"><name pos:start="217:32" pos:end="217:32">c</name></expr>;</return>

		</block_content>}</block></if></if_stmt>

		

		<comment type="block" pos:start="223:17" pos:end="223:42">/* bgr24to32 &amp; rgb24to32*/</comment>

		<if_stmt pos:start="225:17" pos:end="243:17"><if pos:start="225:17" pos:end="243:17">if<condition pos:start="225:19" pos:end="227:72">(<expr pos:start="225:20" pos:end="227:71"><operator pos:start="225:20" pos:end="225:20">(</operator><name pos:start="225:21" pos:end="225:29">srcFormat</name><operator pos:start="225:30" pos:end="225:31">==</operator><name pos:start="225:32" pos:end="225:43">IMGFMT_BGR24</name> <operator pos:start="225:45" pos:end="225:46">&amp;&amp;</operator> <name pos:start="225:48" pos:end="225:56">dstFormat</name><operator pos:start="225:57" pos:end="225:58">==</operator><name pos:start="225:59" pos:end="225:70">IMGFMT_BGR32</name><operator pos:start="225:71" pos:end="225:71">)</operator>

		 <operator pos:start="227:18" pos:end="227:19">||</operator><operator pos:start="227:20" pos:end="227:20">(</operator><name pos:start="227:21" pos:end="227:29">srcFormat</name><operator pos:start="227:30" pos:end="227:31">==</operator><name pos:start="227:32" pos:end="227:43">IMGFMT_RGB24</name> <operator pos:start="227:45" pos:end="227:46">&amp;&amp;</operator> <name pos:start="227:48" pos:end="227:56">dstFormat</name><operator pos:start="227:57" pos:end="227:58">==</operator><name pos:start="227:59" pos:end="227:70">IMGFMT_RGB32</name><operator pos:start="227:71" pos:end="227:71">)</operator></expr>)</condition>

		<block pos:start="229:17" pos:end="243:17">{<block_content pos:start="231:25" pos:end="241:33">

			<expr_stmt pos:start="231:25" pos:end="231:53"><expr pos:start="231:25" pos:end="231:52"><name pos:start="231:25" pos:end="231:34"><name pos:start="231:25" pos:end="231:25">c</name><operator pos:start="231:26" pos:end="231:27">-&gt;</operator><name pos:start="231:28" pos:end="231:34">swScale</name></name><operator pos:start="231:35" pos:end="231:35">=</operator> <name pos:start="231:37" pos:end="231:52">bgr24to32Wrapper</name></expr>;</expr_stmt>



			<if_stmt pos:start="235:25" pos:end="239:94"><if pos:start="235:25" pos:end="239:94">if<condition pos:start="235:27" pos:end="235:48">(<expr pos:start="235:28" pos:end="235:47"><name pos:start="235:28" pos:end="235:32">flags</name><operator pos:start="235:33" pos:end="235:33">&amp;</operator><name pos:start="235:34" pos:end="235:47">SWS_PRINT_INFO</name></expr>)</condition><block type="pseudo" pos:start="237:33" pos:end="239:94"><block_content pos:start="237:33" pos:end="239:94">

				<expr_stmt pos:start="237:33" pos:end="239:94"><expr pos:start="237:33" pos:end="239:93"><call pos:start="237:33" pos:end="239:93"><name pos:start="237:33" pos:end="237:38">printf</name><argument_list pos:start="237:39" pos:end="239:93">(<argument pos:start="237:40" pos:end="237:94"><expr pos:start="237:40" pos:end="237:94"><literal type="string" pos:start="237:40" pos:end="237:94">"SwScaler: using unscaled %s -&gt; %s special converter\n"</literal></expr></argument>, 

					<argument pos:start="239:41" pos:end="239:65"><expr pos:start="239:41" pos:end="239:65"><call pos:start="239:41" pos:end="239:65"><name pos:start="239:41" pos:end="239:54">vo_format_name</name><argument_list pos:start="239:55" pos:end="239:65">(<argument pos:start="239:56" pos:end="239:64"><expr pos:start="239:56" pos:end="239:64"><name pos:start="239:56" pos:end="239:64">srcFormat</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="239:68" pos:end="239:92"><expr pos:start="239:68" pos:end="239:92"><call pos:start="239:68" pos:end="239:92"><name pos:start="239:68" pos:end="239:81">vo_format_name</name><argument_list pos:start="239:82" pos:end="239:92">(<argument pos:start="239:83" pos:end="239:91"><expr pos:start="239:83" pos:end="239:91"><name pos:start="239:83" pos:end="239:91">dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<return pos:start="241:25" pos:end="241:33">return <expr pos:start="241:32" pos:end="241:32"><name pos:start="241:32" pos:end="241:32">c</name></expr>;</return>

		</block_content>}</block></if></if_stmt>



		<comment type="block" pos:start="247:17" pos:end="247:31">/* bgr15to16 */</comment>

		<if_stmt pos:start="249:17" pos:end="265:17"><if pos:start="249:17" pos:end="265:17">if<condition pos:start="249:19" pos:end="249:70">(<expr pos:start="249:20" pos:end="249:69"><name pos:start="249:20" pos:end="249:28">srcFormat</name><operator pos:start="249:29" pos:end="249:30">==</operator><name pos:start="249:31" pos:end="249:42">IMGFMT_BGR15</name> <operator pos:start="249:44" pos:end="249:45">&amp;&amp;</operator> <name pos:start="249:47" pos:end="249:55">dstFormat</name><operator pos:start="249:56" pos:end="249:57">==</operator><name pos:start="249:58" pos:end="249:69">IMGFMT_BGR16</name></expr>)</condition>

		<block pos:start="251:17" pos:end="265:17">{<block_content pos:start="253:25" pos:end="263:33">

			<expr_stmt pos:start="253:25" pos:end="253:53"><expr pos:start="253:25" pos:end="253:52"><name pos:start="253:25" pos:end="253:34"><name pos:start="253:25" pos:end="253:25">c</name><operator pos:start="253:26" pos:end="253:27">-&gt;</operator><name pos:start="253:28" pos:end="253:34">swScale</name></name><operator pos:start="253:35" pos:end="253:35">=</operator> <name pos:start="253:37" pos:end="253:52">bgr15to16Wrapper</name></expr>;</expr_stmt>



			<if_stmt pos:start="257:25" pos:end="261:94"><if pos:start="257:25" pos:end="261:94">if<condition pos:start="257:27" pos:end="257:48">(<expr pos:start="257:28" pos:end="257:47"><name pos:start="257:28" pos:end="257:32">flags</name><operator pos:start="257:33" pos:end="257:33">&amp;</operator><name pos:start="257:34" pos:end="257:47">SWS_PRINT_INFO</name></expr>)</condition><block type="pseudo" pos:start="259:33" pos:end="261:94"><block_content pos:start="259:33" pos:end="261:94">

				<expr_stmt pos:start="259:33" pos:end="261:94"><expr pos:start="259:33" pos:end="261:93"><call pos:start="259:33" pos:end="261:93"><name pos:start="259:33" pos:end="259:38">printf</name><argument_list pos:start="259:39" pos:end="261:93">(<argument pos:start="259:40" pos:end="259:94"><expr pos:start="259:40" pos:end="259:94"><literal type="string" pos:start="259:40" pos:end="259:94">"SwScaler: using unscaled %s -&gt; %s special converter\n"</literal></expr></argument>, 

					<argument pos:start="261:41" pos:end="261:65"><expr pos:start="261:41" pos:end="261:65"><call pos:start="261:41" pos:end="261:65"><name pos:start="261:41" pos:end="261:54">vo_format_name</name><argument_list pos:start="261:55" pos:end="261:65">(<argument pos:start="261:56" pos:end="261:64"><expr pos:start="261:56" pos:end="261:64"><name pos:start="261:56" pos:end="261:64">srcFormat</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="261:68" pos:end="261:92"><expr pos:start="261:68" pos:end="261:92"><call pos:start="261:68" pos:end="261:92"><name pos:start="261:68" pos:end="261:81">vo_format_name</name><argument_list pos:start="261:82" pos:end="261:92">(<argument pos:start="261:83" pos:end="261:91"><expr pos:start="261:83" pos:end="261:91"><name pos:start="261:83" pos:end="261:91">dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<return pos:start="263:25" pos:end="263:33">return <expr pos:start="263:32" pos:end="263:32"><name pos:start="263:32" pos:end="263:32">c</name></expr>;</return>

		</block_content>}</block></if></if_stmt>



		<comment type="block" pos:start="269:17" pos:end="269:33">/* bgr24toYV12 */</comment>

		<if_stmt pos:start="271:17" pos:end="287:17"><if pos:start="271:17" pos:end="287:17">if<condition pos:start="271:19" pos:end="271:69">(<expr pos:start="271:20" pos:end="271:68"><name pos:start="271:20" pos:end="271:28">srcFormat</name><operator pos:start="271:29" pos:end="271:30">==</operator><name pos:start="271:31" pos:end="271:42">IMGFMT_BGR24</name> <operator pos:start="271:44" pos:end="271:45">&amp;&amp;</operator> <name pos:start="271:47" pos:end="271:55">dstFormat</name><operator pos:start="271:56" pos:end="271:57">==</operator><name pos:start="271:58" pos:end="271:68">IMGFMT_YV12</name></expr>)</condition>

		<block pos:start="273:17" pos:end="287:17">{<block_content pos:start="275:25" pos:end="285:33">

			<expr_stmt pos:start="275:25" pos:end="275:55"><expr pos:start="275:25" pos:end="275:54"><name pos:start="275:25" pos:end="275:34"><name pos:start="275:25" pos:end="275:25">c</name><operator pos:start="275:26" pos:end="275:27">-&gt;</operator><name pos:start="275:28" pos:end="275:34">swScale</name></name><operator pos:start="275:35" pos:end="275:35">=</operator> <name pos:start="275:37" pos:end="275:54">bgr24toyv12Wrapper</name></expr>;</expr_stmt>



			<if_stmt pos:start="279:25" pos:end="283:94"><if pos:start="279:25" pos:end="283:94">if<condition pos:start="279:27" pos:end="279:48">(<expr pos:start="279:28" pos:end="279:47"><name pos:start="279:28" pos:end="279:32">flags</name><operator pos:start="279:33" pos:end="279:33">&amp;</operator><name pos:start="279:34" pos:end="279:47">SWS_PRINT_INFO</name></expr>)</condition><block type="pseudo" pos:start="281:33" pos:end="283:94"><block_content pos:start="281:33" pos:end="283:94">

				<expr_stmt pos:start="281:33" pos:end="283:94"><expr pos:start="281:33" pos:end="283:93"><call pos:start="281:33" pos:end="283:93"><name pos:start="281:33" pos:end="281:38">printf</name><argument_list pos:start="281:39" pos:end="283:93">(<argument pos:start="281:40" pos:end="281:94"><expr pos:start="281:40" pos:end="281:94"><literal type="string" pos:start="281:40" pos:end="281:94">"SwScaler: using unscaled %s -&gt; %s special converter\n"</literal></expr></argument>, 

					<argument pos:start="283:41" pos:end="283:65"><expr pos:start="283:41" pos:end="283:65"><call pos:start="283:41" pos:end="283:65"><name pos:start="283:41" pos:end="283:54">vo_format_name</name><argument_list pos:start="283:55" pos:end="283:65">(<argument pos:start="283:56" pos:end="283:64"><expr pos:start="283:56" pos:end="283:64"><name pos:start="283:56" pos:end="283:64">srcFormat</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="283:68" pos:end="283:92"><expr pos:start="283:68" pos:end="283:92"><call pos:start="283:68" pos:end="283:92"><name pos:start="283:68" pos:end="283:81">vo_format_name</name><argument_list pos:start="283:82" pos:end="283:92">(<argument pos:start="283:83" pos:end="283:91"><expr pos:start="283:83" pos:end="283:91"><name pos:start="283:83" pos:end="283:91">dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<return pos:start="285:25" pos:end="285:33">return <expr pos:start="285:32" pos:end="285:32"><name pos:start="285:32" pos:end="285:32">c</name></expr>;</return>

		</block_content>}</block></if></if_stmt>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="293:9" pos:end="313:35"><if pos:start="293:9" pos:end="309:9">if<condition pos:start="293:11" pos:end="293:27">(<expr pos:start="293:12" pos:end="293:26"><name pos:start="293:12" pos:end="293:26"><name pos:start="293:12" pos:end="293:18">cpuCaps</name><operator pos:start="293:19" pos:end="293:19">.</operator><name pos:start="293:20" pos:end="293:26">hasMMX2</name></name></expr>)</condition>

	<block pos:start="295:9" pos:end="309:9">{<block_content pos:start="297:17" pos:end="307:17">

		<expr_stmt pos:start="297:17" pos:end="297:88"><expr pos:start="297:17" pos:end="297:87"><name pos:start="297:17" pos:end="297:32"><name pos:start="297:17" pos:end="297:17">c</name><operator pos:start="297:18" pos:end="297:19">-&gt;</operator><name pos:start="297:20" pos:end="297:32">canMMX2BeUsed</name></name><operator pos:start="297:33" pos:end="297:33">=</operator> <ternary pos:start="297:35" pos:end="297:87"><condition pos:start="297:35" pos:end="297:81"><expr pos:start="297:35" pos:end="297:79"><operator pos:start="297:35" pos:end="297:35">(</operator><name pos:start="297:36" pos:end="297:39">dstW</name> <operator pos:start="297:41" pos:end="297:42">&gt;=</operator><name pos:start="297:43" pos:end="297:46">srcW</name> <operator pos:start="297:48" pos:end="297:49">&amp;&amp;</operator> <operator pos:start="297:51" pos:end="297:51">(</operator><name pos:start="297:52" pos:end="297:55">dstW</name><operator pos:start="297:56" pos:end="297:56">&amp;</operator><literal type="number" pos:start="297:57" pos:end="297:58">31</literal><operator pos:start="297:59" pos:end="297:59">)</operator><operator pos:start="297:60" pos:end="297:61">==</operator><literal type="number" pos:start="297:62" pos:end="297:62">0</literal> <operator pos:start="297:64" pos:end="297:65">&amp;&amp;</operator> <operator pos:start="297:67" pos:end="297:67">(</operator><name pos:start="297:68" pos:end="297:71">srcW</name><operator pos:start="297:72" pos:end="297:72">&amp;</operator><literal type="number" pos:start="297:73" pos:end="297:74">15</literal><operator pos:start="297:75" pos:end="297:75">)</operator><operator pos:start="297:76" pos:end="297:77">==</operator><literal type="number" pos:start="297:78" pos:end="297:78">0</literal><operator pos:start="297:79" pos:end="297:79">)</operator></expr> ?</condition><then pos:start="297:83" pos:end="297:83"> <expr pos:start="297:83" pos:end="297:83"><literal type="number" pos:start="297:83" pos:end="297:83">1</literal></expr> </then><else pos:start="297:85" pos:end="297:87">: <expr pos:start="297:87" pos:end="297:87"><literal type="number" pos:start="297:87" pos:end="297:87">0</literal></expr></else></ternary></expr>;</expr_stmt>

		<if_stmt pos:start="299:17" pos:end="307:17"><if pos:start="299:17" pos:end="307:17">if<condition pos:start="299:19" pos:end="299:97">(<expr pos:start="299:20" pos:end="299:96"><operator pos:start="299:20" pos:end="299:20">!</operator><name pos:start="299:21" pos:end="299:36"><name pos:start="299:21" pos:end="299:21">c</name><operator pos:start="299:22" pos:end="299:23">-&gt;</operator><name pos:start="299:24" pos:end="299:36">canMMX2BeUsed</name></name> <operator pos:start="299:38" pos:end="299:39">&amp;&amp;</operator> <name pos:start="299:41" pos:end="299:44">dstW</name> <operator pos:start="299:46" pos:end="299:47">&gt;=</operator><name pos:start="299:48" pos:end="299:51">srcW</name> <operator pos:start="299:53" pos:end="299:54">&amp;&amp;</operator> <operator pos:start="299:56" pos:end="299:56">(</operator><name pos:start="299:57" pos:end="299:60">srcW</name><operator pos:start="299:61" pos:end="299:61">&amp;</operator><literal type="number" pos:start="299:62" pos:end="299:63">15</literal><operator pos:start="299:64" pos:end="299:64">)</operator><operator pos:start="299:65" pos:end="299:66">==</operator><literal type="number" pos:start="299:67" pos:end="299:67">0</literal> <operator pos:start="299:69" pos:end="299:70">&amp;&amp;</operator> <operator pos:start="299:72" pos:end="299:72">(</operator><name pos:start="299:73" pos:end="299:77">flags</name><operator pos:start="299:78" pos:end="299:78">&amp;</operator><name pos:start="299:79" pos:end="299:95">SWS_FAST_BILINEAR</name><operator pos:start="299:96" pos:end="299:96">)</operator></expr>)</condition>

		<block pos:start="301:17" pos:end="307:17">{<block_content pos:start="303:25" pos:end="305:118">

			<if_stmt pos:start="303:25" pos:end="305:118"><if pos:start="303:25" pos:end="305:118">if<condition pos:start="303:27" pos:end="303:48">(<expr pos:start="303:28" pos:end="303:47"><name pos:start="303:28" pos:end="303:32">flags</name><operator pos:start="303:33" pos:end="303:33">&amp;</operator><name pos:start="303:34" pos:end="303:47">SWS_PRINT_INFO</name></expr>)</condition><block type="pseudo" pos:start="305:33" pos:end="305:118"><block_content pos:start="305:33" pos:end="305:118">

				<expr_stmt pos:start="305:33" pos:end="305:118"><expr pos:start="305:33" pos:end="305:117"><call pos:start="305:33" pos:end="305:117"><name pos:start="305:33" pos:end="305:39">fprintf</name><argument_list pos:start="305:40" pos:end="305:117">(<argument pos:start="305:41" pos:end="305:46"><expr pos:start="305:41" pos:end="305:46"><name pos:start="305:41" pos:end="305:46">stderr</name></expr></argument>, <argument pos:start="305:49" pos:end="305:116"><expr pos:start="305:49" pos:end="305:116"><literal type="string" pos:start="305:49" pos:end="305:116">"SwScaler: output Width is not a multiple of 32 -&gt; no MMX2 scaler\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		</block_content>}</block></if></if_stmt>

	</block_content>}</block></if>

	<else pos:start="311:9" pos:end="313:35">else<block type="pseudo" pos:start="313:17" pos:end="313:35"><block_content pos:start="313:17" pos:end="313:35">

		<expr_stmt pos:start="313:17" pos:end="313:35"><expr pos:start="313:17" pos:end="313:34"><name pos:start="313:17" pos:end="313:32"><name pos:start="313:17" pos:end="313:17">c</name><operator pos:start="313:18" pos:end="313:19">-&gt;</operator><name pos:start="313:20" pos:end="313:32">canMMX2BeUsed</name></name><operator pos:start="313:33" pos:end="313:33">=</operator><literal type="number" pos:start="313:34" pos:end="313:34">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>





	<comment type="block" pos:start="319:9" pos:end="319:89">/* dont use full vertical UV input/internaly if the source doesnt even have it */</comment>

	<if_stmt pos:start="321:9" pos:end="321:75"><if pos:start="321:9" pos:end="321:75">if<condition pos:start="321:11" pos:end="321:33">(<expr pos:start="321:12" pos:end="321:32"><call pos:start="321:12" pos:end="321:32"><name pos:start="321:12" pos:end="321:21">isHalfChrV</name><argument_list pos:start="321:22" pos:end="321:32">(<argument pos:start="321:23" pos:end="321:31"><expr pos:start="321:23" pos:end="321:31"><name pos:start="321:23" pos:end="321:31">srcFormat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="321:35" pos:end="321:75"><block_content pos:start="321:35" pos:end="321:75"> <expr_stmt pos:start="321:35" pos:end="321:75"><expr pos:start="321:35" pos:end="321:74"><name pos:start="321:35" pos:end="321:42"><name pos:start="321:35" pos:end="321:35">c</name><operator pos:start="321:36" pos:end="321:37">-&gt;</operator><name pos:start="321:38" pos:end="321:42">flags</name></name><operator pos:start="321:43" pos:end="321:43">=</operator> <name pos:start="321:45" pos:end="321:49">flags</name><operator pos:start="321:50" pos:end="321:50">=</operator> <name pos:start="321:52" pos:end="321:56">flags</name><operator pos:start="321:57" pos:end="321:57">&amp;</operator><operator pos:start="321:58" pos:end="321:58">(</operator><operator pos:start="321:59" pos:end="321:59">~</operator><name pos:start="321:60" pos:end="321:73">SWS_FULL_CHR_V</name><operator pos:start="321:74" pos:end="321:74">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block" pos:start="323:9" pos:end="323:81">/* dont use full horizontal UV input if the source doesnt even have it */</comment>

	<if_stmt pos:start="325:9" pos:end="325:79"><if pos:start="325:9" pos:end="325:79">if<condition pos:start="325:11" pos:end="325:33">(<expr pos:start="325:12" pos:end="325:32"><call pos:start="325:12" pos:end="325:32"><name pos:start="325:12" pos:end="325:21">isHalfChrH</name><argument_list pos:start="325:22" pos:end="325:32">(<argument pos:start="325:23" pos:end="325:31"><expr pos:start="325:23" pos:end="325:31"><name pos:start="325:23" pos:end="325:31">srcFormat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="325:35" pos:end="325:79"><block_content pos:start="325:35" pos:end="325:79"> <expr_stmt pos:start="325:35" pos:end="325:79"><expr pos:start="325:35" pos:end="325:78"><name pos:start="325:35" pos:end="325:42"><name pos:start="325:35" pos:end="325:35">c</name><operator pos:start="325:36" pos:end="325:37">-&gt;</operator><name pos:start="325:38" pos:end="325:42">flags</name></name><operator pos:start="325:43" pos:end="325:43">=</operator> <name pos:start="325:45" pos:end="325:49">flags</name><operator pos:start="325:50" pos:end="325:50">=</operator> <name pos:start="325:52" pos:end="325:56">flags</name><operator pos:start="325:57" pos:end="325:57">&amp;</operator><operator pos:start="325:58" pos:end="325:58">(</operator><operator pos:start="325:59" pos:end="325:59">~</operator><name pos:start="325:60" pos:end="325:77">SWS_FULL_CHR_H_INP</name><operator pos:start="325:78" pos:end="325:78">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block" pos:start="327:9" pos:end="327:91">/* dont use full horizontal UV internally if the destination doesnt even have it */</comment>

	<if_stmt pos:start="329:9" pos:end="329:79"><if pos:start="329:9" pos:end="329:79">if<condition pos:start="329:11" pos:end="329:33">(<expr pos:start="329:12" pos:end="329:32"><call pos:start="329:12" pos:end="329:32"><name pos:start="329:12" pos:end="329:21">isHalfChrH</name><argument_list pos:start="329:22" pos:end="329:32">(<argument pos:start="329:23" pos:end="329:31"><expr pos:start="329:23" pos:end="329:31"><name pos:start="329:23" pos:end="329:31">dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="329:35" pos:end="329:79"><block_content pos:start="329:35" pos:end="329:79"> <expr_stmt pos:start="329:35" pos:end="329:79"><expr pos:start="329:35" pos:end="329:78"><name pos:start="329:35" pos:end="329:42"><name pos:start="329:35" pos:end="329:35">c</name><operator pos:start="329:36" pos:end="329:37">-&gt;</operator><name pos:start="329:38" pos:end="329:42">flags</name></name><operator pos:start="329:43" pos:end="329:43">=</operator> <name pos:start="329:45" pos:end="329:49">flags</name><operator pos:start="329:50" pos:end="329:50">=</operator> <name pos:start="329:52" pos:end="329:56">flags</name><operator pos:start="329:57" pos:end="329:57">&amp;</operator><operator pos:start="329:58" pos:end="329:58">(</operator><operator pos:start="329:59" pos:end="329:59">~</operator><name pos:start="329:60" pos:end="329:77">SWS_FULL_CHR_H_INT</name><operator pos:start="329:78" pos:end="329:78">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<if_stmt pos:start="333:9" pos:end="335:64"><if pos:start="333:9" pos:end="333:57">if<condition pos:start="333:11" pos:end="333:36">(<expr pos:start="333:12" pos:end="333:35"><name pos:start="333:12" pos:end="333:16">flags</name><operator pos:start="333:17" pos:end="333:17">&amp;</operator><name pos:start="333:18" pos:end="333:35">SWS_FULL_CHR_H_INP</name></expr>)</condition><block type="pseudo" pos:start="333:41" pos:end="333:57"><block_content pos:start="333:41" pos:end="333:57">	<expr_stmt pos:start="333:41" pos:end="333:57"><expr pos:start="333:41" pos:end="333:56"><name pos:start="333:41" pos:end="333:50"><name pos:start="333:41" pos:end="333:41">c</name><operator pos:start="333:42" pos:end="333:43">-&gt;</operator><name pos:start="333:44" pos:end="333:50">chrSrcW</name></name><operator pos:start="333:51" pos:end="333:51">=</operator> <name pos:start="333:53" pos:end="333:56">srcW</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="335:9" pos:end="335:64">else<block type="pseudo" pos:start="335:41" pos:end="335:64"><block_content pos:start="335:41" pos:end="335:64">				<expr_stmt pos:start="335:41" pos:end="335:64"><expr pos:start="335:41" pos:end="335:63"><name pos:start="335:41" pos:end="335:50"><name pos:start="335:41" pos:end="335:41">c</name><operator pos:start="335:42" pos:end="335:43">-&gt;</operator><name pos:start="335:44" pos:end="335:50">chrSrcW</name></name><operator pos:start="335:51" pos:end="335:51">=</operator> <operator pos:start="335:53" pos:end="335:53">(</operator><name pos:start="335:54" pos:end="335:57">srcW</name><operator pos:start="335:58" pos:end="335:58">+</operator><literal type="number" pos:start="335:59" pos:end="335:59">1</literal><operator pos:start="335:60" pos:end="335:60">)</operator><operator pos:start="335:61" pos:end="335:62">&gt;&gt;</operator><literal type="number" pos:start="335:63" pos:end="335:63">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



	<if_stmt pos:start="339:9" pos:end="341:64"><if pos:start="339:9" pos:end="339:57">if<condition pos:start="339:11" pos:end="339:36">(<expr pos:start="339:12" pos:end="339:35"><name pos:start="339:12" pos:end="339:16">flags</name><operator pos:start="339:17" pos:end="339:17">&amp;</operator><name pos:start="339:18" pos:end="339:35">SWS_FULL_CHR_H_INT</name></expr>)</condition><block type="pseudo" pos:start="339:41" pos:end="339:57"><block_content pos:start="339:41" pos:end="339:57">	<expr_stmt pos:start="339:41" pos:end="339:57"><expr pos:start="339:41" pos:end="339:56"><name pos:start="339:41" pos:end="339:50"><name pos:start="339:41" pos:end="339:41">c</name><operator pos:start="339:42" pos:end="339:43">-&gt;</operator><name pos:start="339:44" pos:end="339:50">chrDstW</name></name><operator pos:start="339:51" pos:end="339:51">=</operator> <name pos:start="339:53" pos:end="339:56">dstW</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="341:9" pos:end="341:64">else<block type="pseudo" pos:start="341:41" pos:end="341:64"><block_content pos:start="341:41" pos:end="341:64">				<expr_stmt pos:start="341:41" pos:end="341:64"><expr pos:start="341:41" pos:end="341:63"><name pos:start="341:41" pos:end="341:50"><name pos:start="341:41" pos:end="341:41">c</name><operator pos:start="341:42" pos:end="341:43">-&gt;</operator><name pos:start="341:44" pos:end="341:50">chrDstW</name></name><operator pos:start="341:51" pos:end="341:51">=</operator> <operator pos:start="341:53" pos:end="341:53">(</operator><name pos:start="341:54" pos:end="341:57">dstW</name><operator pos:start="341:58" pos:end="341:58">+</operator><literal type="number" pos:start="341:59" pos:end="341:59">1</literal><operator pos:start="341:60" pos:end="341:60">)</operator><operator pos:start="341:61" pos:end="341:62">&gt;&gt;</operator><literal type="number" pos:start="341:63" pos:end="341:63">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



	<if_stmt pos:start="345:9" pos:end="347:64"><if pos:start="345:9" pos:end="345:57">if<condition pos:start="345:11" pos:end="345:32">(<expr pos:start="345:12" pos:end="345:31"><name pos:start="345:12" pos:end="345:16">flags</name><operator pos:start="345:17" pos:end="345:17">&amp;</operator><name pos:start="345:18" pos:end="345:31">SWS_FULL_CHR_V</name></expr>)</condition><block type="pseudo" pos:start="345:41" pos:end="345:57"><block_content pos:start="345:41" pos:end="345:57">	<expr_stmt pos:start="345:41" pos:end="345:57"><expr pos:start="345:41" pos:end="345:56"><name pos:start="345:41" pos:end="345:50"><name pos:start="345:41" pos:end="345:41">c</name><operator pos:start="345:42" pos:end="345:43">-&gt;</operator><name pos:start="345:44" pos:end="345:50">chrSrcH</name></name><operator pos:start="345:51" pos:end="345:51">=</operator> <name pos:start="345:53" pos:end="345:56">srcH</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="347:9" pos:end="347:64">else<block type="pseudo" pos:start="347:41" pos:end="347:64"><block_content pos:start="347:41" pos:end="347:64">				<expr_stmt pos:start="347:41" pos:end="347:64"><expr pos:start="347:41" pos:end="347:63"><name pos:start="347:41" pos:end="347:50"><name pos:start="347:41" pos:end="347:41">c</name><operator pos:start="347:42" pos:end="347:43">-&gt;</operator><name pos:start="347:44" pos:end="347:50">chrSrcH</name></name><operator pos:start="347:51" pos:end="347:51">=</operator> <operator pos:start="347:53" pos:end="347:53">(</operator><name pos:start="347:54" pos:end="347:57">srcH</name><operator pos:start="347:58" pos:end="347:58">+</operator><literal type="number" pos:start="347:59" pos:end="347:59">1</literal><operator pos:start="347:60" pos:end="347:60">)</operator><operator pos:start="347:61" pos:end="347:62">&gt;&gt;</operator><literal type="number" pos:start="347:63" pos:end="347:63">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



	<if_stmt pos:start="351:9" pos:end="353:57"><if pos:start="351:9" pos:end="351:64">if<condition pos:start="351:11" pos:end="351:33">(<expr pos:start="351:12" pos:end="351:32"><call pos:start="351:12" pos:end="351:32"><name pos:start="351:12" pos:end="351:21">isHalfChrV</name><argument_list pos:start="351:22" pos:end="351:32">(<argument pos:start="351:23" pos:end="351:31"><expr pos:start="351:23" pos:end="351:31"><name pos:start="351:23" pos:end="351:31">dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="351:41" pos:end="351:64"><block_content pos:start="351:41" pos:end="351:64">	<expr_stmt pos:start="351:41" pos:end="351:64"><expr pos:start="351:41" pos:end="351:63"><name pos:start="351:41" pos:end="351:50"><name pos:start="351:41" pos:end="351:41">c</name><operator pos:start="351:42" pos:end="351:43">-&gt;</operator><name pos:start="351:44" pos:end="351:50">chrDstH</name></name><operator pos:start="351:51" pos:end="351:51">=</operator> <operator pos:start="351:53" pos:end="351:53">(</operator><name pos:start="351:54" pos:end="351:57">dstH</name><operator pos:start="351:58" pos:end="351:58">+</operator><literal type="number" pos:start="351:59" pos:end="351:59">1</literal><operator pos:start="351:60" pos:end="351:60">)</operator><operator pos:start="351:61" pos:end="351:62">&gt;&gt;</operator><literal type="number" pos:start="351:63" pos:end="351:63">1</literal></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="353:9" pos:end="353:57">else<block type="pseudo" pos:start="353:41" pos:end="353:57"><block_content pos:start="353:41" pos:end="353:57">				<expr_stmt pos:start="353:41" pos:end="353:57"><expr pos:start="353:41" pos:end="353:56"><name pos:start="353:41" pos:end="353:50"><name pos:start="353:41" pos:end="353:41">c</name><operator pos:start="353:42" pos:end="353:43">-&gt;</operator><name pos:start="353:44" pos:end="353:50">chrDstH</name></name><operator pos:start="353:51" pos:end="353:51">=</operator> <name pos:start="353:53" pos:end="353:56">dstH</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



	<expr_stmt pos:start="357:9" pos:end="357:68"><expr pos:start="357:9" pos:end="357:67"><name pos:start="357:9" pos:end="357:18"><name pos:start="357:9" pos:end="357:9">c</name><operator pos:start="357:10" pos:end="357:11">-&gt;</operator><name pos:start="357:12" pos:end="357:18">chrXInc</name></name><operator pos:start="357:19" pos:end="357:19">=</operator> <operator pos:start="357:21" pos:end="357:21">(</operator><operator pos:start="357:22" pos:end="357:22">(</operator><name pos:start="357:23" pos:end="357:32"><name pos:start="357:23" pos:end="357:23">c</name><operator pos:start="357:24" pos:end="357:25">-&gt;</operator><name pos:start="357:26" pos:end="357:32">chrSrcW</name></name><operator pos:start="357:33" pos:end="357:34">&lt;&lt;</operator><literal type="number" pos:start="357:35" pos:end="357:36">16</literal><operator pos:start="357:37" pos:end="357:37">)</operator> <operator pos:start="357:39" pos:end="357:39">+</operator> <operator pos:start="357:41" pos:end="357:41">(</operator><name pos:start="357:42" pos:end="357:51"><name pos:start="357:42" pos:end="357:42">c</name><operator pos:start="357:43" pos:end="357:44">-&gt;</operator><name pos:start="357:45" pos:end="357:51">chrDstW</name></name><operator pos:start="357:52" pos:end="357:53">&gt;&gt;</operator><literal type="number" pos:start="357:54" pos:end="357:54">1</literal><operator pos:start="357:55" pos:end="357:55">)</operator><operator pos:start="357:56" pos:end="357:56">)</operator><operator pos:start="357:57" pos:end="357:57">/</operator><name pos:start="357:58" pos:end="357:67"><name pos:start="357:58" pos:end="357:58">c</name><operator pos:start="357:59" pos:end="357:60">-&gt;</operator><name pos:start="357:61" pos:end="357:67">chrDstW</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="359:9" pos:end="359:68"><expr pos:start="359:9" pos:end="359:67"><name pos:start="359:9" pos:end="359:18"><name pos:start="359:9" pos:end="359:9">c</name><operator pos:start="359:10" pos:end="359:11">-&gt;</operator><name pos:start="359:12" pos:end="359:18">chrYInc</name></name><operator pos:start="359:19" pos:end="359:19">=</operator> <operator pos:start="359:21" pos:end="359:21">(</operator><operator pos:start="359:22" pos:end="359:22">(</operator><name pos:start="359:23" pos:end="359:32"><name pos:start="359:23" pos:end="359:23">c</name><operator pos:start="359:24" pos:end="359:25">-&gt;</operator><name pos:start="359:26" pos:end="359:32">chrSrcH</name></name><operator pos:start="359:33" pos:end="359:34">&lt;&lt;</operator><literal type="number" pos:start="359:35" pos:end="359:36">16</literal><operator pos:start="359:37" pos:end="359:37">)</operator> <operator pos:start="359:39" pos:end="359:39">+</operator> <operator pos:start="359:41" pos:end="359:41">(</operator><name pos:start="359:42" pos:end="359:51"><name pos:start="359:42" pos:end="359:42">c</name><operator pos:start="359:43" pos:end="359:44">-&gt;</operator><name pos:start="359:45" pos:end="359:51">chrDstH</name></name><operator pos:start="359:52" pos:end="359:53">&gt;&gt;</operator><literal type="number" pos:start="359:54" pos:end="359:54">1</literal><operator pos:start="359:55" pos:end="359:55">)</operator><operator pos:start="359:56" pos:end="359:56">)</operator><operator pos:start="359:57" pos:end="359:57">/</operator><name pos:start="359:58" pos:end="359:67"><name pos:start="359:58" pos:end="359:58">c</name><operator pos:start="359:59" pos:end="359:60">-&gt;</operator><name pos:start="359:61" pos:end="359:67">chrDstH</name></name></expr>;</expr_stmt>





	<comment type="line" pos:start="365:9" pos:end="365:100">// match pixel 0 of the src to pixel 0 of dst and match pixel n-2 of src to pixel n-2 of dst</comment>

	<comment type="line" pos:start="367:9" pos:end="367:75">// but only for the FAST_BILINEAR mode otherwise do correct scaling</comment>

	<comment type="line" pos:start="369:9" pos:end="369:55">// n-2 is the last chrominance sample available</comment>

	<comment type="line" pos:start="371:9" pos:end="371:95">// this is not perfect, but noone shuld notice the difference, the more correct variant</comment>

	<comment type="line" pos:start="373:9" pos:end="373:91">// would be like the vertical one, but that would require some special code for the</comment>

	<comment type="line" pos:start="375:9" pos:end="375:31">// first and last pixel</comment>

	<if_stmt pos:start="377:9" pos:end="403:9"><if pos:start="377:9" pos:end="403:9">if<condition pos:start="377:11" pos:end="377:35">(<expr pos:start="377:12" pos:end="377:34"><name pos:start="377:12" pos:end="377:16">flags</name><operator pos:start="377:17" pos:end="377:17">&amp;</operator><name pos:start="377:18" pos:end="377:34">SWS_FAST_BILINEAR</name></expr>)</condition>

	<block pos:start="379:9" pos:end="403:9">{<block_content pos:start="381:17" pos:end="401:17">

		<if_stmt pos:start="381:17" pos:end="401:17"><if pos:start="381:17" pos:end="389:17">if<condition pos:start="381:19" pos:end="381:36">(<expr pos:start="381:20" pos:end="381:35"><name pos:start="381:20" pos:end="381:35"><name pos:start="381:20" pos:end="381:20">c</name><operator pos:start="381:21" pos:end="381:22">-&gt;</operator><name pos:start="381:23" pos:end="381:35">canMMX2BeUsed</name></name></expr>)</condition>

		<block pos:start="383:17" pos:end="389:17">{<block_content pos:start="385:25" pos:end="387:40">

			<expr_stmt pos:start="385:25" pos:end="385:40"><expr pos:start="385:25" pos:end="385:39"><name pos:start="385:25" pos:end="385:34"><name pos:start="385:25" pos:end="385:25">c</name><operator pos:start="385:26" pos:end="385:27">-&gt;</operator><name pos:start="385:28" pos:end="385:34">lumXInc</name></name><operator pos:start="385:35" pos:end="385:36">+=</operator> <literal type="number" pos:start="385:38" pos:end="385:39">20</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="387:25" pos:end="387:40"><expr pos:start="387:25" pos:end="387:39"><name pos:start="387:25" pos:end="387:34"><name pos:start="387:25" pos:end="387:25">c</name><operator pos:start="387:26" pos:end="387:27">-&gt;</operator><name pos:start="387:28" pos:end="387:34">chrXInc</name></name><operator pos:start="387:35" pos:end="387:36">+=</operator> <literal type="number" pos:start="387:38" pos:end="387:39">20</literal></expr>;</expr_stmt>

		</block_content>}</block></if>

		<comment type="line" pos:start="391:17" pos:end="391:67">//we dont use the x86asm scaler if mmx is available</comment>

		<if type="elseif" pos:start="393:17" pos:end="401:17">else if<condition pos:start="393:24" pos:end="393:39">(<expr pos:start="393:25" pos:end="393:38"><name pos:start="393:25" pos:end="393:38"><name pos:start="393:25" pos:end="393:31">cpuCaps</name><operator pos:start="393:32" pos:end="393:32">.</operator><name pos:start="393:33" pos:end="393:38">hasMMX</name></name></expr>)</condition>

		<block pos:start="395:17" pos:end="401:17">{<block_content pos:start="397:25" pos:end="399:78">

			<expr_stmt pos:start="397:25" pos:end="397:66"><expr pos:start="397:25" pos:end="397:65"><name pos:start="397:25" pos:end="397:34"><name pos:start="397:25" pos:end="397:25">c</name><operator pos:start="397:26" pos:end="397:27">-&gt;</operator><name pos:start="397:28" pos:end="397:34">lumXInc</name></name> <operator pos:start="397:36" pos:end="397:36">=</operator> <operator pos:start="397:38" pos:end="397:38">(</operator><operator pos:start="397:39" pos:end="397:39">(</operator><name pos:start="397:40" pos:end="397:43">srcW</name><operator pos:start="397:44" pos:end="397:44">-</operator><literal type="number" pos:start="397:45" pos:end="397:45">2</literal><operator pos:start="397:46" pos:end="397:46">)</operator><operator pos:start="397:47" pos:end="397:48">&lt;&lt;</operator><literal type="number" pos:start="397:49" pos:end="397:50">16</literal><operator pos:start="397:51" pos:end="397:51">)</operator><operator pos:start="397:52" pos:end="397:52">/</operator><operator pos:start="397:53" pos:end="397:53">(</operator><name pos:start="397:54" pos:end="397:57">dstW</name><operator pos:start="397:58" pos:end="397:58">-</operator><literal type="number" pos:start="397:59" pos:end="397:59">2</literal><operator pos:start="397:60" pos:end="397:60">)</operator> <operator pos:start="397:62" pos:end="397:62">-</operator> <literal type="number" pos:start="397:64" pos:end="397:65">20</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="399:25" pos:end="399:78"><expr pos:start="399:25" pos:end="399:77"><name pos:start="399:25" pos:end="399:34"><name pos:start="399:25" pos:end="399:25">c</name><operator pos:start="399:26" pos:end="399:27">-&gt;</operator><name pos:start="399:28" pos:end="399:34">chrXInc</name></name> <operator pos:start="399:36" pos:end="399:36">=</operator> <operator pos:start="399:38" pos:end="399:38">(</operator><operator pos:start="399:39" pos:end="399:39">(</operator><name pos:start="399:40" pos:end="399:49"><name pos:start="399:40" pos:end="399:40">c</name><operator pos:start="399:41" pos:end="399:42">-&gt;</operator><name pos:start="399:43" pos:end="399:49">chrSrcW</name></name><operator pos:start="399:50" pos:end="399:50">-</operator><literal type="number" pos:start="399:51" pos:end="399:51">2</literal><operator pos:start="399:52" pos:end="399:52">)</operator><operator pos:start="399:53" pos:end="399:54">&lt;&lt;</operator><literal type="number" pos:start="399:55" pos:end="399:56">16</literal><operator pos:start="399:57" pos:end="399:57">)</operator><operator pos:start="399:58" pos:end="399:58">/</operator><operator pos:start="399:59" pos:end="399:59">(</operator><name pos:start="399:60" pos:end="399:69"><name pos:start="399:60" pos:end="399:60">c</name><operator pos:start="399:61" pos:end="399:62">-&gt;</operator><name pos:start="399:63" pos:end="399:69">chrDstW</name></name><operator pos:start="399:70" pos:end="399:70">-</operator><literal type="number" pos:start="399:71" pos:end="399:71">2</literal><operator pos:start="399:72" pos:end="399:72">)</operator> <operator pos:start="399:74" pos:end="399:74">-</operator> <literal type="number" pos:start="399:76" pos:end="399:77">20</literal></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="407:9" pos:end="407:64">/* precalculate horizontal scaler filter coefficients */</comment>

	<block pos:start="409:9" pos:end="445:9">{<block_content pos:start="411:17" pos:end="444:0">

		<decl_stmt pos:start="411:17" pos:end="411:62"><decl pos:start="411:17" pos:end="411:61"><type pos:start="411:17" pos:end="411:25"><specifier pos:start="411:17" pos:end="411:21">const</specifier> <name pos:start="411:23" pos:end="411:25">int</name></type> <name pos:start="411:27" pos:end="411:37">filterAlign</name><init pos:start="411:38" pos:end="411:61">= <expr pos:start="411:40" pos:end="411:61"><ternary pos:start="411:40" pos:end="411:61"><condition pos:start="411:40" pos:end="411:55"><expr pos:start="411:40" pos:end="411:53"><name pos:start="411:40" pos:end="411:53"><name pos:start="411:40" pos:end="411:46">cpuCaps</name><operator pos:start="411:47" pos:end="411:47">.</operator><name pos:start="411:48" pos:end="411:53">hasMMX</name></name></expr> ?</condition><then pos:start="411:57" pos:end="411:57"> <expr pos:start="411:57" pos:end="411:57"><literal type="number" pos:start="411:57" pos:end="411:57">4</literal></expr> </then><else pos:start="411:59" pos:end="411:61">: <expr pos:start="411:61" pos:end="411:61"><literal type="number" pos:start="411:61" pos:end="411:61">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



		<expr_stmt pos:start="415:17" pos:end="419:67"><expr pos:start="415:17" pos:end="419:66"><call pos:start="415:17" pos:end="419:66"><name pos:start="415:17" pos:end="415:26">initFilter</name><argument_list pos:start="415:27" pos:end="419:66">(<argument pos:start="415:28" pos:end="415:41"><expr pos:start="415:28" pos:end="415:41"><operator pos:start="415:28" pos:end="415:28">&amp;</operator><name pos:start="415:29" pos:end="415:41"><name pos:start="415:29" pos:end="415:29">c</name><operator pos:start="415:30" pos:end="415:31">-&gt;</operator><name pos:start="415:32" pos:end="415:41">hLumFilter</name></name></expr></argument>, <argument pos:start="415:44" pos:end="415:60"><expr pos:start="415:44" pos:end="415:60"><operator pos:start="415:44" pos:end="415:44">&amp;</operator><name pos:start="415:45" pos:end="415:60"><name pos:start="415:45" pos:end="415:45">c</name><operator pos:start="415:46" pos:end="415:47">-&gt;</operator><name pos:start="415:48" pos:end="415:60">hLumFilterPos</name></name></expr></argument>, <argument pos:start="415:63" pos:end="415:80"><expr pos:start="415:63" pos:end="415:80"><operator pos:start="415:63" pos:end="415:63">&amp;</operator><name pos:start="415:64" pos:end="415:80"><name pos:start="415:64" pos:end="415:64">c</name><operator pos:start="415:65" pos:end="415:66">-&gt;</operator><name pos:start="415:67" pos:end="415:80">hLumFilterSize</name></name></expr></argument>, <argument pos:start="415:83" pos:end="415:92"><expr pos:start="415:83" pos:end="415:92"><name pos:start="415:83" pos:end="415:92"><name pos:start="415:83" pos:end="415:83">c</name><operator pos:start="415:84" pos:end="415:85">-&gt;</operator><name pos:start="415:86" pos:end="415:92">lumXInc</name></name></expr></argument>,

				 <argument pos:start="417:34" pos:end="417:37"><expr pos:start="417:34" pos:end="417:37"><name pos:start="417:34" pos:end="417:37">srcW</name></expr></argument>      ,       <argument pos:start="417:52" pos:end="417:55"><expr pos:start="417:52" pos:end="417:55"><name pos:start="417:52" pos:end="417:55">dstW</name></expr></argument>, <argument pos:start="417:58" pos:end="417:68"><expr pos:start="417:58" pos:end="417:68"><name pos:start="417:58" pos:end="417:68">filterAlign</name></expr></argument>, <argument pos:start="417:71" pos:end="417:75"><expr pos:start="417:71" pos:end="417:75"><literal type="number" pos:start="417:71" pos:end="417:71">1</literal><operator pos:start="417:72" pos:end="417:73">&lt;&lt;</operator><literal type="number" pos:start="417:74" pos:end="417:75">14</literal></expr></argument>, <argument pos:start="417:78" pos:end="417:82"><expr pos:start="417:78" pos:end="417:82"><name pos:start="417:78" pos:end="417:82">flags</name></expr></argument>,

				 <argument pos:start="419:34" pos:end="419:48"><expr pos:start="419:34" pos:end="419:48"><name pos:start="419:34" pos:end="419:48"><name pos:start="419:34" pos:end="419:42">srcFilter</name><operator pos:start="419:43" pos:end="419:44">-&gt;</operator><name pos:start="419:45" pos:end="419:48">lumH</name></name></expr></argument>, <argument pos:start="419:51" pos:end="419:65"><expr pos:start="419:51" pos:end="419:65"><name pos:start="419:51" pos:end="419:65"><name pos:start="419:51" pos:end="419:59">dstFilter</name><operator pos:start="419:60" pos:end="419:61">-&gt;</operator><name pos:start="419:62" pos:end="419:65">lumH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="421:17" pos:end="430:0"><expr pos:start="421:17" pos:end="425:66"><call pos:start="421:17" pos:end="425:66"><name pos:start="421:17" pos:end="421:26">initFilter</name><argument_list pos:start="421:27" pos:end="425:66">(<argument pos:start="421:28" pos:end="421:41"><expr pos:start="421:28" pos:end="421:41"><operator pos:start="421:28" pos:end="421:28">&amp;</operator><name pos:start="421:29" pos:end="421:41"><name pos:start="421:29" pos:end="421:29">c</name><operator pos:start="421:30" pos:end="421:31">-&gt;</operator><name pos:start="421:32" pos:end="421:41">hChrFilter</name></name></expr></argument>, <argument pos:start="421:44" pos:end="421:60"><expr pos:start="421:44" pos:end="421:60"><operator pos:start="421:44" pos:end="421:44">&amp;</operator><name pos:start="421:45" pos:end="421:60"><name pos:start="421:45" pos:end="421:45">c</name><operator pos:start="421:46" pos:end="421:47">-&gt;</operator><name pos:start="421:48" pos:end="421:60">hChrFilterPos</name></name></expr></argument>, <argument pos:start="421:63" pos:end="421:80"><expr pos:start="421:63" pos:end="421:80"><operator pos:start="421:63" pos:end="421:63">&amp;</operator><name pos:start="421:64" pos:end="421:80"><name pos:start="421:64" pos:end="421:64">c</name><operator pos:start="421:65" pos:end="421:66">-&gt;</operator><name pos:start="421:67" pos:end="421:80">hChrFilterSize</name></name></expr></argument>, <argument pos:start="421:83" pos:end="421:92"><expr pos:start="421:83" pos:end="421:92"><name pos:start="421:83" pos:end="421:92"><name pos:start="421:83" pos:end="421:83">c</name><operator pos:start="421:84" pos:end="421:85">-&gt;</operator><name pos:start="421:86" pos:end="421:92">chrXInc</name></name></expr></argument>,

				<argument pos:start="423:33" pos:end="423:43"><expr pos:start="423:33" pos:end="423:43"><operator pos:start="423:33" pos:end="423:33">(</operator><name pos:start="423:34" pos:end="423:37">srcW</name><operator pos:start="423:38" pos:end="423:38">+</operator><literal type="number" pos:start="423:39" pos:end="423:39">1</literal><operator pos:start="423:40" pos:end="423:40">)</operator><operator pos:start="423:41" pos:end="423:42">&gt;&gt;</operator><literal type="number" pos:start="423:43" pos:end="423:43">1</literal></expr></argument>, <argument pos:start="423:46" pos:end="423:55"><expr pos:start="423:46" pos:end="423:55"><name pos:start="423:46" pos:end="423:55"><name pos:start="423:46" pos:end="423:46">c</name><operator pos:start="423:47" pos:end="423:48">-&gt;</operator><name pos:start="423:49" pos:end="423:55">chrDstW</name></name></expr></argument>, <argument pos:start="423:58" pos:end="423:68"><expr pos:start="423:58" pos:end="423:68"><name pos:start="423:58" pos:end="423:68">filterAlign</name></expr></argument>, <argument pos:start="423:71" pos:end="423:75"><expr pos:start="423:71" pos:end="423:75"><literal type="number" pos:start="423:71" pos:end="423:71">1</literal><operator pos:start="423:72" pos:end="423:73">&lt;&lt;</operator><literal type="number" pos:start="423:74" pos:end="423:75">14</literal></expr></argument>, <argument pos:start="423:78" pos:end="423:82"><expr pos:start="423:78" pos:end="423:82"><name pos:start="423:78" pos:end="423:82">flags</name></expr></argument>,

				 <argument pos:start="425:34" pos:end="425:48"><expr pos:start="425:34" pos:end="425:48"><name pos:start="425:34" pos:end="425:48"><name pos:start="425:34" pos:end="425:42">srcFilter</name><operator pos:start="425:43" pos:end="425:44">-&gt;</operator><name pos:start="425:45" pos:end="425:48">chrH</name></name></expr></argument>, <argument pos:start="425:51" pos:end="425:65"><expr pos:start="425:51" pos:end="425:65"><name pos:start="425:51" pos:end="425:65"><name pos:start="425:51" pos:end="425:59">dstFilter</name><operator pos:start="425:60" pos:end="425:61">-&gt;</operator><name pos:start="425:62" pos:end="425:65">chrH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="429:1" pos:end="429:15">#<cpp:directive pos:start="429:2" pos:end="429:6">ifdef</cpp:directive> <name pos:start="429:8" pos:end="429:15">ARCH_X86</name></cpp:ifdef>

<comment type="line" pos:start="431:1" pos:end="431:21">// cant downscale !!!</comment>

		<if_stmt pos:start="433:17" pos:end="444:0"><if pos:start="433:17" pos:end="444:0">if<condition pos:start="433:19" pos:end="433:67">(<expr pos:start="433:20" pos:end="433:66"><name pos:start="433:20" pos:end="433:35"><name pos:start="433:20" pos:end="433:20">c</name><operator pos:start="433:21" pos:end="433:22">-&gt;</operator><name pos:start="433:23" pos:end="433:35">canMMX2BeUsed</name></name> <operator pos:start="433:37" pos:end="433:38">&amp;&amp;</operator> <operator pos:start="433:40" pos:end="433:40">(</operator><name pos:start="433:41" pos:end="433:45">flags</name> <operator pos:start="433:47" pos:end="433:47">&amp;</operator> <name pos:start="433:49" pos:end="433:65">SWS_FAST_BILINEAR</name><operator pos:start="433:66" pos:end="433:66">)</operator></expr>)</condition>

		<block pos:start="435:17" pos:end="444:0">{<block_content pos:start="437:25" pos:end="439:80">

			<expr_stmt pos:start="437:25" pos:end="437:79"><expr pos:start="437:25" pos:end="437:78"><call pos:start="437:25" pos:end="437:78"><name pos:start="437:25" pos:end="437:39">initMMX2HScaler</name><argument_list pos:start="437:40" pos:end="437:78">(      <argument pos:start="437:47" pos:end="437:50"><expr pos:start="437:47" pos:end="437:50"><name pos:start="437:47" pos:end="437:50">dstW</name></expr></argument>, <argument pos:start="437:53" pos:end="437:62"><expr pos:start="437:53" pos:end="437:62"><name pos:start="437:53" pos:end="437:62"><name pos:start="437:53" pos:end="437:53">c</name><operator pos:start="437:54" pos:end="437:55">-&gt;</operator><name pos:start="437:56" pos:end="437:62">lumXInc</name></name></expr></argument>, <argument pos:start="437:65" pos:end="437:77"><expr pos:start="437:65" pos:end="437:77"><name pos:start="437:65" pos:end="437:77"><name pos:start="437:65" pos:end="437:65">c</name><operator pos:start="437:66" pos:end="437:67">-&gt;</operator><name pos:start="437:68" pos:end="437:77">funnyYCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="439:25" pos:end="439:80"><expr pos:start="439:25" pos:end="439:79"><call pos:start="439:25" pos:end="439:79"><name pos:start="439:25" pos:end="439:39">initMMX2HScaler</name><argument_list pos:start="439:40" pos:end="439:79">(<argument pos:start="439:41" pos:end="439:50"><expr pos:start="439:41" pos:end="439:50"><name pos:start="439:41" pos:end="439:50"><name pos:start="439:41" pos:end="439:41">c</name><operator pos:start="439:42" pos:end="439:43">-&gt;</operator><name pos:start="439:44" pos:end="439:50">chrDstW</name></name></expr></argument>, <argument pos:start="439:53" pos:end="439:62"><expr pos:start="439:53" pos:end="439:62"><name pos:start="439:53" pos:end="439:62"><name pos:start="439:53" pos:end="439:53">c</name><operator pos:start="439:54" pos:end="439:55">-&gt;</operator><name pos:start="439:56" pos:end="439:62">chrXInc</name></name></expr></argument>, <argument pos:start="439:65" pos:end="439:78"><expr pos:start="439:65" pos:end="439:78"><name pos:start="439:65" pos:end="439:78"><name pos:start="439:65" pos:end="439:65">c</name><operator pos:start="439:66" pos:end="439:67">-&gt;</operator><name pos:start="439:68" pos:end="439:78">funnyUVCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

<cpp:endif pos:start="443:1" pos:end="443:6">#<cpp:directive pos:start="443:2" pos:end="443:6">endif</cpp:directive></cpp:endif>

	</block_content>}</block> <comment type="line" pos:start="445:11" pos:end="445:34">// Init Horizontal stuff</comment>







	<comment type="block" pos:start="453:9" pos:end="453:62">/* precalculate vertical scaler filter coefficients */</comment>

	<expr_stmt pos:start="455:9" pos:end="459:58"><expr pos:start="455:9" pos:end="459:57"><call pos:start="455:9" pos:end="459:57"><name pos:start="455:9" pos:end="455:18">initFilter</name><argument_list pos:start="455:19" pos:end="459:57">(<argument pos:start="455:20" pos:end="455:33"><expr pos:start="455:20" pos:end="455:33"><operator pos:start="455:20" pos:end="455:20">&amp;</operator><name pos:start="455:21" pos:end="455:33"><name pos:start="455:21" pos:end="455:21">c</name><operator pos:start="455:22" pos:end="455:23">-&gt;</operator><name pos:start="455:24" pos:end="455:33">vLumFilter</name></name></expr></argument>, <argument pos:start="455:36" pos:end="455:52"><expr pos:start="455:36" pos:end="455:52"><operator pos:start="455:36" pos:end="455:36">&amp;</operator><name pos:start="455:37" pos:end="455:52"><name pos:start="455:37" pos:end="455:37">c</name><operator pos:start="455:38" pos:end="455:39">-&gt;</operator><name pos:start="455:40" pos:end="455:52">vLumFilterPos</name></name></expr></argument>, <argument pos:start="455:55" pos:end="455:72"><expr pos:start="455:55" pos:end="455:72"><operator pos:start="455:55" pos:end="455:55">&amp;</operator><name pos:start="455:56" pos:end="455:72"><name pos:start="455:56" pos:end="455:56">c</name><operator pos:start="455:57" pos:end="455:58">-&gt;</operator><name pos:start="455:59" pos:end="455:72">vLumFilterSize</name></name></expr></argument>, <argument pos:start="455:75" pos:end="455:84"><expr pos:start="455:75" pos:end="455:84"><name pos:start="455:75" pos:end="455:84"><name pos:start="455:75" pos:end="455:75">c</name><operator pos:start="455:76" pos:end="455:77">-&gt;</operator><name pos:start="455:78" pos:end="455:84">lumYInc</name></name></expr></argument>,

			<argument pos:start="457:25" pos:end="457:28"><expr pos:start="457:25" pos:end="457:28"><name pos:start="457:25" pos:end="457:28">srcH</name></expr></argument>      ,        <argument pos:start="457:44" pos:end="457:47"><expr pos:start="457:44" pos:end="457:47"><name pos:start="457:44" pos:end="457:47">dstH</name></expr></argument>, <argument pos:start="457:50" pos:end="457:50"><expr pos:start="457:50" pos:end="457:50"><literal type="number" pos:start="457:50" pos:end="457:50">1</literal></expr></argument>, <argument pos:start="457:53" pos:end="457:61"><expr pos:start="457:53" pos:end="457:61"><operator pos:start="457:53" pos:end="457:53">(</operator><literal type="number" pos:start="457:54" pos:end="457:54">1</literal><operator pos:start="457:55" pos:end="457:56">&lt;&lt;</operator><literal type="number" pos:start="457:57" pos:end="457:58">12</literal><operator pos:start="457:59" pos:end="457:59">)</operator><operator pos:start="457:60" pos:end="457:60">-</operator><literal type="number" pos:start="457:61" pos:end="457:61">4</literal></expr></argument>, <argument pos:start="457:64" pos:end="457:68"><expr pos:start="457:64" pos:end="457:68"><name pos:start="457:64" pos:end="457:68">flags</name></expr></argument>,

			<argument pos:start="459:25" pos:end="459:39"><expr pos:start="459:25" pos:end="459:39"><name pos:start="459:25" pos:end="459:39"><name pos:start="459:25" pos:end="459:33">srcFilter</name><operator pos:start="459:34" pos:end="459:35">-&gt;</operator><name pos:start="459:36" pos:end="459:39">lumV</name></name></expr></argument>, <argument pos:start="459:42" pos:end="459:56"><expr pos:start="459:42" pos:end="459:56"><name pos:start="459:42" pos:end="459:56"><name pos:start="459:42" pos:end="459:50">dstFilter</name><operator pos:start="459:51" pos:end="459:52">-&gt;</operator><name pos:start="459:53" pos:end="459:56">lumV</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="461:9" pos:end="465:59"><expr pos:start="461:9" pos:end="465:58"><call pos:start="461:9" pos:end="465:58"><name pos:start="461:9" pos:end="461:18">initFilter</name><argument_list pos:start="461:19" pos:end="465:58">(<argument pos:start="461:20" pos:end="461:33"><expr pos:start="461:20" pos:end="461:33"><operator pos:start="461:20" pos:end="461:20">&amp;</operator><name pos:start="461:21" pos:end="461:33"><name pos:start="461:21" pos:end="461:21">c</name><operator pos:start="461:22" pos:end="461:23">-&gt;</operator><name pos:start="461:24" pos:end="461:33">vChrFilter</name></name></expr></argument>, <argument pos:start="461:36" pos:end="461:52"><expr pos:start="461:36" pos:end="461:52"><operator pos:start="461:36" pos:end="461:36">&amp;</operator><name pos:start="461:37" pos:end="461:52"><name pos:start="461:37" pos:end="461:37">c</name><operator pos:start="461:38" pos:end="461:39">-&gt;</operator><name pos:start="461:40" pos:end="461:52">vChrFilterPos</name></name></expr></argument>, <argument pos:start="461:55" pos:end="461:72"><expr pos:start="461:55" pos:end="461:72"><operator pos:start="461:55" pos:end="461:55">&amp;</operator><name pos:start="461:56" pos:end="461:72"><name pos:start="461:56" pos:end="461:56">c</name><operator pos:start="461:57" pos:end="461:58">-&gt;</operator><name pos:start="461:59" pos:end="461:72">vChrFilterSize</name></name></expr></argument>, <argument pos:start="461:75" pos:end="461:84"><expr pos:start="461:75" pos:end="461:84"><name pos:start="461:75" pos:end="461:84"><name pos:start="461:75" pos:end="461:75">c</name><operator pos:start="461:76" pos:end="461:77">-&gt;</operator><name pos:start="461:78" pos:end="461:84">chrYInc</name></name></expr></argument>,

			<argument pos:start="463:25" pos:end="463:35"><expr pos:start="463:25" pos:end="463:35"><operator pos:start="463:25" pos:end="463:25">(</operator><name pos:start="463:26" pos:end="463:29">srcH</name><operator pos:start="463:30" pos:end="463:30">+</operator><literal type="number" pos:start="463:31" pos:end="463:31">1</literal><operator pos:start="463:32" pos:end="463:32">)</operator><operator pos:start="463:33" pos:end="463:34">&gt;&gt;</operator><literal type="number" pos:start="463:35" pos:end="463:35">1</literal></expr></argument>, <argument pos:start="463:38" pos:end="463:47"><expr pos:start="463:38" pos:end="463:47"><name pos:start="463:38" pos:end="463:47"><name pos:start="463:38" pos:end="463:38">c</name><operator pos:start="463:39" pos:end="463:40">-&gt;</operator><name pos:start="463:41" pos:end="463:47">chrDstH</name></name></expr></argument>, <argument pos:start="463:50" pos:end="463:50"><expr pos:start="463:50" pos:end="463:50"><literal type="number" pos:start="463:50" pos:end="463:50">1</literal></expr></argument>, <argument pos:start="463:53" pos:end="463:61"><expr pos:start="463:53" pos:end="463:61"><operator pos:start="463:53" pos:end="463:53">(</operator><literal type="number" pos:start="463:54" pos:end="463:54">1</literal><operator pos:start="463:55" pos:end="463:56">&lt;&lt;</operator><literal type="number" pos:start="463:57" pos:end="463:58">12</literal><operator pos:start="463:59" pos:end="463:59">)</operator><operator pos:start="463:60" pos:end="463:60">-</operator><literal type="number" pos:start="463:61" pos:end="463:61">4</literal></expr></argument>, <argument pos:start="463:64" pos:end="463:68"><expr pos:start="463:64" pos:end="463:68"><name pos:start="463:64" pos:end="463:68">flags</name></expr></argument>,

			 <argument pos:start="465:26" pos:end="465:40"><expr pos:start="465:26" pos:end="465:40"><name pos:start="465:26" pos:end="465:40"><name pos:start="465:26" pos:end="465:34">srcFilter</name><operator pos:start="465:35" pos:end="465:36">-&gt;</operator><name pos:start="465:37" pos:end="465:40">chrV</name></name></expr></argument>, <argument pos:start="465:43" pos:end="465:57"><expr pos:start="465:43" pos:end="465:57"><name pos:start="465:43" pos:end="465:57"><name pos:start="465:43" pos:end="465:51">dstFilter</name><operator pos:start="465:52" pos:end="465:53">-&gt;</operator><name pos:start="465:54" pos:end="465:57">chrV</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<comment type="line" pos:start="469:9" pos:end="469:92">// Calculate Buffer Sizes so that they wont run out while handling these damn slices</comment>

	<expr_stmt pos:start="471:9" pos:end="471:42"><expr pos:start="471:9" pos:end="471:41"><name pos:start="471:9" pos:end="471:22"><name pos:start="471:9" pos:end="471:9">c</name><operator pos:start="471:10" pos:end="471:11">-&gt;</operator><name pos:start="471:12" pos:end="471:22">vLumBufSize</name></name><operator pos:start="471:23" pos:end="471:23">=</operator> <name pos:start="471:25" pos:end="471:41"><name pos:start="471:25" pos:end="471:25">c</name><operator pos:start="471:26" pos:end="471:27">-&gt;</operator><name pos:start="471:28" pos:end="471:41">vLumFilterSize</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="473:9" pos:end="473:42"><expr pos:start="473:9" pos:end="473:41"><name pos:start="473:9" pos:end="473:22"><name pos:start="473:9" pos:end="473:9">c</name><operator pos:start="473:10" pos:end="473:11">-&gt;</operator><name pos:start="473:12" pos:end="473:22">vChrBufSize</name></name><operator pos:start="473:23" pos:end="473:23">=</operator> <name pos:start="473:25" pos:end="473:41"><name pos:start="473:25" pos:end="473:25">c</name><operator pos:start="473:26" pos:end="473:27">-&gt;</operator><name pos:start="473:28" pos:end="473:41">vChrFilterSize</name></name></expr>;</expr_stmt>

	<for pos:start="475:9" pos:end="495:9">for<control pos:start="475:12" pos:end="475:29">(<init pos:start="475:13" pos:end="475:16"><expr pos:start="475:13" pos:end="475:15"><name pos:start="475:13" pos:end="475:13">i</name><operator pos:start="475:14" pos:end="475:14">=</operator><literal type="number" pos:start="475:15" pos:end="475:15">0</literal></expr>;</init> <condition pos:start="475:18" pos:end="475:24"><expr pos:start="475:18" pos:end="475:23"><name pos:start="475:18" pos:end="475:18">i</name><operator pos:start="475:19" pos:end="475:19">&lt;</operator><name pos:start="475:20" pos:end="475:23">dstH</name></expr>;</condition> <incr pos:start="475:26" pos:end="475:28"><expr pos:start="475:26" pos:end="475:28"><name pos:start="475:26" pos:end="475:26">i</name><operator pos:start="475:27" pos:end="475:28">++</operator></expr></incr>)</control>

	<block pos:start="477:9" pos:end="495:9">{<block_content pos:start="479:17" pos:end="493:80">

		<decl_stmt pos:start="479:17" pos:end="479:46"><decl pos:start="479:17" pos:end="479:45"><type pos:start="479:17" pos:end="479:19"><name pos:start="479:17" pos:end="479:19">int</name></type> <name pos:start="479:21" pos:end="479:24">chrI</name><init pos:start="479:25" pos:end="479:45">= <expr pos:start="479:27" pos:end="479:45"><name pos:start="479:27" pos:end="479:27">i</name><operator pos:start="479:28" pos:end="479:28">*</operator><name pos:start="479:29" pos:end="479:38"><name pos:start="479:29" pos:end="479:29">c</name><operator pos:start="479:30" pos:end="479:31">-&gt;</operator><name pos:start="479:32" pos:end="479:38">chrDstH</name></name> <operator pos:start="479:40" pos:end="479:40">/</operator> <name pos:start="479:42" pos:end="479:45">dstH</name></expr></init></decl>;</decl_stmt>

		<decl_stmt pos:start="481:17" pos:end="483:88"><decl pos:start="481:17" pos:end="483:87"><type pos:start="481:17" pos:end="481:19"><name pos:start="481:17" pos:end="481:19">int</name></type> <name pos:start="481:21" pos:end="481:29">nextSlice</name><init pos:start="481:30" pos:end="483:87">= <expr pos:start="481:32" pos:end="483:87"><call pos:start="481:32" pos:end="483:87"><name pos:start="481:32" pos:end="481:34">MAX</name><argument_list pos:start="481:35" pos:end="483:87">(<argument pos:start="481:36" pos:end="481:81"><expr pos:start="481:36" pos:end="481:81"><name pos:start="481:36" pos:end="481:57"><name pos:start="481:36" pos:end="481:36">c</name><operator pos:start="481:37" pos:end="481:38">-&gt;</operator><name pos:start="481:39" pos:end="481:51">vLumFilterPos</name><index pos:start="481:52" pos:end="481:57">[<expr pos:start="481:53" pos:end="481:53"><name pos:start="481:53" pos:end="481:53">i</name></expr>   ]</index></name> <operator pos:start="481:59" pos:end="481:59">+</operator> <name pos:start="481:61" pos:end="481:77"><name pos:start="481:61" pos:end="481:61">c</name><operator pos:start="481:62" pos:end="481:63">-&gt;</operator><name pos:start="481:64" pos:end="481:77">vLumFilterSize</name></name> <operator pos:start="481:79" pos:end="481:79">-</operator> <literal type="number" pos:start="481:81" pos:end="481:81">1</literal></expr></argument>,

				 <argument pos:start="483:34" pos:end="483:86"><expr pos:start="483:34" pos:end="483:86"><operator pos:start="483:34" pos:end="483:34">(</operator><operator pos:start="483:35" pos:end="483:35">(</operator><name pos:start="483:36" pos:end="483:57"><name pos:start="483:36" pos:end="483:36">c</name><operator pos:start="483:37" pos:end="483:38">-&gt;</operator><name pos:start="483:39" pos:end="483:51">vChrFilterPos</name><index pos:start="483:52" pos:end="483:57">[<expr pos:start="483:53" pos:end="483:56"><name pos:start="483:53" pos:end="483:56">chrI</name></expr>]</index></name> <operator pos:start="483:59" pos:end="483:59">+</operator> <name pos:start="483:61" pos:end="483:77"><name pos:start="483:61" pos:end="483:61">c</name><operator pos:start="483:62" pos:end="483:63">-&gt;</operator><name pos:start="483:64" pos:end="483:77">vChrFilterSize</name></name> <operator pos:start="483:79" pos:end="483:79">-</operator> <literal type="number" pos:start="483:81" pos:end="483:81">1</literal><operator pos:start="483:82" pos:end="483:82">)</operator><operator pos:start="483:83" pos:end="483:84">&lt;&lt;</operator><literal type="number" pos:start="483:85" pos:end="483:85">1</literal><operator pos:start="483:86" pos:end="483:86">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="485:17" pos:end="485:31"><expr pos:start="485:17" pos:end="485:30"><name pos:start="485:17" pos:end="485:25">nextSlice</name><operator pos:start="485:26" pos:end="485:27">&amp;=</operator> <operator pos:start="485:29" pos:end="485:29">~</operator><literal type="number" pos:start="485:30" pos:end="485:30">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="485:33" pos:end="485:66">// Slices start at even boundaries</comment>

		<if_stmt pos:start="487:17" pos:end="489:75"><if pos:start="487:17" pos:end="489:75">if<condition pos:start="487:19" pos:end="487:71">(<expr pos:start="487:20" pos:end="487:70"><name pos:start="487:20" pos:end="487:41"><name pos:start="487:20" pos:end="487:20">c</name><operator pos:start="487:21" pos:end="487:22">-&gt;</operator><name pos:start="487:23" pos:end="487:35">vLumFilterPos</name><index pos:start="487:36" pos:end="487:41">[<expr pos:start="487:37" pos:end="487:37"><name pos:start="487:37" pos:end="487:37">i</name></expr>   ]</index></name> <operator pos:start="487:43" pos:end="487:43">+</operator> <name pos:start="487:45" pos:end="487:58"><name pos:start="487:45" pos:end="487:45">c</name><operator pos:start="487:46" pos:end="487:47">-&gt;</operator><name pos:start="487:48" pos:end="487:58">vLumBufSize</name></name> <operator pos:start="487:60" pos:end="487:60">&lt;</operator> <name pos:start="487:62" pos:end="487:70">nextSlice</name></expr>)</condition><block type="pseudo" pos:start="489:25" pos:end="489:75"><block_content pos:start="489:25" pos:end="489:75">

			<expr_stmt pos:start="489:25" pos:end="489:75"><expr pos:start="489:25" pos:end="489:74"><name pos:start="489:25" pos:end="489:38"><name pos:start="489:25" pos:end="489:25">c</name><operator pos:start="489:26" pos:end="489:27">-&gt;</operator><name pos:start="489:28" pos:end="489:38">vLumBufSize</name></name><operator pos:start="489:39" pos:end="489:39">=</operator> <name pos:start="489:41" pos:end="489:49">nextSlice</name> <operator pos:start="489:51" pos:end="489:51">-</operator> <name pos:start="489:53" pos:end="489:74"><name pos:start="489:53" pos:end="489:53">c</name><operator pos:start="489:54" pos:end="489:55">-&gt;</operator><name pos:start="489:56" pos:end="489:68">vLumFilterPos</name><index pos:start="489:69" pos:end="489:74">[<expr pos:start="489:70" pos:end="489:70"><name pos:start="489:70" pos:end="489:70">i</name></expr>   ]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt pos:start="491:17" pos:end="493:80"><if pos:start="491:17" pos:end="493:80">if<condition pos:start="491:19" pos:end="491:76">(<expr pos:start="491:20" pos:end="491:75"><name pos:start="491:20" pos:end="491:41"><name pos:start="491:20" pos:end="491:20">c</name><operator pos:start="491:21" pos:end="491:22">-&gt;</operator><name pos:start="491:23" pos:end="491:35">vChrFilterPos</name><index pos:start="491:36" pos:end="491:41">[<expr pos:start="491:37" pos:end="491:40"><name pos:start="491:37" pos:end="491:40">chrI</name></expr>]</index></name> <operator pos:start="491:43" pos:end="491:43">+</operator> <name pos:start="491:45" pos:end="491:58"><name pos:start="491:45" pos:end="491:45">c</name><operator pos:start="491:46" pos:end="491:47">-&gt;</operator><name pos:start="491:48" pos:end="491:58">vChrBufSize</name></name> <operator pos:start="491:60" pos:end="491:60">&lt;</operator> <operator pos:start="491:62" pos:end="491:62">(</operator><name pos:start="491:63" pos:end="491:71">nextSlice</name><operator pos:start="491:72" pos:end="491:73">&gt;&gt;</operator><literal type="number" pos:start="491:74" pos:end="491:74">1</literal><operator pos:start="491:75" pos:end="491:75">)</operator></expr>)</condition><block type="pseudo" pos:start="493:25" pos:end="493:80"><block_content pos:start="493:25" pos:end="493:80">

			<expr_stmt pos:start="493:25" pos:end="493:80"><expr pos:start="493:25" pos:end="493:79"><name pos:start="493:25" pos:end="493:38"><name pos:start="493:25" pos:end="493:25">c</name><operator pos:start="493:26" pos:end="493:27">-&gt;</operator><name pos:start="493:28" pos:end="493:38">vChrBufSize</name></name><operator pos:start="493:39" pos:end="493:39">=</operator> <operator pos:start="493:41" pos:end="493:41">(</operator><name pos:start="493:42" pos:end="493:50">nextSlice</name><operator pos:start="493:51" pos:end="493:52">&gt;&gt;</operator><literal type="number" pos:start="493:53" pos:end="493:53">1</literal><operator pos:start="493:54" pos:end="493:54">)</operator> <operator pos:start="493:56" pos:end="493:56">-</operator> <name pos:start="493:58" pos:end="493:79"><name pos:start="493:58" pos:end="493:58">c</name><operator pos:start="493:59" pos:end="493:60">-&gt;</operator><name pos:start="493:61" pos:end="493:73">vChrFilterPos</name><index pos:start="493:74" pos:end="493:79">[<expr pos:start="493:75" pos:end="493:78"><name pos:start="493:75" pos:end="493:78">chrI</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	</block_content>}</block></for>



	<comment type="line" pos:start="499:9" pos:end="499:89">// allocate pixbufs (we use dynamic allocation because otherwise we would need to</comment>

	<expr_stmt pos:start="501:9" pos:end="501:80"><expr pos:start="501:9" pos:end="501:79"><name pos:start="501:9" pos:end="501:20"><name pos:start="501:9" pos:end="501:9">c</name><operator pos:start="501:10" pos:end="501:11">-&gt;</operator><name pos:start="501:12" pos:end="501:20">lumPixBuf</name></name><operator pos:start="501:21" pos:end="501:21">=</operator> <operator pos:start="501:23" pos:end="501:23">(</operator><name pos:start="501:24" pos:end="501:30">int16_t</name><operator pos:start="501:31" pos:end="501:31">*</operator><operator pos:start="501:32" pos:end="501:32">*</operator><operator pos:start="501:33" pos:end="501:33">)</operator><call pos:start="501:34" pos:end="501:79"><name pos:start="501:34" pos:end="501:41">memalign</name><argument_list pos:start="501:42" pos:end="501:79">(<argument pos:start="501:43" pos:end="501:43"><expr pos:start="501:43" pos:end="501:43"><literal type="number" pos:start="501:43" pos:end="501:43">4</literal></expr></argument>, <argument pos:start="501:46" pos:end="501:78"><expr pos:start="501:46" pos:end="501:78"><name pos:start="501:46" pos:end="501:59"><name pos:start="501:46" pos:end="501:46">c</name><operator pos:start="501:47" pos:end="501:48">-&gt;</operator><name pos:start="501:49" pos:end="501:59">vLumBufSize</name></name><operator pos:start="501:60" pos:end="501:60">*</operator><literal type="number" pos:start="501:61" pos:end="501:61">2</literal><operator pos:start="501:62" pos:end="501:62">*</operator><sizeof pos:start="501:63" pos:end="501:78">sizeof<argument_list pos:start="501:69" pos:end="501:78">(<argument pos:start="501:70" pos:end="501:77"><expr pos:start="501:70" pos:end="501:77"><name pos:start="501:70" pos:end="501:76">int16_t</name><operator pos:start="501:77" pos:end="501:77">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="503:9" pos:end="503:80"><expr pos:start="503:9" pos:end="503:79"><name pos:start="503:9" pos:end="503:20"><name pos:start="503:9" pos:end="503:9">c</name><operator pos:start="503:10" pos:end="503:11">-&gt;</operator><name pos:start="503:12" pos:end="503:20">chrPixBuf</name></name><operator pos:start="503:21" pos:end="503:21">=</operator> <operator pos:start="503:23" pos:end="503:23">(</operator><name pos:start="503:24" pos:end="503:30">int16_t</name><operator pos:start="503:31" pos:end="503:31">*</operator><operator pos:start="503:32" pos:end="503:32">*</operator><operator pos:start="503:33" pos:end="503:33">)</operator><call pos:start="503:34" pos:end="503:79"><name pos:start="503:34" pos:end="503:41">memalign</name><argument_list pos:start="503:42" pos:end="503:79">(<argument pos:start="503:43" pos:end="503:43"><expr pos:start="503:43" pos:end="503:43"><literal type="number" pos:start="503:43" pos:end="503:43">4</literal></expr></argument>, <argument pos:start="503:46" pos:end="503:78"><expr pos:start="503:46" pos:end="503:78"><name pos:start="503:46" pos:end="503:59"><name pos:start="503:46" pos:end="503:46">c</name><operator pos:start="503:47" pos:end="503:48">-&gt;</operator><name pos:start="503:49" pos:end="503:59">vChrBufSize</name></name><operator pos:start="503:60" pos:end="503:60">*</operator><literal type="number" pos:start="503:61" pos:end="503:61">2</literal><operator pos:start="503:62" pos:end="503:62">*</operator><sizeof pos:start="503:63" pos:end="503:78">sizeof<argument_list pos:start="503:69" pos:end="503:78">(<argument pos:start="503:70" pos:end="503:77"><expr pos:start="503:70" pos:end="503:77"><name pos:start="503:70" pos:end="503:76">int16_t</name><operator pos:start="503:77" pos:end="503:77">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:start="505:9" pos:end="505:132">//Note we need at least one pixel more at the end because of the mmx code (just in case someone wanna replace the 4000/8000)</comment>

	<for pos:start="507:9" pos:end="509:94">for<control pos:start="507:12" pos:end="507:39">(<init pos:start="507:13" pos:end="507:16"><expr pos:start="507:13" pos:end="507:15"><name pos:start="507:13" pos:end="507:13">i</name><operator pos:start="507:14" pos:end="507:14">=</operator><literal type="number" pos:start="507:15" pos:end="507:15">0</literal></expr>;</init> <condition pos:start="507:18" pos:end="507:34"><expr pos:start="507:18" pos:end="507:33"><name pos:start="507:18" pos:end="507:18">i</name><operator pos:start="507:19" pos:end="507:19">&lt;</operator><name pos:start="507:20" pos:end="507:33"><name pos:start="507:20" pos:end="507:20">c</name><operator pos:start="507:21" pos:end="507:22">-&gt;</operator><name pos:start="507:23" pos:end="507:33">vLumBufSize</name></name></expr>;</condition> <incr pos:start="507:36" pos:end="507:38"><expr pos:start="507:36" pos:end="507:38"><name pos:start="507:36" pos:end="507:36">i</name><operator pos:start="507:37" pos:end="507:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="509:17" pos:end="509:94"><block_content pos:start="509:17" pos:end="509:94">

		<expr_stmt pos:start="509:17" pos:end="509:94"><expr pos:start="509:17" pos:end="509:93"><name pos:start="509:17" pos:end="509:31"><name pos:start="509:17" pos:end="509:17">c</name><operator pos:start="509:18" pos:end="509:19">-&gt;</operator><name pos:start="509:20" pos:end="509:28">lumPixBuf</name><index pos:start="509:29" pos:end="509:31">[<expr pos:start="509:30" pos:end="509:30"><name pos:start="509:30" pos:end="509:30">i</name></expr>]</index></name><operator pos:start="509:32" pos:end="509:32">=</operator> <name pos:start="509:34" pos:end="509:63"><name pos:start="509:34" pos:end="509:34">c</name><operator pos:start="509:35" pos:end="509:36">-&gt;</operator><name pos:start="509:37" pos:end="509:45">lumPixBuf</name><index pos:start="509:46" pos:end="509:63">[<expr pos:start="509:47" pos:end="509:62"><name pos:start="509:47" pos:end="509:47">i</name><operator pos:start="509:48" pos:end="509:48">+</operator><name pos:start="509:49" pos:end="509:62"><name pos:start="509:49" pos:end="509:49">c</name><operator pos:start="509:50" pos:end="509:51">-&gt;</operator><name pos:start="509:52" pos:end="509:62">vLumBufSize</name></name></expr>]</index></name><operator pos:start="509:64" pos:end="509:64">=</operator> <operator pos:start="509:66" pos:end="509:66">(</operator><name pos:start="509:67" pos:end="509:74">uint16_t</name><operator pos:start="509:75" pos:end="509:75">*</operator><operator pos:start="509:76" pos:end="509:76">)</operator><call pos:start="509:77" pos:end="509:93"><name pos:start="509:77" pos:end="509:84">memalign</name><argument_list pos:start="509:85" pos:end="509:93">(<argument pos:start="509:86" pos:end="509:86"><expr pos:start="509:86" pos:end="509:86"><literal type="number" pos:start="509:86" pos:end="509:86">8</literal></expr></argument>, <argument pos:start="509:89" pos:end="509:92"><expr pos:start="509:89" pos:end="509:92"><literal type="number" pos:start="509:89" pos:end="509:92">4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<for pos:start="511:9" pos:end="513:94">for<control pos:start="511:12" pos:end="511:39">(<init pos:start="511:13" pos:end="511:16"><expr pos:start="511:13" pos:end="511:15"><name pos:start="511:13" pos:end="511:13">i</name><operator pos:start="511:14" pos:end="511:14">=</operator><literal type="number" pos:start="511:15" pos:end="511:15">0</literal></expr>;</init> <condition pos:start="511:18" pos:end="511:34"><expr pos:start="511:18" pos:end="511:33"><name pos:start="511:18" pos:end="511:18">i</name><operator pos:start="511:19" pos:end="511:19">&lt;</operator><name pos:start="511:20" pos:end="511:33"><name pos:start="511:20" pos:end="511:20">c</name><operator pos:start="511:21" pos:end="511:22">-&gt;</operator><name pos:start="511:23" pos:end="511:33">vChrBufSize</name></name></expr>;</condition> <incr pos:start="511:36" pos:end="511:38"><expr pos:start="511:36" pos:end="511:38"><name pos:start="511:36" pos:end="511:36">i</name><operator pos:start="511:37" pos:end="511:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="513:17" pos:end="513:94"><block_content pos:start="513:17" pos:end="513:94">

		<expr_stmt pos:start="513:17" pos:end="513:94"><expr pos:start="513:17" pos:end="513:93"><name pos:start="513:17" pos:end="513:31"><name pos:start="513:17" pos:end="513:17">c</name><operator pos:start="513:18" pos:end="513:19">-&gt;</operator><name pos:start="513:20" pos:end="513:28">chrPixBuf</name><index pos:start="513:29" pos:end="513:31">[<expr pos:start="513:30" pos:end="513:30"><name pos:start="513:30" pos:end="513:30">i</name></expr>]</index></name><operator pos:start="513:32" pos:end="513:32">=</operator> <name pos:start="513:34" pos:end="513:63"><name pos:start="513:34" pos:end="513:34">c</name><operator pos:start="513:35" pos:end="513:36">-&gt;</operator><name pos:start="513:37" pos:end="513:45">chrPixBuf</name><index pos:start="513:46" pos:end="513:63">[<expr pos:start="513:47" pos:end="513:62"><name pos:start="513:47" pos:end="513:47">i</name><operator pos:start="513:48" pos:end="513:48">+</operator><name pos:start="513:49" pos:end="513:62"><name pos:start="513:49" pos:end="513:49">c</name><operator pos:start="513:50" pos:end="513:51">-&gt;</operator><name pos:start="513:52" pos:end="513:62">vChrBufSize</name></name></expr>]</index></name><operator pos:start="513:64" pos:end="513:64">=</operator> <operator pos:start="513:66" pos:end="513:66">(</operator><name pos:start="513:67" pos:end="513:74">uint16_t</name><operator pos:start="513:75" pos:end="513:75">*</operator><operator pos:start="513:76" pos:end="513:76">)</operator><call pos:start="513:77" pos:end="513:93"><name pos:start="513:77" pos:end="513:84">memalign</name><argument_list pos:start="513:85" pos:end="513:93">(<argument pos:start="513:86" pos:end="513:86"><expr pos:start="513:86" pos:end="513:86"><literal type="number" pos:start="513:86" pos:end="513:86">8</literal></expr></argument>, <argument pos:start="513:89" pos:end="513:92"><expr pos:start="513:89" pos:end="513:92"><literal type="number" pos:start="513:89" pos:end="513:92">8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



	<comment type="line" pos:start="517:9" pos:end="517:83">//try to avoid drawing green stuff between the right end and the stride end</comment>

	<for pos:start="519:9" pos:end="519:73">for<control pos:start="519:12" pos:end="519:39">(<init pos:start="519:13" pos:end="519:16"><expr pos:start="519:13" pos:end="519:15"><name pos:start="519:13" pos:end="519:13">i</name><operator pos:start="519:14" pos:end="519:14">=</operator><literal type="number" pos:start="519:15" pos:end="519:15">0</literal></expr>;</init> <condition pos:start="519:18" pos:end="519:34"><expr pos:start="519:18" pos:end="519:33"><name pos:start="519:18" pos:end="519:18">i</name><operator pos:start="519:19" pos:end="519:19">&lt;</operator><name pos:start="519:20" pos:end="519:33"><name pos:start="519:20" pos:end="519:20">c</name><operator pos:start="519:21" pos:end="519:22">-&gt;</operator><name pos:start="519:23" pos:end="519:33">vLumBufSize</name></name></expr>;</condition> <incr pos:start="519:36" pos:end="519:38"><expr pos:start="519:36" pos:end="519:38"><name pos:start="519:36" pos:end="519:36">i</name><operator pos:start="519:37" pos:end="519:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="519:41" pos:end="519:73"><block_content pos:start="519:41" pos:end="519:73"> <expr_stmt pos:start="519:41" pos:end="519:73"><expr pos:start="519:41" pos:end="519:72"><call pos:start="519:41" pos:end="519:72"><name pos:start="519:41" pos:end="519:46">memset</name><argument_list pos:start="519:47" pos:end="519:72">(<argument pos:start="519:48" pos:end="519:62"><expr pos:start="519:48" pos:end="519:62"><name pos:start="519:48" pos:end="519:62"><name pos:start="519:48" pos:end="519:48">c</name><operator pos:start="519:49" pos:end="519:50">-&gt;</operator><name pos:start="519:51" pos:end="519:59">lumPixBuf</name><index pos:start="519:60" pos:end="519:62">[<expr pos:start="519:61" pos:end="519:61"><name pos:start="519:61" pos:end="519:61">i</name></expr>]</index></name></expr></argument>, <argument pos:start="519:65" pos:end="519:65"><expr pos:start="519:65" pos:end="519:65"><literal type="number" pos:start="519:65" pos:end="519:65">0</literal></expr></argument>, <argument pos:start="519:68" pos:end="519:71"><expr pos:start="519:68" pos:end="519:71"><literal type="number" pos:start="519:68" pos:end="519:71">4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<for pos:start="521:9" pos:end="521:74">for<control pos:start="521:12" pos:end="521:39">(<init pos:start="521:13" pos:end="521:16"><expr pos:start="521:13" pos:end="521:15"><name pos:start="521:13" pos:end="521:13">i</name><operator pos:start="521:14" pos:end="521:14">=</operator><literal type="number" pos:start="521:15" pos:end="521:15">0</literal></expr>;</init> <condition pos:start="521:18" pos:end="521:34"><expr pos:start="521:18" pos:end="521:33"><name pos:start="521:18" pos:end="521:18">i</name><operator pos:start="521:19" pos:end="521:19">&lt;</operator><name pos:start="521:20" pos:end="521:33"><name pos:start="521:20" pos:end="521:20">c</name><operator pos:start="521:21" pos:end="521:22">-&gt;</operator><name pos:start="521:23" pos:end="521:33">vChrBufSize</name></name></expr>;</condition> <incr pos:start="521:36" pos:end="521:38"><expr pos:start="521:36" pos:end="521:38"><name pos:start="521:36" pos:end="521:36">i</name><operator pos:start="521:37" pos:end="521:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="521:41" pos:end="521:74"><block_content pos:start="521:41" pos:end="521:74"> <expr_stmt pos:start="521:41" pos:end="521:74"><expr pos:start="521:41" pos:end="521:73"><call pos:start="521:41" pos:end="521:73"><name pos:start="521:41" pos:end="521:46">memset</name><argument_list pos:start="521:47" pos:end="521:73">(<argument pos:start="521:48" pos:end="521:62"><expr pos:start="521:48" pos:end="521:62"><name pos:start="521:48" pos:end="521:62"><name pos:start="521:48" pos:end="521:48">c</name><operator pos:start="521:49" pos:end="521:50">-&gt;</operator><name pos:start="521:51" pos:end="521:59">chrPixBuf</name><index pos:start="521:60" pos:end="521:62">[<expr pos:start="521:61" pos:end="521:61"><name pos:start="521:61" pos:end="521:61">i</name></expr>]</index></name></expr></argument>, <argument pos:start="521:65" pos:end="521:66"><expr pos:start="521:65" pos:end="521:66"><literal type="number" pos:start="521:65" pos:end="521:66">64</literal></expr></argument>, <argument pos:start="521:69" pos:end="521:72"><expr pos:start="521:69" pos:end="521:72"><literal type="number" pos:start="521:69" pos:end="521:72">8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



	<macro pos:start="525:9" pos:end="525:34"><name pos:start="525:9" pos:end="525:14">ASSERT</name><argument_list pos:start="525:15" pos:end="525:34">(<argument pos:start="525:16" pos:end="525:33">c-&gt;chrDstH &lt;= dstH</argument>)</argument_list></macro>



	<comment type="line" pos:start="529:9" pos:end="529:40">// pack filter data for mmx code</comment>

	<if_stmt pos:start="531:9" pos:end="551:9"><if pos:start="531:9" pos:end="551:9">if<condition pos:start="531:11" pos:end="531:26">(<expr pos:start="531:12" pos:end="531:25"><name pos:start="531:12" pos:end="531:25"><name pos:start="531:12" pos:end="531:18">cpuCaps</name><operator pos:start="531:19" pos:end="531:19">.</operator><name pos:start="531:20" pos:end="531:25">hasMMX</name></name></expr>)</condition>

	<block pos:start="533:9" pos:end="551:9">{<block_content pos:start="535:17" pos:end="549:49">

		<expr_stmt pos:start="535:17" pos:end="535:103"><expr pos:start="535:17" pos:end="535:102"><name pos:start="535:17" pos:end="535:31"><name pos:start="535:17" pos:end="535:17">c</name><operator pos:start="535:18" pos:end="535:19">-&gt;</operator><name pos:start="535:20" pos:end="535:31">lumMmxFilter</name></name><operator pos:start="535:32" pos:end="535:32">=</operator> <operator pos:start="535:34" pos:end="535:34">(</operator><name pos:start="535:35" pos:end="535:41">int16_t</name><operator pos:start="535:42" pos:end="535:42">*</operator><operator pos:start="535:43" pos:end="535:43">)</operator><call pos:start="535:44" pos:end="535:102"><name pos:start="535:44" pos:end="535:51">memalign</name><argument_list pos:start="535:52" pos:end="535:102">(<argument pos:start="535:53" pos:end="535:53"><expr pos:start="535:53" pos:end="535:53"><literal type="number" pos:start="535:53" pos:end="535:53">8</literal></expr></argument>, <argument pos:start="535:56" pos:end="535:101"><expr pos:start="535:56" pos:end="535:101"><name pos:start="535:56" pos:end="535:72"><name pos:start="535:56" pos:end="535:56">c</name><operator pos:start="535:57" pos:end="535:58">-&gt;</operator><name pos:start="535:59" pos:end="535:72">vLumFilterSize</name></name><operator pos:start="535:73" pos:end="535:73">*</operator>      <name pos:start="535:80" pos:end="535:83">dstH</name><operator pos:start="535:84" pos:end="535:84">*</operator><literal type="number" pos:start="535:85" pos:end="535:85">4</literal><operator pos:start="535:86" pos:end="535:86">*</operator><sizeof pos:start="535:87" pos:end="535:101">sizeof<argument_list pos:start="535:93" pos:end="535:101">(<argument pos:start="535:94" pos:end="535:100"><expr pos:start="535:94" pos:end="535:100"><name pos:start="535:94" pos:end="535:100">int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="537:17" pos:end="537:103"><expr pos:start="537:17" pos:end="537:102"><name pos:start="537:17" pos:end="537:31"><name pos:start="537:17" pos:end="537:17">c</name><operator pos:start="537:18" pos:end="537:19">-&gt;</operator><name pos:start="537:20" pos:end="537:31">chrMmxFilter</name></name><operator pos:start="537:32" pos:end="537:32">=</operator> <operator pos:start="537:34" pos:end="537:34">(</operator><name pos:start="537:35" pos:end="537:41">int16_t</name><operator pos:start="537:42" pos:end="537:42">*</operator><operator pos:start="537:43" pos:end="537:43">)</operator><call pos:start="537:44" pos:end="537:102"><name pos:start="537:44" pos:end="537:51">memalign</name><argument_list pos:start="537:52" pos:end="537:102">(<argument pos:start="537:53" pos:end="537:53"><expr pos:start="537:53" pos:end="537:53"><literal type="number" pos:start="537:53" pos:end="537:53">8</literal></expr></argument>, <argument pos:start="537:56" pos:end="537:101"><expr pos:start="537:56" pos:end="537:101"><name pos:start="537:56" pos:end="537:72"><name pos:start="537:56" pos:end="537:56">c</name><operator pos:start="537:57" pos:end="537:58">-&gt;</operator><name pos:start="537:59" pos:end="537:72">vChrFilterSize</name></name><operator pos:start="537:73" pos:end="537:73">*</operator><name pos:start="537:74" pos:end="537:83"><name pos:start="537:74" pos:end="537:74">c</name><operator pos:start="537:75" pos:end="537:76">-&gt;</operator><name pos:start="537:77" pos:end="537:83">chrDstH</name></name><operator pos:start="537:84" pos:end="537:84">*</operator><literal type="number" pos:start="537:85" pos:end="537:85">4</literal><operator pos:start="537:86" pos:end="537:86">*</operator><sizeof pos:start="537:87" pos:end="537:101">sizeof<argument_list pos:start="537:93" pos:end="537:101">(<argument pos:start="537:94" pos:end="537:100"><expr pos:start="537:94" pos:end="537:100"><name pos:start="537:94" pos:end="537:100">int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for pos:start="539:17" pos:end="543:49">for<control pos:start="539:20" pos:end="539:55">(<init pos:start="539:21" pos:end="539:24"><expr pos:start="539:21" pos:end="539:23"><name pos:start="539:21" pos:end="539:21">i</name><operator pos:start="539:22" pos:end="539:22">=</operator><literal type="number" pos:start="539:23" pos:end="539:23">0</literal></expr>;</init> <condition pos:start="539:26" pos:end="539:50"><expr pos:start="539:26" pos:end="539:49"><name pos:start="539:26" pos:end="539:26">i</name><operator pos:start="539:27" pos:end="539:27">&lt;</operator><name pos:start="539:28" pos:end="539:44"><name pos:start="539:28" pos:end="539:28">c</name><operator pos:start="539:29" pos:end="539:30">-&gt;</operator><name pos:start="539:31" pos:end="539:44">vLumFilterSize</name></name><operator pos:start="539:45" pos:end="539:45">*</operator><name pos:start="539:46" pos:end="539:49">dstH</name></expr>;</condition> <incr pos:start="539:52" pos:end="539:54"><expr pos:start="539:52" pos:end="539:54"><name pos:start="539:52" pos:end="539:52">i</name><operator pos:start="539:53" pos:end="539:54">++</operator></expr></incr>)</control><block type="pseudo" pos:start="541:25" pos:end="543:49"><block_content pos:start="541:25" pos:end="543:49">

			<expr_stmt pos:start="541:25" pos:end="543:49"><expr pos:start="541:25" pos:end="543:48"><name pos:start="541:25" pos:end="541:44"><name pos:start="541:25" pos:end="541:25">c</name><operator pos:start="541:26" pos:end="541:27">-&gt;</operator><name pos:start="541:28" pos:end="541:39">lumMmxFilter</name><index pos:start="541:40" pos:end="541:44">[<expr pos:start="541:41" pos:end="541:43"><literal type="number" pos:start="541:41" pos:end="541:41">4</literal><operator pos:start="541:42" pos:end="541:42">*</operator><name pos:start="541:43" pos:end="541:43">i</name></expr>]</index></name><operator pos:start="541:45" pos:end="541:45">=</operator><name pos:start="541:46" pos:end="541:67"><name pos:start="541:46" pos:end="541:46">c</name><operator pos:start="541:47" pos:end="541:48">-&gt;</operator><name pos:start="541:49" pos:end="541:60">lumMmxFilter</name><index pos:start="541:61" pos:end="541:67">[<expr pos:start="541:62" pos:end="541:66"><literal type="number" pos:start="541:62" pos:end="541:62">4</literal><operator pos:start="541:63" pos:end="541:63">*</operator><name pos:start="541:64" pos:end="541:64">i</name><operator pos:start="541:65" pos:end="541:65">+</operator><literal type="number" pos:start="541:66" pos:end="541:66">1</literal></expr>]</index></name><operator pos:start="541:68" pos:end="541:68">=</operator><name pos:start="541:69" pos:end="541:90"><name pos:start="541:69" pos:end="541:69">c</name><operator pos:start="541:70" pos:end="541:71">-&gt;</operator><name pos:start="541:72" pos:end="541:83">lumMmxFilter</name><index pos:start="541:84" pos:end="541:90">[<expr pos:start="541:85" pos:end="541:89"><literal type="number" pos:start="541:85" pos:end="541:85">4</literal><operator pos:start="541:86" pos:end="541:86">*</operator><name pos:start="541:87" pos:end="541:87">i</name><operator pos:start="541:88" pos:end="541:88">+</operator><literal type="number" pos:start="541:89" pos:end="541:89">2</literal></expr>]</index></name><operator pos:start="541:91" pos:end="541:91">=</operator><name pos:start="541:92" pos:end="541:113"><name pos:start="541:92" pos:end="541:92">c</name><operator pos:start="541:93" pos:end="541:94">-&gt;</operator><name pos:start="541:95" pos:end="541:106">lumMmxFilter</name><index pos:start="541:107" pos:end="541:113">[<expr pos:start="541:108" pos:end="541:112"><literal type="number" pos:start="541:108" pos:end="541:108">4</literal><operator pos:start="541:109" pos:end="541:109">*</operator><name pos:start="541:110" pos:end="541:110">i</name><operator pos:start="541:111" pos:end="541:111">+</operator><literal type="number" pos:start="541:112" pos:end="541:112">3</literal></expr>]</index></name><operator pos:start="541:114" pos:end="541:114">=</operator>

				<name pos:start="543:33" pos:end="543:48"><name pos:start="543:33" pos:end="543:33">c</name><operator pos:start="543:34" pos:end="543:35">-&gt;</operator><name pos:start="543:36" pos:end="543:45">vLumFilter</name><index pos:start="543:46" pos:end="543:48">[<expr pos:start="543:47" pos:end="543:47"><name pos:start="543:47" pos:end="543:47">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

		<for pos:start="545:17" pos:end="549:49">for<control pos:start="545:20" pos:end="545:61">(<init pos:start="545:21" pos:end="545:24"><expr pos:start="545:21" pos:end="545:23"><name pos:start="545:21" pos:end="545:21">i</name><operator pos:start="545:22" pos:end="545:22">=</operator><literal type="number" pos:start="545:23" pos:end="545:23">0</literal></expr>;</init> <condition pos:start="545:26" pos:end="545:56"><expr pos:start="545:26" pos:end="545:55"><name pos:start="545:26" pos:end="545:26">i</name><operator pos:start="545:27" pos:end="545:27">&lt;</operator><name pos:start="545:28" pos:end="545:44"><name pos:start="545:28" pos:end="545:28">c</name><operator pos:start="545:29" pos:end="545:30">-&gt;</operator><name pos:start="545:31" pos:end="545:44">vChrFilterSize</name></name><operator pos:start="545:45" pos:end="545:45">*</operator><name pos:start="545:46" pos:end="545:55"><name pos:start="545:46" pos:end="545:46">c</name><operator pos:start="545:47" pos:end="545:48">-&gt;</operator><name pos:start="545:49" pos:end="545:55">chrDstH</name></name></expr>;</condition> <incr pos:start="545:58" pos:end="545:60"><expr pos:start="545:58" pos:end="545:60"><name pos:start="545:58" pos:end="545:58">i</name><operator pos:start="545:59" pos:end="545:60">++</operator></expr></incr>)</control><block type="pseudo" pos:start="547:25" pos:end="549:49"><block_content pos:start="547:25" pos:end="549:49">

			<expr_stmt pos:start="547:25" pos:end="549:49"><expr pos:start="547:25" pos:end="549:48"><name pos:start="547:25" pos:end="547:44"><name pos:start="547:25" pos:end="547:25">c</name><operator pos:start="547:26" pos:end="547:27">-&gt;</operator><name pos:start="547:28" pos:end="547:39">chrMmxFilter</name><index pos:start="547:40" pos:end="547:44">[<expr pos:start="547:41" pos:end="547:43"><literal type="number" pos:start="547:41" pos:end="547:41">4</literal><operator pos:start="547:42" pos:end="547:42">*</operator><name pos:start="547:43" pos:end="547:43">i</name></expr>]</index></name><operator pos:start="547:45" pos:end="547:45">=</operator><name pos:start="547:46" pos:end="547:67"><name pos:start="547:46" pos:end="547:46">c</name><operator pos:start="547:47" pos:end="547:48">-&gt;</operator><name pos:start="547:49" pos:end="547:60">chrMmxFilter</name><index pos:start="547:61" pos:end="547:67">[<expr pos:start="547:62" pos:end="547:66"><literal type="number" pos:start="547:62" pos:end="547:62">4</literal><operator pos:start="547:63" pos:end="547:63">*</operator><name pos:start="547:64" pos:end="547:64">i</name><operator pos:start="547:65" pos:end="547:65">+</operator><literal type="number" pos:start="547:66" pos:end="547:66">1</literal></expr>]</index></name><operator pos:start="547:68" pos:end="547:68">=</operator><name pos:start="547:69" pos:end="547:90"><name pos:start="547:69" pos:end="547:69">c</name><operator pos:start="547:70" pos:end="547:71">-&gt;</operator><name pos:start="547:72" pos:end="547:83">chrMmxFilter</name><index pos:start="547:84" pos:end="547:90">[<expr pos:start="547:85" pos:end="547:89"><literal type="number" pos:start="547:85" pos:end="547:85">4</literal><operator pos:start="547:86" pos:end="547:86">*</operator><name pos:start="547:87" pos:end="547:87">i</name><operator pos:start="547:88" pos:end="547:88">+</operator><literal type="number" pos:start="547:89" pos:end="547:89">2</literal></expr>]</index></name><operator pos:start="547:91" pos:end="547:91">=</operator><name pos:start="547:92" pos:end="547:113"><name pos:start="547:92" pos:end="547:92">c</name><operator pos:start="547:93" pos:end="547:94">-&gt;</operator><name pos:start="547:95" pos:end="547:106">chrMmxFilter</name><index pos:start="547:107" pos:end="547:113">[<expr pos:start="547:108" pos:end="547:112"><literal type="number" pos:start="547:108" pos:end="547:108">4</literal><operator pos:start="547:109" pos:end="547:109">*</operator><name pos:start="547:110" pos:end="547:110">i</name><operator pos:start="547:111" pos:end="547:111">+</operator><literal type="number" pos:start="547:112" pos:end="547:112">3</literal></expr>]</index></name><operator pos:start="547:114" pos:end="547:114">=</operator>

				<name pos:start="549:33" pos:end="549:48"><name pos:start="549:33" pos:end="549:33">c</name><operator pos:start="549:34" pos:end="549:35">-&gt;</operator><name pos:start="549:36" pos:end="549:45">vChrFilter</name><index pos:start="549:46" pos:end="549:48">[<expr pos:start="549:47" pos:end="549:47"><name pos:start="549:47" pos:end="549:47">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="555:9" pos:end="629:9"><if pos:start="555:9" pos:end="629:9">if<condition pos:start="555:11" pos:end="555:32">(<expr pos:start="555:12" pos:end="555:31"><name pos:start="555:12" pos:end="555:16">flags</name><operator pos:start="555:17" pos:end="555:17">&amp;</operator><name pos:start="555:18" pos:end="555:31">SWS_PRINT_INFO</name></expr>)</condition>

	<block pos:start="557:9" pos:end="629:9">{<block_content pos:start="561:17" pos:end="627:53">

<cpp:ifdef pos:start="559:1" pos:end="559:18">#<cpp:directive pos:start="559:2" pos:end="559:6">ifdef</cpp:directive> <name pos:start="559:8" pos:end="559:18">DITHER1XBPP</name></cpp:ifdef>

		<decl_stmt pos:start="561:17" pos:end="564:0"><decl pos:start="561:17" pos:end="561:41"><type pos:start="561:17" pos:end="561:22"><name pos:start="561:17" pos:end="561:20">char</name> <modifier pos:start="561:22" pos:end="561:22">*</modifier></type><name pos:start="561:23" pos:end="561:28">dither</name><init pos:start="561:29" pos:end="561:41">= <expr pos:start="561:31" pos:end="561:41"><literal type="string" pos:start="561:31" pos:end="561:41">" dithered"</literal></expr></init></decl>;</decl_stmt>

<cpp:else pos:start="563:1" pos:end="563:5">#<cpp:directive pos:start="563:2" pos:end="563:5">else</cpp:directive></cpp:else>

		<decl_stmt pos:start="565:17" pos:end="568:0"><decl pos:start="565:17" pos:end="565:32"><type pos:start="565:17" pos:end="565:22"><name pos:start="565:17" pos:end="565:20">char</name> <modifier pos:start="565:22" pos:end="565:22">*</modifier></type><name pos:start="565:23" pos:end="565:28">dither</name><init pos:start="565:29" pos:end="565:32">= <expr pos:start="565:31" pos:end="565:32"><literal type="string" pos:start="565:31" pos:end="565:32">""</literal></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="567:1" pos:end="567:6">#<cpp:directive pos:start="567:2" pos:end="567:6">endif</cpp:directive></cpp:endif>

		<if_stmt pos:start="569:17" pos:end="595:76"><if pos:start="569:17" pos:end="571:78">if<condition pos:start="569:19" pos:end="569:43">(<expr pos:start="569:20" pos:end="569:42"><name pos:start="569:20" pos:end="569:24">flags</name><operator pos:start="569:25" pos:end="569:25">&amp;</operator><name pos:start="569:26" pos:end="569:42">SWS_FAST_BILINEAR</name></expr>)</condition><block type="pseudo" pos:start="571:25" pos:end="571:78"><block_content pos:start="571:25" pos:end="571:78">

			<expr_stmt pos:start="571:25" pos:end="571:78"><expr pos:start="571:25" pos:end="571:77"><call pos:start="571:25" pos:end="571:77"><name pos:start="571:25" pos:end="571:31">fprintf</name><argument_list pos:start="571:32" pos:end="571:77">(<argument pos:start="571:33" pos:end="571:38"><expr pos:start="571:33" pos:end="571:38"><name pos:start="571:33" pos:end="571:38">stderr</name></expr></argument>, <argument pos:start="571:41" pos:end="571:76"><expr pos:start="571:41" pos:end="571:76"><literal type="string" pos:start="571:41" pos:end="571:76">"\nSwScaler: FAST_BILINEAR scaler, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="573:17" pos:end="575:73">else if<condition pos:start="573:24" pos:end="573:43">(<expr pos:start="573:25" pos:end="573:42"><name pos:start="573:25" pos:end="573:29">flags</name><operator pos:start="573:30" pos:end="573:30">&amp;</operator><name pos:start="573:31" pos:end="573:42">SWS_BILINEAR</name></expr>)</condition><block type="pseudo" pos:start="575:25" pos:end="575:73"><block_content pos:start="575:25" pos:end="575:73">

			<expr_stmt pos:start="575:25" pos:end="575:73"><expr pos:start="575:25" pos:end="575:72"><call pos:start="575:25" pos:end="575:72"><name pos:start="575:25" pos:end="575:31">fprintf</name><argument_list pos:start="575:32" pos:end="575:72">(<argument pos:start="575:33" pos:end="575:38"><expr pos:start="575:33" pos:end="575:38"><name pos:start="575:33" pos:end="575:38">stderr</name></expr></argument>, <argument pos:start="575:41" pos:end="575:71"><expr pos:start="575:41" pos:end="575:71"><literal type="string" pos:start="575:41" pos:end="575:71">"\nSwScaler: BILINEAR scaler, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="577:17" pos:end="579:72">else if<condition pos:start="577:24" pos:end="577:42">(<expr pos:start="577:25" pos:end="577:41"><name pos:start="577:25" pos:end="577:29">flags</name><operator pos:start="577:30" pos:end="577:30">&amp;</operator><name pos:start="577:31" pos:end="577:41">SWS_BICUBIC</name></expr>)</condition><block type="pseudo" pos:start="579:25" pos:end="579:72"><block_content pos:start="579:25" pos:end="579:72">

			<expr_stmt pos:start="579:25" pos:end="579:72"><expr pos:start="579:25" pos:end="579:71"><call pos:start="579:25" pos:end="579:71"><name pos:start="579:25" pos:end="579:31">fprintf</name><argument_list pos:start="579:32" pos:end="579:71">(<argument pos:start="579:33" pos:end="579:38"><expr pos:start="579:33" pos:end="579:38"><name pos:start="579:33" pos:end="579:38">stderr</name></expr></argument>, <argument pos:start="579:41" pos:end="579:70"><expr pos:start="579:41" pos:end="579:70"><literal type="string" pos:start="579:41" pos:end="579:70">"\nSwScaler: BICUBIC scaler, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="581:17" pos:end="583:77">else if<condition pos:start="581:24" pos:end="581:36">(<expr pos:start="581:25" pos:end="581:35"><name pos:start="581:25" pos:end="581:29">flags</name><operator pos:start="581:30" pos:end="581:30">&amp;</operator><name pos:start="581:31" pos:end="581:35">SWS_X</name></expr>)</condition><block type="pseudo" pos:start="583:25" pos:end="583:77"><block_content pos:start="583:25" pos:end="583:77">

			<expr_stmt pos:start="583:25" pos:end="583:77"><expr pos:start="583:25" pos:end="583:76"><call pos:start="583:25" pos:end="583:76"><name pos:start="583:25" pos:end="583:31">fprintf</name><argument_list pos:start="583:32" pos:end="583:76">(<argument pos:start="583:33" pos:end="583:38"><expr pos:start="583:33" pos:end="583:38"><name pos:start="583:33" pos:end="583:38">stderr</name></expr></argument>, <argument pos:start="583:41" pos:end="583:75"><expr pos:start="583:41" pos:end="583:75"><literal type="string" pos:start="583:41" pos:end="583:75">"\nSwScaler: Experimental scaler, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="585:17" pos:end="587:89">else if<condition pos:start="585:24" pos:end="585:40">(<expr pos:start="585:25" pos:end="585:39"><name pos:start="585:25" pos:end="585:29">flags</name><operator pos:start="585:30" pos:end="585:30">&amp;</operator><name pos:start="585:31" pos:end="585:39">SWS_POINT</name></expr>)</condition><block type="pseudo" pos:start="587:25" pos:end="587:89"><block_content pos:start="587:25" pos:end="587:89">

			<expr_stmt pos:start="587:25" pos:end="587:89"><expr pos:start="587:25" pos:end="587:88"><call pos:start="587:25" pos:end="587:88"><name pos:start="587:25" pos:end="587:31">fprintf</name><argument_list pos:start="587:32" pos:end="587:88">(<argument pos:start="587:33" pos:end="587:38"><expr pos:start="587:33" pos:end="587:38"><name pos:start="587:33" pos:end="587:38">stderr</name></expr></argument>, <argument pos:start="587:41" pos:end="587:87"><expr pos:start="587:41" pos:end="587:87"><literal type="string" pos:start="587:41" pos:end="587:87">"\nSwScaler: Nearest Neighbor / POINT scaler, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="589:17" pos:end="591:80">else if<condition pos:start="589:24" pos:end="589:39">(<expr pos:start="589:25" pos:end="589:38"><name pos:start="589:25" pos:end="589:29">flags</name><operator pos:start="589:30" pos:end="589:30">&amp;</operator><name pos:start="589:31" pos:end="589:38">SWS_AREA</name></expr>)</condition><block type="pseudo" pos:start="591:25" pos:end="591:80"><block_content pos:start="591:25" pos:end="591:80">

			<expr_stmt pos:start="591:25" pos:end="591:80"><expr pos:start="591:25" pos:end="591:79"><call pos:start="591:25" pos:end="591:79"><name pos:start="591:25" pos:end="591:31">fprintf</name><argument_list pos:start="591:32" pos:end="591:79">(<argument pos:start="591:33" pos:end="591:38"><expr pos:start="591:33" pos:end="591:38"><name pos:start="591:33" pos:end="591:38">stderr</name></expr></argument>, <argument pos:start="591:41" pos:end="591:78"><expr pos:start="591:41" pos:end="591:78"><literal type="string" pos:start="591:41" pos:end="591:78">"\nSwScaler: Area Averageing scaler, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<else pos:start="593:17" pos:end="595:76">else<block type="pseudo" pos:start="595:25" pos:end="595:76"><block_content pos:start="595:25" pos:end="595:76">

			<expr_stmt pos:start="595:25" pos:end="595:76"><expr pos:start="595:25" pos:end="595:75"><call pos:start="595:25" pos:end="595:75"><name pos:start="595:25" pos:end="595:31">fprintf</name><argument_list pos:start="595:32" pos:end="595:75">(<argument pos:start="595:33" pos:end="595:38"><expr pos:start="595:33" pos:end="595:38"><name pos:start="595:33" pos:end="595:38">stderr</name></expr></argument>, <argument pos:start="595:41" pos:end="595:74"><expr pos:start="595:41" pos:end="595:74"><literal type="string" pos:start="595:41" pos:end="595:74">"\nSwScaler: ehh flags invalid?! "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



		<if_stmt pos:start="599:17" pos:end="609:86"><if pos:start="599:17" pos:end="603:94">if<condition pos:start="599:19" pos:end="599:70">(<expr pos:start="599:20" pos:end="599:69"><name pos:start="599:20" pos:end="599:28">dstFormat</name><operator pos:start="599:29" pos:end="599:30">==</operator><name pos:start="599:31" pos:end="599:42">IMGFMT_BGR15</name> <operator pos:start="599:44" pos:end="599:45">||</operator> <name pos:start="599:47" pos:end="599:55">dstFormat</name><operator pos:start="599:56" pos:end="599:57">==</operator><name pos:start="599:58" pos:end="599:69">IMGFMT_BGR16</name></expr>)</condition><block type="pseudo" pos:start="601:25" pos:end="603:94"><block_content pos:start="601:25" pos:end="603:94">

			<expr_stmt pos:start="601:25" pos:end="603:94"><expr pos:start="601:25" pos:end="603:93"><call pos:start="601:25" pos:end="603:93"><name pos:start="601:25" pos:end="601:31">fprintf</name><argument_list pos:start="601:32" pos:end="603:93">(<argument pos:start="601:33" pos:end="601:38"><expr pos:start="601:33" pos:end="601:38"><name pos:start="601:33" pos:end="601:38">stderr</name></expr></argument>, <argument pos:start="601:41" pos:end="601:58"><expr pos:start="601:41" pos:end="601:58"><literal type="string" pos:start="601:41" pos:end="601:58">"from %s to%s %s "</literal></expr></argument>, 

				<argument pos:start="603:33" pos:end="603:57"><expr pos:start="603:33" pos:end="603:57"><call pos:start="603:33" pos:end="603:57"><name pos:start="603:33" pos:end="603:46">vo_format_name</name><argument_list pos:start="603:47" pos:end="603:57">(<argument pos:start="603:48" pos:end="603:56"><expr pos:start="603:48" pos:end="603:56"><name pos:start="603:48" pos:end="603:56">srcFormat</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="603:60" pos:end="603:65"><expr pos:start="603:60" pos:end="603:65"><name pos:start="603:60" pos:end="603:65">dither</name></expr></argument>, <argument pos:start="603:68" pos:end="603:92"><expr pos:start="603:68" pos:end="603:92"><call pos:start="603:68" pos:end="603:92"><name pos:start="603:68" pos:end="603:81">vo_format_name</name><argument_list pos:start="603:82" pos:end="603:92">(<argument pos:start="603:83" pos:end="603:91"><expr pos:start="603:83" pos:end="603:91"><name pos:start="603:83" pos:end="603:91">dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<else pos:start="605:17" pos:end="609:86">else<block type="pseudo" pos:start="607:25" pos:end="609:86"><block_content pos:start="607:25" pos:end="609:86">

			<expr_stmt pos:start="607:25" pos:end="609:86"><expr pos:start="607:25" pos:end="609:85"><call pos:start="607:25" pos:end="609:85"><name pos:start="607:25" pos:end="607:31">fprintf</name><argument_list pos:start="607:32" pos:end="609:85">(<argument pos:start="607:33" pos:end="607:38"><expr pos:start="607:33" pos:end="607:38"><name pos:start="607:33" pos:end="607:38">stderr</name></expr></argument>, <argument pos:start="607:41" pos:end="607:56"><expr pos:start="607:41" pos:end="607:56"><literal type="string" pos:start="607:41" pos:end="607:56">"from %s to %s "</literal></expr></argument>, 

				<argument pos:start="609:33" pos:end="609:57"><expr pos:start="609:33" pos:end="609:57"><call pos:start="609:33" pos:end="609:57"><name pos:start="609:33" pos:end="609:46">vo_format_name</name><argument_list pos:start="609:47" pos:end="609:57">(<argument pos:start="609:48" pos:end="609:56"><expr pos:start="609:48" pos:end="609:56"><name pos:start="609:48" pos:end="609:56">srcFormat</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="609:60" pos:end="609:84"><expr pos:start="609:60" pos:end="609:84"><call pos:start="609:60" pos:end="609:84"><name pos:start="609:60" pos:end="609:73">vo_format_name</name><argument_list pos:start="609:74" pos:end="609:84">(<argument pos:start="609:75" pos:end="609:83"><expr pos:start="609:75" pos:end="609:83"><name pos:start="609:75" pos:end="609:83">dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



		<if_stmt pos:start="613:17" pos:end="627:53"><if pos:start="613:17" pos:end="615:56">if<condition pos:start="613:19" pos:end="613:35">(<expr pos:start="613:20" pos:end="613:34"><name pos:start="613:20" pos:end="613:34"><name pos:start="613:20" pos:end="613:26">cpuCaps</name><operator pos:start="613:27" pos:end="613:27">.</operator><name pos:start="613:28" pos:end="613:34">hasMMX2</name></name></expr>)</condition><block type="pseudo" pos:start="615:25" pos:end="615:56"><block_content pos:start="615:25" pos:end="615:56">

			<expr_stmt pos:start="615:25" pos:end="615:56"><expr pos:start="615:25" pos:end="615:55"><call pos:start="615:25" pos:end="615:55"><name pos:start="615:25" pos:end="615:31">fprintf</name><argument_list pos:start="615:32" pos:end="615:55">(<argument pos:start="615:33" pos:end="615:38"><expr pos:start="615:33" pos:end="615:38"><name pos:start="615:33" pos:end="615:38">stderr</name></expr></argument>, <argument pos:start="615:41" pos:end="615:54"><expr pos:start="615:41" pos:end="615:54"><literal type="string" pos:start="615:41" pos:end="615:54">"using MMX2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="617:17" pos:end="619:57">else if<condition pos:start="617:24" pos:end="617:41">(<expr pos:start="617:25" pos:end="617:40"><name pos:start="617:25" pos:end="617:40"><name pos:start="617:25" pos:end="617:31">cpuCaps</name><operator pos:start="617:32" pos:end="617:32">.</operator><name pos:start="617:33" pos:end="617:40">has3DNow</name></name></expr>)</condition><block type="pseudo" pos:start="619:25" pos:end="619:57"><block_content pos:start="619:25" pos:end="619:57">

			<expr_stmt pos:start="619:25" pos:end="619:57"><expr pos:start="619:25" pos:end="619:56"><call pos:start="619:25" pos:end="619:56"><name pos:start="619:25" pos:end="619:31">fprintf</name><argument_list pos:start="619:32" pos:end="619:56">(<argument pos:start="619:33" pos:end="619:38"><expr pos:start="619:33" pos:end="619:38"><name pos:start="619:33" pos:end="619:38">stderr</name></expr></argument>, <argument pos:start="619:41" pos:end="619:55"><expr pos:start="619:41" pos:end="619:55"><literal type="string" pos:start="619:41" pos:end="619:55">"using 3DNOW\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="621:17" pos:end="623:55">else if<condition pos:start="621:24" pos:end="621:39">(<expr pos:start="621:25" pos:end="621:38"><name pos:start="621:25" pos:end="621:38"><name pos:start="621:25" pos:end="621:31">cpuCaps</name><operator pos:start="621:32" pos:end="621:32">.</operator><name pos:start="621:33" pos:end="621:38">hasMMX</name></name></expr>)</condition><block type="pseudo" pos:start="623:25" pos:end="623:55"><block_content pos:start="623:25" pos:end="623:55">

			<expr_stmt pos:start="623:25" pos:end="623:55"><expr pos:start="623:25" pos:end="623:54"><call pos:start="623:25" pos:end="623:54"><name pos:start="623:25" pos:end="623:31">fprintf</name><argument_list pos:start="623:32" pos:end="623:54">(<argument pos:start="623:33" pos:end="623:38"><expr pos:start="623:33" pos:end="623:38"><name pos:start="623:33" pos:end="623:38">stderr</name></expr></argument>, <argument pos:start="623:41" pos:end="623:53"><expr pos:start="623:41" pos:end="623:53"><literal type="string" pos:start="623:41" pos:end="623:53">"using MMX\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<else pos:start="625:17" pos:end="627:53">else<block type="pseudo" pos:start="627:25" pos:end="627:53"><block_content pos:start="627:25" pos:end="627:53">

			<expr_stmt pos:start="627:25" pos:end="627:53"><expr pos:start="627:25" pos:end="627:52"><call pos:start="627:25" pos:end="627:52"><name pos:start="627:25" pos:end="627:31">fprintf</name><argument_list pos:start="627:32" pos:end="627:52">(<argument pos:start="627:33" pos:end="627:38"><expr pos:start="627:33" pos:end="627:38"><name pos:start="627:33" pos:end="627:38">stderr</name></expr></argument>, <argument pos:start="627:41" pos:end="627:51"><expr pos:start="627:41" pos:end="627:51"><literal type="string" pos:start="627:41" pos:end="627:51">"using C\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="633:9" pos:end="759:9"><if pos:start="633:9" pos:end="759:9">if<condition pos:start="633:11" pos:end="633:47">(<expr pos:start="633:12" pos:end="633:46"><operator pos:start="633:12" pos:end="633:12">(</operator><name pos:start="633:13" pos:end="633:17">flags</name> <operator pos:start="633:19" pos:end="633:19">&amp;</operator> <name pos:start="633:21" pos:end="633:34">SWS_PRINT_INFO</name><operator pos:start="633:35" pos:end="633:35">)</operator> <operator pos:start="633:37" pos:end="633:38">&amp;&amp;</operator> <name pos:start="633:40" pos:end="633:46">verbose</name></expr>)</condition>

	<block pos:start="635:9" pos:end="759:9">{<block_content pos:start="637:17" pos:end="757:77">

		<if_stmt pos:start="637:17" pos:end="699:17"><if pos:start="637:17" pos:end="677:17">if<condition pos:start="637:19" pos:end="637:34">(<expr pos:start="637:20" pos:end="637:33"><name pos:start="637:20" pos:end="637:33"><name pos:start="637:20" pos:end="637:26">cpuCaps</name><operator pos:start="637:27" pos:end="637:27">.</operator><name pos:start="637:28" pos:end="637:33">hasMMX</name></name></expr>)</condition>

		<block pos:start="639:17" pos:end="677:17">{<block_content pos:start="641:25" pos:end="675:25">

			<if_stmt pos:start="641:25" pos:end="675:25"><if pos:start="641:25" pos:end="643:109">if<condition pos:start="641:27" pos:end="641:73">(<expr pos:start="641:28" pos:end="641:72"><name pos:start="641:28" pos:end="641:43"><name pos:start="641:28" pos:end="641:28">c</name><operator pos:start="641:29" pos:end="641:30">-&gt;</operator><name pos:start="641:31" pos:end="641:43">canMMX2BeUsed</name></name> <operator pos:start="641:45" pos:end="641:46">&amp;&amp;</operator> <operator pos:start="641:48" pos:end="641:48">(</operator><name pos:start="641:49" pos:end="641:53">flags</name><operator pos:start="641:54" pos:end="641:54">&amp;</operator><name pos:start="641:55" pos:end="641:71">SWS_FAST_BILINEAR</name><operator pos:start="641:72" pos:end="641:72">)</operator></expr>)</condition><block type="pseudo" pos:start="643:33" pos:end="643:109"><block_content pos:start="643:33" pos:end="643:109">

				<expr_stmt pos:start="643:33" pos:end="643:109"><expr pos:start="643:33" pos:end="643:108"><call pos:start="643:33" pos:end="643:108"><name pos:start="643:33" pos:end="643:38">printf</name><argument_list pos:start="643:39" pos:end="643:108">(<argument pos:start="643:40" pos:end="643:107"><expr pos:start="643:40" pos:end="643:107"><literal type="string" pos:start="643:40" pos:end="643:107">"SwScaler: using FAST_BILINEAR MMX2 scaler for horizontal scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

			<else pos:start="645:25" pos:end="675:25">else

			<block pos:start="647:25" pos:end="675:25">{<block_content pos:start="649:33" pos:end="673:120">

				<if_stmt pos:start="649:33" pos:end="659:118"><if pos:start="649:33" pos:end="651:118">if<condition pos:start="649:35" pos:end="649:56">(<expr pos:start="649:36" pos:end="649:55"><name pos:start="649:36" pos:end="649:52"><name pos:start="649:36" pos:end="649:36">c</name><operator pos:start="649:37" pos:end="649:38">-&gt;</operator><name pos:start="649:39" pos:end="649:52">hLumFilterSize</name></name><operator pos:start="649:53" pos:end="649:54">==</operator><literal type="number" pos:start="649:55" pos:end="649:55">4</literal></expr>)</condition><block type="pseudo" pos:start="651:41" pos:end="651:118"><block_content pos:start="651:41" pos:end="651:118">

					<expr_stmt pos:start="651:41" pos:end="651:118"><expr pos:start="651:41" pos:end="651:117"><call pos:start="651:41" pos:end="651:117"><name pos:start="651:41" pos:end="651:46">printf</name><argument_list pos:start="651:47" pos:end="651:117">(<argument pos:start="651:48" pos:end="651:116"><expr pos:start="651:48" pos:end="651:116"><literal type="string" pos:start="651:48" pos:end="651:116">"SwScaler: using 4-tap MMX scaler for horizontal luminance scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

				<if type="elseif" pos:start="653:33" pos:end="655:118">else if<condition pos:start="653:40" pos:end="653:61">(<expr pos:start="653:41" pos:end="653:60"><name pos:start="653:41" pos:end="653:57"><name pos:start="653:41" pos:end="653:41">c</name><operator pos:start="653:42" pos:end="653:43">-&gt;</operator><name pos:start="653:44" pos:end="653:57">hLumFilterSize</name></name><operator pos:start="653:58" pos:end="653:59">==</operator><literal type="number" pos:start="653:60" pos:end="653:60">8</literal></expr>)</condition><block type="pseudo" pos:start="655:41" pos:end="655:118"><block_content pos:start="655:41" pos:end="655:118">

					<expr_stmt pos:start="655:41" pos:end="655:118"><expr pos:start="655:41" pos:end="655:117"><call pos:start="655:41" pos:end="655:117"><name pos:start="655:41" pos:end="655:46">printf</name><argument_list pos:start="655:47" pos:end="655:117">(<argument pos:start="655:48" pos:end="655:116"><expr pos:start="655:48" pos:end="655:116"><literal type="string" pos:start="655:48" pos:end="655:116">"SwScaler: using 8-tap MMX scaler for horizontal luminance scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

				<else pos:start="657:33" pos:end="659:118">else<block type="pseudo" pos:start="659:41" pos:end="659:118"><block_content pos:start="659:41" pos:end="659:118">

					<expr_stmt pos:start="659:41" pos:end="659:118"><expr pos:start="659:41" pos:end="659:117"><call pos:start="659:41" pos:end="659:117"><name pos:start="659:41" pos:end="659:46">printf</name><argument_list pos:start="659:47" pos:end="659:117">(<argument pos:start="659:48" pos:end="659:116"><expr pos:start="659:48" pos:end="659:116"><literal type="string" pos:start="659:48" pos:end="659:116">"SwScaler: using n-tap MMX scaler for horizontal luminance scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



				<if_stmt pos:start="663:33" pos:end="673:120"><if pos:start="663:33" pos:end="665:120">if<condition pos:start="663:35" pos:end="663:56">(<expr pos:start="663:36" pos:end="663:55"><name pos:start="663:36" pos:end="663:52"><name pos:start="663:36" pos:end="663:36">c</name><operator pos:start="663:37" pos:end="663:38">-&gt;</operator><name pos:start="663:39" pos:end="663:52">hChrFilterSize</name></name><operator pos:start="663:53" pos:end="663:54">==</operator><literal type="number" pos:start="663:55" pos:end="663:55">4</literal></expr>)</condition><block type="pseudo" pos:start="665:41" pos:end="665:120"><block_content pos:start="665:41" pos:end="665:120">

					<expr_stmt pos:start="665:41" pos:end="665:120"><expr pos:start="665:41" pos:end="665:119"><call pos:start="665:41" pos:end="665:119"><name pos:start="665:41" pos:end="665:46">printf</name><argument_list pos:start="665:47" pos:end="665:119">(<argument pos:start="665:48" pos:end="665:118"><expr pos:start="665:48" pos:end="665:118"><literal type="string" pos:start="665:48" pos:end="665:118">"SwScaler: using 4-tap MMX scaler for horizontal chrominance scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

				<if type="elseif" pos:start="667:33" pos:end="669:120">else if<condition pos:start="667:40" pos:end="667:61">(<expr pos:start="667:41" pos:end="667:60"><name pos:start="667:41" pos:end="667:57"><name pos:start="667:41" pos:end="667:41">c</name><operator pos:start="667:42" pos:end="667:43">-&gt;</operator><name pos:start="667:44" pos:end="667:57">hChrFilterSize</name></name><operator pos:start="667:58" pos:end="667:59">==</operator><literal type="number" pos:start="667:60" pos:end="667:60">8</literal></expr>)</condition><block type="pseudo" pos:start="669:41" pos:end="669:120"><block_content pos:start="669:41" pos:end="669:120">

					<expr_stmt pos:start="669:41" pos:end="669:120"><expr pos:start="669:41" pos:end="669:119"><call pos:start="669:41" pos:end="669:119"><name pos:start="669:41" pos:end="669:46">printf</name><argument_list pos:start="669:47" pos:end="669:119">(<argument pos:start="669:48" pos:end="669:118"><expr pos:start="669:48" pos:end="669:118"><literal type="string" pos:start="669:48" pos:end="669:118">"SwScaler: using 8-tap MMX scaler for horizontal chrominance scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

				<else pos:start="671:33" pos:end="673:120">else<block type="pseudo" pos:start="673:41" pos:end="673:120"><block_content pos:start="673:41" pos:end="673:120">

					<expr_stmt pos:start="673:41" pos:end="673:120"><expr pos:start="673:41" pos:end="673:119"><call pos:start="673:41" pos:end="673:119"><name pos:start="673:41" pos:end="673:46">printf</name><argument_list pos:start="673:47" pos:end="673:119">(<argument pos:start="673:48" pos:end="673:118"><expr pos:start="673:48" pos:end="673:118"><literal type="string" pos:start="673:48" pos:end="673:118">"SwScaler: using n-tap MMX scaler for horizontal chrominance scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			</block_content>}</block></else></if_stmt>

		</block_content>}</block></if>

		<else pos:start="679:17" pos:end="699:17">else

		<block pos:start="681:17" pos:end="699:17">{<block_content pos:start="685:25" pos:end="698:0">

<cpp:ifdef pos:start="683:1" pos:end="683:15">#<cpp:directive pos:start="683:2" pos:end="683:6">ifdef</cpp:directive> <name pos:start="683:8" pos:end="683:15">ARCH_X86</name></cpp:ifdef>

			<expr_stmt pos:start="685:25" pos:end="688:0"><expr pos:start="685:25" pos:end="685:89"><call pos:start="685:25" pos:end="685:89"><name pos:start="685:25" pos:end="685:30">printf</name><argument_list pos:start="685:31" pos:end="685:89">(<argument pos:start="685:32" pos:end="685:88"><expr pos:start="685:32" pos:end="685:88"><literal type="string" pos:start="685:32" pos:end="685:88">"SwScaler: using X86-Asm scaler for horizontal scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="687:1" pos:end="687:5">#<cpp:directive pos:start="687:2" pos:end="687:5">else</cpp:directive></cpp:else>

			<if_stmt pos:start="689:25" pos:end="698:0"><if pos:start="689:25" pos:end="691:106">if<condition pos:start="689:27" pos:end="689:53">(<expr pos:start="689:28" pos:end="689:52"><name pos:start="689:28" pos:end="689:32">flags</name> <operator pos:start="689:34" pos:end="689:34">&amp;</operator> <name pos:start="689:36" pos:end="689:52">SWS_FAST_BILINEAR</name></expr>)</condition><block type="pseudo" pos:start="691:33" pos:end="691:106"><block_content pos:start="691:33" pos:end="691:106">

				<expr_stmt pos:start="691:33" pos:end="691:106"><expr pos:start="691:33" pos:end="691:105"><call pos:start="691:33" pos:end="691:105"><name pos:start="691:33" pos:end="691:38">printf</name><argument_list pos:start="691:39" pos:end="691:105">(<argument pos:start="691:40" pos:end="691:104"><expr pos:start="691:40" pos:end="691:104"><literal type="string" pos:start="691:40" pos:end="691:104">"SwScaler: using FAST_BILINEAR C scaler for horizontal scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

			<else pos:start="693:25" pos:end="698:0">else<block type="pseudo" pos:start="695:33" pos:end="698:0"><block_content pos:start="695:33" pos:end="698:0">

				<expr_stmt pos:start="695:33" pos:end="698:0"><expr pos:start="695:33" pos:end="695:91"><call pos:start="695:33" pos:end="695:91"><name pos:start="695:33" pos:end="695:38">printf</name><argument_list pos:start="695:39" pos:end="695:91">(<argument pos:start="695:40" pos:end="695:90"><expr pos:start="695:40" pos:end="695:90"><literal type="string" pos:start="695:40" pos:end="695:90">"SwScaler: using C scaler for horizontal scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif pos:start="697:1" pos:end="697:6">#<cpp:directive pos:start="697:2" pos:end="697:6">endif</cpp:directive></cpp:endif>

		</block_content>}</block></else></if_stmt>

		<if_stmt pos:start="701:17" pos:end="733:17"><if pos:start="701:17" pos:end="713:17">if<condition pos:start="701:19" pos:end="701:42">(<expr pos:start="701:20" pos:end="701:41"><call pos:start="701:20" pos:end="701:41"><name pos:start="701:20" pos:end="701:30">isPlanarYUV</name><argument_list pos:start="701:31" pos:end="701:41">(<argument pos:start="701:32" pos:end="701:40"><expr pos:start="701:32" pos:end="701:40"><name pos:start="701:32" pos:end="701:40">dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition>

		<block pos:start="703:17" pos:end="713:17">{<block_content pos:start="705:25" pos:end="711:139">

			<if_stmt pos:start="705:25" pos:end="711:139"><if pos:start="705:25" pos:end="707:143">if<condition pos:start="705:27" pos:end="705:48">(<expr pos:start="705:28" pos:end="705:47"><name pos:start="705:28" pos:end="705:44"><name pos:start="705:28" pos:end="705:28">c</name><operator pos:start="705:29" pos:end="705:30">-&gt;</operator><name pos:start="705:31" pos:end="705:44">vLumFilterSize</name></name><operator pos:start="705:45" pos:end="705:46">==</operator><literal type="number" pos:start="705:47" pos:end="705:47">1</literal></expr>)</condition><block type="pseudo" pos:start="707:33" pos:end="707:143"><block_content pos:start="707:33" pos:end="707:143">

				<expr_stmt pos:start="707:33" pos:end="707:143"><expr pos:start="707:33" pos:end="707:142"><call pos:start="707:33" pos:end="707:142"><name pos:start="707:33" pos:end="707:38">printf</name><argument_list pos:start="707:39" pos:end="707:142">(<argument pos:start="707:40" pos:end="707:111"><expr pos:start="707:40" pos:end="707:111"><literal type="string" pos:start="707:40" pos:end="707:111">"SwScaler: using 1-tap %s \"scaler\" for vertical scaling (YV12 like)\n"</literal></expr></argument>, <argument pos:start="707:114" pos:end="707:141"><expr pos:start="707:114" pos:end="707:141"><ternary pos:start="707:114" pos:end="707:141"><condition pos:start="707:114" pos:end="707:129"><expr pos:start="707:114" pos:end="707:127"><name pos:start="707:114" pos:end="707:127"><name pos:start="707:114" pos:end="707:120">cpuCaps</name><operator pos:start="707:121" pos:end="707:121">.</operator><name pos:start="707:122" pos:end="707:127">hasMMX</name></name></expr> ?</condition><then pos:start="707:131" pos:end="707:135"> <expr pos:start="707:131" pos:end="707:135"><literal type="string" pos:start="707:131" pos:end="707:135">"MMX"</literal></expr> </then><else pos:start="707:137" pos:end="707:141">: <expr pos:start="707:139" pos:end="707:141"><literal type="string" pos:start="707:139" pos:end="707:141">"C"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

			<else pos:start="709:25" pos:end="711:139">else<block type="pseudo" pos:start="711:33" pos:end="711:139"><block_content pos:start="711:33" pos:end="711:139">

				<expr_stmt pos:start="711:33" pos:end="711:139"><expr pos:start="711:33" pos:end="711:138"><call pos:start="711:33" pos:end="711:138"><name pos:start="711:33" pos:end="711:38">printf</name><argument_list pos:start="711:39" pos:end="711:138">(<argument pos:start="711:40" pos:end="711:107"><expr pos:start="711:40" pos:end="711:107"><literal type="string" pos:start="711:40" pos:end="711:107">"SwScaler: using n-tap %s scaler for vertical scaling (YV12 like)\n"</literal></expr></argument>, <argument pos:start="711:110" pos:end="711:137"><expr pos:start="711:110" pos:end="711:137"><ternary pos:start="711:110" pos:end="711:137"><condition pos:start="711:110" pos:end="711:125"><expr pos:start="711:110" pos:end="711:123"><name pos:start="711:110" pos:end="711:123"><name pos:start="711:110" pos:end="711:116">cpuCaps</name><operator pos:start="711:117" pos:end="711:117">.</operator><name pos:start="711:118" pos:end="711:123">hasMMX</name></name></expr> ?</condition><then pos:start="711:127" pos:end="711:131"> <expr pos:start="711:127" pos:end="711:131"><literal type="string" pos:start="711:127" pos:end="711:131">"MMX"</literal></expr> </then><else pos:start="711:133" pos:end="711:137">: <expr pos:start="711:135" pos:end="711:137"><literal type="string" pos:start="711:135" pos:end="711:137">"C"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		</block_content>}</block></if>

		<else pos:start="715:17" pos:end="733:17">else

		<block pos:start="717:17" pos:end="733:17">{<block_content pos:start="719:25" pos:end="731:133">

			<if_stmt pos:start="719:25" pos:end="731:133"><if pos:start="719:25" pos:end="723:141">if<condition pos:start="719:27" pos:end="719:72">(<expr pos:start="719:28" pos:end="719:71"><name pos:start="719:28" pos:end="719:44"><name pos:start="719:28" pos:end="719:28">c</name><operator pos:start="719:29" pos:end="719:30">-&gt;</operator><name pos:start="719:31" pos:end="719:44">vLumFilterSize</name></name><operator pos:start="719:45" pos:end="719:46">==</operator><literal type="number" pos:start="719:47" pos:end="719:47">1</literal> <operator pos:start="719:49" pos:end="719:50">&amp;&amp;</operator> <name pos:start="719:52" pos:end="719:68"><name pos:start="719:52" pos:end="719:52">c</name><operator pos:start="719:53" pos:end="719:54">-&gt;</operator><name pos:start="719:55" pos:end="719:68">vChrFilterSize</name></name><operator pos:start="719:69" pos:end="719:70">==</operator><literal type="number" pos:start="719:71" pos:end="719:71">2</literal></expr>)</condition><block type="pseudo" pos:start="721:33" pos:end="723:141"><block_content pos:start="721:33" pos:end="723:141">

				<expr_stmt pos:start="721:33" pos:end="723:141"><expr pos:start="721:33" pos:end="723:140"><call pos:start="721:33" pos:end="723:140"><name pos:start="721:33" pos:end="721:38">printf</name><argument_list pos:start="721:39" pos:end="723:140">(<argument pos:start="721:40" pos:end="723:110"><expr pos:start="721:40" pos:end="723:110"><literal type="string" pos:start="721:40" pos:end="721:115">"SwScaler: using 1-tap %s \"scaler\" for vertical luminance scaling (BGR)\n"</literal>

				       <literal type="string" pos:start="723:40" pos:end="723:110">"SwScaler:       2-tap scaler for vertical chrominance scaling (BGR)\n"</literal></expr></argument>,<argument pos:start="723:112" pos:end="723:139"><expr pos:start="723:112" pos:end="723:139"><ternary pos:start="723:112" pos:end="723:139"><condition pos:start="723:112" pos:end="723:127"><expr pos:start="723:112" pos:end="723:125"><name pos:start="723:112" pos:end="723:125"><name pos:start="723:112" pos:end="723:118">cpuCaps</name><operator pos:start="723:119" pos:end="723:119">.</operator><name pos:start="723:120" pos:end="723:125">hasMMX</name></name></expr> ?</condition><then pos:start="723:129" pos:end="723:133"> <expr pos:start="723:129" pos:end="723:133"><literal type="string" pos:start="723:129" pos:end="723:133">"MMX"</literal></expr> </then><else pos:start="723:135" pos:end="723:139">: <expr pos:start="723:137" pos:end="723:139"><literal type="string" pos:start="723:137" pos:end="723:139">"C"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

			<if type="elseif" pos:start="725:25" pos:end="727:140">else if<condition pos:start="725:32" pos:end="725:77">(<expr pos:start="725:33" pos:end="725:76"><name pos:start="725:33" pos:end="725:49"><name pos:start="725:33" pos:end="725:33">c</name><operator pos:start="725:34" pos:end="725:35">-&gt;</operator><name pos:start="725:36" pos:end="725:49">vLumFilterSize</name></name><operator pos:start="725:50" pos:end="725:51">==</operator><literal type="number" pos:start="725:52" pos:end="725:52">2</literal> <operator pos:start="725:54" pos:end="725:55">&amp;&amp;</operator> <name pos:start="725:57" pos:end="725:73"><name pos:start="725:57" pos:end="725:57">c</name><operator pos:start="725:58" pos:end="725:59">-&gt;</operator><name pos:start="725:60" pos:end="725:73">vChrFilterSize</name></name><operator pos:start="725:74" pos:end="725:75">==</operator><literal type="number" pos:start="725:76" pos:end="725:76">2</literal></expr>)</condition><block type="pseudo" pos:start="727:33" pos:end="727:140"><block_content pos:start="727:33" pos:end="727:140">

				<expr_stmt pos:start="727:33" pos:end="727:140"><expr pos:start="727:33" pos:end="727:139"><call pos:start="727:33" pos:end="727:139"><name pos:start="727:33" pos:end="727:38">printf</name><argument_list pos:start="727:39" pos:end="727:139">(<argument pos:start="727:40" pos:end="727:108"><expr pos:start="727:40" pos:end="727:108"><literal type="string" pos:start="727:40" pos:end="727:108">"SwScaler: using 2-tap linear %s scaler for vertical scaling (BGR)\n"</literal></expr></argument>, <argument pos:start="727:111" pos:end="727:138"><expr pos:start="727:111" pos:end="727:138"><ternary pos:start="727:111" pos:end="727:138"><condition pos:start="727:111" pos:end="727:126"><expr pos:start="727:111" pos:end="727:124"><name pos:start="727:111" pos:end="727:124"><name pos:start="727:111" pos:end="727:117">cpuCaps</name><operator pos:start="727:118" pos:end="727:118">.</operator><name pos:start="727:119" pos:end="727:124">hasMMX</name></name></expr> ?</condition><then pos:start="727:128" pos:end="727:132"> <expr pos:start="727:128" pos:end="727:132"><literal type="string" pos:start="727:128" pos:end="727:132">"MMX"</literal></expr> </then><else pos:start="727:134" pos:end="727:138">: <expr pos:start="727:136" pos:end="727:138"><literal type="string" pos:start="727:136" pos:end="727:138">"C"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

			<else pos:start="729:25" pos:end="731:133">else<block type="pseudo" pos:start="731:33" pos:end="731:133"><block_content pos:start="731:33" pos:end="731:133">

				<expr_stmt pos:start="731:33" pos:end="731:133"><expr pos:start="731:33" pos:end="731:132"><call pos:start="731:33" pos:end="731:132"><name pos:start="731:33" pos:end="731:38">printf</name><argument_list pos:start="731:39" pos:end="731:132">(<argument pos:start="731:40" pos:end="731:101"><expr pos:start="731:40" pos:end="731:101"><literal type="string" pos:start="731:40" pos:end="731:101">"SwScaler: using n-tap %s scaler for vertical scaling (BGR)\n"</literal></expr></argument>, <argument pos:start="731:104" pos:end="731:131"><expr pos:start="731:104" pos:end="731:131"><ternary pos:start="731:104" pos:end="731:131"><condition pos:start="731:104" pos:end="731:119"><expr pos:start="731:104" pos:end="731:117"><name pos:start="731:104" pos:end="731:117"><name pos:start="731:104" pos:end="731:110">cpuCaps</name><operator pos:start="731:111" pos:end="731:111">.</operator><name pos:start="731:112" pos:end="731:117">hasMMX</name></name></expr> ?</condition><then pos:start="731:121" pos:end="731:125"> <expr pos:start="731:121" pos:end="731:125"><literal type="string" pos:start="731:121" pos:end="731:125">"MMX"</literal></expr> </then><else pos:start="731:127" pos:end="731:131">: <expr pos:start="731:129" pos:end="731:131"><literal type="string" pos:start="731:129" pos:end="731:131">"C"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		</block_content>}</block></else></if_stmt>



		<if_stmt pos:start="737:17" pos:end="753:107"><if pos:start="737:17" pos:end="741:91">if<condition pos:start="737:19" pos:end="737:43">(<expr pos:start="737:20" pos:end="737:42"><name pos:start="737:20" pos:end="737:28">dstFormat</name><operator pos:start="737:29" pos:end="737:30">==</operator><name pos:start="737:31" pos:end="737:42">IMGFMT_BGR24</name></expr>)</condition><block type="pseudo" pos:start="739:25" pos:end="741:91"><block_content pos:start="739:25" pos:end="741:91">

			<expr_stmt pos:start="739:25" pos:end="741:91"><expr pos:start="739:25" pos:end="741:90"><call pos:start="739:25" pos:end="741:90"><name pos:start="739:25" pos:end="739:30">printf</name><argument_list pos:start="739:31" pos:end="741:90">(<argument pos:start="739:32" pos:end="739:75"><expr pos:start="739:32" pos:end="739:75"><literal type="string" pos:start="739:32" pos:end="739:75">"SwScaler: using %s YV12-&gt;BGR24 Converter\n"</literal></expr></argument>,

				<argument pos:start="741:33" pos:end="741:89"><expr pos:start="741:33" pos:end="741:89"><ternary pos:start="741:33" pos:end="741:89"><condition pos:start="741:33" pos:end="741:49"><expr pos:start="741:33" pos:end="741:47"><name pos:start="741:33" pos:end="741:47"><name pos:start="741:33" pos:end="741:39">cpuCaps</name><operator pos:start="741:40" pos:end="741:40">.</operator><name pos:start="741:41" pos:end="741:47">hasMMX2</name></name></expr> ?</condition><then pos:start="741:51" pos:end="741:56"> <expr pos:start="741:51" pos:end="741:56"><literal type="string" pos:start="741:51" pos:end="741:56">"MMX2"</literal></expr> </then><else pos:start="741:58" pos:end="741:89">: <expr pos:start="741:60" pos:end="741:89"><operator pos:start="741:60" pos:end="741:60">(</operator><ternary pos:start="741:61" pos:end="741:88"><condition pos:start="741:61" pos:end="741:76"><expr pos:start="741:61" pos:end="741:74"><name pos:start="741:61" pos:end="741:74"><name pos:start="741:61" pos:end="741:67">cpuCaps</name><operator pos:start="741:68" pos:end="741:68">.</operator><name pos:start="741:69" pos:end="741:74">hasMMX</name></name></expr> ?</condition><then pos:start="741:78" pos:end="741:82"> <expr pos:start="741:78" pos:end="741:82"><literal type="string" pos:start="741:78" pos:end="741:82">"MMX"</literal></expr> </then><else pos:start="741:84" pos:end="741:88">: <expr pos:start="741:86" pos:end="741:88"><literal type="string" pos:start="741:86" pos:end="741:88">"C"</literal></expr></else></ternary><operator pos:start="741:89" pos:end="741:89">)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="743:17" pos:end="745:107">else if<condition pos:start="743:24" pos:end="743:48">(<expr pos:start="743:25" pos:end="743:47"><name pos:start="743:25" pos:end="743:33">dstFormat</name><operator pos:start="743:34" pos:end="743:35">==</operator><name pos:start="743:36" pos:end="743:47">IMGFMT_BGR32</name></expr>)</condition><block type="pseudo" pos:start="745:25" pos:end="745:107"><block_content pos:start="745:25" pos:end="745:107">

			<expr_stmt pos:start="745:25" pos:end="745:107"><expr pos:start="745:25" pos:end="745:106"><call pos:start="745:25" pos:end="745:106"><name pos:start="745:25" pos:end="745:30">printf</name><argument_list pos:start="745:31" pos:end="745:106">(<argument pos:start="745:32" pos:end="745:75"><expr pos:start="745:32" pos:end="745:75"><literal type="string" pos:start="745:32" pos:end="745:75">"SwScaler: using %s YV12-&gt;BGR32 Converter\n"</literal></expr></argument>, <argument pos:start="745:78" pos:end="745:105"><expr pos:start="745:78" pos:end="745:105"><ternary pos:start="745:78" pos:end="745:105"><condition pos:start="745:78" pos:end="745:93"><expr pos:start="745:78" pos:end="745:91"><name pos:start="745:78" pos:end="745:91"><name pos:start="745:78" pos:end="745:84">cpuCaps</name><operator pos:start="745:85" pos:end="745:85">.</operator><name pos:start="745:86" pos:end="745:91">hasMMX</name></name></expr> ?</condition><then pos:start="745:95" pos:end="745:99"> <expr pos:start="745:95" pos:end="745:99"><literal type="string" pos:start="745:95" pos:end="745:99">"MMX"</literal></expr> </then><else pos:start="745:101" pos:end="745:105">: <expr pos:start="745:103" pos:end="745:105"><literal type="string" pos:start="745:103" pos:end="745:105">"C"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="747:17" pos:end="749:107">else if<condition pos:start="747:24" pos:end="747:48">(<expr pos:start="747:25" pos:end="747:47"><name pos:start="747:25" pos:end="747:33">dstFormat</name><operator pos:start="747:34" pos:end="747:35">==</operator><name pos:start="747:36" pos:end="747:47">IMGFMT_BGR16</name></expr>)</condition><block type="pseudo" pos:start="749:25" pos:end="749:107"><block_content pos:start="749:25" pos:end="749:107">

			<expr_stmt pos:start="749:25" pos:end="749:107"><expr pos:start="749:25" pos:end="749:106"><call pos:start="749:25" pos:end="749:106"><name pos:start="749:25" pos:end="749:30">printf</name><argument_list pos:start="749:31" pos:end="749:106">(<argument pos:start="749:32" pos:end="749:75"><expr pos:start="749:32" pos:end="749:75"><literal type="string" pos:start="749:32" pos:end="749:75">"SwScaler: using %s YV12-&gt;BGR16 Converter\n"</literal></expr></argument>, <argument pos:start="749:78" pos:end="749:105"><expr pos:start="749:78" pos:end="749:105"><ternary pos:start="749:78" pos:end="749:105"><condition pos:start="749:78" pos:end="749:93"><expr pos:start="749:78" pos:end="749:91"><name pos:start="749:78" pos:end="749:91"><name pos:start="749:78" pos:end="749:84">cpuCaps</name><operator pos:start="749:85" pos:end="749:85">.</operator><name pos:start="749:86" pos:end="749:91">hasMMX</name></name></expr> ?</condition><then pos:start="749:95" pos:end="749:99"> <expr pos:start="749:95" pos:end="749:99"><literal type="string" pos:start="749:95" pos:end="749:99">"MMX"</literal></expr> </then><else pos:start="749:101" pos:end="749:105">: <expr pos:start="749:103" pos:end="749:105"><literal type="string" pos:start="749:103" pos:end="749:105">"C"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="751:17" pos:end="753:107">else if<condition pos:start="751:24" pos:end="751:48">(<expr pos:start="751:25" pos:end="751:47"><name pos:start="751:25" pos:end="751:33">dstFormat</name><operator pos:start="751:34" pos:end="751:35">==</operator><name pos:start="751:36" pos:end="751:47">IMGFMT_BGR15</name></expr>)</condition><block type="pseudo" pos:start="753:25" pos:end="753:107"><block_content pos:start="753:25" pos:end="753:107">

			<expr_stmt pos:start="753:25" pos:end="753:107"><expr pos:start="753:25" pos:end="753:106"><call pos:start="753:25" pos:end="753:106"><name pos:start="753:25" pos:end="753:30">printf</name><argument_list pos:start="753:31" pos:end="753:106">(<argument pos:start="753:32" pos:end="753:75"><expr pos:start="753:32" pos:end="753:75"><literal type="string" pos:start="753:32" pos:end="753:75">"SwScaler: using %s YV12-&gt;BGR15 Converter\n"</literal></expr></argument>, <argument pos:start="753:78" pos:end="753:105"><expr pos:start="753:78" pos:end="753:105"><ternary pos:start="753:78" pos:end="753:105"><condition pos:start="753:78" pos:end="753:93"><expr pos:start="753:78" pos:end="753:91"><name pos:start="753:78" pos:end="753:91"><name pos:start="753:78" pos:end="753:84">cpuCaps</name><operator pos:start="753:85" pos:end="753:85">.</operator><name pos:start="753:86" pos:end="753:91">hasMMX</name></name></expr> ?</condition><then pos:start="753:95" pos:end="753:99"> <expr pos:start="753:95" pos:end="753:99"><literal type="string" pos:start="753:95" pos:end="753:99">"MMX"</literal></expr> </then><else pos:start="753:101" pos:end="753:105">: <expr pos:start="753:103" pos:end="753:105"><literal type="string" pos:start="753:103" pos:end="753:105">"C"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



		<expr_stmt pos:start="757:17" pos:end="757:77"><expr pos:start="757:17" pos:end="757:76"><call pos:start="757:17" pos:end="757:76"><name pos:start="757:17" pos:end="757:22">printf</name><argument_list pos:start="757:23" pos:end="757:76">(<argument pos:start="757:24" pos:end="757:51"><expr pos:start="757:24" pos:end="757:51"><literal type="string" pos:start="757:24" pos:end="757:51">"SwScaler: %dx%d -&gt; %dx%d\n"</literal></expr></argument>, <argument pos:start="757:54" pos:end="757:57"><expr pos:start="757:54" pos:end="757:57"><name pos:start="757:54" pos:end="757:57">srcW</name></expr></argument>, <argument pos:start="757:60" pos:end="757:63"><expr pos:start="757:60" pos:end="757:63"><name pos:start="757:60" pos:end="757:63">srcH</name></expr></argument>, <argument pos:start="757:66" pos:end="757:69"><expr pos:start="757:66" pos:end="757:69"><name pos:start="757:66" pos:end="757:69">dstW</name></expr></argument>, <argument pos:start="757:72" pos:end="757:75"><expr pos:start="757:72" pos:end="757:75"><name pos:start="757:72" pos:end="757:75">dstH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<if_stmt pos:start="761:9" pos:end="773:9"><if pos:start="761:9" pos:end="773:9">if<condition pos:start="761:11" pos:end="761:49">(<expr pos:start="761:12" pos:end="761:48"><operator pos:start="761:12" pos:end="761:12">(</operator><name pos:start="761:13" pos:end="761:17">flags</name> <operator pos:start="761:19" pos:end="761:19">&amp;</operator> <name pos:start="761:21" pos:end="761:34">SWS_PRINT_INFO</name><operator pos:start="761:35" pos:end="761:35">)</operator> <operator pos:start="761:37" pos:end="761:38">&amp;&amp;</operator> <name pos:start="761:40" pos:end="761:46">verbose</name><operator pos:start="761:47" pos:end="761:47">&gt;</operator><literal type="number" pos:start="761:48" pos:end="761:48">1</literal></expr>)</condition>

	<block pos:start="763:9" pos:end="773:9">{<block_content pos:start="765:17" pos:end="771:96">

		<expr_stmt pos:start="765:17" pos:end="767:84"><expr pos:start="765:17" pos:end="767:83"><call pos:start="765:17" pos:end="767:83"><name pos:start="765:17" pos:end="765:22">printf</name><argument_list pos:start="765:23" pos:end="767:83">(<argument pos:start="765:24" pos:end="765:87"><expr pos:start="765:24" pos:end="765:87"><literal type="string" pos:start="765:24" pos:end="765:87">"SwScaler:Lum srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n"</literal></expr></argument>,

			<argument pos:start="767:25" pos:end="767:31"><expr pos:start="767:25" pos:end="767:31"><name pos:start="767:25" pos:end="767:31"><name pos:start="767:25" pos:end="767:25">c</name><operator pos:start="767:26" pos:end="767:27">-&gt;</operator><name pos:start="767:28" pos:end="767:31">srcW</name></name></expr></argument>, <argument pos:start="767:34" pos:end="767:40"><expr pos:start="767:34" pos:end="767:40"><name pos:start="767:34" pos:end="767:40"><name pos:start="767:34" pos:end="767:34">c</name><operator pos:start="767:35" pos:end="767:36">-&gt;</operator><name pos:start="767:37" pos:end="767:40">srcH</name></name></expr></argument>, <argument pos:start="767:43" pos:end="767:49"><expr pos:start="767:43" pos:end="767:49"><name pos:start="767:43" pos:end="767:49"><name pos:start="767:43" pos:end="767:43">c</name><operator pos:start="767:44" pos:end="767:45">-&gt;</operator><name pos:start="767:46" pos:end="767:49">dstW</name></name></expr></argument>, <argument pos:start="767:52" pos:end="767:58"><expr pos:start="767:52" pos:end="767:58"><name pos:start="767:52" pos:end="767:58"><name pos:start="767:52" pos:end="767:52">c</name><operator pos:start="767:53" pos:end="767:54">-&gt;</operator><name pos:start="767:55" pos:end="767:58">dstH</name></name></expr></argument>, <argument pos:start="767:61" pos:end="767:70"><expr pos:start="767:61" pos:end="767:70"><name pos:start="767:61" pos:end="767:70"><name pos:start="767:61" pos:end="767:61">c</name><operator pos:start="767:62" pos:end="767:63">-&gt;</operator><name pos:start="767:64" pos:end="767:70">lumXInc</name></name></expr></argument>, <argument pos:start="767:73" pos:end="767:82"><expr pos:start="767:73" pos:end="767:82"><name pos:start="767:73" pos:end="767:82"><name pos:start="767:73" pos:end="767:73">c</name><operator pos:start="767:74" pos:end="767:75">-&gt;</operator><name pos:start="767:76" pos:end="767:82">lumYInc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="769:17" pos:end="771:96"><expr pos:start="769:17" pos:end="771:95"><call pos:start="769:17" pos:end="771:95"><name pos:start="769:17" pos:end="769:22">printf</name><argument_list pos:start="769:23" pos:end="771:95">(<argument pos:start="769:24" pos:end="769:87"><expr pos:start="769:24" pos:end="769:87"><literal type="string" pos:start="769:24" pos:end="769:87">"SwScaler:Chr srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n"</literal></expr></argument>,

			<argument pos:start="771:25" pos:end="771:34"><expr pos:start="771:25" pos:end="771:34"><name pos:start="771:25" pos:end="771:34"><name pos:start="771:25" pos:end="771:25">c</name><operator pos:start="771:26" pos:end="771:27">-&gt;</operator><name pos:start="771:28" pos:end="771:34">chrSrcW</name></name></expr></argument>, <argument pos:start="771:37" pos:end="771:46"><expr pos:start="771:37" pos:end="771:46"><name pos:start="771:37" pos:end="771:46"><name pos:start="771:37" pos:end="771:37">c</name><operator pos:start="771:38" pos:end="771:39">-&gt;</operator><name pos:start="771:40" pos:end="771:46">chrSrcH</name></name></expr></argument>, <argument pos:start="771:49" pos:end="771:58"><expr pos:start="771:49" pos:end="771:58"><name pos:start="771:49" pos:end="771:58"><name pos:start="771:49" pos:end="771:49">c</name><operator pos:start="771:50" pos:end="771:51">-&gt;</operator><name pos:start="771:52" pos:end="771:58">chrDstW</name></name></expr></argument>, <argument pos:start="771:61" pos:end="771:70"><expr pos:start="771:61" pos:end="771:70"><name pos:start="771:61" pos:end="771:70"><name pos:start="771:61" pos:end="771:61">c</name><operator pos:start="771:62" pos:end="771:63">-&gt;</operator><name pos:start="771:64" pos:end="771:70">chrDstH</name></name></expr></argument>, <argument pos:start="771:73" pos:end="771:82"><expr pos:start="771:73" pos:end="771:82"><name pos:start="771:73" pos:end="771:82"><name pos:start="771:73" pos:end="771:73">c</name><operator pos:start="771:74" pos:end="771:75">-&gt;</operator><name pos:start="771:76" pos:end="771:82">chrXInc</name></name></expr></argument>, <argument pos:start="771:85" pos:end="771:94"><expr pos:start="771:85" pos:end="771:94"><name pos:start="771:85" pos:end="771:94"><name pos:start="771:85" pos:end="771:85">c</name><operator pos:start="771:86" pos:end="771:87">-&gt;</operator><name pos:start="771:88" pos:end="771:94">chrYInc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="777:9" pos:end="777:28"><expr pos:start="777:9" pos:end="777:27"><name pos:start="777:9" pos:end="777:18"><name pos:start="777:9" pos:end="777:9">c</name><operator pos:start="777:10" pos:end="777:11">-&gt;</operator><name pos:start="777:12" pos:end="777:18">swScale</name></name><operator pos:start="777:19" pos:end="777:19">=</operator> <name pos:start="777:21" pos:end="777:27">swScale</name></expr>;</expr_stmt>

	<return pos:start="779:9" pos:end="779:17">return <expr pos:start="779:16" pos:end="779:16"><name pos:start="779:16" pos:end="779:16">c</name></expr>;</return>

</block_content>}</block></function>
</unit>
