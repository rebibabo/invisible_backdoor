<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26528.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">qed_aio_write_alloc</name><parameter_list pos:start="1:32" pos:end="1:58">(<parameter pos:start="1:33" pos:end="1:45"><decl pos:start="1:33" pos:end="1:45"><type pos:start="1:33" pos:end="1:45"><name pos:start="1:33" pos:end="1:40">QEDAIOCB</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">acb</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:57"><decl pos:start="1:48" pos:end="1:57"><type pos:start="1:48" pos:end="1:57"><name pos:start="1:48" pos:end="1:53">size_t</name></type> <name pos:start="1:55" pos:end="1:57">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:5">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">BDRVQEDState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:35">= <expr pos:start="5:23" pos:end="5:35"><call pos:start="5:23" pos:end="5:35"><name pos:start="5:23" pos:end="5:30">acb_to_s</name><argument_list pos:start="5:31" pos:end="5:35">(<argument pos:start="5:32" pos:end="5:34"><expr pos:start="5:32" pos:end="5:34"><name pos:start="5:32" pos:end="5:34">acb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:72">/* Freeze this request if another allocating write is in progress */</comment>

    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:57">(<expr pos:start="11:9" pos:end="11:56"><name pos:start="11:9" pos:end="11:11">acb</name> <operator pos:start="11:13" pos:end="11:14">!=</operator> <call pos:start="11:16" pos:end="11:56"><name pos:start="11:16" pos:end="11:29">QSIMPLEQ_FIRST</name><argument_list pos:start="11:30" pos:end="11:56">(<argument pos:start="11:31" pos:end="11:55"><expr pos:start="11:31" pos:end="11:55"><operator pos:start="11:31" pos:end="11:31">&amp;</operator><name pos:start="11:32" pos:end="11:55"><name pos:start="11:32" pos:end="11:32">s</name><operator pos:start="11:33" pos:end="11:34">-&gt;</operator><name pos:start="11:35" pos:end="11:55">allocating_write_reqs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:59" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:67">

        <expr_stmt pos:start="13:9" pos:end="13:67"><expr pos:start="13:9" pos:end="13:66"><call pos:start="13:9" pos:end="13:66"><name pos:start="13:9" pos:end="13:28">QSIMPLEQ_INSERT_TAIL</name><argument_list pos:start="13:29" pos:end="13:66">(<argument pos:start="13:30" pos:end="13:54"><expr pos:start="13:30" pos:end="13:54"><operator pos:start="13:30" pos:end="13:30">&amp;</operator><name pos:start="13:31" pos:end="13:54"><name pos:start="13:31" pos:end="13:31">s</name><operator pos:start="13:32" pos:end="13:33">-&gt;</operator><name pos:start="13:34" pos:end="13:54">allocating_write_reqs</name></name></expr></argument>, <argument pos:start="13:57" pos:end="13:59"><expr pos:start="13:57" pos:end="13:59"><name pos:start="13:57" pos:end="13:59">acb</name></expr></argument>, <argument pos:start="13:62" pos:end="13:65"><expr pos:start="13:62" pos:end="13:65"><name pos:start="13:62" pos:end="13:65">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:57">(<expr pos:start="17:9" pos:end="17:56"><name pos:start="17:9" pos:end="17:11">acb</name> <operator pos:start="17:13" pos:end="17:14">!=</operator> <call pos:start="17:16" pos:end="17:56"><name pos:start="17:16" pos:end="17:29">QSIMPLEQ_FIRST</name><argument_list pos:start="17:30" pos:end="17:56">(<argument pos:start="17:31" pos:end="17:55"><expr pos:start="17:31" pos:end="17:55"><operator pos:start="17:31" pos:end="17:31">&amp;</operator><name pos:start="17:32" pos:end="17:55"><name pos:start="17:32" pos:end="17:32">s</name><operator pos:start="17:33" pos:end="17:34">-&gt;</operator><name pos:start="17:35" pos:end="17:55">allocating_write_reqs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:59" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:15">

        <return pos:start="19:9" pos:end="19:15">return;</return> <comment type="block" pos:start="19:17" pos:end="19:57">/* wait for existing request to finish */</comment>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="27:60"><expr pos:start="25:5" pos:end="27:59"><name pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:7">acb</name><operator pos:start="25:8" pos:end="25:9">-&gt;</operator><name pos:start="25:10" pos:end="25:22">cur_nclusters</name></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <call pos:start="25:26" pos:end="27:59"><name pos:start="25:26" pos:end="25:46">qed_bytes_to_clusters</name><argument_list pos:start="25:47" pos:end="27:59">(<argument pos:start="25:48" pos:end="25:48"><expr pos:start="25:48" pos:end="25:48"><name pos:start="25:48" pos:end="25:48">s</name></expr></argument>,

            <argument pos:start="27:13" pos:end="27:58"><expr pos:start="27:13" pos:end="27:58"><call pos:start="27:13" pos:end="27:52"><name pos:start="27:13" pos:end="27:35">qed_offset_into_cluster</name><argument_list pos:start="27:36" pos:end="27:52">(<argument pos:start="27:37" pos:end="27:37"><expr pos:start="27:37" pos:end="27:37"><name pos:start="27:37" pos:end="27:37">s</name></expr></argument>, <argument pos:start="27:40" pos:end="27:51"><expr pos:start="27:40" pos:end="27:51"><name pos:start="27:40" pos:end="27:51"><name pos:start="27:40" pos:end="27:42">acb</name><operator pos:start="27:43" pos:end="27:44">-&gt;</operator><name pos:start="27:45" pos:end="27:51">cur_pos</name></name></expr></argument>)</argument_list></call> <operator pos:start="27:54" pos:end="27:54">+</operator> <name pos:start="27:56" pos:end="27:58">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:65"><expr pos:start="29:5" pos:end="29:64"><name pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:7">acb</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:20">cur_cluster</name></name> <operator pos:start="29:22" pos:end="29:22">=</operator> <call pos:start="29:24" pos:end="29:64"><name pos:start="29:24" pos:end="29:41">qed_alloc_clusters</name><argument_list pos:start="29:42" pos:end="29:64">(<argument pos:start="29:43" pos:end="29:43"><expr pos:start="29:43" pos:end="29:43"><name pos:start="29:43" pos:end="29:43">s</name></expr></argument>, <argument pos:start="29:46" pos:end="29:63"><expr pos:start="29:46" pos:end="29:63"><name pos:start="29:46" pos:end="29:63"><name pos:start="29:46" pos:end="29:48">acb</name><operator pos:start="29:49" pos:end="29:50">-&gt;</operator><name pos:start="29:51" pos:end="29:63">cur_nclusters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:70"><expr pos:start="31:5" pos:end="31:69"><call pos:start="31:5" pos:end="31:69"><name pos:start="31:5" pos:end="31:19">qemu_iovec_copy</name><argument_list pos:start="31:20" pos:end="31:69">(<argument pos:start="31:21" pos:end="31:34"><expr pos:start="31:21" pos:end="31:34"><operator pos:start="31:21" pos:end="31:21">&amp;</operator><name pos:start="31:22" pos:end="31:34"><name pos:start="31:22" pos:end="31:24">acb</name><operator pos:start="31:25" pos:end="31:26">-&gt;</operator><name pos:start="31:27" pos:end="31:34">cur_qiov</name></name></expr></argument>, <argument pos:start="31:37" pos:end="31:45"><expr pos:start="31:37" pos:end="31:45"><name pos:start="31:37" pos:end="31:45"><name pos:start="31:37" pos:end="31:39">acb</name><operator pos:start="31:40" pos:end="31:41">-&gt;</operator><name pos:start="31:42" pos:end="31:45">qiov</name></name></expr></argument>, <argument pos:start="31:48" pos:end="31:63"><expr pos:start="31:48" pos:end="31:63"><name pos:start="31:48" pos:end="31:63"><name pos:start="31:48" pos:end="31:50">acb</name><operator pos:start="31:51" pos:end="31:52">-&gt;</operator><name pos:start="31:53" pos:end="31:63">qiov_offset</name></name></expr></argument>, <argument pos:start="31:66" pos:end="31:68"><expr pos:start="31:66" pos:end="31:68"><name pos:start="31:66" pos:end="31:68">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="45:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:37">(<expr pos:start="35:9" pos:end="35:36"><call pos:start="35:9" pos:end="35:36"><name pos:start="35:9" pos:end="35:33">qed_should_set_need_check</name><argument_list pos:start="35:34" pos:end="35:36">(<argument pos:start="35:35" pos:end="35:35"><expr pos:start="35:35" pos:end="35:35"><name pos:start="35:35" pos:end="35:35">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:39" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:56">

        <expr_stmt pos:start="37:9" pos:end="37:47"><expr pos:start="37:9" pos:end="37:46"><name pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:17">header</name><operator pos:start="37:18" pos:end="37:18">.</operator><name pos:start="37:19" pos:end="37:26">features</name></name> <operator pos:start="37:28" pos:end="37:29">|=</operator> <name pos:start="37:31" pos:end="37:46">QED_F_NEED_CHECK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:56"><expr pos:start="39:9" pos:end="39:55"><call pos:start="39:9" pos:end="39:55"><name pos:start="39:9" pos:end="39:24">qed_write_header</name><argument_list pos:start="39:25" pos:end="39:55">(<argument pos:start="39:26" pos:end="39:26"><expr pos:start="39:26" pos:end="39:26"><name pos:start="39:26" pos:end="39:26">s</name></expr></argument>, <argument pos:start="39:29" pos:end="39:49"><expr pos:start="39:29" pos:end="39:49"><name pos:start="39:29" pos:end="39:49">qed_aio_write_prefill</name></expr></argument>, <argument pos:start="39:52" pos:end="39:54"><expr pos:start="39:52" pos:end="39:54"><name pos:start="39:52" pos:end="39:54">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="45:5">else <block pos:start="41:12" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:38">

        <expr_stmt pos:start="43:9" pos:end="43:38"><expr pos:start="43:9" pos:end="43:37"><call pos:start="43:9" pos:end="43:37"><name pos:start="43:9" pos:end="43:29">qed_aio_write_prefill</name><argument_list pos:start="43:30" pos:end="43:37">(<argument pos:start="43:31" pos:end="43:33"><expr pos:start="43:31" pos:end="43:33"><name pos:start="43:31" pos:end="43:33">acb</name></expr></argument>, <argument pos:start="43:36" pos:end="43:36"><expr pos:start="43:36" pos:end="43:36"><literal type="number" pos:start="43:36" pos:end="43:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
