<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12269.c" pos:tabs="8"><function pos:start="1:1" pos:end="40:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">bool</name></type> <name pos:start="1:6" pos:end="1:33">bitmap_test_and_clear_atomic</name><parameter_list pos:start="1:34" pos:end="1:74">(<parameter pos:start="1:35" pos:end="1:52"><decl pos:start="1:35" pos:end="1:52"><type pos:start="1:35" pos:end="1:52"><name pos:start="1:35" pos:end="1:42">unsigned</name> <name pos:start="1:44" pos:end="1:47">long</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:52">map</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:64"><decl pos:start="1:55" pos:end="1:64"><type pos:start="1:55" pos:end="1:64"><name pos:start="1:55" pos:end="1:58">long</name></type> <name pos:start="1:60" pos:end="1:64">start</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:73"><decl pos:start="1:67" pos:end="1:73"><type pos:start="1:67" pos:end="1:73"><name pos:start="1:67" pos:end="1:70">long</name></type> <name pos:start="1:72" pos:end="1:73">nr</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="40:1">{<block_content pos:start="3:5" pos:end="39:22">
    <decl_stmt pos:start="3:5" pos:end="3:45"><decl pos:start="3:5" pos:end="3:44"><type pos:start="3:5" pos:end="3:19"><name pos:start="3:5" pos:end="3:12">unsigned</name> <name pos:start="3:14" pos:end="3:17">long</name> <modifier pos:start="3:19" pos:end="3:19">*</modifier></type><name pos:start="3:20" pos:end="3:20">p</name> <init pos:start="3:22" pos:end="3:44">= <expr pos:start="3:24" pos:end="3:44"><name pos:start="3:24" pos:end="3:26">map</name> <operator pos:start="3:28" pos:end="3:28">+</operator> <call pos:start="3:30" pos:end="3:44"><name pos:start="3:30" pos:end="3:37">BIT_WORD</name><argument_list pos:start="3:38" pos:end="3:44">(<argument pos:start="3:39" pos:end="3:43"><expr pos:start="3:39" pos:end="3:43"><name pos:start="3:39" pos:end="3:43">start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:33"><decl pos:start="4:5" pos:end="4:32"><type pos:start="4:5" pos:end="4:14"><specifier pos:start="4:5" pos:end="4:9">const</specifier> <name pos:start="4:11" pos:end="4:14">long</name></type> <name pos:start="4:16" pos:end="4:19">size</name> <init pos:start="4:21" pos:end="4:32">= <expr pos:start="4:23" pos:end="4:32"><name pos:start="4:23" pos:end="4:27">start</name> <operator pos:start="4:29" pos:end="4:29">+</operator> <name pos:start="4:31" pos:end="4:32">nr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:64"><decl pos:start="5:5" pos:end="5:63"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:21">bits_to_clear</name> <init pos:start="5:23" pos:end="5:63">= <expr pos:start="5:25" pos:end="5:63"><name pos:start="5:25" pos:end="5:37">BITS_PER_LONG</name> <operator pos:start="5:39" pos:end="5:39">-</operator> <operator pos:start="5:41" pos:end="5:41">(</operator><name pos:start="5:42" pos:end="5:46">start</name> <operator pos:start="5:48" pos:end="5:48">%</operator> <name pos:start="5:50" pos:end="5:62">BITS_PER_LONG</name><operator pos:start="5:63" pos:end="5:63">)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:64"><decl pos:start="6:5" pos:end="6:63"><type pos:start="6:5" pos:end="6:17"><name pos:start="6:5" pos:end="6:12">unsigned</name> <name pos:start="6:14" pos:end="6:17">long</name></type> <name pos:start="6:19" pos:end="6:31">mask_to_clear</name> <init pos:start="6:33" pos:end="6:63">= <expr pos:start="6:35" pos:end="6:63"><call pos:start="6:35" pos:end="6:63"><name pos:start="6:35" pos:end="6:56">BITMAP_FIRST_WORD_MASK</name><argument_list pos:start="6:57" pos:end="6:63">(<argument pos:start="6:58" pos:end="6:62"><expr pos:start="6:58" pos:end="6:62"><name pos:start="6:58" pos:end="6:62">start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">long</name></type> <name pos:start="7:19" pos:end="7:23">dirty</name> <init pos:start="7:25" pos:end="7:27">= <expr pos:start="7:27" pos:end="7:27"><literal type="number" pos:start="7:27" pos:end="7:27">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:27"><decl pos:start="8:5" pos:end="8:26"><type pos:start="8:5" pos:end="8:17"><name pos:start="8:5" pos:end="8:12">unsigned</name> <name pos:start="8:14" pos:end="8:17">long</name></type> <name pos:start="8:19" pos:end="8:26">old_bits</name></decl>;</decl_stmt>
    <comment type="block" pos:start="9:5" pos:end="9:20">/* First word */</comment>
    <if_stmt pos:start="10:5" pos:end="17:5"><if pos:start="10:5" pos:end="17:5">if <condition pos:start="10:8" pos:end="10:31">(<expr pos:start="10:9" pos:end="10:30"><name pos:start="10:9" pos:end="10:10">nr</name> <operator pos:start="10:12" pos:end="10:12">-</operator> <name pos:start="10:14" pos:end="10:26">bits_to_clear</name> <operator pos:start="10:28" pos:end="10:28">&gt;</operator> <literal type="number" pos:start="10:30" pos:end="10:30">0</literal></expr>)</condition> <block pos:start="10:33" pos:end="17:5">{<block_content pos:start="11:9" pos:end="16:12">
        <expr_stmt pos:start="11:9" pos:end="11:55"><expr pos:start="11:9" pos:end="11:54"><name pos:start="11:9" pos:end="11:16">old_bits</name> <operator pos:start="11:18" pos:end="11:18">=</operator> <call pos:start="11:20" pos:end="11:54"><name pos:start="11:20" pos:end="11:35">atomic_fetch_and</name><argument_list pos:start="11:36" pos:end="11:54">(<argument pos:start="11:37" pos:end="11:37"><expr pos:start="11:37" pos:end="11:37"><name pos:start="11:37" pos:end="11:37">p</name></expr></argument>, <argument pos:start="11:40" pos:end="11:53"><expr pos:start="11:40" pos:end="11:53"><operator pos:start="11:40" pos:end="11:40">~</operator><name pos:start="11:41" pos:end="11:53">mask_to_clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="12:9" pos:end="12:42"><expr pos:start="12:9" pos:end="12:41"><name pos:start="12:9" pos:end="12:13">dirty</name> <operator pos:start="12:15" pos:end="12:16">|=</operator> <name pos:start="12:18" pos:end="12:25">old_bits</name> <operator pos:start="12:27" pos:end="12:27">&amp;</operator> <name pos:start="12:29" pos:end="12:41">mask_to_clear</name></expr>;</expr_stmt>
        <expr_stmt pos:start="13:9" pos:end="13:28"><expr pos:start="13:9" pos:end="13:27"><name pos:start="13:9" pos:end="13:10">nr</name> <operator pos:start="13:12" pos:end="13:13">-=</operator> <name pos:start="13:15" pos:end="13:27">bits_to_clear</name></expr>;</expr_stmt>
        <expr_stmt pos:start="14:9" pos:end="14:38"><expr pos:start="14:9" pos:end="14:37"><name pos:start="14:9" pos:end="14:21">bits_to_clear</name> <operator pos:start="14:23" pos:end="14:23">=</operator> <name pos:start="14:25" pos:end="14:37">BITS_PER_LONG</name></expr>;</expr_stmt>
        <expr_stmt pos:start="15:9" pos:end="15:29"><expr pos:start="15:9" pos:end="15:28"><name pos:start="15:9" pos:end="15:21">mask_to_clear</name> <operator pos:start="15:23" pos:end="15:23">=</operator> <operator pos:start="15:25" pos:end="15:25">~</operator><literal type="number" pos:start="15:26" pos:end="15:28">0UL</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="16:9" pos:end="16:12"><expr pos:start="16:9" pos:end="16:11"><name pos:start="16:9" pos:end="16:9">p</name><operator pos:start="16:10" pos:end="16:11">++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="18:5" pos:end="18:20">/* Full words */</comment>
    <if_stmt pos:start="19:5" pos:end="28:5"><if pos:start="19:5" pos:end="28:5">if <condition pos:start="19:8" pos:end="19:39">(<expr pos:start="19:9" pos:end="19:38"><name pos:start="19:9" pos:end="19:21">bits_to_clear</name> <operator pos:start="19:23" pos:end="19:24">==</operator> <name pos:start="19:26" pos:end="19:38">BITS_PER_LONG</name></expr>)</condition> <block pos:start="19:41" pos:end="28:5">{<block_content pos:start="20:9" pos:end="27:9">
        <while pos:start="20:9" pos:end="27:9">while <condition pos:start="20:15" pos:end="20:35">(<expr pos:start="20:16" pos:end="20:34"><name pos:start="20:16" pos:end="20:17">nr</name> <operator pos:start="20:19" pos:end="20:20">&gt;=</operator> <name pos:start="20:22" pos:end="20:34">BITS_PER_LONG</name></expr>)</condition> <block pos:start="20:37" pos:end="27:9">{<block_content pos:start="21:13" pos:end="26:16">
            <if_stmt pos:start="21:13" pos:end="24:13"><if pos:start="21:13" pos:end="24:13">if <condition pos:start="21:16" pos:end="21:19">(<expr pos:start="21:17" pos:end="21:18"><operator pos:start="21:17" pos:end="21:17">*</operator><name pos:start="21:18" pos:end="21:18">p</name></expr>)</condition> <block pos:start="21:21" pos:end="24:13">{<block_content pos:start="22:17" pos:end="23:34">
                <expr_stmt pos:start="22:17" pos:end="22:45"><expr pos:start="22:17" pos:end="22:44"><name pos:start="22:17" pos:end="22:24">old_bits</name> <operator pos:start="22:26" pos:end="22:26">=</operator> <call pos:start="22:28" pos:end="22:44"><name pos:start="22:28" pos:end="22:38">atomic_xchg</name><argument_list pos:start="22:39" pos:end="22:44">(<argument pos:start="22:40" pos:end="22:40"><expr pos:start="22:40" pos:end="22:40"><name pos:start="22:40" pos:end="22:40">p</name></expr></argument>, <argument pos:start="22:43" pos:end="22:43"><expr pos:start="22:43" pos:end="22:43"><literal type="number" pos:start="22:43" pos:end="22:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="23:17" pos:end="23:34"><expr pos:start="23:17" pos:end="23:33"><name pos:start="23:17" pos:end="23:21">dirty</name> <operator pos:start="23:23" pos:end="23:24">|=</operator> <name pos:start="23:26" pos:end="23:33">old_bits</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="25:13" pos:end="25:32"><expr pos:start="25:13" pos:end="25:31"><name pos:start="25:13" pos:end="25:14">nr</name> <operator pos:start="25:16" pos:end="25:17">-=</operator> <name pos:start="25:19" pos:end="25:31">BITS_PER_LONG</name></expr>;</expr_stmt>
            <expr_stmt pos:start="26:13" pos:end="26:16"><expr pos:start="26:13" pos:end="26:15"><name pos:start="26:13" pos:end="26:13">p</name><operator pos:start="26:14" pos:end="26:15">++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="29:5" pos:end="29:19">/* Last word */</comment>
    <if_stmt pos:start="30:5" pos:end="38:5"><if pos:start="30:5" pos:end="34:5">if <condition pos:start="30:8" pos:end="30:11">(<expr pos:start="30:9" pos:end="30:10"><name pos:start="30:9" pos:end="30:10">nr</name></expr>)</condition> <block pos:start="30:13" pos:end="34:5">{<block_content pos:start="31:9" pos:end="33:42">
        <expr_stmt pos:start="31:9" pos:end="31:53"><expr pos:start="31:9" pos:end="31:52"><name pos:start="31:9" pos:end="31:21">mask_to_clear</name> <operator pos:start="31:23" pos:end="31:24">&amp;=</operator> <call pos:start="31:26" pos:end="31:52"><name pos:start="31:26" pos:end="31:46">BITMAP_LAST_WORD_MASK</name><argument_list pos:start="31:47" pos:end="31:52">(<argument pos:start="31:48" pos:end="31:51"><expr pos:start="31:48" pos:end="31:51"><name pos:start="31:48" pos:end="31:51">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="32:9" pos:end="32:55"><expr pos:start="32:9" pos:end="32:54"><name pos:start="32:9" pos:end="32:16">old_bits</name> <operator pos:start="32:18" pos:end="32:18">=</operator> <call pos:start="32:20" pos:end="32:54"><name pos:start="32:20" pos:end="32:35">atomic_fetch_and</name><argument_list pos:start="32:36" pos:end="32:54">(<argument pos:start="32:37" pos:end="32:37"><expr pos:start="32:37" pos:end="32:37"><name pos:start="32:37" pos:end="32:37">p</name></expr></argument>, <argument pos:start="32:40" pos:end="32:53"><expr pos:start="32:40" pos:end="32:53"><operator pos:start="32:40" pos:end="32:40">~</operator><name pos:start="32:41" pos:end="32:53">mask_to_clear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="33:9" pos:end="33:42"><expr pos:start="33:9" pos:end="33:41"><name pos:start="33:9" pos:end="33:13">dirty</name> <operator pos:start="33:15" pos:end="33:16">|=</operator> <name pos:start="33:18" pos:end="33:25">old_bits</name> <operator pos:start="33:27" pos:end="33:27">&amp;</operator> <name pos:start="33:29" pos:end="33:41">mask_to_clear</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="34:7" pos:end="38:5">else <block pos:start="34:12" pos:end="38:5">{<block_content pos:start="35:9" pos:end="37:9">
        <if_stmt pos:start="35:9" pos:end="37:9"><if pos:start="35:9" pos:end="37:9">if <condition pos:start="35:12" pos:end="35:19">(<expr pos:start="35:13" pos:end="35:18"><operator pos:start="35:13" pos:end="35:13">!</operator><name pos:start="35:14" pos:end="35:18">dirty</name></expr>)</condition> <block pos:start="35:21" pos:end="37:9">{<block_content pos:start="36:13" pos:end="36:21">
            <expr_stmt pos:start="36:13" pos:end="36:21"><expr pos:start="36:13" pos:end="36:20"><call pos:start="36:13" pos:end="36:20"><name pos:start="36:13" pos:end="36:18">smp_mb</name><argument_list pos:start="36:19" pos:end="36:20">()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <return pos:start="39:5" pos:end="39:22">return <expr pos:start="39:12" pos:end="39:21"><name pos:start="39:12" pos:end="39:16">dirty</name> <operator pos:start="39:18" pos:end="39:19">!=</operator> <literal type="number" pos:start="39:21" pos:end="39:21">0</literal></expr>;</return>
</block_content>}</block></function></unit>
