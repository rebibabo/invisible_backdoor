<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13212.c" pos:tabs="8"><function pos:start="1:1" pos:end="217:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">uint_fast8_t</name></type> <name pos:start="1:21" pos:end="1:40">vorbis_floor0_decode</name><parameter_list pos:start="1:41" pos:end="3:76">(<parameter pos:start="1:42" pos:end="1:59"><decl pos:start="1:42" pos:end="1:59"><type pos:start="1:42" pos:end="1:59"><name pos:start="1:42" pos:end="1:55">vorbis_context</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:59">vc</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:63"><decl pos:start="3:42" pos:end="3:63"><type pos:start="3:42" pos:end="3:63"><name pos:start="3:42" pos:end="3:58">vorbis_floor_data</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:63">vfu</name></decl></parameter>, <parameter pos:start="3:66" pos:end="3:75"><decl pos:start="3:66" pos:end="3:75"><type pos:start="3:66" pos:end="3:75"><name pos:start="3:66" pos:end="3:70">float</name> <modifier pos:start="3:72" pos:end="3:72">*</modifier></type><name pos:start="3:73" pos:end="3:75">vec</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="217:1">{<block_content pos:start="7:5" pos:end="215:13">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">vorbis_floor0</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:21">vf</name> <init pos:start="7:23" pos:end="7:32">= <expr pos:start="7:25" pos:end="7:32"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:32"><name pos:start="7:26" pos:end="7:28">vfu</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:32">t0</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">float</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">lsp</name> <init pos:start="9:16" pos:end="9:24">= <expr pos:start="9:18" pos:end="9:24"><name pos:start="9:18" pos:end="9:24"><name pos:start="9:18" pos:end="9:19">vf</name><operator pos:start="9:20" pos:end="9:21">-&gt;</operator><name pos:start="9:22" pos:end="9:24">lsp</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">uint_fast32_t</name></type> <name pos:start="11:19" pos:end="11:27">amplitude</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">uint_fast32_t</name></type> <name pos:start="13:19" pos:end="13:26">book_idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:66"><decl pos:start="15:5" pos:end="15:65"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">uint_fast8_t</name></type> <name pos:start="15:18" pos:end="15:26">blockflag</name> <init pos:start="15:28" pos:end="15:65">= <expr pos:start="15:30" pos:end="15:65"><name pos:start="15:30" pos:end="15:55"><name pos:start="15:30" pos:end="15:31">vc</name><operator pos:start="15:32" pos:end="15:33">-&gt;</operator><name pos:start="15:34" pos:end="15:38">modes</name><index pos:start="15:39" pos:end="15:55">[<expr pos:start="15:40" pos:end="15:54"><name pos:start="15:40" pos:end="15:54"><name pos:start="15:40" pos:end="15:41">vc</name><operator pos:start="15:42" pos:end="15:43">-&gt;</operator><name pos:start="15:44" pos:end="15:54">mode_number</name></name></expr>]</index></name><operator pos:start="15:56" pos:end="15:56">.</operator><name pos:start="15:57" pos:end="15:65">blockflag</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:54"><expr pos:start="19:5" pos:end="19:53"><name pos:start="19:5" pos:end="19:13">amplitude</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <call pos:start="19:17" pos:end="19:53"><name pos:start="19:17" pos:end="19:24">get_bits</name><argument_list pos:start="19:25" pos:end="19:53">(<argument pos:start="19:26" pos:end="19:32"><expr pos:start="19:26" pos:end="19:32"><operator pos:start="19:26" pos:end="19:26">&amp;</operator><name pos:start="19:27" pos:end="19:32"><name pos:start="19:27" pos:end="19:28">vc</name><operator pos:start="19:29" pos:end="19:30">-&gt;</operator><name pos:start="19:31" pos:end="19:32">gb</name></name></expr></argument>, <argument pos:start="19:35" pos:end="19:52"><expr pos:start="19:35" pos:end="19:52"><name pos:start="19:35" pos:end="19:52"><name pos:start="19:35" pos:end="19:36">vf</name><operator pos:start="19:37" pos:end="19:38">-&gt;</operator><name pos:start="19:39" pos:end="19:52">amplitude_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="207:5"><if pos:start="21:5" pos:end="201:5">if <condition pos:start="21:8" pos:end="21:22">(<expr pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:17">amplitude</name> <operator pos:start="21:19" pos:end="21:19">&gt;</operator> <literal type="number" pos:start="21:21" pos:end="21:21">0</literal></expr>)</condition> <block pos:start="21:24" pos:end="201:5">{<block_content pos:start="23:9" pos:end="199:9">

        <decl_stmt pos:start="23:9" pos:end="23:23"><decl pos:start="23:9" pos:end="23:22"><type pos:start="23:9" pos:end="23:13"><name pos:start="23:9" pos:end="23:13">float</name></type> <name pos:start="23:15" pos:end="23:18">last</name> <init pos:start="23:20" pos:end="23:22">= <expr pos:start="23:22" pos:end="23:22"><literal type="number" pos:start="23:22" pos:end="23:22">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:34"><decl pos:start="25:9" pos:end="25:33"><type pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:21">uint_fast16_t</name></type> <name pos:start="25:23" pos:end="25:29">lsp_len</name> <init pos:start="25:31" pos:end="25:33">= <expr pos:start="25:33" pos:end="25:33"><literal type="number" pos:start="25:33" pos:end="25:33">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:26"><decl pos:start="27:9" pos:end="27:25"><type pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:21">uint_fast16_t</name></type> <name pos:start="27:23" pos:end="27:25">idx</name></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:33"><decl pos:start="29:9" pos:end="29:32"><type pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:23">vorbis_codebook</name></type> <name pos:start="29:25" pos:end="29:32">codebook</name></decl>;</decl_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:58"><expr pos:start="33:9" pos:end="33:57"><name pos:start="33:9" pos:end="33:16">book_idx</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:57"><name pos:start="33:20" pos:end="33:27">get_bits</name><argument_list pos:start="33:28" pos:end="33:57">(<argument pos:start="33:29" pos:end="33:35"><expr pos:start="33:29" pos:end="33:35"><operator pos:start="33:29" pos:end="33:29">&amp;</operator><name pos:start="33:30" pos:end="33:35"><name pos:start="33:30" pos:end="33:31">vc</name><operator pos:start="33:32" pos:end="33:33">-&gt;</operator><name pos:start="33:34" pos:end="33:35">gb</name></name></expr></argument>, <argument pos:start="33:38" pos:end="33:56"><expr pos:start="33:38" pos:end="33:56"><call pos:start="33:38" pos:end="33:56"><name pos:start="33:38" pos:end="33:41">ilog</name><argument_list pos:start="33:42" pos:end="33:56">(<argument pos:start="33:43" pos:end="33:55"><expr pos:start="33:43" pos:end="33:55"><name pos:start="33:43" pos:end="33:55"><name pos:start="33:43" pos:end="33:44">vf</name><operator pos:start="33:45" pos:end="33:46">-&gt;</operator><name pos:start="33:47" pos:end="33:55">num_books</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="45:9"><if pos:start="35:9" pos:end="45:9">if <condition pos:start="35:12" pos:end="35:38">(<expr pos:start="35:13" pos:end="35:37"><name pos:start="35:13" pos:end="35:20">book_idx</name> <operator pos:start="35:22" pos:end="35:23">&gt;=</operator> <name pos:start="35:25" pos:end="35:37"><name pos:start="35:25" pos:end="35:26">vf</name><operator pos:start="35:27" pos:end="35:28">-&gt;</operator><name pos:start="35:29" pos:end="35:37">num_books</name></name></expr>)</condition> <block pos:start="35:40" pos:end="45:9">{<block_content pos:start="37:13" pos:end="41:26">

            <expr_stmt pos:start="37:13" pos:end="39:58"><expr pos:start="37:13" pos:end="39:57"><call pos:start="37:13" pos:end="39:57"><name pos:start="37:13" pos:end="37:18">av_log</name><argument_list pos:start="37:19" pos:end="39:57">(<argument pos:start="37:20" pos:end="37:33"><expr pos:start="37:20" pos:end="37:33"><name pos:start="37:20" pos:end="37:33"><name pos:start="37:20" pos:end="37:21">vc</name><operator pos:start="37:22" pos:end="37:23">-&gt;</operator><name pos:start="37:24" pos:end="37:33">avccontext</name></name></expr></argument>, <argument pos:start="37:36" pos:end="37:47"><expr pos:start="37:36" pos:end="37:47"><name pos:start="37:36" pos:end="37:47">AV_LOG_ERROR</name></expr></argument>,

                    <argument pos:start="39:21" pos:end="39:56"><expr pos:start="39:21" pos:end="39:56"><literal type="string" pos:start="39:21" pos:end="39:56">"floor0 dec: booknumber too high!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:26"><expr pos:start="41:13" pos:end="41:25"><name pos:start="41:13" pos:end="41:20">book_idx</name> <operator pos:start="41:22" pos:end="41:22">=</operator>  <literal type="number" pos:start="41:25" pos:end="41:25">0</literal></expr>;</expr_stmt>

            <comment type="line" pos:start="43:13" pos:end="43:31">//FIXME: look above</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:59"><expr pos:start="47:9" pos:end="47:58"><call pos:start="47:9" pos:end="47:58"><name pos:start="47:9" pos:end="47:16">AV_DEBUG</name><argument_list pos:start="47:17" pos:end="47:58">(<argument pos:start="47:18" pos:end="47:47"><expr pos:start="47:18" pos:end="47:47"><literal type="string" pos:start="47:18" pos:end="47:47">"floor0 dec: booknumber: %u\n"</literal></expr></argument>, <argument pos:start="47:50" pos:end="47:57"><expr pos:start="47:50" pos:end="47:57"><name pos:start="47:50" pos:end="47:57">book_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:58"><expr pos:start="49:9" pos:end="49:57"><name pos:start="49:9" pos:end="49:16">codebook</name> <operator pos:start="49:18" pos:end="49:18">=</operator> <name pos:start="49:20" pos:end="49:57"><name pos:start="49:20" pos:end="49:21">vc</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:32">codebooks</name><index pos:start="49:33" pos:end="49:57">[<expr pos:start="49:34" pos:end="49:56"><name pos:start="49:34" pos:end="49:56"><name pos:start="49:34" pos:end="49:35">vf</name><operator pos:start="49:36" pos:end="49:37">-&gt;</operator><name pos:start="49:38" pos:end="49:46">book_list</name><index pos:start="49:47" pos:end="49:56">[<expr pos:start="49:48" pos:end="49:55"><name pos:start="49:48" pos:end="49:55">book_idx</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>



        <while pos:start="53:9" pos:end="88:0">while <condition pos:start="53:15" pos:end="53:33">(<expr pos:start="53:16" pos:end="53:32"><name pos:start="53:16" pos:end="53:22">lsp_len</name><operator pos:start="53:23" pos:end="53:23">&lt;</operator><name pos:start="53:24" pos:end="53:32"><name pos:start="53:24" pos:end="53:25">vf</name><operator pos:start="53:26" pos:end="53:27">-&gt;</operator><name pos:start="53:28" pos:end="53:32">order</name></name></expr>)</condition> <block pos:start="53:35" pos:end="88:0">{<block_content pos:start="55:13" pos:end="83:43">

            <decl_stmt pos:start="55:13" pos:end="55:24"><decl pos:start="55:13" pos:end="55:23"><type pos:start="55:13" pos:end="55:15"><name pos:start="55:13" pos:end="55:15">int</name></type> <name pos:start="55:17" pos:end="55:23">vec_off</name></decl>;</decl_stmt>



            <expr_stmt pos:start="59:13" pos:end="59:78"><expr pos:start="59:13" pos:end="59:77"><call pos:start="59:13" pos:end="59:77"><name pos:start="59:13" pos:end="59:20">AV_DEBUG</name><argument_list pos:start="59:21" pos:end="59:77">(<argument pos:start="59:22" pos:end="59:55"><expr pos:start="59:22" pos:end="59:55"><literal type="string" pos:start="59:22" pos:end="59:55">"floor0 dec: book dimension: %d\n"</literal></expr></argument>, <argument pos:start="59:58" pos:end="59:76"><expr pos:start="59:58" pos:end="59:76"><name pos:start="59:58" pos:end="59:76"><name pos:start="59:58" pos:end="59:65">codebook</name><operator pos:start="59:66" pos:end="59:66">.</operator><name pos:start="59:67" pos:end="59:76">dimensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:75"><expr pos:start="61:13" pos:end="61:74"><call pos:start="61:13" pos:end="61:74"><name pos:start="61:13" pos:end="61:20">AV_DEBUG</name><argument_list pos:start="61:21" pos:end="61:74">(<argument pos:start="61:22" pos:end="61:54"><expr pos:start="61:22" pos:end="61:54"><literal type="string" pos:start="61:22" pos:end="61:54">"floor0 dec: maximum depth: %d\n"</literal></expr></argument>, <argument pos:start="61:57" pos:end="61:73"><expr pos:start="61:57" pos:end="61:73"><name pos:start="61:57" pos:end="61:73"><name pos:start="61:57" pos:end="61:64">codebook</name><operator pos:start="61:65" pos:end="61:65">.</operator><name pos:start="61:66" pos:end="61:73">maxdepth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="63:13" pos:end="63:34">/* read temp vector */</comment>

            <expr_stmt pos:start="65:13" pos:end="69:44"><expr pos:start="65:13" pos:end="69:43"><name pos:start="65:13" pos:end="65:19">vec_off</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <call pos:start="65:23" pos:end="67:67"><name pos:start="65:23" pos:end="65:30">get_vlc2</name><argument_list pos:start="65:31" pos:end="67:67">(<argument pos:start="65:32" pos:end="65:38"><expr pos:start="65:32" pos:end="65:38"><operator pos:start="65:32" pos:end="65:32">&amp;</operator><name pos:start="65:33" pos:end="65:38"><name pos:start="65:33" pos:end="65:34">vc</name><operator pos:start="65:35" pos:end="65:36">-&gt;</operator><name pos:start="65:37" pos:end="65:38">gb</name></name></expr></argument>, <argument pos:start="65:41" pos:end="65:58"><expr pos:start="65:41" pos:end="65:58"><name pos:start="65:41" pos:end="65:58"><name pos:start="65:41" pos:end="65:48">codebook</name><operator pos:start="65:49" pos:end="65:49">.</operator><name pos:start="65:50" pos:end="65:52">vlc</name><operator pos:start="65:53" pos:end="65:53">.</operator><name pos:start="65:54" pos:end="65:58">table</name></name></expr></argument>,

                               <argument pos:start="67:32" pos:end="67:47"><expr pos:start="67:32" pos:end="67:47"><name pos:start="67:32" pos:end="67:47"><name pos:start="67:32" pos:end="67:39">codebook</name><operator pos:start="67:40" pos:end="67:40">.</operator><name pos:start="67:41" pos:end="67:47">nb_bits</name></name></expr></argument>, <argument pos:start="67:50" pos:end="67:66"><expr pos:start="67:50" pos:end="67:66"><name pos:start="67:50" pos:end="67:66"><name pos:start="67:50" pos:end="67:57">codebook</name><operator pos:start="67:58" pos:end="67:58">.</operator><name pos:start="67:59" pos:end="67:66">maxdepth</name></name></expr></argument>)</argument_list></call>

                      <operator pos:start="69:23" pos:end="69:23">*</operator> <name pos:start="69:25" pos:end="69:43"><name pos:start="69:25" pos:end="69:32">codebook</name><operator pos:start="69:33" pos:end="69:33">.</operator><name pos:start="69:34" pos:end="69:43">dimensions</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:65"><expr pos:start="71:13" pos:end="71:64"><call pos:start="71:13" pos:end="71:64"><name pos:start="71:13" pos:end="71:20">AV_DEBUG</name><argument_list pos:start="71:21" pos:end="71:64">(<argument pos:start="71:22" pos:end="71:54"><expr pos:start="71:22" pos:end="71:54"><literal type="string" pos:start="71:22" pos:end="71:54">"floor0 dec: vector offset: %d\n"</literal></expr></argument>, <argument pos:start="71:57" pos:end="71:63"><expr pos:start="71:57" pos:end="71:63"><name pos:start="71:57" pos:end="71:63">vec_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="73:13" pos:end="73:63">/* copy each vector component and add last to it */</comment>

            <for pos:start="75:13" pos:end="77:76">for <control pos:start="75:17" pos:end="75:59">(<init pos:start="75:18" pos:end="75:25"><expr pos:start="75:18" pos:end="75:24"><name pos:start="75:18" pos:end="75:20">idx</name> <operator pos:start="75:22" pos:end="75:22">=</operator> <literal type="number" pos:start="75:24" pos:end="75:24">0</literal></expr>;</init> <condition pos:start="75:27" pos:end="75:52"><expr pos:start="75:27" pos:end="75:51"><name pos:start="75:27" pos:end="75:29">idx</name> <operator pos:start="75:31" pos:end="75:31">&lt;</operator> <name pos:start="75:33" pos:end="75:51"><name pos:start="75:33" pos:end="75:40">codebook</name><operator pos:start="75:41" pos:end="75:41">.</operator><name pos:start="75:42" pos:end="75:51">dimensions</name></name></expr>;</condition> <incr pos:start="75:54" pos:end="75:58"><expr pos:start="75:54" pos:end="75:58"><operator pos:start="75:54" pos:end="75:55">++</operator><name pos:start="75:56" pos:end="75:58">idx</name></expr></incr>)</control><block type="pseudo" pos:start="77:17" pos:end="77:76"><block_content pos:start="77:17" pos:end="77:76">

                <expr_stmt pos:start="77:17" pos:end="77:76"><expr pos:start="77:17" pos:end="77:75"><name pos:start="77:17" pos:end="77:32"><name pos:start="77:17" pos:end="77:19">lsp</name><index pos:start="77:20" pos:end="77:32">[<expr pos:start="77:21" pos:end="77:31"><name pos:start="77:21" pos:end="77:27">lsp_len</name><operator pos:start="77:28" pos:end="77:28">+</operator><name pos:start="77:29" pos:end="77:31">idx</name></expr>]</index></name> <operator pos:start="77:34" pos:end="77:34">=</operator> <name pos:start="77:36" pos:end="77:68"><name pos:start="77:36" pos:end="77:43">codebook</name><operator pos:start="77:44" pos:end="77:44">.</operator><name pos:start="77:45" pos:end="77:55">codevectors</name><index pos:start="77:56" pos:end="77:68">[<expr pos:start="77:57" pos:end="77:67"><name pos:start="77:57" pos:end="77:63">vec_off</name><operator pos:start="77:64" pos:end="77:64">+</operator><name pos:start="77:65" pos:end="77:67">idx</name></expr>]</index></name> <operator pos:start="77:70" pos:end="77:70">+</operator> <name pos:start="77:72" pos:end="77:75">last</name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="79:13" pos:end="79:38"><expr pos:start="79:13" pos:end="79:37"><name pos:start="79:13" pos:end="79:16">last</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <name pos:start="79:20" pos:end="79:37"><name pos:start="79:20" pos:end="79:22">lsp</name><index pos:start="79:23" pos:end="79:37">[<expr pos:start="79:24" pos:end="79:36"><name pos:start="79:24" pos:end="79:30">lsp_len</name><operator pos:start="79:31" pos:end="79:31">+</operator><name pos:start="79:32" pos:end="79:34">idx</name><operator pos:start="79:35" pos:end="79:35">-</operator><literal type="number" pos:start="79:36" pos:end="79:36">1</literal></expr>]</index></name></expr>;</expr_stmt> <comment type="block" pos:start="79:40" pos:end="79:78">/* set last to last vector component */</comment>



            <expr_stmt pos:start="83:13" pos:end="83:43"><expr pos:start="83:13" pos:end="83:42"><name pos:start="83:13" pos:end="83:19">lsp_len</name> <operator pos:start="83:21" pos:end="83:22">+=</operator> <name pos:start="83:24" pos:end="83:42"><name pos:start="83:24" pos:end="83:31">codebook</name><operator pos:start="83:32" pos:end="83:32">.</operator><name pos:start="83:33" pos:end="83:42">dimensions</name></name></expr>;</expr_stmt>

        </block_content>}</block></while>

<cpp:ifdef pos:start="87:1" pos:end="87:14">#<cpp:directive pos:start="87:2" pos:end="87:6">ifdef</cpp:directive> <name pos:start="87:8" pos:end="87:14">V_DEBUG</name></cpp:ifdef>

        <comment type="block" pos:start="89:9" pos:end="89:38">/* DEBUG: output lsp coeffs */</comment>

        <block pos:start="91:9" pos:end="102:0">{<block_content pos:start="93:13" pos:end="97:75">

            <decl_stmt pos:start="93:13" pos:end="93:20"><decl pos:start="93:13" pos:end="93:19"><type pos:start="93:13" pos:end="93:15"><name pos:start="93:13" pos:end="93:15">int</name></type> <name pos:start="93:17" pos:end="93:19">idx</name></decl>;</decl_stmt>

            <for pos:start="95:13" pos:end="97:75">for <control pos:start="95:17" pos:end="95:47">(<init pos:start="95:18" pos:end="95:25"><expr pos:start="95:18" pos:end="95:24"><name pos:start="95:18" pos:end="95:20">idx</name> <operator pos:start="95:22" pos:end="95:22">=</operator> <literal type="number" pos:start="95:24" pos:end="95:24">0</literal></expr>;</init> <condition pos:start="95:27" pos:end="95:40"><expr pos:start="95:27" pos:end="95:39"><name pos:start="95:27" pos:end="95:29">idx</name> <operator pos:start="95:31" pos:end="95:31">&lt;</operator> <name pos:start="95:33" pos:end="95:39">lsp_len</name></expr>;</condition> <incr pos:start="95:42" pos:end="95:46"><expr pos:start="95:42" pos:end="95:46"><operator pos:start="95:42" pos:end="95:43">++</operator><name pos:start="95:44" pos:end="95:46">idx</name></expr></incr>)</control><block type="pseudo" pos:start="97:17" pos:end="97:75"><block_content pos:start="97:17" pos:end="97:75">

                <expr_stmt pos:start="97:17" pos:end="97:75"><expr pos:start="97:17" pos:end="97:74"><call pos:start="97:17" pos:end="97:74"><name pos:start="97:17" pos:end="97:24">AV_DEBUG</name><argument_list pos:start="97:25" pos:end="97:74">(<argument pos:start="97:26" pos:end="97:58"><expr pos:start="97:26" pos:end="97:58"><literal type="string" pos:start="97:26" pos:end="97:58">"floor0 dec: coeff at %d is %f\n"</literal></expr></argument>, <argument pos:start="97:61" pos:end="97:63"><expr pos:start="97:61" pos:end="97:63"><name pos:start="97:61" pos:end="97:63">idx</name></expr></argument>, <argument pos:start="97:66" pos:end="97:73"><expr pos:start="97:66" pos:end="97:73"><name pos:start="97:66" pos:end="97:73"><name pos:start="97:66" pos:end="97:68">lsp</name><index pos:start="97:69" pos:end="97:73">[<expr pos:start="97:70" pos:end="97:72"><name pos:start="97:70" pos:end="97:72">idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block>

<cpp:endif pos:start="101:1" pos:end="101:6">#<cpp:directive pos:start="101:2" pos:end="101:6">endif</cpp:directive></cpp:endif>



        <comment type="block" pos:start="105:9" pos:end="105:44">/* synthesize floor output vector */</comment>

        <block pos:start="107:9" pos:end="199:9">{<block_content pos:start="109:13" pos:end="197:13">

            <decl_stmt pos:start="109:13" pos:end="109:18"><decl pos:start="109:13" pos:end="109:17"><type pos:start="109:13" pos:end="109:15"><name pos:start="109:13" pos:end="109:15">int</name></type> <name pos:start="109:17" pos:end="109:17">i</name></decl>;</decl_stmt>

            <decl_stmt pos:start="111:13" pos:end="111:34"><decl pos:start="111:13" pos:end="111:33"><type pos:start="111:13" pos:end="111:15"><name pos:start="111:13" pos:end="111:15">int</name></type> <name pos:start="111:17" pos:end="111:21">order</name> <init pos:start="111:23" pos:end="111:33">= <expr pos:start="111:25" pos:end="111:33"><name pos:start="111:25" pos:end="111:33"><name pos:start="111:25" pos:end="111:26">vf</name><operator pos:start="111:27" pos:end="111:28">-&gt;</operator><name pos:start="111:29" pos:end="111:33">order</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="113:13" pos:end="113:51"><decl pos:start="113:13" pos:end="113:50"><type pos:start="113:13" pos:end="113:17"><name pos:start="113:13" pos:end="113:17">float</name></type> <name pos:start="113:19" pos:end="113:23">wstep</name> <init pos:start="113:25" pos:end="113:50">= <expr pos:start="113:27" pos:end="113:50"><name pos:start="113:27" pos:end="113:30">M_PI</name> <operator pos:start="113:32" pos:end="113:32">/</operator> <name pos:start="113:34" pos:end="113:50"><name pos:start="113:34" pos:end="113:35">vf</name><operator pos:start="113:36" pos:end="113:37">-&gt;</operator><name pos:start="113:38" pos:end="113:50">bark_map_size</name></name></expr></init></decl>;</decl_stmt>



            <for pos:start="117:13" pos:end="119:44">for <control pos:start="117:17" pos:end="117:39">(<init pos:start="117:18" pos:end="117:23"><expr pos:start="117:18" pos:end="117:22"><name pos:start="117:18" pos:end="117:18">i</name> <operator pos:start="117:20" pos:end="117:20">=</operator> <literal type="number" pos:start="117:22" pos:end="117:22">0</literal></expr>;</init> <condition pos:start="117:25" pos:end="117:34"><expr pos:start="117:25" pos:end="117:33"><name pos:start="117:25" pos:end="117:25">i</name> <operator pos:start="117:27" pos:end="117:27">&lt;</operator> <name pos:start="117:29" pos:end="117:33">order</name></expr>;</condition> <incr pos:start="117:36" pos:end="117:38"><expr pos:start="117:36" pos:end="117:38"><name pos:start="117:36" pos:end="117:36">i</name><operator pos:start="117:37" pos:end="117:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="119:17" pos:end="119:44"><block_content pos:start="119:17" pos:end="119:44">

                <expr_stmt pos:start="119:17" pos:end="119:44"><expr pos:start="119:17" pos:end="119:43"><name pos:start="119:17" pos:end="119:22"><name pos:start="119:17" pos:end="119:19">lsp</name><index pos:start="119:20" pos:end="119:22">[<expr pos:start="119:21" pos:end="119:21"><name pos:start="119:21" pos:end="119:21">i</name></expr>]</index></name> <operator pos:start="119:24" pos:end="119:24">=</operator> <literal type="number" pos:start="119:26" pos:end="119:29">2.0f</literal> <operator pos:start="119:31" pos:end="119:31">*</operator> <call pos:start="119:33" pos:end="119:43"><name pos:start="119:33" pos:end="119:35">cos</name><argument_list pos:start="119:36" pos:end="119:43">(<argument pos:start="119:37" pos:end="119:42"><expr pos:start="119:37" pos:end="119:42"><name pos:start="119:37" pos:end="119:42"><name pos:start="119:37" pos:end="119:39">lsp</name><index pos:start="119:40" pos:end="119:42">[<expr pos:start="119:41" pos:end="119:41"><name pos:start="119:41" pos:end="119:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



            <expr_stmt pos:start="123:13" pos:end="125:49"><expr pos:start="123:13" pos:end="125:48"><call pos:start="123:13" pos:end="125:48"><name pos:start="123:13" pos:end="123:20">AV_DEBUG</name><argument_list pos:start="123:21" pos:end="125:48">(<argument pos:start="123:22" pos:end="123:72"><expr pos:start="123:22" pos:end="123:72"><literal type="string" pos:start="123:22" pos:end="123:72">"floor0 synth: map_size = %d; m = %d; wstep = %f\n"</literal></expr></argument>,

                     <argument pos:start="125:22" pos:end="125:33"><expr pos:start="125:22" pos:end="125:33"><name pos:start="125:22" pos:end="125:33"><name pos:start="125:22" pos:end="125:23">vf</name><operator pos:start="125:24" pos:end="125:25">-&gt;</operator><name pos:start="125:26" pos:end="125:33">map_size</name></name></expr></argument>, <argument pos:start="125:36" pos:end="125:40"><expr pos:start="125:36" pos:end="125:40"><name pos:start="125:36" pos:end="125:40">order</name></expr></argument>, <argument pos:start="125:43" pos:end="125:47"><expr pos:start="125:43" pos:end="125:47"><name pos:start="125:43" pos:end="125:47">wstep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="129:13" pos:end="129:18"><expr pos:start="129:13" pos:end="129:17"><name pos:start="129:13" pos:end="129:13">i</name> <operator pos:start="129:15" pos:end="129:15">=</operator> <literal type="number" pos:start="129:17" pos:end="129:17">0</literal></expr>;</expr_stmt>

            <while pos:start="131:13" pos:end="197:13">while <condition pos:start="131:19" pos:end="131:47">(<expr pos:start="131:20" pos:end="131:46"><name pos:start="131:20" pos:end="131:20">i</name> <operator pos:start="131:22" pos:end="131:22">&lt;</operator> <name pos:start="131:24" pos:end="131:46"><name pos:start="131:24" pos:end="131:25">vf</name><operator pos:start="131:26" pos:end="131:27">-&gt;</operator><name pos:start="131:28" pos:end="131:35">map_size</name><index pos:start="131:36" pos:end="131:46">[<expr pos:start="131:37" pos:end="131:45"><name pos:start="131:37" pos:end="131:45">blockflag</name></expr>]</index></name></expr>)</condition> <block pos:start="131:49" pos:end="197:13">{<block_content pos:start="133:17" pos:end="195:61">

                <decl_stmt pos:start="133:17" pos:end="133:57"><decl pos:start="133:17" pos:end="133:21"><type pos:start="133:17" pos:end="133:19"><name pos:start="133:17" pos:end="133:19">int</name></type> <name pos:start="133:21" pos:end="133:21">j</name></decl>, <decl pos:start="133:24" pos:end="133:56"><type ref="prev" pos:start="133:17" pos:end="133:19"/><name pos:start="133:24" pos:end="133:32">iter_cond</name> <init pos:start="133:34" pos:end="133:56">= <expr pos:start="133:36" pos:end="133:56"><name pos:start="133:36" pos:end="133:56"><name pos:start="133:36" pos:end="133:37">vf</name><operator pos:start="133:38" pos:end="133:39">-&gt;</operator><name pos:start="133:40" pos:end="133:42">map</name><index pos:start="133:43" pos:end="133:53">[<expr pos:start="133:44" pos:end="133:52"><name pos:start="133:44" pos:end="133:52">blockflag</name></expr>]</index><index pos:start="133:54" pos:end="133:56">[<expr pos:start="133:55" pos:end="133:55"><name pos:start="133:55" pos:end="133:55">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="135:17" pos:end="135:31"><decl pos:start="135:17" pos:end="135:30"><type pos:start="135:17" pos:end="135:21"><name pos:start="135:17" pos:end="135:21">float</name></type> <name pos:start="135:23" pos:end="135:23">p</name> <init pos:start="135:25" pos:end="135:30">= <expr pos:start="135:27" pos:end="135:30"><literal type="number" pos:start="135:27" pos:end="135:30">0.5f</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="137:17" pos:end="137:31"><decl pos:start="137:17" pos:end="137:30"><type pos:start="137:17" pos:end="137:21"><name pos:start="137:17" pos:end="137:21">float</name></type> <name pos:start="137:23" pos:end="137:23">q</name> <init pos:start="137:25" pos:end="137:30">= <expr pos:start="137:27" pos:end="137:30"><literal type="number" pos:start="137:27" pos:end="137:30">0.5f</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="139:17" pos:end="139:64"><decl pos:start="139:17" pos:end="139:63"><type pos:start="139:17" pos:end="139:21"><name pos:start="139:17" pos:end="139:21">float</name></type> <name pos:start="139:23" pos:end="139:31">two_cos_w</name> <init pos:start="139:33" pos:end="139:63">= <expr pos:start="139:35" pos:end="139:63"><literal type="number" pos:start="139:35" pos:end="139:38">2.0f</literal> <operator pos:start="139:40" pos:end="139:40">*</operator> <call pos:start="139:42" pos:end="139:63"><name pos:start="139:42" pos:end="139:44">cos</name><argument_list pos:start="139:45" pos:end="139:63">(<argument pos:start="139:46" pos:end="139:62"><expr pos:start="139:46" pos:end="139:62"><name pos:start="139:46" pos:end="139:50">wstep</name> <operator pos:start="139:52" pos:end="139:52">*</operator> <name pos:start="139:54" pos:end="139:62">iter_cond</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="139:66" pos:end="139:84">// needed all times</comment>



                <comment type="block" pos:start="143:17" pos:end="143:59">/* similar part for the q and p products */</comment>

                <for pos:start="145:17" pos:end="151:17">for <control pos:start="145:21" pos:end="145:50">(<init pos:start="145:22" pos:end="145:27"><expr pos:start="145:22" pos:end="145:26"><name pos:start="145:22" pos:end="145:22">j</name> <operator pos:start="145:24" pos:end="145:24">=</operator> <literal type="number" pos:start="145:26" pos:end="145:26">0</literal></expr>;</init> <condition pos:start="145:29" pos:end="145:42"><expr pos:start="145:29" pos:end="145:41"><name pos:start="145:29" pos:end="145:29">j</name> <operator pos:start="145:31" pos:end="145:31">+</operator> <literal type="number" pos:start="145:33" pos:end="145:33">1</literal> <operator pos:start="145:35" pos:end="145:35">&lt;</operator> <name pos:start="145:37" pos:end="145:41">order</name></expr>;</condition> <incr pos:start="145:44" pos:end="145:49"><expr pos:start="145:44" pos:end="145:49"><name pos:start="145:44" pos:end="145:44">j</name> <operator pos:start="145:46" pos:end="145:47">+=</operator> <literal type="number" pos:start="145:49" pos:end="145:49">2</literal></expr></incr>)</control> <block pos:start="145:52" pos:end="151:17">{<block_content pos:start="147:21" pos:end="149:48">

                    <expr_stmt pos:start="147:21" pos:end="147:48"><expr pos:start="147:21" pos:end="147:47"><name pos:start="147:21" pos:end="147:21">q</name> <operator pos:start="147:23" pos:end="147:24">*=</operator> <name pos:start="147:26" pos:end="147:31"><name pos:start="147:26" pos:end="147:28">lsp</name><index pos:start="147:29" pos:end="147:31">[<expr pos:start="147:30" pos:end="147:30"><name pos:start="147:30" pos:end="147:30">j</name></expr>]</index></name>     <operator pos:start="147:37" pos:end="147:37">-</operator> <name pos:start="147:39" pos:end="147:47">two_cos_w</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="149:21" pos:end="149:48"><expr pos:start="149:21" pos:end="149:47"><name pos:start="149:21" pos:end="149:21">p</name> <operator pos:start="149:23" pos:end="149:24">*=</operator> <name pos:start="149:26" pos:end="149:35"><name pos:start="149:26" pos:end="149:28">lsp</name><index pos:start="149:29" pos:end="149:35">[<expr pos:start="149:30" pos:end="149:34"><name pos:start="149:30" pos:end="149:30">j</name> <operator pos:start="149:32" pos:end="149:32">+</operator> <literal type="number" pos:start="149:34" pos:end="149:34">1</literal></expr>]</index></name> <operator pos:start="149:37" pos:end="149:37">-</operator> <name pos:start="149:39" pos:end="149:47">two_cos_w</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="153:17" pos:end="171:17"><if pos:start="153:17" pos:end="159:17">if <condition pos:start="153:20" pos:end="153:31">(<expr pos:start="153:21" pos:end="153:30"><name pos:start="153:21" pos:end="153:21">j</name> <operator pos:start="153:23" pos:end="153:24">==</operator> <name pos:start="153:26" pos:end="153:30">order</name></expr>)</condition> <block pos:start="153:33" pos:end="159:17">{<block_content pos:start="155:21" pos:end="157:48"> <comment type="line" pos:start="153:35" pos:end="153:47">// even order</comment>

                    <expr_stmt pos:start="155:21" pos:end="155:48"><expr pos:start="155:21" pos:end="155:47"><name pos:start="155:21" pos:end="155:21">p</name> <operator pos:start="155:23" pos:end="155:24">*=</operator> <name pos:start="155:26" pos:end="155:26">p</name> <operator pos:start="155:28" pos:end="155:28">*</operator> <operator pos:start="155:30" pos:end="155:30">(</operator><literal type="number" pos:start="155:31" pos:end="155:36">2.0f</literal> <operator pos:start="155:36" pos:end="155:36">-</operator> <name pos:start="155:38" pos:end="155:46">two_cos_w</name><operator pos:start="155:47" pos:end="155:47">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="157:21" pos:end="157:48"><expr pos:start="157:21" pos:end="157:47"><name pos:start="157:21" pos:end="157:21">q</name> <operator pos:start="157:23" pos:end="157:24">*=</operator> <name pos:start="157:26" pos:end="157:26">q</name> <operator pos:start="157:28" pos:end="157:28">*</operator> <operator pos:start="157:30" pos:end="157:30">(</operator><literal type="number" pos:start="157:31" pos:end="157:36">2.0f</literal> <operator pos:start="157:36" pos:end="157:36">+</operator> <name pos:start="157:38" pos:end="157:46">two_cos_w</name><operator pos:start="157:47" pos:end="157:47">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="159:19" pos:end="171:17">else <block pos:start="159:24" pos:end="171:17">{<block_content pos:start="161:21" pos:end="169:27"> <comment type="line" pos:start="159:26" pos:end="159:37">// odd order</comment>

                    <expr_stmt pos:start="161:21" pos:end="161:42"><expr pos:start="161:21" pos:end="161:41"><name pos:start="161:21" pos:end="161:21">q</name> <operator pos:start="161:23" pos:end="161:24">*=</operator> <name pos:start="161:26" pos:end="161:34">two_cos_w</name><operator pos:start="161:35" pos:end="161:35">-</operator><name pos:start="161:36" pos:end="161:41"><name pos:start="161:36" pos:end="161:38">lsp</name><index pos:start="161:39" pos:end="161:41">[<expr pos:start="161:40" pos:end="161:40"><name pos:start="161:40" pos:end="161:40">j</name></expr>]</index></name></expr>;</expr_stmt> <comment type="line" pos:start="161:44" pos:end="161:65">// one more time for q</comment>



                    <comment type="block" pos:start="165:21" pos:end="165:47">/* final step and square */</comment>

                    <expr_stmt pos:start="167:21" pos:end="167:59"><expr pos:start="167:21" pos:end="167:58"><name pos:start="167:21" pos:end="167:21">p</name> <operator pos:start="167:23" pos:end="167:24">*=</operator> <name pos:start="167:26" pos:end="167:26">p</name> <operator pos:start="167:28" pos:end="167:28">*</operator> <operator pos:start="167:30" pos:end="167:30">(</operator><literal type="number" pos:start="167:31" pos:end="167:35">4.f</literal> <operator pos:start="167:35" pos:end="167:35">-</operator> <name pos:start="167:37" pos:end="167:45">two_cos_w</name> <operator pos:start="167:47" pos:end="167:47">*</operator> <name pos:start="167:49" pos:end="167:57">two_cos_w</name><operator pos:start="167:58" pos:end="167:58">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="169:21" pos:end="169:27"><expr pos:start="169:21" pos:end="169:26"><name pos:start="169:21" pos:end="169:21">q</name> <operator pos:start="169:23" pos:end="169:24">*=</operator> <name pos:start="169:26" pos:end="169:26">q</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <comment type="block" pos:start="175:17" pos:end="175:50">/* calculate linear floor value */</comment>

                <block pos:start="177:17" pos:end="185:17">{<block_content pos:start="179:21" pos:end="183:67">

                    <expr_stmt pos:start="179:21" pos:end="183:67"><expr pos:start="179:21" pos:end="183:66"><name pos:start="179:21" pos:end="179:21">q</name> <operator pos:start="179:23" pos:end="179:23">=</operator> <call pos:start="179:25" pos:end="183:66"><name pos:start="179:25" pos:end="179:27">exp</name><argument_list pos:start="179:28" pos:end="183:66">(<argument pos:start="179:29" pos:end="183:65"><expr pos:start="179:29" pos:end="183:65"><operator pos:start="179:29" pos:end="179:29">(</operator><operator pos:start="179:30" pos:end="179:30">(</operator><operator pos:start="179:31" pos:end="179:31">(</operator><name pos:start="179:32" pos:end="179:40">amplitude</name><operator pos:start="179:41" pos:end="179:41">*</operator><name pos:start="179:42" pos:end="179:61"><name pos:start="179:42" pos:end="179:43">vf</name><operator pos:start="179:44" pos:end="179:45">-&gt;</operator><name pos:start="179:46" pos:end="179:61">amplitude_offset</name></name><operator pos:start="179:62" pos:end="179:62">)</operator> <operator pos:start="179:64" pos:end="179:64">/</operator>

                              <operator pos:start="181:31" pos:end="181:31">(</operator><operator pos:start="181:32" pos:end="181:32">(</operator><operator pos:start="181:33" pos:end="181:33">(</operator><literal type="number" pos:start="181:34" pos:end="181:34">1</literal> <operator pos:start="181:36" pos:end="181:37">&lt;&lt;</operator> <name pos:start="181:39" pos:end="181:56"><name pos:start="181:39" pos:end="181:40">vf</name><operator pos:start="181:41" pos:end="181:42">-&gt;</operator><name pos:start="181:43" pos:end="181:56">amplitude_bits</name></name><operator pos:start="181:57" pos:end="181:57">)</operator> <operator pos:start="181:59" pos:end="181:59">-</operator> <literal type="number" pos:start="181:61" pos:end="181:61">1</literal><operator pos:start="181:62" pos:end="181:62">)</operator> <operator pos:start="181:64" pos:end="181:64">*</operator> <call pos:start="181:66" pos:end="181:76"><name pos:start="181:66" pos:end="181:69">sqrt</name><argument_list pos:start="181:70" pos:end="181:76">(<argument pos:start="181:71" pos:end="181:75"><expr pos:start="181:71" pos:end="181:75"><name pos:start="181:71" pos:end="181:71">p</name> <operator pos:start="181:73" pos:end="181:73">+</operator> <name pos:start="181:75" pos:end="181:75">q</name></expr></argument>)</argument_list></call><operator pos:start="181:77" pos:end="181:77">)</operator><operator pos:start="181:78" pos:end="181:78">)</operator>

                             <operator pos:start="183:30" pos:end="183:30">-</operator> <name pos:start="183:32" pos:end="183:51"><name pos:start="183:32" pos:end="183:33">vf</name><operator pos:start="183:34" pos:end="183:35">-&gt;</operator><name pos:start="183:36" pos:end="183:51">amplitude_offset</name></name><operator pos:start="183:52" pos:end="183:52">)</operator> <operator pos:start="183:54" pos:end="183:54">*</operator> <literal type="number" pos:start="183:56" pos:end="183:65">.11512925f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>



                <comment type="block" pos:start="189:17" pos:end="189:33">/* fill vector */</comment>

                <do pos:start="191:17" pos:end="195:61">do <block pos:start="191:20" pos:end="195:17">{<block_content pos:start="193:21" pos:end="193:36">

                    <expr_stmt pos:start="193:21" pos:end="193:31"><expr pos:start="193:21" pos:end="193:30"><name pos:start="193:21" pos:end="193:26"><name pos:start="193:21" pos:end="193:23">vec</name><index pos:start="193:24" pos:end="193:26">[<expr pos:start="193:25" pos:end="193:25"><name pos:start="193:25" pos:end="193:25">i</name></expr>]</index></name> <operator pos:start="193:28" pos:end="193:28">=</operator> <name pos:start="193:30" pos:end="193:30">q</name></expr>;</expr_stmt> <expr_stmt pos:start="193:33" pos:end="193:36"><expr pos:start="193:33" pos:end="193:35"><operator pos:start="193:33" pos:end="193:34">++</operator><name pos:start="193:35" pos:end="193:35">i</name></expr>;</expr_stmt>

                </block_content>}</block> while <condition pos:start="195:25" pos:end="195:60">(<expr pos:start="195:26" pos:end="195:59"><name pos:start="195:26" pos:end="195:46"><name pos:start="195:26" pos:end="195:27">vf</name><operator pos:start="195:28" pos:end="195:29">-&gt;</operator><name pos:start="195:30" pos:end="195:32">map</name><index pos:start="195:33" pos:end="195:43">[<expr pos:start="195:34" pos:end="195:42"><name pos:start="195:34" pos:end="195:42">blockflag</name></expr>]</index><index pos:start="195:44" pos:end="195:46">[<expr pos:start="195:45" pos:end="195:45"><name pos:start="195:45" pos:end="195:45">i</name></expr>]</index></name> <operator pos:start="195:48" pos:end="195:49">==</operator> <name pos:start="195:51" pos:end="195:59">iter_cond</name></expr>)</condition>;</do>

            </block_content>}</block></while>

        </block_content>}</block>

    </block_content>}</block></if> <else pos:start="201:7" pos:end="207:5">else <block pos:start="201:12" pos:end="207:5">{<block_content pos:start="205:9" pos:end="205:17">

        <comment type="block" pos:start="203:9" pos:end="203:36">/* this channel is unused */</comment>

        <return pos:start="205:9" pos:end="205:17">return <expr pos:start="205:16" pos:end="205:16"><literal type="number" pos:start="205:16" pos:end="205:16">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="211:5" pos:end="211:34"><expr pos:start="211:5" pos:end="211:33"><call pos:start="211:5" pos:end="211:33"><name pos:start="211:5" pos:end="211:12">AV_DEBUG</name><argument_list pos:start="211:13" pos:end="211:33">(<argument pos:start="211:14" pos:end="211:32"><expr pos:start="211:14" pos:end="211:32"><literal type="string" pos:start="211:14" pos:end="211:32">" Floor0 decoded\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="215:5" pos:end="215:13">return <expr pos:start="215:12" pos:end="215:12"><literal type="number" pos:start="215:12" pos:end="215:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
