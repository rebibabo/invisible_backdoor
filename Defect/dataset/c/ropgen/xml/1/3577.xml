<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3577.c" pos:tabs="8"><function pos:start="1:1" pos:end="100:13"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:18">ide_init_drive</name><parameter_list pos:start="1:19" pos:end="3:59">(<parameter pos:start="1:20" pos:end="1:30"><decl pos:start="1:20" pos:end="1:30"><type pos:start="1:20" pos:end="1:30"><name pos:start="1:20" pos:end="1:27">IDEState</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:30">s</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:48">BlockDriverState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">bs</name></decl></parameter>,

                   <parameter pos:start="3:20" pos:end="3:38"><decl pos:start="3:20" pos:end="3:38"><type pos:start="3:20" pos:end="3:38"><specifier pos:start="3:20" pos:end="3:24">const</specifier> <name pos:start="3:26" pos:end="3:29">char</name> <modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:38">version</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:58"><decl pos:start="3:41" pos:end="3:58"><type pos:start="3:41" pos:end="3:58"><specifier pos:start="3:41" pos:end="3:45">const</specifier> <name pos:start="3:47" pos:end="3:50">char</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:58">serial</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="100:13">{<block_content pos:start="7:5" pos:end="100:13">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">cylinders</name></decl>, <decl pos:start="7:20" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:24">heads</name></decl>, <decl pos:start="7:27" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:27" pos:end="7:30">secs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:23">nb_sectors</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:15"><expr pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:9">bs</name></name> <operator pos:start="13:11" pos:end="13:11">=</operator> <name pos:start="13:13" pos:end="13:14">bs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:39"><expr pos:start="15:5" pos:end="15:38"><call pos:start="15:5" pos:end="15:38"><name pos:start="15:5" pos:end="15:21">bdrv_get_geometry</name><argument_list pos:start="15:22" pos:end="15:38">(<argument pos:start="15:23" pos:end="15:24"><expr pos:start="15:23" pos:end="15:24"><name pos:start="15:23" pos:end="15:24">bs</name></expr></argument>, <argument pos:start="15:27" pos:end="15:37"><expr pos:start="15:27" pos:end="15:37"><operator pos:start="15:27" pos:end="15:27">&amp;</operator><name pos:start="15:28" pos:end="15:37">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:55"><expr pos:start="17:5" pos:end="17:54"><call pos:start="17:5" pos:end="17:54"><name pos:start="17:5" pos:end="17:23">bdrv_guess_geometry</name><argument_list pos:start="17:24" pos:end="17:54">(<argument pos:start="17:25" pos:end="17:26"><expr pos:start="17:25" pos:end="17:26"><name pos:start="17:25" pos:end="17:26">bs</name></expr></argument>, <argument pos:start="17:29" pos:end="17:38"><expr pos:start="17:29" pos:end="17:38"><operator pos:start="17:29" pos:end="17:29">&amp;</operator><name pos:start="17:30" pos:end="17:38">cylinders</name></expr></argument>, <argument pos:start="17:41" pos:end="17:46"><expr pos:start="17:41" pos:end="17:46"><operator pos:start="17:41" pos:end="17:41">&amp;</operator><name pos:start="17:42" pos:end="17:46">heads</name></expr></argument>, <argument pos:start="17:49" pos:end="17:53"><expr pos:start="17:49" pos:end="17:53"><operator pos:start="17:49" pos:end="17:49">&amp;</operator><name pos:start="17:50" pos:end="17:53">secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="100:13"><if pos:start="19:5" pos:end="100:13">if <condition pos:start="19:8" pos:end="19:43">(<expr pos:start="19:9" pos:end="19:42"><name pos:start="19:9" pos:end="19:36"><name pos:start="19:9" pos:end="19:17">cylinders</name> <argument_list type="generic" pos:start="19:19" pos:end="19:36">&lt; <argument pos:start="19:21" pos:end="19:34"><expr pos:start="19:21" pos:end="19:34"><literal type="number" pos:start="19:21" pos:end="19:21">1</literal> <operator pos:start="19:23" pos:end="19:24">||</operator> <name pos:start="19:26" pos:end="19:34">cylinders</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="19:38" pos:end="19:42">16383</literal></expr>)</condition> <block pos:start="19:45" pos:end="100:13">{<block_content pos:start="21:9" pos:end="100:13">

        <expr_stmt pos:start="21:9" pos:end="21:57"><expr pos:start="21:9" pos:end="21:56"><call pos:start="21:9" pos:end="21:56"><name pos:start="21:9" pos:end="21:20">error_report</name><argument_list pos:start="21:21" pos:end="21:56">(<argument pos:start="21:22" pos:end="21:55"><expr pos:start="21:22" pos:end="21:55"><literal type="string" pos:start="21:22" pos:end="21:55">"cyls must be between 1 and 16383"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="100:13"><if pos:start="25:5" pos:end="100:13">if <condition pos:start="25:8" pos:end="25:32">(<expr pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:13">heads</name> <argument_list type="generic" pos:start="25:15" pos:end="25:28">&lt; <argument pos:start="25:17" pos:end="25:26"><expr pos:start="25:17" pos:end="25:26"><literal type="number" pos:start="25:17" pos:end="25:17">1</literal> <operator pos:start="25:19" pos:end="25:20">||</operator> <name pos:start="25:22" pos:end="25:26">heads</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="25:30" pos:end="25:31">16</literal></expr>)</condition> <block pos:start="25:34" pos:end="100:13">{<block_content pos:start="27:9" pos:end="100:13">

        <expr_stmt pos:start="27:9" pos:end="27:55"><expr pos:start="27:9" pos:end="27:54"><call pos:start="27:9" pos:end="27:54"><name pos:start="27:9" pos:end="27:20">error_report</name><argument_list pos:start="27:21" pos:end="27:54">(<argument pos:start="27:22" pos:end="27:53"><expr pos:start="27:22" pos:end="27:53"><literal type="string" pos:start="27:22" pos:end="27:53">"heads must be between 1 and 16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="100:13"><if pos:start="31:5" pos:end="100:13">if <condition pos:start="31:8" pos:end="31:30">(<expr pos:start="31:9" pos:end="31:29"><name pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:12">secs</name> <argument_list type="generic" pos:start="31:14" pos:end="31:26">&lt; <argument pos:start="31:16" pos:end="31:24"><expr pos:start="31:16" pos:end="31:24"><literal type="number" pos:start="31:16" pos:end="31:16">1</literal> <operator pos:start="31:18" pos:end="31:19">||</operator> <name pos:start="31:21" pos:end="31:24">secs</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="31:28" pos:end="31:29">63</literal></expr>)</condition> <block pos:start="31:32" pos:end="100:13">{<block_content pos:start="33:9" pos:end="100:13">

        <expr_stmt pos:start="33:9" pos:end="33:54"><expr pos:start="33:9" pos:end="33:53"><call pos:start="33:9" pos:end="33:53"><name pos:start="33:9" pos:end="33:20">error_report</name><argument_list pos:start="33:21" pos:end="33:53">(<argument pos:start="33:22" pos:end="33:52"><expr pos:start="33:22" pos:end="33:52"><literal type="string" pos:start="33:22" pos:end="33:52">"secs must be between 1 and 63"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:16">cylinders</name></name> <operator pos:start="37:18" pos:end="37:18">=</operator> <name pos:start="37:20" pos:end="37:28">cylinders</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:21"><expr pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:12">heads</name></name> <operator pos:start="39:14" pos:end="39:14">=</operator> <name pos:start="39:16" pos:end="39:20">heads</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:22"><expr pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:14">sectors</name></name> <operator pos:start="41:16" pos:end="41:16">=</operator> <name pos:start="41:18" pos:end="41:21">secs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:31"><expr pos:start="43:5" pos:end="43:30"><name pos:start="43:5" pos:end="43:17"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:17">nb_sectors</name></name> <operator pos:start="43:19" pos:end="43:19">=</operator> <name pos:start="43:21" pos:end="43:30">nb_sectors</name></expr>;</expr_stmt>

    <comment type="block" pos:start="45:5" pos:end="47:27">/* The SMART values should be preserved across power cycles

       but they aren't.  */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:25"><expr pos:start="49:5" pos:end="49:24"><name pos:start="49:5" pos:end="49:20"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:20">smart_enabled</name></name> <operator pos:start="49:22" pos:end="49:22">=</operator> <literal type="number" pos:start="49:24" pos:end="49:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:26"><expr pos:start="51:5" pos:end="51:25"><name pos:start="51:5" pos:end="51:21"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:21">smart_autosave</name></name> <operator pos:start="51:23" pos:end="51:23">=</operator> <literal type="number" pos:start="51:25" pos:end="51:25">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:24"><expr pos:start="53:5" pos:end="53:23"><name pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:19">smart_errors</name></name> <operator pos:start="53:21" pos:end="53:21">=</operator> <literal type="number" pos:start="53:23" pos:end="53:23">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:32"><expr pos:start="55:5" pos:end="55:31"><name pos:start="55:5" pos:end="55:27"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:27">smart_selftest_count</name></name> <operator pos:start="55:29" pos:end="55:29">=</operator> <literal type="number" pos:start="55:31" pos:end="55:31">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="100:13"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:50">(<expr pos:start="57:9" pos:end="57:49"><call pos:start="57:9" pos:end="57:30"><name pos:start="57:9" pos:end="57:26">bdrv_get_type_hint</name><argument_list pos:start="57:27" pos:end="57:30">(<argument pos:start="57:28" pos:end="57:29"><expr pos:start="57:28" pos:end="57:29"><name pos:start="57:28" pos:end="57:29">bs</name></expr></argument>)</argument_list></call> <operator pos:start="57:32" pos:end="57:33">==</operator> <name pos:start="57:35" pos:end="57:49">BDRV_TYPE_CDROM</name></expr>)</condition> <block pos:start="57:52" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:51">

        <expr_stmt pos:start="59:9" pos:end="59:31"><expr pos:start="59:9" pos:end="59:30"><name pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:21">drive_kind</name></name> <operator pos:start="59:23" pos:end="59:23">=</operator> <name pos:start="59:25" pos:end="59:30">IDE_CD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:51"><expr pos:start="61:9" pos:end="61:50"><call pos:start="61:9" pos:end="61:50"><name pos:start="61:9" pos:end="61:26">bdrv_set_change_cb</name><argument_list pos:start="61:27" pos:end="61:50">(<argument pos:start="61:28" pos:end="61:29"><expr pos:start="61:28" pos:end="61:29"><name pos:start="61:28" pos:end="61:29">bs</name></expr></argument>, <argument pos:start="61:32" pos:end="61:46"><expr pos:start="61:32" pos:end="61:46"><name pos:start="61:32" pos:end="61:46">cdrom_change_cb</name></expr></argument>, <argument pos:start="61:49" pos:end="61:49"><expr pos:start="61:49" pos:end="61:49"><name pos:start="61:49" pos:end="61:49">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="100:13">else <block pos:start="63:12" pos:end="100:13">{<block_content pos:start="69:9" pos:end="100:13">





        <if_stmt pos:start="69:9" pos:end="100:13"><if pos:start="69:9" pos:end="100:13">if <condition pos:start="69:12" pos:end="69:34">(<expr pos:start="69:13" pos:end="69:33"><call pos:start="69:13" pos:end="69:33"><name pos:start="69:13" pos:end="69:29">bdrv_is_read_only</name><argument_list pos:start="69:30" pos:end="69:33">(<argument pos:start="69:31" pos:end="69:32"><expr pos:start="69:31" pos:end="69:32"><name pos:start="69:31" pos:end="69:32">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:36" pos:end="100:13">{<block_content pos:start="71:13" pos:end="100:13">

            <expr_stmt pos:start="71:13" pos:end="71:56"><expr pos:start="71:13" pos:end="71:55"><call pos:start="71:13" pos:end="71:55"><name pos:start="71:13" pos:end="71:24">error_report</name><argument_list pos:start="71:25" pos:end="71:55">(<argument pos:start="71:26" pos:end="71:54"><expr pos:start="71:26" pos:end="71:54"><literal type="string" pos:start="71:26" pos:end="71:54">"Can't use a read-only drive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <if_stmt pos:start="76:5" pos:end="100:13"><if pos:start="76:5" pos:end="80:5">if <condition pos:start="76:8" pos:end="76:15">(<expr pos:start="76:9" pos:end="76:14"><name pos:start="76:9" pos:end="76:14">serial</name></expr>)</condition> <block pos:start="76:17" pos:end="80:5">{<block_content pos:start="78:9" pos:end="78:74">

        <expr_stmt pos:start="78:9" pos:end="78:74"><expr pos:start="78:9" pos:end="78:73"><call pos:start="78:9" pos:end="78:73"><name pos:start="78:9" pos:end="78:15">strncpy</name><argument_list pos:start="78:16" pos:end="78:73">(<argument pos:start="78:17" pos:end="78:35"><expr pos:start="78:17" pos:end="78:35"><name pos:start="78:17" pos:end="78:35"><name pos:start="78:17" pos:end="78:17">s</name><operator pos:start="78:18" pos:end="78:19">-&gt;</operator><name pos:start="78:20" pos:end="78:35">drive_serial_str</name></name></expr></argument>, <argument pos:start="78:38" pos:end="78:43"><expr pos:start="78:38" pos:end="78:43"><name pos:start="78:38" pos:end="78:43">serial</name></expr></argument>, <argument pos:start="78:46" pos:end="78:72"><expr pos:start="78:46" pos:end="78:72"><sizeof pos:start="78:46" pos:end="78:72">sizeof<argument_list pos:start="78:52" pos:end="78:72">(<argument pos:start="78:53" pos:end="78:71"><expr pos:start="78:53" pos:end="78:71"><name pos:start="78:53" pos:end="78:71"><name pos:start="78:53" pos:end="78:53">s</name><operator pos:start="78:54" pos:end="78:55">-&gt;</operator><name pos:start="78:56" pos:end="78:71">drive_serial_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="80:7" pos:end="100:13">else <block pos:start="80:12" pos:end="100:13">{<block_content pos:start="82:9" pos:end="100:13">

        <expr_stmt pos:start="82:9" pos:end="84:44"><expr pos:start="82:9" pos:end="84:43"><call pos:start="82:9" pos:end="84:43"><name pos:start="82:9" pos:end="82:16">snprintf</name><argument_list pos:start="82:17" pos:end="84:43">(<argument pos:start="82:18" pos:end="82:36"><expr pos:start="82:18" pos:end="82:36"><name pos:start="82:18" pos:end="82:36"><name pos:start="82:18" pos:end="82:18">s</name><operator pos:start="82:19" pos:end="82:20">-&gt;</operator><name pos:start="82:21" pos:end="82:36">drive_serial_str</name></name></expr></argument>, <argument pos:start="82:39" pos:end="82:65"><expr pos:start="82:39" pos:end="82:65"><sizeof pos:start="82:39" pos:end="82:65">sizeof<argument_list pos:start="82:45" pos:end="82:65">(<argument pos:start="82:46" pos:end="82:64"><expr pos:start="82:46" pos:end="82:64"><name pos:start="82:46" pos:end="82:64"><name pos:start="82:46" pos:end="82:46">s</name><operator pos:start="82:47" pos:end="82:48">-&gt;</operator><name pos:start="82:49" pos:end="82:64">drive_serial_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                 <argument pos:start="84:18" pos:end="84:25"><expr pos:start="84:18" pos:end="84:25"><literal type="string" pos:start="84:18" pos:end="84:25">"QM%05d"</literal></expr></argument>, <argument pos:start="84:28" pos:end="84:42"><expr pos:start="84:28" pos:end="84:42"><name pos:start="84:28" pos:end="84:42"><name pos:start="84:28" pos:end="84:28">s</name><operator pos:start="84:29" pos:end="84:30">-&gt;</operator><name pos:start="84:31" pos:end="84:42">drive_serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <if_stmt pos:start="87:5" pos:end="100:13"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:16">(<expr pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:15">version</name></expr>)</condition> <block pos:start="87:18" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:57">

        <expr_stmt pos:start="89:9" pos:end="89:57"><expr pos:start="89:9" pos:end="89:56"><call pos:start="89:9" pos:end="89:56"><name pos:start="89:9" pos:end="89:15">pstrcpy</name><argument_list pos:start="89:16" pos:end="89:56">(<argument pos:start="89:17" pos:end="89:26"><expr pos:start="89:17" pos:end="89:26"><name pos:start="89:17" pos:end="89:26"><name pos:start="89:17" pos:end="89:17">s</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:26">version</name></name></expr></argument>, <argument pos:start="89:29" pos:end="89:46"><expr pos:start="89:29" pos:end="89:46"><sizeof pos:start="89:29" pos:end="89:46">sizeof<argument_list pos:start="89:35" pos:end="89:46">(<argument pos:start="89:36" pos:end="89:45"><expr pos:start="89:36" pos:end="89:45"><name pos:start="89:36" pos:end="89:45"><name pos:start="89:36" pos:end="89:36">s</name><operator pos:start="89:37" pos:end="89:38">-&gt;</operator><name pos:start="89:39" pos:end="89:45">version</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="89:49" pos:end="89:55"><expr pos:start="89:49" pos:end="89:55"><name pos:start="89:49" pos:end="89:55">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="91:7" pos:end="100:13">else <block pos:start="91:12" pos:end="100:13">{<block_content pos:start="93:9" pos:end="100:13">

        <expr_stmt pos:start="93:9" pos:end="93:62"><expr pos:start="93:9" pos:end="93:61"><call pos:start="93:9" pos:end="93:61"><name pos:start="93:9" pos:end="93:15">pstrcpy</name><argument_list pos:start="93:16" pos:end="93:61">(<argument pos:start="93:17" pos:end="93:26"><expr pos:start="93:17" pos:end="93:26"><name pos:start="93:17" pos:end="93:26"><name pos:start="93:17" pos:end="93:17">s</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:26">version</name></name></expr></argument>, <argument pos:start="93:29" pos:end="93:46"><expr pos:start="93:29" pos:end="93:46"><sizeof pos:start="93:29" pos:end="93:46">sizeof<argument_list pos:start="93:35" pos:end="93:46">(<argument pos:start="93:36" pos:end="93:45"><expr pos:start="93:36" pos:end="93:45"><name pos:start="93:36" pos:end="93:45"><name pos:start="93:36" pos:end="93:36">s</name><operator pos:start="93:37" pos:end="93:38">-&gt;</operator><name pos:start="93:39" pos:end="93:45">version</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="93:49" pos:end="93:60"><expr pos:start="93:49" pos:end="93:60"><name pos:start="93:49" pos:end="93:60">QEMU_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt pos:start="96:5" pos:end="96:17"><expr pos:start="96:5" pos:end="96:16"><call pos:start="96:5" pos:end="96:16"><name pos:start="96:5" pos:end="96:13">ide_reset</name><argument_list pos:start="96:14" pos:end="96:16">(<argument pos:start="96:15" pos:end="96:15"><expr pos:start="96:15" pos:end="96:15"><name pos:start="96:15" pos:end="96:15">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="98:5" pos:end="98:52"><expr pos:start="98:5" pos:end="98:51"><call pos:start="98:5" pos:end="98:51"><name pos:start="98:5" pos:end="98:22">bdrv_set_removable</name><argument_list pos:start="98:23" pos:end="98:51">(<argument pos:start="98:24" pos:end="98:25"><expr pos:start="98:24" pos:end="98:25"><name pos:start="98:24" pos:end="98:25">bs</name></expr></argument>, <argument pos:start="98:28" pos:end="98:50"><expr pos:start="98:28" pos:end="98:50"><name pos:start="98:28" pos:end="98:40"><name pos:start="98:28" pos:end="98:28">s</name><operator pos:start="98:29" pos:end="98:30">-&gt;</operator><name pos:start="98:31" pos:end="98:40">drive_kind</name></name> <operator pos:start="98:42" pos:end="98:43">==</operator> <name pos:start="98:45" pos:end="98:50">IDE_CD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="100:5" pos:end="100:13">return <expr pos:start="100:12" pos:end="100:12"><literal type="number" pos:start="100:12" pos:end="100:12">0</literal></expr>;</return></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
