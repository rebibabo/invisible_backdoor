<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12270.c" pos:tabs="8"><function pos:start="1:1" pos:end="465:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">ff_dca_lbr_parse</name><parameter_list pos:start="1:21" pos:end="1:74">(<parameter pos:start="1:22" pos:end="1:37"><decl pos:start="1:22" pos:end="1:37"><type pos:start="1:22" pos:end="1:37"><name pos:start="1:22" pos:end="1:34">DCALbrDecoder</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">s</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:52"><decl pos:start="1:40" pos:end="1:52"><type pos:start="1:40" pos:end="1:52"><name pos:start="1:40" pos:end="1:46">uint8_t</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">data</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:73"><decl pos:start="1:55" pos:end="1:73"><type pos:start="1:55" pos:end="1:73"><name pos:start="1:55" pos:end="1:66">DCAExssAsset</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:73">asset</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="465:1">{<block_content pos:start="5:5" pos:end="463:13">

    <struct pos:start="5:5" pos:end="21:20">struct <block pos:start="5:12" pos:end="21:5">{

        <decl_stmt pos:start="7:9" pos:end="7:24"><decl pos:start="7:9" pos:end="7:23"><type pos:start="7:9" pos:end="7:16"><name pos:start="7:9" pos:end="7:16">LBRChunk</name></type>    <name pos:start="7:21" pos:end="7:23">lfe</name></decl>;</decl_stmt>

        <decl_stmt pos:start="9:9" pos:end="9:26"><decl pos:start="9:9" pos:end="9:25"><type pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:16">LBRChunk</name></type>    <name pos:start="9:21" pos:end="9:25">tonal</name></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:33"><decl pos:start="11:9" pos:end="11:32"><type pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:16">LBRChunk</name></type>    <name pos:start="11:21" pos:end="11:32"><name pos:start="11:21" pos:end="11:29">tonal_grp</name><index pos:start="11:30" pos:end="11:32">[<expr pos:start="11:31" pos:end="11:31"><literal type="number" pos:start="11:31" pos:end="11:31">5</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:48"><decl pos:start="13:9" pos:end="13:47"><type pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">LBRChunk</name></type>    <name pos:start="13:21" pos:end="13:47"><name pos:start="13:21" pos:end="13:25">grid1</name><index pos:start="13:26" pos:end="13:47">[<expr pos:start="13:27" pos:end="13:46"><name pos:start="13:27" pos:end="13:42">DCA_LBR_CHANNELS</name> <operator pos:start="13:44" pos:end="13:44">/</operator> <literal type="number" pos:start="13:46" pos:end="13:46">2</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:50"><decl pos:start="15:9" pos:end="15:49"><type pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:16">LBRChunk</name></type>    <name pos:start="15:21" pos:end="15:49"><name pos:start="15:21" pos:end="15:27">hr_grid</name><index pos:start="15:28" pos:end="15:49">[<expr pos:start="15:29" pos:end="15:48"><name pos:start="15:29" pos:end="15:44">DCA_LBR_CHANNELS</name> <operator pos:start="15:46" pos:end="15:46">/</operator> <literal type="number" pos:start="15:48" pos:end="15:48">2</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:46"><decl pos:start="17:9" pos:end="17:45"><type pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:16">LBRChunk</name></type>    <name pos:start="17:21" pos:end="17:45"><name pos:start="17:21" pos:end="17:23">ts1</name><index pos:start="17:24" pos:end="17:45">[<expr pos:start="17:25" pos:end="17:44"><name pos:start="17:25" pos:end="17:40">DCA_LBR_CHANNELS</name> <operator pos:start="17:42" pos:end="17:42">/</operator> <literal type="number" pos:start="17:44" pos:end="17:44">2</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:46"><decl pos:start="19:9" pos:end="19:45"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">LBRChunk</name></type>    <name pos:start="19:21" pos:end="19:45"><name pos:start="19:21" pos:end="19:23">ts2</name><index pos:start="19:24" pos:end="19:45">[<expr pos:start="19:25" pos:end="19:44"><name pos:start="19:25" pos:end="19:40">DCA_LBR_CHANNELS</name> <operator pos:start="19:42" pos:end="19:42">/</operator> <literal type="number" pos:start="19:44" pos:end="19:44">2</literal></expr>]</index></name></decl>;</decl_stmt>

    }</block> <decl pos:start="21:7" pos:end="21:19"><name pos:start="21:7" pos:end="21:11">chunk</name> <init pos:start="21:13" pos:end="21:19">= <expr pos:start="21:15" pos:end="21:19"><block pos:start="21:15" pos:end="21:19">{ <expr pos:start="21:17" pos:end="21:17"><literal type="number" pos:start="21:17" pos:end="21:17">0</literal></expr> }</block></expr></init></decl>;</struct>



    <decl_stmt pos:start="25:5" pos:end="25:22"><decl pos:start="25:5" pos:end="25:21"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:18">GetByteContext</name></type> <name pos:start="25:20" pos:end="25:21">gb</name></decl>;</decl_stmt>



    <decl_stmt pos:start="29:5" pos:end="29:55"><decl pos:start="29:5" pos:end="29:9"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:9">i</name></decl>, <decl pos:start="29:12" pos:end="29:13"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:12" pos:end="29:13">ch</name></decl>, <decl pos:start="29:16" pos:end="29:17"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:16" pos:end="29:17">sb</name></decl>, <decl pos:start="29:20" pos:end="29:21"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:20" pos:end="29:21">sf</name></decl>, <decl pos:start="29:24" pos:end="29:26"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:24" pos:end="29:26">ret</name></decl>, <decl pos:start="29:29" pos:end="29:33"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:29" pos:end="29:33">group</name></decl>, <decl pos:start="29:36" pos:end="29:43"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:36" pos:end="29:43">chunk_id</name></decl>, <decl pos:start="29:46" pos:end="29:54"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:46" pos:end="29:54">chunk_len</name></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:69"><expr pos:start="33:5" pos:end="33:68"><call pos:start="33:5" pos:end="33:68"><name pos:start="33:5" pos:end="33:20">bytestream2_init</name><argument_list pos:start="33:21" pos:end="33:68">(<argument pos:start="33:22" pos:end="33:24"><expr pos:start="33:22" pos:end="33:24"><operator pos:start="33:22" pos:end="33:22">&amp;</operator><name pos:start="33:23" pos:end="33:24">gb</name></expr></argument>, <argument pos:start="33:27" pos:end="33:50"><expr pos:start="33:27" pos:end="33:50"><name pos:start="33:27" pos:end="33:30">data</name> <operator pos:start="33:32" pos:end="33:32">+</operator> <name pos:start="33:34" pos:end="33:50"><name pos:start="33:34" pos:end="33:38">asset</name><operator pos:start="33:39" pos:end="33:40">-&gt;</operator><name pos:start="33:41" pos:end="33:50">lbr_offset</name></name></expr></argument>, <argument pos:start="33:53" pos:end="33:67"><expr pos:start="33:53" pos:end="33:67"><name pos:start="33:53" pos:end="33:67"><name pos:start="33:53" pos:end="33:57">asset</name><operator pos:start="33:58" pos:end="33:59">-&gt;</operator><name pos:start="33:60" pos:end="33:67">lbr_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="37:5" pos:end="37:20">// LBR sync word</comment>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:54">(<expr pos:start="39:9" pos:end="39:53"><call pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:28">bytestream2_get_be32</name><argument_list pos:start="39:29" pos:end="39:33">(<argument pos:start="39:30" pos:end="39:32"><expr pos:start="39:30" pos:end="39:32"><operator pos:start="39:30" pos:end="39:30">&amp;</operator><name pos:start="39:31" pos:end="39:32">gb</name></expr></argument>)</argument_list></call> <operator pos:start="39:35" pos:end="39:36">!=</operator> <name pos:start="39:38" pos:end="39:53">DCA_SYNCWORD_LBR</name></expr>)</condition> <block pos:start="39:56" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:35">

        <expr_stmt pos:start="41:9" pos:end="41:66"><expr pos:start="41:9" pos:end="41:65"><call pos:start="41:9" pos:end="41:65"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:65">(<argument pos:start="41:16" pos:end="41:23"><expr pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:16">s</name><operator pos:start="41:17" pos:end="41:18">-&gt;</operator><name pos:start="41:19" pos:end="41:23">avctx</name></name></expr></argument>, <argument pos:start="41:26" pos:end="41:37"><expr pos:start="41:26" pos:end="41:37"><name pos:start="41:26" pos:end="41:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:40" pos:end="41:64"><expr pos:start="41:40" pos:end="41:64"><literal type="string" pos:start="41:40" pos:end="41:64">"Invalid LBR sync word\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:35">return <expr pos:start="43:16" pos:end="43:34"><name pos:start="43:16" pos:end="43:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="49:5" pos:end="49:22">// LBR header type</comment>

    <switch pos:start="51:5" pos:end="83:5">switch <condition pos:start="51:12" pos:end="51:38">(<expr pos:start="51:13" pos:end="51:37"><call pos:start="51:13" pos:end="51:37"><name pos:start="51:13" pos:end="51:32">bytestream2_get_byte</name><argument_list pos:start="51:33" pos:end="51:37">(<argument pos:start="51:34" pos:end="51:36"><expr pos:start="51:34" pos:end="51:36"><operator pos:start="51:34" pos:end="51:34">&amp;</operator><name pos:start="51:35" pos:end="51:36">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:40" pos:end="83:5">{<block_content pos:start="53:5" pos:end="81:35">

    <case pos:start="53:5" pos:end="53:30">case <expr pos:start="53:10" pos:end="53:29"><name pos:start="53:10" pos:end="53:29">LBR_HEADER_SYNC_ONLY</name></expr>:</case>

        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:28">(<expr pos:start="55:13" pos:end="55:27"><operator pos:start="55:13" pos:end="55:13">!</operator><name pos:start="55:14" pos:end="55:27"><name pos:start="55:14" pos:end="55:14">s</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:27">sample_rate</name></name></expr>)</condition> <block pos:start="55:30" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:39">

            <expr_stmt pos:start="57:13" pos:end="57:76"><expr pos:start="57:13" pos:end="57:75"><call pos:start="57:13" pos:end="57:75"><name pos:start="57:13" pos:end="57:18">av_log</name><argument_list pos:start="57:19" pos:end="57:75">(<argument pos:start="57:20" pos:end="57:27"><expr pos:start="57:20" pos:end="57:27"><name pos:start="57:20" pos:end="57:27"><name pos:start="57:20" pos:end="57:20">s</name><operator pos:start="57:21" pos:end="57:22">-&gt;</operator><name pos:start="57:23" pos:end="57:27">avctx</name></name></expr></argument>, <argument pos:start="57:30" pos:end="57:41"><expr pos:start="57:30" pos:end="57:41"><name pos:start="57:30" pos:end="57:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="57:44" pos:end="57:74"><expr pos:start="57:44" pos:end="57:74"><literal type="string" pos:start="57:44" pos:end="57:74">"LBR decoder not initialized\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="59:13" pos:end="59:39">return <expr pos:start="59:20" pos:end="59:38"><name pos:start="59:20" pos:end="59:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    <case pos:start="65:5" pos:end="65:33">case <expr pos:start="65:10" pos:end="65:32"><name pos:start="65:10" pos:end="65:32">LBR_HEADER_DECODER_INIT</name></expr>:</case>

        <if_stmt pos:start="67:9" pos:end="73:9"><if pos:start="67:9" pos:end="73:9">if <condition pos:start="67:12" pos:end="67:51">(<expr pos:start="67:13" pos:end="67:50"><operator pos:start="67:13" pos:end="67:13">(</operator><name pos:start="67:14" pos:end="67:16">ret</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <call pos:start="67:20" pos:end="67:45"><name pos:start="67:20" pos:end="67:37">parse_decoder_init</name><argument_list pos:start="67:38" pos:end="67:45">(<argument pos:start="67:39" pos:end="67:39"><expr pos:start="67:39" pos:end="67:39"><name pos:start="67:39" pos:end="67:39">s</name></expr></argument>, <argument pos:start="67:42" pos:end="67:44"><expr pos:start="67:42" pos:end="67:44"><operator pos:start="67:42" pos:end="67:42">&amp;</operator><name pos:start="67:43" pos:end="67:44">gb</name></expr></argument>)</argument_list></call><operator pos:start="67:46" pos:end="67:46">)</operator> <operator pos:start="67:48" pos:end="67:48">&lt;</operator> <literal type="number" pos:start="67:50" pos:end="67:50">0</literal></expr>)</condition> <block pos:start="67:53" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:23">

            <expr_stmt pos:start="69:13" pos:end="69:31"><expr pos:start="69:13" pos:end="69:30"><name pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:26">sample_rate</name></name> <operator pos:start="69:28" pos:end="69:28">=</operator> <literal type="number" pos:start="69:30" pos:end="69:30">0</literal></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:23">return <expr pos:start="71:20" pos:end="71:22"><name pos:start="71:20" pos:end="71:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <default pos:start="77:5" pos:end="77:12">default:</default>

        <expr_stmt pos:start="79:9" pos:end="79:68"><expr pos:start="79:9" pos:end="79:67"><call pos:start="79:9" pos:end="79:67"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="79:67">(<argument pos:start="79:16" pos:end="79:23"><expr pos:start="79:16" pos:end="79:23"><name pos:start="79:16" pos:end="79:23"><name pos:start="79:16" pos:end="79:16">s</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:23">avctx</name></name></expr></argument>, <argument pos:start="79:26" pos:end="79:37"><expr pos:start="79:26" pos:end="79:37"><name pos:start="79:26" pos:end="79:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:40" pos:end="79:66"><expr pos:start="79:40" pos:end="79:66"><literal type="string" pos:start="79:40" pos:end="79:66">"Invalid LBR header type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:35">return <expr pos:start="81:16" pos:end="81:34"><name pos:start="81:16" pos:end="81:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>



    <comment type="line" pos:start="87:5" pos:end="87:29">// LBR frame chunk header</comment>

    <expr_stmt pos:start="89:5" pos:end="89:41"><expr pos:start="89:5" pos:end="89:40"><name pos:start="89:5" pos:end="89:12">chunk_id</name> <operator pos:start="89:14" pos:end="89:14">=</operator> <call pos:start="89:16" pos:end="89:40"><name pos:start="89:16" pos:end="89:35">bytestream2_get_byte</name><argument_list pos:start="89:36" pos:end="89:40">(<argument pos:start="89:37" pos:end="89:39"><expr pos:start="89:37" pos:end="89:39"><operator pos:start="89:37" pos:end="89:37">&amp;</operator><name pos:start="89:38" pos:end="89:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:90"><expr pos:start="91:5" pos:end="91:89"><name pos:start="91:5" pos:end="91:13">chunk_len</name> <operator pos:start="91:15" pos:end="91:15">=</operator> <ternary pos:start="91:17" pos:end="91:89"><condition pos:start="91:17" pos:end="91:35"><expr pos:start="91:17" pos:end="91:33"><operator pos:start="91:17" pos:end="91:17">(</operator><name pos:start="91:18" pos:end="91:25">chunk_id</name> <operator pos:start="91:27" pos:end="91:27">&amp;</operator> <literal type="number" pos:start="91:29" pos:end="91:32">0x80</literal><operator pos:start="91:33" pos:end="91:33">)</operator></expr> ?</condition><then pos:start="91:37" pos:end="91:61"> <expr pos:start="91:37" pos:end="91:61"><call pos:start="91:37" pos:end="91:61"><name pos:start="91:37" pos:end="91:56">bytestream2_get_be16</name><argument_list pos:start="91:57" pos:end="91:61">(<argument pos:start="91:58" pos:end="91:60"><expr pos:start="91:58" pos:end="91:60"><operator pos:start="91:58" pos:end="91:58">&amp;</operator><name pos:start="91:59" pos:end="91:60">gb</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="91:63" pos:end="91:89">: <expr pos:start="91:65" pos:end="91:89"><call pos:start="91:65" pos:end="91:89"><name pos:start="91:65" pos:end="91:84">bytestream2_get_byte</name><argument_list pos:start="91:85" pos:end="91:89">(<argument pos:start="91:86" pos:end="91:88"><expr pos:start="91:86" pos:end="91:88"><operator pos:start="91:86" pos:end="91:86">&amp;</operator><name pos:start="91:87" pos:end="91:88">gb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>



    <if_stmt pos:start="95:5" pos:end="105:5"><if pos:start="95:5" pos:end="105:5">if <condition pos:start="95:8" pos:end="95:52">(<expr pos:start="95:9" pos:end="95:51"><name pos:start="95:9" pos:end="95:17">chunk_len</name> <operator pos:start="95:19" pos:end="95:19">&gt;</operator> <call pos:start="95:21" pos:end="95:51"><name pos:start="95:21" pos:end="95:46">bytestream2_get_bytes_left</name><argument_list pos:start="95:47" pos:end="95:51">(<argument pos:start="95:48" pos:end="95:50"><expr pos:start="95:48" pos:end="95:50"><operator pos:start="95:48" pos:end="95:48">&amp;</operator><name pos:start="95:49" pos:end="95:50">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:54" pos:end="105:5">{<block_content pos:start="97:9" pos:end="103:39">

        <expr_stmt pos:start="97:9" pos:end="97:52"><expr pos:start="97:9" pos:end="97:51"><name pos:start="97:9" pos:end="97:17">chunk_len</name> <operator pos:start="97:19" pos:end="97:19">=</operator> <call pos:start="97:21" pos:end="97:51"><name pos:start="97:21" pos:end="97:46">bytestream2_get_bytes_left</name><argument_list pos:start="97:47" pos:end="97:51">(<argument pos:start="97:48" pos:end="97:50"><expr pos:start="97:48" pos:end="97:50"><operator pos:start="97:48" pos:end="97:48">&amp;</operator><name pos:start="97:49" pos:end="97:50">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:76"><expr pos:start="99:9" pos:end="99:75"><call pos:start="99:9" pos:end="99:75"><name pos:start="99:9" pos:end="99:14">av_log</name><argument_list pos:start="99:15" pos:end="99:75">(<argument pos:start="99:16" pos:end="99:23"><expr pos:start="99:16" pos:end="99:23"><name pos:start="99:16" pos:end="99:23"><name pos:start="99:16" pos:end="99:16">s</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:23">avctx</name></name></expr></argument>, <argument pos:start="99:26" pos:end="99:39"><expr pos:start="99:26" pos:end="99:39"><name pos:start="99:26" pos:end="99:39">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="99:42" pos:end="99:74"><expr pos:start="99:42" pos:end="99:74"><literal type="string" pos:start="99:42" pos:end="99:74">"LBR frame chunk was truncated\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="101:9" pos:end="103:39"><if pos:start="101:9" pos:end="103:39">if <condition pos:start="101:12" pos:end="101:54">(<expr pos:start="101:13" pos:end="101:53"><name pos:start="101:13" pos:end="101:37"><name pos:start="101:13" pos:end="101:13">s</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:20">avctx</name><operator pos:start="101:21" pos:end="101:22">-&gt;</operator><name pos:start="101:23" pos:end="101:37">err_recognition</name></name> <operator pos:start="101:39" pos:end="101:39">&amp;</operator> <name pos:start="101:41" pos:end="101:53">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="103:13" pos:end="103:39"><block_content pos:start="103:13" pos:end="103:39">

            <return pos:start="103:13" pos:end="103:39">return <expr pos:start="103:20" pos:end="103:38"><name pos:start="103:20" pos:end="103:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:48"><expr pos:start="109:5" pos:end="109:47"><call pos:start="109:5" pos:end="109:47"><name pos:start="109:5" pos:end="109:20">bytestream2_init</name><argument_list pos:start="109:21" pos:end="109:47">(<argument pos:start="109:22" pos:end="109:24"><expr pos:start="109:22" pos:end="109:24"><operator pos:start="109:22" pos:end="109:22">&amp;</operator><name pos:start="109:23" pos:end="109:24">gb</name></expr></argument>, <argument pos:start="109:27" pos:end="109:35"><expr pos:start="109:27" pos:end="109:35"><name pos:start="109:27" pos:end="109:35"><name pos:start="109:27" pos:end="109:28">gb</name><operator pos:start="109:29" pos:end="109:29">.</operator><name pos:start="109:30" pos:end="109:35">buffer</name></name></expr></argument>, <argument pos:start="109:38" pos:end="109:46"><expr pos:start="109:38" pos:end="109:46"><name pos:start="109:38" pos:end="109:46">chunk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="113:5" pos:end="159:5">switch <condition pos:start="113:12" pos:end="113:28">(<expr pos:start="113:13" pos:end="113:27"><name pos:start="113:13" pos:end="113:20">chunk_id</name> <operator pos:start="113:22" pos:end="113:22">&amp;</operator> <literal type="number" pos:start="113:24" pos:end="113:27">0x7f</literal></expr>)</condition> <block pos:start="113:30" pos:end="159:5">{<block_content pos:start="115:5" pos:end="157:35">

    <case pos:start="115:5" pos:end="115:25">case <expr pos:start="115:10" pos:end="115:24"><name pos:start="115:10" pos:end="115:24">LBR_CHUNK_FRAME</name></expr>:</case>

        <if_stmt pos:start="117:9" pos:end="145:9"><if pos:start="117:9" pos:end="141:9">if <condition pos:start="117:12" pos:end="117:73">(<expr pos:start="117:13" pos:end="117:72"><name pos:start="117:13" pos:end="117:37"><name pos:start="117:13" pos:end="117:13">s</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:20">avctx</name><operator pos:start="117:21" pos:end="117:22">-&gt;</operator><name pos:start="117:23" pos:end="117:37">err_recognition</name></name> <operator pos:start="117:39" pos:end="117:39">&amp;</operator> <operator pos:start="117:41" pos:end="117:41">(</operator><name pos:start="117:42" pos:end="117:55">AV_EF_CRCCHECK</name> <operator pos:start="117:57" pos:end="117:57">|</operator> <name pos:start="117:59" pos:end="117:71">AV_EF_CAREFUL</name><operator pos:start="117:72" pos:end="117:72">)</operator></expr>)</condition> <block pos:start="117:75" pos:end="141:9">{<block_content pos:start="119:13" pos:end="139:13">

            <decl_stmt pos:start="119:13" pos:end="119:53"><decl pos:start="119:13" pos:end="119:52"><type pos:start="119:13" pos:end="119:15"><name pos:start="119:13" pos:end="119:15">int</name></type> <name pos:start="119:17" pos:end="119:24">checksum</name> <init pos:start="119:26" pos:end="119:52">= <expr pos:start="119:28" pos:end="119:52"><call pos:start="119:28" pos:end="119:52"><name pos:start="119:28" pos:end="119:47">bytestream2_get_be16</name><argument_list pos:start="119:48" pos:end="119:52">(<argument pos:start="119:49" pos:end="119:51"><expr pos:start="119:49" pos:end="119:51"><operator pos:start="119:49" pos:end="119:49">&amp;</operator><name pos:start="119:50" pos:end="119:51">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="121:13" pos:end="121:36"><decl pos:start="121:13" pos:end="121:35"><type pos:start="121:13" pos:end="121:20"><name pos:start="121:13" pos:end="121:20">uint16_t</name></type> <name pos:start="121:22" pos:end="121:24">res</name> <init pos:start="121:26" pos:end="121:35">= <expr pos:start="121:28" pos:end="121:35"><name pos:start="121:28" pos:end="121:35">chunk_id</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:43"><expr pos:start="123:13" pos:end="123:42"><name pos:start="123:13" pos:end="123:15">res</name> <operator pos:start="123:17" pos:end="123:18">+=</operator> <operator pos:start="123:20" pos:end="123:20">(</operator><name pos:start="123:21" pos:end="123:29">chunk_len</name> <operator pos:start="123:31" pos:end="123:32">&gt;&gt;</operator> <literal type="number" pos:start="123:34" pos:end="123:34">8</literal><operator pos:start="123:35" pos:end="123:35">)</operator> <operator pos:start="123:37" pos:end="123:37">&amp;</operator> <literal type="number" pos:start="123:39" pos:end="123:42">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:36"><expr pos:start="125:13" pos:end="125:35"><name pos:start="125:13" pos:end="125:15">res</name> <operator pos:start="125:17" pos:end="125:18">+=</operator> <name pos:start="125:20" pos:end="125:28">chunk_len</name> <operator pos:start="125:30" pos:end="125:30">&amp;</operator> <literal type="number" pos:start="125:32" pos:end="125:35">0xff</literal></expr>;</expr_stmt>

            <for pos:start="127:13" pos:end="129:36">for <control pos:start="127:17" pos:end="127:47">(<init pos:start="127:18" pos:end="127:23"><expr pos:start="127:18" pos:end="127:22"><name pos:start="127:18" pos:end="127:18">i</name> <operator pos:start="127:20" pos:end="127:20">=</operator> <literal type="number" pos:start="127:22" pos:end="127:22">0</literal></expr>;</init> <condition pos:start="127:25" pos:end="127:42"><expr pos:start="127:25" pos:end="127:41"><name pos:start="127:25" pos:end="127:25">i</name> <operator pos:start="127:27" pos:end="127:27">&lt;</operator> <name pos:start="127:29" pos:end="127:37">chunk_len</name> <operator pos:start="127:39" pos:end="127:39">-</operator> <literal type="number" pos:start="127:41" pos:end="127:41">2</literal></expr>;</condition> <incr pos:start="127:44" pos:end="127:46"><expr pos:start="127:44" pos:end="127:46"><name pos:start="127:44" pos:end="127:44">i</name><operator pos:start="127:45" pos:end="127:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="129:17" pos:end="129:36"><block_content pos:start="129:17" pos:end="129:36">

                <expr_stmt pos:start="129:17" pos:end="129:36"><expr pos:start="129:17" pos:end="129:35"><name pos:start="129:17" pos:end="129:19">res</name> <operator pos:start="129:21" pos:end="129:22">+=</operator> <name pos:start="129:24" pos:end="129:35"><name pos:start="129:24" pos:end="129:25">gb</name><operator pos:start="129:26" pos:end="129:26">.</operator><name pos:start="129:27" pos:end="129:32">buffer</name><index pos:start="129:33" pos:end="129:35">[<expr pos:start="129:34" pos:end="129:34"><name pos:start="129:34" pos:end="129:34">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <if_stmt pos:start="131:13" pos:end="139:13"><if pos:start="131:13" pos:end="139:13">if <condition pos:start="131:16" pos:end="131:32">(<expr pos:start="131:17" pos:end="131:31"><name pos:start="131:17" pos:end="131:24">checksum</name> <operator pos:start="131:26" pos:end="131:27">!=</operator> <name pos:start="131:29" pos:end="131:31">res</name></expr>)</condition> <block pos:start="131:34" pos:end="139:13">{<block_content pos:start="133:17" pos:end="137:47">

                <expr_stmt pos:start="133:17" pos:end="133:75"><expr pos:start="133:17" pos:end="133:74"><call pos:start="133:17" pos:end="133:74"><name pos:start="133:17" pos:end="133:22">av_log</name><argument_list pos:start="133:23" pos:end="133:74">(<argument pos:start="133:24" pos:end="133:31"><expr pos:start="133:24" pos:end="133:31"><name pos:start="133:24" pos:end="133:31"><name pos:start="133:24" pos:end="133:24">s</name><operator pos:start="133:25" pos:end="133:26">-&gt;</operator><name pos:start="133:27" pos:end="133:31">avctx</name></name></expr></argument>, <argument pos:start="133:34" pos:end="133:47"><expr pos:start="133:34" pos:end="133:47"><name pos:start="133:34" pos:end="133:47">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="133:50" pos:end="133:73"><expr pos:start="133:50" pos:end="133:73"><literal type="string" pos:start="133:50" pos:end="133:73">"Invalid LBR checksum\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="135:17" pos:end="137:47"><if pos:start="135:17" pos:end="137:47">if <condition pos:start="135:20" pos:end="135:62">(<expr pos:start="135:21" pos:end="135:61"><name pos:start="135:21" pos:end="135:45"><name pos:start="135:21" pos:end="135:21">s</name><operator pos:start="135:22" pos:end="135:23">-&gt;</operator><name pos:start="135:24" pos:end="135:28">avctx</name><operator pos:start="135:29" pos:end="135:30">-&gt;</operator><name pos:start="135:31" pos:end="135:45">err_recognition</name></name> <operator pos:start="135:47" pos:end="135:47">&amp;</operator> <name pos:start="135:49" pos:end="135:61">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="137:21" pos:end="137:47"><block_content pos:start="137:21" pos:end="137:47">

                    <return pos:start="137:21" pos:end="137:47">return <expr pos:start="137:28" pos:end="137:46"><name pos:start="137:28" pos:end="137:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="141:11" pos:end="145:9">else <block pos:start="141:16" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:37">

            <expr_stmt pos:start="143:13" pos:end="143:37"><expr pos:start="143:13" pos:end="143:36"><call pos:start="143:13" pos:end="143:36"><name pos:start="143:13" pos:end="143:28">bytestream2_skip</name><argument_list pos:start="143:29" pos:end="143:36">(<argument pos:start="143:30" pos:end="143:32"><expr pos:start="143:30" pos:end="143:32"><operator pos:start="143:30" pos:end="143:30">&amp;</operator><name pos:start="143:31" pos:end="143:32">gb</name></expr></argument>, <argument pos:start="143:35" pos:end="143:35"><expr pos:start="143:35" pos:end="143:35"><literal type="number" pos:start="143:35" pos:end="143:35">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="147:9" pos:end="147:14">break;</break>

    <case pos:start="149:5" pos:end="149:33">case <expr pos:start="149:10" pos:end="149:32"><name pos:start="149:10" pos:end="149:32">LBR_CHUNK_FRAME_NO_CSUM</name></expr>:</case>

        <break pos:start="151:9" pos:end="151:14">break;</break>

    <default pos:start="153:5" pos:end="153:12">default:</default>

        <expr_stmt pos:start="155:9" pos:end="155:71"><expr pos:start="155:9" pos:end="155:70"><call pos:start="155:9" pos:end="155:70"><name pos:start="155:9" pos:end="155:14">av_log</name><argument_list pos:start="155:15" pos:end="155:70">(<argument pos:start="155:16" pos:end="155:23"><expr pos:start="155:16" pos:end="155:23"><name pos:start="155:16" pos:end="155:23"><name pos:start="155:16" pos:end="155:16">s</name><operator pos:start="155:17" pos:end="155:18">-&gt;</operator><name pos:start="155:19" pos:end="155:23">avctx</name></name></expr></argument>, <argument pos:start="155:26" pos:end="155:37"><expr pos:start="155:26" pos:end="155:37"><name pos:start="155:26" pos:end="155:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="155:40" pos:end="155:69"><expr pos:start="155:40" pos:end="155:69"><literal type="string" pos:start="155:40" pos:end="155:69">"Invalid LBR frame chunk ID\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="157:9" pos:end="157:35">return <expr pos:start="157:16" pos:end="157:34"><name pos:start="157:16" pos:end="157:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>



    <comment type="line" pos:start="163:5" pos:end="163:26">// Clear current frame</comment>

    <expr_stmt pos:start="165:5" pos:end="165:56"><expr pos:start="165:5" pos:end="165:55"><call pos:start="165:5" pos:end="165:55"><name pos:start="165:5" pos:end="165:10">memset</name><argument_list pos:start="165:11" pos:end="165:55">(<argument pos:start="165:12" pos:end="165:26"><expr pos:start="165:12" pos:end="165:26"><name pos:start="165:12" pos:end="165:26"><name pos:start="165:12" pos:end="165:12">s</name><operator pos:start="165:13" pos:end="165:14">-&gt;</operator><name pos:start="165:15" pos:end="165:26">quant_levels</name></name></expr></argument>, <argument pos:start="165:29" pos:end="165:29"><expr pos:start="165:29" pos:end="165:29"><literal type="number" pos:start="165:29" pos:end="165:29">0</literal></expr></argument>, <argument pos:start="165:32" pos:end="165:54"><expr pos:start="165:32" pos:end="165:54"><sizeof pos:start="165:32" pos:end="165:54">sizeof<argument_list pos:start="165:38" pos:end="165:54">(<argument pos:start="165:39" pos:end="165:53"><expr pos:start="165:39" pos:end="165:53"><name pos:start="165:39" pos:end="165:53"><name pos:start="165:39" pos:end="165:39">s</name><operator pos:start="165:40" pos:end="165:41">-&gt;</operator><name pos:start="165:42" pos:end="165:53">quant_levels</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:55"><expr pos:start="167:5" pos:end="167:54"><call pos:start="167:5" pos:end="167:54"><name pos:start="167:5" pos:end="167:10">memset</name><argument_list pos:start="167:11" pos:end="167:54">(<argument pos:start="167:12" pos:end="167:24"><expr pos:start="167:12" pos:end="167:24"><name pos:start="167:12" pos:end="167:24"><name pos:start="167:12" pos:end="167:12">s</name><operator pos:start="167:13" pos:end="167:14">-&gt;</operator><name pos:start="167:15" pos:end="167:24">sb_indices</name></name></expr></argument>, <argument pos:start="167:27" pos:end="167:30"><expr pos:start="167:27" pos:end="167:30"><literal type="number" pos:start="167:27" pos:end="167:30">0xff</literal></expr></argument>, <argument pos:start="167:33" pos:end="167:53"><expr pos:start="167:33" pos:end="167:53"><sizeof pos:start="167:33" pos:end="167:53">sizeof<argument_list pos:start="167:39" pos:end="167:53">(<argument pos:start="167:40" pos:end="167:52"><expr pos:start="167:40" pos:end="167:52"><name pos:start="167:40" pos:end="167:52"><name pos:start="167:40" pos:end="167:40">s</name><operator pos:start="167:41" pos:end="167:42">-&gt;</operator><name pos:start="167:43" pos:end="167:52">sb_indices</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:54"><expr pos:start="169:5" pos:end="169:53"><call pos:start="169:5" pos:end="169:53"><name pos:start="169:5" pos:end="169:10">memset</name><argument_list pos:start="169:11" pos:end="169:53">(<argument pos:start="169:12" pos:end="169:25"><expr pos:start="169:12" pos:end="169:25"><name pos:start="169:12" pos:end="169:25"><name pos:start="169:12" pos:end="169:12">s</name><operator pos:start="169:13" pos:end="169:14">-&gt;</operator><name pos:start="169:15" pos:end="169:25">sec_ch_sbms</name></name></expr></argument>, <argument pos:start="169:28" pos:end="169:28"><expr pos:start="169:28" pos:end="169:28"><literal type="number" pos:start="169:28" pos:end="169:28">0</literal></expr></argument>, <argument pos:start="169:31" pos:end="169:52"><expr pos:start="169:31" pos:end="169:52"><sizeof pos:start="169:31" pos:end="169:52">sizeof<argument_list pos:start="169:37" pos:end="169:52">(<argument pos:start="169:38" pos:end="169:51"><expr pos:start="169:38" pos:end="169:51"><name pos:start="169:38" pos:end="169:51"><name pos:start="169:38" pos:end="169:38">s</name><operator pos:start="169:39" pos:end="169:40">-&gt;</operator><name pos:start="169:41" pos:end="169:51">sec_ch_sbms</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:54"><expr pos:start="171:5" pos:end="171:53"><call pos:start="171:5" pos:end="171:53"><name pos:start="171:5" pos:end="171:10">memset</name><argument_list pos:start="171:11" pos:end="171:53">(<argument pos:start="171:12" pos:end="171:25"><expr pos:start="171:12" pos:end="171:25"><name pos:start="171:12" pos:end="171:25"><name pos:start="171:12" pos:end="171:12">s</name><operator pos:start="171:13" pos:end="171:14">-&gt;</operator><name pos:start="171:15" pos:end="171:25">sec_ch_lrms</name></name></expr></argument>, <argument pos:start="171:28" pos:end="171:28"><expr pos:start="171:28" pos:end="171:28"><literal type="number" pos:start="171:28" pos:end="171:28">0</literal></expr></argument>, <argument pos:start="171:31" pos:end="171:52"><expr pos:start="171:31" pos:end="171:52"><sizeof pos:start="171:31" pos:end="171:52">sizeof<argument_list pos:start="171:37" pos:end="171:52">(<argument pos:start="171:38" pos:end="171:51"><expr pos:start="171:38" pos:end="171:51"><name pos:start="171:38" pos:end="171:51"><name pos:start="171:38" pos:end="171:38">s</name><operator pos:start="171:39" pos:end="171:40">-&gt;</operator><name pos:start="171:41" pos:end="171:51">sec_ch_lrms</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:46"><expr pos:start="173:5" pos:end="173:45"><call pos:start="173:5" pos:end="173:45"><name pos:start="173:5" pos:end="173:10">memset</name><argument_list pos:start="173:11" pos:end="173:45">(<argument pos:start="173:12" pos:end="173:21"><expr pos:start="173:12" pos:end="173:21"><name pos:start="173:12" pos:end="173:21"><name pos:start="173:12" pos:end="173:12">s</name><operator pos:start="173:13" pos:end="173:14">-&gt;</operator><name pos:start="173:15" pos:end="173:21">ch_pres</name></name></expr></argument>, <argument pos:start="173:24" pos:end="173:24"><expr pos:start="173:24" pos:end="173:24"><literal type="number" pos:start="173:24" pos:end="173:24">0</literal></expr></argument>, <argument pos:start="173:27" pos:end="173:44"><expr pos:start="173:27" pos:end="173:44"><sizeof pos:start="173:27" pos:end="173:44">sizeof<argument_list pos:start="173:33" pos:end="173:44">(<argument pos:start="173:34" pos:end="173:43"><expr pos:start="173:34" pos:end="173:43"><name pos:start="173:34" pos:end="173:43"><name pos:start="173:34" pos:end="173:34">s</name><operator pos:start="173:35" pos:end="173:36">-&gt;</operator><name pos:start="173:37" pos:end="173:43">ch_pres</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:52"><expr pos:start="175:5" pos:end="175:51"><call pos:start="175:5" pos:end="175:51"><name pos:start="175:5" pos:end="175:10">memset</name><argument_list pos:start="175:11" pos:end="175:51">(<argument pos:start="175:12" pos:end="175:24"><expr pos:start="175:12" pos:end="175:24"><name pos:start="175:12" pos:end="175:24"><name pos:start="175:12" pos:end="175:12">s</name><operator pos:start="175:13" pos:end="175:14">-&gt;</operator><name pos:start="175:15" pos:end="175:24">grid_1_scf</name></name></expr></argument>, <argument pos:start="175:27" pos:end="175:27"><expr pos:start="175:27" pos:end="175:27"><literal type="number" pos:start="175:27" pos:end="175:27">0</literal></expr></argument>, <argument pos:start="175:30" pos:end="175:50"><expr pos:start="175:30" pos:end="175:50"><sizeof pos:start="175:30" pos:end="175:50">sizeof<argument_list pos:start="175:36" pos:end="175:50">(<argument pos:start="175:37" pos:end="175:49"><expr pos:start="175:37" pos:end="175:49"><name pos:start="175:37" pos:end="175:49"><name pos:start="175:37" pos:end="175:37">s</name><operator pos:start="175:38" pos:end="175:39">-&gt;</operator><name pos:start="175:40" pos:end="175:49">grid_1_scf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:52"><expr pos:start="177:5" pos:end="177:51"><call pos:start="177:5" pos:end="177:51"><name pos:start="177:5" pos:end="177:10">memset</name><argument_list pos:start="177:11" pos:end="177:51">(<argument pos:start="177:12" pos:end="177:24"><expr pos:start="177:12" pos:end="177:24"><name pos:start="177:12" pos:end="177:24"><name pos:start="177:12" pos:end="177:12">s</name><operator pos:start="177:13" pos:end="177:14">-&gt;</operator><name pos:start="177:15" pos:end="177:24">grid_2_scf</name></name></expr></argument>, <argument pos:start="177:27" pos:end="177:27"><expr pos:start="177:27" pos:end="177:27"><literal type="number" pos:start="177:27" pos:end="177:27">0</literal></expr></argument>, <argument pos:start="177:30" pos:end="177:50"><expr pos:start="177:30" pos:end="177:50"><sizeof pos:start="177:30" pos:end="177:50">sizeof<argument_list pos:start="177:36" pos:end="177:50">(<argument pos:start="177:37" pos:end="177:49"><expr pos:start="177:37" pos:end="177:49"><name pos:start="177:37" pos:end="177:49"><name pos:start="177:37" pos:end="177:37">s</name><operator pos:start="177:38" pos:end="177:39">-&gt;</operator><name pos:start="177:40" pos:end="177:49">grid_2_scf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:52"><expr pos:start="179:5" pos:end="179:51"><call pos:start="179:5" pos:end="179:51"><name pos:start="179:5" pos:end="179:10">memset</name><argument_list pos:start="179:11" pos:end="179:51">(<argument pos:start="179:12" pos:end="179:24"><expr pos:start="179:12" pos:end="179:24"><name pos:start="179:12" pos:end="179:24"><name pos:start="179:12" pos:end="179:12">s</name><operator pos:start="179:13" pos:end="179:14">-&gt;</operator><name pos:start="179:15" pos:end="179:24">grid_3_avg</name></name></expr></argument>, <argument pos:start="179:27" pos:end="179:27"><expr pos:start="179:27" pos:end="179:27"><literal type="number" pos:start="179:27" pos:end="179:27">0</literal></expr></argument>, <argument pos:start="179:30" pos:end="179:50"><expr pos:start="179:30" pos:end="179:50"><sizeof pos:start="179:30" pos:end="179:50">sizeof<argument_list pos:start="179:36" pos:end="179:50">(<argument pos:start="179:37" pos:end="179:49"><expr pos:start="179:37" pos:end="179:49"><name pos:start="179:37" pos:end="179:49"><name pos:start="179:37" pos:end="179:37">s</name><operator pos:start="179:38" pos:end="179:39">-&gt;</operator><name pos:start="179:40" pos:end="179:49">grid_3_avg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:52"><expr pos:start="181:5" pos:end="181:51"><call pos:start="181:5" pos:end="181:51"><name pos:start="181:5" pos:end="181:10">memset</name><argument_list pos:start="181:11" pos:end="181:51">(<argument pos:start="181:12" pos:end="181:24"><expr pos:start="181:12" pos:end="181:24"><name pos:start="181:12" pos:end="181:24"><name pos:start="181:12" pos:end="181:12">s</name><operator pos:start="181:13" pos:end="181:14">-&gt;</operator><name pos:start="181:15" pos:end="181:24">grid_3_scf</name></name></expr></argument>, <argument pos:start="181:27" pos:end="181:27"><expr pos:start="181:27" pos:end="181:27"><literal type="number" pos:start="181:27" pos:end="181:27">0</literal></expr></argument>, <argument pos:start="181:30" pos:end="181:50"><expr pos:start="181:30" pos:end="181:50"><sizeof pos:start="181:30" pos:end="181:50">sizeof<argument_list pos:start="181:36" pos:end="181:50">(<argument pos:start="181:37" pos:end="181:49"><expr pos:start="181:37" pos:end="181:49"><name pos:start="181:37" pos:end="181:49"><name pos:start="181:37" pos:end="181:37">s</name><operator pos:start="181:38" pos:end="181:39">-&gt;</operator><name pos:start="181:40" pos:end="181:49">grid_3_scf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:54"><expr pos:start="183:5" pos:end="183:53"><call pos:start="183:5" pos:end="183:53"><name pos:start="183:5" pos:end="183:10">memset</name><argument_list pos:start="183:11" pos:end="183:53">(<argument pos:start="183:12" pos:end="183:25"><expr pos:start="183:12" pos:end="183:25"><name pos:start="183:12" pos:end="183:25"><name pos:start="183:12" pos:end="183:12">s</name><operator pos:start="183:13" pos:end="183:14">-&gt;</operator><name pos:start="183:15" pos:end="183:25">grid_3_pres</name></name></expr></argument>, <argument pos:start="183:28" pos:end="183:28"><expr pos:start="183:28" pos:end="183:28"><literal type="number" pos:start="183:28" pos:end="183:28">0</literal></expr></argument>, <argument pos:start="183:31" pos:end="183:52"><expr pos:start="183:31" pos:end="183:52"><sizeof pos:start="183:31" pos:end="183:52">sizeof<argument_list pos:start="183:37" pos:end="183:52">(<argument pos:start="183:38" pos:end="183:51"><expr pos:start="183:38" pos:end="183:51"><name pos:start="183:38" pos:end="183:51"><name pos:start="183:38" pos:end="183:38">s</name><operator pos:start="183:39" pos:end="183:40">-&gt;</operator><name pos:start="183:41" pos:end="183:51">grid_3_pres</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:50"><expr pos:start="185:5" pos:end="185:49"><call pos:start="185:5" pos:end="185:49"><name pos:start="185:5" pos:end="185:10">memset</name><argument_list pos:start="185:11" pos:end="185:49">(<argument pos:start="185:12" pos:end="185:23"><expr pos:start="185:12" pos:end="185:23"><name pos:start="185:12" pos:end="185:23"><name pos:start="185:12" pos:end="185:12">s</name><operator pos:start="185:13" pos:end="185:14">-&gt;</operator><name pos:start="185:15" pos:end="185:23">tonal_scf</name></name></expr></argument>, <argument pos:start="185:26" pos:end="185:26"><expr pos:start="185:26" pos:end="185:26"><literal type="number" pos:start="185:26" pos:end="185:26">0</literal></expr></argument>, <argument pos:start="185:29" pos:end="185:48"><expr pos:start="185:29" pos:end="185:48"><sizeof pos:start="185:29" pos:end="185:48">sizeof<argument_list pos:start="185:35" pos:end="185:48">(<argument pos:start="185:36" pos:end="185:47"><expr pos:start="185:36" pos:end="185:47"><name pos:start="185:36" pos:end="185:47"><name pos:start="185:36" pos:end="185:36">s</name><operator pos:start="185:37" pos:end="185:38">-&gt;</operator><name pos:start="185:39" pos:end="185:47">tonal_scf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:48"><expr pos:start="187:5" pos:end="187:47"><call pos:start="187:5" pos:end="187:47"><name pos:start="187:5" pos:end="187:10">memset</name><argument_list pos:start="187:11" pos:end="187:47">(<argument pos:start="187:12" pos:end="187:22"><expr pos:start="187:12" pos:end="187:22"><name pos:start="187:12" pos:end="187:22"><name pos:start="187:12" pos:end="187:12">s</name><operator pos:start="187:13" pos:end="187:14">-&gt;</operator><name pos:start="187:15" pos:end="187:22">lfe_data</name></name></expr></argument>, <argument pos:start="187:25" pos:end="187:25"><expr pos:start="187:25" pos:end="187:25"><literal type="number" pos:start="187:25" pos:end="187:25">0</literal></expr></argument>, <argument pos:start="187:28" pos:end="187:46"><expr pos:start="187:28" pos:end="187:46"><sizeof pos:start="187:28" pos:end="187:46">sizeof<argument_list pos:start="187:34" pos:end="187:46">(<argument pos:start="187:35" pos:end="187:45"><expr pos:start="187:35" pos:end="187:45"><name pos:start="187:35" pos:end="187:45"><name pos:start="187:35" pos:end="187:35">s</name><operator pos:start="187:36" pos:end="187:37">-&gt;</operator><name pos:start="187:38" pos:end="187:45">lfe_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:28"><expr pos:start="189:5" pos:end="189:27"><name pos:start="189:5" pos:end="189:23"><name pos:start="189:5" pos:end="189:5">s</name><operator pos:start="189:6" pos:end="189:7">-&gt;</operator><name pos:start="189:8" pos:end="189:23">part_stereo_pres</name></name> <operator pos:start="189:25" pos:end="189:25">=</operator> <literal type="number" pos:start="189:27" pos:end="189:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:41"><expr pos:start="191:5" pos:end="191:40"><name pos:start="191:5" pos:end="191:15"><name pos:start="191:5" pos:end="191:5">s</name><operator pos:start="191:6" pos:end="191:7">-&gt;</operator><name pos:start="191:8" pos:end="191:15">framenum</name></name> <operator pos:start="191:17" pos:end="191:17">=</operator> <operator pos:start="191:19" pos:end="191:19">(</operator><name pos:start="191:20" pos:end="191:30"><name pos:start="191:20" pos:end="191:20">s</name><operator pos:start="191:21" pos:end="191:22">-&gt;</operator><name pos:start="191:23" pos:end="191:30">framenum</name></name> <operator pos:start="191:32" pos:end="191:32">+</operator> <literal type="number" pos:start="191:34" pos:end="191:34">1</literal><operator pos:start="191:35" pos:end="191:35">)</operator> <operator pos:start="191:37" pos:end="191:37">&amp;</operator> <literal type="number" pos:start="191:39" pos:end="191:40">31</literal></expr>;</expr_stmt>



    <for pos:start="195:5" pos:end="205:5">for <control pos:start="195:9" pos:end="195:41">(<init pos:start="195:10" pos:end="195:16"><expr pos:start="195:10" pos:end="195:15"><name pos:start="195:10" pos:end="195:11">ch</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <literal type="number" pos:start="195:15" pos:end="195:15">0</literal></expr>;</init> <condition pos:start="195:18" pos:end="195:35"><expr pos:start="195:18" pos:end="195:34"><name pos:start="195:18" pos:end="195:19">ch</name> <operator pos:start="195:21" pos:end="195:21">&lt;</operator> <name pos:start="195:23" pos:end="195:34"><name pos:start="195:23" pos:end="195:23">s</name><operator pos:start="195:24" pos:end="195:25">-&gt;</operator><name pos:start="195:26" pos:end="195:34">nchannels</name></name></expr>;</condition> <incr pos:start="195:37" pos:end="195:40"><expr pos:start="195:37" pos:end="195:40"><name pos:start="195:37" pos:end="195:38">ch</name><operator pos:start="195:39" pos:end="195:40">++</operator></expr></incr>)</control> <block pos:start="195:43" pos:end="205:5">{<block_content pos:start="197:9" pos:end="203:9">

        <for pos:start="197:9" pos:end="203:9">for <control pos:start="197:13" pos:end="197:49">(<init pos:start="197:14" pos:end="197:20"><expr pos:start="197:14" pos:end="197:19"><name pos:start="197:14" pos:end="197:15">sb</name> <operator pos:start="197:17" pos:end="197:17">=</operator> <literal type="number" pos:start="197:19" pos:end="197:19">0</literal></expr>;</init> <condition pos:start="197:22" pos:end="197:43"><expr pos:start="197:22" pos:end="197:42"><name pos:start="197:22" pos:end="197:23">sb</name> <operator pos:start="197:25" pos:end="197:25">&lt;</operator> <name pos:start="197:27" pos:end="197:38"><name pos:start="197:27" pos:end="197:27">s</name><operator pos:start="197:28" pos:end="197:29">-&gt;</operator><name pos:start="197:30" pos:end="197:38">nsubbands</name></name> <operator pos:start="197:40" pos:end="197:40">/</operator> <literal type="number" pos:start="197:42" pos:end="197:42">4</literal></expr>;</condition> <incr pos:start="197:45" pos:end="197:48"><expr pos:start="197:45" pos:end="197:48"><name pos:start="197:45" pos:end="197:46">sb</name><operator pos:start="197:47" pos:end="197:48">++</operator></expr></incr>)</control> <block pos:start="197:51" pos:end="203:9">{<block_content pos:start="199:13" pos:end="201:43">

            <expr_stmt pos:start="199:13" pos:end="199:66"><expr pos:start="199:13" pos:end="199:65"><name pos:start="199:13" pos:end="199:37"><name pos:start="199:13" pos:end="199:13">s</name><operator pos:start="199:14" pos:end="199:15">-&gt;</operator><name pos:start="199:16" pos:end="199:26">part_stereo</name><index pos:start="199:27" pos:end="199:30">[<expr pos:start="199:28" pos:end="199:29"><name pos:start="199:28" pos:end="199:29">ch</name></expr>]</index><index pos:start="199:31" pos:end="199:34">[<expr pos:start="199:32" pos:end="199:33"><name pos:start="199:32" pos:end="199:33">sb</name></expr>]</index><index pos:start="199:35" pos:end="199:37">[<expr pos:start="199:36" pos:end="199:36"><literal type="number" pos:start="199:36" pos:end="199:36">0</literal></expr>]</index></name> <operator pos:start="199:39" pos:end="199:39">=</operator> <name pos:start="199:41" pos:end="199:65"><name pos:start="199:41" pos:end="199:41">s</name><operator pos:start="199:42" pos:end="199:43">-&gt;</operator><name pos:start="199:44" pos:end="199:54">part_stereo</name><index pos:start="199:55" pos:end="199:58">[<expr pos:start="199:56" pos:end="199:57"><name pos:start="199:56" pos:end="199:57">ch</name></expr>]</index><index pos:start="199:59" pos:end="199:62">[<expr pos:start="199:60" pos:end="199:61"><name pos:start="199:60" pos:end="199:61">sb</name></expr>]</index><index pos:start="199:63" pos:end="199:65">[<expr pos:start="199:64" pos:end="199:64"><literal type="number" pos:start="199:64" pos:end="199:64">4</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:43"><expr pos:start="201:13" pos:end="201:42"><name pos:start="201:13" pos:end="201:37"><name pos:start="201:13" pos:end="201:13">s</name><operator pos:start="201:14" pos:end="201:15">-&gt;</operator><name pos:start="201:16" pos:end="201:26">part_stereo</name><index pos:start="201:27" pos:end="201:30">[<expr pos:start="201:28" pos:end="201:29"><name pos:start="201:28" pos:end="201:29">ch</name></expr>]</index><index pos:start="201:31" pos:end="201:34">[<expr pos:start="201:32" pos:end="201:33"><name pos:start="201:32" pos:end="201:33">sb</name></expr>]</index><index pos:start="201:35" pos:end="201:37">[<expr pos:start="201:36" pos:end="201:36"><literal type="number" pos:start="201:36" pos:end="201:36">4</literal></expr>]</index></name> <operator pos:start="201:39" pos:end="201:39">=</operator> <literal type="number" pos:start="201:41" pos:end="201:42">16</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="209:5" pos:end="209:70"><expr pos:start="209:5" pos:end="209:69"><call pos:start="209:5" pos:end="209:69"><name pos:start="209:5" pos:end="209:10">memset</name><argument_list pos:start="209:11" pos:end="209:69">(<argument pos:start="209:12" pos:end="209:40"><expr pos:start="209:12" pos:end="209:40"><name pos:start="209:12" pos:end="209:40"><name pos:start="209:12" pos:end="209:12">s</name><operator pos:start="209:13" pos:end="209:14">-&gt;</operator><name pos:start="209:15" pos:end="209:23">lpc_coeff</name><index pos:start="209:24" pos:end="209:40">[<expr pos:start="209:25" pos:end="209:39"><name pos:start="209:25" pos:end="209:35"><name pos:start="209:25" pos:end="209:25">s</name><operator pos:start="209:26" pos:end="209:27">-&gt;</operator><name pos:start="209:28" pos:end="209:35">framenum</name></name> <operator pos:start="209:37" pos:end="209:37">&amp;</operator> <literal type="number" pos:start="209:39" pos:end="209:39">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="209:43" pos:end="209:43"><expr pos:start="209:43" pos:end="209:43"><literal type="number" pos:start="209:43" pos:end="209:43">0</literal></expr></argument>, <argument pos:start="209:46" pos:end="209:68"><expr pos:start="209:46" pos:end="209:68"><sizeof pos:start="209:46" pos:end="209:68">sizeof<argument_list pos:start="209:52" pos:end="209:68">(<argument pos:start="209:53" pos:end="209:67"><expr pos:start="209:53" pos:end="209:67"><name pos:start="209:53" pos:end="209:67"><name pos:start="209:53" pos:end="209:53">s</name><operator pos:start="209:54" pos:end="209:55">-&gt;</operator><name pos:start="209:56" pos:end="209:64">lpc_coeff</name><index pos:start="209:65" pos:end="209:67">[<expr pos:start="209:66" pos:end="209:66"><literal type="number" pos:start="209:66" pos:end="209:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="213:5" pos:end="225:5">for <control pos:start="213:9" pos:end="213:39">(<init pos:start="213:10" pos:end="213:19"><expr pos:start="213:10" pos:end="213:18"><name pos:start="213:10" pos:end="213:14">group</name> <operator pos:start="213:16" pos:end="213:16">=</operator> <literal type="number" pos:start="213:18" pos:end="213:18">0</literal></expr>;</init> <condition pos:start="213:21" pos:end="213:30"><expr pos:start="213:21" pos:end="213:29"><name pos:start="213:21" pos:end="213:25">group</name> <operator pos:start="213:27" pos:end="213:27">&lt;</operator> <literal type="number" pos:start="213:29" pos:end="213:29">5</literal></expr>;</condition> <incr pos:start="213:32" pos:end="213:38"><expr pos:start="213:32" pos:end="213:38"><name pos:start="213:32" pos:end="213:36">group</name><operator pos:start="213:37" pos:end="213:38">++</operator></expr></incr>)</control> <block pos:start="213:41" pos:end="225:5">{<block_content pos:start="215:9" pos:end="223:9">

        <for pos:start="215:9" pos:end="223:9">for <control pos:start="215:13" pos:end="215:43">(<init pos:start="215:14" pos:end="215:20"><expr pos:start="215:14" pos:end="215:19"><name pos:start="215:14" pos:end="215:15">sf</name> <operator pos:start="215:17" pos:end="215:17">=</operator> <literal type="number" pos:start="215:19" pos:end="215:19">0</literal></expr>;</init> <condition pos:start="215:22" pos:end="215:37"><expr pos:start="215:22" pos:end="215:36"><name pos:start="215:22" pos:end="215:23">sf</name> <operator pos:start="215:25" pos:end="215:25">&lt;</operator> <literal type="number" pos:start="215:27" pos:end="215:27">1</literal> <operator pos:start="215:29" pos:end="215:30">&lt;&lt;</operator> <name pos:start="215:32" pos:end="215:36">group</name></expr>;</condition> <incr pos:start="215:39" pos:end="215:42"><expr pos:start="215:39" pos:end="215:42"><name pos:start="215:39" pos:end="215:40">sf</name><operator pos:start="215:41" pos:end="215:42">++</operator></expr></incr>)</control> <block pos:start="215:45" pos:end="223:9">{<block_content pos:start="217:13" pos:end="221:58">

            <decl_stmt pos:start="217:13" pos:end="217:60"><decl pos:start="217:13" pos:end="217:59"><type pos:start="217:13" pos:end="217:15"><name pos:start="217:13" pos:end="217:15">int</name></type> <name pos:start="217:17" pos:end="217:22">sf_idx</name> <init pos:start="217:24" pos:end="217:59">= <expr pos:start="217:26" pos:end="217:59"><operator pos:start="217:26" pos:end="217:26">(</operator><operator pos:start="217:27" pos:end="217:27">(</operator><name pos:start="217:28" pos:end="217:38"><name pos:start="217:28" pos:end="217:28">s</name><operator pos:start="217:29" pos:end="217:30">-&gt;</operator><name pos:start="217:31" pos:end="217:38">framenum</name></name> <operator pos:start="217:40" pos:end="217:41">&lt;&lt;</operator> <name pos:start="217:43" pos:end="217:47">group</name><operator pos:start="217:48" pos:end="217:48">)</operator> <operator pos:start="217:50" pos:end="217:50">+</operator> <name pos:start="217:52" pos:end="217:53">sf</name><operator pos:start="217:54" pos:end="217:54">)</operator> <operator pos:start="217:56" pos:end="217:56">&amp;</operator> <literal type="number" pos:start="217:58" pos:end="217:59">31</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="219:13" pos:end="221:58"><expr pos:start="219:13" pos:end="221:57"><name pos:start="219:13" pos:end="219:45"><name pos:start="219:13" pos:end="219:13">s</name><operator pos:start="219:14" pos:end="219:15">-&gt;</operator><name pos:start="219:16" pos:end="219:27">tonal_bounds</name><index pos:start="219:28" pos:end="219:34">[<expr pos:start="219:29" pos:end="219:33"><name pos:start="219:29" pos:end="219:33">group</name></expr>]</index><index pos:start="219:35" pos:end="219:42">[<expr pos:start="219:36" pos:end="219:41"><name pos:start="219:36" pos:end="219:41">sf_idx</name></expr>]</index><index pos:start="219:43" pos:end="219:45">[<expr pos:start="219:44" pos:end="219:44"><literal type="number" pos:start="219:44" pos:end="219:44">0</literal></expr>]</index></name> <operator pos:start="219:47" pos:end="219:47">=</operator>

            <name pos:start="221:13" pos:end="221:45"><name pos:start="221:13" pos:end="221:13">s</name><operator pos:start="221:14" pos:end="221:15">-&gt;</operator><name pos:start="221:16" pos:end="221:27">tonal_bounds</name><index pos:start="221:28" pos:end="221:34">[<expr pos:start="221:29" pos:end="221:33"><name pos:start="221:29" pos:end="221:33">group</name></expr>]</index><index pos:start="221:35" pos:end="221:42">[<expr pos:start="221:36" pos:end="221:41"><name pos:start="221:36" pos:end="221:41">sf_idx</name></expr>]</index><index pos:start="221:43" pos:end="221:45">[<expr pos:start="221:44" pos:end="221:44"><literal type="number" pos:start="221:44" pos:end="221:44">1</literal></expr>]</index></name> <operator pos:start="221:47" pos:end="221:47">=</operator> <name pos:start="221:49" pos:end="221:57"><name pos:start="221:49" pos:end="221:49">s</name><operator pos:start="221:50" pos:end="221:51">-&gt;</operator><name pos:start="221:52" pos:end="221:57">ntones</name></name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="line" pos:start="229:5" pos:end="229:26">// Parse chunk headers</comment>

    <while pos:start="231:5" pos:end="395:5">while <condition pos:start="231:11" pos:end="231:47">(<expr pos:start="231:12" pos:end="231:46"><call pos:start="231:12" pos:end="231:42"><name pos:start="231:12" pos:end="231:37">bytestream2_get_bytes_left</name><argument_list pos:start="231:38" pos:end="231:42">(<argument pos:start="231:39" pos:end="231:41"><expr pos:start="231:39" pos:end="231:41"><operator pos:start="231:39" pos:end="231:39">&amp;</operator><name pos:start="231:40" pos:end="231:41">gb</name></expr></argument>)</argument_list></call> <operator pos:start="231:44" pos:end="231:44">&gt;</operator> <literal type="number" pos:start="231:46" pos:end="231:46">0</literal></expr>)</condition> <block pos:start="231:49" pos:end="395:5">{<block_content pos:start="233:9" pos:end="393:41">

        <expr_stmt pos:start="233:9" pos:end="233:45"><expr pos:start="233:9" pos:end="233:44"><name pos:start="233:9" pos:end="233:16">chunk_id</name> <operator pos:start="233:18" pos:end="233:18">=</operator> <call pos:start="233:20" pos:end="233:44"><name pos:start="233:20" pos:end="233:39">bytestream2_get_byte</name><argument_list pos:start="233:40" pos:end="233:44">(<argument pos:start="233:41" pos:end="233:43"><expr pos:start="233:41" pos:end="233:43"><operator pos:start="233:41" pos:end="233:41">&amp;</operator><name pos:start="233:42" pos:end="233:43">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:94"><expr pos:start="235:9" pos:end="235:93"><name pos:start="235:9" pos:end="235:17">chunk_len</name> <operator pos:start="235:19" pos:end="235:19">=</operator> <ternary pos:start="235:21" pos:end="235:93"><condition pos:start="235:21" pos:end="235:39"><expr pos:start="235:21" pos:end="235:37"><operator pos:start="235:21" pos:end="235:21">(</operator><name pos:start="235:22" pos:end="235:29">chunk_id</name> <operator pos:start="235:31" pos:end="235:31">&amp;</operator> <literal type="number" pos:start="235:33" pos:end="235:36">0x80</literal><operator pos:start="235:37" pos:end="235:37">)</operator></expr> ?</condition><then pos:start="235:41" pos:end="235:65"> <expr pos:start="235:41" pos:end="235:65"><call pos:start="235:41" pos:end="235:65"><name pos:start="235:41" pos:end="235:60">bytestream2_get_be16</name><argument_list pos:start="235:61" pos:end="235:65">(<argument pos:start="235:62" pos:end="235:64"><expr pos:start="235:62" pos:end="235:64"><operator pos:start="235:62" pos:end="235:62">&amp;</operator><name pos:start="235:63" pos:end="235:64">gb</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="235:67" pos:end="235:93">: <expr pos:start="235:69" pos:end="235:93"><call pos:start="235:69" pos:end="235:93"><name pos:start="235:69" pos:end="235:88">bytestream2_get_byte</name><argument_list pos:start="235:89" pos:end="235:93">(<argument pos:start="235:90" pos:end="235:92"><expr pos:start="235:90" pos:end="235:92"><operator pos:start="235:90" pos:end="235:90">&amp;</operator><name pos:start="235:91" pos:end="235:92">gb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:25"><expr pos:start="237:9" pos:end="237:24"><name pos:start="237:9" pos:end="237:16">chunk_id</name> <operator pos:start="237:18" pos:end="237:19">&amp;=</operator> <literal type="number" pos:start="237:21" pos:end="237:24">0x7f</literal></expr>;</expr_stmt>



        <if_stmt pos:start="241:9" pos:end="251:9"><if pos:start="241:9" pos:end="251:9">if <condition pos:start="241:12" pos:end="241:56">(<expr pos:start="241:13" pos:end="241:55"><name pos:start="241:13" pos:end="241:21">chunk_len</name> <operator pos:start="241:23" pos:end="241:23">&gt;</operator> <call pos:start="241:25" pos:end="241:55"><name pos:start="241:25" pos:end="241:50">bytestream2_get_bytes_left</name><argument_list pos:start="241:51" pos:end="241:55">(<argument pos:start="241:52" pos:end="241:54"><expr pos:start="241:52" pos:end="241:54"><operator pos:start="241:52" pos:end="241:52">&amp;</operator><name pos:start="241:53" pos:end="241:54">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="241:58" pos:end="251:9">{<block_content pos:start="243:13" pos:end="249:43">

            <expr_stmt pos:start="243:13" pos:end="243:56"><expr pos:start="243:13" pos:end="243:55"><name pos:start="243:13" pos:end="243:21">chunk_len</name> <operator pos:start="243:23" pos:end="243:23">=</operator> <call pos:start="243:25" pos:end="243:55"><name pos:start="243:25" pos:end="243:50">bytestream2_get_bytes_left</name><argument_list pos:start="243:51" pos:end="243:55">(<argument pos:start="243:52" pos:end="243:54"><expr pos:start="243:52" pos:end="243:54"><operator pos:start="243:52" pos:end="243:52">&amp;</operator><name pos:start="243:53" pos:end="243:54">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:88"><expr pos:start="245:13" pos:end="245:87"><call pos:start="245:13" pos:end="245:87"><name pos:start="245:13" pos:end="245:18">av_log</name><argument_list pos:start="245:19" pos:end="245:87">(<argument pos:start="245:20" pos:end="245:27"><expr pos:start="245:20" pos:end="245:27"><name pos:start="245:20" pos:end="245:27"><name pos:start="245:20" pos:end="245:20">s</name><operator pos:start="245:21" pos:end="245:22">-&gt;</operator><name pos:start="245:23" pos:end="245:27">avctx</name></name></expr></argument>, <argument pos:start="245:30" pos:end="245:43"><expr pos:start="245:30" pos:end="245:43"><name pos:start="245:30" pos:end="245:43">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="245:46" pos:end="245:76"><expr pos:start="245:46" pos:end="245:76"><literal type="string" pos:start="245:46" pos:end="245:76">"LBR chunk %#x was truncated\n"</literal></expr></argument>, <argument pos:start="245:79" pos:end="245:86"><expr pos:start="245:79" pos:end="245:86"><name pos:start="245:79" pos:end="245:86">chunk_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="247:13" pos:end="249:43"><if pos:start="247:13" pos:end="249:43">if <condition pos:start="247:16" pos:end="247:58">(<expr pos:start="247:17" pos:end="247:57"><name pos:start="247:17" pos:end="247:41"><name pos:start="247:17" pos:end="247:17">s</name><operator pos:start="247:18" pos:end="247:19">-&gt;</operator><name pos:start="247:20" pos:end="247:24">avctx</name><operator pos:start="247:25" pos:end="247:26">-&gt;</operator><name pos:start="247:27" pos:end="247:41">err_recognition</name></name> <operator pos:start="247:43" pos:end="247:43">&amp;</operator> <name pos:start="247:45" pos:end="247:57">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="249:17" pos:end="249:43"><block_content pos:start="249:17" pos:end="249:43">

                <return pos:start="249:17" pos:end="249:43">return <expr pos:start="249:24" pos:end="249:42"><name pos:start="249:24" pos:end="249:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="255:9" pos:end="389:9">switch <condition pos:start="255:16" pos:end="255:25">(<expr pos:start="255:17" pos:end="255:24"><name pos:start="255:17" pos:end="255:24">chunk_id</name></expr>)</condition> <block pos:start="255:27" pos:end="389:9">{<block_content pos:start="257:9" pos:end="387:18">

        <case pos:start="257:9" pos:end="257:27">case <expr pos:start="257:14" pos:end="257:26"><name pos:start="257:14" pos:end="257:26">LBR_CHUNK_LFE</name></expr>:</case>

            <expr_stmt pos:start="259:13" pos:end="259:39"><expr pos:start="259:13" pos:end="259:38"><name pos:start="259:13" pos:end="259:25"><name pos:start="259:13" pos:end="259:17">chunk</name><operator pos:start="259:18" pos:end="259:18">.</operator><name pos:start="259:19" pos:end="259:21">lfe</name><operator pos:start="259:22" pos:end="259:22">.</operator><name pos:start="259:23" pos:end="259:25">len</name></name>  <operator pos:start="259:28" pos:end="259:28">=</operator> <name pos:start="259:30" pos:end="259:38">chunk_len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:39"><expr pos:start="261:13" pos:end="261:38"><name pos:start="261:13" pos:end="261:26"><name pos:start="261:13" pos:end="261:17">chunk</name><operator pos:start="261:18" pos:end="261:18">.</operator><name pos:start="261:19" pos:end="261:21">lfe</name><operator pos:start="261:22" pos:end="261:22">.</operator><name pos:start="261:23" pos:end="261:26">data</name></name> <operator pos:start="261:28" pos:end="261:28">=</operator> <name pos:start="261:30" pos:end="261:38"><name pos:start="261:30" pos:end="261:31">gb</name><operator pos:start="261:32" pos:end="261:32">.</operator><name pos:start="261:33" pos:end="261:38">buffer</name></name></expr>;</expr_stmt>

            <break pos:start="263:13" pos:end="263:18">break;</break>



        <case pos:start="267:9" pos:end="267:27">case <expr pos:start="267:14" pos:end="267:26"><name pos:start="267:14" pos:end="267:26">LBR_CHUNK_SCF</name></expr>:</case>

        <case pos:start="269:9" pos:end="269:29">case <expr pos:start="269:14" pos:end="269:28"><name pos:start="269:14" pos:end="269:28">LBR_CHUNK_TONAL</name></expr>:</case>

        <case pos:start="271:9" pos:end="271:33">case <expr pos:start="271:14" pos:end="271:32"><name pos:start="271:14" pos:end="271:32">LBR_CHUNK_TONAL_SCF</name></expr>:</case>

            <expr_stmt pos:start="273:13" pos:end="273:40"><expr pos:start="273:13" pos:end="273:39"><name pos:start="273:13" pos:end="273:26"><name pos:start="273:13" pos:end="273:17">chunk</name><operator pos:start="273:18" pos:end="273:18">.</operator><name pos:start="273:19" pos:end="273:23">tonal</name><operator pos:start="273:24" pos:end="273:24">.</operator><name pos:start="273:25" pos:end="273:26">id</name></name>   <operator pos:start="273:30" pos:end="273:30">=</operator> <name pos:start="273:32" pos:end="273:39">chunk_id</name></expr>;</expr_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:41"><expr pos:start="275:13" pos:end="275:40"><name pos:start="275:13" pos:end="275:27"><name pos:start="275:13" pos:end="275:17">chunk</name><operator pos:start="275:18" pos:end="275:18">.</operator><name pos:start="275:19" pos:end="275:23">tonal</name><operator pos:start="275:24" pos:end="275:24">.</operator><name pos:start="275:25" pos:end="275:27">len</name></name>  <operator pos:start="275:30" pos:end="275:30">=</operator> <name pos:start="275:32" pos:end="275:40">chunk_len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:41"><expr pos:start="277:13" pos:end="277:40"><name pos:start="277:13" pos:end="277:28"><name pos:start="277:13" pos:end="277:17">chunk</name><operator pos:start="277:18" pos:end="277:18">.</operator><name pos:start="277:19" pos:end="277:23">tonal</name><operator pos:start="277:24" pos:end="277:24">.</operator><name pos:start="277:25" pos:end="277:28">data</name></name> <operator pos:start="277:30" pos:end="277:30">=</operator> <name pos:start="277:32" pos:end="277:40"><name pos:start="277:32" pos:end="277:33">gb</name><operator pos:start="277:34" pos:end="277:34">.</operator><name pos:start="277:35" pos:end="277:40">buffer</name></name></expr>;</expr_stmt>

            <break pos:start="279:13" pos:end="279:18">break;</break>



        <case pos:start="283:9" pos:end="283:35">case <expr pos:start="283:14" pos:end="283:34"><name pos:start="283:14" pos:end="283:34">LBR_CHUNK_TONAL_GRP_1</name></expr>:</case>

        <case pos:start="285:9" pos:end="285:35">case <expr pos:start="285:14" pos:end="285:34"><name pos:start="285:14" pos:end="285:34">LBR_CHUNK_TONAL_GRP_2</name></expr>:</case>

        <case pos:start="287:9" pos:end="287:35">case <expr pos:start="287:14" pos:end="287:34"><name pos:start="287:14" pos:end="287:34">LBR_CHUNK_TONAL_GRP_3</name></expr>:</case>

        <case pos:start="289:9" pos:end="289:35">case <expr pos:start="289:14" pos:end="289:34"><name pos:start="289:14" pos:end="289:34">LBR_CHUNK_TONAL_GRP_4</name></expr>:</case>

        <case pos:start="291:9" pos:end="291:35">case <expr pos:start="291:14" pos:end="291:34"><name pos:start="291:14" pos:end="291:34">LBR_CHUNK_TONAL_GRP_5</name></expr>:</case>

            <expr_stmt pos:start="293:13" pos:end="293:49"><expr pos:start="293:13" pos:end="293:48"><name pos:start="293:13" pos:end="293:13">i</name> <operator pos:start="293:15" pos:end="293:15">=</operator> <name pos:start="293:17" pos:end="293:37">LBR_CHUNK_TONAL_GRP_5</name> <operator pos:start="293:39" pos:end="293:39">-</operator> <name pos:start="293:41" pos:end="293:48">chunk_id</name></expr>;</expr_stmt>

            <expr_stmt pos:start="295:13" pos:end="295:40"><expr pos:start="295:13" pos:end="295:39"><name pos:start="295:13" pos:end="295:30"><name pos:start="295:13" pos:end="295:17">chunk</name><operator pos:start="295:18" pos:end="295:18">.</operator><name pos:start="295:19" pos:end="295:27">tonal_grp</name><index pos:start="295:28" pos:end="295:30">[<expr pos:start="295:29" pos:end="295:29"><name pos:start="295:29" pos:end="295:29">i</name></expr>]</index></name><operator pos:start="295:31" pos:end="295:31">.</operator><name pos:start="295:32" pos:end="295:33">id</name>   <operator pos:start="295:37" pos:end="295:37">=</operator> <name pos:start="295:39" pos:end="295:39">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:48"><expr pos:start="297:13" pos:end="297:47"><name pos:start="297:13" pos:end="297:30"><name pos:start="297:13" pos:end="297:17">chunk</name><operator pos:start="297:18" pos:end="297:18">.</operator><name pos:start="297:19" pos:end="297:27">tonal_grp</name><index pos:start="297:28" pos:end="297:30">[<expr pos:start="297:29" pos:end="297:29"><name pos:start="297:29" pos:end="297:29">i</name></expr>]</index></name><operator pos:start="297:31" pos:end="297:31">.</operator><name pos:start="297:32" pos:end="297:34">len</name>  <operator pos:start="297:37" pos:end="297:37">=</operator> <name pos:start="297:39" pos:end="297:47">chunk_len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:48"><expr pos:start="299:13" pos:end="299:47"><name pos:start="299:13" pos:end="299:30"><name pos:start="299:13" pos:end="299:17">chunk</name><operator pos:start="299:18" pos:end="299:18">.</operator><name pos:start="299:19" pos:end="299:27">tonal_grp</name><index pos:start="299:28" pos:end="299:30">[<expr pos:start="299:29" pos:end="299:29"><name pos:start="299:29" pos:end="299:29">i</name></expr>]</index></name><operator pos:start="299:31" pos:end="299:31">.</operator><name pos:start="299:32" pos:end="299:35">data</name> <operator pos:start="299:37" pos:end="299:37">=</operator> <name pos:start="299:39" pos:end="299:47"><name pos:start="299:39" pos:end="299:40">gb</name><operator pos:start="299:41" pos:end="299:41">.</operator><name pos:start="299:42" pos:end="299:47">buffer</name></name></expr>;</expr_stmt>

            <break pos:start="301:13" pos:end="301:18">break;</break>



        <case pos:start="305:9" pos:end="305:39">case <expr pos:start="305:14" pos:end="305:38"><name pos:start="305:14" pos:end="305:38">LBR_CHUNK_TONAL_SCF_GRP_1</name></expr>:</case>

        <case pos:start="307:9" pos:end="307:39">case <expr pos:start="307:14" pos:end="307:38"><name pos:start="307:14" pos:end="307:38">LBR_CHUNK_TONAL_SCF_GRP_2</name></expr>:</case>

        <case pos:start="309:9" pos:end="309:39">case <expr pos:start="309:14" pos:end="309:38"><name pos:start="309:14" pos:end="309:38">LBR_CHUNK_TONAL_SCF_GRP_3</name></expr>:</case>

        <case pos:start="311:9" pos:end="311:39">case <expr pos:start="311:14" pos:end="311:38"><name pos:start="311:14" pos:end="311:38">LBR_CHUNK_TONAL_SCF_GRP_4</name></expr>:</case>

        <case pos:start="313:9" pos:end="313:39">case <expr pos:start="313:14" pos:end="313:38"><name pos:start="313:14" pos:end="313:38">LBR_CHUNK_TONAL_SCF_GRP_5</name></expr>:</case>

            <expr_stmt pos:start="315:13" pos:end="315:53"><expr pos:start="315:13" pos:end="315:52"><name pos:start="315:13" pos:end="315:13">i</name> <operator pos:start="315:15" pos:end="315:15">=</operator> <name pos:start="315:17" pos:end="315:41">LBR_CHUNK_TONAL_SCF_GRP_5</name> <operator pos:start="315:43" pos:end="315:43">-</operator> <name pos:start="315:45" pos:end="315:52">chunk_id</name></expr>;</expr_stmt>

            <expr_stmt pos:start="317:13" pos:end="317:40"><expr pos:start="317:13" pos:end="317:39"><name pos:start="317:13" pos:end="317:30"><name pos:start="317:13" pos:end="317:17">chunk</name><operator pos:start="317:18" pos:end="317:18">.</operator><name pos:start="317:19" pos:end="317:27">tonal_grp</name><index pos:start="317:28" pos:end="317:30">[<expr pos:start="317:29" pos:end="317:29"><name pos:start="317:29" pos:end="317:29">i</name></expr>]</index></name><operator pos:start="317:31" pos:end="317:31">.</operator><name pos:start="317:32" pos:end="317:33">id</name>   <operator pos:start="317:37" pos:end="317:37">=</operator> <name pos:start="317:39" pos:end="317:39">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="319:48"><expr pos:start="319:13" pos:end="319:47"><name pos:start="319:13" pos:end="319:30"><name pos:start="319:13" pos:end="319:17">chunk</name><operator pos:start="319:18" pos:end="319:18">.</operator><name pos:start="319:19" pos:end="319:27">tonal_grp</name><index pos:start="319:28" pos:end="319:30">[<expr pos:start="319:29" pos:end="319:29"><name pos:start="319:29" pos:end="319:29">i</name></expr>]</index></name><operator pos:start="319:31" pos:end="319:31">.</operator><name pos:start="319:32" pos:end="319:34">len</name>  <operator pos:start="319:37" pos:end="319:37">=</operator> <name pos:start="319:39" pos:end="319:47">chunk_len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:48"><expr pos:start="321:13" pos:end="321:47"><name pos:start="321:13" pos:end="321:30"><name pos:start="321:13" pos:end="321:17">chunk</name><operator pos:start="321:18" pos:end="321:18">.</operator><name pos:start="321:19" pos:end="321:27">tonal_grp</name><index pos:start="321:28" pos:end="321:30">[<expr pos:start="321:29" pos:end="321:29"><name pos:start="321:29" pos:end="321:29">i</name></expr>]</index></name><operator pos:start="321:31" pos:end="321:31">.</operator><name pos:start="321:32" pos:end="321:35">data</name> <operator pos:start="321:37" pos:end="321:37">=</operator> <name pos:start="321:39" pos:end="321:47"><name pos:start="321:39" pos:end="321:40">gb</name><operator pos:start="321:41" pos:end="321:41">.</operator><name pos:start="321:42" pos:end="321:47">buffer</name></name></expr>;</expr_stmt>

            <break pos:start="323:13" pos:end="323:18">break;</break>



        <case pos:start="327:9" pos:end="327:35">case <expr pos:start="327:14" pos:end="327:34"><name pos:start="327:14" pos:end="327:34">LBR_CHUNK_RES_GRID_LR</name></expr>:</case>

        <case pos:start="329:9" pos:end="329:39">case <expr pos:start="329:14" pos:end="329:38"><name pos:start="329:14" pos:end="329:34">LBR_CHUNK_RES_GRID_LR</name> <operator pos:start="329:36" pos:end="329:36">+</operator> <literal type="number" pos:start="329:38" pos:end="329:38">1</literal></expr>:</case>

        <case pos:start="331:9" pos:end="331:39">case <expr pos:start="331:14" pos:end="331:38"><name pos:start="331:14" pos:end="331:34">LBR_CHUNK_RES_GRID_LR</name> <operator pos:start="331:36" pos:end="331:36">+</operator> <literal type="number" pos:start="331:38" pos:end="331:38">2</literal></expr>:</case>

            <expr_stmt pos:start="333:13" pos:end="333:49"><expr pos:start="333:13" pos:end="333:48"><name pos:start="333:13" pos:end="333:13">i</name> <operator pos:start="333:15" pos:end="333:15">=</operator> <name pos:start="333:17" pos:end="333:24">chunk_id</name> <operator pos:start="333:26" pos:end="333:26">-</operator> <name pos:start="333:28" pos:end="333:48">LBR_CHUNK_RES_GRID_LR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="335:13" pos:end="335:44"><expr pos:start="335:13" pos:end="335:43"><name pos:start="335:13" pos:end="335:26"><name pos:start="335:13" pos:end="335:17">chunk</name><operator pos:start="335:18" pos:end="335:18">.</operator><name pos:start="335:19" pos:end="335:23">grid1</name><index pos:start="335:24" pos:end="335:26">[<expr pos:start="335:25" pos:end="335:25"><name pos:start="335:25" pos:end="335:25">i</name></expr>]</index></name><operator pos:start="335:27" pos:end="335:27">.</operator><name pos:start="335:28" pos:end="335:30">len</name>  <operator pos:start="335:33" pos:end="335:33">=</operator> <name pos:start="335:35" pos:end="335:43">chunk_len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="337:13" pos:end="337:44"><expr pos:start="337:13" pos:end="337:43"><name pos:start="337:13" pos:end="337:26"><name pos:start="337:13" pos:end="337:17">chunk</name><operator pos:start="337:18" pos:end="337:18">.</operator><name pos:start="337:19" pos:end="337:23">grid1</name><index pos:start="337:24" pos:end="337:26">[<expr pos:start="337:25" pos:end="337:25"><name pos:start="337:25" pos:end="337:25">i</name></expr>]</index></name><operator pos:start="337:27" pos:end="337:27">.</operator><name pos:start="337:28" pos:end="337:31">data</name> <operator pos:start="337:33" pos:end="337:33">=</operator> <name pos:start="337:35" pos:end="337:43"><name pos:start="337:35" pos:end="337:36">gb</name><operator pos:start="337:37" pos:end="337:37">.</operator><name pos:start="337:38" pos:end="337:43">buffer</name></name></expr>;</expr_stmt>

            <break pos:start="339:13" pos:end="339:18">break;</break>



        <case pos:start="343:9" pos:end="343:35">case <expr pos:start="343:14" pos:end="343:34"><name pos:start="343:14" pos:end="343:34">LBR_CHUNK_RES_GRID_HR</name></expr>:</case>

        <case pos:start="345:9" pos:end="345:39">case <expr pos:start="345:14" pos:end="345:38"><name pos:start="345:14" pos:end="345:34">LBR_CHUNK_RES_GRID_HR</name> <operator pos:start="345:36" pos:end="345:36">+</operator> <literal type="number" pos:start="345:38" pos:end="345:38">1</literal></expr>:</case>

        <case pos:start="347:9" pos:end="347:39">case <expr pos:start="347:14" pos:end="347:38"><name pos:start="347:14" pos:end="347:34">LBR_CHUNK_RES_GRID_HR</name> <operator pos:start="347:36" pos:end="347:36">+</operator> <literal type="number" pos:start="347:38" pos:end="347:38">2</literal></expr>:</case>

            <expr_stmt pos:start="349:13" pos:end="349:49"><expr pos:start="349:13" pos:end="349:48"><name pos:start="349:13" pos:end="349:13">i</name> <operator pos:start="349:15" pos:end="349:15">=</operator> <name pos:start="349:17" pos:end="349:24">chunk_id</name> <operator pos:start="349:26" pos:end="349:26">-</operator> <name pos:start="349:28" pos:end="349:48">LBR_CHUNK_RES_GRID_HR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="351:13" pos:end="351:46"><expr pos:start="351:13" pos:end="351:45"><name pos:start="351:13" pos:end="351:28"><name pos:start="351:13" pos:end="351:17">chunk</name><operator pos:start="351:18" pos:end="351:18">.</operator><name pos:start="351:19" pos:end="351:25">hr_grid</name><index pos:start="351:26" pos:end="351:28">[<expr pos:start="351:27" pos:end="351:27"><name pos:start="351:27" pos:end="351:27">i</name></expr>]</index></name><operator pos:start="351:29" pos:end="351:29">.</operator><name pos:start="351:30" pos:end="351:32">len</name>  <operator pos:start="351:35" pos:end="351:35">=</operator> <name pos:start="351:37" pos:end="351:45">chunk_len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="353:13" pos:end="353:46"><expr pos:start="353:13" pos:end="353:45"><name pos:start="353:13" pos:end="353:28"><name pos:start="353:13" pos:end="353:17">chunk</name><operator pos:start="353:18" pos:end="353:18">.</operator><name pos:start="353:19" pos:end="353:25">hr_grid</name><index pos:start="353:26" pos:end="353:28">[<expr pos:start="353:27" pos:end="353:27"><name pos:start="353:27" pos:end="353:27">i</name></expr>]</index></name><operator pos:start="353:29" pos:end="353:29">.</operator><name pos:start="353:30" pos:end="353:33">data</name> <operator pos:start="353:35" pos:end="353:35">=</operator> <name pos:start="353:37" pos:end="353:45"><name pos:start="353:37" pos:end="353:38">gb</name><operator pos:start="353:39" pos:end="353:39">.</operator><name pos:start="353:40" pos:end="353:45">buffer</name></name></expr>;</expr_stmt>

            <break pos:start="355:13" pos:end="355:18">break;</break>



        <case pos:start="359:9" pos:end="359:32">case <expr pos:start="359:14" pos:end="359:31"><name pos:start="359:14" pos:end="359:31">LBR_CHUNK_RES_TS_1</name></expr>:</case>

        <case pos:start="361:9" pos:end="361:36">case <expr pos:start="361:14" pos:end="361:35"><name pos:start="361:14" pos:end="361:31">LBR_CHUNK_RES_TS_1</name> <operator pos:start="361:33" pos:end="361:33">+</operator> <literal type="number" pos:start="361:35" pos:end="361:35">1</literal></expr>:</case>

        <case pos:start="363:9" pos:end="363:36">case <expr pos:start="363:14" pos:end="363:35"><name pos:start="363:14" pos:end="363:31">LBR_CHUNK_RES_TS_1</name> <operator pos:start="363:33" pos:end="363:33">+</operator> <literal type="number" pos:start="363:35" pos:end="363:35">2</literal></expr>:</case>

            <expr_stmt pos:start="365:13" pos:end="365:46"><expr pos:start="365:13" pos:end="365:45"><name pos:start="365:13" pos:end="365:13">i</name> <operator pos:start="365:15" pos:end="365:15">=</operator> <name pos:start="365:17" pos:end="365:24">chunk_id</name> <operator pos:start="365:26" pos:end="365:26">-</operator> <name pos:start="365:28" pos:end="365:45">LBR_CHUNK_RES_TS_1</name></expr>;</expr_stmt>

            <expr_stmt pos:start="367:13" pos:end="367:42"><expr pos:start="367:13" pos:end="367:41"><name pos:start="367:13" pos:end="367:24"><name pos:start="367:13" pos:end="367:17">chunk</name><operator pos:start="367:18" pos:end="367:18">.</operator><name pos:start="367:19" pos:end="367:21">ts1</name><index pos:start="367:22" pos:end="367:24">[<expr pos:start="367:23" pos:end="367:23"><name pos:start="367:23" pos:end="367:23">i</name></expr>]</index></name><operator pos:start="367:25" pos:end="367:25">.</operator><name pos:start="367:26" pos:end="367:28">len</name>  <operator pos:start="367:31" pos:end="367:31">=</operator> <name pos:start="367:33" pos:end="367:41">chunk_len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="369:13" pos:end="369:42"><expr pos:start="369:13" pos:end="369:41"><name pos:start="369:13" pos:end="369:24"><name pos:start="369:13" pos:end="369:17">chunk</name><operator pos:start="369:18" pos:end="369:18">.</operator><name pos:start="369:19" pos:end="369:21">ts1</name><index pos:start="369:22" pos:end="369:24">[<expr pos:start="369:23" pos:end="369:23"><name pos:start="369:23" pos:end="369:23">i</name></expr>]</index></name><operator pos:start="369:25" pos:end="369:25">.</operator><name pos:start="369:26" pos:end="369:29">data</name> <operator pos:start="369:31" pos:end="369:31">=</operator> <name pos:start="369:33" pos:end="369:41"><name pos:start="369:33" pos:end="369:34">gb</name><operator pos:start="369:35" pos:end="369:35">.</operator><name pos:start="369:36" pos:end="369:41">buffer</name></name></expr>;</expr_stmt>

            <break pos:start="371:13" pos:end="371:18">break;</break>



        <case pos:start="375:9" pos:end="375:32">case <expr pos:start="375:14" pos:end="375:31"><name pos:start="375:14" pos:end="375:31">LBR_CHUNK_RES_TS_2</name></expr>:</case>

        <case pos:start="377:9" pos:end="377:36">case <expr pos:start="377:14" pos:end="377:35"><name pos:start="377:14" pos:end="377:31">LBR_CHUNK_RES_TS_2</name> <operator pos:start="377:33" pos:end="377:33">+</operator> <literal type="number" pos:start="377:35" pos:end="377:35">1</literal></expr>:</case>

        <case pos:start="379:9" pos:end="379:36">case <expr pos:start="379:14" pos:end="379:35"><name pos:start="379:14" pos:end="379:31">LBR_CHUNK_RES_TS_2</name> <operator pos:start="379:33" pos:end="379:33">+</operator> <literal type="number" pos:start="379:35" pos:end="379:35">2</literal></expr>:</case>

            <expr_stmt pos:start="381:13" pos:end="381:46"><expr pos:start="381:13" pos:end="381:45"><name pos:start="381:13" pos:end="381:13">i</name> <operator pos:start="381:15" pos:end="381:15">=</operator> <name pos:start="381:17" pos:end="381:24">chunk_id</name> <operator pos:start="381:26" pos:end="381:26">-</operator> <name pos:start="381:28" pos:end="381:45">LBR_CHUNK_RES_TS_2</name></expr>;</expr_stmt>

            <expr_stmt pos:start="383:13" pos:end="383:42"><expr pos:start="383:13" pos:end="383:41"><name pos:start="383:13" pos:end="383:24"><name pos:start="383:13" pos:end="383:17">chunk</name><operator pos:start="383:18" pos:end="383:18">.</operator><name pos:start="383:19" pos:end="383:21">ts2</name><index pos:start="383:22" pos:end="383:24">[<expr pos:start="383:23" pos:end="383:23"><name pos:start="383:23" pos:end="383:23">i</name></expr>]</index></name><operator pos:start="383:25" pos:end="383:25">.</operator><name pos:start="383:26" pos:end="383:28">len</name>  <operator pos:start="383:31" pos:end="383:31">=</operator> <name pos:start="383:33" pos:end="383:41">chunk_len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="385:13" pos:end="385:42"><expr pos:start="385:13" pos:end="385:41"><name pos:start="385:13" pos:end="385:24"><name pos:start="385:13" pos:end="385:17">chunk</name><operator pos:start="385:18" pos:end="385:18">.</operator><name pos:start="385:19" pos:end="385:21">ts2</name><index pos:start="385:22" pos:end="385:24">[<expr pos:start="385:23" pos:end="385:23"><name pos:start="385:23" pos:end="385:23">i</name></expr>]</index></name><operator pos:start="385:25" pos:end="385:25">.</operator><name pos:start="385:26" pos:end="385:29">data</name> <operator pos:start="385:31" pos:end="385:31">=</operator> <name pos:start="385:33" pos:end="385:41"><name pos:start="385:33" pos:end="385:34">gb</name><operator pos:start="385:35" pos:end="385:35">.</operator><name pos:start="385:36" pos:end="385:41">buffer</name></name></expr>;</expr_stmt>

            <break pos:start="387:13" pos:end="387:18">break;</break>

        </block_content>}</block></switch>



        <expr_stmt pos:start="393:9" pos:end="393:41"><expr pos:start="393:9" pos:end="393:40"><call pos:start="393:9" pos:end="393:40"><name pos:start="393:9" pos:end="393:24">bytestream2_skip</name><argument_list pos:start="393:25" pos:end="393:40">(<argument pos:start="393:26" pos:end="393:28"><expr pos:start="393:26" pos:end="393:28"><operator pos:start="393:26" pos:end="393:26">&amp;</operator><name pos:start="393:27" pos:end="393:28">gb</name></expr></argument>, <argument pos:start="393:31" pos:end="393:39"><expr pos:start="393:31" pos:end="393:39"><name pos:start="393:31" pos:end="393:39">chunk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="line" pos:start="399:5" pos:end="399:23">// Parse the chunks</comment>

    <expr_stmt pos:start="401:5" pos:end="401:41"><expr pos:start="401:5" pos:end="401:40"><name pos:start="401:5" pos:end="401:7">ret</name> <operator pos:start="401:9" pos:end="401:9">=</operator> <call pos:start="401:11" pos:end="401:40"><name pos:start="401:11" pos:end="401:25">parse_lfe_chunk</name><argument_list pos:start="401:26" pos:end="401:40">(<argument pos:start="401:27" pos:end="401:27"><expr pos:start="401:27" pos:end="401:27"><name pos:start="401:27" pos:end="401:27">s</name></expr></argument>, <argument pos:start="401:30" pos:end="401:39"><expr pos:start="401:30" pos:end="401:39"><operator pos:start="401:30" pos:end="401:30">&amp;</operator><name pos:start="401:31" pos:end="401:39"><name pos:start="401:31" pos:end="401:35">chunk</name><operator pos:start="401:36" pos:end="401:36">.</operator><name pos:start="401:37" pos:end="401:39">lfe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="405:5" pos:end="405:46"><expr pos:start="405:5" pos:end="405:45"><name pos:start="405:5" pos:end="405:7">ret</name> <operator pos:start="405:9" pos:end="405:10">|=</operator> <call pos:start="405:12" pos:end="405:45"><name pos:start="405:12" pos:end="405:28">parse_tonal_chunk</name><argument_list pos:start="405:29" pos:end="405:45">(<argument pos:start="405:30" pos:end="405:30"><expr pos:start="405:30" pos:end="405:30"><name pos:start="405:30" pos:end="405:30">s</name></expr></argument>, <argument pos:start="405:33" pos:end="405:44"><expr pos:start="405:33" pos:end="405:44"><operator pos:start="405:33" pos:end="405:33">&amp;</operator><name pos:start="405:34" pos:end="405:44"><name pos:start="405:34" pos:end="405:38">chunk</name><operator pos:start="405:39" pos:end="405:39">.</operator><name pos:start="405:40" pos:end="405:44">tonal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="409:5" pos:end="411:57">for <control pos:start="409:9" pos:end="409:27">(<init pos:start="409:10" pos:end="409:15"><expr pos:start="409:10" pos:end="409:14"><name pos:start="409:10" pos:end="409:10">i</name> <operator pos:start="409:12" pos:end="409:12">=</operator> <literal type="number" pos:start="409:14" pos:end="409:14">0</literal></expr>;</init> <condition pos:start="409:17" pos:end="409:22"><expr pos:start="409:17" pos:end="409:21"><name pos:start="409:17" pos:end="409:17">i</name> <operator pos:start="409:19" pos:end="409:19">&lt;</operator> <literal type="number" pos:start="409:21" pos:end="409:21">5</literal></expr>;</condition> <incr pos:start="409:24" pos:end="409:26"><expr pos:start="409:24" pos:end="409:26"><name pos:start="409:24" pos:end="409:24">i</name><operator pos:start="409:25" pos:end="409:26">++</operator></expr></incr>)</control><block type="pseudo" pos:start="411:9" pos:end="411:57"><block_content pos:start="411:9" pos:end="411:57">

        <expr_stmt pos:start="411:9" pos:end="411:57"><expr pos:start="411:9" pos:end="411:56"><name pos:start="411:9" pos:end="411:11">ret</name> <operator pos:start="411:13" pos:end="411:14">|=</operator> <call pos:start="411:16" pos:end="411:56"><name pos:start="411:16" pos:end="411:32">parse_tonal_group</name><argument_list pos:start="411:33" pos:end="411:56">(<argument pos:start="411:34" pos:end="411:34"><expr pos:start="411:34" pos:end="411:34"><name pos:start="411:34" pos:end="411:34">s</name></expr></argument>, <argument pos:start="411:37" pos:end="411:55"><expr pos:start="411:37" pos:end="411:55"><operator pos:start="411:37" pos:end="411:37">&amp;</operator><name pos:start="411:38" pos:end="411:55"><name pos:start="411:38" pos:end="411:42">chunk</name><operator pos:start="411:43" pos:end="411:43">.</operator><name pos:start="411:44" pos:end="411:52">tonal_grp</name><index pos:start="411:53" pos:end="411:55">[<expr pos:start="411:54" pos:end="411:54"><name pos:start="411:54" pos:end="411:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <for pos:start="415:5" pos:end="453:5">for <control pos:start="415:9" pos:end="415:48">(<init pos:start="415:10" pos:end="415:15"><expr pos:start="415:10" pos:end="415:14"><name pos:start="415:10" pos:end="415:10">i</name> <operator pos:start="415:12" pos:end="415:12">=</operator> <literal type="number" pos:start="415:14" pos:end="415:14">0</literal></expr>;</init> <condition pos:start="415:17" pos:end="415:43"><expr pos:start="415:17" pos:end="415:42"><name pos:start="415:17" pos:end="415:17">i</name> <operator pos:start="415:19" pos:end="415:19">&lt;</operator> <operator pos:start="415:21" pos:end="415:21">(</operator><name pos:start="415:22" pos:end="415:33"><name pos:start="415:22" pos:end="415:22">s</name><operator pos:start="415:23" pos:end="415:24">-&gt;</operator><name pos:start="415:25" pos:end="415:33">nchannels</name></name> <operator pos:start="415:35" pos:end="415:35">+</operator> <literal type="number" pos:start="415:37" pos:end="415:37">1</literal><operator pos:start="415:38" pos:end="415:38">)</operator> <operator pos:start="415:40" pos:end="415:40">/</operator> <literal type="number" pos:start="415:42" pos:end="415:42">2</literal></expr>;</condition> <incr pos:start="415:45" pos:end="415:47"><expr pos:start="415:45" pos:end="415:47"><name pos:start="415:45" pos:end="415:45">i</name><operator pos:start="415:46" pos:end="415:47">++</operator></expr></incr>)</control> <block pos:start="415:50" pos:end="453:5">{<block_content pos:start="417:9" pos:end="451:9">

        <decl_stmt pos:start="417:9" pos:end="417:24"><decl pos:start="417:9" pos:end="417:23"><type pos:start="417:9" pos:end="417:11"><name pos:start="417:9" pos:end="417:11">int</name></type> <name pos:start="417:13" pos:end="417:15">ch1</name> <init pos:start="417:17" pos:end="417:23">= <expr pos:start="417:19" pos:end="417:23"><name pos:start="417:19" pos:end="417:19">i</name> <operator pos:start="417:21" pos:end="417:21">*</operator> <literal type="number" pos:start="417:23" pos:end="417:23">2</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="419:9" pos:end="419:51"><decl pos:start="419:9" pos:end="419:50"><type pos:start="419:9" pos:end="419:11"><name pos:start="419:9" pos:end="419:11">int</name></type> <name pos:start="419:13" pos:end="419:15">ch2</name> <init pos:start="419:17" pos:end="419:50">= <expr pos:start="419:19" pos:end="419:50"><call pos:start="419:19" pos:end="419:50"><name pos:start="419:19" pos:end="419:23">FFMIN</name><argument_list pos:start="419:24" pos:end="419:50">(<argument pos:start="419:25" pos:end="419:31"><expr pos:start="419:25" pos:end="419:31"><name pos:start="419:25" pos:end="419:27">ch1</name> <operator pos:start="419:29" pos:end="419:29">+</operator> <literal type="number" pos:start="419:31" pos:end="419:31">1</literal></expr></argument>, <argument pos:start="419:34" pos:end="419:49"><expr pos:start="419:34" pos:end="419:49"><name pos:start="419:34" pos:end="419:45"><name pos:start="419:34" pos:end="419:34">s</name><operator pos:start="419:35" pos:end="419:36">-&gt;</operator><name pos:start="419:37" pos:end="419:45">nchannels</name></name> <operator pos:start="419:47" pos:end="419:47">-</operator> <literal type="number" pos:start="419:49" pos:end="419:49">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="423:9" pos:end="431:9"><if pos:start="423:9" pos:end="431:9">if <condition pos:start="423:12" pos:end="425:68">(<expr pos:start="423:13" pos:end="425:67"><call pos:start="423:13" pos:end="423:63"><name pos:start="423:13" pos:end="423:30">parse_grid_1_chunk</name> <argument_list pos:start="423:32" pos:end="423:63">(<argument pos:start="423:33" pos:end="423:33"><expr pos:start="423:33" pos:end="423:33"><name pos:start="423:33" pos:end="423:33">s</name></expr></argument>, <argument pos:start="423:36" pos:end="423:52"><expr pos:start="423:36" pos:end="423:52"><operator pos:start="423:36" pos:end="423:36">&amp;</operator><name pos:start="423:37" pos:end="423:52"><name pos:start="423:37" pos:end="423:41">chunk</name><operator pos:start="423:42" pos:end="423:42">.</operator><name pos:start="423:43" pos:end="423:47">grid1</name>  <index pos:start="423:50" pos:end="423:52">[<expr pos:start="423:51" pos:end="423:51"><name pos:start="423:51" pos:end="423:51">i</name></expr>]</index></name></expr></argument>, <argument pos:start="423:55" pos:end="423:57"><expr pos:start="423:55" pos:end="423:57"><name pos:start="423:55" pos:end="423:57">ch1</name></expr></argument>, <argument pos:start="423:60" pos:end="423:62"><expr pos:start="423:60" pos:end="423:62"><name pos:start="423:60" pos:end="423:62">ch2</name></expr></argument>)</argument_list></call> <operator pos:start="423:65" pos:end="423:65">&lt;</operator> <literal type="number" pos:start="423:67" pos:end="423:67">0</literal> <operator pos:start="423:69" pos:end="423:70">||</operator>

            <call pos:start="425:13" pos:end="425:63"><name pos:start="425:13" pos:end="425:31">parse_high_res_grid</name><argument_list pos:start="425:32" pos:end="425:63">(<argument pos:start="425:33" pos:end="425:33"><expr pos:start="425:33" pos:end="425:33"><name pos:start="425:33" pos:end="425:33">s</name></expr></argument>, <argument pos:start="425:36" pos:end="425:52"><expr pos:start="425:36" pos:end="425:52"><operator pos:start="425:36" pos:end="425:36">&amp;</operator><name pos:start="425:37" pos:end="425:52"><name pos:start="425:37" pos:end="425:41">chunk</name><operator pos:start="425:42" pos:end="425:42">.</operator><name pos:start="425:43" pos:end="425:49">hr_grid</name><index pos:start="425:50" pos:end="425:52">[<expr pos:start="425:51" pos:end="425:51"><name pos:start="425:51" pos:end="425:51">i</name></expr>]</index></name></expr></argument>, <argument pos:start="425:55" pos:end="425:57"><expr pos:start="425:55" pos:end="425:57"><name pos:start="425:55" pos:end="425:57">ch1</name></expr></argument>, <argument pos:start="425:60" pos:end="425:62"><expr pos:start="425:60" pos:end="425:62"><name pos:start="425:60" pos:end="425:62">ch2</name></expr></argument>)</argument_list></call> <operator pos:start="425:65" pos:end="425:65">&lt;</operator> <literal type="number" pos:start="425:67" pos:end="425:67">0</literal></expr>)</condition> <block pos:start="425:70" pos:end="431:9">{<block_content pos:start="427:13" pos:end="429:21">

            <expr_stmt pos:start="427:13" pos:end="427:21"><expr pos:start="427:13" pos:end="427:20"><name pos:start="427:13" pos:end="427:15">ret</name> <operator pos:start="427:17" pos:end="427:17">=</operator> <operator pos:start="427:19" pos:end="427:19">-</operator><literal type="number" pos:start="427:20" pos:end="427:20">1</literal></expr>;</expr_stmt>

            <continue pos:start="429:13" pos:end="429:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="435:9" pos:end="435:64">// TS chunks depend on both grids. TS_2 depends on TS_1.</comment>

        <if_stmt pos:start="437:9" pos:end="439:21"><if pos:start="437:9" pos:end="439:21">if <condition pos:start="437:12" pos:end="437:78">(<expr pos:start="437:13" pos:end="437:77"><operator pos:start="437:13" pos:end="437:13">!</operator><name pos:start="437:14" pos:end="437:27"><name pos:start="437:14" pos:end="437:18">chunk</name><operator pos:start="437:19" pos:end="437:19">.</operator><name pos:start="437:20" pos:end="437:24">grid1</name><index pos:start="437:25" pos:end="437:27">[<expr pos:start="437:26" pos:end="437:26"><name pos:start="437:26" pos:end="437:26">i</name></expr>]</index></name><operator pos:start="437:28" pos:end="437:28">.</operator><name pos:start="437:29" pos:end="437:31">len</name> <operator pos:start="437:33" pos:end="437:34">||</operator> <operator pos:start="437:36" pos:end="437:36">!</operator><name pos:start="437:37" pos:end="437:52"><name pos:start="437:37" pos:end="437:41">chunk</name><operator pos:start="437:42" pos:end="437:42">.</operator><name pos:start="437:43" pos:end="437:49">hr_grid</name><index pos:start="437:50" pos:end="437:52">[<expr pos:start="437:51" pos:end="437:51"><name pos:start="437:51" pos:end="437:51">i</name></expr>]</index></name><operator pos:start="437:53" pos:end="437:53">.</operator><name pos:start="437:54" pos:end="437:56">len</name> <operator pos:start="437:58" pos:end="437:59">||</operator> <operator pos:start="437:61" pos:end="437:61">!</operator><name pos:start="437:62" pos:end="437:73"><name pos:start="437:62" pos:end="437:66">chunk</name><operator pos:start="437:67" pos:end="437:67">.</operator><name pos:start="437:68" pos:end="437:70">ts1</name><index pos:start="437:71" pos:end="437:73">[<expr pos:start="437:72" pos:end="437:72"><name pos:start="437:72" pos:end="437:72">i</name></expr>]</index></name><operator pos:start="437:74" pos:end="437:74">.</operator><name pos:start="437:75" pos:end="437:77">len</name></expr>)</condition><block type="pseudo" pos:start="439:13" pos:end="439:21"><block_content pos:start="439:13" pos:end="439:21">

            <continue pos:start="439:13" pos:end="439:21">continue;</continue></block_content></block></if></if_stmt>



        <if_stmt pos:start="443:9" pos:end="451:9"><if pos:start="443:9" pos:end="451:9">if <condition pos:start="443:12" pos:end="445:60">(<expr pos:start="443:13" pos:end="445:59"><call pos:start="443:13" pos:end="443:55"><name pos:start="443:13" pos:end="443:27">parse_ts1_chunk</name><argument_list pos:start="443:28" pos:end="443:55">(<argument pos:start="443:29" pos:end="443:29"><expr pos:start="443:29" pos:end="443:29"><name pos:start="443:29" pos:end="443:29">s</name></expr></argument>, <argument pos:start="443:32" pos:end="443:44"><expr pos:start="443:32" pos:end="443:44"><operator pos:start="443:32" pos:end="443:32">&amp;</operator><name pos:start="443:33" pos:end="443:44"><name pos:start="443:33" pos:end="443:37">chunk</name><operator pos:start="443:38" pos:end="443:38">.</operator><name pos:start="443:39" pos:end="443:41">ts1</name><index pos:start="443:42" pos:end="443:44">[<expr pos:start="443:43" pos:end="443:43"><name pos:start="443:43" pos:end="443:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="443:47" pos:end="443:49"><expr pos:start="443:47" pos:end="443:49"><name pos:start="443:47" pos:end="443:49">ch1</name></expr></argument>, <argument pos:start="443:52" pos:end="443:54"><expr pos:start="443:52" pos:end="443:54"><name pos:start="443:52" pos:end="443:54">ch2</name></expr></argument>)</argument_list></call> <operator pos:start="443:57" pos:end="443:57">&lt;</operator> <literal type="number" pos:start="443:59" pos:end="443:59">0</literal> <operator pos:start="443:61" pos:end="443:62">||</operator>

            <call pos:start="445:13" pos:end="445:55"><name pos:start="445:13" pos:end="445:27">parse_ts2_chunk</name><argument_list pos:start="445:28" pos:end="445:55">(<argument pos:start="445:29" pos:end="445:29"><expr pos:start="445:29" pos:end="445:29"><name pos:start="445:29" pos:end="445:29">s</name></expr></argument>, <argument pos:start="445:32" pos:end="445:44"><expr pos:start="445:32" pos:end="445:44"><operator pos:start="445:32" pos:end="445:32">&amp;</operator><name pos:start="445:33" pos:end="445:44"><name pos:start="445:33" pos:end="445:37">chunk</name><operator pos:start="445:38" pos:end="445:38">.</operator><name pos:start="445:39" pos:end="445:41">ts2</name><index pos:start="445:42" pos:end="445:44">[<expr pos:start="445:43" pos:end="445:43"><name pos:start="445:43" pos:end="445:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="445:47" pos:end="445:49"><expr pos:start="445:47" pos:end="445:49"><name pos:start="445:47" pos:end="445:49">ch1</name></expr></argument>, <argument pos:start="445:52" pos:end="445:54"><expr pos:start="445:52" pos:end="445:54"><name pos:start="445:52" pos:end="445:54">ch2</name></expr></argument>)</argument_list></call> <operator pos:start="445:57" pos:end="445:57">&lt;</operator> <literal type="number" pos:start="445:59" pos:end="445:59">0</literal></expr>)</condition> <block pos:start="445:62" pos:end="451:9">{<block_content pos:start="447:13" pos:end="449:21">

            <expr_stmt pos:start="447:13" pos:end="447:21"><expr pos:start="447:13" pos:end="447:20"><name pos:start="447:13" pos:end="447:15">ret</name> <operator pos:start="447:17" pos:end="447:17">=</operator> <operator pos:start="447:19" pos:end="447:19">-</operator><literal type="number" pos:start="447:20" pos:end="447:20">1</literal></expr>;</expr_stmt>

            <continue pos:start="449:13" pos:end="449:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="457:5" pos:end="459:35"><if pos:start="457:5" pos:end="459:35">if <condition pos:start="457:8" pos:end="457:63">(<expr pos:start="457:9" pos:end="457:62"><name pos:start="457:9" pos:end="457:11">ret</name> <operator pos:start="457:13" pos:end="457:13">&lt;</operator> <literal type="number" pos:start="457:15" pos:end="457:15">0</literal> <operator pos:start="457:17" pos:end="457:18">&amp;&amp;</operator> <operator pos:start="457:20" pos:end="457:20">(</operator><name pos:start="457:21" pos:end="457:45"><name pos:start="457:21" pos:end="457:21">s</name><operator pos:start="457:22" pos:end="457:23">-&gt;</operator><name pos:start="457:24" pos:end="457:28">avctx</name><operator pos:start="457:29" pos:end="457:30">-&gt;</operator><name pos:start="457:31" pos:end="457:45">err_recognition</name></name> <operator pos:start="457:47" pos:end="457:47">&amp;</operator> <name pos:start="457:49" pos:end="457:61">AV_EF_EXPLODE</name><operator pos:start="457:62" pos:end="457:62">)</operator></expr>)</condition><block type="pseudo" pos:start="459:9" pos:end="459:35"><block_content pos:start="459:9" pos:end="459:35">

        <return pos:start="459:9" pos:end="459:35">return <expr pos:start="459:16" pos:end="459:34"><name pos:start="459:16" pos:end="459:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="463:5" pos:end="463:13">return <expr pos:start="463:12" pos:end="463:12"><literal type="number" pos:start="463:12" pos:end="463:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
