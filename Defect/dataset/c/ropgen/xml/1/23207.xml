<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23207.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">spapr_core_pre_plug</name><parameter_list pos:start="1:32" pos:end="3:45">(<parameter pos:start="1:33" pos:end="1:59"><decl pos:start="1:33" pos:end="1:59"><type pos:start="1:33" pos:end="1:59"><name pos:start="1:33" pos:end="1:46">HotplugHandler</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:59">hotplug_dev</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:77"><decl pos:start="1:62" pos:end="1:77"><type pos:start="1:62" pos:end="1:77"><name pos:start="1:62" pos:end="1:72">DeviceState</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:77">dev</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:44"><decl pos:start="3:33" pos:end="3:44"><type pos:start="3:33" pos:end="3:44"><name pos:start="3:33" pos:end="3:37">Error</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier><modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:44">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="111:1">{<block_content pos:start="7:5" pos:end="109:37">

    <decl_stmt pos:start="7:5" pos:end="7:57"><decl pos:start="7:5" pos:end="7:56"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MachineState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:25">machine</name> <init pos:start="7:27" pos:end="7:56">= <expr pos:start="7:29" pos:end="7:56"><call pos:start="7:29" pos:end="7:56"><name pos:start="7:29" pos:end="7:35">MACHINE</name><argument_list pos:start="7:36" pos:end="7:56">(<argument pos:start="7:37" pos:end="7:55"><expr pos:start="7:37" pos:end="7:55"><call pos:start="7:37" pos:end="7:55"><name pos:start="7:37" pos:end="7:42">OBJECT</name><argument_list pos:start="7:43" pos:end="7:55">(<argument pos:start="7:44" pos:end="7:54"><expr pos:start="7:44" pos:end="7:54"><name pos:start="7:44" pos:end="7:54">hotplug_dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:53"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MachineClass</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:20">mc</name> <init pos:start="9:22" pos:end="9:53">= <expr pos:start="9:24" pos:end="9:53"><call pos:start="9:24" pos:end="9:53"><name pos:start="9:24" pos:end="9:40">MACHINE_GET_CLASS</name><argument_list pos:start="9:41" pos:end="9:53">(<argument pos:start="9:42" pos:end="9:52"><expr pos:start="9:42" pos:end="9:52"><name pos:start="9:42" pos:end="9:52">hotplug_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">CPUCore</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:15">cc</name> <init pos:start="13:17" pos:end="13:31">= <expr pos:start="13:19" pos:end="13:31"><call pos:start="13:19" pos:end="13:31"><name pos:start="13:19" pos:end="13:26">CPU_CORE</name><argument_list pos:start="13:27" pos:end="13:31">(<argument pos:start="13:28" pos:end="13:30"><expr pos:start="13:28" pos:end="13:30"><name pos:start="13:28" pos:end="13:30">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:71"><decl pos:start="15:5" pos:end="15:70"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:24">base_core_type</name> <init pos:start="15:26" pos:end="15:70">= <expr pos:start="15:28" pos:end="15:70"><call pos:start="15:28" pos:end="15:70"><name pos:start="15:28" pos:end="15:50">spapr_get_cpu_core_type</name><argument_list pos:start="15:51" pos:end="15:70">(<argument pos:start="15:52" pos:end="15:69"><expr pos:start="15:52" pos:end="15:69"><name pos:start="15:52" pos:end="15:69"><name pos:start="15:52" pos:end="15:58">machine</name><operator pos:start="15:59" pos:end="15:60">-&gt;</operator><name pos:start="15:61" pos:end="15:69">cpu_model</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:56"><decl pos:start="17:5" pos:end="17:55"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:20">type</name> <init pos:start="17:22" pos:end="17:55">= <expr pos:start="17:24" pos:end="17:55"><call pos:start="17:24" pos:end="17:55"><name pos:start="17:24" pos:end="17:42">object_get_typename</name><argument_list pos:start="17:43" pos:end="17:55">(<argument pos:start="17:44" pos:end="17:54"><expr pos:start="17:44" pos:end="17:54"><call pos:start="17:44" pos:end="17:54"><name pos:start="17:44" pos:end="17:49">OBJECT</name><argument_list pos:start="17:50" pos:end="17:54">(<argument pos:start="17:51" pos:end="17:53"><expr pos:start="17:51" pos:end="17:53"><name pos:start="17:51" pos:end="17:53">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:13">CPUArchId</name> <modifier pos:start="19:15" pos:end="19:15">*</modifier></type><name pos:start="19:16" pos:end="19:24">core_slot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:14"><decl pos:start="21:5" pos:end="21:13"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:13">index</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:54">(<expr pos:start="25:9" pos:end="25:53"><name pos:start="25:9" pos:end="25:23"><name pos:start="25:9" pos:end="25:11">dev</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:23">hotplugged</name></name> <operator pos:start="25:25" pos:end="25:26">&amp;&amp;</operator> <operator pos:start="25:28" pos:end="25:28">!</operator><name pos:start="25:29" pos:end="25:53"><name pos:start="25:29" pos:end="25:30">mc</name><operator pos:start="25:31" pos:end="25:32">-&gt;</operator><name pos:start="25:33" pos:end="25:53">has_hotpluggable_cpus</name></name></expr>)</condition> <block pos:start="25:56" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:17">

        <expr_stmt pos:start="27:9" pos:end="27:77"><expr pos:start="27:9" pos:end="27:76"><call pos:start="27:9" pos:end="27:76"><name pos:start="27:9" pos:end="27:18">error_setg</name><argument_list pos:start="27:19" pos:end="27:76">(<argument pos:start="27:20" pos:end="27:29"><expr pos:start="27:20" pos:end="27:29"><operator pos:start="27:20" pos:end="27:20">&amp;</operator><name pos:start="27:21" pos:end="27:29">local_err</name></expr></argument>, <argument pos:start="27:32" pos:end="27:75"><expr pos:start="27:32" pos:end="27:75"><literal type="string" pos:start="27:32" pos:end="27:75">"CPU hotplug not supported for this machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:17">goto <name pos:start="29:14" pos:end="29:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:37">(<expr pos:start="35:9" pos:end="35:36"><call pos:start="35:9" pos:end="35:36"><name pos:start="35:9" pos:end="35:14">strcmp</name><argument_list pos:start="35:15" pos:end="35:36">(<argument pos:start="35:16" pos:end="35:29"><expr pos:start="35:16" pos:end="35:29"><name pos:start="35:16" pos:end="35:29">base_core_type</name></expr></argument>, <argument pos:start="35:32" pos:end="35:35"><expr pos:start="35:32" pos:end="35:35"><name pos:start="35:32" pos:end="35:35">type</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:39" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:17">

        <expr_stmt pos:start="37:9" pos:end="37:77"><expr pos:start="37:9" pos:end="37:76"><call pos:start="37:9" pos:end="37:76"><name pos:start="37:9" pos:end="37:18">error_setg</name><argument_list pos:start="37:19" pos:end="37:76">(<argument pos:start="37:20" pos:end="37:29"><expr pos:start="37:20" pos:end="37:29"><operator pos:start="37:20" pos:end="37:20">&amp;</operator><name pos:start="37:21" pos:end="37:29">local_err</name></expr></argument>, <argument pos:start="37:32" pos:end="37:59"><expr pos:start="37:32" pos:end="37:59"><literal type="string" pos:start="37:32" pos:end="37:59">"CPU core type should be %s"</literal></expr></argument>, <argument pos:start="37:62" pos:end="37:75"><expr pos:start="37:62" pos:end="37:75"><name pos:start="37:62" pos:end="37:75">base_core_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:17">goto <name pos:start="39:14" pos:end="39:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:34">(<expr pos:start="45:9" pos:end="45:33"><name pos:start="45:9" pos:end="45:19"><name pos:start="45:9" pos:end="45:10">cc</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:19">core_id</name></name> <operator pos:start="45:21" pos:end="45:21">%</operator> <name pos:start="45:23" pos:end="45:33">smp_threads</name></expr>)</condition> <block pos:start="45:36" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:17">

        <expr_stmt pos:start="47:9" pos:end="47:66"><expr pos:start="47:9" pos:end="47:65"><call pos:start="47:9" pos:end="47:65"><name pos:start="47:9" pos:end="47:18">error_setg</name><argument_list pos:start="47:19" pos:end="47:65">(<argument pos:start="47:20" pos:end="47:29"><expr pos:start="47:20" pos:end="47:29"><operator pos:start="47:20" pos:end="47:20">&amp;</operator><name pos:start="47:21" pos:end="47:29">local_err</name></expr></argument>, <argument pos:start="47:32" pos:end="47:51"><expr pos:start="47:32" pos:end="47:51"><literal type="string" pos:start="47:32" pos:end="47:51">"invalid core id %d"</literal></expr></argument>, <argument pos:start="47:54" pos:end="47:64"><expr pos:start="47:54" pos:end="47:64"><name pos:start="47:54" pos:end="47:64"><name pos:start="47:54" pos:end="47:55">cc</name><operator pos:start="47:56" pos:end="47:57">-&gt;</operator><name pos:start="47:58" pos:end="47:64">core_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="49:9" pos:end="49:17">goto <name pos:start="49:14" pos:end="49:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="65:7">/*

     * In general we should have homogeneous threads-per-core, but old

     * (pre hotplug support) machine types allow the last core to have

     * reduced threads as a compatibility hack for when we allowed

     * total vcpus not a multiple of threads-per-core.

     */</comment>

    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="75:5">if <condition pos:start="67:8" pos:end="67:69">(<expr pos:start="67:9" pos:end="67:68"><name pos:start="67:9" pos:end="67:33"><name pos:start="67:9" pos:end="67:10">mc</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:33">has_hotpluggable_cpus</name></name> <operator pos:start="67:35" pos:end="67:36">&amp;&amp;</operator> <operator pos:start="67:38" pos:end="67:38">(</operator><name pos:start="67:39" pos:end="67:52"><name pos:start="67:39" pos:end="67:40">cc</name><operator pos:start="67:41" pos:end="67:42">-&gt;</operator><name pos:start="67:43" pos:end="67:52">nr_threads</name></name> <operator pos:start="67:54" pos:end="67:55">!=</operator> <name pos:start="67:57" pos:end="67:67">smp_threads</name><operator pos:start="67:68" pos:end="67:68">)</operator></expr>)</condition> <block pos:start="67:71" pos:end="75:5">{<block_content pos:start="69:9" pos:end="73:15">

        <expr_stmt pos:start="69:9" pos:end="71:48"><expr pos:start="69:9" pos:end="71:47"><call pos:start="69:9" pos:end="71:47"><name pos:start="69:9" pos:end="69:18">error_setg</name><argument_list pos:start="69:19" pos:end="71:47">(<argument pos:start="69:20" pos:end="69:23"><expr pos:start="69:20" pos:end="69:23"><name pos:start="69:20" pos:end="69:23">errp</name></expr></argument>, <argument pos:start="69:26" pos:end="69:60"><expr pos:start="69:26" pos:end="69:60"><literal type="string" pos:start="69:26" pos:end="69:60">"invalid nr-threads %d, must be %d"</literal></expr></argument>,

                   <argument pos:start="71:20" pos:end="71:33"><expr pos:start="71:20" pos:end="71:33"><name pos:start="71:20" pos:end="71:33"><name pos:start="71:20" pos:end="71:21">cc</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:33">nr_threads</name></name></expr></argument>, <argument pos:start="71:36" pos:end="71:46"><expr pos:start="71:36" pos:end="71:46"><name pos:start="71:36" pos:end="71:46">smp_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:79"><expr pos:start="79:5" pos:end="79:78"><name pos:start="79:5" pos:end="79:13">core_slot</name> <operator pos:start="79:15" pos:end="79:15">=</operator> <call pos:start="79:17" pos:end="79:78"><name pos:start="79:17" pos:end="79:35">spapr_find_cpu_slot</name><argument_list pos:start="79:36" pos:end="79:78">(<argument pos:start="79:37" pos:end="79:56"><expr pos:start="79:37" pos:end="79:56"><call pos:start="79:37" pos:end="79:56"><name pos:start="79:37" pos:end="79:43">MACHINE</name><argument_list pos:start="79:44" pos:end="79:56">(<argument pos:start="79:45" pos:end="79:55"><expr pos:start="79:45" pos:end="79:55"><name pos:start="79:45" pos:end="79:55">hotplug_dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="79:59" pos:end="79:69"><expr pos:start="79:59" pos:end="79:69"><name pos:start="79:59" pos:end="79:69"><name pos:start="79:59" pos:end="79:60">cc</name><operator pos:start="79:61" pos:end="79:62">-&gt;</operator><name pos:start="79:63" pos:end="79:69">core_id</name></name></expr></argument>, <argument pos:start="79:72" pos:end="79:77"><expr pos:start="79:72" pos:end="79:77"><operator pos:start="79:72" pos:end="79:72">&amp;</operator><name pos:start="79:73" pos:end="79:77">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:19">(<expr pos:start="81:9" pos:end="81:18"><operator pos:start="81:9" pos:end="81:9">!</operator><name pos:start="81:10" pos:end="81:18">core_slot</name></expr>)</condition> <block pos:start="81:21" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:17">

        <expr_stmt pos:start="83:9" pos:end="83:71"><expr pos:start="83:9" pos:end="83:70"><call pos:start="83:9" pos:end="83:70"><name pos:start="83:9" pos:end="83:18">error_setg</name><argument_list pos:start="83:19" pos:end="83:70">(<argument pos:start="83:20" pos:end="83:29"><expr pos:start="83:20" pos:end="83:29"><operator pos:start="83:20" pos:end="83:20">&amp;</operator><name pos:start="83:21" pos:end="83:29">local_err</name></expr></argument>, <argument pos:start="83:32" pos:end="83:56"><expr pos:start="83:32" pos:end="83:56"><literal type="string" pos:start="83:32" pos:end="83:56">"core id %d out of range"</literal></expr></argument>, <argument pos:start="83:59" pos:end="83:69"><expr pos:start="83:59" pos:end="83:69"><name pos:start="83:59" pos:end="83:69"><name pos:start="83:59" pos:end="83:60">cc</name><operator pos:start="83:61" pos:end="83:62">-&gt;</operator><name pos:start="83:63" pos:end="83:69">core_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="85:9" pos:end="85:17">goto <name pos:start="85:14" pos:end="85:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="97:5"><if pos:start="91:5" pos:end="97:5">if <condition pos:start="91:8" pos:end="91:23">(<expr pos:start="91:9" pos:end="91:22"><name pos:start="91:9" pos:end="91:22"><name pos:start="91:9" pos:end="91:17">core_slot</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:22">cpu</name></name></expr>)</condition> <block pos:start="91:25" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:17">

        <expr_stmt pos:start="93:9" pos:end="93:73"><expr pos:start="93:9" pos:end="93:72"><call pos:start="93:9" pos:end="93:72"><name pos:start="93:9" pos:end="93:18">error_setg</name><argument_list pos:start="93:19" pos:end="93:72">(<argument pos:start="93:20" pos:end="93:29"><expr pos:start="93:20" pos:end="93:29"><operator pos:start="93:20" pos:end="93:20">&amp;</operator><name pos:start="93:21" pos:end="93:29">local_err</name></expr></argument>, <argument pos:start="93:32" pos:end="93:58"><expr pos:start="93:32" pos:end="93:58"><literal type="string" pos:start="93:32" pos:end="93:58">"core %d already populated"</literal></expr></argument>, <argument pos:start="93:61" pos:end="93:71"><expr pos:start="93:61" pos:end="93:71"><name pos:start="93:61" pos:end="93:71"><name pos:start="93:61" pos:end="93:62">cc</name><operator pos:start="93:63" pos:end="93:64">-&gt;</operator><name pos:start="93:65" pos:end="93:71">core_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="95:9" pos:end="95:17">goto <name pos:start="95:14" pos:end="95:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:50"><expr pos:start="101:5" pos:end="101:49"><call pos:start="101:5" pos:end="101:49"><name pos:start="101:5" pos:end="101:21">numa_cpu_pre_plug</name><argument_list pos:start="101:22" pos:end="101:49">(<argument pos:start="101:23" pos:end="101:31"><expr pos:start="101:23" pos:end="101:31"><name pos:start="101:23" pos:end="101:31">core_slot</name></expr></argument>, <argument pos:start="101:34" pos:end="101:36"><expr pos:start="101:34" pos:end="101:36"><name pos:start="101:34" pos:end="101:36">dev</name></expr></argument>, <argument pos:start="101:39" pos:end="101:48"><expr pos:start="101:39" pos:end="101:48"><operator pos:start="101:39" pos:end="101:39">&amp;</operator><name pos:start="101:40" pos:end="101:48">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="105:1" pos:end="105:4"><name pos:start="105:1" pos:end="105:3">out</name>:</label>

    <expr_stmt pos:start="107:5" pos:end="107:27"><expr pos:start="107:5" pos:end="107:26"><call pos:start="107:5" pos:end="107:26"><name pos:start="107:5" pos:end="107:10">g_free</name><argument_list pos:start="107:11" pos:end="107:26">(<argument pos:start="107:12" pos:end="107:25"><expr pos:start="107:12" pos:end="107:25"><name pos:start="107:12" pos:end="107:25">base_core_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:37"><expr pos:start="109:5" pos:end="109:36"><call pos:start="109:5" pos:end="109:36"><name pos:start="109:5" pos:end="109:19">error_propagate</name><argument_list pos:start="109:20" pos:end="109:36">(<argument pos:start="109:21" pos:end="109:24"><expr pos:start="109:21" pos:end="109:24"><name pos:start="109:21" pos:end="109:24">errp</name></expr></argument>, <argument pos:start="109:27" pos:end="109:35"><expr pos:start="109:27" pos:end="109:35"><name pos:start="109:27" pos:end="109:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
