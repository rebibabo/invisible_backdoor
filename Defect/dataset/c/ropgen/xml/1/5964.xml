<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5964.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:26"><name pos:start="1:1" pos:end="1:7">sowrite</name><argument_list pos:start="1:8" pos:end="1:26">(<argument pos:start="1:9" pos:end="1:25">struct socket *so</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="173:1">{<block_content pos:start="5:9" pos:end="171:18">

	<decl_stmt pos:start="5:9" pos:end="5:18"><decl pos:start="5:9" pos:end="5:14"><type pos:start="5:9" pos:end="5:11"><name pos:start="5:9" pos:end="5:11">int</name></type>  <name pos:start="5:14" pos:end="5:14">n</name></decl>,<decl pos:start="5:16" pos:end="5:17"><type ref="prev" pos:start="5:9" pos:end="5:11"/><name pos:start="5:16" pos:end="5:17">nn</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:38"><decl pos:start="7:9" pos:end="7:37"><type pos:start="7:9" pos:end="7:21"><name pos:start="7:9" pos:end="7:19"><name pos:start="7:9" pos:end="7:14">struct</name> <name pos:start="7:16" pos:end="7:19">sbuf</name></name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:23">sb</name> <init pos:start="7:25" pos:end="7:37">= <expr pos:start="7:27" pos:end="7:37"><operator pos:start="7:27" pos:end="7:27">&amp;</operator><name pos:start="7:28" pos:end="7:37"><name pos:start="7:28" pos:end="7:29">so</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:37">so_rcv</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:28"><decl pos:start="9:9" pos:end="9:27"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:15">len</name> <init pos:start="9:17" pos:end="9:27">= <expr pos:start="9:19" pos:end="9:27"><name pos:start="9:19" pos:end="9:27"><name pos:start="9:19" pos:end="9:20">sb</name><operator pos:start="9:21" pos:end="9:22">-&gt;</operator><name pos:start="9:23" pos:end="9:27">sb_cc</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:28"><decl pos:start="11:9" pos:end="11:27"><type pos:start="11:9" pos:end="11:20"><name pos:start="11:9" pos:end="11:20"><name pos:start="11:9" pos:end="11:14">struct</name> <name pos:start="11:16" pos:end="11:20">iovec</name></name></type> <name pos:start="11:22" pos:end="11:27"><name pos:start="11:22" pos:end="11:24">iov</name><index pos:start="11:25" pos:end="11:27">[<expr pos:start="11:26" pos:end="11:26"><literal type="number" pos:start="11:26" pos:end="11:26">2</literal></expr>]</index></name></decl>;</decl_stmt>



	<expr_stmt pos:start="15:9" pos:end="15:30"><expr pos:start="15:9" pos:end="15:29"><call pos:start="15:9" pos:end="15:29"><name pos:start="15:9" pos:end="15:18">DEBUG_CALL</name><argument_list pos:start="15:19" pos:end="15:29">(<argument pos:start="15:20" pos:end="15:28"><expr pos:start="15:20" pos:end="15:28"><literal type="string" pos:start="15:20" pos:end="15:28">"sowrite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="17:9" pos:end="17:33"><expr pos:start="17:9" pos:end="17:32"><call pos:start="17:9" pos:end="17:32"><name pos:start="17:9" pos:end="17:17">DEBUG_ARG</name><argument_list pos:start="17:18" pos:end="17:32">(<argument pos:start="17:19" pos:end="17:27"><expr pos:start="17:19" pos:end="17:27"><literal type="string" pos:start="17:19" pos:end="17:27">"so = %p"</literal></expr></argument>, <argument pos:start="17:30" pos:end="17:31"><expr pos:start="17:30" pos:end="17:31"><name pos:start="17:30" pos:end="17:31">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="21:9" pos:end="29:9"><if pos:start="21:9" pos:end="29:9">if <condition pos:start="21:12" pos:end="21:24">(<expr pos:start="21:13" pos:end="21:23"><name pos:start="21:13" pos:end="21:23"><name pos:start="21:13" pos:end="21:14">so</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:23">so_urgc</name></name></expr>)</condition> <block pos:start="21:26" pos:end="29:9">{<block_content pos:start="23:17" pos:end="27:33">

		<expr_stmt pos:start="23:17" pos:end="23:30"><expr pos:start="23:17" pos:end="23:29"><call pos:start="23:17" pos:end="23:29"><name pos:start="23:17" pos:end="23:25">sosendoob</name><argument_list pos:start="23:26" pos:end="23:29">(<argument pos:start="23:27" pos:end="23:28"><expr pos:start="23:27" pos:end="23:28"><name pos:start="23:27" pos:end="23:28">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="25:17" pos:end="27:33"><if pos:start="25:17" pos:end="27:33">if <condition pos:start="25:20" pos:end="25:35">(<expr pos:start="25:21" pos:end="25:34"><name pos:start="25:21" pos:end="25:29"><name pos:start="25:21" pos:end="25:22">sb</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:29">sb_cc</name></name> <operator pos:start="25:31" pos:end="25:32">==</operator> <literal type="number" pos:start="25:34" pos:end="25:34">0</literal></expr>)</condition><block type="pseudo" pos:start="27:25" pos:end="27:33"><block_content pos:start="27:25" pos:end="27:33">

			<return pos:start="27:25" pos:end="27:33">return <expr pos:start="27:32" pos:end="27:32"><literal type="number" pos:start="27:32" pos:end="27:32">0</literal></expr>;</return></block_content></block></if></if_stmt>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="33:9" pos:end="39:11">/*

	 * No need to check if there's something to write,

	 * sowrite wouldn't have been called otherwise

	 */</comment>



	<expr_stmt pos:start="43:9" pos:end="43:38"><expr pos:start="43:9" pos:end="43:37"><name pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:11">iov</name><index pos:start="43:12" pos:end="43:14">[<expr pos:start="43:13" pos:end="43:13"><literal type="number" pos:start="43:13" pos:end="43:13">0</literal></expr>]</index></name><operator pos:start="43:15" pos:end="43:15">.</operator><name pos:start="43:16" pos:end="43:23">iov_base</name> <operator pos:start="43:25" pos:end="43:25">=</operator> <name pos:start="43:27" pos:end="43:37"><name pos:start="43:27" pos:end="43:28">sb</name><operator pos:start="43:29" pos:end="43:30">-&gt;</operator><name pos:start="43:31" pos:end="43:37">sb_rptr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:31"><expr pos:start="45:9" pos:end="45:30"><name pos:start="45:9" pos:end="45:14"><name pos:start="45:9" pos:end="45:11">iov</name><index pos:start="45:12" pos:end="45:14">[<expr pos:start="45:13" pos:end="45:13"><literal type="number" pos:start="45:13" pos:end="45:13">1</literal></expr>]</index></name><operator pos:start="45:15" pos:end="45:15">.</operator><name pos:start="45:16" pos:end="45:23">iov_base</name> <operator pos:start="45:25" pos:end="45:25">=</operator> <name pos:start="45:27" pos:end="45:30">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:27"><expr pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:11">iov</name><index pos:start="47:12" pos:end="47:14">[<expr pos:start="47:13" pos:end="47:13"><literal type="number" pos:start="47:13" pos:end="47:13">1</literal></expr>]</index></name><operator pos:start="47:15" pos:end="47:15">.</operator><name pos:start="47:16" pos:end="47:22">iov_len</name> <operator pos:start="47:24" pos:end="47:24">=</operator> <literal type="number" pos:start="47:26" pos:end="47:26">0</literal></expr>;</expr_stmt>

	<if_stmt pos:start="49:9" pos:end="88:0"><if pos:start="49:9" pos:end="59:9">if <condition pos:start="49:12" pos:end="49:38">(<expr pos:start="49:13" pos:end="49:37"><name pos:start="49:13" pos:end="49:23"><name pos:start="49:13" pos:end="49:14">sb</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:23">sb_rptr</name></name> <operator pos:start="49:25" pos:end="49:25">&lt;</operator> <name pos:start="49:27" pos:end="49:37"><name pos:start="49:27" pos:end="49:28">sb</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:37">sb_wptr</name></name></expr>)</condition> <block pos:start="49:40" pos:end="59:9">{<block_content pos:start="51:17" pos:end="57:22">

		<expr_stmt pos:start="51:17" pos:end="51:59"><expr pos:start="51:17" pos:end="51:58"><name pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:19">iov</name><index pos:start="51:20" pos:end="51:22">[<expr pos:start="51:21" pos:end="51:21"><literal type="number" pos:start="51:21" pos:end="51:21">0</literal></expr>]</index></name><operator pos:start="51:23" pos:end="51:23">.</operator><name pos:start="51:24" pos:end="51:30">iov_len</name> <operator pos:start="51:32" pos:end="51:32">=</operator> <name pos:start="51:34" pos:end="51:44"><name pos:start="51:34" pos:end="51:35">sb</name><operator pos:start="51:36" pos:end="51:37">-&gt;</operator><name pos:start="51:38" pos:end="51:44">sb_wptr</name></name> <operator pos:start="51:46" pos:end="51:46">-</operator> <name pos:start="51:48" pos:end="51:58"><name pos:start="51:48" pos:end="51:49">sb</name><operator pos:start="51:50" pos:end="51:51">-&gt;</operator><name pos:start="51:52" pos:end="51:58">sb_rptr</name></name></expr>;</expr_stmt>

		<comment type="block" pos:start="53:17" pos:end="53:50">/* Should never succeed, but... */</comment>

		<if_stmt pos:start="55:17" pos:end="55:63"><if pos:start="55:17" pos:end="55:63">if <condition pos:start="55:20" pos:end="55:41">(<expr pos:start="55:21" pos:end="55:40"><name pos:start="55:21" pos:end="55:26"><name pos:start="55:21" pos:end="55:23">iov</name><index pos:start="55:24" pos:end="55:26">[<expr pos:start="55:25" pos:end="55:25"><literal type="number" pos:start="55:25" pos:end="55:25">0</literal></expr>]</index></name><operator pos:start="55:27" pos:end="55:27">.</operator><name pos:start="55:28" pos:end="55:34">iov_len</name> <operator pos:start="55:36" pos:end="55:36">&gt;</operator> <name pos:start="55:38" pos:end="55:40">len</name></expr>)</condition><block type="pseudo" pos:start="55:43" pos:end="55:63"><block_content pos:start="55:43" pos:end="55:63"> <expr_stmt pos:start="55:43" pos:end="55:63"><expr pos:start="55:43" pos:end="55:62"><name pos:start="55:43" pos:end="55:48"><name pos:start="55:43" pos:end="55:45">iov</name><index pos:start="55:46" pos:end="55:48">[<expr pos:start="55:47" pos:end="55:47"><literal type="number" pos:start="55:47" pos:end="55:47">0</literal></expr>]</index></name><operator pos:start="55:49" pos:end="55:49">.</operator><name pos:start="55:50" pos:end="55:56">iov_len</name> <operator pos:start="55:58" pos:end="55:58">=</operator> <name pos:start="55:60" pos:end="55:62">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt pos:start="57:17" pos:end="57:22"><expr pos:start="57:17" pos:end="57:21"><name pos:start="57:17" pos:end="57:17">n</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <literal type="number" pos:start="57:21" pos:end="57:21">1</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="59:11" pos:end="88:0">else <block pos:start="59:16" pos:end="88:0">{<block_content pos:start="61:17" pos:end="79:30">

		<expr_stmt pos:start="61:17" pos:end="61:78"><expr pos:start="61:17" pos:end="61:77"><name pos:start="61:17" pos:end="61:22"><name pos:start="61:17" pos:end="61:19">iov</name><index pos:start="61:20" pos:end="61:22">[<expr pos:start="61:21" pos:end="61:21"><literal type="number" pos:start="61:21" pos:end="61:21">0</literal></expr>]</index></name><operator pos:start="61:23" pos:end="61:23">.</operator><name pos:start="61:24" pos:end="61:30">iov_len</name> <operator pos:start="61:32" pos:end="61:32">=</operator> <operator pos:start="61:34" pos:end="61:34">(</operator><name pos:start="61:35" pos:end="61:45"><name pos:start="61:35" pos:end="61:36">sb</name><operator pos:start="61:37" pos:end="61:38">-&gt;</operator><name pos:start="61:39" pos:end="61:45">sb_data</name></name> <operator pos:start="61:47" pos:end="61:47">+</operator> <name pos:start="61:49" pos:end="61:62"><name pos:start="61:49" pos:end="61:50">sb</name><operator pos:start="61:51" pos:end="61:52">-&gt;</operator><name pos:start="61:53" pos:end="61:62">sb_datalen</name></name><operator pos:start="61:63" pos:end="61:63">)</operator> <operator pos:start="61:65" pos:end="61:65">-</operator> <name pos:start="61:67" pos:end="61:77"><name pos:start="61:67" pos:end="61:68">sb</name><operator pos:start="61:69" pos:end="61:70">-&gt;</operator><name pos:start="61:71" pos:end="61:77">sb_rptr</name></name></expr>;</expr_stmt>

		<if_stmt pos:start="63:17" pos:end="63:63"><if pos:start="63:17" pos:end="63:63">if <condition pos:start="63:20" pos:end="63:41">(<expr pos:start="63:21" pos:end="63:40"><name pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:23">iov</name><index pos:start="63:24" pos:end="63:26">[<expr pos:start="63:25" pos:end="63:25"><literal type="number" pos:start="63:25" pos:end="63:25">0</literal></expr>]</index></name><operator pos:start="63:27" pos:end="63:27">.</operator><name pos:start="63:28" pos:end="63:34">iov_len</name> <operator pos:start="63:36" pos:end="63:36">&gt;</operator> <name pos:start="63:38" pos:end="63:40">len</name></expr>)</condition><block type="pseudo" pos:start="63:43" pos:end="63:63"><block_content pos:start="63:43" pos:end="63:63"> <expr_stmt pos:start="63:43" pos:end="63:63"><expr pos:start="63:43" pos:end="63:62"><name pos:start="63:43" pos:end="63:48"><name pos:start="63:43" pos:end="63:45">iov</name><index pos:start="63:46" pos:end="63:48">[<expr pos:start="63:47" pos:end="63:47"><literal type="number" pos:start="63:47" pos:end="63:47">0</literal></expr>]</index></name><operator pos:start="63:49" pos:end="63:49">.</operator><name pos:start="63:50" pos:end="63:56">iov_len</name> <operator pos:start="63:58" pos:end="63:58">=</operator> <name pos:start="63:60" pos:end="63:62">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt pos:start="65:17" pos:end="65:38"><expr pos:start="65:17" pos:end="65:37"><name pos:start="65:17" pos:end="65:19">len</name> <operator pos:start="65:21" pos:end="65:22">-=</operator> <name pos:start="65:24" pos:end="65:29"><name pos:start="65:24" pos:end="65:26">iov</name><index pos:start="65:27" pos:end="65:29">[<expr pos:start="65:28" pos:end="65:28"><literal type="number" pos:start="65:28" pos:end="65:28">0</literal></expr>]</index></name><operator pos:start="65:30" pos:end="65:30">.</operator><name pos:start="65:31" pos:end="65:37">iov_len</name></expr>;</expr_stmt>

		<if_stmt pos:start="67:17" pos:end="79:30"><if pos:start="67:17" pos:end="77:17">if <condition pos:start="67:20" pos:end="67:24">(<expr pos:start="67:21" pos:end="67:23"><name pos:start="67:21" pos:end="67:23">len</name></expr>)</condition> <block pos:start="67:26" pos:end="77:17">{<block_content pos:start="69:25" pos:end="75:30">

			<expr_stmt pos:start="69:25" pos:end="69:54"><expr pos:start="69:25" pos:end="69:53"><name pos:start="69:25" pos:end="69:30"><name pos:start="69:25" pos:end="69:27">iov</name><index pos:start="69:28" pos:end="69:30">[<expr pos:start="69:29" pos:end="69:29"><literal type="number" pos:start="69:29" pos:end="69:29">1</literal></expr>]</index></name><operator pos:start="69:31" pos:end="69:31">.</operator><name pos:start="69:32" pos:end="69:39">iov_base</name> <operator pos:start="69:41" pos:end="69:41">=</operator> <name pos:start="69:43" pos:end="69:53"><name pos:start="69:43" pos:end="69:44">sb</name><operator pos:start="69:45" pos:end="69:46">-&gt;</operator><name pos:start="69:47" pos:end="69:53">sb_data</name></name></expr>;</expr_stmt>

			<expr_stmt pos:start="71:25" pos:end="71:67"><expr pos:start="71:25" pos:end="71:66"><name pos:start="71:25" pos:end="71:30"><name pos:start="71:25" pos:end="71:27">iov</name><index pos:start="71:28" pos:end="71:30">[<expr pos:start="71:29" pos:end="71:29"><literal type="number" pos:start="71:29" pos:end="71:29">1</literal></expr>]</index></name><operator pos:start="71:31" pos:end="71:31">.</operator><name pos:start="71:32" pos:end="71:38">iov_len</name> <operator pos:start="71:40" pos:end="71:40">=</operator> <name pos:start="71:42" pos:end="71:52"><name pos:start="71:42" pos:end="71:43">sb</name><operator pos:start="71:44" pos:end="71:45">-&gt;</operator><name pos:start="71:46" pos:end="71:52">sb_wptr</name></name> <operator pos:start="71:54" pos:end="71:54">-</operator> <name pos:start="71:56" pos:end="71:66"><name pos:start="71:56" pos:end="71:57">sb</name><operator pos:start="71:58" pos:end="71:59">-&gt;</operator><name pos:start="71:60" pos:end="71:66">sb_data</name></name></expr>;</expr_stmt>

			<if_stmt pos:start="73:25" pos:end="73:71"><if pos:start="73:25" pos:end="73:71">if <condition pos:start="73:28" pos:end="73:49">(<expr pos:start="73:29" pos:end="73:48"><name pos:start="73:29" pos:end="73:34"><name pos:start="73:29" pos:end="73:31">iov</name><index pos:start="73:32" pos:end="73:34">[<expr pos:start="73:33" pos:end="73:33"><literal type="number" pos:start="73:33" pos:end="73:33">1</literal></expr>]</index></name><operator pos:start="73:35" pos:end="73:35">.</operator><name pos:start="73:36" pos:end="73:42">iov_len</name> <operator pos:start="73:44" pos:end="73:44">&gt;</operator> <name pos:start="73:46" pos:end="73:48">len</name></expr>)</condition><block type="pseudo" pos:start="73:51" pos:end="73:71"><block_content pos:start="73:51" pos:end="73:71"> <expr_stmt pos:start="73:51" pos:end="73:71"><expr pos:start="73:51" pos:end="73:70"><name pos:start="73:51" pos:end="73:56"><name pos:start="73:51" pos:end="73:53">iov</name><index pos:start="73:54" pos:end="73:56">[<expr pos:start="73:55" pos:end="73:55"><literal type="number" pos:start="73:55" pos:end="73:55">1</literal></expr>]</index></name><operator pos:start="73:57" pos:end="73:57">.</operator><name pos:start="73:58" pos:end="73:64">iov_len</name> <operator pos:start="73:66" pos:end="73:66">=</operator> <name pos:start="73:68" pos:end="73:70">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt pos:start="75:25" pos:end="75:30"><expr pos:start="75:25" pos:end="75:29"><name pos:start="75:25" pos:end="75:25">n</name> <operator pos:start="75:27" pos:end="75:27">=</operator> <literal type="number" pos:start="75:29" pos:end="75:29">2</literal></expr>;</expr_stmt>

		</block_content>}</block></if> <else pos:start="77:19" pos:end="79:30">else<block type="pseudo" pos:start="79:25" pos:end="79:30"><block_content pos:start="79:25" pos:end="79:30">

			<expr_stmt pos:start="79:25" pos:end="79:30"><expr pos:start="79:25" pos:end="79:29"><name pos:start="79:25" pos:end="79:25">n</name> <operator pos:start="79:27" pos:end="79:27">=</operator> <literal type="number" pos:start="79:29" pos:end="79:29">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	</block_content>}</block></else></if_stmt>

	<comment type="block" pos:start="83:9" pos:end="83:70">/* Check if there's urgent data to send, and if so, send it */</comment>



<cpp:ifdef pos:start="87:1" pos:end="87:17">#<cpp:directive pos:start="87:2" pos:end="87:6">ifdef</cpp:directive> <name pos:start="87:8" pos:end="87:17">HAVE_READV</name></cpp:ifdef>

	<expr_stmt pos:start="89:9" pos:end="89:57"><expr pos:start="89:9" pos:end="89:56"><name pos:start="89:9" pos:end="89:10">nn</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <call pos:start="89:14" pos:end="89:56"><name pos:start="89:14" pos:end="89:19">writev</name><argument_list pos:start="89:20" pos:end="89:56">(<argument pos:start="89:21" pos:end="89:25"><expr pos:start="89:21" pos:end="89:25"><name pos:start="89:21" pos:end="89:25"><name pos:start="89:21" pos:end="89:22">so</name><operator pos:start="89:23" pos:end="89:24">-&gt;</operator><name pos:start="89:25" pos:end="89:25">s</name></name></expr></argument>, <argument pos:start="89:28" pos:end="89:52"><expr pos:start="89:28" pos:end="89:52"><operator pos:start="89:28" pos:end="89:28">(</operator><specifier pos:start="89:29" pos:end="89:33">const</specifier> struct <name pos:start="89:42" pos:end="89:46">iovec</name> <operator pos:start="89:48" pos:end="89:48">*</operator><operator pos:start="89:49" pos:end="89:49">)</operator><name pos:start="89:50" pos:end="89:52">iov</name></expr></argument>, <argument pos:start="89:55" pos:end="89:55"><expr pos:start="89:55" pos:end="89:55"><name pos:start="89:55" pos:end="89:55">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="93:9" pos:end="96:0"><expr pos:start="93:9" pos:end="93:60"><call pos:start="93:9" pos:end="93:60"><name pos:start="93:9" pos:end="93:18">DEBUG_MISC</name><argument_list pos:start="93:19" pos:end="93:60">(<argument pos:start="93:20" pos:end="93:59"><expr pos:start="93:20" pos:end="93:59"><operator pos:start="93:20" pos:end="93:20">(</operator><name pos:start="93:21" pos:end="93:23">dfd</name><operator pos:start="93:24" pos:end="93:24">,</operator> <literal type="string" pos:start="93:26" pos:end="93:54">"  ... wrote nn = %d bytes\n"</literal><operator pos:start="93:55" pos:end="93:55">,</operator> <name pos:start="93:57" pos:end="93:58">nn</name><operator pos:start="93:59" pos:end="93:59">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="95:1" pos:end="95:5">#<cpp:directive pos:start="95:2" pos:end="95:5">else</cpp:directive></cpp:else>

	<expr_stmt pos:start="97:9" pos:end="100:0"><expr pos:start="97:9" pos:end="97:62"><name pos:start="97:9" pos:end="97:10">nn</name> <operator pos:start="97:12" pos:end="97:12">=</operator> <call pos:start="97:14" pos:end="97:62"><name pos:start="97:14" pos:end="97:23">slirp_send</name><argument_list pos:start="97:24" pos:end="97:62">(<argument pos:start="97:25" pos:end="97:26"><expr pos:start="97:25" pos:end="97:26"><name pos:start="97:25" pos:end="97:26">so</name></expr></argument>, <argument pos:start="97:29" pos:end="97:43"><expr pos:start="97:29" pos:end="97:43"><name pos:start="97:29" pos:end="97:34"><name pos:start="97:29" pos:end="97:31">iov</name><index pos:start="97:32" pos:end="97:34">[<expr pos:start="97:33" pos:end="97:33"><literal type="number" pos:start="97:33" pos:end="97:33">0</literal></expr>]</index></name><operator pos:start="97:35" pos:end="97:35">.</operator><name pos:start="97:36" pos:end="97:43">iov_base</name></expr></argument>, <argument pos:start="97:46" pos:end="97:59"><expr pos:start="97:46" pos:end="97:59"><name pos:start="97:46" pos:end="97:51"><name pos:start="97:46" pos:end="97:48">iov</name><index pos:start="97:49" pos:end="97:51">[<expr pos:start="97:50" pos:end="97:50"><literal type="number" pos:start="97:50" pos:end="97:50">0</literal></expr>]</index></name><operator pos:start="97:52" pos:end="97:52">.</operator><name pos:start="97:53" pos:end="97:59">iov_len</name></expr></argument>,<argument pos:start="97:61" pos:end="97:61"><expr pos:start="97:61" pos:end="97:61"><literal type="number" pos:start="97:61" pos:end="97:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="99:1" pos:end="99:6">#<cpp:directive pos:start="99:2" pos:end="99:6">endif</cpp:directive></cpp:endif>

	<comment type="block" pos:start="101:9" pos:end="101:74">/* This should never happen, but people tell me it does *shrug* */</comment>

	<if_stmt pos:start="103:9" pos:end="105:25"><if pos:start="103:9" pos:end="105:25">if <condition pos:start="103:12" pos:end="103:58">(<expr pos:start="103:13" pos:end="103:57"><name pos:start="103:13" pos:end="103:14">nn</name> <operator pos:start="103:16" pos:end="103:16">&lt;</operator> <literal type="number" pos:start="103:18" pos:end="103:18">0</literal> <operator pos:start="103:20" pos:end="103:21">&amp;&amp;</operator> <operator pos:start="103:23" pos:end="103:23">(</operator><name pos:start="103:24" pos:end="103:28">errno</name> <operator pos:start="103:30" pos:end="103:31">==</operator> <name pos:start="103:33" pos:end="103:38">EAGAIN</name> <operator pos:start="103:40" pos:end="103:41">||</operator> <name pos:start="103:43" pos:end="103:47">errno</name> <operator pos:start="103:49" pos:end="103:50">==</operator> <name pos:start="103:52" pos:end="103:56">EINTR</name><operator pos:start="103:57" pos:end="103:57">)</operator></expr>)</condition><block type="pseudo" pos:start="105:17" pos:end="105:25"><block_content pos:start="105:17" pos:end="105:25">

		<return pos:start="105:17" pos:end="105:25">return <expr pos:start="105:24" pos:end="105:24"><literal type="number" pos:start="105:24" pos:end="105:24">0</literal></expr>;</return></block_content></block></if></if_stmt>



	<if_stmt pos:start="109:9" pos:end="126:0"><if pos:start="109:9" pos:end="126:0">if <condition pos:start="109:12" pos:end="109:20">(<expr pos:start="109:13" pos:end="109:19"><name pos:start="109:13" pos:end="109:14">nn</name> <operator pos:start="109:16" pos:end="109:17">&lt;=</operator> <literal type="number" pos:start="109:19" pos:end="109:19">0</literal></expr>)</condition> <block pos:start="109:22" pos:end="126:0">{<block_content pos:start="111:17" pos:end="119:26">

		<expr_stmt pos:start="111:17" pos:end="113:46"><expr pos:start="111:17" pos:end="113:45"><call pos:start="111:17" pos:end="113:45"><name pos:start="111:17" pos:end="111:26">DEBUG_MISC</name><argument_list pos:start="111:27" pos:end="113:45">(<argument pos:start="111:28" pos:end="113:44"><expr pos:start="111:28" pos:end="113:44"><operator pos:start="111:28" pos:end="111:28">(</operator><name pos:start="111:29" pos:end="111:31">dfd</name><operator pos:start="111:32" pos:end="111:32">,</operator> <literal type="string" pos:start="111:34" pos:end="111:93">" --- sowrite disconnected, so-&gt;so_state = %x, errno = %d\n"</literal><operator pos:start="111:94" pos:end="111:94">,</operator>

			<name pos:start="113:25" pos:end="113:36"><name pos:start="113:25" pos:end="113:26">so</name><operator pos:start="113:27" pos:end="113:28">-&gt;</operator><name pos:start="113:29" pos:end="113:36">so_state</name></name><operator pos:start="113:37" pos:end="113:37">,</operator> <name pos:start="113:39" pos:end="113:43">errno</name><operator pos:start="113:44" pos:end="113:44">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="115:17" pos:end="115:36"><expr pos:start="115:17" pos:end="115:35"><call pos:start="115:17" pos:end="115:35"><name pos:start="115:17" pos:end="115:31">sofcantsendmore</name><argument_list pos:start="115:32" pos:end="115:35">(<argument pos:start="115:33" pos:end="115:34"><expr pos:start="115:33" pos:end="115:34"><name pos:start="115:33" pos:end="115:34">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="117:17" pos:end="117:46"><expr pos:start="117:17" pos:end="117:45"><call pos:start="117:17" pos:end="117:45"><name pos:start="117:17" pos:end="117:30">tcp_sockclosed</name><argument_list pos:start="117:31" pos:end="117:45">(<argument pos:start="117:32" pos:end="117:44"><expr pos:start="117:32" pos:end="117:44"><call pos:start="117:32" pos:end="117:44"><name pos:start="117:32" pos:end="117:40">sototcpcb</name><argument_list pos:start="117:41" pos:end="117:44">(<argument pos:start="117:42" pos:end="117:43"><expr pos:start="117:42" pos:end="117:43"><name pos:start="117:42" pos:end="117:43">so</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="119:17" pos:end="119:26">return <expr pos:start="119:24" pos:end="119:25"><operator pos:start="119:24" pos:end="119:24">-</operator><literal type="number" pos:start="119:25" pos:end="119:25">1</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



<cpp:ifndef pos:start="125:1" pos:end="125:18">#<cpp:directive pos:start="125:2" pos:end="125:7">ifndef</cpp:directive> <name pos:start="125:9" pos:end="125:18">HAVE_READV</name></cpp:ifndef>

	<if_stmt pos:start="127:9" pos:end="137:9"><if pos:start="127:9" pos:end="137:9">if <condition pos:start="127:12" pos:end="127:43">(<expr pos:start="127:13" pos:end="127:42"><name pos:start="127:13" pos:end="127:13">n</name> <operator pos:start="127:15" pos:end="127:16">==</operator> <literal type="number" pos:start="127:18" pos:end="127:18">2</literal> <operator pos:start="127:20" pos:end="127:21">&amp;&amp;</operator> <name pos:start="127:23" pos:end="127:24">nn</name> <operator pos:start="127:26" pos:end="127:27">==</operator> <name pos:start="127:29" pos:end="127:34"><name pos:start="127:29" pos:end="127:31">iov</name><index pos:start="127:32" pos:end="127:34">[<expr pos:start="127:33" pos:end="127:33"><literal type="number" pos:start="127:33" pos:end="127:33">0</literal></expr>]</index></name><operator pos:start="127:35" pos:end="127:35">.</operator><name pos:start="127:36" pos:end="127:42">iov_len</name></expr>)</condition> <block pos:start="127:45" pos:end="137:9">{<block_content pos:start="129:13" pos:end="135:26">

            <decl_stmt pos:start="129:13" pos:end="129:20"><decl pos:start="129:13" pos:end="129:19"><type pos:start="129:13" pos:end="129:15"><name pos:start="129:13" pos:end="129:15">int</name></type> <name pos:start="129:17" pos:end="129:19">ret</name></decl>;</decl_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:68"><expr pos:start="131:13" pos:end="131:67"><name pos:start="131:13" pos:end="131:15">ret</name> <operator pos:start="131:17" pos:end="131:17">=</operator> <call pos:start="131:19" pos:end="131:67"><name pos:start="131:19" pos:end="131:28">slirp_send</name><argument_list pos:start="131:29" pos:end="131:67">(<argument pos:start="131:30" pos:end="131:31"><expr pos:start="131:30" pos:end="131:31"><name pos:start="131:30" pos:end="131:31">so</name></expr></argument>, <argument pos:start="131:34" pos:end="131:48"><expr pos:start="131:34" pos:end="131:48"><name pos:start="131:34" pos:end="131:39"><name pos:start="131:34" pos:end="131:36">iov</name><index pos:start="131:37" pos:end="131:39">[<expr pos:start="131:38" pos:end="131:38"><literal type="number" pos:start="131:38" pos:end="131:38">1</literal></expr>]</index></name><operator pos:start="131:40" pos:end="131:40">.</operator><name pos:start="131:41" pos:end="131:48">iov_base</name></expr></argument>, <argument pos:start="131:51" pos:end="131:64"><expr pos:start="131:51" pos:end="131:64"><name pos:start="131:51" pos:end="131:56"><name pos:start="131:51" pos:end="131:53">iov</name><index pos:start="131:54" pos:end="131:56">[<expr pos:start="131:55" pos:end="131:55"><literal type="number" pos:start="131:55" pos:end="131:55">1</literal></expr>]</index></name><operator pos:start="131:57" pos:end="131:57">.</operator><name pos:start="131:58" pos:end="131:64">iov_len</name></expr></argument>,<argument pos:start="131:66" pos:end="131:66"><expr pos:start="131:66" pos:end="131:66"><literal type="number" pos:start="131:66" pos:end="131:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="133:13" pos:end="135:26"><if pos:start="133:13" pos:end="135:26">if <condition pos:start="133:16" pos:end="133:24">(<expr pos:start="133:17" pos:end="133:23"><name pos:start="133:17" pos:end="133:19">ret</name> <operator pos:start="133:21" pos:end="133:21">&gt;</operator> <literal type="number" pos:start="133:23" pos:end="133:23">0</literal></expr>)</condition><block type="pseudo" pos:start="135:17" pos:end="135:26"><block_content pos:start="135:17" pos:end="135:26">

                <expr_stmt pos:start="135:17" pos:end="135:26"><expr pos:start="135:17" pos:end="135:25"><name pos:start="135:17" pos:end="135:18">nn</name> <operator pos:start="135:20" pos:end="135:21">+=</operator> <name pos:start="135:23" pos:end="135:25">ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="139:9" pos:end="142:0"><expr pos:start="139:9" pos:end="139:60"><call pos:start="139:9" pos:end="139:60"><name pos:start="139:9" pos:end="139:18">DEBUG_MISC</name><argument_list pos:start="139:19" pos:end="139:60">(<argument pos:start="139:20" pos:end="139:59"><expr pos:start="139:20" pos:end="139:59"><operator pos:start="139:20" pos:end="139:20">(</operator><name pos:start="139:21" pos:end="139:23">dfd</name><operator pos:start="139:24" pos:end="139:24">,</operator> <literal type="string" pos:start="139:26" pos:end="139:54">"  ... wrote nn = %d bytes\n"</literal><operator pos:start="139:55" pos:end="139:55">,</operator> <name pos:start="139:57" pos:end="139:58">nn</name><operator pos:start="139:59" pos:end="139:59">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="141:1" pos:end="141:6">#<cpp:directive pos:start="141:2" pos:end="141:6">endif</cpp:directive></cpp:endif>



	<comment type="block" pos:start="145:9" pos:end="145:25">/* Update sbuf */</comment>

	<expr_stmt pos:start="147:9" pos:end="147:24"><expr pos:start="147:9" pos:end="147:23"><name pos:start="147:9" pos:end="147:17"><name pos:start="147:9" pos:end="147:10">sb</name><operator pos:start="147:11" pos:end="147:12">-&gt;</operator><name pos:start="147:13" pos:end="147:17">sb_cc</name></name> <operator pos:start="147:19" pos:end="147:20">-=</operator> <name pos:start="147:22" pos:end="147:23">nn</name></expr>;</expr_stmt>

	<expr_stmt pos:start="149:9" pos:end="149:26"><expr pos:start="149:9" pos:end="149:25"><name pos:start="149:9" pos:end="149:19"><name pos:start="149:9" pos:end="149:10">sb</name><operator pos:start="149:11" pos:end="149:12">-&gt;</operator><name pos:start="149:13" pos:end="149:19">sb_rptr</name></name> <operator pos:start="149:21" pos:end="149:22">+=</operator> <name pos:start="149:24" pos:end="149:25">nn</name></expr>;</expr_stmt>

	<if_stmt pos:start="151:9" pos:end="153:46"><if pos:start="151:9" pos:end="153:46">if <condition pos:start="151:12" pos:end="151:58">(<expr pos:start="151:13" pos:end="151:57"><name pos:start="151:13" pos:end="151:23"><name pos:start="151:13" pos:end="151:14">sb</name><operator pos:start="151:15" pos:end="151:16">-&gt;</operator><name pos:start="151:17" pos:end="151:23">sb_rptr</name></name> <operator pos:start="151:25" pos:end="151:26">&gt;=</operator> <operator pos:start="151:28" pos:end="151:28">(</operator><name pos:start="151:29" pos:end="151:39"><name pos:start="151:29" pos:end="151:30">sb</name><operator pos:start="151:31" pos:end="151:32">-&gt;</operator><name pos:start="151:33" pos:end="151:39">sb_data</name></name> <operator pos:start="151:41" pos:end="151:41">+</operator> <name pos:start="151:43" pos:end="151:56"><name pos:start="151:43" pos:end="151:44">sb</name><operator pos:start="151:45" pos:end="151:46">-&gt;</operator><name pos:start="151:47" pos:end="151:56">sb_datalen</name></name><operator pos:start="151:57" pos:end="151:57">)</operator></expr>)</condition><block type="pseudo" pos:start="153:17" pos:end="153:46"><block_content pos:start="153:17" pos:end="153:46">

		<expr_stmt pos:start="153:17" pos:end="153:46"><expr pos:start="153:17" pos:end="153:45"><name pos:start="153:17" pos:end="153:27"><name pos:start="153:17" pos:end="153:18">sb</name><operator pos:start="153:19" pos:end="153:20">-&gt;</operator><name pos:start="153:21" pos:end="153:27">sb_rptr</name></name> <operator pos:start="153:29" pos:end="153:30">-=</operator> <name pos:start="153:32" pos:end="153:45"><name pos:start="153:32" pos:end="153:33">sb</name><operator pos:start="153:34" pos:end="153:35">-&gt;</operator><name pos:start="153:36" pos:end="153:45">sb_datalen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<comment type="block" pos:start="157:9" pos:end="163:11">/*

	 * If in DRAIN mode, and there's no more data, set

	 * it CANTSENDMORE

	 */</comment>

	<if_stmt pos:start="165:9" pos:end="167:36"><if pos:start="165:9" pos:end="167:36">if <condition pos:start="165:12" pos:end="165:58">(<expr pos:start="165:13" pos:end="165:57"><operator pos:start="165:13" pos:end="165:13">(</operator><name pos:start="165:14" pos:end="165:25"><name pos:start="165:14" pos:end="165:15">so</name><operator pos:start="165:16" pos:end="165:17">-&gt;</operator><name pos:start="165:18" pos:end="165:25">so_state</name></name> <operator pos:start="165:27" pos:end="165:27">&amp;</operator> <name pos:start="165:29" pos:end="165:38">SS_FWDRAIN</name><operator pos:start="165:39" pos:end="165:39">)</operator> <operator pos:start="165:41" pos:end="165:42">&amp;&amp;</operator> <name pos:start="165:44" pos:end="165:52"><name pos:start="165:44" pos:end="165:45">sb</name><operator pos:start="165:46" pos:end="165:47">-&gt;</operator><name pos:start="165:48" pos:end="165:52">sb_cc</name></name> <operator pos:start="165:54" pos:end="165:55">==</operator> <literal type="number" pos:start="165:57" pos:end="165:57">0</literal></expr>)</condition><block type="pseudo" pos:start="167:17" pos:end="167:36"><block_content pos:start="167:17" pos:end="167:36">

		<expr_stmt pos:start="167:17" pos:end="167:36"><expr pos:start="167:17" pos:end="167:35"><call pos:start="167:17" pos:end="167:35"><name pos:start="167:17" pos:end="167:31">sofcantsendmore</name><argument_list pos:start="167:32" pos:end="167:35">(<argument pos:start="167:33" pos:end="167:34"><expr pos:start="167:33" pos:end="167:34"><name pos:start="167:33" pos:end="167:34">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<return pos:start="171:9" pos:end="171:18">return <expr pos:start="171:16" pos:end="171:17"><name pos:start="171:16" pos:end="171:17">nn</name></expr>;</return>

</block_content>}</block>
</unit>
