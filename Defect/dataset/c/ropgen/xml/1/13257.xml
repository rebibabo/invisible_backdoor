<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13257.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:34">arm_cpu_do_transaction_failed</name><parameter_list pos:start="1:35" pos:end="9:75">(<parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:47"><name pos:start="1:36" pos:end="1:43">CPUState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">cs</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:64"><decl pos:start="1:50" pos:end="1:64"><type pos:start="1:50" pos:end="1:64"><name pos:start="1:50" pos:end="1:55">hwaddr</name></type> <name pos:start="1:57" pos:end="1:64">physaddr</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:45"><decl pos:start="3:36" pos:end="3:45"><type pos:start="3:36" pos:end="3:45"><name pos:start="3:36" pos:end="3:40">vaddr</name></type> <name pos:start="3:42" pos:end="3:45">addr</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:60"><decl pos:start="3:48" pos:end="3:60"><type pos:start="3:48" pos:end="3:60"><name pos:start="3:48" pos:end="3:55">unsigned</name></type> <name pos:start="3:57" pos:end="3:60">size</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:60"><decl pos:start="5:36" pos:end="5:60"><type pos:start="5:36" pos:end="5:60"><name pos:start="5:36" pos:end="5:48">MMUAccessType</name></type> <name pos:start="5:50" pos:end="5:60">access_type</name></decl></parameter>,

                                   <parameter pos:start="7:36" pos:end="7:46"><decl pos:start="7:36" pos:end="7:46"><type pos:start="7:36" pos:end="7:46"><name pos:start="7:36" pos:end="7:38">int</name></type> <name pos:start="7:40" pos:end="7:46">mmu_idx</name></decl></parameter>, <parameter pos:start="7:49" pos:end="7:64"><decl pos:start="7:49" pos:end="7:64"><type pos:start="7:49" pos:end="7:64"><name pos:start="7:49" pos:end="7:58">MemTxAttrs</name></type> <name pos:start="7:60" pos:end="7:64">attrs</name></decl></parameter>,

                                   <parameter pos:start="9:36" pos:end="9:55"><decl pos:start="9:36" pos:end="9:55"><type pos:start="9:36" pos:end="9:55"><name pos:start="9:36" pos:end="9:46">MemTxResult</name></type> <name pos:start="9:48" pos:end="9:55">response</name></decl></parameter>, <parameter pos:start="9:58" pos:end="9:74"><decl pos:start="9:58" pos:end="9:74"><type pos:start="9:58" pos:end="9:74"><name pos:start="9:58" pos:end="9:66">uintptr_t</name></type> <name pos:start="9:68" pos:end="9:74">retaddr</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="41:1">{<block_content pos:start="13:5" pos:end="39:56">

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:10">ARMCPU</name> <modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:15">cpu</name> <init pos:start="13:17" pos:end="13:29">= <expr pos:start="13:19" pos:end="13:29"><call pos:start="13:19" pos:end="13:29"><name pos:start="13:19" pos:end="13:25">ARM_CPU</name><argument_list pos:start="13:26" pos:end="13:29">(<argument pos:start="13:27" pos:end="13:28"><expr pos:start="13:27" pos:end="13:28"><name pos:start="13:27" pos:end="13:28">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:19">ARMMMUFaultInfo</name></type> <name pos:start="15:21" pos:end="15:22">fi</name> <init pos:start="15:24" pos:end="15:27">= <expr pos:start="15:26" pos:end="15:27"><block pos:start="15:26" pos:end="15:27">{}</block></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:38">/* now we have a real cpu fault */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:35"><expr pos:start="21:5" pos:end="21:34"><call pos:start="21:5" pos:end="21:34"><name pos:start="21:5" pos:end="21:21">cpu_restore_state</name><argument_list pos:start="21:22" pos:end="21:34">(<argument pos:start="21:23" pos:end="21:24"><expr pos:start="21:23" pos:end="21:24"><name pos:start="21:23" pos:end="21:24">cs</name></expr></argument>, <argument pos:start="21:27" pos:end="21:33"><expr pos:start="21:27" pos:end="21:33"><name pos:start="21:27" pos:end="21:33">retaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="33:7">/* The EA bit in syndromes and fault status registers is an

     * IMPDEF classification of external aborts. ARM implementations

     * usually use this to indicate AXI bus Decode error (0) or

     * Slave error (1); in QEMU we follow that.

     */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:45"><expr pos:start="35:5" pos:end="35:44"><name pos:start="35:5" pos:end="35:9"><name pos:start="35:5" pos:end="35:6">fi</name><operator pos:start="35:7" pos:end="35:7">.</operator><name pos:start="35:8" pos:end="35:9">ea</name></name> <operator pos:start="35:11" pos:end="35:11">=</operator> <operator pos:start="35:13" pos:end="35:13">(</operator><name pos:start="35:14" pos:end="35:21">response</name> <operator pos:start="35:23" pos:end="35:24">!=</operator> <name pos:start="35:26" pos:end="35:43">MEMTX_DECODE_ERROR</name><operator pos:start="35:44" pos:end="35:44">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:36"><expr pos:start="37:5" pos:end="37:35"><name pos:start="37:5" pos:end="37:11"><name pos:start="37:5" pos:end="37:6">fi</name><operator pos:start="37:7" pos:end="37:7">.</operator><name pos:start="37:8" pos:end="37:11">type</name></name> <operator pos:start="37:13" pos:end="37:13">=</operator> <name pos:start="37:15" pos:end="37:35">ARMFault_SyncExternal</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:56"><expr pos:start="39:5" pos:end="39:55"><call pos:start="39:5" pos:end="39:55"><name pos:start="39:5" pos:end="39:17">deliver_fault</name><argument_list pos:start="39:18" pos:end="39:55">(<argument pos:start="39:19" pos:end="39:21"><expr pos:start="39:19" pos:end="39:21"><name pos:start="39:19" pos:end="39:21">cpu</name></expr></argument>, <argument pos:start="39:24" pos:end="39:27"><expr pos:start="39:24" pos:end="39:27"><name pos:start="39:24" pos:end="39:27">addr</name></expr></argument>, <argument pos:start="39:30" pos:end="39:40"><expr pos:start="39:30" pos:end="39:40"><name pos:start="39:30" pos:end="39:40">access_type</name></expr></argument>, <argument pos:start="39:43" pos:end="39:49"><expr pos:start="39:43" pos:end="39:49"><name pos:start="39:43" pos:end="39:49">mmu_idx</name></expr></argument>, <argument pos:start="39:52" pos:end="39:54"><expr pos:start="39:52" pos:end="39:54"><operator pos:start="39:52" pos:end="39:52">&amp;</operator><name pos:start="39:53" pos:end="39:54">fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
