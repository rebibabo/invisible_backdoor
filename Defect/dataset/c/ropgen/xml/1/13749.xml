<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13749.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:21"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">load_linux</name><parameter_list pos:start="1:23" pos:end="5:55">(<parameter pos:start="1:24" pos:end="1:35"><decl pos:start="1:24" pos:end="1:35"><type pos:start="1:24" pos:end="1:35"><name pos:start="1:24" pos:end="1:27">void</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:35">fw_cfg</name></decl></parameter>,
                       <parameter pos:start="2:24" pos:end="2:50"><decl pos:start="2:24" pos:end="2:50"><type pos:start="2:24" pos:end="2:50"><specifier pos:start="2:24" pos:end="2:28">const</specifier> <name pos:start="2:30" pos:end="2:33">char</name> <modifier pos:start="2:35" pos:end="2:35">*</modifier></type><name pos:start="2:36" pos:end="2:50">kernel_filename</name></decl></parameter>,
		       <parameter pos:start="3:24" pos:end="3:50"><decl pos:start="3:24" pos:end="3:50"><type pos:start="3:24" pos:end="3:50"><specifier pos:start="3:24" pos:end="3:28">const</specifier> <name pos:start="3:30" pos:end="3:33">char</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:50">initrd_filename</name></decl></parameter>,
		       <parameter pos:start="4:24" pos:end="4:49"><decl pos:start="4:24" pos:end="4:49"><type pos:start="4:24" pos:end="4:49"><specifier pos:start="4:24" pos:end="4:28">const</specifier> <name pos:start="4:30" pos:end="4:33">char</name> <modifier pos:start="4:35" pos:end="4:35">*</modifier></type><name pos:start="4:36" pos:end="4:49">kernel_cmdline</name></decl></parameter>,
                       <parameter pos:start="5:24" pos:end="5:54"><decl pos:start="5:24" pos:end="5:54"><type pos:start="5:24" pos:end="5:54"><name pos:start="5:24" pos:end="5:41">target_phys_addr_t</name></type> <name pos:start="5:43" pos:end="5:54">max_ram_size</name></decl></parameter>)</parameter_list>
<block pos:start="6:1" pos:end="137:21">{<block_content pos:start="7:5" pos:end="137:21">
    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint16_t</name></type> <name pos:start="7:14" pos:end="7:21">protocol</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:63"><decl pos:start="8:5" pos:end="8:18"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:18">setup_size</name></decl>, <decl pos:start="8:21" pos:end="8:31"><type ref="prev" pos:start="8:5" pos:end="8:7"/><name pos:start="8:21" pos:end="8:31">kernel_size</name></decl>, <decl pos:start="8:34" pos:end="8:48"><type ref="prev" pos:start="8:5" pos:end="8:7"/><name pos:start="8:34" pos:end="8:44">initrd_size</name> <init pos:start="8:46" pos:end="8:48">= <expr pos:start="8:48" pos:end="8:48"><literal type="number" pos:start="8:48" pos:end="8:48">0</literal></expr></init></decl>, <decl pos:start="8:51" pos:end="8:62"><type ref="prev" pos:start="8:5" pos:end="8:7"/><name pos:start="8:51" pos:end="8:62">cmdline_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:23">initrd_max</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:56"><decl pos:start="10:5" pos:end="10:24"><type pos:start="10:5" pos:end="10:11"><name pos:start="10:5" pos:end="10:11">uint8_t</name></type> <name pos:start="10:13" pos:end="10:24"><name pos:start="10:13" pos:end="10:18">header</name><index pos:start="10:19" pos:end="10:24">[<expr pos:start="10:20" pos:end="10:23"><literal type="number" pos:start="10:20" pos:end="10:23">8192</literal></expr>]</index></name></decl>, <decl pos:start="10:27" pos:end="10:32"><type ref="prev" pos:start="10:5" pos:end="10:11"><modifier pos:start="10:27" pos:end="10:27">*</modifier></type><name pos:start="10:28" pos:end="10:32">setup</name></decl>, <decl pos:start="10:35" pos:end="10:41"><type ref="prev" pos:start="10:5" pos:end="10:11"><modifier pos:start="10:35" pos:end="10:35">*</modifier></type><name pos:start="10:36" pos:end="10:41">kernel</name></decl>, <decl pos:start="10:44" pos:end="10:55"><type ref="prev" pos:start="10:5" pos:end="10:11"><modifier pos:start="10:44" pos:end="10:44">*</modifier></type><name pos:start="10:45" pos:end="10:55">initrd_data</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:75"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:22">target_phys_addr_t</name></type> <name pos:start="11:24" pos:end="11:32">real_addr</name></decl>, <decl pos:start="11:35" pos:end="11:43"><type ref="prev" pos:start="11:5" pos:end="11:22"/><name pos:start="11:35" pos:end="11:43">prot_addr</name></decl>, <decl pos:start="11:46" pos:end="11:57"><type ref="prev" pos:start="11:5" pos:end="11:22"/><name pos:start="11:46" pos:end="11:57">cmdline_addr</name></decl>, <decl pos:start="11:60" pos:end="11:74"><type ref="prev" pos:start="11:5" pos:end="11:22"/><name pos:start="11:60" pos:end="11:70">initrd_addr</name> <init pos:start="11:72" pos:end="11:74">= <expr pos:start="11:74" pos:end="11:74"><literal type="number" pos:start="11:74" pos:end="11:74">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:12"><decl pos:start="12:5" pos:end="12:11"><type pos:start="12:5" pos:end="12:10"><name pos:start="12:5" pos:end="12:8">FILE</name> <modifier pos:start="12:10" pos:end="12:10">*</modifier></type><name pos:start="12:11" pos:end="12:11">f</name></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:15">vmode</name></decl>;</decl_stmt>
    <comment type="block" pos:start="14:5" pos:end="14:49">/* Align to 16 bytes as a paranoia measure */</comment>
    <expr_stmt pos:start="15:5" pos:end="15:53"><expr pos:start="15:5" pos:end="15:52"><name pos:start="15:5" pos:end="15:16">cmdline_size</name> <operator pos:start="15:18" pos:end="15:18">=</operator> <operator pos:start="15:20" pos:end="15:20">(</operator><call pos:start="15:21" pos:end="15:42"><name pos:start="15:21" pos:end="15:26">strlen</name><argument_list pos:start="15:27" pos:end="15:42">(<argument pos:start="15:28" pos:end="15:41"><expr pos:start="15:28" pos:end="15:41"><name pos:start="15:28" pos:end="15:41">kernel_cmdline</name></expr></argument>)</argument_list></call><operator pos:start="15:43" pos:end="15:43">+</operator><literal type="number" pos:start="15:44" pos:end="15:45">16</literal><operator pos:start="15:46" pos:end="15:46">)</operator> <operator pos:start="15:48" pos:end="15:48">&amp;</operator> <operator pos:start="15:50" pos:end="15:50">~</operator><literal type="number" pos:start="15:51" pos:end="15:52">15</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="16:5" pos:end="16:32">/* load the kernel header */</comment>
    <expr_stmt pos:start="17:5" pos:end="17:37"><expr pos:start="17:5" pos:end="17:36"><name pos:start="17:5" pos:end="17:5">f</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <call pos:start="17:9" pos:end="17:36"><name pos:start="17:9" pos:end="17:13">fopen</name><argument_list pos:start="17:14" pos:end="17:36">(<argument pos:start="17:15" pos:end="17:29"><expr pos:start="17:15" pos:end="17:29"><name pos:start="17:15" pos:end="17:29">kernel_filename</name></expr></argument>, <argument pos:start="17:32" pos:end="17:35"><expr pos:start="17:32" pos:end="17:35"><literal type="string" pos:start="17:32" pos:end="17:35">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="18:5" pos:end="137:21"><if pos:start="18:5" pos:end="137:21">if <condition pos:start="18:8" pos:end="20:45">(<expr pos:start="18:9" pos:end="20:44"><operator pos:start="18:9" pos:end="18:9">!</operator><name pos:start="18:10" pos:end="18:10">f</name> <operator pos:start="18:12" pos:end="18:13">||</operator> <operator pos:start="18:15" pos:end="18:15">!</operator><operator pos:start="18:16" pos:end="18:16">(</operator><name pos:start="18:17" pos:end="18:27">kernel_size</name> <operator pos:start="18:29" pos:end="18:29">=</operator> <call pos:start="18:31" pos:end="18:46"><name pos:start="18:31" pos:end="18:43">get_file_size</name><argument_list pos:start="18:44" pos:end="18:46">(<argument pos:start="18:45" pos:end="18:45"><expr pos:start="18:45" pos:end="18:45"><name pos:start="18:45" pos:end="18:45">f</name></expr></argument>)</argument_list></call><operator pos:start="18:47" pos:end="18:47">)</operator> <operator pos:start="18:49" pos:end="18:50">||</operator>
	<call pos:start="19:9" pos:end="19:65"><name pos:start="19:9" pos:end="19:13">fread</name><argument_list pos:start="19:14" pos:end="19:65">(<argument pos:start="19:15" pos:end="19:20"><expr pos:start="19:15" pos:end="19:20"><name pos:start="19:15" pos:end="19:20">header</name></expr></argument>, <argument pos:start="19:23" pos:end="19:23"><expr pos:start="19:23" pos:end="19:23"><literal type="number" pos:start="19:23" pos:end="19:23">1</literal></expr></argument>, <argument pos:start="19:26" pos:end="19:61"><expr pos:start="19:26" pos:end="19:61"><call pos:start="19:26" pos:end="19:61"><name pos:start="19:26" pos:end="19:28">MIN</name><argument_list pos:start="19:29" pos:end="19:61">(<argument pos:start="19:30" pos:end="19:47"><expr pos:start="19:30" pos:end="19:47"><call pos:start="19:30" pos:end="19:47"><name pos:start="19:30" pos:end="19:39">ARRAY_SIZE</name><argument_list pos:start="19:40" pos:end="19:47">(<argument pos:start="19:41" pos:end="19:46"><expr pos:start="19:41" pos:end="19:46"><name pos:start="19:41" pos:end="19:46">header</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="19:50" pos:end="19:60"><expr pos:start="19:50" pos:end="19:60"><name pos:start="19:50" pos:end="19:60">kernel_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="19:64" pos:end="19:64"><expr pos:start="19:64" pos:end="19:64"><name pos:start="19:64" pos:end="19:64">f</name></expr></argument>)</argument_list></call> <operator pos:start="19:67" pos:end="19:68">!=</operator>
	<call pos:start="20:9" pos:end="20:44"><name pos:start="20:9" pos:end="20:11">MIN</name><argument_list pos:start="20:12" pos:end="20:44">(<argument pos:start="20:13" pos:end="20:30"><expr pos:start="20:13" pos:end="20:30"><call pos:start="20:13" pos:end="20:30"><name pos:start="20:13" pos:end="20:22">ARRAY_SIZE</name><argument_list pos:start="20:23" pos:end="20:30">(<argument pos:start="20:24" pos:end="20:29"><expr pos:start="20:24" pos:end="20:29"><name pos:start="20:24" pos:end="20:29">header</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="20:33" pos:end="20:43"><expr pos:start="20:33" pos:end="20:43"><name pos:start="20:33" pos:end="20:43">kernel_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="20:47" pos:end="137:21">{<block_content pos:start="21:9" pos:end="137:21">
	<expr_stmt pos:start="21:9" pos:end="27:0"><expr pos:start="21:9" pos:end="22:49"><call pos:start="21:9" pos:end="22:49"><name pos:start="21:9" pos:end="21:15">fprintf</name><argument_list pos:start="21:16" pos:end="22:49">(<argument pos:start="21:17" pos:end="21:22"><expr pos:start="21:17" pos:end="21:22"><name pos:start="21:17" pos:end="21:22">stderr</name></expr></argument>, <argument pos:start="21:25" pos:end="21:64"><expr pos:start="21:25" pos:end="21:64"><literal type="string" pos:start="21:25" pos:end="21:64">"qemu: could not load kernel '%s': %s\n"</literal></expr></argument>,
		<argument pos:start="22:17" pos:end="22:31"><expr pos:start="22:17" pos:end="22:31"><name pos:start="22:17" pos:end="22:31">kernel_filename</name></expr></argument>, <argument pos:start="22:34" pos:end="22:48"><expr pos:start="22:34" pos:end="22:48"><call pos:start="22:34" pos:end="22:48"><name pos:start="22:34" pos:end="22:41">strerror</name><argument_list pos:start="22:42" pos:end="22:48">(<argument pos:start="22:43" pos:end="22:47"><expr pos:start="22:43" pos:end="22:47"><name pos:start="22:43" pos:end="22:47">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="23:5" pos:end="23:33">/* kernel protocol version */</comment>
<cpp:if pos:start="24:1" pos:end="24:5">#<cpp:directive pos:start="24:2" pos:end="24:3">if</cpp:directive> <expr pos:start="24:5" pos:end="24:5"><literal type="number" pos:start="24:5" pos:end="24:5">0</literal></expr></cpp:if>
    fprintf(stderr, "header magic: %#x\n", ldl_p(header+0x202));
<cpp:endif pos:start="26:1" pos:end="26:6">#<cpp:directive pos:start="26:2" pos:end="26:6">endif</cpp:directive></cpp:endif>
    <if_stmt pos:start="27:5" pos:end="137:21"><if pos:start="27:5" pos:end="28:40">if <condition pos:start="27:8" pos:end="27:42">(<expr pos:start="27:9" pos:end="27:41"><call pos:start="27:9" pos:end="27:27"><name pos:start="27:9" pos:end="27:13">ldl_p</name><argument_list pos:start="27:14" pos:end="27:27">(<argument pos:start="27:15" pos:end="27:26"><expr pos:start="27:15" pos:end="27:26"><name pos:start="27:15" pos:end="27:20">header</name><operator pos:start="27:21" pos:end="27:21">+</operator><literal type="number" pos:start="27:22" pos:end="27:26">0x202</literal></expr></argument>)</argument_list></call> <operator pos:start="27:29" pos:end="27:30">==</operator> <literal type="number" pos:start="27:32" pos:end="27:41">0x53726448</literal></expr>)</condition><block type="pseudo" pos:start="28:9" pos:end="28:40"><block_content pos:start="28:9" pos:end="28:40">
	<expr_stmt pos:start="28:9" pos:end="28:40"><expr pos:start="28:9" pos:end="28:39"><name pos:start="28:9" pos:end="28:16">protocol</name> <operator pos:start="28:18" pos:end="28:18">=</operator> <call pos:start="28:20" pos:end="28:39"><name pos:start="28:20" pos:end="28:25">lduw_p</name><argument_list pos:start="28:26" pos:end="28:39">(<argument pos:start="28:27" pos:end="28:38"><expr pos:start="28:27" pos:end="28:38"><name pos:start="28:27" pos:end="28:32">header</name><operator pos:start="28:33" pos:end="28:33">+</operator><literal type="number" pos:start="28:34" pos:end="28:38">0x206</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="29:5" pos:end="137:21">else <block pos:start="29:10" pos:end="137:21">{<block_content pos:start="32:9" pos:end="137:21">
	<comment type="block" pos:start="30:9" pos:end="31:46">/* This looks like a multiboot kernel. If it is, let's stop
	   treating it like a Linux kernel. */</comment>
        <if_stmt pos:start="32:9" pos:end="34:19"><if pos:start="32:9" pos:end="34:19">if <condition pos:start="32:12" pos:end="33:64">(<expr pos:start="32:13" pos:end="33:63"><call pos:start="32:13" pos:end="33:63"><name pos:start="32:13" pos:end="32:26">load_multiboot</name><argument_list pos:start="32:27" pos:end="33:63">(<argument pos:start="32:28" pos:end="32:33"><expr pos:start="32:28" pos:end="32:33"><name pos:start="32:28" pos:end="32:33">fw_cfg</name></expr></argument>, <argument pos:start="32:36" pos:end="32:36"><expr pos:start="32:36" pos:end="32:36"><name pos:start="32:36" pos:end="32:36">f</name></expr></argument>, <argument pos:start="32:39" pos:end="32:53"><expr pos:start="32:39" pos:end="32:53"><name pos:start="32:39" pos:end="32:53">kernel_filename</name></expr></argument>, <argument pos:start="32:56" pos:end="32:70"><expr pos:start="32:56" pos:end="32:70"><name pos:start="32:56" pos:end="32:70">initrd_filename</name></expr></argument>,
                           <argument pos:start="33:28" pos:end="33:41"><expr pos:start="33:28" pos:end="33:41"><name pos:start="33:28" pos:end="33:41">kernel_cmdline</name></expr></argument>, <argument pos:start="33:44" pos:end="33:54"><expr pos:start="33:44" pos:end="33:54"><name pos:start="33:44" pos:end="33:54">kernel_size</name></expr></argument>, <argument pos:start="33:57" pos:end="33:62"><expr pos:start="33:57" pos:end="33:62"><name pos:start="33:57" pos:end="33:62">header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="34:13" pos:end="34:19"><block_content pos:start="34:13" pos:end="34:19">
            <return pos:start="34:13" pos:end="34:19">return;</return></block_content></block></if></if_stmt>
	<expr_stmt pos:start="35:9" pos:end="35:21"><expr pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:16">protocol</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <literal type="number" pos:start="35:20" pos:end="35:20">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="36:5" pos:end="137:21"><if pos:start="36:5" pos:end="41:5">if <condition pos:start="36:8" pos:end="36:52">(<expr pos:start="36:9" pos:end="36:51"><name pos:start="36:9" pos:end="36:16">protocol</name> <operator pos:start="36:18" pos:end="36:18">&lt;</operator> <literal type="number" pos:start="36:20" pos:end="36:24">0x200</literal> <operator pos:start="36:26" pos:end="36:27">||</operator> <operator pos:start="36:29" pos:end="36:29">!</operator><operator pos:start="36:30" pos:end="36:30">(</operator><name pos:start="36:31" pos:end="36:43"><name pos:start="36:31" pos:end="36:36">header</name><index pos:start="36:37" pos:end="36:43">[<expr pos:start="36:38" pos:end="36:42"><literal type="number" pos:start="36:38" pos:end="36:42">0x211</literal></expr>]</index></name> <operator pos:start="36:45" pos:end="36:45">&amp;</operator> <literal type="number" pos:start="36:47" pos:end="36:50">0x01</literal><operator pos:start="36:51" pos:end="36:51">)</operator></expr>)</condition> <block pos:start="36:54" pos:end="41:5">{<block_content pos:start="38:9" pos:end="40:31">
	<comment type="block" pos:start="37:9" pos:end="37:24">/* Low kernel */</comment>
	<expr_stmt pos:start="38:9" pos:end="38:31"><expr pos:start="38:9" pos:end="38:30"><name pos:start="38:9" pos:end="38:17">real_addr</name>    <operator pos:start="38:22" pos:end="38:22">=</operator> <literal type="number" pos:start="38:24" pos:end="38:30">0x90000</literal></expr>;</expr_stmt>
	<expr_stmt pos:start="39:9" pos:end="39:46"><expr pos:start="39:9" pos:end="39:45"><name pos:start="39:9" pos:end="39:20">cmdline_addr</name> <operator pos:start="39:22" pos:end="39:22">=</operator> <literal type="number" pos:start="39:24" pos:end="39:32">0x9a000</literal> <operator pos:start="39:32" pos:end="39:32">-</operator> <name pos:start="39:34" pos:end="39:45">cmdline_size</name></expr>;</expr_stmt>
	<expr_stmt pos:start="40:9" pos:end="40:31"><expr pos:start="40:9" pos:end="40:30"><name pos:start="40:9" pos:end="40:17">prot_addr</name>    <operator pos:start="40:22" pos:end="40:22">=</operator> <literal type="number" pos:start="40:24" pos:end="40:30">0x10000</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="41:7" pos:end="46:5">else if <condition pos:start="41:15" pos:end="41:32">(<expr pos:start="41:16" pos:end="41:31"><name pos:start="41:16" pos:end="41:23">protocol</name> <operator pos:start="41:25" pos:end="41:25">&lt;</operator> <literal type="number" pos:start="41:27" pos:end="41:31">0x202</literal></expr>)</condition> <block pos:start="41:34" pos:end="46:5">{<block_content pos:start="43:9" pos:end="45:32">
	<comment type="block" pos:start="42:9" pos:end="42:37">/* High but ancient kernel */</comment>
	<expr_stmt pos:start="43:9" pos:end="43:31"><expr pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:17">real_addr</name>    <operator pos:start="43:22" pos:end="43:22">=</operator> <literal type="number" pos:start="43:24" pos:end="43:30">0x90000</literal></expr>;</expr_stmt>
	<expr_stmt pos:start="44:9" pos:end="44:46"><expr pos:start="44:9" pos:end="44:45"><name pos:start="44:9" pos:end="44:20">cmdline_addr</name> <operator pos:start="44:22" pos:end="44:22">=</operator> <literal type="number" pos:start="44:24" pos:end="44:32">0x9a000</literal> <operator pos:start="44:32" pos:end="44:32">-</operator> <name pos:start="44:34" pos:end="44:45">cmdline_size</name></expr>;</expr_stmt>
	<expr_stmt pos:start="45:9" pos:end="45:32"><expr pos:start="45:9" pos:end="45:31"><name pos:start="45:9" pos:end="45:17">prot_addr</name>    <operator pos:start="45:22" pos:end="45:22">=</operator> <literal type="number" pos:start="45:24" pos:end="45:31">0x100000</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="46:7" pos:end="137:21">else <block pos:start="46:12" pos:end="137:21">{<block_content pos:start="48:9" pos:end="137:21">
	<comment type="block" pos:start="47:9" pos:end="47:36">/* High and recent kernel */</comment>
	<expr_stmt pos:start="48:9" pos:end="48:31"><expr pos:start="48:9" pos:end="48:30"><name pos:start="48:9" pos:end="48:17">real_addr</name>    <operator pos:start="48:22" pos:end="48:22">=</operator> <literal type="number" pos:start="48:24" pos:end="48:30">0x10000</literal></expr>;</expr_stmt>
	<expr_stmt pos:start="49:9" pos:end="49:31"><expr pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:20">cmdline_addr</name> <operator pos:start="49:22" pos:end="49:22">=</operator> <literal type="number" pos:start="49:24" pos:end="49:30">0x20000</literal></expr>;</expr_stmt>
	<expr_stmt pos:start="50:9" pos:end="60:0"><expr pos:start="50:9" pos:end="50:31"><name pos:start="50:9" pos:end="50:17">prot_addr</name>    <operator pos:start="50:22" pos:end="50:22">=</operator> <literal type="number" pos:start="50:24" pos:end="50:31">0x100000</literal></expr>;</expr_stmt>
<cpp:if pos:start="51:1" pos:end="51:5">#<cpp:directive pos:start="51:2" pos:end="51:3">if</cpp:directive> <expr pos:start="51:5" pos:end="51:5"><literal type="number" pos:start="51:5" pos:end="51:5">0</literal></expr></cpp:if>
    fprintf(stderr,
	    "qemu: real_addr     = 0x" TARGET_FMT_plx "\n"
	    "qemu: cmdline_addr  = 0x" TARGET_FMT_plx "\n"
	    "qemu: prot_addr     = 0x" TARGET_FMT_plx "\n",
	    real_addr,
	    cmdline_addr,
	    prot_addr);
<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>
    <comment type="block" pos:start="60:5" pos:end="60:48">/* highest address for loading the initrd */</comment>
    <if_stmt pos:start="61:5" pos:end="64:32"><if pos:start="61:5" pos:end="62:41">if <condition pos:start="61:8" pos:end="61:26">(<expr pos:start="61:9" pos:end="61:25"><name pos:start="61:9" pos:end="61:16">protocol</name> <operator pos:start="61:18" pos:end="61:19">&gt;=</operator> <literal type="number" pos:start="61:21" pos:end="61:25">0x203</literal></expr>)</condition><block type="pseudo" pos:start="62:9" pos:end="62:41"><block_content pos:start="62:9" pos:end="62:41">
	<expr_stmt pos:start="62:9" pos:end="62:41"><expr pos:start="62:9" pos:end="62:40"><name pos:start="62:9" pos:end="62:18">initrd_max</name> <operator pos:start="62:20" pos:end="62:20">=</operator> <call pos:start="62:22" pos:end="62:40"><name pos:start="62:22" pos:end="62:26">ldl_p</name><argument_list pos:start="62:27" pos:end="62:40">(<argument pos:start="62:28" pos:end="62:39"><expr pos:start="62:28" pos:end="62:39"><name pos:start="62:28" pos:end="62:33">header</name><operator pos:start="62:34" pos:end="62:34">+</operator><literal type="number" pos:start="62:35" pos:end="62:39">0x22c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="63:5" pos:end="64:32">else<block type="pseudo" pos:start="64:9" pos:end="64:32"><block_content pos:start="64:9" pos:end="64:32">
	<expr_stmt pos:start="64:9" pos:end="64:32"><expr pos:start="64:9" pos:end="64:31"><name pos:start="64:9" pos:end="64:18">initrd_max</name> <operator pos:start="64:20" pos:end="64:20">=</operator> <literal type="number" pos:start="64:22" pos:end="64:31">0x37ffffff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <if_stmt pos:start="65:5" pos:end="66:51"><if pos:start="65:5" pos:end="66:51">if <condition pos:start="65:8" pos:end="65:50">(<expr pos:start="65:9" pos:end="65:49"><name pos:start="65:9" pos:end="65:18">initrd_max</name> <operator pos:start="65:20" pos:end="65:21">&gt;=</operator> <name pos:start="65:23" pos:end="65:34">max_ram_size</name><operator pos:start="65:35" pos:end="65:35">-</operator><name pos:start="65:36" pos:end="65:49">ACPI_DATA_SIZE</name></expr>)</condition><block type="pseudo" pos:start="66:9" pos:end="66:51"><block_content pos:start="66:9" pos:end="66:51">
    	<expr_stmt pos:start="66:9" pos:end="66:51"><expr pos:start="66:9" pos:end="66:50"><name pos:start="66:9" pos:end="66:18">initrd_max</name> <operator pos:start="66:20" pos:end="66:20">=</operator> <name pos:start="66:22" pos:end="66:33">max_ram_size</name><operator pos:start="66:34" pos:end="66:34">-</operator><name pos:start="66:35" pos:end="66:48">ACPI_DATA_SIZE</name><operator pos:start="66:49" pos:end="66:49">-</operator><literal type="number" pos:start="66:50" pos:end="66:50">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="67:5" pos:end="67:62"><expr pos:start="67:5" pos:end="67:61"><call pos:start="67:5" pos:end="67:61"><name pos:start="67:5" pos:end="67:18">fw_cfg_add_i32</name><argument_list pos:start="67:19" pos:end="67:61">(<argument pos:start="67:20" pos:end="67:25"><expr pos:start="67:20" pos:end="67:25"><name pos:start="67:20" pos:end="67:25">fw_cfg</name></expr></argument>, <argument pos:start="67:28" pos:end="67:46"><expr pos:start="67:28" pos:end="67:46"><name pos:start="67:28" pos:end="67:46">FW_CFG_CMDLINE_ADDR</name></expr></argument>, <argument pos:start="67:49" pos:end="67:60"><expr pos:start="67:49" pos:end="67:60"><name pos:start="67:49" pos:end="67:60">cmdline_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="68:5" pos:end="68:74"><expr pos:start="68:5" pos:end="68:73"><call pos:start="68:5" pos:end="68:73"><name pos:start="68:5" pos:end="68:18">fw_cfg_add_i32</name><argument_list pos:start="68:19" pos:end="68:73">(<argument pos:start="68:20" pos:end="68:25"><expr pos:start="68:20" pos:end="68:25"><name pos:start="68:20" pos:end="68:25">fw_cfg</name></expr></argument>, <argument pos:start="68:28" pos:end="68:46"><expr pos:start="68:28" pos:end="68:46"><name pos:start="68:28" pos:end="68:46">FW_CFG_CMDLINE_SIZE</name></expr></argument>, <argument pos:start="68:49" pos:end="68:72"><expr pos:start="68:49" pos:end="68:72"><call pos:start="68:49" pos:end="68:70"><name pos:start="68:49" pos:end="68:54">strlen</name><argument_list pos:start="68:55" pos:end="68:70">(<argument pos:start="68:56" pos:end="68:69"><expr pos:start="68:56" pos:end="68:69"><name pos:start="68:56" pos:end="68:69">kernel_cmdline</name></expr></argument>)</argument_list></call><operator pos:start="68:71" pos:end="68:71">+</operator><literal type="number" pos:start="68:72" pos:end="68:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="69:5" pos:end="71:47"><expr pos:start="69:5" pos:end="71:46"><call pos:start="69:5" pos:end="71:46"><name pos:start="69:5" pos:end="69:20">fw_cfg_add_bytes</name><argument_list pos:start="69:21" pos:end="71:46">(<argument pos:start="69:22" pos:end="69:27"><expr pos:start="69:22" pos:end="69:27"><name pos:start="69:22" pos:end="69:27">fw_cfg</name></expr></argument>, <argument pos:start="69:30" pos:end="69:48"><expr pos:start="69:30" pos:end="69:48"><name pos:start="69:30" pos:end="69:48">FW_CFG_CMDLINE_DATA</name></expr></argument>,
                     <argument pos:start="70:22" pos:end="70:53"><expr pos:start="70:22" pos:end="70:53"><operator pos:start="70:22" pos:end="70:22">(</operator><name pos:start="70:23" pos:end="70:29">uint8_t</name><operator pos:start="70:30" pos:end="70:30">*</operator><operator pos:start="70:31" pos:end="70:31">)</operator><call pos:start="70:32" pos:end="70:53"><name pos:start="70:32" pos:end="70:37">strdup</name><argument_list pos:start="70:38" pos:end="70:53">(<argument pos:start="70:39" pos:end="70:52"><expr pos:start="70:39" pos:end="70:52"><name pos:start="70:39" pos:end="70:52">kernel_cmdline</name></expr></argument>)</argument_list></call></expr></argument>,
                     <argument pos:start="71:22" pos:end="71:45"><expr pos:start="71:22" pos:end="71:45"><call pos:start="71:22" pos:end="71:43"><name pos:start="71:22" pos:end="71:27">strlen</name><argument_list pos:start="71:28" pos:end="71:43">(<argument pos:start="71:29" pos:end="71:42"><expr pos:start="71:29" pos:end="71:42"><name pos:start="71:29" pos:end="71:42">kernel_cmdline</name></expr></argument>)</argument_list></call><operator pos:start="71:44" pos:end="71:44">+</operator><literal type="number" pos:start="71:45" pos:end="71:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="72:5" pos:end="137:21"><if pos:start="72:5" pos:end="74:5">if <condition pos:start="72:8" pos:end="72:26">(<expr pos:start="72:9" pos:end="72:25"><name pos:start="72:9" pos:end="72:16">protocol</name> <operator pos:start="72:18" pos:end="72:19">&gt;=</operator> <literal type="number" pos:start="72:21" pos:end="72:25">0x202</literal></expr>)</condition> <block pos:start="72:28" pos:end="74:5">{<block_content pos:start="73:9" pos:end="73:42">
	<expr_stmt pos:start="73:9" pos:end="73:42"><expr pos:start="73:9" pos:end="73:41"><call pos:start="73:9" pos:end="73:41"><name pos:start="73:9" pos:end="73:13">stl_p</name><argument_list pos:start="73:14" pos:end="73:41">(<argument pos:start="73:15" pos:end="73:26"><expr pos:start="73:15" pos:end="73:26"><name pos:start="73:15" pos:end="73:20">header</name><operator pos:start="73:21" pos:end="73:21">+</operator><literal type="number" pos:start="73:22" pos:end="73:26">0x228</literal></expr></argument>, <argument pos:start="73:29" pos:end="73:40"><expr pos:start="73:29" pos:end="73:40"><name pos:start="73:29" pos:end="73:40">cmdline_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="74:7" pos:end="137:21">else <block pos:start="74:12" pos:end="137:21">{<block_content pos:start="75:9" pos:end="137:21">
	<expr_stmt pos:start="75:9" pos:end="75:35"><expr pos:start="75:9" pos:end="75:34"><call pos:start="75:9" pos:end="75:34"><name pos:start="75:9" pos:end="75:13">stw_p</name><argument_list pos:start="75:14" pos:end="75:34">(<argument pos:start="75:15" pos:end="75:25"><expr pos:start="75:15" pos:end="75:25"><name pos:start="75:15" pos:end="75:20">header</name><operator pos:start="75:21" pos:end="75:21">+</operator><literal type="number" pos:start="75:22" pos:end="75:25">0x20</literal></expr></argument>, <argument pos:start="75:28" pos:end="75:33"><expr pos:start="75:28" pos:end="75:33"><literal type="number" pos:start="75:28" pos:end="75:33">0xA33F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="76:9" pos:end="76:51"><expr pos:start="76:9" pos:end="76:50"><call pos:start="76:9" pos:end="76:50"><name pos:start="76:9" pos:end="76:13">stw_p</name><argument_list pos:start="76:14" pos:end="76:50">(<argument pos:start="76:15" pos:end="76:25"><expr pos:start="76:15" pos:end="76:25"><name pos:start="76:15" pos:end="76:20">header</name><operator pos:start="76:21" pos:end="76:21">+</operator><literal type="number" pos:start="76:22" pos:end="76:25">0x22</literal></expr></argument>, <argument pos:start="76:28" pos:end="76:49"><expr pos:start="76:28" pos:end="76:49"><name pos:start="76:28" pos:end="76:39">cmdline_addr</name><operator pos:start="76:40" pos:end="76:40">-</operator><name pos:start="76:41" pos:end="76:49">real_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="77:5" pos:end="77:31">/* handle vga= parameter */</comment>
    <expr_stmt pos:start="78:5" pos:end="78:43"><expr pos:start="78:5" pos:end="78:42"><name pos:start="78:5" pos:end="78:9">vmode</name> <operator pos:start="78:11" pos:end="78:11">=</operator> <call pos:start="78:13" pos:end="78:42"><name pos:start="78:13" pos:end="78:18">strstr</name><argument_list pos:start="78:19" pos:end="78:42">(<argument pos:start="78:20" pos:end="78:33"><expr pos:start="78:20" pos:end="78:33"><name pos:start="78:20" pos:end="78:33">kernel_cmdline</name></expr></argument>, <argument pos:start="78:36" pos:end="78:41"><expr pos:start="78:36" pos:end="78:41"><literal type="string" pos:start="78:36" pos:end="78:41">"vga="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="79:5" pos:end="137:21"><if pos:start="79:5" pos:end="137:21">if <condition pos:start="79:8" pos:end="79:14">(<expr pos:start="79:9" pos:end="79:13"><name pos:start="79:9" pos:end="79:13">vmode</name></expr>)</condition> <block pos:start="79:16" pos:end="137:21">{<block_content pos:start="80:9" pos:end="137:21">
        <decl_stmt pos:start="80:9" pos:end="80:32"><decl pos:start="80:9" pos:end="80:31"><type pos:start="80:9" pos:end="80:20"><name pos:start="80:9" pos:end="80:16">unsigned</name> <name pos:start="80:18" pos:end="80:20">int</name></type> <name pos:start="80:22" pos:end="80:31">video_mode</name></decl>;</decl_stmt>
        <comment type="block" pos:start="81:9" pos:end="81:25">/* skip "vga=" */</comment>
        <expr_stmt pos:start="82:9" pos:end="82:19"><expr pos:start="82:9" pos:end="82:18"><name pos:start="82:9" pos:end="82:13">vmode</name> <operator pos:start="82:15" pos:end="82:16">+=</operator> <literal type="number" pos:start="82:18" pos:end="82:18">4</literal></expr>;</expr_stmt>
        <if_stmt pos:start="83:9" pos:end="137:21"><if pos:start="83:9" pos:end="85:9">if <condition pos:start="83:12" pos:end="83:41">(<expr pos:start="83:13" pos:end="83:40"><operator pos:start="83:13" pos:end="83:13">!</operator><call pos:start="83:14" pos:end="83:40"><name pos:start="83:14" pos:end="83:20">strncmp</name><argument_list pos:start="83:21" pos:end="83:40">(<argument pos:start="83:22" pos:end="83:26"><expr pos:start="83:22" pos:end="83:26"><name pos:start="83:22" pos:end="83:26">vmode</name></expr></argument>, <argument pos:start="83:29" pos:end="83:36"><expr pos:start="83:29" pos:end="83:36"><literal type="string" pos:start="83:29" pos:end="83:36">"normal"</literal></expr></argument>, <argument pos:start="83:39" pos:end="83:39"><expr pos:start="83:39" pos:end="83:39"><literal type="number" pos:start="83:39" pos:end="83:39">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:43" pos:end="85:9">{<block_content pos:start="84:13" pos:end="84:32">
            <expr_stmt pos:start="84:13" pos:end="84:32"><expr pos:start="84:13" pos:end="84:31"><name pos:start="84:13" pos:end="84:22">video_mode</name> <operator pos:start="84:24" pos:end="84:24">=</operator> <literal type="number" pos:start="84:26" pos:end="84:31">0xffff</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="85:11" pos:end="87:9">else if <condition pos:start="85:19" pos:end="85:45">(<expr pos:start="85:20" pos:end="85:44"><operator pos:start="85:20" pos:end="85:20">!</operator><call pos:start="85:21" pos:end="85:44"><name pos:start="85:21" pos:end="85:27">strncmp</name><argument_list pos:start="85:28" pos:end="85:44">(<argument pos:start="85:29" pos:end="85:33"><expr pos:start="85:29" pos:end="85:33"><name pos:start="85:29" pos:end="85:33">vmode</name></expr></argument>, <argument pos:start="85:36" pos:end="85:40"><expr pos:start="85:36" pos:end="85:40"><literal type="string" pos:start="85:36" pos:end="85:40">"ext"</literal></expr></argument>, <argument pos:start="85:43" pos:end="85:43"><expr pos:start="85:43" pos:end="85:43"><literal type="number" pos:start="85:43" pos:end="85:43">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:47" pos:end="87:9">{<block_content pos:start="86:13" pos:end="86:32">
            <expr_stmt pos:start="86:13" pos:end="86:32"><expr pos:start="86:13" pos:end="86:31"><name pos:start="86:13" pos:end="86:22">video_mode</name> <operator pos:start="86:24" pos:end="86:24">=</operator> <literal type="number" pos:start="86:26" pos:end="86:31">0xfffe</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="87:11" pos:end="89:9">else if <condition pos:start="87:19" pos:end="87:45">(<expr pos:start="87:20" pos:end="87:44"><operator pos:start="87:20" pos:end="87:20">!</operator><call pos:start="87:21" pos:end="87:44"><name pos:start="87:21" pos:end="87:27">strncmp</name><argument_list pos:start="87:28" pos:end="87:44">(<argument pos:start="87:29" pos:end="87:33"><expr pos:start="87:29" pos:end="87:33"><name pos:start="87:29" pos:end="87:33">vmode</name></expr></argument>, <argument pos:start="87:36" pos:end="87:40"><expr pos:start="87:36" pos:end="87:40"><literal type="string" pos:start="87:36" pos:end="87:40">"ask"</literal></expr></argument>, <argument pos:start="87:43" pos:end="87:43"><expr pos:start="87:43" pos:end="87:43"><literal type="number" pos:start="87:43" pos:end="87:43">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:47" pos:end="89:9">{<block_content pos:start="88:13" pos:end="88:32">
            <expr_stmt pos:start="88:13" pos:end="88:32"><expr pos:start="88:13" pos:end="88:31"><name pos:start="88:13" pos:end="88:22">video_mode</name> <operator pos:start="88:24" pos:end="88:24">=</operator> <literal type="number" pos:start="88:26" pos:end="88:31">0xfffd</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="89:11" pos:end="137:21">else <block pos:start="89:16" pos:end="137:21">{<block_content pos:start="90:13" pos:end="137:21">
            <expr_stmt pos:start="90:13" pos:end="90:48"><expr pos:start="90:13" pos:end="90:47"><name pos:start="90:13" pos:end="90:22">video_mode</name> <operator pos:start="90:24" pos:end="90:24">=</operator> <call pos:start="90:26" pos:end="90:47"><name pos:start="90:26" pos:end="90:31">strtol</name><argument_list pos:start="90:32" pos:end="90:47">(<argument pos:start="90:33" pos:end="90:37"><expr pos:start="90:33" pos:end="90:37"><name pos:start="90:33" pos:end="90:37">vmode</name></expr></argument>, <argument pos:start="90:40" pos:end="90:43"><expr pos:start="90:40" pos:end="90:43"><name pos:start="90:40" pos:end="90:43">NULL</name></expr></argument>, <argument pos:start="90:46" pos:end="90:46"><expr pos:start="90:46" pos:end="90:46"><literal type="number" pos:start="90:46" pos:end="90:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="91:9" pos:end="91:40"><expr pos:start="91:9" pos:end="91:39"><call pos:start="91:9" pos:end="91:39"><name pos:start="91:9" pos:end="91:13">stw_p</name><argument_list pos:start="91:14" pos:end="91:39">(<argument pos:start="91:15" pos:end="91:26"><expr pos:start="91:15" pos:end="91:26"><name pos:start="91:15" pos:end="91:20">header</name><operator pos:start="91:21" pos:end="91:21">+</operator><literal type="number" pos:start="91:22" pos:end="91:26">0x1fa</literal></expr></argument>, <argument pos:start="91:29" pos:end="91:38"><expr pos:start="91:29" pos:end="91:38"><name pos:start="91:29" pos:end="91:38">video_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="92:5" pos:end="92:21">/* loader type */</comment>
    <comment type="block" pos:start="93:5" pos:end="95:36">/* High nybble = B reserved for Qemu; low nybble is revision number.
       If this code is substantially changed, you may want to consider
       incrementing the revision. */</comment>
    <if_stmt pos:start="96:5" pos:end="97:29"><if pos:start="96:5" pos:end="97:29">if <condition pos:start="96:8" pos:end="96:26">(<expr pos:start="96:9" pos:end="96:25"><name pos:start="96:9" pos:end="96:16">protocol</name> <operator pos:start="96:18" pos:end="96:19">&gt;=</operator> <literal type="number" pos:start="96:21" pos:end="96:25">0x200</literal></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="97:29"><block_content pos:start="97:9" pos:end="97:29">
	<expr_stmt pos:start="97:9" pos:end="97:29"><expr pos:start="97:9" pos:end="97:28"><name pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:14">header</name><index pos:start="97:15" pos:end="97:21">[<expr pos:start="97:16" pos:end="97:20"><literal type="number" pos:start="97:16" pos:end="97:20">0x210</literal></expr>]</index></name> <operator pos:start="97:23" pos:end="97:23">=</operator> <literal type="number" pos:start="97:25" pos:end="97:28">0xB0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block" pos:start="98:5" pos:end="98:14">/* heap */</comment>
    <if_stmt pos:start="99:5" pos:end="137:21"><if pos:start="99:5" pos:end="137:21">if <condition pos:start="99:8" pos:end="99:26">(<expr pos:start="99:9" pos:end="99:25"><name pos:start="99:9" pos:end="99:16">protocol</name> <operator pos:start="99:18" pos:end="99:19">&gt;=</operator> <literal type="number" pos:start="99:21" pos:end="99:25">0x201</literal></expr>)</condition> <block pos:start="99:28" pos:end="137:21">{<block_content pos:start="100:9" pos:end="137:21">
	<expr_stmt pos:start="100:9" pos:end="100:30"><expr pos:start="100:9" pos:end="100:29"><name pos:start="100:9" pos:end="100:21"><name pos:start="100:9" pos:end="100:14">header</name><index pos:start="100:15" pos:end="100:21">[<expr pos:start="100:16" pos:end="100:20"><literal type="number" pos:start="100:16" pos:end="100:20">0x211</literal></expr>]</index></name> <operator pos:start="100:23" pos:end="100:24">|=</operator> <literal type="number" pos:start="100:26" pos:end="100:29">0x80</literal></expr>;</expr_stmt>	<comment type="block" pos:start="100:33" pos:end="100:50">/* CAN_USE_HEAP */</comment>
	<expr_stmt pos:start="101:9" pos:end="101:58"><expr pos:start="101:9" pos:end="101:57"><call pos:start="101:9" pos:end="101:57"><name pos:start="101:9" pos:end="101:13">stw_p</name><argument_list pos:start="101:14" pos:end="101:57">(<argument pos:start="101:15" pos:end="101:26"><expr pos:start="101:15" pos:end="101:26"><name pos:start="101:15" pos:end="101:20">header</name><operator pos:start="101:21" pos:end="101:21">+</operator><literal type="number" pos:start="101:22" pos:end="101:26">0x224</literal></expr></argument>, <argument pos:start="101:29" pos:end="101:56"><expr pos:start="101:29" pos:end="101:56"><name pos:start="101:29" pos:end="101:40">cmdline_addr</name><operator pos:start="101:41" pos:end="101:41">-</operator><name pos:start="101:42" pos:end="101:50">real_addr</name><operator pos:start="101:51" pos:end="101:51">-</operator><literal type="number" pos:start="101:52" pos:end="101:56">0x200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="102:5" pos:end="102:21">/* load initrd */</comment>
    <if_stmt pos:start="103:5" pos:end="137:21"><if pos:start="103:5" pos:end="137:21">if <condition pos:start="103:8" pos:end="103:24">(<expr pos:start="103:9" pos:end="103:23"><name pos:start="103:9" pos:end="103:23">initrd_filename</name></expr>)</condition> <block pos:start="103:26" pos:end="137:21">{<block_content pos:start="104:9" pos:end="137:21">
	<if_stmt pos:start="104:9" pos:end="137:21"><if pos:start="104:9" pos:end="137:21">if <condition pos:start="104:12" pos:end="104:29">(<expr pos:start="104:13" pos:end="104:28"><name pos:start="104:13" pos:end="104:20">protocol</name> <operator pos:start="104:22" pos:end="104:22">&lt;</operator> <literal type="number" pos:start="104:24" pos:end="104:28">0x200</literal></expr>)</condition> <block pos:start="104:31" pos:end="137:21">{<block_content pos:start="105:13" pos:end="137:21">
	    <expr_stmt pos:start="105:13" pos:end="105:79"><expr pos:start="105:13" pos:end="105:78"><call pos:start="105:13" pos:end="105:78"><name pos:start="105:13" pos:end="105:19">fprintf</name><argument_list pos:start="105:20" pos:end="105:78">(<argument pos:start="105:21" pos:end="105:26"><expr pos:start="105:21" pos:end="105:26"><name pos:start="105:21" pos:end="105:26">stderr</name></expr></argument>, <argument pos:start="105:29" pos:end="105:77"><expr pos:start="105:29" pos:end="105:77"><literal type="string" pos:start="105:29" pos:end="105:77">"qemu: linux kernel too old to load a ram disk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="106:9" pos:end="106:54"><expr pos:start="106:9" pos:end="106:53"><name pos:start="106:9" pos:end="106:19">initrd_size</name> <operator pos:start="106:21" pos:end="106:21">=</operator> <call pos:start="106:23" pos:end="106:53"><name pos:start="106:23" pos:end="106:36">get_image_size</name><argument_list pos:start="106:37" pos:end="106:53">(<argument pos:start="106:38" pos:end="106:52"><expr pos:start="106:38" pos:end="106:52"><name pos:start="106:38" pos:end="106:52">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="107:9" pos:end="107:55"><expr pos:start="107:9" pos:end="107:54"><name pos:start="107:9" pos:end="107:19">initrd_addr</name> <operator pos:start="107:21" pos:end="107:21">=</operator> <operator pos:start="107:23" pos:end="107:23">(</operator><name pos:start="107:24" pos:end="107:33">initrd_max</name><operator pos:start="107:34" pos:end="107:34">-</operator><name pos:start="107:35" pos:end="107:45">initrd_size</name><operator pos:start="107:46" pos:end="107:46">)</operator> <operator pos:start="107:48" pos:end="107:48">&amp;</operator> <operator pos:start="107:50" pos:end="107:50">~</operator><literal type="number" pos:start="107:51" pos:end="107:54">4095</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="108:9" pos:end="108:47"><expr pos:start="108:9" pos:end="108:46"><name pos:start="108:9" pos:end="108:19">initrd_data</name> <operator pos:start="108:21" pos:end="108:21">=</operator> <call pos:start="108:23" pos:end="108:46"><name pos:start="108:23" pos:end="108:33">qemu_malloc</name><argument_list pos:start="108:34" pos:end="108:46">(<argument pos:start="108:35" pos:end="108:45"><expr pos:start="108:35" pos:end="108:45"><name pos:start="108:35" pos:end="108:45">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="109:9" pos:end="109:49"><expr pos:start="109:9" pos:end="109:48"><call pos:start="109:9" pos:end="109:48"><name pos:start="109:9" pos:end="109:18">load_image</name><argument_list pos:start="109:19" pos:end="109:48">(<argument pos:start="109:20" pos:end="109:34"><expr pos:start="109:20" pos:end="109:34"><name pos:start="109:20" pos:end="109:34">initrd_filename</name></expr></argument>, <argument pos:start="109:37" pos:end="109:47"><expr pos:start="109:37" pos:end="109:47"><name pos:start="109:37" pos:end="109:47">initrd_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="110:9" pos:end="110:64"><expr pos:start="110:9" pos:end="110:63"><call pos:start="110:9" pos:end="110:63"><name pos:start="110:9" pos:end="110:22">fw_cfg_add_i32</name><argument_list pos:start="110:23" pos:end="110:63">(<argument pos:start="110:24" pos:end="110:29"><expr pos:start="110:24" pos:end="110:29"><name pos:start="110:24" pos:end="110:29">fw_cfg</name></expr></argument>, <argument pos:start="110:32" pos:end="110:49"><expr pos:start="110:32" pos:end="110:49"><name pos:start="110:32" pos:end="110:49">FW_CFG_INITRD_ADDR</name></expr></argument>, <argument pos:start="110:52" pos:end="110:62"><expr pos:start="110:52" pos:end="110:62"><name pos:start="110:52" pos:end="110:62">initrd_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="111:9" pos:end="111:64"><expr pos:start="111:9" pos:end="111:63"><call pos:start="111:9" pos:end="111:63"><name pos:start="111:9" pos:end="111:22">fw_cfg_add_i32</name><argument_list pos:start="111:23" pos:end="111:63">(<argument pos:start="111:24" pos:end="111:29"><expr pos:start="111:24" pos:end="111:29"><name pos:start="111:24" pos:end="111:29">fw_cfg</name></expr></argument>, <argument pos:start="111:32" pos:end="111:49"><expr pos:start="111:32" pos:end="111:49"><name pos:start="111:32" pos:end="111:49">FW_CFG_INITRD_SIZE</name></expr></argument>, <argument pos:start="111:52" pos:end="111:62"><expr pos:start="111:52" pos:end="111:62"><name pos:start="111:52" pos:end="111:62">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="112:9" pos:end="112:79"><expr pos:start="112:9" pos:end="112:78"><call pos:start="112:9" pos:end="112:78"><name pos:start="112:9" pos:end="112:24">fw_cfg_add_bytes</name><argument_list pos:start="112:25" pos:end="112:78">(<argument pos:start="112:26" pos:end="112:31"><expr pos:start="112:26" pos:end="112:31"><name pos:start="112:26" pos:end="112:31">fw_cfg</name></expr></argument>, <argument pos:start="112:34" pos:end="112:51"><expr pos:start="112:34" pos:end="112:51"><name pos:start="112:34" pos:end="112:51">FW_CFG_INITRD_DATA</name></expr></argument>, <argument pos:start="112:54" pos:end="112:64"><expr pos:start="112:54" pos:end="112:64"><name pos:start="112:54" pos:end="112:64">initrd_data</name></expr></argument>, <argument pos:start="112:67" pos:end="112:77"><expr pos:start="112:67" pos:end="112:77"><name pos:start="112:67" pos:end="112:77">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="113:9" pos:end="113:41"><expr pos:start="113:9" pos:end="113:40"><call pos:start="113:9" pos:end="113:40"><name pos:start="113:9" pos:end="113:13">stl_p</name><argument_list pos:start="113:14" pos:end="113:40">(<argument pos:start="113:15" pos:end="113:26"><expr pos:start="113:15" pos:end="113:26"><name pos:start="113:15" pos:end="113:20">header</name><operator pos:start="113:21" pos:end="113:21">+</operator><literal type="number" pos:start="113:22" pos:end="113:26">0x218</literal></expr></argument>, <argument pos:start="113:29" pos:end="113:39"><expr pos:start="113:29" pos:end="113:39"><name pos:start="113:29" pos:end="113:39">initrd_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="114:9" pos:end="114:41"><expr pos:start="114:9" pos:end="114:40"><call pos:start="114:9" pos:end="114:40"><name pos:start="114:9" pos:end="114:13">stl_p</name><argument_list pos:start="114:14" pos:end="114:40">(<argument pos:start="114:15" pos:end="114:26"><expr pos:start="114:15" pos:end="114:26"><name pos:start="114:15" pos:end="114:20">header</name><operator pos:start="114:21" pos:end="114:21">+</operator><literal type="number" pos:start="114:22" pos:end="114:26">0x21c</literal></expr></argument>, <argument pos:start="114:29" pos:end="114:39"><expr pos:start="114:29" pos:end="114:39"><name pos:start="114:29" pos:end="114:39">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="115:5" pos:end="115:31">/* load kernel and setup */</comment>
    <expr_stmt pos:start="116:5" pos:end="116:31"><expr pos:start="116:5" pos:end="116:30"><name pos:start="116:5" pos:end="116:14">setup_size</name> <operator pos:start="116:16" pos:end="116:16">=</operator> <name pos:start="116:18" pos:end="116:30"><name pos:start="116:18" pos:end="116:23">header</name><index pos:start="116:24" pos:end="116:30">[<expr pos:start="116:25" pos:end="116:29"><literal type="number" pos:start="116:25" pos:end="116:29">0x1f1</literal></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt pos:start="117:5" pos:end="118:23"><if pos:start="117:5" pos:end="118:23">if <condition pos:start="117:8" pos:end="117:24">(<expr pos:start="117:9" pos:end="117:23"><name pos:start="117:9" pos:end="117:18">setup_size</name> <operator pos:start="117:20" pos:end="117:21">==</operator> <literal type="number" pos:start="117:23" pos:end="117:23">0</literal></expr>)</condition><block type="pseudo" pos:start="118:9" pos:end="118:23"><block_content pos:start="118:9" pos:end="118:23">
	<expr_stmt pos:start="118:9" pos:end="118:23"><expr pos:start="118:9" pos:end="118:22"><name pos:start="118:9" pos:end="118:18">setup_size</name> <operator pos:start="118:20" pos:end="118:20">=</operator> <literal type="number" pos:start="118:22" pos:end="118:22">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="119:5" pos:end="119:36"><expr pos:start="119:5" pos:end="119:35"><name pos:start="119:5" pos:end="119:14">setup_size</name> <operator pos:start="119:16" pos:end="119:16">=</operator> <operator pos:start="119:18" pos:end="119:18">(</operator><name pos:start="119:19" pos:end="119:28">setup_size</name><operator pos:start="119:29" pos:end="119:29">+</operator><literal type="number" pos:start="119:30" pos:end="119:30">1</literal><operator pos:start="119:31" pos:end="119:31">)</operator><operator pos:start="119:32" pos:end="119:32">*</operator><literal type="number" pos:start="119:33" pos:end="119:35">512</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="120:5" pos:end="120:30"><expr pos:start="120:5" pos:end="120:29"><name pos:start="120:5" pos:end="120:15">kernel_size</name> <operator pos:start="120:17" pos:end="120:18">-=</operator> <name pos:start="120:20" pos:end="120:29">setup_size</name></expr>;</expr_stmt>
    <expr_stmt pos:start="121:5" pos:end="121:37"><expr pos:start="121:5" pos:end="121:36"><name pos:start="121:5" pos:end="121:9">setup</name>  <operator pos:start="121:12" pos:end="121:12">=</operator> <call pos:start="121:14" pos:end="121:36"><name pos:start="121:14" pos:end="121:24">qemu_malloc</name><argument_list pos:start="121:25" pos:end="121:36">(<argument pos:start="121:26" pos:end="121:35"><expr pos:start="121:26" pos:end="121:35"><name pos:start="121:26" pos:end="121:35">setup_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="122:5" pos:end="122:38"><expr pos:start="122:5" pos:end="122:37"><name pos:start="122:5" pos:end="122:10">kernel</name> <operator pos:start="122:12" pos:end="122:12">=</operator> <call pos:start="122:14" pos:end="122:37"><name pos:start="122:14" pos:end="122:24">qemu_malloc</name><argument_list pos:start="122:25" pos:end="122:37">(<argument pos:start="122:26" pos:end="122:36"><expr pos:start="122:26" pos:end="122:36"><name pos:start="122:26" pos:end="122:36">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="123:5" pos:end="123:26"><expr pos:start="123:5" pos:end="123:25"><call pos:start="123:5" pos:end="123:25"><name pos:start="123:5" pos:end="123:9">fseek</name><argument_list pos:start="123:10" pos:end="123:25">(<argument pos:start="123:11" pos:end="123:11"><expr pos:start="123:11" pos:end="123:11"><name pos:start="123:11" pos:end="123:11">f</name></expr></argument>, <argument pos:start="123:14" pos:end="123:14"><expr pos:start="123:14" pos:end="123:14"><literal type="number" pos:start="123:14" pos:end="123:14">0</literal></expr></argument>, <argument pos:start="123:17" pos:end="123:24"><expr pos:start="123:17" pos:end="123:24"><name pos:start="123:17" pos:end="123:24">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="124:5" pos:end="137:21"><if pos:start="124:5" pos:end="137:21">if <condition pos:start="124:8" pos:end="124:53">(<expr pos:start="124:9" pos:end="124:52"><call pos:start="124:9" pos:end="124:38"><name pos:start="124:9" pos:end="124:13">fread</name><argument_list pos:start="124:14" pos:end="124:38">(<argument pos:start="124:15" pos:end="124:19"><expr pos:start="124:15" pos:end="124:19"><name pos:start="124:15" pos:end="124:19">setup</name></expr></argument>, <argument pos:start="124:22" pos:end="124:22"><expr pos:start="124:22" pos:end="124:22"><literal type="number" pos:start="124:22" pos:end="124:22">1</literal></expr></argument>, <argument pos:start="124:25" pos:end="124:34"><expr pos:start="124:25" pos:end="124:34"><name pos:start="124:25" pos:end="124:34">setup_size</name></expr></argument>, <argument pos:start="124:37" pos:end="124:37"><expr pos:start="124:37" pos:end="124:37"><name pos:start="124:37" pos:end="124:37">f</name></expr></argument>)</argument_list></call> <operator pos:start="124:40" pos:end="124:41">!=</operator> <name pos:start="124:43" pos:end="124:52">setup_size</name></expr>)</condition> <block pos:start="124:55" pos:end="137:21">{<block_content pos:start="125:9" pos:end="137:21">
        <expr_stmt pos:start="125:9" pos:end="125:44"><expr pos:start="125:9" pos:end="125:43"><call pos:start="125:9" pos:end="125:43"><name pos:start="125:9" pos:end="125:15">fprintf</name><argument_list pos:start="125:16" pos:end="125:43">(<argument pos:start="125:17" pos:end="125:22"><expr pos:start="125:17" pos:end="125:22"><name pos:start="125:17" pos:end="125:22">stderr</name></expr></argument>, <argument pos:start="125:25" pos:end="125:42"><expr pos:start="125:25" pos:end="125:42"><literal type="string" pos:start="125:25" pos:end="125:42">"fread() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="126:5" pos:end="137:21"><if pos:start="126:5" pos:end="137:21">if <condition pos:start="126:8" pos:end="126:56">(<expr pos:start="126:9" pos:end="126:55"><call pos:start="126:9" pos:end="126:40"><name pos:start="126:9" pos:end="126:13">fread</name><argument_list pos:start="126:14" pos:end="126:40">(<argument pos:start="126:15" pos:end="126:20"><expr pos:start="126:15" pos:end="126:20"><name pos:start="126:15" pos:end="126:20">kernel</name></expr></argument>, <argument pos:start="126:23" pos:end="126:23"><expr pos:start="126:23" pos:end="126:23"><literal type="number" pos:start="126:23" pos:end="126:23">1</literal></expr></argument>, <argument pos:start="126:26" pos:end="126:36"><expr pos:start="126:26" pos:end="126:36"><name pos:start="126:26" pos:end="126:36">kernel_size</name></expr></argument>, <argument pos:start="126:39" pos:end="126:39"><expr pos:start="126:39" pos:end="126:39"><name pos:start="126:39" pos:end="126:39">f</name></expr></argument>)</argument_list></call> <operator pos:start="126:42" pos:end="126:43">!=</operator> <name pos:start="126:45" pos:end="126:55">kernel_size</name></expr>)</condition> <block pos:start="126:58" pos:end="137:21">{<block_content pos:start="127:9" pos:end="137:21">
        <expr_stmt pos:start="127:9" pos:end="127:44"><expr pos:start="127:9" pos:end="127:43"><call pos:start="127:9" pos:end="127:43"><name pos:start="127:9" pos:end="127:15">fprintf</name><argument_list pos:start="127:16" pos:end="127:43">(<argument pos:start="127:17" pos:end="127:22"><expr pos:start="127:17" pos:end="127:22"><name pos:start="127:17" pos:end="127:22">stderr</name></expr></argument>, <argument pos:start="127:25" pos:end="127:42"><expr pos:start="127:25" pos:end="127:42"><literal type="string" pos:start="127:25" pos:end="127:42">"fread() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="128:5" pos:end="128:14"><expr pos:start="128:5" pos:end="128:13"><call pos:start="128:5" pos:end="128:13"><name pos:start="128:5" pos:end="128:10">fclose</name><argument_list pos:start="128:11" pos:end="128:13">(<argument pos:start="128:12" pos:end="128:12"><expr pos:start="128:12" pos:end="128:12"><name pos:start="128:12" pos:end="128:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="129:5" pos:end="129:59"><expr pos:start="129:5" pos:end="129:58"><call pos:start="129:5" pos:end="129:58"><name pos:start="129:5" pos:end="129:10">memcpy</name><argument_list pos:start="129:11" pos:end="129:58">(<argument pos:start="129:12" pos:end="129:16"><expr pos:start="129:12" pos:end="129:16"><name pos:start="129:12" pos:end="129:16">setup</name></expr></argument>, <argument pos:start="129:19" pos:end="129:24"><expr pos:start="129:19" pos:end="129:24"><name pos:start="129:19" pos:end="129:24">header</name></expr></argument>, <argument pos:start="129:27" pos:end="129:57"><expr pos:start="129:27" pos:end="129:57"><call pos:start="129:27" pos:end="129:57"><name pos:start="129:27" pos:end="129:29">MIN</name><argument_list pos:start="129:30" pos:end="129:57">(<argument pos:start="129:31" pos:end="129:44"><expr pos:start="129:31" pos:end="129:44"><sizeof pos:start="129:31" pos:end="129:44">sizeof<argument_list pos:start="129:37" pos:end="129:44">(<argument pos:start="129:38" pos:end="129:43"><expr pos:start="129:38" pos:end="129:43"><name pos:start="129:38" pos:end="129:43">header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="129:47" pos:end="129:56"><expr pos:start="129:47" pos:end="129:56"><name pos:start="129:47" pos:end="129:56">setup_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="130:5" pos:end="130:58"><expr pos:start="130:5" pos:end="130:57"><call pos:start="130:5" pos:end="130:57"><name pos:start="130:5" pos:end="130:18">fw_cfg_add_i32</name><argument_list pos:start="130:19" pos:end="130:57">(<argument pos:start="130:20" pos:end="130:25"><expr pos:start="130:20" pos:end="130:25"><name pos:start="130:20" pos:end="130:25">fw_cfg</name></expr></argument>, <argument pos:start="130:28" pos:end="130:45"><expr pos:start="130:28" pos:end="130:45"><name pos:start="130:28" pos:end="130:45">FW_CFG_KERNEL_ADDR</name></expr></argument>, <argument pos:start="130:48" pos:end="130:56"><expr pos:start="130:48" pos:end="130:56"><name pos:start="130:48" pos:end="130:56">prot_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="131:5" pos:end="131:60"><expr pos:start="131:5" pos:end="131:59"><call pos:start="131:5" pos:end="131:59"><name pos:start="131:5" pos:end="131:18">fw_cfg_add_i32</name><argument_list pos:start="131:19" pos:end="131:59">(<argument pos:start="131:20" pos:end="131:25"><expr pos:start="131:20" pos:end="131:25"><name pos:start="131:20" pos:end="131:25">fw_cfg</name></expr></argument>, <argument pos:start="131:28" pos:end="131:45"><expr pos:start="131:28" pos:end="131:45"><name pos:start="131:28" pos:end="131:45">FW_CFG_KERNEL_SIZE</name></expr></argument>, <argument pos:start="131:48" pos:end="131:58"><expr pos:start="131:48" pos:end="131:58"><name pos:start="131:48" pos:end="131:58">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="132:5" pos:end="132:70"><expr pos:start="132:5" pos:end="132:69"><call pos:start="132:5" pos:end="132:69"><name pos:start="132:5" pos:end="132:20">fw_cfg_add_bytes</name><argument_list pos:start="132:21" pos:end="132:69">(<argument pos:start="132:22" pos:end="132:27"><expr pos:start="132:22" pos:end="132:27"><name pos:start="132:22" pos:end="132:27">fw_cfg</name></expr></argument>, <argument pos:start="132:30" pos:end="132:47"><expr pos:start="132:30" pos:end="132:47"><name pos:start="132:30" pos:end="132:47">FW_CFG_KERNEL_DATA</name></expr></argument>, <argument pos:start="132:50" pos:end="132:55"><expr pos:start="132:50" pos:end="132:55"><name pos:start="132:50" pos:end="132:55">kernel</name></expr></argument>, <argument pos:start="132:58" pos:end="132:68"><expr pos:start="132:58" pos:end="132:68"><name pos:start="132:58" pos:end="132:68">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="133:5" pos:end="133:57"><expr pos:start="133:5" pos:end="133:56"><call pos:start="133:5" pos:end="133:56"><name pos:start="133:5" pos:end="133:18">fw_cfg_add_i32</name><argument_list pos:start="133:19" pos:end="133:56">(<argument pos:start="133:20" pos:end="133:25"><expr pos:start="133:20" pos:end="133:25"><name pos:start="133:20" pos:end="133:25">fw_cfg</name></expr></argument>, <argument pos:start="133:28" pos:end="133:44"><expr pos:start="133:28" pos:end="133:44"><name pos:start="133:28" pos:end="133:44">FW_CFG_SETUP_ADDR</name></expr></argument>, <argument pos:start="133:47" pos:end="133:55"><expr pos:start="133:47" pos:end="133:55"><name pos:start="133:47" pos:end="133:55">real_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="134:5" pos:end="134:58"><expr pos:start="134:5" pos:end="134:57"><call pos:start="134:5" pos:end="134:57"><name pos:start="134:5" pos:end="134:18">fw_cfg_add_i32</name><argument_list pos:start="134:19" pos:end="134:57">(<argument pos:start="134:20" pos:end="134:25"><expr pos:start="134:20" pos:end="134:25"><name pos:start="134:20" pos:end="134:25">fw_cfg</name></expr></argument>, <argument pos:start="134:28" pos:end="134:44"><expr pos:start="134:28" pos:end="134:44"><name pos:start="134:28" pos:end="134:44">FW_CFG_SETUP_SIZE</name></expr></argument>, <argument pos:start="134:47" pos:end="134:56"><expr pos:start="134:47" pos:end="134:56"><name pos:start="134:47" pos:end="134:56">setup_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="135:5" pos:end="135:67"><expr pos:start="135:5" pos:end="135:66"><call pos:start="135:5" pos:end="135:66"><name pos:start="135:5" pos:end="135:20">fw_cfg_add_bytes</name><argument_list pos:start="135:21" pos:end="135:66">(<argument pos:start="135:22" pos:end="135:27"><expr pos:start="135:22" pos:end="135:27"><name pos:start="135:22" pos:end="135:27">fw_cfg</name></expr></argument>, <argument pos:start="135:30" pos:end="135:46"><expr pos:start="135:30" pos:end="135:46"><name pos:start="135:30" pos:end="135:46">FW_CFG_SETUP_DATA</name></expr></argument>, <argument pos:start="135:49" pos:end="135:53"><expr pos:start="135:49" pos:end="135:53"><name pos:start="135:49" pos:end="135:53">setup</name></expr></argument>, <argument pos:start="135:56" pos:end="135:65"><expr pos:start="135:56" pos:end="135:65"><name pos:start="135:56" pos:end="135:65">setup_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="136:5" pos:end="136:49"><expr pos:start="136:5" pos:end="136:48"><name pos:start="136:5" pos:end="136:30"><name pos:start="136:5" pos:end="136:14">option_rom</name><index pos:start="136:15" pos:end="136:30">[<expr pos:start="136:16" pos:end="136:29"><name pos:start="136:16" pos:end="136:29">nb_option_roms</name></expr>]</index></name> <operator pos:start="136:32" pos:end="136:32">=</operator> <literal type="string" pos:start="136:34" pos:end="136:48">"linuxboot.bin"</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="137:5" pos:end="137:21"><expr pos:start="137:5" pos:end="137:20"><name pos:start="137:5" pos:end="137:18">nb_option_roms</name><operator pos:start="137:19" pos:end="137:20">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
