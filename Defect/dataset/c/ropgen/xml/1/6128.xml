<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6128.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:30"><name pos:start="1:1" pos:end="1:7">readv_f</name><argument_list pos:start="1:8" pos:end="1:30">(<argument pos:start="1:9" pos:end="1:16">int argc</argument>, <argument pos:start="1:19" pos:end="1:29">char **argv</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="173:1">{<block_content pos:start="5:9" pos:end="171:17">

	<decl_stmt pos:start="5:9" pos:end="5:30"><decl pos:start="5:9" pos:end="5:25"><type pos:start="5:9" pos:end="5:22"><name pos:start="5:9" pos:end="5:22"><name pos:start="5:9" pos:end="5:14">struct</name> <name pos:start="5:16" pos:end="5:22">timeval</name></name></type> <name pos:start="5:24" pos:end="5:25">t1</name></decl>, <decl pos:start="5:28" pos:end="5:29"><type ref="prev" pos:start="5:9" pos:end="5:22"/><name pos:start="5:28" pos:end="5:29">t2</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:44"><decl pos:start="7:9" pos:end="7:21"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:17">Cflag</name> <init pos:start="7:19" pos:end="7:21">= <expr pos:start="7:21" pos:end="7:21"><literal type="number" pos:start="7:21" pos:end="7:21">0</literal></expr></init></decl>, <decl pos:start="7:24" pos:end="7:32"><type ref="prev" pos:start="7:9" pos:end="7:11"/><name pos:start="7:24" pos:end="7:28">qflag</name> <init pos:start="7:30" pos:end="7:32">= <expr pos:start="7:32" pos:end="7:32"><literal type="number" pos:start="7:32" pos:end="7:32">0</literal></expr></init></decl>, <decl pos:start="7:35" pos:end="7:43"><type ref="prev" pos:start="7:9" pos:end="7:11"/><name pos:start="7:35" pos:end="7:39">vflag</name> <init pos:start="7:41" pos:end="7:43">= <expr pos:start="7:43" pos:end="7:43"><literal type="number" pos:start="7:43" pos:end="7:43">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:19"><decl pos:start="9:9" pos:end="9:13"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:13">c</name></decl>, <decl pos:start="9:16" pos:end="9:18"><type ref="prev" pos:start="9:9" pos:end="9:11"/><name pos:start="9:16" pos:end="9:18">cnt</name></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:18"><decl pos:start="11:9" pos:end="11:17"><type pos:start="11:9" pos:end="11:14"><name pos:start="11:9" pos:end="11:12">char</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">buf</name></decl>;</decl_stmt>

	<decl_stmt pos:start="13:9" pos:end="13:23"><decl pos:start="13:9" pos:end="13:22"><type pos:start="13:9" pos:end="13:15"><name pos:start="13:9" pos:end="13:15">int64_t</name></type> <name pos:start="13:17" pos:end="13:22">offset</name></decl>;</decl_stmt>

	<decl_stmt pos:start="15:9" pos:end="15:18"><decl pos:start="15:9" pos:end="15:17"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:17">total</name></decl>;</decl_stmt>

	<decl_stmt pos:start="17:9" pos:end="17:19"><decl pos:start="17:9" pos:end="17:18"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:18">nr_iov</name></decl>;</decl_stmt>

	<decl_stmt pos:start="19:9" pos:end="19:26"><decl pos:start="19:9" pos:end="19:25"><type pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:20">QEMUIOVector</name></type> <name pos:start="19:22" pos:end="19:25">qiov</name></decl>;</decl_stmt>

	<decl_stmt pos:start="21:9" pos:end="21:24"><decl pos:start="21:9" pos:end="21:23"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:19">pattern</name> <init pos:start="21:21" pos:end="21:23">= <expr pos:start="21:23" pos:end="21:23"><literal type="number" pos:start="21:23" pos:end="21:23">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="23:9" pos:end="23:22"><decl pos:start="23:9" pos:end="23:21"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:17">Pflag</name> <init pos:start="23:19" pos:end="23:21">= <expr pos:start="23:21" pos:end="23:21"><literal type="number" pos:start="23:21" pos:end="23:21">0</literal></expr></init></decl>;</decl_stmt>



	<while pos:start="27:9" pos:end="63:9">while <condition pos:start="27:15" pos:end="27:56">(<expr pos:start="27:16" pos:end="27:55"><operator pos:start="27:16" pos:end="27:16">(</operator><name pos:start="27:17" pos:end="27:17">c</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <call pos:start="27:21" pos:end="27:47"><name pos:start="27:21" pos:end="27:26">getopt</name><argument_list pos:start="27:27" pos:end="27:47">(<argument pos:start="27:28" pos:end="27:31"><expr pos:start="27:28" pos:end="27:31"><name pos:start="27:28" pos:end="27:31">argc</name></expr></argument>, <argument pos:start="27:34" pos:end="27:37"><expr pos:start="27:34" pos:end="27:37"><name pos:start="27:34" pos:end="27:37">argv</name></expr></argument>, <argument pos:start="27:40" pos:end="27:46"><expr pos:start="27:40" pos:end="27:46"><literal type="string" pos:start="27:40" pos:end="27:46">"CP:qv"</literal></expr></argument>)</argument_list></call><operator pos:start="27:48" pos:end="27:48">)</operator> <operator pos:start="27:50" pos:end="27:51">!=</operator> <name pos:start="27:53" pos:end="27:55">EOF</name></expr>)</condition> <block pos:start="27:58" pos:end="63:9">{<block_content pos:start="29:17" pos:end="61:17">

		<switch pos:start="29:17" pos:end="61:17">switch <condition pos:start="29:24" pos:end="29:26">(<expr pos:start="29:25" pos:end="29:25"><name pos:start="29:25" pos:end="29:25">c</name></expr>)</condition> <block pos:start="29:28" pos:end="61:17">{<block_content pos:start="31:17" pos:end="59:57">

		<case pos:start="31:17" pos:end="31:25">case <expr pos:start="31:22" pos:end="31:24"><literal type="char" pos:start="31:22" pos:end="31:24">'C'</literal></expr>:</case>

			<expr_stmt pos:start="33:25" pos:end="33:34"><expr pos:start="33:25" pos:end="33:33"><name pos:start="33:25" pos:end="33:29">Cflag</name> <operator pos:start="33:31" pos:end="33:31">=</operator> <literal type="number" pos:start="33:33" pos:end="33:33">1</literal></expr>;</expr_stmt>

			<break pos:start="35:25" pos:end="35:30">break;</break>

		<case pos:start="37:17" pos:end="37:25">case <expr pos:start="37:22" pos:end="37:24"><literal type="char" pos:start="37:22" pos:end="37:24">'P'</literal></expr>:</case>

			<expr_stmt pos:start="39:25" pos:end="39:34"><expr pos:start="39:25" pos:end="39:33"><name pos:start="39:25" pos:end="39:29">Pflag</name> <operator pos:start="39:31" pos:end="39:31">=</operator> <literal type="number" pos:start="39:33" pos:end="39:33">1</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="41:25" pos:end="41:47"><expr pos:start="41:25" pos:end="41:46"><name pos:start="41:25" pos:end="41:31">pattern</name> <operator pos:start="41:33" pos:end="41:33">=</operator> <call pos:start="41:35" pos:end="41:46"><name pos:start="41:35" pos:end="41:38">atoi</name><argument_list pos:start="41:39" pos:end="41:46">(<argument pos:start="41:40" pos:end="41:45"><expr pos:start="41:40" pos:end="41:45"><name pos:start="41:40" pos:end="41:45">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="43:25" pos:end="43:30">break;</break>

		<case pos:start="45:17" pos:end="45:25">case <expr pos:start="45:22" pos:end="45:24"><literal type="char" pos:start="45:22" pos:end="45:24">'q'</literal></expr>:</case>

			<expr_stmt pos:start="47:25" pos:end="47:34"><expr pos:start="47:25" pos:end="47:33"><name pos:start="47:25" pos:end="47:29">qflag</name> <operator pos:start="47:31" pos:end="47:31">=</operator> <literal type="number" pos:start="47:33" pos:end="47:33">1</literal></expr>;</expr_stmt>

			<break pos:start="49:25" pos:end="49:30">break;</break>

		<case pos:start="51:17" pos:end="51:25">case <expr pos:start="51:22" pos:end="51:24"><literal type="char" pos:start="51:22" pos:end="51:24">'v'</literal></expr>:</case>

			<expr_stmt pos:start="53:25" pos:end="53:34"><expr pos:start="53:25" pos:end="53:33"><name pos:start="53:25" pos:end="53:29">vflag</name> <operator pos:start="53:31" pos:end="53:31">=</operator> <literal type="number" pos:start="53:33" pos:end="53:33">1</literal></expr>;</expr_stmt>

			<break pos:start="55:25" pos:end="55:30">break;</break>

		<default pos:start="57:17" pos:end="57:24">default:</default>

			<return pos:start="59:25" pos:end="59:57">return <expr pos:start="59:32" pos:end="59:56"><call pos:start="59:32" pos:end="59:56"><name pos:start="59:32" pos:end="59:44">command_usage</name><argument_list pos:start="59:45" pos:end="59:56">(<argument pos:start="59:46" pos:end="59:55"><expr pos:start="59:46" pos:end="59:55"><operator pos:start="59:46" pos:end="59:46">&amp;</operator><name pos:start="59:47" pos:end="59:55">readv_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

		</block_content>}</block></switch>

	</block_content>}</block></while>



	<if_stmt pos:start="67:9" pos:end="69:49"><if pos:start="67:9" pos:end="69:49">if <condition pos:start="67:12" pos:end="67:30">(<expr pos:start="67:13" pos:end="67:29"><name pos:start="67:13" pos:end="67:18">optind</name> <operator pos:start="67:20" pos:end="67:20">&gt;</operator> <name pos:start="67:22" pos:end="67:25">argc</name> <operator pos:start="67:27" pos:end="67:27">-</operator> <literal type="number" pos:start="67:29" pos:end="67:29">2</literal></expr>)</condition><block type="pseudo" pos:start="69:17" pos:end="69:49"><block_content pos:start="69:17" pos:end="69:49">

		<return pos:start="69:17" pos:end="69:49">return <expr pos:start="69:24" pos:end="69:48"><call pos:start="69:24" pos:end="69:48"><name pos:start="69:24" pos:end="69:36">command_usage</name><argument_list pos:start="69:37" pos:end="69:48">(<argument pos:start="69:38" pos:end="69:47"><expr pos:start="69:38" pos:end="69:47"><operator pos:start="69:38" pos:end="69:38">&amp;</operator><name pos:start="69:39" pos:end="69:47">readv_cmd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>





	<expr_stmt pos:start="75:9" pos:end="75:38"><expr pos:start="75:9" pos:end="75:37"><name pos:start="75:9" pos:end="75:14">offset</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <call pos:start="75:18" pos:end="75:37"><name pos:start="75:18" pos:end="75:23">cvtnum</name><argument_list pos:start="75:24" pos:end="75:37">(<argument pos:start="75:25" pos:end="75:36"><expr pos:start="75:25" pos:end="75:36"><name pos:start="75:25" pos:end="75:36"><name pos:start="75:25" pos:end="75:28">argv</name><index pos:start="75:29" pos:end="75:36">[<expr pos:start="75:30" pos:end="75:35"><name pos:start="75:30" pos:end="75:35">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="77:9" pos:end="83:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="77:23">(<expr pos:start="77:13" pos:end="77:22"><name pos:start="77:13" pos:end="77:18">offset</name> <operator pos:start="77:20" pos:end="77:20">&lt;</operator> <literal type="number" pos:start="77:22" pos:end="77:22">0</literal></expr>)</condition> <block pos:start="77:25" pos:end="83:9">{<block_content pos:start="79:17" pos:end="81:25">

		<expr_stmt pos:start="79:17" pos:end="79:76"><expr pos:start="79:17" pos:end="79:75"><call pos:start="79:17" pos:end="79:75"><name pos:start="79:17" pos:end="79:22">printf</name><argument_list pos:start="79:23" pos:end="79:75">(<argument pos:start="79:24" pos:end="79:60"><expr pos:start="79:24" pos:end="79:60"><literal type="string" pos:start="79:24" pos:end="79:60">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="79:63" pos:end="79:74"><expr pos:start="79:63" pos:end="79:74"><name pos:start="79:63" pos:end="79:74"><name pos:start="79:63" pos:end="79:66">argv</name><index pos:start="79:67" pos:end="79:74">[<expr pos:start="79:68" pos:end="79:73"><name pos:start="79:68" pos:end="79:73">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="81:17" pos:end="81:25">return <expr pos:start="81:24" pos:end="81:24"><literal type="number" pos:start="81:24" pos:end="81:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="85:9" pos:end="85:17"><expr pos:start="85:9" pos:end="85:16"><name pos:start="85:9" pos:end="85:14">optind</name><operator pos:start="85:15" pos:end="85:16">++</operator></expr>;</expr_stmt>



	<if_stmt pos:start="89:9" pos:end="97:9"><if pos:start="89:9" pos:end="97:9">if <condition pos:start="89:12" pos:end="89:27">(<expr pos:start="89:13" pos:end="89:26"><name pos:start="89:13" pos:end="89:18">offset</name> <operator pos:start="89:20" pos:end="89:20">&amp;</operator> <literal type="number" pos:start="89:22" pos:end="89:26">0x1ff</literal></expr>)</condition> <block pos:start="89:29" pos:end="97:9">{<block_content pos:start="91:17" pos:end="95:25">

		<expr_stmt pos:start="91:17" pos:end="93:43"><expr pos:start="91:17" pos:end="93:42"><call pos:start="91:17" pos:end="93:42"><name pos:start="91:17" pos:end="91:22">printf</name><argument_list pos:start="91:23" pos:end="93:42">(<argument pos:start="91:24" pos:end="91:60"><expr pos:start="91:24" pos:end="91:60"><literal type="string" pos:start="91:24" pos:end="91:60">"offset %lld is not sector aligned\n"</literal></expr></argument>,

			<argument pos:start="93:25" pos:end="93:41"><expr pos:start="93:25" pos:end="93:41"><operator pos:start="93:25" pos:end="93:25">(</operator><name pos:start="93:26" pos:end="93:29">long</name> <name pos:start="93:31" pos:end="93:34">long</name><operator pos:start="93:35" pos:end="93:35">)</operator><name pos:start="93:36" pos:end="93:41">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="95:17" pos:end="95:25">return <expr pos:start="95:24" pos:end="95:24"><literal type="number" pos:start="95:24" pos:end="95:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="101:9" pos:end="101:31"><expr pos:start="101:9" pos:end="101:30"><name pos:start="101:9" pos:end="101:14">nr_iov</name> <operator pos:start="101:16" pos:end="101:16">=</operator> <name pos:start="101:18" pos:end="101:21">argc</name> <operator pos:start="101:23" pos:end="101:23">-</operator> <name pos:start="101:25" pos:end="101:30">optind</name></expr>;</expr_stmt>

	<expr_stmt pos:start="103:9" pos:end="103:63"><expr pos:start="103:9" pos:end="103:62"><name pos:start="103:9" pos:end="103:11">buf</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="103:62"><name pos:start="103:15" pos:end="103:26">create_iovec</name><argument_list pos:start="103:27" pos:end="103:62">(<argument pos:start="103:28" pos:end="103:32"><expr pos:start="103:28" pos:end="103:32"><operator pos:start="103:28" pos:end="103:28">&amp;</operator><name pos:start="103:29" pos:end="103:32">qiov</name></expr></argument>, <argument pos:start="103:35" pos:end="103:47"><expr pos:start="103:35" pos:end="103:47"><operator pos:start="103:35" pos:end="103:35">&amp;</operator><name pos:start="103:36" pos:end="103:47"><name pos:start="103:36" pos:end="103:39">argv</name><index pos:start="103:40" pos:end="103:47">[<expr pos:start="103:41" pos:end="103:46"><name pos:start="103:41" pos:end="103:46">optind</name></expr>]</index></name></expr></argument>, <argument pos:start="103:50" pos:end="103:55"><expr pos:start="103:50" pos:end="103:55"><name pos:start="103:50" pos:end="103:55">nr_iov</name></expr></argument>, <argument pos:start="103:58" pos:end="103:61"><expr pos:start="103:58" pos:end="103:61"><literal type="number" pos:start="103:58" pos:end="103:61">0xab</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="107:9" pos:end="107:32"><expr pos:start="107:9" pos:end="107:31"><call pos:start="107:9" pos:end="107:31"><name pos:start="107:9" pos:end="107:20">gettimeofday</name><argument_list pos:start="107:21" pos:end="107:31">(<argument pos:start="107:22" pos:end="107:24"><expr pos:start="107:22" pos:end="107:24"><operator pos:start="107:22" pos:end="107:22">&amp;</operator><name pos:start="107:23" pos:end="107:24">t1</name></expr></argument>, <argument pos:start="107:27" pos:end="107:30"><expr pos:start="107:27" pos:end="107:30"><name pos:start="107:27" pos:end="107:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="109:9" pos:end="109:50"><expr pos:start="109:9" pos:end="109:49"><name pos:start="109:9" pos:end="109:11">cnt</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <call pos:start="109:15" pos:end="109:49"><name pos:start="109:15" pos:end="109:26">do_aio_readv</name><argument_list pos:start="109:27" pos:end="109:49">(<argument pos:start="109:28" pos:end="109:32"><expr pos:start="109:28" pos:end="109:32"><operator pos:start="109:28" pos:end="109:28">&amp;</operator><name pos:start="109:29" pos:end="109:32">qiov</name></expr></argument>, <argument pos:start="109:35" pos:end="109:40"><expr pos:start="109:35" pos:end="109:40"><name pos:start="109:35" pos:end="109:40">offset</name></expr></argument>, <argument pos:start="109:43" pos:end="109:48"><expr pos:start="109:43" pos:end="109:48"><operator pos:start="109:43" pos:end="109:43">&amp;</operator><name pos:start="109:44" pos:end="109:48">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="111:9" pos:end="111:32"><expr pos:start="111:9" pos:end="111:31"><call pos:start="111:9" pos:end="111:31"><name pos:start="111:9" pos:end="111:20">gettimeofday</name><argument_list pos:start="111:21" pos:end="111:31">(<argument pos:start="111:22" pos:end="111:24"><expr pos:start="111:22" pos:end="111:24"><operator pos:start="111:22" pos:end="111:22">&amp;</operator><name pos:start="111:23" pos:end="111:24">t2</name></expr></argument>, <argument pos:start="111:27" pos:end="111:30"><expr pos:start="111:27" pos:end="111:30"><name pos:start="111:27" pos:end="111:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="115:9" pos:end="121:9"><if pos:start="115:9" pos:end="121:9">if <condition pos:start="115:12" pos:end="115:20">(<expr pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:15">cnt</name> <operator pos:start="115:17" pos:end="115:17">&lt;</operator> <literal type="number" pos:start="115:19" pos:end="115:19">0</literal></expr>)</condition> <block pos:start="115:22" pos:end="121:9">{<block_content pos:start="117:17" pos:end="119:25">

		<expr_stmt pos:start="117:17" pos:end="117:61"><expr pos:start="117:17" pos:end="117:60"><call pos:start="117:17" pos:end="117:60"><name pos:start="117:17" pos:end="117:22">printf</name><argument_list pos:start="117:23" pos:end="117:60">(<argument pos:start="117:24" pos:end="117:43"><expr pos:start="117:24" pos:end="117:43"><literal type="string" pos:start="117:24" pos:end="117:43">"readv failed: %s\n"</literal></expr></argument>, <argument pos:start="117:46" pos:end="117:59"><expr pos:start="117:46" pos:end="117:59"><call pos:start="117:46" pos:end="117:59"><name pos:start="117:46" pos:end="117:53">strerror</name><argument_list pos:start="117:54" pos:end="117:59">(<argument pos:start="117:55" pos:end="117:58"><expr pos:start="117:55" pos:end="117:58"><operator pos:start="117:55" pos:end="117:55">-</operator><name pos:start="117:56" pos:end="117:58">cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="119:17" pos:end="119:25">return <expr pos:start="119:24" pos:end="119:24"><literal type="number" pos:start="119:24" pos:end="119:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="125:9" pos:end="143:9"><if pos:start="125:9" pos:end="143:9">if <condition pos:start="125:12" pos:end="125:18">(<expr pos:start="125:13" pos:end="125:17"><name pos:start="125:13" pos:end="125:17">Pflag</name></expr>)</condition> <block pos:start="125:20" pos:end="143:9">{<block_content pos:start="127:17" pos:end="141:30">

		<decl_stmt pos:start="127:17" pos:end="127:50"><decl pos:start="127:17" pos:end="127:49"><type pos:start="127:17" pos:end="127:21"><name pos:start="127:17" pos:end="127:20">void</name><modifier pos:start="127:21" pos:end="127:21">*</modifier></type> <name pos:start="127:23" pos:end="127:29">cmp_buf</name> <init pos:start="127:31" pos:end="127:49">= <expr pos:start="127:33" pos:end="127:49"><call pos:start="127:33" pos:end="127:49"><name pos:start="127:33" pos:end="127:38">malloc</name><argument_list pos:start="127:39" pos:end="127:49">(<argument pos:start="127:40" pos:end="127:48"><expr pos:start="127:40" pos:end="127:48"><name pos:start="127:40" pos:end="127:48"><name pos:start="127:40" pos:end="127:43">qiov</name><operator pos:start="127:44" pos:end="127:44">.</operator><name pos:start="127:45" pos:end="127:48">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="129:17" pos:end="129:52"><expr pos:start="129:17" pos:end="129:51"><call pos:start="129:17" pos:end="129:51"><name pos:start="129:17" pos:end="129:22">memset</name><argument_list pos:start="129:23" pos:end="129:51">(<argument pos:start="129:24" pos:end="129:30"><expr pos:start="129:24" pos:end="129:30"><name pos:start="129:24" pos:end="129:30">cmp_buf</name></expr></argument>, <argument pos:start="129:33" pos:end="129:39"><expr pos:start="129:33" pos:end="129:39"><name pos:start="129:33" pos:end="129:39">pattern</name></expr></argument>, <argument pos:start="129:42" pos:end="129:50"><expr pos:start="129:42" pos:end="129:50"><name pos:start="129:42" pos:end="129:50"><name pos:start="129:42" pos:end="129:45">qiov</name><operator pos:start="129:46" pos:end="129:46">.</operator><name pos:start="129:47" pos:end="129:50">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="131:17" pos:end="139:17"><if pos:start="131:17" pos:end="139:17">if <condition pos:start="131:20" pos:end="131:52">(<expr pos:start="131:21" pos:end="131:51"><call pos:start="131:21" pos:end="131:51"><name pos:start="131:21" pos:end="131:26">memcmp</name><argument_list pos:start="131:27" pos:end="131:51">(<argument pos:start="131:28" pos:end="131:30"><expr pos:start="131:28" pos:end="131:30"><name pos:start="131:28" pos:end="131:30">buf</name></expr></argument>, <argument pos:start="131:33" pos:end="131:39"><expr pos:start="131:33" pos:end="131:39"><name pos:start="131:33" pos:end="131:39">cmp_buf</name></expr></argument>, <argument pos:start="131:42" pos:end="131:50"><expr pos:start="131:42" pos:end="131:50"><name pos:start="131:42" pos:end="131:50"><name pos:start="131:42" pos:end="131:45">qiov</name><operator pos:start="131:46" pos:end="131:46">.</operator><name pos:start="131:47" pos:end="131:50">size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="131:54" pos:end="139:17">{<block_content pos:start="133:25" pos:end="137:63">

			<expr_stmt pos:start="133:25" pos:end="137:63"><expr pos:start="133:25" pos:end="137:62"><call pos:start="133:25" pos:end="137:62"><name pos:start="133:25" pos:end="133:30">printf</name><argument_list pos:start="133:31" pos:end="137:62">(<argument pos:start="133:32" pos:end="135:45"><expr pos:start="133:32" pos:end="135:45"><literal type="string" pos:start="133:32" pos:end="133:77">"Pattern verification failed at offset %lld, "</literal>

				<literal type="string" pos:start="135:33" pos:end="135:45">"%zd bytes\n"</literal></expr></argument>,

				<argument pos:start="137:33" pos:end="137:50"><expr pos:start="137:33" pos:end="137:50"><operator pos:start="137:33" pos:end="137:33">(</operator><name pos:start="137:34" pos:end="137:37">long</name> <name pos:start="137:39" pos:end="137:42">long</name><operator pos:start="137:43" pos:end="137:43">)</operator> <name pos:start="137:45" pos:end="137:50">offset</name></expr></argument>, <argument pos:start="137:53" pos:end="137:61"><expr pos:start="137:53" pos:end="137:61"><name pos:start="137:53" pos:end="137:61"><name pos:start="137:53" pos:end="137:56">qiov</name><operator pos:start="137:57" pos:end="137:57">.</operator><name pos:start="137:58" pos:end="137:61">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

		<expr_stmt pos:start="141:17" pos:end="141:30"><expr pos:start="141:17" pos:end="141:29"><call pos:start="141:17" pos:end="141:29"><name pos:start="141:17" pos:end="141:20">free</name><argument_list pos:start="141:21" pos:end="141:29">(<argument pos:start="141:22" pos:end="141:28"><expr pos:start="141:22" pos:end="141:28"><name pos:start="141:22" pos:end="141:28">cmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="147:9" pos:end="149:25"><if pos:start="147:9" pos:end="149:25">if <condition pos:start="147:12" pos:end="147:18">(<expr pos:start="147:13" pos:end="147:17"><name pos:start="147:13" pos:end="147:17">qflag</name></expr>)</condition><block type="pseudo" pos:start="149:17" pos:end="149:25"><block_content pos:start="149:17" pos:end="149:25">

		<return pos:start="149:17" pos:end="149:25">return <expr pos:start="149:24" pos:end="149:24"><literal type="number" pos:start="149:24" pos:end="149:24">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="153:9" pos:end="155:52"><if pos:start="153:9" pos:end="155:52">if <condition pos:start="153:12" pos:end="153:18">(<expr pos:start="153:13" pos:end="153:17"><name pos:start="153:13" pos:end="153:17">vflag</name></expr>)</condition><block type="pseudo" pos:start="155:17" pos:end="155:52"><block_content pos:start="155:17" pos:end="155:52">

		<expr_stmt pos:start="155:17" pos:end="155:52"><expr pos:start="155:17" pos:end="155:51"><call pos:start="155:17" pos:end="155:51"><name pos:start="155:17" pos:end="155:27">dump_buffer</name><argument_list pos:start="155:28" pos:end="155:51">(<argument pos:start="155:29" pos:end="155:31"><expr pos:start="155:29" pos:end="155:31"><name pos:start="155:29" pos:end="155:31">buf</name></expr></argument>, <argument pos:start="155:34" pos:end="155:39"><expr pos:start="155:34" pos:end="155:39"><name pos:start="155:34" pos:end="155:39">offset</name></expr></argument>, <argument pos:start="155:42" pos:end="155:50"><expr pos:start="155:42" pos:end="155:50"><name pos:start="155:42" pos:end="155:50"><name pos:start="155:42" pos:end="155:45">qiov</name><operator pos:start="155:46" pos:end="155:46">.</operator><name pos:start="155:47" pos:end="155:50">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<comment type="block" pos:start="159:9" pos:end="159:64">/* Finally, report back -- -C gives a parsable format */</comment>

	<expr_stmt pos:start="161:9" pos:end="161:26"><expr pos:start="161:9" pos:end="161:25"><name pos:start="161:9" pos:end="161:10">t2</name> <operator pos:start="161:12" pos:end="161:12">=</operator> <call pos:start="161:14" pos:end="161:25"><name pos:start="161:14" pos:end="161:17">tsub</name><argument_list pos:start="161:18" pos:end="161:25">(<argument pos:start="161:19" pos:end="161:20"><expr pos:start="161:19" pos:end="161:20"><name pos:start="161:19" pos:end="161:20">t2</name></expr></argument>, <argument pos:start="161:23" pos:end="161:24"><expr pos:start="161:23" pos:end="161:24"><name pos:start="161:23" pos:end="161:24">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="163:9" pos:end="163:72"><expr pos:start="163:9" pos:end="163:71"><call pos:start="163:9" pos:end="163:71"><name pos:start="163:9" pos:end="163:20">print_report</name><argument_list pos:start="163:21" pos:end="163:71">(<argument pos:start="163:22" pos:end="163:27"><expr pos:start="163:22" pos:end="163:27"><literal type="string" pos:start="163:22" pos:end="163:27">"read"</literal></expr></argument>, <argument pos:start="163:30" pos:end="163:32"><expr pos:start="163:30" pos:end="163:32"><operator pos:start="163:30" pos:end="163:30">&amp;</operator><name pos:start="163:31" pos:end="163:32">t2</name></expr></argument>, <argument pos:start="163:35" pos:end="163:40"><expr pos:start="163:35" pos:end="163:40"><name pos:start="163:35" pos:end="163:40">offset</name></expr></argument>, <argument pos:start="163:43" pos:end="163:51"><expr pos:start="163:43" pos:end="163:51"><name pos:start="163:43" pos:end="163:51"><name pos:start="163:43" pos:end="163:46">qiov</name><operator pos:start="163:47" pos:end="163:47">.</operator><name pos:start="163:48" pos:end="163:51">size</name></name></expr></argument>, <argument pos:start="163:54" pos:end="163:58"><expr pos:start="163:54" pos:end="163:58"><name pos:start="163:54" pos:end="163:58">total</name></expr></argument>, <argument pos:start="163:61" pos:end="163:63"><expr pos:start="163:61" pos:end="163:63"><name pos:start="163:61" pos:end="163:63">cnt</name></expr></argument>, <argument pos:start="163:66" pos:end="163:70"><expr pos:start="163:66" pos:end="163:70"><name pos:start="163:66" pos:end="163:70">Cflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="167:9" pos:end="167:26"><expr pos:start="167:9" pos:end="167:25"><call pos:start="167:9" pos:end="167:25"><name pos:start="167:9" pos:end="167:20">qemu_io_free</name><argument_list pos:start="167:21" pos:end="167:25">(<argument pos:start="167:22" pos:end="167:24"><expr pos:start="167:22" pos:end="167:24"><name pos:start="167:22" pos:end="167:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<return pos:start="171:9" pos:end="171:17">return <expr pos:start="171:16" pos:end="171:16"><literal type="number" pos:start="171:16" pos:end="171:16">0</literal></expr>;</return>

</block_content>}</block>
</unit>
