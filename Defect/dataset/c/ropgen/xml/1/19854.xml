<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19854.c" pos:tabs="8"><function pos:start="1:1" pos:end="409:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:34">tcg_out_qemu_st</name><parameter_list pos:start="1:35" pos:end="3:44">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:48"><name pos:start="1:36" pos:end="1:45">TCGContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:58"><decl pos:start="1:51" pos:end="1:58"><type pos:start="1:51" pos:end="1:58"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:58">cond</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:34"><decl pos:start="3:17" pos:end="3:34"><type pos:start="3:17" pos:end="3:34"><specifier pos:start="3:17" pos:end="3:21">const</specifier> <name pos:start="3:23" pos:end="3:28">TCGArg</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:34">args</name></decl></parameter>, <parameter pos:start="3:37" pos:end="3:43"><decl pos:start="3:37" pos:end="3:43"><type pos:start="3:37" pos:end="3:43"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:43">opc</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="409:1">{<block_content pos:start="7:5" pos:end="408:0">

    <decl_stmt pos:start="7:5" pos:end="10:0"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">addr_reg</name></decl>, <decl pos:start="7:19" pos:end="7:26"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:26">data_reg</name></decl>, <decl pos:start="7:29" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:29" pos:end="7:37">data_reg2</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="9:1" pos:end="9:21">#<cpp:directive pos:start="9:2" pos:end="9:6">ifdef</cpp:directive> <name pos:start="9:8" pos:end="9:21">CONFIG_SOFTMMU</name></cpp:ifdef>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">mem_index</name></decl>, <decl pos:start="11:20" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:20" pos:end="11:25">s_bits</name></decl>;</decl_stmt>

<cpp:if pos:start="13:1" pos:end="13:27"># <cpp:directive pos:start="13:3" pos:end="13:4">if</cpp:directive> <expr pos:start="13:6" pos:end="13:27"><name pos:start="13:6" pos:end="13:21">TARGET_LONG_BITS</name> <operator pos:start="13:23" pos:end="13:24">==</operator> <literal type="number" pos:start="13:26" pos:end="13:27">64</literal></expr></cpp:if>

    <decl_stmt pos:start="15:5" pos:end="18:0"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">addr_reg2</name></decl>;</decl_stmt>

<cpp:endif pos:start="17:1" pos:end="17:7"># <cpp:directive pos:start="17:3" pos:end="17:7">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="19:5" pos:end="22:0"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">uint32_t</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:23">label_ptr</name></decl>;</decl_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="25:5" pos:end="25:23"><expr pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:12">data_reg</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <operator pos:start="25:16" pos:end="25:16">*</operator><name pos:start="25:17" pos:end="25:20">args</name><operator pos:start="25:21" pos:end="25:22">++</operator></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:22"><if pos:start="27:5" pos:end="29:28">if <condition pos:start="27:8" pos:end="27:17">(<expr pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:11">opc</name> <operator pos:start="27:13" pos:end="27:14">==</operator> <literal type="number" pos:start="27:16" pos:end="27:16">3</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:28"><block_content pos:start="29:9" pos:end="29:28">

        <expr_stmt pos:start="29:9" pos:end="29:28"><expr pos:start="29:9" pos:end="29:27"><name pos:start="29:9" pos:end="29:17">data_reg2</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <operator pos:start="29:21" pos:end="29:21">*</operator><name pos:start="29:22" pos:end="29:25">args</name><operator pos:start="29:26" pos:end="29:27">++</operator></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="31:5" pos:end="33:22">else<block type="pseudo" pos:start="33:9" pos:end="33:22"><block_content pos:start="33:9" pos:end="33:22">

        <expr_stmt pos:start="33:9" pos:end="33:22"><expr pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:17">data_reg2</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <literal type="number" pos:start="33:21" pos:end="33:21">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block" pos:start="33:24" pos:end="33:45">/* surpress warning */</comment>

    <expr_stmt pos:start="35:5" pos:end="38:0"><expr pos:start="35:5" pos:end="35:22"><name pos:start="35:5" pos:end="35:12">addr_reg</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <operator pos:start="35:16" pos:end="35:16">*</operator><name pos:start="35:17" pos:end="35:20">args</name><operator pos:start="35:21" pos:end="35:22">++</operator></expr>;</expr_stmt>

<cpp:if pos:start="37:1" pos:end="37:26">#<cpp:directive pos:start="37:2" pos:end="37:3">if</cpp:directive> <expr pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:20">TARGET_LONG_BITS</name> <operator pos:start="37:22" pos:end="37:23">==</operator> <literal type="number" pos:start="37:25" pos:end="37:26">64</literal></expr></cpp:if>

    <expr_stmt pos:start="39:5" pos:end="44:0"><expr pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:13">addr_reg2</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <operator pos:start="39:17" pos:end="39:17">*</operator><name pos:start="39:18" pos:end="39:21">args</name><operator pos:start="39:22" pos:end="39:23">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="43:1" pos:end="43:21">#<cpp:directive pos:start="43:2" pos:end="43:6">ifdef</cpp:directive> <name pos:start="43:8" pos:end="43:21">CONFIG_SOFTMMU</name></cpp:ifdef>

    <expr_stmt pos:start="45:5" pos:end="45:22"><expr pos:start="45:5" pos:end="45:21"><name pos:start="45:5" pos:end="45:13">mem_index</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <operator pos:start="45:17" pos:end="45:17">*</operator><name pos:start="45:18" pos:end="45:21">args</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:21"><expr pos:start="47:5" pos:end="47:20"><name pos:start="47:5" pos:end="47:10">s_bits</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <name pos:start="47:14" pos:end="47:16">opc</name> <operator pos:start="47:18" pos:end="47:18">&amp;</operator> <literal type="number" pos:start="47:20" pos:end="47:20">3</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="59:7">/* Should generate something like the following:

     *  shr r8, addr_reg, #TARGET_PAGE_BITS

     *  and r0, r8, #(CPU_TLB_SIZE - 1)   @ Assumption: CPU_TLB_BITS &lt;= 8

     *  add r0, env, r0 lsl #CPU_TLB_ENTRY_BITS

     */</comment>

    <expr_stmt pos:start="61:5" pos:end="63:69"><expr pos:start="61:5" pos:end="63:68"><call pos:start="61:5" pos:end="63:68"><name pos:start="61:5" pos:end="61:19">tcg_out_dat_reg</name><argument_list pos:start="61:20" pos:end="63:68">(<argument pos:start="61:21" pos:end="61:21"><expr pos:start="61:21" pos:end="61:21"><name pos:start="61:21" pos:end="61:21">s</name></expr></argument>, <argument pos:start="61:24" pos:end="61:30"><expr pos:start="61:24" pos:end="61:30"><name pos:start="61:24" pos:end="61:30">COND_AL</name></expr></argument>, <argument pos:start="61:33" pos:end="61:41"><expr pos:start="61:33" pos:end="61:41"><name pos:start="61:33" pos:end="61:41">ARITH_MOV</name></expr></argument>,

                    <argument pos:start="63:21" pos:end="63:21"><expr pos:start="63:21" pos:end="63:21"><literal type="number" pos:start="63:21" pos:end="63:21">8</literal></expr></argument>, <argument pos:start="63:24" pos:end="63:24"><expr pos:start="63:24" pos:end="63:24"><literal type="number" pos:start="63:24" pos:end="63:24">0</literal></expr></argument>, <argument pos:start="63:27" pos:end="63:34"><expr pos:start="63:27" pos:end="63:34"><name pos:start="63:27" pos:end="63:34">addr_reg</name></expr></argument>, <argument pos:start="63:37" pos:end="63:67"><expr pos:start="63:37" pos:end="63:67"><call pos:start="63:37" pos:end="63:67"><name pos:start="63:37" pos:end="63:49">SHIFT_IMM_LSR</name><argument_list pos:start="63:50" pos:end="63:67">(<argument pos:start="63:51" pos:end="63:66"><expr pos:start="63:51" pos:end="63:66"><name pos:start="63:51" pos:end="63:66">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="67:44"><expr pos:start="65:5" pos:end="67:43"><call pos:start="65:5" pos:end="67:43"><name pos:start="65:5" pos:end="65:19">tcg_out_dat_imm</name><argument_list pos:start="65:20" pos:end="67:43">(<argument pos:start="65:21" pos:end="65:21"><expr pos:start="65:21" pos:end="65:21"><name pos:start="65:21" pos:end="65:21">s</name></expr></argument>, <argument pos:start="65:24" pos:end="65:30"><expr pos:start="65:24" pos:end="65:30"><name pos:start="65:24" pos:end="65:30">COND_AL</name></expr></argument>, <argument pos:start="65:33" pos:end="65:41"><expr pos:start="65:33" pos:end="65:41"><name pos:start="65:33" pos:end="65:41">ARITH_AND</name></expr></argument>,

                    <argument pos:start="67:21" pos:end="67:21"><expr pos:start="67:21" pos:end="67:21"><literal type="number" pos:start="67:21" pos:end="67:21">0</literal></expr></argument>, <argument pos:start="67:24" pos:end="67:24"><expr pos:start="67:24" pos:end="67:24"><literal type="number" pos:start="67:24" pos:end="67:24">8</literal></expr></argument>, <argument pos:start="67:27" pos:end="67:42"><expr pos:start="67:27" pos:end="67:42"><name pos:start="67:27" pos:end="67:38">CPU_TLB_SIZE</name> <operator pos:start="67:40" pos:end="67:40">-</operator> <literal type="number" pos:start="67:42" pos:end="67:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="71:72"><expr pos:start="69:5" pos:end="71:71"><call pos:start="69:5" pos:end="71:71"><name pos:start="69:5" pos:end="69:19">tcg_out_dat_reg</name><argument_list pos:start="69:20" pos:end="71:71">(<argument pos:start="69:21" pos:end="69:21"><expr pos:start="69:21" pos:end="69:21"><name pos:start="69:21" pos:end="69:21">s</name></expr></argument>, <argument pos:start="69:24" pos:end="69:30"><expr pos:start="69:24" pos:end="69:30"><name pos:start="69:24" pos:end="69:30">COND_AL</name></expr></argument>, <argument pos:start="69:33" pos:end="69:41"><expr pos:start="69:33" pos:end="69:41"><name pos:start="69:33" pos:end="69:41">ARITH_ADD</name></expr></argument>,

                    <argument pos:start="71:21" pos:end="71:21"><expr pos:start="71:21" pos:end="71:21"><literal type="number" pos:start="71:21" pos:end="71:21">0</literal></expr></argument>, <argument pos:start="71:24" pos:end="71:32"><expr pos:start="71:24" pos:end="71:32"><name pos:start="71:24" pos:end="71:32">TCG_AREG0</name></expr></argument>, <argument pos:start="71:35" pos:end="71:35"><expr pos:start="71:35" pos:end="71:35"><literal type="number" pos:start="71:35" pos:end="71:35">0</literal></expr></argument>, <argument pos:start="71:38" pos:end="71:70"><expr pos:start="71:38" pos:end="71:70"><call pos:start="71:38" pos:end="71:70"><name pos:start="71:38" pos:end="71:50">SHIFT_IMM_LSL</name><argument_list pos:start="71:51" pos:end="71:70">(<argument pos:start="71:52" pos:end="71:69"><expr pos:start="71:52" pos:end="71:69"><name pos:start="71:52" pos:end="71:69">CPU_TLB_ENTRY_BITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="73:5" pos:end="85:7">/* In the

     *  ldr r1 [r0, #(offsetof(CPUState, tlb_table[mem_index][0].addr_write))]

     * below, the offset is likely to exceed 12 bits if mem_index != 0 and

     * not exceed otherwise, so use an

     *  add r0, r0, #(mem_index * sizeof *CPUState.tlb_table)

     * before.

     */</comment>

    <if_stmt pos:start="87:5" pos:end="93:56"><if pos:start="87:5" pos:end="93:56">if <condition pos:start="87:8" pos:end="87:18">(<expr pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:17">mem_index</name></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="93:56"><block_content pos:start="89:9" pos:end="93:56">

        <expr_stmt pos:start="89:9" pos:end="93:56"><expr pos:start="89:9" pos:end="93:55"><call pos:start="89:9" pos:end="93:55"><name pos:start="89:9" pos:end="89:23">tcg_out_dat_imm</name><argument_list pos:start="89:24" pos:end="93:55">(<argument pos:start="89:25" pos:end="89:25"><expr pos:start="89:25" pos:end="89:25"><name pos:start="89:25" pos:end="89:25">s</name></expr></argument>, <argument pos:start="89:28" pos:end="89:34"><expr pos:start="89:28" pos:end="89:34"><name pos:start="89:28" pos:end="89:34">COND_AL</name></expr></argument>, <argument pos:start="89:37" pos:end="89:45"><expr pos:start="89:37" pos:end="89:45"><name pos:start="89:37" pos:end="89:45">ARITH_ADD</name></expr></argument>, <argument pos:start="89:48" pos:end="89:48"><expr pos:start="89:48" pos:end="89:48"><literal type="number" pos:start="89:48" pos:end="89:48">0</literal></expr></argument>, <argument pos:start="89:51" pos:end="89:51"><expr pos:start="89:51" pos:end="89:51"><literal type="number" pos:start="89:51" pos:end="89:51">0</literal></expr></argument>,

                        <argument pos:start="91:25" pos:end="93:54"><expr pos:start="91:25" pos:end="93:54"><operator pos:start="91:25" pos:end="91:25">(</operator><name pos:start="91:26" pos:end="91:34">mem_index</name> <operator pos:start="91:36" pos:end="91:37">&lt;&lt;</operator> <operator pos:start="91:39" pos:end="91:39">(</operator><name pos:start="91:40" pos:end="91:48">TLB_SHIFT</name> <operator pos:start="91:50" pos:end="91:50">&amp;</operator> <literal type="number" pos:start="91:52" pos:end="91:52">1</literal><operator pos:start="91:53" pos:end="91:53">)</operator><operator pos:start="91:54" pos:end="91:54">)</operator> <operator pos:start="91:56" pos:end="91:56">|</operator>

                        <operator pos:start="93:25" pos:end="93:25">(</operator><operator pos:start="93:26" pos:end="93:26">(</operator><literal type="number" pos:start="93:27" pos:end="93:30">16</literal> <operator pos:start="93:30" pos:end="93:30">-</operator> <operator pos:start="93:32" pos:end="93:32">(</operator><name pos:start="93:33" pos:end="93:41">TLB_SHIFT</name> <operator pos:start="93:43" pos:end="93:44">&gt;&gt;</operator> <literal type="number" pos:start="93:46" pos:end="93:46">1</literal><operator pos:start="93:47" pos:end="93:47">)</operator><operator pos:start="93:48" pos:end="93:48">)</operator> <operator pos:start="93:50" pos:end="93:51">&lt;&lt;</operator> <literal type="number" pos:start="93:53" pos:end="93:53">8</literal><operator pos:start="93:54" pos:end="93:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="95:5" pos:end="97:68"><expr pos:start="95:5" pos:end="97:67"><call pos:start="95:5" pos:end="97:67"><name pos:start="95:5" pos:end="95:19">tcg_out_ld32_12</name><argument_list pos:start="95:20" pos:end="97:67">(<argument pos:start="95:21" pos:end="95:21"><expr pos:start="95:21" pos:end="95:21"><name pos:start="95:21" pos:end="95:21">s</name></expr></argument>, <argument pos:start="95:24" pos:end="95:30"><expr pos:start="95:24" pos:end="95:30"><name pos:start="95:24" pos:end="95:30">COND_AL</name></expr></argument>, <argument pos:start="95:33" pos:end="95:33"><expr pos:start="95:33" pos:end="95:33"><literal type="number" pos:start="95:33" pos:end="95:33">1</literal></expr></argument>, <argument pos:start="95:36" pos:end="95:36"><expr pos:start="95:36" pos:end="95:36"><literal type="number" pos:start="95:36" pos:end="95:36">0</literal></expr></argument>,

                    <argument pos:start="97:21" pos:end="97:66"><expr pos:start="97:21" pos:end="97:66"><call pos:start="97:21" pos:end="97:66"><name pos:start="97:21" pos:end="97:28">offsetof</name><argument_list pos:start="97:29" pos:end="97:66">(<argument pos:start="97:30" pos:end="97:37"><expr pos:start="97:30" pos:end="97:37"><name pos:start="97:30" pos:end="97:37">CPUState</name></expr></argument>, <argument pos:start="97:40" pos:end="97:65"><expr pos:start="97:40" pos:end="97:65"><name pos:start="97:40" pos:end="97:54"><name pos:start="97:40" pos:end="97:48">tlb_table</name><index pos:start="97:49" pos:end="97:51">[<expr pos:start="97:50" pos:end="97:50"><literal type="number" pos:start="97:50" pos:end="97:50">0</literal></expr>]</index><index pos:start="97:52" pos:end="97:54">[<expr pos:start="97:53" pos:end="97:53"><literal type="number" pos:start="97:53" pos:end="97:53">0</literal></expr>]</index></name><operator pos:start="97:55" pos:end="97:55">.</operator><name pos:start="97:56" pos:end="97:65">addr_write</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="101:62"><expr pos:start="99:5" pos:end="101:61"><call pos:start="99:5" pos:end="101:61"><name pos:start="99:5" pos:end="99:19">tcg_out_dat_reg</name><argument_list pos:start="99:20" pos:end="101:61">(<argument pos:start="99:21" pos:end="99:21"><expr pos:start="99:21" pos:end="99:21"><name pos:start="99:21" pos:end="99:21">s</name></expr></argument>, <argument pos:start="99:24" pos:end="99:30"><expr pos:start="99:24" pos:end="99:30"><name pos:start="99:24" pos:end="99:30">COND_AL</name></expr></argument>, <argument pos:start="99:33" pos:end="99:41"><expr pos:start="99:33" pos:end="99:41"><name pos:start="99:33" pos:end="99:41">ARITH_CMP</name></expr></argument>,

                    <argument pos:start="101:21" pos:end="101:21"><expr pos:start="101:21" pos:end="101:21"><literal type="number" pos:start="101:21" pos:end="101:21">0</literal></expr></argument>, <argument pos:start="101:24" pos:end="101:24"><expr pos:start="101:24" pos:end="101:24"><literal type="number" pos:start="101:24" pos:end="101:24">1</literal></expr></argument>, <argument pos:start="101:27" pos:end="101:27"><expr pos:start="101:27" pos:end="101:27"><literal type="number" pos:start="101:27" pos:end="101:27">8</literal></expr></argument>, <argument pos:start="101:30" pos:end="101:60"><expr pos:start="101:30" pos:end="101:60"><call pos:start="101:30" pos:end="101:60"><name pos:start="101:30" pos:end="101:42">SHIFT_IMM_LSL</name><argument_list pos:start="101:43" pos:end="101:60">(<argument pos:start="101:44" pos:end="101:59"><expr pos:start="101:44" pos:end="101:59"><name pos:start="101:44" pos:end="101:59">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="103:5" pos:end="103:27">/* Check alignment.  */</comment>

    <if_stmt pos:start="105:5" pos:end="112:0"><if pos:start="105:5" pos:end="112:0">if <condition pos:start="105:8" pos:end="105:15">(<expr pos:start="105:9" pos:end="105:14"><name pos:start="105:9" pos:end="105:14">s_bits</name></expr>)</condition><block type="pseudo" pos:start="107:9" pos:end="112:0"><block_content pos:start="107:9" pos:end="112:0">

        <expr_stmt pos:start="107:9" pos:end="112:0"><expr pos:start="107:9" pos:end="109:55"><call pos:start="107:9" pos:end="109:55"><name pos:start="107:9" pos:end="107:23">tcg_out_dat_imm</name><argument_list pos:start="107:24" pos:end="109:55">(<argument pos:start="107:25" pos:end="107:25"><expr pos:start="107:25" pos:end="107:25"><name pos:start="107:25" pos:end="107:25">s</name></expr></argument>, <argument pos:start="107:28" pos:end="107:34"><expr pos:start="107:28" pos:end="107:34"><name pos:start="107:28" pos:end="107:34">COND_EQ</name></expr></argument>, <argument pos:start="107:37" pos:end="107:45"><expr pos:start="107:37" pos:end="107:45"><name pos:start="107:37" pos:end="107:45">ARITH_TST</name></expr></argument>,

                        <argument pos:start="109:25" pos:end="109:25"><expr pos:start="109:25" pos:end="109:25"><literal type="number" pos:start="109:25" pos:end="109:25">0</literal></expr></argument>, <argument pos:start="109:28" pos:end="109:35"><expr pos:start="109:28" pos:end="109:35"><name pos:start="109:28" pos:end="109:35">addr_reg</name></expr></argument>, <argument pos:start="109:38" pos:end="109:54"><expr pos:start="109:38" pos:end="109:54"><operator pos:start="109:38" pos:end="109:38">(</operator><literal type="number" pos:start="109:39" pos:end="109:39">1</literal> <operator pos:start="109:41" pos:end="109:42">&lt;&lt;</operator> <name pos:start="109:44" pos:end="109:49">s_bits</name><operator pos:start="109:50" pos:end="109:50">)</operator> <operator pos:start="109:52" pos:end="109:52">-</operator> <literal type="number" pos:start="109:54" pos:end="109:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="111:1" pos:end="111:28">#  <cpp:directive pos:start="111:4" pos:end="111:5">if</cpp:directive> <expr pos:start="111:7" pos:end="111:28"><name pos:start="111:7" pos:end="111:22">TARGET_LONG_BITS</name> <operator pos:start="111:24" pos:end="111:25">==</operator> <literal type="number" pos:start="111:27" pos:end="111:28">64</literal></expr></cpp:if>

    <comment type="block" pos:start="113:5" pos:end="115:28">/* XXX: possibly we could use a block data load or writeback in

     * the first access.  */</comment>

    <expr_stmt pos:start="117:5" pos:end="121:25"><expr pos:start="117:5" pos:end="121:24"><call pos:start="117:5" pos:end="121:24"><name pos:start="117:5" pos:end="117:19">tcg_out_ld32_12</name><argument_list pos:start="117:20" pos:end="121:24">(<argument pos:start="117:21" pos:end="117:21"><expr pos:start="117:21" pos:end="117:21"><name pos:start="117:21" pos:end="117:21">s</name></expr></argument>, <argument pos:start="117:24" pos:end="117:30"><expr pos:start="117:24" pos:end="117:30"><name pos:start="117:24" pos:end="117:30">COND_EQ</name></expr></argument>, <argument pos:start="117:33" pos:end="117:33"><expr pos:start="117:33" pos:end="117:33"><literal type="number" pos:start="117:33" pos:end="117:33">1</literal></expr></argument>, <argument pos:start="117:36" pos:end="117:36"><expr pos:start="117:36" pos:end="117:36"><literal type="number" pos:start="117:36" pos:end="117:36">0</literal></expr></argument>,

                    <argument pos:start="119:21" pos:end="121:23"><expr pos:start="119:21" pos:end="121:23"><call pos:start="119:21" pos:end="119:66"><name pos:start="119:21" pos:end="119:28">offsetof</name><argument_list pos:start="119:29" pos:end="119:66">(<argument pos:start="119:30" pos:end="119:37"><expr pos:start="119:30" pos:end="119:37"><name pos:start="119:30" pos:end="119:37">CPUState</name></expr></argument>, <argument pos:start="119:40" pos:end="119:65"><expr pos:start="119:40" pos:end="119:65"><name pos:start="119:40" pos:end="119:54"><name pos:start="119:40" pos:end="119:48">tlb_table</name><index pos:start="119:49" pos:end="119:51">[<expr pos:start="119:50" pos:end="119:50"><literal type="number" pos:start="119:50" pos:end="119:50">0</literal></expr>]</index><index pos:start="119:52" pos:end="119:54">[<expr pos:start="119:53" pos:end="119:53"><literal type="number" pos:start="119:53" pos:end="119:53">0</literal></expr>]</index></name><operator pos:start="119:55" pos:end="119:55">.</operator><name pos:start="119:56" pos:end="119:65">addr_write</name></expr></argument>)</argument_list></call>

                    <operator pos:start="121:21" pos:end="121:21">+</operator> <literal type="number" pos:start="121:23" pos:end="121:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="128:0"><expr pos:start="123:5" pos:end="125:54"><call pos:start="123:5" pos:end="125:54"><name pos:start="123:5" pos:end="123:19">tcg_out_dat_reg</name><argument_list pos:start="123:20" pos:end="125:54">(<argument pos:start="123:21" pos:end="123:21"><expr pos:start="123:21" pos:end="123:21"><name pos:start="123:21" pos:end="123:21">s</name></expr></argument>, <argument pos:start="123:24" pos:end="123:30"><expr pos:start="123:24" pos:end="123:30"><name pos:start="123:24" pos:end="123:30">COND_EQ</name></expr></argument>, <argument pos:start="123:33" pos:end="123:41"><expr pos:start="123:33" pos:end="123:41"><name pos:start="123:33" pos:end="123:41">ARITH_CMP</name></expr></argument>,

                    <argument pos:start="125:21" pos:end="125:21"><expr pos:start="125:21" pos:end="125:21"><literal type="number" pos:start="125:21" pos:end="125:21">0</literal></expr></argument>, <argument pos:start="125:24" pos:end="125:24"><expr pos:start="125:24" pos:end="125:24"><literal type="number" pos:start="125:24" pos:end="125:24">1</literal></expr></argument>, <argument pos:start="125:27" pos:end="125:35"><expr pos:start="125:27" pos:end="125:35"><name pos:start="125:27" pos:end="125:35">addr_reg2</name></expr></argument>, <argument pos:start="125:38" pos:end="125:53"><expr pos:start="125:38" pos:end="125:53"><call pos:start="125:38" pos:end="125:53"><name pos:start="125:38" pos:end="125:50">SHIFT_IMM_LSL</name><argument_list pos:start="125:51" pos:end="125:53">(<argument pos:start="125:52" pos:end="125:52"><expr pos:start="125:52" pos:end="125:52"><literal type="number" pos:start="125:52" pos:end="125:52">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="127:1" pos:end="127:8">#  <cpp:directive pos:start="127:4" pos:end="127:8">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="129:5" pos:end="131:64"><expr pos:start="129:5" pos:end="131:63"><call pos:start="129:5" pos:end="131:63"><name pos:start="129:5" pos:end="129:19">tcg_out_ld32_12</name><argument_list pos:start="129:20" pos:end="131:63">(<argument pos:start="129:21" pos:end="129:21"><expr pos:start="129:21" pos:end="129:21"><name pos:start="129:21" pos:end="129:21">s</name></expr></argument>, <argument pos:start="129:24" pos:end="129:30"><expr pos:start="129:24" pos:end="129:30"><name pos:start="129:24" pos:end="129:30">COND_EQ</name></expr></argument>, <argument pos:start="129:33" pos:end="129:33"><expr pos:start="129:33" pos:end="129:33"><literal type="number" pos:start="129:33" pos:end="129:33">1</literal></expr></argument>, <argument pos:start="129:36" pos:end="129:36"><expr pos:start="129:36" pos:end="129:36"><literal type="number" pos:start="129:36" pos:end="129:36">0</literal></expr></argument>,

                    <argument pos:start="131:21" pos:end="131:62"><expr pos:start="131:21" pos:end="131:62"><call pos:start="131:21" pos:end="131:62"><name pos:start="131:21" pos:end="131:28">offsetof</name><argument_list pos:start="131:29" pos:end="131:62">(<argument pos:start="131:30" pos:end="131:37"><expr pos:start="131:30" pos:end="131:37"><name pos:start="131:30" pos:end="131:37">CPUState</name></expr></argument>, <argument pos:start="131:40" pos:end="131:61"><expr pos:start="131:40" pos:end="131:61"><name pos:start="131:40" pos:end="131:54"><name pos:start="131:40" pos:end="131:48">tlb_table</name><index pos:start="131:49" pos:end="131:51">[<expr pos:start="131:50" pos:end="131:50"><literal type="number" pos:start="131:50" pos:end="131:50">0</literal></expr>]</index><index pos:start="131:52" pos:end="131:54">[<expr pos:start="131:53" pos:end="131:53"><literal type="number" pos:start="131:53" pos:end="131:53">0</literal></expr>]</index></name><operator pos:start="131:55" pos:end="131:55">.</operator><name pos:start="131:56" pos:end="131:61">addend</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="135:5" pos:end="177:5">switch <condition pos:start="135:12" pos:end="135:16">(<expr pos:start="135:13" pos:end="135:15"><name pos:start="135:13" pos:end="135:15">opc</name></expr>)</condition> <block pos:start="135:18" pos:end="177:5">{<block_content pos:start="137:5" pos:end="175:14">

    <case pos:start="137:5" pos:end="137:11">case <expr pos:start="137:10" pos:end="137:10"><literal type="number" pos:start="137:10" pos:end="137:10">0</literal></expr>:</case>

        <expr_stmt pos:start="139:9" pos:end="139:57"><expr pos:start="139:9" pos:end="139:56"><call pos:start="139:9" pos:end="139:56"><name pos:start="139:9" pos:end="139:21">tcg_out_st8_r</name><argument_list pos:start="139:22" pos:end="139:56">(<argument pos:start="139:23" pos:end="139:23"><expr pos:start="139:23" pos:end="139:23"><name pos:start="139:23" pos:end="139:23">s</name></expr></argument>, <argument pos:start="139:26" pos:end="139:32"><expr pos:start="139:26" pos:end="139:32"><name pos:start="139:26" pos:end="139:32">COND_EQ</name></expr></argument>, <argument pos:start="139:35" pos:end="139:42"><expr pos:start="139:35" pos:end="139:42"><name pos:start="139:35" pos:end="139:42">data_reg</name></expr></argument>, <argument pos:start="139:45" pos:end="139:52"><expr pos:start="139:45" pos:end="139:52"><name pos:start="139:45" pos:end="139:52">addr_reg</name></expr></argument>, <argument pos:start="139:55" pos:end="139:55"><expr pos:start="139:55" pos:end="139:55"><literal type="number" pos:start="139:55" pos:end="139:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="141:9" pos:end="141:14">break;</break>

    <case pos:start="143:5" pos:end="143:15">case <expr pos:start="143:10" pos:end="143:14"><literal type="number" pos:start="143:10" pos:end="143:10">0</literal> <operator pos:start="143:12" pos:end="143:12">|</operator> <literal type="number" pos:start="143:14" pos:end="143:14">4</literal></expr>:</case>

        <expr_stmt pos:start="145:9" pos:end="145:58"><expr pos:start="145:9" pos:end="145:57"><call pos:start="145:9" pos:end="145:57"><name pos:start="145:9" pos:end="145:22">tcg_out_st8s_r</name><argument_list pos:start="145:23" pos:end="145:57">(<argument pos:start="145:24" pos:end="145:24"><expr pos:start="145:24" pos:end="145:24"><name pos:start="145:24" pos:end="145:24">s</name></expr></argument>, <argument pos:start="145:27" pos:end="145:33"><expr pos:start="145:27" pos:end="145:33"><name pos:start="145:27" pos:end="145:33">COND_EQ</name></expr></argument>, <argument pos:start="145:36" pos:end="145:43"><expr pos:start="145:36" pos:end="145:43"><name pos:start="145:36" pos:end="145:43">data_reg</name></expr></argument>, <argument pos:start="145:46" pos:end="145:53"><expr pos:start="145:46" pos:end="145:53"><name pos:start="145:46" pos:end="145:53">addr_reg</name></expr></argument>, <argument pos:start="145:56" pos:end="145:56"><expr pos:start="145:56" pos:end="145:56"><literal type="number" pos:start="145:56" pos:end="145:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="147:9" pos:end="147:14">break;</break>

    <case pos:start="149:5" pos:end="149:11">case <expr pos:start="149:10" pos:end="149:10"><literal type="number" pos:start="149:10" pos:end="149:10">1</literal></expr>:</case>

        <expr_stmt pos:start="151:9" pos:end="151:59"><expr pos:start="151:9" pos:end="151:58"><call pos:start="151:9" pos:end="151:58"><name pos:start="151:9" pos:end="151:23">tcg_out_st16u_r</name><argument_list pos:start="151:24" pos:end="151:58">(<argument pos:start="151:25" pos:end="151:25"><expr pos:start="151:25" pos:end="151:25"><name pos:start="151:25" pos:end="151:25">s</name></expr></argument>, <argument pos:start="151:28" pos:end="151:34"><expr pos:start="151:28" pos:end="151:34"><name pos:start="151:28" pos:end="151:34">COND_EQ</name></expr></argument>, <argument pos:start="151:37" pos:end="151:44"><expr pos:start="151:37" pos:end="151:44"><name pos:start="151:37" pos:end="151:44">data_reg</name></expr></argument>, <argument pos:start="151:47" pos:end="151:54"><expr pos:start="151:47" pos:end="151:54"><name pos:start="151:47" pos:end="151:54">addr_reg</name></expr></argument>, <argument pos:start="151:57" pos:end="151:57"><expr pos:start="151:57" pos:end="151:57"><literal type="number" pos:start="151:57" pos:end="151:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="153:9" pos:end="153:14">break;</break>

    <case pos:start="155:5" pos:end="155:15">case <expr pos:start="155:10" pos:end="155:14"><literal type="number" pos:start="155:10" pos:end="155:10">1</literal> <operator pos:start="155:12" pos:end="155:12">|</operator> <literal type="number" pos:start="155:14" pos:end="155:14">4</literal></expr>:</case>

        <expr_stmt pos:start="157:9" pos:end="157:59"><expr pos:start="157:9" pos:end="157:58"><call pos:start="157:9" pos:end="157:58"><name pos:start="157:9" pos:end="157:23">tcg_out_st16s_r</name><argument_list pos:start="157:24" pos:end="157:58">(<argument pos:start="157:25" pos:end="157:25"><expr pos:start="157:25" pos:end="157:25"><name pos:start="157:25" pos:end="157:25">s</name></expr></argument>, <argument pos:start="157:28" pos:end="157:34"><expr pos:start="157:28" pos:end="157:34"><name pos:start="157:28" pos:end="157:34">COND_EQ</name></expr></argument>, <argument pos:start="157:37" pos:end="157:44"><expr pos:start="157:37" pos:end="157:44"><name pos:start="157:37" pos:end="157:44">data_reg</name></expr></argument>, <argument pos:start="157:47" pos:end="157:54"><expr pos:start="157:47" pos:end="157:54"><name pos:start="157:47" pos:end="157:54">addr_reg</name></expr></argument>, <argument pos:start="157:57" pos:end="157:57"><expr pos:start="157:57" pos:end="157:57"><literal type="number" pos:start="157:57" pos:end="157:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="159:9" pos:end="159:14">break;</break>

    <case pos:start="161:5" pos:end="161:11">case <expr pos:start="161:10" pos:end="161:10"><literal type="number" pos:start="161:10" pos:end="161:10">2</literal></expr>:</case>

    <default pos:start="163:5" pos:end="163:12">default:</default>

        <expr_stmt pos:start="165:9" pos:end="165:58"><expr pos:start="165:9" pos:end="165:57"><call pos:start="165:9" pos:end="165:57"><name pos:start="165:9" pos:end="165:22">tcg_out_st32_r</name><argument_list pos:start="165:23" pos:end="165:57">(<argument pos:start="165:24" pos:end="165:24"><expr pos:start="165:24" pos:end="165:24"><name pos:start="165:24" pos:end="165:24">s</name></expr></argument>, <argument pos:start="165:27" pos:end="165:33"><expr pos:start="165:27" pos:end="165:33"><name pos:start="165:27" pos:end="165:33">COND_EQ</name></expr></argument>, <argument pos:start="165:36" pos:end="165:43"><expr pos:start="165:36" pos:end="165:43"><name pos:start="165:36" pos:end="165:43">data_reg</name></expr></argument>, <argument pos:start="165:46" pos:end="165:53"><expr pos:start="165:46" pos:end="165:53"><name pos:start="165:46" pos:end="165:53">addr_reg</name></expr></argument>, <argument pos:start="165:56" pos:end="165:56"><expr pos:start="165:56" pos:end="165:56"><literal type="number" pos:start="165:56" pos:end="165:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="167:9" pos:end="167:14">break;</break>

    <case pos:start="169:5" pos:end="169:11">case <expr pos:start="169:10" pos:end="169:10"><literal type="number" pos:start="169:10" pos:end="169:10">3</literal></expr>:</case>

        <expr_stmt pos:start="171:9" pos:end="171:60"><expr pos:start="171:9" pos:end="171:59"><call pos:start="171:9" pos:end="171:59"><name pos:start="171:9" pos:end="171:24">tcg_out_st32_rwb</name><argument_list pos:start="171:25" pos:end="171:59">(<argument pos:start="171:26" pos:end="171:26"><expr pos:start="171:26" pos:end="171:26"><name pos:start="171:26" pos:end="171:26">s</name></expr></argument>, <argument pos:start="171:29" pos:end="171:35"><expr pos:start="171:29" pos:end="171:35"><name pos:start="171:29" pos:end="171:35">COND_EQ</name></expr></argument>, <argument pos:start="171:38" pos:end="171:45"><expr pos:start="171:38" pos:end="171:45"><name pos:start="171:38" pos:end="171:45">data_reg</name></expr></argument>, <argument pos:start="171:48" pos:end="171:48"><expr pos:start="171:48" pos:end="171:48"><literal type="number" pos:start="171:48" pos:end="171:48">1</literal></expr></argument>, <argument pos:start="171:51" pos:end="171:58"><expr pos:start="171:51" pos:end="171:58"><name pos:start="171:51" pos:end="171:58">addr_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:53"><expr pos:start="173:9" pos:end="173:52"><call pos:start="173:9" pos:end="173:52"><name pos:start="173:9" pos:end="173:23">tcg_out_st32_12</name><argument_list pos:start="173:24" pos:end="173:52">(<argument pos:start="173:25" pos:end="173:25"><expr pos:start="173:25" pos:end="173:25"><name pos:start="173:25" pos:end="173:25">s</name></expr></argument>, <argument pos:start="173:28" pos:end="173:34"><expr pos:start="173:28" pos:end="173:34"><name pos:start="173:28" pos:end="173:34">COND_EQ</name></expr></argument>, <argument pos:start="173:37" pos:end="173:45"><expr pos:start="173:37" pos:end="173:45"><name pos:start="173:37" pos:end="173:45">data_reg2</name></expr></argument>, <argument pos:start="173:48" pos:end="173:48"><expr pos:start="173:48" pos:end="173:48"><literal type="number" pos:start="173:48" pos:end="173:48">1</literal></expr></argument>, <argument pos:start="173:51" pos:end="173:51"><expr pos:start="173:51" pos:end="173:51"><literal type="number" pos:start="173:51" pos:end="173:51">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="175:9" pos:end="175:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="181:5" pos:end="181:37"><expr pos:start="181:5" pos:end="181:36"><name pos:start="181:5" pos:end="181:13">label_ptr</name> <operator pos:start="181:15" pos:end="181:15">=</operator> <operator pos:start="181:17" pos:end="181:17">(</operator><name pos:start="181:18" pos:end="181:21">void</name> <operator pos:start="181:23" pos:end="181:23">*</operator><operator pos:start="181:24" pos:end="181:24">)</operator> <name pos:start="181:26" pos:end="181:36"><name pos:start="181:26" pos:end="181:26">s</name><operator pos:start="181:27" pos:end="181:28">-&gt;</operator><name pos:start="181:29" pos:end="181:36">code_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:29"><expr pos:start="183:5" pos:end="183:28"><call pos:start="183:5" pos:end="183:28"><name pos:start="183:5" pos:end="183:13">tcg_out_b</name><argument_list pos:start="183:14" pos:end="183:28">(<argument pos:start="183:15" pos:end="183:15"><expr pos:start="183:15" pos:end="183:15"><name pos:start="183:15" pos:end="183:15">s</name></expr></argument>, <argument pos:start="183:18" pos:end="183:24"><expr pos:start="183:18" pos:end="183:24"><name pos:start="183:18" pos:end="183:24">COND_EQ</name></expr></argument>, <argument pos:start="183:27" pos:end="183:27"><expr pos:start="183:27" pos:end="183:27"><literal type="number" pos:start="183:27" pos:end="183:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="187:5" pos:end="187:66">/* TODO: move this code to where the constants pool will be */</comment>

    <if_stmt pos:start="189:5" pos:end="196:0"><if pos:start="189:5" pos:end="196:0">if <condition pos:start="189:8" pos:end="189:17">(<expr pos:start="189:9" pos:end="189:16"><name pos:start="189:9" pos:end="189:16">addr_reg</name></expr>)</condition><block type="pseudo" pos:start="191:9" pos:end="196:0"><block_content pos:start="191:9" pos:end="196:0">

        <expr_stmt pos:start="191:9" pos:end="196:0"><expr pos:start="191:9" pos:end="193:57"><call pos:start="191:9" pos:end="193:57"><name pos:start="191:9" pos:end="191:23">tcg_out_dat_reg</name><argument_list pos:start="191:24" pos:end="193:57">(<argument pos:start="191:25" pos:end="191:25"><expr pos:start="191:25" pos:end="191:25"><name pos:start="191:25" pos:end="191:25">s</name></expr></argument>, <argument pos:start="191:28" pos:end="191:31"><expr pos:start="191:28" pos:end="191:31"><name pos:start="191:28" pos:end="191:31">cond</name></expr></argument>, <argument pos:start="191:34" pos:end="191:42"><expr pos:start="191:34" pos:end="191:42"><name pos:start="191:34" pos:end="191:42">ARITH_MOV</name></expr></argument>,

                        <argument pos:start="193:25" pos:end="193:25"><expr pos:start="193:25" pos:end="193:25"><literal type="number" pos:start="193:25" pos:end="193:25">0</literal></expr></argument>, <argument pos:start="193:28" pos:end="193:28"><expr pos:start="193:28" pos:end="193:28"><literal type="number" pos:start="193:28" pos:end="193:28">0</literal></expr></argument>, <argument pos:start="193:31" pos:end="193:38"><expr pos:start="193:31" pos:end="193:38"><name pos:start="193:31" pos:end="193:38">addr_reg</name></expr></argument>, <argument pos:start="193:41" pos:end="193:56"><expr pos:start="193:41" pos:end="193:56"><call pos:start="193:41" pos:end="193:56"><name pos:start="193:41" pos:end="193:53">SHIFT_IMM_LSL</name><argument_list pos:start="193:54" pos:end="193:56">(<argument pos:start="193:55" pos:end="193:55"><expr pos:start="193:55" pos:end="193:55"><literal type="number" pos:start="193:55" pos:end="193:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="195:1" pos:end="195:27"># <cpp:directive pos:start="195:3" pos:end="195:4">if</cpp:directive> <expr pos:start="195:6" pos:end="195:27"><name pos:start="195:6" pos:end="195:21">TARGET_LONG_BITS</name> <operator pos:start="195:23" pos:end="195:24">==</operator> <literal type="number" pos:start="195:26" pos:end="195:27">32</literal></expr></cpp:if>

    <switch pos:start="197:5" pos:end="254:0">switch <condition pos:start="197:12" pos:end="197:16">(<expr pos:start="197:13" pos:end="197:15"><name pos:start="197:13" pos:end="197:15">opc</name></expr>)</condition> <block pos:start="197:18" pos:end="254:0">{<block_content pos:start="199:5" pos:end="249:14">

    <case pos:start="199:5" pos:end="199:11">case <expr pos:start="199:10" pos:end="199:10"><literal type="number" pos:start="199:10" pos:end="199:10">0</literal></expr>:</case>

        <expr_stmt pos:start="201:9" pos:end="201:63"><expr pos:start="201:9" pos:end="201:62"><call pos:start="201:9" pos:end="201:62"><name pos:start="201:9" pos:end="201:23">tcg_out_dat_imm</name><argument_list pos:start="201:24" pos:end="201:62">(<argument pos:start="201:25" pos:end="201:25"><expr pos:start="201:25" pos:end="201:25"><name pos:start="201:25" pos:end="201:25">s</name></expr></argument>, <argument pos:start="201:28" pos:end="201:31"><expr pos:start="201:28" pos:end="201:31"><name pos:start="201:28" pos:end="201:31">cond</name></expr></argument>, <argument pos:start="201:34" pos:end="201:42"><expr pos:start="201:34" pos:end="201:42"><name pos:start="201:34" pos:end="201:42">ARITH_AND</name></expr></argument>, <argument pos:start="201:45" pos:end="201:45"><expr pos:start="201:45" pos:end="201:45"><literal type="number" pos:start="201:45" pos:end="201:45">1</literal></expr></argument>, <argument pos:start="201:48" pos:end="201:55"><expr pos:start="201:48" pos:end="201:55"><name pos:start="201:48" pos:end="201:55">data_reg</name></expr></argument>, <argument pos:start="201:58" pos:end="201:61"><expr pos:start="201:58" pos:end="201:61"><literal type="number" pos:start="201:58" pos:end="201:61">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:61"><expr pos:start="203:9" pos:end="203:60"><call pos:start="203:9" pos:end="203:60"><name pos:start="203:9" pos:end="203:23">tcg_out_dat_imm</name><argument_list pos:start="203:24" pos:end="203:60">(<argument pos:start="203:25" pos:end="203:25"><expr pos:start="203:25" pos:end="203:25"><name pos:start="203:25" pos:end="203:25">s</name></expr></argument>, <argument pos:start="203:28" pos:end="203:31"><expr pos:start="203:28" pos:end="203:31"><name pos:start="203:28" pos:end="203:31">cond</name></expr></argument>, <argument pos:start="203:34" pos:end="203:42"><expr pos:start="203:34" pos:end="203:42"><name pos:start="203:34" pos:end="203:42">ARITH_MOV</name></expr></argument>, <argument pos:start="203:45" pos:end="203:45"><expr pos:start="203:45" pos:end="203:45"><literal type="number" pos:start="203:45" pos:end="203:45">2</literal></expr></argument>, <argument pos:start="203:48" pos:end="203:48"><expr pos:start="203:48" pos:end="203:48"><literal type="number" pos:start="203:48" pos:end="203:48">0</literal></expr></argument>, <argument pos:start="203:51" pos:end="203:59"><expr pos:start="203:51" pos:end="203:59"><name pos:start="203:51" pos:end="203:59">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="205:9" pos:end="205:14">break;</break>

    <case pos:start="207:5" pos:end="207:11">case <expr pos:start="207:10" pos:end="207:10"><literal type="number" pos:start="207:10" pos:end="207:10">1</literal></expr>:</case>

        <expr_stmt pos:start="209:9" pos:end="211:59"><expr pos:start="209:9" pos:end="211:58"><call pos:start="209:9" pos:end="211:58"><name pos:start="209:9" pos:end="209:23">tcg_out_dat_reg</name><argument_list pos:start="209:24" pos:end="211:58">(<argument pos:start="209:25" pos:end="209:25"><expr pos:start="209:25" pos:end="209:25"><name pos:start="209:25" pos:end="209:25">s</name></expr></argument>, <argument pos:start="209:28" pos:end="209:31"><expr pos:start="209:28" pos:end="209:31"><name pos:start="209:28" pos:end="209:31">cond</name></expr></argument>, <argument pos:start="209:34" pos:end="209:42"><expr pos:start="209:34" pos:end="209:42"><name pos:start="209:34" pos:end="209:42">ARITH_MOV</name></expr></argument>,

                        <argument pos:start="211:25" pos:end="211:25"><expr pos:start="211:25" pos:end="211:25"><literal type="number" pos:start="211:25" pos:end="211:25">1</literal></expr></argument>, <argument pos:start="211:28" pos:end="211:28"><expr pos:start="211:28" pos:end="211:28"><literal type="number" pos:start="211:28" pos:end="211:28">0</literal></expr></argument>, <argument pos:start="211:31" pos:end="211:38"><expr pos:start="211:31" pos:end="211:38"><name pos:start="211:31" pos:end="211:38">data_reg</name></expr></argument>, <argument pos:start="211:41" pos:end="211:57"><expr pos:start="211:41" pos:end="211:57"><call pos:start="211:41" pos:end="211:57"><name pos:start="211:41" pos:end="211:53">SHIFT_IMM_LSL</name><argument_list pos:start="211:54" pos:end="211:57">(<argument pos:start="211:55" pos:end="211:56"><expr pos:start="211:55" pos:end="211:56"><literal type="number" pos:start="211:55" pos:end="211:56">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="215:52"><expr pos:start="213:9" pos:end="215:51"><call pos:start="213:9" pos:end="215:51"><name pos:start="213:9" pos:end="213:23">tcg_out_dat_reg</name><argument_list pos:start="213:24" pos:end="215:51">(<argument pos:start="213:25" pos:end="213:25"><expr pos:start="213:25" pos:end="213:25"><name pos:start="213:25" pos:end="213:25">s</name></expr></argument>, <argument pos:start="213:28" pos:end="213:31"><expr pos:start="213:28" pos:end="213:31"><name pos:start="213:28" pos:end="213:31">cond</name></expr></argument>, <argument pos:start="213:34" pos:end="213:42"><expr pos:start="213:34" pos:end="213:42"><name pos:start="213:34" pos:end="213:42">ARITH_MOV</name></expr></argument>,

                        <argument pos:start="215:25" pos:end="215:25"><expr pos:start="215:25" pos:end="215:25"><literal type="number" pos:start="215:25" pos:end="215:25">1</literal></expr></argument>, <argument pos:start="215:28" pos:end="215:28"><expr pos:start="215:28" pos:end="215:28"><literal type="number" pos:start="215:28" pos:end="215:28">0</literal></expr></argument>, <argument pos:start="215:31" pos:end="215:31"><expr pos:start="215:31" pos:end="215:31"><literal type="number" pos:start="215:31" pos:end="215:31">1</literal></expr></argument>, <argument pos:start="215:34" pos:end="215:50"><expr pos:start="215:34" pos:end="215:50"><call pos:start="215:34" pos:end="215:50"><name pos:start="215:34" pos:end="215:46">SHIFT_IMM_LSR</name><argument_list pos:start="215:47" pos:end="215:50">(<argument pos:start="215:48" pos:end="215:49"><expr pos:start="215:48" pos:end="215:49"><literal type="number" pos:start="215:48" pos:end="215:49">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:61"><expr pos:start="217:9" pos:end="217:60"><call pos:start="217:9" pos:end="217:60"><name pos:start="217:9" pos:end="217:23">tcg_out_dat_imm</name><argument_list pos:start="217:24" pos:end="217:60">(<argument pos:start="217:25" pos:end="217:25"><expr pos:start="217:25" pos:end="217:25"><name pos:start="217:25" pos:end="217:25">s</name></expr></argument>, <argument pos:start="217:28" pos:end="217:31"><expr pos:start="217:28" pos:end="217:31"><name pos:start="217:28" pos:end="217:31">cond</name></expr></argument>, <argument pos:start="217:34" pos:end="217:42"><expr pos:start="217:34" pos:end="217:42"><name pos:start="217:34" pos:end="217:42">ARITH_MOV</name></expr></argument>, <argument pos:start="217:45" pos:end="217:45"><expr pos:start="217:45" pos:end="217:45"><literal type="number" pos:start="217:45" pos:end="217:45">2</literal></expr></argument>, <argument pos:start="217:48" pos:end="217:48"><expr pos:start="217:48" pos:end="217:48"><literal type="number" pos:start="217:48" pos:end="217:48">0</literal></expr></argument>, <argument pos:start="217:51" pos:end="217:59"><expr pos:start="217:51" pos:end="217:59"><name pos:start="217:51" pos:end="217:59">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="219:9" pos:end="219:14">break;</break>

    <case pos:start="221:5" pos:end="221:11">case <expr pos:start="221:10" pos:end="221:10"><literal type="number" pos:start="221:10" pos:end="221:10">2</literal></expr>:</case>

        <if_stmt pos:start="223:9" pos:end="227:62"><if pos:start="223:9" pos:end="227:62">if <condition pos:start="223:12" pos:end="223:26">(<expr pos:start="223:13" pos:end="223:25"><name pos:start="223:13" pos:end="223:20">data_reg</name> <operator pos:start="223:22" pos:end="223:23">!=</operator> <literal type="number" pos:start="223:25" pos:end="223:25">1</literal></expr>)</condition><block type="pseudo" pos:start="225:13" pos:end="227:62"><block_content pos:start="225:13" pos:end="227:62">

            <expr_stmt pos:start="225:13" pos:end="227:62"><expr pos:start="225:13" pos:end="227:61"><call pos:start="225:13" pos:end="227:61"><name pos:start="225:13" pos:end="225:27">tcg_out_dat_reg</name><argument_list pos:start="225:28" pos:end="227:61">(<argument pos:start="225:29" pos:end="225:29"><expr pos:start="225:29" pos:end="225:29"><name pos:start="225:29" pos:end="225:29">s</name></expr></argument>, <argument pos:start="225:32" pos:end="225:35"><expr pos:start="225:32" pos:end="225:35"><name pos:start="225:32" pos:end="225:35">cond</name></expr></argument>, <argument pos:start="225:38" pos:end="225:46"><expr pos:start="225:38" pos:end="225:46"><name pos:start="225:38" pos:end="225:46">ARITH_MOV</name></expr></argument>,

                            <argument pos:start="227:29" pos:end="227:29"><expr pos:start="227:29" pos:end="227:29"><literal type="number" pos:start="227:29" pos:end="227:29">1</literal></expr></argument>, <argument pos:start="227:32" pos:end="227:32"><expr pos:start="227:32" pos:end="227:32"><literal type="number" pos:start="227:32" pos:end="227:32">0</literal></expr></argument>, <argument pos:start="227:35" pos:end="227:42"><expr pos:start="227:35" pos:end="227:42"><name pos:start="227:35" pos:end="227:42">data_reg</name></expr></argument>, <argument pos:start="227:45" pos:end="227:60"><expr pos:start="227:45" pos:end="227:60"><call pos:start="227:45" pos:end="227:60"><name pos:start="227:45" pos:end="227:57">SHIFT_IMM_LSL</name><argument_list pos:start="227:58" pos:end="227:60">(<argument pos:start="227:59" pos:end="227:59"><expr pos:start="227:59" pos:end="227:59"><literal type="number" pos:start="227:59" pos:end="227:59">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:61"><expr pos:start="229:9" pos:end="229:60"><call pos:start="229:9" pos:end="229:60"><name pos:start="229:9" pos:end="229:23">tcg_out_dat_imm</name><argument_list pos:start="229:24" pos:end="229:60">(<argument pos:start="229:25" pos:end="229:25"><expr pos:start="229:25" pos:end="229:25"><name pos:start="229:25" pos:end="229:25">s</name></expr></argument>, <argument pos:start="229:28" pos:end="229:31"><expr pos:start="229:28" pos:end="229:31"><name pos:start="229:28" pos:end="229:31">cond</name></expr></argument>, <argument pos:start="229:34" pos:end="229:42"><expr pos:start="229:34" pos:end="229:42"><name pos:start="229:34" pos:end="229:42">ARITH_MOV</name></expr></argument>, <argument pos:start="229:45" pos:end="229:45"><expr pos:start="229:45" pos:end="229:45"><literal type="number" pos:start="229:45" pos:end="229:45">2</literal></expr></argument>, <argument pos:start="229:48" pos:end="229:48"><expr pos:start="229:48" pos:end="229:48"><literal type="number" pos:start="229:48" pos:end="229:48">0</literal></expr></argument>, <argument pos:start="229:51" pos:end="229:59"><expr pos:start="229:51" pos:end="229:59"><name pos:start="229:51" pos:end="229:59">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="231:9" pos:end="231:14">break;</break>

    <case pos:start="233:5" pos:end="233:11">case <expr pos:start="233:10" pos:end="233:10"><literal type="number" pos:start="233:10" pos:end="233:10">3</literal></expr>:</case>

        <if_stmt pos:start="235:9" pos:end="239:62"><if pos:start="235:9" pos:end="239:62">if <condition pos:start="235:12" pos:end="235:26">(<expr pos:start="235:13" pos:end="235:25"><name pos:start="235:13" pos:end="235:20">data_reg</name> <operator pos:start="235:22" pos:end="235:23">!=</operator> <literal type="number" pos:start="235:25" pos:end="235:25">1</literal></expr>)</condition><block type="pseudo" pos:start="237:13" pos:end="239:62"><block_content pos:start="237:13" pos:end="239:62">

            <expr_stmt pos:start="237:13" pos:end="239:62"><expr pos:start="237:13" pos:end="239:61"><call pos:start="237:13" pos:end="239:61"><name pos:start="237:13" pos:end="237:27">tcg_out_dat_reg</name><argument_list pos:start="237:28" pos:end="239:61">(<argument pos:start="237:29" pos:end="237:29"><expr pos:start="237:29" pos:end="237:29"><name pos:start="237:29" pos:end="237:29">s</name></expr></argument>, <argument pos:start="237:32" pos:end="237:35"><expr pos:start="237:32" pos:end="237:35"><name pos:start="237:32" pos:end="237:35">cond</name></expr></argument>, <argument pos:start="237:38" pos:end="237:46"><expr pos:start="237:38" pos:end="237:46"><name pos:start="237:38" pos:end="237:46">ARITH_MOV</name></expr></argument>,

                            <argument pos:start="239:29" pos:end="239:29"><expr pos:start="239:29" pos:end="239:29"><literal type="number" pos:start="239:29" pos:end="239:29">1</literal></expr></argument>, <argument pos:start="239:32" pos:end="239:32"><expr pos:start="239:32" pos:end="239:32"><literal type="number" pos:start="239:32" pos:end="239:32">0</literal></expr></argument>, <argument pos:start="239:35" pos:end="239:42"><expr pos:start="239:35" pos:end="239:42"><name pos:start="239:35" pos:end="239:42">data_reg</name></expr></argument>, <argument pos:start="239:45" pos:end="239:60"><expr pos:start="239:45" pos:end="239:60"><call pos:start="239:45" pos:end="239:60"><name pos:start="239:45" pos:end="239:57">SHIFT_IMM_LSL</name><argument_list pos:start="239:58" pos:end="239:60">(<argument pos:start="239:59" pos:end="239:59"><expr pos:start="239:59" pos:end="239:59"><literal type="number" pos:start="239:59" pos:end="239:59">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="241:9" pos:end="245:63"><if pos:start="241:9" pos:end="245:63">if <condition pos:start="241:12" pos:end="241:27">(<expr pos:start="241:13" pos:end="241:26"><name pos:start="241:13" pos:end="241:21">data_reg2</name> <operator pos:start="241:23" pos:end="241:24">!=</operator> <literal type="number" pos:start="241:26" pos:end="241:26">2</literal></expr>)</condition><block type="pseudo" pos:start="243:13" pos:end="245:63"><block_content pos:start="243:13" pos:end="245:63">

            <expr_stmt pos:start="243:13" pos:end="245:63"><expr pos:start="243:13" pos:end="245:62"><call pos:start="243:13" pos:end="245:62"><name pos:start="243:13" pos:end="243:27">tcg_out_dat_reg</name><argument_list pos:start="243:28" pos:end="245:62">(<argument pos:start="243:29" pos:end="243:29"><expr pos:start="243:29" pos:end="243:29"><name pos:start="243:29" pos:end="243:29">s</name></expr></argument>, <argument pos:start="243:32" pos:end="243:35"><expr pos:start="243:32" pos:end="243:35"><name pos:start="243:32" pos:end="243:35">cond</name></expr></argument>, <argument pos:start="243:38" pos:end="243:46"><expr pos:start="243:38" pos:end="243:46"><name pos:start="243:38" pos:end="243:46">ARITH_MOV</name></expr></argument>,

                            <argument pos:start="245:29" pos:end="245:29"><expr pos:start="245:29" pos:end="245:29"><literal type="number" pos:start="245:29" pos:end="245:29">2</literal></expr></argument>, <argument pos:start="245:32" pos:end="245:32"><expr pos:start="245:32" pos:end="245:32"><literal type="number" pos:start="245:32" pos:end="245:32">0</literal></expr></argument>, <argument pos:start="245:35" pos:end="245:43"><expr pos:start="245:35" pos:end="245:43"><name pos:start="245:35" pos:end="245:43">data_reg2</name></expr></argument>, <argument pos:start="245:46" pos:end="245:61"><expr pos:start="245:46" pos:end="245:61"><call pos:start="245:46" pos:end="245:61"><name pos:start="245:46" pos:end="245:58">SHIFT_IMM_LSL</name><argument_list pos:start="245:59" pos:end="245:61">(<argument pos:start="245:60" pos:end="245:60"><expr pos:start="245:60" pos:end="245:60"><literal type="number" pos:start="245:60" pos:end="245:60">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:61"><expr pos:start="247:9" pos:end="247:60"><call pos:start="247:9" pos:end="247:60"><name pos:start="247:9" pos:end="247:23">tcg_out_dat_imm</name><argument_list pos:start="247:24" pos:end="247:60">(<argument pos:start="247:25" pos:end="247:25"><expr pos:start="247:25" pos:end="247:25"><name pos:start="247:25" pos:end="247:25">s</name></expr></argument>, <argument pos:start="247:28" pos:end="247:31"><expr pos:start="247:28" pos:end="247:31"><name pos:start="247:28" pos:end="247:31">cond</name></expr></argument>, <argument pos:start="247:34" pos:end="247:42"><expr pos:start="247:34" pos:end="247:42"><name pos:start="247:34" pos:end="247:42">ARITH_MOV</name></expr></argument>, <argument pos:start="247:45" pos:end="247:45"><expr pos:start="247:45" pos:end="247:45"><literal type="number" pos:start="247:45" pos:end="247:45">3</literal></expr></argument>, <argument pos:start="247:48" pos:end="247:48"><expr pos:start="247:48" pos:end="247:48"><literal type="number" pos:start="247:48" pos:end="247:48">0</literal></expr></argument>, <argument pos:start="247:51" pos:end="247:59"><expr pos:start="247:51" pos:end="247:59"><name pos:start="247:51" pos:end="247:59">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="249:9" pos:end="249:14">break;</break>

    </block_content>}</block></switch>

<cpp:else pos:start="253:1" pos:end="253:6"># <cpp:directive pos:start="253:3" pos:end="253:6">else</cpp:directive></cpp:else>

    <if_stmt pos:start="255:5" pos:end="259:59"><if pos:start="255:5" pos:end="259:59">if <condition pos:start="255:8" pos:end="255:23">(<expr pos:start="255:9" pos:end="255:22"><name pos:start="255:9" pos:end="255:17">addr_reg2</name> <operator pos:start="255:19" pos:end="255:20">!=</operator> <literal type="number" pos:start="255:22" pos:end="255:22">1</literal></expr>)</condition><block type="pseudo" pos:start="257:9" pos:end="259:59"><block_content pos:start="257:9" pos:end="259:59">

        <expr_stmt pos:start="257:9" pos:end="259:59"><expr pos:start="257:9" pos:end="259:58"><call pos:start="257:9" pos:end="259:58"><name pos:start="257:9" pos:end="257:23">tcg_out_dat_reg</name><argument_list pos:start="257:24" pos:end="259:58">(<argument pos:start="257:25" pos:end="257:25"><expr pos:start="257:25" pos:end="257:25"><name pos:start="257:25" pos:end="257:25">s</name></expr></argument>, <argument pos:start="257:28" pos:end="257:31"><expr pos:start="257:28" pos:end="257:31"><name pos:start="257:28" pos:end="257:31">cond</name></expr></argument>, <argument pos:start="257:34" pos:end="257:42"><expr pos:start="257:34" pos:end="257:42"><name pos:start="257:34" pos:end="257:42">ARITH_MOV</name></expr></argument>,

                        <argument pos:start="259:25" pos:end="259:25"><expr pos:start="259:25" pos:end="259:25"><literal type="number" pos:start="259:25" pos:end="259:25">1</literal></expr></argument>, <argument pos:start="259:28" pos:end="259:28"><expr pos:start="259:28" pos:end="259:28"><literal type="number" pos:start="259:28" pos:end="259:28">0</literal></expr></argument>, <argument pos:start="259:31" pos:end="259:39"><expr pos:start="259:31" pos:end="259:39"><name pos:start="259:31" pos:end="259:39">addr_reg2</name></expr></argument>, <argument pos:start="259:42" pos:end="259:57"><expr pos:start="259:42" pos:end="259:57"><call pos:start="259:42" pos:end="259:57"><name pos:start="259:42" pos:end="259:54">SHIFT_IMM_LSL</name><argument_list pos:start="259:55" pos:end="259:57">(<argument pos:start="259:56" pos:end="259:56"><expr pos:start="259:56" pos:end="259:56"><literal type="number" pos:start="259:56" pos:end="259:56">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <switch pos:start="261:5" pos:end="324:0">switch <condition pos:start="261:12" pos:end="261:16">(<expr pos:start="261:13" pos:end="261:15"><name pos:start="261:13" pos:end="261:15">opc</name></expr>)</condition> <block pos:start="261:18" pos:end="324:0">{<block_content pos:start="263:5" pos:end="315:14">

    <case pos:start="263:5" pos:end="263:11">case <expr pos:start="263:10" pos:end="263:10"><literal type="number" pos:start="263:10" pos:end="263:10">0</literal></expr>:</case>

        <expr_stmt pos:start="265:9" pos:end="265:63"><expr pos:start="265:9" pos:end="265:62"><call pos:start="265:9" pos:end="265:62"><name pos:start="265:9" pos:end="265:23">tcg_out_dat_imm</name><argument_list pos:start="265:24" pos:end="265:62">(<argument pos:start="265:25" pos:end="265:25"><expr pos:start="265:25" pos:end="265:25"><name pos:start="265:25" pos:end="265:25">s</name></expr></argument>, <argument pos:start="265:28" pos:end="265:31"><expr pos:start="265:28" pos:end="265:31"><name pos:start="265:28" pos:end="265:31">cond</name></expr></argument>, <argument pos:start="265:34" pos:end="265:42"><expr pos:start="265:34" pos:end="265:42"><name pos:start="265:34" pos:end="265:42">ARITH_AND</name></expr></argument>, <argument pos:start="265:45" pos:end="265:45"><expr pos:start="265:45" pos:end="265:45"><literal type="number" pos:start="265:45" pos:end="265:45">2</literal></expr></argument>, <argument pos:start="265:48" pos:end="265:55"><expr pos:start="265:48" pos:end="265:55"><name pos:start="265:48" pos:end="265:55">data_reg</name></expr></argument>, <argument pos:start="265:58" pos:end="265:61"><expr pos:start="265:58" pos:end="265:61"><literal type="number" pos:start="265:58" pos:end="265:61">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:61"><expr pos:start="267:9" pos:end="267:60"><call pos:start="267:9" pos:end="267:60"><name pos:start="267:9" pos:end="267:23">tcg_out_dat_imm</name><argument_list pos:start="267:24" pos:end="267:60">(<argument pos:start="267:25" pos:end="267:25"><expr pos:start="267:25" pos:end="267:25"><name pos:start="267:25" pos:end="267:25">s</name></expr></argument>, <argument pos:start="267:28" pos:end="267:31"><expr pos:start="267:28" pos:end="267:31"><name pos:start="267:28" pos:end="267:31">cond</name></expr></argument>, <argument pos:start="267:34" pos:end="267:42"><expr pos:start="267:34" pos:end="267:42"><name pos:start="267:34" pos:end="267:42">ARITH_MOV</name></expr></argument>, <argument pos:start="267:45" pos:end="267:45"><expr pos:start="267:45" pos:end="267:45"><literal type="number" pos:start="267:45" pos:end="267:45">3</literal></expr></argument>, <argument pos:start="267:48" pos:end="267:48"><expr pos:start="267:48" pos:end="267:48"><literal type="number" pos:start="267:48" pos:end="267:48">0</literal></expr></argument>, <argument pos:start="267:51" pos:end="267:59"><expr pos:start="267:51" pos:end="267:59"><name pos:start="267:51" pos:end="267:59">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="269:9" pos:end="269:14">break;</break>

    <case pos:start="271:5" pos:end="271:11">case <expr pos:start="271:10" pos:end="271:10"><literal type="number" pos:start="271:10" pos:end="271:10">1</literal></expr>:</case>

        <expr_stmt pos:start="273:9" pos:end="275:59"><expr pos:start="273:9" pos:end="275:58"><call pos:start="273:9" pos:end="275:58"><name pos:start="273:9" pos:end="273:23">tcg_out_dat_reg</name><argument_list pos:start="273:24" pos:end="275:58">(<argument pos:start="273:25" pos:end="273:25"><expr pos:start="273:25" pos:end="273:25"><name pos:start="273:25" pos:end="273:25">s</name></expr></argument>, <argument pos:start="273:28" pos:end="273:31"><expr pos:start="273:28" pos:end="273:31"><name pos:start="273:28" pos:end="273:31">cond</name></expr></argument>, <argument pos:start="273:34" pos:end="273:42"><expr pos:start="273:34" pos:end="273:42"><name pos:start="273:34" pos:end="273:42">ARITH_MOV</name></expr></argument>,

                        <argument pos:start="275:25" pos:end="275:25"><expr pos:start="275:25" pos:end="275:25"><literal type="number" pos:start="275:25" pos:end="275:25">2</literal></expr></argument>, <argument pos:start="275:28" pos:end="275:28"><expr pos:start="275:28" pos:end="275:28"><literal type="number" pos:start="275:28" pos:end="275:28">0</literal></expr></argument>, <argument pos:start="275:31" pos:end="275:38"><expr pos:start="275:31" pos:end="275:38"><name pos:start="275:31" pos:end="275:38">data_reg</name></expr></argument>, <argument pos:start="275:41" pos:end="275:57"><expr pos:start="275:41" pos:end="275:57"><call pos:start="275:41" pos:end="275:57"><name pos:start="275:41" pos:end="275:53">SHIFT_IMM_LSL</name><argument_list pos:start="275:54" pos:end="275:57">(<argument pos:start="275:55" pos:end="275:56"><expr pos:start="275:55" pos:end="275:56"><literal type="number" pos:start="275:55" pos:end="275:56">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="277:9" pos:end="279:52"><expr pos:start="277:9" pos:end="279:51"><call pos:start="277:9" pos:end="279:51"><name pos:start="277:9" pos:end="277:23">tcg_out_dat_reg</name><argument_list pos:start="277:24" pos:end="279:51">(<argument pos:start="277:25" pos:end="277:25"><expr pos:start="277:25" pos:end="277:25"><name pos:start="277:25" pos:end="277:25">s</name></expr></argument>, <argument pos:start="277:28" pos:end="277:31"><expr pos:start="277:28" pos:end="277:31"><name pos:start="277:28" pos:end="277:31">cond</name></expr></argument>, <argument pos:start="277:34" pos:end="277:42"><expr pos:start="277:34" pos:end="277:42"><name pos:start="277:34" pos:end="277:42">ARITH_MOV</name></expr></argument>,

                        <argument pos:start="279:25" pos:end="279:25"><expr pos:start="279:25" pos:end="279:25"><literal type="number" pos:start="279:25" pos:end="279:25">2</literal></expr></argument>, <argument pos:start="279:28" pos:end="279:28"><expr pos:start="279:28" pos:end="279:28"><literal type="number" pos:start="279:28" pos:end="279:28">0</literal></expr></argument>, <argument pos:start="279:31" pos:end="279:31"><expr pos:start="279:31" pos:end="279:31"><literal type="number" pos:start="279:31" pos:end="279:31">2</literal></expr></argument>, <argument pos:start="279:34" pos:end="279:50"><expr pos:start="279:34" pos:end="279:50"><call pos:start="279:34" pos:end="279:50"><name pos:start="279:34" pos:end="279:46">SHIFT_IMM_LSR</name><argument_list pos:start="279:47" pos:end="279:50">(<argument pos:start="279:48" pos:end="279:49"><expr pos:start="279:48" pos:end="279:49"><literal type="number" pos:start="279:48" pos:end="279:49">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:61"><expr pos:start="281:9" pos:end="281:60"><call pos:start="281:9" pos:end="281:60"><name pos:start="281:9" pos:end="281:23">tcg_out_dat_imm</name><argument_list pos:start="281:24" pos:end="281:60">(<argument pos:start="281:25" pos:end="281:25"><expr pos:start="281:25" pos:end="281:25"><name pos:start="281:25" pos:end="281:25">s</name></expr></argument>, <argument pos:start="281:28" pos:end="281:31"><expr pos:start="281:28" pos:end="281:31"><name pos:start="281:28" pos:end="281:31">cond</name></expr></argument>, <argument pos:start="281:34" pos:end="281:42"><expr pos:start="281:34" pos:end="281:42"><name pos:start="281:34" pos:end="281:42">ARITH_MOV</name></expr></argument>, <argument pos:start="281:45" pos:end="281:45"><expr pos:start="281:45" pos:end="281:45"><literal type="number" pos:start="281:45" pos:end="281:45">3</literal></expr></argument>, <argument pos:start="281:48" pos:end="281:48"><expr pos:start="281:48" pos:end="281:48"><literal type="number" pos:start="281:48" pos:end="281:48">0</literal></expr></argument>, <argument pos:start="281:51" pos:end="281:59"><expr pos:start="281:51" pos:end="281:59"><name pos:start="281:51" pos:end="281:59">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="283:9" pos:end="283:14">break;</break>

    <case pos:start="285:5" pos:end="285:11">case <expr pos:start="285:10" pos:end="285:10"><literal type="number" pos:start="285:10" pos:end="285:10">2</literal></expr>:</case>

        <if_stmt pos:start="287:9" pos:end="291:62"><if pos:start="287:9" pos:end="291:62">if <condition pos:start="287:12" pos:end="287:26">(<expr pos:start="287:13" pos:end="287:25"><name pos:start="287:13" pos:end="287:20">data_reg</name> <operator pos:start="287:22" pos:end="287:23">!=</operator> <literal type="number" pos:start="287:25" pos:end="287:25">2</literal></expr>)</condition><block type="pseudo" pos:start="289:13" pos:end="291:62"><block_content pos:start="289:13" pos:end="291:62">

            <expr_stmt pos:start="289:13" pos:end="291:62"><expr pos:start="289:13" pos:end="291:61"><call pos:start="289:13" pos:end="291:61"><name pos:start="289:13" pos:end="289:27">tcg_out_dat_reg</name><argument_list pos:start="289:28" pos:end="291:61">(<argument pos:start="289:29" pos:end="289:29"><expr pos:start="289:29" pos:end="289:29"><name pos:start="289:29" pos:end="289:29">s</name></expr></argument>, <argument pos:start="289:32" pos:end="289:35"><expr pos:start="289:32" pos:end="289:35"><name pos:start="289:32" pos:end="289:35">cond</name></expr></argument>, <argument pos:start="289:38" pos:end="289:46"><expr pos:start="289:38" pos:end="289:46"><name pos:start="289:38" pos:end="289:46">ARITH_MOV</name></expr></argument>,

                            <argument pos:start="291:29" pos:end="291:29"><expr pos:start="291:29" pos:end="291:29"><literal type="number" pos:start="291:29" pos:end="291:29">2</literal></expr></argument>, <argument pos:start="291:32" pos:end="291:32"><expr pos:start="291:32" pos:end="291:32"><literal type="number" pos:start="291:32" pos:end="291:32">0</literal></expr></argument>, <argument pos:start="291:35" pos:end="291:42"><expr pos:start="291:35" pos:end="291:42"><name pos:start="291:35" pos:end="291:42">data_reg</name></expr></argument>, <argument pos:start="291:45" pos:end="291:60"><expr pos:start="291:45" pos:end="291:60"><call pos:start="291:45" pos:end="291:60"><name pos:start="291:45" pos:end="291:57">SHIFT_IMM_LSL</name><argument_list pos:start="291:58" pos:end="291:60">(<argument pos:start="291:59" pos:end="291:59"><expr pos:start="291:59" pos:end="291:59"><literal type="number" pos:start="291:59" pos:end="291:59">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:61"><expr pos:start="293:9" pos:end="293:60"><call pos:start="293:9" pos:end="293:60"><name pos:start="293:9" pos:end="293:23">tcg_out_dat_imm</name><argument_list pos:start="293:24" pos:end="293:60">(<argument pos:start="293:25" pos:end="293:25"><expr pos:start="293:25" pos:end="293:25"><name pos:start="293:25" pos:end="293:25">s</name></expr></argument>, <argument pos:start="293:28" pos:end="293:31"><expr pos:start="293:28" pos:end="293:31"><name pos:start="293:28" pos:end="293:31">cond</name></expr></argument>, <argument pos:start="293:34" pos:end="293:42"><expr pos:start="293:34" pos:end="293:42"><name pos:start="293:34" pos:end="293:42">ARITH_MOV</name></expr></argument>, <argument pos:start="293:45" pos:end="293:45"><expr pos:start="293:45" pos:end="293:45"><literal type="number" pos:start="293:45" pos:end="293:45">3</literal></expr></argument>, <argument pos:start="293:48" pos:end="293:48"><expr pos:start="293:48" pos:end="293:48"><literal type="number" pos:start="293:48" pos:end="293:48">0</literal></expr></argument>, <argument pos:start="293:51" pos:end="293:59"><expr pos:start="293:51" pos:end="293:59"><name pos:start="293:51" pos:end="293:59">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="295:9" pos:end="295:14">break;</break>

    <case pos:start="297:5" pos:end="297:11">case <expr pos:start="297:10" pos:end="297:10"><literal type="number" pos:start="297:10" pos:end="297:10">3</literal></expr>:</case>

        <expr_stmt pos:start="299:9" pos:end="299:61"><expr pos:start="299:9" pos:end="299:60"><call pos:start="299:9" pos:end="299:60"><name pos:start="299:9" pos:end="299:23">tcg_out_dat_imm</name><argument_list pos:start="299:24" pos:end="299:60">(<argument pos:start="299:25" pos:end="299:25"><expr pos:start="299:25" pos:end="299:25"><name pos:start="299:25" pos:end="299:25">s</name></expr></argument>, <argument pos:start="299:28" pos:end="299:31"><expr pos:start="299:28" pos:end="299:31"><name pos:start="299:28" pos:end="299:31">cond</name></expr></argument>, <argument pos:start="299:34" pos:end="299:42"><expr pos:start="299:34" pos:end="299:42"><name pos:start="299:34" pos:end="299:42">ARITH_MOV</name></expr></argument>, <argument pos:start="299:45" pos:end="299:45"><expr pos:start="299:45" pos:end="299:45"><literal type="number" pos:start="299:45" pos:end="299:45">8</literal></expr></argument>, <argument pos:start="299:48" pos:end="299:48"><expr pos:start="299:48" pos:end="299:48"><literal type="number" pos:start="299:48" pos:end="299:48">0</literal></expr></argument>, <argument pos:start="299:51" pos:end="299:59"><expr pos:start="299:51" pos:end="299:59"><name pos:start="299:51" pos:end="299:59">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:48"><expr pos:start="301:9" pos:end="301:47"><call pos:start="301:9" pos:end="301:47"><name pos:start="301:9" pos:end="301:17">tcg_out32</name><argument_list pos:start="301:18" pos:end="301:47">(<argument pos:start="301:19" pos:end="301:19"><expr pos:start="301:19" pos:end="301:19"><name pos:start="301:19" pos:end="301:19">s</name></expr></argument>, <argument pos:start="301:22" pos:end="301:46"><expr pos:start="301:22" pos:end="301:46"><operator pos:start="301:22" pos:end="301:22">(</operator><name pos:start="301:23" pos:end="301:26">cond</name> <operator pos:start="301:28" pos:end="301:29">&lt;&lt;</operator> <literal type="number" pos:start="301:31" pos:end="301:32">28</literal><operator pos:start="301:33" pos:end="301:33">)</operator> <operator pos:start="301:35" pos:end="301:35">|</operator> <literal type="number" pos:start="301:37" pos:end="301:46">0x052d8010</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="301:50" pos:end="301:76">/* str r8, [sp, #-0x10]! */</comment>

        <if_stmt pos:start="303:9" pos:end="307:62"><if pos:start="303:9" pos:end="307:62">if <condition pos:start="303:12" pos:end="303:26">(<expr pos:start="303:13" pos:end="303:25"><name pos:start="303:13" pos:end="303:20">data_reg</name> <operator pos:start="303:22" pos:end="303:23">!=</operator> <literal type="number" pos:start="303:25" pos:end="303:25">2</literal></expr>)</condition><block type="pseudo" pos:start="305:13" pos:end="307:62"><block_content pos:start="305:13" pos:end="307:62">

            <expr_stmt pos:start="305:13" pos:end="307:62"><expr pos:start="305:13" pos:end="307:61"><call pos:start="305:13" pos:end="307:61"><name pos:start="305:13" pos:end="305:27">tcg_out_dat_reg</name><argument_list pos:start="305:28" pos:end="307:61">(<argument pos:start="305:29" pos:end="305:29"><expr pos:start="305:29" pos:end="305:29"><name pos:start="305:29" pos:end="305:29">s</name></expr></argument>, <argument pos:start="305:32" pos:end="305:35"><expr pos:start="305:32" pos:end="305:35"><name pos:start="305:32" pos:end="305:35">cond</name></expr></argument>, <argument pos:start="305:38" pos:end="305:46"><expr pos:start="305:38" pos:end="305:46"><name pos:start="305:38" pos:end="305:46">ARITH_MOV</name></expr></argument>,

                            <argument pos:start="307:29" pos:end="307:29"><expr pos:start="307:29" pos:end="307:29"><literal type="number" pos:start="307:29" pos:end="307:29">2</literal></expr></argument>, <argument pos:start="307:32" pos:end="307:32"><expr pos:start="307:32" pos:end="307:32"><literal type="number" pos:start="307:32" pos:end="307:32">0</literal></expr></argument>, <argument pos:start="307:35" pos:end="307:42"><expr pos:start="307:35" pos:end="307:42"><name pos:start="307:35" pos:end="307:42">data_reg</name></expr></argument>, <argument pos:start="307:45" pos:end="307:60"><expr pos:start="307:45" pos:end="307:60"><call pos:start="307:45" pos:end="307:60"><name pos:start="307:45" pos:end="307:57">SHIFT_IMM_LSL</name><argument_list pos:start="307:58" pos:end="307:60">(<argument pos:start="307:59" pos:end="307:59"><expr pos:start="307:59" pos:end="307:59"><literal type="number" pos:start="307:59" pos:end="307:59">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="309:9" pos:end="313:63"><if pos:start="309:9" pos:end="313:63">if <condition pos:start="309:12" pos:end="309:27">(<expr pos:start="309:13" pos:end="309:26"><name pos:start="309:13" pos:end="309:21">data_reg2</name> <operator pos:start="309:23" pos:end="309:24">!=</operator> <literal type="number" pos:start="309:26" pos:end="309:26">3</literal></expr>)</condition><block type="pseudo" pos:start="311:13" pos:end="313:63"><block_content pos:start="311:13" pos:end="313:63">

            <expr_stmt pos:start="311:13" pos:end="313:63"><expr pos:start="311:13" pos:end="313:62"><call pos:start="311:13" pos:end="313:62"><name pos:start="311:13" pos:end="311:27">tcg_out_dat_reg</name><argument_list pos:start="311:28" pos:end="313:62">(<argument pos:start="311:29" pos:end="311:29"><expr pos:start="311:29" pos:end="311:29"><name pos:start="311:29" pos:end="311:29">s</name></expr></argument>, <argument pos:start="311:32" pos:end="311:35"><expr pos:start="311:32" pos:end="311:35"><name pos:start="311:32" pos:end="311:35">cond</name></expr></argument>, <argument pos:start="311:38" pos:end="311:46"><expr pos:start="311:38" pos:end="311:46"><name pos:start="311:38" pos:end="311:46">ARITH_MOV</name></expr></argument>,

                            <argument pos:start="313:29" pos:end="313:29"><expr pos:start="313:29" pos:end="313:29"><literal type="number" pos:start="313:29" pos:end="313:29">3</literal></expr></argument>, <argument pos:start="313:32" pos:end="313:32"><expr pos:start="313:32" pos:end="313:32"><literal type="number" pos:start="313:32" pos:end="313:32">0</literal></expr></argument>, <argument pos:start="313:35" pos:end="313:43"><expr pos:start="313:35" pos:end="313:43"><name pos:start="313:35" pos:end="313:43">data_reg2</name></expr></argument>, <argument pos:start="313:46" pos:end="313:61"><expr pos:start="313:46" pos:end="313:61"><call pos:start="313:46" pos:end="313:61"><name pos:start="313:46" pos:end="313:58">SHIFT_IMM_LSL</name><argument_list pos:start="313:59" pos:end="313:61">(<argument pos:start="313:60" pos:end="313:60"><expr pos:start="313:60" pos:end="313:60"><literal type="number" pos:start="313:60" pos:end="313:60">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="315:9" pos:end="315:14">break;</break>

    </block_content>}</block></switch>

<cpp:endif pos:start="319:1" pos:end="319:7"># <cpp:directive pos:start="319:3" pos:end="319:7">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="323:1" pos:end="323:15"># <cpp:directive pos:start="323:3" pos:end="323:7">ifdef</cpp:directive> <name pos:start="323:9" pos:end="323:15">SAVE_LR</name></cpp:ifdef>

    <expr_stmt pos:start="325:5" pos:end="328:0"><expr pos:start="325:5" pos:end="325:67"><call pos:start="325:5" pos:end="325:67"><name pos:start="325:5" pos:end="325:19">tcg_out_dat_reg</name><argument_list pos:start="325:20" pos:end="325:67">(<argument pos:start="325:21" pos:end="325:21"><expr pos:start="325:21" pos:end="325:21"><name pos:start="325:21" pos:end="325:21">s</name></expr></argument>, <argument pos:start="325:24" pos:end="325:27"><expr pos:start="325:24" pos:end="325:27"><name pos:start="325:24" pos:end="325:27">cond</name></expr></argument>, <argument pos:start="325:30" pos:end="325:38"><expr pos:start="325:30" pos:end="325:38"><name pos:start="325:30" pos:end="325:38">ARITH_MOV</name></expr></argument>, <argument pos:start="325:41" pos:end="325:41"><expr pos:start="325:41" pos:end="325:41"><literal type="number" pos:start="325:41" pos:end="325:41">8</literal></expr></argument>, <argument pos:start="325:44" pos:end="325:44"><expr pos:start="325:44" pos:end="325:44"><literal type="number" pos:start="325:44" pos:end="325:44">0</literal></expr></argument>, <argument pos:start="325:47" pos:end="325:48"><expr pos:start="325:47" pos:end="325:48"><literal type="number" pos:start="325:47" pos:end="325:48">14</literal></expr></argument>, <argument pos:start="325:51" pos:end="325:66"><expr pos:start="325:51" pos:end="325:66"><call pos:start="325:51" pos:end="325:66"><name pos:start="325:51" pos:end="325:63">SHIFT_IMM_LSL</name><argument_list pos:start="325:64" pos:end="325:66">(<argument pos:start="325:65" pos:end="325:65"><expr pos:start="325:65" pos:end="325:65"><literal type="number" pos:start="325:65" pos:end="325:65">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="327:1" pos:end="327:7"># <cpp:directive pos:start="327:3" pos:end="327:7">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="331:5" pos:end="338:0"><expr pos:start="331:5" pos:end="333:50"><call pos:start="331:5" pos:end="333:50"><name pos:start="331:5" pos:end="331:14">tcg_out_bl</name><argument_list pos:start="331:15" pos:end="333:50">(<argument pos:start="331:16" pos:end="331:16"><expr pos:start="331:16" pos:end="331:16"><name pos:start="331:16" pos:end="331:16">s</name></expr></argument>, <argument pos:start="331:19" pos:end="331:22"><expr pos:start="331:19" pos:end="331:22"><name pos:start="331:19" pos:end="331:22">cond</name></expr></argument>, <argument pos:start="331:25" pos:end="333:49"><expr pos:start="331:25" pos:end="333:49"><operator pos:start="331:25" pos:end="331:25">(</operator><name pos:start="331:26" pos:end="331:40">tcg_target_long</name><operator pos:start="331:41" pos:end="331:41">)</operator> <name pos:start="331:43" pos:end="331:65"><name pos:start="331:43" pos:end="331:57">qemu_st_helpers</name><index pos:start="331:58" pos:end="331:65">[<expr pos:start="331:59" pos:end="331:64"><name pos:start="331:59" pos:end="331:64">s_bits</name></expr>]</index></name> <operator pos:start="331:67" pos:end="331:67">-</operator>

                    <operator pos:start="333:21" pos:end="333:21">(</operator><name pos:start="333:22" pos:end="333:36">tcg_target_long</name><operator pos:start="333:37" pos:end="333:37">)</operator> <name pos:start="333:39" pos:end="333:49"><name pos:start="333:39" pos:end="333:39">s</name><operator pos:start="333:40" pos:end="333:41">-&gt;</operator><name pos:start="333:42" pos:end="333:49">code_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="337:1" pos:end="337:27"># <cpp:directive pos:start="337:3" pos:end="337:4">if</cpp:directive> <expr pos:start="337:6" pos:end="337:27"><name pos:start="337:6" pos:end="337:21">TARGET_LONG_BITS</name> <operator pos:start="337:23" pos:end="337:24">==</operator> <literal type="number" pos:start="337:26" pos:end="337:27">64</literal></expr></cpp:if>

    <if_stmt pos:start="339:5" pos:end="348:0"><if pos:start="339:5" pos:end="348:0">if <condition pos:start="339:8" pos:end="339:17">(<expr pos:start="339:9" pos:end="339:16"><name pos:start="339:9" pos:end="339:11">opc</name> <operator pos:start="339:13" pos:end="339:14">==</operator> <literal type="number" pos:start="339:16" pos:end="339:16">3</literal></expr>)</condition><block type="pseudo" pos:start="341:9" pos:end="348:0"><block_content pos:start="341:9" pos:end="348:0">

        <expr_stmt pos:start="341:9" pos:end="348:0"><expr pos:start="341:9" pos:end="341:57"><call pos:start="341:9" pos:end="341:57"><name pos:start="341:9" pos:end="341:23">tcg_out_dat_imm</name><argument_list pos:start="341:24" pos:end="341:57">(<argument pos:start="341:25" pos:end="341:25"><expr pos:start="341:25" pos:end="341:25"><name pos:start="341:25" pos:end="341:25">s</name></expr></argument>, <argument pos:start="341:28" pos:end="341:31"><expr pos:start="341:28" pos:end="341:31"><name pos:start="341:28" pos:end="341:31">cond</name></expr></argument>, <argument pos:start="341:34" pos:end="341:42"><expr pos:start="341:34" pos:end="341:42"><name pos:start="341:34" pos:end="341:42">ARITH_ADD</name></expr></argument>, <argument pos:start="341:45" pos:end="341:46"><expr pos:start="341:45" pos:end="341:46"><literal type="number" pos:start="341:45" pos:end="341:46">13</literal></expr></argument>, <argument pos:start="341:49" pos:end="341:50"><expr pos:start="341:49" pos:end="341:50"><literal type="number" pos:start="341:49" pos:end="341:50">13</literal></expr></argument>, <argument pos:start="341:53" pos:end="341:56"><expr pos:start="341:53" pos:end="341:56"><literal type="number" pos:start="341:53" pos:end="341:56">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="343:1" pos:end="343:7"># <cpp:directive pos:start="343:3" pos:end="343:7">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="347:1" pos:end="347:15"># <cpp:directive pos:start="347:3" pos:end="347:7">ifdef</cpp:directive> <name pos:start="347:9" pos:end="347:15">SAVE_LR</name></cpp:ifdef>

    <expr_stmt pos:start="349:5" pos:end="352:0"><expr pos:start="349:5" pos:end="349:67"><call pos:start="349:5" pos:end="349:67"><name pos:start="349:5" pos:end="349:19">tcg_out_dat_reg</name><argument_list pos:start="349:20" pos:end="349:67">(<argument pos:start="349:21" pos:end="349:21"><expr pos:start="349:21" pos:end="349:21"><name pos:start="349:21" pos:end="349:21">s</name></expr></argument>, <argument pos:start="349:24" pos:end="349:27"><expr pos:start="349:24" pos:end="349:27"><name pos:start="349:24" pos:end="349:27">cond</name></expr></argument>, <argument pos:start="349:30" pos:end="349:38"><expr pos:start="349:30" pos:end="349:38"><name pos:start="349:30" pos:end="349:38">ARITH_MOV</name></expr></argument>, <argument pos:start="349:41" pos:end="349:42"><expr pos:start="349:41" pos:end="349:42"><literal type="number" pos:start="349:41" pos:end="349:42">14</literal></expr></argument>, <argument pos:start="349:45" pos:end="349:45"><expr pos:start="349:45" pos:end="349:45"><literal type="number" pos:start="349:45" pos:end="349:45">0</literal></expr></argument>, <argument pos:start="349:48" pos:end="349:48"><expr pos:start="349:48" pos:end="349:48"><literal type="number" pos:start="349:48" pos:end="349:48">8</literal></expr></argument>, <argument pos:start="349:51" pos:end="349:66"><expr pos:start="349:51" pos:end="349:66"><call pos:start="349:51" pos:end="349:66"><name pos:start="349:51" pos:end="349:63">SHIFT_IMM_LSL</name><argument_list pos:start="349:64" pos:end="349:66">(<argument pos:start="349:65" pos:end="349:65"><expr pos:start="349:65" pos:end="349:65"><literal type="number" pos:start="349:65" pos:end="349:65">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="351:1" pos:end="351:7"># <cpp:directive pos:start="351:3" pos:end="351:7">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="355:5" pos:end="358:0"><expr pos:start="355:5" pos:end="355:70"><operator pos:start="355:5" pos:end="355:5">*</operator><name pos:start="355:6" pos:end="355:14">label_ptr</name> <operator pos:start="355:16" pos:end="355:17">+=</operator> <operator pos:start="355:19" pos:end="355:19">(</operator><operator pos:start="355:20" pos:end="355:20">(</operator><name pos:start="355:21" pos:end="355:24">void</name> <operator pos:start="355:26" pos:end="355:26">*</operator><operator pos:start="355:27" pos:end="355:27">)</operator> <name pos:start="355:29" pos:end="355:39"><name pos:start="355:29" pos:end="355:29">s</name><operator pos:start="355:30" pos:end="355:31">-&gt;</operator><name pos:start="355:32" pos:end="355:39">code_ptr</name></name> <operator pos:start="355:41" pos:end="355:41">-</operator> <operator pos:start="355:43" pos:end="355:43">(</operator><name pos:start="355:44" pos:end="355:47">void</name> <operator pos:start="355:49" pos:end="355:49">*</operator><operator pos:start="355:50" pos:end="355:50">)</operator> <name pos:start="355:52" pos:end="355:60">label_ptr</name> <operator pos:start="355:62" pos:end="355:62">-</operator> <literal type="number" pos:start="355:64" pos:end="355:64">8</literal><operator pos:start="355:65" pos:end="355:65">)</operator> <operator pos:start="355:67" pos:end="355:68">&gt;&gt;</operator> <literal type="number" pos:start="355:70" pos:end="355:70">2</literal></expr>;</expr_stmt>

<cpp:else pos:start="357:1" pos:end="357:5">#<cpp:directive pos:start="357:2" pos:end="357:5">else</cpp:directive></cpp:else>

    <switch pos:start="359:5" pos:end="408:0">switch <condition pos:start="359:12" pos:end="359:16">(<expr pos:start="359:13" pos:end="359:15"><name pos:start="359:13" pos:end="359:15">opc</name></expr>)</condition> <block pos:start="359:18" pos:end="408:0">{<block_content pos:start="361:5" pos:end="403:14">

    <case pos:start="361:5" pos:end="361:11">case <expr pos:start="361:10" pos:end="361:10"><literal type="number" pos:start="361:10" pos:end="361:10">0</literal></expr>:</case>

        <expr_stmt pos:start="363:9" pos:end="363:58"><expr pos:start="363:9" pos:end="363:57"><call pos:start="363:9" pos:end="363:57"><name pos:start="363:9" pos:end="363:22">tcg_out_st8_12</name><argument_list pos:start="363:23" pos:end="363:57">(<argument pos:start="363:24" pos:end="363:24"><expr pos:start="363:24" pos:end="363:24"><name pos:start="363:24" pos:end="363:24">s</name></expr></argument>, <argument pos:start="363:27" pos:end="363:33"><expr pos:start="363:27" pos:end="363:33"><name pos:start="363:27" pos:end="363:33">COND_AL</name></expr></argument>, <argument pos:start="363:36" pos:end="363:43"><expr pos:start="363:36" pos:end="363:43"><name pos:start="363:36" pos:end="363:43">data_reg</name></expr></argument>, <argument pos:start="363:46" pos:end="363:53"><expr pos:start="363:46" pos:end="363:53"><name pos:start="363:46" pos:end="363:53">addr_reg</name></expr></argument>, <argument pos:start="363:56" pos:end="363:56"><expr pos:start="363:56" pos:end="363:56"><literal type="number" pos:start="363:56" pos:end="363:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="365:9" pos:end="365:14">break;</break>

    <case pos:start="367:5" pos:end="367:15">case <expr pos:start="367:10" pos:end="367:14"><literal type="number" pos:start="367:10" pos:end="367:10">0</literal> <operator pos:start="367:12" pos:end="367:12">|</operator> <literal type="number" pos:start="367:14" pos:end="367:14">4</literal></expr>:</case>

        <expr_stmt pos:start="369:9" pos:end="369:58"><expr pos:start="369:9" pos:end="369:57"><call pos:start="369:9" pos:end="369:57"><name pos:start="369:9" pos:end="369:22">tcg_out_st8s_8</name><argument_list pos:start="369:23" pos:end="369:57">(<argument pos:start="369:24" pos:end="369:24"><expr pos:start="369:24" pos:end="369:24"><name pos:start="369:24" pos:end="369:24">s</name></expr></argument>, <argument pos:start="369:27" pos:end="369:33"><expr pos:start="369:27" pos:end="369:33"><name pos:start="369:27" pos:end="369:33">COND_AL</name></expr></argument>, <argument pos:start="369:36" pos:end="369:43"><expr pos:start="369:36" pos:end="369:43"><name pos:start="369:36" pos:end="369:43">data_reg</name></expr></argument>, <argument pos:start="369:46" pos:end="369:53"><expr pos:start="369:46" pos:end="369:53"><name pos:start="369:46" pos:end="369:53">addr_reg</name></expr></argument>, <argument pos:start="369:56" pos:end="369:56"><expr pos:start="369:56" pos:end="369:56"><literal type="number" pos:start="369:56" pos:end="369:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="371:9" pos:end="371:14">break;</break>

    <case pos:start="373:5" pos:end="373:11">case <expr pos:start="373:10" pos:end="373:10"><literal type="number" pos:start="373:10" pos:end="373:10">1</literal></expr>:</case>

        <expr_stmt pos:start="375:9" pos:end="375:59"><expr pos:start="375:9" pos:end="375:58"><call pos:start="375:9" pos:end="375:58"><name pos:start="375:9" pos:end="375:23">tcg_out_st16u_8</name><argument_list pos:start="375:24" pos:end="375:58">(<argument pos:start="375:25" pos:end="375:25"><expr pos:start="375:25" pos:end="375:25"><name pos:start="375:25" pos:end="375:25">s</name></expr></argument>, <argument pos:start="375:28" pos:end="375:34"><expr pos:start="375:28" pos:end="375:34"><name pos:start="375:28" pos:end="375:34">COND_AL</name></expr></argument>, <argument pos:start="375:37" pos:end="375:44"><expr pos:start="375:37" pos:end="375:44"><name pos:start="375:37" pos:end="375:44">data_reg</name></expr></argument>, <argument pos:start="375:47" pos:end="375:54"><expr pos:start="375:47" pos:end="375:54"><name pos:start="375:47" pos:end="375:54">addr_reg</name></expr></argument>, <argument pos:start="375:57" pos:end="375:57"><expr pos:start="375:57" pos:end="375:57"><literal type="number" pos:start="375:57" pos:end="375:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="377:9" pos:end="377:14">break;</break>

    <case pos:start="379:5" pos:end="379:15">case <expr pos:start="379:10" pos:end="379:14"><literal type="number" pos:start="379:10" pos:end="379:10">1</literal> <operator pos:start="379:12" pos:end="379:12">|</operator> <literal type="number" pos:start="379:14" pos:end="379:14">4</literal></expr>:</case>

        <expr_stmt pos:start="381:9" pos:end="381:59"><expr pos:start="381:9" pos:end="381:58"><call pos:start="381:9" pos:end="381:58"><name pos:start="381:9" pos:end="381:23">tcg_out_st16s_8</name><argument_list pos:start="381:24" pos:end="381:58">(<argument pos:start="381:25" pos:end="381:25"><expr pos:start="381:25" pos:end="381:25"><name pos:start="381:25" pos:end="381:25">s</name></expr></argument>, <argument pos:start="381:28" pos:end="381:34"><expr pos:start="381:28" pos:end="381:34"><name pos:start="381:28" pos:end="381:34">COND_AL</name></expr></argument>, <argument pos:start="381:37" pos:end="381:44"><expr pos:start="381:37" pos:end="381:44"><name pos:start="381:37" pos:end="381:44">data_reg</name></expr></argument>, <argument pos:start="381:47" pos:end="381:54"><expr pos:start="381:47" pos:end="381:54"><name pos:start="381:47" pos:end="381:54">addr_reg</name></expr></argument>, <argument pos:start="381:57" pos:end="381:57"><expr pos:start="381:57" pos:end="381:57"><literal type="number" pos:start="381:57" pos:end="381:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="383:9" pos:end="383:14">break;</break>

    <case pos:start="385:5" pos:end="385:11">case <expr pos:start="385:10" pos:end="385:10"><literal type="number" pos:start="385:10" pos:end="385:10">2</literal></expr>:</case>

    <default pos:start="387:5" pos:end="387:12">default:</default>

        <expr_stmt pos:start="389:9" pos:end="389:59"><expr pos:start="389:9" pos:end="389:58"><call pos:start="389:9" pos:end="389:58"><name pos:start="389:9" pos:end="389:23">tcg_out_st32_12</name><argument_list pos:start="389:24" pos:end="389:58">(<argument pos:start="389:25" pos:end="389:25"><expr pos:start="389:25" pos:end="389:25"><name pos:start="389:25" pos:end="389:25">s</name></expr></argument>, <argument pos:start="389:28" pos:end="389:34"><expr pos:start="389:28" pos:end="389:34"><name pos:start="389:28" pos:end="389:34">COND_AL</name></expr></argument>, <argument pos:start="389:37" pos:end="389:44"><expr pos:start="389:37" pos:end="389:44"><name pos:start="389:37" pos:end="389:44">data_reg</name></expr></argument>, <argument pos:start="389:47" pos:end="389:54"><expr pos:start="389:47" pos:end="389:54"><name pos:start="389:47" pos:end="389:54">addr_reg</name></expr></argument>, <argument pos:start="389:57" pos:end="389:57"><expr pos:start="389:57" pos:end="389:57"><literal type="number" pos:start="389:57" pos:end="389:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="391:9" pos:end="391:14">break;</break>

    <case pos:start="393:5" pos:end="393:11">case <expr pos:start="393:10" pos:end="393:10"><literal type="number" pos:start="393:10" pos:end="393:10">3</literal></expr>:</case>

        <comment type="block" pos:start="395:9" pos:end="397:62">/* TODO: use block store -

         * check that data_reg2 &gt; data_reg or the other way */</comment>

        <expr_stmt pos:start="399:9" pos:end="399:59"><expr pos:start="399:9" pos:end="399:58"><call pos:start="399:9" pos:end="399:58"><name pos:start="399:9" pos:end="399:23">tcg_out_st32_12</name><argument_list pos:start="399:24" pos:end="399:58">(<argument pos:start="399:25" pos:end="399:25"><expr pos:start="399:25" pos:end="399:25"><name pos:start="399:25" pos:end="399:25">s</name></expr></argument>, <argument pos:start="399:28" pos:end="399:34"><expr pos:start="399:28" pos:end="399:34"><name pos:start="399:28" pos:end="399:34">COND_AL</name></expr></argument>, <argument pos:start="399:37" pos:end="399:44"><expr pos:start="399:37" pos:end="399:44"><name pos:start="399:37" pos:end="399:44">data_reg</name></expr></argument>, <argument pos:start="399:47" pos:end="399:54"><expr pos:start="399:47" pos:end="399:54"><name pos:start="399:47" pos:end="399:54">addr_reg</name></expr></argument>, <argument pos:start="399:57" pos:end="399:57"><expr pos:start="399:57" pos:end="399:57"><literal type="number" pos:start="399:57" pos:end="399:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="401:9" pos:end="401:60"><expr pos:start="401:9" pos:end="401:59"><call pos:start="401:9" pos:end="401:59"><name pos:start="401:9" pos:end="401:23">tcg_out_st32_12</name><argument_list pos:start="401:24" pos:end="401:59">(<argument pos:start="401:25" pos:end="401:25"><expr pos:start="401:25" pos:end="401:25"><name pos:start="401:25" pos:end="401:25">s</name></expr></argument>, <argument pos:start="401:28" pos:end="401:34"><expr pos:start="401:28" pos:end="401:34"><name pos:start="401:28" pos:end="401:34">COND_AL</name></expr></argument>, <argument pos:start="401:37" pos:end="401:45"><expr pos:start="401:37" pos:end="401:45"><name pos:start="401:37" pos:end="401:45">data_reg2</name></expr></argument>, <argument pos:start="401:48" pos:end="401:55"><expr pos:start="401:48" pos:end="401:55"><name pos:start="401:48" pos:end="401:55">addr_reg</name></expr></argument>, <argument pos:start="401:58" pos:end="401:58"><expr pos:start="401:58" pos:end="401:58"><literal type="number" pos:start="401:58" pos:end="401:58">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="403:9" pos:end="403:14">break;</break>

    </block_content>}</block></switch>

<cpp:endif pos:start="407:1" pos:end="407:6">#<cpp:directive pos:start="407:2" pos:end="407:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
