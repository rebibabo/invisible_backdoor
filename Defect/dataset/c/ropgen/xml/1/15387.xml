<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15387.c" pos:tabs="8"><function pos:start="1:1" pos:end="156:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">pci_update_mappings</name><parameter_list pos:start="1:32" pos:end="1:45">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:43"><name pos:start="1:33" pos:end="1:41">PCIDevice</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">d</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="156:1">{<block_content pos:start="5:5" pos:end="154:5">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">PCIIORegion</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">r</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">cmd</name></decl>, <decl pos:start="7:14" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:22">last_addr</name></decl>, <decl pos:start="9:25" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:25" pos:end="9:32">new_addr</name></decl>, <decl pos:start="9:35" pos:end="9:44"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:35" pos:end="9:44">config_ofs</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:62"><expr pos:start="13:5" pos:end="13:61"><name pos:start="13:5" pos:end="13:7">cmd</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:61"><name pos:start="13:11" pos:end="13:21">le16_to_cpu</name><argument_list pos:start="13:22" pos:end="13:61">(<argument pos:start="13:23" pos:end="13:60"><expr pos:start="13:23" pos:end="13:60"><operator pos:start="13:23" pos:end="13:23">*</operator><operator pos:start="13:24" pos:end="13:24">(</operator><name pos:start="13:25" pos:end="13:32">uint16_t</name> <operator pos:start="13:34" pos:end="13:34">*</operator><operator pos:start="13:35" pos:end="13:35">)</operator><operator pos:start="13:36" pos:end="13:36">(</operator><name pos:start="13:37" pos:end="13:45"><name pos:start="13:37" pos:end="13:37">d</name><operator pos:start="13:38" pos:end="13:39">-&gt;</operator><name pos:start="13:40" pos:end="13:45">config</name></name> <operator pos:start="13:47" pos:end="13:47">+</operator> <name pos:start="13:49" pos:end="13:59">PCI_COMMAND</name><operator pos:start="13:60" pos:end="13:60">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="15:5" pos:end="154:5">for<control pos:start="15:8" pos:end="15:40">(<init pos:start="15:9" pos:end="15:14"><expr pos:start="15:9" pos:end="15:13"><name pos:start="15:9" pos:end="15:9">i</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <literal type="number" pos:start="15:13" pos:end="15:13">0</literal></expr>;</init> <condition pos:start="15:16" pos:end="15:35"><expr pos:start="15:16" pos:end="15:34"><name pos:start="15:16" pos:end="15:16">i</name> <operator pos:start="15:18" pos:end="15:18">&lt;</operator> <name pos:start="15:20" pos:end="15:34">PCI_NUM_REGIONS</name></expr>;</condition> <incr pos:start="15:37" pos:end="15:39"><expr pos:start="15:37" pos:end="15:39"><name pos:start="15:37" pos:end="15:37">i</name><operator pos:start="15:38" pos:end="15:39">++</operator></expr></incr>)</control> <block pos:start="15:42" pos:end="154:5">{<block_content pos:start="17:9" pos:end="152:9">

        <expr_stmt pos:start="17:9" pos:end="17:30"><expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:9">r</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <operator pos:start="17:13" pos:end="17:13">&amp;</operator><name pos:start="17:14" pos:end="17:29"><name pos:start="17:14" pos:end="17:14">d</name><operator pos:start="17:15" pos:end="17:16">-&gt;</operator><name pos:start="17:17" pos:end="17:26">io_regions</name><index pos:start="17:27" pos:end="17:29">[<expr pos:start="17:28" pos:end="17:28"><name pos:start="17:28" pos:end="17:28">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="27:9"><if pos:start="19:9" pos:end="23:9">if <condition pos:start="19:12" pos:end="19:30">(<expr pos:start="19:13" pos:end="19:29"><name pos:start="19:13" pos:end="19:13">i</name> <operator pos:start="19:15" pos:end="19:16">==</operator> <name pos:start="19:18" pos:end="19:29">PCI_ROM_SLOT</name></expr>)</condition> <block pos:start="19:32" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:30">

            <expr_stmt pos:start="21:13" pos:end="21:30"><expr pos:start="21:13" pos:end="21:29"><name pos:start="21:13" pos:end="21:22">config_ofs</name> <operator pos:start="21:24" pos:end="21:24">=</operator> <literal type="number" pos:start="21:26" pos:end="21:29">0x30</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="23:11" pos:end="27:9">else <block pos:start="23:16" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:38">

            <expr_stmt pos:start="25:13" pos:end="25:38"><expr pos:start="25:13" pos:end="25:37"><name pos:start="25:13" pos:end="25:22">config_ofs</name> <operator pos:start="25:24" pos:end="25:24">=</operator> <literal type="number" pos:start="25:26" pos:end="25:31">0x10</literal> <operator pos:start="25:31" pos:end="25:31">+</operator> <name pos:start="25:33" pos:end="25:33">i</name> <operator pos:start="25:35" pos:end="25:35">*</operator> <literal type="number" pos:start="25:37" pos:end="25:37">4</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="29:9" pos:end="152:9"><if pos:start="29:9" pos:end="152:9">if <condition pos:start="29:12" pos:end="29:25">(<expr pos:start="29:13" pos:end="29:24"><name pos:start="29:13" pos:end="29:19"><name pos:start="29:13" pos:end="29:13">r</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:19">size</name></name> <operator pos:start="29:21" pos:end="29:22">!=</operator> <literal type="number" pos:start="29:24" pos:end="29:24">0</literal></expr>)</condition> <block pos:start="29:27" pos:end="152:9">{<block_content pos:start="31:13" pos:end="150:13">

            <if_stmt pos:start="31:13" pos:end="101:13"><if pos:start="31:13" pos:end="59:13">if <condition pos:start="31:16" pos:end="31:47">(<expr pos:start="31:17" pos:end="31:46"><name pos:start="31:17" pos:end="31:23"><name pos:start="31:17" pos:end="31:17">r</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:23">type</name></name> <operator pos:start="31:25" pos:end="31:25">&amp;</operator> <name pos:start="31:27" pos:end="31:46">PCI_ADDRESS_SPACE_IO</name></expr>)</condition> <block pos:start="31:49" pos:end="59:13">{<block_content pos:start="33:17" pos:end="57:17">

                <if_stmt pos:start="33:17" pos:end="57:17"><if pos:start="33:17" pos:end="53:17">if <condition pos:start="33:20" pos:end="33:41">(<expr pos:start="33:21" pos:end="33:40"><name pos:start="33:21" pos:end="33:23">cmd</name> <operator pos:start="33:25" pos:end="33:25">&amp;</operator> <name pos:start="33:27" pos:end="33:40">PCI_COMMAND_IO</name></expr>)</condition> <block pos:start="33:43" pos:end="53:17">{<block_content pos:start="35:21" pos:end="51:21">

                    <expr_stmt pos:start="35:21" pos:end="37:70"><expr pos:start="35:21" pos:end="37:69"><name pos:start="35:21" pos:end="35:28">new_addr</name> <operator pos:start="35:30" pos:end="35:30">=</operator> <call pos:start="35:32" pos:end="37:69"><name pos:start="35:32" pos:end="35:42">le32_to_cpu</name><argument_list pos:start="35:43" pos:end="37:69">(<argument pos:start="35:44" pos:end="37:68"><expr pos:start="35:44" pos:end="37:68"><operator pos:start="35:44" pos:end="35:44">*</operator><operator pos:start="35:45" pos:end="35:45">(</operator><name pos:start="35:46" pos:end="35:53">uint32_t</name> <operator pos:start="35:55" pos:end="35:55">*</operator><operator pos:start="35:56" pos:end="35:56">)</operator><operator pos:start="35:57" pos:end="35:57">(</operator><name pos:start="35:58" pos:end="35:66"><name pos:start="35:58" pos:end="35:58">d</name><operator pos:start="35:59" pos:end="35:60">-&gt;</operator><name pos:start="35:61" pos:end="35:66">config</name></name> <operator pos:start="35:68" pos:end="35:68">+</operator>

                                                         <name pos:start="37:58" pos:end="37:67">config_ofs</name><operator pos:start="37:68" pos:end="37:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="39:21" pos:end="39:57"><expr pos:start="39:21" pos:end="39:56"><name pos:start="39:21" pos:end="39:28">new_addr</name> <operator pos:start="39:30" pos:end="39:30">=</operator> <name pos:start="39:32" pos:end="39:39">new_addr</name> <operator pos:start="39:41" pos:end="39:41">&amp;</operator> <operator pos:start="39:43" pos:end="39:43">~</operator><operator pos:start="39:44" pos:end="39:44">(</operator><name pos:start="39:45" pos:end="39:51"><name pos:start="39:45" pos:end="39:45">r</name><operator pos:start="39:46" pos:end="39:47">-&gt;</operator><name pos:start="39:48" pos:end="39:51">size</name></name> <operator pos:start="39:53" pos:end="39:53">-</operator> <literal type="number" pos:start="39:55" pos:end="39:55">1</literal><operator pos:start="39:56" pos:end="39:56">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="41:21" pos:end="41:55"><expr pos:start="41:21" pos:end="41:54"><name pos:start="41:21" pos:end="41:29">last_addr</name> <operator pos:start="41:31" pos:end="41:31">=</operator> <name pos:start="41:33" pos:end="41:40">new_addr</name> <operator pos:start="41:42" pos:end="41:42">+</operator> <name pos:start="41:44" pos:end="41:50"><name pos:start="41:44" pos:end="41:44">r</name><operator pos:start="41:45" pos:end="41:46">-&gt;</operator><name pos:start="41:47" pos:end="41:50">size</name></name> <operator pos:start="41:52" pos:end="41:52">-</operator> <literal type="number" pos:start="41:54" pos:end="41:54">1</literal></expr>;</expr_stmt>

                    <comment type="block" pos:start="43:21" pos:end="43:62">/* NOTE: we have only 64K ioports on PC */</comment>

                    <if_stmt pos:start="45:21" pos:end="51:21"><if pos:start="45:21" pos:end="51:21">if <condition pos:start="45:24" pos:end="47:45">(<expr pos:start="45:25" pos:end="47:44"><name pos:start="45:25" pos:end="45:33">last_addr</name> <operator pos:start="45:35" pos:end="45:36">&lt;=</operator> <name pos:start="45:38" pos:end="45:45">new_addr</name> <operator pos:start="45:47" pos:end="45:48">||</operator> <name pos:start="45:50" pos:end="45:57">new_addr</name> <operator pos:start="45:59" pos:end="45:60">==</operator> <literal type="number" pos:start="45:62" pos:end="45:62">0</literal> <operator pos:start="45:64" pos:end="45:65">||</operator>

                        <name pos:start="47:25" pos:end="47:33">last_addr</name> <operator pos:start="47:35" pos:end="47:36">&gt;=</operator> <literal type="number" pos:start="47:38" pos:end="47:44">0x10000</literal></expr>)</condition> <block pos:start="47:47" pos:end="51:21">{<block_content pos:start="49:25" pos:end="49:38">

                        <expr_stmt pos:start="49:25" pos:end="49:38"><expr pos:start="49:25" pos:end="49:37"><name pos:start="49:25" pos:end="49:32">new_addr</name> <operator pos:start="49:34" pos:end="49:34">=</operator> <operator pos:start="49:36" pos:end="49:36">-</operator><literal type="number" pos:start="49:37" pos:end="49:37">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <else pos:start="53:19" pos:end="57:17">else <block pos:start="53:24" pos:end="57:17">{<block_content pos:start="55:21" pos:end="55:34">

                    <expr_stmt pos:start="55:21" pos:end="55:34"><expr pos:start="55:21" pos:end="55:33"><name pos:start="55:21" pos:end="55:28">new_addr</name> <operator pos:start="55:30" pos:end="55:30">=</operator> <operator pos:start="55:32" pos:end="55:32">-</operator><literal type="number" pos:start="55:33" pos:end="55:33">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="59:15" pos:end="101:13">else <block pos:start="59:20" pos:end="101:13">{<block_content pos:start="61:17" pos:end="99:17">

                <if_stmt pos:start="61:17" pos:end="99:17"><if pos:start="61:17" pos:end="93:17">if <condition pos:start="61:20" pos:end="61:45">(<expr pos:start="61:21" pos:end="61:44"><name pos:start="61:21" pos:end="61:23">cmd</name> <operator pos:start="61:25" pos:end="61:25">&amp;</operator> <name pos:start="61:27" pos:end="61:44">PCI_COMMAND_MEMORY</name></expr>)</condition> <block pos:start="61:47" pos:end="93:17">{<block_content pos:start="63:21" pos:end="91:21">

                    <expr_stmt pos:start="63:21" pos:end="65:70"><expr pos:start="63:21" pos:end="65:69"><name pos:start="63:21" pos:end="63:28">new_addr</name> <operator pos:start="63:30" pos:end="63:30">=</operator> <call pos:start="63:32" pos:end="65:69"><name pos:start="63:32" pos:end="63:42">le32_to_cpu</name><argument_list pos:start="63:43" pos:end="65:69">(<argument pos:start="63:44" pos:end="65:68"><expr pos:start="63:44" pos:end="65:68"><operator pos:start="63:44" pos:end="63:44">*</operator><operator pos:start="63:45" pos:end="63:45">(</operator><name pos:start="63:46" pos:end="63:53">uint32_t</name> <operator pos:start="63:55" pos:end="63:55">*</operator><operator pos:start="63:56" pos:end="63:56">)</operator><operator pos:start="63:57" pos:end="63:57">(</operator><name pos:start="63:58" pos:end="63:66"><name pos:start="63:58" pos:end="63:58">d</name><operator pos:start="63:59" pos:end="63:60">-&gt;</operator><name pos:start="63:61" pos:end="63:66">config</name></name> <operator pos:start="63:68" pos:end="63:68">+</operator>

                                                         <name pos:start="65:58" pos:end="65:67">config_ofs</name><operator pos:start="65:68" pos:end="65:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="67:21" pos:end="67:64">/* the ROM slot has a specific enable bit */</comment>

                    <if_stmt pos:start="69:21" pos:end="71:40"><if pos:start="69:21" pos:end="71:40">if <condition pos:start="69:24" pos:end="69:61">(<expr pos:start="69:25" pos:end="69:60"><name pos:start="69:25" pos:end="69:25">i</name> <operator pos:start="69:27" pos:end="69:28">==</operator> <name pos:start="69:30" pos:end="69:41">PCI_ROM_SLOT</name> <operator pos:start="69:43" pos:end="69:44">&amp;&amp;</operator> <operator pos:start="69:46" pos:end="69:46">!</operator><operator pos:start="69:47" pos:end="69:47">(</operator><name pos:start="69:48" pos:end="69:55">new_addr</name> <operator pos:start="69:57" pos:end="69:57">&amp;</operator> <literal type="number" pos:start="69:59" pos:end="69:59">1</literal><operator pos:start="69:60" pos:end="69:60">)</operator></expr>)</condition><block type="pseudo" pos:start="71:25" pos:end="71:40"><block_content pos:start="71:25" pos:end="71:40">

                        <goto pos:start="71:25" pos:end="71:40">goto <name pos:start="71:30" pos:end="71:39">no_mem_map</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="73:21" pos:end="73:57"><expr pos:start="73:21" pos:end="73:56"><name pos:start="73:21" pos:end="73:28">new_addr</name> <operator pos:start="73:30" pos:end="73:30">=</operator> <name pos:start="73:32" pos:end="73:39">new_addr</name> <operator pos:start="73:41" pos:end="73:41">&amp;</operator> <operator pos:start="73:43" pos:end="73:43">~</operator><operator pos:start="73:44" pos:end="73:44">(</operator><name pos:start="73:45" pos:end="73:51"><name pos:start="73:45" pos:end="73:45">r</name><operator pos:start="73:46" pos:end="73:47">-&gt;</operator><name pos:start="73:48" pos:end="73:51">size</name></name> <operator pos:start="73:53" pos:end="73:53">-</operator> <literal type="number" pos:start="73:55" pos:end="73:55">1</literal><operator pos:start="73:56" pos:end="73:56">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="75:21" pos:end="75:55"><expr pos:start="75:21" pos:end="75:54"><name pos:start="75:21" pos:end="75:29">last_addr</name> <operator pos:start="75:31" pos:end="75:31">=</operator> <name pos:start="75:33" pos:end="75:40">new_addr</name> <operator pos:start="75:42" pos:end="75:42">+</operator> <name pos:start="75:44" pos:end="75:50"><name pos:start="75:44" pos:end="75:44">r</name><operator pos:start="75:45" pos:end="75:46">-&gt;</operator><name pos:start="75:47" pos:end="75:50">size</name></name> <operator pos:start="75:52" pos:end="75:52">-</operator> <literal type="number" pos:start="75:54" pos:end="75:54">1</literal></expr>;</expr_stmt>

                    <comment type="block" pos:start="77:21" pos:end="77:58">/* NOTE: we do not support wrapping */</comment>

                    <comment type="block" pos:start="79:21" pos:end="83:35">/* XXX: as we cannot support really dynamic

                       mappings, we handle specific values as invalid

                       mappings. */</comment>

                    <if_stmt pos:start="85:21" pos:end="91:21"><if pos:start="85:21" pos:end="91:21">if <condition pos:start="85:24" pos:end="87:40">(<expr pos:start="85:25" pos:end="87:39"><name pos:start="85:25" pos:end="85:33">last_addr</name> <operator pos:start="85:35" pos:end="85:36">&lt;=</operator> <name pos:start="85:38" pos:end="85:45">new_addr</name> <operator pos:start="85:47" pos:end="85:48">||</operator> <name pos:start="85:50" pos:end="85:57">new_addr</name> <operator pos:start="85:59" pos:end="85:60">==</operator> <literal type="number" pos:start="85:62" pos:end="85:62">0</literal> <operator pos:start="85:64" pos:end="85:65">||</operator>

                        <name pos:start="87:25" pos:end="87:33">last_addr</name> <operator pos:start="87:35" pos:end="87:36">==</operator> <operator pos:start="87:38" pos:end="87:38">-</operator><literal type="number" pos:start="87:39" pos:end="87:39">1</literal></expr>)</condition> <block pos:start="87:42" pos:end="91:21">{<block_content pos:start="89:25" pos:end="89:38">

                        <expr_stmt pos:start="89:25" pos:end="89:38"><expr pos:start="89:25" pos:end="89:37"><name pos:start="89:25" pos:end="89:32">new_addr</name> <operator pos:start="89:34" pos:end="89:34">=</operator> <operator pos:start="89:36" pos:end="89:36">-</operator><literal type="number" pos:start="89:37" pos:end="89:37">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <else pos:start="93:19" pos:end="99:17">else <block pos:start="93:24" pos:end="99:17">{<block_content pos:start="95:17" pos:end="97:34">

                <label pos:start="95:17" pos:end="95:27"><name pos:start="95:17" pos:end="95:26">no_mem_map</name>:</label>

                    <expr_stmt pos:start="97:21" pos:end="97:34"><expr pos:start="97:21" pos:end="97:33"><name pos:start="97:21" pos:end="97:28">new_addr</name> <operator pos:start="97:30" pos:end="97:30">=</operator> <operator pos:start="97:32" pos:end="97:32">-</operator><literal type="number" pos:start="97:33" pos:end="97:33">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <comment type="block" pos:start="103:13" pos:end="103:41">/* now do the real mapping */</comment>

            <if_stmt pos:start="105:13" pos:end="150:13"><if pos:start="105:13" pos:end="150:13">if <condition pos:start="105:16" pos:end="105:36">(<expr pos:start="105:17" pos:end="105:35"><name pos:start="105:17" pos:end="105:24">new_addr</name> <operator pos:start="105:26" pos:end="105:27">!=</operator> <name pos:start="105:29" pos:end="105:35"><name pos:start="105:29" pos:end="105:29">r</name><operator pos:start="105:30" pos:end="105:31">-&gt;</operator><name pos:start="105:32" pos:end="105:35">addr</name></name></expr>)</condition> <block pos:start="105:38" pos:end="150:13">{<block_content pos:start="107:17" pos:end="148:17">

                <if_stmt pos:start="107:17" pos:end="140:17"><if pos:start="107:17" pos:end="140:17">if <condition pos:start="107:20" pos:end="107:34">(<expr pos:start="107:21" pos:end="107:33"><name pos:start="107:21" pos:end="107:27"><name pos:start="107:21" pos:end="107:21">r</name><operator pos:start="107:22" pos:end="107:23">-&gt;</operator><name pos:start="107:24" pos:end="107:27">addr</name></name> <operator pos:start="107:29" pos:end="107:30">!=</operator> <operator pos:start="107:32" pos:end="107:32">-</operator><literal type="number" pos:start="107:33" pos:end="107:33">1</literal></expr>)</condition> <block pos:start="107:36" pos:end="140:17">{<block_content pos:start="109:21" pos:end="138:21">

                    <if_stmt pos:start="109:21" pos:end="138:21"><if pos:start="109:21" pos:end="129:21">if <condition pos:start="109:24" pos:end="109:55">(<expr pos:start="109:25" pos:end="109:54"><name pos:start="109:25" pos:end="109:31"><name pos:start="109:25" pos:end="109:25">r</name><operator pos:start="109:26" pos:end="109:27">-&gt;</operator><name pos:start="109:28" pos:end="109:31">type</name></name> <operator pos:start="109:33" pos:end="109:33">&amp;</operator> <name pos:start="109:35" pos:end="109:54">PCI_ADDRESS_SPACE_IO</name></expr>)</condition> <block pos:start="109:57" pos:end="129:21">{<block_content pos:start="111:25" pos:end="127:25">

                        <decl_stmt pos:start="111:25" pos:end="111:34"><decl pos:start="111:25" pos:end="111:33"><type pos:start="111:25" pos:end="111:27"><name pos:start="111:25" pos:end="111:27">int</name></type> <name pos:start="111:29" pos:end="111:33">class</name></decl>;</decl_stmt>

                        <comment type="block" pos:start="113:25" pos:end="115:59">/* NOTE: specific hack for IDE in PC case:

                           only one byte must be mapped. */</comment>

                        <expr_stmt pos:start="117:25" pos:end="117:73"><expr pos:start="117:25" pos:end="117:72"><name pos:start="117:25" pos:end="117:29">class</name> <operator pos:start="117:31" pos:end="117:31">=</operator> <name pos:start="117:33" pos:end="117:47"><name pos:start="117:33" pos:end="117:33">d</name><operator pos:start="117:34" pos:end="117:35">-&gt;</operator><name pos:start="117:36" pos:end="117:41">config</name><index pos:start="117:42" pos:end="117:47">[<expr pos:start="117:43" pos:end="117:46"><literal type="number" pos:start="117:43" pos:end="117:46">0x0a</literal></expr>]</index></name> <operator pos:start="117:49" pos:end="117:49">|</operator> <operator pos:start="117:51" pos:end="117:51">(</operator><name pos:start="117:52" pos:end="117:66"><name pos:start="117:52" pos:end="117:52">d</name><operator pos:start="117:53" pos:end="117:54">-&gt;</operator><name pos:start="117:55" pos:end="117:60">config</name><index pos:start="117:61" pos:end="117:66">[<expr pos:start="117:62" pos:end="117:65"><literal type="number" pos:start="117:62" pos:end="117:65">0x0b</literal></expr>]</index></name> <operator pos:start="117:68" pos:end="117:69">&lt;&lt;</operator> <literal type="number" pos:start="117:71" pos:end="117:71">8</literal><operator pos:start="117:72" pos:end="117:72">)</operator></expr>;</expr_stmt>

                        <if_stmt pos:start="119:25" pos:end="127:25"><if pos:start="119:25" pos:end="123:25">if <condition pos:start="119:28" pos:end="119:60">(<expr pos:start="119:29" pos:end="119:59"><name pos:start="119:29" pos:end="119:33">class</name> <operator pos:start="119:35" pos:end="119:36">==</operator> <literal type="number" pos:start="119:38" pos:end="119:43">0x0101</literal> <operator pos:start="119:45" pos:end="119:46">&amp;&amp;</operator> <name pos:start="119:48" pos:end="119:54"><name pos:start="119:48" pos:end="119:48">r</name><operator pos:start="119:49" pos:end="119:50">-&gt;</operator><name pos:start="119:51" pos:end="119:54">size</name></name> <operator pos:start="119:56" pos:end="119:57">==</operator> <literal type="number" pos:start="119:59" pos:end="119:59">4</literal></expr>)</condition> <block pos:start="119:62" pos:end="123:25">{<block_content pos:start="121:29" pos:end="121:64">

                            <expr_stmt pos:start="121:29" pos:end="121:64"><expr pos:start="121:29" pos:end="121:63"><call pos:start="121:29" pos:end="121:63"><name pos:start="121:29" pos:end="121:47">isa_unassign_ioport</name><argument_list pos:start="121:48" pos:end="121:63">(<argument pos:start="121:49" pos:end="121:59"><expr pos:start="121:49" pos:end="121:59"><name pos:start="121:49" pos:end="121:55"><name pos:start="121:49" pos:end="121:49">r</name><operator pos:start="121:50" pos:end="121:51">-&gt;</operator><name pos:start="121:52" pos:end="121:55">addr</name></name> <operator pos:start="121:57" pos:end="121:57">+</operator> <literal type="number" pos:start="121:59" pos:end="121:59">2</literal></expr></argument>, <argument pos:start="121:62" pos:end="121:62"><expr pos:start="121:62" pos:end="121:62"><literal type="number" pos:start="121:62" pos:end="121:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="123:27" pos:end="127:25">else <block pos:start="123:32" pos:end="127:25">{<block_content pos:start="125:29" pos:end="125:66">

                            <expr_stmt pos:start="125:29" pos:end="125:66"><expr pos:start="125:29" pos:end="125:65"><call pos:start="125:29" pos:end="125:65"><name pos:start="125:29" pos:end="125:47">isa_unassign_ioport</name><argument_list pos:start="125:48" pos:end="125:65">(<argument pos:start="125:49" pos:end="125:55"><expr pos:start="125:49" pos:end="125:55"><name pos:start="125:49" pos:end="125:55"><name pos:start="125:49" pos:end="125:49">r</name><operator pos:start="125:50" pos:end="125:51">-&gt;</operator><name pos:start="125:52" pos:end="125:55">addr</name></name></expr></argument>, <argument pos:start="125:58" pos:end="125:64"><expr pos:start="125:58" pos:end="125:64"><name pos:start="125:58" pos:end="125:64"><name pos:start="125:58" pos:end="125:58">r</name><operator pos:start="125:59" pos:end="125:60">-&gt;</operator><name pos:start="125:61" pos:end="125:64">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="129:23" pos:end="138:21">else <block pos:start="129:28" pos:end="138:21">{<block_content pos:start="131:25" pos:end="135:72">

                        <expr_stmt pos:start="131:25" pos:end="135:72"><expr pos:start="131:25" pos:end="135:71"><call pos:start="131:25" pos:end="135:71"><name pos:start="131:25" pos:end="131:52">cpu_register_physical_memory</name><argument_list pos:start="131:53" pos:end="135:71">(<argument pos:start="131:54" pos:end="131:77"><expr pos:start="131:54" pos:end="131:77"><call pos:start="131:54" pos:end="131:77"><name pos:start="131:54" pos:end="131:68">pci_to_cpu_addr</name><argument_list pos:start="131:69" pos:end="131:77">(<argument pos:start="131:70" pos:end="131:76"><expr pos:start="131:70" pos:end="131:76"><name pos:start="131:70" pos:end="131:76"><name pos:start="131:70" pos:end="131:70">r</name><operator pos:start="131:71" pos:end="131:72">-&gt;</operator><name pos:start="131:73" pos:end="131:76">addr</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                                     <argument pos:start="133:54" pos:end="133:60"><expr pos:start="133:54" pos:end="133:60"><name pos:start="133:54" pos:end="133:60"><name pos:start="133:54" pos:end="133:54">r</name><operator pos:start="133:55" pos:end="133:56">-&gt;</operator><name pos:start="133:57" pos:end="133:60">size</name></name></expr></argument>,

                                                     <argument pos:start="135:54" pos:end="135:70"><expr pos:start="135:54" pos:end="135:70"><name pos:start="135:54" pos:end="135:70">IO_MEM_UNASSIGNED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="142:17" pos:end="142:35"><expr pos:start="142:17" pos:end="142:34"><name pos:start="142:17" pos:end="142:23"><name pos:start="142:17" pos:end="142:17">r</name><operator pos:start="142:18" pos:end="142:19">-&gt;</operator><name pos:start="142:20" pos:end="142:23">addr</name></name> <operator pos:start="142:25" pos:end="142:25">=</operator> <name pos:start="142:27" pos:end="142:34">new_addr</name></expr>;</expr_stmt>

                <if_stmt pos:start="144:17" pos:end="148:17"><if pos:start="144:17" pos:end="148:17">if <condition pos:start="144:20" pos:end="144:34">(<expr pos:start="144:21" pos:end="144:33"><name pos:start="144:21" pos:end="144:27"><name pos:start="144:21" pos:end="144:21">r</name><operator pos:start="144:22" pos:end="144:23">-&gt;</operator><name pos:start="144:24" pos:end="144:27">addr</name></name> <operator pos:start="144:29" pos:end="144:30">!=</operator> <operator pos:start="144:32" pos:end="144:32">-</operator><literal type="number" pos:start="144:33" pos:end="144:33">1</literal></expr>)</condition> <block pos:start="144:36" pos:end="148:17">{<block_content pos:start="146:21" pos:end="146:65">

                    <expr_stmt pos:start="146:21" pos:end="146:65"><expr pos:start="146:21" pos:end="146:64"><call pos:start="146:21" pos:end="146:64"><name pos:start="146:21" pos:end="146:31"><name pos:start="146:21" pos:end="146:21">r</name><operator pos:start="146:22" pos:end="146:23">-&gt;</operator><name pos:start="146:24" pos:end="146:31">map_func</name></name><argument_list pos:start="146:32" pos:end="146:64">(<argument pos:start="146:33" pos:end="146:33"><expr pos:start="146:33" pos:end="146:33"><name pos:start="146:33" pos:end="146:33">d</name></expr></argument>, <argument pos:start="146:36" pos:end="146:36"><expr pos:start="146:36" pos:end="146:36"><name pos:start="146:36" pos:end="146:36">i</name></expr></argument>, <argument pos:start="146:39" pos:end="146:45"><expr pos:start="146:39" pos:end="146:45"><name pos:start="146:39" pos:end="146:45"><name pos:start="146:39" pos:end="146:39">r</name><operator pos:start="146:40" pos:end="146:41">-&gt;</operator><name pos:start="146:42" pos:end="146:45">addr</name></name></expr></argument>, <argument pos:start="146:48" pos:end="146:54"><expr pos:start="146:48" pos:end="146:54"><name pos:start="146:48" pos:end="146:54"><name pos:start="146:48" pos:end="146:48">r</name><operator pos:start="146:49" pos:end="146:50">-&gt;</operator><name pos:start="146:51" pos:end="146:54">size</name></name></expr></argument>, <argument pos:start="146:57" pos:end="146:63"><expr pos:start="146:57" pos:end="146:63"><name pos:start="146:57" pos:end="146:63"><name pos:start="146:57" pos:end="146:57">r</name><operator pos:start="146:58" pos:end="146:59">-&gt;</operator><name pos:start="146:60" pos:end="146:63">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function></unit>
