<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10652.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">kvm_irqchip_create</name><parameter_list pos:start="1:30" pos:end="1:65">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:42">MachineState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:51">machine</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:64"><decl pos:start="1:54" pos:end="1:64"><type pos:start="1:54" pos:end="1:64"><name pos:start="1:54" pos:end="1:61">KVMState</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:64">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:13">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="17:5"><if pos:start="9:5" pos:end="17:5">if <condition pos:start="9:8" pos:end="13:62">(<expr pos:start="9:9" pos:end="13:61"><operator pos:start="9:9" pos:end="9:9">!</operator><call pos:start="9:10" pos:end="9:48"><name pos:start="9:10" pos:end="9:39">machine_kernel_irqchip_allowed</name><argument_list pos:start="9:40" pos:end="9:48">(<argument pos:start="9:41" pos:end="9:47"><expr pos:start="9:41" pos:end="9:47"><name pos:start="9:41" pos:end="9:47">machine</name></expr></argument>)</argument_list></call> <operator pos:start="9:50" pos:end="9:51">||</operator>

        <operator pos:start="11:9" pos:end="11:9">(</operator><operator pos:start="11:10" pos:end="11:10">!</operator><call pos:start="11:11" pos:end="11:49"><name pos:start="11:11" pos:end="11:29">kvm_check_extension</name><argument_list pos:start="11:30" pos:end="11:49">(<argument pos:start="11:31" pos:end="11:31"><expr pos:start="11:31" pos:end="11:31"><name pos:start="11:31" pos:end="11:31">s</name></expr></argument>, <argument pos:start="11:34" pos:end="11:48"><expr pos:start="11:34" pos:end="11:48"><name pos:start="11:34" pos:end="11:48">KVM_CAP_IRQCHIP</name></expr></argument>)</argument_list></call> <operator pos:start="11:51" pos:end="11:52">&amp;&amp;</operator>

         <operator pos:start="13:10" pos:end="13:10">(</operator><call pos:start="13:11" pos:end="13:55"><name pos:start="13:11" pos:end="13:27">kvm_vm_enable_cap</name><argument_list pos:start="13:28" pos:end="13:55">(<argument pos:start="13:29" pos:end="13:29"><expr pos:start="13:29" pos:end="13:29"><name pos:start="13:29" pos:end="13:29">s</name></expr></argument>, <argument pos:start="13:32" pos:end="13:51"><expr pos:start="13:32" pos:end="13:51"><name pos:start="13:32" pos:end="13:51">KVM_CAP_S390_IRQCHIP</name></expr></argument>, <argument pos:start="13:54" pos:end="13:54"><expr pos:start="13:54" pos:end="13:54"><literal type="number" pos:start="13:54" pos:end="13:54">0</literal></expr></argument>)</argument_list></call> <operator pos:start="13:57" pos:end="13:57">&lt;</operator> <literal type="number" pos:start="13:59" pos:end="13:59">0</literal><operator pos:start="13:60" pos:end="13:60">)</operator><operator pos:start="13:61" pos:end="13:61">)</operator></expr>)</condition> <block pos:start="13:64" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:17">

        <return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="21:5" pos:end="23:34">/* First probe and see if there's a arch-specific hook to create the

     * in-kernel irqchip for us */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:37"><expr pos:start="25:5" pos:end="25:36"><name pos:start="25:5" pos:end="25:7">ret</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:36"><name pos:start="25:11" pos:end="25:33">kvm_arch_irqchip_create</name><argument_list pos:start="25:34" pos:end="25:36">(<argument pos:start="25:35" pos:end="25:35"><expr pos:start="25:35" pos:end="25:35"><name pos:start="25:35" pos:end="25:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="43:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:16">(<expr pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">&lt;</operator> <literal type="number" pos:start="27:15" pos:end="27:15">0</literal></expr>)</condition> <block pos:start="27:18" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:19">

        <return pos:start="29:9" pos:end="29:19">return <expr pos:start="29:16" pos:end="29:18"><name pos:start="29:16" pos:end="29:18">ret</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="31:7" pos:end="43:5">else if <condition pos:start="31:15" pos:end="31:24">(<expr pos:start="31:16" pos:end="31:23"><name pos:start="31:16" pos:end="31:18">ret</name> <operator pos:start="31:20" pos:end="31:21">==</operator> <literal type="number" pos:start="31:23" pos:end="31:23">0</literal></expr>)</condition> <block pos:start="31:26" pos:end="43:5">{<block_content pos:start="33:9" pos:end="41:9">

        <expr_stmt pos:start="33:9" pos:end="33:50"><expr pos:start="33:9" pos:end="33:49"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:49"><name pos:start="33:15" pos:end="33:26">kvm_vm_ioctl</name><argument_list pos:start="33:27" pos:end="33:49">(<argument pos:start="33:28" pos:end="33:28"><expr pos:start="33:28" pos:end="33:28"><name pos:start="33:28" pos:end="33:28">s</name></expr></argument>, <argument pos:start="33:31" pos:end="33:48"><expr pos:start="33:31" pos:end="33:48"><name pos:start="33:31" pos:end="33:48">KVM_CREATE_IRQCHIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:20">(<expr pos:start="35:13" pos:end="35:19"><name pos:start="35:13" pos:end="35:15">ret</name> <operator pos:start="35:17" pos:end="35:17">&lt;</operator> <literal type="number" pos:start="35:19" pos:end="35:19">0</literal></expr>)</condition> <block pos:start="35:22" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:23">

            <expr_stmt pos:start="37:13" pos:end="37:62"><expr pos:start="37:13" pos:end="37:61"><call pos:start="37:13" pos:end="37:61"><name pos:start="37:13" pos:end="37:19">fprintf</name><argument_list pos:start="37:20" pos:end="37:61">(<argument pos:start="37:21" pos:end="37:26"><expr pos:start="37:21" pos:end="37:26"><name pos:start="37:21" pos:end="37:26">stderr</name></expr></argument>, <argument pos:start="37:29" pos:end="37:60"><expr pos:start="37:29" pos:end="37:60"><literal type="string" pos:start="37:29" pos:end="37:60">"Create kernel irqchip failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="39:13" pos:end="39:23">return <expr pos:start="39:20" pos:end="39:22"><name pos:start="39:20" pos:end="39:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:30"><expr pos:start="47:5" pos:end="47:29"><name pos:start="47:5" pos:end="47:22">kvm_kernel_irqchip</name> <operator pos:start="47:24" pos:end="47:24">=</operator> <name pos:start="47:26" pos:end="47:29">true</name></expr>;</expr_stmt>

    <comment type="block" pos:start="49:5" pos:end="53:7">/* If we have an in-kernel IRQ chip then we must have asynchronous

     * interrupt delivery (though the reverse is not necessarily true)

     */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:40"><expr pos:start="55:5" pos:end="55:39"><name pos:start="55:5" pos:end="55:32">kvm_async_interrupts_allowed</name> <operator pos:start="55:34" pos:end="55:34">=</operator> <name pos:start="55:36" pos:end="55:39">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:38"><expr pos:start="57:5" pos:end="57:37"><name pos:start="57:5" pos:end="57:30">kvm_halt_in_kernel_allowed</name> <operator pos:start="57:32" pos:end="57:32">=</operator> <name pos:start="57:34" pos:end="57:37">true</name></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:28"><expr pos:start="61:5" pos:end="61:27"><call pos:start="61:5" pos:end="61:27"><name pos:start="61:5" pos:end="61:24">kvm_init_irq_routing</name><argument_list pos:start="61:25" pos:end="61:27">(<argument pos:start="61:26" pos:end="61:26"><expr pos:start="61:26" pos:end="61:26"><name pos:start="61:26" pos:end="61:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="65:5" pos:end="65:13">return <expr pos:start="65:12" pos:end="65:12"><literal type="number" pos:start="65:12" pos:end="65:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
