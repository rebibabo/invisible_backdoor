<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11819.c" pos:tabs="8"><function pos:start="1:1" pos:end="241:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">memory_dump</name><parameter_list pos:start="1:24" pos:end="3:53">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:31">Monitor</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">mon</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:47"><decl pos:start="1:39" pos:end="1:47"><type pos:start="1:39" pos:end="1:47"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:47">count</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:59"><decl pos:start="1:50" pos:end="1:59"><type pos:start="1:50" pos:end="1:59"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:59">format</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:70"><decl pos:start="1:62" pos:end="1:70"><type pos:start="1:62" pos:end="1:70"><name pos:start="1:62" pos:end="1:64">int</name></type> <name pos:start="1:66" pos:end="1:70">wsize</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:35"><decl pos:start="3:25" pos:end="3:35"><type pos:start="3:25" pos:end="3:35"><name pos:start="3:25" pos:end="3:30">hwaddr</name></type> <name pos:start="3:32" pos:end="3:35">addr</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:52"><decl pos:start="3:38" pos:end="3:52"><type pos:start="3:38" pos:end="3:52"><name pos:start="3:38" pos:end="3:40">int</name></type> <name pos:start="3:42" pos:end="3:52">is_physical</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="241:1">{<block_content pos:start="7:5" pos:end="239:5">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">l</name></decl>, <decl pos:start="7:12" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:20">line_size</name></decl>, <decl pos:start="7:23" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:23" pos:end="7:23">i</name></decl>, <decl pos:start="7:26" pos:end="7:35"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:26" pos:end="7:35">max_digits</name></decl>, <decl pos:start="7:38" pos:end="7:40"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:38" pos:end="7:40">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:19"><name pos:start="9:13" pos:end="9:15">buf</name><index pos:start="9:16" pos:end="9:19">[<expr pos:start="9:17" pos:end="9:18"><literal type="number" pos:start="9:17" pos:end="9:18">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:14">v</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="75:5"><if pos:start="15:5" pos:end="75:5">if <condition pos:start="15:8" pos:end="15:22">(<expr pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:14">format</name> <operator pos:start="15:16" pos:end="15:17">==</operator> <literal type="char" pos:start="15:19" pos:end="15:21">'i'</literal></expr>)</condition> <block pos:start="15:24" pos:end="75:5">{<block_content pos:start="17:9" pos:end="73:15">

        <decl_stmt pos:start="17:9" pos:end="20:0"><decl pos:start="17:9" pos:end="17:21"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:17">flags</name> <init pos:start="17:19" pos:end="17:21">= <expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">0</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="19:1" pos:end="19:18">#<cpp:directive pos:start="19:2" pos:end="19:6">ifdef</cpp:directive> <name pos:start="19:8" pos:end="19:18">TARGET_I386</name></cpp:ifdef>

        <decl_stmt pos:start="21:9" pos:end="21:46"><decl pos:start="21:9" pos:end="21:45"><type pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:20">CPUArchState</name> <modifier pos:start="21:22" pos:end="21:22">*</modifier></type><name pos:start="21:23" pos:end="21:25">env</name> <init pos:start="21:27" pos:end="21:45">= <expr pos:start="21:29" pos:end="21:45"><call pos:start="21:29" pos:end="21:45"><name pos:start="21:29" pos:end="21:43">mon_get_cpu_env</name><argument_list pos:start="21:44" pos:end="21:45">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="23:9" pos:end="62:0"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:23">(<expr pos:start="23:13" pos:end="23:22"><name pos:start="23:13" pos:end="23:17">wsize</name> <operator pos:start="23:19" pos:end="23:20">==</operator> <literal type="number" pos:start="23:22" pos:end="23:22">2</literal></expr>)</condition> <block pos:start="23:25" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:22">

            <expr_stmt pos:start="25:13" pos:end="25:22"><expr pos:start="25:13" pos:end="25:21"><name pos:start="25:13" pos:end="25:17">flags</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <literal type="number" pos:start="25:21" pos:end="25:21">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="27:11" pos:end="31:9">else if <condition pos:start="27:19" pos:end="27:30">(<expr pos:start="27:20" pos:end="27:29"><name pos:start="27:20" pos:end="27:24">wsize</name> <operator pos:start="27:26" pos:end="27:27">==</operator> <literal type="number" pos:start="27:29" pos:end="27:29">4</literal></expr>)</condition> <block pos:start="27:32" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:22">

            <expr_stmt pos:start="29:13" pos:end="29:22"><expr pos:start="29:13" pos:end="29:21"><name pos:start="29:13" pos:end="29:17">flags</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <literal type="number" pos:start="29:21" pos:end="29:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="31:11" pos:end="62:0">else <block pos:start="31:16" pos:end="62:0">{<block_content pos:start="35:13" pos:end="55:13">

            <comment type="block" pos:start="33:13" pos:end="33:55">/* as default we use the current CS size */</comment>

            <expr_stmt pos:start="35:13" pos:end="35:22"><expr pos:start="35:13" pos:end="35:21"><name pos:start="35:13" pos:end="35:17">flags</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <literal type="number" pos:start="35:21" pos:end="35:21">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="37:13" pos:end="55:13"><if pos:start="37:13" pos:end="55:13">if <condition pos:start="37:16" pos:end="37:20">(<expr pos:start="37:17" pos:end="37:19"><name pos:start="37:17" pos:end="37:19">env</name></expr>)</condition> <block pos:start="37:22" pos:end="55:13">{<block_content pos:start="41:17" pos:end="53:30">

<cpp:ifdef pos:start="39:1" pos:end="39:20">#<cpp:directive pos:start="39:2" pos:end="39:6">ifdef</cpp:directive> <name pos:start="39:8" pos:end="39:20">TARGET_X86_64</name></cpp:ifdef>

                <if_stmt pos:start="41:17" pos:end="53:30"><if pos:start="41:17" pos:end="45:30">if <condition pos:start="41:20" pos:end="43:58">(<expr pos:start="41:21" pos:end="43:57"><operator pos:start="41:21" pos:end="41:21">(</operator><name pos:start="41:22" pos:end="41:30"><name pos:start="41:22" pos:end="41:24">env</name><operator pos:start="41:25" pos:end="41:26">-&gt;</operator><name pos:start="41:27" pos:end="41:30">efer</name></name> <operator pos:start="41:32" pos:end="41:32">&amp;</operator> <name pos:start="41:34" pos:end="41:45">MSR_EFER_LMA</name><operator pos:start="41:46" pos:end="41:46">)</operator> <operator pos:start="41:48" pos:end="41:49">&amp;&amp;</operator>

                    <operator pos:start="43:21" pos:end="43:21">(</operator><name pos:start="43:22" pos:end="43:36"><name pos:start="43:22" pos:end="43:24">env</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:30">segs</name><index pos:start="43:31" pos:end="43:36">[<expr pos:start="43:32" pos:end="43:35"><name pos:start="43:32" pos:end="43:35">R_CS</name></expr>]</index></name><operator pos:start="43:37" pos:end="43:37">.</operator><name pos:start="43:38" pos:end="43:42">flags</name> <operator pos:start="43:44" pos:end="43:44">&amp;</operator> <name pos:start="43:46" pos:end="43:56">DESC_L_MASK</name><operator pos:start="43:57" pos:end="43:57">)</operator></expr>)</condition><block type="pseudo" pos:start="45:21" pos:end="45:30"><block_content pos:start="45:21" pos:end="45:30">

                    <expr_stmt pos:start="45:21" pos:end="45:30"><expr pos:start="45:21" pos:end="45:29"><name pos:start="45:21" pos:end="45:25">flags</name> <operator pos:start="45:27" pos:end="45:27">=</operator> <literal type="number" pos:start="45:29" pos:end="45:29">2</literal></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="47:17" pos:end="53:30">else

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

                if <condition pos:start="51:20" pos:end="51:59">(<expr pos:start="51:21" pos:end="51:58"><operator pos:start="51:21" pos:end="51:21">!</operator><operator pos:start="51:22" pos:end="51:22">(</operator><name pos:start="51:23" pos:end="51:37"><name pos:start="51:23" pos:end="51:25">env</name><operator pos:start="51:26" pos:end="51:27">-&gt;</operator><name pos:start="51:28" pos:end="51:31">segs</name><index pos:start="51:32" pos:end="51:37">[<expr pos:start="51:33" pos:end="51:36"><name pos:start="51:33" pos:end="51:36">R_CS</name></expr>]</index></name><operator pos:start="51:38" pos:end="51:38">.</operator><name pos:start="51:39" pos:end="51:43">flags</name> <operator pos:start="51:45" pos:end="51:45">&amp;</operator> <name pos:start="51:47" pos:end="51:57">DESC_B_MASK</name><operator pos:start="51:58" pos:end="51:58">)</operator></expr>)</condition><block type="pseudo" pos:start="53:21" pos:end="53:30"><block_content pos:start="53:21" pos:end="53:30">

                    <expr_stmt pos:start="53:21" pos:end="53:30"><expr pos:start="53:21" pos:end="53:29"><name pos:start="53:21" pos:end="53:25">flags</name> <operator pos:start="53:27" pos:end="53:27">=</operator> <literal type="number" pos:start="53:29" pos:end="53:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="61:1" pos:end="61:17">#<cpp:directive pos:start="61:2" pos:end="61:6">ifdef</cpp:directive> <name pos:start="61:8" pos:end="61:17">TARGET_PPC</name></cpp:ifdef>

        <decl_stmt pos:start="63:9" pos:end="63:46"><decl pos:start="63:9" pos:end="63:45"><type pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:20">CPUArchState</name> <modifier pos:start="63:22" pos:end="63:22">*</modifier></type><name pos:start="63:23" pos:end="63:25">env</name> <init pos:start="63:27" pos:end="63:45">= <expr pos:start="63:29" pos:end="63:45"><call pos:start="63:29" pos:end="63:45"><name pos:start="63:29" pos:end="63:43">mon_get_cpu_env</name><argument_list pos:start="63:44" pos:end="63:45">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:29"><expr pos:start="65:9" pos:end="65:28"><name pos:start="65:9" pos:end="65:13">flags</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <name pos:start="65:17" pos:end="65:22">msr_le</name> <operator pos:start="65:24" pos:end="65:25">&lt;&lt;</operator> <literal type="number" pos:start="65:27" pos:end="65:28">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="70:0"><expr pos:start="67:9" pos:end="67:30"><name pos:start="67:9" pos:end="67:13">flags</name> <operator pos:start="67:15" pos:end="67:16">|=</operator> <name pos:start="67:18" pos:end="67:30"><name pos:start="67:18" pos:end="67:20">env</name><operator pos:start="67:21" pos:end="67:22">-&gt;</operator><name pos:start="67:23" pos:end="67:30">bfd_mach</name></name></expr>;</expr_stmt>

<cpp:endif pos:start="69:1" pos:end="69:6">#<cpp:directive pos:start="69:2" pos:end="69:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="71:9" pos:end="71:75"><expr pos:start="71:9" pos:end="71:74"><call pos:start="71:9" pos:end="71:74"><name pos:start="71:9" pos:end="71:21">monitor_disas</name><argument_list pos:start="71:22" pos:end="71:74">(<argument pos:start="71:23" pos:end="71:25"><expr pos:start="71:23" pos:end="71:25"><name pos:start="71:23" pos:end="71:25">mon</name></expr></argument>, <argument pos:start="71:28" pos:end="71:40"><expr pos:start="71:28" pos:end="71:40"><call pos:start="71:28" pos:end="71:40"><name pos:start="71:28" pos:end="71:38">mon_get_cpu</name><argument_list pos:start="71:39" pos:end="71:40">()</argument_list></call></expr></argument>, <argument pos:start="71:43" pos:end="71:46"><expr pos:start="71:43" pos:end="71:46"><name pos:start="71:43" pos:end="71:46">addr</name></expr></argument>, <argument pos:start="71:49" pos:end="71:53"><expr pos:start="71:49" pos:end="71:53"><name pos:start="71:49" pos:end="71:53">count</name></expr></argument>, <argument pos:start="71:56" pos:end="71:66"><expr pos:start="71:56" pos:end="71:66"><name pos:start="71:56" pos:end="71:66">is_physical</name></expr></argument>, <argument pos:start="71:69" pos:end="71:73"><expr pos:start="71:69" pos:end="71:73"><name pos:start="71:69" pos:end="71:73">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:24"><expr pos:start="79:5" pos:end="79:23"><name pos:start="79:5" pos:end="79:7">len</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <name pos:start="79:11" pos:end="79:15">wsize</name> <operator pos:start="79:17" pos:end="79:17">*</operator> <name pos:start="79:19" pos:end="79:23">count</name></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="87:23"><if pos:start="81:5" pos:end="83:22">if <condition pos:start="81:8" pos:end="81:19">(<expr pos:start="81:9" pos:end="81:18"><name pos:start="81:9" pos:end="81:13">wsize</name> <operator pos:start="81:15" pos:end="81:16">==</operator> <literal type="number" pos:start="81:18" pos:end="81:18">1</literal></expr>)</condition><block type="pseudo" pos:start="83:9" pos:end="83:22"><block_content pos:start="83:9" pos:end="83:22">

        <expr_stmt pos:start="83:9" pos:end="83:22"><expr pos:start="83:9" pos:end="83:21"><name pos:start="83:9" pos:end="83:17">line_size</name> <operator pos:start="83:19" pos:end="83:19">=</operator> <literal type="number" pos:start="83:21" pos:end="83:21">8</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="85:5" pos:end="87:23">else<block type="pseudo" pos:start="87:9" pos:end="87:23"><block_content pos:start="87:9" pos:end="87:23">

        <expr_stmt pos:start="87:9" pos:end="87:23"><expr pos:start="87:9" pos:end="87:22"><name pos:start="87:9" pos:end="87:17">line_size</name> <operator pos:start="87:19" pos:end="87:19">=</operator> <literal type="number" pos:start="87:21" pos:end="87:22">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:19"><expr pos:start="89:5" pos:end="89:18"><name pos:start="89:5" pos:end="89:14">max_digits</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <literal type="number" pos:start="89:18" pos:end="89:18">0</literal></expr>;</expr_stmt>



    <switch pos:start="93:5" pos:end="123:5">switch<condition pos:start="93:11" pos:end="93:18">(<expr pos:start="93:12" pos:end="93:17"><name pos:start="93:12" pos:end="93:17">format</name></expr>)</condition> <block pos:start="93:20" pos:end="123:5">{<block_content pos:start="95:5" pos:end="121:14">

    <case pos:start="95:5" pos:end="95:13">case <expr pos:start="95:10" pos:end="95:12"><literal type="char" pos:start="95:10" pos:end="95:12">'o'</literal></expr>:</case>

        <expr_stmt pos:start="97:9" pos:end="97:41"><expr pos:start="97:9" pos:end="97:40"><name pos:start="97:9" pos:end="97:18">max_digits</name> <operator pos:start="97:20" pos:end="97:20">=</operator> <operator pos:start="97:22" pos:end="97:22">(</operator><name pos:start="97:23" pos:end="97:27">wsize</name> <operator pos:start="97:29" pos:end="97:29">*</operator> <literal type="number" pos:start="97:31" pos:end="97:33">8</literal> <operator pos:start="97:33" pos:end="97:33">+</operator> <literal type="number" pos:start="97:35" pos:end="97:35">2</literal><operator pos:start="97:36" pos:end="97:36">)</operator> <operator pos:start="97:38" pos:end="97:38">/</operator> <literal type="number" pos:start="97:40" pos:end="97:40">3</literal></expr>;</expr_stmt>

        <break pos:start="99:9" pos:end="99:14">break;</break>

    <default pos:start="101:5" pos:end="101:12">default:</default>

    <case pos:start="103:5" pos:end="103:13">case <expr pos:start="103:10" pos:end="103:12"><literal type="char" pos:start="103:10" pos:end="103:12">'x'</literal></expr>:</case>

        <expr_stmt pos:start="105:9" pos:end="105:37"><expr pos:start="105:9" pos:end="105:36"><name pos:start="105:9" pos:end="105:18">max_digits</name> <operator pos:start="105:20" pos:end="105:20">=</operator> <operator pos:start="105:22" pos:end="105:22">(</operator><name pos:start="105:23" pos:end="105:27">wsize</name> <operator pos:start="105:29" pos:end="105:29">*</operator> <literal type="number" pos:start="105:31" pos:end="105:31">8</literal><operator pos:start="105:32" pos:end="105:32">)</operator> <operator pos:start="105:34" pos:end="105:34">/</operator> <literal type="number" pos:start="105:36" pos:end="105:36">4</literal></expr>;</expr_stmt>

        <break pos:start="107:9" pos:end="107:14">break;</break>

    <case pos:start="109:5" pos:end="109:13">case <expr pos:start="109:10" pos:end="109:12"><literal type="char" pos:start="109:10" pos:end="109:12">'u'</literal></expr>:</case>

    <case pos:start="111:5" pos:end="111:13">case <expr pos:start="111:10" pos:end="111:12"><literal type="char" pos:start="111:10" pos:end="111:12">'d'</literal></expr>:</case>

        <expr_stmt pos:start="113:9" pos:end="113:48"><expr pos:start="113:9" pos:end="113:47"><name pos:start="113:9" pos:end="113:18">max_digits</name> <operator pos:start="113:20" pos:end="113:20">=</operator> <operator pos:start="113:22" pos:end="113:22">(</operator><name pos:start="113:23" pos:end="113:27">wsize</name> <operator pos:start="113:29" pos:end="113:29">*</operator> <literal type="number" pos:start="113:31" pos:end="113:31">8</literal> <operator pos:start="113:33" pos:end="113:33">*</operator> <literal type="number" pos:start="113:35" pos:end="113:38">10</literal> <operator pos:start="113:38" pos:end="113:38">+</operator> <literal type="number" pos:start="113:40" pos:end="113:41">32</literal><operator pos:start="113:42" pos:end="113:42">)</operator> <operator pos:start="113:44" pos:end="113:44">/</operator> <literal type="number" pos:start="113:46" pos:end="113:47">33</literal></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    <case pos:start="117:5" pos:end="117:13">case <expr pos:start="117:10" pos:end="117:12"><literal type="char" pos:start="117:10" pos:end="117:12">'c'</literal></expr>:</case>

        <expr_stmt pos:start="119:9" pos:end="119:18"><expr pos:start="119:9" pos:end="119:17"><name pos:start="119:9" pos:end="119:13">wsize</name> <operator pos:start="119:15" pos:end="119:15">=</operator> <literal type="number" pos:start="119:17" pos:end="119:17">1</literal></expr>;</expr_stmt>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    </block_content>}</block></switch>



    <while pos:start="127:5" pos:end="239:5">while <condition pos:start="127:11" pos:end="127:19">(<expr pos:start="127:12" pos:end="127:18"><name pos:start="127:12" pos:end="127:14">len</name> <operator pos:start="127:16" pos:end="127:16">&gt;</operator> <literal type="number" pos:start="127:18" pos:end="127:18">0</literal></expr>)</condition> <block pos:start="127:21" pos:end="239:5">{<block_content pos:start="129:9" pos:end="237:17">

        <if_stmt pos:start="129:9" pos:end="135:71"><if pos:start="129:9" pos:end="131:58">if <condition pos:start="129:12" pos:end="129:24">(<expr pos:start="129:13" pos:end="129:23"><name pos:start="129:13" pos:end="129:23">is_physical</name></expr>)</condition><block type="pseudo" pos:start="131:13" pos:end="131:58"><block_content pos:start="131:13" pos:end="131:58">

            <expr_stmt pos:start="131:13" pos:end="131:58"><expr pos:start="131:13" pos:end="131:57"><call pos:start="131:13" pos:end="131:57"><name pos:start="131:13" pos:end="131:26">monitor_printf</name><argument_list pos:start="131:27" pos:end="131:57">(<argument pos:start="131:28" pos:end="131:30"><expr pos:start="131:28" pos:end="131:30"><name pos:start="131:28" pos:end="131:30">mon</name></expr></argument>, <argument pos:start="131:33" pos:end="131:50"><expr pos:start="131:33" pos:end="131:50"><name pos:start="131:33" pos:end="131:46">TARGET_FMT_plx</name> <literal type="string" pos:start="131:48" pos:end="131:50">":"</literal></expr></argument>, <argument pos:start="131:53" pos:end="131:56"><expr pos:start="131:53" pos:end="131:56"><name pos:start="131:53" pos:end="131:56">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="133:9" pos:end="135:71">else<block type="pseudo" pos:start="135:13" pos:end="135:71"><block_content pos:start="135:13" pos:end="135:71">

            <expr_stmt pos:start="135:13" pos:end="135:71"><expr pos:start="135:13" pos:end="135:70"><call pos:start="135:13" pos:end="135:70"><name pos:start="135:13" pos:end="135:26">monitor_printf</name><argument_list pos:start="135:27" pos:end="135:70">(<argument pos:start="135:28" pos:end="135:30"><expr pos:start="135:28" pos:end="135:30"><name pos:start="135:28" pos:end="135:30">mon</name></expr></argument>, <argument pos:start="135:33" pos:end="135:49"><expr pos:start="135:33" pos:end="135:49"><name pos:start="135:33" pos:end="135:45">TARGET_FMT_lx</name> <literal type="string" pos:start="135:47" pos:end="135:49">":"</literal></expr></argument>, <argument pos:start="135:52" pos:end="135:69"><expr pos:start="135:52" pos:end="135:69"><operator pos:start="135:52" pos:end="135:52">(</operator><name pos:start="135:53" pos:end="135:64">target_ulong</name><operator pos:start="135:65" pos:end="135:65">)</operator><name pos:start="135:66" pos:end="135:69">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:16"><expr pos:start="137:9" pos:end="137:15"><name pos:start="137:9" pos:end="137:9">l</name> <operator pos:start="137:11" pos:end="137:11">=</operator> <name pos:start="137:13" pos:end="137:15">len</name></expr>;</expr_stmt>

        <if_stmt pos:start="139:9" pos:end="141:26"><if pos:start="139:9" pos:end="141:26">if <condition pos:start="139:12" pos:end="139:26">(<expr pos:start="139:13" pos:end="139:25"><name pos:start="139:13" pos:end="139:13">l</name> <operator pos:start="139:15" pos:end="139:15">&gt;</operator> <name pos:start="139:17" pos:end="139:25">line_size</name></expr>)</condition><block type="pseudo" pos:start="141:13" pos:end="141:26"><block_content pos:start="141:13" pos:end="141:26">

            <expr_stmt pos:start="141:13" pos:end="141:26"><expr pos:start="141:13" pos:end="141:25"><name pos:start="141:13" pos:end="141:13">l</name> <operator pos:start="141:15" pos:end="141:15">=</operator> <name pos:start="141:17" pos:end="141:25">line_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="143:9" pos:end="157:9"><if pos:start="143:9" pos:end="147:9">if <condition pos:start="143:12" pos:end="143:24">(<expr pos:start="143:13" pos:end="143:23"><name pos:start="143:13" pos:end="143:23">is_physical</name></expr>)</condition> <block pos:start="143:26" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:51">

            <expr_stmt pos:start="145:13" pos:end="145:51"><expr pos:start="145:13" pos:end="145:50"><call pos:start="145:13" pos:end="145:50"><name pos:start="145:13" pos:end="145:36">cpu_physical_memory_read</name><argument_list pos:start="145:37" pos:end="145:50">(<argument pos:start="145:38" pos:end="145:41"><expr pos:start="145:38" pos:end="145:41"><name pos:start="145:38" pos:end="145:41">addr</name></expr></argument>, <argument pos:start="145:44" pos:end="145:46"><expr pos:start="145:44" pos:end="145:46"><name pos:start="145:44" pos:end="145:46">buf</name></expr></argument>, <argument pos:start="145:49" pos:end="145:49"><expr pos:start="145:49" pos:end="145:49"><name pos:start="145:49" pos:end="145:49">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="147:11" pos:end="157:9">else <block pos:start="147:16" pos:end="157:9">{<block_content pos:start="149:13" pos:end="155:13">

            <if_stmt pos:start="149:13" pos:end="155:13"><if pos:start="149:13" pos:end="155:13">if <condition pos:start="149:16" pos:end="149:72">(<expr pos:start="149:17" pos:end="149:71"><call pos:start="149:17" pos:end="149:67"><name pos:start="149:17" pos:end="149:35">cpu_memory_rw_debug</name><argument_list pos:start="149:36" pos:end="149:67">(<argument pos:start="149:37" pos:end="149:49"><expr pos:start="149:37" pos:end="149:49"><call pos:start="149:37" pos:end="149:49"><name pos:start="149:37" pos:end="149:47">mon_get_cpu</name><argument_list pos:start="149:48" pos:end="149:49">()</argument_list></call></expr></argument>, <argument pos:start="149:52" pos:end="149:55"><expr pos:start="149:52" pos:end="149:55"><name pos:start="149:52" pos:end="149:55">addr</name></expr></argument>, <argument pos:start="149:58" pos:end="149:60"><expr pos:start="149:58" pos:end="149:60"><name pos:start="149:58" pos:end="149:60">buf</name></expr></argument>, <argument pos:start="149:63" pos:end="149:63"><expr pos:start="149:63" pos:end="149:63"><name pos:start="149:63" pos:end="149:63">l</name></expr></argument>, <argument pos:start="149:66" pos:end="149:66"><expr pos:start="149:66" pos:end="149:66"><literal type="number" pos:start="149:66" pos:end="149:66">0</literal></expr></argument>)</argument_list></call> <operator pos:start="149:69" pos:end="149:69">&lt;</operator> <literal type="number" pos:start="149:71" pos:end="149:71">0</literal></expr>)</condition> <block pos:start="149:74" pos:end="155:13">{<block_content pos:start="151:17" pos:end="153:22">

                <expr_stmt pos:start="151:17" pos:end="151:63"><expr pos:start="151:17" pos:end="151:62"><call pos:start="151:17" pos:end="151:62"><name pos:start="151:17" pos:end="151:30">monitor_printf</name><argument_list pos:start="151:31" pos:end="151:62">(<argument pos:start="151:32" pos:end="151:34"><expr pos:start="151:32" pos:end="151:34"><name pos:start="151:32" pos:end="151:34">mon</name></expr></argument>, <argument pos:start="151:37" pos:end="151:61"><expr pos:start="151:37" pos:end="151:61"><literal type="string" pos:start="151:37" pos:end="151:61">" Cannot access memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="153:17" pos:end="153:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:14"><expr pos:start="159:9" pos:end="159:13"><name pos:start="159:9" pos:end="159:9">i</name> <operator pos:start="159:11" pos:end="159:11">=</operator> <literal type="number" pos:start="159:13" pos:end="159:13">0</literal></expr>;</expr_stmt>

        <while pos:start="161:9" pos:end="231:9">while <condition pos:start="161:15" pos:end="161:21">(<expr pos:start="161:16" pos:end="161:20"><name pos:start="161:16" pos:end="161:16">i</name> <operator pos:start="161:18" pos:end="161:18">&lt;</operator> <name pos:start="161:20" pos:end="161:20">l</name></expr>)</condition> <block pos:start="161:23" pos:end="231:9">{<block_content pos:start="163:13" pos:end="229:23">

            <switch pos:start="163:13" pos:end="191:13">switch<condition pos:start="163:19" pos:end="163:25">(<expr pos:start="163:20" pos:end="163:24"><name pos:start="163:20" pos:end="163:24">wsize</name></expr>)</condition> <block pos:start="163:27" pos:end="191:13">{<block_content pos:start="165:13" pos:end="189:22">

            <default pos:start="165:13" pos:end="165:20">default:</default>

            <case pos:start="167:13" pos:end="167:19">case <expr pos:start="167:18" pos:end="167:18"><literal type="number" pos:start="167:18" pos:end="167:18">1</literal></expr>:</case>

                <expr_stmt pos:start="169:17" pos:end="169:36"><expr pos:start="169:17" pos:end="169:35"><name pos:start="169:17" pos:end="169:17">v</name> <operator pos:start="169:19" pos:end="169:19">=</operator> <call pos:start="169:21" pos:end="169:35"><name pos:start="169:21" pos:end="169:26">ldub_p</name><argument_list pos:start="169:27" pos:end="169:35">(<argument pos:start="169:28" pos:end="169:34"><expr pos:start="169:28" pos:end="169:34"><name pos:start="169:28" pos:end="169:30">buf</name> <operator pos:start="169:32" pos:end="169:32">+</operator> <name pos:start="169:34" pos:end="169:34">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="171:17" pos:end="171:22">break;</break>

            <case pos:start="173:13" pos:end="173:19">case <expr pos:start="173:18" pos:end="173:18"><literal type="number" pos:start="173:18" pos:end="173:18">2</literal></expr>:</case>

                <expr_stmt pos:start="175:17" pos:end="175:36"><expr pos:start="175:17" pos:end="175:35"><name pos:start="175:17" pos:end="175:17">v</name> <operator pos:start="175:19" pos:end="175:19">=</operator> <call pos:start="175:21" pos:end="175:35"><name pos:start="175:21" pos:end="175:26">lduw_p</name><argument_list pos:start="175:27" pos:end="175:35">(<argument pos:start="175:28" pos:end="175:34"><expr pos:start="175:28" pos:end="175:34"><name pos:start="175:28" pos:end="175:30">buf</name> <operator pos:start="175:32" pos:end="175:32">+</operator> <name pos:start="175:34" pos:end="175:34">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="177:17" pos:end="177:22">break;</break>

            <case pos:start="179:13" pos:end="179:19">case <expr pos:start="179:18" pos:end="179:18"><literal type="number" pos:start="179:18" pos:end="179:18">4</literal></expr>:</case>

                <expr_stmt pos:start="181:17" pos:end="181:45"><expr pos:start="181:17" pos:end="181:44"><name pos:start="181:17" pos:end="181:17">v</name> <operator pos:start="181:19" pos:end="181:19">=</operator> <operator pos:start="181:21" pos:end="181:21">(</operator><name pos:start="181:22" pos:end="181:29">uint32_t</name><operator pos:start="181:30" pos:end="181:30">)</operator><call pos:start="181:31" pos:end="181:44"><name pos:start="181:31" pos:end="181:35">ldl_p</name><argument_list pos:start="181:36" pos:end="181:44">(<argument pos:start="181:37" pos:end="181:43"><expr pos:start="181:37" pos:end="181:43"><name pos:start="181:37" pos:end="181:39">buf</name> <operator pos:start="181:41" pos:end="181:41">+</operator> <name pos:start="181:43" pos:end="181:43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="183:17" pos:end="183:22">break;</break>

            <case pos:start="185:13" pos:end="185:19">case <expr pos:start="185:18" pos:end="185:18"><literal type="number" pos:start="185:18" pos:end="185:18">8</literal></expr>:</case>

                <expr_stmt pos:start="187:17" pos:end="187:35"><expr pos:start="187:17" pos:end="187:34"><name pos:start="187:17" pos:end="187:17">v</name> <operator pos:start="187:19" pos:end="187:19">=</operator> <call pos:start="187:21" pos:end="187:34"><name pos:start="187:21" pos:end="187:25">ldq_p</name><argument_list pos:start="187:26" pos:end="187:34">(<argument pos:start="187:27" pos:end="187:33"><expr pos:start="187:27" pos:end="187:33"><name pos:start="187:27" pos:end="187:29">buf</name> <operator pos:start="187:31" pos:end="187:31">+</operator> <name pos:start="187:33" pos:end="187:33">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="189:17" pos:end="189:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="193:13" pos:end="193:37"><expr pos:start="193:13" pos:end="193:36"><call pos:start="193:13" pos:end="193:36"><name pos:start="193:13" pos:end="193:26">monitor_printf</name><argument_list pos:start="193:27" pos:end="193:36">(<argument pos:start="193:28" pos:end="193:30"><expr pos:start="193:28" pos:end="193:30"><name pos:start="193:28" pos:end="193:30">mon</name></expr></argument>, <argument pos:start="193:33" pos:end="193:35"><expr pos:start="193:33" pos:end="193:35"><literal type="string" pos:start="193:33" pos:end="193:35">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="195:13" pos:end="227:13">switch<condition pos:start="195:19" pos:end="195:26">(<expr pos:start="195:20" pos:end="195:25"><name pos:start="195:20" pos:end="195:25">format</name></expr>)</condition> <block pos:start="195:28" pos:end="227:13">{<block_content pos:start="197:13" pos:end="225:22">

            <case pos:start="197:13" pos:end="197:21">case <expr pos:start="197:18" pos:end="197:20"><literal type="char" pos:start="197:18" pos:end="197:20">'o'</literal></expr>:</case>

                <expr_stmt pos:start="199:17" pos:end="199:65"><expr pos:start="199:17" pos:end="199:64"><call pos:start="199:17" pos:end="199:64"><name pos:start="199:17" pos:end="199:30">monitor_printf</name><argument_list pos:start="199:31" pos:end="199:64">(<argument pos:start="199:32" pos:end="199:34"><expr pos:start="199:32" pos:end="199:34"><name pos:start="199:32" pos:end="199:34">mon</name></expr></argument>, <argument pos:start="199:37" pos:end="199:48"><expr pos:start="199:37" pos:end="199:48"><literal type="string" pos:start="199:37" pos:end="199:41">"%#*"</literal> <name pos:start="199:43" pos:end="199:48">PRIo64</name></expr></argument>, <argument pos:start="199:51" pos:end="199:60"><expr pos:start="199:51" pos:end="199:60"><name pos:start="199:51" pos:end="199:60">max_digits</name></expr></argument>, <argument pos:start="199:63" pos:end="199:63"><expr pos:start="199:63" pos:end="199:63"><name pos:start="199:63" pos:end="199:63">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="201:17" pos:end="201:22">break;</break>

            <case pos:start="203:13" pos:end="203:21">case <expr pos:start="203:18" pos:end="203:20"><literal type="char" pos:start="203:18" pos:end="203:20">'x'</literal></expr>:</case>

                <expr_stmt pos:start="205:17" pos:end="205:67"><expr pos:start="205:17" pos:end="205:66"><call pos:start="205:17" pos:end="205:66"><name pos:start="205:17" pos:end="205:30">monitor_printf</name><argument_list pos:start="205:31" pos:end="205:66">(<argument pos:start="205:32" pos:end="205:34"><expr pos:start="205:32" pos:end="205:34"><name pos:start="205:32" pos:end="205:34">mon</name></expr></argument>, <argument pos:start="205:37" pos:end="205:50"><expr pos:start="205:37" pos:end="205:50"><literal type="string" pos:start="205:37" pos:end="205:43">"0x%0*"</literal> <name pos:start="205:45" pos:end="205:50">PRIx64</name></expr></argument>, <argument pos:start="205:53" pos:end="205:62"><expr pos:start="205:53" pos:end="205:62"><name pos:start="205:53" pos:end="205:62">max_digits</name></expr></argument>, <argument pos:start="205:65" pos:end="205:65"><expr pos:start="205:65" pos:end="205:65"><name pos:start="205:65" pos:end="205:65">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="207:17" pos:end="207:22">break;</break>

            <case pos:start="209:13" pos:end="209:21">case <expr pos:start="209:18" pos:end="209:20"><literal type="char" pos:start="209:18" pos:end="209:20">'u'</literal></expr>:</case>

                <expr_stmt pos:start="211:17" pos:end="211:64"><expr pos:start="211:17" pos:end="211:63"><call pos:start="211:17" pos:end="211:63"><name pos:start="211:17" pos:end="211:30">monitor_printf</name><argument_list pos:start="211:31" pos:end="211:63">(<argument pos:start="211:32" pos:end="211:34"><expr pos:start="211:32" pos:end="211:34"><name pos:start="211:32" pos:end="211:34">mon</name></expr></argument>, <argument pos:start="211:37" pos:end="211:47"><expr pos:start="211:37" pos:end="211:47"><literal type="string" pos:start="211:37" pos:end="211:40">"%*"</literal> <name pos:start="211:42" pos:end="211:47">PRIu64</name></expr></argument>, <argument pos:start="211:50" pos:end="211:59"><expr pos:start="211:50" pos:end="211:59"><name pos:start="211:50" pos:end="211:59">max_digits</name></expr></argument>, <argument pos:start="211:62" pos:end="211:62"><expr pos:start="211:62" pos:end="211:62"><name pos:start="211:62" pos:end="211:62">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="213:17" pos:end="213:22">break;</break>

            <case pos:start="215:13" pos:end="215:21">case <expr pos:start="215:18" pos:end="215:20"><literal type="char" pos:start="215:18" pos:end="215:20">'d'</literal></expr>:</case>

                <expr_stmt pos:start="217:17" pos:end="217:64"><expr pos:start="217:17" pos:end="217:63"><call pos:start="217:17" pos:end="217:63"><name pos:start="217:17" pos:end="217:30">monitor_printf</name><argument_list pos:start="217:31" pos:end="217:63">(<argument pos:start="217:32" pos:end="217:34"><expr pos:start="217:32" pos:end="217:34"><name pos:start="217:32" pos:end="217:34">mon</name></expr></argument>, <argument pos:start="217:37" pos:end="217:47"><expr pos:start="217:37" pos:end="217:47"><literal type="string" pos:start="217:37" pos:end="217:40">"%*"</literal> <name pos:start="217:42" pos:end="217:47">PRId64</name></expr></argument>, <argument pos:start="217:50" pos:end="217:59"><expr pos:start="217:50" pos:end="217:59"><name pos:start="217:50" pos:end="217:59">max_digits</name></expr></argument>, <argument pos:start="217:62" pos:end="217:62"><expr pos:start="217:62" pos:end="217:62"><name pos:start="217:62" pos:end="217:62">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="219:17" pos:end="219:22">break;</break>

            <case pos:start="221:13" pos:end="221:21">case <expr pos:start="221:18" pos:end="221:20"><literal type="char" pos:start="221:18" pos:end="221:20">'c'</literal></expr>:</case>

                <expr_stmt pos:start="223:17" pos:end="223:39"><expr pos:start="223:17" pos:end="223:38"><call pos:start="223:17" pos:end="223:38"><name pos:start="223:17" pos:end="223:30">monitor_printc</name><argument_list pos:start="223:31" pos:end="223:38">(<argument pos:start="223:32" pos:end="223:34"><expr pos:start="223:32" pos:end="223:34"><name pos:start="223:32" pos:end="223:34">mon</name></expr></argument>, <argument pos:start="223:37" pos:end="223:37"><expr pos:start="223:37" pos:end="223:37"><name pos:start="223:37" pos:end="223:37">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="225:17" pos:end="225:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="229:13" pos:end="229:23"><expr pos:start="229:13" pos:end="229:22"><name pos:start="229:13" pos:end="229:13">i</name> <operator pos:start="229:15" pos:end="229:16">+=</operator> <name pos:start="229:18" pos:end="229:22">wsize</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="233:9" pos:end="233:34"><expr pos:start="233:9" pos:end="233:33"><call pos:start="233:9" pos:end="233:33"><name pos:start="233:9" pos:end="233:22">monitor_printf</name><argument_list pos:start="233:23" pos:end="233:33">(<argument pos:start="233:24" pos:end="233:26"><expr pos:start="233:24" pos:end="233:26"><name pos:start="233:24" pos:end="233:26">mon</name></expr></argument>, <argument pos:start="233:29" pos:end="233:32"><expr pos:start="233:29" pos:end="233:32"><literal type="string" pos:start="233:29" pos:end="233:32">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:18"><expr pos:start="235:9" pos:end="235:17"><name pos:start="235:9" pos:end="235:12">addr</name> <operator pos:start="235:14" pos:end="235:15">+=</operator> <name pos:start="235:17" pos:end="235:17">l</name></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:17"><expr pos:start="237:9" pos:end="237:16"><name pos:start="237:9" pos:end="237:11">len</name> <operator pos:start="237:13" pos:end="237:14">-=</operator> <name pos:start="237:16" pos:end="237:16">l</name></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
