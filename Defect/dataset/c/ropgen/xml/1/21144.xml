<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21144.c" pos:tabs="8"><function pos:start="1:1" pos:end="66:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">gdb_accept</name><parameter_list pos:start="1:23" pos:end="1:28">(<parameter pos:start="1:24" pos:end="1:27"><decl pos:start="1:24" pos:end="1:27"><type pos:start="1:24" pos:end="1:27"><name pos:start="1:24" pos:end="1:27">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="66:1">{<block_content pos:start="5:5" pos:end="64:35">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">GDBState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:22">sockaddr_in</name></name></type> <name pos:start="7:24" pos:end="7:31">sockaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">socklen_t</name></type> <name pos:start="9:15" pos:end="9:17">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">val</name></decl>, <decl pos:start="11:14" pos:end="11:15"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:15">fd</name></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="36:5">for<control pos:start="15:8" pos:end="15:11">(<init pos:start="15:9" pos:end="15:9">;</init><condition pos:start="15:10" pos:end="15:10">;</condition><incr/>)</control> <block pos:start="15:13" pos:end="36:5">{<block_content pos:start="17:9" pos:end="34:9">

        <expr_stmt pos:start="17:9" pos:end="17:31"><expr pos:start="17:9" pos:end="17:30"><name pos:start="17:9" pos:end="17:11">len</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <sizeof pos:start="17:15" pos:end="17:30">sizeof<argument_list pos:start="17:21" pos:end="17:30">(<argument pos:start="17:22" pos:end="17:29"><expr pos:start="17:22" pos:end="17:29"><name pos:start="17:22" pos:end="17:29">sockaddr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:70"><expr pos:start="19:9" pos:end="19:69"><name pos:start="19:9" pos:end="19:10">fd</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <call pos:start="19:14" pos:end="19:69"><name pos:start="19:14" pos:end="19:19">accept</name><argument_list pos:start="19:20" pos:end="19:69">(<argument pos:start="19:21" pos:end="19:32"><expr pos:start="19:21" pos:end="19:32"><name pos:start="19:21" pos:end="19:32">gdbserver_fd</name></expr></argument>, <argument pos:start="19:35" pos:end="19:62"><expr pos:start="19:35" pos:end="19:62"><operator pos:start="19:35" pos:end="19:35">(</operator>struct <name pos:start="19:43" pos:end="19:50">sockaddr</name> <operator pos:start="19:52" pos:end="19:52">*</operator><operator pos:start="19:53" pos:end="19:53">)</operator><operator pos:start="19:54" pos:end="19:54">&amp;</operator><name pos:start="19:55" pos:end="19:62">sockaddr</name></expr></argument>, <argument pos:start="19:65" pos:end="19:68"><expr pos:start="19:65" pos:end="19:68"><operator pos:start="19:65" pos:end="19:65">&amp;</operator><name pos:start="19:66" pos:end="19:68">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="34:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:37">(<expr pos:start="21:13" pos:end="21:36"><name pos:start="21:13" pos:end="21:14">fd</name> <operator pos:start="21:16" pos:end="21:16">&lt;</operator> <literal type="number" pos:start="21:18" pos:end="21:18">0</literal> <operator pos:start="21:20" pos:end="21:21">&amp;&amp;</operator> <name pos:start="21:23" pos:end="21:27">errno</name> <operator pos:start="21:29" pos:end="21:30">!=</operator> <name pos:start="21:32" pos:end="21:36">EINTR</name></expr>)</condition> <block pos:start="21:39" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:19">

            <expr_stmt pos:start="23:13" pos:end="23:29"><expr pos:start="23:13" pos:end="23:28"><call pos:start="23:13" pos:end="23:28"><name pos:start="23:13" pos:end="23:18">perror</name><argument_list pos:start="23:19" pos:end="23:28">(<argument pos:start="23:20" pos:end="23:27"><expr pos:start="23:20" pos:end="23:27"><literal type="string" pos:start="23:20" pos:end="23:27">"accept"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="25:13" pos:end="25:19">return;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="27:11" pos:end="34:9">else if <condition pos:start="27:19" pos:end="27:27">(<expr pos:start="27:20" pos:end="27:26"><name pos:start="27:20" pos:end="27:21">fd</name> <operator pos:start="27:23" pos:end="27:24">&gt;=</operator> <literal type="number" pos:start="27:26" pos:end="27:26">0</literal></expr>)</condition> <block pos:start="27:29" pos:end="34:9">{<block_content pos:start="32:13" pos:end="32:18">




            <break pos:start="32:13" pos:end="32:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="40:5" pos:end="40:27">/* set short latency */</comment>

    <expr_stmt pos:start="42:5" pos:end="42:12"><expr pos:start="42:5" pos:end="42:11"><name pos:start="42:5" pos:end="42:7">val</name> <operator pos:start="42:9" pos:end="42:9">=</operator> <literal type="number" pos:start="42:11" pos:end="42:11">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="44:5" pos:end="44:72"><expr pos:start="44:5" pos:end="44:71"><call pos:start="44:5" pos:end="44:71"><name pos:start="44:5" pos:end="44:14">setsockopt</name><argument_list pos:start="44:15" pos:end="44:71">(<argument pos:start="44:16" pos:end="44:17"><expr pos:start="44:16" pos:end="44:17"><name pos:start="44:16" pos:end="44:17">fd</name></expr></argument>, <argument pos:start="44:20" pos:end="44:30"><expr pos:start="44:20" pos:end="44:30"><name pos:start="44:20" pos:end="44:30">IPPROTO_TCP</name></expr></argument>, <argument pos:start="44:33" pos:end="44:43"><expr pos:start="44:33" pos:end="44:43"><name pos:start="44:33" pos:end="44:43">TCP_NODELAY</name></expr></argument>, <argument pos:start="44:46" pos:end="44:57"><expr pos:start="44:46" pos:end="44:57"><operator pos:start="44:46" pos:end="44:46">(</operator><name pos:start="44:47" pos:end="44:50">char</name> <operator pos:start="44:52" pos:end="44:52">*</operator><operator pos:start="44:53" pos:end="44:53">)</operator><operator pos:start="44:54" pos:end="44:54">&amp;</operator><name pos:start="44:55" pos:end="44:57">val</name></expr></argument>, <argument pos:start="44:60" pos:end="44:70"><expr pos:start="44:60" pos:end="44:70"><sizeof pos:start="44:60" pos:end="44:70">sizeof<argument_list pos:start="44:66" pos:end="44:70">(<argument pos:start="44:67" pos:end="44:69"><expr pos:start="44:67" pos:end="44:69"><name pos:start="44:67" pos:end="44:69">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="48:5" pos:end="48:39"><expr pos:start="48:5" pos:end="48:38"><name pos:start="48:5" pos:end="48:5">s</name> <operator pos:start="48:7" pos:end="48:7">=</operator> <call pos:start="48:9" pos:end="48:38"><name pos:start="48:9" pos:end="48:20">qemu_mallocz</name><argument_list pos:start="48:21" pos:end="48:38">(<argument pos:start="48:22" pos:end="48:37"><expr pos:start="48:22" pos:end="48:37"><sizeof pos:start="48:22" pos:end="48:37">sizeof<argument_list pos:start="48:28" pos:end="48:37">(<argument pos:start="48:29" pos:end="48:36"><expr pos:start="48:29" pos:end="48:36"><name pos:start="48:29" pos:end="48:36">GDBState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="50:5" pos:end="50:25"><expr pos:start="50:5" pos:end="50:24"><name pos:start="50:5" pos:end="50:12"><name pos:start="50:5" pos:end="50:5">s</name><operator pos:start="50:6" pos:end="50:7">-&gt;</operator><name pos:start="50:8" pos:end="50:12">c_cpu</name></name> <operator pos:start="50:14" pos:end="50:14">=</operator> <name pos:start="50:16" pos:end="50:24">first_cpu</name></expr>;</expr_stmt>

    <expr_stmt pos:start="52:5" pos:end="52:25"><expr pos:start="52:5" pos:end="52:24"><name pos:start="52:5" pos:end="52:12"><name pos:start="52:5" pos:end="52:5">s</name><operator pos:start="52:6" pos:end="52:7">-&gt;</operator><name pos:start="52:8" pos:end="52:12">g_cpu</name></name> <operator pos:start="52:14" pos:end="52:14">=</operator> <name pos:start="52:16" pos:end="52:24">first_cpu</name></expr>;</expr_stmt>

    <expr_stmt pos:start="54:5" pos:end="54:15"><expr pos:start="54:5" pos:end="54:14"><name pos:start="54:5" pos:end="54:9"><name pos:start="54:5" pos:end="54:5">s</name><operator pos:start="54:6" pos:end="54:7">-&gt;</operator><name pos:start="54:8" pos:end="54:9">fd</name></name> <operator pos:start="54:11" pos:end="54:11">=</operator> <name pos:start="54:13" pos:end="54:14">fd</name></expr>;</expr_stmt>

    <expr_stmt pos:start="56:5" pos:end="56:20"><expr pos:start="56:5" pos:end="56:19"><name pos:start="56:5" pos:end="56:15">gdb_has_xml</name> <operator pos:start="56:17" pos:end="56:17">=</operator> <literal type="number" pos:start="56:19" pos:end="56:19">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="60:5" pos:end="60:24"><expr pos:start="60:5" pos:end="60:23"><name pos:start="60:5" pos:end="60:19">gdbserver_state</name> <operator pos:start="60:21" pos:end="60:21">=</operator> <name pos:start="60:23" pos:end="60:23">s</name></expr>;</expr_stmt>



    <expr_stmt pos:start="64:5" pos:end="64:35"><expr pos:start="64:5" pos:end="64:34"><call pos:start="64:5" pos:end="64:34"><name pos:start="64:5" pos:end="64:9">fcntl</name><argument_list pos:start="64:10" pos:end="64:34">(<argument pos:start="64:11" pos:end="64:12"><expr pos:start="64:11" pos:end="64:12"><name pos:start="64:11" pos:end="64:12">fd</name></expr></argument>, <argument pos:start="64:15" pos:end="64:21"><expr pos:start="64:15" pos:end="64:21"><name pos:start="64:15" pos:end="64:21">F_SETFL</name></expr></argument>, <argument pos:start="64:24" pos:end="64:33"><expr pos:start="64:24" pos:end="64:33"><name pos:start="64:24" pos:end="64:33">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
