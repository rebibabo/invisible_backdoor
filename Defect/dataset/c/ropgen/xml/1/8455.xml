<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8455.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:43">mjpeg_decode_scan_progressive_ac</name><parameter_list pos:start="1:44" pos:end="3:67">(<parameter pos:start="1:45" pos:end="1:65"><decl pos:start="1:45" pos:end="1:65"><type pos:start="1:45" pos:end="1:65"><name pos:start="1:45" pos:end="1:62">MJpegDecodeContext</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:65">s</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:73"><decl pos:start="1:68" pos:end="1:73"><type pos:start="1:68" pos:end="1:73"><name pos:start="1:68" pos:end="1:70">int</name></type> <name pos:start="1:72" pos:end="1:73">ss</name></decl></parameter>,

                                            <parameter pos:start="3:45" pos:end="3:50"><decl pos:start="3:45" pos:end="3:50"><type pos:start="3:45" pos:end="3:50"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:50">se</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:58"><decl pos:start="3:53" pos:end="3:58"><type pos:start="3:53" pos:end="3:58"><name pos:start="3:53" pos:end="3:55">int</name></type> <name pos:start="3:57" pos:end="3:58">Ah</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:66"><decl pos:start="3:61" pos:end="3:66"><type pos:start="3:61" pos:end="3:66"><name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:66">Al</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="123:1">{<block_content pos:start="7:5" pos:end="121:13">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">mb_x</name></decl>, <decl pos:start="7:15" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:18">mb_y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">EOBRUN</name> <init pos:start="9:16" pos:end="9:18">= <expr pos:start="9:18" pos:end="9:18"><literal type="number" pos:start="9:18" pos:end="9:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">c</name> <init pos:start="11:11" pos:end="11:28">= <expr pos:start="11:13" pos:end="11:28"><name pos:start="11:13" pos:end="11:28"><name pos:start="11:13" pos:end="11:13">s</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:25">comp_index</name><index pos:start="11:26" pos:end="11:28">[<expr pos:start="11:27" pos:end="11:27"><literal type="number" pos:start="11:27" pos:end="11:27">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:43"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:17">data</name> <init pos:start="13:19" pos:end="13:43">= <expr pos:start="13:21" pos:end="13:43"><name pos:start="13:21" pos:end="13:43"><name pos:start="13:21" pos:end="13:21">s</name><operator pos:start="13:22" pos:end="13:23">-&gt;</operator><name pos:start="13:24" pos:end="13:34">picture_ptr</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:40">data</name><index pos:start="13:41" pos:end="13:43">[<expr pos:start="13:42" pos:end="13:42"><name pos:start="13:42" pos:end="13:42">c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:35"><decl pos:start="15:5" pos:end="15:34"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:16">linesize</name>  <init pos:start="15:19" pos:end="15:34">= <expr pos:start="15:21" pos:end="15:34"><name pos:start="15:21" pos:end="15:34"><name pos:start="15:21" pos:end="15:21">s</name><operator pos:start="15:22" pos:end="15:23">-&gt;</operator><name pos:start="15:24" pos:end="15:31">linesize</name><index pos:start="15:32" pos:end="15:34">[<expr pos:start="15:33" pos:end="15:33"><name pos:start="15:33" pos:end="15:33">c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">last_scan</name> <init pos:start="17:19" pos:end="17:21">= <expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:66"><decl pos:start="19:5" pos:end="19:65"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">int16_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:25">quant_matrix</name> <init pos:start="19:27" pos:end="19:65">= <expr pos:start="19:29" pos:end="19:65"><name pos:start="19:29" pos:end="19:65"><name pos:start="19:29" pos:end="19:29">s</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:45">quant_matrixes</name><index pos:start="19:46" pos:end="19:65">[<expr pos:start="19:47" pos:end="19:64"><name pos:start="19:47" pos:end="19:64"><name pos:start="19:47" pos:end="19:47">s</name><operator pos:start="19:48" pos:end="19:49">-&gt;</operator><name pos:start="19:50" pos:end="19:61">quant_sindex</name><index pos:start="19:62" pos:end="19:64">[<expr pos:start="19:63" pos:end="19:63"><literal type="number" pos:start="19:63" pos:end="19:63">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:44"><decl pos:start="21:5" pos:end="21:43"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:23">bytes_per_pixel</name> <init pos:start="21:25" pos:end="21:43">= <expr pos:start="21:27" pos:end="21:43"><literal type="number" pos:start="21:27" pos:end="21:29">1</literal> <operator pos:start="21:29" pos:end="21:29">+</operator> <operator pos:start="21:31" pos:end="21:31">(</operator><name pos:start="21:32" pos:end="21:38"><name pos:start="21:32" pos:end="21:32">s</name><operator pos:start="21:33" pos:end="21:34">-&gt;</operator><name pos:start="21:35" pos:end="21:38">bits</name></name> <operator pos:start="21:40" pos:end="21:40">&gt;</operator> <literal type="number" pos:start="21:42" pos:end="21:42">8</literal><operator pos:start="21:43" pos:end="21:43">)</operator></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:40"><expr pos:start="25:5" pos:end="25:39"><call pos:start="25:5" pos:end="25:39"><name pos:start="25:5" pos:end="25:14">av_assert0</name><argument_list pos:start="25:15" pos:end="25:39">(<argument pos:start="25:16" pos:end="25:38"><expr pos:start="25:16" pos:end="25:38"><name pos:start="25:16" pos:end="25:17">ss</name><operator pos:start="25:18" pos:end="25:19">&gt;=</operator><literal type="number" pos:start="25:20" pos:end="25:20">0</literal> <operator pos:start="25:22" pos:end="25:23">&amp;&amp;</operator> <name pos:start="25:25" pos:end="25:26">Ah</name><operator pos:start="25:27" pos:end="25:28">&gt;=</operator><literal type="number" pos:start="25:29" pos:end="25:29">0</literal> <operator pos:start="25:31" pos:end="25:32">&amp;&amp;</operator> <name pos:start="25:34" pos:end="25:35">Al</name><operator pos:start="25:36" pos:end="25:37">&gt;=</operator><literal type="number" pos:start="25:38" pos:end="25:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:27">(<expr pos:start="27:9" pos:end="27:26"><name pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:10">se</name> <argument_list type="generic" pos:start="27:12" pos:end="27:23">&lt; <argument pos:start="27:14" pos:end="27:21"><expr pos:start="27:14" pos:end="27:21"><name pos:start="27:14" pos:end="27:15">ss</name> <operator pos:start="27:17" pos:end="27:18">||</operator> <name pos:start="27:20" pos:end="27:21">se</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="27:25" pos:end="27:26">63</literal></expr>)</condition> <block pos:start="27:29" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:35">

        <expr_stmt pos:start="29:9" pos:end="29:75"><expr pos:start="29:9" pos:end="29:74"><call pos:start="29:9" pos:end="29:74"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:74">(<argument pos:start="29:16" pos:end="29:23"><expr pos:start="29:16" pos:end="29:23"><name pos:start="29:16" pos:end="29:23"><name pos:start="29:16" pos:end="29:16">s</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:23">avctx</name></name></expr></argument>, <argument pos:start="29:26" pos:end="29:37"><expr pos:start="29:26" pos:end="29:37"><name pos:start="29:26" pos:end="29:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:40" pos:end="29:65"><expr pos:start="29:40" pos:end="29:65"><literal type="string" pos:start="29:40" pos:end="29:65">"SS/SE %d/%d is invalid\n"</literal></expr></argument>, <argument pos:start="29:68" pos:end="29:69"><expr pos:start="29:68" pos:end="29:69"><name pos:start="29:68" pos:end="29:69">ss</name></expr></argument>, <argument pos:start="29:72" pos:end="29:73"><expr pos:start="29:72" pos:end="29:73"><name pos:start="29:72" pos:end="29:73">se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:35">return <expr pos:start="31:16" pos:end="31:34"><name pos:start="31:16" pos:end="31:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:12">(<expr pos:start="37:9" pos:end="37:11"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:11">Al</name></expr>)</condition> <block pos:start="37:14" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:43">

        <expr_stmt pos:start="39:9" pos:end="39:58"><expr pos:start="39:9" pos:end="39:57"><name pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:25">coefs_finished</name><index pos:start="39:26" pos:end="39:28">[<expr pos:start="39:27" pos:end="39:27"><name pos:start="39:27" pos:end="39:27">c</name></expr>]</index></name> <operator pos:start="39:30" pos:end="39:31">|=</operator> <operator pos:start="39:33" pos:end="39:33">(</operator><literal type="number" pos:start="39:34" pos:end="39:36">2LL</literal> <operator pos:start="39:38" pos:end="39:39">&lt;&lt;</operator> <name pos:start="39:41" pos:end="39:42">se</name><operator pos:start="39:43" pos:end="39:43">)</operator> <operator pos:start="39:45" pos:end="39:45">-</operator> <operator pos:start="39:47" pos:end="39:47">(</operator><literal type="number" pos:start="39:48" pos:end="39:50">1LL</literal> <operator pos:start="39:52" pos:end="39:53">&lt;&lt;</operator> <name pos:start="39:55" pos:end="39:56">ss</name><operator pos:start="39:57" pos:end="39:57">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:43"><expr pos:start="41:9" pos:end="41:42"><name pos:start="41:9" pos:end="41:17">last_scan</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <operator pos:start="41:21" pos:end="41:21">!</operator><operator pos:start="41:22" pos:end="41:22">~</operator><name pos:start="41:23" pos:end="41:42"><name pos:start="41:23" pos:end="41:23">s</name><operator pos:start="41:24" pos:end="41:25">-&gt;</operator><name pos:start="41:26" pos:end="41:39">coefs_finished</name><index pos:start="41:40" pos:end="41:42">[<expr pos:start="41:41" pos:end="41:41"><name pos:start="41:41" pos:end="41:41">c</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="49:30"><if pos:start="47:5" pos:end="49:30">if <condition pos:start="47:8" pos:end="47:41">(<expr pos:start="47:9" pos:end="47:40"><name pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:21">interlaced</name></name> <operator pos:start="47:23" pos:end="47:24">&amp;&amp;</operator> <name pos:start="47:26" pos:end="47:40"><name pos:start="47:26" pos:end="47:26">s</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:40">bottom_field</name></name></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:30"><block_content pos:start="49:9" pos:end="49:30">

        <expr_stmt pos:start="49:9" pos:end="49:30"><expr pos:start="49:9" pos:end="49:29"><name pos:start="49:9" pos:end="49:12">data</name> <operator pos:start="49:14" pos:end="49:15">+=</operator> <name pos:start="49:17" pos:end="49:24">linesize</name> <operator pos:start="49:26" pos:end="49:27">&gt;&gt;</operator> <literal type="number" pos:start="49:29" pos:end="49:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:25"><expr pos:start="53:5" pos:end="53:24"><name pos:start="53:5" pos:end="53:20"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:20">restart_count</name></name> <operator pos:start="53:22" pos:end="53:22">=</operator> <literal type="number" pos:start="53:24" pos:end="53:24">0</literal></expr>;</expr_stmt>



    <for pos:start="57:5" pos:end="119:5">for <control pos:start="57:9" pos:end="57:47">(<init pos:start="57:10" pos:end="57:18"><expr pos:start="57:10" pos:end="57:17"><name pos:start="57:10" pos:end="57:13">mb_y</name> <operator pos:start="57:15" pos:end="57:15">=</operator> <literal type="number" pos:start="57:17" pos:end="57:17">0</literal></expr>;</init> <condition pos:start="57:20" pos:end="57:39"><expr pos:start="57:20" pos:end="57:38"><name pos:start="57:20" pos:end="57:23">mb_y</name> <operator pos:start="57:25" pos:end="57:25">&lt;</operator> <name pos:start="57:27" pos:end="57:38"><name pos:start="57:27" pos:end="57:27">s</name><operator pos:start="57:28" pos:end="57:29">-&gt;</operator><name pos:start="57:30" pos:end="57:38">mb_height</name></name></expr>;</condition> <incr pos:start="57:41" pos:end="57:46"><expr pos:start="57:41" pos:end="57:46"><name pos:start="57:41" pos:end="57:44">mb_y</name><operator pos:start="57:45" pos:end="57:46">++</operator></expr></incr>)</control> <block pos:start="57:49" pos:end="119:5">{<block_content pos:start="59:9" pos:end="117:9">

        <decl_stmt pos:start="59:9" pos:end="59:76"><decl pos:start="59:9" pos:end="59:75"><type pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:15">uint8_t</name> <modifier pos:start="59:17" pos:end="59:17">*</modifier></type><name pos:start="59:18" pos:end="59:20">ptr</name>     <init pos:start="59:26" pos:end="59:75">= <expr pos:start="59:28" pos:end="59:75"><name pos:start="59:28" pos:end="59:31">data</name> <operator pos:start="59:33" pos:end="59:33">+</operator> <operator pos:start="59:35" pos:end="59:35">(</operator><name pos:start="59:36" pos:end="59:39">mb_y</name> <operator pos:start="59:41" pos:end="59:41">*</operator> <name pos:start="59:43" pos:end="59:50">linesize</name> <operator pos:start="59:52" pos:end="59:52">*</operator> <literal type="number" pos:start="59:54" pos:end="59:54">8</literal> <operator pos:start="59:56" pos:end="59:57">&gt;&gt;</operator> <name pos:start="59:59" pos:end="59:74"><name pos:start="59:59" pos:end="59:59">s</name><operator pos:start="59:60" pos:end="59:61">-&gt;</operator><name pos:start="59:62" pos:end="59:66">avctx</name><operator pos:start="59:67" pos:end="59:68">-&gt;</operator><name pos:start="59:69" pos:end="59:74">lowres</name></name><operator pos:start="59:75" pos:end="59:75">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="61:9" pos:end="61:53"><decl pos:start="61:9" pos:end="61:52"><type pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">int</name></type> <name pos:start="61:13" pos:end="61:21">block_idx</name>    <init pos:start="61:26" pos:end="61:52">= <expr pos:start="61:28" pos:end="61:52"><name pos:start="61:28" pos:end="61:31">mb_y</name> <operator pos:start="61:33" pos:end="61:33">*</operator> <name pos:start="61:35" pos:end="61:52"><name pos:start="61:35" pos:end="61:35">s</name><operator pos:start="61:36" pos:end="61:37">-&gt;</operator><name pos:start="61:38" pos:end="61:49">block_stride</name><index pos:start="61:50" pos:end="61:52">[<expr pos:start="61:51" pos:end="61:51"><name pos:start="61:51" pos:end="61:51">c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:56"><expr pos:start="63:9" pos:end="63:55"><call pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:15">int16_t</name> <argument_list pos:start="63:17" pos:end="63:24">(<argument pos:start="63:18" pos:end="63:23"><expr pos:start="63:18" pos:end="63:23"><operator pos:start="63:18" pos:end="63:18">*</operator><name pos:start="63:19" pos:end="63:23">block</name></expr></argument>)</argument_list></call><index pos:start="63:25" pos:end="63:28">[<expr pos:start="63:26" pos:end="63:27"><literal type="number" pos:start="63:26" pos:end="63:27">64</literal></expr>]</index> <operator pos:start="63:30" pos:end="63:30">=</operator> <operator pos:start="63:32" pos:end="63:32">&amp;</operator><name pos:start="63:33" pos:end="63:55"><name pos:start="63:33" pos:end="63:33">s</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:41">blocks</name><index pos:start="63:42" pos:end="63:44">[<expr pos:start="63:43" pos:end="63:43"><name pos:start="63:43" pos:end="63:43">c</name></expr>]</index><index pos:start="63:45" pos:end="63:55">[<expr pos:start="63:46" pos:end="63:54"><name pos:start="63:46" pos:end="63:54">block_idx</name></expr>]</index></name></expr>;</expr_stmt>

        <decl_stmt pos:start="65:9" pos:end="65:58"><decl pos:start="65:9" pos:end="65:57"><type pos:start="65:9" pos:end="65:17"><name pos:start="65:9" pos:end="65:15">uint8_t</name> <modifier pos:start="65:17" pos:end="65:17">*</modifier></type><name pos:start="65:18" pos:end="65:25">last_nnz</name>    <init pos:start="65:30" pos:end="65:57">= <expr pos:start="65:32" pos:end="65:57"><operator pos:start="65:32" pos:end="65:32">&amp;</operator><name pos:start="65:33" pos:end="65:57"><name pos:start="65:33" pos:end="65:33">s</name><operator pos:start="65:34" pos:end="65:35">-&gt;</operator><name pos:start="65:36" pos:end="65:43">last_nnz</name><index pos:start="65:44" pos:end="65:46">[<expr pos:start="65:45" pos:end="65:45"><name pos:start="65:45" pos:end="65:45">c</name></expr>]</index><index pos:start="65:47" pos:end="65:57">[<expr pos:start="65:48" pos:end="65:56"><name pos:start="65:48" pos:end="65:56">block_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <for pos:start="67:9" pos:end="117:9">for <control pos:start="67:13" pos:end="67:71">(<init pos:start="67:14" pos:end="67:22"><expr pos:start="67:14" pos:end="67:21"><name pos:start="67:14" pos:end="67:17">mb_x</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <literal type="number" pos:start="67:21" pos:end="67:21">0</literal></expr>;</init> <condition pos:start="67:24" pos:end="67:42"><expr pos:start="67:24" pos:end="67:41"><name pos:start="67:24" pos:end="67:27">mb_x</name> <operator pos:start="67:29" pos:end="67:29">&lt;</operator> <name pos:start="67:31" pos:end="67:41"><name pos:start="67:31" pos:end="67:31">s</name><operator pos:start="67:32" pos:end="67:33">-&gt;</operator><name pos:start="67:34" pos:end="67:41">mb_width</name></name></expr>;</condition> <incr pos:start="67:44" pos:end="67:70"><expr pos:start="67:44" pos:end="67:49"><name pos:start="67:44" pos:end="67:47">mb_x</name><operator pos:start="67:48" pos:end="67:49">++</operator></expr><operator pos:start="67:50" pos:end="67:50">,</operator> <expr pos:start="67:52" pos:end="67:58"><name pos:start="67:52" pos:end="67:56">block</name><operator pos:start="67:57" pos:end="67:58">++</operator></expr><operator pos:start="67:59" pos:end="67:59">,</operator> <expr pos:start="67:61" pos:end="67:70"><name pos:start="67:61" pos:end="67:68">last_nnz</name><operator pos:start="67:69" pos:end="67:70">++</operator></expr></incr>)</control> <block pos:start="67:73" pos:end="117:9">{<block_content pos:start="69:17" pos:end="115:27">

                <decl_stmt pos:start="69:17" pos:end="69:24"><decl pos:start="69:17" pos:end="69:23"><type pos:start="69:17" pos:end="69:19"><name pos:start="69:17" pos:end="69:19">int</name></type> <name pos:start="69:21" pos:end="69:23">ret</name></decl>;</decl_stmt>

                <if_stmt pos:start="71:17" pos:end="73:59"><if pos:start="71:17" pos:end="73:59">if <condition pos:start="71:20" pos:end="71:61">(<expr pos:start="71:21" pos:end="71:60"><name pos:start="71:21" pos:end="71:39"><name pos:start="71:21" pos:end="71:21">s</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:39">restart_interval</name></name> <operator pos:start="71:41" pos:end="71:42">&amp;&amp;</operator> <operator pos:start="71:44" pos:end="71:44">!</operator><name pos:start="71:45" pos:end="71:60"><name pos:start="71:45" pos:end="71:45">s</name><operator pos:start="71:46" pos:end="71:47">-&gt;</operator><name pos:start="71:48" pos:end="71:60">restart_count</name></name></expr>)</condition><block type="pseudo" pos:start="73:21" pos:end="73:59"><block_content pos:start="73:21" pos:end="73:59">

                    <expr_stmt pos:start="73:21" pos:end="73:59"><expr pos:start="73:21" pos:end="73:58"><name pos:start="73:21" pos:end="73:36"><name pos:start="73:21" pos:end="73:21">s</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:36">restart_count</name></name> <operator pos:start="73:38" pos:end="73:38">=</operator> <name pos:start="73:40" pos:end="73:58"><name pos:start="73:40" pos:end="73:40">s</name><operator pos:start="73:41" pos:end="73:42">-&gt;</operator><name pos:start="73:43" pos:end="73:58">restart_interval</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="77:17" pos:end="87:86"><if pos:start="77:17" pos:end="81:85">if <condition pos:start="77:20" pos:end="77:23">(<expr pos:start="77:21" pos:end="77:22"><name pos:start="77:21" pos:end="77:22">Ah</name></expr>)</condition><block type="pseudo" pos:start="79:21" pos:end="81:85"><block_content pos:start="79:21" pos:end="81:85">

                    <expr_stmt pos:start="79:21" pos:end="81:85"><expr pos:start="79:21" pos:end="81:84"><name pos:start="79:21" pos:end="79:23">ret</name> <operator pos:start="79:25" pos:end="79:25">=</operator> <call pos:start="79:27" pos:end="81:84"><name pos:start="79:27" pos:end="79:49">decode_block_refinement</name><argument_list pos:start="79:50" pos:end="81:84">(<argument pos:start="79:51" pos:end="79:51"><expr pos:start="79:51" pos:end="79:51"><name pos:start="79:51" pos:end="79:51">s</name></expr></argument>, <argument pos:start="79:54" pos:end="79:59"><expr pos:start="79:54" pos:end="79:59"><operator pos:start="79:54" pos:end="79:54">*</operator><name pos:start="79:55" pos:end="79:59">block</name></expr></argument>, <argument pos:start="79:62" pos:end="79:69"><expr pos:start="79:62" pos:end="79:69"><name pos:start="79:62" pos:end="79:69">last_nnz</name></expr></argument>, <argument pos:start="79:72" pos:end="79:85"><expr pos:start="79:72" pos:end="79:85"><name pos:start="79:72" pos:end="79:85"><name pos:start="79:72" pos:end="79:72">s</name><operator pos:start="79:73" pos:end="79:74">-&gt;</operator><name pos:start="79:75" pos:end="79:82">ac_index</name><index pos:start="79:83" pos:end="79:85">[<expr pos:start="79:84" pos:end="79:84"><literal type="number" pos:start="79:84" pos:end="79:84">0</literal></expr>]</index></name></expr></argument>,

                                                  <argument pos:start="81:51" pos:end="81:62"><expr pos:start="81:51" pos:end="81:62"><name pos:start="81:51" pos:end="81:62">quant_matrix</name></expr></argument>, <argument pos:start="81:65" pos:end="81:66"><expr pos:start="81:65" pos:end="81:66"><name pos:start="81:65" pos:end="81:66">ss</name></expr></argument>, <argument pos:start="81:69" pos:end="81:70"><expr pos:start="81:69" pos:end="81:70"><name pos:start="81:69" pos:end="81:70">se</name></expr></argument>, <argument pos:start="81:73" pos:end="81:74"><expr pos:start="81:73" pos:end="81:74"><name pos:start="81:73" pos:end="81:74">Al</name></expr></argument>, <argument pos:start="81:77" pos:end="81:83"><expr pos:start="81:77" pos:end="81:83"><operator pos:start="81:77" pos:end="81:77">&amp;</operator><name pos:start="81:78" pos:end="81:83">EOBRUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="83:17" pos:end="87:86">else<block type="pseudo" pos:start="85:21" pos:end="87:86"><block_content pos:start="85:21" pos:end="87:86">

                    <expr_stmt pos:start="85:21" pos:end="87:86"><expr pos:start="85:21" pos:end="87:85"><name pos:start="85:21" pos:end="85:23">ret</name> <operator pos:start="85:25" pos:end="85:25">=</operator> <call pos:start="85:27" pos:end="87:85"><name pos:start="85:27" pos:end="85:50">decode_block_progressive</name><argument_list pos:start="85:51" pos:end="87:85">(<argument pos:start="85:52" pos:end="85:52"><expr pos:start="85:52" pos:end="85:52"><name pos:start="85:52" pos:end="85:52">s</name></expr></argument>, <argument pos:start="85:55" pos:end="85:60"><expr pos:start="85:55" pos:end="85:60"><operator pos:start="85:55" pos:end="85:55">*</operator><name pos:start="85:56" pos:end="85:60">block</name></expr></argument>, <argument pos:start="85:63" pos:end="85:70"><expr pos:start="85:63" pos:end="85:70"><name pos:start="85:63" pos:end="85:70">last_nnz</name></expr></argument>, <argument pos:start="85:73" pos:end="85:86"><expr pos:start="85:73" pos:end="85:86"><name pos:start="85:73" pos:end="85:86"><name pos:start="85:73" pos:end="85:73">s</name><operator pos:start="85:74" pos:end="85:75">-&gt;</operator><name pos:start="85:76" pos:end="85:83">ac_index</name><index pos:start="85:84" pos:end="85:86">[<expr pos:start="85:85" pos:end="85:85"><literal type="number" pos:start="85:85" pos:end="85:85">0</literal></expr>]</index></name></expr></argument>,

                                                   <argument pos:start="87:52" pos:end="87:63"><expr pos:start="87:52" pos:end="87:63"><name pos:start="87:52" pos:end="87:63">quant_matrix</name></expr></argument>, <argument pos:start="87:66" pos:end="87:67"><expr pos:start="87:66" pos:end="87:67"><name pos:start="87:66" pos:end="87:67">ss</name></expr></argument>, <argument pos:start="87:70" pos:end="87:71"><expr pos:start="87:70" pos:end="87:71"><name pos:start="87:70" pos:end="87:71">se</name></expr></argument>, <argument pos:start="87:74" pos:end="87:75"><expr pos:start="87:74" pos:end="87:75"><name pos:start="87:74" pos:end="87:75">Al</name></expr></argument>, <argument pos:start="87:78" pos:end="87:84"><expr pos:start="87:78" pos:end="87:84"><operator pos:start="87:78" pos:end="87:78">&amp;</operator><name pos:start="87:79" pos:end="87:84">EOBRUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <if_stmt pos:start="89:17" pos:end="97:17"><if pos:start="89:17" pos:end="97:17">if <condition pos:start="89:20" pos:end="89:28">(<expr pos:start="89:21" pos:end="89:27"><name pos:start="89:21" pos:end="89:23">ret</name> <operator pos:start="89:25" pos:end="89:25">&lt;</operator> <literal type="number" pos:start="89:27" pos:end="89:27">0</literal></expr>)</condition> <block pos:start="89:30" pos:end="97:17">{<block_content pos:start="91:21" pos:end="95:47">

                    <expr_stmt pos:start="91:21" pos:end="93:60"><expr pos:start="91:21" pos:end="93:59"><call pos:start="91:21" pos:end="93:59"><name pos:start="91:21" pos:end="91:26">av_log</name><argument_list pos:start="91:27" pos:end="93:59">(<argument pos:start="91:28" pos:end="91:35"><expr pos:start="91:28" pos:end="91:35"><name pos:start="91:28" pos:end="91:35"><name pos:start="91:28" pos:end="91:28">s</name><operator pos:start="91:29" pos:end="91:30">-&gt;</operator><name pos:start="91:31" pos:end="91:35">avctx</name></name></expr></argument>, <argument pos:start="91:38" pos:end="91:49"><expr pos:start="91:38" pos:end="91:49"><name pos:start="91:38" pos:end="91:49">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="93:28" pos:end="93:46"><expr pos:start="93:28" pos:end="93:46"><literal type="string" pos:start="93:28" pos:end="93:46">"error y=%d x=%d\n"</literal></expr></argument>, <argument pos:start="93:49" pos:end="93:52"><expr pos:start="93:49" pos:end="93:52"><name pos:start="93:49" pos:end="93:52">mb_y</name></expr></argument>, <argument pos:start="93:55" pos:end="93:58"><expr pos:start="93:55" pos:end="93:58"><name pos:start="93:55" pos:end="93:58">mb_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="95:21" pos:end="95:47">return <expr pos:start="95:28" pos:end="95:46"><name pos:start="95:28" pos:end="95:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="101:13" pos:end="111:13"><if pos:start="101:13" pos:end="111:13">if <condition pos:start="101:16" pos:end="101:26">(<expr pos:start="101:17" pos:end="101:25"><name pos:start="101:17" pos:end="101:25">last_scan</name></expr>)</condition> <block pos:start="101:28" pos:end="111:13">{<block_content pos:start="103:21" pos:end="109:65">

                    <expr_stmt pos:start="103:21" pos:end="103:59"><expr pos:start="103:21" pos:end="103:58"><call pos:start="103:21" pos:end="103:58"><name pos:start="103:21" pos:end="103:35"><name pos:start="103:21" pos:end="103:21">s</name><operator pos:start="103:22" pos:end="103:23">-&gt;</operator><name pos:start="103:24" pos:end="103:26">dsp</name><operator pos:start="103:27" pos:end="103:27">.</operator><name pos:start="103:28" pos:end="103:35">idct_put</name></name><argument_list pos:start="103:36" pos:end="103:58">(<argument pos:start="103:37" pos:end="103:39"><expr pos:start="103:37" pos:end="103:39"><name pos:start="103:37" pos:end="103:39">ptr</name></expr></argument>, <argument pos:start="103:42" pos:end="103:49"><expr pos:start="103:42" pos:end="103:49"><name pos:start="103:42" pos:end="103:49">linesize</name></expr></argument>, <argument pos:start="103:52" pos:end="103:57"><expr pos:start="103:52" pos:end="103:57"><operator pos:start="103:52" pos:end="103:52">*</operator><name pos:start="103:53" pos:end="103:57">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="105:21" pos:end="107:55"><if pos:start="105:21" pos:end="107:55">if <condition pos:start="105:24" pos:end="105:36">(<expr pos:start="105:25" pos:end="105:35"><name pos:start="105:25" pos:end="105:31"><name pos:start="105:25" pos:end="105:25">s</name><operator pos:start="105:26" pos:end="105:27">-&gt;</operator><name pos:start="105:28" pos:end="105:31">bits</name></name> <operator pos:start="105:33" pos:end="105:33">&amp;</operator> <literal type="number" pos:start="105:35" pos:end="105:35">7</literal></expr>)</condition><block type="pseudo" pos:start="107:25" pos:end="107:55"><block_content pos:start="107:25" pos:end="107:55">

                        <expr_stmt pos:start="107:25" pos:end="107:55"><expr pos:start="107:25" pos:end="107:54"><call pos:start="107:25" pos:end="107:54"><name pos:start="107:25" pos:end="107:36">shift_output</name><argument_list pos:start="107:37" pos:end="107:54">(<argument pos:start="107:38" pos:end="107:38"><expr pos:start="107:38" pos:end="107:38"><name pos:start="107:38" pos:end="107:38">s</name></expr></argument>, <argument pos:start="107:41" pos:end="107:43"><expr pos:start="107:41" pos:end="107:43"><name pos:start="107:41" pos:end="107:43">ptr</name></expr></argument>, <argument pos:start="107:46" pos:end="107:53"><expr pos:start="107:46" pos:end="107:53"><name pos:start="107:46" pos:end="107:53">linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="109:21" pos:end="109:65"><expr pos:start="109:21" pos:end="109:64"><name pos:start="109:21" pos:end="109:23">ptr</name> <operator pos:start="109:25" pos:end="109:26">+=</operator> <name pos:start="109:28" pos:end="109:42">bytes_per_pixel</name><operator pos:start="109:43" pos:end="109:43">*</operator><literal type="number" pos:start="109:44" pos:end="109:44">8</literal> <operator pos:start="109:46" pos:end="109:47">&gt;&gt;</operator> <name pos:start="109:49" pos:end="109:64"><name pos:start="109:49" pos:end="109:49">s</name><operator pos:start="109:50" pos:end="109:51">-&gt;</operator><name pos:start="109:52" pos:end="109:56">avctx</name><operator pos:start="109:57" pos:end="109:58">-&gt;</operator><name pos:start="109:59" pos:end="109:64">lowres</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="113:13" pos:end="115:27"><if pos:start="113:13" pos:end="115:27">if <condition pos:start="113:16" pos:end="113:34">(<expr pos:start="113:17" pos:end="113:33"><call pos:start="113:17" pos:end="113:33"><name pos:start="113:17" pos:end="113:27">handle_rstn</name><argument_list pos:start="113:28" pos:end="113:33">(<argument pos:start="113:29" pos:end="113:29"><expr pos:start="113:29" pos:end="113:29"><name pos:start="113:29" pos:end="113:29">s</name></expr></argument>, <argument pos:start="113:32" pos:end="113:32"><expr pos:start="113:32" pos:end="113:32"><literal type="number" pos:start="113:32" pos:end="113:32">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="115:17" pos:end="115:27"><block_content pos:start="115:17" pos:end="115:27">

                <expr_stmt pos:start="115:17" pos:end="115:27"><expr pos:start="115:17" pos:end="115:26"><name pos:start="115:17" pos:end="115:22">EOBRUN</name> <operator pos:start="115:24" pos:end="115:24">=</operator> <literal type="number" pos:start="115:26" pos:end="115:26">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <return pos:start="121:5" pos:end="121:13">return <expr pos:start="121:12" pos:end="121:12"><literal type="number" pos:start="121:12" pos:end="121:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
