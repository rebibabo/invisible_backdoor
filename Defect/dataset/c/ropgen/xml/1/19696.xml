<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19696.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:40">loadvm_postcopy_handle_advise</name><parameter_list pos:start="1:41" pos:end="1:69">(<parameter pos:start="1:42" pos:end="1:68"><decl pos:start="1:42" pos:end="1:68"><type pos:start="1:42" pos:end="1:65"><name pos:start="1:42" pos:end="1:63">MigrationIncomingState</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">mis</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:13">

    <decl_stmt pos:start="5:5" pos:end="5:68"><decl pos:start="5:5" pos:end="5:67"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:17">PostcopyState</name></type> <name pos:start="5:19" pos:end="5:20">ps</name> <init pos:start="5:22" pos:end="5:67">= <expr pos:start="5:24" pos:end="5:67"><call pos:start="5:24" pos:end="5:67"><name pos:start="5:24" pos:end="5:41">postcopy_state_set</name><argument_list pos:start="5:42" pos:end="5:67">(<argument pos:start="5:43" pos:end="5:66"><expr pos:start="5:43" pos:end="5:66"><name pos:start="5:43" pos:end="5:66">POSTCOPY_INCOMING_ADVISE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:23">remote_hps</name></decl>, <decl pos:start="7:26" pos:end="7:35"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:26" pos:end="7:35">remote_tps</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:42"><expr pos:start="11:5" pos:end="11:41"><call pos:start="11:5" pos:end="11:41"><name pos:start="11:5" pos:end="11:39">trace_loadvm_postcopy_handle_advise</name><argument_list pos:start="11:40" pos:end="11:41">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:37">(<expr pos:start="13:9" pos:end="13:36"><name pos:start="13:9" pos:end="13:10">ps</name> <operator pos:start="13:12" pos:end="13:13">!=</operator> <name pos:start="13:15" pos:end="13:36">POSTCOPY_INCOMING_NONE</name></expr>)</condition> <block pos:start="13:39" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:18">

        <expr_stmt pos:start="15:9" pos:end="15:77"><expr pos:start="15:9" pos:end="15:76"><call pos:start="15:9" pos:end="15:76"><name pos:start="15:9" pos:end="15:20">error_report</name><argument_list pos:start="15:21" pos:end="15:76">(<argument pos:start="15:22" pos:end="15:71"><expr pos:start="15:22" pos:end="15:71"><literal type="string" pos:start="15:22" pos:end="15:71">"CMD_POSTCOPY_ADVISE in wrong postcopy state (%d)"</literal></expr></argument>, <argument pos:start="15:74" pos:end="15:75"><expr pos:start="15:74" pos:end="15:75"><name pos:start="15:74" pos:end="15:75">ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:42">(<expr pos:start="23:9" pos:end="23:41"><operator pos:start="23:9" pos:end="23:9">!</operator><call pos:start="23:10" pos:end="23:41"><name pos:start="23:10" pos:end="23:39">postcopy_ram_supported_by_host</name><argument_list pos:start="23:40" pos:end="23:41">()</argument_list></call></expr>)</condition> <block pos:start="23:44" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:18">

        <expr_stmt pos:start="25:9" pos:end="25:51"><expr pos:start="25:9" pos:end="25:50"><call pos:start="25:9" pos:end="25:50"><name pos:start="25:9" pos:end="25:26">postcopy_state_set</name><argument_list pos:start="25:27" pos:end="25:50">(<argument pos:start="25:28" pos:end="25:49"><expr pos:start="25:28" pos:end="25:49"><name pos:start="25:28" pos:end="25:49">POSTCOPY_INCOMING_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:51"><expr pos:start="33:5" pos:end="33:50"><name pos:start="33:5" pos:end="33:14">remote_hps</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="33:50"><name pos:start="33:18" pos:end="33:30">qemu_get_be64</name><argument_list pos:start="33:31" pos:end="33:50">(<argument pos:start="33:32" pos:end="33:49"><expr pos:start="33:32" pos:end="33:49"><name pos:start="33:32" pos:end="33:49"><name pos:start="33:32" pos:end="33:34">mis</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:49">from_src_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="57:5"><if pos:start="35:5" pos:end="57:5">if <condition pos:start="35:8" pos:end="35:36">(<expr pos:start="35:9" pos:end="35:35"><name pos:start="35:9" pos:end="35:18">remote_hps</name> <operator pos:start="35:20" pos:end="35:21">!=</operator> <call pos:start="35:23" pos:end="35:35"><name pos:start="35:23" pos:end="35:33">getpagesize</name><argument_list pos:start="35:34" pos:end="35:35">()</argument_list></call></expr>)</condition>  <block pos:start="35:39" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:18">

        <comment type="block" pos:start="37:9" pos:end="49:11">/*

         * Some combinations of mismatch are probably possible but it gets

         * a bit more complicated.  In particular we need to place whole

         * host pages on the dest at once, and we need to ensure that we

         * handle dirtying to make sure we never end up sending part of

         * a hostpage on it's own.

         */</comment>

        <expr_stmt pos:start="51:9" pos:end="53:53"><expr pos:start="51:9" pos:end="53:52"><call pos:start="51:9" pos:end="53:52"><name pos:start="51:9" pos:end="51:20">error_report</name><argument_list pos:start="51:21" pos:end="53:52">(<argument pos:start="51:22" pos:end="51:74"><expr pos:start="51:22" pos:end="51:74"><literal type="string" pos:start="51:22" pos:end="51:74">"Postcopy needs matching host page sizes (s=%d d=%d)"</literal></expr></argument>,

                     <argument pos:start="53:22" pos:end="53:36"><expr pos:start="53:22" pos:end="53:36"><operator pos:start="53:22" pos:end="53:22">(</operator><name pos:start="53:23" pos:end="53:25">int</name><operator pos:start="53:26" pos:end="53:26">)</operator><name pos:start="53:27" pos:end="53:36">remote_hps</name></expr></argument>, <argument pos:start="53:39" pos:end="53:51"><expr pos:start="53:39" pos:end="53:51"><call pos:start="53:39" pos:end="53:51"><name pos:start="53:39" pos:end="53:49">getpagesize</name><argument_list pos:start="53:50" pos:end="53:51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:18">return <expr pos:start="55:16" pos:end="55:17"><operator pos:start="55:16" pos:end="55:16">-</operator><literal type="number" pos:start="55:17" pos:end="55:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:51"><expr pos:start="61:5" pos:end="61:50"><name pos:start="61:5" pos:end="61:14">remote_tps</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <call pos:start="61:18" pos:end="61:50"><name pos:start="61:18" pos:end="61:30">qemu_get_be64</name><argument_list pos:start="61:31" pos:end="61:50">(<argument pos:start="61:32" pos:end="61:49"><expr pos:start="61:32" pos:end="61:49"><name pos:start="61:32" pos:end="61:49"><name pos:start="61:32" pos:end="61:34">mis</name><operator pos:start="61:35" pos:end="61:36">-&gt;</operator><name pos:start="61:37" pos:end="61:49">from_src_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="79:5"><if pos:start="63:5" pos:end="79:5">if <condition pos:start="63:8" pos:end="63:55">(<expr pos:start="63:9" pos:end="63:54"><name pos:start="63:9" pos:end="63:18">remote_tps</name> <operator pos:start="63:20" pos:end="63:21">!=</operator> <operator pos:start="63:23" pos:end="63:23">(</operator><literal type="number" pos:start="63:24" pos:end="63:26">1ul</literal> <operator pos:start="63:28" pos:end="63:29">&lt;&lt;</operator> <call pos:start="63:31" pos:end="63:53"><name pos:start="63:31" pos:end="63:51">qemu_target_page_bits</name><argument_list pos:start="63:52" pos:end="63:53">()</argument_list></call><operator pos:start="63:54" pos:end="63:54">)</operator></expr>)</condition> <block pos:start="63:57" pos:end="79:5">{<block_content pos:start="73:9" pos:end="77:18">

        <comment type="block" pos:start="65:9" pos:end="71:11">/*

         * Again, some differences could be dealt with, but for now keep it

         * simple.

         */</comment>

        <expr_stmt pos:start="73:9" pos:end="75:68"><expr pos:start="73:9" pos:end="75:67"><call pos:start="73:9" pos:end="75:67"><name pos:start="73:9" pos:end="73:20">error_report</name><argument_list pos:start="73:21" pos:end="75:67">(<argument pos:start="73:22" pos:end="73:76"><expr pos:start="73:22" pos:end="73:76"><literal type="string" pos:start="73:22" pos:end="73:76">"Postcopy needs matching target page sizes (s=%d d=%d)"</literal></expr></argument>,

                     <argument pos:start="75:22" pos:end="75:36"><expr pos:start="75:22" pos:end="75:36"><operator pos:start="75:22" pos:end="75:22">(</operator><name pos:start="75:23" pos:end="75:25">int</name><operator pos:start="75:26" pos:end="75:26">)</operator><name pos:start="75:27" pos:end="75:36">remote_tps</name></expr></argument>, <argument pos:start="75:39" pos:end="75:66"><expr pos:start="75:39" pos:end="75:66"><literal type="number" pos:start="75:39" pos:end="75:39">1</literal> <operator pos:start="75:41" pos:end="75:42">&lt;&lt;</operator> <call pos:start="75:44" pos:end="75:66"><name pos:start="75:44" pos:end="75:64">qemu_target_page_bits</name><argument_list pos:start="75:65" pos:end="75:66">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:18">return <expr pos:start="77:16" pos:end="77:17"><operator pos:start="77:16" pos:end="77:16">-</operator><literal type="number" pos:start="77:17" pos:end="77:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:40">(<expr pos:start="83:9" pos:end="83:39"><call pos:start="83:9" pos:end="83:39"><name pos:start="83:9" pos:end="83:34">ram_postcopy_incoming_init</name><argument_list pos:start="83:35" pos:end="83:39">(<argument pos:start="83:36" pos:end="83:38"><expr pos:start="83:36" pos:end="83:38"><name pos:start="83:36" pos:end="83:38">mis</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:42" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:18">

        <return pos:start="85:9" pos:end="85:18">return <expr pos:start="85:16" pos:end="85:17"><operator pos:start="85:16" pos:end="85:16">-</operator><literal type="number" pos:start="85:17" pos:end="85:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:49"><expr pos:start="91:5" pos:end="91:48"><call pos:start="91:5" pos:end="91:48"><name pos:start="91:5" pos:end="91:22">postcopy_state_set</name><argument_list pos:start="91:23" pos:end="91:48">(<argument pos:start="91:24" pos:end="91:47"><expr pos:start="91:24" pos:end="91:47"><name pos:start="91:24" pos:end="91:47">POSTCOPY_INCOMING_ADVISE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="95:5" pos:end="95:13">return <expr pos:start="95:12" pos:end="95:12"><literal type="number" pos:start="95:12" pos:end="95:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
