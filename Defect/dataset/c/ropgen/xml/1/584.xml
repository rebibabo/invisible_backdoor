<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/584.c" pos:tabs="8"><function pos:start="1:1" pos:end="351:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:49">gen_intermediate_code_internal</name><parameter_list pos:start="1:50" pos:end="5:65">(<parameter pos:start="1:51" pos:end="1:61"><decl pos:start="1:51" pos:end="1:61"><type pos:start="1:51" pos:end="1:61"><name pos:start="1:51" pos:end="1:56">X86CPU</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">cpu</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:70"><decl pos:start="3:51" pos:end="3:70"><type pos:start="3:51" pos:end="3:70"><name pos:start="3:51" pos:end="3:66">TranslationBlock</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:70">tb</name></decl></parameter>,

                                                  <parameter pos:start="5:51" pos:end="5:64"><decl pos:start="5:51" pos:end="5:64"><type pos:start="5:51" pos:end="5:64"><name pos:start="5:51" pos:end="5:54">bool</name></type> <name pos:start="5:56" pos:end="5:64">search_pc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="351:1">{<block_content pos:start="9:5" pos:end="349:5">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">cs</name> <init pos:start="9:18" pos:end="9:27">= <expr pos:start="9:20" pos:end="9:27"><call pos:start="9:20" pos:end="9:27"><name pos:start="9:20" pos:end="9:22">CPU</name><argument_list pos:start="9:23" pos:end="9:27">(<argument pos:start="9:24" pos:end="9:26"><expr pos:start="9:24" pos:end="9:26"><name pos:start="9:24" pos:end="9:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">CPUX86State</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">env</name> <init pos:start="11:22" pos:end="11:32">= <expr pos:start="11:24" pos:end="11:32"><operator pos:start="11:24" pos:end="11:24">&amp;</operator><name pos:start="11:25" pos:end="11:32"><name pos:start="11:25" pos:end="11:27">cpu</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">DisasContext</name></type> <name pos:start="13:18" pos:end="13:20">dc1</name></decl>, <decl pos:start="13:23" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:16"><modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:25">dc</name> <init pos:start="13:27" pos:end="13:32">= <expr pos:start="13:29" pos:end="13:32"><operator pos:start="13:29" pos:end="13:29">&amp;</operator><name pos:start="13:30" pos:end="13:32">dc1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">target_ulong</name></type> <name pos:start="15:18" pos:end="15:23">pc_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">uint16_t</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:25">gen_opc_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:17">CPUBreakpoint</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:21">bp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:14"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">j</name></decl>, <decl pos:start="21:12" pos:end="21:13"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:12" pos:end="21:13">lj</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint64_t</name></type> <name pos:start="23:14" pos:end="23:18">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:16">target_ulong</name></type> <name pos:start="25:18" pos:end="25:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:25"><decl pos:start="27:5" pos:end="27:24"><type pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:16">target_ulong</name></type> <name pos:start="27:18" pos:end="27:24">cs_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:18"><decl pos:start="29:5" pos:end="29:17"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:18"><decl pos:start="31:5" pos:end="31:17"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:17">max_insns</name></decl>;</decl_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:36">/* generate intermediate code */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:22"><expr pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:12">pc_start</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <name pos:start="37:16" pos:end="37:21"><name pos:start="37:16" pos:end="37:17">tb</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:21">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:26"><expr pos:start="39:5" pos:end="39:25"><name pos:start="39:5" pos:end="39:11">cs_base</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:25"><name pos:start="39:15" pos:end="39:16">tb</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:25">cs_base</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:22"><expr pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:9">flags</name> <operator pos:start="41:11" pos:end="41:11">=</operator> <name pos:start="41:13" pos:end="41:21"><name pos:start="41:13" pos:end="41:14">tb</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:21">flags</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:40"><expr pos:start="45:5" pos:end="45:39"><name pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:6">dc</name><operator pos:start="45:7" pos:end="45:8">-&gt;</operator><name pos:start="45:9" pos:end="45:10">pe</name></name> <operator pos:start="45:12" pos:end="45:12">=</operator> <operator pos:start="45:14" pos:end="45:14">(</operator><name pos:start="45:15" pos:end="45:19">flags</name> <operator pos:start="45:21" pos:end="45:22">&gt;&gt;</operator> <name pos:start="45:24" pos:end="45:34">HF_PE_SHIFT</name><operator pos:start="45:35" pos:end="45:35">)</operator> <operator pos:start="45:37" pos:end="45:37">&amp;</operator> <literal type="number" pos:start="45:39" pos:end="45:39">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:46"><expr pos:start="47:5" pos:end="47:45"><name pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:6">dc</name><operator pos:start="47:7" pos:end="47:8">-&gt;</operator><name pos:start="47:9" pos:end="47:14">code32</name></name> <operator pos:start="47:16" pos:end="47:16">=</operator> <operator pos:start="47:18" pos:end="47:18">(</operator><name pos:start="47:19" pos:end="47:23">flags</name> <operator pos:start="47:25" pos:end="47:26">&gt;&gt;</operator> <name pos:start="47:28" pos:end="47:40">HF_CS32_SHIFT</name><operator pos:start="47:41" pos:end="47:41">)</operator> <operator pos:start="47:43" pos:end="47:43">&amp;</operator> <literal type="number" pos:start="47:45" pos:end="47:45">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:44"><expr pos:start="49:5" pos:end="49:43"><name pos:start="49:5" pos:end="49:12"><name pos:start="49:5" pos:end="49:6">dc</name><operator pos:start="49:7" pos:end="49:8">-&gt;</operator><name pos:start="49:9" pos:end="49:12">ss32</name></name> <operator pos:start="49:14" pos:end="49:14">=</operator> <operator pos:start="49:16" pos:end="49:16">(</operator><name pos:start="49:17" pos:end="49:21">flags</name> <operator pos:start="49:23" pos:end="49:24">&gt;&gt;</operator> <name pos:start="49:26" pos:end="49:38">HF_SS32_SHIFT</name><operator pos:start="49:39" pos:end="49:39">)</operator> <operator pos:start="49:41" pos:end="49:41">&amp;</operator> <literal type="number" pos:start="49:43" pos:end="49:43">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:48"><expr pos:start="51:5" pos:end="51:47"><name pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:6">dc</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:14">addseg</name></name> <operator pos:start="51:16" pos:end="51:16">=</operator> <operator pos:start="51:18" pos:end="51:18">(</operator><name pos:start="51:19" pos:end="51:23">flags</name> <operator pos:start="51:25" pos:end="51:26">&gt;&gt;</operator> <name pos:start="51:28" pos:end="51:42">HF_ADDSEG_SHIFT</name><operator pos:start="51:43" pos:end="51:43">)</operator> <operator pos:start="51:45" pos:end="51:45">&amp;</operator> <literal type="number" pos:start="51:47" pos:end="51:47">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:17"><expr pos:start="53:5" pos:end="53:16"><name pos:start="53:5" pos:end="53:12"><name pos:start="53:5" pos:end="53:6">dc</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:12">f_st</name></name> <operator pos:start="53:14" pos:end="53:14">=</operator> <literal type="number" pos:start="53:16" pos:end="53:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:39"><expr pos:start="55:5" pos:end="55:38"><name pos:start="55:5" pos:end="55:12"><name pos:start="55:5" pos:end="55:6">dc</name><operator pos:start="55:7" pos:end="55:8">-&gt;</operator><name pos:start="55:9" pos:end="55:12">vm86</name></name> <operator pos:start="55:14" pos:end="55:14">=</operator> <operator pos:start="55:16" pos:end="55:16">(</operator><name pos:start="55:17" pos:end="55:21">flags</name> <operator pos:start="55:23" pos:end="55:24">&gt;&gt;</operator> <name pos:start="55:26" pos:end="55:33">VM_SHIFT</name><operator pos:start="55:34" pos:end="55:34">)</operator> <operator pos:start="55:36" pos:end="55:36">&amp;</operator> <literal type="number" pos:start="55:38" pos:end="55:38">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:42"><expr pos:start="57:5" pos:end="57:41"><name pos:start="57:5" pos:end="57:11"><name pos:start="57:5" pos:end="57:6">dc</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:11">cpl</name></name> <operator pos:start="57:13" pos:end="57:13">=</operator> <operator pos:start="57:15" pos:end="57:15">(</operator><name pos:start="57:16" pos:end="57:20">flags</name> <operator pos:start="57:22" pos:end="57:23">&gt;&gt;</operator> <name pos:start="57:25" pos:end="57:36">HF_CPL_SHIFT</name><operator pos:start="57:37" pos:end="57:37">)</operator> <operator pos:start="57:39" pos:end="57:39">&amp;</operator> <literal type="number" pos:start="57:41" pos:end="57:41">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:41"><expr pos:start="59:5" pos:end="59:40"><name pos:start="59:5" pos:end="59:12"><name pos:start="59:5" pos:end="59:6">dc</name><operator pos:start="59:7" pos:end="59:8">-&gt;</operator><name pos:start="59:9" pos:end="59:12">iopl</name></name> <operator pos:start="59:14" pos:end="59:14">=</operator> <operator pos:start="59:16" pos:end="59:16">(</operator><name pos:start="59:17" pos:end="59:21">flags</name> <operator pos:start="59:23" pos:end="59:24">&gt;&gt;</operator> <name pos:start="59:26" pos:end="59:35">IOPL_SHIFT</name><operator pos:start="59:36" pos:end="59:36">)</operator> <operator pos:start="59:38" pos:end="59:38">&amp;</operator> <literal type="number" pos:start="59:40" pos:end="59:40">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:37"><expr pos:start="61:5" pos:end="61:36"><name pos:start="61:5" pos:end="61:10"><name pos:start="61:5" pos:end="61:6">dc</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:10">tf</name></name> <operator pos:start="61:12" pos:end="61:12">=</operator> <operator pos:start="61:14" pos:end="61:14">(</operator><name pos:start="61:15" pos:end="61:19">flags</name> <operator pos:start="61:21" pos:end="61:22">&gt;&gt;</operator> <name pos:start="61:24" pos:end="61:31">TF_SHIFT</name><operator pos:start="61:32" pos:end="61:32">)</operator> <operator pos:start="61:34" pos:end="61:34">&amp;</operator> <literal type="number" pos:start="61:36" pos:end="61:36">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:52"><expr pos:start="63:5" pos:end="63:51"><name pos:start="63:5" pos:end="63:26"><name pos:start="63:5" pos:end="63:6">dc</name><operator pos:start="63:7" pos:end="63:8">-&gt;</operator><name pos:start="63:9" pos:end="63:26">singlestep_enabled</name></name> <operator pos:start="63:28" pos:end="63:28">=</operator> <name pos:start="63:30" pos:end="63:51"><name pos:start="63:30" pos:end="63:31">cs</name><operator pos:start="63:32" pos:end="63:33">-&gt;</operator><name pos:start="63:34" pos:end="63:51">singlestep_enabled</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:30"><expr pos:start="65:5" pos:end="65:29"><name pos:start="65:5" pos:end="65:13"><name pos:start="65:5" pos:end="65:6">dc</name><operator pos:start="65:7" pos:end="65:8">-&gt;</operator><name pos:start="65:9" pos:end="65:13">cc_op</name></name> <operator pos:start="65:15" pos:end="65:15">=</operator> <name pos:start="65:17" pos:end="65:29">CC_OP_DYNAMIC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:28"><expr pos:start="67:5" pos:end="67:27"><name pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:6">dc</name><operator pos:start="67:7" pos:end="67:8">-&gt;</operator><name pos:start="67:9" pos:end="67:19">cc_op_dirty</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:27">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:26"><expr pos:start="69:5" pos:end="69:25"><name pos:start="69:5" pos:end="69:15"><name pos:start="69:5" pos:end="69:6">dc</name><operator pos:start="69:7" pos:end="69:8">-&gt;</operator><name pos:start="69:9" pos:end="69:15">cs_base</name></name> <operator pos:start="69:17" pos:end="69:17">=</operator> <name pos:start="69:19" pos:end="69:25">cs_base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:16"><expr pos:start="71:5" pos:end="71:15"><name pos:start="71:5" pos:end="71:10"><name pos:start="71:5" pos:end="71:6">dc</name><operator pos:start="71:7" pos:end="71:8">-&gt;</operator><name pos:start="71:9" pos:end="71:10">tb</name></name> <operator pos:start="71:12" pos:end="71:12">=</operator> <name pos:start="71:14" pos:end="71:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:26"><expr pos:start="73:5" pos:end="73:25"><name pos:start="73:5" pos:end="73:21"><name pos:start="73:5" pos:end="73:6">dc</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:21">popl_esp_hack</name></name> <operator pos:start="73:23" pos:end="73:23">=</operator> <literal type="number" pos:start="73:25" pos:end="73:25">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="75:5" pos:end="75:40">/* select memory access functions */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:22"><expr pos:start="77:5" pos:end="77:21"><name pos:start="77:5" pos:end="77:17"><name pos:start="77:5" pos:end="77:6">dc</name><operator pos:start="77:7" pos:end="77:8">-&gt;</operator><name pos:start="77:9" pos:end="77:17">mem_index</name></name> <operator pos:start="77:19" pos:end="77:19">=</operator> <literal type="number" pos:start="77:21" pos:end="77:21">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:32">(<expr pos:start="79:9" pos:end="79:31"><name pos:start="79:9" pos:end="79:13">flags</name> <operator pos:start="79:15" pos:end="79:15">&amp;</operator> <name pos:start="79:17" pos:end="79:31">HF_SOFTMMU_MASK</name></expr>)</condition> <block pos:start="79:34" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:43">

        <expr_stmt pos:start="81:9" pos:end="81:43"><expr pos:start="81:9" pos:end="81:42"><name pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:10">dc</name><operator pos:start="81:11" pos:end="81:12">-&gt;</operator><name pos:start="81:13" pos:end="81:21">mem_index</name></name> <operator pos:start="81:23" pos:end="81:23">=</operator> <call pos:start="81:25" pos:end="81:42"><name pos:start="81:25" pos:end="81:37">cpu_mmu_index</name><argument_list pos:start="81:38" pos:end="81:42">(<argument pos:start="81:39" pos:end="81:41"><expr pos:start="81:39" pos:end="81:41"><name pos:start="81:39" pos:end="81:41">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:51"><expr pos:start="85:5" pos:end="85:50"><name pos:start="85:5" pos:end="85:22"><name pos:start="85:5" pos:end="85:6">dc</name><operator pos:start="85:7" pos:end="85:8">-&gt;</operator><name pos:start="85:9" pos:end="85:22">cpuid_features</name></name> <operator pos:start="85:24" pos:end="85:24">=</operator> <name pos:start="85:26" pos:end="85:50"><name pos:start="85:26" pos:end="85:28">env</name><operator pos:start="85:29" pos:end="85:30">-&gt;</operator><name pos:start="85:31" pos:end="85:38">features</name><index pos:start="85:39" pos:end="85:50">[<expr pos:start="85:40" pos:end="85:49"><name pos:start="85:40" pos:end="85:49">FEAT_1_EDX</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:55"><expr pos:start="87:5" pos:end="87:54"><name pos:start="87:5" pos:end="87:26"><name pos:start="87:5" pos:end="87:6">dc</name><operator pos:start="87:7" pos:end="87:8">-&gt;</operator><name pos:start="87:9" pos:end="87:26">cpuid_ext_features</name></name> <operator pos:start="87:28" pos:end="87:28">=</operator> <name pos:start="87:30" pos:end="87:54"><name pos:start="87:30" pos:end="87:32">env</name><operator pos:start="87:33" pos:end="87:34">-&gt;</operator><name pos:start="87:35" pos:end="87:42">features</name><index pos:start="87:43" pos:end="87:54">[<expr pos:start="87:44" pos:end="87:53"><name pos:start="87:44" pos:end="87:53">FEAT_1_ECX</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:64"><expr pos:start="89:5" pos:end="89:63"><name pos:start="89:5" pos:end="89:27"><name pos:start="89:5" pos:end="89:6">dc</name><operator pos:start="89:7" pos:end="89:8">-&gt;</operator><name pos:start="89:9" pos:end="89:27">cpuid_ext2_features</name></name> <operator pos:start="89:29" pos:end="89:29">=</operator> <name pos:start="89:31" pos:end="89:63"><name pos:start="89:31" pos:end="89:33">env</name><operator pos:start="89:34" pos:end="89:35">-&gt;</operator><name pos:start="89:36" pos:end="89:43">features</name><index pos:start="89:44" pos:end="89:63">[<expr pos:start="89:45" pos:end="89:62"><name pos:start="89:45" pos:end="89:62">FEAT_8000_0001_EDX</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:64"><expr pos:start="91:5" pos:end="91:63"><name pos:start="91:5" pos:end="91:27"><name pos:start="91:5" pos:end="91:6">dc</name><operator pos:start="91:7" pos:end="91:8">-&gt;</operator><name pos:start="91:9" pos:end="91:27">cpuid_ext3_features</name></name> <operator pos:start="91:29" pos:end="91:29">=</operator> <name pos:start="91:31" pos:end="91:63"><name pos:start="91:31" pos:end="91:33">env</name><operator pos:start="91:34" pos:end="91:35">-&gt;</operator><name pos:start="91:36" pos:end="91:43">features</name><index pos:start="91:44" pos:end="91:63">[<expr pos:start="91:45" pos:end="91:62"><name pos:start="91:45" pos:end="91:62">FEAT_8000_0001_ECX</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="96:0"><expr pos:start="93:5" pos:end="93:60"><name pos:start="93:5" pos:end="93:30"><name pos:start="93:5" pos:end="93:6">dc</name><operator pos:start="93:7" pos:end="93:8">-&gt;</operator><name pos:start="93:9" pos:end="93:30">cpuid_7_0_ebx_features</name></name> <operator pos:start="93:32" pos:end="93:32">=</operator> <name pos:start="93:34" pos:end="93:60"><name pos:start="93:34" pos:end="93:36">env</name><operator pos:start="93:37" pos:end="93:38">-&gt;</operator><name pos:start="93:39" pos:end="93:46">features</name><index pos:start="93:47" pos:end="93:60">[<expr pos:start="93:48" pos:end="93:59"><name pos:start="93:48" pos:end="93:59">FEAT_7_0_EBX</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:ifdef pos:start="95:1" pos:end="95:20">#<cpp:directive pos:start="95:2" pos:end="95:6">ifdef</cpp:directive> <name pos:start="95:8" pos:end="95:20">TARGET_X86_64</name></cpp:ifdef>

    <expr_stmt pos:start="97:5" pos:end="97:42"><expr pos:start="97:5" pos:end="97:41"><name pos:start="97:5" pos:end="97:11"><name pos:start="97:5" pos:end="97:6">dc</name><operator pos:start="97:7" pos:end="97:8">-&gt;</operator><name pos:start="97:9" pos:end="97:11">lma</name></name> <operator pos:start="97:13" pos:end="97:13">=</operator> <operator pos:start="97:15" pos:end="97:15">(</operator><name pos:start="97:16" pos:end="97:20">flags</name> <operator pos:start="97:22" pos:end="97:23">&gt;&gt;</operator> <name pos:start="97:25" pos:end="97:36">HF_LMA_SHIFT</name><operator pos:start="97:37" pos:end="97:37">)</operator> <operator pos:start="97:39" pos:end="97:39">&amp;</operator> <literal type="number" pos:start="97:41" pos:end="97:41">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="102:0"><expr pos:start="99:5" pos:end="99:45"><name pos:start="99:5" pos:end="99:14"><name pos:start="99:5" pos:end="99:6">dc</name><operator pos:start="99:7" pos:end="99:8">-&gt;</operator><name pos:start="99:9" pos:end="99:14">code64</name></name> <operator pos:start="99:16" pos:end="99:16">=</operator> <operator pos:start="99:18" pos:end="99:18">(</operator><name pos:start="99:19" pos:end="99:23">flags</name> <operator pos:start="99:25" pos:end="99:26">&gt;&gt;</operator> <name pos:start="99:28" pos:end="99:40">HF_CS64_SHIFT</name><operator pos:start="99:41" pos:end="99:41">)</operator> <operator pos:start="99:43" pos:end="99:43">&amp;</operator> <literal type="number" pos:start="99:45" pos:end="99:45">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="101:1" pos:end="101:6">#<cpp:directive pos:start="101:2" pos:end="101:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="103:5" pos:end="103:22"><expr pos:start="103:5" pos:end="103:21"><name pos:start="103:5" pos:end="103:13"><name pos:start="103:5" pos:end="103:6">dc</name><operator pos:start="103:7" pos:end="103:8">-&gt;</operator><name pos:start="103:9" pos:end="103:13">flags</name></name> <operator pos:start="103:15" pos:end="103:15">=</operator> <name pos:start="103:17" pos:end="103:21">flags</name></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="126:0"><expr pos:start="105:5" pos:end="115:21"><name pos:start="105:5" pos:end="105:15"><name pos:start="105:5" pos:end="105:6">dc</name><operator pos:start="105:7" pos:end="105:8">-&gt;</operator><name pos:start="105:9" pos:end="105:15">jmp_opt</name></name> <operator pos:start="105:17" pos:end="105:17">=</operator> <operator pos:start="105:19" pos:end="105:19">!</operator><operator pos:start="105:20" pos:end="105:20">(</operator><name pos:start="105:21" pos:end="105:26"><name pos:start="105:21" pos:end="105:22">dc</name><operator pos:start="105:23" pos:end="105:24">-&gt;</operator><name pos:start="105:25" pos:end="105:26">tf</name></name> <operator pos:start="105:28" pos:end="105:29">||</operator> <name pos:start="105:31" pos:end="105:52"><name pos:start="105:31" pos:end="105:32">cs</name><operator pos:start="105:33" pos:end="105:34">-&gt;</operator><name pos:start="105:35" pos:end="105:52">singlestep_enabled</name></name> <operator pos:start="105:54" pos:end="105:55">||</operator>

                    <operator pos:start="107:21" pos:end="107:21">(</operator><name pos:start="107:22" pos:end="107:26">flags</name> <operator pos:start="107:28" pos:end="107:28">&amp;</operator> <name pos:start="107:30" pos:end="107:48">HF_INHIBIT_IRQ_MASK</name><operator pos:start="107:49" pos:end="110:0">)</operator>

<cpp:ifndef pos:start="109:1" pos:end="109:22">#<cpp:directive pos:start="109:2" pos:end="109:7">ifndef</cpp:directive> <name pos:start="109:9" pos:end="109:22">CONFIG_SOFTMMU</name></cpp:ifndef>

                    <operator pos:start="111:21" pos:end="111:22">||</operator> <operator pos:start="111:24" pos:end="111:24">(</operator><name pos:start="111:25" pos:end="111:29">flags</name> <operator pos:start="111:31" pos:end="111:31">&amp;</operator> <name pos:start="111:33" pos:end="111:47">HF_SOFTMMU_MASK</name><operator pos:start="111:48" pos:end="114:0">)</operator>

<cpp:endif pos:start="113:1" pos:end="113:6">#<cpp:directive pos:start="113:2" pos:end="113:6">endif</cpp:directive></cpp:endif>

                    <operator pos:start="115:21" pos:end="115:21">)</operator></expr>;</expr_stmt>

<cpp:if pos:start="117:1" pos:end="117:5">#<cpp:directive pos:start="117:2" pos:end="117:3">if</cpp:directive> <expr pos:start="117:5" pos:end="117:5"><literal type="number" pos:start="117:5" pos:end="117:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="119:5" pos:end="119:28">/* check addseg logic */</comment>

    if (!dc-&gt;addseg &amp;&amp; (dc-&gt;vm86 || !dc-&gt;pe || !dc-&gt;code32))

        printf("ERROR addseg\n");

<cpp:endif pos:start="125:1" pos:end="125:6">#<cpp:directive pos:start="125:2" pos:end="125:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="129:5" pos:end="129:30"><expr pos:start="129:5" pos:end="129:29"><name pos:start="129:5" pos:end="129:12"><name pos:start="129:5" pos:end="129:9">cpu_T</name><index pos:start="129:10" pos:end="129:12">[<expr pos:start="129:11" pos:end="129:11"><literal type="number" pos:start="129:11" pos:end="129:11">0</literal></expr>]</index></name> <operator pos:start="129:14" pos:end="129:14">=</operator> <call pos:start="129:16" pos:end="129:29"><name pos:start="129:16" pos:end="129:27">tcg_temp_new</name><argument_list pos:start="129:28" pos:end="129:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:30"><expr pos:start="131:5" pos:end="131:29"><name pos:start="131:5" pos:end="131:12"><name pos:start="131:5" pos:end="131:9">cpu_T</name><index pos:start="131:10" pos:end="131:12">[<expr pos:start="131:11" pos:end="131:11"><literal type="number" pos:start="131:11" pos:end="131:11">1</literal></expr>]</index></name> <operator pos:start="131:14" pos:end="131:14">=</operator> <call pos:start="131:16" pos:end="131:29"><name pos:start="131:16" pos:end="131:27">tcg_temp_new</name><argument_list pos:start="131:28" pos:end="131:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:28"><expr pos:start="133:5" pos:end="133:27"><name pos:start="133:5" pos:end="133:10">cpu_A0</name> <operator pos:start="133:12" pos:end="133:12">=</operator> <call pos:start="133:14" pos:end="133:27"><name pos:start="133:14" pos:end="133:25">tcg_temp_new</name><argument_list pos:start="133:26" pos:end="133:27">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:30"><expr pos:start="137:5" pos:end="137:29"><name pos:start="137:5" pos:end="137:12">cpu_tmp0</name> <operator pos:start="137:14" pos:end="137:14">=</operator> <call pos:start="137:16" pos:end="137:29"><name pos:start="137:16" pos:end="137:27">tcg_temp_new</name><argument_list pos:start="137:28" pos:end="137:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:38"><expr pos:start="139:5" pos:end="139:37"><name pos:start="139:5" pos:end="139:16">cpu_tmp1_i64</name> <operator pos:start="139:18" pos:end="139:18">=</operator> <call pos:start="139:20" pos:end="139:37"><name pos:start="139:20" pos:end="139:35">tcg_temp_new_i64</name><argument_list pos:start="139:36" pos:end="139:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:38"><expr pos:start="141:5" pos:end="141:37"><name pos:start="141:5" pos:end="141:16">cpu_tmp2_i32</name> <operator pos:start="141:18" pos:end="141:18">=</operator> <call pos:start="141:20" pos:end="141:37"><name pos:start="141:20" pos:end="141:35">tcg_temp_new_i32</name><argument_list pos:start="141:36" pos:end="141:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:38"><expr pos:start="143:5" pos:end="143:37"><name pos:start="143:5" pos:end="143:16">cpu_tmp3_i32</name> <operator pos:start="143:18" pos:end="143:18">=</operator> <call pos:start="143:20" pos:end="143:37"><name pos:start="143:20" pos:end="143:35">tcg_temp_new_i32</name><argument_list pos:start="143:36" pos:end="143:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:30"><expr pos:start="145:5" pos:end="145:29"><name pos:start="145:5" pos:end="145:12">cpu_tmp4</name> <operator pos:start="145:14" pos:end="145:14">=</operator> <call pos:start="145:16" pos:end="145:29"><name pos:start="145:16" pos:end="145:27">tcg_temp_new</name><argument_list pos:start="145:28" pos:end="145:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:34"><expr pos:start="147:5" pos:end="147:33"><name pos:start="147:5" pos:end="147:12">cpu_ptr0</name> <operator pos:start="147:14" pos:end="147:14">=</operator> <call pos:start="147:16" pos:end="147:33"><name pos:start="147:16" pos:end="147:31">tcg_temp_new_ptr</name><argument_list pos:start="147:32" pos:end="147:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:34"><expr pos:start="149:5" pos:end="149:33"><name pos:start="149:5" pos:end="149:12">cpu_ptr1</name> <operator pos:start="149:14" pos:end="149:14">=</operator> <call pos:start="149:16" pos:end="149:33"><name pos:start="149:16" pos:end="149:31">tcg_temp_new_ptr</name><argument_list pos:start="149:32" pos:end="149:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:39"><expr pos:start="151:5" pos:end="151:38"><name pos:start="151:5" pos:end="151:15">cpu_cc_srcT</name> <operator pos:start="151:17" pos:end="151:17">=</operator> <call pos:start="151:19" pos:end="151:38"><name pos:start="151:19" pos:end="151:36">tcg_temp_local_new</name><argument_list pos:start="151:37" pos:end="151:38">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:53"><expr pos:start="155:5" pos:end="155:52"><name pos:start="155:5" pos:end="155:15">gen_opc_end</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <name pos:start="155:19" pos:end="155:37"><name pos:start="155:19" pos:end="155:25">tcg_ctx</name><operator pos:start="155:26" pos:end="155:26">.</operator><name pos:start="155:27" pos:end="155:37">gen_opc_buf</name></name> <operator pos:start="155:39" pos:end="155:39">+</operator> <name pos:start="155:41" pos:end="155:52">OPC_MAX_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="159:5" pos:end="159:28"><expr pos:start="159:5" pos:end="159:27"><name pos:start="159:5" pos:end="159:14"><name pos:start="159:5" pos:end="159:6">dc</name><operator pos:start="159:7" pos:end="159:8">-&gt;</operator><name pos:start="159:9" pos:end="159:14">is_jmp</name></name> <operator pos:start="159:16" pos:end="159:16">=</operator> <name pos:start="159:18" pos:end="159:27">DISAS_NEXT</name></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:22"><expr pos:start="161:5" pos:end="161:21"><name pos:start="161:5" pos:end="161:10">pc_ptr</name> <operator pos:start="161:12" pos:end="161:12">=</operator> <name pos:start="161:14" pos:end="161:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:12"><expr pos:start="163:5" pos:end="163:11"><name pos:start="163:5" pos:end="163:6">lj</name> <operator pos:start="163:8" pos:end="163:8">=</operator> <operator pos:start="163:10" pos:end="163:10">-</operator><literal type="number" pos:start="163:11" pos:end="163:11">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:18"><expr pos:start="165:5" pos:end="165:17"><name pos:start="165:5" pos:end="165:13">num_insns</name> <operator pos:start="165:15" pos:end="165:15">=</operator> <literal type="number" pos:start="165:17" pos:end="165:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:43"><expr pos:start="167:5" pos:end="167:42"><name pos:start="167:5" pos:end="167:13">max_insns</name> <operator pos:start="167:15" pos:end="167:15">=</operator> <name pos:start="167:17" pos:end="167:26"><name pos:start="167:17" pos:end="167:18">tb</name><operator pos:start="167:19" pos:end="167:20">-&gt;</operator><name pos:start="167:21" pos:end="167:26">cflags</name></name> <operator pos:start="167:28" pos:end="167:28">&amp;</operator> <name pos:start="167:30" pos:end="167:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="169:5" pos:end="171:34"><if pos:start="169:5" pos:end="171:34">if <condition pos:start="169:8" pos:end="169:23">(<expr pos:start="169:9" pos:end="169:22"><name pos:start="169:9" pos:end="169:17">max_insns</name> <operator pos:start="169:19" pos:end="169:20">==</operator> <literal type="number" pos:start="169:22" pos:end="169:22">0</literal></expr>)</condition><block type="pseudo" pos:start="171:9" pos:end="171:34"><block_content pos:start="171:9" pos:end="171:34">

        <expr_stmt pos:start="171:9" pos:end="171:34"><expr pos:start="171:9" pos:end="171:33"><name pos:start="171:9" pos:end="171:17">max_insns</name> <operator pos:start="171:19" pos:end="171:19">=</operator> <name pos:start="171:21" pos:end="171:33">CF_COUNT_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:19"><expr pos:start="175:5" pos:end="175:18"><call pos:start="175:5" pos:end="175:18"><name pos:start="175:5" pos:end="175:16">gen_tb_start</name><argument_list pos:start="175:17" pos:end="175:18">()</argument_list></call></expr>;</expr_stmt>

    <for pos:start="177:5" pos:end="285:5">for<control pos:start="177:8" pos:end="177:11">(<init pos:start="177:9" pos:end="177:9">;</init><condition pos:start="177:10" pos:end="177:10">;</condition><incr/>)</control> <block pos:start="177:13" pos:end="285:5">{<block_content pos:start="179:9" pos:end="283:9">

        <if_stmt pos:start="179:9" pos:end="195:9"><if pos:start="179:9" pos:end="195:9">if <condition pos:start="179:12" pos:end="179:54">(<expr pos:start="179:13" pos:end="179:53"><call pos:start="179:13" pos:end="179:53"><name pos:start="179:13" pos:end="179:20">unlikely</name><argument_list pos:start="179:21" pos:end="179:53">(<argument pos:start="179:22" pos:end="179:52"><expr pos:start="179:22" pos:end="179:52"><operator pos:start="179:22" pos:end="179:22">!</operator><call pos:start="179:23" pos:end="179:52"><name pos:start="179:23" pos:end="179:34">QTAILQ_EMPTY</name><argument_list pos:start="179:35" pos:end="179:52">(<argument pos:start="179:36" pos:end="179:51"><expr pos:start="179:36" pos:end="179:51"><operator pos:start="179:36" pos:end="179:36">&amp;</operator><name pos:start="179:37" pos:end="179:51"><name pos:start="179:37" pos:end="179:38">cs</name><operator pos:start="179:39" pos:end="179:40">-&gt;</operator><name pos:start="179:41" pos:end="179:51">breakpoints</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="179:56" pos:end="195:9">{<block_content pos:start="181:13" pos:end="193:13">

            <macro pos:start="181:13" pos:end="181:55"><name pos:start="181:13" pos:end="181:26">QTAILQ_FOREACH</name><argument_list pos:start="181:27" pos:end="181:55">(<argument pos:start="181:28" pos:end="181:29">bp</argument>, <argument pos:start="181:32" pos:end="181:47">&amp;cs-&gt;breakpoints</argument>, <argument pos:start="181:50" pos:end="181:54">entry</argument>)</argument_list></macro> <block pos:start="181:57" pos:end="193:13">{<block_content pos:start="183:17" pos:end="191:17">

                <if_stmt pos:start="183:17" pos:end="191:17"><if pos:start="183:17" pos:end="191:17">if <condition pos:start="183:20" pos:end="185:72">(<expr pos:start="183:21" pos:end="185:71"><name pos:start="183:21" pos:end="183:26"><name pos:start="183:21" pos:end="183:22">bp</name><operator pos:start="183:23" pos:end="183:24">-&gt;</operator><name pos:start="183:25" pos:end="183:26">pc</name></name> <operator pos:start="183:28" pos:end="183:29">==</operator> <name pos:start="183:31" pos:end="183:36">pc_ptr</name> <operator pos:start="183:38" pos:end="183:39">&amp;&amp;</operator>

                    <operator pos:start="185:21" pos:end="185:21">!</operator><operator pos:start="185:22" pos:end="185:22">(</operator><operator pos:start="185:23" pos:end="185:23">(</operator><name pos:start="185:24" pos:end="185:32"><name pos:start="185:24" pos:end="185:25">bp</name><operator pos:start="185:26" pos:end="185:27">-&gt;</operator><name pos:start="185:28" pos:end="185:32">flags</name></name> <operator pos:start="185:34" pos:end="185:34">&amp;</operator> <name pos:start="185:36" pos:end="185:41">BP_CPU</name><operator pos:start="185:42" pos:end="185:42">)</operator> <operator pos:start="185:44" pos:end="185:45">&amp;&amp;</operator> <operator pos:start="185:47" pos:end="185:47">(</operator><name pos:start="185:48" pos:end="185:56"><name pos:start="185:48" pos:end="185:49">tb</name><operator pos:start="185:50" pos:end="185:51">-&gt;</operator><name pos:start="185:52" pos:end="185:56">flags</name></name> <operator pos:start="185:58" pos:end="185:58">&amp;</operator> <name pos:start="185:60" pos:end="185:69">HF_RF_MASK</name><operator pos:start="185:70" pos:end="185:70">)</operator><operator pos:start="185:71" pos:end="185:71">)</operator></expr>)</condition> <block pos:start="185:74" pos:end="191:17">{<block_content pos:start="187:21" pos:end="189:26">

                    <expr_stmt pos:start="187:21" pos:end="187:56"><expr pos:start="187:21" pos:end="187:55"><call pos:start="187:21" pos:end="187:55"><name pos:start="187:21" pos:end="187:29">gen_debug</name><argument_list pos:start="187:30" pos:end="187:55">(<argument pos:start="187:31" pos:end="187:32"><expr pos:start="187:31" pos:end="187:32"><name pos:start="187:31" pos:end="187:32">dc</name></expr></argument>, <argument pos:start="187:35" pos:end="187:54"><expr pos:start="187:35" pos:end="187:54"><name pos:start="187:35" pos:end="187:40">pc_ptr</name> <operator pos:start="187:42" pos:end="187:42">-</operator> <name pos:start="187:44" pos:end="187:54"><name pos:start="187:44" pos:end="187:45">dc</name><operator pos:start="187:46" pos:end="187:47">-&gt;</operator><name pos:start="187:48" pos:end="187:54">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="189:21" pos:end="189:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="197:9" pos:end="219:9"><if pos:start="197:9" pos:end="219:9">if <condition pos:start="197:12" pos:end="197:22">(<expr pos:start="197:13" pos:end="197:21"><name pos:start="197:13" pos:end="197:21">search_pc</name></expr>)</condition> <block pos:start="197:24" pos:end="219:9">{<block_content pos:start="199:13" pos:end="217:51">

            <expr_stmt pos:start="199:13" pos:end="199:58"><expr pos:start="199:13" pos:end="199:57"><name pos:start="199:13" pos:end="199:13">j</name> <operator pos:start="199:15" pos:end="199:15">=</operator> <name pos:start="199:17" pos:end="199:35"><name pos:start="199:17" pos:end="199:23">tcg_ctx</name><operator pos:start="199:24" pos:end="199:24">.</operator><name pos:start="199:25" pos:end="199:35">gen_opc_ptr</name></name> <operator pos:start="199:37" pos:end="199:37">-</operator> <name pos:start="199:39" pos:end="199:57"><name pos:start="199:39" pos:end="199:45">tcg_ctx</name><operator pos:start="199:46" pos:end="199:46">.</operator><name pos:start="199:47" pos:end="199:57">gen_opc_buf</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="201:13" pos:end="209:13"><if pos:start="201:13" pos:end="209:13">if <condition pos:start="201:16" pos:end="201:23">(<expr pos:start="201:17" pos:end="201:22"><name pos:start="201:17" pos:end="201:18">lj</name> <operator pos:start="201:20" pos:end="201:20">&lt;</operator> <name pos:start="201:22" pos:end="201:22">j</name></expr>)</condition> <block pos:start="201:25" pos:end="209:13">{<block_content pos:start="203:17" pos:end="207:58">

                <expr_stmt pos:start="203:17" pos:end="203:21"><expr pos:start="203:17" pos:end="203:20"><name pos:start="203:17" pos:end="203:18">lj</name><operator pos:start="203:19" pos:end="203:20">++</operator></expr>;</expr_stmt>

                <while pos:start="205:17" pos:end="207:58">while <condition pos:start="205:23" pos:end="205:30">(<expr pos:start="205:24" pos:end="205:29"><name pos:start="205:24" pos:end="205:25">lj</name> <operator pos:start="205:27" pos:end="205:27">&lt;</operator> <name pos:start="205:29" pos:end="205:29">j</name></expr>)</condition><block type="pseudo" pos:start="207:21" pos:end="207:58"><block_content pos:start="207:21" pos:end="207:58">

                    <expr_stmt pos:start="207:21" pos:end="207:58"><expr pos:start="207:21" pos:end="207:57"><name pos:start="207:21" pos:end="207:53"><name pos:start="207:21" pos:end="207:27">tcg_ctx</name><operator pos:start="207:28" pos:end="207:28">.</operator><name pos:start="207:29" pos:end="207:47">gen_opc_instr_start</name><index pos:start="207:48" pos:end="207:53">[<expr pos:start="207:49" pos:end="207:52"><name pos:start="207:49" pos:end="207:50">lj</name><operator pos:start="207:51" pos:end="207:52">++</operator></expr>]</index></name> <operator pos:start="207:55" pos:end="207:55">=</operator> <literal type="number" pos:start="207:57" pos:end="207:57">0</literal></expr>;</expr_stmt></block_content></block></while>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:44"><expr pos:start="211:13" pos:end="211:43"><name pos:start="211:13" pos:end="211:34"><name pos:start="211:13" pos:end="211:19">tcg_ctx</name><operator pos:start="211:20" pos:end="211:20">.</operator><name pos:start="211:21" pos:end="211:30">gen_opc_pc</name><index pos:start="211:31" pos:end="211:34">[<expr pos:start="211:32" pos:end="211:33"><name pos:start="211:32" pos:end="211:33">lj</name></expr>]</index></name> <operator pos:start="211:36" pos:end="211:36">=</operator> <name pos:start="211:38" pos:end="211:43">pc_ptr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:42"><expr pos:start="213:13" pos:end="213:41"><name pos:start="213:13" pos:end="213:29"><name pos:start="213:13" pos:end="213:25">gen_opc_cc_op</name><index pos:start="213:26" pos:end="213:29">[<expr pos:start="213:27" pos:end="213:28"><name pos:start="213:27" pos:end="213:28">lj</name></expr>]</index></name> <operator pos:start="213:31" pos:end="213:31">=</operator> <name pos:start="213:33" pos:end="213:41"><name pos:start="213:33" pos:end="213:34">dc</name><operator pos:start="213:35" pos:end="213:36">-&gt;</operator><name pos:start="213:37" pos:end="213:41">cc_op</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:48"><expr pos:start="215:13" pos:end="215:47"><name pos:start="215:13" pos:end="215:43"><name pos:start="215:13" pos:end="215:19">tcg_ctx</name><operator pos:start="215:20" pos:end="215:20">.</operator><name pos:start="215:21" pos:end="215:39">gen_opc_instr_start</name><index pos:start="215:40" pos:end="215:43">[<expr pos:start="215:41" pos:end="215:42"><name pos:start="215:41" pos:end="215:42">lj</name></expr>]</index></name> <operator pos:start="215:45" pos:end="215:45">=</operator> <literal type="number" pos:start="215:47" pos:end="215:47">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:51"><expr pos:start="217:13" pos:end="217:50"><name pos:start="217:13" pos:end="217:38"><name pos:start="217:13" pos:end="217:19">tcg_ctx</name><operator pos:start="217:20" pos:end="217:20">.</operator><name pos:start="217:21" pos:end="217:34">gen_opc_icount</name><index pos:start="217:35" pos:end="217:38">[<expr pos:start="217:36" pos:end="217:37"><name pos:start="217:36" pos:end="217:37">lj</name></expr>]</index></name> <operator pos:start="217:40" pos:end="217:40">=</operator> <name pos:start="217:42" pos:end="217:50">num_insns</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="221:9" pos:end="223:27"><if pos:start="221:9" pos:end="223:27">if <condition pos:start="221:12" pos:end="221:68">(<expr pos:start="221:13" pos:end="221:67"><name pos:start="221:13" pos:end="221:21">num_insns</name> <operator pos:start="221:23" pos:end="221:23">+</operator> <literal type="number" pos:start="221:25" pos:end="221:25">1</literal> <operator pos:start="221:27" pos:end="221:28">==</operator> <name pos:start="221:30" pos:end="221:38">max_insns</name> <operator pos:start="221:40" pos:end="221:41">&amp;&amp;</operator> <operator pos:start="221:43" pos:end="221:43">(</operator><name pos:start="221:44" pos:end="221:53"><name pos:start="221:44" pos:end="221:45">tb</name><operator pos:start="221:46" pos:end="221:47">-&gt;</operator><name pos:start="221:48" pos:end="221:53">cflags</name></name> <operator pos:start="221:55" pos:end="221:55">&amp;</operator> <name pos:start="221:57" pos:end="221:66">CF_LAST_IO</name><operator pos:start="221:67" pos:end="221:67">)</operator></expr>)</condition><block type="pseudo" pos:start="223:13" pos:end="223:27"><block_content pos:start="223:13" pos:end="223:27">

            <expr_stmt pos:start="223:13" pos:end="223:27"><expr pos:start="223:13" pos:end="223:26"><call pos:start="223:13" pos:end="223:26"><name pos:start="223:13" pos:end="223:24">gen_io_start</name><argument_list pos:start="223:25" pos:end="223:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="227:9" pos:end="227:45"><expr pos:start="227:9" pos:end="227:44"><name pos:start="227:9" pos:end="227:14">pc_ptr</name> <operator pos:start="227:16" pos:end="227:16">=</operator> <call pos:start="227:18" pos:end="227:44"><name pos:start="227:18" pos:end="227:27">disas_insn</name><argument_list pos:start="227:28" pos:end="227:44">(<argument pos:start="227:29" pos:end="227:31"><expr pos:start="227:29" pos:end="227:31"><name pos:start="227:29" pos:end="227:31">env</name></expr></argument>, <argument pos:start="227:34" pos:end="227:35"><expr pos:start="227:34" pos:end="227:35"><name pos:start="227:34" pos:end="227:35">dc</name></expr></argument>, <argument pos:start="227:38" pos:end="227:43"><expr pos:start="227:38" pos:end="227:43"><name pos:start="227:38" pos:end="227:43">pc_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:20"><expr pos:start="229:9" pos:end="229:19"><name pos:start="229:9" pos:end="229:17">num_insns</name><operator pos:start="229:18" pos:end="229:19">++</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="231:9" pos:end="231:43">/* stop translation if indicated */</comment>

        <if_stmt pos:start="233:9" pos:end="235:18"><if pos:start="233:9" pos:end="235:18">if <condition pos:start="233:12" pos:end="233:23">(<expr pos:start="233:13" pos:end="233:22"><name pos:start="233:13" pos:end="233:22"><name pos:start="233:13" pos:end="233:14">dc</name><operator pos:start="233:15" pos:end="233:16">-&gt;</operator><name pos:start="233:17" pos:end="233:22">is_jmp</name></name></expr>)</condition><block type="pseudo" pos:start="235:13" pos:end="235:18"><block_content pos:start="235:13" pos:end="235:18">

            <break pos:start="235:13" pos:end="235:18">break;</break></block_content></block></if></if_stmt>

        <comment type="block" pos:start="237:9" pos:end="239:35">/* if single step mode, we generate only one instruction and

           generate an exception */</comment>

        <comment type="block" pos:start="241:9" pos:end="245:33">/* if irq were inhibited with HF_INHIBIT_IRQ_MASK, we clear

           the flag and abort the translation to give the irqs a

           change to be happen */</comment>

        <if_stmt pos:start="247:9" pos:end="257:9"><if pos:start="247:9" pos:end="257:9">if <condition pos:start="247:12" pos:end="249:42">(<expr pos:start="247:13" pos:end="249:41"><name pos:start="247:13" pos:end="247:18"><name pos:start="247:13" pos:end="247:14">dc</name><operator pos:start="247:15" pos:end="247:16">-&gt;</operator><name pos:start="247:17" pos:end="247:18">tf</name></name> <operator pos:start="247:20" pos:end="247:21">||</operator> <name pos:start="247:23" pos:end="247:44"><name pos:start="247:23" pos:end="247:24">dc</name><operator pos:start="247:25" pos:end="247:26">-&gt;</operator><name pos:start="247:27" pos:end="247:44">singlestep_enabled</name></name> <operator pos:start="247:46" pos:end="247:47">||</operator>

            <operator pos:start="249:13" pos:end="249:13">(</operator><name pos:start="249:14" pos:end="249:18">flags</name> <operator pos:start="249:20" pos:end="249:20">&amp;</operator> <name pos:start="249:22" pos:end="249:40">HF_INHIBIT_IRQ_MASK</name><operator pos:start="249:41" pos:end="249:41">)</operator></expr>)</condition> <block pos:start="249:44" pos:end="257:9">{<block_content pos:start="251:13" pos:end="255:18">

            <expr_stmt pos:start="251:13" pos:end="251:45"><expr pos:start="251:13" pos:end="251:44"><call pos:start="251:13" pos:end="251:44"><name pos:start="251:13" pos:end="251:22">gen_jmp_im</name><argument_list pos:start="251:23" pos:end="251:44">(<argument pos:start="251:24" pos:end="251:43"><expr pos:start="251:24" pos:end="251:43"><name pos:start="251:24" pos:end="251:29">pc_ptr</name> <operator pos:start="251:31" pos:end="251:31">-</operator> <name pos:start="251:33" pos:end="251:43"><name pos:start="251:33" pos:end="251:34">dc</name><operator pos:start="251:35" pos:end="251:36">-&gt;</operator><name pos:start="251:37" pos:end="251:43">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:24"><expr pos:start="253:13" pos:end="253:23"><call pos:start="253:13" pos:end="253:23"><name pos:start="253:13" pos:end="253:19">gen_eob</name><argument_list pos:start="253:20" pos:end="253:23">(<argument pos:start="253:21" pos:end="253:22"><expr pos:start="253:21" pos:end="253:22"><name pos:start="253:21" pos:end="253:22">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="255:13" pos:end="255:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="259:9" pos:end="259:58">/* if too long translation, stop generation too */</comment>

        <if_stmt pos:start="261:9" pos:end="273:9"><if pos:start="261:9" pos:end="273:9">if <condition pos:start="261:12" pos:end="265:35">(<expr pos:start="261:13" pos:end="265:34"><name pos:start="261:13" pos:end="261:31"><name pos:start="261:13" pos:end="261:19">tcg_ctx</name><operator pos:start="261:20" pos:end="261:20">.</operator><name pos:start="261:21" pos:end="261:31">gen_opc_ptr</name></name> <operator pos:start="261:33" pos:end="261:34">&gt;=</operator> <name pos:start="261:36" pos:end="261:46">gen_opc_end</name> <operator pos:start="261:48" pos:end="261:49">||</operator>

            <operator pos:start="263:13" pos:end="263:13">(</operator><name pos:start="263:14" pos:end="263:19">pc_ptr</name> <operator pos:start="263:21" pos:end="263:21">-</operator> <name pos:start="263:23" pos:end="263:30">pc_start</name><operator pos:start="263:31" pos:end="263:31">)</operator> <operator pos:start="263:33" pos:end="263:34">&gt;=</operator> <operator pos:start="263:36" pos:end="263:36">(</operator><name pos:start="263:37" pos:end="263:52">TARGET_PAGE_SIZE</name> <operator pos:start="263:54" pos:end="263:54">-</operator> <literal type="number" pos:start="263:56" pos:end="263:57">32</literal><operator pos:start="263:58" pos:end="263:58">)</operator> <operator pos:start="263:60" pos:end="263:61">||</operator>

            <name pos:start="265:13" pos:end="265:21">num_insns</name> <operator pos:start="265:23" pos:end="265:24">&gt;=</operator> <name pos:start="265:26" pos:end="265:34">max_insns</name></expr>)</condition> <block pos:start="265:37" pos:end="273:9">{<block_content pos:start="267:13" pos:end="271:18">

            <expr_stmt pos:start="267:13" pos:end="267:45"><expr pos:start="267:13" pos:end="267:44"><call pos:start="267:13" pos:end="267:44"><name pos:start="267:13" pos:end="267:22">gen_jmp_im</name><argument_list pos:start="267:23" pos:end="267:44">(<argument pos:start="267:24" pos:end="267:43"><expr pos:start="267:24" pos:end="267:43"><name pos:start="267:24" pos:end="267:29">pc_ptr</name> <operator pos:start="267:31" pos:end="267:31">-</operator> <name pos:start="267:33" pos:end="267:43"><name pos:start="267:33" pos:end="267:34">dc</name><operator pos:start="267:35" pos:end="267:36">-&gt;</operator><name pos:start="267:37" pos:end="267:43">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:24"><expr pos:start="269:13" pos:end="269:23"><call pos:start="269:13" pos:end="269:23"><name pos:start="269:13" pos:end="269:19">gen_eob</name><argument_list pos:start="269:20" pos:end="269:23">(<argument pos:start="269:21" pos:end="269:22"><expr pos:start="269:21" pos:end="269:22"><name pos:start="269:21" pos:end="269:22">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="271:13" pos:end="271:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="275:9" pos:end="283:9"><if pos:start="275:9" pos:end="283:9">if <condition pos:start="275:12" pos:end="275:23">(<expr pos:start="275:13" pos:end="275:22"><name pos:start="275:13" pos:end="275:22">singlestep</name></expr>)</condition> <block pos:start="275:25" pos:end="283:9">{<block_content pos:start="277:13" pos:end="281:18">

            <expr_stmt pos:start="277:13" pos:end="277:45"><expr pos:start="277:13" pos:end="277:44"><call pos:start="277:13" pos:end="277:44"><name pos:start="277:13" pos:end="277:22">gen_jmp_im</name><argument_list pos:start="277:23" pos:end="277:44">(<argument pos:start="277:24" pos:end="277:43"><expr pos:start="277:24" pos:end="277:43"><name pos:start="277:24" pos:end="277:29">pc_ptr</name> <operator pos:start="277:31" pos:end="277:31">-</operator> <name pos:start="277:33" pos:end="277:43"><name pos:start="277:33" pos:end="277:34">dc</name><operator pos:start="277:35" pos:end="277:36">-&gt;</operator><name pos:start="277:37" pos:end="277:43">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:24"><expr pos:start="279:13" pos:end="279:23"><call pos:start="279:13" pos:end="279:23"><name pos:start="279:13" pos:end="279:19">gen_eob</name><argument_list pos:start="279:20" pos:end="279:23">(<argument pos:start="279:21" pos:end="279:22"><expr pos:start="279:21" pos:end="279:22"><name pos:start="279:21" pos:end="279:22">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="281:13" pos:end="281:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="287:5" pos:end="289:21"><if pos:start="287:5" pos:end="289:21">if <condition pos:start="287:8" pos:end="287:32">(<expr pos:start="287:9" pos:end="287:31"><name pos:start="287:9" pos:end="287:18"><name pos:start="287:9" pos:end="287:10">tb</name><operator pos:start="287:11" pos:end="287:12">-&gt;</operator><name pos:start="287:13" pos:end="287:18">cflags</name></name> <operator pos:start="287:20" pos:end="287:20">&amp;</operator> <name pos:start="287:22" pos:end="287:31">CF_LAST_IO</name></expr>)</condition><block type="pseudo" pos:start="289:9" pos:end="289:21"><block_content pos:start="289:9" pos:end="289:21">

        <expr_stmt pos:start="289:9" pos:end="289:21"><expr pos:start="289:9" pos:end="289:20"><call pos:start="289:9" pos:end="289:20"><name pos:start="289:9" pos:end="289:18">gen_io_end</name><argument_list pos:start="289:19" pos:end="289:20">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:30"><expr pos:start="291:5" pos:end="291:29"><call pos:start="291:5" pos:end="291:29"><name pos:start="291:5" pos:end="291:14">gen_tb_end</name><argument_list pos:start="291:15" pos:end="291:29">(<argument pos:start="291:16" pos:end="291:17"><expr pos:start="291:16" pos:end="291:17"><name pos:start="291:16" pos:end="291:17">tb</name></expr></argument>, <argument pos:start="291:20" pos:end="291:28"><expr pos:start="291:20" pos:end="291:28"><name pos:start="291:20" pos:end="291:28">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="293:5" pos:end="293:40"><expr pos:start="293:5" pos:end="293:39"><operator pos:start="293:5" pos:end="293:5">*</operator><name pos:start="293:6" pos:end="293:24"><name pos:start="293:6" pos:end="293:12">tcg_ctx</name><operator pos:start="293:13" pos:end="293:13">.</operator><name pos:start="293:14" pos:end="293:24">gen_opc_ptr</name></name> <operator pos:start="293:26" pos:end="293:26">=</operator> <name pos:start="293:28" pos:end="293:39">INDEX_op_end</name></expr>;</expr_stmt>

    <comment type="block" pos:start="295:5" pos:end="295:49">/* we don't forget to fill the last values */</comment>

    <if_stmt pos:start="297:5" pos:end="312:0"><if pos:start="297:5" pos:end="312:0">if <condition pos:start="297:8" pos:end="297:18">(<expr pos:start="297:9" pos:end="297:17"><name pos:start="297:9" pos:end="297:17">search_pc</name></expr>)</condition> <block pos:start="297:20" pos:end="312:0">{<block_content pos:start="299:9" pos:end="305:50">

        <expr_stmt pos:start="299:9" pos:end="299:54"><expr pos:start="299:9" pos:end="299:53"><name pos:start="299:9" pos:end="299:9">j</name> <operator pos:start="299:11" pos:end="299:11">=</operator> <name pos:start="299:13" pos:end="299:31"><name pos:start="299:13" pos:end="299:19">tcg_ctx</name><operator pos:start="299:20" pos:end="299:20">.</operator><name pos:start="299:21" pos:end="299:31">gen_opc_ptr</name></name> <operator pos:start="299:33" pos:end="299:33">-</operator> <name pos:start="299:35" pos:end="299:53"><name pos:start="299:35" pos:end="299:41">tcg_ctx</name><operator pos:start="299:42" pos:end="299:42">.</operator><name pos:start="299:43" pos:end="299:53">gen_opc_buf</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:13"><expr pos:start="301:9" pos:end="301:12"><name pos:start="301:9" pos:end="301:10">lj</name><operator pos:start="301:11" pos:end="301:12">++</operator></expr>;</expr_stmt>

        <while pos:start="303:9" pos:end="305:50">while <condition pos:start="303:15" pos:end="303:23">(<expr pos:start="303:16" pos:end="303:22"><name pos:start="303:16" pos:end="303:17">lj</name> <operator pos:start="303:19" pos:end="303:20">&lt;=</operator> <name pos:start="303:22" pos:end="303:22">j</name></expr>)</condition><block type="pseudo" pos:start="305:13" pos:end="305:50"><block_content pos:start="305:13" pos:end="305:50">

            <expr_stmt pos:start="305:13" pos:end="305:50"><expr pos:start="305:13" pos:end="305:49"><name pos:start="305:13" pos:end="305:45"><name pos:start="305:13" pos:end="305:19">tcg_ctx</name><operator pos:start="305:20" pos:end="305:20">.</operator><name pos:start="305:21" pos:end="305:39">gen_opc_instr_start</name><index pos:start="305:40" pos:end="305:45">[<expr pos:start="305:41" pos:end="305:44"><name pos:start="305:41" pos:end="305:42">lj</name><operator pos:start="305:43" pos:end="305:44">++</operator></expr>]</index></name> <operator pos:start="305:47" pos:end="305:47">=</operator> <literal type="number" pos:start="305:49" pos:end="305:49">0</literal></expr>;</expr_stmt></block_content></block></while>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="311:1" pos:end="311:18">#<cpp:directive pos:start="311:2" pos:end="311:6">ifdef</cpp:directive> <name pos:start="311:8" pos:end="311:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="313:5" pos:end="340:0"><if pos:start="313:5" pos:end="340:0">if <condition pos:start="313:8" pos:end="313:46">(<expr pos:start="313:9" pos:end="313:45"><call pos:start="313:9" pos:end="313:45"><name pos:start="313:9" pos:end="313:26">qemu_loglevel_mask</name><argument_list pos:start="313:27" pos:end="313:45">(<argument pos:start="313:28" pos:end="313:44"><expr pos:start="313:28" pos:end="313:44"><name pos:start="313:28" pos:end="313:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="313:48" pos:end="340:0">{<block_content pos:start="315:9" pos:end="335:23">

        <decl_stmt pos:start="315:9" pos:end="315:24"><decl pos:start="315:9" pos:end="315:23"><type pos:start="315:9" pos:end="315:11"><name pos:start="315:9" pos:end="315:11">int</name></type> <name pos:start="315:13" pos:end="315:23">disas_flags</name></decl>;</decl_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:39"><expr pos:start="317:9" pos:end="317:38"><call pos:start="317:9" pos:end="317:38"><name pos:start="317:9" pos:end="317:16">qemu_log</name><argument_list pos:start="317:17" pos:end="317:38">(<argument pos:start="317:18" pos:end="317:37"><expr pos:start="317:18" pos:end="317:37"><literal type="string" pos:start="317:18" pos:end="317:37">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="322:0"><expr pos:start="319:9" pos:end="319:53"><call pos:start="319:9" pos:end="319:53"><name pos:start="319:9" pos:end="319:16">qemu_log</name><argument_list pos:start="319:17" pos:end="319:53">(<argument pos:start="319:18" pos:end="319:27"><expr pos:start="319:18" pos:end="319:27"><literal type="string" pos:start="319:18" pos:end="319:27">"IN: %s\n"</literal></expr></argument>, <argument pos:start="319:30" pos:end="319:52"><expr pos:start="319:30" pos:end="319:52"><call pos:start="319:30" pos:end="319:52"><name pos:start="319:30" pos:end="319:42">lookup_symbol</name><argument_list pos:start="319:43" pos:end="319:52">(<argument pos:start="319:44" pos:end="319:51"><expr pos:start="319:44" pos:end="319:51"><name pos:start="319:44" pos:end="319:51">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="321:1" pos:end="321:20">#<cpp:directive pos:start="321:2" pos:end="321:6">ifdef</cpp:directive> <name pos:start="321:8" pos:end="321:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="323:9" pos:end="331:38"><if pos:start="323:9" pos:end="325:28">if <condition pos:start="323:12" pos:end="323:23">(<expr pos:start="323:13" pos:end="323:22"><name pos:start="323:13" pos:end="323:22"><name pos:start="323:13" pos:end="323:14">dc</name><operator pos:start="323:15" pos:end="323:16">-&gt;</operator><name pos:start="323:17" pos:end="323:22">code64</name></name></expr>)</condition><block type="pseudo" pos:start="325:13" pos:end="325:28"><block_content pos:start="325:13" pos:end="325:28">

            <expr_stmt pos:start="325:13" pos:end="325:28"><expr pos:start="325:13" pos:end="325:27"><name pos:start="325:13" pos:end="325:23">disas_flags</name> <operator pos:start="325:25" pos:end="325:25">=</operator> <literal type="number" pos:start="325:27" pos:end="325:27">2</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="327:9" pos:end="331:38">else<block type="pseudo" pos:start="331:13" pos:end="331:38"><block_content pos:start="331:13" pos:end="331:38">

<cpp:endif pos:start="329:1" pos:end="329:6">#<cpp:directive pos:start="329:2" pos:end="329:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="331:13" pos:end="331:38"><expr pos:start="331:13" pos:end="331:37"><name pos:start="331:13" pos:end="331:23">disas_flags</name> <operator pos:start="331:25" pos:end="331:25">=</operator> <operator pos:start="331:27" pos:end="331:27">!</operator><name pos:start="331:28" pos:end="331:37"><name pos:start="331:28" pos:end="331:29">dc</name><operator pos:start="331:30" pos:end="331:31">-&gt;</operator><name pos:start="331:32" pos:end="331:37">code32</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:72"><expr pos:start="333:9" pos:end="333:71"><call pos:start="333:9" pos:end="333:71"><name pos:start="333:9" pos:end="333:24">log_target_disas</name><argument_list pos:start="333:25" pos:end="333:71">(<argument pos:start="333:26" pos:end="333:28"><expr pos:start="333:26" pos:end="333:28"><name pos:start="333:26" pos:end="333:28">env</name></expr></argument>, <argument pos:start="333:31" pos:end="333:38"><expr pos:start="333:31" pos:end="333:38"><name pos:start="333:31" pos:end="333:38">pc_start</name></expr></argument>, <argument pos:start="333:41" pos:end="333:57"><expr pos:start="333:41" pos:end="333:57"><name pos:start="333:41" pos:end="333:46">pc_ptr</name> <operator pos:start="333:48" pos:end="333:48">-</operator> <name pos:start="333:50" pos:end="333:57">pc_start</name></expr></argument>, <argument pos:start="333:60" pos:end="333:70"><expr pos:start="333:60" pos:end="333:70"><name pos:start="333:60" pos:end="333:70">disas_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="335:9" pos:end="335:23"><expr pos:start="335:9" pos:end="335:22"><call pos:start="335:9" pos:end="335:22"><name pos:start="335:9" pos:end="335:16">qemu_log</name><argument_list pos:start="335:17" pos:end="335:22">(<argument pos:start="335:18" pos:end="335:21"><expr pos:start="335:18" pos:end="335:21"><literal type="string" pos:start="335:18" pos:end="335:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="339:1" pos:end="339:6">#<cpp:directive pos:start="339:2" pos:end="339:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="343:5" pos:end="349:5"><if pos:start="343:5" pos:end="349:5">if <condition pos:start="343:8" pos:end="343:19">(<expr pos:start="343:9" pos:end="343:18"><operator pos:start="343:9" pos:end="343:9">!</operator><name pos:start="343:10" pos:end="343:18">search_pc</name></expr>)</condition> <block pos:start="343:21" pos:end="349:5">{<block_content pos:start="345:9" pos:end="347:31">

        <expr_stmt pos:start="345:9" pos:end="345:37"><expr pos:start="345:9" pos:end="345:36"><name pos:start="345:9" pos:end="345:16"><name pos:start="345:9" pos:end="345:10">tb</name><operator pos:start="345:11" pos:end="345:12">-&gt;</operator><name pos:start="345:13" pos:end="345:16">size</name></name> <operator pos:start="345:18" pos:end="345:18">=</operator> <name pos:start="345:20" pos:end="345:25">pc_ptr</name> <operator pos:start="345:27" pos:end="345:27">-</operator> <name pos:start="345:29" pos:end="345:36">pc_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="347:9" pos:end="347:31"><expr pos:start="347:9" pos:end="347:30"><name pos:start="347:9" pos:end="347:18"><name pos:start="347:9" pos:end="347:10">tb</name><operator pos:start="347:11" pos:end="347:12">-&gt;</operator><name pos:start="347:13" pos:end="347:18">icount</name></name> <operator pos:start="347:20" pos:end="347:20">=</operator> <name pos:start="347:22" pos:end="347:30">num_insns</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
