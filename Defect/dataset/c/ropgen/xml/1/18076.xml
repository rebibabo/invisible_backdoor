<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18076.c" pos:tabs="8"><function pos:start="1:1" pos:end="100:15"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">long</name></type> <name pos:start="1:6" pos:end="1:26">vnc_client_write_sasl</name><parameter_list pos:start="1:27" pos:end="1:40">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:37"><name pos:start="1:28" pos:end="1:35">VncState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">vs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="100:15">{<block_content pos:start="5:5" pos:end="100:15">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">long</name></type> <name pos:start="5:10" pos:end="5:12">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="15:80"><expr pos:start="9:5" pos:end="15:79"><call pos:start="9:5" pos:end="15:79"><name pos:start="9:5" pos:end="9:13">VNC_DEBUG</name><argument_list pos:start="9:14" pos:end="15:79">(<argument pos:start="9:15" pos:end="11:47"><expr pos:start="9:15" pos:end="11:47"><literal type="string" pos:start="9:15" pos:end="9:66">"Write SASL: Pending output %p size %zd offset %zd "</literal>

              <literal type="string" pos:start="11:15" pos:end="11:47">"Encoded: %p size %d offset %d\n"</literal></expr></argument>,

              <argument pos:start="13:15" pos:end="13:31"><expr pos:start="13:15" pos:end="13:31"><name pos:start="13:15" pos:end="13:31"><name pos:start="13:15" pos:end="13:16">vs</name><operator pos:start="13:17" pos:end="13:18">-&gt;</operator><name pos:start="13:19" pos:end="13:24">output</name><operator pos:start="13:25" pos:end="13:25">.</operator><name pos:start="13:26" pos:end="13:31">buffer</name></name></expr></argument>, <argument pos:start="13:34" pos:end="13:52"><expr pos:start="13:34" pos:end="13:52"><name pos:start="13:34" pos:end="13:52"><name pos:start="13:34" pos:end="13:35">vs</name><operator pos:start="13:36" pos:end="13:37">-&gt;</operator><name pos:start="13:38" pos:end="13:43">output</name><operator pos:start="13:44" pos:end="13:44">.</operator><name pos:start="13:45" pos:end="13:52">capacity</name></name></expr></argument>, <argument pos:start="13:55" pos:end="13:71"><expr pos:start="13:55" pos:end="13:71"><name pos:start="13:55" pos:end="13:71"><name pos:start="13:55" pos:end="13:56">vs</name><operator pos:start="13:57" pos:end="13:58">-&gt;</operator><name pos:start="13:59" pos:end="13:64">output</name><operator pos:start="13:65" pos:end="13:65">.</operator><name pos:start="13:66" pos:end="13:71">offset</name></name></expr></argument>,

              <argument pos:start="15:15" pos:end="15:30"><expr pos:start="15:15" pos:end="15:30"><name pos:start="15:15" pos:end="15:30"><name pos:start="15:15" pos:end="15:16">vs</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:22">sasl</name><operator pos:start="15:23" pos:end="15:23">.</operator><name pos:start="15:24" pos:end="15:30">encoded</name></name></expr></argument>, <argument pos:start="15:33" pos:end="15:54"><expr pos:start="15:33" pos:end="15:54"><name pos:start="15:33" pos:end="15:54"><name pos:start="15:33" pos:end="15:34">vs</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:40">sasl</name><operator pos:start="15:41" pos:end="15:41">.</operator><name pos:start="15:42" pos:end="15:54">encodedLength</name></name></expr></argument>, <argument pos:start="15:57" pos:end="15:78"><expr pos:start="15:57" pos:end="15:78"><name pos:start="15:57" pos:end="15:78"><name pos:start="15:57" pos:end="15:58">vs</name><operator pos:start="15:59" pos:end="15:60">-&gt;</operator><name pos:start="15:61" pos:end="15:64">sasl</name><operator pos:start="15:65" pos:end="15:65">.</operator><name pos:start="15:66" pos:end="15:78">encodedOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="100:15"><if pos:start="19:5" pos:end="100:15">if <condition pos:start="19:8" pos:end="19:26">(<expr pos:start="19:9" pos:end="19:25"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:25"><name pos:start="19:10" pos:end="19:11">vs</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:17">sasl</name><operator pos:start="19:18" pos:end="19:18">.</operator><name pos:start="19:19" pos:end="19:25">encoded</name></name></expr>)</condition> <block pos:start="19:28" pos:end="100:15">{<block_content pos:start="21:9" pos:end="100:15">

        <decl_stmt pos:start="21:9" pos:end="21:16"><decl pos:start="21:9" pos:end="21:15"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:15">err</name></decl>;</decl_stmt>

        <expr_stmt pos:start="23:9" pos:end="31:51"><expr pos:start="23:9" pos:end="31:50"><name pos:start="23:9" pos:end="23:11">err</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="31:50"><name pos:start="23:15" pos:end="23:25">sasl_encode</name><argument_list pos:start="23:26" pos:end="31:50">(<argument pos:start="23:27" pos:end="23:39"><expr pos:start="23:27" pos:end="23:39"><name pos:start="23:27" pos:end="23:39"><name pos:start="23:27" pos:end="23:28">vs</name><operator pos:start="23:29" pos:end="23:30">-&gt;</operator><name pos:start="23:31" pos:end="23:34">sasl</name><operator pos:start="23:35" pos:end="23:35">.</operator><name pos:start="23:36" pos:end="23:39">conn</name></name></expr></argument>,

                          <argument pos:start="25:27" pos:end="25:51"><expr pos:start="25:27" pos:end="25:51"><operator pos:start="25:27" pos:end="25:27">(</operator><name pos:start="25:28" pos:end="25:31">char</name> <operator pos:start="25:33" pos:end="25:33">*</operator><operator pos:start="25:34" pos:end="25:34">)</operator><name pos:start="25:35" pos:end="25:51"><name pos:start="25:35" pos:end="25:36">vs</name><operator pos:start="25:37" pos:end="25:38">-&gt;</operator><name pos:start="25:39" pos:end="25:44">output</name><operator pos:start="25:45" pos:end="25:45">.</operator><name pos:start="25:46" pos:end="25:51">buffer</name></name></expr></argument>,

                          <argument pos:start="27:27" pos:end="27:43"><expr pos:start="27:27" pos:end="27:43"><name pos:start="27:27" pos:end="27:43"><name pos:start="27:27" pos:end="27:28">vs</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:36">output</name><operator pos:start="27:37" pos:end="27:37">.</operator><name pos:start="27:38" pos:end="27:43">offset</name></name></expr></argument>,

                          <argument pos:start="29:27" pos:end="29:58"><expr pos:start="29:27" pos:end="29:58"><operator pos:start="29:27" pos:end="29:27">(</operator><specifier pos:start="29:28" pos:end="29:32">const</specifier> <name pos:start="29:34" pos:end="29:37">char</name> <operator pos:start="29:39" pos:end="29:39">*</operator><operator pos:start="29:40" pos:end="29:40">*</operator><operator pos:start="29:41" pos:end="29:41">)</operator><operator pos:start="29:42" pos:end="29:42">&amp;</operator><name pos:start="29:43" pos:end="29:58"><name pos:start="29:43" pos:end="29:44">vs</name><operator pos:start="29:45" pos:end="29:46">-&gt;</operator><name pos:start="29:47" pos:end="29:50">sasl</name><operator pos:start="29:51" pos:end="29:51">.</operator><name pos:start="29:52" pos:end="29:58">encoded</name></name></expr></argument>,

                          <argument pos:start="31:27" pos:end="31:49"><expr pos:start="31:27" pos:end="31:49"><operator pos:start="31:27" pos:end="31:27">&amp;</operator><name pos:start="31:28" pos:end="31:49"><name pos:start="31:28" pos:end="31:29">vs</name><operator pos:start="31:30" pos:end="31:31">-&gt;</operator><name pos:start="31:32" pos:end="31:35">sasl</name><operator pos:start="31:36" pos:end="31:36">.</operator><name pos:start="31:37" pos:end="31:49">encodedLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="35:53"><if pos:start="33:9" pos:end="35:53">if <condition pos:start="33:12" pos:end="33:27">(<expr pos:start="33:13" pos:end="33:26"><name pos:start="33:13" pos:end="33:15">err</name> <operator pos:start="33:17" pos:end="33:18">!=</operator> <name pos:start="33:20" pos:end="33:26">SASL_OK</name></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:53"><block_content pos:start="35:13" pos:end="35:53">

            <return pos:start="35:13" pos:end="35:53">return <expr pos:start="35:20" pos:end="35:52"><call pos:start="35:20" pos:end="35:52"><name pos:start="35:20" pos:end="35:38">vnc_client_io_error</name><argument_list pos:start="35:39" pos:end="35:52">(<argument pos:start="35:40" pos:end="35:41"><expr pos:start="35:40" pos:end="35:41"><name pos:start="35:40" pos:end="35:41">vs</name></expr></argument>, <argument pos:start="35:44" pos:end="35:45"><expr pos:start="35:44" pos:end="35:45"><operator pos:start="35:44" pos:end="35:44">-</operator><literal type="number" pos:start="35:45" pos:end="35:45">1</literal></expr></argument>, <argument pos:start="35:48" pos:end="35:51"><expr pos:start="35:48" pos:end="35:51"><name pos:start="35:48" pos:end="35:51">NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:54"><expr pos:start="39:9" pos:end="39:53"><name pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:10">vs</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:16">sasl</name><operator pos:start="39:17" pos:end="39:17">.</operator><name pos:start="39:18" pos:end="39:33">encodedRawLength</name></name> <operator pos:start="39:35" pos:end="39:35">=</operator> <name pos:start="39:37" pos:end="39:53"><name pos:start="39:37" pos:end="39:38">vs</name><operator pos:start="39:39" pos:end="39:40">-&gt;</operator><name pos:start="39:41" pos:end="39:46">output</name><operator pos:start="39:47" pos:end="39:47">.</operator><name pos:start="39:48" pos:end="39:53">offset</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:35"><expr pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:30"><name pos:start="41:9" pos:end="41:10">vs</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:16">sasl</name><operator pos:start="41:17" pos:end="41:17">.</operator><name pos:start="41:18" pos:end="41:30">encodedOffset</name></name> <operator pos:start="41:32" pos:end="41:32">=</operator> <literal type="number" pos:start="41:34" pos:end="41:34">0</literal></expr>;</expr_stmt>




    <expr_stmt pos:start="46:5" pos:end="50:80"><expr pos:start="46:5" pos:end="50:79"><name pos:start="46:5" pos:end="46:7">ret</name> <operator pos:start="46:9" pos:end="46:9">=</operator> <call pos:start="46:11" pos:end="50:79"><name pos:start="46:11" pos:end="46:30">vnc_client_write_buf</name><argument_list pos:start="46:31" pos:end="50:79">(<argument pos:start="46:32" pos:end="46:33"><expr pos:start="46:32" pos:end="46:33"><name pos:start="46:32" pos:end="46:33">vs</name></expr></argument>,

                               <argument pos:start="48:32" pos:end="48:72"><expr pos:start="48:32" pos:end="48:72"><name pos:start="48:32" pos:end="48:47"><name pos:start="48:32" pos:end="48:33">vs</name><operator pos:start="48:34" pos:end="48:35">-&gt;</operator><name pos:start="48:36" pos:end="48:39">sasl</name><operator pos:start="48:40" pos:end="48:40">.</operator><name pos:start="48:41" pos:end="48:47">encoded</name></name> <operator pos:start="48:49" pos:end="48:49">+</operator> <name pos:start="48:51" pos:end="48:72"><name pos:start="48:51" pos:end="48:52">vs</name><operator pos:start="48:53" pos:end="48:54">-&gt;</operator><name pos:start="48:55" pos:end="48:58">sasl</name><operator pos:start="48:59" pos:end="48:59">.</operator><name pos:start="48:60" pos:end="48:72">encodedOffset</name></name></expr></argument>,

                               <argument pos:start="50:32" pos:end="50:78"><expr pos:start="50:32" pos:end="50:78"><name pos:start="50:32" pos:end="50:53"><name pos:start="50:32" pos:end="50:33">vs</name><operator pos:start="50:34" pos:end="50:35">-&gt;</operator><name pos:start="50:36" pos:end="50:39">sasl</name><operator pos:start="50:40" pos:end="50:40">.</operator><name pos:start="50:41" pos:end="50:53">encodedLength</name></name> <operator pos:start="50:55" pos:end="50:55">-</operator> <name pos:start="50:57" pos:end="50:78"><name pos:start="50:57" pos:end="50:58">vs</name><operator pos:start="50:59" pos:end="50:60">-&gt;</operator><name pos:start="50:61" pos:end="50:64">sasl</name><operator pos:start="50:65" pos:end="50:65">.</operator><name pos:start="50:66" pos:end="50:78">encodedOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="52:5" pos:end="54:17"><if pos:start="52:5" pos:end="54:17">if <condition pos:start="52:8" pos:end="52:13">(<expr pos:start="52:9" pos:end="52:12"><operator pos:start="52:9" pos:end="52:9">!</operator><name pos:start="52:10" pos:end="52:12">ret</name></expr>)</condition><block type="pseudo" pos:start="54:9" pos:end="54:17"><block_content pos:start="54:9" pos:end="54:17">

        <return pos:start="54:9" pos:end="54:17">return <expr pos:start="54:16" pos:end="54:16"><literal type="number" pos:start="54:16" pos:end="54:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="58:5" pos:end="58:34"><expr pos:start="58:5" pos:end="58:33"><name pos:start="58:5" pos:end="58:26"><name pos:start="58:5" pos:end="58:6">vs</name><operator pos:start="58:7" pos:end="58:8">-&gt;</operator><name pos:start="58:9" pos:end="58:12">sasl</name><operator pos:start="58:13" pos:end="58:13">.</operator><name pos:start="58:14" pos:end="58:26">encodedOffset</name></name> <operator pos:start="58:28" pos:end="58:29">+=</operator> <name pos:start="58:31" pos:end="58:33">ret</name></expr>;</expr_stmt>

    <if_stmt pos:start="60:5" pos:end="100:15"><if pos:start="60:5" pos:end="100:15">if <condition pos:start="60:8" pos:end="60:57">(<expr pos:start="60:9" pos:end="60:56"><name pos:start="60:9" pos:end="60:30"><name pos:start="60:9" pos:end="60:10">vs</name><operator pos:start="60:11" pos:end="60:12">-&gt;</operator><name pos:start="60:13" pos:end="60:16">sasl</name><operator pos:start="60:17" pos:end="60:17">.</operator><name pos:start="60:18" pos:end="60:30">encodedOffset</name></name> <operator pos:start="60:32" pos:end="60:33">==</operator> <name pos:start="60:35" pos:end="60:56"><name pos:start="60:35" pos:end="60:36">vs</name><operator pos:start="60:37" pos:end="60:38">-&gt;</operator><name pos:start="60:39" pos:end="60:42">sasl</name><operator pos:start="60:43" pos:end="60:43">.</operator><name pos:start="60:44" pos:end="60:56">encodedLength</name></name></expr>)</condition> <block pos:start="60:59" pos:end="100:15">{<block_content pos:start="67:9" pos:end="100:15">






        <expr_stmt pos:start="67:9" pos:end="67:55"><expr pos:start="67:9" pos:end="67:54"><name pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:10">vs</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:18">output</name><operator pos:start="67:19" pos:end="67:19">.</operator><name pos:start="67:20" pos:end="67:25">offset</name></name> <operator pos:start="67:27" pos:end="67:28">-=</operator> <name pos:start="67:30" pos:end="67:54"><name pos:start="67:30" pos:end="67:31">vs</name><operator pos:start="67:32" pos:end="67:33">-&gt;</operator><name pos:start="67:34" pos:end="67:37">sasl</name><operator pos:start="67:38" pos:end="67:38">.</operator><name pos:start="67:39" pos:end="67:54">encodedRawLength</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:32"><expr pos:start="69:9" pos:end="69:31"><name pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:10">vs</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:16">sasl</name><operator pos:start="69:17" pos:end="69:17">.</operator><name pos:start="69:18" pos:end="69:24">encoded</name></name> <operator pos:start="69:26" pos:end="69:26">=</operator> <name pos:start="69:28" pos:end="69:31">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:60"><expr pos:start="71:9" pos:end="71:59"><name pos:start="71:9" pos:end="71:30"><name pos:start="71:9" pos:end="71:10">vs</name><operator pos:start="71:11" pos:end="71:12">-&gt;</operator><name pos:start="71:13" pos:end="71:16">sasl</name><operator pos:start="71:17" pos:end="71:17">.</operator><name pos:start="71:18" pos:end="71:30">encodedOffset</name></name> <operator pos:start="71:32" pos:end="71:32">=</operator> <name pos:start="71:34" pos:end="71:55"><name pos:start="71:34" pos:end="71:35">vs</name><operator pos:start="71:36" pos:end="71:37">-&gt;</operator><name pos:start="71:38" pos:end="71:41">sasl</name><operator pos:start="71:42" pos:end="71:42">.</operator><name pos:start="71:43" pos:end="71:55">encodedLength</name></name> <operator pos:start="71:57" pos:end="71:57">=</operator> <literal type="number" pos:start="71:59" pos:end="71:59">0</literal></expr>;</expr_stmt>




    <comment type="block" pos:start="76:5" pos:end="84:7">/* Can't merge this block with one above, because

     * someone might have written more unencrypted

     * data in vs-&gt;output while we were processing

     * SASL encoded output

     */</comment>

    <if_stmt pos:start="86:5" pos:end="100:15"><if pos:start="86:5" pos:end="100:15">if <condition pos:start="86:8" pos:end="86:31">(<expr pos:start="86:9" pos:end="86:30"><name pos:start="86:9" pos:end="86:25"><name pos:start="86:9" pos:end="86:10">vs</name><operator pos:start="86:11" pos:end="86:12">-&gt;</operator><name pos:start="86:13" pos:end="86:18">output</name><operator pos:start="86:19" pos:end="86:19">.</operator><name pos:start="86:20" pos:end="86:25">offset</name></name> <operator pos:start="86:27" pos:end="86:28">==</operator> <literal type="number" pos:start="86:30" pos:end="86:30">0</literal></expr>)</condition> <block pos:start="86:33" pos:end="100:15">{<block_content pos:start="88:9" pos:end="100:15">

        <if_stmt pos:start="88:9" pos:end="100:15"><if pos:start="88:9" pos:end="100:15">if <condition pos:start="88:12" pos:end="88:24">(<expr pos:start="88:13" pos:end="88:23"><name pos:start="88:13" pos:end="88:23"><name pos:start="88:13" pos:end="88:14">vs</name><operator pos:start="88:15" pos:end="88:16">-&gt;</operator><name pos:start="88:17" pos:end="88:23">ioc_tag</name></name></expr>)</condition> <block pos:start="88:26" pos:end="100:15">{<block_content pos:start="90:13" pos:end="100:15">

            <expr_stmt pos:start="90:13" pos:end="90:41"><expr pos:start="90:13" pos:end="90:40"><call pos:start="90:13" pos:end="90:40"><name pos:start="90:13" pos:end="90:27">g_source_remove</name><argument_list pos:start="90:28" pos:end="90:40">(<argument pos:start="90:29" pos:end="90:39"><expr pos:start="90:29" pos:end="90:39"><name pos:start="90:29" pos:end="90:39"><name pos:start="90:29" pos:end="90:30">vs</name><operator pos:start="90:31" pos:end="90:32">-&gt;</operator><name pos:start="90:33" pos:end="90:39">ioc_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <expr_stmt pos:start="93:9" pos:end="95:55"><expr pos:start="93:9" pos:end="95:54"><name pos:start="93:9" pos:end="93:19"><name pos:start="93:9" pos:end="93:10">vs</name><operator pos:start="93:11" pos:end="93:12">-&gt;</operator><name pos:start="93:13" pos:end="93:19">ioc_tag</name></name> <operator pos:start="93:21" pos:end="93:21">=</operator> <call pos:start="93:23" pos:end="95:54"><name pos:start="93:23" pos:end="93:43">qio_channel_add_watch</name><argument_list pos:start="93:44" pos:end="95:54">(

            <argument pos:start="95:13" pos:end="95:19"><expr pos:start="95:13" pos:end="95:19"><name pos:start="95:13" pos:end="95:19"><name pos:start="95:13" pos:end="95:14">vs</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:19">ioc</name></name></expr></argument>, <argument pos:start="95:22" pos:end="95:28"><expr pos:start="95:22" pos:end="95:28"><name pos:start="95:22" pos:end="95:28">G_IO_IN</name></expr></argument>, <argument pos:start="95:31" pos:end="95:43"><expr pos:start="95:31" pos:end="95:43"><name pos:start="95:31" pos:end="95:43">vnc_client_io</name></expr></argument>, <argument pos:start="95:46" pos:end="95:47"><expr pos:start="95:46" pos:end="95:47"><name pos:start="95:46" pos:end="95:47">vs</name></expr></argument>, <argument pos:start="95:50" pos:end="95:53"><expr pos:start="95:50" pos:end="95:53"><name pos:start="95:50" pos:end="95:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <return pos:start="100:5" pos:end="100:15">return <expr pos:start="100:12" pos:end="100:14"><name pos:start="100:12" pos:end="100:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
