<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1438.c" pos:tabs="8"><function pos:start="1:1" pos:end="271:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">inet_listen_saddr</name><parameter_list pos:start="1:29" pos:end="7:42">(<parameter pos:start="1:30" pos:end="1:53"><decl pos:start="1:30" pos:end="1:53"><type pos:start="1:30" pos:end="1:53"><name pos:start="1:30" pos:end="1:46">InetSocketAddress</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">saddr</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:44"><decl pos:start="3:30" pos:end="3:44"><type pos:start="3:30" pos:end="3:44"><name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:44">port_offset</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:45"><decl pos:start="5:30" pos:end="5:45"><type pos:start="5:30" pos:end="5:45"><name pos:start="5:30" pos:end="5:33">bool</name></type> <name pos:start="5:35" pos:end="5:45">update_addr</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:41"><decl pos:start="7:30" pos:end="7:41"><type pos:start="7:30" pos:end="7:41"><name pos:start="7:30" pos:end="7:34">Error</name> <modifier pos:start="7:36" pos:end="7:36">*</modifier><modifier pos:start="7:37" pos:end="7:37">*</modifier></type><name pos:start="7:38" pos:end="7:41">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="271:1">{<block_content pos:start="11:5" pos:end="269:19">

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:19">addrinfo</name></name></type> <name pos:start="11:21" pos:end="11:22">ai</name></decl>,<decl pos:start="11:24" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:19"><modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:27">res</name></decl>,<decl pos:start="11:29" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:19"><modifier pos:start="11:29" pos:end="11:29">*</modifier></type><name pos:start="11:30" pos:end="11:30">e</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:17"><name pos:start="13:10" pos:end="13:13">port</name><index pos:start="13:14" pos:end="13:17">[<expr pos:start="13:15" pos:end="13:16"><literal type="number" pos:start="13:15" pos:end="13:16">33</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:35"><decl pos:start="15:5" pos:end="15:34"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:34"><name pos:start="15:10" pos:end="15:14">uaddr</name><index pos:start="15:15" pos:end="15:34">[<expr pos:start="15:16" pos:end="15:33"><name pos:start="15:16" pos:end="15:31">INET6_ADDRSTRLEN</name><operator pos:start="15:32" pos:end="15:32">+</operator><literal type="number" pos:start="15:33" pos:end="15:33">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:18"><name pos:start="17:10" pos:end="17:14">uport</name><index pos:start="17:15" pos:end="17:18">[<expr pos:start="17:16" pos:end="17:17"><literal type="number" pos:start="17:16" pos:end="17:17">33</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:10"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:10">rc</name></decl>, <decl pos:start="19:13" pos:end="19:20"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:13" pos:end="19:20">port_min</name></decl>, <decl pos:start="19:23" pos:end="19:30"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:23" pos:end="19:30">port_max</name></decl>, <decl pos:start="19:33" pos:end="19:33"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:33" pos:end="19:33">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:15">slisten</name> <init pos:start="21:17" pos:end="21:19">= <expr pos:start="21:19" pos:end="21:19"><literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:19">saved_errno</name> <init pos:start="23:21" pos:end="23:23">= <expr pos:start="23:23" pos:end="23:23"><literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:32"><decl pos:start="25:5" pos:end="25:31"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">bool</name></type> <name pos:start="25:10" pos:end="25:23">socket_created</name> <init pos:start="25:25" pos:end="25:31">= <expr pos:start="25:27" pos:end="25:31"><name pos:start="25:27" pos:end="25:31">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:21"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:9">Error</name> <modifier pos:start="27:11" pos:end="27:11">*</modifier></type><name pos:start="27:12" pos:end="27:14">err</name> <init pos:start="27:16" pos:end="27:21">= <expr pos:start="27:18" pos:end="27:21"><name pos:start="27:18" pos:end="27:21">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:30"><expr pos:start="31:5" pos:end="31:29"><call pos:start="31:5" pos:end="31:29"><name pos:start="31:5" pos:end="31:10">memset</name><argument_list pos:start="31:11" pos:end="31:29">(<argument pos:start="31:12" pos:end="31:14"><expr pos:start="31:12" pos:end="31:14"><operator pos:start="31:12" pos:end="31:12">&amp;</operator><name pos:start="31:13" pos:end="31:14">ai</name></expr></argument>,<argument pos:start="31:16" pos:end="31:16"><expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr></argument>, <argument pos:start="31:19" pos:end="31:28"><expr pos:start="31:19" pos:end="31:28"><sizeof pos:start="31:19" pos:end="31:28">sizeof<argument_list pos:start="31:25" pos:end="31:28">(<argument pos:start="31:26" pos:end="31:27"><expr pos:start="31:26" pos:end="31:27"><name pos:start="31:26" pos:end="31:27">ai</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:29"><expr pos:start="33:5" pos:end="33:28"><name pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:6">ai</name><operator pos:start="33:7" pos:end="33:7">.</operator><name pos:start="33:8" pos:end="33:15">ai_flags</name></name> <operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:28">AI_PASSIVE</name></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:45">(<expr pos:start="35:9" pos:end="35:44"><name pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:13">saddr</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:26">has_numeric</name></name> <operator pos:start="35:28" pos:end="35:29">&amp;&amp;</operator> <name pos:start="35:31" pos:end="35:44"><name pos:start="35:31" pos:end="35:35">saddr</name><operator pos:start="35:36" pos:end="35:37">-&gt;</operator><name pos:start="35:38" pos:end="35:44">numeric</name></name></expr>)</condition> <block pos:start="35:47" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:55">

        <expr_stmt pos:start="37:9" pos:end="37:55"><expr pos:start="37:9" pos:end="37:54"><name pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:10">ai</name><operator pos:start="37:11" pos:end="37:11">.</operator><name pos:start="37:12" pos:end="37:19">ai_flags</name></name> <operator pos:start="37:21" pos:end="37:22">|=</operator> <name pos:start="37:24" pos:end="37:37">AI_NUMERICHOST</name> <operator pos:start="37:39" pos:end="37:39">|</operator> <name pos:start="37:41" pos:end="37:54">AI_NUMERICSERV</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:60"><expr pos:start="41:5" pos:end="41:59"><name pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:6">ai</name><operator pos:start="41:7" pos:end="41:7">.</operator><name pos:start="41:8" pos:end="41:16">ai_family</name></name> <operator pos:start="41:18" pos:end="41:18">=</operator> <call pos:start="41:20" pos:end="41:59"><name pos:start="41:20" pos:end="41:46">inet_ai_family_from_address</name><argument_list pos:start="41:47" pos:end="41:59">(<argument pos:start="41:48" pos:end="41:52"><expr pos:start="41:48" pos:end="41:52"><name pos:start="41:48" pos:end="41:52">saddr</name></expr></argument>, <argument pos:start="41:55" pos:end="41:58"><expr pos:start="41:55" pos:end="41:58"><operator pos:start="41:55" pos:end="41:55">&amp;</operator><name pos:start="41:56" pos:end="41:58">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:33"><expr pos:start="43:5" pos:end="43:32"><name pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:6">ai</name><operator pos:start="43:7" pos:end="43:7">.</operator><name pos:start="43:8" pos:end="43:18">ai_socktype</name></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <name pos:start="43:22" pos:end="43:32">SOCK_STREAM</name></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:12">(<expr pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">err</name></expr>)</condition> <block pos:start="47:14" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:18">

        <expr_stmt pos:start="49:9" pos:end="49:35"><expr pos:start="49:9" pos:end="49:34"><call pos:start="49:9" pos:end="49:34"><name pos:start="49:9" pos:end="49:23">error_propagate</name><argument_list pos:start="49:24" pos:end="49:34">(<argument pos:start="49:25" pos:end="49:28"><expr pos:start="49:25" pos:end="49:28"><name pos:start="49:25" pos:end="49:28">errp</name></expr></argument>, <argument pos:start="49:31" pos:end="49:33"><expr pos:start="49:31" pos:end="49:33"><name pos:start="49:31" pos:end="49:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:18">return <expr pos:start="51:16" pos:end="51:17"><operator pos:start="51:16" pos:end="51:16">-</operator><literal type="number" pos:start="51:17" pos:end="51:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:28">(<expr pos:start="57:9" pos:end="57:27"><name pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:13">saddr</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:19">host</name></name> <operator pos:start="57:21" pos:end="57:22">==</operator> <name pos:start="57:24" pos:end="57:27">NULL</name></expr>)</condition> <block pos:start="57:30" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:18">

        <expr_stmt pos:start="59:9" pos:end="59:47"><expr pos:start="59:9" pos:end="59:46"><call pos:start="59:9" pos:end="59:46"><name pos:start="59:9" pos:end="59:18">error_setg</name><argument_list pos:start="59:19" pos:end="59:46">(<argument pos:start="59:20" pos:end="59:23"><expr pos:start="59:20" pos:end="59:23"><name pos:start="59:20" pos:end="59:23">errp</name></expr></argument>, <argument pos:start="59:26" pos:end="59:45"><expr pos:start="59:26" pos:end="59:45"><literal type="string" pos:start="59:26" pos:end="59:45">"host not specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:18">return <expr pos:start="61:16" pos:end="61:17"><operator pos:start="61:16" pos:end="61:16">-</operator><literal type="number" pos:start="61:17" pos:end="61:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:28">(<expr pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:19"><name pos:start="65:9" pos:end="65:13">saddr</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:19">port</name></name> <operator pos:start="65:21" pos:end="65:22">!=</operator> <name pos:start="65:24" pos:end="65:27">NULL</name></expr>)</condition> <block pos:start="65:30" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:49">

        <expr_stmt pos:start="67:9" pos:end="67:49"><expr pos:start="67:9" pos:end="67:48"><call pos:start="67:9" pos:end="67:48"><name pos:start="67:9" pos:end="67:15">pstrcpy</name><argument_list pos:start="67:16" pos:end="67:48">(<argument pos:start="67:17" pos:end="67:20"><expr pos:start="67:17" pos:end="67:20"><name pos:start="67:17" pos:end="67:20">port</name></expr></argument>, <argument pos:start="67:23" pos:end="67:34"><expr pos:start="67:23" pos:end="67:34"><sizeof pos:start="67:23" pos:end="67:34">sizeof<argument_list pos:start="67:29" pos:end="67:34">(<argument pos:start="67:30" pos:end="67:33"><expr pos:start="67:30" pos:end="67:33"><name pos:start="67:30" pos:end="67:33">port</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="67:37" pos:end="67:47"><expr pos:start="67:37" pos:end="67:47"><name pos:start="67:37" pos:end="67:47"><name pos:start="67:37" pos:end="67:41">saddr</name><operator pos:start="67:42" pos:end="67:43">-&gt;</operator><name pos:start="67:44" pos:end="67:47">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="69:7" pos:end="73:5">else <block pos:start="69:12" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:23">

        <expr_stmt pos:start="71:9" pos:end="71:23"><expr pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:15"><name pos:start="71:9" pos:end="71:12">port</name><index pos:start="71:13" pos:end="71:15">[<expr pos:start="71:14" pos:end="71:14"><literal type="number" pos:start="71:14" pos:end="71:14">0</literal></expr>]</index></name> <operator pos:start="71:17" pos:end="71:17">=</operator> <literal type="char" pos:start="71:19" pos:end="71:22">'\0'</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:16">/* lookup */</comment>

    <if_stmt pos:start="79:5" pos:end="111:5"><if pos:start="79:5" pos:end="111:5">if <condition pos:start="79:8" pos:end="79:20">(<expr pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:19">port_offset</name></expr>)</condition> <block pos:start="79:22" pos:end="111:5">{<block_content pos:start="81:9" pos:end="109:72">

        <decl_stmt pos:start="81:9" pos:end="81:36"><decl pos:start="81:9" pos:end="81:35"><type pos:start="81:9" pos:end="81:26"><name pos:start="81:9" pos:end="81:16">unsigned</name> <name pos:start="81:18" pos:end="81:21">long</name> <name pos:start="81:23" pos:end="81:26">long</name></type> <name pos:start="81:28" pos:end="81:35">baseport</name></decl>;</decl_stmt>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:30">(<expr pos:start="83:13" pos:end="83:29"><call pos:start="83:13" pos:end="83:24"><name pos:start="83:13" pos:end="83:18">strlen</name><argument_list pos:start="83:19" pos:end="83:24">(<argument pos:start="83:20" pos:end="83:23"><expr pos:start="83:20" pos:end="83:23"><name pos:start="83:20" pos:end="83:23">port</name></expr></argument>)</argument_list></call> <operator pos:start="83:26" pos:end="83:27">==</operator> <literal type="number" pos:start="83:29" pos:end="83:29">0</literal></expr>)</condition> <block pos:start="83:32" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:22">

            <expr_stmt pos:start="85:13" pos:end="85:51"><expr pos:start="85:13" pos:end="85:50"><call pos:start="85:13" pos:end="85:50"><name pos:start="85:13" pos:end="85:22">error_setg</name><argument_list pos:start="85:23" pos:end="85:50">(<argument pos:start="85:24" pos:end="85:27"><expr pos:start="85:24" pos:end="85:27"><name pos:start="85:24" pos:end="85:27">errp</name></expr></argument>, <argument pos:start="85:30" pos:end="85:49"><expr pos:start="85:30" pos:end="85:49"><literal type="string" pos:start="85:30" pos:end="85:49">"port not specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:22">return <expr pos:start="87:20" pos:end="87:21"><operator pos:start="87:20" pos:end="87:20">-</operator><literal type="number" pos:start="87:21" pos:end="87:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:53">(<expr pos:start="91:13" pos:end="91:52"><call pos:start="91:13" pos:end="91:48"><name pos:start="91:13" pos:end="91:27">parse_uint_full</name><argument_list pos:start="91:28" pos:end="91:48">(<argument pos:start="91:29" pos:end="91:32"><expr pos:start="91:29" pos:end="91:32"><name pos:start="91:29" pos:end="91:32">port</name></expr></argument>, <argument pos:start="91:35" pos:end="91:43"><expr pos:start="91:35" pos:end="91:43"><operator pos:start="91:35" pos:end="91:35">&amp;</operator><name pos:start="91:36" pos:end="91:43">baseport</name></expr></argument>, <argument pos:start="91:46" pos:end="91:47"><expr pos:start="91:46" pos:end="91:47"><literal type="number" pos:start="91:46" pos:end="91:47">10</literal></expr></argument>)</argument_list></call> <operator pos:start="91:50" pos:end="91:50">&lt;</operator> <literal type="number" pos:start="91:52" pos:end="91:52">0</literal></expr>)</condition> <block pos:start="91:55" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:22">

            <expr_stmt pos:start="93:13" pos:end="93:68"><expr pos:start="93:13" pos:end="93:67"><call pos:start="93:13" pos:end="93:67"><name pos:start="93:13" pos:end="93:22">error_setg</name><argument_list pos:start="93:23" pos:end="93:67">(<argument pos:start="93:24" pos:end="93:27"><expr pos:start="93:24" pos:end="93:27"><name pos:start="93:24" pos:end="93:27">errp</name></expr></argument>, <argument pos:start="93:30" pos:end="93:60"><expr pos:start="93:30" pos:end="93:60"><literal type="string" pos:start="93:30" pos:end="93:60">"can't convert to a number: %s"</literal></expr></argument>, <argument pos:start="93:63" pos:end="93:66"><expr pos:start="93:63" pos:end="93:66"><name pos:start="93:63" pos:end="93:66">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="95:13" pos:end="95:22">return <expr pos:start="95:20" pos:end="95:21"><operator pos:start="95:20" pos:end="95:20">-</operator><literal type="number" pos:start="95:21" pos:end="95:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="99:9" pos:end="107:9"><if pos:start="99:9" pos:end="107:9">if <condition pos:start="99:12" pos:end="101:43">(<expr pos:start="99:13" pos:end="101:42"><name pos:start="99:13" pos:end="99:20">baseport</name> <operator pos:start="99:22" pos:end="99:22">&gt;</operator> <literal type="number" pos:start="99:24" pos:end="99:28">65535</literal> <operator pos:start="99:30" pos:end="99:31">||</operator>

            <name pos:start="101:13" pos:end="101:20">baseport</name> <operator pos:start="101:22" pos:end="101:22">+</operator> <name pos:start="101:24" pos:end="101:34">port_offset</name> <operator pos:start="101:36" pos:end="101:36">&gt;</operator> <literal type="number" pos:start="101:38" pos:end="101:42">65535</literal></expr>)</condition> <block pos:start="101:45" pos:end="107:9">{<block_content pos:start="103:13" pos:end="105:22">

            <expr_stmt pos:start="103:13" pos:end="103:59"><expr pos:start="103:13" pos:end="103:58"><call pos:start="103:13" pos:end="103:58"><name pos:start="103:13" pos:end="103:22">error_setg</name><argument_list pos:start="103:23" pos:end="103:58">(<argument pos:start="103:24" pos:end="103:27"><expr pos:start="103:24" pos:end="103:27"><name pos:start="103:24" pos:end="103:27">errp</name></expr></argument>, <argument pos:start="103:30" pos:end="103:51"><expr pos:start="103:30" pos:end="103:51"><literal type="string" pos:start="103:30" pos:end="103:51">"port %s out of range"</literal></expr></argument>, <argument pos:start="103:54" pos:end="103:57"><expr pos:start="103:54" pos:end="103:57"><name pos:start="103:54" pos:end="103:57">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="105:13" pos:end="105:22">return <expr pos:start="105:20" pos:end="105:21"><operator pos:start="105:20" pos:end="105:20">-</operator><literal type="number" pos:start="105:21" pos:end="105:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:72"><expr pos:start="109:9" pos:end="109:71"><call pos:start="109:9" pos:end="109:71"><name pos:start="109:9" pos:end="109:16">snprintf</name><argument_list pos:start="109:17" pos:end="109:71">(<argument pos:start="109:18" pos:end="109:21"><expr pos:start="109:18" pos:end="109:21"><name pos:start="109:18" pos:end="109:21">port</name></expr></argument>, <argument pos:start="109:24" pos:end="109:35"><expr pos:start="109:24" pos:end="109:35"><sizeof pos:start="109:24" pos:end="109:35">sizeof<argument_list pos:start="109:30" pos:end="109:35">(<argument pos:start="109:31" pos:end="109:34"><expr pos:start="109:31" pos:end="109:34"><name pos:start="109:31" pos:end="109:34">port</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="109:38" pos:end="109:41"><expr pos:start="109:38" pos:end="109:41"><literal type="string" pos:start="109:38" pos:end="109:41">"%d"</literal></expr></argument>, <argument pos:start="109:44" pos:end="109:70"><expr pos:start="109:44" pos:end="109:70"><operator pos:start="109:44" pos:end="109:44">(</operator><name pos:start="109:45" pos:end="109:47">int</name><operator pos:start="109:48" pos:end="109:48">)</operator><name pos:start="109:49" pos:end="109:56">baseport</name> <operator pos:start="109:58" pos:end="109:58">+</operator> <name pos:start="109:60" pos:end="109:70">port_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="113:5" pos:end="115:60"><expr pos:start="113:5" pos:end="115:59"><name pos:start="113:5" pos:end="113:6">rc</name> <operator pos:start="113:8" pos:end="113:8">=</operator> <call pos:start="113:10" pos:end="115:59"><name pos:start="113:10" pos:end="113:20">getaddrinfo</name><argument_list pos:start="113:21" pos:end="115:59">(<argument pos:start="113:22" pos:end="113:61"><expr pos:start="113:22" pos:end="113:61"><ternary pos:start="113:22" pos:end="113:61"><condition pos:start="113:22" pos:end="113:42"><expr pos:start="113:22" pos:end="113:40"><call pos:start="113:22" pos:end="113:40"><name pos:start="113:22" pos:end="113:27">strlen</name><argument_list pos:start="113:28" pos:end="113:40">(<argument pos:start="113:29" pos:end="113:39"><expr pos:start="113:29" pos:end="113:39"><name pos:start="113:29" pos:end="113:39"><name pos:start="113:29" pos:end="113:33">saddr</name><operator pos:start="113:34" pos:end="113:35">-&gt;</operator><name pos:start="113:36" pos:end="113:39">host</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="113:44" pos:end="113:54"> <expr pos:start="113:44" pos:end="113:54"><name pos:start="113:44" pos:end="113:54"><name pos:start="113:44" pos:end="113:48">saddr</name><operator pos:start="113:49" pos:end="113:50">-&gt;</operator><name pos:start="113:51" pos:end="113:54">host</name></name></expr> </then><else pos:start="113:56" pos:end="113:61">: <expr pos:start="113:58" pos:end="113:61"><name pos:start="113:58" pos:end="113:61">NULL</name></expr></else></ternary></expr></argument>,

                     <argument pos:start="115:22" pos:end="115:47"><expr pos:start="115:22" pos:end="115:47"><ternary pos:start="115:22" pos:end="115:47"><condition pos:start="115:22" pos:end="115:35"><expr pos:start="115:22" pos:end="115:33"><call pos:start="115:22" pos:end="115:33"><name pos:start="115:22" pos:end="115:27">strlen</name><argument_list pos:start="115:28" pos:end="115:33">(<argument pos:start="115:29" pos:end="115:32"><expr pos:start="115:29" pos:end="115:32"><name pos:start="115:29" pos:end="115:32">port</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="115:37" pos:end="115:40"> <expr pos:start="115:37" pos:end="115:40"><name pos:start="115:37" pos:end="115:40">port</name></expr> </then><else pos:start="115:42" pos:end="115:47">: <expr pos:start="115:44" pos:end="115:47"><name pos:start="115:44" pos:end="115:47">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="115:50" pos:end="115:52"><expr pos:start="115:50" pos:end="115:52"><operator pos:start="115:50" pos:end="115:50">&amp;</operator><name pos:start="115:51" pos:end="115:52">ai</name></expr></argument>, <argument pos:start="115:55" pos:end="115:58"><expr pos:start="115:55" pos:end="115:58"><operator pos:start="115:55" pos:end="115:55">&amp;</operator><name pos:start="115:56" pos:end="115:58">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="125:5"><if pos:start="117:5" pos:end="125:5">if <condition pos:start="117:8" pos:end="117:16">(<expr pos:start="117:9" pos:end="117:15"><name pos:start="117:9" pos:end="117:10">rc</name> <operator pos:start="117:12" pos:end="117:13">!=</operator> <literal type="number" pos:start="117:15" pos:end="117:15">0</literal></expr>)</condition> <block pos:start="117:18" pos:end="125:5">{<block_content pos:start="119:9" pos:end="123:18">

        <expr_stmt pos:start="119:9" pos:end="121:56"><expr pos:start="119:9" pos:end="121:55"><call pos:start="119:9" pos:end="121:55"><name pos:start="119:9" pos:end="119:18">error_setg</name><argument_list pos:start="119:19" pos:end="121:55">(<argument pos:start="119:20" pos:end="119:23"><expr pos:start="119:20" pos:end="119:23"><name pos:start="119:20" pos:end="119:23">errp</name></expr></argument>, <argument pos:start="119:26" pos:end="119:66"><expr pos:start="119:26" pos:end="119:66"><literal type="string" pos:start="119:26" pos:end="119:66">"address resolution failed for %s:%s: %s"</literal></expr></argument>,

                   <argument pos:start="121:20" pos:end="121:30"><expr pos:start="121:20" pos:end="121:30"><name pos:start="121:20" pos:end="121:30"><name pos:start="121:20" pos:end="121:24">saddr</name><operator pos:start="121:25" pos:end="121:26">-&gt;</operator><name pos:start="121:27" pos:end="121:30">host</name></name></expr></argument>, <argument pos:start="121:33" pos:end="121:36"><expr pos:start="121:33" pos:end="121:36"><name pos:start="121:33" pos:end="121:36">port</name></expr></argument>, <argument pos:start="121:39" pos:end="121:54"><expr pos:start="121:39" pos:end="121:54"><call pos:start="121:39" pos:end="121:54"><name pos:start="121:39" pos:end="121:50">gai_strerror</name><argument_list pos:start="121:51" pos:end="121:54">(<argument pos:start="121:52" pos:end="121:53"><expr pos:start="121:52" pos:end="121:53"><name pos:start="121:52" pos:end="121:53">rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="123:9" pos:end="123:18">return <expr pos:start="123:16" pos:end="123:17"><operator pos:start="123:16" pos:end="123:16">-</operator><literal type="number" pos:start="123:17" pos:end="123:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="129:5" pos:end="129:37">/* create socket + bind/listen */</comment>

    <for pos:start="131:5" pos:end="219:5">for <control pos:start="131:9" pos:end="131:44">(<init pos:start="131:10" pos:end="131:17"><expr pos:start="131:10" pos:end="131:16"><name pos:start="131:10" pos:end="131:10">e</name> <operator pos:start="131:12" pos:end="131:12">=</operator> <name pos:start="131:14" pos:end="131:16">res</name></expr>;</init> <condition pos:start="131:19" pos:end="131:28"><expr pos:start="131:19" pos:end="131:27"><name pos:start="131:19" pos:end="131:19">e</name> <operator pos:start="131:21" pos:end="131:22">!=</operator> <name pos:start="131:24" pos:end="131:27">NULL</name></expr>;</condition> <incr pos:start="131:30" pos:end="131:43"><expr pos:start="131:30" pos:end="131:43"><name pos:start="131:30" pos:end="131:30">e</name> <operator pos:start="131:32" pos:end="131:32">=</operator> <name pos:start="131:34" pos:end="131:43"><name pos:start="131:34" pos:end="131:34">e</name><operator pos:start="131:35" pos:end="131:36">-&gt;</operator><name pos:start="131:37" pos:end="131:43">ai_next</name></name></expr></incr>)</control> <block pos:start="131:46" pos:end="219:5">{<block_content pos:start="133:9" pos:end="217:9">

        <expr_stmt pos:start="133:9" pos:end="137:57"><expr pos:start="133:9" pos:end="137:56"><call pos:start="133:9" pos:end="137:56"><name pos:start="133:9" pos:end="133:19">getnameinfo</name><argument_list pos:start="133:20" pos:end="137:56">(<argument pos:start="133:21" pos:end="133:48"><expr pos:start="133:21" pos:end="133:48"><operator pos:start="133:21" pos:end="133:21">(</operator>struct <name pos:start="133:29" pos:end="133:36">sockaddr</name><operator pos:start="133:37" pos:end="133:37">*</operator><operator pos:start="133:38" pos:end="133:38">)</operator><name pos:start="133:39" pos:end="133:48"><name pos:start="133:39" pos:end="133:39">e</name><operator pos:start="133:40" pos:end="133:41">-&gt;</operator><name pos:start="133:42" pos:end="133:48">ai_addr</name></name></expr></argument>,<argument pos:start="133:50" pos:end="133:62"><expr pos:start="133:50" pos:end="133:62"><name pos:start="133:50" pos:end="133:62"><name pos:start="133:50" pos:end="133:50">e</name><operator pos:start="133:51" pos:end="133:52">-&gt;</operator><name pos:start="133:53" pos:end="133:62">ai_addrlen</name></name></expr></argument>,

		        <argument pos:start="135:25" pos:end="135:29"><expr pos:start="135:25" pos:end="135:29"><name pos:start="135:25" pos:end="135:29">uaddr</name></expr></argument>,<argument pos:start="135:31" pos:end="135:46"><expr pos:start="135:31" pos:end="135:46"><name pos:start="135:31" pos:end="135:46">INET6_ADDRSTRLEN</name></expr></argument>,<argument pos:start="135:48" pos:end="135:52"><expr pos:start="135:48" pos:end="135:52"><name pos:start="135:48" pos:end="135:52">uport</name></expr></argument>,<argument pos:start="135:54" pos:end="135:55"><expr pos:start="135:54" pos:end="135:55"><literal type="number" pos:start="135:54" pos:end="135:55">32</literal></expr></argument>,

		        <argument pos:start="137:25" pos:end="137:55"><expr pos:start="137:25" pos:end="137:55"><name pos:start="137:25" pos:end="137:38">NI_NUMERICHOST</name> <operator pos:start="137:40" pos:end="137:40">|</operator> <name pos:start="137:42" pos:end="137:55">NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="141:9" pos:end="141:46"><expr pos:start="141:9" pos:end="141:45"><name pos:start="141:9" pos:end="141:15">slisten</name> <operator pos:start="141:17" pos:end="141:17">=</operator> <call pos:start="141:19" pos:end="141:45"><name pos:start="141:19" pos:end="141:42">create_fast_reuse_socket</name><argument_list pos:start="141:43" pos:end="141:45">(<argument pos:start="141:44" pos:end="141:44"><expr pos:start="141:44" pos:end="141:44"><name pos:start="141:44" pos:end="141:44">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="143:9" pos:end="147:9"><if pos:start="143:9" pos:end="147:9">if <condition pos:start="143:12" pos:end="143:24">(<expr pos:start="143:13" pos:end="143:23"><name pos:start="143:13" pos:end="143:19">slisten</name> <operator pos:start="143:21" pos:end="143:21">&lt;</operator> <literal type="number" pos:start="143:23" pos:end="143:23">0</literal></expr>)</condition> <block pos:start="143:26" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:21">

            <continue pos:start="145:13" pos:end="145:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="151:9" pos:end="151:30"><expr pos:start="151:9" pos:end="151:29"><name pos:start="151:9" pos:end="151:22">socket_created</name> <operator pos:start="151:24" pos:end="151:24">=</operator> <name pos:start="151:26" pos:end="151:29">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:35"><expr pos:start="153:9" pos:end="153:34"><name pos:start="153:9" pos:end="153:16">port_min</name> <operator pos:start="153:18" pos:end="153:18">=</operator> <call pos:start="153:20" pos:end="153:34"><name pos:start="153:20" pos:end="153:31">inet_getport</name><argument_list pos:start="153:32" pos:end="153:34">(<argument pos:start="153:33" pos:end="153:33"><expr pos:start="153:33" pos:end="153:33"><name pos:start="153:33" pos:end="153:33">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:70"><expr pos:start="155:9" pos:end="155:69"><name pos:start="155:9" pos:end="155:16">port_max</name> <operator pos:start="155:18" pos:end="155:18">=</operator> <ternary pos:start="155:20" pos:end="155:69"><condition pos:start="155:20" pos:end="155:34"><expr pos:start="155:20" pos:end="155:32"><name pos:start="155:20" pos:end="155:32"><name pos:start="155:20" pos:end="155:24">saddr</name><operator pos:start="155:25" pos:end="155:26">-&gt;</operator><name pos:start="155:27" pos:end="155:32">has_to</name></name></expr> ?</condition><then pos:start="155:36" pos:end="155:58"> <expr pos:start="155:36" pos:end="155:58"><name pos:start="155:36" pos:end="155:44"><name pos:start="155:36" pos:end="155:40">saddr</name><operator pos:start="155:41" pos:end="155:42">-&gt;</operator><name pos:start="155:43" pos:end="155:44">to</name></name> <operator pos:start="155:46" pos:end="155:46">+</operator> <name pos:start="155:48" pos:end="155:58">port_offset</name></expr> </then><else pos:start="155:60" pos:end="155:69">: <expr pos:start="155:62" pos:end="155:69"><name pos:start="155:62" pos:end="155:69">port_min</name></expr></else></ternary></expr>;</expr_stmt>

        <for pos:start="157:9" pos:end="217:9">for <control pos:start="157:13" pos:end="157:46">(<init pos:start="157:14" pos:end="157:26"><expr pos:start="157:14" pos:end="157:25"><name pos:start="157:14" pos:end="157:14">p</name> <operator pos:start="157:16" pos:end="157:16">=</operator> <name pos:start="157:18" pos:end="157:25">port_min</name></expr>;</init> <condition pos:start="157:28" pos:end="157:41"><expr pos:start="157:28" pos:end="157:40"><name pos:start="157:28" pos:end="157:28">p</name> <operator pos:start="157:30" pos:end="157:31">&lt;=</operator> <name pos:start="157:33" pos:end="157:40">port_max</name></expr>;</condition> <incr pos:start="157:43" pos:end="157:45"><expr pos:start="157:43" pos:end="157:45"><name pos:start="157:43" pos:end="157:43">p</name><operator pos:start="157:44" pos:end="157:45">++</operator></expr></incr>)</control> <block pos:start="157:48" pos:end="217:9">{<block_content pos:start="159:13" pos:end="215:13">

            <expr_stmt pos:start="159:13" pos:end="159:31"><expr pos:start="159:13" pos:end="159:30"><call pos:start="159:13" pos:end="159:30"><name pos:start="159:13" pos:end="159:24">inet_setport</name><argument_list pos:start="159:25" pos:end="159:30">(<argument pos:start="159:26" pos:end="159:26"><expr pos:start="159:26" pos:end="159:26"><name pos:start="159:26" pos:end="159:26">e</name></expr></argument>, <argument pos:start="159:29" pos:end="159:29"><expr pos:start="159:29" pos:end="159:29"><name pos:start="159:29" pos:end="159:29">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:45"><expr pos:start="161:13" pos:end="161:44"><name pos:start="161:13" pos:end="161:14">rc</name> <operator pos:start="161:16" pos:end="161:16">=</operator> <call pos:start="161:18" pos:end="161:44"><name pos:start="161:18" pos:end="161:25">try_bind</name><argument_list pos:start="161:26" pos:end="161:44">(<argument pos:start="161:27" pos:end="161:33"><expr pos:start="161:27" pos:end="161:33"><name pos:start="161:27" pos:end="161:33">slisten</name></expr></argument>, <argument pos:start="161:36" pos:end="161:40"><expr pos:start="161:36" pos:end="161:40"><name pos:start="161:36" pos:end="161:40">saddr</name></expr></argument>, <argument pos:start="161:43" pos:end="161:43"><expr pos:start="161:43" pos:end="161:43"><name pos:start="161:43" pos:end="161:43">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="163:13" pos:end="177:13"><if pos:start="163:13" pos:end="177:13">if <condition pos:start="163:16" pos:end="163:19">(<expr pos:start="163:17" pos:end="163:18"><name pos:start="163:17" pos:end="163:18">rc</name></expr>)</condition> <block pos:start="163:21" pos:end="177:13">{<block_content pos:start="165:17" pos:end="175:17">

                <if_stmt pos:start="165:17" pos:end="175:17"><if pos:start="165:17" pos:end="169:17">if <condition pos:start="165:20" pos:end="165:40">(<expr pos:start="165:21" pos:end="165:39"><name pos:start="165:21" pos:end="165:25">errno</name> <operator pos:start="165:27" pos:end="165:28">==</operator> <name pos:start="165:30" pos:end="165:39">EADDRINUSE</name></expr>)</condition> <block pos:start="165:42" pos:end="169:17">{<block_content pos:start="167:21" pos:end="167:29">

                    <continue pos:start="167:21" pos:end="167:29">continue;</continue>

                </block_content>}</block></if> <else pos:start="169:19" pos:end="175:17">else <block pos:start="169:24" pos:end="175:17">{<block_content pos:start="171:21" pos:end="173:39">

                    <expr_stmt pos:start="171:21" pos:end="171:75"><expr pos:start="171:21" pos:end="171:74"><call pos:start="171:21" pos:end="171:74"><name pos:start="171:21" pos:end="171:36">error_setg_errno</name><argument_list pos:start="171:37" pos:end="171:74">(<argument pos:start="171:38" pos:end="171:41"><expr pos:start="171:38" pos:end="171:41"><name pos:start="171:38" pos:end="171:41">errp</name></expr></argument>, <argument pos:start="171:44" pos:end="171:48"><expr pos:start="171:44" pos:end="171:48"><name pos:start="171:44" pos:end="171:48">errno</name></expr></argument>, <argument pos:start="171:51" pos:end="171:73"><expr pos:start="171:51" pos:end="171:73"><literal type="string" pos:start="171:51" pos:end="171:73">"Failed to bind socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="173:21" pos:end="173:39">goto <name pos:start="173:26" pos:end="173:38">listen_failed</name>;</goto>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="179:13" pos:end="183:13"><if pos:start="179:13" pos:end="183:13">if <condition pos:start="179:16" pos:end="179:36">(<expr pos:start="179:17" pos:end="179:35"><operator pos:start="179:17" pos:end="179:17">!</operator><call pos:start="179:18" pos:end="179:35"><name pos:start="179:18" pos:end="179:23">listen</name><argument_list pos:start="179:24" pos:end="179:35">(<argument pos:start="179:25" pos:end="179:31"><expr pos:start="179:25" pos:end="179:31"><name pos:start="179:25" pos:end="179:31">slisten</name></expr></argument>, <argument pos:start="179:34" pos:end="179:34"><expr pos:start="179:34" pos:end="179:34"><literal type="number" pos:start="179:34" pos:end="179:34">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="179:38" pos:end="183:13">{<block_content pos:start="181:17" pos:end="181:31">

                <goto pos:start="181:17" pos:end="181:31">goto <name pos:start="181:22" pos:end="181:30">listen_ok</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="185:13" pos:end="191:13"><if pos:start="185:13" pos:end="191:13">if <condition pos:start="185:16" pos:end="185:36">(<expr pos:start="185:17" pos:end="185:35"><name pos:start="185:17" pos:end="185:21">errno</name> <operator pos:start="185:23" pos:end="185:24">!=</operator> <name pos:start="185:26" pos:end="185:35">EADDRINUSE</name></expr>)</condition> <block pos:start="185:38" pos:end="191:13">{<block_content pos:start="187:17" pos:end="189:35">

                <expr_stmt pos:start="187:17" pos:end="187:76"><expr pos:start="187:17" pos:end="187:75"><call pos:start="187:17" pos:end="187:75"><name pos:start="187:17" pos:end="187:32">error_setg_errno</name><argument_list pos:start="187:33" pos:end="187:75">(<argument pos:start="187:34" pos:end="187:37"><expr pos:start="187:34" pos:end="187:37"><name pos:start="187:34" pos:end="187:37">errp</name></expr></argument>, <argument pos:start="187:40" pos:end="187:44"><expr pos:start="187:40" pos:end="187:44"><name pos:start="187:40" pos:end="187:44">errno</name></expr></argument>, <argument pos:start="187:47" pos:end="187:74"><expr pos:start="187:47" pos:end="187:74"><literal type="string" pos:start="187:47" pos:end="187:74">"Failed to listen on socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="189:17" pos:end="189:35">goto <name pos:start="189:22" pos:end="189:34">listen_failed</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="193:13" pos:end="201:15">/* Someone else managed to bind to the same port and beat us

             * to listen on it! Socket semantics does not allow us to

             * recover from this situation, so we need to recreate the

             * socket to allow bind attempts for subsequent ports:

             */</comment>

            <expr_stmt pos:start="203:13" pos:end="203:33"><expr pos:start="203:13" pos:end="203:32"><call pos:start="203:13" pos:end="203:32"><name pos:start="203:13" pos:end="203:23">closesocket</name><argument_list pos:start="203:24" pos:end="203:32">(<argument pos:start="203:25" pos:end="203:31"><expr pos:start="203:25" pos:end="203:31"><name pos:start="203:25" pos:end="203:31">slisten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:50"><expr pos:start="205:13" pos:end="205:49"><name pos:start="205:13" pos:end="205:19">slisten</name> <operator pos:start="205:21" pos:end="205:21">=</operator> <call pos:start="205:23" pos:end="205:49"><name pos:start="205:23" pos:end="205:46">create_fast_reuse_socket</name><argument_list pos:start="205:47" pos:end="205:49">(<argument pos:start="205:48" pos:end="205:48"><expr pos:start="205:48" pos:end="205:48"><name pos:start="205:48" pos:end="205:48">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="207:13" pos:end="215:13"><if pos:start="207:13" pos:end="215:13">if <condition pos:start="207:16" pos:end="207:28">(<expr pos:start="207:17" pos:end="207:27"><name pos:start="207:17" pos:end="207:23">slisten</name> <operator pos:start="207:25" pos:end="207:25">&lt;</operator> <literal type="number" pos:start="207:27" pos:end="207:27">0</literal></expr>)</condition> <block pos:start="207:30" pos:end="215:13">{<block_content pos:start="209:17" pos:end="213:35">

                <expr_stmt pos:start="209:17" pos:end="211:79"><expr pos:start="209:17" pos:end="211:78"><call pos:start="209:17" pos:end="211:78"><name pos:start="209:17" pos:end="209:32">error_setg_errno</name><argument_list pos:start="209:33" pos:end="211:78">(<argument pos:start="209:34" pos:end="209:37"><expr pos:start="209:34" pos:end="209:37"><name pos:start="209:34" pos:end="209:37">errp</name></expr></argument>, <argument pos:start="209:40" pos:end="209:44"><expr pos:start="209:40" pos:end="209:44"><name pos:start="209:40" pos:end="209:44">errno</name></expr></argument>,

                                 <argument pos:start="211:34" pos:end="211:77"><expr pos:start="211:34" pos:end="211:77"><literal type="string" pos:start="211:34" pos:end="211:77">"Failed to recreate failed listening socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="213:17" pos:end="213:35">goto <name pos:start="213:22" pos:end="213:34">listen_failed</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <expr_stmt pos:start="221:5" pos:end="227:50"><expr pos:start="221:5" pos:end="227:49"><call pos:start="221:5" pos:end="227:49"><name pos:start="221:5" pos:end="221:20">error_setg_errno</name><argument_list pos:start="221:21" pos:end="227:49">(<argument pos:start="221:22" pos:end="221:25"><expr pos:start="221:22" pos:end="221:25"><name pos:start="221:22" pos:end="221:25">errp</name></expr></argument>, <argument pos:start="221:28" pos:end="221:32"><expr pos:start="221:28" pos:end="221:32"><name pos:start="221:28" pos:end="221:32">errno</name></expr></argument>,

                     <argument pos:start="223:22" pos:end="227:48"><expr pos:start="223:22" pos:end="227:48"><ternary pos:start="223:22" pos:end="227:48"><condition pos:start="223:22" pos:end="223:37"><expr pos:start="223:22" pos:end="223:35"><name pos:start="223:22" pos:end="223:35">socket_created</name></expr> ?</condition><then pos:start="225:22" pos:end="225:55">

                     <expr pos:start="225:22" pos:end="225:55"><literal type="string" pos:start="225:22" pos:end="225:55">"Failed to find an available port"</literal></expr> </then><else pos:start="225:57" pos:end="227:48">:

                     <expr pos:start="227:22" pos:end="227:48"><literal type="string" pos:start="227:22" pos:end="227:48">"Failed to create a socket"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="229:1" pos:end="229:14"><name pos:start="229:1" pos:end="229:13">listen_failed</name>:</label>

    <expr_stmt pos:start="231:5" pos:end="231:24"><expr pos:start="231:5" pos:end="231:23"><name pos:start="231:5" pos:end="231:15">saved_errno</name> <operator pos:start="231:17" pos:end="231:17">=</operator> <name pos:start="231:19" pos:end="231:23">errno</name></expr>;</expr_stmt>

    <if_stmt pos:start="233:5" pos:end="237:5"><if pos:start="233:5" pos:end="237:5">if <condition pos:start="233:8" pos:end="233:21">(<expr pos:start="233:9" pos:end="233:20"><name pos:start="233:9" pos:end="233:15">slisten</name> <operator pos:start="233:17" pos:end="233:18">&gt;=</operator> <literal type="number" pos:start="233:20" pos:end="233:20">0</literal></expr>)</condition> <block pos:start="233:23" pos:end="237:5">{<block_content pos:start="235:9" pos:end="235:29">

        <expr_stmt pos:start="235:9" pos:end="235:29"><expr pos:start="235:9" pos:end="235:28"><call pos:start="235:9" pos:end="235:28"><name pos:start="235:9" pos:end="235:19">closesocket</name><argument_list pos:start="235:20" pos:end="235:28">(<argument pos:start="235:21" pos:end="235:27"><expr pos:start="235:21" pos:end="235:27"><name pos:start="235:21" pos:end="235:27">slisten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:22"><expr pos:start="239:5" pos:end="239:21"><call pos:start="239:5" pos:end="239:21"><name pos:start="239:5" pos:end="239:16">freeaddrinfo</name><argument_list pos:start="239:17" pos:end="239:21">(<argument pos:start="239:18" pos:end="239:20"><expr pos:start="239:18" pos:end="239:20"><name pos:start="239:18" pos:end="239:20">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:24"><expr pos:start="241:5" pos:end="241:23"><name pos:start="241:5" pos:end="241:9">errno</name> <operator pos:start="241:11" pos:end="241:11">=</operator> <name pos:start="241:13" pos:end="241:23">saved_errno</name></expr>;</expr_stmt>

    <return pos:start="243:5" pos:end="243:14">return <expr pos:start="243:12" pos:end="243:13"><operator pos:start="243:12" pos:end="243:12">-</operator><literal type="number" pos:start="243:13" pos:end="243:13">1</literal></expr>;</return>



<label pos:start="247:1" pos:end="247:10"><name pos:start="247:1" pos:end="247:9">listen_ok</name>:</label>

    <if_stmt pos:start="249:5" pos:end="265:5"><if pos:start="249:5" pos:end="265:5">if <condition pos:start="249:8" pos:end="249:20">(<expr pos:start="249:9" pos:end="249:19"><name pos:start="249:9" pos:end="249:19">update_addr</name></expr>)</condition> <block pos:start="249:22" pos:end="265:5">{<block_content pos:start="251:9" pos:end="263:65">

        <expr_stmt pos:start="251:9" pos:end="251:28"><expr pos:start="251:9" pos:end="251:27"><call pos:start="251:9" pos:end="251:27"><name pos:start="251:9" pos:end="251:14">g_free</name><argument_list pos:start="251:15" pos:end="251:27">(<argument pos:start="251:16" pos:end="251:26"><expr pos:start="251:16" pos:end="251:26"><name pos:start="251:16" pos:end="251:26"><name pos:start="251:16" pos:end="251:20">saddr</name><operator pos:start="251:21" pos:end="251:22">-&gt;</operator><name pos:start="251:23" pos:end="251:26">host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:38"><expr pos:start="253:9" pos:end="253:37"><name pos:start="253:9" pos:end="253:19"><name pos:start="253:9" pos:end="253:13">saddr</name><operator pos:start="253:14" pos:end="253:15">-&gt;</operator><name pos:start="253:16" pos:end="253:19">host</name></name> <operator pos:start="253:21" pos:end="253:21">=</operator> <call pos:start="253:23" pos:end="253:37"><name pos:start="253:23" pos:end="253:30">g_strdup</name><argument_list pos:start="253:31" pos:end="253:37">(<argument pos:start="253:32" pos:end="253:36"><expr pos:start="253:32" pos:end="253:36"><name pos:start="253:32" pos:end="253:36">uaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:28"><expr pos:start="255:9" pos:end="255:27"><call pos:start="255:9" pos:end="255:27"><name pos:start="255:9" pos:end="255:14">g_free</name><argument_list pos:start="255:15" pos:end="255:27">(<argument pos:start="255:16" pos:end="255:26"><expr pos:start="255:16" pos:end="255:26"><name pos:start="255:16" pos:end="255:26"><name pos:start="255:16" pos:end="255:20">saddr</name><operator pos:start="255:21" pos:end="255:22">-&gt;</operator><name pos:start="255:23" pos:end="255:26">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="259:69"><expr pos:start="257:9" pos:end="259:68"><name pos:start="257:9" pos:end="257:19"><name pos:start="257:9" pos:end="257:13">saddr</name><operator pos:start="257:14" pos:end="257:15">-&gt;</operator><name pos:start="257:16" pos:end="257:19">port</name></name> <operator pos:start="257:21" pos:end="257:21">=</operator> <call pos:start="257:23" pos:end="259:68"><name pos:start="257:23" pos:end="257:37">g_strdup_printf</name><argument_list pos:start="257:38" pos:end="259:68">(<argument pos:start="257:39" pos:end="257:42"><expr pos:start="257:39" pos:end="257:42"><literal type="string" pos:start="257:39" pos:end="257:42">"%d"</literal></expr></argument>,

                                      <argument pos:start="259:39" pos:end="259:67"><expr pos:start="259:39" pos:end="259:67"><call pos:start="259:39" pos:end="259:53"><name pos:start="259:39" pos:end="259:50">inet_getport</name><argument_list pos:start="259:51" pos:end="259:53">(<argument pos:start="259:52" pos:end="259:52"><expr pos:start="259:52" pos:end="259:52"><name pos:start="259:52" pos:end="259:52">e</name></expr></argument>)</argument_list></call> <operator pos:start="259:55" pos:end="259:55">-</operator> <name pos:start="259:57" pos:end="259:67">port_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:65"><expr pos:start="261:9" pos:end="261:64"><name pos:start="261:9" pos:end="261:23"><name pos:start="261:9" pos:end="261:13">saddr</name><operator pos:start="261:14" pos:end="261:15">-&gt;</operator><name pos:start="261:16" pos:end="261:23">has_ipv6</name></name> <operator pos:start="261:25" pos:end="261:25">=</operator> <name pos:start="261:27" pos:end="261:37"><name pos:start="261:27" pos:end="261:31">saddr</name><operator pos:start="261:32" pos:end="261:33">-&gt;</operator><name pos:start="261:34" pos:end="261:37">ipv6</name></name> <operator pos:start="261:39" pos:end="261:39">=</operator> <name pos:start="261:41" pos:end="261:52"><name pos:start="261:41" pos:end="261:41">e</name><operator pos:start="261:42" pos:end="261:43">-&gt;</operator><name pos:start="261:44" pos:end="261:52">ai_family</name></name> <operator pos:start="261:54" pos:end="261:55">==</operator> <name pos:start="261:57" pos:end="261:64">PF_INET6</name></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:65"><expr pos:start="263:9" pos:end="263:64"><name pos:start="263:9" pos:end="263:23"><name pos:start="263:9" pos:end="263:13">saddr</name><operator pos:start="263:14" pos:end="263:15">-&gt;</operator><name pos:start="263:16" pos:end="263:23">has_ipv4</name></name> <operator pos:start="263:25" pos:end="263:25">=</operator> <name pos:start="263:27" pos:end="263:37"><name pos:start="263:27" pos:end="263:31">saddr</name><operator pos:start="263:32" pos:end="263:33">-&gt;</operator><name pos:start="263:34" pos:end="263:37">ipv4</name></name> <operator pos:start="263:39" pos:end="263:39">=</operator> <name pos:start="263:41" pos:end="263:52"><name pos:start="263:41" pos:end="263:41">e</name><operator pos:start="263:42" pos:end="263:43">-&gt;</operator><name pos:start="263:44" pos:end="263:52">ai_family</name></name> <operator pos:start="263:54" pos:end="263:55">!=</operator> <name pos:start="263:57" pos:end="263:64">PF_INET6</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:22"><expr pos:start="267:5" pos:end="267:21"><call pos:start="267:5" pos:end="267:21"><name pos:start="267:5" pos:end="267:16">freeaddrinfo</name><argument_list pos:start="267:17" pos:end="267:21">(<argument pos:start="267:18" pos:end="267:20"><expr pos:start="267:18" pos:end="267:20"><name pos:start="267:18" pos:end="267:20">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="269:5" pos:end="269:19">return <expr pos:start="269:12" pos:end="269:18"><name pos:start="269:12" pos:end="269:18">slisten</name></expr>;</return>

</block_content>}</block></function>
</unit>
