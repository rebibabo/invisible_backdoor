<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2403.c" pos:tabs="8"><function pos:start="1:1" pos:end="163:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">vhdx_log_flush</name><parameter_list pos:start="1:26" pos:end="3:48">(<parameter pos:start="1:27" pos:end="1:46"><decl pos:start="1:27" pos:end="1:46"><type pos:start="1:27" pos:end="1:46"><name pos:start="1:27" pos:end="1:42">BlockDriverState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">bs</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:64"><decl pos:start="1:49" pos:end="1:64"><type pos:start="1:49" pos:end="1:64"><name pos:start="1:49" pos:end="1:61">BDRVVHDXState</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:64">s</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:47"><decl pos:start="3:27" pos:end="3:47"><type pos:start="3:27" pos:end="3:47"><name pos:start="3:27" pos:end="3:41">VHDXLogSequence</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:47">logs</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="163:1">{<block_content pos:start="7:5" pos:end="161:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">cnt</name></decl>, <decl pos:start="11:19" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:19" pos:end="11:30">sectors_read</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:26">new_file_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:14">data</name> <init pos:start="15:16" pos:end="15:21">= <expr pos:start="15:18" pos:end="15:21"><name pos:start="15:18" pos:end="15:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:44"><decl pos:start="17:5" pos:end="17:43"><type pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:22">VHDXLogDescEntries</name> <modifier pos:start="17:24" pos:end="17:24">*</modifier></type><name pos:start="17:25" pos:end="17:36">desc_entries</name> <init pos:start="17:38" pos:end="17:43">= <expr pos:start="17:40" pos:end="17:43"><name pos:start="17:40" pos:end="17:43">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:39"><decl pos:start="19:5" pos:end="19:38"><type pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:22">VHDXLogEntryHeader</name></type> <name pos:start="19:24" pos:end="19:30">hdr_tmp</name> <init pos:start="19:32" pos:end="19:38">= <expr pos:start="19:34" pos:end="19:38"><block pos:start="19:34" pos:end="19:38">{ <expr pos:start="19:36" pos:end="19:36"><literal type="number" pos:start="19:36" pos:end="19:36">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:22"><expr pos:start="23:5" pos:end="23:21"><name pos:start="23:5" pos:end="23:7">cnt</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <name pos:start="23:11" pos:end="23:21"><name pos:start="23:11" pos:end="23:14">logs</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:21">count</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:53"><expr pos:start="27:5" pos:end="27:52"><name pos:start="27:5" pos:end="27:8">data</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <call pos:start="27:12" pos:end="27:52"><name pos:start="27:12" pos:end="27:26">qemu_blockalign</name><argument_list pos:start="27:27" pos:end="27:52">(<argument pos:start="27:28" pos:end="27:29"><expr pos:start="27:28" pos:end="27:29"><name pos:start="27:28" pos:end="27:29">bs</name></expr></argument>, <argument pos:start="27:32" pos:end="27:51"><expr pos:start="27:32" pos:end="27:51"><name pos:start="27:32" pos:end="27:51">VHDX_LOG_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:41"><expr pos:start="31:5" pos:end="31:40"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:40"><name pos:start="31:11" pos:end="31:33">vhdx_user_visible_write</name><argument_list pos:start="31:34" pos:end="31:40">(<argument pos:start="31:35" pos:end="31:36"><expr pos:start="31:35" pos:end="31:36"><name pos:start="31:35" pos:end="31:36">bs</name></expr></argument>, <argument pos:start="31:39" pos:end="31:39"><expr pos:start="31:39" pos:end="31:39"><name pos:start="31:39" pos:end="31:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:16">(<expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">&lt;</operator> <literal type="number" pos:start="33:15" pos:end="33:15">0</literal></expr>)</condition> <block pos:start="33:18" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:18">

        <goto pos:start="35:9" pos:end="35:18">goto <name pos:start="35:14" pos:end="35:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="43:17">/* each iteration represents one log sequence, which may span multiple

     * sectors */</comment>

    <while pos:start="45:5" pos:end="141:5">while <condition pos:start="45:11" pos:end="45:17">(<expr pos:start="45:12" pos:end="45:16"><name pos:start="45:12" pos:end="45:14">cnt</name><operator pos:start="45:15" pos:end="45:16">--</operator></expr>)</condition> <block pos:start="45:19" pos:end="141:5">{<block_content pos:start="47:9" pos:end="139:28">

        <expr_stmt pos:start="47:9" pos:end="47:58"><expr pos:start="47:9" pos:end="47:57"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:57"><name pos:start="47:15" pos:end="47:31">vhdx_log_peek_hdr</name><argument_list pos:start="47:32" pos:end="47:57">(<argument pos:start="47:33" pos:end="47:34"><expr pos:start="47:33" pos:end="47:34"><name pos:start="47:33" pos:end="47:34">bs</name></expr></argument>, <argument pos:start="47:37" pos:end="47:46"><expr pos:start="47:37" pos:end="47:46"><operator pos:start="47:37" pos:end="47:37">&amp;</operator><name pos:start="47:38" pos:end="47:46"><name pos:start="47:38" pos:end="47:41">logs</name><operator pos:start="47:42" pos:end="47:43">-&gt;</operator><name pos:start="47:44" pos:end="47:46">log</name></name></expr></argument>, <argument pos:start="47:49" pos:end="47:56"><expr pos:start="47:49" pos:end="47:56"><operator pos:start="47:49" pos:end="47:49">&amp;</operator><name pos:start="47:50" pos:end="47:56">hdr_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:20">(<expr pos:start="49:13" pos:end="49:19"><name pos:start="49:13" pos:end="49:15">ret</name> <operator pos:start="49:17" pos:end="49:17">&lt;</operator> <literal type="number" pos:start="49:19" pos:end="49:19">0</literal></expr>)</condition> <block pos:start="49:22" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:22">

            <goto pos:start="51:13" pos:end="51:22">goto <name pos:start="51:18" pos:end="51:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="55:9" pos:end="59:49">/* if the log shows a FlushedFileOffset larger than our current file

         * size, then that means the file has been truncated / corrupted, and

         * we must refused to open it / use it */</comment>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:71">(<expr pos:start="61:13" pos:end="61:70"><name pos:start="61:13" pos:end="61:39"><name pos:start="61:13" pos:end="61:19">hdr_tmp</name><operator pos:start="61:20" pos:end="61:20">.</operator><name pos:start="61:21" pos:end="61:39">flushed_file_offset</name></name> <operator pos:start="61:41" pos:end="61:41">&gt;</operator> <call pos:start="61:43" pos:end="61:70"><name pos:start="61:43" pos:end="61:56">bdrv_getlength</name><argument_list pos:start="61:57" pos:end="61:70">(<argument pos:start="61:58" pos:end="61:69"><expr pos:start="61:58" pos:end="61:69"><name pos:start="61:58" pos:end="61:69"><name pos:start="61:58" pos:end="61:59">bs</name><operator pos:start="61:60" pos:end="61:61">-&gt;</operator><name pos:start="61:62" pos:end="61:65">file</name><operator pos:start="61:66" pos:end="61:67">-&gt;</operator><name pos:start="61:68" pos:end="61:69">bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:73" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:22">

            <expr_stmt pos:start="63:13" pos:end="63:26"><expr pos:start="63:13" pos:end="63:25"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <operator pos:start="63:19" pos:end="63:19">-</operator><name pos:start="63:20" pos:end="63:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="65:13" pos:end="65:22">goto <name pos:start="65:18" pos:end="65:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:73"><expr pos:start="71:9" pos:end="71:72"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:72"><name pos:start="71:15" pos:end="71:32">vhdx_log_read_desc</name><argument_list pos:start="71:33" pos:end="71:72">(<argument pos:start="71:34" pos:end="71:35"><expr pos:start="71:34" pos:end="71:35"><name pos:start="71:34" pos:end="71:35">bs</name></expr></argument>, <argument pos:start="71:38" pos:end="71:38"><expr pos:start="71:38" pos:end="71:38"><name pos:start="71:38" pos:end="71:38">s</name></expr></argument>, <argument pos:start="71:41" pos:end="71:50"><expr pos:start="71:41" pos:end="71:50"><operator pos:start="71:41" pos:end="71:41">&amp;</operator><name pos:start="71:42" pos:end="71:50"><name pos:start="71:42" pos:end="71:45">logs</name><operator pos:start="71:46" pos:end="71:47">-&gt;</operator><name pos:start="71:48" pos:end="71:50">log</name></name></expr></argument>, <argument pos:start="71:53" pos:end="71:65"><expr pos:start="71:53" pos:end="71:65"><operator pos:start="71:53" pos:end="71:53">&amp;</operator><name pos:start="71:54" pos:end="71:65">desc_entries</name></expr></argument>, <argument pos:start="71:68" pos:end="71:71"><expr pos:start="71:68" pos:end="71:71"><name pos:start="71:68" pos:end="71:71">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="77:9"><if pos:start="73:9" pos:end="77:9">if <condition pos:start="73:12" pos:end="73:20">(<expr pos:start="73:13" pos:end="73:19"><name pos:start="73:13" pos:end="73:15">ret</name> <operator pos:start="73:17" pos:end="73:17">&lt;</operator> <literal type="number" pos:start="73:19" pos:end="73:19">0</literal></expr>)</condition> <block pos:start="73:22" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:22">

            <goto pos:start="75:13" pos:end="75:22">goto <name pos:start="75:18" pos:end="75:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <for pos:start="81:9" pos:end="119:9">for <control pos:start="81:13" pos:end="81:64">(<init pos:start="81:14" pos:end="81:19"><expr pos:start="81:14" pos:end="81:18"><name pos:start="81:14" pos:end="81:14">i</name> <operator pos:start="81:16" pos:end="81:16">=</operator> <literal type="number" pos:start="81:18" pos:end="81:18">0</literal></expr>;</init> <condition pos:start="81:21" pos:end="81:59"><expr pos:start="81:21" pos:end="81:58"><name pos:start="81:21" pos:end="81:21">i</name> <operator pos:start="81:23" pos:end="81:23">&lt;</operator> <name pos:start="81:25" pos:end="81:58"><name pos:start="81:25" pos:end="81:36">desc_entries</name><operator pos:start="81:37" pos:end="81:38">-&gt;</operator><name pos:start="81:39" pos:end="81:41">hdr</name><operator pos:start="81:42" pos:end="81:42">.</operator><name pos:start="81:43" pos:end="81:58">descriptor_count</name></name></expr>;</condition> <incr pos:start="81:61" pos:end="81:63"><expr pos:start="81:61" pos:end="81:63"><name pos:start="81:61" pos:end="81:61">i</name><operator pos:start="81:62" pos:end="81:63">++</operator></expr></incr>)</control> <block pos:start="81:66" pos:end="119:9">{<block_content pos:start="83:13" pos:end="117:13">

            <if_stmt pos:start="83:13" pos:end="107:13"><if pos:start="83:13" pos:end="107:13">if <condition pos:start="83:16" pos:end="83:75">(<expr pos:start="83:17" pos:end="83:74"><name pos:start="83:17" pos:end="83:37"><name pos:start="83:17" pos:end="83:28">desc_entries</name><operator pos:start="83:29" pos:end="83:30">-&gt;</operator><name pos:start="83:31" pos:end="83:34">desc</name><index pos:start="83:35" pos:end="83:37">[<expr pos:start="83:36" pos:end="83:36"><name pos:start="83:36" pos:end="83:36">i</name></expr>]</index></name><operator pos:start="83:38" pos:end="83:38">.</operator><name pos:start="83:39" pos:end="83:47">signature</name> <operator pos:start="83:49" pos:end="83:50">==</operator> <name pos:start="83:52" pos:end="83:74">VHDX_LOG_DESC_SIGNATURE</name></expr>)</condition> <block pos:start="83:77" pos:end="107:13">{<block_content pos:start="87:17" pos:end="105:46">

                <comment type="block" pos:start="85:17" pos:end="85:60">/* data sector, so read a sector to flush */</comment>

                <expr_stmt pos:start="87:17" pos:end="89:60"><expr pos:start="87:17" pos:end="89:59"><name pos:start="87:17" pos:end="87:19">ret</name> <operator pos:start="87:21" pos:end="87:21">=</operator> <call pos:start="87:23" pos:end="89:59"><name pos:start="87:23" pos:end="87:43">vhdx_log_read_sectors</name><argument_list pos:start="87:44" pos:end="89:59">(<argument pos:start="87:45" pos:end="87:46"><expr pos:start="87:45" pos:end="87:46"><name pos:start="87:45" pos:end="87:46">bs</name></expr></argument>, <argument pos:start="87:49" pos:end="87:58"><expr pos:start="87:49" pos:end="87:58"><operator pos:start="87:49" pos:end="87:49">&amp;</operator><name pos:start="87:50" pos:end="87:58"><name pos:start="87:50" pos:end="87:53">logs</name><operator pos:start="87:54" pos:end="87:55">-&gt;</operator><name pos:start="87:56" pos:end="87:58">log</name></name></expr></argument>, <argument pos:start="87:61" pos:end="87:73"><expr pos:start="87:61" pos:end="87:73"><operator pos:start="87:61" pos:end="87:61">&amp;</operator><name pos:start="87:62" pos:end="87:73">sectors_read</name></expr></argument>,

                                            <argument pos:start="89:45" pos:end="89:48"><expr pos:start="89:45" pos:end="89:48"><name pos:start="89:45" pos:end="89:48">data</name></expr></argument>, <argument pos:start="89:51" pos:end="89:51"><expr pos:start="89:51" pos:end="89:51"><literal type="number" pos:start="89:51" pos:end="89:51">1</literal></expr></argument>, <argument pos:start="89:54" pos:end="89:58"><expr pos:start="89:54" pos:end="89:58"><name pos:start="89:54" pos:end="89:58">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="91:17" pos:end="95:17"><if pos:start="91:17" pos:end="95:17">if <condition pos:start="91:20" pos:end="91:28">(<expr pos:start="91:21" pos:end="91:27"><name pos:start="91:21" pos:end="91:23">ret</name> <operator pos:start="91:25" pos:end="91:25">&lt;</operator> <literal type="number" pos:start="91:27" pos:end="91:27">0</literal></expr>)</condition> <block pos:start="91:30" pos:end="95:17">{<block_content pos:start="93:21" pos:end="93:30">

                    <goto pos:start="93:21" pos:end="93:30">goto <name pos:start="93:26" pos:end="93:29">exit</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="97:17" pos:end="103:17"><if pos:start="97:17" pos:end="103:17">if <condition pos:start="97:20" pos:end="97:38">(<expr pos:start="97:21" pos:end="97:37"><name pos:start="97:21" pos:end="97:32">sectors_read</name> <operator pos:start="97:34" pos:end="97:35">!=</operator> <literal type="number" pos:start="97:37" pos:end="97:37">1</literal></expr>)</condition> <block pos:start="97:40" pos:end="103:17">{<block_content pos:start="99:21" pos:end="101:30">

                    <expr_stmt pos:start="99:21" pos:end="99:34"><expr pos:start="99:21" pos:end="99:33"><name pos:start="99:21" pos:end="99:23">ret</name> <operator pos:start="99:25" pos:end="99:25">=</operator> <operator pos:start="99:27" pos:end="99:27">-</operator><name pos:start="99:28" pos:end="99:33">EINVAL</name></expr>;</expr_stmt>

                    <goto pos:start="101:21" pos:end="101:30">goto <name pos:start="101:26" pos:end="101:29">exit</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:46"><expr pos:start="105:17" pos:end="105:45"><call pos:start="105:17" pos:end="105:45"><name pos:start="105:17" pos:end="105:39">vhdx_log_data_le_import</name><argument_list pos:start="105:40" pos:end="105:45">(<argument pos:start="105:41" pos:end="105:44"><expr pos:start="105:41" pos:end="105:44"><name pos:start="105:41" pos:end="105:44">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="111:13" pos:end="111:72"><expr pos:start="111:13" pos:end="111:71"><name pos:start="111:13" pos:end="111:15">ret</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <call pos:start="111:19" pos:end="111:71"><name pos:start="111:19" pos:end="111:37">vhdx_log_flush_desc</name><argument_list pos:start="111:38" pos:end="111:71">(<argument pos:start="111:39" pos:end="111:40"><expr pos:start="111:39" pos:end="111:40"><name pos:start="111:39" pos:end="111:40">bs</name></expr></argument>, <argument pos:start="111:43" pos:end="111:64"><expr pos:start="111:43" pos:end="111:64"><operator pos:start="111:43" pos:end="111:43">&amp;</operator><name pos:start="111:44" pos:end="111:64"><name pos:start="111:44" pos:end="111:55">desc_entries</name><operator pos:start="111:56" pos:end="111:57">-&gt;</operator><name pos:start="111:58" pos:end="111:61">desc</name><index pos:start="111:62" pos:end="111:64">[<expr pos:start="111:63" pos:end="111:63"><name pos:start="111:63" pos:end="111:63">i</name></expr>]</index></name></expr></argument>, <argument pos:start="111:67" pos:end="111:70"><expr pos:start="111:67" pos:end="111:70"><name pos:start="111:67" pos:end="111:70">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="113:13" pos:end="117:13"><if pos:start="113:13" pos:end="117:13">if <condition pos:start="113:16" pos:end="113:24">(<expr pos:start="113:17" pos:end="113:23"><name pos:start="113:17" pos:end="113:19">ret</name> <operator pos:start="113:21" pos:end="113:21">&lt;</operator> <literal type="number" pos:start="113:23" pos:end="113:23">0</literal></expr>)</condition> <block pos:start="113:26" pos:end="117:13">{<block_content pos:start="115:17" pos:end="115:26">

                <goto pos:start="115:17" pos:end="115:26">goto <name pos:start="115:22" pos:end="115:25">exit</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="121:9" pos:end="135:9"><if pos:start="121:9" pos:end="135:9">if <condition pos:start="121:12" pos:end="121:78">(<expr pos:start="121:13" pos:end="121:77"><call pos:start="121:13" pos:end="121:40"><name pos:start="121:13" pos:end="121:26">bdrv_getlength</name><argument_list pos:start="121:27" pos:end="121:40">(<argument pos:start="121:28" pos:end="121:39"><expr pos:start="121:28" pos:end="121:39"><name pos:start="121:28" pos:end="121:39"><name pos:start="121:28" pos:end="121:29">bs</name><operator pos:start="121:30" pos:end="121:31">-&gt;</operator><name pos:start="121:32" pos:end="121:35">file</name><operator pos:start="121:36" pos:end="121:37">-&gt;</operator><name pos:start="121:38" pos:end="121:39">bs</name></name></expr></argument>)</argument_list></call> <operator pos:start="121:42" pos:end="121:42">&lt;</operator> <name pos:start="121:44" pos:end="121:77"><name pos:start="121:44" pos:end="121:55">desc_entries</name><operator pos:start="121:56" pos:end="121:57">-&gt;</operator><name pos:start="121:58" pos:end="121:60">hdr</name><operator pos:start="121:61" pos:end="121:61">.</operator><name pos:start="121:62" pos:end="121:77">last_file_offset</name></name></expr>)</condition> <block pos:start="121:80" pos:end="135:9">{<block_content pos:start="123:13" pos:end="133:13">

            <expr_stmt pos:start="123:13" pos:end="123:63"><expr pos:start="123:13" pos:end="123:62"><name pos:start="123:13" pos:end="123:25">new_file_size</name> <operator pos:start="123:27" pos:end="123:27">=</operator> <name pos:start="123:29" pos:end="123:62"><name pos:start="123:29" pos:end="123:40">desc_entries</name><operator pos:start="123:41" pos:end="123:42">-&gt;</operator><name pos:start="123:43" pos:end="123:45">hdr</name><operator pos:start="123:46" pos:end="123:46">.</operator><name pos:start="123:47" pos:end="123:62">last_file_offset</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="125:13" pos:end="133:13"><if pos:start="125:13" pos:end="133:13">if <condition pos:start="125:16" pos:end="125:44">(<expr pos:start="125:17" pos:end="125:43"><name pos:start="125:17" pos:end="125:29">new_file_size</name> <operator pos:start="125:31" pos:end="125:31">%</operator> <operator pos:start="125:33" pos:end="125:33">(</operator><literal type="number" pos:start="125:34" pos:end="125:37">1024</literal><operator pos:start="125:38" pos:end="125:38">*</operator><literal type="number" pos:start="125:39" pos:end="125:42">1024</literal><operator pos:start="125:43" pos:end="125:43">)</operator></expr>)</condition> <block pos:start="125:46" pos:end="133:13">{<block_content pos:start="129:17" pos:end="131:80">

                <comment type="block" pos:start="127:17" pos:end="127:54">/* round up to nearest 1MB boundary */</comment>

                <expr_stmt pos:start="129:17" pos:end="129:66"><expr pos:start="129:17" pos:end="129:65"><name pos:start="129:17" pos:end="129:29">new_file_size</name> <operator pos:start="129:31" pos:end="129:31">=</operator> <operator pos:start="129:33" pos:end="129:33">(</operator><operator pos:start="129:34" pos:end="129:34">(</operator><name pos:start="129:35" pos:end="129:47">new_file_size</name> <operator pos:start="129:49" pos:end="129:50">&gt;&gt;</operator> <literal type="number" pos:start="129:52" pos:end="129:53">20</literal><operator pos:start="129:54" pos:end="129:54">)</operator> <operator pos:start="129:56" pos:end="129:56">+</operator> <literal type="number" pos:start="129:58" pos:end="129:58">1</literal><operator pos:start="129:59" pos:end="129:59">)</operator> <operator pos:start="129:61" pos:end="129:62">&lt;&lt;</operator> <literal type="number" pos:start="129:64" pos:end="129:65">20</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:80"><expr pos:start="131:17" pos:end="131:79"><call pos:start="131:17" pos:end="131:79"><name pos:start="131:17" pos:end="131:29">bdrv_truncate</name><argument_list pos:start="131:30" pos:end="131:79">(<argument pos:start="131:31" pos:end="131:38"><expr pos:start="131:31" pos:end="131:38"><name pos:start="131:31" pos:end="131:38"><name pos:start="131:31" pos:end="131:32">bs</name><operator pos:start="131:33" pos:end="131:34">-&gt;</operator><name pos:start="131:35" pos:end="131:38">file</name></name></expr></argument>, <argument pos:start="131:41" pos:end="131:53"><expr pos:start="131:41" pos:end="131:53"><name pos:start="131:41" pos:end="131:53">new_file_size</name></expr></argument>, <argument pos:start="131:56" pos:end="131:72"><expr pos:start="131:56" pos:end="131:72"><name pos:start="131:56" pos:end="131:72">PREALLOC_MODE_OFF</name></expr></argument>, <argument pos:start="131:75" pos:end="131:78"><expr pos:start="131:75" pos:end="131:78"><name pos:start="131:75" pos:end="131:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:33"><expr pos:start="137:9" pos:end="137:32"><call pos:start="137:9" pos:end="137:32"><name pos:start="137:9" pos:end="137:18">qemu_vfree</name><argument_list pos:start="137:19" pos:end="137:32">(<argument pos:start="137:20" pos:end="137:31"><expr pos:start="137:20" pos:end="137:31"><name pos:start="137:20" pos:end="137:31">desc_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:28"><expr pos:start="139:9" pos:end="139:27"><name pos:start="139:9" pos:end="139:20">desc_entries</name> <operator pos:start="139:22" pos:end="139:22">=</operator> <name pos:start="139:24" pos:end="139:27">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="145:5" pos:end="145:19"><expr pos:start="145:5" pos:end="145:18"><call pos:start="145:5" pos:end="145:18"><name pos:start="145:5" pos:end="145:14">bdrv_flush</name><argument_list pos:start="145:15" pos:end="145:18">(<argument pos:start="145:16" pos:end="145:17"><expr pos:start="145:16" pos:end="145:17"><name pos:start="145:16" pos:end="145:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="147:5" pos:end="149:74">/* once the log is fully flushed, indicate that we have an empty log

     * now.  This also sets the log guid to 0, to indicate an empty log */</comment>

    <expr_stmt pos:start="151:5" pos:end="151:26"><expr pos:start="151:5" pos:end="151:25"><call pos:start="151:5" pos:end="151:25"><name pos:start="151:5" pos:end="151:18">vhdx_log_reset</name><argument_list pos:start="151:19" pos:end="151:25">(<argument pos:start="151:20" pos:end="151:21"><expr pos:start="151:20" pos:end="151:21"><name pos:start="151:20" pos:end="151:21">bs</name></expr></argument>, <argument pos:start="151:24" pos:end="151:24"><expr pos:start="151:24" pos:end="151:24"><name pos:start="151:24" pos:end="151:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="155:1" pos:end="155:5"><name pos:start="155:1" pos:end="155:4">exit</name>:</label>

    <expr_stmt pos:start="157:5" pos:end="157:21"><expr pos:start="157:5" pos:end="157:20"><call pos:start="157:5" pos:end="157:20"><name pos:start="157:5" pos:end="157:14">qemu_vfree</name><argument_list pos:start="157:15" pos:end="157:20">(<argument pos:start="157:16" pos:end="157:19"><expr pos:start="157:16" pos:end="157:19"><name pos:start="157:16" pos:end="157:19">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:29"><expr pos:start="159:5" pos:end="159:28"><call pos:start="159:5" pos:end="159:28"><name pos:start="159:5" pos:end="159:14">qemu_vfree</name><argument_list pos:start="159:15" pos:end="159:28">(<argument pos:start="159:16" pos:end="159:27"><expr pos:start="159:16" pos:end="159:27"><name pos:start="159:16" pos:end="159:27">desc_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="161:5" pos:end="161:15">return <expr pos:start="161:12" pos:end="161:14"><name pos:start="161:12" pos:end="161:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
