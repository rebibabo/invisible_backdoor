<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13029.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:31">ivshmem_io_read</name><parameter_list pos:start="1:32" pos:end="3:46">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">opaque</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:57"><decl pos:start="1:47" pos:end="1:57"><type pos:start="1:47" pos:end="1:57"><name pos:start="1:47" pos:end="1:52">hwaddr</name></type> <name pos:start="1:54" pos:end="1:57">addr</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:45"><decl pos:start="3:33" pos:end="3:45"><type pos:start="3:33" pos:end="3:45"><name pos:start="3:33" pos:end="3:40">unsigned</name></type> <name pos:start="3:42" pos:end="3:45">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="65:1">{<block_content pos:start="9:5" pos:end="63:15">



    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">IVShmemState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:19">s</name> <init pos:start="9:21" pos:end="9:28">= <expr pos:start="9:23" pos:end="9:28"><name pos:start="9:23" pos:end="9:28">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">ret</name></decl>;</decl_stmt>



    <switch pos:start="15:5" pos:end="59:5">switch <condition pos:start="15:12" pos:end="15:17">(<expr pos:start="15:13" pos:end="15:16"><name pos:start="15:13" pos:end="15:16">addr</name></expr>)</condition>

    <block pos:start="17:5" pos:end="59:5">{<block_content pos:start="19:9" pos:end="57:20">

        <case pos:start="19:9" pos:end="19:22">case <expr pos:start="19:14" pos:end="19:21"><name pos:start="19:14" pos:end="19:21">INTRMASK</name></expr>:</case>

            <expr_stmt pos:start="21:13" pos:end="21:43"><expr pos:start="21:13" pos:end="21:42"><name pos:start="21:13" pos:end="21:15">ret</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <call pos:start="21:19" pos:end="21:42"><name pos:start="21:19" pos:end="21:39">ivshmem_IntrMask_read</name><argument_list pos:start="21:40" pos:end="21:42">(<argument pos:start="21:41" pos:end="21:41"><expr pos:start="21:41" pos:end="21:41"><name pos:start="21:41" pos:end="21:41">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="23:13" pos:end="23:18">break;</break>



        <case pos:start="27:9" pos:end="27:24">case <expr pos:start="27:14" pos:end="27:23"><name pos:start="27:14" pos:end="27:23">INTRSTATUS</name></expr>:</case>

            <expr_stmt pos:start="29:13" pos:end="29:45"><expr pos:start="29:13" pos:end="29:44"><name pos:start="29:13" pos:end="29:15">ret</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="29:44"><name pos:start="29:19" pos:end="29:41">ivshmem_IntrStatus_read</name><argument_list pos:start="29:42" pos:end="29:44">(<argument pos:start="29:43" pos:end="29:43"><expr pos:start="29:43" pos:end="29:43"><name pos:start="29:43" pos:end="29:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="31:13" pos:end="31:18">break;</break>



        <case pos:start="35:9" pos:end="35:24">case <expr pos:start="35:14" pos:end="35:23"><name pos:start="35:14" pos:end="35:23">IVPOSITION</name></expr>:</case>

            <comment type="block" pos:start="37:13" pos:end="37:57">/* return my VM ID if the memory is mapped */</comment>

            <if_stmt pos:start="39:13" pos:end="47:13"><if pos:start="39:13" pos:end="43:13">if <condition pos:start="39:16" pos:end="39:31">(<expr pos:start="39:17" pos:end="39:30"><name pos:start="39:17" pos:end="39:25"><name pos:start="39:17" pos:end="39:17">s</name><operator pos:start="39:18" pos:end="39:19">-&gt;</operator><name pos:start="39:20" pos:end="39:25">shm_fd</name></name> <operator pos:start="39:27" pos:end="39:28">&gt;=</operator> <literal type="number" pos:start="39:30" pos:end="39:30">0</literal></expr>)</condition> <block pos:start="39:33" pos:end="43:13">{<block_content pos:start="41:17" pos:end="41:31">

                <expr_stmt pos:start="41:17" pos:end="41:31"><expr pos:start="41:17" pos:end="41:30"><name pos:start="41:17" pos:end="41:19">ret</name> <operator pos:start="41:21" pos:end="41:21">=</operator> <name pos:start="41:23" pos:end="41:30"><name pos:start="41:23" pos:end="41:23">s</name><operator pos:start="41:24" pos:end="41:25">-&gt;</operator><name pos:start="41:26" pos:end="41:30">vm_id</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="43:15" pos:end="47:13">else <block pos:start="43:20" pos:end="47:13">{<block_content pos:start="45:17" pos:end="45:25">

                <expr_stmt pos:start="45:17" pos:end="45:25"><expr pos:start="45:17" pos:end="45:24"><name pos:start="45:17" pos:end="45:19">ret</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <operator pos:start="45:23" pos:end="45:23">-</operator><literal type="number" pos:start="45:24" pos:end="45:24">1</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>



        <default pos:start="53:9" pos:end="53:16">default:</default>

            <expr_stmt pos:start="55:13" pos:end="55:77"><expr pos:start="55:13" pos:end="55:76"><call pos:start="55:13" pos:end="55:76"><name pos:start="55:13" pos:end="55:27">IVSHMEM_DPRINTF</name><argument_list pos:start="55:28" pos:end="55:76">(<argument pos:start="55:29" pos:end="55:69"><expr pos:start="55:29" pos:end="55:69"><literal type="string" pos:start="55:29" pos:end="55:49">"why are we reading "</literal> <name pos:start="55:51" pos:end="55:64">TARGET_FMT_plx</name> <literal type="string" pos:start="55:66" pos:end="55:69">"\n"</literal></expr></argument>, <argument pos:start="55:72" pos:end="55:75"><expr pos:start="55:72" pos:end="55:75"><name pos:start="55:72" pos:end="55:75">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:20"><expr pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:15">ret</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <literal type="number" pos:start="57:19" pos:end="57:19">0</literal></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <return pos:start="63:5" pos:end="63:15">return <expr pos:start="63:12" pos:end="63:14"><name pos:start="63:12" pos:end="63:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
