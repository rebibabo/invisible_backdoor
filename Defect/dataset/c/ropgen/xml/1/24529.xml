<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24529.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">asf_read_simple_index</name><parameter_list pos:start="1:33" pos:end="1:77">(<parameter pos:start="1:34" pos:end="1:51"><decl pos:start="1:34" pos:end="1:51"><type pos:start="1:34" pos:end="1:51"><name pos:start="1:34" pos:end="1:48">AVFormatContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:76"><decl pos:start="1:54" pos:end="1:76"><type pos:start="1:54" pos:end="1:76"><specifier pos:start="1:54" pos:end="1:58">const</specifier> <name pos:start="1:60" pos:end="1:73">GUIDParseTable</name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type><name pos:start="1:76" pos:end="1:76">g</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">ASFContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">asf</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">AVIOContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">pb</name> <init pos:start="7:21" pos:end="7:27">= <expr pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:23">s</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">AVStream</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">st</name>    <init pos:start="9:21" pos:end="9:26">= <expr pos:start="9:23" pos:end="9:26"><name pos:start="9:23" pos:end="9:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:21">interval</name></decl>;</decl_stmt> <comment type="line" pos:start="11:24" pos:end="11:84">// index entry time interval in 100 ns units, usually it's 1s</comment>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:20">pkt_num</name></decl>, <decl pos:start="13:23" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:23" pos:end="13:32">nb_entries</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int32_t</name></type> <name pos:start="15:13" pos:end="15:24">prev_pkt_num</name> <init pos:start="15:26" pos:end="15:29">= <expr pos:start="15:28" pos:end="15:29"><operator pos:start="15:28" pos:end="15:28">-</operator><literal type="number" pos:start="15:29" pos:end="15:29">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:14"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:33"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:17">size</name> <init pos:start="19:19" pos:end="19:33">= <expr pos:start="19:21" pos:end="19:33"><call pos:start="19:21" pos:end="19:33"><name pos:start="19:21" pos:end="19:29">avio_rl64</name><argument_list pos:start="19:30" pos:end="19:33">(<argument pos:start="19:31" pos:end="19:32"><expr pos:start="19:31" pos:end="19:32"><name pos:start="19:31" pos:end="19:32">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="line" pos:start="23:5" pos:end="23:87">// simple index objects should be ordered by stream number, this loop tries to find</comment>

    <comment type="line" pos:start="25:5" pos:end="25:41">// the first not indexed video stream</comment>

    <for pos:start="27:5" pos:end="39:5">for <control pos:start="27:9" pos:end="27:41">(<init pos:start="27:10" pos:end="27:15"><expr pos:start="27:10" pos:end="27:14"><name pos:start="27:10" pos:end="27:10">i</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</init> <condition pos:start="27:17" pos:end="27:36"><expr pos:start="27:17" pos:end="27:35"><name pos:start="27:17" pos:end="27:17">i</name> <operator pos:start="27:19" pos:end="27:19">&lt;</operator> <name pos:start="27:21" pos:end="27:35"><name pos:start="27:21" pos:end="27:23">asf</name><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:35">nb_streams</name></name></expr>;</condition> <incr pos:start="27:38" pos:end="27:40"><expr pos:start="27:38" pos:end="27:40"><name pos:start="27:38" pos:end="27:38">i</name><operator pos:start="27:39" pos:end="27:40">++</operator></expr></incr>)</control> <block pos:start="27:43" pos:end="39:5">{<block_content pos:start="29:9" pos:end="37:9">

        <if_stmt pos:start="29:9" pos:end="37:9"><if pos:start="29:9" pos:end="37:9">if <condition pos:start="29:12" pos:end="29:85">(<expr pos:start="29:13" pos:end="29:84"><operator pos:start="29:13" pos:end="29:13">(</operator><name pos:start="29:14" pos:end="29:27"><name pos:start="29:14" pos:end="29:16">asf</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:24">asf_st</name><index pos:start="29:25" pos:end="29:27">[<expr pos:start="29:26" pos:end="29:26"><name pos:start="29:26" pos:end="29:26">i</name></expr>]</index></name><operator pos:start="29:28" pos:end="29:29">-&gt;</operator><name pos:start="29:30" pos:end="29:33">type</name> <operator pos:start="29:35" pos:end="29:36">==</operator> <name pos:start="29:38" pos:end="29:55">AVMEDIA_TYPE_VIDEO</name><operator pos:start="29:56" pos:end="29:56">)</operator> <operator pos:start="29:58" pos:end="29:59">&amp;&amp;</operator> <operator pos:start="29:61" pos:end="29:61">!</operator><name pos:start="29:62" pos:end="29:75"><name pos:start="29:62" pos:end="29:64">asf</name><operator pos:start="29:65" pos:end="29:66">-&gt;</operator><name pos:start="29:67" pos:end="29:72">asf_st</name><index pos:start="29:73" pos:end="29:75">[<expr pos:start="29:74" pos:end="29:74"><name pos:start="29:74" pos:end="29:74">i</name></expr>]</index></name><operator pos:start="29:76" pos:end="29:77">-&gt;</operator><name pos:start="29:78" pos:end="29:84">indexed</name></expr>)</condition> <block pos:start="29:87" pos:end="37:9">{<block_content pos:start="31:13" pos:end="35:18">

            <expr_stmt pos:start="31:13" pos:end="31:40"><expr pos:start="31:13" pos:end="31:39"><name pos:start="31:13" pos:end="31:26"><name pos:start="31:13" pos:end="31:15">asf</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:23">asf_st</name><index pos:start="31:24" pos:end="31:26">[<expr pos:start="31:25" pos:end="31:25"><name pos:start="31:25" pos:end="31:25">i</name></expr>]</index></name><operator pos:start="31:27" pos:end="31:28">-&gt;</operator><name pos:start="31:29" pos:end="31:35">indexed</name> <operator pos:start="31:37" pos:end="31:37">=</operator> <literal type="number" pos:start="31:39" pos:end="31:39">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:51"><expr pos:start="33:13" pos:end="33:50"><name pos:start="33:13" pos:end="33:14">st</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <name pos:start="33:18" pos:end="33:50"><name pos:start="33:18" pos:end="33:18">s</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:27">streams</name><index pos:start="33:28" pos:end="33:50">[<expr pos:start="33:29" pos:end="33:49"><name pos:start="33:29" pos:end="33:42"><name pos:start="33:29" pos:end="33:31">asf</name><operator pos:start="33:32" pos:end="33:33">-&gt;</operator><name pos:start="33:34" pos:end="33:39">asf_st</name><index pos:start="33:40" pos:end="33:42">[<expr pos:start="33:41" pos:end="33:41"><name pos:start="33:41" pos:end="33:41">i</name></expr>]</index></name><operator pos:start="33:43" pos:end="33:44">-&gt;</operator><name pos:start="33:45" pos:end="33:49">index</name></expr>]</index></name></expr>;</expr_stmt>

            <break pos:start="35:13" pos:end="35:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:12">(<expr pos:start="41:9" pos:end="41:11"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:11">st</name></expr>)</condition> <block pos:start="41:14" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:17">

        <expr_stmt pos:start="43:9" pos:end="43:33"><expr pos:start="43:9" pos:end="43:32"><call pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:17">avio_skip</name><argument_list pos:start="43:18" pos:end="43:32">(<argument pos:start="43:19" pos:end="43:20"><expr pos:start="43:19" pos:end="43:20"><name pos:start="43:19" pos:end="43:20">pb</name></expr></argument>, <argument pos:start="43:23" pos:end="43:31"><expr pos:start="43:23" pos:end="43:31"><name pos:start="43:23" pos:end="43:26">size</name> <operator pos:start="43:28" pos:end="43:28">-</operator> <literal type="number" pos:start="43:30" pos:end="43:31">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="43:35" pos:end="43:82">// if there's no video stream, skip index object</comment>

        <return pos:start="45:9" pos:end="45:17">return <expr pos:start="45:16" pos:end="45:16"><literal type="number" pos:start="45:16" pos:end="45:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:22"><expr pos:start="49:5" pos:end="49:21"><call pos:start="49:5" pos:end="49:21"><name pos:start="49:5" pos:end="49:13">avio_skip</name><argument_list pos:start="49:14" pos:end="49:21">(<argument pos:start="49:15" pos:end="49:16"><expr pos:start="49:15" pos:end="49:16"><name pos:start="49:15" pos:end="49:16">pb</name></expr></argument>, <argument pos:start="49:19" pos:end="49:20"><expr pos:start="49:19" pos:end="49:20"><literal type="number" pos:start="49:19" pos:end="49:20">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="49:24" pos:end="49:38">// skip File ID</comment>

    <expr_stmt pos:start="51:5" pos:end="51:29"><expr pos:start="51:5" pos:end="51:28"><name pos:start="51:5" pos:end="51:12">interval</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <call pos:start="51:16" pos:end="51:28"><name pos:start="51:16" pos:end="51:24">avio_rl64</name><argument_list pos:start="51:25" pos:end="51:28">(<argument pos:start="51:26" pos:end="51:27"><expr pos:start="51:26" pos:end="51:27"><name pos:start="51:26" pos:end="51:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:21"><expr pos:start="53:5" pos:end="53:20"><call pos:start="53:5" pos:end="53:20"><name pos:start="53:5" pos:end="53:13">avio_skip</name><argument_list pos:start="53:14" pos:end="53:20">(<argument pos:start="53:15" pos:end="53:16"><expr pos:start="53:15" pos:end="53:16"><name pos:start="53:15" pos:end="53:16">pb</name></expr></argument>, <argument pos:start="53:19" pos:end="53:19"><expr pos:start="53:19" pos:end="53:19"><literal type="number" pos:start="53:19" pos:end="53:19">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:31"><expr pos:start="55:5" pos:end="55:30"><name pos:start="55:5" pos:end="55:14">nb_entries</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <call pos:start="55:18" pos:end="55:30"><name pos:start="55:18" pos:end="55:26">avio_rl32</name><argument_list pos:start="55:27" pos:end="55:30">(<argument pos:start="55:28" pos:end="55:29"><expr pos:start="55:28" pos:end="55:29"><name pos:start="55:28" pos:end="55:29">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="57:5" pos:end="83:5">for <control pos:start="57:9" pos:end="57:36">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:31"><expr pos:start="57:17" pos:end="57:30"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:30">nb_entries</name></expr>;</condition> <incr pos:start="57:33" pos:end="57:35"><expr pos:start="57:33" pos:end="57:35"><name pos:start="57:33" pos:end="57:33">i</name><operator pos:start="57:34" pos:end="57:35">++</operator></expr></incr>)</control> <block pos:start="57:38" pos:end="83:5">{<block_content pos:start="59:9" pos:end="81:9">

        <expr_stmt pos:start="59:9" pos:end="59:32"><expr pos:start="59:9" pos:end="59:31"><name pos:start="59:9" pos:end="59:15">pkt_num</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:31"><name pos:start="59:19" pos:end="59:27">avio_rl32</name><argument_list pos:start="59:28" pos:end="59:31">(<argument pos:start="59:29" pos:end="59:30"><expr pos:start="59:29" pos:end="59:30"><name pos:start="59:29" pos:end="59:30">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:31"><expr pos:start="61:9" pos:end="61:30"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:30"><name pos:start="61:15" pos:end="61:23">avio_skip</name><argument_list pos:start="61:24" pos:end="61:30">(<argument pos:start="61:25" pos:end="61:26"><expr pos:start="61:25" pos:end="61:26"><name pos:start="61:25" pos:end="61:26">pb</name></expr></argument>, <argument pos:start="61:29" pos:end="61:29"><expr pos:start="61:29" pos:end="61:29"><literal type="number" pos:start="61:29" pos:end="61:29">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:20">(<expr pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:17">&lt;</operator> <literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr>)</condition> <block pos:start="63:22" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:23">

            <expr_stmt pos:start="65:13" pos:end="65:83"><expr pos:start="65:13" pos:end="65:82"><call pos:start="65:13" pos:end="65:82"><name pos:start="65:13" pos:end="65:18">av_log</name><argument_list pos:start="65:19" pos:end="65:82">(<argument pos:start="65:20" pos:end="65:20"><expr pos:start="65:20" pos:end="65:20"><name pos:start="65:20" pos:end="65:20">s</name></expr></argument>, <argument pos:start="65:23" pos:end="65:34"><expr pos:start="65:23" pos:end="65:34"><name pos:start="65:23" pos:end="65:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:37" pos:end="65:81"><expr pos:start="65:37" pos:end="65:81"><literal type="string" pos:start="65:37" pos:end="65:81">"Skipping failed in asf_read_simple_index.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="67:13" pos:end="67:23">return <expr pos:start="67:20" pos:end="67:22"><name pos:start="67:20" pos:end="67:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="71:9" pos:end="81:9"><if pos:start="71:9" pos:end="81:9">if <condition pos:start="71:12" pos:end="71:36">(<expr pos:start="71:13" pos:end="71:35"><name pos:start="71:13" pos:end="71:24">prev_pkt_num</name> <operator pos:start="71:26" pos:end="71:27">!=</operator> <name pos:start="71:29" pos:end="71:35">pkt_num</name></expr>)</condition> <block pos:start="71:38" pos:end="81:9">{<block_content pos:start="73:13" pos:end="79:35">

            <expr_stmt pos:start="73:13" pos:end="77:70"><expr pos:start="73:13" pos:end="77:69"><call pos:start="73:13" pos:end="77:69"><name pos:start="73:13" pos:end="73:30">av_add_index_entry</name><argument_list pos:start="73:31" pos:end="77:69">(<argument pos:start="73:32" pos:end="73:33"><expr pos:start="73:32" pos:end="73:33"><name pos:start="73:32" pos:end="73:33">st</name></expr></argument>, <argument pos:start="73:36" pos:end="75:38"><expr pos:start="73:36" pos:end="75:38"><name pos:start="73:36" pos:end="73:59"><name pos:start="73:36" pos:end="73:38">asf</name><operator pos:start="73:39" pos:end="73:40">-&gt;</operator><name pos:start="73:41" pos:end="73:59">first_packet_offset</name></name> <operator pos:start="73:61" pos:end="73:61">+</operator> <name pos:start="73:63" pos:end="73:78"><name pos:start="73:63" pos:end="73:65">asf</name><operator pos:start="73:66" pos:end="73:67">-&gt;</operator><name pos:start="73:68" pos:end="73:78">packet_size</name></name> <operator pos:start="73:80" pos:end="73:80">*</operator>

                               <name pos:start="75:32" pos:end="75:38">pkt_num</name></expr></argument>, <argument pos:start="75:41" pos:end="75:70"><expr pos:start="75:41" pos:end="75:70"><call pos:start="75:41" pos:end="75:70"><name pos:start="75:41" pos:end="75:50">av_rescale</name><argument_list pos:start="75:51" pos:end="75:70">(<argument pos:start="75:52" pos:end="75:59"><expr pos:start="75:52" pos:end="75:59"><name pos:start="75:52" pos:end="75:59">interval</name></expr></argument>, <argument pos:start="75:62" pos:end="75:62"><expr pos:start="75:62" pos:end="75:62"><name pos:start="75:62" pos:end="75:62">i</name></expr></argument>, <argument pos:start="75:65" pos:end="75:69"><expr pos:start="75:65" pos:end="75:69"><literal type="number" pos:start="75:65" pos:end="75:69">10000</literal></expr></argument>)</argument_list></call></expr></argument>,

                               <argument pos:start="77:32" pos:end="77:47"><expr pos:start="77:32" pos:end="77:47"><name pos:start="77:32" pos:end="77:47"><name pos:start="77:32" pos:end="77:34">asf</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:47">packet_size</name></name></expr></argument>, <argument pos:start="77:50" pos:end="77:50"><expr pos:start="77:50" pos:end="77:50"><literal type="number" pos:start="77:50" pos:end="77:50">0</literal></expr></argument>, <argument pos:start="77:53" pos:end="77:68"><expr pos:start="77:53" pos:end="77:68"><name pos:start="77:53" pos:end="77:68">AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:35"><expr pos:start="79:13" pos:end="79:34"><name pos:start="79:13" pos:end="79:24">prev_pkt_num</name> <operator pos:start="79:26" pos:end="79:26">=</operator> <name pos:start="79:28" pos:end="79:34">pkt_num</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="85:5" pos:end="85:29"><expr pos:start="85:5" pos:end="85:28"><name pos:start="85:5" pos:end="85:24"><name pos:start="85:5" pos:end="85:7">asf</name><operator pos:start="85:8" pos:end="85:9">-&gt;</operator><name pos:start="85:10" pos:end="85:24">is_simple_index</name></name> <operator pos:start="85:26" pos:end="85:26">=</operator> <literal type="number" pos:start="85:28" pos:end="85:28">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:42"><expr pos:start="87:5" pos:end="87:41"><call pos:start="87:5" pos:end="87:41"><name pos:start="87:5" pos:end="87:18">align_position</name><argument_list pos:start="87:19" pos:end="87:41">(<argument pos:start="87:20" pos:end="87:21"><expr pos:start="87:20" pos:end="87:21"><name pos:start="87:20" pos:end="87:21">pb</name></expr></argument>, <argument pos:start="87:24" pos:end="87:34"><expr pos:start="87:24" pos:end="87:34"><name pos:start="87:24" pos:end="87:34"><name pos:start="87:24" pos:end="87:26">asf</name><operator pos:start="87:27" pos:end="87:28">-&gt;</operator><name pos:start="87:29" pos:end="87:34">offset</name></name></expr></argument>, <argument pos:start="87:37" pos:end="87:40"><expr pos:start="87:37" pos:end="87:40"><name pos:start="87:37" pos:end="87:40">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="91:5" pos:end="91:13">return <expr pos:start="91:12" pos:end="91:12"><literal type="number" pos:start="91:12" pos:end="91:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
